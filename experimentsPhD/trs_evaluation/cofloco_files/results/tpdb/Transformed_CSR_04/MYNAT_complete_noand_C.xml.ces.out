
Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. recursive  : [fun/4]
1. recursive  : [fun1/3]
2. recursive  : [fun10/2]
3. recursive  : [fun11/3]
4. recursive  : [fun12/2]
5. recursive  : [fun13/4]
6. recursive  : [fun14/4]
7. recursive  : [fun15/4]
8. recursive  : [fun16/2]
9. recursive  : [fun17/3]
10. recursive  : [fun18/4]
11. recursive  : [fun19/4]
12. recursive  : [fun2/4]
13. recursive  : [fun20/2]
14. recursive  : [fun21/3]
15. recursive  : [fun22/2]
16. recursive  : [fun23/4]
17. recursive  : [fun24/3]
18. recursive  : [fun25/3]
19. recursive  : [fun26/4]
20. recursive  : [fun27/4]
21. recursive  : [fun28/3]
22. recursive  : [fun29/4]
23. recursive  : [fun3/4]
24. recursive  : [fun30/4]
25. recursive  : [fun31/4]
26. recursive  : [fun4/3]
27. recursive  : [fun5/2]
28. recursive  : [fun6/4]
29. recursive  : [fun7/3]
30. recursive  : [fun8/4]
31. recursive  : [fun9/2]
32. recursive  : [isNat/2]
33. recursive  : [isNatKind/2]
34. recursive  : [plus/3]
35. non_recursive  : [proper/2]
36. recursive  : [s/2]
37. recursive  : [top/2]
38. recursive  : [x/3]
39. non_recursive  : [start/3]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into fun/4
1. SCC is partially evaluated into fun1/3
2. SCC is partially evaluated into fun10/2
3. SCC is partially evaluated into fun11/3
4. SCC is partially evaluated into fun12/2
5. SCC is partially evaluated into fun13/4
6. SCC is partially evaluated into fun14/4
7. SCC is partially evaluated into fun15/4
8. SCC is partially evaluated into fun16/2
9. SCC is partially evaluated into fun17/3
10. SCC is partially evaluated into fun18/4
11. SCC is partially evaluated into fun19/4
12. SCC is partially evaluated into fun2/4
13. SCC is partially evaluated into fun20/2
14. SCC is partially evaluated into fun21/3
15. SCC is partially evaluated into fun22/2
16. SCC is partially evaluated into fun23/4
17. SCC is partially evaluated into fun24/3
18. SCC is partially evaluated into fun25/3
19. SCC is partially evaluated into fun26/4
20. SCC is partially evaluated into fun27/4
21. SCC is partially evaluated into fun28/3
22. SCC is partially evaluated into fun29/4
23. SCC is partially evaluated into fun3/4
24. SCC is partially evaluated into fun30/4
25. SCC is partially evaluated into fun31/4
26. SCC is partially evaluated into fun4/3
27. SCC is partially evaluated into fun5/2
28. SCC is partially evaluated into fun6/4
29. SCC is partially evaluated into fun7/3
30. SCC is partially evaluated into fun8/4
31. SCC is partially evaluated into fun9/2
32. SCC is partially evaluated into isNat/2
33. SCC is partially evaluated into isNatKind/2
34. SCC is partially evaluated into plus/3
35. SCC is partially evaluated into proper/2
36. SCC is partially evaluated into s/2
37. SCC is partially evaluated into top/2
38. SCC is partially evaluated into x/3
39. SCC is partially evaluated into start/3

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations fun/4 
* CE 43 is refined into CE [150] 
* CE 42 is refined into CE [151] 
* CE 41 is refined into CE [152] 


#### Refined cost equations fun/4 
* CE 150: fun(V1,V,V2,Out) = 0
     [V2>=0,V>=0,V1>=0,Out=0] 
* CE 151: fun(V1,V,V2,Out) = 1+ fun(W2,V,V2,X2)
     [W2>=0,V2>=0,V>=0,X2+1=Out,W2+1=V1] 
* CE 152: fun(V1,V,V2,Out) = 1+ fun(W2,X2,Y2,Z2)
     [Y2>=0,X2>=0,W2>=0,Z2+1=Out,Y2+1=V2,X2+1=V,W2+1=V1] 

### Cost equations --> "Loop" of fun/4 
* CEs [151] --> Loop 110 
* CEs [152] --> Loop 111 
* CEs [150] --> Loop 112 

#### Loops of fun/4 
* Loop 110: fun(V1,V,V2,Out)->  fun(V1',V,V2,Out')
                  [V2>=0,V>=0,V1>=1,Out=Out'+1,V1=V1'+1] 
* Loop 111: fun(V1,V,V2,Out)->  fun(V1',V',V2',Out')
                  [V2>=1,V>=1,V1>=1,Out=Out'+1,V2=V2'+1,V=V'+1,V1=V1'+1] 
* Loop 112: fun(V1,V,V2,Out) [V2>=0,V>=0,V1>=0,Out=0] 

### Ranking functions of CR fun(V1,V,V2,Out) 
* RF of phase [110,111]: [V1]

#### Partial ranking functions of CR fun(V1,V,V2,Out) 
* Partial RF of phase [110,111]:
  - RF of loop [110:1,111:1]:
    V1
  - RF of loop [111:1]:
    V
    V2


### Resulting Chains:fun(V1,V,V2,Out) 
* [[110,111],112]
* [112]


### Merging Chains  fun/4 into  External patterns of execution 
* [[112]] --> 1 
* [[112,[110,111]]] --> 2 


### Specialization of cost equations fun1/3 
* CE 49 is refined into CE [153] 
* CE 48 is refined into CE [154] 
* CE 47 is refined into CE [155] 


#### Refined cost equations fun1/3 
* CE 153: fun1(V1,V,Out) = 0
     [V>=0,V1>=0,Out=0] 
* CE 154: fun1(V1,V,Out) = 1+ fun1(W1,V,X1)
     [W1>=0,V>=0,X1+1=Out,W1+1=V1] 
* CE 155: fun1(V1,V,Out) = 1+ fun1(W1,X1,Y1)
     [X1>=0,W1>=0,Y1+1=Out,X1+1=V,W1+1=V1] 

### Cost equations --> "Loop" of fun1/3 
* CEs [154] --> Loop 113 
* CEs [155] --> Loop 114 
* CEs [153] --> Loop 115 

#### Loops of fun1/3 
* Loop 113: fun1(V1,V,Out)->  fun1(V1',V,Out')
                  [V>=0,V1>=1,Out=Out'+1,V1=V1'+1] 
* Loop 114: fun1(V1,V,Out)->  fun1(V1',V',Out')
                  [V>=1,V1>=1,Out=Out'+1,V=V'+1,V1=V1'+1] 
* Loop 115: fun1(V1,V,Out) [V>=0,V1>=0,Out=0] 

### Ranking functions of CR fun1(V1,V,Out) 
* RF of phase [113,114]: [V1]

#### Partial ranking functions of CR fun1(V1,V,Out) 
* Partial RF of phase [113,114]:
  - RF of loop [113:1,114:1]:
    V1
  - RF of loop [114:1]:
    V


### Resulting Chains:fun1(V1,V,Out) 
* [[113,114],115]
* [115]


### Merging Chains  fun1/3 into  External patterns of execution 
* [[115]] --> 1 
* [[115,[113,114]]] --> 2 


### Specialization of cost equations fun10/2 
* CE 75 is refined into CE [156] 
* CE 74 is refined into CE [157] 


#### Refined cost equations fun10/2 
* CE 156: fun10(V1,Out) = 0
     [V1>=0,Out=0] 
* CE 157: fun10(V1,Out) = 1+ fun10(W1,X1)
     [W1>=0,X1+1=Out,W1+1=V1] 

### Cost equations --> "Loop" of fun10/2 
* CEs [157] --> Loop 116 
* CEs [156] --> Loop 117 

#### Loops of fun10/2 
* Loop 116: fun10(V1,Out)->  fun10(V1',Out')
                  [V1'>=0,Out=Out'+1,V1'+1=V1] 
* Loop 117: fun10(V1,Out) [V1>=0,Out=0] 

### Ranking functions of CR fun10(V1,Out) 
* RF of phase [116]: [V1]

#### Partial ranking functions of CR fun10(V1,Out) 
* Partial RF of phase [116]:
  - RF of loop [116:1]:
    V1


### Resulting Chains:fun10(V1,Out) 
* [[116],117]
* [117]


### Merging Chains  fun10/2 into  External patterns of execution 
* [[117]] --> 1 
* [[117,[116]]] --> 2 


### Specialization of cost equations fun11/3 
* CE 78 is refined into CE [158] 
* CE 76 is refined into CE [159] 
* CE 77 is refined into CE [160] 


#### Refined cost equations fun11/3 
* CE 158: fun11(V1,V,Out) = 0
     [V>=0,V1>=0,Out=0] 
* CE 159: fun11(V1,V,Out) = 1+ fun11(W1,V,X1)
     [W1>=0,V>=0,X1+1=Out,W1+1=V1] 
* CE 160: fun11(V1,V,Out) = 1+ fun11(W1,X1,Y1)
     [X1>=0,W1>=0,Y1+1=Out,X1+1=V,W1+1=V1] 

### Cost equations --> "Loop" of fun11/3 
* CEs [159] --> Loop 118 
* CEs [160] --> Loop 119 
* CEs [158] --> Loop 120 

#### Loops of fun11/3 
* Loop 118: fun11(V1,V,Out)->  fun11(V1',V,Out')
                  [V>=0,V1>=1,Out=Out'+1,V1=V1'+1] 
* Loop 119: fun11(V1,V,Out)->  fun11(V1',V',Out')
                  [V>=1,V1>=1,Out=Out'+1,V=V'+1,V1=V1'+1] 
* Loop 120: fun11(V1,V,Out) [V>=0,V1>=0,Out=0] 

### Ranking functions of CR fun11(V1,V,Out) 
* RF of phase [118,119]: [V1]

#### Partial ranking functions of CR fun11(V1,V,Out) 
* Partial RF of phase [118,119]:
  - RF of loop [118:1,119:1]:
    V1
  - RF of loop [119:1]:
    V


### Resulting Chains:fun11(V1,V,Out) 
* [[118,119],120]
* [120]


### Merging Chains  fun11/3 into  External patterns of execution 
* [[120]] --> 1 
* [[120,[118,119]]] --> 2 


### Specialization of cost equations fun12/2 
* CE 84 is refined into CE [161] 
* CE 83 is refined into CE [162] 


#### Refined cost equations fun12/2 
* CE 161: fun12(V1,Out) = 0
     [V1>=0,Out=0] 
* CE 162: fun12(V1,Out) = 1+ fun12(W1,X1)
     [W1>=0,X1+1=Out,W1+1=V1] 

### Cost equations --> "Loop" of fun12/2 
* CEs [162] --> Loop 121 
* CEs [161] --> Loop 122 

#### Loops of fun12/2 
* Loop 121: fun12(V1,Out)->  fun12(V1',Out')
                  [V1'>=0,Out=Out'+1,V1'+1=V1] 
* Loop 122: fun12(V1,Out) [V1>=0,Out=0] 

### Ranking functions of CR fun12(V1,Out) 
* RF of phase [121]: [V1]

#### Partial ranking functions of CR fun12(V1,Out) 
* Partial RF of phase [121]:
  - RF of loop [121:1]:
    V1


### Resulting Chains:fun12(V1,Out) 
* [[121],122]
* [122]


### Merging Chains  fun12/2 into  External patterns of execution 
* [[122]] --> 1 
* [[122,[121]]] --> 2 


### Specialization of cost equations fun13/4 
* CE 87 is refined into CE [163] 
* CE 85 is refined into CE [164] 
* CE 86 is refined into CE [165] 


#### Refined cost equations fun13/4 
* CE 163: fun13(V1,V,V2,Out) = 0
     [V2>=0,V>=0,V1>=0,Out=0] 
* CE 164: fun13(V1,V,V2,Out) = 1+ fun13(W2,V,V2,X2)
     [W2>=0,V2>=0,V>=0,X2+1=Out,W2+1=V1] 
* CE 165: fun13(V1,V,V2,Out) = 1+ fun13(W2,X2,Y2,Z2)
     [Y2>=0,X2>=0,W2>=0,Z2+1=Out,Y2+1=V2,X2+1=V,W2+1=V1] 

### Cost equations --> "Loop" of fun13/4 
* CEs [164] --> Loop 123 
* CEs [165] --> Loop 124 
* CEs [163] --> Loop 125 

#### Loops of fun13/4 
* Loop 123: fun13(V1,V,V2,Out)->  fun13(V1',V,V2,Out')
                  [V2>=0,V>=0,V1>=1,Out=Out'+1,V1=V1'+1] 
* Loop 124: fun13(V1,V,V2,Out)->  fun13(V1',V',V2',Out')
                  [V2>=1,V>=1,V1>=1,Out=Out'+1,V2=V2'+1,V=V'+1,V1=V1'+1] 
* Loop 125: fun13(V1,V,V2,Out) [V2>=0,V>=0,V1>=0,Out=0] 

### Ranking functions of CR fun13(V1,V,V2,Out) 
* RF of phase [123,124]: [V1]

#### Partial ranking functions of CR fun13(V1,V,V2,Out) 
* Partial RF of phase [123,124]:
  - RF of loop [123:1,124:1]:
    V1
  - RF of loop [124:1]:
    V
    V2


### Resulting Chains:fun13(V1,V,V2,Out) 
* [[123,124],125]
* [125]


### Merging Chains  fun13/4 into  External patterns of execution 
* [[125]] --> 1 
* [[125,[123,124]]] --> 2 


### Specialization of cost equations fun14/4 
* CE 95 is refined into CE [166] 
* CE 94 is refined into CE [167] 
* CE 93 is refined into CE [168] 


#### Refined cost equations fun14/4 
* CE 166: fun14(V1,V,V2,Out) = 0
     [V2>=0,V>=0,V1>=0,Out=0] 
* CE 167: fun14(V1,V,V2,Out) = 1+ fun14(W2,V,V2,X2)
     [W2>=0,V2>=0,V>=0,X2+1=Out,W2+1=V1] 
* CE 168: fun14(V1,V,V2,Out) = 1+ fun14(W2,X2,Y2,Z2)
     [Y2>=0,X2>=0,W2>=0,Z2+1=Out,Y2+1=V2,X2+1=V,W2+1=V1] 

### Cost equations --> "Loop" of fun14/4 
* CEs [167] --> Loop 126 
* CEs [168] --> Loop 127 
* CEs [166] --> Loop 128 

#### Loops of fun14/4 
* Loop 126: fun14(V1,V,V2,Out)->  fun14(V1',V,V2,Out')
                  [V2>=0,V>=0,V1>=1,Out=Out'+1,V1=V1'+1] 
* Loop 127: fun14(V1,V,V2,Out)->  fun14(V1',V',V2',Out')
                  [V2>=1,V>=1,V1>=1,Out=Out'+1,V2=V2'+1,V=V'+1,V1=V1'+1] 
* Loop 128: fun14(V1,V,V2,Out) [V2>=0,V>=0,V1>=0,Out=0] 

### Ranking functions of CR fun14(V1,V,V2,Out) 
* RF of phase [126,127]: [V1]

#### Partial ranking functions of CR fun14(V1,V,V2,Out) 
* Partial RF of phase [126,127]:
  - RF of loop [126:1,127:1]:
    V1
  - RF of loop [127:1]:
    V
    V2


### Resulting Chains:fun14(V1,V,V2,Out) 
* [[126,127],128]
* [128]


### Merging Chains  fun14/4 into  External patterns of execution 
* [[128]] --> 1 
* [[128,[126,127]]] --> 2 


### Specialization of cost equations fun15/4 
* CE 98 is refined into CE [169] 
* CE 96 is refined into CE [170] 
* CE 97 is refined into CE [171] 


#### Refined cost equations fun15/4 
* CE 169: fun15(V1,V,V2,Out) = 0
     [V2>=0,V>=0,V1>=0,Out=0] 
* CE 170: fun15(V1,V,V2,Out) = 1+ fun15(W2,V,V2,X2)
     [W2>=0,V2>=0,V>=0,X2+1=Out,W2+1=V1] 
* CE 171: fun15(V1,V,V2,Out) = 1+ fun15(W2,X2,Y2,Z2)
     [Y2>=0,X2>=0,W2>=0,Z2+1=Out,Y2+1=V2,X2+1=V,W2+1=V1] 

### Cost equations --> "Loop" of fun15/4 
* CEs [170] --> Loop 129 
* CEs [171] --> Loop 130 
* CEs [169] --> Loop 131 

#### Loops of fun15/4 
* Loop 129: fun15(V1,V,V2,Out)->  fun15(V1',V,V2,Out')
                  [V2>=0,V>=0,V1>=1,Out=Out'+1,V1=V1'+1] 
* Loop 130: fun15(V1,V,V2,Out)->  fun15(V1',V',V2',Out')
                  [V2>=1,V>=1,V1>=1,Out=Out'+1,V2=V2'+1,V=V'+1,V1=V1'+1] 
* Loop 131: fun15(V1,V,V2,Out) [V2>=0,V>=0,V1>=0,Out=0] 

### Ranking functions of CR fun15(V1,V,V2,Out) 
* RF of phase [129,130]: [V1]

#### Partial ranking functions of CR fun15(V1,V,V2,Out) 
* Partial RF of phase [129,130]:
  - RF of loop [129:1,130:1]:
    V1
  - RF of loop [130:1]:
    V
    V2


### Resulting Chains:fun15(V1,V,V2,Out) 
* [[129,130],131]
* [131]


### Merging Chains  fun15/4 into  External patterns of execution 
* [[131]] --> 1 
* [[131,[129,130]]] --> 2 


### Specialization of cost equations fun16/2 
* CE 100 is refined into CE [172] 
* CE 99 is refined into CE [173] 


#### Refined cost equations fun16/2 
* CE 172: fun16(V1,Out) = 0
     [V1>=0,Out=0] 
* CE 173: fun16(V1,Out) = 1+ fun16(W1,X1)
     [W1>=0,X1+1=Out,W1+1=V1] 

### Cost equations --> "Loop" of fun16/2 
* CEs [173] --> Loop 132 
* CEs [172] --> Loop 133 

#### Loops of fun16/2 
* Loop 132: fun16(V1,Out)->  fun16(V1',Out')
                  [V1'>=0,Out=Out'+1,V1'+1=V1] 
* Loop 133: fun16(V1,Out) [V1>=0,Out=0] 

### Ranking functions of CR fun16(V1,Out) 
* RF of phase [132]: [V1]

#### Partial ranking functions of CR fun16(V1,Out) 
* Partial RF of phase [132]:
  - RF of loop [132:1]:
    V1


### Resulting Chains:fun16(V1,Out) 
* [[132],133]
* [133]


### Merging Chains  fun16/2 into  External patterns of execution 
* [[133]] --> 1 
* [[133,[132]]] --> 2 


### Specialization of cost equations fun17/3 
* CE 103 is refined into CE [174] 
* CE 102 is refined into CE [175] 
* CE 101 is refined into CE [176] 


#### Refined cost equations fun17/3 
* CE 174: fun17(V1,V,Out) = 0
     [V>=0,V1>=0,Out=0] 
* CE 175: fun17(V1,V,Out) = 1+ fun17(W1,V,X1)
     [W1>=0,V>=0,X1+1=Out,W1+1=V1] 
* CE 176: fun17(V1,V,Out) = 1+ fun17(W1,X1,Y1)
     [X1>=0,W1>=0,Y1+1=Out,X1+1=V,W1+1=V1] 

### Cost equations --> "Loop" of fun17/3 
* CEs [175] --> Loop 134 
* CEs [176] --> Loop 135 
* CEs [174] --> Loop 136 

#### Loops of fun17/3 
* Loop 134: fun17(V1,V,Out)->  fun17(V1',V,Out')
                  [V>=0,V1>=1,Out=Out'+1,V1=V1'+1] 
* Loop 135: fun17(V1,V,Out)->  fun17(V1',V',Out')
                  [V>=1,V1>=1,Out=Out'+1,V=V'+1,V1=V1'+1] 
* Loop 136: fun17(V1,V,Out) [V>=0,V1>=0,Out=0] 

### Ranking functions of CR fun17(V1,V,Out) 
* RF of phase [134,135]: [V1]

#### Partial ranking functions of CR fun17(V1,V,Out) 
* Partial RF of phase [134,135]:
  - RF of loop [134:1,135:1]:
    V1
  - RF of loop [135:1]:
    V


### Resulting Chains:fun17(V1,V,Out) 
* [[134,135],136]
* [136]


### Merging Chains  fun17/3 into  External patterns of execution 
* [[136]] --> 1 
* [[136,[134,135]]] --> 2 


### Specialization of cost equations fun18/4 
* CE 110 is refined into CE [177] 
* CE 109 is refined into CE [178] 
* CE 108 is refined into CE [179] 


#### Refined cost equations fun18/4 
* CE 177: fun18(V1,V,V2,Out) = 0
     [V2>=0,V>=0,V1>=0,Out=0] 
* CE 178: fun18(V1,V,V2,Out) = 1+ fun18(W2,V,V2,X2)
     [W2>=0,V2>=0,V>=0,X2+1=Out,W2+1=V1] 
* CE 179: fun18(V1,V,V2,Out) = 1+ fun18(W2,X2,Y2,Z2)
     [Y2>=0,X2>=0,W2>=0,Z2+1=Out,Y2+1=V2,X2+1=V,W2+1=V1] 

### Cost equations --> "Loop" of fun18/4 
* CEs [178] --> Loop 137 
* CEs [179] --> Loop 138 
* CEs [177] --> Loop 139 

#### Loops of fun18/4 
* Loop 137: fun18(V1,V,V2,Out)->  fun18(V1',V,V2,Out')
                  [V2>=0,V>=0,V1>=1,Out=Out'+1,V1=V1'+1] 
* Loop 138: fun18(V1,V,V2,Out)->  fun18(V1',V',V2',Out')
                  [V2>=1,V>=1,V1>=1,Out=Out'+1,V2=V2'+1,V=V'+1,V1=V1'+1] 
* Loop 139: fun18(V1,V,V2,Out) [V2>=0,V>=0,V1>=0,Out=0] 

### Ranking functions of CR fun18(V1,V,V2,Out) 
* RF of phase [137,138]: [V1]

#### Partial ranking functions of CR fun18(V1,V,V2,Out) 
* Partial RF of phase [137,138]:
  - RF of loop [137:1,138:1]:
    V1
  - RF of loop [138:1]:
    V
    V2


### Resulting Chains:fun18(V1,V,V2,Out) 
* [[137,138],139]
* [139]


### Merging Chains  fun18/4 into  External patterns of execution 
* [[139]] --> 1 
* [[139,[137,138]]] --> 2 


### Specialization of cost equations fun19/4 
* CE 113 is refined into CE [180] 
* CE 111 is refined into CE [181] 
* CE 112 is refined into CE [182] 


#### Refined cost equations fun19/4 
* CE 180: fun19(V1,V,V2,Out) = 0
     [V2>=0,V>=0,V1>=0,Out=0] 
* CE 181: fun19(V1,V,V2,Out) = 1+ fun19(W2,V,V2,X2)
     [W2>=0,V2>=0,V>=0,X2+1=Out,W2+1=V1] 
* CE 182: fun19(V1,V,V2,Out) = 1+ fun19(W2,X2,Y2,Z2)
     [Y2>=0,X2>=0,W2>=0,Z2+1=Out,Y2+1=V2,X2+1=V,W2+1=V1] 

### Cost equations --> "Loop" of fun19/4 
* CEs [181] --> Loop 140 
* CEs [182] --> Loop 141 
* CEs [180] --> Loop 142 

#### Loops of fun19/4 
* Loop 140: fun19(V1,V,V2,Out)->  fun19(V1',V,V2,Out')
                  [V2>=0,V>=0,V1>=1,Out=Out'+1,V1=V1'+1] 
* Loop 141: fun19(V1,V,V2,Out)->  fun19(V1',V',V2',Out')
                  [V2>=1,V>=1,V1>=1,Out=Out'+1,V2=V2'+1,V=V'+1,V1=V1'+1] 
* Loop 142: fun19(V1,V,V2,Out) [V2>=0,V>=0,V1>=0,Out=0] 

### Ranking functions of CR fun19(V1,V,V2,Out) 
* RF of phase [140,141]: [V1]

#### Partial ranking functions of CR fun19(V1,V,V2,Out) 
* Partial RF of phase [140,141]:
  - RF of loop [140:1,141:1]:
    V1
  - RF of loop [141:1]:
    V
    V2


### Resulting Chains:fun19(V1,V,V2,Out) 
* [[140,141],142]
* [142]


### Merging Chains  fun19/4 into  External patterns of execution 
* [[142]] --> 1 
* [[142,[140,141]]] --> 2 


### Specialization of cost equations fun2/4 
* CE 52 is refined into CE [183] 
* CE 50 is refined into CE [184] 
* CE 51 is refined into CE [185] 


#### Refined cost equations fun2/4 
* CE 183: fun2(V1,V,V2,Out) = 0
     [V2>=0,V>=0,V1>=0,Out=0] 
* CE 184: fun2(V1,V,V2,Out) = 1+ fun2(W2,V,V2,X2)
     [W2>=0,V2>=0,V>=0,X2+1=Out,W2+1=V1] 
* CE 185: fun2(V1,V,V2,Out) = 1+ fun2(W2,X2,Y2,Z2)
     [Y2>=0,X2>=0,W2>=0,Z2+1=Out,Y2+1=V2,X2+1=V,W2+1=V1] 

### Cost equations --> "Loop" of fun2/4 
* CEs [184] --> Loop 143 
* CEs [185] --> Loop 144 
* CEs [183] --> Loop 145 

#### Loops of fun2/4 
* Loop 143: fun2(V1,V,V2,Out)->  fun2(V1',V,V2,Out')
                  [V2>=0,V>=0,V1>=1,Out=Out'+1,V1=V1'+1] 
* Loop 144: fun2(V1,V,V2,Out)->  fun2(V1',V',V2',Out')
                  [V2>=1,V>=1,V1>=1,Out=Out'+1,V2=V2'+1,V=V'+1,V1=V1'+1] 
* Loop 145: fun2(V1,V,V2,Out) [V2>=0,V>=0,V1>=0,Out=0] 

### Ranking functions of CR fun2(V1,V,V2,Out) 
* RF of phase [143,144]: [V1]

#### Partial ranking functions of CR fun2(V1,V,V2,Out) 
* Partial RF of phase [143,144]:
  - RF of loop [143:1,144:1]:
    V1
  - RF of loop [144:1]:
    V
    V2


### Resulting Chains:fun2(V1,V,V2,Out) 
* [[143,144],145]
* [145]


### Merging Chains  fun2/4 into  External patterns of execution 
* [[145]] --> 1 
* [[145,[143,144]]] --> 2 


### Specialization of cost equations fun20/2 
* CE 115 is refined into CE [186] 
* CE 114 is refined into CE [187] 


#### Refined cost equations fun20/2 
* CE 186: fun20(V1,Out) = 0
     [V1>=0,Out=0] 
* CE 187: fun20(V1,Out) = 1+ fun20(W1,X1)
     [W1>=0,X1+1=Out,W1+1=V1] 

### Cost equations --> "Loop" of fun20/2 
* CEs [187] --> Loop 146 
* CEs [186] --> Loop 147 

#### Loops of fun20/2 
* Loop 146: fun20(V1,Out)->  fun20(V1',Out')
                  [V1'>=0,Out=Out'+1,V1'+1=V1] 
* Loop 147: fun20(V1,Out) [V1>=0,Out=0] 

### Ranking functions of CR fun20(V1,Out) 
* RF of phase [146]: [V1]

#### Partial ranking functions of CR fun20(V1,Out) 
* Partial RF of phase [146]:
  - RF of loop [146:1]:
    V1


### Resulting Chains:fun20(V1,Out) 
* [[146],147]
* [147]


### Merging Chains  fun20/2 into  External patterns of execution 
* [[147]] --> 1 
* [[147,[146]]] --> 2 


### Specialization of cost equations fun21/3 
* CE 118 is refined into CE [188] 
* CE 117 is refined into CE [189] 
* CE 116 is refined into CE [190] 


#### Refined cost equations fun21/3 
* CE 188: fun21(V1,V,Out) = 0
     [V>=0,V1>=0,Out=0] 
* CE 189: fun21(V1,V,Out) = 1+ fun21(W1,V,X1)
     [W1>=0,V>=0,X1+1=Out,W1+1=V1] 
* CE 190: fun21(V1,V,Out) = 1+ fun21(W1,X1,Y1)
     [X1>=0,W1>=0,Y1+1=Out,X1+1=V,W1+1=V1] 

### Cost equations --> "Loop" of fun21/3 
* CEs [189] --> Loop 148 
* CEs [190] --> Loop 149 
* CEs [188] --> Loop 150 

#### Loops of fun21/3 
* Loop 148: fun21(V1,V,Out)->  fun21(V1',V,Out')
                  [V>=0,V1>=1,Out=Out'+1,V1=V1'+1] 
* Loop 149: fun21(V1,V,Out)->  fun21(V1',V',Out')
                  [V>=1,V1>=1,Out=Out'+1,V=V'+1,V1=V1'+1] 
* Loop 150: fun21(V1,V,Out) [V>=0,V1>=0,Out=0] 

### Ranking functions of CR fun21(V1,V,Out) 
* RF of phase [148,149]: [V1]

#### Partial ranking functions of CR fun21(V1,V,Out) 
* Partial RF of phase [148,149]:
  - RF of loop [148:1,149:1]:
    V1
  - RF of loop [149:1]:
    V


### Resulting Chains:fun21(V1,V,Out) 
* [[148,149],150]
* [150]


### Merging Chains  fun21/3 into  External patterns of execution 
* [[150]] --> 1 
* [[150,[148,149]]] --> 2 


### Specialization of cost equations fun22/2 
* CE 122 is refined into CE [191] 
* CE 121 is refined into CE [192] 


#### Refined cost equations fun22/2 
* CE 191: fun22(V1,Out) = 0
     [V1>=0,Out=0] 
* CE 192: fun22(V1,Out) = 1+ fun22(W1,X1)
     [W1>=0,X1+1=Out,W1+1=V1] 

### Cost equations --> "Loop" of fun22/2 
* CEs [192] --> Loop 151 
* CEs [191] --> Loop 152 

#### Loops of fun22/2 
* Loop 151: fun22(V1,Out)->  fun22(V1',Out')
                  [V1'>=0,Out=Out'+1,V1'+1=V1] 
* Loop 152: fun22(V1,Out) [V1>=0,Out=0] 

### Ranking functions of CR fun22(V1,Out) 
* RF of phase [151]: [V1]

#### Partial ranking functions of CR fun22(V1,Out) 
* Partial RF of phase [151]:
  - RF of loop [151:1]:
    V1


### Resulting Chains:fun22(V1,Out) 
* [[151],152]
* [152]


### Merging Chains  fun22/2 into  External patterns of execution 
* [[152]] --> 1 
* [[152,[151]]] --> 2 


### Specialization of cost equations fun23/4 
* CE 125 is refined into CE [193] 
* CE 124 is refined into CE [194] 
* CE 123 is refined into CE [195] 


#### Refined cost equations fun23/4 
* CE 193: fun23(V1,V,V2,Out) = 0
     [V2>=0,V>=0,V1>=0,Out=0] 
* CE 194: fun23(V1,V,V2,Out) = 1+ fun23(W2,V,V2,X2)
     [W2>=0,V2>=0,V>=0,X2+1=Out,W2+1=V1] 
* CE 195: fun23(V1,V,V2,Out) = 1+ fun23(W2,X2,Y2,Z2)
     [Y2>=0,X2>=0,W2>=0,Z2+1=Out,Y2+1=V2,X2+1=V,W2+1=V1] 

### Cost equations --> "Loop" of fun23/4 
* CEs [194] --> Loop 153 
* CEs [195] --> Loop 154 
* CEs [193] --> Loop 155 

#### Loops of fun23/4 
* Loop 153: fun23(V1,V,V2,Out)->  fun23(V1',V,V2,Out')
                  [V2>=0,V>=0,V1>=1,Out=Out'+1,V1=V1'+1] 
* Loop 154: fun23(V1,V,V2,Out)->  fun23(V1',V',V2',Out')
                  [V2>=1,V>=1,V1>=1,Out=Out'+1,V2=V2'+1,V=V'+1,V1=V1'+1] 
* Loop 155: fun23(V1,V,V2,Out) [V2>=0,V>=0,V1>=0,Out=0] 

### Ranking functions of CR fun23(V1,V,V2,Out) 
* RF of phase [153,154]: [V1]

#### Partial ranking functions of CR fun23(V1,V,V2,Out) 
* Partial RF of phase [153,154]:
  - RF of loop [153:1,154:1]:
    V1
  - RF of loop [154:1]:
    V
    V2


### Resulting Chains:fun23(V1,V,V2,Out) 
* [[153,154],155]
* [155]


### Merging Chains  fun23/4 into  External patterns of execution 
* [[155]] --> 1 
* [[155,[153,154]]] --> 2 


### Specialization of cost equations fun24/3 
* CE 128 is refined into CE [196] 
* CE 127 is refined into CE [197] 
* CE 126 is refined into CE [198] 


#### Refined cost equations fun24/3 
* CE 196: fun24(V1,V,Out) = 0
     [V>=0,V1>=0,Out=0] 
* CE 197: fun24(V1,V,Out) = 1+ fun24(W1,V,X1)
     [W1>=0,V>=0,X1+1=Out,W1+1=V1] 
* CE 198: fun24(V1,V,Out) = 1+ fun24(W1,X1,Y1)
     [X1>=0,W1>=0,Y1+1=Out,X1+1=V,W1+1=V1] 

### Cost equations --> "Loop" of fun24/3 
* CEs [197] --> Loop 156 
* CEs [198] --> Loop 157 
* CEs [196] --> Loop 158 

#### Loops of fun24/3 
* Loop 156: fun24(V1,V,Out)->  fun24(V1',V,Out')
                  [V>=0,V1>=1,Out=Out'+1,V1=V1'+1] 
* Loop 157: fun24(V1,V,Out)->  fun24(V1',V',Out')
                  [V>=1,V1>=1,Out=Out'+1,V=V'+1,V1=V1'+1] 
* Loop 158: fun24(V1,V,Out) [V>=0,V1>=0,Out=0] 

### Ranking functions of CR fun24(V1,V,Out) 
* RF of phase [156,157]: [V1]

#### Partial ranking functions of CR fun24(V1,V,Out) 
* Partial RF of phase [156,157]:
  - RF of loop [156:1,157:1]:
    V1
  - RF of loop [157:1]:
    V


### Resulting Chains:fun24(V1,V,Out) 
* [[156,157],158]
* [158]


### Merging Chains  fun24/3 into  External patterns of execution 
* [[158]] --> 1 
* [[158,[156,157]]] --> 2 


### Specialization of cost equations fun25/3 
* CE 131 is refined into CE [199] 
* CE 129 is refined into CE [200] 
* CE 130 is refined into CE [201] 


#### Refined cost equations fun25/3 
* CE 199: fun25(V1,V,Out) = 0
     [V>=0,V1>=0,Out=0] 
* CE 200: fun25(V1,V,Out) = 1+ fun25(W1,V,X1)
     [W1>=0,V>=0,X1+1=Out,W1+1=V1] 
* CE 201: fun25(V1,V,Out) = 1+ fun25(W1,X1,Y1)
     [X1>=0,W1>=0,Y1+1=Out,X1+1=V,W1+1=V1] 

### Cost equations --> "Loop" of fun25/3 
* CEs [200] --> Loop 159 
* CEs [201] --> Loop 160 
* CEs [199] --> Loop 161 

#### Loops of fun25/3 
* Loop 159: fun25(V1,V,Out)->  fun25(V1',V,Out')
                  [V>=0,V1>=1,Out=Out'+1,V1=V1'+1] 
* Loop 160: fun25(V1,V,Out)->  fun25(V1',V',Out')
                  [V>=1,V1>=1,Out=Out'+1,V=V'+1,V1=V1'+1] 
* Loop 161: fun25(V1,V,Out) [V>=0,V1>=0,Out=0] 

### Ranking functions of CR fun25(V1,V,Out) 
* RF of phase [159,160]: [V1]

#### Partial ranking functions of CR fun25(V1,V,Out) 
* Partial RF of phase [159,160]:
  - RF of loop [159:1,160:1]:
    V1
  - RF of loop [160:1]:
    V


### Resulting Chains:fun25(V1,V,Out) 
* [[159,160],161]
* [161]


### Merging Chains  fun25/3 into  External patterns of execution 
* [[161]] --> 1 
* [[161,[159,160]]] --> 2 


### Specialization of cost equations fun26/4 
* CE 134 is refined into CE [202] 
* CE 133 is refined into CE [203] 
* CE 132 is refined into CE [204] 


#### Refined cost equations fun26/4 
* CE 202: fun26(V1,V,V2,Out) = 0
     [V2>=0,V>=0,V1>=0,Out=0] 
* CE 203: fun26(V1,V,V2,Out) = 1+ fun26(W2,V,V2,X2)
     [W2>=0,V2>=0,V>=0,X2+1=Out,W2+1=V1] 
* CE 204: fun26(V1,V,V2,Out) = 1+ fun26(W2,X2,Y2,Z2)
     [Y2>=0,X2>=0,W2>=0,Z2+1=Out,Y2+1=V2,X2+1=V,W2+1=V1] 

### Cost equations --> "Loop" of fun26/4 
* CEs [203] --> Loop 162 
* CEs [204] --> Loop 163 
* CEs [202] --> Loop 164 

#### Loops of fun26/4 
* Loop 162: fun26(V1,V,V2,Out)->  fun26(V1',V,V2,Out')
                  [V2>=0,V>=0,V1>=1,Out=Out'+1,V1=V1'+1] 
* Loop 163: fun26(V1,V,V2,Out)->  fun26(V1',V',V2',Out')
                  [V2>=1,V>=1,V1>=1,Out=Out'+1,V2=V2'+1,V=V'+1,V1=V1'+1] 
* Loop 164: fun26(V1,V,V2,Out) [V2>=0,V>=0,V1>=0,Out=0] 

### Ranking functions of CR fun26(V1,V,V2,Out) 
* RF of phase [162,163]: [V1]

#### Partial ranking functions of CR fun26(V1,V,V2,Out) 
* Partial RF of phase [162,163]:
  - RF of loop [162:1,163:1]:
    V1
  - RF of loop [163:1]:
    V
    V2


### Resulting Chains:fun26(V1,V,V2,Out) 
* [[162,163],164]
* [164]


### Merging Chains  fun26/4 into  External patterns of execution 
* [[164]] --> 1 
* [[164,[162,163]]] --> 2 


### Specialization of cost equations fun27/4 
* CE 137 is refined into CE [205] 
* CE 136 is refined into CE [206] 
* CE 135 is refined into CE [207] 


#### Refined cost equations fun27/4 
* CE 205: fun27(V1,V,V2,Out) = 0
     [V2>=0,V>=0,V1>=0,Out=0] 
* CE 206: fun27(V1,V,V2,Out) = 1+ fun27(W2,V,V2,X2)
     [W2>=0,V2>=0,V>=0,X2+1=Out,W2+1=V1] 
* CE 207: fun27(V1,V,V2,Out) = 1+ fun27(W2,X2,Y2,Z2)
     [Y2>=0,X2>=0,W2>=0,Z2+1=Out,Y2+1=V2,X2+1=V,W2+1=V1] 

### Cost equations --> "Loop" of fun27/4 
* CEs [206] --> Loop 165 
* CEs [207] --> Loop 166 
* CEs [205] --> Loop 167 

#### Loops of fun27/4 
* Loop 165: fun27(V1,V,V2,Out)->  fun27(V1',V,V2,Out')
                  [V2>=0,V>=0,V1>=1,Out=Out'+1,V1=V1'+1] 
* Loop 166: fun27(V1,V,V2,Out)->  fun27(V1',V',V2',Out')
                  [V2>=1,V>=1,V1>=1,Out=Out'+1,V2=V2'+1,V=V'+1,V1=V1'+1] 
* Loop 167: fun27(V1,V,V2,Out) [V2>=0,V>=0,V1>=0,Out=0] 

### Ranking functions of CR fun27(V1,V,V2,Out) 
* RF of phase [165,166]: [V1]

#### Partial ranking functions of CR fun27(V1,V,V2,Out) 
* Partial RF of phase [165,166]:
  - RF of loop [165:1,166:1]:
    V1
  - RF of loop [166:1]:
    V
    V2


### Resulting Chains:fun27(V1,V,V2,Out) 
* [[165,166],167]
* [167]


### Merging Chains  fun27/4 into  External patterns of execution 
* [[167]] --> 1 
* [[167,[165,166]]] --> 2 


### Specialization of cost equations fun28/3 
* CE 140 is refined into CE [208] 
* CE 138 is refined into CE [209] 
* CE 139 is refined into CE [210] 


#### Refined cost equations fun28/3 
* CE 208: fun28(V1,V,Out) = 0
     [V>=0,V1>=0,Out=0] 
* CE 209: fun28(V1,V,Out) = 1+ fun28(W1,V,X1)
     [W1>=0,V>=0,X1+1=Out,W1+1=V1] 
* CE 210: fun28(V1,V,Out) = 1+ fun28(W1,X1,Y1)
     [X1>=0,W1>=0,Y1+1=Out,X1+1=V,W1+1=V1] 

### Cost equations --> "Loop" of fun28/3 
* CEs [209] --> Loop 168 
* CEs [210] --> Loop 169 
* CEs [208] --> Loop 170 

#### Loops of fun28/3 
* Loop 168: fun28(V1,V,Out)->  fun28(V1',V,Out')
                  [V>=0,V1>=1,Out=Out'+1,V1=V1'+1] 
* Loop 169: fun28(V1,V,Out)->  fun28(V1',V',Out')
                  [V>=1,V1>=1,Out=Out'+1,V=V'+1,V1=V1'+1] 
* Loop 170: fun28(V1,V,Out) [V>=0,V1>=0,Out=0] 

### Ranking functions of CR fun28(V1,V,Out) 
* RF of phase [168,169]: [V1]

#### Partial ranking functions of CR fun28(V1,V,Out) 
* Partial RF of phase [168,169]:
  - RF of loop [168:1,169:1]:
    V1
  - RF of loop [169:1]:
    V


### Resulting Chains:fun28(V1,V,Out) 
* [[168,169],170]
* [170]


### Merging Chains  fun28/3 into  External patterns of execution 
* [[170]] --> 1 
* [[170,[168,169]]] --> 2 


### Specialization of cost equations fun29/4 
* CE 143 is refined into CE [211] 
* CE 141 is refined into CE [212] 
* CE 142 is refined into CE [213] 


#### Refined cost equations fun29/4 
* CE 211: fun29(V1,V,V2,Out) = 0
     [V2>=0,V>=0,V1>=0,Out=0] 
* CE 212: fun29(V1,V,V2,Out) = 1+ fun29(W2,V,V2,X2)
     [W2>=0,V2>=0,V>=0,X2+1=Out,W2+1=V1] 
* CE 213: fun29(V1,V,V2,Out) = 1+ fun29(W2,X2,Y2,Z2)
     [Y2>=0,X2>=0,W2>=0,Z2+1=Out,Y2+1=V2,X2+1=V,W2+1=V1] 

### Cost equations --> "Loop" of fun29/4 
* CEs [212] --> Loop 171 
* CEs [213] --> Loop 172 
* CEs [211] --> Loop 173 

#### Loops of fun29/4 
* Loop 171: fun29(V1,V,V2,Out)->  fun29(V1',V,V2,Out')
                  [V2>=0,V>=0,V1>=1,Out=Out'+1,V1=V1'+1] 
* Loop 172: fun29(V1,V,V2,Out)->  fun29(V1',V',V2',Out')
                  [V2>=1,V>=1,V1>=1,Out=Out'+1,V2=V2'+1,V=V'+1,V1=V1'+1] 
* Loop 173: fun29(V1,V,V2,Out) [V2>=0,V>=0,V1>=0,Out=0] 

### Ranking functions of CR fun29(V1,V,V2,Out) 
* RF of phase [171,172]: [V1]

#### Partial ranking functions of CR fun29(V1,V,V2,Out) 
* Partial RF of phase [171,172]:
  - RF of loop [171:1,172:1]:
    V1
  - RF of loop [172:1]:
    V
    V2


### Resulting Chains:fun29(V1,V,V2,Out) 
* [[171,172],173]
* [173]


### Merging Chains  fun29/4 into  External patterns of execution 
* [[173]] --> 1 
* [[173,[171,172]]] --> 2 


### Specialization of cost equations fun3/4 
* CE 55 is refined into CE [214] 
* CE 54 is refined into CE [215] 
* CE 53 is refined into CE [216] 


#### Refined cost equations fun3/4 
* CE 214: fun3(V1,V,V2,Out) = 0
     [V2>=0,V>=0,V1>=0,Out=0] 
* CE 215: fun3(V1,V,V2,Out) = 1+ fun3(W2,V,V2,X2)
     [W2>=0,V2>=0,V>=0,X2+1=Out,W2+1=V1] 
* CE 216: fun3(V1,V,V2,Out) = 1+ fun3(W2,X2,Y2,Z2)
     [Y2>=0,X2>=0,W2>=0,Z2+1=Out,Y2+1=V2,X2+1=V,W2+1=V1] 

### Cost equations --> "Loop" of fun3/4 
* CEs [215] --> Loop 174 
* CEs [216] --> Loop 175 
* CEs [214] --> Loop 176 

#### Loops of fun3/4 
* Loop 174: fun3(V1,V,V2,Out)->  fun3(V1',V,V2,Out')
                  [V2>=0,V>=0,V1>=1,Out=Out'+1,V1=V1'+1] 
* Loop 175: fun3(V1,V,V2,Out)->  fun3(V1',V',V2',Out')
                  [V2>=1,V>=1,V1>=1,Out=Out'+1,V2=V2'+1,V=V'+1,V1=V1'+1] 
* Loop 176: fun3(V1,V,V2,Out) [V2>=0,V>=0,V1>=0,Out=0] 

### Ranking functions of CR fun3(V1,V,V2,Out) 
* RF of phase [174,175]: [V1]

#### Partial ranking functions of CR fun3(V1,V,V2,Out) 
* Partial RF of phase [174,175]:
  - RF of loop [174:1,175:1]:
    V1
  - RF of loop [175:1]:
    V
    V2


### Resulting Chains:fun3(V1,V,V2,Out) 
* [[174,175],176]
* [176]


### Merging Chains  fun3/4 into  External patterns of execution 
* [[176]] --> 1 
* [[176,[174,175]]] --> 2 


### Specialization of cost equations fun30/4 
* CE 146 is refined into CE [217] 
* CE 145 is refined into CE [218] 
* CE 144 is refined into CE [219] 


#### Refined cost equations fun30/4 
* CE 217: fun30(V1,V,V2,Out) = 0
     [V2>=0,V>=0,V1>=0,Out=0] 
* CE 218: fun30(V1,V,V2,Out) = 1+ fun30(W2,V,V2,X2)
     [W2>=0,V2>=0,V>=0,X2+1=Out,W2+1=V1] 
* CE 219: fun30(V1,V,V2,Out) = 1+ fun30(W2,X2,Y2,Z2)
     [Y2>=0,X2>=0,W2>=0,Z2+1=Out,Y2+1=V2,X2+1=V,W2+1=V1] 

### Cost equations --> "Loop" of fun30/4 
* CEs [218] --> Loop 177 
* CEs [219] --> Loop 178 
* CEs [217] --> Loop 179 

#### Loops of fun30/4 
* Loop 177: fun30(V1,V,V2,Out)->  fun30(V1',V,V2,Out')
                  [V2>=0,V>=0,V1>=1,Out=Out'+1,V1=V1'+1] 
* Loop 178: fun30(V1,V,V2,Out)->  fun30(V1',V',V2',Out')
                  [V2>=1,V>=1,V1>=1,Out=Out'+1,V2=V2'+1,V=V'+1,V1=V1'+1] 
* Loop 179: fun30(V1,V,V2,Out) [V2>=0,V>=0,V1>=0,Out=0] 

### Ranking functions of CR fun30(V1,V,V2,Out) 
* RF of phase [177,178]: [V1]

#### Partial ranking functions of CR fun30(V1,V,V2,Out) 
* Partial RF of phase [177,178]:
  - RF of loop [177:1,178:1]:
    V1
  - RF of loop [178:1]:
    V
    V2


### Resulting Chains:fun30(V1,V,V2,Out) 
* [[177,178],179]
* [179]


### Merging Chains  fun30/4 into  External patterns of execution 
* [[179]] --> 1 
* [[179,[177,178]]] --> 2 


### Specialization of cost equations fun31/4 
* CE 149 is refined into CE [220] 
* CE 147 is refined into CE [221] 
* CE 148 is refined into CE [222] 


#### Refined cost equations fun31/4 
* CE 220: fun31(V1,V,V2,Out) = 0
     [V2>=0,V>=0,V1>=0,Out=0] 
* CE 221: fun31(V1,V,V2,Out) = 1+ fun31(W2,V,V2,X2)
     [W2>=0,V2>=0,V>=0,X2+1=Out,W2+1=V1] 
* CE 222: fun31(V1,V,V2,Out) = 1+ fun31(W2,X2,Y2,Z2)
     [Y2>=0,X2>=0,W2>=0,Z2+1=Out,Y2+1=V2,X2+1=V,W2+1=V1] 

### Cost equations --> "Loop" of fun31/4 
* CEs [221] --> Loop 180 
* CEs [222] --> Loop 181 
* CEs [220] --> Loop 182 

#### Loops of fun31/4 
* Loop 180: fun31(V1,V,V2,Out)->  fun31(V1',V,V2,Out')
                  [V2>=0,V>=0,V1>=1,Out=Out'+1,V1=V1'+1] 
* Loop 181: fun31(V1,V,V2,Out)->  fun31(V1',V',V2',Out')
                  [V2>=1,V>=1,V1>=1,Out=Out'+1,V2=V2'+1,V=V'+1,V1=V1'+1] 
* Loop 182: fun31(V1,V,V2,Out) [V2>=0,V>=0,V1>=0,Out=0] 

### Ranking functions of CR fun31(V1,V,V2,Out) 
* RF of phase [180,181]: [V1]

#### Partial ranking functions of CR fun31(V1,V,V2,Out) 
* Partial RF of phase [180,181]:
  - RF of loop [180:1,181:1]:
    V1
  - RF of loop [181:1]:
    V
    V2


### Resulting Chains:fun31(V1,V,V2,Out) 
* [[180,181],182]
* [182]


### Merging Chains  fun31/4 into  External patterns of execution 
* [[182]] --> 1 
* [[182,[180,181]]] --> 2 


### Specialization of cost equations fun4/3 
* CE 58 is refined into CE [223] 
* CE 56 is refined into CE [224] 
* CE 57 is refined into CE [225] 


#### Refined cost equations fun4/3 
* CE 223: fun4(V1,V,Out) = 0
     [V>=0,V1>=0,Out=0] 
* CE 224: fun4(V1,V,Out) = 1+ fun4(W1,V,X1)
     [W1>=0,V>=0,X1+1=Out,W1+1=V1] 
* CE 225: fun4(V1,V,Out) = 1+ fun4(W1,X1,Y1)
     [X1>=0,W1>=0,Y1+1=Out,X1+1=V,W1+1=V1] 

### Cost equations --> "Loop" of fun4/3 
* CEs [224] --> Loop 183 
* CEs [225] --> Loop 184 
* CEs [223] --> Loop 185 

#### Loops of fun4/3 
* Loop 183: fun4(V1,V,Out)->  fun4(V1',V,Out')
                  [V>=0,V1>=1,Out=Out'+1,V1=V1'+1] 
* Loop 184: fun4(V1,V,Out)->  fun4(V1',V',Out')
                  [V>=1,V1>=1,Out=Out'+1,V=V'+1,V1=V1'+1] 
* Loop 185: fun4(V1,V,Out) [V>=0,V1>=0,Out=0] 

### Ranking functions of CR fun4(V1,V,Out) 
* RF of phase [183,184]: [V1]

#### Partial ranking functions of CR fun4(V1,V,Out) 
* Partial RF of phase [183,184]:
  - RF of loop [183:1,184:1]:
    V1
  - RF of loop [184:1]:
    V


### Resulting Chains:fun4(V1,V,Out) 
* [[183,184],185]
* [185]


### Merging Chains  fun4/3 into  External patterns of execution 
* [[185]] --> 1 
* [[185,[183,184]]] --> 2 


### Specialization of cost equations fun5/2 
* CE 60 is refined into CE [226] 
* CE 59 is refined into CE [227] 


#### Refined cost equations fun5/2 
* CE 226: fun5(V1,Out) = 0
     [V1>=0,Out=0] 
* CE 227: fun5(V1,Out) = 1+ fun5(W1,X1)
     [W1>=0,X1+1=Out,W1+1=V1] 

### Cost equations --> "Loop" of fun5/2 
* CEs [227] --> Loop 186 
* CEs [226] --> Loop 187 

#### Loops of fun5/2 
* Loop 186: fun5(V1,Out)->  fun5(V1',Out')
                  [V1'>=0,Out=Out'+1,V1'+1=V1] 
* Loop 187: fun5(V1,Out) [V1>=0,Out=0] 

### Ranking functions of CR fun5(V1,Out) 
* RF of phase [186]: [V1]

#### Partial ranking functions of CR fun5(V1,Out) 
* Partial RF of phase [186]:
  - RF of loop [186:1]:
    V1


### Resulting Chains:fun5(V1,Out) 
* [[186],187]
* [187]


### Merging Chains  fun5/2 into  External patterns of execution 
* [[187]] --> 1 
* [[187,[186]]] --> 2 


### Specialization of cost equations fun6/4 
* CE 65 is refined into CE [228] 
* CE 64 is refined into CE [229] 
* CE 63 is refined into CE [230] 


#### Refined cost equations fun6/4 
* CE 228: fun6(V1,V,V2,Out) = 0
     [V2>=0,V>=0,V1>=0,Out=0] 
* CE 229: fun6(V1,V,V2,Out) = 1+ fun6(W2,V,V2,X2)
     [W2>=0,V2>=0,V>=0,X2+1=Out,W2+1=V1] 
* CE 230: fun6(V1,V,V2,Out) = 1+ fun6(W2,X2,Y2,Z2)
     [Y2>=0,X2>=0,W2>=0,Z2+1=Out,Y2+1=V2,X2+1=V,W2+1=V1] 

### Cost equations --> "Loop" of fun6/4 
* CEs [229] --> Loop 188 
* CEs [230] --> Loop 189 
* CEs [228] --> Loop 190 

#### Loops of fun6/4 
* Loop 188: fun6(V1,V,V2,Out)->  fun6(V1',V,V2,Out')
                  [V2>=0,V>=0,V1>=1,Out=Out'+1,V1=V1'+1] 
* Loop 189: fun6(V1,V,V2,Out)->  fun6(V1',V',V2',Out')
                  [V2>=1,V>=1,V1>=1,Out=Out'+1,V2=V2'+1,V=V'+1,V1=V1'+1] 
* Loop 190: fun6(V1,V,V2,Out) [V2>=0,V>=0,V1>=0,Out=0] 

### Ranking functions of CR fun6(V1,V,V2,Out) 
* RF of phase [188,189]: [V1]

#### Partial ranking functions of CR fun6(V1,V,V2,Out) 
* Partial RF of phase [188,189]:
  - RF of loop [188:1,189:1]:
    V1
  - RF of loop [189:1]:
    V
    V2


### Resulting Chains:fun6(V1,V,V2,Out) 
* [[188,189],190]
* [190]


### Merging Chains  fun6/4 into  External patterns of execution 
* [[190]] --> 1 
* [[190,[188,189]]] --> 2 


### Specialization of cost equations fun7/3 
* CE 68 is refined into CE [231] 
* CE 67 is refined into CE [232] 
* CE 66 is refined into CE [233] 


#### Refined cost equations fun7/3 
* CE 231: fun7(V1,V,Out) = 0
     [V>=0,V1>=0,Out=0] 
* CE 232: fun7(V1,V,Out) = 1+ fun7(W1,V,X1)
     [W1>=0,V>=0,X1+1=Out,W1+1=V1] 
* CE 233: fun7(V1,V,Out) = 1+ fun7(W1,X1,Y1)
     [X1>=0,W1>=0,Y1+1=Out,X1+1=V,W1+1=V1] 

### Cost equations --> "Loop" of fun7/3 
* CEs [232] --> Loop 191 
* CEs [233] --> Loop 192 
* CEs [231] --> Loop 193 

#### Loops of fun7/3 
* Loop 191: fun7(V1,V,Out)->  fun7(V1',V,Out')
                  [V>=0,V1>=1,Out=Out'+1,V1=V1'+1] 
* Loop 192: fun7(V1,V,Out)->  fun7(V1',V',Out')
                  [V>=1,V1>=1,Out=Out'+1,V=V'+1,V1=V1'+1] 
* Loop 193: fun7(V1,V,Out) [V>=0,V1>=0,Out=0] 

### Ranking functions of CR fun7(V1,V,Out) 
* RF of phase [191,192]: [V1]

#### Partial ranking functions of CR fun7(V1,V,Out) 
* Partial RF of phase [191,192]:
  - RF of loop [191:1,192:1]:
    V1
  - RF of loop [192:1]:
    V


### Resulting Chains:fun7(V1,V,Out) 
* [[191,192],193]
* [193]


### Merging Chains  fun7/3 into  External patterns of execution 
* [[193]] --> 1 
* [[193,[191,192]]] --> 2 


### Specialization of cost equations fun8/4 
* CE 71 is refined into CE [234] 
* CE 69 is refined into CE [235] 
* CE 70 is refined into CE [236] 


#### Refined cost equations fun8/4 
* CE 234: fun8(V1,V,V2,Out) = 0
     [V2>=0,V>=0,V1>=0,Out=0] 
* CE 235: fun8(V1,V,V2,Out) = 1+ fun8(W2,V,V2,X2)
     [W2>=0,V2>=0,V>=0,X2+1=Out,W2+1=V1] 
* CE 236: fun8(V1,V,V2,Out) = 1+ fun8(W2,X2,Y2,Z2)
     [Y2>=0,X2>=0,W2>=0,Z2+1=Out,Y2+1=V2,X2+1=V,W2+1=V1] 

### Cost equations --> "Loop" of fun8/4 
* CEs [235] --> Loop 194 
* CEs [236] --> Loop 195 
* CEs [234] --> Loop 196 

#### Loops of fun8/4 
* Loop 194: fun8(V1,V,V2,Out)->  fun8(V1',V,V2,Out')
                  [V2>=0,V>=0,V1>=1,Out=Out'+1,V1=V1'+1] 
* Loop 195: fun8(V1,V,V2,Out)->  fun8(V1',V',V2',Out')
                  [V2>=1,V>=1,V1>=1,Out=Out'+1,V2=V2'+1,V=V'+1,V1=V1'+1] 
* Loop 196: fun8(V1,V,V2,Out) [V2>=0,V>=0,V1>=0,Out=0] 

### Ranking functions of CR fun8(V1,V,V2,Out) 
* RF of phase [194,195]: [V1]

#### Partial ranking functions of CR fun8(V1,V,V2,Out) 
* Partial RF of phase [194,195]:
  - RF of loop [194:1,195:1]:
    V1
  - RF of loop [195:1]:
    V
    V2


### Resulting Chains:fun8(V1,V,V2,Out) 
* [[194,195],196]
* [196]


### Merging Chains  fun8/4 into  External patterns of execution 
* [[196]] --> 1 
* [[196,[194,195]]] --> 2 


### Specialization of cost equations fun9/2 
* CE 73 is refined into CE [237] 
* CE 72 is refined into CE [238] 


#### Refined cost equations fun9/2 
* CE 237: fun9(V1,Out) = 0
     [V1>=0,Out=0] 
* CE 238: fun9(V1,Out) = 1+ fun9(W1,X1)
     [W1>=0,X1+1=Out,W1+1=V1] 

### Cost equations --> "Loop" of fun9/2 
* CEs [238] --> Loop 197 
* CEs [237] --> Loop 198 

#### Loops of fun9/2 
* Loop 197: fun9(V1,Out)->  fun9(V1',Out')
                  [V1'>=0,Out=Out'+1,V1'+1=V1] 
* Loop 198: fun9(V1,Out) [V1>=0,Out=0] 

### Ranking functions of CR fun9(V1,Out) 
* RF of phase [197]: [V1]

#### Partial ranking functions of CR fun9(V1,Out) 
* Partial RF of phase [197]:
  - RF of loop [197:1]:
    V1


### Resulting Chains:fun9(V1,Out) 
* [[197],198]
* [198]


### Merging Chains  fun9/2 into  External patterns of execution 
* [[198]] --> 1 
* [[198,[197]]] --> 2 


### Specialization of cost equations isNat/2 
* CE 62 is refined into CE [239] 
* CE 61 is refined into CE [240] 


#### Refined cost equations isNat/2 
* CE 239: isNat(V1,Out) = 0
     [V1>=0,Out=0] 
* CE 240: isNat(V1,Out) = 1+ isNat(W1,X1)
     [W1>=0,X1+1=Out,W1+1=V1] 

### Cost equations --> "Loop" of isNat/2 
* CEs [240] --> Loop 199 
* CEs [239] --> Loop 200 

#### Loops of isNat/2 
* Loop 199: isNat(V1,Out)->  isNat(V1',Out')
                  [V1'>=0,Out=Out'+1,V1'+1=V1] 
* Loop 200: isNat(V1,Out) [V1>=0,Out=0] 

### Ranking functions of CR isNat(V1,Out) 
* RF of phase [199]: [V1]

#### Partial ranking functions of CR isNat(V1,Out) 
* Partial RF of phase [199]:
  - RF of loop [199:1]:
    V1


### Resulting Chains:isNat(V1,Out) 
* [[199],200]
* [200]


### Merging Chains  isNat/2 into  External patterns of execution 
* [[200]] --> 1 
* [[200,[199]]] --> 2 


### Specialization of cost equations isNatKind/2 
* CE 92 is refined into CE [241] 
* CE 91 is refined into CE [242] 


#### Refined cost equations isNatKind/2 
* CE 241: isNatKind(V1,Out) = 0
     [V1>=0,Out=0] 
* CE 242: isNatKind(V1,Out) = 1+ isNatKind(W1,X1)
     [W1>=0,X1+1=Out,W1+1=V1] 

### Cost equations --> "Loop" of isNatKind/2 
* CEs [242] --> Loop 201 
* CEs [241] --> Loop 202 

#### Loops of isNatKind/2 
* Loop 201: isNatKind(V1,Out)->  isNatKind(V1',Out')
                  [V1'>=0,Out=Out'+1,V1'+1=V1] 
* Loop 202: isNatKind(V1,Out) [V1>=0,Out=0] 

### Ranking functions of CR isNatKind(V1,Out) 
* RF of phase [201]: [V1]

#### Partial ranking functions of CR isNatKind(V1,Out) 
* Partial RF of phase [201]:
  - RF of loop [201:1]:
    V1


### Resulting Chains:isNatKind(V1,Out) 
* [[201],202]
* [202]


### Merging Chains  isNatKind/2 into  External patterns of execution 
* [[202]] --> 1 
* [[202,[201]]] --> 2 


### Specialization of cost equations plus/3 
* CE 82 is refined into CE [243] 
* CE 80 is refined into CE [244] 
* CE 81 is refined into CE [245] 
* CE 79 is refined into CE [246] 


#### Refined cost equations plus/3 
* CE 243: plus(V1,V,Out) = 0
     [V>=0,V1>=0,Out=0] 
* CE 244: plus(V1,V,Out) = 1+ plus(V1,W1,X1)
     [W1>=0,V1>=0,X1+1=Out,W1+1=V] 
* CE 245: plus(V1,V,Out) = 1+ plus(W1,V,X1)
     [W1>=0,V>=0,X1+1=Out,W1+1=V1] 
* CE 246: plus(V1,V,Out) = 1+ plus(W1,X1,Y1)
     [X1>=0,W1>=0,Y1+1=Out,X1+1=V,W1+1=V1] 

### Cost equations --> "Loop" of plus/3 
* CEs [244] --> Loop 203 
* CEs [245] --> Loop 204 
* CEs [246] --> Loop 205 
* CEs [243] --> Loop 206 

#### Loops of plus/3 
* Loop 203: plus(V1,V,Out)->  plus(V1,V',Out')
                  [V>=1,V1>=0,Out=Out'+1,V=V'+1] 
* Loop 204: plus(V1,V,Out)->  plus(V1',V,Out')
                  [V>=0,V1>=1,Out=Out'+1,V1=V1'+1] 
* Loop 205: plus(V1,V,Out)->  plus(V1',V',Out')
                  [V>=1,V1>=1,Out=Out'+1,V=V'+1,V1=V1'+1] 
* Loop 206: plus(V1,V,Out) [V>=0,V1>=0,Out=0] 

### Ranking functions of CR plus(V1,V,Out) 
* RF of phase [203,204,205]: [V1+V]

#### Partial ranking functions of CR plus(V1,V,Out) 
* Partial RF of phase [203,204,205]:
  - RF of loop [203:1,205:1]:
    V
  - RF of loop [204:1,205:1]:
    V1


### Resulting Chains:plus(V1,V,Out) 
* [[203,204,205],206]
* [206]


### Merging Chains  plus/3 into  External patterns of execution 
* [[206]] --> 1 
* [[206,[203,204,205]]] --> 2 


### Specialization of cost equations proper/2 
* CE 90 is refined into CE [247] 
* CE 88 is refined into CE [248] 
* CE 89 is refined into CE [249] 


#### Refined cost equations proper/2 
* CE 247: proper(V1,Out) = 0
     [V1>=0,Out=0] 
* CE 248: proper(V1,Out) = 1
     [Out=2,V1=1] 
* CE 249: proper(V1,Out) = 1
     [Out=1,V1=0] 

### Cost equations --> "Loop" of proper/2 
* CEs [247] --> Loop 207 
* CEs [248] --> Loop 208 
* CEs [249] --> Loop 209 

#### Loops of proper/2 
* Loop 207: proper(V1,Out) [V1>=0,Out=0] 
* Loop 208: proper(V1,Out) [Out=2,V1=1] 
* Loop 209: proper(V1,Out) [Out=1,V1=0] 

### Ranking functions of CR proper(V1,Out) 

#### Partial ranking functions of CR proper(V1,Out) 


### Resulting Chains:proper(V1,Out) 
* [209]
* [208]
* [207]


### Merging Chains  proper/2 into  External patterns of execution 
* [[209]] --> 1 
* [[208]] --> 2 
* [[207]] --> 3 


### Specialization of cost equations s/2 
* CE 120 is refined into CE [250] 
* CE 119 is refined into CE [251] 


#### Refined cost equations s/2 
* CE 250: s(V1,Out) = 0
     [V1>=0,Out=0] 
* CE 251: s(V1,Out) = 1+ s(W1,X1)
     [W1>=0,X1+1=Out,W1+1=V1] 

### Cost equations --> "Loop" of s/2 
* CEs [251] --> Loop 210 
* CEs [250] --> Loop 211 

#### Loops of s/2 
* Loop 210: s(V1,Out)->  s(V1',Out')
                  [V1'>=0,Out=Out'+1,V1'+1=V1] 
* Loop 211: s(V1,Out) [V1>=0,Out=0] 

### Ranking functions of CR s(V1,Out) 
* RF of phase [210]: [V1]

#### Partial ranking functions of CR s(V1,Out) 
* Partial RF of phase [210]:
  - RF of loop [210:1]:
    V1


### Resulting Chains:s(V1,Out) 
* [[210],211]
* [211]


### Merging Chains  s/2 into  External patterns of execution 
* [[211]] --> 1 
* [[211,[210]]] --> 2 


### Specialization of cost equations top/2 
* CE 46 is refined into CE [252] 
* CE 44 is refined into CE [253] 
* CE 45 is refined into CE [254,255,256] 


#### Refined cost equations top/2 
* CE 252: top(V1,Out) = 0
     [V1>=0,Out=0] 
* CE 253: top(V1,Out) = 1+ top(V1,Out)
     [V1>=1] 
* CE 254: top(V1,Out) = 1+ proper(W1,X1):1+ top(Y1,Out)
     [Y1=1,X1=1,W1=0,V1=1] 
* CE 255: top(V1,Out) = 1+ proper(W1,X1):2+ top(Y1,Out)
     [Y1=2,X1=2,W1=1,V1=2] 
* CE 256: top(V1,Out) = 1+ proper(W1,X1):3+ top(Y1,Out)
     [W1>=0,W1+1=V1,Y1=0,X1=0] 

### Cost equations --> "Loop" of top/2 
* CEs [256] --> Loop 212 
* CEs [255] --> Loop 213 
* CEs [253,254] --> Loop 214 
* CEs [252] --> Loop 215 

#### Loops of top/2 
* Loop 212: top(V1,Out)->  top(V1',Out)
                  [V1>=1,V1'=0] 
* Loop 213: top(V1,Out)->  top(V1',Out)
                  [V1'=2,V1=2] 
* Loop 214: top(V1,Out)->  top(V1,Out)
                  [V1>=1] 
* Loop 215: top(V1,Out) [V1>=0,Out=0] 

### Ranking functions of CR top(V1,Out) 

#### Partial ranking functions of CR top(V1,Out) 


### Resulting Chains:top(V1,Out) 
* [[213,214]]...
* [[213,214],215]
* [[213,214],212,215]
* [215]
* [212,215]


### Merging Chains  top/2 into  External patterns of execution 
* [[215,212],[215],[215,212,[213,214]],[215,[213,214]]] --> 1 
* [[[213,214]]] --> 2 


### Specialization of cost equations x/3 
* CE 107 is refined into CE [257] 
* CE 106 is refined into CE [258] 
* CE 105 is refined into CE [259] 
* CE 104 is refined into CE [260] 


#### Refined cost equations x/3 
* CE 257: x(V1,V,Out) = 0
     [V>=0,V1>=0,Out=0] 
* CE 258: x(V1,V,Out) = 1+ x(V1,W1,X1)
     [W1>=0,V1>=0,X1+1=Out,W1+1=V] 
* CE 259: x(V1,V,Out) = 1+ x(W1,V,X1)
     [W1>=0,V>=0,X1+1=Out,W1+1=V1] 
* CE 260: x(V1,V,Out) = 1+ x(W1,X1,Y1)
     [X1>=0,W1>=0,Y1+1=Out,X1+1=V,W1+1=V1] 

### Cost equations --> "Loop" of x/3 
* CEs [258] --> Loop 216 
* CEs [259] --> Loop 217 
* CEs [260] --> Loop 218 
* CEs [257] --> Loop 219 

#### Loops of x/3 
* Loop 216: x(V1,V,Out)->  x(V1,V',Out')
                  [V>=1,V1>=0,Out=Out'+1,V=V'+1] 
* Loop 217: x(V1,V,Out)->  x(V1',V,Out')
                  [V>=0,V1>=1,Out=Out'+1,V1=V1'+1] 
* Loop 218: x(V1,V,Out)->  x(V1',V',Out')
                  [V>=1,V1>=1,Out=Out'+1,V=V'+1,V1=V1'+1] 
* Loop 219: x(V1,V,Out) [V>=0,V1>=0,Out=0] 

### Ranking functions of CR x(V1,V,Out) 
* RF of phase [216,217,218]: [V1+V]

#### Partial ranking functions of CR x(V1,V,Out) 
* Partial RF of phase [216,217,218]:
  - RF of loop [216:1,218:1]:
    V
  - RF of loop [217:1,218:1]:
    V1


### Resulting Chains:x(V1,V,Out) 
* [[216,217,218],219]
* [219]


### Merging Chains  x/3 into  External patterns of execution 
* [[219]] --> 1 
* [[219,[216,217,218]]] --> 2 


### Specialization of cost equations start/3 
* CE 2 is refined into CE [261,262] 
* CE 3 is refined into CE [263,264] 
* CE 4 is refined into CE [265,266] 
* CE 5 is refined into CE [267,268] 
* CE 6 is refined into CE [269,270] 
* CE 7 is refined into CE [271,272] 
* CE 8 is refined into CE [273,274] 
* CE 9 is refined into CE [275,276] 
* CE 10 is refined into CE [277,278] 
* CE 11 is refined into CE [279,280] 
* CE 12 is refined into CE [281,282] 
* CE 13 is refined into CE [283,284] 
* CE 14 is refined into CE [285,286] 
* CE 15 is refined into CE [287,288] 
* CE 16 is refined into CE [289,290] 
* CE 17 is refined into CE [291,292] 
* CE 18 is refined into CE [293,294] 
* CE 19 is refined into CE [295,296,297] 
* CE 20 is refined into CE [298,299] 
* CE 21 is refined into CE [300,301] 
* CE 22 is refined into CE [302,303] 
* CE 23 is refined into CE [304,305] 
* CE 24 is refined into CE [306,307] 
* CE 25 is refined into CE [308,309] 
* CE 26 is refined into CE [310,311] 
* CE 27 is refined into CE [312,313] 
* CE 28 is refined into CE [314,315] 
* CE 29 is refined into CE [316,317] 
* CE 30 is refined into CE [318,319] 
* CE 31 is refined into CE [320,321] 
* CE 32 is refined into CE [322,323] 
* CE 33 is refined into CE [324,325] 
* CE 34 is refined into CE [326,327] 
* CE 35 is refined into CE [328,329] 
* CE 36 is refined into CE [330,331] 
* CE 37 is refined into CE [332,333] 
* CE 38 is refined into CE [334,335] 
* CE 39 is refined into CE [336,337] 
* CE 40 is refined into CE [338,339] 


#### Refined cost equations start/3 
* CE 261: start(V1,V,V2) = 0+ fun(V1,V,V2,W2):1
     [V2>=0,V>=0,V1>=0,W2=0] 
* CE 262: start(V1,V,V2) = 0+ fun(V1,V,V2,W2):2
     [V1>=W2,W2>=1,V2>=0,V>=0] 
* CE 263: start(V1,V,V2) = 0+ top(V1,W2):1
     [V1>=0,W2=0] 
* CE 264: start(V1,V,V2) = 0+ top(V1,W2):2
     [V1>=1] 
* CE 265: start(V1,V,V2) = 0+ fun1(V1,V,W2):1
     [V>=0,V1>=0,W2=0] 
* CE 266: start(V1,V,V2) = 0+ fun1(V1,V,W2):2
     [V1>=W2,W2>=1,V>=0] 
* CE 267: start(V1,V,V2) = 0+ fun2(V1,V,V2,W2):1
     [V2>=0,V>=0,V1>=0,W2=0] 
* CE 268: start(V1,V,V2) = 0+ fun2(V1,V,V2,W2):2
     [V1>=W2,W2>=1,V2>=0,V>=0] 
* CE 269: start(V1,V,V2) = 0+ fun3(V1,V,V2,W2):1
     [V2>=0,V>=0,V1>=0,W2=0] 
* CE 270: start(V1,V,V2) = 0+ fun3(V1,V,V2,W2):2
     [V1>=W2,W2>=1,V2>=0,V>=0] 
* CE 271: start(V1,V,V2) = 0+ fun4(V1,V,W2):1
     [V>=0,V1>=0,W2=0] 
* CE 272: start(V1,V,V2) = 0+ fun4(V1,V,W2):2
     [V1>=W2,W2>=1,V>=0] 
* CE 273: start(V1,V,V2) = 0+ fun5(V1,W2):1
     [V1>=0,W2=0] 
* CE 274: start(V1,V,V2) = 0+ fun5(V1,W2):2
     [V1>=W2,W2>=1] 
* CE 275: start(V1,V,V2) = 0+ isNat(V1,W2):1
     [V1>=0,W2=0] 
* CE 276: start(V1,V,V2) = 0+ isNat(V1,W2):2
     [V1>=W2,W2>=1] 
* CE 277: start(V1,V,V2) = 0+ fun6(V1,V,V2,W2):1
     [V2>=0,V>=0,V1>=0,W2=0] 
* CE 278: start(V1,V,V2) = 0+ fun6(V1,V,V2,W2):2
     [V1>=W2,W2>=1,V2>=0,V>=0] 
* CE 279: start(V1,V,V2) = 0+ fun7(V1,V,W2):1
     [V>=0,V1>=0,W2=0] 
* CE 280: start(V1,V,V2) = 0+ fun7(V1,V,W2):2
     [V1>=W2,W2>=1,V>=0] 
* CE 281: start(V1,V,V2) = 0+ fun8(V1,V,V2,W2):1
     [V2>=0,V>=0,V1>=0,W2=0] 
* CE 282: start(V1,V,V2) = 0+ fun8(V1,V,V2,W2):2
     [V1>=W2,W2>=1,V2>=0,V>=0] 
* CE 283: start(V1,V,V2) = 0+ fun9(V1,W2):1
     [V1>=0,W2=0] 
* CE 284: start(V1,V,V2) = 0+ fun9(V1,W2):2
     [V1>=W2,W2>=1] 
* CE 285: start(V1,V,V2) = 0+ fun10(V1,W2):1
     [V1>=0,W2=0] 
* CE 286: start(V1,V,V2) = 0+ fun10(V1,W2):2
     [V1>=W2,W2>=1] 
* CE 287: start(V1,V,V2) = 0+ fun11(V1,V,W2):1
     [V>=0,V1>=0,W2=0] 
* CE 288: start(V1,V,V2) = 0+ fun11(V1,V,W2):2
     [V1>=W2,W2>=1,V>=0] 
* CE 289: start(V1,V,V2) = 0+ plus(V1,V,W2):1
     [V>=0,V1>=0,W2=0] 
* CE 290: start(V1,V,V2) = 0+ plus(V1,V,W2):2
     [V1+V>=W2,W2>=1,V>=0,V1>=0] 
* CE 291: start(V1,V,V2) = 0+ fun12(V1,W2):1
     [V1>=0,W2=0] 
* CE 292: start(V1,V,V2) = 0+ fun12(V1,W2):2
     [V1>=W2,W2>=1] 
* CE 293: start(V1,V,V2) = 0+ fun13(V1,V,V2,W2):1
     [V2>=0,V>=0,V1>=0,W2=0] 
* CE 294: start(V1,V,V2) = 0+ fun13(V1,V,V2,W2):2
     [V1>=W2,W2>=1,V2>=0,V>=0] 
* CE 295: start(V1,V,V2) = 0+ proper(W2,X2):1
     [X2=1,W2=0,V1=0] 
* CE 296: start(V1,V,V2) = 0+ proper(W2,X2):2
     [X2=2,W2=1,V1=1] 
* CE 297: start(V1,V,V2) = 0+ proper(V1,W2):3
     [V1>=0,W2=0] 
* CE 298: start(V1,V,V2) = 0+ isNatKind(V1,W2):1
     [V1>=0,W2=0] 
* CE 299: start(V1,V,V2) = 0+ isNatKind(V1,W2):2
     [V1>=W2,W2>=1] 
* CE 300: start(V1,V,V2) = 0+ fun14(V1,V,V2,W2):1
     [V2>=0,V>=0,V1>=0,W2=0] 
* CE 301: start(V1,V,V2) = 0+ fun14(V1,V,V2,W2):2
     [V1>=W2,W2>=1,V2>=0,V>=0] 
* CE 302: start(V1,V,V2) = 0+ fun15(V1,V,V2,W2):1
     [V2>=0,V>=0,V1>=0,W2=0] 
* CE 303: start(V1,V,V2) = 0+ fun15(V1,V,V2,W2):2
     [V1>=W2,W2>=1,V2>=0,V>=0] 
* CE 304: start(V1,V,V2) = 0+ fun16(V1,W2):1
     [V1>=0,W2=0] 
* CE 305: start(V1,V,V2) = 0+ fun16(V1,W2):2
     [V1>=W2,W2>=1] 
* CE 306: start(V1,V,V2) = 0+ fun17(V1,V,W2):1
     [V>=0,V1>=0,W2=0] 
* CE 307: start(V1,V,V2) = 0+ fun17(V1,V,W2):2
     [V1>=W2,W2>=1,V>=0] 
* CE 308: start(V1,V,V2) = 0+ x(V1,V,W2):1
     [V>=0,V1>=0,W2=0] 
* CE 309: start(V1,V,V2) = 0+ x(V1,V,W2):2
     [V1+V>=W2,W2>=1,V>=0,V1>=0] 
* CE 310: start(V1,V,V2) = 0+ fun18(V1,V,V2,W2):1
     [V2>=0,V>=0,V1>=0,W2=0] 
* CE 311: start(V1,V,V2) = 0+ fun18(V1,V,V2,W2):2
     [V1>=W2,W2>=1,V2>=0,V>=0] 
* CE 312: start(V1,V,V2) = 0+ fun19(V1,V,V2,W2):1
     [V2>=0,V>=0,V1>=0,W2=0] 
* CE 313: start(V1,V,V2) = 0+ fun19(V1,V,V2,W2):2
     [V1>=W2,W2>=1,V2>=0,V>=0] 
* CE 314: start(V1,V,V2) = 0+ fun20(V1,W2):1
     [V1>=0,W2=0] 
* CE 315: start(V1,V,V2) = 0+ fun20(V1,W2):2
     [V1>=W2,W2>=1] 
* CE 316: start(V1,V,V2) = 0+ fun21(V1,V,W2):1
     [V>=0,V1>=0,W2=0] 
* CE 317: start(V1,V,V2) = 0+ fun21(V1,V,W2):2
     [V1>=W2,W2>=1,V>=0] 
* CE 318: start(V1,V,V2) = 0+ s(V1,W2):1
     [V1>=0,W2=0] 
* CE 319: start(V1,V,V2) = 0+ s(V1,W2):2
     [V1>=W2,W2>=1] 
* CE 320: start(V1,V,V2) = 0+ fun22(V1,W2):1
     [V1>=0,W2=0] 
* CE 321: start(V1,V,V2) = 0+ fun22(V1,W2):2
     [V1>=W2,W2>=1] 
* CE 322: start(V1,V,V2) = 0+ fun23(V1,V,V2,W2):1
     [V2>=0,V>=0,V1>=0,W2=0] 
* CE 323: start(V1,V,V2) = 0+ fun23(V1,V,V2,W2):2
     [V1>=W2,W2>=1,V2>=0,V>=0] 
* CE 324: start(V1,V,V2) = 0+ fun24(V1,V,W2):1
     [V>=0,V1>=0,W2=0] 
* CE 325: start(V1,V,V2) = 0+ fun24(V1,V,W2):2
     [V1>=W2,W2>=1,V>=0] 
* CE 326: start(V1,V,V2) = 0+ fun25(V1,V,W2):1
     [V>=0,V1>=0,W2=0] 
* CE 327: start(V1,V,V2) = 0+ fun25(V1,V,W2):2
     [V1>=W2,W2>=1,V>=0] 
* CE 328: start(V1,V,V2) = 0+ fun26(V1,V,V2,W2):1
     [V2>=0,V>=0,V1>=0,W2=0] 
* CE 329: start(V1,V,V2) = 0+ fun26(V1,V,V2,W2):2
     [V1>=W2,W2>=1,V2>=0,V>=0] 
* CE 330: start(V1,V,V2) = 0+ fun27(V1,V,V2,W2):1
     [V2>=0,V>=0,V1>=0,W2=0] 
* CE 331: start(V1,V,V2) = 0+ fun27(V1,V,V2,W2):2
     [V1>=W2,W2>=1,V2>=0,V>=0] 
* CE 332: start(V1,V,V2) = 0+ fun28(V1,V,W2):1
     [V>=0,V1>=0,W2=0] 
* CE 333: start(V1,V,V2) = 0+ fun28(V1,V,W2):2
     [V1>=W2,W2>=1,V>=0] 
* CE 334: start(V1,V,V2) = 0+ fun29(V1,V,V2,W2):1
     [V2>=0,V>=0,V1>=0,W2=0] 
* CE 335: start(V1,V,V2) = 0+ fun29(V1,V,V2,W2):2
     [V1>=W2,W2>=1,V2>=0,V>=0] 
* CE 336: start(V1,V,V2) = 0+ fun30(V1,V,V2,W2):1
     [V2>=0,V>=0,V1>=0,W2=0] 
* CE 337: start(V1,V,V2) = 0+ fun30(V1,V,V2,W2):2
     [V1>=W2,W2>=1,V2>=0,V>=0] 
* CE 338: start(V1,V,V2) = 0+ fun31(V1,V,V2,W2):1
     [V2>=0,V>=0,V1>=0,W2=0] 
* CE 339: start(V1,V,V2) = 0+ fun31(V1,V,V2,W2):2
     [V1>=W2,W2>=1,V2>=0,V>=0] 

### Cost equations --> "Loop" of start/3 
* CEs [296] --> Loop 220 
* CEs [261,262,263,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339] --> Loop 221 
* CEs [264] --> Loop 222 

#### Loops of start/3 
* Loop 220: start(V1,V,V2) [V1=1] 
* Loop 221: start(V1,V,V2) [V1>=0] 
* Loop 222: start(V1,V,V2) [V1>=1] 

### Ranking functions of CR start(V1,V,V2) 

#### Partial ranking functions of CR start(V1,V,V2) 


### Resulting Chains:start(V1,V,V2) 
* [222]...
* [221]
* [220]


### Merging Chains  start/3 into  External patterns of execution 
* [[220],[221]] --> 1 
* [[222]] --> 2 


Computing Bounds
=====================================

#### Cost of loops [110,111] 

 * loop 110:fun(V1,V,V2,Out) -> [fun(V1',V',V2',Out')] 
1
 * loop 111:fun(V1,V,V2,Out) -> [fun(V1',V',V2',Out')] 
1
#### Cost of phase [110,111]:fun(V1,V,V2,Out) -> [fun(V1',V',V2',Out')] 
1*it(110)+1*it(111)+0
  Such that:it(111) =< V
it(111) =< V-V'
it(111) =< V2
it(111) =< V2-V2'
aux(1) =< V1
aux(2) =< V1-V1'
it(110) =< aux(1)
it(111) =< aux(1)
it(110) =< aux(2)
it(111) =< aux(2)

#### Cost of chains of fun(V1,V,V2,Out):
* Chain [[110,111],112]: 1*it(110)+1*it(111)+0
  Such that:aux(1) =< V1
it(111) =< V
aux(2) =< Out
it(110) =< aux(1)
it(111) =< aux(1)
it(110) =< aux(2)
it(111) =< aux(2)

  with precondition: [V>=0,V2>=0,Out>=1,V1>=Out] 

* Chain [112]: 0
  with precondition: [Out=0,V1>=0,V>=0,V2>=0] 


#### Cost of loops [113,114] 

 * loop 113:fun1(V1,V,Out) -> [fun1(V1',V',Out')] 
1
 * loop 114:fun1(V1,V,Out) -> [fun1(V1',V',Out')] 
1
#### Cost of phase [113,114]:fun1(V1,V,Out) -> [fun1(V1',V',Out')] 
1*it(113)+1*it(114)+0
  Such that:it(114) =< V
it(114) =< V-V'
aux(3) =< V1
aux(4) =< V1-V1'
it(113) =< aux(3)
it(114) =< aux(3)
it(113) =< aux(4)
it(114) =< aux(4)

#### Cost of chains of fun1(V1,V,Out):
* Chain [[113,114],115]: 1*it(113)+1*it(114)+0
  Such that:aux(3) =< V1
it(114) =< V
aux(4) =< Out
it(113) =< aux(3)
it(114) =< aux(3)
it(113) =< aux(4)
it(114) =< aux(4)

  with precondition: [V>=0,Out>=1,V1>=Out] 

* Chain [115]: 0
  with precondition: [Out=0,V1>=0,V>=0] 


#### Cost of loops [116] 

 * loop 116:fun10(V1,Out) -> [fun10(V1',Out')] 
1
#### Cost of phase [116]:fun10(V1,Out) -> [fun10(V1',Out')] 
1*it(116)+0
  Such that:it(116) =< V1
it(116) =< V1-V1'

#### Cost of chains of fun10(V1,Out):
* Chain [[116],117]: 1*it(116)+0
  Such that:it(116) =< Out

  with precondition: [Out>=1,V1>=Out] 

* Chain [117]: 0
  with precondition: [Out=0,V1>=0] 


#### Cost of loops [118,119] 

 * loop 118:fun11(V1,V,Out) -> [fun11(V1',V',Out')] 
1
 * loop 119:fun11(V1,V,Out) -> [fun11(V1',V',Out')] 
1
#### Cost of phase [118,119]:fun11(V1,V,Out) -> [fun11(V1',V',Out')] 
1*it(118)+1*it(119)+0
  Such that:it(119) =< V
it(119) =< V-V'
aux(5) =< V1
aux(6) =< V1-V1'
it(118) =< aux(5)
it(119) =< aux(5)
it(118) =< aux(6)
it(119) =< aux(6)

#### Cost of chains of fun11(V1,V,Out):
* Chain [[118,119],120]: 1*it(118)+1*it(119)+0
  Such that:aux(5) =< V1
it(119) =< V
aux(6) =< Out
it(118) =< aux(5)
it(119) =< aux(5)
it(118) =< aux(6)
it(119) =< aux(6)

  with precondition: [V>=0,Out>=1,V1>=Out] 

* Chain [120]: 0
  with precondition: [Out=0,V1>=0,V>=0] 


#### Cost of loops [121] 

 * loop 121:fun12(V1,Out) -> [fun12(V1',Out')] 
1
#### Cost of phase [121]:fun12(V1,Out) -> [fun12(V1',Out')] 
1*it(121)+0
  Such that:it(121) =< V1
it(121) =< V1-V1'

#### Cost of chains of fun12(V1,Out):
* Chain [[121],122]: 1*it(121)+0
  Such that:it(121) =< Out

  with precondition: [Out>=1,V1>=Out] 

* Chain [122]: 0
  with precondition: [Out=0,V1>=0] 


#### Cost of loops [123,124] 

 * loop 123:fun13(V1,V,V2,Out) -> [fun13(V1',V',V2',Out')] 
1
 * loop 124:fun13(V1,V,V2,Out) -> [fun13(V1',V',V2',Out')] 
1
#### Cost of phase [123,124]:fun13(V1,V,V2,Out) -> [fun13(V1',V',V2',Out')] 
1*it(123)+1*it(124)+0
  Such that:it(124) =< V
it(124) =< V-V'
it(124) =< V2
it(124) =< V2-V2'
aux(7) =< V1
aux(8) =< V1-V1'
it(123) =< aux(7)
it(124) =< aux(7)
it(123) =< aux(8)
it(124) =< aux(8)

#### Cost of chains of fun13(V1,V,V2,Out):
* Chain [[123,124],125]: 1*it(123)+1*it(124)+0
  Such that:aux(7) =< V1
it(124) =< V
aux(8) =< Out
it(123) =< aux(7)
it(124) =< aux(7)
it(123) =< aux(8)
it(124) =< aux(8)

  with precondition: [V>=0,V2>=0,Out>=1,V1>=Out] 

* Chain [125]: 0
  with precondition: [Out=0,V1>=0,V>=0,V2>=0] 


#### Cost of loops [126,127] 

 * loop 126:fun14(V1,V,V2,Out) -> [fun14(V1',V',V2',Out')] 
1
 * loop 127:fun14(V1,V,V2,Out) -> [fun14(V1',V',V2',Out')] 
1
#### Cost of phase [126,127]:fun14(V1,V,V2,Out) -> [fun14(V1',V',V2',Out')] 
1*it(126)+1*it(127)+0
  Such that:it(127) =< V
it(127) =< V-V'
it(127) =< V2
it(127) =< V2-V2'
aux(9) =< V1
aux(10) =< V1-V1'
it(126) =< aux(9)
it(127) =< aux(9)
it(126) =< aux(10)
it(127) =< aux(10)

#### Cost of chains of fun14(V1,V,V2,Out):
* Chain [[126,127],128]: 1*it(126)+1*it(127)+0
  Such that:aux(9) =< V1
it(127) =< V
aux(10) =< Out
it(126) =< aux(9)
it(127) =< aux(9)
it(126) =< aux(10)
it(127) =< aux(10)

  with precondition: [V>=0,V2>=0,Out>=1,V1>=Out] 

* Chain [128]: 0
  with precondition: [Out=0,V1>=0,V>=0,V2>=0] 


#### Cost of loops [129,130] 

 * loop 129:fun15(V1,V,V2,Out) -> [fun15(V1',V',V2',Out')] 
1
 * loop 130:fun15(V1,V,V2,Out) -> [fun15(V1',V',V2',Out')] 
1
#### Cost of phase [129,130]:fun15(V1,V,V2,Out) -> [fun15(V1',V',V2',Out')] 
1*it(129)+1*it(130)+0
  Such that:it(130) =< V
it(130) =< V-V'
it(130) =< V2
it(130) =< V2-V2'
aux(11) =< V1
aux(12) =< V1-V1'
it(129) =< aux(11)
it(130) =< aux(11)
it(129) =< aux(12)
it(130) =< aux(12)

#### Cost of chains of fun15(V1,V,V2,Out):
* Chain [[129,130],131]: 1*it(129)+1*it(130)+0
  Such that:aux(11) =< V1
it(130) =< V
aux(12) =< Out
it(129) =< aux(11)
it(130) =< aux(11)
it(129) =< aux(12)
it(130) =< aux(12)

  with precondition: [V>=0,V2>=0,Out>=1,V1>=Out] 

* Chain [131]: 0
  with precondition: [Out=0,V1>=0,V>=0,V2>=0] 


#### Cost of loops [132] 

 * loop 132:fun16(V1,Out) -> [fun16(V1',Out')] 
1
#### Cost of phase [132]:fun16(V1,Out) -> [fun16(V1',Out')] 
1*it(132)+0
  Such that:it(132) =< V1
it(132) =< V1-V1'

#### Cost of chains of fun16(V1,Out):
* Chain [[132],133]: 1*it(132)+0
  Such that:it(132) =< Out

  with precondition: [Out>=1,V1>=Out] 

* Chain [133]: 0
  with precondition: [Out=0,V1>=0] 


#### Cost of loops [134,135] 

 * loop 134:fun17(V1,V,Out) -> [fun17(V1',V',Out')] 
1
 * loop 135:fun17(V1,V,Out) -> [fun17(V1',V',Out')] 
1
#### Cost of phase [134,135]:fun17(V1,V,Out) -> [fun17(V1',V',Out')] 
1*it(134)+1*it(135)+0
  Such that:it(135) =< V
it(135) =< V-V'
aux(13) =< V1
aux(14) =< V1-V1'
it(134) =< aux(13)
it(135) =< aux(13)
it(134) =< aux(14)
it(135) =< aux(14)

#### Cost of chains of fun17(V1,V,Out):
* Chain [[134,135],136]: 1*it(134)+1*it(135)+0
  Such that:aux(13) =< V1
it(135) =< V
aux(14) =< Out
it(134) =< aux(13)
it(135) =< aux(13)
it(134) =< aux(14)
it(135) =< aux(14)

  with precondition: [V>=0,Out>=1,V1>=Out] 

* Chain [136]: 0
  with precondition: [Out=0,V1>=0,V>=0] 


#### Cost of loops [137,138] 

 * loop 137:fun18(V1,V,V2,Out) -> [fun18(V1',V',V2',Out')] 
1
 * loop 138:fun18(V1,V,V2,Out) -> [fun18(V1',V',V2',Out')] 
1
#### Cost of phase [137,138]:fun18(V1,V,V2,Out) -> [fun18(V1',V',V2',Out')] 
1*it(137)+1*it(138)+0
  Such that:it(138) =< V
it(138) =< V-V'
it(138) =< V2
it(138) =< V2-V2'
aux(15) =< V1
aux(16) =< V1-V1'
it(137) =< aux(15)
it(138) =< aux(15)
it(137) =< aux(16)
it(138) =< aux(16)

#### Cost of chains of fun18(V1,V,V2,Out):
* Chain [[137,138],139]: 1*it(137)+1*it(138)+0
  Such that:aux(15) =< V1
it(138) =< V
aux(16) =< Out
it(137) =< aux(15)
it(138) =< aux(15)
it(137) =< aux(16)
it(138) =< aux(16)

  with precondition: [V>=0,V2>=0,Out>=1,V1>=Out] 

* Chain [139]: 0
  with precondition: [Out=0,V1>=0,V>=0,V2>=0] 


#### Cost of loops [140,141] 

 * loop 140:fun19(V1,V,V2,Out) -> [fun19(V1',V',V2',Out')] 
1
 * loop 141:fun19(V1,V,V2,Out) -> [fun19(V1',V',V2',Out')] 
1
#### Cost of phase [140,141]:fun19(V1,V,V2,Out) -> [fun19(V1',V',V2',Out')] 
1*it(140)+1*it(141)+0
  Such that:it(141) =< V
it(141) =< V-V'
it(141) =< V2
it(141) =< V2-V2'
aux(17) =< V1
aux(18) =< V1-V1'
it(140) =< aux(17)
it(141) =< aux(17)
it(140) =< aux(18)
it(141) =< aux(18)

#### Cost of chains of fun19(V1,V,V2,Out):
* Chain [[140,141],142]: 1*it(140)+1*it(141)+0
  Such that:aux(17) =< V1
it(141) =< V
aux(18) =< Out
it(140) =< aux(17)
it(141) =< aux(17)
it(140) =< aux(18)
it(141) =< aux(18)

  with precondition: [V>=0,V2>=0,Out>=1,V1>=Out] 

* Chain [142]: 0
  with precondition: [Out=0,V1>=0,V>=0,V2>=0] 


#### Cost of loops [143,144] 

 * loop 143:fun2(V1,V,V2,Out) -> [fun2(V1',V',V2',Out')] 
1
 * loop 144:fun2(V1,V,V2,Out) -> [fun2(V1',V',V2',Out')] 
1
#### Cost of phase [143,144]:fun2(V1,V,V2,Out) -> [fun2(V1',V',V2',Out')] 
1*it(143)+1*it(144)+0
  Such that:it(144) =< V
it(144) =< V-V'
it(144) =< V2
it(144) =< V2-V2'
aux(19) =< V1
aux(20) =< V1-V1'
it(143) =< aux(19)
it(144) =< aux(19)
it(143) =< aux(20)
it(144) =< aux(20)

#### Cost of chains of fun2(V1,V,V2,Out):
* Chain [[143,144],145]: 1*it(143)+1*it(144)+0
  Such that:aux(19) =< V1
it(144) =< V
aux(20) =< Out
it(143) =< aux(19)
it(144) =< aux(19)
it(143) =< aux(20)
it(144) =< aux(20)

  with precondition: [V>=0,V2>=0,Out>=1,V1>=Out] 

* Chain [145]: 0
  with precondition: [Out=0,V1>=0,V>=0,V2>=0] 


#### Cost of loops [146] 

 * loop 146:fun20(V1,Out) -> [fun20(V1',Out')] 
1
#### Cost of phase [146]:fun20(V1,Out) -> [fun20(V1',Out')] 
1*it(146)+0
  Such that:it(146) =< V1
it(146) =< V1-V1'

#### Cost of chains of fun20(V1,Out):
* Chain [[146],147]: 1*it(146)+0
  Such that:it(146) =< Out

  with precondition: [Out>=1,V1>=Out] 

* Chain [147]: 0
  with precondition: [Out=0,V1>=0] 


#### Cost of loops [148,149] 

 * loop 148:fun21(V1,V,Out) -> [fun21(V1',V',Out')] 
1
 * loop 149:fun21(V1,V,Out) -> [fun21(V1',V',Out')] 
1
#### Cost of phase [148,149]:fun21(V1,V,Out) -> [fun21(V1',V',Out')] 
1*it(148)+1*it(149)+0
  Such that:it(149) =< V
it(149) =< V-V'
aux(21) =< V1
aux(22) =< V1-V1'
it(148) =< aux(21)
it(149) =< aux(21)
it(148) =< aux(22)
it(149) =< aux(22)

#### Cost of chains of fun21(V1,V,Out):
* Chain [[148,149],150]: 1*it(148)+1*it(149)+0
  Such that:aux(21) =< V1
it(149) =< V
aux(22) =< Out
it(148) =< aux(21)
it(149) =< aux(21)
it(148) =< aux(22)
it(149) =< aux(22)

  with precondition: [V>=0,Out>=1,V1>=Out] 

* Chain [150]: 0
  with precondition: [Out=0,V1>=0,V>=0] 


#### Cost of loops [151] 

 * loop 151:fun22(V1,Out) -> [fun22(V1',Out')] 
1
#### Cost of phase [151]:fun22(V1,Out) -> [fun22(V1',Out')] 
1*it(151)+0
  Such that:it(151) =< V1
it(151) =< V1-V1'

#### Cost of chains of fun22(V1,Out):
* Chain [[151],152]: 1*it(151)+0
  Such that:it(151) =< Out

  with precondition: [Out>=1,V1>=Out] 

* Chain [152]: 0
  with precondition: [Out=0,V1>=0] 


#### Cost of loops [153,154] 

 * loop 153:fun23(V1,V,V2,Out) -> [fun23(V1',V',V2',Out')] 
1
 * loop 154:fun23(V1,V,V2,Out) -> [fun23(V1',V',V2',Out')] 
1
#### Cost of phase [153,154]:fun23(V1,V,V2,Out) -> [fun23(V1',V',V2',Out')] 
1*it(153)+1*it(154)+0
  Such that:it(154) =< V
it(154) =< V-V'
it(154) =< V2
it(154) =< V2-V2'
aux(23) =< V1
aux(24) =< V1-V1'
it(153) =< aux(23)
it(154) =< aux(23)
it(153) =< aux(24)
it(154) =< aux(24)

#### Cost of chains of fun23(V1,V,V2,Out):
* Chain [[153,154],155]: 1*it(153)+1*it(154)+0
  Such that:aux(23) =< V1
it(154) =< V
aux(24) =< Out
it(153) =< aux(23)
it(154) =< aux(23)
it(153) =< aux(24)
it(154) =< aux(24)

  with precondition: [V>=0,V2>=0,Out>=1,V1>=Out] 

* Chain [155]: 0
  with precondition: [Out=0,V1>=0,V>=0,V2>=0] 


#### Cost of loops [156,157] 

 * loop 156:fun24(V1,V,Out) -> [fun24(V1',V',Out')] 
1
 * loop 157:fun24(V1,V,Out) -> [fun24(V1',V',Out')] 
1
#### Cost of phase [156,157]:fun24(V1,V,Out) -> [fun24(V1',V',Out')] 
1*it(156)+1*it(157)+0
  Such that:it(157) =< V
it(157) =< V-V'
aux(25) =< V1
aux(26) =< V1-V1'
it(156) =< aux(25)
it(157) =< aux(25)
it(156) =< aux(26)
it(157) =< aux(26)

#### Cost of chains of fun24(V1,V,Out):
* Chain [[156,157],158]: 1*it(156)+1*it(157)+0
  Such that:aux(25) =< V1
it(157) =< V
aux(26) =< Out
it(156) =< aux(25)
it(157) =< aux(25)
it(156) =< aux(26)
it(157) =< aux(26)

  with precondition: [V>=0,Out>=1,V1>=Out] 

* Chain [158]: 0
  with precondition: [Out=0,V1>=0,V>=0] 


#### Cost of loops [159,160] 

 * loop 159:fun25(V1,V,Out) -> [fun25(V1',V',Out')] 
1
 * loop 160:fun25(V1,V,Out) -> [fun25(V1',V',Out')] 
1
#### Cost of phase [159,160]:fun25(V1,V,Out) -> [fun25(V1',V',Out')] 
1*it(159)+1*it(160)+0
  Such that:it(160) =< V
it(160) =< V-V'
aux(27) =< V1
aux(28) =< V1-V1'
it(159) =< aux(27)
it(160) =< aux(27)
it(159) =< aux(28)
it(160) =< aux(28)

#### Cost of chains of fun25(V1,V,Out):
* Chain [[159,160],161]: 1*it(159)+1*it(160)+0
  Such that:aux(27) =< V1
it(160) =< V
aux(28) =< Out
it(159) =< aux(27)
it(160) =< aux(27)
it(159) =< aux(28)
it(160) =< aux(28)

  with precondition: [V>=0,Out>=1,V1>=Out] 

* Chain [161]: 0
  with precondition: [Out=0,V1>=0,V>=0] 


#### Cost of loops [162,163] 

 * loop 162:fun26(V1,V,V2,Out) -> [fun26(V1',V',V2',Out')] 
1
 * loop 163:fun26(V1,V,V2,Out) -> [fun26(V1',V',V2',Out')] 
1
#### Cost of phase [162,163]:fun26(V1,V,V2,Out) -> [fun26(V1',V',V2',Out')] 
1*it(162)+1*it(163)+0
  Such that:it(163) =< V
it(163) =< V-V'
it(163) =< V2
it(163) =< V2-V2'
aux(29) =< V1
aux(30) =< V1-V1'
it(162) =< aux(29)
it(163) =< aux(29)
it(162) =< aux(30)
it(163) =< aux(30)

#### Cost of chains of fun26(V1,V,V2,Out):
* Chain [[162,163],164]: 1*it(162)+1*it(163)+0
  Such that:aux(29) =< V1
it(163) =< V
aux(30) =< Out
it(162) =< aux(29)
it(163) =< aux(29)
it(162) =< aux(30)
it(163) =< aux(30)

  with precondition: [V>=0,V2>=0,Out>=1,V1>=Out] 

* Chain [164]: 0
  with precondition: [Out=0,V1>=0,V>=0,V2>=0] 


#### Cost of loops [165,166] 

 * loop 165:fun27(V1,V,V2,Out) -> [fun27(V1',V',V2',Out')] 
1
 * loop 166:fun27(V1,V,V2,Out) -> [fun27(V1',V',V2',Out')] 
1
#### Cost of phase [165,166]:fun27(V1,V,V2,Out) -> [fun27(V1',V',V2',Out')] 
1*it(165)+1*it(166)+0
  Such that:it(166) =< V
it(166) =< V-V'
it(166) =< V2
it(166) =< V2-V2'
aux(31) =< V1
aux(32) =< V1-V1'
it(165) =< aux(31)
it(166) =< aux(31)
it(165) =< aux(32)
it(166) =< aux(32)

#### Cost of chains of fun27(V1,V,V2,Out):
* Chain [[165,166],167]: 1*it(165)+1*it(166)+0
  Such that:aux(31) =< V1
it(166) =< V
aux(32) =< Out
it(165) =< aux(31)
it(166) =< aux(31)
it(165) =< aux(32)
it(166) =< aux(32)

  with precondition: [V>=0,V2>=0,Out>=1,V1>=Out] 

* Chain [167]: 0
  with precondition: [Out=0,V1>=0,V>=0,V2>=0] 


#### Cost of loops [168,169] 

 * loop 168:fun28(V1,V,Out) -> [fun28(V1',V',Out')] 
1
 * loop 169:fun28(V1,V,Out) -> [fun28(V1',V',Out')] 
1
#### Cost of phase [168,169]:fun28(V1,V,Out) -> [fun28(V1',V',Out')] 
1*it(168)+1*it(169)+0
  Such that:it(169) =< V
it(169) =< V-V'
aux(33) =< V1
aux(34) =< V1-V1'
it(168) =< aux(33)
it(169) =< aux(33)
it(168) =< aux(34)
it(169) =< aux(34)

#### Cost of chains of fun28(V1,V,Out):
* Chain [[168,169],170]: 1*it(168)+1*it(169)+0
  Such that:aux(33) =< V1
it(169) =< V
aux(34) =< Out
it(168) =< aux(33)
it(169) =< aux(33)
it(168) =< aux(34)
it(169) =< aux(34)

  with precondition: [V>=0,Out>=1,V1>=Out] 

* Chain [170]: 0
  with precondition: [Out=0,V1>=0,V>=0] 


#### Cost of loops [171,172] 

 * loop 171:fun29(V1,V,V2,Out) -> [fun29(V1',V',V2',Out')] 
1
 * loop 172:fun29(V1,V,V2,Out) -> [fun29(V1',V',V2',Out')] 
1
#### Cost of phase [171,172]:fun29(V1,V,V2,Out) -> [fun29(V1',V',V2',Out')] 
1*it(171)+1*it(172)+0
  Such that:it(172) =< V
it(172) =< V-V'
it(172) =< V2
it(172) =< V2-V2'
aux(35) =< V1
aux(36) =< V1-V1'
it(171) =< aux(35)
it(172) =< aux(35)
it(171) =< aux(36)
it(172) =< aux(36)

#### Cost of chains of fun29(V1,V,V2,Out):
* Chain [[171,172],173]: 1*it(171)+1*it(172)+0
  Such that:aux(35) =< V1
it(172) =< V
aux(36) =< Out
it(171) =< aux(35)
it(172) =< aux(35)
it(171) =< aux(36)
it(172) =< aux(36)

  with precondition: [V>=0,V2>=0,Out>=1,V1>=Out] 

* Chain [173]: 0
  with precondition: [Out=0,V1>=0,V>=0,V2>=0] 


#### Cost of loops [174,175] 

 * loop 174:fun3(V1,V,V2,Out) -> [fun3(V1',V',V2',Out')] 
1
 * loop 175:fun3(V1,V,V2,Out) -> [fun3(V1',V',V2',Out')] 
1
#### Cost of phase [174,175]:fun3(V1,V,V2,Out) -> [fun3(V1',V',V2',Out')] 
1*it(174)+1*it(175)+0
  Such that:it(175) =< V
it(175) =< V-V'
it(175) =< V2
it(175) =< V2-V2'
aux(37) =< V1
aux(38) =< V1-V1'
it(174) =< aux(37)
it(175) =< aux(37)
it(174) =< aux(38)
it(175) =< aux(38)

#### Cost of chains of fun3(V1,V,V2,Out):
* Chain [[174,175],176]: 1*it(174)+1*it(175)+0
  Such that:aux(37) =< V1
it(175) =< V
aux(38) =< Out
it(174) =< aux(37)
it(175) =< aux(37)
it(174) =< aux(38)
it(175) =< aux(38)

  with precondition: [V>=0,V2>=0,Out>=1,V1>=Out] 

* Chain [176]: 0
  with precondition: [Out=0,V1>=0,V>=0,V2>=0] 


#### Cost of loops [177,178] 

 * loop 177:fun30(V1,V,V2,Out) -> [fun30(V1',V',V2',Out')] 
1
 * loop 178:fun30(V1,V,V2,Out) -> [fun30(V1',V',V2',Out')] 
1
#### Cost of phase [177,178]:fun30(V1,V,V2,Out) -> [fun30(V1',V',V2',Out')] 
1*it(177)+1*it(178)+0
  Such that:it(178) =< V
it(178) =< V-V'
it(178) =< V2
it(178) =< V2-V2'
aux(39) =< V1
aux(40) =< V1-V1'
it(177) =< aux(39)
it(178) =< aux(39)
it(177) =< aux(40)
it(178) =< aux(40)

#### Cost of chains of fun30(V1,V,V2,Out):
* Chain [[177,178],179]: 1*it(177)+1*it(178)+0
  Such that:aux(39) =< V1
it(178) =< V
aux(40) =< Out
it(177) =< aux(39)
it(178) =< aux(39)
it(177) =< aux(40)
it(178) =< aux(40)

  with precondition: [V>=0,V2>=0,Out>=1,V1>=Out] 

* Chain [179]: 0
  with precondition: [Out=0,V1>=0,V>=0,V2>=0] 


#### Cost of loops [180,181] 

 * loop 180:fun31(V1,V,V2,Out) -> [fun31(V1',V',V2',Out')] 
1
 * loop 181:fun31(V1,V,V2,Out) -> [fun31(V1',V',V2',Out')] 
1
#### Cost of phase [180,181]:fun31(V1,V,V2,Out) -> [fun31(V1',V',V2',Out')] 
1*it(180)+1*it(181)+0
  Such that:it(181) =< V
it(181) =< V-V'
it(181) =< V2
it(181) =< V2-V2'
aux(41) =< V1
aux(42) =< V1-V1'
it(180) =< aux(41)
it(181) =< aux(41)
it(180) =< aux(42)
it(181) =< aux(42)

#### Cost of chains of fun31(V1,V,V2,Out):
* Chain [[180,181],182]: 1*it(180)+1*it(181)+0
  Such that:aux(41) =< V1
it(181) =< V
aux(42) =< Out
it(180) =< aux(41)
it(181) =< aux(41)
it(180) =< aux(42)
it(181) =< aux(42)

  with precondition: [V>=0,V2>=0,Out>=1,V1>=Out] 

* Chain [182]: 0
  with precondition: [Out=0,V1>=0,V>=0,V2>=0] 


#### Cost of loops [183,184] 

 * loop 183:fun4(V1,V,Out) -> [fun4(V1',V',Out')] 
1
 * loop 184:fun4(V1,V,Out) -> [fun4(V1',V',Out')] 
1
#### Cost of phase [183,184]:fun4(V1,V,Out) -> [fun4(V1',V',Out')] 
1*it(183)+1*it(184)+0
  Such that:it(184) =< V
it(184) =< V-V'
aux(43) =< V1
aux(44) =< V1-V1'
it(183) =< aux(43)
it(184) =< aux(43)
it(183) =< aux(44)
it(184) =< aux(44)

#### Cost of chains of fun4(V1,V,Out):
* Chain [[183,184],185]: 1*it(183)+1*it(184)+0
  Such that:aux(43) =< V1
it(184) =< V
aux(44) =< Out
it(183) =< aux(43)
it(184) =< aux(43)
it(183) =< aux(44)
it(184) =< aux(44)

  with precondition: [V>=0,Out>=1,V1>=Out] 

* Chain [185]: 0
  with precondition: [Out=0,V1>=0,V>=0] 


#### Cost of loops [186] 

 * loop 186:fun5(V1,Out) -> [fun5(V1',Out')] 
1
#### Cost of phase [186]:fun5(V1,Out) -> [fun5(V1',Out')] 
1*it(186)+0
  Such that:it(186) =< V1
it(186) =< V1-V1'

#### Cost of chains of fun5(V1,Out):
* Chain [[186],187]: 1*it(186)+0
  Such that:it(186) =< Out

  with precondition: [Out>=1,V1>=Out] 

* Chain [187]: 0
  with precondition: [Out=0,V1>=0] 


#### Cost of loops [188,189] 

 * loop 188:fun6(V1,V,V2,Out) -> [fun6(V1',V',V2',Out')] 
1
 * loop 189:fun6(V1,V,V2,Out) -> [fun6(V1',V',V2',Out')] 
1
#### Cost of phase [188,189]:fun6(V1,V,V2,Out) -> [fun6(V1',V',V2',Out')] 
1*it(188)+1*it(189)+0
  Such that:it(189) =< V
it(189) =< V-V'
it(189) =< V2
it(189) =< V2-V2'
aux(45) =< V1
aux(46) =< V1-V1'
it(188) =< aux(45)
it(189) =< aux(45)
it(188) =< aux(46)
it(189) =< aux(46)

#### Cost of chains of fun6(V1,V,V2,Out):
* Chain [[188,189],190]: 1*it(188)+1*it(189)+0
  Such that:aux(45) =< V1
it(189) =< V
aux(46) =< Out
it(188) =< aux(45)
it(189) =< aux(45)
it(188) =< aux(46)
it(189) =< aux(46)

  with precondition: [V>=0,V2>=0,Out>=1,V1>=Out] 

* Chain [190]: 0
  with precondition: [Out=0,V1>=0,V>=0,V2>=0] 


#### Cost of loops [191,192] 

 * loop 191:fun7(V1,V,Out) -> [fun7(V1',V',Out')] 
1
 * loop 192:fun7(V1,V,Out) -> [fun7(V1',V',Out')] 
1
#### Cost of phase [191,192]:fun7(V1,V,Out) -> [fun7(V1',V',Out')] 
1*it(191)+1*it(192)+0
  Such that:it(192) =< V
it(192) =< V-V'
aux(47) =< V1
aux(48) =< V1-V1'
it(191) =< aux(47)
it(192) =< aux(47)
it(191) =< aux(48)
it(192) =< aux(48)

#### Cost of chains of fun7(V1,V,Out):
* Chain [[191,192],193]: 1*it(191)+1*it(192)+0
  Such that:aux(47) =< V1
it(192) =< V
aux(48) =< Out
it(191) =< aux(47)
it(192) =< aux(47)
it(191) =< aux(48)
it(192) =< aux(48)

  with precondition: [V>=0,Out>=1,V1>=Out] 

* Chain [193]: 0
  with precondition: [Out=0,V1>=0,V>=0] 


#### Cost of loops [194,195] 

 * loop 194:fun8(V1,V,V2,Out) -> [fun8(V1',V',V2',Out')] 
1
 * loop 195:fun8(V1,V,V2,Out) -> [fun8(V1',V',V2',Out')] 
1
#### Cost of phase [194,195]:fun8(V1,V,V2,Out) -> [fun8(V1',V',V2',Out')] 
1*it(194)+1*it(195)+0
  Such that:it(195) =< V
it(195) =< V-V'
it(195) =< V2
it(195) =< V2-V2'
aux(49) =< V1
aux(50) =< V1-V1'
it(194) =< aux(49)
it(195) =< aux(49)
it(194) =< aux(50)
it(195) =< aux(50)

#### Cost of chains of fun8(V1,V,V2,Out):
* Chain [[194,195],196]: 1*it(194)+1*it(195)+0
  Such that:aux(49) =< V1
it(195) =< V
aux(50) =< Out
it(194) =< aux(49)
it(195) =< aux(49)
it(194) =< aux(50)
it(195) =< aux(50)

  with precondition: [V>=0,V2>=0,Out>=1,V1>=Out] 

* Chain [196]: 0
  with precondition: [Out=0,V1>=0,V>=0,V2>=0] 


#### Cost of loops [197] 

 * loop 197:fun9(V1,Out) -> [fun9(V1',Out')] 
1
#### Cost of phase [197]:fun9(V1,Out) -> [fun9(V1',Out')] 
1*it(197)+0
  Such that:it(197) =< V1
it(197) =< V1-V1'

#### Cost of chains of fun9(V1,Out):
* Chain [[197],198]: 1*it(197)+0
  Such that:it(197) =< Out

  with precondition: [Out>=1,V1>=Out] 

* Chain [198]: 0
  with precondition: [Out=0,V1>=0] 


#### Cost of loops [199] 

 * loop 199:isNat(V1,Out) -> [isNat(V1',Out')] 
1
#### Cost of phase [199]:isNat(V1,Out) -> [isNat(V1',Out')] 
1*it(199)+0
  Such that:it(199) =< V1
it(199) =< V1-V1'

#### Cost of chains of isNat(V1,Out):
* Chain [[199],200]: 1*it(199)+0
  Such that:it(199) =< Out

  with precondition: [Out>=1,V1>=Out] 

* Chain [200]: 0
  with precondition: [Out=0,V1>=0] 


#### Cost of loops [201] 

 * loop 201:isNatKind(V1,Out) -> [isNatKind(V1',Out')] 
1
#### Cost of phase [201]:isNatKind(V1,Out) -> [isNatKind(V1',Out')] 
1*it(201)+0
  Such that:it(201) =< V1
it(201) =< V1-V1'

#### Cost of chains of isNatKind(V1,Out):
* Chain [[201],202]: 1*it(201)+0
  Such that:it(201) =< Out

  with precondition: [Out>=1,V1>=Out] 

* Chain [202]: 0
  with precondition: [Out=0,V1>=0] 


#### Cost of loops [203,204,205] 

 * loop 203:plus(V1,V,Out) -> [plus(V1',V',Out')] 
1
 * loop 204:plus(V1,V,Out) -> [plus(V1',V',Out')] 
1
 * loop 205:plus(V1,V,Out) -> [plus(V1',V',Out')] 
1
#### Cost of phase [203,204,205]:plus(V1,V,Out) -> [plus(V1',V',Out')] 
1*it(203)+1*it(204)+1*it(205)+0
  Such that:aux(51) =< V1
aux(52) =< V1+V
aux(53) =< V1+V-V1'-V'
aux(54) =< V1-V1'
aux(55) =< V
aux(56) =< V-V'
it(204) =< aux(51)
it(205) =< aux(51)
it(203) =< aux(52)
it(204) =< aux(52)
it(205) =< aux(52)
it(203) =< aux(53)
it(204) =< aux(53)
it(205) =< aux(53)
it(204) =< aux(54)
it(205) =< aux(54)
it(203) =< aux(55)
it(205) =< aux(55)
it(203) =< aux(56)
it(205) =< aux(56)

#### Cost of chains of plus(V1,V,Out):
* Chain [[203,204,205],206]: 1*it(203)+1*it(204)+1*it(205)+0
  Such that:aux(57) =< V1
aux(58) =< V1+V
aux(59) =< V
it(204) =< aux(57)
it(205) =< aux(57)
it(203) =< aux(58)
it(204) =< aux(58)
it(205) =< aux(58)
it(203) =< aux(59)
it(205) =< aux(59)

  with precondition: [V1>=0,V>=0,Out>=1,V+V1>=Out] 

* Chain [206]: 0
  with precondition: [Out=0,V1>=0,V>=0] 


#### Cost of chains of proper(V1,Out):
* Chain [209]: 1
  with precondition: [V1=0,Out=1] 

* Chain [208]: 1
  with precondition: [V1=1,Out=2] 

* Chain [207]: 0
  with precondition: [Out=0,V1>=0] 


#### Cost of loops [210] 

 * loop 210:s(V1,Out) -> [s(V1',Out')] 
1
#### Cost of phase [210]:s(V1,Out) -> [s(V1',Out')] 
1*it(210)+0
  Such that:it(210) =< V1
it(210) =< V1-V1'

#### Cost of chains of s(V1,Out):
* Chain [[210],211]: 1*it(210)+0
  Such that:it(210) =< Out

  with precondition: [Out>=1,V1>=Out] 

* Chain [211]: 0
  with precondition: [Out=0,V1>=0] 


#### Cost of loops [213,214] 

 * loop 213:top(V1,Out) -> [top(V1',Out')] 
2
 * loop 214:top(V1,Out) -> [top(V1',Out')] 
2
#### Cost of phase [213,214]:top(V1,Out) -> [top(V1',Out')] 
4*it(213)+0
#### Cost of phase [213,214]:top(V1,Out) -> [top(V1',Out')] 
4*it(213)+0
#### Cost of phase [213,214]:top(V1,Out) -> [top(V1',Out')] 
4*it(213)+0
#### Cost of chains of top(V1,Out):
* Chain [[213,214]]...: 4*it(213)+0
  with precondition: [V1>=1] 

* Chain [[213,214],215]: 4*it(213)+0
  with precondition: [Out=0,V1>=1] 

* Chain [[213,214],212,215]: 4*it(213)+1
  with precondition: [Out=0,V1>=1] 

* Chain [215]: 0
  with precondition: [Out=0,V1>=0] 

* Chain [212,215]: 1
  with precondition: [Out=0,V1>=1] 


#### Cost of loops [216,217,218] 

 * loop 216:x(V1,V,Out) -> [x(V1',V',Out')] 
1
 * loop 217:x(V1,V,Out) -> [x(V1',V',Out')] 
1
 * loop 218:x(V1,V,Out) -> [x(V1',V',Out')] 
1
#### Cost of phase [216,217,218]:x(V1,V,Out) -> [x(V1',V',Out')] 
1*it(216)+1*it(217)+1*it(218)+0
  Such that:aux(61) =< V1
aux(62) =< V1+V
aux(63) =< V1+V-V1'-V'
aux(64) =< V1-V1'
aux(65) =< V
aux(66) =< V-V'
it(217) =< aux(61)
it(218) =< aux(61)
it(216) =< aux(62)
it(217) =< aux(62)
it(218) =< aux(62)
it(216) =< aux(63)
it(217) =< aux(63)
it(218) =< aux(63)
it(217) =< aux(64)
it(218) =< aux(64)
it(216) =< aux(65)
it(218) =< aux(65)
it(216) =< aux(66)
it(218) =< aux(66)

#### Cost of chains of x(V1,V,Out):
* Chain [[216,217,218],219]: 1*it(216)+1*it(217)+1*it(218)+0
  Such that:aux(67) =< V1
aux(68) =< V1+V
aux(69) =< V
it(217) =< aux(67)
it(218) =< aux(67)
it(216) =< aux(68)
it(217) =< aux(68)
it(218) =< aux(68)
it(216) =< aux(69)
it(218) =< aux(69)

  with precondition: [V1>=0,V>=0,Out>=1,V+V1>=Out] 

* Chain [219]: 0
  with precondition: [Out=0,V1>=0,V>=0] 


#### Cost of chains of start(V1,V,V2):
* Chain [222]...: 4*s(3)+0
  with precondition: [V1>=1] 

* Chain [221]: 25*s(5)+35*s(7)+1*s(8)+2*s(48)+2*s(49)+2*s(50)+1
  Such that:aux(95) =< V1
aux(96) =< V1+V
aux(97) =< V
s(7) =< aux(95)
s(5) =< aux(97)
s(48) =< aux(95)
s(49) =< aux(95)
s(50) =< aux(96)
s(48) =< aux(96)
s(49) =< aux(96)
s(50) =< aux(97)
s(49) =< aux(97)
s(5) =< aux(95)

  with precondition: [V1>=0] 

* Chain [220]: 1
  with precondition: [V1=1] 


Closed-form bounds of start(V1,V,V2): 
-------------------------------------
* Chain [222]... with precondition: [V1>=1] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [221] with precondition: [V1>=0] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [220] with precondition: [V1=1] 
    - Upper bound: 1 
    - Complexity: constant 

### Maximum cost of start(V1,V,V2): inf 
Asymptotic class: infinity 

Time statistics: 
-------------------------------------
* Partial evaluation computed in 105 ms.
* Invariants computed in 297 ms.
   - Backward Invariants 112 ms.
   - Transitive Invariants 89 ms.
* Refinement performed in 495 ms.
* Termination proved in 107 ms.
* Upper bounds computed in 499 ms.
   - Equation cost structures 171 ms.
   - Phase cost structures 198 ms.
   - Chain cost structures 180 ms.
   - Solving cost expressions 1 ms.
* Total analysis performed in 1720 ms.


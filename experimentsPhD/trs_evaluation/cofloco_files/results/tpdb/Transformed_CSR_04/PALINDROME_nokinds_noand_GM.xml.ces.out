
Preprocessing Cost Relations
=====================================
10. SCC does not have a single cut point : [fun4/2,fun8/2]  
 Merged into fun4fun8/2
11. SCC does not have a single cut point : [fun/3,mark/2]  
 Merged into funmark/3

#### Computed strongly connected components 
0. non_recursive  : [fun1/2]
1. non_recursive  : [fun10/2]
2. non_recursive  : [fun11/2]
3. non_recursive  : [fun13/2]
4. non_recursive  : [fun15/2]
5. non_recursive  : [fun16/2]
6. recursive [non_tail] : [fun12/3,fun14/2,fun17/2]
7. non_recursive  : [fun3/2]
8. non_recursive  : [fun5/2]
9. non_recursive  : [fun7/2]
12. non_recursive  : [start/2]
10. recursive [non_tail,multiple] : [fun2/3,fun4fun8/2,fun6/3,fun9/3]
11. recursive [non_tail,multiple] : [funmark/3]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into fun1/2
1. SCC is partially evaluated into fun10/2
2. SCC is partially evaluated into fun11/2
3. SCC is partially evaluated into fun13/2
4. SCC is partially evaluated into fun15/2
5. SCC is partially evaluated into fun16/2
6. SCC is partially evaluated into fun17/2
7. SCC is partially evaluated into fun3/2
8. SCC is partially evaluated into fun5/2
9. SCC is partially evaluated into fun7/2
12. SCC is partially evaluated into start/2
10. SCC is partially evaluated into fun4fun8/2
11. SCC is partially evaluated into funmark/3

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations fun1/2 
* CE 80 is refined into CE [90] 
* CE 79 is refined into CE [91] 


#### Refined cost equations fun1/2 
* CE 90: fun1(V4,Out) = 1
     [V4>=0,V4+1=Out] 
* CE 91: fun1(V4,Out) = 1
     [Out=5,V4=5] 

### Cost equations --> "Loop" of fun1/2 
* CEs [90] --> Loop 46 
* CEs [91] --> Loop 47 

#### Loops of fun1/2 
* Loop 46: fun1(V4,Out) [V4>=0,V4+1=Out] 
* Loop 47: fun1(V4,Out) [Out=5,V4=5] 

### Ranking functions of CR fun1(V4,Out) 

#### Partial ranking functions of CR fun1(V4,Out) 


### Resulting Chains:fun1(V4,Out) 
* [47]
* [46]


### Merging Chains  fun1/2 into  External patterns of execution 
* [[47]] --> 1 
* [[46]] --> 2 


### Specialization of cost equations fun10/2 
* CE 35 is refined into CE [92] 
* CE 34 is refined into CE [93] 


#### Refined cost equations fun10/2 
* CE 92: fun10(V4,Out) = 1
     [V4>=0,V4+1=Out] 
* CE 93: fun10(V4,Out) = 1
     [Out=5,V4=5] 

### Cost equations --> "Loop" of fun10/2 
* CEs [92] --> Loop 48 
* CEs [93] --> Loop 49 

#### Loops of fun10/2 
* Loop 48: fun10(V4,Out) [V4>=0,V4+1=Out] 
* Loop 49: fun10(V4,Out) [Out=5,V4=5] 

### Ranking functions of CR fun10(V4,Out) 

#### Partial ranking functions of CR fun10(V4,Out) 


### Resulting Chains:fun10(V4,Out) 
* [49]
* [48]


### Merging Chains  fun10/2 into  External patterns of execution 
* [[49]] --> 1 
* [[48]] --> 2 


### Specialization of cost equations fun11/2 
* CE 84 is refined into CE [94] 
* CE 83 is refined into CE [95] 


#### Refined cost equations fun11/2 
* CE 94: fun11(V4,Out) = 1
     [V4>=0,V4+1=Out] 
* CE 95: fun11(V4,Out) = 1
     [Out=5,V4=5] 

### Cost equations --> "Loop" of fun11/2 
* CEs [94] --> Loop 50 
* CEs [95] --> Loop 51 

#### Loops of fun11/2 
* Loop 50: fun11(V4,Out) [V4>=0,V4+1=Out] 
* Loop 51: fun11(V4,Out) [Out=5,V4=5] 

### Ranking functions of CR fun11(V4,Out) 

#### Partial ranking functions of CR fun11(V4,Out) 


### Resulting Chains:fun11(V4,Out) 
* [51]
* [50]


### Merging Chains  fun11/2 into  External patterns of execution 
* [[51]] --> 1 
* [[50]] --> 2 


### Specialization of cost equations fun13/2 
* CE 37 is refined into CE [96] 
* CE 36 is refined into CE [97] 


#### Refined cost equations fun13/2 
* CE 96: fun13(V4,Out) = 1
     [V4>=0,V4+1=Out] 
* CE 97: fun13(V4,Out) = 1
     [Out=5,V4=5] 

### Cost equations --> "Loop" of fun13/2 
* CEs [96] --> Loop 52 
* CEs [97] --> Loop 53 

#### Loops of fun13/2 
* Loop 52: fun13(V4,Out) [V4>=0,V4+1=Out] 
* Loop 53: fun13(V4,Out) [Out=5,V4=5] 

### Ranking functions of CR fun13(V4,Out) 

#### Partial ranking functions of CR fun13(V4,Out) 


### Resulting Chains:fun13(V4,Out) 
* [53]
* [52]


### Merging Chains  fun13/2 into  External patterns of execution 
* [[53]] --> 1 
* [[52]] --> 2 


### Specialization of cost equations fun15/2 
* CE 45 is refined into CE [98] 
* CE 44 is refined into CE [99] 


#### Refined cost equations fun15/2 
* CE 98: fun15(V4,Out) = 1
     [V4>=0,V4+1=Out] 
* CE 99: fun15(V4,Out) = 1
     [Out=5,V4=5] 

### Cost equations --> "Loop" of fun15/2 
* CEs [98] --> Loop 54 
* CEs [99] --> Loop 55 

#### Loops of fun15/2 
* Loop 54: fun15(V4,Out) [V4>=0,V4+1=Out] 
* Loop 55: fun15(V4,Out) [Out=5,V4=5] 

### Ranking functions of CR fun15(V4,Out) 

#### Partial ranking functions of CR fun15(V4,Out) 


### Resulting Chains:fun15(V4,Out) 
* [55]
* [54]


### Merging Chains  fun15/2 into  External patterns of execution 
* [[55]] --> 1 
* [[54]] --> 2 


### Specialization of cost equations fun16/2 
* CE 88 is refined into CE [100] 
* CE 89 is refined into CE [101] 
* CE 87 is refined into CE [102] 
* CE 86 is refined into CE [103] 
* CE 85 is refined into CE [104] 


#### Refined cost equations fun16/2 
* CE 100: fun16(V4,Out) = 1
     [V4>=0,V4+1=Out] 
* CE 101: fun16(V4,Out) = 1
     [Out=5,V4=6] 
* CE 102: fun16(V4,Out) = 1
     [Out=5,V4=2] 
* CE 103: fun16(V4,Out) = 1
     [Out=5,V4=1] 
* CE 104: fun16(V4,Out) = 1
     [Out=5,V4=0] 

### Cost equations --> "Loop" of fun16/2 
* CEs [100] --> Loop 56 
* CEs [101] --> Loop 57 
* CEs [102] --> Loop 58 
* CEs [103] --> Loop 59 
* CEs [104] --> Loop 60 

#### Loops of fun16/2 
* Loop 56: fun16(V4,Out) [V4>=0,V4+1=Out] 
* Loop 57: fun16(V4,Out) [Out=5,V4=6] 
* Loop 58: fun16(V4,Out) [Out=5,V4=2] 
* Loop 59: fun16(V4,Out) [Out=5,V4=1] 
* Loop 60: fun16(V4,Out) [Out=5,V4=0] 

### Ranking functions of CR fun16(V4,Out) 

#### Partial ranking functions of CR fun16(V4,Out) 


### Resulting Chains:fun16(V4,Out) 
* [60]
* [59]
* [58]
* [57]
* [56]


### Merging Chains  fun16/2 into  External patterns of execution 
* [[60]] --> 1 
* [[59]] --> 2 
* [[58]] --> 3 
* [[57]] --> 4 
* [[56]] --> 5 


### Specialization of cost equations fun17/2 
* CE 38 is refined into CE [105,106,107,108,109,110,111,112,113,114] 
* CE 39 is refined into CE [115,116,117,118,119,120,121,122,123,124] 
* CE 41 is refined into CE [125,126,127,128,129] 
* CE 42 is refined into CE [130,131,132,133,134,135,136,137,138,139] 
* CE 43 is refined into CE [140] 
* CE 40 is refined into CE [141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160] 


#### Refined cost equations fun17/2 
* CE 105: fun17(V4,Out) = 3+ fun16(W4,X4):1+ fun13(Y4,Z4):1
     [Z4=5,Y4=5,X4=5,W4=0,Out=5,V4=6] 
* CE 106: fun17(A,A) = 3+ fun16(B,C):1+ fun13(D,A):2
     [A>=2,A=D+1,C=5,B=0] 
* CE 107: fun17(V4,Out) = 3+ fun16(W4,X4):2+ fun13(Y4,Z4):1
     [Z4=5,Y4=5,X4=5,W4=1,Out=5,V4=8] 
* CE 108: fun17(V4,Out) = 3+ fun16(W4,X4):2+ fun13(Y4,Out):2
     [Out>=2,Out=Y4+1,Out+2=V4,X4=5,W4=1] 
* CE 109: fun17(V4,Out) = 3+ fun16(W4,X4):3+ fun13(Y4,Z4):1
     [Z4=5,Y4=5,X4=5,W4=2,Out=5,V4=10] 
* CE 110: fun17(V4,Out) = 3+ fun16(W4,X4):3+ fun13(Y4,Out):2
     [Out>=2,Out=Y4+1,Out+4=V4,X4=5,W4=2] 
* CE 111: fun17(V4,Out) = 3+ fun16(W4,X4):4+ fun13(Y4,Z4):1
     [Z4=5,Y4=5,X4=5,W4=6,Out=5,V4=18] 
* CE 112: fun17(V4,Out) = 3+ fun16(W4,X4):4+ fun13(Y4,Out):2
     [Out>=2,Out=Y4+1,Out+12=V4,X4=5,W4=6] 
* CE 113: fun17(V4,Out) = 3+ fun16(W4,X4):5+ fun13(Y4,Z4):1
     [Z4=5,Y4=5,X4=5,W4=4,Out=5,V4=14] 
* CE 114: fun17(V4,Out) = 3+ fun16(W4,X4):5+ fun13(Y4,Out):2
     [Out>=2,Out=Y4+1,Out+8=V4,X4=5,W4=4] 
* CE 115: fun17(V4,Out) = 3+ fun16(W4,X4):1+ fun13(Y4,Z4):1
     [Z4=5,Y4=5,X4=5,W4=0,Out=5,V4=5] 
* CE 116: fun17(V4,Out) = 3+ fun16(W4,X4):1+ fun13(Y4,Z4):2
     [Z4=6,Y4=5,X4=5,W4=0,Out=6,V4=5] 
* CE 117: fun17(V4,Out) = 3+ fun16(W4,X4):2+ fun13(Y4,Z4):1
     [Z4=5,Y4=5,X4=5,W4=1,Out=5,V4=7] 
* CE 118: fun17(V4,Out) = 3+ fun16(W4,X4):2+ fun13(Y4,Z4):2
     [Z4=6,Y4=5,X4=5,W4=1,Out=6,V4=7] 
* CE 119: fun17(V4,Out) = 3+ fun16(W4,X4):3+ fun13(Y4,Z4):1
     [Z4=5,Y4=5,X4=5,W4=2,Out=5,V4=9] 
* CE 120: fun17(V4,Out) = 3+ fun16(W4,X4):3+ fun13(Y4,Z4):2
     [Z4=6,Y4=5,X4=5,W4=2,Out=6,V4=9] 
* CE 121: fun17(V4,Out) = 3+ fun16(W4,X4):4+ fun13(Y4,Z4):1
     [Z4=5,Y4=5,X4=5,W4=6,Out=5,V4=17] 
* CE 122: fun17(V4,Out) = 3+ fun16(W4,X4):4+ fun13(Y4,Z4):2
     [Z4=6,Y4=5,X4=5,W4=6,Out=6,V4=17] 
* CE 123: fun17(V4,Out) = 3+ fun16(W4,X4):5+ fun13(Y4,Z4):1
     [Z4=5,Y4=5,X4=5,W4=4,Out=5,V4=13] 
* CE 124: fun17(V4,Out) = 3+ fun16(W4,X4):5+ fun13(Y4,Z4):2
     [Z4=6,Y4=5,X4=5,W4=4,Out=6,V4=13] 
* CE 125: fun17(V4,Out) = 2+ fun16(W4,X4):1
     [V4>=2,V4+4=Out,X4=5,W4=0] 
* CE 126: fun17(V4,Out) = 2+ fun16(W4,X4):2
     [V4>=4,V4+2=Out,X4=5,W4=1] 
* CE 127: fun17(A,A) = 2+ fun16(B,C):3
     [A>=6,C=5,B=2] 
* CE 128: fun17(V4,Out) = 2+ fun16(W4,X4):4
     [V4>=14,V4=Out+8,X4=5,W4=6] 
* CE 129: fun17(V4,Out) = 2+ fun16(W4,X4):5
     [V4>=2*X4,X4>=1,Out+X4=V4+1,X4=W4+1] 
* CE 130: fun17(V4,Out) = 1+ fun16(W4,X4):1+ fun11(Y4,Z4):1
     [Z4=5,Y4=5,X4=5,W4=0,Out=5,V4=0] 
* CE 131: fun17(V4,Out) = 1+ fun16(W4,X4):1+ fun11(Y4,Z4):2
     [Z4=6,Y4=5,X4=5,W4=0,Out=6,V4=0] 
* CE 132: fun17(V4,Out) = 1+ fun16(W4,X4):2+ fun11(Y4,Z4):1
     [Z4=5,Y4=5,X4=5,W4=1,Out=5,V4=1] 
* CE 133: fun17(V4,Out) = 1+ fun16(W4,X4):2+ fun11(Y4,Z4):2
     [Z4=6,Y4=5,X4=5,W4=1,Out=6,V4=1] 
* CE 134: fun17(V4,Out) = 1+ fun16(W4,X4):3+ fun11(Y4,Z4):1
     [Z4=5,Y4=5,X4=5,W4=2,Out=5,V4=2] 
* CE 135: fun17(V4,Out) = 1+ fun16(W4,X4):3+ fun11(Y4,Z4):2
     [Z4=6,Y4=5,X4=5,W4=2,Out=6,V4=2] 
* CE 136: fun17(V4,Out) = 1+ fun16(W4,X4):4+ fun11(Y4,Z4):1
     [Z4=5,Y4=5,X4=5,W4=6,Out=5,V4=6] 
* CE 137: fun17(V4,Out) = 1+ fun16(W4,X4):4+ fun11(Y4,Z4):2
     [Z4=6,Y4=5,X4=5,W4=6,Out=6,V4=6] 
* CE 138: fun17(V4,Out) = 1+ fun16(W4,X4):5+ fun11(Y4,Z4):1
     [Z4=5,Y4=5,X4=5,W4=4,Out=5,V4=4] 
* CE 139: fun17(V4,Out) = 1+ fun16(W4,X4):5+ fun11(Y4,Out):2
     [Out>=2,Out=Y4+1,Out=X4+1,Out=W4+2,Out=V4+2] 
* CE 140: fun17(V4,Out) = 1
     [V4>=0,V4+1=Out] 
* CE 141: fun17(V4,Out) = 3+ fun16(W4,X4):1+ fun17(Y4,Z4)+ fun15(A5,B5):1+ fun13(C5,D5):1
     [Y4>=0,Y4+2=V4,Z4=5,D5=5,C5=5,B5=5,A5=5,X4=5,W4=0,Out=5] 
* CE 142: fun17(V4,Out) = 3+ fun16(W4,X4):1+ fun17(Y4,Z4)+ fun15(A5,B5):1+ fun13(C5,D5):2
     [Y4>=0,Y4+2=V4,Z4=5,D5=6,C5=5,B5=5,A5=5,X4=5,W4=0,Out=6] 
* CE 143: fun17(V4,Out) = 3+ fun16(W4,X4):1+ fun17(Y4,Z4)+ fun15(A5,B5):2+ fun13(C5,D5):1
     [Y4>=0,Y4+2=V4,Z4=4,D5=5,C5=5,B5=5,A5=4,X4=5,W4=0,Out=5] 
* CE 144: fun17(V4,Out) = 3+ fun16(W4,X4):1+ fun17(Y4,Z4)+ fun15(A5,B5):2+ fun13(C5,Out):2
     [Y4>=0,Out>=2,Out=Z4+2,Out=C5+1,Out=B5+1,Out=A5+2,Y4+2=V4,X4=5,W4=0] 
* CE 145: fun17(V4,Out) = 3+ fun16(W4,X4):2+ fun17(Y4,Z4)+ fun15(A5,B5):1+ fun13(C5,D5):1
     [Y4>=0,Y4+4=V4,Z4=5,D5=5,C5=5,B5=5,A5=5,X4=5,W4=1,Out=5] 
* CE 146: fun17(V4,Out) = 3+ fun16(W4,X4):2+ fun17(Y4,Z4)+ fun15(A5,B5):1+ fun13(C5,D5):2
     [Y4>=0,Y4+4=V4,Z4=5,D5=6,C5=5,B5=5,A5=5,X4=5,W4=1,Out=6] 
* CE 147: fun17(V4,Out) = 3+ fun16(W4,X4):2+ fun17(Y4,Z4)+ fun15(A5,B5):2+ fun13(C5,D5):1
     [Y4>=0,Y4+4=V4,Z4=4,D5=5,C5=5,B5=5,A5=4,X4=5,W4=1,Out=5] 
* CE 148: fun17(V4,Out) = 3+ fun16(W4,X4):2+ fun17(Y4,Z4)+ fun15(A5,B5):2+ fun13(C5,Out):2
     [Y4>=0,Out>=2,Out=Z4+2,Out=C5+1,Out=B5+1,Out=A5+2,Y4+4=V4,X4=5,W4=1] 
* CE 149: fun17(V4,Out) = 3+ fun16(W4,X4):3+ fun17(Y4,Z4)+ fun15(A5,B5):1+ fun13(C5,D5):1
     [Y4>=0,Y4+6=V4,Z4=5,D5=5,C5=5,B5=5,A5=5,X4=5,W4=2,Out=5] 
* CE 150: fun17(V4,Out) = 3+ fun16(W4,X4):3+ fun17(Y4,Z4)+ fun15(A5,B5):1+ fun13(C5,D5):2
     [Y4>=0,Y4+6=V4,Z4=5,D5=6,C5=5,B5=5,A5=5,X4=5,W4=2,Out=6] 
* CE 151: fun17(V4,Out) = 3+ fun16(W4,X4):3+ fun17(Y4,Z4)+ fun15(A5,B5):2+ fun13(C5,D5):1
     [Y4>=0,Y4+6=V4,Z4=4,D5=5,C5=5,B5=5,A5=4,X4=5,W4=2,Out=5] 
* CE 152: fun17(V4,Out) = 3+ fun16(W4,X4):3+ fun17(Y4,Z4)+ fun15(A5,B5):2+ fun13(C5,Out):2
     [Y4>=0,Out>=2,Out=Z4+2,Out=C5+1,Out=B5+1,Out=A5+2,Y4+6=V4,X4=5,W4=2] 
* CE 153: fun17(V4,Out) = 3+ fun16(W4,X4):4+ fun17(Y4,Z4)+ fun15(A5,B5):1+ fun13(C5,D5):1
     [Y4>=0,Y4+14=V4,Z4=5,D5=5,C5=5,B5=5,A5=5,X4=5,W4=6,Out=5] 
* CE 154: fun17(V4,Out) = 3+ fun16(W4,X4):4+ fun17(Y4,Z4)+ fun15(A5,B5):1+ fun13(C5,D5):2
     [Y4>=0,Y4+14=V4,Z4=5,D5=6,C5=5,B5=5,A5=5,X4=5,W4=6,Out=6] 
* CE 155: fun17(V4,Out) = 3+ fun16(W4,X4):4+ fun17(Y4,Z4)+ fun15(A5,B5):2+ fun13(C5,D5):1
     [Y4>=0,Y4+14=V4,Z4=4,D5=5,C5=5,B5=5,A5=4,X4=5,W4=6,Out=5] 
* CE 156: fun17(V4,Out) = 3+ fun16(W4,X4):4+ fun17(Y4,Z4)+ fun15(A5,B5):2+ fun13(C5,Out):2
     [Y4>=0,Out>=2,Out=Z4+2,Out=C5+1,Out=B5+1,Out=A5+2,Y4+14=V4,X4=5,W4=6] 
* CE 157: fun17(V4,Out) = 3+ fun16(W4,X4):5+ fun17(Y4,Z4)+ fun15(A5,B5):1+ fun13(C5,D5):1
     [Y4>=0,Y4+10=V4,Z4=5,D5=5,C5=5,B5=5,A5=5,X4=5,W4=4,Out=5] 
* CE 158: fun17(V4,Out) = 3+ fun16(W4,X4):5+ fun17(Y4,Z4)+ fun15(A5,B5):1+ fun13(C5,D5):2
     [Y4>=0,Y4+10=V4,Z4=5,D5=6,C5=5,B5=5,A5=5,X4=5,W4=4,Out=6] 
* CE 159: fun17(V4,Out) = 3+ fun16(W4,X4):5+ fun17(Y4,Z4)+ fun15(A5,B5):2+ fun13(C5,D5):1
     [Y4>=0,Y4+10=V4,Z4=4,D5=5,C5=5,B5=5,A5=4,X4=5,W4=4,Out=5] 
* CE 160: fun17(V4,Out) = 3+ fun16(W4,X4):5+ fun17(Y4,Z4)+ fun15(A5,B5):2+ fun13(C5,Out):2
     [Y4>=0,Out>=2,Out=Z4+2,Out=C5+1,Out=B5+1,Out=A5+2,Y4+10=V4,X4=5,W4=4] 

### Cost equations --> "Loop" of fun17/2 
* CEs [144] --> Loop 61 
* CEs [148] --> Loop 62 
* CEs [152] --> Loop 63 
* CEs [160] --> Loop 64 
* CEs [156] --> Loop 65 
* CEs [142] --> Loop 66 
* CEs [146] --> Loop 67 
* CEs [150] --> Loop 68 
* CEs [158] --> Loop 69 
* CEs [154] --> Loop 70 
* CEs [141] --> Loop 71 
* CEs [145] --> Loop 72 
* CEs [149] --> Loop 73 
* CEs [157] --> Loop 74 
* CEs [153] --> Loop 75 
* CEs [143] --> Loop 76 
* CEs [147] --> Loop 77 
* CEs [151] --> Loop 78 
* CEs [159] --> Loop 79 
* CEs [155] --> Loop 80 
* CEs [126,139] --> Loop 81 
* CEs [111] --> Loop 82 
* CEs [122] --> Loop 83 
* CEs [112,121] --> Loop 84 
* CEs [113] --> Loop 85 
* CEs [124] --> Loop 86 
* CEs [114,123,128] --> Loop 87 
* CEs [109] --> Loop 88 
* CEs [120] --> Loop 89 
* CEs [110,119] --> Loop 90 
* CEs [107] --> Loop 91 
* CEs [118] --> Loop 92 
* CEs [108,117] --> Loop 93 
* CEs [137] --> Loop 94 
* CEs [105,136] --> Loop 95 
* CEs [116] --> Loop 96 
* CEs [106,115,127,129] --> Loop 97 
* CEs [138,140] --> Loop 98 
* CEs [125,135] --> Loop 99 
* CEs [134] --> Loop 100 
* CEs [133] --> Loop 101 
* CEs [132] --> Loop 102 
* CEs [131] --> Loop 103 
* CEs [130] --> Loop 104 

#### Loops of fun17/2 
* Loop 61: fun17(V4,Out)->  fun17(V4',Out')
                  [Out>=2,V4>=2,Out=Out'+2,V4=V4'+2] 
* Loop 62: fun17(V4,Out)->  fun17(V4',Out')
                  [Out>=2,V4>=4,Out=Out'+2,V4=V4'+4] 
* Loop 63: fun17(V4,Out)->  fun17(V4',Out')
                  [Out>=2,V4>=6,Out=Out'+2,V4=V4'+6] 
* Loop 64: fun17(V4,Out)->  fun17(V4',Out')
                  [Out>=2,V4>=10,Out=Out'+2,V4=V4'+10] 
* Loop 65: fun17(V4,Out)->  fun17(V4',Out')
                  [Out>=2,V4>=14,Out=Out'+2,V4=V4'+14] 
* Loop 66: fun17(V4,Out)->  fun17(V4',Out')
                  [V4>=2,V4=V4'+2,Out'=5,Out=6] 
* Loop 67: fun17(V4,Out)->  fun17(V4',Out')
                  [V4>=4,V4=V4'+4,Out'=5,Out=6] 
* Loop 68: fun17(V4,Out)->  fun17(V4',Out')
                  [V4>=6,V4=V4'+6,Out'=5,Out=6] 
* Loop 69: fun17(V4,Out)->  fun17(V4',Out')
                  [V4>=10,V4=V4'+10,Out'=5,Out=6] 
* Loop 70: fun17(V4,Out)->  fun17(V4',Out')
                  [V4>=14,V4=V4'+14,Out'=5,Out=6] 
* Loop 71: fun17(V4,Out)->  fun17(V4',Out')
                  [V4>=2,V4=V4'+2,Out'=5,Out=5] 
* Loop 72: fun17(V4,Out)->  fun17(V4',Out')
                  [V4>=4,V4=V4'+4,Out'=5,Out=5] 
* Loop 73: fun17(V4,Out)->  fun17(V4',Out')
                  [V4>=6,V4=V4'+6,Out'=5,Out=5] 
* Loop 74: fun17(V4,Out)->  fun17(V4',Out')
                  [V4>=10,V4=V4'+10,Out'=5,Out=5] 
* Loop 75: fun17(V4,Out)->  fun17(V4',Out')
                  [V4>=14,V4=V4'+14,Out'=5,Out=5] 
* Loop 76: fun17(V4,Out)->  fun17(V4',Out')
                  [V4>=2,V4=V4'+2,Out'=4,Out=5] 
* Loop 77: fun17(V4,Out)->  fun17(V4',Out')
                  [V4>=4,V4=V4'+4,Out'=4,Out=5] 
* Loop 78: fun17(V4,Out)->  fun17(V4',Out')
                  [V4>=6,V4=V4'+6,Out'=4,Out=5] 
* Loop 79: fun17(V4,Out)->  fun17(V4',Out')
                  [V4>=10,V4=V4'+10,Out'=4,Out=5] 
* Loop 80: fun17(V4,Out)->  fun17(V4',Out')
                  [V4>=14,V4=V4'+14,Out'=4,Out=5] 
* Loop 81: fun17(V4,Out) [V4>=0,V4+2=Out] 
* Loop 82: fun17(V4,Out) [Out=5,V4=18] 
* Loop 83: fun17(V4,Out) [Out=6,V4=17] 
* Loop 84: fun17(V4,Out) [V4>=14,V4=Out+12] 
* Loop 85: fun17(V4,Out) [Out=5,V4=14] 
* Loop 86: fun17(V4,Out) [Out=6,V4=13] 
* Loop 87: fun17(V4,Out) [V4>=10,V4=Out+8] 
* Loop 88: fun17(V4,Out) [Out=5,V4=10] 
* Loop 89: fun17(V4,Out) [Out=6,V4=9] 
* Loop 90: fun17(V4,Out) [V4>=6,V4=Out+4] 
* Loop 91: fun17(V4,Out) [Out=5,V4=8] 
* Loop 92: fun17(V4,Out) [Out=6,V4=7] 
* Loop 93: fun17(V4,Out) [V4>=4,V4=Out+2] 
* Loop 94: fun17(V4,Out) [Out=6,V4=6] 
* Loop 95: fun17(V4,Out) [Out=5,V4=6] 
* Loop 96: fun17(V4,Out) [Out=6,V4=5] 
* Loop 97: fun17(V4,Out) [V4>=Out,2*Out>=V4+2] 
* Loop 98: fun17(V4,Out) [V4>=0,V4+1=Out] 
* Loop 99: fun17(V4,Out) [V4>=2,V4+4=Out] 
* Loop 100: fun17(V4,Out) [Out=5,V4=2] 
* Loop 101: fun17(V4,Out) [Out=6,V4=1] 
* Loop 102: fun17(V4,Out) [Out=5,V4=1] 
* Loop 103: fun17(V4,Out) [Out=6,V4=0] 
* Loop 104: fun17(V4,Out) [Out=5,V4=0] 

### Ranking functions of CR fun17(V4,Out) 
* RF of phase [61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80]: [V4-1]

#### Partial ranking functions of CR fun17(V4,Out) 
* Partial RF of phase [61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80]:
  - RF of loop [61:1,66:1,71:1,76:1]:
    V4-1
  - RF of loop [62:1,67:1,72:1,77:1]:
    V4-3
  - RF of loop [63:1,68:1,73:1,78:1]:
    V4-5
  - RF of loop [64:1,69:1,74:1,79:1]:
    V4-9
  - RF of loop [65:1,70:1,75:1,80:1]:
    V4-13


### Resulting Chains:fun17(V4,Out) 
* [[61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80],104]
* [[61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80],103]
* [[61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80],102]
* [[61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80],101]
* [[61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80],100]
* [[61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80],99]
* [[61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80],98]
* [[61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80],97]
* [[61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80],96]
* [[61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80],95]
* [[61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80],94]
* [[61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80],93]
* [[61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80],92]
* [[61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80],91]
* [[61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80],90]
* [[61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80],89]
* [[61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80],88]
* [[61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80],87]
* [[61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80],86]
* [[61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80],85]
* [[61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80],84]
* [[61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80],83]
* [[61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80],82]
* [[61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80],81]
* [104]
* [103]
* [102]
* [101]
* [100]
* [99]
* [98]
* [97]
* [96]
* [95]
* [94]
* [93]
* [92]
* [91]
* [90]
* [89]
* [88]
* [87]
* [86]
* [85]
* [84]
* [83]
* [82]
* [81]


### Merging Chains  fun17/2 into  External patterns of execution 
* [[104]] --> 1 
* [[103]] --> 2 
* [[102]] --> 3 
* [[101]] --> 4 
* [[100],[82,[61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80]],[83,[61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80]],[85,[61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80]],[86,[61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80]],[88,[61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80]],[89,[61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80]],[91,[61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80]],[92,[61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80]],[94,[61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80]],[95,[61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80]],[96,[61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80]],[99,[61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80]],[100,[61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80]],[101,[61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80]],[102,[61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80]],[104,[61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80]]] --> 5 
* [[96],[98]] --> 6 
* [[95],[84,[61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80]],[87,[61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80]],[90,[61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80]],[93,[61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80]],[97,[61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80]],[98,[61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80]]] --> 7 
* [[94],[81,[61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80]]] --> 8 
* [[92],[97]] --> 9 
* [[91]] --> 10 
* [[89]] --> 11 
* [[88]] --> 12 
* [[86]] --> 13 
* [[85]] --> 14 
* [[83]] --> 15 
* [[82]] --> 16 
* [[99]] --> 17 
* [[81]] --> 18 
* [[93]] --> 19 
* [[90]] --> 20 
* [[87]] --> 21 
* [[84]] --> 22 
* [[103,[61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80]]] --> 23 


### Specialization of cost equations fun3/2 
* CE 31 is refined into CE [161] 
* CE 30 is refined into CE [162] 


#### Refined cost equations fun3/2 
* CE 161: fun3(V4,Out) = 1
     [V4>=0,V4+1=Out] 
* CE 162: fun3(V4,Out) = 1
     [Out=5,V4=5] 

### Cost equations --> "Loop" of fun3/2 
* CEs [161] --> Loop 105 
* CEs [162] --> Loop 106 

#### Loops of fun3/2 
* Loop 105: fun3(V4,Out) [V4>=0,V4+1=Out] 
* Loop 106: fun3(V4,Out) [Out=5,V4=5] 

### Ranking functions of CR fun3(V4,Out) 

#### Partial ranking functions of CR fun3(V4,Out) 


### Resulting Chains:fun3(V4,Out) 
* [106]
* [105]


### Merging Chains  fun3/2 into  External patterns of execution 
* [[106]] --> 1 
* [[105]] --> 2 


### Specialization of cost equations fun5/2 
* CE 82 is refined into CE [163] 
* CE 81 is refined into CE [164] 


#### Refined cost equations fun5/2 
* CE 163: fun5(V4,Out) = 1
     [V4>=0,V4+1=Out] 
* CE 164: fun5(V4,Out) = 1
     [Out=5,V4=5] 

### Cost equations --> "Loop" of fun5/2 
* CEs [163] --> Loop 107 
* CEs [164] --> Loop 108 

#### Loops of fun5/2 
* Loop 107: fun5(V4,Out) [V4>=0,V4+1=Out] 
* Loop 108: fun5(V4,Out) [Out=5,V4=5] 

### Ranking functions of CR fun5(V4,Out) 

#### Partial ranking functions of CR fun5(V4,Out) 


### Resulting Chains:fun5(V4,Out) 
* [108]
* [107]


### Merging Chains  fun5/2 into  External patterns of execution 
* [[108]] --> 1 
* [[107]] --> 2 


### Specialization of cost equations fun7/2 
* CE 33 is refined into CE [165] 
* CE 32 is refined into CE [166] 


#### Refined cost equations fun7/2 
* CE 165: fun7(V4,Out) = 1
     [V4>=0,V4+1=Out] 
* CE 166: fun7(V4,Out) = 1
     [Out=5,V4=5] 

### Cost equations --> "Loop" of fun7/2 
* CEs [165] --> Loop 109 
* CEs [166] --> Loop 110 

#### Loops of fun7/2 
* Loop 109: fun7(V4,Out) [V4>=0,V4+1=Out] 
* Loop 110: fun7(V4,Out) [Out=5,V4=5] 

### Ranking functions of CR fun7(V4,Out) 

#### Partial ranking functions of CR fun7(V4,Out) 


### Resulting Chains:fun7(V4,Out) 
* [110]
* [109]


### Merging Chains  fun7/2 into  External patterns of execution 
* [[110]] --> 1 
* [[109]] --> 2 


### Specialization of cost equations fun4fun8/2 
* CE 28 is refined into CE [167] 
* CE 27 is refined into CE [168] 
* CE 29 is refined into CE [169,170,171,172,173,174,175,176,177,178] 
* CE 22 is refined into CE [179] 
* CE 26 is refined into CE [180,181] 
* CE 23 is refined into CE [182,183] 
* CE 24 is refined into CE [184,185] 
* CE 25 is refined into CE [186,187] 


#### Refined cost equations fun4fun8/2 
* CE 167: fun4fun8(A,B) = 1
     [A>=0,A+1=B] 
* CE 168: fun4fun8(A,B) = 1
     [B=5,A=3] 
* CE 169: fun4fun8(A,B) = 1+ fun16(C,D):1+ fun5(E,F):1
     [F=5,E=5,D=5,C=0,B=5,A=0] 
* CE 170: fun4fun8(A,B) = 1+ fun16(C,D):1+ fun5(E,F):2
     [F=6,E=5,D=5,C=0,B=6,A=0] 
* CE 171: fun4fun8(A,B) = 1+ fun16(C,D):2+ fun5(E,F):1
     [F=5,E=5,D=5,C=1,B=5,A=1] 
* CE 172: fun4fun8(A,B) = 1+ fun16(C,D):2+ fun5(E,F):2
     [F=6,E=5,D=5,C=1,B=6,A=1] 
* CE 173: fun4fun8(A,B) = 1+ fun16(C,D):3+ fun5(E,F):1
     [F=5,E=5,D=5,C=2,B=5,A=2] 
* CE 174: fun4fun8(A,B) = 1+ fun16(C,D):3+ fun5(E,F):2
     [F=6,E=5,D=5,C=2,B=6,A=2] 
* CE 175: fun4fun8(A,B) = 1+ fun16(C,D):4+ fun5(E,F):1
     [F=5,E=5,D=5,C=6,B=5,A=6] 
* CE 176: fun4fun8(A,B) = 1+ fun16(C,D):4+ fun5(E,F):2
     [F=6,E=5,D=5,C=6,B=6,A=6] 
* CE 177: fun4fun8(A,B) = 1+ fun16(C,D):5+ fun5(E,F):1
     [F=5,E=5,D=5,C=4,B=5,A=4] 
* CE 178: fun4fun8(A,B) = 1+ fun16(C,D):5+ fun5(E,B):2
     [B>=2,B=E+1,B=D+1,B=C+2,B=A+2] 
* CE 179: fun4fun8(A,B) = 2+ fun4fun8(C,D)
     [B+C>=A,A>=C+1,C>=0,A+D=B+C] 
* CE 180: fun4fun8(A,B) = 1+ fun4fun8(A,C)+ fun1(D,E):1
     [A>=0,C=5,E=5,D=5,B=5] 
* CE 181: fun4fun8(A,B) = 1+ fun4fun8(A,C)+ fun1(D,B):2
     [B>=1,A>=0,B=C+1,B=D+1] 
* CE 182: fun4fun8(A,B) = 2+ fun4fun8(C,D)+ fun4fun8(E,F)+ fun3(G,H):1
     [E>=0,C>=0,C+E+1=A,F=5,D=5,H=5,G=5,B=5] 
* CE 183: fun4fun8(A,B) = 2+ fun4fun8(C,D)+ fun4fun8(E,F)+ fun3(G,B):2
     [E>=0,C>=0,B>=1,C+E+1=A,B=F+1,B=G+1,D=5] 
* CE 184: fun4fun8(A,B) = 2+ fun4fun8(C,D)+ fun4fun8(E,F)+ fun7(G,H):1
     [E>=0,C>=0,C+E+1=A,F=5,D=5,H=5,G=5,B=5] 
* CE 185: fun4fun8(A,B) = 2+ fun4fun8(C,D)+ fun4fun8(E,F)+ fun7(G,B):2
     [E>=0,C>=0,B>=1,C+E+1=A,B=F+1,B=G+1,D=5] 
* CE 186: fun4fun8(A,B) = 2+ fun4fun8(C,D)+ fun4fun8(E,F)+ fun10(G,H):1
     [E>=0,C>=0,C+E+1=A,F=5,D=5,H=5,G=5,B=5] 
* CE 187: fun4fun8(A,B) = 2+ fun4fun8(C,D)+ fun4fun8(E,F)+ fun10(G,B):2
     [E>=0,C>=0,B>=1,C+E+1=A,B=F+1,B=G+1,D=5] 

### Cost equations --> "Loop" of fun4fun8/2 
* CEs [183,185,187] --> Loop 111 
* CEs [182,184,186] --> Loop 112 
* CEs [179] --> Loop 113 
* CEs [181] --> Loop 114 
* CEs [180] --> Loop 115 
* CEs [176] --> Loop 116 
* CEs [175] --> Loop 117 
* CEs [167,177] --> Loop 118 
* CEs [168,178] --> Loop 119 
* CEs [174] --> Loop 120 
* CEs [173] --> Loop 121 
* CEs [172] --> Loop 122 
* CEs [171] --> Loop 123 
* CEs [170] --> Loop 124 
* CEs [169] --> Loop 125 

#### Loops of fun4fun8/2 
* Loop 111: fun4fun8(A,B)->  fun4fun8(A',B')  fun4fun8(A'2,B'2)
                  [A>=A'+1,A'>=0,B>=1,A'+A'2+1=A,B=B'2+1,B'=5] 
* Loop 112: fun4fun8(A,B)->  fun4fun8(A',B')  fun4fun8(A'2,B'2)
                  [A>=A'+1,A'>=0,A'+A'2+1=A,B'2=5,B'=5,B=5] 
* Loop 113: fun4fun8(A,B)->  fun4fun8(A',B')
                  [B+A'>=A,A>=A'+1,A'>=0,A+B'=B+A'] 
* Loop 114: fun4fun8(A,B)->  fun4fun8(A,A')
                  [B>=1,A>=0,B=A'+1] 
* Loop 115: fun4fun8(A,B)->  fun4fun8(A,A')
                  [A>=0,A'=5,B=5] 
* Loop 116: fun4fun8(A,B) [B=6,A=6] 
* Loop 117: fun4fun8(A,B) [B=5,A=6] 
* Loop 118: fun4fun8(A,B) [A>=0,A+1=B] 
* Loop 119: fun4fun8(A,B) [A>=0,A+2=B] 
* Loop 120: fun4fun8(A,B) [B=6,A=2] 
* Loop 121: fun4fun8(A,B) [B=5,A=2] 
* Loop 122: fun4fun8(A,B) [B=6,A=1] 
* Loop 123: fun4fun8(A,B) [B=5,A=1] 
* Loop 124: fun4fun8(A,B) [B=6,A=0] 
* Loop 125: fun4fun8(A,B) [B=5,A=0] 

### Ranking functions of CR fun4fun8(A,B) 

#### Partial ranking functions of CR fun4fun8(A,B) 
* Partial RF of phase [111,112,113,114,115]:
  - RF of loop [111:1,111:2,112:1,112:2,113:1]:
    A


### Resulting Chains:fun4fun8(A,B) 
* [multiple([111,112,113,114,115],[[],[125],[124],[123],[122],[121],[120],[119],[118],[117],[116]])]...
* [125]
* [124]
* [123]
* [122]
* [121]
* [120]
* [119]
* [118]
* [117]
* [116]


### Merging Chains  fun4fun8/2 into  External patterns of execution 
* [[125]] --> 1 
* [[124]] --> 2 
* [[123]] --> 3 
* [[122]] --> 4 
* [[121]] --> 5 
* [[120]] --> 6 
* [[117]] --> 7 
* [[116]] --> 8 
* [[119]] --> 9 
* [[118]] --> 10 
* [[multiple([111,112,113,114,115],[[],[125],[124],[123],[122],[121],[120],[119],[118],[117],[116]])]] --> 11 


### Specialization of cost equations funmark/3 
* CE 59 is refined into CE [188] 
* CE 78 is refined into CE [189] 
* CE 73 is refined into CE [190] 
* CE 53 is refined into CE [191] 
* CE 77 is refined into CE [192] 
* CE 72 is refined into CE [193] 
* CE 76 is refined into CE [194] 
* CE 51 is refined into CE [195] 
* CE 55 is refined into CE [196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234] 
* CE 63 is refined into CE [235,236,237,238,239,240,241,242,243,244,245] 
* CE 70 is refined into CE [246,247,248,249,250] 
* CE 71 is refined into CE [251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273] 
* CE 75 is refined into CE [274] 
* CE 74 is refined into CE [275] 
* CE 46 is refined into CE [276] 
* CE 61 is refined into CE [277,278] 
* CE 62 is refined into CE [279,280] 
* CE 64 is refined into CE [281,282] 
* CE 65 is refined into CE [283,284] 
* CE 66 is refined into CE [285,286] 
* CE 67 is refined into CE [287,288] 
* CE 68 is refined into CE [289,290] 
* CE 69 is refined into CE [291,292] 
* CE 47 is refined into CE [293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309] 
* CE 48 is refined into CE [310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326] 
* CE 49 is refined into CE [327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343] 
* CE 50 is refined into CE [344,345] 
* CE 52 is refined into CE [346,347] 
* CE 54 is refined into CE [348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411] 
* CE 57 is refined into CE [412] 
* CE 58 is refined into CE [413] 
* CE 60 is refined into CE [414] 
* CE 56 is refined into CE [415] 


#### Refined cost equations funmark/3 
* CE 188: funmark(A,B,C) = 1
     [B>=0,A>=0,A+B+1=C] 
* CE 189: funmark(A,B,C) = 1
     [C=6,A=6] 
* CE 190: funmark(A,B,C) = 1
     [C=5,A=5] 
* CE 191: funmark(A,B,C) = 2
     [C=5,A=4] 
* CE 192: funmark(A,B,C) = 1
     [C=4,A=4] 
* CE 193: funmark(A,B,C) = 1
     [C=3,A=3] 
* CE 194: funmark(A,B,C) = 1
     [C=2,A=2] 
* CE 195: funmark(A,B,A) = 2
     [A>=1] 
* CE 196: funmark(A,B,C) = 2+ fun17(D,E):1+ fun15(F,G):1
     [G=5,F=5,E=5,D=0,C=5,A=1] 
* CE 197: funmark(A,B,C) = 2+ fun17(D,E):1+ fun15(F,G):2
     [G=6,F=5,E=5,D=0,C=6,A=1] 
* CE 198: funmark(A,B,C) = 2+ fun17(D,E):2+ fun15(F,G):2
     [G=7,F=6,E=6,D=0,C=7,A=1] 
* CE 199: funmark(A,B,C) = 2+ fun17(D,E):3+ fun15(F,G):1
     [G=5,F=5,E=5,D=1,C=5,A=2] 
* CE 200: funmark(A,B,C) = 2+ fun17(D,E):3+ fun15(F,G):2
     [G=6,F=5,E=5,D=1,C=6,A=2] 
* CE 201: funmark(A,B,C) = 2+ fun17(D,E):4+ fun15(F,G):2
     [G=7,F=6,E=6,D=1,C=7,A=2] 
* CE 202: funmark(A,B,C) = 2+ fun17(D,E):5+ fun15(F,G):1
     [D>=2,D+1=A,G=5,F=5,E=5,C=5] 
* CE 203: funmark(A,B,C) = 2+ fun17(D,E):5+ fun15(F,C):2
     [D+6>=C,C>=6,D>=2,C=F+1,C=E+1,D+1=A] 
* CE 204: funmark(A,B,C) = 2+ fun17(D,E):6+ fun15(F,G):1
     [G=5,F=5,E=5,D=4,C=5,A=5] 
* CE 205: funmark(A,B,C) = 2+ fun17(D,E):6+ fun15(F,C):2
     [C>=2,C=F+1,C=E+1,C=D+2,C=A+1] 
* CE 206: funmark(A,B,C) = 2+ fun17(D,E):7+ fun15(F,G):1
     [D>=4,D+1=A,G=5,F=5,E=5,C=5] 
* CE 207: funmark(A,B,C) = 2+ fun17(D,E):7+ fun15(F,C):2
     [D+2>=C,C>=4,C=F+1,C=E+1,D+1=A] 
* CE 208: funmark(A,B,C) = 2+ fun17(D,E):8+ fun15(F,G):1
     [D>=3,D+1=A,G=5,F=5,E=5,C=5] 
* CE 209: funmark(A,B,C) = 2+ fun17(D,E):8+ fun15(F,C):2
     [D+3>=C,C>=5,C=F+1,C=E+1,D+1=A] 
* CE 210: funmark(A,B,C) = 2+ fun17(D,E):9+ fun15(F,G):1
     [D>=5,8>=D,D+1=A,G=5,F=5,E=5,C=5] 
* CE 211: funmark(A,B,C) = 2+ fun17(D,E):9+ fun15(F,C):2
     [D+1>=C,2*C>=D+4,C=F+1,C=E+1,D+1=A] 
* CE 212: funmark(A,B,C) = 2+ fun17(D,E):10+ fun15(F,G):1
     [G=5,F=5,E=5,D=8,C=5,A=9] 
* CE 213: funmark(A,B,C) = 2+ fun17(D,E):10+ fun15(F,G):2
     [G=6,F=5,E=5,D=8,C=6,A=9] 
* CE 214: funmark(A,B,C) = 2+ fun17(D,E):11+ fun15(F,G):2
     [G=7,F=6,E=6,D=9,C=7,A=10] 
* CE 215: funmark(A,B,C) = 2+ fun17(D,E):12+ fun15(F,G):1
     [G=5,F=5,E=5,D=10,C=5,A=11] 
* CE 216: funmark(A,B,C) = 2+ fun17(D,E):12+ fun15(F,G):2
     [G=6,F=5,E=5,D=10,C=6,A=11] 
* CE 217: funmark(A,B,C) = 2+ fun17(D,E):13+ fun15(F,G):2
     [G=7,F=6,E=6,D=13,C=7,A=14] 
* CE 218: funmark(A,B,C) = 2+ fun17(D,E):14+ fun15(F,G):1
     [G=5,F=5,E=5,D=14,C=5,A=15] 
* CE 219: funmark(A,B,C) = 2+ fun17(D,E):14+ fun15(F,G):2
     [G=6,F=5,E=5,D=14,C=6,A=15] 
* CE 220: funmark(A,B,C) = 2+ fun17(D,E):15+ fun15(F,G):2
     [G=7,F=6,E=6,D=17,C=7,A=18] 
* CE 221: funmark(A,B,C) = 2+ fun17(D,E):16+ fun15(F,G):1
     [G=5,F=5,E=5,D=18,C=5,A=19] 
* CE 222: funmark(A,B,C) = 2+ fun17(D,E):16+ fun15(F,G):2
     [G=6,F=5,E=5,D=18,C=6,A=19] 
* CE 223: funmark(A,B,C) = 2+ fun17(D,E):17+ fun15(F,C):2
     [C>=7,C=F+1,C=E+1,C=D+5,C=A+4] 
* CE 224: funmark(A,B,C) = 2+ fun17(D,E):18+ fun15(F,G):1
     [G=5,F=5,E=5,D=3,C=5,A=4] 
* CE 225: funmark(A,B,C) = 2+ fun17(D,E):18+ fun15(F,C):2
     [C>=3,C=F+1,C=E+1,C=D+3,C=A+2] 
* CE 226: funmark(A,B,C) = 2+ fun17(D,E):19+ fun15(F,G):1
     [G=5,F=5,E=5,D=7,C=5,A=8] 
* CE 227: funmark(A,B,C) = 2+ fun17(D,E):19+ fun15(F,C):2
     [C>=3,C=F+1,C=E+1,C+1=D,C+2=A] 
* CE 228: funmark(A,B,C) = 2+ fun17(D,E):20+ fun15(F,G):1
     [G=5,F=5,E=5,D=9,C=5,A=10] 
* CE 229: funmark(A,B,C) = 2+ fun17(D,E):20+ fun15(F,C):2
     [C>=3,C=F+1,C=E+1,C+3=D,C+4=A] 
* CE 230: funmark(A,B,C) = 2+ fun17(D,E):21+ fun15(F,G):1
     [G=5,F=5,E=5,D=13,C=5,A=14] 
* CE 231: funmark(A,B,C) = 2+ fun17(D,E):21+ fun15(F,C):2
     [C>=3,C=F+1,C=E+1,C+7=D,C+8=A] 
* CE 232: funmark(A,B,C) = 2+ fun17(D,E):22+ fun15(F,G):1
     [G=5,F=5,E=5,D=17,C=5,A=18] 
* CE 233: funmark(A,B,C) = 2+ fun17(D,E):22+ fun15(F,C):2
     [C>=3,C=F+1,C=E+1,C+11=D,C+12=A] 
* CE 234: funmark(A,B,C) = 2+ fun17(D,E):23+ fun15(F,C):2
     [D+7>=C,7*C>=D+49,C>=9,C=F+1,C=E+1,D+1=A] 
* CE 235: funmark(A,B,C) = 1+ fun4fun8(D,E):1
     [E=5,D=0,C=5,A=1] 
* CE 236: funmark(A,B,C) = 1+ fun4fun8(D,E):2
     [E=6,D=0,C=6,A=1] 
* CE 237: funmark(A,B,C) = 1+ fun4fun8(D,E):3
     [E=5,D=1,C=5,A=2] 
* CE 238: funmark(A,B,C) = 1+ fun4fun8(D,E):4
     [E=6,D=1,C=6,A=2] 
* CE 239: funmark(A,B,C) = 1+ fun4fun8(D,E):5
     [E=5,D=2,C=5,A=3] 
* CE 240: funmark(A,B,C) = 1+ fun4fun8(D,E):6
     [E=6,D=2,C=6,A=3] 
* CE 241: funmark(A,B,C) = 1+ fun4fun8(D,E):7
     [E=5,D=6,C=5,A=7] 
* CE 242: funmark(A,B,C) = 1+ fun4fun8(D,E):8
     [E=6,D=6,C=6,A=7] 
* CE 243: funmark(A,B,C) = 1+ fun4fun8(D,C):9
     [C>=2,C=D+2,C=A+1] 
* CE 244: funmark(A,B,A) = 1+ fun4fun8(C,A):10
     [A>=1,A=C+1] 
* CE 245: funmark(A,B,C) = 1+ fun4fun8(D,C):11
     [C>=1,D>=0,D+1=A] 
* CE 246: funmark(A,B,C) = 1+ fun16(D,E):1
     [E=5,D=0,C=5,A=1] 
* CE 247: funmark(A,B,C) = 1+ fun16(D,E):2
     [E=5,D=1,C=5,A=2] 
* CE 248: funmark(A,B,C) = 1+ fun16(D,E):3
     [E=5,D=2,C=5,A=3] 
* CE 249: funmark(A,B,C) = 1+ fun16(D,E):4
     [E=5,D=6,C=5,A=7] 
* CE 250: funmark(A,B,A) = 1+ fun16(C,A):5
     [A>=1,A=C+1] 
* CE 251: funmark(A,B,C) = 1+ fun17(D,E):1
     [E=5,D=0,C=5,A=1] 
* CE 252: funmark(A,B,C) = 1+ fun17(D,E):2
     [E=6,D=0,C=6,A=1] 
* CE 253: funmark(A,B,C) = 1+ fun17(D,E):3
     [E=5,D=1,C=5,A=2] 
* CE 254: funmark(A,B,C) = 1+ fun17(D,E):4
     [E=6,D=1,C=6,A=2] 
* CE 255: funmark(A,B,C) = 1+ fun17(D,C):5
     [D+5>=C,C>=5,D>=2,D+1=A] 
* CE 256: funmark(A,B,A) = 1+ fun17(C,A):6
     [A>=1,A=C+1] 
* CE 257: funmark(A,B,C) = 1+ fun17(D,C):7
     [D+1>=C,C>=3,D+1=A] 
* CE 258: funmark(A,B,C) = 1+ fun17(D,C):8
     [D+2>=C,C>=4,D+1=A] 
* CE 259: funmark(A,B,C) = 1+ fun17(D,C):9
     [D>=C,2*C>=D+2,D+1=A] 
* CE 260: funmark(A,B,C) = 1+ fun17(D,E):10
     [E=5,D=8,C=5,A=9] 
* CE 261: funmark(A,B,C) = 1+ fun17(D,E):11
     [E=6,D=9,C=6,A=10] 
* CE 262: funmark(A,B,C) = 1+ fun17(D,E):12
     [E=5,D=10,C=5,A=11] 
* CE 263: funmark(A,B,C) = 1+ fun17(D,E):13
     [E=6,D=13,C=6,A=14] 
* CE 264: funmark(A,B,C) = 1+ fun17(D,E):14
     [E=5,D=14,C=5,A=15] 
* CE 265: funmark(A,B,C) = 1+ fun17(D,E):15
     [E=6,D=17,C=6,A=18] 
* CE 266: funmark(A,B,C) = 1+ fun17(D,E):16
     [E=5,D=18,C=5,A=19] 
* CE 267: funmark(A,B,C) = 1+ fun17(D,C):17
     [C>=6,C=D+4,C=A+3] 
* CE 268: funmark(A,B,C) = 1+ fun17(D,C):18
     [C>=2,C=D+2,C=A+1] 
* CE 269: funmark(A,B,C) = 1+ fun17(D,C):19
     [C>=2,C+2=D,C+3=A] 
* CE 270: funmark(A,B,C) = 1+ fun17(D,C):20
     [C>=2,C+4=D,C+5=A] 
* CE 271: funmark(A,B,C) = 1+ fun17(D,C):21
     [C>=2,C+8=D,C+9=A] 
* CE 272: funmark(A,B,C) = 1+ fun17(D,C):22
     [C>=2,C+12=D,C+13=A] 
* CE 273: funmark(A,B,C) = 1+ fun17(D,C):23
     [D+6>=C,7*C>=D+42,C>=8,D+1=A] 
* CE 274: funmark(A,B,C) = 1
     [C=1,A=1] 
* CE 275: funmark(A,B,C) = 1
     [C=0,A=0] 
* CE 276: funmark(A,B,C) = 2+ funmark(D,E,F)
     [C+D>=A,A>=D+1,D>=0,C+D=A+F] 
* CE 277: funmark(A,B,C) = 1+ funmark(D,E,F)+ fun1(G,H):1
     [D>=0,D+1=A,F=5,H=5,G=5,C=5] 
* CE 278: funmark(A,B,C) = 1+ funmark(D,E,F)+ fun1(G,C):2
     [D>=0,C>=1,C=F+1,C=G+1,D+1=A] 
* CE 279: funmark(A,B,C) = 1+ funmark(D,E,F)+ fun3(G,H):1
     [D>=0,D+1=A,F=5,H=5,G=5,C=5] 
* CE 280: funmark(A,B,C) = 1+ funmark(D,E,F)+ fun3(G,C):2
     [D>=0,C>=1,C=F+1,C=G+1,D+1=A] 
* CE 281: funmark(A,B,C) = 1+ funmark(D,E,F)+ fun5(G,H):1
     [D>=0,D+1=A,F=5,H=5,G=5,C=5] 
* CE 282: funmark(A,B,C) = 1+ funmark(D,E,F)+ fun5(G,C):2
     [D>=0,C>=1,C=F+1,C=G+1,D+1=A] 
* CE 283: funmark(A,B,C) = 1+ funmark(D,E,F)+ fun7(G,H):1
     [D>=0,D+1=A,F=5,H=5,G=5,C=5] 
* CE 284: funmark(A,B,C) = 1+ funmark(D,E,F)+ fun7(G,C):2
     [D>=0,C>=1,C=F+1,C=G+1,D+1=A] 
* CE 285: funmark(A,B,C) = 1+ funmark(D,E,F)+ fun10(G,H):1
     [D>=0,D+1=A,F=5,H=5,G=5,C=5] 
* CE 286: funmark(A,B,C) = 1+ funmark(D,E,F)+ fun10(G,C):2
     [D>=0,C>=1,C=F+1,C=G+1,D+1=A] 
* CE 287: funmark(A,B,C) = 1+ funmark(D,E,F)+ fun11(G,H):1
     [D>=0,D+1=A,F=5,H=5,G=5,C=5] 
* CE 288: funmark(A,B,C) = 1+ funmark(D,E,F)+ fun11(G,C):2
     [D>=0,C>=1,C=F+1,C=G+1,D+1=A] 
* CE 289: funmark(A,B,C) = 1+ funmark(D,E,F)+ fun13(G,H):1
     [D>=0,D+1=A,F=5,H=5,G=5,C=5] 
* CE 290: funmark(A,B,C) = 1+ funmark(D,E,F)+ fun13(G,C):2
     [D>=0,C>=1,C=F+1,C=G+1,D+1=A] 
* CE 291: funmark(A,B,C) = 1+ funmark(D,E,F)+ fun15(G,H):1
     [D>=0,D+1=A,F=5,H=5,G=5,C=5] 
* CE 292: funmark(A,B,C) = 1+ funmark(D,E,F)+ fun15(G,C):2
     [D>=0,C>=1,C=F+1,C=G+1,D+1=A] 
* CE 293: funmark(A,B,C) = 2+ funmark(D,E,F)+ fun4fun8(G,H):1+ fun3(I,J):1
     [D>=0,D+1=A,F=5,J=5,I=5,H=5,G=0,C=5] 
* CE 294: funmark(A,B,C) = 2+ funmark(D,E,F)+ fun4fun8(G,H):1+ fun3(I,J):2
     [D>=0,D+1=A,F=5,J=6,I=5,H=5,G=0,C=6] 
* CE 295: funmark(A,B,C) = 2+ funmark(D,E,F)+ fun4fun8(G,H):2+ fun3(I,J):2
     [D>=0,D+1=A,F=5,J=7,I=6,H=6,G=0,C=7] 
* CE 296: funmark(A,B,C) = 2+ funmark(D,E,F)+ fun4fun8(G,H):3+ fun3(I,J):1
     [D>=0,D+2=A,F=5,J=5,I=5,H=5,G=1,C=5] 
* CE 297: funmark(A,B,C) = 2+ funmark(D,E,F)+ fun4fun8(G,H):3+ fun3(I,J):2
     [D>=0,D+2=A,F=5,J=6,I=5,H=5,G=1,C=6] 
* CE 298: funmark(A,B,C) = 2+ funmark(D,E,F)+ fun4fun8(G,H):4+ fun3(I,J):2
     [D>=0,D+2=A,F=5,J=7,I=6,H=6,G=1,C=7] 
* CE 299: funmark(A,B,C) = 2+ funmark(D,E,F)+ fun4fun8(G,H):5+ fun3(I,J):1
     [D>=0,D+3=A,F=5,J=5,I=5,H=5,G=2,C=5] 
* CE 300: funmark(A,B,C) = 2+ funmark(D,E,F)+ fun4fun8(G,H):5+ fun3(I,J):2
     [D>=0,D+3=A,F=5,J=6,I=5,H=5,G=2,C=6] 
* CE 301: funmark(A,B,C) = 2+ funmark(D,E,F)+ fun4fun8(G,H):6+ fun3(I,J):2
     [D>=0,D+3=A,F=5,J=7,I=6,H=6,G=2,C=7] 
* CE 302: funmark(A,B,C) = 2+ funmark(D,E,F)+ fun4fun8(G,H):7+ fun3(I,J):1
     [D>=0,D+7=A,F=5,J=5,I=5,H=5,G=6,C=5] 
* CE 303: funmark(A,B,C) = 2+ funmark(D,E,F)+ fun4fun8(G,H):7+ fun3(I,J):2
     [D>=0,D+7=A,F=5,J=6,I=5,H=5,G=6,C=6] 
* CE 304: funmark(A,B,C) = 2+ funmark(D,E,F)+ fun4fun8(G,H):8+ fun3(I,J):2
     [D>=0,D+7=A,F=5,J=7,I=6,H=6,G=6,C=7] 
* CE 305: funmark(A,B,C) = 2+ funmark(D,E,F)+ fun4fun8(G,H):9+ fun3(I,J):1
     [D>=0,D+4=A,F=5,J=5,I=5,H=5,G=3,C=5] 
* CE 306: funmark(A,B,C) = 2+ funmark(D,E,F)+ fun4fun8(G,H):9+ fun3(I,C):2
     [D>=0,C>=3,C+D=A+2,C=I+1,C=H+1,C=G+3,F=5] 
* CE 307: funmark(A,B,C) = 2+ funmark(D,E,F)+ fun4fun8(G,H):10+ fun3(I,J):1
     [D>=0,D+5=A,F=5,J=5,I=5,H=5,G=4,C=5] 
* CE 308: funmark(A,B,C) = 2+ funmark(D,E,F)+ fun4fun8(G,H):10+ fun3(I,C):2
     [D>=0,C>=2,C+D=A+1,C=I+1,C=H+1,C=G+2,F=5] 
* CE 309: funmark(A,B,C) = 2+ funmark(D,E,F)+ fun4fun8(G,H):11
     [D>=0,H>=1,G>=0,G+D+1=A,F=5] 
* CE 310: funmark(A,B,C) = 2+ funmark(D,E,F)+ fun4fun8(G,H):1+ fun7(I,J):1
     [D>=0,D+1=A,F=5,J=5,I=5,H=5,G=0,C=5] 
* CE 311: funmark(A,B,C) = 2+ funmark(D,E,F)+ fun4fun8(G,H):1+ fun7(I,J):2
     [D>=0,D+1=A,F=5,J=6,I=5,H=5,G=0,C=6] 
* CE 312: funmark(A,B,C) = 2+ funmark(D,E,F)+ fun4fun8(G,H):2+ fun7(I,J):2
     [D>=0,D+1=A,F=5,J=7,I=6,H=6,G=0,C=7] 
* CE 313: funmark(A,B,C) = 2+ funmark(D,E,F)+ fun4fun8(G,H):3+ fun7(I,J):1
     [D>=0,D+2=A,F=5,J=5,I=5,H=5,G=1,C=5] 
* CE 314: funmark(A,B,C) = 2+ funmark(D,E,F)+ fun4fun8(G,H):3+ fun7(I,J):2
     [D>=0,D+2=A,F=5,J=6,I=5,H=5,G=1,C=6] 
* CE 315: funmark(A,B,C) = 2+ funmark(D,E,F)+ fun4fun8(G,H):4+ fun7(I,J):2
     [D>=0,D+2=A,F=5,J=7,I=6,H=6,G=1,C=7] 
* CE 316: funmark(A,B,C) = 2+ funmark(D,E,F)+ fun4fun8(G,H):5+ fun7(I,J):1
     [D>=0,D+3=A,F=5,J=5,I=5,H=5,G=2,C=5] 
* CE 317: funmark(A,B,C) = 2+ funmark(D,E,F)+ fun4fun8(G,H):5+ fun7(I,J):2
     [D>=0,D+3=A,F=5,J=6,I=5,H=5,G=2,C=6] 
* CE 318: funmark(A,B,C) = 2+ funmark(D,E,F)+ fun4fun8(G,H):6+ fun7(I,J):2
     [D>=0,D+3=A,F=5,J=7,I=6,H=6,G=2,C=7] 
* CE 319: funmark(A,B,C) = 2+ funmark(D,E,F)+ fun4fun8(G,H):7+ fun7(I,J):1
     [D>=0,D+7=A,F=5,J=5,I=5,H=5,G=6,C=5] 
* CE 320: funmark(A,B,C) = 2+ funmark(D,E,F)+ fun4fun8(G,H):7+ fun7(I,J):2
     [D>=0,D+7=A,F=5,J=6,I=5,H=5,G=6,C=6] 
* CE 321: funmark(A,B,C) = 2+ funmark(D,E,F)+ fun4fun8(G,H):8+ fun7(I,J):2
     [D>=0,D+7=A,F=5,J=7,I=6,H=6,G=6,C=7] 
* CE 322: funmark(A,B,C) = 2+ funmark(D,E,F)+ fun4fun8(G,H):9+ fun7(I,J):1
     [D>=0,D+4=A,F=5,J=5,I=5,H=5,G=3,C=5] 
* CE 323: funmark(A,B,C) = 2+ funmark(D,E,F)+ fun4fun8(G,H):9+ fun7(I,C):2
     [D>=0,C>=3,C+D=A+2,C=I+1,C=H+1,C=G+3,F=5] 
* CE 324: funmark(A,B,C) = 2+ funmark(D,E,F)+ fun4fun8(G,H):10+ fun7(I,J):1
     [D>=0,D+5=A,F=5,J=5,I=5,H=5,G=4,C=5] 
* CE 325: funmark(A,B,C) = 2+ funmark(D,E,F)+ fun4fun8(G,H):10+ fun7(I,C):2
     [D>=0,C>=2,C+D=A+1,C=I+1,C=H+1,C=G+2,F=5] 
* CE 326: funmark(A,B,C) = 2+ funmark(D,E,F)+ fun4fun8(G,H):11
     [D>=0,H>=1,G>=0,G+D+1=A,F=5] 
* CE 327: funmark(A,B,C) = 2+ funmark(D,E,F)+ fun4fun8(G,H):1+ fun10(I,J):1
     [D>=0,D+1=A,F=5,J=5,I=5,H=5,G=0,C=5] 
* CE 328: funmark(A,B,C) = 2+ funmark(D,E,F)+ fun4fun8(G,H):1+ fun10(I,J):2
     [D>=0,D+1=A,F=5,J=6,I=5,H=5,G=0,C=6] 
* CE 329: funmark(A,B,C) = 2+ funmark(D,E,F)+ fun4fun8(G,H):2+ fun10(I,J):2
     [D>=0,D+1=A,F=5,J=7,I=6,H=6,G=0,C=7] 
* CE 330: funmark(A,B,C) = 2+ funmark(D,E,F)+ fun4fun8(G,H):3+ fun10(I,J):1
     [D>=0,D+2=A,F=5,J=5,I=5,H=5,G=1,C=5] 
* CE 331: funmark(A,B,C) = 2+ funmark(D,E,F)+ fun4fun8(G,H):3+ fun10(I,J):2
     [D>=0,D+2=A,F=5,J=6,I=5,H=5,G=1,C=6] 
* CE 332: funmark(A,B,C) = 2+ funmark(D,E,F)+ fun4fun8(G,H):4+ fun10(I,J):2
     [D>=0,D+2=A,F=5,J=7,I=6,H=6,G=1,C=7] 
* CE 333: funmark(A,B,C) = 2+ funmark(D,E,F)+ fun4fun8(G,H):5+ fun10(I,J):1
     [D>=0,D+3=A,F=5,J=5,I=5,H=5,G=2,C=5] 
* CE 334: funmark(A,B,C) = 2+ funmark(D,E,F)+ fun4fun8(G,H):5+ fun10(I,J):2
     [D>=0,D+3=A,F=5,J=6,I=5,H=5,G=2,C=6] 
* CE 335: funmark(A,B,C) = 2+ funmark(D,E,F)+ fun4fun8(G,H):6+ fun10(I,J):2
     [D>=0,D+3=A,F=5,J=7,I=6,H=6,G=2,C=7] 
* CE 336: funmark(A,B,C) = 2+ funmark(D,E,F)+ fun4fun8(G,H):7+ fun10(I,J):1
     [D>=0,D+7=A,F=5,J=5,I=5,H=5,G=6,C=5] 
* CE 337: funmark(A,B,C) = 2+ funmark(D,E,F)+ fun4fun8(G,H):7+ fun10(I,J):2
     [D>=0,D+7=A,F=5,J=6,I=5,H=5,G=6,C=6] 
* CE 338: funmark(A,B,C) = 2+ funmark(D,E,F)+ fun4fun8(G,H):8+ fun10(I,J):2
     [D>=0,D+7=A,F=5,J=7,I=6,H=6,G=6,C=7] 
* CE 339: funmark(A,B,C) = 2+ funmark(D,E,F)+ fun4fun8(G,H):9+ fun10(I,J):1
     [D>=0,D+4=A,F=5,J=5,I=5,H=5,G=3,C=5] 
* CE 340: funmark(A,B,C) = 2+ funmark(D,E,F)+ fun4fun8(G,H):9+ fun10(I,C):2
     [D>=0,C>=3,C+D=A+2,C=I+1,C=H+1,C=G+3,F=5] 
* CE 341: funmark(A,B,C) = 2+ funmark(D,E,F)+ fun4fun8(G,H):10+ fun10(I,J):1
     [D>=0,D+5=A,F=5,J=5,I=5,H=5,G=4,C=5] 
* CE 342: funmark(A,B,C) = 2+ funmark(D,E,F)+ fun4fun8(G,H):10+ fun10(I,C):2
     [D>=0,C>=2,C+D=A+1,C=I+1,C=H+1,C=G+2,F=5] 
* CE 343: funmark(A,B,C) = 2+ funmark(D,E,F)+ fun4fun8(G,H):11
     [D>=0,H>=1,G>=0,G+D+1=A,F=5] 
* CE 344: funmark(A,B,C) = 3+ funmark(D,E,F)+ fun13(G,H):1
     [D>=0,D+5=A,F=5,H=5,G=5,C=5] 
* CE 345: funmark(A,B,C) = 3+ funmark(D,E,F)+ fun13(G,C):2
     [D>=0,C>=2,C+D=A+1,C=G+1,F=5] 
* CE 346: funmark(A,B,C) = 3+ funmark(D,E,F)+ fun13(G,H):1
     [A>=4,A=D+4,F=5,H=5,G=5,C=5] 
* CE 347: funmark(A,B,C) = 3+ funmark(D,E,F)+ fun13(G,H):2
     [A>=4,A=D+4,F=5,H=6,G=5,C=6] 
* CE 348: funmark(A,B,C) = 3+ funmark(D,E,F)+ fun17(G,H):1+ fun15(I,J):1+ fun13(K,L):1
     [D>=0,D+1=A,F=5,L=5,K=5,J=5,I=5,H=5,G=0,C=5] 
* CE 349: funmark(A,B,C) = 3+ funmark(D,E,F)+ fun17(G,H):1+ fun15(I,J):1+ fun13(K,L):2
     [D>=0,D+1=A,F=5,L=6,K=5,J=5,I=5,H=5,G=0,C=6] 
* CE 350: funmark(A,B,C) = 3+ funmark(D,E,F)+ fun17(G,H):1+ fun15(I,J):2+ fun13(K,L):2
     [D>=0,D+1=A,F=5,L=7,K=6,J=6,I=5,H=5,G=0,C=7] 
* CE 351: funmark(A,B,C) = 3+ funmark(D,E,F)+ fun17(G,H):2+ fun15(I,J):2+ fun13(K,L):2
     [D>=0,D+1=A,F=5,L=8,K=7,J=7,I=6,H=6,G=0,C=8] 
* CE 352: funmark(A,B,C) = 3+ funmark(D,E,F)+ fun17(G,H):3+ fun15(I,J):1+ fun13(K,L):1
     [D>=0,D+2=A,F=5,L=5,K=5,J=5,I=5,H=5,G=1,C=5] 
* CE 353: funmark(A,B,C) = 3+ funmark(D,E,F)+ fun17(G,H):3+ fun15(I,J):1+ fun13(K,L):2
     [D>=0,D+2=A,F=5,L=6,K=5,J=5,I=5,H=5,G=1,C=6] 
* CE 354: funmark(A,B,C) = 3+ funmark(D,E,F)+ fun17(G,H):3+ fun15(I,J):2+ fun13(K,L):2
     [D>=0,D+2=A,F=5,L=7,K=6,J=6,I=5,H=5,G=1,C=7] 
* CE 355: funmark(A,B,C) = 3+ funmark(D,E,F)+ fun17(G,H):4+ fun15(I,J):2+ fun13(K,L):2
     [D>=0,D+2=A,F=5,L=8,K=7,J=7,I=6,H=6,G=1,C=8] 
* CE 356: funmark(A,B,C) = 3+ funmark(D,E,F)+ fun17(G,H):5+ fun15(I,J):1+ fun13(K,L):1
     [D>=0,G>=2,G+D+1=A,F=5,L=5,K=5,J=5,I=5,H=5,C=5] 
* CE 357: funmark(A,B,C) = 3+ funmark(D,E,F)+ fun17(G,H):5+ fun15(I,J):1+ fun13(K,L):2
     [D>=0,G>=2,G+D+1=A,F=5,L=6,K=5,J=5,I=5,H=5,C=6] 
* CE 358: funmark(A,B,C) = 3+ funmark(D,E,F)+ fun17(G,H):5+ fun15(I,J):2+ fun13(K,C):2
     [G+7>=C,D>=0,C>=7,G>=2,G+D+1=A,C=K+1,C=J+1,C=I+2,C=H+2,F=5] 
* CE 359: funmark(A,B,C) = 3+ funmark(D,E,F)+ fun17(G,H):6+ fun15(I,J):1+ fun13(K,L):1
     [D>=0,D+5=A,F=5,L=5,K=5,J=5,I=5,H=5,G=4,C=5] 
* CE 360: funmark(A,B,C) = 3+ funmark(D,E,F)+ fun17(G,H):6+ fun15(I,J):1+ fun13(K,L):2
     [D>=0,D+5=A,F=5,L=6,K=5,J=5,I=5,H=5,G=4,C=6] 
* CE 361: funmark(A,B,C) = 3+ funmark(D,E,F)+ fun17(G,H):6+ fun15(I,J):2+ fun13(K,L):1
     [D>=0,D+4=A,F=5,L=5,K=5,J=5,I=4,H=4,G=3,C=5] 
* CE 362: funmark(A,B,C) = 3+ funmark(D,E,F)+ fun17(G,H):6+ fun15(I,J):2+ fun13(K,C):2
     [D>=0,C>=3,C+D=A+2,C=K+1,C=J+1,C=I+2,C=H+2,C=G+3,F=5] 
* CE 363: funmark(A,B,C) = 3+ funmark(D,E,F)+ fun17(G,H):7+ fun15(I,J):1+ fun13(K,L):1
     [D>=0,G>=4,G+D+1=A,F=5,L=5,K=5,J=5,I=5,H=5,C=5] 
* CE 364: funmark(A,B,C) = 3+ funmark(D,E,F)+ fun17(G,H):7+ fun15(I,J):1+ fun13(K,L):2
     [D>=0,G>=4,G+D+1=A,F=5,L=6,K=5,J=5,I=5,H=5,C=6] 
* CE 365: funmark(A,B,C) = 3+ funmark(D,E,F)+ fun17(G,H):7+ fun15(I,J):2+ fun13(K,L):1
     [D>=0,G>=3,G+D+1=A,F=5,L=5,K=5,J=5,I=4,H=4,C=5] 
* CE 366: funmark(A,B,C) = 3+ funmark(D,E,F)+ fun17(G,H):7+ fun15(I,J):2+ fun13(K,C):2
     [G+3>=C,D>=0,C>=5,G+D+1=A,C=K+1,C=J+1,C=I+2,C=H+2,F=5] 
* CE 367: funmark(A,B,C) = 3+ funmark(D,E,F)+ fun17(G,H):8+ fun15(I,J):1+ fun13(K,L):1
     [D>=0,G>=3,G+D+1=A,F=5,L=5,K=5,J=5,I=5,H=5,C=5] 
* CE 368: funmark(A,B,C) = 3+ funmark(D,E,F)+ fun17(G,H):8+ fun15(I,J):1+ fun13(K,L):2
     [D>=0,G>=3,G+D+1=A,F=5,L=6,K=5,J=5,I=5,H=5,C=6] 
* CE 369: funmark(A,B,C) = 3+ funmark(D,E,F)+ fun17(G,H):8+ fun15(I,J):2+ fun13(K,L):1
     [D>=0,G>=2,G+D+1=A,F=5,L=5,K=5,J=5,I=4,H=4,C=5] 
* CE 370: funmark(A,B,C) = 3+ funmark(D,E,F)+ fun17(G,H):8+ fun15(I,J):2+ fun13(K,C):2
     [G+4>=C,D>=0,C>=6,G+D+1=A,C=K+1,C=J+1,C=I+2,C=H+2,F=5] 
* CE 371: funmark(A,B,C) = 3+ funmark(D,E,F)+ fun17(G,H):9+ fun15(I,J):1+ fun13(K,L):1
     [D>=0,G>=5,8>=G,G+D+1=A,F=5,L=5,K=5,J=5,I=5,H=5,C=5] 
* CE 372: funmark(A,B,C) = 3+ funmark(D,E,F)+ fun17(G,H):9+ fun15(I,J):1+ fun13(K,L):2
     [D>=0,G>=5,8>=G,G+D+1=A,F=5,L=6,K=5,J=5,I=5,H=5,C=6] 
* CE 373: funmark(A,B,C) = 3+ funmark(D,E,F)+ fun17(G,H):9+ fun15(I,J):2+ fun13(K,L):1
     [D>=0,G>=4,6>=G,G+D+1=A,F=5,L=5,K=5,J=5,I=4,H=4,C=5] 
* CE 374: funmark(A,B,C) = 3+ funmark(D,E,F)+ fun17(G,H):9+ fun15(I,J):2+ fun13(K,C):2
     [G+2>=C,2*C>=G+6,D>=0,G+D+1=A,C=K+1,C=J+1,C=I+2,C=H+2,F=5] 
* CE 375: funmark(A,B,C) = 3+ funmark(D,E,F)+ fun17(G,H):10+ fun15(I,J):1+ fun13(K,L):1
     [D>=0,D+9=A,F=5,L=5,K=5,J=5,I=5,H=5,G=8,C=5] 
* CE 376: funmark(A,B,C) = 3+ funmark(D,E,F)+ fun17(G,H):10+ fun15(I,J):1+ fun13(K,L):2
     [D>=0,D+9=A,F=5,L=6,K=5,J=5,I=5,H=5,G=8,C=6] 
* CE 377: funmark(A,B,C) = 3+ funmark(D,E,F)+ fun17(G,H):10+ fun15(I,J):2+ fun13(K,L):2
     [D>=0,D+9=A,F=5,L=7,K=6,J=6,I=5,H=5,G=8,C=7] 
* CE 378: funmark(A,B,C) = 3+ funmark(D,E,F)+ fun17(G,H):11+ fun15(I,J):2+ fun13(K,L):2
     [D>=0,D+10=A,F=5,L=8,K=7,J=7,I=6,H=6,G=9,C=8] 
* CE 379: funmark(A,B,C) = 3+ funmark(D,E,F)+ fun17(G,H):12+ fun15(I,J):1+ fun13(K,L):1
     [D>=0,D+11=A,F=5,L=5,K=5,J=5,I=5,H=5,G=10,C=5] 
* CE 380: funmark(A,B,C) = 3+ funmark(D,E,F)+ fun17(G,H):12+ fun15(I,J):1+ fun13(K,L):2
     [D>=0,D+11=A,F=5,L=6,K=5,J=5,I=5,H=5,G=10,C=6] 
* CE 381: funmark(A,B,C) = 3+ funmark(D,E,F)+ fun17(G,H):12+ fun15(I,J):2+ fun13(K,L):2
     [D>=0,D+11=A,F=5,L=7,K=6,J=6,I=5,H=5,G=10,C=7] 
* CE 382: funmark(A,B,C) = 3+ funmark(D,E,F)+ fun17(G,H):13+ fun15(I,J):2+ fun13(K,L):2
     [D>=0,D+14=A,F=5,L=8,K=7,J=7,I=6,H=6,G=13,C=8] 
* CE 383: funmark(A,B,C) = 3+ funmark(D,E,F)+ fun17(G,H):14+ fun15(I,J):1+ fun13(K,L):1
     [D>=0,D+15=A,F=5,L=5,K=5,J=5,I=5,H=5,G=14,C=5] 
* CE 384: funmark(A,B,C) = 3+ funmark(D,E,F)+ fun17(G,H):14+ fun15(I,J):1+ fun13(K,L):2
     [D>=0,D+15=A,F=5,L=6,K=5,J=5,I=5,H=5,G=14,C=6] 
* CE 385: funmark(A,B,C) = 3+ funmark(D,E,F)+ fun17(G,H):14+ fun15(I,J):2+ fun13(K,L):2
     [D>=0,D+15=A,F=5,L=7,K=6,J=6,I=5,H=5,G=14,C=7] 
* CE 386: funmark(A,B,C) = 3+ funmark(D,E,F)+ fun17(G,H):15+ fun15(I,J):2+ fun13(K,L):2
     [D>=0,D+18=A,F=5,L=8,K=7,J=7,I=6,H=6,G=17,C=8] 
* CE 387: funmark(A,B,C) = 3+ funmark(D,E,F)+ fun17(G,H):16+ fun15(I,J):1+ fun13(K,L):1
     [D>=0,D+19=A,F=5,L=5,K=5,J=5,I=5,H=5,G=18,C=5] 
* CE 388: funmark(A,B,C) = 3+ funmark(D,E,F)+ fun17(G,H):16+ fun15(I,J):1+ fun13(K,L):2
     [D>=0,D+19=A,F=5,L=6,K=5,J=5,I=5,H=5,G=18,C=6] 
* CE 389: funmark(A,B,C) = 3+ funmark(D,E,F)+ fun17(G,H):16+ fun15(I,J):2+ fun13(K,L):2
     [D>=0,D+19=A,F=5,L=7,K=6,J=6,I=5,H=5,G=18,C=7] 
* CE 390: funmark(A,B,C) = 3+ funmark(D,E,F)+ fun17(G,H):17+ fun15(I,J):2+ fun13(K,C):2
     [D>=0,C>=8,C+D=A+5,C=K+1,C=J+1,C=I+2,C=H+2,C=G+6,F=5] 
* CE 391: funmark(A,B,C) = 3+ funmark(D,E,F)+ fun17(G,H):18+ fun15(I,J):1+ fun13(K,L):1
     [D>=0,D+4=A,F=5,L=5,K=5,J=5,I=5,H=5,G=3,C=5] 
* CE 392: funmark(A,B,C) = 3+ funmark(D,E,F)+ fun17(G,H):18+ fun15(I,J):1+ fun13(K,L):2
     [D>=0,D+4=A,F=5,L=6,K=5,J=5,I=5,H=5,G=3,C=6] 
* CE 393: funmark(A,B,C) = 3+ funmark(D,E,F)+ fun17(G,H):18+ fun15(I,J):2+ fun13(K,L):1
     [D>=0,D+3=A,F=5,L=5,K=5,J=5,I=4,H=4,G=2,C=5] 
* CE 394: funmark(A,B,C) = 3+ funmark(D,E,F)+ fun17(G,H):18+ fun15(I,J):2+ fun13(K,C):2
     [D>=0,C>=4,C+D=A+3,C=K+1,C=J+1,C=I+2,C=H+2,C=G+4,F=5] 
* CE 395: funmark(A,B,C) = 3+ funmark(D,E,F)+ fun17(G,H):19+ fun15(I,J):1+ fun13(K,L):1
     [D>=0,D+8=A,F=5,L=5,K=5,J=5,I=5,H=5,G=7,C=5] 
* CE 396: funmark(A,B,C) = 3+ funmark(D,E,F)+ fun17(G,H):19+ fun15(I,J):1+ fun13(K,L):2
     [D>=0,D+8=A,F=5,L=6,K=5,J=5,I=5,H=5,G=7,C=6] 
* CE 397: funmark(A,B,C) = 3+ funmark(D,E,F)+ fun17(G,H):19+ fun15(I,J):2+ fun13(K,L):1
     [D>=0,D+7=A,F=5,L=5,K=5,J=5,I=4,H=4,G=6,C=5] 
* CE 398: funmark(A,B,C) = 3+ funmark(D,E,F)+ fun17(C,G):19+ fun15(H,I):2+ fun13(J,C):2
     [D>=0,C>=4,C+D+1=A,C=J+1,C=I+1,C=H+2,C=G+2,F=5] 
* CE 399: funmark(A,B,C) = 3+ funmark(D,E,F)+ fun17(G,H):20+ fun15(I,J):1+ fun13(K,L):1
     [D>=0,D+10=A,F=5,L=5,K=5,J=5,I=5,H=5,G=9,C=5] 
* CE 400: funmark(A,B,C) = 3+ funmark(D,E,F)+ fun17(G,H):20+ fun15(I,J):1+ fun13(K,L):2
     [D>=0,D+10=A,F=5,L=6,K=5,J=5,I=5,H=5,G=9,C=6] 
* CE 401: funmark(A,B,C) = 3+ funmark(D,E,F)+ fun17(G,H):20+ fun15(I,J):2+ fun13(K,L):1
     [D>=0,D+9=A,F=5,L=5,K=5,J=5,I=4,H=4,G=8,C=5] 
* CE 402: funmark(A,B,C) = 3+ funmark(D,E,F)+ fun17(G,H):20+ fun15(I,J):2+ fun13(K,C):2
     [D>=0,C>=4,C+D+3=A,C=K+1,C=J+1,C=I+2,C=H+2,C+2=G,F=5] 
* CE 403: funmark(A,B,C) = 3+ funmark(D,E,F)+ fun17(G,H):21+ fun15(I,J):1+ fun13(K,L):1
     [D>=0,D+14=A,F=5,L=5,K=5,J=5,I=5,H=5,G=13,C=5] 
* CE 404: funmark(A,B,C) = 3+ funmark(D,E,F)+ fun17(G,H):21+ fun15(I,J):1+ fun13(K,L):2
     [D>=0,D+14=A,F=5,L=6,K=5,J=5,I=5,H=5,G=13,C=6] 
* CE 405: funmark(A,B,C) = 3+ funmark(D,E,F)+ fun17(G,H):21+ fun15(I,J):2+ fun13(K,L):1
     [D>=0,D+13=A,F=5,L=5,K=5,J=5,I=4,H=4,G=12,C=5] 
* CE 406: funmark(A,B,C) = 3+ funmark(D,E,F)+ fun17(G,H):21+ fun15(I,J):2+ fun13(K,C):2
     [D>=0,C>=4,C+D+7=A,C=K+1,C=J+1,C=I+2,C=H+2,C+6=G,F=5] 
* CE 407: funmark(A,B,C) = 3+ funmark(D,E,F)+ fun17(G,H):22+ fun15(I,J):1+ fun13(K,L):1
     [D>=0,D+18=A,F=5,L=5,K=5,J=5,I=5,H=5,G=17,C=5] 
* CE 408: funmark(A,B,C) = 3+ funmark(D,E,F)+ fun17(G,H):22+ fun15(I,J):1+ fun13(K,L):2
     [D>=0,D+18=A,F=5,L=6,K=5,J=5,I=5,H=5,G=17,C=6] 
* CE 409: funmark(A,B,C) = 3+ funmark(D,E,F)+ fun17(G,H):22+ fun15(I,J):2+ fun13(K,L):1
     [D>=0,D+17=A,F=5,L=5,K=5,J=5,I=4,H=4,G=16,C=5] 
* CE 410: funmark(A,B,C) = 3+ funmark(D,E,F)+ fun17(G,H):22+ fun15(I,J):2+ fun13(K,C):2
     [D>=0,C>=4,C+D+11=A,C=K+1,C=J+1,C=I+2,C=H+2,C+10=G,F=5] 
* CE 411: funmark(A,B,C) = 3+ funmark(D,E,F)+ fun17(G,H):23+ fun15(I,J):2+ fun13(K,C):2
     [G+8>=C,7*C>=G+56,D>=0,C>=10,G+D+1=A,C=K+1,C=J+1,C=I+2,C=H+2,F=5] 
* CE 412: funmark(A,B,C) = 1+ funmark(A,D,C)
     [A>=0,B=3] 
* CE 413: funmark(A,B,C) = 1+ funmark(B,D,C)
     [B>=0,A=3] 
* CE 414: funmark(A,B,C) = 1+ funmark(D,E,F)+ funmark(G,H,I)+ funmark(F,I,C)
     [G>=0,D>=0,D+G+1=A] 
* CE 415: funmark(A,B,C) = 1+ funmark(D,E,F)+ funmark(G,H,I)+ funmark(B,J,K)+ funmark(I,K,L)+ funmark(F,L,C)
     [G>=0,D>=0,B>=0,D+G+1=A] 

### Cost equations --> "Loop" of funmark/3 
* CEs [415] --> Loop 126 
* CEs [414] --> Loop 127 
* CEs [411] --> Loop 128 
* CEs [390] --> Loop 129 
* CEs [406] --> Loop 130 
* CEs [410] --> Loop 131 
* CEs [351] --> Loop 132 
* CEs [355] --> Loop 133 
* CEs [378] --> Loop 134 
* CEs [382] --> Loop 135 
* CEs [386] --> Loop 136 
* CEs [295,312,329,350] --> Loop 137 
* CEs [298,315,332,354] --> Loop 138 
* CEs [301,318,335] --> Loop 139 
* CEs [304,321,338] --> Loop 140 
* CEs [377] --> Loop 141 
* CEs [381] --> Loop 142 
* CEs [385] --> Loop 143 
* CEs [358,389] --> Loop 144 
* CEs [276,278,280,282,284,286,288,290,292,294,311,328,349] --> Loop 145 
* CEs [297,314,331,353] --> Loop 146 
* CEs [300,317,334] --> Loop 147 
* CEs [347,392] --> Loop 148 
* CEs [360] --> Loop 149 
* CEs [303,320,337,398] --> Loop 150 
* CEs [396] --> Loop 151 
* CEs [372,376] --> Loop 152 
* CEs [400] --> Loop 153 
* CEs [380] --> Loop 154 
* CEs [404] --> Loop 155 
* CEs [384] --> Loop 156 
* CEs [408] --> Loop 157 
* CEs [357,364,368,370,388] --> Loop 158 
* CEs [277,279,281,283,285,287,289,291,293,310,327,348] --> Loop 159 
* CEs [296,313,330,352,394] --> Loop 160 
* CEs [299,306,316,323,333,340,362,393] --> Loop 161 
* CEs [305,308,322,325,339,342,345,346,361,391] --> Loop 162 
* CEs [307,324,341,344,359,374] --> Loop 163 
* CEs [302,319,336,373,397] --> Loop 164 
* CEs [395,402] --> Loop 165 
* CEs [371,375,401] --> Loop 166 
* CEs [399] --> Loop 167 
* CEs [379] --> Loop 168 
* CEs [405] --> Loop 169 
* CEs [403] --> Loop 170 
* CEs [383] --> Loop 171 
* CEs [409] --> Loop 172 
* CEs [407] --> Loop 173 
* CEs [356,363,365,366,367,369,387] --> Loop 174 
* CEs [412] --> Loop 175 
* CEs [413] --> Loop 176 
* CEs [245,309,326,343] --> Loop 177 
* CEs [234] --> Loop 178 
* CEs [188] --> Loop 179 
* CEs [227] --> Loop 180 
* CEs [225] --> Loop 181 
* CEs [223] --> Loop 182 
* CEs [222] --> Loop 183 
* CEs [221,266] --> Loop 184 
* CEs [220] --> Loop 185 
* CEs [233,265] --> Loop 186 
* CEs [232,272] --> Loop 187 
* CEs [219] --> Loop 188 
* CEs [218,264] --> Loop 189 
* CEs [217] --> Loop 190 
* CEs [231,263] --> Loop 191 
* CEs [230,271] --> Loop 192 
* CEs [216] --> Loop 193 
* CEs [215,262] --> Loop 194 
* CEs [214] --> Loop 195 
* CEs [261] --> Loop 196 
* CEs [228,270] --> Loop 197 
* CEs [213] --> Loop 198 
* CEs [212,229,260] --> Loop 199 
* CEs [226,269] --> Loop 200 
* CEs [242] --> Loop 201 
* CEs [210,241,249,259] --> Loop 202 
* CEs [189] --> Loop 203 
* CEs [190,204] --> Loop 204 
* CEs [191,205,224,243,268] --> Loop 205 
* CEs [192,207,258] --> Loop 206 
* CEs [203,240,267,273] --> Loop 207 
* CEs [202,206,208,209,239,248,255] --> Loop 208 
* CEs [193,211,257] --> Loop 209 
* CEs [201] --> Loop 210 
* CEs [200,238,254] --> Loop 211 
* CEs [199,237,247,253] --> Loop 212 
* CEs [194] --> Loop 213 
* CEs [198] --> Loop 214 
* CEs [197,236,252] --> Loop 215 
* CEs [196,235,246,251] --> Loop 216 
* CEs [195,244,250,256,274] --> Loop 217 
* CEs [275] --> Loop 218 

#### Loops of funmark/3 
* Loop 126: funmark(A,B,C)->  funmark(A',B',C')  funmark(A'2,B'2,C'2)  funmark(B,A'3,B'3)  funmark(C'2,B'3,A'4)  funmark(C',A'4,C)
                  [A'2>=0,A'>=0,B>=0,A'+A'2+1=A] 
* Loop 127: funmark(A,B,C)->  funmark(A',B',C')  funmark(A'2,B'2,C'2)  funmark(C',C'2,C)
                  [A'2>=0,A'>=0,A'+A'2+1=A] 
* Loop 128: funmark(A,B,C)->  funmark(A',B',C')
                  [A+7>=C+A',A'+7*C>=A+55,A'>=0,C>=10,C'=5] 
* Loop 129: funmark(A,B,C)->  funmark(A',B',C')
                  [A+5>=C,C>=8,C+A'=A+5,C'=5] 
* Loop 130: funmark(A,B,C)->  funmark(A',B',C')
                  [A>=C+7,C>=4,C+A'+7=A,C'=5] 
* Loop 131: funmark(A,B,C)->  funmark(A',B',C')
                  [A>=C+11,C>=4,C+A'+11=A,C'=5] 
* Loop 132: funmark(A,B,C)->  funmark(A',B',C')
                  [A>=1,A=A'+1,C'=5,C=8] 
* Loop 133: funmark(A,B,C)->  funmark(A',B',C')
                  [A>=2,A=A'+2,C'=5,C=8] 
* Loop 134: funmark(A,B,C)->  funmark(A',B',C')
                  [A>=10,A=A'+10,C'=5,C=8] 
* Loop 135: funmark(A,B,C)->  funmark(A',B',C')
                  [A>=14,A=A'+14,C'=5,C=8] 
* Loop 136: funmark(A,B,C)->  funmark(A',B',C')
                  [A>=18,A=A'+18,C'=5,C=8] 
* Loop 137: funmark(A,B,C)->  funmark(A',B',C')
                  [A>=1,A=A'+1,C'=5,C=7] 
* Loop 138: funmark(A,B,C)->  funmark(A',B',C')
                  [A>=2,A=A'+2,C'=5,C=7] 
* Loop 139: funmark(A,B,C)->  funmark(A',B',C')
                  [A>=3,A=A'+3,C'=5,C=7] 
* Loop 140: funmark(A,B,C)->  funmark(A',B',C')
                  [A>=7,A=A'+7,C'=5,C=7] 
* Loop 141: funmark(A,B,C)->  funmark(A',B',C')
                  [A>=9,A=A'+9,C'=5,C=7] 
* Loop 142: funmark(A,B,C)->  funmark(A',B',C')
                  [A>=11,A=A'+11,C'=5,C=7] 
* Loop 143: funmark(A,B,C)->  funmark(A',B',C')
                  [A>=15,A=A'+15,C'=5,C=7] 
* Loop 144: funmark(A,B,C)->  funmark(A',B',C')
                  [A+6>=C+A',A>=A'+3,A'>=0,C>=7,C'=5] 
* Loop 145: funmark(A,B,C)->  funmark(A',B',C')
                  [C+A'>=A,A>=A'+1,A'>=0,A+C'=C+A'] 
* Loop 146: funmark(A,B,C)->  funmark(A',B',C')
                  [A>=2,A=A'+2,C'=5,C=6] 
* Loop 147: funmark(A,B,C)->  funmark(A',B',C')
                  [A>=3,A=A'+3,C'=5,C=6] 
* Loop 148: funmark(A,B,C)->  funmark(A',B',C')
                  [A>=4,A=A'+4,C'=5,C=6] 
* Loop 149: funmark(A,B,C)->  funmark(A',B',C')
                  [A>=5,A=A'+5,C'=5,C=6] 
* Loop 150: funmark(A,B,C)->  funmark(A',B',C')
                  [A>=C+1,C>=4,C+A'+1=A,C'=5] 
* Loop 151: funmark(A,B,C)->  funmark(A',B',C')
                  [A>=8,A=A'+8,C'=5,C=6] 
* Loop 152: funmark(A,B,C)->  funmark(A',B',C')
                  [A>=A'+6,A'+9>=A,A'>=0,C'=5,C=6] 
* Loop 153: funmark(A,B,C)->  funmark(A',B',C')
                  [A>=10,A=A'+10,C'=5,C=6] 
* Loop 154: funmark(A,B,C)->  funmark(A',B',C')
                  [A>=11,A=A'+11,C'=5,C=6] 
* Loop 155: funmark(A,B,C)->  funmark(A',B',C')
                  [A>=14,A=A'+14,C'=5,C=6] 
* Loop 156: funmark(A,B,C)->  funmark(A',B',C')
                  [A>=15,A=A'+15,C'=5,C=6] 
* Loop 157: funmark(A,B,C)->  funmark(A',B',C')
                  [A>=18,A=A'+18,C'=5,C=6] 
* Loop 158: funmark(A,B,C)->  funmark(A',B',C')
                  [A+3>=C+A',A'>=0,C>=6,C'=5] 
* Loop 159: funmark(A,B,C)->  funmark(A',B',C')
                  [A>=1,A=A'+1,C'=5,C=5] 
* Loop 160: funmark(A,B,C)->  funmark(A',B',C')
                  [A+3>=C,C>=4,C+A'=A+3,C'=5] 
* Loop 161: funmark(A,B,C)->  funmark(A',B',C')
                  [A+2>=C,C>=3,C+A'=A+2,C'=5] 
* Loop 162: funmark(A,B,C)->  funmark(A',B',C')
                  [A+1>=C,C>=2,C+A'=A+1,C'=5] 
* Loop 163: funmark(A,B,C)->  funmark(A',B',C')
                  [A+1>=C+A',A'+2*C>=A+5,A'>=0,C'=5] 
* Loop 164: funmark(A,B,C)->  funmark(A',B',C')
                  [A>=A'+5,A'+7>=A,A'>=0,C'=5,C=5] 
* Loop 165: funmark(A,B,C)->  funmark(A',B',C')
                  [A>=C+3,C>=4,C+A'+3=A,C'=5] 
* Loop 166: funmark(A,B,C)->  funmark(A',B',C')
                  [A>=A'+6,A'+9>=A,A'>=0,C'=5,C=5] 
* Loop 167: funmark(A,B,C)->  funmark(A',B',C')
                  [A>=10,A=A'+10,C'=5,C=5] 
* Loop 168: funmark(A,B,C)->  funmark(A',B',C')
                  [A>=11,A=A'+11,C'=5,C=5] 
* Loop 169: funmark(A,B,C)->  funmark(A',B',C')
                  [A>=13,A=A'+13,C'=5,C=5] 
* Loop 170: funmark(A,B,C)->  funmark(A',B',C')
                  [A>=14,A=A'+14,C'=5,C=5] 
* Loop 171: funmark(A,B,C)->  funmark(A',B',C')
                  [A>=15,A=A'+15,C'=5,C=5] 
* Loop 172: funmark(A,B,C)->  funmark(A',B',C')
                  [A>=17,A=A'+17,C'=5,C=5] 
* Loop 173: funmark(A,B,C)->  funmark(A',B',C')
                  [A>=18,A=A'+18,C'=5,C=5] 
* Loop 174: funmark(A,B,C)->  funmark(A',B',C')
                  [A+2>=C+A',A'>=0,C>=5,C'=5] 
* Loop 175: funmark(A,B,C)->  funmark(A,A',C)
                  [A>=0,B=3] 
* Loop 176: funmark(A,B,C)->  funmark(B,A',C)
                  [B>=0,A=3] 
* Loop 177: funmark(A,B,C) [A>=1] 
* Loop 178: funmark(A,B,C) [A+6>=C,7*C>=A+48,C>=9] 
* Loop 179: funmark(A,B,C) [B>=0,A>=0,A+B+1=C] 
* Loop 180: funmark(A,B,C) [A>=5,A=C+2] 
* Loop 181: funmark(A,B,C) [A>=1,A+2=C] 
* Loop 182: funmark(A,B,C) [A>=3,A+4=C] 
* Loop 183: funmark(A,B,C) [C=6,A=19] 
* Loop 184: funmark(A,B,C) [C=5,A=19] 
* Loop 185: funmark(A,B,C) [C=7,A=18] 
* Loop 186: funmark(A,B,C) [A>=15,A=C+12] 
* Loop 187: funmark(A,B,C) [A>=15,A=C+13] 
* Loop 188: funmark(A,B,C) [C=6,A=15] 
* Loop 189: funmark(A,B,C) [C=5,A=15] 
* Loop 190: funmark(A,B,C) [C=7,A=14] 
* Loop 191: funmark(A,B,C) [A>=11,A=C+8] 
* Loop 192: funmark(A,B,C) [A>=11,A=C+9] 
* Loop 193: funmark(A,B,C) [C=6,A=11] 
* Loop 194: funmark(A,B,C) [C=5,A=11] 
* Loop 195: funmark(A,B,C) [C=7,A=10] 
* Loop 196: funmark(A,B,C) [C=6,A=10] 
* Loop 197: funmark(A,B,C) [A>=7,A=C+5] 
* Loop 198: funmark(A,B,C) [C=6,A=9] 
* Loop 199: funmark(A,B,C) [A>=7,A=C+4] 
* Loop 200: funmark(A,B,C) [A>=5,A=C+3] 
* Loop 201: funmark(A,B,C) [C=6,A=7] 
* Loop 202: funmark(A,B,C) [A>=C+1,2*C>=A+1] 
* Loop 203: funmark(A,B,C) [C=6,A=6] 
* Loop 204: funmark(A,B,C) [C=5,A=5] 
* Loop 205: funmark(A,B,C) [A>=1,A+1=C] 
* Loop 206: funmark(A,B,C) [A+1>=C,C>=4] 
* Loop 207: funmark(A,B,C) [A+5>=C,C>=6,A>=3] 
* Loop 208: funmark(A,B,C) [A+4>=C,C>=5,A>=3] 
* Loop 209: funmark(A,B,C) [A>=C,C>=3] 
* Loop 210: funmark(A,B,C) [C=7,A=2] 
* Loop 211: funmark(A,B,C) [C=6,A=2] 
* Loop 212: funmark(A,B,C) [C=5,A=2] 
* Loop 213: funmark(A,B,C) [C=2,A=2] 
* Loop 214: funmark(A,B,C) [C=7,A=1] 
* Loop 215: funmark(A,B,C) [C=6,A=1] 
* Loop 216: funmark(A,B,C) [C=5,A=1] 
* Loop 217: funmark(A,B,A) [A>=1] 
* Loop 218: funmark(A,B,C) [C=0,A=0] 

### Ranking functions of CR funmark(A,B,C) 

#### Partial ranking functions of CR funmark(A,B,C) 
* Partial RF of phase [126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176]:
  - RF of loop [126:1,126:2,127:1,127:2,132:1,137:1,145:1,159:1,160:1,161:1,162:1]:
    A depends on loops [126:3,126:4,126:5,127:3,176:1] 
  - RF of loop [128:1,129:1,139:1,144:1,147:1,158:1,163:1,174:1]:
    A-2 depends on loops [126:3,126:4,126:5,127:3,176:1] 
  - RF of loop [130:1,142:1,154:1,168:1]:
    A-10 depends on loops [126:3,126:4,126:5,127:3,176:1] 
  - RF of loop [131:1,143:1,156:1,171:1]:
    A-14 depends on loops [126:3,126:4,126:5,127:3,176:1] 
  - RF of loop [133:1,138:1,146:1]:
    A-1 depends on loops [126:3,126:4,126:5,127:3,176:1] 
  - RF of loop [134:1,153:1,167:1]:
    A-9 depends on loops [126:3,126:4,126:5,127:3,176:1] 
  - RF of loop [135:1,155:1,170:1]:
    A-13 depends on loops [126:3,126:4,126:5,127:3,176:1] 
  - RF of loop [136:1,157:1,173:1]:
    A-17 depends on loops [126:3,126:4,126:5,127:3,176:1] 
  - RF of loop [140:1,165:1]:
    A-6 depends on loops [126:3,126:4,126:5,127:3,176:1] 
  - RF of loop [141:1]:
    A-8 depends on loops [126:3,126:4,126:5,127:3,176:1] 
  - RF of loop [148:1]:
    A-3 depends on loops [126:3,126:4,126:5,127:3,176:1] 
  - RF of loop [149:1,150:1]:
    A-4 depends on loops [126:3,126:4,126:5,127:3,176:1] 
  - RF of loop [151:1]:
    A-7 depends on loops [126:3,126:4,126:5,127:3,176:1] 
  - RF of loop [152:1,166:1]:
    A/2-5/2 depends on loops [126:3,126:4,126:5,127:3,176:1] 
  - RF of loop [164:1]:
    A/5-4/5 depends on loops [126:3,126:4,126:5,127:3,176:1] 
  - RF of loop [169:1]:
    A-12 depends on loops [126:3,126:4,126:5,127:3,176:1] 
  - RF of loop [172:1]:
    A-16 depends on loops [126:3,126:4,126:5,127:3,176:1] 


### Resulting Chains:funmark(A,B,C) 
* [multiple([126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176],[[],[218],[217],[216],[215],[214],[213],[212],[211],[210],[209],[208],[207],[206],[205],[204],[203],[202],[201],[200],[199],[198],[197],[196],[195],[194],[193],[192],[191],[190],[189],[188],[187],[186],[185],[184],[183],[182],[181],[180],[179],[178],[177]])]...
* [218]
* [217]
* [216]
* [215]
* [214]
* [213]
* [212]
* [211]
* [210]
* [209]
* [208]
* [207]
* [206]
* [205]
* [204]
* [203]
* [202]
* [201]
* [200]
* [199]
* [198]
* [197]
* [196]
* [195]
* [194]
* [193]
* [192]
* [191]
* [190]
* [189]
* [188]
* [187]
* [186]
* [185]
* [184]
* [183]
* [182]
* [181]
* [180]
* [179]
* [178]
* [177]...


### Merging Chains  funmark/3 into  External patterns of execution 
* [[218]] --> 1 
* [[216]] --> 2 
* [[215]] --> 3 
* [[214]] --> 4 
* [[213],[217]] --> 5 
* [[212]] --> 6 
* [[211]] --> 7 
* [[210]] --> 8 
* [[204],[208]] --> 9 
* [[203],[207]] --> 10 
* [[201],[209]] --> 11 
* [[198],[200]] --> 12 
* [[196],[199]] --> 13 
* [[195],[206]] --> 14 
* [[194]] --> 15 
* [[193],[197]] --> 16 
* [[190]] --> 17 
* [[189]] --> 18 
* [[188],[192]] --> 19 
* [[185]] --> 20 
* [[184]] --> 21 
* [[183],[187]] --> 22 
* [[182]] --> 23 
* [[181]] --> 24 
* [[205]] --> 25 
* [[180],[202]] --> 26 
* [[191]] --> 27 
* [[186]] --> 28 
* [[179]] --> 29 
* [[178]] --> 30 
* [[multiple([126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176],[[],[218],[217],[216],[215],[214],[213],[212],[211],[210],[209],[208],[207],[206],[205],[204],[203],[202],[201],[200],[199],[198],[197],[196],[195],[194],[193],[192],[191],[190],[189],[188],[187],[186],[185],[184],[183],[182],[181],[180],[179],[178],[177]])]] --> 31 
* [[177]] --> 32 


### Specialization of cost equations start/2 
* CE 2 is refined into CE [416] 
* CE 3 is refined into CE [417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433] 
* CE 4 is refined into CE [434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450] 
* CE 5 is refined into CE [451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467] 
* CE 6 is refined into CE [468,469] 
* CE 7 is refined into CE [470,471] 
* CE 8 is refined into CE [472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487,488,489,490,491,492,493,494,495,496,497,498,499,500,501,502,503,504,505,506,507,508,509,510,511,512,513,514,515,516,517,518,519,520,521,522,523,524,525,526,527,528,529,530,531,532,533,534,535] 
* CE 9 is refined into CE [536,537,538,539,540,541,542,543,544,545,546,547,548,549,550,551,552,553,554,555,556,557,558,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574] 
* CE 10 is refined into CE [575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,597,598,599,600,601,602,603,604,605,606] 
* CE 11 is refined into CE [607,608] 
* CE 12 is refined into CE [609,610] 
* CE 13 is refined into CE [611,612] 
* CE 14 is refined into CE [613,614] 
* CE 15 is refined into CE [615,616] 
* CE 16 is refined into CE [617,618] 
* CE 17 is refined into CE [619,620] 
* CE 18 is refined into CE [621,622] 
* CE 19 is refined into CE [623,624,625,626,627,628,629,630,631,632,633] 
* CE 20 is refined into CE [634,635,636,637,638,639,640,641,642,643,644,645,646,647,648,649,650,651,652,653,654,655,656] 
* CE 21 is refined into CE [657,658,659,660,661] 


#### Refined cost equations start/2 
* CE 416: start(V4,V3) = 1
     [V4>=0] 
* CE 417: start(V4,V3) = 1+ fun4fun8(W4,X4):1+ fun3(Y4,Z4):1
     [Z4=5,Y4=5,X4=5,W4=0,V3=0,V4=5] 
* CE 418: start(V4,V3) = 1+ fun4fun8(W4,X4):1+ fun3(Y4,Z4):2
     [Z4=6,Y4=5,X4=5,W4=0,V3=0,V4=5] 
* CE 419: start(V4,V3) = 1+ fun4fun8(W4,X4):2+ fun3(Y4,Z4):2
     [Z4=7,Y4=6,X4=6,W4=0,V3=0,V4=5] 
* CE 420: start(V4,V3) = 1+ fun4fun8(W4,X4):3+ fun3(Y4,Z4):1
     [Z4=5,Y4=5,X4=5,W4=1,V3=1,V4=5] 
* CE 421: start(V4,V3) = 1+ fun4fun8(W4,X4):3+ fun3(Y4,Z4):2
     [Z4=6,Y4=5,X4=5,W4=1,V3=1,V4=5] 
* CE 422: start(V4,V3) = 1+ fun4fun8(W4,X4):4+ fun3(Y4,Z4):2
     [Z4=7,Y4=6,X4=6,W4=1,V3=1,V4=5] 
* CE 423: start(V4,V3) = 1+ fun4fun8(W4,X4):5+ fun3(Y4,Z4):1
     [Z4=5,Y4=5,X4=5,W4=2,V3=2,V4=5] 
* CE 424: start(V4,V3) = 1+ fun4fun8(W4,X4):5+ fun3(Y4,Z4):2
     [Z4=6,Y4=5,X4=5,W4=2,V3=2,V4=5] 
* CE 425: start(V4,V3) = 1+ fun4fun8(W4,X4):6+ fun3(Y4,Z4):2
     [Z4=7,Y4=6,X4=6,W4=2,V3=2,V4=5] 
* CE 426: start(V4,V3) = 1+ fun4fun8(W4,X4):7+ fun3(Y4,Z4):1
     [Z4=5,Y4=5,X4=5,W4=6,V3=6,V4=5] 
* CE 427: start(V4,V3) = 1+ fun4fun8(W4,X4):7+ fun3(Y4,Z4):2
     [Z4=6,Y4=5,X4=5,W4=6,V3=6,V4=5] 
* CE 428: start(V4,V3) = 1+ fun4fun8(W4,X4):8+ fun3(Y4,Z4):2
     [Z4=7,Y4=6,X4=6,W4=6,V3=6,V4=5] 
* CE 429: start(V4,V3) = 1+ fun4fun8(W4,X4):9+ fun3(Y4,Z4):1
     [Z4=5,Y4=5,X4=5,W4=3,V3=3,V4=5] 
* CE 430: start(V4,V3) = 1+ fun4fun8(W4,X4):9+ fun3(Y4,Z4):2
     [Z4>=3,Z4=Y4+1,Z4=X4+1,Z4=W4+3,Z4=V3+3,V4=5] 
* CE 431: start(V4,V3) = 1+ fun4fun8(W4,X4):10+ fun3(Y4,Z4):1
     [Z4=5,Y4=5,X4=5,W4=4,V3=4,V4=5] 
* CE 432: start(V4,V3) = 1+ fun4fun8(W4,X4):10+ fun3(Y4,Z4):2
     [Z4>=2,Z4=Y4+1,Z4=X4+1,Z4=W4+2,Z4=V3+2,V4=5] 
* CE 433: start(V4,V3) = 1+ fun4fun8(V3,W4):11
     [W4>=1,V3>=0,V4=5] 
* CE 434: start(V4,V3) = 1+ fun4fun8(W4,X4):1+ fun7(Y4,Z4):1
     [Z4=5,Y4=5,X4=5,W4=0,V3=0,V4=5] 
* CE 435: start(V4,V3) = 1+ fun4fun8(W4,X4):1+ fun7(Y4,Z4):2
     [Z4=6,Y4=5,X4=5,W4=0,V3=0,V4=5] 
* CE 436: start(V4,V3) = 1+ fun4fun8(W4,X4):2+ fun7(Y4,Z4):2
     [Z4=7,Y4=6,X4=6,W4=0,V3=0,V4=5] 
* CE 437: start(V4,V3) = 1+ fun4fun8(W4,X4):3+ fun7(Y4,Z4):1
     [Z4=5,Y4=5,X4=5,W4=1,V3=1,V4=5] 
* CE 438: start(V4,V3) = 1+ fun4fun8(W4,X4):3+ fun7(Y4,Z4):2
     [Z4=6,Y4=5,X4=5,W4=1,V3=1,V4=5] 
* CE 439: start(V4,V3) = 1+ fun4fun8(W4,X4):4+ fun7(Y4,Z4):2
     [Z4=7,Y4=6,X4=6,W4=1,V3=1,V4=5] 
* CE 440: start(V4,V3) = 1+ fun4fun8(W4,X4):5+ fun7(Y4,Z4):1
     [Z4=5,Y4=5,X4=5,W4=2,V3=2,V4=5] 
* CE 441: start(V4,V3) = 1+ fun4fun8(W4,X4):5+ fun7(Y4,Z4):2
     [Z4=6,Y4=5,X4=5,W4=2,V3=2,V4=5] 
* CE 442: start(V4,V3) = 1+ fun4fun8(W4,X4):6+ fun7(Y4,Z4):2
     [Z4=7,Y4=6,X4=6,W4=2,V3=2,V4=5] 
* CE 443: start(V4,V3) = 1+ fun4fun8(W4,X4):7+ fun7(Y4,Z4):1
     [Z4=5,Y4=5,X4=5,W4=6,V3=6,V4=5] 
* CE 444: start(V4,V3) = 1+ fun4fun8(W4,X4):7+ fun7(Y4,Z4):2
     [Z4=6,Y4=5,X4=5,W4=6,V3=6,V4=5] 
* CE 445: start(V4,V3) = 1+ fun4fun8(W4,X4):8+ fun7(Y4,Z4):2
     [Z4=7,Y4=6,X4=6,W4=6,V3=6,V4=5] 
* CE 446: start(V4,V3) = 1+ fun4fun8(W4,X4):9+ fun7(Y4,Z4):1
     [Z4=5,Y4=5,X4=5,W4=3,V3=3,V4=5] 
* CE 447: start(V4,V3) = 1+ fun4fun8(W4,X4):9+ fun7(Y4,Z4):2
     [Z4>=3,Z4=Y4+1,Z4=X4+1,Z4=W4+3,Z4=V3+3,V4=5] 
* CE 448: start(V4,V3) = 1+ fun4fun8(W4,X4):10+ fun7(Y4,Z4):1
     [Z4=5,Y4=5,X4=5,W4=4,V3=4,V4=5] 
* CE 449: start(V4,V3) = 1+ fun4fun8(W4,X4):10+ fun7(Y4,Z4):2
     [Z4>=2,Z4=Y4+1,Z4=X4+1,Z4=W4+2,Z4=V3+2,V4=5] 
* CE 450: start(V4,V3) = 1+ fun4fun8(V3,W4):11
     [W4>=1,V3>=0,V4=5] 
* CE 451: start(V4,V3) = 1+ fun4fun8(W4,X4):1+ fun10(Y4,Z4):1
     [Z4=5,Y4=5,X4=5,W4=0,V3=0,V4=5] 
* CE 452: start(V4,V3) = 1+ fun4fun8(W4,X4):1+ fun10(Y4,Z4):2
     [Z4=6,Y4=5,X4=5,W4=0,V3=0,V4=5] 
* CE 453: start(V4,V3) = 1+ fun4fun8(W4,X4):2+ fun10(Y4,Z4):2
     [Z4=7,Y4=6,X4=6,W4=0,V3=0,V4=5] 
* CE 454: start(V4,V3) = 1+ fun4fun8(W4,X4):3+ fun10(Y4,Z4):1
     [Z4=5,Y4=5,X4=5,W4=1,V3=1,V4=5] 
* CE 455: start(V4,V3) = 1+ fun4fun8(W4,X4):3+ fun10(Y4,Z4):2
     [Z4=6,Y4=5,X4=5,W4=1,V3=1,V4=5] 
* CE 456: start(V4,V3) = 1+ fun4fun8(W4,X4):4+ fun10(Y4,Z4):2
     [Z4=7,Y4=6,X4=6,W4=1,V3=1,V4=5] 
* CE 457: start(V4,V3) = 1+ fun4fun8(W4,X4):5+ fun10(Y4,Z4):1
     [Z4=5,Y4=5,X4=5,W4=2,V3=2,V4=5] 
* CE 458: start(V4,V3) = 1+ fun4fun8(W4,X4):5+ fun10(Y4,Z4):2
     [Z4=6,Y4=5,X4=5,W4=2,V3=2,V4=5] 
* CE 459: start(V4,V3) = 1+ fun4fun8(W4,X4):6+ fun10(Y4,Z4):2
     [Z4=7,Y4=6,X4=6,W4=2,V3=2,V4=5] 
* CE 460: start(V4,V3) = 1+ fun4fun8(W4,X4):7+ fun10(Y4,Z4):1
     [Z4=5,Y4=5,X4=5,W4=6,V3=6,V4=5] 
* CE 461: start(V4,V3) = 1+ fun4fun8(W4,X4):7+ fun10(Y4,Z4):2
     [Z4=6,Y4=5,X4=5,W4=6,V3=6,V4=5] 
* CE 462: start(V4,V3) = 1+ fun4fun8(W4,X4):8+ fun10(Y4,Z4):2
     [Z4=7,Y4=6,X4=6,W4=6,V3=6,V4=5] 
* CE 463: start(V4,V3) = 1+ fun4fun8(W4,X4):9+ fun10(Y4,Z4):1
     [Z4=5,Y4=5,X4=5,W4=3,V3=3,V4=5] 
* CE 464: start(V4,V3) = 1+ fun4fun8(W4,X4):9+ fun10(Y4,Z4):2
     [Z4>=3,Z4=Y4+1,Z4=X4+1,Z4=W4+3,Z4=V3+3,V4=5] 
* CE 465: start(V4,V3) = 1+ fun4fun8(W4,X4):10+ fun10(Y4,Z4):1
     [Z4=5,Y4=5,X4=5,W4=4,V3=4,V4=5] 
* CE 466: start(V4,V3) = 1+ fun4fun8(W4,X4):10+ fun10(Y4,Z4):2
     [Z4>=2,Z4=Y4+1,Z4=X4+1,Z4=W4+2,Z4=V3+2,V4=5] 
* CE 467: start(V4,V3) = 1+ fun4fun8(V3,W4):11
     [W4>=1,V3>=0,V4=5] 
* CE 468: start(V4,V3) = 2+ fun13(W4,X4):1
     [X4=5,W4=5,V3=4,V4=5] 
* CE 469: start(V4,V3) = 2+ fun13(W4,X4):2
     [X4>=2,X4=W4+1,X4=V3+2,V4=5] 
* CE 470: start(V4,V3) = 2+ fun13(W4,X4):1
     [X4=5,W4=5,V3=3,V4=5] 
* CE 471: start(V4,V3) = 2+ fun13(W4,X4):2
     [X4=6,W4=5,V3=3,V4=5] 
* CE 472: start(V4,V3) = 2+ fun17(W4,X4):1+ fun15(Y4,Z4):1+ fun13(A5,B5):1
     [B5=5,A5=5,Z4=5,Y4=5,X4=5,W4=0,V3=0,V4=5] 
* CE 473: start(V4,V3) = 2+ fun17(W4,X4):1+ fun15(Y4,Z4):1+ fun13(A5,B5):2
     [B5=6,A5=5,Z4=5,Y4=5,X4=5,W4=0,V3=0,V4=5] 
* CE 474: start(V4,V3) = 2+ fun17(W4,X4):1+ fun15(Y4,Z4):2+ fun13(A5,B5):2
     [B5=7,A5=6,Z4=6,Y4=5,X4=5,W4=0,V3=0,V4=5] 
* CE 475: start(V4,V3) = 2+ fun17(W4,X4):2+ fun15(Y4,Z4):2+ fun13(A5,B5):2
     [B5=8,A5=7,Z4=7,Y4=6,X4=6,W4=0,V3=0,V4=5] 
* CE 476: start(V4,V3) = 2+ fun17(W4,X4):3+ fun15(Y4,Z4):1+ fun13(A5,B5):1
     [B5=5,A5=5,Z4=5,Y4=5,X4=5,W4=1,V3=1,V4=5] 
* CE 477: start(V4,V3) = 2+ fun17(W4,X4):3+ fun15(Y4,Z4):1+ fun13(A5,B5):2
     [B5=6,A5=5,Z4=5,Y4=5,X4=5,W4=1,V3=1,V4=5] 
* CE 478: start(V4,V3) = 2+ fun17(W4,X4):3+ fun15(Y4,Z4):2+ fun13(A5,B5):2
     [B5=7,A5=6,Z4=6,Y4=5,X4=5,W4=1,V3=1,V4=5] 
* CE 479: start(V4,V3) = 2+ fun17(W4,X4):4+ fun15(Y4,Z4):2+ fun13(A5,B5):2
     [B5=8,A5=7,Z4=7,Y4=6,X4=6,W4=1,V3=1,V4=5] 
* CE 480: start(V4,V3) = 2+ fun17(V3,W4):5+ fun15(X4,Y4):1+ fun13(Z4,A5):1
     [V3>=2,A5=5,Z4=5,Y4=5,X4=5,W4=5,V4=5] 
* CE 481: start(V4,V3) = 2+ fun17(V3,W4):5+ fun15(X4,Y4):1+ fun13(Z4,A5):2
     [V3>=2,A5=6,Z4=5,Y4=5,X4=5,W4=5,V4=5] 
* CE 482: start(V4,V3) = 2+ fun17(V3,W4):5+ fun15(X4,Y4):2+ fun13(Z4,A5):2
     [V3+7>=A5,A5>=7,V3>=2,A5=Z4+1,A5=Y4+1,A5=X4+2,A5=W4+2,V4=5] 
* CE 483: start(V4,V3) = 2+ fun17(W4,X4):6+ fun15(Y4,Z4):1+ fun13(A5,B5):1
     [B5=5,A5=5,Z4=5,Y4=5,X4=5,W4=4,V3=4,V4=5] 
* CE 484: start(V4,V3) = 2+ fun17(W4,X4):6+ fun15(Y4,Z4):1+ fun13(A5,B5):2
     [B5=6,A5=5,Z4=5,Y4=5,X4=5,W4=4,V3=4,V4=5] 
* CE 485: start(V4,V3) = 2+ fun17(W4,X4):6+ fun15(Y4,Z4):2+ fun13(A5,B5):1
     [B5=5,A5=5,Z4=5,Y4=4,X4=4,W4=3,V3=3,V4=5] 
* CE 486: start(V4,V3) = 2+ fun17(W4,X4):6+ fun15(Y4,Z4):2+ fun13(A5,B5):2
     [B5>=3,B5=A5+1,B5=Z4+1,B5=Y4+2,B5=X4+2,B5=W4+3,B5=V3+3,V4=5] 
* CE 487: start(V4,V3) = 2+ fun17(V3,W4):7+ fun15(X4,Y4):1+ fun13(Z4,A5):1
     [V3>=4,A5=5,Z4=5,Y4=5,X4=5,W4=5,V4=5] 
* CE 488: start(V4,V3) = 2+ fun17(V3,W4):7+ fun15(X4,Y4):1+ fun13(Z4,A5):2
     [V3>=4,A5=6,Z4=5,Y4=5,X4=5,W4=5,V4=5] 
* CE 489: start(V4,V3) = 2+ fun17(V3,W4):7+ fun15(X4,Y4):2+ fun13(Z4,A5):1
     [V3>=3,A5=5,Z4=5,Y4=5,X4=4,W4=4,V4=5] 
* CE 490: start(V4,V3) = 2+ fun17(V3,W4):7+ fun15(X4,Y4):2+ fun13(Z4,A5):2
     [V3+3>=A5,A5>=5,A5=Z4+1,A5=Y4+1,A5=X4+2,A5=W4+2,V4=5] 
* CE 491: start(V4,V3) = 2+ fun17(V3,W4):8+ fun15(X4,Y4):1+ fun13(Z4,A5):1
     [V3>=3,A5=5,Z4=5,Y4=5,X4=5,W4=5,V4=5] 
* CE 492: start(V4,V3) = 2+ fun17(V3,W4):8+ fun15(X4,Y4):1+ fun13(Z4,A5):2
     [V3>=3,A5=6,Z4=5,Y4=5,X4=5,W4=5,V4=5] 
* CE 493: start(V4,V3) = 2+ fun17(V3,W4):8+ fun15(X4,Y4):2+ fun13(Z4,A5):1
     [V3>=2,A5=5,Z4=5,Y4=5,X4=4,W4=4,V4=5] 
* CE 494: start(V4,V3) = 2+ fun17(V3,W4):8+ fun15(X4,Y4):2+ fun13(Z4,A5):2
     [V3+4>=A5,A5>=6,A5=Z4+1,A5=Y4+1,A5=X4+2,A5=W4+2,V4=5] 
* CE 495: start(V4,V3) = 2+ fun17(V3,W4):9+ fun15(X4,Y4):1+ fun13(Z4,A5):1
     [V3>=5,8>=V3,A5=5,Z4=5,Y4=5,X4=5,W4=5,V4=5] 
* CE 496: start(V4,V3) = 2+ fun17(V3,W4):9+ fun15(X4,Y4):1+ fun13(Z4,A5):2
     [V3>=5,8>=V3,A5=6,Z4=5,Y4=5,X4=5,W4=5,V4=5] 
* CE 497: start(V4,V3) = 2+ fun17(V3,W4):9+ fun15(X4,Y4):2+ fun13(Z4,A5):1
     [V3>=4,6>=V3,A5=5,Z4=5,Y4=5,X4=4,W4=4,V4=5] 
* CE 498: start(V4,V3) = 2+ fun17(V3,W4):9+ fun15(X4,Y4):2+ fun13(Z4,A5):2
     [V3+2>=A5,2*A5>=V3+6,A5=Z4+1,A5=Y4+1,A5=X4+2,A5=W4+2,V4=5] 
* CE 499: start(V4,V3) = 2+ fun17(W4,X4):10+ fun15(Y4,Z4):1+ fun13(A5,B5):1
     [B5=5,A5=5,Z4=5,Y4=5,X4=5,W4=8,V3=8,V4=5] 
* CE 500: start(V4,V3) = 2+ fun17(W4,X4):10+ fun15(Y4,Z4):1+ fun13(A5,B5):2
     [B5=6,A5=5,Z4=5,Y4=5,X4=5,W4=8,V3=8,V4=5] 
* CE 501: start(V4,V3) = 2+ fun17(W4,X4):10+ fun15(Y4,Z4):2+ fun13(A5,B5):2
     [B5=7,A5=6,Z4=6,Y4=5,X4=5,W4=8,V3=8,V4=5] 
* CE 502: start(V4,V3) = 2+ fun17(W4,X4):11+ fun15(Y4,Z4):2+ fun13(A5,B5):2
     [B5=8,A5=7,Z4=7,Y4=6,X4=6,W4=9,V3=9,V4=5] 
* CE 503: start(V4,V3) = 2+ fun17(W4,X4):12+ fun15(Y4,Z4):1+ fun13(A5,B5):1
     [B5=5,A5=5,Z4=5,Y4=5,X4=5,W4=10,V3=10,V4=5] 
* CE 504: start(V4,V3) = 2+ fun17(W4,X4):12+ fun15(Y4,Z4):1+ fun13(A5,B5):2
     [B5=6,A5=5,Z4=5,Y4=5,X4=5,W4=10,V3=10,V4=5] 
* CE 505: start(V4,V3) = 2+ fun17(W4,X4):12+ fun15(Y4,Z4):2+ fun13(A5,B5):2
     [B5=7,A5=6,Z4=6,Y4=5,X4=5,W4=10,V3=10,V4=5] 
* CE 506: start(V4,V3) = 2+ fun17(W4,X4):13+ fun15(Y4,Z4):2+ fun13(A5,B5):2
     [B5=8,A5=7,Z4=7,Y4=6,X4=6,W4=13,V3=13,V4=5] 
* CE 507: start(V4,V3) = 2+ fun17(W4,X4):14+ fun15(Y4,Z4):1+ fun13(A5,B5):1
     [B5=5,A5=5,Z4=5,Y4=5,X4=5,W4=14,V3=14,V4=5] 
* CE 508: start(V4,V3) = 2+ fun17(W4,X4):14+ fun15(Y4,Z4):1+ fun13(A5,B5):2
     [B5=6,A5=5,Z4=5,Y4=5,X4=5,W4=14,V3=14,V4=5] 
* CE 509: start(V4,V3) = 2+ fun17(W4,X4):14+ fun15(Y4,Z4):2+ fun13(A5,B5):2
     [B5=7,A5=6,Z4=6,Y4=5,X4=5,W4=14,V3=14,V4=5] 
* CE 510: start(V4,V3) = 2+ fun17(W4,X4):15+ fun15(Y4,Z4):2+ fun13(A5,B5):2
     [B5=8,A5=7,Z4=7,Y4=6,X4=6,W4=17,V3=17,V4=5] 
* CE 511: start(V4,V3) = 2+ fun17(W4,X4):16+ fun15(Y4,Z4):1+ fun13(A5,B5):1
     [B5=5,A5=5,Z4=5,Y4=5,X4=5,W4=18,V3=18,V4=5] 
* CE 512: start(V4,V3) = 2+ fun17(W4,X4):16+ fun15(Y4,Z4):1+ fun13(A5,B5):2
     [B5=6,A5=5,Z4=5,Y4=5,X4=5,W4=18,V3=18,V4=5] 
* CE 513: start(V4,V3) = 2+ fun17(W4,X4):16+ fun15(Y4,Z4):2+ fun13(A5,B5):2
     [B5=7,A5=6,Z4=6,Y4=5,X4=5,W4=18,V3=18,V4=5] 
* CE 514: start(V4,V3) = 2+ fun17(W4,X4):17+ fun15(Y4,Z4):2+ fun13(A5,B5):2
     [B5>=8,B5=A5+1,B5=Z4+1,B5=Y4+2,B5=X4+2,B5=W4+6,B5=V3+6,V4=5] 
* CE 515: start(V4,V3) = 2+ fun17(W4,X4):18+ fun15(Y4,Z4):1+ fun13(A5,B5):1
     [B5=5,A5=5,Z4=5,Y4=5,X4=5,W4=3,V3=3,V4=5] 
* CE 516: start(V4,V3) = 2+ fun17(W4,X4):18+ fun15(Y4,Z4):1+ fun13(A5,B5):2
     [B5=6,A5=5,Z4=5,Y4=5,X4=5,W4=3,V3=3,V4=5] 
* CE 517: start(V4,V3) = 2+ fun17(W4,X4):18+ fun15(Y4,Z4):2+ fun13(A5,B5):1
     [B5=5,A5=5,Z4=5,Y4=4,X4=4,W4=2,V3=2,V4=5] 
* CE 518: start(V4,V3) = 2+ fun17(W4,X4):18+ fun15(Y4,Z4):2+ fun13(A5,B5):2
     [B5>=4,B5=A5+1,B5=Z4+1,B5=Y4+2,B5=X4+2,B5=W4+4,B5=V3+4,V4=5] 
* CE 519: start(V4,V3) = 2+ fun17(W4,X4):19+ fun15(Y4,Z4):1+ fun13(A5,B5):1
     [B5=5,A5=5,Z4=5,Y4=5,X4=5,W4=7,V3=7,V4=5] 
* CE 520: start(V4,V3) = 2+ fun17(W4,X4):19+ fun15(Y4,Z4):1+ fun13(A5,B5):2
     [B5=6,A5=5,Z4=5,Y4=5,X4=5,W4=7,V3=7,V4=5] 
* CE 521: start(V4,V3) = 2+ fun17(W4,X4):19+ fun15(Y4,Z4):2+ fun13(A5,B5):1
     [B5=5,A5=5,Z4=5,Y4=4,X4=4,W4=6,V3=6,V4=5] 
* CE 522: start(V4,V3) = 2+ fun17(V3,W4):19+ fun15(X4,Y4):2+ fun13(Z4,V3):2
     [V3>=4,V3=Z4+1,V3=Y4+1,V3=X4+2,V3=W4+2,V4=5] 
* CE 523: start(V4,V3) = 2+ fun17(W4,X4):20+ fun15(Y4,Z4):1+ fun13(A5,B5):1
     [B5=5,A5=5,Z4=5,Y4=5,X4=5,W4=9,V3=9,V4=5] 
* CE 524: start(V4,V3) = 2+ fun17(W4,X4):20+ fun15(Y4,Z4):1+ fun13(A5,B5):2
     [B5=6,A5=5,Z4=5,Y4=5,X4=5,W4=9,V3=9,V4=5] 
* CE 525: start(V4,V3) = 2+ fun17(W4,X4):20+ fun15(Y4,Z4):2+ fun13(A5,B5):1
     [B5=5,A5=5,Z4=5,Y4=4,X4=4,W4=8,V3=8,V4=5] 
* CE 526: start(V4,V3) = 2+ fun17(W4,X4):20+ fun15(Y4,Z4):2+ fun13(A5,B5):2
     [B5>=4,B5=A5+1,B5=Z4+1,B5=Y4+2,B5=X4+2,B5+2=W4,B5+2=V3,V4=5] 
* CE 527: start(V4,V3) = 2+ fun17(W4,X4):21+ fun15(Y4,Z4):1+ fun13(A5,B5):1
     [B5=5,A5=5,Z4=5,Y4=5,X4=5,W4=13,V3=13,V4=5] 
* CE 528: start(V4,V3) = 2+ fun17(W4,X4):21+ fun15(Y4,Z4):1+ fun13(A5,B5):2
     [B5=6,A5=5,Z4=5,Y4=5,X4=5,W4=13,V3=13,V4=5] 
* CE 529: start(V4,V3) = 2+ fun17(W4,X4):21+ fun15(Y4,Z4):2+ fun13(A5,B5):1
     [B5=5,A5=5,Z4=5,Y4=4,X4=4,W4=12,V3=12,V4=5] 
* CE 530: start(V4,V3) = 2+ fun17(W4,X4):21+ fun15(Y4,Z4):2+ fun13(A5,B5):2
     [B5>=4,B5=A5+1,B5=Z4+1,B5=Y4+2,B5=X4+2,B5+6=W4,B5+6=V3,V4=5] 
* CE 531: start(V4,V3) = 2+ fun17(W4,X4):22+ fun15(Y4,Z4):1+ fun13(A5,B5):1
     [B5=5,A5=5,Z4=5,Y4=5,X4=5,W4=17,V3=17,V4=5] 
* CE 532: start(V4,V3) = 2+ fun17(W4,X4):22+ fun15(Y4,Z4):1+ fun13(A5,B5):2
     [B5=6,A5=5,Z4=5,Y4=5,X4=5,W4=17,V3=17,V4=5] 
* CE 533: start(V4,V3) = 2+ fun17(W4,X4):22+ fun15(Y4,Z4):2+ fun13(A5,B5):1
     [B5=5,A5=5,Z4=5,Y4=4,X4=4,W4=16,V3=16,V4=5] 
* CE 534: start(V4,V3) = 2+ fun17(W4,X4):22+ fun15(Y4,Z4):2+ fun13(A5,B5):2
     [B5>=4,B5=A5+1,B5=Z4+1,B5=Y4+2,B5=X4+2,B5+10=W4,B5+10=V3,V4=5] 
* CE 535: start(V4,V3) = 2+ fun17(V3,W4):23+ fun15(X4,Y4):2+ fun13(Z4,A5):2
     [V3+8>=A5,7*A5>=V3+56,A5>=10,A5=Z4+1,A5=Y4+1,A5=X4+2,A5=W4+2,V4=5] 
* CE 536: start(V4,V3) = 1+ fun17(W4,X4):1+ fun15(Y4,Z4):1
     [Z4=5,Y4=5,X4=5,W4=0,V4=0] 
* CE 537: start(V4,V3) = 1+ fun17(W4,X4):1+ fun15(Y4,Z4):2
     [Z4=6,Y4=5,X4=5,W4=0,V4=0] 
* CE 538: start(V4,V3) = 1+ fun17(W4,X4):2+ fun15(Y4,Z4):2
     [Z4=7,Y4=6,X4=6,W4=0,V4=0] 
* CE 539: start(V4,V3) = 1+ fun17(W4,X4):3+ fun15(Y4,Z4):1
     [Z4=5,Y4=5,X4=5,W4=1,V4=1] 
* CE 540: start(V4,V3) = 1+ fun17(W4,X4):3+ fun15(Y4,Z4):2
     [Z4=6,Y4=5,X4=5,W4=1,V4=1] 
* CE 541: start(V4,V3) = 1+ fun17(W4,X4):4+ fun15(Y4,Z4):2
     [Z4=7,Y4=6,X4=6,W4=1,V4=1] 
* CE 542: start(V4,V3) = 1+ fun17(V4,W4):5+ fun15(X4,Y4):1
     [V4>=2,Y4=5,X4=5,W4=5] 
* CE 543: start(V4,V3) = 1+ fun17(V4,W4):5+ fun15(X4,Y4):2
     [V4+6>=Y4,Y4>=6,V4>=2,Y4=X4+1,Y4=W4+1] 
* CE 544: start(V4,V3) = 1+ fun17(W4,X4):6+ fun15(Y4,Z4):1
     [Z4=5,Y4=5,X4=5,W4=4,V4=4] 
* CE 545: start(V4,V3) = 1+ fun17(W4,X4):6+ fun15(Y4,Z4):2
     [Z4>=2,Z4=Y4+1,Z4=X4+1,Z4=W4+2,Z4=V4+2] 
* CE 546: start(V4,V3) = 1+ fun17(V4,W4):7+ fun15(X4,Y4):1
     [V4>=4,Y4=5,X4=5,W4=5] 
* CE 547: start(V4,V3) = 1+ fun17(V4,W4):7+ fun15(X4,Y4):2
     [V4+2>=Y4,Y4>=4,Y4=X4+1,Y4=W4+1] 
* CE 548: start(V4,V3) = 1+ fun17(V4,W4):8+ fun15(X4,Y4):1
     [V4>=3,Y4=5,X4=5,W4=5] 
* CE 549: start(V4,V3) = 1+ fun17(V4,W4):8+ fun15(X4,Y4):2
     [V4+3>=Y4,Y4>=5,Y4=X4+1,Y4=W4+1] 
* CE 550: start(V4,V3) = 1+ fun17(V4,W4):9+ fun15(X4,Y4):1
     [V4>=5,8>=V4,Y4=5,X4=5,W4=5] 
* CE 551: start(V4,V3) = 1+ fun17(V4,W4):9+ fun15(X4,Y4):2
     [V4+1>=Y4,2*Y4>=V4+4,Y4=X4+1,Y4=W4+1] 
* CE 552: start(V4,V3) = 1+ fun17(W4,X4):10+ fun15(Y4,Z4):1
     [Z4=5,Y4=5,X4=5,W4=8,V4=8] 
* CE 553: start(V4,V3) = 1+ fun17(W4,X4):10+ fun15(Y4,Z4):2
     [Z4=6,Y4=5,X4=5,W4=8,V4=8] 
* CE 554: start(V4,V3) = 1+ fun17(W4,X4):11+ fun15(Y4,Z4):2
     [Z4=7,Y4=6,X4=6,W4=9,V4=9] 
* CE 555: start(V4,V3) = 1+ fun17(W4,X4):12+ fun15(Y4,Z4):1
     [Z4=5,Y4=5,X4=5,W4=10,V4=10] 
* CE 556: start(V4,V3) = 1+ fun17(W4,X4):12+ fun15(Y4,Z4):2
     [Z4=6,Y4=5,X4=5,W4=10,V4=10] 
* CE 557: start(V4,V3) = 1+ fun17(W4,X4):13+ fun15(Y4,Z4):2
     [Z4=7,Y4=6,X4=6,W4=13,V4=13] 
* CE 558: start(V4,V3) = 1+ fun17(W4,X4):14+ fun15(Y4,Z4):1
     [Z4=5,Y4=5,X4=5,W4=14,V4=14] 
* CE 559: start(V4,V3) = 1+ fun17(W4,X4):14+ fun15(Y4,Z4):2
     [Z4=6,Y4=5,X4=5,W4=14,V4=14] 
* CE 560: start(V4,V3) = 1+ fun17(W4,X4):15+ fun15(Y4,Z4):2
     [Z4=7,Y4=6,X4=6,W4=17,V4=17] 
* CE 561: start(V4,V3) = 1+ fun17(W4,X4):16+ fun15(Y4,Z4):1
     [Z4=5,Y4=5,X4=5,W4=18,V4=18] 
* CE 562: start(V4,V3) = 1+ fun17(W4,X4):16+ fun15(Y4,Z4):2
     [Z4=6,Y4=5,X4=5,W4=18,V4=18] 
* CE 563: start(V4,V3) = 1+ fun17(W4,X4):17+ fun15(Y4,Z4):2
     [Z4>=7,Z4=Y4+1,Z4=X4+1,Z4=W4+5,Z4=V4+5] 
* CE 564: start(V4,V3) = 1+ fun17(W4,X4):18+ fun15(Y4,Z4):1
     [Z4=5,Y4=5,X4=5,W4=3,V4=3] 
* CE 565: start(V4,V3) = 1+ fun17(W4,X4):18+ fun15(Y4,Z4):2
     [Z4>=3,Z4=Y4+1,Z4=X4+1,Z4=W4+3,Z4=V4+3] 
* CE 566: start(V4,V3) = 1+ fun17(W4,X4):19+ fun15(Y4,Z4):1
     [Z4=5,Y4=5,X4=5,W4=7,V4=7] 
* CE 567: start(V4,V3) = 1+ fun17(W4,X4):19+ fun15(Y4,Z4):2
     [Z4>=3,Z4=Y4+1,Z4=X4+1,Z4+1=W4,Z4+1=V4] 
* CE 568: start(V4,V3) = 1+ fun17(W4,X4):20+ fun15(Y4,Z4):1
     [Z4=5,Y4=5,X4=5,W4=9,V4=9] 
* CE 569: start(V4,V3) = 1+ fun17(W4,X4):20+ fun15(Y4,Z4):2
     [Z4>=3,Z4=Y4+1,Z4=X4+1,Z4+3=W4,Z4+3=V4] 
* CE 570: start(V4,V3) = 1+ fun17(W4,X4):21+ fun15(Y4,Z4):1
     [Z4=5,Y4=5,X4=5,W4=13,V4=13] 
* CE 571: start(V4,V3) = 1+ fun17(W4,X4):21+ fun15(Y4,Z4):2
     [Z4>=3,Z4=Y4+1,Z4=X4+1,Z4+7=W4,Z4+7=V4] 
* CE 572: start(V4,V3) = 1+ fun17(W4,X4):22+ fun15(Y4,Z4):1
     [Z4=5,Y4=5,X4=5,W4=17,V4=17] 
* CE 573: start(V4,V3) = 1+ fun17(W4,X4):22+ fun15(Y4,Z4):2
     [Z4>=3,Z4=Y4+1,Z4=X4+1,Z4+11=W4,Z4+11=V4] 
* CE 574: start(V4,V3) = 1+ fun17(V4,W4):23+ fun15(X4,Y4):2
     [V4+7>=Y4,7*Y4>=V4+49,Y4>=9,Y4=X4+1,Y4=W4+1] 
* CE 575: start(V4,V3) = 0+ funmark(W4,X4,Y4):1
     [Y4=0,W4=0,V4=0] 
* CE 576: start(V4,V3) = 0+ funmark(W4,X4,Y4):2
     [Y4=5,W4=1,V4=1] 
* CE 577: start(V4,V3) = 0+ funmark(W4,X4,Y4):3
     [Y4=6,W4=1,V4=1] 
* CE 578: start(V4,V3) = 0+ funmark(W4,X4,Y4):4
     [Y4=7,W4=1,V4=1] 
* CE 579: start(V4,V3) = 0+ funmark(V4,W4,V4):5
     [V4>=1] 
* CE 580: start(V4,V3) = 0+ funmark(W4,X4,Y4):6
     [Y4=5,W4=2,V4=2] 
* CE 581: start(V4,V3) = 0+ funmark(W4,X4,Y4):7
     [Y4=6,W4=2,V4=2] 
* CE 582: start(V4,V3) = 0+ funmark(W4,X4,Y4):8
     [Y4=7,W4=2,V4=2] 
* CE 583: start(V4,V3) = 0+ funmark(V4,W4,X4):9
     [V4+4>=X4,X4>=5,V4>=3] 
* CE 584: start(V4,V3) = 0+ funmark(V4,W4,X4):10
     [V4+5>=X4,X4>=6,V4>=3] 
* CE 585: start(V4,V3) = 0+ funmark(V4,W4,X4):11
     [V4>=X4,X4>=3] 
* CE 586: start(V4,V3) = 0+ funmark(W4,X4,Y4):12
     [Y4>=2,Y4+3=W4,Y4+3=V4] 
* CE 587: start(V4,V3) = 0+ funmark(W4,X4,Y4):13
     [Y4>=3,Y4+4=W4,Y4+4=V4] 
* CE 588: start(V4,V3) = 0+ funmark(V4,W4,X4):14
     [V4+1>=X4,X4>=4] 
* CE 589: start(V4,V3) = 0+ funmark(W4,X4,Y4):15
     [Y4=5,W4=11,V4=11] 
* CE 590: start(V4,V3) = 0+ funmark(W4,X4,Y4):16
     [Y4>=2,Y4+5=W4,Y4+5=V4] 
* CE 591: start(V4,V3) = 0+ funmark(W4,X4,Y4):17
     [Y4=7,W4=14,V4=14] 
* CE 592: start(V4,V3) = 0+ funmark(W4,X4,Y4):18
     [Y4=5,W4=15,V4=15] 
* CE 593: start(V4,V3) = 0+ funmark(W4,X4,Y4):19
     [Y4>=2,Y4+9=W4,Y4+9=V4] 
* CE 594: start(V4,V3) = 0+ funmark(W4,X4,Y4):20
     [Y4=7,W4=18,V4=18] 
* CE 595: start(V4,V3) = 0+ funmark(W4,X4,Y4):21
     [Y4=5,W4=19,V4=19] 
* CE 596: start(V4,V3) = 0+ funmark(W4,X4,Y4):22
     [Y4>=2,Y4+13=W4,Y4+13=V4] 
* CE 597: start(V4,V3) = 0+ funmark(W4,X4,Y4):23
     [Y4>=7,Y4=W4+4,Y4=V4+4] 
* CE 598: start(V4,V3) = 0+ funmark(W4,X4,Y4):24
     [Y4>=3,Y4=W4+2,Y4=V4+2] 
* CE 599: start(V4,V3) = 0+ funmark(W4,X4,Y4):25
     [Y4>=2,Y4=W4+1,Y4=V4+1] 
* CE 600: start(V4,V3) = 0+ funmark(V4,W4,X4):26
     [V4>=X4+1,2*X4>=V4+1] 
* CE 601: start(V4,V3) = 0+ funmark(W4,X4,Y4):27
     [Y4>=3,Y4+8=W4,Y4+8=V4] 
* CE 602: start(V4,V3) = 0+ funmark(W4,X4,Y4):28
     [Y4>=3,Y4+12=W4,Y4+12=V4] 
* CE 603: start(V4,V3) = 0+ funmark(V4,W4,X4):29
     [X4>=V4+1,V4>=0,X4=V4+W4+1] 
* CE 604: start(V4,V3) = 0+ funmark(V4,W4,X4):30
     [V4+6>=X4,7*X4>=V4+48,X4>=9] 
* CE 605: start(V4,V3) = 0+ funmark(V4,W4,X4):31
     [V4>=0] 
* CE 606: start(V4,V3) = 0+ funmark(V4,W4,X4):32
     [V4>=1] 
* CE 607: start(V4,V3) = 0+ fun1(W4,X4):1
     [X4=5,W4=5,V4=5] 
* CE 608: start(V4,V3) = 0+ fun1(W4,X4):2
     [X4>=1,X4=W4+1,X4=V4+1] 
* CE 609: start(V4,V3) = 0+ fun3(W4,X4):1
     [X4=5,W4=5,V4=5] 
* CE 610: start(V4,V3) = 0+ fun3(W4,X4):2
     [X4>=1,X4=W4+1,X4=V4+1] 
* CE 611: start(V4,V3) = 0+ fun5(W4,X4):1
     [X4=5,W4=5,V4=5] 
* CE 612: start(V4,V3) = 0+ fun5(W4,X4):2
     [X4>=1,X4=W4+1,X4=V4+1] 
* CE 613: start(V4,V3) = 0+ fun7(W4,X4):1
     [X4=5,W4=5,V4=5] 
* CE 614: start(V4,V3) = 0+ fun7(W4,X4):2
     [X4>=1,X4=W4+1,X4=V4+1] 
* CE 615: start(V4,V3) = 0+ fun10(W4,X4):1
     [X4=5,W4=5,V4=5] 
* CE 616: start(V4,V3) = 0+ fun10(W4,X4):2
     [X4>=1,X4=W4+1,X4=V4+1] 
* CE 617: start(V4,V3) = 0+ fun11(W4,X4):1
     [X4=5,W4=5,V4=5] 
* CE 618: start(V4,V3) = 0+ fun11(W4,X4):2
     [X4>=1,X4=W4+1,X4=V4+1] 
* CE 619: start(V4,V3) = 0+ fun13(W4,X4):1
     [X4=5,W4=5,V4=5] 
* CE 620: start(V4,V3) = 0+ fun13(W4,X4):2
     [X4>=1,X4=W4+1,X4=V4+1] 
* CE 621: start(V4,V3) = 0+ fun15(W4,X4):1
     [X4=5,W4=5,V4=5] 
* CE 622: start(V4,V3) = 0+ fun15(W4,X4):2
     [X4>=1,X4=W4+1,X4=V4+1] 
* CE 623: start(V4,V3) = 0+ fun4fun8(W4,X4):1
     [X4=5,W4=0,V4=0] 
* CE 624: start(V4,V3) = 0+ fun4fun8(W4,X4):2
     [X4=6,W4=0,V4=0] 
* CE 625: start(V4,V3) = 0+ fun4fun8(W4,X4):3
     [X4=5,W4=1,V4=1] 
* CE 626: start(V4,V3) = 0+ fun4fun8(W4,X4):4
     [X4=6,W4=1,V4=1] 
* CE 627: start(V4,V3) = 0+ fun4fun8(W4,X4):5
     [X4=5,W4=2,V4=2] 
* CE 628: start(V4,V3) = 0+ fun4fun8(W4,X4):6
     [X4=6,W4=2,V4=2] 
* CE 629: start(V4,V3) = 0+ fun4fun8(W4,X4):7
     [X4=5,W4=6,V4=6] 
* CE 630: start(V4,V3) = 0+ fun4fun8(W4,X4):8
     [X4=6,W4=6,V4=6] 
* CE 631: start(V4,V3) = 0+ fun4fun8(W4,X4):9
     [X4>=2,X4=W4+2,X4=V4+2] 
* CE 632: start(V4,V3) = 0+ fun4fun8(W4,X4):10
     [X4>=1,X4=W4+1,X4=V4+1] 
* CE 633: start(V4,V3) = 0+ fun4fun8(V4,W4):11
     [W4>=1,V4>=0] 
* CE 634: start(V4,V3) = 0+ fun17(W4,X4):1
     [X4=5,W4=0,V4=0] 
* CE 635: start(V4,V3) = 0+ fun17(W4,X4):2
     [X4=6,W4=0,V4=0] 
* CE 636: start(V4,V3) = 0+ fun17(W4,X4):3
     [X4=5,W4=1,V4=1] 
* CE 637: start(V4,V3) = 0+ fun17(W4,X4):4
     [X4=6,W4=1,V4=1] 
* CE 638: start(V4,V3) = 0+ fun17(V4,W4):5
     [V4+5>=W4,W4>=5,V4>=2] 
* CE 639: start(V4,V3) = 0+ fun17(W4,X4):6
     [X4>=1,X4=W4+1,X4=V4+1] 
* CE 640: start(V4,V3) = 0+ fun17(V4,W4):7
     [V4+1>=W4,W4>=3] 
* CE 641: start(V4,V3) = 0+ fun17(V4,W4):8
     [V4+2>=W4,W4>=4] 
* CE 642: start(V4,V3) = 0+ fun17(V4,W4):9
     [V4>=W4,2*W4>=V4+2] 
* CE 643: start(V4,V3) = 0+ fun17(W4,X4):10
     [X4=5,W4=8,V4=8] 
* CE 644: start(V4,V3) = 0+ fun17(W4,X4):11
     [X4=6,W4=9,V4=9] 
* CE 645: start(V4,V3) = 0+ fun17(W4,X4):12
     [X4=5,W4=10,V4=10] 
* CE 646: start(V4,V3) = 0+ fun17(W4,X4):13
     [X4=6,W4=13,V4=13] 
* CE 647: start(V4,V3) = 0+ fun17(W4,X4):14
     [X4=5,W4=14,V4=14] 
* CE 648: start(V4,V3) = 0+ fun17(W4,X4):15
     [X4=6,W4=17,V4=17] 
* CE 649: start(V4,V3) = 0+ fun17(W4,X4):16
     [X4=5,W4=18,V4=18] 
* CE 650: start(V4,V3) = 0+ fun17(W4,X4):17
     [X4>=6,X4=W4+4,X4=V4+4] 
* CE 651: start(V4,V3) = 0+ fun17(W4,X4):18
     [X4>=2,X4=W4+2,X4=V4+2] 
* CE 652: start(V4,V3) = 0+ fun17(W4,X4):19
     [X4>=2,X4+2=W4,X4+2=V4] 
* CE 653: start(V4,V3) = 0+ fun17(W4,X4):20
     [X4>=2,X4+4=W4,X4+4=V4] 
* CE 654: start(V4,V3) = 0+ fun17(W4,X4):21
     [X4>=2,X4+8=W4,X4+8=V4] 
* CE 655: start(V4,V3) = 0+ fun17(W4,X4):22
     [X4>=2,X4+12=W4,X4+12=V4] 
* CE 656: start(V4,V3) = 0+ fun17(V4,W4):23
     [V4+6>=W4,7*W4>=V4+42,W4>=8] 
* CE 657: start(V4,V3) = 0+ fun16(W4,X4):1
     [X4=5,W4=0,V4=0] 
* CE 658: start(V4,V3) = 0+ fun16(W4,X4):2
     [X4=5,W4=1,V4=1] 
* CE 659: start(V4,V3) = 0+ fun16(W4,X4):3
     [X4=5,W4=2,V4=2] 
* CE 660: start(V4,V3) = 0+ fun16(W4,X4):4
     [X4=5,W4=6,V4=6] 
* CE 661: start(V4,V3) = 0+ fun16(W4,X4):5
     [X4>=1,X4=W4+1,X4=V4+1] 

### Cost equations --> "Loop" of start/2 
* CEs [595] --> Loop 219 
* CEs [561,562,594,649] --> Loop 220 
* CEs [560,572,648] --> Loop 221 
* CEs [592] --> Loop 222 
* CEs [558,559,591,647] --> Loop 223 
* CEs [557,570,646] --> Loop 224 
* CEs [589] --> Loop 225 
* CEs [555,556,645] --> Loop 226 
* CEs [554,568,644] --> Loop 227 
* CEs [552,553,643] --> Loop 228 
* CEs [566] --> Loop 229 
* CEs [629,630,660] --> Loop 230 
* CEs [417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487,488,489,490,491,492,493,494,495,496,497,498,499,500,501,502,503,504,505,506,507,508,509,510,511,512,513,514,515,516,517,518,519,520,521,522,523,524,525,526,527,528,529,530,531,532,533,534,535,550,607,609,611,613,615,617,619,621] --> Loop 231 
* CEs [544] --> Loop 232 
* CEs [564] --> Loop 233 
* CEs [580,581,582,627,628,659] --> Loop 234 
* CEs [539,540,541,576,577,578,625,626,636,637,658] --> Loop 235 
* CEs [416,536,537,538,542,543,545,546,547,548,549,551,563,565,567,569,571,573,574,575,579,583,584,585,586,587,588,590,593,596,597,598,599,600,601,602,603,604,608,610,612,614,616,618,620,622,623,624,631,632,634,635,638,639,640,641,642,650,651,652,653,654,655,656,657,661] --> Loop 236 
* CEs [433,450,467,605,606,633] --> Loop 237 

#### Loops of start/2 
* Loop 219: start(V4,V3) [V4=19] 
* Loop 220: start(V4,V3) [V4=18] 
* Loop 221: start(V4,V3) [V4=17] 
* Loop 222: start(V4,V3) [V4=15] 
* Loop 223: start(V4,V3) [V4=14] 
* Loop 224: start(V4,V3) [V4=13] 
* Loop 225: start(V4,V3) [V4=11] 
* Loop 226: start(V4,V3) [V4=10] 
* Loop 227: start(V4,V3) [V4=9] 
* Loop 228: start(V4,V3) [V4=8] 
* Loop 229: start(V4,V3) [V4=7] 
* Loop 230: start(V4,V3) [V4=6] 
* Loop 231: start(V4,V3) [V4>=5,8>=V4] 
* Loop 232: start(V4,V3) [V4=4] 
* Loop 233: start(V4,V3) [V4=3] 
* Loop 234: start(V4,V3) [V4=2] 
* Loop 235: start(V4,V3) [V4=1] 
* Loop 236: start(V4,V3) [V4>=0] 
* Loop 237: start(V4,V3) [V4>=0] 

### Ranking functions of CR start(V4,V3) 

#### Partial ranking functions of CR start(V4,V3) 


### Resulting Chains:start(V4,V3) 
* [237]...
* [236]
* [235]
* [234]
* [233]
* [232]
* [231]
* [230]
* [229]
* [228]
* [227]
* [226]
* [225]
* [224]
* [223]
* [222]
* [221]
* [220]
* [219]


### Merging Chains  start/2 into  External patterns of execution 
* [[235],[236]] --> 1 
* [[234]] --> 2 
* [[233]] --> 3 
* [[232]] --> 4 
* [[230],[231]] --> 5 
* [[229]] --> 6 
* [[228]] --> 7 
* [[227]] --> 8 
* [[226]] --> 9 
* [[225]] --> 10 
* [[224]] --> 11 
* [[223]] --> 12 
* [[222]] --> 13 
* [[221]] --> 14 
* [[220]] --> 15 
* [[219]] --> 16 
* [[237]] --> 17 


Computing Bounds
=====================================

#### Cost of chains of fun1(V4,Out):
* Chain [47]: 1
  with precondition: [V4=5,Out=5] 

* Chain [46]: 1
  with precondition: [V4+1=Out,V4>=0] 


#### Cost of chains of fun10(V4,Out):
* Chain [49]: 1
  with precondition: [V4=5,Out=5] 

* Chain [48]: 1
  with precondition: [V4+1=Out,V4>=0] 


#### Cost of chains of fun11(V4,Out):
* Chain [51]: 1
  with precondition: [V4=5,Out=5] 

* Chain [50]: 1
  with precondition: [V4+1=Out,V4>=0] 


#### Cost of chains of fun13(V4,Out):
* Chain [53]: 1
  with precondition: [V4=5,Out=5] 

* Chain [52]: 1
  with precondition: [V4+1=Out,V4>=0] 


#### Cost of chains of fun15(V4,Out):
* Chain [55]: 1
  with precondition: [V4=5,Out=5] 

* Chain [54]: 1
  with precondition: [V4+1=Out,V4>=0] 


#### Cost of chains of fun16(V4,Out):
* Chain [60]: 1
  with precondition: [V4=0,Out=5] 

* Chain [59]: 1
  with precondition: [V4=1,Out=5] 

* Chain [58]: 1
  with precondition: [V4=2,Out=5] 

* Chain [57]: 1
  with precondition: [V4=6,Out=5] 

* Chain [56]: 1
  with precondition: [V4+1=Out,V4>=0] 


#### Cost of loops [61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80] 

 * loop 61:fun17(V4,Out) -> [fun17(V4',Out')] 
6
 * loop 62:fun17(V4,Out) -> [fun17(V4',Out')] 
6
 * loop 63:fun17(V4,Out) -> [fun17(V4',Out')] 
6
 * loop 64:fun17(V4,Out) -> [fun17(V4',Out')] 
6
 * loop 65:fun17(V4,Out) -> [fun17(V4',Out')] 
6
 * loop 66:fun17(V4,Out) -> [fun17(V4',Out')] 
6
 * loop 67:fun17(V4,Out) -> [fun17(V4',Out')] 
6
 * loop 68:fun17(V4,Out) -> [fun17(V4',Out')] 
6
 * loop 69:fun17(V4,Out) -> [fun17(V4',Out')] 
6
 * loop 70:fun17(V4,Out) -> [fun17(V4',Out')] 
6
 * loop 71:fun17(V4,Out) -> [fun17(V4',Out')] 
6
 * loop 72:fun17(V4,Out) -> [fun17(V4',Out')] 
6
 * loop 73:fun17(V4,Out) -> [fun17(V4',Out')] 
6
 * loop 74:fun17(V4,Out) -> [fun17(V4',Out')] 
6
 * loop 75:fun17(V4,Out) -> [fun17(V4',Out')] 
6
 * loop 76:fun17(V4,Out) -> [fun17(V4',Out')] 
6
 * loop 77:fun17(V4,Out) -> [fun17(V4',Out')] 
6
 * loop 78:fun17(V4,Out) -> [fun17(V4',Out')] 
6
 * loop 79:fun17(V4,Out) -> [fun17(V4',Out')] 
6
 * loop 80:fun17(V4,Out) -> [fun17(V4',Out')] 
6
#### Cost of phase [61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80]:fun17(V4,Out) -> [fun17(V4',Out')] 
120*it(61)+0
  Such that:aux(1) =< V4
aux(2) =< V4-V4'
it(61) =< aux(1)
it(61) =< aux(2)

#### Cost of phase [61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80]:fun17(V4,Out) -> [fun17(V4',Out')] 
120*it(61)+0
  Such that:aux(1) =< V4
aux(2) =< V4-V4'
it(61) =< aux(1)
it(61) =< aux(2)

#### Cost of phase [61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80]:fun17(V4,Out) -> [fun17(V4',Out')] 
120*it(61)+0
  Such that:aux(1) =< V4
aux(2) =< V4-V4'
it(61) =< aux(1)
it(61) =< aux(2)

#### Cost of phase [61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80]:fun17(V4,Out) -> [fun17(V4',Out')] 
120*it(61)+0
  Such that:aux(1) =< V4
aux(2) =< V4-V4'
it(61) =< aux(1)
it(61) =< aux(2)

#### Cost of phase [61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80]:fun17(V4,Out) -> [fun17(V4',Out')] 
120*it(61)+0
  Such that:aux(1) =< V4
aux(2) =< V4-V4'
it(61) =< aux(1)
it(61) =< aux(2)

#### Cost of phase [61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80]:fun17(V4,Out) -> [fun17(V4',Out')] 
120*it(61)+0
  Such that:aux(1) =< V4
aux(2) =< V4-V4'
it(61) =< aux(1)
it(61) =< aux(2)

#### Cost of phase [61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80]:fun17(V4,Out) -> [fun17(V4',Out')] 
120*it(61)+0
  Such that:aux(1) =< V4
aux(2) =< V4-V4'
it(61) =< aux(1)
it(61) =< aux(2)

#### Cost of phase [61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80]:fun17(V4,Out) -> [fun17(V4',Out')] 
120*it(61)+0
  Such that:aux(1) =< V4
aux(2) =< V4-V4'
it(61) =< aux(1)
it(61) =< aux(2)

#### Cost of phase [61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80]:fun17(V4,Out) -> [fun17(V4',Out')] 
120*it(61)+0
  Such that:aux(1) =< V4
aux(2) =< V4-V4'
it(61) =< aux(1)
it(61) =< aux(2)

#### Cost of phase [61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80]:fun17(V4,Out) -> [fun17(V4',Out')] 
120*it(61)+0
  Such that:aux(1) =< V4
aux(2) =< V4-V4'
it(61) =< aux(1)
it(61) =< aux(2)

#### Cost of phase [61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80]:fun17(V4,Out) -> [fun17(V4',Out')] 
120*it(61)+0
  Such that:aux(1) =< V4
aux(2) =< V4-V4'
it(61) =< aux(1)
it(61) =< aux(2)

#### Cost of phase [61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80]:fun17(V4,Out) -> [fun17(V4',Out')] 
120*it(61)+0
  Such that:aux(1) =< V4
aux(2) =< V4-V4'
it(61) =< aux(1)
it(61) =< aux(2)

#### Cost of phase [61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80]:fun17(V4,Out) -> [fun17(V4',Out')] 
120*it(61)+0
  Such that:aux(1) =< V4
aux(2) =< V4-V4'
it(61) =< aux(1)
it(61) =< aux(2)

#### Cost of phase [61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80]:fun17(V4,Out) -> [fun17(V4',Out')] 
120*it(61)+0
  Such that:aux(1) =< V4
aux(2) =< V4-V4'
it(61) =< aux(1)
it(61) =< aux(2)

#### Cost of phase [61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80]:fun17(V4,Out) -> [fun17(V4',Out')] 
120*it(61)+0
  Such that:aux(1) =< V4
aux(2) =< V4-V4'
it(61) =< aux(1)
it(61) =< aux(2)

#### Cost of phase [61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80]:fun17(V4,Out) -> [fun17(V4',Out')] 
120*it(61)+0
  Such that:aux(1) =< V4
aux(2) =< V4-V4'
it(61) =< aux(1)
it(61) =< aux(2)

#### Cost of phase [61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80]:fun17(V4,Out) -> [fun17(V4',Out')] 
120*it(61)+0
  Such that:aux(1) =< V4
aux(2) =< V4-V4'
it(61) =< aux(1)
it(61) =< aux(2)

#### Cost of phase [61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80]:fun17(V4,Out) -> [fun17(V4',Out')] 
120*it(61)+0
  Such that:aux(1) =< V4
aux(2) =< V4-V4'
it(61) =< aux(1)
it(61) =< aux(2)

#### Cost of phase [61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80]:fun17(V4,Out) -> [fun17(V4',Out')] 
120*it(61)+0
  Such that:aux(1) =< V4
aux(2) =< V4-V4'
it(61) =< aux(1)
it(61) =< aux(2)

#### Cost of phase [61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80]:fun17(V4,Out) -> [fun17(V4',Out')] 
120*it(61)+0
  Such that:aux(1) =< V4
aux(2) =< V4-V4'
it(61) =< aux(1)
it(61) =< aux(2)

#### Cost of phase [61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80]:fun17(V4,Out) -> [fun17(V4',Out')] 
120*it(61)+0
  Such that:aux(1) =< V4
aux(2) =< V4-V4'
it(61) =< aux(1)
it(61) =< aux(2)

#### Cost of phase [61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80]:fun17(V4,Out) -> [fun17(V4',Out')] 
120*it(61)+0
  Such that:aux(1) =< V4
aux(2) =< V4-V4'
it(61) =< aux(1)
it(61) =< aux(2)

#### Cost of phase [61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80]:fun17(V4,Out) -> [fun17(V4',Out')] 
120*it(61)+0
  Such that:aux(1) =< V4
aux(2) =< V4-V4'
it(61) =< aux(1)
it(61) =< aux(2)

#### Cost of phase [61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80]:fun17(V4,Out) -> [fun17(V4',Out')] 
120*it(61)+0
  Such that:aux(1) =< V4
aux(2) =< V4-V4'
it(61) =< aux(1)
it(61) =< aux(2)

#### Cost of chains of fun17(V4,Out):
* Chain [[61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80],104]: 120*it(61)+3
  Such that:aux(3) =< V4
it(61) =< aux(3)

  with precondition: [V4>=2,Out>=5,V4+5>=Out] 

* Chain [[61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80],103]: 120*it(61)+3
  Such that:aux(4) =< V4
it(61) =< aux(4)

  with precondition: [Out>=8,7*Out>=V4+42,V4+6>=Out] 

* Chain [[61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80],102]: 120*it(61)+3
  Such that:aux(5) =< V4
it(61) =< aux(5)

  with precondition: [V4>=3,Out>=5,V4+4>=Out] 

* Chain [[61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80],101]: 120*it(61)+3
  Such that:aux(6) =< V4
it(61) =< aux(6)

  with precondition: [Out>=8,7*Out>=V4+41,V4+5>=Out] 

* Chain [[61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80],100]: 120*it(61)+3
  Such that:aux(7) =< V4
it(61) =< aux(7)

  with precondition: [V4>=4,Out>=5,V4+3>=Out] 

* Chain [[61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80],99]: 120*it(61)+3
  Such that:aux(8) =< V4
it(61) =< aux(8)

  with precondition: [Out>=8,7*Out>=V4+40,V4+4>=Out] 

* Chain [[61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80],98]: 120*it(61)+3
  Such that:aux(9) =< V4
it(61) =< aux(9)

  with precondition: [Out>=3,V4+1>=Out] 

* Chain [[61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80],97]: 120*it(61)+5
  Such that:aux(10) =< V4
it(61) =< aux(10)

  with precondition: [Out>=4,V4>=Out] 

* Chain [[61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80],96]: 120*it(61)+5
  Such that:aux(11) =< V4
it(61) =< aux(11)

  with precondition: [Out>=8,7*Out>=V4+37,V4+1>=Out] 

* Chain [[61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80],95]: 120*it(61)+5
  Such that:aux(12) =< V4
it(61) =< aux(12)

  with precondition: [V4>=8,Out>=5,V4>=Out+1] 

* Chain [[61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80],94]: 120*it(61)+3
  Such that:aux(13) =< V4
it(61) =< aux(13)

  with precondition: [Out>=8,7*Out>=V4+36,V4>=Out] 

* Chain [[61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80],93]: 120*it(61)+5
  Such that:aux(14) =< V4
it(61) =< aux(14)

  with precondition: [Out>=4,V4>=Out+2] 

* Chain [[61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80],92]: 120*it(61)+5
  Such that:aux(15) =< V4
it(61) =< aux(15)

  with precondition: [Out>=8,7*Out>=V4+35,V4>=Out+1] 

* Chain [[61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80],91]: 120*it(61)+5
  Such that:aux(16) =< V4
it(61) =< aux(16)

  with precondition: [V4>=10,Out>=5,V4>=Out+3] 

* Chain [[61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80],90]: 120*it(61)+5
  Such that:aux(17) =< V4
it(61) =< aux(17)

  with precondition: [Out>=4,V4>=Out+4] 

* Chain [[61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80],89]: 120*it(61)+5
  Such that:aux(18) =< V4
it(61) =< aux(18)

  with precondition: [Out>=8,7*Out>=V4+33,V4>=Out+3] 

* Chain [[61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80],88]: 120*it(61)+5
  Such that:aux(19) =< V4
it(61) =< aux(19)

  with precondition: [V4>=12,Out>=5,V4>=Out+5] 

* Chain [[61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80],87]: 120*it(61)+5
  Such that:aux(20) =< V4
it(61) =< aux(20)

  with precondition: [Out>=4,V4>=Out+8] 

* Chain [[61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80],86]: 120*it(61)+5
  Such that:aux(21) =< V4
it(61) =< aux(21)

  with precondition: [Out>=8,7*Out>=V4+29,V4>=Out+7] 

* Chain [[61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80],85]: 120*it(61)+5
  Such that:aux(22) =< V4
it(61) =< aux(22)

  with precondition: [V4>=16,Out>=5,V4>=Out+9] 

* Chain [[61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80],84]: 120*it(61)+5
  Such that:aux(23) =< V4
it(61) =< aux(23)

  with precondition: [Out>=4,V4>=Out+12] 

* Chain [[61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80],83]: 120*it(61)+5
  Such that:aux(24) =< V4
it(61) =< aux(24)

  with precondition: [Out>=8,7*Out>=V4+25,V4>=Out+11] 

* Chain [[61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80],82]: 120*it(61)+5
  Such that:aux(25) =< V4
it(61) =< aux(25)

  with precondition: [V4>=20,Out>=5,V4>=Out+13] 

* Chain [[61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80],81]: 120*it(61)+3
  Such that:aux(26) =< V4
it(61) =< aux(26)

  with precondition: [Out>=4,V4+2>=Out] 

* Chain [104]: 3
  with precondition: [V4=0,Out=5] 

* Chain [103]: 3
  with precondition: [V4=0,Out=6] 

* Chain [102]: 3
  with precondition: [V4=1,Out=5] 

* Chain [101]: 3
  with precondition: [V4=1,Out=6] 

* Chain [100]: 3
  with precondition: [V4=2,Out=5] 

* Chain [99]: 3
  with precondition: [V4+4=Out,V4>=2] 

* Chain [98]: 3
  with precondition: [V4+1=Out,V4>=0] 

* Chain [97]: 5
  with precondition: [2*Out>=V4+2,V4>=Out] 

* Chain [96]: 5
  with precondition: [V4=5,Out=6] 

* Chain [95]: 5
  with precondition: [V4=6,Out=5] 

* Chain [94]: 3
  with precondition: [V4=6,Out=6] 

* Chain [93]: 5
  with precondition: [V4=Out+2,V4>=4] 

* Chain [92]: 5
  with precondition: [V4=7,Out=6] 

* Chain [91]: 5
  with precondition: [V4=8,Out=5] 

* Chain [90]: 5
  with precondition: [V4=Out+4,V4>=6] 

* Chain [89]: 5
  with precondition: [V4=9,Out=6] 

* Chain [88]: 5
  with precondition: [V4=10,Out=5] 

* Chain [87]: 5
  with precondition: [V4=Out+8,V4>=10] 

* Chain [86]: 5
  with precondition: [V4=13,Out=6] 

* Chain [85]: 5
  with precondition: [V4=14,Out=5] 

* Chain [84]: 5
  with precondition: [V4=Out+12,V4>=14] 

* Chain [83]: 5
  with precondition: [V4=17,Out=6] 

* Chain [82]: 5
  with precondition: [V4=18,Out=5] 

* Chain [81]: 3
  with precondition: [V4+2=Out,V4>=0] 


#### Cost of chains of fun3(V4,Out):
* Chain [106]: 1
  with precondition: [V4=5,Out=5] 

* Chain [105]: 1
  with precondition: [V4+1=Out,V4>=0] 


#### Cost of chains of fun5(V4,Out):
* Chain [108]: 1
  with precondition: [V4=5,Out=5] 

* Chain [107]: 1
  with precondition: [V4+1=Out,V4>=0] 


#### Cost of chains of fun7(V4,Out):
* Chain [110]: 1
  with precondition: [V4=5,Out=5] 

* Chain [109]: 1
  with precondition: [V4+1=Out,V4>=0] 


#### Cost of loops [111,112,113,114,115] 

 * loop 111:fun4fun8(A,B) -> [fun4fun8(A',B'),fun4fun8(A'2,B'2)] 
3
 * loop 112:fun4fun8(A,B) -> [fun4fun8(A',B'),fun4fun8(A'2,B'2)] 
3
 * loop 113:fun4fun8(A,B) -> [fun4fun8(A',B')] 
2
 * loop 114:fun4fun8(A,B) -> [fun4fun8(A',B')] 
2
 * loop 115:fun4fun8(A,B) -> [fun4fun8(A',B')] 
2
#### Cost of phase [111,112,113,114,115]:fun4fun8(A,B) -> [] 
26*it(111)+4*it(114)+12*it([118])+0
  Such that:aux(29) =< A
aux(30) =< A+1
it(111) =< aux(29)
it([118]) =< aux(30)

#### Cost of chains of fun4fun8(A,B):
* Chain [multiple([111,112,113,114,115],[[],[125],[124],[123],[122],[121],[120],[119],[118],[117],[116]])]...: 26*it(111)+4*it(114)+12*it([118])+0
  Such that:aux(29) =< A
aux(30) =< A+1
it(111) =< aux(29)
it([118]) =< aux(30)

  with precondition: [A>=0,B>=1] 

* Chain [125]: 3
  with precondition: [A=0,B=5] 

* Chain [124]: 3
  with precondition: [A=0,B=6] 

* Chain [123]: 3
  with precondition: [A=1,B=5] 

* Chain [122]: 3
  with precondition: [A=1,B=6] 

* Chain [121]: 3
  with precondition: [A=2,B=5] 

* Chain [120]: 3
  with precondition: [A=2,B=6] 

* Chain [119]: 3
  with precondition: [A+2=B,A>=0] 

* Chain [118]: 3
  with precondition: [A+1=B,A>=0] 

* Chain [117]: 3
  with precondition: [A=6,B=5] 

* Chain [116]: 3
  with precondition: [A=6,B=6] 


#### Cost of loops [126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176] 

 * loop 126:funmark(A,B,C) -> [funmark(A',B',C'),funmark(A'2,B'2,C'2),funmark(A'3,B'3,C'3),funmark(A'4,B'4,C'4),funmark(A'5,B'5,C'5)] 
1
 * loop 127:funmark(A,B,C) -> [funmark(A',B',C'),funmark(A'2,B'2,C'2),funmark(A'3,B'3,C'3)] 
1
 * loop 128:funmark(A,B,C) -> [funmark(A',B',C')] 
120*s(92)+8
  Such that:s(91) =< A-A'
s(92) =< s(91)

 * loop 129:funmark(A,B,C) -> [funmark(A',B',C')] 
8
 * loop 130:funmark(A,B,C) -> [funmark(A',B',C')] 
10
 * loop 131:funmark(A,B,C) -> [funmark(A',B',C')] 
10
 * loop 132:funmark(A,B,C) -> [funmark(A',B',C')] 
8
 * loop 133:funmark(A,B,C) -> [funmark(A',B',C')] 
8
 * loop 134:funmark(A,B,C) -> [funmark(A',B',C')] 
10
 * loop 135:funmark(A,B,C) -> [funmark(A',B',C')] 
10
 * loop 136:funmark(A,B,C) -> [funmark(A',B',C')] 
10
 * loop 137:funmark(A,B,C) -> [funmark(A',B',C')] 
8
 * loop 138:funmark(A,B,C) -> [funmark(A',B',C')] 
8
 * loop 139:funmark(A,B,C) -> [funmark(A',B',C')] 
6
 * loop 140:funmark(A,B,C) -> [funmark(A',B',C')] 
6
 * loop 141:funmark(A,B,C) -> [funmark(A',B',C')] 
10
 * loop 142:funmark(A,B,C) -> [funmark(A',B',C')] 
10
 * loop 143:funmark(A,B,C) -> [funmark(A',B',C')] 
10
 * loop 144:funmark(A,B,C) -> [funmark(A',B',C')] 
1920*s(96)+10
  Such that:s(95) =< A-A'
s(96) =< s(95)

 * loop 145:funmark(A,B,C) -> [funmark(A',B',C')] 
8
 * loop 146:funmark(A,B,C) -> [funmark(A',B',C')] 
8
 * loop 147:funmark(A,B,C) -> [funmark(A',B',C')] 
6
 * loop 148:funmark(A,B,C) -> [funmark(A',B',C')] 
8
 * loop 149:funmark(A,B,C) -> [funmark(A',B',C')] 
10
 * loop 150:funmark(A,B,C) -> [funmark(A',B',C')] 
10
 * loop 151:funmark(A,B,C) -> [funmark(A',B',C')] 
10
 * loop 152:funmark(A,B,C) -> [funmark(A',B',C')] 
10
 * loop 153:funmark(A,B,C) -> [funmark(A',B',C')] 
10
 * loop 154:funmark(A,B,C) -> [funmark(A',B',C')] 
10
 * loop 155:funmark(A,B,C) -> [funmark(A',B',C')] 
10
 * loop 156:funmark(A,B,C) -> [funmark(A',B',C')] 
10
 * loop 157:funmark(A,B,C) -> [funmark(A',B',C')] 
10
 * loop 158:funmark(A,B,C) -> [funmark(A',B',C')] 
2880*s(106)+10
  Such that:s(105) =< A-A'
s(106) =< s(105)

 * loop 159:funmark(A,B,C) -> [funmark(A',B',C')] 
8
 * loop 160:funmark(A,B,C) -> [funmark(A',B',C')] 
8
 * loop 161:funmark(A,B,C) -> [funmark(A',B',C')] 
10
 * loop 162:funmark(A,B,C) -> [funmark(A',B',C')] 
10
 * loop 163:funmark(A,B,C) -> [funmark(A',B',C')] 
10
 * loop 164:funmark(A,B,C) -> [funmark(A',B',C')] 
10
 * loop 165:funmark(A,B,C) -> [funmark(A',B',C')] 
10
 * loop 166:funmark(A,B,C) -> [funmark(A',B',C')] 
10
 * loop 167:funmark(A,B,C) -> [funmark(A',B',C')] 
10
 * loop 168:funmark(A,B,C) -> [funmark(A',B',C')] 
10
 * loop 169:funmark(A,B,C) -> [funmark(A',B',C')] 
10
 * loop 170:funmark(A,B,C) -> [funmark(A',B',C')] 
10
 * loop 171:funmark(A,B,C) -> [funmark(A',B',C')] 
10
 * loop 172:funmark(A,B,C) -> [funmark(A',B',C')] 
10
 * loop 173:funmark(A,B,C) -> [funmark(A',B',C')] 
10
 * loop 174:funmark(A,B,C) -> [funmark(A',B',C')] 
4320*s(120)+10
  Such that:s(119) =< A-A'
s(120) =< s(119)

 * loop 175:funmark(A,B,C) -> [funmark(A',B',C')] 
1
 * loop 176:funmark(A,B,C) -> [funmark(A',B',C')] 
1
#### Cost of phase [126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176]:funmark(A,B,C) -> [] 
20*it(126)+8*it(128)+643*it(129)+59*it([177])+2*it([179])+120*s(121)+9120*s(123)+8520*s(129)+152*s(139)+0
#### Cost of chains of funmark(A,B,C):
* Chain [multiple([126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176],[[],[218],[217],[216],[215],[214],[213],[212],[211],[210],[209],[208],[207],[206],[205],[204],[203],[202],[201],[200],[199],[198],[197],[196],[195],[194],[193],[192],[191],[190],[189],[188],[187],[186],[185],[184],[183],[182],[181],[180],[179],[178],[177]])]...: 20*it(126)+8*it(128)+643*it(129)+59*it([177])+2*it([179])+120*s(121)+9120*s(123)+8520*s(129)+152*s(139)+0
  with precondition: [A>=0] 

* Chain [218]: 1
  with precondition: [A=0,C=0] 

* Chain [217]: 6
  with precondition: [A=C,A>=1] 

* Chain [216]: 6
  with precondition: [A=1,C=5] 

* Chain [215]: 6
  with precondition: [A=1,C=6] 

* Chain [214]: 6
  with precondition: [A=1,C=7] 

* Chain [213]: 1
  with precondition: [A=2,C=2] 

* Chain [212]: 6
  with precondition: [A=2,C=5] 

* Chain [211]: 6
  with precondition: [A=2,C=6] 

* Chain [210]: 6
  with precondition: [A=2,C=7] 

* Chain [209]: 720*s(48)+8
  Such that:s(47) =< A
s(48) =< s(47)

  with precondition: [C>=3,A>=C] 

* Chain [208]: 4800*s(50)+8
  Such that:aux(31) =< A
s(50) =< aux(31)

  with precondition: [A>=3,C>=5,A+4>=C] 

* Chain [207]: 2040*s(60)+8
  Such that:aux(32) =< A
s(60) =< aux(32)

  with precondition: [A>=3,C>=6,A+5>=C] 

* Chain [206]: 840*s(64)+8
  Such that:aux(33) =< A
s(64) =< aux(33)

  with precondition: [C>=4,A+1>=C] 

* Chain [205]: 8
  with precondition: [A+1=C,A>=1] 

* Chain [204]: 8
  with precondition: [A=5,C=5] 

* Chain [203]: 1
  with precondition: [A=6,C=6] 

* Chain [202]: 8
  with precondition: [2*C>=A+1,A>=C+1] 

* Chain [201]: 4
  with precondition: [A=7,C=6] 

* Chain [200]: 8
  with precondition: [A=C+3,A>=5] 

* Chain [199]: 8
  with precondition: [A=C+4,A>=7] 

* Chain [198]: 8
  with precondition: [A=9,C=6] 

* Chain [197]: 8
  with precondition: [A=C+5,A>=7] 

* Chain [196]: 6
  with precondition: [A=10,C=6] 

* Chain [195]: 8
  with precondition: [A=10,C=7] 

* Chain [194]: 8
  with precondition: [A=11,C=5] 

* Chain [193]: 8
  with precondition: [A=11,C=6] 

* Chain [192]: 8
  with precondition: [A=C+9,A>=11] 

* Chain [191]: 8
  with precondition: [A=C+8,A>=11] 

* Chain [190]: 8
  with precondition: [A=14,C=7] 

* Chain [189]: 8
  with precondition: [A=15,C=5] 

* Chain [188]: 8
  with precondition: [A=15,C=6] 

* Chain [187]: 8
  with precondition: [A=C+13,A>=15] 

* Chain [186]: 8
  with precondition: [A=C+12,A>=15] 

* Chain [185]: 8
  with precondition: [A=18,C=7] 

* Chain [184]: 8
  with precondition: [A=19,C=5] 

* Chain [183]: 8
  with precondition: [A=19,C=6] 

* Chain [182]: 6
  with precondition: [A+4=C,A>=3] 

* Chain [181]: 6
  with precondition: [A+2=C,A>=1] 

* Chain [180]: 8
  with precondition: [A=C+2,A>=5] 

* Chain [179]: 1
  with precondition: [A+B+1=C,A>=0,B>=0] 

* Chain [178]: 120*s(68)+6
  Such that:s(67) =< A
s(68) =< s(67)

  with precondition: [C>=9,7*C>=A+48,A+6>=C] 

* Chain [177]...: 152*s(71)+16*s(73)+2
  Such that:aux(38) =< A
s(71) =< aux(38)

  with precondition: [A>=1] 


#### Cost of chains of start(V4,V3):
* Chain [237]...: 78*s(152)+36*s(153)+18676*s(154)+178*s(175)+12*s(180)+2
  Such that:s(178) =< V4+1
aux(81) =< V4
aux(82) =< V3
aux(83) =< V3+1
s(175) =< aux(81)
s(180) =< s(178)
s(152) =< aux(82)
s(153) =< aux(83)

  with precondition: [V4>=0] 

* Chain [236]: 17040*s(183)+8
  Such that:aux(84) =< V4
s(183) =< aux(84)

  with precondition: [V4>=0] 

* Chain [235]: 6
  with precondition: [V4=1] 

* Chain [234]: 6
  with precondition: [V4=2] 

* Chain [233]: 5
  with precondition: [V4=3] 

* Chain [232]: 7
  with precondition: [V4=4] 

* Chain [231]: 9240*s(215)+9
  Such that:aux(85) =< V3
s(215) =< aux(85)

  with precondition: [8>=V4,V4>=5] 

* Chain [230]: 3
  with precondition: [V4=6] 

* Chain [229]: 7
  with precondition: [V4=7] 

* Chain [228]: 7
  with precondition: [V4=8] 

* Chain [227]: 7
  with precondition: [V4=9] 

* Chain [226]: 7
  with precondition: [V4=10] 

* Chain [225]: 8
  with precondition: [V4=11] 

* Chain [224]: 7
  with precondition: [V4=13] 

* Chain [223]: 8
  with precondition: [V4=14] 

* Chain [222]: 8
  with precondition: [V4=15] 

* Chain [221]: 7
  with precondition: [V4=17] 

* Chain [220]: 8
  with precondition: [V4=18] 

* Chain [219]: 8
  with precondition: [V4=19] 


Closed-form bounds of start(V4,V3): 
-------------------------------------
* Chain [237]... with precondition: [V4>=0] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [236] with precondition: [V4>=0] 
    - Upper bound: 17040*V4+8 
    - Complexity: n 
* Chain [235] with precondition: [V4=1] 
    - Upper bound: 6 
    - Complexity: constant 
* Chain [234] with precondition: [V4=2] 
    - Upper bound: 6 
    - Complexity: constant 
* Chain [233] with precondition: [V4=3] 
    - Upper bound: 5 
    - Complexity: constant 
* Chain [232] with precondition: [V4=4] 
    - Upper bound: 7 
    - Complexity: constant 
* Chain [231] with precondition: [8>=V4,V4>=5] 
    - Upper bound: nat(V3)*9240+9 
    - Complexity: n 
* Chain [230] with precondition: [V4=6] 
    - Upper bound: 3 
    - Complexity: constant 
* Chain [229] with precondition: [V4=7] 
    - Upper bound: 7 
    - Complexity: constant 
* Chain [228] with precondition: [V4=8] 
    - Upper bound: 7 
    - Complexity: constant 
* Chain [227] with precondition: [V4=9] 
    - Upper bound: 7 
    - Complexity: constant 
* Chain [226] with precondition: [V4=10] 
    - Upper bound: 7 
    - Complexity: constant 
* Chain [225] with precondition: [V4=11] 
    - Upper bound: 8 
    - Complexity: constant 
* Chain [224] with precondition: [V4=13] 
    - Upper bound: 7 
    - Complexity: constant 
* Chain [223] with precondition: [V4=14] 
    - Upper bound: 8 
    - Complexity: constant 
* Chain [222] with precondition: [V4=15] 
    - Upper bound: 8 
    - Complexity: constant 
* Chain [221] with precondition: [V4=17] 
    - Upper bound: 7 
    - Complexity: constant 
* Chain [220] with precondition: [V4=18] 
    - Upper bound: 8 
    - Complexity: constant 
* Chain [219] with precondition: [V4=19] 
    - Upper bound: 8 
    - Complexity: constant 

### Maximum cost of start(V4,V3): inf 
Asymptotic class: infinity 

Time statistics: 
-------------------------------------
* Partial evaluation computed in 77 ms.
* Invariants computed in 637 ms.
   - Backward Invariants 344 ms.
   - Transitive Invariants 53 ms.
* Refinement performed in 1830 ms.
* Termination proved in 425 ms.
* Upper bounds computed in 934 ms.
   - Equation cost structures 326 ms.
   - Phase cost structures 640 ms.
   - Chain cost structures 71 ms.
   - Solving cost expressions 2 ms.
* Total analysis performed in 3998 ms.


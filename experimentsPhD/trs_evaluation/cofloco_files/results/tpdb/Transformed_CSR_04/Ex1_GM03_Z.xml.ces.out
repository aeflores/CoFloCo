
Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. non_recursive  : [fun/1]
1. non_recursive  : [s/2]
2. non_recursive  : [activate/2]
3. non_recursive  : [if/4]
4. recursive [non_tail] : [diff/3]
5. non_recursive  : [start/3]

#### Obtained direct recursion through partial evaluation 
0. SCC is completely evaluated into other SCCs
1. SCC is completely evaluated into other SCCs
2. SCC is partially evaluated into activate/2
3. SCC is partially evaluated into if/4
4. SCC is partially evaluated into diff/3
5. SCC is partially evaluated into start/3

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations activate/2 
* CE 6 is refined into CE [13] 
* CE 7 is refined into CE [14] 
* CE 8 is refined into CE [15] 


#### Refined cost equations activate/2 
* CE 13: activate(V,Out) = 2
     [Out=0,V=0] 
* CE 14: activate(A,A) = 1
     [A>=0] 
* CE 15: activate(A,A) = 2
     [A>=1] 

### Cost equations --> "Loop" of activate/2 
* CEs [13,14,15] --> Loop 7 

#### Loops of activate/2 
* Loop 7: activate(A,A) [A>=0] 

### Ranking functions of CR activate(V,Out) 

#### Partial ranking functions of CR activate(V,Out) 


### Resulting Chains:activate(V,Out) 
* [7]


### Merging Chains  activate/2 into  External patterns of execution 
* [[7]] --> 1 


### Specialization of cost equations if/4 
* CE 11 is refined into CE [16] 
* CE 10 is refined into CE [17] 
* CE 9 is refined into CE [18] 


#### Refined cost equations if/4 
* CE 16: if(V,V1,V2,Out) = 0
     [V2>=0,V1>=0,V>=0,Out=0] 
* CE 17: if(A,B,C,B) = 1+ activate(B,B):1
     [B>=0,C>=0,A=1] 
* CE 18: if(A,B,C,C) = 1+ activate(C,C):1
     [C>=0,B>=0,A=0] 

### Cost equations --> "Loop" of if/4 
* CEs [16] --> Loop 8 
* CEs [17] --> Loop 9 
* CEs [18] --> Loop 10 

#### Loops of if/4 
* Loop 8: if(V,V1,V2,Out) [V2>=0,V1>=0,V>=0,Out=0] 
* Loop 9: if(A,B,C,B) [C>=0,B>=0,A=1] 
* Loop 10: if(A,B,C,C) [C>=0,B>=0,A=0] 

### Ranking functions of CR if(V,V1,V2,Out) 

#### Partial ranking functions of CR if(V,V1,V2,Out) 


### Resulting Chains:if(V,V1,V2,Out) 
* [10]
* [9]
* [8]


### Merging Chains  if/4 into  External patterns of execution 
* [[10]] --> 1 
* [[9]] --> 2 
* [[8]] --> 3 


### Specialization of cost equations diff/3 
* CE 12 is refined into CE [19,20] 


#### Refined cost equations diff/3 
* CE 19: diff(V,V1,Out) = 1+ diff(W1,X1,Y1)+ if(Z1,A2,B2,C2):2
     [B2>=0,B2=Y1+1,X1=0,W1=1,C2=0,A2=0,Z1=1,Out=0,V1=0,V=0] 
* CE 20: diff(V,V1,Out) = 1+ diff(W1,V1,X1)+ if(Y1,Z1,A2,B2):3
     [Y1>=V1+1,A2>=0,V1>=0,Y1=V1+W1,Y1=V+V1+1,A2=X1+1,B2=0,Z1=0,Out=0] 

### Cost equations --> "Loop" of diff/3 
* CEs [19,20] --> Loop 11 

#### Loops of diff/3 
* Loop 11: diff(V,V1,Out)->  diff(V',V1,Out')
                  [Out'+1>=0,V'>=1,V1>=0,V'=V+1,Out=0] 

### Ranking functions of CR diff(V,V1,Out) 

#### Partial ranking functions of CR diff(V,V1,Out) 

Warning: no base case found for predicate

### Resulting Chains:diff(V,V1,Out) 
* [[11]]...


### Merging Chains  diff/3 into  External patterns of execution 
* [[[11]]] --> 1 


### Specialization of cost equations start/3 
* CE 2 is refined into CE [21] 
* CE 3 is refined into CE [22,23,24] 
* CE 4 is refined into CE [25] 
* CE 5 is refined into CE [26] 


#### Refined cost equations start/3 
* CE 21: start(V,V1,V2) = 0+ activate(V,V):1
     [V>=0] 
* CE 22: start(V,V1,V2) = 0+ if(W2,V1,V2,V2):1
     [V2>=0,V1>=0,W2=0,V=0] 
* CE 23: start(V,V1,V2) = 0+ if(W2,V1,V2,V1):2
     [V1>=0,V2>=0,W2=1,V=1] 
* CE 24: start(V,V1,V2) = 0+ if(V,V1,V2,W2):3
     [V2>=0,V1>=0,V>=0,W2=0] 
* CE 25: start(V,V1,V2) = 1
     [] 
* CE 26: start(V,V1,V2) = 0+ diff(V,V1,W2):1
     [V1>=0,V>=0,W2=0] 

### Cost equations --> "Loop" of start/3 
* CEs [26] --> Loop 12 
* CEs [21,22,23,24,25] --> Loop 13 

#### Loops of start/3 
* Loop 12: start(V,V1,V2) [V1>=0,V>=0] 
* Loop 13: start(V,V1,V2) [] 

### Ranking functions of CR start(V,V1,V2) 

#### Partial ranking functions of CR start(V,V1,V2) 


### Resulting Chains:start(V,V1,V2) 
* [13]
* [12]...


### Merging Chains  start/3 into  External patterns of execution 
* [[13]] --> 1 
* [[12]] --> 2 


Computing Bounds
=====================================

#### Cost of chains of activate(V,Out):
* Chain [7]: 2
  with precondition: [V=Out,V>=0] 


#### Cost of chains of if(V,V1,V2,Out):
* Chain [10]: 3
  with precondition: [V=0,V2=Out,V1>=0,V2>=0] 

* Chain [9]: 3
  with precondition: [V=1,V1=Out,V1>=0,V2>=0] 

* Chain [8]: 0
  with precondition: [Out=0,V>=0,V1>=0,V2>=0] 


#### Cost of loops [11] 

 * loop 11:diff(V,V1,Out) -> [diff(V',V1',Out')] 
4
#### Cost of phase [11]:diff(V,V1,Out) -> [diff(V',V1',Out')] 
4*it(11)+0
#### Cost of chains of diff(V,V1,Out):
* Chain [[11]]...: 4*it(11)+0
  with precondition: [V>=0,V1>=0,Out=0] 


#### Cost of chains of start(V,V1,V2):
* Chain [13]: 3
  with precondition: [] 

* Chain [12]...: 4*s(1)+0
  with precondition: [V>=0,V1>=0] 


Closed-form bounds of start(V,V1,V2): 
-------------------------------------
* Chain [13] with precondition: [] 
    - Upper bound: 3 
    - Complexity: constant 
* Chain [12]... with precondition: [V>=0,V1>=0] 
    - Upper bound: inf 
    - Complexity: infinity 

### Maximum cost of start(V,V1,V2): inf 
Asymptotic class: infinity 

Time statistics: 
-------------------------------------
* Partial evaluation computed in 25 ms.
* Invariants computed in 17 ms.
   - Backward Invariants 6 ms.
   - Transitive Invariants 4 ms.
* Refinement performed in 76 ms.
* Termination proved in 3 ms.
* Upper bounds computed in 35 ms.
   - Equation cost structures 24 ms.
   - Phase cost structures 9 ms.
   - Chain cost structures 4 ms.
   - Solving cost expressions 0 ms.
* Total analysis performed in 202 ms.



Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. non_recursive  : [fun1/2]
1. non_recursive  : [fun/2]
2. non_recursive  : [fun2/2]
3. recursive [non_tail] : [mark/2]
4. non_recursive  : [start/1]

#### Obtained direct recursion through partial evaluation 
0. SCC is completely evaluated into other SCCs
1. SCC is partially evaluated into fun/2
2. SCC is partially evaluated into fun2/2
3. SCC is partially evaluated into mark/2
4. SCC is partially evaluated into start/1

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations fun/2 
* CE 7 is refined into CE [15] 
* CE 6 is refined into CE [16] 


#### Refined cost equations fun/2 
* CE 15: fun(V,Out) = 1
     [V>=0,V+1=Out] 
* CE 16: fun(V,Out) = 2
     [V>=1,V+3=Out] 

### Cost equations --> "Loop" of fun/2 
* CEs [15] --> Loop 9 
* CEs [16] --> Loop 10 

#### Loops of fun/2 
* Loop 9: fun(V,Out) [V>=0,V+1=Out] 
* Loop 10: fun(V,Out) [V>=1,V+3=Out] 

### Ranking functions of CR fun(V,Out) 

#### Partial ranking functions of CR fun(V,Out) 


### Resulting Chains:fun(V,Out) 
* [10]
* [9]


### Merging Chains  fun/2 into  External patterns of execution 
* [[10]] --> 1 
* [[9]] --> 2 


### Specialization of cost equations fun2/2 
* CE 9 is refined into CE [17] 
* CE 8 is refined into CE [18] 


#### Refined cost equations fun2/2 
* CE 17: fun2(V,Out) = 1
     [V>=0,V+1=Out] 
* CE 18: fun2(V,Out) = 2
     [Out>=2,Out=V+2] 

### Cost equations --> "Loop" of fun2/2 
* CEs [17] --> Loop 11 
* CEs [18] --> Loop 12 

#### Loops of fun2/2 
* Loop 11: fun2(V,Out) [V>=0,V+1=Out] 
* Loop 12: fun2(V,Out) [V>=0,V+2=Out] 

### Ranking functions of CR fun2(V,Out) 

#### Partial ranking functions of CR fun2(V,Out) 


### Resulting Chains:fun2(V,Out) 
* [12]
* [11]


### Merging Chains  fun2/2 into  External patterns of execution 
* [[12]] --> 1 
* [[11]] --> 2 


### Specialization of cost equations mark/2 
* CE 11 is refined into CE [19] 
* CE 13 is refined into CE [20] 
* CE 14 is refined into CE [21] 
* CE 10 is refined into CE [22,23] 
* CE 12 is refined into CE [24,25] 


#### Refined cost equations mark/2 
* CE 19: mark(A,A) = 2
     [A>=1] 
* CE 20: mark(A,A) = 1
     [A>=1] 
* CE 21: mark(V,Out) = 0
     [V>=0,Out=0] 
* CE 22: mark(V,Out) = 1+ mark(W,X)+ fun(Y,Out):1
     [W>=0,Out>=4,Out=X+3,Out=Y+3,W+1=V] 
* CE 23: mark(V,Out) = 1+ mark(W,X)+ fun(Y,Out):2
     [W>=0,Out>=1,Out=X+1,Out=Y+1,W+1=V] 
* CE 24: mark(V,Out) = 1+ mark(W,X)+ fun2(Y,Out):1
     [W>=0,Out>=2,Out=X+2,Out=Y+2,W+1=V] 
* CE 25: mark(V,Out) = 1+ mark(W,X)+ fun2(Y,Out):2
     [W>=0,Out>=1,Out=X+1,Out=Y+1,W+1=V] 

### Cost equations --> "Loop" of mark/2 
* CEs [22] --> Loop 13 
* CEs [24] --> Loop 14 
* CEs [23,25] --> Loop 15 
* CEs [19,20] --> Loop 16 
* CEs [21] --> Loop 17 

#### Loops of mark/2 
* Loop 13: mark(V,Out)->  mark(V',Out')
                  [Out>=4,V>=1,Out=Out'+3,V=V'+1] 
* Loop 14: mark(V,Out)->  mark(V',Out')
                  [Out>=2,V>=1,Out=Out'+2,V=V'+1] 
* Loop 15: mark(V,Out)->  mark(V',Out')
                  [Out>=1,V>=1,Out=Out'+1,V=V'+1] 
* Loop 16: mark(A,A) [A>=1] 
* Loop 17: mark(V,Out) [V>=0,Out=0] 

### Ranking functions of CR mark(V,Out) 
* RF of phase [13,14,15]: [V]

#### Partial ranking functions of CR mark(V,Out) 
* Partial RF of phase [13,14,15]:
  - RF of loop [13:1,14:1,15:1]:
    V


### Resulting Chains:mark(V,Out) 
* [[13,14,15],17]
* [[13,14,15],16]
* [17]
* [16]


### Merging Chains  mark/2 into  External patterns of execution 
* [[17]] --> 1 
* [[16],[16,[13,14,15]],[17,[13,14,15]]] --> 2 


### Specialization of cost equations start/1 
* CE 2 is refined into CE [26,27] 
* CE 3 is refined into CE [28] 
* CE 4 is refined into CE [29,30] 
* CE 5 is refined into CE [31,32] 


#### Refined cost equations start/1 
* CE 26: start(V) = 0+ fun(W,X):1
     [X>=4,X=W+3,X=V+3] 
* CE 27: start(V) = 0+ fun(W,X):2
     [X>=1,X=W+1,X=V+1] 
* CE 28: start(V) = 1
     [V>=0] 
* CE 29: start(V) = 0+ fun2(W,X):1
     [X>=2,X=W+2,X=V+2] 
* CE 30: start(V) = 0+ fun2(W,X):2
     [X>=1,X=W+1,X=V+1] 
* CE 31: start(V) = 0+ mark(V,W):1
     [V>=0,W=0] 
* CE 32: start(V) = 0+ mark(V,W):2
     [3*V>=W+1,W>=1,V>=1] 

### Cost equations --> "Loop" of start/1 
* CEs [26,27,28,29,30,31,32] --> Loop 18 

#### Loops of start/1 
* Loop 18: start(V) [V>=0] 

### Ranking functions of CR start(V) 

#### Partial ranking functions of CR start(V) 


### Resulting Chains:start(V) 
* [18]


### Merging Chains  start/1 into  External patterns of execution 
* [[18]] --> 1 


Computing Bounds
=====================================

#### Cost of chains of fun(V,Out):
* Chain [10]: 2
  with precondition: [V+3=Out,V>=1] 

* Chain [9]: 1
  with precondition: [V+1=Out,V>=0] 


#### Cost of chains of fun2(V,Out):
* Chain [12]: 2
  with precondition: [V+2=Out,V>=0] 

* Chain [11]: 1
  with precondition: [V+1=Out,V>=0] 


#### Cost of loops [13,14,15] 

 * loop 13:mark(V,Out) -> [mark(V',Out')] 
3
 * loop 14:mark(V,Out) -> [mark(V',Out')] 
3
 * loop 15:mark(V,Out) -> [mark(V',Out')] 
2
#### Cost of phase [13,14,15]:mark(V,Out) -> [mark(V',Out')] 
8*it(13)+0
  Such that:aux(1) =< V
aux(2) =< V-V'
it(13) =< aux(1)
it(13) =< aux(2)

#### Cost of phase [13,14,15]:mark(V,Out) -> [mark(V',Out')] 
8*it(13)+0
  Such that:aux(1) =< V
aux(2) =< V-V'
it(13) =< aux(1)
it(13) =< aux(2)

#### Cost of chains of mark(V,Out):
* Chain [[13,14,15],17]: 8*it(13)+0
  Such that:aux(3) =< V
it(13) =< aux(3)

  with precondition: [V>=1,Out>=1,3*V>=Out+1] 

* Chain [[13,14,15],16]: 8*it(13)+2
  Such that:aux(4) =< V
it(13) =< aux(4)

  with precondition: [V>=2,Out>=V,3*V>=Out+2] 

* Chain [17]: 0
  with precondition: [Out=0,V>=0] 

* Chain [16]: 2
  with precondition: [V=Out,V>=1] 


#### Cost of chains of start(V):
* Chain [18]: 16*s(6)+2
  Such that:s(5) =< V
s(6) =< s(5)

  with precondition: [V>=0] 


Closed-form bounds of start(V): 
-------------------------------------
* Chain [18] with precondition: [V>=0] 
    - Upper bound: 16*V+2 
    - Complexity: n 

### Maximum cost of start(V): 16*V+2 
Asymptotic class: n 

Time statistics: 
-------------------------------------
* Partial evaluation computed in 7 ms.
* Invariants computed in 13 ms.
   - Backward Invariants 8 ms.
   - Transitive Invariants 3 ms.
* Refinement performed in 27 ms.
* Termination proved in 4 ms.
* Upper bounds computed in 20 ms.
   - Equation cost structures 7 ms.
   - Phase cost structures 7 ms.
   - Chain cost structures 6 ms.
   - Solving cost expressions 1 ms.
* Total analysis performed in 80 ms.


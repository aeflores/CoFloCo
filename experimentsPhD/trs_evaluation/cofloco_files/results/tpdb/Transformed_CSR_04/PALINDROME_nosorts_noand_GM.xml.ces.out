
Preprocessing Cost Relations
=====================================
3. SCC does not have a single cut point : [fun/3,mark/2]  
 Merged into funmark/3

#### Computed strongly connected components 
0. non_recursive  : [fun2/2]
1. non_recursive  : [fun1/2]
2. non_recursive  : [fun3/2]
4. non_recursive  : [start/2]
3. recursive [non_tail,multiple] : [funmark/3]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into fun2/2
1. SCC is partially evaluated into fun1/2
2. SCC is partially evaluated into fun3/2
4. SCC is partially evaluated into start/2
3. SCC is partially evaluated into funmark/3

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations fun2/2 
* CE 19 is refined into CE [22] 
* CE 18 is refined into CE [23] 


#### Refined cost equations fun2/2 
* CE 22: fun2(V1,Out) = 1
     [V1>=0,V1+1=Out] 
* CE 23: fun2(V1,Out) = 1
     [Out=1,V1=1] 

### Cost equations --> "Loop" of fun2/2 
* CEs [22] --> Loop 16 
* CEs [23] --> Loop 17 

#### Loops of fun2/2 
* Loop 16: fun2(V1,Out) [V1>=0,V1+1=Out] 
* Loop 17: fun2(V1,Out) [Out=1,V1=1] 

### Ranking functions of CR fun2(V1,Out) 

#### Partial ranking functions of CR fun2(V1,Out) 


### Resulting Chains:fun2(V1,Out) 
* [17]
* [16]


### Merging Chains  fun2/2 into  External patterns of execution 
* [[17]] --> 1 
* [[16]] --> 2 


### Specialization of cost equations fun1/2 
* CE 17 is refined into CE [24] 
* CE 16 is refined into CE [25,26] 


#### Refined cost equations fun1/2 
* CE 24: fun1(V1,Out) = 1
     [V1>=0,V1+1=Out] 
* CE 25: fun1(V1,Out) = 1+ fun2(W1,X1):1
     [X1=1,W1=1,Out=1,V1=1] 
* CE 26: fun1(V1,Out) = 1+ fun2(W1,X1):2
     [X1=2,W1=1,Out=2,V1=1] 

### Cost equations --> "Loop" of fun1/2 
* CEs [24,26] --> Loop 18 
* CEs [25] --> Loop 19 

#### Loops of fun1/2 
* Loop 18: fun1(V1,Out) [V1>=0,V1+1=Out] 
* Loop 19: fun1(V1,Out) [Out=1,V1=1] 

### Ranking functions of CR fun1(V1,Out) 

#### Partial ranking functions of CR fun1(V1,Out) 


### Resulting Chains:fun1(V1,Out) 
* [19]
* [18]


### Merging Chains  fun1/2 into  External patterns of execution 
* [[19]] --> 1 
* [[18]] --> 2 


### Specialization of cost equations fun3/2 
* CE 20 is refined into CE [27,28] 
* CE 21 is refined into CE [29] 


#### Refined cost equations fun3/2 
* CE 27: fun3(V1,Out) = 1+ fun1(W1,X1):1
     [V1>=2,X1=1,W1=1,Out=1] 
* CE 28: fun3(V1,Out) = 1+ fun1(W1,X1):2
     [V1>=2,X1=2,W1=1,Out=2] 
* CE 29: fun3(V1,Out) = 1
     [V1>=0,V1+1=Out] 

### Cost equations --> "Loop" of fun3/2 
* CEs [29] --> Loop 20 
* CEs [28] --> Loop 21 
* CEs [27] --> Loop 22 

#### Loops of fun3/2 
* Loop 20: fun3(V1,Out) [V1>=0,V1+1=Out] 
* Loop 21: fun3(V1,Out) [V1>=2,Out=2] 
* Loop 22: fun3(V1,Out) [V1>=2,Out=1] 

### Ranking functions of CR fun3(V1,Out) 

#### Partial ranking functions of CR fun3(V1,Out) 


### Resulting Chains:fun3(V1,Out) 
* [22]
* [21]
* [20]


### Merging Chains  fun3/2 into  External patterns of execution 
* [[22]] --> 1 
* [[21]] --> 2 
* [[20]] --> 3 


### Specialization of cost equations funmark/3 
* CE 9 is refined into CE [30] 
* CE 15 is refined into CE [31] 
* CE 14 is refined into CE [32] 
* CE 11 is refined into CE [33,34] 
* CE 12 is refined into CE [35,36] 
* CE 13 is refined into CE [37,38,39] 
* CE 7 is refined into CE [40] 
* CE 8 is refined into CE [41] 
* CE 10 is refined into CE [42] 
* CE 6 is refined into CE [43] 


#### Refined cost equations funmark/3 
* CE 30: funmark(A,B,C) = 1
     [B>=0,A>=0,A+B+1=C] 
* CE 31: funmark(A,B,C) = 1
     [C=1,A=1] 
* CE 32: funmark(A,B,C) = 1
     [C=0,A=0] 
* CE 33: funmark(A,B,C) = 1+ funmark(D,E,F)+ fun1(G,H):1
     [D>=0,D+1=A,F=1,H=1,G=1,C=1] 
* CE 34: funmark(A,B,C) = 1+ funmark(D,E,F)+ fun1(G,C):2
     [D>=0,C>=1,C=F+1,C=G+1,D+1=A] 
* CE 35: funmark(A,B,C) = 1+ funmark(D,E,F)+ fun2(G,H):1
     [D>=0,D+1=A,F=1,H=1,G=1,C=1] 
* CE 36: funmark(A,B,C) = 1+ funmark(D,E,F)+ fun2(G,C):2
     [D>=0,C>=1,C=F+1,C=G+1,D+1=A] 
* CE 37: funmark(A,B,C) = 1+ funmark(D,E,F)+ fun3(F,G):1
     [D>=0,F>=2,D+1=A,G=1,C=1] 
* CE 38: funmark(A,B,C) = 1+ funmark(D,E,F)+ fun3(F,G):2
     [D>=0,F>=2,D+1=A,G=2,C=2] 
* CE 39: funmark(A,B,C) = 1+ funmark(D,E,F)+ fun3(G,C):3
     [D>=0,C>=1,C=F+1,C=G+1,D+1=A] 
* CE 40: funmark(A,B,C) = 1+ funmark(A,D,C)
     [A>=0,B=0] 
* CE 41: funmark(A,B,C) = 1+ funmark(B,D,C)
     [B>=0,A=0] 
* CE 42: funmark(A,B,C) = 1+ funmark(D,E,F)+ funmark(G,H,I)+ funmark(F,I,C)
     [G>=0,D>=0,D+G+1=A] 
* CE 43: funmark(A,B,C) = 1+ funmark(D,E,F)+ funmark(G,H,I)+ funmark(B,J,K)+ funmark(I,K,L)+ funmark(F,L,C)
     [G>=0,D>=0,B>=0,D+G+1=A] 

### Cost equations --> "Loop" of funmark/3 
* CEs [43] --> Loop 23 
* CEs [42] --> Loop 24 
* CEs [34,36,39] --> Loop 25 
* CEs [38] --> Loop 26 
* CEs [37] --> Loop 27 
* CEs [33,35] --> Loop 28 
* CEs [40] --> Loop 29 
* CEs [41] --> Loop 30 
* CEs [30] --> Loop 31 
* CEs [31] --> Loop 32 
* CEs [32] --> Loop 33 

#### Loops of funmark/3 
* Loop 23: funmark(A,B,C)->  funmark(A',B',C')  funmark(A'2,B'2,C'2)  funmark(B,A'3,B'3)  funmark(C'2,B'3,A'4)  funmark(C',A'4,C)
                  [A'2>=0,A'>=0,B>=0,A'+A'2+1=A] 
* Loop 24: funmark(A,B,C)->  funmark(A',B',C')  funmark(A'2,B'2,C'2)  funmark(C',C'2,C)
                  [A'2>=0,A'>=0,A'+A'2+1=A] 
* Loop 25: funmark(A,B,C)->  funmark(A',B',C')
                  [C>=1,A>=1,C=C'+1,A=A'+1] 
* Loop 26: funmark(A,B,C)->  funmark(A',B',C')
                  [C'>=2,A>=1,A=A'+1,C=2] 
* Loop 27: funmark(A,B,C)->  funmark(A',B',C')
                  [C'>=2,A>=1,A=A'+1,C=1] 
* Loop 28: funmark(A,B,C)->  funmark(A',B',C')
                  [A>=1,A=A'+1,C'=1,C=1] 
* Loop 29: funmark(A,B,C)->  funmark(A,A',C)
                  [A>=0,B=0] 
* Loop 30: funmark(A,B,C)->  funmark(B,A',C)
                  [B>=0,A=0] 
* Loop 31: funmark(A,B,C) [B>=0,A>=0,A+B+1=C] 
* Loop 32: funmark(A,B,C) [C=1,A=1] 
* Loop 33: funmark(A,B,C) [C=0,A=0] 

### Ranking functions of CR funmark(A,B,C) 

#### Partial ranking functions of CR funmark(A,B,C) 
* Partial RF of phase [23,24,25,26,27,28,29,30]:
  - RF of loop [23:1,23:2,24:1,24:2,25:1,26:1,27:1,28:1]:
    A depends on loops [23:3,23:4,23:5,24:3,30:1] 


### Resulting Chains:funmark(A,B,C) 
* [multiple([23,24,25,26,27,28,29,30],[[],[33],[32],[31]])]...
* [33]
* [32]
* [31]


### Merging Chains  funmark/3 into  External patterns of execution 
* [[33]] --> 1 
* [[32]] --> 2 
* [[31]] --> 3 
* [[multiple([23,24,25,26,27,28,29,30],[[],[33],[32],[31]])]] --> 4 


### Specialization of cost equations start/2 
* CE 2 is refined into CE [44,45,46,47] 
* CE 3 is refined into CE [48,49] 
* CE 4 is refined into CE [50,51] 
* CE 5 is refined into CE [52,53,54] 


#### Refined cost equations start/2 
* CE 44: start(V1,V) = 0+ funmark(W1,X1,Y1):1
     [Y1=0,W1=0,V1=0] 
* CE 45: start(V1,V) = 0+ funmark(W1,X1,Y1):2
     [Y1=1,W1=1,V1=1] 
* CE 46: start(V1,V) = 0+ funmark(V1,W1,X1):3
     [X1>=V1+1,V1>=0,X1=V1+W1+1] 
* CE 47: start(V1,V) = 0+ funmark(V1,W1,X1):4
     [V1>=0] 
* CE 48: start(V1,V) = 0+ fun1(W1,X1):1
     [X1=1,W1=1,V1=1] 
* CE 49: start(V1,V) = 0+ fun1(W1,X1):2
     [X1>=1,X1=W1+1,X1=V1+1] 
* CE 50: start(V1,V) = 0+ fun2(W1,X1):1
     [X1=1,W1=1,V1=1] 
* CE 51: start(V1,V) = 0+ fun2(W1,X1):2
     [X1>=1,X1=W1+1,X1=V1+1] 
* CE 52: start(V1,V) = 0+ fun3(V1,W1):1
     [V1>=2,W1=1] 
* CE 53: start(V1,V) = 0+ fun3(V1,W1):2
     [V1>=2,W1=2] 
* CE 54: start(V1,V) = 0+ fun3(W1,X1):3
     [X1>=1,X1=W1+1,X1=V1+1] 

### Cost equations --> "Loop" of start/2 
* CEs [45,48,50] --> Loop 34 
* CEs [44,46,49,51,52,53,54] --> Loop 35 
* CEs [47] --> Loop 36 

#### Loops of start/2 
* Loop 34: start(V1,V) [V1=1] 
* Loop 35: start(V1,V) [V1>=0] 
* Loop 36: start(V1,V) [V1>=0] 

### Ranking functions of CR start(V1,V) 

#### Partial ranking functions of CR start(V1,V) 


### Resulting Chains:start(V1,V) 
* [36]...
* [35]
* [34]


### Merging Chains  start/2 into  External patterns of execution 
* [[34],[35]] --> 1 
* [[36]] --> 2 


Computing Bounds
=====================================

#### Cost of chains of fun2(V1,Out):
* Chain [17]: 1
  with precondition: [V1=1,Out=1] 

* Chain [16]: 1
  with precondition: [V1+1=Out,V1>=0] 


#### Cost of chains of fun1(V1,Out):
* Chain [19]: 2
  with precondition: [V1=1,Out=1] 

* Chain [18]: 2
  with precondition: [V1+1=Out,V1>=0] 


#### Cost of chains of fun3(V1,Out):
* Chain [22]: 3
  with precondition: [Out=1,V1>=2] 

* Chain [21]: 3
  with precondition: [Out=2,V1>=2] 

* Chain [20]: 1
  with precondition: [V1+1=Out,V1>=0] 


#### Cost of loops [23,24,25,26,27,28,29,30] 

 * loop 23:funmark(A,B,C) -> [funmark(A',B',C'),funmark(A'2,B'2,C'2),funmark(A'3,B'3,C'3),funmark(A'4,B'4,C'4),funmark(A'5,B'5,C'5)] 
1
 * loop 24:funmark(A,B,C) -> [funmark(A',B',C'),funmark(A'2,B'2,C'2),funmark(A'3,B'3,C'3)] 
1
 * loop 25:funmark(A,B,C) -> [funmark(A',B',C')] 
3
 * loop 26:funmark(A,B,C) -> [funmark(A',B',C')] 
4
 * loop 27:funmark(A,B,C) -> [funmark(A',B',C')] 
4
 * loop 28:funmark(A,B,C) -> [funmark(A',B',C')] 
3
 * loop 29:funmark(A,B,C) -> [funmark(A',B',C')] 
1
 * loop 30:funmark(A,B,C) -> [funmark(A',B',C')] 
1
#### Cost of phase [23,24,25,26,27,28,29,30]:funmark(A,B,C) -> [] 
4*it(23)+14*it(25)+2*it([31])+1*it([32])+0
#### Cost of chains of funmark(A,B,C):
* Chain [multiple([23,24,25,26,27,28,29,30],[[],[33],[32],[31]])]...: 4*it(23)+14*it(25)+2*it([31])+1*it([32])+0
  with precondition: [A>=0] 

* Chain [33]: 1
  with precondition: [A=0,C=0] 

* Chain [32]: 1
  with precondition: [A=1,C=1] 

* Chain [31]: 1
  with precondition: [A+B+1=C,A>=0,B>=0] 


#### Cost of chains of start(V1,V):
* Chain [36]...: 21*s(1)+0
  with precondition: [V1>=0] 

* Chain [35]: 3
  with precondition: [V1>=0] 

* Chain [34]: 2
  with precondition: [V1=1] 


Closed-form bounds of start(V1,V): 
-------------------------------------
* Chain [36]... with precondition: [V1>=0] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [35] with precondition: [V1>=0] 
    - Upper bound: 3 
    - Complexity: constant 
* Chain [34] with precondition: [V1=1] 
    - Upper bound: 2 
    - Complexity: constant 

### Maximum cost of start(V1,V): inf 
Asymptotic class: infinity 

Time statistics: 
-------------------------------------
* Partial evaluation computed in 12 ms.
* Invariants computed in 23 ms.
   - Backward Invariants 5 ms.
   - Transitive Invariants 6 ms.
* Refinement performed in 65 ms.
* Termination proved in 8 ms.
* Upper bounds computed in 100 ms.
   - Equation cost structures 16 ms.
   - Phase cost structures 90 ms.
   - Chain cost structures 0 ms.
   - Solving cost expressions 0 ms.
* Total analysis performed in 240 ms.


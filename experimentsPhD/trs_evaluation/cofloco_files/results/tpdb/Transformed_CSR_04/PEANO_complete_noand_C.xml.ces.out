
Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. recursive  : [fun/3]
1. recursive  : [fun1/4]
2. recursive  : [fun10/4]
3. recursive  : [fun11/3]
4. recursive  : [fun12/4]
5. recursive  : [fun13/4]
6. recursive  : [fun14/2]
7. recursive  : [fun15/4]
8. recursive  : [fun16/2]
9. recursive  : [fun17/4]
10. recursive  : [fun2/3]
11. recursive  : [fun3/4]
12. recursive  : [fun4/3]
13. recursive  : [fun5/3]
14. recursive  : [fun6/4]
15. recursive  : [fun7/2]
16. recursive  : [fun8/2]
17. recursive  : [fun9/3]
18. recursive  : [isNat/2]
19. recursive  : [isNatKind/2]
20. recursive  : [plus/3]
21. non_recursive  : [proper/2]
22. recursive  : [s/2]
23. recursive  : [top/2]
24. non_recursive  : [start/3]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into fun/3
1. SCC is partially evaluated into fun1/4
2. SCC is partially evaluated into fun10/4
3. SCC is partially evaluated into fun11/3
4. SCC is partially evaluated into fun12/4
5. SCC is partially evaluated into fun13/4
6. SCC is partially evaluated into fun14/2
7. SCC is partially evaluated into fun15/4
8. SCC is partially evaluated into fun16/2
9. SCC is partially evaluated into fun17/4
10. SCC is partially evaluated into fun2/3
11. SCC is partially evaluated into fun3/4
12. SCC is partially evaluated into fun4/3
13. SCC is partially evaluated into fun5/3
14. SCC is partially evaluated into fun6/4
15. SCC is partially evaluated into fun7/2
16. SCC is partially evaluated into fun8/2
17. SCC is partially evaluated into fun9/3
18. SCC is partially evaluated into isNat/2
19. SCC is partially evaluated into isNatKind/2
20. SCC is partially evaluated into plus/3
21. SCC is partially evaluated into proper/2
22. SCC is partially evaluated into s/2
23. SCC is partially evaluated into top/2
24. SCC is partially evaluated into start/3

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations fun/3 
* CE 31 is refined into CE [92] 
* CE 29 is refined into CE [93] 
* CE 30 is refined into CE [94] 


#### Refined cost equations fun/3 
* CE 92: fun(V,V1,Out) = 0
     [V1>=0,V>=0,Out=0] 
* CE 93: fun(V,V1,Out) = 1+ fun(W1,V1,X1)
     [W1>=0,V1>=0,X1+1=Out,W1+1=V] 
* CE 94: fun(V,V1,Out) = 1+ fun(W1,X1,Y1)
     [X1>=0,W1>=0,Y1+1=Out,X1+1=V1,W1+1=V] 

### Cost equations --> "Loop" of fun/3 
* CEs [93] --> Loop 67 
* CEs [94] --> Loop 68 
* CEs [92] --> Loop 69 

#### Loops of fun/3 
* Loop 67: fun(V,V1,Out)->  fun(V',V1,Out')
                  [V1>=0,V>=1,Out=Out'+1,V=V'+1] 
* Loop 68: fun(V,V1,Out)->  fun(V',V1',Out')
                  [V1>=1,V>=1,Out=Out'+1,V1=V1'+1,V=V'+1] 
* Loop 69: fun(V,V1,Out) [V1>=0,V>=0,Out=0] 

### Ranking functions of CR fun(V,V1,Out) 
* RF of phase [67,68]: [V]

#### Partial ranking functions of CR fun(V,V1,Out) 
* Partial RF of phase [67,68]:
  - RF of loop [67:1,68:1]:
    V
  - RF of loop [68:1]:
    V1


### Resulting Chains:fun(V,V1,Out) 
* [[67,68],69]
* [69]


### Merging Chains  fun/3 into  External patterns of execution 
* [[69]] --> 1 
* [[69,[67,68]]] --> 2 


### Specialization of cost equations fun1/4 
* CE 34 is refined into CE [95] 
* CE 33 is refined into CE [96] 
* CE 32 is refined into CE [97] 


#### Refined cost equations fun1/4 
* CE 95: fun1(V,V1,V2,Out) = 0
     [V2>=0,V1>=0,V>=0,Out=0] 
* CE 96: fun1(V,V1,V2,Out) = 1+ fun1(W2,V1,V2,X2)
     [W2>=0,V2>=0,V1>=0,X2+1=Out,W2+1=V] 
* CE 97: fun1(V,V1,V2,Out) = 1+ fun1(W2,X2,Y2,Z2)
     [Y2>=0,X2>=0,W2>=0,Z2+1=Out,Y2+1=V2,X2+1=V1,W2+1=V] 

### Cost equations --> "Loop" of fun1/4 
* CEs [96] --> Loop 70 
* CEs [97] --> Loop 71 
* CEs [95] --> Loop 72 

#### Loops of fun1/4 
* Loop 70: fun1(V,V1,V2,Out)->  fun1(V',V1,V2,Out')
                  [V2>=0,V1>=0,V>=1,Out=Out'+1,V=V'+1] 
* Loop 71: fun1(V,V1,V2,Out)->  fun1(V',V1',V2',Out')
                  [V2>=1,V1>=1,V>=1,Out=Out'+1,V2=V2'+1,V1=V1'+1,V=V'+1] 
* Loop 72: fun1(V,V1,V2,Out) [V2>=0,V1>=0,V>=0,Out=0] 

### Ranking functions of CR fun1(V,V1,V2,Out) 
* RF of phase [70,71]: [V]

#### Partial ranking functions of CR fun1(V,V1,V2,Out) 
* Partial RF of phase [70,71]:
  - RF of loop [70:1,71:1]:
    V
  - RF of loop [71:1]:
    V1
    V2


### Resulting Chains:fun1(V,V1,V2,Out) 
* [[70,71],72]
* [72]


### Merging Chains  fun1/4 into  External patterns of execution 
* [[72]] --> 1 
* [[72,[70,71]]] --> 2 


### Specialization of cost equations fun10/4 
* CE 70 is refined into CE [98] 
* CE 68 is refined into CE [99] 
* CE 69 is refined into CE [100] 


#### Refined cost equations fun10/4 
* CE 98: fun10(V,V1,V2,Out) = 0
     [V2>=0,V1>=0,V>=0,Out=0] 
* CE 99: fun10(V,V1,V2,Out) = 1+ fun10(W2,V1,V2,X2)
     [W2>=0,V2>=0,V1>=0,X2+1=Out,W2+1=V] 
* CE 100: fun10(V,V1,V2,Out) = 1+ fun10(W2,X2,Y2,Z2)
     [Y2>=0,X2>=0,W2>=0,Z2+1=Out,Y2+1=V2,X2+1=V1,W2+1=V] 

### Cost equations --> "Loop" of fun10/4 
* CEs [99] --> Loop 73 
* CEs [100] --> Loop 74 
* CEs [98] --> Loop 75 

#### Loops of fun10/4 
* Loop 73: fun10(V,V1,V2,Out)->  fun10(V',V1,V2,Out')
                  [V2>=0,V1>=0,V>=1,Out=Out'+1,V=V'+1] 
* Loop 74: fun10(V,V1,V2,Out)->  fun10(V',V1',V2',Out')
                  [V2>=1,V1>=1,V>=1,Out=Out'+1,V2=V2'+1,V1=V1'+1,V=V'+1] 
* Loop 75: fun10(V,V1,V2,Out) [V2>=0,V1>=0,V>=0,Out=0] 

### Ranking functions of CR fun10(V,V1,V2,Out) 
* RF of phase [73,74]: [V]

#### Partial ranking functions of CR fun10(V,V1,V2,Out) 
* Partial RF of phase [73,74]:
  - RF of loop [73:1,74:1]:
    V
  - RF of loop [74:1]:
    V1
    V2


### Resulting Chains:fun10(V,V1,V2,Out) 
* [[73,74],75]
* [75]


### Merging Chains  fun10/4 into  External patterns of execution 
* [[75]] --> 1 
* [[75,[73,74]]] --> 2 


### Specialization of cost equations fun11/3 
* CE 73 is refined into CE [101] 
* CE 72 is refined into CE [102] 
* CE 71 is refined into CE [103] 


#### Refined cost equations fun11/3 
* CE 101: fun11(V,V1,Out) = 0
     [V1>=0,V>=0,Out=0] 
* CE 102: fun11(V,V1,Out) = 1+ fun11(W1,V1,X1)
     [W1>=0,V1>=0,X1+1=Out,W1+1=V] 
* CE 103: fun11(V,V1,Out) = 1+ fun11(W1,X1,Y1)
     [X1>=0,W1>=0,Y1+1=Out,X1+1=V1,W1+1=V] 

### Cost equations --> "Loop" of fun11/3 
* CEs [102] --> Loop 76 
* CEs [103] --> Loop 77 
* CEs [101] --> Loop 78 

#### Loops of fun11/3 
* Loop 76: fun11(V,V1,Out)->  fun11(V',V1,Out')
                  [V1>=0,V>=1,Out=Out'+1,V=V'+1] 
* Loop 77: fun11(V,V1,Out)->  fun11(V',V1',Out')
                  [V1>=1,V>=1,Out=Out'+1,V1=V1'+1,V=V'+1] 
* Loop 78: fun11(V,V1,Out) [V1>=0,V>=0,Out=0] 

### Ranking functions of CR fun11(V,V1,Out) 
* RF of phase [76,77]: [V]

#### Partial ranking functions of CR fun11(V,V1,Out) 
* Partial RF of phase [76,77]:
  - RF of loop [76:1,77:1]:
    V
  - RF of loop [77:1]:
    V1


### Resulting Chains:fun11(V,V1,Out) 
* [[76,77],78]
* [78]


### Merging Chains  fun11/3 into  External patterns of execution 
* [[78]] --> 1 
* [[78,[76,77]]] --> 2 


### Specialization of cost equations fun12/4 
* CE 76 is refined into CE [104] 
* CE 74 is refined into CE [105] 
* CE 75 is refined into CE [106] 


#### Refined cost equations fun12/4 
* CE 104: fun12(V,V1,V2,Out) = 0
     [V2>=0,V1>=0,V>=0,Out=0] 
* CE 105: fun12(V,V1,V2,Out) = 1+ fun12(W2,V1,V2,X2)
     [W2>=0,V2>=0,V1>=0,X2+1=Out,W2+1=V] 
* CE 106: fun12(V,V1,V2,Out) = 1+ fun12(W2,X2,Y2,Z2)
     [Y2>=0,X2>=0,W2>=0,Z2+1=Out,Y2+1=V2,X2+1=V1,W2+1=V] 

### Cost equations --> "Loop" of fun12/4 
* CEs [105] --> Loop 79 
* CEs [106] --> Loop 80 
* CEs [104] --> Loop 81 

#### Loops of fun12/4 
* Loop 79: fun12(V,V1,V2,Out)->  fun12(V',V1,V2,Out')
                  [V2>=0,V1>=0,V>=1,Out=Out'+1,V=V'+1] 
* Loop 80: fun12(V,V1,V2,Out)->  fun12(V',V1',V2',Out')
                  [V2>=1,V1>=1,V>=1,Out=Out'+1,V2=V2'+1,V1=V1'+1,V=V'+1] 
* Loop 81: fun12(V,V1,V2,Out) [V2>=0,V1>=0,V>=0,Out=0] 

### Ranking functions of CR fun12(V,V1,V2,Out) 
* RF of phase [79,80]: [V]

#### Partial ranking functions of CR fun12(V,V1,V2,Out) 
* Partial RF of phase [79,80]:
  - RF of loop [79:1,80:1]:
    V
  - RF of loop [80:1]:
    V1
    V2


### Resulting Chains:fun12(V,V1,V2,Out) 
* [[79,80],81]
* [81]


### Merging Chains  fun12/4 into  External patterns of execution 
* [[81]] --> 1 
* [[81,[79,80]]] --> 2 


### Specialization of cost equations fun13/4 
* CE 79 is refined into CE [107] 
* CE 77 is refined into CE [108] 
* CE 78 is refined into CE [109] 


#### Refined cost equations fun13/4 
* CE 107: fun13(V,V1,V2,Out) = 0
     [V2>=0,V1>=0,V>=0,Out=0] 
* CE 108: fun13(V,V1,V2,Out) = 1+ fun13(W2,V1,V2,X2)
     [W2>=0,V2>=0,V1>=0,X2+1=Out,W2+1=V] 
* CE 109: fun13(V,V1,V2,Out) = 1+ fun13(W2,X2,Y2,Z2)
     [Y2>=0,X2>=0,W2>=0,Z2+1=Out,Y2+1=V2,X2+1=V1,W2+1=V] 

### Cost equations --> "Loop" of fun13/4 
* CEs [108] --> Loop 82 
* CEs [109] --> Loop 83 
* CEs [107] --> Loop 84 

#### Loops of fun13/4 
* Loop 82: fun13(V,V1,V2,Out)->  fun13(V',V1,V2,Out')
                  [V2>=0,V1>=0,V>=1,Out=Out'+1,V=V'+1] 
* Loop 83: fun13(V,V1,V2,Out)->  fun13(V',V1',V2',Out')
                  [V2>=1,V1>=1,V>=1,Out=Out'+1,V2=V2'+1,V1=V1'+1,V=V'+1] 
* Loop 84: fun13(V,V1,V2,Out) [V2>=0,V1>=0,V>=0,Out=0] 

### Ranking functions of CR fun13(V,V1,V2,Out) 
* RF of phase [82,83]: [V]

#### Partial ranking functions of CR fun13(V,V1,V2,Out) 
* Partial RF of phase [82,83]:
  - RF of loop [82:1,83:1]:
    V
  - RF of loop [83:1]:
    V1
    V2


### Resulting Chains:fun13(V,V1,V2,Out) 
* [[82,83],84]
* [84]


### Merging Chains  fun13/4 into  External patterns of execution 
* [[84]] --> 1 
* [[84,[82,83]]] --> 2 


### Specialization of cost equations fun14/2 
* CE 81 is refined into CE [110] 
* CE 80 is refined into CE [111] 


#### Refined cost equations fun14/2 
* CE 110: fun14(V,Out) = 0
     [V>=0,Out=0] 
* CE 111: fun14(V,Out) = 1+ fun14(W,X)
     [W>=0,X+1=Out,W+1=V] 

### Cost equations --> "Loop" of fun14/2 
* CEs [111] --> Loop 85 
* CEs [110] --> Loop 86 

#### Loops of fun14/2 
* Loop 85: fun14(V,Out)->  fun14(V',Out')
                  [V'>=0,Out=Out'+1,V'+1=V] 
* Loop 86: fun14(V,Out) [V>=0,Out=0] 

### Ranking functions of CR fun14(V,Out) 
* RF of phase [85]: [V]

#### Partial ranking functions of CR fun14(V,Out) 
* Partial RF of phase [85]:
  - RF of loop [85:1]:
    V


### Resulting Chains:fun14(V,Out) 
* [[85],86]
* [86]


### Merging Chains  fun14/2 into  External patterns of execution 
* [[86]] --> 1 
* [[86,[85]]] --> 2 


### Specialization of cost equations fun15/4 
* CE 84 is refined into CE [112] 
* CE 83 is refined into CE [113] 
* CE 82 is refined into CE [114] 


#### Refined cost equations fun15/4 
* CE 112: fun15(V,V1,V2,Out) = 0
     [V2>=0,V1>=0,V>=0,Out=0] 
* CE 113: fun15(V,V1,V2,Out) = 1+ fun15(W2,V1,V2,X2)
     [W2>=0,V2>=0,V1>=0,X2+1=Out,W2+1=V] 
* CE 114: fun15(V,V1,V2,Out) = 1+ fun15(W2,X2,Y2,Z2)
     [Y2>=0,X2>=0,W2>=0,Z2+1=Out,Y2+1=V2,X2+1=V1,W2+1=V] 

### Cost equations --> "Loop" of fun15/4 
* CEs [113] --> Loop 87 
* CEs [114] --> Loop 88 
* CEs [112] --> Loop 89 

#### Loops of fun15/4 
* Loop 87: fun15(V,V1,V2,Out)->  fun15(V',V1,V2,Out')
                  [V2>=0,V1>=0,V>=1,Out=Out'+1,V=V'+1] 
* Loop 88: fun15(V,V1,V2,Out)->  fun15(V',V1',V2',Out')
                  [V2>=1,V1>=1,V>=1,Out=Out'+1,V2=V2'+1,V1=V1'+1,V=V'+1] 
* Loop 89: fun15(V,V1,V2,Out) [V2>=0,V1>=0,V>=0,Out=0] 

### Ranking functions of CR fun15(V,V1,V2,Out) 
* RF of phase [87,88]: [V]

#### Partial ranking functions of CR fun15(V,V1,V2,Out) 
* Partial RF of phase [87,88]:
  - RF of loop [87:1,88:1]:
    V
  - RF of loop [88:1]:
    V1
    V2


### Resulting Chains:fun15(V,V1,V2,Out) 
* [[87,88],89]
* [89]


### Merging Chains  fun15/4 into  External patterns of execution 
* [[89]] --> 1 
* [[89,[87,88]]] --> 2 


### Specialization of cost equations fun16/2 
* CE 86 is refined into CE [115] 
* CE 85 is refined into CE [116] 


#### Refined cost equations fun16/2 
* CE 115: fun16(V,Out) = 0
     [V>=0,Out=0] 
* CE 116: fun16(V,Out) = 1+ fun16(W,X)
     [W>=0,X+1=Out,W+1=V] 

### Cost equations --> "Loop" of fun16/2 
* CEs [116] --> Loop 90 
* CEs [115] --> Loop 91 

#### Loops of fun16/2 
* Loop 90: fun16(V,Out)->  fun16(V',Out')
                  [V'>=0,Out=Out'+1,V'+1=V] 
* Loop 91: fun16(V,Out) [V>=0,Out=0] 

### Ranking functions of CR fun16(V,Out) 
* RF of phase [90]: [V]

#### Partial ranking functions of CR fun16(V,Out) 
* Partial RF of phase [90]:
  - RF of loop [90:1]:
    V


### Resulting Chains:fun16(V,Out) 
* [[90],91]
* [91]


### Merging Chains  fun16/2 into  External patterns of execution 
* [[91]] --> 1 
* [[91,[90]]] --> 2 


### Specialization of cost equations fun17/4 
* CE 91 is refined into CE [117] 
* CE 90 is refined into CE [118] 
* CE 89 is refined into CE [119] 


#### Refined cost equations fun17/4 
* CE 117: fun17(V,V1,V2,Out) = 0
     [V2>=0,V1>=0,V>=0,Out=0] 
* CE 118: fun17(V,V1,V2,Out) = 1+ fun17(W2,V1,V2,X2)
     [W2>=0,V2>=0,V1>=0,X2+1=Out,W2+1=V] 
* CE 119: fun17(V,V1,V2,Out) = 1+ fun17(W2,X2,Y2,Z2)
     [Y2>=0,X2>=0,W2>=0,Z2+1=Out,Y2+1=V2,X2+1=V1,W2+1=V] 

### Cost equations --> "Loop" of fun17/4 
* CEs [118] --> Loop 92 
* CEs [119] --> Loop 93 
* CEs [117] --> Loop 94 

#### Loops of fun17/4 
* Loop 92: fun17(V,V1,V2,Out)->  fun17(V',V1,V2,Out')
                  [V2>=0,V1>=0,V>=1,Out=Out'+1,V=V'+1] 
* Loop 93: fun17(V,V1,V2,Out)->  fun17(V',V1',V2',Out')
                  [V2>=1,V1>=1,V>=1,Out=Out'+1,V2=V2'+1,V1=V1'+1,V=V'+1] 
* Loop 94: fun17(V,V1,V2,Out) [V2>=0,V1>=0,V>=0,Out=0] 

### Ranking functions of CR fun17(V,V1,V2,Out) 
* RF of phase [92,93]: [V]

#### Partial ranking functions of CR fun17(V,V1,V2,Out) 
* Partial RF of phase [92,93]:
  - RF of loop [92:1,93:1]:
    V
  - RF of loop [93:1]:
    V1
    V2


### Resulting Chains:fun17(V,V1,V2,Out) 
* [[92,93],94]
* [94]


### Merging Chains  fun17/4 into  External patterns of execution 
* [[94]] --> 1 
* [[94,[92,93]]] --> 2 


### Specialization of cost equations fun2/3 
* CE 39 is refined into CE [120] 
* CE 37 is refined into CE [121] 
* CE 38 is refined into CE [122] 


#### Refined cost equations fun2/3 
* CE 120: fun2(V,V1,Out) = 0
     [V1>=0,V>=0,Out=0] 
* CE 121: fun2(V,V1,Out) = 1+ fun2(W1,V1,X1)
     [W1>=0,V1>=0,X1+1=Out,W1+1=V] 
* CE 122: fun2(V,V1,Out) = 1+ fun2(W1,X1,Y1)
     [X1>=0,W1>=0,Y1+1=Out,X1+1=V1,W1+1=V] 

### Cost equations --> "Loop" of fun2/3 
* CEs [121] --> Loop 95 
* CEs [122] --> Loop 96 
* CEs [120] --> Loop 97 

#### Loops of fun2/3 
* Loop 95: fun2(V,V1,Out)->  fun2(V',V1,Out')
                  [V1>=0,V>=1,Out=Out'+1,V=V'+1] 
* Loop 96: fun2(V,V1,Out)->  fun2(V',V1',Out')
                  [V1>=1,V>=1,Out=Out'+1,V1=V1'+1,V=V'+1] 
* Loop 97: fun2(V,V1,Out) [V1>=0,V>=0,Out=0] 

### Ranking functions of CR fun2(V,V1,Out) 
* RF of phase [95,96]: [V]

#### Partial ranking functions of CR fun2(V,V1,Out) 
* Partial RF of phase [95,96]:
  - RF of loop [95:1,96:1]:
    V
  - RF of loop [96:1]:
    V1


### Resulting Chains:fun2(V,V1,Out) 
* [[95,96],97]
* [97]


### Merging Chains  fun2/3 into  External patterns of execution 
* [[97]] --> 1 
* [[97,[95,96]]] --> 2 


### Specialization of cost equations fun3/4 
* CE 42 is refined into CE [123] 
* CE 40 is refined into CE [124] 
* CE 41 is refined into CE [125] 


#### Refined cost equations fun3/4 
* CE 123: fun3(V,V1,V2,Out) = 0
     [V2>=0,V1>=0,V>=0,Out=0] 
* CE 124: fun3(V,V1,V2,Out) = 1+ fun3(W2,V1,V2,X2)
     [W2>=0,V2>=0,V1>=0,X2+1=Out,W2+1=V] 
* CE 125: fun3(V,V1,V2,Out) = 1+ fun3(W2,X2,Y2,Z2)
     [Y2>=0,X2>=0,W2>=0,Z2+1=Out,Y2+1=V2,X2+1=V1,W2+1=V] 

### Cost equations --> "Loop" of fun3/4 
* CEs [124] --> Loop 98 
* CEs [125] --> Loop 99 
* CEs [123] --> Loop 100 

#### Loops of fun3/4 
* Loop 98: fun3(V,V1,V2,Out)->  fun3(V',V1,V2,Out')
                  [V2>=0,V1>=0,V>=1,Out=Out'+1,V=V'+1] 
* Loop 99: fun3(V,V1,V2,Out)->  fun3(V',V1',V2',Out')
                  [V2>=1,V1>=1,V>=1,Out=Out'+1,V2=V2'+1,V1=V1'+1,V=V'+1] 
* Loop 100: fun3(V,V1,V2,Out) [V2>=0,V1>=0,V>=0,Out=0] 

### Ranking functions of CR fun3(V,V1,V2,Out) 
* RF of phase [98,99]: [V]

#### Partial ranking functions of CR fun3(V,V1,V2,Out) 
* Partial RF of phase [98,99]:
  - RF of loop [98:1,99:1]:
    V
  - RF of loop [99:1]:
    V1
    V2


### Resulting Chains:fun3(V,V1,V2,Out) 
* [[98,99],100]
* [100]


### Merging Chains  fun3/4 into  External patterns of execution 
* [[100]] --> 1 
* [[100,[98,99]]] --> 2 


### Specialization of cost equations fun4/3 
* CE 45 is refined into CE [126] 
* CE 44 is refined into CE [127] 
* CE 43 is refined into CE [128] 


#### Refined cost equations fun4/3 
* CE 126: fun4(V,V1,Out) = 0
     [V1>=0,V>=0,Out=0] 
* CE 127: fun4(V,V1,Out) = 1+ fun4(W1,V1,X1)
     [W1>=0,V1>=0,X1+1=Out,W1+1=V] 
* CE 128: fun4(V,V1,Out) = 1+ fun4(W1,X1,Y1)
     [X1>=0,W1>=0,Y1+1=Out,X1+1=V1,W1+1=V] 

### Cost equations --> "Loop" of fun4/3 
* CEs [127] --> Loop 101 
* CEs [128] --> Loop 102 
* CEs [126] --> Loop 103 

#### Loops of fun4/3 
* Loop 101: fun4(V,V1,Out)->  fun4(V',V1,Out')
                  [V1>=0,V>=1,Out=Out'+1,V=V'+1] 
* Loop 102: fun4(V,V1,Out)->  fun4(V',V1',Out')
                  [V1>=1,V>=1,Out=Out'+1,V1=V1'+1,V=V'+1] 
* Loop 103: fun4(V,V1,Out) [V1>=0,V>=0,Out=0] 

### Ranking functions of CR fun4(V,V1,Out) 
* RF of phase [101,102]: [V]

#### Partial ranking functions of CR fun4(V,V1,Out) 
* Partial RF of phase [101,102]:
  - RF of loop [101:1,102:1]:
    V
  - RF of loop [102:1]:
    V1


### Resulting Chains:fun4(V,V1,Out) 
* [[101,102],103]
* [103]


### Merging Chains  fun4/3 into  External patterns of execution 
* [[103]] --> 1 
* [[103,[101,102]]] --> 2 


### Specialization of cost equations fun5/3 
* CE 52 is refined into CE [129] 
* CE 50 is refined into CE [130] 
* CE 51 is refined into CE [131] 


#### Refined cost equations fun5/3 
* CE 129: fun5(V,V1,Out) = 0
     [V1>=0,V>=0,Out=0] 
* CE 130: fun5(V,V1,Out) = 1+ fun5(W1,V1,X1)
     [W1>=0,V1>=0,X1+1=Out,W1+1=V] 
* CE 131: fun5(V,V1,Out) = 1+ fun5(W1,X1,Y1)
     [X1>=0,W1>=0,Y1+1=Out,X1+1=V1,W1+1=V] 

### Cost equations --> "Loop" of fun5/3 
* CEs [130] --> Loop 104 
* CEs [131] --> Loop 105 
* CEs [129] --> Loop 106 

#### Loops of fun5/3 
* Loop 104: fun5(V,V1,Out)->  fun5(V',V1,Out')
                  [V1>=0,V>=1,Out=Out'+1,V=V'+1] 
* Loop 105: fun5(V,V1,Out)->  fun5(V',V1',Out')
                  [V1>=1,V>=1,Out=Out'+1,V1=V1'+1,V=V'+1] 
* Loop 106: fun5(V,V1,Out) [V1>=0,V>=0,Out=0] 

### Ranking functions of CR fun5(V,V1,Out) 
* RF of phase [104,105]: [V]

#### Partial ranking functions of CR fun5(V,V1,Out) 
* Partial RF of phase [104,105]:
  - RF of loop [104:1,105:1]:
    V
  - RF of loop [105:1]:
    V1


### Resulting Chains:fun5(V,V1,Out) 
* [[104,105],106]
* [106]


### Merging Chains  fun5/3 into  External patterns of execution 
* [[106]] --> 1 
* [[106,[104,105]]] --> 2 


### Specialization of cost equations fun6/4 
* CE 60 is refined into CE [132] 
* CE 58 is refined into CE [133] 
* CE 59 is refined into CE [134] 


#### Refined cost equations fun6/4 
* CE 132: fun6(V,V1,V2,Out) = 0
     [V2>=0,V1>=0,V>=0,Out=0] 
* CE 133: fun6(V,V1,V2,Out) = 1+ fun6(W2,V1,V2,X2)
     [W2>=0,V2>=0,V1>=0,X2+1=Out,W2+1=V] 
* CE 134: fun6(V,V1,V2,Out) = 1+ fun6(W2,X2,Y2,Z2)
     [Y2>=0,X2>=0,W2>=0,Z2+1=Out,Y2+1=V2,X2+1=V1,W2+1=V] 

### Cost equations --> "Loop" of fun6/4 
* CEs [133] --> Loop 107 
* CEs [134] --> Loop 108 
* CEs [132] --> Loop 109 

#### Loops of fun6/4 
* Loop 107: fun6(V,V1,V2,Out)->  fun6(V',V1,V2,Out')
                  [V2>=0,V1>=0,V>=1,Out=Out'+1,V=V'+1] 
* Loop 108: fun6(V,V1,V2,Out)->  fun6(V',V1',V2',Out')
                  [V2>=1,V1>=1,V>=1,Out=Out'+1,V2=V2'+1,V1=V1'+1,V=V'+1] 
* Loop 109: fun6(V,V1,V2,Out) [V2>=0,V1>=0,V>=0,Out=0] 

### Ranking functions of CR fun6(V,V1,V2,Out) 
* RF of phase [107,108]: [V]

#### Partial ranking functions of CR fun6(V,V1,V2,Out) 
* Partial RF of phase [107,108]:
  - RF of loop [107:1,108:1]:
    V
  - RF of loop [108:1]:
    V1
    V2


### Resulting Chains:fun6(V,V1,V2,Out) 
* [[107,108],109]
* [109]


### Merging Chains  fun6/4 into  External patterns of execution 
* [[109]] --> 1 
* [[109,[107,108]]] --> 2 


### Specialization of cost equations fun7/2 
* CE 62 is refined into CE [135] 
* CE 61 is refined into CE [136] 


#### Refined cost equations fun7/2 
* CE 135: fun7(V,Out) = 0
     [V>=0,Out=0] 
* CE 136: fun7(V,Out) = 1+ fun7(W,X)
     [W>=0,X+1=Out,W+1=V] 

### Cost equations --> "Loop" of fun7/2 
* CEs [136] --> Loop 110 
* CEs [135] --> Loop 111 

#### Loops of fun7/2 
* Loop 110: fun7(V,Out)->  fun7(V',Out')
                  [V'>=0,Out=Out'+1,V'+1=V] 
* Loop 111: fun7(V,Out) [V>=0,Out=0] 

### Ranking functions of CR fun7(V,Out) 
* RF of phase [110]: [V]

#### Partial ranking functions of CR fun7(V,Out) 
* Partial RF of phase [110]:
  - RF of loop [110:1]:
    V


### Resulting Chains:fun7(V,Out) 
* [[110],111]
* [111]


### Merging Chains  fun7/2 into  External patterns of execution 
* [[111]] --> 1 
* [[111,[110]]] --> 2 


### Specialization of cost equations fun8/2 
* CE 64 is refined into CE [137] 
* CE 63 is refined into CE [138] 


#### Refined cost equations fun8/2 
* CE 137: fun8(V,Out) = 0
     [V>=0,Out=0] 
* CE 138: fun8(V,Out) = 1+ fun8(W,X)
     [W>=0,X+1=Out,W+1=V] 

### Cost equations --> "Loop" of fun8/2 
* CEs [138] --> Loop 112 
* CEs [137] --> Loop 113 

#### Loops of fun8/2 
* Loop 112: fun8(V,Out)->  fun8(V',Out')
                  [V'>=0,Out=Out'+1,V'+1=V] 
* Loop 113: fun8(V,Out) [V>=0,Out=0] 

### Ranking functions of CR fun8(V,Out) 
* RF of phase [112]: [V]

#### Partial ranking functions of CR fun8(V,Out) 
* Partial RF of phase [112]:
  - RF of loop [112:1]:
    V


### Resulting Chains:fun8(V,Out) 
* [[112],113]
* [113]


### Merging Chains  fun8/2 into  External patterns of execution 
* [[113]] --> 1 
* [[113,[112]]] --> 2 


### Specialization of cost equations fun9/3 
* CE 67 is refined into CE [139] 
* CE 66 is refined into CE [140] 
* CE 65 is refined into CE [141] 


#### Refined cost equations fun9/3 
* CE 139: fun9(V,V1,Out) = 0
     [V1>=0,V>=0,Out=0] 
* CE 140: fun9(V,V1,Out) = 1+ fun9(W1,V1,X1)
     [W1>=0,V1>=0,X1+1=Out,W1+1=V] 
* CE 141: fun9(V,V1,Out) = 1+ fun9(W1,X1,Y1)
     [X1>=0,W1>=0,Y1+1=Out,X1+1=V1,W1+1=V] 

### Cost equations --> "Loop" of fun9/3 
* CEs [140] --> Loop 114 
* CEs [141] --> Loop 115 
* CEs [139] --> Loop 116 

#### Loops of fun9/3 
* Loop 114: fun9(V,V1,Out)->  fun9(V',V1,Out')
                  [V1>=0,V>=1,Out=Out'+1,V=V'+1] 
* Loop 115: fun9(V,V1,Out)->  fun9(V',V1',Out')
                  [V1>=1,V>=1,Out=Out'+1,V1=V1'+1,V=V'+1] 
* Loop 116: fun9(V,V1,Out) [V1>=0,V>=0,Out=0] 

### Ranking functions of CR fun9(V,V1,Out) 
* RF of phase [114,115]: [V]

#### Partial ranking functions of CR fun9(V,V1,Out) 
* Partial RF of phase [114,115]:
  - RF of loop [114:1,115:1]:
    V
  - RF of loop [115:1]:
    V1


### Resulting Chains:fun9(V,V1,Out) 
* [[114,115],116]
* [116]


### Merging Chains  fun9/3 into  External patterns of execution 
* [[116]] --> 1 
* [[116,[114,115]]] --> 2 


### Specialization of cost equations isNat/2 
* CE 36 is refined into CE [142] 
* CE 35 is refined into CE [143] 


#### Refined cost equations isNat/2 
* CE 142: isNat(V,Out) = 0
     [V>=0,Out=0] 
* CE 143: isNat(V,Out) = 1+ isNat(W,X)
     [W>=0,X+1=Out,W+1=V] 

### Cost equations --> "Loop" of isNat/2 
* CEs [143] --> Loop 117 
* CEs [142] --> Loop 118 

#### Loops of isNat/2 
* Loop 117: isNat(V,Out)->  isNat(V',Out')
                  [V'>=0,Out=Out'+1,V'+1=V] 
* Loop 118: isNat(V,Out) [V>=0,Out=0] 

### Ranking functions of CR isNat(V,Out) 
* RF of phase [117]: [V]

#### Partial ranking functions of CR isNat(V,Out) 
* Partial RF of phase [117]:
  - RF of loop [117:1]:
    V


### Resulting Chains:isNat(V,Out) 
* [[117],118]
* [118]


### Merging Chains  isNat/2 into  External patterns of execution 
* [[118]] --> 1 
* [[118,[117]]] --> 2 


### Specialization of cost equations isNatKind/2 
* CE 57 is refined into CE [144] 
* CE 56 is refined into CE [145] 


#### Refined cost equations isNatKind/2 
* CE 144: isNatKind(V,Out) = 0
     [V>=0,Out=0] 
* CE 145: isNatKind(V,Out) = 1+ isNatKind(W,X)
     [W>=0,X+1=Out,W+1=V] 

### Cost equations --> "Loop" of isNatKind/2 
* CEs [145] --> Loop 119 
* CEs [144] --> Loop 120 

#### Loops of isNatKind/2 
* Loop 119: isNatKind(V,Out)->  isNatKind(V',Out')
                  [V'>=0,Out=Out'+1,V'+1=V] 
* Loop 120: isNatKind(V,Out) [V>=0,Out=0] 

### Ranking functions of CR isNatKind(V,Out) 
* RF of phase [119]: [V]

#### Partial ranking functions of CR isNatKind(V,Out) 
* Partial RF of phase [119]:
  - RF of loop [119:1]:
    V


### Resulting Chains:isNatKind(V,Out) 
* [[119],120]
* [120]


### Merging Chains  isNatKind/2 into  External patterns of execution 
* [[120]] --> 1 
* [[120,[119]]] --> 2 


### Specialization of cost equations plus/3 
* CE 49 is refined into CE [146] 
* CE 47 is refined into CE [147] 
* CE 48 is refined into CE [148] 
* CE 46 is refined into CE [149] 


#### Refined cost equations plus/3 
* CE 146: plus(V,V1,Out) = 0
     [V1>=0,V>=0,Out=0] 
* CE 147: plus(V,V1,Out) = 1+ plus(V,W1,X1)
     [W1>=0,V>=0,X1+1=Out,W1+1=V1] 
* CE 148: plus(V,V1,Out) = 1+ plus(W1,V1,X1)
     [W1>=0,V1>=0,X1+1=Out,W1+1=V] 
* CE 149: plus(V,V1,Out) = 1+ plus(W1,X1,Y1)
     [X1>=0,W1>=0,Y1+1=Out,X1+1=V1,W1+1=V] 

### Cost equations --> "Loop" of plus/3 
* CEs [147] --> Loop 121 
* CEs [148] --> Loop 122 
* CEs [149] --> Loop 123 
* CEs [146] --> Loop 124 

#### Loops of plus/3 
* Loop 121: plus(V,V1,Out)->  plus(V,V1',Out')
                  [V1>=1,V>=0,Out=Out'+1,V1=V1'+1] 
* Loop 122: plus(V,V1,Out)->  plus(V',V1,Out')
                  [V1>=0,V>=1,Out=Out'+1,V=V'+1] 
* Loop 123: plus(V,V1,Out)->  plus(V',V1',Out')
                  [V1>=1,V>=1,Out=Out'+1,V1=V1'+1,V=V'+1] 
* Loop 124: plus(V,V1,Out) [V1>=0,V>=0,Out=0] 

### Ranking functions of CR plus(V,V1,Out) 
* RF of phase [121,122,123]: [V+V1]

#### Partial ranking functions of CR plus(V,V1,Out) 
* Partial RF of phase [121,122,123]:
  - RF of loop [121:1,123:1]:
    V1
  - RF of loop [122:1,123:1]:
    V


### Resulting Chains:plus(V,V1,Out) 
* [[121,122,123],124]
* [124]


### Merging Chains  plus/3 into  External patterns of execution 
* [[124]] --> 1 
* [[124,[121,122,123]]] --> 2 


### Specialization of cost equations proper/2 
* CE 55 is refined into CE [150] 
* CE 53 is refined into CE [151] 
* CE 54 is refined into CE [152] 


#### Refined cost equations proper/2 
* CE 150: proper(V,Out) = 0
     [V>=0,Out=0] 
* CE 151: proper(V,Out) = 1
     [Out=2,V=1] 
* CE 152: proper(V,Out) = 1
     [Out=1,V=0] 

### Cost equations --> "Loop" of proper/2 
* CEs [150] --> Loop 125 
* CEs [151] --> Loop 126 
* CEs [152] --> Loop 127 

#### Loops of proper/2 
* Loop 125: proper(V,Out) [V>=0,Out=0] 
* Loop 126: proper(V,Out) [Out=2,V=1] 
* Loop 127: proper(V,Out) [Out=1,V=0] 

### Ranking functions of CR proper(V,Out) 

#### Partial ranking functions of CR proper(V,Out) 


### Resulting Chains:proper(V,Out) 
* [127]
* [126]
* [125]


### Merging Chains  proper/2 into  External patterns of execution 
* [[127]] --> 1 
* [[126]] --> 2 
* [[125]] --> 3 


### Specialization of cost equations s/2 
* CE 88 is refined into CE [153] 
* CE 87 is refined into CE [154] 


#### Refined cost equations s/2 
* CE 153: s(V,Out) = 0
     [V>=0,Out=0] 
* CE 154: s(V,Out) = 1+ s(W,X)
     [W>=0,X+1=Out,W+1=V] 

### Cost equations --> "Loop" of s/2 
* CEs [154] --> Loop 128 
* CEs [153] --> Loop 129 

#### Loops of s/2 
* Loop 128: s(V,Out)->  s(V',Out')
                  [V'>=0,Out=Out'+1,V'+1=V] 
* Loop 129: s(V,Out) [V>=0,Out=0] 

### Ranking functions of CR s(V,Out) 
* RF of phase [128]: [V]

#### Partial ranking functions of CR s(V,Out) 
* Partial RF of phase [128]:
  - RF of loop [128:1]:
    V


### Resulting Chains:s(V,Out) 
* [[128],129]
* [129]


### Merging Chains  s/2 into  External patterns of execution 
* [[129]] --> 1 
* [[129,[128]]] --> 2 


### Specialization of cost equations top/2 
* CE 28 is refined into CE [155] 
* CE 26 is refined into CE [156] 
* CE 27 is refined into CE [157,158,159] 


#### Refined cost equations top/2 
* CE 155: top(V,Out) = 0
     [V>=0,Out=0] 
* CE 156: top(V,Out) = 1+ top(V,Out)
     [V>=1] 
* CE 157: top(V,Out) = 1+ proper(W,X):1+ top(Y,Out)
     [Y=1,X=1,W=0,V=1] 
* CE 158: top(V,Out) = 1+ proper(W,X):2+ top(Y,Out)
     [Y=2,X=2,W=1,V=2] 
* CE 159: top(V,Out) = 1+ proper(W,X):3+ top(Y,Out)
     [W>=0,W+1=V,Y=0,X=0] 

### Cost equations --> "Loop" of top/2 
* CEs [159] --> Loop 130 
* CEs [158] --> Loop 131 
* CEs [156,157] --> Loop 132 
* CEs [155] --> Loop 133 

#### Loops of top/2 
* Loop 130: top(V,Out)->  top(V',Out)
                  [V>=1,V'=0] 
* Loop 131: top(V,Out)->  top(V',Out)
                  [V'=2,V=2] 
* Loop 132: top(V,Out)->  top(V,Out)
                  [V>=1] 
* Loop 133: top(V,Out) [V>=0,Out=0] 

### Ranking functions of CR top(V,Out) 

#### Partial ranking functions of CR top(V,Out) 


### Resulting Chains:top(V,Out) 
* [[131,132]]...
* [[131,132],133]
* [[131,132],130,133]
* [133]
* [130,133]


### Merging Chains  top/2 into  External patterns of execution 
* [[133,130],[133],[133,130,[131,132]],[133,[131,132]]] --> 1 
* [[[131,132]]] --> 2 


### Specialization of cost equations start/3 
* CE 2 is refined into CE [160,161] 
* CE 3 is refined into CE [162,163] 
* CE 4 is refined into CE [164,165] 
* CE 5 is refined into CE [166,167] 
* CE 6 is refined into CE [168,169] 
* CE 7 is refined into CE [170,171] 
* CE 8 is refined into CE [172,173] 
* CE 9 is refined into CE [174,175] 
* CE 10 is refined into CE [176,177] 
* CE 11 is refined into CE [178,179,180] 
* CE 12 is refined into CE [181,182] 
* CE 13 is refined into CE [183,184] 
* CE 14 is refined into CE [185,186] 
* CE 15 is refined into CE [187,188] 
* CE 16 is refined into CE [189,190] 
* CE 17 is refined into CE [191,192] 
* CE 18 is refined into CE [193,194] 
* CE 19 is refined into CE [195,196] 
* CE 20 is refined into CE [197,198] 
* CE 21 is refined into CE [199,200] 
* CE 22 is refined into CE [201,202] 
* CE 23 is refined into CE [203,204] 
* CE 24 is refined into CE [205,206] 
* CE 25 is refined into CE [207,208] 


#### Refined cost equations start/3 
* CE 160: start(V,V1,V2) = 0+ top(V,W2):1
     [V>=0,W2=0] 
* CE 161: start(V,V1,V2) = 0+ top(V,W2):2
     [V>=1] 
* CE 162: start(V,V1,V2) = 0+ fun(V,V1,W2):1
     [V1>=0,V>=0,W2=0] 
* CE 163: start(V,V1,V2) = 0+ fun(V,V1,W2):2
     [V>=W2,W2>=1,V1>=0] 
* CE 164: start(V,V1,V2) = 0+ fun1(V,V1,V2,W2):1
     [V2>=0,V1>=0,V>=0,W2=0] 
* CE 165: start(V,V1,V2) = 0+ fun1(V,V1,V2,W2):2
     [V>=W2,W2>=1,V2>=0,V1>=0] 
* CE 166: start(V,V1,V2) = 0+ isNat(V,W2):1
     [V>=0,W2=0] 
* CE 167: start(V,V1,V2) = 0+ isNat(V,W2):2
     [V>=W2,W2>=1] 
* CE 168: start(V,V1,V2) = 0+ fun2(V,V1,W2):1
     [V1>=0,V>=0,W2=0] 
* CE 169: start(V,V1,V2) = 0+ fun2(V,V1,W2):2
     [V>=W2,W2>=1,V1>=0] 
* CE 170: start(V,V1,V2) = 0+ fun3(V,V1,V2,W2):1
     [V2>=0,V1>=0,V>=0,W2=0] 
* CE 171: start(V,V1,V2) = 0+ fun3(V,V1,V2,W2):2
     [V>=W2,W2>=1,V2>=0,V1>=0] 
* CE 172: start(V,V1,V2) = 0+ fun4(V,V1,W2):1
     [V1>=0,V>=0,W2=0] 
* CE 173: start(V,V1,V2) = 0+ fun4(V,V1,W2):2
     [V>=W2,W2>=1,V1>=0] 
* CE 174: start(V,V1,V2) = 0+ plus(V,V1,W2):1
     [V1>=0,V>=0,W2=0] 
* CE 175: start(V,V1,V2) = 0+ plus(V,V1,W2):2
     [V+V1>=W2,W2>=1,V1>=0,V>=0] 
* CE 176: start(V,V1,V2) = 0+ fun5(V,V1,W2):1
     [V1>=0,V>=0,W2=0] 
* CE 177: start(V,V1,V2) = 0+ fun5(V,V1,W2):2
     [V>=W2,W2>=1,V1>=0] 
* CE 178: start(V,V1,V2) = 0+ proper(W2,X2):1
     [X2=1,W2=0,V=0] 
* CE 179: start(V,V1,V2) = 0+ proper(W2,X2):2
     [X2=2,W2=1,V=1] 
* CE 180: start(V,V1,V2) = 0+ proper(V,W2):3
     [V>=0,W2=0] 
* CE 181: start(V,V1,V2) = 0+ isNatKind(V,W2):1
     [V>=0,W2=0] 
* CE 182: start(V,V1,V2) = 0+ isNatKind(V,W2):2
     [V>=W2,W2>=1] 
* CE 183: start(V,V1,V2) = 0+ fun6(V,V1,V2,W2):1
     [V2>=0,V1>=0,V>=0,W2=0] 
* CE 184: start(V,V1,V2) = 0+ fun6(V,V1,V2,W2):2
     [V>=W2,W2>=1,V2>=0,V1>=0] 
* CE 185: start(V,V1,V2) = 0+ fun7(V,W2):1
     [V>=0,W2=0] 
* CE 186: start(V,V1,V2) = 0+ fun7(V,W2):2
     [V>=W2,W2>=1] 
* CE 187: start(V,V1,V2) = 0+ fun8(V,W2):1
     [V>=0,W2=0] 
* CE 188: start(V,V1,V2) = 0+ fun8(V,W2):2
     [V>=W2,W2>=1] 
* CE 189: start(V,V1,V2) = 0+ fun9(V,V1,W2):1
     [V1>=0,V>=0,W2=0] 
* CE 190: start(V,V1,V2) = 0+ fun9(V,V1,W2):2
     [V>=W2,W2>=1,V1>=0] 
* CE 191: start(V,V1,V2) = 0+ fun10(V,V1,V2,W2):1
     [V2>=0,V1>=0,V>=0,W2=0] 
* CE 192: start(V,V1,V2) = 0+ fun10(V,V1,V2,W2):2
     [V>=W2,W2>=1,V2>=0,V1>=0] 
* CE 193: start(V,V1,V2) = 0+ fun11(V,V1,W2):1
     [V1>=0,V>=0,W2=0] 
* CE 194: start(V,V1,V2) = 0+ fun11(V,V1,W2):2
     [V>=W2,W2>=1,V1>=0] 
* CE 195: start(V,V1,V2) = 0+ fun12(V,V1,V2,W2):1
     [V2>=0,V1>=0,V>=0,W2=0] 
* CE 196: start(V,V1,V2) = 0+ fun12(V,V1,V2,W2):2
     [V>=W2,W2>=1,V2>=0,V1>=0] 
* CE 197: start(V,V1,V2) = 0+ fun13(V,V1,V2,W2):1
     [V2>=0,V1>=0,V>=0,W2=0] 
* CE 198: start(V,V1,V2) = 0+ fun13(V,V1,V2,W2):2
     [V>=W2,W2>=1,V2>=0,V1>=0] 
* CE 199: start(V,V1,V2) = 0+ fun14(V,W2):1
     [V>=0,W2=0] 
* CE 200: start(V,V1,V2) = 0+ fun14(V,W2):2
     [V>=W2,W2>=1] 
* CE 201: start(V,V1,V2) = 0+ fun15(V,V1,V2,W2):1
     [V2>=0,V1>=0,V>=0,W2=0] 
* CE 202: start(V,V1,V2) = 0+ fun15(V,V1,V2,W2):2
     [V>=W2,W2>=1,V2>=0,V1>=0] 
* CE 203: start(V,V1,V2) = 0+ fun16(V,W2):1
     [V>=0,W2=0] 
* CE 204: start(V,V1,V2) = 0+ fun16(V,W2):2
     [V>=W2,W2>=1] 
* CE 205: start(V,V1,V2) = 0+ s(V,W2):1
     [V>=0,W2=0] 
* CE 206: start(V,V1,V2) = 0+ s(V,W2):2
     [V>=W2,W2>=1] 
* CE 207: start(V,V1,V2) = 0+ fun17(V,V1,V2,W2):1
     [V2>=0,V1>=0,V>=0,W2=0] 
* CE 208: start(V,V1,V2) = 0+ fun17(V,V1,V2,W2):2
     [V>=W2,W2>=1,V2>=0,V1>=0] 

### Cost equations --> "Loop" of start/3 
* CEs [179] --> Loop 134 
* CEs [160,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208] --> Loop 135 
* CEs [161] --> Loop 136 

#### Loops of start/3 
* Loop 134: start(V,V1,V2) [V=1] 
* Loop 135: start(V,V1,V2) [V>=0] 
* Loop 136: start(V,V1,V2) [V>=1] 

### Ranking functions of CR start(V,V1,V2) 

#### Partial ranking functions of CR start(V,V1,V2) 


### Resulting Chains:start(V,V1,V2) 
* [136]...
* [135]
* [134]


### Merging Chains  start/3 into  External patterns of execution 
* [[134],[135]] --> 1 
* [[136]] --> 2 


Computing Bounds
=====================================

#### Cost of loops [67,68] 

 * loop 67:fun(V,V1,Out) -> [fun(V',V1',Out')] 
1
 * loop 68:fun(V,V1,Out) -> [fun(V',V1',Out')] 
1
#### Cost of phase [67,68]:fun(V,V1,Out) -> [fun(V',V1',Out')] 
1*it(67)+1*it(68)+0
  Such that:it(68) =< V1
it(68) =< V1-V1'
aux(1) =< V
aux(2) =< V-V'
it(67) =< aux(1)
it(68) =< aux(1)
it(67) =< aux(2)
it(68) =< aux(2)

#### Cost of chains of fun(V,V1,Out):
* Chain [[67,68],69]: 1*it(67)+1*it(68)+0
  Such that:aux(1) =< V
it(68) =< V1
aux(2) =< Out
it(67) =< aux(1)
it(68) =< aux(1)
it(67) =< aux(2)
it(68) =< aux(2)

  with precondition: [V1>=0,Out>=1,V>=Out] 

* Chain [69]: 0
  with precondition: [Out=0,V>=0,V1>=0] 


#### Cost of loops [70,71] 

 * loop 70:fun1(V,V1,V2,Out) -> [fun1(V',V1',V2',Out')] 
1
 * loop 71:fun1(V,V1,V2,Out) -> [fun1(V',V1',V2',Out')] 
1
#### Cost of phase [70,71]:fun1(V,V1,V2,Out) -> [fun1(V',V1',V2',Out')] 
1*it(70)+1*it(71)+0
  Such that:it(71) =< V1
it(71) =< V1-V1'
it(71) =< V2
it(71) =< V2-V2'
aux(3) =< V
aux(4) =< V-V'
it(70) =< aux(3)
it(71) =< aux(3)
it(70) =< aux(4)
it(71) =< aux(4)

#### Cost of chains of fun1(V,V1,V2,Out):
* Chain [[70,71],72]: 1*it(70)+1*it(71)+0
  Such that:aux(3) =< V
it(71) =< V1
aux(4) =< Out
it(70) =< aux(3)
it(71) =< aux(3)
it(70) =< aux(4)
it(71) =< aux(4)

  with precondition: [V1>=0,V2>=0,Out>=1,V>=Out] 

* Chain [72]: 0
  with precondition: [Out=0,V>=0,V1>=0,V2>=0] 


#### Cost of loops [73,74] 

 * loop 73:fun10(V,V1,V2,Out) -> [fun10(V',V1',V2',Out')] 
1
 * loop 74:fun10(V,V1,V2,Out) -> [fun10(V',V1',V2',Out')] 
1
#### Cost of phase [73,74]:fun10(V,V1,V2,Out) -> [fun10(V',V1',V2',Out')] 
1*it(73)+1*it(74)+0
  Such that:it(74) =< V1
it(74) =< V1-V1'
it(74) =< V2
it(74) =< V2-V2'
aux(5) =< V
aux(6) =< V-V'
it(73) =< aux(5)
it(74) =< aux(5)
it(73) =< aux(6)
it(74) =< aux(6)

#### Cost of chains of fun10(V,V1,V2,Out):
* Chain [[73,74],75]: 1*it(73)+1*it(74)+0
  Such that:aux(5) =< V
it(74) =< V1
aux(6) =< Out
it(73) =< aux(5)
it(74) =< aux(5)
it(73) =< aux(6)
it(74) =< aux(6)

  with precondition: [V1>=0,V2>=0,Out>=1,V>=Out] 

* Chain [75]: 0
  with precondition: [Out=0,V>=0,V1>=0,V2>=0] 


#### Cost of loops [76,77] 

 * loop 76:fun11(V,V1,Out) -> [fun11(V',V1',Out')] 
1
 * loop 77:fun11(V,V1,Out) -> [fun11(V',V1',Out')] 
1
#### Cost of phase [76,77]:fun11(V,V1,Out) -> [fun11(V',V1',Out')] 
1*it(76)+1*it(77)+0
  Such that:it(77) =< V1
it(77) =< V1-V1'
aux(7) =< V
aux(8) =< V-V'
it(76) =< aux(7)
it(77) =< aux(7)
it(76) =< aux(8)
it(77) =< aux(8)

#### Cost of chains of fun11(V,V1,Out):
* Chain [[76,77],78]: 1*it(76)+1*it(77)+0
  Such that:aux(7) =< V
it(77) =< V1
aux(8) =< Out
it(76) =< aux(7)
it(77) =< aux(7)
it(76) =< aux(8)
it(77) =< aux(8)

  with precondition: [V1>=0,Out>=1,V>=Out] 

* Chain [78]: 0
  with precondition: [Out=0,V>=0,V1>=0] 


#### Cost of loops [79,80] 

 * loop 79:fun12(V,V1,V2,Out) -> [fun12(V',V1',V2',Out')] 
1
 * loop 80:fun12(V,V1,V2,Out) -> [fun12(V',V1',V2',Out')] 
1
#### Cost of phase [79,80]:fun12(V,V1,V2,Out) -> [fun12(V',V1',V2',Out')] 
1*it(79)+1*it(80)+0
  Such that:it(80) =< V1
it(80) =< V1-V1'
it(80) =< V2
it(80) =< V2-V2'
aux(9) =< V
aux(10) =< V-V'
it(79) =< aux(9)
it(80) =< aux(9)
it(79) =< aux(10)
it(80) =< aux(10)

#### Cost of chains of fun12(V,V1,V2,Out):
* Chain [[79,80],81]: 1*it(79)+1*it(80)+0
  Such that:aux(9) =< V
it(80) =< V1
aux(10) =< Out
it(79) =< aux(9)
it(80) =< aux(9)
it(79) =< aux(10)
it(80) =< aux(10)

  with precondition: [V1>=0,V2>=0,Out>=1,V>=Out] 

* Chain [81]: 0
  with precondition: [Out=0,V>=0,V1>=0,V2>=0] 


#### Cost of loops [82,83] 

 * loop 82:fun13(V,V1,V2,Out) -> [fun13(V',V1',V2',Out')] 
1
 * loop 83:fun13(V,V1,V2,Out) -> [fun13(V',V1',V2',Out')] 
1
#### Cost of phase [82,83]:fun13(V,V1,V2,Out) -> [fun13(V',V1',V2',Out')] 
1*it(82)+1*it(83)+0
  Such that:it(83) =< V1
it(83) =< V1-V1'
it(83) =< V2
it(83) =< V2-V2'
aux(11) =< V
aux(12) =< V-V'
it(82) =< aux(11)
it(83) =< aux(11)
it(82) =< aux(12)
it(83) =< aux(12)

#### Cost of chains of fun13(V,V1,V2,Out):
* Chain [[82,83],84]: 1*it(82)+1*it(83)+0
  Such that:aux(11) =< V
it(83) =< V1
aux(12) =< Out
it(82) =< aux(11)
it(83) =< aux(11)
it(82) =< aux(12)
it(83) =< aux(12)

  with precondition: [V1>=0,V2>=0,Out>=1,V>=Out] 

* Chain [84]: 0
  with precondition: [Out=0,V>=0,V1>=0,V2>=0] 


#### Cost of loops [85] 

 * loop 85:fun14(V,Out) -> [fun14(V',Out')] 
1
#### Cost of phase [85]:fun14(V,Out) -> [fun14(V',Out')] 
1*it(85)+0
  Such that:it(85) =< V
it(85) =< V-V'

#### Cost of chains of fun14(V,Out):
* Chain [[85],86]: 1*it(85)+0
  Such that:it(85) =< Out

  with precondition: [Out>=1,V>=Out] 

* Chain [86]: 0
  with precondition: [Out=0,V>=0] 


#### Cost of loops [87,88] 

 * loop 87:fun15(V,V1,V2,Out) -> [fun15(V',V1',V2',Out')] 
1
 * loop 88:fun15(V,V1,V2,Out) -> [fun15(V',V1',V2',Out')] 
1
#### Cost of phase [87,88]:fun15(V,V1,V2,Out) -> [fun15(V',V1',V2',Out')] 
1*it(87)+1*it(88)+0
  Such that:it(88) =< V1
it(88) =< V1-V1'
it(88) =< V2
it(88) =< V2-V2'
aux(13) =< V
aux(14) =< V-V'
it(87) =< aux(13)
it(88) =< aux(13)
it(87) =< aux(14)
it(88) =< aux(14)

#### Cost of chains of fun15(V,V1,V2,Out):
* Chain [[87,88],89]: 1*it(87)+1*it(88)+0
  Such that:aux(13) =< V
it(88) =< V1
aux(14) =< Out
it(87) =< aux(13)
it(88) =< aux(13)
it(87) =< aux(14)
it(88) =< aux(14)

  with precondition: [V1>=0,V2>=0,Out>=1,V>=Out] 

* Chain [89]: 0
  with precondition: [Out=0,V>=0,V1>=0,V2>=0] 


#### Cost of loops [90] 

 * loop 90:fun16(V,Out) -> [fun16(V',Out')] 
1
#### Cost of phase [90]:fun16(V,Out) -> [fun16(V',Out')] 
1*it(90)+0
  Such that:it(90) =< V
it(90) =< V-V'

#### Cost of chains of fun16(V,Out):
* Chain [[90],91]: 1*it(90)+0
  Such that:it(90) =< Out

  with precondition: [Out>=1,V>=Out] 

* Chain [91]: 0
  with precondition: [Out=0,V>=0] 


#### Cost of loops [92,93] 

 * loop 92:fun17(V,V1,V2,Out) -> [fun17(V',V1',V2',Out')] 
1
 * loop 93:fun17(V,V1,V2,Out) -> [fun17(V',V1',V2',Out')] 
1
#### Cost of phase [92,93]:fun17(V,V1,V2,Out) -> [fun17(V',V1',V2',Out')] 
1*it(92)+1*it(93)+0
  Such that:it(93) =< V1
it(93) =< V1-V1'
it(93) =< V2
it(93) =< V2-V2'
aux(15) =< V
aux(16) =< V-V'
it(92) =< aux(15)
it(93) =< aux(15)
it(92) =< aux(16)
it(93) =< aux(16)

#### Cost of chains of fun17(V,V1,V2,Out):
* Chain [[92,93],94]: 1*it(92)+1*it(93)+0
  Such that:aux(15) =< V
it(93) =< V1
aux(16) =< Out
it(92) =< aux(15)
it(93) =< aux(15)
it(92) =< aux(16)
it(93) =< aux(16)

  with precondition: [V1>=0,V2>=0,Out>=1,V>=Out] 

* Chain [94]: 0
  with precondition: [Out=0,V>=0,V1>=0,V2>=0] 


#### Cost of loops [95,96] 

 * loop 95:fun2(V,V1,Out) -> [fun2(V',V1',Out')] 
1
 * loop 96:fun2(V,V1,Out) -> [fun2(V',V1',Out')] 
1
#### Cost of phase [95,96]:fun2(V,V1,Out) -> [fun2(V',V1',Out')] 
1*it(95)+1*it(96)+0
  Such that:it(96) =< V1
it(96) =< V1-V1'
aux(17) =< V
aux(18) =< V-V'
it(95) =< aux(17)
it(96) =< aux(17)
it(95) =< aux(18)
it(96) =< aux(18)

#### Cost of chains of fun2(V,V1,Out):
* Chain [[95,96],97]: 1*it(95)+1*it(96)+0
  Such that:aux(17) =< V
it(96) =< V1
aux(18) =< Out
it(95) =< aux(17)
it(96) =< aux(17)
it(95) =< aux(18)
it(96) =< aux(18)

  with precondition: [V1>=0,Out>=1,V>=Out] 

* Chain [97]: 0
  with precondition: [Out=0,V>=0,V1>=0] 


#### Cost of loops [98,99] 

 * loop 98:fun3(V,V1,V2,Out) -> [fun3(V',V1',V2',Out')] 
1
 * loop 99:fun3(V,V1,V2,Out) -> [fun3(V',V1',V2',Out')] 
1
#### Cost of phase [98,99]:fun3(V,V1,V2,Out) -> [fun3(V',V1',V2',Out')] 
1*it(98)+1*it(99)+0
  Such that:it(99) =< V1
it(99) =< V1-V1'
it(99) =< V2
it(99) =< V2-V2'
aux(19) =< V
aux(20) =< V-V'
it(98) =< aux(19)
it(99) =< aux(19)
it(98) =< aux(20)
it(99) =< aux(20)

#### Cost of chains of fun3(V,V1,V2,Out):
* Chain [[98,99],100]: 1*it(98)+1*it(99)+0
  Such that:aux(19) =< V
it(99) =< V1
aux(20) =< Out
it(98) =< aux(19)
it(99) =< aux(19)
it(98) =< aux(20)
it(99) =< aux(20)

  with precondition: [V1>=0,V2>=0,Out>=1,V>=Out] 

* Chain [100]: 0
  with precondition: [Out=0,V>=0,V1>=0,V2>=0] 


#### Cost of loops [101,102] 

 * loop 101:fun4(V,V1,Out) -> [fun4(V',V1',Out')] 
1
 * loop 102:fun4(V,V1,Out) -> [fun4(V',V1',Out')] 
1
#### Cost of phase [101,102]:fun4(V,V1,Out) -> [fun4(V',V1',Out')] 
1*it(101)+1*it(102)+0
  Such that:it(102) =< V1
it(102) =< V1-V1'
aux(21) =< V
aux(22) =< V-V'
it(101) =< aux(21)
it(102) =< aux(21)
it(101) =< aux(22)
it(102) =< aux(22)

#### Cost of chains of fun4(V,V1,Out):
* Chain [[101,102],103]: 1*it(101)+1*it(102)+0
  Such that:aux(21) =< V
it(102) =< V1
aux(22) =< Out
it(101) =< aux(21)
it(102) =< aux(21)
it(101) =< aux(22)
it(102) =< aux(22)

  with precondition: [V1>=0,Out>=1,V>=Out] 

* Chain [103]: 0
  with precondition: [Out=0,V>=0,V1>=0] 


#### Cost of loops [104,105] 

 * loop 104:fun5(V,V1,Out) -> [fun5(V',V1',Out')] 
1
 * loop 105:fun5(V,V1,Out) -> [fun5(V',V1',Out')] 
1
#### Cost of phase [104,105]:fun5(V,V1,Out) -> [fun5(V',V1',Out')] 
1*it(104)+1*it(105)+0
  Such that:it(105) =< V1
it(105) =< V1-V1'
aux(23) =< V
aux(24) =< V-V'
it(104) =< aux(23)
it(105) =< aux(23)
it(104) =< aux(24)
it(105) =< aux(24)

#### Cost of chains of fun5(V,V1,Out):
* Chain [[104,105],106]: 1*it(104)+1*it(105)+0
  Such that:aux(23) =< V
it(105) =< V1
aux(24) =< Out
it(104) =< aux(23)
it(105) =< aux(23)
it(104) =< aux(24)
it(105) =< aux(24)

  with precondition: [V1>=0,Out>=1,V>=Out] 

* Chain [106]: 0
  with precondition: [Out=0,V>=0,V1>=0] 


#### Cost of loops [107,108] 

 * loop 107:fun6(V,V1,V2,Out) -> [fun6(V',V1',V2',Out')] 
1
 * loop 108:fun6(V,V1,V2,Out) -> [fun6(V',V1',V2',Out')] 
1
#### Cost of phase [107,108]:fun6(V,V1,V2,Out) -> [fun6(V',V1',V2',Out')] 
1*it(107)+1*it(108)+0
  Such that:it(108) =< V1
it(108) =< V1-V1'
it(108) =< V2
it(108) =< V2-V2'
aux(25) =< V
aux(26) =< V-V'
it(107) =< aux(25)
it(108) =< aux(25)
it(107) =< aux(26)
it(108) =< aux(26)

#### Cost of chains of fun6(V,V1,V2,Out):
* Chain [[107,108],109]: 1*it(107)+1*it(108)+0
  Such that:aux(25) =< V
it(108) =< V1
aux(26) =< Out
it(107) =< aux(25)
it(108) =< aux(25)
it(107) =< aux(26)
it(108) =< aux(26)

  with precondition: [V1>=0,V2>=0,Out>=1,V>=Out] 

* Chain [109]: 0
  with precondition: [Out=0,V>=0,V1>=0,V2>=0] 


#### Cost of loops [110] 

 * loop 110:fun7(V,Out) -> [fun7(V',Out')] 
1
#### Cost of phase [110]:fun7(V,Out) -> [fun7(V',Out')] 
1*it(110)+0
  Such that:it(110) =< V
it(110) =< V-V'

#### Cost of chains of fun7(V,Out):
* Chain [[110],111]: 1*it(110)+0
  Such that:it(110) =< Out

  with precondition: [Out>=1,V>=Out] 

* Chain [111]: 0
  with precondition: [Out=0,V>=0] 


#### Cost of loops [112] 

 * loop 112:fun8(V,Out) -> [fun8(V',Out')] 
1
#### Cost of phase [112]:fun8(V,Out) -> [fun8(V',Out')] 
1*it(112)+0
  Such that:it(112) =< V
it(112) =< V-V'

#### Cost of chains of fun8(V,Out):
* Chain [[112],113]: 1*it(112)+0
  Such that:it(112) =< Out

  with precondition: [Out>=1,V>=Out] 

* Chain [113]: 0
  with precondition: [Out=0,V>=0] 


#### Cost of loops [114,115] 

 * loop 114:fun9(V,V1,Out) -> [fun9(V',V1',Out')] 
1
 * loop 115:fun9(V,V1,Out) -> [fun9(V',V1',Out')] 
1
#### Cost of phase [114,115]:fun9(V,V1,Out) -> [fun9(V',V1',Out')] 
1*it(114)+1*it(115)+0
  Such that:it(115) =< V1
it(115) =< V1-V1'
aux(27) =< V
aux(28) =< V-V'
it(114) =< aux(27)
it(115) =< aux(27)
it(114) =< aux(28)
it(115) =< aux(28)

#### Cost of chains of fun9(V,V1,Out):
* Chain [[114,115],116]: 1*it(114)+1*it(115)+0
  Such that:aux(27) =< V
it(115) =< V1
aux(28) =< Out
it(114) =< aux(27)
it(115) =< aux(27)
it(114) =< aux(28)
it(115) =< aux(28)

  with precondition: [V1>=0,Out>=1,V>=Out] 

* Chain [116]: 0
  with precondition: [Out=0,V>=0,V1>=0] 


#### Cost of loops [117] 

 * loop 117:isNat(V,Out) -> [isNat(V',Out')] 
1
#### Cost of phase [117]:isNat(V,Out) -> [isNat(V',Out')] 
1*it(117)+0
  Such that:it(117) =< V
it(117) =< V-V'

#### Cost of chains of isNat(V,Out):
* Chain [[117],118]: 1*it(117)+0
  Such that:it(117) =< Out

  with precondition: [Out>=1,V>=Out] 

* Chain [118]: 0
  with precondition: [Out=0,V>=0] 


#### Cost of loops [119] 

 * loop 119:isNatKind(V,Out) -> [isNatKind(V',Out')] 
1
#### Cost of phase [119]:isNatKind(V,Out) -> [isNatKind(V',Out')] 
1*it(119)+0
  Such that:it(119) =< V
it(119) =< V-V'

#### Cost of chains of isNatKind(V,Out):
* Chain [[119],120]: 1*it(119)+0
  Such that:it(119) =< Out

  with precondition: [Out>=1,V>=Out] 

* Chain [120]: 0
  with precondition: [Out=0,V>=0] 


#### Cost of loops [121,122,123] 

 * loop 121:plus(V,V1,Out) -> [plus(V',V1',Out')] 
1
 * loop 122:plus(V,V1,Out) -> [plus(V',V1',Out')] 
1
 * loop 123:plus(V,V1,Out) -> [plus(V',V1',Out')] 
1
#### Cost of phase [121,122,123]:plus(V,V1,Out) -> [plus(V',V1',Out')] 
1*it(121)+1*it(122)+1*it(123)+0
  Such that:aux(29) =< V
aux(30) =< V+V1
aux(31) =< V+V1-V'-V1'
aux(32) =< V-V'
aux(33) =< V1
aux(34) =< V1-V1'
it(122) =< aux(29)
it(123) =< aux(29)
it(121) =< aux(30)
it(122) =< aux(30)
it(123) =< aux(30)
it(121) =< aux(31)
it(122) =< aux(31)
it(123) =< aux(31)
it(122) =< aux(32)
it(123) =< aux(32)
it(121) =< aux(33)
it(123) =< aux(33)
it(121) =< aux(34)
it(123) =< aux(34)

#### Cost of chains of plus(V,V1,Out):
* Chain [[121,122,123],124]: 1*it(121)+1*it(122)+1*it(123)+0
  Such that:aux(35) =< V
aux(36) =< V+V1
aux(37) =< V1
it(122) =< aux(35)
it(123) =< aux(35)
it(121) =< aux(36)
it(122) =< aux(36)
it(123) =< aux(36)
it(121) =< aux(37)
it(123) =< aux(37)

  with precondition: [V>=0,V1>=0,Out>=1,V+V1>=Out] 

* Chain [124]: 0
  with precondition: [Out=0,V>=0,V1>=0] 


#### Cost of chains of proper(V,Out):
* Chain [127]: 1
  with precondition: [V=0,Out=1] 

* Chain [126]: 1
  with precondition: [V=1,Out=2] 

* Chain [125]: 0
  with precondition: [Out=0,V>=0] 


#### Cost of loops [128] 

 * loop 128:s(V,Out) -> [s(V',Out')] 
1
#### Cost of phase [128]:s(V,Out) -> [s(V',Out')] 
1*it(128)+0
  Such that:it(128) =< V
it(128) =< V-V'

#### Cost of chains of s(V,Out):
* Chain [[128],129]: 1*it(128)+0
  Such that:it(128) =< Out

  with precondition: [Out>=1,V>=Out] 

* Chain [129]: 0
  with precondition: [Out=0,V>=0] 


#### Cost of loops [131,132] 

 * loop 131:top(V,Out) -> [top(V',Out')] 
2
 * loop 132:top(V,Out) -> [top(V',Out')] 
2
#### Cost of phase [131,132]:top(V,Out) -> [top(V',Out')] 
4*it(131)+0
#### Cost of phase [131,132]:top(V,Out) -> [top(V',Out')] 
4*it(131)+0
#### Cost of phase [131,132]:top(V,Out) -> [top(V',Out')] 
4*it(131)+0
#### Cost of chains of top(V,Out):
* Chain [[131,132]]...: 4*it(131)+0
  with precondition: [V>=1] 

* Chain [[131,132],133]: 4*it(131)+0
  with precondition: [Out=0,V>=1] 

* Chain [[131,132],130,133]: 4*it(131)+1
  with precondition: [Out=0,V>=1] 

* Chain [133]: 0
  with precondition: [Out=0,V>=0] 

* Chain [130,133]: 1
  with precondition: [Out=0,V>=1] 


#### Cost of chains of start(V,V1,V2):
* Chain [136]...: 4*s(3)+0
  with precondition: [V>=1] 

* Chain [135]: 1*s(4)+14*s(6)+21*s(8)+1*s(29)+1*s(30)+1*s(31)+1
  Such that:s(27) =< V+V1
aux(53) =< V
aux(54) =< V1
s(8) =< aux(53)
s(6) =< aux(54)
s(29) =< aux(53)
s(30) =< aux(53)
s(31) =< s(27)
s(29) =< s(27)
s(30) =< s(27)
s(31) =< aux(54)
s(30) =< aux(54)
s(6) =< aux(53)

  with precondition: [V>=0] 

* Chain [134]: 1
  with precondition: [V=1] 


Closed-form bounds of start(V,V1,V2): 
-------------------------------------
* Chain [136]... with precondition: [V>=1] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [135] with precondition: [V>=0] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [134] with precondition: [V=1] 
    - Upper bound: 1 
    - Complexity: constant 

### Maximum cost of start(V,V1,V2): inf 
Asymptotic class: infinity 

Time statistics: 
-------------------------------------
* Partial evaluation computed in 194 ms.
* Invariants computed in 176 ms.
   - Backward Invariants 62 ms.
   - Transitive Invariants 56 ms.
* Refinement performed in 421 ms.
* Termination proved in 59 ms.
* Upper bounds computed in 275 ms.
   - Equation cost structures 97 ms.
   - Phase cost structures 107 ms.
   - Chain cost structures 98 ms.
   - Solving cost expressions 0 ms.
* Total analysis performed in 1449 ms.


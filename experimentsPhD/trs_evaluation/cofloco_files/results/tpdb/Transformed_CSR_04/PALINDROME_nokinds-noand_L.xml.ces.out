
Preprocessing Cost Relations
=====================================
11. SCC does not have a single cut point : [isList/1,isNeList/1]  
 Merged into isListisNeList/1

#### Computed strongly connected components 
0. non_recursive  : [fun/2]
1. non_recursive  : [fun1/2]
2. non_recursive  : [fun10/2]
3. non_recursive  : [fun5/2]
4. non_recursive  : [fun3/2]
5. non_recursive  : [fun7/2]
6. non_recursive  : [isQid/1]
7. recursive [non_tail] : [fun11/2,isNePal/1,isPal/1]
8. non_recursive  : [fun12/3]
9. non_recursive  : [fun6/2]
10. non_recursive  : [fun9/2]
12. non_recursive  : [start/2]
11. recursive [non_tail,multiple] : [fun2/2,fun4/2,fun8/2,isListisNeList/1]

#### Obtained direct recursion through partial evaluation 
0. SCC is completely evaluated into other SCCs
1. SCC is completely evaluated into other SCCs
2. SCC is completely evaluated into other SCCs
3. SCC is completely evaluated into other SCCs
4. SCC is completely evaluated into other SCCs
5. SCC is completely evaluated into other SCCs
6. SCC is completely evaluated into other SCCs
7. SCC is partially evaluated into isPal/1
8. SCC is partially evaluated into fun12/3
9. SCC is completely evaluated into other SCCs
10. SCC is completely evaluated into other SCCs
12. SCC is partially evaluated into start/2
11. SCC is partially evaluated into isListisNeList/1

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations isPal/1 
* CE 14 is refined into CE [19] 
* CE 16 is refined into CE [20] 
* CE 15 is refined into CE [21] 


#### Refined cost equations isPal/1 
* CE 19: isPal(Out) = 5
     [Out=0] 
* CE 20: isPal(Out) = 1
     [Out=0] 
* CE 21: isPal(Out) = 6+ isPal(B)
     [B=0,Out=0] 

### Cost equations --> "Loop" of isPal/1 
* CEs [21] --> Loop 9 
* CEs [19,20] --> Loop 10 

#### Loops of isPal/1 
* Loop 9: isPal(Out)->  isPal(Out')
                  [Out'=0,Out=0] 
* Loop 10: isPal(Out) [Out=0] 

### Ranking functions of CR isPal(Out) 

#### Partial ranking functions of CR isPal(Out) 


### Resulting Chains:isPal(Out) 
* [[9]]...
* [[9],10]
* [10]


### Merging Chains  isPal/1 into  External patterns of execution 
* [[10],[10,[9]]] --> 1 
* [[[9]]] --> 2 


### Specialization of cost equations fun12/3 
* CE 17 is refined into CE [22] 
* CE 18 is refined into CE [23] 


#### Refined cost equations fun12/3 
* CE 22: fun12(A,B,A) = 1
     [A>=0,B=0] 
* CE 23: fun12(A,B,B) = 1
     [B>=0,A=0] 

### Cost equations --> "Loop" of fun12/3 
* CEs [22] --> Loop 11 
* CEs [23] --> Loop 12 

#### Loops of fun12/3 
* Loop 11: fun12(A,B,A) [A>=0,B=0] 
* Loop 12: fun12(A,B,B) [B>=0,A=0] 

### Ranking functions of CR fun12(V,V1,Out) 

#### Partial ranking functions of CR fun12(V,V1,Out) 


### Resulting Chains:fun12(V,V1,Out) 
* [12]
* [11]


### Merging Chains  fun12/3 into  External patterns of execution 
* [[12]] --> 1 
* [[11]] --> 2 


### Specialization of cost equations isListisNeList/1 
* CE 12 is refined into CE [24] 
* CE 13 is refined into CE [25] 
* CE 11 is refined into CE [26] 
* CE 10 is refined into CE [27] 


#### Refined cost equations isListisNeList/1 
* CE 24: isListisNeList(A) = 1
     [A=0] 
* CE 25: isListisNeList(A) = 3
     [A=0] 
* CE 26: isListisNeList(A) = 2+ isListisNeList(B)
     [B=0,A=0] 
* CE 27: isListisNeList(A) = 3+ isListisNeList(B)+ isListisNeList(C)
     [C=0,B=0,A=0] 

### Cost equations --> "Loop" of isListisNeList/1 
* CEs [27] --> Loop 13 
* CEs [26] --> Loop 14 
* CEs [24,25] --> Loop 15 

#### Loops of isListisNeList/1 
* Loop 13: isListisNeList(A)->  isListisNeList(A')  isListisNeList(A'2)
                  [A'2=0,A'=0,A=0] 
* Loop 14: isListisNeList(A)->  isListisNeList(A')
                  [A'=0,A=0] 
* Loop 15: isListisNeList(A) [A=0] 

### Ranking functions of CR isListisNeList(A) 

#### Partial ranking functions of CR isListisNeList(A) 


### Resulting Chains:isListisNeList(A) 
* [multiple([13,14],[[],[15]])]...
* [15]


### Merging Chains  isListisNeList/1 into  External patterns of execution 
* [[15]] --> 1 
* [[multiple([13,14],[[],[15]])]] --> 2 


### Specialization of cost equations start/2 
* CE 2 is refined into CE [28,29] 
* CE 3 is refined into CE [30] 
* CE 4 is refined into CE [31,32] 
* CE 5 is refined into CE [33,34] 
* CE 6 is refined into CE [35] 
* CE 7 is refined into CE [36,37] 
* CE 8 is refined into CE [38,39] 
* CE 9 is refined into CE [40,41] 


#### Refined cost equations start/2 
* CE 28: start(V,V1) = 2+ isListisNeList(W1):1
     [W1=0,V=0] 
* CE 29: start(V,V1) = 2+ isListisNeList(W1):2
     [W1=0,V=0] 
* CE 30: start(V,V1) = 3
     [] 
* CE 31: start(V,V1) = 4+ isPal(W1):1
     [W1=0] 
* CE 32: start(V,V1) = 4+ isPal(W1):2
     [W1=0] 
* CE 33: start(V,V1) = 2+ isPal(W1):1
     [W1=0,V=0] 
* CE 34: start(V,V1) = 2+ isPal(W1):2
     [W1=0,V=0] 
* CE 35: start(V,V1) = 1
     [] 
* CE 36: start(V,V1) = 0+ isListisNeList(W1):1
     [W1=0] 
* CE 37: start(V,V1) = 0+ isListisNeList(W1):2
     [W1=0] 
* CE 38: start(V,V1) = 0+ isPal(W1):1
     [W1=0] 
* CE 39: start(V,V1) = 0+ isPal(W1):2
     [W1=0] 
* CE 40: start(V,V1) = 0+ fun12(W1,V1,V1):1
     [V1>=0,W1=0,V=0] 
* CE 41: start(V,V1) = 0+ fun12(V,W1,V):2
     [V>=0,W1=0,V1=0] 

### Cost equations --> "Loop" of start/2 
* CEs [28,30,31,33,35,36,38,40,41] --> Loop 16 
* CEs [29,32,34,37,39] --> Loop 17 

#### Loops of start/2 
* Loop 16: start(V,V1) [] 
* Loop 17: start(V,V1) [] 

### Ranking functions of CR start(V,V1) 

#### Partial ranking functions of CR start(V,V1) 


### Resulting Chains:start(V,V1) 
* [17]...
* [16]


### Merging Chains  start/2 into  External patterns of execution 
* [[16]] --> 1 
* [[17]] --> 2 


Computing Bounds
=====================================

#### Cost of loops [9] 

 * loop 9:isPal(Out) -> [isPal(Out')] 
6
#### Cost of phase [9]:isPal(Out) -> [isPal(Out')] 
6*it(9)+0
#### Cost of phase [9]:isPal(Out) -> [isPal(Out')] 
6*it(9)+0
#### Cost of chains of isPal(Out):
* Chain [[9]]...: 6*it(9)+0
  with precondition: [Out=0] 

* Chain [[9],10]: 6*it(9)+5
  with precondition: [Out=0] 

* Chain [10]: 5
  with precondition: [Out=0] 


#### Cost of chains of fun12(V,V1,Out):
* Chain [12]: 1
  with precondition: [V=0,V1=Out,V1>=0] 

* Chain [11]: 1
  with precondition: [V1=0,V=Out,V>=0] 


#### Cost of loops [13,14] 

 * loop 13:isListisNeList(A) -> [isListisNeList(A'),isListisNeList(A'2)] 
3
 * loop 14:isListisNeList(A) -> [isListisNeList(A')] 
2
#### Cost of phase [13,14]:isListisNeList(A) -> [] 
5*it(13)+3*it([15])+0
#### Cost of chains of isListisNeList(A):
* Chain [multiple([13,14],[[],[15]])]...: 5*it(13)+3*it([15])+0
  with precondition: [A=0] 

* Chain [15]: 3
  with precondition: [A=0] 


#### Cost of chains of start(V,V1):
* Chain [17]...: 1*aux(3)+0
  with precondition: [] 

* Chain [16]: 1*aux(4)+0
  with precondition: [] 


Closed-form bounds of start(V,V1): 
-------------------------------------
* Chain [17]... with precondition: [] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [16] with precondition: [] 
    - Upper bound: inf 
    - Complexity: infinity 

### Maximum cost of start(V,V1): inf 
Asymptotic class: infinity 

Time statistics: 
-------------------------------------
* Partial evaluation computed in 63 ms.
* Invariants computed in 17 ms.
   - Backward Invariants 6 ms.
   - Transitive Invariants 3 ms.
* Refinement performed in 54 ms.
* Termination proved in 2 ms.
* Upper bounds computed in 41 ms.
   - Equation cost structures 18 ms.
   - Phase cost structures 17 ms.
   - Chain cost structures 4 ms.
   - Solving cost expressions 0 ms.
* Total analysis performed in 241 ms.


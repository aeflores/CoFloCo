
Preprocessing Cost Relations
=====================================
7. SCC does not have a single cut point : [isPalListKind/2,activate/2]  
 Merged into isPalListKindactivate/2
15. SCC does not have a single cut point : [isList/2,isNeList/2]  
 Merged into isListisNeList/2

#### Computed strongly connected components 
0. non_recursive  : [a/1]
1. non_recursive  : [e/1]
2. non_recursive  : [fun2/3]
3. non_recursive  : [i/1]
4. non_recursive  : [nil/1]
5. non_recursive  : [o/1]
6. non_recursive  : [u/1]
8. non_recursive  : [fun1/2]
9. non_recursive  : [fun12/2]
10. non_recursive  : [fun17/2]
11. non_recursive  : [fun10/2]
12. non_recursive  : [isQid/2]
13. non_recursive  : [fun9/3]
14. non_recursive  : [fun14/2]
16. non_recursive  : [fun4/2]
17. non_recursive  : [fun3/3]
18. non_recursive  : [fun6/2]
19. non_recursive  : [isNePal/2]
20. non_recursive  : [fun5/3]
21. non_recursive  : [isPal/2]
22. non_recursive  : [start/3]
7. recursive [multiple] : [and/3,isPalListKindactivate/2]
15. recursive [non_tail,multiple] : [fun/3,fun11/3,fun13/3,fun15/4,fun16/3,fun7/4,fun8/4,isListisNeList/2]

#### Obtained direct recursion through partial evaluation 
0. SCC is completely evaluated into other SCCs
1. SCC is completely evaluated into other SCCs
2. SCC is completely evaluated into other SCCs
3. SCC is completely evaluated into other SCCs
4. SCC is completely evaluated into other SCCs
5. SCC is completely evaluated into other SCCs
6. SCC is completely evaluated into other SCCs
8. SCC is partially evaluated into fun1/2
9. SCC is partially evaluated into fun12/2
10. SCC is partially evaluated into fun17/2
11. SCC is partially evaluated into fun10/2
12. SCC is partially evaluated into isQid/2
13. SCC is partially evaluated into fun9/3
14. SCC is partially evaluated into fun14/2
16. SCC is partially evaluated into fun4/2
17. SCC is partially evaluated into fun3/3
18. SCC is partially evaluated into fun6/2
19. SCC is partially evaluated into isNePal/2
20. SCC is partially evaluated into fun5/3
21. SCC is partially evaluated into isPal/2
22. SCC is partially evaluated into start/3
7. SCC is partially evaluated into isPalListKindactivate/2
15. SCC is partially evaluated into isListisNeList/2

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations isPalListKindactivate/2 
* CE 35 is refined into CE [84] 
* CE 36 is refined into CE [85] 
* CE 32 is refined into CE [86] 
* CE 37 is refined into CE [87] 
* CE 34 is refined into CE [88] 
* CE 33 is refined into CE [89] 
* CE 28 is refined into CE [90] 
* CE 38 is refined into CE [91] 
* CE 40 is refined into CE [92] 
* CE 30 is refined into CE [93] 
* CE 39 is refined into CE [94] 
* CE 31 is refined into CE [95] 
* CE 29 is refined into CE [96] 


#### Refined cost equations isPalListKindactivate/2 
* CE 84: isPalListKindactivate(A,B) = 1
     [A>=0,A+1=B] 
* CE 85: isPalListKindactivate(A,B) = 1
     [B=6,A=4] 
* CE 86: isPalListKindactivate(A,B) = 1
     [B=6,A=3] 
* CE 87: isPalListKindactivate(A,B) = 1
     [B=6,A=2] 
* CE 88: isPalListKindactivate(A,B) = 1
     [B=6,A=1] 
* CE 89: isPalListKindactivate(A,B) = 1
     [B=6,A=0] 
* CE 90: isPalListKindactivate(A,A) = 2
     [A>=1] 
* CE 91: isPalListKindactivate(A,A) = 1
     [A>=0] 
* CE 92: isPalListKindactivate(A,B) = 2
     [B=0,A=0] 
* CE 93: isPalListKindactivate(A,B) = 2+ isPalListKindactivate(C,B)
     [A>=7,A=C+7] 
* CE 94: isPalListKindactivate(A,B) = 1+ isPalListKindactivate(C,B)
     [C>=0,C+1=A] 
* CE 95: isPalListKindactivate(A,B) = 2+ isPalListKindactivate(C,D)+ isPalListKindactivate(D,E)+ isPalListKindactivate(F,G)+ isPalListKindactivate(H,B)
     [H>=0,F>=0,C>=0,C+F+1=A,H=G+1,E=6] 
* CE 96: isPalListKindactivate(A,B) = 2+ isPalListKindactivate(C,D)+ isPalListKindactivate(D,E)+ isPalListKindactivate(F,G)
     [G+1>=0,F>=0,E>=0,C>=0,E+G+2=B,C+F+1=A] 

### Cost equations --> "Loop" of isPalListKindactivate/2 
* CEs [96] --> Loop 45 
* CEs [95] --> Loop 46 
* CEs [93] --> Loop 47 
* CEs [94] --> Loop 48 
* CEs [84] --> Loop 49 
* CEs [85] --> Loop 50 
* CEs [86] --> Loop 51 
* CEs [87] --> Loop 52 
* CEs [88] --> Loop 53 
* CEs [89] --> Loop 54 
* CEs [90,91,92] --> Loop 55 

#### Loops of isPalListKindactivate/2 
* Loop 45: isPalListKindactivate(A,B)->  isPalListKindactivate(A',B')  isPalListKindactivate(B',A'2)  isPalListKindactivate(A'3,B'3)
                  [B'3+1>=0,A'3>=0,A'2>=0,A'>=0,A'2+B'3+2=B,A'+A'3+1=A] 
* Loop 46: isPalListKindactivate(A,B)->  isPalListKindactivate(A',B')  isPalListKindactivate(B',A'2)  isPalListKindactivate(A'3,B'3)  isPalListKindactivate(A'4,B)
                  [A'4>=0,A'3>=0,A'>=0,A'+A'3+1=A,A'4=B'3+1,A'2=6] 
* Loop 47: isPalListKindactivate(A,B)->  isPalListKindactivate(A',B)
                  [A>=7,A=A'+7] 
* Loop 48: isPalListKindactivate(A,B)->  isPalListKindactivate(A',B)
                  [A>=1,A=A'+1] 
* Loop 49: isPalListKindactivate(A,B) [A>=0,A+1=B] 
* Loop 50: isPalListKindactivate(A,B) [B=6,A=4] 
* Loop 51: isPalListKindactivate(A,B) [B=6,A=3] 
* Loop 52: isPalListKindactivate(A,B) [B=6,A=2] 
* Loop 53: isPalListKindactivate(A,B) [B=6,A=1] 
* Loop 54: isPalListKindactivate(A,B) [B=6,A=0] 
* Loop 55: isPalListKindactivate(A,A) [A>=0] 

### Ranking functions of CR isPalListKindactivate(A,B) 

#### Partial ranking functions of CR isPalListKindactivate(A,B) 
* Partial RF of phase [45,46,47,48]:
  - RF of loop [45:1,45:3,46:1,46:3,48:1]:
    A depends on loops [45:2,46:2,46:4] 
  - RF of loop [47:1]:
    A-6 depends on loops [45:2,46:2,46:4] 


### Resulting Chains:isPalListKindactivate(A,B) 
* [multiple([45,46,47,48],[[],[55],[54],[53],[52],[51],[50],[49]])]...
* [55]
* [54]
* [53]
* [52]
* [51]
* [50]
* [49]


### Merging Chains  isPalListKindactivate/2 into  External patterns of execution 
* [[54]] --> 1 
* [[53]] --> 2 
* [[52]] --> 3 
* [[51]] --> 4 
* [[50]] --> 5 
* [[49]] --> 6 
* [[55]] --> 7 
* [[multiple([45,46,47,48],[[],[55],[54],[53],[52],[51],[50],[49]])]] --> 8 


### Specialization of cost equations fun1/2 
* CE 58 is refined into CE [97] 
* CE 57 is refined into CE [98] 


#### Refined cost equations fun1/2 
* CE 97: fun1(V3,Out) = 0
     [V3>=0,Out=0] 
* CE 98: fun1(V3,Out) = 1
     [Out=6,V3=6] 

### Cost equations --> "Loop" of fun1/2 
* CEs [97] --> Loop 56 
* CEs [98] --> Loop 57 

#### Loops of fun1/2 
* Loop 56: fun1(V3,Out) [V3>=0,Out=0] 
* Loop 57: fun1(V3,Out) [Out=6,V3=6] 

### Ranking functions of CR fun1(V3,Out) 

#### Partial ranking functions of CR fun1(V3,Out) 


### Resulting Chains:fun1(V3,Out) 
* [57]
* [56]


### Merging Chains  fun1/2 into  External patterns of execution 
* [[57]] --> 1 
* [[56]] --> 2 


### Specialization of cost equations fun12/2 
* CE 60 is refined into CE [99] 
* CE 59 is refined into CE [100] 


#### Refined cost equations fun12/2 
* CE 99: fun12(V3,Out) = 0
     [V3>=0,Out=0] 
* CE 100: fun12(V3,Out) = 1
     [Out=6,V3=6] 

### Cost equations --> "Loop" of fun12/2 
* CEs [99] --> Loop 58 
* CEs [100] --> Loop 59 

#### Loops of fun12/2 
* Loop 58: fun12(V3,Out) [V3>=0,Out=0] 
* Loop 59: fun12(V3,Out) [Out=6,V3=6] 

### Ranking functions of CR fun12(V3,Out) 

#### Partial ranking functions of CR fun12(V3,Out) 


### Resulting Chains:fun12(V3,Out) 
* [59]
* [58]


### Merging Chains  fun12/2 into  External patterns of execution 
* [[59]] --> 1 
* [[58]] --> 2 


### Specialization of cost equations fun17/2 
* CE 56 is refined into CE [101] 
* CE 55 is refined into CE [102] 


#### Refined cost equations fun17/2 
* CE 101: fun17(V3,Out) = 0
     [V3>=0,Out=0] 
* CE 102: fun17(V3,Out) = 1
     [Out=6,V3=6] 

### Cost equations --> "Loop" of fun17/2 
* CEs [101] --> Loop 60 
* CEs [102] --> Loop 61 

#### Loops of fun17/2 
* Loop 60: fun17(V3,Out) [V3>=0,Out=0] 
* Loop 61: fun17(V3,Out) [Out=6,V3=6] 

### Ranking functions of CR fun17(V3,Out) 

#### Partial ranking functions of CR fun17(V3,Out) 


### Resulting Chains:fun17(V3,Out) 
* [61]
* [60]


### Merging Chains  fun17/2 into  External patterns of execution 
* [[61]] --> 1 
* [[60]] --> 2 


### Specialization of cost equations fun10/2 
* CE 78 is refined into CE [103] 
* CE 77 is refined into CE [104] 


#### Refined cost equations fun10/2 
* CE 103: fun10(V3,Out) = 0
     [V3>=0,Out=0] 
* CE 104: fun10(V3,Out) = 1
     [Out=6,V3=6] 

### Cost equations --> "Loop" of fun10/2 
* CEs [103] --> Loop 62 
* CEs [104] --> Loop 63 

#### Loops of fun10/2 
* Loop 62: fun10(V3,Out) [V3>=0,Out=0] 
* Loop 63: fun10(V3,Out) [Out=6,V3=6] 

### Ranking functions of CR fun10(V3,Out) 

#### Partial ranking functions of CR fun10(V3,Out) 


### Resulting Chains:fun10(V3,Out) 
* [63]
* [62]


### Merging Chains  fun10/2 into  External patterns of execution 
* [[63]] --> 1 
* [[62]] --> 2 


### Specialization of cost equations isQid/2 
* CE 70 is refined into CE [105] 
* CE 67 is refined into CE [106] 
* CE 68 is refined into CE [107] 
* CE 69 is refined into CE [108] 
* CE 65 is refined into CE [109] 
* CE 66 is refined into CE [110] 


#### Refined cost equations isQid/2 
* CE 105: isQid(V3,Out) = 0
     [V3>=0,Out=0] 
* CE 106: isQid(V3,Out) = 1
     [Out=6,V3=5] 
* CE 107: isQid(V3,Out) = 1
     [Out=6,V3=4] 
* CE 108: isQid(V3,Out) = 1
     [Out=6,V3=2] 
* CE 109: isQid(V3,Out) = 1
     [Out=6,V3=1] 
* CE 110: isQid(V3,Out) = 1
     [Out=6,V3=0] 

### Cost equations --> "Loop" of isQid/2 
* CEs [105] --> Loop 64 
* CEs [106] --> Loop 65 
* CEs [107] --> Loop 66 
* CEs [108] --> Loop 67 
* CEs [109] --> Loop 68 
* CEs [110] --> Loop 69 

#### Loops of isQid/2 
* Loop 64: isQid(V3,Out) [V3>=0,Out=0] 
* Loop 65: isQid(V3,Out) [Out=6,V3=5] 
* Loop 66: isQid(V3,Out) [Out=6,V3=4] 
* Loop 67: isQid(V3,Out) [Out=6,V3=2] 
* Loop 68: isQid(V3,Out) [Out=6,V3=1] 
* Loop 69: isQid(V3,Out) [Out=6,V3=0] 

### Ranking functions of CR isQid(V3,Out) 

#### Partial ranking functions of CR isQid(V3,Out) 


### Resulting Chains:isQid(V3,Out) 
* [69]
* [68]
* [67]
* [66]
* [65]
* [64]


### Merging Chains  isQid/2 into  External patterns of execution 
* [[69]] --> 1 
* [[68]] --> 2 
* [[67]] --> 3 
* [[66]] --> 4 
* [[65]] --> 5 
* [[64]] --> 6 


### Specialization of cost equations fun9/3 
* CE 76 is refined into CE [111] 
* CE 75 is refined into CE [112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137] 


#### Refined cost equations fun9/3 
* CE 111: fun9(V3,V4,Out) = 0
     [V4>=0,V3>=0,Out=0] 
* CE 112: fun9(V3,V4,Out) = 1+ isPalListKindactivate(W4,X4):1+ isQid(Y4,Z4):6+ fun10(A5,B5):2
     [B5=0,A5=0,Z4=0,Y4=6,X4=6,W4=0,Out=0,V4=0,V3=6] 
* CE 113: fun9(V3,V4,Out) = 1+ isPalListKindactivate(W4,X4):2+ isQid(Y4,Z4):6+ fun10(A5,B5):2
     [B5=0,A5=0,Z4=0,Y4=6,X4=6,W4=1,Out=0,V4=1,V3=6] 
* CE 114: fun9(V3,V4,Out) = 1+ isPalListKindactivate(W4,X4):3+ isQid(Y4,Z4):6+ fun10(A5,B5):2
     [B5=0,A5=0,Z4=0,Y4=6,X4=6,W4=2,Out=0,V4=2,V3=6] 
* CE 115: fun9(V3,V4,Out) = 1+ isPalListKindactivate(W4,X4):4+ isQid(Y4,Z4):6+ fun10(A5,B5):2
     [B5=0,A5=0,Z4=0,Y4=6,X4=6,W4=3,Out=0,V4=3,V3=6] 
* CE 116: fun9(V3,V4,Out) = 1+ isPalListKindactivate(W4,X4):5+ isQid(Y4,Z4):6+ fun10(A5,B5):2
     [B5=0,A5=0,Z4=0,Y4=6,X4=6,W4=4,Out=0,V4=4,V3=6] 
* CE 117: fun9(V3,V4,Out) = 1+ isPalListKindactivate(W4,X4):6+ isQid(Y4,Z4):2+ fun10(A5,B5):1
     [B5=6,A5=6,Z4=6,Y4=1,X4=1,W4=0,Out=6,V4=0,V3=6] 
* CE 118: fun9(V3,V4,Out) = 1+ isPalListKindactivate(W4,X4):6+ isQid(Y4,Z4):2+ fun10(A5,B5):2
     [B5=0,A5=6,Z4=6,Y4=1,X4=1,W4=0,Out=0,V4=0,V3=6] 
* CE 119: fun9(V3,V4,Out) = 1+ isPalListKindactivate(W4,X4):6+ isQid(Y4,Z4):3+ fun10(A5,B5):1
     [B5=6,A5=6,Z4=6,Y4=2,X4=2,W4=1,Out=6,V4=1,V3=6] 
* CE 120: fun9(V3,V4,Out) = 1+ isPalListKindactivate(W4,X4):6+ isQid(Y4,Z4):3+ fun10(A5,B5):2
     [B5=0,A5=6,Z4=6,Y4=2,X4=2,W4=1,Out=0,V4=1,V3=6] 
* CE 121: fun9(V3,V4,Out) = 1+ isPalListKindactivate(W4,X4):6+ isQid(Y4,Z4):4+ fun10(A5,B5):1
     [B5=6,A5=6,Z4=6,Y4=4,X4=4,W4=3,Out=6,V4=3,V3=6] 
* CE 122: fun9(V3,V4,Out) = 1+ isPalListKindactivate(W4,X4):6+ isQid(Y4,Z4):4+ fun10(A5,B5):2
     [B5=0,A5=6,Z4=6,Y4=4,X4=4,W4=3,Out=0,V4=3,V3=6] 
* CE 123: fun9(V3,V4,Out) = 1+ isPalListKindactivate(W4,X4):6+ isQid(Y4,Z4):5+ fun10(A5,B5):1
     [B5=6,A5=6,Z4=6,Y4=5,X4=5,W4=4,Out=6,V4=4,V3=6] 
* CE 124: fun9(V3,V4,Out) = 1+ isPalListKindactivate(W4,X4):6+ isQid(Y4,Z4):5+ fun10(A5,B5):2
     [B5=0,A5=6,Z4=6,Y4=5,X4=5,W4=4,Out=0,V4=4,V3=6] 
* CE 125: fun9(V3,V4,Out) = 1+ isPalListKindactivate(W4,X4):6+ isQid(X4,Y4):6+ fun10(Z4,A5):2
     [X4>=1,X4=W4+1,X4=V4+1,A5=0,Z4=0,Y4=0,Out=0,V3=6] 
* CE 126: fun9(V3,V4,Out) = 1+ isPalListKindactivate(W4,X4):7+ isQid(Y4,Z4):1+ fun10(A5,B5):1
     [B5=6,A5=6,Z4=6,Y4=0,X4=0,W4=0,Out=6,V4=0,V3=6] 
* CE 127: fun9(V3,V4,Out) = 1+ isPalListKindactivate(W4,X4):7+ isQid(Y4,Z4):1+ fun10(A5,B5):2
     [B5=0,A5=6,Z4=6,Y4=0,X4=0,W4=0,Out=0,V4=0,V3=6] 
* CE 128: fun9(V3,V4,Out) = 1+ isPalListKindactivate(W4,X4):7+ isQid(Y4,Z4):2+ fun10(A5,B5):1
     [B5=6,A5=6,Z4=6,Y4=1,X4=1,W4=1,Out=6,V4=1,V3=6] 
* CE 129: fun9(V3,V4,Out) = 1+ isPalListKindactivate(W4,X4):7+ isQid(Y4,Z4):2+ fun10(A5,B5):2
     [B5=0,A5=6,Z4=6,Y4=1,X4=1,W4=1,Out=0,V4=1,V3=6] 
* CE 130: fun9(V3,V4,Out) = 1+ isPalListKindactivate(W4,X4):7+ isQid(Y4,Z4):3+ fun10(A5,B5):1
     [B5=6,A5=6,Z4=6,Y4=2,X4=2,W4=2,Out=6,V4=2,V3=6] 
* CE 131: fun9(V3,V4,Out) = 1+ isPalListKindactivate(W4,X4):7+ isQid(Y4,Z4):3+ fun10(A5,B5):2
     [B5=0,A5=6,Z4=6,Y4=2,X4=2,W4=2,Out=0,V4=2,V3=6] 
* CE 132: fun9(V3,V4,Out) = 1+ isPalListKindactivate(W4,X4):7+ isQid(Y4,Z4):4+ fun10(A5,B5):1
     [B5=6,A5=6,Z4=6,Y4=4,X4=4,W4=4,Out=6,V4=4,V3=6] 
* CE 133: fun9(V3,V4,Out) = 1+ isPalListKindactivate(W4,X4):7+ isQid(Y4,Z4):4+ fun10(A5,B5):2
     [B5=0,A5=6,Z4=6,Y4=4,X4=4,W4=4,Out=0,V4=4,V3=6] 
* CE 134: fun9(V3,V4,Out) = 1+ isPalListKindactivate(W4,X4):7+ isQid(Y4,Z4):5+ fun10(A5,B5):1
     [B5=6,A5=6,Z4=6,Y4=5,X4=5,W4=5,Out=6,V4=5,V3=6] 
* CE 135: fun9(V3,V4,Out) = 1+ isPalListKindactivate(W4,X4):7+ isQid(Y4,Z4):5+ fun10(A5,B5):2
     [B5=0,A5=6,Z4=6,Y4=5,X4=5,W4=5,Out=0,V4=5,V3=6] 
* CE 136: fun9(V3,V4,Out) = 1+ isPalListKindactivate(V4,V4):7+ isQid(V4,W4):6+ fun10(X4,Y4):2
     [V4>=0,Y4=0,X4=0,W4=0,Out=0,V3=6] 
* CE 137: fun9(V3,V4,Out) = 1+ isPalListKindactivate(V4,W4):8
     [V4>=1,V3=6] 

### Cost equations --> "Loop" of fun9/3 
* CEs [137] --> Loop 70 
* CEs [134] --> Loop 71 
* CEs [135] --> Loop 72 
* CEs [123,132] --> Loop 73 
* CEs [116,124,133] --> Loop 74 
* CEs [121] --> Loop 75 
* CEs [115,122] --> Loop 76 
* CEs [130] --> Loop 77 
* CEs [114,131] --> Loop 78 
* CEs [119,128] --> Loop 79 
* CEs [113,120,129] --> Loop 80 
* CEs [117,126] --> Loop 81 
* CEs [111,112,118,125,127,136] --> Loop 82 

#### Loops of fun9/3 
* Loop 70: fun9(V3,V4,Out) [V4>=1,V3=6] 
* Loop 71: fun9(V3,V4,Out) [Out=6,V4=5,V3=6] 
* Loop 72: fun9(V3,V4,Out) [Out=0,V4=5,V3=6] 
* Loop 73: fun9(V3,V4,Out) [Out=6,V4=4,V3=6] 
* Loop 74: fun9(V3,V4,Out) [Out=0,V4=4,V3=6] 
* Loop 75: fun9(V3,V4,Out) [Out=6,V4=3,V3=6] 
* Loop 76: fun9(V3,V4,Out) [Out=0,V4=3,V3=6] 
* Loop 77: fun9(V3,V4,Out) [Out=6,V4=2,V3=6] 
* Loop 78: fun9(V3,V4,Out) [Out=0,V4=2,V3=6] 
* Loop 79: fun9(V3,V4,Out) [Out=6,V4=1,V3=6] 
* Loop 80: fun9(V3,V4,Out) [Out=0,V4=1,V3=6] 
* Loop 81: fun9(V3,V4,Out) [Out=6,V4=0,V3=6] 
* Loop 82: fun9(V3,V4,Out) [V4>=0,V3>=0,Out=0] 

### Ranking functions of CR fun9(V3,V4,Out) 

#### Partial ranking functions of CR fun9(V3,V4,Out) 


### Resulting Chains:fun9(V3,V4,Out) 
* [82]
* [81]
* [80]
* [79]
* [78]
* [77]
* [76]
* [75]
* [74]
* [73]
* [72]
* [71]
* [70]...


### Merging Chains  fun9/3 into  External patterns of execution 
* [[81]] --> 1 
* [[80],[82]] --> 2 
* [[79]] --> 3 
* [[78]] --> 4 
* [[77]] --> 5 
* [[76]] --> 6 
* [[75]] --> 7 
* [[74]] --> 8 
* [[73]] --> 9 
* [[72]] --> 10 
* [[71]] --> 11 
* [[70]] --> 12 


### Specialization of cost equations fun14/2 
* CE 62 is refined into CE [138] 
* CE 61 is refined into CE [139] 


#### Refined cost equations fun14/2 
* CE 138: fun14(V3,Out) = 0
     [V3>=0,Out=0] 
* CE 139: fun14(V3,Out) = 1
     [Out=6,V3=6] 

### Cost equations --> "Loop" of fun14/2 
* CEs [138] --> Loop 83 
* CEs [139] --> Loop 84 

#### Loops of fun14/2 
* Loop 83: fun14(V3,Out) [V3>=0,Out=0] 
* Loop 84: fun14(V3,Out) [Out=6,V3=6] 

### Ranking functions of CR fun14(V3,Out) 

#### Partial ranking functions of CR fun14(V3,Out) 


### Resulting Chains:fun14(V3,Out) 
* [84]
* [83]


### Merging Chains  fun14/2 into  External patterns of execution 
* [[84]] --> 1 
* [[83]] --> 2 


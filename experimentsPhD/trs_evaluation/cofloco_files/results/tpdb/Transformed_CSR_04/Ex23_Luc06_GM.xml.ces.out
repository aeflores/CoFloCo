
Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. non_recursive  : [fun/2]
1. recursive [non_tail] : [mark/2]
2. non_recursive  : [start/1]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into fun/2
1. SCC is partially evaluated into mark/2
2. SCC is partially evaluated into start/1

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations fun/2 
* CE 5 is refined into CE [10] 
* CE 4 is refined into CE [11] 


#### Refined cost equations fun/2 
* CE 10: fun(V,Out) = 1
     [V>=0,V+1=Out] 
* CE 11: fun(V,Out) = 1
     [Out=4,V=1] 

### Cost equations --> "Loop" of fun/2 
* CEs [10] --> Loop 7 
* CEs [11] --> Loop 8 

#### Loops of fun/2 
* Loop 7: fun(V,Out) [V>=0,V+1=Out] 
* Loop 8: fun(V,Out) [Out=4,V=1] 

### Ranking functions of CR fun(V,Out) 

#### Partial ranking functions of CR fun(V,Out) 


### Resulting Chains:fun(V,Out) 
* [8]
* [7]


### Merging Chains  fun/2 into  External patterns of execution 
* [[8]] --> 1 
* [[7]] --> 2 


### Specialization of cost equations mark/2 
* CE 6 is refined into CE [12,13] 
* CE 9 is refined into CE [14] 
* CE 8 is refined into CE [15] 
* CE 7 is refined into CE [16] 


#### Refined cost equations mark/2 
* CE 12: mark(V,Out) = 1+ mark(W,X)+ fun(Y,Z):1
     [W>=0,W+1=V,X=1,Z=4,Y=1,Out=4] 
* CE 13: mark(V,Out) = 1+ mark(W,X)+ fun(Y,Out):2
     [W>=0,Out>=1,Out=X+1,Out=Y+1,W+1=V] 
* CE 14: mark(V,Out) = 1+ mark(W,X)
     [W>=0,X+1=Out,W+1=V] 
* CE 15: mark(A,A) = 1
     [A>=1] 
* CE 16: mark(V,Out) = 1
     [Out=0,V=0] 

### Cost equations --> "Loop" of mark/2 
* CEs [15] --> Loop 9 
* CEs [16] --> Loop 10 
* CEs [13,14] --> Loop 11 
* CEs [12] --> Loop 12 

#### Loops of mark/2 
* Loop 9: mark(A,A) [A>=1] 
* Loop 10: mark(V,Out) [Out=0,V=0] 
* Loop 11: mark(V,Out)->  mark(V',Out')
                  [V>=1,Out=Out'+1,V=V'+1] 
* Loop 12: mark(V,Out)->  mark(V',Out')
                  [V>=1,V=V'+1,Out'=1,Out=4] 

### Ranking functions of CR mark(V,Out) 
* RF of phase [11,12]: [V]

#### Partial ranking functions of CR mark(V,Out) 
* Partial RF of phase [11,12]:
  - RF of loop [11:1,12:1]:
    V


### Resulting Chains:mark(V,Out) 
* [[11,12],10]
* [[11,12],9]
* [10]
* [9]


### Merging Chains  mark/2 into  External patterns of execution 
* [[10]] --> 1 
* [[9],[10,[11,12]]] --> 2 
* [[9,[11,12]]] --> 3 


### Specialization of cost equations start/1 
* CE 2 is refined into CE [17,18] 
* CE 3 is refined into CE [19,20,21] 


#### Refined cost equations start/1 
* CE 17: start(V) = 0+ fun(W,X):1
     [X=4,W=1,V=1] 
* CE 18: start(V) = 0+ fun(W,X):2
     [X>=1,X=W+1,X=V+1] 
* CE 19: start(V) = 0+ mark(W,X):1
     [X=0,W=0,V=0] 
* CE 20: start(V) = 0+ mark(V,W):2
     [3*V>=W+2,W>=V] 
* CE 21: start(V) = 0+ mark(V,W):3
     [V+2>=W,W>=V,V>=2] 

### Cost equations --> "Loop" of start/1 
* CEs [17] --> Loop 13 
* CEs [18,19,20,21] --> Loop 14 

#### Loops of start/1 
* Loop 13: start(V) [V=1] 
* Loop 14: start(V) [V>=0] 

### Ranking functions of CR start(V) 

#### Partial ranking functions of CR start(V) 


### Resulting Chains:start(V) 
* [14]
* [13]


### Merging Chains  start/1 into  External patterns of execution 
* [[13],[14]] --> 1 


Computing Bounds
=====================================

#### Cost of chains of fun(V,Out):
* Chain [8]: 1
  with precondition: [V=1,Out=4] 

* Chain [7]: 1
  with precondition: [V+1=Out,V>=0] 


#### Cost of loops [11,12] 

 * loop 11:mark(V,Out) -> [mark(V',Out')] 
2
 * loop 12:mark(V,Out) -> [mark(V',Out')] 
2
#### Cost of phase [11,12]:mark(V,Out) -> [mark(V',Out')] 
4*it(11)+0
  Such that:aux(1) =< V
aux(2) =< V-V'
it(11) =< aux(1)
it(11) =< aux(2)

#### Cost of phase [11,12]:mark(V,Out) -> [mark(V',Out')] 
4*it(11)+0
  Such that:aux(1) =< V
aux(2) =< V-V'
it(11) =< aux(1)
it(11) =< aux(2)

#### Cost of chains of mark(V,Out):
* Chain [[11,12],10]: 4*it(11)+1
  Such that:aux(3) =< V
it(11) =< aux(3)

  with precondition: [Out>=V,3*V>=Out+2] 

* Chain [[11,12],9]: 4*it(11)+1
  Such that:aux(4) =< V
it(11) =< aux(4)

  with precondition: [V>=2,Out>=V,V+2>=Out] 

* Chain [10]: 1
  with precondition: [V=0,Out=0] 

* Chain [9]: 1
  with precondition: [V=Out,V>=1] 


#### Cost of chains of start(V):
* Chain [14]: 8*s(4)+1
  Such that:aux(5) =< V
s(4) =< aux(5)

  with precondition: [V>=0] 

* Chain [13]: 1
  with precondition: [V=1] 


Closed-form bounds of start(V): 
-------------------------------------
* Chain [14] with precondition: [V>=0] 
    - Upper bound: 8*V+1 
    - Complexity: n 
* Chain [13] with precondition: [V=1] 
    - Upper bound: 1 
    - Complexity: constant 

### Maximum cost of start(V): 8*V+1 
Asymptotic class: n 

Time statistics: 
-------------------------------------
* Partial evaluation computed in 4 ms.
* Invariants computed in 10 ms.
   - Backward Invariants 5 ms.
   - Transitive Invariants 1 ms.
* Refinement performed in 15 ms.
* Termination proved in 1 ms.
* Upper bounds computed in 16 ms.
   - Equation cost structures 7 ms.
   - Phase cost structures 6 ms.
   - Chain cost structures 5 ms.
   - Solving cost expressions 0 ms.
* Total analysis performed in 56 ms.


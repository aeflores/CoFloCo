
Preprocessing Cost Relations
=====================================
9. SCC does not have a single cut point : [isNat/2,isNatIList/2,isNatList/2]  
 Merged into isNatisNatIListisNatList/2

#### Computed strongly connected components 
0. non_recursive  : [cons/3]
1. non_recursive  : [fun/1]
2. non_recursive  : [length/2]
3. non_recursive  : [nil/1]
4. non_recursive  : [s/2]
5. non_recursive  : [take/3]
6. non_recursive  : [zeros/1]
7. non_recursive  : [activate/2]
8. non_recursive  : [and/3]
10. non_recursive  : [uLength/3]
11. non_recursive  : [uTake1/2]
12. non_recursive  : [uTake2/5]
13. non_recursive  : [start/4]
9. recursive [non_tail,multiple] : [isNatisNatIListisNatList/2]

#### Obtained direct recursion through partial evaluation 
0. SCC is completely evaluated into other SCCs
1. SCC is completely evaluated into other SCCs
2. SCC is completely evaluated into other SCCs
3. SCC is completely evaluated into other SCCs
4. SCC is completely evaluated into other SCCs
5. SCC is completely evaluated into other SCCs
6. SCC is partially evaluated into zeros/1
7. SCC is partially evaluated into activate/2
8. SCC is partially evaluated into and/3
10. SCC is partially evaluated into uLength/3
11. SCC is partially evaluated into uTake1/2
12. SCC is partially evaluated into uTake2/5
13. SCC is partially evaluated into start/4
9. SCC is partially evaluated into isNatisNatIListisNatList/2

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations zeros/1 
* CE 23 is refined into CE [31] 
* CE 24 is refined into CE [32] 


#### Refined cost equations zeros/1 
* CE 31: zeros(Out) = 3
     [Out=3] 
* CE 32: zeros(Out) = 1
     [Out=2] 

### Cost equations --> "Loop" of zeros/1 
* CEs [31] --> Loop 20 
* CEs [32] --> Loop 21 

#### Loops of zeros/1 
* Loop 20: zeros(Out) [Out=3] 
* Loop 21: zeros(Out) [Out=2] 

### Ranking functions of CR zeros(Out) 

#### Partial ranking functions of CR zeros(Out) 


### Resulting Chains:zeros(Out) 
* [21]
* [20]


### Merging Chains  zeros/1 into  External patterns of execution 
* [[21]] --> 1 
* [[20]] --> 2 


### Specialization of cost equations activate/2 
* CE 21 is refined into CE [33,34] 
* CE 19 is refined into CE [35] 
* CE 20 is refined into CE [36] 
* CE 22 is refined into CE [37] 


#### Refined cost equations activate/2 
* CE 33: activate(V,Out) = 1+ zeros(W):1
     [W=2,Out=2,V=2] 
* CE 34: activate(V,Out) = 1+ zeros(W):2
     [W=3,Out=3,V=2] 
* CE 35: activate(A,A) = 2
     [A>=1] 
* CE 36: activate(V,Out) = 2
     [Out=0,V=0] 
* CE 37: activate(A,A) = 1
     [A>=0] 

### Cost equations --> "Loop" of activate/2 
* CEs [34] --> Loop 22 
* CEs [33] --> Loop 23 
* CEs [35,36,37] --> Loop 24 

#### Loops of activate/2 
* Loop 22: activate(V,Out) [Out=3,V=2] 
* Loop 23: activate(V,Out) [Out=2,V=2] 
* Loop 24: activate(A,A) [A>=0] 

### Ranking functions of CR activate(V,Out) 

#### Partial ranking functions of CR activate(V,Out) 


### Resulting Chains:activate(V,Out) 
* [24]
* [23]
* [22]


### Merging Chains  activate/2 into  External patterns of execution 
* [[23],[24]] --> 1 
* [[22]] --> 2 


### Specialization of cost equations and/3 
* CE 18 is refined into CE [38] 
* CE 17 is refined into CE [39] 


#### Refined cost equations and/3 
* CE 38: and(V,V1,Out) = 0
     [V1>=0,V>=0,Out=0] 
* CE 39: and(A,B,B) = 1
     [B>=0,A=1] 

### Cost equations --> "Loop" of and/3 
* CEs [38] --> Loop 25 
* CEs [39] --> Loop 26 

#### Loops of and/3 
* Loop 25: and(V,V1,Out) [V1>=0,V>=0,Out=0] 
* Loop 26: and(A,B,B) [B>=0,A=1] 

### Ranking functions of CR and(V,V1,Out) 

#### Partial ranking functions of CR and(V,V1,Out) 


### Resulting Chains:and(V,V1,Out) 
* [26]
* [25]


### Merging Chains  and/3 into  External patterns of execution 
* [[26]] --> 1 
* [[25]] --> 2 


### Specialization of cost equations isNatisNatIListisNatList/2 
* CE 12 is refined into CE [40] 
* CE 14 is refined into CE [41] 
* CE 16 is refined into CE [42] 
* CE 11 is refined into CE [43] 
* CE 10 is refined into CE [44,45] 
* CE 15 is refined into CE [46,47] 
* CE 13 is refined into CE [48,49,50,51,52,53,54,55] 


#### Refined cost equations isNatisNatIListisNatList/2 
* CE 40: isNatisNatIListisNatList(A,B) = 0
     [A>=0,B=0] 
* CE 41: isNatisNatIListisNatList(A,B) = 1
     [B=1,A=2] 
* CE 42: isNatisNatIListisNatList(A,B) = 1
     [B=1,A=1] 
* CE 43: isNatisNatIListisNatList(A,B) = 1
     [B=1,A=0] 
* CE 44: isNatisNatIListisNatList(A,B) = 1+ activate(C,C):1+ isNatisNatIListisNatList(C,B)
     [C>=0,C+1=A] 
* CE 45: isNatisNatIListisNatList(A,B) = 1+ activate(C,D):2+ isNatisNatIListisNatList(E,B)
     [E=3,D=3,C=2,A=3] 
* CE 46: isNatisNatIListisNatList(A,B) = 1+ activate(A,A):1+ isNatisNatIListisNatList(A,B)
     [A>=0] 
* CE 47: isNatisNatIListisNatList(A,B) = 1+ activate(C,D):2+ isNatisNatIListisNatList(E,B)
     [E=3,D=3,C=2,A=2] 
* CE 48: isNatisNatIListisNatList(A,B) = 1+ activate(C,C):1+ isNatisNatIListisNatList(C,D)+ activate(E,E):1+ isNatisNatIListisNatList(E,B)+ and(F,B,B):1
     [B>=0,E>=0,C>=0,C+E+1=A,D=1,F=1] 
* CE 49: isNatisNatIListisNatList(A,B) = 1+ activate(C,C):1+ isNatisNatIListisNatList(C,D)+ activate(E,E):1+ isNatisNatIListisNatList(E,F)+ and(D,F,G):2
     [F>=0,D>=0,E>=0,C>=0,C+E+1=A,G=0,B=0] 
* CE 50: isNatisNatIListisNatList(A,B) = 1+ activate(C,C):1+ isNatisNatIListisNatList(C,D)+ activate(E,F):2+ isNatisNatIListisNatList(G,B)+ and(H,B,B):1
     [B>=0,C>=0,C+3=A,G=3,D=1,H=1,F=3,E=2] 
* CE 51: isNatisNatIListisNatList(A,B) = 1+ activate(C,C):1+ isNatisNatIListisNatList(C,D)+ activate(E,F):2+ isNatisNatIListisNatList(G,H)+ and(D,H,I):2
     [H>=0,D>=0,C>=0,C+3=A,G=3,I=0,F=3,E=2,B=0] 
* CE 52: isNatisNatIListisNatList(A,B) = 1+ activate(C,D):2+ isNatisNatIListisNatList(E,F)+ activate(G,G):1+ isNatisNatIListisNatList(G,B)+ and(H,B,B):1
     [B>=0,G>=0,G+3=A,F=1,E=3,H=1,D=3,C=2] 
* CE 53: isNatisNatIListisNatList(A,B) = 1+ activate(C,D):2+ isNatisNatIListisNatList(E,F)+ activate(G,G):1+ isNatisNatIListisNatList(G,H)+ and(F,H,I):2
     [H>=0,F>=0,G>=0,G+3=A,E=3,I=0,D=3,C=2,B=0] 
* CE 54: isNatisNatIListisNatList(A,B) = 1+ activate(C,D):2+ isNatisNatIListisNatList(E,F)+ activate(G,H):2+ isNatisNatIListisNatList(I,B)+ and(J,B,B):1
     [B>=0,I=3,F=1,E=3,J=1,H=3,G=2,D=3,C=2,A=5] 
* CE 55: isNatisNatIListisNatList(A,B) = 1+ activate(C,D):2+ isNatisNatIListisNatList(E,F)+ activate(G,H):2+ isNatisNatIListisNatList(I,J)+ and(F,J,K):2
     [J>=0,F>=0,I=3,E=3,K=0,H=3,G=2,D=3,C=2,B=0,A=5] 

### Cost equations --> "Loop" of isNatisNatIListisNatList/2 
* CEs [48] --> Loop 27 
* CEs [50] --> Loop 28 
* CEs [52] --> Loop 29 
* CEs [49] --> Loop 30 
* CEs [51] --> Loop 31 
* CEs [53] --> Loop 32 
* CEs [54] --> Loop 33 
* CEs [55] --> Loop 34 
* CEs [44] --> Loop 35 
* CEs [45,46] --> Loop 36 
* CEs [47] --> Loop 37 
* CEs [40] --> Loop 38 
* CEs [41] --> Loop 39 
* CEs [42] --> Loop 40 
* CEs [43] --> Loop 41 

#### Loops of isNatisNatIListisNatList/2 
* Loop 27: isNatisNatIListisNatList(A,B)->  isNatisNatIListisNatList(A',B')  isNatisNatIListisNatList(A'2,B)
                  [A>=A'+1,A'>=0,B>=0,A'+A'2+1=A,B'=1] 
* Loop 28: isNatisNatIListisNatList(A,B)->  isNatisNatIListisNatList(A',B')  isNatisNatIListisNatList(A'2,B)
                  [B>=0,A>=3,A=A'+3,A'2=3,B'=1] 
* Loop 29: isNatisNatIListisNatList(A,B)->  isNatisNatIListisNatList(A',B')  isNatisNatIListisNatList(A'2,B)
                  [B>=0,A>=3,A=A'2+3,B'=1,A'=3] 
* Loop 30: isNatisNatIListisNatList(A,B)->  isNatisNatIListisNatList(A',B')  isNatisNatIListisNatList(A'2,B'2)
                  [A>=A'+1,B'2>=0,B'>=0,A'>=0,A'+A'2+1=A,B=0] 
* Loop 31: isNatisNatIListisNatList(A,B)->  isNatisNatIListisNatList(A',B')  isNatisNatIListisNatList(A'2,B'2)
                  [B'2>=0,B'>=0,A>=3,A=A'+3,A'2=3,B=0] 
* Loop 32: isNatisNatIListisNatList(A,B)->  isNatisNatIListisNatList(A',B')  isNatisNatIListisNatList(A'2,B'2)
                  [B'2>=0,B'>=0,A>=3,A=A'2+3,A'=3,B=0] 
* Loop 33: isNatisNatIListisNatList(A,B)->  isNatisNatIListisNatList(A',B')  isNatisNatIListisNatList(A'2,B)
                  [B>=0,A'2=3,B'=1,A'=3,A=5] 
* Loop 34: isNatisNatIListisNatList(A,B)->  isNatisNatIListisNatList(A',B')  isNatisNatIListisNatList(A'2,B'2)
                  [B'2>=0,B'>=0,A'2=3,A'=3,B=0,A=5] 
* Loop 35: isNatisNatIListisNatList(A,B)->  isNatisNatIListisNatList(A',B)
                  [A>=1,A=A'+1] 
* Loop 36: isNatisNatIListisNatList(A,B)->  isNatisNatIListisNatList(A,B)
                  [A>=0] 
* Loop 37: isNatisNatIListisNatList(A,B)->  isNatisNatIListisNatList(A',B)
                  [A'=3,A=2] 
* Loop 38: isNatisNatIListisNatList(A,B) [A>=0,B=0] 
* Loop 39: isNatisNatIListisNatList(A,B) [B=1,A=2] 
* Loop 40: isNatisNatIListisNatList(A,B) [B=1,A=1] 
* Loop 41: isNatisNatIListisNatList(A,B) [B=1,A=0] 

### Ranking functions of CR isNatisNatIListisNatList(A,B) 

#### Partial ranking functions of CR isNatisNatIListisNatList(A,B) 
* Partial RF of phase [27,28,29,30,31,32,33,34,35,36,37]:
  - RF of loop [27:1,27:2,30:1,30:2,35:1]:
    A depends on loops [37:1] 
  - RF of loop [28:1,29:2,31:1,32:2]:
    A-2 depends on loops [37:1] 
  - RF of loop [33:1,33:2,34:1,34:2]:
    A/2-2 depends on loops [37:1] 
  - RF of loop [37:1]:
    -A+3 depends on loops [27:1,27:2,28:1,28:2,29:1,29:2,30:1,30:2,31:1,31:2,32:1,32:2,33:1,33:2,34:1,34:2,35:1] 


### Resulting Chains:isNatisNatIListisNatList(A,B) 
* [multiple([27,28,29,30,31,32,33,34,35,36,37],[[],[41],[40],[39],[38]])]...
* [41]
* [40]
* [39]
* [38]


### Merging Chains  isNatisNatIListisNatList/2 into  External patterns of execution 
* [[41]] --> 1 
* [[40]] --> 2 
* [[39]] --> 3 
* [[38]] --> 4 
* [[multiple([27,28,29,30,31,32,33,34,35,36,37],[[],[41],[40],[39],[38]])]] --> 5 


### Specialization of cost equations uLength/3 
* CE 30 is refined into CE [56] 
* CE 29 is refined into CE [57,58] 


#### Refined cost equations uLength/3 
* CE 56: uLength(V,V1,Out) = 0
     [V1>=0,V>=0,Out=0] 
* CE 57: uLength(V,V1,Out) = 3+ activate(V1,V1):1
     [V1>=0,V1+2=Out,V=1] 
* CE 58: uLength(V,V1,Out) = 3+ activate(W1,X1):2
     [X1=3,W1=2,Out=5,V1=2,V=1] 

### Cost equations --> "Loop" of uLength/3 
* CEs [56] --> Loop 42 
* CEs [57] --> Loop 43 
* CEs [58] --> Loop 44 

#### Loops of uLength/3 
* Loop 42: uLength(V,V1,Out) [V1>=0,V>=0,Out=0] 
* Loop 43: uLength(V,V1,Out) [V1>=0,V1+2=Out,V=1] 
* Loop 44: uLength(V,V1,Out) [Out=5,V1=2,V=1] 

### Ranking functions of CR uLength(V,V1,Out) 

#### Partial ranking functions of CR uLength(V,V1,Out) 


### Resulting Chains:uLength(V,V1,Out) 
* [44]
* [43]
* [42]


### Merging Chains  uLength/3 into  External patterns of execution 
* [[44]] --> 1 
* [[43]] --> 2 
* [[42]] --> 3 


### Specialization of cost equations uTake1/2 
* CE 26 is refined into CE [59] 
* CE 25 is refined into CE [60] 


#### Refined cost equations uTake1/2 
* CE 59: uTake1(V,Out) = 0
     [V>=0,Out=0] 
* CE 60: uTake1(V,Out) = 2
     [Out=1,V=1] 

### Cost equations --> "Loop" of uTake1/2 
* CEs [59] --> Loop 45 
* CEs [60] --> Loop 46 

#### Loops of uTake1/2 
* Loop 45: uTake1(V,Out) [V>=0,Out=0] 
* Loop 46: uTake1(V,Out) [Out=1,V=1] 

### Ranking functions of CR uTake1(V,Out) 

#### Partial ranking functions of CR uTake1(V,Out) 


### Resulting Chains:uTake1(V,Out) 
* [46]
* [45]


### Merging Chains  uTake1/2 into  External patterns of execution 
* [[46]] --> 1 
* [[45]] --> 2 


### Specialization of cost equations uTake2/5 
* CE 28 is refined into CE [61] 
* CE 27 is refined into CE [62,63,64,65,66,67,68,69] 


#### Refined cost equations uTake2/5 
* CE 61: uTake2(V,V1,V2,V3,Out) = 0
     [V3>=0,V2>=0,V1>=0,V>=0,Out=0] 
* CE 62: uTake2(V,V1,V2,V3,Out) = 2+ activate(V2,V2):1+ activate(V1,V1):1+ activate(V3,V3):1
     [V3>=0,V1>=0,V2>=0,V1+V2+V3+2=Out,V=1] 
* CE 63: uTake2(V,V1,V2,V3,Out) = 2+ activate(V2,V2):1+ activate(V1,V1):1+ activate(W3,X3):2
     [V1>=0,V2>=0,V1+V2+5=Out,X3=3,W3=2,V3=2,V=1] 
* CE 64: uTake2(V,V1,V2,V3,Out) = 2+ activate(V2,V2):1+ activate(W3,X3):2+ activate(V3,V3):1
     [V3>=0,V2>=0,V2+V3+5=Out,X3=3,W3=2,V1=2,V=1] 
* CE 65: uTake2(V,V1,V2,V3,Out) = 2+ activate(V2,V2):1+ activate(W3,X3):2+ activate(Y3,Z3):2
     [V2>=0,V2+8=Out,Z3=3,Y3=2,X3=3,W3=2,V3=2,V1=2,V=1] 
* CE 66: uTake2(V,V1,V2,V3,Out) = 2+ activate(W3,X3):2+ activate(V1,V1):1+ activate(V3,V3):1
     [V3>=0,V1>=0,V1+V3+5=Out,X3=3,W3=2,V2=2,V=1] 
* CE 67: uTake2(V,V1,V2,V3,Out) = 2+ activate(W3,X3):2+ activate(V1,V1):1+ activate(Y3,Z3):2
     [V1>=0,V1+8=Out,Z3=3,Y3=2,X3=3,W3=2,V3=2,V2=2,V=1] 
* CE 68: uTake2(V,V1,V2,V3,Out) = 2+ activate(W3,X3):2+ activate(Y3,Z3):2+ activate(V3,V3):1
     [V3>=0,V3+8=Out,Z3=3,Y3=2,X3=3,W3=2,V2=2,V1=2,V=1] 
* CE 69: uTake2(V,V1,V2,V3,Out) = 2+ activate(W3,X3):2+ activate(Y3,Z3):2+ activate(A4,B4):2
     [B4=3,A4=2,Z3=3,Y3=2,X3=3,W3=2,Out=11,V3=2,V2=2,V1=2,V=1] 

### Cost equations --> "Loop" of uTake2/5 
* CEs [61] --> Loop 47 
* CEs [62] --> Loop 48 
* CEs [63] --> Loop 49 
* CEs [66] --> Loop 50 
* CEs [67] --> Loop 51 
* CEs [64] --> Loop 52 
* CEs [65] --> Loop 53 
* CEs [68] --> Loop 54 
* CEs [69] --> Loop 55 

#### Loops of uTake2/5 
* Loop 47: uTake2(V,V1,V2,V3,Out) [V3>=0,V2>=0,V1>=0,V>=0,Out=0] 
* Loop 48: uTake2(V,V1,V2,V3,Out) [V3>=0,V2>=0,V1>=0,V1+V2+V3+2=Out,V=1] 
* Loop 49: uTake2(V,V1,V2,V3,Out) [V2>=0,V1>=0,V1+V2+5=Out,V3=2,V=1] 
* Loop 50: uTake2(V,V1,V2,V3,Out) [V3>=0,V1>=0,V1+V3+5=Out,V2=2,V=1] 
* Loop 51: uTake2(V,V1,V2,V3,Out) [V1>=0,V1+8=Out,V3=2,V2=2,V=1] 
* Loop 52: uTake2(V,V1,V2,V3,Out) [V3>=0,V2>=0,V2+V3+5=Out,V1=2,V=1] 
* Loop 53: uTake2(V,V1,V2,V3,Out) [V2>=0,V2+8=Out,V3=2,V1=2,V=1] 
* Loop 54: uTake2(V,V1,V2,V3,Out) [V3>=0,V3+8=Out,V2=2,V1=2,V=1] 
* Loop 55: uTake2(V,V1,V2,V3,Out) [Out=11,V3=2,V2=2,V1=2,V=1] 

### Ranking functions of CR uTake2(V,V1,V2,V3,Out) 

#### Partial ranking functions of CR uTake2(V,V1,V2,V3,Out) 


### Resulting Chains:uTake2(V,V1,V2,V3,Out) 
* [55]
* [54]
* [53]
* [52]
* [51]
* [50]
* [49]
* [48]
* [47]


### Merging Chains  uTake2/5 into  External patterns of execution 
* [[55]] --> 1 
* [[54]] --> 2 
* [[53]] --> 3 
* [[52]] --> 4 
* [[51]] --> 5 
* [[50]] --> 6 
* [[49]] --> 7 
* [[48]] --> 8 
* [[47]] --> 9 


### Specialization of cost equations start/4 
* CE 2 is refined into CE [70,71,72,73,74] 
* CE 3 is refined into CE [75,76] 
* CE 4 is refined into CE [77,78] 
* CE 5 is refined into CE [79,80] 
* CE 6 is refined into CE [81] 
* CE 7 is refined into CE [82,83] 
* CE 8 is refined into CE [84,85,86,87,88,89,90,91,92] 
* CE 9 is refined into CE [93,94,95] 


#### Refined cost equations start/4 
* CE 70: start(V,V1,V2,V3) = 0+ isNatisNatIListisNatList(W3,X3):1
     [X3=1,W3=0,V=0] 
* CE 71: start(V,V1,V2,V3) = 0+ isNatisNatIListisNatList(W3,X3):2
     [X3=1,W3=1,V=1] 
* CE 72: start(V,V1,V2,V3) = 0+ isNatisNatIListisNatList(W3,X3):3
     [X3=1,W3=2,V=2] 
* CE 73: start(V,V1,V2,V3) = 0+ isNatisNatIListisNatList(V,W3):4
     [V>=0,W3=0] 
* CE 74: start(V,V1,V2,V3) = 0+ isNatisNatIListisNatList(V,W3):5
     [V>=0] 
* CE 75: start(V,V1,V2,V3) = 0+ and(W3,V1,V1):1
     [V1>=0,W3=1,V=1] 
* CE 76: start(V,V1,V2,V3) = 0+ and(V,V1,W3):2
     [V1>=0,V>=0,W3=0] 
* CE 77: start(V,V1,V2,V3) = 0+ activate(V,V):1
     [V>=0] 
* CE 78: start(V,V1,V2,V3) = 0+ activate(W3,X3):2
     [X3=3,W3=2,V=2] 
* CE 79: start(V,V1,V2,V3) = 0+ zeros(W3):1
     [W3=2] 
* CE 80: start(V,V1,V2,V3) = 0+ zeros(W3):2
     [W3=3] 
* CE 81: start(V,V1,V2,V3) = 1
     [] 
* CE 82: start(V,V1,V2,V3) = 0+ uTake1(W3,X3):1
     [X3=1,W3=1,V=1] 
* CE 83: start(V,V1,V2,V3) = 0+ uTake1(V,W3):2
     [V>=0,W3=0] 
* CE 84: start(V,V1,V2,V3) = 0+ uTake2(W3,X3,Y3,Z3,A4):1
     [A4=11,Z3=2,Y3=2,X3=2,W3=1,V3=2,V2=2,V1=2,V=1] 
* CE 85: start(V,V1,V2,V3) = 0+ uTake2(W3,X3,Y3,Z3,A4):2
     [A4>=8,A4=Z3+8,A4=V3+8,Y3=2,X3=2,W3=1,V2=2,V1=2,V=1] 
* CE 86: start(V,V1,V2,V3) = 0+ uTake2(W3,X3,Y3,Z3,A4):3
     [A4>=8,A4=Y3+8,A4=V2+8,Z3=2,X3=2,W3=1,V3=2,V1=2,V=1] 
* CE 87: start(V,V1,V2,V3) = 0+ uTake2(W3,X3,V2,Y3,Z3):4
     [Z3>=V2+5,V2>=0,Z3=V2+Y3+5,Z3=V2+V3+5,X3=2,W3=1,V1=2,V=1] 
* CE 88: start(V,V1,V2,V3) = 0+ uTake2(W3,X3,Y3,Z3,A4):5
     [A4>=8,A4=X3+8,A4=V1+8,Z3=2,Y3=2,W3=1,V3=2,V2=2,V=1] 
* CE 89: start(V,V1,V2,V3) = 0+ uTake2(W3,V1,X3,Y3,Z3):6
     [Z3>=V1+5,V1>=0,Z3=V1+Y3+5,Z3=V1+V3+5,X3=2,W3=1,V2=2,V=1] 
* CE 90: start(V,V1,V2,V3) = 0+ uTake2(W3,V1,X3,Y3,Z3):7
     [Z3>=V1+5,V1>=0,Z3=V1+X3+5,Z3=V1+V2+5,Y3=2,W3=1,V3=2,V=1] 
* CE 91: start(V,V1,V2,V3) = 0+ uTake2(W3,V1,V2,X3,Y3):8
     [Y3>=V1+V2+2,V2>=0,V1>=0,Y3=V1+V2+X3+2,Y3=V1+V2+V3+2,W3=1,V=1] 
* CE 92: start(V,V1,V2,V3) = 0+ uTake2(V,V1,V2,V3,W3):9
     [V3>=0,V2>=0,V1>=0,V>=0,W3=0] 
* CE 93: start(V,V1,V2,V3) = 0+ uLength(W3,X3,Y3):1
     [Y3=5,X3=2,W3=1,V1=2,V=1] 
* CE 94: start(V,V1,V2,V3) = 0+ uLength(W3,X3,Y3):2
     [Y3>=2,Y3=X3+2,Y3=V1+2,W3=1,V=1] 
* CE 95: start(V,V1,V2,V3) = 0+ uLength(V,V1,W3):3
     [V1>=0,V>=0,W3=0] 

### Cost equations --> "Loop" of start/4 
* CEs [70,71,72,73,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95] --> Loop 56 
* CEs [74] --> Loop 57 

#### Loops of start/4 
* Loop 56: start(V,V1,V2,V3) [] 
* Loop 57: start(V,V1,V2,V3) [V>=0] 

### Ranking functions of CR start(V,V1,V2,V3) 

#### Partial ranking functions of CR start(V,V1,V2,V3) 


### Resulting Chains:start(V,V1,V2,V3) 
* [57]...
* [56]


### Merging Chains  start/4 into  External patterns of execution 
* [[56]] --> 1 
* [[57]] --> 2 


Computing Bounds
=====================================

#### Cost of chains of zeros(Out):
* Chain [21]: 1
  with precondition: [Out=2] 

* Chain [20]: 3
  with precondition: [Out=3] 


#### Cost of chains of activate(V,Out):
* Chain [24]: 2
  with precondition: [V=Out,V>=0] 

* Chain [23]: 2
  with precondition: [V=2,Out=2] 

* Chain [22]: 4
  with precondition: [V=2,Out=3] 


#### Cost of chains of and(V,V1,Out):
* Chain [26]: 1
  with precondition: [V=1,V1=Out,V1>=0] 

* Chain [25]: 0
  with precondition: [Out=0,V>=0,V1>=0] 


#### Cost of loops [27,28,29,30,31,32,33,34,35,36,37] 

 * loop 27:isNatisNatIListisNatList(A,B) -> [isNatisNatIListisNatList(A',B'),isNatisNatIListisNatList(A'2,B'2)] 
6
 * loop 28:isNatisNatIListisNatList(A,B) -> [isNatisNatIListisNatList(A',B'),isNatisNatIListisNatList(A'2,B'2)] 
8
 * loop 29:isNatisNatIListisNatList(A,B) -> [isNatisNatIListisNatList(A',B'),isNatisNatIListisNatList(A'2,B'2)] 
8
 * loop 30:isNatisNatIListisNatList(A,B) -> [isNatisNatIListisNatList(A',B'),isNatisNatIListisNatList(A'2,B'2)] 
5
 * loop 31:isNatisNatIListisNatList(A,B) -> [isNatisNatIListisNatList(A',B'),isNatisNatIListisNatList(A'2,B'2)] 
7
 * loop 32:isNatisNatIListisNatList(A,B) -> [isNatisNatIListisNatList(A',B'),isNatisNatIListisNatList(A'2,B'2)] 
7
 * loop 33:isNatisNatIListisNatList(A,B) -> [isNatisNatIListisNatList(A',B'),isNatisNatIListisNatList(A'2,B'2)] 
10
 * loop 34:isNatisNatIListisNatList(A,B) -> [isNatisNatIListisNatList(A',B'),isNatisNatIListisNatList(A'2,B'2)] 
9
 * loop 35:isNatisNatIListisNatList(A,B) -> [isNatisNatIListisNatList(A',B')] 
3
 * loop 36:isNatisNatIListisNatList(A,B) -> [isNatisNatIListisNatList(A',B')] 
5
 * loop 37:isNatisNatIListisNatList(A,B) -> [isNatisNatIListisNatList(A',B')] 
5
#### Cost of phase [27,28,29,30,31,32,33,34,35,36,37]:isNatisNatIListisNatList(A,B) -> [] 
76*it(27)+0
#### Cost of chains of isNatisNatIListisNatList(A,B):
* Chain [multiple([27,28,29,30,31,32,33,34,35,36,37],[[],[41],[40],[39],[38]])]...: 76*it(27)+0
  with precondition: [A>=0] 

* Chain [41]: 1
  with precondition: [A=0,B=1] 

* Chain [40]: 1
  with precondition: [A=1,B=1] 

* Chain [39]: 1
  with precondition: [A=2,B=1] 

* Chain [38]: 0
  with precondition: [B=0,A>=0] 


#### Cost of chains of uLength(V,V1,Out):
* Chain [44]: 7
  with precondition: [V=1,V1=2,Out=5] 

* Chain [43]: 5
  with precondition: [V=1,V1+2=Out,V1>=0] 

* Chain [42]: 0
  with precondition: [Out=0,V>=0,V1>=0] 


#### Cost of chains of uTake1(V,Out):
* Chain [46]: 2
  with precondition: [V=1,Out=1] 

* Chain [45]: 0
  with precondition: [Out=0,V>=0] 


#### Cost of chains of uTake2(V,V1,V2,V3,Out):
* Chain [55]: 14
  with precondition: [V=1,V1=2,V2=2,V3=2,Out=11] 

* Chain [54]: 12
  with precondition: [V=1,V1=2,V2=2,V3+8=Out,V3>=0] 

* Chain [53]: 12
  with precondition: [V=1,V1=2,V3=2,V2+8=Out,V2>=0] 

* Chain [52]: 10
  with precondition: [V=1,V1=2,V2+V3+5=Out,V2>=0,V3>=0] 

* Chain [51]: 12
  with precondition: [V=1,V2=2,V3=2,V1+8=Out,V1>=0] 

* Chain [50]: 10
  with precondition: [V=1,V2=2,V1+V3+5=Out,V1>=0,V3>=0] 

* Chain [49]: 10
  with precondition: [V=1,V3=2,V1+V2+5=Out,V1>=0,V2>=0] 

* Chain [48]: 8
  with precondition: [V=1,V1+V2+V3+2=Out,V1>=0,V2>=0,V3>=0] 

* Chain [47]: 0
  with precondition: [Out=0,V>=0,V1>=0,V2>=0,V3>=0] 


#### Cost of chains of start(V,V1,V2,V3):
* Chain [57]...: 76*s(1)+0
  with precondition: [V>=0] 

* Chain [56]: 14
  with precondition: [] 


Closed-form bounds of start(V,V1,V2,V3): 
-------------------------------------
* Chain [57]... with precondition: [V>=0] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [56] with precondition: [] 
    - Upper bound: 14 
    - Complexity: constant 

### Maximum cost of start(V,V1,V2,V3): inf 
Asymptotic class: infinity 

Time statistics: 
-------------------------------------
* Partial evaluation computed in 29 ms.
* Invariants computed in 43 ms.
   - Backward Invariants 9 ms.
   - Transitive Invariants 14 ms.
* Refinement performed in 123 ms.
* Termination proved in 29 ms.
* Upper bounds computed in 80 ms.
   - Equation cost structures 41 ms.
   - Phase cost structures 49 ms.
   - Chain cost structures 0 ms.
   - Solving cost expressions 0 ms.
* Total analysis performed in 341 ms.


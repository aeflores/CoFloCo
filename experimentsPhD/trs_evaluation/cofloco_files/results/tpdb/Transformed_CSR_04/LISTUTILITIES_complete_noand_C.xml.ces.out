
Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. recursive  : [afterNth/3]
1. recursive  : [cons/3]
2. recursive  : [fst/2]
3. recursive  : [fun/4]
4. recursive  : [fun1/3]
5. recursive  : [fun10/4]
6. recursive  : [fun100/3]
7. recursive  : [fun101/3]
8. recursive  : [fun102/2]
9. recursive  : [fun103/3]
10. recursive  : [fun104/3]
11. recursive  : [fun105/2]
12. recursive  : [fun106/2]
13. recursive  : [fun107/4]
14. recursive  : [fun108/3]
15. recursive  : [fun109/3]
16. recursive  : [fun11/2]
17. recursive  : [fun110/3]
18. recursive  : [fun12/3]
19. recursive  : [fun13/3]
20. recursive  : [fun14/4]
21. recursive  : [fun15/5]
22. recursive  : [fun16/4]
23. recursive  : [fun17/3]
24. recursive  : [fun18/4]
25. recursive  : [fun19/4]
26. recursive  : [fun2/4]
27. recursive  : [fun20/4]
28. recursive  : [fun21/2]
29. recursive  : [fun22/4]
30. recursive  : [fun23/4]
31. recursive  : [fun24/3]
32. recursive  : [fun25/4]
33. recursive  : [fun26/3]
34. recursive  : [fun27/4]
35. recursive  : [fun28/3]
36. recursive  : [fun29/5]
37. recursive  : [fun3/3]
38. recursive  : [fun30/3]
39. recursive  : [fun31/4]
40. recursive  : [fun32/2]
41. recursive  : [fun33/3]
42. recursive  : [fun34/2]
43. recursive  : [fun35/4]
44. recursive  : [fun36/3]
45. recursive  : [fun37/4]
46. recursive  : [fun38/3]
47. recursive  : [fun39/3]
48. recursive  : [fun4/2]
49. recursive  : [fun40/4]
50. recursive  : [fun41/4]
51. recursive  : [fun42/4]
52. recursive  : [fun43/2]
53. recursive  : [fun44/4]
54. recursive  : [fun45/3]
55. recursive  : [fun46/3]
56. recursive  : [fun47/4]
57. recursive  : [fun48/4]
58. recursive  : [fun49/3]
59. recursive  : [fun5/5]
60. recursive  : [fun50/4]
61. recursive  : [fun51/2]
62. recursive  : [fun52/3]
63. recursive  : [fun53/3]
64. recursive  : [fun54/3]
65. recursive  : [fun55/4]
66. recursive  : [fun56/4]
67. recursive  : [fun57/3]
68. recursive  : [fun58/4]
69. recursive  : [fun59/4]
70. recursive  : [fun6/4]
71. recursive  : [fun60/4]
72. recursive  : [fun61/2]
73. recursive  : [fun62/5]
74. recursive  : [fun63/4]
75. recursive  : [fun64/3]
76. recursive  : [fun65/3]
77. recursive  : [fun66/4]
78. recursive  : [fun67/4]
79. recursive  : [fun68/4]
80. recursive  : [fun69/4]
81. recursive  : [fun7/2]
82. recursive  : [fun70/2]
83. recursive  : [fun71/2]
84. recursive  : [fun72/4]
85. recursive  : [fun73/2]
86. recursive  : [fun74/4]
87. recursive  : [fun75/3]
88. recursive  : [fun76/3]
89. recursive  : [fun77/4]
90. recursive  : [fun78/2]
91. recursive  : [fun79/3]
92. recursive  : [fun8/2]
93. recursive  : [fun80/5]
94. recursive  : [fun81/4]
95. recursive  : [fun82/4]
96. recursive  : [fun83/3]
97. recursive  : [fun84/4]
98. recursive  : [fun85/4]
99. recursive  : [fun86/3]
100. recursive  : [fun87/4]
101. recursive  : [fun88/3]
102. recursive  : [fun89/4]
103. recursive  : [fun9/3]
104. recursive  : [fun90/2]
105. recursive  : [fun91/2]
106. recursive  : [fun92/2]
107. recursive  : [fun93/2]
108. recursive  : [fun94/2]
109. recursive  : [fun95/5]
110. recursive  : [fun96/2]
111. recursive  : [fun97/2]
112. recursive  : [fun98/3]
113. recursive  : [fun99/4]
114. recursive  : [head/2]
115. recursive  : [isLNat/2]
116. recursive  : [isLNatKind/2]
117. recursive  : [isNatural/2]
118. recursive  : [isNaturalKind/2]
119. recursive  : [isPLNat/2]
120. recursive  : [isPLNatKind/2]
121. recursive  : [natsFrom/2]
122. recursive  : [pair/3]
123. non_recursive  : [proper/2]
124. recursive  : [s/2]
125. recursive  : [sel/3]
126. recursive  : [snd/2]
127. recursive  : [splitAt/3]
128. recursive  : [tail/2]
129. recursive  : [take/3]
130. recursive  : [top/2]
131. non_recursive  : [start/4]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into afterNth/3
1. SCC is partially evaluated into cons/3
2. SCC is partially evaluated into fst/2
3. SCC is partially evaluated into fun/4
4. SCC is partially evaluated into fun1/3
5. SCC is partially evaluated into fun10/4
6. SCC is partially evaluated into fun100/3
7. SCC is partially evaluated into fun101/3
8. SCC is partially evaluated into fun102/2
9. SCC is partially evaluated into fun103/3
10. SCC is partially evaluated into fun104/3
11. SCC is partially evaluated into fun105/2
12. SCC is partially evaluated into fun106/2
13. SCC is partially evaluated into fun107/4
14. SCC is partially evaluated into fun108/3
15. SCC is partially evaluated into fun109/3
16. SCC is partially evaluated into fun11/2
17. SCC is partially evaluated into fun110/3
18. SCC is partially evaluated into fun12/3
19. SCC is partially evaluated into fun13/3
20. SCC is partially evaluated into fun14/4
21. SCC is partially evaluated into fun15/5
22. SCC is partially evaluated into fun16/4
23. SCC is partially evaluated into fun17/3
24. SCC is partially evaluated into fun18/4
25. SCC is partially evaluated into fun19/4
26. SCC is partially evaluated into fun2/4
27. SCC is partially evaluated into fun20/4
28. SCC is partially evaluated into fun21/2
29. SCC is partially evaluated into fun22/4
30. SCC is partially evaluated into fun23/4
31. SCC is partially evaluated into fun24/3
32. SCC is partially evaluated into fun25/4
33. SCC is partially evaluated into fun26/3
34. SCC is partially evaluated into fun27/4
35. SCC is partially evaluated into fun28/3
36. SCC is partially evaluated into fun29/5
37. SCC is partially evaluated into fun3/3
38. SCC is partially evaluated into fun30/3
39. SCC is partially evaluated into fun31/4
40. SCC is partially evaluated into fun32/2
41. SCC is partially evaluated into fun33/3
42. SCC is partially evaluated into fun34/2
43. SCC is partially evaluated into fun35/4
44. SCC is partially evaluated into fun36/3
45. SCC is partially evaluated into fun37/4
46. SCC is partially evaluated into fun38/3
47. SCC is partially evaluated into fun39/3
48. SCC is partially evaluated into fun4/2
49. SCC is partially evaluated into fun40/4
50. SCC is partially evaluated into fun41/4
51. SCC is partially evaluated into fun42/4
52. SCC is partially evaluated into fun43/2
53. SCC is partially evaluated into fun44/4
54. SCC is partially evaluated into fun45/3
55. SCC is partially evaluated into fun46/3
56. SCC is partially evaluated into fun47/4
57. SCC is partially evaluated into fun48/4
58. SCC is partially evaluated into fun49/3
59. SCC is partially evaluated into fun5/5
60. SCC is partially evaluated into fun50/4
61. SCC is partially evaluated into fun51/2
62. SCC is partially evaluated into fun52/3
63. SCC is partially evaluated into fun53/3
64. SCC is partially evaluated into fun54/3
65. SCC is partially evaluated into fun55/4
66. SCC is partially evaluated into fun56/4
67. SCC is partially evaluated into fun57/3
68. SCC is partially evaluated into fun58/4
69. SCC is partially evaluated into fun59/4
70. SCC is partially evaluated into fun6/4
71. SCC is partially evaluated into fun60/4
72. SCC is partially evaluated into fun61/2
73. SCC is partially evaluated into fun62/5
74. SCC is partially evaluated into fun63/4
75. SCC is partially evaluated into fun64/3
76. SCC is partially evaluated into fun65/3
77. SCC is partially evaluated into fun66/4
78. SCC is partially evaluated into fun67/4
79. SCC is partially evaluated into fun68/4
80. SCC is partially evaluated into fun69/4
81. SCC is partially evaluated into fun7/2
82. SCC is partially evaluated into fun70/2
83. SCC is partially evaluated into fun71/2
84. SCC is partially evaluated into fun72/4
85. SCC is partially evaluated into fun73/2
86. SCC is partially evaluated into fun74/4
87. SCC is partially evaluated into fun75/3
88. SCC is partially evaluated into fun76/3
89. SCC is partially evaluated into fun77/4
90. SCC is partially evaluated into fun78/2
91. SCC is partially evaluated into fun79/3
92. SCC is partially evaluated into fun8/2
93. SCC is partially evaluated into fun80/5
94. SCC is partially evaluated into fun81/4
95. SCC is partially evaluated into fun82/4
96. SCC is partially evaluated into fun83/3
97. SCC is partially evaluated into fun84/4
98. SCC is partially evaluated into fun85/4
99. SCC is partially evaluated into fun86/3
100. SCC is partially evaluated into fun87/4
101. SCC is partially evaluated into fun88/3
102. SCC is partially evaluated into fun89/4
103. SCC is partially evaluated into fun9/3
104. SCC is partially evaluated into fun90/2
105. SCC is partially evaluated into fun91/2
106. SCC is partially evaluated into fun92/2
107. SCC is partially evaluated into fun93/2
108. SCC is partially evaluated into fun94/2
109. SCC is partially evaluated into fun95/5
110. SCC is partially evaluated into fun96/2
111. SCC is partially evaluated into fun97/2
112. SCC is partially evaluated into fun98/3
113. SCC is partially evaluated into fun99/4
114. SCC is partially evaluated into head/2
115. SCC is partially evaluated into isLNat/2
116. SCC is partially evaluated into isLNatKind/2
117. SCC is partially evaluated into isNatural/2
118. SCC is partially evaluated into isNaturalKind/2
119. SCC is partially evaluated into isPLNat/2
120. SCC is partially evaluated into isPLNatKind/2
121. SCC is partially evaluated into natsFrom/2
122. SCC is partially evaluated into pair/3
123. SCC is partially evaluated into proper/2
124. SCC is partially evaluated into s/2
125. SCC is partially evaluated into sel/3
126. SCC is partially evaluated into snd/2
127. SCC is partially evaluated into splitAt/3
128. SCC is partially evaluated into tail/2
129. SCC is partially evaluated into take/3
130. SCC is partially evaluated into top/2
131. SCC is partially evaluated into start/4

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations afterNth/3 
* CE 419 is refined into CE [496] 
* CE 418 is refined into CE [497] 
* CE 416 is refined into CE [498] 
* CE 417 is refined into CE [499] 


#### Refined cost equations afterNth/3 
* CE 496: afterNth(V1,V,Out) = 0
     [V>=0,V1>=0,Out=0] 
* CE 497: afterNth(V1,V,Out) = 1+ afterNth(V1,W1,X1)
     [W1>=0,V1>=0,X1+1=Out,W1+1=V] 
* CE 498: afterNth(V1,V,Out) = 1+ afterNth(W1,V,X1)
     [W1>=0,V>=0,X1+1=Out,W1+1=V1] 
* CE 499: afterNth(V1,V,Out) = 1+ afterNth(W1,X1,Y1)
     [X1>=0,W1>=0,Y1+1=Out,X1+1=V,W1+1=V1] 

### Cost equations --> "Loop" of afterNth/3 
* CEs [497] --> Loop 364 
* CEs [498] --> Loop 365 
* CEs [499] --> Loop 366 
* CEs [496] --> Loop 367 

#### Loops of afterNth/3 
* Loop 364: afterNth(V1,V,Out)->  afterNth(V1,V',Out')
                  [V>=1,V1>=0,Out=Out'+1,V=V'+1] 
* Loop 365: afterNth(V1,V,Out)->  afterNth(V1',V,Out')
                  [V>=0,V1>=1,Out=Out'+1,V1=V1'+1] 
* Loop 366: afterNth(V1,V,Out)->  afterNth(V1',V',Out')
                  [V>=1,V1>=1,Out=Out'+1,V=V'+1,V1=V1'+1] 
* Loop 367: afterNth(V1,V,Out) [V>=0,V1>=0,Out=0] 

### Ranking functions of CR afterNth(V1,V,Out) 
* RF of phase [364,365,366]: [V1+V]

#### Partial ranking functions of CR afterNth(V1,V,Out) 
* Partial RF of phase [364,365,366]:
  - RF of loop [364:1,366:1]:
    V
  - RF of loop [365:1,366:1]:
    V1


### Resulting Chains:afterNth(V1,V,Out) 
* [[364,365,366],367]
* [367]


### Merging Chains  afterNth/3 into  External patterns of execution 
* [[367]] --> 1 
* [[367,[364,365,366]]] --> 2 


### Specialization of cost equations cons/3 
* CE 307 is refined into CE [500] 
* CE 305 is refined into CE [501] 
* CE 306 is refined into CE [502] 


#### Refined cost equations cons/3 
* CE 500: cons(V1,V,Out) = 0
     [V>=0,V1>=0,Out=0] 
* CE 501: cons(V1,V,Out) = 1+ cons(W1,V,X1)
     [W1>=0,V>=0,X1+1=Out,W1+1=V1] 
* CE 502: cons(V1,V,Out) = 1+ cons(W1,X1,Y1)
     [X1>=0,W1>=0,Y1+1=Out,X1+1=V,W1+1=V1] 

### Cost equations --> "Loop" of cons/3 
* CEs [501] --> Loop 368 
* CEs [502] --> Loop 369 
* CEs [500] --> Loop 370 

#### Loops of cons/3 
* Loop 368: cons(V1,V,Out)->  cons(V1',V,Out')
                  [V>=0,V1>=1,Out=Out'+1,V1=V1'+1] 
* Loop 369: cons(V1,V,Out)->  cons(V1',V',Out')
                  [V>=1,V1>=1,Out=Out'+1,V=V'+1,V1=V1'+1] 
* Loop 370: cons(V1,V,Out) [V>=0,V1>=0,Out=0] 

### Ranking functions of CR cons(V1,V,Out) 
* RF of phase [368,369]: [V1]

#### Partial ranking functions of CR cons(V1,V,Out) 
* Partial RF of phase [368,369]:
  - RF of loop [368:1,369:1]:
    V1
  - RF of loop [369:1]:
    V


### Resulting Chains:cons(V1,V,Out) 
* [[368,369],370]
* [370]


### Merging Chains  cons/3 into  External patterns of execution 
* [[370]] --> 1 
* [[370,[368,369]]] --> 2 


### Specialization of cost equations fst/2 
* CE 442 is refined into CE [503] 
* CE 441 is refined into CE [504] 


#### Refined cost equations fst/2 
* CE 503: fst(V1,Out) = 0
     [V1>=0,Out=0] 
* CE 504: fst(V1,Out) = 1+ fst(W1,X1)
     [W1>=0,X1+1=Out,W1+1=V1] 

### Cost equations --> "Loop" of fst/2 
* CEs [504] --> Loop 371 
* CEs [503] --> Loop 372 

#### Loops of fst/2 
* Loop 371: fst(V1,Out)->  fst(V1',Out')
                  [V1'>=0,Out=Out'+1,V1'+1=V1] 
* Loop 372: fst(V1,Out) [V1>=0,Out=0] 

### Ranking functions of CR fst(V1,Out) 
* RF of phase [371]: [V1]

#### Partial ranking functions of CR fst(V1,Out) 
* Partial RF of phase [371]:
  - RF of loop [371:1]:
    V1


### Resulting Chains:fst(V1,Out) 
* [[371],372]
* [372]


### Merging Chains  fst/2 into  External patterns of execution 
* [[372]] --> 1 
* [[372,[371]]] --> 2 


### Specialization of cost equations fun/4 
* CE 135 is refined into CE [505] 
* CE 134 is refined into CE [506] 
* CE 133 is refined into CE [507] 


#### Refined cost equations fun/4 
* CE 505: fun(V1,V,V2,Out) = 0
     [V2>=0,V>=0,V1>=0,Out=0] 
* CE 506: fun(V1,V,V2,Out) = 1+ fun(W2,V,V2,X2)
     [W2>=0,V2>=0,V>=0,X2+1=Out,W2+1=V1] 
* CE 507: fun(V1,V,V2,Out) = 1+ fun(W2,X2,Y2,Z2)
     [Y2>=0,X2>=0,W2>=0,Z2+1=Out,Y2+1=V2,X2+1=V,W2+1=V1] 

### Cost equations --> "Loop" of fun/4 
* CEs [506] --> Loop 373 
* CEs [507] --> Loop 374 
* CEs [505] --> Loop 375 

#### Loops of fun/4 
* Loop 373: fun(V1,V,V2,Out)->  fun(V1',V,V2,Out')
                  [V2>=0,V>=0,V1>=1,Out=Out'+1,V1=V1'+1] 
* Loop 374: fun(V1,V,V2,Out)->  fun(V1',V',V2',Out')
                  [V2>=1,V>=1,V1>=1,Out=Out'+1,V2=V2'+1,V=V'+1,V1=V1'+1] 
* Loop 375: fun(V1,V,V2,Out) [V2>=0,V>=0,V1>=0,Out=0] 

### Ranking functions of CR fun(V1,V,V2,Out) 
* RF of phase [373,374]: [V1]

#### Partial ranking functions of CR fun(V1,V,V2,Out) 
* Partial RF of phase [373,374]:
  - RF of loop [373:1,374:1]:
    V1
  - RF of loop [374:1]:
    V
    V2


### Resulting Chains:fun(V1,V,V2,Out) 
* [[373,374],375]
* [375]


### Merging Chains  fun/4 into  External patterns of execution 
* [[375]] --> 1 
* [[375,[373,374]]] --> 2 


### Specialization of cost equations fun1/3 
* CE 138 is refined into CE [508] 
* CE 136 is refined into CE [509] 
* CE 137 is refined into CE [510] 


#### Refined cost equations fun1/3 
* CE 508: fun1(V1,V,Out) = 0
     [V>=0,V1>=0,Out=0] 
* CE 509: fun1(V1,V,Out) = 1+ fun1(W1,V,X1)
     [W1>=0,V>=0,X1+1=Out,W1+1=V1] 
* CE 510: fun1(V1,V,Out) = 1+ fun1(W1,X1,Y1)
     [X1>=0,W1>=0,Y1+1=Out,X1+1=V,W1+1=V1] 

### Cost equations --> "Loop" of fun1/3 
* CEs [509] --> Loop 376 
* CEs [510] --> Loop 377 
* CEs [508] --> Loop 378 

#### Loops of fun1/3 
* Loop 376: fun1(V1,V,Out)->  fun1(V1',V,Out')
                  [V>=0,V1>=1,Out=Out'+1,V1=V1'+1] 
* Loop 377: fun1(V1,V,Out)->  fun1(V1',V',Out')
                  [V>=1,V1>=1,Out=Out'+1,V=V'+1,V1=V1'+1] 
* Loop 378: fun1(V1,V,Out) [V>=0,V1>=0,Out=0] 

### Ranking functions of CR fun1(V1,V,Out) 
* RF of phase [376,377]: [V1]

#### Partial ranking functions of CR fun1(V1,V,Out) 
* Partial RF of phase [376,377]:
  - RF of loop [376:1,377:1]:
    V1
  - RF of loop [377:1]:
    V


### Resulting Chains:fun1(V1,V,Out) 
* [[376,377],378]
* [378]


### Merging Chains  fun1/3 into  External patterns of execution 
* [[378]] --> 1 
* [[378,[376,377]]] --> 2 


### Specialization of cost equations fun10/4 
* CE 165 is refined into CE [511] 
* CE 164 is refined into CE [512] 
* CE 163 is refined into CE [513] 


#### Refined cost equations fun10/4 
* CE 511: fun10(V1,V,V2,Out) = 0
     [V2>=0,V>=0,V1>=0,Out=0] 
* CE 512: fun10(V1,V,V2,Out) = 1+ fun10(W2,V,V2,X2)
     [W2>=0,V2>=0,V>=0,X2+1=Out,W2+1=V1] 
* CE 513: fun10(V1,V,V2,Out) = 1+ fun10(W2,X2,Y2,Z2)
     [Y2>=0,X2>=0,W2>=0,Z2+1=Out,Y2+1=V2,X2+1=V,W2+1=V1] 

### Cost equations --> "Loop" of fun10/4 
* CEs [512] --> Loop 379 
* CEs [513] --> Loop 380 
* CEs [511] --> Loop 381 

#### Loops of fun10/4 
* Loop 379: fun10(V1,V,V2,Out)->  fun10(V1',V,V2,Out')
                  [V2>=0,V>=0,V1>=1,Out=Out'+1,V1=V1'+1] 
* Loop 380: fun10(V1,V,V2,Out)->  fun10(V1',V',V2',Out')
                  [V2>=1,V>=1,V1>=1,Out=Out'+1,V2=V2'+1,V=V'+1,V1=V1'+1] 
* Loop 381: fun10(V1,V,V2,Out) [V2>=0,V>=0,V1>=0,Out=0] 

### Ranking functions of CR fun10(V1,V,V2,Out) 
* RF of phase [379,380]: [V1]

#### Partial ranking functions of CR fun10(V1,V,V2,Out) 
* Partial RF of phase [379,380]:
  - RF of loop [379:1,380:1]:
    V1
  - RF of loop [380:1]:
    V
    V2


### Resulting Chains:fun10(V1,V,V2,Out) 
* [[379,380],381]
* [381]


### Merging Chains  fun10/4 into  External patterns of execution 
* [[381]] --> 1 
* [[381,[379,380]]] --> 2 


### Specialization of cost equations fun100/3 
* CE 464 is refined into CE [514] 
* CE 463 is refined into CE [515] 
* CE 462 is refined into CE [516] 


#### Refined cost equations fun100/3 
* CE 514: fun100(V1,V,Out) = 0
     [V>=0,V1>=0,Out=0] 
* CE 515: fun100(V1,V,Out) = 1+ fun100(W1,V,X1)
     [W1>=0,V>=0,X1+1=Out,W1+1=V1] 
* CE 516: fun100(V1,V,Out) = 1+ fun100(W1,X1,Y1)
     [X1>=0,W1>=0,Y1+1=Out,X1+1=V,W1+1=V1] 

### Cost equations --> "Loop" of fun100/3 
* CEs [515] --> Loop 382 
* CEs [516] --> Loop 383 
* CEs [514] --> Loop 384 

#### Loops of fun100/3 
* Loop 382: fun100(V1,V,Out)->  fun100(V1',V,Out')
                  [V>=0,V1>=1,Out=Out'+1,V1=V1'+1] 
* Loop 383: fun100(V1,V,Out)->  fun100(V1',V',Out')
                  [V>=1,V1>=1,Out=Out'+1,V=V'+1,V1=V1'+1] 
* Loop 384: fun100(V1,V,Out) [V>=0,V1>=0,Out=0] 

### Ranking functions of CR fun100(V1,V,Out) 
* RF of phase [382,383]: [V1]

#### Partial ranking functions of CR fun100(V1,V,Out) 
* Partial RF of phase [382,383]:
  - RF of loop [382:1,383:1]:
    V1
  - RF of loop [383:1]:
    V


### Resulting Chains:fun100(V1,V,Out) 
* [[382,383],384]
* [384]


### Merging Chains  fun100/3 into  External patterns of execution 
* [[384]] --> 1 
* [[384,[382,383]]] --> 2 


### Specialization of cost equations fun101/3 
* CE 467 is refined into CE [517] 
* CE 466 is refined into CE [518] 
* CE 465 is refined into CE [519] 


#### Refined cost equations fun101/3 
* CE 517: fun101(V1,V,Out) = 0
     [V>=0,V1>=0,Out=0] 
* CE 518: fun101(V1,V,Out) = 1+ fun101(W1,V,X1)
     [W1>=0,V>=0,X1+1=Out,W1+1=V1] 
* CE 519: fun101(V1,V,Out) = 1+ fun101(W1,X1,Y1)
     [X1>=0,W1>=0,Y1+1=Out,X1+1=V,W1+1=V1] 

### Cost equations --> "Loop" of fun101/3 
* CEs [518] --> Loop 385 
* CEs [519] --> Loop 386 
* CEs [517] --> Loop 387 

#### Loops of fun101/3 
* Loop 385: fun101(V1,V,Out)->  fun101(V1',V,Out')
                  [V>=0,V1>=1,Out=Out'+1,V1=V1'+1] 
* Loop 386: fun101(V1,V,Out)->  fun101(V1',V',Out')
                  [V>=1,V1>=1,Out=Out'+1,V=V'+1,V1=V1'+1] 
* Loop 387: fun101(V1,V,Out) [V>=0,V1>=0,Out=0] 

### Ranking functions of CR fun101(V1,V,Out) 
* RF of phase [385,386]: [V1]

#### Partial ranking functions of CR fun101(V1,V,Out) 
* Partial RF of phase [385,386]:
  - RF of loop [385:1,386:1]:
    V1
  - RF of loop [386:1]:
    V


### Resulting Chains:fun101(V1,V,Out) 
* [[385,386],387]
* [387]


### Merging Chains  fun101/3 into  External patterns of execution 
* [[387]] --> 1 
* [[387,[385,386]]] --> 2 


### Specialization of cost equations fun102/2 
* CE 471 is refined into CE [520] 
* CE 470 is refined into CE [521] 


#### Refined cost equations fun102/2 
* CE 520: fun102(V1,Out) = 0
     [V1>=0,Out=0] 
* CE 521: fun102(V1,Out) = 1+ fun102(W1,X1)
     [W1>=0,X1+1=Out,W1+1=V1] 

### Cost equations --> "Loop" of fun102/2 
* CEs [521] --> Loop 388 
* CEs [520] --> Loop 389 

#### Loops of fun102/2 
* Loop 388: fun102(V1,Out)->  fun102(V1',Out')
                  [V1'>=0,Out=Out'+1,V1'+1=V1] 
* Loop 389: fun102(V1,Out) [V1>=0,Out=0] 

### Ranking functions of CR fun102(V1,Out) 
* RF of phase [388]: [V1]

#### Partial ranking functions of CR fun102(V1,Out) 
* Partial RF of phase [388]:
  - RF of loop [388:1]:
    V1


### Resulting Chains:fun102(V1,Out) 
* [[388],389]
* [389]


### Merging Chains  fun102/2 into  External patterns of execution 
* [[389]] --> 1 
* [[389,[388]]] --> 2 


### Specialization of cost equations fun103/3 
* CE 474 is refined into CE [522] 
* CE 473 is refined into CE [523] 
* CE 472 is refined into CE [524] 


#### Refined cost equations fun103/3 
* CE 522: fun103(V1,V,Out) = 0
     [V>=0,V1>=0,Out=0] 
* CE 523: fun103(V1,V,Out) = 1+ fun103(W1,V,X1)
     [W1>=0,V>=0,X1+1=Out,W1+1=V1] 
* CE 524: fun103(V1,V,Out) = 1+ fun103(W1,X1,Y1)
     [X1>=0,W1>=0,Y1+1=Out,X1+1=V,W1+1=V1] 

### Cost equations --> "Loop" of fun103/3 
* CEs [523] --> Loop 390 
* CEs [524] --> Loop 391 
* CEs [522] --> Loop 392 

#### Loops of fun103/3 
* Loop 390: fun103(V1,V,Out)->  fun103(V1',V,Out')
                  [V>=0,V1>=1,Out=Out'+1,V1=V1'+1] 
* Loop 391: fun103(V1,V,Out)->  fun103(V1',V',Out')
                  [V>=1,V1>=1,Out=Out'+1,V=V'+1,V1=V1'+1] 
* Loop 392: fun103(V1,V,Out) [V>=0,V1>=0,Out=0] 

### Ranking functions of CR fun103(V1,V,Out) 
* RF of phase [390,391]: [V1]

#### Partial ranking functions of CR fun103(V1,V,Out) 
* Partial RF of phase [390,391]:
  - RF of loop [390:1,391:1]:
    V1
  - RF of loop [391:1]:
    V


### Resulting Chains:fun103(V1,V,Out) 
* [[390,391],392]
* [392]


### Merging Chains  fun103/3 into  External patterns of execution 
* [[392]] --> 1 
* [[392,[390,391]]] --> 2 


### Specialization of cost equations fun104/3 
* CE 477 is refined into CE [525] 
* CE 476 is refined into CE [526] 
* CE 475 is refined into CE [527] 


#### Refined cost equations fun104/3 
* CE 525: fun104(V1,V,Out) = 0
     [V>=0,V1>=0,Out=0] 
* CE 526: fun104(V1,V,Out) = 1+ fun104(W1,V,X1)
     [W1>=0,V>=0,X1+1=Out,W1+1=V1] 
* CE 527: fun104(V1,V,Out) = 1+ fun104(W1,X1,Y1)
     [X1>=0,W1>=0,Y1+1=Out,X1+1=V,W1+1=V1] 

### Cost equations --> "Loop" of fun104/3 
* CEs [526] --> Loop 393 
* CEs [527] --> Loop 394 
* CEs [525] --> Loop 395 

#### Loops of fun104/3 
* Loop 393: fun104(V1,V,Out)->  fun104(V1',V,Out')
                  [V>=0,V1>=1,Out=Out'+1,V1=V1'+1] 
* Loop 394: fun104(V1,V,Out)->  fun104(V1',V',Out')
                  [V>=1,V1>=1,Out=Out'+1,V=V'+1,V1=V1'+1] 
* Loop 395: fun104(V1,V,Out) [V>=0,V1>=0,Out=0] 

### Ranking functions of CR fun104(V1,V,Out) 
* RF of phase [393,394]: [V1]

#### Partial ranking functions of CR fun104(V1,V,Out) 
* Partial RF of phase [393,394]:
  - RF of loop [393:1,394:1]:
    V1
  - RF of loop [394:1]:
    V


### Resulting Chains:fun104(V1,V,Out) 
* [[393,394],395]
* [395]


### Merging Chains  fun104/3 into  External patterns of execution 
* [[395]] --> 1 
* [[395,[393,394]]] --> 2 


### Specialization of cost equations fun105/2 
* CE 481 is refined into CE [528] 
* CE 480 is refined into CE [529] 


#### Refined cost equations fun105/2 
* CE 528: fun105(V1,Out) = 0
     [V1>=0,Out=0] 
* CE 529: fun105(V1,Out) = 1+ fun105(W1,X1)
     [W1>=0,X1+1=Out,W1+1=V1] 

### Cost equations --> "Loop" of fun105/2 
* CEs [529] --> Loop 396 
* CEs [528] --> Loop 397 

#### Loops of fun105/2 
* Loop 396: fun105(V1,Out)->  fun105(V1',Out')
                  [V1'>=0,Out=Out'+1,V1'+1=V1] 
* Loop 397: fun105(V1,Out) [V1>=0,Out=0] 

### Ranking functions of CR fun105(V1,Out) 
* RF of phase [396]: [V1]

#### Partial ranking functions of CR fun105(V1,Out) 
* Partial RF of phase [396]:
  - RF of loop [396:1]:
    V1


### Resulting Chains:fun105(V1,Out) 
* [[396],397]
* [397]


### Merging Chains  fun105/2 into  External patterns of execution 
* [[397]] --> 1 
* [[397,[396]]] --> 2 


### Specialization of cost equations fun106/2 
* CE 483 is refined into CE [530] 
* CE 482 is refined into CE [531] 


#### Refined cost equations fun106/2 
* CE 530: fun106(V1,Out) = 0
     [V1>=0,Out=0] 
* CE 531: fun106(V1,Out) = 1+ fun106(W1,X1)
     [W1>=0,X1+1=Out,W1+1=V1] 

### Cost equations --> "Loop" of fun106/2 
* CEs [531] --> Loop 398 
* CEs [530] --> Loop 399 

#### Loops of fun106/2 
* Loop 398: fun106(V1,Out)->  fun106(V1',Out')
                  [V1'>=0,Out=Out'+1,V1'+1=V1] 
* Loop 399: fun106(V1,Out) [V1>=0,Out=0] 

### Ranking functions of CR fun106(V1,Out) 
* RF of phase [398]: [V1]

#### Partial ranking functions of CR fun106(V1,Out) 
* Partial RF of phase [398]:
  - RF of loop [398:1]:
    V1


### Resulting Chains:fun106(V1,Out) 
* [[398],399]
* [399]


### Merging Chains  fun106/2 into  External patterns of execution 
* [[399]] --> 1 
* [[399,[398]]] --> 2 


### Specialization of cost equations fun107/4 
* CE 486 is refined into CE [532] 
* CE 484 is refined into CE [533] 
* CE 485 is refined into CE [534] 


#### Refined cost equations fun107/4 
* CE 532: fun107(V1,V,V2,Out) = 0
     [V2>=0,V>=0,V1>=0,Out=0] 
* CE 533: fun107(V1,V,V2,Out) = 1+ fun107(W2,V,V2,X2)
     [W2>=0,V2>=0,V>=0,X2+1=Out,W2+1=V1] 
* CE 534: fun107(V1,V,V2,Out) = 1+ fun107(W2,X2,Y2,Z2)
     [Y2>=0,X2>=0,W2>=0,Z2+1=Out,Y2+1=V2,X2+1=V,W2+1=V1] 

### Cost equations --> "Loop" of fun107/4 
* CEs [533] --> Loop 400 
* CEs [534] --> Loop 401 
* CEs [532] --> Loop 402 

#### Loops of fun107/4 
* Loop 400: fun107(V1,V,V2,Out)->  fun107(V1',V,V2,Out')
                  [V2>=0,V>=0,V1>=1,Out=Out'+1,V1=V1'+1] 
* Loop 401: fun107(V1,V,V2,Out)->  fun107(V1',V',V2',Out')
                  [V2>=1,V>=1,V1>=1,Out=Out'+1,V2=V2'+1,V=V'+1,V1=V1'+1] 
* Loop 402: fun107(V1,V,V2,Out) [V2>=0,V>=0,V1>=0,Out=0] 

### Ranking functions of CR fun107(V1,V,V2,Out) 
* RF of phase [400,401]: [V1]

#### Partial ranking functions of CR fun107(V1,V,V2,Out) 
* Partial RF of phase [400,401]:
  - RF of loop [400:1,401:1]:
    V1
  - RF of loop [401:1]:
    V
    V2


### Resulting Chains:fun107(V1,V,V2,Out) 
* [[400,401],402]
* [402]


### Merging Chains  fun107/4 into  External patterns of execution 
* [[402]] --> 1 
* [[402,[400,401]]] --> 2 


### Specialization of cost equations fun108/3 
* CE 489 is refined into CE [535] 
* CE 488 is refined into CE [536] 
* CE 487 is refined into CE [537] 


#### Refined cost equations fun108/3 
* CE 535: fun108(V1,V,Out) = 0
     [V>=0,V1>=0,Out=0] 
* CE 536: fun108(V1,V,Out) = 1+ fun108(W1,V,X1)
     [W1>=0,V>=0,X1+1=Out,W1+1=V1] 
* CE 537: fun108(V1,V,Out) = 1+ fun108(W1,X1,Y1)
     [X1>=0,W1>=0,Y1+1=Out,X1+1=V,W1+1=V1] 

### Cost equations --> "Loop" of fun108/3 
* CEs [536] --> Loop 403 
* CEs [537] --> Loop 404 
* CEs [535] --> Loop 405 

#### Loops of fun108/3 
* Loop 403: fun108(V1,V,Out)->  fun108(V1',V,Out')
                  [V>=0,V1>=1,Out=Out'+1,V1=V1'+1] 
* Loop 404: fun108(V1,V,Out)->  fun108(V1',V',Out')
                  [V>=1,V1>=1,Out=Out'+1,V=V'+1,V1=V1'+1] 
* Loop 405: fun108(V1,V,Out) [V>=0,V1>=0,Out=0] 

### Ranking functions of CR fun108(V1,V,Out) 
* RF of phase [403,404]: [V1]

#### Partial ranking functions of CR fun108(V1,V,Out) 
* Partial RF of phase [403,404]:
  - RF of loop [403:1,404:1]:
    V1
  - RF of loop [404:1]:
    V


### Resulting Chains:fun108(V1,V,Out) 
* [[403,404],405]
* [405]


### Merging Chains  fun108/3 into  External patterns of execution 
* [[405]] --> 1 
* [[405,[403,404]]] --> 2 


### Specialization of cost equations fun109/3 
* CE 492 is refined into CE [538] 
* CE 491 is refined into CE [539] 
* CE 490 is refined into CE [540] 


#### Refined cost equations fun109/3 
* CE 538: fun109(V1,V,Out) = 0
     [V>=0,V1>=0,Out=0] 
* CE 539: fun109(V1,V,Out) = 1+ fun109(W1,V,X1)
     [W1>=0,V>=0,X1+1=Out,W1+1=V1] 
* CE 540: fun109(V1,V,Out) = 1+ fun109(W1,X1,Y1)
     [X1>=0,W1>=0,Y1+1=Out,X1+1=V,W1+1=V1] 

### Cost equations --> "Loop" of fun109/3 
* CEs [539] --> Loop 406 
* CEs [540] --> Loop 407 
* CEs [538] --> Loop 408 

#### Loops of fun109/3 
* Loop 406: fun109(V1,V,Out)->  fun109(V1',V,Out')
                  [V>=0,V1>=1,Out=Out'+1,V1=V1'+1] 
* Loop 407: fun109(V1,V,Out)->  fun109(V1',V',Out')
                  [V>=1,V1>=1,Out=Out'+1,V=V'+1,V1=V1'+1] 
* Loop 408: fun109(V1,V,Out) [V>=0,V1>=0,Out=0] 

### Ranking functions of CR fun109(V1,V,Out) 
* RF of phase [406,407]: [V1]

#### Partial ranking functions of CR fun109(V1,V,Out) 
* Partial RF of phase [406,407]:
  - RF of loop [406:1,407:1]:
    V1
  - RF of loop [407:1]:
    V


### Resulting Chains:fun109(V1,V,Out) 
* [[406,407],408]
* [408]


### Merging Chains  fun109/3 into  External patterns of execution 
* [[408]] --> 1 
* [[408,[406,407]]] --> 2 


### Specialization of cost equations fun11/2 
* CE 167 is refined into CE [541] 
* CE 166 is refined into CE [542] 


#### Refined cost equations fun11/2 
* CE 541: fun11(V1,Out) = 0
     [V1>=0,Out=0] 
* CE 542: fun11(V1,Out) = 1+ fun11(W1,X1)
     [W1>=0,X1+1=Out,W1+1=V1] 

### Cost equations --> "Loop" of fun11/2 
* CEs [542] --> Loop 409 
* CEs [541] --> Loop 410 

#### Loops of fun11/2 
* Loop 409: fun11(V1,Out)->  fun11(V1',Out')
                  [V1'>=0,Out=Out'+1,V1'+1=V1] 
* Loop 410: fun11(V1,Out) [V1>=0,Out=0] 

### Ranking functions of CR fun11(V1,Out) 
* RF of phase [409]: [V1]

#### Partial ranking functions of CR fun11(V1,Out) 
* Partial RF of phase [409]:
  - RF of loop [409:1]:
    V1


### Resulting Chains:fun11(V1,Out) 
* [[409],410]
* [410]


### Merging Chains  fun11/2 into  External patterns of execution 
* [[410]] --> 1 
* [[410,[409]]] --> 2 


### Specialization of cost equations fun110/3 
* CE 495 is refined into CE [543] 
* CE 493 is refined into CE [544] 
* CE 494 is refined into CE [545] 


#### Refined cost equations fun110/3 
* CE 543: fun110(V1,V,Out) = 0
     [V>=0,V1>=0,Out=0] 
* CE 544: fun110(V1,V,Out) = 1+ fun110(W1,V,X1)
     [W1>=0,V>=0,X1+1=Out,W1+1=V1] 
* CE 545: fun110(V1,V,Out) = 1+ fun110(W1,X1,Y1)
     [X1>=0,W1>=0,Y1+1=Out,X1+1=V,W1+1=V1] 

### Cost equations --> "Loop" of fun110/3 
* CEs [544] --> Loop 411 
* CEs [545] --> Loop 412 
* CEs [543] --> Loop 413 

#### Loops of fun110/3 
* Loop 411: fun110(V1,V,Out)->  fun110(V1',V,Out')
                  [V>=0,V1>=1,Out=Out'+1,V1=V1'+1] 
* Loop 412: fun110(V1,V,Out)->  fun110(V1',V',Out')
                  [V>=1,V1>=1,Out=Out'+1,V=V'+1,V1=V1'+1] 
* Loop 413: fun110(V1,V,Out) [V>=0,V1>=0,Out=0] 

### Ranking functions of CR fun110(V1,V,Out) 
* RF of phase [411,412]: [V1]

#### Partial ranking functions of CR fun110(V1,V,Out) 
* Partial RF of phase [411,412]:
  - RF of loop [411:1,412:1]:
    V1
  - RF of loop [412:1]:
    V


### Resulting Chains:fun110(V1,V,Out) 
* [[411,412],413]
* [413]


### Merging Chains  fun110/3 into  External patterns of execution 
* [[413]] --> 1 
* [[413,[411,412]]] --> 2 


### Specialization of cost equations fun12/3 
* CE 170 is refined into CE [546] 
* CE 168 is refined into CE [547] 
* CE 169 is refined into CE [548] 


#### Refined cost equations fun12/3 
* CE 546: fun12(V1,V,Out) = 0
     [V>=0,V1>=0,Out=0] 
* CE 547: fun12(V1,V,Out) = 1+ fun12(W1,V,X1)
     [W1>=0,V>=0,X1+1=Out,W1+1=V1] 
* CE 548: fun12(V1,V,Out) = 1+ fun12(W1,X1,Y1)
     [X1>=0,W1>=0,Y1+1=Out,X1+1=V,W1+1=V1] 

### Cost equations --> "Loop" of fun12/3 
* CEs [547] --> Loop 414 
* CEs [548] --> Loop 415 
* CEs [546] --> Loop 416 

#### Loops of fun12/3 
* Loop 414: fun12(V1,V,Out)->  fun12(V1',V,Out')
                  [V>=0,V1>=1,Out=Out'+1,V1=V1'+1] 
* Loop 415: fun12(V1,V,Out)->  fun12(V1',V',Out')
                  [V>=1,V1>=1,Out=Out'+1,V=V'+1,V1=V1'+1] 
* Loop 416: fun12(V1,V,Out) [V>=0,V1>=0,Out=0] 

### Ranking functions of CR fun12(V1,V,Out) 
* RF of phase [414,415]: [V1]

#### Partial ranking functions of CR fun12(V1,V,Out) 
* Partial RF of phase [414,415]:
  - RF of loop [414:1,415:1]:
    V1
  - RF of loop [415:1]:
    V


### Resulting Chains:fun12(V1,V,Out) 
* [[414,415],416]
* [416]


### Merging Chains  fun12/3 into  External patterns of execution 
* [[416]] --> 1 
* [[416,[414,415]]] --> 2 


### Specialization of cost equations fun13/3 
* CE 173 is refined into CE [549] 
* CE 172 is refined into CE [550] 
* CE 171 is refined into CE [551] 


#### Refined cost equations fun13/3 
* CE 549: fun13(V1,V,Out) = 0
     [V>=0,V1>=0,Out=0] 
* CE 550: fun13(V1,V,Out) = 1+ fun13(W1,V,X1)
     [W1>=0,V>=0,X1+1=Out,W1+1=V1] 
* CE 551: fun13(V1,V,Out) = 1+ fun13(W1,X1,Y1)
     [X1>=0,W1>=0,Y1+1=Out,X1+1=V,W1+1=V1] 

### Cost equations --> "Loop" of fun13/3 
* CEs [550] --> Loop 417 
* CEs [551] --> Loop 418 
* CEs [549] --> Loop 419 

#### Loops of fun13/3 
* Loop 417: fun13(V1,V,Out)->  fun13(V1',V,Out')
                  [V>=0,V1>=1,Out=Out'+1,V1=V1'+1] 
* Loop 418: fun13(V1,V,Out)->  fun13(V1',V',Out')
                  [V>=1,V1>=1,Out=Out'+1,V=V'+1,V1=V1'+1] 
* Loop 419: fun13(V1,V,Out) [V>=0,V1>=0,Out=0] 

### Ranking functions of CR fun13(V1,V,Out) 
* RF of phase [417,418]: [V1]

#### Partial ranking functions of CR fun13(V1,V,Out) 
* Partial RF of phase [417,418]:
  - RF of loop [417:1,418:1]:
    V1
  - RF of loop [418:1]:
    V


### Resulting Chains:fun13(V1,V,Out) 
* [[417,418],419]
* [419]


### Merging Chains  fun13/3 into  External patterns of execution 
* [[419]] --> 1 
* [[419,[417,418]]] --> 2 


### Specialization of cost equations fun14/4 
* CE 176 is refined into CE [552] 
* CE 174 is refined into CE [553] 
* CE 175 is refined into CE [554] 


#### Refined cost equations fun14/4 
* CE 552: fun14(V1,V,V2,Out) = 0
     [V2>=0,V>=0,V1>=0,Out=0] 
* CE 553: fun14(V1,V,V2,Out) = 1+ fun14(W2,V,V2,X2)
     [W2>=0,V2>=0,V>=0,X2+1=Out,W2+1=V1] 
* CE 554: fun14(V1,V,V2,Out) = 1+ fun14(W2,X2,Y2,Z2)
     [Y2>=0,X2>=0,W2>=0,Z2+1=Out,Y2+1=V2,X2+1=V,W2+1=V1] 

### Cost equations --> "Loop" of fun14/4 
* CEs [553] --> Loop 420 
* CEs [554] --> Loop 421 
* CEs [552] --> Loop 422 

#### Loops of fun14/4 
* Loop 420: fun14(V1,V,V2,Out)->  fun14(V1',V,V2,Out')
                  [V2>=0,V>=0,V1>=1,Out=Out'+1,V1=V1'+1] 
* Loop 421: fun14(V1,V,V2,Out)->  fun14(V1',V',V2',Out')
                  [V2>=1,V>=1,V1>=1,Out=Out'+1,V2=V2'+1,V=V'+1,V1=V1'+1] 
* Loop 422: fun14(V1,V,V2,Out) [V2>=0,V>=0,V1>=0,Out=0] 

### Ranking functions of CR fun14(V1,V,V2,Out) 
* RF of phase [420,421]: [V1]

#### Partial ranking functions of CR fun14(V1,V,V2,Out) 
* Partial RF of phase [420,421]:
  - RF of loop [420:1,421:1]:
    V1
  - RF of loop [421:1]:
    V
    V2


### Resulting Chains:fun14(V1,V,V2,Out) 
* [[420,421],422]
* [422]


### Merging Chains  fun14/4 into  External patterns of execution 
* [[422]] --> 1 
* [[422,[420,421]]] --> 2 


### Specialization of cost equations fun15/5 
* CE 179 is refined into CE [555] 
* CE 178 is refined into CE [556] 
* CE 177 is refined into CE [557] 


#### Refined cost equations fun15/5 
* CE 555: fun15(V1,V,V2,V3,Out) = 0
     [V3>=0,V2>=0,V>=0,V1>=0,Out=0] 
* CE 556: fun15(V1,V,V2,V3,Out) = 1+ fun15(W3,V,V2,V3,X3)
     [W3>=0,V3>=0,V2>=0,V>=0,X3+1=Out,W3+1=V1] 
* CE 557: fun15(V1,V,V2,V3,Out) = 1+ fun15(W3,X3,Y3,Z3,A4)
     [Z3>=0,Y3>=0,X3>=0,W3>=0,A4+1=Out,Z3+1=V3,Y3+1=V2,X3+1=V,W3+1=V1] 

### Cost equations --> "Loop" of fun15/5 
* CEs [556] --> Loop 423 
* CEs [557] --> Loop 424 
* CEs [555] --> Loop 425 

#### Loops of fun15/5 
* Loop 423: fun15(V1,V,V2,V3,Out)->  fun15(V1',V,V2,V3,Out')
                  [V3>=0,V2>=0,V>=0,V1>=1,Out=Out'+1,V1=V1'+1] 
* Loop 424: fun15(V1,V,V2,V3,Out)->  fun15(V1',V',V2',V3',Out')
                  [V3>=1,V2>=1,V>=1,V1>=1,Out=Out'+1,V3=V3'+1,V2=V2'+1,V=V'+1,V1=V1'+1] 
* Loop 425: fun15(V1,V,V2,V3,Out) [V3>=0,V2>=0,V>=0,V1>=0,Out=0] 

### Ranking functions of CR fun15(V1,V,V2,V3,Out) 
* RF of phase [423,424]: [V1]

#### Partial ranking functions of CR fun15(V1,V,V2,V3,Out) 
* Partial RF of phase [423,424]:
  - RF of loop [423:1,424:1]:
    V1
  - RF of loop [424:1]:
    V
    V2
    V3


### Resulting Chains:fun15(V1,V,V2,V3,Out) 
* [[423,424],425]
* [425]


### Merging Chains  fun15/5 into  External patterns of execution 
* [[425]] --> 1 
* [[425,[423,424]]] --> 2 


### Specialization of cost equations fun16/4 
* CE 182 is refined into CE [558] 
* CE 180 is refined into CE [559] 
* CE 181 is refined into CE [560] 


#### Refined cost equations fun16/4 
* CE 558: fun16(V1,V,V2,Out) = 0
     [V2>=0,V>=0,V1>=0,Out=0] 
* CE 559: fun16(V1,V,V2,Out) = 1+ fun16(W2,V,V2,X2)
     [W2>=0,V2>=0,V>=0,X2+1=Out,W2+1=V1] 
* CE 560: fun16(V1,V,V2,Out) = 1+ fun16(W2,X2,Y2,Z2)
     [Y2>=0,X2>=0,W2>=0,Z2+1=Out,Y2+1=V2,X2+1=V,W2+1=V1] 

### Cost equations --> "Loop" of fun16/4 
* CEs [559] --> Loop 426 
* CEs [560] --> Loop 427 
* CEs [558] --> Loop 428 

#### Loops of fun16/4 
* Loop 426: fun16(V1,V,V2,Out)->  fun16(V1',V,V2,Out')
                  [V2>=0,V>=0,V1>=1,Out=Out'+1,V1=V1'+1] 
* Loop 427: fun16(V1,V,V2,Out)->  fun16(V1',V',V2',Out')
                  [V2>=1,V>=1,V1>=1,Out=Out'+1,V2=V2'+1,V=V'+1,V1=V1'+1] 
* Loop 428: fun16(V1,V,V2,Out) [V2>=0,V>=0,V1>=0,Out=0] 

### Ranking functions of CR fun16(V1,V,V2,Out) 
* RF of phase [426,427]: [V1]

#### Partial ranking functions of CR fun16(V1,V,V2,Out) 
* Partial RF of phase [426,427]:
  - RF of loop [426:1,427:1]:
    V1
  - RF of loop [427:1]:
    V
    V2


### Resulting Chains:fun16(V1,V,V2,Out) 
* [[426,427],428]
* [428]


### Merging Chains  fun16/4 into  External patterns of execution 
* [[428]] --> 1 
* [[428,[426,427]]] --> 2 


### Specialization of cost equations fun17/3 
* CE 185 is refined into CE [561] 
* CE 184 is refined into CE [562] 
* CE 183 is refined into CE [563] 


#### Refined cost equations fun17/3 
* CE 561: fun17(V1,V,Out) = 0
     [V>=0,V1>=0,Out=0] 
* CE 562: fun17(V1,V,Out) = 1+ fun17(W1,V,X1)
     [W1>=0,V>=0,X1+1=Out,W1+1=V1] 
* CE 563: fun17(V1,V,Out) = 1+ fun17(W1,X1,Y1)
     [X1>=0,W1>=0,Y1+1=Out,X1+1=V,W1+1=V1] 

### Cost equations --> "Loop" of fun17/3 
* CEs [562] --> Loop 429 
* CEs [563] --> Loop 430 
* CEs [561] --> Loop 431 

#### Loops of fun17/3 
* Loop 429: fun17(V1,V,Out)->  fun17(V1',V,Out')
                  [V>=0,V1>=1,Out=Out'+1,V1=V1'+1] 
* Loop 430: fun17(V1,V,Out)->  fun17(V1',V',Out')
                  [V>=1,V1>=1,Out=Out'+1,V=V'+1,V1=V1'+1] 
* Loop 431: fun17(V1,V,Out) [V>=0,V1>=0,Out=0] 

### Ranking functions of CR fun17(V1,V,Out) 
* RF of phase [429,430]: [V1]

#### Partial ranking functions of CR fun17(V1,V,Out) 
* Partial RF of phase [429,430]:
  - RF of loop [429:1,430:1]:
    V1
  - RF of loop [430:1]:
    V


### Resulting Chains:fun17(V1,V,Out) 
* [[429,430],431]
* [431]


### Merging Chains  fun17/3 into  External patterns of execution 
* [[431]] --> 1 
* [[431,[429,430]]] --> 2 


### Specialization of cost equations fun18/4 
* CE 188 is refined into CE [564] 
* CE 186 is refined into CE [565] 
* CE 187 is refined into CE [566] 


#### Refined cost equations fun18/4 
* CE 564: fun18(V1,V,V2,Out) = 0
     [V2>=0,V>=0,V1>=0,Out=0] 
* CE 565: fun18(V1,V,V2,Out) = 1+ fun18(W2,V,V2,X2)
     [W2>=0,V2>=0,V>=0,X2+1=Out,W2+1=V1] 
* CE 566: fun18(V1,V,V2,Out) = 1+ fun18(W2,X2,Y2,Z2)
     [Y2>=0,X2>=0,W2>=0,Z2+1=Out,Y2+1=V2,X2+1=V,W2+1=V1] 

### Cost equations --> "Loop" of fun18/4 
* CEs [565] --> Loop 432 
* CEs [566] --> Loop 433 
* CEs [564] --> Loop 434 

#### Loops of fun18/4 
* Loop 432: fun18(V1,V,V2,Out)->  fun18(V1',V,V2,Out')
                  [V2>=0,V>=0,V1>=1,Out=Out'+1,V1=V1'+1] 
* Loop 433: fun18(V1,V,V2,Out)->  fun18(V1',V',V2',Out')
                  [V2>=1,V>=1,V1>=1,Out=Out'+1,V2=V2'+1,V=V'+1,V1=V1'+1] 
* Loop 434: fun18(V1,V,V2,Out) [V2>=0,V>=0,V1>=0,Out=0] 

### Ranking functions of CR fun18(V1,V,V2,Out) 
* RF of phase [432,433]: [V1]

#### Partial ranking functions of CR fun18(V1,V,V2,Out) 
* Partial RF of phase [432,433]:
  - RF of loop [432:1,433:1]:
    V1
  - RF of loop [433:1]:
    V
    V2


### Resulting Chains:fun18(V1,V,V2,Out) 
* [[432,433],434]
* [434]


### Merging Chains  fun18/4 into  External patterns of execution 
* [[434]] --> 1 
* [[434,[432,433]]] --> 2 


### Specialization of cost equations fun19/4 
* CE 191 is refined into CE [567] 
* CE 189 is refined into CE [568] 
* CE 190 is refined into CE [569] 


#### Refined cost equations fun19/4 
* CE 567: fun19(V1,V,V2,Out) = 0
     [V2>=0,V>=0,V1>=0,Out=0] 
* CE 568: fun19(V1,V,V2,Out) = 1+ fun19(W2,V,V2,X2)
     [W2>=0,V2>=0,V>=0,X2+1=Out,W2+1=V1] 
* CE 569: fun19(V1,V,V2,Out) = 1+ fun19(W2,X2,Y2,Z2)
     [Y2>=0,X2>=0,W2>=0,Z2+1=Out,Y2+1=V2,X2+1=V,W2+1=V1] 

### Cost equations --> "Loop" of fun19/4 
* CEs [568] --> Loop 435 
* CEs [569] --> Loop 436 
* CEs [567] --> Loop 437 

#### Loops of fun19/4 
* Loop 435: fun19(V1,V,V2,Out)->  fun19(V1',V,V2,Out')
                  [V2>=0,V>=0,V1>=1,Out=Out'+1,V1=V1'+1] 
* Loop 436: fun19(V1,V,V2,Out)->  fun19(V1',V',V2',Out')
                  [V2>=1,V>=1,V1>=1,Out=Out'+1,V2=V2'+1,V=V'+1,V1=V1'+1] 
* Loop 437: fun19(V1,V,V2,Out) [V2>=0,V>=0,V1>=0,Out=0] 

### Ranking functions of CR fun19(V1,V,V2,Out) 
* RF of phase [435,436]: [V1]

#### Partial ranking functions of CR fun19(V1,V,V2,Out) 
* Partial RF of phase [435,436]:
  - RF of loop [435:1,436:1]:
    V1
  - RF of loop [436:1]:
    V
    V2


### Resulting Chains:fun19(V1,V,V2,Out) 
* [[435,436],437]
* [437]


### Merging Chains  fun19/4 into  External patterns of execution 
* [[437]] --> 1 
* [[437,[435,436]]] --> 2 


### Specialization of cost equations fun2/4 
* CE 141 is refined into CE [570] 
* CE 140 is refined into CE [571] 
* CE 139 is refined into CE [572] 


#### Refined cost equations fun2/4 
* CE 570: fun2(V1,V,V2,Out) = 0
     [V2>=0,V>=0,V1>=0,Out=0] 
* CE 571: fun2(V1,V,V2,Out) = 1+ fun2(W2,V,V2,X2)
     [W2>=0,V2>=0,V>=0,X2+1=Out,W2+1=V1] 
* CE 572: fun2(V1,V,V2,Out) = 1+ fun2(W2,X2,Y2,Z2)
     [Y2>=0,X2>=0,W2>=0,Z2+1=Out,Y2+1=V2,X2+1=V,W2+1=V1] 

### Cost equations --> "Loop" of fun2/4 
* CEs [571] --> Loop 438 
* CEs [572] --> Loop 439 
* CEs [570] --> Loop 440 

#### Loops of fun2/4 
* Loop 438: fun2(V1,V,V2,Out)->  fun2(V1',V,V2,Out')
                  [V2>=0,V>=0,V1>=1,Out=Out'+1,V1=V1'+1] 
* Loop 439: fun2(V1,V,V2,Out)->  fun2(V1',V',V2',Out')
                  [V2>=1,V>=1,V1>=1,Out=Out'+1,V2=V2'+1,V=V'+1,V1=V1'+1] 
* Loop 440: fun2(V1,V,V2,Out) [V2>=0,V>=0,V1>=0,Out=0] 

### Ranking functions of CR fun2(V1,V,V2,Out) 
* RF of phase [438,439]: [V1]

#### Partial ranking functions of CR fun2(V1,V,V2,Out) 
* Partial RF of phase [438,439]:
  - RF of loop [438:1,439:1]:
    V1
  - RF of loop [439:1]:
    V
    V2


### Resulting Chains:fun2(V1,V,V2,Out) 
* [[438,439],440]
* [440]


### Merging Chains  fun2/4 into  External patterns of execution 
* [[440]] --> 1 
* [[440,[438,439]]] --> 2 


### Specialization of cost equations fun20/4 
* CE 194 is refined into CE [573] 
* CE 192 is refined into CE [574] 
* CE 193 is refined into CE [575] 


#### Refined cost equations fun20/4 
* CE 573: fun20(V1,V,V2,Out) = 0
     [V2>=0,V>=0,V1>=0,Out=0] 
* CE 574: fun20(V1,V,V2,Out) = 1+ fun20(W2,V,V2,X2)
     [W2>=0,V2>=0,V>=0,X2+1=Out,W2+1=V1] 
* CE 575: fun20(V1,V,V2,Out) = 1+ fun20(W2,X2,Y2,Z2)
     [Y2>=0,X2>=0,W2>=0,Z2+1=Out,Y2+1=V2,X2+1=V,W2+1=V1] 

### Cost equations --> "Loop" of fun20/4 
* CEs [574] --> Loop 441 
* CEs [575] --> Loop 442 
* CEs [573] --> Loop 443 

#### Loops of fun20/4 
* Loop 441: fun20(V1,V,V2,Out)->  fun20(V1',V,V2,Out')
                  [V2>=0,V>=0,V1>=1,Out=Out'+1,V1=V1'+1] 
* Loop 442: fun20(V1,V,V2,Out)->  fun20(V1',V',V2',Out')
                  [V2>=1,V>=1,V1>=1,Out=Out'+1,V2=V2'+1,V=V'+1,V1=V1'+1] 
* Loop 443: fun20(V1,V,V2,Out) [V2>=0,V>=0,V1>=0,Out=0] 

### Ranking functions of CR fun20(V1,V,V2,Out) 
* RF of phase [441,442]: [V1]

#### Partial ranking functions of CR fun20(V1,V,V2,Out) 
* Partial RF of phase [441,442]:
  - RF of loop [441:1,442:1]:
    V1
  - RF of loop [442:1]:
    V
    V2


### Resulting Chains:fun20(V1,V,V2,Out) 
* [[441,442],443]
* [443]


### Merging Chains  fun20/4 into  External patterns of execution 
* [[443]] --> 1 
* [[443,[441,442]]] --> 2 


### Specialization of cost equations fun21/2 
* CE 196 is refined into CE [576] 
* CE 195 is refined into CE [577] 


#### Refined cost equations fun21/2 
* CE 576: fun21(V1,Out) = 0
     [V1>=0,Out=0] 
* CE 577: fun21(V1,Out) = 1+ fun21(W1,X1)
     [W1>=0,X1+1=Out,W1+1=V1] 

### Cost equations --> "Loop" of fun21/2 
* CEs [577] --> Loop 444 
* CEs [576] --> Loop 445 

#### Loops of fun21/2 
* Loop 444: fun21(V1,Out)->  fun21(V1',Out')
                  [V1'>=0,Out=Out'+1,V1'+1=V1] 
* Loop 445: fun21(V1,Out) [V1>=0,Out=0] 

### Ranking functions of CR fun21(V1,Out) 
* RF of phase [444]: [V1]

#### Partial ranking functions of CR fun21(V1,Out) 
* Partial RF of phase [444]:
  - RF of loop [444:1]:
    V1


### Resulting Chains:fun21(V1,Out) 
* [[444],445]
* [445]


### Merging Chains  fun21/2 into  External patterns of execution 
* [[445]] --> 1 
* [[445,[444]]] --> 2 


### Specialization of cost equations fun22/4 
* CE 203 is refined into CE [578] 
* CE 202 is refined into CE [579] 
* CE 201 is refined into CE [580] 


#### Refined cost equations fun22/4 
* CE 578: fun22(V1,V,V2,Out) = 0
     [V2>=0,V>=0,V1>=0,Out=0] 
* CE 579: fun22(V1,V,V2,Out) = 1+ fun22(W2,V,V2,X2)
     [W2>=0,V2>=0,V>=0,X2+1=Out,W2+1=V1] 
* CE 580: fun22(V1,V,V2,Out) = 1+ fun22(W2,X2,Y2,Z2)
     [Y2>=0,X2>=0,W2>=0,Z2+1=Out,Y2+1=V2,X2+1=V,W2+1=V1] 

### Cost equations --> "Loop" of fun22/4 
* CEs [579] --> Loop 446 
* CEs [580] --> Loop 447 
* CEs [578] --> Loop 448 

#### Loops of fun22/4 
* Loop 446: fun22(V1,V,V2,Out)->  fun22(V1',V,V2,Out')
                  [V2>=0,V>=0,V1>=1,Out=Out'+1,V1=V1'+1] 
* Loop 447: fun22(V1,V,V2,Out)->  fun22(V1',V',V2',Out')
                  [V2>=1,V>=1,V1>=1,Out=Out'+1,V2=V2'+1,V=V'+1,V1=V1'+1] 
* Loop 448: fun22(V1,V,V2,Out) [V2>=0,V>=0,V1>=0,Out=0] 

### Ranking functions of CR fun22(V1,V,V2,Out) 
* RF of phase [446,447]: [V1]

#### Partial ranking functions of CR fun22(V1,V,V2,Out) 
* Partial RF of phase [446,447]:
  - RF of loop [446:1,447:1]:
    V1
  - RF of loop [447:1]:
    V
    V2


### Resulting Chains:fun22(V1,V,V2,Out) 
* [[446,447],448]
* [448]


### Merging Chains  fun22/4 into  External patterns of execution 
* [[448]] --> 1 
* [[448,[446,447]]] --> 2 


### Specialization of cost equations fun23/4 
* CE 206 is refined into CE [581] 
* CE 205 is refined into CE [582] 
* CE 204 is refined into CE [583] 


#### Refined cost equations fun23/4 
* CE 581: fun23(V1,V,V2,Out) = 0
     [V2>=0,V>=0,V1>=0,Out=0] 
* CE 582: fun23(V1,V,V2,Out) = 1+ fun23(W2,V,V2,X2)
     [W2>=0,V2>=0,V>=0,X2+1=Out,W2+1=V1] 
* CE 583: fun23(V1,V,V2,Out) = 1+ fun23(W2,X2,Y2,Z2)
     [Y2>=0,X2>=0,W2>=0,Z2+1=Out,Y2+1=V2,X2+1=V,W2+1=V1] 

### Cost equations --> "Loop" of fun23/4 
* CEs [582] --> Loop 449 
* CEs [583] --> Loop 450 
* CEs [581] --> Loop 451 

#### Loops of fun23/4 
* Loop 449: fun23(V1,V,V2,Out)->  fun23(V1',V,V2,Out')
                  [V2>=0,V>=0,V1>=1,Out=Out'+1,V1=V1'+1] 
* Loop 450: fun23(V1,V,V2,Out)->  fun23(V1',V',V2',Out')
                  [V2>=1,V>=1,V1>=1,Out=Out'+1,V2=V2'+1,V=V'+1,V1=V1'+1] 
* Loop 451: fun23(V1,V,V2,Out) [V2>=0,V>=0,V1>=0,Out=0] 

### Ranking functions of CR fun23(V1,V,V2,Out) 
* RF of phase [449,450]: [V1]

#### Partial ranking functions of CR fun23(V1,V,V2,Out) 
* Partial RF of phase [449,450]:
  - RF of loop [449:1,450:1]:
    V1
  - RF of loop [450:1]:
    V
    V2


### Resulting Chains:fun23(V1,V,V2,Out) 
* [[449,450],451]
* [451]


### Merging Chains  fun23/4 into  External patterns of execution 
* [[451]] --> 1 
* [[451,[449,450]]] --> 2 


### Specialization of cost equations fun24/3 
* CE 209 is refined into CE [584] 
* CE 207 is refined into CE [585] 
* CE 208 is refined into CE [586] 


#### Refined cost equations fun24/3 
* CE 584: fun24(V1,V,Out) = 0
     [V>=0,V1>=0,Out=0] 
* CE 585: fun24(V1,V,Out) = 1+ fun24(W1,V,X1)
     [W1>=0,V>=0,X1+1=Out,W1+1=V1] 
* CE 586: fun24(V1,V,Out) = 1+ fun24(W1,X1,Y1)
     [X1>=0,W1>=0,Y1+1=Out,X1+1=V,W1+1=V1] 

### Cost equations --> "Loop" of fun24/3 
* CEs [585] --> Loop 452 
* CEs [586] --> Loop 453 
* CEs [584] --> Loop 454 

#### Loops of fun24/3 
* Loop 452: fun24(V1,V,Out)->  fun24(V1',V,Out')
                  [V>=0,V1>=1,Out=Out'+1,V1=V1'+1] 
* Loop 453: fun24(V1,V,Out)->  fun24(V1',V',Out')
                  [V>=1,V1>=1,Out=Out'+1,V=V'+1,V1=V1'+1] 
* Loop 454: fun24(V1,V,Out) [V>=0,V1>=0,Out=0] 

### Ranking functions of CR fun24(V1,V,Out) 
* RF of phase [452,453]: [V1]

#### Partial ranking functions of CR fun24(V1,V,Out) 
* Partial RF of phase [452,453]:
  - RF of loop [452:1,453:1]:
    V1
  - RF of loop [453:1]:
    V


### Resulting Chains:fun24(V1,V,Out) 
* [[452,453],454]
* [454]


### Merging Chains  fun24/3 into  External patterns of execution 
* [[454]] --> 1 
* [[454,[452,453]]] --> 2 


### Specialization of cost equations fun25/4 
* CE 212 is refined into CE [587] 
* CE 210 is refined into CE [588] 
* CE 211 is refined into CE [589] 


#### Refined cost equations fun25/4 
* CE 587: fun25(V1,V,V2,Out) = 0
     [V2>=0,V>=0,V1>=0,Out=0] 
* CE 588: fun25(V1,V,V2,Out) = 1+ fun25(W2,V,V2,X2)
     [W2>=0,V2>=0,V>=0,X2+1=Out,W2+1=V1] 
* CE 589: fun25(V1,V,V2,Out) = 1+ fun25(W2,X2,Y2,Z2)
     [Y2>=0,X2>=0,W2>=0,Z2+1=Out,Y2+1=V2,X2+1=V,W2+1=V1] 

### Cost equations --> "Loop" of fun25/4 
* CEs [588] --> Loop 455 
* CEs [589] --> Loop 456 
* CEs [587] --> Loop 457 

#### Loops of fun25/4 
* Loop 455: fun25(V1,V,V2,Out)->  fun25(V1',V,V2,Out')
                  [V2>=0,V>=0,V1>=1,Out=Out'+1,V1=V1'+1] 
* Loop 456: fun25(V1,V,V2,Out)->  fun25(V1',V',V2',Out')
                  [V2>=1,V>=1,V1>=1,Out=Out'+1,V2=V2'+1,V=V'+1,V1=V1'+1] 
* Loop 457: fun25(V1,V,V2,Out) [V2>=0,V>=0,V1>=0,Out=0] 

### Ranking functions of CR fun25(V1,V,V2,Out) 
* RF of phase [455,456]: [V1]

#### Partial ranking functions of CR fun25(V1,V,V2,Out) 
* Partial RF of phase [455,456]:
  - RF of loop [455:1,456:1]:
    V1
  - RF of loop [456:1]:
    V
    V2


### Resulting Chains:fun25(V1,V,V2,Out) 
* [[455,456],457]
* [457]


### Merging Chains  fun25/4 into  External patterns of execution 
* [[457]] --> 1 
* [[457,[455,456]]] --> 2 


### Specialization of cost equations fun26/3 
* CE 215 is refined into CE [590] 
* CE 214 is refined into CE [591] 
* CE 213 is refined into CE [592] 


#### Refined cost equations fun26/3 
* CE 590: fun26(V1,V,Out) = 0
     [V>=0,V1>=0,Out=0] 
* CE 591: fun26(V1,V,Out) = 1+ fun26(W1,V,X1)
     [W1>=0,V>=0,X1+1=Out,W1+1=V1] 
* CE 592: fun26(V1,V,Out) = 1+ fun26(W1,X1,Y1)
     [X1>=0,W1>=0,Y1+1=Out,X1+1=V,W1+1=V1] 

### Cost equations --> "Loop" of fun26/3 
* CEs [591] --> Loop 458 
* CEs [592] --> Loop 459 
* CEs [590] --> Loop 460 

#### Loops of fun26/3 
* Loop 458: fun26(V1,V,Out)->  fun26(V1',V,Out')
                  [V>=0,V1>=1,Out=Out'+1,V1=V1'+1] 
* Loop 459: fun26(V1,V,Out)->  fun26(V1',V',Out')
                  [V>=1,V1>=1,Out=Out'+1,V=V'+1,V1=V1'+1] 
* Loop 460: fun26(V1,V,Out) [V>=0,V1>=0,Out=0] 

### Ranking functions of CR fun26(V1,V,Out) 
* RF of phase [458,459]: [V1]

#### Partial ranking functions of CR fun26(V1,V,Out) 
* Partial RF of phase [458,459]:
  - RF of loop [458:1,459:1]:
    V1
  - RF of loop [459:1]:
    V


### Resulting Chains:fun26(V1,V,Out) 
* [[458,459],460]
* [460]


### Merging Chains  fun26/3 into  External patterns of execution 
* [[460]] --> 1 
* [[460,[458,459]]] --> 2 


### Specialization of cost equations fun27/4 
* CE 220 is refined into CE [593] 
* CE 218 is refined into CE [594] 
* CE 219 is refined into CE [595] 


#### Refined cost equations fun27/4 
* CE 593: fun27(V1,V,V2,Out) = 0
     [V2>=0,V>=0,V1>=0,Out=0] 
* CE 594: fun27(V1,V,V2,Out) = 1+ fun27(W2,V,V2,X2)
     [W2>=0,V2>=0,V>=0,X2+1=Out,W2+1=V1] 
* CE 595: fun27(V1,V,V2,Out) = 1+ fun27(W2,X2,Y2,Z2)
     [Y2>=0,X2>=0,W2>=0,Z2+1=Out,Y2+1=V2,X2+1=V,W2+1=V1] 

### Cost equations --> "Loop" of fun27/4 
* CEs [594] --> Loop 461 
* CEs [595] --> Loop 462 
* CEs [593] --> Loop 463 

#### Loops of fun27/4 
* Loop 461: fun27(V1,V,V2,Out)->  fun27(V1',V,V2,Out')
                  [V2>=0,V>=0,V1>=1,Out=Out'+1,V1=V1'+1] 
* Loop 462: fun27(V1,V,V2,Out)->  fun27(V1',V',V2',Out')
                  [V2>=1,V>=1,V1>=1,Out=Out'+1,V2=V2'+1,V=V'+1,V1=V1'+1] 
* Loop 463: fun27(V1,V,V2,Out) [V2>=0,V>=0,V1>=0,Out=0] 

### Ranking functions of CR fun27(V1,V,V2,Out) 
* RF of phase [461,462]: [V1]

#### Partial ranking functions of CR fun27(V1,V,V2,Out) 
* Partial RF of phase [461,462]:
  - RF of loop [461:1,462:1]:
    V1
  - RF of loop [462:1]:
    V
    V2


### Resulting Chains:fun27(V1,V,V2,Out) 
* [[461,462],463]
* [463]


### Merging Chains  fun27/4 into  External patterns of execution 
* [[463]] --> 1 
* [[463,[461,462]]] --> 2 


### Specialization of cost equations fun28/3 
* CE 223 is refined into CE [596] 
* CE 221 is refined into CE [597] 
* CE 222 is refined into CE [598] 


#### Refined cost equations fun28/3 
* CE 596: fun28(V1,V,Out) = 0
     [V>=0,V1>=0,Out=0] 
* CE 597: fun28(V1,V,Out) = 1+ fun28(W1,V,X1)
     [W1>=0,V>=0,X1+1=Out,W1+1=V1] 
* CE 598: fun28(V1,V,Out) = 1+ fun28(W1,X1,Y1)
     [X1>=0,W1>=0,Y1+1=Out,X1+1=V,W1+1=V1] 

### Cost equations --> "Loop" of fun28/3 
* CEs [597] --> Loop 464 
* CEs [598] --> Loop 465 
* CEs [596] --> Loop 466 

#### Loops of fun28/3 
* Loop 464: fun28(V1,V,Out)->  fun28(V1',V,Out')
                  [V>=0,V1>=1,Out=Out'+1,V1=V1'+1] 
* Loop 465: fun28(V1,V,Out)->  fun28(V1',V',Out')
                  [V>=1,V1>=1,Out=Out'+1,V=V'+1,V1=V1'+1] 
* Loop 466: fun28(V1,V,Out) [V>=0,V1>=0,Out=0] 

### Ranking functions of CR fun28(V1,V,Out) 
* RF of phase [464,465]: [V1]

#### Partial ranking functions of CR fun28(V1,V,Out) 
* Partial RF of phase [464,465]:
  - RF of loop [464:1,465:1]:
    V1
  - RF of loop [465:1]:
    V


### Resulting Chains:fun28(V1,V,Out) 
* [[464,465],466]
* [466]


### Merging Chains  fun28/3 into  External patterns of execution 
* [[466]] --> 1 
* [[466,[464,465]]] --> 2 


### Specialization of cost equations fun29/5 
* CE 226 is refined into CE [599] 
* CE 224 is refined into CE [600] 
* CE 225 is refined into CE [601] 


#### Refined cost equations fun29/5 
* CE 599: fun29(V1,V,V2,V3,Out) = 0
     [V3>=0,V2>=0,V>=0,V1>=0,Out=0] 
* CE 600: fun29(V1,V,V2,V3,Out) = 1+ fun29(W3,V,V2,V3,X3)
     [W3>=0,V3>=0,V2>=0,V>=0,X3+1=Out,W3+1=V1] 
* CE 601: fun29(V1,V,V2,V3,Out) = 1+ fun29(W3,X3,Y3,Z3,A4)
     [Z3>=0,Y3>=0,X3>=0,W3>=0,A4+1=Out,Z3+1=V3,Y3+1=V2,X3+1=V,W3+1=V1] 

### Cost equations --> "Loop" of fun29/5 
* CEs [600] --> Loop 467 
* CEs [601] --> Loop 468 
* CEs [599] --> Loop 469 

#### Loops of fun29/5 
* Loop 467: fun29(V1,V,V2,V3,Out)->  fun29(V1',V,V2,V3,Out')
                  [V3>=0,V2>=0,V>=0,V1>=1,Out=Out'+1,V1=V1'+1] 
* Loop 468: fun29(V1,V,V2,V3,Out)->  fun29(V1',V',V2',V3',Out')
                  [V3>=1,V2>=1,V>=1,V1>=1,Out=Out'+1,V3=V3'+1,V2=V2'+1,V=V'+1,V1=V1'+1] 
* Loop 469: fun29(V1,V,V2,V3,Out) [V3>=0,V2>=0,V>=0,V1>=0,Out=0] 

### Ranking functions of CR fun29(V1,V,V2,V3,Out) 
* RF of phase [467,468]: [V1]

#### Partial ranking functions of CR fun29(V1,V,V2,V3,Out) 
* Partial RF of phase [467,468]:
  - RF of loop [467:1,468:1]:
    V1
  - RF of loop [468:1]:
    V
    V2
    V3


### Resulting Chains:fun29(V1,V,V2,V3,Out) 
* [[467,468],469]
* [469]


### Merging Chains  fun29/5 into  External patterns of execution 
* [[469]] --> 1 
* [[469,[467,468]]] --> 2 


### Specialization of cost equations fun3/3 
* CE 147 is refined into CE [602] 
* CE 145 is refined into CE [603] 
* CE 146 is refined into CE [604] 


#### Refined cost equations fun3/3 
* CE 602: fun3(V1,V,Out) = 0
     [V>=0,V1>=0,Out=0] 
* CE 603: fun3(V1,V,Out) = 1+ fun3(W1,V,X1)
     [W1>=0,V>=0,X1+1=Out,W1+1=V1] 
* CE 604: fun3(V1,V,Out) = 1+ fun3(W1,X1,Y1)
     [X1>=0,W1>=0,Y1+1=Out,X1+1=V,W1+1=V1] 

### Cost equations --> "Loop" of fun3/3 
* CEs [603] --> Loop 470 
* CEs [604] --> Loop 471 
* CEs [602] --> Loop 472 

#### Loops of fun3/3 
* Loop 470: fun3(V1,V,Out)->  fun3(V1',V,Out')
                  [V>=0,V1>=1,Out=Out'+1,V1=V1'+1] 
* Loop 471: fun3(V1,V,Out)->  fun3(V1',V',Out')
                  [V>=1,V1>=1,Out=Out'+1,V=V'+1,V1=V1'+1] 
* Loop 472: fun3(V1,V,Out) [V>=0,V1>=0,Out=0] 

### Ranking functions of CR fun3(V1,V,Out) 
* RF of phase [470,471]: [V1]

#### Partial ranking functions of CR fun3(V1,V,Out) 
* Partial RF of phase [470,471]:
  - RF of loop [470:1,471:1]:
    V1
  - RF of loop [471:1]:
    V


### Resulting Chains:fun3(V1,V,Out) 
* [[470,471],472]
* [472]


### Merging Chains  fun3/3 into  External patterns of execution 
* [[472]] --> 1 
* [[472,[470,471]]] --> 2 


### Specialization of cost equations fun30/3 
* CE 229 is refined into CE [605] 
* CE 228 is refined into CE [606] 
* CE 227 is refined into CE [607] 


#### Refined cost equations fun30/3 
* CE 605: fun30(V1,V,Out) = 0
     [V>=0,V1>=0,Out=0] 
* CE 606: fun30(V1,V,Out) = 1+ fun30(W1,V,X1)
     [W1>=0,V>=0,X1+1=Out,W1+1=V1] 
* CE 607: fun30(V1,V,Out) = 1+ fun30(W1,X1,Y1)
     [X1>=0,W1>=0,Y1+1=Out,X1+1=V,W1+1=V1] 

### Cost equations --> "Loop" of fun30/3 
* CEs [606] --> Loop 473 
* CEs [607] --> Loop 474 
* CEs [605] --> Loop 475 

#### Loops of fun30/3 
* Loop 473: fun30(V1,V,Out)->  fun30(V1',V,Out')
                  [V>=0,V1>=1,Out=Out'+1,V1=V1'+1] 
* Loop 474: fun30(V1,V,Out)->  fun30(V1',V',Out')
                  [V>=1,V1>=1,Out=Out'+1,V=V'+1,V1=V1'+1] 
* Loop 475: fun30(V1,V,Out) [V>=0,V1>=0,Out=0] 

### Ranking functions of CR fun30(V1,V,Out) 
* RF of phase [473,474]: [V1]

#### Partial ranking functions of CR fun30(V1,V,Out) 
* Partial RF of phase [473,474]:
  - RF of loop [473:1,474:1]:
    V1
  - RF of loop [474:1]:
    V


### Resulting Chains:fun30(V1,V,Out) 
* [[473,474],475]
* [475]


### Merging Chains  fun30/3 into  External patterns of execution 
* [[475]] --> 1 
* [[475,[473,474]]] --> 2 


### Specialization of cost equations fun31/4 
* CE 232 is refined into CE [608] 
* CE 231 is refined into CE [609] 
* CE 230 is refined into CE [610] 


#### Refined cost equations fun31/4 
* CE 608: fun31(V1,V,V2,Out) = 0
     [V2>=0,V>=0,V1>=0,Out=0] 
* CE 609: fun31(V1,V,V2,Out) = 1+ fun31(W2,V,V2,X2)
     [W2>=0,V2>=0,V>=0,X2+1=Out,W2+1=V1] 
* CE 610: fun31(V1,V,V2,Out) = 1+ fun31(W2,X2,Y2,Z2)
     [Y2>=0,X2>=0,W2>=0,Z2+1=Out,Y2+1=V2,X2+1=V,W2+1=V1] 

### Cost equations --> "Loop" of fun31/4 
* CEs [609] --> Loop 476 
* CEs [610] --> Loop 477 
* CEs [608] --> Loop 478 

#### Loops of fun31/4 
* Loop 476: fun31(V1,V,V2,Out)->  fun31(V1',V,V2,Out')
                  [V2>=0,V>=0,V1>=1,Out=Out'+1,V1=V1'+1] 
* Loop 477: fun31(V1,V,V2,Out)->  fun31(V1',V',V2',Out')
                  [V2>=1,V>=1,V1>=1,Out=Out'+1,V2=V2'+1,V=V'+1,V1=V1'+1] 
* Loop 478: fun31(V1,V,V2,Out) [V2>=0,V>=0,V1>=0,Out=0] 

### Ranking functions of CR fun31(V1,V,V2,Out) 
* RF of phase [476,477]: [V1]

#### Partial ranking functions of CR fun31(V1,V,V2,Out) 
* Partial RF of phase [476,477]:
  - RF of loop [476:1,477:1]:
    V1
  - RF of loop [477:1]:
    V
    V2


### Resulting Chains:fun31(V1,V,V2,Out) 
* [[476,477],478]
* [478]


### Merging Chains  fun31/4 into  External patterns of execution 
* [[478]] --> 1 
* [[478,[476,477]]] --> 2 


### Specialization of cost equations fun32/2 
* CE 234 is refined into CE [611] 
* CE 233 is refined into CE [612] 


#### Refined cost equations fun32/2 
* CE 611: fun32(V1,Out) = 0
     [V1>=0,Out=0] 
* CE 612: fun32(V1,Out) = 1+ fun32(W1,X1)
     [W1>=0,X1+1=Out,W1+1=V1] 

### Cost equations --> "Loop" of fun32/2 
* CEs [612] --> Loop 479 
* CEs [611] --> Loop 480 

#### Loops of fun32/2 
* Loop 479: fun32(V1,Out)->  fun32(V1',Out')
                  [V1'>=0,Out=Out'+1,V1'+1=V1] 
* Loop 480: fun32(V1,Out) [V1>=0,Out=0] 

### Ranking functions of CR fun32(V1,Out) 
* RF of phase [479]: [V1]

#### Partial ranking functions of CR fun32(V1,Out) 
* Partial RF of phase [479]:
  - RF of loop [479:1]:
    V1


### Resulting Chains:fun32(V1,Out) 
* [[479],480]
* [480]


### Merging Chains  fun32/2 into  External patterns of execution 
* [[480]] --> 1 
* [[480,[479]]] --> 2 


### Specialization of cost equations fun33/3 
* CE 237 is refined into CE [613] 
* CE 236 is refined into CE [614] 
* CE 235 is refined into CE [615] 


#### Refined cost equations fun33/3 
* CE 613: fun33(V1,V,Out) = 0
     [V>=0,V1>=0,Out=0] 
* CE 614: fun33(V1,V,Out) = 1+ fun33(W1,V,X1)
     [W1>=0,V>=0,X1+1=Out,W1+1=V1] 
* CE 615: fun33(V1,V,Out) = 1+ fun33(W1,X1,Y1)
     [X1>=0,W1>=0,Y1+1=Out,X1+1=V,W1+1=V1] 

### Cost equations --> "Loop" of fun33/3 
* CEs [614] --> Loop 481 
* CEs [615] --> Loop 482 
* CEs [613] --> Loop 483 

#### Loops of fun33/3 
* Loop 481: fun33(V1,V,Out)->  fun33(V1',V,Out')
                  [V>=0,V1>=1,Out=Out'+1,V1=V1'+1] 
* Loop 482: fun33(V1,V,Out)->  fun33(V1',V',Out')
                  [V>=1,V1>=1,Out=Out'+1,V=V'+1,V1=V1'+1] 
* Loop 483: fun33(V1,V,Out) [V>=0,V1>=0,Out=0] 

### Ranking functions of CR fun33(V1,V,Out) 
* RF of phase [481,482]: [V1]

#### Partial ranking functions of CR fun33(V1,V,Out) 
* Partial RF of phase [481,482]:
  - RF of loop [481:1,482:1]:
    V1
  - RF of loop [482:1]:
    V


### Resulting Chains:fun33(V1,V,Out) 
* [[481,482],483]
* [483]


### Merging Chains  fun33/3 into  External patterns of execution 
* [[483]] --> 1 
* [[483,[481,482]]] --> 2 


### Specialization of cost equations fun34/2 
* CE 239 is refined into CE [616] 
* CE 238 is refined into CE [617] 


#### Refined cost equations fun34/2 
* CE 616: fun34(V1,Out) = 0
     [V1>=0,Out=0] 
* CE 617: fun34(V1,Out) = 1+ fun34(W1,X1)
     [W1>=0,X1+1=Out,W1+1=V1] 

### Cost equations --> "Loop" of fun34/2 
* CEs [617] --> Loop 484 
* CEs [616] --> Loop 485 

#### Loops of fun34/2 
* Loop 484: fun34(V1,Out)->  fun34(V1',Out')
                  [V1'>=0,Out=Out'+1,V1'+1=V1] 
* Loop 485: fun34(V1,Out) [V1>=0,Out=0] 

### Ranking functions of CR fun34(V1,Out) 
* RF of phase [484]: [V1]

#### Partial ranking functions of CR fun34(V1,Out) 
* Partial RF of phase [484]:
  - RF of loop [484:1]:
    V1


### Resulting Chains:fun34(V1,Out) 
* [[484],485]
* [485]


### Merging Chains  fun34/2 into  External patterns of execution 
* [[485]] --> 1 
* [[485,[484]]] --> 2 


### Specialization of cost equations fun35/4 
* CE 242 is refined into CE [618] 
* CE 241 is refined into CE [619] 
* CE 240 is refined into CE [620] 


#### Refined cost equations fun35/4 
* CE 618: fun35(V1,V,V2,Out) = 0
     [V2>=0,V>=0,V1>=0,Out=0] 
* CE 619: fun35(V1,V,V2,Out) = 1+ fun35(W2,V,V2,X2)
     [W2>=0,V2>=0,V>=0,X2+1=Out,W2+1=V1] 
* CE 620: fun35(V1,V,V2,Out) = 1+ fun35(W2,X2,Y2,Z2)
     [Y2>=0,X2>=0,W2>=0,Z2+1=Out,Y2+1=V2,X2+1=V,W2+1=V1] 

### Cost equations --> "Loop" of fun35/4 
* CEs [619] --> Loop 486 
* CEs [620] --> Loop 487 
* CEs [618] --> Loop 488 

#### Loops of fun35/4 
* Loop 486: fun35(V1,V,V2,Out)->  fun35(V1',V,V2,Out')
                  [V2>=0,V>=0,V1>=1,Out=Out'+1,V1=V1'+1] 
* Loop 487: fun35(V1,V,V2,Out)->  fun35(V1',V',V2',Out')
                  [V2>=1,V>=1,V1>=1,Out=Out'+1,V2=V2'+1,V=V'+1,V1=V1'+1] 
* Loop 488: fun35(V1,V,V2,Out) [V2>=0,V>=0,V1>=0,Out=0] 

### Ranking functions of CR fun35(V1,V,V2,Out) 
* RF of phase [486,487]: [V1]

#### Partial ranking functions of CR fun35(V1,V,V2,Out) 
* Partial RF of phase [486,487]:
  - RF of loop [486:1,487:1]:
    V1
  - RF of loop [487:1]:
    V
    V2


### Resulting Chains:fun35(V1,V,V2,Out) 
* [[486,487],488]
* [488]


### Merging Chains  fun35/4 into  External patterns of execution 
* [[488]] --> 1 
* [[488,[486,487]]] --> 2 


### Specialization of cost equations fun36/3 
* CE 245 is refined into CE [621] 
* CE 243 is refined into CE [622] 
* CE 244 is refined into CE [623] 


#### Refined cost equations fun36/3 
* CE 621: fun36(V1,V,Out) = 0
     [V>=0,V1>=0,Out=0] 
* CE 622: fun36(V1,V,Out) = 1+ fun36(W1,V,X1)
     [W1>=0,V>=0,X1+1=Out,W1+1=V1] 
* CE 623: fun36(V1,V,Out) = 1+ fun36(W1,X1,Y1)
     [X1>=0,W1>=0,Y1+1=Out,X1+1=V,W1+1=V1] 

### Cost equations --> "Loop" of fun36/3 
* CEs [622] --> Loop 489 
* CEs [623] --> Loop 490 
* CEs [621] --> Loop 491 

#### Loops of fun36/3 
* Loop 489: fun36(V1,V,Out)->  fun36(V1',V,Out')
                  [V>=0,V1>=1,Out=Out'+1,V1=V1'+1] 
* Loop 490: fun36(V1,V,Out)->  fun36(V1',V',Out')
                  [V>=1,V1>=1,Out=Out'+1,V=V'+1,V1=V1'+1] 
* Loop 491: fun36(V1,V,Out) [V>=0,V1>=0,Out=0] 

### Ranking functions of CR fun36(V1,V,Out) 
* RF of phase [489,490]: [V1]

#### Partial ranking functions of CR fun36(V1,V,Out) 
* Partial RF of phase [489,490]:
  - RF of loop [489:1,490:1]:
    V1
  - RF of loop [490:1]:
    V


### Resulting Chains:fun36(V1,V,Out) 
* [[489,490],491]
* [491]


### Merging Chains  fun36/3 into  External patterns of execution 
* [[491]] --> 1 
* [[491,[489,490]]] --> 2 


### Specialization of cost equations fun37/4 
* CE 248 is refined into CE [624] 
* CE 247 is refined into CE [625] 
* CE 246 is refined into CE [626] 


#### Refined cost equations fun37/4 
* CE 624: fun37(V1,V,V2,Out) = 0
     [V2>=0,V>=0,V1>=0,Out=0] 
* CE 625: fun37(V1,V,V2,Out) = 1+ fun37(W2,V,V2,X2)
     [W2>=0,V2>=0,V>=0,X2+1=Out,W2+1=V1] 
* CE 626: fun37(V1,V,V2,Out) = 1+ fun37(W2,X2,Y2,Z2)
     [Y2>=0,X2>=0,W2>=0,Z2+1=Out,Y2+1=V2,X2+1=V,W2+1=V1] 

### Cost equations --> "Loop" of fun37/4 
* CEs [625] --> Loop 492 
* CEs [626] --> Loop 493 
* CEs [624] --> Loop 494 

#### Loops of fun37/4 
* Loop 492: fun37(V1,V,V2,Out)->  fun37(V1',V,V2,Out')
                  [V2>=0,V>=0,V1>=1,Out=Out'+1,V1=V1'+1] 
* Loop 493: fun37(V1,V,V2,Out)->  fun37(V1',V',V2',Out')
                  [V2>=1,V>=1,V1>=1,Out=Out'+1,V2=V2'+1,V=V'+1,V1=V1'+1] 
* Loop 494: fun37(V1,V,V2,Out) [V2>=0,V>=0,V1>=0,Out=0] 

### Ranking functions of CR fun37(V1,V,V2,Out) 
* RF of phase [492,493]: [V1]

#### Partial ranking functions of CR fun37(V1,V,V2,Out) 
* Partial RF of phase [492,493]:
  - RF of loop [492:1,493:1]:
    V1
  - RF of loop [493:1]:
    V
    V2


### Resulting Chains:fun37(V1,V,V2,Out) 
* [[492,493],494]
* [494]


### Merging Chains  fun37/4 into  External patterns of execution 
* [[494]] --> 1 
* [[494,[492,493]]] --> 2 


### Specialization of cost equations fun38/3 
* CE 251 is refined into CE [627] 
* CE 250 is refined into CE [628] 
* CE 249 is refined into CE [629] 


#### Refined cost equations fun38/3 
* CE 627: fun38(V1,V,Out) = 0
     [V>=0,V1>=0,Out=0] 
* CE 628: fun38(V1,V,Out) = 1+ fun38(W1,V,X1)
     [W1>=0,V>=0,X1+1=Out,W1+1=V1] 
* CE 629: fun38(V1,V,Out) = 1+ fun38(W1,X1,Y1)
     [X1>=0,W1>=0,Y1+1=Out,X1+1=V,W1+1=V1] 

### Cost equations --> "Loop" of fun38/3 
* CEs [628] --> Loop 495 
* CEs [629] --> Loop 496 
* CEs [627] --> Loop 497 

#### Loops of fun38/3 
* Loop 495: fun38(V1,V,Out)->  fun38(V1',V,Out')
                  [V>=0,V1>=1,Out=Out'+1,V1=V1'+1] 
* Loop 496: fun38(V1,V,Out)->  fun38(V1',V',Out')
                  [V>=1,V1>=1,Out=Out'+1,V=V'+1,V1=V1'+1] 
* Loop 497: fun38(V1,V,Out) [V>=0,V1>=0,Out=0] 

### Ranking functions of CR fun38(V1,V,Out) 
* RF of phase [495,496]: [V1]

#### Partial ranking functions of CR fun38(V1,V,Out) 
* Partial RF of phase [495,496]:
  - RF of loop [495:1,496:1]:
    V1
  - RF of loop [496:1]:
    V


### Resulting Chains:fun38(V1,V,Out) 
* [[495,496],497]
* [497]


### Merging Chains  fun38/3 into  External patterns of execution 
* [[497]] --> 1 
* [[497,[495,496]]] --> 2 


### Specialization of cost equations fun39/3 
* CE 254 is refined into CE [630] 
* CE 252 is refined into CE [631] 
* CE 253 is refined into CE [632] 


#### Refined cost equations fun39/3 
* CE 630: fun39(V1,V,Out) = 0
     [V>=0,V1>=0,Out=0] 
* CE 631: fun39(V1,V,Out) = 1+ fun39(W1,V,X1)
     [W1>=0,V>=0,X1+1=Out,W1+1=V1] 
* CE 632: fun39(V1,V,Out) = 1+ fun39(W1,X1,Y1)
     [X1>=0,W1>=0,Y1+1=Out,X1+1=V,W1+1=V1] 

### Cost equations --> "Loop" of fun39/3 
* CEs [631] --> Loop 498 
* CEs [632] --> Loop 499 
* CEs [630] --> Loop 500 

#### Loops of fun39/3 
* Loop 498: fun39(V1,V,Out)->  fun39(V1',V,Out')
                  [V>=0,V1>=1,Out=Out'+1,V1=V1'+1] 
* Loop 499: fun39(V1,V,Out)->  fun39(V1',V',Out')
                  [V>=1,V1>=1,Out=Out'+1,V=V'+1,V1=V1'+1] 
* Loop 500: fun39(V1,V,Out) [V>=0,V1>=0,Out=0] 

### Ranking functions of CR fun39(V1,V,Out) 
* RF of phase [498,499]: [V1]

#### Partial ranking functions of CR fun39(V1,V,Out) 
* Partial RF of phase [498,499]:
  - RF of loop [498:1,499:1]:
    V1
  - RF of loop [499:1]:
    V


### Resulting Chains:fun39(V1,V,Out) 
* [[498,499],500]
* [500]


### Merging Chains  fun39/3 into  External patterns of execution 
* [[500]] --> 1 
* [[500,[498,499]]] --> 2 


### Specialization of cost equations fun4/2 
* CE 149 is refined into CE [633] 
* CE 148 is refined into CE [634] 


#### Refined cost equations fun4/2 
* CE 633: fun4(V1,Out) = 0
     [V1>=0,Out=0] 
* CE 634: fun4(V1,Out) = 1+ fun4(W1,X1)
     [W1>=0,X1+1=Out,W1+1=V1] 

### Cost equations --> "Loop" of fun4/2 
* CEs [634] --> Loop 501 
* CEs [633] --> Loop 502 

#### Loops of fun4/2 
* Loop 501: fun4(V1,Out)->  fun4(V1',Out')
                  [V1'>=0,Out=Out'+1,V1'+1=V1] 
* Loop 502: fun4(V1,Out) [V1>=0,Out=0] 

### Ranking functions of CR fun4(V1,Out) 
* RF of phase [501]: [V1]

#### Partial ranking functions of CR fun4(V1,Out) 
* Partial RF of phase [501]:
  - RF of loop [501:1]:
    V1


### Resulting Chains:fun4(V1,Out) 
* [[501],502]
* [502]


### Merging Chains  fun4/2 into  External patterns of execution 
* [[502]] --> 1 
* [[502,[501]]] --> 2 


### Specialization of cost equations fun40/4 
* CE 257 is refined into CE [635] 
* CE 256 is refined into CE [636] 
* CE 255 is refined into CE [637] 


#### Refined cost equations fun40/4 
* CE 635: fun40(V1,V,V2,Out) = 0
     [V2>=0,V>=0,V1>=0,Out=0] 
* CE 636: fun40(V1,V,V2,Out) = 1+ fun40(W2,V,V2,X2)
     [W2>=0,V2>=0,V>=0,X2+1=Out,W2+1=V1] 
* CE 637: fun40(V1,V,V2,Out) = 1+ fun40(W2,X2,Y2,Z2)
     [Y2>=0,X2>=0,W2>=0,Z2+1=Out,Y2+1=V2,X2+1=V,W2+1=V1] 

### Cost equations --> "Loop" of fun40/4 
* CEs [636] --> Loop 503 
* CEs [637] --> Loop 504 
* CEs [635] --> Loop 505 

#### Loops of fun40/4 
* Loop 503: fun40(V1,V,V2,Out)->  fun40(V1',V,V2,Out')
                  [V2>=0,V>=0,V1>=1,Out=Out'+1,V1=V1'+1] 
* Loop 504: fun40(V1,V,V2,Out)->  fun40(V1',V',V2',Out')
                  [V2>=1,V>=1,V1>=1,Out=Out'+1,V2=V2'+1,V=V'+1,V1=V1'+1] 
* Loop 505: fun40(V1,V,V2,Out) [V2>=0,V>=0,V1>=0,Out=0] 

### Ranking functions of CR fun40(V1,V,V2,Out) 
* RF of phase [503,504]: [V1]

#### Partial ranking functions of CR fun40(V1,V,V2,Out) 
* Partial RF of phase [503,504]:
  - RF of loop [503:1,504:1]:
    V1
  - RF of loop [504:1]:
    V
    V2


### Resulting Chains:fun40(V1,V,V2,Out) 
* [[503,504],505]
* [505]


### Merging Chains  fun40/4 into  External patterns of execution 
* [[505]] --> 1 
* [[505,[503,504]]] --> 2 


### Specialization of cost equations fun41/4 
* CE 260 is refined into CE [638] 
* CE 259 is refined into CE [639] 
* CE 258 is refined into CE [640] 


#### Refined cost equations fun41/4 
* CE 638: fun41(V1,V,V2,Out) = 0
     [V2>=0,V>=0,V1>=0,Out=0] 
* CE 639: fun41(V1,V,V2,Out) = 1+ fun41(W2,V,V2,X2)
     [W2>=0,V2>=0,V>=0,X2+1=Out,W2+1=V1] 
* CE 640: fun41(V1,V,V2,Out) = 1+ fun41(W2,X2,Y2,Z2)
     [Y2>=0,X2>=0,W2>=0,Z2+1=Out,Y2+1=V2,X2+1=V,W2+1=V1] 

### Cost equations --> "Loop" of fun41/4 
* CEs [639] --> Loop 506 
* CEs [640] --> Loop 507 
* CEs [638] --> Loop 508 

#### Loops of fun41/4 
* Loop 506: fun41(V1,V,V2,Out)->  fun41(V1',V,V2,Out')
                  [V2>=0,V>=0,V1>=1,Out=Out'+1,V1=V1'+1] 
* Loop 507: fun41(V1,V,V2,Out)->  fun41(V1',V',V2',Out')
                  [V2>=1,V>=1,V1>=1,Out=Out'+1,V2=V2'+1,V=V'+1,V1=V1'+1] 
* Loop 508: fun41(V1,V,V2,Out) [V2>=0,V>=0,V1>=0,Out=0] 

### Ranking functions of CR fun41(V1,V,V2,Out) 
* RF of phase [506,507]: [V1]

#### Partial ranking functions of CR fun41(V1,V,V2,Out) 
* Partial RF of phase [506,507]:
  - RF of loop [506:1,507:1]:
    V1
  - RF of loop [507:1]:
    V
    V2


### Resulting Chains:fun41(V1,V,V2,Out) 
* [[506,507],508]
* [508]


### Merging Chains  fun41/4 into  External patterns of execution 
* [[508]] --> 1 
* [[508,[506,507]]] --> 2 


### Specialization of cost equations fun42/4 
* CE 271 is refined into CE [641] 
* CE 269 is refined into CE [642] 
* CE 270 is refined into CE [643] 


#### Refined cost equations fun42/4 
* CE 641: fun42(V1,V,V2,Out) = 0
     [V2>=0,V>=0,V1>=0,Out=0] 
* CE 642: fun42(V1,V,V2,Out) = 1+ fun42(W2,V,V2,X2)
     [W2>=0,V2>=0,V>=0,X2+1=Out,W2+1=V1] 
* CE 643: fun42(V1,V,V2,Out) = 1+ fun42(W2,X2,Y2,Z2)
     [Y2>=0,X2>=0,W2>=0,Z2+1=Out,Y2+1=V2,X2+1=V,W2+1=V1] 

### Cost equations --> "Loop" of fun42/4 
* CEs [642] --> Loop 509 
* CEs [643] --> Loop 510 
* CEs [641] --> Loop 511 

#### Loops of fun42/4 
* Loop 509: fun42(V1,V,V2,Out)->  fun42(V1',V,V2,Out')
                  [V2>=0,V>=0,V1>=1,Out=Out'+1,V1=V1'+1] 
* Loop 510: fun42(V1,V,V2,Out)->  fun42(V1',V',V2',Out')
                  [V2>=1,V>=1,V1>=1,Out=Out'+1,V2=V2'+1,V=V'+1,V1=V1'+1] 
* Loop 511: fun42(V1,V,V2,Out) [V2>=0,V>=0,V1>=0,Out=0] 

### Ranking functions of CR fun42(V1,V,V2,Out) 
* RF of phase [509,510]: [V1]

#### Partial ranking functions of CR fun42(V1,V,V2,Out) 
* Partial RF of phase [509,510]:
  - RF of loop [509:1,510:1]:
    V1
  - RF of loop [510:1]:
    V
    V2


### Resulting Chains:fun42(V1,V,V2,Out) 
* [[509,510],511]
* [511]


### Merging Chains  fun42/4 into  External patterns of execution 
* [[511]] --> 1 
* [[511,[509,510]]] --> 2 


### Specialization of cost equations fun43/2 
* CE 273 is refined into CE [644] 
* CE 272 is refined into CE [645] 


#### Refined cost equations fun43/2 
* CE 644: fun43(V1,Out) = 0
     [V1>=0,Out=0] 
* CE 645: fun43(V1,Out) = 1+ fun43(W1,X1)
     [W1>=0,X1+1=Out,W1+1=V1] 

### Cost equations --> "Loop" of fun43/2 
* CEs [645] --> Loop 512 
* CEs [644] --> Loop 513 

#### Loops of fun43/2 
* Loop 512: fun43(V1,Out)->  fun43(V1',Out')
                  [V1'>=0,Out=Out'+1,V1'+1=V1] 
* Loop 513: fun43(V1,Out) [V1>=0,Out=0] 

### Ranking functions of CR fun43(V1,Out) 
* RF of phase [512]: [V1]

#### Partial ranking functions of CR fun43(V1,Out) 
* Partial RF of phase [512]:
  - RF of loop [512:1]:
    V1


### Resulting Chains:fun43(V1,Out) 
* [[512],513]
* [513]


### Merging Chains  fun43/2 into  External patterns of execution 
* [[513]] --> 1 
* [[513,[512]]] --> 2 


### Specialization of cost equations fun44/4 
* CE 276 is refined into CE [646] 
* CE 274 is refined into CE [647] 
* CE 275 is refined into CE [648] 


#### Refined cost equations fun44/4 
* CE 646: fun44(V1,V,V2,Out) = 0
     [V2>=0,V>=0,V1>=0,Out=0] 
* CE 647: fun44(V1,V,V2,Out) = 1+ fun44(W2,V,V2,X2)
     [W2>=0,V2>=0,V>=0,X2+1=Out,W2+1=V1] 
* CE 648: fun44(V1,V,V2,Out) = 1+ fun44(W2,X2,Y2,Z2)
     [Y2>=0,X2>=0,W2>=0,Z2+1=Out,Y2+1=V2,X2+1=V,W2+1=V1] 

### Cost equations --> "Loop" of fun44/4 
* CEs [647] --> Loop 514 
* CEs [648] --> Loop 515 
* CEs [646] --> Loop 516 

#### Loops of fun44/4 
* Loop 514: fun44(V1,V,V2,Out)->  fun44(V1',V,V2,Out')
                  [V2>=0,V>=0,V1>=1,Out=Out'+1,V1=V1'+1] 
* Loop 515: fun44(V1,V,V2,Out)->  fun44(V1',V',V2',Out')
                  [V2>=1,V>=1,V1>=1,Out=Out'+1,V2=V2'+1,V=V'+1,V1=V1'+1] 
* Loop 516: fun44(V1,V,V2,Out) [V2>=0,V>=0,V1>=0,Out=0] 

### Ranking functions of CR fun44(V1,V,V2,Out) 
* RF of phase [514,515]: [V1]

#### Partial ranking functions of CR fun44(V1,V,V2,Out) 
* Partial RF of phase [514,515]:
  - RF of loop [514:1,515:1]:
    V1
  - RF of loop [515:1]:
    V
    V2


### Resulting Chains:fun44(V1,V,V2,Out) 
* [[514,515],516]
* [516]


### Merging Chains  fun44/4 into  External patterns of execution 
* [[516]] --> 1 
* [[516,[514,515]]] --> 2 


### Specialization of cost equations fun45/3 
* CE 279 is refined into CE [649] 
* CE 278 is refined into CE [650] 
* CE 277 is refined into CE [651] 


#### Refined cost equations fun45/3 
* CE 649: fun45(V1,V,Out) = 0
     [V>=0,V1>=0,Out=0] 
* CE 650: fun45(V1,V,Out) = 1+ fun45(W1,V,X1)
     [W1>=0,V>=0,X1+1=Out,W1+1=V1] 
* CE 651: fun45(V1,V,Out) = 1+ fun45(W1,X1,Y1)
     [X1>=0,W1>=0,Y1+1=Out,X1+1=V,W1+1=V1] 

### Cost equations --> "Loop" of fun45/3 
* CEs [650] --> Loop 517 
* CEs [651] --> Loop 518 
* CEs [649] --> Loop 519 

#### Loops of fun45/3 
* Loop 517: fun45(V1,V,Out)->  fun45(V1',V,Out')
                  [V>=0,V1>=1,Out=Out'+1,V1=V1'+1] 
* Loop 518: fun45(V1,V,Out)->  fun45(V1',V',Out')
                  [V>=1,V1>=1,Out=Out'+1,V=V'+1,V1=V1'+1] 
* Loop 519: fun45(V1,V,Out) [V>=0,V1>=0,Out=0] 

### Ranking functions of CR fun45(V1,V,Out) 
* RF of phase [517,518]: [V1]

#### Partial ranking functions of CR fun45(V1,V,Out) 
* Partial RF of phase [517,518]:
  - RF of loop [517:1,518:1]:
    V1
  - RF of loop [518:1]:
    V


### Resulting Chains:fun45(V1,V,Out) 
* [[517,518],519]
* [519]


### Merging Chains  fun45/3 into  External patterns of execution 
* [[519]] --> 1 
* [[519,[517,518]]] --> 2 


### Specialization of cost equations fun46/3 
* CE 284 is refined into CE [652] 
* CE 282 is refined into CE [653] 
* CE 283 is refined into CE [654] 


#### Refined cost equations fun46/3 
* CE 652: fun46(V1,V,Out) = 0
     [V>=0,V1>=0,Out=0] 
* CE 653: fun46(V1,V,Out) = 1+ fun46(W1,V,X1)
     [W1>=0,V>=0,X1+1=Out,W1+1=V1] 
* CE 654: fun46(V1,V,Out) = 1+ fun46(W1,X1,Y1)
     [X1>=0,W1>=0,Y1+1=Out,X1+1=V,W1+1=V1] 

### Cost equations --> "Loop" of fun46/3 
* CEs [653] --> Loop 520 
* CEs [654] --> Loop 521 
* CEs [652] --> Loop 522 

#### Loops of fun46/3 
* Loop 520: fun46(V1,V,Out)->  fun46(V1',V,Out')
                  [V>=0,V1>=1,Out=Out'+1,V1=V1'+1] 
* Loop 521: fun46(V1,V,Out)->  fun46(V1',V',Out')
                  [V>=1,V1>=1,Out=Out'+1,V=V'+1,V1=V1'+1] 
* Loop 522: fun46(V1,V,Out) [V>=0,V1>=0,Out=0] 

### Ranking functions of CR fun46(V1,V,Out) 
* RF of phase [520,521]: [V1]

#### Partial ranking functions of CR fun46(V1,V,Out) 
* Partial RF of phase [520,521]:
  - RF of loop [520:1,521:1]:
    V1
  - RF of loop [521:1]:
    V


### Resulting Chains:fun46(V1,V,Out) 
* [[520,521],522]
* [522]


### Merging Chains  fun46/3 into  External patterns of execution 
* [[522]] --> 1 
* [[522,[520,521]]] --> 2 


### Specialization of cost equations fun47/4 
* CE 287 is refined into CE [655] 
* CE 286 is refined into CE [656] 
* CE 285 is refined into CE [657] 


#### Refined cost equations fun47/4 
* CE 655: fun47(V1,V,V2,Out) = 0
     [V2>=0,V>=0,V1>=0,Out=0] 
* CE 656: fun47(V1,V,V2,Out) = 1+ fun47(W2,V,V2,X2)
     [W2>=0,V2>=0,V>=0,X2+1=Out,W2+1=V1] 
* CE 657: fun47(V1,V,V2,Out) = 1+ fun47(W2,X2,Y2,Z2)
     [Y2>=0,X2>=0,W2>=0,Z2+1=Out,Y2+1=V2,X2+1=V,W2+1=V1] 

### Cost equations --> "Loop" of fun47/4 
* CEs [656] --> Loop 523 
* CEs [657] --> Loop 524 
* CEs [655] --> Loop 525 

#### Loops of fun47/4 
* Loop 523: fun47(V1,V,V2,Out)->  fun47(V1',V,V2,Out')
                  [V2>=0,V>=0,V1>=1,Out=Out'+1,V1=V1'+1] 
* Loop 524: fun47(V1,V,V2,Out)->  fun47(V1',V',V2',Out')
                  [V2>=1,V>=1,V1>=1,Out=Out'+1,V2=V2'+1,V=V'+1,V1=V1'+1] 
* Loop 525: fun47(V1,V,V2,Out) [V2>=0,V>=0,V1>=0,Out=0] 

### Ranking functions of CR fun47(V1,V,V2,Out) 
* RF of phase [523,524]: [V1]

#### Partial ranking functions of CR fun47(V1,V,V2,Out) 
* Partial RF of phase [523,524]:
  - RF of loop [523:1,524:1]:
    V1
  - RF of loop [524:1]:
    V
    V2


### Resulting Chains:fun47(V1,V,V2,Out) 
* [[523,524],525]
* [525]


### Merging Chains  fun47/4 into  External patterns of execution 
* [[525]] --> 1 
* [[525,[523,524]]] --> 2 


### Specialization of cost equations fun48/4 
* CE 290 is refined into CE [658] 
* CE 288 is refined into CE [659] 
* CE 289 is refined into CE [660] 


#### Refined cost equations fun48/4 
* CE 658: fun48(V1,V,V2,Out) = 0
     [V2>=0,V>=0,V1>=0,Out=0] 
* CE 659: fun48(V1,V,V2,Out) = 1+ fun48(W2,V,V2,X2)
     [W2>=0,V2>=0,V>=0,X2+1=Out,W2+1=V1] 
* CE 660: fun48(V1,V,V2,Out) = 1+ fun48(W2,X2,Y2,Z2)
     [Y2>=0,X2>=0,W2>=0,Z2+1=Out,Y2+1=V2,X2+1=V,W2+1=V1] 

### Cost equations --> "Loop" of fun48/4 
* CEs [659] --> Loop 526 
* CEs [660] --> Loop 527 
* CEs [658] --> Loop 528 

#### Loops of fun48/4 
* Loop 526: fun48(V1,V,V2,Out)->  fun48(V1',V,V2,Out')
                  [V2>=0,V>=0,V1>=1,Out=Out'+1,V1=V1'+1] 
* Loop 527: fun48(V1,V,V2,Out)->  fun48(V1',V',V2',Out')
                  [V2>=1,V>=1,V1>=1,Out=Out'+1,V2=V2'+1,V=V'+1,V1=V1'+1] 
* Loop 528: fun48(V1,V,V2,Out) [V2>=0,V>=0,V1>=0,Out=0] 

### Ranking functions of CR fun48(V1,V,V2,Out) 
* RF of phase [526,527]: [V1]

#### Partial ranking functions of CR fun48(V1,V,V2,Out) 
* Partial RF of phase [526,527]:
  - RF of loop [526:1,527:1]:
    V1
  - RF of loop [527:1]:
    V
    V2


### Resulting Chains:fun48(V1,V,V2,Out) 
* [[526,527],528]
* [528]


### Merging Chains  fun48/4 into  External patterns of execution 
* [[528]] --> 1 
* [[528,[526,527]]] --> 2 


### Specialization of cost equations fun49/3 
* CE 293 is refined into CE [661] 
* CE 292 is refined into CE [662] 
* CE 291 is refined into CE [663] 


#### Refined cost equations fun49/3 
* CE 661: fun49(V1,V,Out) = 0
     [V>=0,V1>=0,Out=0] 
* CE 662: fun49(V1,V,Out) = 1+ fun49(W1,V,X1)
     [W1>=0,V>=0,X1+1=Out,W1+1=V1] 
* CE 663: fun49(V1,V,Out) = 1+ fun49(W1,X1,Y1)
     [X1>=0,W1>=0,Y1+1=Out,X1+1=V,W1+1=V1] 

### Cost equations --> "Loop" of fun49/3 
* CEs [662] --> Loop 529 
* CEs [663] --> Loop 530 
* CEs [661] --> Loop 531 

#### Loops of fun49/3 
* Loop 529: fun49(V1,V,Out)->  fun49(V1',V,Out')
                  [V>=0,V1>=1,Out=Out'+1,V1=V1'+1] 
* Loop 530: fun49(V1,V,Out)->  fun49(V1',V',Out')
                  [V>=1,V1>=1,Out=Out'+1,V=V'+1,V1=V1'+1] 
* Loop 531: fun49(V1,V,Out) [V>=0,V1>=0,Out=0] 

### Ranking functions of CR fun49(V1,V,Out) 
* RF of phase [529,530]: [V1]

#### Partial ranking functions of CR fun49(V1,V,Out) 
* Partial RF of phase [529,530]:
  - RF of loop [529:1,530:1]:
    V1
  - RF of loop [530:1]:
    V


### Resulting Chains:fun49(V1,V,Out) 
* [[529,530],531]
* [531]


### Merging Chains  fun49/3 into  External patterns of execution 
* [[531]] --> 1 
* [[531,[529,530]]] --> 2 


### Specialization of cost equations fun5/5 
* CE 152 is refined into CE [664] 
* CE 150 is refined into CE [665] 
* CE 151 is refined into CE [666] 


#### Refined cost equations fun5/5 
* CE 664: fun5(V1,V,V2,V3,Out) = 0
     [V3>=0,V2>=0,V>=0,V1>=0,Out=0] 
* CE 665: fun5(V1,V,V2,V3,Out) = 1+ fun5(W3,V,V2,V3,X3)
     [W3>=0,V3>=0,V2>=0,V>=0,X3+1=Out,W3+1=V1] 
* CE 666: fun5(V1,V,V2,V3,Out) = 1+ fun5(W3,X3,Y3,Z3,A4)
     [Z3>=0,Y3>=0,X3>=0,W3>=0,A4+1=Out,Z3+1=V3,Y3+1=V2,X3+1=V,W3+1=V1] 

### Cost equations --> "Loop" of fun5/5 
* CEs [665] --> Loop 532 
* CEs [666] --> Loop 533 
* CEs [664] --> Loop 534 

#### Loops of fun5/5 
* Loop 532: fun5(V1,V,V2,V3,Out)->  fun5(V1',V,V2,V3,Out')
                  [V3>=0,V2>=0,V>=0,V1>=1,Out=Out'+1,V1=V1'+1] 
* Loop 533: fun5(V1,V,V2,V3,Out)->  fun5(V1',V',V2',V3',Out')
                  [V3>=1,V2>=1,V>=1,V1>=1,Out=Out'+1,V3=V3'+1,V2=V2'+1,V=V'+1,V1=V1'+1] 
* Loop 534: fun5(V1,V,V2,V3,Out) [V3>=0,V2>=0,V>=0,V1>=0,Out=0] 

### Ranking functions of CR fun5(V1,V,V2,V3,Out) 
* RF of phase [532,533]: [V1]

#### Partial ranking functions of CR fun5(V1,V,V2,V3,Out) 
* Partial RF of phase [532,533]:
  - RF of loop [532:1,533:1]:
    V1
  - RF of loop [533:1]:
    V
    V2
    V3


### Resulting Chains:fun5(V1,V,V2,V3,Out) 
* [[532,533],534]
* [534]


### Merging Chains  fun5/5 into  External patterns of execution 
* [[534]] --> 1 
* [[534,[532,533]]] --> 2 


### Specialization of cost equations fun50/4 
* CE 296 is refined into CE [667] 
* CE 295 is refined into CE [668] 
* CE 294 is refined into CE [669] 


#### Refined cost equations fun50/4 
* CE 667: fun50(V1,V,V2,Out) = 0
     [V2>=0,V>=0,V1>=0,Out=0] 
* CE 668: fun50(V1,V,V2,Out) = 1+ fun50(W2,V,V2,X2)
     [W2>=0,V2>=0,V>=0,X2+1=Out,W2+1=V1] 
* CE 669: fun50(V1,V,V2,Out) = 1+ fun50(W2,X2,Y2,Z2)
     [Y2>=0,X2>=0,W2>=0,Z2+1=Out,Y2+1=V2,X2+1=V,W2+1=V1] 

### Cost equations --> "Loop" of fun50/4 
* CEs [668] --> Loop 535 
* CEs [669] --> Loop 536 
* CEs [667] --> Loop 537 

#### Loops of fun50/4 
* Loop 535: fun50(V1,V,V2,Out)->  fun50(V1',V,V2,Out')
                  [V2>=0,V>=0,V1>=1,Out=Out'+1,V1=V1'+1] 
* Loop 536: fun50(V1,V,V2,Out)->  fun50(V1',V',V2',Out')
                  [V2>=1,V>=1,V1>=1,Out=Out'+1,V2=V2'+1,V=V'+1,V1=V1'+1] 
* Loop 537: fun50(V1,V,V2,Out) [V2>=0,V>=0,V1>=0,Out=0] 

### Ranking functions of CR fun50(V1,V,V2,Out) 
* RF of phase [535,536]: [V1]

#### Partial ranking functions of CR fun50(V1,V,V2,Out) 
* Partial RF of phase [535,536]:
  - RF of loop [535:1,536:1]:
    V1
  - RF of loop [536:1]:
    V
    V2


### Resulting Chains:fun50(V1,V,V2,Out) 
* [[535,536],537]
* [537]


### Merging Chains  fun50/4 into  External patterns of execution 
* [[537]] --> 1 
* [[537,[535,536]]] --> 2 


### Specialization of cost equations fun51/2 
* CE 298 is refined into CE [670] 
* CE 297 is refined into CE [671] 


#### Refined cost equations fun51/2 
* CE 670: fun51(V1,Out) = 0
     [V1>=0,Out=0] 
* CE 671: fun51(V1,Out) = 1+ fun51(W1,X1)
     [W1>=0,X1+1=Out,W1+1=V1] 

### Cost equations --> "Loop" of fun51/2 
* CEs [671] --> Loop 538 
* CEs [670] --> Loop 539 

#### Loops of fun51/2 
* Loop 538: fun51(V1,Out)->  fun51(V1',Out')
                  [V1'>=0,Out=Out'+1,V1'+1=V1] 
* Loop 539: fun51(V1,Out) [V1>=0,Out=0] 

### Ranking functions of CR fun51(V1,Out) 
* RF of phase [538]: [V1]

#### Partial ranking functions of CR fun51(V1,Out) 
* Partial RF of phase [538]:
  - RF of loop [538:1]:
    V1


### Resulting Chains:fun51(V1,Out) 
* [[538],539]
* [539]


### Merging Chains  fun51/2 into  External patterns of execution 
* [[539]] --> 1 
* [[539,[538]]] --> 2 


### Specialization of cost equations fun52/3 
* CE 301 is refined into CE [672] 
* CE 300 is refined into CE [673] 
* CE 299 is refined into CE [674] 


#### Refined cost equations fun52/3 
* CE 672: fun52(V1,V,Out) = 0
     [V>=0,V1>=0,Out=0] 
* CE 673: fun52(V1,V,Out) = 1+ fun52(W1,V,X1)
     [W1>=0,V>=0,X1+1=Out,W1+1=V1] 
* CE 674: fun52(V1,V,Out) = 1+ fun52(W1,X1,Y1)
     [X1>=0,W1>=0,Y1+1=Out,X1+1=V,W1+1=V1] 

### Cost equations --> "Loop" of fun52/3 
* CEs [673] --> Loop 540 
* CEs [674] --> Loop 541 
* CEs [672] --> Loop 542 

#### Loops of fun52/3 
* Loop 540: fun52(V1,V,Out)->  fun52(V1',V,Out')
                  [V>=0,V1>=1,Out=Out'+1,V1=V1'+1] 
* Loop 541: fun52(V1,V,Out)->  fun52(V1',V',Out')
                  [V>=1,V1>=1,Out=Out'+1,V=V'+1,V1=V1'+1] 
* Loop 542: fun52(V1,V,Out) [V>=0,V1>=0,Out=0] 

### Ranking functions of CR fun52(V1,V,Out) 
* RF of phase [540,541]: [V1]

#### Partial ranking functions of CR fun52(V1,V,Out) 
* Partial RF of phase [540,541]:
  - RF of loop [540:1,541:1]:
    V1
  - RF of loop [541:1]:
    V


### Resulting Chains:fun52(V1,V,Out) 
* [[540,541],542]
* [542]


### Merging Chains  fun52/3 into  External patterns of execution 
* [[542]] --> 1 
* [[542,[540,541]]] --> 2 


### Specialization of cost equations fun53/3 
* CE 304 is refined into CE [675] 
* CE 302 is refined into CE [676] 
* CE 303 is refined into CE [677] 


#### Refined cost equations fun53/3 
* CE 675: fun53(V1,V,Out) = 0
     [V>=0,V1>=0,Out=0] 
* CE 676: fun53(V1,V,Out) = 1+ fun53(W1,V,X1)
     [W1>=0,V>=0,X1+1=Out,W1+1=V1] 
* CE 677: fun53(V1,V,Out) = 1+ fun53(W1,X1,Y1)
     [X1>=0,W1>=0,Y1+1=Out,X1+1=V,W1+1=V1] 

### Cost equations --> "Loop" of fun53/3 
* CEs [676] --> Loop 543 
* CEs [677] --> Loop 544 
* CEs [675] --> Loop 545 

#### Loops of fun53/3 
* Loop 543: fun53(V1,V,Out)->  fun53(V1',V,Out')
                  [V>=0,V1>=1,Out=Out'+1,V1=V1'+1] 
* Loop 544: fun53(V1,V,Out)->  fun53(V1',V',Out')
                  [V>=1,V1>=1,Out=Out'+1,V=V'+1,V1=V1'+1] 
* Loop 545: fun53(V1,V,Out) [V>=0,V1>=0,Out=0] 

### Ranking functions of CR fun53(V1,V,Out) 
* RF of phase [543,544]: [V1]

#### Partial ranking functions of CR fun53(V1,V,Out) 
* Partial RF of phase [543,544]:
  - RF of loop [543:1,544:1]:
    V1
  - RF of loop [544:1]:
    V


### Resulting Chains:fun53(V1,V,Out) 
* [[543,544],545]
* [545]


### Merging Chains  fun53/3 into  External patterns of execution 
* [[545]] --> 1 
* [[545,[543,544]]] --> 2 


### Specialization of cost equations fun54/3 
* CE 310 is refined into CE [678] 
* CE 309 is refined into CE [679] 
* CE 308 is refined into CE [680] 


#### Refined cost equations fun54/3 
* CE 678: fun54(V1,V,Out) = 0
     [V>=0,V1>=0,Out=0] 
* CE 679: fun54(V1,V,Out) = 1+ fun54(W1,V,X1)
     [W1>=0,V>=0,X1+1=Out,W1+1=V1] 
* CE 680: fun54(V1,V,Out) = 1+ fun54(W1,X1,Y1)
     [X1>=0,W1>=0,Y1+1=Out,X1+1=V,W1+1=V1] 

### Cost equations --> "Loop" of fun54/3 
* CEs [679] --> Loop 546 
* CEs [680] --> Loop 547 
* CEs [678] --> Loop 548 

#### Loops of fun54/3 
* Loop 546: fun54(V1,V,Out)->  fun54(V1',V,Out')
                  [V>=0,V1>=1,Out=Out'+1,V1=V1'+1] 
* Loop 547: fun54(V1,V,Out)->  fun54(V1',V',Out')
                  [V>=1,V1>=1,Out=Out'+1,V=V'+1,V1=V1'+1] 
* Loop 548: fun54(V1,V,Out) [V>=0,V1>=0,Out=0] 

### Ranking functions of CR fun54(V1,V,Out) 
* RF of phase [546,547]: [V1]

#### Partial ranking functions of CR fun54(V1,V,Out) 
* Partial RF of phase [546,547]:
  - RF of loop [546:1,547:1]:
    V1
  - RF of loop [547:1]:
    V


### Resulting Chains:fun54(V1,V,Out) 
* [[546,547],548]
* [548]


### Merging Chains  fun54/3 into  External patterns of execution 
* [[548]] --> 1 
* [[548,[546,547]]] --> 2 


### Specialization of cost equations fun55/4 
* CE 313 is refined into CE [681] 
* CE 312 is refined into CE [682] 
* CE 311 is refined into CE [683] 


#### Refined cost equations fun55/4 
* CE 681: fun55(V1,V,V2,Out) = 0
     [V2>=0,V>=0,V1>=0,Out=0] 
* CE 682: fun55(V1,V,V2,Out) = 1+ fun55(W2,V,V2,X2)
     [W2>=0,V2>=0,V>=0,X2+1=Out,W2+1=V1] 
* CE 683: fun55(V1,V,V2,Out) = 1+ fun55(W2,X2,Y2,Z2)
     [Y2>=0,X2>=0,W2>=0,Z2+1=Out,Y2+1=V2,X2+1=V,W2+1=V1] 

### Cost equations --> "Loop" of fun55/4 
* CEs [682] --> Loop 549 
* CEs [683] --> Loop 550 
* CEs [681] --> Loop 551 

#### Loops of fun55/4 
* Loop 549: fun55(V1,V,V2,Out)->  fun55(V1',V,V2,Out')
                  [V2>=0,V>=0,V1>=1,Out=Out'+1,V1=V1'+1] 
* Loop 550: fun55(V1,V,V2,Out)->  fun55(V1',V',V2',Out')
                  [V2>=1,V>=1,V1>=1,Out=Out'+1,V2=V2'+1,V=V'+1,V1=V1'+1] 
* Loop 551: fun55(V1,V,V2,Out) [V2>=0,V>=0,V1>=0,Out=0] 

### Ranking functions of CR fun55(V1,V,V2,Out) 
* RF of phase [549,550]: [V1]

#### Partial ranking functions of CR fun55(V1,V,V2,Out) 
* Partial RF of phase [549,550]:
  - RF of loop [549:1,550:1]:
    V1
  - RF of loop [550:1]:
    V
    V2


### Resulting Chains:fun55(V1,V,V2,Out) 
* [[549,550],551]
* [551]


### Merging Chains  fun55/4 into  External patterns of execution 
* [[551]] --> 1 
* [[551,[549,550]]] --> 2 


### Specialization of cost equations fun56/4 
* CE 318 is refined into CE [684] 
* CE 316 is refined into CE [685] 
* CE 317 is refined into CE [686] 


#### Refined cost equations fun56/4 
* CE 684: fun56(V1,V,V2,Out) = 0
     [V2>=0,V>=0,V1>=0,Out=0] 
* CE 685: fun56(V1,V,V2,Out) = 1+ fun56(W2,V,V2,X2)
     [W2>=0,V2>=0,V>=0,X2+1=Out,W2+1=V1] 
* CE 686: fun56(V1,V,V2,Out) = 1+ fun56(W2,X2,Y2,Z2)
     [Y2>=0,X2>=0,W2>=0,Z2+1=Out,Y2+1=V2,X2+1=V,W2+1=V1] 

### Cost equations --> "Loop" of fun56/4 
* CEs [685] --> Loop 552 
* CEs [686] --> Loop 553 
* CEs [684] --> Loop 554 

#### Loops of fun56/4 
* Loop 552: fun56(V1,V,V2,Out)->  fun56(V1',V,V2,Out')
                  [V2>=0,V>=0,V1>=1,Out=Out'+1,V1=V1'+1] 
* Loop 553: fun56(V1,V,V2,Out)->  fun56(V1',V',V2',Out')
                  [V2>=1,V>=1,V1>=1,Out=Out'+1,V2=V2'+1,V=V'+1,V1=V1'+1] 
* Loop 554: fun56(V1,V,V2,Out) [V2>=0,V>=0,V1>=0,Out=0] 

### Ranking functions of CR fun56(V1,V,V2,Out) 
* RF of phase [552,553]: [V1]

#### Partial ranking functions of CR fun56(V1,V,V2,Out) 
* Partial RF of phase [552,553]:
  - RF of loop [552:1,553:1]:
    V1
  - RF of loop [553:1]:
    V
    V2


### Resulting Chains:fun56(V1,V,V2,Out) 
* [[552,553],554]
* [554]


### Merging Chains  fun56/4 into  External patterns of execution 
* [[554]] --> 1 
* [[554,[552,553]]] --> 2 


### Specialization of cost equations fun57/3 
* CE 321 is refined into CE [687] 
* CE 319 is refined into CE [688] 
* CE 320 is refined into CE [689] 


#### Refined cost equations fun57/3 
* CE 687: fun57(V1,V,Out) = 0
     [V>=0,V1>=0,Out=0] 
* CE 688: fun57(V1,V,Out) = 1+ fun57(W1,V,X1)
     [W1>=0,V>=0,X1+1=Out,W1+1=V1] 
* CE 689: fun57(V1,V,Out) = 1+ fun57(W1,X1,Y1)
     [X1>=0,W1>=0,Y1+1=Out,X1+1=V,W1+1=V1] 

### Cost equations --> "Loop" of fun57/3 
* CEs [688] --> Loop 555 
* CEs [689] --> Loop 556 
* CEs [687] --> Loop 557 

#### Loops of fun57/3 
* Loop 555: fun57(V1,V,Out)->  fun57(V1',V,Out')
                  [V>=0,V1>=1,Out=Out'+1,V1=V1'+1] 
* Loop 556: fun57(V1,V,Out)->  fun57(V1',V',Out')
                  [V>=1,V1>=1,Out=Out'+1,V=V'+1,V1=V1'+1] 
* Loop 557: fun57(V1,V,Out) [V>=0,V1>=0,Out=0] 

### Ranking functions of CR fun57(V1,V,Out) 
* RF of phase [555,556]: [V1]

#### Partial ranking functions of CR fun57(V1,V,Out) 
* Partial RF of phase [555,556]:
  - RF of loop [555:1,556:1]:
    V1
  - RF of loop [556:1]:
    V


### Resulting Chains:fun57(V1,V,Out) 
* [[555,556],557]
* [557]


### Merging Chains  fun57/3 into  External patterns of execution 
* [[557]] --> 1 
* [[557,[555,556]]] --> 2 


### Specialization of cost equations fun58/4 
* CE 324 is refined into CE [690] 
* CE 323 is refined into CE [691] 
* CE 322 is refined into CE [692] 


#### Refined cost equations fun58/4 
* CE 690: fun58(V1,V,V2,Out) = 0
     [V2>=0,V>=0,V1>=0,Out=0] 
* CE 691: fun58(V1,V,V2,Out) = 1+ fun58(W2,V,V2,X2)
     [W2>=0,V2>=0,V>=0,X2+1=Out,W2+1=V1] 
* CE 692: fun58(V1,V,V2,Out) = 1+ fun58(W2,X2,Y2,Z2)
     [Y2>=0,X2>=0,W2>=0,Z2+1=Out,Y2+1=V2,X2+1=V,W2+1=V1] 

### Cost equations --> "Loop" of fun58/4 
* CEs [691] --> Loop 558 
* CEs [692] --> Loop 559 
* CEs [690] --> Loop 560 

#### Loops of fun58/4 
* Loop 558: fun58(V1,V,V2,Out)->  fun58(V1',V,V2,Out')
                  [V2>=0,V>=0,V1>=1,Out=Out'+1,V1=V1'+1] 
* Loop 559: fun58(V1,V,V2,Out)->  fun58(V1',V',V2',Out')
                  [V2>=1,V>=1,V1>=1,Out=Out'+1,V2=V2'+1,V=V'+1,V1=V1'+1] 
* Loop 560: fun58(V1,V,V2,Out) [V2>=0,V>=0,V1>=0,Out=0] 

### Ranking functions of CR fun58(V1,V,V2,Out) 
* RF of phase [558,559]: [V1]

#### Partial ranking functions of CR fun58(V1,V,V2,Out) 
* Partial RF of phase [558,559]:
  - RF of loop [558:1,559:1]:
    V1
  - RF of loop [559:1]:
    V
    V2


### Resulting Chains:fun58(V1,V,V2,Out) 
* [[558,559],560]
* [560]


### Merging Chains  fun58/4 into  External patterns of execution 
* [[560]] --> 1 
* [[560,[558,559]]] --> 2 


### Specialization of cost equations fun59/4 
* CE 327 is refined into CE [693] 
* CE 326 is refined into CE [694] 
* CE 325 is refined into CE [695] 


#### Refined cost equations fun59/4 
* CE 693: fun59(V1,V,V2,Out) = 0
     [V2>=0,V>=0,V1>=0,Out=0] 
* CE 694: fun59(V1,V,V2,Out) = 1+ fun59(W2,V,V2,X2)
     [W2>=0,V2>=0,V>=0,X2+1=Out,W2+1=V1] 
* CE 695: fun59(V1,V,V2,Out) = 1+ fun59(W2,X2,Y2,Z2)
     [Y2>=0,X2>=0,W2>=0,Z2+1=Out,Y2+1=V2,X2+1=V,W2+1=V1] 

### Cost equations --> "Loop" of fun59/4 
* CEs [694] --> Loop 561 
* CEs [695] --> Loop 562 
* CEs [693] --> Loop 563 

#### Loops of fun59/4 
* Loop 561: fun59(V1,V,V2,Out)->  fun59(V1',V,V2,Out')
                  [V2>=0,V>=0,V1>=1,Out=Out'+1,V1=V1'+1] 
* Loop 562: fun59(V1,V,V2,Out)->  fun59(V1',V',V2',Out')
                  [V2>=1,V>=1,V1>=1,Out=Out'+1,V2=V2'+1,V=V'+1,V1=V1'+1] 
* Loop 563: fun59(V1,V,V2,Out) [V2>=0,V>=0,V1>=0,Out=0] 

### Ranking functions of CR fun59(V1,V,V2,Out) 
* RF of phase [561,562]: [V1]

#### Partial ranking functions of CR fun59(V1,V,V2,Out) 
* Partial RF of phase [561,562]:
  - RF of loop [561:1,562:1]:
    V1
  - RF of loop [562:1]:
    V
    V2


### Resulting Chains:fun59(V1,V,V2,Out) 
* [[561,562],563]
* [563]


### Merging Chains  fun59/4 into  External patterns of execution 
* [[563]] --> 1 
* [[563,[561,562]]] --> 2 


### Specialization of cost equations fun6/4 
* CE 155 is refined into CE [696] 
* CE 153 is refined into CE [697] 
* CE 154 is refined into CE [698] 


#### Refined cost equations fun6/4 
* CE 696: fun6(V1,V,V2,Out) = 0
     [V2>=0,V>=0,V1>=0,Out=0] 
* CE 697: fun6(V1,V,V2,Out) = 1+ fun6(W2,V,V2,X2)
     [W2>=0,V2>=0,V>=0,X2+1=Out,W2+1=V1] 
* CE 698: fun6(V1,V,V2,Out) = 1+ fun6(W2,X2,Y2,Z2)
     [Y2>=0,X2>=0,W2>=0,Z2+1=Out,Y2+1=V2,X2+1=V,W2+1=V1] 

### Cost equations --> "Loop" of fun6/4 
* CEs [697] --> Loop 564 
* CEs [698] --> Loop 565 
* CEs [696] --> Loop 566 

#### Loops of fun6/4 
* Loop 564: fun6(V1,V,V2,Out)->  fun6(V1',V,V2,Out')
                  [V2>=0,V>=0,V1>=1,Out=Out'+1,V1=V1'+1] 
* Loop 565: fun6(V1,V,V2,Out)->  fun6(V1',V',V2',Out')
                  [V2>=1,V>=1,V1>=1,Out=Out'+1,V2=V2'+1,V=V'+1,V1=V1'+1] 
* Loop 566: fun6(V1,V,V2,Out) [V2>=0,V>=0,V1>=0,Out=0] 

### Ranking functions of CR fun6(V1,V,V2,Out) 
* RF of phase [564,565]: [V1]

#### Partial ranking functions of CR fun6(V1,V,V2,Out) 
* Partial RF of phase [564,565]:
  - RF of loop [564:1,565:1]:
    V1
  - RF of loop [565:1]:
    V
    V2


### Resulting Chains:fun6(V1,V,V2,Out) 
* [[564,565],566]
* [566]


### Merging Chains  fun6/4 into  External patterns of execution 
* [[566]] --> 1 
* [[566,[564,565]]] --> 2 


### Specialization of cost equations fun60/4 
* CE 330 is refined into CE [699] 
* CE 328 is refined into CE [700] 
* CE 329 is refined into CE [701] 


#### Refined cost equations fun60/4 
* CE 699: fun60(V1,V,V2,Out) = 0
     [V2>=0,V>=0,V1>=0,Out=0] 
* CE 700: fun60(V1,V,V2,Out) = 1+ fun60(W2,V,V2,X2)
     [W2>=0,V2>=0,V>=0,X2+1=Out,W2+1=V1] 
* CE 701: fun60(V1,V,V2,Out) = 1+ fun60(W2,X2,Y2,Z2)
     [Y2>=0,X2>=0,W2>=0,Z2+1=Out,Y2+1=V2,X2+1=V,W2+1=V1] 

### Cost equations --> "Loop" of fun60/4 
* CEs [700] --> Loop 567 
* CEs [701] --> Loop 568 
* CEs [699] --> Loop 569 

#### Loops of fun60/4 
* Loop 567: fun60(V1,V,V2,Out)->  fun60(V1',V,V2,Out')
                  [V2>=0,V>=0,V1>=1,Out=Out'+1,V1=V1'+1] 
* Loop 568: fun60(V1,V,V2,Out)->  fun60(V1',V',V2',Out')
                  [V2>=1,V>=1,V1>=1,Out=Out'+1,V2=V2'+1,V=V'+1,V1=V1'+1] 
* Loop 569: fun60(V1,V,V2,Out) [V2>=0,V>=0,V1>=0,Out=0] 

### Ranking functions of CR fun60(V1,V,V2,Out) 
* RF of phase [567,568]: [V1]

#### Partial ranking functions of CR fun60(V1,V,V2,Out) 
* Partial RF of phase [567,568]:
  - RF of loop [567:1,568:1]:
    V1
  - RF of loop [568:1]:
    V
    V2


### Resulting Chains:fun60(V1,V,V2,Out) 
* [[567,568],569]
* [569]


### Merging Chains  fun60/4 into  External patterns of execution 
* [[569]] --> 1 
* [[569,[567,568]]] --> 2 


### Specialization of cost equations fun61/2 
* CE 332 is refined into CE [702] 
* CE 331 is refined into CE [703] 


#### Refined cost equations fun61/2 
* CE 702: fun61(V1,Out) = 0
     [V1>=0,Out=0] 
* CE 703: fun61(V1,Out) = 1+ fun61(W1,X1)
     [W1>=0,X1+1=Out,W1+1=V1] 

### Cost equations --> "Loop" of fun61/2 
* CEs [703] --> Loop 570 
* CEs [702] --> Loop 571 

#### Loops of fun61/2 
* Loop 570: fun61(V1,Out)->  fun61(V1',Out')
                  [V1'>=0,Out=Out'+1,V1'+1=V1] 
* Loop 571: fun61(V1,Out) [V1>=0,Out=0] 

### Ranking functions of CR fun61(V1,Out) 
* RF of phase [570]: [V1]

#### Partial ranking functions of CR fun61(V1,Out) 
* Partial RF of phase [570]:
  - RF of loop [570:1]:
    V1


### Resulting Chains:fun61(V1,Out) 
* [[570],571]
* [571]


### Merging Chains  fun61/2 into  External patterns of execution 
* [[571]] --> 1 
* [[571,[570]]] --> 2 


### Specialization of cost equations fun62/5 
* CE 335 is refined into CE [704] 
* CE 333 is refined into CE [705] 
* CE 334 is refined into CE [706] 


#### Refined cost equations fun62/5 
* CE 704: fun62(V1,V,V2,V3,Out) = 0
     [V3>=0,V2>=0,V>=0,V1>=0,Out=0] 
* CE 705: fun62(V1,V,V2,V3,Out) = 1+ fun62(W3,V,V2,V3,X3)
     [W3>=0,V3>=0,V2>=0,V>=0,X3+1=Out,W3+1=V1] 
* CE 706: fun62(V1,V,V2,V3,Out) = 1+ fun62(W3,X3,Y3,Z3,A4)
     [Z3>=0,Y3>=0,X3>=0,W3>=0,A4+1=Out,Z3+1=V3,Y3+1=V2,X3+1=V,W3+1=V1] 

### Cost equations --> "Loop" of fun62/5 
* CEs [705] --> Loop 572 
* CEs [706] --> Loop 573 
* CEs [704] --> Loop 574 

#### Loops of fun62/5 
* Loop 572: fun62(V1,V,V2,V3,Out)->  fun62(V1',V,V2,V3,Out')
                  [V3>=0,V2>=0,V>=0,V1>=1,Out=Out'+1,V1=V1'+1] 
* Loop 573: fun62(V1,V,V2,V3,Out)->  fun62(V1',V',V2',V3',Out')
                  [V3>=1,V2>=1,V>=1,V1>=1,Out=Out'+1,V3=V3'+1,V2=V2'+1,V=V'+1,V1=V1'+1] 
* Loop 574: fun62(V1,V,V2,V3,Out) [V3>=0,V2>=0,V>=0,V1>=0,Out=0] 

### Ranking functions of CR fun62(V1,V,V2,V3,Out) 
* RF of phase [572,573]: [V1]

#### Partial ranking functions of CR fun62(V1,V,V2,V3,Out) 
* Partial RF of phase [572,573]:
  - RF of loop [572:1,573:1]:
    V1
  - RF of loop [573:1]:
    V
    V2
    V3


### Resulting Chains:fun62(V1,V,V2,V3,Out) 
* [[572,573],574]
* [574]


### Merging Chains  fun62/5 into  External patterns of execution 
* [[574]] --> 1 
* [[574,[572,573]]] --> 2 


### Specialization of cost equations fun63/4 
* CE 342 is refined into CE [707] 
* CE 341 is refined into CE [708] 
* CE 340 is refined into CE [709] 


#### Refined cost equations fun63/4 
* CE 707: fun63(V1,V,V2,Out) = 0
     [V2>=0,V>=0,V1>=0,Out=0] 
* CE 708: fun63(V1,V,V2,Out) = 1+ fun63(W2,V,V2,X2)
     [W2>=0,V2>=0,V>=0,X2+1=Out,W2+1=V1] 
* CE 709: fun63(V1,V,V2,Out) = 1+ fun63(W2,X2,Y2,Z2)
     [Y2>=0,X2>=0,W2>=0,Z2+1=Out,Y2+1=V2,X2+1=V,W2+1=V1] 

### Cost equations --> "Loop" of fun63/4 
* CEs [708] --> Loop 575 
* CEs [709] --> Loop 576 
* CEs [707] --> Loop 577 

#### Loops of fun63/4 
* Loop 575: fun63(V1,V,V2,Out)->  fun63(V1',V,V2,Out')
                  [V2>=0,V>=0,V1>=1,Out=Out'+1,V1=V1'+1] 
* Loop 576: fun63(V1,V,V2,Out)->  fun63(V1',V',V2',Out')
                  [V2>=1,V>=1,V1>=1,Out=Out'+1,V2=V2'+1,V=V'+1,V1=V1'+1] 
* Loop 577: fun63(V1,V,V2,Out) [V2>=0,V>=0,V1>=0,Out=0] 

### Ranking functions of CR fun63(V1,V,V2,Out) 
* RF of phase [575,576]: [V1]

#### Partial ranking functions of CR fun63(V1,V,V2,Out) 
* Partial RF of phase [575,576]:
  - RF of loop [575:1,576:1]:
    V1
  - RF of loop [576:1]:
    V
    V2


### Resulting Chains:fun63(V1,V,V2,Out) 
* [[575,576],577]
* [577]


### Merging Chains  fun63/4 into  External patterns of execution 
* [[577]] --> 1 
* [[577,[575,576]]] --> 2 


### Specialization of cost equations fun64/3 
* CE 347 is refined into CE [710] 
* CE 346 is refined into CE [711] 
* CE 345 is refined into CE [712] 


#### Refined cost equations fun64/3 
* CE 710: fun64(V1,V,Out) = 0
     [V>=0,V1>=0,Out=0] 
* CE 711: fun64(V1,V,Out) = 1+ fun64(W1,V,X1)
     [W1>=0,V>=0,X1+1=Out,W1+1=V1] 
* CE 712: fun64(V1,V,Out) = 1+ fun64(W1,X1,Y1)
     [X1>=0,W1>=0,Y1+1=Out,X1+1=V,W1+1=V1] 

### Cost equations --> "Loop" of fun64/3 
* CEs [711] --> Loop 578 
* CEs [712] --> Loop 579 
* CEs [710] --> Loop 580 

#### Loops of fun64/3 
* Loop 578: fun64(V1,V,Out)->  fun64(V1',V,Out')
                  [V>=0,V1>=1,Out=Out'+1,V1=V1'+1] 
* Loop 579: fun64(V1,V,Out)->  fun64(V1',V',Out')
                  [V>=1,V1>=1,Out=Out'+1,V=V'+1,V1=V1'+1] 
* Loop 580: fun64(V1,V,Out) [V>=0,V1>=0,Out=0] 

### Ranking functions of CR fun64(V1,V,Out) 
* RF of phase [578,579]: [V1]

#### Partial ranking functions of CR fun64(V1,V,Out) 
* Partial RF of phase [578,579]:
  - RF of loop [578:1,579:1]:
    V1
  - RF of loop [579:1]:
    V


### Resulting Chains:fun64(V1,V,Out) 
* [[578,579],580]
* [580]


### Merging Chains  fun64/3 into  External patterns of execution 
* [[580]] --> 1 
* [[580,[578,579]]] --> 2 


### Specialization of cost equations fun65/3 
* CE 350 is refined into CE [713] 
* CE 349 is refined into CE [714] 
* CE 348 is refined into CE [715] 


#### Refined cost equations fun65/3 
* CE 713: fun65(V1,V,Out) = 0
     [V>=0,V1>=0,Out=0] 
* CE 714: fun65(V1,V,Out) = 1+ fun65(W1,V,X1)
     [W1>=0,V>=0,X1+1=Out,W1+1=V1] 
* CE 715: fun65(V1,V,Out) = 1+ fun65(W1,X1,Y1)
     [X1>=0,W1>=0,Y1+1=Out,X1+1=V,W1+1=V1] 

### Cost equations --> "Loop" of fun65/3 
* CEs [714] --> Loop 581 
* CEs [715] --> Loop 582 
* CEs [713] --> Loop 583 

#### Loops of fun65/3 
* Loop 581: fun65(V1,V,Out)->  fun65(V1',V,Out')
                  [V>=0,V1>=1,Out=Out'+1,V1=V1'+1] 
* Loop 582: fun65(V1,V,Out)->  fun65(V1',V',Out')
                  [V>=1,V1>=1,Out=Out'+1,V=V'+1,V1=V1'+1] 
* Loop 583: fun65(V1,V,Out) [V>=0,V1>=0,Out=0] 

### Ranking functions of CR fun65(V1,V,Out) 
* RF of phase [581,582]: [V1]

#### Partial ranking functions of CR fun65(V1,V,Out) 
* Partial RF of phase [581,582]:
  - RF of loop [581:1,582:1]:
    V1
  - RF of loop [582:1]:
    V


### Resulting Chains:fun65(V1,V,Out) 
* [[581,582],583]
* [583]


### Merging Chains  fun65/3 into  External patterns of execution 
* [[583]] --> 1 
* [[583,[581,582]]] --> 2 


### Specialization of cost equations fun66/4 
* CE 353 is refined into CE [716] 
* CE 352 is refined into CE [717] 
* CE 351 is refined into CE [718] 


#### Refined cost equations fun66/4 
* CE 716: fun66(V1,V,V2,Out) = 0
     [V2>=0,V>=0,V1>=0,Out=0] 
* CE 717: fun66(V1,V,V2,Out) = 1+ fun66(W2,V,V2,X2)
     [W2>=0,V2>=0,V>=0,X2+1=Out,W2+1=V1] 
* CE 718: fun66(V1,V,V2,Out) = 1+ fun66(W2,X2,Y2,Z2)
     [Y2>=0,X2>=0,W2>=0,Z2+1=Out,Y2+1=V2,X2+1=V,W2+1=V1] 

### Cost equations --> "Loop" of fun66/4 
* CEs [717] --> Loop 584 
* CEs [718] --> Loop 585 
* CEs [716] --> Loop 586 

#### Loops of fun66/4 
* Loop 584: fun66(V1,V,V2,Out)->  fun66(V1',V,V2,Out')
                  [V2>=0,V>=0,V1>=1,Out=Out'+1,V1=V1'+1] 
* Loop 585: fun66(V1,V,V2,Out)->  fun66(V1',V',V2',Out')
                  [V2>=1,V>=1,V1>=1,Out=Out'+1,V2=V2'+1,V=V'+1,V1=V1'+1] 
* Loop 586: fun66(V1,V,V2,Out) [V2>=0,V>=0,V1>=0,Out=0] 

### Ranking functions of CR fun66(V1,V,V2,Out) 
* RF of phase [584,585]: [V1]

#### Partial ranking functions of CR fun66(V1,V,V2,Out) 
* Partial RF of phase [584,585]:
  - RF of loop [584:1,585:1]:
    V1
  - RF of loop [585:1]:
    V
    V2


### Resulting Chains:fun66(V1,V,V2,Out) 
* [[584,585],586]
* [586]


### Merging Chains  fun66/4 into  External patterns of execution 
* [[586]] --> 1 
* [[586,[584,585]]] --> 2 


### Specialization of cost equations fun67/4 
* CE 356 is refined into CE [719] 
* CE 355 is refined into CE [720] 
* CE 354 is refined into CE [721] 


#### Refined cost equations fun67/4 
* CE 719: fun67(V1,V,V2,Out) = 0
     [V2>=0,V>=0,V1>=0,Out=0] 
* CE 720: fun67(V1,V,V2,Out) = 1+ fun67(W2,V,V2,X2)
     [W2>=0,V2>=0,V>=0,X2+1=Out,W2+1=V1] 
* CE 721: fun67(V1,V,V2,Out) = 1+ fun67(W2,X2,Y2,Z2)
     [Y2>=0,X2>=0,W2>=0,Z2+1=Out,Y2+1=V2,X2+1=V,W2+1=V1] 

### Cost equations --> "Loop" of fun67/4 
* CEs [720] --> Loop 587 
* CEs [721] --> Loop 588 
* CEs [719] --> Loop 589 

#### Loops of fun67/4 
* Loop 587: fun67(V1,V,V2,Out)->  fun67(V1',V,V2,Out')
                  [V2>=0,V>=0,V1>=1,Out=Out'+1,V1=V1'+1] 
* Loop 588: fun67(V1,V,V2,Out)->  fun67(V1',V',V2',Out')
                  [V2>=1,V>=1,V1>=1,Out=Out'+1,V2=V2'+1,V=V'+1,V1=V1'+1] 
* Loop 589: fun67(V1,V,V2,Out) [V2>=0,V>=0,V1>=0,Out=0] 

### Ranking functions of CR fun67(V1,V,V2,Out) 
* RF of phase [587,588]: [V1]

#### Partial ranking functions of CR fun67(V1,V,V2,Out) 
* Partial RF of phase [587,588]:
  - RF of loop [587:1,588:1]:
    V1
  - RF of loop [588:1]:
    V
    V2


### Resulting Chains:fun67(V1,V,V2,Out) 
* [[587,588],589]
* [589]


### Merging Chains  fun67/4 into  External patterns of execution 
* [[589]] --> 1 
* [[589,[587,588]]] --> 2 


### Specialization of cost equations fun68/4 
* CE 359 is refined into CE [722] 
* CE 357 is refined into CE [723] 
* CE 358 is refined into CE [724] 


#### Refined cost equations fun68/4 
* CE 722: fun68(V1,V,V2,Out) = 0
     [V2>=0,V>=0,V1>=0,Out=0] 
* CE 723: fun68(V1,V,V2,Out) = 1+ fun68(W2,V,V2,X2)
     [W2>=0,V2>=0,V>=0,X2+1=Out,W2+1=V1] 
* CE 724: fun68(V1,V,V2,Out) = 1+ fun68(W2,X2,Y2,Z2)
     [Y2>=0,X2>=0,W2>=0,Z2+1=Out,Y2+1=V2,X2+1=V,W2+1=V1] 

### Cost equations --> "Loop" of fun68/4 
* CEs [723] --> Loop 590 
* CEs [724] --> Loop 591 
* CEs [722] --> Loop 592 

#### Loops of fun68/4 
* Loop 590: fun68(V1,V,V2,Out)->  fun68(V1',V,V2,Out')
                  [V2>=0,V>=0,V1>=1,Out=Out'+1,V1=V1'+1] 
* Loop 591: fun68(V1,V,V2,Out)->  fun68(V1',V',V2',Out')
                  [V2>=1,V>=1,V1>=1,Out=Out'+1,V2=V2'+1,V=V'+1,V1=V1'+1] 
* Loop 592: fun68(V1,V,V2,Out) [V2>=0,V>=0,V1>=0,Out=0] 

### Ranking functions of CR fun68(V1,V,V2,Out) 
* RF of phase [590,591]: [V1]

#### Partial ranking functions of CR fun68(V1,V,V2,Out) 
* Partial RF of phase [590,591]:
  - RF of loop [590:1,591:1]:
    V1
  - RF of loop [591:1]:
    V
    V2


### Resulting Chains:fun68(V1,V,V2,Out) 
* [[590,591],592]
* [592]


### Merging Chains  fun68/4 into  External patterns of execution 
* [[592]] --> 1 
* [[592,[590,591]]] --> 2 


### Specialization of cost equations fun69/4 
* CE 364 is refined into CE [725] 
* CE 362 is refined into CE [726] 
* CE 363 is refined into CE [727] 


#### Refined cost equations fun69/4 
* CE 725: fun69(V1,V,V2,Out) = 0
     [V2>=0,V>=0,V1>=0,Out=0] 
* CE 726: fun69(V1,V,V2,Out) = 1+ fun69(W2,V,V2,X2)
     [W2>=0,V2>=0,V>=0,X2+1=Out,W2+1=V1] 
* CE 727: fun69(V1,V,V2,Out) = 1+ fun69(W2,X2,Y2,Z2)
     [Y2>=0,X2>=0,W2>=0,Z2+1=Out,Y2+1=V2,X2+1=V,W2+1=V1] 

### Cost equations --> "Loop" of fun69/4 
* CEs [726] --> Loop 593 
* CEs [727] --> Loop 594 
* CEs [725] --> Loop 595 

#### Loops of fun69/4 
* Loop 593: fun69(V1,V,V2,Out)->  fun69(V1',V,V2,Out')
                  [V2>=0,V>=0,V1>=1,Out=Out'+1,V1=V1'+1] 
* Loop 594: fun69(V1,V,V2,Out)->  fun69(V1',V',V2',Out')
                  [V2>=1,V>=1,V1>=1,Out=Out'+1,V2=V2'+1,V=V'+1,V1=V1'+1] 
* Loop 595: fun69(V1,V,V2,Out) [V2>=0,V>=0,V1>=0,Out=0] 

### Ranking functions of CR fun69(V1,V,V2,Out) 
* RF of phase [593,594]: [V1]

#### Partial ranking functions of CR fun69(V1,V,V2,Out) 
* Partial RF of phase [593,594]:
  - RF of loop [593:1,594:1]:
    V1
  - RF of loop [594:1]:
    V
    V2


### Resulting Chains:fun69(V1,V,V2,Out) 
* [[593,594],595]
* [595]


### Merging Chains  fun69/4 into  External patterns of execution 
* [[595]] --> 1 
* [[595,[593,594]]] --> 2 


### Specialization of cost equations fun7/2 
* CE 157 is refined into CE [728] 
* CE 156 is refined into CE [729] 


#### Refined cost equations fun7/2 
* CE 728: fun7(V1,Out) = 0
     [V1>=0,Out=0] 
* CE 729: fun7(V1,Out) = 1+ fun7(W1,X1)
     [W1>=0,X1+1=Out,W1+1=V1] 

### Cost equations --> "Loop" of fun7/2 
* CEs [729] --> Loop 596 
* CEs [728] --> Loop 597 

#### Loops of fun7/2 
* Loop 596: fun7(V1,Out)->  fun7(V1',Out')
                  [V1'>=0,Out=Out'+1,V1'+1=V1] 
* Loop 597: fun7(V1,Out) [V1>=0,Out=0] 

### Ranking functions of CR fun7(V1,Out) 
* RF of phase [596]: [V1]

#### Partial ranking functions of CR fun7(V1,Out) 
* Partial RF of phase [596]:
  - RF of loop [596:1]:
    V1


### Resulting Chains:fun7(V1,Out) 
* [[596],597]
* [597]


### Merging Chains  fun7/2 into  External patterns of execution 
* [[597]] --> 1 
* [[597,[596]]] --> 2 


### Specialization of cost equations fun70/2 
* CE 366 is refined into CE [730] 
* CE 365 is refined into CE [731] 


#### Refined cost equations fun70/2 
* CE 730: fun70(V1,Out) = 0
     [V1>=0,Out=0] 
* CE 731: fun70(V1,Out) = 1+ fun70(W1,X1)
     [W1>=0,X1+1=Out,W1+1=V1] 

### Cost equations --> "Loop" of fun70/2 
* CEs [731] --> Loop 598 
* CEs [730] --> Loop 599 

#### Loops of fun70/2 
* Loop 598: fun70(V1,Out)->  fun70(V1',Out')
                  [V1'>=0,Out=Out'+1,V1'+1=V1] 
* Loop 599: fun70(V1,Out) [V1>=0,Out=0] 

### Ranking functions of CR fun70(V1,Out) 
* RF of phase [598]: [V1]

#### Partial ranking functions of CR fun70(V1,Out) 
* Partial RF of phase [598]:
  - RF of loop [598:1]:
    V1


### Resulting Chains:fun70(V1,Out) 
* [[598],599]
* [599]


### Merging Chains  fun70/2 into  External patterns of execution 
* [[599]] --> 1 
* [[599,[598]]] --> 2 


### Specialization of cost equations fun71/2 
* CE 368 is refined into CE [732] 
* CE 367 is refined into CE [733] 


#### Refined cost equations fun71/2 
* CE 732: fun71(V1,Out) = 0
     [V1>=0,Out=0] 
* CE 733: fun71(V1,Out) = 1+ fun71(W1,X1)
     [W1>=0,X1+1=Out,W1+1=V1] 

### Cost equations --> "Loop" of fun71/2 
* CEs [733] --> Loop 600 
* CEs [732] --> Loop 601 

#### Loops of fun71/2 
* Loop 600: fun71(V1,Out)->  fun71(V1',Out')
                  [V1'>=0,Out=Out'+1,V1'+1=V1] 
* Loop 601: fun71(V1,Out) [V1>=0,Out=0] 

### Ranking functions of CR fun71(V1,Out) 
* RF of phase [600]: [V1]

#### Partial ranking functions of CR fun71(V1,Out) 
* Partial RF of phase [600]:
  - RF of loop [600:1]:
    V1


### Resulting Chains:fun71(V1,Out) 
* [[600],601]
* [601]


### Merging Chains  fun71/2 into  External patterns of execution 
* [[601]] --> 1 
* [[601,[600]]] --> 2 


### Specialization of cost equations fun72/4 
* CE 371 is refined into CE [734] 
* CE 369 is refined into CE [735] 
* CE 370 is refined into CE [736] 


#### Refined cost equations fun72/4 
* CE 734: fun72(V1,V,V2,Out) = 0
     [V2>=0,V>=0,V1>=0,Out=0] 
* CE 735: fun72(V1,V,V2,Out) = 1+ fun72(W2,V,V2,X2)
     [W2>=0,V2>=0,V>=0,X2+1=Out,W2+1=V1] 
* CE 736: fun72(V1,V,V2,Out) = 1+ fun72(W2,X2,Y2,Z2)
     [Y2>=0,X2>=0,W2>=0,Z2+1=Out,Y2+1=V2,X2+1=V,W2+1=V1] 

### Cost equations --> "Loop" of fun72/4 
* CEs [735] --> Loop 602 
* CEs [736] --> Loop 603 
* CEs [734] --> Loop 604 

#### Loops of fun72/4 
* Loop 602: fun72(V1,V,V2,Out)->  fun72(V1',V,V2,Out')
                  [V2>=0,V>=0,V1>=1,Out=Out'+1,V1=V1'+1] 
* Loop 603: fun72(V1,V,V2,Out)->  fun72(V1',V',V2',Out')
                  [V2>=1,V>=1,V1>=1,Out=Out'+1,V2=V2'+1,V=V'+1,V1=V1'+1] 
* Loop 604: fun72(V1,V,V2,Out) [V2>=0,V>=0,V1>=0,Out=0] 

### Ranking functions of CR fun72(V1,V,V2,Out) 
* RF of phase [602,603]: [V1]

#### Partial ranking functions of CR fun72(V1,V,V2,Out) 
* Partial RF of phase [602,603]:
  - RF of loop [602:1,603:1]:
    V1
  - RF of loop [603:1]:
    V
    V2


### Resulting Chains:fun72(V1,V,V2,Out) 
* [[602,603],604]
* [604]


### Merging Chains  fun72/4 into  External patterns of execution 
* [[604]] --> 1 
* [[604,[602,603]]] --> 2 


### Specialization of cost equations fun73/2 
* CE 377 is refined into CE [737] 
* CE 376 is refined into CE [738] 


#### Refined cost equations fun73/2 
* CE 737: fun73(V1,Out) = 0
     [V1>=0,Out=0] 
* CE 738: fun73(V1,Out) = 1+ fun73(W1,X1)
     [W1>=0,X1+1=Out,W1+1=V1] 

### Cost equations --> "Loop" of fun73/2 
* CEs [738] --> Loop 605 
* CEs [737] --> Loop 606 

#### Loops of fun73/2 
* Loop 605: fun73(V1,Out)->  fun73(V1',Out')
                  [V1'>=0,Out=Out'+1,V1'+1=V1] 
* Loop 606: fun73(V1,Out) [V1>=0,Out=0] 

### Ranking functions of CR fun73(V1,Out) 
* RF of phase [605]: [V1]

#### Partial ranking functions of CR fun73(V1,Out) 
* Partial RF of phase [605]:
  - RF of loop [605:1]:
    V1


### Resulting Chains:fun73(V1,Out) 
* [[605],606]
* [606]


### Merging Chains  fun73/2 into  External patterns of execution 
* [[606]] --> 1 
* [[606,[605]]] --> 2 


### Specialization of cost equations fun74/4 
* CE 380 is refined into CE [739] 
* CE 378 is refined into CE [740] 
* CE 379 is refined into CE [741] 


#### Refined cost equations fun74/4 
* CE 739: fun74(V1,V,V2,Out) = 0
     [V2>=0,V>=0,V1>=0,Out=0] 
* CE 740: fun74(V1,V,V2,Out) = 1+ fun74(W2,V,V2,X2)
     [W2>=0,V2>=0,V>=0,X2+1=Out,W2+1=V1] 
* CE 741: fun74(V1,V,V2,Out) = 1+ fun74(W2,X2,Y2,Z2)
     [Y2>=0,X2>=0,W2>=0,Z2+1=Out,Y2+1=V2,X2+1=V,W2+1=V1] 

### Cost equations --> "Loop" of fun74/4 
* CEs [740] --> Loop 607 
* CEs [741] --> Loop 608 
* CEs [739] --> Loop 609 

#### Loops of fun74/4 
* Loop 607: fun74(V1,V,V2,Out)->  fun74(V1',V,V2,Out')
                  [V2>=0,V>=0,V1>=1,Out=Out'+1,V1=V1'+1] 
* Loop 608: fun74(V1,V,V2,Out)->  fun74(V1',V',V2',Out')
                  [V2>=1,V>=1,V1>=1,Out=Out'+1,V2=V2'+1,V=V'+1,V1=V1'+1] 
* Loop 609: fun74(V1,V,V2,Out) [V2>=0,V>=0,V1>=0,Out=0] 

### Ranking functions of CR fun74(V1,V,V2,Out) 
* RF of phase [607,608]: [V1]

#### Partial ranking functions of CR fun74(V1,V,V2,Out) 
* Partial RF of phase [607,608]:
  - RF of loop [607:1,608:1]:
    V1
  - RF of loop [608:1]:
    V
    V2


### Resulting Chains:fun74(V1,V,V2,Out) 
* [[607,608],609]
* [609]


### Merging Chains  fun74/4 into  External patterns of execution 
* [[609]] --> 1 
* [[609,[607,608]]] --> 2 


### Specialization of cost equations fun75/3 
* CE 383 is refined into CE [742] 
* CE 381 is refined into CE [743] 
* CE 382 is refined into CE [744] 


#### Refined cost equations fun75/3 
* CE 742: fun75(V1,V,Out) = 0
     [V>=0,V1>=0,Out=0] 
* CE 743: fun75(V1,V,Out) = 1+ fun75(W1,V,X1)
     [W1>=0,V>=0,X1+1=Out,W1+1=V1] 
* CE 744: fun75(V1,V,Out) = 1+ fun75(W1,X1,Y1)
     [X1>=0,W1>=0,Y1+1=Out,X1+1=V,W1+1=V1] 

### Cost equations --> "Loop" of fun75/3 
* CEs [743] --> Loop 610 
* CEs [744] --> Loop 611 
* CEs [742] --> Loop 612 

#### Loops of fun75/3 
* Loop 610: fun75(V1,V,Out)->  fun75(V1',V,Out')
                  [V>=0,V1>=1,Out=Out'+1,V1=V1'+1] 
* Loop 611: fun75(V1,V,Out)->  fun75(V1',V',Out')
                  [V>=1,V1>=1,Out=Out'+1,V=V'+1,V1=V1'+1] 
* Loop 612: fun75(V1,V,Out) [V>=0,V1>=0,Out=0] 

### Ranking functions of CR fun75(V1,V,Out) 
* RF of phase [610,611]: [V1]

#### Partial ranking functions of CR fun75(V1,V,Out) 
* Partial RF of phase [610,611]:
  - RF of loop [610:1,611:1]:
    V1
  - RF of loop [611:1]:
    V


### Resulting Chains:fun75(V1,V,Out) 
* [[610,611],612]
* [612]


### Merging Chains  fun75/3 into  External patterns of execution 
* [[612]] --> 1 
* [[612,[610,611]]] --> 2 


### Specialization of cost equations fun76/3 
* CE 386 is refined into CE [745] 
* CE 384 is refined into CE [746] 
* CE 385 is refined into CE [747] 


#### Refined cost equations fun76/3 
* CE 745: fun76(V1,V,Out) = 0
     [V>=0,V1>=0,Out=0] 
* CE 746: fun76(V1,V,Out) = 1+ fun76(W1,V,X1)
     [W1>=0,V>=0,X1+1=Out,W1+1=V1] 
* CE 747: fun76(V1,V,Out) = 1+ fun76(W1,X1,Y1)
     [X1>=0,W1>=0,Y1+1=Out,X1+1=V,W1+1=V1] 

### Cost equations --> "Loop" of fun76/3 
* CEs [746] --> Loop 613 
* CEs [747] --> Loop 614 
* CEs [745] --> Loop 615 

#### Loops of fun76/3 
* Loop 613: fun76(V1,V,Out)->  fun76(V1',V,Out')
                  [V>=0,V1>=1,Out=Out'+1,V1=V1'+1] 
* Loop 614: fun76(V1,V,Out)->  fun76(V1',V',Out')
                  [V>=1,V1>=1,Out=Out'+1,V=V'+1,V1=V1'+1] 
* Loop 615: fun76(V1,V,Out) [V>=0,V1>=0,Out=0] 

### Ranking functions of CR fun76(V1,V,Out) 
* RF of phase [613,614]: [V1]

#### Partial ranking functions of CR fun76(V1,V,Out) 
* Partial RF of phase [613,614]:
  - RF of loop [613:1,614:1]:
    V1
  - RF of loop [614:1]:
    V


### Resulting Chains:fun76(V1,V,Out) 
* [[613,614],615]
* [615]


### Merging Chains  fun76/3 into  External patterns of execution 
* [[615]] --> 1 
* [[615,[613,614]]] --> 2 


### Specialization of cost equations fun77/4 
* CE 389 is refined into CE [748] 
* CE 387 is refined into CE [749] 
* CE 388 is refined into CE [750] 


#### Refined cost equations fun77/4 
* CE 748: fun77(V1,V,V2,Out) = 0
     [V2>=0,V>=0,V1>=0,Out=0] 
* CE 749: fun77(V1,V,V2,Out) = 1+ fun77(W2,V,V2,X2)
     [W2>=0,V2>=0,V>=0,X2+1=Out,W2+1=V1] 
* CE 750: fun77(V1,V,V2,Out) = 1+ fun77(W2,X2,Y2,Z2)
     [Y2>=0,X2>=0,W2>=0,Z2+1=Out,Y2+1=V2,X2+1=V,W2+1=V1] 

### Cost equations --> "Loop" of fun77/4 
* CEs [749] --> Loop 616 
* CEs [750] --> Loop 617 
* CEs [748] --> Loop 618 

#### Loops of fun77/4 
* Loop 616: fun77(V1,V,V2,Out)->  fun77(V1',V,V2,Out')
                  [V2>=0,V>=0,V1>=1,Out=Out'+1,V1=V1'+1] 
* Loop 617: fun77(V1,V,V2,Out)->  fun77(V1',V',V2',Out')
                  [V2>=1,V>=1,V1>=1,Out=Out'+1,V2=V2'+1,V=V'+1,V1=V1'+1] 
* Loop 618: fun77(V1,V,V2,Out) [V2>=0,V>=0,V1>=0,Out=0] 

### Ranking functions of CR fun77(V1,V,V2,Out) 
* RF of phase [616,617]: [V1]

#### Partial ranking functions of CR fun77(V1,V,V2,Out) 
* Partial RF of phase [616,617]:
  - RF of loop [616:1,617:1]:
    V1
  - RF of loop [617:1]:
    V
    V2


### Resulting Chains:fun77(V1,V,V2,Out) 
* [[616,617],618]
* [618]


### Merging Chains  fun77/4 into  External patterns of execution 
* [[618]] --> 1 
* [[618,[616,617]]] --> 2 


### Specialization of cost equations fun78/2 
* CE 391 is refined into CE [751] 
* CE 390 is refined into CE [752] 


#### Refined cost equations fun78/2 
* CE 751: fun78(V1,Out) = 0
     [V1>=0,Out=0] 
* CE 752: fun78(V1,Out) = 1+ fun78(W1,X1)
     [W1>=0,X1+1=Out,W1+1=V1] 

### Cost equations --> "Loop" of fun78/2 
* CEs [752] --> Loop 619 
* CEs [751] --> Loop 620 

#### Loops of fun78/2 
* Loop 619: fun78(V1,Out)->  fun78(V1',Out')
                  [V1'>=0,Out=Out'+1,V1'+1=V1] 
* Loop 620: fun78(V1,Out) [V1>=0,Out=0] 

### Ranking functions of CR fun78(V1,Out) 
* RF of phase [619]: [V1]

#### Partial ranking functions of CR fun78(V1,Out) 
* Partial RF of phase [619]:
  - RF of loop [619:1]:
    V1


### Resulting Chains:fun78(V1,Out) 
* [[619],620]
* [620]


### Merging Chains  fun78/2 into  External patterns of execution 
* [[620]] --> 1 
* [[620,[619]]] --> 2 


### Specialization of cost equations fun79/3 
* CE 394 is refined into CE [753] 
* CE 392 is refined into CE [754] 
* CE 393 is refined into CE [755] 


#### Refined cost equations fun79/3 
* CE 753: fun79(V1,V,Out) = 0
     [V>=0,V1>=0,Out=0] 
* CE 754: fun79(V1,V,Out) = 1+ fun79(W1,V,X1)
     [W1>=0,V>=0,X1+1=Out,W1+1=V1] 
* CE 755: fun79(V1,V,Out) = 1+ fun79(W1,X1,Y1)
     [X1>=0,W1>=0,Y1+1=Out,X1+1=V,W1+1=V1] 

### Cost equations --> "Loop" of fun79/3 
* CEs [754] --> Loop 621 
* CEs [755] --> Loop 622 
* CEs [753] --> Loop 623 

#### Loops of fun79/3 
* Loop 621: fun79(V1,V,Out)->  fun79(V1',V,Out')
                  [V>=0,V1>=1,Out=Out'+1,V1=V1'+1] 
* Loop 622: fun79(V1,V,Out)->  fun79(V1',V',Out')
                  [V>=1,V1>=1,Out=Out'+1,V=V'+1,V1=V1'+1] 
* Loop 623: fun79(V1,V,Out) [V>=0,V1>=0,Out=0] 

### Ranking functions of CR fun79(V1,V,Out) 
* RF of phase [621,622]: [V1]

#### Partial ranking functions of CR fun79(V1,V,Out) 
* Partial RF of phase [621,622]:
  - RF of loop [621:1,622:1]:
    V1
  - RF of loop [622:1]:
    V


### Resulting Chains:fun79(V1,V,Out) 
* [[621,622],623]
* [623]


### Merging Chains  fun79/3 into  External patterns of execution 
* [[623]] --> 1 
* [[623,[621,622]]] --> 2 


### Specialization of cost equations fun8/2 
* CE 159 is refined into CE [756] 
* CE 158 is refined into CE [757] 


#### Refined cost equations fun8/2 
* CE 756: fun8(V1,Out) = 0
     [V1>=0,Out=0] 
* CE 757: fun8(V1,Out) = 1+ fun8(W1,X1)
     [W1>=0,X1+1=Out,W1+1=V1] 

### Cost equations --> "Loop" of fun8/2 
* CEs [757] --> Loop 624 
* CEs [756] --> Loop 625 

#### Loops of fun8/2 
* Loop 624: fun8(V1,Out)->  fun8(V1',Out')
                  [V1'>=0,Out=Out'+1,V1'+1=V1] 
* Loop 625: fun8(V1,Out) [V1>=0,Out=0] 

### Ranking functions of CR fun8(V1,Out) 
* RF of phase [624]: [V1]

#### Partial ranking functions of CR fun8(V1,Out) 
* Partial RF of phase [624]:
  - RF of loop [624:1]:
    V1


### Resulting Chains:fun8(V1,Out) 
* [[624],625]
* [625]


### Merging Chains  fun8/2 into  External patterns of execution 
* [[625]] --> 1 
* [[625,[624]]] --> 2 


### Specialization of cost equations fun80/5 
* CE 397 is refined into CE [758] 
* CE 396 is refined into CE [759] 
* CE 395 is refined into CE [760] 


#### Refined cost equations fun80/5 
* CE 758: fun80(V1,V,V2,V3,Out) = 0
     [V3>=0,V2>=0,V>=0,V1>=0,Out=0] 
* CE 759: fun80(V1,V,V2,V3,Out) = 1+ fun80(W3,V,V2,V3,X3)
     [W3>=0,V3>=0,V2>=0,V>=0,X3+1=Out,W3+1=V1] 
* CE 760: fun80(V1,V,V2,V3,Out) = 1+ fun80(W3,X3,Y3,Z3,A4)
     [Z3>=0,Y3>=0,X3>=0,W3>=0,A4+1=Out,Z3+1=V3,Y3+1=V2,X3+1=V,W3+1=V1] 

### Cost equations --> "Loop" of fun80/5 
* CEs [759] --> Loop 626 
* CEs [760] --> Loop 627 
* CEs [758] --> Loop 628 

#### Loops of fun80/5 
* Loop 626: fun80(V1,V,V2,V3,Out)->  fun80(V1',V,V2,V3,Out')
                  [V3>=0,V2>=0,V>=0,V1>=1,Out=Out'+1,V1=V1'+1] 
* Loop 627: fun80(V1,V,V2,V3,Out)->  fun80(V1',V',V2',V3',Out')
                  [V3>=1,V2>=1,V>=1,V1>=1,Out=Out'+1,V3=V3'+1,V2=V2'+1,V=V'+1,V1=V1'+1] 
* Loop 628: fun80(V1,V,V2,V3,Out) [V3>=0,V2>=0,V>=0,V1>=0,Out=0] 

### Ranking functions of CR fun80(V1,V,V2,V3,Out) 
* RF of phase [626,627]: [V1]

#### Partial ranking functions of CR fun80(V1,V,V2,V3,Out) 
* Partial RF of phase [626,627]:
  - RF of loop [626:1,627:1]:
    V1
  - RF of loop [627:1]:
    V
    V2
    V3


### Resulting Chains:fun80(V1,V,V2,V3,Out) 
* [[626,627],628]
* [628]


### Merging Chains  fun80/5 into  External patterns of execution 
* [[628]] --> 1 
* [[628,[626,627]]] --> 2 


### Specialization of cost equations fun81/4 
* CE 400 is refined into CE [761] 
* CE 398 is refined into CE [762] 
* CE 399 is refined into CE [763] 


#### Refined cost equations fun81/4 
* CE 761: fun81(V1,V,V2,Out) = 0
     [V2>=0,V>=0,V1>=0,Out=0] 
* CE 762: fun81(V1,V,V2,Out) = 1+ fun81(W2,V,V2,X2)
     [W2>=0,V2>=0,V>=0,X2+1=Out,W2+1=V1] 
* CE 763: fun81(V1,V,V2,Out) = 1+ fun81(W2,X2,Y2,Z2)
     [Y2>=0,X2>=0,W2>=0,Z2+1=Out,Y2+1=V2,X2+1=V,W2+1=V1] 

### Cost equations --> "Loop" of fun81/4 
* CEs [762] --> Loop 629 
* CEs [763] --> Loop 630 
* CEs [761] --> Loop 631 

#### Loops of fun81/4 
* Loop 629: fun81(V1,V,V2,Out)->  fun81(V1',V,V2,Out')
                  [V2>=0,V>=0,V1>=1,Out=Out'+1,V1=V1'+1] 
* Loop 630: fun81(V1,V,V2,Out)->  fun81(V1',V',V2',Out')
                  [V2>=1,V>=1,V1>=1,Out=Out'+1,V2=V2'+1,V=V'+1,V1=V1'+1] 
* Loop 631: fun81(V1,V,V2,Out) [V2>=0,V>=0,V1>=0,Out=0] 

### Ranking functions of CR fun81(V1,V,V2,Out) 
* RF of phase [629,630]: [V1]

#### Partial ranking functions of CR fun81(V1,V,V2,Out) 
* Partial RF of phase [629,630]:
  - RF of loop [629:1,630:1]:
    V1
  - RF of loop [630:1]:
    V
    V2


### Resulting Chains:fun81(V1,V,V2,Out) 
* [[629,630],631]
* [631]


### Merging Chains  fun81/4 into  External patterns of execution 
* [[631]] --> 1 
* [[631,[629,630]]] --> 2 


### Specialization of cost equations fun82/4 
* CE 403 is refined into CE [764] 
* CE 401 is refined into CE [765] 
* CE 402 is refined into CE [766] 


#### Refined cost equations fun82/4 
* CE 764: fun82(V1,V,V2,Out) = 0
     [V2>=0,V>=0,V1>=0,Out=0] 
* CE 765: fun82(V1,V,V2,Out) = 1+ fun82(W2,V,V2,X2)
     [W2>=0,V2>=0,V>=0,X2+1=Out,W2+1=V1] 
* CE 766: fun82(V1,V,V2,Out) = 1+ fun82(W2,X2,Y2,Z2)
     [Y2>=0,X2>=0,W2>=0,Z2+1=Out,Y2+1=V2,X2+1=V,W2+1=V1] 

### Cost equations --> "Loop" of fun82/4 
* CEs [765] --> Loop 632 
* CEs [766] --> Loop 633 
* CEs [764] --> Loop 634 

#### Loops of fun82/4 
* Loop 632: fun82(V1,V,V2,Out)->  fun82(V1',V,V2,Out')
                  [V2>=0,V>=0,V1>=1,Out=Out'+1,V1=V1'+1] 
* Loop 633: fun82(V1,V,V2,Out)->  fun82(V1',V',V2',Out')
                  [V2>=1,V>=1,V1>=1,Out=Out'+1,V2=V2'+1,V=V'+1,V1=V1'+1] 
* Loop 634: fun82(V1,V,V2,Out) [V2>=0,V>=0,V1>=0,Out=0] 

### Ranking functions of CR fun82(V1,V,V2,Out) 
* RF of phase [632,633]: [V1]

#### Partial ranking functions of CR fun82(V1,V,V2,Out) 
* Partial RF of phase [632,633]:
  - RF of loop [632:1,633:1]:
    V1
  - RF of loop [633:1]:
    V
    V2


### Resulting Chains:fun82(V1,V,V2,Out) 
* [[632,633],634]
* [634]


### Merging Chains  fun82/4 into  External patterns of execution 
* [[634]] --> 1 
* [[634,[632,633]]] --> 2 


### Specialization of cost equations fun83/3 
* CE 406 is refined into CE [767] 
* CE 405 is refined into CE [768] 
* CE 404 is refined into CE [769] 


#### Refined cost equations fun83/3 
* CE 767: fun83(V1,V,Out) = 0
     [V>=0,V1>=0,Out=0] 
* CE 768: fun83(V1,V,Out) = 1+ fun83(W1,V,X1)
     [W1>=0,V>=0,X1+1=Out,W1+1=V1] 
* CE 769: fun83(V1,V,Out) = 1+ fun83(W1,X1,Y1)
     [X1>=0,W1>=0,Y1+1=Out,X1+1=V,W1+1=V1] 

### Cost equations --> "Loop" of fun83/3 
* CEs [768] --> Loop 635 
* CEs [769] --> Loop 636 
* CEs [767] --> Loop 637 

#### Loops of fun83/3 
* Loop 635: fun83(V1,V,Out)->  fun83(V1',V,Out')
                  [V>=0,V1>=1,Out=Out'+1,V1=V1'+1] 
* Loop 636: fun83(V1,V,Out)->  fun83(V1',V',Out')
                  [V>=1,V1>=1,Out=Out'+1,V=V'+1,V1=V1'+1] 
* Loop 637: fun83(V1,V,Out) [V>=0,V1>=0,Out=0] 

### Ranking functions of CR fun83(V1,V,Out) 
* RF of phase [635,636]: [V1]

#### Partial ranking functions of CR fun83(V1,V,Out) 
* Partial RF of phase [635,636]:
  - RF of loop [635:1,636:1]:
    V1
  - RF of loop [636:1]:
    V


### Resulting Chains:fun83(V1,V,Out) 
* [[635,636],637]
* [637]


### Merging Chains  fun83/3 into  External patterns of execution 
* [[637]] --> 1 
* [[637,[635,636]]] --> 2 


### Specialization of cost equations fun84/4 
* CE 409 is refined into CE [770] 
* CE 407 is refined into CE [771] 
* CE 408 is refined into CE [772] 


#### Refined cost equations fun84/4 
* CE 770: fun84(V1,V,V2,Out) = 0
     [V2>=0,V>=0,V1>=0,Out=0] 
* CE 771: fun84(V1,V,V2,Out) = 1+ fun84(W2,V,V2,X2)
     [W2>=0,V2>=0,V>=0,X2+1=Out,W2+1=V1] 
* CE 772: fun84(V1,V,V2,Out) = 1+ fun84(W2,X2,Y2,Z2)
     [Y2>=0,X2>=0,W2>=0,Z2+1=Out,Y2+1=V2,X2+1=V,W2+1=V1] 

### Cost equations --> "Loop" of fun84/4 
* CEs [771] --> Loop 638 
* CEs [772] --> Loop 639 
* CEs [770] --> Loop 640 

#### Loops of fun84/4 
* Loop 638: fun84(V1,V,V2,Out)->  fun84(V1',V,V2,Out')
                  [V2>=0,V>=0,V1>=1,Out=Out'+1,V1=V1'+1] 
* Loop 639: fun84(V1,V,V2,Out)->  fun84(V1',V',V2',Out')
                  [V2>=1,V>=1,V1>=1,Out=Out'+1,V2=V2'+1,V=V'+1,V1=V1'+1] 
* Loop 640: fun84(V1,V,V2,Out) [V2>=0,V>=0,V1>=0,Out=0] 

### Ranking functions of CR fun84(V1,V,V2,Out) 
* RF of phase [638,639]: [V1]

#### Partial ranking functions of CR fun84(V1,V,V2,Out) 
* Partial RF of phase [638,639]:
  - RF of loop [638:1,639:1]:
    V1
  - RF of loop [639:1]:
    V
    V2


### Resulting Chains:fun84(V1,V,V2,Out) 
* [[638,639],640]
* [640]


### Merging Chains  fun84/4 into  External patterns of execution 
* [[640]] --> 1 
* [[640,[638,639]]] --> 2 


### Specialization of cost equations fun85/4 
* CE 412 is refined into CE [773] 
* CE 410 is refined into CE [774] 
* CE 411 is refined into CE [775] 


#### Refined cost equations fun85/4 
* CE 773: fun85(V1,V,V2,Out) = 0
     [V2>=0,V>=0,V1>=0,Out=0] 
* CE 774: fun85(V1,V,V2,Out) = 1+ fun85(W2,V,V2,X2)
     [W2>=0,V2>=0,V>=0,X2+1=Out,W2+1=V1] 
* CE 775: fun85(V1,V,V2,Out) = 1+ fun85(W2,X2,Y2,Z2)
     [Y2>=0,X2>=0,W2>=0,Z2+1=Out,Y2+1=V2,X2+1=V,W2+1=V1] 

### Cost equations --> "Loop" of fun85/4 
* CEs [774] --> Loop 641 
* CEs [775] --> Loop 642 
* CEs [773] --> Loop 643 

#### Loops of fun85/4 
* Loop 641: fun85(V1,V,V2,Out)->  fun85(V1',V,V2,Out')
                  [V2>=0,V>=0,V1>=1,Out=Out'+1,V1=V1'+1] 
* Loop 642: fun85(V1,V,V2,Out)->  fun85(V1',V',V2',Out')
                  [V2>=1,V>=1,V1>=1,Out=Out'+1,V2=V2'+1,V=V'+1,V1=V1'+1] 
* Loop 643: fun85(V1,V,V2,Out) [V2>=0,V>=0,V1>=0,Out=0] 

### Ranking functions of CR fun85(V1,V,V2,Out) 
* RF of phase [641,642]: [V1]

#### Partial ranking functions of CR fun85(V1,V,V2,Out) 
* Partial RF of phase [641,642]:
  - RF of loop [641:1,642:1]:
    V1
  - RF of loop [642:1]:
    V
    V2


### Resulting Chains:fun85(V1,V,V2,Out) 
* [[641,642],643]
* [643]


### Merging Chains  fun85/4 into  External patterns of execution 
* [[643]] --> 1 
* [[643,[641,642]]] --> 2 


### Specialization of cost equations fun86/3 
* CE 415 is refined into CE [776] 
* CE 414 is refined into CE [777] 
* CE 413 is refined into CE [778] 


#### Refined cost equations fun86/3 
* CE 776: fun86(V1,V,Out) = 0
     [V>=0,V1>=0,Out=0] 
* CE 777: fun86(V1,V,Out) = 1+ fun86(W1,V,X1)
     [W1>=0,V>=0,X1+1=Out,W1+1=V1] 
* CE 778: fun86(V1,V,Out) = 1+ fun86(W1,X1,Y1)
     [X1>=0,W1>=0,Y1+1=Out,X1+1=V,W1+1=V1] 

### Cost equations --> "Loop" of fun86/3 
* CEs [777] --> Loop 644 
* CEs [778] --> Loop 645 
* CEs [776] --> Loop 646 

#### Loops of fun86/3 
* Loop 644: fun86(V1,V,Out)->  fun86(V1',V,Out')
                  [V>=0,V1>=1,Out=Out'+1,V1=V1'+1] 
* Loop 645: fun86(V1,V,Out)->  fun86(V1',V',Out')
                  [V>=1,V1>=1,Out=Out'+1,V=V'+1,V1=V1'+1] 
* Loop 646: fun86(V1,V,Out) [V>=0,V1>=0,Out=0] 

### Ranking functions of CR fun86(V1,V,Out) 
* RF of phase [644,645]: [V1]

#### Partial ranking functions of CR fun86(V1,V,Out) 
* Partial RF of phase [644,645]:
  - RF of loop [644:1,645:1]:
    V1
  - RF of loop [645:1]:
    V


### Resulting Chains:fun86(V1,V,Out) 
* [[644,645],646]
* [646]


### Merging Chains  fun86/3 into  External patterns of execution 
* [[646]] --> 1 
* [[646,[644,645]]] --> 2 


### Specialization of cost equations fun87/4 
* CE 424 is refined into CE [779] 
* CE 422 is refined into CE [780] 
* CE 423 is refined into CE [781] 


#### Refined cost equations fun87/4 
* CE 779: fun87(V1,V,V2,Out) = 0
     [V2>=0,V>=0,V1>=0,Out=0] 
* CE 780: fun87(V1,V,V2,Out) = 1+ fun87(W2,V,V2,X2)
     [W2>=0,V2>=0,V>=0,X2+1=Out,W2+1=V1] 
* CE 781: fun87(V1,V,V2,Out) = 1+ fun87(W2,X2,Y2,Z2)
     [Y2>=0,X2>=0,W2>=0,Z2+1=Out,Y2+1=V2,X2+1=V,W2+1=V1] 

### Cost equations --> "Loop" of fun87/4 
* CEs [780] --> Loop 647 
* CEs [781] --> Loop 648 
* CEs [779] --> Loop 649 

#### Loops of fun87/4 
* Loop 647: fun87(V1,V,V2,Out)->  fun87(V1',V,V2,Out')
                  [V2>=0,V>=0,V1>=1,Out=Out'+1,V1=V1'+1] 
* Loop 648: fun87(V1,V,V2,Out)->  fun87(V1',V',V2',Out')
                  [V2>=1,V>=1,V1>=1,Out=Out'+1,V2=V2'+1,V=V'+1,V1=V1'+1] 
* Loop 649: fun87(V1,V,V2,Out) [V2>=0,V>=0,V1>=0,Out=0] 

### Ranking functions of CR fun87(V1,V,V2,Out) 
* RF of phase [647,648]: [V1]

#### Partial ranking functions of CR fun87(V1,V,V2,Out) 
* Partial RF of phase [647,648]:
  - RF of loop [647:1,648:1]:
    V1
  - RF of loop [648:1]:
    V
    V2


### Resulting Chains:fun87(V1,V,V2,Out) 
* [[647,648],649]
* [649]


### Merging Chains  fun87/4 into  External patterns of execution 
* [[649]] --> 1 
* [[649,[647,648]]] --> 2 


### Specialization of cost equations fun88/3 
* CE 427 is refined into CE [782] 
* CE 425 is refined into CE [783] 
* CE 426 is refined into CE [784] 


#### Refined cost equations fun88/3 
* CE 782: fun88(V1,V,Out) = 0
     [V>=0,V1>=0,Out=0] 
* CE 783: fun88(V1,V,Out) = 1+ fun88(W1,V,X1)
     [W1>=0,V>=0,X1+1=Out,W1+1=V1] 
* CE 784: fun88(V1,V,Out) = 1+ fun88(W1,X1,Y1)
     [X1>=0,W1>=0,Y1+1=Out,X1+1=V,W1+1=V1] 

### Cost equations --> "Loop" of fun88/3 
* CEs [783] --> Loop 650 
* CEs [784] --> Loop 651 
* CEs [782] --> Loop 652 

#### Loops of fun88/3 
* Loop 650: fun88(V1,V,Out)->  fun88(V1',V,Out')
                  [V>=0,V1>=1,Out=Out'+1,V1=V1'+1] 
* Loop 651: fun88(V1,V,Out)->  fun88(V1',V',Out')
                  [V>=1,V1>=1,Out=Out'+1,V=V'+1,V1=V1'+1] 
* Loop 652: fun88(V1,V,Out) [V>=0,V1>=0,Out=0] 

### Ranking functions of CR fun88(V1,V,Out) 
* RF of phase [650,651]: [V1]

#### Partial ranking functions of CR fun88(V1,V,Out) 
* Partial RF of phase [650,651]:
  - RF of loop [650:1,651:1]:
    V1
  - RF of loop [651:1]:
    V


### Resulting Chains:fun88(V1,V,Out) 
* [[650,651],652]
* [652]


### Merging Chains  fun88/3 into  External patterns of execution 
* [[652]] --> 1 
* [[652,[650,651]]] --> 2 


### Specialization of cost equations fun89/4 
* CE 430 is refined into CE [785] 
* CE 429 is refined into CE [786] 
* CE 428 is refined into CE [787] 


#### Refined cost equations fun89/4 
* CE 785: fun89(V1,V,V2,Out) = 0
     [V2>=0,V>=0,V1>=0,Out=0] 
* CE 786: fun89(V1,V,V2,Out) = 1+ fun89(W2,V,V2,X2)
     [W2>=0,V2>=0,V>=0,X2+1=Out,W2+1=V1] 
* CE 787: fun89(V1,V,V2,Out) = 1+ fun89(W2,X2,Y2,Z2)
     [Y2>=0,X2>=0,W2>=0,Z2+1=Out,Y2+1=V2,X2+1=V,W2+1=V1] 

### Cost equations --> "Loop" of fun89/4 
* CEs [786] --> Loop 653 
* CEs [787] --> Loop 654 
* CEs [785] --> Loop 655 

#### Loops of fun89/4 
* Loop 653: fun89(V1,V,V2,Out)->  fun89(V1',V,V2,Out')
                  [V2>=0,V>=0,V1>=1,Out=Out'+1,V1=V1'+1] 
* Loop 654: fun89(V1,V,V2,Out)->  fun89(V1',V',V2',Out')
                  [V2>=1,V>=1,V1>=1,Out=Out'+1,V2=V2'+1,V=V'+1,V1=V1'+1] 
* Loop 655: fun89(V1,V,V2,Out) [V2>=0,V>=0,V1>=0,Out=0] 

### Ranking functions of CR fun89(V1,V,V2,Out) 
* RF of phase [653,654]: [V1]

#### Partial ranking functions of CR fun89(V1,V,V2,Out) 
* Partial RF of phase [653,654]:
  - RF of loop [653:1,654:1]:
    V1
  - RF of loop [654:1]:
    V
    V2


### Resulting Chains:fun89(V1,V,V2,Out) 
* [[653,654],655]
* [655]


### Merging Chains  fun89/4 into  External patterns of execution 
* [[655]] --> 1 
* [[655,[653,654]]] --> 2 


### Specialization of cost equations fun9/3 
* CE 162 is refined into CE [788] 
* CE 161 is refined into CE [789] 
* CE 160 is refined into CE [790] 


#### Refined cost equations fun9/3 
* CE 788: fun9(V1,V,Out) = 0
     [V>=0,V1>=0,Out=0] 
* CE 789: fun9(V1,V,Out) = 1+ fun9(W1,V,X1)
     [W1>=0,V>=0,X1+1=Out,W1+1=V1] 
* CE 790: fun9(V1,V,Out) = 1+ fun9(W1,X1,Y1)
     [X1>=0,W1>=0,Y1+1=Out,X1+1=V,W1+1=V1] 

### Cost equations --> "Loop" of fun9/3 
* CEs [789] --> Loop 656 
* CEs [790] --> Loop 657 
* CEs [788] --> Loop 658 

#### Loops of fun9/3 
* Loop 656: fun9(V1,V,Out)->  fun9(V1',V,Out')
                  [V>=0,V1>=1,Out=Out'+1,V1=V1'+1] 
* Loop 657: fun9(V1,V,Out)->  fun9(V1',V',Out')
                  [V>=1,V1>=1,Out=Out'+1,V=V'+1,V1=V1'+1] 
* Loop 658: fun9(V1,V,Out) [V>=0,V1>=0,Out=0] 

### Ranking functions of CR fun9(V1,V,Out) 
* RF of phase [656,657]: [V1]

#### Partial ranking functions of CR fun9(V1,V,Out) 
* Partial RF of phase [656,657]:
  - RF of loop [656:1,657:1]:
    V1
  - RF of loop [657:1]:
    V


### Resulting Chains:fun9(V1,V,Out) 
* [[656,657],658]
* [658]


### Merging Chains  fun9/3 into  External patterns of execution 
* [[658]] --> 1 
* [[658,[656,657]]] --> 2 


### Specialization of cost equations fun90/2 
* CE 432 is refined into CE [791] 
* CE 431 is refined into CE [792] 


#### Refined cost equations fun90/2 
* CE 791: fun90(V1,Out) = 0
     [V1>=0,Out=0] 
* CE 792: fun90(V1,Out) = 1+ fun90(W1,X1)
     [W1>=0,X1+1=Out,W1+1=V1] 

### Cost equations --> "Loop" of fun90/2 
* CEs [792] --> Loop 659 
* CEs [791] --> Loop 660 

#### Loops of fun90/2 
* Loop 659: fun90(V1,Out)->  fun90(V1',Out')
                  [V1'>=0,Out=Out'+1,V1'+1=V1] 
* Loop 660: fun90(V1,Out) [V1>=0,Out=0] 

### Ranking functions of CR fun90(V1,Out) 
* RF of phase [659]: [V1]

#### Partial ranking functions of CR fun90(V1,Out) 
* Partial RF of phase [659]:
  - RF of loop [659:1]:
    V1


### Resulting Chains:fun90(V1,Out) 
* [[659],660]
* [660]


### Merging Chains  fun90/2 into  External patterns of execution 
* [[660]] --> 1 
* [[660,[659]]] --> 2 


### Specialization of cost equations fun91/2 
* CE 436 is refined into CE [793] 
* CE 435 is refined into CE [794] 


#### Refined cost equations fun91/2 
* CE 793: fun91(V1,Out) = 0
     [V1>=0,Out=0] 
* CE 794: fun91(V1,Out) = 1+ fun91(W1,X1)
     [W1>=0,X1+1=Out,W1+1=V1] 

### Cost equations --> "Loop" of fun91/2 
* CEs [794] --> Loop 661 
* CEs [793] --> Loop 662 

#### Loops of fun91/2 
* Loop 661: fun91(V1,Out)->  fun91(V1',Out')
                  [V1'>=0,Out=Out'+1,V1'+1=V1] 
* Loop 662: fun91(V1,Out) [V1>=0,Out=0] 

### Ranking functions of CR fun91(V1,Out) 
* RF of phase [661]: [V1]

#### Partial ranking functions of CR fun91(V1,Out) 
* Partial RF of phase [661]:
  - RF of loop [661:1]:
    V1


### Resulting Chains:fun91(V1,Out) 
* [[661],662]
* [662]


### Merging Chains  fun91/2 into  External patterns of execution 
* [[662]] --> 1 
* [[662,[661]]] --> 2 


### Specialization of cost equations fun92/2 
* CE 438 is refined into CE [795] 
* CE 437 is refined into CE [796] 


#### Refined cost equations fun92/2 
* CE 795: fun92(V1,Out) = 0
     [V1>=0,Out=0] 
* CE 796: fun92(V1,Out) = 1+ fun92(W1,X1)
     [W1>=0,X1+1=Out,W1+1=V1] 

### Cost equations --> "Loop" of fun92/2 
* CEs [796] --> Loop 663 
* CEs [795] --> Loop 664 

#### Loops of fun92/2 
* Loop 663: fun92(V1,Out)->  fun92(V1',Out')
                  [V1'>=0,Out=Out'+1,V1'+1=V1] 
* Loop 664: fun92(V1,Out) [V1>=0,Out=0] 

### Ranking functions of CR fun92(V1,Out) 
* RF of phase [663]: [V1]

#### Partial ranking functions of CR fun92(V1,Out) 
* Partial RF of phase [663]:
  - RF of loop [663:1]:
    V1


### Resulting Chains:fun92(V1,Out) 
* [[663],664]
* [664]


### Merging Chains  fun92/2 into  External patterns of execution 
* [[664]] --> 1 
* [[664,[663]]] --> 2 


### Specialization of cost equations fun93/2 
* CE 446 is refined into CE [797] 
* CE 445 is refined into CE [798] 


#### Refined cost equations fun93/2 
* CE 797: fun93(V1,Out) = 0
     [V1>=0,Out=0] 
* CE 798: fun93(V1,Out) = 1+ fun93(W1,X1)
     [W1>=0,X1+1=Out,W1+1=V1] 

### Cost equations --> "Loop" of fun93/2 
* CEs [798] --> Loop 665 
* CEs [797] --> Loop 666 

#### Loops of fun93/2 
* Loop 665: fun93(V1,Out)->  fun93(V1',Out')
                  [V1'>=0,Out=Out'+1,V1'+1=V1] 
* Loop 666: fun93(V1,Out) [V1>=0,Out=0] 

### Ranking functions of CR fun93(V1,Out) 
* RF of phase [665]: [V1]

#### Partial ranking functions of CR fun93(V1,Out) 
* Partial RF of phase [665]:
  - RF of loop [665:1]:
    V1


### Resulting Chains:fun93(V1,Out) 
* [[665],666]
* [666]


### Merging Chains  fun93/2 into  External patterns of execution 
* [[666]] --> 1 
* [[666,[665]]] --> 2 


### Specialization of cost equations fun94/2 
* CE 448 is refined into CE [799] 
* CE 447 is refined into CE [800] 


#### Refined cost equations fun94/2 
* CE 799: fun94(V1,Out) = 0
     [V1>=0,Out=0] 
* CE 800: fun94(V1,Out) = 1+ fun94(W1,X1)
     [W1>=0,X1+1=Out,W1+1=V1] 

### Cost equations --> "Loop" of fun94/2 
* CEs [800] --> Loop 667 
* CEs [799] --> Loop 668 

#### Loops of fun94/2 
* Loop 667: fun94(V1,Out)->  fun94(V1',Out')
                  [V1'>=0,Out=Out'+1,V1'+1=V1] 
* Loop 668: fun94(V1,Out) [V1>=0,Out=0] 

### Ranking functions of CR fun94(V1,Out) 
* RF of phase [667]: [V1]

#### Partial ranking functions of CR fun94(V1,Out) 
* Partial RF of phase [667]:
  - RF of loop [667:1]:
    V1


### Resulting Chains:fun94(V1,Out) 
* [[667],668]
* [668]


### Merging Chains  fun94/2 into  External patterns of execution 
* [[668]] --> 1 
* [[668,[667]]] --> 2 


### Specialization of cost equations fun95/5 
* CE 451 is refined into CE [801] 
* CE 449 is refined into CE [802] 
* CE 450 is refined into CE [803] 


#### Refined cost equations fun95/5 
* CE 801: fun95(V1,V,V2,V3,Out) = 0
     [V3>=0,V2>=0,V>=0,V1>=0,Out=0] 
* CE 802: fun95(V1,V,V2,V3,Out) = 1+ fun95(W3,V,V2,V3,X3)
     [W3>=0,V3>=0,V2>=0,V>=0,X3+1=Out,W3+1=V1] 
* CE 803: fun95(V1,V,V2,V3,Out) = 1+ fun95(W3,X3,Y3,Z3,A4)
     [Z3>=0,Y3>=0,X3>=0,W3>=0,A4+1=Out,Z3+1=V3,Y3+1=V2,X3+1=V,W3+1=V1] 

### Cost equations --> "Loop" of fun95/5 
* CEs [802] --> Loop 669 
* CEs [803] --> Loop 670 
* CEs [801] --> Loop 671 

#### Loops of fun95/5 
* Loop 669: fun95(V1,V,V2,V3,Out)->  fun95(V1',V,V2,V3,Out')
                  [V3>=0,V2>=0,V>=0,V1>=1,Out=Out'+1,V1=V1'+1] 
* Loop 670: fun95(V1,V,V2,V3,Out)->  fun95(V1',V',V2',V3',Out')
                  [V3>=1,V2>=1,V>=1,V1>=1,Out=Out'+1,V3=V3'+1,V2=V2'+1,V=V'+1,V1=V1'+1] 
* Loop 671: fun95(V1,V,V2,V3,Out) [V3>=0,V2>=0,V>=0,V1>=0,Out=0] 

### Ranking functions of CR fun95(V1,V,V2,V3,Out) 
* RF of phase [669,670]: [V1]

#### Partial ranking functions of CR fun95(V1,V,V2,V3,Out) 
* Partial RF of phase [669,670]:
  - RF of loop [669:1,670:1]:
    V1
  - RF of loop [670:1]:
    V
    V2
    V3


### Resulting Chains:fun95(V1,V,V2,V3,Out) 
* [[669,670],671]
* [671]


### Merging Chains  fun95/5 into  External patterns of execution 
* [[671]] --> 1 
* [[671,[669,670]]] --> 2 


### Specialization of cost equations fun96/2 
* CE 453 is refined into CE [804] 
* CE 452 is refined into CE [805] 


#### Refined cost equations fun96/2 
* CE 804: fun96(V1,Out) = 0
     [V1>=0,Out=0] 
* CE 805: fun96(V1,Out) = 1+ fun96(W1,X1)
     [W1>=0,X1+1=Out,W1+1=V1] 

### Cost equations --> "Loop" of fun96/2 
* CEs [805] --> Loop 672 
* CEs [804] --> Loop 673 

#### Loops of fun96/2 
* Loop 672: fun96(V1,Out)->  fun96(V1',Out')
                  [V1'>=0,Out=Out'+1,V1'+1=V1] 
* Loop 673: fun96(V1,Out) [V1>=0,Out=0] 

### Ranking functions of CR fun96(V1,Out) 
* RF of phase [672]: [V1]

#### Partial ranking functions of CR fun96(V1,Out) 
* Partial RF of phase [672]:
  - RF of loop [672:1]:
    V1


### Resulting Chains:fun96(V1,Out) 
* [[672],673]
* [673]


### Merging Chains  fun96/2 into  External patterns of execution 
* [[673]] --> 1 
* [[673,[672]]] --> 2 


### Specialization of cost equations fun97/2 
* CE 455 is refined into CE [806] 
* CE 454 is refined into CE [807] 


#### Refined cost equations fun97/2 
* CE 806: fun97(V1,Out) = 0
     [V1>=0,Out=0] 
* CE 807: fun97(V1,Out) = 1+ fun97(W1,X1)
     [W1>=0,X1+1=Out,W1+1=V1] 

### Cost equations --> "Loop" of fun97/2 
* CEs [807] --> Loop 674 
* CEs [806] --> Loop 675 

#### Loops of fun97/2 
* Loop 674: fun97(V1,Out)->  fun97(V1',Out')
                  [V1'>=0,Out=Out'+1,V1'+1=V1] 
* Loop 675: fun97(V1,Out) [V1>=0,Out=0] 

### Ranking functions of CR fun97(V1,Out) 
* RF of phase [674]: [V1]

#### Partial ranking functions of CR fun97(V1,Out) 
* Partial RF of phase [674]:
  - RF of loop [674:1]:
    V1


### Resulting Chains:fun97(V1,Out) 
* [[674],675]
* [675]


### Merging Chains  fun97/2 into  External patterns of execution 
* [[675]] --> 1 
* [[675,[674]]] --> 2 


### Specialization of cost equations fun98/3 
* CE 458 is refined into CE [808] 
* CE 457 is refined into CE [809] 
* CE 456 is refined into CE [810] 


#### Refined cost equations fun98/3 
* CE 808: fun98(V1,V,Out) = 0
     [V>=0,V1>=0,Out=0] 
* CE 809: fun98(V1,V,Out) = 1+ fun98(W1,V,X1)
     [W1>=0,V>=0,X1+1=Out,W1+1=V1] 
* CE 810: fun98(V1,V,Out) = 1+ fun98(W1,X1,Y1)
     [X1>=0,W1>=0,Y1+1=Out,X1+1=V,W1+1=V1] 

### Cost equations --> "Loop" of fun98/3 
* CEs [809] --> Loop 676 
* CEs [810] --> Loop 677 
* CEs [808] --> Loop 678 

#### Loops of fun98/3 
* Loop 676: fun98(V1,V,Out)->  fun98(V1',V,Out')
                  [V>=0,V1>=1,Out=Out'+1,V1=V1'+1] 
* Loop 677: fun98(V1,V,Out)->  fun98(V1',V',Out')
                  [V>=1,V1>=1,Out=Out'+1,V=V'+1,V1=V1'+1] 
* Loop 678: fun98(V1,V,Out) [V>=0,V1>=0,Out=0] 

### Ranking functions of CR fun98(V1,V,Out) 
* RF of phase [676,677]: [V1]

#### Partial ranking functions of CR fun98(V1,V,Out) 
* Partial RF of phase [676,677]:
  - RF of loop [676:1,677:1]:
    V1
  - RF of loop [677:1]:
    V


### Resulting Chains:fun98(V1,V,Out) 
* [[676,677],678]
* [678]


### Merging Chains  fun98/3 into  External patterns of execution 
* [[678]] --> 1 
* [[678,[676,677]]] --> 2 


### Specialization of cost equations fun99/4 
* CE 461 is refined into CE [811] 
* CE 459 is refined into CE [812] 
* CE 460 is refined into CE [813] 


#### Refined cost equations fun99/4 
* CE 811: fun99(V1,V,V2,Out) = 0
     [V2>=0,V>=0,V1>=0,Out=0] 
* CE 812: fun99(V1,V,V2,Out) = 1+ fun99(W2,V,V2,X2)
     [W2>=0,V2>=0,V>=0,X2+1=Out,W2+1=V1] 
* CE 813: fun99(V1,V,V2,Out) = 1+ fun99(W2,X2,Y2,Z2)
     [Y2>=0,X2>=0,W2>=0,Z2+1=Out,Y2+1=V2,X2+1=V,W2+1=V1] 

### Cost equations --> "Loop" of fun99/4 
* CEs [812] --> Loop 679 
* CEs [813] --> Loop 680 
* CEs [811] --> Loop 681 

#### Loops of fun99/4 
* Loop 679: fun99(V1,V,V2,Out)->  fun99(V1',V,V2,Out')
                  [V2>=0,V>=0,V1>=1,Out=Out'+1,V1=V1'+1] 
* Loop 680: fun99(V1,V,V2,Out)->  fun99(V1',V',V2',Out')
                  [V2>=1,V>=1,V1>=1,Out=Out'+1,V2=V2'+1,V=V'+1,V1=V1'+1] 
* Loop 681: fun99(V1,V,V2,Out) [V2>=0,V>=0,V1>=0,Out=0] 

### Ranking functions of CR fun99(V1,V,V2,Out) 
* RF of phase [679,680]: [V1]

#### Partial ranking functions of CR fun99(V1,V,V2,Out) 
* Partial RF of phase [679,680]:
  - RF of loop [679:1,680:1]:
    V1
  - RF of loop [680:1]:
    V
    V2


### Resulting Chains:fun99(V1,V,V2,Out) 
* [[679,680],681]
* [681]


### Merging Chains  fun99/4 into  External patterns of execution 
* [[681]] --> 1 
* [[681,[679,680]]] --> 2 


### Specialization of cost equations head/2 
* CE 440 is refined into CE [814] 
* CE 439 is refined into CE [815] 


#### Refined cost equations head/2 
* CE 814: head(V1,Out) = 0
     [V1>=0,Out=0] 
* CE 815: head(V1,Out) = 1+ head(W1,X1)
     [W1>=0,X1+1=Out,W1+1=V1] 

### Cost equations --> "Loop" of head/2 
* CEs [815] --> Loop 682 
* CEs [814] --> Loop 683 

#### Loops of head/2 
* Loop 682: head(V1,Out)->  head(V1',Out')
                  [V1'>=0,Out=Out'+1,V1'+1=V1] 
* Loop 683: head(V1,Out) [V1>=0,Out=0] 

### Ranking functions of CR head(V1,Out) 
* RF of phase [682]: [V1]

#### Partial ranking functions of CR head(V1,Out) 
* Partial RF of phase [682]:
  - RF of loop [682:1]:
    V1


### Resulting Chains:head(V1,Out) 
* [[682],683]
* [683]


### Merging Chains  head/2 into  External patterns of execution 
* [[683]] --> 1 
* [[683,[682]]] --> 2 


### Specialization of cost equations isLNat/2 
* CE 421 is refined into CE [816] 
* CE 420 is refined into CE [817] 


#### Refined cost equations isLNat/2 
* CE 816: isLNat(V1,Out) = 0
     [V1>=0,Out=0] 
* CE 817: isLNat(V1,Out) = 1+ isLNat(W1,X1)
     [W1>=0,X1+1=Out,W1+1=V1] 

### Cost equations --> "Loop" of isLNat/2 
* CEs [817] --> Loop 684 
* CEs [816] --> Loop 685 

#### Loops of isLNat/2 
* Loop 684: isLNat(V1,Out)->  isLNat(V1',Out')
                  [V1'>=0,Out=Out'+1,V1'+1=V1] 
* Loop 685: isLNat(V1,Out) [V1>=0,Out=0] 

### Ranking functions of CR isLNat(V1,Out) 
* RF of phase [684]: [V1]

#### Partial ranking functions of CR isLNat(V1,Out) 
* Partial RF of phase [684]:
  - RF of loop [684:1]:
    V1


### Resulting Chains:isLNat(V1,Out) 
* [[684],685]
* [685]


### Merging Chains  isLNat/2 into  External patterns of execution 
* [[685]] --> 1 
* [[685,[684]]] --> 2 


### Specialization of cost equations isLNatKind/2 
* CE 434 is refined into CE [818] 
* CE 433 is refined into CE [819] 


#### Refined cost equations isLNatKind/2 
* CE 818: isLNatKind(V1,Out) = 0
     [V1>=0,Out=0] 
* CE 819: isLNatKind(V1,Out) = 1+ isLNatKind(W1,X1)
     [W1>=0,X1+1=Out,W1+1=V1] 

### Cost equations --> "Loop" of isLNatKind/2 
* CEs [819] --> Loop 686 
* CEs [818] --> Loop 687 

#### Loops of isLNatKind/2 
* Loop 686: isLNatKind(V1,Out)->  isLNatKind(V1',Out')
                  [V1'>=0,Out=Out'+1,V1'+1=V1] 
* Loop 687: isLNatKind(V1,Out) [V1>=0,Out=0] 

### Ranking functions of CR isLNatKind(V1,Out) 
* RF of phase [686]: [V1]

#### Partial ranking functions of CR isLNatKind(V1,Out) 
* Partial RF of phase [686]:
  - RF of loop [686:1]:
    V1


### Resulting Chains:isLNatKind(V1,Out) 
* [[686],687]
* [687]


### Merging Chains  isLNatKind/2 into  External patterns of execution 
* [[687]] --> 1 
* [[687,[686]]] --> 2 


### Specialization of cost equations isNatural/2 
* CE 315 is refined into CE [820] 
* CE 314 is refined into CE [821] 


#### Refined cost equations isNatural/2 
* CE 820: isNatural(V1,Out) = 0
     [V1>=0,Out=0] 
* CE 821: isNatural(V1,Out) = 1+ isNatural(W1,X1)
     [W1>=0,X1+1=Out,W1+1=V1] 

### Cost equations --> "Loop" of isNatural/2 
* CEs [821] --> Loop 688 
* CEs [820] --> Loop 689 

#### Loops of isNatural/2 
* Loop 688: isNatural(V1,Out)->  isNatural(V1',Out')
                  [V1'>=0,Out=Out'+1,V1'+1=V1] 
* Loop 689: isNatural(V1,Out) [V1>=0,Out=0] 

### Ranking functions of CR isNatural(V1,Out) 
* RF of phase [688]: [V1]

#### Partial ranking functions of CR isNatural(V1,Out) 
* Partial RF of phase [688]:
  - RF of loop [688:1]:
    V1


### Resulting Chains:isNatural(V1,Out) 
* [[688],689]
* [689]


### Merging Chains  isNatural/2 into  External patterns of execution 
* [[689]] --> 1 
* [[689,[688]]] --> 2 


### Specialization of cost equations isNaturalKind/2 
* CE 217 is refined into CE [822] 
* CE 216 is refined into CE [823] 


#### Refined cost equations isNaturalKind/2 
* CE 822: isNaturalKind(V1,Out) = 0
     [V1>=0,Out=0] 
* CE 823: isNaturalKind(V1,Out) = 1+ isNaturalKind(W1,X1)
     [W1>=0,X1+1=Out,W1+1=V1] 

### Cost equations --> "Loop" of isNaturalKind/2 
* CEs [823] --> Loop 690 
* CEs [822] --> Loop 691 

#### Loops of isNaturalKind/2 
* Loop 690: isNaturalKind(V1,Out)->  isNaturalKind(V1',Out')
                  [V1'>=0,Out=Out'+1,V1'+1=V1] 
* Loop 691: isNaturalKind(V1,Out) [V1>=0,Out=0] 

### Ranking functions of CR isNaturalKind(V1,Out) 
* RF of phase [690]: [V1]

#### Partial ranking functions of CR isNaturalKind(V1,Out) 
* Partial RF of phase [690]:
  - RF of loop [690:1]:
    V1


### Resulting Chains:isNaturalKind(V1,Out) 
* [[690],691]
* [691]


### Merging Chains  isNaturalKind/2 into  External patterns of execution 
* [[691]] --> 1 
* [[691,[690]]] --> 2 


### Specialization of cost equations isPLNat/2 
* CE 344 is refined into CE [824] 
* CE 343 is refined into CE [825] 


#### Refined cost equations isPLNat/2 
* CE 824: isPLNat(V1,Out) = 0
     [V1>=0,Out=0] 
* CE 825: isPLNat(V1,Out) = 1+ isPLNat(W1,X1)
     [W1>=0,X1+1=Out,W1+1=V1] 

### Cost equations --> "Loop" of isPLNat/2 
* CEs [825] --> Loop 692 
* CEs [824] --> Loop 693 

#### Loops of isPLNat/2 
* Loop 692: isPLNat(V1,Out)->  isPLNat(V1',Out')
                  [V1'>=0,Out=Out'+1,V1'+1=V1] 
* Loop 693: isPLNat(V1,Out) [V1>=0,Out=0] 

### Ranking functions of CR isPLNat(V1,Out) 
* RF of phase [692]: [V1]

#### Partial ranking functions of CR isPLNat(V1,Out) 
* Partial RF of phase [692]:
  - RF of loop [692:1]:
    V1


### Resulting Chains:isPLNat(V1,Out) 
* [[692],693]
* [693]


### Merging Chains  isPLNat/2 into  External patterns of execution 
* [[693]] --> 1 
* [[693,[692]]] --> 2 


### Specialization of cost equations isPLNatKind/2 
* CE 469 is refined into CE [826] 
* CE 468 is refined into CE [827] 


#### Refined cost equations isPLNatKind/2 
* CE 826: isPLNatKind(V1,Out) = 0
     [V1>=0,Out=0] 
* CE 827: isPLNatKind(V1,Out) = 1+ isPLNatKind(W1,X1)
     [W1>=0,X1+1=Out,W1+1=V1] 

### Cost equations --> "Loop" of isPLNatKind/2 
* CEs [827] --> Loop 694 
* CEs [826] --> Loop 695 

#### Loops of isPLNatKind/2 
* Loop 694: isPLNatKind(V1,Out)->  isPLNatKind(V1',Out')
                  [V1'>=0,Out=Out'+1,V1'+1=V1] 
* Loop 695: isPLNatKind(V1,Out) [V1>=0,Out=0] 

### Ranking functions of CR isPLNatKind(V1,Out) 
* RF of phase [694]: [V1]

#### Partial ranking functions of CR isPLNatKind(V1,Out) 
* Partial RF of phase [694]:
  - RF of loop [694:1]:
    V1


### Resulting Chains:isPLNatKind(V1,Out) 
* [[694],695]
* [695]


### Merging Chains  isPLNatKind/2 into  External patterns of execution 
* [[695]] --> 1 
* [[695,[694]]] --> 2 


### Specialization of cost equations natsFrom/2 
* CE 281 is refined into CE [828] 
* CE 280 is refined into CE [829] 


#### Refined cost equations natsFrom/2 
* CE 828: natsFrom(V1,Out) = 0
     [V1>=0,Out=0] 
* CE 829: natsFrom(V1,Out) = 1+ natsFrom(W1,X1)
     [W1>=0,X1+1=Out,W1+1=V1] 

### Cost equations --> "Loop" of natsFrom/2 
* CEs [829] --> Loop 696 
* CEs [828] --> Loop 697 

#### Loops of natsFrom/2 
* Loop 696: natsFrom(V1,Out)->  natsFrom(V1',Out')
                  [V1'>=0,Out=Out'+1,V1'+1=V1] 
* Loop 697: natsFrom(V1,Out) [V1>=0,Out=0] 

### Ranking functions of CR natsFrom(V1,Out) 
* RF of phase [696]: [V1]

#### Partial ranking functions of CR natsFrom(V1,Out) 
* Partial RF of phase [696]:
  - RF of loop [696:1]:
    V1


### Resulting Chains:natsFrom(V1,Out) 
* [[696],697]
* [697]


### Merging Chains  natsFrom/2 into  External patterns of execution 
* [[697]] --> 1 
* [[697,[696]]] --> 2 


### Specialization of cost equations pair/3 
* CE 268 is refined into CE [830] 
* CE 266 is refined into CE [831] 
* CE 267 is refined into CE [832] 
* CE 265 is refined into CE [833] 


#### Refined cost equations pair/3 
* CE 830: pair(V1,V,Out) = 0
     [V>=0,V1>=0,Out=0] 
* CE 831: pair(V1,V,Out) = 1+ pair(V1,W1,X1)
     [W1>=0,V1>=0,X1+1=Out,W1+1=V] 
* CE 832: pair(V1,V,Out) = 1+ pair(W1,V,X1)
     [W1>=0,V>=0,X1+1=Out,W1+1=V1] 
* CE 833: pair(V1,V,Out) = 1+ pair(W1,X1,Y1)
     [X1>=0,W1>=0,Y1+1=Out,X1+1=V,W1+1=V1] 

### Cost equations --> "Loop" of pair/3 
* CEs [831] --> Loop 698 
* CEs [832] --> Loop 699 
* CEs [833] --> Loop 700 
* CEs [830] --> Loop 701 

#### Loops of pair/3 
* Loop 698: pair(V1,V,Out)->  pair(V1,V',Out')
                  [V>=1,V1>=0,Out=Out'+1,V=V'+1] 
* Loop 699: pair(V1,V,Out)->  pair(V1',V,Out')
                  [V>=0,V1>=1,Out=Out'+1,V1=V1'+1] 
* Loop 700: pair(V1,V,Out)->  pair(V1',V',Out')
                  [V>=1,V1>=1,Out=Out'+1,V=V'+1,V1=V1'+1] 
* Loop 701: pair(V1,V,Out) [V>=0,V1>=0,Out=0] 

### Ranking functions of CR pair(V1,V,Out) 
* RF of phase [698,699,700]: [V1+V]

#### Partial ranking functions of CR pair(V1,V,Out) 
* Partial RF of phase [698,699,700]:
  - RF of loop [698:1,700:1]:
    V
  - RF of loop [699:1,700:1]:
    V1


### Resulting Chains:pair(V1,V,Out) 
* [[698,699,700],701]
* [701]


### Merging Chains  pair/3 into  External patterns of execution 
* [[701]] --> 1 
* [[701,[698,699,700]]] --> 2 


### Specialization of cost equations proper/2 
* CE 375 is refined into CE [834] 
* CE 373 is refined into CE [835] 
* CE 374 is refined into CE [836] 
* CE 372 is refined into CE [837] 


#### Refined cost equations proper/2 
* CE 834: proper(V1,Out) = 0
     [V1>=0,Out=0] 
* CE 835: proper(V1,Out) = 1
     [Out=3,V1=2] 
* CE 836: proper(V1,Out) = 1
     [Out=2,V1=1] 
* CE 837: proper(V1,Out) = 1
     [Out=1,V1=0] 

### Cost equations --> "Loop" of proper/2 
* CEs [834] --> Loop 702 
* CEs [835] --> Loop 703 
* CEs [836] --> Loop 704 
* CEs [837] --> Loop 705 

#### Loops of proper/2 
* Loop 702: proper(V1,Out) [V1>=0,Out=0] 
* Loop 703: proper(V1,Out) [Out=3,V1=2] 
* Loop 704: proper(V1,Out) [Out=2,V1=1] 
* Loop 705: proper(V1,Out) [Out=1,V1=0] 

### Ranking functions of CR proper(V1,Out) 

#### Partial ranking functions of CR proper(V1,Out) 


### Resulting Chains:proper(V1,Out) 
* [705]
* [704]
* [703]
* [702]


### Merging Chains  proper/2 into  External patterns of execution 
* [[705]] --> 1 
* [[704]] --> 2 
* [[703]] --> 3 
* [[702]] --> 4 


### Specialization of cost equations s/2 
* CE 361 is refined into CE [838] 
* CE 360 is refined into CE [839] 


#### Refined cost equations s/2 
* CE 838: s(V1,Out) = 0
     [V1>=0,Out=0] 
* CE 839: s(V1,Out) = 1+ s(W1,X1)
     [W1>=0,X1+1=Out,W1+1=V1] 

### Cost equations --> "Loop" of s/2 
* CEs [839] --> Loop 706 
* CEs [838] --> Loop 707 

#### Loops of s/2 
* Loop 706: s(V1,Out)->  s(V1',Out')
                  [V1'>=0,Out=Out'+1,V1'+1=V1] 
* Loop 707: s(V1,Out) [V1>=0,Out=0] 

### Ranking functions of CR s(V1,Out) 
* RF of phase [706]: [V1]

#### Partial ranking functions of CR s(V1,Out) 
* Partial RF of phase [706]:
  - RF of loop [706:1]:
    V1


### Resulting Chains:s(V1,Out) 
* [[706],707]
* [707]


### Merging Chains  s/2 into  External patterns of execution 
* [[707]] --> 1 
* [[707,[706]]] --> 2 


### Specialization of cost equations sel/3 
* CE 200 is refined into CE [840] 
* CE 198 is refined into CE [841] 
* CE 197 is refined into CE [842] 
* CE 199 is refined into CE [843] 


#### Refined cost equations sel/3 
* CE 840: sel(V1,V,Out) = 0
     [V>=0,V1>=0,Out=0] 
* CE 841: sel(V1,V,Out) = 1+ sel(V1,W1,X1)
     [W1>=0,V1>=0,X1+1=Out,W1+1=V] 
* CE 842: sel(V1,V,Out) = 1+ sel(W1,V,X1)
     [W1>=0,V>=0,X1+1=Out,W1+1=V1] 
* CE 843: sel(V1,V,Out) = 1+ sel(W1,X1,Y1)
     [X1>=0,W1>=0,Y1+1=Out,X1+1=V,W1+1=V1] 

### Cost equations --> "Loop" of sel/3 
* CEs [841] --> Loop 708 
* CEs [842] --> Loop 709 
* CEs [843] --> Loop 710 
* CEs [840] --> Loop 711 

#### Loops of sel/3 
* Loop 708: sel(V1,V,Out)->  sel(V1,V',Out')
                  [V>=1,V1>=0,Out=Out'+1,V=V'+1] 
* Loop 709: sel(V1,V,Out)->  sel(V1',V,Out')
                  [V>=0,V1>=1,Out=Out'+1,V1=V1'+1] 
* Loop 710: sel(V1,V,Out)->  sel(V1',V',Out')
                  [V>=1,V1>=1,Out=Out'+1,V=V'+1,V1=V1'+1] 
* Loop 711: sel(V1,V,Out) [V>=0,V1>=0,Out=0] 

### Ranking functions of CR sel(V1,V,Out) 
* RF of phase [708,709,710]: [V1+V]

#### Partial ranking functions of CR sel(V1,V,Out) 
* Partial RF of phase [708,709,710]:
  - RF of loop [708:1,710:1]:
    V
  - RF of loop [709:1,710:1]:
    V1


### Resulting Chains:sel(V1,V,Out) 
* [[708,709,710],711]
* [711]


### Merging Chains  sel/3 into  External patterns of execution 
* [[711]] --> 1 
* [[711,[708,709,710]]] --> 2 


### Specialization of cost equations snd/2 
* CE 479 is refined into CE [844] 
* CE 478 is refined into CE [845] 


#### Refined cost equations snd/2 
* CE 844: snd(V1,Out) = 0
     [V1>=0,Out=0] 
* CE 845: snd(V1,Out) = 1+ snd(W1,X1)
     [W1>=0,X1+1=Out,W1+1=V1] 

### Cost equations --> "Loop" of snd/2 
* CEs [845] --> Loop 712 
* CEs [844] --> Loop 713 

#### Loops of snd/2 
* Loop 712: snd(V1,Out)->  snd(V1',Out')
                  [V1'>=0,Out=Out'+1,V1'+1=V1] 
* Loop 713: snd(V1,Out) [V1>=0,Out=0] 

### Ranking functions of CR snd(V1,Out) 
* RF of phase [712]: [V1]

#### Partial ranking functions of CR snd(V1,Out) 
* Partial RF of phase [712]:
  - RF of loop [712:1]:
    V1


### Resulting Chains:snd(V1,Out) 
* [[712],713]
* [713]


### Merging Chains  snd/2 into  External patterns of execution 
* [[713]] --> 1 
* [[713,[712]]] --> 2 


### Specialization of cost equations splitAt/3 
* CE 339 is refined into CE [846] 
* CE 338 is refined into CE [847] 
* CE 336 is refined into CE [848] 
* CE 337 is refined into CE [849] 


#### Refined cost equations splitAt/3 
* CE 846: splitAt(V1,V,Out) = 0
     [V>=0,V1>=0,Out=0] 
* CE 847: splitAt(V1,V,Out) = 1+ splitAt(V1,W1,X1)
     [W1>=0,V1>=0,X1+1=Out,W1+1=V] 
* CE 848: splitAt(V1,V,Out) = 1+ splitAt(W1,V,X1)
     [W1>=0,V>=0,X1+1=Out,W1+1=V1] 
* CE 849: splitAt(V1,V,Out) = 1+ splitAt(W1,X1,Y1)
     [X1>=0,W1>=0,Y1+1=Out,X1+1=V,W1+1=V1] 

### Cost equations --> "Loop" of splitAt/3 
* CEs [847] --> Loop 714 
* CEs [848] --> Loop 715 
* CEs [849] --> Loop 716 
* CEs [846] --> Loop 717 

#### Loops of splitAt/3 
* Loop 714: splitAt(V1,V,Out)->  splitAt(V1,V',Out')
                  [V>=1,V1>=0,Out=Out'+1,V=V'+1] 
* Loop 715: splitAt(V1,V,Out)->  splitAt(V1',V,Out')
                  [V>=0,V1>=1,Out=Out'+1,V1=V1'+1] 
* Loop 716: splitAt(V1,V,Out)->  splitAt(V1',V',Out')
                  [V>=1,V1>=1,Out=Out'+1,V=V'+1,V1=V1'+1] 
* Loop 717: splitAt(V1,V,Out) [V>=0,V1>=0,Out=0] 

### Ranking functions of CR splitAt(V1,V,Out) 
* RF of phase [714,715,716]: [V1+V]

#### Partial ranking functions of CR splitAt(V1,V,Out) 
* Partial RF of phase [714,715,716]:
  - RF of loop [714:1,716:1]:
    V
  - RF of loop [715:1,716:1]:
    V1


### Resulting Chains:splitAt(V1,V,Out) 
* [[714,715,716],717]
* [717]


### Merging Chains  splitAt/3 into  External patterns of execution 
* [[717]] --> 1 
* [[717,[714,715,716]]] --> 2 


### Specialization of cost equations tail/2 
* CE 444 is refined into CE [850] 
* CE 443 is refined into CE [851] 


#### Refined cost equations tail/2 
* CE 850: tail(V1,Out) = 0
     [V1>=0,Out=0] 
* CE 851: tail(V1,Out) = 1+ tail(W1,X1)
     [W1>=0,X1+1=Out,W1+1=V1] 

### Cost equations --> "Loop" of tail/2 
* CEs [851] --> Loop 718 
* CEs [850] --> Loop 719 

#### Loops of tail/2 
* Loop 718: tail(V1,Out)->  tail(V1',Out')
                  [V1'>=0,Out=Out'+1,V1'+1=V1] 
* Loop 719: tail(V1,Out) [V1>=0,Out=0] 

### Ranking functions of CR tail(V1,Out) 
* RF of phase [718]: [V1]

#### Partial ranking functions of CR tail(V1,Out) 
* Partial RF of phase [718]:
  - RF of loop [718:1]:
    V1


### Resulting Chains:tail(V1,Out) 
* [[718],719]
* [719]


### Merging Chains  tail/2 into  External patterns of execution 
* [[719]] --> 1 
* [[719,[718]]] --> 2 


### Specialization of cost equations take/3 
* CE 264 is refined into CE [852] 
* CE 261 is refined into CE [853] 
* CE 262 is refined into CE [854] 
* CE 263 is refined into CE [855] 


#### Refined cost equations take/3 
* CE 852: take(V1,V,Out) = 0
     [V>=0,V1>=0,Out=0] 
* CE 853: take(V1,V,Out) = 1+ take(V1,W1,X1)
     [W1>=0,V1>=0,X1+1=Out,W1+1=V] 
* CE 854: take(V1,V,Out) = 1+ take(W1,V,X1)
     [W1>=0,V>=0,X1+1=Out,W1+1=V1] 
* CE 855: take(V1,V,Out) = 1+ take(W1,X1,Y1)
     [X1>=0,W1>=0,Y1+1=Out,X1+1=V,W1+1=V1] 

### Cost equations --> "Loop" of take/3 
* CEs [853] --> Loop 720 
* CEs [854] --> Loop 721 
* CEs [855] --> Loop 722 
* CEs [852] --> Loop 723 

#### Loops of take/3 
* Loop 720: take(V1,V,Out)->  take(V1,V',Out')
                  [V>=1,V1>=0,Out=Out'+1,V=V'+1] 
* Loop 721: take(V1,V,Out)->  take(V1',V,Out')
                  [V>=0,V1>=1,Out=Out'+1,V1=V1'+1] 
* Loop 722: take(V1,V,Out)->  take(V1',V',Out')
                  [V>=1,V1>=1,Out=Out'+1,V=V'+1,V1=V1'+1] 
* Loop 723: take(V1,V,Out) [V>=0,V1>=0,Out=0] 

### Ranking functions of CR take(V1,V,Out) 
* RF of phase [720,721,722]: [V1+V]

#### Partial ranking functions of CR take(V1,V,Out) 
* Partial RF of phase [720,721,722]:
  - RF of loop [720:1,722:1]:
    V
  - RF of loop [721:1,722:1]:
    V1


### Resulting Chains:take(V1,V,Out) 
* [[720,721,722],723]
* [723]


### Merging Chains  take/3 into  External patterns of execution 
* [[723]] --> 1 
* [[723,[720,721,722]]] --> 2 


### Specialization of cost equations top/2 
* CE 144 is refined into CE [856] 
* CE 142 is refined into CE [857] 
* CE 143 is refined into CE [858,859,860,861] 


#### Refined cost equations top/2 
* CE 856: top(V1,Out) = 0
     [V1>=0,Out=0] 
* CE 857: top(V1,Out) = 1+ top(V1,Out)
     [V1>=1] 
* CE 858: top(V1,Out) = 1+ proper(W1,X1):1+ top(Y1,Out)
     [Y1=1,X1=1,W1=0,V1=1] 
* CE 859: top(V1,Out) = 1+ proper(W1,X1):2+ top(Y1,Out)
     [Y1=2,X1=2,W1=1,V1=2] 
* CE 860: top(V1,Out) = 1+ proper(W1,X1):3+ top(Y1,Out)
     [Y1=3,X1=3,W1=2,V1=3] 
* CE 861: top(V1,Out) = 1+ proper(W1,X1):4+ top(Y1,Out)
     [W1>=0,W1+1=V1,Y1=0,X1=0] 

### Cost equations --> "Loop" of top/2 
* CEs [861] --> Loop 724 
* CEs [860] --> Loop 725 
* CEs [859] --> Loop 726 
* CEs [857,858] --> Loop 727 
* CEs [856] --> Loop 728 

#### Loops of top/2 
* Loop 724: top(V1,Out)->  top(V1',Out)
                  [V1>=1,V1'=0] 
* Loop 725: top(V1,Out)->  top(V1',Out)
                  [V1'=3,V1=3] 
* Loop 726: top(V1,Out)->  top(V1',Out)
                  [V1'=2,V1=2] 
* Loop 727: top(V1,Out)->  top(V1,Out)
                  [V1>=1] 
* Loop 728: top(V1,Out) [V1>=0,Out=0] 

### Ranking functions of CR top(V1,Out) 

#### Partial ranking functions of CR top(V1,Out) 


### Resulting Chains:top(V1,Out) 
* [[725,726,727]]...
* [[725,726,727],728]
* [[725,726,727],724,728]
* [728]
* [724,728]


### Merging Chains  top/2 into  External patterns of execution 
* [[728,724],[728],[728,724,[725,726,727]],[728,[725,726,727]]] --> 1 
* [[[725,726,727]]] --> 2 


### Specialization of cost equations start/4 
* CE 2 is refined into CE [862,863] 
* CE 3 is refined into CE [864,865] 
* CE 4 is refined into CE [866,867] 
* CE 5 is refined into CE [868,869] 
* CE 6 is refined into CE [870,871] 
* CE 7 is refined into CE [872,873] 
* CE 8 is refined into CE [874,875] 
* CE 9 is refined into CE [876,877] 
* CE 10 is refined into CE [878,879] 
* CE 11 is refined into CE [880,881] 
* CE 12 is refined into CE [882,883] 
* CE 13 is refined into CE [884,885] 
* CE 14 is refined into CE [886,887] 
* CE 15 is refined into CE [888,889] 
* CE 16 is refined into CE [890,891] 
* CE 17 is refined into CE [892,893] 
* CE 18 is refined into CE [894,895] 
* CE 19 is refined into CE [896,897] 
* CE 20 is refined into CE [898,899] 
* CE 21 is refined into CE [900,901] 
* CE 22 is refined into CE [902,903] 
* CE 23 is refined into CE [904,905] 
* CE 24 is refined into CE [906,907] 
* CE 25 is refined into CE [908,909] 
* CE 26 is refined into CE [910,911] 
* CE 27 is refined into CE [912,913] 
* CE 28 is refined into CE [914,915] 
* CE 29 is refined into CE [916,917] 
* CE 30 is refined into CE [918,919] 
* CE 31 is refined into CE [920,921] 
* CE 32 is refined into CE [922,923] 
* CE 33 is refined into CE [924,925] 
* CE 34 is refined into CE [926,927] 
* CE 35 is refined into CE [928,929] 
* CE 36 is refined into CE [930,931] 
* CE 37 is refined into CE [932,933] 
* CE 38 is refined into CE [934,935] 
* CE 39 is refined into CE [936,937] 
* CE 40 is refined into CE [938,939] 
* CE 41 is refined into CE [940,941] 
* CE 42 is refined into CE [942,943] 
* CE 43 is refined into CE [944,945] 
* CE 44 is refined into CE [946,947] 
* CE 45 is refined into CE [948,949] 
* CE 46 is refined into CE [950,951] 
* CE 47 is refined into CE [952,953] 
* CE 48 is refined into CE [954,955] 
* CE 49 is refined into CE [956,957] 
* CE 50 is refined into CE [958,959] 
* CE 51 is refined into CE [960,961] 
* CE 52 is refined into CE [962,963] 
* CE 53 is refined into CE [964,965] 
* CE 54 is refined into CE [966,967] 
* CE 55 is refined into CE [968,969] 
* CE 56 is refined into CE [970,971] 
* CE 57 is refined into CE [972,973] 
* CE 58 is refined into CE [974,975] 
* CE 59 is refined into CE [976,977] 
* CE 60 is refined into CE [978,979] 
* CE 61 is refined into CE [980,981] 
* CE 62 is refined into CE [982,983] 
* CE 63 is refined into CE [984,985] 
* CE 64 is refined into CE [986,987] 
* CE 65 is refined into CE [988,989] 
* CE 66 is refined into CE [990,991] 
* CE 67 is refined into CE [992,993] 
* CE 68 is refined into CE [994,995] 
* CE 69 is refined into CE [996,997] 
* CE 70 is refined into CE [998,999] 
* CE 71 is refined into CE [1000,1001] 
* CE 72 is refined into CE [1002,1003] 
* CE 73 is refined into CE [1004,1005] 
* CE 74 is refined into CE [1006,1007] 
* CE 75 is refined into CE [1008,1009] 
* CE 76 is refined into CE [1010,1011] 
* CE 77 is refined into CE [1012,1013] 
* CE 78 is refined into CE [1014,1015] 
* CE 79 is refined into CE [1016,1017] 
* CE 80 is refined into CE [1018,1019] 
* CE 81 is refined into CE [1020,1021] 
* CE 82 is refined into CE [1022,1023] 
* CE 83 is refined into CE [1024,1025] 
* CE 84 is refined into CE [1026,1027] 
* CE 85 is refined into CE [1028,1029] 
* CE 86 is refined into CE [1030,1031,1032,1033] 
* CE 87 is refined into CE [1034,1035] 
* CE 88 is refined into CE [1036,1037] 
* CE 89 is refined into CE [1038,1039] 
* CE 90 is refined into CE [1040,1041] 
* CE 91 is refined into CE [1042,1043] 
* CE 92 is refined into CE [1044,1045] 
* CE 93 is refined into CE [1046,1047] 
* CE 94 is refined into CE [1048,1049] 
* CE 95 is refined into CE [1050,1051] 
* CE 96 is refined into CE [1052,1053] 
* CE 97 is refined into CE [1054,1055] 
* CE 98 is refined into CE [1056,1057] 
* CE 99 is refined into CE [1058,1059] 
* CE 100 is refined into CE [1060,1061] 
* CE 101 is refined into CE [1062,1063] 
* CE 102 is refined into CE [1064,1065] 
* CE 103 is refined into CE [1066,1067] 
* CE 104 is refined into CE [1068,1069] 
* CE 105 is refined into CE [1070,1071] 
* CE 106 is refined into CE [1072,1073] 
* CE 107 is refined into CE [1074,1075] 
* CE 108 is refined into CE [1076,1077] 
* CE 109 is refined into CE [1078,1079] 
* CE 110 is refined into CE [1080,1081] 
* CE 111 is refined into CE [1082,1083] 
* CE 112 is refined into CE [1084,1085] 
* CE 113 is refined into CE [1086,1087] 
* CE 114 is refined into CE [1088,1089] 
* CE 115 is refined into CE [1090,1091] 
* CE 116 is refined into CE [1092,1093] 
* CE 117 is refined into CE [1094,1095] 
* CE 118 is refined into CE [1096,1097] 
* CE 119 is refined into CE [1098,1099] 
* CE 120 is refined into CE [1100,1101] 
* CE 121 is refined into CE [1102,1103] 
* CE 122 is refined into CE [1104,1105] 
* CE 123 is refined into CE [1106,1107] 
* CE 124 is refined into CE [1108,1109] 
* CE 125 is refined into CE [1110,1111] 
* CE 126 is refined into CE [1112,1113] 
* CE 127 is refined into CE [1114,1115] 
* CE 128 is refined into CE [1116,1117] 
* CE 129 is refined into CE [1118,1119] 
* CE 130 is refined into CE [1120,1121] 
* CE 131 is refined into CE [1122,1123] 
* CE 132 is refined into CE [1124,1125] 


#### Refined cost equations start/4 
* CE 862: start(V1,V,V2,V3) = 0+ fun(V1,V,V2,W3):1
     [V2>=0,V>=0,V1>=0,W3=0] 
* CE 863: start(V1,V,V2,V3) = 0+ fun(V1,V,V2,W3):2
     [V1>=W3,W3>=1,V2>=0,V>=0] 
* CE 864: start(V1,V,V2,V3) = 0+ fun1(V1,V,W3):1
     [V>=0,V1>=0,W3=0] 
* CE 865: start(V1,V,V2,V3) = 0+ fun1(V1,V,W3):2
     [V1>=W3,W3>=1,V>=0] 
* CE 866: start(V1,V,V2,V3) = 0+ fun2(V1,V,V2,W3):1
     [V2>=0,V>=0,V1>=0,W3=0] 
* CE 867: start(V1,V,V2,V3) = 0+ fun2(V1,V,V2,W3):2
     [V1>=W3,W3>=1,V2>=0,V>=0] 
* CE 868: start(V1,V,V2,V3) = 0+ top(V1,W3):1
     [V1>=0,W3=0] 
* CE 869: start(V1,V,V2,V3) = 0+ top(V1,W3):2
     [V1>=1] 
* CE 870: start(V1,V,V2,V3) = 0+ fun3(V1,V,W3):1
     [V>=0,V1>=0,W3=0] 
* CE 871: start(V1,V,V2,V3) = 0+ fun3(V1,V,W3):2
     [V1>=W3,W3>=1,V>=0] 
* CE 872: start(V1,V,V2,V3) = 0+ fun4(V1,W3):1
     [V1>=0,W3=0] 
* CE 873: start(V1,V,V2,V3) = 0+ fun4(V1,W3):2
     [V1>=W3,W3>=1] 
* CE 874: start(V1,V,V2,V3) = 0+ fun5(V1,V,V2,V3,W3):1
     [V3>=0,V2>=0,V>=0,V1>=0,W3=0] 
* CE 875: start(V1,V,V2,V3) = 0+ fun5(V1,V,V2,V3,W3):2
     [V1>=W3,W3>=1,V3>=0,V2>=0,V>=0] 
* CE 876: start(V1,V,V2,V3) = 0+ fun6(V1,V,V2,W3):1
     [V2>=0,V>=0,V1>=0,W3=0] 
* CE 877: start(V1,V,V2,V3) = 0+ fun6(V1,V,V2,W3):2
     [V1>=W3,W3>=1,V2>=0,V>=0] 
* CE 878: start(V1,V,V2,V3) = 0+ fun7(V1,W3):1
     [V1>=0,W3=0] 
* CE 879: start(V1,V,V2,V3) = 0+ fun7(V1,W3):2
     [V1>=W3,W3>=1] 
* CE 880: start(V1,V,V2,V3) = 0+ fun8(V1,W3):1
     [V1>=0,W3=0] 
* CE 881: start(V1,V,V2,V3) = 0+ fun8(V1,W3):2
     [V1>=W3,W3>=1] 
* CE 882: start(V1,V,V2,V3) = 0+ fun9(V1,V,W3):1
     [V>=0,V1>=0,W3=0] 
* CE 883: start(V1,V,V2,V3) = 0+ fun9(V1,V,W3):2
     [V1>=W3,W3>=1,V>=0] 
* CE 884: start(V1,V,V2,V3) = 0+ fun10(V1,V,V2,W3):1
     [V2>=0,V>=0,V1>=0,W3=0] 
* CE 885: start(V1,V,V2,V3) = 0+ fun10(V1,V,V2,W3):2
     [V1>=W3,W3>=1,V2>=0,V>=0] 
* CE 886: start(V1,V,V2,V3) = 0+ fun11(V1,W3):1
     [V1>=0,W3=0] 
* CE 887: start(V1,V,V2,V3) = 0+ fun11(V1,W3):2
     [V1>=W3,W3>=1] 
* CE 888: start(V1,V,V2,V3) = 0+ fun12(V1,V,W3):1
     [V>=0,V1>=0,W3=0] 
* CE 889: start(V1,V,V2,V3) = 0+ fun12(V1,V,W3):2
     [V1>=W3,W3>=1,V>=0] 
* CE 890: start(V1,V,V2,V3) = 0+ fun13(V1,V,W3):1
     [V>=0,V1>=0,W3=0] 
* CE 891: start(V1,V,V2,V3) = 0+ fun13(V1,V,W3):2
     [V1>=W3,W3>=1,V>=0] 
* CE 892: start(V1,V,V2,V3) = 0+ fun14(V1,V,V2,W3):1
     [V2>=0,V>=0,V1>=0,W3=0] 
* CE 893: start(V1,V,V2,V3) = 0+ fun14(V1,V,V2,W3):2
     [V1>=W3,W3>=1,V2>=0,V>=0] 
* CE 894: start(V1,V,V2,V3) = 0+ fun15(V1,V,V2,V3,W3):1
     [V3>=0,V2>=0,V>=0,V1>=0,W3=0] 
* CE 895: start(V1,V,V2,V3) = 0+ fun15(V1,V,V2,V3,W3):2
     [V1>=W3,W3>=1,V3>=0,V2>=0,V>=0] 
* CE 896: start(V1,V,V2,V3) = 0+ fun16(V1,V,V2,W3):1
     [V2>=0,V>=0,V1>=0,W3=0] 
* CE 897: start(V1,V,V2,V3) = 0+ fun16(V1,V,V2,W3):2
     [V1>=W3,W3>=1,V2>=0,V>=0] 
* CE 898: start(V1,V,V2,V3) = 0+ fun17(V1,V,W3):1
     [V>=0,V1>=0,W3=0] 
* CE 899: start(V1,V,V2,V3) = 0+ fun17(V1,V,W3):2
     [V1>=W3,W3>=1,V>=0] 
* CE 900: start(V1,V,V2,V3) = 0+ fun18(V1,V,V2,W3):1
     [V2>=0,V>=0,V1>=0,W3=0] 
* CE 901: start(V1,V,V2,V3) = 0+ fun18(V1,V,V2,W3):2
     [V1>=W3,W3>=1,V2>=0,V>=0] 
* CE 902: start(V1,V,V2,V3) = 0+ fun19(V1,V,V2,W3):1
     [V2>=0,V>=0,V1>=0,W3=0] 
* CE 903: start(V1,V,V2,V3) = 0+ fun19(V1,V,V2,W3):2
     [V1>=W3,W3>=1,V2>=0,V>=0] 
* CE 904: start(V1,V,V2,V3) = 0+ fun20(V1,V,V2,W3):1
     [V2>=0,V>=0,V1>=0,W3=0] 
* CE 905: start(V1,V,V2,V3) = 0+ fun20(V1,V,V2,W3):2
     [V1>=W3,W3>=1,V2>=0,V>=0] 
* CE 906: start(V1,V,V2,V3) = 0+ fun21(V1,W3):1
     [V1>=0,W3=0] 
* CE 907: start(V1,V,V2,V3) = 0+ fun21(V1,W3):2
     [V1>=W3,W3>=1] 
* CE 908: start(V1,V,V2,V3) = 0+ sel(V1,V,W3):1
     [V>=0,V1>=0,W3=0] 
* CE 909: start(V1,V,V2,V3) = 0+ sel(V1,V,W3):2
     [V1+V>=W3,W3>=1,V>=0,V1>=0] 
* CE 910: start(V1,V,V2,V3) = 0+ fun22(V1,V,V2,W3):1
     [V2>=0,V>=0,V1>=0,W3=0] 
* CE 911: start(V1,V,V2,V3) = 0+ fun22(V1,V,V2,W3):2
     [V1>=W3,W3>=1,V2>=0,V>=0] 
* CE 912: start(V1,V,V2,V3) = 0+ fun23(V1,V,V2,W3):1
     [V2>=0,V>=0,V1>=0,W3=0] 
* CE 913: start(V1,V,V2,V3) = 0+ fun23(V1,V,V2,W3):2
     [V1>=W3,W3>=1,V2>=0,V>=0] 
* CE 914: start(V1,V,V2,V3) = 0+ fun24(V1,V,W3):1
     [V>=0,V1>=0,W3=0] 
* CE 915: start(V1,V,V2,V3) = 0+ fun24(V1,V,W3):2
     [V1>=W3,W3>=1,V>=0] 
* CE 916: start(V1,V,V2,V3) = 0+ fun25(V1,V,V2,W3):1
     [V2>=0,V>=0,V1>=0,W3=0] 
* CE 917: start(V1,V,V2,V3) = 0+ fun25(V1,V,V2,W3):2
     [V1>=W3,W3>=1,V2>=0,V>=0] 
* CE 918: start(V1,V,V2,V3) = 0+ fun26(V1,V,W3):1
     [V>=0,V1>=0,W3=0] 
* CE 919: start(V1,V,V2,V3) = 0+ fun26(V1,V,W3):2
     [V1>=W3,W3>=1,V>=0] 
* CE 920: start(V1,V,V2,V3) = 0+ isNaturalKind(V1,W3):1
     [V1>=0,W3=0] 
* CE 921: start(V1,V,V2,V3) = 0+ isNaturalKind(V1,W3):2
     [V1>=W3,W3>=1] 
* CE 922: start(V1,V,V2,V3) = 0+ fun27(V1,V,V2,W3):1
     [V2>=0,V>=0,V1>=0,W3=0] 
* CE 923: start(V1,V,V2,V3) = 0+ fun27(V1,V,V2,W3):2
     [V1>=W3,W3>=1,V2>=0,V>=0] 
* CE 924: start(V1,V,V2,V3) = 0+ fun28(V1,V,W3):1
     [V>=0,V1>=0,W3=0] 
* CE 925: start(V1,V,V2,V3) = 0+ fun28(V1,V,W3):2
     [V1>=W3,W3>=1,V>=0] 
* CE 926: start(V1,V,V2,V3) = 0+ fun29(V1,V,V2,V3,W3):1
     [V3>=0,V2>=0,V>=0,V1>=0,W3=0] 
* CE 927: start(V1,V,V2,V3) = 0+ fun29(V1,V,V2,V3,W3):2
     [V1>=W3,W3>=1,V3>=0,V2>=0,V>=0] 
* CE 928: start(V1,V,V2,V3) = 0+ fun30(V1,V,W3):1
     [V>=0,V1>=0,W3=0] 
* CE 929: start(V1,V,V2,V3) = 0+ fun30(V1,V,W3):2
     [V1>=W3,W3>=1,V>=0] 
* CE 930: start(V1,V,V2,V3) = 0+ fun31(V1,V,V2,W3):1
     [V2>=0,V>=0,V1>=0,W3=0] 
* CE 931: start(V1,V,V2,V3) = 0+ fun31(V1,V,V2,W3):2
     [V1>=W3,W3>=1,V2>=0,V>=0] 
* CE 932: start(V1,V,V2,V3) = 0+ fun32(V1,W3):1
     [V1>=0,W3=0] 
* CE 933: start(V1,V,V2,V3) = 0+ fun32(V1,W3):2
     [V1>=W3,W3>=1] 
* CE 934: start(V1,V,V2,V3) = 0+ fun33(V1,V,W3):1
     [V>=0,V1>=0,W3=0] 
* CE 935: start(V1,V,V2,V3) = 0+ fun33(V1,V,W3):2
     [V1>=W3,W3>=1,V>=0] 
* CE 936: start(V1,V,V2,V3) = 0+ fun34(V1,W3):1
     [V1>=0,W3=0] 
* CE 937: start(V1,V,V2,V3) = 0+ fun34(V1,W3):2
     [V1>=W3,W3>=1] 
* CE 938: start(V1,V,V2,V3) = 0+ fun35(V1,V,V2,W3):1
     [V2>=0,V>=0,V1>=0,W3=0] 
* CE 939: start(V1,V,V2,V3) = 0+ fun35(V1,V,V2,W3):2
     [V1>=W3,W3>=1,V2>=0,V>=0] 
* CE 940: start(V1,V,V2,V3) = 0+ fun36(V1,V,W3):1
     [V>=0,V1>=0,W3=0] 
* CE 941: start(V1,V,V2,V3) = 0+ fun36(V1,V,W3):2
     [V1>=W3,W3>=1,V>=0] 
* CE 942: start(V1,V,V2,V3) = 0+ fun37(V1,V,V2,W3):1
     [V2>=0,V>=0,V1>=0,W3=0] 
* CE 943: start(V1,V,V2,V3) = 0+ fun37(V1,V,V2,W3):2
     [V1>=W3,W3>=1,V2>=0,V>=0] 
* CE 944: start(V1,V,V2,V3) = 0+ fun38(V1,V,W3):1
     [V>=0,V1>=0,W3=0] 
* CE 945: start(V1,V,V2,V3) = 0+ fun38(V1,V,W3):2
     [V1>=W3,W3>=1,V>=0] 
* CE 946: start(V1,V,V2,V3) = 0+ fun39(V1,V,W3):1
     [V>=0,V1>=0,W3=0] 
* CE 947: start(V1,V,V2,V3) = 0+ fun39(V1,V,W3):2
     [V1>=W3,W3>=1,V>=0] 
* CE 948: start(V1,V,V2,V3) = 0+ fun40(V1,V,V2,W3):1
     [V2>=0,V>=0,V1>=0,W3=0] 
* CE 949: start(V1,V,V2,V3) = 0+ fun40(V1,V,V2,W3):2
     [V1>=W3,W3>=1,V2>=0,V>=0] 
* CE 950: start(V1,V,V2,V3) = 0+ fun41(V1,V,V2,W3):1
     [V2>=0,V>=0,V1>=0,W3=0] 
* CE 951: start(V1,V,V2,V3) = 0+ fun41(V1,V,V2,W3):2
     [V1>=W3,W3>=1,V2>=0,V>=0] 
* CE 952: start(V1,V,V2,V3) = 0+ take(V1,V,W3):1
     [V>=0,V1>=0,W3=0] 
* CE 953: start(V1,V,V2,V3) = 0+ take(V1,V,W3):2
     [V1+V>=W3,W3>=1,V>=0,V1>=0] 
* CE 954: start(V1,V,V2,V3) = 0+ pair(V1,V,W3):1
     [V>=0,V1>=0,W3=0] 
* CE 955: start(V1,V,V2,V3) = 0+ pair(V1,V,W3):2
     [V1+V>=W3,W3>=1,V>=0,V1>=0] 
* CE 956: start(V1,V,V2,V3) = 0+ fun42(V1,V,V2,W3):1
     [V2>=0,V>=0,V1>=0,W3=0] 
* CE 957: start(V1,V,V2,V3) = 0+ fun42(V1,V,V2,W3):2
     [V1>=W3,W3>=1,V2>=0,V>=0] 
* CE 958: start(V1,V,V2,V3) = 0+ fun43(V1,W3):1
     [V1>=0,W3=0] 
* CE 959: start(V1,V,V2,V3) = 0+ fun43(V1,W3):2
     [V1>=W3,W3>=1] 
* CE 960: start(V1,V,V2,V3) = 0+ fun44(V1,V,V2,W3):1
     [V2>=0,V>=0,V1>=0,W3=0] 
* CE 961: start(V1,V,V2,V3) = 0+ fun44(V1,V,V2,W3):2
     [V1>=W3,W3>=1,V2>=0,V>=0] 
* CE 962: start(V1,V,V2,V3) = 0+ fun45(V1,V,W3):1
     [V>=0,V1>=0,W3=0] 
* CE 963: start(V1,V,V2,V3) = 0+ fun45(V1,V,W3):2
     [V1>=W3,W3>=1,V>=0] 
* CE 964: start(V1,V,V2,V3) = 0+ natsFrom(V1,W3):1
     [V1>=0,W3=0] 
* CE 965: start(V1,V,V2,V3) = 0+ natsFrom(V1,W3):2
     [V1>=W3,W3>=1] 
* CE 966: start(V1,V,V2,V3) = 0+ fun46(V1,V,W3):1
     [V>=0,V1>=0,W3=0] 
* CE 967: start(V1,V,V2,V3) = 0+ fun46(V1,V,W3):2
     [V1>=W3,W3>=1,V>=0] 
* CE 968: start(V1,V,V2,V3) = 0+ fun47(V1,V,V2,W3):1
     [V2>=0,V>=0,V1>=0,W3=0] 
* CE 969: start(V1,V,V2,V3) = 0+ fun47(V1,V,V2,W3):2
     [V1>=W3,W3>=1,V2>=0,V>=0] 
* CE 970: start(V1,V,V2,V3) = 0+ fun48(V1,V,V2,W3):1
     [V2>=0,V>=0,V1>=0,W3=0] 
* CE 971: start(V1,V,V2,V3) = 0+ fun48(V1,V,V2,W3):2
     [V1>=W3,W3>=1,V2>=0,V>=0] 
* CE 972: start(V1,V,V2,V3) = 0+ fun49(V1,V,W3):1
     [V>=0,V1>=0,W3=0] 
* CE 973: start(V1,V,V2,V3) = 0+ fun49(V1,V,W3):2
     [V1>=W3,W3>=1,V>=0] 
* CE 974: start(V1,V,V2,V3) = 0+ fun50(V1,V,V2,W3):1
     [V2>=0,V>=0,V1>=0,W3=0] 
* CE 975: start(V1,V,V2,V3) = 0+ fun50(V1,V,V2,W3):2
     [V1>=W3,W3>=1,V2>=0,V>=0] 
* CE 976: start(V1,V,V2,V3) = 0+ fun51(V1,W3):1
     [V1>=0,W3=0] 
* CE 977: start(V1,V,V2,V3) = 0+ fun51(V1,W3):2
     [V1>=W3,W3>=1] 
* CE 978: start(V1,V,V2,V3) = 0+ fun52(V1,V,W3):1
     [V>=0,V1>=0,W3=0] 
* CE 979: start(V1,V,V2,V3) = 0+ fun52(V1,V,W3):2
     [V1>=W3,W3>=1,V>=0] 
* CE 980: start(V1,V,V2,V3) = 0+ fun53(V1,V,W3):1
     [V>=0,V1>=0,W3=0] 
* CE 981: start(V1,V,V2,V3) = 0+ fun53(V1,V,W3):2
     [V1>=W3,W3>=1,V>=0] 
* CE 982: start(V1,V,V2,V3) = 0+ cons(V1,V,W3):1
     [V>=0,V1>=0,W3=0] 
* CE 983: start(V1,V,V2,V3) = 0+ cons(V1,V,W3):2
     [V1>=W3,W3>=1,V>=0] 
* CE 984: start(V1,V,V2,V3) = 0+ fun54(V1,V,W3):1
     [V>=0,V1>=0,W3=0] 
* CE 985: start(V1,V,V2,V3) = 0+ fun54(V1,V,W3):2
     [V1>=W3,W3>=1,V>=0] 
* CE 986: start(V1,V,V2,V3) = 0+ fun55(V1,V,V2,W3):1
     [V2>=0,V>=0,V1>=0,W3=0] 
* CE 987: start(V1,V,V2,V3) = 0+ fun55(V1,V,V2,W3):2
     [V1>=W3,W3>=1,V2>=0,V>=0] 
* CE 988: start(V1,V,V2,V3) = 0+ isNatural(V1,W3):1
     [V1>=0,W3=0] 
* CE 989: start(V1,V,V2,V3) = 0+ isNatural(V1,W3):2
     [V1>=W3,W3>=1] 
* CE 990: start(V1,V,V2,V3) = 0+ fun56(V1,V,V2,W3):1
     [V2>=0,V>=0,V1>=0,W3=0] 
* CE 991: start(V1,V,V2,V3) = 0+ fun56(V1,V,V2,W3):2
     [V1>=W3,W3>=1,V2>=0,V>=0] 
* CE 992: start(V1,V,V2,V3) = 0+ fun57(V1,V,W3):1
     [V>=0,V1>=0,W3=0] 
* CE 993: start(V1,V,V2,V3) = 0+ fun57(V1,V,W3):2
     [V1>=W3,W3>=1,V>=0] 
* CE 994: start(V1,V,V2,V3) = 0+ fun58(V1,V,V2,W3):1
     [V2>=0,V>=0,V1>=0,W3=0] 
* CE 995: start(V1,V,V2,V3) = 0+ fun58(V1,V,V2,W3):2
     [V1>=W3,W3>=1,V2>=0,V>=0] 
* CE 996: start(V1,V,V2,V3) = 0+ fun59(V1,V,V2,W3):1
     [V2>=0,V>=0,V1>=0,W3=0] 
* CE 997: start(V1,V,V2,V3) = 0+ fun59(V1,V,V2,W3):2
     [V1>=W3,W3>=1,V2>=0,V>=0] 
* CE 998: start(V1,V,V2,V3) = 0+ fun60(V1,V,V2,W3):1
     [V2>=0,V>=0,V1>=0,W3=0] 
* CE 999: start(V1,V,V2,V3) = 0+ fun60(V1,V,V2,W3):2
     [V1>=W3,W3>=1,V2>=0,V>=0] 
* CE 1000: start(V1,V,V2,V3) = 0+ fun61(V1,W3):1
     [V1>=0,W3=0] 
* CE 1001: start(V1,V,V2,V3) = 0+ fun61(V1,W3):2
     [V1>=W3,W3>=1] 
* CE 1002: start(V1,V,V2,V3) = 0+ fun62(V1,V,V2,V3,W3):1
     [V3>=0,V2>=0,V>=0,V1>=0,W3=0] 
* CE 1003: start(V1,V,V2,V3) = 0+ fun62(V1,V,V2,V3,W3):2
     [V1>=W3,W3>=1,V3>=0,V2>=0,V>=0] 
* CE 1004: start(V1,V,V2,V3) = 0+ splitAt(V1,V,W3):1
     [V>=0,V1>=0,W3=0] 
* CE 1005: start(V1,V,V2,V3) = 0+ splitAt(V1,V,W3):2
     [V1+V>=W3,W3>=1,V>=0,V1>=0] 
* CE 1006: start(V1,V,V2,V3) = 0+ fun63(V1,V,V2,W3):1
     [V2>=0,V>=0,V1>=0,W3=0] 
* CE 1007: start(V1,V,V2,V3) = 0+ fun63(V1,V,V2,W3):2
     [V1>=W3,W3>=1,V2>=0,V>=0] 
* CE 1008: start(V1,V,V2,V3) = 0+ isPLNat(V1,W3):1
     [V1>=0,W3=0] 
* CE 1009: start(V1,V,V2,V3) = 0+ isPLNat(V1,W3):2
     [V1>=W3,W3>=1] 
* CE 1010: start(V1,V,V2,V3) = 0+ fun64(V1,V,W3):1
     [V>=0,V1>=0,W3=0] 
* CE 1011: start(V1,V,V2,V3) = 0+ fun64(V1,V,W3):2
     [V1>=W3,W3>=1,V>=0] 
* CE 1012: start(V1,V,V2,V3) = 0+ fun65(V1,V,W3):1
     [V>=0,V1>=0,W3=0] 
* CE 1013: start(V1,V,V2,V3) = 0+ fun65(V1,V,W3):2
     [V1>=W3,W3>=1,V>=0] 
* CE 1014: start(V1,V,V2,V3) = 0+ fun66(V1,V,V2,W3):1
     [V2>=0,V>=0,V1>=0,W3=0] 
* CE 1015: start(V1,V,V2,V3) = 0+ fun66(V1,V,V2,W3):2
     [V1>=W3,W3>=1,V2>=0,V>=0] 
* CE 1016: start(V1,V,V2,V3) = 0+ fun67(V1,V,V2,W3):1
     [V2>=0,V>=0,V1>=0,W3=0] 
* CE 1017: start(V1,V,V2,V3) = 0+ fun67(V1,V,V2,W3):2
     [V1>=W3,W3>=1,V2>=0,V>=0] 
* CE 1018: start(V1,V,V2,V3) = 0+ fun68(V1,V,V2,W3):1
     [V2>=0,V>=0,V1>=0,W3=0] 
* CE 1019: start(V1,V,V2,V3) = 0+ fun68(V1,V,V2,W3):2
     [V1>=W3,W3>=1,V2>=0,V>=0] 
* CE 1020: start(V1,V,V2,V3) = 0+ s(V1,W3):1
     [V1>=0,W3=0] 
* CE 1021: start(V1,V,V2,V3) = 0+ s(V1,W3):2
     [V1>=W3,W3>=1] 
* CE 1022: start(V1,V,V2,V3) = 0+ fun69(V1,V,V2,W3):1
     [V2>=0,V>=0,V1>=0,W3=0] 
* CE 1023: start(V1,V,V2,V3) = 0+ fun69(V1,V,V2,W3):2
     [V1>=W3,W3>=1,V2>=0,V>=0] 
* CE 1024: start(V1,V,V2,V3) = 0+ fun70(V1,W3):1
     [V1>=0,W3=0] 
* CE 1025: start(V1,V,V2,V3) = 0+ fun70(V1,W3):2
     [V1>=W3,W3>=1] 
* CE 1026: start(V1,V,V2,V3) = 0+ fun71(V1,W3):1
     [V1>=0,W3=0] 
* CE 1027: start(V1,V,V2,V3) = 0+ fun71(V1,W3):2
     [V1>=W3,W3>=1] 
* CE 1028: start(V1,V,V2,V3) = 0+ fun72(V1,V,V2,W3):1
     [V2>=0,V>=0,V1>=0,W3=0] 
* CE 1029: start(V1,V,V2,V3) = 0+ fun72(V1,V,V2,W3):2
     [V1>=W3,W3>=1,V2>=0,V>=0] 
* CE 1030: start(V1,V,V2,V3) = 0+ proper(W3,X3):1
     [X3=1,W3=0,V1=0] 
* CE 1031: start(V1,V,V2,V3) = 0+ proper(W3,X3):2
     [X3=2,W3=1,V1=1] 
* CE 1032: start(V1,V,V2,V3) = 0+ proper(W3,X3):3
     [X3=3,W3=2,V1=2] 
* CE 1033: start(V1,V,V2,V3) = 0+ proper(V1,W3):4
     [V1>=0,W3=0] 
* CE 1034: start(V1,V,V2,V3) = 0+ fun73(V1,W3):1
     [V1>=0,W3=0] 
* CE 1035: start(V1,V,V2,V3) = 0+ fun73(V1,W3):2
     [V1>=W3,W3>=1] 
* CE 1036: start(V1,V,V2,V3) = 0+ fun74(V1,V,V2,W3):1
     [V2>=0,V>=0,V1>=0,W3=0] 
* CE 1037: start(V1,V,V2,V3) = 0+ fun74(V1,V,V2,W3):2
     [V1>=W3,W3>=1,V2>=0,V>=0] 
* CE 1038: start(V1,V,V2,V3) = 0+ fun75(V1,V,W3):1
     [V>=0,V1>=0,W3=0] 
* CE 1039: start(V1,V,V2,V3) = 0+ fun75(V1,V,W3):2
     [V1>=W3,W3>=1,V>=0] 
* CE 1040: start(V1,V,V2,V3) = 0+ fun76(V1,V,W3):1
     [V>=0,V1>=0,W3=0] 
* CE 1041: start(V1,V,V2,V3) = 0+ fun76(V1,V,W3):2
     [V1>=W3,W3>=1,V>=0] 
* CE 1042: start(V1,V,V2,V3) = 0+ fun77(V1,V,V2,W3):1
     [V2>=0,V>=0,V1>=0,W3=0] 
* CE 1043: start(V1,V,V2,V3) = 0+ fun77(V1,V,V2,W3):2
     [V1>=W3,W3>=1,V2>=0,V>=0] 
* CE 1044: start(V1,V,V2,V3) = 0+ fun78(V1,W3):1
     [V1>=0,W3=0] 
* CE 1045: start(V1,V,V2,V3) = 0+ fun78(V1,W3):2
     [V1>=W3,W3>=1] 
* CE 1046: start(V1,V,V2,V3) = 0+ fun79(V1,V,W3):1
     [V>=0,V1>=0,W3=0] 
* CE 1047: start(V1,V,V2,V3) = 0+ fun79(V1,V,W3):2
     [V1>=W3,W3>=1,V>=0] 
* CE 1048: start(V1,V,V2,V3) = 0+ fun80(V1,V,V2,V3,W3):1
     [V3>=0,V2>=0,V>=0,V1>=0,W3=0] 
* CE 1049: start(V1,V,V2,V3) = 0+ fun80(V1,V,V2,V3,W3):2
     [V1>=W3,W3>=1,V3>=0,V2>=0,V>=0] 
* CE 1050: start(V1,V,V2,V3) = 0+ fun81(V1,V,V2,W3):1
     [V2>=0,V>=0,V1>=0,W3=0] 
* CE 1051: start(V1,V,V2,V3) = 0+ fun81(V1,V,V2,W3):2
     [V1>=W3,W3>=1,V2>=0,V>=0] 
* CE 1052: start(V1,V,V2,V3) = 0+ fun82(V1,V,V2,W3):1
     [V2>=0,V>=0,V1>=0,W3=0] 
* CE 1053: start(V1,V,V2,V3) = 0+ fun82(V1,V,V2,W3):2
     [V1>=W3,W3>=1,V2>=0,V>=0] 
* CE 1054: start(V1,V,V2,V3) = 0+ fun83(V1,V,W3):1
     [V>=0,V1>=0,W3=0] 
* CE 1055: start(V1,V,V2,V3) = 0+ fun83(V1,V,W3):2
     [V1>=W3,W3>=1,V>=0] 
* CE 1056: start(V1,V,V2,V3) = 0+ fun84(V1,V,V2,W3):1
     [V2>=0,V>=0,V1>=0,W3=0] 
* CE 1057: start(V1,V,V2,V3) = 0+ fun84(V1,V,V2,W3):2
     [V1>=W3,W3>=1,V2>=0,V>=0] 
* CE 1058: start(V1,V,V2,V3) = 0+ fun85(V1,V,V2,W3):1
     [V2>=0,V>=0,V1>=0,W3=0] 
* CE 1059: start(V1,V,V2,V3) = 0+ fun85(V1,V,V2,W3):2
     [V1>=W3,W3>=1,V2>=0,V>=0] 
* CE 1060: start(V1,V,V2,V3) = 0+ fun86(V1,V,W3):1
     [V>=0,V1>=0,W3=0] 
* CE 1061: start(V1,V,V2,V3) = 0+ fun86(V1,V,W3):2
     [V1>=W3,W3>=1,V>=0] 
* CE 1062: start(V1,V,V2,V3) = 0+ afterNth(V1,V,W3):1
     [V>=0,V1>=0,W3=0] 
* CE 1063: start(V1,V,V2,V3) = 0+ afterNth(V1,V,W3):2
     [V1+V>=W3,W3>=1,V>=0,V1>=0] 
* CE 1064: start(V1,V,V2,V3) = 0+ isLNat(V1,W3):1
     [V1>=0,W3=0] 
* CE 1065: start(V1,V,V2,V3) = 0+ isLNat(V1,W3):2
     [V1>=W3,W3>=1] 
* CE 1066: start(V1,V,V2,V3) = 0+ fun87(V1,V,V2,W3):1
     [V2>=0,V>=0,V1>=0,W3=0] 
* CE 1067: start(V1,V,V2,V3) = 0+ fun87(V1,V,V2,W3):2
     [V1>=W3,W3>=1,V2>=0,V>=0] 
* CE 1068: start(V1,V,V2,V3) = 0+ fun88(V1,V,W3):1
     [V>=0,V1>=0,W3=0] 
* CE 1069: start(V1,V,V2,V3) = 0+ fun88(V1,V,W3):2
     [V1>=W3,W3>=1,V>=0] 
* CE 1070: start(V1,V,V2,V3) = 0+ fun89(V1,V,V2,W3):1
     [V2>=0,V>=0,V1>=0,W3=0] 
* CE 1071: start(V1,V,V2,V3) = 0+ fun89(V1,V,V2,W3):2
     [V1>=W3,W3>=1,V2>=0,V>=0] 
* CE 1072: start(V1,V,V2,V3) = 0+ fun90(V1,W3):1
     [V1>=0,W3=0] 
* CE 1073: start(V1,V,V2,V3) = 0+ fun90(V1,W3):2
     [V1>=W3,W3>=1] 
* CE 1074: start(V1,V,V2,V3) = 0+ isLNatKind(V1,W3):1
     [V1>=0,W3=0] 
* CE 1075: start(V1,V,V2,V3) = 0+ isLNatKind(V1,W3):2
     [V1>=W3,W3>=1] 
* CE 1076: start(V1,V,V2,V3) = 0+ fun91(V1,W3):1
     [V1>=0,W3=0] 
* CE 1077: start(V1,V,V2,V3) = 0+ fun91(V1,W3):2
     [V1>=W3,W3>=1] 
* CE 1078: start(V1,V,V2,V3) = 0+ fun92(V1,W3):1
     [V1>=0,W3=0] 
* CE 1079: start(V1,V,V2,V3) = 0+ fun92(V1,W3):2
     [V1>=W3,W3>=1] 
* CE 1080: start(V1,V,V2,V3) = 0+ head(V1,W3):1
     [V1>=0,W3=0] 
* CE 1081: start(V1,V,V2,V3) = 0+ head(V1,W3):2
     [V1>=W3,W3>=1] 
* CE 1082: start(V1,V,V2,V3) = 0+ fst(V1,W3):1
     [V1>=0,W3=0] 
* CE 1083: start(V1,V,V2,V3) = 0+ fst(V1,W3):2
     [V1>=W3,W3>=1] 
* CE 1084: start(V1,V,V2,V3) = 0+ tail(V1,W3):1
     [V1>=0,W3=0] 
* CE 1085: start(V1,V,V2,V3) = 0+ tail(V1,W3):2
     [V1>=W3,W3>=1] 
* CE 1086: start(V1,V,V2,V3) = 0+ fun93(V1,W3):1
     [V1>=0,W3=0] 
* CE 1087: start(V1,V,V2,V3) = 0+ fun93(V1,W3):2
     [V1>=W3,W3>=1] 
* CE 1088: start(V1,V,V2,V3) = 0+ fun94(V1,W3):1
     [V1>=0,W3=0] 
* CE 1089: start(V1,V,V2,V3) = 0+ fun94(V1,W3):2
     [V1>=W3,W3>=1] 
* CE 1090: start(V1,V,V2,V3) = 0+ fun95(V1,V,V2,V3,W3):1
     [V3>=0,V2>=0,V>=0,V1>=0,W3=0] 
* CE 1091: start(V1,V,V2,V3) = 0+ fun95(V1,V,V2,V3,W3):2
     [V1>=W3,W3>=1,V3>=0,V2>=0,V>=0] 
* CE 1092: start(V1,V,V2,V3) = 0+ fun96(V1,W3):1
     [V1>=0,W3=0] 
* CE 1093: start(V1,V,V2,V3) = 0+ fun96(V1,W3):2
     [V1>=W3,W3>=1] 
* CE 1094: start(V1,V,V2,V3) = 0+ fun97(V1,W3):1
     [V1>=0,W3=0] 
* CE 1095: start(V1,V,V2,V3) = 0+ fun97(V1,W3):2
     [V1>=W3,W3>=1] 
* CE 1096: start(V1,V,V2,V3) = 0+ fun98(V1,V,W3):1
     [V>=0,V1>=0,W3=0] 
* CE 1097: start(V1,V,V2,V3) = 0+ fun98(V1,V,W3):2
     [V1>=W3,W3>=1,V>=0] 
* CE 1098: start(V1,V,V2,V3) = 0+ fun99(V1,V,V2,W3):1
     [V2>=0,V>=0,V1>=0,W3=0] 
* CE 1099: start(V1,V,V2,V3) = 0+ fun99(V1,V,V2,W3):2
     [V1>=W3,W3>=1,V2>=0,V>=0] 
* CE 1100: start(V1,V,V2,V3) = 0+ fun100(V1,V,W3):1
     [V>=0,V1>=0,W3=0] 
* CE 1101: start(V1,V,V2,V3) = 0+ fun100(V1,V,W3):2
     [V1>=W3,W3>=1,V>=0] 
* CE 1102: start(V1,V,V2,V3) = 0+ fun101(V1,V,W3):1
     [V>=0,V1>=0,W3=0] 
* CE 1103: start(V1,V,V2,V3) = 0+ fun101(V1,V,W3):2
     [V1>=W3,W3>=1,V>=0] 
* CE 1104: start(V1,V,V2,V3) = 0+ isPLNatKind(V1,W3):1
     [V1>=0,W3=0] 
* CE 1105: start(V1,V,V2,V3) = 0+ isPLNatKind(V1,W3):2
     [V1>=W3,W3>=1] 
* CE 1106: start(V1,V,V2,V3) = 0+ fun102(V1,W3):1
     [V1>=0,W3=0] 
* CE 1107: start(V1,V,V2,V3) = 0+ fun102(V1,W3):2
     [V1>=W3,W3>=1] 
* CE 1108: start(V1,V,V2,V3) = 0+ fun103(V1,V,W3):1
     [V>=0,V1>=0,W3=0] 
* CE 1109: start(V1,V,V2,V3) = 0+ fun103(V1,V,W3):2
     [V1>=W3,W3>=1,V>=0] 
* CE 1110: start(V1,V,V2,V3) = 0+ fun104(V1,V,W3):1
     [V>=0,V1>=0,W3=0] 
* CE 1111: start(V1,V,V2,V3) = 0+ fun104(V1,V,W3):2
     [V1>=W3,W3>=1,V>=0] 
* CE 1112: start(V1,V,V2,V3) = 0+ snd(V1,W3):1
     [V1>=0,W3=0] 
* CE 1113: start(V1,V,V2,V3) = 0+ snd(V1,W3):2
     [V1>=W3,W3>=1] 
* CE 1114: start(V1,V,V2,V3) = 0+ fun105(V1,W3):1
     [V1>=0,W3=0] 
* CE 1115: start(V1,V,V2,V3) = 0+ fun105(V1,W3):2
     [V1>=W3,W3>=1] 
* CE 1116: start(V1,V,V2,V3) = 0+ fun106(V1,W3):1
     [V1>=0,W3=0] 
* CE 1117: start(V1,V,V2,V3) = 0+ fun106(V1,W3):2
     [V1>=W3,W3>=1] 
* CE 1118: start(V1,V,V2,V3) = 0+ fun107(V1,V,V2,W3):1
     [V2>=0,V>=0,V1>=0,W3=0] 
* CE 1119: start(V1,V,V2,V3) = 0+ fun107(V1,V,V2,W3):2
     [V1>=W3,W3>=1,V2>=0,V>=0] 
* CE 1120: start(V1,V,V2,V3) = 0+ fun108(V1,V,W3):1
     [V>=0,V1>=0,W3=0] 
* CE 1121: start(V1,V,V2,V3) = 0+ fun108(V1,V,W3):2
     [V1>=W3,W3>=1,V>=0] 
* CE 1122: start(V1,V,V2,V3) = 0+ fun109(V1,V,W3):1
     [V>=0,V1>=0,W3=0] 
* CE 1123: start(V1,V,V2,V3) = 0+ fun109(V1,V,W3):2
     [V1>=W3,W3>=1,V>=0] 
* CE 1124: start(V1,V,V2,V3) = 0+ fun110(V1,V,W3):1
     [V>=0,V1>=0,W3=0] 
* CE 1125: start(V1,V,V2,V3) = 0+ fun110(V1,V,W3):2
     [V1>=W3,W3>=1,V>=0] 

### Cost equations --> "Loop" of start/4 
* CEs [1032] --> Loop 729 
* CEs [1031] --> Loop 730 
* CEs [862,863,864,865,866,867,868,870,871,872,873,874,875,876,877,878,879,880,881,882,883,884,885,886,887,888,889,890,891,892,893,894,895,896,897,898,899,900,901,902,903,904,905,906,907,908,909,910,911,912,913,914,915,916,917,918,919,920,921,922,923,924,925,926,927,928,929,930,931,932,933,934,935,936,937,938,939,940,941,942,943,944,945,946,947,948,949,950,951,952,953,954,955,956,957,958,959,960,961,962,963,964,965,966,967,968,969,970,971,972,973,974,975,976,977,978,979,980,981,982,983,984,985,986,987,988,989,990,991,992,993,994,995,996,997,998,999,1000,1001,1002,1003,1004,1005,1006,1007,1008,1009,1010,1011,1012,1013,1014,1015,1016,1017,1018,1019,1020,1021,1022,1023,1024,1025,1026,1027,1028,1029,1030,1033,1034,1035,1036,1037,1038,1039,1040,1041,1042,1043,1044,1045,1046,1047,1048,1049,1050,1051,1052,1053,1054,1055,1056,1057,1058,1059,1060,1061,1062,1063,1064,1065,1066,1067,1068,1069,1070,1071,1072,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1086,1087,1088,1089,1090,1091,1092,1093,1094,1095,1096,1097,1098,1099,1100,1101,1102,1103,1104,1105,1106,1107,1108,1109,1110,1111,1112,1113,1114,1115,1116,1117,1118,1119,1120,1121,1122,1123,1124,1125] --> Loop 731 
* CEs [869] --> Loop 732 

#### Loops of start/4 
* Loop 729: start(V1,V,V2,V3) [V1=2] 
* Loop 730: start(V1,V,V2,V3) [V1=1] 
* Loop 731: start(V1,V,V2,V3) [V1>=0] 
* Loop 732: start(V1,V,V2,V3) [V1>=1] 

### Ranking functions of CR start(V1,V,V2,V3) 

#### Partial ranking functions of CR start(V1,V,V2,V3) 


### Resulting Chains:start(V1,V,V2,V3) 
* [732]...
* [731]
* [730]
* [729]


### Merging Chains  start/4 into  External patterns of execution 
* [[730],[731]] --> 1 
* [[729]] --> 2 
* [[732]] --> 3 


Computing Bounds
=====================================

#### Cost of loops [364,365,366] 

 * loop 364:afterNth(V1,V,Out) -> [afterNth(V1',V',Out')] 
1
 * loop 365:afterNth(V1,V,Out) -> [afterNth(V1',V',Out')] 
1
 * loop 366:afterNth(V1,V,Out) -> [afterNth(V1',V',Out')] 
1
#### Cost of phase [364,365,366]:afterNth(V1,V,Out) -> [afterNth(V1',V',Out')] 
1*it(364)+1*it(365)+1*it(366)+0
  Such that:aux(1) =< V1
aux(2) =< V1+V
aux(3) =< V1+V-V1'-V'
aux(4) =< V1-V1'
aux(5) =< V
aux(6) =< V-V'
it(365) =< aux(1)
it(366) =< aux(1)
it(364) =< aux(2)
it(365) =< aux(2)
it(366) =< aux(2)
it(364) =< aux(3)
it(365) =< aux(3)
it(366) =< aux(3)
it(365) =< aux(4)
it(366) =< aux(4)
it(364) =< aux(5)
it(366) =< aux(5)
it(364) =< aux(6)
it(366) =< aux(6)

#### Cost of chains of afterNth(V1,V,Out):
* Chain [[364,365,366],367]: 1*it(364)+1*it(365)+1*it(366)+0
  Such that:aux(7) =< V1
aux(8) =< V1+V
aux(9) =< V
it(365) =< aux(7)
it(366) =< aux(7)
it(364) =< aux(8)
it(365) =< aux(8)
it(366) =< aux(8)
it(364) =< aux(9)
it(366) =< aux(9)

  with precondition: [V1>=0,V>=0,Out>=1,V+V1>=Out] 

* Chain [367]: 0
  with precondition: [Out=0,V1>=0,V>=0] 


#### Cost of loops [368,369] 

 * loop 368:cons(V1,V,Out) -> [cons(V1',V',Out')] 
1
 * loop 369:cons(V1,V,Out) -> [cons(V1',V',Out')] 
1
#### Cost of phase [368,369]:cons(V1,V,Out) -> [cons(V1',V',Out')] 
1*it(368)+1*it(369)+0
  Such that:it(369) =< V
it(369) =< V-V'
aux(10) =< V1
aux(11) =< V1-V1'
it(368) =< aux(10)
it(369) =< aux(10)
it(368) =< aux(11)
it(369) =< aux(11)

#### Cost of chains of cons(V1,V,Out):
* Chain [[368,369],370]: 1*it(368)+1*it(369)+0
  Such that:aux(10) =< V1
it(369) =< V
aux(11) =< Out
it(368) =< aux(10)
it(369) =< aux(10)
it(368) =< aux(11)
it(369) =< aux(11)

  with precondition: [V>=0,Out>=1,V1>=Out] 

* Chain [370]: 0
  with precondition: [Out=0,V1>=0,V>=0] 


#### Cost of loops [371] 

 * loop 371:fst(V1,Out) -> [fst(V1',Out')] 
1
#### Cost of phase [371]:fst(V1,Out) -> [fst(V1',Out')] 
1*it(371)+0
  Such that:it(371) =< V1
it(371) =< V1-V1'

#### Cost of chains of fst(V1,Out):
* Chain [[371],372]: 1*it(371)+0
  Such that:it(371) =< Out

  with precondition: [Out>=1,V1>=Out] 

* Chain [372]: 0
  with precondition: [Out=0,V1>=0] 


#### Cost of loops [373,374] 

 * loop 373:fun(V1,V,V2,Out) -> [fun(V1',V',V2',Out')] 
1
 * loop 374:fun(V1,V,V2,Out) -> [fun(V1',V',V2',Out')] 
1
#### Cost of phase [373,374]:fun(V1,V,V2,Out) -> [fun(V1',V',V2',Out')] 
1*it(373)+1*it(374)+0
  Such that:it(374) =< V
it(374) =< V-V'
it(374) =< V2
it(374) =< V2-V2'
aux(12) =< V1
aux(13) =< V1-V1'
it(373) =< aux(12)
it(374) =< aux(12)
it(373) =< aux(13)
it(374) =< aux(13)

#### Cost of chains of fun(V1,V,V2,Out):
* Chain [[373,374],375]: 1*it(373)+1*it(374)+0
  Such that:aux(12) =< V1
it(374) =< V
aux(13) =< Out
it(373) =< aux(12)
it(374) =< aux(12)
it(373) =< aux(13)
it(374) =< aux(13)

  with precondition: [V>=0,V2>=0,Out>=1,V1>=Out] 

* Chain [375]: 0
  with precondition: [Out=0,V1>=0,V>=0,V2>=0] 


#### Cost of loops [376,377] 

 * loop 376:fun1(V1,V,Out) -> [fun1(V1',V',Out')] 
1
 * loop 377:fun1(V1,V,Out) -> [fun1(V1',V',Out')] 
1
#### Cost of phase [376,377]:fun1(V1,V,Out) -> [fun1(V1',V',Out')] 
1*it(376)+1*it(377)+0
  Such that:it(377) =< V
it(377) =< V-V'
aux(14) =< V1
aux(15) =< V1-V1'
it(376) =< aux(14)
it(377) =< aux(14)
it(376) =< aux(15)
it(377) =< aux(15)

#### Cost of chains of fun1(V1,V,Out):
* Chain [[376,377],378]: 1*it(376)+1*it(377)+0
  Such that:aux(14) =< V1
it(377) =< V
aux(15) =< Out
it(376) =< aux(14)
it(377) =< aux(14)
it(376) =< aux(15)
it(377) =< aux(15)

  with precondition: [V>=0,Out>=1,V1>=Out] 

* Chain [378]: 0
  with precondition: [Out=0,V1>=0,V>=0] 


#### Cost of loops [379,380] 

 * loop 379:fun10(V1,V,V2,Out) -> [fun10(V1',V',V2',Out')] 
1
 * loop 380:fun10(V1,V,V2,Out) -> [fun10(V1',V',V2',Out')] 
1
#### Cost of phase [379,380]:fun10(V1,V,V2,Out) -> [fun10(V1',V',V2',Out')] 
1*it(379)+1*it(380)+0
  Such that:it(380) =< V
it(380) =< V-V'
it(380) =< V2
it(380) =< V2-V2'
aux(16) =< V1
aux(17) =< V1-V1'
it(379) =< aux(16)
it(380) =< aux(16)
it(379) =< aux(17)
it(380) =< aux(17)

#### Cost of chains of fun10(V1,V,V2,Out):
* Chain [[379,380],381]: 1*it(379)+1*it(380)+0
  Such that:aux(16) =< V1
it(380) =< V
aux(17) =< Out
it(379) =< aux(16)
it(380) =< aux(16)
it(379) =< aux(17)
it(380) =< aux(17)

  with precondition: [V>=0,V2>=0,Out>=1,V1>=Out] 

* Chain [381]: 0
  with precondition: [Out=0,V1>=0,V>=0,V2>=0] 


#### Cost of loops [382,383] 

 * loop 382:fun100(V1,V,Out) -> [fun100(V1',V',Out')] 
1
 * loop 383:fun100(V1,V,Out) -> [fun100(V1',V',Out')] 
1
#### Cost of phase [382,383]:fun100(V1,V,Out) -> [fun100(V1',V',Out')] 
1*it(382)+1*it(383)+0
  Such that:it(383) =< V
it(383) =< V-V'
aux(18) =< V1
aux(19) =< V1-V1'
it(382) =< aux(18)
it(383) =< aux(18)
it(382) =< aux(19)
it(383) =< aux(19)

#### Cost of chains of fun100(V1,V,Out):
* Chain [[382,383],384]: 1*it(382)+1*it(383)+0
  Such that:aux(18) =< V1
it(383) =< V
aux(19) =< Out
it(382) =< aux(18)
it(383) =< aux(18)
it(382) =< aux(19)
it(383) =< aux(19)

  with precondition: [V>=0,Out>=1,V1>=Out] 

* Chain [384]: 0
  with precondition: [Out=0,V1>=0,V>=0] 


#### Cost of loops [385,386] 

 * loop 385:fun101(V1,V,Out) -> [fun101(V1',V',Out')] 
1
 * loop 386:fun101(V1,V,Out) -> [fun101(V1',V',Out')] 
1
#### Cost of phase [385,386]:fun101(V1,V,Out) -> [fun101(V1',V',Out')] 
1*it(385)+1*it(386)+0
  Such that:it(386) =< V
it(386) =< V-V'
aux(20) =< V1
aux(21) =< V1-V1'
it(385) =< aux(20)
it(386) =< aux(20)
it(385) =< aux(21)
it(386) =< aux(21)

#### Cost of chains of fun101(V1,V,Out):
* Chain [[385,386],387]: 1*it(385)+1*it(386)+0
  Such that:aux(20) =< V1
it(386) =< V
aux(21) =< Out
it(385) =< aux(20)
it(386) =< aux(20)
it(385) =< aux(21)
it(386) =< aux(21)

  with precondition: [V>=0,Out>=1,V1>=Out] 

* Chain [387]: 0
  with precondition: [Out=0,V1>=0,V>=0] 


#### Cost of loops [388] 

 * loop 388:fun102(V1,Out) -> [fun102(V1',Out')] 
1
#### Cost of phase [388]:fun102(V1,Out) -> [fun102(V1',Out')] 
1*it(388)+0
  Such that:it(388) =< V1
it(388) =< V1-V1'

#### Cost of chains of fun102(V1,Out):
* Chain [[388],389]: 1*it(388)+0
  Such that:it(388) =< Out

  with precondition: [Out>=1,V1>=Out] 

* Chain [389]: 0
  with precondition: [Out=0,V1>=0] 


#### Cost of loops [390,391] 

 * loop 390:fun103(V1,V,Out) -> [fun103(V1',V',Out')] 
1
 * loop 391:fun103(V1,V,Out) -> [fun103(V1',V',Out')] 
1
#### Cost of phase [390,391]:fun103(V1,V,Out) -> [fun103(V1',V',Out')] 
1*it(390)+1*it(391)+0
  Such that:it(391) =< V
it(391) =< V-V'
aux(22) =< V1
aux(23) =< V1-V1'
it(390) =< aux(22)
it(391) =< aux(22)
it(390) =< aux(23)
it(391) =< aux(23)

#### Cost of chains of fun103(V1,V,Out):
* Chain [[390,391],392]: 1*it(390)+1*it(391)+0
  Such that:aux(22) =< V1
it(391) =< V
aux(23) =< Out
it(390) =< aux(22)
it(391) =< aux(22)
it(390) =< aux(23)
it(391) =< aux(23)

  with precondition: [V>=0,Out>=1,V1>=Out] 

* Chain [392]: 0
  with precondition: [Out=0,V1>=0,V>=0] 


#### Cost of loops [393,394] 

 * loop 393:fun104(V1,V,Out) -> [fun104(V1',V',Out')] 
1
 * loop 394:fun104(V1,V,Out) -> [fun104(V1',V',Out')] 
1
#### Cost of phase [393,394]:fun104(V1,V,Out) -> [fun104(V1',V',Out')] 
1*it(393)+1*it(394)+0
  Such that:it(394) =< V
it(394) =< V-V'
aux(24) =< V1
aux(25) =< V1-V1'
it(393) =< aux(24)
it(394) =< aux(24)
it(393) =< aux(25)
it(394) =< aux(25)

#### Cost of chains of fun104(V1,V,Out):
* Chain [[393,394],395]: 1*it(393)+1*it(394)+0
  Such that:aux(24) =< V1
it(394) =< V
aux(25) =< Out
it(393) =< aux(24)
it(394) =< aux(24)
it(393) =< aux(25)
it(394) =< aux(25)

  with precondition: [V>=0,Out>=1,V1>=Out] 

* Chain [395]: 0
  with precondition: [Out=0,V1>=0,V>=0] 


#### Cost of loops [396] 

 * loop 396:fun105(V1,Out) -> [fun105(V1',Out')] 
1
#### Cost of phase [396]:fun105(V1,Out) -> [fun105(V1',Out')] 
1*it(396)+0
  Such that:it(396) =< V1
it(396) =< V1-V1'

#### Cost of chains of fun105(V1,Out):
* Chain [[396],397]: 1*it(396)+0
  Such that:it(396) =< Out

  with precondition: [Out>=1,V1>=Out] 

* Chain [397]: 0
  with precondition: [Out=0,V1>=0] 


#### Cost of loops [398] 

 * loop 398:fun106(V1,Out) -> [fun106(V1',Out')] 
1
#### Cost of phase [398]:fun106(V1,Out) -> [fun106(V1',Out')] 
1*it(398)+0
  Such that:it(398) =< V1
it(398) =< V1-V1'

#### Cost of chains of fun106(V1,Out):
* Chain [[398],399]: 1*it(398)+0
  Such that:it(398) =< Out

  with precondition: [Out>=1,V1>=Out] 

* Chain [399]: 0
  with precondition: [Out=0,V1>=0] 


#### Cost of loops [400,401] 

 * loop 400:fun107(V1,V,V2,Out) -> [fun107(V1',V',V2',Out')] 
1
 * loop 401:fun107(V1,V,V2,Out) -> [fun107(V1',V',V2',Out')] 
1
#### Cost of phase [400,401]:fun107(V1,V,V2,Out) -> [fun107(V1',V',V2',Out')] 
1*it(400)+1*it(401)+0
  Such that:it(401) =< V
it(401) =< V-V'
it(401) =< V2
it(401) =< V2-V2'
aux(26) =< V1
aux(27) =< V1-V1'
it(400) =< aux(26)
it(401) =< aux(26)
it(400) =< aux(27)
it(401) =< aux(27)

#### Cost of chains of fun107(V1,V,V2,Out):
* Chain [[400,401],402]: 1*it(400)+1*it(401)+0
  Such that:aux(26) =< V1
it(401) =< V
aux(27) =< Out
it(400) =< aux(26)
it(401) =< aux(26)
it(400) =< aux(27)
it(401) =< aux(27)

  with precondition: [V>=0,V2>=0,Out>=1,V1>=Out] 

* Chain [402]: 0
  with precondition: [Out=0,V1>=0,V>=0,V2>=0] 


#### Cost of loops [403,404] 

 * loop 403:fun108(V1,V,Out) -> [fun108(V1',V',Out')] 
1
 * loop 404:fun108(V1,V,Out) -> [fun108(V1',V',Out')] 
1
#### Cost of phase [403,404]:fun108(V1,V,Out) -> [fun108(V1',V',Out')] 
1*it(403)+1*it(404)+0
  Such that:it(404) =< V
it(404) =< V-V'
aux(28) =< V1
aux(29) =< V1-V1'
it(403) =< aux(28)
it(404) =< aux(28)
it(403) =< aux(29)
it(404) =< aux(29)

#### Cost of chains of fun108(V1,V,Out):
* Chain [[403,404],405]: 1*it(403)+1*it(404)+0
  Such that:aux(28) =< V1
it(404) =< V
aux(29) =< Out
it(403) =< aux(28)
it(404) =< aux(28)
it(403) =< aux(29)
it(404) =< aux(29)

  with precondition: [V>=0,Out>=1,V1>=Out] 

* Chain [405]: 0
  with precondition: [Out=0,V1>=0,V>=0] 


#### Cost of loops [406,407] 

 * loop 406:fun109(V1,V,Out) -> [fun109(V1',V',Out')] 
1
 * loop 407:fun109(V1,V,Out) -> [fun109(V1',V',Out')] 
1
#### Cost of phase [406,407]:fun109(V1,V,Out) -> [fun109(V1',V',Out')] 
1*it(406)+1*it(407)+0
  Such that:it(407) =< V
it(407) =< V-V'
aux(30) =< V1
aux(31) =< V1-V1'
it(406) =< aux(30)
it(407) =< aux(30)
it(406) =< aux(31)
it(407) =< aux(31)

#### Cost of chains of fun109(V1,V,Out):
* Chain [[406,407],408]: 1*it(406)+1*it(407)+0
  Such that:aux(30) =< V1
it(407) =< V
aux(31) =< Out
it(406) =< aux(30)
it(407) =< aux(30)
it(406) =< aux(31)
it(407) =< aux(31)

  with precondition: [V>=0,Out>=1,V1>=Out] 

* Chain [408]: 0
  with precondition: [Out=0,V1>=0,V>=0] 


#### Cost of loops [409] 

 * loop 409:fun11(V1,Out) -> [fun11(V1',Out')] 
1
#### Cost of phase [409]:fun11(V1,Out) -> [fun11(V1',Out')] 
1*it(409)+0
  Such that:it(409) =< V1
it(409) =< V1-V1'

#### Cost of chains of fun11(V1,Out):
* Chain [[409],410]: 1*it(409)+0
  Such that:it(409) =< Out

  with precondition: [Out>=1,V1>=Out] 

* Chain [410]: 0
  with precondition: [Out=0,V1>=0] 


#### Cost of loops [411,412] 

 * loop 411:fun110(V1,V,Out) -> [fun110(V1',V',Out')] 
1
 * loop 412:fun110(V1,V,Out) -> [fun110(V1',V',Out')] 
1
#### Cost of phase [411,412]:fun110(V1,V,Out) -> [fun110(V1',V',Out')] 
1*it(411)+1*it(412)+0
  Such that:it(412) =< V
it(412) =< V-V'
aux(32) =< V1
aux(33) =< V1-V1'
it(411) =< aux(32)
it(412) =< aux(32)
it(411) =< aux(33)
it(412) =< aux(33)

#### Cost of chains of fun110(V1,V,Out):
* Chain [[411,412],413]: 1*it(411)+1*it(412)+0
  Such that:aux(32) =< V1
it(412) =< V
aux(33) =< Out
it(411) =< aux(32)
it(412) =< aux(32)
it(411) =< aux(33)
it(412) =< aux(33)

  with precondition: [V>=0,Out>=1,V1>=Out] 

* Chain [413]: 0
  with precondition: [Out=0,V1>=0,V>=0] 


#### Cost of loops [414,415] 

 * loop 414:fun12(V1,V,Out) -> [fun12(V1',V',Out')] 
1
 * loop 415:fun12(V1,V,Out) -> [fun12(V1',V',Out')] 
1
#### Cost of phase [414,415]:fun12(V1,V,Out) -> [fun12(V1',V',Out')] 
1*it(414)+1*it(415)+0
  Such that:it(415) =< V
it(415) =< V-V'
aux(34) =< V1
aux(35) =< V1-V1'
it(414) =< aux(34)
it(415) =< aux(34)
it(414) =< aux(35)
it(415) =< aux(35)

#### Cost of chains of fun12(V1,V,Out):
* Chain [[414,415],416]: 1*it(414)+1*it(415)+0
  Such that:aux(34) =< V1
it(415) =< V
aux(35) =< Out
it(414) =< aux(34)
it(415) =< aux(34)
it(414) =< aux(35)
it(415) =< aux(35)

  with precondition: [V>=0,Out>=1,V1>=Out] 

* Chain [416]: 0
  with precondition: [Out=0,V1>=0,V>=0] 


#### Cost of loops [417,418] 

 * loop 417:fun13(V1,V,Out) -> [fun13(V1',V',Out')] 
1
 * loop 418:fun13(V1,V,Out) -> [fun13(V1',V',Out')] 
1
#### Cost of phase [417,418]:fun13(V1,V,Out) -> [fun13(V1',V',Out')] 
1*it(417)+1*it(418)+0
  Such that:it(418) =< V
it(418) =< V-V'
aux(36) =< V1
aux(37) =< V1-V1'
it(417) =< aux(36)
it(418) =< aux(36)
it(417) =< aux(37)
it(418) =< aux(37)

#### Cost of chains of fun13(V1,V,Out):
* Chain [[417,418],419]: 1*it(417)+1*it(418)+0
  Such that:aux(36) =< V1
it(418) =< V
aux(37) =< Out
it(417) =< aux(36)
it(418) =< aux(36)
it(417) =< aux(37)
it(418) =< aux(37)

  with precondition: [V>=0,Out>=1,V1>=Out] 

* Chain [419]: 0
  with precondition: [Out=0,V1>=0,V>=0] 


#### Cost of loops [420,421] 

 * loop 420:fun14(V1,V,V2,Out) -> [fun14(V1',V',V2',Out')] 
1
 * loop 421:fun14(V1,V,V2,Out) -> [fun14(V1',V',V2',Out')] 
1
#### Cost of phase [420,421]:fun14(V1,V,V2,Out) -> [fun14(V1',V',V2',Out')] 
1*it(420)+1*it(421)+0
  Such that:it(421) =< V
it(421) =< V-V'
it(421) =< V2
it(421) =< V2-V2'
aux(38) =< V1
aux(39) =< V1-V1'
it(420) =< aux(38)
it(421) =< aux(38)
it(420) =< aux(39)
it(421) =< aux(39)

#### Cost of chains of fun14(V1,V,V2,Out):
* Chain [[420,421],422]: 1*it(420)+1*it(421)+0
  Such that:aux(38) =< V1
it(421) =< V
aux(39) =< Out
it(420) =< aux(38)
it(421) =< aux(38)
it(420) =< aux(39)
it(421) =< aux(39)

  with precondition: [V>=0,V2>=0,Out>=1,V1>=Out] 

* Chain [422]: 0
  with precondition: [Out=0,V1>=0,V>=0,V2>=0] 


#### Cost of loops [423,424] 

 * loop 423:fun15(V1,V,V2,V3,Out) -> [fun15(V1',V',V2',V3',Out')] 
1
 * loop 424:fun15(V1,V,V2,V3,Out) -> [fun15(V1',V',V2',V3',Out')] 
1
#### Cost of phase [423,424]:fun15(V1,V,V2,V3,Out) -> [fun15(V1',V',V2',V3',Out')] 
1*it(423)+1*it(424)+0
  Such that:it(424) =< V
it(424) =< V-V'
it(424) =< V2
it(424) =< V2-V2'
it(424) =< V3
it(424) =< V3-V3'
aux(40) =< V1
aux(41) =< V1-V1'
it(423) =< aux(40)
it(424) =< aux(40)
it(423) =< aux(41)
it(424) =< aux(41)

#### Cost of chains of fun15(V1,V,V2,V3,Out):
* Chain [[423,424],425]: 1*it(423)+1*it(424)+0
  Such that:aux(40) =< V1
it(424) =< V
aux(41) =< Out
it(423) =< aux(40)
it(424) =< aux(40)
it(423) =< aux(41)
it(424) =< aux(41)

  with precondition: [V>=0,V2>=0,V3>=0,Out>=1,V1>=Out] 

* Chain [425]: 0
  with precondition: [Out=0,V1>=0,V>=0,V2>=0,V3>=0] 


#### Cost of loops [426,427] 

 * loop 426:fun16(V1,V,V2,Out) -> [fun16(V1',V',V2',Out')] 
1
 * loop 427:fun16(V1,V,V2,Out) -> [fun16(V1',V',V2',Out')] 
1
#### Cost of phase [426,427]:fun16(V1,V,V2,Out) -> [fun16(V1',V',V2',Out')] 
1*it(426)+1*it(427)+0
  Such that:it(427) =< V
it(427) =< V-V'
it(427) =< V2
it(427) =< V2-V2'
aux(42) =< V1
aux(43) =< V1-V1'
it(426) =< aux(42)
it(427) =< aux(42)
it(426) =< aux(43)
it(427) =< aux(43)

#### Cost of chains of fun16(V1,V,V2,Out):
* Chain [[426,427],428]: 1*it(426)+1*it(427)+0
  Such that:aux(42) =< V1
it(427) =< V
aux(43) =< Out
it(426) =< aux(42)
it(427) =< aux(42)
it(426) =< aux(43)
it(427) =< aux(43)

  with precondition: [V>=0,V2>=0,Out>=1,V1>=Out] 

* Chain [428]: 0
  with precondition: [Out=0,V1>=0,V>=0,V2>=0] 


#### Cost of loops [429,430] 

 * loop 429:fun17(V1,V,Out) -> [fun17(V1',V',Out')] 
1
 * loop 430:fun17(V1,V,Out) -> [fun17(V1',V',Out')] 
1
#### Cost of phase [429,430]:fun17(V1,V,Out) -> [fun17(V1',V',Out')] 
1*it(429)+1*it(430)+0
  Such that:it(430) =< V
it(430) =< V-V'
aux(44) =< V1
aux(45) =< V1-V1'
it(429) =< aux(44)
it(430) =< aux(44)
it(429) =< aux(45)
it(430) =< aux(45)

#### Cost of chains of fun17(V1,V,Out):
* Chain [[429,430],431]: 1*it(429)+1*it(430)+0
  Such that:aux(44) =< V1
it(430) =< V
aux(45) =< Out
it(429) =< aux(44)
it(430) =< aux(44)
it(429) =< aux(45)
it(430) =< aux(45)

  with precondition: [V>=0,Out>=1,V1>=Out] 

* Chain [431]: 0
  with precondition: [Out=0,V1>=0,V>=0] 


#### Cost of loops [432,433] 

 * loop 432:fun18(V1,V,V2,Out) -> [fun18(V1',V',V2',Out')] 
1
 * loop 433:fun18(V1,V,V2,Out) -> [fun18(V1',V',V2',Out')] 
1
#### Cost of phase [432,433]:fun18(V1,V,V2,Out) -> [fun18(V1',V',V2',Out')] 
1*it(432)+1*it(433)+0
  Such that:it(433) =< V
it(433) =< V-V'
it(433) =< V2
it(433) =< V2-V2'
aux(46) =< V1
aux(47) =< V1-V1'
it(432) =< aux(46)
it(433) =< aux(46)
it(432) =< aux(47)
it(433) =< aux(47)

#### Cost of chains of fun18(V1,V,V2,Out):
* Chain [[432,433],434]: 1*it(432)+1*it(433)+0
  Such that:aux(46) =< V1
it(433) =< V
aux(47) =< Out
it(432) =< aux(46)
it(433) =< aux(46)
it(432) =< aux(47)
it(433) =< aux(47)

  with precondition: [V>=0,V2>=0,Out>=1,V1>=Out] 

* Chain [434]: 0
  with precondition: [Out=0,V1>=0,V>=0,V2>=0] 


#### Cost of loops [435,436] 

 * loop 435:fun19(V1,V,V2,Out) -> [fun19(V1',V',V2',Out')] 
1
 * loop 436:fun19(V1,V,V2,Out) -> [fun19(V1',V',V2',Out')] 
1
#### Cost of phase [435,436]:fun19(V1,V,V2,Out) -> [fun19(V1',V',V2',Out')] 
1*it(435)+1*it(436)+0
  Such that:it(436) =< V
it(436) =< V-V'
it(436) =< V2
it(436) =< V2-V2'
aux(48) =< V1
aux(49) =< V1-V1'
it(435) =< aux(48)
it(436) =< aux(48)
it(435) =< aux(49)
it(436) =< aux(49)

#### Cost of chains of fun19(V1,V,V2,Out):
* Chain [[435,436],437]: 1*it(435)+1*it(436)+0
  Such that:aux(48) =< V1
it(436) =< V
aux(49) =< Out
it(435) =< aux(48)
it(436) =< aux(48)
it(435) =< aux(49)
it(436) =< aux(49)

  with precondition: [V>=0,V2>=0,Out>=1,V1>=Out] 

* Chain [437]: 0
  with precondition: [Out=0,V1>=0,V>=0,V2>=0] 


#### Cost of loops [438,439] 

 * loop 438:fun2(V1,V,V2,Out) -> [fun2(V1',V',V2',Out')] 
1
 * loop 439:fun2(V1,V,V2,Out) -> [fun2(V1',V',V2',Out')] 
1
#### Cost of phase [438,439]:fun2(V1,V,V2,Out) -> [fun2(V1',V',V2',Out')] 
1*it(438)+1*it(439)+0
  Such that:it(439) =< V
it(439) =< V-V'
it(439) =< V2
it(439) =< V2-V2'
aux(50) =< V1
aux(51) =< V1-V1'
it(438) =< aux(50)
it(439) =< aux(50)
it(438) =< aux(51)
it(439) =< aux(51)

#### Cost of chains of fun2(V1,V,V2,Out):
* Chain [[438,439],440]: 1*it(438)+1*it(439)+0
  Such that:aux(50) =< V1
it(439) =< V
aux(51) =< Out
it(438) =< aux(50)
it(439) =< aux(50)
it(438) =< aux(51)
it(439) =< aux(51)

  with precondition: [V>=0,V2>=0,Out>=1,V1>=Out] 

* Chain [440]: 0
  with precondition: [Out=0,V1>=0,V>=0,V2>=0] 


#### Cost of loops [441,442] 

 * loop 441:fun20(V1,V,V2,Out) -> [fun20(V1',V',V2',Out')] 
1
 * loop 442:fun20(V1,V,V2,Out) -> [fun20(V1',V',V2',Out')] 
1
#### Cost of phase [441,442]:fun20(V1,V,V2,Out) -> [fun20(V1',V',V2',Out')] 
1*it(441)+1*it(442)+0
  Such that:it(442) =< V
it(442) =< V-V'
it(442) =< V2
it(442) =< V2-V2'
aux(52) =< V1
aux(53) =< V1-V1'
it(441) =< aux(52)
it(442) =< aux(52)
it(441) =< aux(53)
it(442) =< aux(53)

#### Cost of chains of fun20(V1,V,V2,Out):
* Chain [[441,442],443]: 1*it(441)+1*it(442)+0
  Such that:aux(52) =< V1
it(442) =< V
aux(53) =< Out
it(441) =< aux(52)
it(442) =< aux(52)
it(441) =< aux(53)
it(442) =< aux(53)

  with precondition: [V>=0,V2>=0,Out>=1,V1>=Out] 

* Chain [443]: 0
  with precondition: [Out=0,V1>=0,V>=0,V2>=0] 


#### Cost of loops [444] 

 * loop 444:fun21(V1,Out) -> [fun21(V1',Out')] 
1
#### Cost of phase [444]:fun21(V1,Out) -> [fun21(V1',Out')] 
1*it(444)+0
  Such that:it(444) =< V1
it(444) =< V1-V1'

#### Cost of chains of fun21(V1,Out):
* Chain [[444],445]: 1*it(444)+0
  Such that:it(444) =< Out

  with precondition: [Out>=1,V1>=Out] 

* Chain [445]: 0
  with precondition: [Out=0,V1>=0] 


#### Cost of loops [446,447] 

 * loop 446:fun22(V1,V,V2,Out) -> [fun22(V1',V',V2',Out')] 
1
 * loop 447:fun22(V1,V,V2,Out) -> [fun22(V1',V',V2',Out')] 
1
#### Cost of phase [446,447]:fun22(V1,V,V2,Out) -> [fun22(V1',V',V2',Out')] 
1*it(446)+1*it(447)+0
  Such that:it(447) =< V
it(447) =< V-V'
it(447) =< V2
it(447) =< V2-V2'
aux(54) =< V1
aux(55) =< V1-V1'
it(446) =< aux(54)
it(447) =< aux(54)
it(446) =< aux(55)
it(447) =< aux(55)

#### Cost of chains of fun22(V1,V,V2,Out):
* Chain [[446,447],448]: 1*it(446)+1*it(447)+0
  Such that:aux(54) =< V1
it(447) =< V
aux(55) =< Out
it(446) =< aux(54)
it(447) =< aux(54)
it(446) =< aux(55)
it(447) =< aux(55)

  with precondition: [V>=0,V2>=0,Out>=1,V1>=Out] 

* Chain [448]: 0
  with precondition: [Out=0,V1>=0,V>=0,V2>=0] 


#### Cost of loops [449,450] 

 * loop 449:fun23(V1,V,V2,Out) -> [fun23(V1',V',V2',Out')] 
1
 * loop 450:fun23(V1,V,V2,Out) -> [fun23(V1',V',V2',Out')] 
1
#### Cost of phase [449,450]:fun23(V1,V,V2,Out) -> [fun23(V1',V',V2',Out')] 
1*it(449)+1*it(450)+0
  Such that:it(450) =< V
it(450) =< V-V'
it(450) =< V2
it(450) =< V2-V2'
aux(56) =< V1
aux(57) =< V1-V1'
it(449) =< aux(56)
it(450) =< aux(56)
it(449) =< aux(57)
it(450) =< aux(57)

#### Cost of chains of fun23(V1,V,V2,Out):
* Chain [[449,450],451]: 1*it(449)+1*it(450)+0
  Such that:aux(56) =< V1
it(450) =< V
aux(57) =< Out
it(449) =< aux(56)
it(450) =< aux(56)
it(449) =< aux(57)
it(450) =< aux(57)

  with precondition: [V>=0,V2>=0,Out>=1,V1>=Out] 

* Chain [451]: 0
  with precondition: [Out=0,V1>=0,V>=0,V2>=0] 


#### Cost of loops [452,453] 

 * loop 452:fun24(V1,V,Out) -> [fun24(V1',V',Out')] 
1
 * loop 453:fun24(V1,V,Out) -> [fun24(V1',V',Out')] 
1
#### Cost of phase [452,453]:fun24(V1,V,Out) -> [fun24(V1',V',Out')] 
1*it(452)+1*it(453)+0
  Such that:it(453) =< V
it(453) =< V-V'
aux(58) =< V1
aux(59) =< V1-V1'
it(452) =< aux(58)
it(453) =< aux(58)
it(452) =< aux(59)
it(453) =< aux(59)

#### Cost of chains of fun24(V1,V,Out):
* Chain [[452,453],454]: 1*it(452)+1*it(453)+0
  Such that:aux(58) =< V1
it(453) =< V
aux(59) =< Out
it(452) =< aux(58)
it(453) =< aux(58)
it(452) =< aux(59)
it(453) =< aux(59)

  with precondition: [V>=0,Out>=1,V1>=Out] 

* Chain [454]: 0
  with precondition: [Out=0,V1>=0,V>=0] 


#### Cost of loops [455,456] 

 * loop 455:fun25(V1,V,V2,Out) -> [fun25(V1',V',V2',Out')] 
1
 * loop 456:fun25(V1,V,V2,Out) -> [fun25(V1',V',V2',Out')] 
1
#### Cost of phase [455,456]:fun25(V1,V,V2,Out) -> [fun25(V1',V',V2',Out')] 
1*it(455)+1*it(456)+0
  Such that:it(456) =< V
it(456) =< V-V'
it(456) =< V2
it(456) =< V2-V2'
aux(60) =< V1
aux(61) =< V1-V1'
it(455) =< aux(60)
it(456) =< aux(60)
it(455) =< aux(61)
it(456) =< aux(61)

#### Cost of chains of fun25(V1,V,V2,Out):
* Chain [[455,456],457]: 1*it(455)+1*it(456)+0
  Such that:aux(60) =< V1
it(456) =< V
aux(61) =< Out
it(455) =< aux(60)
it(456) =< aux(60)
it(455) =< aux(61)
it(456) =< aux(61)

  with precondition: [V>=0,V2>=0,Out>=1,V1>=Out] 

* Chain [457]: 0
  with precondition: [Out=0,V1>=0,V>=0,V2>=0] 


#### Cost of loops [458,459] 

 * loop 458:fun26(V1,V,Out) -> [fun26(V1',V',Out')] 
1
 * loop 459:fun26(V1,V,Out) -> [fun26(V1',V',Out')] 
1
#### Cost of phase [458,459]:fun26(V1,V,Out) -> [fun26(V1',V',Out')] 
1*it(458)+1*it(459)+0
  Such that:it(459) =< V
it(459) =< V-V'
aux(62) =< V1
aux(63) =< V1-V1'
it(458) =< aux(62)
it(459) =< aux(62)
it(458) =< aux(63)
it(459) =< aux(63)

#### Cost of chains of fun26(V1,V,Out):
* Chain [[458,459],460]: 1*it(458)+1*it(459)+0
  Such that:aux(62) =< V1
it(459) =< V
aux(63) =< Out
it(458) =< aux(62)
it(459) =< aux(62)
it(458) =< aux(63)
it(459) =< aux(63)

  with precondition: [V>=0,Out>=1,V1>=Out] 

* Chain [460]: 0
  with precondition: [Out=0,V1>=0,V>=0] 


#### Cost of loops [461,462] 

 * loop 461:fun27(V1,V,V2,Out) -> [fun27(V1',V',V2',Out')] 
1
 * loop 462:fun27(V1,V,V2,Out) -> [fun27(V1',V',V2',Out')] 
1
#### Cost of phase [461,462]:fun27(V1,V,V2,Out) -> [fun27(V1',V',V2',Out')] 
1*it(461)+1*it(462)+0
  Such that:it(462) =< V
it(462) =< V-V'
it(462) =< V2
it(462) =< V2-V2'
aux(64) =< V1
aux(65) =< V1-V1'
it(461) =< aux(64)
it(462) =< aux(64)
it(461) =< aux(65)
it(462) =< aux(65)

#### Cost of chains of fun27(V1,V,V2,Out):
* Chain [[461,462],463]: 1*it(461)+1*it(462)+0
  Such that:aux(64) =< V1
it(462) =< V
aux(65) =< Out
it(461) =< aux(64)
it(462) =< aux(64)
it(461) =< aux(65)
it(462) =< aux(65)

  with precondition: [V>=0,V2>=0,Out>=1,V1>=Out] 

* Chain [463]: 0
  with precondition: [Out=0,V1>=0,V>=0,V2>=0] 


#### Cost of loops [464,465] 

 * loop 464:fun28(V1,V,Out) -> [fun28(V1',V',Out')] 
1
 * loop 465:fun28(V1,V,Out) -> [fun28(V1',V',Out')] 
1
#### Cost of phase [464,465]:fun28(V1,V,Out) -> [fun28(V1',V',Out')] 
1*it(464)+1*it(465)+0
  Such that:it(465) =< V
it(465) =< V-V'
aux(66) =< V1
aux(67) =< V1-V1'
it(464) =< aux(66)
it(465) =< aux(66)
it(464) =< aux(67)
it(465) =< aux(67)

#### Cost of chains of fun28(V1,V,Out):
* Chain [[464,465],466]: 1*it(464)+1*it(465)+0
  Such that:aux(66) =< V1
it(465) =< V
aux(67) =< Out
it(464) =< aux(66)
it(465) =< aux(66)
it(464) =< aux(67)
it(465) =< aux(67)

  with precondition: [V>=0,Out>=1,V1>=Out] 

* Chain [466]: 0
  with precondition: [Out=0,V1>=0,V>=0] 


#### Cost of loops [467,468] 

 * loop 467:fun29(V1,V,V2,V3,Out) -> [fun29(V1',V',V2',V3',Out')] 
1
 * loop 468:fun29(V1,V,V2,V3,Out) -> [fun29(V1',V',V2',V3',Out')] 
1
#### Cost of phase [467,468]:fun29(V1,V,V2,V3,Out) -> [fun29(V1',V',V2',V3',Out')] 
1*it(467)+1*it(468)+0
  Such that:it(468) =< V
it(468) =< V-V'
it(468) =< V2
it(468) =< V2-V2'
it(468) =< V3
it(468) =< V3-V3'
aux(68) =< V1
aux(69) =< V1-V1'
it(467) =< aux(68)
it(468) =< aux(68)
it(467) =< aux(69)
it(468) =< aux(69)

#### Cost of chains of fun29(V1,V,V2,V3,Out):
* Chain [[467,468],469]: 1*it(467)+1*it(468)+0
  Such that:aux(68) =< V1
it(468) =< V
aux(69) =< Out
it(467) =< aux(68)
it(468) =< aux(68)
it(467) =< aux(69)
it(468) =< aux(69)

  with precondition: [V>=0,V2>=0,V3>=0,Out>=1,V1>=Out] 

* Chain [469]: 0
  with precondition: [Out=0,V1>=0,V>=0,V2>=0,V3>=0] 


#### Cost of loops [470,471] 

 * loop 470:fun3(V1,V,Out) -> [fun3(V1',V',Out')] 
1
 * loop 471:fun3(V1,V,Out) -> [fun3(V1',V',Out')] 
1
#### Cost of phase [470,471]:fun3(V1,V,Out) -> [fun3(V1',V',Out')] 
1*it(470)+1*it(471)+0
  Such that:it(471) =< V
it(471) =< V-V'
aux(70) =< V1
aux(71) =< V1-V1'
it(470) =< aux(70)
it(471) =< aux(70)
it(470) =< aux(71)
it(471) =< aux(71)

#### Cost of chains of fun3(V1,V,Out):
* Chain [[470,471],472]: 1*it(470)+1*it(471)+0
  Such that:aux(70) =< V1
it(471) =< V
aux(71) =< Out
it(470) =< aux(70)
it(471) =< aux(70)
it(470) =< aux(71)
it(471) =< aux(71)

  with precondition: [V>=0,Out>=1,V1>=Out] 

* Chain [472]: 0
  with precondition: [Out=0,V1>=0,V>=0] 


#### Cost of loops [473,474] 

 * loop 473:fun30(V1,V,Out) -> [fun30(V1',V',Out')] 
1
 * loop 474:fun30(V1,V,Out) -> [fun30(V1',V',Out')] 
1
#### Cost of phase [473,474]:fun30(V1,V,Out) -> [fun30(V1',V',Out')] 
1*it(473)+1*it(474)+0
  Such that:it(474) =< V
it(474) =< V-V'
aux(72) =< V1
aux(73) =< V1-V1'
it(473) =< aux(72)
it(474) =< aux(72)
it(473) =< aux(73)
it(474) =< aux(73)

#### Cost of chains of fun30(V1,V,Out):
* Chain [[473,474],475]: 1*it(473)+1*it(474)+0
  Such that:aux(72) =< V1
it(474) =< V
aux(73) =< Out
it(473) =< aux(72)
it(474) =< aux(72)
it(473) =< aux(73)
it(474) =< aux(73)

  with precondition: [V>=0,Out>=1,V1>=Out] 

* Chain [475]: 0
  with precondition: [Out=0,V1>=0,V>=0] 


#### Cost of loops [476,477] 

 * loop 476:fun31(V1,V,V2,Out) -> [fun31(V1',V',V2',Out')] 
1
 * loop 477:fun31(V1,V,V2,Out) -> [fun31(V1',V',V2',Out')] 
1
#### Cost of phase [476,477]:fun31(V1,V,V2,Out) -> [fun31(V1',V',V2',Out')] 
1*it(476)+1*it(477)+0
  Such that:it(477) =< V
it(477) =< V-V'
it(477) =< V2
it(477) =< V2-V2'
aux(74) =< V1
aux(75) =< V1-V1'
it(476) =< aux(74)
it(477) =< aux(74)
it(476) =< aux(75)
it(477) =< aux(75)

#### Cost of chains of fun31(V1,V,V2,Out):
* Chain [[476,477],478]: 1*it(476)+1*it(477)+0
  Such that:aux(74) =< V1
it(477) =< V
aux(75) =< Out
it(476) =< aux(74)
it(477) =< aux(74)
it(476) =< aux(75)
it(477) =< aux(75)

  with precondition: [V>=0,V2>=0,Out>=1,V1>=Out] 

* Chain [478]: 0
  with precondition: [Out=0,V1>=0,V>=0,V2>=0] 


#### Cost of loops [479] 

 * loop 479:fun32(V1,Out) -> [fun32(V1',Out')] 
1
#### Cost of phase [479]:fun32(V1,Out) -> [fun32(V1',Out')] 
1*it(479)+0
  Such that:it(479) =< V1
it(479) =< V1-V1'

#### Cost of chains of fun32(V1,Out):
* Chain [[479],480]: 1*it(479)+0
  Such that:it(479) =< Out

  with precondition: [Out>=1,V1>=Out] 

* Chain [480]: 0
  with precondition: [Out=0,V1>=0] 


#### Cost of loops [481,482] 

 * loop 481:fun33(V1,V,Out) -> [fun33(V1',V',Out')] 
1
 * loop 482:fun33(V1,V,Out) -> [fun33(V1',V',Out')] 
1
#### Cost of phase [481,482]:fun33(V1,V,Out) -> [fun33(V1',V',Out')] 
1*it(481)+1*it(482)+0
  Such that:it(482) =< V
it(482) =< V-V'
aux(76) =< V1
aux(77) =< V1-V1'
it(481) =< aux(76)
it(482) =< aux(76)
it(481) =< aux(77)
it(482) =< aux(77)

#### Cost of chains of fun33(V1,V,Out):
* Chain [[481,482],483]: 1*it(481)+1*it(482)+0
  Such that:aux(76) =< V1
it(482) =< V
aux(77) =< Out
it(481) =< aux(76)
it(482) =< aux(76)
it(481) =< aux(77)
it(482) =< aux(77)

  with precondition: [V>=0,Out>=1,V1>=Out] 

* Chain [483]: 0
  with precondition: [Out=0,V1>=0,V>=0] 


#### Cost of loops [484] 

 * loop 484:fun34(V1,Out) -> [fun34(V1',Out')] 
1
#### Cost of phase [484]:fun34(V1,Out) -> [fun34(V1',Out')] 
1*it(484)+0
  Such that:it(484) =< V1
it(484) =< V1-V1'

#### Cost of chains of fun34(V1,Out):
* Chain [[484],485]: 1*it(484)+0
  Such that:it(484) =< Out

  with precondition: [Out>=1,V1>=Out] 

* Chain [485]: 0
  with precondition: [Out=0,V1>=0] 


#### Cost of loops [486,487] 

 * loop 486:fun35(V1,V,V2,Out) -> [fun35(V1',V',V2',Out')] 
1
 * loop 487:fun35(V1,V,V2,Out) -> [fun35(V1',V',V2',Out')] 
1
#### Cost of phase [486,487]:fun35(V1,V,V2,Out) -> [fun35(V1',V',V2',Out')] 
1*it(486)+1*it(487)+0
  Such that:it(487) =< V
it(487) =< V-V'
it(487) =< V2
it(487) =< V2-V2'
aux(78) =< V1
aux(79) =< V1-V1'
it(486) =< aux(78)
it(487) =< aux(78)
it(486) =< aux(79)
it(487) =< aux(79)

#### Cost of chains of fun35(V1,V,V2,Out):
* Chain [[486,487],488]: 1*it(486)+1*it(487)+0
  Such that:aux(78) =< V1
it(487) =< V
aux(79) =< Out
it(486) =< aux(78)
it(487) =< aux(78)
it(486) =< aux(79)
it(487) =< aux(79)

  with precondition: [V>=0,V2>=0,Out>=1,V1>=Out] 

* Chain [488]: 0
  with precondition: [Out=0,V1>=0,V>=0,V2>=0] 


#### Cost of loops [489,490] 

 * loop 489:fun36(V1,V,Out) -> [fun36(V1',V',Out')] 
1
 * loop 490:fun36(V1,V,Out) -> [fun36(V1',V',Out')] 
1
#### Cost of phase [489,490]:fun36(V1,V,Out) -> [fun36(V1',V',Out')] 
1*it(489)+1*it(490)+0
  Such that:it(490) =< V
it(490) =< V-V'
aux(80) =< V1
aux(81) =< V1-V1'
it(489) =< aux(80)
it(490) =< aux(80)
it(489) =< aux(81)
it(490) =< aux(81)

#### Cost of chains of fun36(V1,V,Out):
* Chain [[489,490],491]: 1*it(489)+1*it(490)+0
  Such that:aux(80) =< V1
it(490) =< V
aux(81) =< Out
it(489) =< aux(80)
it(490) =< aux(80)
it(489) =< aux(81)
it(490) =< aux(81)

  with precondition: [V>=0,Out>=1,V1>=Out] 

* Chain [491]: 0
  with precondition: [Out=0,V1>=0,V>=0] 


#### Cost of loops [492,493] 

 * loop 492:fun37(V1,V,V2,Out) -> [fun37(V1',V',V2',Out')] 
1
 * loop 493:fun37(V1,V,V2,Out) -> [fun37(V1',V',V2',Out')] 
1
#### Cost of phase [492,493]:fun37(V1,V,V2,Out) -> [fun37(V1',V',V2',Out')] 
1*it(492)+1*it(493)+0
  Such that:it(493) =< V
it(493) =< V-V'
it(493) =< V2
it(493) =< V2-V2'
aux(82) =< V1
aux(83) =< V1-V1'
it(492) =< aux(82)
it(493) =< aux(82)
it(492) =< aux(83)
it(493) =< aux(83)

#### Cost of chains of fun37(V1,V,V2,Out):
* Chain [[492,493],494]: 1*it(492)+1*it(493)+0
  Such that:aux(82) =< V1
it(493) =< V
aux(83) =< Out
it(492) =< aux(82)
it(493) =< aux(82)
it(492) =< aux(83)
it(493) =< aux(83)

  with precondition: [V>=0,V2>=0,Out>=1,V1>=Out] 

* Chain [494]: 0
  with precondition: [Out=0,V1>=0,V>=0,V2>=0] 


#### Cost of loops [495,496] 

 * loop 495:fun38(V1,V,Out) -> [fun38(V1',V',Out')] 
1
 * loop 496:fun38(V1,V,Out) -> [fun38(V1',V',Out')] 
1
#### Cost of phase [495,496]:fun38(V1,V,Out) -> [fun38(V1',V',Out')] 
1*it(495)+1*it(496)+0
  Such that:it(496) =< V
it(496) =< V-V'
aux(84) =< V1
aux(85) =< V1-V1'
it(495) =< aux(84)
it(496) =< aux(84)
it(495) =< aux(85)
it(496) =< aux(85)

#### Cost of chains of fun38(V1,V,Out):
* Chain [[495,496],497]: 1*it(495)+1*it(496)+0
  Such that:aux(84) =< V1
it(496) =< V
aux(85) =< Out
it(495) =< aux(84)
it(496) =< aux(84)
it(495) =< aux(85)
it(496) =< aux(85)

  with precondition: [V>=0,Out>=1,V1>=Out] 

* Chain [497]: 0
  with precondition: [Out=0,V1>=0,V>=0] 


#### Cost of loops [498,499] 

 * loop 498:fun39(V1,V,Out) -> [fun39(V1',V',Out')] 
1
 * loop 499:fun39(V1,V,Out) -> [fun39(V1',V',Out')] 
1
#### Cost of phase [498,499]:fun39(V1,V,Out) -> [fun39(V1',V',Out')] 
1*it(498)+1*it(499)+0
  Such that:it(499) =< V
it(499) =< V-V'
aux(86) =< V1
aux(87) =< V1-V1'
it(498) =< aux(86)
it(499) =< aux(86)
it(498) =< aux(87)
it(499) =< aux(87)

#### Cost of chains of fun39(V1,V,Out):
* Chain [[498,499],500]: 1*it(498)+1*it(499)+0
  Such that:aux(86) =< V1
it(499) =< V
aux(87) =< Out
it(498) =< aux(86)
it(499) =< aux(86)
it(498) =< aux(87)
it(499) =< aux(87)

  with precondition: [V>=0,Out>=1,V1>=Out] 

* Chain [500]: 0
  with precondition: [Out=0,V1>=0,V>=0] 


#### Cost of loops [501] 

 * loop 501:fun4(V1,Out) -> [fun4(V1',Out')] 
1
#### Cost of phase [501]:fun4(V1,Out) -> [fun4(V1',Out')] 
1*it(501)+0
  Such that:it(501) =< V1
it(501) =< V1-V1'

#### Cost of chains of fun4(V1,Out):
* Chain [[501],502]: 1*it(501)+0
  Such that:it(501) =< Out

  with precondition: [Out>=1,V1>=Out] 

* Chain [502]: 0
  with precondition: [Out=0,V1>=0] 


#### Cost of loops [503,504] 

 * loop 503:fun40(V1,V,V2,Out) -> [fun40(V1',V',V2',Out')] 
1
 * loop 504:fun40(V1,V,V2,Out) -> [fun40(V1',V',V2',Out')] 
1
#### Cost of phase [503,504]:fun40(V1,V,V2,Out) -> [fun40(V1',V',V2',Out')] 
1*it(503)+1*it(504)+0
  Such that:it(504) =< V
it(504) =< V-V'
it(504) =< V2
it(504) =< V2-V2'
aux(88) =< V1
aux(89) =< V1-V1'
it(503) =< aux(88)
it(504) =< aux(88)
it(503) =< aux(89)
it(504) =< aux(89)

#### Cost of chains of fun40(V1,V,V2,Out):
* Chain [[503,504],505]: 1*it(503)+1*it(504)+0
  Such that:aux(88) =< V1
it(504) =< V
aux(89) =< Out
it(503) =< aux(88)
it(504) =< aux(88)
it(503) =< aux(89)
it(504) =< aux(89)

  with precondition: [V>=0,V2>=0,Out>=1,V1>=Out] 

* Chain [505]: 0
  with precondition: [Out=0,V1>=0,V>=0,V2>=0] 


#### Cost of loops [506,507] 

 * loop 506:fun41(V1,V,V2,Out) -> [fun41(V1',V',V2',Out')] 
1
 * loop 507:fun41(V1,V,V2,Out) -> [fun41(V1',V',V2',Out')] 
1
#### Cost of phase [506,507]:fun41(V1,V,V2,Out) -> [fun41(V1',V',V2',Out')] 
1*it(506)+1*it(507)+0
  Such that:it(507) =< V
it(507) =< V-V'
it(507) =< V2
it(507) =< V2-V2'
aux(90) =< V1
aux(91) =< V1-V1'
it(506) =< aux(90)
it(507) =< aux(90)
it(506) =< aux(91)
it(507) =< aux(91)

#### Cost of chains of fun41(V1,V,V2,Out):
* Chain [[506,507],508]: 1*it(506)+1*it(507)+0
  Such that:aux(90) =< V1
it(507) =< V
aux(91) =< Out
it(506) =< aux(90)
it(507) =< aux(90)
it(506) =< aux(91)
it(507) =< aux(91)

  with precondition: [V>=0,V2>=0,Out>=1,V1>=Out] 

* Chain [508]: 0
  with precondition: [Out=0,V1>=0,V>=0,V2>=0] 


#### Cost of loops [509,510] 

 * loop 509:fun42(V1,V,V2,Out) -> [fun42(V1',V',V2',Out')] 
1
 * loop 510:fun42(V1,V,V2,Out) -> [fun42(V1',V',V2',Out')] 
1
#### Cost of phase [509,510]:fun42(V1,V,V2,Out) -> [fun42(V1',V',V2',Out')] 
1*it(509)+1*it(510)+0
  Such that:it(510) =< V
it(510) =< V-V'
it(510) =< V2
it(510) =< V2-V2'
aux(92) =< V1
aux(93) =< V1-V1'
it(509) =< aux(92)
it(510) =< aux(92)
it(509) =< aux(93)
it(510) =< aux(93)

#### Cost of chains of fun42(V1,V,V2,Out):
* Chain [[509,510],511]: 1*it(509)+1*it(510)+0
  Such that:aux(92) =< V1
it(510) =< V
aux(93) =< Out
it(509) =< aux(92)
it(510) =< aux(92)
it(509) =< aux(93)
it(510) =< aux(93)

  with precondition: [V>=0,V2>=0,Out>=1,V1>=Out] 

* Chain [511]: 0
  with precondition: [Out=0,V1>=0,V>=0,V2>=0] 


#### Cost of loops [512] 

 * loop 512:fun43(V1,Out) -> [fun43(V1',Out')] 
1
#### Cost of phase [512]:fun43(V1,Out) -> [fun43(V1',Out')] 
1*it(512)+0
  Such that:it(512) =< V1
it(512) =< V1-V1'

#### Cost of chains of fun43(V1,Out):
* Chain [[512],513]: 1*it(512)+0
  Such that:it(512) =< Out

  with precondition: [Out>=1,V1>=Out] 

* Chain [513]: 0
  with precondition: [Out=0,V1>=0] 


#### Cost of loops [514,515] 

 * loop 514:fun44(V1,V,V2,Out) -> [fun44(V1',V',V2',Out')] 
1
 * loop 515:fun44(V1,V,V2,Out) -> [fun44(V1',V',V2',Out')] 
1
#### Cost of phase [514,515]:fun44(V1,V,V2,Out) -> [fun44(V1',V',V2',Out')] 
1*it(514)+1*it(515)+0
  Such that:it(515) =< V
it(515) =< V-V'
it(515) =< V2
it(515) =< V2-V2'
aux(94) =< V1
aux(95) =< V1-V1'
it(514) =< aux(94)
it(515) =< aux(94)
it(514) =< aux(95)
it(515) =< aux(95)

#### Cost of chains of fun44(V1,V,V2,Out):
* Chain [[514,515],516]: 1*it(514)+1*it(515)+0
  Such that:aux(94) =< V1
it(515) =< V
aux(95) =< Out
it(514) =< aux(94)
it(515) =< aux(94)
it(514) =< aux(95)
it(515) =< aux(95)

  with precondition: [V>=0,V2>=0,Out>=1,V1>=Out] 

* Chain [516]: 0
  with precondition: [Out=0,V1>=0,V>=0,V2>=0] 


#### Cost of loops [517,518] 

 * loop 517:fun45(V1,V,Out) -> [fun45(V1',V',Out')] 
1
 * loop 518:fun45(V1,V,Out) -> [fun45(V1',V',Out')] 
1
#### Cost of phase [517,518]:fun45(V1,V,Out) -> [fun45(V1',V',Out')] 
1*it(517)+1*it(518)+0
  Such that:it(518) =< V
it(518) =< V-V'
aux(96) =< V1
aux(97) =< V1-V1'
it(517) =< aux(96)
it(518) =< aux(96)
it(517) =< aux(97)
it(518) =< aux(97)

#### Cost of chains of fun45(V1,V,Out):
* Chain [[517,518],519]: 1*it(517)+1*it(518)+0
  Such that:aux(96) =< V1
it(518) =< V
aux(97) =< Out
it(517) =< aux(96)
it(518) =< aux(96)
it(517) =< aux(97)
it(518) =< aux(97)

  with precondition: [V>=0,Out>=1,V1>=Out] 

* Chain [519]: 0
  with precondition: [Out=0,V1>=0,V>=0] 


#### Cost of loops [520,521] 

 * loop 520:fun46(V1,V,Out) -> [fun46(V1',V',Out')] 
1
 * loop 521:fun46(V1,V,Out) -> [fun46(V1',V',Out')] 
1
#### Cost of phase [520,521]:fun46(V1,V,Out) -> [fun46(V1',V',Out')] 
1*it(520)+1*it(521)+0
  Such that:it(521) =< V
it(521) =< V-V'
aux(98) =< V1
aux(99) =< V1-V1'
it(520) =< aux(98)
it(521) =< aux(98)
it(520) =< aux(99)
it(521) =< aux(99)

#### Cost of chains of fun46(V1,V,Out):
* Chain [[520,521],522]: 1*it(520)+1*it(521)+0
  Such that:aux(98) =< V1
it(521) =< V
aux(99) =< Out
it(520) =< aux(98)
it(521) =< aux(98)
it(520) =< aux(99)
it(521) =< aux(99)

  with precondition: [V>=0,Out>=1,V1>=Out] 

* Chain [522]: 0
  with precondition: [Out=0,V1>=0,V>=0] 


#### Cost of loops [523,524] 

 * loop 523:fun47(V1,V,V2,Out) -> [fun47(V1',V',V2',Out')] 
1
 * loop 524:fun47(V1,V,V2,Out) -> [fun47(V1',V',V2',Out')] 
1
#### Cost of phase [523,524]:fun47(V1,V,V2,Out) -> [fun47(V1',V',V2',Out')] 
1*it(523)+1*it(524)+0
  Such that:it(524) =< V
it(524) =< V-V'
it(524) =< V2
it(524) =< V2-V2'
aux(100) =< V1
aux(101) =< V1-V1'
it(523) =< aux(100)
it(524) =< aux(100)
it(523) =< aux(101)
it(524) =< aux(101)

#### Cost of chains of fun47(V1,V,V2,Out):
* Chain [[523,524],525]: 1*it(523)+1*it(524)+0
  Such that:aux(100) =< V1
it(524) =< V
aux(101) =< Out
it(523) =< aux(100)
it(524) =< aux(100)
it(523) =< aux(101)
it(524) =< aux(101)

  with precondition: [V>=0,V2>=0,Out>=1,V1>=Out] 

* Chain [525]: 0
  with precondition: [Out=0,V1>=0,V>=0,V2>=0] 


#### Cost of loops [526,527] 

 * loop 526:fun48(V1,V,V2,Out) -> [fun48(V1',V',V2',Out')] 
1
 * loop 527:fun48(V1,V,V2,Out) -> [fun48(V1',V',V2',Out')] 
1
#### Cost of phase [526,527]:fun48(V1,V,V2,Out) -> [fun48(V1',V',V2',Out')] 
1*it(526)+1*it(527)+0
  Such that:it(527) =< V
it(527) =< V-V'
it(527) =< V2
it(527) =< V2-V2'
aux(102) =< V1
aux(103) =< V1-V1'
it(526) =< aux(102)
it(527) =< aux(102)
it(526) =< aux(103)
it(527) =< aux(103)

#### Cost of chains of fun48(V1,V,V2,Out):
* Chain [[526,527],528]: 1*it(526)+1*it(527)+0
  Such that:aux(102) =< V1
it(527) =< V
aux(103) =< Out
it(526) =< aux(102)
it(527) =< aux(102)
it(526) =< aux(103)
it(527) =< aux(103)

  with precondition: [V>=0,V2>=0,Out>=1,V1>=Out] 

* Chain [528]: 0
  with precondition: [Out=0,V1>=0,V>=0,V2>=0] 


#### Cost of loops [529,530] 

 * loop 529:fun49(V1,V,Out) -> [fun49(V1',V',Out')] 
1
 * loop 530:fun49(V1,V,Out) -> [fun49(V1',V',Out')] 
1
#### Cost of phase [529,530]:fun49(V1,V,Out) -> [fun49(V1',V',Out')] 
1*it(529)+1*it(530)+0
  Such that:it(530) =< V
it(530) =< V-V'
aux(104) =< V1
aux(105) =< V1-V1'
it(529) =< aux(104)
it(530) =< aux(104)
it(529) =< aux(105)
it(530) =< aux(105)

#### Cost of chains of fun49(V1,V,Out):
* Chain [[529,530],531]: 1*it(529)+1*it(530)+0
  Such that:aux(104) =< V1
it(530) =< V
aux(105) =< Out
it(529) =< aux(104)
it(530) =< aux(104)
it(529) =< aux(105)
it(530) =< aux(105)

  with precondition: [V>=0,Out>=1,V1>=Out] 

* Chain [531]: 0
  with precondition: [Out=0,V1>=0,V>=0] 


#### Cost of loops [532,533] 

 * loop 532:fun5(V1,V,V2,V3,Out) -> [fun5(V1',V',V2',V3',Out')] 
1
 * loop 533:fun5(V1,V,V2,V3,Out) -> [fun5(V1',V',V2',V3',Out')] 
1
#### Cost of phase [532,533]:fun5(V1,V,V2,V3,Out) -> [fun5(V1',V',V2',V3',Out')] 
1*it(532)+1*it(533)+0
  Such that:it(533) =< V
it(533) =< V-V'
it(533) =< V2
it(533) =< V2-V2'
it(533) =< V3
it(533) =< V3-V3'
aux(106) =< V1
aux(107) =< V1-V1'
it(532) =< aux(106)
it(533) =< aux(106)
it(532) =< aux(107)
it(533) =< aux(107)

#### Cost of chains of fun5(V1,V,V2,V3,Out):
* Chain [[532,533],534]: 1*it(532)+1*it(533)+0
  Such that:aux(106) =< V1
it(533) =< V
aux(107) =< Out
it(532) =< aux(106)
it(533) =< aux(106)
it(532) =< aux(107)
it(533) =< aux(107)

  with precondition: [V>=0,V2>=0,V3>=0,Out>=1,V1>=Out] 

* Chain [534]: 0
  with precondition: [Out=0,V1>=0,V>=0,V2>=0,V3>=0] 


#### Cost of loops [535,536] 

 * loop 535:fun50(V1,V,V2,Out) -> [fun50(V1',V',V2',Out')] 
1
 * loop 536:fun50(V1,V,V2,Out) -> [fun50(V1',V',V2',Out')] 
1
#### Cost of phase [535,536]:fun50(V1,V,V2,Out) -> [fun50(V1',V',V2',Out')] 
1*it(535)+1*it(536)+0
  Such that:it(536) =< V
it(536) =< V-V'
it(536) =< V2
it(536) =< V2-V2'
aux(108) =< V1
aux(109) =< V1-V1'
it(535) =< aux(108)
it(536) =< aux(108)
it(535) =< aux(109)
it(536) =< aux(109)

#### Cost of chains of fun50(V1,V,V2,Out):
* Chain [[535,536],537]: 1*it(535)+1*it(536)+0
  Such that:aux(108) =< V1
it(536) =< V
aux(109) =< Out
it(535) =< aux(108)
it(536) =< aux(108)
it(535) =< aux(109)
it(536) =< aux(109)

  with precondition: [V>=0,V2>=0,Out>=1,V1>=Out] 

* Chain [537]: 0
  with precondition: [Out=0,V1>=0,V>=0,V2>=0] 


#### Cost of loops [538] 

 * loop 538:fun51(V1,Out) -> [fun51(V1',Out')] 
1
#### Cost of phase [538]:fun51(V1,Out) -> [fun51(V1',Out')] 
1*it(538)+0
  Such that:it(538) =< V1
it(538) =< V1-V1'

#### Cost of chains of fun51(V1,Out):
* Chain [[538],539]: 1*it(538)+0
  Such that:it(538) =< Out

  with precondition: [Out>=1,V1>=Out] 

* Chain [539]: 0
  with precondition: [Out=0,V1>=0] 


#### Cost of loops [540,541] 

 * loop 540:fun52(V1,V,Out) -> [fun52(V1',V',Out')] 
1
 * loop 541:fun52(V1,V,Out) -> [fun52(V1',V',Out')] 
1
#### Cost of phase [540,541]:fun52(V1,V,Out) -> [fun52(V1',V',Out')] 
1*it(540)+1*it(541)+0
  Such that:it(541) =< V
it(541) =< V-V'
aux(110) =< V1
aux(111) =< V1-V1'
it(540) =< aux(110)
it(541) =< aux(110)
it(540) =< aux(111)
it(541) =< aux(111)

#### Cost of chains of fun52(V1,V,Out):
* Chain [[540,541],542]: 1*it(540)+1*it(541)+0
  Such that:aux(110) =< V1
it(541) =< V
aux(111) =< Out
it(540) =< aux(110)
it(541) =< aux(110)
it(540) =< aux(111)
it(541) =< aux(111)

  with precondition: [V>=0,Out>=1,V1>=Out] 

* Chain [542]: 0
  with precondition: [Out=0,V1>=0,V>=0] 


#### Cost of loops [543,544] 

 * loop 543:fun53(V1,V,Out) -> [fun53(V1',V',Out')] 
1
 * loop 544:fun53(V1,V,Out) -> [fun53(V1',V',Out')] 
1
#### Cost of phase [543,544]:fun53(V1,V,Out) -> [fun53(V1',V',Out')] 
1*it(543)+1*it(544)+0
  Such that:it(544) =< V
it(544) =< V-V'
aux(112) =< V1
aux(113) =< V1-V1'
it(543) =< aux(112)
it(544) =< aux(112)
it(543) =< aux(113)
it(544) =< aux(113)

#### Cost of chains of fun53(V1,V,Out):
* Chain [[543,544],545]: 1*it(543)+1*it(544)+0
  Such that:aux(112) =< V1
it(544) =< V
aux(113) =< Out
it(543) =< aux(112)
it(544) =< aux(112)
it(543) =< aux(113)
it(544) =< aux(113)

  with precondition: [V>=0,Out>=1,V1>=Out] 

* Chain [545]: 0
  with precondition: [Out=0,V1>=0,V>=0] 


#### Cost of loops [546,547] 

 * loop 546:fun54(V1,V,Out) -> [fun54(V1',V',Out')] 
1
 * loop 547:fun54(V1,V,Out) -> [fun54(V1',V',Out')] 
1
#### Cost of phase [546,547]:fun54(V1,V,Out) -> [fun54(V1',V',Out')] 
1*it(546)+1*it(547)+0
  Such that:it(547) =< V
it(547) =< V-V'
aux(114) =< V1
aux(115) =< V1-V1'
it(546) =< aux(114)
it(547) =< aux(114)
it(546) =< aux(115)
it(547) =< aux(115)

#### Cost of chains of fun54(V1,V,Out):
* Chain [[546,547],548]: 1*it(546)+1*it(547)+0
  Such that:aux(114) =< V1
it(547) =< V
aux(115) =< Out
it(546) =< aux(114)
it(547) =< aux(114)
it(546) =< aux(115)
it(547) =< aux(115)

  with precondition: [V>=0,Out>=1,V1>=Out] 

* Chain [548]: 0
  with precondition: [Out=0,V1>=0,V>=0] 


#### Cost of loops [549,550] 

 * loop 549:fun55(V1,V,V2,Out) -> [fun55(V1',V',V2',Out')] 
1
 * loop 550:fun55(V1,V,V2,Out) -> [fun55(V1',V',V2',Out')] 
1
#### Cost of phase [549,550]:fun55(V1,V,V2,Out) -> [fun55(V1',V',V2',Out')] 
1*it(549)+1*it(550)+0
  Such that:it(550) =< V
it(550) =< V-V'
it(550) =< V2
it(550) =< V2-V2'
aux(116) =< V1
aux(117) =< V1-V1'
it(549) =< aux(116)
it(550) =< aux(116)
it(549) =< aux(117)
it(550) =< aux(117)

#### Cost of chains of fun55(V1,V,V2,Out):
* Chain [[549,550],551]: 1*it(549)+1*it(550)+0
  Such that:aux(116) =< V1
it(550) =< V
aux(117) =< Out
it(549) =< aux(116)
it(550) =< aux(116)
it(549) =< aux(117)
it(550) =< aux(117)

  with precondition: [V>=0,V2>=0,Out>=1,V1>=Out] 

* Chain [551]: 0
  with precondition: [Out=0,V1>=0,V>=0,V2>=0] 


#### Cost of loops [552,553] 

 * loop 552:fun56(V1,V,V2,Out) -> [fun56(V1',V',V2',Out')] 
1
 * loop 553:fun56(V1,V,V2,Out) -> [fun56(V1',V',V2',Out')] 
1
#### Cost of phase [552,553]:fun56(V1,V,V2,Out) -> [fun56(V1',V',V2',Out')] 
1*it(552)+1*it(553)+0
  Such that:it(553) =< V
it(553) =< V-V'
it(553) =< V2
it(553) =< V2-V2'
aux(118) =< V1
aux(119) =< V1-V1'
it(552) =< aux(118)
it(553) =< aux(118)
it(552) =< aux(119)
it(553) =< aux(119)

#### Cost of chains of fun56(V1,V,V2,Out):
* Chain [[552,553],554]: 1*it(552)+1*it(553)+0
  Such that:aux(118) =< V1
it(553) =< V
aux(119) =< Out
it(552) =< aux(118)
it(553) =< aux(118)
it(552) =< aux(119)
it(553) =< aux(119)

  with precondition: [V>=0,V2>=0,Out>=1,V1>=Out] 

* Chain [554]: 0
  with precondition: [Out=0,V1>=0,V>=0,V2>=0] 


#### Cost of loops [555,556] 

 * loop 555:fun57(V1,V,Out) -> [fun57(V1',V',Out')] 
1
 * loop 556:fun57(V1,V,Out) -> [fun57(V1',V',Out')] 
1
#### Cost of phase [555,556]:fun57(V1,V,Out) -> [fun57(V1',V',Out')] 
1*it(555)+1*it(556)+0
  Such that:it(556) =< V
it(556) =< V-V'
aux(120) =< V1
aux(121) =< V1-V1'
it(555) =< aux(120)
it(556) =< aux(120)
it(555) =< aux(121)
it(556) =< aux(121)

#### Cost of chains of fun57(V1,V,Out):
* Chain [[555,556],557]: 1*it(555)+1*it(556)+0
  Such that:aux(120) =< V1
it(556) =< V
aux(121) =< Out
it(555) =< aux(120)
it(556) =< aux(120)
it(555) =< aux(121)
it(556) =< aux(121)

  with precondition: [V>=0,Out>=1,V1>=Out] 

* Chain [557]: 0
  with precondition: [Out=0,V1>=0,V>=0] 


#### Cost of loops [558,559] 

 * loop 558:fun58(V1,V,V2,Out) -> [fun58(V1',V',V2',Out')] 
1
 * loop 559:fun58(V1,V,V2,Out) -> [fun58(V1',V',V2',Out')] 
1
#### Cost of phase [558,559]:fun58(V1,V,V2,Out) -> [fun58(V1',V',V2',Out')] 
1*it(558)+1*it(559)+0
  Such that:it(559) =< V
it(559) =< V-V'
it(559) =< V2
it(559) =< V2-V2'
aux(122) =< V1
aux(123) =< V1-V1'
it(558) =< aux(122)
it(559) =< aux(122)
it(558) =< aux(123)
it(559) =< aux(123)

#### Cost of chains of fun58(V1,V,V2,Out):
* Chain [[558,559],560]: 1*it(558)+1*it(559)+0
  Such that:aux(122) =< V1
it(559) =< V
aux(123) =< Out
it(558) =< aux(122)
it(559) =< aux(122)
it(558) =< aux(123)
it(559) =< aux(123)

  with precondition: [V>=0,V2>=0,Out>=1,V1>=Out] 

* Chain [560]: 0
  with precondition: [Out=0,V1>=0,V>=0,V2>=0] 


#### Cost of loops [561,562] 

 * loop 561:fun59(V1,V,V2,Out) -> [fun59(V1',V',V2',Out')] 
1
 * loop 562:fun59(V1,V,V2,Out) -> [fun59(V1',V',V2',Out')] 
1
#### Cost of phase [561,562]:fun59(V1,V,V2,Out) -> [fun59(V1',V',V2',Out')] 
1*it(561)+1*it(562)+0
  Such that:it(562) =< V
it(562) =< V-V'
it(562) =< V2
it(562) =< V2-V2'
aux(124) =< V1
aux(125) =< V1-V1'
it(561) =< aux(124)
it(562) =< aux(124)
it(561) =< aux(125)
it(562) =< aux(125)

#### Cost of chains of fun59(V1,V,V2,Out):
* Chain [[561,562],563]: 1*it(561)+1*it(562)+0
  Such that:aux(124) =< V1
it(562) =< V
aux(125) =< Out
it(561) =< aux(124)
it(562) =< aux(124)
it(561) =< aux(125)
it(562) =< aux(125)

  with precondition: [V>=0,V2>=0,Out>=1,V1>=Out] 

* Chain [563]: 0
  with precondition: [Out=0,V1>=0,V>=0,V2>=0] 


#### Cost of loops [564,565] 

 * loop 564:fun6(V1,V,V2,Out) -> [fun6(V1',V',V2',Out')] 
1
 * loop 565:fun6(V1,V,V2,Out) -> [fun6(V1',V',V2',Out')] 
1
#### Cost of phase [564,565]:fun6(V1,V,V2,Out) -> [fun6(V1',V',V2',Out')] 
1*it(564)+1*it(565)+0
  Such that:it(565) =< V
it(565) =< V-V'
it(565) =< V2
it(565) =< V2-V2'
aux(126) =< V1
aux(127) =< V1-V1'
it(564) =< aux(126)
it(565) =< aux(126)
it(564) =< aux(127)
it(565) =< aux(127)

#### Cost of chains of fun6(V1,V,V2,Out):
* Chain [[564,565],566]: 1*it(564)+1*it(565)+0
  Such that:aux(126) =< V1
it(565) =< V
aux(127) =< Out
it(564) =< aux(126)
it(565) =< aux(126)
it(564) =< aux(127)
it(565) =< aux(127)

  with precondition: [V>=0,V2>=0,Out>=1,V1>=Out] 

* Chain [566]: 0
  with precondition: [Out=0,V1>=0,V>=0,V2>=0] 


#### Cost of loops [567,568] 

 * loop 567:fun60(V1,V,V2,Out) -> [fun60(V1',V',V2',Out')] 
1
 * loop 568:fun60(V1,V,V2,Out) -> [fun60(V1',V',V2',Out')] 
1
#### Cost of phase [567,568]:fun60(V1,V,V2,Out) -> [fun60(V1',V',V2',Out')] 
1*it(567)+1*it(568)+0
  Such that:it(568) =< V
it(568) =< V-V'
it(568) =< V2
it(568) =< V2-V2'
aux(128) =< V1
aux(129) =< V1-V1'
it(567) =< aux(128)
it(568) =< aux(128)
it(567) =< aux(129)
it(568) =< aux(129)

#### Cost of chains of fun60(V1,V,V2,Out):
* Chain [[567,568],569]: 1*it(567)+1*it(568)+0
  Such that:aux(128) =< V1
it(568) =< V
aux(129) =< Out
it(567) =< aux(128)
it(568) =< aux(128)
it(567) =< aux(129)
it(568) =< aux(129)

  with precondition: [V>=0,V2>=0,Out>=1,V1>=Out] 

* Chain [569]: 0
  with precondition: [Out=0,V1>=0,V>=0,V2>=0] 


#### Cost of loops [570] 

 * loop 570:fun61(V1,Out) -> [fun61(V1',Out')] 
1
#### Cost of phase [570]:fun61(V1,Out) -> [fun61(V1',Out')] 
1*it(570)+0
  Such that:it(570) =< V1
it(570) =< V1-V1'

#### Cost of chains of fun61(V1,Out):
* Chain [[570],571]: 1*it(570)+0
  Such that:it(570) =< Out

  with precondition: [Out>=1,V1>=Out] 

* Chain [571]: 0
  with precondition: [Out=0,V1>=0] 


#### Cost of loops [572,573] 

 * loop 572:fun62(V1,V,V2,V3,Out) -> [fun62(V1',V',V2',V3',Out')] 
1
 * loop 573:fun62(V1,V,V2,V3,Out) -> [fun62(V1',V',V2',V3',Out')] 
1
#### Cost of phase [572,573]:fun62(V1,V,V2,V3,Out) -> [fun62(V1',V',V2',V3',Out')] 
1*it(572)+1*it(573)+0
  Such that:it(573) =< V
it(573) =< V-V'
it(573) =< V2
it(573) =< V2-V2'
it(573) =< V3
it(573) =< V3-V3'
aux(130) =< V1
aux(131) =< V1-V1'
it(572) =< aux(130)
it(573) =< aux(130)
it(572) =< aux(131)
it(573) =< aux(131)

#### Cost of chains of fun62(V1,V,V2,V3,Out):
* Chain [[572,573],574]: 1*it(572)+1*it(573)+0
  Such that:aux(130) =< V1
it(573) =< V
aux(131) =< Out
it(572) =< aux(130)
it(573) =< aux(130)
it(572) =< aux(131)
it(573) =< aux(131)

  with precondition: [V>=0,V2>=0,V3>=0,Out>=1,V1>=Out] 

* Chain [574]: 0
  with precondition: [Out=0,V1>=0,V>=0,V2>=0,V3>=0] 


#### Cost of loops [575,576] 

 * loop 575:fun63(V1,V,V2,Out) -> [fun63(V1',V',V2',Out')] 
1
 * loop 576:fun63(V1,V,V2,Out) -> [fun63(V1',V',V2',Out')] 
1
#### Cost of phase [575,576]:fun63(V1,V,V2,Out) -> [fun63(V1',V',V2',Out')] 
1*it(575)+1*it(576)+0
  Such that:it(576) =< V
it(576) =< V-V'
it(576) =< V2
it(576) =< V2-V2'
aux(132) =< V1
aux(133) =< V1-V1'
it(575) =< aux(132)
it(576) =< aux(132)
it(575) =< aux(133)
it(576) =< aux(133)

#### Cost of chains of fun63(V1,V,V2,Out):
* Chain [[575,576],577]: 1*it(575)+1*it(576)+0
  Such that:aux(132) =< V1
it(576) =< V
aux(133) =< Out
it(575) =< aux(132)
it(576) =< aux(132)
it(575) =< aux(133)
it(576) =< aux(133)

  with precondition: [V>=0,V2>=0,Out>=1,V1>=Out] 

* Chain [577]: 0
  with precondition: [Out=0,V1>=0,V>=0,V2>=0] 


#### Cost of loops [578,579] 

 * loop 578:fun64(V1,V,Out) -> [fun64(V1',V',Out')] 
1
 * loop 579:fun64(V1,V,Out) -> [fun64(V1',V',Out')] 
1
#### Cost of phase [578,579]:fun64(V1,V,Out) -> [fun64(V1',V',Out')] 
1*it(578)+1*it(579)+0
  Such that:it(579) =< V
it(579) =< V-V'
aux(134) =< V1
aux(135) =< V1-V1'
it(578) =< aux(134)
it(579) =< aux(134)
it(578) =< aux(135)
it(579) =< aux(135)

#### Cost of chains of fun64(V1,V,Out):
* Chain [[578,579],580]: 1*it(578)+1*it(579)+0
  Such that:aux(134) =< V1
it(579) =< V
aux(135) =< Out
it(578) =< aux(134)
it(579) =< aux(134)
it(578) =< aux(135)
it(579) =< aux(135)

  with precondition: [V>=0,Out>=1,V1>=Out] 

* Chain [580]: 0
  with precondition: [Out=0,V1>=0,V>=0] 


#### Cost of loops [581,582] 

 * loop 581:fun65(V1,V,Out) -> [fun65(V1',V',Out')] 
1
 * loop 582:fun65(V1,V,Out) -> [fun65(V1',V',Out')] 
1
#### Cost of phase [581,582]:fun65(V1,V,Out) -> [fun65(V1',V',Out')] 
1*it(581)+1*it(582)+0
  Such that:it(582) =< V
it(582) =< V-V'
aux(136) =< V1
aux(137) =< V1-V1'
it(581) =< aux(136)
it(582) =< aux(136)
it(581) =< aux(137)
it(582) =< aux(137)

#### Cost of chains of fun65(V1,V,Out):
* Chain [[581,582],583]: 1*it(581)+1*it(582)+0
  Such that:aux(136) =< V1
it(582) =< V
aux(137) =< Out
it(581) =< aux(136)
it(582) =< aux(136)
it(581) =< aux(137)
it(582) =< aux(137)

  with precondition: [V>=0,Out>=1,V1>=Out] 

* Chain [583]: 0
  with precondition: [Out=0,V1>=0,V>=0] 


#### Cost of loops [584,585] 

 * loop 584:fun66(V1,V,V2,Out) -> [fun66(V1',V',V2',Out')] 
1
 * loop 585:fun66(V1,V,V2,Out) -> [fun66(V1',V',V2',Out')] 
1
#### Cost of phase [584,585]:fun66(V1,V,V2,Out) -> [fun66(V1',V',V2',Out')] 
1*it(584)+1*it(585)+0
  Such that:it(585) =< V
it(585) =< V-V'
it(585) =< V2
it(585) =< V2-V2'
aux(138) =< V1
aux(139) =< V1-V1'
it(584) =< aux(138)
it(585) =< aux(138)
it(584) =< aux(139)
it(585) =< aux(139)

#### Cost of chains of fun66(V1,V,V2,Out):
* Chain [[584,585],586]: 1*it(584)+1*it(585)+0
  Such that:aux(138) =< V1
it(585) =< V
aux(139) =< Out
it(584) =< aux(138)
it(585) =< aux(138)
it(584) =< aux(139)
it(585) =< aux(139)

  with precondition: [V>=0,V2>=0,Out>=1,V1>=Out] 

* Chain [586]: 0
  with precondition: [Out=0,V1>=0,V>=0,V2>=0] 


#### Cost of loops [587,588] 

 * loop 587:fun67(V1,V,V2,Out) -> [fun67(V1',V',V2',Out')] 
1
 * loop 588:fun67(V1,V,V2,Out) -> [fun67(V1',V',V2',Out')] 
1
#### Cost of phase [587,588]:fun67(V1,V,V2,Out) -> [fun67(V1',V',V2',Out')] 
1*it(587)+1*it(588)+0
  Such that:it(588) =< V
it(588) =< V-V'
it(588) =< V2
it(588) =< V2-V2'
aux(140) =< V1
aux(141) =< V1-V1'
it(587) =< aux(140)
it(588) =< aux(140)
it(587) =< aux(141)
it(588) =< aux(141)

#### Cost of chains of fun67(V1,V,V2,Out):
* Chain [[587,588],589]: 1*it(587)+1*it(588)+0
  Such that:aux(140) =< V1
it(588) =< V
aux(141) =< Out
it(587) =< aux(140)
it(588) =< aux(140)
it(587) =< aux(141)
it(588) =< aux(141)

  with precondition: [V>=0,V2>=0,Out>=1,V1>=Out] 

* Chain [589]: 0
  with precondition: [Out=0,V1>=0,V>=0,V2>=0] 


#### Cost of loops [590,591] 

 * loop 590:fun68(V1,V,V2,Out) -> [fun68(V1',V',V2',Out')] 
1
 * loop 591:fun68(V1,V,V2,Out) -> [fun68(V1',V',V2',Out')] 
1
#### Cost of phase [590,591]:fun68(V1,V,V2,Out) -> [fun68(V1',V',V2',Out')] 
1*it(590)+1*it(591)+0
  Such that:it(591) =< V
it(591) =< V-V'
it(591) =< V2
it(591) =< V2-V2'
aux(142) =< V1
aux(143) =< V1-V1'
it(590) =< aux(142)
it(591) =< aux(142)
it(590) =< aux(143)
it(591) =< aux(143)

#### Cost of chains of fun68(V1,V,V2,Out):
* Chain [[590,591],592]: 1*it(590)+1*it(591)+0
  Such that:aux(142) =< V1
it(591) =< V
aux(143) =< Out
it(590) =< aux(142)
it(591) =< aux(142)
it(590) =< aux(143)
it(591) =< aux(143)

  with precondition: [V>=0,V2>=0,Out>=1,V1>=Out] 

* Chain [592]: 0
  with precondition: [Out=0,V1>=0,V>=0,V2>=0] 


#### Cost of loops [593,594] 

 * loop 593:fun69(V1,V,V2,Out) -> [fun69(V1',V',V2',Out')] 
1
 * loop 594:fun69(V1,V,V2,Out) -> [fun69(V1',V',V2',Out')] 
1
#### Cost of phase [593,594]:fun69(V1,V,V2,Out) -> [fun69(V1',V',V2',Out')] 
1*it(593)+1*it(594)+0
  Such that:it(594) =< V
it(594) =< V-V'
it(594) =< V2
it(594) =< V2-V2'
aux(144) =< V1
aux(145) =< V1-V1'
it(593) =< aux(144)
it(594) =< aux(144)
it(593) =< aux(145)
it(594) =< aux(145)

#### Cost of chains of fun69(V1,V,V2,Out):
* Chain [[593,594],595]: 1*it(593)+1*it(594)+0
  Such that:aux(144) =< V1
it(594) =< V
aux(145) =< Out
it(593) =< aux(144)
it(594) =< aux(144)
it(593) =< aux(145)
it(594) =< aux(145)

  with precondition: [V>=0,V2>=0,Out>=1,V1>=Out] 

* Chain [595]: 0
  with precondition: [Out=0,V1>=0,V>=0,V2>=0] 


#### Cost of loops [596] 

 * loop 596:fun7(V1,Out) -> [fun7(V1',Out')] 
1
#### Cost of phase [596]:fun7(V1,Out) -> [fun7(V1',Out')] 
1*it(596)+0
  Such that:it(596) =< V1
it(596) =< V1-V1'

#### Cost of chains of fun7(V1,Out):
* Chain [[596],597]: 1*it(596)+0
  Such that:it(596) =< Out

  with precondition: [Out>=1,V1>=Out] 

* Chain [597]: 0
  with precondition: [Out=0,V1>=0] 


#### Cost of loops [598] 

 * loop 598:fun70(V1,Out) -> [fun70(V1',Out')] 
1
#### Cost of phase [598]:fun70(V1,Out) -> [fun70(V1',Out')] 
1*it(598)+0
  Such that:it(598) =< V1
it(598) =< V1-V1'

#### Cost of chains of fun70(V1,Out):
* Chain [[598],599]: 1*it(598)+0
  Such that:it(598) =< Out

  with precondition: [Out>=1,V1>=Out] 

* Chain [599]: 0
  with precondition: [Out=0,V1>=0] 


#### Cost of loops [600] 

 * loop 600:fun71(V1,Out) -> [fun71(V1',Out')] 
1
#### Cost of phase [600]:fun71(V1,Out) -> [fun71(V1',Out')] 
1*it(600)+0
  Such that:it(600) =< V1
it(600) =< V1-V1'

#### Cost of chains of fun71(V1,Out):
* Chain [[600],601]: 1*it(600)+0
  Such that:it(600) =< Out

  with precondition: [Out>=1,V1>=Out] 

* Chain [601]: 0
  with precondition: [Out=0,V1>=0] 


#### Cost of loops [602,603] 

 * loop 602:fun72(V1,V,V2,Out) -> [fun72(V1',V',V2',Out')] 
1
 * loop 603:fun72(V1,V,V2,Out) -> [fun72(V1',V',V2',Out')] 
1
#### Cost of phase [602,603]:fun72(V1,V,V2,Out) -> [fun72(V1',V',V2',Out')] 
1*it(602)+1*it(603)+0
  Such that:it(603) =< V
it(603) =< V-V'
it(603) =< V2
it(603) =< V2-V2'
aux(146) =< V1
aux(147) =< V1-V1'
it(602) =< aux(146)
it(603) =< aux(146)
it(602) =< aux(147)
it(603) =< aux(147)

#### Cost of chains of fun72(V1,V,V2,Out):
* Chain [[602,603],604]: 1*it(602)+1*it(603)+0
  Such that:aux(146) =< V1
it(603) =< V
aux(147) =< Out
it(602) =< aux(146)
it(603) =< aux(146)
it(602) =< aux(147)
it(603) =< aux(147)

  with precondition: [V>=0,V2>=0,Out>=1,V1>=Out] 

* Chain [604]: 0
  with precondition: [Out=0,V1>=0,V>=0,V2>=0] 


#### Cost of loops [605] 

 * loop 605:fun73(V1,Out) -> [fun73(V1',Out')] 
1
#### Cost of phase [605]:fun73(V1,Out) -> [fun73(V1',Out')] 
1*it(605)+0
  Such that:it(605) =< V1
it(605) =< V1-V1'

#### Cost of chains of fun73(V1,Out):
* Chain [[605],606]: 1*it(605)+0
  Such that:it(605) =< Out

  with precondition: [Out>=1,V1>=Out] 

* Chain [606]: 0
  with precondition: [Out=0,V1>=0] 


#### Cost of loops [607,608] 

 * loop 607:fun74(V1,V,V2,Out) -> [fun74(V1',V',V2',Out')] 
1
 * loop 608:fun74(V1,V,V2,Out) -> [fun74(V1',V',V2',Out')] 
1
#### Cost of phase [607,608]:fun74(V1,V,V2,Out) -> [fun74(V1',V',V2',Out')] 
1*it(607)+1*it(608)+0
  Such that:it(608) =< V
it(608) =< V-V'
it(608) =< V2
it(608) =< V2-V2'
aux(148) =< V1
aux(149) =< V1-V1'
it(607) =< aux(148)
it(608) =< aux(148)
it(607) =< aux(149)
it(608) =< aux(149)

#### Cost of chains of fun74(V1,V,V2,Out):
* Chain [[607,608],609]: 1*it(607)+1*it(608)+0
  Such that:aux(148) =< V1
it(608) =< V
aux(149) =< Out
it(607) =< aux(148)
it(608) =< aux(148)
it(607) =< aux(149)
it(608) =< aux(149)

  with precondition: [V>=0,V2>=0,Out>=1,V1>=Out] 

* Chain [609]: 0
  with precondition: [Out=0,V1>=0,V>=0,V2>=0] 


#### Cost of loops [610,611] 

 * loop 610:fun75(V1,V,Out) -> [fun75(V1',V',Out')] 
1
 * loop 611:fun75(V1,V,Out) -> [fun75(V1',V',Out')] 
1
#### Cost of phase [610,611]:fun75(V1,V,Out) -> [fun75(V1',V',Out')] 
1*it(610)+1*it(611)+0
  Such that:it(611) =< V
it(611) =< V-V'
aux(150) =< V1
aux(151) =< V1-V1'
it(610) =< aux(150)
it(611) =< aux(150)
it(610) =< aux(151)
it(611) =< aux(151)

#### Cost of chains of fun75(V1,V,Out):
* Chain [[610,611],612]: 1*it(610)+1*it(611)+0
  Such that:aux(150) =< V1
it(611) =< V
aux(151) =< Out
it(610) =< aux(150)
it(611) =< aux(150)
it(610) =< aux(151)
it(611) =< aux(151)

  with precondition: [V>=0,Out>=1,V1>=Out] 

* Chain [612]: 0
  with precondition: [Out=0,V1>=0,V>=0] 


#### Cost of loops [613,614] 

 * loop 613:fun76(V1,V,Out) -> [fun76(V1',V',Out')] 
1
 * loop 614:fun76(V1,V,Out) -> [fun76(V1',V',Out')] 
1
#### Cost of phase [613,614]:fun76(V1,V,Out) -> [fun76(V1',V',Out')] 
1*it(613)+1*it(614)+0
  Such that:it(614) =< V
it(614) =< V-V'
aux(152) =< V1
aux(153) =< V1-V1'
it(613) =< aux(152)
it(614) =< aux(152)
it(613) =< aux(153)
it(614) =< aux(153)

#### Cost of chains of fun76(V1,V,Out):
* Chain [[613,614],615]: 1*it(613)+1*it(614)+0
  Such that:aux(152) =< V1
it(614) =< V
aux(153) =< Out
it(613) =< aux(152)
it(614) =< aux(152)
it(613) =< aux(153)
it(614) =< aux(153)

  with precondition: [V>=0,Out>=1,V1>=Out] 

* Chain [615]: 0
  with precondition: [Out=0,V1>=0,V>=0] 


#### Cost of loops [616,617] 

 * loop 616:fun77(V1,V,V2,Out) -> [fun77(V1',V',V2',Out')] 
1
 * loop 617:fun77(V1,V,V2,Out) -> [fun77(V1',V',V2',Out')] 
1
#### Cost of phase [616,617]:fun77(V1,V,V2,Out) -> [fun77(V1',V',V2',Out')] 
1*it(616)+1*it(617)+0
  Such that:it(617) =< V
it(617) =< V-V'
it(617) =< V2
it(617) =< V2-V2'
aux(154) =< V1
aux(155) =< V1-V1'
it(616) =< aux(154)
it(617) =< aux(154)
it(616) =< aux(155)
it(617) =< aux(155)

#### Cost of chains of fun77(V1,V,V2,Out):
* Chain [[616,617],618]: 1*it(616)+1*it(617)+0
  Such that:aux(154) =< V1
it(617) =< V
aux(155) =< Out
it(616) =< aux(154)
it(617) =< aux(154)
it(616) =< aux(155)
it(617) =< aux(155)

  with precondition: [V>=0,V2>=0,Out>=1,V1>=Out] 

* Chain [618]: 0
  with precondition: [Out=0,V1>=0,V>=0,V2>=0] 


#### Cost of loops [619] 

 * loop 619:fun78(V1,Out) -> [fun78(V1',Out')] 
1
#### Cost of phase [619]:fun78(V1,Out) -> [fun78(V1',Out')] 
1*it(619)+0
  Such that:it(619) =< V1
it(619) =< V1-V1'

#### Cost of chains of fun78(V1,Out):
* Chain [[619],620]: 1*it(619)+0
  Such that:it(619) =< Out

  with precondition: [Out>=1,V1>=Out] 

* Chain [620]: 0
  with precondition: [Out=0,V1>=0] 


#### Cost of loops [621,622] 

 * loop 621:fun79(V1,V,Out) -> [fun79(V1',V',Out')] 
1
 * loop 622:fun79(V1,V,Out) -> [fun79(V1',V',Out')] 
1
#### Cost of phase [621,622]:fun79(V1,V,Out) -> [fun79(V1',V',Out')] 
1*it(621)+1*it(622)+0
  Such that:it(622) =< V
it(622) =< V-V'
aux(156) =< V1
aux(157) =< V1-V1'
it(621) =< aux(156)
it(622) =< aux(156)
it(621) =< aux(157)
it(622) =< aux(157)

#### Cost of chains of fun79(V1,V,Out):
* Chain [[621,622],623]: 1*it(621)+1*it(622)+0
  Such that:aux(156) =< V1
it(622) =< V
aux(157) =< Out
it(621) =< aux(156)
it(622) =< aux(156)
it(621) =< aux(157)
it(622) =< aux(157)

  with precondition: [V>=0,Out>=1,V1>=Out] 

* Chain [623]: 0
  with precondition: [Out=0,V1>=0,V>=0] 


#### Cost of loops [624] 

 * loop 624:fun8(V1,Out) -> [fun8(V1',Out')] 
1
#### Cost of phase [624]:fun8(V1,Out) -> [fun8(V1',Out')] 
1*it(624)+0
  Such that:it(624) =< V1
it(624) =< V1-V1'

#### Cost of chains of fun8(V1,Out):
* Chain [[624],625]: 1*it(624)+0
  Such that:it(624) =< Out

  with precondition: [Out>=1,V1>=Out] 

* Chain [625]: 0
  with precondition: [Out=0,V1>=0] 


#### Cost of loops [626,627] 

 * loop 626:fun80(V1,V,V2,V3,Out) -> [fun80(V1',V',V2',V3',Out')] 
1
 * loop 627:fun80(V1,V,V2,V3,Out) -> [fun80(V1',V',V2',V3',Out')] 
1
#### Cost of phase [626,627]:fun80(V1,V,V2,V3,Out) -> [fun80(V1',V',V2',V3',Out')] 
1*it(626)+1*it(627)+0
  Such that:it(627) =< V
it(627) =< V-V'
it(627) =< V2
it(627) =< V2-V2'
it(627) =< V3
it(627) =< V3-V3'
aux(158) =< V1
aux(159) =< V1-V1'
it(626) =< aux(158)
it(627) =< aux(158)
it(626) =< aux(159)
it(627) =< aux(159)

#### Cost of chains of fun80(V1,V,V2,V3,Out):
* Chain [[626,627],628]: 1*it(626)+1*it(627)+0
  Such that:aux(158) =< V1
it(627) =< V
aux(159) =< Out
it(626) =< aux(158)
it(627) =< aux(158)
it(626) =< aux(159)
it(627) =< aux(159)

  with precondition: [V>=0,V2>=0,V3>=0,Out>=1,V1>=Out] 

* Chain [628]: 0
  with precondition: [Out=0,V1>=0,V>=0,V2>=0,V3>=0] 


#### Cost of loops [629,630] 

 * loop 629:fun81(V1,V,V2,Out) -> [fun81(V1',V',V2',Out')] 
1
 * loop 630:fun81(V1,V,V2,Out) -> [fun81(V1',V',V2',Out')] 
1
#### Cost of phase [629,630]:fun81(V1,V,V2,Out) -> [fun81(V1',V',V2',Out')] 
1*it(629)+1*it(630)+0
  Such that:it(630) =< V
it(630) =< V-V'
it(630) =< V2
it(630) =< V2-V2'
aux(160) =< V1
aux(161) =< V1-V1'
it(629) =< aux(160)
it(630) =< aux(160)
it(629) =< aux(161)
it(630) =< aux(161)

#### Cost of chains of fun81(V1,V,V2,Out):
* Chain [[629,630],631]: 1*it(629)+1*it(630)+0
  Such that:aux(160) =< V1
it(630) =< V
aux(161) =< Out
it(629) =< aux(160)
it(630) =< aux(160)
it(629) =< aux(161)
it(630) =< aux(161)

  with precondition: [V>=0,V2>=0,Out>=1,V1>=Out] 

* Chain [631]: 0
  with precondition: [Out=0,V1>=0,V>=0,V2>=0] 


#### Cost of loops [632,633] 

 * loop 632:fun82(V1,V,V2,Out) -> [fun82(V1',V',V2',Out')] 
1
 * loop 633:fun82(V1,V,V2,Out) -> [fun82(V1',V',V2',Out')] 
1
#### Cost of phase [632,633]:fun82(V1,V,V2,Out) -> [fun82(V1',V',V2',Out')] 
1*it(632)+1*it(633)+0
  Such that:it(633) =< V
it(633) =< V-V'
it(633) =< V2
it(633) =< V2-V2'
aux(162) =< V1
aux(163) =< V1-V1'
it(632) =< aux(162)
it(633) =< aux(162)
it(632) =< aux(163)
it(633) =< aux(163)

#### Cost of chains of fun82(V1,V,V2,Out):
* Chain [[632,633],634]: 1*it(632)+1*it(633)+0
  Such that:aux(162) =< V1
it(633) =< V
aux(163) =< Out
it(632) =< aux(162)
it(633) =< aux(162)
it(632) =< aux(163)
it(633) =< aux(163)

  with precondition: [V>=0,V2>=0,Out>=1,V1>=Out] 

* Chain [634]: 0
  with precondition: [Out=0,V1>=0,V>=0,V2>=0] 


#### Cost of loops [635,636] 

 * loop 635:fun83(V1,V,Out) -> [fun83(V1',V',Out')] 
1
 * loop 636:fun83(V1,V,Out) -> [fun83(V1',V',Out')] 
1
#### Cost of phase [635,636]:fun83(V1,V,Out) -> [fun83(V1',V',Out')] 
1*it(635)+1*it(636)+0
  Such that:it(636) =< V
it(636) =< V-V'
aux(164) =< V1
aux(165) =< V1-V1'
it(635) =< aux(164)
it(636) =< aux(164)
it(635) =< aux(165)
it(636) =< aux(165)

#### Cost of chains of fun83(V1,V,Out):
* Chain [[635,636],637]: 1*it(635)+1*it(636)+0
  Such that:aux(164) =< V1
it(636) =< V
aux(165) =< Out
it(635) =< aux(164)
it(636) =< aux(164)
it(635) =< aux(165)
it(636) =< aux(165)

  with precondition: [V>=0,Out>=1,V1>=Out] 

* Chain [637]: 0
  with precondition: [Out=0,V1>=0,V>=0] 


#### Cost of loops [638,639] 

 * loop 638:fun84(V1,V,V2,Out) -> [fun84(V1',V',V2',Out')] 
1
 * loop 639:fun84(V1,V,V2,Out) -> [fun84(V1',V',V2',Out')] 
1
#### Cost of phase [638,639]:fun84(V1,V,V2,Out) -> [fun84(V1',V',V2',Out')] 
1*it(638)+1*it(639)+0
  Such that:it(639) =< V
it(639) =< V-V'
it(639) =< V2
it(639) =< V2-V2'
aux(166) =< V1
aux(167) =< V1-V1'
it(638) =< aux(166)
it(639) =< aux(166)
it(638) =< aux(167)
it(639) =< aux(167)

#### Cost of chains of fun84(V1,V,V2,Out):
* Chain [[638,639],640]: 1*it(638)+1*it(639)+0
  Such that:aux(166) =< V1
it(639) =< V
aux(167) =< Out
it(638) =< aux(166)
it(639) =< aux(166)
it(638) =< aux(167)
it(639) =< aux(167)

  with precondition: [V>=0,V2>=0,Out>=1,V1>=Out] 

* Chain [640]: 0
  with precondition: [Out=0,V1>=0,V>=0,V2>=0] 


#### Cost of loops [641,642] 

 * loop 641:fun85(V1,V,V2,Out) -> [fun85(V1',V',V2',Out')] 
1
 * loop 642:fun85(V1,V,V2,Out) -> [fun85(V1',V',V2',Out')] 
1
#### Cost of phase [641,642]:fun85(V1,V,V2,Out) -> [fun85(V1',V',V2',Out')] 
1*it(641)+1*it(642)+0
  Such that:it(642) =< V
it(642) =< V-V'
it(642) =< V2
it(642) =< V2-V2'
aux(168) =< V1
aux(169) =< V1-V1'
it(641) =< aux(168)
it(642) =< aux(168)
it(641) =< aux(169)
it(642) =< aux(169)

#### Cost of chains of fun85(V1,V,V2,Out):
* Chain [[641,642],643]: 1*it(641)+1*it(642)+0
  Such that:aux(168) =< V1
it(642) =< V
aux(169) =< Out
it(641) =< aux(168)
it(642) =< aux(168)
it(641) =< aux(169)
it(642) =< aux(169)

  with precondition: [V>=0,V2>=0,Out>=1,V1>=Out] 

* Chain [643]: 0
  with precondition: [Out=0,V1>=0,V>=0,V2>=0] 


#### Cost of loops [644,645] 

 * loop 644:fun86(V1,V,Out) -> [fun86(V1',V',Out')] 
1
 * loop 645:fun86(V1,V,Out) -> [fun86(V1',V',Out')] 
1
#### Cost of phase [644,645]:fun86(V1,V,Out) -> [fun86(V1',V',Out')] 
1*it(644)+1*it(645)+0
  Such that:it(645) =< V
it(645) =< V-V'
aux(170) =< V1
aux(171) =< V1-V1'
it(644) =< aux(170)
it(645) =< aux(170)
it(644) =< aux(171)
it(645) =< aux(171)

#### Cost of chains of fun86(V1,V,Out):
* Chain [[644,645],646]: 1*it(644)+1*it(645)+0
  Such that:aux(170) =< V1
it(645) =< V
aux(171) =< Out
it(644) =< aux(170)
it(645) =< aux(170)
it(644) =< aux(171)
it(645) =< aux(171)

  with precondition: [V>=0,Out>=1,V1>=Out] 

* Chain [646]: 0
  with precondition: [Out=0,V1>=0,V>=0] 


#### Cost of loops [647,648] 

 * loop 647:fun87(V1,V,V2,Out) -> [fun87(V1',V',V2',Out')] 
1
 * loop 648:fun87(V1,V,V2,Out) -> [fun87(V1',V',V2',Out')] 
1
#### Cost of phase [647,648]:fun87(V1,V,V2,Out) -> [fun87(V1',V',V2',Out')] 
1*it(647)+1*it(648)+0
  Such that:it(648) =< V
it(648) =< V-V'
it(648) =< V2
it(648) =< V2-V2'
aux(172) =< V1
aux(173) =< V1-V1'
it(647) =< aux(172)
it(648) =< aux(172)
it(647) =< aux(173)
it(648) =< aux(173)

#### Cost of chains of fun87(V1,V,V2,Out):
* Chain [[647,648],649]: 1*it(647)+1*it(648)+0
  Such that:aux(172) =< V1
it(648) =< V
aux(173) =< Out
it(647) =< aux(172)
it(648) =< aux(172)
it(647) =< aux(173)
it(648) =< aux(173)

  with precondition: [V>=0,V2>=0,Out>=1,V1>=Out] 

* Chain [649]: 0
  with precondition: [Out=0,V1>=0,V>=0,V2>=0] 


#### Cost of loops [650,651] 

 * loop 650:fun88(V1,V,Out) -> [fun88(V1',V',Out')] 
1
 * loop 651:fun88(V1,V,Out) -> [fun88(V1',V',Out')] 
1
#### Cost of phase [650,651]:fun88(V1,V,Out) -> [fun88(V1',V',Out')] 
1*it(650)+1*it(651)+0
  Such that:it(651) =< V
it(651) =< V-V'
aux(174) =< V1
aux(175) =< V1-V1'
it(650) =< aux(174)
it(651) =< aux(174)
it(650) =< aux(175)
it(651) =< aux(175)

#### Cost of chains of fun88(V1,V,Out):
* Chain [[650,651],652]: 1*it(650)+1*it(651)+0
  Such that:aux(174) =< V1
it(651) =< V
aux(175) =< Out
it(650) =< aux(174)
it(651) =< aux(174)
it(650) =< aux(175)
it(651) =< aux(175)

  with precondition: [V>=0,Out>=1,V1>=Out] 

* Chain [652]: 0
  with precondition: [Out=0,V1>=0,V>=0] 


#### Cost of loops [653,654] 

 * loop 653:fun89(V1,V,V2,Out) -> [fun89(V1',V',V2',Out')] 
1
 * loop 654:fun89(V1,V,V2,Out) -> [fun89(V1',V',V2',Out')] 
1
#### Cost of phase [653,654]:fun89(V1,V,V2,Out) -> [fun89(V1',V',V2',Out')] 
1*it(653)+1*it(654)+0
  Such that:it(654) =< V
it(654) =< V-V'
it(654) =< V2
it(654) =< V2-V2'
aux(176) =< V1
aux(177) =< V1-V1'
it(653) =< aux(176)
it(654) =< aux(176)
it(653) =< aux(177)
it(654) =< aux(177)

#### Cost of chains of fun89(V1,V,V2,Out):
* Chain [[653,654],655]: 1*it(653)+1*it(654)+0
  Such that:aux(176) =< V1
it(654) =< V
aux(177) =< Out
it(653) =< aux(176)
it(654) =< aux(176)
it(653) =< aux(177)
it(654) =< aux(177)

  with precondition: [V>=0,V2>=0,Out>=1,V1>=Out] 

* Chain [655]: 0
  with precondition: [Out=0,V1>=0,V>=0,V2>=0] 


#### Cost of loops [656,657] 

 * loop 656:fun9(V1,V,Out) -> [fun9(V1',V',Out')] 
1
 * loop 657:fun9(V1,V,Out) -> [fun9(V1',V',Out')] 
1
#### Cost of phase [656,657]:fun9(V1,V,Out) -> [fun9(V1',V',Out')] 
1*it(656)+1*it(657)+0
  Such that:it(657) =< V
it(657) =< V-V'
aux(178) =< V1
aux(179) =< V1-V1'
it(656) =< aux(178)
it(657) =< aux(178)
it(656) =< aux(179)
it(657) =< aux(179)

#### Cost of chains of fun9(V1,V,Out):
* Chain [[656,657],658]: 1*it(656)+1*it(657)+0
  Such that:aux(178) =< V1
it(657) =< V
aux(179) =< Out
it(656) =< aux(178)
it(657) =< aux(178)
it(656) =< aux(179)
it(657) =< aux(179)

  with precondition: [V>=0,Out>=1,V1>=Out] 

* Chain [658]: 0
  with precondition: [Out=0,V1>=0,V>=0] 


#### Cost of loops [659] 

 * loop 659:fun90(V1,Out) -> [fun90(V1',Out')] 
1
#### Cost of phase [659]:fun90(V1,Out) -> [fun90(V1',Out')] 
1*it(659)+0
  Such that:it(659) =< V1
it(659) =< V1-V1'

#### Cost of chains of fun90(V1,Out):
* Chain [[659],660]: 1*it(659)+0
  Such that:it(659) =< Out

  with precondition: [Out>=1,V1>=Out] 

* Chain [660]: 0
  with precondition: [Out=0,V1>=0] 


#### Cost of loops [661] 

 * loop 661:fun91(V1,Out) -> [fun91(V1',Out')] 
1
#### Cost of phase [661]:fun91(V1,Out) -> [fun91(V1',Out')] 
1*it(661)+0
  Such that:it(661) =< V1
it(661) =< V1-V1'

#### Cost of chains of fun91(V1,Out):
* Chain [[661],662]: 1*it(661)+0
  Such that:it(661) =< Out

  with precondition: [Out>=1,V1>=Out] 

* Chain [662]: 0
  with precondition: [Out=0,V1>=0] 


#### Cost of loops [663] 

 * loop 663:fun92(V1,Out) -> [fun92(V1',Out')] 
1
#### Cost of phase [663]:fun92(V1,Out) -> [fun92(V1',Out')] 
1*it(663)+0
  Such that:it(663) =< V1
it(663) =< V1-V1'

#### Cost of chains of fun92(V1,Out):
* Chain [[663],664]: 1*it(663)+0
  Such that:it(663) =< Out

  with precondition: [Out>=1,V1>=Out] 

* Chain [664]: 0
  with precondition: [Out=0,V1>=0] 


#### Cost of loops [665] 

 * loop 665:fun93(V1,Out) -> [fun93(V1',Out')] 
1
#### Cost of phase [665]:fun93(V1,Out) -> [fun93(V1',Out')] 
1*it(665)+0
  Such that:it(665) =< V1
it(665) =< V1-V1'

#### Cost of chains of fun93(V1,Out):
* Chain [[665],666]: 1*it(665)+0
  Such that:it(665) =< Out

  with precondition: [Out>=1,V1>=Out] 

* Chain [666]: 0
  with precondition: [Out=0,V1>=0] 


#### Cost of loops [667] 

 * loop 667:fun94(V1,Out) -> [fun94(V1',Out')] 
1
#### Cost of phase [667]:fun94(V1,Out) -> [fun94(V1',Out')] 
1*it(667)+0
  Such that:it(667) =< V1
it(667) =< V1-V1'

#### Cost of chains of fun94(V1,Out):
* Chain [[667],668]: 1*it(667)+0
  Such that:it(667) =< Out

  with precondition: [Out>=1,V1>=Out] 

* Chain [668]: 0
  with precondition: [Out=0,V1>=0] 


#### Cost of loops [669,670] 

 * loop 669:fun95(V1,V,V2,V3,Out) -> [fun95(V1',V',V2',V3',Out')] 
1
 * loop 670:fun95(V1,V,V2,V3,Out) -> [fun95(V1',V',V2',V3',Out')] 
1
#### Cost of phase [669,670]:fun95(V1,V,V2,V3,Out) -> [fun95(V1',V',V2',V3',Out')] 
1*it(669)+1*it(670)+0
  Such that:it(670) =< V
it(670) =< V-V'
it(670) =< V2
it(670) =< V2-V2'
it(670) =< V3
it(670) =< V3-V3'
aux(180) =< V1
aux(181) =< V1-V1'
it(669) =< aux(180)
it(670) =< aux(180)
it(669) =< aux(181)
it(670) =< aux(181)

#### Cost of chains of fun95(V1,V,V2,V3,Out):
* Chain [[669,670],671]: 1*it(669)+1*it(670)+0
  Such that:aux(180) =< V1
it(670) =< V
aux(181) =< Out
it(669) =< aux(180)
it(670) =< aux(180)
it(669) =< aux(181)
it(670) =< aux(181)

  with precondition: [V>=0,V2>=0,V3>=0,Out>=1,V1>=Out] 

* Chain [671]: 0
  with precondition: [Out=0,V1>=0,V>=0,V2>=0,V3>=0] 


#### Cost of loops [672] 

 * loop 672:fun96(V1,Out) -> [fun96(V1',Out')] 
1
#### Cost of phase [672]:fun96(V1,Out) -> [fun96(V1',Out')] 
1*it(672)+0
  Such that:it(672) =< V1
it(672) =< V1-V1'

#### Cost of chains of fun96(V1,Out):
* Chain [[672],673]: 1*it(672)+0
  Such that:it(672) =< Out

  with precondition: [Out>=1,V1>=Out] 

* Chain [673]: 0
  with precondition: [Out=0,V1>=0] 


#### Cost of loops [674] 

 * loop 674:fun97(V1,Out) -> [fun97(V1',Out')] 
1
#### Cost of phase [674]:fun97(V1,Out) -> [fun97(V1',Out')] 
1*it(674)+0
  Such that:it(674) =< V1
it(674) =< V1-V1'

#### Cost of chains of fun97(V1,Out):
* Chain [[674],675]: 1*it(674)+0
  Such that:it(674) =< Out

  with precondition: [Out>=1,V1>=Out] 

* Chain [675]: 0
  with precondition: [Out=0,V1>=0] 


#### Cost of loops [676,677] 

 * loop 676:fun98(V1,V,Out) -> [fun98(V1',V',Out')] 
1
 * loop 677:fun98(V1,V,Out) -> [fun98(V1',V',Out')] 
1
#### Cost of phase [676,677]:fun98(V1,V,Out) -> [fun98(V1',V',Out')] 
1*it(676)+1*it(677)+0
  Such that:it(677) =< V
it(677) =< V-V'
aux(182) =< V1
aux(183) =< V1-V1'
it(676) =< aux(182)
it(677) =< aux(182)
it(676) =< aux(183)
it(677) =< aux(183)

#### Cost of chains of fun98(V1,V,Out):
* Chain [[676,677],678]: 1*it(676)+1*it(677)+0
  Such that:aux(182) =< V1
it(677) =< V
aux(183) =< Out
it(676) =< aux(182)
it(677) =< aux(182)
it(676) =< aux(183)
it(677) =< aux(183)

  with precondition: [V>=0,Out>=1,V1>=Out] 

* Chain [678]: 0
  with precondition: [Out=0,V1>=0,V>=0] 


#### Cost of loops [679,680] 

 * loop 679:fun99(V1,V,V2,Out) -> [fun99(V1',V',V2',Out')] 
1
 * loop 680:fun99(V1,V,V2,Out) -> [fun99(V1',V',V2',Out')] 
1
#### Cost of phase [679,680]:fun99(V1,V,V2,Out) -> [fun99(V1',V',V2',Out')] 
1*it(679)+1*it(680)+0
  Such that:it(680) =< V
it(680) =< V-V'
it(680) =< V2
it(680) =< V2-V2'
aux(184) =< V1
aux(185) =< V1-V1'
it(679) =< aux(184)
it(680) =< aux(184)
it(679) =< aux(185)
it(680) =< aux(185)

#### Cost of chains of fun99(V1,V,V2,Out):
* Chain [[679,680],681]: 1*it(679)+1*it(680)+0
  Such that:aux(184) =< V1
it(680) =< V
aux(185) =< Out
it(679) =< aux(184)
it(680) =< aux(184)
it(679) =< aux(185)
it(680) =< aux(185)

  with precondition: [V>=0,V2>=0,Out>=1,V1>=Out] 

* Chain [681]: 0
  with precondition: [Out=0,V1>=0,V>=0,V2>=0] 


#### Cost of loops [682] 

 * loop 682:head(V1,Out) -> [head(V1',Out')] 
1
#### Cost of phase [682]:head(V1,Out) -> [head(V1',Out')] 
1*it(682)+0
  Such that:it(682) =< V1
it(682) =< V1-V1'

#### Cost of chains of head(V1,Out):
* Chain [[682],683]: 1*it(682)+0
  Such that:it(682) =< Out

  with precondition: [Out>=1,V1>=Out] 

* Chain [683]: 0
  with precondition: [Out=0,V1>=0] 


#### Cost of loops [684] 

 * loop 684:isLNat(V1,Out) -> [isLNat(V1',Out')] 
1
#### Cost of phase [684]:isLNat(V1,Out) -> [isLNat(V1',Out')] 
1*it(684)+0
  Such that:it(684) =< V1
it(684) =< V1-V1'

#### Cost of chains of isLNat(V1,Out):
* Chain [[684],685]: 1*it(684)+0
  Such that:it(684) =< Out

  with precondition: [Out>=1,V1>=Out] 

* Chain [685]: 0
  with precondition: [Out=0,V1>=0] 


#### Cost of loops [686] 

 * loop 686:isLNatKind(V1,Out) -> [isLNatKind(V1',Out')] 
1
#### Cost of phase [686]:isLNatKind(V1,Out) -> [isLNatKind(V1',Out')] 
1*it(686)+0
  Such that:it(686) =< V1
it(686) =< V1-V1'

#### Cost of chains of isLNatKind(V1,Out):
* Chain [[686],687]: 1*it(686)+0
  Such that:it(686) =< Out

  with precondition: [Out>=1,V1>=Out] 

* Chain [687]: 0
  with precondition: [Out=0,V1>=0] 


#### Cost of loops [688] 

 * loop 688:isNatural(V1,Out) -> [isNatural(V1',Out')] 
1
#### Cost of phase [688]:isNatural(V1,Out) -> [isNatural(V1',Out')] 
1*it(688)+0
  Such that:it(688) =< V1
it(688) =< V1-V1'

#### Cost of chains of isNatural(V1,Out):
* Chain [[688],689]: 1*it(688)+0
  Such that:it(688) =< Out

  with precondition: [Out>=1,V1>=Out] 

* Chain [689]: 0
  with precondition: [Out=0,V1>=0] 


#### Cost of loops [690] 

 * loop 690:isNaturalKind(V1,Out) -> [isNaturalKind(V1',Out')] 
1
#### Cost of phase [690]:isNaturalKind(V1,Out) -> [isNaturalKind(V1',Out')] 
1*it(690)+0
  Such that:it(690) =< V1
it(690) =< V1-V1'

#### Cost of chains of isNaturalKind(V1,Out):
* Chain [[690],691]: 1*it(690)+0
  Such that:it(690) =< Out

  with precondition: [Out>=1,V1>=Out] 

* Chain [691]: 0
  with precondition: [Out=0,V1>=0] 


#### Cost of loops [692] 

 * loop 692:isPLNat(V1,Out) -> [isPLNat(V1',Out')] 
1
#### Cost of phase [692]:isPLNat(V1,Out) -> [isPLNat(V1',Out')] 
1*it(692)+0
  Such that:it(692) =< V1
it(692) =< V1-V1'

#### Cost of chains of isPLNat(V1,Out):
* Chain [[692],693]: 1*it(692)+0
  Such that:it(692) =< Out

  with precondition: [Out>=1,V1>=Out] 

* Chain [693]: 0
  with precondition: [Out=0,V1>=0] 


#### Cost of loops [694] 

 * loop 694:isPLNatKind(V1,Out) -> [isPLNatKind(V1',Out')] 
1
#### Cost of phase [694]:isPLNatKind(V1,Out) -> [isPLNatKind(V1',Out')] 
1*it(694)+0
  Such that:it(694) =< V1
it(694) =< V1-V1'

#### Cost of chains of isPLNatKind(V1,Out):
* Chain [[694],695]: 1*it(694)+0
  Such that:it(694) =< Out

  with precondition: [Out>=1,V1>=Out] 

* Chain [695]: 0
  with precondition: [Out=0,V1>=0] 


#### Cost of loops [696] 

 * loop 696:natsFrom(V1,Out) -> [natsFrom(V1',Out')] 
1
#### Cost of phase [696]:natsFrom(V1,Out) -> [natsFrom(V1',Out')] 
1*it(696)+0
  Such that:it(696) =< V1
it(696) =< V1-V1'

#### Cost of chains of natsFrom(V1,Out):
* Chain [[696],697]: 1*it(696)+0
  Such that:it(696) =< Out

  with precondition: [Out>=1,V1>=Out] 

* Chain [697]: 0
  with precondition: [Out=0,V1>=0] 


#### Cost of loops [698,699,700] 

 * loop 698:pair(V1,V,Out) -> [pair(V1',V',Out')] 
1
 * loop 699:pair(V1,V,Out) -> [pair(V1',V',Out')] 
1
 * loop 700:pair(V1,V,Out) -> [pair(V1',V',Out')] 
1
#### Cost of phase [698,699,700]:pair(V1,V,Out) -> [pair(V1',V',Out')] 
1*it(698)+1*it(699)+1*it(700)+0
  Such that:aux(186) =< V1
aux(187) =< V1+V
aux(188) =< V1+V-V1'-V'
aux(189) =< V1-V1'
aux(190) =< V
aux(191) =< V-V'
it(699) =< aux(186)
it(700) =< aux(186)
it(698) =< aux(187)
it(699) =< aux(187)
it(700) =< aux(187)
it(698) =< aux(188)
it(699) =< aux(188)
it(700) =< aux(188)
it(699) =< aux(189)
it(700) =< aux(189)
it(698) =< aux(190)
it(700) =< aux(190)
it(698) =< aux(191)
it(700) =< aux(191)

#### Cost of chains of pair(V1,V,Out):
* Chain [[698,699,700],701]: 1*it(698)+1*it(699)+1*it(700)+0
  Such that:aux(192) =< V1
aux(193) =< V1+V
aux(194) =< V
it(699) =< aux(192)
it(700) =< aux(192)
it(698) =< aux(193)
it(699) =< aux(193)
it(700) =< aux(193)
it(698) =< aux(194)
it(700) =< aux(194)

  with precondition: [V1>=0,V>=0,Out>=1,V+V1>=Out] 

* Chain [701]: 0
  with precondition: [Out=0,V1>=0,V>=0] 


#### Cost of chains of proper(V1,Out):
* Chain [705]: 1
  with precondition: [V1=0,Out=1] 

* Chain [704]: 1
  with precondition: [V1=1,Out=2] 

* Chain [703]: 1
  with precondition: [V1=2,Out=3] 

* Chain [702]: 0
  with precondition: [Out=0,V1>=0] 


#### Cost of loops [706] 

 * loop 706:s(V1,Out) -> [s(V1',Out')] 
1
#### Cost of phase [706]:s(V1,Out) -> [s(V1',Out')] 
1*it(706)+0
  Such that:it(706) =< V1
it(706) =< V1-V1'

#### Cost of chains of s(V1,Out):
* Chain [[706],707]: 1*it(706)+0
  Such that:it(706) =< Out

  with precondition: [Out>=1,V1>=Out] 

* Chain [707]: 0
  with precondition: [Out=0,V1>=0] 


#### Cost of loops [708,709,710] 

 * loop 708:sel(V1,V,Out) -> [sel(V1',V',Out')] 
1
 * loop 709:sel(V1,V,Out) -> [sel(V1',V',Out')] 
1
 * loop 710:sel(V1,V,Out) -> [sel(V1',V',Out')] 
1
#### Cost of phase [708,709,710]:sel(V1,V,Out) -> [sel(V1',V',Out')] 
1*it(708)+1*it(709)+1*it(710)+0
  Such that:aux(195) =< V1
aux(196) =< V1+V
aux(197) =< V1+V-V1'-V'
aux(198) =< V1-V1'
aux(199) =< V
aux(200) =< V-V'
it(709) =< aux(195)
it(710) =< aux(195)
it(708) =< aux(196)
it(709) =< aux(196)
it(710) =< aux(196)
it(708) =< aux(197)
it(709) =< aux(197)
it(710) =< aux(197)
it(709) =< aux(198)
it(710) =< aux(198)
it(708) =< aux(199)
it(710) =< aux(199)
it(708) =< aux(200)
it(710) =< aux(200)

#### Cost of chains of sel(V1,V,Out):
* Chain [[708,709,710],711]: 1*it(708)+1*it(709)+1*it(710)+0
  Such that:aux(201) =< V1
aux(202) =< V1+V
aux(203) =< V
it(709) =< aux(201)
it(710) =< aux(201)
it(708) =< aux(202)
it(709) =< aux(202)
it(710) =< aux(202)
it(708) =< aux(203)
it(710) =< aux(203)

  with precondition: [V1>=0,V>=0,Out>=1,V+V1>=Out] 

* Chain [711]: 0
  with precondition: [Out=0,V1>=0,V>=0] 


#### Cost of loops [712] 

 * loop 712:snd(V1,Out) -> [snd(V1',Out')] 
1
#### Cost of phase [712]:snd(V1,Out) -> [snd(V1',Out')] 
1*it(712)+0
  Such that:it(712) =< V1
it(712) =< V1-V1'

#### Cost of chains of snd(V1,Out):
* Chain [[712],713]: 1*it(712)+0
  Such that:it(712) =< Out

  with precondition: [Out>=1,V1>=Out] 

* Chain [713]: 0
  with precondition: [Out=0,V1>=0] 


#### Cost of loops [714,715,716] 

 * loop 714:splitAt(V1,V,Out) -> [splitAt(V1',V',Out')] 
1
 * loop 715:splitAt(V1,V,Out) -> [splitAt(V1',V',Out')] 
1
 * loop 716:splitAt(V1,V,Out) -> [splitAt(V1',V',Out')] 
1
#### Cost of phase [714,715,716]:splitAt(V1,V,Out) -> [splitAt(V1',V',Out')] 
1*it(714)+1*it(715)+1*it(716)+0
  Such that:aux(204) =< V1
aux(205) =< V1+V
aux(206) =< V1+V-V1'-V'
aux(207) =< V1-V1'
aux(208) =< V
aux(209) =< V-V'
it(715) =< aux(204)
it(716) =< aux(204)
it(714) =< aux(205)
it(715) =< aux(205)
it(716) =< aux(205)
it(714) =< aux(206)
it(715) =< aux(206)
it(716) =< aux(206)
it(715) =< aux(207)
it(716) =< aux(207)
it(714) =< aux(208)
it(716) =< aux(208)
it(714) =< aux(209)
it(716) =< aux(209)

#### Cost of chains of splitAt(V1,V,Out):
* Chain [[714,715,716],717]: 1*it(714)+1*it(715)+1*it(716)+0
  Such that:aux(210) =< V1
aux(211) =< V1+V
aux(212) =< V
it(715) =< aux(210)
it(716) =< aux(210)
it(714) =< aux(211)
it(715) =< aux(211)
it(716) =< aux(211)
it(714) =< aux(212)
it(716) =< aux(212)

  with precondition: [V1>=0,V>=0,Out>=1,V+V1>=Out] 

* Chain [717]: 0
  with precondition: [Out=0,V1>=0,V>=0] 


#### Cost of loops [718] 

 * loop 718:tail(V1,Out) -> [tail(V1',Out')] 
1
#### Cost of phase [718]:tail(V1,Out) -> [tail(V1',Out')] 
1*it(718)+0
  Such that:it(718) =< V1
it(718) =< V1-V1'

#### Cost of chains of tail(V1,Out):
* Chain [[718],719]: 1*it(718)+0
  Such that:it(718) =< Out

  with precondition: [Out>=1,V1>=Out] 

* Chain [719]: 0
  with precondition: [Out=0,V1>=0] 


#### Cost of loops [720,721,722] 

 * loop 720:take(V1,V,Out) -> [take(V1',V',Out')] 
1
 * loop 721:take(V1,V,Out) -> [take(V1',V',Out')] 
1
 * loop 722:take(V1,V,Out) -> [take(V1',V',Out')] 
1
#### Cost of phase [720,721,722]:take(V1,V,Out) -> [take(V1',V',Out')] 
1*it(720)+1*it(721)+1*it(722)+0
  Such that:aux(213) =< V1
aux(214) =< V1+V
aux(215) =< V1+V-V1'-V'
aux(216) =< V1-V1'
aux(217) =< V
aux(218) =< V-V'
it(721) =< aux(213)
it(722) =< aux(213)
it(720) =< aux(214)
it(721) =< aux(214)
it(722) =< aux(214)
it(720) =< aux(215)
it(721) =< aux(215)
it(722) =< aux(215)
it(721) =< aux(216)
it(722) =< aux(216)
it(720) =< aux(217)
it(722) =< aux(217)
it(720) =< aux(218)
it(722) =< aux(218)

#### Cost of chains of take(V1,V,Out):
* Chain [[720,721,722],723]: 1*it(720)+1*it(721)+1*it(722)+0
  Such that:aux(219) =< V1
aux(220) =< V1+V
aux(221) =< V
it(721) =< aux(219)
it(722) =< aux(219)
it(720) =< aux(220)
it(721) =< aux(220)
it(722) =< aux(220)
it(720) =< aux(221)
it(722) =< aux(221)

  with precondition: [V1>=0,V>=0,Out>=1,V+V1>=Out] 

* Chain [723]: 0
  with precondition: [Out=0,V1>=0,V>=0] 


#### Cost of loops [725,726,727] 

 * loop 725:top(V1,Out) -> [top(V1',Out')] 
2
 * loop 726:top(V1,Out) -> [top(V1',Out')] 
2
 * loop 727:top(V1,Out) -> [top(V1',Out')] 
2
#### Cost of phase [725,726,727]:top(V1,Out) -> [top(V1',Out')] 
6*it(725)+0
#### Cost of phase [725,726,727]:top(V1,Out) -> [top(V1',Out')] 
6*it(725)+0
#### Cost of phase [725,726,727]:top(V1,Out) -> [top(V1',Out')] 
6*it(725)+0
#### Cost of chains of top(V1,Out):
* Chain [[725,726,727]]...: 6*it(725)+0
  with precondition: [V1>=1] 

* Chain [[725,726,727],728]: 6*it(725)+0
  with precondition: [Out=0,V1>=1] 

* Chain [[725,726,727],724,728]: 6*it(725)+1
  with precondition: [Out=0,V1>=1] 

* Chain [728]: 0
  with precondition: [Out=0,V1>=0] 

* Chain [724,728]: 1
  with precondition: [Out=0,V1>=1] 


#### Cost of chains of start(V1,V,V2,V3):
* Chain [732]...: 6*s(3)+0
  with precondition: [V1>=1] 

* Chain [731]: 88*s(5)+124*s(7)+1*s(16)+5*s(81)+5*s(82)+5*s(83)+1
  Such that:aux(311) =< V1
aux(312) =< V1+V
aux(313) =< V
s(7) =< aux(311)
s(5) =< aux(313)
s(81) =< aux(311)
s(82) =< aux(311)
s(83) =< aux(312)
s(81) =< aux(312)
s(82) =< aux(312)
s(83) =< aux(313)
s(82) =< aux(313)
s(5) =< aux(311)

  with precondition: [V1>=0] 

* Chain [730]: 1
  with precondition: [V1=1] 

* Chain [729]: 1
  with precondition: [V1=2] 


Closed-form bounds of start(V1,V,V2,V3): 
-------------------------------------
* Chain [732]... with precondition: [V1>=1] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [731] with precondition: [V1>=0] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [730] with precondition: [V1=1] 
    - Upper bound: 1 
    - Complexity: constant 
* Chain [729] with precondition: [V1=2] 
    - Upper bound: 1 
    - Complexity: constant 

### Maximum cost of start(V1,V,V2,V3): inf 
Asymptotic class: infinity 

Time statistics: 
-------------------------------------
* Partial evaluation computed in 1144 ms.
* Invariants computed in 1773 ms.
   - Backward Invariants 645 ms.
   - Transitive Invariants 551 ms.
* Refinement performed in 4082 ms.
* Termination proved in 650 ms.
* Upper bounds computed in 2467 ms.
   - Equation cost structures 786 ms.
   - Phase cost structures 1009 ms.
   - Chain cost structures 931 ms.
   - Solving cost expressions 1 ms.
* Total analysis performed in 11903 ms.


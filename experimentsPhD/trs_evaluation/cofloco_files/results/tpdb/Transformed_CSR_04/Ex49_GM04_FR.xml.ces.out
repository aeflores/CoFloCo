
Preprocessing Cost Relations
=====================================
3. SCC does not have a single cut point : [minus/3,activate/2]  
 Merged into minusactivate/3

#### Computed strongly connected components 
0. non_recursive  : [ (div)/3]
1. non_recursive  : [fun/1]
2. non_recursive  : [s/2]
4. recursive  : [geq/3]
5. non_recursive  : [if/4]
6. non_recursive  : [start/3]
3. recursive [non_tail,multiple] : [minusactivate/3]

#### Obtained direct recursion through partial evaluation 
0. SCC is completely evaluated into other SCCs
1. SCC is completely evaluated into other SCCs
2. SCC is completely evaluated into other SCCs
4. SCC is partially evaluated into geq/3
5. SCC is partially evaluated into if/4
6. SCC is partially evaluated into start/3
3. SCC is partially evaluated into minusactivate/3

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations minusactivate/3 
* CE 8 is refined into CE [19] 
* CE 6 is refined into CE [20] 
* CE 11 is refined into CE [21] 
* CE 9 is refined into CE [22] 
* CE 10 is refined into CE [23] 
* CE 7 is refined into CE [24] 


#### Refined cost equations minusactivate/3 
* CE 19: minusactivate(A,B,C) = 1
     [B>=0,A>=0,A+B+1=C] 
* CE 20: minusactivate(A,B,C) = 2
     [C=0,A=0] 
* CE 21: minusactivate(A,B,A) = 1
     [A>=0] 
* CE 22: minusactivate(A,B,C) = 2+ minusactivate(D,E,F)
     [C+D>=A,A>=D+1,D>=0,C+D=A+F] 
* CE 23: minusactivate(A,B,C) = 1+ minusactivate(D,E,C)
     [E>=0,D>=0,D+E+1=A] 
* CE 24: minusactivate(A,B,C) = 1+ minusactivate(D,E,F)+ minusactivate(G,H,I)+ minusactivate(F,I,C)
     [G>=0,D>=0,G+1=B,D+1=A] 

### Cost equations --> "Loop" of minusactivate/3 
* CEs [24] --> Loop 14 
* CEs [22] --> Loop 15 
* CEs [23] --> Loop 16 
* CEs [19] --> Loop 17 
* CEs [20,21] --> Loop 18 

#### Loops of minusactivate/3 
* Loop 14: minusactivate(A,B,C)->  minusactivate(A',B',C')  minusactivate(A'2,B'2,C'2)  minusactivate(C',C'2,C)
                  [A'2>=0,A'>=0,A'2+1=B,A'+1=A] 
* Loop 15: minusactivate(A,B,C)->  minusactivate(A',B',C')
                  [C+A'>=A,A>=A'+1,A'>=0,A+C'=C+A'] 
* Loop 16: minusactivate(A,B,C)->  minusactivate(A',B',C)
                  [A>=A'+1,A'>=0,A'+B'+1=A] 
* Loop 17: minusactivate(A,B,C) [B>=0,A>=0,A+B+1=C] 
* Loop 18: minusactivate(A,B,A) [A>=0] 

### Ranking functions of CR minusactivate(A,B,C) 

#### Partial ranking functions of CR minusactivate(A,B,C) 
* Partial RF of phase [14,15,16]:
  - RF of loop [14:1,15:1,16:1]:
    A depends on loops [14:2,14:3] 


### Resulting Chains:minusactivate(A,B,C) 
* [multiple([14,15,16],[[],[18],[17]])]...
* [18]
* [17]


### Merging Chains  minusactivate/3 into  External patterns of execution 
* [[18]] --> 1 
* [[17]] --> 2 
* [[multiple([14,15,16],[[],[18],[17]])]] --> 3 


### Specialization of cost equations geq/3 
* CE 15 is refined into CE [25] 
* CE 12 is refined into CE [26] 
* CE 13 is refined into CE [27] 
* CE 14 is refined into CE [28,29,30,31,32,33,34] 


#### Refined cost equations geq/3 
* CE 25: geq(V1,V,Out) = 0
     [V>=0,V1>=0,Out=0] 
* CE 26: geq(V1,V,Out) = 1
     [V1>=0,Out=2,V=0] 
* CE 27: geq(V1,V,Out) = 1
     [V>=1,Out=1,V1=0] 
* CE 28: geq(V1,V,Out) = 1+ minusactivate(W1,X1,W1):1+ minusactivate(Y1,Z1,Y1):1+ geq(W1,Y1,Out)
     [Y1>=0,W1>=0,Y1+1=V,W1+1=V1] 
* CE 29: geq(V1,V,Out) = 1+ minusactivate(W1,X1,W1):1+ minusactivate(Y1,Z1,A2):2+ geq(W1,A2,Out)
     [A2>=Y1+1,Y1>=0,W1>=0,A2=Y1+Z1+1,Y1+1=V,W1+1=V1] 
* CE 30: geq(V1,V,Out) = 1+ minusactivate(W1,X1,W1):1+ minusactivate(Y1,Z1,A2):3
     [Y1>=1,W1>=0,Y1+1=V,W1+1=V1] 
* CE 31: geq(V1,V,Out) = 1+ minusactivate(W1,X1,Y1):2+ minusactivate(Z1,A2,Z1):1+ geq(Y1,Z1,Out)
     [Y1>=W1+1,Z1>=0,W1>=0,Y1=W1+X1+1,Z1+1=V,W1+1=V1] 
* CE 32: geq(V1,V,Out) = 1+ minusactivate(W1,X1,Y1):2+ minusactivate(Z1,A2,B2):2+ geq(Y1,B2,Out)
     [B2>=Z1+1,Y1>=W1+1,Z1>=0,W1>=0,B2=Z1+A2+1,Y1=W1+X1+1,Z1+1=V,W1+1=V1] 
* CE 33: geq(V1,V,Out) = 1+ minusactivate(W1,X1,Y1):2+ minusactivate(Z1,A2,B2):3
     [Y1>=W1+1,Z1>=1,W1>=0,Y1=W1+X1+1,Z1+1=V,W1+1=V1] 
* CE 34: geq(V1,V,Out) = 1+ minusactivate(W1,X1,Y1):3
     [Z1>=0,W1>=1,Z1+1=V,W1+1=V1] 

### Cost equations --> "Loop" of geq/3 
* CEs [34] --> Loop 19 
* CEs [30,33] --> Loop 20 
* CEs [32] --> Loop 21 
* CEs [31] --> Loop 22 
* CEs [29] --> Loop 23 
* CEs [28] --> Loop 24 
* CEs [25] --> Loop 25 
* CEs [26] --> Loop 26 
* CEs [27] --> Loop 27 

#### Loops of geq/3 
* Loop 19: geq(V1,V,Out) [V>=1,V1>=2] 
* Loop 20: geq(V1,V,Out) [V>=2,V1>=1] 
* Loop 21: geq(V1,V,Out)->  geq(V1',V',Out)
                  [V'>=V,V1'>=V1,V>=1,V1>=1] 
* Loop 22: geq(V1,V,Out)->  geq(V1',V',Out)
                  [V1'>=V1,V>=1,V1>=1,V=V'+1] 
* Loop 23: geq(V1,V,Out)->  geq(V1',V',Out)
                  [V'>=V,V>=1,V1>=1,V1=V1'+1] 
* Loop 24: geq(V1,V,Out)->  geq(V1',V',Out)
                  [V>=1,V1>=1,V=V'+1,V1=V1'+1] 
* Loop 25: geq(V1,V,Out) [V>=0,V1>=0,Out=0] 
* Loop 26: geq(V1,V,Out) [V1>=0,Out=2,V=0] 
* Loop 27: geq(V1,V,Out) [V>=1,Out=1,V1=0] 

### Ranking functions of CR geq(V1,V,Out) 

#### Partial ranking functions of CR geq(V1,V,Out) 
* Partial RF of phase [21,22,23,24]:
  - RF of loop [22:1,24:1]:
    V depends on loops [21:1,23:1] 
  - RF of loop [23:1,24:1]:
    V1 depends on loops [21:1,22:1] 


### Resulting Chains:geq(V1,V,Out) 
* [[21,22,23,24]]...
* [[21,22,23,24],27]
* [[21,22,23,24],26]
* [[21,22,23,24],25]
* [[21,22,23,24],20]...
* [[21,22,23,24],19]...
* [27]
* [26]
* [25]
* [20]...
* [19]...


### Merging Chains  geq/3 into  External patterns of execution 
* [[27]] --> 1 
* [[26]] --> 2 
* [[25],[25,[21,22,23,24]]] --> 3 
* [[27,[21,22,23,24]]] --> 4 
* [[26,[21,22,23,24]]] --> 5 
* [[[21,22,23,24]],[19,[21,22,23,24]],[20,[21,22,23,24]]] --> 6 
* [[20]] --> 7 
* [[19]] --> 8 


### Specialization of cost equations if/4 
* CE 18 is refined into CE [35] 
* CE 16 is refined into CE [36,37,38] 
* CE 17 is refined into CE [39,40,41] 


#### Refined cost equations if/4 
* CE 35: if(V1,V,V2,Out) = 0
     [V2>=0,V>=0,V1>=0,Out=0] 
* CE 36: if(A,B,C,B) = 1+ minusactivate(B,D,B):1
     [B>=0,C>=0,A=2] 
* CE 37: if(V1,V,V2,Out) = 1+ minusactivate(V,W2,Out):2
     [Out>=V+1,V>=0,V2>=0,Out=V+W2+1,V1=2] 
* CE 38: if(V1,V,V2,Out) = 1+ minusactivate(V,W2,Out):3
     [V>=1,V2>=0,V1=2] 
* CE 39: if(A,B,C,C) = 1+ minusactivate(C,D,C):1
     [C>=0,B>=0,A=1] 
* CE 40: if(V1,V,V2,Out) = 1+ minusactivate(V2,W2,Out):2
     [Out>=V2+1,V2>=0,V>=0,Out=V2+W2+1,V1=1] 
* CE 41: if(V1,V,V2,Out) = 1+ minusactivate(V2,W2,Out):3
     [V2>=1,V>=0,V1=1] 

### Cost equations --> "Loop" of if/4 
* CEs [38] --> Loop 28 
* CEs [41] --> Loop 29 
* CEs [35] --> Loop 30 
* CEs [37] --> Loop 31 
* CEs [36] --> Loop 32 
* CEs [40] --> Loop 33 
* CEs [39] --> Loop 34 

#### Loops of if/4 
* Loop 28: if(V1,V,V2,Out) [V2>=0,V>=1,V1=2] 
* Loop 29: if(V1,V,V2,Out) [V2>=1,V>=0,V1=1] 
* Loop 30: if(V1,V,V2,Out) [V2>=0,V>=0,V1>=0,Out=0] 
* Loop 31: if(V1,V,V2,Out) [Out>=V+1,V2>=0,V>=0,V1=2] 
* Loop 32: if(A,B,C,B) [C>=0,B>=0,A=2] 
* Loop 33: if(V1,V,V2,Out) [Out>=V2+1,V2>=0,V>=0,V1=1] 
* Loop 34: if(A,B,C,C) [C>=0,B>=0,A=1] 

### Ranking functions of CR if(V1,V,V2,Out) 

#### Partial ranking functions of CR if(V1,V,V2,Out) 


### Resulting Chains:if(V1,V,V2,Out) 
* [34]
* [33]
* [32]
* [31]
* [30]
* [29]...
* [28]...


### Merging Chains  if/4 into  External patterns of execution 
* [[34]] --> 1 
* [[33]] --> 2 
* [[32]] --> 3 
* [[31]] --> 4 
* [[30]] --> 5 
* [[29]] --> 6 
* [[28]] --> 7 


### Specialization of cost equations start/3 
* CE 2 is refined into CE [42,43,44] 
* CE 3 is refined into CE [45,46,47,48,49,50,51,52] 
* CE 4 is refined into CE [53,54,55,56,57,58,59] 
* CE 5 is refined into CE [60] 


#### Refined cost equations start/3 
* CE 42: start(V1,V,V2) = 0+ minusactivate(V1,W2,V1):1
     [V1>=0] 
* CE 43: start(V1,V,V2) = 0+ minusactivate(V1,W2,X2):2
     [X2>=V1+1,V1>=0,X2=V1+W2+1] 
* CE 44: start(V1,V,V2) = 0+ minusactivate(V1,W2,X2):3
     [V1>=1] 
* CE 45: start(V1,V,V2) = 0+ geq(W2,V,X2):1
     [V>=1,X2=1,W2=0,V1=0] 
* CE 46: start(V1,V,V2) = 0+ geq(V1,W2,X2):2
     [V1>=0,X2=2,W2=0,V=0] 
* CE 47: start(V1,V,V2) = 0+ geq(V1,V,W2):3
     [V>=0,V1>=0,W2=0] 
* CE 48: start(V1,V,V2) = 0+ geq(V1,V,W2):4
     [V>=1,V1>=1,W2=1] 
* CE 49: start(V1,V,V2) = 0+ geq(V1,V,W2):5
     [V>=1,V1>=1,W2=2] 
* CE 50: start(V1,V,V2) = 0+ geq(V1,V,W2):6
     [V>=1,V1>=1] 
* CE 51: start(V1,V,V2) = 0+ geq(V1,V,W2):7
     [V>=2,V1>=1] 
* CE 52: start(V1,V,V2) = 0+ geq(V1,V,W2):8
     [V>=1,V1>=2] 
* CE 53: start(V1,V,V2) = 0+ if(W2,V,V2,V2):1
     [V2>=0,V>=0,W2=1,V1=1] 
* CE 54: start(V1,V,V2) = 0+ if(W2,V,V2,X2):2
     [X2>=V2+1,V2>=0,V>=0,W2=1,V1=1] 
* CE 55: start(V1,V,V2) = 0+ if(W2,V,V2,V):3
     [V>=0,V2>=0,W2=2,V1=2] 
* CE 56: start(V1,V,V2) = 0+ if(W2,V,V2,X2):4
     [X2>=V+1,V2>=0,V>=0,W2=2,V1=2] 
* CE 57: start(V1,V,V2) = 0+ if(V1,V,V2,W2):5
     [V2>=0,V>=0,V1>=0,W2=0] 
* CE 58: start(V1,V,V2) = 0+ if(W2,V,V2,X2):6
     [V2>=1,V>=0,W2=1,V1=1] 
* CE 59: start(V1,V,V2) = 0+ if(W2,V,V2,X2):7
     [V2>=0,V>=1,W2=2,V1=2] 
* CE 60: start(V1,V,V2) = 1
     [] 

### Cost equations --> "Loop" of start/3 
* CEs [42,43,45,46,47,48,49,53,54,55,56,57,60] --> Loop 35 
* CEs [59] --> Loop 36 
* CEs [44,50,51,52,58] --> Loop 37 

#### Loops of start/3 
* Loop 35: start(V1,V,V2) [] 
* Loop 36: start(V1,V,V2) [V2>=0,V>=1,V1=2] 
* Loop 37: start(V1,V,V2) [V1>=1] 

### Ranking functions of CR start(V1,V,V2) 

#### Partial ranking functions of CR start(V1,V,V2) 


### Resulting Chains:start(V1,V,V2) 
* [37]...
* [36]...
* [35]


### Merging Chains  start/3 into  External patterns of execution 
* [[35]] --> 1 
* [[36]] --> 2 
* [[37]] --> 3 


Computing Bounds
=====================================

#### Cost of loops [14,15,16] 

 * loop 14:minusactivate(A,B,C) -> [minusactivate(A',B',C'),minusactivate(A'2,B'2,C'2),minusactivate(A'3,B'3,C'3)] 
1
 * loop 15:minusactivate(A,B,C) -> [minusactivate(A',B',C')] 
2
 * loop 16:minusactivate(A,B,C) -> [minusactivate(A',B',C')] 
1
#### Cost of phase [14,15,16]:minusactivate(A,B,C) -> [] 
1*it(14)+3*it(15)+3*it([17])+0
#### Cost of chains of minusactivate(A,B,C):
* Chain [multiple([14,15,16],[[],[18],[17]])]...: 1*it(14)+3*it(15)+3*it([17])+0
  with precondition: [A>=1] 

* Chain [18]: 2
  with precondition: [A=C,A>=0] 

* Chain [17]: 1
  with precondition: [A+B+1=C,A>=0,B>=0] 


#### Cost of loops [21,22,23,24] 

 * loop 21:geq(V1,V,Out) -> [geq(V1',V',Out')] 
3
 * loop 22:geq(V1,V,Out) -> [geq(V1',V',Out')] 
4
 * loop 23:geq(V1,V,Out) -> [geq(V1',V',Out')] 
4
 * loop 24:geq(V1,V,Out) -> [geq(V1',V',Out')] 
5
#### Cost of phase [21,22,23,24]:geq(V1,V,Out) -> [geq(V1',V',Out')] 
16*it(21)+0
#### Cost of phase [21,22,23,24]:geq(V1,V,Out) -> [geq(V1',V',Out')] 
16*it(21)+0
#### Cost of phase [21,22,23,24]:geq(V1,V,Out) -> [geq(V1',V',Out')] 
16*it(21)+0
#### Cost of phase [21,22,23,24]:geq(V1,V,Out) -> [geq(V1',V',Out')] 
16*it(21)+0
#### Cost of phase [21,22,23,24]:geq(V1,V,Out) -> [geq(V1',V',Out')] 
16*it(21)+0
#### Cost of phase [21,22,23,24]:geq(V1,V,Out) -> [geq(V1',V',Out')] 
16*it(21)+0
#### Cost of chains of geq(V1,V,Out):
* Chain [[21,22,23,24]]...: 16*it(21)+0
  with precondition: [V1>=1,V>=1] 

* Chain [[21,22,23,24],27]: 16*it(21)+1
  with precondition: [Out=1,V1>=1,V>=1] 

* Chain [[21,22,23,24],26]: 16*it(21)+1
  with precondition: [Out=2,V1>=1,V>=1] 

* Chain [[21,22,23,24],25]: 16*it(21)+0
  with precondition: [Out=0,V1>=1,V>=1] 

* Chain [[21,22,23,24],20]...: 17*aux(11)+0
  with precondition: [V1>=1,V>=1] 

* Chain [[21,22,23,24],19]...: 23*it(21)+1
  with precondition: [V1>=1,V>=1] 

* Chain [27]: 1
  with precondition: [V1=0,Out=1,V>=1] 

* Chain [26]: 1
  with precondition: [V=0,Out=2,V1>=0] 

* Chain [25]: 0
  with precondition: [Out=0,V1>=0,V>=0] 

* Chain [20]...: 1*aux(11)+0
  with precondition: [V1>=1,V>=2] 

* Chain [19]...: 7*s(7)+1
  with precondition: [V1>=2,V>=1] 


#### Cost of chains of if(V1,V,V2,Out):
* Chain [34]: 3
  with precondition: [V1=1,V2=Out,V>=0,V2>=0] 

* Chain [33]: 2
  with precondition: [V1=1,V>=0,V2>=0,Out>=V2+1] 

* Chain [32]: 3
  with precondition: [V1=2,V=Out,V>=0,V2>=0] 

* Chain [31]: 2
  with precondition: [V1=2,V>=0,V2>=0,Out>=V+1] 

* Chain [30]: 0
  with precondition: [Out=0,V1>=0,V>=0,V2>=0] 

* Chain [29]...: 7*s(14)+1
  with precondition: [V1=1,V>=0,V2>=1] 

* Chain [28]...: 7*s(17)+1
  with precondition: [V1=2,V>=1,V2>=0] 


#### Cost of chains of start(V1,V,V2):
* Chain [37]...: 1*aux(14)+0
  with precondition: [V1>=1] 

* Chain [36]...: 7*s(27)+1
  with precondition: [V1=2,V>=1,V2>=0] 

* Chain [35]: 1*aux(15)+0
  with precondition: [] 


Closed-form bounds of start(V1,V,V2): 
-------------------------------------
* Chain [37]... with precondition: [V1>=1] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [36]... with precondition: [V1=2,V>=1,V2>=0] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [35] with precondition: [] 
    - Upper bound: inf 
    - Complexity: infinity 

### Maximum cost of start(V1,V,V2): inf 
Asymptotic class: infinity 

Time statistics: 
-------------------------------------
* Partial evaluation computed in 16 ms.
* Invariants computed in 36 ms.
   - Backward Invariants 19 ms.
   - Transitive Invariants 6 ms.
* Refinement performed in 78 ms.
* Termination proved in 10 ms.
* Upper bounds computed in 66 ms.
   - Equation cost structures 22 ms.
   - Phase cost structures 36 ms.
   - Chain cost structures 9 ms.
   - Solving cost expressions 0 ms.
* Total analysis performed in 235 ms.


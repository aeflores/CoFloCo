
Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. recursive  : [and/3]
1. recursive  : [fun/3]
2. recursive  : [fun1/4]
3. recursive  : [fun2/2]
4. recursive  : [fun3/3]
5. recursive  : [fun4/2]
6. recursive  : [fun5/3]
7. recursive  : [fun6/4]
8. recursive  : [isNat/2]
9. recursive  : [isNatKind/2]
10. recursive  : [plus/3]
11. non_recursive  : [proper/2]
12. recursive  : [s/2]
13. recursive  : [top/2]
14. non_recursive  : [start/3]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into and/3
1. SCC is partially evaluated into fun/3
2. SCC is partially evaluated into fun1/4
3. SCC is partially evaluated into fun2/2
4. SCC is partially evaluated into fun3/3
5. SCC is partially evaluated into fun4/2
6. SCC is partially evaluated into fun5/3
7. SCC is partially evaluated into fun6/4
8. SCC is partially evaluated into isNat/2
9. SCC is partially evaluated into isNatKind/2
10. SCC is partially evaluated into plus/3
11. SCC is partially evaluated into proper/2
12. SCC is partially evaluated into s/2
13. SCC is partially evaluated into top/2
14. SCC is partially evaluated into start/3

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations and/3 
* CE 23 is refined into CE [54] 
* CE 22 is refined into CE [55] 
* CE 21 is refined into CE [56] 


#### Refined cost equations and/3 
* CE 54: and(V,V1,Out) = 0
     [V1>=0,V>=0,Out=0] 
* CE 55: and(V,V1,Out) = 1+ and(W1,V1,X1)
     [W1>=0,V1>=0,X1+1=Out,W1+1=V] 
* CE 56: and(V,V1,Out) = 1+ and(W1,X1,Y1)
     [X1>=0,W1>=0,Y1+1=Out,X1+1=V1,W1+1=V] 

### Cost equations --> "Loop" of and/3 
* CEs [55] --> Loop 39 
* CEs [56] --> Loop 40 
* CEs [54] --> Loop 41 

#### Loops of and/3 
* Loop 39: and(V,V1,Out)->  and(V',V1,Out')
                  [V1>=0,V>=1,Out=Out'+1,V=V'+1] 
* Loop 40: and(V,V1,Out)->  and(V',V1',Out')
                  [V1>=1,V>=1,Out=Out'+1,V1=V1'+1,V=V'+1] 
* Loop 41: and(V,V1,Out) [V1>=0,V>=0,Out=0] 

### Ranking functions of CR and(V,V1,Out) 
* RF of phase [39,40]: [V]

#### Partial ranking functions of CR and(V,V1,Out) 
* Partial RF of phase [39,40]:
  - RF of loop [39:1,40:1]:
    V
  - RF of loop [40:1]:
    V1


### Resulting Chains:and(V,V1,Out) 
* [[39,40],41]
* [41]


### Merging Chains  and/3 into  External patterns of execution 
* [[41]] --> 1 
* [[41,[39,40]]] --> 2 


### Specialization of cost equations fun/3 
* CE 30 is refined into CE [57] 
* CE 28 is refined into CE [58] 
* CE 29 is refined into CE [59] 


#### Refined cost equations fun/3 
* CE 57: fun(V,V1,Out) = 0
     [V1>=0,V>=0,Out=0] 
* CE 58: fun(V,V1,Out) = 1+ fun(W1,V1,X1)
     [W1>=0,V1>=0,X1+1=Out,W1+1=V] 
* CE 59: fun(V,V1,Out) = 1+ fun(W1,X1,Y1)
     [X1>=0,W1>=0,Y1+1=Out,X1+1=V1,W1+1=V] 

### Cost equations --> "Loop" of fun/3 
* CEs [58] --> Loop 42 
* CEs [59] --> Loop 43 
* CEs [57] --> Loop 44 

#### Loops of fun/3 
* Loop 42: fun(V,V1,Out)->  fun(V',V1,Out')
                  [V1>=0,V>=1,Out=Out'+1,V=V'+1] 
* Loop 43: fun(V,V1,Out)->  fun(V',V1',Out')
                  [V1>=1,V>=1,Out=Out'+1,V1=V1'+1,V=V'+1] 
* Loop 44: fun(V,V1,Out) [V1>=0,V>=0,Out=0] 

### Ranking functions of CR fun(V,V1,Out) 
* RF of phase [42,43]: [V]

#### Partial ranking functions of CR fun(V,V1,Out) 
* Partial RF of phase [42,43]:
  - RF of loop [42:1,43:1]:
    V
  - RF of loop [43:1]:
    V1


### Resulting Chains:fun(V,V1,Out) 
* [[42,43],44]
* [44]


### Merging Chains  fun/3 into  External patterns of execution 
* [[44]] --> 1 
* [[44,[42,43]]] --> 2 


### Specialization of cost equations fun1/4 
* CE 38 is refined into CE [60] 
* CE 36 is refined into CE [61] 
* CE 37 is refined into CE [62] 


#### Refined cost equations fun1/4 
* CE 60: fun1(V,V1,V2,Out) = 0
     [V2>=0,V1>=0,V>=0,Out=0] 
* CE 61: fun1(V,V1,V2,Out) = 1+ fun1(W2,V1,V2,X2)
     [W2>=0,V2>=0,V1>=0,X2+1=Out,W2+1=V] 
* CE 62: fun1(V,V1,V2,Out) = 1+ fun1(W2,X2,Y2,Z2)
     [Y2>=0,X2>=0,W2>=0,Z2+1=Out,Y2+1=V2,X2+1=V1,W2+1=V] 

### Cost equations --> "Loop" of fun1/4 
* CEs [61] --> Loop 45 
* CEs [62] --> Loop 46 
* CEs [60] --> Loop 47 

#### Loops of fun1/4 
* Loop 45: fun1(V,V1,V2,Out)->  fun1(V',V1,V2,Out')
                  [V2>=0,V1>=0,V>=1,Out=Out'+1,V=V'+1] 
* Loop 46: fun1(V,V1,V2,Out)->  fun1(V',V1',V2',Out')
                  [V2>=1,V1>=1,V>=1,Out=Out'+1,V2=V2'+1,V1=V1'+1,V=V'+1] 
* Loop 47: fun1(V,V1,V2,Out) [V2>=0,V1>=0,V>=0,Out=0] 

### Ranking functions of CR fun1(V,V1,V2,Out) 
* RF of phase [45,46]: [V]

#### Partial ranking functions of CR fun1(V,V1,V2,Out) 
* Partial RF of phase [45,46]:
  - RF of loop [45:1,46:1]:
    V
  - RF of loop [46:1]:
    V1
    V2


### Resulting Chains:fun1(V,V1,V2,Out) 
* [[45,46],47]
* [47]


### Merging Chains  fun1/4 into  External patterns of execution 
* [[47]] --> 1 
* [[47,[45,46]]] --> 2 


### Specialization of cost equations fun2/2 
* CE 40 is refined into CE [63] 
* CE 39 is refined into CE [64] 


#### Refined cost equations fun2/2 
* CE 63: fun2(V,Out) = 0
     [V>=0,Out=0] 
* CE 64: fun2(V,Out) = 1+ fun2(W,X)
     [W>=0,X+1=Out,W+1=V] 

### Cost equations --> "Loop" of fun2/2 
* CEs [64] --> Loop 48 
* CEs [63] --> Loop 49 

#### Loops of fun2/2 
* Loop 48: fun2(V,Out)->  fun2(V',Out')
                  [V'>=0,Out=Out'+1,V'+1=V] 
* Loop 49: fun2(V,Out) [V>=0,Out=0] 

### Ranking functions of CR fun2(V,Out) 
* RF of phase [48]: [V]

#### Partial ranking functions of CR fun2(V,Out) 
* Partial RF of phase [48]:
  - RF of loop [48:1]:
    V


### Resulting Chains:fun2(V,Out) 
* [[48],49]
* [49]


### Merging Chains  fun2/2 into  External patterns of execution 
* [[49]] --> 1 
* [[49,[48]]] --> 2 


### Specialization of cost equations fun3/3 
* CE 43 is refined into CE [65] 
* CE 42 is refined into CE [66] 
* CE 41 is refined into CE [67] 


#### Refined cost equations fun3/3 
* CE 65: fun3(V,V1,Out) = 0
     [V1>=0,V>=0,Out=0] 
* CE 66: fun3(V,V1,Out) = 1+ fun3(W1,V1,X1)
     [W1>=0,V1>=0,X1+1=Out,W1+1=V] 
* CE 67: fun3(V,V1,Out) = 1+ fun3(W1,X1,Y1)
     [X1>=0,W1>=0,Y1+1=Out,X1+1=V1,W1+1=V] 

### Cost equations --> "Loop" of fun3/3 
* CEs [66] --> Loop 50 
* CEs [67] --> Loop 51 
* CEs [65] --> Loop 52 

#### Loops of fun3/3 
* Loop 50: fun3(V,V1,Out)->  fun3(V',V1,Out')
                  [V1>=0,V>=1,Out=Out'+1,V=V'+1] 
* Loop 51: fun3(V,V1,Out)->  fun3(V',V1',Out')
                  [V1>=1,V>=1,Out=Out'+1,V1=V1'+1,V=V'+1] 
* Loop 52: fun3(V,V1,Out) [V1>=0,V>=0,Out=0] 

### Ranking functions of CR fun3(V,V1,Out) 
* RF of phase [50,51]: [V]

#### Partial ranking functions of CR fun3(V,V1,Out) 
* Partial RF of phase [50,51]:
  - RF of loop [50:1,51:1]:
    V
  - RF of loop [51:1]:
    V1


### Resulting Chains:fun3(V,V1,Out) 
* [[50,51],52]
* [52]


### Merging Chains  fun3/3 into  External patterns of execution 
* [[52]] --> 1 
* [[52,[50,51]]] --> 2 


### Specialization of cost equations fun4/2 
* CE 45 is refined into CE [68] 
* CE 44 is refined into CE [69] 


#### Refined cost equations fun4/2 
* CE 68: fun4(V,Out) = 0
     [V>=0,Out=0] 
* CE 69: fun4(V,Out) = 1+ fun4(W,X)
     [W>=0,X+1=Out,W+1=V] 

### Cost equations --> "Loop" of fun4/2 
* CEs [69] --> Loop 53 
* CEs [68] --> Loop 54 

#### Loops of fun4/2 
* Loop 53: fun4(V,Out)->  fun4(V',Out')
                  [V'>=0,Out=Out'+1,V'+1=V] 
* Loop 54: fun4(V,Out) [V>=0,Out=0] 

### Ranking functions of CR fun4(V,Out) 
* RF of phase [53]: [V]

#### Partial ranking functions of CR fun4(V,Out) 
* Partial RF of phase [53]:
  - RF of loop [53:1]:
    V


### Resulting Chains:fun4(V,Out) 
* [[53],54]
* [54]


### Merging Chains  fun4/2 into  External patterns of execution 
* [[54]] --> 1 
* [[54,[53]]] --> 2 


### Specialization of cost equations fun5/3 
* CE 48 is refined into CE [70] 
* CE 47 is refined into CE [71] 
* CE 46 is refined into CE [72] 


#### Refined cost equations fun5/3 
* CE 70: fun5(V,V1,Out) = 0
     [V1>=0,V>=0,Out=0] 
* CE 71: fun5(V,V1,Out) = 1+ fun5(W1,V1,X1)
     [W1>=0,V1>=0,X1+1=Out,W1+1=V] 
* CE 72: fun5(V,V1,Out) = 1+ fun5(W1,X1,Y1)
     [X1>=0,W1>=0,Y1+1=Out,X1+1=V1,W1+1=V] 

### Cost equations --> "Loop" of fun5/3 
* CEs [71] --> Loop 55 
* CEs [72] --> Loop 56 
* CEs [70] --> Loop 57 

#### Loops of fun5/3 
* Loop 55: fun5(V,V1,Out)->  fun5(V',V1,Out')
                  [V1>=0,V>=1,Out=Out'+1,V=V'+1] 
* Loop 56: fun5(V,V1,Out)->  fun5(V',V1',Out')
                  [V1>=1,V>=1,Out=Out'+1,V1=V1'+1,V=V'+1] 
* Loop 57: fun5(V,V1,Out) [V1>=0,V>=0,Out=0] 

### Ranking functions of CR fun5(V,V1,Out) 
* RF of phase [55,56]: [V]

#### Partial ranking functions of CR fun5(V,V1,Out) 
* Partial RF of phase [55,56]:
  - RF of loop [55:1,56:1]:
    V
  - RF of loop [56:1]:
    V1


### Resulting Chains:fun5(V,V1,Out) 
* [[55,56],57]
* [57]


### Merging Chains  fun5/3 into  External patterns of execution 
* [[57]] --> 1 
* [[57,[55,56]]] --> 2 


### Specialization of cost equations fun6/4 
* CE 53 is refined into CE [73] 
* CE 51 is refined into CE [74] 
* CE 52 is refined into CE [75] 


#### Refined cost equations fun6/4 
* CE 73: fun6(V,V1,V2,Out) = 0
     [V2>=0,V1>=0,V>=0,Out=0] 
* CE 74: fun6(V,V1,V2,Out) = 1+ fun6(W2,V1,V2,X2)
     [W2>=0,V2>=0,V1>=0,X2+1=Out,W2+1=V] 
* CE 75: fun6(V,V1,V2,Out) = 1+ fun6(W2,X2,Y2,Z2)
     [Y2>=0,X2>=0,W2>=0,Z2+1=Out,Y2+1=V2,X2+1=V1,W2+1=V] 

### Cost equations --> "Loop" of fun6/4 
* CEs [74] --> Loop 58 
* CEs [75] --> Loop 59 
* CEs [73] --> Loop 60 

#### Loops of fun6/4 
* Loop 58: fun6(V,V1,V2,Out)->  fun6(V',V1,V2,Out')
                  [V2>=0,V1>=0,V>=1,Out=Out'+1,V=V'+1] 
* Loop 59: fun6(V,V1,V2,Out)->  fun6(V',V1',V2',Out')
                  [V2>=1,V1>=1,V>=1,Out=Out'+1,V2=V2'+1,V1=V1'+1,V=V'+1] 
* Loop 60: fun6(V,V1,V2,Out) [V2>=0,V1>=0,V>=0,Out=0] 

### Ranking functions of CR fun6(V,V1,V2,Out) 
* RF of phase [58,59]: [V]

#### Partial ranking functions of CR fun6(V,V1,V2,Out) 
* Partial RF of phase [58,59]:
  - RF of loop [58:1,59:1]:
    V
  - RF of loop [59:1]:
    V1
    V2


### Resulting Chains:fun6(V,V1,V2,Out) 
* [[58,59],60]
* [60]


### Merging Chains  fun6/4 into  External patterns of execution 
* [[60]] --> 1 
* [[60,[58,59]]] --> 2 


### Specialization of cost equations isNat/2 
* CE 20 is refined into CE [76] 
* CE 19 is refined into CE [77] 


#### Refined cost equations isNat/2 
* CE 76: isNat(V,Out) = 0
     [V>=0,Out=0] 
* CE 77: isNat(V,Out) = 1+ isNat(W,X)
     [W>=0,X+1=Out,W+1=V] 

### Cost equations --> "Loop" of isNat/2 
* CEs [77] --> Loop 61 
* CEs [76] --> Loop 62 

#### Loops of isNat/2 
* Loop 61: isNat(V,Out)->  isNat(V',Out')
                  [V'>=0,Out=Out'+1,V'+1=V] 
* Loop 62: isNat(V,Out) [V>=0,Out=0] 

### Ranking functions of CR isNat(V,Out) 
* RF of phase [61]: [V]

#### Partial ranking functions of CR isNat(V,Out) 
* Partial RF of phase [61]:
  - RF of loop [61:1]:
    V


### Resulting Chains:isNat(V,Out) 
* [[61],62]
* [62]


### Merging Chains  isNat/2 into  External patterns of execution 
* [[62]] --> 1 
* [[62,[61]]] --> 2 


### Specialization of cost equations isNatKind/2 
* CE 35 is refined into CE [78] 
* CE 34 is refined into CE [79] 


#### Refined cost equations isNatKind/2 
* CE 78: isNatKind(V,Out) = 0
     [V>=0,Out=0] 
* CE 79: isNatKind(V,Out) = 1+ isNatKind(W,X)
     [W>=0,X+1=Out,W+1=V] 

### Cost equations --> "Loop" of isNatKind/2 
* CEs [79] --> Loop 63 
* CEs [78] --> Loop 64 

#### Loops of isNatKind/2 
* Loop 63: isNatKind(V,Out)->  isNatKind(V',Out')
                  [V'>=0,Out=Out'+1,V'+1=V] 
* Loop 64: isNatKind(V,Out) [V>=0,Out=0] 

### Ranking functions of CR isNatKind(V,Out) 
* RF of phase [63]: [V]

#### Partial ranking functions of CR isNatKind(V,Out) 
* Partial RF of phase [63]:
  - RF of loop [63:1]:
    V


### Resulting Chains:isNatKind(V,Out) 
* [[63],64]
* [64]


### Merging Chains  isNatKind/2 into  External patterns of execution 
* [[64]] --> 1 
* [[64,[63]]] --> 2 


### Specialization of cost equations plus/3 
* CE 27 is refined into CE [80] 
* CE 25 is refined into CE [81] 
* CE 26 is refined into CE [82] 
* CE 24 is refined into CE [83] 


#### Refined cost equations plus/3 
* CE 80: plus(V,V1,Out) = 0
     [V1>=0,V>=0,Out=0] 
* CE 81: plus(V,V1,Out) = 1+ plus(V,W1,X1)
     [W1>=0,V>=0,X1+1=Out,W1+1=V1] 
* CE 82: plus(V,V1,Out) = 1+ plus(W1,V1,X1)
     [W1>=0,V1>=0,X1+1=Out,W1+1=V] 
* CE 83: plus(V,V1,Out) = 1+ plus(W1,X1,Y1)
     [X1>=0,W1>=0,Y1+1=Out,X1+1=V1,W1+1=V] 

### Cost equations --> "Loop" of plus/3 
* CEs [81] --> Loop 65 
* CEs [82] --> Loop 66 
* CEs [83] --> Loop 67 
* CEs [80] --> Loop 68 

#### Loops of plus/3 
* Loop 65: plus(V,V1,Out)->  plus(V,V1',Out')
                  [V1>=1,V>=0,Out=Out'+1,V1=V1'+1] 
* Loop 66: plus(V,V1,Out)->  plus(V',V1,Out')
                  [V1>=0,V>=1,Out=Out'+1,V=V'+1] 
* Loop 67: plus(V,V1,Out)->  plus(V',V1',Out')
                  [V1>=1,V>=1,Out=Out'+1,V1=V1'+1,V=V'+1] 
* Loop 68: plus(V,V1,Out) [V1>=0,V>=0,Out=0] 

### Ranking functions of CR plus(V,V1,Out) 
* RF of phase [65,66,67]: [V+V1]

#### Partial ranking functions of CR plus(V,V1,Out) 
* Partial RF of phase [65,66,67]:
  - RF of loop [65:1,67:1]:
    V1
  - RF of loop [66:1,67:1]:
    V


### Resulting Chains:plus(V,V1,Out) 
* [[65,66,67],68]
* [68]


### Merging Chains  plus/3 into  External patterns of execution 
* [[68]] --> 1 
* [[68,[65,66,67]]] --> 2 


### Specialization of cost equations proper/2 
* CE 33 is refined into CE [84] 
* CE 31 is refined into CE [85] 
* CE 32 is refined into CE [86] 


#### Refined cost equations proper/2 
* CE 84: proper(V,Out) = 0
     [V>=0,Out=0] 
* CE 85: proper(V,Out) = 1
     [Out=2,V=1] 
* CE 86: proper(V,Out) = 1
     [Out=1,V=0] 

### Cost equations --> "Loop" of proper/2 
* CEs [84] --> Loop 69 
* CEs [85] --> Loop 70 
* CEs [86] --> Loop 71 

#### Loops of proper/2 
* Loop 69: proper(V,Out) [V>=0,Out=0] 
* Loop 70: proper(V,Out) [Out=2,V=1] 
* Loop 71: proper(V,Out) [Out=1,V=0] 

### Ranking functions of CR proper(V,Out) 

#### Partial ranking functions of CR proper(V,Out) 


### Resulting Chains:proper(V,Out) 
* [71]
* [70]
* [69]


### Merging Chains  proper/2 into  External patterns of execution 
* [[71]] --> 1 
* [[70]] --> 2 
* [[69]] --> 3 


### Specialization of cost equations s/2 
* CE 50 is refined into CE [87] 
* CE 49 is refined into CE [88] 


#### Refined cost equations s/2 
* CE 87: s(V,Out) = 0
     [V>=0,Out=0] 
* CE 88: s(V,Out) = 1+ s(W,X)
     [W>=0,X+1=Out,W+1=V] 

### Cost equations --> "Loop" of s/2 
* CEs [88] --> Loop 72 
* CEs [87] --> Loop 73 

#### Loops of s/2 
* Loop 72: s(V,Out)->  s(V',Out')
                  [V'>=0,Out=Out'+1,V'+1=V] 
* Loop 73: s(V,Out) [V>=0,Out=0] 

### Ranking functions of CR s(V,Out) 
* RF of phase [72]: [V]

#### Partial ranking functions of CR s(V,Out) 
* Partial RF of phase [72]:
  - RF of loop [72:1]:
    V


### Resulting Chains:s(V,Out) 
* [[72],73]
* [73]


### Merging Chains  s/2 into  External patterns of execution 
* [[73]] --> 1 
* [[73,[72]]] --> 2 


### Specialization of cost equations top/2 
* CE 18 is refined into CE [89] 
* CE 16 is refined into CE [90] 
* CE 17 is refined into CE [91,92,93] 


#### Refined cost equations top/2 
* CE 89: top(V,Out) = 0
     [V>=0,Out=0] 
* CE 90: top(V,Out) = 1+ top(V,Out)
     [V>=1] 
* CE 91: top(V,Out) = 1+ proper(W,X):1+ top(Y,Out)
     [Y=1,X=1,W=0,V=1] 
* CE 92: top(V,Out) = 1+ proper(W,X):2+ top(Y,Out)
     [Y=2,X=2,W=1,V=2] 
* CE 93: top(V,Out) = 1+ proper(W,X):3+ top(Y,Out)
     [W>=0,W+1=V,Y=0,X=0] 

### Cost equations --> "Loop" of top/2 
* CEs [93] --> Loop 74 
* CEs [92] --> Loop 75 
* CEs [90,91] --> Loop 76 
* CEs [89] --> Loop 77 

#### Loops of top/2 
* Loop 74: top(V,Out)->  top(V',Out)
                  [V>=1,V'=0] 
* Loop 75: top(V,Out)->  top(V',Out)
                  [V'=2,V=2] 
* Loop 76: top(V,Out)->  top(V,Out)
                  [V>=1] 
* Loop 77: top(V,Out) [V>=0,Out=0] 

### Ranking functions of CR top(V,Out) 

#### Partial ranking functions of CR top(V,Out) 


### Resulting Chains:top(V,Out) 
* [[75,76]]...
* [[75,76],77]
* [[75,76],74,77]
* [77]
* [74,77]


### Merging Chains  top/2 into  External patterns of execution 
* [[77,74],[77],[77,74,[75,76]],[77,[75,76]]] --> 1 
* [[[75,76]]] --> 2 


### Specialization of cost equations start/3 
* CE 2 is refined into CE [94,95] 
* CE 3 is refined into CE [96,97] 
* CE 4 is refined into CE [98,99] 
* CE 5 is refined into CE [100,101] 
* CE 6 is refined into CE [102,103] 
* CE 7 is refined into CE [104,105,106] 
* CE 8 is refined into CE [107,108] 
* CE 9 is refined into CE [109,110] 
* CE 10 is refined into CE [111,112] 
* CE 11 is refined into CE [113,114] 
* CE 12 is refined into CE [115,116] 
* CE 13 is refined into CE [117,118] 
* CE 14 is refined into CE [119,120] 
* CE 15 is refined into CE [121,122] 


#### Refined cost equations start/3 
* CE 94: start(V,V1,V2) = 0+ top(V,W2):1
     [V>=0,W2=0] 
* CE 95: start(V,V1,V2) = 0+ top(V,W2):2
     [V>=1] 
* CE 96: start(V,V1,V2) = 0+ isNat(V,W2):1
     [V>=0,W2=0] 
* CE 97: start(V,V1,V2) = 0+ isNat(V,W2):2
     [V>=W2,W2>=1] 
* CE 98: start(V,V1,V2) = 0+ and(V,V1,W2):1
     [V1>=0,V>=0,W2=0] 
* CE 99: start(V,V1,V2) = 0+ and(V,V1,W2):2
     [V>=W2,W2>=1,V1>=0] 
* CE 100: start(V,V1,V2) = 0+ plus(V,V1,W2):1
     [V1>=0,V>=0,W2=0] 
* CE 101: start(V,V1,V2) = 0+ plus(V,V1,W2):2
     [V+V1>=W2,W2>=1,V1>=0,V>=0] 
* CE 102: start(V,V1,V2) = 0+ fun(V,V1,W2):1
     [V1>=0,V>=0,W2=0] 
* CE 103: start(V,V1,V2) = 0+ fun(V,V1,W2):2
     [V>=W2,W2>=1,V1>=0] 
* CE 104: start(V,V1,V2) = 0+ proper(W2,X2):1
     [X2=1,W2=0,V=0] 
* CE 105: start(V,V1,V2) = 0+ proper(W2,X2):2
     [X2=2,W2=1,V=1] 
* CE 106: start(V,V1,V2) = 0+ proper(V,W2):3
     [V>=0,W2=0] 
* CE 107: start(V,V1,V2) = 0+ isNatKind(V,W2):1
     [V>=0,W2=0] 
* CE 108: start(V,V1,V2) = 0+ isNatKind(V,W2):2
     [V>=W2,W2>=1] 
* CE 109: start(V,V1,V2) = 0+ fun1(V,V1,V2,W2):1
     [V2>=0,V1>=0,V>=0,W2=0] 
* CE 110: start(V,V1,V2) = 0+ fun1(V,V1,V2,W2):2
     [V>=W2,W2>=1,V2>=0,V1>=0] 
* CE 111: start(V,V1,V2) = 0+ fun2(V,W2):1
     [V>=0,W2=0] 
* CE 112: start(V,V1,V2) = 0+ fun2(V,W2):2
     [V>=W2,W2>=1] 
* CE 113: start(V,V1,V2) = 0+ fun3(V,V1,W2):1
     [V1>=0,V>=0,W2=0] 
* CE 114: start(V,V1,V2) = 0+ fun3(V,V1,W2):2
     [V>=W2,W2>=1,V1>=0] 
* CE 115: start(V,V1,V2) = 0+ fun4(V,W2):1
     [V>=0,W2=0] 
* CE 116: start(V,V1,V2) = 0+ fun4(V,W2):2
     [V>=W2,W2>=1] 
* CE 117: start(V,V1,V2) = 0+ fun5(V,V1,W2):1
     [V1>=0,V>=0,W2=0] 
* CE 118: start(V,V1,V2) = 0+ fun5(V,V1,W2):2
     [V>=W2,W2>=1,V1>=0] 
* CE 119: start(V,V1,V2) = 0+ s(V,W2):1
     [V>=0,W2=0] 
* CE 120: start(V,V1,V2) = 0+ s(V,W2):2
     [V>=W2,W2>=1] 
* CE 121: start(V,V1,V2) = 0+ fun6(V,V1,V2,W2):1
     [V2>=0,V1>=0,V>=0,W2=0] 
* CE 122: start(V,V1,V2) = 0+ fun6(V,V1,V2,W2):2
     [V>=W2,W2>=1,V2>=0,V1>=0] 

### Cost equations --> "Loop" of start/3 
* CEs [105] --> Loop 78 
* CEs [94,96,97,98,99,100,101,102,103,104,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122] --> Loop 79 
* CEs [95] --> Loop 80 

#### Loops of start/3 
* Loop 78: start(V,V1,V2) [V=1] 
* Loop 79: start(V,V1,V2) [V>=0] 
* Loop 80: start(V,V1,V2) [V>=1] 

### Ranking functions of CR start(V,V1,V2) 

#### Partial ranking functions of CR start(V,V1,V2) 


### Resulting Chains:start(V,V1,V2) 
* [80]...
* [79]
* [78]


### Merging Chains  start/3 into  External patterns of execution 
* [[78],[79]] --> 1 
* [[80]] --> 2 


Computing Bounds
=====================================

#### Cost of loops [39,40] 

 * loop 39:and(V,V1,Out) -> [and(V',V1',Out')] 
1
 * loop 40:and(V,V1,Out) -> [and(V',V1',Out')] 
1
#### Cost of phase [39,40]:and(V,V1,Out) -> [and(V',V1',Out')] 
1*it(39)+1*it(40)+0
  Such that:it(40) =< V1
it(40) =< V1-V1'
aux(1) =< V
aux(2) =< V-V'
it(39) =< aux(1)
it(40) =< aux(1)
it(39) =< aux(2)
it(40) =< aux(2)

#### Cost of chains of and(V,V1,Out):
* Chain [[39,40],41]: 1*it(39)+1*it(40)+0
  Such that:aux(1) =< V
it(40) =< V1
aux(2) =< Out
it(39) =< aux(1)
it(40) =< aux(1)
it(39) =< aux(2)
it(40) =< aux(2)

  with precondition: [V1>=0,Out>=1,V>=Out] 

* Chain [41]: 0
  with precondition: [Out=0,V>=0,V1>=0] 


#### Cost of loops [42,43] 

 * loop 42:fun(V,V1,Out) -> [fun(V',V1',Out')] 
1
 * loop 43:fun(V,V1,Out) -> [fun(V',V1',Out')] 
1
#### Cost of phase [42,43]:fun(V,V1,Out) -> [fun(V',V1',Out')] 
1*it(42)+1*it(43)+0
  Such that:it(43) =< V1
it(43) =< V1-V1'
aux(3) =< V
aux(4) =< V-V'
it(42) =< aux(3)
it(43) =< aux(3)
it(42) =< aux(4)
it(43) =< aux(4)

#### Cost of chains of fun(V,V1,Out):
* Chain [[42,43],44]: 1*it(42)+1*it(43)+0
  Such that:aux(3) =< V
it(43) =< V1
aux(4) =< Out
it(42) =< aux(3)
it(43) =< aux(3)
it(42) =< aux(4)
it(43) =< aux(4)

  with precondition: [V1>=0,Out>=1,V>=Out] 

* Chain [44]: 0
  with precondition: [Out=0,V>=0,V1>=0] 


#### Cost of loops [45,46] 

 * loop 45:fun1(V,V1,V2,Out) -> [fun1(V',V1',V2',Out')] 
1
 * loop 46:fun1(V,V1,V2,Out) -> [fun1(V',V1',V2',Out')] 
1
#### Cost of phase [45,46]:fun1(V,V1,V2,Out) -> [fun1(V',V1',V2',Out')] 
1*it(45)+1*it(46)+0
  Such that:it(46) =< V1
it(46) =< V1-V1'
it(46) =< V2
it(46) =< V2-V2'
aux(5) =< V
aux(6) =< V-V'
it(45) =< aux(5)
it(46) =< aux(5)
it(45) =< aux(6)
it(46) =< aux(6)

#### Cost of chains of fun1(V,V1,V2,Out):
* Chain [[45,46],47]: 1*it(45)+1*it(46)+0
  Such that:aux(5) =< V
it(46) =< V1
aux(6) =< Out
it(45) =< aux(5)
it(46) =< aux(5)
it(45) =< aux(6)
it(46) =< aux(6)

  with precondition: [V1>=0,V2>=0,Out>=1,V>=Out] 

* Chain [47]: 0
  with precondition: [Out=0,V>=0,V1>=0,V2>=0] 


#### Cost of loops [48] 

 * loop 48:fun2(V,Out) -> [fun2(V',Out')] 
1
#### Cost of phase [48]:fun2(V,Out) -> [fun2(V',Out')] 
1*it(48)+0
  Such that:it(48) =< V
it(48) =< V-V'

#### Cost of chains of fun2(V,Out):
* Chain [[48],49]: 1*it(48)+0
  Such that:it(48) =< Out

  with precondition: [Out>=1,V>=Out] 

* Chain [49]: 0
  with precondition: [Out=0,V>=0] 


#### Cost of loops [50,51] 

 * loop 50:fun3(V,V1,Out) -> [fun3(V',V1',Out')] 
1
 * loop 51:fun3(V,V1,Out) -> [fun3(V',V1',Out')] 
1
#### Cost of phase [50,51]:fun3(V,V1,Out) -> [fun3(V',V1',Out')] 
1*it(50)+1*it(51)+0
  Such that:it(51) =< V1
it(51) =< V1-V1'
aux(7) =< V
aux(8) =< V-V'
it(50) =< aux(7)
it(51) =< aux(7)
it(50) =< aux(8)
it(51) =< aux(8)

#### Cost of chains of fun3(V,V1,Out):
* Chain [[50,51],52]: 1*it(50)+1*it(51)+0
  Such that:aux(7) =< V
it(51) =< V1
aux(8) =< Out
it(50) =< aux(7)
it(51) =< aux(7)
it(50) =< aux(8)
it(51) =< aux(8)

  with precondition: [V1>=0,Out>=1,V>=Out] 

* Chain [52]: 0
  with precondition: [Out=0,V>=0,V1>=0] 


#### Cost of loops [53] 

 * loop 53:fun4(V,Out) -> [fun4(V',Out')] 
1
#### Cost of phase [53]:fun4(V,Out) -> [fun4(V',Out')] 
1*it(53)+0
  Such that:it(53) =< V
it(53) =< V-V'

#### Cost of chains of fun4(V,Out):
* Chain [[53],54]: 1*it(53)+0
  Such that:it(53) =< Out

  with precondition: [Out>=1,V>=Out] 

* Chain [54]: 0
  with precondition: [Out=0,V>=0] 


#### Cost of loops [55,56] 

 * loop 55:fun5(V,V1,Out) -> [fun5(V',V1',Out')] 
1
 * loop 56:fun5(V,V1,Out) -> [fun5(V',V1',Out')] 
1
#### Cost of phase [55,56]:fun5(V,V1,Out) -> [fun5(V',V1',Out')] 
1*it(55)+1*it(56)+0
  Such that:it(56) =< V1
it(56) =< V1-V1'
aux(9) =< V
aux(10) =< V-V'
it(55) =< aux(9)
it(56) =< aux(9)
it(55) =< aux(10)
it(56) =< aux(10)

#### Cost of chains of fun5(V,V1,Out):
* Chain [[55,56],57]: 1*it(55)+1*it(56)+0
  Such that:aux(9) =< V
it(56) =< V1
aux(10) =< Out
it(55) =< aux(9)
it(56) =< aux(9)
it(55) =< aux(10)
it(56) =< aux(10)

  with precondition: [V1>=0,Out>=1,V>=Out] 

* Chain [57]: 0
  with precondition: [Out=0,V>=0,V1>=0] 


#### Cost of loops [58,59] 

 * loop 58:fun6(V,V1,V2,Out) -> [fun6(V',V1',V2',Out')] 
1
 * loop 59:fun6(V,V1,V2,Out) -> [fun6(V',V1',V2',Out')] 
1
#### Cost of phase [58,59]:fun6(V,V1,V2,Out) -> [fun6(V',V1',V2',Out')] 
1*it(58)+1*it(59)+0
  Such that:it(59) =< V1
it(59) =< V1-V1'
it(59) =< V2
it(59) =< V2-V2'
aux(11) =< V
aux(12) =< V-V'
it(58) =< aux(11)
it(59) =< aux(11)
it(58) =< aux(12)
it(59) =< aux(12)

#### Cost of chains of fun6(V,V1,V2,Out):
* Chain [[58,59],60]: 1*it(58)+1*it(59)+0
  Such that:aux(11) =< V
it(59) =< V1
aux(12) =< Out
it(58) =< aux(11)
it(59) =< aux(11)
it(58) =< aux(12)
it(59) =< aux(12)

  with precondition: [V1>=0,V2>=0,Out>=1,V>=Out] 

* Chain [60]: 0
  with precondition: [Out=0,V>=0,V1>=0,V2>=0] 


#### Cost of loops [61] 

 * loop 61:isNat(V,Out) -> [isNat(V',Out')] 
1
#### Cost of phase [61]:isNat(V,Out) -> [isNat(V',Out')] 
1*it(61)+0
  Such that:it(61) =< V
it(61) =< V-V'

#### Cost of chains of isNat(V,Out):
* Chain [[61],62]: 1*it(61)+0
  Such that:it(61) =< Out

  with precondition: [Out>=1,V>=Out] 

* Chain [62]: 0
  with precondition: [Out=0,V>=0] 


#### Cost of loops [63] 

 * loop 63:isNatKind(V,Out) -> [isNatKind(V',Out')] 
1
#### Cost of phase [63]:isNatKind(V,Out) -> [isNatKind(V',Out')] 
1*it(63)+0
  Such that:it(63) =< V
it(63) =< V-V'

#### Cost of chains of isNatKind(V,Out):
* Chain [[63],64]: 1*it(63)+0
  Such that:it(63) =< Out

  with precondition: [Out>=1,V>=Out] 

* Chain [64]: 0
  with precondition: [Out=0,V>=0] 


#### Cost of loops [65,66,67] 

 * loop 65:plus(V,V1,Out) -> [plus(V',V1',Out')] 
1
 * loop 66:plus(V,V1,Out) -> [plus(V',V1',Out')] 
1
 * loop 67:plus(V,V1,Out) -> [plus(V',V1',Out')] 
1
#### Cost of phase [65,66,67]:plus(V,V1,Out) -> [plus(V',V1',Out')] 
1*it(65)+1*it(66)+1*it(67)+0
  Such that:aux(13) =< V
aux(14) =< V+V1
aux(15) =< V+V1-V'-V1'
aux(16) =< V-V'
aux(17) =< V1
aux(18) =< V1-V1'
it(66) =< aux(13)
it(67) =< aux(13)
it(65) =< aux(14)
it(66) =< aux(14)
it(67) =< aux(14)
it(65) =< aux(15)
it(66) =< aux(15)
it(67) =< aux(15)
it(66) =< aux(16)
it(67) =< aux(16)
it(65) =< aux(17)
it(67) =< aux(17)
it(65) =< aux(18)
it(67) =< aux(18)

#### Cost of chains of plus(V,V1,Out):
* Chain [[65,66,67],68]: 1*it(65)+1*it(66)+1*it(67)+0
  Such that:aux(19) =< V
aux(20) =< V+V1
aux(21) =< V1
it(66) =< aux(19)
it(67) =< aux(19)
it(65) =< aux(20)
it(66) =< aux(20)
it(67) =< aux(20)
it(65) =< aux(21)
it(67) =< aux(21)

  with precondition: [V>=0,V1>=0,Out>=1,V+V1>=Out] 

* Chain [68]: 0
  with precondition: [Out=0,V>=0,V1>=0] 


#### Cost of chains of proper(V,Out):
* Chain [71]: 1
  with precondition: [V=0,Out=1] 

* Chain [70]: 1
  with precondition: [V=1,Out=2] 

* Chain [69]: 0
  with precondition: [Out=0,V>=0] 


#### Cost of loops [72] 

 * loop 72:s(V,Out) -> [s(V',Out')] 
1
#### Cost of phase [72]:s(V,Out) -> [s(V',Out')] 
1*it(72)+0
  Such that:it(72) =< V
it(72) =< V-V'

#### Cost of chains of s(V,Out):
* Chain [[72],73]: 1*it(72)+0
  Such that:it(72) =< Out

  with precondition: [Out>=1,V>=Out] 

* Chain [73]: 0
  with precondition: [Out=0,V>=0] 


#### Cost of loops [75,76] 

 * loop 75:top(V,Out) -> [top(V',Out')] 
2
 * loop 76:top(V,Out) -> [top(V',Out')] 
2
#### Cost of phase [75,76]:top(V,Out) -> [top(V',Out')] 
4*it(75)+0
#### Cost of phase [75,76]:top(V,Out) -> [top(V',Out')] 
4*it(75)+0
#### Cost of phase [75,76]:top(V,Out) -> [top(V',Out')] 
4*it(75)+0
#### Cost of chains of top(V,Out):
* Chain [[75,76]]...: 4*it(75)+0
  with precondition: [V>=1] 

* Chain [[75,76],77]: 4*it(75)+0
  with precondition: [Out=0,V>=1] 

* Chain [[75,76],74,77]: 4*it(75)+1
  with precondition: [Out=0,V>=1] 

* Chain [77]: 0
  with precondition: [Out=0,V>=0] 

* Chain [74,77]: 1
  with precondition: [Out=0,V>=1] 


#### Cost of chains of start(V,V1,V2):
* Chain [80]...: 4*s(3)+0
  with precondition: [V>=1] 

* Chain [79]: 1*s(4)+11*s(5)+6*s(7)+1*s(13)+1*s(14)+1*s(15)+1
  Such that:s(11) =< V+V1
aux(29) =< V
aux(30) =< V1
s(5) =< aux(29)
s(7) =< aux(30)
s(13) =< aux(29)
s(14) =< aux(29)
s(15) =< s(11)
s(13) =< s(11)
s(14) =< s(11)
s(15) =< aux(30)
s(14) =< aux(30)
s(7) =< aux(29)

  with precondition: [V>=0] 

* Chain [78]: 1
  with precondition: [V=1] 


Closed-form bounds of start(V,V1,V2): 
-------------------------------------
* Chain [80]... with precondition: [V>=1] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [79] with precondition: [V>=0] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [78] with precondition: [V=1] 
    - Upper bound: 1 
    - Complexity: constant 

### Maximum cost of start(V,V1,V2): inf 
Asymptotic class: infinity 

Time statistics: 
-------------------------------------
* Partial evaluation computed in 31 ms.
* Invariants computed in 89 ms.
   - Backward Invariants 34 ms.
   - Transitive Invariants 27 ms.
* Refinement performed in 149 ms.
* Termination proved in 30 ms.
* Upper bounds computed in 139 ms.
   - Equation cost structures 47 ms.
   - Phase cost structures 57 ms.
   - Chain cost structures 45 ms.
   - Solving cost expressions 1 ms.
* Total analysis performed in 501 ms.


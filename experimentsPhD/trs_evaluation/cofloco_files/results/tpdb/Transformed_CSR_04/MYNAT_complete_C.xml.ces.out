
Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. recursive  : [and/3]
1. recursive  : [fun/2]
2. recursive  : [fun1/4]
3. recursive  : [fun10/2]
4. recursive  : [fun11/3]
5. recursive  : [fun2/3]
6. recursive  : [fun3/4]
7. recursive  : [fun4/2]
8. recursive  : [fun5/4]
9. recursive  : [fun6/3]
10. recursive  : [fun7/3]
11. recursive  : [fun8/4]
12. recursive  : [fun9/2]
13. recursive  : [isNat/2]
14. recursive  : [isNatKind/2]
15. recursive  : [plus/3]
16. non_recursive  : [proper/2]
17. recursive  : [s/2]
18. recursive  : [top/2]
19. recursive  : [x/3]
20. non_recursive  : [start/3]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into and/3
1. SCC is partially evaluated into fun/2
2. SCC is partially evaluated into fun1/4
3. SCC is partially evaluated into fun10/2
4. SCC is partially evaluated into fun11/3
5. SCC is partially evaluated into fun2/3
6. SCC is partially evaluated into fun3/4
7. SCC is partially evaluated into fun4/2
8. SCC is partially evaluated into fun5/4
9. SCC is partially evaluated into fun6/3
10. SCC is partially evaluated into fun7/3
11. SCC is partially evaluated into fun8/4
12. SCC is partially evaluated into fun9/2
13. SCC is partially evaluated into isNat/2
14. SCC is partially evaluated into isNatKind/2
15. SCC is partially evaluated into plus/3
16. SCC is partially evaluated into proper/2
17. SCC is partially evaluated into s/2
18. SCC is partially evaluated into top/2
19. SCC is partially evaluated into x/3
20. SCC is partially evaluated into start/3

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations and/3 
* CE 42 is refined into CE [77] 
* CE 41 is refined into CE [78] 
* CE 40 is refined into CE [79] 


#### Refined cost equations and/3 
* CE 77: and(V,V1,Out) = 0
     [V1>=0,V>=0,Out=0] 
* CE 78: and(V,V1,Out) = 1+ and(W1,V1,X1)
     [W1>=0,V1>=0,X1+1=Out,W1+1=V] 
* CE 79: and(V,V1,Out) = 1+ and(W1,X1,Y1)
     [X1>=0,W1>=0,Y1+1=Out,X1+1=V1,W1+1=V] 

### Cost equations --> "Loop" of and/3 
* CEs [78] --> Loop 56 
* CEs [79] --> Loop 57 
* CEs [77] --> Loop 58 

#### Loops of and/3 
* Loop 56: and(V,V1,Out)->  and(V',V1,Out')
                  [V1>=0,V>=1,Out=Out'+1,V=V'+1] 
* Loop 57: and(V,V1,Out)->  and(V',V1',Out')
                  [V1>=1,V>=1,Out=Out'+1,V1=V1'+1,V=V'+1] 
* Loop 58: and(V,V1,Out) [V1>=0,V>=0,Out=0] 

### Ranking functions of CR and(V,V1,Out) 
* RF of phase [56,57]: [V]

#### Partial ranking functions of CR and(V,V1,Out) 
* Partial RF of phase [56,57]:
  - RF of loop [56:1,57:1]:
    V
  - RF of loop [57:1]:
    V1


### Resulting Chains:and(V,V1,Out) 
* [[56,57],58]
* [58]


### Merging Chains  and/3 into  External patterns of execution 
* [[58]] --> 1 
* [[58,[56,57]]] --> 2 


### Specialization of cost equations fun/2 
* CE 26 is refined into CE [80] 
* CE 25 is refined into CE [81] 


#### Refined cost equations fun/2 
* CE 80: fun(V,Out) = 0
     [V>=0,Out=0] 
* CE 81: fun(V,Out) = 1+ fun(W,X)
     [W>=0,X+1=Out,W+1=V] 

### Cost equations --> "Loop" of fun/2 
* CEs [81] --> Loop 59 
* CEs [80] --> Loop 60 

#### Loops of fun/2 
* Loop 59: fun(V,Out)->  fun(V',Out')
                  [V'>=0,Out=Out'+1,V'+1=V] 
* Loop 60: fun(V,Out) [V>=0,Out=0] 

### Ranking functions of CR fun(V,Out) 
* RF of phase [59]: [V]

#### Partial ranking functions of CR fun(V,Out) 
* Partial RF of phase [59]:
  - RF of loop [59:1]:
    V


### Resulting Chains:fun(V,Out) 
* [[59],60]
* [60]


### Merging Chains  fun/2 into  External patterns of execution 
* [[60]] --> 1 
* [[60,[59]]] --> 2 


### Specialization of cost equations fun1/4 
* CE 29 is refined into CE [82] 
* CE 28 is refined into CE [83] 
* CE 27 is refined into CE [84] 


#### Refined cost equations fun1/4 
* CE 82: fun1(V,V1,V2,Out) = 0
     [V2>=0,V1>=0,V>=0,Out=0] 
* CE 83: fun1(V,V1,V2,Out) = 1+ fun1(W2,V1,V2,X2)
     [W2>=0,V2>=0,V1>=0,X2+1=Out,W2+1=V] 
* CE 84: fun1(V,V1,V2,Out) = 1+ fun1(W2,X2,Y2,Z2)
     [Y2>=0,X2>=0,W2>=0,Z2+1=Out,Y2+1=V2,X2+1=V1,W2+1=V] 

### Cost equations --> "Loop" of fun1/4 
* CEs [83] --> Loop 61 
* CEs [84] --> Loop 62 
* CEs [82] --> Loop 63 

#### Loops of fun1/4 
* Loop 61: fun1(V,V1,V2,Out)->  fun1(V',V1,V2,Out')
                  [V2>=0,V1>=0,V>=1,Out=Out'+1,V=V'+1] 
* Loop 62: fun1(V,V1,V2,Out)->  fun1(V',V1',V2',Out')
                  [V2>=1,V1>=1,V>=1,Out=Out'+1,V2=V2'+1,V1=V1'+1,V=V'+1] 
* Loop 63: fun1(V,V1,V2,Out) [V2>=0,V1>=0,V>=0,Out=0] 

### Ranking functions of CR fun1(V,V1,V2,Out) 
* RF of phase [61,62]: [V]

#### Partial ranking functions of CR fun1(V,V1,V2,Out) 
* Partial RF of phase [61,62]:
  - RF of loop [61:1,62:1]:
    V
  - RF of loop [62:1]:
    V1
    V2


### Resulting Chains:fun1(V,V1,V2,Out) 
* [[61,62],63]
* [63]


### Merging Chains  fun1/4 into  External patterns of execution 
* [[63]] --> 1 
* [[63,[61,62]]] --> 2 


### Specialization of cost equations fun10/2 
* CE 67 is refined into CE [85] 
* CE 66 is refined into CE [86] 


#### Refined cost equations fun10/2 
* CE 85: fun10(V,Out) = 0
     [V>=0,Out=0] 
* CE 86: fun10(V,Out) = 1+ fun10(W,X)
     [W>=0,X+1=Out,W+1=V] 

### Cost equations --> "Loop" of fun10/2 
* CEs [86] --> Loop 64 
* CEs [85] --> Loop 65 

#### Loops of fun10/2 
* Loop 64: fun10(V,Out)->  fun10(V',Out')
                  [V'>=0,Out=Out'+1,V'+1=V] 
* Loop 65: fun10(V,Out) [V>=0,Out=0] 

### Ranking functions of CR fun10(V,Out) 
* RF of phase [64]: [V]

#### Partial ranking functions of CR fun10(V,Out) 
* Partial RF of phase [64]:
  - RF of loop [64:1]:
    V


### Resulting Chains:fun10(V,Out) 
* [[64],65]
* [65]


### Merging Chains  fun10/2 into  External patterns of execution 
* [[65]] --> 1 
* [[65,[64]]] --> 2 


### Specialization of cost equations fun11/3 
* CE 74 is refined into CE [87] 
* CE 73 is refined into CE [88] 
* CE 72 is refined into CE [89] 


#### Refined cost equations fun11/3 
* CE 87: fun11(V,V1,Out) = 0
     [V1>=0,V>=0,Out=0] 
* CE 88: fun11(V,V1,Out) = 1+ fun11(W1,V1,X1)
     [W1>=0,V1>=0,X1+1=Out,W1+1=V] 
* CE 89: fun11(V,V1,Out) = 1+ fun11(W1,X1,Y1)
     [X1>=0,W1>=0,Y1+1=Out,X1+1=V1,W1+1=V] 

### Cost equations --> "Loop" of fun11/3 
* CEs [88] --> Loop 66 
* CEs [89] --> Loop 67 
* CEs [87] --> Loop 68 

#### Loops of fun11/3 
* Loop 66: fun11(V,V1,Out)->  fun11(V',V1,Out')
                  [V1>=0,V>=1,Out=Out'+1,V=V'+1] 
* Loop 67: fun11(V,V1,Out)->  fun11(V',V1',Out')
                  [V1>=1,V>=1,Out=Out'+1,V1=V1'+1,V=V'+1] 
* Loop 68: fun11(V,V1,Out) [V1>=0,V>=0,Out=0] 

### Ranking functions of CR fun11(V,V1,Out) 
* RF of phase [66,67]: [V]

#### Partial ranking functions of CR fun11(V,V1,Out) 
* Partial RF of phase [66,67]:
  - RF of loop [66:1,67:1]:
    V
  - RF of loop [67:1]:
    V1


### Resulting Chains:fun11(V,V1,Out) 
* [[66,67],68]
* [68]


### Merging Chains  fun11/3 into  External patterns of execution 
* [[68]] --> 1 
* [[68,[66,67]]] --> 2 


### Specialization of cost equations fun2/3 
* CE 32 is refined into CE [90] 
* CE 30 is refined into CE [91] 
* CE 31 is refined into CE [92] 


#### Refined cost equations fun2/3 
* CE 90: fun2(V,V1,Out) = 0
     [V1>=0,V>=0,Out=0] 
* CE 91: fun2(V,V1,Out) = 1+ fun2(W1,V1,X1)
     [W1>=0,V1>=0,X1+1=Out,W1+1=V] 
* CE 92: fun2(V,V1,Out) = 1+ fun2(W1,X1,Y1)
     [X1>=0,W1>=0,Y1+1=Out,X1+1=V1,W1+1=V] 

### Cost equations --> "Loop" of fun2/3 
* CEs [91] --> Loop 69 
* CEs [92] --> Loop 70 
* CEs [90] --> Loop 71 

#### Loops of fun2/3 
* Loop 69: fun2(V,V1,Out)->  fun2(V',V1,Out')
                  [V1>=0,V>=1,Out=Out'+1,V=V'+1] 
* Loop 70: fun2(V,V1,Out)->  fun2(V',V1',Out')
                  [V1>=1,V>=1,Out=Out'+1,V1=V1'+1,V=V'+1] 
* Loop 71: fun2(V,V1,Out) [V1>=0,V>=0,Out=0] 

### Ranking functions of CR fun2(V,V1,Out) 
* RF of phase [69,70]: [V]

#### Partial ranking functions of CR fun2(V,V1,Out) 
* Partial RF of phase [69,70]:
  - RF of loop [69:1,70:1]:
    V
  - RF of loop [70:1]:
    V1


### Resulting Chains:fun2(V,V1,Out) 
* [[69,70],71]
* [71]


### Merging Chains  fun2/3 into  External patterns of execution 
* [[71]] --> 1 
* [[71,[69,70]]] --> 2 


### Specialization of cost equations fun3/4 
* CE 37 is refined into CE [93] 
* CE 36 is refined into CE [94] 
* CE 35 is refined into CE [95] 


#### Refined cost equations fun3/4 
* CE 93: fun3(V,V1,V2,Out) = 0
     [V2>=0,V1>=0,V>=0,Out=0] 
* CE 94: fun3(V,V1,V2,Out) = 1+ fun3(W2,V1,V2,X2)
     [W2>=0,V2>=0,V1>=0,X2+1=Out,W2+1=V] 
* CE 95: fun3(V,V1,V2,Out) = 1+ fun3(W2,X2,Y2,Z2)
     [Y2>=0,X2>=0,W2>=0,Z2+1=Out,Y2+1=V2,X2+1=V1,W2+1=V] 

### Cost equations --> "Loop" of fun3/4 
* CEs [94] --> Loop 72 
* CEs [95] --> Loop 73 
* CEs [93] --> Loop 74 

#### Loops of fun3/4 
* Loop 72: fun3(V,V1,V2,Out)->  fun3(V',V1,V2,Out')
                  [V2>=0,V1>=0,V>=1,Out=Out'+1,V=V'+1] 
* Loop 73: fun3(V,V1,V2,Out)->  fun3(V',V1',V2',Out')
                  [V2>=1,V1>=1,V>=1,Out=Out'+1,V2=V2'+1,V1=V1'+1,V=V'+1] 
* Loop 74: fun3(V,V1,V2,Out) [V2>=0,V1>=0,V>=0,Out=0] 

### Ranking functions of CR fun3(V,V1,V2,Out) 
* RF of phase [72,73]: [V]

#### Partial ranking functions of CR fun3(V,V1,V2,Out) 
* Partial RF of phase [72,73]:
  - RF of loop [72:1,73:1]:
    V
  - RF of loop [73:1]:
    V1
    V2


### Resulting Chains:fun3(V,V1,V2,Out) 
* [[72,73],74]
* [74]


### Merging Chains  fun3/4 into  External patterns of execution 
* [[74]] --> 1 
* [[74,[72,73]]] --> 2 


### Specialization of cost equations fun4/2 
* CE 39 is refined into CE [96] 
* CE 38 is refined into CE [97] 


#### Refined cost equations fun4/2 
* CE 96: fun4(V,Out) = 0
     [V>=0,Out=0] 
* CE 97: fun4(V,Out) = 1+ fun4(W,X)
     [W>=0,X+1=Out,W+1=V] 

### Cost equations --> "Loop" of fun4/2 
* CEs [97] --> Loop 75 
* CEs [96] --> Loop 76 

#### Loops of fun4/2 
* Loop 75: fun4(V,Out)->  fun4(V',Out')
                  [V'>=0,Out=Out'+1,V'+1=V] 
* Loop 76: fun4(V,Out) [V>=0,Out=0] 

### Ranking functions of CR fun4(V,Out) 
* RF of phase [75]: [V]

#### Partial ranking functions of CR fun4(V,Out) 
* Partial RF of phase [75]:
  - RF of loop [75:1]:
    V


### Resulting Chains:fun4(V,Out) 
* [[75],76]
* [76]


### Merging Chains  fun4/2 into  External patterns of execution 
* [[76]] --> 1 
* [[76,[75]]] --> 2 


### Specialization of cost equations fun5/4 
* CE 45 is refined into CE [98] 
* CE 43 is refined into CE [99] 
* CE 44 is refined into CE [100] 


#### Refined cost equations fun5/4 
* CE 98: fun5(V,V1,V2,Out) = 0
     [V2>=0,V1>=0,V>=0,Out=0] 
* CE 99: fun5(V,V1,V2,Out) = 1+ fun5(W2,V1,V2,X2)
     [W2>=0,V2>=0,V1>=0,X2+1=Out,W2+1=V] 
* CE 100: fun5(V,V1,V2,Out) = 1+ fun5(W2,X2,Y2,Z2)
     [Y2>=0,X2>=0,W2>=0,Z2+1=Out,Y2+1=V2,X2+1=V1,W2+1=V] 

### Cost equations --> "Loop" of fun5/4 
* CEs [99] --> Loop 77 
* CEs [100] --> Loop 78 
* CEs [98] --> Loop 79 

#### Loops of fun5/4 
* Loop 77: fun5(V,V1,V2,Out)->  fun5(V',V1,V2,Out')
                  [V2>=0,V1>=0,V>=1,Out=Out'+1,V=V'+1] 
* Loop 78: fun5(V,V1,V2,Out)->  fun5(V',V1',V2',Out')
                  [V2>=1,V1>=1,V>=1,Out=Out'+1,V2=V2'+1,V1=V1'+1,V=V'+1] 
* Loop 79: fun5(V,V1,V2,Out) [V2>=0,V1>=0,V>=0,Out=0] 

### Ranking functions of CR fun5(V,V1,V2,Out) 
* RF of phase [77,78]: [V]

#### Partial ranking functions of CR fun5(V,V1,V2,Out) 
* Partial RF of phase [77,78]:
  - RF of loop [77:1,78:1]:
    V
  - RF of loop [78:1]:
    V1
    V2


### Resulting Chains:fun5(V,V1,V2,Out) 
* [[77,78],79]
* [79]


### Merging Chains  fun5/4 into  External patterns of execution 
* [[79]] --> 1 
* [[79,[77,78]]] --> 2 


### Specialization of cost equations fun6/3 
* CE 48 is refined into CE [101] 
* CE 46 is refined into CE [102] 
* CE 47 is refined into CE [103] 


#### Refined cost equations fun6/3 
* CE 101: fun6(V,V1,Out) = 0
     [V1>=0,V>=0,Out=0] 
* CE 102: fun6(V,V1,Out) = 1+ fun6(W1,V1,X1)
     [W1>=0,V1>=0,X1+1=Out,W1+1=V] 
* CE 103: fun6(V,V1,Out) = 1+ fun6(W1,X1,Y1)
     [X1>=0,W1>=0,Y1+1=Out,X1+1=V1,W1+1=V] 

### Cost equations --> "Loop" of fun6/3 
* CEs [102] --> Loop 80 
* CEs [103] --> Loop 81 
* CEs [101] --> Loop 82 

#### Loops of fun6/3 
* Loop 80: fun6(V,V1,Out)->  fun6(V',V1,Out')
                  [V1>=0,V>=1,Out=Out'+1,V=V'+1] 
* Loop 81: fun6(V,V1,Out)->  fun6(V',V1',Out')
                  [V1>=1,V>=1,Out=Out'+1,V1=V1'+1,V=V'+1] 
* Loop 82: fun6(V,V1,Out) [V1>=0,V>=0,Out=0] 

### Ranking functions of CR fun6(V,V1,Out) 
* RF of phase [80,81]: [V]

#### Partial ranking functions of CR fun6(V,V1,Out) 
* Partial RF of phase [80,81]:
  - RF of loop [80:1,81:1]:
    V
  - RF of loop [81:1]:
    V1


### Resulting Chains:fun6(V,V1,Out) 
* [[80,81],82]
* [82]


### Merging Chains  fun6/3 into  External patterns of execution 
* [[82]] --> 1 
* [[82,[80,81]]] --> 2 


### Specialization of cost equations fun7/3 
* CE 55 is refined into CE [104] 
* CE 53 is refined into CE [105] 
* CE 54 is refined into CE [106] 


#### Refined cost equations fun7/3 
* CE 104: fun7(V,V1,Out) = 0
     [V1>=0,V>=0,Out=0] 
* CE 105: fun7(V,V1,Out) = 1+ fun7(W1,V1,X1)
     [W1>=0,V1>=0,X1+1=Out,W1+1=V] 
* CE 106: fun7(V,V1,Out) = 1+ fun7(W1,X1,Y1)
     [X1>=0,W1>=0,Y1+1=Out,X1+1=V1,W1+1=V] 

### Cost equations --> "Loop" of fun7/3 
* CEs [105] --> Loop 83 
* CEs [106] --> Loop 84 
* CEs [104] --> Loop 85 

#### Loops of fun7/3 
* Loop 83: fun7(V,V1,Out)->  fun7(V',V1,Out')
                  [V1>=0,V>=1,Out=Out'+1,V=V'+1] 
* Loop 84: fun7(V,V1,Out)->  fun7(V',V1',Out')
                  [V1>=1,V>=1,Out=Out'+1,V1=V1'+1,V=V'+1] 
* Loop 85: fun7(V,V1,Out) [V1>=0,V>=0,Out=0] 

### Ranking functions of CR fun7(V,V1,Out) 
* RF of phase [83,84]: [V]

#### Partial ranking functions of CR fun7(V,V1,Out) 
* Partial RF of phase [83,84]:
  - RF of loop [83:1,84:1]:
    V
  - RF of loop [84:1]:
    V1


### Resulting Chains:fun7(V,V1,Out) 
* [[83,84],85]
* [85]


### Merging Chains  fun7/3 into  External patterns of execution 
* [[85]] --> 1 
* [[85,[83,84]]] --> 2 


### Specialization of cost equations fun8/4 
* CE 63 is refined into CE [107] 
* CE 61 is refined into CE [108] 
* CE 62 is refined into CE [109] 


#### Refined cost equations fun8/4 
* CE 107: fun8(V,V1,V2,Out) = 0
     [V2>=0,V1>=0,V>=0,Out=0] 
* CE 108: fun8(V,V1,V2,Out) = 1+ fun8(W2,V1,V2,X2)
     [W2>=0,V2>=0,V1>=0,X2+1=Out,W2+1=V] 
* CE 109: fun8(V,V1,V2,Out) = 1+ fun8(W2,X2,Y2,Z2)
     [Y2>=0,X2>=0,W2>=0,Z2+1=Out,Y2+1=V2,X2+1=V1,W2+1=V] 

### Cost equations --> "Loop" of fun8/4 
* CEs [108] --> Loop 86 
* CEs [109] --> Loop 87 
* CEs [107] --> Loop 88 

#### Loops of fun8/4 
* Loop 86: fun8(V,V1,V2,Out)->  fun8(V',V1,V2,Out')
                  [V2>=0,V1>=0,V>=1,Out=Out'+1,V=V'+1] 
* Loop 87: fun8(V,V1,V2,Out)->  fun8(V',V1',V2',Out')
                  [V2>=1,V1>=1,V>=1,Out=Out'+1,V2=V2'+1,V1=V1'+1,V=V'+1] 
* Loop 88: fun8(V,V1,V2,Out) [V2>=0,V1>=0,V>=0,Out=0] 

### Ranking functions of CR fun8(V,V1,V2,Out) 
* RF of phase [86,87]: [V]

#### Partial ranking functions of CR fun8(V,V1,V2,Out) 
* Partial RF of phase [86,87]:
  - RF of loop [86:1,87:1]:
    V
  - RF of loop [87:1]:
    V1
    V2


### Resulting Chains:fun8(V,V1,V2,Out) 
* [[86,87],88]
* [88]


### Merging Chains  fun8/4 into  External patterns of execution 
* [[88]] --> 1 
* [[88,[86,87]]] --> 2 


### Specialization of cost equations fun9/2 
* CE 65 is refined into CE [110] 
* CE 64 is refined into CE [111] 


#### Refined cost equations fun9/2 
* CE 110: fun9(V,Out) = 0
     [V>=0,Out=0] 
* CE 111: fun9(V,Out) = 1+ fun9(W,X)
     [W>=0,X+1=Out,W+1=V] 

### Cost equations --> "Loop" of fun9/2 
* CEs [111] --> Loop 89 
* CEs [110] --> Loop 90 

#### Loops of fun9/2 
* Loop 89: fun9(V,Out)->  fun9(V',Out')
                  [V'>=0,Out=Out'+1,V'+1=V] 
* Loop 90: fun9(V,Out) [V>=0,Out=0] 

### Ranking functions of CR fun9(V,Out) 
* RF of phase [89]: [V]

#### Partial ranking functions of CR fun9(V,Out) 
* Partial RF of phase [89]:
  - RF of loop [89:1]:
    V


### Resulting Chains:fun9(V,Out) 
* [[89],90]
* [90]


### Merging Chains  fun9/2 into  External patterns of execution 
* [[90]] --> 1 
* [[90,[89]]] --> 2 


### Specialization of cost equations isNat/2 
* CE 34 is refined into CE [112] 
* CE 33 is refined into CE [113] 


#### Refined cost equations isNat/2 
* CE 112: isNat(V,Out) = 0
     [V>=0,Out=0] 
* CE 113: isNat(V,Out) = 1+ isNat(W,X)
     [W>=0,X+1=Out,W+1=V] 

### Cost equations --> "Loop" of isNat/2 
* CEs [113] --> Loop 91 
* CEs [112] --> Loop 92 

#### Loops of isNat/2 
* Loop 91: isNat(V,Out)->  isNat(V',Out')
                  [V'>=0,Out=Out'+1,V'+1=V] 
* Loop 92: isNat(V,Out) [V>=0,Out=0] 

### Ranking functions of CR isNat(V,Out) 
* RF of phase [91]: [V]

#### Partial ranking functions of CR isNat(V,Out) 
* Partial RF of phase [91]:
  - RF of loop [91:1]:
    V


### Resulting Chains:isNat(V,Out) 
* [[91],92]
* [92]


### Merging Chains  isNat/2 into  External patterns of execution 
* [[92]] --> 1 
* [[92,[91]]] --> 2 


### Specialization of cost equations isNatKind/2 
* CE 60 is refined into CE [114] 
* CE 59 is refined into CE [115] 


#### Refined cost equations isNatKind/2 
* CE 114: isNatKind(V,Out) = 0
     [V>=0,Out=0] 
* CE 115: isNatKind(V,Out) = 1+ isNatKind(W,X)
     [W>=0,X+1=Out,W+1=V] 

### Cost equations --> "Loop" of isNatKind/2 
* CEs [115] --> Loop 93 
* CEs [114] --> Loop 94 

#### Loops of isNatKind/2 
* Loop 93: isNatKind(V,Out)->  isNatKind(V',Out')
                  [V'>=0,Out=Out'+1,V'+1=V] 
* Loop 94: isNatKind(V,Out) [V>=0,Out=0] 

### Ranking functions of CR isNatKind(V,Out) 
* RF of phase [93]: [V]

#### Partial ranking functions of CR isNatKind(V,Out) 
* Partial RF of phase [93]:
  - RF of loop [93:1]:
    V


### Resulting Chains:isNatKind(V,Out) 
* [[93],94]
* [94]


### Merging Chains  isNatKind/2 into  External patterns of execution 
* [[94]] --> 1 
* [[94,[93]]] --> 2 


### Specialization of cost equations plus/3 
* CE 52 is refined into CE [116] 
* CE 50 is refined into CE [117] 
* CE 51 is refined into CE [118] 
* CE 49 is refined into CE [119] 


#### Refined cost equations plus/3 
* CE 116: plus(V,V1,Out) = 0
     [V1>=0,V>=0,Out=0] 
* CE 117: plus(V,V1,Out) = 1+ plus(V,W1,X1)
     [W1>=0,V>=0,X1+1=Out,W1+1=V1] 
* CE 118: plus(V,V1,Out) = 1+ plus(W1,V1,X1)
     [W1>=0,V1>=0,X1+1=Out,W1+1=V] 
* CE 119: plus(V,V1,Out) = 1+ plus(W1,X1,Y1)
     [X1>=0,W1>=0,Y1+1=Out,X1+1=V1,W1+1=V] 

### Cost equations --> "Loop" of plus/3 
* CEs [117] --> Loop 95 
* CEs [118] --> Loop 96 
* CEs [119] --> Loop 97 
* CEs [116] --> Loop 98 

#### Loops of plus/3 
* Loop 95: plus(V,V1,Out)->  plus(V,V1',Out')
                  [V1>=1,V>=0,Out=Out'+1,V1=V1'+1] 
* Loop 96: plus(V,V1,Out)->  plus(V',V1,Out')
                  [V1>=0,V>=1,Out=Out'+1,V=V'+1] 
* Loop 97: plus(V,V1,Out)->  plus(V',V1',Out')
                  [V1>=1,V>=1,Out=Out'+1,V1=V1'+1,V=V'+1] 
* Loop 98: plus(V,V1,Out) [V1>=0,V>=0,Out=0] 

### Ranking functions of CR plus(V,V1,Out) 
* RF of phase [95,96,97]: [V+V1]

#### Partial ranking functions of CR plus(V,V1,Out) 
* Partial RF of phase [95,96,97]:
  - RF of loop [95:1,97:1]:
    V1
  - RF of loop [96:1,97:1]:
    V


### Resulting Chains:plus(V,V1,Out) 
* [[95,96,97],98]
* [98]


### Merging Chains  plus/3 into  External patterns of execution 
* [[98]] --> 1 
* [[98,[95,96,97]]] --> 2 


### Specialization of cost equations proper/2 
* CE 58 is refined into CE [120] 
* CE 56 is refined into CE [121] 
* CE 57 is refined into CE [122] 


#### Refined cost equations proper/2 
* CE 120: proper(V,Out) = 0
     [V>=0,Out=0] 
* CE 121: proper(V,Out) = 1
     [Out=2,V=1] 
* CE 122: proper(V,Out) = 1
     [Out=1,V=0] 

### Cost equations --> "Loop" of proper/2 
* CEs [120] --> Loop 99 
* CEs [121] --> Loop 100 
* CEs [122] --> Loop 101 

#### Loops of proper/2 
* Loop 99: proper(V,Out) [V>=0,Out=0] 
* Loop 100: proper(V,Out) [Out=2,V=1] 
* Loop 101: proper(V,Out) [Out=1,V=0] 

### Ranking functions of CR proper(V,Out) 

#### Partial ranking functions of CR proper(V,Out) 


### Resulting Chains:proper(V,Out) 
* [101]
* [100]
* [99]


### Merging Chains  proper/2 into  External patterns of execution 
* [[101]] --> 1 
* [[100]] --> 2 
* [[99]] --> 3 


### Specialization of cost equations s/2 
* CE 76 is refined into CE [123] 
* CE 75 is refined into CE [124] 


#### Refined cost equations s/2 
* CE 123: s(V,Out) = 0
     [V>=0,Out=0] 
* CE 124: s(V,Out) = 1+ s(W,X)
     [W>=0,X+1=Out,W+1=V] 

### Cost equations --> "Loop" of s/2 
* CEs [124] --> Loop 102 
* CEs [123] --> Loop 103 

#### Loops of s/2 
* Loop 102: s(V,Out)->  s(V',Out')
                  [V'>=0,Out=Out'+1,V'+1=V] 
* Loop 103: s(V,Out) [V>=0,Out=0] 

### Ranking functions of CR s(V,Out) 
* RF of phase [102]: [V]

#### Partial ranking functions of CR s(V,Out) 
* Partial RF of phase [102]:
  - RF of loop [102:1]:
    V


### Resulting Chains:s(V,Out) 
* [[102],103]
* [103]


### Merging Chains  s/2 into  External patterns of execution 
* [[103]] --> 1 
* [[103,[102]]] --> 2 


### Specialization of cost equations top/2 
* CE 24 is refined into CE [125] 
* CE 22 is refined into CE [126] 
* CE 23 is refined into CE [127,128,129] 


#### Refined cost equations top/2 
* CE 125: top(V,Out) = 0
     [V>=0,Out=0] 
* CE 126: top(V,Out) = 1+ top(V,Out)
     [V>=1] 
* CE 127: top(V,Out) = 1+ proper(W,X):1+ top(Y,Out)
     [Y=1,X=1,W=0,V=1] 
* CE 128: top(V,Out) = 1+ proper(W,X):2+ top(Y,Out)
     [Y=2,X=2,W=1,V=2] 
* CE 129: top(V,Out) = 1+ proper(W,X):3+ top(Y,Out)
     [W>=0,W+1=V,Y=0,X=0] 

### Cost equations --> "Loop" of top/2 
* CEs [129] --> Loop 104 
* CEs [128] --> Loop 105 
* CEs [126,127] --> Loop 106 
* CEs [125] --> Loop 107 

#### Loops of top/2 
* Loop 104: top(V,Out)->  top(V',Out)
                  [V>=1,V'=0] 
* Loop 105: top(V,Out)->  top(V',Out)
                  [V'=2,V=2] 
* Loop 106: top(V,Out)->  top(V,Out)
                  [V>=1] 
* Loop 107: top(V,Out) [V>=0,Out=0] 

### Ranking functions of CR top(V,Out) 

#### Partial ranking functions of CR top(V,Out) 


### Resulting Chains:top(V,Out) 
* [[105,106]]...
* [[105,106],107]
* [[105,106],104,107]
* [107]
* [104,107]


### Merging Chains  top/2 into  External patterns of execution 
* [[107,104],[107],[107,104,[105,106]],[107,[105,106]]] --> 1 
* [[[105,106]]] --> 2 


### Specialization of cost equations x/3 
* CE 71 is refined into CE [130] 
* CE 70 is refined into CE [131] 
* CE 68 is refined into CE [132] 
* CE 69 is refined into CE [133] 


#### Refined cost equations x/3 
* CE 130: x(V,V1,Out) = 0
     [V1>=0,V>=0,Out=0] 
* CE 131: x(V,V1,Out) = 1+ x(V,W1,X1)
     [W1>=0,V>=0,X1+1=Out,W1+1=V1] 
* CE 132: x(V,V1,Out) = 1+ x(W1,V1,X1)
     [W1>=0,V1>=0,X1+1=Out,W1+1=V] 
* CE 133: x(V,V1,Out) = 1+ x(W1,X1,Y1)
     [X1>=0,W1>=0,Y1+1=Out,X1+1=V1,W1+1=V] 

### Cost equations --> "Loop" of x/3 
* CEs [131] --> Loop 108 
* CEs [132] --> Loop 109 
* CEs [133] --> Loop 110 
* CEs [130] --> Loop 111 

#### Loops of x/3 
* Loop 108: x(V,V1,Out)->  x(V,V1',Out')
                  [V1>=1,V>=0,Out=Out'+1,V1=V1'+1] 
* Loop 109: x(V,V1,Out)->  x(V',V1,Out')
                  [V1>=0,V>=1,Out=Out'+1,V=V'+1] 
* Loop 110: x(V,V1,Out)->  x(V',V1',Out')
                  [V1>=1,V>=1,Out=Out'+1,V1=V1'+1,V=V'+1] 
* Loop 111: x(V,V1,Out) [V1>=0,V>=0,Out=0] 

### Ranking functions of CR x(V,V1,Out) 
* RF of phase [108,109,110]: [V+V1]

#### Partial ranking functions of CR x(V,V1,Out) 
* Partial RF of phase [108,109,110]:
  - RF of loop [108:1,110:1]:
    V1
  - RF of loop [109:1,110:1]:
    V


### Resulting Chains:x(V,V1,Out) 
* [[108,109,110],111]
* [111]


### Merging Chains  x/3 into  External patterns of execution 
* [[111]] --> 1 
* [[111,[108,109,110]]] --> 2 


### Specialization of cost equations start/3 
* CE 2 is refined into CE [134,135] 
* CE 3 is refined into CE [136,137] 
* CE 4 is refined into CE [138,139] 
* CE 5 is refined into CE [140,141] 
* CE 6 is refined into CE [142,143] 
* CE 7 is refined into CE [144,145] 
* CE 8 is refined into CE [146,147] 
* CE 9 is refined into CE [148,149] 
* CE 10 is refined into CE [150,151] 
* CE 11 is refined into CE [152,153] 
* CE 12 is refined into CE [154,155] 
* CE 13 is refined into CE [156,157] 
* CE 14 is refined into CE [158,159,160] 
* CE 15 is refined into CE [161,162] 
* CE 16 is refined into CE [163,164] 
* CE 17 is refined into CE [165,166] 
* CE 18 is refined into CE [167,168] 
* CE 19 is refined into CE [169,170] 
* CE 20 is refined into CE [171,172] 
* CE 21 is refined into CE [173,174] 


#### Refined cost equations start/3 
* CE 134: start(V,V1,V2) = 0+ top(V,W2):1
     [V>=0,W2=0] 
* CE 135: start(V,V1,V2) = 0+ top(V,W2):2
     [V>=1] 
* CE 136: start(V,V1,V2) = 0+ fun(V,W2):1
     [V>=0,W2=0] 
* CE 137: start(V,V1,V2) = 0+ fun(V,W2):2
     [V>=W2,W2>=1] 
* CE 138: start(V,V1,V2) = 0+ fun1(V,V1,V2,W2):1
     [V2>=0,V1>=0,V>=0,W2=0] 
* CE 139: start(V,V1,V2) = 0+ fun1(V,V1,V2,W2):2
     [V>=W2,W2>=1,V2>=0,V1>=0] 
* CE 140: start(V,V1,V2) = 0+ fun2(V,V1,W2):1
     [V1>=0,V>=0,W2=0] 
* CE 141: start(V,V1,V2) = 0+ fun2(V,V1,W2):2
     [V>=W2,W2>=1,V1>=0] 
* CE 142: start(V,V1,V2) = 0+ isNat(V,W2):1
     [V>=0,W2=0] 
* CE 143: start(V,V1,V2) = 0+ isNat(V,W2):2
     [V>=W2,W2>=1] 
* CE 144: start(V,V1,V2) = 0+ fun3(V,V1,V2,W2):1
     [V2>=0,V1>=0,V>=0,W2=0] 
* CE 145: start(V,V1,V2) = 0+ fun3(V,V1,V2,W2):2
     [V>=W2,W2>=1,V2>=0,V1>=0] 
* CE 146: start(V,V1,V2) = 0+ fun4(V,W2):1
     [V>=0,W2=0] 
* CE 147: start(V,V1,V2) = 0+ fun4(V,W2):2
     [V>=W2,W2>=1] 
* CE 148: start(V,V1,V2) = 0+ and(V,V1,W2):1
     [V1>=0,V>=0,W2=0] 
* CE 149: start(V,V1,V2) = 0+ and(V,V1,W2):2
     [V>=W2,W2>=1,V1>=0] 
* CE 150: start(V,V1,V2) = 0+ fun5(V,V1,V2,W2):1
     [V2>=0,V1>=0,V>=0,W2=0] 
* CE 151: start(V,V1,V2) = 0+ fun5(V,V1,V2,W2):2
     [V>=W2,W2>=1,V2>=0,V1>=0] 
* CE 152: start(V,V1,V2) = 0+ fun6(V,V1,W2):1
     [V1>=0,V>=0,W2=0] 
* CE 153: start(V,V1,V2) = 0+ fun6(V,V1,W2):2
     [V>=W2,W2>=1,V1>=0] 
* CE 154: start(V,V1,V2) = 0+ plus(V,V1,W2):1
     [V1>=0,V>=0,W2=0] 
* CE 155: start(V,V1,V2) = 0+ plus(V,V1,W2):2
     [V+V1>=W2,W2>=1,V1>=0,V>=0] 
* CE 156: start(V,V1,V2) = 0+ fun7(V,V1,W2):1
     [V1>=0,V>=0,W2=0] 
* CE 157: start(V,V1,V2) = 0+ fun7(V,V1,W2):2
     [V>=W2,W2>=1,V1>=0] 
* CE 158: start(V,V1,V2) = 0+ proper(W2,X2):1
     [X2=1,W2=0,V=0] 
* CE 159: start(V,V1,V2) = 0+ proper(W2,X2):2
     [X2=2,W2=1,V=1] 
* CE 160: start(V,V1,V2) = 0+ proper(V,W2):3
     [V>=0,W2=0] 
* CE 161: start(V,V1,V2) = 0+ isNatKind(V,W2):1
     [V>=0,W2=0] 
* CE 162: start(V,V1,V2) = 0+ isNatKind(V,W2):2
     [V>=W2,W2>=1] 
* CE 163: start(V,V1,V2) = 0+ fun8(V,V1,V2,W2):1
     [V2>=0,V1>=0,V>=0,W2=0] 
* CE 164: start(V,V1,V2) = 0+ fun8(V,V1,V2,W2):2
     [V>=W2,W2>=1,V2>=0,V1>=0] 
* CE 165: start(V,V1,V2) = 0+ fun9(V,W2):1
     [V>=0,W2=0] 
* CE 166: start(V,V1,V2) = 0+ fun9(V,W2):2
     [V>=W2,W2>=1] 
* CE 167: start(V,V1,V2) = 0+ fun10(V,W2):1
     [V>=0,W2=0] 
* CE 168: start(V,V1,V2) = 0+ fun10(V,W2):2
     [V>=W2,W2>=1] 
* CE 169: start(V,V1,V2) = 0+ x(V,V1,W2):1
     [V1>=0,V>=0,W2=0] 
* CE 170: start(V,V1,V2) = 0+ x(V,V1,W2):2
     [V+V1>=W2,W2>=1,V1>=0,V>=0] 
* CE 171: start(V,V1,V2) = 0+ fun11(V,V1,W2):1
     [V1>=0,V>=0,W2=0] 
* CE 172: start(V,V1,V2) = 0+ fun11(V,V1,W2):2
     [V>=W2,W2>=1,V1>=0] 
* CE 173: start(V,V1,V2) = 0+ s(V,W2):1
     [V>=0,W2=0] 
* CE 174: start(V,V1,V2) = 0+ s(V,W2):2
     [V>=W2,W2>=1] 

### Cost equations --> "Loop" of start/3 
* CEs [159] --> Loop 112 
* CEs [134,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174] --> Loop 113 
* CEs [135] --> Loop 114 

#### Loops of start/3 
* Loop 112: start(V,V1,V2) [V=1] 
* Loop 113: start(V,V1,V2) [V>=0] 
* Loop 114: start(V,V1,V2) [V>=1] 

### Ranking functions of CR start(V,V1,V2) 

#### Partial ranking functions of CR start(V,V1,V2) 


### Resulting Chains:start(V,V1,V2) 
* [114]...
* [113]
* [112]


### Merging Chains  start/3 into  External patterns of execution 
* [[112],[113]] --> 1 
* [[114]] --> 2 


Computing Bounds
=====================================

#### Cost of loops [56,57] 

 * loop 56:and(V,V1,Out) -> [and(V',V1',Out')] 
1
 * loop 57:and(V,V1,Out) -> [and(V',V1',Out')] 
1
#### Cost of phase [56,57]:and(V,V1,Out) -> [and(V',V1',Out')] 
1*it(56)+1*it(57)+0
  Such that:it(57) =< V1
it(57) =< V1-V1'
aux(1) =< V
aux(2) =< V-V'
it(56) =< aux(1)
it(57) =< aux(1)
it(56) =< aux(2)
it(57) =< aux(2)

#### Cost of chains of and(V,V1,Out):
* Chain [[56,57],58]: 1*it(56)+1*it(57)+0
  Such that:aux(1) =< V
it(57) =< V1
aux(2) =< Out
it(56) =< aux(1)
it(57) =< aux(1)
it(56) =< aux(2)
it(57) =< aux(2)

  with precondition: [V1>=0,Out>=1,V>=Out] 

* Chain [58]: 0
  with precondition: [Out=0,V>=0,V1>=0] 


#### Cost of loops [59] 

 * loop 59:fun(V,Out) -> [fun(V',Out')] 
1
#### Cost of phase [59]:fun(V,Out) -> [fun(V',Out')] 
1*it(59)+0
  Such that:it(59) =< V
it(59) =< V-V'

#### Cost of chains of fun(V,Out):
* Chain [[59],60]: 1*it(59)+0
  Such that:it(59) =< Out

  with precondition: [Out>=1,V>=Out] 

* Chain [60]: 0
  with precondition: [Out=0,V>=0] 


#### Cost of loops [61,62] 

 * loop 61:fun1(V,V1,V2,Out) -> [fun1(V',V1',V2',Out')] 
1
 * loop 62:fun1(V,V1,V2,Out) -> [fun1(V',V1',V2',Out')] 
1
#### Cost of phase [61,62]:fun1(V,V1,V2,Out) -> [fun1(V',V1',V2',Out')] 
1*it(61)+1*it(62)+0
  Such that:it(62) =< V1
it(62) =< V1-V1'
it(62) =< V2
it(62) =< V2-V2'
aux(3) =< V
aux(4) =< V-V'
it(61) =< aux(3)
it(62) =< aux(3)
it(61) =< aux(4)
it(62) =< aux(4)

#### Cost of chains of fun1(V,V1,V2,Out):
* Chain [[61,62],63]: 1*it(61)+1*it(62)+0
  Such that:aux(3) =< V
it(62) =< V1
aux(4) =< Out
it(61) =< aux(3)
it(62) =< aux(3)
it(61) =< aux(4)
it(62) =< aux(4)

  with precondition: [V1>=0,V2>=0,Out>=1,V>=Out] 

* Chain [63]: 0
  with precondition: [Out=0,V>=0,V1>=0,V2>=0] 


#### Cost of loops [64] 

 * loop 64:fun10(V,Out) -> [fun10(V',Out')] 
1
#### Cost of phase [64]:fun10(V,Out) -> [fun10(V',Out')] 
1*it(64)+0
  Such that:it(64) =< V
it(64) =< V-V'

#### Cost of chains of fun10(V,Out):
* Chain [[64],65]: 1*it(64)+0
  Such that:it(64) =< Out

  with precondition: [Out>=1,V>=Out] 

* Chain [65]: 0
  with precondition: [Out=0,V>=0] 


#### Cost of loops [66,67] 

 * loop 66:fun11(V,V1,Out) -> [fun11(V',V1',Out')] 
1
 * loop 67:fun11(V,V1,Out) -> [fun11(V',V1',Out')] 
1
#### Cost of phase [66,67]:fun11(V,V1,Out) -> [fun11(V',V1',Out')] 
1*it(66)+1*it(67)+0
  Such that:it(67) =< V1
it(67) =< V1-V1'
aux(5) =< V
aux(6) =< V-V'
it(66) =< aux(5)
it(67) =< aux(5)
it(66) =< aux(6)
it(67) =< aux(6)

#### Cost of chains of fun11(V,V1,Out):
* Chain [[66,67],68]: 1*it(66)+1*it(67)+0
  Such that:aux(5) =< V
it(67) =< V1
aux(6) =< Out
it(66) =< aux(5)
it(67) =< aux(5)
it(66) =< aux(6)
it(67) =< aux(6)

  with precondition: [V1>=0,Out>=1,V>=Out] 

* Chain [68]: 0
  with precondition: [Out=0,V>=0,V1>=0] 


#### Cost of loops [69,70] 

 * loop 69:fun2(V,V1,Out) -> [fun2(V',V1',Out')] 
1
 * loop 70:fun2(V,V1,Out) -> [fun2(V',V1',Out')] 
1
#### Cost of phase [69,70]:fun2(V,V1,Out) -> [fun2(V',V1',Out')] 
1*it(69)+1*it(70)+0
  Such that:it(70) =< V1
it(70) =< V1-V1'
aux(7) =< V
aux(8) =< V-V'
it(69) =< aux(7)
it(70) =< aux(7)
it(69) =< aux(8)
it(70) =< aux(8)

#### Cost of chains of fun2(V,V1,Out):
* Chain [[69,70],71]: 1*it(69)+1*it(70)+0
  Such that:aux(7) =< V
it(70) =< V1
aux(8) =< Out
it(69) =< aux(7)
it(70) =< aux(7)
it(69) =< aux(8)
it(70) =< aux(8)

  with precondition: [V1>=0,Out>=1,V>=Out] 

* Chain [71]: 0
  with precondition: [Out=0,V>=0,V1>=0] 


#### Cost of loops [72,73] 

 * loop 72:fun3(V,V1,V2,Out) -> [fun3(V',V1',V2',Out')] 
1
 * loop 73:fun3(V,V1,V2,Out) -> [fun3(V',V1',V2',Out')] 
1
#### Cost of phase [72,73]:fun3(V,V1,V2,Out) -> [fun3(V',V1',V2',Out')] 
1*it(72)+1*it(73)+0
  Such that:it(73) =< V1
it(73) =< V1-V1'
it(73) =< V2
it(73) =< V2-V2'
aux(9) =< V
aux(10) =< V-V'
it(72) =< aux(9)
it(73) =< aux(9)
it(72) =< aux(10)
it(73) =< aux(10)

#### Cost of chains of fun3(V,V1,V2,Out):
* Chain [[72,73],74]: 1*it(72)+1*it(73)+0
  Such that:aux(9) =< V
it(73) =< V1
aux(10) =< Out
it(72) =< aux(9)
it(73) =< aux(9)
it(72) =< aux(10)
it(73) =< aux(10)

  with precondition: [V1>=0,V2>=0,Out>=1,V>=Out] 

* Chain [74]: 0
  with precondition: [Out=0,V>=0,V1>=0,V2>=0] 


#### Cost of loops [75] 

 * loop 75:fun4(V,Out) -> [fun4(V',Out')] 
1
#### Cost of phase [75]:fun4(V,Out) -> [fun4(V',Out')] 
1*it(75)+0
  Such that:it(75) =< V
it(75) =< V-V'

#### Cost of chains of fun4(V,Out):
* Chain [[75],76]: 1*it(75)+0
  Such that:it(75) =< Out

  with precondition: [Out>=1,V>=Out] 

* Chain [76]: 0
  with precondition: [Out=0,V>=0] 


#### Cost of loops [77,78] 

 * loop 77:fun5(V,V1,V2,Out) -> [fun5(V',V1',V2',Out')] 
1
 * loop 78:fun5(V,V1,V2,Out) -> [fun5(V',V1',V2',Out')] 
1
#### Cost of phase [77,78]:fun5(V,V1,V2,Out) -> [fun5(V',V1',V2',Out')] 
1*it(77)+1*it(78)+0
  Such that:it(78) =< V1
it(78) =< V1-V1'
it(78) =< V2
it(78) =< V2-V2'
aux(11) =< V
aux(12) =< V-V'
it(77) =< aux(11)
it(78) =< aux(11)
it(77) =< aux(12)
it(78) =< aux(12)

#### Cost of chains of fun5(V,V1,V2,Out):
* Chain [[77,78],79]: 1*it(77)+1*it(78)+0
  Such that:aux(11) =< V
it(78) =< V1
aux(12) =< Out
it(77) =< aux(11)
it(78) =< aux(11)
it(77) =< aux(12)
it(78) =< aux(12)

  with precondition: [V1>=0,V2>=0,Out>=1,V>=Out] 

* Chain [79]: 0
  with precondition: [Out=0,V>=0,V1>=0,V2>=0] 


#### Cost of loops [80,81] 

 * loop 80:fun6(V,V1,Out) -> [fun6(V',V1',Out')] 
1
 * loop 81:fun6(V,V1,Out) -> [fun6(V',V1',Out')] 
1
#### Cost of phase [80,81]:fun6(V,V1,Out) -> [fun6(V',V1',Out')] 
1*it(80)+1*it(81)+0
  Such that:it(81) =< V1
it(81) =< V1-V1'
aux(13) =< V
aux(14) =< V-V'
it(80) =< aux(13)
it(81) =< aux(13)
it(80) =< aux(14)
it(81) =< aux(14)

#### Cost of chains of fun6(V,V1,Out):
* Chain [[80,81],82]: 1*it(80)+1*it(81)+0
  Such that:aux(13) =< V
it(81) =< V1
aux(14) =< Out
it(80) =< aux(13)
it(81) =< aux(13)
it(80) =< aux(14)
it(81) =< aux(14)

  with precondition: [V1>=0,Out>=1,V>=Out] 

* Chain [82]: 0
  with precondition: [Out=0,V>=0,V1>=0] 


#### Cost of loops [83,84] 

 * loop 83:fun7(V,V1,Out) -> [fun7(V',V1',Out')] 
1
 * loop 84:fun7(V,V1,Out) -> [fun7(V',V1',Out')] 
1
#### Cost of phase [83,84]:fun7(V,V1,Out) -> [fun7(V',V1',Out')] 
1*it(83)+1*it(84)+0
  Such that:it(84) =< V1
it(84) =< V1-V1'
aux(15) =< V
aux(16) =< V-V'
it(83) =< aux(15)
it(84) =< aux(15)
it(83) =< aux(16)
it(84) =< aux(16)

#### Cost of chains of fun7(V,V1,Out):
* Chain [[83,84],85]: 1*it(83)+1*it(84)+0
  Such that:aux(15) =< V
it(84) =< V1
aux(16) =< Out
it(83) =< aux(15)
it(84) =< aux(15)
it(83) =< aux(16)
it(84) =< aux(16)

  with precondition: [V1>=0,Out>=1,V>=Out] 

* Chain [85]: 0
  with precondition: [Out=0,V>=0,V1>=0] 


#### Cost of loops [86,87] 

 * loop 86:fun8(V,V1,V2,Out) -> [fun8(V',V1',V2',Out')] 
1
 * loop 87:fun8(V,V1,V2,Out) -> [fun8(V',V1',V2',Out')] 
1
#### Cost of phase [86,87]:fun8(V,V1,V2,Out) -> [fun8(V',V1',V2',Out')] 
1*it(86)+1*it(87)+0
  Such that:it(87) =< V1
it(87) =< V1-V1'
it(87) =< V2
it(87) =< V2-V2'
aux(17) =< V
aux(18) =< V-V'
it(86) =< aux(17)
it(87) =< aux(17)
it(86) =< aux(18)
it(87) =< aux(18)

#### Cost of chains of fun8(V,V1,V2,Out):
* Chain [[86,87],88]: 1*it(86)+1*it(87)+0
  Such that:aux(17) =< V
it(87) =< V1
aux(18) =< Out
it(86) =< aux(17)
it(87) =< aux(17)
it(86) =< aux(18)
it(87) =< aux(18)

  with precondition: [V1>=0,V2>=0,Out>=1,V>=Out] 

* Chain [88]: 0
  with precondition: [Out=0,V>=0,V1>=0,V2>=0] 


#### Cost of loops [89] 

 * loop 89:fun9(V,Out) -> [fun9(V',Out')] 
1
#### Cost of phase [89]:fun9(V,Out) -> [fun9(V',Out')] 
1*it(89)+0
  Such that:it(89) =< V
it(89) =< V-V'

#### Cost of chains of fun9(V,Out):
* Chain [[89],90]: 1*it(89)+0
  Such that:it(89) =< Out

  with precondition: [Out>=1,V>=Out] 

* Chain [90]: 0
  with precondition: [Out=0,V>=0] 


#### Cost of loops [91] 

 * loop 91:isNat(V,Out) -> [isNat(V',Out')] 
1
#### Cost of phase [91]:isNat(V,Out) -> [isNat(V',Out')] 
1*it(91)+0
  Such that:it(91) =< V
it(91) =< V-V'

#### Cost of chains of isNat(V,Out):
* Chain [[91],92]: 1*it(91)+0
  Such that:it(91) =< Out

  with precondition: [Out>=1,V>=Out] 

* Chain [92]: 0
  with precondition: [Out=0,V>=0] 


#### Cost of loops [93] 

 * loop 93:isNatKind(V,Out) -> [isNatKind(V',Out')] 
1
#### Cost of phase [93]:isNatKind(V,Out) -> [isNatKind(V',Out')] 
1*it(93)+0
  Such that:it(93) =< V
it(93) =< V-V'

#### Cost of chains of isNatKind(V,Out):
* Chain [[93],94]: 1*it(93)+0
  Such that:it(93) =< Out

  with precondition: [Out>=1,V>=Out] 

* Chain [94]: 0
  with precondition: [Out=0,V>=0] 


#### Cost of loops [95,96,97] 

 * loop 95:plus(V,V1,Out) -> [plus(V',V1',Out')] 
1
 * loop 96:plus(V,V1,Out) -> [plus(V',V1',Out')] 
1
 * loop 97:plus(V,V1,Out) -> [plus(V',V1',Out')] 
1
#### Cost of phase [95,96,97]:plus(V,V1,Out) -> [plus(V',V1',Out')] 
1*it(95)+1*it(96)+1*it(97)+0
  Such that:aux(19) =< V
aux(20) =< V+V1
aux(21) =< V+V1-V'-V1'
aux(22) =< V-V'
aux(23) =< V1
aux(24) =< V1-V1'
it(96) =< aux(19)
it(97) =< aux(19)
it(95) =< aux(20)
it(96) =< aux(20)
it(97) =< aux(20)
it(95) =< aux(21)
it(96) =< aux(21)
it(97) =< aux(21)
it(96) =< aux(22)
it(97) =< aux(22)
it(95) =< aux(23)
it(97) =< aux(23)
it(95) =< aux(24)
it(97) =< aux(24)

#### Cost of chains of plus(V,V1,Out):
* Chain [[95,96,97],98]: 1*it(95)+1*it(96)+1*it(97)+0
  Such that:aux(25) =< V
aux(26) =< V+V1
aux(27) =< V1
it(96) =< aux(25)
it(97) =< aux(25)
it(95) =< aux(26)
it(96) =< aux(26)
it(97) =< aux(26)
it(95) =< aux(27)
it(97) =< aux(27)

  with precondition: [V>=0,V1>=0,Out>=1,V+V1>=Out] 

* Chain [98]: 0
  with precondition: [Out=0,V>=0,V1>=0] 


#### Cost of chains of proper(V,Out):
* Chain [101]: 1
  with precondition: [V=0,Out=1] 

* Chain [100]: 1
  with precondition: [V=1,Out=2] 

* Chain [99]: 0
  with precondition: [Out=0,V>=0] 


#### Cost of loops [102] 

 * loop 102:s(V,Out) -> [s(V',Out')] 
1
#### Cost of phase [102]:s(V,Out) -> [s(V',Out')] 
1*it(102)+0
  Such that:it(102) =< V
it(102) =< V-V'

#### Cost of chains of s(V,Out):
* Chain [[102],103]: 1*it(102)+0
  Such that:it(102) =< Out

  with precondition: [Out>=1,V>=Out] 

* Chain [103]: 0
  with precondition: [Out=0,V>=0] 


#### Cost of loops [105,106] 

 * loop 105:top(V,Out) -> [top(V',Out')] 
2
 * loop 106:top(V,Out) -> [top(V',Out')] 
2
#### Cost of phase [105,106]:top(V,Out) -> [top(V',Out')] 
4*it(105)+0
#### Cost of phase [105,106]:top(V,Out) -> [top(V',Out')] 
4*it(105)+0
#### Cost of phase [105,106]:top(V,Out) -> [top(V',Out')] 
4*it(105)+0
#### Cost of chains of top(V,Out):
* Chain [[105,106]]...: 4*it(105)+0
  with precondition: [V>=1] 

* Chain [[105,106],107]: 4*it(105)+0
  with precondition: [Out=0,V>=1] 

* Chain [[105,106],104,107]: 4*it(105)+1
  with precondition: [Out=0,V>=1] 

* Chain [107]: 0
  with precondition: [Out=0,V>=0] 

* Chain [104,107]: 1
  with precondition: [Out=0,V>=1] 


#### Cost of loops [108,109,110] 

 * loop 108:x(V,V1,Out) -> [x(V',V1',Out')] 
1
 * loop 109:x(V,V1,Out) -> [x(V',V1',Out')] 
1
 * loop 110:x(V,V1,Out) -> [x(V',V1',Out')] 
1
#### Cost of phase [108,109,110]:x(V,V1,Out) -> [x(V',V1',Out')] 
1*it(108)+1*it(109)+1*it(110)+0
  Such that:aux(29) =< V
aux(30) =< V+V1
aux(31) =< V+V1-V'-V1'
aux(32) =< V-V'
aux(33) =< V1
aux(34) =< V1-V1'
it(109) =< aux(29)
it(110) =< aux(29)
it(108) =< aux(30)
it(109) =< aux(30)
it(110) =< aux(30)
it(108) =< aux(31)
it(109) =< aux(31)
it(110) =< aux(31)
it(109) =< aux(32)
it(110) =< aux(32)
it(108) =< aux(33)
it(110) =< aux(33)
it(108) =< aux(34)
it(110) =< aux(34)

#### Cost of chains of x(V,V1,Out):
* Chain [[108,109,110],111]: 1*it(108)+1*it(109)+1*it(110)+0
  Such that:aux(35) =< V
aux(36) =< V+V1
aux(37) =< V1
it(109) =< aux(35)
it(110) =< aux(35)
it(108) =< aux(36)
it(109) =< aux(36)
it(110) =< aux(36)
it(108) =< aux(37)
it(110) =< aux(37)

  with precondition: [V>=0,V1>=0,Out>=1,V+V1>=Out] 

* Chain [111]: 0
  with precondition: [Out=0,V>=0,V1>=0] 


#### Cost of chains of start(V,V1,V2):
* Chain [114]...: 4*s(3)+0
  with precondition: [V>=1] 

* Chain [113]: 1*s(4)+16*s(5)+9*s(7)+2*s(35)+2*s(36)+2*s(37)+1
  Such that:aux(47) =< V
aux(48) =< V+V1
aux(49) =< V1
s(5) =< aux(47)
s(7) =< aux(49)
s(35) =< aux(47)
s(36) =< aux(47)
s(37) =< aux(48)
s(35) =< aux(48)
s(36) =< aux(48)
s(37) =< aux(49)
s(36) =< aux(49)
s(7) =< aux(47)

  with precondition: [V>=0] 

* Chain [112]: 1
  with precondition: [V=1] 


Closed-form bounds of start(V,V1,V2): 
-------------------------------------
* Chain [114]... with precondition: [V>=1] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [113] with precondition: [V>=0] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [112] with precondition: [V=1] 
    - Upper bound: 1 
    - Complexity: constant 

### Maximum cost of start(V,V1,V2): inf 
Asymptotic class: infinity 

Time statistics: 
-------------------------------------
* Partial evaluation computed in 47 ms.
* Invariants computed in 132 ms.
   - Backward Invariants 51 ms.
   - Transitive Invariants 40 ms.
* Refinement performed in 220 ms.
* Termination proved in 45 ms.
* Upper bounds computed in 221 ms.
   - Equation cost structures 73 ms.
   - Phase cost structures 91 ms.
   - Chain cost structures 76 ms.
   - Solving cost expressions 1 ms.
* Total analysis performed in 768 ms.


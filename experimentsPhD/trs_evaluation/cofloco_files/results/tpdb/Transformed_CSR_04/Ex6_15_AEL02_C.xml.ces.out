
Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. recursive  : [cons/3]
1. recursive  : [cons1/3]
2. recursive  : [fcons/3]
3. recursive  : [first/3]
4. recursive  : [first1/3]
5. recursive  : [from/2]
6. non_recursive  : [proper/2]
7. recursive  : [quote/2]
8. recursive  : [quote1/2]
9. recursive  : [s/2]
10. recursive  : [s1/2]
11. recursive  : [sel/3]
12. recursive  : [sel1/3]
13. recursive  : [top/2]
14. recursive  : [unquote/2]
15. recursive  : [unquote1/2]
16. non_recursive  : [start/2]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into cons/3
1. SCC is partially evaluated into cons1/3
2. SCC is partially evaluated into fcons/3
3. SCC is partially evaluated into first/3
4. SCC is partially evaluated into first1/3
5. SCC is partially evaluated into from/2
6. SCC is partially evaluated into proper/2
7. SCC is partially evaluated into quote/2
8. SCC is partially evaluated into quote1/2
9. SCC is partially evaluated into s/2
10. SCC is partially evaluated into s1/2
11. SCC is partially evaluated into sel/3
12. SCC is partially evaluated into sel1/3
13. SCC is partially evaluated into top/2
14. SCC is partially evaluated into unquote/2
15. SCC is partially evaluated into unquote1/2
16. SCC is partially evaluated into start/2

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations cons/3 
* CE 31 is refined into CE [67] 
* CE 30 is refined into CE [68] 
* CE 29 is refined into CE [69] 


#### Refined cost equations cons/3 
* CE 67: cons(V,V1,Out) = 0
     [V1>=0,V>=0,Out=0] 
* CE 68: cons(V,V1,Out) = 1+ cons(W1,V1,X1)
     [W1>=0,V1>=0,X1+1=Out,W1+1=V] 
* CE 69: cons(V,V1,Out) = 1+ cons(W1,X1,Y1)
     [X1>=0,W1>=0,Y1+1=Out,X1+1=V1,W1+1=V] 

### Cost equations --> "Loop" of cons/3 
* CEs [68] --> Loop 50 
* CEs [69] --> Loop 51 
* CEs [67] --> Loop 52 

#### Loops of cons/3 
* Loop 50: cons(V,V1,Out)->  cons(V',V1,Out')
                  [V1>=0,V>=1,Out=Out'+1,V=V'+1] 
* Loop 51: cons(V,V1,Out)->  cons(V',V1',Out')
                  [V1>=1,V>=1,Out=Out'+1,V1=V1'+1,V=V'+1] 
* Loop 52: cons(V,V1,Out) [V1>=0,V>=0,Out=0] 

### Ranking functions of CR cons(V,V1,Out) 
* RF of phase [50,51]: [V]

#### Partial ranking functions of CR cons(V,V1,Out) 
* Partial RF of phase [50,51]:
  - RF of loop [50:1,51:1]:
    V
  - RF of loop [51:1]:
    V1


### Resulting Chains:cons(V,V1,Out) 
* [[50,51],52]
* [52]


### Merging Chains  cons/3 into  External patterns of execution 
* [[52]] --> 1 
* [[52,[50,51]]] --> 2 


### Specialization of cost equations cons1/3 
* CE 58 is refined into CE [70] 
* CE 55 is refined into CE [71] 
* CE 57 is refined into CE [72] 
* CE 56 is refined into CE [73] 


#### Refined cost equations cons1/3 
* CE 70: cons1(V,V1,Out) = 0
     [V1>=0,V>=0,Out=0] 
* CE 71: cons1(V,V1,Out) = 1+ cons1(V,W1,X1)
     [W1>=0,V>=0,X1+1=Out,W1+1=V1] 
* CE 72: cons1(V,V1,Out) = 1+ cons1(W1,V1,X1)
     [W1>=0,V1>=0,X1+1=Out,W1+1=V] 
* CE 73: cons1(V,V1,Out) = 1+ cons1(W1,X1,Y1)
     [X1>=0,W1>=0,Y1+1=Out,X1+1=V1,W1+1=V] 

### Cost equations --> "Loop" of cons1/3 
* CEs [71] --> Loop 53 
* CEs [72] --> Loop 54 
* CEs [73] --> Loop 55 
* CEs [70] --> Loop 56 

#### Loops of cons1/3 
* Loop 53: cons1(V,V1,Out)->  cons1(V,V1',Out')
                  [V1>=1,V>=0,Out=Out'+1,V1=V1'+1] 
* Loop 54: cons1(V,V1,Out)->  cons1(V',V1,Out')
                  [V1>=0,V>=1,Out=Out'+1,V=V'+1] 
* Loop 55: cons1(V,V1,Out)->  cons1(V',V1',Out')
                  [V1>=1,V>=1,Out=Out'+1,V1=V1'+1,V=V'+1] 
* Loop 56: cons1(V,V1,Out) [V1>=0,V>=0,Out=0] 

### Ranking functions of CR cons1(V,V1,Out) 
* RF of phase [53,54,55]: [V+V1]

#### Partial ranking functions of CR cons1(V,V1,Out) 
* Partial RF of phase [53,54,55]:
  - RF of loop [53:1,55:1]:
    V1
  - RF of loop [54:1,55:1]:
    V


### Resulting Chains:cons1(V,V1,Out) 
* [[53,54,55],56]
* [56]


### Merging Chains  cons1/3 into  External patterns of execution 
* [[56]] --> 1 
* [[56,[53,54,55]]] --> 2 


### Specialization of cost equations fcons/3 
* CE 50 is refined into CE [74] 
* CE 47 is refined into CE [75] 
* CE 49 is refined into CE [76] 
* CE 48 is refined into CE [77] 


#### Refined cost equations fcons/3 
* CE 74: fcons(V,V1,Out) = 0
     [V1>=0,V>=0,Out=0] 
* CE 75: fcons(V,V1,Out) = 1+ fcons(V,W1,X1)
     [W1>=0,V>=0,X1+1=Out,W1+1=V1] 
* CE 76: fcons(V,V1,Out) = 1+ fcons(W1,V1,X1)
     [W1>=0,V1>=0,X1+1=Out,W1+1=V] 
* CE 77: fcons(V,V1,Out) = 1+ fcons(W1,X1,Y1)
     [X1>=0,W1>=0,Y1+1=Out,X1+1=V1,W1+1=V] 

### Cost equations --> "Loop" of fcons/3 
* CEs [75] --> Loop 57 
* CEs [76] --> Loop 58 
* CEs [77] --> Loop 59 
* CEs [74] --> Loop 60 

#### Loops of fcons/3 
* Loop 57: fcons(V,V1,Out)->  fcons(V,V1',Out')
                  [V1>=1,V>=0,Out=Out'+1,V1=V1'+1] 
* Loop 58: fcons(V,V1,Out)->  fcons(V',V1,Out')
                  [V1>=0,V>=1,Out=Out'+1,V=V'+1] 
* Loop 59: fcons(V,V1,Out)->  fcons(V',V1',Out')
                  [V1>=1,V>=1,Out=Out'+1,V1=V1'+1,V=V'+1] 
* Loop 60: fcons(V,V1,Out) [V1>=0,V>=0,Out=0] 

### Ranking functions of CR fcons(V,V1,Out) 
* RF of phase [57,58,59]: [V+V1]

#### Partial ranking functions of CR fcons(V,V1,Out) 
* Partial RF of phase [57,58,59]:
  - RF of loop [57:1,59:1]:
    V1
  - RF of loop [58:1,59:1]:
    V


### Resulting Chains:fcons(V,V1,Out) 
* [[57,58,59],60]
* [60]


### Merging Chains  fcons/3 into  External patterns of execution 
* [[60]] --> 1 
* [[60,[57,58,59]]] --> 2 


### Specialization of cost equations first/3 
* CE 35 is refined into CE [78] 
* CE 33 is refined into CE [79] 
* CE 34 is refined into CE [80] 
* CE 32 is refined into CE [81] 


#### Refined cost equations first/3 
* CE 78: first(V,V1,Out) = 0
     [V1>=0,V>=0,Out=0] 
* CE 79: first(V,V1,Out) = 1+ first(V,W1,X1)
     [W1>=0,V>=0,X1+1=Out,W1+1=V1] 
* CE 80: first(V,V1,Out) = 1+ first(W1,V1,X1)
     [W1>=0,V1>=0,X1+1=Out,W1+1=V] 
* CE 81: first(V,V1,Out) = 1+ first(W1,X1,Y1)
     [X1>=0,W1>=0,Y1+1=Out,X1+1=V1,W1+1=V] 

### Cost equations --> "Loop" of first/3 
* CEs [79] --> Loop 61 
* CEs [80] --> Loop 62 
* CEs [81] --> Loop 63 
* CEs [78] --> Loop 64 

#### Loops of first/3 
* Loop 61: first(V,V1,Out)->  first(V,V1',Out')
                  [V1>=1,V>=0,Out=Out'+1,V1=V1'+1] 
* Loop 62: first(V,V1,Out)->  first(V',V1,Out')
                  [V1>=0,V>=1,Out=Out'+1,V=V'+1] 
* Loop 63: first(V,V1,Out)->  first(V',V1',Out')
                  [V1>=1,V>=1,Out=Out'+1,V1=V1'+1,V=V'+1] 
* Loop 64: first(V,V1,Out) [V1>=0,V>=0,Out=0] 

### Ranking functions of CR first(V,V1,Out) 
* RF of phase [61,62,63]: [V+V1]

#### Partial ranking functions of CR first(V,V1,Out) 
* Partial RF of phase [61,62,63]:
  - RF of loop [61:1,63:1]:
    V1
  - RF of loop [62:1,63:1]:
    V


### Resulting Chains:first(V,V1,Out) 
* [[61,62,63],64]
* [64]


### Merging Chains  first/3 into  External patterns of execution 
* [[64]] --> 1 
* [[64,[61,62,63]]] --> 2 


### Specialization of cost equations first1/3 
* CE 41 is refined into CE [82] 
* CE 38 is refined into CE [83] 
* CE 40 is refined into CE [84] 
* CE 39 is refined into CE [85] 


#### Refined cost equations first1/3 
* CE 82: first1(V,V1,Out) = 0
     [V1>=0,V>=0,Out=0] 
* CE 83: first1(V,V1,Out) = 1+ first1(V,W1,X1)
     [W1>=0,V>=0,X1+1=Out,W1+1=V1] 
* CE 84: first1(V,V1,Out) = 1+ first1(W1,V1,X1)
     [W1>=0,V1>=0,X1+1=Out,W1+1=V] 
* CE 85: first1(V,V1,Out) = 1+ first1(W1,X1,Y1)
     [X1>=0,W1>=0,Y1+1=Out,X1+1=V1,W1+1=V] 

### Cost equations --> "Loop" of first1/3 
* CEs [83] --> Loop 65 
* CEs [84] --> Loop 66 
* CEs [85] --> Loop 67 
* CEs [82] --> Loop 68 

#### Loops of first1/3 
* Loop 65: first1(V,V1,Out)->  first1(V,V1',Out')
                  [V1>=1,V>=0,Out=Out'+1,V1=V1'+1] 
* Loop 66: first1(V,V1,Out)->  first1(V',V1,Out')
                  [V1>=0,V>=1,Out=Out'+1,V=V'+1] 
* Loop 67: first1(V,V1,Out)->  first1(V',V1',Out')
                  [V1>=1,V>=1,Out=Out'+1,V1=V1'+1,V=V'+1] 
* Loop 68: first1(V,V1,Out) [V1>=0,V>=0,Out=0] 

### Ranking functions of CR first1(V,V1,Out) 
* RF of phase [65,66,67]: [V+V1]

#### Partial ranking functions of CR first1(V,V1,Out) 
* Partial RF of phase [65,66,67]:
  - RF of loop [65:1,67:1]:
    V1
  - RF of loop [66:1,67:1]:
    V


### Resulting Chains:first1(V,V1,Out) 
* [[65,66,67],68]
* [68]


### Merging Chains  first1/3 into  External patterns of execution 
* [[68]] --> 1 
* [[68,[65,66,67]]] --> 2 


### Specialization of cost equations from/2 
* CE 22 is refined into CE [86] 
* CE 21 is refined into CE [87] 


#### Refined cost equations from/2 
* CE 86: from(V,Out) = 0
     [V>=0,Out=0] 
* CE 87: from(V,Out) = 1+ from(W,X)
     [W>=0,X+1=Out,W+1=V] 

### Cost equations --> "Loop" of from/2 
* CEs [87] --> Loop 69 
* CEs [86] --> Loop 70 

#### Loops of from/2 
* Loop 69: from(V,Out)->  from(V',Out')
                  [V'>=0,Out=Out'+1,V'+1=V] 
* Loop 70: from(V,Out) [V>=0,Out=0] 

### Ranking functions of CR from(V,Out) 
* RF of phase [69]: [V]

#### Partial ranking functions of CR from(V,Out) 
* Partial RF of phase [69]:
  - RF of loop [69:1]:
    V


### Resulting Chains:from(V,Out) 
* [[69],70]
* [70]


### Merging Chains  from/2 into  External patterns of execution 
* [[70]] --> 1 
* [[70,[69]]] --> 2 


### Specialization of cost equations proper/2 
* CE 46 is refined into CE [88] 
* CE 44 is refined into CE [89] 
* CE 43 is refined into CE [90] 
* CE 42 is refined into CE [91] 
* CE 45 is refined into CE [92] 


#### Refined cost equations proper/2 
* CE 88: proper(V,Out) = 0
     [V>=0,Out=0] 
* CE 89: proper(V,Out) = 1
     [Out=4,V=3] 
* CE 90: proper(V,Out) = 1
     [Out=3,V=2] 
* CE 91: proper(V,Out) = 1
     [Out=2,V=1] 
* CE 92: proper(V,Out) = 1
     [Out=1,V=0] 

### Cost equations --> "Loop" of proper/2 
* CEs [88] --> Loop 71 
* CEs [89] --> Loop 72 
* CEs [90] --> Loop 73 
* CEs [91] --> Loop 74 
* CEs [92] --> Loop 75 

#### Loops of proper/2 
* Loop 71: proper(V,Out) [V>=0,Out=0] 
* Loop 72: proper(V,Out) [Out=4,V=3] 
* Loop 73: proper(V,Out) [Out=3,V=2] 
* Loop 74: proper(V,Out) [Out=2,V=1] 
* Loop 75: proper(V,Out) [Out=1,V=0] 

### Ranking functions of CR proper(V,Out) 

#### Partial ranking functions of CR proper(V,Out) 


### Resulting Chains:proper(V,Out) 
* [75]
* [74]
* [73]
* [72]
* [71]


### Merging Chains  proper/2 into  External patterns of execution 
* [[75]] --> 1 
* [[74]] --> 2 
* [[73]] --> 3 
* [[72]] --> 4 
* [[71]] --> 5 


### Specialization of cost equations quote/2 
* CE 62 is refined into CE [93] 
* CE 61 is refined into CE [94] 


#### Refined cost equations quote/2 
* CE 93: quote(V,Out) = 0
     [V>=0,Out=0] 
* CE 94: quote(V,Out) = 1+ quote(W,X)
     [W>=0,X+1=Out,W+1=V] 

### Cost equations --> "Loop" of quote/2 
* CEs [94] --> Loop 76 
* CEs [93] --> Loop 77 

#### Loops of quote/2 
* Loop 76: quote(V,Out)->  quote(V',Out')
                  [V'>=0,Out=Out'+1,V'+1=V] 
* Loop 77: quote(V,Out) [V>=0,Out=0] 

### Ranking functions of CR quote(V,Out) 
* RF of phase [76]: [V]

#### Partial ranking functions of CR quote(V,Out) 
* Partial RF of phase [76]:
  - RF of loop [76:1]:
    V


### Resulting Chains:quote(V,Out) 
* [[76],77]
* [77]


### Merging Chains  quote/2 into  External patterns of execution 
* [[77]] --> 1 
* [[77,[76]]] --> 2 


### Specialization of cost equations quote1/2 
* CE 60 is refined into CE [95] 
* CE 59 is refined into CE [96] 


#### Refined cost equations quote1/2 
* CE 95: quote1(V,Out) = 0
     [V>=0,Out=0] 
* CE 96: quote1(V,Out) = 1+ quote1(W,X)
     [W>=0,X+1=Out,W+1=V] 

### Cost equations --> "Loop" of quote1/2 
* CEs [96] --> Loop 78 
* CEs [95] --> Loop 79 

#### Loops of quote1/2 
* Loop 78: quote1(V,Out)->  quote1(V',Out')
                  [V'>=0,Out=Out'+1,V'+1=V] 
* Loop 79: quote1(V,Out) [V>=0,Out=0] 

### Ranking functions of CR quote1(V,Out) 
* RF of phase [78]: [V]

#### Partial ranking functions of CR quote1(V,Out) 
* Partial RF of phase [78]:
  - RF of loop [78:1]:
    V


### Resulting Chains:quote1(V,Out) 
* [[78],79]
* [79]


### Merging Chains  quote1/2 into  External patterns of execution 
* [[79]] --> 1 
* [[79,[78]]] --> 2 


### Specialization of cost equations s/2 
* CE 66 is refined into CE [97] 
* CE 65 is refined into CE [98] 


#### Refined cost equations s/2 
* CE 97: s(V,Out) = 0
     [V>=0,Out=0] 
* CE 98: s(V,Out) = 1+ s(W,X)
     [W>=0,X+1=Out,W+1=V] 

### Cost equations --> "Loop" of s/2 
* CEs [98] --> Loop 80 
* CEs [97] --> Loop 81 

#### Loops of s/2 
* Loop 80: s(V,Out)->  s(V',Out')
                  [V'>=0,Out=Out'+1,V'+1=V] 
* Loop 81: s(V,Out) [V>=0,Out=0] 

### Ranking functions of CR s(V,Out) 
* RF of phase [80]: [V]

#### Partial ranking functions of CR s(V,Out) 
* Partial RF of phase [80]:
  - RF of loop [80:1]:
    V


### Resulting Chains:s(V,Out) 
* [[80],81]
* [81]


### Merging Chains  s/2 into  External patterns of execution 
* [[81]] --> 1 
* [[81,[80]]] --> 2 


### Specialization of cost equations s1/2 
* CE 64 is refined into CE [99] 
* CE 63 is refined into CE [100] 


#### Refined cost equations s1/2 
* CE 99: s1(V,Out) = 0
     [V>=0,Out=0] 
* CE 100: s1(V,Out) = 1+ s1(W,X)
     [W>=0,X+1=Out,W+1=V] 

### Cost equations --> "Loop" of s1/2 
* CEs [100] --> Loop 82 
* CEs [99] --> Loop 83 

#### Loops of s1/2 
* Loop 82: s1(V,Out)->  s1(V',Out')
                  [V'>=0,Out=Out'+1,V'+1=V] 
* Loop 83: s1(V,Out) [V>=0,Out=0] 

### Ranking functions of CR s1(V,Out) 
* RF of phase [82]: [V]

#### Partial ranking functions of CR s1(V,Out) 
* Partial RF of phase [82]:
  - RF of loop [82:1]:
    V


### Resulting Chains:s1(V,Out) 
* [[82],83]
* [83]


### Merging Chains  s1/2 into  External patterns of execution 
* [[83]] --> 1 
* [[83,[82]]] --> 2 


### Specialization of cost equations sel/3 
* CE 54 is refined into CE [101] 
* CE 52 is refined into CE [102] 
* CE 53 is refined into CE [103] 
* CE 51 is refined into CE [104] 


#### Refined cost equations sel/3 
* CE 101: sel(V,V1,Out) = 0
     [V1>=0,V>=0,Out=0] 
* CE 102: sel(V,V1,Out) = 1+ sel(V,W1,X1)
     [W1>=0,V>=0,X1+1=Out,W1+1=V1] 
* CE 103: sel(V,V1,Out) = 1+ sel(W1,V1,X1)
     [W1>=0,V1>=0,X1+1=Out,W1+1=V] 
* CE 104: sel(V,V1,Out) = 1+ sel(W1,X1,Y1)
     [X1>=0,W1>=0,Y1+1=Out,X1+1=V1,W1+1=V] 

### Cost equations --> "Loop" of sel/3 
* CEs [102] --> Loop 84 
* CEs [103] --> Loop 85 
* CEs [104] --> Loop 86 
* CEs [101] --> Loop 87 

#### Loops of sel/3 
* Loop 84: sel(V,V1,Out)->  sel(V,V1',Out')
                  [V1>=1,V>=0,Out=Out'+1,V1=V1'+1] 
* Loop 85: sel(V,V1,Out)->  sel(V',V1,Out')
                  [V1>=0,V>=1,Out=Out'+1,V=V'+1] 
* Loop 86: sel(V,V1,Out)->  sel(V',V1',Out')
                  [V1>=1,V>=1,Out=Out'+1,V1=V1'+1,V=V'+1] 
* Loop 87: sel(V,V1,Out) [V1>=0,V>=0,Out=0] 

### Ranking functions of CR sel(V,V1,Out) 
* RF of phase [84,85,86]: [V+V1]

#### Partial ranking functions of CR sel(V,V1,Out) 
* Partial RF of phase [84,85,86]:
  - RF of loop [84:1,86:1]:
    V1
  - RF of loop [85:1,86:1]:
    V


### Resulting Chains:sel(V,V1,Out) 
* [[84,85,86],87]
* [87]


### Merging Chains  sel/3 into  External patterns of execution 
* [[87]] --> 1 
* [[87,[84,85,86]]] --> 2 


### Specialization of cost equations sel1/3 
* CE 28 is refined into CE [105] 
* CE 26 is refined into CE [106] 
* CE 25 is refined into CE [107] 
* CE 27 is refined into CE [108] 


#### Refined cost equations sel1/3 
* CE 105: sel1(V,V1,Out) = 0
     [V1>=0,V>=0,Out=0] 
* CE 106: sel1(V,V1,Out) = 1+ sel1(V,W1,X1)
     [W1>=0,V>=0,X1+1=Out,W1+1=V1] 
* CE 107: sel1(V,V1,Out) = 1+ sel1(W1,V1,X1)
     [W1>=0,V1>=0,X1+1=Out,W1+1=V] 
* CE 108: sel1(V,V1,Out) = 1+ sel1(W1,X1,Y1)
     [X1>=0,W1>=0,Y1+1=Out,X1+1=V1,W1+1=V] 

### Cost equations --> "Loop" of sel1/3 
* CEs [106] --> Loop 88 
* CEs [107] --> Loop 89 
* CEs [108] --> Loop 90 
* CEs [105] --> Loop 91 

#### Loops of sel1/3 
* Loop 88: sel1(V,V1,Out)->  sel1(V,V1',Out')
                  [V1>=1,V>=0,Out=Out'+1,V1=V1'+1] 
* Loop 89: sel1(V,V1,Out)->  sel1(V',V1,Out')
                  [V1>=0,V>=1,Out=Out'+1,V=V'+1] 
* Loop 90: sel1(V,V1,Out)->  sel1(V',V1',Out')
                  [V1>=1,V>=1,Out=Out'+1,V1=V1'+1,V=V'+1] 
* Loop 91: sel1(V,V1,Out) [V1>=0,V>=0,Out=0] 

### Ranking functions of CR sel1(V,V1,Out) 
* RF of phase [88,89,90]: [V+V1]

#### Partial ranking functions of CR sel1(V,V1,Out) 
* Partial RF of phase [88,89,90]:
  - RF of loop [88:1,90:1]:
    V1
  - RF of loop [89:1,90:1]:
    V


### Resulting Chains:sel1(V,V1,Out) 
* [[88,89,90],91]
* [91]


### Merging Chains  sel1/3 into  External patterns of execution 
* [[91]] --> 1 
* [[91,[88,89,90]]] --> 2 


### Specialization of cost equations top/2 
* CE 20 is refined into CE [109] 
* CE 18 is refined into CE [110] 
* CE 19 is refined into CE [111,112,113,114,115] 


#### Refined cost equations top/2 
* CE 109: top(V,Out) = 0
     [V>=0,Out=0] 
* CE 110: top(V,Out) = 1+ top(V,Out)
     [V>=1] 
* CE 111: top(V,Out) = 1+ proper(W,X):1+ top(Y,Out)
     [Y=1,X=1,W=0,V=1] 
* CE 112: top(V,Out) = 1+ proper(W,X):2+ top(Y,Out)
     [Y=2,X=2,W=1,V=2] 
* CE 113: top(V,Out) = 1+ proper(W,X):3+ top(Y,Out)
     [Y=3,X=3,W=2,V=3] 
* CE 114: top(V,Out) = 1+ proper(W,X):4+ top(Y,Out)
     [Y=4,X=4,W=3,V=4] 
* CE 115: top(V,Out) = 1+ proper(W,X):5+ top(Y,Out)
     [W>=0,W+1=V,Y=0,X=0] 

### Cost equations --> "Loop" of top/2 
* CEs [115] --> Loop 92 
* CEs [114] --> Loop 93 
* CEs [113] --> Loop 94 
* CEs [112] --> Loop 95 
* CEs [110,111] --> Loop 96 
* CEs [109] --> Loop 97 

#### Loops of top/2 
* Loop 92: top(V,Out)->  top(V',Out)
                  [V>=1,V'=0] 
* Loop 93: top(V,Out)->  top(V',Out)
                  [V'=4,V=4] 
* Loop 94: top(V,Out)->  top(V',Out)
                  [V'=3,V=3] 
* Loop 95: top(V,Out)->  top(V',Out)
                  [V'=2,V=2] 
* Loop 96: top(V,Out)->  top(V,Out)
                  [V>=1] 
* Loop 97: top(V,Out) [V>=0,Out=0] 

### Ranking functions of CR top(V,Out) 

#### Partial ranking functions of CR top(V,Out) 


### Resulting Chains:top(V,Out) 
* [[93,94,95,96]]...
* [[93,94,95,96],97]
* [[93,94,95,96],92,97]
* [97]
* [92,97]


### Merging Chains  top/2 into  External patterns of execution 
* [[97,92],[97],[97,92,[93,94,95,96]],[97,[93,94,95,96]]] --> 1 
* [[[93,94,95,96]]] --> 2 


### Specialization of cost equations unquote/2 
* CE 37 is refined into CE [116] 
* CE 36 is refined into CE [117] 


#### Refined cost equations unquote/2 
* CE 116: unquote(V,Out) = 0
     [V>=0,Out=0] 
* CE 117: unquote(V,Out) = 1+ unquote(W,X)
     [W>=0,X+1=Out,W+1=V] 

### Cost equations --> "Loop" of unquote/2 
* CEs [117] --> Loop 98 
* CEs [116] --> Loop 99 

#### Loops of unquote/2 
* Loop 98: unquote(V,Out)->  unquote(V',Out')
                  [V'>=0,Out=Out'+1,V'+1=V] 
* Loop 99: unquote(V,Out) [V>=0,Out=0] 

### Ranking functions of CR unquote(V,Out) 
* RF of phase [98]: [V]

#### Partial ranking functions of CR unquote(V,Out) 
* Partial RF of phase [98]:
  - RF of loop [98:1]:
    V


### Resulting Chains:unquote(V,Out) 
* [[98],99]
* [99]


### Merging Chains  unquote/2 into  External patterns of execution 
* [[99]] --> 1 
* [[99,[98]]] --> 2 


### Specialization of cost equations unquote1/2 
* CE 24 is refined into CE [118] 
* CE 23 is refined into CE [119] 


#### Refined cost equations unquote1/2 
* CE 118: unquote1(V,Out) = 0
     [V>=0,Out=0] 
* CE 119: unquote1(V,Out) = 1+ unquote1(W,X)
     [W>=0,X+1=Out,W+1=V] 

### Cost equations --> "Loop" of unquote1/2 
* CEs [119] --> Loop 100 
* CEs [118] --> Loop 101 

#### Loops of unquote1/2 
* Loop 100: unquote1(V,Out)->  unquote1(V',Out')
                  [V'>=0,Out=Out'+1,V'+1=V] 
* Loop 101: unquote1(V,Out) [V>=0,Out=0] 

### Ranking functions of CR unquote1(V,Out) 
* RF of phase [100]: [V]

#### Partial ranking functions of CR unquote1(V,Out) 
* Partial RF of phase [100]:
  - RF of loop [100:1]:
    V


### Resulting Chains:unquote1(V,Out) 
* [[100],101]
* [101]


### Merging Chains  unquote1/2 into  External patterns of execution 
* [[101]] --> 1 
* [[101,[100]]] --> 2 


### Specialization of cost equations start/2 
* CE 2 is refined into CE [120,121] 
* CE 3 is refined into CE [122,123] 
* CE 4 is refined into CE [124,125] 
* CE 5 is refined into CE [126,127] 
* CE 6 is refined into CE [128,129] 
* CE 7 is refined into CE [130,131] 
* CE 8 is refined into CE [132,133] 
* CE 9 is refined into CE [134,135] 
* CE 10 is refined into CE [136,137,138,139,140] 
* CE 11 is refined into CE [141,142] 
* CE 12 is refined into CE [143,144] 
* CE 13 is refined into CE [145,146] 
* CE 14 is refined into CE [147,148] 
* CE 15 is refined into CE [149,150] 
* CE 16 is refined into CE [151,152] 
* CE 17 is refined into CE [153,154] 


#### Refined cost equations start/2 
* CE 120: start(V,V1) = 0+ top(V,W1):1
     [V>=0,W1=0] 
* CE 121: start(V,V1) = 0+ top(V,W1):2
     [V>=1] 
* CE 122: start(V,V1) = 0+ from(V,W1):1
     [V>=0,W1=0] 
* CE 123: start(V,V1) = 0+ from(V,W1):2
     [V>=W1,W1>=1] 
* CE 124: start(V,V1) = 0+ unquote1(V,W1):1
     [V>=0,W1=0] 
* CE 125: start(V,V1) = 0+ unquote1(V,W1):2
     [V>=W1,W1>=1] 
* CE 126: start(V,V1) = 0+ sel1(V,V1,W1):1
     [V1>=0,V>=0,W1=0] 
* CE 127: start(V,V1) = 0+ sel1(V,V1,W1):2
     [V+V1>=W1,W1>=1,V1>=0,V>=0] 
* CE 128: start(V,V1) = 0+ cons(V,V1,W1):1
     [V1>=0,V>=0,W1=0] 
* CE 129: start(V,V1) = 0+ cons(V,V1,W1):2
     [V>=W1,W1>=1,V1>=0] 
* CE 130: start(V,V1) = 0+ first(V,V1,W1):1
     [V1>=0,V>=0,W1=0] 
* CE 131: start(V,V1) = 0+ first(V,V1,W1):2
     [V+V1>=W1,W1>=1,V1>=0,V>=0] 
* CE 132: start(V,V1) = 0+ unquote(V,W1):1
     [V>=0,W1=0] 
* CE 133: start(V,V1) = 0+ unquote(V,W1):2
     [V>=W1,W1>=1] 
* CE 134: start(V,V1) = 0+ first1(V,V1,W1):1
     [V1>=0,V>=0,W1=0] 
* CE 135: start(V,V1) = 0+ first1(V,V1,W1):2
     [V+V1>=W1,W1>=1,V1>=0,V>=0] 
* CE 136: start(V,V1) = 0+ proper(W1,X1):1
     [X1=1,W1=0,V=0] 
* CE 137: start(V,V1) = 0+ proper(W1,X1):2
     [X1=2,W1=1,V=1] 
* CE 138: start(V,V1) = 0+ proper(W1,X1):3
     [X1=3,W1=2,V=2] 
* CE 139: start(V,V1) = 0+ proper(W1,X1):4
     [X1=4,W1=3,V=3] 
* CE 140: start(V,V1) = 0+ proper(V,W1):5
     [V>=0,W1=0] 
* CE 141: start(V,V1) = 0+ fcons(V,V1,W1):1
     [V1>=0,V>=0,W1=0] 
* CE 142: start(V,V1) = 0+ fcons(V,V1,W1):2
     [V+V1>=W1,W1>=1,V1>=0,V>=0] 
* CE 143: start(V,V1) = 0+ sel(V,V1,W1):1
     [V1>=0,V>=0,W1=0] 
* CE 144: start(V,V1) = 0+ sel(V,V1,W1):2
     [V+V1>=W1,W1>=1,V1>=0,V>=0] 
* CE 145: start(V,V1) = 0+ cons1(V,V1,W1):1
     [V1>=0,V>=0,W1=0] 
* CE 146: start(V,V1) = 0+ cons1(V,V1,W1):2
     [V+V1>=W1,W1>=1,V1>=0,V>=0] 
* CE 147: start(V,V1) = 0+ quote1(V,W1):1
     [V>=0,W1=0] 
* CE 148: start(V,V1) = 0+ quote1(V,W1):2
     [V>=W1,W1>=1] 
* CE 149: start(V,V1) = 0+ quote(V,W1):1
     [V>=0,W1=0] 
* CE 150: start(V,V1) = 0+ quote(V,W1):2
     [V>=W1,W1>=1] 
* CE 151: start(V,V1) = 0+ s1(V,W1):1
     [V>=0,W1=0] 
* CE 152: start(V,V1) = 0+ s1(V,W1):2
     [V>=W1,W1>=1] 
* CE 153: start(V,V1) = 0+ s(V,W1):1
     [V>=0,W1=0] 
* CE 154: start(V,V1) = 0+ s(V,W1):2
     [V>=W1,W1>=1] 

### Cost equations --> "Loop" of start/2 
* CEs [139] --> Loop 102 
* CEs [138] --> Loop 103 
* CEs [137] --> Loop 104 
* CEs [120,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154] --> Loop 105 
* CEs [121] --> Loop 106 

#### Loops of start/2 
* Loop 102: start(V,V1) [V=3] 
* Loop 103: start(V,V1) [V=2] 
* Loop 104: start(V,V1) [V=1] 
* Loop 105: start(V,V1) [V>=0] 
* Loop 106: start(V,V1) [V>=1] 

### Ranking functions of CR start(V,V1) 

#### Partial ranking functions of CR start(V,V1) 


### Resulting Chains:start(V,V1) 
* [106]...
* [105]
* [104]
* [103]
* [102]


### Merging Chains  start/2 into  External patterns of execution 
* [[104],[105]] --> 1 
* [[103]] --> 2 
* [[102]] --> 3 
* [[106]] --> 4 


Computing Bounds
=====================================

#### Cost of loops [50,51] 

 * loop 50:cons(V,V1,Out) -> [cons(V',V1',Out')] 
1
 * loop 51:cons(V,V1,Out) -> [cons(V',V1',Out')] 
1
#### Cost of phase [50,51]:cons(V,V1,Out) -> [cons(V',V1',Out')] 
1*it(50)+1*it(51)+0
  Such that:it(51) =< V1
it(51) =< V1-V1'
aux(1) =< V
aux(2) =< V-V'
it(50) =< aux(1)
it(51) =< aux(1)
it(50) =< aux(2)
it(51) =< aux(2)

#### Cost of chains of cons(V,V1,Out):
* Chain [[50,51],52]: 1*it(50)+1*it(51)+0
  Such that:aux(1) =< V
it(51) =< V1
aux(2) =< Out
it(50) =< aux(1)
it(51) =< aux(1)
it(50) =< aux(2)
it(51) =< aux(2)

  with precondition: [V1>=0,Out>=1,V>=Out] 

* Chain [52]: 0
  with precondition: [Out=0,V>=0,V1>=0] 


#### Cost of loops [53,54,55] 

 * loop 53:cons1(V,V1,Out) -> [cons1(V',V1',Out')] 
1
 * loop 54:cons1(V,V1,Out) -> [cons1(V',V1',Out')] 
1
 * loop 55:cons1(V,V1,Out) -> [cons1(V',V1',Out')] 
1
#### Cost of phase [53,54,55]:cons1(V,V1,Out) -> [cons1(V',V1',Out')] 
1*it(53)+1*it(54)+1*it(55)+0
  Such that:aux(3) =< V
aux(4) =< V+V1
aux(5) =< V+V1-V'-V1'
aux(6) =< V-V'
aux(7) =< V1
aux(8) =< V1-V1'
it(54) =< aux(3)
it(55) =< aux(3)
it(53) =< aux(4)
it(54) =< aux(4)
it(55) =< aux(4)
it(53) =< aux(5)
it(54) =< aux(5)
it(55) =< aux(5)
it(54) =< aux(6)
it(55) =< aux(6)
it(53) =< aux(7)
it(55) =< aux(7)
it(53) =< aux(8)
it(55) =< aux(8)

#### Cost of chains of cons1(V,V1,Out):
* Chain [[53,54,55],56]: 1*it(53)+1*it(54)+1*it(55)+0
  Such that:aux(9) =< V
aux(10) =< V+V1
aux(11) =< V1
it(54) =< aux(9)
it(55) =< aux(9)
it(53) =< aux(10)
it(54) =< aux(10)
it(55) =< aux(10)
it(53) =< aux(11)
it(55) =< aux(11)

  with precondition: [V>=0,V1>=0,Out>=1,V+V1>=Out] 

* Chain [56]: 0
  with precondition: [Out=0,V>=0,V1>=0] 


#### Cost of loops [57,58,59] 

 * loop 57:fcons(V,V1,Out) -> [fcons(V',V1',Out')] 
1
 * loop 58:fcons(V,V1,Out) -> [fcons(V',V1',Out')] 
1
 * loop 59:fcons(V,V1,Out) -> [fcons(V',V1',Out')] 
1
#### Cost of phase [57,58,59]:fcons(V,V1,Out) -> [fcons(V',V1',Out')] 
1*it(57)+1*it(58)+1*it(59)+0
  Such that:aux(12) =< V
aux(13) =< V+V1
aux(14) =< V+V1-V'-V1'
aux(15) =< V-V'
aux(16) =< V1
aux(17) =< V1-V1'
it(58) =< aux(12)
it(59) =< aux(12)
it(57) =< aux(13)
it(58) =< aux(13)
it(59) =< aux(13)
it(57) =< aux(14)
it(58) =< aux(14)
it(59) =< aux(14)
it(58) =< aux(15)
it(59) =< aux(15)
it(57) =< aux(16)
it(59) =< aux(16)
it(57) =< aux(17)
it(59) =< aux(17)

#### Cost of chains of fcons(V,V1,Out):
* Chain [[57,58,59],60]: 1*it(57)+1*it(58)+1*it(59)+0
  Such that:aux(18) =< V
aux(19) =< V+V1
aux(20) =< V1
it(58) =< aux(18)
it(59) =< aux(18)
it(57) =< aux(19)
it(58) =< aux(19)
it(59) =< aux(19)
it(57) =< aux(20)
it(59) =< aux(20)

  with precondition: [V>=0,V1>=0,Out>=1,V+V1>=Out] 

* Chain [60]: 0
  with precondition: [Out=0,V>=0,V1>=0] 


#### Cost of loops [61,62,63] 

 * loop 61:first(V,V1,Out) -> [first(V',V1',Out')] 
1
 * loop 62:first(V,V1,Out) -> [first(V',V1',Out')] 
1
 * loop 63:first(V,V1,Out) -> [first(V',V1',Out')] 
1
#### Cost of phase [61,62,63]:first(V,V1,Out) -> [first(V',V1',Out')] 
1*it(61)+1*it(62)+1*it(63)+0
  Such that:aux(21) =< V
aux(22) =< V+V1
aux(23) =< V+V1-V'-V1'
aux(24) =< V-V'
aux(25) =< V1
aux(26) =< V1-V1'
it(62) =< aux(21)
it(63) =< aux(21)
it(61) =< aux(22)
it(62) =< aux(22)
it(63) =< aux(22)
it(61) =< aux(23)
it(62) =< aux(23)
it(63) =< aux(23)
it(62) =< aux(24)
it(63) =< aux(24)
it(61) =< aux(25)
it(63) =< aux(25)
it(61) =< aux(26)
it(63) =< aux(26)

#### Cost of chains of first(V,V1,Out):
* Chain [[61,62,63],64]: 1*it(61)+1*it(62)+1*it(63)+0
  Such that:aux(27) =< V
aux(28) =< V+V1
aux(29) =< V1
it(62) =< aux(27)
it(63) =< aux(27)
it(61) =< aux(28)
it(62) =< aux(28)
it(63) =< aux(28)
it(61) =< aux(29)
it(63) =< aux(29)

  with precondition: [V>=0,V1>=0,Out>=1,V+V1>=Out] 

* Chain [64]: 0
  with precondition: [Out=0,V>=0,V1>=0] 


#### Cost of loops [65,66,67] 

 * loop 65:first1(V,V1,Out) -> [first1(V',V1',Out')] 
1
 * loop 66:first1(V,V1,Out) -> [first1(V',V1',Out')] 
1
 * loop 67:first1(V,V1,Out) -> [first1(V',V1',Out')] 
1
#### Cost of phase [65,66,67]:first1(V,V1,Out) -> [first1(V',V1',Out')] 
1*it(65)+1*it(66)+1*it(67)+0
  Such that:aux(30) =< V
aux(31) =< V+V1
aux(32) =< V+V1-V'-V1'
aux(33) =< V-V'
aux(34) =< V1
aux(35) =< V1-V1'
it(66) =< aux(30)
it(67) =< aux(30)
it(65) =< aux(31)
it(66) =< aux(31)
it(67) =< aux(31)
it(65) =< aux(32)
it(66) =< aux(32)
it(67) =< aux(32)
it(66) =< aux(33)
it(67) =< aux(33)
it(65) =< aux(34)
it(67) =< aux(34)
it(65) =< aux(35)
it(67) =< aux(35)

#### Cost of chains of first1(V,V1,Out):
* Chain [[65,66,67],68]: 1*it(65)+1*it(66)+1*it(67)+0
  Such that:aux(36) =< V
aux(37) =< V+V1
aux(38) =< V1
it(66) =< aux(36)
it(67) =< aux(36)
it(65) =< aux(37)
it(66) =< aux(37)
it(67) =< aux(37)
it(65) =< aux(38)
it(67) =< aux(38)

  with precondition: [V>=0,V1>=0,Out>=1,V+V1>=Out] 

* Chain [68]: 0
  with precondition: [Out=0,V>=0,V1>=0] 


#### Cost of loops [69] 

 * loop 69:from(V,Out) -> [from(V',Out')] 
1
#### Cost of phase [69]:from(V,Out) -> [from(V',Out')] 
1*it(69)+0
  Such that:it(69) =< V
it(69) =< V-V'

#### Cost of chains of from(V,Out):
* Chain [[69],70]: 1*it(69)+0
  Such that:it(69) =< Out

  with precondition: [Out>=1,V>=Out] 

* Chain [70]: 0
  with precondition: [Out=0,V>=0] 


#### Cost of chains of proper(V,Out):
* Chain [75]: 1
  with precondition: [V=0,Out=1] 

* Chain [74]: 1
  with precondition: [V=1,Out=2] 

* Chain [73]: 1
  with precondition: [V=2,Out=3] 

* Chain [72]: 1
  with precondition: [V=3,Out=4] 

* Chain [71]: 0
  with precondition: [Out=0,V>=0] 


#### Cost of loops [76] 

 * loop 76:quote(V,Out) -> [quote(V',Out')] 
1
#### Cost of phase [76]:quote(V,Out) -> [quote(V',Out')] 
1*it(76)+0
  Such that:it(76) =< V
it(76) =< V-V'

#### Cost of chains of quote(V,Out):
* Chain [[76],77]: 1*it(76)+0
  Such that:it(76) =< Out

  with precondition: [Out>=1,V>=Out] 

* Chain [77]: 0
  with precondition: [Out=0,V>=0] 


#### Cost of loops [78] 

 * loop 78:quote1(V,Out) -> [quote1(V',Out')] 
1
#### Cost of phase [78]:quote1(V,Out) -> [quote1(V',Out')] 
1*it(78)+0
  Such that:it(78) =< V
it(78) =< V-V'

#### Cost of chains of quote1(V,Out):
* Chain [[78],79]: 1*it(78)+0
  Such that:it(78) =< Out

  with precondition: [Out>=1,V>=Out] 

* Chain [79]: 0
  with precondition: [Out=0,V>=0] 


#### Cost of loops [80] 

 * loop 80:s(V,Out) -> [s(V',Out')] 
1
#### Cost of phase [80]:s(V,Out) -> [s(V',Out')] 
1*it(80)+0
  Such that:it(80) =< V
it(80) =< V-V'

#### Cost of chains of s(V,Out):
* Chain [[80],81]: 1*it(80)+0
  Such that:it(80) =< Out

  with precondition: [Out>=1,V>=Out] 

* Chain [81]: 0
  with precondition: [Out=0,V>=0] 


#### Cost of loops [82] 

 * loop 82:s1(V,Out) -> [s1(V',Out')] 
1
#### Cost of phase [82]:s1(V,Out) -> [s1(V',Out')] 
1*it(82)+0
  Such that:it(82) =< V
it(82) =< V-V'

#### Cost of chains of s1(V,Out):
* Chain [[82],83]: 1*it(82)+0
  Such that:it(82) =< Out

  with precondition: [Out>=1,V>=Out] 

* Chain [83]: 0
  with precondition: [Out=0,V>=0] 


#### Cost of loops [84,85,86] 

 * loop 84:sel(V,V1,Out) -> [sel(V',V1',Out')] 
1
 * loop 85:sel(V,V1,Out) -> [sel(V',V1',Out')] 
1
 * loop 86:sel(V,V1,Out) -> [sel(V',V1',Out')] 
1
#### Cost of phase [84,85,86]:sel(V,V1,Out) -> [sel(V',V1',Out')] 
1*it(84)+1*it(85)+1*it(86)+0
  Such that:aux(39) =< V
aux(40) =< V+V1
aux(41) =< V+V1-V'-V1'
aux(42) =< V-V'
aux(43) =< V1
aux(44) =< V1-V1'
it(85) =< aux(39)
it(86) =< aux(39)
it(84) =< aux(40)
it(85) =< aux(40)
it(86) =< aux(40)
it(84) =< aux(41)
it(85) =< aux(41)
it(86) =< aux(41)
it(85) =< aux(42)
it(86) =< aux(42)
it(84) =< aux(43)
it(86) =< aux(43)
it(84) =< aux(44)
it(86) =< aux(44)

#### Cost of chains of sel(V,V1,Out):
* Chain [[84,85,86],87]: 1*it(84)+1*it(85)+1*it(86)+0
  Such that:aux(45) =< V
aux(46) =< V+V1
aux(47) =< V1
it(85) =< aux(45)
it(86) =< aux(45)
it(84) =< aux(46)
it(85) =< aux(46)
it(86) =< aux(46)
it(84) =< aux(47)
it(86) =< aux(47)

  with precondition: [V>=0,V1>=0,Out>=1,V+V1>=Out] 

* Chain [87]: 0
  with precondition: [Out=0,V>=0,V1>=0] 


#### Cost of loops [88,89,90] 

 * loop 88:sel1(V,V1,Out) -> [sel1(V',V1',Out')] 
1
 * loop 89:sel1(V,V1,Out) -> [sel1(V',V1',Out')] 
1
 * loop 90:sel1(V,V1,Out) -> [sel1(V',V1',Out')] 
1
#### Cost of phase [88,89,90]:sel1(V,V1,Out) -> [sel1(V',V1',Out')] 
1*it(88)+1*it(89)+1*it(90)+0
  Such that:aux(48) =< V
aux(49) =< V+V1
aux(50) =< V+V1-V'-V1'
aux(51) =< V-V'
aux(52) =< V1
aux(53) =< V1-V1'
it(89) =< aux(48)
it(90) =< aux(48)
it(88) =< aux(49)
it(89) =< aux(49)
it(90) =< aux(49)
it(88) =< aux(50)
it(89) =< aux(50)
it(90) =< aux(50)
it(89) =< aux(51)
it(90) =< aux(51)
it(88) =< aux(52)
it(90) =< aux(52)
it(88) =< aux(53)
it(90) =< aux(53)

#### Cost of chains of sel1(V,V1,Out):
* Chain [[88,89,90],91]: 1*it(88)+1*it(89)+1*it(90)+0
  Such that:aux(54) =< V
aux(55) =< V+V1
aux(56) =< V1
it(89) =< aux(54)
it(90) =< aux(54)
it(88) =< aux(55)
it(89) =< aux(55)
it(90) =< aux(55)
it(88) =< aux(56)
it(90) =< aux(56)

  with precondition: [V>=0,V1>=0,Out>=1,V+V1>=Out] 

* Chain [91]: 0
  with precondition: [Out=0,V>=0,V1>=0] 


#### Cost of loops [93,94,95,96] 

 * loop 93:top(V,Out) -> [top(V',Out')] 
2
 * loop 94:top(V,Out) -> [top(V',Out')] 
2
 * loop 95:top(V,Out) -> [top(V',Out')] 
2
 * loop 96:top(V,Out) -> [top(V',Out')] 
2
#### Cost of phase [93,94,95,96]:top(V,Out) -> [top(V',Out')] 
8*it(93)+0
#### Cost of phase [93,94,95,96]:top(V,Out) -> [top(V',Out')] 
8*it(93)+0
#### Cost of phase [93,94,95,96]:top(V,Out) -> [top(V',Out')] 
8*it(93)+0
#### Cost of chains of top(V,Out):
* Chain [[93,94,95,96]]...: 8*it(93)+0
  with precondition: [V>=1] 

* Chain [[93,94,95,96],97]: 8*it(93)+0
  with precondition: [Out=0,V>=1] 

* Chain [[93,94,95,96],92,97]: 8*it(93)+1
  with precondition: [Out=0,V>=1] 

* Chain [97]: 0
  with precondition: [Out=0,V>=0] 

* Chain [92,97]: 1
  with precondition: [Out=0,V>=1] 


#### Cost of loops [98] 

 * loop 98:unquote(V,Out) -> [unquote(V',Out')] 
1
#### Cost of phase [98]:unquote(V,Out) -> [unquote(V',Out')] 
1*it(98)+0
  Such that:it(98) =< V
it(98) =< V-V'

#### Cost of chains of unquote(V,Out):
* Chain [[98],99]: 1*it(98)+0
  Such that:it(98) =< Out

  with precondition: [Out>=1,V>=Out] 

* Chain [99]: 0
  with precondition: [Out=0,V>=0] 


#### Cost of loops [100] 

 * loop 100:unquote1(V,Out) -> [unquote1(V',Out')] 
1
#### Cost of phase [100]:unquote1(V,Out) -> [unquote1(V',Out')] 
1*it(100)+0
  Such that:it(100) =< V
it(100) =< V-V'

#### Cost of chains of unquote1(V,Out):
* Chain [[100],101]: 1*it(100)+0
  Such that:it(100) =< Out

  with precondition: [Out>=1,V>=Out] 

* Chain [101]: 0
  with precondition: [Out=0,V>=0] 


#### Cost of chains of start(V,V1):
* Chain [106]...: 8*s(3)+0
  with precondition: [V>=1] 

* Chain [105]: 1*s(4)+8*s(5)+6*s(10)+6*s(11)+6*s(12)+1*s(14)+1
  Such that:aux(59) =< V
aux(60) =< V+V1
aux(61) =< V1
s(5) =< aux(59)
s(14) =< aux(61)
s(10) =< aux(59)
s(11) =< aux(59)
s(12) =< aux(60)
s(10) =< aux(60)
s(11) =< aux(60)
s(12) =< aux(61)
s(11) =< aux(61)
s(14) =< aux(59)

  with precondition: [V>=0] 

* Chain [104]: 1
  with precondition: [V=1] 

* Chain [103]: 1
  with precondition: [V=2] 

* Chain [102]: 1
  with precondition: [V=3] 


Closed-form bounds of start(V,V1): 
-------------------------------------
* Chain [106]... with precondition: [V>=1] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [105] with precondition: [V>=0] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [104] with precondition: [V=1] 
    - Upper bound: 1 
    - Complexity: constant 
* Chain [103] with precondition: [V=2] 
    - Upper bound: 1 
    - Complexity: constant 
* Chain [102] with precondition: [V=3] 
    - Upper bound: 1 
    - Complexity: constant 

### Maximum cost of start(V,V1): inf 
Asymptotic class: infinity 

Time statistics: 
-------------------------------------
* Partial evaluation computed in 38 ms.
* Invariants computed in 112 ms.
   - Backward Invariants 44 ms.
   - Transitive Invariants 33 ms.
* Refinement performed in 182 ms.
* Termination proved in 32 ms.
* Upper bounds computed in 195 ms.
   - Equation cost structures 62 ms.
   - Phase cost structures 88 ms.
   - Chain cost structures 61 ms.
   - Solving cost expressions 1 ms.
* Total analysis performed in 638 ms.


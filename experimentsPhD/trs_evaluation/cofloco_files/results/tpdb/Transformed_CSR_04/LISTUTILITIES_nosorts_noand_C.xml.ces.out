
Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. recursive  : [afterNth/3]
1. recursive  : [cons/3]
2. recursive  : [fst/2]
3. recursive  : [fun/5]
4. recursive  : [fun1/4]
5. recursive  : [fun10/5]
6. recursive  : [fun11/3]
7. recursive  : [fun12/3]
8. recursive  : [fun13/3]
9. recursive  : [fun14/3]
10. recursive  : [fun15/4]
11. recursive  : [fun16/3]
12. recursive  : [fun17/4]
13. recursive  : [fun2/3]
14. recursive  : [fun3/3]
15. recursive  : [fun4/4]
16. recursive  : [fun5/3]
17. recursive  : [fun6/4]
18. recursive  : [fun7/4]
19. recursive  : [fun8/3]
20. recursive  : [fun9/5]
21. recursive  : [head/2]
22. recursive  : [natsFrom/2]
23. recursive  : [pair/3]
24. non_recursive  : [proper/2]
25. recursive  : [s/2]
26. recursive  : [sel/3]
27. recursive  : [snd/2]
28. recursive  : [splitAt/3]
29. recursive  : [tail/2]
30. recursive  : [take/3]
31. recursive  : [top/2]
32. non_recursive  : [start/4]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into afterNth/3
1. SCC is partially evaluated into cons/3
2. SCC is partially evaluated into fst/2
3. SCC is partially evaluated into fun/5
4. SCC is partially evaluated into fun1/4
5. SCC is partially evaluated into fun10/5
6. SCC is partially evaluated into fun11/3
7. SCC is partially evaluated into fun12/3
8. SCC is partially evaluated into fun13/3
9. SCC is partially evaluated into fun14/3
10. SCC is partially evaluated into fun15/4
11. SCC is partially evaluated into fun16/3
12. SCC is partially evaluated into fun17/4
13. SCC is partially evaluated into fun2/3
14. SCC is partially evaluated into fun3/3
15. SCC is partially evaluated into fun4/4
16. SCC is partially evaluated into fun5/3
17. SCC is partially evaluated into fun6/4
18. SCC is partially evaluated into fun7/4
19. SCC is partially evaluated into fun8/3
20. SCC is partially evaluated into fun9/5
21. SCC is partially evaluated into head/2
22. SCC is partially evaluated into natsFrom/2
23. SCC is partially evaluated into pair/3
24. SCC is partially evaluated into proper/2
25. SCC is partially evaluated into s/2
26. SCC is partially evaluated into sel/3
27. SCC is partially evaluated into snd/2
28. SCC is partially evaluated into splitAt/3
29. SCC is partially evaluated into tail/2
30. SCC is partially evaluated into take/3
31. SCC is partially evaluated into top/2
32. SCC is partially evaluated into start/4

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations afterNth/3 
* CE 102 is refined into CE [130] 
* CE 100 is refined into CE [131] 
* CE 101 is refined into CE [132] 
* CE 99 is refined into CE [133] 


#### Refined cost equations afterNth/3 
* CE 130: afterNth(V1,V,Out) = 0
     [V>=0,V1>=0,Out=0] 
* CE 131: afterNth(V1,V,Out) = 1+ afterNth(V1,W1,X1)
     [W1>=0,V1>=0,X1+1=Out,W1+1=V] 
* CE 132: afterNth(V1,V,Out) = 1+ afterNth(W1,V,X1)
     [W1>=0,V>=0,X1+1=Out,W1+1=V1] 
* CE 133: afterNth(V1,V,Out) = 1+ afterNth(W1,X1,Y1)
     [X1>=0,W1>=0,Y1+1=Out,X1+1=V,W1+1=V1] 

### Cost equations --> "Loop" of afterNth/3 
* CEs [131] --> Loop 97 
* CEs [132] --> Loop 98 
* CEs [133] --> Loop 99 
* CEs [130] --> Loop 100 

#### Loops of afterNth/3 
* Loop 97: afterNth(V1,V,Out)->  afterNth(V1,V',Out')
                  [V>=1,V1>=0,Out=Out'+1,V=V'+1] 
* Loop 98: afterNth(V1,V,Out)->  afterNth(V1',V,Out')
                  [V>=0,V1>=1,Out=Out'+1,V1=V1'+1] 
* Loop 99: afterNth(V1,V,Out)->  afterNth(V1',V',Out')
                  [V>=1,V1>=1,Out=Out'+1,V=V'+1,V1=V1'+1] 
* Loop 100: afterNth(V1,V,Out) [V>=0,V1>=0,Out=0] 

### Ranking functions of CR afterNth(V1,V,Out) 
* RF of phase [97,98,99]: [V1+V]

#### Partial ranking functions of CR afterNth(V1,V,Out) 
* Partial RF of phase [97,98,99]:
  - RF of loop [97:1,99:1]:
    V
  - RF of loop [98:1,99:1]:
    V1


### Resulting Chains:afterNth(V1,V,Out) 
* [[97,98,99],100]
* [100]


### Merging Chains  afterNth/3 into  External patterns of execution 
* [[100]] --> 1 
* [[100,[97,98,99]]] --> 2 


### Specialization of cost equations cons/3 
* CE 48 is refined into CE [134] 
* CE 47 is refined into CE [135] 
* CE 46 is refined into CE [136] 


#### Refined cost equations cons/3 
* CE 134: cons(V1,V,Out) = 0
     [V>=0,V1>=0,Out=0] 
* CE 135: cons(V1,V,Out) = 1+ cons(W1,V,X1)
     [W1>=0,V>=0,X1+1=Out,W1+1=V1] 
* CE 136: cons(V1,V,Out) = 1+ cons(W1,X1,Y1)
     [X1>=0,W1>=0,Y1+1=Out,X1+1=V,W1+1=V1] 

### Cost equations --> "Loop" of cons/3 
* CEs [135] --> Loop 101 
* CEs [136] --> Loop 102 
* CEs [134] --> Loop 103 

#### Loops of cons/3 
* Loop 101: cons(V1,V,Out)->  cons(V1',V,Out')
                  [V>=0,V1>=1,Out=Out'+1,V1=V1'+1] 
* Loop 102: cons(V1,V,Out)->  cons(V1',V',Out')
                  [V>=1,V1>=1,Out=Out'+1,V=V'+1,V1=V1'+1] 
* Loop 103: cons(V1,V,Out) [V>=0,V1>=0,Out=0] 

### Ranking functions of CR cons(V1,V,Out) 
* RF of phase [101,102]: [V1]

#### Partial ranking functions of CR cons(V1,V,Out) 
* Partial RF of phase [101,102]:
  - RF of loop [101:1,102:1]:
    V1
  - RF of loop [102:1]:
    V


### Resulting Chains:cons(V1,V,Out) 
* [[101,102],103]
* [103]


### Merging Chains  cons/3 into  External patterns of execution 
* [[103]] --> 1 
* [[103,[101,102]]] --> 2 


### Specialization of cost equations fst/2 
* CE 98 is refined into CE [137] 
* CE 97 is refined into CE [138] 


#### Refined cost equations fst/2 
* CE 137: fst(V1,Out) = 0
     [V1>=0,Out=0] 
* CE 138: fst(V1,Out) = 1+ fst(W1,X1)
     [W1>=0,X1+1=Out,W1+1=V1] 

### Cost equations --> "Loop" of fst/2 
* CEs [138] --> Loop 104 
* CEs [137] --> Loop 105 

#### Loops of fst/2 
* Loop 104: fst(V1,Out)->  fst(V1',Out')
                  [V1'>=0,Out=Out'+1,V1'+1=V1] 
* Loop 105: fst(V1,Out) [V1>=0,Out=0] 

### Ranking functions of CR fst(V1,Out) 
* RF of phase [104]: [V1]

#### Partial ranking functions of CR fst(V1,Out) 
* Partial RF of phase [104]:
  - RF of loop [104:1]:
    V1


### Resulting Chains:fst(V1,Out) 
* [[104],105]
* [105]


### Merging Chains  fst/2 into  External patterns of execution 
* [[105]] --> 1 
* [[105,[104]]] --> 2 


### Specialization of cost equations fun/5 
* CE 36 is refined into CE [139] 
* CE 35 is refined into CE [140] 
* CE 34 is refined into CE [141] 


#### Refined cost equations fun/5 
* CE 139: fun(V1,V,V2,V3,Out) = 0
     [V3>=0,V2>=0,V>=0,V1>=0,Out=0] 
* CE 140: fun(V1,V,V2,V3,Out) = 1+ fun(W3,V,V2,V3,X3)
     [W3>=0,V3>=0,V2>=0,V>=0,X3+1=Out,W3+1=V1] 
* CE 141: fun(V1,V,V2,V3,Out) = 1+ fun(W3,X3,Y3,Z3,A4)
     [Z3>=0,Y3>=0,X3>=0,W3>=0,A4+1=Out,Z3+1=V3,Y3+1=V2,X3+1=V,W3+1=V1] 

### Cost equations --> "Loop" of fun/5 
* CEs [140] --> Loop 106 
* CEs [141] --> Loop 107 
* CEs [139] --> Loop 108 

#### Loops of fun/5 
* Loop 106: fun(V1,V,V2,V3,Out)->  fun(V1',V,V2,V3,Out')
                  [V3>=0,V2>=0,V>=0,V1>=1,Out=Out'+1,V1=V1'+1] 
* Loop 107: fun(V1,V,V2,V3,Out)->  fun(V1',V',V2',V3',Out')
                  [V3>=1,V2>=1,V>=1,V1>=1,Out=Out'+1,V3=V3'+1,V2=V2'+1,V=V'+1,V1=V1'+1] 
* Loop 108: fun(V1,V,V2,V3,Out) [V3>=0,V2>=0,V>=0,V1>=0,Out=0] 

### Ranking functions of CR fun(V1,V,V2,V3,Out) 
* RF of phase [106,107]: [V1]

#### Partial ranking functions of CR fun(V1,V,V2,V3,Out) 
* Partial RF of phase [106,107]:
  - RF of loop [106:1,107:1]:
    V1
  - RF of loop [107:1]:
    V
    V2
    V3


### Resulting Chains:fun(V1,V,V2,V3,Out) 
* [[106,107],108]
* [108]


### Merging Chains  fun/5 into  External patterns of execution 
* [[108]] --> 1 
* [[108,[106,107]]] --> 2 


### Specialization of cost equations fun1/4 
* CE 42 is refined into CE [142] 
* CE 40 is refined into CE [143] 
* CE 41 is refined into CE [144] 


#### Refined cost equations fun1/4 
* CE 142: fun1(V1,V,V2,Out) = 0
     [V2>=0,V>=0,V1>=0,Out=0] 
* CE 143: fun1(V1,V,V2,Out) = 1+ fun1(W2,V,V2,X2)
     [W2>=0,V2>=0,V>=0,X2+1=Out,W2+1=V1] 
* CE 144: fun1(V1,V,V2,Out) = 1+ fun1(W2,X2,Y2,Z2)
     [Y2>=0,X2>=0,W2>=0,Z2+1=Out,Y2+1=V2,X2+1=V,W2+1=V1] 

### Cost equations --> "Loop" of fun1/4 
* CEs [143] --> Loop 109 
* CEs [144] --> Loop 110 
* CEs [142] --> Loop 111 

#### Loops of fun1/4 
* Loop 109: fun1(V1,V,V2,Out)->  fun1(V1',V,V2,Out')
                  [V2>=0,V>=0,V1>=1,Out=Out'+1,V1=V1'+1] 
* Loop 110: fun1(V1,V,V2,Out)->  fun1(V1',V',V2',Out')
                  [V2>=1,V>=1,V1>=1,Out=Out'+1,V2=V2'+1,V=V'+1,V1=V1'+1] 
* Loop 111: fun1(V1,V,V2,Out) [V2>=0,V>=0,V1>=0,Out=0] 

### Ranking functions of CR fun1(V1,V,V2,Out) 
* RF of phase [109,110]: [V1]

#### Partial ranking functions of CR fun1(V1,V,V2,Out) 
* Partial RF of phase [109,110]:
  - RF of loop [109:1,110:1]:
    V1
  - RF of loop [110:1]:
    V
    V2


### Resulting Chains:fun1(V1,V,V2,Out) 
* [[109,110],111]
* [111]


### Merging Chains  fun1/4 into  External patterns of execution 
* [[111]] --> 1 
* [[111,[109,110]]] --> 2 


### Specialization of cost equations fun10/5 
* CE 94 is refined into CE [145] 
* CE 93 is refined into CE [146] 
* CE 92 is refined into CE [147] 


#### Refined cost equations fun10/5 
* CE 145: fun10(V1,V,V2,V3,Out) = 0
     [V3>=0,V2>=0,V>=0,V1>=0,Out=0] 
* CE 146: fun10(V1,V,V2,V3,Out) = 1+ fun10(W3,V,V2,V3,X3)
     [W3>=0,V3>=0,V2>=0,V>=0,X3+1=Out,W3+1=V1] 
* CE 147: fun10(V1,V,V2,V3,Out) = 1+ fun10(W3,X3,Y3,Z3,A4)
     [Z3>=0,Y3>=0,X3>=0,W3>=0,A4+1=Out,Z3+1=V3,Y3+1=V2,X3+1=V,W3+1=V1] 

### Cost equations --> "Loop" of fun10/5 
* CEs [146] --> Loop 112 
* CEs [147] --> Loop 113 
* CEs [145] --> Loop 114 

#### Loops of fun10/5 
* Loop 112: fun10(V1,V,V2,V3,Out)->  fun10(V1',V,V2,V3,Out')
                  [V3>=0,V2>=0,V>=0,V1>=1,Out=Out'+1,V1=V1'+1] 
* Loop 113: fun10(V1,V,V2,V3,Out)->  fun10(V1',V',V2',V3',Out')
                  [V3>=1,V2>=1,V>=1,V1>=1,Out=Out'+1,V3=V3'+1,V2=V2'+1,V=V'+1,V1=V1'+1] 
* Loop 114: fun10(V1,V,V2,V3,Out) [V3>=0,V2>=0,V>=0,V1>=0,Out=0] 

### Ranking functions of CR fun10(V1,V,V2,V3,Out) 
* RF of phase [112,113]: [V1]

#### Partial ranking functions of CR fun10(V1,V,V2,V3,Out) 
* Partial RF of phase [112,113]:
  - RF of loop [112:1,113:1]:
    V1
  - RF of loop [113:1]:
    V
    V2
    V3


### Resulting Chains:fun10(V1,V,V2,V3,Out) 
* [[112,113],114]
* [114]


### Merging Chains  fun10/5 into  External patterns of execution 
* [[114]] --> 1 
* [[114,[112,113]]] --> 2 


### Specialization of cost equations fun11/3 
* CE 105 is refined into CE [148] 
* CE 104 is refined into CE [149] 
* CE 103 is refined into CE [150] 


#### Refined cost equations fun11/3 
* CE 148: fun11(V1,V,Out) = 0
     [V>=0,V1>=0,Out=0] 
* CE 149: fun11(V1,V,Out) = 1+ fun11(W1,V,X1)
     [W1>=0,V>=0,X1+1=Out,W1+1=V1] 
* CE 150: fun11(V1,V,Out) = 1+ fun11(W1,X1,Y1)
     [X1>=0,W1>=0,Y1+1=Out,X1+1=V,W1+1=V1] 

### Cost equations --> "Loop" of fun11/3 
* CEs [149] --> Loop 115 
* CEs [150] --> Loop 116 
* CEs [148] --> Loop 117 

#### Loops of fun11/3 
* Loop 115: fun11(V1,V,Out)->  fun11(V1',V,Out')
                  [V>=0,V1>=1,Out=Out'+1,V1=V1'+1] 
* Loop 116: fun11(V1,V,Out)->  fun11(V1',V',Out')
                  [V>=1,V1>=1,Out=Out'+1,V=V'+1,V1=V1'+1] 
* Loop 117: fun11(V1,V,Out) [V>=0,V1>=0,Out=0] 

### Ranking functions of CR fun11(V1,V,Out) 
* RF of phase [115,116]: [V1]

#### Partial ranking functions of CR fun11(V1,V,Out) 
* Partial RF of phase [115,116]:
  - RF of loop [115:1,116:1]:
    V1
  - RF of loop [116:1]:
    V


### Resulting Chains:fun11(V1,V,Out) 
* [[115,116],117]
* [117]


### Merging Chains  fun11/3 into  External patterns of execution 
* [[117]] --> 1 
* [[117,[115,116]]] --> 2 


### Specialization of cost equations fun12/3 
* CE 110 is refined into CE [151] 
* CE 109 is refined into CE [152] 
* CE 108 is refined into CE [153] 


#### Refined cost equations fun12/3 
* CE 151: fun12(V1,V,Out) = 0
     [V>=0,V1>=0,Out=0] 
* CE 152: fun12(V1,V,Out) = 1+ fun12(W1,V,X1)
     [W1>=0,V>=0,X1+1=Out,W1+1=V1] 
* CE 153: fun12(V1,V,Out) = 1+ fun12(W1,X1,Y1)
     [X1>=0,W1>=0,Y1+1=Out,X1+1=V,W1+1=V1] 

### Cost equations --> "Loop" of fun12/3 
* CEs [152] --> Loop 118 
* CEs [153] --> Loop 119 
* CEs [151] --> Loop 120 

#### Loops of fun12/3 
* Loop 118: fun12(V1,V,Out)->  fun12(V1',V,Out')
                  [V>=0,V1>=1,Out=Out'+1,V1=V1'+1] 
* Loop 119: fun12(V1,V,Out)->  fun12(V1',V',Out')
                  [V>=1,V1>=1,Out=Out'+1,V=V'+1,V1=V1'+1] 
* Loop 120: fun12(V1,V,Out) [V>=0,V1>=0,Out=0] 

### Ranking functions of CR fun12(V1,V,Out) 
* RF of phase [118,119]: [V1]

#### Partial ranking functions of CR fun12(V1,V,Out) 
* Partial RF of phase [118,119]:
  - RF of loop [118:1,119:1]:
    V1
  - RF of loop [119:1]:
    V


### Resulting Chains:fun12(V1,V,Out) 
* [[118,119],120]
* [120]


### Merging Chains  fun12/3 into  External patterns of execution 
* [[120]] --> 1 
* [[120,[118,119]]] --> 2 


### Specialization of cost equations fun13/3 
* CE 117 is refined into CE [154] 
* CE 115 is refined into CE [155] 
* CE 116 is refined into CE [156] 


#### Refined cost equations fun13/3 
* CE 154: fun13(V1,V,Out) = 0
     [V>=0,V1>=0,Out=0] 
* CE 155: fun13(V1,V,Out) = 1+ fun13(W1,V,X1)
     [W1>=0,V>=0,X1+1=Out,W1+1=V1] 
* CE 156: fun13(V1,V,Out) = 1+ fun13(W1,X1,Y1)
     [X1>=0,W1>=0,Y1+1=Out,X1+1=V,W1+1=V1] 

### Cost equations --> "Loop" of fun13/3 
* CEs [155] --> Loop 121 
* CEs [156] --> Loop 122 
* CEs [154] --> Loop 123 

#### Loops of fun13/3 
* Loop 121: fun13(V1,V,Out)->  fun13(V1',V,Out')
                  [V>=0,V1>=1,Out=Out'+1,V1=V1'+1] 
* Loop 122: fun13(V1,V,Out)->  fun13(V1',V',Out')
                  [V>=1,V1>=1,Out=Out'+1,V=V'+1,V1=V1'+1] 
* Loop 123: fun13(V1,V,Out) [V>=0,V1>=0,Out=0] 

### Ranking functions of CR fun13(V1,V,Out) 
* RF of phase [121,122]: [V1]

#### Partial ranking functions of CR fun13(V1,V,Out) 
* Partial RF of phase [121,122]:
  - RF of loop [121:1,122:1]:
    V1
  - RF of loop [122:1]:
    V


### Resulting Chains:fun13(V1,V,Out) 
* [[121,122],123]
* [123]


### Merging Chains  fun13/3 into  External patterns of execution 
* [[123]] --> 1 
* [[123,[121,122]]] --> 2 


### Specialization of cost equations fun14/3 
* CE 120 is refined into CE [157] 
* CE 118 is refined into CE [158] 
* CE 119 is refined into CE [159] 


#### Refined cost equations fun14/3 
* CE 157: fun14(V1,V,Out) = 0
     [V>=0,V1>=0,Out=0] 
* CE 158: fun14(V1,V,Out) = 1+ fun14(W1,V,X1)
     [W1>=0,V>=0,X1+1=Out,W1+1=V1] 
* CE 159: fun14(V1,V,Out) = 1+ fun14(W1,X1,Y1)
     [X1>=0,W1>=0,Y1+1=Out,X1+1=V,W1+1=V1] 

### Cost equations --> "Loop" of fun14/3 
* CEs [158] --> Loop 124 
* CEs [159] --> Loop 125 
* CEs [157] --> Loop 126 

#### Loops of fun14/3 
* Loop 124: fun14(V1,V,Out)->  fun14(V1',V,Out')
                  [V>=0,V1>=1,Out=Out'+1,V1=V1'+1] 
* Loop 125: fun14(V1,V,Out)->  fun14(V1',V',Out')
                  [V>=1,V1>=1,Out=Out'+1,V=V'+1,V1=V1'+1] 
* Loop 126: fun14(V1,V,Out) [V>=0,V1>=0,Out=0] 

### Ranking functions of CR fun14(V1,V,Out) 
* RF of phase [124,125]: [V1]

#### Partial ranking functions of CR fun14(V1,V,Out) 
* Partial RF of phase [124,125]:
  - RF of loop [124:1,125:1]:
    V1
  - RF of loop [125:1]:
    V


### Resulting Chains:fun14(V1,V,Out) 
* [[124,125],126]
* [126]


### Merging Chains  fun14/3 into  External patterns of execution 
* [[126]] --> 1 
* [[126,[124,125]]] --> 2 


### Specialization of cost equations fun15/4 
* CE 123 is refined into CE [160] 
* CE 122 is refined into CE [161] 
* CE 121 is refined into CE [162] 


#### Refined cost equations fun15/4 
* CE 160: fun15(V1,V,V2,Out) = 0
     [V2>=0,V>=0,V1>=0,Out=0] 
* CE 161: fun15(V1,V,V2,Out) = 1+ fun15(W2,V,V2,X2)
     [W2>=0,V2>=0,V>=0,X2+1=Out,W2+1=V1] 
* CE 162: fun15(V1,V,V2,Out) = 1+ fun15(W2,X2,Y2,Z2)
     [Y2>=0,X2>=0,W2>=0,Z2+1=Out,Y2+1=V2,X2+1=V,W2+1=V1] 

### Cost equations --> "Loop" of fun15/4 
* CEs [161] --> Loop 127 
* CEs [162] --> Loop 128 
* CEs [160] --> Loop 129 

#### Loops of fun15/4 
* Loop 127: fun15(V1,V,V2,Out)->  fun15(V1',V,V2,Out')
                  [V2>=0,V>=0,V1>=1,Out=Out'+1,V1=V1'+1] 
* Loop 128: fun15(V1,V,V2,Out)->  fun15(V1',V',V2',Out')
                  [V2>=1,V>=1,V1>=1,Out=Out'+1,V2=V2'+1,V=V'+1,V1=V1'+1] 
* Loop 129: fun15(V1,V,V2,Out) [V2>=0,V>=0,V1>=0,Out=0] 

### Ranking functions of CR fun15(V1,V,V2,Out) 
* RF of phase [127,128]: [V1]

#### Partial ranking functions of CR fun15(V1,V,V2,Out) 
* Partial RF of phase [127,128]:
  - RF of loop [127:1,128:1]:
    V1
  - RF of loop [128:1]:
    V
    V2


### Resulting Chains:fun15(V1,V,V2,Out) 
* [[127,128],129]
* [129]


### Merging Chains  fun15/4 into  External patterns of execution 
* [[129]] --> 1 
* [[129,[127,128]]] --> 2 


### Specialization of cost equations fun16/3 
* CE 126 is refined into CE [163] 
* CE 124 is refined into CE [164] 
* CE 125 is refined into CE [165] 


#### Refined cost equations fun16/3 
* CE 163: fun16(V1,V,Out) = 0
     [V>=0,V1>=0,Out=0] 
* CE 164: fun16(V1,V,Out) = 1+ fun16(W1,V,X1)
     [W1>=0,V>=0,X1+1=Out,W1+1=V1] 
* CE 165: fun16(V1,V,Out) = 1+ fun16(W1,X1,Y1)
     [X1>=0,W1>=0,Y1+1=Out,X1+1=V,W1+1=V1] 

### Cost equations --> "Loop" of fun16/3 
* CEs [164] --> Loop 130 
* CEs [165] --> Loop 131 
* CEs [163] --> Loop 132 

#### Loops of fun16/3 
* Loop 130: fun16(V1,V,Out)->  fun16(V1',V,Out')
                  [V>=0,V1>=1,Out=Out'+1,V1=V1'+1] 
* Loop 131: fun16(V1,V,Out)->  fun16(V1',V',Out')
                  [V>=1,V1>=1,Out=Out'+1,V=V'+1,V1=V1'+1] 
* Loop 132: fun16(V1,V,Out) [V>=0,V1>=0,Out=0] 

### Ranking functions of CR fun16(V1,V,Out) 
* RF of phase [130,131]: [V1]

#### Partial ranking functions of CR fun16(V1,V,Out) 
* Partial RF of phase [130,131]:
  - RF of loop [130:1,131:1]:
    V1
  - RF of loop [131:1]:
    V


### Resulting Chains:fun16(V1,V,Out) 
* [[130,131],132]
* [132]


### Merging Chains  fun16/3 into  External patterns of execution 
* [[132]] --> 1 
* [[132,[130,131]]] --> 2 


### Specialization of cost equations fun17/4 
* CE 129 is refined into CE [166] 
* CE 127 is refined into CE [167] 
* CE 128 is refined into CE [168] 


#### Refined cost equations fun17/4 
* CE 166: fun17(V1,V,V2,Out) = 0
     [V2>=0,V>=0,V1>=0,Out=0] 
* CE 167: fun17(V1,V,V2,Out) = 1+ fun17(W2,V,V2,X2)
     [W2>=0,V2>=0,V>=0,X2+1=Out,W2+1=V1] 
* CE 168: fun17(V1,V,V2,Out) = 1+ fun17(W2,X2,Y2,Z2)
     [Y2>=0,X2>=0,W2>=0,Z2+1=Out,Y2+1=V2,X2+1=V,W2+1=V1] 

### Cost equations --> "Loop" of fun17/4 
* CEs [167] --> Loop 133 
* CEs [168] --> Loop 134 
* CEs [166] --> Loop 135 

#### Loops of fun17/4 
* Loop 133: fun17(V1,V,V2,Out)->  fun17(V1',V,V2,Out')
                  [V2>=0,V>=0,V1>=1,Out=Out'+1,V1=V1'+1] 
* Loop 134: fun17(V1,V,V2,Out)->  fun17(V1',V',V2',Out')
                  [V2>=1,V>=1,V1>=1,Out=Out'+1,V2=V2'+1,V=V'+1,V1=V1'+1] 
* Loop 135: fun17(V1,V,V2,Out) [V2>=0,V>=0,V1>=0,Out=0] 

### Ranking functions of CR fun17(V1,V,V2,Out) 
* RF of phase [133,134]: [V1]

#### Partial ranking functions of CR fun17(V1,V,V2,Out) 
* Partial RF of phase [133,134]:
  - RF of loop [133:1,134:1]:
    V1
  - RF of loop [134:1]:
    V
    V2


### Resulting Chains:fun17(V1,V,V2,Out) 
* [[133,134],135]
* [135]


### Merging Chains  fun17/4 into  External patterns of execution 
* [[135]] --> 1 
* [[135,[133,134]]] --> 2 


### Specialization of cost equations fun2/3 
* CE 45 is refined into CE [169] 
* CE 43 is refined into CE [170] 
* CE 44 is refined into CE [171] 


#### Refined cost equations fun2/3 
* CE 169: fun2(V1,V,Out) = 0
     [V>=0,V1>=0,Out=0] 
* CE 170: fun2(V1,V,Out) = 1+ fun2(W1,V,X1)
     [W1>=0,V>=0,X1+1=Out,W1+1=V1] 
* CE 171: fun2(V1,V,Out) = 1+ fun2(W1,X1,Y1)
     [X1>=0,W1>=0,Y1+1=Out,X1+1=V,W1+1=V1] 

### Cost equations --> "Loop" of fun2/3 
* CEs [170] --> Loop 136 
* CEs [171] --> Loop 137 
* CEs [169] --> Loop 138 

#### Loops of fun2/3 
* Loop 136: fun2(V1,V,Out)->  fun2(V1',V,Out')
                  [V>=0,V1>=1,Out=Out'+1,V1=V1'+1] 
* Loop 137: fun2(V1,V,Out)->  fun2(V1',V',Out')
                  [V>=1,V1>=1,Out=Out'+1,V=V'+1,V1=V1'+1] 
* Loop 138: fun2(V1,V,Out) [V>=0,V1>=0,Out=0] 

### Ranking functions of CR fun2(V1,V,Out) 
* RF of phase [136,137]: [V1]

#### Partial ranking functions of CR fun2(V1,V,Out) 
* Partial RF of phase [136,137]:
  - RF of loop [136:1,137:1]:
    V1
  - RF of loop [137:1]:
    V


### Resulting Chains:fun2(V1,V,Out) 
* [[136,137],138]
* [138]


### Merging Chains  fun2/3 into  External patterns of execution 
* [[138]] --> 1 
* [[138,[136,137]]] --> 2 


### Specialization of cost equations fun3/3 
* CE 55 is refined into CE [172] 
* CE 54 is refined into CE [173] 
* CE 53 is refined into CE [174] 


#### Refined cost equations fun3/3 
* CE 172: fun3(V1,V,Out) = 0
     [V>=0,V1>=0,Out=0] 
* CE 173: fun3(V1,V,Out) = 1+ fun3(W1,V,X1)
     [W1>=0,V>=0,X1+1=Out,W1+1=V1] 
* CE 174: fun3(V1,V,Out) = 1+ fun3(W1,X1,Y1)
     [X1>=0,W1>=0,Y1+1=Out,X1+1=V,W1+1=V1] 

### Cost equations --> "Loop" of fun3/3 
* CEs [173] --> Loop 139 
* CEs [174] --> Loop 140 
* CEs [172] --> Loop 141 

#### Loops of fun3/3 
* Loop 139: fun3(V1,V,Out)->  fun3(V1',V,Out')
                  [V>=0,V1>=1,Out=Out'+1,V1=V1'+1] 
* Loop 140: fun3(V1,V,Out)->  fun3(V1',V',Out')
                  [V>=1,V1>=1,Out=Out'+1,V=V'+1,V1=V1'+1] 
* Loop 141: fun3(V1,V,Out) [V>=0,V1>=0,Out=0] 

### Ranking functions of CR fun3(V1,V,Out) 
* RF of phase [139,140]: [V1]

#### Partial ranking functions of CR fun3(V1,V,Out) 
* Partial RF of phase [139,140]:
  - RF of loop [139:1,140:1]:
    V1
  - RF of loop [140:1]:
    V


### Resulting Chains:fun3(V1,V,Out) 
* [[139,140],141]
* [141]


### Merging Chains  fun3/3 into  External patterns of execution 
* [[141]] --> 1 
* [[141,[139,140]]] --> 2 


### Specialization of cost equations fun4/4 
* CE 70 is refined into CE [175] 
* CE 68 is refined into CE [176] 
* CE 69 is refined into CE [177] 


#### Refined cost equations fun4/4 
* CE 175: fun4(V1,V,V2,Out) = 0
     [V2>=0,V>=0,V1>=0,Out=0] 
* CE 176: fun4(V1,V,V2,Out) = 1+ fun4(W2,V,V2,X2)
     [W2>=0,V2>=0,V>=0,X2+1=Out,W2+1=V1] 
* CE 177: fun4(V1,V,V2,Out) = 1+ fun4(W2,X2,Y2,Z2)
     [Y2>=0,X2>=0,W2>=0,Z2+1=Out,Y2+1=V2,X2+1=V,W2+1=V1] 

### Cost equations --> "Loop" of fun4/4 
* CEs [176] --> Loop 142 
* CEs [177] --> Loop 143 
* CEs [175] --> Loop 144 

#### Loops of fun4/4 
* Loop 142: fun4(V1,V,V2,Out)->  fun4(V1',V,V2,Out')
                  [V2>=0,V>=0,V1>=1,Out=Out'+1,V1=V1'+1] 
* Loop 143: fun4(V1,V,V2,Out)->  fun4(V1',V',V2',Out')
                  [V2>=1,V>=1,V1>=1,Out=Out'+1,V2=V2'+1,V=V'+1,V1=V1'+1] 
* Loop 144: fun4(V1,V,V2,Out) [V2>=0,V>=0,V1>=0,Out=0] 

### Ranking functions of CR fun4(V1,V,V2,Out) 
* RF of phase [142,143]: [V1]

#### Partial ranking functions of CR fun4(V1,V,V2,Out) 
* Partial RF of phase [142,143]:
  - RF of loop [142:1,143:1]:
    V1
  - RF of loop [143:1]:
    V
    V2


### Resulting Chains:fun4(V1,V,V2,Out) 
* [[142,143],144]
* [144]


### Merging Chains  fun4/4 into  External patterns of execution 
* [[144]] --> 1 
* [[144,[142,143]]] --> 2 


### Specialization of cost equations fun5/3 
* CE 77 is refined into CE [178] 
* CE 75 is refined into CE [179] 
* CE 76 is refined into CE [180] 


#### Refined cost equations fun5/3 
* CE 178: fun5(V1,V,Out) = 0
     [V>=0,V1>=0,Out=0] 
* CE 179: fun5(V1,V,Out) = 1+ fun5(W1,V,X1)
     [W1>=0,V>=0,X1+1=Out,W1+1=V1] 
* CE 180: fun5(V1,V,Out) = 1+ fun5(W1,X1,Y1)
     [X1>=0,W1>=0,Y1+1=Out,X1+1=V,W1+1=V1] 

### Cost equations --> "Loop" of fun5/3 
* CEs [179] --> Loop 145 
* CEs [180] --> Loop 146 
* CEs [178] --> Loop 147 

#### Loops of fun5/3 
* Loop 145: fun5(V1,V,Out)->  fun5(V1',V,Out')
                  [V>=0,V1>=1,Out=Out'+1,V1=V1'+1] 
* Loop 146: fun5(V1,V,Out)->  fun5(V1',V',Out')
                  [V>=1,V1>=1,Out=Out'+1,V=V'+1,V1=V1'+1] 
* Loop 147: fun5(V1,V,Out) [V>=0,V1>=0,Out=0] 

### Ranking functions of CR fun5(V1,V,Out) 
* RF of phase [145,146]: [V1]

#### Partial ranking functions of CR fun5(V1,V,Out) 
* Partial RF of phase [145,146]:
  - RF of loop [145:1,146:1]:
    V1
  - RF of loop [146:1]:
    V


### Resulting Chains:fun5(V1,V,Out) 
* [[145,146],147]
* [147]


### Merging Chains  fun5/3 into  External patterns of execution 
* [[147]] --> 1 
* [[147,[145,146]]] --> 2 


### Specialization of cost equations fun6/4 
* CE 80 is refined into CE [181] 
* CE 79 is refined into CE [182] 
* CE 78 is refined into CE [183] 


#### Refined cost equations fun6/4 
* CE 181: fun6(V1,V,V2,Out) = 0
     [V2>=0,V>=0,V1>=0,Out=0] 
* CE 182: fun6(V1,V,V2,Out) = 1+ fun6(W2,V,V2,X2)
     [W2>=0,V2>=0,V>=0,X2+1=Out,W2+1=V1] 
* CE 183: fun6(V1,V,V2,Out) = 1+ fun6(W2,X2,Y2,Z2)
     [Y2>=0,X2>=0,W2>=0,Z2+1=Out,Y2+1=V2,X2+1=V,W2+1=V1] 

### Cost equations --> "Loop" of fun6/4 
* CEs [182] --> Loop 148 
* CEs [183] --> Loop 149 
* CEs [181] --> Loop 150 

#### Loops of fun6/4 
* Loop 148: fun6(V1,V,V2,Out)->  fun6(V1',V,V2,Out')
                  [V2>=0,V>=0,V1>=1,Out=Out'+1,V1=V1'+1] 
* Loop 149: fun6(V1,V,V2,Out)->  fun6(V1',V',V2',Out')
                  [V2>=1,V>=1,V1>=1,Out=Out'+1,V2=V2'+1,V=V'+1,V1=V1'+1] 
* Loop 150: fun6(V1,V,V2,Out) [V2>=0,V>=0,V1>=0,Out=0] 

### Ranking functions of CR fun6(V1,V,V2,Out) 
* RF of phase [148,149]: [V1]

#### Partial ranking functions of CR fun6(V1,V,V2,Out) 
* Partial RF of phase [148,149]:
  - RF of loop [148:1,149:1]:
    V1
  - RF of loop [149:1]:
    V
    V2


### Resulting Chains:fun6(V1,V,V2,Out) 
* [[148,149],150]
* [150]


### Merging Chains  fun6/4 into  External patterns of execution 
* [[150]] --> 1 
* [[150,[148,149]]] --> 2 


### Specialization of cost equations fun7/4 
* CE 83 is refined into CE [184] 
* CE 81 is refined into CE [185] 
* CE 82 is refined into CE [186] 


#### Refined cost equations fun7/4 
* CE 184: fun7(V1,V,V2,Out) = 0
     [V2>=0,V>=0,V1>=0,Out=0] 
* CE 185: fun7(V1,V,V2,Out) = 1+ fun7(W2,V,V2,X2)
     [W2>=0,V2>=0,V>=0,X2+1=Out,W2+1=V1] 
* CE 186: fun7(V1,V,V2,Out) = 1+ fun7(W2,X2,Y2,Z2)
     [Y2>=0,X2>=0,W2>=0,Z2+1=Out,Y2+1=V2,X2+1=V,W2+1=V1] 

### Cost equations --> "Loop" of fun7/4 
* CEs [185] --> Loop 151 
* CEs [186] --> Loop 152 
* CEs [184] --> Loop 153 

#### Loops of fun7/4 
* Loop 151: fun7(V1,V,V2,Out)->  fun7(V1',V,V2,Out')
                  [V2>=0,V>=0,V1>=1,Out=Out'+1,V1=V1'+1] 
* Loop 152: fun7(V1,V,V2,Out)->  fun7(V1',V',V2',Out')
                  [V2>=1,V>=1,V1>=1,Out=Out'+1,V2=V2'+1,V=V'+1,V1=V1'+1] 
* Loop 153: fun7(V1,V,V2,Out) [V2>=0,V>=0,V1>=0,Out=0] 

### Ranking functions of CR fun7(V1,V,V2,Out) 
* RF of phase [151,152]: [V1]

#### Partial ranking functions of CR fun7(V1,V,V2,Out) 
* Partial RF of phase [151,152]:
  - RF of loop [151:1,152:1]:
    V1
  - RF of loop [152:1]:
    V
    V2


### Resulting Chains:fun7(V1,V,V2,Out) 
* [[151,152],153]
* [153]


### Merging Chains  fun7/4 into  External patterns of execution 
* [[153]] --> 1 
* [[153,[151,152]]] --> 2 


### Specialization of cost equations fun8/3 
* CE 86 is refined into CE [187] 
* CE 85 is refined into CE [188] 
* CE 84 is refined into CE [189] 


#### Refined cost equations fun8/3 
* CE 187: fun8(V1,V,Out) = 0
     [V>=0,V1>=0,Out=0] 
* CE 188: fun8(V1,V,Out) = 1+ fun8(W1,V,X1)
     [W1>=0,V>=0,X1+1=Out,W1+1=V1] 
* CE 189: fun8(V1,V,Out) = 1+ fun8(W1,X1,Y1)
     [X1>=0,W1>=0,Y1+1=Out,X1+1=V,W1+1=V1] 

### Cost equations --> "Loop" of fun8/3 
* CEs [188] --> Loop 154 
* CEs [189] --> Loop 155 
* CEs [187] --> Loop 156 

#### Loops of fun8/3 
* Loop 154: fun8(V1,V,Out)->  fun8(V1',V,Out')
                  [V>=0,V1>=1,Out=Out'+1,V1=V1'+1] 
* Loop 155: fun8(V1,V,Out)->  fun8(V1',V',Out')
                  [V>=1,V1>=1,Out=Out'+1,V=V'+1,V1=V1'+1] 
* Loop 156: fun8(V1,V,Out) [V>=0,V1>=0,Out=0] 

### Ranking functions of CR fun8(V1,V,Out) 
* RF of phase [154,155]: [V1]

#### Partial ranking functions of CR fun8(V1,V,Out) 
* Partial RF of phase [154,155]:
  - RF of loop [154:1,155:1]:
    V1
  - RF of loop [155:1]:
    V


### Resulting Chains:fun8(V1,V,Out) 
* [[154,155],156]
* [156]


### Merging Chains  fun8/3 into  External patterns of execution 
* [[156]] --> 1 
* [[156,[154,155]]] --> 2 


### Specialization of cost equations fun9/5 
* CE 91 is refined into CE [190] 
* CE 90 is refined into CE [191] 
* CE 89 is refined into CE [192] 


#### Refined cost equations fun9/5 
* CE 190: fun9(V1,V,V2,V3,Out) = 0
     [V3>=0,V2>=0,V>=0,V1>=0,Out=0] 
* CE 191: fun9(V1,V,V2,V3,Out) = 1+ fun9(W3,V,V2,V3,X3)
     [W3>=0,V3>=0,V2>=0,V>=0,X3+1=Out,W3+1=V1] 
* CE 192: fun9(V1,V,V2,V3,Out) = 1+ fun9(W3,X3,Y3,Z3,A4)
     [Z3>=0,Y3>=0,X3>=0,W3>=0,A4+1=Out,Z3+1=V3,Y3+1=V2,X3+1=V,W3+1=V1] 

### Cost equations --> "Loop" of fun9/5 
* CEs [191] --> Loop 157 
* CEs [192] --> Loop 158 
* CEs [190] --> Loop 159 

#### Loops of fun9/5 
* Loop 157: fun9(V1,V,V2,V3,Out)->  fun9(V1',V,V2,V3,Out')
                  [V3>=0,V2>=0,V>=0,V1>=1,Out=Out'+1,V1=V1'+1] 
* Loop 158: fun9(V1,V,V2,V3,Out)->  fun9(V1',V',V2',V3',Out')
                  [V3>=1,V2>=1,V>=1,V1>=1,Out=Out'+1,V3=V3'+1,V2=V2'+1,V=V'+1,V1=V1'+1] 
* Loop 159: fun9(V1,V,V2,V3,Out) [V3>=0,V2>=0,V>=0,V1>=0,Out=0] 

### Ranking functions of CR fun9(V1,V,V2,V3,Out) 
* RF of phase [157,158]: [V1]

#### Partial ranking functions of CR fun9(V1,V,V2,V3,Out) 
* Partial RF of phase [157,158]:
  - RF of loop [157:1,158:1]:
    V1
  - RF of loop [158:1]:
    V
    V2
    V3


### Resulting Chains:fun9(V1,V,V2,V3,Out) 
* [[157,158],159]
* [159]


### Merging Chains  fun9/5 into  External patterns of execution 
* [[159]] --> 1 
* [[159,[157,158]]] --> 2 


### Specialization of cost equations head/2 
* CE 88 is refined into CE [193] 
* CE 87 is refined into CE [194] 


#### Refined cost equations head/2 
* CE 193: head(V1,Out) = 0
     [V1>=0,Out=0] 
* CE 194: head(V1,Out) = 1+ head(W1,X1)
     [W1>=0,X1+1=Out,W1+1=V1] 

### Cost equations --> "Loop" of head/2 
* CEs [194] --> Loop 160 
* CEs [193] --> Loop 161 

#### Loops of head/2 
* Loop 160: head(V1,Out)->  head(V1',Out')
                  [V1'>=0,Out=Out'+1,V1'+1=V1] 
* Loop 161: head(V1,Out) [V1>=0,Out=0] 

### Ranking functions of CR head(V1,Out) 
* RF of phase [160]: [V1]

#### Partial ranking functions of CR head(V1,Out) 
* Partial RF of phase [160]:
  - RF of loop [160:1]:
    V1


### Resulting Chains:head(V1,Out) 
* [[160],161]
* [161]


### Merging Chains  head/2 into  External patterns of execution 
* [[161]] --> 1 
* [[161,[160]]] --> 2 


### Specialization of cost equations natsFrom/2 
* CE 96 is refined into CE [195] 
* CE 95 is refined into CE [196] 


#### Refined cost equations natsFrom/2 
* CE 195: natsFrom(V1,Out) = 0
     [V1>=0,Out=0] 
* CE 196: natsFrom(V1,Out) = 1+ natsFrom(W1,X1)
     [W1>=0,X1+1=Out,W1+1=V1] 

### Cost equations --> "Loop" of natsFrom/2 
* CEs [196] --> Loop 162 
* CEs [195] --> Loop 163 

#### Loops of natsFrom/2 
* Loop 162: natsFrom(V1,Out)->  natsFrom(V1',Out')
                  [V1'>=0,Out=Out'+1,V1'+1=V1] 
* Loop 163: natsFrom(V1,Out) [V1>=0,Out=0] 

### Ranking functions of CR natsFrom(V1,Out) 
* RF of phase [162]: [V1]

#### Partial ranking functions of CR natsFrom(V1,Out) 
* Partial RF of phase [162]:
  - RF of loop [162:1]:
    V1


### Resulting Chains:natsFrom(V1,Out) 
* [[162],163]
* [163]


### Merging Chains  natsFrom/2 into  External patterns of execution 
* [[163]] --> 1 
* [[163,[162]]] --> 2 


### Specialization of cost equations pair/3 
* CE 59 is refined into CE [197] 
* CE 57 is refined into CE [198] 
* CE 56 is refined into CE [199] 
* CE 58 is refined into CE [200] 


#### Refined cost equations pair/3 
* CE 197: pair(V1,V,Out) = 0
     [V>=0,V1>=0,Out=0] 
* CE 198: pair(V1,V,Out) = 1+ pair(V1,W1,X1)
     [W1>=0,V1>=0,X1+1=Out,W1+1=V] 
* CE 199: pair(V1,V,Out) = 1+ pair(W1,V,X1)
     [W1>=0,V>=0,X1+1=Out,W1+1=V1] 
* CE 200: pair(V1,V,Out) = 1+ pair(W1,X1,Y1)
     [X1>=0,W1>=0,Y1+1=Out,X1+1=V,W1+1=V1] 

### Cost equations --> "Loop" of pair/3 
* CEs [198] --> Loop 164 
* CEs [199] --> Loop 165 
* CEs [200] --> Loop 166 
* CEs [197] --> Loop 167 

#### Loops of pair/3 
* Loop 164: pair(V1,V,Out)->  pair(V1,V',Out')
                  [V>=1,V1>=0,Out=Out'+1,V=V'+1] 
* Loop 165: pair(V1,V,Out)->  pair(V1',V,Out')
                  [V>=0,V1>=1,Out=Out'+1,V1=V1'+1] 
* Loop 166: pair(V1,V,Out)->  pair(V1',V',Out')
                  [V>=1,V1>=1,Out=Out'+1,V=V'+1,V1=V1'+1] 
* Loop 167: pair(V1,V,Out) [V>=0,V1>=0,Out=0] 

### Ranking functions of CR pair(V1,V,Out) 
* RF of phase [164,165,166]: [V1+V]

#### Partial ranking functions of CR pair(V1,V,Out) 
* Partial RF of phase [164,165,166]:
  - RF of loop [164:1,166:1]:
    V
  - RF of loop [165:1,166:1]:
    V1


### Resulting Chains:pair(V1,V,Out) 
* [[164,165,166],167]
* [167]


### Merging Chains  pair/3 into  External patterns of execution 
* [[167]] --> 1 
* [[167,[164,165,166]]] --> 2 


### Specialization of cost equations proper/2 
* CE 74 is refined into CE [201] 
* CE 71 is refined into CE [202] 
* CE 72 is refined into CE [203] 
* CE 73 is refined into CE [204] 


#### Refined cost equations proper/2 
* CE 201: proper(V1,Out) = 0
     [V1>=0,Out=0] 
* CE 202: proper(V1,Out) = 1
     [Out=3,V1=2] 
* CE 203: proper(V1,Out) = 1
     [Out=2,V1=1] 
* CE 204: proper(V1,Out) = 1
     [Out=1,V1=0] 

### Cost equations --> "Loop" of proper/2 
* CEs [201] --> Loop 168 
* CEs [202] --> Loop 169 
* CEs [203] --> Loop 170 
* CEs [204] --> Loop 171 

#### Loops of proper/2 
* Loop 168: proper(V1,Out) [V1>=0,Out=0] 
* Loop 169: proper(V1,Out) [Out=3,V1=2] 
* Loop 170: proper(V1,Out) [Out=2,V1=1] 
* Loop 171: proper(V1,Out) [Out=1,V1=0] 

### Ranking functions of CR proper(V1,Out) 

#### Partial ranking functions of CR proper(V1,Out) 


### Resulting Chains:proper(V1,Out) 
* [171]
* [170]
* [169]
* [168]


### Merging Chains  proper/2 into  External patterns of execution 
* [[171]] --> 1 
* [[170]] --> 2 
* [[169]] --> 3 
* [[168]] --> 4 


### Specialization of cost equations s/2 
* CE 107 is refined into CE [205] 
* CE 106 is refined into CE [206] 


#### Refined cost equations s/2 
* CE 205: s(V1,Out) = 0
     [V1>=0,Out=0] 
* CE 206: s(V1,Out) = 1+ s(W1,X1)
     [W1>=0,X1+1=Out,W1+1=V1] 

### Cost equations --> "Loop" of s/2 
* CEs [206] --> Loop 172 
* CEs [205] --> Loop 173 

#### Loops of s/2 
* Loop 172: s(V1,Out)->  s(V1',Out')
                  [V1'>=0,Out=Out'+1,V1'+1=V1] 
* Loop 173: s(V1,Out) [V1>=0,Out=0] 

### Ranking functions of CR s(V1,Out) 
* RF of phase [172]: [V1]

#### Partial ranking functions of CR s(V1,Out) 
* Partial RF of phase [172]:
  - RF of loop [172:1]:
    V1


### Resulting Chains:s(V1,Out) 
* [[172],173]
* [173]


### Merging Chains  s/2 into  External patterns of execution 
* [[173]] --> 1 
* [[173,[172]]] --> 2 


### Specialization of cost equations sel/3 
* CE 63 is refined into CE [207] 
* CE 61 is refined into CE [208] 
* CE 62 is refined into CE [209] 
* CE 60 is refined into CE [210] 


#### Refined cost equations sel/3 
* CE 207: sel(V1,V,Out) = 0
     [V>=0,V1>=0,Out=0] 
* CE 208: sel(V1,V,Out) = 1+ sel(V1,W1,X1)
     [W1>=0,V1>=0,X1+1=Out,W1+1=V] 
* CE 209: sel(V1,V,Out) = 1+ sel(W1,V,X1)
     [W1>=0,V>=0,X1+1=Out,W1+1=V1] 
* CE 210: sel(V1,V,Out) = 1+ sel(W1,X1,Y1)
     [X1>=0,W1>=0,Y1+1=Out,X1+1=V,W1+1=V1] 

### Cost equations --> "Loop" of sel/3 
* CEs [208] --> Loop 174 
* CEs [209] --> Loop 175 
* CEs [210] --> Loop 176 
* CEs [207] --> Loop 177 

#### Loops of sel/3 
* Loop 174: sel(V1,V,Out)->  sel(V1,V',Out')
                  [V>=1,V1>=0,Out=Out'+1,V=V'+1] 
* Loop 175: sel(V1,V,Out)->  sel(V1',V,Out')
                  [V>=0,V1>=1,Out=Out'+1,V1=V1'+1] 
* Loop 176: sel(V1,V,Out)->  sel(V1',V',Out')
                  [V>=1,V1>=1,Out=Out'+1,V=V'+1,V1=V1'+1] 
* Loop 177: sel(V1,V,Out) [V>=0,V1>=0,Out=0] 

### Ranking functions of CR sel(V1,V,Out) 
* RF of phase [174,175,176]: [V1+V]

#### Partial ranking functions of CR sel(V1,V,Out) 
* Partial RF of phase [174,175,176]:
  - RF of loop [174:1,176:1]:
    V
  - RF of loop [175:1,176:1]:
    V1


### Resulting Chains:sel(V1,V,Out) 
* [[174,175,176],177]
* [177]


### Merging Chains  sel/3 into  External patterns of execution 
* [[177]] --> 1 
* [[177,[174,175,176]]] --> 2 


### Specialization of cost equations snd/2 
* CE 52 is refined into CE [211] 
* CE 51 is refined into CE [212] 


#### Refined cost equations snd/2 
* CE 211: snd(V1,Out) = 0
     [V1>=0,Out=0] 
* CE 212: snd(V1,Out) = 1+ snd(W1,X1)
     [W1>=0,X1+1=Out,W1+1=V1] 

### Cost equations --> "Loop" of snd/2 
* CEs [212] --> Loop 178 
* CEs [211] --> Loop 179 

#### Loops of snd/2 
* Loop 178: snd(V1,Out)->  snd(V1',Out')
                  [V1'>=0,Out=Out'+1,V1'+1=V1] 
* Loop 179: snd(V1,Out) [V1>=0,Out=0] 

### Ranking functions of CR snd(V1,Out) 
* RF of phase [178]: [V1]

#### Partial ranking functions of CR snd(V1,Out) 
* Partial RF of phase [178]:
  - RF of loop [178:1]:
    V1


### Resulting Chains:snd(V1,Out) 
* [[178],179]
* [179]


### Merging Chains  snd/2 into  External patterns of execution 
* [[179]] --> 1 
* [[179,[178]]] --> 2 


### Specialization of cost equations splitAt/3 
* CE 67 is refined into CE [213] 
* CE 65 is refined into CE [214] 
* CE 64 is refined into CE [215] 
* CE 66 is refined into CE [216] 


#### Refined cost equations splitAt/3 
* CE 213: splitAt(V1,V,Out) = 0
     [V>=0,V1>=0,Out=0] 
* CE 214: splitAt(V1,V,Out) = 1+ splitAt(V1,W1,X1)
     [W1>=0,V1>=0,X1+1=Out,W1+1=V] 
* CE 215: splitAt(V1,V,Out) = 1+ splitAt(W1,V,X1)
     [W1>=0,V>=0,X1+1=Out,W1+1=V1] 
* CE 216: splitAt(V1,V,Out) = 1+ splitAt(W1,X1,Y1)
     [X1>=0,W1>=0,Y1+1=Out,X1+1=V,W1+1=V1] 

### Cost equations --> "Loop" of splitAt/3 
* CEs [214] --> Loop 180 
* CEs [215] --> Loop 181 
* CEs [216] --> Loop 182 
* CEs [213] --> Loop 183 

#### Loops of splitAt/3 
* Loop 180: splitAt(V1,V,Out)->  splitAt(V1,V',Out')
                  [V>=1,V1>=0,Out=Out'+1,V=V'+1] 
* Loop 181: splitAt(V1,V,Out)->  splitAt(V1',V,Out')
                  [V>=0,V1>=1,Out=Out'+1,V1=V1'+1] 
* Loop 182: splitAt(V1,V,Out)->  splitAt(V1',V',Out')
                  [V>=1,V1>=1,Out=Out'+1,V=V'+1,V1=V1'+1] 
* Loop 183: splitAt(V1,V,Out) [V>=0,V1>=0,Out=0] 

### Ranking functions of CR splitAt(V1,V,Out) 
* RF of phase [180,181,182]: [V1+V]

#### Partial ranking functions of CR splitAt(V1,V,Out) 
* Partial RF of phase [180,181,182]:
  - RF of loop [180:1,182:1]:
    V
  - RF of loop [181:1,182:1]:
    V1


### Resulting Chains:splitAt(V1,V,Out) 
* [[180,181,182],183]
* [183]


### Merging Chains  splitAt/3 into  External patterns of execution 
* [[183]] --> 1 
* [[183,[180,181,182]]] --> 2 


### Specialization of cost equations tail/2 
* CE 50 is refined into CE [217] 
* CE 49 is refined into CE [218] 


#### Refined cost equations tail/2 
* CE 217: tail(V1,Out) = 0
     [V1>=0,Out=0] 
* CE 218: tail(V1,Out) = 1+ tail(W1,X1)
     [W1>=0,X1+1=Out,W1+1=V1] 

### Cost equations --> "Loop" of tail/2 
* CEs [218] --> Loop 184 
* CEs [217] --> Loop 185 

#### Loops of tail/2 
* Loop 184: tail(V1,Out)->  tail(V1',Out')
                  [V1'>=0,Out=Out'+1,V1'+1=V1] 
* Loop 185: tail(V1,Out) [V1>=0,Out=0] 

### Ranking functions of CR tail(V1,Out) 
* RF of phase [184]: [V1]

#### Partial ranking functions of CR tail(V1,Out) 
* Partial RF of phase [184]:
  - RF of loop [184:1]:
    V1


### Resulting Chains:tail(V1,Out) 
* [[184],185]
* [185]


### Merging Chains  tail/2 into  External patterns of execution 
* [[185]] --> 1 
* [[185,[184]]] --> 2 


### Specialization of cost equations take/3 
* CE 114 is refined into CE [219] 
* CE 113 is refined into CE [220] 
* CE 111 is refined into CE [221] 
* CE 112 is refined into CE [222] 


#### Refined cost equations take/3 
* CE 219: take(V1,V,Out) = 0
     [V>=0,V1>=0,Out=0] 
* CE 220: take(V1,V,Out) = 1+ take(V1,W1,X1)
     [W1>=0,V1>=0,X1+1=Out,W1+1=V] 
* CE 221: take(V1,V,Out) = 1+ take(W1,V,X1)
     [W1>=0,V>=0,X1+1=Out,W1+1=V1] 
* CE 222: take(V1,V,Out) = 1+ take(W1,X1,Y1)
     [X1>=0,W1>=0,Y1+1=Out,X1+1=V,W1+1=V1] 

### Cost equations --> "Loop" of take/3 
* CEs [220] --> Loop 186 
* CEs [221] --> Loop 187 
* CEs [222] --> Loop 188 
* CEs [219] --> Loop 189 

#### Loops of take/3 
* Loop 186: take(V1,V,Out)->  take(V1,V',Out')
                  [V>=1,V1>=0,Out=Out'+1,V=V'+1] 
* Loop 187: take(V1,V,Out)->  take(V1',V,Out')
                  [V>=0,V1>=1,Out=Out'+1,V1=V1'+1] 
* Loop 188: take(V1,V,Out)->  take(V1',V',Out')
                  [V>=1,V1>=1,Out=Out'+1,V=V'+1,V1=V1'+1] 
* Loop 189: take(V1,V,Out) [V>=0,V1>=0,Out=0] 

### Ranking functions of CR take(V1,V,Out) 
* RF of phase [186,187,188]: [V1+V]

#### Partial ranking functions of CR take(V1,V,Out) 
* Partial RF of phase [186,187,188]:
  - RF of loop [186:1,188:1]:
    V
  - RF of loop [187:1,188:1]:
    V1


### Resulting Chains:take(V1,V,Out) 
* [[186,187,188],189]
* [189]


### Merging Chains  take/3 into  External patterns of execution 
* [[189]] --> 1 
* [[189,[186,187,188]]] --> 2 


### Specialization of cost equations top/2 
* CE 39 is refined into CE [223] 
* CE 37 is refined into CE [224] 
* CE 38 is refined into CE [225,226,227,228] 


#### Refined cost equations top/2 
* CE 223: top(V1,Out) = 0
     [V1>=0,Out=0] 
* CE 224: top(V1,Out) = 1+ top(V1,Out)
     [V1>=1] 
* CE 225: top(V1,Out) = 1+ proper(W1,X1):1+ top(Y1,Out)
     [Y1=1,X1=1,W1=0,V1=1] 
* CE 226: top(V1,Out) = 1+ proper(W1,X1):2+ top(Y1,Out)
     [Y1=2,X1=2,W1=1,V1=2] 
* CE 227: top(V1,Out) = 1+ proper(W1,X1):3+ top(Y1,Out)
     [Y1=3,X1=3,W1=2,V1=3] 
* CE 228: top(V1,Out) = 1+ proper(W1,X1):4+ top(Y1,Out)
     [W1>=0,W1+1=V1,Y1=0,X1=0] 

### Cost equations --> "Loop" of top/2 
* CEs [228] --> Loop 190 
* CEs [227] --> Loop 191 
* CEs [226] --> Loop 192 
* CEs [224,225] --> Loop 193 
* CEs [223] --> Loop 194 

#### Loops of top/2 
* Loop 190: top(V1,Out)->  top(V1',Out)
                  [V1>=1,V1'=0] 
* Loop 191: top(V1,Out)->  top(V1',Out)
                  [V1'=3,V1=3] 
* Loop 192: top(V1,Out)->  top(V1',Out)
                  [V1'=2,V1=2] 
* Loop 193: top(V1,Out)->  top(V1,Out)
                  [V1>=1] 
* Loop 194: top(V1,Out) [V1>=0,Out=0] 

### Ranking functions of CR top(V1,Out) 

#### Partial ranking functions of CR top(V1,Out) 


### Resulting Chains:top(V1,Out) 
* [[191,192,193]]...
* [[191,192,193],194]
* [[191,192,193],190,194]
* [194]
* [190,194]


### Merging Chains  top/2 into  External patterns of execution 
* [[194,190],[194],[194,190,[191,192,193]],[194,[191,192,193]]] --> 1 
* [[[191,192,193]]] --> 2 


### Specialization of cost equations start/4 
* CE 2 is refined into CE [229,230] 
* CE 3 is refined into CE [231,232] 
* CE 4 is refined into CE [233,234] 
* CE 5 is refined into CE [235,236] 
* CE 6 is refined into CE [237,238] 
* CE 7 is refined into CE [239,240] 
* CE 8 is refined into CE [241,242] 
* CE 9 is refined into CE [243,244] 
* CE 10 is refined into CE [245,246] 
* CE 11 is refined into CE [247,248] 
* CE 12 is refined into CE [249,250] 
* CE 13 is refined into CE [251,252] 
* CE 14 is refined into CE [253,254,255,256] 
* CE 15 is refined into CE [257,258] 
* CE 16 is refined into CE [259,260] 
* CE 17 is refined into CE [261,262] 
* CE 18 is refined into CE [263,264] 
* CE 19 is refined into CE [265,266] 
* CE 20 is refined into CE [267,268] 
* CE 21 is refined into CE [269,270] 
* CE 22 is refined into CE [271,272] 
* CE 23 is refined into CE [273,274] 
* CE 24 is refined into CE [275,276] 
* CE 25 is refined into CE [277,278] 
* CE 26 is refined into CE [279,280] 
* CE 27 is refined into CE [281,282] 
* CE 28 is refined into CE [283,284] 
* CE 29 is refined into CE [285,286] 
* CE 30 is refined into CE [287,288] 
* CE 31 is refined into CE [289,290] 
* CE 32 is refined into CE [291,292] 
* CE 33 is refined into CE [293,294] 


#### Refined cost equations start/4 
* CE 229: start(V1,V,V2,V3) = 0+ fun(V1,V,V2,V3,W3):1
     [V3>=0,V2>=0,V>=0,V1>=0,W3=0] 
* CE 230: start(V1,V,V2,V3) = 0+ fun(V1,V,V2,V3,W3):2
     [V1>=W3,W3>=1,V3>=0,V2>=0,V>=0] 
* CE 231: start(V1,V,V2,V3) = 0+ top(V1,W3):1
     [V1>=0,W3=0] 
* CE 232: start(V1,V,V2,V3) = 0+ top(V1,W3):2
     [V1>=1] 
* CE 233: start(V1,V,V2,V3) = 0+ fun1(V1,V,V2,W3):1
     [V2>=0,V>=0,V1>=0,W3=0] 
* CE 234: start(V1,V,V2,V3) = 0+ fun1(V1,V,V2,W3):2
     [V1>=W3,W3>=1,V2>=0,V>=0] 
* CE 235: start(V1,V,V2,V3) = 0+ fun2(V1,V,W3):1
     [V>=0,V1>=0,W3=0] 
* CE 236: start(V1,V,V2,V3) = 0+ fun2(V1,V,W3):2
     [V1>=W3,W3>=1,V>=0] 
* CE 237: start(V1,V,V2,V3) = 0+ cons(V1,V,W3):1
     [V>=0,V1>=0,W3=0] 
* CE 238: start(V1,V,V2,V3) = 0+ cons(V1,V,W3):2
     [V1>=W3,W3>=1,V>=0] 
* CE 239: start(V1,V,V2,V3) = 0+ tail(V1,W3):1
     [V1>=0,W3=0] 
* CE 240: start(V1,V,V2,V3) = 0+ tail(V1,W3):2
     [V1>=W3,W3>=1] 
* CE 241: start(V1,V,V2,V3) = 0+ snd(V1,W3):1
     [V1>=0,W3=0] 
* CE 242: start(V1,V,V2,V3) = 0+ snd(V1,W3):2
     [V1>=W3,W3>=1] 
* CE 243: start(V1,V,V2,V3) = 0+ fun3(V1,V,W3):1
     [V>=0,V1>=0,W3=0] 
* CE 244: start(V1,V,V2,V3) = 0+ fun3(V1,V,W3):2
     [V1>=W3,W3>=1,V>=0] 
* CE 245: start(V1,V,V2,V3) = 0+ pair(V1,V,W3):1
     [V>=0,V1>=0,W3=0] 
* CE 246: start(V1,V,V2,V3) = 0+ pair(V1,V,W3):2
     [V1+V>=W3,W3>=1,V>=0,V1>=0] 
* CE 247: start(V1,V,V2,V3) = 0+ sel(V1,V,W3):1
     [V>=0,V1>=0,W3=0] 
* CE 248: start(V1,V,V2,V3) = 0+ sel(V1,V,W3):2
     [V1+V>=W3,W3>=1,V>=0,V1>=0] 
* CE 249: start(V1,V,V2,V3) = 0+ splitAt(V1,V,W3):1
     [V>=0,V1>=0,W3=0] 
* CE 250: start(V1,V,V2,V3) = 0+ splitAt(V1,V,W3):2
     [V1+V>=W3,W3>=1,V>=0,V1>=0] 
* CE 251: start(V1,V,V2,V3) = 0+ fun4(V1,V,V2,W3):1
     [V2>=0,V>=0,V1>=0,W3=0] 
* CE 252: start(V1,V,V2,V3) = 0+ fun4(V1,V,V2,W3):2
     [V1>=W3,W3>=1,V2>=0,V>=0] 
* CE 253: start(V1,V,V2,V3) = 0+ proper(W3,X3):1
     [X3=1,W3=0,V1=0] 
* CE 254: start(V1,V,V2,V3) = 0+ proper(W3,X3):2
     [X3=2,W3=1,V1=1] 
* CE 255: start(V1,V,V2,V3) = 0+ proper(W3,X3):3
     [X3=3,W3=2,V1=2] 
* CE 256: start(V1,V,V2,V3) = 0+ proper(V1,W3):4
     [V1>=0,W3=0] 
* CE 257: start(V1,V,V2,V3) = 0+ fun5(V1,V,W3):1
     [V>=0,V1>=0,W3=0] 
* CE 258: start(V1,V,V2,V3) = 0+ fun5(V1,V,W3):2
     [V1>=W3,W3>=1,V>=0] 
* CE 259: start(V1,V,V2,V3) = 0+ fun6(V1,V,V2,W3):1
     [V2>=0,V>=0,V1>=0,W3=0] 
* CE 260: start(V1,V,V2,V3) = 0+ fun6(V1,V,V2,W3):2
     [V1>=W3,W3>=1,V2>=0,V>=0] 
* CE 261: start(V1,V,V2,V3) = 0+ fun7(V1,V,V2,W3):1
     [V2>=0,V>=0,V1>=0,W3=0] 
* CE 262: start(V1,V,V2,V3) = 0+ fun7(V1,V,V2,W3):2
     [V1>=W3,W3>=1,V2>=0,V>=0] 
* CE 263: start(V1,V,V2,V3) = 0+ fun8(V1,V,W3):1
     [V>=0,V1>=0,W3=0] 
* CE 264: start(V1,V,V2,V3) = 0+ fun8(V1,V,W3):2
     [V1>=W3,W3>=1,V>=0] 
* CE 265: start(V1,V,V2,V3) = 0+ head(V1,W3):1
     [V1>=0,W3=0] 
* CE 266: start(V1,V,V2,V3) = 0+ head(V1,W3):2
     [V1>=W3,W3>=1] 
* CE 267: start(V1,V,V2,V3) = 0+ fun9(V1,V,V2,V3,W3):1
     [V3>=0,V2>=0,V>=0,V1>=0,W3=0] 
* CE 268: start(V1,V,V2,V3) = 0+ fun9(V1,V,V2,V3,W3):2
     [V1>=W3,W3>=1,V3>=0,V2>=0,V>=0] 
* CE 269: start(V1,V,V2,V3) = 0+ fun10(V1,V,V2,V3,W3):1
     [V3>=0,V2>=0,V>=0,V1>=0,W3=0] 
* CE 270: start(V1,V,V2,V3) = 0+ fun10(V1,V,V2,V3,W3):2
     [V1>=W3,W3>=1,V3>=0,V2>=0,V>=0] 
* CE 271: start(V1,V,V2,V3) = 0+ natsFrom(V1,W3):1
     [V1>=0,W3=0] 
* CE 272: start(V1,V,V2,V3) = 0+ natsFrom(V1,W3):2
     [V1>=W3,W3>=1] 
* CE 273: start(V1,V,V2,V3) = 0+ fst(V1,W3):1
     [V1>=0,W3=0] 
* CE 274: start(V1,V,V2,V3) = 0+ fst(V1,W3):2
     [V1>=W3,W3>=1] 
* CE 275: start(V1,V,V2,V3) = 0+ afterNth(V1,V,W3):1
     [V>=0,V1>=0,W3=0] 
* CE 276: start(V1,V,V2,V3) = 0+ afterNth(V1,V,W3):2
     [V1+V>=W3,W3>=1,V>=0,V1>=0] 
* CE 277: start(V1,V,V2,V3) = 0+ fun11(V1,V,W3):1
     [V>=0,V1>=0,W3=0] 
* CE 278: start(V1,V,V2,V3) = 0+ fun11(V1,V,W3):2
     [V1>=W3,W3>=1,V>=0] 
* CE 279: start(V1,V,V2,V3) = 0+ s(V1,W3):1
     [V1>=0,W3=0] 
* CE 280: start(V1,V,V2,V3) = 0+ s(V1,W3):2
     [V1>=W3,W3>=1] 
* CE 281: start(V1,V,V2,V3) = 0+ fun12(V1,V,W3):1
     [V>=0,V1>=0,W3=0] 
* CE 282: start(V1,V,V2,V3) = 0+ fun12(V1,V,W3):2
     [V1>=W3,W3>=1,V>=0] 
* CE 283: start(V1,V,V2,V3) = 0+ take(V1,V,W3):1
     [V>=0,V1>=0,W3=0] 
* CE 284: start(V1,V,V2,V3) = 0+ take(V1,V,W3):2
     [V1+V>=W3,W3>=1,V>=0,V1>=0] 
* CE 285: start(V1,V,V2,V3) = 0+ fun13(V1,V,W3):1
     [V>=0,V1>=0,W3=0] 
* CE 286: start(V1,V,V2,V3) = 0+ fun13(V1,V,W3):2
     [V1>=W3,W3>=1,V>=0] 
* CE 287: start(V1,V,V2,V3) = 0+ fun14(V1,V,W3):1
     [V>=0,V1>=0,W3=0] 
* CE 288: start(V1,V,V2,V3) = 0+ fun14(V1,V,W3):2
     [V1>=W3,W3>=1,V>=0] 
* CE 289: start(V1,V,V2,V3) = 0+ fun15(V1,V,V2,W3):1
     [V2>=0,V>=0,V1>=0,W3=0] 
* CE 290: start(V1,V,V2,V3) = 0+ fun15(V1,V,V2,W3):2
     [V1>=W3,W3>=1,V2>=0,V>=0] 
* CE 291: start(V1,V,V2,V3) = 0+ fun16(V1,V,W3):1
     [V>=0,V1>=0,W3=0] 
* CE 292: start(V1,V,V2,V3) = 0+ fun16(V1,V,W3):2
     [V1>=W3,W3>=1,V>=0] 
* CE 293: start(V1,V,V2,V3) = 0+ fun17(V1,V,V2,W3):1
     [V2>=0,V>=0,V1>=0,W3=0] 
* CE 294: start(V1,V,V2,V3) = 0+ fun17(V1,V,V2,W3):2
     [V1>=W3,W3>=1,V2>=0,V>=0] 

### Cost equations --> "Loop" of start/4 
* CEs [255] --> Loop 195 
* CEs [254] --> Loop 196 
* CEs [229,230,231,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294] --> Loop 197 
* CEs [232] --> Loop 198 

#### Loops of start/4 
* Loop 195: start(V1,V,V2,V3) [V1=2] 
* Loop 196: start(V1,V,V2,V3) [V1=1] 
* Loop 197: start(V1,V,V2,V3) [V1>=0] 
* Loop 198: start(V1,V,V2,V3) [V1>=1] 

### Ranking functions of CR start(V1,V,V2,V3) 

#### Partial ranking functions of CR start(V1,V,V2,V3) 


### Resulting Chains:start(V1,V,V2,V3) 
* [198]...
* [197]
* [196]
* [195]


### Merging Chains  start/4 into  External patterns of execution 
* [[196],[197]] --> 1 
* [[195]] --> 2 
* [[198]] --> 3 


Computing Bounds
=====================================

#### Cost of loops [97,98,99] 

 * loop 97:afterNth(V1,V,Out) -> [afterNth(V1',V',Out')] 
1
 * loop 98:afterNth(V1,V,Out) -> [afterNth(V1',V',Out')] 
1
 * loop 99:afterNth(V1,V,Out) -> [afterNth(V1',V',Out')] 
1
#### Cost of phase [97,98,99]:afterNth(V1,V,Out) -> [afterNth(V1',V',Out')] 
1*it(97)+1*it(98)+1*it(99)+0
  Such that:aux(1) =< V1
aux(2) =< V1+V
aux(3) =< V1+V-V1'-V'
aux(4) =< V1-V1'
aux(5) =< V
aux(6) =< V-V'
it(98) =< aux(1)
it(99) =< aux(1)
it(97) =< aux(2)
it(98) =< aux(2)
it(99) =< aux(2)
it(97) =< aux(3)
it(98) =< aux(3)
it(99) =< aux(3)
it(98) =< aux(4)
it(99) =< aux(4)
it(97) =< aux(5)
it(99) =< aux(5)
it(97) =< aux(6)
it(99) =< aux(6)

#### Cost of chains of afterNth(V1,V,Out):
* Chain [[97,98,99],100]: 1*it(97)+1*it(98)+1*it(99)+0
  Such that:aux(7) =< V1
aux(8) =< V1+V
aux(9) =< V
it(98) =< aux(7)
it(99) =< aux(7)
it(97) =< aux(8)
it(98) =< aux(8)
it(99) =< aux(8)
it(97) =< aux(9)
it(99) =< aux(9)

  with precondition: [V1>=0,V>=0,Out>=1,V+V1>=Out] 

* Chain [100]: 0
  with precondition: [Out=0,V1>=0,V>=0] 


#### Cost of loops [101,102] 

 * loop 101:cons(V1,V,Out) -> [cons(V1',V',Out')] 
1
 * loop 102:cons(V1,V,Out) -> [cons(V1',V',Out')] 
1
#### Cost of phase [101,102]:cons(V1,V,Out) -> [cons(V1',V',Out')] 
1*it(101)+1*it(102)+0
  Such that:it(102) =< V
it(102) =< V-V'
aux(10) =< V1
aux(11) =< V1-V1'
it(101) =< aux(10)
it(102) =< aux(10)
it(101) =< aux(11)
it(102) =< aux(11)

#### Cost of chains of cons(V1,V,Out):
* Chain [[101,102],103]: 1*it(101)+1*it(102)+0
  Such that:aux(10) =< V1
it(102) =< V
aux(11) =< Out
it(101) =< aux(10)
it(102) =< aux(10)
it(101) =< aux(11)
it(102) =< aux(11)

  with precondition: [V>=0,Out>=1,V1>=Out] 

* Chain [103]: 0
  with precondition: [Out=0,V1>=0,V>=0] 


#### Cost of loops [104] 

 * loop 104:fst(V1,Out) -> [fst(V1',Out')] 
1
#### Cost of phase [104]:fst(V1,Out) -> [fst(V1',Out')] 
1*it(104)+0
  Such that:it(104) =< V1
it(104) =< V1-V1'

#### Cost of chains of fst(V1,Out):
* Chain [[104],105]: 1*it(104)+0
  Such that:it(104) =< Out

  with precondition: [Out>=1,V1>=Out] 

* Chain [105]: 0
  with precondition: [Out=0,V1>=0] 


#### Cost of loops [106,107] 

 * loop 106:fun(V1,V,V2,V3,Out) -> [fun(V1',V',V2',V3',Out')] 
1
 * loop 107:fun(V1,V,V2,V3,Out) -> [fun(V1',V',V2',V3',Out')] 
1
#### Cost of phase [106,107]:fun(V1,V,V2,V3,Out) -> [fun(V1',V',V2',V3',Out')] 
1*it(106)+1*it(107)+0
  Such that:it(107) =< V
it(107) =< V-V'
it(107) =< V2
it(107) =< V2-V2'
it(107) =< V3
it(107) =< V3-V3'
aux(12) =< V1
aux(13) =< V1-V1'
it(106) =< aux(12)
it(107) =< aux(12)
it(106) =< aux(13)
it(107) =< aux(13)

#### Cost of chains of fun(V1,V,V2,V3,Out):
* Chain [[106,107],108]: 1*it(106)+1*it(107)+0
  Such that:aux(12) =< V1
it(107) =< V
aux(13) =< Out
it(106) =< aux(12)
it(107) =< aux(12)
it(106) =< aux(13)
it(107) =< aux(13)

  with precondition: [V>=0,V2>=0,V3>=0,Out>=1,V1>=Out] 

* Chain [108]: 0
  with precondition: [Out=0,V1>=0,V>=0,V2>=0,V3>=0] 


#### Cost of loops [109,110] 

 * loop 109:fun1(V1,V,V2,Out) -> [fun1(V1',V',V2',Out')] 
1
 * loop 110:fun1(V1,V,V2,Out) -> [fun1(V1',V',V2',Out')] 
1
#### Cost of phase [109,110]:fun1(V1,V,V2,Out) -> [fun1(V1',V',V2',Out')] 
1*it(109)+1*it(110)+0
  Such that:it(110) =< V
it(110) =< V-V'
it(110) =< V2
it(110) =< V2-V2'
aux(14) =< V1
aux(15) =< V1-V1'
it(109) =< aux(14)
it(110) =< aux(14)
it(109) =< aux(15)
it(110) =< aux(15)

#### Cost of chains of fun1(V1,V,V2,Out):
* Chain [[109,110],111]: 1*it(109)+1*it(110)+0
  Such that:aux(14) =< V1
it(110) =< V
aux(15) =< Out
it(109) =< aux(14)
it(110) =< aux(14)
it(109) =< aux(15)
it(110) =< aux(15)

  with precondition: [V>=0,V2>=0,Out>=1,V1>=Out] 

* Chain [111]: 0
  with precondition: [Out=0,V1>=0,V>=0,V2>=0] 


#### Cost of loops [112,113] 

 * loop 112:fun10(V1,V,V2,V3,Out) -> [fun10(V1',V',V2',V3',Out')] 
1
 * loop 113:fun10(V1,V,V2,V3,Out) -> [fun10(V1',V',V2',V3',Out')] 
1
#### Cost of phase [112,113]:fun10(V1,V,V2,V3,Out) -> [fun10(V1',V',V2',V3',Out')] 
1*it(112)+1*it(113)+0
  Such that:it(113) =< V
it(113) =< V-V'
it(113) =< V2
it(113) =< V2-V2'
it(113) =< V3
it(113) =< V3-V3'
aux(16) =< V1
aux(17) =< V1-V1'
it(112) =< aux(16)
it(113) =< aux(16)
it(112) =< aux(17)
it(113) =< aux(17)

#### Cost of chains of fun10(V1,V,V2,V3,Out):
* Chain [[112,113],114]: 1*it(112)+1*it(113)+0
  Such that:aux(16) =< V1
it(113) =< V
aux(17) =< Out
it(112) =< aux(16)
it(113) =< aux(16)
it(112) =< aux(17)
it(113) =< aux(17)

  with precondition: [V>=0,V2>=0,V3>=0,Out>=1,V1>=Out] 

* Chain [114]: 0
  with precondition: [Out=0,V1>=0,V>=0,V2>=0,V3>=0] 


#### Cost of loops [115,116] 

 * loop 115:fun11(V1,V,Out) -> [fun11(V1',V',Out')] 
1
 * loop 116:fun11(V1,V,Out) -> [fun11(V1',V',Out')] 
1
#### Cost of phase [115,116]:fun11(V1,V,Out) -> [fun11(V1',V',Out')] 
1*it(115)+1*it(116)+0
  Such that:it(116) =< V
it(116) =< V-V'
aux(18) =< V1
aux(19) =< V1-V1'
it(115) =< aux(18)
it(116) =< aux(18)
it(115) =< aux(19)
it(116) =< aux(19)

#### Cost of chains of fun11(V1,V,Out):
* Chain [[115,116],117]: 1*it(115)+1*it(116)+0
  Such that:aux(18) =< V1
it(116) =< V
aux(19) =< Out
it(115) =< aux(18)
it(116) =< aux(18)
it(115) =< aux(19)
it(116) =< aux(19)

  with precondition: [V>=0,Out>=1,V1>=Out] 

* Chain [117]: 0
  with precondition: [Out=0,V1>=0,V>=0] 


#### Cost of loops [118,119] 

 * loop 118:fun12(V1,V,Out) -> [fun12(V1',V',Out')] 
1
 * loop 119:fun12(V1,V,Out) -> [fun12(V1',V',Out')] 
1
#### Cost of phase [118,119]:fun12(V1,V,Out) -> [fun12(V1',V',Out')] 
1*it(118)+1*it(119)+0
  Such that:it(119) =< V
it(119) =< V-V'
aux(20) =< V1
aux(21) =< V1-V1'
it(118) =< aux(20)
it(119) =< aux(20)
it(118) =< aux(21)
it(119) =< aux(21)

#### Cost of chains of fun12(V1,V,Out):
* Chain [[118,119],120]: 1*it(118)+1*it(119)+0
  Such that:aux(20) =< V1
it(119) =< V
aux(21) =< Out
it(118) =< aux(20)
it(119) =< aux(20)
it(118) =< aux(21)
it(119) =< aux(21)

  with precondition: [V>=0,Out>=1,V1>=Out] 

* Chain [120]: 0
  with precondition: [Out=0,V1>=0,V>=0] 


#### Cost of loops [121,122] 

 * loop 121:fun13(V1,V,Out) -> [fun13(V1',V',Out')] 
1
 * loop 122:fun13(V1,V,Out) -> [fun13(V1',V',Out')] 
1
#### Cost of phase [121,122]:fun13(V1,V,Out) -> [fun13(V1',V',Out')] 
1*it(121)+1*it(122)+0
  Such that:it(122) =< V
it(122) =< V-V'
aux(22) =< V1
aux(23) =< V1-V1'
it(121) =< aux(22)
it(122) =< aux(22)
it(121) =< aux(23)
it(122) =< aux(23)

#### Cost of chains of fun13(V1,V,Out):
* Chain [[121,122],123]: 1*it(121)+1*it(122)+0
  Such that:aux(22) =< V1
it(122) =< V
aux(23) =< Out
it(121) =< aux(22)
it(122) =< aux(22)
it(121) =< aux(23)
it(122) =< aux(23)

  with precondition: [V>=0,Out>=1,V1>=Out] 

* Chain [123]: 0
  with precondition: [Out=0,V1>=0,V>=0] 


#### Cost of loops [124,125] 

 * loop 124:fun14(V1,V,Out) -> [fun14(V1',V',Out')] 
1
 * loop 125:fun14(V1,V,Out) -> [fun14(V1',V',Out')] 
1
#### Cost of phase [124,125]:fun14(V1,V,Out) -> [fun14(V1',V',Out')] 
1*it(124)+1*it(125)+0
  Such that:it(125) =< V
it(125) =< V-V'
aux(24) =< V1
aux(25) =< V1-V1'
it(124) =< aux(24)
it(125) =< aux(24)
it(124) =< aux(25)
it(125) =< aux(25)

#### Cost of chains of fun14(V1,V,Out):
* Chain [[124,125],126]: 1*it(124)+1*it(125)+0
  Such that:aux(24) =< V1
it(125) =< V
aux(25) =< Out
it(124) =< aux(24)
it(125) =< aux(24)
it(124) =< aux(25)
it(125) =< aux(25)

  with precondition: [V>=0,Out>=1,V1>=Out] 

* Chain [126]: 0
  with precondition: [Out=0,V1>=0,V>=0] 


#### Cost of loops [127,128] 

 * loop 127:fun15(V1,V,V2,Out) -> [fun15(V1',V',V2',Out')] 
1
 * loop 128:fun15(V1,V,V2,Out) -> [fun15(V1',V',V2',Out')] 
1
#### Cost of phase [127,128]:fun15(V1,V,V2,Out) -> [fun15(V1',V',V2',Out')] 
1*it(127)+1*it(128)+0
  Such that:it(128) =< V
it(128) =< V-V'
it(128) =< V2
it(128) =< V2-V2'
aux(26) =< V1
aux(27) =< V1-V1'
it(127) =< aux(26)
it(128) =< aux(26)
it(127) =< aux(27)
it(128) =< aux(27)

#### Cost of chains of fun15(V1,V,V2,Out):
* Chain [[127,128],129]: 1*it(127)+1*it(128)+0
  Such that:aux(26) =< V1
it(128) =< V
aux(27) =< Out
it(127) =< aux(26)
it(128) =< aux(26)
it(127) =< aux(27)
it(128) =< aux(27)

  with precondition: [V>=0,V2>=0,Out>=1,V1>=Out] 

* Chain [129]: 0
  with precondition: [Out=0,V1>=0,V>=0,V2>=0] 


#### Cost of loops [130,131] 

 * loop 130:fun16(V1,V,Out) -> [fun16(V1',V',Out')] 
1
 * loop 131:fun16(V1,V,Out) -> [fun16(V1',V',Out')] 
1
#### Cost of phase [130,131]:fun16(V1,V,Out) -> [fun16(V1',V',Out')] 
1*it(130)+1*it(131)+0
  Such that:it(131) =< V
it(131) =< V-V'
aux(28) =< V1
aux(29) =< V1-V1'
it(130) =< aux(28)
it(131) =< aux(28)
it(130) =< aux(29)
it(131) =< aux(29)

#### Cost of chains of fun16(V1,V,Out):
* Chain [[130,131],132]: 1*it(130)+1*it(131)+0
  Such that:aux(28) =< V1
it(131) =< V
aux(29) =< Out
it(130) =< aux(28)
it(131) =< aux(28)
it(130) =< aux(29)
it(131) =< aux(29)

  with precondition: [V>=0,Out>=1,V1>=Out] 

* Chain [132]: 0
  with precondition: [Out=0,V1>=0,V>=0] 


#### Cost of loops [133,134] 

 * loop 133:fun17(V1,V,V2,Out) -> [fun17(V1',V',V2',Out')] 
1
 * loop 134:fun17(V1,V,V2,Out) -> [fun17(V1',V',V2',Out')] 
1
#### Cost of phase [133,134]:fun17(V1,V,V2,Out) -> [fun17(V1',V',V2',Out')] 
1*it(133)+1*it(134)+0
  Such that:it(134) =< V
it(134) =< V-V'
it(134) =< V2
it(134) =< V2-V2'
aux(30) =< V1
aux(31) =< V1-V1'
it(133) =< aux(30)
it(134) =< aux(30)
it(133) =< aux(31)
it(134) =< aux(31)

#### Cost of chains of fun17(V1,V,V2,Out):
* Chain [[133,134],135]: 1*it(133)+1*it(134)+0
  Such that:aux(30) =< V1
it(134) =< V
aux(31) =< Out
it(133) =< aux(30)
it(134) =< aux(30)
it(133) =< aux(31)
it(134) =< aux(31)

  with precondition: [V>=0,V2>=0,Out>=1,V1>=Out] 

* Chain [135]: 0
  with precondition: [Out=0,V1>=0,V>=0,V2>=0] 


#### Cost of loops [136,137] 

 * loop 136:fun2(V1,V,Out) -> [fun2(V1',V',Out')] 
1
 * loop 137:fun2(V1,V,Out) -> [fun2(V1',V',Out')] 
1
#### Cost of phase [136,137]:fun2(V1,V,Out) -> [fun2(V1',V',Out')] 
1*it(136)+1*it(137)+0
  Such that:it(137) =< V
it(137) =< V-V'
aux(32) =< V1
aux(33) =< V1-V1'
it(136) =< aux(32)
it(137) =< aux(32)
it(136) =< aux(33)
it(137) =< aux(33)

#### Cost of chains of fun2(V1,V,Out):
* Chain [[136,137],138]: 1*it(136)+1*it(137)+0
  Such that:aux(32) =< V1
it(137) =< V
aux(33) =< Out
it(136) =< aux(32)
it(137) =< aux(32)
it(136) =< aux(33)
it(137) =< aux(33)

  with precondition: [V>=0,Out>=1,V1>=Out] 

* Chain [138]: 0
  with precondition: [Out=0,V1>=0,V>=0] 


#### Cost of loops [139,140] 

 * loop 139:fun3(V1,V,Out) -> [fun3(V1',V',Out')] 
1
 * loop 140:fun3(V1,V,Out) -> [fun3(V1',V',Out')] 
1
#### Cost of phase [139,140]:fun3(V1,V,Out) -> [fun3(V1',V',Out')] 
1*it(139)+1*it(140)+0
  Such that:it(140) =< V
it(140) =< V-V'
aux(34) =< V1
aux(35) =< V1-V1'
it(139) =< aux(34)
it(140) =< aux(34)
it(139) =< aux(35)
it(140) =< aux(35)

#### Cost of chains of fun3(V1,V,Out):
* Chain [[139,140],141]: 1*it(139)+1*it(140)+0
  Such that:aux(34) =< V1
it(140) =< V
aux(35) =< Out
it(139) =< aux(34)
it(140) =< aux(34)
it(139) =< aux(35)
it(140) =< aux(35)

  with precondition: [V>=0,Out>=1,V1>=Out] 

* Chain [141]: 0
  with precondition: [Out=0,V1>=0,V>=0] 


#### Cost of loops [142,143] 

 * loop 142:fun4(V1,V,V2,Out) -> [fun4(V1',V',V2',Out')] 
1
 * loop 143:fun4(V1,V,V2,Out) -> [fun4(V1',V',V2',Out')] 
1
#### Cost of phase [142,143]:fun4(V1,V,V2,Out) -> [fun4(V1',V',V2',Out')] 
1*it(142)+1*it(143)+0
  Such that:it(143) =< V
it(143) =< V-V'
it(143) =< V2
it(143) =< V2-V2'
aux(36) =< V1
aux(37) =< V1-V1'
it(142) =< aux(36)
it(143) =< aux(36)
it(142) =< aux(37)
it(143) =< aux(37)

#### Cost of chains of fun4(V1,V,V2,Out):
* Chain [[142,143],144]: 1*it(142)+1*it(143)+0
  Such that:aux(36) =< V1
it(143) =< V
aux(37) =< Out
it(142) =< aux(36)
it(143) =< aux(36)
it(142) =< aux(37)
it(143) =< aux(37)

  with precondition: [V>=0,V2>=0,Out>=1,V1>=Out] 

* Chain [144]: 0
  with precondition: [Out=0,V1>=0,V>=0,V2>=0] 


#### Cost of loops [145,146] 

 * loop 145:fun5(V1,V,Out) -> [fun5(V1',V',Out')] 
1
 * loop 146:fun5(V1,V,Out) -> [fun5(V1',V',Out')] 
1
#### Cost of phase [145,146]:fun5(V1,V,Out) -> [fun5(V1',V',Out')] 
1*it(145)+1*it(146)+0
  Such that:it(146) =< V
it(146) =< V-V'
aux(38) =< V1
aux(39) =< V1-V1'
it(145) =< aux(38)
it(146) =< aux(38)
it(145) =< aux(39)
it(146) =< aux(39)

#### Cost of chains of fun5(V1,V,Out):
* Chain [[145,146],147]: 1*it(145)+1*it(146)+0
  Such that:aux(38) =< V1
it(146) =< V
aux(39) =< Out
it(145) =< aux(38)
it(146) =< aux(38)
it(145) =< aux(39)
it(146) =< aux(39)

  with precondition: [V>=0,Out>=1,V1>=Out] 

* Chain [147]: 0
  with precondition: [Out=0,V1>=0,V>=0] 


#### Cost of loops [148,149] 

 * loop 148:fun6(V1,V,V2,Out) -> [fun6(V1',V',V2',Out')] 
1
 * loop 149:fun6(V1,V,V2,Out) -> [fun6(V1',V',V2',Out')] 
1
#### Cost of phase [148,149]:fun6(V1,V,V2,Out) -> [fun6(V1',V',V2',Out')] 
1*it(148)+1*it(149)+0
  Such that:it(149) =< V
it(149) =< V-V'
it(149) =< V2
it(149) =< V2-V2'
aux(40) =< V1
aux(41) =< V1-V1'
it(148) =< aux(40)
it(149) =< aux(40)
it(148) =< aux(41)
it(149) =< aux(41)

#### Cost of chains of fun6(V1,V,V2,Out):
* Chain [[148,149],150]: 1*it(148)+1*it(149)+0
  Such that:aux(40) =< V1
it(149) =< V
aux(41) =< Out
it(148) =< aux(40)
it(149) =< aux(40)
it(148) =< aux(41)
it(149) =< aux(41)

  with precondition: [V>=0,V2>=0,Out>=1,V1>=Out] 

* Chain [150]: 0
  with precondition: [Out=0,V1>=0,V>=0,V2>=0] 


#### Cost of loops [151,152] 

 * loop 151:fun7(V1,V,V2,Out) -> [fun7(V1',V',V2',Out')] 
1
 * loop 152:fun7(V1,V,V2,Out) -> [fun7(V1',V',V2',Out')] 
1
#### Cost of phase [151,152]:fun7(V1,V,V2,Out) -> [fun7(V1',V',V2',Out')] 
1*it(151)+1*it(152)+0
  Such that:it(152) =< V
it(152) =< V-V'
it(152) =< V2
it(152) =< V2-V2'
aux(42) =< V1
aux(43) =< V1-V1'
it(151) =< aux(42)
it(152) =< aux(42)
it(151) =< aux(43)
it(152) =< aux(43)

#### Cost of chains of fun7(V1,V,V2,Out):
* Chain [[151,152],153]: 1*it(151)+1*it(152)+0
  Such that:aux(42) =< V1
it(152) =< V
aux(43) =< Out
it(151) =< aux(42)
it(152) =< aux(42)
it(151) =< aux(43)
it(152) =< aux(43)

  with precondition: [V>=0,V2>=0,Out>=1,V1>=Out] 

* Chain [153]: 0
  with precondition: [Out=0,V1>=0,V>=0,V2>=0] 


#### Cost of loops [154,155] 

 * loop 154:fun8(V1,V,Out) -> [fun8(V1',V',Out')] 
1
 * loop 155:fun8(V1,V,Out) -> [fun8(V1',V',Out')] 
1
#### Cost of phase [154,155]:fun8(V1,V,Out) -> [fun8(V1',V',Out')] 
1*it(154)+1*it(155)+0
  Such that:it(155) =< V
it(155) =< V-V'
aux(44) =< V1
aux(45) =< V1-V1'
it(154) =< aux(44)
it(155) =< aux(44)
it(154) =< aux(45)
it(155) =< aux(45)

#### Cost of chains of fun8(V1,V,Out):
* Chain [[154,155],156]: 1*it(154)+1*it(155)+0
  Such that:aux(44) =< V1
it(155) =< V
aux(45) =< Out
it(154) =< aux(44)
it(155) =< aux(44)
it(154) =< aux(45)
it(155) =< aux(45)

  with precondition: [V>=0,Out>=1,V1>=Out] 

* Chain [156]: 0
  with precondition: [Out=0,V1>=0,V>=0] 


#### Cost of loops [157,158] 

 * loop 157:fun9(V1,V,V2,V3,Out) -> [fun9(V1',V',V2',V3',Out')] 
1
 * loop 158:fun9(V1,V,V2,V3,Out) -> [fun9(V1',V',V2',V3',Out')] 
1
#### Cost of phase [157,158]:fun9(V1,V,V2,V3,Out) -> [fun9(V1',V',V2',V3',Out')] 
1*it(157)+1*it(158)+0
  Such that:it(158) =< V
it(158) =< V-V'
it(158) =< V2
it(158) =< V2-V2'
it(158) =< V3
it(158) =< V3-V3'
aux(46) =< V1
aux(47) =< V1-V1'
it(157) =< aux(46)
it(158) =< aux(46)
it(157) =< aux(47)
it(158) =< aux(47)

#### Cost of chains of fun9(V1,V,V2,V3,Out):
* Chain [[157,158],159]: 1*it(157)+1*it(158)+0
  Such that:aux(46) =< V1
it(158) =< V
aux(47) =< Out
it(157) =< aux(46)
it(158) =< aux(46)
it(157) =< aux(47)
it(158) =< aux(47)

  with precondition: [V>=0,V2>=0,V3>=0,Out>=1,V1>=Out] 

* Chain [159]: 0
  with precondition: [Out=0,V1>=0,V>=0,V2>=0,V3>=0] 


#### Cost of loops [160] 

 * loop 160:head(V1,Out) -> [head(V1',Out')] 
1
#### Cost of phase [160]:head(V1,Out) -> [head(V1',Out')] 
1*it(160)+0
  Such that:it(160) =< V1
it(160) =< V1-V1'

#### Cost of chains of head(V1,Out):
* Chain [[160],161]: 1*it(160)+0
  Such that:it(160) =< Out

  with precondition: [Out>=1,V1>=Out] 

* Chain [161]: 0
  with precondition: [Out=0,V1>=0] 


#### Cost of loops [162] 

 * loop 162:natsFrom(V1,Out) -> [natsFrom(V1',Out')] 
1
#### Cost of phase [162]:natsFrom(V1,Out) -> [natsFrom(V1',Out')] 
1*it(162)+0
  Such that:it(162) =< V1
it(162) =< V1-V1'

#### Cost of chains of natsFrom(V1,Out):
* Chain [[162],163]: 1*it(162)+0
  Such that:it(162) =< Out

  with precondition: [Out>=1,V1>=Out] 

* Chain [163]: 0
  with precondition: [Out=0,V1>=0] 


#### Cost of loops [164,165,166] 

 * loop 164:pair(V1,V,Out) -> [pair(V1',V',Out')] 
1
 * loop 165:pair(V1,V,Out) -> [pair(V1',V',Out')] 
1
 * loop 166:pair(V1,V,Out) -> [pair(V1',V',Out')] 
1
#### Cost of phase [164,165,166]:pair(V1,V,Out) -> [pair(V1',V',Out')] 
1*it(164)+1*it(165)+1*it(166)+0
  Such that:aux(48) =< V1
aux(49) =< V1+V
aux(50) =< V1+V-V1'-V'
aux(51) =< V1-V1'
aux(52) =< V
aux(53) =< V-V'
it(165) =< aux(48)
it(166) =< aux(48)
it(164) =< aux(49)
it(165) =< aux(49)
it(166) =< aux(49)
it(164) =< aux(50)
it(165) =< aux(50)
it(166) =< aux(50)
it(165) =< aux(51)
it(166) =< aux(51)
it(164) =< aux(52)
it(166) =< aux(52)
it(164) =< aux(53)
it(166) =< aux(53)

#### Cost of chains of pair(V1,V,Out):
* Chain [[164,165,166],167]: 1*it(164)+1*it(165)+1*it(166)+0
  Such that:aux(54) =< V1
aux(55) =< V1+V
aux(56) =< V
it(165) =< aux(54)
it(166) =< aux(54)
it(164) =< aux(55)
it(165) =< aux(55)
it(166) =< aux(55)
it(164) =< aux(56)
it(166) =< aux(56)

  with precondition: [V1>=0,V>=0,Out>=1,V+V1>=Out] 

* Chain [167]: 0
  with precondition: [Out=0,V1>=0,V>=0] 


#### Cost of chains of proper(V1,Out):
* Chain [171]: 1
  with precondition: [V1=0,Out=1] 

* Chain [170]: 1
  with precondition: [V1=1,Out=2] 

* Chain [169]: 1
  with precondition: [V1=2,Out=3] 

* Chain [168]: 0
  with precondition: [Out=0,V1>=0] 


#### Cost of loops [172] 

 * loop 172:s(V1,Out) -> [s(V1',Out')] 
1
#### Cost of phase [172]:s(V1,Out) -> [s(V1',Out')] 
1*it(172)+0
  Such that:it(172) =< V1
it(172) =< V1-V1'

#### Cost of chains of s(V1,Out):
* Chain [[172],173]: 1*it(172)+0
  Such that:it(172) =< Out

  with precondition: [Out>=1,V1>=Out] 

* Chain [173]: 0
  with precondition: [Out=0,V1>=0] 


#### Cost of loops [174,175,176] 

 * loop 174:sel(V1,V,Out) -> [sel(V1',V',Out')] 
1
 * loop 175:sel(V1,V,Out) -> [sel(V1',V',Out')] 
1
 * loop 176:sel(V1,V,Out) -> [sel(V1',V',Out')] 
1
#### Cost of phase [174,175,176]:sel(V1,V,Out) -> [sel(V1',V',Out')] 
1*it(174)+1*it(175)+1*it(176)+0
  Such that:aux(57) =< V1
aux(58) =< V1+V
aux(59) =< V1+V-V1'-V'
aux(60) =< V1-V1'
aux(61) =< V
aux(62) =< V-V'
it(175) =< aux(57)
it(176) =< aux(57)
it(174) =< aux(58)
it(175) =< aux(58)
it(176) =< aux(58)
it(174) =< aux(59)
it(175) =< aux(59)
it(176) =< aux(59)
it(175) =< aux(60)
it(176) =< aux(60)
it(174) =< aux(61)
it(176) =< aux(61)
it(174) =< aux(62)
it(176) =< aux(62)

#### Cost of chains of sel(V1,V,Out):
* Chain [[174,175,176],177]: 1*it(174)+1*it(175)+1*it(176)+0
  Such that:aux(63) =< V1
aux(64) =< V1+V
aux(65) =< V
it(175) =< aux(63)
it(176) =< aux(63)
it(174) =< aux(64)
it(175) =< aux(64)
it(176) =< aux(64)
it(174) =< aux(65)
it(176) =< aux(65)

  with precondition: [V1>=0,V>=0,Out>=1,V+V1>=Out] 

* Chain [177]: 0
  with precondition: [Out=0,V1>=0,V>=0] 


#### Cost of loops [178] 

 * loop 178:snd(V1,Out) -> [snd(V1',Out')] 
1
#### Cost of phase [178]:snd(V1,Out) -> [snd(V1',Out')] 
1*it(178)+0
  Such that:it(178) =< V1
it(178) =< V1-V1'

#### Cost of chains of snd(V1,Out):
* Chain [[178],179]: 1*it(178)+0
  Such that:it(178) =< Out

  with precondition: [Out>=1,V1>=Out] 

* Chain [179]: 0
  with precondition: [Out=0,V1>=0] 


#### Cost of loops [180,181,182] 

 * loop 180:splitAt(V1,V,Out) -> [splitAt(V1',V',Out')] 
1
 * loop 181:splitAt(V1,V,Out) -> [splitAt(V1',V',Out')] 
1
 * loop 182:splitAt(V1,V,Out) -> [splitAt(V1',V',Out')] 
1
#### Cost of phase [180,181,182]:splitAt(V1,V,Out) -> [splitAt(V1',V',Out')] 
1*it(180)+1*it(181)+1*it(182)+0
  Such that:aux(66) =< V1
aux(67) =< V1+V
aux(68) =< V1+V-V1'-V'
aux(69) =< V1-V1'
aux(70) =< V
aux(71) =< V-V'
it(181) =< aux(66)
it(182) =< aux(66)
it(180) =< aux(67)
it(181) =< aux(67)
it(182) =< aux(67)
it(180) =< aux(68)
it(181) =< aux(68)
it(182) =< aux(68)
it(181) =< aux(69)
it(182) =< aux(69)
it(180) =< aux(70)
it(182) =< aux(70)
it(180) =< aux(71)
it(182) =< aux(71)

#### Cost of chains of splitAt(V1,V,Out):
* Chain [[180,181,182],183]: 1*it(180)+1*it(181)+1*it(182)+0
  Such that:aux(72) =< V1
aux(73) =< V1+V
aux(74) =< V
it(181) =< aux(72)
it(182) =< aux(72)
it(180) =< aux(73)
it(181) =< aux(73)
it(182) =< aux(73)
it(180) =< aux(74)
it(182) =< aux(74)

  with precondition: [V1>=0,V>=0,Out>=1,V+V1>=Out] 

* Chain [183]: 0
  with precondition: [Out=0,V1>=0,V>=0] 


#### Cost of loops [184] 

 * loop 184:tail(V1,Out) -> [tail(V1',Out')] 
1
#### Cost of phase [184]:tail(V1,Out) -> [tail(V1',Out')] 
1*it(184)+0
  Such that:it(184) =< V1
it(184) =< V1-V1'

#### Cost of chains of tail(V1,Out):
* Chain [[184],185]: 1*it(184)+0
  Such that:it(184) =< Out

  with precondition: [Out>=1,V1>=Out] 

* Chain [185]: 0
  with precondition: [Out=0,V1>=0] 


#### Cost of loops [186,187,188] 

 * loop 186:take(V1,V,Out) -> [take(V1',V',Out')] 
1
 * loop 187:take(V1,V,Out) -> [take(V1',V',Out')] 
1
 * loop 188:take(V1,V,Out) -> [take(V1',V',Out')] 
1
#### Cost of phase [186,187,188]:take(V1,V,Out) -> [take(V1',V',Out')] 
1*it(186)+1*it(187)+1*it(188)+0
  Such that:aux(75) =< V1
aux(76) =< V1+V
aux(77) =< V1+V-V1'-V'
aux(78) =< V1-V1'
aux(79) =< V
aux(80) =< V-V'
it(187) =< aux(75)
it(188) =< aux(75)
it(186) =< aux(76)
it(187) =< aux(76)
it(188) =< aux(76)
it(186) =< aux(77)
it(187) =< aux(77)
it(188) =< aux(77)
it(187) =< aux(78)
it(188) =< aux(78)
it(186) =< aux(79)
it(188) =< aux(79)
it(186) =< aux(80)
it(188) =< aux(80)

#### Cost of chains of take(V1,V,Out):
* Chain [[186,187,188],189]: 1*it(186)+1*it(187)+1*it(188)+0
  Such that:aux(81) =< V1
aux(82) =< V1+V
aux(83) =< V
it(187) =< aux(81)
it(188) =< aux(81)
it(186) =< aux(82)
it(187) =< aux(82)
it(188) =< aux(82)
it(186) =< aux(83)
it(188) =< aux(83)

  with precondition: [V1>=0,V>=0,Out>=1,V+V1>=Out] 

* Chain [189]: 0
  with precondition: [Out=0,V1>=0,V>=0] 


#### Cost of loops [191,192,193] 

 * loop 191:top(V1,Out) -> [top(V1',Out')] 
2
 * loop 192:top(V1,Out) -> [top(V1',Out')] 
2
 * loop 193:top(V1,Out) -> [top(V1',Out')] 
2
#### Cost of phase [191,192,193]:top(V1,Out) -> [top(V1',Out')] 
6*it(191)+0
#### Cost of phase [191,192,193]:top(V1,Out) -> [top(V1',Out')] 
6*it(191)+0
#### Cost of phase [191,192,193]:top(V1,Out) -> [top(V1',Out')] 
6*it(191)+0
#### Cost of chains of top(V1,Out):
* Chain [[191,192,193]]...: 6*it(191)+0
  with precondition: [V1>=1] 

* Chain [[191,192,193],194]: 6*it(191)+0
  with precondition: [Out=0,V1>=1] 

* Chain [[191,192,193],190,194]: 6*it(191)+1
  with precondition: [Out=0,V1>=1] 

* Chain [194]: 0
  with precondition: [Out=0,V1>=0] 

* Chain [190,194]: 1
  with precondition: [Out=0,V1>=1] 


#### Cost of chains of start(V1,V,V2,V3):
* Chain [198]...: 6*s(3)+0
  with precondition: [V1>=1] 

* Chain [197]: 19*s(5)+25*s(7)+1*s(8)+5*s(30)+5*s(31)+5*s(32)+1
  Such that:aux(104) =< V1
aux(105) =< V1+V
aux(106) =< V
s(7) =< aux(104)
s(5) =< aux(106)
s(30) =< aux(104)
s(31) =< aux(104)
s(32) =< aux(105)
s(30) =< aux(105)
s(31) =< aux(105)
s(32) =< aux(106)
s(31) =< aux(106)
s(5) =< aux(104)

  with precondition: [V1>=0] 

* Chain [196]: 1
  with precondition: [V1=1] 

* Chain [195]: 1
  with precondition: [V1=2] 


Closed-form bounds of start(V1,V,V2,V3): 
-------------------------------------
* Chain [198]... with precondition: [V1>=1] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [197] with precondition: [V1>=0] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [196] with precondition: [V1=1] 
    - Upper bound: 1 
    - Complexity: constant 
* Chain [195] with precondition: [V1=2] 
    - Upper bound: 1 
    - Complexity: constant 

### Maximum cost of start(V1,V,V2,V3): inf 
Asymptotic class: infinity 

Time statistics: 
-------------------------------------
* Partial evaluation computed in 93 ms.
* Invariants computed in 264 ms.
   - Backward Invariants 92 ms.
   - Transitive Invariants 81 ms.
* Refinement performed in 441 ms.
* Termination proved in 94 ms.
* Upper bounds computed in 453 ms.
   - Equation cost structures 148 ms.
   - Phase cost structures 186 ms.
   - Chain cost structures 158 ms.
   - Solving cost expressions 1 ms.
* Total analysis performed in 1535 ms.



Preprocessing Cost Relations
=====================================
0. SCC does not have a single cut point : [fun1/3,mark/2]  
 Merged into fun1mark/3

#### Computed strongly connected components 
1. non_recursive  : [start/2]
0. recursive [multiple] : [fun/3,fun1mark/3]

#### Obtained direct recursion through partial evaluation 
1. SCC is partially evaluated into start/2
0. SCC is partially evaluated into fun1mark/3

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations fun1mark/3 
* CE 5 is refined into CE [14] 
* CE 13 is refined into CE [15] 
* CE 7 is refined into CE [16] 
* CE 9 is refined into CE [17] 
* CE 11 is refined into CE [18] 
* CE 12 is refined into CE [19] 
* CE 10 is refined into CE [20] 
* CE 8 is refined into CE [21] 
* CE 6 is refined into CE [22] 


#### Refined cost equations fun1mark/3 
* CE 14: fun1mark(A,B,C) = 2+ fun1mark(D,E,F)
     [C+D>=A,A>=D+1,D>=0,C+D=A+F] 
* CE 15: fun1mark(A,B,C) = 1+ fun1mark(D,E,F)
     [D>=0,F+1=C,D+1=A] 
* CE 16: fun1mark(A,B,C) = 1+ fun1mark(A,D,C)
     [A>=0,B=0] 
* CE 17: fun1mark(A,B,C) = 1
     [B>=0,A>=0,A+B+1=C] 
* CE 18: fun1mark(A,B,C) = 1
     [C=1,A=1] 
* CE 19: fun1mark(A,B,C) = 1
     [C=0,A=0] 
* CE 20: fun1mark(A,B,C) = 1+ fun1mark(D,E,F)+ fun1mark(G,H,I)+ fun1mark(F,I,C)
     [G>=0,D>=0,D+G+1=A] 
* CE 21: fun1mark(A,B,C) = 1+ fun1mark(A,D,E)+ fun1mark(F,G,H)+ fun1mark(E,H,I)
     [F>=0,A>=0,I+1=C,F+1=B] 
* CE 22: fun1mark(A,B,C) = 2+ fun1mark(D,E,F)+ fun1mark(G,H,C)
     [G>=0,D>=0,D+G+1=A,F=1] 

### Cost equations --> "Loop" of fun1mark/3 
* CEs [22] --> Loop 11 
* CEs [20] --> Loop 12 
* CEs [21] --> Loop 13 
* CEs [17] --> Loop 14 
* CEs [18] --> Loop 15 
* CEs [19] --> Loop 16 
* CEs [14] --> Loop 17 
* CEs [15] --> Loop 18 
* CEs [16] --> Loop 19 

#### Loops of fun1mark/3 
* Loop 11: fun1mark(A,B,C)->  fun1mark(A',B',C')  fun1mark(A'2,B'2,C)
                  [A'2>=0,A'>=0,A'+A'2+1=A,C'=1] 
* Loop 12: fun1mark(A,B,C)->  fun1mark(A',B',C')  fun1mark(A'2,B'2,C'2)  fun1mark(C',C'2,C)
                  [A>=A'+1,A'>=0,A'+A'2+1=A] 
* Loop 13: fun1mark(A,B,C)->  fun1mark(A,A',B')  fun1mark(A'2,B'2,C'2)  fun1mark(B',C'2,A'3)
                  [B>=1,A>=0,C=A'3+1,B=A'2+1] 
* Loop 14: fun1mark(A,B,C) [B>=0,A>=0,A+B+1=C] 
* Loop 15: fun1mark(A,B,C) [C=1,A=1] 
* Loop 16: fun1mark(A,B,C) [C=0,A=0] 
* Loop 17: fun1mark(A,B,C)->  fun1mark(A',B',C')
                  [C+A'>=A,A>=A'+1,A'>=0,A+C'=C+A'] 
* Loop 18: fun1mark(A,B,C)->  fun1mark(A',B',C')
                  [A>=1,C=C'+1,A=A'+1] 
* Loop 19: fun1mark(A,B,C)->  fun1mark(A,A',C)
                  [A>=0,B=0] 

### Ranking functions of CR fun1mark(A,B,C) 

#### Partial ranking functions of CR fun1mark(A,B,C) 
* Partial RF of phase [11,12,13,17,18,19]:
  - RF of loop [11:1,11:2,12:1,12:2,17:1,18:1]:
    A depends on loops [12:3,13:2,13:3] 


### Resulting Chains:fun1mark(A,B,C) 
* [multiple([11,12,13,17,18,19],[[],[16],[15],[14]])]...
* [16]
* [15]
* [14]


### Merging Chains  fun1mark/3 into  External patterns of execution 
* [[16]] --> 1 
* [[15]] --> 2 
* [[14]] --> 3 
* [[multiple([11,12,13,17,18,19],[[],[16],[15],[14]])]] --> 4 


### Specialization of cost equations start/2 
* CE 2 is refined into CE [23] 
* CE 3 is refined into CE [24,25,26,27] 
* CE 4 is refined into CE [28,29,30,31] 


#### Refined cost equations start/2 
* CE 23: start(V1,V) = 1
     [V>=0,V1>=0] 
* CE 24: start(V1,V) = 1+ fun1mark(W1,X1,Y1):1
     [Y1=0,W1=0,V=0,V1=1] 
* CE 25: start(V1,V) = 1+ fun1mark(W1,X1,Y1):2
     [Y1=1,W1=1,V=1,V1=1] 
* CE 26: start(V1,V) = 1+ fun1mark(V,W1,X1):3
     [X1>=V+1,V>=0,X1=V+W1+1,V1=1] 
* CE 27: start(V1,V) = 1+ fun1mark(V,W1,X1):4
     [V>=0,V1=1] 
* CE 28: start(V1,V) = 0+ fun1mark(W1,X1,Y1):1
     [Y1=0,W1=0,V1=0] 
* CE 29: start(V1,V) = 0+ fun1mark(W1,X1,Y1):2
     [Y1=1,W1=1,V1=1] 
* CE 30: start(V1,V) = 0+ fun1mark(V1,W1,X1):3
     [X1>=V1+1,V1>=0,X1=V1+W1+1] 
* CE 31: start(V1,V) = 0+ fun1mark(V1,W1,X1):4
     [V1>=0] 

### Cost equations --> "Loop" of start/2 
* CEs [27,31] --> Loop 20 
* CEs [24,25,26,29] --> Loop 21 
* CEs [23,28,30] --> Loop 22 

#### Loops of start/2 
* Loop 20: start(V1,V) [V1>=0] 
* Loop 21: start(V1,V) [V1=1] 
* Loop 22: start(V1,V) [V1>=0] 

### Ranking functions of CR start(V1,V) 

#### Partial ranking functions of CR start(V1,V) 


### Resulting Chains:start(V1,V) 
* [22]
* [21]
* [20]...


### Merging Chains  start/2 into  External patterns of execution 
* [[21],[22]] --> 1 
* [[20]] --> 2 


Computing Bounds
=====================================

#### Cost of loops [11,12,13,17,18,19] 

 * loop 11:fun1mark(A,B,C) -> [fun1mark(A',B',C'),fun1mark(A'2,B'2,C'2)] 
2
 * loop 12:fun1mark(A,B,C) -> [fun1mark(A',B',C'),fun1mark(A'2,B'2,C'2),fun1mark(A'3,B'3,C'3)] 
1
 * loop 13:fun1mark(A,B,C) -> [fun1mark(A',B',C'),fun1mark(A'2,B'2,C'2),fun1mark(A'3,B'3,C'3)] 
1
 * loop 17:fun1mark(A,B,C) -> [fun1mark(A',B',C')] 
2
 * loop 18:fun1mark(A,B,C) -> [fun1mark(A',B',C')] 
1
 * loop 19:fun1mark(A,B,C) -> [fun1mark(A',B',C')] 
1
#### Cost of phase [11,12,13,17,18,19]:fun1mark(A,B,C) -> [] 
6*it(11)+3*it(12)+2*it([14])+0
#### Cost of chains of fun1mark(A,B,C):
* Chain [multiple([11,12,13,17,18,19],[[],[16],[15],[14]])]...: 6*it(11)+3*it(12)+2*it([14])+0
  with precondition: [A>=0] 

* Chain [16]: 1
  with precondition: [A=0,C=0] 

* Chain [15]: 1
  with precondition: [A=1,C=1] 

* Chain [14]: 1
  with precondition: [A+B+1=C,A>=0,B>=0] 


#### Cost of chains of start(V1,V):
* Chain [22]: 1
  with precondition: [V1>=0] 

* Chain [21]: 2
  with precondition: [V1=1] 

* Chain [20]...: 1*aux(11)+0
  with precondition: [V1>=0] 


Closed-form bounds of start(V1,V): 
-------------------------------------
* Chain [22] with precondition: [V1>=0] 
    - Upper bound: 1 
    - Complexity: constant 
* Chain [21] with precondition: [V1=1] 
    - Upper bound: 2 
    - Complexity: constant 
* Chain [20]... with precondition: [V1>=0] 
    - Upper bound: inf 
    - Complexity: infinity 

### Maximum cost of start(V1,V): inf 
Asymptotic class: infinity 

Time statistics: 
-------------------------------------
* Partial evaluation computed in 12 ms.
* Invariants computed in 15 ms.
   - Backward Invariants 1 ms.
   - Transitive Invariants 5 ms.
* Refinement performed in 45 ms.
* Termination proved in 7 ms.
* Upper bounds computed in 69 ms.
   - Equation cost structures 9 ms.
   - Phase cost structures 63 ms.
   - Chain cost structures 0 ms.
   - Solving cost expressions 0 ms.
* Total analysis performed in 167 ms.


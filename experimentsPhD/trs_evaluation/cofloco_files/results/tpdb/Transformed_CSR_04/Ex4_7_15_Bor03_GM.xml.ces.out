
Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. non_recursive  : [fun1/2]
1. recursive  : [fun/2]
2. recursive [non_tail] : [mark/2]
3. non_recursive  : [start/1]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into fun1/2
1. SCC is partially evaluated into fun/2
2. SCC is partially evaluated into mark/2
3. SCC is partially evaluated into start/1

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations fun1/2 
* CE 9 is refined into CE [14] 
* CE 8 is refined into CE [15] 


#### Refined cost equations fun1/2 
* CE 14: fun1(V,Out) = 1
     [V>=0,V+1=Out] 
* CE 15: fun1(V,Out) = 1
     [Out=0,V=1] 

### Cost equations --> "Loop" of fun1/2 
* CEs [14] --> Loop 10 
* CEs [15] --> Loop 11 

#### Loops of fun1/2 
* Loop 10: fun1(V,Out) [V>=0,V+1=Out] 
* Loop 11: fun1(V,Out) [Out=0,V=1] 

### Ranking functions of CR fun1(V,Out) 

#### Partial ranking functions of CR fun1(V,Out) 


### Resulting Chains:fun1(V,Out) 
* [11]
* [10]


### Merging Chains  fun1/2 into  External patterns of execution 
* [[11]] --> 1 
* [[10]] --> 2 


### Specialization of cost equations fun/2 
* CE 7 is refined into CE [16] 
* CE 5 is refined into CE [17] 
* CE 6 is refined into CE [18,19] 


#### Refined cost equations fun/2 
* CE 16: fun(V,Out) = 1
     [V>=0,V+1=Out] 
* CE 17: fun(V,Out) = 1
     [Out=3,V=0] 
* CE 18: fun(V,Out) = 1+ fun1(W,X):1+ fun(Y,Out)
     [Y=0,X=0,W=1,V=1] 
* CE 19: fun(V,Out) = 1+ fun1(W,X):2+ fun(Y,Out)
     [Y=2,X=2,W=1,V=1] 

### Cost equations --> "Loop" of fun/2 
* CEs [19] --> Loop 12 
* CEs [18] --> Loop 13 
* CEs [16] --> Loop 14 
* CEs [17] --> Loop 15 

#### Loops of fun/2 
* Loop 12: fun(V,Out)->  fun(V',Out)
                  [V'=2,V=1] 
* Loop 13: fun(V,Out)->  fun(V',Out)
                  [V'=0,V=1] 
* Loop 14: fun(V,Out) [V>=0,V+1=Out] 
* Loop 15: fun(V,Out) [Out=3,V=0] 

### Ranking functions of CR fun(V,Out) 

#### Partial ranking functions of CR fun(V,Out) 


### Resulting Chains:fun(V,Out) 
* [15]
* [14]
* [13,15]
* [13,14]
* [12,14]


### Merging Chains  fun/2 into  External patterns of execution 
* [[15]] --> 1 
* [[14,13]] --> 2 
* [[14,12],[15,13]] --> 3 
* [[14]] --> 4 


### Specialization of cost equations mark/2 
* CE 13 is refined into CE [20] 
* CE 10 is refined into CE [21,22,23,24] 
* CE 11 is refined into CE [25,26] 
* CE 12 is refined into CE [27] 


#### Refined cost equations mark/2 
* CE 20: mark(V,Out) = 1+ mark(W,X)
     [V+X>=Out,Out>=X+1,V+X=Out+W] 
* CE 21: mark(V,Out) = 1+ mark(W,X)+ fun(Y,Z):1
     [W>=0,W+1=V,X=0,Z=3,Y=0,Out=3] 
* CE 22: mark(V,Out) = 1+ mark(W,X)+ fun(Y,Z):2
     [W>=0,W+1=V,X=1,Z=1,Y=1,Out=1] 
* CE 23: mark(V,Out) = 1+ mark(W,X)+ fun(Y,Z):3
     [W>=0,W+1=V,X=1,Z=3,Y=1,Out=3] 
* CE 24: mark(V,Out) = 1+ mark(W,X)+ fun(Y,Out):4
     [W>=0,Out>=1,Out=X+1,Out=Y+1,W+1=V] 
* CE 25: mark(V,Out) = 1+ mark(W,X)+ fun1(Y,Z):1
     [W>=0,W+1=V,X=1,Z=0,Y=1,Out=0] 
* CE 26: mark(V,Out) = 1+ mark(W,X)+ fun1(Y,Out):2
     [W>=0,Out>=1,Out=X+1,Out=Y+1,W+1=V] 
* CE 27: mark(V,Out) = 1
     [Out=0,V=0] 

### Cost equations --> "Loop" of mark/2 
* CEs [27] --> Loop 16 
* CEs [20,24,26] --> Loop 17 
* CEs [23] --> Loop 18 
* CEs [21] --> Loop 19 
* CEs [22] --> Loop 20 
* CEs [25] --> Loop 21 

#### Loops of mark/2 
* Loop 16: mark(V,Out) [Out=0,V=0] 
* Loop 17: mark(V,Out)->  mark(V',Out')
                  [V>=V'+1,V'>=0,Out+V'=V+Out'] 
* Loop 18: mark(V,Out)->  mark(V',Out')
                  [V>=1,V=V'+1,Out'=1,Out=3] 
* Loop 19: mark(V,Out)->  mark(V',Out')
                  [V>=1,V=V'+1,Out'=0,Out=3] 
* Loop 20: mark(V,Out)->  mark(V',Out')
                  [V>=1,V=V'+1,Out'=1,Out=1] 
* Loop 21: mark(V,Out)->  mark(V',Out')
                  [V>=1,V=V'+1,Out'=1,Out=0] 

### Ranking functions of CR mark(V,Out) 
* RF of phase [17,18,19,20,21]: [V]

#### Partial ranking functions of CR mark(V,Out) 
* Partial RF of phase [17,18,19,20,21]:
  - RF of loop [17:1,18:1,19:1,20:1,21:1]:
    V


### Resulting Chains:mark(V,Out) 
* [[17,18,19,20,21],16]
* [16]


### Merging Chains  mark/2 into  External patterns of execution 
* [[16]] --> 1 
* [[16,[17,18,19,20,21]]] --> 2 


### Specialization of cost equations start/1 
* CE 2 is refined into CE [28,29,30,31] 
* CE 3 is refined into CE [32,33] 
* CE 4 is refined into CE [34,35] 


#### Refined cost equations start/1 
* CE 28: start(V) = 0+ fun(W,X):1
     [X=3,W=0,V=0] 
* CE 29: start(V) = 0+ fun(W,X):2
     [X=1,W=1,V=1] 
* CE 30: start(V) = 0+ fun(W,X):3
     [X=3,W=1,V=1] 
* CE 31: start(V) = 0+ fun(W,X):4
     [X>=1,X=W+1,X=V+1] 
* CE 32: start(V) = 0+ fun1(W,X):1
     [X=0,W=1,V=1] 
* CE 33: start(V) = 0+ fun1(W,X):2
     [X>=1,X=W+1,X=V+1] 
* CE 34: start(V) = 0+ mark(W,X):1
     [X=0,W=0,V=0] 
* CE 35: start(V) = 0+ mark(V,W):2
     [V+W>=2,V+2>=W,V>=1] 

### Cost equations --> "Loop" of start/1 
* CEs [29,30,32] --> Loop 22 
* CEs [28,31,33,34,35] --> Loop 23 

#### Loops of start/1 
* Loop 22: start(V) [V=1] 
* Loop 23: start(V) [V>=0] 

### Ranking functions of CR start(V) 

#### Partial ranking functions of CR start(V) 


### Resulting Chains:start(V) 
* [23]
* [22]


### Merging Chains  start/1 into  External patterns of execution 
* [[22],[23]] --> 1 


Computing Bounds
=====================================

#### Cost of chains of fun1(V,Out):
* Chain [11]: 1
  with precondition: [V=1,Out=0] 

* Chain [10]: 1
  with precondition: [V+1=Out,V>=0] 


#### Cost of chains of fun(V,Out):
* Chain [15]: 1
  with precondition: [V=0,Out=3] 

* Chain [14]: 1
  with precondition: [V+1=Out,V>=0] 

* Chain [13,15]: 3
  with precondition: [V=1,Out=3] 

* Chain [13,14]: 3
  with precondition: [V=1,Out=1] 

* Chain [12,14]: 3
  with precondition: [V=1,Out=3] 


#### Cost of loops [17,18,19,20,21] 

 * loop 17:mark(V,Out) -> [mark(V',Out')] 
2
 * loop 18:mark(V,Out) -> [mark(V',Out')] 
4
 * loop 19:mark(V,Out) -> [mark(V',Out')] 
2
 * loop 20:mark(V,Out) -> [mark(V',Out')] 
4
 * loop 21:mark(V,Out) -> [mark(V',Out')] 
2
#### Cost of phase [17,18,19,20,21]:mark(V,Out) -> [mark(V',Out')] 
14*it(17)+0
  Such that:aux(1) =< V
aux(2) =< V-V'
it(17) =< aux(1)
it(17) =< aux(2)

#### Cost of chains of mark(V,Out):
* Chain [[17,18,19,20,21],16]: 14*it(17)+1
  Such that:aux(3) =< V
it(17) =< aux(3)

  with precondition: [V>=1,V+2>=Out,Out+V>=2] 

* Chain [16]: 1
  with precondition: [V=0,Out=0] 


#### Cost of chains of start(V):
* Chain [23]: 14*s(2)+1
  Such that:s(1) =< V
s(2) =< s(1)

  with precondition: [V>=0] 

* Chain [22]: 3
  with precondition: [V=1] 


Closed-form bounds of start(V): 
-------------------------------------
* Chain [23] with precondition: [V>=0] 
    - Upper bound: 14*V+1 
    - Complexity: n 
* Chain [22] with precondition: [V=1] 
    - Upper bound: 3 
    - Complexity: constant 

### Maximum cost of start(V): max([14*V,2])+1 
Asymptotic class: n 

Time statistics: 
-------------------------------------
* Partial evaluation computed in 19 ms.
* Invariants computed in 54 ms.
   - Backward Invariants 22 ms.
   - Transitive Invariants 12 ms.
* Refinement performed in 109 ms.
* Termination proved in 9 ms.
* Upper bounds computed in 80 ms.
   - Equation cost structures 33 ms.
   - Phase cost structures 42 ms.
   - Chain cost structures 8 ms.
   - Solving cost expressions 1 ms.
* Total analysis performed in 313 ms.


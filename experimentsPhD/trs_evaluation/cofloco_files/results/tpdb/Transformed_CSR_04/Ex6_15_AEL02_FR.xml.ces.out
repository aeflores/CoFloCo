
Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. non_recursive  : [cons/3]
1. non_recursive  : [first/3]
2. non_recursive  : [from/2]
3. non_recursive  : [fun/1]
4. non_recursive  : [nil/1]
5. non_recursive  : [s/2]
6. non_recursive  : [sel/3]
7. recursive [non_tail,multiple] : [activate/2]
8. non_recursive  : [fcons/3]
9. recursive  : [quote/2]
10. recursive  : [quote1/2]
11. recursive [non_tail] : [unquote/2]
12. recursive [non_tail] : [unquote1/2]
13. non_recursive  : [start/2]

#### Obtained direct recursion through partial evaluation 
0. SCC is completely evaluated into other SCCs
1. SCC is completely evaluated into other SCCs
2. SCC is partially evaluated into from/2
3. SCC is completely evaluated into other SCCs
4. SCC is completely evaluated into other SCCs
5. SCC is completely evaluated into other SCCs
6. SCC is completely evaluated into other SCCs
7. SCC is partially evaluated into activate/2
8. SCC is completely evaluated into other SCCs
9. SCC is partially evaluated into quote/2
10. SCC is partially evaluated into quote1/2
11. SCC is partially evaluated into unquote/2
12. SCC is partially evaluated into unquote1/2
13. SCC is partially evaluated into start/2

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations from/2 
* CE 11 is refined into CE [32] 
* CE 10 is refined into CE [33] 


#### Refined cost equations from/2 
* CE 32: from(V,Out) = 1
     [V>=0,V+1=Out] 
* CE 33: from(V,Out) = 2
     [Out>=3,Out=2*V+3] 

### Cost equations --> "Loop" of from/2 
* CEs [32] --> Loop 20 
* CEs [33] --> Loop 21 

#### Loops of from/2 
* Loop 20: from(V,Out) [V>=0,V+1=Out] 
* Loop 21: from(V,Out) [V>=0,2*V+3=Out] 

### Ranking functions of CR from(V,Out) 

#### Partial ranking functions of CR from(V,Out) 


### Resulting Chains:from(V,Out) 
* [21]
* [20]


### Merging Chains  from/2 into  External patterns of execution 
* [[20]] --> 1 
* [[21]] --> 2 


### Specialization of cost equations activate/2 
* CE 30 is refined into CE [34] 
* CE 29 is refined into CE [35] 
* CE 31 is refined into CE [36] 
* CE 28 is refined into CE [37] 
* CE 27 is refined into CE [38,39] 
* CE 26 is refined into CE [40] 


#### Refined cost equations activate/2 
* CE 34: activate(V,Out) = 2
     [Out=1,V=1] 
* CE 35: activate(V,Out) = 2
     [Out=0,V=0] 
* CE 36: activate(A,A) = 1
     [A>=0] 
* CE 37: activate(V,Out) = 2+ activate(W,X)
     [Out+W>=V,V>=W+1,W>=0,V+X=Out+W] 
* CE 38: activate(V,Out) = 1+ activate(W,X)+ from(Y,Out):1
     [W>=0,Out>=1,Out=X+1,Out=Y+1,W+1=V] 
* CE 39: activate(V,Out) = 1+ activate(W,X)+ from(Y,Out):2
     [W>=0,Out>=3,W+1=V,Out=2*X+3,Out=2*Y+3] 
* CE 40: activate(V,Out) = 2+ activate(W,X)+ activate(Y,Z)
     [Z>=0,Y>=0,X>=0,W>=0,X+Z+1=Out,W+Y+1=V] 

### Cost equations --> "Loop" of activate/2 
* CEs [40] --> Loop 22 
* CEs [37,38] --> Loop 23 
* CEs [39] --> Loop 24 
* CEs [34] --> Loop 25 
* CEs [35,36] --> Loop 26 

#### Loops of activate/2 
* Loop 22: activate(V,Out)->  activate(V',Out')  activate(V'2,Out'2)
                  [Out'2>=0,V'2>=0,Out'>=0,V'>=0,Out'+Out'2+1=Out,V'+V'2+1=V] 
* Loop 23: activate(V,Out)->  activate(V',Out')
                  [Out+V'>=V,V>=V'+1,V'>=0,V+Out'=Out+V'] 
* Loop 24: activate(V,Out)->  activate(V',Out')
                  [Out>=3,V>=1,V=V'+1,Out=2*Out'+3] 
* Loop 25: activate(V,Out) [Out=1,V=1] 
* Loop 26: activate(A,A) [A>=0] 

### Ranking functions of CR activate(V,Out) 
* RF of phase [22,23,24]: [V]

#### Partial ranking functions of CR activate(V,Out) 
* Partial RF of phase [22,23,24]:
  - RF of loop [22:1,22:2,23:1,24:1]:
    V


### Resulting Chains:activate(V,Out) 
* [26]
* [25]
* [multiple([22,23,24],[[26],[25]])]


### Merging Chains  activate/2 into  External patterns of execution 
* [[25],[26]] --> 1 
* [[multiple([22,23,24],[[26],[25]])]] --> 2 


### Specialization of cost equations quote/2 
* CE 14 is refined into CE [41,42,43,44] 
* CE 12 is refined into CE [45] 
* CE 15 is refined into CE [46] 
* CE 13 is refined into CE [47,48] 


#### Refined cost equations quote/2 
* CE 41: quote(V,Out) = 1+ activate(W,W):1+ activate(X,X):1
     [X>=0,W>=0,W+X+1=Out,W+X+1=V] 
* CE 42: quote(V,Out) = 1+ activate(W,W):1+ activate(X,Y):2
     [Y>=X,X>=1,W>=0,W+Y+1=Out,W+X+1=V] 
* CE 43: quote(V,Out) = 1+ activate(W,X):2+ activate(Y,Y):1
     [X>=W,Y>=0,W>=1,X+Y+1=Out,W+Y+1=V] 
* CE 44: quote(V,Out) = 1+ activate(W,X):2+ activate(Y,Z):2
     [Z>=Y,X>=W,Y>=1,W>=1,X+Z+1=Out,W+Y+1=V] 
* CE 45: quote(V,Out) = 1
     [Out=0,V=0] 
* CE 46: quote(V,Out) = 0
     [V>=0,Out=0] 
* CE 47: quote(V,Out) = 1+ activate(W,W):1+ quote(W,X)
     [W>=0,X+1=Out,W+1=V] 
* CE 48: quote(V,Out) = 1+ activate(W,X):2+ quote(X,Y)
     [X>=W,W>=1,Y+1=Out,W+1=V] 

### Cost equations --> "Loop" of quote/2 
* CEs [48] --> Loop 27 
* CEs [47] --> Loop 28 
* CEs [42,43,44] --> Loop 29 
* CEs [41] --> Loop 30 
* CEs [45,46] --> Loop 31 

#### Loops of quote/2 
* Loop 27: quote(V,Out)->  quote(V',Out')
                  [V'+1>=V,V>=2,Out=Out'+1] 
* Loop 28: quote(V,Out)->  quote(V',Out')
                  [V>=1,Out=Out'+1,V=V'+1] 
* Loop 29: quote(V,Out) [Out>=V,V>=2] 
* Loop 30: quote(A,A) [A>=1] 
* Loop 31: quote(V,Out) [V>=0,Out=0] 

### Ranking functions of CR quote(V,Out) 

#### Partial ranking functions of CR quote(V,Out) 
* Partial RF of phase [27,28]:
  - RF of loop [28:1]:
    V depends on loops [27:1] 


### Resulting Chains:quote(V,Out) 
* [[27,28]]...
* [[27,28],31]
* [[27,28],30]
* [[27,28],29]
* [31]
* [30]
* [29]


### Merging Chains  quote/2 into  External patterns of execution 
* [[31]] --> 1 
* [[29],[30],[29,[27,28]],[30,[27,28]],[31,[27,28]]] --> 2 
* [[[27,28]]] --> 3 


### Specialization of cost equations quote1/2 
* CE 18 is refined into CE [49,50,51,52] 
* CE 17 is refined into CE [53] 
* CE 19 is refined into CE [54] 
* CE 16 is refined into CE [55,56,57,58,59,60,61,62,63,64] 


#### Refined cost equations quote1/2 
* CE 49: quote1(V,Out) = 1+ activate(W,W):1+ activate(X,X):1
     [X>=0,W>=0,W+X+1=Out,W+X+1=V] 
* CE 50: quote1(V,Out) = 1+ activate(W,W):1+ activate(X,Y):2
     [Y>=X,X>=1,W>=0,W+Y+1=Out,W+X+1=V] 
* CE 51: quote1(V,Out) = 1+ activate(W,X):2+ activate(Y,Y):1
     [X>=W,Y>=0,W>=1,X+Y+1=Out,W+Y+1=V] 
* CE 52: quote1(V,Out) = 1+ activate(W,X):2+ activate(Y,Z):2
     [Z>=Y,X>=W,Y>=1,W>=1,X+Z+1=Out,W+Y+1=V] 
* CE 53: quote1(V,Out) = 1
     [Out=0,V=1] 
* CE 54: quote1(V,Out) = 0
     [V>=0,Out=0] 
* CE 55: quote1(V,Out) = 1+ activate(W,W):1+ quote(W,X):1+ activate(Y,Y):1+ quote1(Y,Z)
     [Y>=0,W>=0,W+Y+1=V,Z+1=Out,X=0] 
* CE 56: quote1(V,Out) = 1+ activate(W,W):1+ quote(W,X):1+ activate(Y,Z):2+ quote1(Z,A1)
     [Z>=Y,Y>=1,W>=0,W+Y+1=V,A1+1=Out,X=0] 
* CE 57: quote1(V,Out) = 1+ activate(W,W):1+ quote(W,X):2+ activate(Y,Y):1+ quote1(Y,Z)
     [Y>=0,X>=1,W>=1,X+Z+1=Out,W+Y+1=V] 
* CE 58: quote1(V,Out) = 1+ activate(W,W):1+ quote(W,X):2+ activate(Y,Z):2+ quote1(Z,A1)
     [Z>=Y,Y>=1,X>=1,W>=1,X+A1+1=Out,W+Y+1=V] 
* CE 59: quote1(V,Out) = 1+ activate(W,W):1+ quote(W,X):3
     [Y>=0,W>=1,X+Z+1=Out,W+Y+1=V] 
* CE 60: quote1(V,Out) = 1+ activate(W,X):2+ quote(X,Y):1+ activate(Z,Z):1+ quote1(Z,A1)
     [X>=W,Z>=0,W>=1,W+Z+1=V,A1+1=Out,Y=0] 
* CE 61: quote1(V,Out) = 1+ activate(W,X):2+ quote(X,Y):1+ activate(Z,A1):2+ quote1(A1,B1)
     [A1>=Z,X>=W,Z>=1,W>=1,W+Z+1=V,B1+1=Out,Y=0] 
* CE 62: quote1(V,Out) = 1+ activate(W,X):2+ quote(X,Y):2+ activate(Z,Z):1+ quote1(Z,A1)
     [X>=W,Z>=0,Y>=1,W>=1,Y+A1+1=Out,W+Z+1=V] 
* CE 63: quote1(V,Out) = 1+ activate(W,X):2+ quote(X,Y):2+ activate(Z,A1):2+ quote1(A1,B1)
     [A1>=Z,X>=W,Z>=1,Y>=1,W>=1,Y+B1+1=Out,W+Z+1=V] 
* CE 64: quote1(V,Out) = 1+ activate(W,X):2+ quote(X,Y):3
     [X>=W,Z>=0,W>=1,Y+A1+1=Out,W+Z+1=V] 

### Cost equations --> "Loop" of quote1/2 
* CEs [59,64] --> Loop 32 
* CEs [57,62] --> Loop 33 
* CEs [58,63] --> Loop 34 
* CEs [55,60] --> Loop 35 
* CEs [56,61] --> Loop 36 
* CEs [50,51,52] --> Loop 37 
* CEs [49] --> Loop 38 
* CEs [53,54] --> Loop 39 

#### Loops of quote1/2 
* Loop 32: quote1(V,Out) [V>=2] 
* Loop 33: quote1(V,Out)->  quote1(V',Out')
                  [Out>=Out'+2,V>=V'+2,V'>=0] 
* Loop 34: quote1(V,Out)->  quote1(V',Out')
                  [Out>=Out'+2,V'>=1,V>=3] 
* Loop 35: quote1(V,Out)->  quote1(V',Out')
                  [V>=V'+1,V'>=0,Out=Out'+1] 
* Loop 36: quote1(V,Out)->  quote1(V',Out')
                  [V'>=1,V>=2,Out=Out'+1] 
* Loop 37: quote1(V,Out) [Out>=V,V>=2] 
* Loop 38: quote1(A,A) [A>=1] 
* Loop 39: quote1(V,Out) [V>=0,Out=0] 

### Ranking functions of CR quote1(V,Out) 

#### Partial ranking functions of CR quote1(V,Out) 
* Partial RF of phase [33,34,35,36]:
  - RF of loop [33:1]:
    V-1 depends on loops [34:1,36:1] 
  - RF of loop [35:1]:
    V depends on loops [34:1,36:1] 


### Resulting Chains:quote1(V,Out) 
* [[33,34,35,36]]...
* [[33,34,35,36],39]
* [[33,34,35,36],38]
* [[33,34,35,36],37]
* [[33,34,35,36],32]...
* [39]
* [38]
* [37]
* [32]...


### Merging Chains  quote1/2 into  External patterns of execution 
* [[39]] --> 1 
* [[37],[38],[37,[33,34,35,36]],[38,[33,34,35,36]],[39,[33,34,35,36]]] --> 2 
* [[[33,34,35,36]]] --> 3 
* [[32],[32,[33,34,35,36]]] --> 4 


### Specialization of cost equations unquote/2 
* CE 20 is refined into CE [65] 
* CE 22 is refined into CE [66] 
* CE 21 is refined into CE [67] 


#### Refined cost equations unquote/2 
* CE 65: unquote(V,Out) = 2
     [Out=0,V=0] 
* CE 66: unquote(V,Out) = 0
     [V>=0,Out=0] 
* CE 67: unquote(V,Out) = 2+ unquote(W,X)
     [X>=0,W>=0,X+1=Out,W+1=V] 

### Cost equations --> "Loop" of unquote/2 
* CEs [67] --> Loop 40 
* CEs [65,66] --> Loop 41 

#### Loops of unquote/2 
* Loop 40: unquote(V,Out)->  unquote(V',Out')
                  [Out'>=0,V'>=0,Out'+1=Out,V'+1=V] 
* Loop 41: unquote(V,Out) [V>=0,Out=0] 

### Ranking functions of CR unquote(V,Out) 
* RF of phase [40]: [V]

#### Partial ranking functions of CR unquote(V,Out) 
* Partial RF of phase [40]:
  - RF of loop [40:1]:
    V


### Resulting Chains:unquote(V,Out) 
* [[40],41]
* [41]


### Merging Chains  unquote/2 into  External patterns of execution 
* [[41]] --> 1 
* [[41,[40]]] --> 2 


### Specialization of cost equations unquote1/2 
* CE 25 is refined into CE [68] 
* CE 23 is refined into CE [69] 
* CE 24 is refined into CE [70,71] 


#### Refined cost equations unquote1/2 
* CE 68: unquote1(V,Out) = 0
     [V>=0,Out=0] 
* CE 69: unquote1(V,Out) = 2
     [Out=1,V=0] 
* CE 70: unquote1(V,Out) = 3+ unquote(W,X):1+ unquote1(Y,Z)
     [Z>=0,Y>=0,W>=0,W+Y+1=V,Z+1=Out,X=0] 
* CE 71: unquote1(V,Out) = 3+ unquote(W,X):2+ unquote1(Y,Z)
     [W>=X,Z>=0,Y>=0,X>=1,X+Z+1=Out,W+Y+1=V] 

### Cost equations --> "Loop" of unquote1/2 
* CEs [71] --> Loop 42 
* CEs [70] --> Loop 43 
* CEs [68] --> Loop 44 
* CEs [69] --> Loop 45 

#### Loops of unquote1/2 
* Loop 42: unquote1(V,Out)->  unquote1(V',Out')
                  [V+Out'>=Out+V',Out>=Out'+2,Out'>=0,V'>=0] 
* Loop 43: unquote1(V,Out)->  unquote1(V',Out')
                  [V>=V'+1,V'>=0,Out>=1,Out=Out'+1] 
* Loop 44: unquote1(V,Out) [V>=0,Out=0] 
* Loop 45: unquote1(V,Out) [Out=1,V=0] 

### Ranking functions of CR unquote1(V,Out) 
* RF of phase [42,43]: [V]

#### Partial ranking functions of CR unquote1(V,Out) 
* Partial RF of phase [42,43]:
  - RF of loop [42:1]:
    V-1
  - RF of loop [43:1]:
    V


### Resulting Chains:unquote1(V,Out) 
* [[42,43],45]
* [[42,43],44]
* [45]
* [44]


### Merging Chains  unquote1/2 into  External patterns of execution 
* [[45]] --> 1 
* [[44]] --> 2 
* [[44,[42,43]]] --> 3 
* [[45,[42,43]]] --> 4 


### Specialization of cost equations start/2 
* CE 2 is refined into CE [72,73] 
* CE 3 is refined into CE [74,75,76] 
* CE 4 is refined into CE [77,78,79,80] 
* CE 5 is refined into CE [81,82] 
* CE 6 is refined into CE [83,84,85,86] 
* CE 7 is refined into CE [87] 
* CE 8 is refined into CE [88] 
* CE 9 is refined into CE [89,90] 


#### Refined cost equations start/2 
* CE 72: start(V,V1) = 0+ from(W1,X1):1
     [X1>=1,X1=W1+1,X1=V+1] 
* CE 73: start(V,V1) = 0+ from(W1,X1):2
     [X1>=3,X1=2*W1+3,X1=2*V+3] 
* CE 74: start(V,V1) = 0+ quote(V,W1):1
     [V>=0,W1=0] 
* CE 75: start(V,V1) = 0+ quote(V,W1):2
     [W1>=1,V>=1] 
* CE 76: start(V,V1) = 0+ quote(V,W1):3
     [V>=1] 
* CE 77: start(V,V1) = 0+ quote1(V,W1):1
     [V>=0,W1=0] 
* CE 78: start(V,V1) = 0+ quote1(V,W1):2
     [W1>=1,V>=1] 
* CE 79: start(V,V1) = 0+ quote1(V,W1):3
     [V>=1] 
* CE 80: start(V,V1) = 0+ quote1(V,W1):4
     [V>=2] 
* CE 81: start(V,V1) = 0+ unquote(V,W1):1
     [V>=0,W1=0] 
* CE 82: start(V,V1) = 0+ unquote(V,W1):2
     [V>=W1,W1>=1] 
* CE 83: start(V,V1) = 0+ unquote1(W1,X1):1
     [X1=1,W1=0,V=0] 
* CE 84: start(V,V1) = 0+ unquote1(V,W1):2
     [V>=0,W1=0] 
* CE 85: start(V,V1) = 0+ unquote1(V,W1):3
     [V>=W1,W1>=1] 
* CE 86: start(V,V1) = 0+ unquote1(V,W1):4
     [V+1>=W1,W1>=2] 
* CE 87: start(V,V1) = 2
     [V1>=0,V>=0] 
* CE 88: start(V,V1) = 1
     [] 
* CE 89: start(V,V1) = 0+ activate(V,V):1
     [V>=0] 
* CE 90: start(V,V1) = 0+ activate(V,W1):2
     [W1>=V,V>=1] 

### Cost equations --> "Loop" of start/2 
* CEs [72,73,74,75,77,78,81,82,83,84,85,86,87,88,89,90] --> Loop 46 
* CEs [76,79,80] --> Loop 47 

#### Loops of start/2 
* Loop 46: start(V,V1) [] 
* Loop 47: start(V,V1) [V>=1] 

### Ranking functions of CR start(V,V1) 

#### Partial ranking functions of CR start(V,V1) 


### Resulting Chains:start(V,V1) 
* [47]...
* [46]


### Merging Chains  start/2 into  External patterns of execution 
* [[46]] --> 1 
* [[47]] --> 2 


Computing Bounds
=====================================

#### Cost of chains of from(V,Out):
* Chain [21]: 2
  with precondition: [2*V+3=Out,V>=0] 

* Chain [20]: 1
  with precondition: [V+1=Out,V>=0] 


#### Cost of loops [22,23,24] 

 * loop 22:activate(V,Out) -> [activate(V',Out'),activate(V'2,Out'2)] 
2
 * loop 23:activate(V,Out) -> [activate(V',Out')] 
2
 * loop 24:activate(V,Out) -> [activate(V',Out')] 
3
#### Cost of phase [22,23,24]:activate(V,Out) -> [] 
7*it(22)+2*it([25])+2*it([26])+0
  Such that:it([26]) =< V+1
it([25]) =< V/2+1/2
aux(1) =< V
it(22) =< aux(1)
it([25]) =< aux(1)

#### Cost of chains of activate(V,Out):
* Chain [26]: 2
  with precondition: [V=Out,V>=0] 

* Chain [25]: 2
  with precondition: [V=1,Out=1] 

* Chain [multiple([22,23,24],[[26],[25]])]: 7*it(22)+2*it([25])+2*it([26])+0
  Such that:it([26]) =< V+1
it([25]) =< V/2+1/2
aux(1) =< V
it(22) =< aux(1)
it([25]) =< aux(1)

  with precondition: [V>=1,Out>=V] 


#### Cost of loops [27,28] 

 * loop 27:quote(V,Out) -> [quote(V',Out')] 
9*s(7)+2*s(5)+1
  Such that:s(5) =< V/2
s(6) =< V
s(7) =< s(6)
s(5) =< s(6)

 * loop 28:quote(V,Out) -> [quote(V',Out')] 
3
#### Cost of phase [27,28]:quote(V,Out) -> [quote(V',Out')] 
4*it(27)+9*s(8)+2*s(9)+0
#### Cost of phase [27,28]:quote(V,Out) -> [quote(V',Out')] 
4*it(27)+9*s(8)+2*s(9)+0
#### Cost of phase [27,28]:quote(V,Out) -> [quote(V',Out')] 
4*it(27)+9*s(8)+2*s(9)+0
#### Cost of phase [27,28]:quote(V,Out) -> [quote(V',Out')] 
4*it(27)+9*s(8)+2*s(9)+0
#### Cost of chains of quote(V,Out):
* Chain [[27,28]]...: 15*it(27)+0
  with precondition: [V>=1] 

* Chain [[27,28],31]: 15*it(27)+1
  with precondition: [V>=1,Out>=1] 

* Chain [[27,28],30]: 15*it(27)+5
  with precondition: [V>=2,Out>=V] 

* Chain [[27,28],29]: 15*it(27)+38*s(11)+6*s(12)+3
  Such that:aux(14) =< Out
aux(15) =< Out/2
s(12) =< aux(15)
s(11) =< aux(14)
s(12) =< aux(14)

  with precondition: [V>=2,Out>=3,Out>=V] 

* Chain [31]: 1
  with precondition: [Out=0,V>=0] 

* Chain [30]: 5
  with precondition: [V=Out,V>=1] 

* Chain [29]: 34*s(11)+4*s(12)+2*s(19)+2*s(20)+2*s(24)+3
  Such that:aux(11) =< V+1
s(24) =< V/2+1/2
aux(12) =< V
aux(13) =< V/2
s(12) =< aux(13)
s(11) =< aux(12)
s(12) =< aux(12)
s(20) =< aux(12)
s(19) =< aux(11)
s(20) =< aux(11)
s(24) =< aux(12)

  with precondition: [V>=2,Out>=V] 


#### Cost of loops [33,34,35,36] 

 * loop 33:quote1(V,Out) -> [quote1(V',Out')] 
8*s(74)+47*s(75)+222*s(76)+10
  Such that:s(72) =< V-V'
s(73) =< V/2-V'/2
s(74) =< s(73)
s(75) =< s(72)
s(74) =< s(72)

 * loop 34:quote1(V,Out) -> [quote1(V',Out')] 
4*s(119)+4*s(123)+59*s(121)+2*s(124)+6*s(125)+222*s(126)+2*s(122)+8
  Such that:s(115) =< V/2
s(116) =< V
s(117) =< V+1
s(118) =< V/2+1/2
s(119) =< s(118)
s(120) =< s(116)
s(119) =< s(116)
s(121) =< s(116)
s(119) =< s(117)
s(120) =< s(115)
s(122) =< s(115)
s(122) =< s(116)
s(123) =< s(120)
s(123) =< s(116)
s(124) =< s(116)
s(125) =< s(117)
s(124) =< s(117)

 * loop 35:quote1(V,Out) -> [quote1(V',Out')] 
9*s(133)+2*s(132)+6
  Such that:s(131) =< V-V'
s(132) =< V/2-V'/2
s(133) =< s(131)
s(132) =< s(131)

 * loop 36:quote1(V,Out) -> [quote1(V',Out')] 
25*s(150)+2*s(147)+2*s(151)+2*s(148)+2*s(152)+4
  Such that:s(146) =< V+1
s(147) =< V/2
s(148) =< V/2+1/2
s(149) =< V
s(150) =< s(149)
s(147) =< s(149)
s(151) =< s(146)
s(148) =< s(146)
s(152) =< s(146)
s(152) =< s(149)
s(148) =< s(149)

#### Cost of phase [33,34,35,36]:quote1(V,Out) -> [quote1(V',Out')] 
472*it(33)+8*s(153)+47*s(154)+4*s(158)+4*s(159)+93*s(160)+4*s(161)+8*s(162)+2*s(164)+4*s(171)+2*s(176)+0
#### Cost of phase [33,34,35,36]:quote1(V,Out) -> [quote1(V',Out')] 
472*it(33)+8*s(153)+47*s(154)+4*s(158)+4*s(159)+93*s(160)+4*s(161)+8*s(162)+2*s(164)+4*s(171)+2*s(176)+0
#### Cost of phase [33,34,35,36]:quote1(V,Out) -> [quote1(V',Out')] 
472*it(33)+8*s(153)+47*s(154)+4*s(158)+4*s(159)+93*s(160)+4*s(161)+8*s(162)+2*s(164)+4*s(171)+2*s(176)+0
#### Cost of phase [33,34,35,36]:quote1(V,Out) -> [quote1(V',Out')] 
472*it(33)+8*s(153)+47*s(154)+4*s(158)+4*s(159)+93*s(160)+4*s(161)+8*s(162)+2*s(164)+4*s(171)+2*s(176)+0
#### Cost of phase [33,34,35,36]:quote1(V,Out) -> [quote1(V',Out')] 
472*it(33)+8*s(153)+47*s(154)+4*s(158)+4*s(159)+93*s(160)+4*s(161)+8*s(162)+2*s(164)+4*s(171)+2*s(176)+0
#### Cost of loops [33,34,35,36] 

 * loop 33:quote1(V,Out) -> [quote1(V',Out')] 
8*s(74)+47*s(75)+222*s(76)+10
  Such that:s(72) =< V-V'
s(73) =< V/2-V'/2
s(74) =< s(73)
s(75) =< s(72)
s(74) =< s(72)

 * loop 34:quote1(V,Out) -> [quote1(V',Out')] 
4*s(119)+4*s(123)+59*s(121)+2*s(124)+6*s(125)+222*s(126)+2*s(122)+8
  Such that:s(115) =< V/2
s(116) =< V
s(117) =< V+1
s(118) =< V/2+1/2
s(119) =< s(118)
s(120) =< s(116)
s(119) =< s(116)
s(121) =< s(116)
s(119) =< s(117)
s(120) =< s(115)
s(122) =< s(115)
s(122) =< s(116)
s(123) =< s(120)
s(123) =< s(116)
s(124) =< s(116)
s(125) =< s(117)
s(124) =< s(117)

 * loop 35:quote1(V,Out) -> [quote1(V',Out')] 
9*s(133)+2*s(132)+6
  Such that:s(131) =< V-V'
s(132) =< V/2-V'/2
s(133) =< s(131)
s(132) =< s(131)

 * loop 36:quote1(V,Out) -> [quote1(V',Out')] 
25*s(150)+2*s(147)+2*s(151)+2*s(148)+2*s(152)+4
  Such that:s(146) =< V+1
s(147) =< V/2
s(148) =< V/2+1/2
s(149) =< V
s(150) =< s(149)
s(147) =< s(149)
s(151) =< s(146)
s(148) =< s(146)
s(152) =< s(146)
s(152) =< s(149)
s(148) =< s(149)

#### Cost of phase [33,34,35,36]:quote1(V,Out) -> [] 
502*it(33)+3*it([32])+8*s(153)+47*s(154)+4*s(158)+4*s(159)+93*s(160)+4*s(161)+8*s(162)+2*s(164)+4*s(171)+2*s(176)+9*s(203)+2*s(204)+0
  Such that:it([32]) =< 1

#### Cost of chains of quote1(V,Out):
* Chain [[33,34,35,36]]...: 648*it(33)+0
  with precondition: [V>=1] 

* Chain [[33,34,35,36],39]: 648*it(33)+1
  with precondition: [V>=1,Out>=1] 

* Chain [[33,34,35,36],38]: 648*it(33)+5
  with precondition: [V>=2,Out>=2] 

* Chain [[33,34,35,36],37]: 648*it(33)+38*s(180)+6*s(181)+3
  Such that:aux(57) =< Out
aux(58) =< Out/2
s(181) =< aux(58)
s(180) =< aux(57)
s(181) =< aux(57)

  with precondition: [V>=2,Out>=3] 

* Chain [[33,34,35,36],32]...: 502*it(33)+3*it([32])+8*s(153)+47*s(154)+4*s(158)+4*s(159)+93*s(160)+4*s(161)+8*s(162)+2*s(164)+4*s(171)+2*s(176)+9*s(203)+2*s(204)+0
  Such that:it([32]) =< 1

  with precondition: [V>=2] 

* Chain [39]: 1
  with precondition: [Out=0,V>=0] 

* Chain [38]: 5
  with precondition: [V=Out,V>=1] 

* Chain [37]: 34*s(180)+4*s(181)+2*s(188)+2*s(189)+2*s(193)+3
  Such that:aux(54) =< V+1
s(193) =< V/2+1/2
aux(55) =< V
aux(56) =< V/2
s(181) =< aux(56)
s(180) =< aux(55)
s(181) =< aux(55)
s(189) =< aux(55)
s(188) =< aux(54)
s(189) =< aux(54)
s(193) =< aux(55)

  with precondition: [V>=2,Out>=V] 

* Chain [32]...: 30*s(196)+9*s(197)+2*s(198)+3
  Such that:aux(59) =< V
s(198) =< V/2
s(197) =< aux(59)
s(198) =< aux(59)

  with precondition: [V>=2] 


#### Cost of loops [40] 

 * loop 40:unquote(V,Out) -> [unquote(V',Out')] 
2
#### Cost of phase [40]:unquote(V,Out) -> [unquote(V',Out')] 
2*it(40)+0
  Such that:it(40) =< V
it(40) =< V-V'

#### Cost of chains of unquote(V,Out):
* Chain [[40],41]: 2*it(40)+2
  Such that:it(40) =< Out

  with precondition: [Out>=1,V>=Out] 

* Chain [41]: 2
  with precondition: [Out=0,V>=0] 


#### Cost of loops [42,43] 

 * loop 42:unquote1(V,Out) -> [unquote1(V',Out')] 
2*s(240)+5
  Such that:s(240) =< V-V'

 * loop 43:unquote1(V,Out) -> [unquote1(V',Out')] 
5
#### Cost of phase [42,43]:unquote1(V,Out) -> [unquote1(V',Out')] 
5*it(42)+5*it(43)+2*s(241)+0
  Such that:aux(79) =< V
aux(80) =< V+1
aux(81) =< V-V'
it(42) =< aux(79)
it(43) =< aux(79)
it(43) =< aux(80)
s(241) =< aux(80)
it(42) =< aux(81)
it(43) =< aux(81)
s(241) =< aux(81)

#### Cost of phase [42,43]:unquote1(V,Out) -> [unquote1(V',Out')] 
5*it(42)+5*it(43)+2*s(241)+0
  Such that:aux(79) =< V
aux(80) =< V+1
aux(81) =< V-V'
it(42) =< aux(79)
it(43) =< aux(79)
it(43) =< aux(80)
s(241) =< aux(80)
it(42) =< aux(81)
it(43) =< aux(81)
s(241) =< aux(81)

#### Cost of chains of unquote1(V,Out):
* Chain [[42,43],45]: 5*it(42)+7*it(43)+2
  Such that:aux(80) =< V+1
aux(82) =< V
it(42) =< aux(82)
it(43) =< aux(82)
it(43) =< aux(80)

  with precondition: [Out>=2,V+1>=Out] 

* Chain [[42,43],44]: 5*it(42)+7*it(43)+0
  Such that:aux(80) =< V+1
aux(83) =< V
it(42) =< aux(83)
it(43) =< aux(83)
it(43) =< aux(80)

  with precondition: [Out>=1,V>=Out] 

* Chain [45]: 2
  with precondition: [V=0,Out=1] 

* Chain [44]: 0
  with precondition: [Out=0,V>=0] 


#### Cost of chains of start(V,V1):
* Chain [47]...: 1382*s(242)+3*s(244)+2*s(246)+9*s(247)+3
  Such that:s(244) =< 1
s(245) =< V
s(246) =< V/2
s(247) =< s(245)
s(246) =< s(245)

  with precondition: [V>=1] 

* Chain [46]: 6*s(252)+8*s(255)+87*s(256)+18*s(257)+6*s(258)+2077*s(259)+5
  Such that:aux(84) =< V
aux(85) =< V+1
aux(86) =< V/2
aux(87) =< V/2+1/2
s(256) =< aux(84)
s(258) =< aux(85)
s(252) =< aux(87)
s(255) =< aux(86)
s(255) =< aux(84)
s(257) =< aux(84)
s(257) =< aux(85)
s(252) =< aux(84)

  with precondition: [] 


Closed-form bounds of start(V,V1): 
-------------------------------------
* Chain [47]... with precondition: [V>=1] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [46] with precondition: [] 
    - Upper bound: inf 
    - Complexity: infinity 

### Maximum cost of start(V,V1): inf 
Asymptotic class: infinity 

Time statistics: 
-------------------------------------
* Partial evaluation computed in 26 ms.
* Invariants computed in 44 ms.
   - Backward Invariants 23 ms.
   - Transitive Invariants 7 ms.
* Refinement performed in 96 ms.
* Termination proved in 10 ms.
* Upper bounds computed in 228 ms.
   - Equation cost structures 83 ms.
   - Phase cost structures 159 ms.
   - Chain cost structures 18 ms.
   - Solving cost expressions 1 ms.
* Total analysis performed in 440 ms.



Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. non_recursive  : [fun3/3]
1. non_recursive  : [fun4/2]
2. recursive [non_tail,multiple] : [fun/3,fun1/4,fun2/3,mark/2]
3. non_recursive  : [start/3]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into fun3/3
1. SCC is partially evaluated into fun4/2
2. SCC is partially evaluated into mark/2
3. SCC is partially evaluated into start/3

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations fun3/3 
* CE 20 is refined into CE [24] 
* CE 21 is refined into CE [25] 
* CE 19 is refined into CE [26] 


#### Refined cost equations fun3/3 
* CE 24: fun3(V1,V,Out) = 1
     [V>=1,V1>=1,V1+V=Out] 
* CE 25: fun3(V1,V,Out) = 1
     [V>=0,V1>=0,V1+V+1=Out] 
* CE 26: fun3(V1,V,Out) = 1
     [V>=0,Out=2,V1=0] 

### Cost equations --> "Loop" of fun3/3 
* CEs [24] --> Loop 16 
* CEs [25] --> Loop 17 
* CEs [26] --> Loop 18 

#### Loops of fun3/3 
* Loop 16: fun3(V1,V,Out) [V>=1,V1>=1,V1+V=Out] 
* Loop 17: fun3(V1,V,Out) [V>=0,V1>=0,V1+V+1=Out] 
* Loop 18: fun3(V1,V,Out) [V>=0,Out=2,V1=0] 

### Ranking functions of CR fun3(V1,V,Out) 

#### Partial ranking functions of CR fun3(V1,V,Out) 


### Resulting Chains:fun3(V1,V,Out) 
* [18]
* [17]
* [16]


### Merging Chains  fun3/3 into  External patterns of execution 
* [[18]] --> 1 
* [[17]] --> 2 
* [[16]] --> 3 


### Specialization of cost equations fun4/2 
* CE 22 is refined into CE [27] 
* CE 23 is refined into CE [28] 


#### Refined cost equations fun4/2 
* CE 27: fun4(V1,Out) = 1
     [V1>=0,2*V1+3=Out] 
* CE 28: fun4(V1,Out) = 1
     [V1>=0,V1+1=Out] 

### Cost equations --> "Loop" of fun4/2 
* CEs [27] --> Loop 19 
* CEs [28] --> Loop 20 

#### Loops of fun4/2 
* Loop 19: fun4(V1,Out) [V1>=0,2*V1+3=Out] 
* Loop 20: fun4(V1,Out) [V1>=0,V1+1=Out] 

### Ranking functions of CR fun4(V1,Out) 

#### Partial ranking functions of CR fun4(V1,Out) 


### Resulting Chains:fun4(V1,Out) 
* [20]
* [19]


### Merging Chains  fun4/2 into  External patterns of execution 
* [[20]] --> 1 
* [[19]] --> 2 


### Specialization of cost equations mark/2 
* CE 15 is refined into CE [29,30] 
* CE 16 is refined into CE [31] 
* CE 17 is refined into CE [32] 
* CE 18 is refined into CE [33] 
* CE 12 is refined into CE [34] 
* CE 11 is refined into CE [35] 
* CE 10 is refined into CE [36] 
* CE 14 is refined into CE [37,38,39] 
* CE 9 is refined into CE [40] 
* CE 13 is refined into CE [41] 


#### Refined cost equations mark/2 
* CE 29: mark(A,A) = 1+ fun4(B,A):1
     [A>=1,A=B+1] 
* CE 30: mark(V1,Out) = 1+ fun4(W1,Out):2
     [Out>=3,Out=2*W1+3,Out=2*V1+1] 
* CE 31: mark(A,A) = 1
     [A>=1] 
* CE 32: mark(A,A) = 1
     [A>=1] 
* CE 33: mark(V1,Out) = 1
     [Out=0,V1=0] 
* CE 34: mark(V1,Out) = 2+ mark(W1,X1)+ mark(Y1,Out)
     [V1>=W1+Y1+1,Y1>=0,W1>=0,X1=3] 
* CE 35: mark(V1,Out) = 2+ mark(W1,X1)+ mark(Y1,Out)
     [V1>=W1+Y1+1,Y1>=0,W1>=0,X1=1] 
* CE 36: mark(V1,Out) = 2+ mark(W1,X1)+ mark(Y1,Out)
     [Y1>=0,W1>=0,W1+Y1+1=V1,X1=0] 
* CE 37: mark(V1,Out) = 1+ mark(W1,X1)+ mark(Y1,Z1)+ fun3(A2,Z1,B2):1
     [Y1>=0,W1>=0,Z1>=0,W1+Y1+1=V1,X1=0,B2=2,A2=0,Out=2] 
* CE 38: mark(V1,Out) = 1+ mark(W1,X1)+ mark(Y1,Z1)+ fun3(X1,A2,Out):2
     [Out>=X1+1,Y1>=0,W1>=0,X1>=0,Out=X1+Z1+1,Out=X1+A2+1,W1+Y1+1=V1] 
* CE 39: mark(V1,Out) = 1+ mark(W1,X1)+ mark(Y1,Z1)+ fun3(X1,A2,Out):3
     [Out>=X1+1,Y1>=0,W1>=0,X1>=1,Out=X1+Z1,Out=X1+A2,W1+Y1+1=V1] 
* CE 40: mark(V1,Out) = 2+ mark(W1,X1)
     [Out+W1>=V1,V1>=W1+1,W1>=0,V1+X1=Out+W1] 
* CE 41: mark(V1,Out) = 2+ mark(W1,X1)
     [V1>=W1+1,W1>=0,X1=1,Out=1] 

### Cost equations --> "Loop" of mark/2 
* CEs [40] --> Loop 21 
* CEs [41] --> Loop 22 
* CEs [39] --> Loop 23 
* CEs [38] --> Loop 24 
* CEs [34] --> Loop 25 
* CEs [35] --> Loop 26 
* CEs [36] --> Loop 27 
* CEs [37] --> Loop 28 
* CEs [30] --> Loop 29 
* CEs [29,31,32] --> Loop 30 
* CEs [33] --> Loop 31 

#### Loops of mark/2 
* Loop 21: mark(V1,Out)->  mark(V1',Out')
                  [Out+V1'>=V1,V1>=V1'+1,V1'>=0,V1+Out'=Out+V1'] 
* Loop 22: mark(V1,Out)->  mark(V1',Out')
                  [V1>=V1'+1,V1'>=0,Out'=1,Out=1] 
* Loop 23: mark(V1,Out)->  mark(V1',Out')  mark(V1'2,Out'2)
                  [Out>=Out'+1,V1>=V1'+1,Out'>=1,V1'>=0,Out'+Out'2=Out,V1'+V1'2+1=V1] 
* Loop 24: mark(V1,Out)->  mark(V1',Out')  mark(V1'2,Out'2)
                  [Out>=Out'+1,V1>=V1'+1,Out'>=0,V1'>=0,Out'+Out'2+1=Out,V1'+V1'2+1=V1] 
* Loop 25: mark(V1,Out)->  mark(V1',Out')  mark(V1'2,Out)
                  [V1>=V1'+V1'2+1,V1'2>=0,V1'>=0,Out'=3] 
* Loop 26: mark(V1,Out)->  mark(V1',Out')  mark(V1'2,Out)
                  [V1>=V1'+V1'2+1,V1'2>=0,V1'>=0,Out'=1] 
* Loop 27: mark(V1,Out)->  mark(V1',Out')  mark(V1'2,Out)
                  [V1>=V1'+1,V1'>=0,V1'+V1'2+1=V1,Out'=0] 
* Loop 28: mark(V1,Out)->  mark(V1',Out')  mark(V1'2,Out'2)
                  [V1>=V1'+1,Out'2>=0,V1'>=0,V1'+V1'2+1=V1,Out'=0,Out=2] 
* Loop 29: mark(V1,Out) [V1>=1,2*V1+1=Out] 
* Loop 30: mark(A,A) [A>=1] 
* Loop 31: mark(V1,Out) [Out=0,V1=0] 

### Ranking functions of CR mark(V1,Out) 
* RF of phase [21,22,23,24,25,26,27,28]: [V1]

#### Partial ranking functions of CR mark(V1,Out) 
* Partial RF of phase [21,22,23,24,25,26,27,28]:
  - RF of loop [21:1,22:1,23:1,23:2,24:1,24:2,25:1,25:2,26:1,26:2,27:1,27:2,28:1,28:2]:
    V1


### Resulting Chains:mark(V1,Out) 
* [31]
* [30]
* [29]
* [multiple([21,22,23,24,25,26,27,28],[[31],[30],[29]])]


### Merging Chains  mark/2 into  External patterns of execution 
* [[31]] --> 1 
* [[30],[multiple([21,22,23,24,25,26,27,28],[[31],[30],[29]])]] --> 2 
* [[29]] --> 3 


### Specialization of cost equations start/3 
* CE 5 is refined into CE [42,43,44] 
* CE 4 is refined into CE [45,46,47] 
* CE 2 is refined into CE [48] 
* CE 3 is refined into CE [49,50,51] 
* CE 6 is refined into CE [52,53,54] 
* CE 7 is refined into CE [55,56] 
* CE 8 is refined into CE [57,58,59] 


#### Refined cost equations start/3 
* CE 42: start(V1,V,V2) = 1+ mark(W2,X2):1
     [X2=0,W2=0,V=0,V1=3] 
* CE 43: start(V1,V,V2) = 1+ mark(V,W2):2
     [2*V+1>=W2,5*V>=2*W2+1,W2>=0,V>=1,V1=3] 
* CE 44: start(V1,V,V2) = 1+ mark(W2,X2):3
     [X2>=3,X2=2*W2+1,X2=2*V+1,V1=3] 
* CE 45: start(V1,V,V2) = 1+ mark(W2,X2):1
     [V>=0,X2=0,W2=0,V2=0,V1=1] 
* CE 46: start(V1,V,V2) = 1+ mark(V2,W2):2
     [2*V2+1>=W2,5*V2>=2*W2+1,W2>=0,V2>=1,V>=0,V1=1] 
* CE 47: start(V1,V,V2) = 1+ mark(W2,X2):3
     [X2>=3,V>=0,X2=2*W2+1,X2=2*V2+1,V1=1] 
* CE 48: start(V1,V,V2) = 1
     [V>=0,V1>=0] 
* CE 49: start(V1,V,V2) = 1+ mark(W2,X2):1
     [X2=0,W2=0,V=0,V1=0] 
* CE 50: start(V1,V,V2) = 1+ mark(V,W2):2
     [2*V+1>=W2,5*V>=2*W2+1,W2>=0,V>=1,V1=0] 
* CE 51: start(V1,V,V2) = 1+ mark(W2,X2):3
     [X2>=3,X2=2*W2+1,X2=2*V+1,V1=0] 
* CE 52: start(V1,V,V2) = 0+ fun3(W2,V,X2):1
     [V>=0,X2=2,W2=0,V1=0] 
* CE 53: start(V1,V,V2) = 0+ fun3(V1,W2,X2):2
     [X2>=V1+1,V1>=0,X2=V1+W2+1,X2=V1+V+1] 
* CE 54: start(V1,V,V2) = 0+ fun3(V1,W2,X2):3
     [X2>=V1+1,V1>=1,X2=V1+W2,X2=V1+V] 
* CE 55: start(V1,V,V2) = 0+ fun4(W2,X2):1
     [X2>=1,X2=W2+1,X2=V1+1] 
* CE 56: start(V1,V,V2) = 0+ fun4(W2,X2):2
     [X2>=3,X2=2*W2+3,X2=2*V1+3] 
* CE 57: start(V1,V,V2) = 0+ mark(W2,X2):1
     [X2=0,W2=0,V1=0] 
* CE 58: start(V1,V,V2) = 0+ mark(V1,W2):2
     [2*V1+1>=W2,5*V1>=2*W2+1,W2>=0,V1>=1] 
* CE 59: start(V1,V,V2) = 0+ mark(W2,X2):3
     [X2>=3,X2=2*W2+1,X2=2*V1+1] 

### Cost equations --> "Loop" of start/3 
* CEs [43,44] --> Loop 32 
* CEs [42] --> Loop 33 
* CEs [46,47] --> Loop 34 
* CEs [45] --> Loop 35 
* CEs [48,49,50,51,52,53,54,55,56,57,58,59] --> Loop 36 

#### Loops of start/3 
* Loop 32: start(V1,V,V2) [V>=1,V1=3] 
* Loop 33: start(V1,V,V2) [V=0,V1=3] 
* Loop 34: start(V1,V,V2) [V2>=1,V>=0,V1=1] 
* Loop 35: start(V1,V,V2) [V>=0,V2=0,V1=1] 
* Loop 36: start(V1,V,V2) [V1>=0] 

### Ranking functions of CR start(V1,V,V2) 

#### Partial ranking functions of CR start(V1,V,V2) 


### Resulting Chains:start(V1,V,V2) 
* [36]
* [35]
* [34]
* [33]
* [32]


### Merging Chains  start/3 into  External patterns of execution 
* [[35],[36]] --> 1 
* [[34]] --> 2 
* [[33]] --> 3 
* [[32]] --> 4 


Computing Bounds
=====================================

#### Cost of chains of fun3(V1,V,Out):
* Chain [18]: 1
  with precondition: [V1=0,Out=2,V>=0] 

* Chain [17]: 1
  with precondition: [V+V1+1=Out,V1>=0,V>=0] 

* Chain [16]: 1
  with precondition: [V+V1=Out,V1>=1,V>=1] 


#### Cost of chains of fun4(V1,Out):
* Chain [20]: 1
  with precondition: [V1+1=Out,V1>=0] 

* Chain [19]: 1
  with precondition: [2*V1+3=Out,V1>=0] 


#### Cost of loops [21,22,23,24,25,26,27,28] 

 * loop 21:mark(V1,Out) -> [mark(V1',Out')] 
2
 * loop 22:mark(V1,Out) -> [mark(V1',Out')] 
2
 * loop 23:mark(V1,Out) -> [mark(V1',Out'),mark(V1'2,Out'2)] 
2
 * loop 24:mark(V1,Out) -> [mark(V1',Out'),mark(V1'2,Out'2)] 
2
 * loop 25:mark(V1,Out) -> [mark(V1',Out'),mark(V1'2,Out'2)] 
2
 * loop 26:mark(V1,Out) -> [mark(V1',Out'),mark(V1'2,Out'2)] 
2
 * loop 27:mark(V1,Out) -> [mark(V1',Out'),mark(V1'2,Out'2)] 
2
 * loop 28:mark(V1,Out) -> [mark(V1',Out'),mark(V1'2,Out'2)] 
2
#### Cost of phase [21,22,23,24,25,26,27,28]:mark(V1,Out) -> [] 
4*it(21)+2*it(23)+2*it(24)+8*it(25)+4*it([29])+1*it([31])+0
  Such that:aux(10) =< 1
aux(11) =< V1
aux(12) =< 2/3*V1
aux(13) =< 4/3*V1+1/3
aux(14) =< 6/7*V1
it(21) =< aux(11)
it(23) =< aux(11)
it(24) =< aux(11)
it(25) =< aux(11)
it([29]) =< aux(11)
it(25) =< aux(12)
it(24) =< aux(13)
it(25) =< aux(13)
it([29]) =< aux(13)
it(23) =< aux(14)
it(24) =< aux(14)
it(25) =< aux(14)
it([29]) =< it(25)+it(25)+it(25)+it(25)+it(24)+it(23)+aux(10)
it([31]) =< it(25)+it(25)+it(25)+it(25)+it(24)+it(23)+aux(10)

#### Cost of chains of mark(V1,Out):
* Chain [31]: 1
  with precondition: [V1=0,Out=0] 

* Chain [30]: 2
  with precondition: [V1=Out,V1>=1] 

* Chain [29]: 2
  with precondition: [2*V1+1=Out,V1>=1] 

* Chain [multiple([21,22,23,24,25,26,27,28],[[31],[30],[29]])]: 4*it(21)+2*it(23)+2*it(24)+8*it(25)+4*it([29])+1*it([31])+0
  Such that:aux(10) =< 1
aux(11) =< V1
aux(12) =< 2/3*V1
aux(13) =< 4/3*V1+1/3
aux(14) =< 6/7*V1
it(21) =< aux(11)
it(23) =< aux(11)
it(24) =< aux(11)
it(25) =< aux(11)
it([29]) =< aux(11)
it(25) =< aux(12)
it(24) =< aux(13)
it(25) =< aux(13)
it([29]) =< aux(13)
it(23) =< aux(14)
it(24) =< aux(14)
it(25) =< aux(14)
it([29]) =< it(25)+it(25)+it(25)+it(25)+it(24)+it(23)+aux(10)
it([31]) =< it(25)+it(25)+it(25)+it(25)+it(24)+it(23)+aux(10)

  with precondition: [V1>=1,Out>=0,5*V1>=2*Out+1,2*V1+1>=Out] 


#### Cost of chains of start(V1,V,V2):
* Chain [36]: 4*s(17)+2*s(18)+2*s(19)+8*s(20)+4*s(21)+1*s(22)+4*s(28)+2*s(29)+2*s(30)+8*s(31)+4*s(32)+1*s(33)+3
  Such that:s(24) =< V1
s(25) =< 2/3*V1
s(26) =< 4/3*V1+1/3
s(27) =< 6/7*V1
s(13) =< V
s(14) =< 2/3*V
s(15) =< 4/3*V+1/3
s(16) =< 6/7*V
aux(15) =< 1
s(17) =< s(13)
s(18) =< s(13)
s(19) =< s(13)
s(20) =< s(13)
s(21) =< s(13)
s(20) =< s(14)
s(19) =< s(15)
s(20) =< s(15)
s(21) =< s(15)
s(18) =< s(16)
s(19) =< s(16)
s(20) =< s(16)
s(21) =< s(20)+s(20)+s(20)+s(20)+s(19)+s(18)+aux(15)
s(22) =< s(20)+s(20)+s(20)+s(20)+s(19)+s(18)+aux(15)
s(28) =< s(24)
s(29) =< s(24)
s(30) =< s(24)
s(31) =< s(24)
s(32) =< s(24)
s(31) =< s(25)
s(30) =< s(26)
s(31) =< s(26)
s(32) =< s(26)
s(29) =< s(27)
s(30) =< s(27)
s(31) =< s(27)
s(32) =< s(31)+s(31)+s(31)+s(31)+s(30)+s(29)+aux(15)
s(33) =< s(31)+s(31)+s(31)+s(31)+s(30)+s(29)+aux(15)

  with precondition: [V1>=0] 

* Chain [35]: 2
  with precondition: [V1=1,V2=0,V>=0] 

* Chain [34]: 4*s(39)+2*s(40)+2*s(41)+8*s(42)+4*s(43)+1*s(44)+3
  Such that:s(34) =< 1
s(35) =< V2
s(36) =< 2/3*V2
s(37) =< 4/3*V2+1/3
s(38) =< 6/7*V2
s(39) =< s(35)
s(40) =< s(35)
s(41) =< s(35)
s(42) =< s(35)
s(43) =< s(35)
s(42) =< s(36)
s(41) =< s(37)
s(42) =< s(37)
s(43) =< s(37)
s(40) =< s(38)
s(41) =< s(38)
s(42) =< s(38)
s(43) =< s(42)+s(42)+s(42)+s(42)+s(41)+s(40)+s(34)
s(44) =< s(42)+s(42)+s(42)+s(42)+s(41)+s(40)+s(34)

  with precondition: [V1=1,V>=0,V2>=1] 

* Chain [33]: 2
  with precondition: [V1=3,V=0] 

* Chain [32]: 4*s(50)+2*s(51)+2*s(52)+8*s(53)+4*s(54)+1*s(55)+3
  Such that:s(45) =< 1
s(46) =< V
s(47) =< 2/3*V
s(48) =< 4/3*V+1/3
s(49) =< 6/7*V
s(50) =< s(46)
s(51) =< s(46)
s(52) =< s(46)
s(53) =< s(46)
s(54) =< s(46)
s(53) =< s(47)
s(52) =< s(48)
s(53) =< s(48)
s(54) =< s(48)
s(51) =< s(49)
s(52) =< s(49)
s(53) =< s(49)
s(54) =< s(53)+s(53)+s(53)+s(53)+s(52)+s(51)+s(45)
s(55) =< s(53)+s(53)+s(53)+s(53)+s(52)+s(51)+s(45)

  with precondition: [V1=3,V>=1] 


Closed-form bounds of start(V1,V,V2): 
-------------------------------------
* Chain [36] with precondition: [V1>=0] 
    - Upper bound: 26*V1+5+nat(V)*26 
    - Complexity: n 
* Chain [35] with precondition: [V1=1,V2=0,V>=0] 
    - Upper bound: 2 
    - Complexity: constant 
* Chain [34] with precondition: [V1=1,V>=0,V2>=1] 
    - Upper bound: 26*V2+4 
    - Complexity: n 
* Chain [33] with precondition: [V1=3,V=0] 
    - Upper bound: 2 
    - Complexity: constant 
* Chain [32] with precondition: [V1=3,V>=1] 
    - Upper bound: 26*V+4 
    - Complexity: n 

### Maximum cost of start(V1,V,V2): max([nat(V2)*26+2,nat(V)*26+2+ (26*V1+1)])+2 
Asymptotic class: n 

Time statistics: 
-------------------------------------
* Partial evaluation computed in 31 ms.
* Invariants computed in 92 ms.
   - Backward Invariants 30 ms.
   - Transitive Invariants 21 ms.
* Refinement performed in 145 ms.
* Termination proved in 24 ms.
* Upper bounds computed in 405 ms.
   - Equation cost structures 98 ms.
   - Phase cost structures 297 ms.
   - Chain cost structures 0 ms.
   - Solving cost expressions 20 ms.
* Total analysis performed in 730 ms.


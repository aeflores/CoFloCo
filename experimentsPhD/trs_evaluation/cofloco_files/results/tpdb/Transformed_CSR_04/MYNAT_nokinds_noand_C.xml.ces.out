
Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. recursive  : [fun/3]
1. recursive  : [fun1/2]
2. recursive  : [fun10/3]
3. recursive  : [fun2/4]
4. recursive  : [fun3/2]
5. recursive  : [fun4/4]
6. recursive  : [fun5/4]
7. recursive  : [fun6/4]
8. recursive  : [fun7/3]
9. recursive  : [fun8/2]
10. recursive  : [fun9/2]
11. recursive  : [isNat/2]
12. recursive  : [plus/3]
13. non_recursive  : [proper/2]
14. recursive  : [s/2]
15. recursive  : [top/2]
16. recursive  : [x/3]
17. non_recursive  : [start/3]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into fun/3
1. SCC is partially evaluated into fun1/2
2. SCC is partially evaluated into fun10/3
3. SCC is partially evaluated into fun2/4
4. SCC is partially evaluated into fun3/2
5. SCC is partially evaluated into fun4/4
6. SCC is partially evaluated into fun5/4
7. SCC is partially evaluated into fun6/4
8. SCC is partially evaluated into fun7/3
9. SCC is partially evaluated into fun8/2
10. SCC is partially evaluated into fun9/2
11. SCC is partially evaluated into isNat/2
12. SCC is partially evaluated into plus/3
13. SCC is partially evaluated into proper/2
14. SCC is partially evaluated into s/2
15. SCC is partially evaluated into top/2
16. SCC is partially evaluated into x/3
17. SCC is partially evaluated into start/3

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations fun/3 
* CE 21 is refined into CE [66] 
* CE 20 is refined into CE [67] 
* CE 19 is refined into CE [68] 


#### Refined cost equations fun/3 
* CE 66: fun(V1,V,Out) = 0
     [V>=0,V1>=0,Out=0] 
* CE 67: fun(V1,V,Out) = 1+ fun(W1,V,X1)
     [W1>=0,V>=0,X1+1=Out,W1+1=V1] 
* CE 68: fun(V1,V,Out) = 1+ fun(W1,X1,Y1)
     [X1>=0,W1>=0,Y1+1=Out,X1+1=V,W1+1=V1] 

### Cost equations --> "Loop" of fun/3 
* CEs [67] --> Loop 48 
* CEs [68] --> Loop 49 
* CEs [66] --> Loop 50 

#### Loops of fun/3 
* Loop 48: fun(V1,V,Out)->  fun(V1',V,Out')
                  [V>=0,V1>=1,Out=Out'+1,V1=V1'+1] 
* Loop 49: fun(V1,V,Out)->  fun(V1',V',Out')
                  [V>=1,V1>=1,Out=Out'+1,V=V'+1,V1=V1'+1] 
* Loop 50: fun(V1,V,Out) [V>=0,V1>=0,Out=0] 

### Ranking functions of CR fun(V1,V,Out) 
* RF of phase [48,49]: [V1]

#### Partial ranking functions of CR fun(V1,V,Out) 
* Partial RF of phase [48,49]:
  - RF of loop [48:1,49:1]:
    V1
  - RF of loop [49:1]:
    V


### Resulting Chains:fun(V1,V,Out) 
* [[48,49],50]
* [50]


### Merging Chains  fun/3 into  External patterns of execution 
* [[50]] --> 1 
* [[50,[48,49]]] --> 2 


### Specialization of cost equations fun1/2 
* CE 26 is refined into CE [69] 
* CE 25 is refined into CE [70] 


#### Refined cost equations fun1/2 
* CE 69: fun1(V1,Out) = 0
     [V1>=0,Out=0] 
* CE 70: fun1(V1,Out) = 1+ fun1(W1,X1)
     [W1>=0,X1+1=Out,W1+1=V1] 

### Cost equations --> "Loop" of fun1/2 
* CEs [70] --> Loop 51 
* CEs [69] --> Loop 52 

#### Loops of fun1/2 
* Loop 51: fun1(V1,Out)->  fun1(V1',Out')
                  [V1'>=0,Out=Out'+1,V1'+1=V1] 
* Loop 52: fun1(V1,Out) [V1>=0,Out=0] 

### Ranking functions of CR fun1(V1,Out) 
* RF of phase [51]: [V1]

#### Partial ranking functions of CR fun1(V1,Out) 
* Partial RF of phase [51]:
  - RF of loop [51:1]:
    V1


### Resulting Chains:fun1(V1,Out) 
* [[51],52]
* [52]


### Merging Chains  fun1/2 into  External patterns of execution 
* [[52]] --> 1 
* [[52,[51]]] --> 2 


### Specialization of cost equations fun10/3 
* CE 59 is refined into CE [71] 
* CE 58 is refined into CE [72] 
* CE 57 is refined into CE [73] 


#### Refined cost equations fun10/3 
* CE 71: fun10(V1,V,Out) = 0
     [V>=0,V1>=0,Out=0] 
* CE 72: fun10(V1,V,Out) = 1+ fun10(W1,V,X1)
     [W1>=0,V>=0,X1+1=Out,W1+1=V1] 
* CE 73: fun10(V1,V,Out) = 1+ fun10(W1,X1,Y1)
     [X1>=0,W1>=0,Y1+1=Out,X1+1=V,W1+1=V1] 

### Cost equations --> "Loop" of fun10/3 
* CEs [72] --> Loop 53 
* CEs [73] --> Loop 54 
* CEs [71] --> Loop 55 

#### Loops of fun10/3 
* Loop 53: fun10(V1,V,Out)->  fun10(V1',V,Out')
                  [V>=0,V1>=1,Out=Out'+1,V1=V1'+1] 
* Loop 54: fun10(V1,V,Out)->  fun10(V1',V',Out')
                  [V>=1,V1>=1,Out=Out'+1,V=V'+1,V1=V1'+1] 
* Loop 55: fun10(V1,V,Out) [V>=0,V1>=0,Out=0] 

### Ranking functions of CR fun10(V1,V,Out) 
* RF of phase [53,54]: [V1]

#### Partial ranking functions of CR fun10(V1,V,Out) 
* Partial RF of phase [53,54]:
  - RF of loop [53:1,54:1]:
    V1
  - RF of loop [54:1]:
    V


### Resulting Chains:fun10(V1,V,Out) 
* [[53,54],55]
* [55]


### Merging Chains  fun10/3 into  External patterns of execution 
* [[55]] --> 1 
* [[55,[53,54]]] --> 2 


### Specialization of cost equations fun2/4 
* CE 31 is refined into CE [74] 
* CE 30 is refined into CE [75] 
* CE 29 is refined into CE [76] 


#### Refined cost equations fun2/4 
* CE 74: fun2(V1,V,V2,Out) = 0
     [V2>=0,V>=0,V1>=0,Out=0] 
* CE 75: fun2(V1,V,V2,Out) = 1+ fun2(W2,V,V2,X2)
     [W2>=0,V2>=0,V>=0,X2+1=Out,W2+1=V1] 
* CE 76: fun2(V1,V,V2,Out) = 1+ fun2(W2,X2,Y2,Z2)
     [Y2>=0,X2>=0,W2>=0,Z2+1=Out,Y2+1=V2,X2+1=V,W2+1=V1] 

### Cost equations --> "Loop" of fun2/4 
* CEs [75] --> Loop 56 
* CEs [76] --> Loop 57 
* CEs [74] --> Loop 58 

#### Loops of fun2/4 
* Loop 56: fun2(V1,V,V2,Out)->  fun2(V1',V,V2,Out')
                  [V2>=0,V>=0,V1>=1,Out=Out'+1,V1=V1'+1] 
* Loop 57: fun2(V1,V,V2,Out)->  fun2(V1',V',V2',Out')
                  [V2>=1,V>=1,V1>=1,Out=Out'+1,V2=V2'+1,V=V'+1,V1=V1'+1] 
* Loop 58: fun2(V1,V,V2,Out) [V2>=0,V>=0,V1>=0,Out=0] 

### Ranking functions of CR fun2(V1,V,V2,Out) 
* RF of phase [56,57]: [V1]

#### Partial ranking functions of CR fun2(V1,V,V2,Out) 
* Partial RF of phase [56,57]:
  - RF of loop [56:1,57:1]:
    V1
  - RF of loop [57:1]:
    V
    V2


### Resulting Chains:fun2(V1,V,V2,Out) 
* [[56,57],58]
* [58]


### Merging Chains  fun2/4 into  External patterns of execution 
* [[58]] --> 1 
* [[58,[56,57]]] --> 2 


### Specialization of cost equations fun3/2 
* CE 33 is refined into CE [77] 
* CE 32 is refined into CE [78] 


#### Refined cost equations fun3/2 
* CE 77: fun3(V1,Out) = 0
     [V1>=0,Out=0] 
* CE 78: fun3(V1,Out) = 1+ fun3(W1,X1)
     [W1>=0,X1+1=Out,W1+1=V1] 

### Cost equations --> "Loop" of fun3/2 
* CEs [78] --> Loop 59 
* CEs [77] --> Loop 60 

#### Loops of fun3/2 
* Loop 59: fun3(V1,Out)->  fun3(V1',Out')
                  [V1'>=0,Out=Out'+1,V1'+1=V1] 
* Loop 60: fun3(V1,Out) [V1>=0,Out=0] 

### Ranking functions of CR fun3(V1,Out) 
* RF of phase [59]: [V1]

#### Partial ranking functions of CR fun3(V1,Out) 
* Partial RF of phase [59]:
  - RF of loop [59:1]:
    V1


### Resulting Chains:fun3(V1,Out) 
* [[59],60]
* [60]


### Merging Chains  fun3/2 into  External patterns of execution 
* [[60]] --> 1 
* [[60,[59]]] --> 2 


### Specialization of cost equations fun4/4 
* CE 36 is refined into CE [79] 
* CE 34 is refined into CE [80] 
* CE 35 is refined into CE [81] 


#### Refined cost equations fun4/4 
* CE 79: fun4(V1,V,V2,Out) = 0
     [V2>=0,V>=0,V1>=0,Out=0] 
* CE 80: fun4(V1,V,V2,Out) = 1+ fun4(W2,V,V2,X2)
     [W2>=0,V2>=0,V>=0,X2+1=Out,W2+1=V1] 
* CE 81: fun4(V1,V,V2,Out) = 1+ fun4(W2,X2,Y2,Z2)
     [Y2>=0,X2>=0,W2>=0,Z2+1=Out,Y2+1=V2,X2+1=V,W2+1=V1] 

### Cost equations --> "Loop" of fun4/4 
* CEs [80] --> Loop 61 
* CEs [81] --> Loop 62 
* CEs [79] --> Loop 63 

#### Loops of fun4/4 
* Loop 61: fun4(V1,V,V2,Out)->  fun4(V1',V,V2,Out')
                  [V2>=0,V>=0,V1>=1,Out=Out'+1,V1=V1'+1] 
* Loop 62: fun4(V1,V,V2,Out)->  fun4(V1',V',V2',Out')
                  [V2>=1,V>=1,V1>=1,Out=Out'+1,V2=V2'+1,V=V'+1,V1=V1'+1] 
* Loop 63: fun4(V1,V,V2,Out) [V2>=0,V>=0,V1>=0,Out=0] 

### Ranking functions of CR fun4(V1,V,V2,Out) 
* RF of phase [61,62]: [V1]

#### Partial ranking functions of CR fun4(V1,V,V2,Out) 
* Partial RF of phase [61,62]:
  - RF of loop [61:1,62:1]:
    V1
  - RF of loop [62:1]:
    V
    V2


### Resulting Chains:fun4(V1,V,V2,Out) 
* [[61,62],63]
* [63]


### Merging Chains  fun4/4 into  External patterns of execution 
* [[63]] --> 1 
* [[63,[61,62]]] --> 2 


### Specialization of cost equations fun5/4 
* CE 39 is refined into CE [82] 
* CE 37 is refined into CE [83] 
* CE 38 is refined into CE [84] 


#### Refined cost equations fun5/4 
* CE 82: fun5(V1,V,V2,Out) = 0
     [V2>=0,V>=0,V1>=0,Out=0] 
* CE 83: fun5(V1,V,V2,Out) = 1+ fun5(W2,V,V2,X2)
     [W2>=0,V2>=0,V>=0,X2+1=Out,W2+1=V1] 
* CE 84: fun5(V1,V,V2,Out) = 1+ fun5(W2,X2,Y2,Z2)
     [Y2>=0,X2>=0,W2>=0,Z2+1=Out,Y2+1=V2,X2+1=V,W2+1=V1] 

### Cost equations --> "Loop" of fun5/4 
* CEs [83] --> Loop 64 
* CEs [84] --> Loop 65 
* CEs [82] --> Loop 66 

#### Loops of fun5/4 
* Loop 64: fun5(V1,V,V2,Out)->  fun5(V1',V,V2,Out')
                  [V2>=0,V>=0,V1>=1,Out=Out'+1,V1=V1'+1] 
* Loop 65: fun5(V1,V,V2,Out)->  fun5(V1',V',V2',Out')
                  [V2>=1,V>=1,V1>=1,Out=Out'+1,V2=V2'+1,V=V'+1,V1=V1'+1] 
* Loop 66: fun5(V1,V,V2,Out) [V2>=0,V>=0,V1>=0,Out=0] 

### Ranking functions of CR fun5(V1,V,V2,Out) 
* RF of phase [64,65]: [V1]

#### Partial ranking functions of CR fun5(V1,V,V2,Out) 
* Partial RF of phase [64,65]:
  - RF of loop [64:1,65:1]:
    V1
  - RF of loop [65:1]:
    V
    V2


### Resulting Chains:fun5(V1,V,V2,Out) 
* [[64,65],66]
* [66]


### Merging Chains  fun5/4 into  External patterns of execution 
* [[66]] --> 1 
* [[66,[64,65]]] --> 2 


### Specialization of cost equations fun6/4 
* CE 42 is refined into CE [85] 
* CE 40 is refined into CE [86] 
* CE 41 is refined into CE [87] 


#### Refined cost equations fun6/4 
* CE 85: fun6(V1,V,V2,Out) = 0
     [V2>=0,V>=0,V1>=0,Out=0] 
* CE 86: fun6(V1,V,V2,Out) = 1+ fun6(W2,V,V2,X2)
     [W2>=0,V2>=0,V>=0,X2+1=Out,W2+1=V1] 
* CE 87: fun6(V1,V,V2,Out) = 1+ fun6(W2,X2,Y2,Z2)
     [Y2>=0,X2>=0,W2>=0,Z2+1=Out,Y2+1=V2,X2+1=V,W2+1=V1] 

### Cost equations --> "Loop" of fun6/4 
* CEs [86] --> Loop 67 
* CEs [87] --> Loop 68 
* CEs [85] --> Loop 69 

#### Loops of fun6/4 
* Loop 67: fun6(V1,V,V2,Out)->  fun6(V1',V,V2,Out')
                  [V2>=0,V>=0,V1>=1,Out=Out'+1,V1=V1'+1] 
* Loop 68: fun6(V1,V,V2,Out)->  fun6(V1',V',V2',Out')
                  [V2>=1,V>=1,V1>=1,Out=Out'+1,V2=V2'+1,V=V'+1,V1=V1'+1] 
* Loop 69: fun6(V1,V,V2,Out) [V2>=0,V>=0,V1>=0,Out=0] 

### Ranking functions of CR fun6(V1,V,V2,Out) 
* RF of phase [67,68]: [V1]

#### Partial ranking functions of CR fun6(V1,V,V2,Out) 
* Partial RF of phase [67,68]:
  - RF of loop [67:1,68:1]:
    V1
  - RF of loop [68:1]:
    V
    V2


### Resulting Chains:fun6(V1,V,V2,Out) 
* [[67,68],69]
* [69]


### Merging Chains  fun6/4 into  External patterns of execution 
* [[69]] --> 1 
* [[69,[67,68]]] --> 2 


### Specialization of cost equations fun7/3 
* CE 45 is refined into CE [88] 
* CE 43 is refined into CE [89] 
* CE 44 is refined into CE [90] 


#### Refined cost equations fun7/3 
* CE 88: fun7(V1,V,Out) = 0
     [V>=0,V1>=0,Out=0] 
* CE 89: fun7(V1,V,Out) = 1+ fun7(W1,V,X1)
     [W1>=0,V>=0,X1+1=Out,W1+1=V1] 
* CE 90: fun7(V1,V,Out) = 1+ fun7(W1,X1,Y1)
     [X1>=0,W1>=0,Y1+1=Out,X1+1=V,W1+1=V1] 

### Cost equations --> "Loop" of fun7/3 
* CEs [89] --> Loop 70 
* CEs [90] --> Loop 71 
* CEs [88] --> Loop 72 

#### Loops of fun7/3 
* Loop 70: fun7(V1,V,Out)->  fun7(V1',V,Out')
                  [V>=0,V1>=1,Out=Out'+1,V1=V1'+1] 
* Loop 71: fun7(V1,V,Out)->  fun7(V1',V',Out')
                  [V>=1,V1>=1,Out=Out'+1,V=V'+1,V1=V1'+1] 
* Loop 72: fun7(V1,V,Out) [V>=0,V1>=0,Out=0] 

### Ranking functions of CR fun7(V1,V,Out) 
* RF of phase [70,71]: [V1]

#### Partial ranking functions of CR fun7(V1,V,Out) 
* Partial RF of phase [70,71]:
  - RF of loop [70:1,71:1]:
    V1
  - RF of loop [71:1]:
    V


### Resulting Chains:fun7(V1,V,Out) 
* [[70,71],72]
* [72]


### Merging Chains  fun7/3 into  External patterns of execution 
* [[72]] --> 1 
* [[72,[70,71]]] --> 2 


### Specialization of cost equations fun8/2 
* CE 51 is refined into CE [91] 
* CE 50 is refined into CE [92] 


#### Refined cost equations fun8/2 
* CE 91: fun8(V1,Out) = 0
     [V1>=0,Out=0] 
* CE 92: fun8(V1,Out) = 1+ fun8(W1,X1)
     [W1>=0,X1+1=Out,W1+1=V1] 

### Cost equations --> "Loop" of fun8/2 
* CEs [92] --> Loop 73 
* CEs [91] --> Loop 74 

#### Loops of fun8/2 
* Loop 73: fun8(V1,Out)->  fun8(V1',Out')
                  [V1'>=0,Out=Out'+1,V1'+1=V1] 
* Loop 74: fun8(V1,Out) [V1>=0,Out=0] 

### Ranking functions of CR fun8(V1,Out) 
* RF of phase [73]: [V1]

#### Partial ranking functions of CR fun8(V1,Out) 
* Partial RF of phase [73]:
  - RF of loop [73:1]:
    V1


### Resulting Chains:fun8(V1,Out) 
* [[73],74]
* [74]


### Merging Chains  fun8/2 into  External patterns of execution 
* [[74]] --> 1 
* [[74,[73]]] --> 2 


### Specialization of cost equations fun9/2 
* CE 56 is refined into CE [93] 
* CE 55 is refined into CE [94] 


#### Refined cost equations fun9/2 
* CE 93: fun9(V1,Out) = 0
     [V1>=0,Out=0] 
* CE 94: fun9(V1,Out) = 1+ fun9(W1,X1)
     [W1>=0,X1+1=Out,W1+1=V1] 

### Cost equations --> "Loop" of fun9/2 
* CEs [94] --> Loop 75 
* CEs [93] --> Loop 76 

#### Loops of fun9/2 
* Loop 75: fun9(V1,Out)->  fun9(V1',Out')
                  [V1'>=0,Out=Out'+1,V1'+1=V1] 
* Loop 76: fun9(V1,Out) [V1>=0,Out=0] 

### Ranking functions of CR fun9(V1,Out) 
* RF of phase [75]: [V1]

#### Partial ranking functions of CR fun9(V1,Out) 
* Partial RF of phase [75]:
  - RF of loop [75:1]:
    V1


### Resulting Chains:fun9(V1,Out) 
* [[75],76]
* [76]


### Merging Chains  fun9/2 into  External patterns of execution 
* [[76]] --> 1 
* [[76,[75]]] --> 2 


### Specialization of cost equations isNat/2 
* CE 28 is refined into CE [95] 
* CE 27 is refined into CE [96] 


#### Refined cost equations isNat/2 
* CE 95: isNat(V1,Out) = 0
     [V1>=0,Out=0] 
* CE 96: isNat(V1,Out) = 1+ isNat(W1,X1)
     [W1>=0,X1+1=Out,W1+1=V1] 

### Cost equations --> "Loop" of isNat/2 
* CEs [96] --> Loop 77 
* CEs [95] --> Loop 78 

#### Loops of isNat/2 
* Loop 77: isNat(V1,Out)->  isNat(V1',Out')
                  [V1'>=0,Out=Out'+1,V1'+1=V1] 
* Loop 78: isNat(V1,Out) [V1>=0,Out=0] 

### Ranking functions of CR isNat(V1,Out) 
* RF of phase [77]: [V1]

#### Partial ranking functions of CR isNat(V1,Out) 
* Partial RF of phase [77]:
  - RF of loop [77:1]:
    V1


### Resulting Chains:isNat(V1,Out) 
* [[77],78]
* [78]


### Merging Chains  isNat/2 into  External patterns of execution 
* [[78]] --> 1 
* [[78,[77]]] --> 2 


### Specialization of cost equations plus/3 
* CE 49 is refined into CE [97] 
* CE 47 is refined into CE [98] 
* CE 48 is refined into CE [99] 
* CE 46 is refined into CE [100] 


#### Refined cost equations plus/3 
* CE 97: plus(V1,V,Out) = 0
     [V>=0,V1>=0,Out=0] 
* CE 98: plus(V1,V,Out) = 1+ plus(V1,W1,X1)
     [W1>=0,V1>=0,X1+1=Out,W1+1=V] 
* CE 99: plus(V1,V,Out) = 1+ plus(W1,V,X1)
     [W1>=0,V>=0,X1+1=Out,W1+1=V1] 
* CE 100: plus(V1,V,Out) = 1+ plus(W1,X1,Y1)
     [X1>=0,W1>=0,Y1+1=Out,X1+1=V,W1+1=V1] 

### Cost equations --> "Loop" of plus/3 
* CEs [98] --> Loop 79 
* CEs [99] --> Loop 80 
* CEs [100] --> Loop 81 
* CEs [97] --> Loop 82 

#### Loops of plus/3 
* Loop 79: plus(V1,V,Out)->  plus(V1,V',Out')
                  [V>=1,V1>=0,Out=Out'+1,V=V'+1] 
* Loop 80: plus(V1,V,Out)->  plus(V1',V,Out')
                  [V>=0,V1>=1,Out=Out'+1,V1=V1'+1] 
* Loop 81: plus(V1,V,Out)->  plus(V1',V',Out')
                  [V>=1,V1>=1,Out=Out'+1,V=V'+1,V1=V1'+1] 
* Loop 82: plus(V1,V,Out) [V>=0,V1>=0,Out=0] 

### Ranking functions of CR plus(V1,V,Out) 
* RF of phase [79,80,81]: [V1+V]

#### Partial ranking functions of CR plus(V1,V,Out) 
* Partial RF of phase [79,80,81]:
  - RF of loop [79:1,81:1]:
    V
  - RF of loop [80:1,81:1]:
    V1


### Resulting Chains:plus(V1,V,Out) 
* [[79,80,81],82]
* [82]


### Merging Chains  plus/3 into  External patterns of execution 
* [[82]] --> 1 
* [[82,[79,80,81]]] --> 2 


### Specialization of cost equations proper/2 
* CE 54 is refined into CE [101] 
* CE 52 is refined into CE [102] 
* CE 53 is refined into CE [103] 


#### Refined cost equations proper/2 
* CE 101: proper(V1,Out) = 0
     [V1>=0,Out=0] 
* CE 102: proper(V1,Out) = 1
     [Out=2,V1=1] 
* CE 103: proper(V1,Out) = 1
     [Out=1,V1=0] 

### Cost equations --> "Loop" of proper/2 
* CEs [101] --> Loop 83 
* CEs [102] --> Loop 84 
* CEs [103] --> Loop 85 

#### Loops of proper/2 
* Loop 83: proper(V1,Out) [V1>=0,Out=0] 
* Loop 84: proper(V1,Out) [Out=2,V1=1] 
* Loop 85: proper(V1,Out) [Out=1,V1=0] 

### Ranking functions of CR proper(V1,Out) 

#### Partial ranking functions of CR proper(V1,Out) 


### Resulting Chains:proper(V1,Out) 
* [85]
* [84]
* [83]


### Merging Chains  proper/2 into  External patterns of execution 
* [[85]] --> 1 
* [[84]] --> 2 
* [[83]] --> 3 


### Specialization of cost equations s/2 
* CE 65 is refined into CE [104] 
* CE 64 is refined into CE [105] 


#### Refined cost equations s/2 
* CE 104: s(V1,Out) = 0
     [V1>=0,Out=0] 
* CE 105: s(V1,Out) = 1+ s(W1,X1)
     [W1>=0,X1+1=Out,W1+1=V1] 

### Cost equations --> "Loop" of s/2 
* CEs [105] --> Loop 86 
* CEs [104] --> Loop 87 

#### Loops of s/2 
* Loop 86: s(V1,Out)->  s(V1',Out')
                  [V1'>=0,Out=Out'+1,V1'+1=V1] 
* Loop 87: s(V1,Out) [V1>=0,Out=0] 

### Ranking functions of CR s(V1,Out) 
* RF of phase [86]: [V1]

#### Partial ranking functions of CR s(V1,Out) 
* Partial RF of phase [86]:
  - RF of loop [86:1]:
    V1


### Resulting Chains:s(V1,Out) 
* [[86],87]
* [87]


### Merging Chains  s/2 into  External patterns of execution 
* [[87]] --> 1 
* [[87,[86]]] --> 2 


### Specialization of cost equations top/2 
* CE 24 is refined into CE [106] 
* CE 22 is refined into CE [107] 
* CE 23 is refined into CE [108,109,110] 


#### Refined cost equations top/2 
* CE 106: top(V1,Out) = 0
     [V1>=0,Out=0] 
* CE 107: top(V1,Out) = 1+ top(V1,Out)
     [V1>=1] 
* CE 108: top(V1,Out) = 1+ proper(W1,X1):1+ top(Y1,Out)
     [Y1=1,X1=1,W1=0,V1=1] 
* CE 109: top(V1,Out) = 1+ proper(W1,X1):2+ top(Y1,Out)
     [Y1=2,X1=2,W1=1,V1=2] 
* CE 110: top(V1,Out) = 1+ proper(W1,X1):3+ top(Y1,Out)
     [W1>=0,W1+1=V1,Y1=0,X1=0] 

### Cost equations --> "Loop" of top/2 
* CEs [110] --> Loop 88 
* CEs [109] --> Loop 89 
* CEs [107,108] --> Loop 90 
* CEs [106] --> Loop 91 

#### Loops of top/2 
* Loop 88: top(V1,Out)->  top(V1',Out)
                  [V1>=1,V1'=0] 
* Loop 89: top(V1,Out)->  top(V1',Out)
                  [V1'=2,V1=2] 
* Loop 90: top(V1,Out)->  top(V1,Out)
                  [V1>=1] 
* Loop 91: top(V1,Out) [V1>=0,Out=0] 

### Ranking functions of CR top(V1,Out) 

#### Partial ranking functions of CR top(V1,Out) 


### Resulting Chains:top(V1,Out) 
* [[89,90]]...
* [[89,90],91]
* [[89,90],88,91]
* [91]
* [88,91]


### Merging Chains  top/2 into  External patterns of execution 
* [[91,88],[91],[91,88,[89,90]],[91,[89,90]]] --> 1 
* [[[89,90]]] --> 2 


### Specialization of cost equations x/3 
* CE 63 is refined into CE [111] 
* CE 62 is refined into CE [112] 
* CE 60 is refined into CE [113] 
* CE 61 is refined into CE [114] 


#### Refined cost equations x/3 
* CE 111: x(V1,V,Out) = 0
     [V>=0,V1>=0,Out=0] 
* CE 112: x(V1,V,Out) = 1+ x(V1,W1,X1)
     [W1>=0,V1>=0,X1+1=Out,W1+1=V] 
* CE 113: x(V1,V,Out) = 1+ x(W1,V,X1)
     [W1>=0,V>=0,X1+1=Out,W1+1=V1] 
* CE 114: x(V1,V,Out) = 1+ x(W1,X1,Y1)
     [X1>=0,W1>=0,Y1+1=Out,X1+1=V,W1+1=V1] 

### Cost equations --> "Loop" of x/3 
* CEs [112] --> Loop 92 
* CEs [113] --> Loop 93 
* CEs [114] --> Loop 94 
* CEs [111] --> Loop 95 

#### Loops of x/3 
* Loop 92: x(V1,V,Out)->  x(V1,V',Out')
                  [V>=1,V1>=0,Out=Out'+1,V=V'+1] 
* Loop 93: x(V1,V,Out)->  x(V1',V,Out')
                  [V>=0,V1>=1,Out=Out'+1,V1=V1'+1] 
* Loop 94: x(V1,V,Out)->  x(V1',V',Out')
                  [V>=1,V1>=1,Out=Out'+1,V=V'+1,V1=V1'+1] 
* Loop 95: x(V1,V,Out) [V>=0,V1>=0,Out=0] 

### Ranking functions of CR x(V1,V,Out) 
* RF of phase [92,93,94]: [V1+V]

#### Partial ranking functions of CR x(V1,V,Out) 
* Partial RF of phase [92,93,94]:
  - RF of loop [92:1,94:1]:
    V
  - RF of loop [93:1,94:1]:
    V1


### Resulting Chains:x(V1,V,Out) 
* [[92,93,94],95]
* [95]


### Merging Chains  x/3 into  External patterns of execution 
* [[95]] --> 1 
* [[95,[92,93,94]]] --> 2 


### Specialization of cost equations start/3 
* CE 2 is refined into CE [115,116] 
* CE 3 is refined into CE [117,118] 
* CE 4 is refined into CE [119,120] 
* CE 5 is refined into CE [121,122] 
* CE 6 is refined into CE [123,124] 
* CE 7 is refined into CE [125,126] 
* CE 8 is refined into CE [127,128] 
* CE 9 is refined into CE [129,130] 
* CE 10 is refined into CE [131,132] 
* CE 11 is refined into CE [133,134] 
* CE 12 is refined into CE [135,136] 
* CE 13 is refined into CE [137,138] 
* CE 14 is refined into CE [139,140,141] 
* CE 15 is refined into CE [142,143] 
* CE 16 is refined into CE [144,145] 
* CE 17 is refined into CE [146,147] 
* CE 18 is refined into CE [148,149] 


#### Refined cost equations start/3 
* CE 115: start(V1,V,V2) = 0+ fun(V1,V,W2):1
     [V>=0,V1>=0,W2=0] 
* CE 116: start(V1,V,V2) = 0+ fun(V1,V,W2):2
     [V1>=W2,W2>=1,V>=0] 
* CE 117: start(V1,V,V2) = 0+ top(V1,W2):1
     [V1>=0,W2=0] 
* CE 118: start(V1,V,V2) = 0+ top(V1,W2):2
     [V1>=1] 
* CE 119: start(V1,V,V2) = 0+ fun1(V1,W2):1
     [V1>=0,W2=0] 
* CE 120: start(V1,V,V2) = 0+ fun1(V1,W2):2
     [V1>=W2,W2>=1] 
* CE 121: start(V1,V,V2) = 0+ isNat(V1,W2):1
     [V1>=0,W2=0] 
* CE 122: start(V1,V,V2) = 0+ isNat(V1,W2):2
     [V1>=W2,W2>=1] 
* CE 123: start(V1,V,V2) = 0+ fun2(V1,V,V2,W2):1
     [V2>=0,V>=0,V1>=0,W2=0] 
* CE 124: start(V1,V,V2) = 0+ fun2(V1,V,V2,W2):2
     [V1>=W2,W2>=1,V2>=0,V>=0] 
* CE 125: start(V1,V,V2) = 0+ fun3(V1,W2):1
     [V1>=0,W2=0] 
* CE 126: start(V1,V,V2) = 0+ fun3(V1,W2):2
     [V1>=W2,W2>=1] 
* CE 127: start(V1,V,V2) = 0+ fun4(V1,V,V2,W2):1
     [V2>=0,V>=0,V1>=0,W2=0] 
* CE 128: start(V1,V,V2) = 0+ fun4(V1,V,V2,W2):2
     [V1>=W2,W2>=1,V2>=0,V>=0] 
* CE 129: start(V1,V,V2) = 0+ fun5(V1,V,V2,W2):1
     [V2>=0,V>=0,V1>=0,W2=0] 
* CE 130: start(V1,V,V2) = 0+ fun5(V1,V,V2,W2):2
     [V1>=W2,W2>=1,V2>=0,V>=0] 
* CE 131: start(V1,V,V2) = 0+ fun6(V1,V,V2,W2):1
     [V2>=0,V>=0,V1>=0,W2=0] 
* CE 132: start(V1,V,V2) = 0+ fun6(V1,V,V2,W2):2
     [V1>=W2,W2>=1,V2>=0,V>=0] 
* CE 133: start(V1,V,V2) = 0+ fun7(V1,V,W2):1
     [V>=0,V1>=0,W2=0] 
* CE 134: start(V1,V,V2) = 0+ fun7(V1,V,W2):2
     [V1>=W2,W2>=1,V>=0] 
* CE 135: start(V1,V,V2) = 0+ plus(V1,V,W2):1
     [V>=0,V1>=0,W2=0] 
* CE 136: start(V1,V,V2) = 0+ plus(V1,V,W2):2
     [V1+V>=W2,W2>=1,V>=0,V1>=0] 
* CE 137: start(V1,V,V2) = 0+ fun8(V1,W2):1
     [V1>=0,W2=0] 
* CE 138: start(V1,V,V2) = 0+ fun8(V1,W2):2
     [V1>=W2,W2>=1] 
* CE 139: start(V1,V,V2) = 0+ proper(W2,X2):1
     [X2=1,W2=0,V1=0] 
* CE 140: start(V1,V,V2) = 0+ proper(W2,X2):2
     [X2=2,W2=1,V1=1] 
* CE 141: start(V1,V,V2) = 0+ proper(V1,W2):3
     [V1>=0,W2=0] 
* CE 142: start(V1,V,V2) = 0+ fun9(V1,W2):1
     [V1>=0,W2=0] 
* CE 143: start(V1,V,V2) = 0+ fun9(V1,W2):2
     [V1>=W2,W2>=1] 
* CE 144: start(V1,V,V2) = 0+ fun10(V1,V,W2):1
     [V>=0,V1>=0,W2=0] 
* CE 145: start(V1,V,V2) = 0+ fun10(V1,V,W2):2
     [V1>=W2,W2>=1,V>=0] 
* CE 146: start(V1,V,V2) = 0+ x(V1,V,W2):1
     [V>=0,V1>=0,W2=0] 
* CE 147: start(V1,V,V2) = 0+ x(V1,V,W2):2
     [V1+V>=W2,W2>=1,V>=0,V1>=0] 
* CE 148: start(V1,V,V2) = 0+ s(V1,W2):1
     [V1>=0,W2=0] 
* CE 149: start(V1,V,V2) = 0+ s(V1,W2):2
     [V1>=W2,W2>=1] 

### Cost equations --> "Loop" of start/3 
* CEs [140] --> Loop 96 
* CEs [115,116,117,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,141,142,143,144,145,146,147,148,149] --> Loop 97 
* CEs [118] --> Loop 98 

#### Loops of start/3 
* Loop 96: start(V1,V,V2) [V1=1] 
* Loop 97: start(V1,V,V2) [V1>=0] 
* Loop 98: start(V1,V,V2) [V1>=1] 

### Ranking functions of CR start(V1,V,V2) 

#### Partial ranking functions of CR start(V1,V,V2) 


### Resulting Chains:start(V1,V,V2) 
* [98]...
* [97]
* [96]


### Merging Chains  start/3 into  External patterns of execution 
* [[96],[97]] --> 1 
* [[98]] --> 2 


Computing Bounds
=====================================

#### Cost of loops [48,49] 

 * loop 48:fun(V1,V,Out) -> [fun(V1',V',Out')] 
1
 * loop 49:fun(V1,V,Out) -> [fun(V1',V',Out')] 
1
#### Cost of phase [48,49]:fun(V1,V,Out) -> [fun(V1',V',Out')] 
1*it(48)+1*it(49)+0
  Such that:it(49) =< V
it(49) =< V-V'
aux(1) =< V1
aux(2) =< V1-V1'
it(48) =< aux(1)
it(49) =< aux(1)
it(48) =< aux(2)
it(49) =< aux(2)

#### Cost of chains of fun(V1,V,Out):
* Chain [[48,49],50]: 1*it(48)+1*it(49)+0
  Such that:aux(1) =< V1
it(49) =< V
aux(2) =< Out
it(48) =< aux(1)
it(49) =< aux(1)
it(48) =< aux(2)
it(49) =< aux(2)

  with precondition: [V>=0,Out>=1,V1>=Out] 

* Chain [50]: 0
  with precondition: [Out=0,V1>=0,V>=0] 


#### Cost of loops [51] 

 * loop 51:fun1(V1,Out) -> [fun1(V1',Out')] 
1
#### Cost of phase [51]:fun1(V1,Out) -> [fun1(V1',Out')] 
1*it(51)+0
  Such that:it(51) =< V1
it(51) =< V1-V1'

#### Cost of chains of fun1(V1,Out):
* Chain [[51],52]: 1*it(51)+0
  Such that:it(51) =< Out

  with precondition: [Out>=1,V1>=Out] 

* Chain [52]: 0
  with precondition: [Out=0,V1>=0] 


#### Cost of loops [53,54] 

 * loop 53:fun10(V1,V,Out) -> [fun10(V1',V',Out')] 
1
 * loop 54:fun10(V1,V,Out) -> [fun10(V1',V',Out')] 
1
#### Cost of phase [53,54]:fun10(V1,V,Out) -> [fun10(V1',V',Out')] 
1*it(53)+1*it(54)+0
  Such that:it(54) =< V
it(54) =< V-V'
aux(3) =< V1
aux(4) =< V1-V1'
it(53) =< aux(3)
it(54) =< aux(3)
it(53) =< aux(4)
it(54) =< aux(4)

#### Cost of chains of fun10(V1,V,Out):
* Chain [[53,54],55]: 1*it(53)+1*it(54)+0
  Such that:aux(3) =< V1
it(54) =< V
aux(4) =< Out
it(53) =< aux(3)
it(54) =< aux(3)
it(53) =< aux(4)
it(54) =< aux(4)

  with precondition: [V>=0,Out>=1,V1>=Out] 

* Chain [55]: 0
  with precondition: [Out=0,V1>=0,V>=0] 


#### Cost of loops [56,57] 

 * loop 56:fun2(V1,V,V2,Out) -> [fun2(V1',V',V2',Out')] 
1
 * loop 57:fun2(V1,V,V2,Out) -> [fun2(V1',V',V2',Out')] 
1
#### Cost of phase [56,57]:fun2(V1,V,V2,Out) -> [fun2(V1',V',V2',Out')] 
1*it(56)+1*it(57)+0
  Such that:it(57) =< V
it(57) =< V-V'
it(57) =< V2
it(57) =< V2-V2'
aux(5) =< V1
aux(6) =< V1-V1'
it(56) =< aux(5)
it(57) =< aux(5)
it(56) =< aux(6)
it(57) =< aux(6)

#### Cost of chains of fun2(V1,V,V2,Out):
* Chain [[56,57],58]: 1*it(56)+1*it(57)+0
  Such that:aux(5) =< V1
it(57) =< V
aux(6) =< Out
it(56) =< aux(5)
it(57) =< aux(5)
it(56) =< aux(6)
it(57) =< aux(6)

  with precondition: [V>=0,V2>=0,Out>=1,V1>=Out] 

* Chain [58]: 0
  with precondition: [Out=0,V1>=0,V>=0,V2>=0] 


#### Cost of loops [59] 

 * loop 59:fun3(V1,Out) -> [fun3(V1',Out')] 
1
#### Cost of phase [59]:fun3(V1,Out) -> [fun3(V1',Out')] 
1*it(59)+0
  Such that:it(59) =< V1
it(59) =< V1-V1'

#### Cost of chains of fun3(V1,Out):
* Chain [[59],60]: 1*it(59)+0
  Such that:it(59) =< Out

  with precondition: [Out>=1,V1>=Out] 

* Chain [60]: 0
  with precondition: [Out=0,V1>=0] 


#### Cost of loops [61,62] 

 * loop 61:fun4(V1,V,V2,Out) -> [fun4(V1',V',V2',Out')] 
1
 * loop 62:fun4(V1,V,V2,Out) -> [fun4(V1',V',V2',Out')] 
1
#### Cost of phase [61,62]:fun4(V1,V,V2,Out) -> [fun4(V1',V',V2',Out')] 
1*it(61)+1*it(62)+0
  Such that:it(62) =< V
it(62) =< V-V'
it(62) =< V2
it(62) =< V2-V2'
aux(7) =< V1
aux(8) =< V1-V1'
it(61) =< aux(7)
it(62) =< aux(7)
it(61) =< aux(8)
it(62) =< aux(8)

#### Cost of chains of fun4(V1,V,V2,Out):
* Chain [[61,62],63]: 1*it(61)+1*it(62)+0
  Such that:aux(7) =< V1
it(62) =< V
aux(8) =< Out
it(61) =< aux(7)
it(62) =< aux(7)
it(61) =< aux(8)
it(62) =< aux(8)

  with precondition: [V>=0,V2>=0,Out>=1,V1>=Out] 

* Chain [63]: 0
  with precondition: [Out=0,V1>=0,V>=0,V2>=0] 


#### Cost of loops [64,65] 

 * loop 64:fun5(V1,V,V2,Out) -> [fun5(V1',V',V2',Out')] 
1
 * loop 65:fun5(V1,V,V2,Out) -> [fun5(V1',V',V2',Out')] 
1
#### Cost of phase [64,65]:fun5(V1,V,V2,Out) -> [fun5(V1',V',V2',Out')] 
1*it(64)+1*it(65)+0
  Such that:it(65) =< V
it(65) =< V-V'
it(65) =< V2
it(65) =< V2-V2'
aux(9) =< V1
aux(10) =< V1-V1'
it(64) =< aux(9)
it(65) =< aux(9)
it(64) =< aux(10)
it(65) =< aux(10)

#### Cost of chains of fun5(V1,V,V2,Out):
* Chain [[64,65],66]: 1*it(64)+1*it(65)+0
  Such that:aux(9) =< V1
it(65) =< V
aux(10) =< Out
it(64) =< aux(9)
it(65) =< aux(9)
it(64) =< aux(10)
it(65) =< aux(10)

  with precondition: [V>=0,V2>=0,Out>=1,V1>=Out] 

* Chain [66]: 0
  with precondition: [Out=0,V1>=0,V>=0,V2>=0] 


#### Cost of loops [67,68] 

 * loop 67:fun6(V1,V,V2,Out) -> [fun6(V1',V',V2',Out')] 
1
 * loop 68:fun6(V1,V,V2,Out) -> [fun6(V1',V',V2',Out')] 
1
#### Cost of phase [67,68]:fun6(V1,V,V2,Out) -> [fun6(V1',V',V2',Out')] 
1*it(67)+1*it(68)+0
  Such that:it(68) =< V
it(68) =< V-V'
it(68) =< V2
it(68) =< V2-V2'
aux(11) =< V1
aux(12) =< V1-V1'
it(67) =< aux(11)
it(68) =< aux(11)
it(67) =< aux(12)
it(68) =< aux(12)

#### Cost of chains of fun6(V1,V,V2,Out):
* Chain [[67,68],69]: 1*it(67)+1*it(68)+0
  Such that:aux(11) =< V1
it(68) =< V
aux(12) =< Out
it(67) =< aux(11)
it(68) =< aux(11)
it(67) =< aux(12)
it(68) =< aux(12)

  with precondition: [V>=0,V2>=0,Out>=1,V1>=Out] 

* Chain [69]: 0
  with precondition: [Out=0,V1>=0,V>=0,V2>=0] 


#### Cost of loops [70,71] 

 * loop 70:fun7(V1,V,Out) -> [fun7(V1',V',Out')] 
1
 * loop 71:fun7(V1,V,Out) -> [fun7(V1',V',Out')] 
1
#### Cost of phase [70,71]:fun7(V1,V,Out) -> [fun7(V1',V',Out')] 
1*it(70)+1*it(71)+0
  Such that:it(71) =< V
it(71) =< V-V'
aux(13) =< V1
aux(14) =< V1-V1'
it(70) =< aux(13)
it(71) =< aux(13)
it(70) =< aux(14)
it(71) =< aux(14)

#### Cost of chains of fun7(V1,V,Out):
* Chain [[70,71],72]: 1*it(70)+1*it(71)+0
  Such that:aux(13) =< V1
it(71) =< V
aux(14) =< Out
it(70) =< aux(13)
it(71) =< aux(13)
it(70) =< aux(14)
it(71) =< aux(14)

  with precondition: [V>=0,Out>=1,V1>=Out] 

* Chain [72]: 0
  with precondition: [Out=0,V1>=0,V>=0] 


#### Cost of loops [73] 

 * loop 73:fun8(V1,Out) -> [fun8(V1',Out')] 
1
#### Cost of phase [73]:fun8(V1,Out) -> [fun8(V1',Out')] 
1*it(73)+0
  Such that:it(73) =< V1
it(73) =< V1-V1'

#### Cost of chains of fun8(V1,Out):
* Chain [[73],74]: 1*it(73)+0
  Such that:it(73) =< Out

  with precondition: [Out>=1,V1>=Out] 

* Chain [74]: 0
  with precondition: [Out=0,V1>=0] 


#### Cost of loops [75] 

 * loop 75:fun9(V1,Out) -> [fun9(V1',Out')] 
1
#### Cost of phase [75]:fun9(V1,Out) -> [fun9(V1',Out')] 
1*it(75)+0
  Such that:it(75) =< V1
it(75) =< V1-V1'

#### Cost of chains of fun9(V1,Out):
* Chain [[75],76]: 1*it(75)+0
  Such that:it(75) =< Out

  with precondition: [Out>=1,V1>=Out] 

* Chain [76]: 0
  with precondition: [Out=0,V1>=0] 


#### Cost of loops [77] 

 * loop 77:isNat(V1,Out) -> [isNat(V1',Out')] 
1
#### Cost of phase [77]:isNat(V1,Out) -> [isNat(V1',Out')] 
1*it(77)+0
  Such that:it(77) =< V1
it(77) =< V1-V1'

#### Cost of chains of isNat(V1,Out):
* Chain [[77],78]: 1*it(77)+0
  Such that:it(77) =< Out

  with precondition: [Out>=1,V1>=Out] 

* Chain [78]: 0
  with precondition: [Out=0,V1>=0] 


#### Cost of loops [79,80,81] 

 * loop 79:plus(V1,V,Out) -> [plus(V1',V',Out')] 
1
 * loop 80:plus(V1,V,Out) -> [plus(V1',V',Out')] 
1
 * loop 81:plus(V1,V,Out) -> [plus(V1',V',Out')] 
1
#### Cost of phase [79,80,81]:plus(V1,V,Out) -> [plus(V1',V',Out')] 
1*it(79)+1*it(80)+1*it(81)+0
  Such that:aux(15) =< V1
aux(16) =< V1+V
aux(17) =< V1+V-V1'-V'
aux(18) =< V1-V1'
aux(19) =< V
aux(20) =< V-V'
it(80) =< aux(15)
it(81) =< aux(15)
it(79) =< aux(16)
it(80) =< aux(16)
it(81) =< aux(16)
it(79) =< aux(17)
it(80) =< aux(17)
it(81) =< aux(17)
it(80) =< aux(18)
it(81) =< aux(18)
it(79) =< aux(19)
it(81) =< aux(19)
it(79) =< aux(20)
it(81) =< aux(20)

#### Cost of chains of plus(V1,V,Out):
* Chain [[79,80,81],82]: 1*it(79)+1*it(80)+1*it(81)+0
  Such that:aux(21) =< V1
aux(22) =< V1+V
aux(23) =< V
it(80) =< aux(21)
it(81) =< aux(21)
it(79) =< aux(22)
it(80) =< aux(22)
it(81) =< aux(22)
it(79) =< aux(23)
it(81) =< aux(23)

  with precondition: [V1>=0,V>=0,Out>=1,V+V1>=Out] 

* Chain [82]: 0
  with precondition: [Out=0,V1>=0,V>=0] 


#### Cost of chains of proper(V1,Out):
* Chain [85]: 1
  with precondition: [V1=0,Out=1] 

* Chain [84]: 1
  with precondition: [V1=1,Out=2] 

* Chain [83]: 0
  with precondition: [Out=0,V1>=0] 


#### Cost of loops [86] 

 * loop 86:s(V1,Out) -> [s(V1',Out')] 
1
#### Cost of phase [86]:s(V1,Out) -> [s(V1',Out')] 
1*it(86)+0
  Such that:it(86) =< V1
it(86) =< V1-V1'

#### Cost of chains of s(V1,Out):
* Chain [[86],87]: 1*it(86)+0
  Such that:it(86) =< Out

  with precondition: [Out>=1,V1>=Out] 

* Chain [87]: 0
  with precondition: [Out=0,V1>=0] 


#### Cost of loops [89,90] 

 * loop 89:top(V1,Out) -> [top(V1',Out')] 
2
 * loop 90:top(V1,Out) -> [top(V1',Out')] 
2
#### Cost of phase [89,90]:top(V1,Out) -> [top(V1',Out')] 
4*it(89)+0
#### Cost of phase [89,90]:top(V1,Out) -> [top(V1',Out')] 
4*it(89)+0
#### Cost of phase [89,90]:top(V1,Out) -> [top(V1',Out')] 
4*it(89)+0
#### Cost of chains of top(V1,Out):
* Chain [[89,90]]...: 4*it(89)+0
  with precondition: [V1>=1] 

* Chain [[89,90],91]: 4*it(89)+0
  with precondition: [Out=0,V1>=1] 

* Chain [[89,90],88,91]: 4*it(89)+1
  with precondition: [Out=0,V1>=1] 

* Chain [91]: 0
  with precondition: [Out=0,V1>=0] 

* Chain [88,91]: 1
  with precondition: [Out=0,V1>=1] 


#### Cost of loops [92,93,94] 

 * loop 92:x(V1,V,Out) -> [x(V1',V',Out')] 
1
 * loop 93:x(V1,V,Out) -> [x(V1',V',Out')] 
1
 * loop 94:x(V1,V,Out) -> [x(V1',V',Out')] 
1
#### Cost of phase [92,93,94]:x(V1,V,Out) -> [x(V1',V',Out')] 
1*it(92)+1*it(93)+1*it(94)+0
  Such that:aux(25) =< V1
aux(26) =< V1+V
aux(27) =< V1+V-V1'-V'
aux(28) =< V1-V1'
aux(29) =< V
aux(30) =< V-V'
it(93) =< aux(25)
it(94) =< aux(25)
it(92) =< aux(26)
it(93) =< aux(26)
it(94) =< aux(26)
it(92) =< aux(27)
it(93) =< aux(27)
it(94) =< aux(27)
it(93) =< aux(28)
it(94) =< aux(28)
it(92) =< aux(29)
it(94) =< aux(29)
it(92) =< aux(30)
it(94) =< aux(30)

#### Cost of chains of x(V1,V,Out):
* Chain [[92,93,94],95]: 1*it(92)+1*it(93)+1*it(94)+0
  Such that:aux(31) =< V1
aux(32) =< V1+V
aux(33) =< V
it(93) =< aux(31)
it(94) =< aux(31)
it(92) =< aux(32)
it(93) =< aux(32)
it(94) =< aux(32)
it(92) =< aux(33)
it(94) =< aux(33)

  with precondition: [V1>=0,V>=0,Out>=1,V+V1>=Out] 

* Chain [95]: 0
  with precondition: [Out=0,V1>=0,V>=0] 


#### Cost of chains of start(V1,V,V2):
* Chain [98]...: 4*s(3)+0
  with precondition: [V1>=1] 

* Chain [97]: 7*s(5)+13*s(7)+1*s(8)+2*s(35)+2*s(36)+2*s(37)+1
  Such that:aux(41) =< V1
aux(42) =< V1+V
aux(43) =< V
s(7) =< aux(41)
s(5) =< aux(43)
s(35) =< aux(41)
s(36) =< aux(41)
s(37) =< aux(42)
s(35) =< aux(42)
s(36) =< aux(42)
s(37) =< aux(43)
s(36) =< aux(43)
s(5) =< aux(41)

  with precondition: [V1>=0] 

* Chain [96]: 1
  with precondition: [V1=1] 


Closed-form bounds of start(V1,V,V2): 
-------------------------------------
* Chain [98]... with precondition: [V1>=1] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [97] with precondition: [V1>=0] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [96] with precondition: [V1=1] 
    - Upper bound: 1 
    - Complexity: constant 

### Maximum cost of start(V1,V,V2): inf 
Asymptotic class: infinity 

Time statistics: 
-------------------------------------
* Partial evaluation computed in 130 ms.
* Invariants computed in 363 ms.
   - Backward Invariants 141 ms.
   - Transitive Invariants 105 ms.
* Refinement performed in 615 ms.
* Termination proved in 129 ms.
* Upper bounds computed in 607 ms.
   - Equation cost structures 197 ms.
   - Phase cost structures 246 ms.
   - Chain cost structures 210 ms.
   - Solving cost expressions 3 ms.
* Total analysis performed in 2064 ms.


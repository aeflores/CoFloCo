
Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. non_recursive  : [from/2]
1. non_recursive  : [activate/2]
2. recursive  : [fun/2]
3. non_recursive  : [start/1]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into from/2
1. SCC is partially evaluated into activate/2
2. SCC is partially evaluated into fun/2
3. SCC is partially evaluated into start/1

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations from/2 
* CE 8 is refined into CE [12] 
* CE 9 is refined into CE [13] 


#### Refined cost equations from/2 
* CE 12: from(V,Out) = 1
     [V>=0,2*V+3=Out] 
* CE 13: from(V,Out) = 1
     [V>=0,V+1=Out] 

### Cost equations --> "Loop" of from/2 
* CEs [12] --> Loop 9 
* CEs [13] --> Loop 10 

#### Loops of from/2 
* Loop 9: from(V,Out) [V>=0,2*V+3=Out] 
* Loop 10: from(V,Out) [V>=0,V+1=Out] 

### Ranking functions of CR from(V,Out) 

#### Partial ranking functions of CR from(V,Out) 


### Resulting Chains:from(V,Out) 
* [10]
* [9]


### Merging Chains  from/2 into  External patterns of execution 
* [[10]] --> 1 
* [[9]] --> 2 


### Specialization of cost equations activate/2 
* CE 10 is refined into CE [14,15] 
* CE 11 is refined into CE [16] 


#### Refined cost equations activate/2 
* CE 14: activate(A,A) = 1+ from(B,A):1
     [A>=1,A=B+1] 
* CE 15: activate(V,Out) = 1+ from(W,Out):2
     [Out>=3,Out=2*W+3,Out=2*V+1] 
* CE 16: activate(A,A) = 1
     [A>=0] 

### Cost equations --> "Loop" of activate/2 
* CEs [15] --> Loop 11 
* CEs [14,16] --> Loop 12 

#### Loops of activate/2 
* Loop 11: activate(V,Out) [V>=1,2*V+1=Out] 
* Loop 12: activate(A,A) [A>=0] 

### Ranking functions of CR activate(V,Out) 

#### Partial ranking functions of CR activate(V,Out) 


### Resulting Chains:activate(V,Out) 
* [12]
* [11]


### Merging Chains  activate/2 into  External patterns of execution 
* [[12]] --> 1 
* [[11]] --> 2 


### Specialization of cost equations fun/2 
* CE 5 is refined into CE [17] 
* CE 7 is refined into CE [18] 
* CE 6 is refined into CE [19,20] 


#### Refined cost equations fun/2 
* CE 17: fun(V,Out) = 1
     [V>=Out+2,Out>=0] 
* CE 18: fun(V,Out) = 0
     [V>=0,Out=0] 
* CE 19: fun(V,Out) = 1+ activate(W,W):1+ fun(V,Out)
     [V>=W+1,W>=0] 
* CE 20: fun(V,Out) = 1+ activate(W,X):2+ fun(Y,Out)
     [2*V>=X+1,X>=3,X+2*V+1=2*Y,X=2*W+1] 

### Cost equations --> "Loop" of fun/2 
* CEs [20] --> Loop 13 
* CEs [19] --> Loop 14 
* CEs [17] --> Loop 15 
* CEs [18] --> Loop 16 

#### Loops of fun/2 
* Loop 13: fun(V,Out)->  fun(V',Out)
                  [2*V>=V',V'>=V+2] 
* Loop 14: fun(V,Out)->  fun(V,Out)
                  [V>=1] 
* Loop 15: fun(V,Out) [V>=Out+2,Out>=0] 
* Loop 16: fun(V,Out) [V>=0,Out=0] 

### Ranking functions of CR fun(V,Out) 

#### Partial ranking functions of CR fun(V,Out) 


### Resulting Chains:fun(V,Out) 
* [[13,14]]...
* [[13,14],16]
* [[13,14],15]
* [16]
* [15]


### Merging Chains  fun/2 into  External patterns of execution 
* [[16],[16,[13,14]]] --> 1 
* [[15],[15,[13,14]]] --> 2 
* [[[13,14]]] --> 3 


### Specialization of cost equations start/1 
* CE 2 is refined into CE [21,22,23] 
* CE 3 is refined into CE [24,25] 
* CE 4 is refined into CE [26,27] 


#### Refined cost equations start/1 
* CE 21: start(V) = 0+ fun(V,W):1
     [V>=0,W=0] 
* CE 22: start(V) = 0+ fun(V,W):2
     [W>=0,V>=2] 
* CE 23: start(V) = 0+ fun(V,W):3
     [V>=1] 
* CE 24: start(V) = 0+ from(W,X):1
     [X>=1,X=W+1,X=V+1] 
* CE 25: start(V) = 0+ from(W,X):2
     [X>=3,X=2*W+3,X=2*V+3] 
* CE 26: start(V) = 0+ activate(V,V):1
     [V>=0] 
* CE 27: start(V) = 0+ activate(W,X):2
     [X>=3,X=2*W+1,X=2*V+1] 

### Cost equations --> "Loop" of start/1 
* CEs [21,22,24,25,26,27] --> Loop 17 
* CEs [23] --> Loop 18 

#### Loops of start/1 
* Loop 17: start(V) [V>=0] 
* Loop 18: start(V) [V>=1] 

### Ranking functions of CR start(V) 

#### Partial ranking functions of CR start(V) 


### Resulting Chains:start(V) 
* [18]...
* [17]


### Merging Chains  start/1 into  External patterns of execution 
* [[17]] --> 1 
* [[18]] --> 2 


Computing Bounds
=====================================

#### Cost of chains of from(V,Out):
* Chain [10]: 1
  with precondition: [V+1=Out,V>=0] 

* Chain [9]: 1
  with precondition: [2*V+3=Out,V>=0] 


#### Cost of chains of activate(V,Out):
* Chain [12]: 2
  with precondition: [V=Out,V>=0] 

* Chain [11]: 2
  with precondition: [2*V+1=Out,V>=1] 


#### Cost of loops [13,14] 

 * loop 13:fun(V,Out) -> [fun(V',Out')] 
3
 * loop 14:fun(V,Out) -> [fun(V',Out')] 
3
#### Cost of phase [13,14]:fun(V,Out) -> [fun(V',Out')] 
6*it(13)+0
#### Cost of phase [13,14]:fun(V,Out) -> [fun(V',Out')] 
6*it(13)+0
#### Cost of phase [13,14]:fun(V,Out) -> [fun(V',Out')] 
6*it(13)+0
#### Cost of chains of fun(V,Out):
* Chain [[13,14]]...: 6*it(13)+0
  with precondition: [V>=1] 

* Chain [[13,14],16]: 6*it(13)+0
  with precondition: [Out=0,V>=1] 

* Chain [[13,14],15]: 6*it(13)+1
  with precondition: [V>=2,Out>=0] 

* Chain [16]: 0
  with precondition: [Out=0,V>=0] 

* Chain [15]: 1
  with precondition: [Out>=0,V>=Out+2] 


#### Cost of chains of start(V):
* Chain [18]...: 6*s(3)+0
  with precondition: [V>=1] 

* Chain [17]: 1*aux(3)+0
  with precondition: [V>=0] 


Closed-form bounds of start(V): 
-------------------------------------
* Chain [18]... with precondition: [V>=1] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [17] with precondition: [V>=0] 
    - Upper bound: inf 
    - Complexity: infinity 

### Maximum cost of start(V): inf 
Asymptotic class: infinity 

Time statistics: 
-------------------------------------
* Partial evaluation computed in 4 ms.
* Invariants computed in 8 ms.
   - Backward Invariants 4 ms.
   - Transitive Invariants 2 ms.
* Refinement performed in 19 ms.
* Termination proved in 2 ms.
* Upper bounds computed in 13 ms.
   - Equation cost structures 7 ms.
   - Phase cost structures 2 ms.
   - Chain cost structures 3 ms.
   - Solving cost expressions 0 ms.
* Total analysis performed in 60 ms.


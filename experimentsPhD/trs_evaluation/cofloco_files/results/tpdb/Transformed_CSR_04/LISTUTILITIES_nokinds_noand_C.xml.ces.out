
Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. recursive  : [afterNth/3]
1. recursive  : [cons/3]
2. recursive  : [fst/2]
3. recursive  : [fun/5]
4. recursive  : [fun1/2]
5. recursive  : [fun10/5]
6. recursive  : [fun11/3]
7. recursive  : [fun12/4]
8. recursive  : [fun13/2]
9. recursive  : [fun14/3]
10. recursive  : [fun15/4]
11. recursive  : [fun16/3]
12. recursive  : [fun17/2]
13. recursive  : [fun18/2]
14. recursive  : [fun19/3]
15. recursive  : [fun2/2]
16. recursive  : [fun20/4]
17. recursive  : [fun21/3]
18. recursive  : [fun22/4]
19. recursive  : [fun23/4]
20. recursive  : [fun24/3]
21. recursive  : [fun25/3]
22. recursive  : [fun26/3]
23. recursive  : [fun27/4]
24. recursive  : [fun28/4]
25. recursive  : [fun29/2]
26. recursive  : [fun3/3]
27. recursive  : [fun30/3]
28. recursive  : [fun31/2]
29. recursive  : [fun32/3]
30. recursive  : [fun33/2]
31. recursive  : [fun34/2]
32. recursive  : [fun35/3]
33. recursive  : [fun36/3]
34. recursive  : [fun37/3]
35. recursive  : [fun4/2]
36. recursive  : [fun5/3]
37. recursive  : [fun6/2]
38. recursive  : [fun7/2]
39. recursive  : [fun8/4]
40. recursive  : [fun9/5]
41. recursive  : [head/2]
42. recursive  : [isLNat/2]
43. recursive  : [isNatural/2]
44. recursive  : [isPLNat/2]
45. recursive  : [natsFrom/2]
46. recursive  : [pair/3]
47. non_recursive  : [proper/2]
48. recursive  : [s/2]
49. recursive  : [sel/3]
50. recursive  : [snd/2]
51. recursive  : [splitAt/3]
52. recursive  : [tail/2]
53. recursive  : [take/3]
54. recursive  : [top/2]
55. non_recursive  : [start/4]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into afterNth/3
1. SCC is partially evaluated into cons/3
2. SCC is partially evaluated into fst/2
3. SCC is partially evaluated into fun/5
4. SCC is partially evaluated into fun1/2
5. SCC is partially evaluated into fun10/5
6. SCC is partially evaluated into fun11/3
7. SCC is partially evaluated into fun12/4
8. SCC is partially evaluated into fun13/2
9. SCC is partially evaluated into fun14/3
10. SCC is partially evaluated into fun15/4
11. SCC is partially evaluated into fun16/3
12. SCC is partially evaluated into fun17/2
13. SCC is partially evaluated into fun18/2
14. SCC is partially evaluated into fun19/3
15. SCC is partially evaluated into fun2/2
16. SCC is partially evaluated into fun20/4
17. SCC is partially evaluated into fun21/3
18. SCC is partially evaluated into fun22/4
19. SCC is partially evaluated into fun23/4
20. SCC is partially evaluated into fun24/3
21. SCC is partially evaluated into fun25/3
22. SCC is partially evaluated into fun26/3
23. SCC is partially evaluated into fun27/4
24. SCC is partially evaluated into fun28/4
25. SCC is partially evaluated into fun29/2
26. SCC is partially evaluated into fun3/3
27. SCC is partially evaluated into fun30/3
28. SCC is partially evaluated into fun31/2
29. SCC is partially evaluated into fun32/3
30. SCC is partially evaluated into fun33/2
31. SCC is partially evaluated into fun34/2
32. SCC is partially evaluated into fun35/3
33. SCC is partially evaluated into fun36/3
34. SCC is partially evaluated into fun37/3
35. SCC is partially evaluated into fun4/2
36. SCC is partially evaluated into fun5/3
37. SCC is partially evaluated into fun6/2
38. SCC is partially evaluated into fun7/2
39. SCC is partially evaluated into fun8/4
40. SCC is partially evaluated into fun9/5
41. SCC is partially evaluated into head/2
42. SCC is partially evaluated into isLNat/2
43. SCC is partially evaluated into isNatural/2
44. SCC is partially evaluated into isPLNat/2
45. SCC is partially evaluated into natsFrom/2
46. SCC is partially evaluated into pair/3
47. SCC is partially evaluated into proper/2
48. SCC is partially evaluated into s/2
49. SCC is partially evaluated into sel/3
50. SCC is partially evaluated into snd/2
51. SCC is partially evaluated into splitAt/3
52. SCC is partially evaluated into tail/2
53. SCC is partially evaluated into take/3
54. SCC is partially evaluated into top/2
55. SCC is partially evaluated into start/4

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations afterNth/3 
* CE 114 is refined into CE [207] 
* CE 112 is refined into CE [208] 
* CE 113 is refined into CE [209] 
* CE 111 is refined into CE [210] 


#### Refined cost equations afterNth/3 
* CE 207: afterNth(V1,V,Out) = 0
     [V>=0,V1>=0,Out=0] 
* CE 208: afterNth(V1,V,Out) = 1+ afterNth(V1,W1,X1)
     [W1>=0,V1>=0,X1+1=Out,W1+1=V] 
* CE 209: afterNth(V1,V,Out) = 1+ afterNth(W1,V,X1)
     [W1>=0,V>=0,X1+1=Out,W1+1=V1] 
* CE 210: afterNth(V1,V,Out) = 1+ afterNth(W1,X1,Y1)
     [X1>=0,W1>=0,Y1+1=Out,X1+1=V,W1+1=V1] 

### Cost equations --> "Loop" of afterNth/3 
* CEs [208] --> Loop 151 
* CEs [209] --> Loop 152 
* CEs [210] --> Loop 153 
* CEs [207] --> Loop 154 

#### Loops of afterNth/3 
* Loop 151: afterNth(V1,V,Out)->  afterNth(V1,V',Out')
                  [V>=1,V1>=0,Out=Out'+1,V=V'+1] 
* Loop 152: afterNth(V1,V,Out)->  afterNth(V1',V,Out')
                  [V>=0,V1>=1,Out=Out'+1,V1=V1'+1] 
* Loop 153: afterNth(V1,V,Out)->  afterNth(V1',V',Out')
                  [V>=1,V1>=1,Out=Out'+1,V=V'+1,V1=V1'+1] 
* Loop 154: afterNth(V1,V,Out) [V>=0,V1>=0,Out=0] 

### Ranking functions of CR afterNth(V1,V,Out) 
* RF of phase [151,152,153]: [V1+V]

#### Partial ranking functions of CR afterNth(V1,V,Out) 
* Partial RF of phase [151,152,153]:
  - RF of loop [151:1,153:1]:
    V
  - RF of loop [152:1,153:1]:
    V1


### Resulting Chains:afterNth(V1,V,Out) 
* [[151,152,153],154]
* [154]


### Merging Chains  afterNth/3 into  External patterns of execution 
* [[154]] --> 1 
* [[154,[151,152,153]]] --> 2 


### Specialization of cost equations cons/3 
* CE 154 is refined into CE [211] 
* CE 152 is refined into CE [212] 
* CE 153 is refined into CE [213] 


#### Refined cost equations cons/3 
* CE 211: cons(V1,V,Out) = 0
     [V>=0,V1>=0,Out=0] 
* CE 212: cons(V1,V,Out) = 1+ cons(W1,V,X1)
     [W1>=0,V>=0,X1+1=Out,W1+1=V1] 
* CE 213: cons(V1,V,Out) = 1+ cons(W1,X1,Y1)
     [X1>=0,W1>=0,Y1+1=Out,X1+1=V,W1+1=V1] 

### Cost equations --> "Loop" of cons/3 
* CEs [212] --> Loop 155 
* CEs [213] --> Loop 156 
* CEs [211] --> Loop 157 

#### Loops of cons/3 
* Loop 155: cons(V1,V,Out)->  cons(V1',V,Out')
                  [V>=0,V1>=1,Out=Out'+1,V1=V1'+1] 
* Loop 156: cons(V1,V,Out)->  cons(V1',V',Out')
                  [V>=1,V1>=1,Out=Out'+1,V=V'+1,V1=V1'+1] 
* Loop 157: cons(V1,V,Out) [V>=0,V1>=0,Out=0] 

### Ranking functions of CR cons(V1,V,Out) 
* RF of phase [155,156]: [V1]

#### Partial ranking functions of CR cons(V1,V,Out) 
* Partial RF of phase [155,156]:
  - RF of loop [155:1,156:1]:
    V1
  - RF of loop [156:1]:
    V


### Resulting Chains:cons(V1,V,Out) 
* [[155,156],157]
* [157]


### Merging Chains  cons/3 into  External patterns of execution 
* [[157]] --> 1 
* [[157,[155,156]]] --> 2 


### Specialization of cost equations fst/2 
* CE 110 is refined into CE [214] 
* CE 109 is refined into CE [215] 


#### Refined cost equations fst/2 
* CE 214: fst(V1,Out) = 0
     [V1>=0,Out=0] 
* CE 215: fst(V1,Out) = 1+ fst(W1,X1)
     [W1>=0,X1+1=Out,W1+1=V1] 

### Cost equations --> "Loop" of fst/2 
* CEs [215] --> Loop 158 
* CEs [214] --> Loop 159 

#### Loops of fst/2 
* Loop 158: fst(V1,Out)->  fst(V1',Out')
                  [V1'>=0,Out=Out'+1,V1'+1=V1] 
* Loop 159: fst(V1,Out) [V1>=0,Out=0] 

### Ranking functions of CR fst(V1,Out) 
* RF of phase [158]: [V1]

#### Partial ranking functions of CR fst(V1,Out) 
* Partial RF of phase [158]:
  - RF of loop [158:1]:
    V1


### Resulting Chains:fst(V1,Out) 
* [[158],159]
* [159]


### Merging Chains  fst/2 into  External patterns of execution 
* [[159]] --> 1 
* [[159,[158]]] --> 2 


### Specialization of cost equations fun/5 
* CE 59 is refined into CE [216] 
* CE 58 is refined into CE [217] 
* CE 57 is refined into CE [218] 


#### Refined cost equations fun/5 
* CE 216: fun(V1,V,V2,V3,Out) = 0
     [V3>=0,V2>=0,V>=0,V1>=0,Out=0] 
* CE 217: fun(V1,V,V2,V3,Out) = 1+ fun(W3,V,V2,V3,X3)
     [W3>=0,V3>=0,V2>=0,V>=0,X3+1=Out,W3+1=V1] 
* CE 218: fun(V1,V,V2,V3,Out) = 1+ fun(W3,X3,Y3,Z3,A4)
     [Z3>=0,Y3>=0,X3>=0,W3>=0,A4+1=Out,Z3+1=V3,Y3+1=V2,X3+1=V,W3+1=V1] 

### Cost equations --> "Loop" of fun/5 
* CEs [217] --> Loop 160 
* CEs [218] --> Loop 161 
* CEs [216] --> Loop 162 

#### Loops of fun/5 
* Loop 160: fun(V1,V,V2,V3,Out)->  fun(V1',V,V2,V3,Out')
                  [V3>=0,V2>=0,V>=0,V1>=1,Out=Out'+1,V1=V1'+1] 
* Loop 161: fun(V1,V,V2,V3,Out)->  fun(V1',V',V2',V3',Out')
                  [V3>=1,V2>=1,V>=1,V1>=1,Out=Out'+1,V3=V3'+1,V2=V2'+1,V=V'+1,V1=V1'+1] 
* Loop 162: fun(V1,V,V2,V3,Out) [V3>=0,V2>=0,V>=0,V1>=0,Out=0] 

### Ranking functions of CR fun(V1,V,V2,V3,Out) 
* RF of phase [160,161]: [V1]

#### Partial ranking functions of CR fun(V1,V,V2,V3,Out) 
* Partial RF of phase [160,161]:
  - RF of loop [160:1,161:1]:
    V1
  - RF of loop [161:1]:
    V
    V2
    V3


### Resulting Chains:fun(V1,V,V2,V3,Out) 
* [[160,161],162]
* [162]


### Merging Chains  fun/5 into  External patterns of execution 
* [[162]] --> 1 
* [[162,[160,161]]] --> 2 


### Specialization of cost equations fun1/2 
* CE 64 is refined into CE [219] 
* CE 63 is refined into CE [220] 


#### Refined cost equations fun1/2 
* CE 219: fun1(V1,Out) = 0
     [V1>=0,Out=0] 
* CE 220: fun1(V1,Out) = 1+ fun1(W1,X1)
     [W1>=0,X1+1=Out,W1+1=V1] 

### Cost equations --> "Loop" of fun1/2 
* CEs [220] --> Loop 163 
* CEs [219] --> Loop 164 

#### Loops of fun1/2 
* Loop 163: fun1(V1,Out)->  fun1(V1',Out')
                  [V1'>=0,Out=Out'+1,V1'+1=V1] 
* Loop 164: fun1(V1,Out) [V1>=0,Out=0] 

### Ranking functions of CR fun1(V1,Out) 
* RF of phase [163]: [V1]

#### Partial ranking functions of CR fun1(V1,Out) 
* Partial RF of phase [163]:
  - RF of loop [163:1]:
    V1


### Resulting Chains:fun1(V1,Out) 
* [[163],164]
* [164]


### Merging Chains  fun1/2 into  External patterns of execution 
* [[164]] --> 1 
* [[164,[163]]] --> 2 


### Specialization of cost equations fun10/5 
* CE 99 is refined into CE [221] 
* CE 98 is refined into CE [222] 
* CE 97 is refined into CE [223] 


#### Refined cost equations fun10/5 
* CE 221: fun10(V1,V,V2,V3,Out) = 0
     [V3>=0,V2>=0,V>=0,V1>=0,Out=0] 
* CE 222: fun10(V1,V,V2,V3,Out) = 1+ fun10(W3,V,V2,V3,X3)
     [W3>=0,V3>=0,V2>=0,V>=0,X3+1=Out,W3+1=V1] 
* CE 223: fun10(V1,V,V2,V3,Out) = 1+ fun10(W3,X3,Y3,Z3,A4)
     [Z3>=0,Y3>=0,X3>=0,W3>=0,A4+1=Out,Z3+1=V3,Y3+1=V2,X3+1=V,W3+1=V1] 

### Cost equations --> "Loop" of fun10/5 
* CEs [222] --> Loop 165 
* CEs [223] --> Loop 166 
* CEs [221] --> Loop 167 

#### Loops of fun10/5 
* Loop 165: fun10(V1,V,V2,V3,Out)->  fun10(V1',V,V2,V3,Out')
                  [V3>=0,V2>=0,V>=0,V1>=1,Out=Out'+1,V1=V1'+1] 
* Loop 166: fun10(V1,V,V2,V3,Out)->  fun10(V1',V',V2',V3',Out')
                  [V3>=1,V2>=1,V>=1,V1>=1,Out=Out'+1,V3=V3'+1,V2=V2'+1,V=V'+1,V1=V1'+1] 
* Loop 167: fun10(V1,V,V2,V3,Out) [V3>=0,V2>=0,V>=0,V1>=0,Out=0] 

### Ranking functions of CR fun10(V1,V,V2,V3,Out) 
* RF of phase [165,166]: [V1]

#### Partial ranking functions of CR fun10(V1,V,V2,V3,Out) 
* Partial RF of phase [165,166]:
  - RF of loop [165:1,166:1]:
    V1
  - RF of loop [166:1]:
    V
    V2
    V3


### Resulting Chains:fun10(V1,V,V2,V3,Out) 
* [[165,166],167]
* [167]


### Merging Chains  fun10/5 into  External patterns of execution 
* [[167]] --> 1 
* [[167,[165,166]]] --> 2 


### Specialization of cost equations fun11/3 
* CE 108 is refined into CE [224] 
* CE 107 is refined into CE [225] 
* CE 106 is refined into CE [226] 


#### Refined cost equations fun11/3 
* CE 224: fun11(V1,V,Out) = 0
     [V>=0,V1>=0,Out=0] 
* CE 225: fun11(V1,V,Out) = 1+ fun11(W1,V,X1)
     [W1>=0,V>=0,X1+1=Out,W1+1=V1] 
* CE 226: fun11(V1,V,Out) = 1+ fun11(W1,X1,Y1)
     [X1>=0,W1>=0,Y1+1=Out,X1+1=V,W1+1=V1] 

### Cost equations --> "Loop" of fun11/3 
* CEs [225] --> Loop 168 
* CEs [226] --> Loop 169 
* CEs [224] --> Loop 170 

#### Loops of fun11/3 
* Loop 168: fun11(V1,V,Out)->  fun11(V1',V,Out')
                  [V>=0,V1>=1,Out=Out'+1,V1=V1'+1] 
* Loop 169: fun11(V1,V,Out)->  fun11(V1',V',Out')
                  [V>=1,V1>=1,Out=Out'+1,V=V'+1,V1=V1'+1] 
* Loop 170: fun11(V1,V,Out) [V>=0,V1>=0,Out=0] 

### Ranking functions of CR fun11(V1,V,Out) 
* RF of phase [168,169]: [V1]

#### Partial ranking functions of CR fun11(V1,V,Out) 
* Partial RF of phase [168,169]:
  - RF of loop [168:1,169:1]:
    V1
  - RF of loop [169:1]:
    V


### Resulting Chains:fun11(V1,V,Out) 
* [[168,169],170]
* [170]


### Merging Chains  fun11/3 into  External patterns of execution 
* [[170]] --> 1 
* [[170,[168,169]]] --> 2 


### Specialization of cost equations fun12/4 
* CE 119 is refined into CE [227] 
* CE 118 is refined into CE [228] 
* CE 117 is refined into CE [229] 


#### Refined cost equations fun12/4 
* CE 227: fun12(V1,V,V2,Out) = 0
     [V2>=0,V>=0,V1>=0,Out=0] 
* CE 228: fun12(V1,V,V2,Out) = 1+ fun12(W2,V,V2,X2)
     [W2>=0,V2>=0,V>=0,X2+1=Out,W2+1=V1] 
* CE 229: fun12(V1,V,V2,Out) = 1+ fun12(W2,X2,Y2,Z2)
     [Y2>=0,X2>=0,W2>=0,Z2+1=Out,Y2+1=V2,X2+1=V,W2+1=V1] 

### Cost equations --> "Loop" of fun12/4 
* CEs [228] --> Loop 171 
* CEs [229] --> Loop 172 
* CEs [227] --> Loop 173 

#### Loops of fun12/4 
* Loop 171: fun12(V1,V,V2,Out)->  fun12(V1',V,V2,Out')
                  [V2>=0,V>=0,V1>=1,Out=Out'+1,V1=V1'+1] 
* Loop 172: fun12(V1,V,V2,Out)->  fun12(V1',V',V2',Out')
                  [V2>=1,V>=1,V1>=1,Out=Out'+1,V2=V2'+1,V=V'+1,V1=V1'+1] 
* Loop 173: fun12(V1,V,V2,Out) [V2>=0,V>=0,V1>=0,Out=0] 

### Ranking functions of CR fun12(V1,V,V2,Out) 
* RF of phase [171,172]: [V1]

#### Partial ranking functions of CR fun12(V1,V,V2,Out) 
* Partial RF of phase [171,172]:
  - RF of loop [171:1,172:1]:
    V1
  - RF of loop [172:1]:
    V
    V2


### Resulting Chains:fun12(V1,V,V2,Out) 
* [[171,172],173]
* [173]


### Merging Chains  fun12/4 into  External patterns of execution 
* [[173]] --> 1 
* [[173,[171,172]]] --> 2 


### Specialization of cost equations fun13/2 
* CE 121 is refined into CE [230] 
* CE 120 is refined into CE [231] 


#### Refined cost equations fun13/2 
* CE 230: fun13(V1,Out) = 0
     [V1>=0,Out=0] 
* CE 231: fun13(V1,Out) = 1+ fun13(W1,X1)
     [W1>=0,X1+1=Out,W1+1=V1] 

### Cost equations --> "Loop" of fun13/2 
* CEs [231] --> Loop 174 
* CEs [230] --> Loop 175 

#### Loops of fun13/2 
* Loop 174: fun13(V1,Out)->  fun13(V1',Out')
                  [V1'>=0,Out=Out'+1,V1'+1=V1] 
* Loop 175: fun13(V1,Out) [V1>=0,Out=0] 

### Ranking functions of CR fun13(V1,Out) 
* RF of phase [174]: [V1]

#### Partial ranking functions of CR fun13(V1,Out) 
* Partial RF of phase [174]:
  - RF of loop [174:1]:
    V1


### Resulting Chains:fun13(V1,Out) 
* [[174],175]
* [175]


### Merging Chains  fun13/2 into  External patterns of execution 
* [[175]] --> 1 
* [[175,[174]]] --> 2 


### Specialization of cost equations fun14/3 
* CE 124 is refined into CE [232] 
* CE 122 is refined into CE [233] 
* CE 123 is refined into CE [234] 


#### Refined cost equations fun14/3 
* CE 232: fun14(V1,V,Out) = 0
     [V>=0,V1>=0,Out=0] 
* CE 233: fun14(V1,V,Out) = 1+ fun14(W1,V,X1)
     [W1>=0,V>=0,X1+1=Out,W1+1=V1] 
* CE 234: fun14(V1,V,Out) = 1+ fun14(W1,X1,Y1)
     [X1>=0,W1>=0,Y1+1=Out,X1+1=V,W1+1=V1] 

### Cost equations --> "Loop" of fun14/3 
* CEs [233] --> Loop 176 
* CEs [234] --> Loop 177 
* CEs [232] --> Loop 178 

#### Loops of fun14/3 
* Loop 176: fun14(V1,V,Out)->  fun14(V1',V,Out')
                  [V>=0,V1>=1,Out=Out'+1,V1=V1'+1] 
* Loop 177: fun14(V1,V,Out)->  fun14(V1',V',Out')
                  [V>=1,V1>=1,Out=Out'+1,V=V'+1,V1=V1'+1] 
* Loop 178: fun14(V1,V,Out) [V>=0,V1>=0,Out=0] 

### Ranking functions of CR fun14(V1,V,Out) 
* RF of phase [176,177]: [V1]

#### Partial ranking functions of CR fun14(V1,V,Out) 
* Partial RF of phase [176,177]:
  - RF of loop [176:1,177:1]:
    V1
  - RF of loop [177:1]:
    V


### Resulting Chains:fun14(V1,V,Out) 
* [[176,177],178]
* [178]


### Merging Chains  fun14/3 into  External patterns of execution 
* [[178]] --> 1 
* [[178,[176,177]]] --> 2 


### Specialization of cost equations fun15/4 
* CE 127 is refined into CE [235] 
* CE 125 is refined into CE [236] 
* CE 126 is refined into CE [237] 


#### Refined cost equations fun15/4 
* CE 235: fun15(V1,V,V2,Out) = 0
     [V2>=0,V>=0,V1>=0,Out=0] 
* CE 236: fun15(V1,V,V2,Out) = 1+ fun15(W2,V,V2,X2)
     [W2>=0,V2>=0,V>=0,X2+1=Out,W2+1=V1] 
* CE 237: fun15(V1,V,V2,Out) = 1+ fun15(W2,X2,Y2,Z2)
     [Y2>=0,X2>=0,W2>=0,Z2+1=Out,Y2+1=V2,X2+1=V,W2+1=V1] 

### Cost equations --> "Loop" of fun15/4 
* CEs [236] --> Loop 179 
* CEs [237] --> Loop 180 
* CEs [235] --> Loop 181 

#### Loops of fun15/4 
* Loop 179: fun15(V1,V,V2,Out)->  fun15(V1',V,V2,Out')
                  [V2>=0,V>=0,V1>=1,Out=Out'+1,V1=V1'+1] 
* Loop 180: fun15(V1,V,V2,Out)->  fun15(V1',V',V2',Out')
                  [V2>=1,V>=1,V1>=1,Out=Out'+1,V2=V2'+1,V=V'+1,V1=V1'+1] 
* Loop 181: fun15(V1,V,V2,Out) [V2>=0,V>=0,V1>=0,Out=0] 

### Ranking functions of CR fun15(V1,V,V2,Out) 
* RF of phase [179,180]: [V1]

#### Partial ranking functions of CR fun15(V1,V,V2,Out) 
* Partial RF of phase [179,180]:
  - RF of loop [179:1,180:1]:
    V1
  - RF of loop [180:1]:
    V
    V2


### Resulting Chains:fun15(V1,V,V2,Out) 
* [[179,180],181]
* [181]


### Merging Chains  fun15/4 into  External patterns of execution 
* [[181]] --> 1 
* [[181,[179,180]]] --> 2 


### Specialization of cost equations fun16/3 
* CE 130 is refined into CE [238] 
* CE 129 is refined into CE [239] 
* CE 128 is refined into CE [240] 


#### Refined cost equations fun16/3 
* CE 238: fun16(V1,V,Out) = 0
     [V>=0,V1>=0,Out=0] 
* CE 239: fun16(V1,V,Out) = 1+ fun16(W1,V,X1)
     [W1>=0,V>=0,X1+1=Out,W1+1=V1] 
* CE 240: fun16(V1,V,Out) = 1+ fun16(W1,X1,Y1)
     [X1>=0,W1>=0,Y1+1=Out,X1+1=V,W1+1=V1] 

### Cost equations --> "Loop" of fun16/3 
* CEs [239] --> Loop 182 
* CEs [240] --> Loop 183 
* CEs [238] --> Loop 184 

#### Loops of fun16/3 
* Loop 182: fun16(V1,V,Out)->  fun16(V1',V,Out')
                  [V>=0,V1>=1,Out=Out'+1,V1=V1'+1] 
* Loop 183: fun16(V1,V,Out)->  fun16(V1',V',Out')
                  [V>=1,V1>=1,Out=Out'+1,V=V'+1,V1=V1'+1] 
* Loop 184: fun16(V1,V,Out) [V>=0,V1>=0,Out=0] 

### Ranking functions of CR fun16(V1,V,Out) 
* RF of phase [182,183]: [V1]

#### Partial ranking functions of CR fun16(V1,V,Out) 
* Partial RF of phase [182,183]:
  - RF of loop [182:1,183:1]:
    V1
  - RF of loop [183:1]:
    V


### Resulting Chains:fun16(V1,V,Out) 
* [[182,183],184]
* [184]


### Merging Chains  fun16/3 into  External patterns of execution 
* [[184]] --> 1 
* [[184,[182,183]]] --> 2 


### Specialization of cost equations fun17/2 
* CE 136 is refined into CE [241] 
* CE 135 is refined into CE [242] 


#### Refined cost equations fun17/2 
* CE 241: fun17(V1,Out) = 0
     [V1>=0,Out=0] 
* CE 242: fun17(V1,Out) = 1+ fun17(W1,X1)
     [W1>=0,X1+1=Out,W1+1=V1] 

### Cost equations --> "Loop" of fun17/2 
* CEs [242] --> Loop 185 
* CEs [241] --> Loop 186 

#### Loops of fun17/2 
* Loop 185: fun17(V1,Out)->  fun17(V1',Out')
                  [V1'>=0,Out=Out'+1,V1'+1=V1] 
* Loop 186: fun17(V1,Out) [V1>=0,Out=0] 

### Ranking functions of CR fun17(V1,Out) 
* RF of phase [185]: [V1]

#### Partial ranking functions of CR fun17(V1,Out) 
* Partial RF of phase [185]:
  - RF of loop [185:1]:
    V1


### Resulting Chains:fun17(V1,Out) 
* [[185],186]
* [186]


### Merging Chains  fun17/2 into  External patterns of execution 
* [[186]] --> 1 
* [[186,[185]]] --> 2 


### Specialization of cost equations fun18/2 
* CE 138 is refined into CE [243] 
* CE 137 is refined into CE [244] 


#### Refined cost equations fun18/2 
* CE 243: fun18(V1,Out) = 0
     [V1>=0,Out=0] 
* CE 244: fun18(V1,Out) = 1+ fun18(W1,X1)
     [W1>=0,X1+1=Out,W1+1=V1] 

### Cost equations --> "Loop" of fun18/2 
* CEs [244] --> Loop 187 
* CEs [243] --> Loop 188 

#### Loops of fun18/2 
* Loop 187: fun18(V1,Out)->  fun18(V1',Out')
                  [V1'>=0,Out=Out'+1,V1'+1=V1] 
* Loop 188: fun18(V1,Out) [V1>=0,Out=0] 

### Ranking functions of CR fun18(V1,Out) 
* RF of phase [187]: [V1]

#### Partial ranking functions of CR fun18(V1,Out) 
* Partial RF of phase [187]:
  - RF of loop [187:1]:
    V1


### Resulting Chains:fun18(V1,Out) 
* [[187],188]
* [188]


### Merging Chains  fun18/2 into  External patterns of execution 
* [[188]] --> 1 
* [[188,[187]]] --> 2 


### Specialization of cost equations fun19/3 
* CE 141 is refined into CE [245] 
* CE 139 is refined into CE [246] 
* CE 140 is refined into CE [247] 


#### Refined cost equations fun19/3 
* CE 245: fun19(V1,V,Out) = 0
     [V>=0,V1>=0,Out=0] 
* CE 246: fun19(V1,V,Out) = 1+ fun19(W1,V,X1)
     [W1>=0,V>=0,X1+1=Out,W1+1=V1] 
* CE 247: fun19(V1,V,Out) = 1+ fun19(W1,X1,Y1)
     [X1>=0,W1>=0,Y1+1=Out,X1+1=V,W1+1=V1] 

### Cost equations --> "Loop" of fun19/3 
* CEs [246] --> Loop 189 
* CEs [247] --> Loop 190 
* CEs [245] --> Loop 191 

#### Loops of fun19/3 
* Loop 189: fun19(V1,V,Out)->  fun19(V1',V,Out')
                  [V>=0,V1>=1,Out=Out'+1,V1=V1'+1] 
* Loop 190: fun19(V1,V,Out)->  fun19(V1',V',Out')
                  [V>=1,V1>=1,Out=Out'+1,V=V'+1,V1=V1'+1] 
* Loop 191: fun19(V1,V,Out) [V>=0,V1>=0,Out=0] 

### Ranking functions of CR fun19(V1,V,Out) 
* RF of phase [189,190]: [V1]

#### Partial ranking functions of CR fun19(V1,V,Out) 
* Partial RF of phase [189,190]:
  - RF of loop [189:1,190:1]:
    V1
  - RF of loop [190:1]:
    V


### Resulting Chains:fun19(V1,V,Out) 
* [[189,190],191]
* [191]


### Merging Chains  fun19/3 into  External patterns of execution 
* [[191]] --> 1 
* [[191,[189,190]]] --> 2 


### Specialization of cost equations fun2/2 
* CE 66 is refined into CE [248] 
* CE 65 is refined into CE [249] 


#### Refined cost equations fun2/2 
* CE 248: fun2(V1,Out) = 0
     [V1>=0,Out=0] 
* CE 249: fun2(V1,Out) = 1+ fun2(W1,X1)
     [W1>=0,X1+1=Out,W1+1=V1] 

### Cost equations --> "Loop" of fun2/2 
* CEs [249] --> Loop 192 
* CEs [248] --> Loop 193 

#### Loops of fun2/2 
* Loop 192: fun2(V1,Out)->  fun2(V1',Out')
                  [V1'>=0,Out=Out'+1,V1'+1=V1] 
* Loop 193: fun2(V1,Out) [V1>=0,Out=0] 

### Ranking functions of CR fun2(V1,Out) 
* RF of phase [192]: [V1]

#### Partial ranking functions of CR fun2(V1,Out) 
* Partial RF of phase [192]:
  - RF of loop [192:1]:
    V1


### Resulting Chains:fun2(V1,Out) 
* [[192],193]
* [193]


### Merging Chains  fun2/2 into  External patterns of execution 
* [[193]] --> 1 
* [[193,[192]]] --> 2 


### Specialization of cost equations fun20/4 
* CE 146 is refined into CE [250] 
* CE 144 is refined into CE [251] 
* CE 145 is refined into CE [252] 


#### Refined cost equations fun20/4 
* CE 250: fun20(V1,V,V2,Out) = 0
     [V2>=0,V>=0,V1>=0,Out=0] 
* CE 251: fun20(V1,V,V2,Out) = 1+ fun20(W2,V,V2,X2)
     [W2>=0,V2>=0,V>=0,X2+1=Out,W2+1=V1] 
* CE 252: fun20(V1,V,V2,Out) = 1+ fun20(W2,X2,Y2,Z2)
     [Y2>=0,X2>=0,W2>=0,Z2+1=Out,Y2+1=V2,X2+1=V,W2+1=V1] 

### Cost equations --> "Loop" of fun20/4 
* CEs [251] --> Loop 194 
* CEs [252] --> Loop 195 
* CEs [250] --> Loop 196 

#### Loops of fun20/4 
* Loop 194: fun20(V1,V,V2,Out)->  fun20(V1',V,V2,Out')
                  [V2>=0,V>=0,V1>=1,Out=Out'+1,V1=V1'+1] 
* Loop 195: fun20(V1,V,V2,Out)->  fun20(V1',V',V2',Out')
                  [V2>=1,V>=1,V1>=1,Out=Out'+1,V2=V2'+1,V=V'+1,V1=V1'+1] 
* Loop 196: fun20(V1,V,V2,Out) [V2>=0,V>=0,V1>=0,Out=0] 

### Ranking functions of CR fun20(V1,V,V2,Out) 
* RF of phase [194,195]: [V1]

#### Partial ranking functions of CR fun20(V1,V,V2,Out) 
* Partial RF of phase [194,195]:
  - RF of loop [194:1,195:1]:
    V1
  - RF of loop [195:1]:
    V
    V2


### Resulting Chains:fun20(V1,V,V2,Out) 
* [[194,195],196]
* [196]


### Merging Chains  fun20/4 into  External patterns of execution 
* [[196]] --> 1 
* [[196,[194,195]]] --> 2 


### Specialization of cost equations fun21/3 
* CE 149 is refined into CE [253] 
* CE 148 is refined into CE [254] 
* CE 147 is refined into CE [255] 


#### Refined cost equations fun21/3 
* CE 253: fun21(V1,V,Out) = 0
     [V>=0,V1>=0,Out=0] 
* CE 254: fun21(V1,V,Out) = 1+ fun21(W1,V,X1)
     [W1>=0,V>=0,X1+1=Out,W1+1=V1] 
* CE 255: fun21(V1,V,Out) = 1+ fun21(W1,X1,Y1)
     [X1>=0,W1>=0,Y1+1=Out,X1+1=V,W1+1=V1] 

### Cost equations --> "Loop" of fun21/3 
* CEs [254] --> Loop 197 
* CEs [255] --> Loop 198 
* CEs [253] --> Loop 199 

#### Loops of fun21/3 
* Loop 197: fun21(V1,V,Out)->  fun21(V1',V,Out')
                  [V>=0,V1>=1,Out=Out'+1,V1=V1'+1] 
* Loop 198: fun21(V1,V,Out)->  fun21(V1',V',Out')
                  [V>=1,V1>=1,Out=Out'+1,V=V'+1,V1=V1'+1] 
* Loop 199: fun21(V1,V,Out) [V>=0,V1>=0,Out=0] 

### Ranking functions of CR fun21(V1,V,Out) 
* RF of phase [197,198]: [V1]

#### Partial ranking functions of CR fun21(V1,V,Out) 
* Partial RF of phase [197,198]:
  - RF of loop [197:1,198:1]:
    V1
  - RF of loop [198:1]:
    V


### Resulting Chains:fun21(V1,V,Out) 
* [[197,198],199]
* [199]


### Merging Chains  fun21/3 into  External patterns of execution 
* [[199]] --> 1 
* [[199,[197,198]]] --> 2 


### Specialization of cost equations fun22/4 
* CE 157 is refined into CE [256] 
* CE 156 is refined into CE [257] 
* CE 155 is refined into CE [258] 


#### Refined cost equations fun22/4 
* CE 256: fun22(V1,V,V2,Out) = 0
     [V2>=0,V>=0,V1>=0,Out=0] 
* CE 257: fun22(V1,V,V2,Out) = 1+ fun22(W2,V,V2,X2)
     [W2>=0,V2>=0,V>=0,X2+1=Out,W2+1=V1] 
* CE 258: fun22(V1,V,V2,Out) = 1+ fun22(W2,X2,Y2,Z2)
     [Y2>=0,X2>=0,W2>=0,Z2+1=Out,Y2+1=V2,X2+1=V,W2+1=V1] 

### Cost equations --> "Loop" of fun22/4 
* CEs [257] --> Loop 200 
* CEs [258] --> Loop 201 
* CEs [256] --> Loop 202 

#### Loops of fun22/4 
* Loop 200: fun22(V1,V,V2,Out)->  fun22(V1',V,V2,Out')
                  [V2>=0,V>=0,V1>=1,Out=Out'+1,V1=V1'+1] 
* Loop 201: fun22(V1,V,V2,Out)->  fun22(V1',V',V2',Out')
                  [V2>=1,V>=1,V1>=1,Out=Out'+1,V2=V2'+1,V=V'+1,V1=V1'+1] 
* Loop 202: fun22(V1,V,V2,Out) [V2>=0,V>=0,V1>=0,Out=0] 

### Ranking functions of CR fun22(V1,V,V2,Out) 
* RF of phase [200,201]: [V1]

#### Partial ranking functions of CR fun22(V1,V,V2,Out) 
* Partial RF of phase [200,201]:
  - RF of loop [200:1,201:1]:
    V1
  - RF of loop [201:1]:
    V
    V2


### Resulting Chains:fun22(V1,V,V2,Out) 
* [[200,201],202]
* [202]


### Merging Chains  fun22/4 into  External patterns of execution 
* [[202]] --> 1 
* [[202,[200,201]]] --> 2 


### Specialization of cost equations fun23/4 
* CE 162 is refined into CE [259] 
* CE 160 is refined into CE [260] 
* CE 161 is refined into CE [261] 


#### Refined cost equations fun23/4 
* CE 259: fun23(V1,V,V2,Out) = 0
     [V2>=0,V>=0,V1>=0,Out=0] 
* CE 260: fun23(V1,V,V2,Out) = 1+ fun23(W2,V,V2,X2)
     [W2>=0,V2>=0,V>=0,X2+1=Out,W2+1=V1] 
* CE 261: fun23(V1,V,V2,Out) = 1+ fun23(W2,X2,Y2,Z2)
     [Y2>=0,X2>=0,W2>=0,Z2+1=Out,Y2+1=V2,X2+1=V,W2+1=V1] 

### Cost equations --> "Loop" of fun23/4 
* CEs [260] --> Loop 203 
* CEs [261] --> Loop 204 
* CEs [259] --> Loop 205 

#### Loops of fun23/4 
* Loop 203: fun23(V1,V,V2,Out)->  fun23(V1',V,V2,Out')
                  [V2>=0,V>=0,V1>=1,Out=Out'+1,V1=V1'+1] 
* Loop 204: fun23(V1,V,V2,Out)->  fun23(V1',V',V2',Out')
                  [V2>=1,V>=1,V1>=1,Out=Out'+1,V2=V2'+1,V=V'+1,V1=V1'+1] 
* Loop 205: fun23(V1,V,V2,Out) [V2>=0,V>=0,V1>=0,Out=0] 

### Ranking functions of CR fun23(V1,V,V2,Out) 
* RF of phase [203,204]: [V1]

#### Partial ranking functions of CR fun23(V1,V,V2,Out) 
* Partial RF of phase [203,204]:
  - RF of loop [203:1,204:1]:
    V1
  - RF of loop [204:1]:
    V
    V2


### Resulting Chains:fun23(V1,V,V2,Out) 
* [[203,204],205]
* [205]


### Merging Chains  fun23/4 into  External patterns of execution 
* [[205]] --> 1 
* [[205,[203,204]]] --> 2 


### Specialization of cost equations fun24/3 
* CE 165 is refined into CE [262] 
* CE 163 is refined into CE [263] 
* CE 164 is refined into CE [264] 


#### Refined cost equations fun24/3 
* CE 262: fun24(V1,V,Out) = 0
     [V>=0,V1>=0,Out=0] 
* CE 263: fun24(V1,V,Out) = 1+ fun24(W1,V,X1)
     [W1>=0,V>=0,X1+1=Out,W1+1=V1] 
* CE 264: fun24(V1,V,Out) = 1+ fun24(W1,X1,Y1)
     [X1>=0,W1>=0,Y1+1=Out,X1+1=V,W1+1=V1] 

### Cost equations --> "Loop" of fun24/3 
* CEs [263] --> Loop 206 
* CEs [264] --> Loop 207 
* CEs [262] --> Loop 208 

#### Loops of fun24/3 
* Loop 206: fun24(V1,V,Out)->  fun24(V1',V,Out')
                  [V>=0,V1>=1,Out=Out'+1,V1=V1'+1] 
* Loop 207: fun24(V1,V,Out)->  fun24(V1',V',Out')
                  [V>=1,V1>=1,Out=Out'+1,V=V'+1,V1=V1'+1] 
* Loop 208: fun24(V1,V,Out) [V>=0,V1>=0,Out=0] 

### Ranking functions of CR fun24(V1,V,Out) 
* RF of phase [206,207]: [V1]

#### Partial ranking functions of CR fun24(V1,V,Out) 
* Partial RF of phase [206,207]:
  - RF of loop [206:1,207:1]:
    V1
  - RF of loop [207:1]:
    V


### Resulting Chains:fun24(V1,V,Out) 
* [[206,207],208]
* [208]


### Merging Chains  fun24/3 into  External patterns of execution 
* [[208]] --> 1 
* [[208,[206,207]]] --> 2 


### Specialization of cost equations fun25/3 
* CE 168 is refined into CE [265] 
* CE 167 is refined into CE [266] 
* CE 166 is refined into CE [267] 


#### Refined cost equations fun25/3 
* CE 265: fun25(V1,V,Out) = 0
     [V>=0,V1>=0,Out=0] 
* CE 266: fun25(V1,V,Out) = 1+ fun25(W1,V,X1)
     [W1>=0,V>=0,X1+1=Out,W1+1=V1] 
* CE 267: fun25(V1,V,Out) = 1+ fun25(W1,X1,Y1)
     [X1>=0,W1>=0,Y1+1=Out,X1+1=V,W1+1=V1] 

### Cost equations --> "Loop" of fun25/3 
* CEs [266] --> Loop 209 
* CEs [267] --> Loop 210 
* CEs [265] --> Loop 211 

#### Loops of fun25/3 
* Loop 209: fun25(V1,V,Out)->  fun25(V1',V,Out')
                  [V>=0,V1>=1,Out=Out'+1,V1=V1'+1] 
* Loop 210: fun25(V1,V,Out)->  fun25(V1',V',Out')
                  [V>=1,V1>=1,Out=Out'+1,V=V'+1,V1=V1'+1] 
* Loop 211: fun25(V1,V,Out) [V>=0,V1>=0,Out=0] 

### Ranking functions of CR fun25(V1,V,Out) 
* RF of phase [209,210]: [V1]

#### Partial ranking functions of CR fun25(V1,V,Out) 
* Partial RF of phase [209,210]:
  - RF of loop [209:1,210:1]:
    V1
  - RF of loop [210:1]:
    V


### Resulting Chains:fun25(V1,V,Out) 
* [[209,210],211]
* [211]


### Merging Chains  fun25/3 into  External patterns of execution 
* [[211]] --> 1 
* [[211,[209,210]]] --> 2 


### Specialization of cost equations fun26/3 
* CE 173 is refined into CE [268] 
* CE 171 is refined into CE [269] 
* CE 172 is refined into CE [270] 


#### Refined cost equations fun26/3 
* CE 268: fun26(V1,V,Out) = 0
     [V>=0,V1>=0,Out=0] 
* CE 269: fun26(V1,V,Out) = 1+ fun26(W1,V,X1)
     [W1>=0,V>=0,X1+1=Out,W1+1=V1] 
* CE 270: fun26(V1,V,Out) = 1+ fun26(W1,X1,Y1)
     [X1>=0,W1>=0,Y1+1=Out,X1+1=V,W1+1=V1] 

### Cost equations --> "Loop" of fun26/3 
* CEs [269] --> Loop 212 
* CEs [270] --> Loop 213 
* CEs [268] --> Loop 214 

#### Loops of fun26/3 
* Loop 212: fun26(V1,V,Out)->  fun26(V1',V,Out')
                  [V>=0,V1>=1,Out=Out'+1,V1=V1'+1] 
* Loop 213: fun26(V1,V,Out)->  fun26(V1',V',Out')
                  [V>=1,V1>=1,Out=Out'+1,V=V'+1,V1=V1'+1] 
* Loop 214: fun26(V1,V,Out) [V>=0,V1>=0,Out=0] 

### Ranking functions of CR fun26(V1,V,Out) 
* RF of phase [212,213]: [V1]

#### Partial ranking functions of CR fun26(V1,V,Out) 
* Partial RF of phase [212,213]:
  - RF of loop [212:1,213:1]:
    V1
  - RF of loop [213:1]:
    V


### Resulting Chains:fun26(V1,V,Out) 
* [[212,213],214]
* [214]


### Merging Chains  fun26/3 into  External patterns of execution 
* [[214]] --> 1 
* [[214,[212,213]]] --> 2 


### Specialization of cost equations fun27/4 
* CE 176 is refined into CE [271] 
* CE 175 is refined into CE [272] 
* CE 174 is refined into CE [273] 


#### Refined cost equations fun27/4 
* CE 271: fun27(V1,V,V2,Out) = 0
     [V2>=0,V>=0,V1>=0,Out=0] 
* CE 272: fun27(V1,V,V2,Out) = 1+ fun27(W2,V,V2,X2)
     [W2>=0,V2>=0,V>=0,X2+1=Out,W2+1=V1] 
* CE 273: fun27(V1,V,V2,Out) = 1+ fun27(W2,X2,Y2,Z2)
     [Y2>=0,X2>=0,W2>=0,Z2+1=Out,Y2+1=V2,X2+1=V,W2+1=V1] 

### Cost equations --> "Loop" of fun27/4 
* CEs [272] --> Loop 215 
* CEs [273] --> Loop 216 
* CEs [271] --> Loop 217 

#### Loops of fun27/4 
* Loop 215: fun27(V1,V,V2,Out)->  fun27(V1',V,V2,Out')
                  [V2>=0,V>=0,V1>=1,Out=Out'+1,V1=V1'+1] 
* Loop 216: fun27(V1,V,V2,Out)->  fun27(V1',V',V2',Out')
                  [V2>=1,V>=1,V1>=1,Out=Out'+1,V2=V2'+1,V=V'+1,V1=V1'+1] 
* Loop 217: fun27(V1,V,V2,Out) [V2>=0,V>=0,V1>=0,Out=0] 

### Ranking functions of CR fun27(V1,V,V2,Out) 
* RF of phase [215,216]: [V1]

#### Partial ranking functions of CR fun27(V1,V,V2,Out) 
* Partial RF of phase [215,216]:
  - RF of loop [215:1,216:1]:
    V1
  - RF of loop [216:1]:
    V
    V2


### Resulting Chains:fun27(V1,V,V2,Out) 
* [[215,216],217]
* [217]


### Merging Chains  fun27/4 into  External patterns of execution 
* [[217]] --> 1 
* [[217,[215,216]]] --> 2 


### Specialization of cost equations fun28/4 
* CE 181 is refined into CE [274] 
* CE 180 is refined into CE [275] 
* CE 179 is refined into CE [276] 


#### Refined cost equations fun28/4 
* CE 274: fun28(V1,V,V2,Out) = 0
     [V2>=0,V>=0,V1>=0,Out=0] 
* CE 275: fun28(V1,V,V2,Out) = 1+ fun28(W2,V,V2,X2)
     [W2>=0,V2>=0,V>=0,X2+1=Out,W2+1=V1] 
* CE 276: fun28(V1,V,V2,Out) = 1+ fun28(W2,X2,Y2,Z2)
     [Y2>=0,X2>=0,W2>=0,Z2+1=Out,Y2+1=V2,X2+1=V,W2+1=V1] 

### Cost equations --> "Loop" of fun28/4 
* CEs [275] --> Loop 218 
* CEs [276] --> Loop 219 
* CEs [274] --> Loop 220 

#### Loops of fun28/4 
* Loop 218: fun28(V1,V,V2,Out)->  fun28(V1',V,V2,Out')
                  [V2>=0,V>=0,V1>=1,Out=Out'+1,V1=V1'+1] 
* Loop 219: fun28(V1,V,V2,Out)->  fun28(V1',V',V2',Out')
                  [V2>=1,V>=1,V1>=1,Out=Out'+1,V2=V2'+1,V=V'+1,V1=V1'+1] 
* Loop 220: fun28(V1,V,V2,Out) [V2>=0,V>=0,V1>=0,Out=0] 

### Ranking functions of CR fun28(V1,V,V2,Out) 
* RF of phase [218,219]: [V1]

#### Partial ranking functions of CR fun28(V1,V,V2,Out) 
* Partial RF of phase [218,219]:
  - RF of loop [218:1,219:1]:
    V1
  - RF of loop [219:1]:
    V
    V2


### Resulting Chains:fun28(V1,V,V2,Out) 
* [[218,219],220]
* [220]


### Merging Chains  fun28/4 into  External patterns of execution 
* [[220]] --> 1 
* [[220,[218,219]]] --> 2 


### Specialization of cost equations fun29/2 
* CE 183 is refined into CE [277] 
* CE 182 is refined into CE [278] 


#### Refined cost equations fun29/2 
* CE 277: fun29(V1,Out) = 0
     [V1>=0,Out=0] 
* CE 278: fun29(V1,Out) = 1+ fun29(W1,X1)
     [W1>=0,X1+1=Out,W1+1=V1] 

### Cost equations --> "Loop" of fun29/2 
* CEs [278] --> Loop 221 
* CEs [277] --> Loop 222 

#### Loops of fun29/2 
* Loop 221: fun29(V1,Out)->  fun29(V1',Out')
                  [V1'>=0,Out=Out'+1,V1'+1=V1] 
* Loop 222: fun29(V1,Out) [V1>=0,Out=0] 

### Ranking functions of CR fun29(V1,Out) 
* RF of phase [221]: [V1]

#### Partial ranking functions of CR fun29(V1,Out) 
* Partial RF of phase [221]:
  - RF of loop [221:1]:
    V1


### Resulting Chains:fun29(V1,Out) 
* [[221],222]
* [222]


### Merging Chains  fun29/2 into  External patterns of execution 
* [[222]] --> 1 
* [[222,[221]]] --> 2 


### Specialization of cost equations fun3/3 
* CE 73 is refined into CE [279] 
* CE 71 is refined into CE [280] 
* CE 72 is refined into CE [281] 


#### Refined cost equations fun3/3 
* CE 279: fun3(V1,V,Out) = 0
     [V>=0,V1>=0,Out=0] 
* CE 280: fun3(V1,V,Out) = 1+ fun3(W1,V,X1)
     [W1>=0,V>=0,X1+1=Out,W1+1=V1] 
* CE 281: fun3(V1,V,Out) = 1+ fun3(W1,X1,Y1)
     [X1>=0,W1>=0,Y1+1=Out,X1+1=V,W1+1=V1] 

### Cost equations --> "Loop" of fun3/3 
* CEs [280] --> Loop 223 
* CEs [281] --> Loop 224 
* CEs [279] --> Loop 225 

#### Loops of fun3/3 
* Loop 223: fun3(V1,V,Out)->  fun3(V1',V,Out')
                  [V>=0,V1>=1,Out=Out'+1,V1=V1'+1] 
* Loop 224: fun3(V1,V,Out)->  fun3(V1',V',Out')
                  [V>=1,V1>=1,Out=Out'+1,V=V'+1,V1=V1'+1] 
* Loop 225: fun3(V1,V,Out) [V>=0,V1>=0,Out=0] 

### Ranking functions of CR fun3(V1,V,Out) 
* RF of phase [223,224]: [V1]

#### Partial ranking functions of CR fun3(V1,V,Out) 
* Partial RF of phase [223,224]:
  - RF of loop [223:1,224:1]:
    V1
  - RF of loop [224:1]:
    V


### Resulting Chains:fun3(V1,V,Out) 
* [[223,224],225]
* [225]


### Merging Chains  fun3/3 into  External patterns of execution 
* [[225]] --> 1 
* [[225,[223,224]]] --> 2 


### Specialization of cost equations fun30/3 
* CE 186 is refined into CE [282] 
* CE 185 is refined into CE [283] 
* CE 184 is refined into CE [284] 


#### Refined cost equations fun30/3 
* CE 282: fun30(V1,V,Out) = 0
     [V>=0,V1>=0,Out=0] 
* CE 283: fun30(V1,V,Out) = 1+ fun30(W1,V,X1)
     [W1>=0,V>=0,X1+1=Out,W1+1=V1] 
* CE 284: fun30(V1,V,Out) = 1+ fun30(W1,X1,Y1)
     [X1>=0,W1>=0,Y1+1=Out,X1+1=V,W1+1=V1] 

### Cost equations --> "Loop" of fun30/3 
* CEs [283] --> Loop 226 
* CEs [284] --> Loop 227 
* CEs [282] --> Loop 228 

#### Loops of fun30/3 
* Loop 226: fun30(V1,V,Out)->  fun30(V1',V,Out')
                  [V>=0,V1>=1,Out=Out'+1,V1=V1'+1] 
* Loop 227: fun30(V1,V,Out)->  fun30(V1',V',Out')
                  [V>=1,V1>=1,Out=Out'+1,V=V'+1,V1=V1'+1] 
* Loop 228: fun30(V1,V,Out) [V>=0,V1>=0,Out=0] 

### Ranking functions of CR fun30(V1,V,Out) 
* RF of phase [226,227]: [V1]

#### Partial ranking functions of CR fun30(V1,V,Out) 
* Partial RF of phase [226,227]:
  - RF of loop [226:1,227:1]:
    V1
  - RF of loop [227:1]:
    V


### Resulting Chains:fun30(V1,V,Out) 
* [[226,227],228]
* [228]


### Merging Chains  fun30/3 into  External patterns of execution 
* [[228]] --> 1 
* [[228,[226,227]]] --> 2 


### Specialization of cost equations fun31/2 
* CE 188 is refined into CE [285] 
* CE 187 is refined into CE [286] 


#### Refined cost equations fun31/2 
* CE 285: fun31(V1,Out) = 0
     [V1>=0,Out=0] 
* CE 286: fun31(V1,Out) = 1+ fun31(W1,X1)
     [W1>=0,X1+1=Out,W1+1=V1] 

### Cost equations --> "Loop" of fun31/2 
* CEs [286] --> Loop 229 
* CEs [285] --> Loop 230 

#### Loops of fun31/2 
* Loop 229: fun31(V1,Out)->  fun31(V1',Out')
                  [V1'>=0,Out=Out'+1,V1'+1=V1] 
* Loop 230: fun31(V1,Out) [V1>=0,Out=0] 

### Ranking functions of CR fun31(V1,Out) 
* RF of phase [229]: [V1]

#### Partial ranking functions of CR fun31(V1,Out) 
* Partial RF of phase [229]:
  - RF of loop [229:1]:
    V1


### Resulting Chains:fun31(V1,Out) 
* [[229],230]
* [230]


### Merging Chains  fun31/2 into  External patterns of execution 
* [[230]] --> 1 
* [[230,[229]]] --> 2 


### Specialization of cost equations fun32/3 
* CE 191 is refined into CE [287] 
* CE 190 is refined into CE [288] 
* CE 189 is refined into CE [289] 


#### Refined cost equations fun32/3 
* CE 287: fun32(V1,V,Out) = 0
     [V>=0,V1>=0,Out=0] 
* CE 288: fun32(V1,V,Out) = 1+ fun32(W1,V,X1)
     [W1>=0,V>=0,X1+1=Out,W1+1=V1] 
* CE 289: fun32(V1,V,Out) = 1+ fun32(W1,X1,Y1)
     [X1>=0,W1>=0,Y1+1=Out,X1+1=V,W1+1=V1] 

### Cost equations --> "Loop" of fun32/3 
* CEs [288] --> Loop 231 
* CEs [289] --> Loop 232 
* CEs [287] --> Loop 233 

#### Loops of fun32/3 
* Loop 231: fun32(V1,V,Out)->  fun32(V1',V,Out')
                  [V>=0,V1>=1,Out=Out'+1,V1=V1'+1] 
* Loop 232: fun32(V1,V,Out)->  fun32(V1',V',Out')
                  [V>=1,V1>=1,Out=Out'+1,V=V'+1,V1=V1'+1] 
* Loop 233: fun32(V1,V,Out) [V>=0,V1>=0,Out=0] 

### Ranking functions of CR fun32(V1,V,Out) 
* RF of phase [231,232]: [V1]

#### Partial ranking functions of CR fun32(V1,V,Out) 
* Partial RF of phase [231,232]:
  - RF of loop [231:1,232:1]:
    V1
  - RF of loop [232:1]:
    V


### Resulting Chains:fun32(V1,V,Out) 
* [[231,232],233]
* [233]


### Merging Chains  fun32/3 into  External patterns of execution 
* [[233]] --> 1 
* [[233,[231,232]]] --> 2 


### Specialization of cost equations fun33/2 
* CE 193 is refined into CE [290] 
* CE 192 is refined into CE [291] 


#### Refined cost equations fun33/2 
* CE 290: fun33(V1,Out) = 0
     [V1>=0,Out=0] 
* CE 291: fun33(V1,Out) = 1+ fun33(W1,X1)
     [W1>=0,X1+1=Out,W1+1=V1] 

### Cost equations --> "Loop" of fun33/2 
* CEs [291] --> Loop 234 
* CEs [290] --> Loop 235 

#### Loops of fun33/2 
* Loop 234: fun33(V1,Out)->  fun33(V1',Out')
                  [V1'>=0,Out=Out'+1,V1'+1=V1] 
* Loop 235: fun33(V1,Out) [V1>=0,Out=0] 

### Ranking functions of CR fun33(V1,Out) 
* RF of phase [234]: [V1]

#### Partial ranking functions of CR fun33(V1,Out) 
* Partial RF of phase [234]:
  - RF of loop [234:1]:
    V1


### Resulting Chains:fun33(V1,Out) 
* [[234],235]
* [235]


### Merging Chains  fun33/2 into  External patterns of execution 
* [[235]] --> 1 
* [[235,[234]]] --> 2 


### Specialization of cost equations fun34/2 
* CE 195 is refined into CE [292] 
* CE 194 is refined into CE [293] 


#### Refined cost equations fun34/2 
* CE 292: fun34(V1,Out) = 0
     [V1>=0,Out=0] 
* CE 293: fun34(V1,Out) = 1+ fun34(W1,X1)
     [W1>=0,X1+1=Out,W1+1=V1] 

### Cost equations --> "Loop" of fun34/2 
* CEs [293] --> Loop 236 
* CEs [292] --> Loop 237 

#### Loops of fun34/2 
* Loop 236: fun34(V1,Out)->  fun34(V1',Out')
                  [V1'>=0,Out=Out'+1,V1'+1=V1] 
* Loop 237: fun34(V1,Out) [V1>=0,Out=0] 

### Ranking functions of CR fun34(V1,Out) 
* RF of phase [236]: [V1]

#### Partial ranking functions of CR fun34(V1,Out) 
* Partial RF of phase [236]:
  - RF of loop [236:1]:
    V1


### Resulting Chains:fun34(V1,Out) 
* [[236],237]
* [237]


### Merging Chains  fun34/2 into  External patterns of execution 
* [[237]] --> 1 
* [[237,[236]]] --> 2 


### Specialization of cost equations fun35/3 
* CE 198 is refined into CE [294] 
* CE 196 is refined into CE [295] 
* CE 197 is refined into CE [296] 


#### Refined cost equations fun35/3 
* CE 294: fun35(V1,V,Out) = 0
     [V>=0,V1>=0,Out=0] 
* CE 295: fun35(V1,V,Out) = 1+ fun35(W1,V,X1)
     [W1>=0,V>=0,X1+1=Out,W1+1=V1] 
* CE 296: fun35(V1,V,Out) = 1+ fun35(W1,X1,Y1)
     [X1>=0,W1>=0,Y1+1=Out,X1+1=V,W1+1=V1] 

### Cost equations --> "Loop" of fun35/3 
* CEs [295] --> Loop 238 
* CEs [296] --> Loop 239 
* CEs [294] --> Loop 240 

#### Loops of fun35/3 
* Loop 238: fun35(V1,V,Out)->  fun35(V1',V,Out')
                  [V>=0,V1>=1,Out=Out'+1,V1=V1'+1] 
* Loop 239: fun35(V1,V,Out)->  fun35(V1',V',Out')
                  [V>=1,V1>=1,Out=Out'+1,V=V'+1,V1=V1'+1] 
* Loop 240: fun35(V1,V,Out) [V>=0,V1>=0,Out=0] 

### Ranking functions of CR fun35(V1,V,Out) 
* RF of phase [238,239]: [V1]

#### Partial ranking functions of CR fun35(V1,V,Out) 
* Partial RF of phase [238,239]:
  - RF of loop [238:1,239:1]:
    V1
  - RF of loop [239:1]:
    V


### Resulting Chains:fun35(V1,V,Out) 
* [[238,239],240]
* [240]


### Merging Chains  fun35/3 into  External patterns of execution 
* [[240]] --> 1 
* [[240,[238,239]]] --> 2 


### Specialization of cost equations fun36/3 
* CE 201 is refined into CE [297] 
* CE 199 is refined into CE [298] 
* CE 200 is refined into CE [299] 


#### Refined cost equations fun36/3 
* CE 297: fun36(V1,V,Out) = 0
     [V>=0,V1>=0,Out=0] 
* CE 298: fun36(V1,V,Out) = 1+ fun36(W1,V,X1)
     [W1>=0,V>=0,X1+1=Out,W1+1=V1] 
* CE 299: fun36(V1,V,Out) = 1+ fun36(W1,X1,Y1)
     [X1>=0,W1>=0,Y1+1=Out,X1+1=V,W1+1=V1] 

### Cost equations --> "Loop" of fun36/3 
* CEs [298] --> Loop 241 
* CEs [299] --> Loop 242 
* CEs [297] --> Loop 243 

#### Loops of fun36/3 
* Loop 241: fun36(V1,V,Out)->  fun36(V1',V,Out')
                  [V>=0,V1>=1,Out=Out'+1,V1=V1'+1] 
* Loop 242: fun36(V1,V,Out)->  fun36(V1',V',Out')
                  [V>=1,V1>=1,Out=Out'+1,V=V'+1,V1=V1'+1] 
* Loop 243: fun36(V1,V,Out) [V>=0,V1>=0,Out=0] 

### Ranking functions of CR fun36(V1,V,Out) 
* RF of phase [241,242]: [V1]

#### Partial ranking functions of CR fun36(V1,V,Out) 
* Partial RF of phase [241,242]:
  - RF of loop [241:1,242:1]:
    V1
  - RF of loop [242:1]:
    V


### Resulting Chains:fun36(V1,V,Out) 
* [[241,242],243]
* [243]


### Merging Chains  fun36/3 into  External patterns of execution 
* [[243]] --> 1 
* [[243,[241,242]]] --> 2 


### Specialization of cost equations fun37/3 
* CE 204 is refined into CE [300] 
* CE 202 is refined into CE [301] 
* CE 203 is refined into CE [302] 


#### Refined cost equations fun37/3 
* CE 300: fun37(V1,V,Out) = 0
     [V>=0,V1>=0,Out=0] 
* CE 301: fun37(V1,V,Out) = 1+ fun37(W1,V,X1)
     [W1>=0,V>=0,X1+1=Out,W1+1=V1] 
* CE 302: fun37(V1,V,Out) = 1+ fun37(W1,X1,Y1)
     [X1>=0,W1>=0,Y1+1=Out,X1+1=V,W1+1=V1] 

### Cost equations --> "Loop" of fun37/3 
* CEs [301] --> Loop 244 
* CEs [302] --> Loop 245 
* CEs [300] --> Loop 246 

#### Loops of fun37/3 
* Loop 244: fun37(V1,V,Out)->  fun37(V1',V,Out')
                  [V>=0,V1>=1,Out=Out'+1,V1=V1'+1] 
* Loop 245: fun37(V1,V,Out)->  fun37(V1',V',Out')
                  [V>=1,V1>=1,Out=Out'+1,V=V'+1,V1=V1'+1] 
* Loop 246: fun37(V1,V,Out) [V>=0,V1>=0,Out=0] 

### Ranking functions of CR fun37(V1,V,Out) 
* RF of phase [244,245]: [V1]

#### Partial ranking functions of CR fun37(V1,V,Out) 
* Partial RF of phase [244,245]:
  - RF of loop [244:1,245:1]:
    V1
  - RF of loop [245:1]:
    V


### Resulting Chains:fun37(V1,V,Out) 
* [[244,245],246]
* [246]


### Merging Chains  fun37/3 into  External patterns of execution 
* [[246]] --> 1 
* [[246,[244,245]]] --> 2 


### Specialization of cost equations fun4/2 
* CE 79 is refined into CE [303] 
* CE 78 is refined into CE [304] 


#### Refined cost equations fun4/2 
* CE 303: fun4(V1,Out) = 0
     [V1>=0,Out=0] 
* CE 304: fun4(V1,Out) = 1+ fun4(W1,X1)
     [W1>=0,X1+1=Out,W1+1=V1] 

### Cost equations --> "Loop" of fun4/2 
* CEs [304] --> Loop 247 
* CEs [303] --> Loop 248 

#### Loops of fun4/2 
* Loop 247: fun4(V1,Out)->  fun4(V1',Out')
                  [V1'>=0,Out=Out'+1,V1'+1=V1] 
* Loop 248: fun4(V1,Out) [V1>=0,Out=0] 

### Ranking functions of CR fun4(V1,Out) 
* RF of phase [247]: [V1]

#### Partial ranking functions of CR fun4(V1,Out) 
* Partial RF of phase [247]:
  - RF of loop [247:1]:
    V1


### Resulting Chains:fun4(V1,Out) 
* [[247],248]
* [248]


### Merging Chains  fun4/2 into  External patterns of execution 
* [[248]] --> 1 
* [[248,[247]]] --> 2 


### Specialization of cost equations fun5/3 
* CE 82 is refined into CE [305] 
* CE 81 is refined into CE [306] 
* CE 80 is refined into CE [307] 


#### Refined cost equations fun5/3 
* CE 305: fun5(V1,V,Out) = 0
     [V>=0,V1>=0,Out=0] 
* CE 306: fun5(V1,V,Out) = 1+ fun5(W1,V,X1)
     [W1>=0,V>=0,X1+1=Out,W1+1=V1] 
* CE 307: fun5(V1,V,Out) = 1+ fun5(W1,X1,Y1)
     [X1>=0,W1>=0,Y1+1=Out,X1+1=V,W1+1=V1] 

### Cost equations --> "Loop" of fun5/3 
* CEs [306] --> Loop 249 
* CEs [307] --> Loop 250 
* CEs [305] --> Loop 251 

#### Loops of fun5/3 
* Loop 249: fun5(V1,V,Out)->  fun5(V1',V,Out')
                  [V>=0,V1>=1,Out=Out'+1,V1=V1'+1] 
* Loop 250: fun5(V1,V,Out)->  fun5(V1',V',Out')
                  [V>=1,V1>=1,Out=Out'+1,V=V'+1,V1=V1'+1] 
* Loop 251: fun5(V1,V,Out) [V>=0,V1>=0,Out=0] 

### Ranking functions of CR fun5(V1,V,Out) 
* RF of phase [249,250]: [V1]

#### Partial ranking functions of CR fun5(V1,V,Out) 
* Partial RF of phase [249,250]:
  - RF of loop [249:1,250:1]:
    V1
  - RF of loop [250:1]:
    V


### Resulting Chains:fun5(V1,V,Out) 
* [[249,250],251]
* [251]


### Merging Chains  fun5/3 into  External patterns of execution 
* [[251]] --> 1 
* [[251,[249,250]]] --> 2 


### Specialization of cost equations fun6/2 
* CE 84 is refined into CE [308] 
* CE 83 is refined into CE [309] 


#### Refined cost equations fun6/2 
* CE 308: fun6(V1,Out) = 0
     [V1>=0,Out=0] 
* CE 309: fun6(V1,Out) = 1+ fun6(W1,X1)
     [W1>=0,X1+1=Out,W1+1=V1] 

### Cost equations --> "Loop" of fun6/2 
* CEs [309] --> Loop 252 
* CEs [308] --> Loop 253 

#### Loops of fun6/2 
* Loop 252: fun6(V1,Out)->  fun6(V1',Out')
                  [V1'>=0,Out=Out'+1,V1'+1=V1] 
* Loop 253: fun6(V1,Out) [V1>=0,Out=0] 

### Ranking functions of CR fun6(V1,Out) 
* RF of phase [252]: [V1]

#### Partial ranking functions of CR fun6(V1,Out) 
* Partial RF of phase [252]:
  - RF of loop [252:1]:
    V1


### Resulting Chains:fun6(V1,Out) 
* [[252],253]
* [253]


### Merging Chains  fun6/2 into  External patterns of execution 
* [[253]] --> 1 
* [[253,[252]]] --> 2 


### Specialization of cost equations fun7/2 
* CE 86 is refined into CE [310] 
* CE 85 is refined into CE [311] 


#### Refined cost equations fun7/2 
* CE 310: fun7(V1,Out) = 0
     [V1>=0,Out=0] 
* CE 311: fun7(V1,Out) = 1+ fun7(W1,X1)
     [W1>=0,X1+1=Out,W1+1=V1] 

### Cost equations --> "Loop" of fun7/2 
* CEs [311] --> Loop 254 
* CEs [310] --> Loop 255 

#### Loops of fun7/2 
* Loop 254: fun7(V1,Out)->  fun7(V1',Out')
                  [V1'>=0,Out=Out'+1,V1'+1=V1] 
* Loop 255: fun7(V1,Out) [V1>=0,Out=0] 

### Ranking functions of CR fun7(V1,Out) 
* RF of phase [254]: [V1]

#### Partial ranking functions of CR fun7(V1,Out) 
* Partial RF of phase [254]:
  - RF of loop [254:1]:
    V1


### Resulting Chains:fun7(V1,Out) 
* [[254],255]
* [255]


### Merging Chains  fun7/2 into  External patterns of execution 
* [[255]] --> 1 
* [[255,[254]]] --> 2 


### Specialization of cost equations fun8/4 
* CE 93 is refined into CE [312] 
* CE 91 is refined into CE [313] 
* CE 92 is refined into CE [314] 


#### Refined cost equations fun8/4 
* CE 312: fun8(V1,V,V2,Out) = 0
     [V2>=0,V>=0,V1>=0,Out=0] 
* CE 313: fun8(V1,V,V2,Out) = 1+ fun8(W2,V,V2,X2)
     [W2>=0,V2>=0,V>=0,X2+1=Out,W2+1=V1] 
* CE 314: fun8(V1,V,V2,Out) = 1+ fun8(W2,X2,Y2,Z2)
     [Y2>=0,X2>=0,W2>=0,Z2+1=Out,Y2+1=V2,X2+1=V,W2+1=V1] 

### Cost equations --> "Loop" of fun8/4 
* CEs [313] --> Loop 256 
* CEs [314] --> Loop 257 
* CEs [312] --> Loop 258 

#### Loops of fun8/4 
* Loop 256: fun8(V1,V,V2,Out)->  fun8(V1',V,V2,Out')
                  [V2>=0,V>=0,V1>=1,Out=Out'+1,V1=V1'+1] 
* Loop 257: fun8(V1,V,V2,Out)->  fun8(V1',V',V2',Out')
                  [V2>=1,V>=1,V1>=1,Out=Out'+1,V2=V2'+1,V=V'+1,V1=V1'+1] 
* Loop 258: fun8(V1,V,V2,Out) [V2>=0,V>=0,V1>=0,Out=0] 

### Ranking functions of CR fun8(V1,V,V2,Out) 
* RF of phase [256,257]: [V1]

#### Partial ranking functions of CR fun8(V1,V,V2,Out) 
* Partial RF of phase [256,257]:
  - RF of loop [256:1,257:1]:
    V1
  - RF of loop [257:1]:
    V
    V2


### Resulting Chains:fun8(V1,V,V2,Out) 
* [[256,257],258]
* [258]


### Merging Chains  fun8/4 into  External patterns of execution 
* [[258]] --> 1 
* [[258,[256,257]]] --> 2 


### Specialization of cost equations fun9/5 
* CE 96 is refined into CE [315] 
* CE 95 is refined into CE [316] 
* CE 94 is refined into CE [317] 


#### Refined cost equations fun9/5 
* CE 315: fun9(V1,V,V2,V3,Out) = 0
     [V3>=0,V2>=0,V>=0,V1>=0,Out=0] 
* CE 316: fun9(V1,V,V2,V3,Out) = 1+ fun9(W3,V,V2,V3,X3)
     [W3>=0,V3>=0,V2>=0,V>=0,X3+1=Out,W3+1=V1] 
* CE 317: fun9(V1,V,V2,V3,Out) = 1+ fun9(W3,X3,Y3,Z3,A4)
     [Z3>=0,Y3>=0,X3>=0,W3>=0,A4+1=Out,Z3+1=V3,Y3+1=V2,X3+1=V,W3+1=V1] 

### Cost equations --> "Loop" of fun9/5 
* CEs [316] --> Loop 259 
* CEs [317] --> Loop 260 
* CEs [315] --> Loop 261 

#### Loops of fun9/5 
* Loop 259: fun9(V1,V,V2,V3,Out)->  fun9(V1',V,V2,V3,Out')
                  [V3>=0,V2>=0,V>=0,V1>=1,Out=Out'+1,V1=V1'+1] 
* Loop 260: fun9(V1,V,V2,V3,Out)->  fun9(V1',V',V2',V3',Out')
                  [V3>=1,V2>=1,V>=1,V1>=1,Out=Out'+1,V3=V3'+1,V2=V2'+1,V=V'+1,V1=V1'+1] 
* Loop 261: fun9(V1,V,V2,V3,Out) [V3>=0,V2>=0,V>=0,V1>=0,Out=0] 

### Ranking functions of CR fun9(V1,V,V2,V3,Out) 
* RF of phase [259,260]: [V1]

#### Partial ranking functions of CR fun9(V1,V,V2,V3,Out) 
* Partial RF of phase [259,260]:
  - RF of loop [259:1,260:1]:
    V1
  - RF of loop [260:1]:
    V
    V2
    V3


### Resulting Chains:fun9(V1,V,V2,V3,Out) 
* [[259,260],261]
* [261]


### Merging Chains  fun9/5 into  External patterns of execution 
* [[261]] --> 1 
* [[261,[259,260]]] --> 2 


### Specialization of cost equations head/2 
* CE 105 is refined into CE [318] 
* CE 104 is refined into CE [319] 


#### Refined cost equations head/2 
* CE 318: head(V1,Out) = 0
     [V1>=0,Out=0] 
* CE 319: head(V1,Out) = 1+ head(W1,X1)
     [W1>=0,X1+1=Out,W1+1=V1] 

### Cost equations --> "Loop" of head/2 
* CEs [319] --> Loop 262 
* CEs [318] --> Loop 263 

#### Loops of head/2 
* Loop 262: head(V1,Out)->  head(V1',Out')
                  [V1'>=0,Out=Out'+1,V1'+1=V1] 
* Loop 263: head(V1,Out) [V1>=0,Out=0] 

### Ranking functions of CR head(V1,Out) 
* RF of phase [262]: [V1]

#### Partial ranking functions of CR head(V1,Out) 
* Partial RF of phase [262]:
  - RF of loop [262:1]:
    V1


### Resulting Chains:head(V1,Out) 
* [[262],263]
* [263]


### Merging Chains  head/2 into  External patterns of execution 
* [[263]] --> 1 
* [[263,[262]]] --> 2 


### Specialization of cost equations isLNat/2 
* CE 206 is refined into CE [320] 
* CE 205 is refined into CE [321] 


#### Refined cost equations isLNat/2 
* CE 320: isLNat(V1,Out) = 0
     [V1>=0,Out=0] 
* CE 321: isLNat(V1,Out) = 1+ isLNat(W1,X1)
     [W1>=0,X1+1=Out,W1+1=V1] 

### Cost equations --> "Loop" of isLNat/2 
* CEs [321] --> Loop 264 
* CEs [320] --> Loop 265 

#### Loops of isLNat/2 
* Loop 264: isLNat(V1,Out)->  isLNat(V1',Out')
                  [V1'>=0,Out=Out'+1,V1'+1=V1] 
* Loop 265: isLNat(V1,Out) [V1>=0,Out=0] 

### Ranking functions of CR isLNat(V1,Out) 
* RF of phase [264]: [V1]

#### Partial ranking functions of CR isLNat(V1,Out) 
* Partial RF of phase [264]:
  - RF of loop [264:1]:
    V1


### Resulting Chains:isLNat(V1,Out) 
* [[264],265]
* [265]


### Merging Chains  isLNat/2 into  External patterns of execution 
* [[265]] --> 1 
* [[265,[264]]] --> 2 


### Specialization of cost equations isNatural/2 
* CE 159 is refined into CE [322] 
* CE 158 is refined into CE [323] 


#### Refined cost equations isNatural/2 
* CE 322: isNatural(V1,Out) = 0
     [V1>=0,Out=0] 
* CE 323: isNatural(V1,Out) = 1+ isNatural(W1,X1)
     [W1>=0,X1+1=Out,W1+1=V1] 

### Cost equations --> "Loop" of isNatural/2 
* CEs [323] --> Loop 266 
* CEs [322] --> Loop 267 

#### Loops of isNatural/2 
* Loop 266: isNatural(V1,Out)->  isNatural(V1',Out')
                  [V1'>=0,Out=Out'+1,V1'+1=V1] 
* Loop 267: isNatural(V1,Out) [V1>=0,Out=0] 

### Ranking functions of CR isNatural(V1,Out) 
* RF of phase [266]: [V1]

#### Partial ranking functions of CR isNatural(V1,Out) 
* Partial RF of phase [266]:
  - RF of loop [266:1]:
    V1


### Resulting Chains:isNatural(V1,Out) 
* [[266],267]
* [267]


### Merging Chains  isNatural/2 into  External patterns of execution 
* [[267]] --> 1 
* [[267,[266]]] --> 2 


### Specialization of cost equations isPLNat/2 
* CE 178 is refined into CE [324] 
* CE 177 is refined into CE [325] 


#### Refined cost equations isPLNat/2 
* CE 324: isPLNat(V1,Out) = 0
     [V1>=0,Out=0] 
* CE 325: isPLNat(V1,Out) = 1+ isPLNat(W1,X1)
     [W1>=0,X1+1=Out,W1+1=V1] 

### Cost equations --> "Loop" of isPLNat/2 
* CEs [325] --> Loop 268 
* CEs [324] --> Loop 269 

#### Loops of isPLNat/2 
* Loop 268: isPLNat(V1,Out)->  isPLNat(V1',Out')
                  [V1'>=0,Out=Out'+1,V1'+1=V1] 
* Loop 269: isPLNat(V1,Out) [V1>=0,Out=0] 

### Ranking functions of CR isPLNat(V1,Out) 
* RF of phase [268]: [V1]

#### Partial ranking functions of CR isPLNat(V1,Out) 
* Partial RF of phase [268]:
  - RF of loop [268:1]:
    V1


### Resulting Chains:isPLNat(V1,Out) 
* [[268],269]
* [269]


### Merging Chains  isPLNat/2 into  External patterns of execution 
* [[269]] --> 1 
* [[269,[268]]] --> 2 


### Specialization of cost equations natsFrom/2 
* CE 143 is refined into CE [326] 
* CE 142 is refined into CE [327] 


#### Refined cost equations natsFrom/2 
* CE 326: natsFrom(V1,Out) = 0
     [V1>=0,Out=0] 
* CE 327: natsFrom(V1,Out) = 1+ natsFrom(W1,X1)
     [W1>=0,X1+1=Out,W1+1=V1] 

### Cost equations --> "Loop" of natsFrom/2 
* CEs [327] --> Loop 270 
* CEs [326] --> Loop 271 

#### Loops of natsFrom/2 
* Loop 270: natsFrom(V1,Out)->  natsFrom(V1',Out')
                  [V1'>=0,Out=Out'+1,V1'+1=V1] 
* Loop 271: natsFrom(V1,Out) [V1>=0,Out=0] 

### Ranking functions of CR natsFrom(V1,Out) 
* RF of phase [270]: [V1]

#### Partial ranking functions of CR natsFrom(V1,Out) 
* Partial RF of phase [270]:
  - RF of loop [270:1]:
    V1


### Resulting Chains:natsFrom(V1,Out) 
* [[270],271]
* [271]


### Merging Chains  natsFrom/2 into  External patterns of execution 
* [[271]] --> 1 
* [[271,[270]]] --> 2 


### Specialization of cost equations pair/3 
* CE 70 is refined into CE [328] 
* CE 69 is refined into CE [329] 
* CE 67 is refined into CE [330] 
* CE 68 is refined into CE [331] 


#### Refined cost equations pair/3 
* CE 328: pair(V1,V,Out) = 0
     [V>=0,V1>=0,Out=0] 
* CE 329: pair(V1,V,Out) = 1+ pair(V1,W1,X1)
     [W1>=0,V1>=0,X1+1=Out,W1+1=V] 
* CE 330: pair(V1,V,Out) = 1+ pair(W1,V,X1)
     [W1>=0,V>=0,X1+1=Out,W1+1=V1] 
* CE 331: pair(V1,V,Out) = 1+ pair(W1,X1,Y1)
     [X1>=0,W1>=0,Y1+1=Out,X1+1=V,W1+1=V1] 

### Cost equations --> "Loop" of pair/3 
* CEs [329] --> Loop 272 
* CEs [330] --> Loop 273 
* CEs [331] --> Loop 274 
* CEs [328] --> Loop 275 

#### Loops of pair/3 
* Loop 272: pair(V1,V,Out)->  pair(V1,V',Out')
                  [V>=1,V1>=0,Out=Out'+1,V=V'+1] 
* Loop 273: pair(V1,V,Out)->  pair(V1',V,Out')
                  [V>=0,V1>=1,Out=Out'+1,V1=V1'+1] 
* Loop 274: pair(V1,V,Out)->  pair(V1',V',Out')
                  [V>=1,V1>=1,Out=Out'+1,V=V'+1,V1=V1'+1] 
* Loop 275: pair(V1,V,Out) [V>=0,V1>=0,Out=0] 

### Ranking functions of CR pair(V1,V,Out) 
* RF of phase [272,273,274]: [V1+V]

#### Partial ranking functions of CR pair(V1,V,Out) 
* Partial RF of phase [272,273,274]:
  - RF of loop [272:1,274:1]:
    V
  - RF of loop [273:1,274:1]:
    V1


### Resulting Chains:pair(V1,V,Out) 
* [[272,273,274],275]
* [275]


### Merging Chains  pair/3 into  External patterns of execution 
* [[275]] --> 1 
* [[275,[272,273,274]]] --> 2 


### Specialization of cost equations proper/2 
* CE 90 is refined into CE [332] 
* CE 87 is refined into CE [333] 
* CE 88 is refined into CE [334] 
* CE 89 is refined into CE [335] 


#### Refined cost equations proper/2 
* CE 332: proper(V1,Out) = 0
     [V1>=0,Out=0] 
* CE 333: proper(V1,Out) = 1
     [Out=3,V1=2] 
* CE 334: proper(V1,Out) = 1
     [Out=2,V1=1] 
* CE 335: proper(V1,Out) = 1
     [Out=1,V1=0] 

### Cost equations --> "Loop" of proper/2 
* CEs [332] --> Loop 276 
* CEs [333] --> Loop 277 
* CEs [334] --> Loop 278 
* CEs [335] --> Loop 279 

#### Loops of proper/2 
* Loop 276: proper(V1,Out) [V1>=0,Out=0] 
* Loop 277: proper(V1,Out) [Out=3,V1=2] 
* Loop 278: proper(V1,Out) [Out=2,V1=1] 
* Loop 279: proper(V1,Out) [Out=1,V1=0] 

### Ranking functions of CR proper(V1,Out) 

#### Partial ranking functions of CR proper(V1,Out) 


### Resulting Chains:proper(V1,Out) 
* [279]
* [278]
* [277]
* [276]


### Merging Chains  proper/2 into  External patterns of execution 
* [[279]] --> 1 
* [[278]] --> 2 
* [[277]] --> 3 
* [[276]] --> 4 


### Specialization of cost equations s/2 
* CE 151 is refined into CE [336] 
* CE 150 is refined into CE [337] 


#### Refined cost equations s/2 
* CE 336: s(V1,Out) = 0
     [V1>=0,Out=0] 
* CE 337: s(V1,Out) = 1+ s(W1,X1)
     [W1>=0,X1+1=Out,W1+1=V1] 

### Cost equations --> "Loop" of s/2 
* CEs [337] --> Loop 280 
* CEs [336] --> Loop 281 

#### Loops of s/2 
* Loop 280: s(V1,Out)->  s(V1',Out')
                  [V1'>=0,Out=Out'+1,V1'+1=V1] 
* Loop 281: s(V1,Out) [V1>=0,Out=0] 

### Ranking functions of CR s(V1,Out) 
* RF of phase [280]: [V1]

#### Partial ranking functions of CR s(V1,Out) 
* Partial RF of phase [280]:
  - RF of loop [280:1]:
    V1


### Resulting Chains:s(V1,Out) 
* [[280],281]
* [281]


### Merging Chains  s/2 into  External patterns of execution 
* [[281]] --> 1 
* [[281,[280]]] --> 2 


### Specialization of cost equations sel/3 
* CE 77 is refined into CE [338] 
* CE 76 is refined into CE [339] 
* CE 75 is refined into CE [340] 
* CE 74 is refined into CE [341] 


#### Refined cost equations sel/3 
* CE 338: sel(V1,V,Out) = 0
     [V>=0,V1>=0,Out=0] 
* CE 339: sel(V1,V,Out) = 1+ sel(V1,W1,X1)
     [W1>=0,V1>=0,X1+1=Out,W1+1=V] 
* CE 340: sel(V1,V,Out) = 1+ sel(W1,V,X1)
     [W1>=0,V>=0,X1+1=Out,W1+1=V1] 
* CE 341: sel(V1,V,Out) = 1+ sel(W1,X1,Y1)
     [X1>=0,W1>=0,Y1+1=Out,X1+1=V,W1+1=V1] 

### Cost equations --> "Loop" of sel/3 
* CEs [339] --> Loop 282 
* CEs [340] --> Loop 283 
* CEs [341] --> Loop 284 
* CEs [338] --> Loop 285 

#### Loops of sel/3 
* Loop 282: sel(V1,V,Out)->  sel(V1,V',Out')
                  [V>=1,V1>=0,Out=Out'+1,V=V'+1] 
* Loop 283: sel(V1,V,Out)->  sel(V1',V,Out')
                  [V>=0,V1>=1,Out=Out'+1,V1=V1'+1] 
* Loop 284: sel(V1,V,Out)->  sel(V1',V',Out')
                  [V>=1,V1>=1,Out=Out'+1,V=V'+1,V1=V1'+1] 
* Loop 285: sel(V1,V,Out) [V>=0,V1>=0,Out=0] 

### Ranking functions of CR sel(V1,V,Out) 
* RF of phase [282,283,284]: [V1+V]

#### Partial ranking functions of CR sel(V1,V,Out) 
* Partial RF of phase [282,283,284]:
  - RF of loop [282:1,284:1]:
    V
  - RF of loop [283:1,284:1]:
    V1


### Resulting Chains:sel(V1,V,Out) 
* [[282,283,284],285]
* [285]


### Merging Chains  sel/3 into  External patterns of execution 
* [[285]] --> 1 
* [[285,[282,283,284]]] --> 2 


### Specialization of cost equations snd/2 
* CE 170 is refined into CE [342] 
* CE 169 is refined into CE [343] 


#### Refined cost equations snd/2 
* CE 342: snd(V1,Out) = 0
     [V1>=0,Out=0] 
* CE 343: snd(V1,Out) = 1+ snd(W1,X1)
     [W1>=0,X1+1=Out,W1+1=V1] 

### Cost equations --> "Loop" of snd/2 
* CEs [343] --> Loop 286 
* CEs [342] --> Loop 287 

#### Loops of snd/2 
* Loop 286: snd(V1,Out)->  snd(V1',Out')
                  [V1'>=0,Out=Out'+1,V1'+1=V1] 
* Loop 287: snd(V1,Out) [V1>=0,Out=0] 

### Ranking functions of CR snd(V1,Out) 
* RF of phase [286]: [V1]

#### Partial ranking functions of CR snd(V1,Out) 
* Partial RF of phase [286]:
  - RF of loop [286:1]:
    V1


### Resulting Chains:snd(V1,Out) 
* [[286],287]
* [287]


### Merging Chains  snd/2 into  External patterns of execution 
* [[287]] --> 1 
* [[287,[286]]] --> 2 


### Specialization of cost equations splitAt/3 
* CE 103 is refined into CE [344] 
* CE 100 is refined into CE [345] 
* CE 101 is refined into CE [346] 
* CE 102 is refined into CE [347] 


#### Refined cost equations splitAt/3 
* CE 344: splitAt(V1,V,Out) = 0
     [V>=0,V1>=0,Out=0] 
* CE 345: splitAt(V1,V,Out) = 1+ splitAt(V1,W1,X1)
     [W1>=0,V1>=0,X1+1=Out,W1+1=V] 
* CE 346: splitAt(V1,V,Out) = 1+ splitAt(W1,V,X1)
     [W1>=0,V>=0,X1+1=Out,W1+1=V1] 
* CE 347: splitAt(V1,V,Out) = 1+ splitAt(W1,X1,Y1)
     [X1>=0,W1>=0,Y1+1=Out,X1+1=V,W1+1=V1] 

### Cost equations --> "Loop" of splitAt/3 
* CEs [345] --> Loop 288 
* CEs [346] --> Loop 289 
* CEs [347] --> Loop 290 
* CEs [344] --> Loop 291 

#### Loops of splitAt/3 
* Loop 288: splitAt(V1,V,Out)->  splitAt(V1,V',Out')
                  [V>=1,V1>=0,Out=Out'+1,V=V'+1] 
* Loop 289: splitAt(V1,V,Out)->  splitAt(V1',V,Out')
                  [V>=0,V1>=1,Out=Out'+1,V1=V1'+1] 
* Loop 290: splitAt(V1,V,Out)->  splitAt(V1',V',Out')
                  [V>=1,V1>=1,Out=Out'+1,V=V'+1,V1=V1'+1] 
* Loop 291: splitAt(V1,V,Out) [V>=0,V1>=0,Out=0] 

### Ranking functions of CR splitAt(V1,V,Out) 
* RF of phase [288,289,290]: [V1+V]

#### Partial ranking functions of CR splitAt(V1,V,Out) 
* Partial RF of phase [288,289,290]:
  - RF of loop [288:1,290:1]:
    V
  - RF of loop [289:1,290:1]:
    V1


### Resulting Chains:splitAt(V1,V,Out) 
* [[288,289,290],291]
* [291]


### Merging Chains  splitAt/3 into  External patterns of execution 
* [[291]] --> 1 
* [[291,[288,289,290]]] --> 2 


### Specialization of cost equations tail/2 
* CE 116 is refined into CE [348] 
* CE 115 is refined into CE [349] 


#### Refined cost equations tail/2 
* CE 348: tail(V1,Out) = 0
     [V1>=0,Out=0] 
* CE 349: tail(V1,Out) = 1+ tail(W1,X1)
     [W1>=0,X1+1=Out,W1+1=V1] 

### Cost equations --> "Loop" of tail/2 
* CEs [349] --> Loop 292 
* CEs [348] --> Loop 293 

#### Loops of tail/2 
* Loop 292: tail(V1,Out)->  tail(V1',Out')
                  [V1'>=0,Out=Out'+1,V1'+1=V1] 
* Loop 293: tail(V1,Out) [V1>=0,Out=0] 

### Ranking functions of CR tail(V1,Out) 
* RF of phase [292]: [V1]

#### Partial ranking functions of CR tail(V1,Out) 
* Partial RF of phase [292]:
  - RF of loop [292:1]:
    V1


### Resulting Chains:tail(V1,Out) 
* [[292],293]
* [293]


### Merging Chains  tail/2 into  External patterns of execution 
* [[293]] --> 1 
* [[293,[292]]] --> 2 


### Specialization of cost equations take/3 
* CE 134 is refined into CE [350] 
* CE 131 is refined into CE [351] 
* CE 132 is refined into CE [352] 
* CE 133 is refined into CE [353] 


#### Refined cost equations take/3 
* CE 350: take(V1,V,Out) = 0
     [V>=0,V1>=0,Out=0] 
* CE 351: take(V1,V,Out) = 1+ take(V1,W1,X1)
     [W1>=0,V1>=0,X1+1=Out,W1+1=V] 
* CE 352: take(V1,V,Out) = 1+ take(W1,V,X1)
     [W1>=0,V>=0,X1+1=Out,W1+1=V1] 
* CE 353: take(V1,V,Out) = 1+ take(W1,X1,Y1)
     [X1>=0,W1>=0,Y1+1=Out,X1+1=V,W1+1=V1] 

### Cost equations --> "Loop" of take/3 
* CEs [351] --> Loop 294 
* CEs [352] --> Loop 295 
* CEs [353] --> Loop 296 
* CEs [350] --> Loop 297 

#### Loops of take/3 
* Loop 294: take(V1,V,Out)->  take(V1,V',Out')
                  [V>=1,V1>=0,Out=Out'+1,V=V'+1] 
* Loop 295: take(V1,V,Out)->  take(V1',V,Out')
                  [V>=0,V1>=1,Out=Out'+1,V1=V1'+1] 
* Loop 296: take(V1,V,Out)->  take(V1',V',Out')
                  [V>=1,V1>=1,Out=Out'+1,V=V'+1,V1=V1'+1] 
* Loop 297: take(V1,V,Out) [V>=0,V1>=0,Out=0] 

### Ranking functions of CR take(V1,V,Out) 
* RF of phase [294,295,296]: [V1+V]

#### Partial ranking functions of CR take(V1,V,Out) 
* Partial RF of phase [294,295,296]:
  - RF of loop [294:1,296:1]:
    V
  - RF of loop [295:1,296:1]:
    V1


### Resulting Chains:take(V1,V,Out) 
* [[294,295,296],297]
* [297]


### Merging Chains  take/3 into  External patterns of execution 
* [[297]] --> 1 
* [[297,[294,295,296]]] --> 2 


### Specialization of cost equations top/2 
* CE 62 is refined into CE [354] 
* CE 60 is refined into CE [355] 
* CE 61 is refined into CE [356,357,358,359] 


#### Refined cost equations top/2 
* CE 354: top(V1,Out) = 0
     [V1>=0,Out=0] 
* CE 355: top(V1,Out) = 1+ top(V1,Out)
     [V1>=1] 
* CE 356: top(V1,Out) = 1+ proper(W1,X1):1+ top(Y1,Out)
     [Y1=1,X1=1,W1=0,V1=1] 
* CE 357: top(V1,Out) = 1+ proper(W1,X1):2+ top(Y1,Out)
     [Y1=2,X1=2,W1=1,V1=2] 
* CE 358: top(V1,Out) = 1+ proper(W1,X1):3+ top(Y1,Out)
     [Y1=3,X1=3,W1=2,V1=3] 
* CE 359: top(V1,Out) = 1+ proper(W1,X1):4+ top(Y1,Out)
     [W1>=0,W1+1=V1,Y1=0,X1=0] 

### Cost equations --> "Loop" of top/2 
* CEs [359] --> Loop 298 
* CEs [358] --> Loop 299 
* CEs [357] --> Loop 300 
* CEs [355,356] --> Loop 301 
* CEs [354] --> Loop 302 

#### Loops of top/2 
* Loop 298: top(V1,Out)->  top(V1',Out)
                  [V1>=1,V1'=0] 
* Loop 299: top(V1,Out)->  top(V1',Out)
                  [V1'=3,V1=3] 
* Loop 300: top(V1,Out)->  top(V1',Out)
                  [V1'=2,V1=2] 
* Loop 301: top(V1,Out)->  top(V1,Out)
                  [V1>=1] 
* Loop 302: top(V1,Out) [V1>=0,Out=0] 

### Ranking functions of CR top(V1,Out) 

#### Partial ranking functions of CR top(V1,Out) 


### Resulting Chains:top(V1,Out) 
* [[299,300,301]]...
* [[299,300,301],302]
* [[299,300,301],298,302]
* [302]
* [298,302]


### Merging Chains  top/2 into  External patterns of execution 
* [[302,298],[302],[302,298,[299,300,301]],[302,[299,300,301]]] --> 1 
* [[[299,300,301]]] --> 2 


### Specialization of cost equations start/4 
* CE 2 is refined into CE [360,361] 
* CE 3 is refined into CE [362,363] 
* CE 4 is refined into CE [364,365] 
* CE 5 is refined into CE [366,367] 
* CE 6 is refined into CE [368,369] 
* CE 7 is refined into CE [370,371] 
* CE 8 is refined into CE [372,373] 
* CE 9 is refined into CE [374,375] 
* CE 10 is refined into CE [376,377] 
* CE 11 is refined into CE [378,379] 
* CE 12 is refined into CE [380,381] 
* CE 13 is refined into CE [382,383,384,385] 
* CE 14 is refined into CE [386,387] 
* CE 15 is refined into CE [388,389] 
* CE 16 is refined into CE [390,391] 
* CE 17 is refined into CE [392,393] 
* CE 18 is refined into CE [394,395] 
* CE 19 is refined into CE [396,397] 
* CE 20 is refined into CE [398,399] 
* CE 21 is refined into CE [400,401] 
* CE 22 is refined into CE [402,403] 
* CE 23 is refined into CE [404,405] 
* CE 24 is refined into CE [406,407] 
* CE 25 is refined into CE [408,409] 
* CE 26 is refined into CE [410,411] 
* CE 27 is refined into CE [412,413] 
* CE 28 is refined into CE [414,415] 
* CE 29 is refined into CE [416,417] 
* CE 30 is refined into CE [418,419] 
* CE 31 is refined into CE [420,421] 
* CE 32 is refined into CE [422,423] 
* CE 33 is refined into CE [424,425] 
* CE 34 is refined into CE [426,427] 
* CE 35 is refined into CE [428,429] 
* CE 36 is refined into CE [430,431] 
* CE 37 is refined into CE [432,433] 
* CE 38 is refined into CE [434,435] 
* CE 39 is refined into CE [436,437] 
* CE 40 is refined into CE [438,439] 
* CE 41 is refined into CE [440,441] 
* CE 42 is refined into CE [442,443] 
* CE 43 is refined into CE [444,445] 
* CE 44 is refined into CE [446,447] 
* CE 45 is refined into CE [448,449] 
* CE 46 is refined into CE [450,451] 
* CE 47 is refined into CE [452,453] 
* CE 48 is refined into CE [454,455] 
* CE 49 is refined into CE [456,457] 
* CE 50 is refined into CE [458,459] 
* CE 51 is refined into CE [460,461] 
* CE 52 is refined into CE [462,463] 
* CE 53 is refined into CE [464,465] 
* CE 54 is refined into CE [466,467] 
* CE 55 is refined into CE [468,469] 
* CE 56 is refined into CE [470,471] 


#### Refined cost equations start/4 
* CE 360: start(V1,V,V2,V3) = 0+ fun(V1,V,V2,V3,W3):1
     [V3>=0,V2>=0,V>=0,V1>=0,W3=0] 
* CE 361: start(V1,V,V2,V3) = 0+ fun(V1,V,V2,V3,W3):2
     [V1>=W3,W3>=1,V3>=0,V2>=0,V>=0] 
* CE 362: start(V1,V,V2,V3) = 0+ top(V1,W3):1
     [V1>=0,W3=0] 
* CE 363: start(V1,V,V2,V3) = 0+ top(V1,W3):2
     [V1>=1] 
* CE 364: start(V1,V,V2,V3) = 0+ fun1(V1,W3):1
     [V1>=0,W3=0] 
* CE 365: start(V1,V,V2,V3) = 0+ fun1(V1,W3):2
     [V1>=W3,W3>=1] 
* CE 366: start(V1,V,V2,V3) = 0+ fun2(V1,W3):1
     [V1>=0,W3=0] 
* CE 367: start(V1,V,V2,V3) = 0+ fun2(V1,W3):2
     [V1>=W3,W3>=1] 
* CE 368: start(V1,V,V2,V3) = 0+ pair(V1,V,W3):1
     [V>=0,V1>=0,W3=0] 
* CE 369: start(V1,V,V2,V3) = 0+ pair(V1,V,W3):2
     [V1+V>=W3,W3>=1,V>=0,V1>=0] 
* CE 370: start(V1,V,V2,V3) = 0+ fun3(V1,V,W3):1
     [V>=0,V1>=0,W3=0] 
* CE 371: start(V1,V,V2,V3) = 0+ fun3(V1,V,W3):2
     [V1>=W3,W3>=1,V>=0] 
* CE 372: start(V1,V,V2,V3) = 0+ sel(V1,V,W3):1
     [V>=0,V1>=0,W3=0] 
* CE 373: start(V1,V,V2,V3) = 0+ sel(V1,V,W3):2
     [V1+V>=W3,W3>=1,V>=0,V1>=0] 
* CE 374: start(V1,V,V2,V3) = 0+ fun4(V1,W3):1
     [V1>=0,W3=0] 
* CE 375: start(V1,V,V2,V3) = 0+ fun4(V1,W3):2
     [V1>=W3,W3>=1] 
* CE 376: start(V1,V,V2,V3) = 0+ fun5(V1,V,W3):1
     [V>=0,V1>=0,W3=0] 
* CE 377: start(V1,V,V2,V3) = 0+ fun5(V1,V,W3):2
     [V1>=W3,W3>=1,V>=0] 
* CE 378: start(V1,V,V2,V3) = 0+ fun6(V1,W3):1
     [V1>=0,W3=0] 
* CE 379: start(V1,V,V2,V3) = 0+ fun6(V1,W3):2
     [V1>=W3,W3>=1] 
* CE 380: start(V1,V,V2,V3) = 0+ fun7(V1,W3):1
     [V1>=0,W3=0] 
* CE 381: start(V1,V,V2,V3) = 0+ fun7(V1,W3):2
     [V1>=W3,W3>=1] 
* CE 382: start(V1,V,V2,V3) = 0+ proper(W3,X3):1
     [X3=1,W3=0,V1=0] 
* CE 383: start(V1,V,V2,V3) = 0+ proper(W3,X3):2
     [X3=2,W3=1,V1=1] 
* CE 384: start(V1,V,V2,V3) = 0+ proper(W3,X3):3
     [X3=3,W3=2,V1=2] 
* CE 385: start(V1,V,V2,V3) = 0+ proper(V1,W3):4
     [V1>=0,W3=0] 
* CE 386: start(V1,V,V2,V3) = 0+ fun8(V1,V,V2,W3):1
     [V2>=0,V>=0,V1>=0,W3=0] 
* CE 387: start(V1,V,V2,V3) = 0+ fun8(V1,V,V2,W3):2
     [V1>=W3,W3>=1,V2>=0,V>=0] 
* CE 388: start(V1,V,V2,V3) = 0+ fun9(V1,V,V2,V3,W3):1
     [V3>=0,V2>=0,V>=0,V1>=0,W3=0] 
* CE 389: start(V1,V,V2,V3) = 0+ fun9(V1,V,V2,V3,W3):2
     [V1>=W3,W3>=1,V3>=0,V2>=0,V>=0] 
* CE 390: start(V1,V,V2,V3) = 0+ fun10(V1,V,V2,V3,W3):1
     [V3>=0,V2>=0,V>=0,V1>=0,W3=0] 
* CE 391: start(V1,V,V2,V3) = 0+ fun10(V1,V,V2,V3,W3):2
     [V1>=W3,W3>=1,V3>=0,V2>=0,V>=0] 
* CE 392: start(V1,V,V2,V3) = 0+ splitAt(V1,V,W3):1
     [V>=0,V1>=0,W3=0] 
* CE 393: start(V1,V,V2,V3) = 0+ splitAt(V1,V,W3):2
     [V1+V>=W3,W3>=1,V>=0,V1>=0] 
* CE 394: start(V1,V,V2,V3) = 0+ head(V1,W3):1
     [V1>=0,W3=0] 
* CE 395: start(V1,V,V2,V3) = 0+ head(V1,W3):2
     [V1>=W3,W3>=1] 
* CE 396: start(V1,V,V2,V3) = 0+ fun11(V1,V,W3):1
     [V>=0,V1>=0,W3=0] 
* CE 397: start(V1,V,V2,V3) = 0+ fun11(V1,V,W3):2
     [V1>=W3,W3>=1,V>=0] 
* CE 398: start(V1,V,V2,V3) = 0+ fst(V1,W3):1
     [V1>=0,W3=0] 
* CE 399: start(V1,V,V2,V3) = 0+ fst(V1,W3):2
     [V1>=W3,W3>=1] 
* CE 400: start(V1,V,V2,V3) = 0+ afterNth(V1,V,W3):1
     [V>=0,V1>=0,W3=0] 
* CE 401: start(V1,V,V2,V3) = 0+ afterNth(V1,V,W3):2
     [V1+V>=W3,W3>=1,V>=0,V1>=0] 
* CE 402: start(V1,V,V2,V3) = 0+ tail(V1,W3):1
     [V1>=0,W3=0] 
* CE 403: start(V1,V,V2,V3) = 0+ tail(V1,W3):2
     [V1>=W3,W3>=1] 
* CE 404: start(V1,V,V2,V3) = 0+ fun12(V1,V,V2,W3):1
     [V2>=0,V>=0,V1>=0,W3=0] 
* CE 405: start(V1,V,V2,V3) = 0+ fun12(V1,V,V2,W3):2
     [V1>=W3,W3>=1,V2>=0,V>=0] 
* CE 406: start(V1,V,V2,V3) = 0+ fun13(V1,W3):1
     [V1>=0,W3=0] 
* CE 407: start(V1,V,V2,V3) = 0+ fun13(V1,W3):2
     [V1>=W3,W3>=1] 
* CE 408: start(V1,V,V2,V3) = 0+ fun14(V1,V,W3):1
     [V>=0,V1>=0,W3=0] 
* CE 409: start(V1,V,V2,V3) = 0+ fun14(V1,V,W3):2
     [V1>=W3,W3>=1,V>=0] 
* CE 410: start(V1,V,V2,V3) = 0+ fun15(V1,V,V2,W3):1
     [V2>=0,V>=0,V1>=0,W3=0] 
* CE 411: start(V1,V,V2,V3) = 0+ fun15(V1,V,V2,W3):2
     [V1>=W3,W3>=1,V2>=0,V>=0] 
* CE 412: start(V1,V,V2,V3) = 0+ fun16(V1,V,W3):1
     [V>=0,V1>=0,W3=0] 
* CE 413: start(V1,V,V2,V3) = 0+ fun16(V1,V,W3):2
     [V1>=W3,W3>=1,V>=0] 
* CE 414: start(V1,V,V2,V3) = 0+ take(V1,V,W3):1
     [V>=0,V1>=0,W3=0] 
* CE 415: start(V1,V,V2,V3) = 0+ take(V1,V,W3):2
     [V1+V>=W3,W3>=1,V>=0,V1>=0] 
* CE 416: start(V1,V,V2,V3) = 0+ fun17(V1,W3):1
     [V1>=0,W3=0] 
* CE 417: start(V1,V,V2,V3) = 0+ fun17(V1,W3):2
     [V1>=W3,W3>=1] 
* CE 418: start(V1,V,V2,V3) = 0+ fun18(V1,W3):1
     [V1>=0,W3=0] 
* CE 419: start(V1,V,V2,V3) = 0+ fun18(V1,W3):2
     [V1>=W3,W3>=1] 
* CE 420: start(V1,V,V2,V3) = 0+ fun19(V1,V,W3):1
     [V>=0,V1>=0,W3=0] 
* CE 421: start(V1,V,V2,V3) = 0+ fun19(V1,V,W3):2
     [V1>=W3,W3>=1,V>=0] 
* CE 422: start(V1,V,V2,V3) = 0+ natsFrom(V1,W3):1
     [V1>=0,W3=0] 
* CE 423: start(V1,V,V2,V3) = 0+ natsFrom(V1,W3):2
     [V1>=W3,W3>=1] 
* CE 424: start(V1,V,V2,V3) = 0+ fun20(V1,V,V2,W3):1
     [V2>=0,V>=0,V1>=0,W3=0] 
* CE 425: start(V1,V,V2,V3) = 0+ fun20(V1,V,V2,W3):2
     [V1>=W3,W3>=1,V2>=0,V>=0] 
* CE 426: start(V1,V,V2,V3) = 0+ fun21(V1,V,W3):1
     [V>=0,V1>=0,W3=0] 
* CE 427: start(V1,V,V2,V3) = 0+ fun21(V1,V,W3):2
     [V1>=W3,W3>=1,V>=0] 
* CE 428: start(V1,V,V2,V3) = 0+ s(V1,W3):1
     [V1>=0,W3=0] 
* CE 429: start(V1,V,V2,V3) = 0+ s(V1,W3):2
     [V1>=W3,W3>=1] 
* CE 430: start(V1,V,V2,V3) = 0+ cons(V1,V,W3):1
     [V>=0,V1>=0,W3=0] 
* CE 431: start(V1,V,V2,V3) = 0+ cons(V1,V,W3):2
     [V1>=W3,W3>=1,V>=0] 
* CE 432: start(V1,V,V2,V3) = 0+ fun22(V1,V,V2,W3):1
     [V2>=0,V>=0,V1>=0,W3=0] 
* CE 433: start(V1,V,V2,V3) = 0+ fun22(V1,V,V2,W3):2
     [V1>=W3,W3>=1,V2>=0,V>=0] 
* CE 434: start(V1,V,V2,V3) = 0+ isNatural(V1,W3):1
     [V1>=0,W3=0] 
* CE 435: start(V1,V,V2,V3) = 0+ isNatural(V1,W3):2
     [V1>=W3,W3>=1] 
* CE 436: start(V1,V,V2,V3) = 0+ fun23(V1,V,V2,W3):1
     [V2>=0,V>=0,V1>=0,W3=0] 
* CE 437: start(V1,V,V2,V3) = 0+ fun23(V1,V,V2,W3):2
     [V1>=W3,W3>=1,V2>=0,V>=0] 
* CE 438: start(V1,V,V2,V3) = 0+ fun24(V1,V,W3):1
     [V>=0,V1>=0,W3=0] 
* CE 439: start(V1,V,V2,V3) = 0+ fun24(V1,V,W3):2
     [V1>=W3,W3>=1,V>=0] 
* CE 440: start(V1,V,V2,V3) = 0+ fun25(V1,V,W3):1
     [V>=0,V1>=0,W3=0] 
* CE 441: start(V1,V,V2,V3) = 0+ fun25(V1,V,W3):2
     [V1>=W3,W3>=1,V>=0] 
* CE 442: start(V1,V,V2,V3) = 0+ snd(V1,W3):1
     [V1>=0,W3=0] 
* CE 443: start(V1,V,V2,V3) = 0+ snd(V1,W3):2
     [V1>=W3,W3>=1] 
* CE 444: start(V1,V,V2,V3) = 0+ fun26(V1,V,W3):1
     [V>=0,V1>=0,W3=0] 
* CE 445: start(V1,V,V2,V3) = 0+ fun26(V1,V,W3):2
     [V1>=W3,W3>=1,V>=0] 
* CE 446: start(V1,V,V2,V3) = 0+ fun27(V1,V,V2,W3):1
     [V2>=0,V>=0,V1>=0,W3=0] 
* CE 447: start(V1,V,V2,V3) = 0+ fun27(V1,V,V2,W3):2
     [V1>=W3,W3>=1,V2>=0,V>=0] 
* CE 448: start(V1,V,V2,V3) = 0+ isPLNat(V1,W3):1
     [V1>=0,W3=0] 
* CE 449: start(V1,V,V2,V3) = 0+ isPLNat(V1,W3):2
     [V1>=W3,W3>=1] 
* CE 450: start(V1,V,V2,V3) = 0+ fun28(V1,V,V2,W3):1
     [V2>=0,V>=0,V1>=0,W3=0] 
* CE 451: start(V1,V,V2,V3) = 0+ fun28(V1,V,V2,W3):2
     [V1>=W3,W3>=1,V2>=0,V>=0] 
* CE 452: start(V1,V,V2,V3) = 0+ fun29(V1,W3):1
     [V1>=0,W3=0] 
* CE 453: start(V1,V,V2,V3) = 0+ fun29(V1,W3):2
     [V1>=W3,W3>=1] 
* CE 454: start(V1,V,V2,V3) = 0+ fun30(V1,V,W3):1
     [V>=0,V1>=0,W3=0] 
* CE 455: start(V1,V,V2,V3) = 0+ fun30(V1,V,W3):2
     [V1>=W3,W3>=1,V>=0] 
* CE 456: start(V1,V,V2,V3) = 0+ fun31(V1,W3):1
     [V1>=0,W3=0] 
* CE 457: start(V1,V,V2,V3) = 0+ fun31(V1,W3):2
     [V1>=W3,W3>=1] 
* CE 458: start(V1,V,V2,V3) = 0+ fun32(V1,V,W3):1
     [V>=0,V1>=0,W3=0] 
* CE 459: start(V1,V,V2,V3) = 0+ fun32(V1,V,W3):2
     [V1>=W3,W3>=1,V>=0] 
* CE 460: start(V1,V,V2,V3) = 0+ fun33(V1,W3):1
     [V1>=0,W3=0] 
* CE 461: start(V1,V,V2,V3) = 0+ fun33(V1,W3):2
     [V1>=W3,W3>=1] 
* CE 462: start(V1,V,V2,V3) = 0+ fun34(V1,W3):1
     [V1>=0,W3=0] 
* CE 463: start(V1,V,V2,V3) = 0+ fun34(V1,W3):2
     [V1>=W3,W3>=1] 
* CE 464: start(V1,V,V2,V3) = 0+ fun35(V1,V,W3):1
     [V>=0,V1>=0,W3=0] 
* CE 465: start(V1,V,V2,V3) = 0+ fun35(V1,V,W3):2
     [V1>=W3,W3>=1,V>=0] 
* CE 466: start(V1,V,V2,V3) = 0+ fun36(V1,V,W3):1
     [V>=0,V1>=0,W3=0] 
* CE 467: start(V1,V,V2,V3) = 0+ fun36(V1,V,W3):2
     [V1>=W3,W3>=1,V>=0] 
* CE 468: start(V1,V,V2,V3) = 0+ fun37(V1,V,W3):1
     [V>=0,V1>=0,W3=0] 
* CE 469: start(V1,V,V2,V3) = 0+ fun37(V1,V,W3):2
     [V1>=W3,W3>=1,V>=0] 
* CE 470: start(V1,V,V2,V3) = 0+ isLNat(V1,W3):1
     [V1>=0,W3=0] 
* CE 471: start(V1,V,V2,V3) = 0+ isLNat(V1,W3):2
     [V1>=W3,W3>=1] 

### Cost equations --> "Loop" of start/4 
* CEs [384] --> Loop 303 
* CEs [383] --> Loop 304 
* CEs [360,361,362,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471] --> Loop 305 
* CEs [363] --> Loop 306 

#### Loops of start/4 
* Loop 303: start(V1,V,V2,V3) [V1=2] 
* Loop 304: start(V1,V,V2,V3) [V1=1] 
* Loop 305: start(V1,V,V2,V3) [V1>=0] 
* Loop 306: start(V1,V,V2,V3) [V1>=1] 

### Ranking functions of CR start(V1,V,V2,V3) 

#### Partial ranking functions of CR start(V1,V,V2,V3) 


### Resulting Chains:start(V1,V,V2,V3) 
* [306]...
* [305]
* [304]
* [303]


### Merging Chains  start/4 into  External patterns of execution 
* [[304],[305]] --> 1 
* [[303]] --> 2 
* [[306]] --> 3 


Computing Bounds
=====================================

#### Cost of loops [151,152,153] 

 * loop 151:afterNth(V1,V,Out) -> [afterNth(V1',V',Out')] 
1
 * loop 152:afterNth(V1,V,Out) -> [afterNth(V1',V',Out')] 
1
 * loop 153:afterNth(V1,V,Out) -> [afterNth(V1',V',Out')] 
1
#### Cost of phase [151,152,153]:afterNth(V1,V,Out) -> [afterNth(V1',V',Out')] 
1*it(151)+1*it(152)+1*it(153)+0
  Such that:aux(1) =< V1
aux(2) =< V1+V
aux(3) =< V1+V-V1'-V'
aux(4) =< V1-V1'
aux(5) =< V
aux(6) =< V-V'
it(152) =< aux(1)
it(153) =< aux(1)
it(151) =< aux(2)
it(152) =< aux(2)
it(153) =< aux(2)
it(151) =< aux(3)
it(152) =< aux(3)
it(153) =< aux(3)
it(152) =< aux(4)
it(153) =< aux(4)
it(151) =< aux(5)
it(153) =< aux(5)
it(151) =< aux(6)
it(153) =< aux(6)

#### Cost of chains of afterNth(V1,V,Out):
* Chain [[151,152,153],154]: 1*it(151)+1*it(152)+1*it(153)+0
  Such that:aux(7) =< V1
aux(8) =< V1+V
aux(9) =< V
it(152) =< aux(7)
it(153) =< aux(7)
it(151) =< aux(8)
it(152) =< aux(8)
it(153) =< aux(8)
it(151) =< aux(9)
it(153) =< aux(9)

  with precondition: [V1>=0,V>=0,Out>=1,V+V1>=Out] 

* Chain [154]: 0
  with precondition: [Out=0,V1>=0,V>=0] 


#### Cost of loops [155,156] 

 * loop 155:cons(V1,V,Out) -> [cons(V1',V',Out')] 
1
 * loop 156:cons(V1,V,Out) -> [cons(V1',V',Out')] 
1
#### Cost of phase [155,156]:cons(V1,V,Out) -> [cons(V1',V',Out')] 
1*it(155)+1*it(156)+0
  Such that:it(156) =< V
it(156) =< V-V'
aux(10) =< V1
aux(11) =< V1-V1'
it(155) =< aux(10)
it(156) =< aux(10)
it(155) =< aux(11)
it(156) =< aux(11)

#### Cost of chains of cons(V1,V,Out):
* Chain [[155,156],157]: 1*it(155)+1*it(156)+0
  Such that:aux(10) =< V1
it(156) =< V
aux(11) =< Out
it(155) =< aux(10)
it(156) =< aux(10)
it(155) =< aux(11)
it(156) =< aux(11)

  with precondition: [V>=0,Out>=1,V1>=Out] 

* Chain [157]: 0
  with precondition: [Out=0,V1>=0,V>=0] 


#### Cost of loops [158] 

 * loop 158:fst(V1,Out) -> [fst(V1',Out')] 
1
#### Cost of phase [158]:fst(V1,Out) -> [fst(V1',Out')] 
1*it(158)+0
  Such that:it(158) =< V1
it(158) =< V1-V1'

#### Cost of chains of fst(V1,Out):
* Chain [[158],159]: 1*it(158)+0
  Such that:it(158) =< Out

  with precondition: [Out>=1,V1>=Out] 

* Chain [159]: 0
  with precondition: [Out=0,V1>=0] 


#### Cost of loops [160,161] 

 * loop 160:fun(V1,V,V2,V3,Out) -> [fun(V1',V',V2',V3',Out')] 
1
 * loop 161:fun(V1,V,V2,V3,Out) -> [fun(V1',V',V2',V3',Out')] 
1
#### Cost of phase [160,161]:fun(V1,V,V2,V3,Out) -> [fun(V1',V',V2',V3',Out')] 
1*it(160)+1*it(161)+0
  Such that:it(161) =< V
it(161) =< V-V'
it(161) =< V2
it(161) =< V2-V2'
it(161) =< V3
it(161) =< V3-V3'
aux(12) =< V1
aux(13) =< V1-V1'
it(160) =< aux(12)
it(161) =< aux(12)
it(160) =< aux(13)
it(161) =< aux(13)

#### Cost of chains of fun(V1,V,V2,V3,Out):
* Chain [[160,161],162]: 1*it(160)+1*it(161)+0
  Such that:aux(12) =< V1
it(161) =< V
aux(13) =< Out
it(160) =< aux(12)
it(161) =< aux(12)
it(160) =< aux(13)
it(161) =< aux(13)

  with precondition: [V>=0,V2>=0,V3>=0,Out>=1,V1>=Out] 

* Chain [162]: 0
  with precondition: [Out=0,V1>=0,V>=0,V2>=0,V3>=0] 


#### Cost of loops [163] 

 * loop 163:fun1(V1,Out) -> [fun1(V1',Out')] 
1
#### Cost of phase [163]:fun1(V1,Out) -> [fun1(V1',Out')] 
1*it(163)+0
  Such that:it(163) =< V1
it(163) =< V1-V1'

#### Cost of chains of fun1(V1,Out):
* Chain [[163],164]: 1*it(163)+0
  Such that:it(163) =< Out

  with precondition: [Out>=1,V1>=Out] 

* Chain [164]: 0
  with precondition: [Out=0,V1>=0] 


#### Cost of loops [165,166] 

 * loop 165:fun10(V1,V,V2,V3,Out) -> [fun10(V1',V',V2',V3',Out')] 
1
 * loop 166:fun10(V1,V,V2,V3,Out) -> [fun10(V1',V',V2',V3',Out')] 
1
#### Cost of phase [165,166]:fun10(V1,V,V2,V3,Out) -> [fun10(V1',V',V2',V3',Out')] 
1*it(165)+1*it(166)+0
  Such that:it(166) =< V
it(166) =< V-V'
it(166) =< V2
it(166) =< V2-V2'
it(166) =< V3
it(166) =< V3-V3'
aux(14) =< V1
aux(15) =< V1-V1'
it(165) =< aux(14)
it(166) =< aux(14)
it(165) =< aux(15)
it(166) =< aux(15)

#### Cost of chains of fun10(V1,V,V2,V3,Out):
* Chain [[165,166],167]: 1*it(165)+1*it(166)+0
  Such that:aux(14) =< V1
it(166) =< V
aux(15) =< Out
it(165) =< aux(14)
it(166) =< aux(14)
it(165) =< aux(15)
it(166) =< aux(15)

  with precondition: [V>=0,V2>=0,V3>=0,Out>=1,V1>=Out] 

* Chain [167]: 0
  with precondition: [Out=0,V1>=0,V>=0,V2>=0,V3>=0] 


#### Cost of loops [168,169] 

 * loop 168:fun11(V1,V,Out) -> [fun11(V1',V',Out')] 
1
 * loop 169:fun11(V1,V,Out) -> [fun11(V1',V',Out')] 
1
#### Cost of phase [168,169]:fun11(V1,V,Out) -> [fun11(V1',V',Out')] 
1*it(168)+1*it(169)+0
  Such that:it(169) =< V
it(169) =< V-V'
aux(16) =< V1
aux(17) =< V1-V1'
it(168) =< aux(16)
it(169) =< aux(16)
it(168) =< aux(17)
it(169) =< aux(17)

#### Cost of chains of fun11(V1,V,Out):
* Chain [[168,169],170]: 1*it(168)+1*it(169)+0
  Such that:aux(16) =< V1
it(169) =< V
aux(17) =< Out
it(168) =< aux(16)
it(169) =< aux(16)
it(168) =< aux(17)
it(169) =< aux(17)

  with precondition: [V>=0,Out>=1,V1>=Out] 

* Chain [170]: 0
  with precondition: [Out=0,V1>=0,V>=0] 


#### Cost of loops [171,172] 

 * loop 171:fun12(V1,V,V2,Out) -> [fun12(V1',V',V2',Out')] 
1
 * loop 172:fun12(V1,V,V2,Out) -> [fun12(V1',V',V2',Out')] 
1
#### Cost of phase [171,172]:fun12(V1,V,V2,Out) -> [fun12(V1',V',V2',Out')] 
1*it(171)+1*it(172)+0
  Such that:it(172) =< V
it(172) =< V-V'
it(172) =< V2
it(172) =< V2-V2'
aux(18) =< V1
aux(19) =< V1-V1'
it(171) =< aux(18)
it(172) =< aux(18)
it(171) =< aux(19)
it(172) =< aux(19)

#### Cost of chains of fun12(V1,V,V2,Out):
* Chain [[171,172],173]: 1*it(171)+1*it(172)+0
  Such that:aux(18) =< V1
it(172) =< V
aux(19) =< Out
it(171) =< aux(18)
it(172) =< aux(18)
it(171) =< aux(19)
it(172) =< aux(19)

  with precondition: [V>=0,V2>=0,Out>=1,V1>=Out] 

* Chain [173]: 0
  with precondition: [Out=0,V1>=0,V>=0,V2>=0] 


#### Cost of loops [174] 

 * loop 174:fun13(V1,Out) -> [fun13(V1',Out')] 
1
#### Cost of phase [174]:fun13(V1,Out) -> [fun13(V1',Out')] 
1*it(174)+0
  Such that:it(174) =< V1
it(174) =< V1-V1'

#### Cost of chains of fun13(V1,Out):
* Chain [[174],175]: 1*it(174)+0
  Such that:it(174) =< Out

  with precondition: [Out>=1,V1>=Out] 

* Chain [175]: 0
  with precondition: [Out=0,V1>=0] 


#### Cost of loops [176,177] 

 * loop 176:fun14(V1,V,Out) -> [fun14(V1',V',Out')] 
1
 * loop 177:fun14(V1,V,Out) -> [fun14(V1',V',Out')] 
1
#### Cost of phase [176,177]:fun14(V1,V,Out) -> [fun14(V1',V',Out')] 
1*it(176)+1*it(177)+0
  Such that:it(177) =< V
it(177) =< V-V'
aux(20) =< V1
aux(21) =< V1-V1'
it(176) =< aux(20)
it(177) =< aux(20)
it(176) =< aux(21)
it(177) =< aux(21)

#### Cost of chains of fun14(V1,V,Out):
* Chain [[176,177],178]: 1*it(176)+1*it(177)+0
  Such that:aux(20) =< V1
it(177) =< V
aux(21) =< Out
it(176) =< aux(20)
it(177) =< aux(20)
it(176) =< aux(21)
it(177) =< aux(21)

  with precondition: [V>=0,Out>=1,V1>=Out] 

* Chain [178]: 0
  with precondition: [Out=0,V1>=0,V>=0] 


#### Cost of loops [179,180] 

 * loop 179:fun15(V1,V,V2,Out) -> [fun15(V1',V',V2',Out')] 
1
 * loop 180:fun15(V1,V,V2,Out) -> [fun15(V1',V',V2',Out')] 
1
#### Cost of phase [179,180]:fun15(V1,V,V2,Out) -> [fun15(V1',V',V2',Out')] 
1*it(179)+1*it(180)+0
  Such that:it(180) =< V
it(180) =< V-V'
it(180) =< V2
it(180) =< V2-V2'
aux(22) =< V1
aux(23) =< V1-V1'
it(179) =< aux(22)
it(180) =< aux(22)
it(179) =< aux(23)
it(180) =< aux(23)

#### Cost of chains of fun15(V1,V,V2,Out):
* Chain [[179,180],181]: 1*it(179)+1*it(180)+0
  Such that:aux(22) =< V1
it(180) =< V
aux(23) =< Out
it(179) =< aux(22)
it(180) =< aux(22)
it(179) =< aux(23)
it(180) =< aux(23)

  with precondition: [V>=0,V2>=0,Out>=1,V1>=Out] 

* Chain [181]: 0
  with precondition: [Out=0,V1>=0,V>=0,V2>=0] 


#### Cost of loops [182,183] 

 * loop 182:fun16(V1,V,Out) -> [fun16(V1',V',Out')] 
1
 * loop 183:fun16(V1,V,Out) -> [fun16(V1',V',Out')] 
1
#### Cost of phase [182,183]:fun16(V1,V,Out) -> [fun16(V1',V',Out')] 
1*it(182)+1*it(183)+0
  Such that:it(183) =< V
it(183) =< V-V'
aux(24) =< V1
aux(25) =< V1-V1'
it(182) =< aux(24)
it(183) =< aux(24)
it(182) =< aux(25)
it(183) =< aux(25)

#### Cost of chains of fun16(V1,V,Out):
* Chain [[182,183],184]: 1*it(182)+1*it(183)+0
  Such that:aux(24) =< V1
it(183) =< V
aux(25) =< Out
it(182) =< aux(24)
it(183) =< aux(24)
it(182) =< aux(25)
it(183) =< aux(25)

  with precondition: [V>=0,Out>=1,V1>=Out] 

* Chain [184]: 0
  with precondition: [Out=0,V1>=0,V>=0] 


#### Cost of loops [185] 

 * loop 185:fun17(V1,Out) -> [fun17(V1',Out')] 
1
#### Cost of phase [185]:fun17(V1,Out) -> [fun17(V1',Out')] 
1*it(185)+0
  Such that:it(185) =< V1
it(185) =< V1-V1'

#### Cost of chains of fun17(V1,Out):
* Chain [[185],186]: 1*it(185)+0
  Such that:it(185) =< Out

  with precondition: [Out>=1,V1>=Out] 

* Chain [186]: 0
  with precondition: [Out=0,V1>=0] 


#### Cost of loops [187] 

 * loop 187:fun18(V1,Out) -> [fun18(V1',Out')] 
1
#### Cost of phase [187]:fun18(V1,Out) -> [fun18(V1',Out')] 
1*it(187)+0
  Such that:it(187) =< V1
it(187) =< V1-V1'

#### Cost of chains of fun18(V1,Out):
* Chain [[187],188]: 1*it(187)+0
  Such that:it(187) =< Out

  with precondition: [Out>=1,V1>=Out] 

* Chain [188]: 0
  with precondition: [Out=0,V1>=0] 


#### Cost of loops [189,190] 

 * loop 189:fun19(V1,V,Out) -> [fun19(V1',V',Out')] 
1
 * loop 190:fun19(V1,V,Out) -> [fun19(V1',V',Out')] 
1
#### Cost of phase [189,190]:fun19(V1,V,Out) -> [fun19(V1',V',Out')] 
1*it(189)+1*it(190)+0
  Such that:it(190) =< V
it(190) =< V-V'
aux(26) =< V1
aux(27) =< V1-V1'
it(189) =< aux(26)
it(190) =< aux(26)
it(189) =< aux(27)
it(190) =< aux(27)

#### Cost of chains of fun19(V1,V,Out):
* Chain [[189,190],191]: 1*it(189)+1*it(190)+0
  Such that:aux(26) =< V1
it(190) =< V
aux(27) =< Out
it(189) =< aux(26)
it(190) =< aux(26)
it(189) =< aux(27)
it(190) =< aux(27)

  with precondition: [V>=0,Out>=1,V1>=Out] 

* Chain [191]: 0
  with precondition: [Out=0,V1>=0,V>=0] 


#### Cost of loops [192] 

 * loop 192:fun2(V1,Out) -> [fun2(V1',Out')] 
1
#### Cost of phase [192]:fun2(V1,Out) -> [fun2(V1',Out')] 
1*it(192)+0
  Such that:it(192) =< V1
it(192) =< V1-V1'

#### Cost of chains of fun2(V1,Out):
* Chain [[192],193]: 1*it(192)+0
  Such that:it(192) =< Out

  with precondition: [Out>=1,V1>=Out] 

* Chain [193]: 0
  with precondition: [Out=0,V1>=0] 


#### Cost of loops [194,195] 

 * loop 194:fun20(V1,V,V2,Out) -> [fun20(V1',V',V2',Out')] 
1
 * loop 195:fun20(V1,V,V2,Out) -> [fun20(V1',V',V2',Out')] 
1
#### Cost of phase [194,195]:fun20(V1,V,V2,Out) -> [fun20(V1',V',V2',Out')] 
1*it(194)+1*it(195)+0
  Such that:it(195) =< V
it(195) =< V-V'
it(195) =< V2
it(195) =< V2-V2'
aux(28) =< V1
aux(29) =< V1-V1'
it(194) =< aux(28)
it(195) =< aux(28)
it(194) =< aux(29)
it(195) =< aux(29)

#### Cost of chains of fun20(V1,V,V2,Out):
* Chain [[194,195],196]: 1*it(194)+1*it(195)+0
  Such that:aux(28) =< V1
it(195) =< V
aux(29) =< Out
it(194) =< aux(28)
it(195) =< aux(28)
it(194) =< aux(29)
it(195) =< aux(29)

  with precondition: [V>=0,V2>=0,Out>=1,V1>=Out] 

* Chain [196]: 0
  with precondition: [Out=0,V1>=0,V>=0,V2>=0] 


#### Cost of loops [197,198] 

 * loop 197:fun21(V1,V,Out) -> [fun21(V1',V',Out')] 
1
 * loop 198:fun21(V1,V,Out) -> [fun21(V1',V',Out')] 
1
#### Cost of phase [197,198]:fun21(V1,V,Out) -> [fun21(V1',V',Out')] 
1*it(197)+1*it(198)+0
  Such that:it(198) =< V
it(198) =< V-V'
aux(30) =< V1
aux(31) =< V1-V1'
it(197) =< aux(30)
it(198) =< aux(30)
it(197) =< aux(31)
it(198) =< aux(31)

#### Cost of chains of fun21(V1,V,Out):
* Chain [[197,198],199]: 1*it(197)+1*it(198)+0
  Such that:aux(30) =< V1
it(198) =< V
aux(31) =< Out
it(197) =< aux(30)
it(198) =< aux(30)
it(197) =< aux(31)
it(198) =< aux(31)

  with precondition: [V>=0,Out>=1,V1>=Out] 

* Chain [199]: 0
  with precondition: [Out=0,V1>=0,V>=0] 


#### Cost of loops [200,201] 

 * loop 200:fun22(V1,V,V2,Out) -> [fun22(V1',V',V2',Out')] 
1
 * loop 201:fun22(V1,V,V2,Out) -> [fun22(V1',V',V2',Out')] 
1
#### Cost of phase [200,201]:fun22(V1,V,V2,Out) -> [fun22(V1',V',V2',Out')] 
1*it(200)+1*it(201)+0
  Such that:it(201) =< V
it(201) =< V-V'
it(201) =< V2
it(201) =< V2-V2'
aux(32) =< V1
aux(33) =< V1-V1'
it(200) =< aux(32)
it(201) =< aux(32)
it(200) =< aux(33)
it(201) =< aux(33)

#### Cost of chains of fun22(V1,V,V2,Out):
* Chain [[200,201],202]: 1*it(200)+1*it(201)+0
  Such that:aux(32) =< V1
it(201) =< V
aux(33) =< Out
it(200) =< aux(32)
it(201) =< aux(32)
it(200) =< aux(33)
it(201) =< aux(33)

  with precondition: [V>=0,V2>=0,Out>=1,V1>=Out] 

* Chain [202]: 0
  with precondition: [Out=0,V1>=0,V>=0,V2>=0] 


#### Cost of loops [203,204] 

 * loop 203:fun23(V1,V,V2,Out) -> [fun23(V1',V',V2',Out')] 
1
 * loop 204:fun23(V1,V,V2,Out) -> [fun23(V1',V',V2',Out')] 
1
#### Cost of phase [203,204]:fun23(V1,V,V2,Out) -> [fun23(V1',V',V2',Out')] 
1*it(203)+1*it(204)+0
  Such that:it(204) =< V
it(204) =< V-V'
it(204) =< V2
it(204) =< V2-V2'
aux(34) =< V1
aux(35) =< V1-V1'
it(203) =< aux(34)
it(204) =< aux(34)
it(203) =< aux(35)
it(204) =< aux(35)

#### Cost of chains of fun23(V1,V,V2,Out):
* Chain [[203,204],205]: 1*it(203)+1*it(204)+0
  Such that:aux(34) =< V1
it(204) =< V
aux(35) =< Out
it(203) =< aux(34)
it(204) =< aux(34)
it(203) =< aux(35)
it(204) =< aux(35)

  with precondition: [V>=0,V2>=0,Out>=1,V1>=Out] 

* Chain [205]: 0
  with precondition: [Out=0,V1>=0,V>=0,V2>=0] 


#### Cost of loops [206,207] 

 * loop 206:fun24(V1,V,Out) -> [fun24(V1',V',Out')] 
1
 * loop 207:fun24(V1,V,Out) -> [fun24(V1',V',Out')] 
1
#### Cost of phase [206,207]:fun24(V1,V,Out) -> [fun24(V1',V',Out')] 
1*it(206)+1*it(207)+0
  Such that:it(207) =< V
it(207) =< V-V'
aux(36) =< V1
aux(37) =< V1-V1'
it(206) =< aux(36)
it(207) =< aux(36)
it(206) =< aux(37)
it(207) =< aux(37)

#### Cost of chains of fun24(V1,V,Out):
* Chain [[206,207],208]: 1*it(206)+1*it(207)+0
  Such that:aux(36) =< V1
it(207) =< V
aux(37) =< Out
it(206) =< aux(36)
it(207) =< aux(36)
it(206) =< aux(37)
it(207) =< aux(37)

  with precondition: [V>=0,Out>=1,V1>=Out] 

* Chain [208]: 0
  with precondition: [Out=0,V1>=0,V>=0] 


#### Cost of loops [209,210] 

 * loop 209:fun25(V1,V,Out) -> [fun25(V1',V',Out')] 
1
 * loop 210:fun25(V1,V,Out) -> [fun25(V1',V',Out')] 
1
#### Cost of phase [209,210]:fun25(V1,V,Out) -> [fun25(V1',V',Out')] 
1*it(209)+1*it(210)+0
  Such that:it(210) =< V
it(210) =< V-V'
aux(38) =< V1
aux(39) =< V1-V1'
it(209) =< aux(38)
it(210) =< aux(38)
it(209) =< aux(39)
it(210) =< aux(39)

#### Cost of chains of fun25(V1,V,Out):
* Chain [[209,210],211]: 1*it(209)+1*it(210)+0
  Such that:aux(38) =< V1
it(210) =< V
aux(39) =< Out
it(209) =< aux(38)
it(210) =< aux(38)
it(209) =< aux(39)
it(210) =< aux(39)

  with precondition: [V>=0,Out>=1,V1>=Out] 

* Chain [211]: 0
  with precondition: [Out=0,V1>=0,V>=0] 


#### Cost of loops [212,213] 

 * loop 212:fun26(V1,V,Out) -> [fun26(V1',V',Out')] 
1
 * loop 213:fun26(V1,V,Out) -> [fun26(V1',V',Out')] 
1
#### Cost of phase [212,213]:fun26(V1,V,Out) -> [fun26(V1',V',Out')] 
1*it(212)+1*it(213)+0
  Such that:it(213) =< V
it(213) =< V-V'
aux(40) =< V1
aux(41) =< V1-V1'
it(212) =< aux(40)
it(213) =< aux(40)
it(212) =< aux(41)
it(213) =< aux(41)

#### Cost of chains of fun26(V1,V,Out):
* Chain [[212,213],214]: 1*it(212)+1*it(213)+0
  Such that:aux(40) =< V1
it(213) =< V
aux(41) =< Out
it(212) =< aux(40)
it(213) =< aux(40)
it(212) =< aux(41)
it(213) =< aux(41)

  with precondition: [V>=0,Out>=1,V1>=Out] 

* Chain [214]: 0
  with precondition: [Out=0,V1>=0,V>=0] 


#### Cost of loops [215,216] 

 * loop 215:fun27(V1,V,V2,Out) -> [fun27(V1',V',V2',Out')] 
1
 * loop 216:fun27(V1,V,V2,Out) -> [fun27(V1',V',V2',Out')] 
1
#### Cost of phase [215,216]:fun27(V1,V,V2,Out) -> [fun27(V1',V',V2',Out')] 
1*it(215)+1*it(216)+0
  Such that:it(216) =< V
it(216) =< V-V'
it(216) =< V2
it(216) =< V2-V2'
aux(42) =< V1
aux(43) =< V1-V1'
it(215) =< aux(42)
it(216) =< aux(42)
it(215) =< aux(43)
it(216) =< aux(43)

#### Cost of chains of fun27(V1,V,V2,Out):
* Chain [[215,216],217]: 1*it(215)+1*it(216)+0
  Such that:aux(42) =< V1
it(216) =< V
aux(43) =< Out
it(215) =< aux(42)
it(216) =< aux(42)
it(215) =< aux(43)
it(216) =< aux(43)

  with precondition: [V>=0,V2>=0,Out>=1,V1>=Out] 

* Chain [217]: 0
  with precondition: [Out=0,V1>=0,V>=0,V2>=0] 


#### Cost of loops [218,219] 

 * loop 218:fun28(V1,V,V2,Out) -> [fun28(V1',V',V2',Out')] 
1
 * loop 219:fun28(V1,V,V2,Out) -> [fun28(V1',V',V2',Out')] 
1
#### Cost of phase [218,219]:fun28(V1,V,V2,Out) -> [fun28(V1',V',V2',Out')] 
1*it(218)+1*it(219)+0
  Such that:it(219) =< V
it(219) =< V-V'
it(219) =< V2
it(219) =< V2-V2'
aux(44) =< V1
aux(45) =< V1-V1'
it(218) =< aux(44)
it(219) =< aux(44)
it(218) =< aux(45)
it(219) =< aux(45)

#### Cost of chains of fun28(V1,V,V2,Out):
* Chain [[218,219],220]: 1*it(218)+1*it(219)+0
  Such that:aux(44) =< V1
it(219) =< V
aux(45) =< Out
it(218) =< aux(44)
it(219) =< aux(44)
it(218) =< aux(45)
it(219) =< aux(45)

  with precondition: [V>=0,V2>=0,Out>=1,V1>=Out] 

* Chain [220]: 0
  with precondition: [Out=0,V1>=0,V>=0,V2>=0] 


#### Cost of loops [221] 

 * loop 221:fun29(V1,Out) -> [fun29(V1',Out')] 
1
#### Cost of phase [221]:fun29(V1,Out) -> [fun29(V1',Out')] 
1*it(221)+0
  Such that:it(221) =< V1
it(221) =< V1-V1'

#### Cost of chains of fun29(V1,Out):
* Chain [[221],222]: 1*it(221)+0
  Such that:it(221) =< Out

  with precondition: [Out>=1,V1>=Out] 

* Chain [222]: 0
  with precondition: [Out=0,V1>=0] 


#### Cost of loops [223,224] 

 * loop 223:fun3(V1,V,Out) -> [fun3(V1',V',Out')] 
1
 * loop 224:fun3(V1,V,Out) -> [fun3(V1',V',Out')] 
1
#### Cost of phase [223,224]:fun3(V1,V,Out) -> [fun3(V1',V',Out')] 
1*it(223)+1*it(224)+0
  Such that:it(224) =< V
it(224) =< V-V'
aux(46) =< V1
aux(47) =< V1-V1'
it(223) =< aux(46)
it(224) =< aux(46)
it(223) =< aux(47)
it(224) =< aux(47)

#### Cost of chains of fun3(V1,V,Out):
* Chain [[223,224],225]: 1*it(223)+1*it(224)+0
  Such that:aux(46) =< V1
it(224) =< V
aux(47) =< Out
it(223) =< aux(46)
it(224) =< aux(46)
it(223) =< aux(47)
it(224) =< aux(47)

  with precondition: [V>=0,Out>=1,V1>=Out] 

* Chain [225]: 0
  with precondition: [Out=0,V1>=0,V>=0] 


#### Cost of loops [226,227] 

 * loop 226:fun30(V1,V,Out) -> [fun30(V1',V',Out')] 
1
 * loop 227:fun30(V1,V,Out) -> [fun30(V1',V',Out')] 
1
#### Cost of phase [226,227]:fun30(V1,V,Out) -> [fun30(V1',V',Out')] 
1*it(226)+1*it(227)+0
  Such that:it(227) =< V
it(227) =< V-V'
aux(48) =< V1
aux(49) =< V1-V1'
it(226) =< aux(48)
it(227) =< aux(48)
it(226) =< aux(49)
it(227) =< aux(49)

#### Cost of chains of fun30(V1,V,Out):
* Chain [[226,227],228]: 1*it(226)+1*it(227)+0
  Such that:aux(48) =< V1
it(227) =< V
aux(49) =< Out
it(226) =< aux(48)
it(227) =< aux(48)
it(226) =< aux(49)
it(227) =< aux(49)

  with precondition: [V>=0,Out>=1,V1>=Out] 

* Chain [228]: 0
  with precondition: [Out=0,V1>=0,V>=0] 


#### Cost of loops [229] 

 * loop 229:fun31(V1,Out) -> [fun31(V1',Out')] 
1
#### Cost of phase [229]:fun31(V1,Out) -> [fun31(V1',Out')] 
1*it(229)+0
  Such that:it(229) =< V1
it(229) =< V1-V1'

#### Cost of chains of fun31(V1,Out):
* Chain [[229],230]: 1*it(229)+0
  Such that:it(229) =< Out

  with precondition: [Out>=1,V1>=Out] 

* Chain [230]: 0
  with precondition: [Out=0,V1>=0] 


#### Cost of loops [231,232] 

 * loop 231:fun32(V1,V,Out) -> [fun32(V1',V',Out')] 
1
 * loop 232:fun32(V1,V,Out) -> [fun32(V1',V',Out')] 
1
#### Cost of phase [231,232]:fun32(V1,V,Out) -> [fun32(V1',V',Out')] 
1*it(231)+1*it(232)+0
  Such that:it(232) =< V
it(232) =< V-V'
aux(50) =< V1
aux(51) =< V1-V1'
it(231) =< aux(50)
it(232) =< aux(50)
it(231) =< aux(51)
it(232) =< aux(51)

#### Cost of chains of fun32(V1,V,Out):
* Chain [[231,232],233]: 1*it(231)+1*it(232)+0
  Such that:aux(50) =< V1
it(232) =< V
aux(51) =< Out
it(231) =< aux(50)
it(232) =< aux(50)
it(231) =< aux(51)
it(232) =< aux(51)

  with precondition: [V>=0,Out>=1,V1>=Out] 

* Chain [233]: 0
  with precondition: [Out=0,V1>=0,V>=0] 


#### Cost of loops [234] 

 * loop 234:fun33(V1,Out) -> [fun33(V1',Out')] 
1
#### Cost of phase [234]:fun33(V1,Out) -> [fun33(V1',Out')] 
1*it(234)+0
  Such that:it(234) =< V1
it(234) =< V1-V1'

#### Cost of chains of fun33(V1,Out):
* Chain [[234],235]: 1*it(234)+0
  Such that:it(234) =< Out

  with precondition: [Out>=1,V1>=Out] 

* Chain [235]: 0
  with precondition: [Out=0,V1>=0] 


#### Cost of loops [236] 

 * loop 236:fun34(V1,Out) -> [fun34(V1',Out')] 
1
#### Cost of phase [236]:fun34(V1,Out) -> [fun34(V1',Out')] 
1*it(236)+0
  Such that:it(236) =< V1
it(236) =< V1-V1'

#### Cost of chains of fun34(V1,Out):
* Chain [[236],237]: 1*it(236)+0
  Such that:it(236) =< Out

  with precondition: [Out>=1,V1>=Out] 

* Chain [237]: 0
  with precondition: [Out=0,V1>=0] 


#### Cost of loops [238,239] 

 * loop 238:fun35(V1,V,Out) -> [fun35(V1',V',Out')] 
1
 * loop 239:fun35(V1,V,Out) -> [fun35(V1',V',Out')] 
1
#### Cost of phase [238,239]:fun35(V1,V,Out) -> [fun35(V1',V',Out')] 
1*it(238)+1*it(239)+0
  Such that:it(239) =< V
it(239) =< V-V'
aux(52) =< V1
aux(53) =< V1-V1'
it(238) =< aux(52)
it(239) =< aux(52)
it(238) =< aux(53)
it(239) =< aux(53)

#### Cost of chains of fun35(V1,V,Out):
* Chain [[238,239],240]: 1*it(238)+1*it(239)+0
  Such that:aux(52) =< V1
it(239) =< V
aux(53) =< Out
it(238) =< aux(52)
it(239) =< aux(52)
it(238) =< aux(53)
it(239) =< aux(53)

  with precondition: [V>=0,Out>=1,V1>=Out] 

* Chain [240]: 0
  with precondition: [Out=0,V1>=0,V>=0] 


#### Cost of loops [241,242] 

 * loop 241:fun36(V1,V,Out) -> [fun36(V1',V',Out')] 
1
 * loop 242:fun36(V1,V,Out) -> [fun36(V1',V',Out')] 
1
#### Cost of phase [241,242]:fun36(V1,V,Out) -> [fun36(V1',V',Out')] 
1*it(241)+1*it(242)+0
  Such that:it(242) =< V
it(242) =< V-V'
aux(54) =< V1
aux(55) =< V1-V1'
it(241) =< aux(54)
it(242) =< aux(54)
it(241) =< aux(55)
it(242) =< aux(55)

#### Cost of chains of fun36(V1,V,Out):
* Chain [[241,242],243]: 1*it(241)+1*it(242)+0
  Such that:aux(54) =< V1
it(242) =< V
aux(55) =< Out
it(241) =< aux(54)
it(242) =< aux(54)
it(241) =< aux(55)
it(242) =< aux(55)

  with precondition: [V>=0,Out>=1,V1>=Out] 

* Chain [243]: 0
  with precondition: [Out=0,V1>=0,V>=0] 


#### Cost of loops [244,245] 

 * loop 244:fun37(V1,V,Out) -> [fun37(V1',V',Out')] 
1
 * loop 245:fun37(V1,V,Out) -> [fun37(V1',V',Out')] 
1
#### Cost of phase [244,245]:fun37(V1,V,Out) -> [fun37(V1',V',Out')] 
1*it(244)+1*it(245)+0
  Such that:it(245) =< V
it(245) =< V-V'
aux(56) =< V1
aux(57) =< V1-V1'
it(244) =< aux(56)
it(245) =< aux(56)
it(244) =< aux(57)
it(245) =< aux(57)

#### Cost of chains of fun37(V1,V,Out):
* Chain [[244,245],246]: 1*it(244)+1*it(245)+0
  Such that:aux(56) =< V1
it(245) =< V
aux(57) =< Out
it(244) =< aux(56)
it(245) =< aux(56)
it(244) =< aux(57)
it(245) =< aux(57)

  with precondition: [V>=0,Out>=1,V1>=Out] 

* Chain [246]: 0
  with precondition: [Out=0,V1>=0,V>=0] 


#### Cost of loops [247] 

 * loop 247:fun4(V1,Out) -> [fun4(V1',Out')] 
1
#### Cost of phase [247]:fun4(V1,Out) -> [fun4(V1',Out')] 
1*it(247)+0
  Such that:it(247) =< V1
it(247) =< V1-V1'

#### Cost of chains of fun4(V1,Out):
* Chain [[247],248]: 1*it(247)+0
  Such that:it(247) =< Out

  with precondition: [Out>=1,V1>=Out] 

* Chain [248]: 0
  with precondition: [Out=0,V1>=0] 


#### Cost of loops [249,250] 

 * loop 249:fun5(V1,V,Out) -> [fun5(V1',V',Out')] 
1
 * loop 250:fun5(V1,V,Out) -> [fun5(V1',V',Out')] 
1
#### Cost of phase [249,250]:fun5(V1,V,Out) -> [fun5(V1',V',Out')] 
1*it(249)+1*it(250)+0
  Such that:it(250) =< V
it(250) =< V-V'
aux(58) =< V1
aux(59) =< V1-V1'
it(249) =< aux(58)
it(250) =< aux(58)
it(249) =< aux(59)
it(250) =< aux(59)

#### Cost of chains of fun5(V1,V,Out):
* Chain [[249,250],251]: 1*it(249)+1*it(250)+0
  Such that:aux(58) =< V1
it(250) =< V
aux(59) =< Out
it(249) =< aux(58)
it(250) =< aux(58)
it(249) =< aux(59)
it(250) =< aux(59)

  with precondition: [V>=0,Out>=1,V1>=Out] 

* Chain [251]: 0
  with precondition: [Out=0,V1>=0,V>=0] 


#### Cost of loops [252] 

 * loop 252:fun6(V1,Out) -> [fun6(V1',Out')] 
1
#### Cost of phase [252]:fun6(V1,Out) -> [fun6(V1',Out')] 
1*it(252)+0
  Such that:it(252) =< V1
it(252) =< V1-V1'

#### Cost of chains of fun6(V1,Out):
* Chain [[252],253]: 1*it(252)+0
  Such that:it(252) =< Out

  with precondition: [Out>=1,V1>=Out] 

* Chain [253]: 0
  with precondition: [Out=0,V1>=0] 


#### Cost of loops [254] 

 * loop 254:fun7(V1,Out) -> [fun7(V1',Out')] 
1
#### Cost of phase [254]:fun7(V1,Out) -> [fun7(V1',Out')] 
1*it(254)+0
  Such that:it(254) =< V1
it(254) =< V1-V1'

#### Cost of chains of fun7(V1,Out):
* Chain [[254],255]: 1*it(254)+0
  Such that:it(254) =< Out

  with precondition: [Out>=1,V1>=Out] 

* Chain [255]: 0
  with precondition: [Out=0,V1>=0] 


#### Cost of loops [256,257] 

 * loop 256:fun8(V1,V,V2,Out) -> [fun8(V1',V',V2',Out')] 
1
 * loop 257:fun8(V1,V,V2,Out) -> [fun8(V1',V',V2',Out')] 
1
#### Cost of phase [256,257]:fun8(V1,V,V2,Out) -> [fun8(V1',V',V2',Out')] 
1*it(256)+1*it(257)+0
  Such that:it(257) =< V
it(257) =< V-V'
it(257) =< V2
it(257) =< V2-V2'
aux(60) =< V1
aux(61) =< V1-V1'
it(256) =< aux(60)
it(257) =< aux(60)
it(256) =< aux(61)
it(257) =< aux(61)

#### Cost of chains of fun8(V1,V,V2,Out):
* Chain [[256,257],258]: 1*it(256)+1*it(257)+0
  Such that:aux(60) =< V1
it(257) =< V
aux(61) =< Out
it(256) =< aux(60)
it(257) =< aux(60)
it(256) =< aux(61)
it(257) =< aux(61)

  with precondition: [V>=0,V2>=0,Out>=1,V1>=Out] 

* Chain [258]: 0
  with precondition: [Out=0,V1>=0,V>=0,V2>=0] 


#### Cost of loops [259,260] 

 * loop 259:fun9(V1,V,V2,V3,Out) -> [fun9(V1',V',V2',V3',Out')] 
1
 * loop 260:fun9(V1,V,V2,V3,Out) -> [fun9(V1',V',V2',V3',Out')] 
1
#### Cost of phase [259,260]:fun9(V1,V,V2,V3,Out) -> [fun9(V1',V',V2',V3',Out')] 
1*it(259)+1*it(260)+0
  Such that:it(260) =< V
it(260) =< V-V'
it(260) =< V2
it(260) =< V2-V2'
it(260) =< V3
it(260) =< V3-V3'
aux(62) =< V1
aux(63) =< V1-V1'
it(259) =< aux(62)
it(260) =< aux(62)
it(259) =< aux(63)
it(260) =< aux(63)

#### Cost of chains of fun9(V1,V,V2,V3,Out):
* Chain [[259,260],261]: 1*it(259)+1*it(260)+0
  Such that:aux(62) =< V1
it(260) =< V
aux(63) =< Out
it(259) =< aux(62)
it(260) =< aux(62)
it(259) =< aux(63)
it(260) =< aux(63)

  with precondition: [V>=0,V2>=0,V3>=0,Out>=1,V1>=Out] 

* Chain [261]: 0
  with precondition: [Out=0,V1>=0,V>=0,V2>=0,V3>=0] 


#### Cost of loops [262] 

 * loop 262:head(V1,Out) -> [head(V1',Out')] 
1
#### Cost of phase [262]:head(V1,Out) -> [head(V1',Out')] 
1*it(262)+0
  Such that:it(262) =< V1
it(262) =< V1-V1'

#### Cost of chains of head(V1,Out):
* Chain [[262],263]: 1*it(262)+0
  Such that:it(262) =< Out

  with precondition: [Out>=1,V1>=Out] 

* Chain [263]: 0
  with precondition: [Out=0,V1>=0] 


#### Cost of loops [264] 

 * loop 264:isLNat(V1,Out) -> [isLNat(V1',Out')] 
1
#### Cost of phase [264]:isLNat(V1,Out) -> [isLNat(V1',Out')] 
1*it(264)+0
  Such that:it(264) =< V1
it(264) =< V1-V1'

#### Cost of chains of isLNat(V1,Out):
* Chain [[264],265]: 1*it(264)+0
  Such that:it(264) =< Out

  with precondition: [Out>=1,V1>=Out] 

* Chain [265]: 0
  with precondition: [Out=0,V1>=0] 


#### Cost of loops [266] 

 * loop 266:isNatural(V1,Out) -> [isNatural(V1',Out')] 
1
#### Cost of phase [266]:isNatural(V1,Out) -> [isNatural(V1',Out')] 
1*it(266)+0
  Such that:it(266) =< V1
it(266) =< V1-V1'

#### Cost of chains of isNatural(V1,Out):
* Chain [[266],267]: 1*it(266)+0
  Such that:it(266) =< Out

  with precondition: [Out>=1,V1>=Out] 

* Chain [267]: 0
  with precondition: [Out=0,V1>=0] 


#### Cost of loops [268] 

 * loop 268:isPLNat(V1,Out) -> [isPLNat(V1',Out')] 
1
#### Cost of phase [268]:isPLNat(V1,Out) -> [isPLNat(V1',Out')] 
1*it(268)+0
  Such that:it(268) =< V1
it(268) =< V1-V1'

#### Cost of chains of isPLNat(V1,Out):
* Chain [[268],269]: 1*it(268)+0
  Such that:it(268) =< Out

  with precondition: [Out>=1,V1>=Out] 

* Chain [269]: 0
  with precondition: [Out=0,V1>=0] 


#### Cost of loops [270] 

 * loop 270:natsFrom(V1,Out) -> [natsFrom(V1',Out')] 
1
#### Cost of phase [270]:natsFrom(V1,Out) -> [natsFrom(V1',Out')] 
1*it(270)+0
  Such that:it(270) =< V1
it(270) =< V1-V1'

#### Cost of chains of natsFrom(V1,Out):
* Chain [[270],271]: 1*it(270)+0
  Such that:it(270) =< Out

  with precondition: [Out>=1,V1>=Out] 

* Chain [271]: 0
  with precondition: [Out=0,V1>=0] 


#### Cost of loops [272,273,274] 

 * loop 272:pair(V1,V,Out) -> [pair(V1',V',Out')] 
1
 * loop 273:pair(V1,V,Out) -> [pair(V1',V',Out')] 
1
 * loop 274:pair(V1,V,Out) -> [pair(V1',V',Out')] 
1
#### Cost of phase [272,273,274]:pair(V1,V,Out) -> [pair(V1',V',Out')] 
1*it(272)+1*it(273)+1*it(274)+0
  Such that:aux(64) =< V1
aux(65) =< V1+V
aux(66) =< V1+V-V1'-V'
aux(67) =< V1-V1'
aux(68) =< V
aux(69) =< V-V'
it(273) =< aux(64)
it(274) =< aux(64)
it(272) =< aux(65)
it(273) =< aux(65)
it(274) =< aux(65)
it(272) =< aux(66)
it(273) =< aux(66)
it(274) =< aux(66)
it(273) =< aux(67)
it(274) =< aux(67)
it(272) =< aux(68)
it(274) =< aux(68)
it(272) =< aux(69)
it(274) =< aux(69)

#### Cost of chains of pair(V1,V,Out):
* Chain [[272,273,274],275]: 1*it(272)+1*it(273)+1*it(274)+0
  Such that:aux(70) =< V1
aux(71) =< V1+V
aux(72) =< V
it(273) =< aux(70)
it(274) =< aux(70)
it(272) =< aux(71)
it(273) =< aux(71)
it(274) =< aux(71)
it(272) =< aux(72)
it(274) =< aux(72)

  with precondition: [V1>=0,V>=0,Out>=1,V+V1>=Out] 

* Chain [275]: 0
  with precondition: [Out=0,V1>=0,V>=0] 


#### Cost of chains of proper(V1,Out):
* Chain [279]: 1
  with precondition: [V1=0,Out=1] 

* Chain [278]: 1
  with precondition: [V1=1,Out=2] 

* Chain [277]: 1
  with precondition: [V1=2,Out=3] 

* Chain [276]: 0
  with precondition: [Out=0,V1>=0] 


#### Cost of loops [280] 

 * loop 280:s(V1,Out) -> [s(V1',Out')] 
1
#### Cost of phase [280]:s(V1,Out) -> [s(V1',Out')] 
1*it(280)+0
  Such that:it(280) =< V1
it(280) =< V1-V1'

#### Cost of chains of s(V1,Out):
* Chain [[280],281]: 1*it(280)+0
  Such that:it(280) =< Out

  with precondition: [Out>=1,V1>=Out] 

* Chain [281]: 0
  with precondition: [Out=0,V1>=0] 


#### Cost of loops [282,283,284] 

 * loop 282:sel(V1,V,Out) -> [sel(V1',V',Out')] 
1
 * loop 283:sel(V1,V,Out) -> [sel(V1',V',Out')] 
1
 * loop 284:sel(V1,V,Out) -> [sel(V1',V',Out')] 
1
#### Cost of phase [282,283,284]:sel(V1,V,Out) -> [sel(V1',V',Out')] 
1*it(282)+1*it(283)+1*it(284)+0
  Such that:aux(73) =< V1
aux(74) =< V1+V
aux(75) =< V1+V-V1'-V'
aux(76) =< V1-V1'
aux(77) =< V
aux(78) =< V-V'
it(283) =< aux(73)
it(284) =< aux(73)
it(282) =< aux(74)
it(283) =< aux(74)
it(284) =< aux(74)
it(282) =< aux(75)
it(283) =< aux(75)
it(284) =< aux(75)
it(283) =< aux(76)
it(284) =< aux(76)
it(282) =< aux(77)
it(284) =< aux(77)
it(282) =< aux(78)
it(284) =< aux(78)

#### Cost of chains of sel(V1,V,Out):
* Chain [[282,283,284],285]: 1*it(282)+1*it(283)+1*it(284)+0
  Such that:aux(79) =< V1
aux(80) =< V1+V
aux(81) =< V
it(283) =< aux(79)
it(284) =< aux(79)
it(282) =< aux(80)
it(283) =< aux(80)
it(284) =< aux(80)
it(282) =< aux(81)
it(284) =< aux(81)

  with precondition: [V1>=0,V>=0,Out>=1,V+V1>=Out] 

* Chain [285]: 0
  with precondition: [Out=0,V1>=0,V>=0] 


#### Cost of loops [286] 

 * loop 286:snd(V1,Out) -> [snd(V1',Out')] 
1
#### Cost of phase [286]:snd(V1,Out) -> [snd(V1',Out')] 
1*it(286)+0
  Such that:it(286) =< V1
it(286) =< V1-V1'

#### Cost of chains of snd(V1,Out):
* Chain [[286],287]: 1*it(286)+0
  Such that:it(286) =< Out

  with precondition: [Out>=1,V1>=Out] 

* Chain [287]: 0
  with precondition: [Out=0,V1>=0] 


#### Cost of loops [288,289,290] 

 * loop 288:splitAt(V1,V,Out) -> [splitAt(V1',V',Out')] 
1
 * loop 289:splitAt(V1,V,Out) -> [splitAt(V1',V',Out')] 
1
 * loop 290:splitAt(V1,V,Out) -> [splitAt(V1',V',Out')] 
1
#### Cost of phase [288,289,290]:splitAt(V1,V,Out) -> [splitAt(V1',V',Out')] 
1*it(288)+1*it(289)+1*it(290)+0
  Such that:aux(82) =< V1
aux(83) =< V1+V
aux(84) =< V1+V-V1'-V'
aux(85) =< V1-V1'
aux(86) =< V
aux(87) =< V-V'
it(289) =< aux(82)
it(290) =< aux(82)
it(288) =< aux(83)
it(289) =< aux(83)
it(290) =< aux(83)
it(288) =< aux(84)
it(289) =< aux(84)
it(290) =< aux(84)
it(289) =< aux(85)
it(290) =< aux(85)
it(288) =< aux(86)
it(290) =< aux(86)
it(288) =< aux(87)
it(290) =< aux(87)

#### Cost of chains of splitAt(V1,V,Out):
* Chain [[288,289,290],291]: 1*it(288)+1*it(289)+1*it(290)+0
  Such that:aux(88) =< V1
aux(89) =< V1+V
aux(90) =< V
it(289) =< aux(88)
it(290) =< aux(88)
it(288) =< aux(89)
it(289) =< aux(89)
it(290) =< aux(89)
it(288) =< aux(90)
it(290) =< aux(90)

  with precondition: [V1>=0,V>=0,Out>=1,V+V1>=Out] 

* Chain [291]: 0
  with precondition: [Out=0,V1>=0,V>=0] 


#### Cost of loops [292] 

 * loop 292:tail(V1,Out) -> [tail(V1',Out')] 
1
#### Cost of phase [292]:tail(V1,Out) -> [tail(V1',Out')] 
1*it(292)+0
  Such that:it(292) =< V1
it(292) =< V1-V1'

#### Cost of chains of tail(V1,Out):
* Chain [[292],293]: 1*it(292)+0
  Such that:it(292) =< Out

  with precondition: [Out>=1,V1>=Out] 

* Chain [293]: 0
  with precondition: [Out=0,V1>=0] 


#### Cost of loops [294,295,296] 

 * loop 294:take(V1,V,Out) -> [take(V1',V',Out')] 
1
 * loop 295:take(V1,V,Out) -> [take(V1',V',Out')] 
1
 * loop 296:take(V1,V,Out) -> [take(V1',V',Out')] 
1
#### Cost of phase [294,295,296]:take(V1,V,Out) -> [take(V1',V',Out')] 
1*it(294)+1*it(295)+1*it(296)+0
  Such that:aux(91) =< V1
aux(92) =< V1+V
aux(93) =< V1+V-V1'-V'
aux(94) =< V1-V1'
aux(95) =< V
aux(96) =< V-V'
it(295) =< aux(91)
it(296) =< aux(91)
it(294) =< aux(92)
it(295) =< aux(92)
it(296) =< aux(92)
it(294) =< aux(93)
it(295) =< aux(93)
it(296) =< aux(93)
it(295) =< aux(94)
it(296) =< aux(94)
it(294) =< aux(95)
it(296) =< aux(95)
it(294) =< aux(96)
it(296) =< aux(96)

#### Cost of chains of take(V1,V,Out):
* Chain [[294,295,296],297]: 1*it(294)+1*it(295)+1*it(296)+0
  Such that:aux(97) =< V1
aux(98) =< V1+V
aux(99) =< V
it(295) =< aux(97)
it(296) =< aux(97)
it(294) =< aux(98)
it(295) =< aux(98)
it(296) =< aux(98)
it(294) =< aux(99)
it(296) =< aux(99)

  with precondition: [V1>=0,V>=0,Out>=1,V+V1>=Out] 

* Chain [297]: 0
  with precondition: [Out=0,V1>=0,V>=0] 


#### Cost of loops [299,300,301] 

 * loop 299:top(V1,Out) -> [top(V1',Out')] 
2
 * loop 300:top(V1,Out) -> [top(V1',Out')] 
2
 * loop 301:top(V1,Out) -> [top(V1',Out')] 
2
#### Cost of phase [299,300,301]:top(V1,Out) -> [top(V1',Out')] 
6*it(299)+0
#### Cost of phase [299,300,301]:top(V1,Out) -> [top(V1',Out')] 
6*it(299)+0
#### Cost of phase [299,300,301]:top(V1,Out) -> [top(V1',Out')] 
6*it(299)+0
#### Cost of chains of top(V1,Out):
* Chain [[299,300,301]]...: 6*it(299)+0
  with precondition: [V1>=1] 

* Chain [[299,300,301],302]: 6*it(299)+0
  with precondition: [Out=0,V1>=1] 

* Chain [[299,300,301],298,302]: 6*it(299)+1
  with precondition: [Out=0,V1>=1] 

* Chain [302]: 0
  with precondition: [Out=0,V1>=0] 

* Chain [298,302]: 1
  with precondition: [Out=0,V1>=1] 


#### Cost of chains of start(V1,V,V2,V3):
* Chain [306]...: 6*s(3)+0
  with precondition: [V1>=1] 

* Chain [305]: 27*s(5)+48*s(7)+1*s(8)+5*s(14)+5*s(15)+5*s(16)+1
  Such that:aux(128) =< V1
aux(129) =< V1+V
aux(130) =< V
s(7) =< aux(128)
s(5) =< aux(130)
s(14) =< aux(128)
s(15) =< aux(128)
s(16) =< aux(129)
s(14) =< aux(129)
s(15) =< aux(129)
s(16) =< aux(130)
s(15) =< aux(130)
s(5) =< aux(128)

  with precondition: [V1>=0] 

* Chain [304]: 1
  with precondition: [V1=1] 

* Chain [303]: 1
  with precondition: [V1=2] 


Closed-form bounds of start(V1,V,V2,V3): 
-------------------------------------
* Chain [306]... with precondition: [V1>=1] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [305] with precondition: [V1>=0] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [304] with precondition: [V1=1] 
    - Upper bound: 1 
    - Complexity: constant 
* Chain [303] with precondition: [V1=2] 
    - Upper bound: 1 
    - Complexity: constant 

### Maximum cost of start(V1,V,V2,V3): inf 
Asymptotic class: infinity 

Time statistics: 
-------------------------------------
* Partial evaluation computed in 134 ms.
* Invariants computed in 623 ms.
   - Backward Invariants 238 ms.
   - Transitive Invariants 185 ms.
* Refinement performed in 1106 ms.
* Termination proved in 216 ms.
* Upper bounds computed in 2035 ms.
   - Equation cost structures 700 ms.
   - Phase cost structures 810 ms.
   - Chain cost structures 712 ms.
   - Solving cost expressions 3 ms.
* Total analysis performed in 4428 ms.


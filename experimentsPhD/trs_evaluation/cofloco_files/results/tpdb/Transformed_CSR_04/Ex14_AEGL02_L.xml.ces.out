
Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. non_recursive  : [from/2]
1. recursive  : [length/1,length1/1]
2. non_recursive  : [start/1]

#### Obtained direct recursion through partial evaluation 
0. SCC is completely evaluated into other SCCs
1. SCC is partially evaluated into length1/1
2. SCC is partially evaluated into start/1

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations length1/1 
* CE 6 is refined into CE [7] 
* CE 5 is refined into CE [8] 


#### Refined cost equations length1/1 
* CE 7: length1(Out) = 2
     [Out=0] 
* CE 8: length1(Out) = 2+ length1(B)
     [B+1=Out] 

### Cost equations --> "Loop" of length1/1 
* CEs [8] --> Loop 4 
* CEs [7] --> Loop 5 

#### Loops of length1/1 
* Loop 4: length1(Out)->  length1(Out')
                  [Out=Out'+1] 
* Loop 5: length1(Out) [Out=0] 

### Ranking functions of CR length1(Out) 

#### Partial ranking functions of CR length1(Out) 


### Resulting Chains:length1(Out) 
* [[4]]...
* [[4],5]
* [5]


### Merging Chains  length1/1 into  External patterns of execution 
* [[5]] --> 1 
* [[5,[4]]] --> 2 
* [[[4]]] --> 3 


### Specialization of cost equations start/1 
* CE 2 is refined into CE [9,10,11] 
* CE 3 is refined into CE [12] 
* CE 4 is refined into CE [13,14,15] 


#### Refined cost equations start/1 
* CE 9: start(V) = 1+ length1(W):1
     [W=0] 
* CE 10: start(V) = 1+ length1(W):2
     [W>=1] 
* CE 11: start(V) = 1+ length1(W):3
     [] 
* CE 12: start(V) = 1
     [] 
* CE 13: start(V) = 0+ length1(W):1
     [W=0] 
* CE 14: start(V) = 0+ length1(W):2
     [W>=1] 
* CE 15: start(V) = 0+ length1(W):3
     [] 

### Cost equations --> "Loop" of start/1 
* CEs [11,15] --> Loop 6 
* CEs [9,10,12,13,14] --> Loop 7 

#### Loops of start/1 
* Loop 6: start(V) [] 
* Loop 7: start(V) [] 

### Ranking functions of CR start(V) 

#### Partial ranking functions of CR start(V) 


### Resulting Chains:start(V) 
* [7]
* [6]...


### Merging Chains  start/1 into  External patterns of execution 
* [[7]] --> 1 
* [[6]] --> 2 


Computing Bounds
=====================================

#### Cost of loops [4] 

 * loop 4:length1(Out) -> [length1(Out')] 
2
#### Cost of phase [4]:length1(Out) -> [length1(Out')] 
2*it(4)+0
#### Cost of phase [4]:length1(Out) -> [length1(Out')] 
2*it(4)+0
#### Cost of chains of length1(Out):
* Chain [[4]]...: 2*it(4)+0
  with precondition: [] 

* Chain [[4],5]: 2*it(4)+2
  with precondition: [Out>=1] 

* Chain [5]: 2
  with precondition: [Out=0] 


#### Cost of chains of start(V):
* Chain [7]: 1*aux(1)+0
  with precondition: [] 

* Chain [6]...: 1*aux(2)+0
  with precondition: [] 


Closed-form bounds of start(V): 
-------------------------------------
* Chain [7] with precondition: [] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [6]... with precondition: [] 
    - Upper bound: inf 
    - Complexity: infinity 

### Maximum cost of start(V): inf 
Asymptotic class: infinity 

Time statistics: 
-------------------------------------
* Partial evaluation computed in 7 ms.
* Invariants computed in 6 ms.
   - Backward Invariants 4 ms.
   - Transitive Invariants 1 ms.
* Refinement performed in 12 ms.
* Termination proved in 1 ms.
* Upper bounds computed in 11 ms.
   - Equation cost structures 4 ms.
   - Phase cost structures 2 ms.
   - Chain cost structures 4 ms.
   - Solving cost expressions 1 ms.
* Total analysis performed in 55 ms.



Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. recursive  : [cons/3]
1. recursive  : [from/2]
2. recursive  : [fun/3]
3. recursive  : [fun1/3]
4. recursive  : [negrecip/2]
5. recursive  : [pi/2]
6. recursive  : [plus/3]
7. recursive  : [posrecip/2]
8. non_recursive  : [proper/2]
9. recursive  : [rcons/3]
10. recursive  : [s/2]
11. recursive  : [square/2]
12. recursive  : [times/3]
13. recursive  : [top/2]
14. non_recursive  : [start/2]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into cons/3
1. SCC is partially evaluated into from/2
2. SCC is partially evaluated into fun/3
3. SCC is partially evaluated into fun1/3
4. SCC is partially evaluated into negrecip/2
5. SCC is partially evaluated into pi/2
6. SCC is partially evaluated into plus/3
7. SCC is partially evaluated into posrecip/2
8. SCC is partially evaluated into proper/2
9. SCC is partially evaluated into rcons/3
10. SCC is partially evaluated into s/2
11. SCC is partially evaluated into square/2
12. SCC is partially evaluated into times/3
13. SCC is partially evaluated into top/2
14. SCC is partially evaluated into start/2

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations cons/3 
* CE 35 is refined into CE [58] 
* CE 34 is refined into CE [59] 
* CE 33 is refined into CE [60] 


#### Refined cost equations cons/3 
* CE 58: cons(V,V1,Out) = 0
     [V1>=0,V>=0,Out=0] 
* CE 59: cons(V,V1,Out) = 1+ cons(W1,V1,X1)
     [W1>=0,V1>=0,X1+1=Out,W1+1=V] 
* CE 60: cons(V,V1,Out) = 1+ cons(W1,X1,Y1)
     [X1>=0,W1>=0,Y1+1=Out,X1+1=V1,W1+1=V] 

### Cost equations --> "Loop" of cons/3 
* CEs [59] --> Loop 43 
* CEs [60] --> Loop 44 
* CEs [58] --> Loop 45 

#### Loops of cons/3 
* Loop 43: cons(V,V1,Out)->  cons(V',V1,Out')
                  [V1>=0,V>=1,Out=Out'+1,V=V'+1] 
* Loop 44: cons(V,V1,Out)->  cons(V',V1',Out')
                  [V1>=1,V>=1,Out=Out'+1,V1=V1'+1,V=V'+1] 
* Loop 45: cons(V,V1,Out) [V1>=0,V>=0,Out=0] 

### Ranking functions of CR cons(V,V1,Out) 
* RF of phase [43,44]: [V]

#### Partial ranking functions of CR cons(V,V1,Out) 
* Partial RF of phase [43,44]:
  - RF of loop [43:1,44:1]:
    V
  - RF of loop [44:1]:
    V1


### Resulting Chains:cons(V,V1,Out) 
* [[43,44],45]
* [45]


### Merging Chains  cons/3 into  External patterns of execution 
* [[45]] --> 1 
* [[45,[43,44]]] --> 2 


### Specialization of cost equations from/2 
* CE 28 is refined into CE [61] 
* CE 27 is refined into CE [62] 


#### Refined cost equations from/2 
* CE 61: from(V,Out) = 0
     [V>=0,Out=0] 
* CE 62: from(V,Out) = 1+ from(W,X)
     [W>=0,X+1=Out,W+1=V] 

### Cost equations --> "Loop" of from/2 
* CEs [62] --> Loop 46 
* CEs [61] --> Loop 47 

#### Loops of from/2 
* Loop 46: from(V,Out)->  from(V',Out')
                  [V'>=0,Out=Out'+1,V'+1=V] 
* Loop 47: from(V,Out) [V>=0,Out=0] 

### Ranking functions of CR from(V,Out) 
* RF of phase [46]: [V]

#### Partial ranking functions of CR from(V,Out) 
* Partial RF of phase [46]:
  - RF of loop [46:1]:
    V


### Resulting Chains:from(V,Out) 
* [[46],47]
* [47]


### Merging Chains  from/2 into  External patterns of execution 
* [[47]] --> 1 
* [[47,[46]]] --> 2 


### Specialization of cost equations fun/3 
* CE 39 is refined into CE [63] 
* CE 36 is refined into CE [64] 
* CE 38 is refined into CE [65] 
* CE 37 is refined into CE [66] 


#### Refined cost equations fun/3 
* CE 63: fun(V,V1,Out) = 0
     [V1>=0,V>=0,Out=0] 
* CE 64: fun(V,V1,Out) = 1+ fun(V,W1,X1)
     [W1>=0,V>=0,X1+1=Out,W1+1=V1] 
* CE 65: fun(V,V1,Out) = 1+ fun(W1,V1,X1)
     [W1>=0,V1>=0,X1+1=Out,W1+1=V] 
* CE 66: fun(V,V1,Out) = 1+ fun(W1,X1,Y1)
     [X1>=0,W1>=0,Y1+1=Out,X1+1=V1,W1+1=V] 

### Cost equations --> "Loop" of fun/3 
* CEs [64] --> Loop 48 
* CEs [65] --> Loop 49 
* CEs [66] --> Loop 50 
* CEs [63] --> Loop 51 

#### Loops of fun/3 
* Loop 48: fun(V,V1,Out)->  fun(V,V1',Out')
                  [V1>=1,V>=0,Out=Out'+1,V1=V1'+1] 
* Loop 49: fun(V,V1,Out)->  fun(V',V1,Out')
                  [V1>=0,V>=1,Out=Out'+1,V=V'+1] 
* Loop 50: fun(V,V1,Out)->  fun(V',V1',Out')
                  [V1>=1,V>=1,Out=Out'+1,V1=V1'+1,V=V'+1] 
* Loop 51: fun(V,V1,Out) [V1>=0,V>=0,Out=0] 

### Ranking functions of CR fun(V,V1,Out) 
* RF of phase [48,49,50]: [V+V1]

#### Partial ranking functions of CR fun(V,V1,Out) 
* Partial RF of phase [48,49,50]:
  - RF of loop [48:1,50:1]:
    V1
  - RF of loop [49:1,50:1]:
    V


### Resulting Chains:fun(V,V1,Out) 
* [[48,49,50],51]
* [51]


### Merging Chains  fun/3 into  External patterns of execution 
* [[51]] --> 1 
* [[51,[48,49,50]]] --> 2 


### Specialization of cost equations fun1/3 
* CE 45 is refined into CE [67] 
* CE 44 is refined into CE [68] 
* CE 43 is refined into CE [69] 
* CE 42 is refined into CE [70] 


#### Refined cost equations fun1/3 
* CE 67: fun1(V,V1,Out) = 0
     [V1>=0,V>=0,Out=0] 
* CE 68: fun1(V,V1,Out) = 1+ fun1(V,W1,X1)
     [W1>=0,V>=0,X1+1=Out,W1+1=V1] 
* CE 69: fun1(V,V1,Out) = 1+ fun1(W1,V1,X1)
     [W1>=0,V1>=0,X1+1=Out,W1+1=V] 
* CE 70: fun1(V,V1,Out) = 1+ fun1(W1,X1,Y1)
     [X1>=0,W1>=0,Y1+1=Out,X1+1=V1,W1+1=V] 

### Cost equations --> "Loop" of fun1/3 
* CEs [68] --> Loop 52 
* CEs [69] --> Loop 53 
* CEs [70] --> Loop 54 
* CEs [67] --> Loop 55 

#### Loops of fun1/3 
* Loop 52: fun1(V,V1,Out)->  fun1(V,V1',Out')
                  [V1>=1,V>=0,Out=Out'+1,V1=V1'+1] 
* Loop 53: fun1(V,V1,Out)->  fun1(V',V1,Out')
                  [V1>=0,V>=1,Out=Out'+1,V=V'+1] 
* Loop 54: fun1(V,V1,Out)->  fun1(V',V1',Out')
                  [V1>=1,V>=1,Out=Out'+1,V1=V1'+1,V=V'+1] 
* Loop 55: fun1(V,V1,Out) [V1>=0,V>=0,Out=0] 

### Ranking functions of CR fun1(V,V1,Out) 
* RF of phase [52,53,54]: [V+V1]

#### Partial ranking functions of CR fun1(V,V1,Out) 
* Partial RF of phase [52,53,54]:
  - RF of loop [52:1,54:1]:
    V1
  - RF of loop [53:1,54:1]:
    V


### Resulting Chains:fun1(V,V1,Out) 
* [[52,53,54],55]
* [55]


### Merging Chains  fun1/3 into  External patterns of execution 
* [[55]] --> 1 
* [[55,[52,53,54]]] --> 2 


### Specialization of cost equations negrecip/2 
* CE 17 is refined into CE [71] 
* CE 16 is refined into CE [72] 


#### Refined cost equations negrecip/2 
* CE 71: negrecip(V,Out) = 0
     [V>=0,Out=0] 
* CE 72: negrecip(V,Out) = 1+ negrecip(W,X)
     [W>=0,X+1=Out,W+1=V] 

### Cost equations --> "Loop" of negrecip/2 
* CEs [72] --> Loop 56 
* CEs [71] --> Loop 57 

#### Loops of negrecip/2 
* Loop 56: negrecip(V,Out)->  negrecip(V',Out')
                  [V'>=0,Out=Out'+1,V'+1=V] 
* Loop 57: negrecip(V,Out) [V>=0,Out=0] 

### Ranking functions of CR negrecip(V,Out) 
* RF of phase [56]: [V]

#### Partial ranking functions of CR negrecip(V,Out) 
* Partial RF of phase [56]:
  - RF of loop [56:1]:
    V


### Resulting Chains:negrecip(V,Out) 
* [[56],57]
* [57]


### Merging Chains  negrecip/2 into  External patterns of execution 
* [[57]] --> 1 
* [[57,[56]]] --> 2 


### Specialization of cost equations pi/2 
* CE 51 is refined into CE [73] 
* CE 50 is refined into CE [74] 


#### Refined cost equations pi/2 
* CE 73: pi(V,Out) = 0
     [V>=0,Out=0] 
* CE 74: pi(V,Out) = 1+ pi(W,X)
     [W>=0,X+1=Out,W+1=V] 

### Cost equations --> "Loop" of pi/2 
* CEs [74] --> Loop 58 
* CEs [73] --> Loop 59 

#### Loops of pi/2 
* Loop 58: pi(V,Out)->  pi(V',Out')
                  [V'>=0,Out=Out'+1,V'+1=V] 
* Loop 59: pi(V,Out) [V>=0,Out=0] 

### Ranking functions of CR pi(V,Out) 
* RF of phase [58]: [V]

#### Partial ranking functions of CR pi(V,Out) 
* Partial RF of phase [58]:
  - RF of loop [58:1]:
    V


### Resulting Chains:pi(V,Out) 
* [[58],59]
* [59]


### Merging Chains  pi/2 into  External patterns of execution 
* [[59]] --> 1 
* [[59,[58]]] --> 2 


### Specialization of cost equations plus/3 
* CE 55 is refined into CE [75] 
* CE 53 is refined into CE [76] 
* CE 54 is refined into CE [77] 
* CE 52 is refined into CE [78] 


#### Refined cost equations plus/3 
* CE 75: plus(V,V1,Out) = 0
     [V1>=0,V>=0,Out=0] 
* CE 76: plus(V,V1,Out) = 1+ plus(V,W1,X1)
     [W1>=0,V>=0,X1+1=Out,W1+1=V1] 
* CE 77: plus(V,V1,Out) = 1+ plus(W1,V1,X1)
     [W1>=0,V1>=0,X1+1=Out,W1+1=V] 
* CE 78: plus(V,V1,Out) = 1+ plus(W1,X1,Y1)
     [X1>=0,W1>=0,Y1+1=Out,X1+1=V1,W1+1=V] 

### Cost equations --> "Loop" of plus/3 
* CEs [76] --> Loop 60 
* CEs [77] --> Loop 61 
* CEs [78] --> Loop 62 
* CEs [75] --> Loop 63 

#### Loops of plus/3 
* Loop 60: plus(V,V1,Out)->  plus(V,V1',Out')
                  [V1>=1,V>=0,Out=Out'+1,V1=V1'+1] 
* Loop 61: plus(V,V1,Out)->  plus(V',V1,Out')
                  [V1>=0,V>=1,Out=Out'+1,V=V'+1] 
* Loop 62: plus(V,V1,Out)->  plus(V',V1',Out')
                  [V1>=1,V>=1,Out=Out'+1,V1=V1'+1,V=V'+1] 
* Loop 63: plus(V,V1,Out) [V1>=0,V>=0,Out=0] 

### Ranking functions of CR plus(V,V1,Out) 
* RF of phase [60,61,62]: [V+V1]

#### Partial ranking functions of CR plus(V,V1,Out) 
* Partial RF of phase [60,61,62]:
  - RF of loop [60:1,62:1]:
    V1
  - RF of loop [61:1,62:1]:
    V


### Resulting Chains:plus(V,V1,Out) 
* [[60,61,62],63]
* [63]


### Merging Chains  plus/3 into  External patterns of execution 
* [[63]] --> 1 
* [[63,[60,61,62]]] --> 2 


### Specialization of cost equations posrecip/2 
* CE 26 is refined into CE [79] 
* CE 25 is refined into CE [80] 


#### Refined cost equations posrecip/2 
* CE 79: posrecip(V,Out) = 0
     [V>=0,Out=0] 
* CE 80: posrecip(V,Out) = 1+ posrecip(W,X)
     [W>=0,X+1=Out,W+1=V] 

### Cost equations --> "Loop" of posrecip/2 
* CEs [80] --> Loop 64 
* CEs [79] --> Loop 65 

#### Loops of posrecip/2 
* Loop 64: posrecip(V,Out)->  posrecip(V',Out')
                  [V'>=0,Out=Out'+1,V'+1=V] 
* Loop 65: posrecip(V,Out) [V>=0,Out=0] 

### Ranking functions of CR posrecip(V,Out) 
* RF of phase [64]: [V]

#### Partial ranking functions of CR posrecip(V,Out) 
* Partial RF of phase [64]:
  - RF of loop [64:1]:
    V


### Resulting Chains:posrecip(V,Out) 
* [[64],65]
* [65]


### Merging Chains  posrecip/2 into  External patterns of execution 
* [[65]] --> 1 
* [[65,[64]]] --> 2 


### Specialization of cost equations proper/2 
* CE 49 is refined into CE [81] 
* CE 46 is refined into CE [82] 
* CE 47 is refined into CE [83] 
* CE 48 is refined into CE [84] 


#### Refined cost equations proper/2 
* CE 81: proper(V,Out) = 0
     [V>=0,Out=0] 
* CE 82: proper(V,Out) = 1
     [Out=3,V=2] 
* CE 83: proper(V,Out) = 1
     [Out=2,V=1] 
* CE 84: proper(V,Out) = 1
     [Out=1,V=0] 

### Cost equations --> "Loop" of proper/2 
* CEs [81] --> Loop 66 
* CEs [82] --> Loop 67 
* CEs [83] --> Loop 68 
* CEs [84] --> Loop 69 

#### Loops of proper/2 
* Loop 66: proper(V,Out) [V>=0,Out=0] 
* Loop 67: proper(V,Out) [Out=3,V=2] 
* Loop 68: proper(V,Out) [Out=2,V=1] 
* Loop 69: proper(V,Out) [Out=1,V=0] 

### Ranking functions of CR proper(V,Out) 

#### Partial ranking functions of CR proper(V,Out) 


### Resulting Chains:proper(V,Out) 
* [69]
* [68]
* [67]
* [66]


### Merging Chains  proper/2 into  External patterns of execution 
* [[69]] --> 1 
* [[68]] --> 2 
* [[67]] --> 3 
* [[66]] --> 4 


### Specialization of cost equations rcons/3 
* CE 32 is refined into CE [85] 
* CE 31 is refined into CE [86] 
* CE 29 is refined into CE [87] 
* CE 30 is refined into CE [88] 


#### Refined cost equations rcons/3 
* CE 85: rcons(V,V1,Out) = 0
     [V1>=0,V>=0,Out=0] 
* CE 86: rcons(V,V1,Out) = 1+ rcons(V,W1,X1)
     [W1>=0,V>=0,X1+1=Out,W1+1=V1] 
* CE 87: rcons(V,V1,Out) = 1+ rcons(W1,V1,X1)
     [W1>=0,V1>=0,X1+1=Out,W1+1=V] 
* CE 88: rcons(V,V1,Out) = 1+ rcons(W1,X1,Y1)
     [X1>=0,W1>=0,Y1+1=Out,X1+1=V1,W1+1=V] 

### Cost equations --> "Loop" of rcons/3 
* CEs [86] --> Loop 70 
* CEs [87] --> Loop 71 
* CEs [88] --> Loop 72 
* CEs [85] --> Loop 73 

#### Loops of rcons/3 
* Loop 70: rcons(V,V1,Out)->  rcons(V,V1',Out')
                  [V1>=1,V>=0,Out=Out'+1,V1=V1'+1] 
* Loop 71: rcons(V,V1,Out)->  rcons(V',V1,Out')
                  [V1>=0,V>=1,Out=Out'+1,V=V'+1] 
* Loop 72: rcons(V,V1,Out)->  rcons(V',V1',Out')
                  [V1>=1,V>=1,Out=Out'+1,V1=V1'+1,V=V'+1] 
* Loop 73: rcons(V,V1,Out) [V1>=0,V>=0,Out=0] 

### Ranking functions of CR rcons(V,V1,Out) 
* RF of phase [70,71,72]: [V+V1]

#### Partial ranking functions of CR rcons(V,V1,Out) 
* Partial RF of phase [70,71,72]:
  - RF of loop [70:1,72:1]:
    V1
  - RF of loop [71:1,72:1]:
    V


### Resulting Chains:rcons(V,V1,Out) 
* [[70,71,72],73]
* [73]


### Merging Chains  rcons/3 into  External patterns of execution 
* [[73]] --> 1 
* [[73,[70,71,72]]] --> 2 


### Specialization of cost equations s/2 
* CE 57 is refined into CE [89] 
* CE 56 is refined into CE [90] 


#### Refined cost equations s/2 
* CE 89: s(V,Out) = 0
     [V>=0,Out=0] 
* CE 90: s(V,Out) = 1+ s(W,X)
     [W>=0,X+1=Out,W+1=V] 

### Cost equations --> "Loop" of s/2 
* CEs [90] --> Loop 74 
* CEs [89] --> Loop 75 

#### Loops of s/2 
* Loop 74: s(V,Out)->  s(V',Out')
                  [V'>=0,Out=Out'+1,V'+1=V] 
* Loop 75: s(V,Out) [V>=0,Out=0] 

### Ranking functions of CR s(V,Out) 
* RF of phase [74]: [V]

#### Partial ranking functions of CR s(V,Out) 
* Partial RF of phase [74]:
  - RF of loop [74:1]:
    V


### Resulting Chains:s(V,Out) 
* [[74],75]
* [75]


### Merging Chains  s/2 into  External patterns of execution 
* [[75]] --> 1 
* [[75,[74]]] --> 2 


### Specialization of cost equations square/2 
* CE 41 is refined into CE [91] 
* CE 40 is refined into CE [92] 


#### Refined cost equations square/2 
* CE 91: square(V,Out) = 0
     [V>=0,Out=0] 
* CE 92: square(V,Out) = 1+ square(W,X)
     [W>=0,X+1=Out,W+1=V] 

### Cost equations --> "Loop" of square/2 
* CEs [92] --> Loop 76 
* CEs [91] --> Loop 77 

#### Loops of square/2 
* Loop 76: square(V,Out)->  square(V',Out')
                  [V'>=0,Out=Out'+1,V'+1=V] 
* Loop 77: square(V,Out) [V>=0,Out=0] 

### Ranking functions of CR square(V,Out) 
* RF of phase [76]: [V]

#### Partial ranking functions of CR square(V,Out) 
* Partial RF of phase [76]:
  - RF of loop [76:1]:
    V


### Resulting Chains:square(V,Out) 
* [[76],77]
* [77]


### Merging Chains  square/2 into  External patterns of execution 
* [[77]] --> 1 
* [[77,[76]]] --> 2 


### Specialization of cost equations times/3 
* CE 21 is refined into CE [93] 
* CE 19 is refined into CE [94] 
* CE 20 is refined into CE [95] 
* CE 18 is refined into CE [96] 


#### Refined cost equations times/3 
* CE 93: times(V,V1,Out) = 0
     [V1>=0,V>=0,Out=0] 
* CE 94: times(V,V1,Out) = 1+ times(V,W1,X1)
     [W1>=0,V>=0,X1+1=Out,W1+1=V1] 
* CE 95: times(V,V1,Out) = 1+ times(W1,V1,X1)
     [W1>=0,V1>=0,X1+1=Out,W1+1=V] 
* CE 96: times(V,V1,Out) = 1+ times(W1,X1,Y1)
     [X1>=0,W1>=0,Y1+1=Out,X1+1=V1,W1+1=V] 

### Cost equations --> "Loop" of times/3 
* CEs [94] --> Loop 78 
* CEs [95] --> Loop 79 
* CEs [96] --> Loop 80 
* CEs [93] --> Loop 81 

#### Loops of times/3 
* Loop 78: times(V,V1,Out)->  times(V,V1',Out')
                  [V1>=1,V>=0,Out=Out'+1,V1=V1'+1] 
* Loop 79: times(V,V1,Out)->  times(V',V1,Out')
                  [V1>=0,V>=1,Out=Out'+1,V=V'+1] 
* Loop 80: times(V,V1,Out)->  times(V',V1',Out')
                  [V1>=1,V>=1,Out=Out'+1,V1=V1'+1,V=V'+1] 
* Loop 81: times(V,V1,Out) [V1>=0,V>=0,Out=0] 

### Ranking functions of CR times(V,V1,Out) 
* RF of phase [78,79,80]: [V+V1]

#### Partial ranking functions of CR times(V,V1,Out) 
* Partial RF of phase [78,79,80]:
  - RF of loop [78:1,80:1]:
    V1
  - RF of loop [79:1,80:1]:
    V


### Resulting Chains:times(V,V1,Out) 
* [[78,79,80],81]
* [81]


### Merging Chains  times/3 into  External patterns of execution 
* [[81]] --> 1 
* [[81,[78,79,80]]] --> 2 


### Specialization of cost equations top/2 
* CE 24 is refined into CE [97] 
* CE 22 is refined into CE [98] 
* CE 23 is refined into CE [99,100,101,102] 


#### Refined cost equations top/2 
* CE 97: top(V,Out) = 0
     [V>=0,Out=0] 
* CE 98: top(V,Out) = 1+ top(V,Out)
     [V>=1] 
* CE 99: top(V,Out) = 1+ proper(W,X):1+ top(Y,Out)
     [Y=1,X=1,W=0,V=1] 
* CE 100: top(V,Out) = 1+ proper(W,X):2+ top(Y,Out)
     [Y=2,X=2,W=1,V=2] 
* CE 101: top(V,Out) = 1+ proper(W,X):3+ top(Y,Out)
     [Y=3,X=3,W=2,V=3] 
* CE 102: top(V,Out) = 1+ proper(W,X):4+ top(Y,Out)
     [W>=0,W+1=V,Y=0,X=0] 

### Cost equations --> "Loop" of top/2 
* CEs [102] --> Loop 82 
* CEs [101] --> Loop 83 
* CEs [100] --> Loop 84 
* CEs [98,99] --> Loop 85 
* CEs [97] --> Loop 86 

#### Loops of top/2 
* Loop 82: top(V,Out)->  top(V',Out)
                  [V>=1,V'=0] 
* Loop 83: top(V,Out)->  top(V',Out)
                  [V'=3,V=3] 
* Loop 84: top(V,Out)->  top(V',Out)
                  [V'=2,V=2] 
* Loop 85: top(V,Out)->  top(V,Out)
                  [V>=1] 
* Loop 86: top(V,Out) [V>=0,Out=0] 

### Ranking functions of CR top(V,Out) 

#### Partial ranking functions of CR top(V,Out) 


### Resulting Chains:top(V,Out) 
* [[83,84,85]]...
* [[83,84,85],86]
* [[83,84,85],82,86]
* [86]
* [82,86]


### Merging Chains  top/2 into  External patterns of execution 
* [[86,82],[86],[86,82,[83,84,85]],[86,[83,84,85]]] --> 1 
* [[[83,84,85]]] --> 2 


### Specialization of cost equations start/2 
* CE 2 is refined into CE [103,104] 
* CE 3 is refined into CE [105,106] 
* CE 4 is refined into CE [107,108] 
* CE 5 is refined into CE [109,110] 
* CE 6 is refined into CE [111,112] 
* CE 7 is refined into CE [113,114] 
* CE 8 is refined into CE [115,116] 
* CE 9 is refined into CE [117,118] 
* CE 10 is refined into CE [119,120] 
* CE 11 is refined into CE [121,122] 
* CE 12 is refined into CE [123,124,125,126] 
* CE 13 is refined into CE [127,128] 
* CE 14 is refined into CE [129,130] 
* CE 15 is refined into CE [131,132] 


#### Refined cost equations start/2 
* CE 103: start(V,V1) = 0+ negrecip(V,W1):1
     [V>=0,W1=0] 
* CE 104: start(V,V1) = 0+ negrecip(V,W1):2
     [V>=W1,W1>=1] 
* CE 105: start(V,V1) = 0+ times(V,V1,W1):1
     [V1>=0,V>=0,W1=0] 
* CE 106: start(V,V1) = 0+ times(V,V1,W1):2
     [V+V1>=W1,W1>=1,V1>=0,V>=0] 
* CE 107: start(V,V1) = 0+ top(V,W1):1
     [V>=0,W1=0] 
* CE 108: start(V,V1) = 0+ top(V,W1):2
     [V>=1] 
* CE 109: start(V,V1) = 0+ posrecip(V,W1):1
     [V>=0,W1=0] 
* CE 110: start(V,V1) = 0+ posrecip(V,W1):2
     [V>=W1,W1>=1] 
* CE 111: start(V,V1) = 0+ from(V,W1):1
     [V>=0,W1=0] 
* CE 112: start(V,V1) = 0+ from(V,W1):2
     [V>=W1,W1>=1] 
* CE 113: start(V,V1) = 0+ rcons(V,V1,W1):1
     [V1>=0,V>=0,W1=0] 
* CE 114: start(V,V1) = 0+ rcons(V,V1,W1):2
     [V+V1>=W1,W1>=1,V1>=0,V>=0] 
* CE 115: start(V,V1) = 0+ cons(V,V1,W1):1
     [V1>=0,V>=0,W1=0] 
* CE 116: start(V,V1) = 0+ cons(V,V1,W1):2
     [V>=W1,W1>=1,V1>=0] 
* CE 117: start(V,V1) = 0+ fun(V,V1,W1):1
     [V1>=0,V>=0,W1=0] 
* CE 118: start(V,V1) = 0+ fun(V,V1,W1):2
     [V+V1>=W1,W1>=1,V1>=0,V>=0] 
* CE 119: start(V,V1) = 0+ square(V,W1):1
     [V>=0,W1=0] 
* CE 120: start(V,V1) = 0+ square(V,W1):2
     [V>=W1,W1>=1] 
* CE 121: start(V,V1) = 0+ fun1(V,V1,W1):1
     [V1>=0,V>=0,W1=0] 
* CE 122: start(V,V1) = 0+ fun1(V,V1,W1):2
     [V+V1>=W1,W1>=1,V1>=0,V>=0] 
* CE 123: start(V,V1) = 0+ proper(W1,X1):1
     [X1=1,W1=0,V=0] 
* CE 124: start(V,V1) = 0+ proper(W1,X1):2
     [X1=2,W1=1,V=1] 
* CE 125: start(V,V1) = 0+ proper(W1,X1):3
     [X1=3,W1=2,V=2] 
* CE 126: start(V,V1) = 0+ proper(V,W1):4
     [V>=0,W1=0] 
* CE 127: start(V,V1) = 0+ pi(V,W1):1
     [V>=0,W1=0] 
* CE 128: start(V,V1) = 0+ pi(V,W1):2
     [V>=W1,W1>=1] 
* CE 129: start(V,V1) = 0+ plus(V,V1,W1):1
     [V1>=0,V>=0,W1=0] 
* CE 130: start(V,V1) = 0+ plus(V,V1,W1):2
     [V+V1>=W1,W1>=1,V1>=0,V>=0] 
* CE 131: start(V,V1) = 0+ s(V,W1):1
     [V>=0,W1=0] 
* CE 132: start(V,V1) = 0+ s(V,W1):2
     [V>=W1,W1>=1] 

### Cost equations --> "Loop" of start/2 
* CEs [125] --> Loop 87 
* CEs [124] --> Loop 88 
* CEs [103,104,105,106,107,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,126,127,128,129,130,131,132] --> Loop 89 
* CEs [108] --> Loop 90 

#### Loops of start/2 
* Loop 87: start(V,V1) [V=2] 
* Loop 88: start(V,V1) [V=1] 
* Loop 89: start(V,V1) [V>=0] 
* Loop 90: start(V,V1) [V>=1] 

### Ranking functions of CR start(V,V1) 

#### Partial ranking functions of CR start(V,V1) 


### Resulting Chains:start(V,V1) 
* [90]...
* [89]
* [88]
* [87]


### Merging Chains  start/2 into  External patterns of execution 
* [[88],[89]] --> 1 
* [[87]] --> 2 
* [[90]] --> 3 


Computing Bounds
=====================================

#### Cost of loops [43,44] 

 * loop 43:cons(V,V1,Out) -> [cons(V',V1',Out')] 
1
 * loop 44:cons(V,V1,Out) -> [cons(V',V1',Out')] 
1
#### Cost of phase [43,44]:cons(V,V1,Out) -> [cons(V',V1',Out')] 
1*it(43)+1*it(44)+0
  Such that:it(44) =< V1
it(44) =< V1-V1'
aux(1) =< V
aux(2) =< V-V'
it(43) =< aux(1)
it(44) =< aux(1)
it(43) =< aux(2)
it(44) =< aux(2)

#### Cost of chains of cons(V,V1,Out):
* Chain [[43,44],45]: 1*it(43)+1*it(44)+0
  Such that:aux(1) =< V
it(44) =< V1
aux(2) =< Out
it(43) =< aux(1)
it(44) =< aux(1)
it(43) =< aux(2)
it(44) =< aux(2)

  with precondition: [V1>=0,Out>=1,V>=Out] 

* Chain [45]: 0
  with precondition: [Out=0,V>=0,V1>=0] 


#### Cost of loops [46] 

 * loop 46:from(V,Out) -> [from(V',Out')] 
1
#### Cost of phase [46]:from(V,Out) -> [from(V',Out')] 
1*it(46)+0
  Such that:it(46) =< V
it(46) =< V-V'

#### Cost of chains of from(V,Out):
* Chain [[46],47]: 1*it(46)+0
  Such that:it(46) =< Out

  with precondition: [Out>=1,V>=Out] 

* Chain [47]: 0
  with precondition: [Out=0,V>=0] 


#### Cost of loops [48,49,50] 

 * loop 48:fun(V,V1,Out) -> [fun(V',V1',Out')] 
1
 * loop 49:fun(V,V1,Out) -> [fun(V',V1',Out')] 
1
 * loop 50:fun(V,V1,Out) -> [fun(V',V1',Out')] 
1
#### Cost of phase [48,49,50]:fun(V,V1,Out) -> [fun(V',V1',Out')] 
1*it(48)+1*it(49)+1*it(50)+0
  Such that:aux(3) =< V
aux(4) =< V+V1
aux(5) =< V+V1-V'-V1'
aux(6) =< V-V'
aux(7) =< V1
aux(8) =< V1-V1'
it(49) =< aux(3)
it(50) =< aux(3)
it(48) =< aux(4)
it(49) =< aux(4)
it(50) =< aux(4)
it(48) =< aux(5)
it(49) =< aux(5)
it(50) =< aux(5)
it(49) =< aux(6)
it(50) =< aux(6)
it(48) =< aux(7)
it(50) =< aux(7)
it(48) =< aux(8)
it(50) =< aux(8)

#### Cost of chains of fun(V,V1,Out):
* Chain [[48,49,50],51]: 1*it(48)+1*it(49)+1*it(50)+0
  Such that:aux(9) =< V
aux(10) =< V+V1
aux(11) =< V1
it(49) =< aux(9)
it(50) =< aux(9)
it(48) =< aux(10)
it(49) =< aux(10)
it(50) =< aux(10)
it(48) =< aux(11)
it(50) =< aux(11)

  with precondition: [V>=0,V1>=0,Out>=1,V+V1>=Out] 

* Chain [51]: 0
  with precondition: [Out=0,V>=0,V1>=0] 


#### Cost of loops [52,53,54] 

 * loop 52:fun1(V,V1,Out) -> [fun1(V',V1',Out')] 
1
 * loop 53:fun1(V,V1,Out) -> [fun1(V',V1',Out')] 
1
 * loop 54:fun1(V,V1,Out) -> [fun1(V',V1',Out')] 
1
#### Cost of phase [52,53,54]:fun1(V,V1,Out) -> [fun1(V',V1',Out')] 
1*it(52)+1*it(53)+1*it(54)+0
  Such that:aux(12) =< V
aux(13) =< V+V1
aux(14) =< V+V1-V'-V1'
aux(15) =< V-V'
aux(16) =< V1
aux(17) =< V1-V1'
it(53) =< aux(12)
it(54) =< aux(12)
it(52) =< aux(13)
it(53) =< aux(13)
it(54) =< aux(13)
it(52) =< aux(14)
it(53) =< aux(14)
it(54) =< aux(14)
it(53) =< aux(15)
it(54) =< aux(15)
it(52) =< aux(16)
it(54) =< aux(16)
it(52) =< aux(17)
it(54) =< aux(17)

#### Cost of chains of fun1(V,V1,Out):
* Chain [[52,53,54],55]: 1*it(52)+1*it(53)+1*it(54)+0
  Such that:aux(18) =< V
aux(19) =< V+V1
aux(20) =< V1
it(53) =< aux(18)
it(54) =< aux(18)
it(52) =< aux(19)
it(53) =< aux(19)
it(54) =< aux(19)
it(52) =< aux(20)
it(54) =< aux(20)

  with precondition: [V>=0,V1>=0,Out>=1,V+V1>=Out] 

* Chain [55]: 0
  with precondition: [Out=0,V>=0,V1>=0] 


#### Cost of loops [56] 

 * loop 56:negrecip(V,Out) -> [negrecip(V',Out')] 
1
#### Cost of phase [56]:negrecip(V,Out) -> [negrecip(V',Out')] 
1*it(56)+0
  Such that:it(56) =< V
it(56) =< V-V'

#### Cost of chains of negrecip(V,Out):
* Chain [[56],57]: 1*it(56)+0
  Such that:it(56) =< Out

  with precondition: [Out>=1,V>=Out] 

* Chain [57]: 0
  with precondition: [Out=0,V>=0] 


#### Cost of loops [58] 

 * loop 58:pi(V,Out) -> [pi(V',Out')] 
1
#### Cost of phase [58]:pi(V,Out) -> [pi(V',Out')] 
1*it(58)+0
  Such that:it(58) =< V
it(58) =< V-V'

#### Cost of chains of pi(V,Out):
* Chain [[58],59]: 1*it(58)+0
  Such that:it(58) =< Out

  with precondition: [Out>=1,V>=Out] 

* Chain [59]: 0
  with precondition: [Out=0,V>=0] 


#### Cost of loops [60,61,62] 

 * loop 60:plus(V,V1,Out) -> [plus(V',V1',Out')] 
1
 * loop 61:plus(V,V1,Out) -> [plus(V',V1',Out')] 
1
 * loop 62:plus(V,V1,Out) -> [plus(V',V1',Out')] 
1
#### Cost of phase [60,61,62]:plus(V,V1,Out) -> [plus(V',V1',Out')] 
1*it(60)+1*it(61)+1*it(62)+0
  Such that:aux(21) =< V
aux(22) =< V+V1
aux(23) =< V+V1-V'-V1'
aux(24) =< V-V'
aux(25) =< V1
aux(26) =< V1-V1'
it(61) =< aux(21)
it(62) =< aux(21)
it(60) =< aux(22)
it(61) =< aux(22)
it(62) =< aux(22)
it(60) =< aux(23)
it(61) =< aux(23)
it(62) =< aux(23)
it(61) =< aux(24)
it(62) =< aux(24)
it(60) =< aux(25)
it(62) =< aux(25)
it(60) =< aux(26)
it(62) =< aux(26)

#### Cost of chains of plus(V,V1,Out):
* Chain [[60,61,62],63]: 1*it(60)+1*it(61)+1*it(62)+0
  Such that:aux(27) =< V
aux(28) =< V+V1
aux(29) =< V1
it(61) =< aux(27)
it(62) =< aux(27)
it(60) =< aux(28)
it(61) =< aux(28)
it(62) =< aux(28)
it(60) =< aux(29)
it(62) =< aux(29)

  with precondition: [V>=0,V1>=0,Out>=1,V+V1>=Out] 

* Chain [63]: 0
  with precondition: [Out=0,V>=0,V1>=0] 


#### Cost of loops [64] 

 * loop 64:posrecip(V,Out) -> [posrecip(V',Out')] 
1
#### Cost of phase [64]:posrecip(V,Out) -> [posrecip(V',Out')] 
1*it(64)+0
  Such that:it(64) =< V
it(64) =< V-V'

#### Cost of chains of posrecip(V,Out):
* Chain [[64],65]: 1*it(64)+0
  Such that:it(64) =< Out

  with precondition: [Out>=1,V>=Out] 

* Chain [65]: 0
  with precondition: [Out=0,V>=0] 


#### Cost of chains of proper(V,Out):
* Chain [69]: 1
  with precondition: [V=0,Out=1] 

* Chain [68]: 1
  with precondition: [V=1,Out=2] 

* Chain [67]: 1
  with precondition: [V=2,Out=3] 

* Chain [66]: 0
  with precondition: [Out=0,V>=0] 


#### Cost of loops [70,71,72] 

 * loop 70:rcons(V,V1,Out) -> [rcons(V',V1',Out')] 
1
 * loop 71:rcons(V,V1,Out) -> [rcons(V',V1',Out')] 
1
 * loop 72:rcons(V,V1,Out) -> [rcons(V',V1',Out')] 
1
#### Cost of phase [70,71,72]:rcons(V,V1,Out) -> [rcons(V',V1',Out')] 
1*it(70)+1*it(71)+1*it(72)+0
  Such that:aux(30) =< V
aux(31) =< V+V1
aux(32) =< V+V1-V'-V1'
aux(33) =< V-V'
aux(34) =< V1
aux(35) =< V1-V1'
it(71) =< aux(30)
it(72) =< aux(30)
it(70) =< aux(31)
it(71) =< aux(31)
it(72) =< aux(31)
it(70) =< aux(32)
it(71) =< aux(32)
it(72) =< aux(32)
it(71) =< aux(33)
it(72) =< aux(33)
it(70) =< aux(34)
it(72) =< aux(34)
it(70) =< aux(35)
it(72) =< aux(35)

#### Cost of chains of rcons(V,V1,Out):
* Chain [[70,71,72],73]: 1*it(70)+1*it(71)+1*it(72)+0
  Such that:aux(36) =< V
aux(37) =< V+V1
aux(38) =< V1
it(71) =< aux(36)
it(72) =< aux(36)
it(70) =< aux(37)
it(71) =< aux(37)
it(72) =< aux(37)
it(70) =< aux(38)
it(72) =< aux(38)

  with precondition: [V>=0,V1>=0,Out>=1,V+V1>=Out] 

* Chain [73]: 0
  with precondition: [Out=0,V>=0,V1>=0] 


#### Cost of loops [74] 

 * loop 74:s(V,Out) -> [s(V',Out')] 
1
#### Cost of phase [74]:s(V,Out) -> [s(V',Out')] 
1*it(74)+0
  Such that:it(74) =< V
it(74) =< V-V'

#### Cost of chains of s(V,Out):
* Chain [[74],75]: 1*it(74)+0
  Such that:it(74) =< Out

  with precondition: [Out>=1,V>=Out] 

* Chain [75]: 0
  with precondition: [Out=0,V>=0] 


#### Cost of loops [76] 

 * loop 76:square(V,Out) -> [square(V',Out')] 
1
#### Cost of phase [76]:square(V,Out) -> [square(V',Out')] 
1*it(76)+0
  Such that:it(76) =< V
it(76) =< V-V'

#### Cost of chains of square(V,Out):
* Chain [[76],77]: 1*it(76)+0
  Such that:it(76) =< Out

  with precondition: [Out>=1,V>=Out] 

* Chain [77]: 0
  with precondition: [Out=0,V>=0] 


#### Cost of loops [78,79,80] 

 * loop 78:times(V,V1,Out) -> [times(V',V1',Out')] 
1
 * loop 79:times(V,V1,Out) -> [times(V',V1',Out')] 
1
 * loop 80:times(V,V1,Out) -> [times(V',V1',Out')] 
1
#### Cost of phase [78,79,80]:times(V,V1,Out) -> [times(V',V1',Out')] 
1*it(78)+1*it(79)+1*it(80)+0
  Such that:aux(39) =< V
aux(40) =< V+V1
aux(41) =< V+V1-V'-V1'
aux(42) =< V-V'
aux(43) =< V1
aux(44) =< V1-V1'
it(79) =< aux(39)
it(80) =< aux(39)
it(78) =< aux(40)
it(79) =< aux(40)
it(80) =< aux(40)
it(78) =< aux(41)
it(79) =< aux(41)
it(80) =< aux(41)
it(79) =< aux(42)
it(80) =< aux(42)
it(78) =< aux(43)
it(80) =< aux(43)
it(78) =< aux(44)
it(80) =< aux(44)

#### Cost of chains of times(V,V1,Out):
* Chain [[78,79,80],81]: 1*it(78)+1*it(79)+1*it(80)+0
  Such that:aux(45) =< V
aux(46) =< V+V1
aux(47) =< V1
it(79) =< aux(45)
it(80) =< aux(45)
it(78) =< aux(46)
it(79) =< aux(46)
it(80) =< aux(46)
it(78) =< aux(47)
it(80) =< aux(47)

  with precondition: [V>=0,V1>=0,Out>=1,V+V1>=Out] 

* Chain [81]: 0
  with precondition: [Out=0,V>=0,V1>=0] 


#### Cost of loops [83,84,85] 

 * loop 83:top(V,Out) -> [top(V',Out')] 
2
 * loop 84:top(V,Out) -> [top(V',Out')] 
2
 * loop 85:top(V,Out) -> [top(V',Out')] 
2
#### Cost of phase [83,84,85]:top(V,Out) -> [top(V',Out')] 
6*it(83)+0
#### Cost of phase [83,84,85]:top(V,Out) -> [top(V',Out')] 
6*it(83)+0
#### Cost of phase [83,84,85]:top(V,Out) -> [top(V',Out')] 
6*it(83)+0
#### Cost of chains of top(V,Out):
* Chain [[83,84,85]]...: 6*it(83)+0
  with precondition: [V>=1] 

* Chain [[83,84,85],86]: 6*it(83)+0
  with precondition: [Out=0,V>=1] 

* Chain [[83,84,85],82,86]: 6*it(83)+1
  with precondition: [Out=0,V>=1] 

* Chain [86]: 0
  with precondition: [Out=0,V>=0] 

* Chain [82,86]: 1
  with precondition: [Out=0,V>=1] 


#### Cost of chains of start(V,V1):
* Chain [90]...: 6*s(3)+0
  with precondition: [V>=1] 

* Chain [89]: 7*s(4)+5*s(8)+5*s(9)+5*s(10)+1*s(11)+1*s(21)+1
  Such that:aux(50) =< V
aux(51) =< V+V1
aux(52) =< V1
s(4) =< aux(50)
s(21) =< aux(52)
s(8) =< aux(50)
s(9) =< aux(50)
s(10) =< aux(51)
s(8) =< aux(51)
s(9) =< aux(51)
s(10) =< aux(52)
s(9) =< aux(52)
s(21) =< aux(50)

  with precondition: [V>=0] 

* Chain [88]: 1
  with precondition: [V=1] 

* Chain [87]: 1
  with precondition: [V=2] 


Closed-form bounds of start(V,V1): 
-------------------------------------
* Chain [90]... with precondition: [V>=1] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [89] with precondition: [V>=0] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [88] with precondition: [V=1] 
    - Upper bound: 1 
    - Complexity: constant 
* Chain [87] with precondition: [V=2] 
    - Upper bound: 1 
    - Complexity: constant 

### Maximum cost of start(V,V1): inf 
Asymptotic class: infinity 

Time statistics: 
-------------------------------------
* Partial evaluation computed in 32 ms.
* Invariants computed in 89 ms.
   - Backward Invariants 33 ms.
   - Transitive Invariants 28 ms.
* Refinement performed in 155 ms.
* Termination proved in 30 ms.
* Upper bounds computed in 165 ms.
   - Equation cost structures 56 ms.
   - Phase cost structures 71 ms.
   - Chain cost structures 52 ms.
   - Solving cost expressions 1 ms.
* Total analysis performed in 541 ms.


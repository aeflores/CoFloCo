
Preprocessing Cost Relations
=====================================
4. SCC does not have a single cut point : [fun2/3,mark/2]  
 Merged into fun2mark/3

#### Computed strongly connected components 
0. non_recursive  : [fun/2]
1. non_recursive  : [fun1/2]
2. non_recursive  : [fun3/3]
3. non_recursive  : [fun4/2]
5. non_recursive  : [start/2]
4. recursive [non_tail,multiple] : [fun2mark/3]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into fun/2
1. SCC is partially evaluated into fun1/2
2. SCC is partially evaluated into fun3/3
3. SCC is partially evaluated into fun4/2
5. SCC is partially evaluated into start/2
4. SCC is partially evaluated into fun2mark/3

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations fun/2 
* CE 9 is refined into CE [28] 
* CE 8 is refined into CE [29] 
* CE 7 is refined into CE [30] 


#### Refined cost equations fun/2 
* CE 28: fun(V,Out) = 1
     [V>=0,V+1=Out] 
* CE 29: fun(V,Out) = 1
     [V>=1,V+2=Out] 
* CE 30: fun(V,Out) = 1
     [Out=0,V=0] 

### Cost equations --> "Loop" of fun/2 
* CEs [28] --> Loop 20 
* CEs [29] --> Loop 21 
* CEs [30] --> Loop 22 

#### Loops of fun/2 
* Loop 20: fun(V,Out) [V>=0,V+1=Out] 
* Loop 21: fun(V,Out) [V>=1,V+2=Out] 
* Loop 22: fun(V,Out) [Out=0,V=0] 

### Ranking functions of CR fun(V,Out) 

#### Partial ranking functions of CR fun(V,Out) 


### Resulting Chains:fun(V,Out) 
* [22]
* [21]
* [20]


### Merging Chains  fun/2 into  External patterns of execution 
* [[22]] --> 1 
* [[21]] --> 2 
* [[20]] --> 3 


### Specialization of cost equations fun1/2 
* CE 12 is refined into CE [31] 
* CE 11 is refined into CE [32] 
* CE 10 is refined into CE [33] 


#### Refined cost equations fun1/2 
* CE 31: fun1(V,Out) = 1
     [V>=0,V+1=Out] 
* CE 32: fun1(V,Out) = 1
     [V>=1,V+2=Out] 
* CE 33: fun1(V,Out) = 1
     [Out=1,V=1] 

### Cost equations --> "Loop" of fun1/2 
* CEs [31] --> Loop 23 
* CEs [32] --> Loop 24 
* CEs [33] --> Loop 25 

#### Loops of fun1/2 
* Loop 23: fun1(V,Out) [V>=0,V+1=Out] 
* Loop 24: fun1(V,Out) [V>=1,V+2=Out] 
* Loop 25: fun1(V,Out) [Out=1,V=1] 

### Ranking functions of CR fun1(V,Out) 

#### Partial ranking functions of CR fun1(V,Out) 


### Resulting Chains:fun1(V,Out) 
* [25]
* [24]
* [23]


### Merging Chains  fun1/2 into  External patterns of execution 
* [[25]] --> 1 
* [[24]] --> 2 
* [[23]] --> 3 


### Specialization of cost equations fun3/3 
* CE 24 is refined into CE [34] 
* CE 25 is refined into CE [35] 
* CE 23 is refined into CE [36] 


#### Refined cost equations fun3/3 
* CE 34: fun3(V,V1,Out) = 1
     [V1>=0,V>=1,V+2*V1+2=Out] 
* CE 35: fun3(V,V1,Out) = 1
     [V1>=0,V>=0,V+V1+1=Out] 
* CE 36: fun3(V,V1,Out) = 1
     [V1>=0,Out=1,V=1] 

### Cost equations --> "Loop" of fun3/3 
* CEs [34] --> Loop 26 
* CEs [35] --> Loop 27 
* CEs [36] --> Loop 28 

#### Loops of fun3/3 
* Loop 26: fun3(V,V1,Out) [V1>=0,V>=1,V+2*V1+2=Out] 
* Loop 27: fun3(V,V1,Out) [V1>=0,V>=0,V+V1+1=Out] 
* Loop 28: fun3(V,V1,Out) [V1>=0,Out=1,V=1] 

### Ranking functions of CR fun3(V,V1,Out) 

#### Partial ranking functions of CR fun3(V,V1,Out) 


### Resulting Chains:fun3(V,V1,Out) 
* [28]
* [27]
* [26]


### Merging Chains  fun3/3 into  External patterns of execution 
* [[28]] --> 1 
* [[27]] --> 2 
* [[26]] --> 3 


### Specialization of cost equations fun4/2 
* CE 26 is refined into CE [37] 
* CE 27 is refined into CE [38] 


#### Refined cost equations fun4/2 
* CE 37: fun4(V,Out) = 1
     [V>=0,2*V+3=Out] 
* CE 38: fun4(V,Out) = 1
     [V>=0,V+1=Out] 

### Cost equations --> "Loop" of fun4/2 
* CEs [37] --> Loop 29 
* CEs [38] --> Loop 30 

#### Loops of fun4/2 
* Loop 29: fun4(V,Out) [V>=0,2*V+3=Out] 
* Loop 30: fun4(V,Out) [V>=0,V+1=Out] 

### Ranking functions of CR fun4(V,Out) 

#### Partial ranking functions of CR fun4(V,Out) 


### Resulting Chains:fun4(V,Out) 
* [30]
* [29]


### Merging Chains  fun4/2 into  External patterns of execution 
* [[30]] --> 1 
* [[29]] --> 2 


### Specialization of cost equations fun2mark/3 
* CE 15 is refined into CE [39] 
* CE 20 is refined into CE [40,41] 
* CE 22 is refined into CE [42] 
* CE 21 is refined into CE [43] 
* CE 16 is refined into CE [44,45,46] 
* CE 17 is refined into CE [47,48,49] 
* CE 19 is refined into CE [50,51,52] 
* CE 13 is refined into CE [53] 
* CE 18 is refined into CE [54] 
* CE 14 is refined into CE [55] 


#### Refined cost equations fun2mark/3 
* CE 39: fun2mark(A,B,C) = 1
     [B>=0,A>=0,A+B+1=C] 
* CE 40: fun2mark(A,B,A) = 1+ fun4(C,A):1
     [A>=1,A=C+1] 
* CE 41: fun2mark(A,B,C) = 1+ fun4(D,C):2
     [C>=3,C=2*D+3,C=2*A+1] 
* CE 42: fun2mark(A,B,A) = 1
     [A>=1] 
* CE 43: fun2mark(A,B,C) = 1
     [C=0,A=0] 
* CE 44: fun2mark(A,B,C) = 1+ fun2mark(D,E,F)+ fun(G,H):1
     [D>=0,D+1=A,F=0,H=0,G=0,C=0] 
* CE 45: fun2mark(A,B,C) = 1+ fun2mark(D,E,F)+ fun(G,C):2
     [D>=0,C>=3,C=F+2,C=G+2,D+1=A] 
* CE 46: fun2mark(A,B,C) = 1+ fun2mark(D,E,F)+ fun(G,C):3
     [D>=0,C>=1,C=F+1,C=G+1,D+1=A] 
* CE 47: fun2mark(A,B,C) = 1+ fun2mark(D,E,F)+ fun1(G,H):1
     [D>=0,D+1=A,F=1,H=1,G=1,C=1] 
* CE 48: fun2mark(A,B,C) = 1+ fun2mark(D,E,F)+ fun1(G,C):2
     [D>=0,C>=3,C=F+2,C=G+2,D+1=A] 
* CE 49: fun2mark(A,B,C) = 1+ fun2mark(D,E,F)+ fun1(G,C):3
     [D>=0,C>=1,C=F+1,C=G+1,D+1=A] 
* CE 50: fun2mark(A,B,C) = 1+ fun2mark(D,E,F)+ fun3(G,H,I):1
     [D>=0,H>=0,H+D+1=A,F=1,I=1,G=1,C=1] 
* CE 51: fun2mark(A,B,C) = 1+ fun2mark(D,E,F)+ fun3(F,G,C):2
     [C>=F+1,D>=0,F>=0,C+D=A+F,C=F+G+1] 
* CE 52: fun2mark(A,B,C) = 1+ fun2mark(D,E,F)+ fun3(F,G,C):3
     [C>=F+2,D>=0,F>=1,C+2*D=2*A+F,C=2*G+F+2] 
* CE 53: fun2mark(A,B,C) = 1+ fun2mark(D,E,C)
     [B>=D+1,D>=0,A=0] 
* CE 54: fun2mark(A,B,C) = 1+ fun2mark(D,E,F)+ fun2mark(G,H,I)+ fun2mark(F,I,C)
     [G>=0,D>=0,D+G+1=A] 
* CE 55: fun2mark(A,B,C) = 1+ fun2mark(D,E,F)+ fun2mark(G,H,I)+ fun2mark(F,I,C)
     [B>=G+1,G>=0,D>=0,D+1=A] 

### Cost equations --> "Loop" of fun2mark/3 
* CEs [54] --> Loop 31 
* CEs [55] --> Loop 32 
* CEs [45,48,52] --> Loop 33 
* CEs [46,49,51] --> Loop 34 
* CEs [47,50] --> Loop 35 
* CEs [44] --> Loop 36 
* CEs [53] --> Loop 37 
* CEs [39] --> Loop 38 
* CEs [41] --> Loop 39 
* CEs [40,42] --> Loop 40 
* CEs [43] --> Loop 41 

#### Loops of fun2mark/3 
* Loop 31: fun2mark(A,B,C)->  fun2mark(A',B',C')  fun2mark(A'2,B'2,C'2)  fun2mark(C',C'2,C)
                  [A>=A'+1,A'>=0,A'+A'2+1=A] 
* Loop 32: fun2mark(A,B,C)->  fun2mark(A',B',C')  fun2mark(A'2,B'2,C'2)  fun2mark(C',C'2,C)
                  [B>=A'2+1,A'2>=0,A>=1,A=A'+1] 
* Loop 33: fun2mark(A,B,C)->  fun2mark(A',B',C')
                  [C+2*A'>=2*A+1,A>=A'+1,A'>=0,C'+2*A=2*A'+C] 
* Loop 34: fun2mark(A,B,C)->  fun2mark(A',B',C')
                  [C+A'>=A,A>=A'+1,A'>=0,A+C'=C+A'] 
* Loop 35: fun2mark(A,B,C)->  fun2mark(A',B',C')
                  [A>=A'+1,A'>=0,C'=1,C=1] 
* Loop 36: fun2mark(A,B,C)->  fun2mark(A',B',C')
                  [A>=1,A=A'+1,C'=0,C=0] 
* Loop 37: fun2mark(A,B,C)->  fun2mark(A',B',C)
                  [B>=A'+1,A'>=0,A=0] 
* Loop 38: fun2mark(A,B,C) [B>=0,A>=0,A+B+1=C] 
* Loop 39: fun2mark(A,B,C) [A>=1,2*A+1=C] 
* Loop 40: fun2mark(A,B,A) [A>=1] 
* Loop 41: fun2mark(A,B,C) [C=0,A=0] 

### Ranking functions of CR fun2mark(A,B,C) 

#### Partial ranking functions of CR fun2mark(A,B,C) 
* Partial RF of phase [31,32,33,34,35,36,37]:
  - RF of loop [31:1,31:2,32:1,33:1,34:1,35:1,36:1]:
    A depends on loops [31:3,32:2,32:3,37:1] 


### Resulting Chains:fun2mark(A,B,C) 
* [multiple([31,32,33,34,35,36,37],[[],[41],[40],[39],[38]])]...
* [41]
* [40]
* [39]
* [38]


### Merging Chains  fun2mark/3 into  External patterns of execution 
* [[41]] --> 1 
* [[40]] --> 2 
* [[39]] --> 3 
* [[38]] --> 4 
* [[multiple([31,32,33,34,35,36,37],[[],[41],[40],[39],[38]])]] --> 5 


### Specialization of cost equations start/2 
* CE 2 is refined into CE [56,57,58] 
* CE 3 is refined into CE [59,60,61] 
* CE 4 is refined into CE [62,63,64,65,66] 
* CE 5 is refined into CE [67,68,69] 
* CE 6 is refined into CE [70,71] 


#### Refined cost equations start/2 
* CE 56: start(V,V1) = 0+ fun(W1,X1):1
     [X1=0,W1=0,V=0] 
* CE 57: start(V,V1) = 0+ fun(W1,X1):2
     [X1>=3,X1=W1+2,X1=V+2] 
* CE 58: start(V,V1) = 0+ fun(W1,X1):3
     [X1>=1,X1=W1+1,X1=V+1] 
* CE 59: start(V,V1) = 0+ fun1(W1,X1):1
     [X1=1,W1=1,V=1] 
* CE 60: start(V,V1) = 0+ fun1(W1,X1):2
     [X1>=3,X1=W1+2,X1=V+2] 
* CE 61: start(V,V1) = 0+ fun1(W1,X1):3
     [X1>=1,X1=W1+1,X1=V+1] 
* CE 62: start(V,V1) = 0+ fun2mark(W1,X1,Y1):1
     [Y1=0,W1=0,V=0] 
* CE 63: start(V,V1) = 0+ fun2mark(V,W1,V):2
     [V>=1] 
* CE 64: start(V,V1) = 0+ fun2mark(W1,X1,Y1):3
     [Y1>=3,Y1=2*W1+1,Y1=2*V+1] 
* CE 65: start(V,V1) = 0+ fun2mark(V,W1,X1):4
     [X1>=V+1,V>=0,X1=V+W1+1] 
* CE 66: start(V,V1) = 0+ fun2mark(V,W1,X1):5
     [V>=0] 
* CE 67: start(V,V1) = 0+ fun3(W1,V1,X1):1
     [V1>=0,X1=1,W1=1,V=1] 
* CE 68: start(V,V1) = 0+ fun3(V,W1,X1):2
     [X1>=V+1,V>=0,X1=V+W1+1,X1=V+V1+1] 
* CE 69: start(V,V1) = 0+ fun3(V,W1,X1):3
     [X1>=V+2,V>=1,X1=2*W1+V+2,X1=2*V1+V+2] 
* CE 70: start(V,V1) = 0+ fun4(W1,X1):1
     [X1>=1,X1=W1+1,X1=V+1] 
* CE 71: start(V,V1) = 0+ fun4(W1,X1):2
     [X1>=3,X1=2*W1+3,X1=2*V+3] 

### Cost equations --> "Loop" of start/2 
* CEs [59,67] --> Loop 42 
* CEs [56,57,58,60,61,62,63,64,65,68,69,70,71] --> Loop 43 
* CEs [66] --> Loop 44 

#### Loops of start/2 
* Loop 42: start(V,V1) [V=1] 
* Loop 43: start(V,V1) [V>=0] 
* Loop 44: start(V,V1) [V>=0] 

### Ranking functions of CR start(V,V1) 

#### Partial ranking functions of CR start(V,V1) 


### Resulting Chains:start(V,V1) 
* [44]...
* [43]
* [42]


### Merging Chains  start/2 into  External patterns of execution 
* [[42],[43]] --> 1 
* [[44]] --> 2 


Computing Bounds
=====================================

#### Cost of chains of fun(V,Out):
* Chain [22]: 1
  with precondition: [V=0,Out=0] 

* Chain [21]: 1
  with precondition: [V+2=Out,V>=1] 

* Chain [20]: 1
  with precondition: [V+1=Out,V>=0] 


#### Cost of chains of fun1(V,Out):
* Chain [25]: 1
  with precondition: [V=1,Out=1] 

* Chain [24]: 1
  with precondition: [V+2=Out,V>=1] 

* Chain [23]: 1
  with precondition: [V+1=Out,V>=0] 


#### Cost of chains of fun3(V,V1,Out):
* Chain [28]: 1
  with precondition: [V=1,Out=1,V1>=0] 

* Chain [27]: 1
  with precondition: [V+V1+1=Out,V>=0,V1>=0] 

* Chain [26]: 1
  with precondition: [V+2*V1+2=Out,V>=1,V1>=0] 


#### Cost of chains of fun4(V,Out):
* Chain [30]: 1
  with precondition: [V+1=Out,V>=0] 

* Chain [29]: 1
  with precondition: [2*V+3=Out,V>=0] 


#### Cost of loops [31,32,33,34,35,36,37] 

 * loop 31:fun2mark(A,B,C) -> [fun2mark(A',B',C'),fun2mark(A'2,B'2,C'2),fun2mark(A'3,B'3,C'3)] 
1
 * loop 32:fun2mark(A,B,C) -> [fun2mark(A',B',C'),fun2mark(A'2,B'2,C'2),fun2mark(A'3,B'3,C'3)] 
1
 * loop 33:fun2mark(A,B,C) -> [fun2mark(A',B',C')] 
2
 * loop 34:fun2mark(A,B,C) -> [fun2mark(A',B',C')] 
2
 * loop 35:fun2mark(A,B,C) -> [fun2mark(A',B',C')] 
2
 * loop 36:fun2mark(A,B,C) -> [fun2mark(A',B',C')] 
2
 * loop 37:fun2mark(A,B,C) -> [fun2mark(A',B',C')] 
1
#### Cost of phase [31,32,33,34,35,36,37]:fun2mark(A,B,C) -> [] 
3*it(31)+8*it(33)+2*it([38])+4*it([39])+0
#### Cost of chains of fun2mark(A,B,C):
* Chain [multiple([31,32,33,34,35,36,37],[[],[41],[40],[39],[38]])]...: 3*it(31)+8*it(33)+2*it([38])+4*it([39])+0
  with precondition: [A>=0] 

* Chain [41]: 1
  with precondition: [A=0,C=0] 

* Chain [40]: 2
  with precondition: [A=C,A>=1] 

* Chain [39]: 2
  with precondition: [2*A+1=C,A>=1] 

* Chain [38]: 1
  with precondition: [A+B+1=C,A>=0,B>=0] 


#### Cost of chains of start(V,V1):
* Chain [44]...: 17*s(1)+0
  with precondition: [V>=0] 

* Chain [43]: 2
  with precondition: [V>=0] 

* Chain [42]: 1
  with precondition: [V=1] 


Closed-form bounds of start(V,V1): 
-------------------------------------
* Chain [44]... with precondition: [V>=0] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [43] with precondition: [V>=0] 
    - Upper bound: 2 
    - Complexity: constant 
* Chain [42] with precondition: [V=1] 
    - Upper bound: 1 
    - Complexity: constant 

### Maximum cost of start(V,V1): inf 
Asymptotic class: infinity 

Time statistics: 
-------------------------------------
* Partial evaluation computed in 54 ms.
* Invariants computed in 67 ms.
   - Backward Invariants 15 ms.
   - Transitive Invariants 16 ms.
* Refinement performed in 245 ms.
* Termination proved in 21 ms.
* Upper bounds computed in 265 ms.
   - Equation cost structures 63 ms.
   - Phase cost structures 219 ms.
   - Chain cost structures 0 ms.
   - Solving cost expressions 1 ms.
* Total analysis performed in 742 ms.


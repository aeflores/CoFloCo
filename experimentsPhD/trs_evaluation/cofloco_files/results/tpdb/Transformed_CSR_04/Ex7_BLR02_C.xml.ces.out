
Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. recursive  : [cons/3]
1. recursive  : [from/2]
2. recursive  : [fun/2]
3. recursive  : [head/2]
4. non_recursive  : [proper/2]
5. recursive  : [s/2]
6. recursive  : [sel/3]
7. recursive  : [take/3]
8. recursive  : [top/2]
9. non_recursive  : [start/2]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into cons/3
1. SCC is partially evaluated into from/2
2. SCC is partially evaluated into fun/2
3. SCC is partially evaluated into head/2
4. SCC is partially evaluated into proper/2
5. SCC is partially evaluated into s/2
6. SCC is partially evaluated into sel/3
7. SCC is partially evaluated into take/3
8. SCC is partially evaluated into top/2
9. SCC is partially evaluated into start/2

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations cons/3 
* CE 27 is refined into CE [36] 
* CE 26 is refined into CE [37] 
* CE 25 is refined into CE [38] 


#### Refined cost equations cons/3 
* CE 36: cons(V,V1,Out) = 0
     [V1>=0,V>=0,Out=0] 
* CE 37: cons(V,V1,Out) = 1+ cons(W1,V1,X1)
     [W1>=0,V1>=0,X1+1=Out,W1+1=V] 
* CE 38: cons(V,V1,Out) = 1+ cons(W1,X1,Y1)
     [X1>=0,W1>=0,Y1+1=Out,X1+1=V1,W1+1=V] 

### Cost equations --> "Loop" of cons/3 
* CEs [37] --> Loop 26 
* CEs [38] --> Loop 27 
* CEs [36] --> Loop 28 

#### Loops of cons/3 
* Loop 26: cons(V,V1,Out)->  cons(V',V1,Out')
                  [V1>=0,V>=1,Out=Out'+1,V=V'+1] 
* Loop 27: cons(V,V1,Out)->  cons(V',V1',Out')
                  [V1>=1,V>=1,Out=Out'+1,V1=V1'+1,V=V'+1] 
* Loop 28: cons(V,V1,Out) [V1>=0,V>=0,Out=0] 

### Ranking functions of CR cons(V,V1,Out) 
* RF of phase [26,27]: [V]

#### Partial ranking functions of CR cons(V,V1,Out) 
* Partial RF of phase [26,27]:
  - RF of loop [26:1,27:1]:
    V
  - RF of loop [27:1]:
    V1


### Resulting Chains:cons(V,V1,Out) 
* [[26,27],28]
* [28]


### Merging Chains  cons/3 into  External patterns of execution 
* [[28]] --> 1 
* [[28,[26,27]]] --> 2 


### Specialization of cost equations from/2 
* CE 18 is refined into CE [39] 
* CE 17 is refined into CE [40] 


#### Refined cost equations from/2 
* CE 39: from(V,Out) = 0
     [V>=0,Out=0] 
* CE 40: from(V,Out) = 1+ from(W,X)
     [W>=0,X+1=Out,W+1=V] 

### Cost equations --> "Loop" of from/2 
* CEs [40] --> Loop 29 
* CEs [39] --> Loop 30 

#### Loops of from/2 
* Loop 29: from(V,Out)->  from(V',Out')
                  [V'>=0,Out=Out'+1,V'+1=V] 
* Loop 30: from(V,Out) [V>=0,Out=0] 

### Ranking functions of CR from(V,Out) 
* RF of phase [29]: [V]

#### Partial ranking functions of CR from(V,Out) 
* Partial RF of phase [29]:
  - RF of loop [29:1]:
    V


### Resulting Chains:from(V,Out) 
* [[29],30]
* [30]


### Merging Chains  from/2 into  External patterns of execution 
* [[30]] --> 1 
* [[30,[29]]] --> 2 


### Specialization of cost equations fun/2 
* CE 29 is refined into CE [41] 
* CE 28 is refined into CE [42] 


#### Refined cost equations fun/2 
* CE 41: fun(V,Out) = 0
     [V>=0,Out=0] 
* CE 42: fun(V,Out) = 1+ fun(W,X)
     [W>=0,X+1=Out,W+1=V] 

### Cost equations --> "Loop" of fun/2 
* CEs [42] --> Loop 31 
* CEs [41] --> Loop 32 

#### Loops of fun/2 
* Loop 31: fun(V,Out)->  fun(V',Out')
                  [V'>=0,Out=Out'+1,V'+1=V] 
* Loop 32: fun(V,Out) [V>=0,Out=0] 

### Ranking functions of CR fun(V,Out) 
* RF of phase [31]: [V]

#### Partial ranking functions of CR fun(V,Out) 
* Partial RF of phase [31]:
  - RF of loop [31:1]:
    V


### Resulting Chains:fun(V,Out) 
* [[31],32]
* [32]


### Merging Chains  fun/2 into  External patterns of execution 
* [[32]] --> 1 
* [[32,[31]]] --> 2 


### Specialization of cost equations head/2 
* CE 24 is refined into CE [43] 
* CE 23 is refined into CE [44] 


#### Refined cost equations head/2 
* CE 43: head(V,Out) = 0
     [V>=0,Out=0] 
* CE 44: head(V,Out) = 1+ head(W,X)
     [W>=0,X+1=Out,W+1=V] 

### Cost equations --> "Loop" of head/2 
* CEs [44] --> Loop 33 
* CEs [43] --> Loop 34 

#### Loops of head/2 
* Loop 33: head(V,Out)->  head(V',Out')
                  [V'>=0,Out=Out'+1,V'+1=V] 
* Loop 34: head(V,Out) [V>=0,Out=0] 

### Ranking functions of CR head(V,Out) 
* RF of phase [33]: [V]

#### Partial ranking functions of CR head(V,Out) 
* Partial RF of phase [33]:
  - RF of loop [33:1]:
    V


### Resulting Chains:head(V,Out) 
* [[33],34]
* [34]


### Merging Chains  head/2 into  External patterns of execution 
* [[34]] --> 1 
* [[34,[33]]] --> 2 


### Specialization of cost equations proper/2 
* CE 16 is refined into CE [45] 
* CE 14 is refined into CE [46] 
* CE 15 is refined into CE [47] 


#### Refined cost equations proper/2 
* CE 45: proper(V,Out) = 0
     [V>=0,Out=0] 
* CE 46: proper(V,Out) = 1
     [Out=2,V=1] 
* CE 47: proper(V,Out) = 1
     [Out=1,V=0] 

### Cost equations --> "Loop" of proper/2 
* CEs [45] --> Loop 35 
* CEs [46] --> Loop 36 
* CEs [47] --> Loop 37 

#### Loops of proper/2 
* Loop 35: proper(V,Out) [V>=0,Out=0] 
* Loop 36: proper(V,Out) [Out=2,V=1] 
* Loop 37: proper(V,Out) [Out=1,V=0] 

### Ranking functions of CR proper(V,Out) 

#### Partial ranking functions of CR proper(V,Out) 


### Resulting Chains:proper(V,Out) 
* [37]
* [36]
* [35]


### Merging Chains  proper/2 into  External patterns of execution 
* [[37]] --> 1 
* [[36]] --> 2 
* [[35]] --> 3 


### Specialization of cost equations s/2 
* CE 35 is refined into CE [48] 
* CE 34 is refined into CE [49] 


#### Refined cost equations s/2 
* CE 48: s(V,Out) = 0
     [V>=0,Out=0] 
* CE 49: s(V,Out) = 1+ s(W,X)
     [W>=0,X+1=Out,W+1=V] 

### Cost equations --> "Loop" of s/2 
* CEs [49] --> Loop 38 
* CEs [48] --> Loop 39 

#### Loops of s/2 
* Loop 38: s(V,Out)->  s(V',Out')
                  [V'>=0,Out=Out'+1,V'+1=V] 
* Loop 39: s(V,Out) [V>=0,Out=0] 

### Ranking functions of CR s(V,Out) 
* RF of phase [38]: [V]

#### Partial ranking functions of CR s(V,Out) 
* Partial RF of phase [38]:
  - RF of loop [38:1]:
    V


### Resulting Chains:s(V,Out) 
* [[38],39]
* [39]


### Merging Chains  s/2 into  External patterns of execution 
* [[39]] --> 1 
* [[39,[38]]] --> 2 


### Specialization of cost equations sel/3 
* CE 33 is refined into CE [50] 
* CE 32 is refined into CE [51] 
* CE 30 is refined into CE [52] 
* CE 31 is refined into CE [53] 


#### Refined cost equations sel/3 
* CE 50: sel(V,V1,Out) = 0
     [V1>=0,V>=0,Out=0] 
* CE 51: sel(V,V1,Out) = 1+ sel(V,W1,X1)
     [W1>=0,V>=0,X1+1=Out,W1+1=V1] 
* CE 52: sel(V,V1,Out) = 1+ sel(W1,V1,X1)
     [W1>=0,V1>=0,X1+1=Out,W1+1=V] 
* CE 53: sel(V,V1,Out) = 1+ sel(W1,X1,Y1)
     [X1>=0,W1>=0,Y1+1=Out,X1+1=V1,W1+1=V] 

### Cost equations --> "Loop" of sel/3 
* CEs [51] --> Loop 40 
* CEs [52] --> Loop 41 
* CEs [53] --> Loop 42 
* CEs [50] --> Loop 43 

#### Loops of sel/3 
* Loop 40: sel(V,V1,Out)->  sel(V,V1',Out')
                  [V1>=1,V>=0,Out=Out'+1,V1=V1'+1] 
* Loop 41: sel(V,V1,Out)->  sel(V',V1,Out')
                  [V1>=0,V>=1,Out=Out'+1,V=V'+1] 
* Loop 42: sel(V,V1,Out)->  sel(V',V1',Out')
                  [V1>=1,V>=1,Out=Out'+1,V1=V1'+1,V=V'+1] 
* Loop 43: sel(V,V1,Out) [V1>=0,V>=0,Out=0] 

### Ranking functions of CR sel(V,V1,Out) 
* RF of phase [40,41,42]: [V+V1]

#### Partial ranking functions of CR sel(V,V1,Out) 
* Partial RF of phase [40,41,42]:
  - RF of loop [40:1,42:1]:
    V1
  - RF of loop [41:1,42:1]:
    V


### Resulting Chains:sel(V,V1,Out) 
* [[40,41,42],43]
* [43]


### Merging Chains  sel/3 into  External patterns of execution 
* [[43]] --> 1 
* [[43,[40,41,42]]] --> 2 


### Specialization of cost equations take/3 
* CE 22 is refined into CE [54] 
* CE 19 is refined into CE [55] 
* CE 20 is refined into CE [56] 
* CE 21 is refined into CE [57] 


#### Refined cost equations take/3 
* CE 54: take(V,V1,Out) = 0
     [V1>=0,V>=0,Out=0] 
* CE 55: take(V,V1,Out) = 1+ take(V,W1,X1)
     [W1>=0,V>=0,X1+1=Out,W1+1=V1] 
* CE 56: take(V,V1,Out) = 1+ take(W1,V1,X1)
     [W1>=0,V1>=0,X1+1=Out,W1+1=V] 
* CE 57: take(V,V1,Out) = 1+ take(W1,X1,Y1)
     [X1>=0,W1>=0,Y1+1=Out,X1+1=V1,W1+1=V] 

### Cost equations --> "Loop" of take/3 
* CEs [55] --> Loop 44 
* CEs [56] --> Loop 45 
* CEs [57] --> Loop 46 
* CEs [54] --> Loop 47 

#### Loops of take/3 
* Loop 44: take(V,V1,Out)->  take(V,V1',Out')
                  [V1>=1,V>=0,Out=Out'+1,V1=V1'+1] 
* Loop 45: take(V,V1,Out)->  take(V',V1,Out')
                  [V1>=0,V>=1,Out=Out'+1,V=V'+1] 
* Loop 46: take(V,V1,Out)->  take(V',V1',Out')
                  [V1>=1,V>=1,Out=Out'+1,V1=V1'+1,V=V'+1] 
* Loop 47: take(V,V1,Out) [V1>=0,V>=0,Out=0] 

### Ranking functions of CR take(V,V1,Out) 
* RF of phase [44,45,46]: [V+V1]

#### Partial ranking functions of CR take(V,V1,Out) 
* Partial RF of phase [44,45,46]:
  - RF of loop [44:1,46:1]:
    V1
  - RF of loop [45:1,46:1]:
    V


### Resulting Chains:take(V,V1,Out) 
* [[44,45,46],47]
* [47]


### Merging Chains  take/3 into  External patterns of execution 
* [[47]] --> 1 
* [[47,[44,45,46]]] --> 2 


### Specialization of cost equations top/2 
* CE 13 is refined into CE [58] 
* CE 11 is refined into CE [59] 
* CE 12 is refined into CE [60,61,62] 


#### Refined cost equations top/2 
* CE 58: top(V,Out) = 0
     [V>=0,Out=0] 
* CE 59: top(V,Out) = 1+ top(V,Out)
     [V>=1] 
* CE 60: top(V,Out) = 1+ proper(W,X):1+ top(Y,Out)
     [Y=1,X=1,W=0,V=1] 
* CE 61: top(V,Out) = 1+ proper(W,X):2+ top(Y,Out)
     [Y=2,X=2,W=1,V=2] 
* CE 62: top(V,Out) = 1+ proper(W,X):3+ top(Y,Out)
     [W>=0,W+1=V,Y=0,X=0] 

### Cost equations --> "Loop" of top/2 
* CEs [62] --> Loop 48 
* CEs [61] --> Loop 49 
* CEs [59,60] --> Loop 50 
* CEs [58] --> Loop 51 

#### Loops of top/2 
* Loop 48: top(V,Out)->  top(V',Out)
                  [V>=1,V'=0] 
* Loop 49: top(V,Out)->  top(V',Out)
                  [V'=2,V=2] 
* Loop 50: top(V,Out)->  top(V,Out)
                  [V>=1] 
* Loop 51: top(V,Out) [V>=0,Out=0] 

### Ranking functions of CR top(V,Out) 

#### Partial ranking functions of CR top(V,Out) 


### Resulting Chains:top(V,Out) 
* [[49,50]]...
* [[49,50],51]
* [[49,50],48,51]
* [51]
* [48,51]


### Merging Chains  top/2 into  External patterns of execution 
* [[51,48],[51],[51,48,[49,50]],[51,[49,50]]] --> 1 
* [[[49,50]]] --> 2 


### Specialization of cost equations start/2 
* CE 2 is refined into CE [63,64] 
* CE 3 is refined into CE [65,66,67] 
* CE 4 is refined into CE [68,69] 
* CE 5 is refined into CE [70,71] 
* CE 6 is refined into CE [72,73] 
* CE 7 is refined into CE [74,75] 
* CE 8 is refined into CE [76,77] 
* CE 9 is refined into CE [78,79] 
* CE 10 is refined into CE [80,81] 


#### Refined cost equations start/2 
* CE 63: start(V,V1) = 0+ top(V,W1):1
     [V>=0,W1=0] 
* CE 64: start(V,V1) = 0+ top(V,W1):2
     [V>=1] 
* CE 65: start(V,V1) = 0+ proper(W1,X1):1
     [X1=1,W1=0,V=0] 
* CE 66: start(V,V1) = 0+ proper(W1,X1):2
     [X1=2,W1=1,V=1] 
* CE 67: start(V,V1) = 0+ proper(V,W1):3
     [V>=0,W1=0] 
* CE 68: start(V,V1) = 0+ from(V,W1):1
     [V>=0,W1=0] 
* CE 69: start(V,V1) = 0+ from(V,W1):2
     [V>=W1,W1>=1] 
* CE 70: start(V,V1) = 0+ take(V,V1,W1):1
     [V1>=0,V>=0,W1=0] 
* CE 71: start(V,V1) = 0+ take(V,V1,W1):2
     [V+V1>=W1,W1>=1,V1>=0,V>=0] 
* CE 72: start(V,V1) = 0+ head(V,W1):1
     [V>=0,W1=0] 
* CE 73: start(V,V1) = 0+ head(V,W1):2
     [V>=W1,W1>=1] 
* CE 74: start(V,V1) = 0+ cons(V,V1,W1):1
     [V1>=0,V>=0,W1=0] 
* CE 75: start(V,V1) = 0+ cons(V,V1,W1):2
     [V>=W1,W1>=1,V1>=0] 
* CE 76: start(V,V1) = 0+ fun(V,W1):1
     [V>=0,W1=0] 
* CE 77: start(V,V1) = 0+ fun(V,W1):2
     [V>=W1,W1>=1] 
* CE 78: start(V,V1) = 0+ sel(V,V1,W1):1
     [V1>=0,V>=0,W1=0] 
* CE 79: start(V,V1) = 0+ sel(V,V1,W1):2
     [V+V1>=W1,W1>=1,V1>=0,V>=0] 
* CE 80: start(V,V1) = 0+ s(V,W1):1
     [V>=0,W1=0] 
* CE 81: start(V,V1) = 0+ s(V,W1):2
     [V>=W1,W1>=1] 

### Cost equations --> "Loop" of start/2 
* CEs [66] --> Loop 52 
* CEs [63,65,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81] --> Loop 53 
* CEs [64] --> Loop 54 

#### Loops of start/2 
* Loop 52: start(V,V1) [V=1] 
* Loop 53: start(V,V1) [V>=0] 
* Loop 54: start(V,V1) [V>=1] 

### Ranking functions of CR start(V,V1) 

#### Partial ranking functions of CR start(V,V1) 


### Resulting Chains:start(V,V1) 
* [54]...
* [53]
* [52]


### Merging Chains  start/2 into  External patterns of execution 
* [[52],[53]] --> 1 
* [[54]] --> 2 


Computing Bounds
=====================================

#### Cost of loops [26,27] 

 * loop 26:cons(V,V1,Out) -> [cons(V',V1',Out')] 
1
 * loop 27:cons(V,V1,Out) -> [cons(V',V1',Out')] 
1
#### Cost of phase [26,27]:cons(V,V1,Out) -> [cons(V',V1',Out')] 
1*it(26)+1*it(27)+0
  Such that:it(27) =< V1
it(27) =< V1-V1'
aux(1) =< V
aux(2) =< V-V'
it(26) =< aux(1)
it(27) =< aux(1)
it(26) =< aux(2)
it(27) =< aux(2)

#### Cost of chains of cons(V,V1,Out):
* Chain [[26,27],28]: 1*it(26)+1*it(27)+0
  Such that:aux(1) =< V
it(27) =< V1
aux(2) =< Out
it(26) =< aux(1)
it(27) =< aux(1)
it(26) =< aux(2)
it(27) =< aux(2)

  with precondition: [V1>=0,Out>=1,V>=Out] 

* Chain [28]: 0
  with precondition: [Out=0,V>=0,V1>=0] 


#### Cost of loops [29] 

 * loop 29:from(V,Out) -> [from(V',Out')] 
1
#### Cost of phase [29]:from(V,Out) -> [from(V',Out')] 
1*it(29)+0
  Such that:it(29) =< V
it(29) =< V-V'

#### Cost of chains of from(V,Out):
* Chain [[29],30]: 1*it(29)+0
  Such that:it(29) =< Out

  with precondition: [Out>=1,V>=Out] 

* Chain [30]: 0
  with precondition: [Out=0,V>=0] 


#### Cost of loops [31] 

 * loop 31:fun(V,Out) -> [fun(V',Out')] 
1
#### Cost of phase [31]:fun(V,Out) -> [fun(V',Out')] 
1*it(31)+0
  Such that:it(31) =< V
it(31) =< V-V'

#### Cost of chains of fun(V,Out):
* Chain [[31],32]: 1*it(31)+0
  Such that:it(31) =< Out

  with precondition: [Out>=1,V>=Out] 

* Chain [32]: 0
  with precondition: [Out=0,V>=0] 


#### Cost of loops [33] 

 * loop 33:head(V,Out) -> [head(V',Out')] 
1
#### Cost of phase [33]:head(V,Out) -> [head(V',Out')] 
1*it(33)+0
  Such that:it(33) =< V
it(33) =< V-V'

#### Cost of chains of head(V,Out):
* Chain [[33],34]: 1*it(33)+0
  Such that:it(33) =< Out

  with precondition: [Out>=1,V>=Out] 

* Chain [34]: 0
  with precondition: [Out=0,V>=0] 


#### Cost of chains of proper(V,Out):
* Chain [37]: 1
  with precondition: [V=0,Out=1] 

* Chain [36]: 1
  with precondition: [V=1,Out=2] 

* Chain [35]: 0
  with precondition: [Out=0,V>=0] 


#### Cost of loops [38] 

 * loop 38:s(V,Out) -> [s(V',Out')] 
1
#### Cost of phase [38]:s(V,Out) -> [s(V',Out')] 
1*it(38)+0
  Such that:it(38) =< V
it(38) =< V-V'

#### Cost of chains of s(V,Out):
* Chain [[38],39]: 1*it(38)+0
  Such that:it(38) =< Out

  with precondition: [Out>=1,V>=Out] 

* Chain [39]: 0
  with precondition: [Out=0,V>=0] 


#### Cost of loops [40,41,42] 

 * loop 40:sel(V,V1,Out) -> [sel(V',V1',Out')] 
1
 * loop 41:sel(V,V1,Out) -> [sel(V',V1',Out')] 
1
 * loop 42:sel(V,V1,Out) -> [sel(V',V1',Out')] 
1
#### Cost of phase [40,41,42]:sel(V,V1,Out) -> [sel(V',V1',Out')] 
1*it(40)+1*it(41)+1*it(42)+0
  Such that:aux(3) =< V
aux(4) =< V+V1
aux(5) =< V+V1-V'-V1'
aux(6) =< V-V'
aux(7) =< V1
aux(8) =< V1-V1'
it(41) =< aux(3)
it(42) =< aux(3)
it(40) =< aux(4)
it(41) =< aux(4)
it(42) =< aux(4)
it(40) =< aux(5)
it(41) =< aux(5)
it(42) =< aux(5)
it(41) =< aux(6)
it(42) =< aux(6)
it(40) =< aux(7)
it(42) =< aux(7)
it(40) =< aux(8)
it(42) =< aux(8)

#### Cost of chains of sel(V,V1,Out):
* Chain [[40,41,42],43]: 1*it(40)+1*it(41)+1*it(42)+0
  Such that:aux(9) =< V
aux(10) =< V+V1
aux(11) =< V1
it(41) =< aux(9)
it(42) =< aux(9)
it(40) =< aux(10)
it(41) =< aux(10)
it(42) =< aux(10)
it(40) =< aux(11)
it(42) =< aux(11)

  with precondition: [V>=0,V1>=0,Out>=1,V+V1>=Out] 

* Chain [43]: 0
  with precondition: [Out=0,V>=0,V1>=0] 


#### Cost of loops [44,45,46] 

 * loop 44:take(V,V1,Out) -> [take(V',V1',Out')] 
1
 * loop 45:take(V,V1,Out) -> [take(V',V1',Out')] 
1
 * loop 46:take(V,V1,Out) -> [take(V',V1',Out')] 
1
#### Cost of phase [44,45,46]:take(V,V1,Out) -> [take(V',V1',Out')] 
1*it(44)+1*it(45)+1*it(46)+0
  Such that:aux(12) =< V
aux(13) =< V+V1
aux(14) =< V+V1-V'-V1'
aux(15) =< V-V'
aux(16) =< V1
aux(17) =< V1-V1'
it(45) =< aux(12)
it(46) =< aux(12)
it(44) =< aux(13)
it(45) =< aux(13)
it(46) =< aux(13)
it(44) =< aux(14)
it(45) =< aux(14)
it(46) =< aux(14)
it(45) =< aux(15)
it(46) =< aux(15)
it(44) =< aux(16)
it(46) =< aux(16)
it(44) =< aux(17)
it(46) =< aux(17)

#### Cost of chains of take(V,V1,Out):
* Chain [[44,45,46],47]: 1*it(44)+1*it(45)+1*it(46)+0
  Such that:aux(18) =< V
aux(19) =< V+V1
aux(20) =< V1
it(45) =< aux(18)
it(46) =< aux(18)
it(44) =< aux(19)
it(45) =< aux(19)
it(46) =< aux(19)
it(44) =< aux(20)
it(46) =< aux(20)

  with precondition: [V>=0,V1>=0,Out>=1,V+V1>=Out] 

* Chain [47]: 0
  with precondition: [Out=0,V>=0,V1>=0] 


#### Cost of loops [49,50] 

 * loop 49:top(V,Out) -> [top(V',Out')] 
2
 * loop 50:top(V,Out) -> [top(V',Out')] 
2
#### Cost of phase [49,50]:top(V,Out) -> [top(V',Out')] 
4*it(49)+0
#### Cost of phase [49,50]:top(V,Out) -> [top(V',Out')] 
4*it(49)+0
#### Cost of phase [49,50]:top(V,Out) -> [top(V',Out')] 
4*it(49)+0
#### Cost of chains of top(V,Out):
* Chain [[49,50]]...: 4*it(49)+0
  with precondition: [V>=1] 

* Chain [[49,50],51]: 4*it(49)+0
  with precondition: [Out=0,V>=1] 

* Chain [[49,50],48,51]: 4*it(49)+1
  with precondition: [Out=0,V>=1] 

* Chain [51]: 0
  with precondition: [Out=0,V>=0] 

* Chain [48,51]: 1
  with precondition: [Out=0,V>=1] 


#### Cost of chains of start(V,V1):
* Chain [54]...: 4*s(3)+0
  with precondition: [V>=1] 

* Chain [53]: 1*s(4)+5*s(5)+2*s(9)+2*s(10)+2*s(11)+1*s(14)+1
  Such that:aux(23) =< V
aux(24) =< V+V1
aux(25) =< V1
s(5) =< aux(23)
s(14) =< aux(25)
s(9) =< aux(23)
s(10) =< aux(23)
s(11) =< aux(24)
s(9) =< aux(24)
s(10) =< aux(24)
s(11) =< aux(25)
s(10) =< aux(25)
s(14) =< aux(23)

  with precondition: [V>=0] 

* Chain [52]: 1
  with precondition: [V=1] 


Closed-form bounds of start(V,V1): 
-------------------------------------
* Chain [54]... with precondition: [V>=1] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [53] with precondition: [V>=0] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [52] with precondition: [V=1] 
    - Upper bound: 1 
    - Complexity: constant 

### Maximum cost of start(V,V1): inf 
Asymptotic class: infinity 

Time statistics: 
-------------------------------------
* Partial evaluation computed in 58 ms.
* Invariants computed in 168 ms.
   - Backward Invariants 70 ms.
   - Transitive Invariants 46 ms.
* Refinement performed in 275 ms.
* Termination proved in 48 ms.
* Upper bounds computed in 281 ms.
   - Equation cost structures 98 ms.
   - Phase cost structures 115 ms.
   - Chain cost structures 87 ms.
   - Solving cost expressions 3 ms.
* Total analysis performed in 959 ms.


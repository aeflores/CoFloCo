
Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. recursive  : [afterNth/3]
1. recursive  : [cons/3]
2. recursive  : [fst/2]
3. recursive  : [head/2]
4. recursive  : [natsFrom/2]
5. recursive  : [pair/3]
6. non_recursive  : [proper/2]
7. recursive  : [s/2]
8. recursive  : [sel/3]
9. recursive  : [snd/2]
10. recursive  : [splitAt/3]
11. recursive  : [tail/2]
12. recursive  : [take/3]
13. recursive  : [top/2]
14. recursive  : [u/5]
15. non_recursive  : [start/4]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into afterNth/3
1. SCC is partially evaluated into cons/3
2. SCC is partially evaluated into fst/2
3. SCC is partially evaluated into head/2
4. SCC is partially evaluated into natsFrom/2
5. SCC is partially evaluated into pair/3
6. SCC is partially evaluated into proper/2
7. SCC is partially evaluated into s/2
8. SCC is partially evaluated into sel/3
9. SCC is partially evaluated into snd/2
10. SCC is partially evaluated into splitAt/3
11. SCC is partially evaluated into tail/2
12. SCC is partially evaluated into take/3
13. SCC is partially evaluated into top/2
14. SCC is partially evaluated into u/5
15. SCC is partially evaluated into start/4

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations afterNth/3 
* CE 23 is refined into CE [61] 
* CE 20 is refined into CE [62] 
* CE 21 is refined into CE [63] 
* CE 22 is refined into CE [64] 


#### Refined cost equations afterNth/3 
* CE 61: afterNth(V,V1,Out) = 0
     [V1>=0,V>=0,Out=0] 
* CE 62: afterNth(V,V1,Out) = 1+ afterNth(V,W1,X1)
     [W1>=0,V>=0,X1+1=Out,W1+1=V1] 
* CE 63: afterNth(V,V1,Out) = 1+ afterNth(W1,V1,X1)
     [W1>=0,V1>=0,X1+1=Out,W1+1=V] 
* CE 64: afterNth(V,V1,Out) = 1+ afterNth(W1,X1,Y1)
     [X1>=0,W1>=0,Y1+1=Out,X1+1=V1,W1+1=V] 

### Cost equations --> "Loop" of afterNth/3 
* CEs [62] --> Loop 45 
* CEs [63] --> Loop 46 
* CEs [64] --> Loop 47 
* CEs [61] --> Loop 48 

#### Loops of afterNth/3 
* Loop 45: afterNth(V,V1,Out)->  afterNth(V,V1',Out')
                  [V1>=1,V>=0,Out=Out'+1,V1=V1'+1] 
* Loop 46: afterNth(V,V1,Out)->  afterNth(V',V1,Out')
                  [V1>=0,V>=1,Out=Out'+1,V=V'+1] 
* Loop 47: afterNth(V,V1,Out)->  afterNth(V',V1',Out')
                  [V1>=1,V>=1,Out=Out'+1,V1=V1'+1,V=V'+1] 
* Loop 48: afterNth(V,V1,Out) [V1>=0,V>=0,Out=0] 

### Ranking functions of CR afterNth(V,V1,Out) 
* RF of phase [45,46,47]: [V+V1]

#### Partial ranking functions of CR afterNth(V,V1,Out) 
* Partial RF of phase [45,46,47]:
  - RF of loop [45:1,47:1]:
    V1
  - RF of loop [46:1,47:1]:
    V


### Resulting Chains:afterNth(V,V1,Out) 
* [[45,46,47],48]
* [48]


### Merging Chains  afterNth/3 into  External patterns of execution 
* [[48]] --> 1 
* [[48,[45,46,47]]] --> 2 


### Specialization of cost equations cons/3 
* CE 30 is refined into CE [65] 
* CE 29 is refined into CE [66] 
* CE 28 is refined into CE [67] 


#### Refined cost equations cons/3 
* CE 65: cons(V,V1,Out) = 0
     [V1>=0,V>=0,Out=0] 
* CE 66: cons(V,V1,Out) = 1+ cons(W1,V1,X1)
     [W1>=0,V1>=0,X1+1=Out,W1+1=V] 
* CE 67: cons(V,V1,Out) = 1+ cons(W1,X1,Y1)
     [X1>=0,W1>=0,Y1+1=Out,X1+1=V1,W1+1=V] 

### Cost equations --> "Loop" of cons/3 
* CEs [66] --> Loop 49 
* CEs [67] --> Loop 50 
* CEs [65] --> Loop 51 

#### Loops of cons/3 
* Loop 49: cons(V,V1,Out)->  cons(V',V1,Out')
                  [V1>=0,V>=1,Out=Out'+1,V=V'+1] 
* Loop 50: cons(V,V1,Out)->  cons(V',V1',Out')
                  [V1>=1,V>=1,Out=Out'+1,V1=V1'+1,V=V'+1] 
* Loop 51: cons(V,V1,Out) [V1>=0,V>=0,Out=0] 

### Ranking functions of CR cons(V,V1,Out) 
* RF of phase [49,50]: [V]

#### Partial ranking functions of CR cons(V,V1,Out) 
* Partial RF of phase [49,50]:
  - RF of loop [49:1,50:1]:
    V
  - RF of loop [50:1]:
    V1


### Resulting Chains:cons(V,V1,Out) 
* [[49,50],51]
* [51]


### Merging Chains  cons/3 into  External patterns of execution 
* [[51]] --> 1 
* [[51,[49,50]]] --> 2 


### Specialization of cost equations fst/2 
* CE 55 is refined into CE [68] 
* CE 54 is refined into CE [69] 


#### Refined cost equations fst/2 
* CE 68: fst(V,Out) = 0
     [V>=0,Out=0] 
* CE 69: fst(V,Out) = 1+ fst(W,X)
     [W>=0,X+1=Out,W+1=V] 

### Cost equations --> "Loop" of fst/2 
* CEs [69] --> Loop 52 
* CEs [68] --> Loop 53 

#### Loops of fst/2 
* Loop 52: fst(V,Out)->  fst(V',Out')
                  [V'>=0,Out=Out'+1,V'+1=V] 
* Loop 53: fst(V,Out) [V>=0,Out=0] 

### Ranking functions of CR fst(V,Out) 
* RF of phase [52]: [V]

#### Partial ranking functions of CR fst(V,Out) 
* Partial RF of phase [52]:
  - RF of loop [52:1]:
    V


### Resulting Chains:fst(V,Out) 
* [[52],53]
* [53]


### Merging Chains  fst/2 into  External patterns of execution 
* [[53]] --> 1 
* [[53,[52]]] --> 2 


### Specialization of cost equations head/2 
* CE 51 is refined into CE [70] 
* CE 50 is refined into CE [71] 


#### Refined cost equations head/2 
* CE 70: head(V,Out) = 0
     [V>=0,Out=0] 
* CE 71: head(V,Out) = 1+ head(W,X)
     [W>=0,X+1=Out,W+1=V] 

### Cost equations --> "Loop" of head/2 
* CEs [71] --> Loop 54 
* CEs [70] --> Loop 55 

#### Loops of head/2 
* Loop 54: head(V,Out)->  head(V',Out')
                  [V'>=0,Out=Out'+1,V'+1=V] 
* Loop 55: head(V,Out) [V>=0,Out=0] 

### Ranking functions of CR head(V,Out) 
* RF of phase [54]: [V]

#### Partial ranking functions of CR head(V,Out) 
* Partial RF of phase [54]:
  - RF of loop [54:1]:
    V


### Resulting Chains:head(V,Out) 
* [[54],55]
* [55]


### Merging Chains  head/2 into  External patterns of execution 
* [[55]] --> 1 
* [[55,[54]]] --> 2 


### Specialization of cost equations natsFrom/2 
* CE 53 is refined into CE [72] 
* CE 52 is refined into CE [73] 


#### Refined cost equations natsFrom/2 
* CE 72: natsFrom(V,Out) = 0
     [V>=0,Out=0] 
* CE 73: natsFrom(V,Out) = 1+ natsFrom(W,X)
     [W>=0,X+1=Out,W+1=V] 

### Cost equations --> "Loop" of natsFrom/2 
* CEs [73] --> Loop 56 
* CEs [72] --> Loop 57 

#### Loops of natsFrom/2 
* Loop 56: natsFrom(V,Out)->  natsFrom(V',Out')
                  [V'>=0,Out=Out'+1,V'+1=V] 
* Loop 57: natsFrom(V,Out) [V>=0,Out=0] 

### Ranking functions of CR natsFrom(V,Out) 
* RF of phase [56]: [V]

#### Partial ranking functions of CR natsFrom(V,Out) 
* Partial RF of phase [56]:
  - RF of loop [56:1]:
    V


### Resulting Chains:natsFrom(V,Out) 
* [[56],57]
* [57]


### Merging Chains  natsFrom/2 into  External patterns of execution 
* [[57]] --> 1 
* [[57,[56]]] --> 2 


### Specialization of cost equations pair/3 
* CE 38 is refined into CE [74] 
* CE 35 is refined into CE [75] 
* CE 36 is refined into CE [76] 
* CE 37 is refined into CE [77] 


#### Refined cost equations pair/3 
* CE 74: pair(V,V1,Out) = 0
     [V1>=0,V>=0,Out=0] 
* CE 75: pair(V,V1,Out) = 1+ pair(V,W1,X1)
     [W1>=0,V>=0,X1+1=Out,W1+1=V1] 
* CE 76: pair(V,V1,Out) = 1+ pair(W1,V1,X1)
     [W1>=0,V1>=0,X1+1=Out,W1+1=V] 
* CE 77: pair(V,V1,Out) = 1+ pair(W1,X1,Y1)
     [X1>=0,W1>=0,Y1+1=Out,X1+1=V1,W1+1=V] 

### Cost equations --> "Loop" of pair/3 
* CEs [75] --> Loop 58 
* CEs [76] --> Loop 59 
* CEs [77] --> Loop 60 
* CEs [74] --> Loop 61 

#### Loops of pair/3 
* Loop 58: pair(V,V1,Out)->  pair(V,V1',Out')
                  [V1>=1,V>=0,Out=Out'+1,V1=V1'+1] 
* Loop 59: pair(V,V1,Out)->  pair(V',V1,Out')
                  [V1>=0,V>=1,Out=Out'+1,V=V'+1] 
* Loop 60: pair(V,V1,Out)->  pair(V',V1',Out')
                  [V1>=1,V>=1,Out=Out'+1,V1=V1'+1,V=V'+1] 
* Loop 61: pair(V,V1,Out) [V1>=0,V>=0,Out=0] 

### Ranking functions of CR pair(V,V1,Out) 
* RF of phase [58,59,60]: [V+V1]

#### Partial ranking functions of CR pair(V,V1,Out) 
* Partial RF of phase [58,59,60]:
  - RF of loop [58:1,60:1]:
    V1
  - RF of loop [59:1,60:1]:
    V


### Resulting Chains:pair(V,V1,Out) 
* [[58,59,60],61]
* [61]


### Merging Chains  pair/3 into  External patterns of execution 
* [[61]] --> 1 
* [[61,[58,59,60]]] --> 2 


### Specialization of cost equations proper/2 
* CE 49 is refined into CE [78] 
* CE 47 is refined into CE [79] 
* CE 48 is refined into CE [80] 


#### Refined cost equations proper/2 
* CE 78: proper(V,Out) = 0
     [V>=0,Out=0] 
* CE 79: proper(V,Out) = 1
     [Out=2,V=1] 
* CE 80: proper(V,Out) = 1
     [Out=1,V=0] 

### Cost equations --> "Loop" of proper/2 
* CEs [78] --> Loop 62 
* CEs [79] --> Loop 63 
* CEs [80] --> Loop 64 

#### Loops of proper/2 
* Loop 62: proper(V,Out) [V>=0,Out=0] 
* Loop 63: proper(V,Out) [Out=2,V=1] 
* Loop 64: proper(V,Out) [Out=1,V=0] 

### Ranking functions of CR proper(V,Out) 

#### Partial ranking functions of CR proper(V,Out) 


### Resulting Chains:proper(V,Out) 
* [64]
* [63]
* [62]


### Merging Chains  proper/2 into  External patterns of execution 
* [[64]] --> 1 
* [[63]] --> 2 
* [[62]] --> 3 


### Specialization of cost equations s/2 
* CE 60 is refined into CE [81] 
* CE 59 is refined into CE [82] 


#### Refined cost equations s/2 
* CE 81: s(V,Out) = 0
     [V>=0,Out=0] 
* CE 82: s(V,Out) = 1+ s(W,X)
     [W>=0,X+1=Out,W+1=V] 

### Cost equations --> "Loop" of s/2 
* CEs [82] --> Loop 65 
* CEs [81] --> Loop 66 

#### Loops of s/2 
* Loop 65: s(V,Out)->  s(V',Out')
                  [V'>=0,Out=Out'+1,V'+1=V] 
* Loop 66: s(V,Out) [V>=0,Out=0] 

### Ranking functions of CR s(V,Out) 
* RF of phase [65]: [V]

#### Partial ranking functions of CR s(V,Out) 
* Partial RF of phase [65]:
  - RF of loop [65:1]:
    V


### Resulting Chains:s(V,Out) 
* [[65],66]
* [66]


### Merging Chains  s/2 into  External patterns of execution 
* [[66]] --> 1 
* [[66,[65]]] --> 2 


### Specialization of cost equations sel/3 
* CE 42 is refined into CE [83] 
* CE 40 is refined into CE [84] 
* CE 41 is refined into CE [85] 
* CE 39 is refined into CE [86] 


#### Refined cost equations sel/3 
* CE 83: sel(V,V1,Out) = 0
     [V1>=0,V>=0,Out=0] 
* CE 84: sel(V,V1,Out) = 1+ sel(V,W1,X1)
     [W1>=0,V>=0,X1+1=Out,W1+1=V1] 
* CE 85: sel(V,V1,Out) = 1+ sel(W1,V1,X1)
     [W1>=0,V1>=0,X1+1=Out,W1+1=V] 
* CE 86: sel(V,V1,Out) = 1+ sel(W1,X1,Y1)
     [X1>=0,W1>=0,Y1+1=Out,X1+1=V1,W1+1=V] 

### Cost equations --> "Loop" of sel/3 
* CEs [84] --> Loop 67 
* CEs [85] --> Loop 68 
* CEs [86] --> Loop 69 
* CEs [83] --> Loop 70 

#### Loops of sel/3 
* Loop 67: sel(V,V1,Out)->  sel(V,V1',Out')
                  [V1>=1,V>=0,Out=Out'+1,V1=V1'+1] 
* Loop 68: sel(V,V1,Out)->  sel(V',V1,Out')
                  [V1>=0,V>=1,Out=Out'+1,V=V'+1] 
* Loop 69: sel(V,V1,Out)->  sel(V',V1',Out')
                  [V1>=1,V>=1,Out=Out'+1,V1=V1'+1,V=V'+1] 
* Loop 70: sel(V,V1,Out) [V1>=0,V>=0,Out=0] 

### Ranking functions of CR sel(V,V1,Out) 
* RF of phase [67,68,69]: [V+V1]

#### Partial ranking functions of CR sel(V,V1,Out) 
* Partial RF of phase [67,68,69]:
  - RF of loop [67:1,69:1]:
    V1
  - RF of loop [68:1,69:1]:
    V


### Resulting Chains:sel(V,V1,Out) 
* [[67,68,69],70]
* [70]


### Merging Chains  sel/3 into  External patterns of execution 
* [[70]] --> 1 
* [[70,[67,68,69]]] --> 2 


### Specialization of cost equations snd/2 
* CE 34 is refined into CE [87] 
* CE 33 is refined into CE [88] 


#### Refined cost equations snd/2 
* CE 87: snd(V,Out) = 0
     [V>=0,Out=0] 
* CE 88: snd(V,Out) = 1+ snd(W,X)
     [W>=0,X+1=Out,W+1=V] 

### Cost equations --> "Loop" of snd/2 
* CEs [88] --> Loop 71 
* CEs [87] --> Loop 72 

#### Loops of snd/2 
* Loop 71: snd(V,Out)->  snd(V',Out')
                  [V'>=0,Out=Out'+1,V'+1=V] 
* Loop 72: snd(V,Out) [V>=0,Out=0] 

### Ranking functions of CR snd(V,Out) 
* RF of phase [71]: [V]

#### Partial ranking functions of CR snd(V,Out) 
* Partial RF of phase [71]:
  - RF of loop [71:1]:
    V


### Resulting Chains:snd(V,Out) 
* [[71],72]
* [72]


### Merging Chains  snd/2 into  External patterns of execution 
* [[72]] --> 1 
* [[72,[71]]] --> 2 


### Specialization of cost equations splitAt/3 
* CE 46 is refined into CE [89] 
* CE 44 is refined into CE [90] 
* CE 43 is refined into CE [91] 
* CE 45 is refined into CE [92] 


#### Refined cost equations splitAt/3 
* CE 89: splitAt(V,V1,Out) = 0
     [V1>=0,V>=0,Out=0] 
* CE 90: splitAt(V,V1,Out) = 1+ splitAt(V,W1,X1)
     [W1>=0,V>=0,X1+1=Out,W1+1=V1] 
* CE 91: splitAt(V,V1,Out) = 1+ splitAt(W1,V1,X1)
     [W1>=0,V1>=0,X1+1=Out,W1+1=V] 
* CE 92: splitAt(V,V1,Out) = 1+ splitAt(W1,X1,Y1)
     [X1>=0,W1>=0,Y1+1=Out,X1+1=V1,W1+1=V] 

### Cost equations --> "Loop" of splitAt/3 
* CEs [90] --> Loop 73 
* CEs [91] --> Loop 74 
* CEs [92] --> Loop 75 
* CEs [89] --> Loop 76 

#### Loops of splitAt/3 
* Loop 73: splitAt(V,V1,Out)->  splitAt(V,V1',Out')
                  [V1>=1,V>=0,Out=Out'+1,V1=V1'+1] 
* Loop 74: splitAt(V,V1,Out)->  splitAt(V',V1,Out')
                  [V1>=0,V>=1,Out=Out'+1,V=V'+1] 
* Loop 75: splitAt(V,V1,Out)->  splitAt(V',V1',Out')
                  [V1>=1,V>=1,Out=Out'+1,V1=V1'+1,V=V'+1] 
* Loop 76: splitAt(V,V1,Out) [V1>=0,V>=0,Out=0] 

### Ranking functions of CR splitAt(V,V1,Out) 
* RF of phase [73,74,75]: [V+V1]

#### Partial ranking functions of CR splitAt(V,V1,Out) 
* Partial RF of phase [73,74,75]:
  - RF of loop [73:1,75:1]:
    V1
  - RF of loop [74:1,75:1]:
    V


### Resulting Chains:splitAt(V,V1,Out) 
* [[73,74,75],76]
* [76]


### Merging Chains  splitAt/3 into  External patterns of execution 
* [[76]] --> 1 
* [[76,[73,74,75]]] --> 2 


### Specialization of cost equations tail/2 
* CE 32 is refined into CE [93] 
* CE 31 is refined into CE [94] 


#### Refined cost equations tail/2 
* CE 93: tail(V,Out) = 0
     [V>=0,Out=0] 
* CE 94: tail(V,Out) = 1+ tail(W,X)
     [W>=0,X+1=Out,W+1=V] 

### Cost equations --> "Loop" of tail/2 
* CEs [94] --> Loop 77 
* CEs [93] --> Loop 78 

#### Loops of tail/2 
* Loop 77: tail(V,Out)->  tail(V',Out')
                  [V'>=0,Out=Out'+1,V'+1=V] 
* Loop 78: tail(V,Out) [V>=0,Out=0] 

### Ranking functions of CR tail(V,Out) 
* RF of phase [77]: [V]

#### Partial ranking functions of CR tail(V,Out) 
* Partial RF of phase [77]:
  - RF of loop [77:1]:
    V


### Resulting Chains:tail(V,Out) 
* [[77],78]
* [78]


### Merging Chains  tail/2 into  External patterns of execution 
* [[78]] --> 1 
* [[78,[77]]] --> 2 


### Specialization of cost equations take/3 
* CE 27 is refined into CE [95] 
* CE 26 is refined into CE [96] 
* CE 24 is refined into CE [97] 
* CE 25 is refined into CE [98] 


#### Refined cost equations take/3 
* CE 95: take(V,V1,Out) = 0
     [V1>=0,V>=0,Out=0] 
* CE 96: take(V,V1,Out) = 1+ take(V,W1,X1)
     [W1>=0,V>=0,X1+1=Out,W1+1=V1] 
* CE 97: take(V,V1,Out) = 1+ take(W1,V1,X1)
     [W1>=0,V1>=0,X1+1=Out,W1+1=V] 
* CE 98: take(V,V1,Out) = 1+ take(W1,X1,Y1)
     [X1>=0,W1>=0,Y1+1=Out,X1+1=V1,W1+1=V] 

### Cost equations --> "Loop" of take/3 
* CEs [96] --> Loop 79 
* CEs [97] --> Loop 80 
* CEs [98] --> Loop 81 
* CEs [95] --> Loop 82 

#### Loops of take/3 
* Loop 79: take(V,V1,Out)->  take(V,V1',Out')
                  [V1>=1,V>=0,Out=Out'+1,V1=V1'+1] 
* Loop 80: take(V,V1,Out)->  take(V',V1,Out')
                  [V1>=0,V>=1,Out=Out'+1,V=V'+1] 
* Loop 81: take(V,V1,Out)->  take(V',V1',Out')
                  [V1>=1,V>=1,Out=Out'+1,V1=V1'+1,V=V'+1] 
* Loop 82: take(V,V1,Out) [V1>=0,V>=0,Out=0] 

### Ranking functions of CR take(V,V1,Out) 
* RF of phase [79,80,81]: [V+V1]

#### Partial ranking functions of CR take(V,V1,Out) 
* Partial RF of phase [79,80,81]:
  - RF of loop [79:1,81:1]:
    V1
  - RF of loop [80:1,81:1]:
    V


### Resulting Chains:take(V,V1,Out) 
* [[79,80,81],82]
* [82]


### Merging Chains  take/3 into  External patterns of execution 
* [[82]] --> 1 
* [[82,[79,80,81]]] --> 2 


### Specialization of cost equations top/2 
* CE 19 is refined into CE [99] 
* CE 17 is refined into CE [100] 
* CE 18 is refined into CE [101,102,103] 


#### Refined cost equations top/2 
* CE 99: top(V,Out) = 0
     [V>=0,Out=0] 
* CE 100: top(V,Out) = 1+ top(V,Out)
     [V>=1] 
* CE 101: top(V,Out) = 1+ proper(W,X):1+ top(Y,Out)
     [Y=1,X=1,W=0,V=1] 
* CE 102: top(V,Out) = 1+ proper(W,X):2+ top(Y,Out)
     [Y=2,X=2,W=1,V=2] 
* CE 103: top(V,Out) = 1+ proper(W,X):3+ top(Y,Out)
     [W>=0,W+1=V,Y=0,X=0] 

### Cost equations --> "Loop" of top/2 
* CEs [103] --> Loop 83 
* CEs [102] --> Loop 84 
* CEs [100,101] --> Loop 85 
* CEs [99] --> Loop 86 

#### Loops of top/2 
* Loop 83: top(V,Out)->  top(V',Out)
                  [V>=1,V'=0] 
* Loop 84: top(V,Out)->  top(V',Out)
                  [V'=2,V=2] 
* Loop 85: top(V,Out)->  top(V,Out)
                  [V>=1] 
* Loop 86: top(V,Out) [V>=0,Out=0] 

### Ranking functions of CR top(V,Out) 

#### Partial ranking functions of CR top(V,Out) 


### Resulting Chains:top(V,Out) 
* [[84,85]]...
* [[84,85],86]
* [[84,85],83,86]
* [86]
* [83,86]


### Merging Chains  top/2 into  External patterns of execution 
* [[86,83],[86],[86,83,[84,85]],[86,[84,85]]] --> 1 
* [[[84,85]]] --> 2 


### Specialization of cost equations u/5 
* CE 58 is refined into CE [104] 
* CE 56 is refined into CE [105] 
* CE 57 is refined into CE [106] 


#### Refined cost equations u/5 
* CE 104: u(V,V1,V2,V3,Out) = 0
     [V3>=0,V2>=0,V1>=0,V>=0,Out=0] 
* CE 105: u(V,V1,V2,V3,Out) = 1+ u(W3,V1,V2,V3,X3)
     [W3>=0,V3>=0,V2>=0,V1>=0,X3+1=Out,W3+1=V] 
* CE 106: u(V,V1,V2,V3,Out) = 1+ u(W3,X3,Y3,Z3,A4)
     [Z3>=0,Y3>=0,X3>=0,W3>=0,A4+1=Out,Z3+1=V3,Y3+1=V2,X3+1=V1,W3+1=V] 

### Cost equations --> "Loop" of u/5 
* CEs [105] --> Loop 87 
* CEs [106] --> Loop 88 
* CEs [104] --> Loop 89 

#### Loops of u/5 
* Loop 87: u(V,V1,V2,V3,Out)->  u(V',V1,V2,V3,Out')
                  [V3>=0,V2>=0,V1>=0,V>=1,Out=Out'+1,V=V'+1] 
* Loop 88: u(V,V1,V2,V3,Out)->  u(V',V1',V2',V3',Out')
                  [V3>=1,V2>=1,V1>=1,V>=1,Out=Out'+1,V3=V3'+1,V2=V2'+1,V1=V1'+1,V=V'+1] 
* Loop 89: u(V,V1,V2,V3,Out) [V3>=0,V2>=0,V1>=0,V>=0,Out=0] 

### Ranking functions of CR u(V,V1,V2,V3,Out) 
* RF of phase [87,88]: [V]

#### Partial ranking functions of CR u(V,V1,V2,V3,Out) 
* Partial RF of phase [87,88]:
  - RF of loop [87:1,88:1]:
    V
  - RF of loop [88:1]:
    V1
    V2
    V3


### Resulting Chains:u(V,V1,V2,V3,Out) 
* [[87,88],89]
* [89]


### Merging Chains  u/5 into  External patterns of execution 
* [[89]] --> 1 
* [[89,[87,88]]] --> 2 


### Specialization of cost equations start/4 
* CE 2 is refined into CE [107,108] 
* CE 3 is refined into CE [109,110] 
* CE 4 is refined into CE [111,112] 
* CE 5 is refined into CE [113,114] 
* CE 6 is refined into CE [115,116] 
* CE 7 is refined into CE [117,118] 
* CE 8 is refined into CE [119,120] 
* CE 9 is refined into CE [121,122] 
* CE 10 is refined into CE [123,124] 
* CE 11 is refined into CE [125,126,127] 
* CE 12 is refined into CE [128,129] 
* CE 13 is refined into CE [130,131] 
* CE 14 is refined into CE [132,133] 
* CE 15 is refined into CE [134,135] 
* CE 16 is refined into CE [136,137] 


#### Refined cost equations start/4 
* CE 107: start(V,V1,V2,V3) = 0+ top(V,W3):1
     [V>=0,W3=0] 
* CE 108: start(V,V1,V2,V3) = 0+ top(V,W3):2
     [V>=1] 
* CE 109: start(V,V1,V2,V3) = 0+ afterNth(V,V1,W3):1
     [V1>=0,V>=0,W3=0] 
* CE 110: start(V,V1,V2,V3) = 0+ afterNth(V,V1,W3):2
     [V+V1>=W3,W3>=1,V1>=0,V>=0] 
* CE 111: start(V,V1,V2,V3) = 0+ take(V,V1,W3):1
     [V1>=0,V>=0,W3=0] 
* CE 112: start(V,V1,V2,V3) = 0+ take(V,V1,W3):2
     [V+V1>=W3,W3>=1,V1>=0,V>=0] 
* CE 113: start(V,V1,V2,V3) = 0+ cons(V,V1,W3):1
     [V1>=0,V>=0,W3=0] 
* CE 114: start(V,V1,V2,V3) = 0+ cons(V,V1,W3):2
     [V>=W3,W3>=1,V1>=0] 
* CE 115: start(V,V1,V2,V3) = 0+ tail(V,W3):1
     [V>=0,W3=0] 
* CE 116: start(V,V1,V2,V3) = 0+ tail(V,W3):2
     [V>=W3,W3>=1] 
* CE 117: start(V,V1,V2,V3) = 0+ snd(V,W3):1
     [V>=0,W3=0] 
* CE 118: start(V,V1,V2,V3) = 0+ snd(V,W3):2
     [V>=W3,W3>=1] 
* CE 119: start(V,V1,V2,V3) = 0+ pair(V,V1,W3):1
     [V1>=0,V>=0,W3=0] 
* CE 120: start(V,V1,V2,V3) = 0+ pair(V,V1,W3):2
     [V+V1>=W3,W3>=1,V1>=0,V>=0] 
* CE 121: start(V,V1,V2,V3) = 0+ sel(V,V1,W3):1
     [V1>=0,V>=0,W3=0] 
* CE 122: start(V,V1,V2,V3) = 0+ sel(V,V1,W3):2
     [V+V1>=W3,W3>=1,V1>=0,V>=0] 
* CE 123: start(V,V1,V2,V3) = 0+ splitAt(V,V1,W3):1
     [V1>=0,V>=0,W3=0] 
* CE 124: start(V,V1,V2,V3) = 0+ splitAt(V,V1,W3):2
     [V+V1>=W3,W3>=1,V1>=0,V>=0] 
* CE 125: start(V,V1,V2,V3) = 0+ proper(W3,X3):1
     [X3=1,W3=0,V=0] 
* CE 126: start(V,V1,V2,V3) = 0+ proper(W3,X3):2
     [X3=2,W3=1,V=1] 
* CE 127: start(V,V1,V2,V3) = 0+ proper(V,W3):3
     [V>=0,W3=0] 
* CE 128: start(V,V1,V2,V3) = 0+ head(V,W3):1
     [V>=0,W3=0] 
* CE 129: start(V,V1,V2,V3) = 0+ head(V,W3):2
     [V>=W3,W3>=1] 
* CE 130: start(V,V1,V2,V3) = 0+ natsFrom(V,W3):1
     [V>=0,W3=0] 
* CE 131: start(V,V1,V2,V3) = 0+ natsFrom(V,W3):2
     [V>=W3,W3>=1] 
* CE 132: start(V,V1,V2,V3) = 0+ fst(V,W3):1
     [V>=0,W3=0] 
* CE 133: start(V,V1,V2,V3) = 0+ fst(V,W3):2
     [V>=W3,W3>=1] 
* CE 134: start(V,V1,V2,V3) = 0+ u(V,V1,V2,V3,W3):1
     [V3>=0,V2>=0,V1>=0,V>=0,W3=0] 
* CE 135: start(V,V1,V2,V3) = 0+ u(V,V1,V2,V3,W3):2
     [V>=W3,W3>=1,V3>=0,V2>=0,V1>=0] 
* CE 136: start(V,V1,V2,V3) = 0+ s(V,W3):1
     [V>=0,W3=0] 
* CE 137: start(V,V1,V2,V3) = 0+ s(V,W3):2
     [V>=W3,W3>=1] 

### Cost equations --> "Loop" of start/4 
* CEs [126] --> Loop 90 
* CEs [107,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,127,128,129,130,131,132,133,134,135,136,137] --> Loop 91 
* CEs [108] --> Loop 92 

#### Loops of start/4 
* Loop 90: start(V,V1,V2,V3) [V=1] 
* Loop 91: start(V,V1,V2,V3) [V>=0] 
* Loop 92: start(V,V1,V2,V3) [V>=1] 

### Ranking functions of CR start(V,V1,V2,V3) 

#### Partial ranking functions of CR start(V,V1,V2,V3) 


### Resulting Chains:start(V,V1,V2,V3) 
* [92]...
* [91]
* [90]


### Merging Chains  start/4 into  External patterns of execution 
* [[90],[91]] --> 1 
* [[92]] --> 2 


Computing Bounds
=====================================

#### Cost of loops [45,46,47] 

 * loop 45:afterNth(V,V1,Out) -> [afterNth(V',V1',Out')] 
1
 * loop 46:afterNth(V,V1,Out) -> [afterNth(V',V1',Out')] 
1
 * loop 47:afterNth(V,V1,Out) -> [afterNth(V',V1',Out')] 
1
#### Cost of phase [45,46,47]:afterNth(V,V1,Out) -> [afterNth(V',V1',Out')] 
1*it(45)+1*it(46)+1*it(47)+0
  Such that:aux(1) =< V
aux(2) =< V+V1
aux(3) =< V+V1-V'-V1'
aux(4) =< V-V'
aux(5) =< V1
aux(6) =< V1-V1'
it(46) =< aux(1)
it(47) =< aux(1)
it(45) =< aux(2)
it(46) =< aux(2)
it(47) =< aux(2)
it(45) =< aux(3)
it(46) =< aux(3)
it(47) =< aux(3)
it(46) =< aux(4)
it(47) =< aux(4)
it(45) =< aux(5)
it(47) =< aux(5)
it(45) =< aux(6)
it(47) =< aux(6)

#### Cost of chains of afterNth(V,V1,Out):
* Chain [[45,46,47],48]: 1*it(45)+1*it(46)+1*it(47)+0
  Such that:aux(7) =< V
aux(8) =< V+V1
aux(9) =< V1
it(46) =< aux(7)
it(47) =< aux(7)
it(45) =< aux(8)
it(46) =< aux(8)
it(47) =< aux(8)
it(45) =< aux(9)
it(47) =< aux(9)

  with precondition: [V>=0,V1>=0,Out>=1,V+V1>=Out] 

* Chain [48]: 0
  with precondition: [Out=0,V>=0,V1>=0] 


#### Cost of loops [49,50] 

 * loop 49:cons(V,V1,Out) -> [cons(V',V1',Out')] 
1
 * loop 50:cons(V,V1,Out) -> [cons(V',V1',Out')] 
1
#### Cost of phase [49,50]:cons(V,V1,Out) -> [cons(V',V1',Out')] 
1*it(49)+1*it(50)+0
  Such that:it(50) =< V1
it(50) =< V1-V1'
aux(10) =< V
aux(11) =< V-V'
it(49) =< aux(10)
it(50) =< aux(10)
it(49) =< aux(11)
it(50) =< aux(11)

#### Cost of chains of cons(V,V1,Out):
* Chain [[49,50],51]: 1*it(49)+1*it(50)+0
  Such that:aux(10) =< V
it(50) =< V1
aux(11) =< Out
it(49) =< aux(10)
it(50) =< aux(10)
it(49) =< aux(11)
it(50) =< aux(11)

  with precondition: [V1>=0,Out>=1,V>=Out] 

* Chain [51]: 0
  with precondition: [Out=0,V>=0,V1>=0] 


#### Cost of loops [52] 

 * loop 52:fst(V,Out) -> [fst(V',Out')] 
1
#### Cost of phase [52]:fst(V,Out) -> [fst(V',Out')] 
1*it(52)+0
  Such that:it(52) =< V
it(52) =< V-V'

#### Cost of chains of fst(V,Out):
* Chain [[52],53]: 1*it(52)+0
  Such that:it(52) =< Out

  with precondition: [Out>=1,V>=Out] 

* Chain [53]: 0
  with precondition: [Out=0,V>=0] 


#### Cost of loops [54] 

 * loop 54:head(V,Out) -> [head(V',Out')] 
1
#### Cost of phase [54]:head(V,Out) -> [head(V',Out')] 
1*it(54)+0
  Such that:it(54) =< V
it(54) =< V-V'

#### Cost of chains of head(V,Out):
* Chain [[54],55]: 1*it(54)+0
  Such that:it(54) =< Out

  with precondition: [Out>=1,V>=Out] 

* Chain [55]: 0
  with precondition: [Out=0,V>=0] 


#### Cost of loops [56] 

 * loop 56:natsFrom(V,Out) -> [natsFrom(V',Out')] 
1
#### Cost of phase [56]:natsFrom(V,Out) -> [natsFrom(V',Out')] 
1*it(56)+0
  Such that:it(56) =< V
it(56) =< V-V'

#### Cost of chains of natsFrom(V,Out):
* Chain [[56],57]: 1*it(56)+0
  Such that:it(56) =< Out

  with precondition: [Out>=1,V>=Out] 

* Chain [57]: 0
  with precondition: [Out=0,V>=0] 


#### Cost of loops [58,59,60] 

 * loop 58:pair(V,V1,Out) -> [pair(V',V1',Out')] 
1
 * loop 59:pair(V,V1,Out) -> [pair(V',V1',Out')] 
1
 * loop 60:pair(V,V1,Out) -> [pair(V',V1',Out')] 
1
#### Cost of phase [58,59,60]:pair(V,V1,Out) -> [pair(V',V1',Out')] 
1*it(58)+1*it(59)+1*it(60)+0
  Such that:aux(12) =< V
aux(13) =< V+V1
aux(14) =< V+V1-V'-V1'
aux(15) =< V-V'
aux(16) =< V1
aux(17) =< V1-V1'
it(59) =< aux(12)
it(60) =< aux(12)
it(58) =< aux(13)
it(59) =< aux(13)
it(60) =< aux(13)
it(58) =< aux(14)
it(59) =< aux(14)
it(60) =< aux(14)
it(59) =< aux(15)
it(60) =< aux(15)
it(58) =< aux(16)
it(60) =< aux(16)
it(58) =< aux(17)
it(60) =< aux(17)

#### Cost of chains of pair(V,V1,Out):
* Chain [[58,59,60],61]: 1*it(58)+1*it(59)+1*it(60)+0
  Such that:aux(18) =< V
aux(19) =< V+V1
aux(20) =< V1
it(59) =< aux(18)
it(60) =< aux(18)
it(58) =< aux(19)
it(59) =< aux(19)
it(60) =< aux(19)
it(58) =< aux(20)
it(60) =< aux(20)

  with precondition: [V>=0,V1>=0,Out>=1,V+V1>=Out] 

* Chain [61]: 0
  with precondition: [Out=0,V>=0,V1>=0] 


#### Cost of chains of proper(V,Out):
* Chain [64]: 1
  with precondition: [V=0,Out=1] 

* Chain [63]: 1
  with precondition: [V=1,Out=2] 

* Chain [62]: 0
  with precondition: [Out=0,V>=0] 


#### Cost of loops [65] 

 * loop 65:s(V,Out) -> [s(V',Out')] 
1
#### Cost of phase [65]:s(V,Out) -> [s(V',Out')] 
1*it(65)+0
  Such that:it(65) =< V
it(65) =< V-V'

#### Cost of chains of s(V,Out):
* Chain [[65],66]: 1*it(65)+0
  Such that:it(65) =< Out

  with precondition: [Out>=1,V>=Out] 

* Chain [66]: 0
  with precondition: [Out=0,V>=0] 


#### Cost of loops [67,68,69] 

 * loop 67:sel(V,V1,Out) -> [sel(V',V1',Out')] 
1
 * loop 68:sel(V,V1,Out) -> [sel(V',V1',Out')] 
1
 * loop 69:sel(V,V1,Out) -> [sel(V',V1',Out')] 
1
#### Cost of phase [67,68,69]:sel(V,V1,Out) -> [sel(V',V1',Out')] 
1*it(67)+1*it(68)+1*it(69)+0
  Such that:aux(21) =< V
aux(22) =< V+V1
aux(23) =< V+V1-V'-V1'
aux(24) =< V-V'
aux(25) =< V1
aux(26) =< V1-V1'
it(68) =< aux(21)
it(69) =< aux(21)
it(67) =< aux(22)
it(68) =< aux(22)
it(69) =< aux(22)
it(67) =< aux(23)
it(68) =< aux(23)
it(69) =< aux(23)
it(68) =< aux(24)
it(69) =< aux(24)
it(67) =< aux(25)
it(69) =< aux(25)
it(67) =< aux(26)
it(69) =< aux(26)

#### Cost of chains of sel(V,V1,Out):
* Chain [[67,68,69],70]: 1*it(67)+1*it(68)+1*it(69)+0
  Such that:aux(27) =< V
aux(28) =< V+V1
aux(29) =< V1
it(68) =< aux(27)
it(69) =< aux(27)
it(67) =< aux(28)
it(68) =< aux(28)
it(69) =< aux(28)
it(67) =< aux(29)
it(69) =< aux(29)

  with precondition: [V>=0,V1>=0,Out>=1,V+V1>=Out] 

* Chain [70]: 0
  with precondition: [Out=0,V>=0,V1>=0] 


#### Cost of loops [71] 

 * loop 71:snd(V,Out) -> [snd(V',Out')] 
1
#### Cost of phase [71]:snd(V,Out) -> [snd(V',Out')] 
1*it(71)+0
  Such that:it(71) =< V
it(71) =< V-V'

#### Cost of chains of snd(V,Out):
* Chain [[71],72]: 1*it(71)+0
  Such that:it(71) =< Out

  with precondition: [Out>=1,V>=Out] 

* Chain [72]: 0
  with precondition: [Out=0,V>=0] 


#### Cost of loops [73,74,75] 

 * loop 73:splitAt(V,V1,Out) -> [splitAt(V',V1',Out')] 
1
 * loop 74:splitAt(V,V1,Out) -> [splitAt(V',V1',Out')] 
1
 * loop 75:splitAt(V,V1,Out) -> [splitAt(V',V1',Out')] 
1
#### Cost of phase [73,74,75]:splitAt(V,V1,Out) -> [splitAt(V',V1',Out')] 
1*it(73)+1*it(74)+1*it(75)+0
  Such that:aux(30) =< V
aux(31) =< V+V1
aux(32) =< V+V1-V'-V1'
aux(33) =< V-V'
aux(34) =< V1
aux(35) =< V1-V1'
it(74) =< aux(30)
it(75) =< aux(30)
it(73) =< aux(31)
it(74) =< aux(31)
it(75) =< aux(31)
it(73) =< aux(32)
it(74) =< aux(32)
it(75) =< aux(32)
it(74) =< aux(33)
it(75) =< aux(33)
it(73) =< aux(34)
it(75) =< aux(34)
it(73) =< aux(35)
it(75) =< aux(35)

#### Cost of chains of splitAt(V,V1,Out):
* Chain [[73,74,75],76]: 1*it(73)+1*it(74)+1*it(75)+0
  Such that:aux(36) =< V
aux(37) =< V+V1
aux(38) =< V1
it(74) =< aux(36)
it(75) =< aux(36)
it(73) =< aux(37)
it(74) =< aux(37)
it(75) =< aux(37)
it(73) =< aux(38)
it(75) =< aux(38)

  with precondition: [V>=0,V1>=0,Out>=1,V+V1>=Out] 

* Chain [76]: 0
  with precondition: [Out=0,V>=0,V1>=0] 


#### Cost of loops [77] 

 * loop 77:tail(V,Out) -> [tail(V',Out')] 
1
#### Cost of phase [77]:tail(V,Out) -> [tail(V',Out')] 
1*it(77)+0
  Such that:it(77) =< V
it(77) =< V-V'

#### Cost of chains of tail(V,Out):
* Chain [[77],78]: 1*it(77)+0
  Such that:it(77) =< Out

  with precondition: [Out>=1,V>=Out] 

* Chain [78]: 0
  with precondition: [Out=0,V>=0] 


#### Cost of loops [79,80,81] 

 * loop 79:take(V,V1,Out) -> [take(V',V1',Out')] 
1
 * loop 80:take(V,V1,Out) -> [take(V',V1',Out')] 
1
 * loop 81:take(V,V1,Out) -> [take(V',V1',Out')] 
1
#### Cost of phase [79,80,81]:take(V,V1,Out) -> [take(V',V1',Out')] 
1*it(79)+1*it(80)+1*it(81)+0
  Such that:aux(39) =< V
aux(40) =< V+V1
aux(41) =< V+V1-V'-V1'
aux(42) =< V-V'
aux(43) =< V1
aux(44) =< V1-V1'
it(80) =< aux(39)
it(81) =< aux(39)
it(79) =< aux(40)
it(80) =< aux(40)
it(81) =< aux(40)
it(79) =< aux(41)
it(80) =< aux(41)
it(81) =< aux(41)
it(80) =< aux(42)
it(81) =< aux(42)
it(79) =< aux(43)
it(81) =< aux(43)
it(79) =< aux(44)
it(81) =< aux(44)

#### Cost of chains of take(V,V1,Out):
* Chain [[79,80,81],82]: 1*it(79)+1*it(80)+1*it(81)+0
  Such that:aux(45) =< V
aux(46) =< V+V1
aux(47) =< V1
it(80) =< aux(45)
it(81) =< aux(45)
it(79) =< aux(46)
it(80) =< aux(46)
it(81) =< aux(46)
it(79) =< aux(47)
it(81) =< aux(47)

  with precondition: [V>=0,V1>=0,Out>=1,V+V1>=Out] 

* Chain [82]: 0
  with precondition: [Out=0,V>=0,V1>=0] 


#### Cost of loops [84,85] 

 * loop 84:top(V,Out) -> [top(V',Out')] 
2
 * loop 85:top(V,Out) -> [top(V',Out')] 
2
#### Cost of phase [84,85]:top(V,Out) -> [top(V',Out')] 
4*it(84)+0
#### Cost of phase [84,85]:top(V,Out) -> [top(V',Out')] 
4*it(84)+0
#### Cost of phase [84,85]:top(V,Out) -> [top(V',Out')] 
4*it(84)+0
#### Cost of chains of top(V,Out):
* Chain [[84,85]]...: 4*it(84)+0
  with precondition: [V>=1] 

* Chain [[84,85],86]: 4*it(84)+0
  with precondition: [Out=0,V>=1] 

* Chain [[84,85],83,86]: 4*it(84)+1
  with precondition: [Out=0,V>=1] 

* Chain [86]: 0
  with precondition: [Out=0,V>=0] 

* Chain [83,86]: 1
  with precondition: [Out=0,V>=1] 


#### Cost of loops [87,88] 

 * loop 87:u(V,V1,V2,V3,Out) -> [u(V',V1',V2',V3',Out')] 
1
 * loop 88:u(V,V1,V2,V3,Out) -> [u(V',V1',V2',V3',Out')] 
1
#### Cost of phase [87,88]:u(V,V1,V2,V3,Out) -> [u(V',V1',V2',V3',Out')] 
1*it(87)+1*it(88)+0
  Such that:it(88) =< V1
it(88) =< V1-V1'
it(88) =< V2
it(88) =< V2-V2'
it(88) =< V3
it(88) =< V3-V3'
aux(49) =< V
aux(50) =< V-V'
it(87) =< aux(49)
it(88) =< aux(49)
it(87) =< aux(50)
it(88) =< aux(50)

#### Cost of chains of u(V,V1,V2,V3,Out):
* Chain [[87,88],89]: 1*it(87)+1*it(88)+0
  Such that:aux(49) =< V
it(88) =< V1
aux(50) =< Out
it(87) =< aux(49)
it(88) =< aux(49)
it(87) =< aux(50)
it(88) =< aux(50)

  with precondition: [V1>=0,V2>=0,V3>=0,Out>=1,V>=Out] 

* Chain [89]: 0
  with precondition: [Out=0,V>=0,V1>=0,V2>=0,V3>=0] 


#### Cost of chains of start(V,V1,V2,V3):
* Chain [92]...: 4*s(3)+0
  with precondition: [V>=1] 

* Chain [91]: 1*s(4)+5*s(8)+5*s(9)+5*s(10)+2*s(18)+8*s(20)+1
  Such that:aux(53) =< V
aux(54) =< V+V1
aux(55) =< V1
s(20) =< aux(53)
s(18) =< aux(55)
s(8) =< aux(53)
s(9) =< aux(53)
s(10) =< aux(54)
s(8) =< aux(54)
s(9) =< aux(54)
s(10) =< aux(55)
s(9) =< aux(55)
s(18) =< aux(53)

  with precondition: [V>=0] 

* Chain [90]: 1
  with precondition: [V=1] 


Closed-form bounds of start(V,V1,V2,V3): 
-------------------------------------
* Chain [92]... with precondition: [V>=1] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [91] with precondition: [V>=0] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [90] with precondition: [V=1] 
    - Upper bound: 1 
    - Complexity: constant 

### Maximum cost of start(V,V1,V2,V3): inf 
Asymptotic class: infinity 

Time statistics: 
-------------------------------------
* Partial evaluation computed in 119 ms.
* Invariants computed in 340 ms.
   - Backward Invariants 136 ms.
   - Transitive Invariants 99 ms.
* Refinement performed in 556 ms.
* Termination proved in 112 ms.
* Upper bounds computed in 597 ms.
   - Equation cost structures 190 ms.
   - Phase cost structures 259 ms.
   - Chain cost structures 196 ms.
   - Solving cost expressions 3 ms.
* Total analysis performed in 1962 ms.


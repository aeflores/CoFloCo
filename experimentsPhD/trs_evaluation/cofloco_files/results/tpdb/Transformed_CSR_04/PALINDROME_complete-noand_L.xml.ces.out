
Preprocessing Cost Relations
=====================================
10. SCC does not have a single cut point : [isList/1,isNeList/1]  
 Merged into isListisNeList/1

#### Computed strongly connected components 
0. non_recursive  : [fun1/2]
1. recursive [non_tail,multiple] : [fun/2,isPalListKind/1]
2. non_recursive  : [fun22/2]
3. non_recursive  : [fun12/2]
4. non_recursive  : [isQid/1]
5. non_recursive  : [fun11/2]
6. non_recursive  : [fun27/2]
7. non_recursive  : [fun8/2]
8. non_recursive  : [fun26/2]
9. non_recursive  : [fun16/2]
11. non_recursive  : [fun19/2]
12. non_recursive  : [fun18/2]
13. non_recursive  : [fun21/2]
14. non_recursive  : [fun35/2]
15. non_recursive  : [fun34/2]
16. non_recursive  : [fun24/2]
17. recursive [non_tail] : [fun23/2,fun29/2,fun5/2,fun6/2,isNePal/1,isPal/1]
18. non_recursive  : [fun28/3]
19. non_recursive  : [start/2]
10. recursive [non_tail,multiple] : [fun10/2,fun13/2,fun14/2,fun15/2,fun17/2,fun2/2,fun20/2,fun25/2,fun3/2,fun30/2,fun31/2,fun32/2,fun33/2,fun36/2,fun4/2,fun7/2,fun9/2,isListisNeList/1]

#### Obtained direct recursion through partial evaluation 
0. SCC is completely evaluated into other SCCs
1. SCC is partially evaluated into isPalListKind/1
2. SCC is completely evaluated into other SCCs
3. SCC is completely evaluated into other SCCs
4. SCC is completely evaluated into other SCCs
5. SCC is partially evaluated into fun11/2
6. SCC is partially evaluated into fun27/2
7. SCC is completely evaluated into other SCCs
8. SCC is completely evaluated into other SCCs
9. SCC is completely evaluated into other SCCs
11. SCC is completely evaluated into other SCCs
12. SCC is partially evaluated into fun18/2
13. SCC is completely evaluated into other SCCs
14. SCC is completely evaluated into other SCCs
15. SCC is partially evaluated into fun34/2
16. SCC is partially evaluated into fun24/2
17. SCC is partially evaluated into isPal/1
18. SCC is partially evaluated into fun28/3
19. SCC is partially evaluated into start/2
10. SCC is partially evaluated into isListisNeList/1

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations isPalListKind/1 
* CE 28 is refined into CE [43] 
* CE 27 is refined into CE [44] 


#### Refined cost equations isPalListKind/1 
* CE 43: isPalListKind(Out) = 1
     [Out=0] 
* CE 44: isPalListKind(Out) = 3+ isPalListKind(B)+ isPalListKind(C)
     [C=0,B=0,Out=0] 

### Cost equations --> "Loop" of isPalListKind/1 
* CEs [44] --> Loop 16 
* CEs [43] --> Loop 17 

#### Loops of isPalListKind/1 
* Loop 16: isPalListKind(Out)->  isPalListKind(Out')  isPalListKind(Out'2)
                  [Out'2=0,Out'=0,Out=0] 
* Loop 17: isPalListKind(Out) [Out=0] 

### Ranking functions of CR isPalListKind(Out) 

#### Partial ranking functions of CR isPalListKind(Out) 


### Resulting Chains:isPalListKind(Out) 
* [multiple([16],[[],[17]])]...
* [17]


### Merging Chains  isPalListKind/1 into  External patterns of execution 
* [[17]] --> 1 
* [[multiple([16],[[],[17]])]] --> 2 


### Specialization of cost equations fun11/2 
* CE 38 is refined into CE [45] 


#### Refined cost equations fun11/2 
* CE 45: fun11(V,Out) = 3
     [Out=0,V=0] 

### Cost equations --> "Loop" of fun11/2 
* CEs [45] --> Loop 18 

#### Loops of fun11/2 
* Loop 18: fun11(V,Out) [Out=0,V=0] 

### Ranking functions of CR fun11(V,Out) 

#### Partial ranking functions of CR fun11(V,Out) 


### Resulting Chains:fun11(V,Out) 
* [18]


### Merging Chains  fun11/2 into  External patterns of execution 
* [[18]] --> 1 


### Specialization of cost equations fun27/2 
* CE 41 is refined into CE [46,47] 


#### Refined cost equations fun27/2 
* CE 46: fun27(V,Out) = 1+ isPalListKind(W):1+ fun11(X,Y):1
     [Y=0,X=0,W=0,Out=0,V=0] 
* CE 47: fun27(V,Out) = 1+ isPalListKind(W):2
     [X=0,W=0,V=0] 

### Cost equations --> "Loop" of fun27/2 
* CEs [47] --> Loop 19 
* CEs [46] --> Loop 20 

#### Loops of fun27/2 
* Loop 19: fun27(V,Out) [V=0] 
* Loop 20: fun27(V,Out) [Out=0,V=0] 

### Ranking functions of CR fun27(V,Out) 

#### Partial ranking functions of CR fun27(V,Out) 


### Resulting Chains:fun27(V,Out) 
* [20]
* [19]...


### Merging Chains  fun27/2 into  External patterns of execution 
* [[20]] --> 1 
* [[19]] --> 2 


### Specialization of cost equations isListisNeList/1 
* CE 31 is refined into CE [48] 
* CE 32 is refined into CE [49,50,51] 
* CE 30 is refined into CE [52,53,54,55,56] 
* CE 29 is refined into CE [57,58,59] 


#### Refined cost equations isListisNeList/1 
* CE 48: isListisNeList(A) = 1
     [A=0] 
* CE 49: isListisNeList(A) = 1+ isPalListKind(B):1+ fun27(C,D):1
     [D=0,C=0,B=0,A=0] 
* CE 50: isListisNeList(A) = 1+ isPalListKind(B):1+ fun27(C,A):2
     [C=0,B=0] 
* CE 51: isListisNeList(A) = 1+ isPalListKind(B):2
     [C=0,B=0] 
* CE 52: isListisNeList(A) = 7+ isPalListKind(B):1+ isPalListKind(C):1+ isPalListKind(D):1+ isPalListKind(E):1+ isListisNeList(F)+ isListisNeList(G)
     [G=0,F=0,E=0,D=0,C=0,B=0,A=0] 
* CE 53: isListisNeList(A) = 7+ isPalListKind(B):1+ isPalListKind(C):1+ isPalListKind(D):1+ isPalListKind(E):2
     [F=0,G=0,E=0,D=0,C=0,B=0,A=0] 
* CE 54: isListisNeList(A) = 7+ isPalListKind(B):1+ isPalListKind(C):1+ isPalListKind(D):2
     [E=0,F=0,G=0,D=0,C=0,B=0,A=0] 
* CE 55: isListisNeList(A) = 7+ isPalListKind(B):1+ isPalListKind(C):2
     [D=0,E=0,F=0,G=0,C=0,B=0,A=0] 
* CE 56: isListisNeList(A) = 7+ isPalListKind(B):2
     [C=0,D=0,E=0,F=0,G=0,B=0,A=0] 
* CE 57: isListisNeList(A) = 4+ isPalListKind(B):1+ isPalListKind(C):1+ isListisNeList(D)
     [D=0,C=0,B=0,A=0] 
* CE 58: isListisNeList(A) = 4+ isPalListKind(B):1+ isPalListKind(C):2
     [D=0,C=0,B=0,A=0] 
* CE 59: isListisNeList(A) = 4+ isPalListKind(B):2
     [C=0,D=0,B=0,A=0] 

### Cost equations --> "Loop" of isListisNeList/1 
* CEs [50,51,53,54,55,56,58,59] --> Loop 21 
* CEs [57] --> Loop 22 
* CEs [52] --> Loop 23 
* CEs [48,49] --> Loop 24 

#### Loops of isListisNeList/1 
* Loop 21: isListisNeList(A) [] 
* Loop 22: isListisNeList(A)->  isListisNeList(A')
                  [A'=0,A=0] 
* Loop 23: isListisNeList(A)->  isListisNeList(A')  isListisNeList(A'2)
                  [A'2=0,A'=0,A=0] 
* Loop 24: isListisNeList(A) [A=0] 

### Ranking functions of CR isListisNeList(A) 

#### Partial ranking functions of CR isListisNeList(A) 


### Resulting Chains:isListisNeList(A) 
* [multiple([22,23],[[],[24],[21]])]...
* [24]
* [21]...


### Merging Chains  isListisNeList/1 into  External patterns of execution 
* [[24]] --> 1 
* [[21]] --> 2 
* [[multiple([22,23],[[],[24],[21]])]] --> 3 


### Specialization of cost equations fun18/2 
* CE 37 is refined into CE [60,61] 


#### Refined cost equations fun18/2 
* CE 60: fun18(V,Out) = 2+ isPalListKind(W):1
     [W=0,Out=0,V=0] 
* CE 61: fun18(V,Out) = 2+ isPalListKind(W):2
     [W=0,Out=0,V=0] 

### Cost equations --> "Loop" of fun18/2 
* CEs [61] --> Loop 25 
* CEs [60] --> Loop 26 

#### Loops of fun18/2 
* Loop 25: fun18(V,Out) [Out=0,V=0] 
* Loop 26: fun18(V,Out) [Out=0,V=0] 

### Ranking functions of CR fun18(V,Out) 

#### Partial ranking functions of CR fun18(V,Out) 


### Resulting Chains:fun18(V,Out) 
* [26]
* [25]...


### Merging Chains  fun18/2 into  External patterns of execution 
* [[26]] --> 1 
* [[25]] --> 2 


### Specialization of cost equations fun34/2 
* CE 42 is refined into CE [62] 


#### Refined cost equations fun34/2 
* CE 62: fun34(V,Out) = 3
     [Out=0,V=0] 

### Cost equations --> "Loop" of fun34/2 
* CEs [62] --> Loop 27 

#### Loops of fun34/2 
* Loop 27: fun34(V,Out) [Out=0,V=0] 

### Ranking functions of CR fun34(V,Out) 

#### Partial ranking functions of CR fun34(V,Out) 


### Resulting Chains:fun34(V,Out) 
* [27]


### Merging Chains  fun34/2 into  External patterns of execution 
* [[27]] --> 1 


### Specialization of cost equations fun24/2 
* CE 33 is refined into CE [63,64] 


#### Refined cost equations fun24/2 
* CE 63: fun24(V,Out) = 1+ isPalListKind(W):1+ fun34(X,Y):1
     [Y=0,X=0,W=0,Out=0,V=0] 
* CE 64: fun24(V,Out) = 1+ isPalListKind(W):2
     [X=0,W=0,V=0] 

### Cost equations --> "Loop" of fun24/2 
* CEs [64] --> Loop 28 
* CEs [63] --> Loop 29 

#### Loops of fun24/2 
* Loop 28: fun24(V,Out) [V=0] 
* Loop 29: fun24(V,Out) [Out=0,V=0] 

### Ranking functions of CR fun24(V,Out) 

#### Partial ranking functions of CR fun24(V,Out) 


### Resulting Chains:fun24(V,Out) 
* [29]
* [28]...


### Merging Chains  fun24/2 into  External patterns of execution 
* [[29]] --> 1 
* [[28]] --> 2 


### Specialization of cost equations isPal/1 
* CE 34 is refined into CE [65,66,67,68,69] 
* CE 36 is refined into CE [70] 
* CE 35 is refined into CE [71,72,73,74,75] 


#### Refined cost equations isPal/1 
* CE 65: isPal(Out) = 5+ isPalListKind(B):1+ isPalListKind(C):1+ isPalListKind(D):1+ fun24(E,F):1
     [F=0,E=0,D=0,C=0,B=0,Out=0] 
* CE 66: isPal(Out) = 5+ isPalListKind(B):1+ isPalListKind(C):1+ isPalListKind(D):1+ fun24(E,F):2
     [F=0,E=0,D=0,C=0,B=0,Out=0] 
* CE 67: isPal(Out) = 5+ isPalListKind(B):1+ isPalListKind(C):1+ isPalListKind(D):2
     [E=0,F=0,D=0,C=0,B=0,Out=0] 
* CE 68: isPal(Out) = 5+ isPalListKind(B):1+ isPalListKind(C):2
     [D=0,C=0,B=0,Out=0] 
* CE 69: isPal(Out) = 5+ isPalListKind(B):2
     [C=0,D=0,B=0,Out=0] 
* CE 70: isPal(Out) = 1
     [Out=0] 
* CE 71: isPal(Out) = 8+ isPalListKind(B):1+ isPalListKind(C):1+ isPalListKind(D):1+ isPal(E)+ fun18(F,G):1
     [E=0,G=0,F=0,D=0,C=0,B=0,Out=0] 
* CE 72: isPal(Out) = 8+ isPalListKind(B):1+ isPalListKind(C):1+ isPalListKind(D):1+ isPal(E)+ fun18(F,G):2
     [E=0,G=0,F=0,D=0,C=0,B=0,Out=0] 
* CE 73: isPal(Out) = 8+ isPalListKind(B):1+ isPalListKind(C):1+ isPalListKind(D):2
     [E=0,D=0,C=0,B=0,Out=0] 
* CE 74: isPal(Out) = 8+ isPalListKind(B):1+ isPalListKind(C):2
     [D=0,E=0,C=0,B=0,Out=0] 
* CE 75: isPal(Out) = 8+ isPalListKind(B):2
     [C=0,D=0,E=0,B=0,Out=0] 

### Cost equations --> "Loop" of isPal/1 
* CEs [66,67,68,69,72,73,74,75] --> Loop 30 
* CEs [71] --> Loop 31 
* CEs [65,70] --> Loop 32 

#### Loops of isPal/1 
* Loop 30: isPal(Out) [Out=0] 
* Loop 31: isPal(Out)->  isPal(Out')
                  [Out'=0,Out=0] 
* Loop 32: isPal(Out) [Out=0] 

### Ranking functions of CR isPal(Out) 

#### Partial ranking functions of CR isPal(Out) 


### Resulting Chains:isPal(Out) 
* [[31]]...
* [[31],32]
* [[31],30]...
* [32]
* [30]...


### Merging Chains  isPal/1 into  External patterns of execution 
* [[32],[32,[31]]] --> 1 
* [[30],[[31]],[30,[31]]] --> 2 


### Specialization of cost equations fun28/3 
* CE 39 is refined into CE [76] 
* CE 40 is refined into CE [77] 


#### Refined cost equations fun28/3 
* CE 76: fun28(A,B,A) = 1
     [A>=0,B=0] 
* CE 77: fun28(A,B,B) = 1
     [B>=0,A=0] 

### Cost equations --> "Loop" of fun28/3 
* CEs [76] --> Loop 33 
* CEs [77] --> Loop 34 

#### Loops of fun28/3 
* Loop 33: fun28(A,B,A) [A>=0,B=0] 
* Loop 34: fun28(A,B,B) [B>=0,A=0] 

### Ranking functions of CR fun28(V,V1,Out) 

#### Partial ranking functions of CR fun28(V,V1,Out) 


### Resulting Chains:fun28(V,V1,Out) 
* [34]
* [33]


### Merging Chains  fun28/3 into  External patterns of execution 
* [[34]] --> 1 
* [[33]] --> 2 


### Specialization of cost equations start/2 
* CE 2 is refined into CE [78,79,80,81] 
* CE 3 is refined into CE [82,83,84,85,86,87,88,89] 
* CE 4 is refined into CE [90,91,92,93,94,95,96] 
* CE 5 is refined into CE [97,98,99,100,101,102] 
* CE 6 is refined into CE [103,104,105,106,107] 
* CE 7 is refined into CE [108,109,110] 
* CE 8 is refined into CE [111,112,113,114] 
* CE 9 is refined into CE [115,116,117] 
* CE 10 is refined into CE [118,119,120] 
* CE 11 is refined into CE [121,122,123,124,125] 
* CE 12 is refined into CE [126,127,128,129] 
* CE 13 is refined into CE [130,131,132,133] 
* CE 14 is refined into CE [134,135,136,137] 
* CE 15 is refined into CE [138,139,140] 
* CE 16 is refined into CE [141,142] 
* CE 17 is refined into CE [143,144,145] 
* CE 18 is refined into CE [146] 
* CE 19 is refined into CE [147] 
* CE 20 is refined into CE [148,149] 
* CE 21 is refined into CE [150,151] 
* CE 22 is refined into CE [152,153] 
* CE 23 is refined into CE [154,155] 
* CE 24 is refined into CE [156,157] 
* CE 25 is refined into CE [158] 
* CE 26 is refined into CE [159,160] 


#### Refined cost equations start/2 
* CE 78: start(V,V1) = 3+ isPalListKind(W1):1+ isListisNeList(X1):1
     [X1=0,W1=0,V=0] 
* CE 79: start(V,V1) = 3+ isPalListKind(W1):1+ isListisNeList(X1):2
     [X1=0,W1=0,V=0] 
* CE 80: start(V,V1) = 3+ isPalListKind(W1):1+ isListisNeList(X1):3
     [X1=0,W1=0,V=0] 
* CE 81: start(V,V1) = 3+ isPalListKind(W1):2
     [X1=0,W1=0,V=0] 
* CE 82: start(V,V1) = 6+ isPalListKind(W1):1+ isPalListKind(X1):1+ isPalListKind(Y1):1+ isListisNeList(Z1):1+ isListisNeList(A2):1
     [A2=0,Z1=0,Y1=0,X1=0,W1=0,V=0] 
* CE 83: start(V,V1) = 6+ isPalListKind(W1):1+ isPalListKind(X1):1+ isPalListKind(Y1):1+ isListisNeList(Z1):1+ isListisNeList(A2):2
     [A2=0,Z1=0,Y1=0,X1=0,W1=0,V=0] 
* CE 84: start(V,V1) = 6+ isPalListKind(W1):1+ isPalListKind(X1):1+ isPalListKind(Y1):1+ isListisNeList(Z1):1+ isListisNeList(A2):3
     [A2=0,Z1=0,Y1=0,X1=0,W1=0,V=0] 
* CE 85: start(V,V1) = 6+ isPalListKind(W1):1+ isPalListKind(X1):1+ isPalListKind(Y1):1+ isListisNeList(Z1):2
     [A2=0,Z1=0,Y1=0,X1=0,W1=0,V=0] 
* CE 86: start(V,V1) = 6+ isPalListKind(W1):1+ isPalListKind(X1):1+ isPalListKind(Y1):1+ isListisNeList(Z1):3
     [A2=0,Z1=0,Y1=0,X1=0,W1=0,V=0] 
* CE 87: start(V,V1) = 6+ isPalListKind(W1):1+ isPalListKind(X1):1+ isPalListKind(Y1):2
     [Z1=0,A2=0,Y1=0,X1=0,W1=0,V=0] 
* CE 88: start(V,V1) = 6+ isPalListKind(W1):1+ isPalListKind(X1):2
     [Y1=0,Z1=0,A2=0,X1=0,W1=0,V=0] 
* CE 89: start(V,V1) = 6+ isPalListKind(W1):2
     [X1=0,Y1=0,Z1=0,A2=0,W1=0,V=0] 
* CE 90: start(V,V1) = 5+ isPalListKind(W1):1+ isPalListKind(X1):1+ isListisNeList(Y1):1+ isListisNeList(Z1):1
     [Z1=0,Y1=0,X1=0,W1=0,V=0] 
* CE 91: start(V,V1) = 5+ isPalListKind(W1):1+ isPalListKind(X1):1+ isListisNeList(Y1):1+ isListisNeList(Z1):2
     [Z1=0,Y1=0,X1=0,W1=0,V=0] 
* CE 92: start(V,V1) = 5+ isPalListKind(W1):1+ isPalListKind(X1):1+ isListisNeList(Y1):1+ isListisNeList(Z1):3
     [Z1=0,Y1=0,X1=0,W1=0,V=0] 
* CE 93: start(V,V1) = 5+ isPalListKind(W1):1+ isPalListKind(X1):1+ isListisNeList(Y1):2
     [Z1=0,Y1=0,X1=0,W1=0,V=0] 
* CE 94: start(V,V1) = 5+ isPalListKind(W1):1+ isPalListKind(X1):1+ isListisNeList(Y1):3
     [Z1=0,Y1=0,X1=0,W1=0,V=0] 
* CE 95: start(V,V1) = 5+ isPalListKind(W1):1+ isPalListKind(X1):2
     [Y1=0,Z1=0,X1=0,W1=0,V=0] 
* CE 96: start(V,V1) = 5+ isPalListKind(W1):2
     [X1=0,Y1=0,Z1=0,W1=0,V=0] 
* CE 97: start(V,V1) = 4+ isPalListKind(W1):1+ isListisNeList(X1):1+ isListisNeList(Y1):1
     [Y1=0,X1=0,W1=0,V=0] 
* CE 98: start(V,V1) = 4+ isPalListKind(W1):1+ isListisNeList(X1):1+ isListisNeList(Y1):2
     [Y1=0,X1=0,W1=0,V=0] 
* CE 99: start(V,V1) = 4+ isPalListKind(W1):1+ isListisNeList(X1):1+ isListisNeList(Y1):3
     [Y1=0,X1=0,W1=0,V=0] 
* CE 100: start(V,V1) = 4+ isPalListKind(W1):1+ isListisNeList(X1):2
     [Y1=0,X1=0,W1=0,V=0] 
* CE 101: start(V,V1) = 4+ isPalListKind(W1):1+ isListisNeList(X1):3
     [Y1=0,X1=0,W1=0,V=0] 
* CE 102: start(V,V1) = 4+ isPalListKind(W1):2
     [X1=0,Y1=0,W1=0,V=0] 
* CE 103: start(V,V1) = 3+ isListisNeList(W1):1+ isListisNeList(X1):1
     [X1=0,W1=0,V=0] 
* CE 104: start(V,V1) = 3+ isListisNeList(W1):1+ isListisNeList(X1):2
     [X1=0,W1=0,V=0] 
* CE 105: start(V,V1) = 3+ isListisNeList(W1):1+ isListisNeList(X1):3
     [X1=0,W1=0,V=0] 
* CE 106: start(V,V1) = 3+ isListisNeList(W1):2
     [X1=0,W1=0,V=0] 
* CE 107: start(V,V1) = 3+ isListisNeList(W1):3
     [X1=0,W1=0,V=0] 
* CE 108: start(V,V1) = 2+ isListisNeList(W1):1
     [W1=0,V=0] 
* CE 109: start(V,V1) = 2+ isListisNeList(W1):2
     [W1=0,V=0] 
* CE 110: start(V,V1) = 2+ isListisNeList(W1):3
     [W1=0,V=0] 
* CE 111: start(V,V1) = 4+ isPalListKind(W1):1+ isPalListKind(X1):1+ fun24(Y1,Z1):1
     [Z1=0,Y1=0,X1=0,W1=0,V=0] 
* CE 112: start(V,V1) = 4+ isPalListKind(W1):1+ isPalListKind(X1):1+ fun24(Y1,Z1):2
     [Z1=0,Y1=0,X1=0,W1=0,V=0] 
* CE 113: start(V,V1) = 4+ isPalListKind(W1):1+ isPalListKind(X1):2
     [Y1=0,Z1=0,X1=0,W1=0,V=0] 
* CE 114: start(V,V1) = 4+ isPalListKind(W1):2
     [X1=0,W1=0,V=0] 
* CE 115: start(V,V1) = 3+ isPalListKind(W1):1+ fun24(X1,Y1):1
     [Y1=0,X1=0,W1=0,V=0] 
* CE 116: start(V,V1) = 3+ isPalListKind(W1):1+ fun24(X1,Y1):2
     [Y1=0,X1=0,W1=0,V=0] 
* CE 117: start(V,V1) = 3+ isPalListKind(W1):2
     [X1=0,Y1=0,W1=0,V=0] 
* CE 118: start(V,V1) = 1+ isPalListKind(W1):1+ fun24(X1,Y1):1
     [Y1=0,X1=0,W1=0] 
* CE 119: start(V,V1) = 1+ isPalListKind(W1):1+ fun24(X1,Y1):2
     [X1=0,W1=0] 
* CE 120: start(V,V1) = 1+ isPalListKind(W1):2
     [X1=0,W1=0] 
* CE 121: start(V,V1) = 7+ isPalListKind(W1):1+ isPalListKind(X1):1+ isPal(Y1):1+ fun18(Z1,A2):1
     [A2=0,Z1=0,Y1=0,X1=0,W1=0,V=0] 
* CE 122: start(V,V1) = 7+ isPalListKind(W1):1+ isPalListKind(X1):1+ isPal(Y1):1+ fun18(Z1,A2):2
     [A2=0,Z1=0,Y1=0,X1=0,W1=0,V=0] 
* CE 123: start(V,V1) = 7+ isPalListKind(W1):1+ isPalListKind(X1):1+ isPal(Y1):2
     [Z1=0,A2=0,Y1=0,X1=0,W1=0,V=0] 
* CE 124: start(V,V1) = 7+ isPalListKind(W1):1+ isPalListKind(X1):2
     [Y1=0,X1=0,W1=0,V=0] 
* CE 125: start(V,V1) = 7+ isPalListKind(W1):2
     [X1=0,Y1=0,W1=0,V=0] 
* CE 126: start(V,V1) = 6+ isPalListKind(W1):1+ isPal(X1):1+ fun18(Y1,Z1):1
     [Z1=0,Y1=0,X1=0,W1=0,V=0] 
* CE 127: start(V,V1) = 6+ isPalListKind(W1):1+ isPal(X1):1+ fun18(Y1,Z1):2
     [Z1=0,Y1=0,X1=0,W1=0,V=0] 
* CE 128: start(V,V1) = 6+ isPalListKind(W1):1+ isPal(X1):2
     [Y1=0,Z1=0,X1=0,W1=0,V=0] 
* CE 129: start(V,V1) = 6+ isPalListKind(W1):2
     [X1=0,W1=0,V=0] 
* CE 130: start(V,V1) = 4+ isPalListKind(W1):1+ isPal(X1):1+ fun18(Y1,Z1):1
     [Z1=0,Y1=0,X1=0,W1=0] 
* CE 131: start(V,V1) = 4+ isPalListKind(W1):1+ isPal(X1):1+ fun18(Y1,Z1):2
     [Z1=0,Y1=0,X1=0,W1=0] 
* CE 132: start(V,V1) = 4+ isPalListKind(W1):1+ isPal(X1):2
     [Y1=0,X1=0,W1=0] 
* CE 133: start(V,V1) = 4+ isPalListKind(W1):2
     [W1=0] 
* CE 134: start(V,V1) = 2+ isPalListKind(W1):1+ isPal(X1):1+ fun18(Y1,Z1):1
     [Z1=0,Y1=0,X1=0,W1=0,V=0] 
* CE 135: start(V,V1) = 2+ isPalListKind(W1):1+ isPal(X1):1+ fun18(Y1,Z1):2
     [Z1=0,Y1=0,X1=0,W1=0,V=0] 
* CE 136: start(V,V1) = 2+ isPalListKind(W1):1+ isPal(X1):2
     [Y1=0,X1=0,W1=0,V=0] 
* CE 137: start(V,V1) = 2+ isPalListKind(W1):2
     [W1=0,V=0] 
* CE 138: start(V,V1) = 1+ isPal(W1):1+ fun18(X1,Y1):1
     [Y1=0,X1=0,W1=0,V=0] 
* CE 139: start(V,V1) = 1+ isPal(W1):1+ fun18(X1,Y1):2
     [Y1=0,X1=0,W1=0,V=0] 
* CE 140: start(V,V1) = 1+ isPal(W1):2
     [X1=0,W1=0,V=0] 
* CE 141: start(V,V1) = 2+ isPalListKind(W1):1
     [W1=0,V=0] 
* CE 142: start(V,V1) = 2+ isPalListKind(W1):2
     [W1=0,V=0] 
* CE 143: start(V,V1) = 0+ isListisNeList(W1):1
     [W1=0] 
* CE 144: start(V,V1) = 0+ isListisNeList(W1):2
     [] 
* CE 145: start(V,V1) = 0+ isListisNeList(W1):3
     [W1=0] 
* CE 146: start(V,V1) = 0+ fun11(W1,X1):1
     [X1=0,W1=0,V=0] 
* CE 147: start(V,V1) = 1
     [] 
* CE 148: start(V,V1) = 0+ isPal(W1):1
     [W1=0] 
* CE 149: start(V,V1) = 0+ isPal(W1):2
     [W1=0] 
* CE 150: start(V,V1) = 0+ fun18(W1,X1):1
     [X1=0,W1=0,V=0] 
* CE 151: start(V,V1) = 0+ fun18(W1,X1):2
     [X1=0,W1=0,V=0] 
* CE 152: start(V,V1) = 0+ fun28(W1,V1,V1):1
     [V1>=0,W1=0,V=0] 
* CE 153: start(V,V1) = 0+ fun28(V,W1,V):2
     [V>=0,W1=0,V1=0] 
* CE 154: start(V,V1) = 0+ isPalListKind(W1):1
     [W1=0] 
* CE 155: start(V,V1) = 0+ isPalListKind(W1):2
     [W1=0] 
* CE 156: start(V,V1) = 0+ fun27(W1,X1):1
     [X1=0,W1=0,V=0] 
* CE 157: start(V,V1) = 0+ fun27(W1,X1):2
     [W1=0,V=0] 
* CE 158: start(V,V1) = 0+ fun34(W1,X1):1
     [X1=0,W1=0,V=0] 
* CE 159: start(V,V1) = 0+ fun24(W1,X1):1
     [X1=0,W1=0,V=0] 
* CE 160: start(V,V1) = 0+ fun24(W1,X1):2
     [W1=0,V=0] 

### Cost equations --> "Loop" of start/2 
* CEs [79,80,81,83,84,85,86,87,88,89,91,92,93,94,95,96,98,99,100,101,102,104,105,106,107,109,110,112,113,114,116,117,119,120,122,123,124,125,127,128,129,131,132,133,135,136,137,139,140,142,144,145,149,151,155,157,160] --> Loop 35 
* CEs [78,82,90,97,103,108,111,115,118,121,126,130,134,138,141,143,146,147,148,150,152,153,154,156,158,159] --> Loop 36 

#### Loops of start/2 
* Loop 35: start(V,V1) [] 
* Loop 36: start(V,V1) [] 

### Ranking functions of CR start(V,V1) 

#### Partial ranking functions of CR start(V,V1) 


### Resulting Chains:start(V,V1) 
* [36]
* [35]...


### Merging Chains  start/2 into  External patterns of execution 
* [[36]] --> 1 
* [[35]] --> 2 


Computing Bounds
=====================================

#### Cost of loops [16] 

 * loop 16:isPalListKind(Out) -> [isPalListKind(Out'),isPalListKind(Out'2)] 
3
#### Cost of phase [16]:isPalListKind(Out) -> [] 
3*it(16)+1*it([17])+0
#### Cost of chains of isPalListKind(Out):
* Chain [multiple([16],[[],[17]])]...: 3*it(16)+1*it([17])+0
  with precondition: [Out=0] 

* Chain [17]: 1
  with precondition: [Out=0] 


#### Cost of chains of fun11(V,Out):
* Chain [18]: 3
  with precondition: [V=0,Out=0] 


#### Cost of chains of fun27(V,Out):
* Chain [20]: 5
  with precondition: [V=0,Out=0] 

* Chain [19]...: 4*s(1)+1
  with precondition: [V=0] 


#### Cost of loops [22,23] 

 * loop 22:isListisNeList(A) -> [isListisNeList(A')] 
6
 * loop 23:isListisNeList(A) -> [isListisNeList(A'),isListisNeList(A'2)] 
11
#### Cost of phase [22,23]:isListisNeList(A) -> [] 
18*it(22)+7*it([24])+0
#### Cost of chains of isListisNeList(A):
* Chain [multiple([22,23],[[],[24],[21]])]...: 18*it(22)+7*it([24])+0
  with precondition: [A=0] 

* Chain [24]: 7
  with precondition: [A=0] 

* Chain [21]...: 1*aux(2)+0
  with precondition: [] 


#### Cost of chains of fun18(V,Out):
* Chain [26]: 3
  with precondition: [V=0,Out=0] 

* Chain [25]...: 4*s(19)+2
  with precondition: [V=0,Out=0] 


#### Cost of chains of fun34(V,Out):
* Chain [27]: 3
  with precondition: [V=0,Out=0] 


#### Cost of chains of fun24(V,Out):
* Chain [29]: 5
  with precondition: [V=0,Out=0] 

* Chain [28]...: 4*s(21)+1
  with precondition: [V=0] 


#### Cost of loops [31] 

 * loop 31:isPal(Out) -> [isPal(Out')] 
14
#### Cost of phase [31]:isPal(Out) -> [isPal(Out')] 
14*it(31)+0
#### Cost of phase [31]:isPal(Out) -> [isPal(Out')] 
14*it(31)+0
#### Cost of phase [31]:isPal(Out) -> [isPal(Out')] 
14*it(31)+0
#### Cost of chains of isPal(Out):
* Chain [[31]]...: 14*it(31)+0
  with precondition: [Out=0] 

* Chain [[31],32]: 14*it(31)+13
  with precondition: [Out=0] 

* Chain [[31],30]...: 15*aux(4)+0
  with precondition: [Out=0] 

* Chain [32]: 13
  with precondition: [Out=0] 

* Chain [30]...: 1*aux(4)+0
  with precondition: [Out=0] 


#### Cost of chains of fun28(V,V1,Out):
* Chain [34]: 1
  with precondition: [V=0,V1=Out,V1>=0] 

* Chain [33]: 1
  with precondition: [V1=0,V=Out,V>=0] 


#### Cost of chains of start(V,V1):
* Chain [36]: 1*aux(7)+0
  with precondition: [] 

* Chain [35]...: 1*aux(8)+0
  with precondition: [] 


Closed-form bounds of start(V,V1): 
-------------------------------------
* Chain [36] with precondition: [] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [35]... with precondition: [] 
    - Upper bound: inf 
    - Complexity: infinity 

### Maximum cost of start(V,V1): inf 
Asymptotic class: infinity 

Time statistics: 
-------------------------------------
* Partial evaluation computed in 245 ms.
* Invariants computed in 30 ms.
   - Backward Invariants 13 ms.
   - Transitive Invariants 5 ms.
* Refinement performed in 303 ms.
* Termination proved in 8 ms.
* Upper bounds computed in 169 ms.
   - Equation cost structures 125 ms.
   - Phase cost structures 32 ms.
   - Chain cost structures 5 ms.
   - Solving cost expressions 0 ms.
* Total analysis performed in 900 ms.



Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. recursive  : [append/3,ifappend/4]
1. non_recursive  : [fun/2]
2. non_recursive  : [hd/2]
3. non_recursive  : [tl/2]
4. non_recursive  : [start/3]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into append/3
1. SCC is partially evaluated into fun/2
2. SCC is partially evaluated into hd/2
3. SCC is partially evaluated into tl/2
4. SCC is partially evaluated into start/3

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations append/3 
* CE 9 is refined into CE [19] 
* CE 11 is refined into CE [20] 
* CE 10 is refined into CE [21] 


#### Refined cost equations append/3 
* CE 19: append(V,V7,Out) = 1
     [V7>=0,V>=0,Out=0] 
* CE 20: append(A,B,B) = 2
     [B>=0,A=0] 
* CE 21: append(V,V7,Out) = 2+ append(W7,V7,X7)
     [V+X7>=Out,Out>=X7+1,V7>=0,V+X7=Out+W7] 

### Cost equations --> "Loop" of append/3 
* CEs [21] --> Loop 12 
* CEs [19] --> Loop 13 
* CEs [20] --> Loop 14 

#### Loops of append/3 
* Loop 12: append(V,V7,Out)->  append(V',V7,Out')
                  [V+Out'>=Out,Out>=Out'+1,V7>=0,V+Out'=Out+V'] 
* Loop 13: append(V,V7,Out) [V7>=0,V>=0,Out=0] 
* Loop 14: append(A,B,B) [B>=0,A=0] 

### Ranking functions of CR append(V,V7,Out) 
* RF of phase [12]: [V]

#### Partial ranking functions of CR append(V,V7,Out) 
* Partial RF of phase [12]:
  - RF of loop [12:1]:
    V


### Resulting Chains:append(V,V7,Out) 
* [[12],14]
* [[12],13]
* [14]
* [13]


### Merging Chains  append/3 into  External patterns of execution 
* [[14]] --> 1 
* [[13]] --> 2 
* [[14,[12]]] --> 3 
* [[13,[12]]] --> 4 


### Specialization of cost equations fun/2 
* CE 13 is refined into CE [22] 
* CE 14 is refined into CE [23] 
* CE 12 is refined into CE [24] 


#### Refined cost equations fun/2 
* CE 22: fun(V,Out) = 1
     [V>=1,Out=1] 
* CE 23: fun(V,Out) = 0
     [V>=0,Out=0] 
* CE 24: fun(V,Out) = 1
     [Out=2,V=0] 

### Cost equations --> "Loop" of fun/2 
* CEs [22] --> Loop 15 
* CEs [23] --> Loop 16 
* CEs [24] --> Loop 17 

#### Loops of fun/2 
* Loop 15: fun(V,Out) [V>=1,Out=1] 
* Loop 16: fun(V,Out) [V>=0,Out=0] 
* Loop 17: fun(V,Out) [Out=2,V=0] 

### Ranking functions of CR fun(V,Out) 

#### Partial ranking functions of CR fun(V,Out) 


### Resulting Chains:fun(V,Out) 
* [17]
* [16]
* [15]


### Merging Chains  fun/2 into  External patterns of execution 
* [[17]] --> 1 
* [[16]] --> 2 
* [[15]] --> 3 


### Specialization of cost equations hd/2 
* CE 15 is refined into CE [25] 
* CE 16 is refined into CE [26] 


#### Refined cost equations hd/2 
* CE 25: hd(V,Out) = 1
     [V>=Out+1,Out>=0] 
* CE 26: hd(V,Out) = 0
     [V>=0,Out=0] 

### Cost equations --> "Loop" of hd/2 
* CEs [25] --> Loop 18 
* CEs [26] --> Loop 19 

#### Loops of hd/2 
* Loop 18: hd(V,Out) [V>=Out+1,Out>=0] 
* Loop 19: hd(V,Out) [V>=0,Out=0] 

### Ranking functions of CR hd(V,Out) 

#### Partial ranking functions of CR hd(V,Out) 


### Resulting Chains:hd(V,Out) 
* [19]
* [18]


### Merging Chains  hd/2 into  External patterns of execution 
* [[19]] --> 1 
* [[18]] --> 2 


### Specialization of cost equations tl/2 
* CE 17 is refined into CE [27] 
* CE 18 is refined into CE [28] 


#### Refined cost equations tl/2 
* CE 27: tl(V,Out) = 1
     [V>=Out+1,Out>=0] 
* CE 28: tl(V,Out) = 0
     [V>=0,Out=0] 

### Cost equations --> "Loop" of tl/2 
* CEs [27] --> Loop 20 
* CEs [28] --> Loop 21 

#### Loops of tl/2 
* Loop 20: tl(V,Out) [V>=Out+1,Out>=0] 
* Loop 21: tl(V,Out) [V>=0,Out=0] 

### Ranking functions of CR tl(V,Out) 

#### Partial ranking functions of CR tl(V,Out) 


### Resulting Chains:tl(V,Out) 
* [21]
* [20]


### Merging Chains  tl/2 into  External patterns of execution 
* [[21]] --> 1 
* [[20]] --> 2 


### Specialization of cost equations start/3 
* CE 2 is refined into CE [29] 
* CE 3 is refined into CE [30,31,32,33] 
* CE 4 is refined into CE [34] 
* CE 5 is refined into CE [35,36,37] 
* CE 6 is refined into CE [38,39] 
* CE 7 is refined into CE [40,41] 
* CE 8 is refined into CE [42,43,44,45] 


#### Refined cost equations start/3 
* CE 29: start(V,V7,V10) = 0
     [V10>=0,V7>=0,V>=0] 
* CE 30: start(V,V7,V10) = 1+ append(W10,V7,V7):1
     [V7>=0,V10>=1,V>=0,W10=0] 
* CE 31: start(V,V7,V10) = 1+ append(W10,V7,X10):2
     [V10>=W10+1,V7>=0,W10>=0,V>=0,X10=0] 
* CE 32: start(V,V7,V10) = 1+ append(W10,X10,Y10):3
     [Y10>=W10,V10>=W10+1,W10>=1,V>=0,Y10=W10+X10,Y10=V7+W10] 
* CE 33: start(V,V7,V10) = 1+ append(W10,V7,X10):4
     [W10>=X10,V10>=W10+1,X10>=1,V7>=0,V>=0] 
* CE 34: start(V,V7,V10) = 1
     [V7>=0,V>=0,V10=0] 
* CE 35: start(V,V7,V10) = 0+ fun(W10,X10):1
     [X10=2,W10=0,V=0] 
* CE 36: start(V,V7,V10) = 0+ fun(V,W10):2
     [V>=0,W10=0] 
* CE 37: start(V,V7,V10) = 0+ fun(V,W10):3
     [V>=1,W10=1] 
* CE 38: start(V,V7,V10) = 0+ hd(V,W10):1
     [V>=0,W10=0] 
* CE 39: start(V,V7,V10) = 0+ hd(V,W10):2
     [V>=W10+1,W10>=0] 
* CE 40: start(V,V7,V10) = 0+ tl(V,W10):1
     [V>=0,W10=0] 
* CE 41: start(V,V7,V10) = 0+ tl(V,W10):2
     [V>=W10+1,W10>=0] 
* CE 42: start(V,V7,V10) = 0+ append(W10,V7,V7):1
     [V7>=0,W10=0,V=0] 
* CE 43: start(V,V7,V10) = 0+ append(V,V7,W10):2
     [V7>=0,V>=0,W10=0] 
* CE 44: start(V,V7,V10) = 0+ append(V,W10,X10):3
     [X10>=V,V>=1,X10=V+W10,X10=V+V7] 
* CE 45: start(V,V7,V10) = 0+ append(V,V7,W10):4
     [V>=W10,W10>=1,V7>=0] 

### Cost equations --> "Loop" of start/3 
* CEs [34] --> Loop 22 
* CEs [29,30,31,32,33,35,36,37,38,39,40,41,42,43,44,45] --> Loop 23 

#### Loops of start/3 
* Loop 22: start(V,V7,V10) [V7>=0,V>=0,V10=0] 
* Loop 23: start(V,V7,V10) [V>=0] 

### Ranking functions of CR start(V,V7,V10) 

#### Partial ranking functions of CR start(V,V7,V10) 


### Resulting Chains:start(V,V7,V10) 
* [23]
* [22]


### Merging Chains  start/3 into  External patterns of execution 
* [[22],[23]] --> 1 


Computing Bounds
=====================================

#### Cost of loops [12] 

 * loop 12:append(V,V7,Out) -> [append(V',V7',Out')] 
2
#### Cost of phase [12]:append(V,V7,Out) -> [append(V',V7',Out')] 
2*it(12)+0
  Such that:it(12) =< V
it(12) =< V-V'

#### Cost of phase [12]:append(V,V7,Out) -> [append(V',V7',Out')] 
2*it(12)+0
  Such that:it(12) =< V
it(12) =< V-V'

#### Cost of chains of append(V,V7,Out):
* Chain [[12],14]: 2*it(12)+2
  Such that:it(12) =< -V7+Out

  with precondition: [V+V7=Out,V>=1,V7>=0] 

* Chain [[12],13]: 2*it(12)+1
  Such that:it(12) =< Out

  with precondition: [V7>=0,Out>=1,V>=Out] 

* Chain [14]: 2
  with precondition: [V=0,V7=Out,V7>=0] 

* Chain [13]: 1
  with precondition: [Out=0,V>=0,V7>=0] 


#### Cost of chains of fun(V,Out):
* Chain [17]: 1
  with precondition: [V=0,Out=2] 

* Chain [16]: 0
  with precondition: [Out=0,V>=0] 

* Chain [15]: 1
  with precondition: [Out=1,V>=1] 


#### Cost of chains of hd(V,Out):
* Chain [19]: 0
  with precondition: [Out=0,V>=0] 

* Chain [18]: 1
  with precondition: [Out>=0,V>=Out+1] 


#### Cost of chains of tl(V,Out):
* Chain [21]: 0
  with precondition: [Out=0,V>=0] 

* Chain [20]: 1
  with precondition: [Out>=0,V>=Out+1] 


#### Cost of chains of start(V,V7,V10):
* Chain [23]: 4*s(1)+4*s(3)+3
  Such that:aux(1) =< V
aux(2) =< V10
s(3) =< aux(1)
s(1) =< aux(2)

  with precondition: [V>=0] 

* Chain [22]: 1
  with precondition: [V10=0,V>=0,V7>=0] 


Closed-form bounds of start(V,V7,V10): 
-------------------------------------
* Chain [23] with precondition: [V>=0] 
    - Upper bound: 4*V+3+nat(V10)*4 
    - Complexity: n 
* Chain [22] with precondition: [V10=0,V>=0,V7>=0] 
    - Upper bound: 1 
    - Complexity: constant 

### Maximum cost of start(V,V7,V10): 4*V+2+nat(V10)*4+1 
Asymptotic class: n 

Time statistics: 
-------------------------------------
* Partial evaluation computed in 13 ms.
* Invariants computed in 11 ms.
   - Backward Invariants 8 ms.
   - Transitive Invariants 1 ms.
* Refinement performed in 36 ms.
* Termination proved in 2 ms.
* Upper bounds computed in 22 ms.
   - Equation cost structures 12 ms.
   - Phase cost structures 3 ms.
   - Chain cost structures 6 ms.
   - Solving cost expressions 0 ms.
* Total analysis performed in 99 ms.


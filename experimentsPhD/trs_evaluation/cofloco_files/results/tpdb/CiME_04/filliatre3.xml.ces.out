
Preprocessing Cost Relations
=====================================
1. SCC does not have a single cut point : [foldB/3,foldC/3,f/3]  
 Merged into foldBfoldCf/3

#### Computed strongly connected components 
0. non_recursive  : [g/2]
2. recursive [non_tail] : [fold/4]
3. non_recursive  : [start/3]
1. recursive [multiple] : [foldBfoldCf/3,fun/3,fun1/2]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into g/2
2. SCC is partially evaluated into fold/4
3. SCC is partially evaluated into start/3
1. SCC is partially evaluated into foldBfoldCf/3

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations g/2 
* CE 23 is refined into CE [26] 
* CE 22 is refined into CE [27] 
* CE 21 is refined into CE [28] 
* CE 20 is refined into CE [29] 
* CE 19 is refined into CE [30] 
* CE 18 is refined into CE [31] 


#### Refined cost equations g/2 
* CE 26: g(V,Out) = 1
     [Out=2,V=2] 
* CE 27: g(V,Out) = 1
     [Out=1,V=2] 
* CE 28: g(V,Out) = 1
     [Out=0,V=2] 
* CE 29: g(V,Out) = 1
     [Out=1,V=1] 
* CE 30: g(V,Out) = 1
     [Out=0,V=1] 
* CE 31: g(V,Out) = 1
     [Out=0,V=0] 

### Cost equations --> "Loop" of g/2 
* CEs [26] --> Loop 19 
* CEs [27] --> Loop 20 
* CEs [28] --> Loop 21 
* CEs [29] --> Loop 22 
* CEs [30] --> Loop 23 
* CEs [31] --> Loop 24 

#### Loops of g/2 
* Loop 19: g(V,Out) [Out=2,V=2] 
* Loop 20: g(V,Out) [Out=1,V=2] 
* Loop 21: g(V,Out) [Out=0,V=2] 
* Loop 22: g(V,Out) [Out=1,V=1] 
* Loop 23: g(V,Out) [Out=0,V=1] 
* Loop 24: g(V,Out) [Out=0,V=0] 

### Ranking functions of CR g(V,Out) 

#### Partial ranking functions of CR g(V,Out) 


### Resulting Chains:g(V,Out) 
* [24]
* [23]
* [22]
* [21]
* [20]
* [19]


### Merging Chains  g/2 into  External patterns of execution 
* [[24]] --> 1 
* [[23]] --> 2 
* [[22]] --> 3 
* [[21]] --> 4 
* [[20]] --> 5 
* [[19]] --> 6 


### Specialization of cost equations foldBfoldCf/3 
* CE 13 is refined into CE [32,33,34] 
* CE 17 is refined into CE [35] 
* CE 16 is refined into CE [36] 
* CE 12 is refined into CE [37] 
* CE 10 is refined into CE [38,39,40,41,42,43] 
* CE 15 is refined into CE [44] 
* CE 11 is refined into CE [45,46] 
* CE 14 is refined into CE [47,48,49] 


#### Refined cost equations foldBfoldCf/3 
* CE 32: foldBfoldCf(A,B,C) = 3+ g(D,E):1+ foldBfoldCf(F,G,H)+ foldBfoldCf(I,J,C)
     [H>=J+1,A>=G+1,J>=0,G>=0,I+J=H,F+G=A+1,E=0,D=0,B=0] 
* CE 33: foldBfoldCf(A,B,C) = 3+ g(D,E):2+ foldBfoldCf(F,G,H)+ foldBfoldCf(I,J,C)
     [H>=J+1,A>=G+1,J>=0,G>=0,I+J=H,F+G=A+1,E=0,D=1,B=1] 
* CE 34: foldBfoldCf(A,B,C) = 3+ g(D,E):4+ foldBfoldCf(F,G,H)+ foldBfoldCf(I,J,C)
     [H>=J+1,A>=G+1,J>=0,G>=0,I+J=H,F+G=A+1,E=0,D=2,B=2] 
* CE 35: foldBfoldCf(A,B,C) = 1+ foldBfoldCf(A,D,E)+ foldBfoldCf(E,F,C)
     [D>=0,A>=0,D+1=B,F=2] 
* CE 36: foldBfoldCf(A,B,C) = 1+ foldBfoldCf(A,D,E)+ foldBfoldCf(E,F,C)
     [D>=0,A>=0,D+1=B,F=1] 
* CE 37: foldBfoldCf(A,B,C) = 2+ g(D,E):6
     [A>=1,A+1=C,E=2,D=2,B=2] 
* CE 38: foldBfoldCf(A,B,C) = 1+ g(D,E):1
     [A>=0,E=0,D=0,C=0,B=0] 
* CE 39: foldBfoldCf(A,B,C) = 1+ g(D,E):2
     [A>=0,E=0,D=1,C=0,B=1] 
* CE 40: foldBfoldCf(A,B,C) = 1+ g(D,E):3
     [A>=0,E=1,D=1,C=0,B=1] 
* CE 41: foldBfoldCf(A,B,C) = 1+ g(D,E):4
     [A>=0,E=0,D=2,C=0,B=2] 
* CE 42: foldBfoldCf(A,B,C) = 1+ g(D,E):5
     [A>=0,E=1,D=2,C=0,B=2] 
* CE 43: foldBfoldCf(A,B,C) = 1+ g(D,E):6
     [A>=0,E=2,D=2,C=0,B=2] 
* CE 44: foldBfoldCf(A,B,A) = 1
     [A>=0,B=0] 
* CE 45: foldBfoldCf(A,B,C) = 2+ g(D,E):3+ foldBfoldCf(A,F,C)
     [A>=1,F=0,E=1,D=1,B=1] 
* CE 46: foldBfoldCf(A,B,C) = 2+ g(D,E):5+ foldBfoldCf(A,F,C)
     [A>=1,F=0,E=1,D=2,B=2] 
* CE 47: foldBfoldCf(A,B,C) = 2+ g(D,E):1+ foldBfoldCf(F,G,H)
     [A>=G+1,H>=0,G>=0,F+G=A+1,E=0,D=0,C=0,B=0] 
* CE 48: foldBfoldCf(A,B,C) = 2+ g(D,E):2+ foldBfoldCf(F,G,H)
     [A>=G+1,H>=0,G>=0,F+G=A+1,E=0,D=1,C=0,B=1] 
* CE 49: foldBfoldCf(A,B,C) = 2+ g(D,E):4+ foldBfoldCf(F,G,H)
     [A>=G+1,H>=0,G>=0,F+G=A+1,E=0,D=2,C=0,B=2] 

### Cost equations --> "Loop" of foldBfoldCf/3 
* CEs [46] --> Loop 25 
* CEs [49] --> Loop 26 
* CEs [45] --> Loop 27 
* CEs [48] --> Loop 28 
* CEs [47] --> Loop 29 
* CEs [37] --> Loop 30 
* CEs [41,42,43] --> Loop 31 
* CEs [39,40] --> Loop 32 
* CEs [44] --> Loop 33 
* CEs [38] --> Loop 34 
* CEs [35] --> Loop 35 
* CEs [36] --> Loop 36 
* CEs [34] --> Loop 37 
* CEs [33] --> Loop 38 
* CEs [32] --> Loop 39 

#### Loops of foldBfoldCf/3 
* Loop 25: foldBfoldCf(A,B,C)->  foldBfoldCf(A,A',C)
                  [A>=1,A'=0,B=2] 
* Loop 26: foldBfoldCf(A,B,C)->  foldBfoldCf(A',B',C')
                  [A+1>=A',C'>=0,A'>=2,A'+B'=A+1,C=0,B=2] 
* Loop 27: foldBfoldCf(A,B,C)->  foldBfoldCf(A,A',C)
                  [A>=1,A'=0,B=1] 
* Loop 28: foldBfoldCf(A,B,C)->  foldBfoldCf(A',B',C')
                  [A+1>=A',C'>=0,A'>=2,A'+B'=A+1,C=0,B=1] 
* Loop 29: foldBfoldCf(A,B,C)->  foldBfoldCf(A',B',C')
                  [A+1>=A',C'>=0,A'>=2,A'+B'=A+1,C=0,B=0] 
* Loop 30: foldBfoldCf(A,B,C) [A>=1,A+1=C,B=2] 
* Loop 31: foldBfoldCf(A,B,C) [A>=0,C=0,B=2] 
* Loop 32: foldBfoldCf(A,B,C) [A>=0,C=0,B=1] 
* Loop 33: foldBfoldCf(A,B,A) [A>=0,B=0] 
* Loop 34: foldBfoldCf(A,B,C) [A>=0,C=0,B=0] 
* Loop 35: foldBfoldCf(A,B,C)->  foldBfoldCf(A,A',B')  foldBfoldCf(B',A'2,C)
                  [B>=1,A>=0,B=A'+1,A'2=2] 
* Loop 36: foldBfoldCf(A,B,C)->  foldBfoldCf(A,A',B')  foldBfoldCf(B',A'2,C)
                  [B>=1,A>=0,B=A'+1,A'2=1] 
* Loop 37: foldBfoldCf(A,B,C)->  foldBfoldCf(A',B',C')  foldBfoldCf(A'2,B'2,C)
                  [C'>=A'2,A+1>=A',A'2>=1,A'>=2,A'2+B'2=C',A'+B'=A+1,B=2] 
* Loop 38: foldBfoldCf(A,B,C)->  foldBfoldCf(A',B',C')  foldBfoldCf(A'2,B'2,C)
                  [C'>=A'2,A+1>=A',A'2>=1,A'>=2,A'2+B'2=C',A'+B'=A+1,B=1] 
* Loop 39: foldBfoldCf(A,B,C)->  foldBfoldCf(A',B',C')  foldBfoldCf(A'2,B'2,C)
                  [C'>=A'2,A+1>=A',A'2>=1,A'>=2,A'2+B'2=C',A'+B'=A+1,B=0] 

### Ranking functions of CR foldBfoldCf(A,B,C) 

#### Partial ranking functions of CR foldBfoldCf(A,B,C) 
* Partial RF of phase [25,26,27,28,29,35,36,37,38,39]:
  - RF of loop [25:1]:
    B/2-1/2 depends on loops [26:1,28:1,29:1,35:2,37:1,37:2,38:1,38:2,39:1,39:2] 
  - RF of loop [26:1,37:1]:
    A+B-2 depends on loops [29:1,35:2,36:2,37:2,38:2,39:1,39:2] 
  - RF of loop [27:1,35:1,36:1]:
    B depends on loops [26:1,28:1,29:1,35:2,37:1,37:2,38:1,38:2,39:1,39:2] 


### Resulting Chains:foldBfoldCf(A,B,C) 
* [multiple([25,26,27,28,29,35,36,37,38,39],[[],[34],[33],[32],[31],[30]])]...
* [34]
* [33]
* [32]
* [31]
* [30]


### Merging Chains  foldBfoldCf/3 into  External patterns of execution 
* [[34]] --> 1 
* [[33]] --> 2 
* [[32]] --> 3 
* [[31]] --> 4 
* [[30]] --> 5 
* [[multiple([25,26,27,28,29,35,36,37,38,39],[[],[34],[33],[32],[31],[30]])]] --> 6 


### Specialization of cost equations fold/4 
* CE 25 is refined into CE [50,51,52,53,54,55] 
* CE 24 is refined into CE [56] 


#### Refined cost equations fold/4 
* CE 50: fold(V,V1,V23,Out) = 1+ fold(V,W23,X23,Y23)+ foldBfoldCf(Y23,Z23,A24):1
     [X23>=0,Y23>=0,V>=0,X23+1=V23,W23=0,A24=0,Z23=0,Out=0,V1=0] 
* CE 51: fold(V,V1,V23,Out) = 1+ fold(V,W23,X23,Out)+ foldBfoldCf(Out,Y23,Out):2
     [X23>=0,Out>=0,V>=0,X23+1=V23,W23=0,Y23=0,V1=0] 
* CE 52: fold(V,V1,V23,Out) = 1+ fold(V,W23,X23,Y23)+ foldBfoldCf(Y23,Z23,A24):3
     [X23>=0,Y23>=0,V>=0,X23+1=V23,W23=1,A24=0,Z23=1,Out=0,V1=1] 
* CE 53: fold(V,V1,V23,Out) = 1+ fold(V,W23,X23,Y23)+ foldBfoldCf(Y23,Z23,A24):4
     [X23>=0,Y23>=0,V>=0,X23+1=V23,W23=2,A24=0,Z23=2,Out=0,V1=2] 
* CE 54: fold(V,V1,V23,Out) = 1+ fold(V,W23,X23,Y23)+ foldBfoldCf(Z23,A24,Out):5
     [X23>=0,Out>=2,V>=0,Out=Y23+1,Out=Z23+1,X23+1=V23,W23=2,A24=2,V1=2] 
* CE 55: fold(V,V1,V23,Out) = 1+ fold(V,V1,W23,X23)+ foldBfoldCf(X23,V1,Out):6
     [V1+X23>=1,W23>=0,V1>=0,X23>=0,V>=0,W23+1=V23] 
* CE 56: fold(A,B,C,A) = 1
     [B>=0,A>=0,C=0] 

### Cost equations --> "Loop" of fold/4 
* CEs [56] --> Loop 40 
* CEs [55] --> Loop 41 
* CEs [54] --> Loop 42 
* CEs [53] --> Loop 43 
* CEs [52] --> Loop 44 
* CEs [51] --> Loop 45 
* CEs [50] --> Loop 46 

#### Loops of fold/4 
* Loop 40: fold(A,B,C,A) [B>=0,A>=0,C=0] 
* Loop 41: fold(V,V1,V23,Out) [V23>=1,V1>=0,V>=0] 
* Loop 42: fold(V,V1,V23,Out)->  fold(V,V1',V23',Out')
                  [Out>=2,V23>=1,V>=0,Out=Out'+1,V23=V23'+1,V1'=2,V1=2] 
* Loop 43: fold(V,V1,V23,Out)->  fold(V,V1',V23',Out')
                  [Out'>=0,V23>=1,V>=0,V23=V23'+1,V1'=2,Out=0,V1=2] 
* Loop 44: fold(V,V1,V23,Out)->  fold(V,V1',V23',Out')
                  [Out'>=0,V23>=1,V>=0,V23=V23'+1,V1'=1,Out=0,V1=1] 
* Loop 45: fold(V,V1,V23,Out)->  fold(V,V1',V23',Out)
                  [Out>=0,V23>=1,V>=0,V23=V23'+1,V1'=0,V1=0] 
* Loop 46: fold(V,V1,V23,Out)->  fold(V,V1',V23',Out')
                  [Out'>=0,V23>=1,V>=0,V23=V23'+1,V1'=0,Out=0,V1=0] 

### Ranking functions of CR fold(V,V1,V23,Out) 
* RF of phase [42]: [V23]
* RF of phase [43]: [V23]
* RF of phase [44]: [V23]
* RF of phase [45,46]: [V23]

#### Partial ranking functions of CR fold(V,V1,V23,Out) 
* Partial RF of phase [42]:
  - RF of loop [42:1]:
    V23
* Partial RF of phase [43]:
  - RF of loop [43:1]:
    V23
* Partial RF of phase [44]:
  - RF of loop [44:1]:
    V23
* Partial RF of phase [45,46]:
  - RF of loop [45:1,46:1]:
    V23


### Resulting Chains:fold(V,V1,V23,Out) 
* [[45,46],41]...
* [[45,46],40]
* [[44],41]...
* [[44],40]
* [[43],[42],41]...
* [[43],[42],40]
* [[43],41]...
* [[43],40]
* [[42],41]...
* [[42],40]
* [41]...
* [40]


### Merging Chains  fold/4 into  External patterns of execution 
* [[40,[45,46]]] --> 1 
* [[40,[44]]] --> 2 
* [[40,[43]],[40,[42],[43]]] --> 3 
* [[40,[42]]] --> 4 
* [[40]] --> 5 
* [[41,[45,46]]] --> 6 
* [[41,[44]]] --> 7 
* [[41,[43]]] --> 8 
* [[41,[42],[43]]] --> 9 
* [[41,[42]]] --> 10 
* [[41]] --> 11 


### Specialization of cost equations start/3 
* CE 4 is refined into CE [57] 
* CE 2 is refined into CE [58] 
* CE 3 is refined into CE [59,60,61,62,63,64] 
* CE 5 is refined into CE [65,66,67,68,69,70,71,72,73,74,75,76,77] 
* CE 6 is refined into CE [78,79,80,81,82,83] 
* CE 7 is refined into CE [84,85,86,87,88,89] 
* CE 8 is refined into CE [90,91,92,93,94,95] 
* CE 9 is refined into CE [96,97,98,99,100,101,102,103,104,105,106] 


#### Refined cost equations start/3 
* CE 57: start(V,V1,V23) = 1
     [V>=1,V1=2] 
* CE 58: start(V,V1,V23) = 0
     [V>=0] 
* CE 59: start(V,V1,V23) = 1+ foldBfoldCf(V,W23,X23):1
     [V>=1,X23=0,W23=0] 
* CE 60: start(V,V1,V23) = 1+ foldBfoldCf(V,W23,V):2
     [V>=1,W23=0] 
* CE 61: start(V,V1,V23) = 1+ foldBfoldCf(W23,X23,Y23):3
     [W23>=1,W23+1=V,Y23=0,X23=1] 
* CE 62: start(V,V1,V23) = 1+ foldBfoldCf(W23,X23,Y23):4
     [W23>=1,W23+2=V,Y23=0,X23=2] 
* CE 63: start(V,V1,V23) = 1+ foldBfoldCf(W23,X23,Y23):5
     [Y23>=2,Y23=W23+1,Y23+1=V,X23=2] 
* CE 64: start(V,V1,V23) = 1+ foldBfoldCf(W23,X23,Y23):6
     [X23>=0,W23>=1,W23+X23=V] 
* CE 65: start(V,V1,V23) = 2+ foldBfoldCf(W23,X23,W23):2+ foldBfoldCf(W23,Y23,Z23):1
     [W23>=2,W23=V+1,Z23=0,Y23=0,X23=0,V1=0] 
* CE 66: start(V,V1,V23) = 2+ foldBfoldCf(W23,X23,W23):2+ foldBfoldCf(W23,Y23,W23):2
     [W23>=2,W23=V+1,Y23=0,X23=0,V1=0] 
* CE 67: start(V,V1,V23) = 2+ foldBfoldCf(W23,X23,Y23):2+ foldBfoldCf(V,Z23,A24):3
     [V>=1,V+1=Y23,V+1=W23,A24=0,Z23=1,X23=0,V1=0] 
* CE 68: start(V,V1,V23) = 2+ foldBfoldCf(W23,X23,Y23):2+ foldBfoldCf(Z23,A24,B24):4
     [Z23>=1,Z23+2=Y23,Z23+2=W23,Z23+1=V,B24=0,A24=2,X23=0,V1=0] 
* CE 69: start(V,V1,V23) = 2+ foldBfoldCf(W23,X23,Y23):2+ foldBfoldCf(Z23,A24,V):5
     [V>=2,V=Z23+1,V+1=Y23,V+1=W23,A24=2,X23=0,V1=0] 
* CE 70: start(V,V1,V23) = 2+ foldBfoldCf(W23,X23,Y23):2+ foldBfoldCf(Z23,A24,B24):6
     [Z23+A24>=2,A24>=0,Z23>=1,Z23+A24=Y23,Z23+A24=W23,Z23+A24=V+1,X23=0,V1=0] 
* CE 71: start(V,V1,V23) = 2+ foldBfoldCf(W23,X23,V):5+ foldBfoldCf(V,Y23,Z23):1
     [V>=3,V=W23+1,Z23=0,Y23=0,X23=2,V1=0] 
* CE 72: start(V,V1,V23) = 2+ foldBfoldCf(W23,X23,V):5+ foldBfoldCf(V,Y23,V):2
     [V>=3,V=W23+1,Y23=0,X23=2,V1=0] 
* CE 73: start(V,V1,V23) = 2+ foldBfoldCf(W23,X23,Y23):5+ foldBfoldCf(W23,Z23,A24):3
     [W23>=2,W23+1=Y23,W23+1=V,A24=0,Z23=1,X23=2,V1=0] 
* CE 74: start(V,V1,V23) = 2+ foldBfoldCf(W23,X23,Y23):5+ foldBfoldCf(Z23,A24,B24):4
     [Z23>=1,Z23+2=Y23,Z23+1=W23,Z23+2=V,B24=0,A24=2,X23=2,V1=0] 
* CE 75: start(V,V1,V23) = 2+ foldBfoldCf(W23,X23,Y23):5+ foldBfoldCf(Z23,A24,W23):5
     [W23>=2,W23=Z23+1,W23+1=Y23,W23+1=V,A24=2,X23=2,V1=0] 
* CE 76: start(V,V1,V23) = 2+ foldBfoldCf(W23,X23,Y23):5+ foldBfoldCf(Z23,A24,B24):6
     [Z23+A24>=3,A24>=0,Z23>=1,Z23+A24=Y23,Z23+A24=W23+1,Z23+A24=V,X23=2,V1=0] 
* CE 77: start(V,V1,V23) = 2+ foldBfoldCf(W23,X23,Y23):6
     [Y23>=Z23+1,Z23>=0,X23>=0,W23>=2,A24+Z23=Y23,W23+X23=V+1,V1=0] 
* CE 78: start(V,V1,V23) = 1+ foldBfoldCf(W23,X23,Y23):1
     [W23>=2,W23=V+1,Y23=0,X23=0,V1=0] 
* CE 79: start(V,V1,V23) = 1+ foldBfoldCf(W23,X23,W23):2
     [W23>=2,W23=V+1,X23=0,V1=0] 
* CE 80: start(V,V1,V23) = 1+ foldBfoldCf(V,W23,X23):3
     [V>=2,X23=0,W23=1,V1=0] 
* CE 81: start(V,V1,V23) = 1+ foldBfoldCf(W23,X23,Y23):4
     [W23>=2,W23+1=V,Y23=0,X23=2,V1=0] 
* CE 82: start(V,V1,V23) = 1+ foldBfoldCf(W23,X23,V):5
     [V>=3,V=W23+1,X23=2,V1=0] 
* CE 83: start(V,V1,V23) = 1+ foldBfoldCf(W23,X23,Y23):6
     [Y23>=0,X23>=0,W23>=2,W23+X23=V+1,V1=0] 
* CE 84: start(V,V1,V23) = 0+ g(W23,X23):1
     [X23=0,W23=0,V=0] 
* CE 85: start(V,V1,V23) = 0+ g(W23,X23):2
     [X23=0,W23=1,V=1] 
* CE 86: start(V,V1,V23) = 0+ g(W23,X23):3
     [X23=1,W23=1,V=1] 
* CE 87: start(V,V1,V23) = 0+ g(W23,X23):4
     [X23=0,W23=2,V=2] 
* CE 88: start(V,V1,V23) = 0+ g(W23,X23):5
     [X23=1,W23=2,V=2] 
* CE 89: start(V,V1,V23) = 0+ g(W23,X23):6
     [X23=2,W23=2,V=2] 
* CE 90: start(V,V1,V23) = 0+ foldBfoldCf(V,W23,X23):1
     [V>=0,X23=0,W23=0,V1=0] 
* CE 91: start(V,V1,V23) = 0+ foldBfoldCf(V,W23,V):2
     [V>=0,W23=0,V1=0] 
* CE 92: start(V,V1,V23) = 0+ foldBfoldCf(V,W23,X23):3
     [V>=0,X23=0,W23=1,V1=1] 
* CE 93: start(V,V1,V23) = 0+ foldBfoldCf(V,W23,X23):4
     [V>=0,X23=0,W23=2,V1=2] 
* CE 94: start(V,V1,V23) = 0+ foldBfoldCf(W23,X23,Y23):5
     [Y23>=2,Y23=W23+1,Y23=V+1,X23=2,V1=2] 
* CE 95: start(V,V1,V23) = 0+ foldBfoldCf(V,V1,W23):6
     [V+V1>=1,V1>=0,V>=0] 
* CE 96: start(V,V1,V23) = 0+ fold(V,W23,V23,X23):1
     [V>=X23,X23>=0,V23>=1,W23=0,V1=0] 
* CE 97: start(V,V1,V23) = 0+ fold(V,W23,V23,X23):2
     [V23>=1,V>=0,X23=0,W23=1,V1=1] 
* CE 98: start(V,V1,V23) = 0+ fold(V,W23,V23,X23):3
     [V23>=1,V>=0,X23=0,W23=2,V1=2] 
* CE 99: start(V,V1,V23) = 0+ fold(V,W23,X23,Y23):4
     [Y23>=V+1,V>=1,Y23=V+X23,Y23=V+V23,W23=2,V1=2] 
* CE 100: start(V,V1,V23) = 0+ fold(V,V1,W23,V):5
     [V>=0,V1>=0,W23=0,V23=0] 
* CE 101: start(V,V1,V23) = 0+ fold(V,W23,V23,X23):6
     [X23>=0,V23>=2,V>=0,W23=0,V1=0] 
* CE 102: start(V,V1,V23) = 0+ fold(V,W23,V23,X23):7
     [V23>=2,V>=0,X23=0,W23=1,V1=1] 
* CE 103: start(V,V1,V23) = 0+ fold(V,W23,V23,X23):8
     [V23>=2,V>=0,X23=0,W23=2,V1=2] 
* CE 104: start(V,V1,V23) = 0+ fold(V,W23,V23,X23):9
     [V23>=3,V>=0,X23=0,W23=2,V1=2] 
* CE 105: start(V,V1,V23) = 0+ fold(V,W23,V23,X23):10
     [X23>=2,V23>=2,V>=0,W23=2,V1=2] 
* CE 106: start(V,V1,V23) = 0+ fold(V,V1,V23,W23):11
     [V23>=1,V1>=0,V>=0] 

### Cost equations --> "Loop" of start/3 
* CEs [64] --> Loop 47 
* CEs [103,104,105] --> Loop 48 
* CEs [102] --> Loop 49 
* CEs [70,76,77,83,95] --> Loop 50 
* CEs [101,106] --> Loop 51 
* CEs [100] --> Loop 52 
* CEs [57,93,94,98,99] --> Loop 53 
* CEs [92,97] --> Loop 54 
* CEs [65,66,67,68,69,71,72,73,74,75,78,79,80,81,82,90,91,96] --> Loop 55 
* CEs [87,88,89] --> Loop 56 
* CEs [85,86] --> Loop 57 
* CEs [58,59,60,61,62,63,84] --> Loop 58 

#### Loops of start/3 
* Loop 47: start(V,V1,V23) [V>=1] 
* Loop 48: start(V,V1,V23) [V23>=2,V>=0,V1=2] 
* Loop 49: start(V,V1,V23) [V23>=2,V>=0,V1=1] 
* Loop 50: start(V,V1,V23) [V+V1>=1,V1>=0,V>=0] 
* Loop 51: start(V,V1,V23) [V23>=1,V1>=0,V>=0] 
* Loop 52: start(V,V1,V23) [V1>=0,V>=0,V23=0] 
* Loop 53: start(V,V1,V23) [V>=0,V1=2] 
* Loop 54: start(V,V1,V23) [V>=0,V1=1] 
* Loop 55: start(V,V1,V23) [V>=0,V1=0] 
* Loop 56: start(V,V1,V23) [V=2] 
* Loop 57: start(V,V1,V23) [V=1] 
* Loop 58: start(V,V1,V23) [V>=0] 

### Ranking functions of CR start(V,V1,V23) 

#### Partial ranking functions of CR start(V,V1,V23) 


### Resulting Chains:start(V,V1,V23) 
* [58]
* [57]
* [56]
* [55]
* [54]
* [53]
* [52]
* [51]...
* [50]...
* [49]...
* [48]...
* [47]...


### Merging Chains  start/3 into  External patterns of execution 
* [[57],[58]] --> 1 
* [[56]] --> 2 
* [[55]] --> 3 
* [[54]] --> 4 
* [[53]] --> 5 
* [[52]] --> 6 
* [[49]] --> 7 
* [[48]] --> 8 
* [[51]] --> 9 
* [[50]] --> 10 
* [[47]] --> 11 


Computing Bounds
=====================================

#### Cost of chains of g(V,Out):
* Chain [24]: 1
  with precondition: [V=0,Out=0] 

* Chain [23]: 1
  with precondition: [V=1,Out=0] 

* Chain [22]: 1
  with precondition: [V=1,Out=1] 

* Chain [21]: 1
  with precondition: [V=2,Out=0] 

* Chain [20]: 1
  with precondition: [V=2,Out=1] 

* Chain [19]: 1
  with precondition: [V=2,Out=2] 


#### Cost of loops [25,26,27,28,29,35,36,37,38,39] 

 * loop 25:foldBfoldCf(A,B,C) -> [foldBfoldCf(A',B',C')] 
3
 * loop 26:foldBfoldCf(A,B,C) -> [foldBfoldCf(A',B',C')] 
3
 * loop 27:foldBfoldCf(A,B,C) -> [foldBfoldCf(A',B',C')] 
3
 * loop 28:foldBfoldCf(A,B,C) -> [foldBfoldCf(A',B',C')] 
3
 * loop 29:foldBfoldCf(A,B,C) -> [foldBfoldCf(A',B',C')] 
3
 * loop 35:foldBfoldCf(A,B,C) -> [foldBfoldCf(A',B',C'),foldBfoldCf(A'2,B'2,C'2)] 
1
 * loop 36:foldBfoldCf(A,B,C) -> [foldBfoldCf(A',B',C'),foldBfoldCf(A'2,B'2,C'2)] 
1
 * loop 37:foldBfoldCf(A,B,C) -> [foldBfoldCf(A',B',C'),foldBfoldCf(A'2,B'2,C'2)] 
4
 * loop 38:foldBfoldCf(A,B,C) -> [foldBfoldCf(A',B',C'),foldBfoldCf(A'2,B'2,C'2)] 
4
 * loop 39:foldBfoldCf(A,B,C) -> [foldBfoldCf(A',B',C'),foldBfoldCf(A'2,B'2,C'2)] 
4
#### Cost of phase [25,26,27,28,29,35,36,37,38,39]:foldBfoldCf(A,B,C) -> [] 
39*it(25)+0
#### Cost of chains of foldBfoldCf(A,B,C):
* Chain [multiple([25,26,27,28,29,35,36,37,38,39],[[],[34],[33],[32],[31],[30]])]...: 39*it(25)+0
  with precondition: [A+B>=1,B>=0,A>=0] 

* Chain [34]: 2
  with precondition: [B=0,C=0,A>=0] 

* Chain [33]: 1
  with precondition: [B=0,A=C,A>=0] 

* Chain [32]: 2
  with precondition: [B=1,C=0,A>=0] 

* Chain [31]: 2
  with precondition: [B=2,C=0,A>=0] 

* Chain [30]: 3
  with precondition: [B=2,A+1=C,A>=1] 


#### Cost of loops [45,46] 

 * loop 45:fold(V,V1,V23,Out) -> [fold(V',V1',V23',Out')] 
2
 * loop 46:fold(V,V1,V23,Out) -> [fold(V',V1',V23',Out')] 
3
#### Cost of phase [45,46]:fold(V,V1,V23,Out) -> [fold(V',V1',V23',Out')] 
5*it(45)+0
  Such that:aux(104) =< V23
aux(105) =< V23-V23'
it(45) =< aux(104)
it(45) =< aux(105)

#### Cost of phase [45,46]:fold(V,V1,V23,Out) -> [fold(V',V1',V23',Out')] 
5*it(45)+0
  Such that:aux(104) =< V23
aux(105) =< V23-V23'
it(45) =< aux(104)
it(45) =< aux(105)

#### Cost of loops [44] 

 * loop 44:fold(V,V1,V23,Out) -> [fold(V',V1',V23',Out')] 
3
#### Cost of phase [44]:fold(V,V1,V23,Out) -> [fold(V',V1',V23',Out')] 
3*it(44)+0
  Such that:it(44) =< V23
it(44) =< V23-V23'

#### Cost of phase [44]:fold(V,V1,V23,Out) -> [fold(V',V1',V23',Out')] 
3*it(44)+0
  Such that:it(44) =< V23
it(44) =< V23-V23'

#### Cost of loops [42] 

 * loop 42:fold(V,V1,V23,Out) -> [fold(V',V1',V23',Out')] 
4
#### Cost of phase [42]:fold(V,V1,V23,Out) -> [fold(V',V1',V23',Out')] 
4*it(42)+0
  Such that:it(42) =< V23
it(42) =< V23-V23'

#### Cost of loops [43] 

 * loop 43:fold(V,V1,V23,Out) -> [fold(V',V1',V23',Out')] 
3
#### Cost of phase [43]:fold(V,V1,V23,Out) -> [fold(V',V1',V23',Out')] 
3*it(43)+0
  Such that:it(43) =< V23
it(43) =< V23-V23'

#### Cost of phase [42]:fold(V,V1,V23,Out) -> [fold(V',V1',V23',Out')] 
4*it(42)+0
  Such that:it(42) =< V23
it(42) =< V23-V23'

#### Cost of phase [43]:fold(V,V1,V23,Out) -> [fold(V',V1',V23',Out')] 
3*it(43)+0
  Such that:it(43) =< V23
it(43) =< V23-V23'

#### Cost of phase [43]:fold(V,V1,V23,Out) -> [fold(V',V1',V23',Out')] 
3*it(43)+0
  Such that:it(43) =< V23
it(43) =< V23-V23'

#### Cost of phase [43]:fold(V,V1,V23,Out) -> [fold(V',V1',V23',Out')] 
3*it(43)+0
  Such that:it(43) =< V23
it(43) =< V23-V23'

#### Cost of chains of fold(V,V1,V23,Out):
* Chain [[45,46],41]...: 5*it(45)+39*s(1)+1
  Such that:aux(106) =< V23
it(45) =< aux(106)

  with precondition: [V1=0,V>=0,V23>=2,Out>=0] 

* Chain [[45,46],40]: 5*it(45)+1
  Such that:aux(107) =< V23
it(45) =< aux(107)

  with precondition: [V1=0,V23>=1,Out>=0,V>=Out] 

* Chain [[44],41]...: 3*it(44)+39*s(1)+1
  Such that:it(44) =< V23

  with precondition: [V1=1,Out=0,V>=0,V23>=2] 

* Chain [[44],40]: 3*it(44)+1
  Such that:it(44) =< V23

  with precondition: [V1=1,Out=0,V>=0,V23>=1] 

* Chain [[43],[42],41]...: 7*it(42)+39*s(1)+1
  Such that:aux(108) =< V23
it(42) =< aux(108)

  with precondition: [V1=2,Out=0,V>=0,V23>=3] 

* Chain [[43],[42],40]: 7*it(42)+1
  Such that:aux(109) =< V23
it(42) =< aux(109)

  with precondition: [V1=2,Out=0,V>=1,V23>=2] 

* Chain [[43],41]...: 3*it(43)+39*s(1)+1
  Such that:it(43) =< V23

  with precondition: [V1=2,Out=0,V>=0,V23>=2] 

* Chain [[43],40]: 3*it(43)+1
  Such that:it(43) =< V23

  with precondition: [V1=2,Out=0,V>=0,V23>=1] 

* Chain [[42],41]...: 4*it(42)+39*s(1)+1
  Such that:it(42) =< V23

  with precondition: [V1=2,V>=0,V23>=2,Out>=2] 

* Chain [[42],40]: 4*it(42)+1
  Such that:it(42) =< V23

  with precondition: [V1=2,V+V23=Out,V>=1,V23>=1] 

* Chain [41]...: 39*s(1)+1
  with precondition: [V>=0,V1>=0,V23>=1] 

* Chain [40]: 1
  with precondition: [V23=0,V=Out,V>=0,V1>=0] 


#### Cost of chains of start(V,V1,V23):
* Chain [58]: 4
  with precondition: [V>=0] 

* Chain [57]: 1
  with precondition: [V=1] 

* Chain [56]: 1
  with precondition: [V=2] 

* Chain [55]: 5*s(6)+8
  Such that:s(5) =< V23
s(6) =< s(5)

  with precondition: [V1=0,V>=0] 

* Chain [54]: 3*s(7)+2
  Such that:s(7) =< V23

  with precondition: [V1=1,V>=0] 

* Chain [53]: 14*s(9)+3
  Such that:aux(111) =< V23
s(9) =< aux(111)

  with precondition: [V1=2,V>=0] 

* Chain [52]: 1
  with precondition: [V23=0,V>=0,V1>=0] 

* Chain [51]...: 5*s(12)+78*s(13)+1
  Such that:s(11) =< V23
s(12) =< s(11)

  with precondition: [V>=0,V1>=0,V23>=1] 

* Chain [50]...: 1*aux(112)+0
  with precondition: [V>=0,V1>=0,V+V1>=1] 

* Chain [49]...: 3*s(20)+39*s(21)+1
  Such that:s(20) =< V23

  with precondition: [V1=1,V>=0,V23>=2] 

* Chain [48]...: 14*s(22)+117*s(23)+1
  Such that:aux(113) =< V23
s(22) =< aux(113)

  with precondition: [V1=2,V>=0,V23>=2] 

* Chain [47]...: 39*s(29)+1
  with precondition: [V>=1] 


Closed-form bounds of start(V,V1,V23): 
-------------------------------------
* Chain [58] with precondition: [V>=0] 
    - Upper bound: 4 
    - Complexity: constant 
* Chain [57] with precondition: [V=1] 
    - Upper bound: 1 
    - Complexity: constant 
* Chain [56] with precondition: [V=2] 
    - Upper bound: 1 
    - Complexity: constant 
* Chain [55] with precondition: [V1=0,V>=0] 
    - Upper bound: nat(V23)*5+8 
    - Complexity: n 
* Chain [54] with precondition: [V1=1,V>=0] 
    - Upper bound: nat(V23)*3+2 
    - Complexity: n 
* Chain [53] with precondition: [V1=2,V>=0] 
    - Upper bound: nat(V23)*14+3 
    - Complexity: n 
* Chain [52] with precondition: [V23=0,V>=0,V1>=0] 
    - Upper bound: 1 
    - Complexity: constant 
* Chain [51]... with precondition: [V>=0,V1>=0,V23>=1] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [50]... with precondition: [V>=0,V1>=0,V+V1>=1] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [49]... with precondition: [V1=1,V>=0,V23>=2] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [48]... with precondition: [V1=2,V>=0,V23>=2] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [47]... with precondition: [V>=1] 
    - Upper bound: inf 
    - Complexity: infinity 

### Maximum cost of start(V,V1,V23): inf 
Asymptotic class: infinity 

Time statistics: 
-------------------------------------
* Partial evaluation computed in 103 ms.
* Invariants computed in 237 ms.
   - Backward Invariants 93 ms.
   - Transitive Invariants 51 ms.
* Refinement performed in 546 ms.
* Termination proved in 105 ms.
* Upper bounds computed in 1225 ms.
   - Equation cost structures 162 ms.
   - Phase cost structures 1001 ms.
   - Chain cost structures 83 ms.
   - Solving cost expressions 4 ms.
* Total analysis performed in 2313 ms.



Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. non_recursive  : [and/3]
1. recursive [non_tail,multiple] : [eqList/3]
2. recursive  : [fun/3]
3. recursive [non_tail] : [lgth/2]
4. recursive  : [fun2/4,monus/3]
5. recursive  : [gt0/3]
6. recursive  : [fun1/4,fun3/4,gcd/3]
7. non_recursive  : [goal/3]
8. non_recursive  : [start/3]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into and/3
1. SCC is partially evaluated into eqList/3
2. SCC is partially evaluated into fun/3
3. SCC is partially evaluated into lgth/2
4. SCC is partially evaluated into monus/3
5. SCC is partially evaluated into gt0/3
6. SCC is partially evaluated into gcd/3
7. SCC is completely evaluated into other SCCs
8. SCC is partially evaluated into start/3

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations and/3 
* CE 48 is refined into CE [49] 
* CE 47 is refined into CE [50] 
* CE 45 is refined into CE [51] 
* CE 46 is refined into CE [52] 
* CE 44 is refined into CE [53] 


#### Refined cost equations and/3 
* CE 49: and(V1,V,Out) = 0
     [V>=0,V1>=0,Out=0] 
* CE 50: and(V1,V,Out) = 0
     [Out=2,V=2,V1=2] 
* CE 51: and(V1,V,Out) = 0
     [Out=1,V=1,V1=2] 
* CE 52: and(V1,V,Out) = 0
     [Out=1,V=2,V1=1] 
* CE 53: and(V1,V,Out) = 0
     [Out=1,V=1,V1=1] 

### Cost equations --> "Loop" of and/3 
* CEs [49] --> Loop 31 
* CEs [50] --> Loop 32 
* CEs [51] --> Loop 33 
* CEs [52] --> Loop 34 
* CEs [53] --> Loop 35 

#### Loops of and/3 
* Loop 31: and(V1,V,Out) [V>=0,V1>=0,Out=0] 
* Loop 32: and(V1,V,Out) [Out=2,V=2,V1=2] 
* Loop 33: and(V1,V,Out) [Out=1,V=1,V1=2] 
* Loop 34: and(V1,V,Out) [Out=1,V=2,V1=1] 
* Loop 35: and(V1,V,Out) [Out=1,V=1,V1=1] 

### Ranking functions of CR and(V1,V,Out) 

#### Partial ranking functions of CR and(V1,V,Out) 


### Resulting Chains:and(V1,V,Out) 
* [35]
* [34]
* [33]
* [32]
* [31]


### Merging Chains  and/3 into  External patterns of execution 
* [[35]] --> 1 
* [[34]] --> 2 
* [[33]] --> 3 
* [[32]] --> 4 
* [[31]] --> 5 


### Specialization of cost equations eqList/3 
* CE 43 is refined into CE [54] 
* CE 40 is refined into CE [55] 
* CE 41 is refined into CE [56] 
* CE 42 is refined into CE [57] 
* CE 39 is refined into CE [58,59,60,61,62] 


#### Refined cost equations eqList/3 
* CE 54: eqList(V1,V,Out) = 0
     [V>=0,V1>=0,Out=0] 
* CE 55: eqList(V1,V,Out) = 1
     [V1>=1,Out=1,V=0] 
* CE 56: eqList(V1,V,Out) = 1
     [V>=1,Out=1,V1=0] 
* CE 57: eqList(V1,V,Out) = 1
     [Out=2,V=0,V1=0] 
* CE 58: eqList(V1,V,Out) = 1+ eqList(W1,X1,Y1)+ eqList(Z1,A2,B2)+ and(C2,D2,E2):1
     [A2>=0,Z1>=0,X1>=0,W1>=0,X1+A2+1=V,W1+Z1+1=V1,B2=1,Y1=1,E2=1,D2=1,C2=1,Out=1] 
* CE 59: eqList(V1,V,Out) = 1+ eqList(W1,X1,Y1)+ eqList(Z1,A2,B2)+ and(C2,D2,E2):2
     [A2>=0,Z1>=0,X1>=0,W1>=0,X1+A2+1=V,W1+Z1+1=V1,B2=2,Y1=1,E2=1,D2=2,C2=1,Out=1] 
* CE 60: eqList(V1,V,Out) = 1+ eqList(W1,X1,Y1)+ eqList(Z1,A2,B2)+ and(C2,D2,E2):3
     [A2>=0,Z1>=0,X1>=0,W1>=0,X1+A2+1=V,W1+Z1+1=V1,B2=1,Y1=2,E2=1,D2=1,C2=2,Out=1] 
* CE 61: eqList(V1,V,Out) = 1+ eqList(W1,X1,Y1)+ eqList(Z1,A2,B2)+ and(C2,D2,E2):4
     [A2>=0,Z1>=0,X1>=0,W1>=0,X1+A2+1=V,W1+Z1+1=V1,B2=2,Y1=2,E2=2,D2=2,C2=2,Out=2] 
* CE 62: eqList(V1,V,Out) = 1+ eqList(W1,X1,Y1)+ eqList(Z1,A2,B2)+ and(Y1,B2,C2):5
     [A2>=0,Z1>=0,X1>=0,W1>=0,B2>=0,Y1>=0,X1+A2+1=V,W1+Z1+1=V1,C2=0,Out=0] 

### Cost equations --> "Loop" of eqList/3 
* CEs [61] --> Loop 36 
* CEs [60] --> Loop 37 
* CEs [59] --> Loop 38 
* CEs [58] --> Loop 39 
* CEs [62] --> Loop 40 
* CEs [54] --> Loop 41 
* CEs [55] --> Loop 42 
* CEs [56] --> Loop 43 
* CEs [57] --> Loop 44 

#### Loops of eqList/3 
* Loop 36: eqList(V1,V,Out)->  eqList(V1',V',Out')  eqList(V1'2,V'2,Out'2)
                  [V>=V'+1,V1>=V1'+1,V'>=0,V1'>=0,V'+V'2+1=V,V1'+V1'2+1=V1,Out'2=2,Out'=2,Out=2] 
* Loop 37: eqList(V1,V,Out)->  eqList(V1',V',Out')  eqList(V1'2,V'2,Out'2)
                  [V>=V'+1,V1>=V1'+1,V'>=0,V1'>=0,V'+V'2+1=V,V1'+V1'2+1=V1,Out'2=1,Out'=2,Out=1] 
* Loop 38: eqList(V1,V,Out)->  eqList(V1',V',Out')  eqList(V1'2,V'2,Out'2)
                  [V>=V'+1,V1>=V1'+1,V'>=0,V1'>=0,V'+V'2+1=V,V1'+V1'2+1=V1,Out'2=2,Out'=1,Out=1] 
* Loop 39: eqList(V1,V,Out)->  eqList(V1',V',Out')  eqList(V1'2,V'2,Out'2)
                  [V>=V'+1,V1>=V1'+1,V'>=0,V1'>=0,V'+V'2+1=V,V1'+V1'2+1=V1,Out'2=1,Out'=1,Out=1] 
* Loop 40: eqList(V1,V,Out)->  eqList(V1',V',Out')  eqList(V1'2,V'2,Out'2)
                  [V>=V'+1,V1>=V1'+1,Out'2>=0,Out'>=0,V'>=0,V1'>=0,V'+V'2+1=V,V1'+V1'2+1=V1,Out=0] 
* Loop 41: eqList(V1,V,Out) [V>=0,V1>=0,Out=0] 
* Loop 42: eqList(V1,V,Out) [V1>=1,Out=1,V=0] 
* Loop 43: eqList(V1,V,Out) [V>=1,Out=1,V1=0] 
* Loop 44: eqList(V1,V,Out) [Out=2,V=0,V1=0] 

### Ranking functions of CR eqList(V1,V,Out) 
* RF of phase [36]: [V,V1]
* RF of phase [37,38,39]: [V,V1]
* RF of phase [40]: [V,V1]

#### Partial ranking functions of CR eqList(V1,V,Out) 
* Partial RF of phase [36]:
  - RF of loop [36:1,36:2]:
    V
    V1
* Partial RF of phase [37,38,39]:
  - RF of loop [37:1,37:2,38:1,38:2,39:1,39:2]:
    V
    V1
* Partial RF of phase [40]:
  - RF of loop [40:1,40:2]:
    V
    V1


### Resulting Chains:eqList(V1,V,Out) 
* [44]
* [43]
* [42]
* [41]
* [multiple([40],[[multiple([37,38,39],[[multiple([36],[[44]])],[44],[43],[42]])],[multiple([36],[[44]])],[44],[43],[42],[41]])]
* [multiple([37,38,39],[[multiple([36],[[44]])],[44],[43],[42]])]
* [multiple([36],[[44]])]


### Merging Chains  eqList/3 into  External patterns of execution 
* [[44]] --> 1 
* [[43]] --> 2 
* [[42]] --> 3 
* [[41],[multiple([40],[[multiple([37,38,39],[[multiple([36],[[44]])],[44],[43],[42]])],[multiple([36],[[44]])],[44],[43],[42],[41]])]] --> 4 
* [[multiple([37,38,39],[[multiple([36],[[44]])],[44],[43],[42]])]] --> 5 
* [[multiple([36],[[44]])]] --> 6 


### Specialization of cost equations fun/3 
* CE 35 is refined into CE [63] 
* CE 34 is refined into CE [64] 
* CE 33 is refined into CE [65] 


#### Refined cost equations fun/3 
* CE 63: fun(V1,V,Out) = 0
     [V>=0,V1>=0,Out=0] 
* CE 64: fun(A,B,B) = 1
     [B>=0,A=0] 
* CE 65: fun(V1,V,Out) = 1+ fun(W1,V,X1)
     [V1+X1>=Out,Out>=X1+1,V>=0,V1+X1=Out+W1] 

### Cost equations --> "Loop" of fun/3 
* CEs [65] --> Loop 45 
* CEs [63] --> Loop 46 
* CEs [64] --> Loop 47 

#### Loops of fun/3 
* Loop 45: fun(V1,V,Out)->  fun(V1',V,Out')
                  [V1+Out'>=Out,Out>=Out'+1,V>=0,V1+Out'=Out+V1'] 
* Loop 46: fun(V1,V,Out) [V>=0,V1>=0,Out=0] 
* Loop 47: fun(A,B,B) [B>=0,A=0] 

### Ranking functions of CR fun(V1,V,Out) 
* RF of phase [45]: [V1]

#### Partial ranking functions of CR fun(V1,V,Out) 
* Partial RF of phase [45]:
  - RF of loop [45:1]:
    V1


### Resulting Chains:fun(V1,V,Out) 
* [[45],47]
* [[45],46]
* [47]
* [46]


### Merging Chains  fun/3 into  External patterns of execution 
* [[47]] --> 1 
* [[46]] --> 2 
* [[47,[45]]] --> 3 
* [[46,[45]]] --> 4 


### Specialization of cost equations lgth/2 
* CE 37 is refined into CE [66] 
* CE 38 is refined into CE [67] 
* CE 36 is refined into CE [68,69,70] 


#### Refined cost equations lgth/2 
* CE 66: lgth(V1,Out) = 1
     [Out=0,V1=0] 
* CE 67: lgth(V1,Out) = 0
     [V1>=0,Out=0] 
* CE 68: lgth(V1,Out) = 1+ lgth(W1,X1)+ fun(Y1,X1,Z1):2
     [V1>=W1+1,W1>=0,X1>=0,Z1=0,Y1=1,Out=0] 
* CE 69: lgth(V1,Out) = 1+ lgth(W1,X1)+ fun(Y1,Z1,Out):3
     [V1>=W1+1,W1>=0,Out>=1,Out=X1+1,Out=Z1+1,Y1=1] 
* CE 70: lgth(V1,Out) = 1+ lgth(W1,X1)+ fun(Y1,X1,Z1):4
     [V1>=W1+1,W1>=0,X1>=0,Z1=1,Y1=1,Out=1] 

### Cost equations --> "Loop" of lgth/2 
* CEs [69] --> Loop 48 
* CEs [70] --> Loop 49 
* CEs [68] --> Loop 50 
* CEs [66,67] --> Loop 51 

#### Loops of lgth/2 
* Loop 48: lgth(V1,Out)->  lgth(V1',Out')
                  [V1>=V1'+1,V1'>=0,Out>=1,Out=Out'+1] 
* Loop 49: lgth(V1,Out)->  lgth(V1',Out')
                  [V1>=V1'+1,Out'>=0,V1'>=0,Out=1] 
* Loop 50: lgth(V1,Out)->  lgth(V1',Out')
                  [V1>=V1'+1,Out'>=0,V1'>=0,Out=0] 
* Loop 51: lgth(V1,Out) [V1>=0,Out=0] 

### Ranking functions of CR lgth(V1,Out) 
* RF of phase [48,49,50]: [V1]

#### Partial ranking functions of CR lgth(V1,Out) 
* Partial RF of phase [48,49,50]:
  - RF of loop [48:1,49:1,50:1]:
    V1


### Resulting Chains:lgth(V1,Out) 
* [[48,49,50],51]
* [51]


### Merging Chains  lgth/2 into  External patterns of execution 
* [[51]] --> 1 
* [[51,[48,49,50]]] --> 2 


### Specialization of cost equations monus/3 
* CE 23 is refined into CE [71,72,73] 
* CE 22 is refined into CE [74] 
* CE 21 is refined into CE [75,76,77,78,79,80] 


#### Refined cost equations monus/3 
* CE 71: monus(V1,V,Out) = 1+ lgth(V,W1):1+ eqList(X1,Y1,Z1):2+ monus(A2,B2,Out)
     [V>=B2+1,V1>=A2+1,B2>=0,A2>=0,Z1=1,Y1=1,X1=0,W1=0] 
* CE 72: monus(V1,V,Out) = 1+ lgth(V,W1):2+ eqList(X1,Y1,Z1):2+ monus(A2,B2,Out)
     [V>=B2+1,V1>=A2+1,B2>=0,A2>=0,Z1=1,Y1=1,X1=0,W1=0] 
* CE 73: monus(V1,V,Out) = 1+ lgth(V,W1):2+ eqList(W1,X1,Y1):5+ monus(Z1,A2,Out)
     [V>=A2+1,V1>=Z1+1,V>=W1,A2>=0,Z1>=0,W1>=2,Y1=1,X1=1] 
* CE 74: monus(V1,V,Out) = 1+ lgth(V,W1):2+ eqList(X1,Y1,Z1):6
     [V1>=Out+1,V>=1,Out>=0,Z1=2,Y1=1,X1=1,W1=1] 
* CE 75: monus(V1,V,Out) = 1+ lgth(V,W1):1+ eqList(X1,Y1,Z1):2
     [V>=0,V1>=0,Z1=1,Y1=1,X1=0,W1=0,Out=0] 
* CE 76: monus(V1,V,Out) = 1+ lgth(V,W1):1+ eqList(X1,Y1,Z1):4
     [V>=0,V1>=0,Z1=0,Y1=1,X1=0,W1=0,Out=0] 
* CE 77: monus(V1,V,Out) = 1+ lgth(V,W1):2+ eqList(X1,Y1,Z1):2
     [V>=1,V1>=0,Z1=1,Y1=1,X1=0,W1=0,Out=0] 
* CE 78: monus(V1,V,Out) = 1+ lgth(V,W1):2+ eqList(W1,X1,Y1):4
     [V>=W1,W1>=0,V>=1,V1>=0,Y1=0,X1=1,Out=0] 
* CE 79: monus(V1,V,Out) = 1+ lgth(V,W1):2+ eqList(W1,X1,Y1):5
     [V>=W1,W1>=2,V1>=0,Y1=1,X1=1,Out=0] 
* CE 80: monus(V1,V,Out) = 1+ lgth(V,W1):2+ eqList(X1,Y1,Z1):6
     [V>=1,V1>=0,Z1=2,Y1=1,X1=1,W1=1,Out=0] 

### Cost equations --> "Loop" of monus/3 
* CEs [74] --> Loop 52 
* CEs [75,76,77,78,79,80] --> Loop 53 
* CEs [71,72,73] --> Loop 54 

#### Loops of monus/3 
* Loop 52: monus(V1,V,Out) [V1>=Out+1,Out>=0,V>=1] 
* Loop 53: monus(V1,V,Out) [V>=0,V1>=0,Out=0] 
* Loop 54: monus(V1,V,Out)->  monus(V1',V',Out)
                  [V>=V'+1,V1>=V1'+1,V'>=0,V1'>=0] 

### Ranking functions of CR monus(V1,V,Out) 
* RF of phase [54]: [V,V1]

#### Partial ranking functions of CR monus(V1,V,Out) 
* Partial RF of phase [54]:
  - RF of loop [54:1]:
    V
    V1


### Resulting Chains:monus(V1,V,Out) 
* [[54],53]
* [[54],52]
* [53]
* [52]


### Merging Chains  monus/3 into  External patterns of execution 
* [[53],[53,[54]]] --> 1 
* [[52],[52,[54]]] --> 2 


### Specialization of cost equations gt0/3 
* CE 20 is refined into CE [81] 
* CE 17 is refined into CE [82] 
* CE 19 is refined into CE [83] 
* CE 18 is refined into CE [84] 


#### Refined cost equations gt0/3 
* CE 81: gt0(V1,V,Out) = 0
     [V>=0,V1>=0,Out=0] 
* CE 82: gt0(V1,V,Out) = 1
     [V1>=1,Out=2,V=0] 
* CE 83: gt0(V1,V,Out) = 1
     [V>=0,Out=1,V1=0] 
* CE 84: gt0(V1,V,Out) = 1+ gt0(W1,X1,Out)
     [V>=X1+1,V1>=W1+1,X1>=0,W1>=0] 

### Cost equations --> "Loop" of gt0/3 
* CEs [84] --> Loop 55 
* CEs [81] --> Loop 56 
* CEs [82] --> Loop 57 
* CEs [83] --> Loop 58 

#### Loops of gt0/3 
* Loop 55: gt0(V1,V,Out)->  gt0(V1',V',Out)
                  [V>=V'+1,V1>=V1'+1,V'>=0,V1'>=0] 
* Loop 56: gt0(V1,V,Out) [V>=0,V1>=0,Out=0] 
* Loop 57: gt0(V1,V,Out) [V1>=1,Out=2,V=0] 
* Loop 58: gt0(V1,V,Out) [V>=0,Out=1,V1=0] 

### Ranking functions of CR gt0(V1,V,Out) 
* RF of phase [55]: [V,V1]

#### Partial ranking functions of CR gt0(V1,V,Out) 
* Partial RF of phase [55]:
  - RF of loop [55:1]:
    V
    V1


### Resulting Chains:gt0(V1,V,Out) 
* [[55],58]
* [[55],57]
* [[55],56]
* [58]
* [57]
* [56]


### Merging Chains  gt0/3 into  External patterns of execution 
* [[58]] --> 1 
* [[57]] --> 2 
* [[56],[56,[55]]] --> 3 
* [[58,[55]]] --> 4 
* [[57,[55]]] --> 5 


### Specialization of cost equations gcd/3 
* CE 28 is refined into CE [85] 
* CE 31 is refined into CE [86] 
* CE 30 is refined into CE [87] 
* CE 24 is refined into CE [88,89,90] 
* CE 27 is refined into CE [91,92,93] 
* CE 29 is refined into CE [94] 
* CE 32 is refined into CE [95] 
* CE 26 is refined into CE [96,97] 
* CE 25 is refined into CE [98,99] 


#### Refined cost equations gcd/3 
* CE 85: gcd(A,A,A) = 1+ eqList(A,A,B):6
     [A>=1,B=2] 
* CE 86: gcd(V1,V,Out) = 1
     [V1>=1,Out=0,V=0] 
* CE 87: gcd(V1,V,Out) = 1
     [V>=1,Out=0,V1=0] 
* CE 88: gcd(V1,V,Out) = 1+ eqList(V1,V,W1):5+ gt0(V1,V,X1):3
     [V1+V>=3,V>=1,V1>=1,X1=0,W1=1,Out=0] 
* CE 89: gcd(V1,V,Out) = 1+ eqList(V1,V,W1):5+ gt0(V1,V,X1):4
     [V1+V>=3,V>=1,V1>=1,X1=1,W1=1,Out=0] 
* CE 90: gcd(V1,V,Out) = 1+ eqList(V1,V,W1):5+ gt0(V1,V,X1):5
     [V>=1,V1>=2,X1=2,W1=1,Out=0] 
* CE 91: gcd(V1,V,Out) = 1+ eqList(V1,V,W1):4
     [V>=1,V1>=1,W1=0,Out=0] 
* CE 92: gcd(V1,V,Out) = 1+ eqList(V1,V,W1):5
     [V1+V>=3,V>=1,V1>=1,W1=1,Out=0] 
* CE 93: gcd(A,A,B) = 1+ eqList(A,A,C):6
     [A>=1,C=2,B=0] 
* CE 94: gcd(V1,V,Out) = 1
     [Out=0,V=0,V1=0] 
* CE 95: gcd(V1,V,Out) = 0
     [V>=0,V1>=0,Out=0] 
* CE 96: gcd(V1,V,Out) = 1+ eqList(V1,V,W1):5+ gt0(V1,V,X1):4+ monus(V,V1,Y1):1+ gcd(Z1,V1,Out)
     [V1+V>=3,V1>=1,V>=1,Z1=0,Y1=0,X1=1,W1=1] 
* CE 97: gcd(V1,V,Out) = 1+ eqList(V1,V,W1):5+ gt0(V1,V,X1):4+ monus(V,V1,Y1):2+ gcd(Y1,V1,Out)
     [V1+V>=3,V>=Y1+1,Y1>=0,V1>=1,X1=1,W1=1] 
* CE 98: gcd(V1,V,Out) = 1+ eqList(V1,V,W1):5+ gt0(V1,V,X1):5+ monus(V1,V,Y1):1+ gcd(V,Z1,Out)
     [V>=1,V1>=2,Z1=0,Y1=0,X1=2,W1=1] 
* CE 99: gcd(V1,V,Out) = 1+ eqList(V1,V,W1):5+ gt0(V1,V,X1):5+ monus(V1,V,Y1):2+ gcd(V,Y1,Out)
     [V1>=Y1+1,Y1>=0,V>=1,V1>=2,X1=2,W1=1] 

### Cost equations --> "Loop" of gcd/3 
* CEs [98,99] --> Loop 59 
* CEs [96,97] --> Loop 60 
* CEs [85] --> Loop 61 
* CEs [93] --> Loop 62 
* CEs [86] --> Loop 63 
* CEs [87] --> Loop 64 
* CEs [88,89,90,91,92,94,95] --> Loop 65 

#### Loops of gcd/3 
* Loop 59: gcd(V1,V,Out)->  gcd(V,A',Out)
                  [V1>=A'+1,A'>=0,V>=1,V1>=2] 
* Loop 60: gcd(V1,V,Out)->  gcd(A',V1,Out)
                  [V1+V>=3,V>=A'+1,A'>=0,V1>=1] 
* Loop 61: gcd(A,A,A) [A>=1] 
* Loop 62: gcd(A,A,B) [A>=1,B=0] 
* Loop 63: gcd(V1,V,Out) [V1>=1,Out=0,V=0] 
* Loop 64: gcd(V1,V,Out) [V>=1,Out=0,V1=0] 
* Loop 65: gcd(V1,V,Out) [V>=0,V1>=0,Out=0] 

### Ranking functions of CR gcd(V1,V,Out) 
* RF of phase [59,60]: [V1+V-2]

#### Partial ranking functions of CR gcd(V1,V,Out) 
* Partial RF of phase [59,60]:
  - RF of loop [59:1,60:1]:
    V1+V-2


### Resulting Chains:gcd(V1,V,Out) 
* [[59,60],65]
* [[59,60],64]
* [[59,60],63]
* [[59,60],62]
* [[59,60],61]
* [65]
* [64]
* [63]
* [62]
* [61]


### Merging Chains  gcd/3 into  External patterns of execution 
* [[64],[65],[62,[59,60]],[63,[59,60]],[64,[59,60]],[65,[59,60]]] --> 1 
* [[63]] --> 2 
* [[62]] --> 3 
* [[61]] --> 4 
* [[61,[59,60]]] --> 5 


### Specialization of cost equations start/3 
* CE 5 is refined into CE [100,101,102,103,104,105,106] 
* CE 2 is refined into CE [107,108,109,110,111] 
* CE 3 is refined into CE [112] 
* CE 4 is refined into CE [113,114,115,116,117,118,119,120] 
* CE 6 is refined into CE [121,122,123,124,125,126] 
* CE 7 is refined into CE [127,128,129,130,131] 
* CE 8 is refined into CE [132,133] 
* CE 9 is refined into CE [134,135,136,137] 
* CE 10 is refined into CE [138,139,140,141,142] 
* CE 11 is refined into CE [143,144,145,146,147] 
* CE 12 is refined into CE [148,149] 
* CE 13 is refined into CE [150,151,152,153,154,155] 
* CE 14 is refined into CE [156,157] 
* CE 15 is refined into CE [158,159,160,161,162] 
* CE 16 is refined into CE [163,164,165,166,167] 


#### Refined cost equations start/3 
* CE 100: start(V1,V,V35) = 0+ monus(V,V35,W35):1+ gcd(V35,X35,Y35):1
     [V35>=0,V>=0,Y35=0,X35=0,W35=0,V1=2] 
* CE 101: start(V1,V,V35) = 0+ monus(V,V35,W35):1+ gcd(V35,X35,Y35):2
     [V35>=1,V>=0,Y35=0,X35=0,W35=0,V1=2] 
* CE 102: start(V1,V,V35) = 0+ monus(V,V35,W35):2+ gcd(V35,W35,X35):1
     [V>=W35+1,W35>=0,V35>=1,X35=0,V1=2] 
* CE 103: start(V1,V,V35) = 0+ monus(V,V35,W35):2+ gcd(V35,X35,Y35):2
     [V35>=1,V>=1,Y35=0,X35=0,W35=0,V1=2] 
* CE 104: start(V1,V,V35) = 0+ monus(V,V35,V35):2+ gcd(V35,V35,W35):3
     [V>=V35+1,V35>=1,W35=0,V1=2] 
* CE 105: start(V1,V,V35) = 0+ monus(V,V35,V35):2+ gcd(V35,V35,V35):4
     [V>=V35+1,V35>=1,V1=2] 
* CE 106: start(V1,V,V35) = 0+ monus(V,V35,W35):2+ gcd(V35,W35,X35):5
     [V35+W35>=2*X35+1,W35>=X35,V35>=X35,V>=W35+1,X35>=1,V1=2] 
* CE 107: start(V1,V,V35) = 0+ gt0(W35,V35,X35):1
     [V35>=0,X35=1,W35=0,V=0,V1=1] 
* CE 108: start(V1,V,V35) = 0+ gt0(V,W35,X35):2
     [V>=1,X35=2,W35=0,V35=0,V1=1] 
* CE 109: start(V1,V,V35) = 0+ gt0(V,V35,W35):3
     [V35>=0,V>=0,W35=0,V1=1] 
* CE 110: start(V1,V,V35) = 0+ gt0(V,V35,W35):4
     [V35>=1,V>=1,W35=1,V1=1] 
* CE 111: start(V1,V,V35) = 0+ gt0(V,V35,W35):5
     [V35>=1,V>=2,W35=2,V1=1] 
* CE 112: start(V1,V,V35) = 0
     [V35>=0,V>=0,V1>=0] 
* CE 113: start(V1,V,V35) = 0+ gt0(V,W35,X35):2+ monus(V,Y35,Z35):1+ gcd(A36,B36,C36):1
     [V>=1,C36=0,B36=0,A36=0,Z35=0,Y35=0,X35=2,W35=0,V35=0,V1=1] 
* CE 114: start(V1,V,V35) = 0+ gt0(V,V35,W35):5+ monus(V,V35,X35):1+ gcd(V35,Y35,Z35):1
     [V35>=1,V>=2,Z35=0,Y35=0,X35=0,W35=2,V1=1] 
* CE 115: start(V1,V,V35) = 0+ gt0(V,V35,W35):5+ monus(V,V35,X35):1+ gcd(V35,Y35,Z35):2
     [V35>=1,V>=2,Z35=0,Y35=0,X35=0,W35=2,V1=1] 
* CE 116: start(V1,V,V35) = 0+ gt0(V,V35,W35):5+ monus(V,V35,X35):2+ gcd(V35,X35,Y35):1
     [V>=X35+1,X35>=0,V35>=1,V>=2,Y35=0,W35=2,V1=1] 
* CE 117: start(V1,V,V35) = 0+ gt0(V,V35,W35):5+ monus(V,V35,X35):2+ gcd(V35,Y35,Z35):2
     [V35>=1,V>=2,Z35=0,Y35=0,X35=0,W35=2,V1=1] 
* CE 118: start(V1,V,V35) = 0+ gt0(V,V35,W35):5+ monus(V,V35,V35):2+ gcd(V35,V35,X35):3
     [V>=V35+1,V35>=1,X35=0,W35=2,V1=1] 
* CE 119: start(V1,V,V35) = 0+ gt0(V,V35,W35):5+ monus(V,V35,V35):2+ gcd(V35,V35,V35):4
     [V>=V35+1,V35>=1,W35=2,V1=1] 
* CE 120: start(V1,V,V35) = 0+ gt0(V,V35,W35):5+ monus(V,V35,X35):2+ gcd(V35,X35,Y35):5
     [V35+X35>=2*Y35+1,X35>=Y35,V35>=Y35,V>=X35+1,Y35>=1,W35=2,V1=1] 
* CE 121: start(V1,V,V35) = 0+ gt0(W35,V35,X35):1+ monus(V35,Y35,Z35):1+ gcd(A36,B36,C36):1
     [V35>=0,C36=0,B36=0,A36=0,Z35=0,Y35=0,X35=1,W35=0,V=0,V1=1] 
* CE 122: start(V1,V,V35) = 0+ gt0(V,V35,W35):4+ monus(V35,V,X35):1+ gcd(Y35,V,Z35):1
     [V>=1,V35>=1,Z35=0,Y35=0,X35=0,W35=1,V1=1] 
* CE 123: start(V1,V,V35) = 0+ gt0(V,V35,W35):4+ monus(V35,V,X35):2+ gcd(X35,V,Y35):1
     [V35>=X35+1,V>=1,X35>=0,Y35=0,W35=1,V1=1] 
* CE 124: start(V1,V,V35) = 0+ gt0(V,V35,W35):4+ monus(V35,V,V):2+ gcd(V,V,X35):3
     [V35>=V+1,V>=1,X35=0,W35=1,V1=1] 
* CE 125: start(V1,V,V35) = 0+ gt0(V,V35,W35):4+ monus(V35,V,V):2+ gcd(V,V,V):4
     [V35>=V+1,V>=1,W35=1,V1=1] 
* CE 126: start(V1,V,V35) = 0+ gt0(V,V35,W35):4+ monus(V35,V,X35):2+ gcd(X35,V,Y35):5
     [V+X35>=2*Y35+1,V>=Y35,X35>=Y35,V35>=X35+1,Y35>=1,W35=1,V1=1] 
* CE 127: start(V1,V,V35) = 0+ monus(V35,V,W35):1+ gcd(X35,V,Y35):1
     [V>=0,V35>=0,Y35=0,X35=0,W35=0,V1=1] 
* CE 128: start(V1,V,V35) = 0+ monus(V35,V,W35):2+ gcd(W35,V,X35):1
     [V35>=W35+1,V>=1,W35>=0,X35=0,V1=1] 
* CE 129: start(V1,V,V35) = 0+ monus(V35,V,V):2+ gcd(V,V,W35):3
     [V35>=V+1,V>=1,W35=0,V1=1] 
* CE 130: start(V1,V,V35) = 0+ monus(V35,V,V):2+ gcd(V,V,V):4
     [V35>=V+1,V>=1,V1=1] 
* CE 131: start(V1,V,V35) = 0+ monus(V35,V,W35):2+ gcd(W35,V,X35):5
     [V+W35>=2*X35+1,V>=X35,W35>=X35,V35>=W35+1,X35>=1,V1=1] 
* CE 132: start(V1,V,V35) = 0+ monus(W35,X35,Y35):1
     [V35>=X35+1,V>=W35+1,X35>=0,W35>=0,Y35=0,V1=1] 
* CE 133: start(V1,V,V35) = 0+ monus(W35,X35,Y35):2
     [W35>=Y35+1,V35>=X35+1,V>=W35+1,Y35>=0,X35>=1,V1=1] 
* CE 134: start(V1,V,V35) = 0+ fun(W35,V,V):1
     [V>=0,W35=0,V1=0] 
* CE 135: start(V1,V,V35) = 0+ fun(V1,V,W35):2
     [V>=0,V1>=0,W35=0] 
* CE 136: start(V1,V,V35) = 0+ fun(V1,W35,X35):3
     [X35>=V1,V1>=1,X35=V1+W35,X35=V1+V] 
* CE 137: start(V1,V,V35) = 0+ fun(V1,V,W35):4
     [V1>=W35,W35>=1,V>=0] 
* CE 138: start(V1,V,V35) = 0+ gt0(W35,V,X35):1
     [V>=0,X35=1,W35=0,V1=0] 
* CE 139: start(V1,V,V35) = 0+ gt0(V1,W35,X35):2
     [V1>=1,X35=2,W35=0,V=0] 
* CE 140: start(V1,V,V35) = 0+ gt0(V1,V,W35):3
     [V>=0,V1>=0,W35=0] 
* CE 141: start(V1,V,V35) = 0+ gt0(V1,V,W35):4
     [V>=1,V1>=1,W35=1] 
* CE 142: start(V1,V,V35) = 0+ gt0(V1,V,W35):5
     [V>=1,V1>=2,W35=2] 
* CE 143: start(V1,V,V35) = 0+ gcd(V1,V,W35):1
     [V>=0,V1>=0,W35=0] 
* CE 144: start(V1,V,V35) = 0+ gcd(V1,W35,X35):2
     [V1>=1,X35=0,W35=0,V=0] 
* CE 145: start(A,A,B) = 0+ gcd(A,A,C):3
     [A>=1,C=0] 
* CE 146: start(A,A,B) = 0+ gcd(A,A,A):4
     [A>=1] 
* CE 147: start(V1,V,V35) = 0+ gcd(V1,V,W35):5
     [V1+V>=2*W35+1,V>=W35,V1>=W35,W35>=1] 
* CE 148: start(V1,V,V35) = 0+ lgth(V1,W35):1
     [V1>=0,W35=0] 
* CE 149: start(V1,V,V35) = 0+ lgth(V1,W35):2
     [V1>=W35,W35>=0,V1>=1] 
* CE 150: start(V1,V,V35) = 0+ eqList(W35,X35,Y35):1
     [Y35=2,X35=0,W35=0,V=0,V1=0] 
* CE 151: start(V1,V,V35) = 0+ eqList(W35,V,X35):2
     [V>=1,X35=1,W35=0,V1=0] 
* CE 152: start(V1,V,V35) = 0+ eqList(V1,W35,X35):3
     [V1>=1,X35=1,W35=0,V=0] 
* CE 153: start(V1,V,V35) = 0+ eqList(V1,V,W35):4
     [V>=0,V1>=0,W35=0] 
* CE 154: start(V1,V,V35) = 0+ eqList(V1,V,W35):5
     [V1+V>=3,V>=1,V1>=1,W35=1] 
* CE 155: start(A,A,B) = 0+ eqList(A,A,C):6
     [A>=1,C=2] 
* CE 156: start(V1,V,V35) = 0+ monus(V1,V,W35):1
     [V>=0,V1>=0,W35=0] 
* CE 157: start(V1,V,V35) = 0+ monus(V1,V,W35):2
     [V1>=W35+1,W35>=0,V>=1] 
* CE 158: start(V1,V,V35) = 1+ gcd(V1,V,W35):1
     [V>=0,V1>=0,W35=0] 
* CE 159: start(V1,V,V35) = 1+ gcd(V1,W35,X35):2
     [V1>=1,X35=0,W35=0,V=0] 
* CE 160: start(A,A,B) = 1+ gcd(A,A,C):3
     [A>=1,C=0] 
* CE 161: start(A,A,B) = 1+ gcd(A,A,A):4
     [A>=1] 
* CE 162: start(V1,V,V35) = 1+ gcd(V1,V,W35):5
     [V1+V>=2*W35+1,V>=W35,V1>=W35,W35>=1] 
* CE 163: start(V1,V,V35) = 0+ and(W35,X35,Y35):1
     [Y35=1,X35=1,W35=1,V=1,V1=1] 
* CE 164: start(V1,V,V35) = 0+ and(W35,X35,Y35):2
     [Y35=1,X35=2,W35=1,V=2,V1=1] 
* CE 165: start(V1,V,V35) = 0+ and(W35,X35,Y35):3
     [Y35=1,X35=1,W35=2,V=1,V1=2] 
* CE 166: start(V1,V,V35) = 0+ and(W35,X35,Y35):4
     [Y35=2,X35=2,W35=2,V=2,V1=2] 
* CE 167: start(V1,V,V35) = 0+ and(V1,V,W35):5
     [V>=0,V1>=0,W35=0] 

### Cost equations --> "Loop" of start/3 
* CEs [139,144,152,159] --> Loop 66 
* CEs [100,101,102,103,104,105,106] --> Loop 67 
* CEs [166] --> Loop 68 
* CEs [165] --> Loop 69 
* CEs [108,113] --> Loop 70 
* CEs [164] --> Loop 71 
* CEs [145,146,155,160,161,163] --> Loop 72 
* CEs [107,109,110,111,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133] --> Loop 73 
* CEs [112,134,135,136,137,138,140,141,142,143,147,148,149,150,151,153,154,156,157,158,162,167] --> Loop 74 

#### Loops of start/3 
* Loop 66: start(V1,V,V35) [V1>=1,V=0] 
* Loop 67: start(V1,V,V35) [V35>=0,V>=0,V1=2] 
* Loop 68: start(V1,V,V35) [V=2,V1=2] 
* Loop 69: start(V1,V,V35) [V=1,V1=2] 
* Loop 70: start(V1,V,V35) [V>=1,V35=0,V1=1] 
* Loop 71: start(V1,V,V35) [V=2,V1=1] 
* Loop 72: start(A,A,B) [A>=1] 
* Loop 73: start(V1,V,V35) [V35>=0,V>=0,V1=1] 
* Loop 74: start(V1,V,V35) [V1>=0] 

### Ranking functions of CR start(V1,V,V35) 

#### Partial ranking functions of CR start(V1,V,V35) 


### Resulting Chains:start(V1,V,V35) 
* [74]
* [73]
* [72]
* [71]
* [70]
* [69]
* [68]
* [67]
* [66]


### Merging Chains  start/3 into  External patterns of execution 
* [[71],[74]] --> 1 
* [[70],[73]] --> 2 
* [[69]] --> 3 
* [[68],[72]] --> 4 
* [[67]] --> 5 
* [[66]] --> 6 


Computing Bounds
=====================================

#### Cost of chains of and(V1,V,Out):
* Chain [35]: 0
  with precondition: [V1=1,V=1,Out=1] 

* Chain [34]: 0
  with precondition: [V1=1,V=2,Out=1] 

* Chain [33]: 0
  with precondition: [V1=2,V=1,Out=1] 

* Chain [32]: 0
  with precondition: [V1=2,V=2,Out=2] 

* Chain [31]: 0
  with precondition: [Out=0,V1>=0,V>=0] 


#### Cost of loops [36] 

 * loop 36:eqList(V1,V,Out) -> [eqList(V1',V',Out'),eqList(V1'2,V'2,Out'2)] 
1
#### Cost of phase [36]:eqList(V1,V,Out) -> [] 
1*it(36)+1*it([44])+0
  Such that:it(36) =< V
it([44]) =< V+1

#### Cost of loops [37,38,39] 

 * loop 37:eqList(V1,V,Out) -> [eqList(V1',V',Out'),eqList(V1'2,V'2,Out'2)] 
1
 * loop 38:eqList(V1,V,Out) -> [eqList(V1',V',Out'),eqList(V1'2,V'2,Out'2)] 
1
 * loop 39:eqList(V1,V,Out) -> [eqList(V1',V',Out'),eqList(V1'2,V'2,Out'2)] 
1
#### Cost of phase [37,38,39]:eqList(V1,V,Out) -> [] 
1*it(37)+1*it(38)+1*it(39)+1*it([42])+1*it([43])+3*it([44])+0
  Such that:aux(3) =< V1/2+1/2
aux(4) =< V1/3+V/3
aux(5) =< 2/5*V1+2/5*V
aux(6) =< V
aux(7) =< V+1
aux(8) =< V/2+1/2
it([42]) =< aux(3)
it(39) =< aux(4)
it(37) =< aux(5)
it(38) =< aux(5)
it(39) =< aux(5)
it(38) =< aux(6)
it(39) =< aux(6)
it([43]) =< aux(6)
it([44]) =< aux(7)
it([43]) =< aux(8)
it(39) =< it([44])* (1/3)+aux(4)
it(37) =< it([44])* (1/5)+aux(5)
it(38) =< it([44])* (1/5)+aux(5)
it(39) =< it([44])* (1/5)+aux(5)

#### Cost of loops [40] 

 * loop 40:eqList(V1,V,Out) -> [eqList(V1',V',Out'),eqList(V1'2,V'2,Out'2)] 
1
#### Cost of phase [40]:eqList(V1,V,Out) -> [] 
1*it(40)+1*it([42])+1*it([43])+1*it([44])+5*s(1)+1*s(3)+1*s(4)+1*s(5)+1*s(6)+1*s(7)+0
  Such that:aux(11) =< V1
aux(12) =< V1+1
aux(13) =< V1/2+1/2
aux(14) =< V1/3+V/3+2/3
aux(15) =< V+1
aux(16) =< V/2+1/2
it(40) =< aux(11)
it([42]) =< aux(11)
it([42]) =< aux(12)
it([43]) =< aux(12)
it([44]) =< aux(12)
it([42]) =< aux(13)
it([44]) =< aux(15)
s(1) =< aux(15)
it([43]) =< aux(16)
s(11) =< aux(15)* (1/2)
s(9) =< aux(14)* (6/5)
s(6) =< aux(13)
s(5) =< aux(14)
s(3) =< s(9)
s(4) =< s(9)
s(5) =< s(9)
s(4) =< aux(15)
s(5) =< aux(15)
s(7) =< aux(15)
s(7) =< s(11)
s(5) =< s(1)* (1/3)+aux(14)
s(3) =< s(1)* (1/5)+s(9)
s(4) =< s(1)* (1/5)+s(9)
s(5) =< s(1)* (1/5)+s(9)

#### Cost of chains of eqList(V1,V,Out):
* Chain [44]: 1
  with precondition: [V1=0,V=0,Out=2] 

* Chain [43]: 1
  with precondition: [V1=0,Out=1,V>=1] 

* Chain [42]: 1
  with precondition: [V=0,Out=1,V1>=1] 

* Chain [41]: 0
  with precondition: [Out=0,V1>=0,V>=0] 

* Chain [multiple([40],[[multiple([37,38,39],[[multiple([36],[[44]])],[44],[43],[42]])],[multiple([36],[[44]])],[44],[43],[42],[41]])]: 1*it(40)+1*it([42])+1*it([43])+1*it([44])+5*s(1)+1*s(3)+1*s(4)+1*s(5)+1*s(6)+1*s(7)+0
  Such that:aux(11) =< V1
aux(12) =< V1+1
aux(13) =< V1/2+1/2
aux(14) =< V1/3+V/3+2/3
aux(15) =< V+1
aux(16) =< V/2+1/2
it(40) =< aux(11)
it([42]) =< aux(11)
it([42]) =< aux(12)
it([43]) =< aux(12)
it([44]) =< aux(12)
it([42]) =< aux(13)
it([44]) =< aux(15)
s(1) =< aux(15)
it([43]) =< aux(16)
s(11) =< aux(15)* (1/2)
s(9) =< aux(14)* (6/5)
s(6) =< aux(13)
s(5) =< aux(14)
s(3) =< s(9)
s(4) =< s(9)
s(5) =< s(9)
s(4) =< aux(15)
s(5) =< aux(15)
s(7) =< aux(15)
s(7) =< s(11)
s(5) =< s(1)* (1/3)+aux(14)
s(3) =< s(1)* (1/5)+s(9)
s(4) =< s(1)* (1/5)+s(9)
s(5) =< s(1)* (1/5)+s(9)

  with precondition: [Out=0,V1>=1,V>=1] 

* Chain [multiple([37,38,39],[[multiple([36],[[44]])],[44],[43],[42]])]: 1*it(37)+1*it(38)+1*it(39)+1*it([42])+1*it([43])+3*it([44])+0
  Such that:aux(3) =< V1/2+1/2
aux(4) =< V1/3+V/3
aux(5) =< 2/5*V1+2/5*V
aux(6) =< V
aux(7) =< V+1
aux(8) =< V/2+1/2
it([42]) =< aux(3)
it(39) =< aux(4)
it(37) =< aux(5)
it(38) =< aux(5)
it(39) =< aux(5)
it(38) =< aux(6)
it(39) =< aux(6)
it([43]) =< aux(6)
it([44]) =< aux(7)
it([43]) =< aux(8)
it(39) =< it([44])* (1/3)+aux(4)
it(37) =< it([44])* (1/5)+aux(5)
it(38) =< it([44])* (1/5)+aux(5)
it(39) =< it([44])* (1/5)+aux(5)

  with precondition: [Out=1,V1>=1,V>=1,V+V1>=3] 

* Chain [multiple([36],[[44]])]: 1*it(36)+1*it([44])+0
  Such that:it(36) =< V
it([44]) =< V+1

  with precondition: [Out=2,V1=V,V1>=1] 


#### Cost of loops [45] 

 * loop 45:fun(V1,V,Out) -> [fun(V1',V',Out')] 
1
#### Cost of phase [45]:fun(V1,V,Out) -> [fun(V1',V',Out')] 
1*it(45)+0
  Such that:it(45) =< V1
it(45) =< V1-V1'

#### Cost of phase [45]:fun(V1,V,Out) -> [fun(V1',V',Out')] 
1*it(45)+0
  Such that:it(45) =< V1
it(45) =< V1-V1'

#### Cost of chains of fun(V1,V,Out):
* Chain [[45],47]: 1*it(45)+1
  Such that:it(45) =< -V+Out

  with precondition: [V+V1=Out,V1>=1,V>=0] 

* Chain [[45],46]: 1*it(45)+0
  Such that:it(45) =< Out

  with precondition: [V>=0,Out>=1,V1>=Out] 

* Chain [47]: 1
  with precondition: [V1=0,V=Out,V>=0] 

* Chain [46]: 0
  with precondition: [Out=0,V1>=0,V>=0] 


#### Cost of loops [48,49,50] 

 * loop 48:lgth(V1,Out) -> [lgth(V1',Out')] 
1*s(34)+2
  Such that:s(34) =< 1

 * loop 49:lgth(V1,Out) -> [lgth(V1',Out')] 
1*s(36)+1
  Such that:s(36) =< 1

 * loop 50:lgth(V1,Out) -> [lgth(V1',Out')] 
1
#### Cost of phase [48,49,50]:lgth(V1,Out) -> [lgth(V1',Out')] 
4*it(48)+2*s(37)+0
  Such that:aux(19) =< V1
aux(20) =< V1-V1'
aux(17) =< aux(19)
it(48) =< aux(19)
aux(17) =< aux(20)
it(48) =< aux(20)
s(37) =< aux(17)

#### Cost of chains of lgth(V1,Out):
* Chain [[48,49,50],51]: 6*it(48)+1
  Such that:aux(21) =< V1
it(48) =< aux(21)

  with precondition: [V1>=1,Out>=0,V1>=Out] 

* Chain [51]: 1
  with precondition: [Out=0,V1>=0] 


#### Cost of loops [54] 

 * loop 54:monus(V1,V,Out) -> [monus(V1',V',Out')] 
12*s(125)+1*s(119)+1*s(120)+1*s(121)+1*s(122)+1*s(123)+3*s(124)+3
  Such that:s(113) =< 1
s(114) =< 2
s(115) =< V/2+1/2
s(116) =< V/3+1/3
s(117) =< 2/5*V+2/5
s(118) =< V
s(119) =< s(115)
s(120) =< s(116)
s(121) =< s(117)
s(122) =< s(117)
s(120) =< s(117)
s(122) =< s(113)
s(120) =< s(113)
s(123) =< s(113)
s(124) =< s(114)
s(120) =< s(124)* (1/3)+s(116)
s(121) =< s(124)* (1/5)+s(117)
s(122) =< s(124)* (1/5)+s(117)
s(120) =< s(124)* (1/5)+s(117)
s(125) =< s(118)

#### Cost of phase [54]:monus(V1,V,Out) -> [monus(V1',V',Out')] 
3*it(54)+12*s(126)+1*s(127)+1*s(128)+1*s(129)+1*s(130)+1*s(131)+3*s(132)+0
  Such that:aux(37) =< V1
aux(38) =< V1-V1'
aux(39) =< V
aux(40) =< V-V'
aux(31) =< aux(37)
it(54) =< aux(37)
aux(31) =< aux(38)
it(54) =< aux(38)
aux(31) =< aux(39)
it(54) =< aux(39)
aux(31) =< aux(40)
it(54) =< aux(40)
aux(34) =< aux(39)* (1/2)+1/2
s(133) =< it(54)*aux(39)
s(136) =< aux(31)*2
aux(35) =< it(54)*aux(34)
s(134) =< aux(35)* (4/5)
s(135) =< aux(35)* (2/3)
s(127) =< aux(35)
s(128) =< s(135)
s(129) =< s(134)
s(130) =< s(134)
s(128) =< s(134)
s(130) =< aux(31)
s(128) =< aux(31)
s(131) =< aux(31)
s(132) =< s(136)
s(128) =< s(132)* (1/3)+s(135)
s(129) =< s(132)* (1/5)+s(134)
s(130) =< s(132)* (1/5)+s(134)
s(128) =< s(132)* (1/5)+s(134)
s(126) =< s(133)

#### Cost of phase [54]:monus(V1,V,Out) -> [monus(V1',V',Out')] 
3*it(54)+12*s(126)+1*s(127)+1*s(128)+1*s(129)+1*s(130)+1*s(131)+3*s(132)+0
  Such that:aux(37) =< V1
aux(38) =< V1-V1'
aux(39) =< V
aux(40) =< V-V'
aux(31) =< aux(37)
it(54) =< aux(37)
aux(31) =< aux(38)
it(54) =< aux(38)
aux(31) =< aux(39)
it(54) =< aux(39)
aux(31) =< aux(40)
it(54) =< aux(40)
aux(34) =< aux(39)* (1/2)+1/2
s(133) =< it(54)*aux(39)
s(136) =< aux(31)*2
aux(35) =< it(54)*aux(34)
s(134) =< aux(35)* (4/5)
s(135) =< aux(35)* (2/3)
s(127) =< aux(35)
s(128) =< s(135)
s(129) =< s(134)
s(130) =< s(134)
s(128) =< s(134)
s(130) =< aux(31)
s(128) =< aux(31)
s(131) =< aux(31)
s(132) =< s(136)
s(128) =< s(132)* (1/3)+s(135)
s(129) =< s(132)* (1/5)+s(134)
s(130) =< s(132)* (1/5)+s(134)
s(128) =< s(132)* (1/5)+s(134)
s(126) =< s(133)

#### Cost of chains of monus(V1,V,Out):
* Chain [[54],53]: 3*it(54)+3*s(47)+1*s(48)+14*s(49)+1*s(52)+1*s(53)+1*s(54)+1*s(55)+2*s(56)+25*s(58)+1*s(68)+1*s(69)+1*s(70)+2*s(74)+1*s(75)+1*s(76)+1*s(77)+1*s(88)+1*s(89)+1*s(90)+12*s(126)+1*s(127)+1*s(128)+1*s(129)+1*s(130)+1*s(131)+3*s(132)+3
  Such that:aux(25) =< 1
aux(26) =< 2
s(41) =< 1/2
s(64) =< V+3
aux(41) =< V1
aux(42) =< V
aux(43) =< V+1
aux(44) =< 2*V+2
s(47) =< aux(25)
s(49) =< aux(26)
s(58) =< aux(42)
s(68) =< aux(42)
s(68) =< aux(43)
s(69) =< aux(43)
s(70) =< aux(43)
s(70) =< aux(26)
s(69) =< aux(25)
s(50) =< aux(26)* (1/2)
s(73) =< s(64)* (6/5)
s(74) =< aux(43)
s(75) =< s(64)
s(76) =< s(73)
s(77) =< s(73)
s(75) =< s(73)
s(77) =< aux(26)
s(75) =< aux(26)
s(56) =< aux(26)
s(56) =< s(50)
s(75) =< s(49)* (1/3)+s(64)
s(76) =< s(49)* (1/5)+s(73)
s(77) =< s(49)* (1/5)+s(73)
s(75) =< s(49)* (1/5)+s(73)
s(48) =< aux(25)
s(48) =< aux(26)
s(51) =< aux(25)* (6/5)
s(52) =< s(41)
s(53) =< aux(25)
s(54) =< s(51)
s(55) =< s(51)
s(53) =< s(51)
s(55) =< aux(26)
s(53) =< aux(26)
s(53) =< s(49)* (1/3)+aux(25)
s(54) =< s(49)* (1/5)+s(51)
s(55) =< s(49)* (1/5)+s(51)
s(53) =< s(49)* (1/5)+s(51)
s(88) =< aux(43)
s(89) =< aux(44)
s(90) =< aux(44)
s(88) =< aux(44)
s(90) =< aux(25)
s(88) =< aux(25)
s(88) =< s(49)* (1/3)+aux(43)
s(89) =< s(49)* (1/5)+aux(44)
s(90) =< s(49)* (1/5)+aux(44)
s(88) =< s(49)* (1/5)+aux(44)
aux(31) =< aux(41)
it(54) =< aux(41)
aux(31) =< aux(42)
it(54) =< aux(42)
aux(31) =< aux(44)
it(54) =< aux(44)
aux(34) =< aux(42)* (1/2)+1/2
s(133) =< it(54)*aux(42)
s(136) =< aux(31)*2
aux(35) =< it(54)*aux(34)
s(134) =< aux(35)* (4/5)
s(135) =< aux(35)* (2/3)
s(127) =< aux(35)
s(128) =< s(135)
s(129) =< s(134)
s(130) =< s(134)
s(128) =< s(134)
s(130) =< aux(31)
s(128) =< aux(31)
s(131) =< aux(31)
s(132) =< s(136)
s(128) =< s(132)* (1/3)+s(135)
s(129) =< s(132)* (1/5)+s(134)
s(130) =< s(132)* (1/5)+s(134)
s(128) =< s(132)* (1/5)+s(134)
s(126) =< s(133)

  with precondition: [Out=0,V1>=1,V>=1] 

* Chain [[54],52]: 3*it(54)+12*s(126)+1*s(127)+1*s(128)+1*s(129)+1*s(130)+1*s(131)+3*s(132)+6*s(140)+1*s(141)+1*s(142)+2
  Such that:s(141) =< 1
s(142) =< 2
aux(37) =< V1
aux(38) =< V1-Out
aux(45) =< V
s(140) =< aux(45)
aux(31) =< aux(37)
it(54) =< aux(37)
aux(31) =< aux(38)
it(54) =< aux(38)
aux(31) =< aux(45)
it(54) =< aux(45)
aux(34) =< aux(45)* (1/2)+1/2
s(133) =< it(54)*aux(45)
s(136) =< aux(31)*2
aux(35) =< it(54)*aux(34)
s(134) =< aux(35)* (4/5)
s(135) =< aux(35)* (2/3)
s(127) =< aux(35)
s(128) =< s(135)
s(129) =< s(134)
s(130) =< s(134)
s(128) =< s(134)
s(130) =< aux(31)
s(128) =< aux(31)
s(131) =< aux(31)
s(132) =< s(136)
s(128) =< s(132)* (1/3)+s(135)
s(129) =< s(132)* (1/5)+s(134)
s(130) =< s(132)* (1/5)+s(134)
s(128) =< s(132)* (1/5)+s(134)
s(126) =< s(133)

  with precondition: [V>=2,Out>=0,V1>=Out+2] 

* Chain [53]: 3*s(47)+1*s(48)+14*s(49)+1*s(52)+1*s(53)+1*s(54)+1*s(55)+2*s(56)+25*s(58)+1*s(68)+1*s(69)+1*s(70)+2*s(74)+1*s(75)+1*s(76)+1*s(77)+1*s(88)+1*s(89)+1*s(90)+3
  Such that:s(41) =< 1/2
s(62) =< V+1
s(64) =< V/3+1
s(82) =< V/3+1/3
s(83) =< 2/5*V+2/5
aux(25) =< 1
aux(26) =< 2
aux(27) =< V
aux(28) =< V/2+1/2
s(47) =< aux(25)
s(49) =< aux(26)
s(58) =< aux(27)
s(68) =< aux(27)
s(68) =< s(62)
s(69) =< s(62)
s(70) =< s(62)
s(68) =< aux(28)
s(70) =< aux(26)
s(69) =< aux(25)
s(50) =< aux(26)* (1/2)
s(73) =< s(64)* (6/5)
s(74) =< aux(28)
s(75) =< s(64)
s(76) =< s(73)
s(77) =< s(73)
s(75) =< s(73)
s(77) =< aux(26)
s(75) =< aux(26)
s(56) =< aux(26)
s(56) =< s(50)
s(75) =< s(49)* (1/3)+s(64)
s(76) =< s(49)* (1/5)+s(73)
s(77) =< s(49)* (1/5)+s(73)
s(75) =< s(49)* (1/5)+s(73)
s(48) =< aux(25)
s(48) =< aux(26)
s(51) =< aux(25)* (6/5)
s(52) =< s(41)
s(53) =< aux(25)
s(54) =< s(51)
s(55) =< s(51)
s(53) =< s(51)
s(55) =< aux(26)
s(53) =< aux(26)
s(53) =< s(49)* (1/3)+aux(25)
s(54) =< s(49)* (1/5)+s(51)
s(55) =< s(49)* (1/5)+s(51)
s(53) =< s(49)* (1/5)+s(51)
s(88) =< s(82)
s(89) =< s(83)
s(90) =< s(83)
s(88) =< s(83)
s(90) =< aux(25)
s(88) =< aux(25)
s(88) =< s(49)* (1/3)+s(82)
s(89) =< s(49)* (1/5)+s(83)
s(90) =< s(49)* (1/5)+s(83)
s(88) =< s(49)* (1/5)+s(83)

  with precondition: [Out=0,V1>=0,V>=0] 

* Chain [52]: 6*s(140)+1*s(141)+1*s(142)+2
  Such that:s(141) =< 1
s(142) =< 2
s(139) =< V
s(140) =< s(139)

  with precondition: [V>=1,Out>=0,V1>=Out+1] 


#### Cost of loops [55] 

 * loop 55:gt0(V1,V,Out) -> [gt0(V1',V',Out')] 
1
#### Cost of phase [55]:gt0(V1,V,Out) -> [gt0(V1',V',Out')] 
1*it(55)+0
  Such that:it(55) =< V1
it(55) =< V1-V1'
it(55) =< V
it(55) =< V-V'

#### Cost of phase [55]:gt0(V1,V,Out) -> [gt0(V1',V',Out')] 
1*it(55)+0
  Such that:it(55) =< V1
it(55) =< V1-V1'
it(55) =< V
it(55) =< V-V'

#### Cost of phase [55]:gt0(V1,V,Out) -> [gt0(V1',V',Out')] 
1*it(55)+0
  Such that:it(55) =< V1
it(55) =< V1-V1'
it(55) =< V
it(55) =< V-V'

#### Cost of chains of gt0(V1,V,Out):
* Chain [[55],58]: 1*it(55)+1
  Such that:it(55) =< V

  with precondition: [Out=1,V1>=1,V>=1] 

* Chain [[55],57]: 1*it(55)+1
  Such that:it(55) =< V

  with precondition: [Out=2,V1>=2,V>=1] 

* Chain [[55],56]: 1*it(55)+0
  Such that:it(55) =< V

  with precondition: [Out=0,V1>=1,V>=1] 

* Chain [58]: 1
  with precondition: [V1=0,Out=1,V>=0] 

* Chain [57]: 1
  with precondition: [V=0,Out=2,V1>=1] 

* Chain [56]: 0
  with precondition: [Out=0,V1>=0,V>=0] 


#### Cost of loops [59,60] 

 * loop 59:gcd(V1,V,Out) -> [gcd(V1',V',Out')] 
2*s(488)+1*s(489)+1*s(490)+1*s(491)+1*s(492)+5*s(450)+51*s(442)+8*s(443)+30*s(444)+1*s(445)+2*s(446)+2*s(447)+1*s(451)+1*s(452)+1*s(453)+4*s(454)+2*s(455)+2*s(457)+2*s(458)+2*s(459)+2*s(460)+1*s(461)+1*s(462)+1*s(463)+3*s(465)+1*s(472)+1*s(473)+1*s(474)+1*s(475)+1*s(476)+3*s(477)+12*s(478)+1*s(479)+2*s(481)+1*s(482)+1*s(483)+1*s(484)+1*s(485)+1*s(486)+1*s(487)+1*s(509)+1*s(510)+1*s(511)+1*s(512)+3*s(513)+13*s(493)+3*s(495)+1*s(502)+1*s(503)+1*s(504)+1*s(505)+1*s(506)+3*s(507)+12*s(508)+5
  Such that:s(421) =< 1/2
s(422) =< V1-V'
s(423) =< V1/3+V/3
s(424) =< V1/3+V1'/3
s(425) =< 2/5*V1+2/5*V
s(426) =< 2/5*V1+2/5*V1'
s(427) =< V
s(428) =< V+1
s(429) =< V/2+1/2
s(430) =< V1'
s(431) =< V1'+1
s(432) =< V1'+3
s(433) =< 2*V1'+2
s(434) =< V1'/2+1/2
s(435) =< V1'/3+1
s(436) =< V1'/3+1/3
s(437) =< 2/5*V1'+2/5
s(438) =< 1
s(439) =< 2
s(440) =< V1
s(441) =< V1/2+1/2
s(442) =< s(430)
s(443) =< s(438)
s(444) =< s(439)
s(445) =< s(430)
s(445) =< s(431)
s(446) =< s(431)
s(447) =< s(431)
s(447) =< s(439)
s(446) =< s(438)
s(448) =< s(439)* (1/2)
s(449) =< s(432)* (6/5)
s(450) =< s(431)
s(451) =< s(432)
s(452) =< s(449)
s(453) =< s(449)
s(451) =< s(449)
s(453) =< s(439)
s(451) =< s(439)
s(454) =< s(439)
s(454) =< s(448)
s(451) =< s(444)* (1/3)+s(432)
s(452) =< s(444)* (1/5)+s(449)
s(453) =< s(444)* (1/5)+s(449)
s(451) =< s(444)* (1/5)+s(449)
s(455) =< s(438)
s(455) =< s(439)
s(456) =< s(438)* (6/5)
s(457) =< s(421)
s(458) =< s(438)
s(459) =< s(456)
s(460) =< s(456)
s(458) =< s(456)
s(460) =< s(439)
s(458) =< s(439)
s(458) =< s(444)* (1/3)+s(438)
s(459) =< s(444)* (1/5)+s(456)
s(460) =< s(444)* (1/5)+s(456)
s(458) =< s(444)* (1/5)+s(456)
s(461) =< s(431)
s(462) =< s(433)
s(463) =< s(433)
s(461) =< s(433)
s(463) =< s(438)
s(461) =< s(438)
s(461) =< s(444)* (1/3)+s(431)
s(462) =< s(444)* (1/5)+s(433)
s(463) =< s(444)* (1/5)+s(433)
s(461) =< s(444)* (1/5)+s(433)
s(464) =< s(440)
s(465) =< s(440)
s(464) =< s(430)
s(465) =< s(430)
s(464) =< s(433)
s(465) =< s(433)
s(466) =< s(430)* (1/2)+1/2
s(467) =< s(465)*s(430)
s(468) =< s(464)*2
s(469) =< s(465)*s(466)
s(470) =< s(469)* (4/5)
s(471) =< s(469)* (2/3)
s(472) =< s(469)
s(473) =< s(471)
s(474) =< s(470)
s(475) =< s(470)
s(473) =< s(470)
s(475) =< s(464)
s(473) =< s(464)
s(476) =< s(464)
s(477) =< s(468)
s(473) =< s(477)* (1/3)+s(471)
s(474) =< s(477)* (1/5)+s(470)
s(475) =< s(477)* (1/5)+s(470)
s(473) =< s(477)* (1/5)+s(470)
s(478) =< s(467)
s(479) =< s(430)
s(479) =< s(431)
s(479) =< s(434)
s(480) =< s(435)* (6/5)
s(481) =< s(434)
s(482) =< s(435)
s(483) =< s(480)
s(484) =< s(480)
s(482) =< s(480)
s(484) =< s(439)
s(482) =< s(439)
s(482) =< s(444)* (1/3)+s(435)
s(483) =< s(444)* (1/5)+s(480)
s(484) =< s(444)* (1/5)+s(480)
s(482) =< s(444)* (1/5)+s(480)
s(485) =< s(436)
s(486) =< s(437)
s(487) =< s(437)
s(485) =< s(437)
s(487) =< s(438)
s(485) =< s(438)
s(485) =< s(444)* (1/3)+s(436)
s(486) =< s(444)* (1/5)+s(437)
s(487) =< s(444)* (1/5)+s(437)
s(485) =< s(444)* (1/5)+s(437)
s(488) =< s(441)
s(489) =< s(424)
s(490) =< s(426)
s(491) =< s(426)
s(489) =< s(426)
s(491) =< s(430)
s(489) =< s(430)
s(492) =< s(430)
s(492) =< s(434)
s(489) =< s(450)* (1/3)+s(424)
s(490) =< s(450)* (1/5)+s(426)
s(491) =< s(450)* (1/5)+s(426)
s(489) =< s(450)* (1/5)+s(426)
s(493) =< s(427)
s(494) =< s(440)
s(495) =< s(440)
s(494) =< s(422)
s(495) =< s(422)
s(494) =< s(427)
s(495) =< s(427)
s(496) =< s(427)* (1/2)+1/2
s(497) =< s(495)*s(427)
s(498) =< s(494)*2
s(499) =< s(495)*s(496)
s(500) =< s(499)* (4/5)
s(501) =< s(499)* (2/3)
s(502) =< s(499)
s(503) =< s(501)
s(504) =< s(500)
s(505) =< s(500)
s(503) =< s(500)
s(505) =< s(494)
s(503) =< s(494)
s(506) =< s(494)
s(507) =< s(498)
s(503) =< s(507)* (1/3)+s(501)
s(504) =< s(507)* (1/5)+s(500)
s(505) =< s(507)* (1/5)+s(500)
s(503) =< s(507)* (1/5)+s(500)
s(508) =< s(497)
s(509) =< s(423)
s(510) =< s(425)
s(511) =< s(425)
s(509) =< s(425)
s(511) =< s(427)
s(509) =< s(427)
s(512) =< s(427)
s(513) =< s(428)
s(512) =< s(429)
s(509) =< s(513)* (1/3)+s(423)
s(510) =< s(513)* (1/5)+s(425)
s(511) =< s(513)* (1/5)+s(425)
s(509) =< s(513)* (1/5)+s(425)

 * loop 60:gcd(V1,V,Out) -> [gcd(V1',V',Out')] 
4*s(678)+2*s(685)+2*s(686)+2*s(687)+2*s(688)+6*s(689)+2*s(638)+8*s(639)+30*s(640)+62*s(641)+1*s(642)+2*s(643)+2*s(644)+2*s(647)+1*s(648)+1*s(649)+1*s(650)+4*s(651)+2*s(652)+2*s(654)+2*s(655)+2*s(656)+2*s(657)+1*s(658)+1*s(659)+1*s(660)+3*s(662)+1*s(669)+1*s(670)+1*s(671)+1*s(672)+1*s(673)+3*s(674)+12*s(675)+1*s(676)+1*s(679)+1*s(680)+1*s(681)+1*s(682)+1*s(683)+1*s(684)+3*s(691)+1*s(697)+1*s(698)+1*s(699)+1*s(700)+1*s(701)+3*s(702)+12*s(703)+5
  Such that:s(621) =< 1/2
s(622) =< V1+1
s(623) =< V1+3
s(624) =< 2*V1+2
s(625) =< V1/3+1
s(626) =< V1/3+1/3
s(627) =< 2/5*V1+2/5
s(628) =< V-V1'
s(629) =< 1
s(630) =< 2
s(631) =< V1
s(632) =< V1/2+1/2
s(633) =< V1/3+V/3
s(634) =< 2/5*V1+2/5*V
s(635) =< V
s(636) =< V+1
s(637) =< V/2+1/2
s(638) =< s(635)
s(639) =< s(629)
s(640) =< s(630)
s(641) =< s(631)
s(642) =< s(631)
s(642) =< s(622)
s(643) =< s(622)
s(644) =< s(622)
s(644) =< s(630)
s(643) =< s(629)
s(645) =< s(630)* (1/2)
s(646) =< s(623)* (6/5)
s(647) =< s(622)
s(648) =< s(623)
s(649) =< s(646)
s(650) =< s(646)
s(648) =< s(646)
s(650) =< s(630)
s(648) =< s(630)
s(651) =< s(630)
s(651) =< s(645)
s(648) =< s(640)* (1/3)+s(623)
s(649) =< s(640)* (1/5)+s(646)
s(650) =< s(640)* (1/5)+s(646)
s(648) =< s(640)* (1/5)+s(646)
s(652) =< s(629)
s(652) =< s(630)
s(653) =< s(629)* (6/5)
s(654) =< s(621)
s(655) =< s(629)
s(656) =< s(653)
s(657) =< s(653)
s(655) =< s(653)
s(657) =< s(630)
s(655) =< s(630)
s(655) =< s(640)* (1/3)+s(629)
s(656) =< s(640)* (1/5)+s(653)
s(657) =< s(640)* (1/5)+s(653)
s(655) =< s(640)* (1/5)+s(653)
s(658) =< s(622)
s(659) =< s(624)
s(660) =< s(624)
s(658) =< s(624)
s(660) =< s(629)
s(658) =< s(629)
s(658) =< s(640)* (1/3)+s(622)
s(659) =< s(640)* (1/5)+s(624)
s(660) =< s(640)* (1/5)+s(624)
s(658) =< s(640)* (1/5)+s(624)
s(661) =< s(635)
s(662) =< s(635)
s(661) =< s(631)
s(662) =< s(631)
s(661) =< s(624)
s(662) =< s(624)
s(663) =< s(631)* (1/2)+1/2
s(664) =< s(662)*s(631)
s(665) =< s(661)*2
s(666) =< s(662)*s(663)
s(667) =< s(666)* (4/5)
s(668) =< s(666)* (2/3)
s(669) =< s(666)
s(670) =< s(668)
s(671) =< s(667)
s(672) =< s(667)
s(670) =< s(667)
s(672) =< s(661)
s(670) =< s(661)
s(673) =< s(661)
s(674) =< s(665)
s(670) =< s(674)* (1/3)+s(668)
s(671) =< s(674)* (1/5)+s(667)
s(672) =< s(674)* (1/5)+s(667)
s(670) =< s(674)* (1/5)+s(667)
s(675) =< s(664)
s(676) =< s(631)
s(676) =< s(622)
s(676) =< s(632)
s(677) =< s(625)* (6/5)
s(678) =< s(632)
s(679) =< s(625)
s(680) =< s(677)
s(681) =< s(677)
s(679) =< s(677)
s(681) =< s(630)
s(679) =< s(630)
s(679) =< s(640)* (1/3)+s(625)
s(680) =< s(640)* (1/5)+s(677)
s(681) =< s(640)* (1/5)+s(677)
s(679) =< s(640)* (1/5)+s(677)
s(682) =< s(626)
s(683) =< s(627)
s(684) =< s(627)
s(682) =< s(627)
s(684) =< s(629)
s(682) =< s(629)
s(682) =< s(640)* (1/3)+s(626)
s(683) =< s(640)* (1/5)+s(627)
s(684) =< s(640)* (1/5)+s(627)
s(682) =< s(640)* (1/5)+s(627)
s(685) =< s(633)
s(686) =< s(634)
s(687) =< s(634)
s(685) =< s(634)
s(687) =< s(635)
s(685) =< s(635)
s(688) =< s(635)
s(689) =< s(636)
s(688) =< s(637)
s(685) =< s(689)* (1/3)+s(633)
s(686) =< s(689)* (1/5)+s(634)
s(687) =< s(689)* (1/5)+s(634)
s(685) =< s(689)* (1/5)+s(634)
s(690) =< s(635)
s(691) =< s(635)
s(690) =< s(628)
s(691) =< s(628)
s(690) =< s(631)
s(691) =< s(631)
s(692) =< s(691)*s(631)
s(693) =< s(690)*2
s(694) =< s(691)*s(663)
s(695) =< s(694)* (4/5)
s(696) =< s(694)* (2/3)
s(697) =< s(694)
s(698) =< s(696)
s(699) =< s(695)
s(700) =< s(695)
s(698) =< s(695)
s(700) =< s(690)
s(698) =< s(690)
s(701) =< s(690)
s(702) =< s(693)
s(698) =< s(702)* (1/3)+s(696)
s(699) =< s(702)* (1/5)+s(695)
s(700) =< s(702)* (1/5)+s(695)
s(698) =< s(702)* (1/5)+s(695)
s(703) =< s(692)

#### Cost of phase [59,60]:gcd(V1,V,Out) -> [gcd(V1',V',Out')] 
10*it(59)+2*s(704)+3*s(705)+3*s(706)+3*s(707)+4*s(708)+14*s(709)+128*s(710)+16*s(711)+60*s(712)+1*s(713)+2*s(714)+2*s(715)+2*s(716)+2*s(717)+2*s(718)+8*s(719)+4*s(720)+4*s(721)+4*s(722)+4*s(723)+4*s(724)+1*s(725)+1*s(726)+1*s(727)+3*s(728)+1*s(729)+1*s(730)+1*s(731)+1*s(732)+1*s(733)+3*s(734)+12*s(735)+1*s(736)+2*s(737)+2*s(738)+2*s(739)+2*s(740)+1*s(741)+1*s(742)+1*s(743)+1*s(744)+1*s(745)+1*s(746)+6*s(750)+1*s(751)+1*s(752)+1*s(753)+1*s(754)+2*s(755)+6*s(756)+24*s(757)+4*s(795)+1*s(805)+2*s(806)+2*s(807)+2*s(808)+1*s(818)+1*s(819)+1*s(820)+3*s(821)+1*s(822)+1*s(823)+1*s(824)+1*s(825)+1*s(826)+3*s(827)+12*s(828)+1*s(829)+1*s(833)+1*s(834)+1*s(835)+1*s(837)+1*s(838)+1*s(839)+1*s(840)+0
  Such that:aux(88) =< V1/3+V/3
aux(119) =< V1+V
aux(120) =< V1+V-V1'-V'
aux(83) =< aux(119)
it(59) =< aux(119)
aux(83) =< aux(120)
it(59) =< aux(120)
aux(93) =< aux(119)+1
aux(86) =< aux(119)
aux(89) =< aux(88)
aux(97) =< aux(119)+3
aux(107) =< aux(119)+1
aux(87) =< aux(119)* (1/2)+1/2
s(791) =< aux(83)* (1/2)
s(781) =< aux(83)*2
aux(90) =< it(59)*aux(88)
aux(94) =< it(59)*aux(93)
s(762) =< it(59)*aux(86)
aux(91) =< it(59)*aux(89)
aux(109) =< it(59)*aux(107)
aux(100) =< it(59)*aux(97)
s(758) =< aux(90)* (6/5)
s(775) =< it(59)*aux(87)
s(760) =< aux(94)* (1/2)
s(771) =< aux(91)* (6/5)
s(857) =< aux(109)* (2/5)
s(858) =< aux(109)* (1/3)
s(780) =< aux(100)* (1/3)
s(863) =< aux(109)* (1/2)
s(871) =< aux(109)*2
s(776) =< aux(94)* (2/5)
s(777) =< aux(94)* (1/3)
s(789) =< aux(94)*2
s(710) =< s(762)
s(711) =< aux(83)
s(712) =< s(781)
s(805) =< s(762)
s(805) =< aux(109)
s(806) =< aux(109)
s(807) =< aux(109)
s(807) =< s(781)
s(806) =< aux(83)
s(794) =< s(781)* (1/2)
s(792) =< aux(100)* (6/5)
s(808) =< aux(109)
s(716) =< aux(100)
s(717) =< s(792)
s(718) =< s(792)
s(716) =< s(792)
s(718) =< s(781)
s(716) =< s(781)
s(719) =< s(781)
s(719) =< s(794)
s(716) =< s(712)* (1/3)+aux(100)
s(717) =< s(712)* (1/5)+s(792)
s(718) =< s(712)* (1/5)+s(792)
s(716) =< s(712)* (1/5)+s(792)
s(720) =< aux(83)
s(720) =< s(781)
s(790) =< aux(83)* (6/5)
s(721) =< s(791)
s(722) =< aux(83)
s(723) =< s(790)
s(724) =< s(790)
s(722) =< s(790)
s(724) =< s(781)
s(722) =< s(781)
s(722) =< s(712)* (1/3)+aux(83)
s(723) =< s(712)* (1/5)+s(790)
s(724) =< s(712)* (1/5)+s(790)
s(722) =< s(712)* (1/5)+s(790)
s(818) =< aux(109)
s(819) =< s(871)
s(820) =< s(871)
s(818) =< s(871)
s(820) =< aux(83)
s(818) =< aux(83)
s(818) =< s(712)* (1/3)+aux(109)
s(819) =< s(712)* (1/5)+s(871)
s(820) =< s(712)* (1/5)+s(871)
s(818) =< s(712)* (1/5)+s(871)
s(869) =< s(762)
s(821) =< s(762)
s(869) =< s(871)
s(821) =< s(871)
s(865) =< s(821)*aux(119)
s(868) =< s(869)*2
s(870) =< s(821)*aux(87)
s(866) =< s(870)* (4/5)
s(867) =< s(870)* (2/3)
s(822) =< s(870)
s(823) =< s(867)
s(824) =< s(866)
s(825) =< s(866)
s(823) =< s(866)
s(825) =< s(869)
s(823) =< s(869)
s(826) =< s(869)
s(827) =< s(868)
s(823) =< s(827)* (1/3)+s(867)
s(824) =< s(827)* (1/5)+s(866)
s(825) =< s(827)* (1/5)+s(866)
s(823) =< s(827)* (1/5)+s(866)
s(828) =< s(865)
s(829) =< s(762)
s(829) =< aux(109)
s(829) =< s(863)
s(779) =< s(780)* (6/5)
s(795) =< s(863)
s(738) =< s(780)
s(739) =< s(779)
s(740) =< s(779)
s(738) =< s(779)
s(740) =< s(781)
s(738) =< s(781)
s(738) =< s(712)* (1/3)+s(780)
s(739) =< s(712)* (1/5)+s(779)
s(740) =< s(712)* (1/5)+s(779)
s(738) =< s(712)* (1/5)+s(779)
s(833) =< s(858)
s(834) =< s(857)
s(835) =< s(857)
s(833) =< s(857)
s(835) =< aux(83)
s(833) =< aux(83)
s(833) =< s(712)* (1/3)+s(858)
s(834) =< s(712)* (1/5)+s(857)
s(835) =< s(712)* (1/5)+s(857)
s(833) =< s(712)* (1/5)+s(857)
s(705) =< aux(91)
s(706) =< s(771)
s(707) =< s(771)
s(705) =< s(771)
s(707) =< s(762)
s(705) =< s(762)
s(708) =< s(762)
s(709) =< aux(94)
s(708) =< s(760)
s(705) =< s(709)* (1/3)+aux(91)
s(706) =< s(709)* (1/5)+s(771)
s(707) =< s(709)* (1/5)+s(771)
s(705) =< s(709)* (1/5)+s(771)
s(767) =< s(762)
s(750) =< s(762)
s(767) =< aux(83)
s(750) =< aux(83)
s(763) =< s(750)*aux(119)
s(766) =< s(767)*2
s(849) =< s(750)*aux(87)
s(845) =< s(849)* (4/5)
s(846) =< s(849)* (2/3)
s(837) =< s(849)
s(838) =< s(846)
s(839) =< s(845)
s(840) =< s(845)
s(838) =< s(845)
s(840) =< s(767)
s(838) =< s(767)
s(755) =< s(767)
s(756) =< s(766)
s(838) =< s(756)* (1/3)+s(846)
s(839) =< s(756)* (1/5)+s(845)
s(840) =< s(756)* (1/5)+s(845)
s(838) =< s(756)* (1/5)+s(845)
s(757) =< s(763)
s(713) =< s(762)
s(713) =< aux(94)
s(714) =< aux(94)
s(715) =< aux(94)
s(715) =< s(781)
s(714) =< aux(83)
s(725) =< aux(94)
s(726) =< s(789)
s(727) =< s(789)
s(725) =< s(789)
s(727) =< aux(83)
s(725) =< aux(83)
s(725) =< s(712)* (1/3)+aux(94)
s(726) =< s(712)* (1/5)+s(789)
s(727) =< s(712)* (1/5)+s(789)
s(725) =< s(712)* (1/5)+s(789)
s(787) =< s(762)
s(728) =< s(762)
s(787) =< s(789)
s(728) =< s(789)
s(466) =< aux(86)* (1/2)+1/2
s(783) =< s(728)*aux(86)
s(786) =< s(787)*2
s(788) =< s(728)*s(466)
s(784) =< s(788)* (4/5)
s(785) =< s(788)* (2/3)
s(729) =< s(788)
s(730) =< s(785)
s(731) =< s(784)
s(732) =< s(784)
s(730) =< s(784)
s(732) =< s(787)
s(730) =< s(787)
s(733) =< s(787)
s(734) =< s(786)
s(730) =< s(734)* (1/3)+s(785)
s(731) =< s(734)* (1/5)+s(784)
s(732) =< s(734)* (1/5)+s(784)
s(730) =< s(734)* (1/5)+s(784)
s(735) =< s(783)
s(736) =< s(762)
s(736) =< aux(94)
s(736) =< s(760)
s(737) =< s(760)
s(741) =< s(777)
s(742) =< s(776)
s(743) =< s(776)
s(741) =< s(776)
s(743) =< aux(83)
s(741) =< aux(83)
s(741) =< s(712)* (1/3)+s(777)
s(742) =< s(712)* (1/5)+s(776)
s(743) =< s(712)* (1/5)+s(776)
s(741) =< s(712)* (1/5)+s(776)
s(704) =< s(775)
s(496) =< aux(119)* (1/2)+1/2
s(768) =< s(750)*s(496)
s(764) =< s(768)* (4/5)
s(765) =< s(768)* (2/3)
s(751) =< s(768)
s(752) =< s(765)
s(753) =< s(764)
s(754) =< s(764)
s(752) =< s(764)
s(754) =< s(767)
s(752) =< s(767)
s(752) =< s(756)* (1/3)+s(765)
s(753) =< s(756)* (1/5)+s(764)
s(754) =< s(756)* (1/5)+s(764)
s(752) =< s(756)* (1/5)+s(764)
s(744) =< aux(90)
s(745) =< s(758)
s(746) =< s(758)
s(744) =< s(758)
s(746) =< s(762)
s(744) =< s(762)
s(744) =< s(709)* (1/3)+aux(90)
s(745) =< s(709)* (1/5)+s(758)
s(746) =< s(709)* (1/5)+s(758)
s(744) =< s(709)* (1/5)+s(758)

#### Cost of phase [59,60]:gcd(V1,V,Out) -> [gcd(V1',V',Out')] 
10*it(59)+2*s(704)+3*s(705)+3*s(706)+3*s(707)+4*s(708)+14*s(709)+128*s(710)+16*s(711)+60*s(712)+1*s(713)+2*s(714)+2*s(715)+2*s(716)+2*s(717)+2*s(718)+8*s(719)+4*s(720)+4*s(721)+4*s(722)+4*s(723)+4*s(724)+1*s(725)+1*s(726)+1*s(727)+3*s(728)+1*s(729)+1*s(730)+1*s(731)+1*s(732)+1*s(733)+3*s(734)+12*s(735)+1*s(736)+2*s(737)+2*s(738)+2*s(739)+2*s(740)+1*s(741)+1*s(742)+1*s(743)+1*s(744)+1*s(745)+1*s(746)+6*s(750)+1*s(751)+1*s(752)+1*s(753)+1*s(754)+2*s(755)+6*s(756)+24*s(757)+4*s(795)+1*s(805)+2*s(806)+2*s(807)+2*s(808)+1*s(818)+1*s(819)+1*s(820)+3*s(821)+1*s(822)+1*s(823)+1*s(824)+1*s(825)+1*s(826)+3*s(827)+12*s(828)+1*s(829)+1*s(833)+1*s(834)+1*s(835)+1*s(837)+1*s(838)+1*s(839)+1*s(840)+0
  Such that:aux(88) =< V1/3+V/3
aux(119) =< V1+V
aux(120) =< V1+V-V1'-V'
aux(83) =< aux(119)
it(59) =< aux(119)
aux(83) =< aux(120)
it(59) =< aux(120)
aux(93) =< aux(119)+1
aux(86) =< aux(119)
aux(89) =< aux(88)
aux(97) =< aux(119)+3
aux(107) =< aux(119)+1
aux(87) =< aux(119)* (1/2)+1/2
s(791) =< aux(83)* (1/2)
s(781) =< aux(83)*2
aux(90) =< it(59)*aux(88)
aux(94) =< it(59)*aux(93)
s(762) =< it(59)*aux(86)
aux(91) =< it(59)*aux(89)
aux(109) =< it(59)*aux(107)
aux(100) =< it(59)*aux(97)
s(758) =< aux(90)* (6/5)
s(775) =< it(59)*aux(87)
s(760) =< aux(94)* (1/2)
s(771) =< aux(91)* (6/5)
s(857) =< aux(109)* (2/5)
s(858) =< aux(109)* (1/3)
s(780) =< aux(100)* (1/3)
s(863) =< aux(109)* (1/2)
s(871) =< aux(109)*2
s(776) =< aux(94)* (2/5)
s(777) =< aux(94)* (1/3)
s(789) =< aux(94)*2
s(710) =< s(762)
s(711) =< aux(83)
s(712) =< s(781)
s(805) =< s(762)
s(805) =< aux(109)
s(806) =< aux(109)
s(807) =< aux(109)
s(807) =< s(781)
s(806) =< aux(83)
s(794) =< s(781)* (1/2)
s(792) =< aux(100)* (6/5)
s(808) =< aux(109)
s(716) =< aux(100)
s(717) =< s(792)
s(718) =< s(792)
s(716) =< s(792)
s(718) =< s(781)
s(716) =< s(781)
s(719) =< s(781)
s(719) =< s(794)
s(716) =< s(712)* (1/3)+aux(100)
s(717) =< s(712)* (1/5)+s(792)
s(718) =< s(712)* (1/5)+s(792)
s(716) =< s(712)* (1/5)+s(792)
s(720) =< aux(83)
s(720) =< s(781)
s(790) =< aux(83)* (6/5)
s(721) =< s(791)
s(722) =< aux(83)
s(723) =< s(790)
s(724) =< s(790)
s(722) =< s(790)
s(724) =< s(781)
s(722) =< s(781)
s(722) =< s(712)* (1/3)+aux(83)
s(723) =< s(712)* (1/5)+s(790)
s(724) =< s(712)* (1/5)+s(790)
s(722) =< s(712)* (1/5)+s(790)
s(818) =< aux(109)
s(819) =< s(871)
s(820) =< s(871)
s(818) =< s(871)
s(820) =< aux(83)
s(818) =< aux(83)
s(818) =< s(712)* (1/3)+aux(109)
s(819) =< s(712)* (1/5)+s(871)
s(820) =< s(712)* (1/5)+s(871)
s(818) =< s(712)* (1/5)+s(871)
s(869) =< s(762)
s(821) =< s(762)
s(869) =< s(871)
s(821) =< s(871)
s(865) =< s(821)*aux(119)
s(868) =< s(869)*2
s(870) =< s(821)*aux(87)
s(866) =< s(870)* (4/5)
s(867) =< s(870)* (2/3)
s(822) =< s(870)
s(823) =< s(867)
s(824) =< s(866)
s(825) =< s(866)
s(823) =< s(866)
s(825) =< s(869)
s(823) =< s(869)
s(826) =< s(869)
s(827) =< s(868)
s(823) =< s(827)* (1/3)+s(867)
s(824) =< s(827)* (1/5)+s(866)
s(825) =< s(827)* (1/5)+s(866)
s(823) =< s(827)* (1/5)+s(866)
s(828) =< s(865)
s(829) =< s(762)
s(829) =< aux(109)
s(829) =< s(863)
s(779) =< s(780)* (6/5)
s(795) =< s(863)
s(738) =< s(780)
s(739) =< s(779)
s(740) =< s(779)
s(738) =< s(779)
s(740) =< s(781)
s(738) =< s(781)
s(738) =< s(712)* (1/3)+s(780)
s(739) =< s(712)* (1/5)+s(779)
s(740) =< s(712)* (1/5)+s(779)
s(738) =< s(712)* (1/5)+s(779)
s(833) =< s(858)
s(834) =< s(857)
s(835) =< s(857)
s(833) =< s(857)
s(835) =< aux(83)
s(833) =< aux(83)
s(833) =< s(712)* (1/3)+s(858)
s(834) =< s(712)* (1/5)+s(857)
s(835) =< s(712)* (1/5)+s(857)
s(833) =< s(712)* (1/5)+s(857)
s(705) =< aux(91)
s(706) =< s(771)
s(707) =< s(771)
s(705) =< s(771)
s(707) =< s(762)
s(705) =< s(762)
s(708) =< s(762)
s(709) =< aux(94)
s(708) =< s(760)
s(705) =< s(709)* (1/3)+aux(91)
s(706) =< s(709)* (1/5)+s(771)
s(707) =< s(709)* (1/5)+s(771)
s(705) =< s(709)* (1/5)+s(771)
s(767) =< s(762)
s(750) =< s(762)
s(767) =< aux(83)
s(750) =< aux(83)
s(763) =< s(750)*aux(119)
s(766) =< s(767)*2
s(849) =< s(750)*aux(87)
s(845) =< s(849)* (4/5)
s(846) =< s(849)* (2/3)
s(837) =< s(849)
s(838) =< s(846)
s(839) =< s(845)
s(840) =< s(845)
s(838) =< s(845)
s(840) =< s(767)
s(838) =< s(767)
s(755) =< s(767)
s(756) =< s(766)
s(838) =< s(756)* (1/3)+s(846)
s(839) =< s(756)* (1/5)+s(845)
s(840) =< s(756)* (1/5)+s(845)
s(838) =< s(756)* (1/5)+s(845)
s(757) =< s(763)
s(713) =< s(762)
s(713) =< aux(94)
s(714) =< aux(94)
s(715) =< aux(94)
s(715) =< s(781)
s(714) =< aux(83)
s(725) =< aux(94)
s(726) =< s(789)
s(727) =< s(789)
s(725) =< s(789)
s(727) =< aux(83)
s(725) =< aux(83)
s(725) =< s(712)* (1/3)+aux(94)
s(726) =< s(712)* (1/5)+s(789)
s(727) =< s(712)* (1/5)+s(789)
s(725) =< s(712)* (1/5)+s(789)
s(787) =< s(762)
s(728) =< s(762)
s(787) =< s(789)
s(728) =< s(789)
s(466) =< aux(86)* (1/2)+1/2
s(783) =< s(728)*aux(86)
s(786) =< s(787)*2
s(788) =< s(728)*s(466)
s(784) =< s(788)* (4/5)
s(785) =< s(788)* (2/3)
s(729) =< s(788)
s(730) =< s(785)
s(731) =< s(784)
s(732) =< s(784)
s(730) =< s(784)
s(732) =< s(787)
s(730) =< s(787)
s(733) =< s(787)
s(734) =< s(786)
s(730) =< s(734)* (1/3)+s(785)
s(731) =< s(734)* (1/5)+s(784)
s(732) =< s(734)* (1/5)+s(784)
s(730) =< s(734)* (1/5)+s(784)
s(735) =< s(783)
s(736) =< s(762)
s(736) =< aux(94)
s(736) =< s(760)
s(737) =< s(760)
s(741) =< s(777)
s(742) =< s(776)
s(743) =< s(776)
s(741) =< s(776)
s(743) =< aux(83)
s(741) =< aux(83)
s(741) =< s(712)* (1/3)+s(777)
s(742) =< s(712)* (1/5)+s(776)
s(743) =< s(712)* (1/5)+s(776)
s(741) =< s(712)* (1/5)+s(776)
s(704) =< s(775)
s(496) =< aux(119)* (1/2)+1/2
s(768) =< s(750)*s(496)
s(764) =< s(768)* (4/5)
s(765) =< s(768)* (2/3)
s(751) =< s(768)
s(752) =< s(765)
s(753) =< s(764)
s(754) =< s(764)
s(752) =< s(764)
s(754) =< s(767)
s(752) =< s(767)
s(752) =< s(756)* (1/3)+s(765)
s(753) =< s(756)* (1/5)+s(764)
s(754) =< s(756)* (1/5)+s(764)
s(752) =< s(756)* (1/5)+s(764)
s(744) =< aux(90)
s(745) =< s(758)
s(746) =< s(758)
s(744) =< s(758)
s(746) =< s(762)
s(744) =< s(762)
s(744) =< s(709)* (1/3)+aux(90)
s(745) =< s(709)* (1/5)+s(758)
s(746) =< s(709)* (1/5)+s(758)
s(744) =< s(709)* (1/5)+s(758)

#### Cost of phase [59,60]:gcd(V1,V,Out) -> [gcd(V1',V',Out')] 
10*it(59)+2*s(704)+3*s(705)+3*s(706)+3*s(707)+4*s(708)+14*s(709)+128*s(710)+16*s(711)+60*s(712)+1*s(713)+2*s(714)+2*s(715)+2*s(716)+2*s(717)+2*s(718)+8*s(719)+4*s(720)+4*s(721)+4*s(722)+4*s(723)+4*s(724)+1*s(725)+1*s(726)+1*s(727)+3*s(728)+1*s(729)+1*s(730)+1*s(731)+1*s(732)+1*s(733)+3*s(734)+12*s(735)+1*s(736)+2*s(737)+2*s(738)+2*s(739)+2*s(740)+1*s(741)+1*s(742)+1*s(743)+1*s(744)+1*s(745)+1*s(746)+6*s(750)+1*s(751)+1*s(752)+1*s(753)+1*s(754)+2*s(755)+6*s(756)+24*s(757)+4*s(795)+1*s(805)+2*s(806)+2*s(807)+2*s(808)+1*s(818)+1*s(819)+1*s(820)+3*s(821)+1*s(822)+1*s(823)+1*s(824)+1*s(825)+1*s(826)+3*s(827)+12*s(828)+1*s(829)+1*s(833)+1*s(834)+1*s(835)+1*s(837)+1*s(838)+1*s(839)+1*s(840)+0
  Such that:aux(88) =< V1/3+V/3
aux(119) =< V1+V
aux(120) =< V1+V-V1'-V'
aux(83) =< aux(119)
it(59) =< aux(119)
aux(83) =< aux(120)
it(59) =< aux(120)
aux(93) =< aux(119)+1
aux(86) =< aux(119)
aux(89) =< aux(88)
aux(97) =< aux(119)+3
aux(107) =< aux(119)+1
aux(87) =< aux(119)* (1/2)+1/2
s(791) =< aux(83)* (1/2)
s(781) =< aux(83)*2
aux(90) =< it(59)*aux(88)
aux(94) =< it(59)*aux(93)
s(762) =< it(59)*aux(86)
aux(91) =< it(59)*aux(89)
aux(109) =< it(59)*aux(107)
aux(100) =< it(59)*aux(97)
s(758) =< aux(90)* (6/5)
s(775) =< it(59)*aux(87)
s(760) =< aux(94)* (1/2)
s(771) =< aux(91)* (6/5)
s(857) =< aux(109)* (2/5)
s(858) =< aux(109)* (1/3)
s(780) =< aux(100)* (1/3)
s(863) =< aux(109)* (1/2)
s(871) =< aux(109)*2
s(776) =< aux(94)* (2/5)
s(777) =< aux(94)* (1/3)
s(789) =< aux(94)*2
s(710) =< s(762)
s(711) =< aux(83)
s(712) =< s(781)
s(805) =< s(762)
s(805) =< aux(109)
s(806) =< aux(109)
s(807) =< aux(109)
s(807) =< s(781)
s(806) =< aux(83)
s(794) =< s(781)* (1/2)
s(792) =< aux(100)* (6/5)
s(808) =< aux(109)
s(716) =< aux(100)
s(717) =< s(792)
s(718) =< s(792)
s(716) =< s(792)
s(718) =< s(781)
s(716) =< s(781)
s(719) =< s(781)
s(719) =< s(794)
s(716) =< s(712)* (1/3)+aux(100)
s(717) =< s(712)* (1/5)+s(792)
s(718) =< s(712)* (1/5)+s(792)
s(716) =< s(712)* (1/5)+s(792)
s(720) =< aux(83)
s(720) =< s(781)
s(790) =< aux(83)* (6/5)
s(721) =< s(791)
s(722) =< aux(83)
s(723) =< s(790)
s(724) =< s(790)
s(722) =< s(790)
s(724) =< s(781)
s(722) =< s(781)
s(722) =< s(712)* (1/3)+aux(83)
s(723) =< s(712)* (1/5)+s(790)
s(724) =< s(712)* (1/5)+s(790)
s(722) =< s(712)* (1/5)+s(790)
s(818) =< aux(109)
s(819) =< s(871)
s(820) =< s(871)
s(818) =< s(871)
s(820) =< aux(83)
s(818) =< aux(83)
s(818) =< s(712)* (1/3)+aux(109)
s(819) =< s(712)* (1/5)+s(871)
s(820) =< s(712)* (1/5)+s(871)
s(818) =< s(712)* (1/5)+s(871)
s(869) =< s(762)
s(821) =< s(762)
s(869) =< s(871)
s(821) =< s(871)
s(865) =< s(821)*aux(119)
s(868) =< s(869)*2
s(870) =< s(821)*aux(87)
s(866) =< s(870)* (4/5)
s(867) =< s(870)* (2/3)
s(822) =< s(870)
s(823) =< s(867)
s(824) =< s(866)
s(825) =< s(866)
s(823) =< s(866)
s(825) =< s(869)
s(823) =< s(869)
s(826) =< s(869)
s(827) =< s(868)
s(823) =< s(827)* (1/3)+s(867)
s(824) =< s(827)* (1/5)+s(866)
s(825) =< s(827)* (1/5)+s(866)
s(823) =< s(827)* (1/5)+s(866)
s(828) =< s(865)
s(829) =< s(762)
s(829) =< aux(109)
s(829) =< s(863)
s(779) =< s(780)* (6/5)
s(795) =< s(863)
s(738) =< s(780)
s(739) =< s(779)
s(740) =< s(779)
s(738) =< s(779)
s(740) =< s(781)
s(738) =< s(781)
s(738) =< s(712)* (1/3)+s(780)
s(739) =< s(712)* (1/5)+s(779)
s(740) =< s(712)* (1/5)+s(779)
s(738) =< s(712)* (1/5)+s(779)
s(833) =< s(858)
s(834) =< s(857)
s(835) =< s(857)
s(833) =< s(857)
s(835) =< aux(83)
s(833) =< aux(83)
s(833) =< s(712)* (1/3)+s(858)
s(834) =< s(712)* (1/5)+s(857)
s(835) =< s(712)* (1/5)+s(857)
s(833) =< s(712)* (1/5)+s(857)
s(705) =< aux(91)
s(706) =< s(771)
s(707) =< s(771)
s(705) =< s(771)
s(707) =< s(762)
s(705) =< s(762)
s(708) =< s(762)
s(709) =< aux(94)
s(708) =< s(760)
s(705) =< s(709)* (1/3)+aux(91)
s(706) =< s(709)* (1/5)+s(771)
s(707) =< s(709)* (1/5)+s(771)
s(705) =< s(709)* (1/5)+s(771)
s(767) =< s(762)
s(750) =< s(762)
s(767) =< aux(83)
s(750) =< aux(83)
s(763) =< s(750)*aux(119)
s(766) =< s(767)*2
s(849) =< s(750)*aux(87)
s(845) =< s(849)* (4/5)
s(846) =< s(849)* (2/3)
s(837) =< s(849)
s(838) =< s(846)
s(839) =< s(845)
s(840) =< s(845)
s(838) =< s(845)
s(840) =< s(767)
s(838) =< s(767)
s(755) =< s(767)
s(756) =< s(766)
s(838) =< s(756)* (1/3)+s(846)
s(839) =< s(756)* (1/5)+s(845)
s(840) =< s(756)* (1/5)+s(845)
s(838) =< s(756)* (1/5)+s(845)
s(757) =< s(763)
s(713) =< s(762)
s(713) =< aux(94)
s(714) =< aux(94)
s(715) =< aux(94)
s(715) =< s(781)
s(714) =< aux(83)
s(725) =< aux(94)
s(726) =< s(789)
s(727) =< s(789)
s(725) =< s(789)
s(727) =< aux(83)
s(725) =< aux(83)
s(725) =< s(712)* (1/3)+aux(94)
s(726) =< s(712)* (1/5)+s(789)
s(727) =< s(712)* (1/5)+s(789)
s(725) =< s(712)* (1/5)+s(789)
s(787) =< s(762)
s(728) =< s(762)
s(787) =< s(789)
s(728) =< s(789)
s(466) =< aux(86)* (1/2)+1/2
s(783) =< s(728)*aux(86)
s(786) =< s(787)*2
s(788) =< s(728)*s(466)
s(784) =< s(788)* (4/5)
s(785) =< s(788)* (2/3)
s(729) =< s(788)
s(730) =< s(785)
s(731) =< s(784)
s(732) =< s(784)
s(730) =< s(784)
s(732) =< s(787)
s(730) =< s(787)
s(733) =< s(787)
s(734) =< s(786)
s(730) =< s(734)* (1/3)+s(785)
s(731) =< s(734)* (1/5)+s(784)
s(732) =< s(734)* (1/5)+s(784)
s(730) =< s(734)* (1/5)+s(784)
s(735) =< s(783)
s(736) =< s(762)
s(736) =< aux(94)
s(736) =< s(760)
s(737) =< s(760)
s(741) =< s(777)
s(742) =< s(776)
s(743) =< s(776)
s(741) =< s(776)
s(743) =< aux(83)
s(741) =< aux(83)
s(741) =< s(712)* (1/3)+s(777)
s(742) =< s(712)* (1/5)+s(776)
s(743) =< s(712)* (1/5)+s(776)
s(741) =< s(712)* (1/5)+s(776)
s(704) =< s(775)
s(496) =< aux(119)* (1/2)+1/2
s(768) =< s(750)*s(496)
s(764) =< s(768)* (4/5)
s(765) =< s(768)* (2/3)
s(751) =< s(768)
s(752) =< s(765)
s(753) =< s(764)
s(754) =< s(764)
s(752) =< s(764)
s(754) =< s(767)
s(752) =< s(767)
s(752) =< s(756)* (1/3)+s(765)
s(753) =< s(756)* (1/5)+s(764)
s(754) =< s(756)* (1/5)+s(764)
s(752) =< s(756)* (1/5)+s(764)
s(744) =< aux(90)
s(745) =< s(758)
s(746) =< s(758)
s(744) =< s(758)
s(746) =< s(762)
s(744) =< s(762)
s(744) =< s(709)* (1/3)+aux(90)
s(745) =< s(709)* (1/5)+s(758)
s(746) =< s(709)* (1/5)+s(758)
s(744) =< s(709)* (1/5)+s(758)

#### Cost of phase [59,60]:gcd(V1,V,Out) -> [gcd(V1',V',Out')] 
10*it(59)+2*s(704)+3*s(705)+3*s(706)+3*s(707)+4*s(708)+14*s(709)+128*s(710)+16*s(711)+60*s(712)+1*s(713)+2*s(714)+2*s(715)+2*s(716)+2*s(717)+2*s(718)+8*s(719)+4*s(720)+4*s(721)+4*s(722)+4*s(723)+4*s(724)+1*s(725)+1*s(726)+1*s(727)+3*s(728)+1*s(729)+1*s(730)+1*s(731)+1*s(732)+1*s(733)+3*s(734)+12*s(735)+1*s(736)+2*s(737)+2*s(738)+2*s(739)+2*s(740)+1*s(741)+1*s(742)+1*s(743)+1*s(744)+1*s(745)+1*s(746)+6*s(750)+1*s(751)+1*s(752)+1*s(753)+1*s(754)+2*s(755)+6*s(756)+24*s(757)+4*s(795)+1*s(805)+2*s(806)+2*s(807)+2*s(808)+1*s(818)+1*s(819)+1*s(820)+3*s(821)+1*s(822)+1*s(823)+1*s(824)+1*s(825)+1*s(826)+3*s(827)+12*s(828)+1*s(829)+1*s(833)+1*s(834)+1*s(835)+1*s(837)+1*s(838)+1*s(839)+1*s(840)+0
  Such that:aux(88) =< V1/3+V/3
aux(119) =< V1+V
aux(120) =< V1+V-V1'-V'
aux(83) =< aux(119)
it(59) =< aux(119)
aux(83) =< aux(120)
it(59) =< aux(120)
aux(93) =< aux(119)+1
aux(86) =< aux(119)
aux(89) =< aux(88)
aux(97) =< aux(119)+3
aux(107) =< aux(119)+1
aux(87) =< aux(119)* (1/2)+1/2
s(791) =< aux(83)* (1/2)
s(781) =< aux(83)*2
aux(90) =< it(59)*aux(88)
aux(94) =< it(59)*aux(93)
s(762) =< it(59)*aux(86)
aux(91) =< it(59)*aux(89)
aux(109) =< it(59)*aux(107)
aux(100) =< it(59)*aux(97)
s(758) =< aux(90)* (6/5)
s(775) =< it(59)*aux(87)
s(760) =< aux(94)* (1/2)
s(771) =< aux(91)* (6/5)
s(857) =< aux(109)* (2/5)
s(858) =< aux(109)* (1/3)
s(780) =< aux(100)* (1/3)
s(863) =< aux(109)* (1/2)
s(871) =< aux(109)*2
s(776) =< aux(94)* (2/5)
s(777) =< aux(94)* (1/3)
s(789) =< aux(94)*2
s(710) =< s(762)
s(711) =< aux(83)
s(712) =< s(781)
s(805) =< s(762)
s(805) =< aux(109)
s(806) =< aux(109)
s(807) =< aux(109)
s(807) =< s(781)
s(806) =< aux(83)
s(794) =< s(781)* (1/2)
s(792) =< aux(100)* (6/5)
s(808) =< aux(109)
s(716) =< aux(100)
s(717) =< s(792)
s(718) =< s(792)
s(716) =< s(792)
s(718) =< s(781)
s(716) =< s(781)
s(719) =< s(781)
s(719) =< s(794)
s(716) =< s(712)* (1/3)+aux(100)
s(717) =< s(712)* (1/5)+s(792)
s(718) =< s(712)* (1/5)+s(792)
s(716) =< s(712)* (1/5)+s(792)
s(720) =< aux(83)
s(720) =< s(781)
s(790) =< aux(83)* (6/5)
s(721) =< s(791)
s(722) =< aux(83)
s(723) =< s(790)
s(724) =< s(790)
s(722) =< s(790)
s(724) =< s(781)
s(722) =< s(781)
s(722) =< s(712)* (1/3)+aux(83)
s(723) =< s(712)* (1/5)+s(790)
s(724) =< s(712)* (1/5)+s(790)
s(722) =< s(712)* (1/5)+s(790)
s(818) =< aux(109)
s(819) =< s(871)
s(820) =< s(871)
s(818) =< s(871)
s(820) =< aux(83)
s(818) =< aux(83)
s(818) =< s(712)* (1/3)+aux(109)
s(819) =< s(712)* (1/5)+s(871)
s(820) =< s(712)* (1/5)+s(871)
s(818) =< s(712)* (1/5)+s(871)
s(869) =< s(762)
s(821) =< s(762)
s(869) =< s(871)
s(821) =< s(871)
s(865) =< s(821)*aux(119)
s(868) =< s(869)*2
s(870) =< s(821)*aux(87)
s(866) =< s(870)* (4/5)
s(867) =< s(870)* (2/3)
s(822) =< s(870)
s(823) =< s(867)
s(824) =< s(866)
s(825) =< s(866)
s(823) =< s(866)
s(825) =< s(869)
s(823) =< s(869)
s(826) =< s(869)
s(827) =< s(868)
s(823) =< s(827)* (1/3)+s(867)
s(824) =< s(827)* (1/5)+s(866)
s(825) =< s(827)* (1/5)+s(866)
s(823) =< s(827)* (1/5)+s(866)
s(828) =< s(865)
s(829) =< s(762)
s(829) =< aux(109)
s(829) =< s(863)
s(779) =< s(780)* (6/5)
s(795) =< s(863)
s(738) =< s(780)
s(739) =< s(779)
s(740) =< s(779)
s(738) =< s(779)
s(740) =< s(781)
s(738) =< s(781)
s(738) =< s(712)* (1/3)+s(780)
s(739) =< s(712)* (1/5)+s(779)
s(740) =< s(712)* (1/5)+s(779)
s(738) =< s(712)* (1/5)+s(779)
s(833) =< s(858)
s(834) =< s(857)
s(835) =< s(857)
s(833) =< s(857)
s(835) =< aux(83)
s(833) =< aux(83)
s(833) =< s(712)* (1/3)+s(858)
s(834) =< s(712)* (1/5)+s(857)
s(835) =< s(712)* (1/5)+s(857)
s(833) =< s(712)* (1/5)+s(857)
s(705) =< aux(91)
s(706) =< s(771)
s(707) =< s(771)
s(705) =< s(771)
s(707) =< s(762)
s(705) =< s(762)
s(708) =< s(762)
s(709) =< aux(94)
s(708) =< s(760)
s(705) =< s(709)* (1/3)+aux(91)
s(706) =< s(709)* (1/5)+s(771)
s(707) =< s(709)* (1/5)+s(771)
s(705) =< s(709)* (1/5)+s(771)
s(767) =< s(762)
s(750) =< s(762)
s(767) =< aux(83)
s(750) =< aux(83)
s(763) =< s(750)*aux(119)
s(766) =< s(767)*2
s(849) =< s(750)*aux(87)
s(845) =< s(849)* (4/5)
s(846) =< s(849)* (2/3)
s(837) =< s(849)
s(838) =< s(846)
s(839) =< s(845)
s(840) =< s(845)
s(838) =< s(845)
s(840) =< s(767)
s(838) =< s(767)
s(755) =< s(767)
s(756) =< s(766)
s(838) =< s(756)* (1/3)+s(846)
s(839) =< s(756)* (1/5)+s(845)
s(840) =< s(756)* (1/5)+s(845)
s(838) =< s(756)* (1/5)+s(845)
s(757) =< s(763)
s(713) =< s(762)
s(713) =< aux(94)
s(714) =< aux(94)
s(715) =< aux(94)
s(715) =< s(781)
s(714) =< aux(83)
s(725) =< aux(94)
s(726) =< s(789)
s(727) =< s(789)
s(725) =< s(789)
s(727) =< aux(83)
s(725) =< aux(83)
s(725) =< s(712)* (1/3)+aux(94)
s(726) =< s(712)* (1/5)+s(789)
s(727) =< s(712)* (1/5)+s(789)
s(725) =< s(712)* (1/5)+s(789)
s(787) =< s(762)
s(728) =< s(762)
s(787) =< s(789)
s(728) =< s(789)
s(466) =< aux(86)* (1/2)+1/2
s(783) =< s(728)*aux(86)
s(786) =< s(787)*2
s(788) =< s(728)*s(466)
s(784) =< s(788)* (4/5)
s(785) =< s(788)* (2/3)
s(729) =< s(788)
s(730) =< s(785)
s(731) =< s(784)
s(732) =< s(784)
s(730) =< s(784)
s(732) =< s(787)
s(730) =< s(787)
s(733) =< s(787)
s(734) =< s(786)
s(730) =< s(734)* (1/3)+s(785)
s(731) =< s(734)* (1/5)+s(784)
s(732) =< s(734)* (1/5)+s(784)
s(730) =< s(734)* (1/5)+s(784)
s(735) =< s(783)
s(736) =< s(762)
s(736) =< aux(94)
s(736) =< s(760)
s(737) =< s(760)
s(741) =< s(777)
s(742) =< s(776)
s(743) =< s(776)
s(741) =< s(776)
s(743) =< aux(83)
s(741) =< aux(83)
s(741) =< s(712)* (1/3)+s(777)
s(742) =< s(712)* (1/5)+s(776)
s(743) =< s(712)* (1/5)+s(776)
s(741) =< s(712)* (1/5)+s(776)
s(704) =< s(775)
s(496) =< aux(119)* (1/2)+1/2
s(768) =< s(750)*s(496)
s(764) =< s(768)* (4/5)
s(765) =< s(768)* (2/3)
s(751) =< s(768)
s(752) =< s(765)
s(753) =< s(764)
s(754) =< s(764)
s(752) =< s(764)
s(754) =< s(767)
s(752) =< s(767)
s(752) =< s(756)* (1/3)+s(765)
s(753) =< s(756)* (1/5)+s(764)
s(754) =< s(756)* (1/5)+s(764)
s(752) =< s(756)* (1/5)+s(764)
s(744) =< aux(90)
s(745) =< s(758)
s(746) =< s(758)
s(744) =< s(758)
s(746) =< s(762)
s(744) =< s(762)
s(744) =< s(709)* (1/3)+aux(90)
s(745) =< s(709)* (1/5)+s(758)
s(746) =< s(709)* (1/5)+s(758)
s(744) =< s(709)* (1/5)+s(758)

#### Cost of phase [59,60]:gcd(V1,V,Out) -> [gcd(V1',V',Out')] 
10*it(59)+2*s(704)+3*s(705)+3*s(706)+3*s(707)+4*s(708)+14*s(709)+128*s(710)+16*s(711)+60*s(712)+1*s(713)+2*s(714)+2*s(715)+2*s(716)+2*s(717)+2*s(718)+8*s(719)+4*s(720)+4*s(721)+4*s(722)+4*s(723)+4*s(724)+1*s(725)+1*s(726)+1*s(727)+3*s(728)+1*s(729)+1*s(730)+1*s(731)+1*s(732)+1*s(733)+3*s(734)+12*s(735)+1*s(736)+2*s(737)+2*s(738)+2*s(739)+2*s(740)+1*s(741)+1*s(742)+1*s(743)+1*s(744)+1*s(745)+1*s(746)+6*s(750)+1*s(751)+1*s(752)+1*s(753)+1*s(754)+2*s(755)+6*s(756)+24*s(757)+4*s(795)+1*s(805)+2*s(806)+2*s(807)+2*s(808)+1*s(818)+1*s(819)+1*s(820)+3*s(821)+1*s(822)+1*s(823)+1*s(824)+1*s(825)+1*s(826)+3*s(827)+12*s(828)+1*s(829)+1*s(833)+1*s(834)+1*s(835)+1*s(837)+1*s(838)+1*s(839)+1*s(840)+0
  Such that:aux(88) =< V1/3+V/3
aux(119) =< V1+V
aux(120) =< V1+V-V1'-V'
aux(83) =< aux(119)
it(59) =< aux(119)
aux(83) =< aux(120)
it(59) =< aux(120)
aux(93) =< aux(119)+1
aux(86) =< aux(119)
aux(89) =< aux(88)
aux(97) =< aux(119)+3
aux(107) =< aux(119)+1
aux(87) =< aux(119)* (1/2)+1/2
s(791) =< aux(83)* (1/2)
s(781) =< aux(83)*2
aux(90) =< it(59)*aux(88)
aux(94) =< it(59)*aux(93)
s(762) =< it(59)*aux(86)
aux(91) =< it(59)*aux(89)
aux(109) =< it(59)*aux(107)
aux(100) =< it(59)*aux(97)
s(758) =< aux(90)* (6/5)
s(775) =< it(59)*aux(87)
s(760) =< aux(94)* (1/2)
s(771) =< aux(91)* (6/5)
s(857) =< aux(109)* (2/5)
s(858) =< aux(109)* (1/3)
s(780) =< aux(100)* (1/3)
s(863) =< aux(109)* (1/2)
s(871) =< aux(109)*2
s(776) =< aux(94)* (2/5)
s(777) =< aux(94)* (1/3)
s(789) =< aux(94)*2
s(710) =< s(762)
s(711) =< aux(83)
s(712) =< s(781)
s(805) =< s(762)
s(805) =< aux(109)
s(806) =< aux(109)
s(807) =< aux(109)
s(807) =< s(781)
s(806) =< aux(83)
s(794) =< s(781)* (1/2)
s(792) =< aux(100)* (6/5)
s(808) =< aux(109)
s(716) =< aux(100)
s(717) =< s(792)
s(718) =< s(792)
s(716) =< s(792)
s(718) =< s(781)
s(716) =< s(781)
s(719) =< s(781)
s(719) =< s(794)
s(716) =< s(712)* (1/3)+aux(100)
s(717) =< s(712)* (1/5)+s(792)
s(718) =< s(712)* (1/5)+s(792)
s(716) =< s(712)* (1/5)+s(792)
s(720) =< aux(83)
s(720) =< s(781)
s(790) =< aux(83)* (6/5)
s(721) =< s(791)
s(722) =< aux(83)
s(723) =< s(790)
s(724) =< s(790)
s(722) =< s(790)
s(724) =< s(781)
s(722) =< s(781)
s(722) =< s(712)* (1/3)+aux(83)
s(723) =< s(712)* (1/5)+s(790)
s(724) =< s(712)* (1/5)+s(790)
s(722) =< s(712)* (1/5)+s(790)
s(818) =< aux(109)
s(819) =< s(871)
s(820) =< s(871)
s(818) =< s(871)
s(820) =< aux(83)
s(818) =< aux(83)
s(818) =< s(712)* (1/3)+aux(109)
s(819) =< s(712)* (1/5)+s(871)
s(820) =< s(712)* (1/5)+s(871)
s(818) =< s(712)* (1/5)+s(871)
s(869) =< s(762)
s(821) =< s(762)
s(869) =< s(871)
s(821) =< s(871)
s(865) =< s(821)*aux(119)
s(868) =< s(869)*2
s(870) =< s(821)*aux(87)
s(866) =< s(870)* (4/5)
s(867) =< s(870)* (2/3)
s(822) =< s(870)
s(823) =< s(867)
s(824) =< s(866)
s(825) =< s(866)
s(823) =< s(866)
s(825) =< s(869)
s(823) =< s(869)
s(826) =< s(869)
s(827) =< s(868)
s(823) =< s(827)* (1/3)+s(867)
s(824) =< s(827)* (1/5)+s(866)
s(825) =< s(827)* (1/5)+s(866)
s(823) =< s(827)* (1/5)+s(866)
s(828) =< s(865)
s(829) =< s(762)
s(829) =< aux(109)
s(829) =< s(863)
s(779) =< s(780)* (6/5)
s(795) =< s(863)
s(738) =< s(780)
s(739) =< s(779)
s(740) =< s(779)
s(738) =< s(779)
s(740) =< s(781)
s(738) =< s(781)
s(738) =< s(712)* (1/3)+s(780)
s(739) =< s(712)* (1/5)+s(779)
s(740) =< s(712)* (1/5)+s(779)
s(738) =< s(712)* (1/5)+s(779)
s(833) =< s(858)
s(834) =< s(857)
s(835) =< s(857)
s(833) =< s(857)
s(835) =< aux(83)
s(833) =< aux(83)
s(833) =< s(712)* (1/3)+s(858)
s(834) =< s(712)* (1/5)+s(857)
s(835) =< s(712)* (1/5)+s(857)
s(833) =< s(712)* (1/5)+s(857)
s(705) =< aux(91)
s(706) =< s(771)
s(707) =< s(771)
s(705) =< s(771)
s(707) =< s(762)
s(705) =< s(762)
s(708) =< s(762)
s(709) =< aux(94)
s(708) =< s(760)
s(705) =< s(709)* (1/3)+aux(91)
s(706) =< s(709)* (1/5)+s(771)
s(707) =< s(709)* (1/5)+s(771)
s(705) =< s(709)* (1/5)+s(771)
s(767) =< s(762)
s(750) =< s(762)
s(767) =< aux(83)
s(750) =< aux(83)
s(763) =< s(750)*aux(119)
s(766) =< s(767)*2
s(849) =< s(750)*aux(87)
s(845) =< s(849)* (4/5)
s(846) =< s(849)* (2/3)
s(837) =< s(849)
s(838) =< s(846)
s(839) =< s(845)
s(840) =< s(845)
s(838) =< s(845)
s(840) =< s(767)
s(838) =< s(767)
s(755) =< s(767)
s(756) =< s(766)
s(838) =< s(756)* (1/3)+s(846)
s(839) =< s(756)* (1/5)+s(845)
s(840) =< s(756)* (1/5)+s(845)
s(838) =< s(756)* (1/5)+s(845)
s(757) =< s(763)
s(713) =< s(762)
s(713) =< aux(94)
s(714) =< aux(94)
s(715) =< aux(94)
s(715) =< s(781)
s(714) =< aux(83)
s(725) =< aux(94)
s(726) =< s(789)
s(727) =< s(789)
s(725) =< s(789)
s(727) =< aux(83)
s(725) =< aux(83)
s(725) =< s(712)* (1/3)+aux(94)
s(726) =< s(712)* (1/5)+s(789)
s(727) =< s(712)* (1/5)+s(789)
s(725) =< s(712)* (1/5)+s(789)
s(787) =< s(762)
s(728) =< s(762)
s(787) =< s(789)
s(728) =< s(789)
s(466) =< aux(86)* (1/2)+1/2
s(783) =< s(728)*aux(86)
s(786) =< s(787)*2
s(788) =< s(728)*s(466)
s(784) =< s(788)* (4/5)
s(785) =< s(788)* (2/3)
s(729) =< s(788)
s(730) =< s(785)
s(731) =< s(784)
s(732) =< s(784)
s(730) =< s(784)
s(732) =< s(787)
s(730) =< s(787)
s(733) =< s(787)
s(734) =< s(786)
s(730) =< s(734)* (1/3)+s(785)
s(731) =< s(734)* (1/5)+s(784)
s(732) =< s(734)* (1/5)+s(784)
s(730) =< s(734)* (1/5)+s(784)
s(735) =< s(783)
s(736) =< s(762)
s(736) =< aux(94)
s(736) =< s(760)
s(737) =< s(760)
s(741) =< s(777)
s(742) =< s(776)
s(743) =< s(776)
s(741) =< s(776)
s(743) =< aux(83)
s(741) =< aux(83)
s(741) =< s(712)* (1/3)+s(777)
s(742) =< s(712)* (1/5)+s(776)
s(743) =< s(712)* (1/5)+s(776)
s(741) =< s(712)* (1/5)+s(776)
s(704) =< s(775)
s(496) =< aux(119)* (1/2)+1/2
s(768) =< s(750)*s(496)
s(764) =< s(768)* (4/5)
s(765) =< s(768)* (2/3)
s(751) =< s(768)
s(752) =< s(765)
s(753) =< s(764)
s(754) =< s(764)
s(752) =< s(764)
s(754) =< s(767)
s(752) =< s(767)
s(752) =< s(756)* (1/3)+s(765)
s(753) =< s(756)* (1/5)+s(764)
s(754) =< s(756)* (1/5)+s(764)
s(752) =< s(756)* (1/5)+s(764)
s(744) =< aux(90)
s(745) =< s(758)
s(746) =< s(758)
s(744) =< s(758)
s(746) =< s(762)
s(744) =< s(762)
s(744) =< s(709)* (1/3)+aux(90)
s(745) =< s(709)* (1/5)+s(758)
s(746) =< s(709)* (1/5)+s(758)
s(744) =< s(709)* (1/5)+s(758)

#### Cost of chains of gcd(V1,V,Out):
* Chain [[59,60],65]: 27*it(59)+5*s(251)+4*s(252)+4*s(253)+4*s(254)+4*s(255)+19*s(256)+3*s(257)+1*s(291)+1*s(298)+1*s(299)+1*s(300)+1*s(301)+2*s(704)+3*s(705)+3*s(706)+3*s(707)+4*s(708)+16*s(709)+128*s(710)+60*s(712)+2*s(713)+4*s(714)+4*s(715)+2*s(716)+2*s(717)+2*s(718)+8*s(719)+4*s(720)+4*s(721)+4*s(722)+4*s(723)+4*s(724)+2*s(725)+2*s(726)+2*s(727)+6*s(728)+1*s(729)+1*s(730)+1*s(731)+1*s(732)+2*s(733)+6*s(734)+12*s(735)+2*s(736)+6*s(737)+2*s(738)+2*s(739)+2*s(740)+2*s(741)+2*s(742)+2*s(743)+1*s(744)+1*s(745)+1*s(746)+6*s(750)+2*s(751)+2*s(752)+2*s(753)+2*s(754)+2*s(755)+6*s(756)+24*s(757)+1*s(822)+1*s(823)+1*s(824)+1*s(825)+12*s(828)+2
  Such that:aux(59) =< 2*V1+2*V
aux(57) =< V1/2+V/2+1/2
aux(88) =< V1/3+V/3
aux(121) =< V1+V
aux(122) =< V1+V+1
aux(123) =< V1+V+2
aux(60) =< aux(121)
aux(57) =< aux(122)
aux(60) =< aux(122)
aux(57) =< aux(123)
it(59) =< aux(121)
s(291) =< aux(121)
s(291) =< aux(122)
s(256) =< aux(122)
s(291) =< aux(57)
s(295) =< aux(122)* (1/2)
s(296) =< aux(123)* (6/5)
s(251) =< aux(57)
s(298) =< aux(123)
s(299) =< s(296)
s(300) =< s(296)
s(298) =< s(296)
s(300) =< aux(122)
s(298) =< aux(122)
s(301) =< aux(122)
s(301) =< s(295)
s(298) =< s(256)* (1/3)+aux(123)
s(299) =< s(256)* (1/5)+s(296)
s(300) =< s(256)* (1/5)+s(296)
s(298) =< s(256)* (1/5)+s(296)
s(257) =< aux(60)
s(252) =< aux(121)
s(253) =< aux(59)
s(254) =< aux(59)
s(252) =< aux(59)
s(254) =< aux(60)
s(252) =< aux(60)
s(255) =< aux(60)
s(255) =< aux(122)
s(252) =< s(256)* (1/3)+aux(121)
s(253) =< s(256)* (1/5)+aux(59)
s(254) =< s(256)* (1/5)+aux(59)
s(252) =< s(256)* (1/5)+aux(59)
aux(93) =< aux(121)+1
aux(86) =< aux(121)
aux(89) =< aux(88)
aux(97) =< aux(121)+3
aux(87) =< aux(121)* (1/2)+1/2
s(791) =< aux(121)* (1/2)
s(781) =< aux(121)*2
aux(90) =< it(59)*aux(88)
aux(94) =< it(59)*aux(93)
s(762) =< it(59)*aux(86)
aux(91) =< it(59)*aux(89)
aux(100) =< it(59)*aux(97)
s(758) =< aux(90)* (6/5)
s(775) =< it(59)*aux(87)
s(760) =< aux(94)* (1/2)
s(771) =< aux(91)* (6/5)
s(776) =< aux(94)* (2/5)
s(777) =< aux(94)* (1/3)
s(780) =< aux(100)* (1/3)
s(789) =< aux(94)*2
s(710) =< s(762)
s(712) =< s(781)
s(713) =< s(762)
s(713) =< aux(94)
s(714) =< aux(94)
s(715) =< aux(94)
s(715) =< s(781)
s(714) =< aux(121)
s(794) =< s(781)* (1/2)
s(792) =< aux(100)* (6/5)
s(709) =< aux(94)
s(716) =< aux(100)
s(717) =< s(792)
s(718) =< s(792)
s(716) =< s(792)
s(718) =< s(781)
s(716) =< s(781)
s(719) =< s(781)
s(719) =< s(794)
s(716) =< s(712)* (1/3)+aux(100)
s(717) =< s(712)* (1/5)+s(792)
s(718) =< s(712)* (1/5)+s(792)
s(716) =< s(712)* (1/5)+s(792)
s(720) =< aux(121)
s(720) =< s(781)
s(790) =< aux(121)* (6/5)
s(721) =< s(791)
s(722) =< aux(121)
s(723) =< s(790)
s(724) =< s(790)
s(722) =< s(790)
s(724) =< s(781)
s(722) =< s(781)
s(722) =< s(712)* (1/3)+aux(121)
s(723) =< s(712)* (1/5)+s(790)
s(724) =< s(712)* (1/5)+s(790)
s(722) =< s(712)* (1/5)+s(790)
s(725) =< aux(94)
s(726) =< s(789)
s(727) =< s(789)
s(725) =< s(789)
s(727) =< aux(121)
s(725) =< aux(121)
s(725) =< s(712)* (1/3)+aux(94)
s(726) =< s(712)* (1/5)+s(789)
s(727) =< s(712)* (1/5)+s(789)
s(725) =< s(712)* (1/5)+s(789)
s(787) =< s(762)
s(728) =< s(762)
s(787) =< s(789)
s(728) =< s(789)
s(865) =< s(728)*aux(121)
s(786) =< s(787)*2
s(870) =< s(728)*aux(87)
s(866) =< s(870)* (4/5)
s(867) =< s(870)* (2/3)
s(822) =< s(870)
s(823) =< s(867)
s(824) =< s(866)
s(825) =< s(866)
s(823) =< s(866)
s(825) =< s(787)
s(823) =< s(787)
s(733) =< s(787)
s(734) =< s(786)
s(823) =< s(734)* (1/3)+s(867)
s(824) =< s(734)* (1/5)+s(866)
s(825) =< s(734)* (1/5)+s(866)
s(823) =< s(734)* (1/5)+s(866)
s(828) =< s(865)
s(736) =< s(762)
s(736) =< aux(94)
s(736) =< s(760)
s(779) =< s(780)* (6/5)
s(737) =< s(760)
s(738) =< s(780)
s(739) =< s(779)
s(740) =< s(779)
s(738) =< s(779)
s(740) =< s(781)
s(738) =< s(781)
s(738) =< s(712)* (1/3)+s(780)
s(739) =< s(712)* (1/5)+s(779)
s(740) =< s(712)* (1/5)+s(779)
s(738) =< s(712)* (1/5)+s(779)
s(741) =< s(777)
s(742) =< s(776)
s(743) =< s(776)
s(741) =< s(776)
s(743) =< aux(121)
s(741) =< aux(121)
s(741) =< s(712)* (1/3)+s(777)
s(742) =< s(712)* (1/5)+s(776)
s(743) =< s(712)* (1/5)+s(776)
s(741) =< s(712)* (1/5)+s(776)
s(705) =< aux(91)
s(706) =< s(771)
s(707) =< s(771)
s(705) =< s(771)
s(707) =< s(762)
s(705) =< s(762)
s(708) =< s(762)
s(708) =< s(760)
s(705) =< s(709)* (1/3)+aux(91)
s(706) =< s(709)* (1/5)+s(771)
s(707) =< s(709)* (1/5)+s(771)
s(705) =< s(709)* (1/5)+s(771)
s(767) =< s(762)
s(750) =< s(762)
s(767) =< aux(121)
s(750) =< aux(121)
s(763) =< s(750)*aux(121)
s(766) =< s(767)*2
s(768) =< s(750)*aux(87)
s(764) =< s(768)* (4/5)
s(765) =< s(768)* (2/3)
s(751) =< s(768)
s(752) =< s(765)
s(753) =< s(764)
s(754) =< s(764)
s(752) =< s(764)
s(754) =< s(767)
s(752) =< s(767)
s(755) =< s(767)
s(756) =< s(766)
s(752) =< s(756)* (1/3)+s(765)
s(753) =< s(756)* (1/5)+s(764)
s(754) =< s(756)* (1/5)+s(764)
s(752) =< s(756)* (1/5)+s(764)
s(757) =< s(763)
s(466) =< aux(86)* (1/2)+1/2
s(783) =< s(728)*aux(86)
s(788) =< s(728)*s(466)
s(784) =< s(788)* (4/5)
s(785) =< s(788)* (2/3)
s(729) =< s(788)
s(730) =< s(785)
s(731) =< s(784)
s(732) =< s(784)
s(730) =< s(784)
s(732) =< s(787)
s(730) =< s(787)
s(730) =< s(734)* (1/3)+s(785)
s(731) =< s(734)* (1/5)+s(784)
s(732) =< s(734)* (1/5)+s(784)
s(730) =< s(734)* (1/5)+s(784)
s(735) =< s(783)
s(704) =< s(775)
s(744) =< aux(90)
s(745) =< s(758)
s(746) =< s(758)
s(744) =< s(758)
s(746) =< s(762)
s(744) =< s(762)
s(744) =< s(709)* (1/3)+aux(90)
s(745) =< s(709)* (1/5)+s(758)
s(746) =< s(709)* (1/5)+s(758)
s(744) =< s(709)* (1/5)+s(758)

  with precondition: [Out=0,V1>=1,V>=1,V+V1>=3] 

* Chain [[59,60],64]: 26*it(59)+2*s(704)+3*s(705)+3*s(706)+3*s(707)+4*s(708)+16*s(709)+128*s(710)+60*s(712)+2*s(713)+4*s(714)+4*s(715)+2*s(716)+2*s(717)+2*s(718)+8*s(719)+4*s(720)+4*s(721)+4*s(722)+4*s(723)+4*s(724)+2*s(725)+2*s(726)+2*s(727)+6*s(728)+1*s(729)+1*s(730)+1*s(731)+1*s(732)+2*s(733)+6*s(734)+12*s(735)+2*s(736)+6*s(737)+2*s(738)+2*s(739)+2*s(740)+2*s(741)+2*s(742)+2*s(743)+1*s(744)+1*s(745)+1*s(746)+6*s(750)+2*s(751)+2*s(752)+2*s(753)+2*s(754)+2*s(755)+6*s(756)+24*s(757)+1*s(822)+1*s(823)+1*s(824)+1*s(825)+12*s(828)+1
  Such that:aux(88) =< V1/3+V/3
aux(124) =< V1+V
it(59) =< aux(124)
aux(93) =< aux(124)+1
aux(86) =< aux(124)
aux(89) =< aux(88)
aux(97) =< aux(124)+3
aux(87) =< aux(124)* (1/2)+1/2
s(791) =< aux(124)* (1/2)
s(781) =< aux(124)*2
aux(90) =< it(59)*aux(88)
aux(94) =< it(59)*aux(93)
s(762) =< it(59)*aux(86)
aux(91) =< it(59)*aux(89)
aux(100) =< it(59)*aux(97)
s(758) =< aux(90)* (6/5)
s(775) =< it(59)*aux(87)
s(760) =< aux(94)* (1/2)
s(771) =< aux(91)* (6/5)
s(776) =< aux(94)* (2/5)
s(777) =< aux(94)* (1/3)
s(780) =< aux(100)* (1/3)
s(789) =< aux(94)*2
s(710) =< s(762)
s(712) =< s(781)
s(713) =< s(762)
s(713) =< aux(94)
s(714) =< aux(94)
s(715) =< aux(94)
s(715) =< s(781)
s(714) =< aux(124)
s(794) =< s(781)* (1/2)
s(792) =< aux(100)* (6/5)
s(709) =< aux(94)
s(716) =< aux(100)
s(717) =< s(792)
s(718) =< s(792)
s(716) =< s(792)
s(718) =< s(781)
s(716) =< s(781)
s(719) =< s(781)
s(719) =< s(794)
s(716) =< s(712)* (1/3)+aux(100)
s(717) =< s(712)* (1/5)+s(792)
s(718) =< s(712)* (1/5)+s(792)
s(716) =< s(712)* (1/5)+s(792)
s(720) =< aux(124)
s(720) =< s(781)
s(790) =< aux(124)* (6/5)
s(721) =< s(791)
s(722) =< aux(124)
s(723) =< s(790)
s(724) =< s(790)
s(722) =< s(790)
s(724) =< s(781)
s(722) =< s(781)
s(722) =< s(712)* (1/3)+aux(124)
s(723) =< s(712)* (1/5)+s(790)
s(724) =< s(712)* (1/5)+s(790)
s(722) =< s(712)* (1/5)+s(790)
s(725) =< aux(94)
s(726) =< s(789)
s(727) =< s(789)
s(725) =< s(789)
s(727) =< aux(124)
s(725) =< aux(124)
s(725) =< s(712)* (1/3)+aux(94)
s(726) =< s(712)* (1/5)+s(789)
s(727) =< s(712)* (1/5)+s(789)
s(725) =< s(712)* (1/5)+s(789)
s(787) =< s(762)
s(728) =< s(762)
s(787) =< s(789)
s(728) =< s(789)
s(865) =< s(728)*aux(124)
s(786) =< s(787)*2
s(870) =< s(728)*aux(87)
s(866) =< s(870)* (4/5)
s(867) =< s(870)* (2/3)
s(822) =< s(870)
s(823) =< s(867)
s(824) =< s(866)
s(825) =< s(866)
s(823) =< s(866)
s(825) =< s(787)
s(823) =< s(787)
s(733) =< s(787)
s(734) =< s(786)
s(823) =< s(734)* (1/3)+s(867)
s(824) =< s(734)* (1/5)+s(866)
s(825) =< s(734)* (1/5)+s(866)
s(823) =< s(734)* (1/5)+s(866)
s(828) =< s(865)
s(736) =< s(762)
s(736) =< aux(94)
s(736) =< s(760)
s(779) =< s(780)* (6/5)
s(737) =< s(760)
s(738) =< s(780)
s(739) =< s(779)
s(740) =< s(779)
s(738) =< s(779)
s(740) =< s(781)
s(738) =< s(781)
s(738) =< s(712)* (1/3)+s(780)
s(739) =< s(712)* (1/5)+s(779)
s(740) =< s(712)* (1/5)+s(779)
s(738) =< s(712)* (1/5)+s(779)
s(741) =< s(777)
s(742) =< s(776)
s(743) =< s(776)
s(741) =< s(776)
s(743) =< aux(124)
s(741) =< aux(124)
s(741) =< s(712)* (1/3)+s(777)
s(742) =< s(712)* (1/5)+s(776)
s(743) =< s(712)* (1/5)+s(776)
s(741) =< s(712)* (1/5)+s(776)
s(705) =< aux(91)
s(706) =< s(771)
s(707) =< s(771)
s(705) =< s(771)
s(707) =< s(762)
s(705) =< s(762)
s(708) =< s(762)
s(708) =< s(760)
s(705) =< s(709)* (1/3)+aux(91)
s(706) =< s(709)* (1/5)+s(771)
s(707) =< s(709)* (1/5)+s(771)
s(705) =< s(709)* (1/5)+s(771)
s(767) =< s(762)
s(750) =< s(762)
s(767) =< aux(124)
s(750) =< aux(124)
s(763) =< s(750)*aux(124)
s(766) =< s(767)*2
s(768) =< s(750)*aux(87)
s(764) =< s(768)* (4/5)
s(765) =< s(768)* (2/3)
s(751) =< s(768)
s(752) =< s(765)
s(753) =< s(764)
s(754) =< s(764)
s(752) =< s(764)
s(754) =< s(767)
s(752) =< s(767)
s(755) =< s(767)
s(756) =< s(766)
s(752) =< s(756)* (1/3)+s(765)
s(753) =< s(756)* (1/5)+s(764)
s(754) =< s(756)* (1/5)+s(764)
s(752) =< s(756)* (1/5)+s(764)
s(757) =< s(763)
s(466) =< aux(86)* (1/2)+1/2
s(783) =< s(728)*aux(86)
s(788) =< s(728)*s(466)
s(784) =< s(788)* (4/5)
s(785) =< s(788)* (2/3)
s(729) =< s(788)
s(730) =< s(785)
s(731) =< s(784)
s(732) =< s(784)
s(730) =< s(784)
s(732) =< s(787)
s(730) =< s(787)
s(730) =< s(734)* (1/3)+s(785)
s(731) =< s(734)* (1/5)+s(784)
s(732) =< s(734)* (1/5)+s(784)
s(730) =< s(734)* (1/5)+s(784)
s(735) =< s(783)
s(704) =< s(775)
s(744) =< aux(90)
s(745) =< s(758)
s(746) =< s(758)
s(744) =< s(758)
s(746) =< s(762)
s(744) =< s(762)
s(744) =< s(709)* (1/3)+aux(90)
s(745) =< s(709)* (1/5)+s(758)
s(746) =< s(709)* (1/5)+s(758)
s(744) =< s(709)* (1/5)+s(758)

  with precondition: [Out=0,V1>=1,V>=1,V+V1>=3] 

* Chain [[59,60],63]: 26*it(59)+2*s(704)+3*s(705)+3*s(706)+3*s(707)+4*s(708)+16*s(709)+128*s(710)+60*s(712)+2*s(713)+4*s(714)+4*s(715)+2*s(716)+2*s(717)+2*s(718)+8*s(719)+4*s(720)+4*s(721)+4*s(722)+4*s(723)+4*s(724)+2*s(725)+2*s(726)+2*s(727)+6*s(728)+1*s(729)+1*s(730)+1*s(731)+1*s(732)+2*s(733)+6*s(734)+12*s(735)+2*s(736)+6*s(737)+2*s(738)+2*s(739)+2*s(740)+2*s(741)+2*s(742)+2*s(743)+1*s(744)+1*s(745)+1*s(746)+6*s(750)+2*s(751)+2*s(752)+2*s(753)+2*s(754)+2*s(755)+6*s(756)+24*s(757)+1*s(822)+1*s(823)+1*s(824)+1*s(825)+12*s(828)+1
  Such that:aux(88) =< V1/3+V/3
aux(125) =< V1+V
it(59) =< aux(125)
aux(93) =< aux(125)+1
aux(86) =< aux(125)
aux(89) =< aux(88)
aux(97) =< aux(125)+3
aux(87) =< aux(125)* (1/2)+1/2
s(791) =< aux(125)* (1/2)
s(781) =< aux(125)*2
aux(90) =< it(59)*aux(88)
aux(94) =< it(59)*aux(93)
s(762) =< it(59)*aux(86)
aux(91) =< it(59)*aux(89)
aux(100) =< it(59)*aux(97)
s(758) =< aux(90)* (6/5)
s(775) =< it(59)*aux(87)
s(760) =< aux(94)* (1/2)
s(771) =< aux(91)* (6/5)
s(776) =< aux(94)* (2/5)
s(777) =< aux(94)* (1/3)
s(780) =< aux(100)* (1/3)
s(789) =< aux(94)*2
s(710) =< s(762)
s(712) =< s(781)
s(713) =< s(762)
s(713) =< aux(94)
s(714) =< aux(94)
s(715) =< aux(94)
s(715) =< s(781)
s(714) =< aux(125)
s(794) =< s(781)* (1/2)
s(792) =< aux(100)* (6/5)
s(709) =< aux(94)
s(716) =< aux(100)
s(717) =< s(792)
s(718) =< s(792)
s(716) =< s(792)
s(718) =< s(781)
s(716) =< s(781)
s(719) =< s(781)
s(719) =< s(794)
s(716) =< s(712)* (1/3)+aux(100)
s(717) =< s(712)* (1/5)+s(792)
s(718) =< s(712)* (1/5)+s(792)
s(716) =< s(712)* (1/5)+s(792)
s(720) =< aux(125)
s(720) =< s(781)
s(790) =< aux(125)* (6/5)
s(721) =< s(791)
s(722) =< aux(125)
s(723) =< s(790)
s(724) =< s(790)
s(722) =< s(790)
s(724) =< s(781)
s(722) =< s(781)
s(722) =< s(712)* (1/3)+aux(125)
s(723) =< s(712)* (1/5)+s(790)
s(724) =< s(712)* (1/5)+s(790)
s(722) =< s(712)* (1/5)+s(790)
s(725) =< aux(94)
s(726) =< s(789)
s(727) =< s(789)
s(725) =< s(789)
s(727) =< aux(125)
s(725) =< aux(125)
s(725) =< s(712)* (1/3)+aux(94)
s(726) =< s(712)* (1/5)+s(789)
s(727) =< s(712)* (1/5)+s(789)
s(725) =< s(712)* (1/5)+s(789)
s(787) =< s(762)
s(728) =< s(762)
s(787) =< s(789)
s(728) =< s(789)
s(865) =< s(728)*aux(125)
s(786) =< s(787)*2
s(870) =< s(728)*aux(87)
s(866) =< s(870)* (4/5)
s(867) =< s(870)* (2/3)
s(822) =< s(870)
s(823) =< s(867)
s(824) =< s(866)
s(825) =< s(866)
s(823) =< s(866)
s(825) =< s(787)
s(823) =< s(787)
s(733) =< s(787)
s(734) =< s(786)
s(823) =< s(734)* (1/3)+s(867)
s(824) =< s(734)* (1/5)+s(866)
s(825) =< s(734)* (1/5)+s(866)
s(823) =< s(734)* (1/5)+s(866)
s(828) =< s(865)
s(736) =< s(762)
s(736) =< aux(94)
s(736) =< s(760)
s(779) =< s(780)* (6/5)
s(737) =< s(760)
s(738) =< s(780)
s(739) =< s(779)
s(740) =< s(779)
s(738) =< s(779)
s(740) =< s(781)
s(738) =< s(781)
s(738) =< s(712)* (1/3)+s(780)
s(739) =< s(712)* (1/5)+s(779)
s(740) =< s(712)* (1/5)+s(779)
s(738) =< s(712)* (1/5)+s(779)
s(741) =< s(777)
s(742) =< s(776)
s(743) =< s(776)
s(741) =< s(776)
s(743) =< aux(125)
s(741) =< aux(125)
s(741) =< s(712)* (1/3)+s(777)
s(742) =< s(712)* (1/5)+s(776)
s(743) =< s(712)* (1/5)+s(776)
s(741) =< s(712)* (1/5)+s(776)
s(705) =< aux(91)
s(706) =< s(771)
s(707) =< s(771)
s(705) =< s(771)
s(707) =< s(762)
s(705) =< s(762)
s(708) =< s(762)
s(708) =< s(760)
s(705) =< s(709)* (1/3)+aux(91)
s(706) =< s(709)* (1/5)+s(771)
s(707) =< s(709)* (1/5)+s(771)
s(705) =< s(709)* (1/5)+s(771)
s(767) =< s(762)
s(750) =< s(762)
s(767) =< aux(125)
s(750) =< aux(125)
s(763) =< s(750)*aux(125)
s(766) =< s(767)*2
s(768) =< s(750)*aux(87)
s(764) =< s(768)* (4/5)
s(765) =< s(768)* (2/3)
s(751) =< s(768)
s(752) =< s(765)
s(753) =< s(764)
s(754) =< s(764)
s(752) =< s(764)
s(754) =< s(767)
s(752) =< s(767)
s(755) =< s(767)
s(756) =< s(766)
s(752) =< s(756)* (1/3)+s(765)
s(753) =< s(756)* (1/5)+s(764)
s(754) =< s(756)* (1/5)+s(764)
s(752) =< s(756)* (1/5)+s(764)
s(757) =< s(763)
s(466) =< aux(86)* (1/2)+1/2
s(783) =< s(728)*aux(86)
s(788) =< s(728)*s(466)
s(784) =< s(788)* (4/5)
s(785) =< s(788)* (2/3)
s(729) =< s(788)
s(730) =< s(785)
s(731) =< s(784)
s(732) =< s(784)
s(730) =< s(784)
s(732) =< s(787)
s(730) =< s(787)
s(730) =< s(734)* (1/3)+s(785)
s(731) =< s(734)* (1/5)+s(784)
s(732) =< s(734)* (1/5)+s(784)
s(730) =< s(734)* (1/5)+s(784)
s(735) =< s(783)
s(704) =< s(775)
s(744) =< aux(90)
s(745) =< s(758)
s(746) =< s(758)
s(744) =< s(758)
s(746) =< s(762)
s(744) =< s(762)
s(744) =< s(709)* (1/3)+aux(90)
s(745) =< s(709)* (1/5)+s(758)
s(746) =< s(709)* (1/5)+s(758)
s(744) =< s(709)* (1/5)+s(758)

  with precondition: [Out=0,V1>=1,V>=1,V+2*V1>=5] 

* Chain [[59,60],62]: 10*it(59)+2*s(704)+3*s(705)+3*s(706)+3*s(707)+4*s(708)+16*s(709)+128*s(710)+16*s(711)+60*s(712)+2*s(713)+4*s(714)+4*s(715)+2*s(716)+2*s(717)+2*s(718)+8*s(719)+4*s(720)+4*s(721)+4*s(722)+4*s(723)+4*s(724)+2*s(725)+2*s(726)+2*s(727)+6*s(728)+1*s(729)+1*s(730)+1*s(731)+1*s(732)+2*s(733)+6*s(734)+12*s(735)+2*s(736)+6*s(737)+2*s(738)+2*s(739)+2*s(740)+2*s(741)+2*s(742)+2*s(743)+1*s(744)+1*s(745)+1*s(746)+6*s(750)+2*s(751)+2*s(752)+2*s(753)+2*s(754)+2*s(755)+6*s(756)+24*s(757)+1*s(822)+1*s(823)+1*s(824)+1*s(825)+12*s(828)+1*s(877)+1*s(878)+1
  Such that:aux(88) =< V1/3+V/3
aux(126) =< V1+V
aux(127) =< V1+V+2
s(877) =< aux(126)
s(878) =< aux(127)
aux(83) =< aux(126)
it(59) =< aux(126)
aux(83) =< aux(127)
it(59) =< aux(127)
aux(93) =< aux(126)+1
aux(86) =< aux(126)
aux(89) =< aux(88)
aux(97) =< aux(126)+3
aux(87) =< aux(126)* (1/2)+1/2
s(791) =< aux(83)* (1/2)
s(781) =< aux(83)*2
aux(90) =< it(59)*aux(88)
aux(94) =< it(59)*aux(93)
s(762) =< it(59)*aux(86)
aux(91) =< it(59)*aux(89)
aux(100) =< it(59)*aux(97)
s(758) =< aux(90)* (6/5)
s(775) =< it(59)*aux(87)
s(760) =< aux(94)* (1/2)
s(771) =< aux(91)* (6/5)
s(776) =< aux(94)* (2/5)
s(777) =< aux(94)* (1/3)
s(780) =< aux(100)* (1/3)
s(789) =< aux(94)*2
s(710) =< s(762)
s(711) =< aux(83)
s(712) =< s(781)
s(713) =< s(762)
s(713) =< aux(94)
s(714) =< aux(94)
s(715) =< aux(94)
s(715) =< s(781)
s(714) =< aux(83)
s(794) =< s(781)* (1/2)
s(792) =< aux(100)* (6/5)
s(709) =< aux(94)
s(716) =< aux(100)
s(717) =< s(792)
s(718) =< s(792)
s(716) =< s(792)
s(718) =< s(781)
s(716) =< s(781)
s(719) =< s(781)
s(719) =< s(794)
s(716) =< s(712)* (1/3)+aux(100)
s(717) =< s(712)* (1/5)+s(792)
s(718) =< s(712)* (1/5)+s(792)
s(716) =< s(712)* (1/5)+s(792)
s(720) =< aux(83)
s(720) =< s(781)
s(790) =< aux(83)* (6/5)
s(721) =< s(791)
s(722) =< aux(83)
s(723) =< s(790)
s(724) =< s(790)
s(722) =< s(790)
s(724) =< s(781)
s(722) =< s(781)
s(722) =< s(712)* (1/3)+aux(83)
s(723) =< s(712)* (1/5)+s(790)
s(724) =< s(712)* (1/5)+s(790)
s(722) =< s(712)* (1/5)+s(790)
s(725) =< aux(94)
s(726) =< s(789)
s(727) =< s(789)
s(725) =< s(789)
s(727) =< aux(83)
s(725) =< aux(83)
s(725) =< s(712)* (1/3)+aux(94)
s(726) =< s(712)* (1/5)+s(789)
s(727) =< s(712)* (1/5)+s(789)
s(725) =< s(712)* (1/5)+s(789)
s(787) =< s(762)
s(728) =< s(762)
s(787) =< s(789)
s(728) =< s(789)
s(865) =< s(728)*aux(126)
s(786) =< s(787)*2
s(870) =< s(728)*aux(87)
s(866) =< s(870)* (4/5)
s(867) =< s(870)* (2/3)
s(822) =< s(870)
s(823) =< s(867)
s(824) =< s(866)
s(825) =< s(866)
s(823) =< s(866)
s(825) =< s(787)
s(823) =< s(787)
s(733) =< s(787)
s(734) =< s(786)
s(823) =< s(734)* (1/3)+s(867)
s(824) =< s(734)* (1/5)+s(866)
s(825) =< s(734)* (1/5)+s(866)
s(823) =< s(734)* (1/5)+s(866)
s(828) =< s(865)
s(736) =< s(762)
s(736) =< aux(94)
s(736) =< s(760)
s(779) =< s(780)* (6/5)
s(737) =< s(760)
s(738) =< s(780)
s(739) =< s(779)
s(740) =< s(779)
s(738) =< s(779)
s(740) =< s(781)
s(738) =< s(781)
s(738) =< s(712)* (1/3)+s(780)
s(739) =< s(712)* (1/5)+s(779)
s(740) =< s(712)* (1/5)+s(779)
s(738) =< s(712)* (1/5)+s(779)
s(741) =< s(777)
s(742) =< s(776)
s(743) =< s(776)
s(741) =< s(776)
s(743) =< aux(83)
s(741) =< aux(83)
s(741) =< s(712)* (1/3)+s(777)
s(742) =< s(712)* (1/5)+s(776)
s(743) =< s(712)* (1/5)+s(776)
s(741) =< s(712)* (1/5)+s(776)
s(705) =< aux(91)
s(706) =< s(771)
s(707) =< s(771)
s(705) =< s(771)
s(707) =< s(762)
s(705) =< s(762)
s(708) =< s(762)
s(708) =< s(760)
s(705) =< s(709)* (1/3)+aux(91)
s(706) =< s(709)* (1/5)+s(771)
s(707) =< s(709)* (1/5)+s(771)
s(705) =< s(709)* (1/5)+s(771)
s(767) =< s(762)
s(750) =< s(762)
s(767) =< aux(83)
s(750) =< aux(83)
s(763) =< s(750)*aux(126)
s(766) =< s(767)*2
s(768) =< s(750)*aux(87)
s(764) =< s(768)* (4/5)
s(765) =< s(768)* (2/3)
s(751) =< s(768)
s(752) =< s(765)
s(753) =< s(764)
s(754) =< s(764)
s(752) =< s(764)
s(754) =< s(767)
s(752) =< s(767)
s(755) =< s(767)
s(756) =< s(766)
s(752) =< s(756)* (1/3)+s(765)
s(753) =< s(756)* (1/5)+s(764)
s(754) =< s(756)* (1/5)+s(764)
s(752) =< s(756)* (1/5)+s(764)
s(757) =< s(763)
s(466) =< aux(86)* (1/2)+1/2
s(783) =< s(728)*aux(86)
s(788) =< s(728)*s(466)
s(784) =< s(788)* (4/5)
s(785) =< s(788)* (2/3)
s(729) =< s(788)
s(730) =< s(785)
s(731) =< s(784)
s(732) =< s(784)
s(730) =< s(784)
s(732) =< s(787)
s(730) =< s(787)
s(730) =< s(734)* (1/3)+s(785)
s(731) =< s(734)* (1/5)+s(784)
s(732) =< s(734)* (1/5)+s(784)
s(730) =< s(734)* (1/5)+s(784)
s(735) =< s(783)
s(704) =< s(775)
s(744) =< aux(90)
s(745) =< s(758)
s(746) =< s(758)
s(744) =< s(758)
s(746) =< s(762)
s(744) =< s(762)
s(744) =< s(709)* (1/3)+aux(90)
s(745) =< s(709)* (1/5)+s(758)
s(746) =< s(709)* (1/5)+s(758)
s(744) =< s(709)* (1/5)+s(758)

  with precondition: [Out=0,V1>=1,V>=1,V+V1>=3] 

* Chain [[59,60],61]: 10*it(59)+2*s(704)+3*s(705)+3*s(706)+3*s(707)+4*s(708)+16*s(709)+128*s(710)+16*s(711)+60*s(712)+2*s(713)+4*s(714)+4*s(715)+2*s(716)+2*s(717)+2*s(718)+8*s(719)+4*s(720)+4*s(721)+4*s(722)+4*s(723)+4*s(724)+2*s(725)+2*s(726)+2*s(727)+6*s(728)+1*s(729)+1*s(730)+1*s(731)+1*s(732)+2*s(733)+6*s(734)+12*s(735)+2*s(736)+6*s(737)+2*s(738)+2*s(739)+2*s(740)+2*s(741)+2*s(742)+2*s(743)+1*s(744)+1*s(745)+1*s(746)+6*s(750)+2*s(751)+2*s(752)+2*s(753)+2*s(754)+2*s(755)+6*s(756)+24*s(757)+1*s(822)+1*s(823)+1*s(824)+1*s(825)+12*s(828)+1*s(879)+1*s(880)+1
  Such that:aux(119) =< V1+V
aux(120) =< V1+V-2*Out
aux(88) =< V1/3+V/3
s(879) =< Out
s(880) =< Out+1
aux(83) =< aux(119)
it(59) =< aux(119)
aux(83) =< aux(120)
it(59) =< aux(120)
aux(93) =< aux(119)+1
aux(86) =< aux(119)
aux(89) =< aux(88)
aux(97) =< aux(119)+3
aux(87) =< aux(119)* (1/2)+1/2
s(791) =< aux(83)* (1/2)
s(781) =< aux(83)*2
aux(90) =< it(59)*aux(88)
aux(94) =< it(59)*aux(93)
s(762) =< it(59)*aux(86)
aux(91) =< it(59)*aux(89)
aux(100) =< it(59)*aux(97)
s(758) =< aux(90)* (6/5)
s(775) =< it(59)*aux(87)
s(760) =< aux(94)* (1/2)
s(771) =< aux(91)* (6/5)
s(776) =< aux(94)* (2/5)
s(777) =< aux(94)* (1/3)
s(780) =< aux(100)* (1/3)
s(789) =< aux(94)*2
s(710) =< s(762)
s(711) =< aux(83)
s(712) =< s(781)
s(713) =< s(762)
s(713) =< aux(94)
s(714) =< aux(94)
s(715) =< aux(94)
s(715) =< s(781)
s(714) =< aux(83)
s(794) =< s(781)* (1/2)
s(792) =< aux(100)* (6/5)
s(709) =< aux(94)
s(716) =< aux(100)
s(717) =< s(792)
s(718) =< s(792)
s(716) =< s(792)
s(718) =< s(781)
s(716) =< s(781)
s(719) =< s(781)
s(719) =< s(794)
s(716) =< s(712)* (1/3)+aux(100)
s(717) =< s(712)* (1/5)+s(792)
s(718) =< s(712)* (1/5)+s(792)
s(716) =< s(712)* (1/5)+s(792)
s(720) =< aux(83)
s(720) =< s(781)
s(790) =< aux(83)* (6/5)
s(721) =< s(791)
s(722) =< aux(83)
s(723) =< s(790)
s(724) =< s(790)
s(722) =< s(790)
s(724) =< s(781)
s(722) =< s(781)
s(722) =< s(712)* (1/3)+aux(83)
s(723) =< s(712)* (1/5)+s(790)
s(724) =< s(712)* (1/5)+s(790)
s(722) =< s(712)* (1/5)+s(790)
s(725) =< aux(94)
s(726) =< s(789)
s(727) =< s(789)
s(725) =< s(789)
s(727) =< aux(83)
s(725) =< aux(83)
s(725) =< s(712)* (1/3)+aux(94)
s(726) =< s(712)* (1/5)+s(789)
s(727) =< s(712)* (1/5)+s(789)
s(725) =< s(712)* (1/5)+s(789)
s(787) =< s(762)
s(728) =< s(762)
s(787) =< s(789)
s(728) =< s(789)
s(865) =< s(728)*aux(119)
s(786) =< s(787)*2
s(870) =< s(728)*aux(87)
s(866) =< s(870)* (4/5)
s(867) =< s(870)* (2/3)
s(822) =< s(870)
s(823) =< s(867)
s(824) =< s(866)
s(825) =< s(866)
s(823) =< s(866)
s(825) =< s(787)
s(823) =< s(787)
s(733) =< s(787)
s(734) =< s(786)
s(823) =< s(734)* (1/3)+s(867)
s(824) =< s(734)* (1/5)+s(866)
s(825) =< s(734)* (1/5)+s(866)
s(823) =< s(734)* (1/5)+s(866)
s(828) =< s(865)
s(736) =< s(762)
s(736) =< aux(94)
s(736) =< s(760)
s(779) =< s(780)* (6/5)
s(737) =< s(760)
s(738) =< s(780)
s(739) =< s(779)
s(740) =< s(779)
s(738) =< s(779)
s(740) =< s(781)
s(738) =< s(781)
s(738) =< s(712)* (1/3)+s(780)
s(739) =< s(712)* (1/5)+s(779)
s(740) =< s(712)* (1/5)+s(779)
s(738) =< s(712)* (1/5)+s(779)
s(741) =< s(777)
s(742) =< s(776)
s(743) =< s(776)
s(741) =< s(776)
s(743) =< aux(83)
s(741) =< aux(83)
s(741) =< s(712)* (1/3)+s(777)
s(742) =< s(712)* (1/5)+s(776)
s(743) =< s(712)* (1/5)+s(776)
s(741) =< s(712)* (1/5)+s(776)
s(705) =< aux(91)
s(706) =< s(771)
s(707) =< s(771)
s(705) =< s(771)
s(707) =< s(762)
s(705) =< s(762)
s(708) =< s(762)
s(708) =< s(760)
s(705) =< s(709)* (1/3)+aux(91)
s(706) =< s(709)* (1/5)+s(771)
s(707) =< s(709)* (1/5)+s(771)
s(705) =< s(709)* (1/5)+s(771)
s(767) =< s(762)
s(750) =< s(762)
s(767) =< aux(83)
s(750) =< aux(83)
s(763) =< s(750)*aux(119)
s(766) =< s(767)*2
s(768) =< s(750)*aux(87)
s(764) =< s(768)* (4/5)
s(765) =< s(768)* (2/3)
s(751) =< s(768)
s(752) =< s(765)
s(753) =< s(764)
s(754) =< s(764)
s(752) =< s(764)
s(754) =< s(767)
s(752) =< s(767)
s(755) =< s(767)
s(756) =< s(766)
s(752) =< s(756)* (1/3)+s(765)
s(753) =< s(756)* (1/5)+s(764)
s(754) =< s(756)* (1/5)+s(764)
s(752) =< s(756)* (1/5)+s(764)
s(757) =< s(763)
s(466) =< aux(86)* (1/2)+1/2
s(783) =< s(728)*aux(86)
s(788) =< s(728)*s(466)
s(784) =< s(788)* (4/5)
s(785) =< s(788)* (2/3)
s(729) =< s(788)
s(730) =< s(785)
s(731) =< s(784)
s(732) =< s(784)
s(730) =< s(784)
s(732) =< s(787)
s(730) =< s(787)
s(730) =< s(734)* (1/3)+s(785)
s(731) =< s(734)* (1/5)+s(784)
s(732) =< s(734)* (1/5)+s(784)
s(730) =< s(734)* (1/5)+s(784)
s(735) =< s(783)
s(704) =< s(775)
s(744) =< aux(90)
s(745) =< s(758)
s(746) =< s(758)
s(744) =< s(758)
s(746) =< s(762)
s(744) =< s(762)
s(744) =< s(709)* (1/3)+aux(90)
s(745) =< s(709)* (1/5)+s(758)
s(746) =< s(709)* (1/5)+s(758)
s(744) =< s(709)* (1/5)+s(758)

  with precondition: [Out>=1,V1>=Out,V>=Out,V+V1>=2*Out+1] 

* Chain [65]: 5*s(251)+4*s(252)+4*s(253)+4*s(254)+4*s(255)+17*s(256)+3*s(257)+1*s(290)+1*s(291)+1*s(292)+1*s(293)+1*s(298)+1*s(299)+1*s(300)+1*s(301)+2
  Such that:s(284) =< V1
s(285) =< V1+1
s(287) =< V1/3+V/3+2/3
aux(57) =< V1/2+1/2
aux(58) =< V1/3+V/3
aux(59) =< 2/5*V1+2/5*V
aux(60) =< V
aux(61) =< V+1
aux(62) =< V/2+1/2
s(290) =< s(284)
s(291) =< s(284)
s(291) =< s(285)
s(292) =< s(285)
s(293) =< s(285)
s(291) =< aux(57)
s(293) =< aux(61)
s(256) =< aux(61)
s(292) =< aux(62)
s(295) =< aux(61)* (1/2)
s(296) =< s(287)* (6/5)
s(251) =< aux(57)
s(298) =< s(287)
s(299) =< s(296)
s(300) =< s(296)
s(298) =< s(296)
s(300) =< aux(61)
s(298) =< aux(61)
s(301) =< aux(61)
s(301) =< s(295)
s(298) =< s(256)* (1/3)+s(287)
s(299) =< s(256)* (1/5)+s(296)
s(300) =< s(256)* (1/5)+s(296)
s(298) =< s(256)* (1/5)+s(296)
s(257) =< aux(60)
s(252) =< aux(58)
s(253) =< aux(59)
s(254) =< aux(59)
s(252) =< aux(59)
s(254) =< aux(60)
s(252) =< aux(60)
s(255) =< aux(60)
s(255) =< aux(62)
s(252) =< s(256)* (1/3)+aux(58)
s(253) =< s(256)* (1/5)+aux(59)
s(254) =< s(256)* (1/5)+aux(59)
s(252) =< s(256)* (1/5)+aux(59)

  with precondition: [Out=0,V1>=0,V>=0] 

* Chain [64]: 1
  with precondition: [V1=0,Out=0,V>=1] 

* Chain [63]: 1
  with precondition: [V=0,Out=0,V1>=1] 

* Chain [62]: 1*s(877)+1*s(878)+1
  Such that:s(877) =< V
s(878) =< V+1

  with precondition: [Out=0,V1=V,V1>=1] 

* Chain [61]: 1*s(879)+1*s(880)+1
  Such that:s(879) =< V
s(880) =< V+1

  with precondition: [V1=V,V1=Out,V1>=1] 



Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. non_recursive  : [equal/3]
1. recursive  : [fun/3]
2. recursive  : [game/4]
3. non_recursive  : [goal/4]
4. non_recursive  : [start/3]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into equal/3
1. SCC is partially evaluated into fun/3
2. SCC is partially evaluated into game/4
3. SCC is completely evaluated into other SCCs
4. SCC is partially evaluated into start/3

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations equal/3 
* CE 16 is refined into CE [17] 
* CE 15 is refined into CE [18] 
* CE 14 is refined into CE [19] 
* CE 13 is refined into CE [20] 


#### Refined cost equations equal/3 
* CE 17: equal(V1,V,Out) = 1
     [Out=1,V=1,V1=1] 
* CE 18: equal(V1,V,Out) = 1
     [Out=0,V=0,V1=1] 
* CE 19: equal(V1,V,Out) = 1
     [Out=0,V=1,V1=0] 
* CE 20: equal(V1,V,Out) = 1
     [Out=1,V=0,V1=0] 

### Cost equations --> "Loop" of equal/3 
* CEs [17] --> Loop 13 
* CEs [18] --> Loop 14 
* CEs [19] --> Loop 15 
* CEs [20] --> Loop 16 

#### Loops of equal/3 
* Loop 13: equal(V1,V,Out) [Out=1,V=1,V1=1] 
* Loop 14: equal(V1,V,Out) [Out=0,V=0,V1=1] 
* Loop 15: equal(V1,V,Out) [Out=0,V=1,V1=0] 
* Loop 16: equal(V1,V,Out) [Out=1,V=0,V1=0] 

### Ranking functions of CR equal(V1,V,Out) 

#### Partial ranking functions of CR equal(V1,V,Out) 


### Resulting Chains:equal(V1,V,Out) 
* [16]
* [15]
* [14]
* [13]


### Merging Chains  equal/3 into  External patterns of execution 
* [[16]] --> 1 
* [[15]] --> 2 
* [[14]] --> 3 
* [[13]] --> 4 


### Specialization of cost equations fun/3 
* CE 8 is refined into CE [21] 
* CE 7 is refined into CE [22] 
* CE 6 is refined into CE [23] 


#### Refined cost equations fun/3 
* CE 21: fun(V1,V,Out) = 0
     [V>=0,V1>=0,Out=0] 
* CE 22: fun(A,B,B) = 1
     [B>=0,A=0] 
* CE 23: fun(V1,V,Out) = 1+ fun(W1,V,X1)
     [V1+X1>=Out,Out>=X1+1,V>=0,V1+X1=Out+W1] 

### Cost equations --> "Loop" of fun/3 
* CEs [23] --> Loop 17 
* CEs [21] --> Loop 18 
* CEs [22] --> Loop 19 

#### Loops of fun/3 
* Loop 17: fun(V1,V,Out)->  fun(V1',V,Out')
                  [V1+Out'>=Out,Out>=Out'+1,V>=0,V1+Out'=Out+V1'] 
* Loop 18: fun(V1,V,Out) [V>=0,V1>=0,Out=0] 
* Loop 19: fun(A,B,B) [B>=0,A=0] 

### Ranking functions of CR fun(V1,V,Out) 
* RF of phase [17]: [V1]

#### Partial ranking functions of CR fun(V1,V,Out) 
* Partial RF of phase [17]:
  - RF of loop [17:1]:
    V1


### Resulting Chains:fun(V1,V,Out) 
* [[17],19]
* [[17],18]
* [19]
* [18]


### Merging Chains  fun/3 into  External patterns of execution 
* [[19]] --> 1 
* [[18]] --> 2 
* [[19,[17]]] --> 3 
* [[18,[17]]] --> 4 


### Specialization of cost equations game/4 
* CE 12 is refined into CE [24] 
* CE 11 is refined into CE [25,26,27,28] 
* CE 9 is refined into CE [29] 
* CE 10 is refined into CE [30] 


#### Refined cost equations game/4 
* CE 24: game(V1,V,V8,Out) = 0
     [V8>=0,V>=0,V1>=0,Out=0] 
* CE 25: game(A,B,C,B) = 1+ fun(D,B,B):1
     [B>=0,D=0,C=0,A=0] 
* CE 26: game(V1,V,V8,Out) = 1+ fun(V1,V,W8):2
     [V>=0,V1>=0,W8=0,Out=0,V8=0] 
* CE 27: game(V1,V,V8,Out) = 1+ fun(V1,W8,Out):3
     [Out>=V1,V1>=1,Out=V1+W8,Out=V1+V,V8=0] 
* CE 28: game(V1,V,V8,Out) = 1+ fun(V1,V,Out):4
     [V1>=Out,Out>=1,V>=0,V8=0] 
* CE 29: game(V1,V,V8,Out) = 1+ game(W8,X8,Y8,Out)
     [W8+X8>=V,V>=X8+1,Y8>=0,X8>=0,V1+V=W8+X8,Y8+1=V8] 
* CE 30: game(V1,V,V8,Out) = 1+ game(V,V1,W8,Out)
     [W8>=0,V>=0,V1>=0,W8+2=V8] 

### Cost equations --> "Loop" of game/4 
* CEs [29] --> Loop 20 
* CEs [30] --> Loop 21 
* CEs [28] --> Loop 22 
* CEs [27] --> Loop 23 
* CEs [24,26] --> Loop 24 
* CEs [25] --> Loop 25 

#### Loops of game/4 
* Loop 20: game(V1,V,V8,Out)->  game(V1',V',V8',Out)
                  [V1+V>=V1',V1'>=V1+1,V8>=1,V1>=0,V1+V=V1'+V',V8=V8'+1] 
* Loop 21: game(V1,V,V8,Out)->  game(V,V1,A',Out)
                  [V8>=2,V>=0,V1>=0,V8=A'+2] 
* Loop 22: game(V1,V,V8,Out) [V1>=Out,Out>=1,V>=0,V8=0] 
* Loop 23: game(V1,V,V8,Out) [V>=0,V1>=1,V1+V=Out,V8=0] 
* Loop 24: game(V1,V,V8,Out) [V8>=0,V>=0,V1>=0,Out=0] 
* Loop 25: game(A,B,C,B) [B>=0,C=0,A=0] 

### Ranking functions of CR game(V1,V,V8,Out) 
* RF of phase [20,21]: [V1+V+V8-1,V8]

#### Partial ranking functions of CR game(V1,V,V8,Out) 
* Partial RF of phase [20,21]:
  - RF of loop [20:1]:
    V depends on loops [21:1] 
    V8
  - RF of loop [21:1]:
    V8-1


### Resulting Chains:game(V1,V,V8,Out) 
* [[20,21],25]
* [[20,21],24]
* [[20,21],23]
* [[20,21],22]
* [25]
* [24]
* [23]
* [22]


### Merging Chains  game/4 into  External patterns of execution 
* [[25]] --> 1 
* [[23]] --> 2 
* [[22]] --> 3 
* [[24],[24,[20,21]]] --> 4 
* [[22,[20,21]],[23,[20,21]]] --> 5 
* [[25,[20,21]]] --> 6 


### Specialization of cost equations start/3 
* CE 2 is refined into CE [31,32,33,34] 
* CE 3 is refined into CE [35,36,37,38,39,40] 
* CE 4 is refined into CE [41,42,43,44] 
* CE 5 is refined into CE [45,46,47,48,49,50] 


#### Refined cost equations start/3 
* CE 31: start(V1,V,V8) = 0+ fun(W8,V,V):1
     [V>=0,W8=0,V1=0] 
* CE 32: start(V1,V,V8) = 0+ fun(V1,V,W8):2
     [V>=0,V1>=0,W8=0] 
* CE 33: start(V1,V,V8) = 0+ fun(V1,W8,X8):3
     [X8>=V1,V1>=1,X8=V1+W8,X8=V1+V] 
* CE 34: start(V1,V,V8) = 0+ fun(V1,V,W8):4
     [V1>=W8,W8>=1,V>=0] 
* CE 35: start(V1,V,V8) = 0+ game(W8,V,X8,V):1
     [V>=0,X8=0,W8=0,V8=0,V1=0] 
* CE 36: start(V1,V,V8) = 0+ game(V1,W8,X8,Y8):2
     [Y8>=V1,V1>=1,Y8=V1+W8,Y8=V1+V,X8=0,V8=0] 
* CE 37: start(V1,V,V8) = 0+ game(V1,V,W8,X8):3
     [V1>=X8,X8>=1,V>=0,W8=0,V8=0] 
* CE 38: start(V1,V,V8) = 0+ game(V1,V,V8,W8):4
     [V8>=0,V>=0,V1>=0,W8=0] 
* CE 39: start(V1,V,V8) = 0+ game(V1,V,V8,W8):5
     [V1+V>=W8,V8+2*V>=3,W8>=1,V8>=1,V>=0,V1>=0] 
* CE 40: start(V1,V,V8) = 0+ game(V1,W8,V8,X8):6
     [X8>=V1,V8>=2,V1>=0,X8=V1+W8,X8=V1+V] 
* CE 41: start(V1,V,V8) = 0+ equal(W8,X8,Y8):1
     [Y8=1,X8=0,W8=0,V=0,V1=0] 
* CE 42: start(V1,V,V8) = 0+ equal(W8,X8,Y8):2
     [Y8=0,X8=1,W8=0,V=1,V1=0] 
* CE 43: start(V1,V,V8) = 0+ equal(W8,X8,Y8):3
     [Y8=0,X8=0,W8=1,V=0,V1=1] 
* CE 44: start(V1,V,V8) = 0+ equal(W8,X8,Y8):4
     [Y8=1,X8=1,W8=1,V=1,V1=1] 
* CE 45: start(V1,V,V8) = 1+ game(W8,V,X8,V):1
     [V>=0,X8=0,W8=0,V8=0,V1=0] 
* CE 46: start(V1,V,V8) = 1+ game(V1,W8,X8,Y8):2
     [Y8>=V1,V1>=1,Y8=V1+W8,Y8=V1+V,X8=0,V8=0] 
* CE 47: start(V1,V,V8) = 1+ game(V1,V,W8,X8):3
     [V1>=X8,X8>=1,V>=0,W8=0,V8=0] 
* CE 48: start(V1,V,V8) = 1+ game(V1,V,V8,W8):4
     [V8>=0,V>=0,V1>=0,W8=0] 
* CE 49: start(V1,V,V8) = 1+ game(V1,V,V8,W8):5
     [V1+V>=W8,V8+2*V>=3,W8>=1,V8>=1,V>=0,V1>=0] 
* CE 50: start(V1,V,V8) = 1+ game(V1,W8,V8,X8):6
     [X8>=V1,V8>=2,V1>=0,X8=V1+W8,X8=V1+V] 

### Cost equations --> "Loop" of start/3 
* CEs [36,37,46,47] --> Loop 26 
* CEs [44] --> Loop 27 
* CEs [43] --> Loop 28 
* CEs [35,45] --> Loop 29 
* CEs [42] --> Loop 30 
* CEs [31,32,33,34,38,39,40,41,48,49,50] --> Loop 31 

#### Loops of start/3 
* Loop 26: start(V1,V,V8) [V>=0,V1>=1,V8=0] 
* Loop 27: start(V1,V,V8) [V=1,V1=1] 
* Loop 28: start(V1,V,V8) [V=0,V1=1] 
* Loop 29: start(V1,V,V8) [V>=0,V8=0,V1=0] 
* Loop 30: start(V1,V,V8) [V=1,V1=0] 
* Loop 31: start(V1,V,V8) [V>=0,V1>=0] 

### Ranking functions of CR start(V1,V,V8) 

#### Partial ranking functions of CR start(V1,V,V8) 


### Resulting Chains:start(V1,V,V8) 
* [31]
* [30]
* [29]
* [28]
* [27]
* [26]


### Merging Chains  start/3 into  External patterns of execution 
* [[30],[31]] --> 1 
* [[29]] --> 2 
* [[28]] --> 3 
* [[27]] --> 4 
* [[26]] --> 5 


Computing Bounds
=====================================

#### Cost of chains of equal(V1,V,Out):
* Chain [16]: 1
  with precondition: [V1=0,V=0,Out=1] 

* Chain [15]: 1
  with precondition: [V1=0,V=1,Out=0] 

* Chain [14]: 1
  with precondition: [V1=1,V=0,Out=0] 

* Chain [13]: 1
  with precondition: [V1=1,V=1,Out=1] 


#### Cost of loops [17] 

 * loop 17:fun(V1,V,Out) -> [fun(V1',V',Out')] 
1
#### Cost of phase [17]:fun(V1,V,Out) -> [fun(V1',V',Out')] 
1*it(17)+0
  Such that:it(17) =< V1
it(17) =< V1-V1'

#### Cost of phase [17]:fun(V1,V,Out) -> [fun(V1',V',Out')] 
1*it(17)+0
  Such that:it(17) =< V1
it(17) =< V1-V1'

#### Cost of chains of fun(V1,V,Out):
* Chain [[17],19]: 1*it(17)+1
  Such that:it(17) =< -V+Out

  with precondition: [V+V1=Out,V1>=1,V>=0] 

* Chain [[17],18]: 1*it(17)+0
  Such that:it(17) =< Out

  with precondition: [V>=0,Out>=1,V1>=Out] 

* Chain [19]: 1
  with precondition: [V1=0,V=Out,V>=0] 

* Chain [18]: 0
  with precondition: [Out=0,V1>=0,V>=0] 


#### Cost of loops [20,21] 

 * loop 20:game(V1,V,V8,Out) -> [game(V1',V',V8',Out')] 
1
 * loop 21:game(V1,V,V8,Out) -> [game(V1',V',V8',Out')] 
1
#### Cost of phase [20,21]:game(V1,V,V8,Out) -> [game(V1',V',V8',Out')] 
1*it(20)+1*it(21)+0
  Such that:aux(5) =< V1+V
aux(2) =< V
aux(4) =< V-V'
aux(7) =< V1+V+V8
aux(8) =< V1+V+V8-V1'-V'-V8'
aux(9) =< V8
aux(10) =< V8-V8'
it(20) =< aux(7)
it(21) =< aux(7)
it(20) =< aux(8)
it(21) =< aux(8)
it(20) =< aux(9)
it(21) =< aux(9)
it(20) =< aux(10)
it(21) =< aux(10)
aux(1) =< it(21)*aux(5)
it(20) =< aux(1)+aux(2)
it(20) =< aux(1)+aux(4)

#### Cost of phase [20,21]:game(V1,V,V8,Out) -> [game(V1',V',V8',Out')] 
1*it(20)+1*it(21)+0
  Such that:aux(5) =< V1+V
aux(2) =< V
aux(4) =< V-V'
aux(7) =< V1+V+V8
aux(8) =< V1+V+V8-V1'-V'-V8'
aux(9) =< V8
aux(10) =< V8-V8'
it(20) =< aux(7)
it(21) =< aux(7)
it(20) =< aux(8)
it(21) =< aux(8)
it(20) =< aux(9)
it(21) =< aux(9)
it(20) =< aux(10)
it(21) =< aux(10)
aux(1) =< it(21)*aux(5)
it(20) =< aux(1)+aux(2)
it(20) =< aux(1)+aux(4)

#### Cost of phase [20,21]:game(V1,V,V8,Out) -> [game(V1',V',V8',Out')] 
1*it(20)+1*it(21)+0
  Such that:aux(5) =< V1+V
aux(2) =< V
aux(4) =< V-V'
aux(7) =< V1+V+V8
aux(8) =< V1+V+V8-V1'-V'-V8'
aux(9) =< V8
aux(10) =< V8-V8'
it(20) =< aux(7)
it(21) =< aux(7)
it(20) =< aux(8)
it(21) =< aux(8)
it(20) =< aux(9)
it(21) =< aux(9)
it(20) =< aux(10)
it(21) =< aux(10)
aux(1) =< it(21)*aux(5)
it(20) =< aux(1)+aux(2)
it(20) =< aux(1)+aux(4)

#### Cost of phase [20,21]:game(V1,V,V8,Out) -> [game(V1',V',V8',Out')] 
1*it(20)+1*it(21)+0
  Such that:aux(5) =< V1+V
aux(2) =< V
aux(4) =< V-V'
aux(7) =< V1+V+V8
aux(8) =< V1+V+V8-V1'-V'-V8'
aux(9) =< V8
aux(10) =< V8-V8'
it(20) =< aux(7)
it(21) =< aux(7)
it(20) =< aux(8)
it(21) =< aux(8)
it(20) =< aux(9)
it(21) =< aux(9)
it(20) =< aux(10)
it(21) =< aux(10)
aux(1) =< it(21)*aux(5)
it(20) =< aux(1)+aux(2)
it(20) =< aux(1)+aux(4)

#### Cost of chains of game(V1,V,V8,Out):
* Chain [[20,21],25]: 1*it(20)+1*it(21)+2
  Such that:aux(4) =< -V1
aux(5) =< V1+V
aux(7) =< V1+V+V8
aux(2) =< V
aux(11) =< V8
it(20) =< aux(7)
it(21) =< aux(7)
it(20) =< aux(11)
it(21) =< aux(11)
aux(1) =< it(21)*aux(5)
it(20) =< aux(1)+aux(2)
it(20) =< aux(1)+aux(4)

  with precondition: [V+V1=Out,V1>=0,V>=0,V8>=2] 

* Chain [[20,21],24]: 1*it(20)+1*it(21)+1
  Such that:aux(5) =< V1+V
aux(7) =< V1+V+V8
aux(12) =< V
aux(13) =< V8
it(20) =< aux(7)
it(21) =< aux(7)
it(20) =< aux(13)
it(21) =< aux(13)
aux(1) =< it(21)*aux(5)
it(20) =< aux(1)+aux(12)

  with precondition: [Out=0,V1>=0,V>=0,V8>=1,V+V8>=2] 

* Chain [[20,21],23]: 1*it(20)+1*it(21)+1*s(1)+2
  Such that:aux(2) =< -V1+Out
aux(4) =< V
aux(7) =< V8+Out
aux(14) =< V8
aux(15) =< Out
s(1) =< aux(15)
it(20) =< aux(7)
it(21) =< aux(7)
it(20) =< aux(14)
it(21) =< aux(14)
aux(1) =< it(21)*aux(15)
it(20) =< aux(1)+aux(2)
it(20) =< aux(1)+aux(4)

  with precondition: [V+V1=Out,V1>=0,V>=0,V8>=1,V+V1>=1,V8+2*V>=3] 

* Chain [[20,21],22]: 1*it(20)+1*it(21)+1*s(2)+1
  Such that:aux(7) =< V1+V+V8
aux(16) =< V1+V
aux(17) =< V
aux(18) =< V8
s(2) =< aux(16)
it(20) =< aux(7)
it(21) =< aux(7)
it(20) =< aux(18)
it(21) =< aux(18)
aux(1) =< it(21)*aux(16)
it(20) =< aux(1)+aux(17)

  with precondition: [V1>=0,V>=0,V8>=1,Out>=1,V8+2*V>=3,V+V1>=Out] 

* Chain [25]: 2
  with precondition: [V1=0,V8=0,V=Out,V>=0] 

* Chain [24]: 1
  with precondition: [Out=0,V1>=0,V>=0,V8>=0] 

* Chain [23]: 1*s(1)+2
  Such that:s(1) =< V1

  with precondition: [V8=0,V+V1=Out,V1>=1,V>=0] 

* Chain [22]: 1*s(2)+1
  Such that:s(2) =< V1

  with precondition: [V8=0,V>=0,Out>=1,V1>=Out] 


#### Cost of chains of start(V1,V,V8):
* Chain [31]: 2*s(27)+6*s(33)+8*s(34)+4*s(43)+2*s(56)+3
  Such that:aux(27) =< -V1
aux(28) =< V1
aux(29) =< V1+V
aux(30) =< V1+V+V8
aux(31) =< V
aux(32) =< V8
s(27) =< aux(28)
s(56) =< aux(30)
s(34) =< aux(30)
s(56) =< aux(32)
s(34) =< aux(32)
s(35) =< s(34)*aux(29)
s(56) =< s(35)+aux(31)
s(56) =< s(35)+aux(27)
s(33) =< aux(30)
s(33) =< aux(32)
s(33) =< s(35)+aux(31)
s(43) =< aux(29)

  with precondition: [V1>=0,V>=0] 

* Chain [30]: 1
  with precondition: [V1=0,V=1] 

* Chain [29]: 3
  with precondition: [V1=0,V8=0,V>=0] 

* Chain [28]: 1
  with precondition: [V1=1,V=0] 

* Chain [27]: 1
  with precondition: [V1=1,V=1] 

* Chain [26]: 4*s(89)+3
  Such that:aux(33) =< V1
s(89) =< aux(33)

  with precondition: [V8=0,V1>=1,V>=0] 


Closed-form bounds of start(V1,V,V8): 
-------------------------------------
* Chain [31] with precondition: [V1>=0,V>=0] 
    - Upper bound: 6*V1+4*V+3+nat(V1+V+V8)*16 
    - Complexity: n 
* Chain [30] with precondition: [V1=0,V=1] 
    - Upper bound: 1 
    - Complexity: constant 
* Chain [29] with precondition: [V1=0,V8=0,V>=0] 
    - Upper bound: 3 
    - Complexity: constant 
* Chain [28] with precondition: [V1=1,V=0] 
    - Upper bound: 1 
    - Complexity: constant 
* Chain [27] with precondition: [V1=1,V=1] 
    - Upper bound: 1 
    - Complexity: constant 
* Chain [26] with precondition: [V8=0,V1>=1,V>=0] 
    - Upper bound: 4*V1+3 
    - Complexity: n 

### Maximum cost of start(V1,V,V8): 2*V1+max([2*V1,4*V1+4*V+nat(V1+V+V8)*16])+3 
Asymptotic class: n 

Time statistics: 
-------------------------------------
* Partial evaluation computed in 36 ms.
* Invariants computed in 117 ms.
   - Backward Invariants 75 ms.
   - Transitive Invariants 15 ms.
* Refinement performed in 216 ms.
* Termination proved in 23 ms.
* Upper bounds computed in 391 ms.
   - Equation cost structures 160 ms.
   - Phase cost structures 75 ms.
   - Chain cost structures 138 ms.
   - Solving cost expressions 6 ms.
* Total analysis performed in 862 ms.


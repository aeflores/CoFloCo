
Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. recursive  : [foldl/3]
1. non_recursive  : [op/3]
2. recursive [non_tail] : [foldr/3]
3. non_recursive  : [fold/3]
4. non_recursive  : [notEmpty/2]
5. non_recursive  : [start/2]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into foldl/3
1. SCC is partially evaluated into op/3
2. SCC is partially evaluated into foldr/3
3. SCC is partially evaluated into fold/3
4. SCC is partially evaluated into notEmpty/2
5. SCC is partially evaluated into start/2

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations foldl/3 
* CE 10 is refined into CE [19] 
* CE 9 is refined into CE [20] 
* CE 7 is refined into CE [21] 
* CE 8 is refined into CE [22] 


#### Refined cost equations foldl/3 
* CE 19: foldl(V1,V,Out) = 0
     [V>=0,V1>=0,Out=0] 
* CE 20: foldl(A,B,A) = 1
     [A>=0,B=0] 
* CE 21: foldl(V1,V,Out) = 1+ foldl(W1,X1,Out)
     [X1>=0,V1>=0,V1+1=W1,X1+2=V] 
* CE 22: foldl(V1,V,Out) = 1+ foldl(W1,X1,Out)
     [V>=X1+1,X1>=0,V=W1+X1,V1=1] 

### Cost equations --> "Loop" of foldl/3 
* CEs [21] --> Loop 14 
* CEs [22] --> Loop 15 
* CEs [19] --> Loop 16 
* CEs [20] --> Loop 17 

#### Loops of foldl/3 
* Loop 14: foldl(V1,V,Out)->  foldl(V1',V',Out)
                  [V>=2,V1>=0,V=V'+2,V1+1=V1'] 
* Loop 15: foldl(V1,V,Out)->  foldl(V1',V',Out)
                  [V>=V1',V1'>=1,V1'+V'=V,V1=1] 
* Loop 16: foldl(V1,V,Out) [V>=0,V1>=0,Out=0] 
* Loop 17: foldl(A,B,A) [A>=0,B=0] 

### Ranking functions of CR foldl(V1,V,Out) 
* RF of phase [14,15]: [V,V1+V-1]

#### Partial ranking functions of CR foldl(V1,V,Out) 
* Partial RF of phase [14,15]:
  - RF of loop [14:1]:
    V/2-1/2
  - RF of loop [15:1]:
    V
    V1+V-1


### Resulting Chains:foldl(V1,V,Out) 
* [[14,15],17]
* [[14,15],16]
* [17]
* [16]


### Merging Chains  foldl/3 into  External patterns of execution 
* [[17]] --> 1 
* [[16],[16,[14,15]]] --> 2 
* [[17,[14,15]]] --> 3 


### Specialization of cost equations op/3 
* CE 17 is refined into CE [23] 
* CE 15 is refined into CE [24] 
* CE 16 is refined into CE [25] 


#### Refined cost equations op/3 
* CE 23: op(V1,V,Out) = 0
     [V>=0,V1>=0,Out=0] 
* CE 24: op(V1,V,Out) = 1
     [V1>=0,V1+1=Out,V=1] 
* CE 25: op(V1,V,Out) = 1
     [V>=0,V+1=Out,V1=1] 

### Cost equations --> "Loop" of op/3 
* CEs [23] --> Loop 18 
* CEs [24] --> Loop 19 
* CEs [25] --> Loop 20 

#### Loops of op/3 
* Loop 18: op(V1,V,Out) [V>=0,V1>=0,Out=0] 
* Loop 19: op(V1,V,Out) [V1>=0,V1+1=Out,V=1] 
* Loop 20: op(V1,V,Out) [V>=0,V+1=Out,V1=1] 

### Ranking functions of CR op(V1,V,Out) 

#### Partial ranking functions of CR op(V1,V,Out) 


### Resulting Chains:op(V1,V,Out) 
* [20]
* [19]
* [18]


### Merging Chains  op/3 into  External patterns of execution 
* [[20]] --> 1 
* [[19]] --> 2 
* [[18]] --> 3 


### Specialization of cost equations foldr/3 
* CE 12 is refined into CE [26] 
* CE 11 is refined into CE [27,28,29] 


#### Refined cost equations foldr/3 
* CE 26: foldr(A,B,A) = 1
     [A>=0,B=0] 
* CE 27: foldr(V1,V,Out) = 1+ foldr(V1,W1,X1)+ op(Y1,Z1,Out):1
     [W1>=0,Out>=1,V1>=0,Out=X1+1,Out=Z1+1,W1+2=V,Y1=1] 
* CE 28: foldr(V1,V,Out) = 1+ foldr(V1,W1,X1)+ op(Y1,Z1,Out):2
     [W1>=0,Out>=1,V1>=0,Out+W1=V,Out=Y1+1,X1=1,Z1=1] 
* CE 29: foldr(V1,V,Out) = 1+ foldr(V1,W1,X1)+ op(Y1,X1,Z1):3
     [W1>=0,X1>=0,Y1>=0,V1>=0,Y1+W1+1=V,Z1=0,Out=0] 

### Cost equations --> "Loop" of foldr/3 
* CEs [27] --> Loop 21 
* CEs [28] --> Loop 22 
* CEs [29] --> Loop 23 
* CEs [26] --> Loop 24 

#### Loops of foldr/3 
* Loop 21: foldr(V1,V,Out)->  foldr(V1,V',Out')
                  [Out>=1,V>=2,V1>=0,Out=Out'+1,V=V'+2] 
* Loop 22: foldr(V1,V,Out)->  foldr(V1,V',Out')
                  [V>=Out,Out>=1,V1>=0,Out+V'=V,Out'=1] 
* Loop 23: foldr(V1,V,Out)->  foldr(V1,V',Out')
                  [V>=V'+1,Out'>=0,V'>=0,V1>=0,Out=0] 
* Loop 24: foldr(A,B,A) [A>=0,B=0] 

### Ranking functions of CR foldr(V1,V,Out) 
* RF of phase [21,22,23]: [V]

#### Partial ranking functions of CR foldr(V1,V,Out) 
* Partial RF of phase [21,22,23]:
  - RF of loop [21:1]:
    V-1
  - RF of loop [22:1,23:1]:
    V


### Resulting Chains:foldr(V1,V,Out) 
* [[21,22,23],24]
* [24]


### Merging Chains  foldr/3 into  External patterns of execution 
* [[24]] --> 1 
* [[24,[21,22,23]]] --> 2 


### Specialization of cost equations fold/3 
* CE 18 is refined into CE [30,31,32,33] 


#### Refined cost equations fold/3 
* CE 30: fold(V1,V,Out) = 1+ foldl(V1,W1,V1):1+ foldr(V1,X1,V1):1
     [V1>=0,2*V1+2=Out,X1=0,W1=0,V=0] 
* CE 31: fold(V1,V,Out) = 1+ foldl(V1,W1,X1):2+ foldr(V1,Y1,V1):1
     [V1>=0,V1+2=Out,Y1=0,X1=0,W1=0,V=0] 
* CE 32: fold(V1,V,Out) = 1+ foldl(V1,V,W1):2+ foldr(V1,V,X1):2
     [V1+V>=X1+1,X1>=0,V>=1,V1>=0,X1+2=Out,W1=0] 
* CE 33: fold(V1,V,Out) = 1+ foldl(V1,V,W1):3+ foldr(V1,V,X1):2
     [V1+V>=X1+1,V1+V>=W1+1,W1>=V1,X1>=0,V1>=0,W1>=1,W1+X1+2=Out] 

### Cost equations --> "Loop" of fold/3 
* CEs [33] --> Loop 25 
* CEs [32] --> Loop 26 
* CEs [30] --> Loop 27 
* CEs [31] --> Loop 28 

#### Loops of fold/3 
* Loop 25: fold(V1,V,Out) [2*V1+2*V>=Out,V1+V>=2,Out>=V1+2,Out>=3,V>=1,V1>=0] 
* Loop 26: fold(V1,V,Out) [V1+V+1>=Out,Out>=2,V>=1,V1>=0] 
* Loop 27: fold(V1,V,Out) [V1>=0,2*V1+2=Out,V=0] 
* Loop 28: fold(V1,V,Out) [V1>=0,V1+2=Out,V=0] 

### Ranking functions of CR fold(V1,V,Out) 

#### Partial ranking functions of CR fold(V1,V,Out) 


### Resulting Chains:fold(V1,V,Out) 
* [28]
* [27]
* [26]
* [25]


### Merging Chains  fold/3 into  External patterns of execution 
* [[28]] --> 1 
* [[27]] --> 2 
* [[26]] --> 3 
* [[25]] --> 4 


### Specialization of cost equations notEmpty/2 
* CE 13 is refined into CE [34] 
* CE 14 is refined into CE [35] 


#### Refined cost equations notEmpty/2 
* CE 34: notEmpty(V1,Out) = 1
     [V1>=1,Out=1] 
* CE 35: notEmpty(V1,Out) = 1
     [Out=0,V1=0] 

### Cost equations --> "Loop" of notEmpty/2 
* CEs [34] --> Loop 29 
* CEs [35] --> Loop 30 

#### Loops of notEmpty/2 
* Loop 29: notEmpty(V1,Out) [V1>=1,Out=1] 
* Loop 30: notEmpty(V1,Out) [Out=0,V1=0] 

### Ranking functions of CR notEmpty(V1,Out) 

#### Partial ranking functions of CR notEmpty(V1,Out) 


### Resulting Chains:notEmpty(V1,Out) 
* [30]
* [29]


### Merging Chains  notEmpty/2 into  External patterns of execution 
* [[30]] --> 1 
* [[29]] --> 2 


### Specialization of cost equations start/2 
* CE 2 is refined into CE [36,37,38] 
* CE 3 is refined into CE [39,40] 
* CE 4 is refined into CE [41,42] 
* CE 5 is refined into CE [43,44,45] 
* CE 6 is refined into CE [46,47,48,49] 


#### Refined cost equations start/2 
* CE 36: start(V1,V) = 0+ foldl(V1,W1,V1):1
     [V1>=0,W1=0,V=0] 
* CE 37: start(V1,V) = 0+ foldl(V1,V,W1):2
     [V>=0,V1>=0,W1=0] 
* CE 38: start(V1,V) = 0+ foldl(V1,V,W1):3
     [V1+V>=W1+1,W1>=V1,W1>=1,V1>=0] 
* CE 39: start(V1,V) = 0+ foldr(V1,W1,V1):1
     [V1>=0,W1=0,V=0] 
* CE 40: start(V1,V) = 0+ foldr(V1,V,W1):2
     [V1+V>=W1+1,W1>=0,V>=1,V1>=0] 
* CE 41: start(V1,V) = 0+ notEmpty(W1,X1):1
     [X1=0,W1=0,V1=0] 
* CE 42: start(V1,V) = 0+ notEmpty(V1,W1):2
     [V1>=1,W1=1] 
* CE 43: start(V1,V) = 0+ op(W1,X1,Y1):1
     [Y1>=1,Y1=X1+1,Y1=V+1,W1=1,V1=1] 
* CE 44: start(V1,V) = 0+ op(W1,X1,Y1):2
     [Y1>=1,Y1=W1+1,Y1=V1+1,X1=1,V=1] 
* CE 45: start(V1,V) = 0+ op(V1,V,W1):3
     [V>=0,V1>=0,W1=0] 
* CE 46: start(V1,V) = 0+ fold(W1,X1,Y1):1
     [Y1>=2,Y1=W1+2,Y1=V1+2,X1=0,V=0] 
* CE 47: start(V1,V) = 0+ fold(W1,X1,Y1):2
     [Y1>=2,Y1=2*W1+2,Y1=2*V1+2,X1=0,V=0] 
* CE 48: start(V1,V) = 0+ fold(V1,V,W1):3
     [V1+V+1>=W1,W1>=2,V>=1,V1>=0] 
* CE 49: start(V1,V) = 0+ fold(V1,V,W1):4
     [2*V1+2*V>=W1,V1+V>=2,W1>=V1+2,W1>=3,V>=1,V1>=0] 

### Cost equations --> "Loop" of start/2 
* CEs [42] --> Loop 31 
* CEs [44] --> Loop 32 
* CEs [36,39,46,47] --> Loop 33 
* CEs [37,38,40,43,45,48,49] --> Loop 34 
* CEs [41] --> Loop 35 

#### Loops of start/2 
* Loop 31: start(V1,V) [V1>=1] 
* Loop 32: start(V1,V) [V1>=0,V=1] 
* Loop 33: start(V1,V) [V1>=0,V=0] 
* Loop 34: start(V1,V) [V>=0,V1>=0] 
* Loop 35: start(V1,V) [V1=0] 

### Ranking functions of CR start(V1,V) 

#### Partial ranking functions of CR start(V1,V) 


### Resulting Chains:start(V1,V) 
* [35]
* [34]
* [33]
* [32]
* [31]


### Merging Chains  start/2 into  External patterns of execution 
* [[35]] --> 1 
* [[33],[34]] --> 2 
* [[32]] --> 3 
* [[31]] --> 4 


Computing Bounds
=====================================

#### Cost of loops [14,15] 

 * loop 14:foldl(V1,V,Out) -> [foldl(V1',V',Out')] 
1
 * loop 15:foldl(V1,V,Out) -> [foldl(V1',V',Out')] 
1
#### Cost of phase [14,15]:foldl(V1,V,Out) -> [foldl(V1',V',Out')] 
1*it(14)+1*it(15)+0
  Such that:it(14) =< V/2
it(14) =< V/2-V'/2
aux(1) =< V1+V
aux(2) =< V1+V-V1'-V'
aux(3) =< V
aux(4) =< V-V'
it(14) =< aux(1)
it(15) =< aux(1)
it(14) =< aux(2)
it(15) =< aux(2)
it(14) =< aux(3)
it(15) =< aux(3)
it(14) =< aux(4)
it(15) =< aux(4)

#### Cost of phase [14,15]:foldl(V1,V,Out) -> [foldl(V1',V',Out')] 
1*it(14)+1*it(15)+0
  Such that:it(14) =< V/2
it(14) =< V/2-V'/2
aux(1) =< V1+V
aux(2) =< V1+V-V1'-V'
aux(3) =< V
aux(4) =< V-V'
it(14) =< aux(1)
it(15) =< aux(1)
it(14) =< aux(2)
it(15) =< aux(2)
it(14) =< aux(3)
it(15) =< aux(3)
it(14) =< aux(4)
it(15) =< aux(4)

#### Cost of chains of foldl(V1,V,Out):
* Chain [[14,15],17]: 1*it(14)+1*it(15)+1
  Such that:aux(1) =< V1+V
aux(2) =< V1+V-Out
it(14) =< V/2
aux(5) =< V
it(14) =< aux(1)
it(15) =< aux(1)
it(14) =< aux(2)
it(15) =< aux(2)
it(14) =< aux(5)
it(15) =< aux(5)

  with precondition: [V1>=0,Out>=1,Out>=V1,V+V1>=Out+1] 

* Chain [[14,15],16]: 1*it(14)+1*it(15)+0
  Such that:it(14) =< V/2
aux(6) =< V1+V
aux(7) =< V
it(14) =< aux(6)
it(15) =< aux(6)
it(14) =< aux(7)
it(15) =< aux(7)

  with precondition: [Out=0,V1>=0,V>=1,V+V1>=2] 

* Chain [17]: 1
  with precondition: [V=0,V1=Out,V1>=0] 

* Chain [16]: 0
  with precondition: [Out=0,V1>=0,V>=0] 


#### Cost of chains of op(V1,V,Out):
* Chain [20]: 1
  with precondition: [V1=1,V+1=Out,V>=0] 

* Chain [19]: 1
  with precondition: [V=1,V1+1=Out,V1>=0] 

* Chain [18]: 0
  with precondition: [Out=0,V1>=0,V>=0] 


#### Cost of loops [21,22,23] 

 * loop 21:foldr(V1,V,Out) -> [foldr(V1',V',Out')] 
2
 * loop 22:foldr(V1,V,Out) -> [foldr(V1',V',Out')] 
2
 * loop 23:foldr(V1,V,Out) -> [foldr(V1',V',Out')] 
1
#### Cost of phase [21,22,23]:foldr(V1,V,Out) -> [foldr(V1',V',Out')] 
5*it(21)+0
  Such that:aux(8) =< V
aux(9) =< V-V'
it(21) =< aux(8)
it(21) =< aux(9)

#### Cost of chains of foldr(V1,V,Out):
* Chain [[21,22,23],24]: 5*it(21)+1
  Such that:aux(10) =< V
it(21) =< aux(10)

  with precondition: [V1>=0,V>=1,Out>=0,V+V1>=Out+1] 

* Chain [24]: 1
  with precondition: [V=0,V1=Out,V1>=0] 


#### Cost of chains of fold(V1,V,Out):
* Chain [28]: 2
  with precondition: [V=0,V1+2=Out,V1>=0] 

* Chain [27]: 3
  with precondition: [V=0,2*V1+2=Out,V1>=0] 

* Chain [26]: 1*s(11)+1*s(12)+5*s(14)+2
  Such that:s(9) =< V1+V
s(11) =< V/2
aux(12) =< V
s(14) =< aux(12)
s(11) =< s(9)
s(12) =< s(9)
s(11) =< aux(12)
s(12) =< aux(12)

  with precondition: [V1>=0,V>=1,Out>=2,V+V1+1>=Out] 

* Chain [25]: 1*s(17)+1*s(19)+5*s(21)+3
  Such that:s(17) =< V/2
aux(13) =< V1+V
aux(14) =< V
s(21) =< aux(14)
s(17) =< aux(13)
s(19) =< aux(13)
s(17) =< aux(14)
s(19) =< aux(14)

  with precondition: [V1>=0,V>=1,Out>=3,Out>=V1+2,V+V1>=2,2*V+2*V1>=Out] 


#### Cost of chains of notEmpty(V1,Out):
* Chain [30]: 1
  with precondition: [V1=0,Out=0] 

* Chain [29]: 1
  with precondition: [Out=1,V1>=1] 


#### Cost of chains of start(V1,V):
* Chain [35]: 1
  with precondition: [V1=0] 

* Chain [34]: 4*s(24)+4*s(25)+15*s(32)+3
  Such that:aux(16) =< V1+V
aux(17) =< V
aux(18) =< V/2
s(24) =< aux(18)
s(24) =< aux(16)
s(25) =< aux(16)
s(24) =< aux(17)
s(25) =< aux(17)
s(32) =< aux(17)

  with precondition: [V1>=0,V>=0] 

* Chain [33]: 3
  with precondition: [V=0,V1>=0] 

* Chain [32]: 1
  with precondition: [V=1,V1>=0] 

* Chain [31]: 1
  with precondition: [V1>=1] 


Closed-form bounds of start(V1,V): 
-------------------------------------
* Chain [35] with precondition: [V1=0] 
    - Upper bound: 1 
    - Complexity: constant 
* Chain [34] with precondition: [V1>=0,V>=0] 
    - Upper bound: 4*V1+21*V+3 
    - Complexity: n 
* Chain [33] with precondition: [V=0,V1>=0] 
    - Upper bound: 3 
    - Complexity: constant 
* Chain [32] with precondition: [V=1,V1>=0] 
    - Upper bound: 1 
    - Complexity: constant 
* Chain [31] with precondition: [V1>=1] 
    - Upper bound: 1 
    - Complexity: constant 

### Maximum cost of start(V1,V): max([2,nat(V)*15+2+nat(V1+V)*4+nat(V/2)*4])+1 
Asymptotic class: n 

Time statistics: 
-------------------------------------
* Partial evaluation computed in 33 ms.
* Invariants computed in 83 ms.
   - Backward Invariants 41 ms.
   - Transitive Invariants 15 ms.
* Refinement performed in 205 ms.
* Termination proved in 25 ms.
* Upper bounds computed in 200 ms.
   - Equation cost structures 98 ms.
   - Phase cost structures 56 ms.
   - Chain cost structures 41 ms.
   - Solving cost expressions 3 ms.
* Total analysis performed in 624 ms.


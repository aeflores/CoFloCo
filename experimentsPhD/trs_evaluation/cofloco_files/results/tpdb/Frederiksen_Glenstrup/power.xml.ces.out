
Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. recursive  : [add0/3]
1. recursive [non_tail] : [mult/3]
2. recursive [non_tail] : [power/3]
3. non_recursive  : [goal/3]
4. non_recursive  : [start/2]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into add0/3
1. SCC is partially evaluated into mult/3
2. SCC is partially evaluated into power/3
3. SCC is completely evaluated into other SCCs
4. SCC is partially evaluated into start/2

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations add0/3 
* CE 11 is refined into CE [12] 
* CE 10 is refined into CE [13] 


#### Refined cost equations add0/3 
* CE 12: add0(A,B,A) = 1
     [A>=0,B=0] 
* CE 13: add0(V1,V,Out) = 1+ add0(V1,W1,X1)
     [V>=W1+1,W1>=0,V1>=0,X1+2=Out] 

### Cost equations --> "Loop" of add0/3 
* CEs [13] --> Loop 8 
* CEs [12] --> Loop 9 

#### Loops of add0/3 
* Loop 8: add0(V1,V,Out)->  add0(V1,V',Out')
                  [V>=V'+1,V'>=0,V1>=0,Out=Out'+2] 
* Loop 9: add0(A,B,A) [A>=0,B=0] 

### Ranking functions of CR add0(V1,V,Out) 
* RF of phase [8]: [V]

#### Partial ranking functions of CR add0(V1,V,Out) 
* Partial RF of phase [8]:
  - RF of loop [8:1]:
    V


### Resulting Chains:add0(V1,V,Out) 
* [[8],9]
* [9]


### Merging Chains  add0/3 into  External patterns of execution 
* [[9]] --> 1 
* [[9,[8]]] --> 2 


### Specialization of cost equations mult/3 
* CE 9 is refined into CE [14] 
* CE 8 is refined into CE [15,16] 


#### Refined cost equations mult/3 
* CE 14: mult(V1,V,Out) = 1
     [V1>=0,Out=0,V=0] 
* CE 15: mult(A,B,A) = 1+ mult(A,C,D)+ add0(A,E,A):1
     [B>=C+1,C>=0,A>=0,D=0,E=0] 
* CE 16: mult(V1,V,Out) = 1+ mult(V1,W1,X1)+ add0(V1,X1,Out):2
     [V1+2*X1>=Out,V>=W1+1,Out>=V1+2,W1>=0,V1>=0] 

### Cost equations --> "Loop" of mult/3 
* CEs [16] --> Loop 10 
* CEs [15] --> Loop 11 
* CEs [14] --> Loop 12 

#### Loops of mult/3 
* Loop 10: mult(V1,V,Out)->  mult(V1,V',Out')
                  [V1+2*Out'>=Out,V>=V'+1,Out>=V1+2,V'>=0,V1>=0] 
* Loop 11: mult(A,B,A)->  mult(A,A',B')
                  [B>=A'+1,A'>=0,A>=0,B'=0] 
* Loop 12: mult(V1,V,Out) [V1>=0,Out=0,V=0] 

### Ranking functions of CR mult(V1,V,Out) 
* RF of phase [10]: [V]
* RF of phase [11]: [V]

#### Partial ranking functions of CR mult(V1,V,Out) 
* Partial RF of phase [10]:
  - RF of loop [10:1]:
    V
* Partial RF of phase [11]:
  - RF of loop [11:1]:
    V


### Resulting Chains:mult(V1,V,Out) 
* [[11],12]
* [[10],[11],12]
* [12]


### Merging Chains  mult/3 into  External patterns of execution 
* [[12]] --> 1 
* [[12,[11]]] --> 2 
* [[12,[11],[10]]] --> 3 


### Specialization of cost equations power/3 
* CE 7 is refined into CE [17] 
* CE 6 is refined into CE [18,19,20] 


#### Refined cost equations power/3 
* CE 17: power(V1,V,Out) = 1
     [V1>=0,Out=1,V=0] 
* CE 18: power(V1,V,Out) = 1+ power(V1,W1,X1)+ mult(V1,Y1,Z1):1
     [V>=W1+1,W1>=0,V1>=0,X1=0,Z1=0,Y1=0,Out=0] 
* CE 19: power(A,B,A) = 1+ power(A,C,D)+ mult(A,D,A):2
     [B>=C+1,C>=0,A>=0,D>=1] 
* CE 20: power(V1,V,Out) = 1+ power(V1,W1,X1)+ mult(V1,X1,Out):3
     [V>=W1+1,Out>=V1+2,W1>=0,X1>=2,V1>=1] 

### Cost equations --> "Loop" of power/3 
* CEs [20] --> Loop 13 
* CEs [19] --> Loop 14 
* CEs [18] --> Loop 15 
* CEs [17] --> Loop 16 

#### Loops of power/3 
* Loop 13: power(V1,V,Out)->  power(V1,V',Out')
                  [V>=V'+1,Out>=V1+2,Out'>=2,V'>=0,V1>=1] 
* Loop 14: power(A,B,A)->  power(A,A',B')
                  [B>=A'+1,B'>=1,A'>=0,A>=0] 
* Loop 15: power(V1,V,Out)->  power(V1,V',Out')
                  [V>=V'+1,V'>=0,V1>=0,Out'=0,Out=0] 
* Loop 16: power(V1,V,Out) [V1>=0,Out=1,V=0] 

### Ranking functions of CR power(V1,V,Out) 
* RF of phase [13,14]: [V]
* RF of phase [15]: [V]

#### Partial ranking functions of CR power(V1,V,Out) 
* Partial RF of phase [13,14]:
  - RF of loop [13:1,14:1]:
    V
* Partial RF of phase [15]:
  - RF of loop [15:1]:
    V


### Resulting Chains:power(V1,V,Out) 
* [[15],[13,14],16]
* [[13,14],16]
* [16]


### Merging Chains  power/3 into  External patterns of execution 
* [[16,[13,14]],[16,[13,14],[15]]] --> 1 
* [[16]] --> 2 


### Specialization of cost equations start/2 
* CE 2 is refined into CE [21,22] 
* CE 3 is refined into CE [23,24,25] 
* CE 4 is refined into CE [26,27] 
* CE 5 is refined into CE [28,29] 


#### Refined cost equations start/2 
* CE 21: start(V1,V) = 0+ power(V1,V,W1):1
     [W1>=V1,V>=1,V1>=0] 
* CE 22: start(V1,V) = 0+ power(V1,W1,X1):2
     [V1>=0,X1=1,W1=0,V=0] 
* CE 23: start(V1,V) = 0+ mult(V1,W1,X1):1
     [V1>=0,X1=0,W1=0,V=0] 
* CE 24: start(V1,V) = 0+ mult(V1,V,V1):2
     [V1>=0,V>=1] 
* CE 25: start(V1,V) = 0+ mult(V1,V,W1):3
     [W1>=V1+2,V>=2,V1>=1] 
* CE 26: start(V1,V) = 0+ add0(V1,W1,V1):1
     [V1>=0,W1=0,V=0] 
* CE 27: start(V1,V) = 0+ add0(V1,V,W1):2
     [V1+2*V>=W1,W1>=V1+2,V1>=0] 
* CE 28: start(V1,V) = 1+ power(V1,V,W1):1
     [W1>=V1,V>=1,V1>=0] 
* CE 29: start(V1,V) = 1+ power(V1,W1,X1):2
     [V1>=0,X1=1,W1=0,V=0] 

### Cost equations --> "Loop" of start/2 
* CEs [21,24,25,27,28] --> Loop 17 
* CEs [22,23,26,29] --> Loop 18 

#### Loops of start/2 
* Loop 17: start(V1,V) [V>=1,V1>=0] 
* Loop 18: start(V1,V) [V1>=0,V=0] 

### Ranking functions of CR start(V1,V) 

#### Partial ranking functions of CR start(V1,V) 


### Resulting Chains:start(V1,V) 
* [18]
* [17]


### Merging Chains  start/2 into  External patterns of execution 
* [[18]] --> 1 
* [[17]] --> 2 


Computing Bounds
=====================================

#### Cost of loops [8] 

 * loop 8:add0(V1,V,Out) -> [add0(V1',V',Out')] 
1
#### Cost of phase [8]:add0(V1,V,Out) -> [add0(V1',V',Out')] 
1*it(8)+0
  Such that:it(8) =< V
it(8) =< V-V'

#### Cost of chains of add0(V1,V,Out):
* Chain [[8],9]: 1*it(8)+1
  Such that:it(8) =< V

  with precondition: [V1>=0,Out>=V1+2,V1+2*V>=Out] 

* Chain [9]: 1
  with precondition: [V=0,V1=Out,V1>=0] 


#### Cost of loops [11] 

 * loop 11:mult(V1,V,Out) -> [mult(V1',V',Out')] 
2
#### Cost of phase [11]:mult(V1,V,Out) -> [mult(V1',V',Out')] 
2*it(11)+0
  Such that:it(11) =< V
it(11) =< V-V'

#### Cost of loops [10] 

 * loop 10:mult(V1,V,Out) -> [mult(V1',V',Out')] 
1*s(2)+2
#### Cost of phase [10]:mult(V1,V,Out) -> [mult(V1',V',Out')] 
2*it(10)+1*s(3)+0
  Such that:it(10) =< V
it(10) =< V-V'

#### Cost of chains of mult(V1,V,Out):
* Chain [[11],12]: 2*it(11)+1
  Such that:it(11) =< V

  with precondition: [V1=Out,V1>=0,V>=1] 

* Chain [[10],[11],12]: 4*it(10)+1*s(3)+1
  Such that:aux(1) =< V
it(10) =< aux(1)

  with precondition: [V1>=1,V>=2,Out>=V1+2] 

* Chain [12]: 1
  with precondition: [V=0,Out=0,V1>=0] 


#### Cost of loops [13,14] 

 * loop 13:power(V1,V,Out) -> [power(V1',V',Out')] 
4*s(7)+1*s(8)+2
 * loop 14:power(V1,V,Out) -> [power(V1',V',Out')] 
2*s(10)+2
#### Cost of phase [13,14]:power(V1,V,Out) -> [power(V1',V',Out')] 
4*it(13)+7*s(11)+0
  Such that:aux(2) =< V
aux(3) =< V-V'
it(13) =< aux(2)
it(13) =< aux(3)

#### Cost of loops [15] 

 * loop 15:power(V1,V,Out) -> [power(V1',V',Out')] 
2
#### Cost of phase [15]:power(V1,V,Out) -> [power(V1',V',Out')] 
2*it(15)+0
  Such that:it(15) =< V
it(15) =< V-V'

#### Cost of chains of power(V1,V,Out):
* Chain [[15],[13,14],16]: 6*it(13)+7*s(11)+1
  Such that:aux(5) =< V
it(13) =< aux(5)

  with precondition: [V1=0,Out=0,V>=2] 

* Chain [[13,14],16]: 4*it(13)+7*s(11)+1
  Such that:aux(4) =< V
it(13) =< aux(4)

  with precondition: [V1>=0,V>=1,Out>=V1] 

* Chain [16]: 1
  with precondition: [V=0,Out=1,V1>=0] 


#### Cost of chains of start(V1,V):
* Chain [18]: 2
  with precondition: [V=0,V1>=0] 

* Chain [17]: 27*s(21)+29*s(22)+2
  Such that:aux(7) =< V
s(21) =< aux(7)

  with precondition: [V1>=0,V>=1] 


Closed-form bounds of start(V1,V): 
-------------------------------------
* Chain [18] with precondition: [V=0,V1>=0] 
    - Upper bound: 2 
    - Complexity: constant 
* Chain [17] with precondition: [V1>=0,V>=1] 
    - Upper bound: inf 
    - Complexity: infinity 

### Maximum cost of start(V1,V): inf 
Asymptotic class: infinity 

Time statistics: 
-------------------------------------
* Partial evaluation computed in 23 ms.
* Invariants computed in 88 ms.
   - Backward Invariants 33 ms.
   - Transitive Invariants 19 ms.
* Refinement performed in 131 ms.
* Termination proved in 24 ms.
* Upper bounds computed in 120 ms.
   - Equation cost structures 48 ms.
   - Phase cost structures 50 ms.
   - Chain cost structures 36 ms.
   - Solving cost expressions 1 ms.
* Total analysis performed in 440 ms.


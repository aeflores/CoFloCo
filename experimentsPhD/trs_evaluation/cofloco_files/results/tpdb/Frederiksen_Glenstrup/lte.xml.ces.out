
Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. non_recursive  : [and/3]
1. recursive  : [even/2]
2. recursive  : [lte/3]
3. non_recursive  : [goal/3]
4. non_recursive  : [notEmpty/2]
5. non_recursive  : [start/2]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into and/3
1. SCC is partially evaluated into even/2
2. SCC is partially evaluated into lte/3
3. SCC is partially evaluated into goal/3
4. SCC is partially evaluated into notEmpty/2
5. SCC is partially evaluated into start/2

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations and/3 
* CE 20 is refined into CE [21] 
* CE 19 is refined into CE [22] 
* CE 17 is refined into CE [23] 
* CE 18 is refined into CE [24] 
* CE 16 is refined into CE [25] 


#### Refined cost equations and/3 
* CE 21: and(V2,V,Out) = 0
     [V>=0,V2>=0,Out=0] 
* CE 22: and(V2,V,Out) = 0
     [Out=2,V=2,V2=2] 
* CE 23: and(V2,V,Out) = 0
     [Out=1,V=1,V2=2] 
* CE 24: and(V2,V,Out) = 0
     [Out=1,V=2,V2=1] 
* CE 25: and(V2,V,Out) = 0
     [Out=1,V=1,V2=1] 

### Cost equations --> "Loop" of and/3 
* CEs [21] --> Loop 16 
* CEs [22] --> Loop 17 
* CEs [23] --> Loop 18 
* CEs [24] --> Loop 19 
* CEs [25] --> Loop 20 

#### Loops of and/3 
* Loop 16: and(V2,V,Out) [V>=0,V2>=0,Out=0] 
* Loop 17: and(V2,V,Out) [Out=2,V=2,V2=2] 
* Loop 18: and(V2,V,Out) [Out=1,V=1,V2=2] 
* Loop 19: and(V2,V,Out) [Out=1,V=2,V2=1] 
* Loop 20: and(V2,V,Out) [Out=1,V=1,V2=1] 

### Ranking functions of CR and(V2,V,Out) 

#### Partial ranking functions of CR and(V2,V,Out) 


### Resulting Chains:and(V2,V,Out) 
* [20]
* [19]
* [18]
* [17]
* [16]


### Merging Chains  and/3 into  External patterns of execution 
* [[20]] --> 1 
* [[19]] --> 2 
* [[18]] --> 3 
* [[17]] --> 4 
* [[16]] --> 5 


### Specialization of cost equations even/2 
* CE 10 is refined into CE [26] 
* CE 12 is refined into CE [27] 
* CE 11 is refined into CE [28] 


#### Refined cost equations even/2 
* CE 26: even(V2,Out) = 1
     [V2>=1,Out=1] 
* CE 27: even(V2,Out) = 1
     [Out=2,V2=0] 
* CE 28: even(V2,Out) = 1+ even(W2,Out)
     [V2>=W2+2,W2>=0] 

### Cost equations --> "Loop" of even/2 
* CEs [28] --> Loop 21 
* CEs [26] --> Loop 22 
* CEs [27] --> Loop 23 

#### Loops of even/2 
* Loop 21: even(V2,Out)->  even(V2',Out)
                  [V2>=V2'+2,V2'>=0] 
* Loop 22: even(V2,Out) [V2>=1,Out=1] 
* Loop 23: even(V2,Out) [Out=2,V2=0] 

### Ranking functions of CR even(V2,Out) 
* RF of phase [21]: [V2-1]

#### Partial ranking functions of CR even(V2,Out) 
* Partial RF of phase [21]:
  - RF of loop [21:1]:
    V2-1


### Resulting Chains:even(V2,Out) 
* [[21],23]
* [[21],22]
* [23]
* [22]


### Merging Chains  even/2 into  External patterns of execution 
* [[23]] --> 1 
* [[22],[22,[21]]] --> 2 
* [[23,[21]]] --> 3 


### Specialization of cost equations lte/3 
* CE 8 is refined into CE [29] 
* CE 9 is refined into CE [30] 
* CE 7 is refined into CE [31] 


#### Refined cost equations lte/3 
* CE 29: lte(V2,V,Out) = 1
     [V2>=1,Out=1,V=0] 
* CE 30: lte(V2,V,Out) = 1
     [V>=0,Out=2,V2=0] 
* CE 31: lte(V2,V,Out) = 1+ lte(W2,X2,Out)
     [V>=X2+1,V2>=W2+1,X2>=0,W2>=0] 

### Cost equations --> "Loop" of lte/3 
* CEs [31] --> Loop 24 
* CEs [29] --> Loop 25 
* CEs [30] --> Loop 26 

#### Loops of lte/3 
* Loop 24: lte(V2,V,Out)->  lte(V2',V',Out)
                  [V>=V'+1,V2>=V2'+1,V'>=0,V2'>=0] 
* Loop 25: lte(V2,V,Out) [V2>=1,Out=1,V=0] 
* Loop 26: lte(V2,V,Out) [V>=0,Out=2,V2=0] 

### Ranking functions of CR lte(V2,V,Out) 
* RF of phase [24]: [V,V2]

#### Partial ranking functions of CR lte(V2,V,Out) 
* Partial RF of phase [24]:
  - RF of loop [24:1]:
    V
    V2


### Resulting Chains:lte(V2,V,Out) 
* [[24],26]
* [[24],25]
* [26]
* [25]


### Merging Chains  lte/3 into  External patterns of execution 
* [[26]] --> 1 
* [[25]] --> 2 
* [[25,[24]]] --> 3 
* [[26,[24]]] --> 4 


### Specialization of cost equations goal/3 
* CE 15 is refined into CE [32,33,34,35,36,37,38,39,40,41,42,43,44,45] 


#### Refined cost equations goal/3 
* CE 32: goal(V2,V,Out) = 1+ lte(W2,V,X2):1+ even(Y2,Z2):1+ and(A3,B3,C3):4
     [V>=0,C3=2,B3=2,A3=2,Z2=2,Y2=0,X2=2,W2=0,Out=2,V2=0] 
* CE 33: goal(V2,V,Out) = 1+ lte(W2,V,X2):1+ even(Y2,Z2):1+ and(A3,B3,C3):5
     [V>=0,C3=0,B3=2,A3=2,Z2=2,Y2=0,X2=2,W2=0,Out=0,V2=0] 
* CE 34: goal(V2,V,Out) = 1+ lte(V2,W2,X2):2+ even(V2,Y2):2+ and(Z2,A3,B3):1
     [V2>=1,B3=1,A3=1,Z2=1,Y2=1,X2=1,W2=0,Out=1,V=0] 
* CE 35: goal(V2,V,Out) = 1+ lte(V2,W2,X2):2+ even(V2,Y2):2+ and(Z2,A3,B3):5
     [V2>=1,B3=0,A3=1,Z2=1,Y2=1,X2=1,W2=0,Out=0,V=0] 
* CE 36: goal(V2,V,Out) = 1+ lte(V2,W2,X2):2+ even(V2,Y2):3+ and(Z2,A3,B3):2
     [V2>=2,B3=1,A3=2,Z2=1,Y2=2,X2=1,W2=0,Out=1,V=0] 
* CE 37: goal(V2,V,Out) = 1+ lte(V2,W2,X2):2+ even(V2,Y2):3+ and(Z2,A3,B3):5
     [V2>=2,B3=0,A3=2,Z2=1,Y2=2,X2=1,W2=0,Out=0,V=0] 
* CE 38: goal(V2,V,Out) = 1+ lte(V2,V,W2):3+ even(V2,X2):2+ and(Y2,Z2,A3):1
     [V2>=2,V>=1,A3=1,Z2=1,Y2=1,X2=1,W2=1,Out=1] 
* CE 39: goal(V2,V,Out) = 1+ lte(V2,V,W2):3+ even(V2,X2):2+ and(Y2,Z2,A3):5
     [V2>=2,V>=1,A3=0,Z2=1,Y2=1,X2=1,W2=1,Out=0] 
* CE 40: goal(V2,V,Out) = 1+ lte(V2,V,W2):3+ even(V2,X2):3+ and(Y2,Z2,A3):2
     [V2>=2,V>=1,A3=1,Z2=2,Y2=1,X2=2,W2=1,Out=1] 
* CE 41: goal(V2,V,Out) = 1+ lte(V2,V,W2):3+ even(V2,X2):3+ and(Y2,Z2,A3):5
     [V2>=2,V>=1,A3=0,Z2=2,Y2=1,X2=2,W2=1,Out=0] 
* CE 42: goal(V2,V,Out) = 1+ lte(V2,V,W2):4+ even(V2,X2):2+ and(Y2,Z2,A3):3
     [V2>=1,V>=1,A3=1,Z2=1,Y2=2,X2=1,W2=2,Out=1] 
* CE 43: goal(V2,V,Out) = 1+ lte(V2,V,W2):4+ even(V2,X2):2+ and(Y2,Z2,A3):5
     [V2>=1,V>=1,A3=0,Z2=1,Y2=2,X2=1,W2=2,Out=0] 
* CE 44: goal(V2,V,Out) = 1+ lte(V2,V,W2):4+ even(V2,X2):3+ and(Y2,Z2,A3):4
     [V2>=2,V>=1,A3=2,Z2=2,Y2=2,X2=2,W2=2,Out=2] 
* CE 45: goal(V2,V,Out) = 1+ lte(V2,V,W2):4+ even(V2,X2):3+ and(Y2,Z2,A3):5
     [V2>=2,V>=1,A3=0,Z2=2,Y2=2,X2=2,W2=2,Out=0] 

### Cost equations --> "Loop" of goal/3 
* CEs [44] --> Loop 27 
* CEs [38,40,42] --> Loop 28 
* CEs [39,41,43,45] --> Loop 29 
* CEs [34,36] --> Loop 30 
* CEs [35,37] --> Loop 31 
* CEs [32] --> Loop 32 
* CEs [33] --> Loop 33 

#### Loops of goal/3 
* Loop 27: goal(V2,V,Out) [V>=1,V2>=2,Out=2] 
* Loop 28: goal(V2,V,Out) [V>=1,V2>=1,Out=1] 
* Loop 29: goal(V2,V,Out) [V>=1,V2>=1,Out=0] 
* Loop 30: goal(V2,V,Out) [V2>=1,Out=1,V=0] 
* Loop 31: goal(V2,V,Out) [V2>=1,Out=0,V=0] 
* Loop 32: goal(V2,V,Out) [V>=0,Out=2,V2=0] 
* Loop 33: goal(V2,V,Out) [V>=0,Out=0,V2=0] 

### Ranking functions of CR goal(V2,V,Out) 

#### Partial ranking functions of CR goal(V2,V,Out) 


### Resulting Chains:goal(V2,V,Out) 
* [33]
* [32]
* [31]
* [30]
* [29]
* [28]
* [27]


### Merging Chains  goal/3 into  External patterns of execution 
* [[33]] --> 1 
* [[32]] --> 2 
* [[31]] --> 3 
* [[30]] --> 4 
* [[29]] --> 5 
* [[28]] --> 6 
* [[27]] --> 7 


### Specialization of cost equations notEmpty/2 
* CE 13 is refined into CE [46] 
* CE 14 is refined into CE [47] 


#### Refined cost equations notEmpty/2 
* CE 46: notEmpty(V2,Out) = 1
     [V2>=1,Out=2] 
* CE 47: notEmpty(V2,Out) = 1
     [Out=1,V2=0] 

### Cost equations --> "Loop" of notEmpty/2 
* CEs [46] --> Loop 34 
* CEs [47] --> Loop 35 

#### Loops of notEmpty/2 
* Loop 34: notEmpty(V2,Out) [V2>=1,Out=2] 
* Loop 35: notEmpty(V2,Out) [Out=1,V2=0] 

### Ranking functions of CR notEmpty(V2,Out) 

#### Partial ranking functions of CR notEmpty(V2,Out) 


### Resulting Chains:notEmpty(V2,Out) 
* [35]
* [34]


### Merging Chains  notEmpty/2 into  External patterns of execution 
* [[35]] --> 1 
* [[34]] --> 2 


### Specialization of cost equations start/2 
* CE 2 is refined into CE [48,49,50,51] 
* CE 3 is refined into CE [52,53,54] 
* CE 4 is refined into CE [55,56] 
* CE 5 is refined into CE [57,58,59,60,61,62,63] 
* CE 6 is refined into CE [64,65,66,67,68] 


#### Refined cost equations start/2 
* CE 48: start(V2,V) = 0+ lte(W2,V,X2):1
     [V>=0,X2=2,W2=0,V2=0] 
* CE 49: start(V2,V) = 0+ lte(V2,W2,X2):2
     [V2>=1,X2=1,W2=0,V=0] 
* CE 50: start(V2,V) = 0+ lte(V2,V,W2):3
     [V>=1,V2>=2,W2=1] 
* CE 51: start(V2,V) = 0+ lte(V2,V,W2):4
     [V>=1,V2>=1,W2=2] 
* CE 52: start(V2,V) = 0+ even(W2,X2):1
     [X2=2,W2=0,V2=0] 
* CE 53: start(V2,V) = 0+ even(V2,W2):2
     [V2>=1,W2=1] 
* CE 54: start(V2,V) = 0+ even(V2,W2):3
     [V2>=2,W2=2] 
* CE 55: start(V2,V) = 0+ notEmpty(W2,X2):1
     [X2=1,W2=0,V2=0] 
* CE 56: start(V2,V) = 0+ notEmpty(V2,W2):2
     [V2>=1,W2=2] 
* CE 57: start(V2,V) = 0+ goal(W2,V,X2):1
     [V>=0,X2=0,W2=0,V2=0] 
* CE 58: start(V2,V) = 0+ goal(W2,V,X2):2
     [V>=0,X2=2,W2=0,V2=0] 
* CE 59: start(V2,V) = 0+ goal(V2,W2,X2):3
     [V2>=1,X2=0,W2=0,V=0] 
* CE 60: start(V2,V) = 0+ goal(V2,W2,X2):4
     [V2>=1,X2=1,W2=0,V=0] 
* CE 61: start(V2,V) = 0+ goal(V2,V,W2):5
     [V>=1,V2>=1,W2=0] 
* CE 62: start(V2,V) = 0+ goal(V2,V,W2):6
     [V>=1,V2>=1,W2=1] 
* CE 63: start(V2,V) = 0+ goal(V2,V,W2):7
     [V>=1,V2>=2,W2=2] 
* CE 64: start(V2,V) = 0+ and(W2,X2,Y2):1
     [Y2=1,X2=1,W2=1,V=1,V2=1] 
* CE 65: start(V2,V) = 0+ and(W2,X2,Y2):2
     [Y2=1,X2=2,W2=1,V=2,V2=1] 
* CE 66: start(V2,V) = 0+ and(W2,X2,Y2):3
     [Y2=1,X2=1,W2=2,V=1,V2=2] 
* CE 67: start(V2,V) = 0+ and(W2,X2,Y2):4
     [Y2=2,X2=2,W2=2,V=2,V2=2] 
* CE 68: start(V2,V) = 0+ and(V2,V,W2):5
     [V>=0,V2>=0,W2=0] 

### Cost equations --> "Loop" of start/2 
* CEs [49,59,60] --> Loop 36 
* CEs [67] --> Loop 37 
* CEs [66] --> Loop 38 
* CEs [53,54,56,65] --> Loop 39 
* CEs [50,51,61,62,63,64,68] --> Loop 40 
* CEs [48,52,55,57,58] --> Loop 41 

#### Loops of start/2 
* Loop 36: start(V2,V) [V2>=1,V=0] 
* Loop 37: start(V2,V) [V=2,V2=2] 
* Loop 38: start(V2,V) [V=1,V2=2] 
* Loop 39: start(V2,V) [V2>=1] 
* Loop 40: start(V2,V) [V>=0,V2>=0] 
* Loop 41: start(V2,V) [V2=0] 

### Ranking functions of CR start(V2,V) 

#### Partial ranking functions of CR start(V2,V) 


### Resulting Chains:start(V2,V) 
* [41]
* [40]
* [39]
* [38]
* [37]
* [36]


### Merging Chains  start/2 into  External patterns of execution 
* [[41]] --> 1 
* [[38],[40]] --> 2 
* [[37],[39]] --> 3 
* [[36]] --> 4 


Computing Bounds
=====================================

#### Cost of chains of and(V2,V,Out):
* Chain [20]: 0
  with precondition: [V2=1,V=1,Out=1] 

* Chain [19]: 0
  with precondition: [V2=1,V=2,Out=1] 

* Chain [18]: 0
  with precondition: [V2=2,V=1,Out=1] 

* Chain [17]: 0
  with precondition: [V2=2,V=2,Out=2] 

* Chain [16]: 0
  with precondition: [Out=0,V2>=0,V>=0] 


#### Cost of loops [21] 

 * loop 21:even(V2,Out) -> [even(V2',Out')] 
1
#### Cost of phase [21]:even(V2,Out) -> [even(V2',Out')] 
1*it(21)+0
  Such that:it(21) =< V2
it(21) =< V2-V2'

#### Cost of phase [21]:even(V2,Out) -> [even(V2',Out')] 
1*it(21)+0
  Such that:it(21) =< V2
it(21) =< V2-V2'

#### Cost of chains of even(V2,Out):
* Chain [[21],23]: 1*it(21)+1
  Such that:it(21) =< V2

  with precondition: [Out=2,V2>=2] 

* Chain [[21],22]: 1*it(21)+1
  Such that:it(21) =< V2

  with precondition: [Out=1,V2>=3] 

* Chain [23]: 1
  with precondition: [V2=0,Out=2] 

* Chain [22]: 1
  with precondition: [Out=1,V2>=1] 


#### Cost of loops [24] 

 * loop 24:lte(V2,V,Out) -> [lte(V2',V',Out')] 
1
#### Cost of phase [24]:lte(V2,V,Out) -> [lte(V2',V',Out')] 
1*it(24)+0
  Such that:it(24) =< V2
it(24) =< V2-V2'
it(24) =< V
it(24) =< V-V'

#### Cost of phase [24]:lte(V2,V,Out) -> [lte(V2',V',Out')] 
1*it(24)+0
  Such that:it(24) =< V2
it(24) =< V2-V2'
it(24) =< V
it(24) =< V-V'

#### Cost of chains of lte(V2,V,Out):
* Chain [[24],26]: 1*it(24)+1
  Such that:it(24) =< V

  with precondition: [Out=2,V2>=1,V>=1] 

* Chain [[24],25]: 1*it(24)+1
  Such that:it(24) =< V

  with precondition: [Out=1,V2>=2,V>=1] 

* Chain [26]: 1
  with precondition: [V2=0,Out=2,V>=0] 

* Chain [25]: 1
  with precondition: [V=0,Out=1,V2>=1] 


#### Cost of chains of goal(V2,V,Out):
* Chain [33]: 3
  with precondition: [V2=0,Out=0,V>=0] 

* Chain [32]: 3
  with precondition: [V2=0,Out=2,V>=0] 

* Chain [31]: 2*s(2)+3
  Such that:aux(1) =< V2
s(2) =< aux(1)

  with precondition: [V=0,Out=0,V2>=1] 

* Chain [30]: 2*s(4)+3
  Such that:aux(2) =< V2
s(4) =< aux(2)

  with precondition: [V=0,Out=1,V2>=1] 

* Chain [29]: 4*s(6)+4*s(7)+3
  Such that:aux(3) =< V2
aux(4) =< V
s(7) =< aux(3)
s(6) =< aux(4)

  with precondition: [Out=0,V2>=1,V>=1] 

* Chain [28]: 3*s(14)+3*s(15)+3
  Such that:aux(5) =< V2
aux(6) =< V
s(15) =< aux(5)
s(14) =< aux(6)

  with precondition: [Out=1,V2>=1,V>=1] 

* Chain [27]: 1*s(20)+1*s(21)+3
  Such that:s(21) =< V2
s(20) =< V

  with precondition: [Out=2,V2>=2,V>=1] 


#### Cost of chains of notEmpty(V2,Out):
* Chain [35]: 1
  with precondition: [V2=0,Out=1] 

* Chain [34]: 1
  with precondition: [Out=2,V2>=1] 


#### Cost of chains of start(V2,V):
* Chain [41]: 3
  with precondition: [V2=0] 

* Chain [40]: 10*s(22)+8*s(26)+3
  Such that:aux(7) =< V2
aux(8) =< V
s(26) =< aux(7)
s(22) =< aux(8)

  with precondition: [V2>=0,V>=0] 

* Chain [39]: 2*s(34)+1
  Such that:aux(9) =< V2
s(34) =< aux(9)

  with precondition: [V2>=1] 

* Chain [38]: 0
  with precondition: [V2=2,V=1] 

* Chain [37]: 0
  with precondition: [V2=2,V=2] 

* Chain [36]: 4*s(37)+3
  Such that:aux(10) =< V2
s(37) =< aux(10)

  with precondition: [V=0,V2>=1] 


Closed-form bounds of start(V2,V): 
-------------------------------------
* Chain [41] with precondition: [V2=0] 
    - Upper bound: 3 
    - Complexity: constant 
* Chain [40] with precondition: [V2>=0,V>=0] 
    - Upper bound: 8*V2+10*V+3 
    - Complexity: n 
* Chain [39] with precondition: [V2>=1] 
    - Upper bound: 2*V2+1 
    - Complexity: n 
* Chain [38] with precondition: [V2=2,V=1] 
    - Upper bound: 0 
    - Complexity: constant 
* Chain [37] with precondition: [V2=2,V=2] 
    - Upper bound: 0 
    - Complexity: constant 
* Chain [36] with precondition: [V=0,V2>=1] 
    - Upper bound: 4*V2+3 
    - Complexity: n 

### Maximum cost of start(V2,V): max([2,nat(V)*10+4*V2+ (2*V2+2)+2*V2])+1 
Asymptotic class: n 

Time statistics: 
-------------------------------------
* Partial evaluation computed in 10 ms.
* Invariants computed in 20 ms.
   - Backward Invariants 11 ms.
   - Transitive Invariants 1 ms.
* Refinement performed in 77 ms.
* Termination proved in 3 ms.
* Upper bounds computed in 54 ms.
   - Equation cost structures 34 ms.
   - Phase cost structures 5 ms.
   - Chain cost structures 9 ms.
   - Solving cost expressions 1 ms.
* Total analysis performed in 187 ms.


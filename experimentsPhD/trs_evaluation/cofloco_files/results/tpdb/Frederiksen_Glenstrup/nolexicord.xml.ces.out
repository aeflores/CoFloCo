
Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. recursive  : [fun/3]
1. non_recursive  : [eqNatList/3]
2. recursive  : [fun1/8,nolexicord/7]
3. non_recursive  : [goal/7]
4. non_recursive  : [number42/1]
5. non_recursive  : [start/7]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into fun/3
1. SCC is partially evaluated into eqNatList/3
2. SCC is partially evaluated into nolexicord/7
3. SCC is completely evaluated into other SCCs
4. SCC is completely evaluated into other SCCs
5. SCC is partially evaluated into start/7

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations fun/3 
* CE 21 is refined into CE [24] 
* CE 22 is refined into CE [25] 
* CE 23 is refined into CE [26] 
* CE 20 is refined into CE [27] 


#### Refined cost equations fun/3 
* CE 24: fun(V1,V,Out) = 0
     [V>=0,V1>=0,Out=0] 
* CE 25: fun(V1,V,Out) = 0
     [V1>=1,Out=0,V=0] 
* CE 26: fun(V1,V,Out) = 0
     [Out=1,V=0,V1=0] 
* CE 27: fun(V1,V,Out) = 0+ fun(W1,X1,Out)
     [X1>=0,W1>=0,X1+1=V,W1+1=V1] 

### Cost equations --> "Loop" of fun/3 
* CEs [27] --> Loop 12 
* CEs [24,25] --> Loop 13 
* CEs [26] --> Loop 14 

#### Loops of fun/3 
* Loop 12: fun(V1,V,Out)->  fun(V1',V',Out)
                  [V'>=0,V1'>=0,V'+1=V,V1'+1=V1] 
* Loop 13: fun(V1,V,Out) [V>=0,V1>=0,Out=0] 
* Loop 14: fun(V1,V,Out) [Out=1,V=0,V1=0] 

### Ranking functions of CR fun(V1,V,Out) 
* RF of phase [12]: [V,V1]

#### Partial ranking functions of CR fun(V1,V,Out) 
* Partial RF of phase [12]:
  - RF of loop [12:1]:
    V
    V1


### Resulting Chains:fun(V1,V,Out) 
* [[12],14]
* [[12],13]
* [14]
* [13]


### Merging Chains  fun/3 into  External patterns of execution 
* [[14]] --> 1 
* [[13],[13,[12]]] --> 2 
* [[14,[12]]] --> 3 


### Specialization of cost equations eqNatList/3 
* CE 16 is refined into CE [28] 
* CE 17 is refined into CE [29] 
* CE 19 is refined into CE [30] 
* CE 15 is refined into CE [31,32,33] 
* CE 18 is refined into CE [34] 


#### Refined cost equations eqNatList/3 
* CE 28: eqNatList(V1,V,Out) = 1
     [V1>=1,Out=0,V=1] 
* CE 29: eqNatList(V1,V,Out) = 1
     [V>=1,Out=0,V1=1] 
* CE 30: eqNatList(V1,V,Out) = 0
     [V>=0,V1>=0,Out=0] 
* CE 31: eqNatList(V1,V,Out) = 1+ fun(W1,X1,Y1):1
     [V>=1,V1>=1,V1+V=Out,Y1=1,X1=0,W1=0] 
* CE 32: eqNatList(V1,V,Out) = 1+ fun(W1,X1,Y1):2
     [V>=X1+1,V1>=W1+1,X1>=0,W1>=0,V1+V=Out+1,Y1=0] 
* CE 33: eqNatList(V1,V,Out) = 1+ fun(W1,W1,X1):3
     [V>=W1+1,V1>=W1+1,W1>=1,V1+V=Out,X1=1] 
* CE 34: eqNatList(V1,V,Out) = 1
     [Out=1,V=1,V1=1] 

### Cost equations --> "Loop" of eqNatList/3 
* CEs [31,33] --> Loop 15 
* CEs [28] --> Loop 16 
* CEs [29,30] --> Loop 17 
* CEs [32,34] --> Loop 18 

#### Loops of eqNatList/3 
* Loop 15: eqNatList(V1,V,Out) [V>=1,V1>=1,V1+V=Out] 
* Loop 16: eqNatList(V1,V,Out) [V1>=1,Out=0,V=1] 
* Loop 17: eqNatList(V1,V,Out) [V>=0,V1>=0,Out=0] 
* Loop 18: eqNatList(V1,V,Out) [V>=1,V1>=1,V1+V=Out+1] 

### Ranking functions of CR eqNatList(V1,V,Out) 

#### Partial ranking functions of CR eqNatList(V1,V,Out) 


### Resulting Chains:eqNatList(V1,V,Out) 
* [18]
* [17]
* [16]
* [15]


### Merging Chains  eqNatList/3 into  External patterns of execution 
* [[16],[17]] --> 1 
* [[15]] --> 2 
* [[18]] --> 3 


### Specialization of cost equations nolexicord/7 
* CE 10 is refined into CE [35,36,37] 
* CE 14 is refined into CE [38] 
* CE 13 is refined into CE [39] 
* CE 11 is refined into CE [40] 
* CE 12 is refined into CE [41] 


#### Refined cost equations nolexicord/7 
* CE 35: nolexicord(V1,V,V2,V10,V8,V9,Out) = 1+ eqNatList(V1,V,W10):1
     [V>=0,V1>=1,V9>=0,V8>=0,V10>=0,V2>=0,W10=0,Out=0] 
* CE 36: nolexicord(V1,V,V2,V10,V8,V9,Out) = 1+ eqNatList(V1,W10,X10):2
     [X10>=V1+1,V1>=1,V9>=0,V8>=0,V10>=0,V2>=0,X10=V1+W10,X10=V1+V,Out=0] 
* CE 37: nolexicord(V1,V,V2,V10,V8,V9,Out) = 1+ eqNatList(V1,W10,X10):3
     [X10>=V1,V1>=1,V9>=0,V8>=0,V10>=0,V2>=0,X10+1=V1+W10,X10+1=V1+V,Out=0] 
* CE 38: nolexicord(V1,V,V2,V10,V8,V9,Out) = 0
     [V9>=0,V8>=0,V10>=0,V2>=0,V>=0,V1>=0,Out=0] 
* CE 39: nolexicord(V1,V,V2,V10,V8,V9,Out) = 1
     [V9>=0,V8>=0,V10>=0,V2>=0,V>=0,Out=85,V1=1] 
* CE 40: nolexicord(V1,V,V2,V10,V8,V9,Out) = 1+ eqNatList(W10,X10,Y10):3+ nolexicord(Z10,A11,B11,C11,D11,E11,Out)
     [V8>=E11+1,E11>=0,D11=0,C11=0,B11=0,A11=0,Z10=0,Y10=1,X10=1,W10=1,V9=1,V10=1,V2=1,V=1,V1=1] 
* CE 41: nolexicord(A,A,A,A,A,B,C) = 1+ eqNatList(A,A,D):1+ nolexicord(E,E,E,E,E,F,C)
     [B>=F+1,A>=E+1,F>=0,E>=0,D=0] 

### Cost equations --> "Loop" of nolexicord/7 
* CEs [41] --> Loop 19 
* CEs [40] --> Loop 20 
* CEs [35,36,37,38] --> Loop 21 
* CEs [39] --> Loop 22 

#### Loops of nolexicord/7 
* Loop 19: nolexicord(A,A,A,A,A,B,C)->  nolexicord(A',A',A',A',A',B',C)
                  [B>=B'+1,A>=A'+1,B'>=0,A'>=0] 
* Loop 20: nolexicord(V1,V,V2,V10,V8,V9,Out)->  nolexicord(V1',V',V2',V10',V8',V9',Out)
                  [V8>=V9'+1,V9'>=0,V8'=0,V10'=0,V2'=0,V'=0,V1'=0,V9=1,V10=1,V2=1,V=1,V1=1] 
* Loop 21: nolexicord(V1,V,V2,V10,V8,V9,Out) [V9>=0,V8>=0,V10>=0,V2>=0,V>=0,V1>=0,Out=0] 
* Loop 22: nolexicord(V1,V,V2,V10,V8,V9,Out) [V9>=0,V8>=0,V10>=0,V2>=0,V>=0,Out=85,V1=1] 

### Ranking functions of CR nolexicord(V1,V,V2,V10,V8,V9,Out) 
* RF of phase [19]: [V1,V9]

#### Partial ranking functions of CR nolexicord(V1,V,V2,V10,V8,V9,Out) 
* Partial RF of phase [19]:
  - RF of loop [19:1]:
    V1
    V9


### Resulting Chains:nolexicord(V1,V,V2,V10,V8,V9,Out) 
* [[19],22]
* [[19],21]
* [[19],20,21]
* [22]
* [21]
* [20,21]


### Merging Chains  nolexicord/7 into  External patterns of execution 
* [[21,20],[21]] --> 1 
* [[22]] --> 2 
* [[21,20,[19]],[21,[19]]] --> 3 
* [[22,[19]]] --> 4 


### Specialization of cost equations start/7 
* CE 2 is refined into CE [42] 
* CE 3 is refined into CE [43,44,45,46] 
* CE 4 is refined into CE [47,48,49,50] 
* CE 5 is refined into CE [51,52,53,54] 
* CE 6 is refined into CE [55,56,57] 
* CE 7 is refined into CE [58] 
* CE 8 is refined into CE [59,60,61,62] 
* CE 9 is refined into CE [63,64,65] 


#### Refined cost equations start/7 
* CE 42: start(V1,V,V2,V10,V8,V9,V37) = 0
     [V37>=0,V9>=0,V8>=0,V10>=0,V2>=0,V>=0,V1>=0] 
* CE 43: start(A,B,B,B,B,C,B) = 0+ nolexicord(D,D,D,D,D,E,F):1
     [C>=E+1,B>=D+1,E>=0,D>=0,F=0,A=1] 
* CE 44: start(A,B,B,B,B,C,B) = 0+ nolexicord(D,E,F,G,H,I,J):2
     [C>=I+1,I>=0,B>=2,J=85,H=1,G=1,F=1,E=1,D=1,A=1] 
* CE 45: start(A,B,B,B,B,C,B) = 0+ nolexicord(D,D,D,D,D,E,F):3
     [C>=E+1,B>=D+1,E>=1,D>=1,F=0,A=1] 
* CE 46: start(A,B,B,B,B,C,B) = 0+ nolexicord(D,D,D,D,D,E,F):4
     [C>=E+1,B>=D+1,E>=1,D>=2,F=85,A=1] 
* CE 47: start(A,B,B,B,B,B,C) = 0+ nolexicord(D,D,D,D,D,E,F):1
     [C>=E+1,B>=D+1,E>=0,D>=0,F=0,A=0] 
* CE 48: start(A,B,B,B,B,B,C) = 0+ nolexicord(D,E,F,G,H,I,J):2
     [C>=I+1,I>=0,B>=2,J=85,H=1,G=1,F=1,E=1,D=1,A=0] 
* CE 49: start(A,B,B,B,B,B,C) = 0+ nolexicord(D,D,D,D,D,E,F):3
     [C>=E+1,B>=D+1,E>=1,D>=1,F=0,A=0] 
* CE 50: start(A,B,B,B,B,B,C) = 0+ nolexicord(D,D,D,D,D,E,F):4
     [C>=E+1,B>=D+1,E>=1,D>=2,F=85,A=0] 
* CE 51: start(V1,V,V2,V10,V8,V9,V37) = 0+ nolexicord(V1,V,V2,V10,V8,V9,W37):1
     [V9>=0,V8>=0,V10>=0,V2>=0,V>=0,V1>=0,W37=0] 
* CE 52: start(V1,V,V2,V10,V8,V9,V37) = 0+ nolexicord(W37,V,V2,V10,V8,V9,X37):2
     [V9>=0,V8>=0,V10>=0,V2>=0,V>=0,X37=85,W37=1,V1=1] 
* CE 53: start(A,A,A,A,A,B,C) = 0+ nolexicord(A,A,A,A,A,B,D):3
     [B>=1,A>=1,D=0] 
* CE 54: start(A,A,A,A,A,B,C) = 0+ nolexicord(A,A,A,A,A,B,D):4
     [B>=1,A>=2,D=85] 
* CE 55: start(V1,V,V2,V10,V8,V9,V37) = 0+ eqNatList(V1,V,W37):1
     [V>=0,V1>=0,W37=0] 
* CE 56: start(V1,V,V2,V10,V8,V9,V37) = 0+ eqNatList(V1,W37,X37):2
     [X37>=V1+1,V1>=1,X37=V1+W37,X37=V1+V] 
* CE 57: start(V1,V,V2,V10,V8,V9,V37) = 0+ eqNatList(V1,W37,X37):3
     [X37>=V1,V1>=1,X37+1=V1+W37,X37+1=V1+V] 
* CE 58: start(V1,V,V2,V10,V8,V9,V37) = 1
     [] 
* CE 59: start(V1,V,V2,V10,V8,V9,V37) = 1+ nolexicord(V1,V,V2,V10,V8,V9,W37):1
     [V9>=0,V8>=0,V10>=0,V2>=0,V>=0,V1>=0,W37=0] 
* CE 60: start(V1,V,V2,V10,V8,V9,V37) = 1+ nolexicord(W37,V,V2,V10,V8,V9,X37):2
     [V9>=0,V8>=0,V10>=0,V2>=0,V>=0,X37=85,W37=1,V1=1] 
* CE 61: start(A,A,A,A,A,B,C) = 1+ nolexicord(A,A,A,A,A,B,D):3
     [B>=1,A>=1,D=0] 
* CE 62: start(A,A,A,A,A,B,C) = 1+ nolexicord(A,A,A,A,A,B,D):4
     [B>=1,A>=2,D=85] 
* CE 63: start(V1,V,V2,V10,V8,V9,V37) = 0+ fun(W37,X37,Y37):1
     [Y37=1,X37=0,W37=0,V=0,V1=0] 
* CE 64: start(V1,V,V2,V10,V8,V9,V37) = 0+ fun(V1,V,W37):2
     [V>=0,V1>=0,W37=0] 
* CE 65: start(A,A,B,C,D,E,F) = 0+ fun(A,A,G):3
     [A>=1,G=1] 

### Cost equations --> "Loop" of start/7 
* CEs [42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65] --> Loop 23 

#### Loops of start/7 
* Loop 23: start(V1,V,V2,V10,V8,V9,V37) [] 

### Ranking functions of CR start(V1,V,V2,V10,V8,V9,V37) 

#### Partial ranking functions of CR start(V1,V,V2,V10,V8,V9,V37) 


### Resulting Chains:start(V1,V,V2,V10,V8,V9,V37) 
* [23]


### Merging Chains  start/7 into  External patterns of execution 
* [[23]] --> 1 


Computing Bounds
=====================================

#### Cost of loops [12] 

 * loop 12:fun(V1,V,Out) -> [fun(V1',V',Out')] 
0
#### Cost of phase [12]:fun(V1,V,Out) -> [fun(V1',V',Out')] 
0
#### Cost of phase [12]:fun(V1,V,Out) -> [fun(V1',V',Out')] 
0
#### Cost of chains of fun(V1,V,Out):
* Chain [[12],14]: 0
  with precondition: [Out=1,V1=V,V1>=1] 

* Chain [[12],13]: 0
  with precondition: [Out=0,V1>=1,V>=1] 

* Chain [14]: 0
  with precondition: [V1=0,V=0,Out=1] 

* Chain [13]: 0
  with precondition: [Out=0,V1>=0,V>=0] 


#### Cost of chains of eqNatList(V1,V,Out):
* Chain [18]: 1
  with precondition: [V+V1=Out+1,V1>=1,V>=1] 

* Chain [17]: 1
  with precondition: [Out=0,V1>=0,V>=0] 

* Chain [16]: 1
  with precondition: [V=1,Out=0,V1>=1] 

* Chain [15]: 1
  with precondition: [V+V1=Out,V1>=1,V>=1] 


#### Cost of loops [19] 

 * loop 19:nolexicord(V1,V,V2,V10,V8,V9,Out) -> [nolexicord(V1',V',V2',V10',V8',V9',Out')] 
2
#### Cost of phase [19]:nolexicord(V1,V,V2,V10,V8,V9,Out) -> [nolexicord(V1',V',V2',V10',V8',V9',Out')] 
2*it(19)+0
  Such that:it(19) =< V1
it(19) =< V1-V1'
it(19) =< V9
it(19) =< V9-V9'

#### Cost of phase [19]:nolexicord(V1,V,V2,V10,V8,V9,Out) -> [nolexicord(V1',V',V2',V10',V8',V9',Out')] 
2*it(19)+0
  Such that:it(19) =< V1
it(19) =< V1-V1'
it(19) =< V9
it(19) =< V9-V9'

#### Cost of phase [19]:nolexicord(V1,V,V2,V10,V8,V9,Out) -> [nolexicord(V1',V',V2',V10',V8',V9',Out')] 
2*it(19)+0
  Such that:it(19) =< V1
it(19) =< V1-V1'
it(19) =< V9
it(19) =< V9-V9'

#### Cost of chains of nolexicord(V1,V,V2,V10,V8,V9,Out):
* Chain [[19],22]: 2*it(19)+1
  Such that:it(19) =< V9

  with precondition: [Out=85,V1=V,V1=V2,V1=V10,V1=V8,V1>=2,V9>=1] 

* Chain [[19],21]: 2*it(19)+2
  Such that:it(19) =< V9

  with precondition: [Out=0,V1=V,V1=V2,V1=V10,V1=V8,V1>=1,V9>=1] 

* Chain [[19],20,21]: 2*it(19)+4
  Such that:it(19) =< V9

  with precondition: [Out=0,V1=V,V1=V2,V1=V10,V1=V8,V1>=2,V9>=2] 

* Chain [22]: 1
  with precondition: [V1=1,Out=85,V>=0,V2>=0,V10>=0,V8>=0,V9>=0] 

* Chain [21]: 2
  with precondition: [Out=0,V1>=0,V>=0,V2>=0,V10>=0,V8>=0,V9>=0] 

* Chain [20,21]: 4
  with precondition: [V1=1,V=1,V2=1,V10=1,V9=1,Out=0,V8>=1] 


#### Cost of chains of start(V1,V,V2,V10,V8,V9,V37):
* Chain [23]: 18*s(4)+6*s(7)+5
  Such that:aux(2) =< V9
aux(3) =< V37
s(4) =< aux(2)
s(7) =< aux(3)

  with precondition: [] 


Closed-form bounds of start(V1,V,V2,V10,V8,V9,V37): 
-------------------------------------
* Chain [23] with precondition: [] 
    - Upper bound: nat(V9)*18+5+nat(V37)*6 
    - Complexity: n 

### Maximum cost of start(V1,V,V2,V10,V8,V9,V37): nat(V9)*18+5+nat(V37)*6 
Asymptotic class: n 

Time statistics: 
-------------------------------------
* Partial evaluation computed in 41 ms.
* Invariants computed in 34 ms.
   - Backward Invariants 19 ms.
   - Transitive Invariants 3 ms.
* Refinement performed in 112 ms.
* Termination proved in 7 ms.
* Upper bounds computed in 72 ms.
   - Equation cost structures 40 ms.
   - Phase cost structures 7 ms.
   - Chain cost structures 20 ms.
   - Solving cost expressions 0 ms.
* Total analysis performed in 305 ms.



Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. recursive  : [list/2]
1. non_recursive  : [goal/2]
2. non_recursive  : [notEmpty/2]
3. non_recursive  : [start/1]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into list/2
1. SCC is completely evaluated into other SCCs
2. SCC is partially evaluated into notEmpty/2
3. SCC is partially evaluated into start/1

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations list/2 
* CE 6 is refined into CE [9] 
* CE 5 is refined into CE [10] 


#### Refined cost equations list/2 
* CE 9: list(V,Out) = 1
     [Out=1,V=0] 
* CE 10: list(V,Out) = 1+ list(W,Out)
     [V>=W+1,W>=0] 

### Cost equations --> "Loop" of list/2 
* CEs [10] --> Loop 6 
* CEs [9] --> Loop 7 

#### Loops of list/2 
* Loop 6: list(V,Out)->  list(V',Out)
                  [V>=V'+1,V'>=0] 
* Loop 7: list(V,Out) [Out=1,V=0] 

### Ranking functions of CR list(V,Out) 
* RF of phase [6]: [V]

#### Partial ranking functions of CR list(V,Out) 
* Partial RF of phase [6]:
  - RF of loop [6:1]:
    V


### Resulting Chains:list(V,Out) 
* [[6],7]
* [7]


### Merging Chains  list/2 into  External patterns of execution 
* [[7]] --> 1 
* [[7,[6]]] --> 2 


### Specialization of cost equations notEmpty/2 
* CE 7 is refined into CE [11] 
* CE 8 is refined into CE [12] 


#### Refined cost equations notEmpty/2 
* CE 11: notEmpty(V,Out) = 1
     [V>=1,Out=1] 
* CE 12: notEmpty(V,Out) = 1
     [Out=0,V=0] 

### Cost equations --> "Loop" of notEmpty/2 
* CEs [11] --> Loop 8 
* CEs [12] --> Loop 9 

#### Loops of notEmpty/2 
* Loop 8: notEmpty(V,Out) [V>=1,Out=1] 
* Loop 9: notEmpty(V,Out) [Out=0,V=0] 

### Ranking functions of CR notEmpty(V,Out) 

#### Partial ranking functions of CR notEmpty(V,Out) 


### Resulting Chains:notEmpty(V,Out) 
* [9]
* [8]


### Merging Chains  notEmpty/2 into  External patterns of execution 
* [[9]] --> 1 
* [[8]] --> 2 


### Specialization of cost equations start/1 
* CE 2 is refined into CE [13,14] 
* CE 3 is refined into CE [15,16] 
* CE 4 is refined into CE [17,18] 


#### Refined cost equations start/1 
* CE 13: start(V) = 0+ list(W,X):1
     [X=1,W=0,V=0] 
* CE 14: start(V) = 0+ list(V,W):2
     [V>=1,W=1] 
* CE 15: start(V) = 0+ notEmpty(W,X):1
     [X=0,W=0,V=0] 
* CE 16: start(V) = 0+ notEmpty(V,W):2
     [V>=1,W=1] 
* CE 17: start(V) = 1+ list(W,X):1
     [X=1,W=0,V=0] 
* CE 18: start(V) = 1+ list(V,W):2
     [V>=1,W=1] 

### Cost equations --> "Loop" of start/1 
* CEs [14,16,18] --> Loop 10 
* CEs [13,15,17] --> Loop 11 

#### Loops of start/1 
* Loop 10: start(V) [V>=1] 
* Loop 11: start(V) [V=0] 

### Ranking functions of CR start(V) 

#### Partial ranking functions of CR start(V) 


### Resulting Chains:start(V) 
* [11]
* [10]


### Merging Chains  start/1 into  External patterns of execution 
* [[11]] --> 1 
* [[10]] --> 2 


Computing Bounds
=====================================

#### Cost of loops [6] 

 * loop 6:list(V,Out) -> [list(V',Out')] 
1
#### Cost of phase [6]:list(V,Out) -> [list(V',Out')] 
1*it(6)+0
  Such that:it(6) =< V
it(6) =< V-V'

#### Cost of chains of list(V,Out):
* Chain [[6],7]: 1*it(6)+1
  Such that:it(6) =< V

  with precondition: [Out=1,V>=1] 

* Chain [7]: 1
  with precondition: [V=0,Out=1] 


#### Cost of chains of notEmpty(V,Out):
* Chain [9]: 1
  with precondition: [V=0,Out=0] 

* Chain [8]: 1
  with precondition: [Out=1,V>=1] 


#### Cost of chains of start(V):
* Chain [11]: 2
  with precondition: [V=0] 

* Chain [10]: 2*s(1)+2
  Such that:aux(1) =< V
s(1) =< aux(1)

  with precondition: [V>=1] 


Closed-form bounds of start(V): 
-------------------------------------
* Chain [11] with precondition: [V=0] 
    - Upper bound: 2 
    - Complexity: constant 
* Chain [10] with precondition: [V>=1] 
    - Upper bound: 2*V+2 
    - Complexity: n 

### Maximum cost of start(V): 2*V+2 
Asymptotic class: n 

Time statistics: 
-------------------------------------
* Partial evaluation computed in 3 ms.
* Invariants computed in 4 ms.
   - Backward Invariants 2 ms.
   - Transitive Invariants 1 ms.
* Refinement performed in 12 ms.
* Termination proved in 1 ms.
* Upper bounds computed in 8 ms.
   - Equation cost structures 3 ms.
   - Phase cost structures 2 ms.
   - Chain cost structures 1 ms.
   - Solving cost expressions 0 ms.
* Total analysis performed in 37 ms.


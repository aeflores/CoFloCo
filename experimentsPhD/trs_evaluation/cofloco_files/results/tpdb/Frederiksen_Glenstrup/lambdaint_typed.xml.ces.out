
Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. non_recursive  : [and/3]
1. non_recursive  : [appe1/2]
2. non_recursive  : [appe2/2]
3. recursive  : [fun3/3]
4. recursive [non_tail,multiple] : [eqTerm/3]
5. non_recursive  : [mklam/3]
6. non_recursive  : [fun2/5]
7. non_recursive  : [mkapp/3]
8. recursive [non_tail,multiple] : [fun/5,subst/4]
9. recursive [multiple] : [fun1/3,fun4/4,red/2]
10. non_recursive  : [islam/2]
11. non_recursive  : [isvar/2]
12. non_recursive  : [lambdaint/2]
13. non_recursive  : [lambody/2]
14. non_recursive  : [lamvar/2]
15. non_recursive  : [start/4]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into and/3
1. SCC is partially evaluated into appe1/2
2. SCC is partially evaluated into appe2/2
3. SCC is partially evaluated into fun3/3
4. SCC is partially evaluated into eqTerm/3
5. SCC is partially evaluated into mklam/3
6. SCC is partially evaluated into fun2/5
7. SCC is completely evaluated into other SCCs
8. SCC is partially evaluated into subst/4
9. SCC is partially evaluated into red/2
10. SCC is partially evaluated into islam/2
11. SCC is partially evaluated into isvar/2
12. SCC is completely evaluated into other SCCs
13. SCC is partially evaluated into lambody/2
14. SCC is partially evaluated into lamvar/2
15. SCC is partially evaluated into start/4

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations and/3 
* CE 59 is refined into CE [68] 
* CE 58 is refined into CE [69] 
* CE 56 is refined into CE [70] 
* CE 57 is refined into CE [71] 
* CE 55 is refined into CE [72] 


#### Refined cost equations and/3 
* CE 68: and(V1,V,Out) = 0
     [V>=0,V1>=0,Out=0] 
* CE 69: and(V1,V,Out) = 0
     [Out=2,V=2,V1=2] 
* CE 70: and(V1,V,Out) = 0
     [Out=1,V=1,V1=2] 
* CE 71: and(V1,V,Out) = 0
     [Out=1,V=2,V1=1] 
* CE 72: and(V1,V,Out) = 0
     [Out=1,V=1,V1=1] 

### Cost equations --> "Loop" of and/3 
* CEs [68] --> Loop 45 
* CEs [69] --> Loop 46 
* CEs [70] --> Loop 47 
* CEs [71] --> Loop 48 
* CEs [72] --> Loop 49 

#### Loops of and/3 
* Loop 45: and(V1,V,Out) [V>=0,V1>=0,Out=0] 
* Loop 46: and(V1,V,Out) [Out=2,V=2,V1=2] 
* Loop 47: and(V1,V,Out) [Out=1,V=1,V1=2] 
* Loop 48: and(V1,V,Out) [Out=1,V=2,V1=1] 
* Loop 49: and(V1,V,Out) [Out=1,V=1,V1=1] 

### Ranking functions of CR and(V1,V,Out) 

#### Partial ranking functions of CR and(V1,V,Out) 


### Resulting Chains:and(V1,V,Out) 
* [49]
* [48]
* [47]
* [46]
* [45]


### Merging Chains  and/3 into  External patterns of execution 
* [[49]] --> 1 
* [[48]] --> 2 
* [[47]] --> 3 
* [[46]] --> 4 
* [[45]] --> 5 


### Specialization of cost equations appe1/2 
* CE 53 is refined into CE [73] 
* CE 54 is refined into CE [74] 


#### Refined cost equations appe1/2 
* CE 73: appe1(V1,Out) = 1
     [V1>=Out+1,Out>=0] 
* CE 74: appe1(V1,Out) = 0
     [V1>=0,Out=0] 

### Cost equations --> "Loop" of appe1/2 
* CEs [73] --> Loop 50 
* CEs [74] --> Loop 51 

#### Loops of appe1/2 
* Loop 50: appe1(V1,Out) [V1>=Out+1,Out>=0] 
* Loop 51: appe1(V1,Out) [V1>=0,Out=0] 

### Ranking functions of CR appe1(V1,Out) 

#### Partial ranking functions of CR appe1(V1,Out) 


### Resulting Chains:appe1(V1,Out) 
* [51]
* [50]


### Merging Chains  appe1/2 into  External patterns of execution 
* [[51]] --> 1 
* [[50]] --> 2 


### Specialization of cost equations appe2/2 
* CE 51 is refined into CE [75] 
* CE 52 is refined into CE [76] 


#### Refined cost equations appe2/2 
* CE 75: appe2(V1,Out) = 1
     [V1>=Out+1,Out>=0] 
* CE 76: appe2(V1,Out) = 0
     [V1>=0,Out=0] 

### Cost equations --> "Loop" of appe2/2 
* CEs [75] --> Loop 52 
* CEs [76] --> Loop 53 

#### Loops of appe2/2 
* Loop 52: appe2(V1,Out) [V1>=Out+1,Out>=0] 
* Loop 53: appe2(V1,Out) [V1>=0,Out=0] 

### Ranking functions of CR appe2(V1,Out) 

#### Partial ranking functions of CR appe2(V1,Out) 


### Resulting Chains:appe2(V1,Out) 
* [53]
* [52]


### Merging Chains  appe2/2 into  External patterns of execution 
* [[53]] --> 1 
* [[52]] --> 2 


### Specialization of cost equations fun3/3 
* CE 64 is refined into CE [77] 
* CE 62 is refined into CE [78] 
* CE 61 is refined into CE [79] 
* CE 63 is refined into CE [80] 
* CE 60 is refined into CE [81] 


#### Refined cost equations fun3/3 
* CE 77: fun3(V1,V,Out) = 0
     [V>=0,V1>=0,Out=0] 
* CE 78: fun3(V1,V,Out) = 0
     [V1>=1,Out=1,V=0] 
* CE 79: fun3(V1,V,Out) = 0
     [V>=1,Out=1,V1=0] 
* CE 80: fun3(V1,V,Out) = 0
     [Out=2,V=0,V1=0] 
* CE 81: fun3(V1,V,Out) = 0+ fun3(W1,X1,Out)
     [X1>=0,W1>=0,X1+1=V,W1+1=V1] 

### Cost equations --> "Loop" of fun3/3 
* CEs [81] --> Loop 54 
* CEs [77] --> Loop 55 
* CEs [78] --> Loop 56 
* CEs [79] --> Loop 57 
* CEs [80] --> Loop 58 

#### Loops of fun3/3 
* Loop 54: fun3(V1,V,Out)->  fun3(V1',V',Out)
                  [V'>=0,V1'>=0,V'+1=V,V1'+1=V1] 
* Loop 55: fun3(V1,V,Out) [V>=0,V1>=0,Out=0] 
* Loop 56: fun3(V1,V,Out) [V1>=1,Out=1,V=0] 
* Loop 57: fun3(V1,V,Out) [V>=1,Out=1,V1=0] 
* Loop 58: fun3(V1,V,Out) [Out=2,V=0,V1=0] 

### Ranking functions of CR fun3(V1,V,Out) 
* RF of phase [54]: [V,V1]

#### Partial ranking functions of CR fun3(V1,V,Out) 
* Partial RF of phase [54]:
  - RF of loop [54:1]:
    V
    V1


### Resulting Chains:fun3(V1,V,Out) 
* [[54],58]
* [[54],57]
* [[54],56]
* [[54],55]
* [58]
* [57]
* [56]
* [55]


### Merging Chains  fun3/3 into  External patterns of execution 
* [[58]] --> 1 
* [[57]] --> 2 
* [[56]] --> 3 
* [[55],[55,[54]]] --> 4 
* [[57,[54]]] --> 5 
* [[56,[54]]] --> 6 
* [[58,[54]]] --> 7 


### Specialization of cost equations eqTerm/3 
* CE 37 is refined into CE [82] 
* CE 39 is refined into CE [83,84,85,86,87,88,89] 
* CE 40 is refined into CE [90] 
* CE 38 is refined into CE [91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109] 
* CE 36 is refined into CE [110,111,112,113,114] 


#### Refined cost equations eqTerm/3 
* CE 82: eqTerm(V1,V,Out) = 1
     [V>=1,V1>=1,Out=1] 
* CE 83: eqTerm(V1,V,Out) = 1+ fun3(W1,X1,Y1):1
     [Y1=2,X1=0,W1=0,Out=2,V=1,V1=1] 
* CE 84: eqTerm(V1,V,Out) = 1+ fun3(W1,X1,Y1):2
     [X1>=1,X1+1=V,Y1=1,W1=0,Out=1,V1=1] 
* CE 85: eqTerm(V1,V,Out) = 1+ fun3(W1,X1,Y1):3
     [W1>=1,W1+1=V1,Y1=1,X1=0,Out=1,V=1] 
* CE 86: eqTerm(V1,V,Out) = 1+ fun3(W1,X1,Y1):4
     [X1>=0,W1>=0,X1+1=V,W1+1=V1,Y1=0,Out=0] 
* CE 87: eqTerm(V1,V,Out) = 1+ fun3(W1,X1,Y1):5
     [X1>=W1+1,W1>=1,X1+1=V,W1+1=V1,Y1=1,Out=1] 
* CE 88: eqTerm(V1,V,Out) = 1+ fun3(W1,X1,Y1):6
     [W1>=X1+1,X1>=1,X1+1=V,W1+1=V1,Y1=1,Out=1] 
* CE 89: eqTerm(V1,V,Out) = 1+ fun3(W1,W1,X1):7
     [W1>=1,W1+1=V,W1+1=V1,X1=2,Out=2] 
* CE 90: eqTerm(V1,V,Out) = 0
     [V>=0,V1>=0,Out=0] 
* CE 91: eqTerm(V1,V,Out) = 1+ fun3(W1,X1,Y1):1+ eqTerm(Z1,A2,B2)+ and(C2,D2,E2):3
     [A2>=0,Z1>=0,A2+1=V,Z1+1=V1,B2=1,E2=1,D2=1,C2=2,Y1=2,X1=0,W1=0,Out=1] 
* CE 92: eqTerm(V1,V,Out) = 1+ fun3(W1,X1,Y1):1+ eqTerm(Z1,A2,B2)+ and(C2,D2,E2):4
     [A2>=0,Z1>=0,A2+1=V,Z1+1=V1,B2=2,E2=2,D2=2,C2=2,Y1=2,X1=0,W1=0,Out=2] 
* CE 93: eqTerm(V1,V,Out) = 1+ fun3(W1,X1,Y1):1+ eqTerm(Z1,A2,B2)+ and(C2,B2,D2):5
     [A2>=0,Z1>=0,B2>=0,A2+1=V,Z1+1=V1,D2=0,C2=2,Y1=2,X1=0,W1=0,Out=0] 
* CE 94: eqTerm(V1,V,Out) = 1+ fun3(W1,X1,Y1):2+ eqTerm(Z1,A2,B2)+ and(C2,D2,E2):1
     [A2>=0,Z1>=0,X1>=1,X1+A2+1=V,Z1+1=V1,B2=1,E2=1,D2=1,C2=1,Y1=1,W1=0,Out=1] 
* CE 95: eqTerm(V1,V,Out) = 1+ fun3(W1,X1,Y1):2+ eqTerm(Z1,A2,B2)+ and(C2,D2,E2):2
     [A2>=0,Z1>=0,X1>=1,X1+A2+1=V,Z1+1=V1,B2=2,E2=1,D2=2,C2=1,Y1=1,W1=0,Out=1] 
* CE 96: eqTerm(V1,V,Out) = 1+ fun3(W1,X1,Y1):2+ eqTerm(Z1,A2,B2)+ and(C2,B2,D2):5
     [A2>=0,Z1>=0,B2>=0,X1>=1,X1+A2+1=V,Z1+1=V1,D2=0,C2=1,Y1=1,W1=0,Out=0] 
* CE 97: eqTerm(V1,V,Out) = 1+ fun3(W1,X1,Y1):3+ eqTerm(Z1,A2,B2)+ and(C2,D2,E2):1
     [A2>=0,Z1>=0,W1>=1,W1+Z1+1=V1,A2+1=V,B2=1,E2=1,D2=1,C2=1,Y1=1,X1=0,Out=1] 
* CE 98: eqTerm(V1,V,Out) = 1+ fun3(W1,X1,Y1):3+ eqTerm(Z1,A2,B2)+ and(C2,D2,E2):2
     [A2>=0,Z1>=0,W1>=1,W1+Z1+1=V1,A2+1=V,B2=2,E2=1,D2=2,C2=1,Y1=1,X1=0,Out=1] 
* CE 99: eqTerm(V1,V,Out) = 1+ fun3(W1,X1,Y1):3+ eqTerm(Z1,A2,B2)+ and(C2,B2,D2):5
     [A2>=0,Z1>=0,B2>=0,W1>=1,W1+Z1+1=V1,A2+1=V,D2=0,C2=1,Y1=1,X1=0,Out=0] 
* CE 100: eqTerm(V1,V,Out) = 1+ fun3(W1,X1,Y1):4+ eqTerm(Z1,A2,B2)+ and(C2,B2,D2):5
     [A2>=0,Z1>=0,B2>=0,X1>=0,W1>=0,X1+A2+1=V,W1+Z1+1=V1,D2=0,C2=0,Y1=0,Out=0] 
* CE 101: eqTerm(V1,V,Out) = 1+ fun3(W1,X1,Y1):5+ eqTerm(Z1,A2,B2)+ and(C2,D2,E2):1
     [X1>=W1+1,A2>=0,Z1>=0,W1>=1,X1+A2+1=V,W1+Z1+1=V1,B2=1,E2=1,D2=1,C2=1,Y1=1,Out=1] 
* CE 102: eqTerm(V1,V,Out) = 1+ fun3(W1,X1,Y1):5+ eqTerm(Z1,A2,B2)+ and(C2,D2,E2):2
     [X1>=W1+1,A2>=0,Z1>=0,W1>=1,X1+A2+1=V,W1+Z1+1=V1,B2=2,E2=1,D2=2,C2=1,Y1=1,Out=1] 
* CE 103: eqTerm(V1,V,Out) = 1+ fun3(W1,X1,Y1):5+ eqTerm(Z1,A2,B2)+ and(C2,B2,D2):5
     [X1>=W1+1,A2>=0,Z1>=0,B2>=0,W1>=1,X1+A2+1=V,W1+Z1+1=V1,D2=0,C2=1,Y1=1,Out=0] 
* CE 104: eqTerm(V1,V,Out) = 1+ fun3(W1,X1,Y1):6+ eqTerm(Z1,A2,B2)+ and(C2,D2,E2):1
     [W1>=X1+1,A2>=0,Z1>=0,X1>=1,X1+A2+1=V,W1+Z1+1=V1,B2=1,E2=1,D2=1,C2=1,Y1=1,Out=1] 
* CE 105: eqTerm(V1,V,Out) = 1+ fun3(W1,X1,Y1):6+ eqTerm(Z1,A2,B2)+ and(C2,D2,E2):2
     [W1>=X1+1,A2>=0,Z1>=0,X1>=1,X1+A2+1=V,W1+Z1+1=V1,B2=2,E2=1,D2=2,C2=1,Y1=1,Out=1] 
* CE 106: eqTerm(V1,V,Out) = 1+ fun3(W1,X1,Y1):6+ eqTerm(Z1,A2,B2)+ and(C2,B2,D2):5
     [W1>=X1+1,A2>=0,Z1>=0,B2>=0,X1>=1,X1+A2+1=V,W1+Z1+1=V1,D2=0,C2=1,Y1=1,Out=0] 
* CE 107: eqTerm(V1,V,Out) = 1+ fun3(W1,W1,X1):7+ eqTerm(Y1,Z1,A2)+ and(B2,C2,D2):3
     [Z1>=0,Y1>=0,W1>=1,W1+Z1+1=V,W1+Y1+1=V1,A2=1,D2=1,C2=1,B2=2,X1=2,Out=1] 
* CE 108: eqTerm(V1,V,Out) = 1+ fun3(W1,W1,X1):7+ eqTerm(Y1,Z1,A2)+ and(B2,C2,D2):4
     [Z1>=0,Y1>=0,W1>=1,W1+Z1+1=V,W1+Y1+1=V1,A2=2,D2=2,C2=2,B2=2,X1=2,Out=2] 
* CE 109: eqTerm(V1,V,Out) = 1+ fun3(W1,W1,X1):7+ eqTerm(Y1,Z1,A2)+ and(B2,A2,C2):5
     [Z1>=0,Y1>=0,A2>=0,W1>=1,W1+Z1+1=V,W1+Y1+1=V1,C2=0,B2=2,X1=2,Out=0] 
* CE 110: eqTerm(V1,V,Out) = 1+ eqTerm(W1,X1,Y1)+ eqTerm(Z1,A2,B2)+ and(C2,D2,E2):1
     [A2>=0,Z1>=0,X1>=0,W1>=0,X1+A2+1=V,W1+Z1+1=V1,B2=1,Y1=1,E2=1,D2=1,C2=1,Out=1] 
* CE 111: eqTerm(V1,V,Out) = 1+ eqTerm(W1,X1,Y1)+ eqTerm(Z1,A2,B2)+ and(C2,D2,E2):2
     [A2>=0,Z1>=0,X1>=0,W1>=0,X1+A2+1=V,W1+Z1+1=V1,B2=2,Y1=1,E2=1,D2=2,C2=1,Out=1] 
* CE 112: eqTerm(V1,V,Out) = 1+ eqTerm(W1,X1,Y1)+ eqTerm(Z1,A2,B2)+ and(C2,D2,E2):3
     [A2>=0,Z1>=0,X1>=0,W1>=0,X1+A2+1=V,W1+Z1+1=V1,B2=1,Y1=2,E2=1,D2=1,C2=2,Out=1] 
* CE 113: eqTerm(V1,V,Out) = 1+ eqTerm(W1,X1,Y1)+ eqTerm(Z1,A2,B2)+ and(C2,D2,E2):4
     [A2>=0,Z1>=0,X1>=0,W1>=0,X1+A2+1=V,W1+Z1+1=V1,B2=2,Y1=2,E2=2,D2=2,C2=2,Out=2] 
* CE 114: eqTerm(V1,V,Out) = 1+ eqTerm(W1,X1,Y1)+ eqTerm(Z1,A2,B2)+ and(Y1,B2,C2):5
     [A2>=0,Z1>=0,X1>=0,W1>=0,B2>=0,Y1>=0,X1+A2+1=V,W1+Z1+1=V1,C2=0,Out=0] 

### Cost equations --> "Loop" of eqTerm/3 
* CEs [113] --> Loop 59 
* CEs [112] --> Loop 60 
* CEs [111] --> Loop 61 
* CEs [110] --> Loop 62 
* CEs [114] --> Loop 63 
* CEs [108] --> Loop 64 
* CEs [92] --> Loop 65 
* CEs [105] --> Loop 66 
* CEs [102] --> Loop 67 
* CEs [98] --> Loop 68 
* CEs [95] --> Loop 69 
* CEs [104] --> Loop 70 
* CEs [101] --> Loop 71 
* CEs [107] --> Loop 72 
* CEs [97] --> Loop 73 
* CEs [94] --> Loop 74 
* CEs [91] --> Loop 75 
* CEs [109] --> Loop 76 
* CEs [99] --> Loop 77 
* CEs [96] --> Loop 78 
* CEs [93,100,103,106] --> Loop 79 
* CEs [89] --> Loop 80 
* CEs [86,90] --> Loop 81 
* CEs [85] --> Loop 82 
* CEs [82,84,87,88] --> Loop 83 
* CEs [83] --> Loop 84 

#### Loops of eqTerm/3 
* Loop 59: eqTerm(V1,V,Out)->  eqTerm(V1',V',Out')  eqTerm(V1'2,V'2,Out'2)
                  [V>=V'+1,V1>=V1'+1,V'>=0,V1'>=0,V'+V'2+1=V,V1'+V1'2+1=V1,Out'2=2,Out'=2,Out=2] 
* Loop 60: eqTerm(V1,V,Out)->  eqTerm(V1',V',Out')  eqTerm(V1'2,V'2,Out'2)
                  [V>=V'+1,V1>=V1'+1,V'>=0,V1'>=0,V'+V'2+1=V,V1'+V1'2+1=V1,Out'2=1,Out'=2,Out=1] 
* Loop 61: eqTerm(V1,V,Out)->  eqTerm(V1',V',Out')  eqTerm(V1'2,V'2,Out'2)
                  [V>=V'+1,V1>=V1'+1,V'>=0,V1'>=0,V'+V'2+1=V,V1'+V1'2+1=V1,Out'2=2,Out'=1,Out=1] 
* Loop 62: eqTerm(V1,V,Out)->  eqTerm(V1',V',Out')  eqTerm(V1'2,V'2,Out'2)
                  [V>=V'+1,V1>=V1'+1,V'>=0,V1'>=0,V'+V'2+1=V,V1'+V1'2+1=V1,Out'2=1,Out'=1,Out=1] 
* Loop 63: eqTerm(V1,V,Out)->  eqTerm(V1',V',Out')  eqTerm(V1'2,V'2,Out'2)
                  [V>=V'+1,V1>=V1'+1,Out'2>=0,Out'>=0,V'>=0,V1'>=0,V'+V'2+1=V,V1'+V1'2+1=V1,Out=0] 
* Loop 64: eqTerm(V1,V,Out)->  eqTerm(V1',V',Out')
                  [V+V1'>=V1,V1>=V1'+2,V1'>=0,V1+V'=V+V1',Out'=2,Out=2] 
* Loop 65: eqTerm(V1,V,Out)->  eqTerm(V1',V',Out')
                  [V>=1,V1>=1,V=V'+1,V1=V1'+1,Out'=2,Out=2] 
* Loop 66: eqTerm(V1,V,Out)->  eqTerm(V1',V',Out')
                  [V1+V'>=V+V1'+1,V>=V'+2,V'>=0,V1'>=0,Out'=2,Out=1] 
* Loop 67: eqTerm(V1,V,Out)->  eqTerm(V1',V',Out')
                  [V+V1'>=V1+V'+1,V1>=V1'+2,V'>=0,V1'>=0,Out'=2,Out=1] 
* Loop 68: eqTerm(V1,V,Out)->  eqTerm(V1',V',Out')
                  [V1>=V1'+2,V1'>=0,V>=1,V=V'+1,Out'=2,Out=1] 
* Loop 69: eqTerm(V1,V,Out)->  eqTerm(V1',V',Out')
                  [V>=V'+2,V'>=0,V1>=1,V1=V1'+1,Out'=2,Out=1] 
* Loop 70: eqTerm(V1,V,Out)->  eqTerm(V1',V',Out')
                  [V1+V'>=V+V1'+1,V>=V'+2,V'>=0,V1'>=0,Out'=1,Out=1] 
* Loop 71: eqTerm(V1,V,Out)->  eqTerm(V1',V',Out')
                  [V+V1'>=V1+V'+1,V1>=V1'+2,V'>=0,V1'>=0,Out'=1,Out=1] 
* Loop 72: eqTerm(V1,V,Out)->  eqTerm(V1',V',Out')
                  [V+V1'>=V1,V1>=V1'+2,V1'>=0,V1+V'=V+V1',Out'=1,Out=1] 
* Loop 73: eqTerm(V1,V,Out)->  eqTerm(V1',V',Out')
                  [V1>=V1'+2,V1'>=0,V>=1,V=V'+1,Out'=1,Out=1] 
* Loop 74: eqTerm(V1,V,Out)->  eqTerm(V1',V',Out')
                  [V>=V'+2,V'>=0,V1>=1,V1=V1'+1,Out'=1,Out=1] 
* Loop 75: eqTerm(V1,V,Out)->  eqTerm(V1',V',Out')
                  [V>=1,V1>=1,V=V'+1,V1=V1'+1,Out'=1,Out=1] 
* Loop 76: eqTerm(V1,V,Out)->  eqTerm(V1',V',Out')
                  [V+V1'>=V1,V1>=V1'+2,Out'>=0,V1'>=0,V1+V'=V+V1',Out=0] 
* Loop 77: eqTerm(V1,V,Out)->  eqTerm(V1',V',Out')
                  [V1>=V1'+2,Out'>=0,V1'>=0,V>=1,V=V'+1,Out=0] 
* Loop 78: eqTerm(V1,V,Out)->  eqTerm(V1',V',Out')
                  [V>=V'+2,Out'>=0,V'>=0,V1>=1,V1=V1'+1,Out=0] 
* Loop 79: eqTerm(V1,V,Out)->  eqTerm(V1',V',Out')
                  [V>=V'+1,V1>=V1'+1,Out'>=0,V'>=0,V1'>=0,Out=0] 
* Loop 80: eqTerm(A,A,B) [A>=2,B=2] 
* Loop 81: eqTerm(V1,V,Out) [V>=0,V1>=0,Out=0] 
* Loop 82: eqTerm(V1,V,Out) [V1>=2,Out=1,V=1] 
* Loop 83: eqTerm(V1,V,Out) [V>=1,V1>=1,Out=1] 
* Loop 84: eqTerm(V1,V,Out) [Out=2,V=1,V1=1] 

### Ranking functions of CR eqTerm(V1,V,Out) 
* RF of phase [59,64,65]: [V,V1]
* RF of phase [60,61,62,70,71,72,73,74,75]: [V,V1]
* RF of phase [63,76,77,78,79]: [V,V1]

#### Partial ranking functions of CR eqTerm(V1,V,Out) 
* Partial RF of phase [59,64,65]:
  - RF of loop [59:1,59:2,65:1]:
    V
    V1
  - RF of loop [64:1]:
    V-1
    V1-1
* Partial RF of phase [60,61,62,70,71,72,73,74,75]:
  - RF of loop [60:1,60:2,61:1,61:2,62:1,62:2,73:1,75:1]:
    V
  - RF of loop [60:1,60:2,61:1,61:2,62:1,62:2,74:1,75:1]:
    V1
  - RF of loop [70:1]:
    V1/3-2/3
  - RF of loop [70:1,74:1]:
    V/2-1/2
  - RF of loop [71:1]:
    V/3-2/3
  - RF of loop [71:1,73:1]:
    V1/2-1/2
  - RF of loop [72:1]:
    V-1
    V1-1
* Partial RF of phase [63,76,77,78,79]:
  - RF of loop [63:1,63:2,77:1,79:1]:
    V
  - RF of loop [63:1,63:2,78:1,79:1]:
    V1
  - RF of loop [76:1]:
    V-1
    V1-1
  - RF of loop [77:1]:
    V1/2-1/2
  - RF of loop [78:1]:
    V/2-1/2


### Resulting Chains:eqTerm(V1,V,Out) 
* [84]
* [83]
* [82]
* [81]
* [80]
* [69,84]
* [69,80]
* [68,84]
* [68,80]
* [67,84]
* [67,80]
* [66,84]
* [66,80]
* [multiple([63,76,77,78,79],[[multiple([60,61,62,70,71,72,73,74,75],[[multiple([59,64,65],[[84],[80]])],[84],[83],[82],[80],[69,multiple([59,64,65],[[84],[80]])],[69,84],[69,80],[68,multiple([59,64,65],[[84],[80]])],[68,84],[68,80],[67,multiple([59,64,65],[[84],[80]])],[67,84],[67,80],[66,multiple([59,64,65],[[84],[80]])],[66,84],[66,80]])],[multiple([59,64,65],[[84],[80]])],[84],[83],[82],[81],[80],[69,multiple([59,64,65],[[84],[80]])],[69,84],[69,80],[68,multiple([59,64,65],[[84],[80]])],[68,84],[68,80],[67,multiple([59,64,65],[[84],[80]])],[67,84],[67,80],[66,multiple([59,64,65],[[84],[80]])],[66,84],[66,80]])]
* [multiple([60,61,62,70,71,72,73,74,75],[[multiple([59,64,65],[[84],[80]])],[84],[83],[82],[80],[69,multiple([59,64,65],[[84],[80]])],[69,84],[69,80],[68,multiple([59,64,65],[[84],[80]])],[68,84],[68,80],[67,multiple([59,64,65],[[84],[80]])],[67,84],[67,80],[66,multiple([59,64,65],[[84],[80]])],[66,84],[66,80]])]
* [multiple([59,64,65],[[84],[80]])]
* [69,multiple([59,64,65],[[84],[80]])]
* [68,multiple([59,64,65],[[84],[80]])]
* [67,multiple([59,64,65],[[84],[80]])]
* [66,multiple([59,64,65],[[84],[80]])]


### Merging Chains  eqTerm/3 into  External patterns of execution 
* [[84]] --> 1 
* [[80,66],[84,66],[multiple([59,64,65],[[84],[80]]),66],[80,67],[84,67],[multiple([59,64,65],[[84],[80]]),67],[80,68],[multiple([59,64,65],[[84],[80]]),68],[80,69],[84,69],[multiple([59,64,65],[[84],[80]]),69],[83],[multiple([60,61,62,70,71,72,73,74,75],[[multiple([59,64,65],[[84],[80]])],[84],[83],[82],[80],[69,multiple([59,64,65],[[84],[80]])],[69,84],[69,80],[68,multiple([59,64,65],[[84],[80]])],[68,84],[68,80],[67,multiple([59,64,65],[[84],[80]])],[67,84],[67,80],[66,multiple([59,64,65],[[84],[80]])],[66,84],[66,80]])]] --> 2 
* [[82]] --> 3 
* [[84,68]] --> 4 
* [[81],[multiple([63,76,77,78,79],[[multiple([60,61,62,70,71,72,73,74,75],[[multiple([59,64,65],[[84],[80]])],[84],[83],[82],[80],[69,multiple([59,64,65],[[84],[80]])],[69,84],[69,80],[68,multiple([59,64,65],[[84],[80]])],[68,84],[68,80],[67,multiple([59,64,65],[[84],[80]])],[67,84],[67,80],[66,multiple([59,64,65],[[84],[80]])],[66,84],[66,80]])],[multiple([59,64,65],[[84],[80]])],[84],[83],[82],[81],[80],[69,multiple([59,64,65],[[84],[80]])],[69,84],[69,80],[68,multiple([59,64,65],[[84],[80]])],[68,84],[68,80],[67,multiple([59,64,65],[[84],[80]])],[67,84],[67,80],[66,multiple([59,64,65],[[84],[80]])],[66,84],[66,80]])]] --> 5 
* [[80],[multiple([59,64,65],[[84],[80]])]] --> 6 


### Specialization of cost equations mklam/3 
* CE 34 is refined into CE [115] 
* CE 35 is refined into CE [116] 


#### Refined cost equations mklam/3 
* CE 115: mklam(V1,V,Out) = 1
     [V>=0,V1>=1,V1+V=Out] 
* CE 116: mklam(V1,V,Out) = 0
     [V>=0,V1>=0,Out=0] 

### Cost equations --> "Loop" of mklam/3 
* CEs [115] --> Loop 85 
* CEs [116] --> Loop 86 

#### Loops of mklam/3 
* Loop 85: mklam(V1,V,Out) [V>=0,V1>=1,V1+V=Out] 
* Loop 86: mklam(V1,V,Out) [V>=0,V1>=0,Out=0] 

### Ranking functions of CR mklam(V1,V,Out) 

#### Partial ranking functions of CR mklam(V1,V,Out) 


### Resulting Chains:mklam(V1,V,Out) 
* [86]
* [85]


### Merging Chains  mklam/3 into  External patterns of execution 
* [[86]] --> 1 
* [[85]] --> 2 


### Specialization of cost equations fun2/5 
* CE 67 is refined into CE [117] 
* CE 66 is refined into CE [118] 
* CE 65 is refined into CE [119] 


#### Refined cost equations fun2/5 
* CE 117: fun2(V1,V,V2,V84,Out) = 0
     [V84>=0,V2>=0,V>=0,V1>=0,Out=0] 
* CE 118: fun2(A,B,C,D,C) = 0
     [D>=0,C>=0,B>=0,A=2] 
* CE 119: fun2(A,B,C,D,D) = 0
     [D>=0,C>=0,B>=0,A=1] 

### Cost equations --> "Loop" of fun2/5 
* CEs [117] --> Loop 87 
* CEs [118] --> Loop 88 
* CEs [119] --> Loop 89 

#### Loops of fun2/5 
* Loop 87: fun2(V1,V,V2,V84,Out) [V84>=0,V2>=0,V>=0,V1>=0,Out=0] 
* Loop 88: fun2(A,B,C,D,C) [D>=0,C>=0,B>=0,A=2] 
* Loop 89: fun2(A,B,C,D,D) [D>=0,C>=0,B>=0,A=1] 

### Ranking functions of CR fun2(V1,V,V2,V84,Out) 

#### Partial ranking functions of CR fun2(V1,V,V2,V84,Out) 


### Resulting Chains:fun2(V1,V,V2,V84,Out) 
* [89]
* [88]
* [87]


### Merging Chains  fun2/5 into  External patterns of execution 
* [[89]] --> 1 
* [[88]] --> 2 
* [[87]] --> 3 


### Specialization of cost equations subst/4 
* CE 29 is refined into CE [120,121] 
* CE 32 is refined into CE [122,123,124,125,126,127,128,129,130,131,132] 
* CE 28 is refined into CE [133,134,135,136,137,138] 
* CE 33 is refined into CE [139] 
* CE 31 is refined into CE [140] 
* CE 30 is refined into CE [141,142,143,144,145,146] 


#### Refined cost equations subst/4 
* CE 120: subst(A,B,C,C) = 1+ eqTerm(D,E,F):1
     [C>=1,B>=0,F=2,E=1,D=1,A=1] 
* CE 121: subst(A,B,C,C) = 1+ eqTerm(A,A,D):6
     [C>=A,A>=2,B>=0,D=2] 
* CE 122: subst(A,B,C,B) = 1+ eqTerm(D,E,F):1+ fun2(G,H,B,I,B):2
     [B>=0,I=1,H=1,G=2,F=2,E=1,D=1,C=1,A=1] 
* CE 123: subst(V1,V,V2,Out) = 1+ eqTerm(W2,X2,Y2):1+ fun2(Z2,A3,V,B3,C3):3
     [V>=0,C3=0,B3=1,A3=1,Z2=2,Y2=2,X2=1,W2=1,Out=0,V2=1,V1=1] 
* CE 124: subst(A,B,C,C) = 1+ eqTerm(A,C,D):2+ fun2(E,A,B,C,C):1
     [C>=1,B>=0,A>=1,E=1,D=1] 
* CE 125: subst(V1,V,V2,Out) = 1+ eqTerm(V1,V2,W2):2+ fun2(X2,V1,V,V2,Y2):3
     [V2>=1,V>=0,V1>=1,Y2=0,X2=1,W2=1,Out=0] 
* CE 126: subst(V1,V,V2,Out) = 1+ eqTerm(V1,W2,X2):3+ fun2(Y2,V1,V,Z2,A3):1
     [V>=0,V1>=2,A3=1,Z2=1,Y2=1,X2=1,W2=1,Out=1,V2=1] 
* CE 127: subst(V1,V,V2,Out) = 1+ eqTerm(V1,W2,X2):3+ fun2(Y2,V1,V,Z2,A3):3
     [V>=0,V1>=2,A3=0,Z2=1,Y2=1,X2=1,W2=1,Out=0,V2=1] 
* CE 128: subst(V1,V,V2,Out) = 1+ eqTerm(V1,W2,X2):4+ fun2(Y2,V1,V,Z2,A3):1
     [V>=0,V1>=3,A3=2,Z2=2,Y2=1,X2=1,W2=2,Out=2,V2=2] 
* CE 129: subst(V1,V,V2,Out) = 1+ eqTerm(V1,W2,X2):4+ fun2(Y2,V1,V,Z2,A3):3
     [V>=0,V1>=3,A3=0,Z2=2,Y2=1,X2=1,W2=2,Out=0,V2=2] 
* CE 130: subst(V1,V,V2,Out) = 1+ eqTerm(V1,V2,W2):5+ fun2(X2,V1,V,V2,Y2):3
     [V2>=1,V>=0,V1>=0,Y2=0,X2=0,W2=0,Out=0] 
* CE 131: subst(A,B,A,B) = 1+ eqTerm(A,A,C):6+ fun2(D,A,B,A,B):2
     [B>=0,A>=2,D=2,C=2] 
* CE 132: subst(A,B,A,C) = 1+ eqTerm(A,A,D):6+ fun2(E,A,B,A,F):3
     [B>=0,A>=2,F=0,E=2,D=2,C=0] 
* CE 133: subst(V1,V,V2,Out) = 1+ eqTerm(W2,X2,Y2):1
     [V2>=1,V>=0,Y2=2,X2=1,W2=1,Out=0,V1=1] 
* CE 134: subst(V1,V,V2,Out) = 1+ eqTerm(V1,W2,X2):2
     [V2>=W2,W2>=1,V1>=1,V>=0,X2=1,Out=0] 
* CE 135: subst(V1,V,V2,Out) = 1+ eqTerm(V1,W2,X2):3
     [V1>=2,V2>=1,V>=0,X2=1,W2=1,Out=0] 
* CE 136: subst(V1,V,V2,Out) = 1+ eqTerm(V1,W2,X2):4
     [V1>=3,V2>=2,V>=0,X2=1,W2=2,Out=0] 
* CE 137: subst(V1,V,V2,Out) = 1+ eqTerm(V1,W2,X2):5
     [V2>=W2,W2>=1,V1>=0,V>=0,X2=0,Out=0] 
* CE 138: subst(V1,V,V2,Out) = 1+ eqTerm(V1,V1,W2):6
     [V2>=V1,V1>=2,V>=0,W2=2,Out=0] 
* CE 139: subst(V1,V,V2,Out) = 0
     [V2>=0,V>=0,V1>=0,Out=0] 
* CE 140: subst(V1,V,V2,Out) = 2+ subst(V1,V,W2,X2)+ subst(V1,V,Y2,Z2)
     [Z2>=0,Y2>=0,X2>=0,W2>=0,V>=0,V1>=0,X2+Z2+1=Out,W2+Y2+1=V2] 
* CE 141: subst(V1,V,V2,Out) = 1+ eqTerm(V1,W2,X2):2+ subst(V1,V,Y2,Z2)+ mklam(A3,Z2,B3):1
     [V2>=A3,V2>=W2,Z2>=0,A3>=1,W2>=1,V1>=1,V>=0,A3+Y2=V2,B3=0,X2=1,Out=0] 
* CE 142: subst(V1,V,V2,Out) = 1+ eqTerm(V1,W2,X2):2+ subst(V1,V,Y2,Z2)+ mklam(A3,B3,Out):2
     [Out>=A3,V2>=A3,V2>=W2,A3>=1,W2>=1,V1>=1,V>=0,Out=A3+Z2,Out=A3+B3,A3+Y2=V2,X2=1] 
* CE 143: subst(V1,V,V2,Out) = 1+ eqTerm(V1,W2,X2):3+ subst(V1,V,Y2,Z2)+ mklam(A3,Z2,B3):1
     [V2>=A3,Z2>=0,A3>=1,V1>=2,V>=0,A3+Y2=V2,B3=0,X2=1,W2=1,Out=0] 
* CE 144: subst(V1,V,V2,Out) = 1+ eqTerm(V1,W2,X2):3+ subst(V1,V,Y2,Z2)+ mklam(A3,B3,Out):2
     [Out>=A3,V2>=A3,A3>=1,V1>=2,V>=0,Out=A3+Z2,Out=A3+B3,A3+Y2=V2,X2=1,W2=1] 
* CE 145: subst(V1,V,V2,Out) = 1+ eqTerm(V1,W2,X2):4+ subst(V1,V,Y2,Z2)+ mklam(A3,Z2,B3):1
     [V2>=A3,Z2>=0,A3>=1,V1>=3,V2>=2,V>=0,A3+Y2=V2,B3=0,X2=1,W2=2,Out=0] 
* CE 146: subst(V1,V,V2,Out) = 1+ eqTerm(V1,W2,X2):4+ subst(V1,V,Y2,Z2)+ mklam(A3,B3,Out):2
     [Out>=A3,V2>=A3,A3>=1,V1>=3,V2>=2,V>=0,Out=A3+Z2,Out=A3+B3,A3+Y2=V2,X2=1,W2=2] 

### Cost equations --> "Loop" of subst/4 
* CEs [142,144,146] --> Loop 90 
* CEs [141,143,145] --> Loop 91 
* CEs [140] --> Loop 92 
* CEs [131] --> Loop 93 
* CEs [132] --> Loop 94 
* CEs [128] --> Loop 95 
* CEs [129] --> Loop 96 
* CEs [126] --> Loop 97 
* CEs [127] --> Loop 98 
* CEs [120,121,124] --> Loop 99 
* CEs [122] --> Loop 100 
* CEs [123,125,130,133,134,135,136,137,138,139] --> Loop 101 

#### Loops of subst/4 
* Loop 90: subst(V1,V,V2,Out)->  subst(V1,V,V2',Out')
                  [Out+V2'>=V2,V2>=V2'+1,V2'>=0,V>=0,V1>=1,V2+Out'=Out+V2'] 
* Loop 91: subst(V1,V,V2,Out)->  subst(V1,V,V2',Out')
                  [V2>=V2'+1,Out'>=0,V2'>=0,V>=0,V1>=1,Out=0] 
* Loop 92: subst(V1,V,V2,Out)->  subst(V1,V,V2',Out')  subst(V1,V,V2'2,Out'2)
                  [Out'2>=0,V2'2>=0,Out'>=0,V2'>=0,V>=0,V1>=0,Out'+Out'2+1=Out,V2'+V2'2+1=V2] 
* Loop 93: subst(A,B,A,B) [B>=0,A>=2] 
* Loop 94: subst(A,B,A,C) [B>=0,A>=2,C=0] 
* Loop 95: subst(V1,V,V2,Out) [V>=0,V1>=3,Out=2,V2=2] 
* Loop 96: subst(V1,V,V2,Out) [V>=0,V1>=3,Out=0,V2=2] 
* Loop 97: subst(V1,V,V2,Out) [V>=0,V1>=2,Out=1,V2=1] 
* Loop 98: subst(V1,V,V2,Out) [V>=0,V1>=2,Out=0,V2=1] 
* Loop 99: subst(A,B,C,C) [C>=1,B>=0,A>=1] 
* Loop 100: subst(A,B,C,B) [B>=0,C=1,A=1] 
* Loop 101: subst(V1,V,V2,Out) [V2>=0,V>=0,V1>=0,Out=0] 

### Ranking functions of CR subst(V1,V,V2,Out) 
* RF of phase [90,91,92]: [V2]

#### Partial ranking functions of CR subst(V1,V,V2,Out) 
* Partial RF of phase [90,91,92]:
  - RF of loop [90:1,91:1,92:1,92:2]:
    V2


### Resulting Chains:subst(V1,V,V2,Out) 
* [101]
* [100]
* [99]
* [98]
* [97]
* [96]
* [95]
* [94]
* [93]
* [multiple([90,91,92],[[101],[100],[99],[98],[97],[96],[95],[94],[93]])]


### Merging Chains  subst/4 into  External patterns of execution 
* [[100],[multiple([90,91,92],[[101],[100],[99],[98],[97],[96],[95],[94],[93]])]] --> 1 
* [[98],[101]] --> 2 
* [[97],[99]] --> 3 
* [[96]] --> 4 
* [[95]] --> 5 
* [[94]] --> 6 
* [[93]] --> 7 


### Specialization of cost equations red/2 
* CE 26 is refined into CE [147] 
* CE 27 is refined into CE [148] 
* CE 25 is refined into CE [149] 
* CE 24 is refined into CE [150,151,152,153,154,155,156] 
* CE 23 is refined into CE [157] 
* CE 22 is refined into CE [158] 


#### Refined cost equations red/2 
* CE 147: red(A,A) = 1
     [A>=1] 
* CE 148: red(V1,Out) = 0
     [V1>=0,Out=0] 
* CE 149: red(V1,Out) = 1+ red(W1,X1)
     [V1>=W1+1,X1>=0,W1>=0,Out=0] 
* CE 150: red(V1,Out) = 1+ red(W1,X1)+ red(Y1,Z1)+ subst(A2,Z1,B2,C2):1+ red(C2,Out)
     [V1>=Y1+1,V1>=W1+1,Y1>=0,W1>=0,C2>=0,B2>=1,Z1>=0,A2>=1,A2+B2=X1] 
* CE 151: red(V1,Out) = 1+ red(W1,X1)+ red(Y1,Z1)+ subst(A2,Z1,B2,C2):2+ red(D2,Out)
     [V1>=Y1+1,V1>=W1+1,Y1>=0,W1>=0,B2>=0,Z1>=0,A2>=1,A2+B2=X1,D2=0,C2=0] 
* CE 152: red(V1,Out) = 1+ red(W1,X1)+ red(Y1,Z1)+ subst(A2,Z1,B2,B2):3+ red(B2,Out)
     [V1>=Y1+1,V1>=W1+1,Y1>=0,W1>=0,B2>=1,Z1>=0,A2>=1,A2+B2=X1] 
* CE 153: red(V1,Out) = 1+ red(W1,X1)+ red(Y1,Z1)+ subst(A2,Z1,B2,C2):4+ red(D2,Out)
     [V1>=Y1+1,V1>=W1+1,Y1>=0,W1>=0,Z1>=0,A2>=3,A2+2=X1,D2=0,C2=0,B2=2] 
* CE 154: red(V1,Out) = 1+ red(W1,X1)+ red(Y1,Z1)+ subst(A2,Z1,B2,C2):5+ red(D2,Out)
     [V1>=Y1+1,V1>=W1+1,Y1>=0,W1>=0,Z1>=0,A2>=3,A2+2=X1,D2=2,C2=2,B2=2] 
* CE 155: red(V1,Out) = 1+ red(W1,X1)+ red(Y1,Z1)+ subst(A2,Z1,A2,B2):6+ red(C2,Out)
     [V1>=Y1+1,V1>=W1+1,Y1>=0,W1>=0,A2>=2,Z1>=0,2*A2=X1,C2=0,B2=0] 
* CE 156: red(V1,Out) = 1+ red(W1,X1)+ red(Y1,Z1)+ subst(A2,Z1,A2,Z1):7+ red(Z1,Out)
     [V1>=Y1+1,V1>=W1+1,Y1>=0,W1>=0,Z1>=0,A2>=2,2*A2=X1] 
* CE 157: red(V1,Out) = 1+ red(W1,X1)+ red(Y1,Z1)
     [Out>=Z1+2,V1>=Y1+1,V1>=W1+1,Z1>=0,Y1>=0,W1>=0,X1+Z1+1=Out] 
* CE 158: red(V1,Out) = 1+ red(W1,X1)+ red(Y1,Z1)
     [V1>=Y1+1,V1>=W1+1,Z1>=0,Y1>=0,X1>=0,W1>=0,Out=0] 

### Cost equations --> "Loop" of red/2 
* CEs [157] --> Loop 102 
* CEs [158] --> Loop 103 
* CEs [156] --> Loop 104 
* CEs [150,152,154] --> Loop 105 
* CEs [151,153,155] --> Loop 106 
* CEs [149] --> Loop 107 
* CEs [147] --> Loop 108 
* CEs [148] --> Loop 109 

#### Loops of red/2 
* Loop 102: red(V1,Out)->  red(V1',Out')  red(V1'2,Out'2)
                  [V1>=V1'2+1,Out>=Out'+1,V1>=V1'+1,V1'2>=0,Out'>=1,V1'>=0,Out'+Out'2+1=Out] 
* Loop 103: red(V1,Out)->  red(V1',Out')  red(V1'2,Out'2)
                  [V1>=V1'2+1,V1>=V1'+1,Out'2>=0,V1'2>=0,Out'>=0,V1'>=0,Out=0] 
* Loop 104: red(V1,Out)->  red(V1',Out')  red(V1'2,Out'2)  red(Out'2,Out)
                  [V1>=V1'2+1,V1>=V1'+1,Out'2>=0,V1'2>=0,Out'>=4,V1'>=0] 
* Loop 105: red(V1,Out)->  red(V1',Out')  red(V1'2,Out'2)  red(V1'3,Out)
                  [V1>=V1'2+1,V1>=V1'+1,V1'3>=0,Out'2>=0,V1'2>=0,Out'>=2,V1'>=0] 
* Loop 106: red(V1,Out)->  red(V1',Out')  red(V1'2,Out'2)  red(V1'3,Out)
                  [V1>=V1'2+1,V1>=V1'+1,Out'2>=0,V1'2>=0,Out'>=1,V1'>=0,V1'3=0] 
* Loop 107: red(V1,Out)->  red(V1',Out')
                  [V1>=V1'+1,Out'>=0,V1'>=0,Out=0] 
* Loop 108: red(A,A) [A>=1] 
* Loop 109: red(V1,Out) [V1>=0,Out=0] 

### Ranking functions of CR red(V1,Out) 

#### Partial ranking functions of CR red(V1,Out) 
* Partial RF of phase [102,103,104,105,106,107]:
  - RF of loop [102:1,102:2,103:1,103:2,104:1,104:2,105:1,105:2,106:1,106:2,106:3,107:1]:
    V1 depends on loops [104:3,105:3] 


### Resulting Chains:red(V1,Out) 
* [multiple([102,103,104,105,106,107],[[],[109],[108]])]...
* [109]
* [108]


### Merging Chains  red/2 into  External patterns of execution 
* [[109]] --> 1 
* [[108]] --> 2 
* [[multiple([102,103,104,105,106,107],[[],[109],[108]])]] --> 3 


### Specialization of cost equations islam/2 
* CE 49 is refined into CE [159] 
* CE 48 is refined into CE [160] 
* CE 50 is refined into CE [161] 


#### Refined cost equations islam/2 
* CE 159: islam(V1,Out) = 1
     [V1>=1,Out=2] 
* CE 160: islam(V1,Out) = 1
     [V1>=1,Out=1] 
* CE 161: islam(V1,Out) = 0
     [V1>=0,Out=0] 

### Cost equations --> "Loop" of islam/2 
* CEs [159] --> Loop 110 
* CEs [160] --> Loop 111 
* CEs [161] --> Loop 112 

#### Loops of islam/2 
* Loop 110: islam(V1,Out) [V1>=1,Out=2] 
* Loop 111: islam(V1,Out) [V1>=1,Out=1] 
* Loop 112: islam(V1,Out) [V1>=0,Out=0] 

### Ranking functions of CR islam(V1,Out) 

#### Partial ranking functions of CR islam(V1,Out) 


### Resulting Chains:islam(V1,Out) 
* [112]
* [111]
* [110]


### Merging Chains  islam/2 into  External patterns of execution 
* [[112]] --> 1 
* [[111]] --> 2 
* [[110]] --> 3 


### Specialization of cost equations isvar/2 
* CE 46 is refined into CE [162] 
* CE 45 is refined into CE [163] 
* CE 47 is refined into CE [164] 


#### Refined cost equations isvar/2 
* CE 162: isvar(V1,Out) = 1
     [V1>=1,Out=2] 
* CE 163: isvar(V1,Out) = 1
     [V1>=1,Out=1] 
* CE 164: isvar(V1,Out) = 0
     [V1>=0,Out=0] 

### Cost equations --> "Loop" of isvar/2 
* CEs [162] --> Loop 113 
* CEs [163] --> Loop 114 
* CEs [164] --> Loop 115 

#### Loops of isvar/2 
* Loop 113: isvar(V1,Out) [V1>=1,Out=2] 
* Loop 114: isvar(V1,Out) [V1>=1,Out=1] 
* Loop 115: isvar(V1,Out) [V1>=0,Out=0] 

### Ranking functions of CR isvar(V1,Out) 

#### Partial ranking functions of CR isvar(V1,Out) 


### Resulting Chains:isvar(V1,Out) 
* [115]
* [114]
* [113]


### Merging Chains  isvar/2 into  External patterns of execution 
* [[115]] --> 1 
* [[114]] --> 2 
* [[113]] --> 3 


### Specialization of cost equations lambody/2 
* CE 43 is refined into CE [165] 
* CE 44 is refined into CE [166] 


#### Refined cost equations lambody/2 
* CE 165: lambody(V1,Out) = 1
     [V1>=Out+1,Out>=0] 
* CE 166: lambody(V1,Out) = 0
     [V1>=0,Out=0] 

### Cost equations --> "Loop" of lambody/2 
* CEs [165] --> Loop 116 
* CEs [166] --> Loop 117 

#### Loops of lambody/2 
* Loop 116: lambody(V1,Out) [V1>=Out+1,Out>=0] 
* Loop 117: lambody(V1,Out) [V1>=0,Out=0] 

### Ranking functions of CR lambody(V1,Out) 

#### Partial ranking functions of CR lambody(V1,Out) 


### Resulting Chains:lambody(V1,Out) 
* [117]
* [116]


### Merging Chains  lambody/2 into  External patterns of execution 
* [[117]] --> 1 
* [[116]] --> 2 


### Specialization of cost equations lamvar/2 
* CE 41 is refined into CE [167] 
* CE 42 is refined into CE [168] 


#### Refined cost equations lamvar/2 
* CE 167: lamvar(V1,Out) = 1
     [V1>=Out,Out>=1] 
* CE 168: lamvar(V1,Out) = 0
     [V1>=0,Out=0] 

### Cost equations --> "Loop" of lamvar/2 
* CEs [167] --> Loop 118 
* CEs [168] --> Loop 119 

#### Loops of lamvar/2 
* Loop 118: lamvar(V1,Out) [V1>=Out,Out>=1] 
* Loop 119: lamvar(V1,Out) [V1>=0,Out=0] 

### Ranking functions of CR lamvar(V1,Out) 

#### Partial ranking functions of CR lamvar(V1,Out) 


### Resulting Chains:lamvar(V1,Out) 
* [119]
* [118]


### Merging Chains  lamvar/2 into  External patterns of execution 
* [[119]] --> 1 
* [[118]] --> 2 


### Specialization of cost equations start/4 
* CE 2 is refined into CE [169,170,171] 
* CE 3 is refined into CE [172] 
* CE 4 is refined into CE [173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201] 
* CE 5 is refined into CE [202,203,204,205,206,207,208,209,210,211,212,213,214,215,216] 
* CE 6 is refined into CE [217,218,219,220,221,222,223,224,225,226,227,228,229,230] 
* CE 7 is refined into CE [231,232,233,234,235,236,237] 
* CE 8 is refined into CE [238,239,240] 
* CE 9 is refined into CE [241,242,243,244,245,246] 
* CE 10 is refined into CE [247,248] 
* CE 11 is refined into CE [249,250] 
* CE 12 is refined into CE [251,252] 
* CE 13 is refined into CE [253,254,255] 
* CE 14 is refined into CE [256,257,258] 
* CE 15 is refined into CE [259,260] 
* CE 16 is refined into CE [261,262] 
* CE 17 is refined into CE [263] 
* CE 18 is refined into CE [264,265,266] 
* CE 19 is refined into CE [267,268,269,270,271] 
* CE 20 is refined into CE [272,273,274,275,276,277,278] 
* CE 21 is refined into CE [279,280,281] 


#### Refined cost equations start/4 
* CE 169: start(V1,V,V2,V84) = 0+ red(W84,X84):1
     [V1>=W84+1,W84>=0,V>=0,X84=0] 
* CE 170: start(V1,V,V2,V84) = 0+ red(W84,W84):2
     [V1>=W84+1,W84>=1,V>=0] 
* CE 171: start(V1,V,V2,V84) = 0+ red(W84,X84):3
     [V1>=W84+1,X84>=0,W84>=1,V>=0] 
* CE 172: start(V1,V,V2,V84) = 0
     [V>=0,V1>=0] 
* CE 173: start(V1,V,V2,V84) = 0+ red(W84,X84):1+ subst(Y84,Z84,A85,B85):1+ red(B85,C85):1
     [V1>=W84+1,B85>=0,A85>=1,Y84>=1,W84>=0,Y84+A85=V,C85=0,Z84=0,X84=0] 
* CE 174: start(V1,V,V2,V84) = 0+ red(W84,X84):1+ subst(Y84,Z84,A85,B85):1+ red(B85,B85):2
     [V1>=W84+1,B85>=1,A85>=1,Y84>=1,W84>=0,Y84+A85=V,Z84=0,X84=0] 
* CE 175: start(V1,V,V2,V84) = 0+ red(W84,X84):1+ subst(Y84,Z84,A85,B85):1+ red(B85,C85):3
     [V1>=W84+1,B85>=1,A85>=1,Y84>=1,W84>=0,Y84+A85=V,Z84=0,X84=0] 
* CE 176: start(V1,V,V2,V84) = 0+ red(W84,X84):1+ subst(Y84,Z84,A85,B85):2+ red(C85,D85):1
     [V1>=W84+1,A85>=0,Y84>=1,W84>=0,Y84+A85=V,D85=0,C85=0,B85=0,Z84=0,X84=0] 
* CE 177: start(V1,V,V2,V84) = 0+ red(W84,X84):1+ subst(Y84,Z84,A85,A85):3+ red(A85,B85):1
     [V1>=W84+1,A85>=1,Y84>=1,W84>=0,Y84+A85=V,B85=0,Z84=0,X84=0] 
* CE 178: start(V1,V,V2,V84) = 0+ red(W84,X84):1+ subst(Y84,Z84,A85,A85):3+ red(A85,A85):2
     [V1>=W84+1,A85>=1,Y84>=1,W84>=0,Y84+A85=V,Z84=0,X84=0] 
* CE 179: start(V1,V,V2,V84) = 0+ red(W84,X84):1+ subst(Y84,Z84,A85,A85):3+ red(A85,B85):3
     [V1>=W84+1,A85>=1,Y84>=1,W84>=0,Y84+A85=V,Z84=0,X84=0] 
* CE 180: start(V1,V,V2,V84) = 0+ red(W84,X84):1+ subst(Y84,Z84,A85,B85):4+ red(C85,D85):1
     [V1>=W84+1,Y84>=3,W84>=0,Y84+2=V,D85=0,C85=0,B85=0,A85=2,Z84=0,X84=0] 
* CE 181: start(V1,V,V2,V84) = 0+ red(W84,X84):1+ subst(Y84,Z84,A85,B85):5+ red(C85,D85):1
     [V1>=W84+1,Y84>=3,W84>=0,Y84+2=V,D85=0,C85=2,B85=2,A85=2,Z84=0,X84=0] 
* CE 182: start(V1,V,V2,V84) = 0+ red(W84,X84):1+ subst(Y84,Z84,A85,B85):5+ red(C85,D85):2
     [V1>=W84+1,Y84>=3,W84>=0,Y84+2=V,D85=2,C85=2,B85=2,A85=2,Z84=0,X84=0] 
* CE 183: start(V1,V,V2,V84) = 0+ red(W84,X84):1+ subst(Y84,Z84,A85,B85):5+ red(C85,D85):3
     [V1>=W84+1,Y84>=3,W84>=0,Y84+2=V,C85=2,B85=2,A85=2,Z84=0,X84=0] 
* CE 184: start(V1,V,V2,V84) = 0+ red(W84,X84):1+ subst(Y84,Z84,Y84,A85):6+ red(B85,C85):1
     [V1>=W84+1,Y84>=2,W84>=0,2*Y84=V,C85=0,B85=0,A85=0,Z84=0,X84=0] 
* CE 185: start(V1,V,V2,V84) = 0+ red(W84,X84):1+ subst(Y84,Z84,Y84,A85):7+ red(B85,C85):1
     [V1>=W84+1,Y84>=2,W84>=0,2*Y84=V,C85=0,B85=0,A85=0,Z84=0,X84=0] 
* CE 186: start(V1,V,V2,V84) = 0+ red(W84,W84):2+ subst(X84,W84,Y84,Z84):1+ red(Z84,A85):1
     [V1>=W84+1,Z84>=0,Y84>=1,W84>=1,X84>=1,X84+Y84=V,A85=0] 
* CE 187: start(V1,V,V2,V84) = 0+ red(W84,W84):2+ subst(X84,W84,Y84,Z84):1+ red(Z84,Z84):2
     [V1>=W84+1,Z84>=1,Y84>=1,W84>=1,X84>=1,X84+Y84=V] 
* CE 188: start(V1,V,V2,V84) = 0+ red(W84,W84):2+ subst(X84,W84,Y84,Z84):1+ red(Z84,A85):3
     [V1>=W84+1,Z84>=1,Y84>=1,W84>=1,X84>=1,X84+Y84=V] 
* CE 189: start(V1,V,V2,V84) = 0+ red(W84,W84):2+ subst(X84,W84,Y84,Z84):2+ red(A85,B85):1
     [V1>=W84+1,Y84>=0,W84>=1,X84>=1,X84+Y84=V,B85=0,A85=0,Z84=0] 
* CE 190: start(V1,V,V2,V84) = 0+ red(W84,W84):2+ subst(X84,W84,Y84,Y84):3+ red(Y84,Z84):1
     [V1>=W84+1,Y84>=1,W84>=1,X84>=1,X84+Y84=V,Z84=0] 
* CE 191: start(V1,V,V2,V84) = 0+ red(W84,W84):2+ subst(X84,W84,Y84,Y84):3+ red(Y84,Y84):2
     [V1>=W84+1,Y84>=1,W84>=1,X84>=1,X84+Y84=V] 
* CE 192: start(V1,V,V2,V84) = 0+ red(W84,W84):2+ subst(X84,W84,Y84,Y84):3+ red(Y84,Z84):3
     [V1>=W84+1,Y84>=1,W84>=1,X84>=1,X84+Y84=V] 
* CE 193: start(V1,V,V2,V84) = 0+ red(W84,W84):2+ subst(X84,W84,Y84,Z84):4+ red(A85,B85):1
     [V1>=W84+1,W84>=1,X84>=3,X84+2=V,B85=0,A85=0,Z84=0,Y84=2] 
* CE 194: start(V1,V,V2,V84) = 0+ red(W84,W84):2+ subst(X84,W84,Y84,Z84):5+ red(A85,B85):1
     [V1>=W84+1,W84>=1,X84>=3,X84+2=V,B85=0,A85=2,Z84=2,Y84=2] 
* CE 195: start(V1,V,V2,V84) = 0+ red(W84,W84):2+ subst(X84,W84,Y84,Z84):5+ red(A85,B85):2
     [V1>=W84+1,W84>=1,X84>=3,X84+2=V,B85=2,A85=2,Z84=2,Y84=2] 
* CE 196: start(V1,V,V2,V84) = 0+ red(W84,W84):2+ subst(X84,W84,Y84,Z84):5+ red(A85,B85):3
     [V1>=W84+1,W84>=1,X84>=3,X84+2=V,A85=2,Z84=2,Y84=2] 
* CE 197: start(V1,V,V2,V84) = 0+ red(W84,W84):2+ subst(X84,W84,X84,Y84):6+ red(Z84,A85):1
     [V1>=W84+1,X84>=2,W84>=1,2*X84=V,A85=0,Z84=0,Y84=0] 
* CE 198: start(V1,V,V2,V84) = 0+ red(W84,W84):2+ subst(X84,W84,X84,W84):7+ red(W84,Y84):1
     [V1>=W84+1,W84>=1,X84>=2,2*X84=V,Y84=0] 
* CE 199: start(V1,V,V2,V84) = 0+ red(W84,W84):2+ subst(X84,W84,X84,W84):7+ red(W84,W84):2
     [V1>=W84+1,W84>=1,X84>=2,2*X84=V] 
* CE 200: start(V1,V,V2,V84) = 0+ red(W84,W84):2+ subst(X84,W84,X84,W84):7+ red(W84,Y84):3
     [V1>=W84+1,W84>=1,X84>=2,2*X84=V] 
* CE 201: start(V1,V,V2,V84) = 0+ red(W84,X84):3
     [V>=Y84+1,V1>=W84+1,Y84>=0,X84>=0,W84>=1,Z84+Y84=V] 
* CE 202: start(V1,V,V2,V84) = 0+ subst(W84,V2,X84,Y84):1+ red(Y84,Z84):1
     [Y84>=0,X84>=1,V2>=0,W84>=1,V1>=0,W84+X84=V,Z84=0] 
* CE 203: start(V1,V,V2,V84) = 0+ subst(W84,V2,X84,Y84):1+ red(Y84,Y84):2
     [Y84>=1,X84>=1,V2>=0,W84>=1,V1>=0,W84+X84=V] 
* CE 204: start(V1,V,V2,V84) = 0+ subst(W84,V2,X84,Y84):1+ red(Y84,Z84):3
     [Y84>=1,X84>=1,V2>=0,W84>=1,V1>=0,W84+X84=V] 
* CE 205: start(V1,V,V2,V84) = 0+ subst(W84,V2,X84,Y84):2+ red(Z84,A85):1
     [X84>=0,V2>=0,W84>=1,V1>=0,W84+X84=V,A85=0,Z84=0,Y84=0] 
* CE 206: start(V1,V,V2,V84) = 0+ subst(W84,V2,X84,X84):3+ red(X84,Y84):1
     [X84>=1,V2>=0,W84>=1,V1>=0,W84+X84=V,Y84=0] 
* CE 207: start(V1,V,V2,V84) = 0+ subst(W84,V2,X84,X84):3+ red(X84,X84):2
     [X84>=1,V2>=0,W84>=1,V1>=0,W84+X84=V] 
* CE 208: start(V1,V,V2,V84) = 0+ subst(W84,V2,X84,X84):3+ red(X84,Y84):3
     [X84>=1,V2>=0,W84>=1,V1>=0,W84+X84=V] 
* CE 209: start(V1,V,V2,V84) = 0+ subst(W84,V2,X84,Y84):4+ red(Z84,A85):1
     [V2>=0,W84>=3,V1>=0,W84+2=V,A85=0,Z84=0,Y84=0,X84=2] 
* CE 210: start(V1,V,V2,V84) = 0+ subst(W84,V2,X84,Y84):5+ red(Z84,A85):1
     [V2>=0,W84>=3,V1>=0,W84+2=V,A85=0,Z84=2,Y84=2,X84=2] 
* CE 211: start(V1,V,V2,V84) = 0+ subst(W84,V2,X84,Y84):5+ red(Z84,A85):2
     [V2>=0,W84>=3,V1>=0,W84+2=V,A85=2,Z84=2,Y84=2,X84=2] 
* CE 212: start(V1,V,V2,V84) = 0+ subst(W84,V2,X84,Y84):5+ red(Z84,A85):3
     [V2>=0,W84>=3,V1>=0,W84+2=V,Z84=2,Y84=2,X84=2] 
* CE 213: start(V1,V,V2,V84) = 0+ subst(W84,V2,W84,X84):6+ red(Y84,Z84):1
     [W84>=2,V2>=0,V1>=0,2*W84=V,Z84=0,Y84=0,X84=0] 
* CE 214: start(V1,V,V2,V84) = 0+ subst(W84,V2,W84,V2):7+ red(V2,X84):1
     [V2>=0,W84>=2,V1>=0,2*W84=V,X84=0] 
* CE 215: start(V1,V,V2,V84) = 0+ subst(W84,V2,W84,V2):7+ red(V2,V2):2
     [V2>=1,W84>=2,V1>=0,2*W84=V] 
* CE 216: start(V1,V,V2,V84) = 0+ subst(W84,V2,W84,V2):7+ red(V2,X84):3
     [V2>=1,W84>=2,V1>=0,2*W84=V] 
* CE 217: start(V1,V,V2,V84) = 0+ subst(V,V2,W84,X84):1+ mklam(Y84,X84,Z84):1
     [V+X84>=1,X84>=0,Y84>=1,W84>=1,V2>=0,V>=0,W84+Y84=V84,Z84=0,V1=1] 
* CE 218: start(V1,V,V2,V84) = 0+ subst(V,V2,W84,X84):1+ mklam(Y84,Z84,A85):2
     [V+A85>=Y84+1,A85>=Y84,Y84>=1,W84>=1,V2>=0,V>=0,A85=Y84+Z84,A85=X84+Y84,W84+Y84=V84,V1=1] 
* CE 219: start(V1,V,V2,V84) = 0+ subst(V,V2,W84,X84):2+ mklam(Y84,Z84,A85):1
     [Y84>=1,W84>=0,V2>=0,V>=0,W84+Y84=V84,A85=0,Z84=0,X84=0,V1=1] 
* CE 220: start(V1,V,V2,V84) = 0+ subst(V,V2,W84,X84):2+ mklam(Y84,Z84,Y84):2
     [Y84>=1,W84>=0,V2>=0,V>=0,W84+Y84=V84,Z84=0,X84=0,V1=1] 
* CE 221: start(V1,V,V2,V84) = 0+ subst(V,V2,W84,W84):3+ mklam(X84,W84,Y84):1
     [W84>=1,X84>=1,V2>=0,V>=1,W84+X84=V84,Y84=0,V1=1] 
* CE 222: start(V1,V,V2,V84) = 0+ subst(V,V2,W84,X84):3+ mklam(Y84,Z84,V84):2
     [V84>=Y84+1,Y84>=1,V2>=0,V>=1,V84=Y84+Z84,V84=X84+Y84,V84=W84+Y84,V1=1] 
* CE 223: start(V1,V,V2,V84) = 0+ subst(V,V2,W84,X84):4+ mklam(Y84,Z84,A85):1
     [Y84>=1,V2>=0,V>=3,Y84+2=V84,A85=0,Z84=0,X84=0,W84=2,V1=1] 
* CE 224: start(V1,V,V2,V84) = 0+ subst(V,V2,W84,X84):4+ mklam(Y84,Z84,Y84):2
     [Y84>=1,V2>=0,V>=3,Y84+2=V84,Z84=0,X84=0,W84=2,V1=1] 
* CE 225: start(V1,V,V2,V84) = 0+ subst(V,V2,W84,X84):5+ mklam(Y84,Z84,A85):1
     [Y84>=1,V2>=0,V>=3,Y84+2=V84,A85=0,Z84=2,X84=2,W84=2,V1=1] 
* CE 226: start(V1,V,V2,V84) = 0+ subst(V,V2,W84,X84):5+ mklam(Y84,Z84,V84):2
     [V84>=3,V2>=0,V>=3,V84=Y84+2,Z84=2,X84=2,W84=2,V1=1] 
* CE 227: start(V1,V,V2,V84) = 0+ subst(V,V2,V,W84):6+ mklam(X84,Y84,Z84):1
     [X84>=1,V>=2,V2>=0,V+X84=V84,Z84=0,Y84=0,W84=0,V1=1] 
* CE 228: start(V1,V,V2,V84) = 0+ subst(V,V2,V,W84):6+ mklam(X84,Y84,X84):2
     [X84>=1,V>=2,V2>=0,V+X84=V84,Y84=0,W84=0,V1=1] 
* CE 229: start(V1,V,V2,V84) = 0+ subst(V,V2,V,V2):7+ mklam(W84,V2,X84):1
     [V2>=0,W84>=1,V>=2,V+W84=V84,X84=0,V1=1] 
* CE 230: start(V1,V,V2,V84) = 0+ subst(V,W84,V,X84):7+ mklam(Y84,Z84,A85):2
     [A85>=Y84,Y84>=1,V>=2,A85=Y84+Z84,A85=X84+Y84,A85=W84+Y84,V+Y84=V84,A85=V2+Y84,V1=1] 
* CE 231: start(V1,V,V2,V84) = 0+ subst(V1,V,V2,W84):1
     [V1+W84>=1,W84>=0,V2>=1,V>=0,V1>=0] 
* CE 232: start(V1,V,V2,V84) = 0+ subst(V1,V,V2,W84):2
     [V2>=0,V>=0,V1>=0,W84=0] 
* CE 233: start(V1,V,V2,V84) = 0+ subst(V1,V,V2,V2):3
     [V2>=1,V>=0,V1>=1] 
* CE 234: start(V1,V,V2,V84) = 0+ subst(V1,V,W84,X84):4
     [V>=0,V1>=3,X84=0,W84=2,V2=2] 
* CE 235: start(V1,V,V2,V84) = 0+ subst(V1,V,W84,X84):5
     [V>=0,V1>=3,X84=2,W84=2,V2=2] 
* CE 236: start(A,B,A,C) = 0+ subst(A,B,A,D):6
     [A>=2,B>=0,D=0] 
* CE 237: start(A,B,A,C) = 0+ subst(A,B,A,B):7
     [B>=0,A>=2] 
* CE 238: start(V1,V,V2,V84) = 0+ red(V1,W84):1
     [V1>=0,W84=0] 
* CE 239: start(V1,V,V2,V84) = 0+ red(V1,V1):2
     [V1>=1] 
* CE 240: start(V1,V,V2,V84) = 0+ red(V1,W84):3
     [V1>=1] 
* CE 241: start(V1,V,V2,V84) = 0+ eqTerm(W84,X84,Y84):1
     [Y84=2,X84=1,W84=1,V=1,V1=1] 
* CE 242: start(V1,V,V2,V84) = 0+ eqTerm(V1,V,W84):2
     [V>=1,V1>=1,W84=1] 
* CE 243: start(V1,V,V2,V84) = 0+ eqTerm(V1,W84,X84):3
     [V1>=2,X84=1,W84=1,V=1] 
* CE 244: start(V1,V,V2,V84) = 0+ eqTerm(V1,W84,X84):4
     [V1>=3,X84=1,W84=2,V=2] 
* CE 245: start(V1,V,V2,V84) = 0+ eqTerm(V1,V,W84):5
     [V>=0,V1>=0,W84=0] 
* CE 246: start(A,A,B,C) = 0+ eqTerm(A,A,D):6
     [A>=2,D=2] 
* CE 247: start(V1,V,V2,V84) = 0+ mklam(V1,V,W84):1
     [V>=0,V1>=0,W84=0] 
* CE 248: start(V1,V,V2,V84) = 0+ mklam(V1,W84,X84):2
     [X84>=V1,V1>=1,X84=V1+W84,X84=V1+V] 
* CE 249: start(V1,V,V2,V84) = 0+ lamvar(V1,W84):1
     [V1>=0,W84=0] 
* CE 250: start(V1,V,V2,V84) = 0+ lamvar(V1,W84):2
     [V1>=W84,W84>=1] 
* CE 251: start(V1,V,V2,V84) = 0+ lambody(V1,W84):1
     [V1>=0,W84=0] 
* CE 252: start(V1,V,V2,V84) = 0+ lambody(V1,W84):2
     [V1>=W84+1,W84>=0] 
* CE 253: start(V1,V,V2,V84) = 0+ isvar(V1,W84):1
     [V1>=0,W84=0] 
* CE 254: start(V1,V,V2,V84) = 0+ isvar(V1,W84):2
     [V1>=1,W84=1] 
* CE 255: start(V1,V,V2,V84) = 0+ isvar(V1,W84):3
     [V1>=1,W84=2] 
* CE 256: start(V1,V,V2,V84) = 0+ islam(V1,W84):1
     [V1>=0,W84=0] 
* CE 257: start(V1,V,V2,V84) = 0+ islam(V1,W84):2
     [V1>=1,W84=1] 
* CE 258: start(V1,V,V2,V84) = 0+ islam(V1,W84):3
     [V1>=1,W84=2] 
* CE 259: start(V1,V,V2,V84) = 0+ appe2(V1,W84):1
     [V1>=0,W84=0] 
* CE 260: start(V1,V,V2,V84) = 0+ appe2(V1,W84):2
     [V1>=W84+1,W84>=0] 
* CE 261: start(V1,V,V2,V84) = 0+ appe1(V1,W84):1
     [V1>=0,W84=0] 
* CE 262: start(V1,V,V2,V84) = 0+ appe1(V1,W84):2
     [V1>=W84+1,W84>=0] 
* CE 263: start(V1,V,V2,V84) = 1
     [V>=0,V1>=0] 
* CE 264: start(V1,V,V2,V84) = 1+ red(V1,W84):1
     [V1>=0,W84=0] 
* CE 265: start(V1,V,V2,V84) = 1+ red(V1,V1):2
     [V1>=1] 
* CE 266: start(V1,V,V2,V84) = 1+ red(V1,W84):3
     [V1>=1] 
* CE 267: start(V1,V,V2,V84) = 0+ and(W84,X84,Y84):1
     [Y84=1,X84=1,W84=1,V=1,V1=1] 
* CE 268: start(V1,V,V2,V84) = 0+ and(W84,X84,Y84):2
     [Y84=1,X84=2,W84=1,V=2,V1=1] 
* CE 269: start(V1,V,V2,V84) = 0+ and(W84,X84,Y84):3
     [Y84=1,X84=1,W84=2,V=1,V1=2] 
* CE 270: start(V1,V,V2,V84) = 0+ and(W84,X84,Y84):4
     [Y84=2,X84=2,W84=2,V=2,V1=2] 
* CE 271: start(V1,V,V2,V84) = 0+ and(V1,V,W84):5
     [V>=0,V1>=0,W84=0] 
* CE 272: start(V1,V,V2,V84) = 0+ fun3(W84,X84,Y84):1
     [Y84=2,X84=0,W84=0,V=0,V1=0] 
* CE 273: start(V1,V,V2,V84) = 0+ fun3(W84,V,X84):2
     [V>=1,X84=1,W84=0,V1=0] 
* CE 274: start(V1,V,V2,V84) = 0+ fun3(V1,W84,X84):3
     [V1>=1,X84=1,W84=0,V=0] 
* CE 275: start(V1,V,V2,V84) = 0+ fun3(V1,V,W84):4
     [V>=0,V1>=0,W84=0] 
* CE 276: start(V1,V,V2,V84) = 0+ fun3(V1,V,W84):5
     [V>=V1+1,V1>=1,W84=1] 
* CE 277: start(V1,V,V2,V84) = 0+ fun3(V1,V,W84):6
     [V1>=V+1,V>=1,W84=1] 
* CE 278: start(A,A,B,C) = 0+ fun3(A,A,D):7
     [A>=1,D=2] 
* CE 279: start(V1,V,V2,V84) = 0+ fun2(W84,V,V2,V84,V84):1
     [V84>=0,V2>=0,V>=0,W84=1,V1=1] 
* CE 280: start(V1,V,V2,V84) = 0+ fun2(W84,V,V2,V84,V2):2
     [V2>=0,V84>=0,V>=0,W84=2,V1=2] 
* CE 281: start(V1,V,V2,V84) = 0+ fun2(V1,V,V2,V84,W84):3
     [V84>=0,V2>=0,V>=0,V1>=0,W84=0] 

### Cost equations --> "Loop" of start/4 
* CEs [236,237] --> Loop 120 
* CEs [234,235] --> Loop 121 
* CEs [244] --> Loop 122 
* CEs [274] --> Loop 123 
* CEs [280] --> Loop 124 
* CEs [270] --> Loop 125 
* CEs [243,269] --> Loop 126 
* CEs [217,218,219,220,221,222,223,224,225,226,227,228,229,230,279] --> Loop 127 
* CEs [268] --> Loop 128 
* CEs [241,246,267,278] --> Loop 129 
* CEs [273] --> Loop 130 
* CEs [169,170,172,173,174,176,177,178,180,181,182,184,185,186,187,189,190,191,193,194,195,197,198,199,202,203,205,206,207,209,210,211,213,214,215,231,232,233,238,239,242,245,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,271,272,275,276,277,281] --> Loop 131 
* CEs [171,175,179,183,188,192,196,200,201,240,266] --> Loop 132 
* CEs [204,208,212,216] --> Loop 133 

#### Loops of start/4 
* Loop 120: start(A,B,A,C) [B>=0,A>=2] 
* Loop 121: start(V1,V,V2,V84) [V>=0,V1>=3,V2=2] 
* Loop 122: start(V1,V,V2,V84) [V1>=3,V=2] 
* Loop 123: start(V1,V,V2,V84) [V1>=1,V=0] 
* Loop 124: start(V1,V,V2,V84) [V84>=0,V2>=0,V>=0,V1=2] 
* Loop 125: start(V1,V,V2,V84) [V=2,V1=2] 
* Loop 126: start(V1,V,V2,V84) [V1>=2,V=1] 
* Loop 127: start(V1,V,V2,V84) [V84>=0,V2>=0,V>=0,V1=1] 
* Loop 128: start(V1,V,V2,V84) [V=2,V1=1] 
* Loop 129: start(A,A,B,C) [A>=1] 
* Loop 130: start(V1,V,V2,V84) [V>=1,V1=0] 
* Loop 131: start(V1,V,V2,V84) [V1>=0] 
* Loop 132: start(V1,V,V2,V84) [V1>=1] 
* Loop 133: start(V1,V,V2,V84) [V2>=0,V>=2,V1>=0] 

### Ranking functions of CR start(V1,V,V2,V84) 

#### Partial ranking functions of CR start(V1,V,V2,V84) 


### Resulting Chains:start(V1,V,V2,V84) 
* [133]...
* [132]...
* [131]
* [130]
* [129]
* [128]
* [127]
* [126]
* [125]
* [124]
* [123]
* [122]
* [121]
* [120]


### Merging Chains  start/4 into  External patterns of execution 
* [[130],[131]] --> 1 
* [[128]] --> 2 
* [[127]] --> 3 
* [[125],[129]] --> 4 
* [[124]] --> 5 
* [[123]] --> 6 
* [[126]] --> 7 
* [[122]] --> 8 
* [[121]] --> 9 
* [[120]] --> 10 
* [[133]] --> 11 
* [[132]] --> 12 


Computing Bounds
=====================================

#### Cost of chains of and(V1,V,Out):
* Chain [49]: 0
  with precondition: [V1=1,V=1,Out=1] 

* Chain [48]: 0
  with precondition: [V1=1,V=2,Out=1] 

* Chain [47]: 0
  with precondition: [V1=2,V=1,Out=1] 

* Chain [46]: 0
  with precondition: [V1=2,V=2,Out=2] 

* Chain [45]: 0
  with precondition: [Out=0,V1>=0,V>=0] 


#### Cost of chains of appe1(V1,Out):
* Chain [51]: 0
  with precondition: [Out=0,V1>=0] 

* Chain [50]: 1
  with precondition: [Out>=0,V1>=Out+1] 


#### Cost of chains of appe2(V1,Out):
* Chain [53]: 0
  with precondition: [Out=0,V1>=0] 

* Chain [52]: 1
  with precondition: [Out>=0,V1>=Out+1] 


#### Cost of loops [54] 

 * loop 54:fun3(V1,V,Out) -> [fun3(V1',V',Out')] 
0
#### Cost of phase [54]:fun3(V1,V,Out) -> [fun3(V1',V',Out')] 
0
#### Cost of phase [54]:fun3(V1,V,Out) -> [fun3(V1',V',Out')] 
0
#### Cost of phase [54]:fun3(V1,V,Out) -> [fun3(V1',V',Out')] 
0
#### Cost of phase [54]:fun3(V1,V,Out) -> [fun3(V1',V',Out')] 
0
#### Cost of chains of fun3(V1,V,Out):
* Chain [[54],58]: 0
  with precondition: [Out=2,V1=V,V1>=1] 

* Chain [[54],57]: 0
  with precondition: [Out=1,V1>=1,V>=V1+1] 

* Chain [[54],56]: 0
  with precondition: [Out=1,V>=1,V1>=V+1] 

* Chain [[54],55]: 0
  with precondition: [Out=0,V1>=1,V>=1] 

* Chain [58]: 0
  with precondition: [V1=0,V=0,Out=2] 

* Chain [57]: 0
  with precondition: [V1=0,Out=1,V>=1] 

* Chain [56]: 0
  with precondition: [V=0,Out=1,V1>=1] 

* Chain [55]: 0
  with precondition: [Out=0,V1>=0,V>=0] 


#### Cost of loops [59,64,65] 

 * loop 59:eqTerm(V1,V,Out) -> [eqTerm(V1',V',Out'),eqTerm(V1'2,V'2,Out'2)] 
1
 * loop 64:eqTerm(V1,V,Out) -> [eqTerm(V1',V',Out')] 
1
 * loop 65:eqTerm(V1,V,Out) -> [eqTerm(V1',V',Out')] 
1
#### Cost of phase [59,64,65]:eqTerm(V1,V,Out) -> [] 
1*it(59)+1*it(64)+1*it(65)+1*it([80])+1*it([84])+0
  Such that:it([80]) =< V1/3+1/3
it([84]) =< V/2+1/2
aux(1) =< V1
aux(2) =< V
aux(3) =< V/2
it(64) =< aux(1)
it(65) =< aux(1)
it([80]) =< aux(1)
it([84]) =< aux(1)
it(64) =< aux(2)
it(65) =< aux(2)
it([80]) =< aux(2)
it([84]) =< aux(2)
it(59) =< aux(3)
it(64) =< aux(3)

#### Cost of loops [60,61,62,70,71,72,73,74,75] 

 * loop 60:eqTerm(V1,V,Out) -> [eqTerm(V1',V',Out'),eqTerm(V1'2,V'2,Out'2)] 
1
 * loop 61:eqTerm(V1,V,Out) -> [eqTerm(V1',V',Out'),eqTerm(V1'2,V'2,Out'2)] 
1
 * loop 62:eqTerm(V1,V,Out) -> [eqTerm(V1',V',Out'),eqTerm(V1'2,V'2,Out'2)] 
1
 * loop 70:eqTerm(V1,V,Out) -> [eqTerm(V1',V',Out')] 
1
 * loop 71:eqTerm(V1,V,Out) -> [eqTerm(V1',V',Out')] 
1
 * loop 72:eqTerm(V1,V,Out) -> [eqTerm(V1',V',Out')] 
1
 * loop 73:eqTerm(V1,V,Out) -> [eqTerm(V1',V',Out')] 
1
 * loop 74:eqTerm(V1,V,Out) -> [eqTerm(V1',V',Out')] 
1
 * loop 75:eqTerm(V1,V,Out) -> [eqTerm(V1',V',Out')] 
1
#### Cost of phase [60,61,62,70,71,72,73,74,75]:eqTerm(V1,V,Out) -> [] 
3*it(60)+1*it(70)+1*it(71)+1*it(72)+1*it(73)+1*it(74)+1*it(75)+2*it([66,80])+2*it([66,84])+1*it([66,multiple([59,64,65],[[84],[80]])])+2*it([67,80])+2*it([67,84])+1*it([67,multiple([59,64,65],[[84],[80]])])+3*it([68,80])+2*it([68,84])+3*it([69,80])+2*it([69,84])+1*it([80])+1*it([82])+1*it([83])+1*it([84])+3*s(1)+1*s(2)+1*s(3)+1*s(4)+1*s(5)+2*s(9)+4*s(10)+2*s(11)+2*s(12)+4*s(16)+2*s(17)+2*s(18)+0
  Such that:aux(23) =< V1
aux(24) =< V1+1
aux(25) =< V1/2
aux(26) =< V1/2+1/2
aux(27) =< V1/3
aux(28) =< V1/3+1/3
aux(29) =< V1/4+1/4
aux(30) =< V1/5+1/5
aux(31) =< V
aux(32) =< V+1
aux(33) =< V/2
aux(34) =< V/2+1/2
aux(35) =< V/3
aux(36) =< V/3+1/3
aux(37) =< V/4+1/4
aux(38) =< V/5+1/5
it(70) =< aux(23)
it(71) =< aux(23)
it(72) =< aux(23)
it(73) =< aux(23)
it(74) =< aux(23)
it(75) =< aux(23)
it([66,80]) =< aux(23)
it([66,84]) =< aux(23)
it([66,multiple([59,64,65],[[84],[80]])]) =< aux(23)
it([67,80]) =< aux(23)
it([67,84]) =< aux(23)
it([67,multiple([59,64,65],[[84],[80]])]) =< aux(23)
it([68,80]) =< aux(23)
it([68,84]) =< aux(23)
it([69,80]) =< aux(23)
it([69,84]) =< aux(23)
it([80]) =< aux(23)
it([82]) =< aux(23)
it([83]) =< aux(23)
it([84]) =< aux(23)
it([68,80]) =< aux(24)
it([68,84]) =< aux(24)
it([69,80]) =< aux(24)
it([69,84]) =< aux(24)
it([80]) =< aux(24)
it([82]) =< aux(24)
it([83]) =< aux(24)
it([84]) =< aux(24)
it(60) =< aux(25)
it(70) =< aux(25)
it(71) =< aux(25)
it(72) =< aux(25)
it(73) =< aux(25)
it([66,80]) =< aux(25)
it([66,84]) =< aux(25)
it([66,multiple([59,64,65],[[84],[80]])]) =< aux(25)
it([67,80]) =< aux(25)
it([67,84]) =< aux(25)
it([67,multiple([59,64,65],[[84],[80]])]) =< aux(25)
it([68,80]) =< aux(25)
it([68,84]) =< aux(25)
it([69,80]) =< aux(25)
it([83]) =< aux(26)
it([84]) =< aux(26)
it(70) =< aux(27)
it([66,80]) =< aux(27)
it([66,multiple([59,64,65],[[84],[80]])]) =< aux(27)
it([82]) =< aux(28)
s(4) =< aux(28)
it([67,84]) =< aux(29)
it([67,multiple([59,64,65],[[84],[80]])]) =< aux(29)
it([68,80]) =< aux(29)
it([68,84]) =< aux(29)
it([69,80]) =< aux(29)
it([67,80]) =< aux(30)
it([67,multiple([59,64,65],[[84],[80]])]) =< aux(30)
it([68,80]) =< aux(30)
it(70) =< aux(31)
it(71) =< aux(31)
it(72) =< aux(31)
it(73) =< aux(31)
it(74) =< aux(31)
it(75) =< aux(31)
it([66,80]) =< aux(31)
it([66,84]) =< aux(31)
it([66,multiple([59,64,65],[[84],[80]])]) =< aux(31)
it([67,80]) =< aux(31)
it([67,84]) =< aux(31)
it([67,multiple([59,64,65],[[84],[80]])]) =< aux(31)
it([68,80]) =< aux(31)
it([68,84]) =< aux(31)
it([69,80]) =< aux(31)
it([69,84]) =< aux(31)
it([80]) =< aux(31)
it([82]) =< aux(31)
it([83]) =< aux(31)
it([84]) =< aux(31)
it([67,80]) =< aux(32)
it([67,84]) =< aux(32)
it([67,multiple([59,64,65],[[84],[80]])]) =< aux(32)
it([68,80]) =< aux(32)
it([68,84]) =< aux(32)
it([69,80]) =< aux(32)
it([69,84]) =< aux(32)
it([80]) =< aux(32)
it([82]) =< aux(32)
it([83]) =< aux(32)
it([84]) =< aux(32)
it(70) =< aux(33)
it(71) =< aux(33)
it(72) =< aux(33)
it(74) =< aux(33)
it([66,80]) =< aux(33)
it([66,84]) =< aux(33)
it([66,multiple([59,64,65],[[84],[80]])]) =< aux(33)
it([67,80]) =< aux(33)
it([67,84]) =< aux(33)
it([67,multiple([59,64,65],[[84],[80]])]) =< aux(33)
it([68,80]) =< aux(33)
it([69,80]) =< aux(33)
it([69,84]) =< aux(33)
it([84]) =< aux(34)
s(5) =< aux(34)
it(71) =< aux(35)
it([67,80]) =< aux(35)
it([67,multiple([59,64,65],[[84],[80]])]) =< aux(35)
it([80]) =< aux(36)
it([66,84]) =< aux(37)
it([66,multiple([59,64,65],[[84],[80]])]) =< aux(37)
it([67,80]) =< aux(37)
it([67,84]) =< aux(37)
it([67,multiple([59,64,65],[[84],[80]])]) =< aux(37)
it([68,80]) =< aux(37)
it([69,80]) =< aux(37)
it([69,84]) =< aux(37)
it([66,80]) =< aux(38)
it([66,multiple([59,64,65],[[84],[80]])]) =< aux(38)
it([67,80]) =< aux(38)
it([67,84]) =< aux(38)
it([67,multiple([59,64,65],[[84],[80]])]) =< aux(38)
it([69,80]) =< aux(38)
s(6) =< aux(32)* (1/2)
s(12) =< aux(24)* (1/3)
s(13) =< aux(24)* (1/2)
s(18) =< aux(32)* (1/3)
it(71) =< it([82])* (1/3)+it([83])* (1/3)+it([84])* (1/3)+aux(35)
it([67,80]) =< it([82])* (1/3)+it([83])* (1/3)+it([84])* (1/3)+aux(35)
it([67,multiple([59,64,65],[[84],[80]])]) =< it([82])* (1/3)+it([83])* (1/3)+it([84])* (1/3)+aux(35)
it(70) =< it([83])* (1/3)+it([84])* (1/3)+aux(27)
it([66,80]) =< it([83])* (1/3)+it([84])* (1/3)+aux(27)
it([66,multiple([59,64,65],[[84],[80]])]) =< it([83])* (1/3)+it([84])* (1/3)+aux(27)
s(16) =< s(6)
s(16) =< aux(32)
s(17) =< aux(32)
s(18) =< aux(32)
s(1) =< s(6)
s(10) =< s(13)
s(10) =< aux(24)
s(11) =< aux(24)
s(12) =< aux(24)
s(9) =< s(13)
s(2) =< aux(24)
s(3) =< aux(24)
s(4) =< aux(24)
s(5) =< aux(24)
s(2) =< aux(32)
s(3) =< aux(32)
s(4) =< aux(32)
s(5) =< aux(32)
s(2) =< s(6)

#### Cost of loops [63,76,77,78,79] 

 * loop 63:eqTerm(V1,V,Out) -> [eqTerm(V1',V',Out'),eqTerm(V1'2,V'2,Out'2)] 
1
 * loop 76:eqTerm(V1,V,Out) -> [eqTerm(V1',V',Out')] 
1
 * loop 77:eqTerm(V1,V,Out) -> [eqTerm(V1',V',Out')] 
1
 * loop 78:eqTerm(V1,V,Out) -> [eqTerm(V1',V',Out')] 
1
 * loop 79:eqTerm(V1,V,Out) -> [eqTerm(V1',V',Out')] 
1
#### Cost of phase [63,76,77,78,79]:eqTerm(V1,V,Out) -> [] 
1*it(63)+2*it(76)+1*it(77)+1*it(78)+2*it([66,80])+2*it([66,84])+1*it([66,multiple([59,64,65],[[84],[80]])])+2*it([67,80])+2*it([67,84])+1*it([67,multiple([59,64,65],[[84],[80]])])+3*it([68,80])+2*it([68,84])+3*it([69,80])+2*it([69,84])+1*it([80])+4*it([81])+1*it([82])+1*it([83])+1*it([84])+6*s(1)+4*s(2)+1*s(4)+1*s(5)+7*s(9)+8*s(10)+4*s(11)+4*s(12)+8*s(16)+4*s(17)+4*s(18)+1*s(34)+1*s(35)+2*s(36)+2*s(37)+2*s(40)+2*s(41)+1*s(42)+2*s(43)+5*s(44)+1*s(45)+3*s(46)+2*s(47)+2*s(49)+1*s(50)+2*s(51)+0
  Such that:aux(64) =< V1
aux(65) =< V1+1
aux(66) =< V1/2
aux(67) =< V1/2+1/2
aux(68) =< V1/3+1/3
aux(69) =< V1/4+1/4
aux(70) =< V1/5+1/5
aux(71) =< V
aux(72) =< V+1
aux(73) =< V/2
aux(74) =< V/2+1/2
aux(75) =< V/3+1/3
aux(76) =< V/4+1/4
aux(77) =< V/5+1/5
it(63) =< aux(64)
it(76) =< aux(64)
it(77) =< aux(64)
it(78) =< aux(64)
it([66,80]) =< aux(64)
it([66,84]) =< aux(64)
it([66,multiple([59,64,65],[[84],[80]])]) =< aux(64)
it([67,80]) =< aux(64)
it([67,84]) =< aux(64)
it([67,multiple([59,64,65],[[84],[80]])]) =< aux(64)
it([68,80]) =< aux(64)
it([68,84]) =< aux(64)
it([69,80]) =< aux(64)
it([69,84]) =< aux(64)
it([80]) =< aux(64)
it([82]) =< aux(64)
it([83]) =< aux(64)
it([84]) =< aux(64)
it([68,80]) =< aux(65)
it([68,84]) =< aux(65)
it([69,80]) =< aux(65)
it([69,84]) =< aux(65)
it([80]) =< aux(65)
it([81]) =< aux(65)
it([82]) =< aux(65)
it([83]) =< aux(65)
it([84]) =< aux(65)
it(77) =< aux(66)
it([66,80]) =< aux(66)
it([66,84]) =< aux(66)
it([66,multiple([59,64,65],[[84],[80]])]) =< aux(66)
it([67,80]) =< aux(66)
it([67,84]) =< aux(66)
it([67,multiple([59,64,65],[[84],[80]])]) =< aux(66)
it([68,80]) =< aux(66)
it([68,84]) =< aux(66)
it([69,80]) =< aux(66)
it([83]) =< aux(67)
it([84]) =< aux(67)
it([82]) =< aux(68)
s(4) =< aux(68)
it([67,84]) =< aux(69)
it([67,multiple([59,64,65],[[84],[80]])]) =< aux(69)
it([68,80]) =< aux(69)
it([68,84]) =< aux(69)
it([69,80]) =< aux(69)
s(79) =< aux(69)
it([67,80]) =< aux(70)
it([67,multiple([59,64,65],[[84],[80]])]) =< aux(70)
it([68,80]) =< aux(70)
s(78) =< aux(70)
it(76) =< aux(71)
it(77) =< aux(71)
it(78) =< aux(71)
it([66,80]) =< aux(71)
it([66,84]) =< aux(71)
it([66,multiple([59,64,65],[[84],[80]])]) =< aux(71)
it([67,80]) =< aux(71)
it([67,84]) =< aux(71)
it([67,multiple([59,64,65],[[84],[80]])]) =< aux(71)
it([68,80]) =< aux(71)
it([68,84]) =< aux(71)
it([69,80]) =< aux(71)
it([69,84]) =< aux(71)
it([80]) =< aux(71)
it([82]) =< aux(71)
it([83]) =< aux(71)
it([84]) =< aux(71)
it([67,80]) =< aux(72)
it([67,84]) =< aux(72)
it([67,multiple([59,64,65],[[84],[80]])]) =< aux(72)
it([68,80]) =< aux(72)
it([68,84]) =< aux(72)
it([69,80]) =< aux(72)
it([69,84]) =< aux(72)
it([80]) =< aux(72)
it([81]) =< aux(72)
it([82]) =< aux(72)
it([83]) =< aux(72)
it([84]) =< aux(72)
it(78) =< aux(73)
it([66,80]) =< aux(73)
it([66,84]) =< aux(73)
it([66,multiple([59,64,65],[[84],[80]])]) =< aux(73)
it([67,80]) =< aux(73)
it([67,84]) =< aux(73)
it([67,multiple([59,64,65],[[84],[80]])]) =< aux(73)
it([68,80]) =< aux(73)
it([69,80]) =< aux(73)
it([69,84]) =< aux(73)
it([84]) =< aux(74)
s(5) =< aux(74)
it([80]) =< aux(75)
it([66,84]) =< aux(76)
it([66,multiple([59,64,65],[[84],[80]])]) =< aux(76)
it([67,80]) =< aux(76)
it([67,84]) =< aux(76)
it([67,multiple([59,64,65],[[84],[80]])]) =< aux(76)
it([68,80]) =< aux(76)
it([69,80]) =< aux(76)
it([69,84]) =< aux(76)
s(73) =< aux(76)
it([66,80]) =< aux(77)
it([66,multiple([59,64,65],[[84],[80]])]) =< aux(77)
it([67,80]) =< aux(77)
it([67,84]) =< aux(77)
it([67,multiple([59,64,65],[[84],[80]])]) =< aux(77)
it([69,80]) =< aux(77)
s(72) =< aux(77)
s(72) =< aux(72)* (1/5)
s(73) =< aux(72)* (1/4)
s(71) =< aux(72)* (1/3)
s(6) =< aux(72)* (1/2)
s(78) =< aux(65)* (1/5)
s(79) =< aux(65)* (1/4)
s(70) =< aux(65)* (1/3)
s(13) =< aux(65)* (1/2)
s(12) =< aux(65)* (1/3)
s(18) =< aux(72)* (1/3)
it(78) =< it([81])* (1/2)+aux(73)
it([66,80]) =< it([81])* (1/2)+aux(73)
it([66,84]) =< it([81])* (1/2)+aux(73)
it([66,multiple([59,64,65],[[84],[80]])]) =< it([81])* (1/2)+aux(73)
it([67,80]) =< it([81])* (1/2)+aux(73)
it([67,84]) =< it([81])* (1/2)+aux(73)
it([67,multiple([59,64,65],[[84],[80]])]) =< it([81])* (1/2)+aux(73)
it([68,80]) =< it([81])* (1/2)+aux(73)
it([69,80]) =< it([81])* (1/2)+aux(73)
it([69,84]) =< it([81])* (1/2)+aux(73)
it(77) =< it([81])* (1/2)+aux(66)
it([66,80]) =< it([81])* (1/2)+aux(66)
it([66,84]) =< it([81])* (1/2)+aux(66)
it([66,multiple([59,64,65],[[84],[80]])]) =< it([81])* (1/2)+aux(66)
it([67,80]) =< it([81])* (1/2)+aux(66)
it([67,84]) =< it([81])* (1/2)+aux(66)
it([67,multiple([59,64,65],[[84],[80]])]) =< it([81])* (1/2)+aux(66)
it([68,80]) =< it([81])* (1/2)+aux(66)
it([68,84]) =< it([81])* (1/2)+aux(66)
it([69,80]) =< it([81])* (1/2)+aux(66)
it(76) =< it([81])+aux(71)
it(77) =< it([81])+aux(71)
it(78) =< it([81])+aux(71)
it([66,80]) =< it([81])+aux(71)
it([66,84]) =< it([81])+aux(71)
it([66,multiple([59,64,65],[[84],[80]])]) =< it([81])+aux(71)
it([67,80]) =< it([81])+aux(71)
it([67,84]) =< it([81])+aux(71)
it([67,multiple([59,64,65],[[84],[80]])]) =< it([81])+aux(71)
it([68,80]) =< it([81])+aux(71)
it([68,84]) =< it([81])+aux(71)
it([69,80]) =< it([81])+aux(71)
it([69,84]) =< it([81])+aux(71)
it([80]) =< it([81])+aux(71)
it(76) =< it([81])+aux(64)
it(77) =< it([81])+aux(64)
it(78) =< it([81])+aux(64)
it([66,80]) =< it([81])+aux(64)
it([66,84]) =< it([81])+aux(64)
it([66,multiple([59,64,65],[[84],[80]])]) =< it([81])+aux(64)
it([67,80]) =< it([81])+aux(64)
it([67,84]) =< it([81])+aux(64)
it([67,multiple([59,64,65],[[84],[80]])]) =< it([81])+aux(64)
it([68,80]) =< it([81])+aux(64)
it([68,84]) =< it([81])+aux(64)
it([69,80]) =< it([81])+aux(64)
it([69,84]) =< it([81])+aux(64)
it([80]) =< it([81])+aux(64)
it([82]) =< it([81])+aux(64)
s(16) =< s(6)
s(16) =< aux(72)
s(17) =< aux(72)
s(18) =< aux(72)
s(1) =< s(6)
s(10) =< s(13)
s(10) =< aux(65)
s(11) =< aux(65)
s(12) =< aux(65)
s(9) =< s(13)
s(2) =< aux(65)
s(4) =< aux(65)
s(5) =< aux(65)
s(2) =< aux(72)
s(4) =< aux(72)
s(5) =< aux(72)
s(2) =< s(6)
s(34) =< aux(65)
s(35) =< aux(65)
s(36) =< aux(65)
s(37) =< aux(65)
s(40) =< aux(65)
s(41) =< aux(65)
s(42) =< aux(65)
s(43) =< aux(65)
s(44) =< aux(65)
s(45) =< aux(65)
s(46) =< aux(65)
s(47) =< aux(65)
s(49) =< aux(65)
s(50) =< aux(65)
s(51) =< aux(65)
s(34) =< s(13)
s(35) =< s(13)
s(36) =< s(13)
s(37) =< s(13)
s(40) =< s(13)
s(41) =< s(13)
s(42) =< s(13)
s(43) =< s(13)
s(44) =< s(13)
s(45) =< s(13)
s(46) =< s(13)
s(47) =< s(13)
s(34) =< s(70)
s(40) =< s(70)
s(42) =< s(70)
s(51) =< s(70)
s(44) =< s(79)
s(45) =< s(79)
s(46) =< s(79)
s(47) =< s(79)
s(43) =< s(78)
s(45) =< s(78)
s(46) =< s(78)
s(34) =< aux(72)
s(35) =< aux(72)
s(36) =< aux(72)
s(37) =< aux(72)
s(40) =< aux(72)
s(41) =< aux(72)
s(42) =< aux(72)
s(43) =< aux(72)
s(44) =< aux(72)
s(45) =< aux(72)
s(46) =< aux(72)
s(47) =< aux(72)
s(49) =< aux(72)
s(50) =< aux(72)
s(51) =< aux(72)
s(34) =< s(6)
s(35) =< s(6)
s(36) =< s(6)
s(40) =< s(6)
s(41) =< s(6)
s(42) =< s(6)
s(43) =< s(6)
s(44) =< s(6)
s(45) =< s(6)
s(46) =< s(6)
s(49) =< s(6)
s(35) =< s(71)
s(43) =< s(71)
s(45) =< s(71)
s(50) =< s(71)
s(41) =< s(73)
s(42) =< s(73)
s(43) =< s(73)
s(44) =< s(73)
s(45) =< s(73)
s(46) =< s(73)
s(49) =< s(73)
s(40) =< s(72)
s(42) =< s(72)
s(43) =< s(72)
s(44) =< s(72)
s(45) =< s(72)
s(35) =< s(51)* (1/3)+s(37)* (1/3)+s(36)* (1/3)+s(71)
s(43) =< s(51)* (1/3)+s(37)* (1/3)+s(36)* (1/3)+s(71)
s(45) =< s(51)* (1/3)+s(37)* (1/3)+s(36)* (1/3)+s(71)
s(34) =< s(37)* (1/3)+s(36)* (1/3)+s(70)
s(40) =< s(37)* (1/3)+s(36)* (1/3)+s(70)
s(42) =< s(37)* (1/3)+s(36)* (1/3)+s(70)

#### Cost of chains of eqTerm(V1,V,Out):
* Chain [84]: 1
  with precondition: [V1=1,V=1,Out=2] 

* Chain [83]: 1
  with precondition: [Out=1,V1>=1,V>=1] 

* Chain [82]: 1
  with precondition: [V=1,Out=1,V1>=2] 

* Chain [81]: 1
  with precondition: [Out=0,V1>=0,V>=0] 

* Chain [80]: 1
  with precondition: [Out=2,V1=V,V1>=2] 

* Chain [69,84]: 2
  with precondition: [V1=2,Out=1,V>=3] 

* Chain [69,80]: 2
  with precondition: [Out=1,V1>=3,V>=V1+1] 

* Chain [68,84]: 2
  with precondition: [V=2,Out=1,V1>=3] 

* Chain [68,80]: 2
  with precondition: [Out=1,V>=3,V1>=V+1] 

* Chain [67,84]: 2
  with precondition: [Out=1,V1>=3,V>=V1+1] 

* Chain [67,80]: 2
  with precondition: [Out=1,V1>=4,V>=V1+1] 

* Chain [66,84]: 2
  with precondition: [Out=1,V>=3,V1>=V+1] 

* Chain [66,80]: 2
  with precondition: [Out=1,V>=4,V1>=V+1] 

* Chain [multiple([63,76,77,78,79],[[multiple([60,61,62,70,71,72,73,74,75],[[multiple([59,64,65],[[84],[80]])],[84],[83],[82],[80],[69,multiple([59,64,65],[[84],[80]])],[69,84],[69,80],[68,multiple([59,64,65],[[84],[80]])],[68,84],[68,80],[67,multiple([59,64,65],[[84],[80]])],[67,84],[67,80],[66,multiple([59,64,65],[[84],[80]])],[66,84],[66,80]])],[multiple([59,64,65],[[84],[80]])],[84],[83],[82],[81],[80],[69,multiple([59,64,65],[[84],[80]])],[69,84],[69,80],[68,multiple([59,64,65],[[84],[80]])],[68,84],[68,80],[67,multiple([59,64,65],[[84],[80]])],[67,84],[67,80],[66,multiple([59,64,65],[[84],[80]])],[66,84],[66,80]])]: 1*it(63)+2*it(76)+1*it(77)+1*it(78)+2*it([66,80])+2*it([66,84])+1*it([66,multiple([59,64,65],[[84],[80]])])+2*it([67,80])+2*it([67,84])+1*it([67,multiple([59,64,65],[[84],[80]])])+3*it([68,80])+2*it([68,84])+3*it([69,80])+2*it([69,84])+1*it([80])+4*it([81])+1*it([82])+1*it([83])+1*it([84])+6*s(1)+4*s(2)+1*s(4)+1*s(5)+7*s(9)+8*s(10)+4*s(11)+4*s(12)+8*s(16)+4*s(17)+4*s(18)+1*s(34)+1*s(35)+2*s(36)+2*s(37)+2*s(40)+2*s(41)+1*s(42)+2*s(43)+5*s(44)+1*s(45)+3*s(46)+2*s(47)+2*s(49)+1*s(50)+2*s(51)+0
  Such that:aux(64) =< V1
aux(65) =< V1+1
aux(66) =< V1/2
aux(67) =< V1/2+1/2
aux(68) =< V1/3+1/3
aux(69) =< V1/4+1/4
aux(70) =< V1/5+1/5
aux(71) =< V
aux(72) =< V+1
aux(73) =< V/2
aux(74) =< V/2+1/2
aux(75) =< V/3+1/3
aux(76) =< V/4+1/4
aux(77) =< V/5+1/5
it(63) =< aux(64)
it(76) =< aux(64)
it(77) =< aux(64)
it(78) =< aux(64)
it([66,80]) =< aux(64)
it([66,84]) =< aux(64)
it([66,multiple([59,64,65],[[84],[80]])]) =< aux(64)
it([67,80]) =< aux(64)
it([67,84]) =< aux(64)
it([67,multiple([59,64,65],[[84],[80]])]) =< aux(64)
it([68,80]) =< aux(64)
it([68,84]) =< aux(64)
it([69,80]) =< aux(64)
it([69,84]) =< aux(64)
it([80]) =< aux(64)
it([82]) =< aux(64)
it([83]) =< aux(64)
it([84]) =< aux(64)
it([68,80]) =< aux(65)
it([68,84]) =< aux(65)
it([69,80]) =< aux(65)
it([69,84]) =< aux(65)
it([80]) =< aux(65)
it([81]) =< aux(65)
it([82]) =< aux(65)
it([83]) =< aux(65)
it([84]) =< aux(65)
it(77) =< aux(66)
it([66,80]) =< aux(66)
it([66,84]) =< aux(66)
it([66,multiple([59,64,65],[[84],[80]])]) =< aux(66)
it([67,80]) =< aux(66)
it([67,84]) =< aux(66)
it([67,multiple([59,64,65],[[84],[80]])]) =< aux(66)
it([68,80]) =< aux(66)
it([68,84]) =< aux(66)
it([69,80]) =< aux(66)
it([83]) =< aux(67)
it([84]) =< aux(67)
it([82]) =< aux(68)
s(4) =< aux(68)
it([67,84]) =< aux(69)
it([67,multiple([59,64,65],[[84],[80]])]) =< aux(69)
it([68,80]) =< aux(69)
it([68,84]) =< aux(69)
it([69,80]) =< aux(69)
s(79) =< aux(69)
it([67,80]) =< aux(70)
it([67,multiple([59,64,65],[[84],[80]])]) =< aux(70)
it([68,80]) =< aux(70)
s(78) =< aux(70)
it(76) =< aux(71)
it(77) =< aux(71)
it(78) =< aux(71)
it([66,80]) =< aux(71)
it([66,84]) =< aux(71)
it([66,multiple([59,64,65],[[84],[80]])]) =< aux(71)
it([67,80]) =< aux(71)
it([67,84]) =< aux(71)
it([67,multiple([59,64,65],[[84],[80]])]) =< aux(71)
it([68,80]) =< aux(71)
it([68,84]) =< aux(71)
it([69,80]) =< aux(71)
it([69,84]) =< aux(71)
it([80]) =< aux(71)
it([82]) =< aux(71)
it([83]) =< aux(71)
it([84]) =< aux(71)
it([67,80]) =< aux(72)
it([67,84]) =< aux(72)
it([67,multiple([59,64,65],[[84],[80]])]) =< aux(72)
it([68,80]) =< aux(72)
it([68,84]) =< aux(72)
it([69,80]) =< aux(72)
it([69,84]) =< aux(72)
it([80]) =< aux(72)
it([81]) =< aux(72)
it([82]) =< aux(72)
it([83]) =< aux(72)
it([84]) =< aux(72)
it(78) =< aux(73)
it([66,80]) =< aux(73)
it([66,84]) =< aux(73)
it([66,multiple([59,64,65],[[84],[80]])]) =< aux(73)
it([67,80]) =< aux(73)
it([67,84]) =< aux(73)
it([67,multiple([59,64,65],[[84],[80]])]) =< aux(73)
it([68,80]) =< aux(73)
it([69,80]) =< aux(73)
it([69,84]) =< aux(73)
it([84]) =< aux(74)
s(5) =< aux(74)
it([80]) =< aux(75)
it([66,84]) =< aux(76)
it([66,multiple([59,64,65],[[84],[80]])]) =< aux(76)
it([67,80]) =< aux(76)
it([67,84]) =< aux(76)
it([67,multiple([59,64,65],[[84],[80]])]) =< aux(76)
it([68,80]) =< aux(76)
it([69,80]) =< aux(76)
it([69,84]) =< aux(76)
s(73) =< aux(76)
it([66,80]) =< aux(77)
it([66,multiple([59,64,65],[[84],[80]])]) =< aux(77)
it([67,80]) =< aux(77)
it([67,84]) =< aux(77)
it([67,multiple([59,64,65],[[84],[80]])]) =< aux(77)
it([69,80]) =< aux(77)
s(72) =< aux(77)
s(72) =< aux(72)* (1/5)
s(73) =< aux(72)* (1/4)
s(71) =< aux(72)* (1/3)
s(6) =< aux(72)* (1/2)
s(78) =< aux(65)* (1/5)
s(79) =< aux(65)* (1/4)
s(70) =< aux(65)* (1/3)
s(13) =< aux(65)* (1/2)
s(12) =< aux(65)* (1/3)
s(18) =< aux(72)* (1/3)
it(78) =< it([81])* (1/2)+aux(73)
it([66,80]) =< it([81])* (1/2)+aux(73)
it([66,84]) =< it([81])* (1/2)+aux(73)
it([66,multiple([59,64,65],[[84],[80]])]) =< it([81])* (1/2)+aux(73)
it([67,80]) =< it([81])* (1/2)+aux(73)
it([67,84]) =< it([81])* (1/2)+aux(73)
it([67,multiple([59,64,65],[[84],[80]])]) =< it([81])* (1/2)+aux(73)
it([68,80]) =< it([81])* (1/2)+aux(73)
it([69,80]) =< it([81])* (1/2)+aux(73)
it([69,84]) =< it([81])* (1/2)+aux(73)
it(77) =< it([81])* (1/2)+aux(66)
it([66,80]) =< it([81])* (1/2)+aux(66)
it([66,84]) =< it([81])* (1/2)+aux(66)
it([66,multiple([59,64,65],[[84],[80]])]) =< it([81])* (1/2)+aux(66)
it([67,80]) =< it([81])* (1/2)+aux(66)
it([67,84]) =< it([81])* (1/2)+aux(66)
it([67,multiple([59,64,65],[[84],[80]])]) =< it([81])* (1/2)+aux(66)
it([68,80]) =< it([81])* (1/2)+aux(66)
it([68,84]) =< it([81])* (1/2)+aux(66)
it([69,80]) =< it([81])* (1/2)+aux(66)
it(76) =< it([81])+aux(71)
it(77) =< it([81])+aux(71)
it(78) =< it([81])+aux(71)
it([66,80]) =< it([81])+aux(71)
it([66,84]) =< it([81])+aux(71)
it([66,multiple([59,64,65],[[84],[80]])]) =< it([81])+aux(71)
it([67,80]) =< it([81])+aux(71)
it([67,84]) =< it([81])+aux(71)
it([67,multiple([59,64,65],[[84],[80]])]) =< it([81])+aux(71)
it([68,80]) =< it([81])+aux(71)
it([68,84]) =< it([81])+aux(71)
it([69,80]) =< it([81])+aux(71)
it([69,84]) =< it([81])+aux(71)
it([80]) =< it([81])+aux(71)
it(76) =< it([81])+aux(64)
it(77) =< it([81])+aux(64)
it(78) =< it([81])+aux(64)
it([66,80]) =< it([81])+aux(64)
it([66,84]) =< it([81])+aux(64)
it([66,multiple([59,64,65],[[84],[80]])]) =< it([81])+aux(64)
it([67,80]) =< it([81])+aux(64)
it([67,84]) =< it([81])+aux(64)
it([67,multiple([59,64,65],[[84],[80]])]) =< it([81])+aux(64)
it([68,80]) =< it([81])+aux(64)
it([68,84]) =< it([81])+aux(64)
it([69,80]) =< it([81])+aux(64)
it([69,84]) =< it([81])+aux(64)
it([80]) =< it([81])+aux(64)
it([82]) =< it([81])+aux(64)
s(16) =< s(6)
s(16) =< aux(72)
s(17) =< aux(72)
s(18) =< aux(72)
s(1) =< s(6)
s(10) =< s(13)
s(10) =< aux(65)
s(11) =< aux(65)
s(12) =< aux(65)
s(9) =< s(13)
s(2) =< aux(65)
s(4) =< aux(65)
s(5) =< aux(65)
s(2) =< aux(72)
s(4) =< aux(72)
s(5) =< aux(72)
s(2) =< s(6)
s(34) =< aux(65)
s(35) =< aux(65)
s(36) =< aux(65)
s(37) =< aux(65)
s(40) =< aux(65)
s(41) =< aux(65)
s(42) =< aux(65)
s(43) =< aux(65)
s(44) =< aux(65)
s(45) =< aux(65)
s(46) =< aux(65)
s(47) =< aux(65)
s(49) =< aux(65)
s(50) =< aux(65)
s(51) =< aux(65)
s(34) =< s(13)
s(35) =< s(13)
s(36) =< s(13)
s(37) =< s(13)
s(40) =< s(13)
s(41) =< s(13)
s(42) =< s(13)
s(43) =< s(13)
s(44) =< s(13)
s(45) =< s(13)
s(46) =< s(13)
s(47) =< s(13)
s(34) =< s(70)
s(40) =< s(70)
s(42) =< s(70)
s(51) =< s(70)
s(44) =< s(79)
s(45) =< s(79)
s(46) =< s(79)
s(47) =< s(79)
s(43) =< s(78)
s(45) =< s(78)
s(46) =< s(78)
s(34) =< aux(72)
s(35) =< aux(72)
s(36) =< aux(72)
s(37) =< aux(72)
s(40) =< aux(72)
s(41) =< aux(72)
s(42) =< aux(72)
s(43) =< aux(72)
s(44) =< aux(72)
s(45) =< aux(72)
s(46) =< aux(72)
s(47) =< aux(72)
s(49) =< aux(72)
s(50) =< aux(72)
s(51) =< aux(72)
s(34) =< s(6)
s(35) =< s(6)
s(36) =< s(6)
s(40) =< s(6)
s(41) =< s(6)
s(42) =< s(6)
s(43) =< s(6)
s(44) =< s(6)
s(45) =< s(6)
s(46) =< s(6)
s(49) =< s(6)
s(35) =< s(71)
s(43) =< s(71)
s(45) =< s(71)
s(50) =< s(71)
s(41) =< s(73)
s(42) =< s(73)
s(43) =< s(73)
s(44) =< s(73)
s(45) =< s(73)
s(46) =< s(73)
s(49) =< s(73)
s(40) =< s(72)
s(42) =< s(72)
s(43) =< s(72)
s(44) =< s(72)
s(45) =< s(72)
s(35) =< s(51)* (1/3)+s(37)* (1/3)+s(36)* (1/3)+s(71)
s(43) =< s(51)* (1/3)+s(37)* (1/3)+s(36)* (1/3)+s(71)
s(45) =< s(51)* (1/3)+s(37)* (1/3)+s(36)* (1/3)+s(71)
s(34) =< s(37)* (1/3)+s(36)* (1/3)+s(70)
s(40) =< s(37)* (1/3)+s(36)* (1/3)+s(70)
s(42) =< s(37)* (1/3)+s(36)* (1/3)+s(70)

  with precondition: [Out=0,V1>=1,V>=1] 

* Chain [multiple([60,61,62,70,71,72,73,74,75],[[multiple([59,64,65],[[84],[80]])],[84],[83],[82],[80],[69,multiple([59,64,65],[[84],[80]])],[69,84],[69,80],[68,multiple([59,64,65],[[84],[80]])],[68,84],[68,80],[67,multiple([59,64,65],[[84],[80]])],[67,84],[67,80],[66,multiple([59,64,65],[[84],[80]])],[66,84],[66,80]])]: 3*it(60)+1*it(70)+1*it(71)+1*it(72)+1*it(73)+1*it(74)+1*it(75)+2*it([66,80])+2*it([66,84])+1*it([66,multiple([59,64,65],[[84],[80]])])+2*it([67,80])+2*it([67,84])+1*it([67,multiple([59,64,65],[[84],[80]])])+3*it([68,80])+2*it([68,84])+3*it([69,80])+2*it([69,84])+1*it([80])+1*it([82])+1*it([83])+1*it([84])+3*s(1)+1*s(2)+1*s(3)+1*s(4)+1*s(5)+2*s(9)+4*s(10)+2*s(11)+2*s(12)+4*s(16)+2*s(17)+2*s(18)+0
  Such that:aux(23) =< V1
aux(24) =< V1+1
aux(25) =< V1/2
aux(26) =< V1/2+1/2
aux(27) =< V1/3
aux(28) =< V1/3+1/3
aux(29) =< V1/4+1/4
aux(30) =< V1/5+1/5
aux(31) =< V
aux(32) =< V+1
aux(33) =< V/2
aux(34) =< V/2+1/2
aux(35) =< V/3
aux(36) =< V/3+1/3
aux(37) =< V/4+1/4
aux(38) =< V/5+1/5
it(70) =< aux(23)
it(71) =< aux(23)
it(72) =< aux(23)
it(73) =< aux(23)
it(74) =< aux(23)
it(75) =< aux(23)
it([66,80]) =< aux(23)
it([66,84]) =< aux(23)
it([66,multiple([59,64,65],[[84],[80]])]) =< aux(23)
it([67,80]) =< aux(23)
it([67,84]) =< aux(23)
it([67,multiple([59,64,65],[[84],[80]])]) =< aux(23)
it([68,80]) =< aux(23)
it([68,84]) =< aux(23)
it([69,80]) =< aux(23)
it([69,84]) =< aux(23)
it([80]) =< aux(23)
it([82]) =< aux(23)
it([83]) =< aux(23)
it([84]) =< aux(23)
it([68,80]) =< aux(24)
it([68,84]) =< aux(24)
it([69,80]) =< aux(24)
it([69,84]) =< aux(24)
it([80]) =< aux(24)
it([82]) =< aux(24)
it([83]) =< aux(24)
it([84]) =< aux(24)
it(60) =< aux(25)
it(70) =< aux(25)
it(71) =< aux(25)
it(72) =< aux(25)
it(73) =< aux(25)
it([66,80]) =< aux(25)
it([66,84]) =< aux(25)
it([66,multiple([59,64,65],[[84],[80]])]) =< aux(25)
it([67,80]) =< aux(25)
it([67,84]) =< aux(25)
it([67,multiple([59,64,65],[[84],[80]])]) =< aux(25)
it([68,80]) =< aux(25)
it([68,84]) =< aux(25)
it([69,80]) =< aux(25)
it([83]) =< aux(26)
it([84]) =< aux(26)
it(70) =< aux(27)
it([66,80]) =< aux(27)
it([66,multiple([59,64,65],[[84],[80]])]) =< aux(27)
it([82]) =< aux(28)
s(4) =< aux(28)
it([67,84]) =< aux(29)
it([67,multiple([59,64,65],[[84],[80]])]) =< aux(29)
it([68,80]) =< aux(29)
it([68,84]) =< aux(29)
it([69,80]) =< aux(29)
it([67,80]) =< aux(30)
it([67,multiple([59,64,65],[[84],[80]])]) =< aux(30)
it([68,80]) =< aux(30)
it(70) =< aux(31)
it(71) =< aux(31)
it(72) =< aux(31)
it(73) =< aux(31)
it(74) =< aux(31)
it(75) =< aux(31)
it([66,80]) =< aux(31)
it([66,84]) =< aux(31)
it([66,multiple([59,64,65],[[84],[80]])]) =< aux(31)
it([67,80]) =< aux(31)
it([67,84]) =< aux(31)
it([67,multiple([59,64,65],[[84],[80]])]) =< aux(31)
it([68,80]) =< aux(31)
it([68,84]) =< aux(31)
it([69,80]) =< aux(31)
it([69,84]) =< aux(31)
it([80]) =< aux(31)
it([82]) =< aux(31)
it([83]) =< aux(31)
it([84]) =< aux(31)
it([67,80]) =< aux(32)
it([67,84]) =< aux(32)
it([67,multiple([59,64,65],[[84],[80]])]) =< aux(32)
it([68,80]) =< aux(32)
it([68,84]) =< aux(32)
it([69,80]) =< aux(32)
it([69,84]) =< aux(32)
it([80]) =< aux(32)
it([82]) =< aux(32)
it([83]) =< aux(32)
it([84]) =< aux(32)
it(70) =< aux(33)
it(71) =< aux(33)
it(72) =< aux(33)
it(74) =< aux(33)
it([66,80]) =< aux(33)
it([66,84]) =< aux(33)
it([66,multiple([59,64,65],[[84],[80]])]) =< aux(33)
it([67,80]) =< aux(33)
it([67,84]) =< aux(33)
it([67,multiple([59,64,65],[[84],[80]])]) =< aux(33)
it([68,80]) =< aux(33)
it([69,80]) =< aux(33)
it([69,84]) =< aux(33)
it([84]) =< aux(34)
s(5) =< aux(34)
it(71) =< aux(35)
it([67,80]) =< aux(35)
it([67,multiple([59,64,65],[[84],[80]])]) =< aux(35)
it([80]) =< aux(36)
it([66,84]) =< aux(37)
it([66,multiple([59,64,65],[[84],[80]])]) =< aux(37)
it([67,80]) =< aux(37)
it([67,84]) =< aux(37)
it([67,multiple([59,64,65],[[84],[80]])]) =< aux(37)
it([68,80]) =< aux(37)
it([69,80]) =< aux(37)
it([69,84]) =< aux(37)
it([66,80]) =< aux(38)
it([66,multiple([59,64,65],[[84],[80]])]) =< aux(38)
it([67,80]) =< aux(38)
it([67,84]) =< aux(38)
it([67,multiple([59,64,65],[[84],[80]])]) =< aux(38)
it([69,80]) =< aux(38)
s(6) =< aux(32)* (1/2)
s(12) =< aux(24)* (1/3)
s(13) =< aux(24)* (1/2)
s(18) =< aux(32)* (1/3)
it(71) =< it([82])* (1/3)+it([83])* (1/3)+it([84])* (1/3)+aux(35)
it([67,80]) =< it([82])* (1/3)+it([83])* (1/3)+it([84])* (1/3)+aux(35)
it([67,multiple([59,64,65],[[84],[80]])]) =< it([82])* (1/3)+it([83])* (1/3)+it([84])* (1/3)+aux(35)
it(70) =< it([83])* (1/3)+it([84])* (1/3)+aux(27)
it([66,80]) =< it([83])* (1/3)+it([84])* (1/3)+aux(27)
it([66,multiple([59,64,65],[[84],[80]])]) =< it([83])* (1/3)+it([84])* (1/3)+aux(27)
s(16) =< s(6)
s(16) =< aux(32)
s(17) =< aux(32)
s(18) =< aux(32)
s(1) =< s(6)
s(10) =< s(13)
s(10) =< aux(24)
s(11) =< aux(24)
s(12) =< aux(24)
s(9) =< s(13)
s(2) =< aux(24)
s(3) =< aux(24)
s(4) =< aux(24)
s(5) =< aux(24)
s(2) =< aux(32)
s(3) =< aux(32)
s(4) =< aux(32)
s(5) =< aux(32)
s(2) =< s(6)

  with precondition: [Out=1,V1>=2,V>=2] 

* Chain [multiple([59,64,65],[[84],[80]])]: 1*it(59)+1*it(64)+1*it(65)+1*it([80])+1*it([84])+0
  Such that:it([80]) =< V1/3+1/3
it([84]) =< V/2+1/2
aux(1) =< V1
aux(2) =< V
aux(3) =< V/2
it(64) =< aux(1)
it(65) =< aux(1)
it([80]) =< aux(1)
it([84]) =< aux(1)
it(64) =< aux(2)
it(65) =< aux(2)
it([80]) =< aux(2)
it([84]) =< aux(2)
it(59) =< aux(3)
it(64) =< aux(3)

  with precondition: [Out=2,V1=V,V1>=2] 

* Chain [69,multiple([59,64,65],[[84],[80]])]: 1*it(59)+2*it(64)+1*it(65)+1*it([80])+1
  Such that:it([80]) =< V1/3
aux(4) =< V1
aux(5) =< V1/2
it(64) =< aux(5)
it(64) =< aux(4)
it(65) =< aux(4)
it([80]) =< aux(4)
it(59) =< aux(5)

  with precondition: [Out=1,V1>=3,V>=V1+1] 

* Chain [68,multiple([59,64,65],[[84],[80]])]: 1*it(59)+2*it(64)+1*it(65)+1*it([80])+1
  Such that:it([80]) =< V/3
aux(6) =< V
aux(7) =< V/2
it(64) =< aux(7)
it(64) =< aux(6)
it(65) =< aux(6)
it([80]) =< aux(6)
it(59) =< aux(7)

  with precondition: [Out=1,V>=3,V1>=V+1] 

* Chain [67,multiple([59,64,65],[[84],[80]])]: 1*it(59)+2*it(64)+1*it(65)+1*it([80])+1
  Such that:it([80]) =< V1/3
aux(8) =< V1
aux(9) =< V1/2
it(64) =< aux(9)
it(64) =< aux(8)
it(65) =< aux(8)
it([80]) =< aux(8)
it(59) =< aux(9)

  with precondition: [Out=1,V1>=4,V>=V1+1] 

* Chain [66,multiple([59,64,65],[[84],[80]])]: 1*it(59)+2*it(64)+1*it(65)+1*it([80])+1
  Such that:it([80]) =< V/3
aux(10) =< V
aux(11) =< V/2
it(64) =< aux(11)
it(64) =< aux(10)
it(65) =< aux(10)
it([80]) =< aux(10)
it(59) =< aux(11)

  with precondition: [Out=1,V>=4,V1>=V+1] 


#### Cost of chains of mklam(V1,V,Out):
* Chain [86]: 0
  with precondition: [Out=0,V1>=0,V>=0] 

* Chain [85]: 1
  with precondition: [V+V1=Out,V1>=1,V>=0] 


#### Cost of chains of fun2(V1,V,V2,V84,Out):
* Chain [89]: 0
  with precondition: [V1=1,V84=Out,V>=0,V2>=0,V84>=0] 

* Chain [88]: 0
  with precondition: [V1=2,V2=Out,V>=0,V2>=0,V84>=0] 

* Chain [87]: 0
  with precondition: [Out=0,V1>=0,V>=0,V2>=0,V84>=0] 


#### Cost of loops [90,91,92] 

 * loop 90:subst(V1,V,V2,Out) -> [subst(V1',V',V2',Out')] 
2*s(648)+2*s(649)+1*s(650)+1*s(651)+1*s(652)+1*s(653)+1*s(654)+1*s(655)+2*s(656)+2*s(657)+1*s(658)+2*s(659)+2*s(660)+1*s(661)+3*s(662)+2*s(663)+3*s(664)+2*s(665)+1*s(666)+1*s(667)+1*s(668)+1*s(669)+5*s(670)+1*s(671)+1*s(672)+2*s(674)+2*s(676)+4*s(677)+2*s(678)+3*s(679)+4*s(680)+2*s(681)+2*s(682)+1*s(683)+1*s(684)+4*s(685)+2*s(686)+4*s(687)+2*s(688)+2*s(689)+4
  Such that:s(632) =< V1
s(633) =< V1+1
s(634) =< V1/2
s(635) =< V1/2+1/2
s(636) =< V1/3
s(637) =< V1/3+1/3
s(638) =< V1/4+1/4
s(639) =< V1/5+1/5
s(640) =< V2
s(641) =< V2+1
s(642) =< V2/2
s(643) =< V2/2+1/2
s(644) =< V2/3
s(645) =< V2/3+1/3
s(646) =< V2/4+1/4
s(647) =< V2/5+1/5
s(648) =< s(636)
s(649) =< s(644)
s(650) =< s(632)
s(651) =< s(632)
s(652) =< s(632)
s(653) =< s(632)
s(654) =< s(632)
s(655) =< s(632)
s(656) =< s(632)
s(657) =< s(632)
s(658) =< s(632)
s(659) =< s(632)
s(660) =< s(632)
s(661) =< s(632)
s(662) =< s(632)
s(663) =< s(632)
s(664) =< s(632)
s(665) =< s(632)
s(666) =< s(632)
s(667) =< s(632)
s(668) =< s(632)
s(669) =< s(632)
s(662) =< s(633)
s(663) =< s(633)
s(664) =< s(633)
s(665) =< s(633)
s(666) =< s(633)
s(667) =< s(633)
s(668) =< s(633)
s(669) =< s(633)
s(670) =< s(634)
s(650) =< s(634)
s(651) =< s(634)
s(652) =< s(634)
s(653) =< s(634)
s(656) =< s(634)
s(657) =< s(634)
s(658) =< s(634)
s(659) =< s(634)
s(660) =< s(634)
s(661) =< s(634)
s(662) =< s(634)
s(663) =< s(634)
s(664) =< s(634)
s(668) =< s(635)
s(669) =< s(635)
s(650) =< s(636)
s(656) =< s(636)
s(658) =< s(636)
s(667) =< s(637)
s(671) =< s(637)
s(660) =< s(638)
s(661) =< s(638)
s(662) =< s(638)
s(663) =< s(638)
s(664) =< s(638)
s(659) =< s(639)
s(661) =< s(639)
s(662) =< s(639)
s(650) =< s(640)
s(651) =< s(640)
s(652) =< s(640)
s(653) =< s(640)
s(654) =< s(640)
s(655) =< s(640)
s(656) =< s(640)
s(657) =< s(640)
s(658) =< s(640)
s(659) =< s(640)
s(660) =< s(640)
s(661) =< s(640)
s(662) =< s(640)
s(663) =< s(640)
s(664) =< s(640)
s(665) =< s(640)
s(666) =< s(640)
s(667) =< s(640)
s(668) =< s(640)
s(669) =< s(640)
s(659) =< s(641)
s(660) =< s(641)
s(661) =< s(641)
s(662) =< s(641)
s(663) =< s(641)
s(664) =< s(641)
s(665) =< s(641)
s(666) =< s(641)
s(667) =< s(641)
s(668) =< s(641)
s(669) =< s(641)
s(650) =< s(642)
s(651) =< s(642)
s(652) =< s(642)
s(654) =< s(642)
s(656) =< s(642)
s(657) =< s(642)
s(658) =< s(642)
s(659) =< s(642)
s(660) =< s(642)
s(661) =< s(642)
s(662) =< s(642)
s(664) =< s(642)
s(665) =< s(642)
s(669) =< s(643)
s(672) =< s(643)
s(651) =< s(644)
s(659) =< s(644)
s(661) =< s(644)
s(666) =< s(645)
s(657) =< s(646)
s(658) =< s(646)
s(659) =< s(646)
s(660) =< s(646)
s(661) =< s(646)
s(662) =< s(646)
s(664) =< s(646)
s(665) =< s(646)
s(656) =< s(647)
s(658) =< s(647)
s(659) =< s(647)
s(660) =< s(647)
s(661) =< s(647)
s(664) =< s(647)
s(673) =< s(641)* (1/2)
s(674) =< s(633)* (1/3)
s(675) =< s(633)* (1/2)
s(676) =< s(641)* (1/3)
s(651) =< s(667)* (1/3)+s(668)* (1/3)+s(669)* (1/3)+s(644)
s(659) =< s(667)* (1/3)+s(668)* (1/3)+s(669)* (1/3)+s(644)
s(661) =< s(667)* (1/3)+s(668)* (1/3)+s(669)* (1/3)+s(644)
s(650) =< s(668)* (1/3)+s(669)* (1/3)+s(636)
s(656) =< s(668)* (1/3)+s(669)* (1/3)+s(636)
s(658) =< s(668)* (1/3)+s(669)* (1/3)+s(636)
s(677) =< s(673)
s(677) =< s(641)
s(678) =< s(641)
s(676) =< s(641)
s(679) =< s(673)
s(680) =< s(675)
s(680) =< s(633)
s(681) =< s(633)
s(674) =< s(633)
s(682) =< s(675)
s(683) =< s(633)
s(684) =< s(633)
s(671) =< s(633)
s(672) =< s(633)
s(683) =< s(641)
s(684) =< s(641)
s(671) =< s(641)
s(672) =< s(641)
s(683) =< s(673)
s(685) =< s(634)
s(685) =< s(632)
s(686) =< s(632)
s(648) =< s(632)
s(687) =< s(642)
s(687) =< s(640)
s(688) =< s(640)
s(649) =< s(640)
s(689) =< s(642)

 * loop 91:subst(V1,V,V2,Out) -> [subst(V1',V',V2',Out')] 
2*s(764)+2*s(765)+1*s(766)+1*s(767)+1*s(768)+1*s(769)+1*s(770)+1*s(771)+2*s(772)+2*s(773)+1*s(774)+2*s(775)+2*s(776)+1*s(777)+3*s(778)+2*s(779)+3*s(780)+2*s(781)+1*s(782)+1*s(783)+1*s(784)+1*s(785)+5*s(786)+1*s(787)+1*s(788)+2*s(790)+2*s(792)+4*s(793)+2*s(794)+3*s(795)+4*s(796)+2*s(797)+2*s(798)+1*s(799)+1*s(800)+4*s(801)+2*s(802)+4*s(803)+2*s(804)+2*s(805)+3
  Such that:s(748) =< V1
s(749) =< V1+1
s(750) =< V1/2
s(751) =< V1/2+1/2
s(752) =< V1/3
s(753) =< V1/3+1/3
s(754) =< V1/4+1/4
s(755) =< V1/5+1/5
s(756) =< V2
s(757) =< V2+1
s(758) =< V2/2
s(759) =< V2/2+1/2
s(760) =< V2/3
s(761) =< V2/3+1/3
s(762) =< V2/4+1/4
s(763) =< V2/5+1/5
s(764) =< s(752)
s(765) =< s(760)
s(766) =< s(748)
s(767) =< s(748)
s(768) =< s(748)
s(769) =< s(748)
s(770) =< s(748)
s(771) =< s(748)
s(772) =< s(748)
s(773) =< s(748)
s(774) =< s(748)
s(775) =< s(748)
s(776) =< s(748)
s(777) =< s(748)
s(778) =< s(748)
s(779) =< s(748)
s(780) =< s(748)
s(781) =< s(748)
s(782) =< s(748)
s(783) =< s(748)
s(784) =< s(748)
s(785) =< s(748)
s(778) =< s(749)
s(779) =< s(749)
s(780) =< s(749)
s(781) =< s(749)
s(782) =< s(749)
s(783) =< s(749)
s(784) =< s(749)
s(785) =< s(749)
s(786) =< s(750)
s(766) =< s(750)
s(767) =< s(750)
s(768) =< s(750)
s(769) =< s(750)
s(772) =< s(750)
s(773) =< s(750)
s(774) =< s(750)
s(775) =< s(750)
s(776) =< s(750)
s(777) =< s(750)
s(778) =< s(750)
s(779) =< s(750)
s(780) =< s(750)
s(784) =< s(751)
s(785) =< s(751)
s(766) =< s(752)
s(772) =< s(752)
s(774) =< s(752)
s(783) =< s(753)
s(787) =< s(753)
s(776) =< s(754)
s(777) =< s(754)
s(778) =< s(754)
s(779) =< s(754)
s(780) =< s(754)
s(775) =< s(755)
s(777) =< s(755)
s(778) =< s(755)
s(766) =< s(756)
s(767) =< s(756)
s(768) =< s(756)
s(769) =< s(756)
s(770) =< s(756)
s(771) =< s(756)
s(772) =< s(756)
s(773) =< s(756)
s(774) =< s(756)
s(775) =< s(756)
s(776) =< s(756)
s(777) =< s(756)
s(778) =< s(756)
s(779) =< s(756)
s(780) =< s(756)
s(781) =< s(756)
s(782) =< s(756)
s(783) =< s(756)
s(784) =< s(756)
s(785) =< s(756)
s(775) =< s(757)
s(776) =< s(757)
s(777) =< s(757)
s(778) =< s(757)
s(779) =< s(757)
s(780) =< s(757)
s(781) =< s(757)
s(782) =< s(757)
s(783) =< s(757)
s(784) =< s(757)
s(785) =< s(757)
s(766) =< s(758)
s(767) =< s(758)
s(768) =< s(758)
s(770) =< s(758)
s(772) =< s(758)
s(773) =< s(758)
s(774) =< s(758)
s(775) =< s(758)
s(776) =< s(758)
s(777) =< s(758)
s(778) =< s(758)
s(780) =< s(758)
s(781) =< s(758)
s(785) =< s(759)
s(788) =< s(759)
s(767) =< s(760)
s(775) =< s(760)
s(777) =< s(760)
s(782) =< s(761)
s(773) =< s(762)
s(774) =< s(762)
s(775) =< s(762)
s(776) =< s(762)
s(777) =< s(762)
s(778) =< s(762)
s(780) =< s(762)
s(781) =< s(762)
s(772) =< s(763)
s(774) =< s(763)
s(775) =< s(763)
s(776) =< s(763)
s(777) =< s(763)
s(780) =< s(763)
s(789) =< s(757)* (1/2)
s(790) =< s(749)* (1/3)
s(791) =< s(749)* (1/2)
s(792) =< s(757)* (1/3)
s(767) =< s(783)* (1/3)+s(784)* (1/3)+s(785)* (1/3)+s(760)
s(775) =< s(783)* (1/3)+s(784)* (1/3)+s(785)* (1/3)+s(760)
s(777) =< s(783)* (1/3)+s(784)* (1/3)+s(785)* (1/3)+s(760)
s(766) =< s(784)* (1/3)+s(785)* (1/3)+s(752)
s(772) =< s(784)* (1/3)+s(785)* (1/3)+s(752)
s(774) =< s(784)* (1/3)+s(785)* (1/3)+s(752)
s(793) =< s(789)
s(793) =< s(757)
s(794) =< s(757)
s(792) =< s(757)
s(795) =< s(789)
s(796) =< s(791)
s(796) =< s(749)
s(797) =< s(749)
s(790) =< s(749)
s(798) =< s(791)
s(799) =< s(749)
s(800) =< s(749)
s(787) =< s(749)
s(788) =< s(749)
s(799) =< s(757)
s(800) =< s(757)
s(787) =< s(757)
s(788) =< s(757)
s(799) =< s(789)
s(801) =< s(750)
s(801) =< s(748)
s(802) =< s(748)
s(764) =< s(748)
s(803) =< s(758)
s(803) =< s(756)
s(804) =< s(756)
s(765) =< s(756)
s(805) =< s(758)

 * loop 92:subst(V1,V,V2,Out) -> [subst(V1',V',V2',Out'),subst(V1'2,V'2,V2'2,Out'2)] 
2
#### Cost of phase [90,91,92]:subst(V1,V,V2,Out) -> [] 
11*it(90)+2*it([93])+17*it([94])+3*it([101])+2*s(806)+2*s(807)+1*s(808)+1*s(809)+1*s(810)+1*s(811)+1*s(812)+1*s(813)+2*s(814)+2*s(815)+1*s(816)+2*s(817)+2*s(818)+1*s(819)+3*s(820)+2*s(821)+3*s(822)+2*s(823)+1*s(824)+1*s(825)+1*s(826)+1*s(827)+5*s(828)+2*s(829)+4*s(830)+4*s(831)+4*s(832)+8*s(833)+4*s(834)+6*s(835)+8*s(836)+4*s(837)+4*s(838)+2*s(840)+4*s(841)+2*s(842)+4*s(843)+2*s(844)+2*s(845)+2*s(864)+2*s(865)+1*s(866)+1*s(867)+1*s(868)+1*s(869)+1*s(870)+1*s(871)+2*s(872)+2*s(873)+1*s(874)+2*s(875)+2*s(876)+1*s(877)+3*s(878)+2*s(879)+3*s(880)+2*s(881)+1*s(882)+1*s(883)+1*s(884)+1*s(885)+5*s(886)+4*s(899)+2*s(900)+4*s(901)+2*s(902)+2*s(903)+4*s(922)+4*s(923)+2*s(924)+2*s(925)+2*s(926)+2*s(927)+2*s(928)+2*s(929)+4*s(930)+4*s(931)+2*s(932)+4*s(933)+4*s(934)+2*s(935)+6*s(936)+4*s(937)+6*s(938)+4*s(939)+2*s(940)+2*s(941)+4*s(942)+4*s(943)+17*s(944)+8*s(945)+14*s(946)+12*s(947)+14*s(948)+28*s(949)+14*s(950)+21*s(951)+24*s(952)+12*s(953)+18*s(954)+10*s(956)+9*s(957)+7*s(958)+8*s(959)+4*s(960)+6*s(961)+4*s(962)+2*s(963)+2*s(964)+4*s(965)+4*s(966)+2*s(967)+4*s(968)+4*s(969)+2*s(970)+6*s(971)+4*s(972)+6*s(973)+4*s(974)+2*s(975)+2*s(976)+2*s(977)+2*s(978)+4*s(979)+4*s(980)+4*s(981)+4*s(982)+2*s(983)+4*s(984)+10*s(985)+2*s(986)+6*s(987)+4*s(988)+4*s(989)+2*s(990)+1*s(992)+1*s(993)+1*s(1018)+1*s(1019)+5*s(1020)+3*s(1021)+2*s(1023)+2*s(1024)+1*s(1025)+1*s(1026)+1*s(1027)+1*s(1028)+1*s(1029)+1*s(1030)+2*s(1031)+2*s(1032)+1*s(1033)+2*s(1034)+2*s(1035)+1*s(1036)+3*s(1037)+2*s(1038)+3*s(1039)+2*s(1040)+1*s(1041)+1*s(1042)+1*s(1043)+1*s(1044)+1*s(1045)+2*s(1046)+2*s(1047)+4*s(1052)+2*s(1053)+2*s(1054)+1*s(1056)+4*s(1057)+1*s(1078)+1*s(1079)+1*s(1080)+1*s(1081)+1*s(1082)+1*s(1085)+1*s(1086)+1*s(1087)+1*s(1088)+1*s(1089)+0
  Such that:aux(178) =< V1/3
aux(190) =< 1
aux(191) =< V1
aux(192) =< V1+1
aux(193) =< V1/2+1/2
aux(194) =< V2
aux(195) =< V2+1
it(90) =< aux(194)
it([93]) =< aux(194)
it([94]) =< aux(194)
s(1005) =< aux(194)
s(1005) =< aux(195)
aux(179) =< aux(191)* (1/3)
aux(109) =< aux(191)+1
aux(124) =< aux(191)
aux(149) =< aux(191)* (1/2)+1/2
aux(145) =< aux(191)*2
aux(117) =< aux(194)+1
aux(132) =< aux(194)
s(1008) =< aux(195)* (1/5)
s(1009) =< aux(195)* (1/4)
s(996) =< aux(195)* (1/3)
s(1015) =< aux(194)* (1/3)
s(999) =< aux(195)* (1/2)
s(1007) =< aux(194)* (1/2)
it([93]) =< it(90)+aux(190)
it([94]) =< it(90)+aux(190)
it([101]) =< it(90)+aux(190)
aux(118) =< it(90)*aux(194)
aux(110) =< it(90)*aux(191)
aux(142) =< it(90)*aux(145)
aux(111) =< it(90)*aux(109)
aux(151) =< it([93])*aux(149)
s(1086) =< it([93])*aux(149)
aux(146) =< it([93])*aux(124)
aux(119) =< it(90)*aux(117)
aux(134) =< it(90)*aux(132)
aux(126) =< it(90)*aux(124)
s(855) =< aux(118)* (1/3)
s(846) =< aux(118)* (1/2)
s(854) =< aux(110)* (1/3)
s(849) =< aux(110)* (1/2)
aux(177) =< aux(142)* (1/3)
aux(164) =< aux(142)+aux(191)
it([94]) =< aux(142)+aux(191)
s(994) =< aux(142)+aux(191)
aux(146) =< aux(142)+aux(191)
aux(159) =< aux(111)*2
aux(156) =< aux(111)+aux(193)
s(1006) =< aux(111)+aux(193)
s(1086) =< aux(111)+aux(193)
s(1079) =< aux(111)+aux(193)
s(1084) =< aux(142)+aux(191)
aux(151) =< aux(111)+aux(193)
s(1083) =< aux(111)+aux(193)
s(856) =< aux(119)* (1/5)
s(857) =< aux(119)* (1/4)
s(858) =< aux(119)* (1/3)
s(913) =< aux(134)* (1/3)
s(850) =< aux(119)* (1/2)
s(904) =< aux(134)* (1/2)
s(860) =< aux(111)* (1/5)
s(861) =< aux(111)* (1/4)
s(862) =< aux(111)* (1/3)
s(912) =< aux(126)* (1/3)
s(853) =< aux(111)* (1/2)
s(907) =< aux(126)* (1/2)
aux(176) =< aux(159)+aux(192)
s(1066) =< aux(159)+aux(192)
s(1014) =< aux(177)+aux(178)
aux(163) =< aux(159)+aux(192)
it([101]) =< aux(159)+aux(192)
aux(163) =< it([94])*aux(109)
aux(164) =< it([94])*aux(124)
s(1066) =< it([94])*aux(109)
aux(156) =< it([94])*aux(149)
s(1079) =< it([94])*aux(149)
s(1084) =< it([94])*aux(124)
s(1085) =< aux(151)* (2/3)
s(1090) =< aux(146)* (1/2)
aux(176) =< it([101])*aux(109)
s(1014) =< it([101])*aux(179)
s(1074) =< aux(163)* (1/5)
s(1075) =< aux(163)* (1/4)
s(1076) =< aux(163)* (1/3)
s(1068) =< aux(164)* (1/3)
s(1077) =< aux(163)* (1/2)
s(1078) =< aux(156)* (2/3)
s(1011) =< aux(176)* (1/5)
s(1012) =< aux(176)* (1/4)
s(995) =< aux(176)* (1/3)
s(1003) =< aux(176)* (1/2)
s(1087) =< aux(146)
s(1088) =< aux(146)
s(1085) =< aux(146)
s(1086) =< aux(146)
s(1089) =< s(1090)
s(1087) =< s(1090)
s(1080) =< s(1084)
s(1081) =< s(1084)
s(1078) =< s(1084)
s(1079) =< s(1084)
s(1082) =< s(1083)
s(1080) =< s(1083)
s(1019) =< s(1077)
s(1018) =< s(1076)
s(1023) =< s(1068)
s(1024) =< s(1015)
s(1025) =< aux(164)
s(1026) =< aux(164)
s(1027) =< aux(164)
s(1028) =< aux(164)
s(1029) =< aux(164)
s(1030) =< aux(164)
s(1031) =< aux(164)
s(1032) =< aux(164)
s(1033) =< aux(164)
s(1034) =< aux(164)
s(1035) =< aux(164)
s(1036) =< aux(164)
s(1037) =< aux(164)
s(1038) =< aux(164)
s(1039) =< aux(164)
s(1040) =< aux(164)
s(1041) =< aux(164)
s(1042) =< aux(164)
s(1043) =< aux(164)
s(1044) =< aux(164)
s(1037) =< s(1066)
s(1038) =< s(1066)
s(1039) =< s(1066)
s(1040) =< s(1066)
s(1041) =< s(1066)
s(1042) =< s(1066)
s(1043) =< s(1066)
s(1044) =< s(1066)
s(944) =< s(1006)
s(1025) =< s(1006)
s(1026) =< s(1006)
s(1027) =< s(1006)
s(1028) =< s(1006)
s(1031) =< s(1006)
s(1032) =< s(1006)
s(1033) =< s(1006)
s(1034) =< s(1006)
s(1035) =< s(1006)
s(1036) =< s(1006)
s(1037) =< s(1006)
s(1038) =< s(1006)
s(1039) =< s(1006)
s(1043) =< s(1077)
s(1044) =< s(1077)
s(1025) =< s(1068)
s(1031) =< s(1068)
s(1033) =< s(1068)
s(1042) =< s(1076)
s(1045) =< s(1076)
s(1035) =< s(1075)
s(1036) =< s(1075)
s(1037) =< s(1075)
s(1038) =< s(1075)
s(1039) =< s(1075)
s(1034) =< s(1074)
s(1036) =< s(1074)
s(1037) =< s(1074)
s(1025) =< aux(194)
s(1026) =< aux(194)
s(1027) =< aux(194)
s(1028) =< aux(194)
s(1029) =< aux(194)
s(1030) =< aux(194)
s(1031) =< aux(194)
s(1032) =< aux(194)
s(1033) =< aux(194)
s(1034) =< aux(194)
s(1035) =< aux(194)
s(1036) =< aux(194)
s(1037) =< aux(194)
s(1038) =< aux(194)
s(1039) =< aux(194)
s(1040) =< aux(194)
s(1041) =< aux(194)
s(1042) =< aux(194)
s(1043) =< aux(194)
s(1044) =< aux(194)
s(1034) =< aux(195)
s(1035) =< aux(195)
s(1036) =< aux(195)
s(1037) =< aux(195)
s(1038) =< aux(195)
s(1039) =< aux(195)
s(1040) =< aux(195)
s(1041) =< aux(195)
s(1042) =< aux(195)
s(1043) =< aux(195)
s(1044) =< aux(195)
s(1025) =< s(1007)
s(1026) =< s(1007)
s(1027) =< s(1007)
s(1029) =< s(1007)
s(1031) =< s(1007)
s(1032) =< s(1007)
s(1033) =< s(1007)
s(1034) =< s(1007)
s(1035) =< s(1007)
s(1036) =< s(1007)
s(1037) =< s(1007)
s(1039) =< s(1007)
s(1040) =< s(1007)
s(1044) =< s(999)
s(1046) =< s(999)
s(1026) =< s(1015)
s(1034) =< s(1015)
s(1036) =< s(1015)
s(1041) =< s(996)
s(1032) =< s(1009)
s(1033) =< s(1009)
s(1034) =< s(1009)
s(1035) =< s(1009)
s(1036) =< s(1009)
s(1037) =< s(1009)
s(1039) =< s(1009)
s(1040) =< s(1009)
s(1031) =< s(1008)
s(1033) =< s(1008)
s(1034) =< s(1008)
s(1035) =< s(1008)
s(1036) =< s(1008)
s(1039) =< s(1008)
s(1047) =< s(1066)* (1/3)
s(1067) =< s(1066)* (1/2)
s(948) =< aux(195)* (1/3)
s(1026) =< s(1042)* (1/3)+s(1043)* (1/3)+s(1044)* (1/3)+s(1015)
s(1034) =< s(1042)* (1/3)+s(1043)* (1/3)+s(1044)* (1/3)+s(1015)
s(1036) =< s(1042)* (1/3)+s(1043)* (1/3)+s(1044)* (1/3)+s(1015)
s(1025) =< s(1043)* (1/3)+s(1044)* (1/3)+s(1068)
s(1031) =< s(1043)* (1/3)+s(1044)* (1/3)+s(1068)
s(1033) =< s(1043)* (1/3)+s(1044)* (1/3)+s(1068)
s(949) =< s(999)
s(949) =< aux(195)
s(950) =< aux(195)
s(948) =< aux(195)
s(951) =< s(999)
s(1052) =< s(1067)
s(1052) =< s(1066)
s(1053) =< s(1066)
s(1047) =< s(1066)
s(1054) =< s(1067)
s(1046) =< s(1066)
s(1056) =< s(1066)
s(1045) =< s(1066)
s(1046) =< aux(195)
s(1056) =< aux(195)
s(1045) =< aux(195)
s(1020) =< s(1006)
s(1020) =< aux(164)
s(1021) =< aux(164)
s(1023) =< aux(164)
s(1057) =< s(1007)
s(1057) =< aux(194)
s(1024) =< aux(194)
s(961) =< s(1007)
s(1018) =< aux(164)
s(1019) =< aux(164)
s(993) =< s(1003)
s(992) =< s(995)
s(922) =< s(1014)
s(923) =< s(1015)
s(924) =< s(994)
s(925) =< s(994)
s(926) =< s(994)
s(927) =< s(994)
s(928) =< s(994)
s(929) =< s(994)
s(930) =< s(994)
s(931) =< s(994)
s(932) =< s(994)
s(933) =< s(994)
s(934) =< s(994)
s(935) =< s(994)
s(936) =< s(994)
s(937) =< s(994)
s(938) =< s(994)
s(939) =< s(994)
s(940) =< s(994)
s(941) =< s(994)
s(942) =< s(994)
s(943) =< s(994)
s(936) =< aux(176)
s(937) =< aux(176)
s(938) =< aux(176)
s(939) =< aux(176)
s(940) =< aux(176)
s(941) =< aux(176)
s(942) =< aux(176)
s(943) =< aux(176)
s(924) =< s(1006)
s(925) =< s(1006)
s(926) =< s(1006)
s(927) =< s(1006)
s(930) =< s(1006)
s(931) =< s(1006)
s(932) =< s(1006)
s(933) =< s(1006)
s(934) =< s(1006)
s(935) =< s(1006)
s(936) =< s(1006)
s(937) =< s(1006)
s(938) =< s(1006)
s(942) =< s(1003)
s(943) =< s(1003)
s(924) =< s(1014)
s(930) =< s(1014)
s(932) =< s(1014)
s(941) =< s(995)
s(945) =< s(995)
s(934) =< s(1012)
s(935) =< s(1012)
s(936) =< s(1012)
s(937) =< s(1012)
s(938) =< s(1012)
s(933) =< s(1011)
s(935) =< s(1011)
s(936) =< s(1011)
s(924) =< s(1005)
s(925) =< s(1005)
s(926) =< s(1005)
s(927) =< s(1005)
s(928) =< s(1005)
s(929) =< s(1005)
s(930) =< s(1005)
s(931) =< s(1005)
s(932) =< s(1005)
s(933) =< s(1005)
s(934) =< s(1005)
s(935) =< s(1005)
s(936) =< s(1005)
s(937) =< s(1005)
s(938) =< s(1005)
s(939) =< s(1005)
s(940) =< s(1005)
s(941) =< s(1005)
s(942) =< s(1005)
s(943) =< s(1005)
s(933) =< aux(195)
s(934) =< aux(195)
s(935) =< aux(195)
s(936) =< aux(195)
s(937) =< aux(195)
s(938) =< aux(195)
s(939) =< aux(195)
s(940) =< aux(195)
s(941) =< aux(195)
s(942) =< aux(195)
s(943) =< aux(195)
s(924) =< s(1007)
s(925) =< s(1007)
s(926) =< s(1007)
s(928) =< s(1007)
s(930) =< s(1007)
s(931) =< s(1007)
s(932) =< s(1007)
s(933) =< s(1007)
s(934) =< s(1007)
s(935) =< s(1007)
s(936) =< s(1007)
s(938) =< s(1007)
s(939) =< s(1007)
s(943) =< s(999)
s(946) =< s(999)
s(925) =< s(1015)
s(933) =< s(1015)
s(935) =< s(1015)
s(940) =< s(996)
s(931) =< s(1009)
s(932) =< s(1009)
s(933) =< s(1009)
s(934) =< s(1009)
s(935) =< s(1009)
s(936) =< s(1009)
s(938) =< s(1009)
s(939) =< s(1009)
s(930) =< s(1008)
s(932) =< s(1008)
s(933) =< s(1008)
s(934) =< s(1008)
s(935) =< s(1008)
s(938) =< s(1008)
s(947) =< aux(176)* (1/3)
s(925) =< s(941)* (1/3)+s(942)* (1/3)+s(943)* (1/3)+s(1015)
s(933) =< s(941)* (1/3)+s(942)* (1/3)+s(943)* (1/3)+s(1015)
s(935) =< s(941)* (1/3)+s(942)* (1/3)+s(943)* (1/3)+s(1015)
s(924) =< s(942)* (1/3)+s(943)* (1/3)+s(1014)
s(930) =< s(942)* (1/3)+s(943)* (1/3)+s(1014)
s(932) =< s(942)* (1/3)+s(943)* (1/3)+s(1014)
s(952) =< s(1003)
s(952) =< aux(176)
s(953) =< aux(176)
s(947) =< aux(176)
s(954) =< s(1003)
s(946) =< aux(176)
s(956) =< aux(176)
s(945) =< aux(176)
s(946) =< aux(195)
s(956) =< aux(195)
s(945) =< aux(195)
s(957) =< s(1006)
s(957) =< s(994)
s(958) =< s(994)
s(922) =< s(994)
s(959) =< s(1007)
s(959) =< s(1005)
s(960) =< s(1005)
s(923) =< s(1005)
s(962) =< s(994)
s(963) =< s(994)
s(964) =< s(994)
s(965) =< s(994)
s(966) =< s(994)
s(967) =< s(994)
s(968) =< s(994)
s(969) =< s(994)
s(970) =< s(994)
s(971) =< s(994)
s(972) =< s(994)
s(973) =< s(994)
s(974) =< s(994)
s(975) =< s(994)
s(976) =< s(994)
s(971) =< aux(176)
s(972) =< aux(176)
s(973) =< aux(176)
s(974) =< aux(176)
s(975) =< aux(176)
s(976) =< aux(176)
s(963) =< s(1006)
s(965) =< s(1006)
s(966) =< s(1006)
s(967) =< s(1006)
s(968) =< s(1006)
s(969) =< s(1006)
s(970) =< s(1006)
s(971) =< s(1006)
s(972) =< s(1006)
s(973) =< s(1006)
s(976) =< s(995)
s(969) =< s(1012)
s(970) =< s(1012)
s(971) =< s(1012)
s(972) =< s(1012)
s(973) =< s(1012)
s(1002) =< s(1012)
s(968) =< s(1011)
s(970) =< s(1011)
s(971) =< s(1011)
s(1001) =< s(1011)
s(962) =< s(1005)
s(963) =< s(1005)
s(964) =< s(1005)
s(965) =< s(1005)
s(966) =< s(1005)
s(967) =< s(1005)
s(968) =< s(1005)
s(969) =< s(1005)
s(970) =< s(1005)
s(971) =< s(1005)
s(972) =< s(1005)
s(973) =< s(1005)
s(974) =< s(1005)
s(975) =< s(1005)
s(976) =< s(1005)
s(968) =< aux(195)
s(969) =< aux(195)
s(970) =< aux(195)
s(971) =< aux(195)
s(972) =< aux(195)
s(973) =< aux(195)
s(974) =< aux(195)
s(975) =< aux(195)
s(976) =< aux(195)
s(964) =< s(1007)
s(965) =< s(1007)
s(966) =< s(1007)
s(967) =< s(1007)
s(968) =< s(1007)
s(969) =< s(1007)
s(970) =< s(1007)
s(971) =< s(1007)
s(973) =< s(1007)
s(974) =< s(1007)
s(975) =< s(996)
s(966) =< s(1009)
s(967) =< s(1009)
s(968) =< s(1009)
s(969) =< s(1009)
s(970) =< s(1009)
s(971) =< s(1009)
s(973) =< s(1009)
s(974) =< s(1009)
s(998) =< s(1009)
s(965) =< s(1008)
s(967) =< s(1008)
s(968) =< s(1008)
s(969) =< s(1008)
s(970) =< s(1008)
s(973) =< s(1008)
s(997) =< s(1008)
s(997) =< aux(195)* (1/5)
s(998) =< aux(195)* (1/4)
s(1001) =< aux(176)* (1/5)
s(1002) =< aux(176)* (1/4)
s(964) =< s(956)* (1/2)+s(1007)
s(965) =< s(956)* (1/2)+s(1007)
s(966) =< s(956)* (1/2)+s(1007)
s(967) =< s(956)* (1/2)+s(1007)
s(968) =< s(956)* (1/2)+s(1007)
s(969) =< s(956)* (1/2)+s(1007)
s(970) =< s(956)* (1/2)+s(1007)
s(971) =< s(956)* (1/2)+s(1007)
s(973) =< s(956)* (1/2)+s(1007)
s(974) =< s(956)* (1/2)+s(1007)
s(963) =< s(956)* (1/2)+s(1006)
s(965) =< s(956)* (1/2)+s(1006)
s(966) =< s(956)* (1/2)+s(1006)
s(967) =< s(956)* (1/2)+s(1006)
s(968) =< s(956)* (1/2)+s(1006)
s(969) =< s(956)* (1/2)+s(1006)
s(970) =< s(956)* (1/2)+s(1006)
s(971) =< s(956)* (1/2)+s(1006)
s(972) =< s(956)* (1/2)+s(1006)
s(973) =< s(956)* (1/2)+s(1006)
s(962) =< s(956)+s(1005)
s(963) =< s(956)+s(1005)
s(964) =< s(956)+s(1005)
s(965) =< s(956)+s(1005)
s(966) =< s(956)+s(1005)
s(967) =< s(956)+s(1005)
s(968) =< s(956)+s(1005)
s(969) =< s(956)+s(1005)
s(970) =< s(956)+s(1005)
s(971) =< s(956)+s(1005)
s(972) =< s(956)+s(1005)
s(973) =< s(956)+s(1005)
s(974) =< s(956)+s(1005)
s(975) =< s(956)+s(1005)
s(962) =< s(956)+s(994)
s(963) =< s(956)+s(994)
s(964) =< s(956)+s(994)
s(965) =< s(956)+s(994)
s(966) =< s(956)+s(994)
s(967) =< s(956)+s(994)
s(968) =< s(956)+s(994)
s(969) =< s(956)+s(994)
s(970) =< s(956)+s(994)
s(971) =< s(956)+s(994)
s(972) =< s(956)+s(994)
s(973) =< s(956)+s(994)
s(974) =< s(956)+s(994)
s(975) =< s(956)+s(994)
s(976) =< s(956)+s(994)
s(977) =< aux(176)
s(978) =< aux(176)
s(979) =< aux(176)
s(980) =< aux(176)
s(981) =< aux(176)
s(982) =< aux(176)
s(983) =< aux(176)
s(984) =< aux(176)
s(985) =< aux(176)
s(986) =< aux(176)
s(987) =< aux(176)
s(988) =< aux(176)
s(989) =< aux(176)
s(990) =< aux(176)
s(977) =< s(1003)
s(978) =< s(1003)
s(979) =< s(1003)
s(980) =< s(1003)
s(981) =< s(1003)
s(982) =< s(1003)
s(983) =< s(1003)
s(984) =< s(1003)
s(985) =< s(1003)
s(986) =< s(1003)
s(987) =< s(1003)
s(988) =< s(1003)
s(977) =< s(995)
s(981) =< s(995)
s(983) =< s(995)
s(985) =< s(1002)
s(986) =< s(1002)
s(987) =< s(1002)
s(988) =< s(1002)
s(984) =< s(1001)
s(986) =< s(1001)
s(987) =< s(1001)
s(977) =< aux(195)
s(978) =< aux(195)
s(979) =< aux(195)
s(980) =< aux(195)
s(981) =< aux(195)
s(982) =< aux(195)
s(983) =< aux(195)
s(984) =< aux(195)
s(985) =< aux(195)
s(986) =< aux(195)
s(987) =< aux(195)
s(988) =< aux(195)
s(989) =< aux(195)
s(990) =< aux(195)
s(977) =< s(999)
s(978) =< s(999)
s(979) =< s(999)
s(981) =< s(999)
s(982) =< s(999)
s(983) =< s(999)
s(984) =< s(999)
s(985) =< s(999)
s(986) =< s(999)
s(987) =< s(999)
s(989) =< s(999)
s(978) =< s(996)
s(984) =< s(996)
s(986) =< s(996)
s(990) =< s(996)
s(982) =< s(998)
s(983) =< s(998)
s(984) =< s(998)
s(985) =< s(998)
s(986) =< s(998)
s(987) =< s(998)
s(989) =< s(998)
s(981) =< s(997)
s(983) =< s(997)
s(984) =< s(997)
s(985) =< s(997)
s(986) =< s(997)
s(978) =< s(945)* (1/3)+s(980)* (1/3)+s(979)* (1/3)+s(996)
s(984) =< s(945)* (1/3)+s(980)* (1/3)+s(979)* (1/3)+s(996)
s(986) =< s(945)* (1/3)+s(980)* (1/3)+s(979)* (1/3)+s(996)
s(977) =< s(980)* (1/3)+s(979)* (1/3)+s(995)
s(981) =< s(980)* (1/3)+s(979)* (1/3)+s(995)
s(983) =< s(980)* (1/3)+s(979)* (1/3)+s(995)
s(992) =< s(994)
s(993) =< s(994)
s(864) =< s(912)
s(865) =< s(913)
s(866) =< aux(126)
s(867) =< aux(126)
s(868) =< aux(126)
s(869) =< aux(126)
s(870) =< aux(126)
s(871) =< aux(126)
s(872) =< aux(126)
s(873) =< aux(126)
s(874) =< aux(126)
s(875) =< aux(126)
s(876) =< aux(126)
s(877) =< aux(126)
s(878) =< aux(126)
s(879) =< aux(126)
s(880) =< aux(126)
s(881) =< aux(126)
s(882) =< aux(126)
s(883) =< aux(126)
s(884) =< aux(126)
s(885) =< aux(126)
s(878) =< aux(111)
s(879) =< aux(111)
s(880) =< aux(111)
s(881) =< aux(111)
s(882) =< aux(111)
s(883) =< aux(111)
s(884) =< aux(111)
s(885) =< aux(111)
s(886) =< s(907)
s(866) =< s(907)
s(867) =< s(907)
s(868) =< s(907)
s(869) =< s(907)
s(872) =< s(907)
s(873) =< s(907)
s(874) =< s(907)
s(875) =< s(907)
s(876) =< s(907)
s(877) =< s(907)
s(878) =< s(907)
s(879) =< s(907)
s(880) =< s(907)
s(884) =< s(853)
s(885) =< s(853)
s(866) =< s(912)
s(872) =< s(912)
s(874) =< s(912)
s(883) =< s(862)
s(829) =< s(862)
s(876) =< s(861)
s(877) =< s(861)
s(878) =< s(861)
s(879) =< s(861)
s(880) =< s(861)
s(875) =< s(860)
s(877) =< s(860)
s(878) =< s(860)
s(866) =< aux(134)
s(867) =< aux(134)
s(868) =< aux(134)
s(869) =< aux(134)
s(870) =< aux(134)
s(871) =< aux(134)
s(872) =< aux(134)
s(873) =< aux(134)
s(874) =< aux(134)
s(875) =< aux(134)
s(876) =< aux(134)
s(877) =< aux(134)
s(878) =< aux(134)
s(879) =< aux(134)
s(880) =< aux(134)
s(881) =< aux(134)
s(882) =< aux(134)
s(883) =< aux(134)
s(884) =< aux(134)
s(885) =< aux(134)
s(875) =< aux(119)
s(876) =< aux(119)
s(877) =< aux(119)
s(878) =< aux(119)
s(879) =< aux(119)
s(880) =< aux(119)
s(881) =< aux(119)
s(882) =< aux(119)
s(883) =< aux(119)
s(884) =< aux(119)
s(885) =< aux(119)
s(866) =< s(904)
s(867) =< s(904)
s(868) =< s(904)
s(870) =< s(904)
s(872) =< s(904)
s(873) =< s(904)
s(874) =< s(904)
s(875) =< s(904)
s(876) =< s(904)
s(877) =< s(904)
s(878) =< s(904)
s(880) =< s(904)
s(881) =< s(904)
s(885) =< s(850)
s(830) =< s(850)
s(867) =< s(913)
s(875) =< s(913)
s(877) =< s(913)
s(882) =< s(858)
s(873) =< s(857)
s(874) =< s(857)
s(875) =< s(857)
s(876) =< s(857)
s(877) =< s(857)
s(878) =< s(857)
s(880) =< s(857)
s(881) =< s(857)
s(872) =< s(856)
s(874) =< s(856)
s(875) =< s(856)
s(876) =< s(856)
s(877) =< s(856)
s(880) =< s(856)
s(831) =< aux(111)* (1/3)
s(832) =< aux(119)* (1/3)
s(867) =< s(883)* (1/3)+s(884)* (1/3)+s(885)* (1/3)+s(913)
s(875) =< s(883)* (1/3)+s(884)* (1/3)+s(885)* (1/3)+s(913)
s(877) =< s(883)* (1/3)+s(884)* (1/3)+s(885)* (1/3)+s(913)
s(866) =< s(884)* (1/3)+s(885)* (1/3)+s(912)
s(872) =< s(884)* (1/3)+s(885)* (1/3)+s(912)
s(874) =< s(884)* (1/3)+s(885)* (1/3)+s(912)
s(833) =< s(850)
s(833) =< aux(119)
s(834) =< aux(119)
s(832) =< aux(119)
s(835) =< s(850)
s(836) =< s(853)
s(836) =< aux(111)
s(837) =< aux(111)
s(831) =< aux(111)
s(838) =< s(853)
s(830) =< aux(111)
s(840) =< aux(111)
s(829) =< aux(111)
s(830) =< aux(119)
s(840) =< aux(119)
s(829) =< aux(119)
s(899) =< s(907)
s(899) =< aux(126)
s(900) =< aux(126)
s(864) =< aux(126)
s(901) =< s(904)
s(901) =< aux(134)
s(902) =< aux(134)
s(865) =< aux(134)
s(903) =< s(904)
s(806) =< s(854)
s(807) =< s(855)
s(808) =< aux(110)
s(809) =< aux(110)
s(810) =< aux(110)
s(811) =< aux(110)
s(812) =< aux(110)
s(813) =< aux(110)
s(814) =< aux(110)
s(815) =< aux(110)
s(816) =< aux(110)
s(817) =< aux(110)
s(818) =< aux(110)
s(819) =< aux(110)
s(820) =< aux(110)
s(821) =< aux(110)
s(822) =< aux(110)
s(823) =< aux(110)
s(824) =< aux(110)
s(825) =< aux(110)
s(826) =< aux(110)
s(827) =< aux(110)
s(820) =< aux(111)
s(821) =< aux(111)
s(822) =< aux(111)
s(823) =< aux(111)
s(824) =< aux(111)
s(825) =< aux(111)
s(826) =< aux(111)
s(827) =< aux(111)
s(828) =< s(849)
s(808) =< s(849)
s(809) =< s(849)
s(810) =< s(849)
s(811) =< s(849)
s(814) =< s(849)
s(815) =< s(849)
s(816) =< s(849)
s(817) =< s(849)
s(818) =< s(849)
s(819) =< s(849)
s(820) =< s(849)
s(821) =< s(849)
s(822) =< s(849)
s(826) =< s(853)
s(827) =< s(853)
s(808) =< s(854)
s(814) =< s(854)
s(816) =< s(854)
s(825) =< s(862)
s(818) =< s(861)
s(819) =< s(861)
s(820) =< s(861)
s(821) =< s(861)
s(822) =< s(861)
s(817) =< s(860)
s(819) =< s(860)
s(820) =< s(860)
s(808) =< aux(118)
s(809) =< aux(118)
s(810) =< aux(118)
s(811) =< aux(118)
s(812) =< aux(118)
s(813) =< aux(118)
s(814) =< aux(118)
s(815) =< aux(118)
s(816) =< aux(118)
s(817) =< aux(118)
s(818) =< aux(118)
s(819) =< aux(118)
s(820) =< aux(118)
s(821) =< aux(118)
s(822) =< aux(118)
s(823) =< aux(118)
s(824) =< aux(118)
s(825) =< aux(118)
s(826) =< aux(118)
s(827) =< aux(118)
s(817) =< aux(119)
s(818) =< aux(119)
s(819) =< aux(119)
s(820) =< aux(119)
s(821) =< aux(119)
s(822) =< aux(119)
s(823) =< aux(119)
s(824) =< aux(119)
s(825) =< aux(119)
s(826) =< aux(119)
s(827) =< aux(119)
s(808) =< s(846)
s(809) =< s(846)
s(810) =< s(846)
s(812) =< s(846)
s(814) =< s(846)
s(815) =< s(846)
s(816) =< s(846)
s(817) =< s(846)
s(818) =< s(846)
s(819) =< s(846)
s(820) =< s(846)
s(822) =< s(846)
s(823) =< s(846)
s(827) =< s(850)
s(809) =< s(855)
s(817) =< s(855)
s(819) =< s(855)
s(824) =< s(858)
s(815) =< s(857)
s(816) =< s(857)
s(817) =< s(857)
s(818) =< s(857)
s(819) =< s(857)
s(820) =< s(857)
s(822) =< s(857)
s(823) =< s(857)
s(814) =< s(856)
s(816) =< s(856)
s(817) =< s(856)
s(818) =< s(856)
s(819) =< s(856)
s(822) =< s(856)
s(809) =< s(825)* (1/3)+s(826)* (1/3)+s(827)* (1/3)+s(855)
s(817) =< s(825)* (1/3)+s(826)* (1/3)+s(827)* (1/3)+s(855)
s(819) =< s(825)* (1/3)+s(826)* (1/3)+s(827)* (1/3)+s(855)
s(808) =< s(826)* (1/3)+s(827)* (1/3)+s(854)
s(814) =< s(826)* (1/3)+s(827)* (1/3)+s(854)
s(816) =< s(826)* (1/3)+s(827)* (1/3)+s(854)
s(841) =< s(849)
s(841) =< aux(110)
s(842) =< aux(110)
s(806) =< aux(110)
s(843) =< s(846)
s(843) =< aux(118)
s(844) =< aux(118)
s(807) =< aux(118)
s(845) =< s(846)

#### Cost of chains of subst(V1,V,V2,Out):
* Chain [101]: 4*s(250)+4*s(251)+2*s(252)+2*s(253)+2*s(254)+2*s(255)+2*s(256)+2*s(257)+4*s(258)+4*s(259)+2*s(260)+4*s(261)+4*s(262)+2*s(263)+6*s(264)+4*s(265)+6*s(266)+4*s(267)+2*s(268)+2*s(269)+4*s(270)+4*s(271)+11*s(272)+4*s(273)+4*s(274)+12*s(276)+12*s(278)+24*s(279)+12*s(280)+18*s(281)+24*s(282)+12*s(283)+18*s(284)+10*s(285)+10*s(286)+9*s(287)+7*s(288)+8*s(289)+4*s(290)+4*s(291)+4*s(307)+2*s(308)+2*s(309)+4*s(310)+4*s(311)+2*s(312)+4*s(313)+4*s(314)+2*s(315)+6*s(316)+4*s(317)+6*s(318)+4*s(319)+2*s(320)+2*s(321)+2*s(344)+2*s(345)+4*s(346)+4*s(347)+4*s(348)+4*s(349)+2*s(350)+4*s(351)+10*s(352)+2*s(353)+6*s(354)+4*s(355)+4*s(356)+2*s(357)+4*s(358)+1*s(485)+1*s(488)+3
  Such that:aux(85) =< V1
aux(86) =< V1+1
aux(87) =< V1/2
aux(88) =< V1/2+1/2
aux(89) =< V1/3
aux(90) =< V1/3+1/3
aux(91) =< V1/4+1/4
aux(92) =< V1/5+1/5
aux(93) =< V2
aux(94) =< V2+1
aux(95) =< V2/2
aux(96) =< V2/2+1/2
aux(97) =< V2/3
aux(98) =< V2/3+1/3
aux(99) =< V2/4+1/4
aux(100) =< V2/5+1/5
s(488) =< aux(88)
s(485) =< aux(90)
s(250) =< aux(89)
s(251) =< aux(97)
s(252) =< aux(85)
s(253) =< aux(85)
s(254) =< aux(85)
s(255) =< aux(85)
s(256) =< aux(85)
s(257) =< aux(85)
s(258) =< aux(85)
s(259) =< aux(85)
s(260) =< aux(85)
s(261) =< aux(85)
s(262) =< aux(85)
s(263) =< aux(85)
s(264) =< aux(85)
s(265) =< aux(85)
s(266) =< aux(85)
s(267) =< aux(85)
s(268) =< aux(85)
s(269) =< aux(85)
s(270) =< aux(85)
s(271) =< aux(85)
s(264) =< aux(86)
s(265) =< aux(86)
s(266) =< aux(86)
s(267) =< aux(86)
s(268) =< aux(86)
s(269) =< aux(86)
s(270) =< aux(86)
s(271) =< aux(86)
s(272) =< aux(87)
s(252) =< aux(87)
s(253) =< aux(87)
s(254) =< aux(87)
s(255) =< aux(87)
s(258) =< aux(87)
s(259) =< aux(87)
s(260) =< aux(87)
s(261) =< aux(87)
s(262) =< aux(87)
s(263) =< aux(87)
s(264) =< aux(87)
s(265) =< aux(87)
s(266) =< aux(87)
s(270) =< aux(88)
s(271) =< aux(88)
s(252) =< aux(89)
s(258) =< aux(89)
s(260) =< aux(89)
s(269) =< aux(90)
s(273) =< aux(90)
s(262) =< aux(91)
s(263) =< aux(91)
s(264) =< aux(91)
s(265) =< aux(91)
s(266) =< aux(91)
s(261) =< aux(92)
s(263) =< aux(92)
s(264) =< aux(92)
s(252) =< aux(93)
s(253) =< aux(93)
s(254) =< aux(93)
s(255) =< aux(93)
s(256) =< aux(93)
s(257) =< aux(93)
s(258) =< aux(93)
s(259) =< aux(93)
s(260) =< aux(93)
s(261) =< aux(93)
s(262) =< aux(93)
s(263) =< aux(93)
s(264) =< aux(93)
s(265) =< aux(93)
s(266) =< aux(93)
s(267) =< aux(93)
s(268) =< aux(93)
s(269) =< aux(93)
s(270) =< aux(93)
s(271) =< aux(93)
s(261) =< aux(94)
s(262) =< aux(94)
s(263) =< aux(94)
s(264) =< aux(94)
s(265) =< aux(94)
s(266) =< aux(94)
s(267) =< aux(94)
s(268) =< aux(94)
s(269) =< aux(94)
s(270) =< aux(94)
s(271) =< aux(94)
s(252) =< aux(95)
s(253) =< aux(95)
s(254) =< aux(95)
s(256) =< aux(95)
s(258) =< aux(95)
s(259) =< aux(95)
s(260) =< aux(95)
s(261) =< aux(95)
s(262) =< aux(95)
s(263) =< aux(95)
s(264) =< aux(95)
s(266) =< aux(95)
s(267) =< aux(95)
s(271) =< aux(96)
s(274) =< aux(96)
s(253) =< aux(97)
s(261) =< aux(97)
s(263) =< aux(97)
s(268) =< aux(98)
s(259) =< aux(99)
s(260) =< aux(99)
s(261) =< aux(99)
s(262) =< aux(99)
s(263) =< aux(99)
s(264) =< aux(99)
s(266) =< aux(99)
s(267) =< aux(99)
s(258) =< aux(100)
s(260) =< aux(100)
s(261) =< aux(100)
s(262) =< aux(100)
s(263) =< aux(100)
s(266) =< aux(100)
s(275) =< aux(94)* (1/2)
s(276) =< aux(86)* (1/3)
s(277) =< aux(86)* (1/2)
s(278) =< aux(94)* (1/3)
s(253) =< s(269)* (1/3)+s(270)* (1/3)+s(271)* (1/3)+aux(97)
s(261) =< s(269)* (1/3)+s(270)* (1/3)+s(271)* (1/3)+aux(97)
s(263) =< s(269)* (1/3)+s(270)* (1/3)+s(271)* (1/3)+aux(97)
s(252) =< s(270)* (1/3)+s(271)* (1/3)+aux(89)
s(258) =< s(270)* (1/3)+s(271)* (1/3)+aux(89)
s(260) =< s(270)* (1/3)+s(271)* (1/3)+aux(89)
s(279) =< s(275)
s(279) =< aux(94)
s(280) =< aux(94)
s(278) =< aux(94)
s(281) =< s(275)
s(282) =< s(277)
s(282) =< aux(86)
s(283) =< aux(86)
s(276) =< aux(86)
s(284) =< s(277)
s(285) =< aux(86)
s(286) =< aux(86)
s(273) =< aux(86)
s(274) =< aux(86)
s(285) =< aux(94)
s(286) =< aux(94)
s(273) =< aux(94)
s(274) =< aux(94)
s(285) =< s(275)
s(287) =< aux(87)
s(287) =< aux(85)
s(288) =< aux(85)
s(250) =< aux(85)
s(289) =< aux(95)
s(289) =< aux(93)
s(290) =< aux(93)
s(251) =< aux(93)
s(291) =< aux(95)
s(307) =< aux(85)
s(308) =< aux(85)
s(309) =< aux(85)
s(310) =< aux(85)
s(311) =< aux(85)
s(312) =< aux(85)
s(313) =< aux(85)
s(314) =< aux(85)
s(315) =< aux(85)
s(316) =< aux(85)
s(317) =< aux(85)
s(318) =< aux(85)
s(319) =< aux(85)
s(320) =< aux(85)
s(321) =< aux(85)
s(316) =< aux(86)
s(317) =< aux(86)
s(318) =< aux(86)
s(319) =< aux(86)
s(320) =< aux(86)
s(321) =< aux(86)
s(308) =< aux(87)
s(310) =< aux(87)
s(311) =< aux(87)
s(312) =< aux(87)
s(313) =< aux(87)
s(314) =< aux(87)
s(315) =< aux(87)
s(316) =< aux(87)
s(317) =< aux(87)
s(318) =< aux(87)
s(321) =< aux(90)
s(314) =< aux(91)
s(315) =< aux(91)
s(316) =< aux(91)
s(317) =< aux(91)
s(318) =< aux(91)
s(326) =< aux(91)
s(313) =< aux(92)
s(315) =< aux(92)
s(316) =< aux(92)
s(327) =< aux(92)
s(307) =< aux(93)
s(308) =< aux(93)
s(309) =< aux(93)
s(310) =< aux(93)
s(311) =< aux(93)
s(312) =< aux(93)
s(313) =< aux(93)
s(314) =< aux(93)
s(315) =< aux(93)
s(316) =< aux(93)
s(317) =< aux(93)
s(318) =< aux(93)
s(319) =< aux(93)
s(320) =< aux(93)
s(321) =< aux(93)
s(313) =< aux(94)
s(314) =< aux(94)
s(315) =< aux(94)
s(316) =< aux(94)
s(317) =< aux(94)
s(318) =< aux(94)
s(319) =< aux(94)
s(320) =< aux(94)
s(321) =< aux(94)
s(309) =< aux(95)
s(310) =< aux(95)
s(311) =< aux(95)
s(312) =< aux(95)
s(313) =< aux(95)
s(314) =< aux(95)
s(315) =< aux(95)
s(316) =< aux(95)
s(318) =< aux(95)
s(319) =< aux(95)
s(320) =< aux(98)
s(311) =< aux(99)
s(312) =< aux(99)
s(313) =< aux(99)
s(314) =< aux(99)
s(315) =< aux(99)
s(316) =< aux(99)
s(318) =< aux(99)
s(319) =< aux(99)
s(329) =< aux(99)
s(310) =< aux(100)
s(312) =< aux(100)
s(313) =< aux(100)
s(314) =< aux(100)
s(315) =< aux(100)
s(318) =< aux(100)
s(330) =< aux(100)
s(330) =< aux(94)* (1/5)
s(329) =< aux(94)* (1/4)
s(331) =< aux(94)* (1/3)
s(327) =< aux(86)* (1/5)
s(326) =< aux(86)* (1/4)
s(333) =< aux(86)* (1/3)
s(309) =< s(286)* (1/2)+aux(95)
s(310) =< s(286)* (1/2)+aux(95)
s(311) =< s(286)* (1/2)+aux(95)
s(312) =< s(286)* (1/2)+aux(95)
s(313) =< s(286)* (1/2)+aux(95)
s(314) =< s(286)* (1/2)+aux(95)
s(315) =< s(286)* (1/2)+aux(95)
s(316) =< s(286)* (1/2)+aux(95)
s(318) =< s(286)* (1/2)+aux(95)
s(319) =< s(286)* (1/2)+aux(95)
s(308) =< s(286)* (1/2)+aux(87)
s(310) =< s(286)* (1/2)+aux(87)
s(311) =< s(286)* (1/2)+aux(87)
s(312) =< s(286)* (1/2)+aux(87)
s(313) =< s(286)* (1/2)+aux(87)
s(314) =< s(286)* (1/2)+aux(87)
s(315) =< s(286)* (1/2)+aux(87)
s(316) =< s(286)* (1/2)+aux(87)
s(317) =< s(286)* (1/2)+aux(87)
s(318) =< s(286)* (1/2)+aux(87)
s(307) =< s(286)+aux(93)
s(308) =< s(286)+aux(93)
s(309) =< s(286)+aux(93)
s(310) =< s(286)+aux(93)
s(311) =< s(286)+aux(93)
s(312) =< s(286)+aux(93)
s(313) =< s(286)+aux(93)
s(314) =< s(286)+aux(93)
s(315) =< s(286)+aux(93)
s(316) =< s(286)+aux(93)
s(317) =< s(286)+aux(93)
s(318) =< s(286)+aux(93)
s(319) =< s(286)+aux(93)
s(320) =< s(286)+aux(93)
s(307) =< s(286)+aux(85)
s(308) =< s(286)+aux(85)
s(309) =< s(286)+aux(85)
s(310) =< s(286)+aux(85)
s(311) =< s(286)+aux(85)
s(312) =< s(286)+aux(85)
s(313) =< s(286)+aux(85)
s(314) =< s(286)+aux(85)
s(315) =< s(286)+aux(85)
s(316) =< s(286)+aux(85)
s(317) =< s(286)+aux(85)
s(318) =< s(286)+aux(85)
s(319) =< s(286)+aux(85)
s(320) =< s(286)+aux(85)
s(321) =< s(286)+aux(85)
s(344) =< aux(86)
s(345) =< aux(86)
s(346) =< aux(86)
s(347) =< aux(86)
s(348) =< aux(86)
s(349) =< aux(86)
s(350) =< aux(86)
s(351) =< aux(86)
s(352) =< aux(86)
s(353) =< aux(86)
s(354) =< aux(86)
s(355) =< aux(86)
s(356) =< aux(86)
s(357) =< aux(86)
s(358) =< aux(86)
s(344) =< s(277)
s(345) =< s(277)
s(346) =< s(277)
s(347) =< s(277)
s(348) =< s(277)
s(349) =< s(277)
s(350) =< s(277)
s(351) =< s(277)
s(352) =< s(277)
s(353) =< s(277)
s(354) =< s(277)
s(355) =< s(277)
s(344) =< s(333)
s(348) =< s(333)
s(350) =< s(333)
s(358) =< s(333)
s(352) =< s(326)
s(353) =< s(326)
s(354) =< s(326)
s(355) =< s(326)
s(351) =< s(327)
s(353) =< s(327)
s(354) =< s(327)
s(344) =< aux(94)
s(345) =< aux(94)
s(346) =< aux(94)
s(347) =< aux(94)
s(348) =< aux(94)
s(349) =< aux(94)
s(350) =< aux(94)
s(351) =< aux(94)
s(352) =< aux(94)
s(353) =< aux(94)
s(354) =< aux(94)
s(355) =< aux(94)
s(356) =< aux(94)
s(357) =< aux(94)
s(358) =< aux(94)
s(344) =< s(275)
s(345) =< s(275)
s(346) =< s(275)
s(348) =< s(275)
s(349) =< s(275)
s(350) =< s(275)
s(351) =< s(275)
s(352) =< s(275)
s(353) =< s(275)
s(354) =< s(275)
s(356) =< s(275)
s(345) =< s(331)
s(351) =< s(331)
s(353) =< s(331)
s(357) =< s(331)
s(349) =< s(329)
s(350) =< s(329)
s(351) =< s(329)
s(352) =< s(329)
s(353) =< s(329)
s(354) =< s(329)
s(356) =< s(329)
s(348) =< s(330)
s(350) =< s(330)
s(351) =< s(330)
s(352) =< s(330)
s(353) =< s(330)
s(345) =< s(358)* (1/3)+s(347)* (1/3)+s(346)* (1/3)+s(331)
s(351) =< s(358)* (1/3)+s(347)* (1/3)+s(346)* (1/3)+s(331)
s(353) =< s(358)* (1/3)+s(347)* (1/3)+s(346)* (1/3)+s(331)
s(344) =< s(347)* (1/3)+s(346)* (1/3)+s(333)
s(348) =< s(347)* (1/3)+s(346)* (1/3)+s(333)
s(350) =< s(347)* (1/3)+s(346)* (1/3)+s(333)
s(485) =< aux(85)
s(488) =< aux(85)

  with precondition: [Out=0,V1>=0,V>=0,V2>=0] 

* Chain [100]: 2
  with precondition: [V1=1,V2=1,V=Out,V>=0] 

* Chain [99]: 1*s(493)+1*s(496)+5*s(497)+3*s(498)+6*s(499)+2*s(516)+2*s(517)+1*s(518)+1*s(519)+1*s(520)+1*s(521)+1*s(522)+1*s(523)+2*s(524)+2*s(525)+1*s(526)+2*s(527)+2*s(528)+1*s(529)+3*s(530)+2*s(531)+3*s(532)+2*s(533)+1*s(534)+1*s(535)+1*s(536)+1*s(537)+1*s(539)+1*s(540)+2*s(542)+2*s(544)+4*s(545)+2*s(546)+3*s(547)+4*s(548)+2*s(549)+2*s(550)+1*s(551)+1*s(552)+4*s(555)+2*s(556)+2*s(557)+3
  Such that:s(500) =< V1+1
s(512) =< V1/3
s(503) =< V1/4+1/4
s(504) =< V1/5+1/5
s(513) =< V2
s(505) =< V2+1
s(514) =< V2/2
s(506) =< V2/2+1/2
s(515) =< V2/3
s(507) =< V2/3+1/3
s(508) =< V2/4+1/4
s(509) =< V2/5+1/5
aux(102) =< V1
aux(103) =< V1/2
aux(104) =< V1/2+1/2
aux(105) =< V1/3+1/3
s(496) =< aux(104)
s(493) =< aux(105)
s(516) =< s(512)
s(517) =< s(515)
s(518) =< aux(102)
s(519) =< aux(102)
s(520) =< aux(102)
s(521) =< aux(102)
s(522) =< aux(102)
s(523) =< aux(102)
s(524) =< aux(102)
s(525) =< aux(102)
s(526) =< aux(102)
s(527) =< aux(102)
s(528) =< aux(102)
s(529) =< aux(102)
s(530) =< aux(102)
s(531) =< aux(102)
s(532) =< aux(102)
s(533) =< aux(102)
s(534) =< aux(102)
s(535) =< aux(102)
s(536) =< aux(102)
s(537) =< aux(102)
s(530) =< s(500)
s(531) =< s(500)
s(532) =< s(500)
s(533) =< s(500)
s(534) =< s(500)
s(535) =< s(500)
s(536) =< s(500)
s(537) =< s(500)
s(499) =< aux(103)
s(518) =< aux(103)
s(519) =< aux(103)
s(520) =< aux(103)
s(521) =< aux(103)
s(524) =< aux(103)
s(525) =< aux(103)
s(526) =< aux(103)
s(527) =< aux(103)
s(528) =< aux(103)
s(529) =< aux(103)
s(530) =< aux(103)
s(531) =< aux(103)
s(532) =< aux(103)
s(536) =< aux(104)
s(537) =< aux(104)
s(518) =< s(512)
s(524) =< s(512)
s(526) =< s(512)
s(535) =< aux(105)
s(539) =< aux(105)
s(528) =< s(503)
s(529) =< s(503)
s(530) =< s(503)
s(531) =< s(503)
s(532) =< s(503)
s(527) =< s(504)
s(529) =< s(504)
s(530) =< s(504)
s(518) =< s(513)
s(519) =< s(513)
s(520) =< s(513)
s(521) =< s(513)
s(522) =< s(513)
s(523) =< s(513)
s(524) =< s(513)
s(525) =< s(513)
s(526) =< s(513)
s(527) =< s(513)
s(528) =< s(513)
s(529) =< s(513)
s(530) =< s(513)
s(531) =< s(513)
s(532) =< s(513)
s(533) =< s(513)
s(534) =< s(513)
s(535) =< s(513)
s(536) =< s(513)
s(537) =< s(513)
s(527) =< s(505)
s(528) =< s(505)
s(529) =< s(505)
s(530) =< s(505)
s(531) =< s(505)
s(532) =< s(505)
s(533) =< s(505)
s(534) =< s(505)
s(535) =< s(505)
s(536) =< s(505)
s(537) =< s(505)
s(518) =< s(514)
s(519) =< s(514)
s(520) =< s(514)
s(522) =< s(514)
s(524) =< s(514)
s(525) =< s(514)
s(526) =< s(514)
s(527) =< s(514)
s(528) =< s(514)
s(529) =< s(514)
s(530) =< s(514)
s(532) =< s(514)
s(533) =< s(514)
s(537) =< s(506)
s(540) =< s(506)
s(519) =< s(515)
s(527) =< s(515)
s(529) =< s(515)
s(534) =< s(507)
s(525) =< s(508)
s(526) =< s(508)
s(527) =< s(508)
s(528) =< s(508)
s(529) =< s(508)
s(530) =< s(508)
s(532) =< s(508)
s(533) =< s(508)
s(524) =< s(509)
s(526) =< s(509)
s(527) =< s(509)
s(528) =< s(509)
s(529) =< s(509)
s(532) =< s(509)
s(541) =< s(505)* (1/2)
s(542) =< s(500)* (1/3)
s(543) =< s(500)* (1/2)
s(544) =< s(505)* (1/3)
s(519) =< s(535)* (1/3)+s(536)* (1/3)+s(537)* (1/3)+s(515)
s(527) =< s(535)* (1/3)+s(536)* (1/3)+s(537)* (1/3)+s(515)
s(529) =< s(535)* (1/3)+s(536)* (1/3)+s(537)* (1/3)+s(515)
s(518) =< s(536)* (1/3)+s(537)* (1/3)+s(512)
s(524) =< s(536)* (1/3)+s(537)* (1/3)+s(512)
s(526) =< s(536)* (1/3)+s(537)* (1/3)+s(512)
s(545) =< s(541)
s(545) =< s(505)
s(546) =< s(505)
s(544) =< s(505)
s(547) =< s(541)
s(548) =< s(543)
s(548) =< s(500)
s(549) =< s(500)
s(542) =< s(500)
s(550) =< s(543)
s(551) =< s(500)
s(552) =< s(500)
s(539) =< s(500)
s(540) =< s(500)
s(551) =< s(505)
s(552) =< s(505)
s(539) =< s(505)
s(540) =< s(505)
s(551) =< s(541)
s(497) =< aux(103)
s(497) =< aux(102)
s(498) =< aux(102)
s(516) =< aux(102)
s(555) =< s(514)
s(555) =< s(513)
s(556) =< s(513)
s(517) =< s(513)
s(557) =< s(514)
s(493) =< aux(102)
s(496) =< aux(102)

  with precondition: [V2=Out,V1>=1,V>=0,V2>=1] 

* Chain [98]: 2
  with precondition: [V2=1,Out=0,V1>=2,V>=0] 

* Chain [97]: 2
  with precondition: [V2=1,Out=1,V1>=2,V>=0] 

* Chain [96]: 3
  with precondition: [V2=2,Out=0,V1>=3,V>=0] 

* Chain [95]: 3
  with precondition: [V2=2,Out=2,V1>=3,V>=0] 

* Chain [94]: 1*s(559)+1*s(562)+1*s(563)+1*s(564)+1*s(565)+2
  Such that:s(561) =< V1/2
s(562) =< V1/2+1/2
s(559) =< V1/3+1/3
aux(106) =< V1
s(563) =< aux(106)
s(564) =< aux(106)
s(559) =< aux(106)
s(562) =< aux(106)
s(565) =< s(561)
s(563) =< s(561)

  with precondition: [Out=0,V2=V1,V>=0,V2>=2] 

* Chain [93]: 1*s(567)+1*s(570)+1*s(571)+1*s(572)+1*s(573)+2
  Such that:s(569) =< V1/2
s(570) =< V1/2+1/2
s(567) =< V1/3+1/3
aux(107) =< V1
s(571) =< aux(107)
s(572) =< aux(107)
s(567) =< aux(107)
s(570) =< aux(107)
s(573) =< s(569)
s(571) =< s(569)

  with precondition: [V2=V1,V=Out,V>=0,V2>=2] 

* Chain [multiple([90,91,92],[[101],[100],[99],[98],[97],[96],[95],[94],[93]])]: 11*it(90)+2*it([93])+17*it([94])+3*it([101])+2*s(806)+2*s(807)+1*s(808)+1*s(809)+1*s(810)+1*s(811)+1*s(812)+1*s(813)+2*s(814)+2*s(815)+1*s(816)+2*s(817)+2*s(818)+1*s(819)+3*s(820)+2*s(821)+3*s(822)+2*s(823)+1*s(824)+1*s(825)+1*s(826)+1*s(827)+5*s(828)+2*s(829)+4*s(830)+4*s(831)+4*s(832)+8*s(833)+4*s(834)+6*s(835)+8*s(836)+4*s(837)+4*s(838)+2*s(840)+4*s(841)+2*s(842)+4*s(843)+2*s(844)+2*s(845)+2*s(864)+2*s(865)+1*s(866)+1*s(867)+1*s(868)+1*s(869)+1*s(870)+1*s(871)+2*s(872)+2*s(873)+1*s(874)+2*s(875)+2*s(876)+1*s(877)+3*s(878)+2*s(879)+3*s(880)+2*s(881)+1*s(882)+1*s(883)+1*s(884)+1*s(885)+5*s(886)+4*s(899)+2*s(900)+4*s(901)+2*s(902)+2*s(903)+4*s(922)+4*s(923)+2*s(924)+2*s(925)+2*s(926)+2*s(927)+2*s(928)+2*s(929)+4*s(930)+4*s(931)+2*s(932)+4*s(933)+4*s(934)+2*s(935)+6*s(936)+4*s(937)+6*s(938)+4*s(939)+2*s(940)+2*s(941)+4*s(942)+4*s(943)+17*s(944)+8*s(945)+14*s(946)+12*s(947)+14*s(948)+28*s(949)+14*s(950)+21*s(951)+24*s(952)+12*s(953)+18*s(954)+10*s(956)+9*s(957)+7*s(958)+8*s(959)+4*s(960)+6*s(961)+4*s(962)+2*s(963)+2*s(964)+4*s(965)+4*s(966)+2*s(967)+4*s(968)+4*s(969)+2*s(970)+6*s(971)+4*s(972)+6*s(973)+4*s(974)+2*s(975)+2*s(976)+2*s(977)+2*s(978)+4*s(979)+4*s(980)+4*s(981)+4*s(982)+2*s(983)+4*s(984)+10*s(985)+2*s(986)+6*s(987)+4*s(988)+4*s(989)+2*s(990)+1*s(992)+1*s(993)+1*s(1018)+1*s(1019)+5*s(1020)+3*s(1021)+2*s(1023)+2*s(1024)+1*s(1025)+1*s(1026)+1*s(1027)+1*s(1028)+1*s(1029)+1*s(1030)+2*s(1031)+2*s(1032)+1*s(1033)+2*s(1034)+2*s(1035)+1*s(1036)+3*s(1037)+2*s(1038)+3*s(1039)+2*s(1040)+1*s(1041)+1*s(1042)+1*s(1043)+1*s(1044)+1*s(1045)+2*s(1046)+2*s(1047)+4*s(1052)+2*s(1053)+2*s(1054)+1*s(1056)+4*s(1057)+1*s(1078)+1*s(1079)+1*s(1080)+1*s(1081)+1*s(1082)+1*s(1085)+1*s(1086)+1*s(1087)+1*s(1088)+1*s(1089)+0
  Such that:aux(178) =< V1/3
aux(190) =< 1
aux(191) =< V1
aux(192) =< V1+1
aux(193) =< V1/2+1/2
aux(194) =< V2
aux(195) =< V2+1
it(90) =< aux(194)
it([93]) =< aux(194)
it([94]) =< aux(194)
s(1005) =< aux(194)
s(1005) =< aux(195)
aux(179) =< aux(191)* (1/3)
aux(109) =< aux(191)+1
aux(124) =< aux(191)
aux(149) =< aux(191)* (1/2)+1/2
aux(145) =< aux(191)*2
aux(117) =< aux(194)+1
aux(132) =< aux(194)
s(1008) =< aux(195)* (1/5)
s(1009) =< aux(195)* (1/4)
s(996) =< aux(195)* (1/3)
s(1015) =< aux(194)* (1/3)
s(999) =< aux(195)* (1/2)
s(1007) =< aux(194)* (1/2)
it([93]) =< it(90)+aux(190)
it([94]) =< it(90)+aux(190)
it([101]) =< it(90)+aux(190)
aux(118) =< it(90)*aux(194)
aux(110) =< it(90)*aux(191)
aux(142) =< it(90)*aux(145)
aux(111) =< it(90)*aux(109)
aux(151) =< it([93])*aux(149)
s(1086) =< it([93])*aux(149)
aux(146) =< it([93])*aux(124)
aux(119) =< it(90)*aux(117)
aux(134) =< it(90)*aux(132)
aux(126) =< it(90)*aux(124)
s(855) =< aux(118)* (1/3)
s(846) =< aux(118)* (1/2)
s(854) =< aux(110)* (1/3)
s(849) =< aux(110)* (1/2)
aux(177) =< aux(142)* (1/3)
aux(164) =< aux(142)+aux(191)
it([94]) =< aux(142)+aux(191)
s(994) =< aux(142)+aux(191)
aux(146) =< aux(142)+aux(191)
aux(159) =< aux(111)*2
aux(156) =< aux(111)+aux(193)
s(1006) =< aux(111)+aux(193)
s(1086) =< aux(111)+aux(193)
s(1079) =< aux(111)+aux(193)
s(1084) =< aux(142)+aux(191)
aux(151) =< aux(111)+aux(193)
s(1083) =< aux(111)+aux(193)
s(856) =< aux(119)* (1/5)
s(857) =< aux(119)* (1/4)
s(858) =< aux(119)* (1/3)
s(913) =< aux(134)* (1/3)
s(850) =< aux(119)* (1/2)
s(904) =< aux(134)* (1/2)
s(860) =< aux(111)* (1/5)
s(861) =< aux(111)* (1/4)
s(862) =< aux(111)* (1/3)
s(912) =< aux(126)* (1/3)
s(853) =< aux(111)* (1/2)
s(907) =< aux(126)* (1/2)
aux(176) =< aux(159)+aux(192)
s(1066) =< aux(159)+aux(192)
s(1014) =< aux(177)+aux(178)
aux(163) =< aux(159)+aux(192)
it([101]) =< aux(159)+aux(192)
aux(163) =< it([94])*aux(109)
aux(164) =< it([94])*aux(124)
s(1066) =< it([94])*aux(109)
aux(156) =< it([94])*aux(149)
s(1079) =< it([94])*aux(149)
s(1084) =< it([94])*aux(124)
s(1085) =< aux(151)* (2/3)
s(1090) =< aux(146)* (1/2)
aux(176) =< it([101])*aux(109)
s(1014) =< it([101])*aux(179)
s(1074) =< aux(163)* (1/5)
s(1075) =< aux(163)* (1/4)
s(1076) =< aux(163)* (1/3)
s(1068) =< aux(164)* (1/3)
s(1077) =< aux(163)* (1/2)
s(1078) =< aux(156)* (2/3)
s(1011) =< aux(176)* (1/5)
s(1012) =< aux(176)* (1/4)
s(995) =< aux(176)* (1/3)
s(1003) =< aux(176)* (1/2)
s(1087) =< aux(146)
s(1088) =< aux(146)
s(1085) =< aux(146)
s(1086) =< aux(146)
s(1089) =< s(1090)
s(1087) =< s(1090)
s(1080) =< s(1084)
s(1081) =< s(1084)
s(1078) =< s(1084)
s(1079) =< s(1084)
s(1082) =< s(1083)
s(1080) =< s(1083)
s(1019) =< s(1077)
s(1018) =< s(1076)
s(1023) =< s(1068)
s(1024) =< s(1015)
s(1025) =< aux(164)
s(1026) =< aux(164)
s(1027) =< aux(164)
s(1028) =< aux(164)
s(1029) =< aux(164)
s(1030) =< aux(164)
s(1031) =< aux(164)
s(1032) =< aux(164)
s(1033) =< aux(164)
s(1034) =< aux(164)
s(1035) =< aux(164)
s(1036) =< aux(164)
s(1037) =< aux(164)
s(1038) =< aux(164)
s(1039) =< aux(164)
s(1040) =< aux(164)
s(1041) =< aux(164)
s(1042) =< aux(164)
s(1043) =< aux(164)
s(1044) =< aux(164)
s(1037) =< s(1066)
s(1038) =< s(1066)
s(1039) =< s(1066)
s(1040) =< s(1066)
s(1041) =< s(1066)
s(1042) =< s(1066)
s(1043) =< s(1066)
s(1044) =< s(1066)
s(944) =< s(1006)
s(1025) =< s(1006)
s(1026) =< s(1006)
s(1027) =< s(1006)
s(1028) =< s(1006)
s(1031) =< s(1006)
s(1032) =< s(1006)
s(1033) =< s(1006)
s(1034) =< s(1006)
s(1035) =< s(1006)
s(1036) =< s(1006)
s(1037) =< s(1006)
s(1038) =< s(1006)
s(1039) =< s(1006)
s(1043) =< s(1077)
s(1044) =< s(1077)
s(1025) =< s(1068)
s(1031) =< s(1068)
s(1033) =< s(1068)
s(1042) =< s(1076)
s(1045) =< s(1076)
s(1035) =< s(1075)
s(1036) =< s(1075)
s(1037) =< s(1075)
s(1038) =< s(1075)
s(1039) =< s(1075)
s(1034) =< s(1074)
s(1036) =< s(1074)
s(1037) =< s(1074)
s(1025) =< aux(194)
s(1026) =< aux(194)
s(1027) =< aux(194)
s(1028) =< aux(194)
s(1029) =< aux(194)
s(1030) =< aux(194)
s(1031) =< aux(194)
s(1032) =< aux(194)
s(1033) =< aux(194)
s(1034) =< aux(194)
s(1035) =< aux(194)
s(1036) =< aux(194)
s(1037) =< aux(194)
s(1038) =< aux(194)
s(1039) =< aux(194)
s(1040) =< aux(194)
s(1041) =< aux(194)
s(1042) =< aux(194)
s(1043) =< aux(194)
s(1044) =< aux(194)
s(1034) =< aux(195)
s(1035) =< aux(195)
s(1036) =< aux(195)
s(1037) =< aux(195)
s(1038) =< aux(195)
s(1039) =< aux(195)
s(1040) =< aux(195)
s(1041) =< aux(195)
s(1042) =< aux(195)
s(1043) =< aux(195)
s(1044) =< aux(195)
s(1025) =< s(1007)
s(1026) =< s(1007)
s(1027) =< s(1007)
s(1029) =< s(1007)
s(1031) =< s(1007)
s(1032) =< s(1007)
s(1033) =< s(1007)
s(1034) =< s(1007)
s(1035) =< s(1007)
s(1036) =< s(1007)
s(1037) =< s(1007)
s(1039) =< s(1007)
s(1040) =< s(1007)
s(1044) =< s(999)
s(1046) =< s(999)
s(1026) =< s(1015)
s(1034) =< s(1015)
s(1036) =< s(1015)
s(1041) =< s(996)
s(1032) =< s(1009)
s(1033) =< s(1009)
s(1034) =< s(1009)
s(1035) =< s(1009)
s(1036) =< s(1009)
s(1037) =< s(1009)
s(1039) =< s(1009)
s(1040) =< s(1009)
s(1031) =< s(1008)
s(1033) =< s(1008)
s(1034) =< s(1008)
s(1035) =< s(1008)
s(1036) =< s(1008)
s(1039) =< s(1008)
s(1047) =< s(1066)* (1/3)
s(1067) =< s(1066)* (1/2)
s(948) =< aux(195)* (1/3)
s(1026) =< s(1042)* (1/3)+s(1043)* (1/3)+s(1044)* (1/3)+s(1015)
s(1034) =< s(1042)* (1/3)+s(1043)* (1/3)+s(1044)* (1/3)+s(1015)
s(1036) =< s(1042)* (1/3)+s(1043)* (1/3)+s(1044)* (1/3)+s(1015)
s(1025) =< s(1043)* (1/3)+s(1044)* (1/3)+s(1068)
s(1031) =< s(1043)* (1/3)+s(1044)* (1/3)+s(1068)
s(1033) =< s(1043)* (1/3)+s(1044)* (1/3)+s(1068)
s(949) =< s(999)
s(949) =< aux(195)
s(950) =< aux(195)
s(948) =< aux(195)
s(951) =< s(999)
s(1052) =< s(1067)
s(1052) =< s(1066)
s(1053) =< s(1066)
s(1047) =< s(1066)
s(1054) =< s(1067)
s(1046) =< s(1066)
s(1056) =< s(1066)
s(1045) =< s(1066)
s(1046) =< aux(195)
s(1056) =< aux(195)
s(1045) =< aux(195)
s(1020) =< s(1006)
s(1020) =< aux(164)
s(1021) =< aux(164)
s(1023) =< aux(164)
s(1057) =< s(1007)
s(1057) =< aux(194)
s(1024) =< aux(194)
s(961) =< s(1007)
s(1018) =< aux(164)
s(1019) =< aux(164)
s(993) =< s(1003)
s(992) =< s(995)
s(922) =< s(1014)
s(923) =< s(1015)
s(924) =< s(994)
s(925) =< s(994)
s(926) =< s(994)
s(927) =< s(994)
s(928) =< s(994)
s(929) =< s(994)
s(930) =< s(994)
s(931) =< s(994)
s(932) =< s(994)
s(933) =< s(994)
s(934) =< s(994)
s(935) =< s(994)
s(936) =< s(994)
s(937) =< s(994)
s(938) =< s(994)
s(939) =< s(994)
s(940) =< s(994)
s(941) =< s(994)
s(942) =< s(994)
s(943) =< s(994)
s(936) =< aux(176)
s(937) =< aux(176)
s(938) =< aux(176)
s(939) =< aux(176)
s(940) =< aux(176)
s(941) =< aux(176)
s(942) =< aux(176)
s(943) =< aux(176)
s(924) =< s(1006)
s(925) =< s(1006)
s(926) =< s(1006)
s(927) =< s(1006)
s(930) =< s(1006)
s(931) =< s(1006)
s(932) =< s(1006)
s(933) =< s(1006)
s(934) =< s(1006)
s(935) =< s(1006)
s(936) =< s(1006)
s(937) =< s(1006)
s(938) =< s(1006)
s(942) =< s(1003)
s(943) =< s(1003)
s(924) =< s(1014)
s(930) =< s(1014)
s(932) =< s(1014)
s(941) =< s(995)
s(945) =< s(995)
s(934) =< s(1012)
s(935) =< s(1012)
s(936) =< s(1012)
s(937) =< s(1012)
s(938) =< s(1012)
s(933) =< s(1011)
s(935) =< s(1011)
s(936) =< s(1011)
s(924) =< s(1005)
s(925) =< s(1005)
s(926) =< s(1005)
s(927) =< s(1005)
s(928) =< s(1005)
s(929) =< s(1005)
s(930) =< s(1005)
s(931) =< s(1005)
s(932) =< s(1005)
s(933) =< s(1005)
s(934) =< s(1005)
s(935) =< s(1005)
s(936) =< s(1005)
s(937) =< s(1005)
s(938) =< s(1005)
s(939) =< s(1005)
s(940) =< s(1005)
s(941) =< s(1005)
s(942) =< s(1005)
s(943) =< s(1005)
s(933) =< aux(195)
s(934) =< aux(195)
s(935) =< aux(195)
s(936) =< aux(195)
s(937) =< aux(195)
s(938) =< aux(195)
s(939) =< aux(195)
s(940) =< aux(195)
s(941) =< aux(195)
s(942) =< aux(195)
s(943) =< aux(195)
s(924) =< s(1007)
s(925) =< s(1007)
s(926) =< s(1007)
s(928) =< s(1007)
s(930) =< s(1007)
s(931) =< s(1007)
s(932) =< s(1007)
s(933) =< s(1007)
s(934) =< s(1007)
s(935) =< s(1007)
s(936) =< s(1007)
s(938) =< s(1007)
s(939) =< s(1007)
s(943) =< s(999)
s(946) =< s(999)
s(925) =< s(1015)
s(933) =< s(1015)
s(935) =< s(1015)
s(940) =< s(996)
s(931) =< s(1009)
s(932) =< s(1009)
s(933) =< s(1009)
s(934) =< s(1009)
s(935) =< s(1009)
s(936) =< s(1009)
s(938) =< s(1009)
s(939) =< s(1009)
s(930) =< s(1008)
s(932) =< s(1008)
s(933) =< s(1008)
s(934) =< s(1008)
s(935) =< s(1008)
s(938) =< s(1008)
s(947) =< aux(176)* (1/3)
s(925) =< s(941)* (1/3)+s(942)* (1/3)+s(943)* (1/3)+s(1015)
s(933) =< s(941)* (1/3)+s(942)* (1/3)+s(943)* (1/3)+s(1015)
s(935) =< s(941)* (1/3)+s(942)* (1/3)+s(943)* (1/3)+s(1015)
s(924) =< s(942)* (1/3)+s(943)* (1/3)+s(1014)
s(930) =< s(942)* (1/3)+s(943)* (1/3)+s(1014)
s(932) =< s(942)* (1/3)+s(943)* (1/3)+s(1014)
s(952) =< s(1003)
s(952) =< aux(176)
s(953) =< aux(176)
s(947) =< aux(176)
s(954) =< s(1003)
s(946) =< aux(176)
s(956) =< aux(176)
s(945) =< aux(176)
s(946) =< aux(195)
s(956) =< aux(195)
s(945) =< aux(195)
s(957) =< s(1006)
s(957) =< s(994)
s(958) =< s(994)
s(922) =< s(994)
s(959) =< s(1007)
s(959) =< s(1005)
s(960) =< s(1005)
s(923) =< s(1005)
s(962) =< s(994)
s(963) =< s(994)
s(964) =< s(994)
s(965) =< s(994)
s(966) =< s(994)
s(967) =< s(994)
s(968) =< s(994)
s(969) =< s(994)
s(970) =< s(994)
s(971) =< s(994)
s(972) =< s(994)
s(973) =< s(994)
s(974) =< s(994)
s(975) =< s(994)
s(976) =< s(994)
s(971) =< aux(176)
s(972) =< aux(176)
s(973) =< aux(176)
s(974) =< aux(176)
s(975) =< aux(176)
s(976) =< aux(176)
s(963) =< s(1006)
s(965) =< s(1006)
s(966) =< s(1006)
s(967) =< s(1006)
s(968) =< s(1006)
s(969) =< s(1006)
s(970) =< s(1006)
s(971) =< s(1006)
s(972) =< s(1006)
s(973) =< s(1006)
s(976) =< s(995)
s(969) =< s(1012)
s(970) =< s(1012)
s(971) =< s(1012)
s(972) =< s(1012)
s(973) =< s(1012)
s(1002) =< s(1012)
s(968) =< s(1011)
s(970) =< s(1011)
s(971) =< s(1011)
s(1001) =< s(1011)
s(962) =< s(1005)
s(963) =< s(1005)
s(964) =< s(1005)
s(965) =< s(1005)
s(966) =< s(1005)
s(967) =< s(1005)
s(968) =< s(1005)
s(969) =< s(1005)
s(970) =< s(1005)
s(971) =< s(1005)
s(972) =< s(1005)
s(973) =< s(1005)
s(974) =< s(1005)
s(975) =< s(1005)
s(976) =< s(1005)
s(968) =< aux(195)
s(969) =< aux(195)
s(970) =< aux(195)
s(971) =< aux(195)
s(972) =< aux(195)
s(973) =< aux(195)
s(974) =< aux(195)
s(975) =< aux(195)
s(976) =< aux(195)
s(964) =< s(1007)
s(965) =< s(1007)
s(966) =< s(1007)
s(967) =< s(1007)
s(968) =< s(1007)
s(969) =< s(1007)
s(970) =< s(1007)
s(971) =< s(1007)
s(973) =< s(1007)
s(974) =< s(1007)
s(975) =< s(996)
s(966) =< s(1009)
s(967) =< s(1009)
s(968) =< s(1009)
s(969) =< s(1009)
s(970) =< s(1009)
s(971) =< s(1009)
s(973) =< s(1009)
s(974) =< s(1009)
s(998) =< s(1009)
s(965) =< s(1008)
s(967) =< s(1008)
s(968) =< s(1008)
s(969) =< s(1008)
s(970) =< s(1008)
s(973) =< s(1008)
s(997) =< s(1008)
s(997) =< aux(195)* (1/5)
s(998) =< aux(195)* (1/4)
s(1001) =< aux(176)* (1/5)
s(1002) =< aux(176)* (1/4)
s(964) =< s(956)* (1/2)+s(1007)
s(965) =< s(956)* (1/2)+s(1007)
s(966) =< s(956)* (1/2)+s(1007)
s(967) =< s(956)* (1/2)+s(1007)
s(968) =< s(956)* (1/2)+s(1007)
s(969) =< s(956)* (1/2)+s(1007)
s(970) =< s(956)* (1/2)+s(1007)
s(971) =< s(956)* (1/2)+s(1007)
s(973) =< s(956)* (1/2)+s(1007)
s(974) =< s(956)* (1/2)+s(1007)
s(963) =< s(956)* (1/2)+s(1006)
s(965) =< s(956)* (1/2)+s(1006)
s(966) =< s(956)* (1/2)+s(1006)
s(967) =< s(956)* (1/2)+s(1006)
s(968) =< s(956)* (1/2)+s(1006)
s(969) =< s(956)* (1/2)+s(1006)
s(970) =< s(956)* (1/2)+s(1006)
s(971) =< s(956)* (1/2)+s(1006)
s(972) =< s(956)* (1/2)+s(1006)
s(973) =< s(956)* (1/2)+s(1006)
s(962) =< s(956)+s(1005)
s(963) =< s(956)+s(1005)
s(964) =< s(956)+s(1005)
s(965) =< s(956)+s(1005)
s(966) =< s(956)+s(1005)
s(967) =< s(956)+s(1005)
s(968) =< s(956)+s(1005)
s(969) =< s(956)+s(1005)
s(970) =< s(956)+s(1005)
s(971) =< s(956)+s(1005)
s(972) =< s(956)+s(1005)
s(973) =< s(956)+s(1005)
s(974) =< s(956)+s(1005)
s(975) =< s(956)+s(1005)
s(962) =< s(956)+s(994)
s(963) =< s(956)+s(994)
s(964) =< s(956)+s(994)
s(965) =< s(956)+s(994)
s(966) =< s(956)+s(994)
s(967) =< s(956)+s(994)
s(968) =< s(956)+s(994)
s(969) =< s(956)+s(994)
s(970) =< s(956)+s(994)
s(971) =< s(956)+s(994)
s(972) =< s(956)+s(994)
s(973) =< s(956)+s(994)
s(974) =< s(956)+s(994)
s(975) =< s(956)+s(994)
s(976) =< s(956)+s(994)
s(977) =< aux(176)
s(978) =< aux(176)
s(979) =< aux(176)
s(980) =< aux(176)
s(981) =< aux(176)
s(982) =< aux(176)
s(983) =< aux(176)
s(984) =< aux(176)
s(985) =< aux(176)
s(986) =< aux(176)
s(987) =< aux(176)
s(988) =< aux(176)
s(989) =< aux(176)
s(990) =< aux(176)
s(977) =< s(1003)
s(978) =< s(1003)
s(979) =< s(1003)
s(980) =< s(1003)
s(981) =< s(1003)
s(982) =< s(1003)
s(983) =< s(1003)
s(984) =< s(1003)
s(985) =< s(1003)
s(986) =< s(1003)
s(987) =< s(1003)
s(988) =< s(1003)
s(977) =< s(995)
s(981) =< s(995)
s(983) =< s(995)
s(985) =< s(1002)
s(986) =< s(1002)
s(987) =< s(1002)
s(988) =< s(1002)
s(984) =< s(1001)
s(986) =< s(1001)
s(987) =< s(1001)
s(977) =< aux(195)
s(978) =< aux(195)
s(979) =< aux(195)
s(980) =< aux(195)
s(981) =< aux(195)
s(982) =< aux(195)
s(983) =< aux(195)
s(984) =< aux(195)
s(985) =< aux(195)
s(986) =< aux(195)
s(987) =< aux(195)
s(988) =< aux(195)
s(989) =< aux(195)
s(990) =< aux(195)
s(977) =< s(999)
s(978) =< s(999)
s(979) =< s(999)
s(981) =< s(999)
s(982) =< s(999)
s(983) =< s(999)
s(984) =< s(999)
s(985) =< s(999)
s(986) =< s(999)
s(987) =< s(999)
s(989) =< s(999)
s(978) =< s(996)
s(984) =< s(996)
s(986) =< s(996)
s(990) =< s(996)
s(982) =< s(998)
s(983) =< s(998)
s(984) =< s(998)
s(985) =< s(998)
s(986) =< s(998)
s(987) =< s(998)
s(989) =< s(998)
s(981) =< s(997)
s(983) =< s(997)
s(984) =< s(997)
s(985) =< s(997)
s(986) =< s(997)
s(978) =< s(945)* (1/3)+s(980)* (1/3)+s(979)* (1/3)+s(996)
s(984) =< s(945)* (1/3)+s(980)* (1/3)+s(979)* (1/3)+s(996)
s(986) =< s(945)* (1/3)+s(980)* (1/3)+s(979)* (1/3)+s(996)
s(977) =< s(980)* (1/3)+s(979)* (1/3)+s(995)
s(981) =< s(980)* (1/3)+s(979)* (1/3)+s(995)
s(983) =< s(980)* (1/3)+s(979)* (1/3)+s(995)
s(992) =< s(994)
s(993) =< s(994)
s(864) =< s(912)
s(865) =< s(913)
s(866) =< aux(126)
s(867) =< aux(126)
s(868) =< aux(126)
s(869) =< aux(126)
s(870) =< aux(126)
s(871) =< aux(126)
s(872) =< aux(126)
s(873) =< aux(126)
s(874) =< aux(126)
s(875) =< aux(126)
s(876) =< aux(126)
s(877) =< aux(126)
s(878) =< aux(126)
s(879) =< aux(126)
s(880) =< aux(126)
s(881) =< aux(126)
s(882) =< aux(126)
s(883) =< aux(126)
s(884) =< aux(126)
s(885) =< aux(126)
s(878) =< aux(111)
s(879) =< aux(111)
s(880) =< aux(111)
s(881) =< aux(111)
s(882) =< aux(111)
s(883) =< aux(111)
s(884) =< aux(111)
s(885) =< aux(111)
s(886) =< s(907)
s(866) =< s(907)
s(867) =< s(907)
s(868) =< s(907)
s(869) =< s(907)
s(872) =< s(907)
s(873) =< s(907)
s(874) =< s(907)
s(875) =< s(907)
s(876) =< s(907)
s(877) =< s(907)
s(878) =< s(907)
s(879) =< s(907)
s(880) =< s(907)
s(884) =< s(853)
s(885) =< s(853)
s(866) =< s(912)
s(872) =< s(912)
s(874) =< s(912)
s(883) =< s(862)
s(829) =< s(862)
s(876) =< s(861)
s(877) =< s(861)
s(878) =< s(861)
s(879) =< s(861)
s(880) =< s(861)
s(875) =< s(860)
s(877) =< s(860)
s(878) =< s(860)
s(866) =< aux(134)
s(867) =< aux(134)
s(868) =< aux(134)
s(869) =< aux(134)
s(870) =< aux(134)
s(871) =< aux(134)
s(872) =< aux(134)
s(873) =< aux(134)
s(874) =< aux(134)
s(875) =< aux(134)
s(876) =< aux(134)
s(877) =< aux(134)
s(878) =< aux(134)
s(879) =< aux(134)
s(880) =< aux(134)
s(881) =< aux(134)
s(882) =< aux(134)
s(883) =< aux(134)
s(884) =< aux(134)
s(885) =< aux(134)
s(875) =< aux(119)
s(876) =< aux(119)
s(877) =< aux(119)
s(878) =< aux(119)
s(879) =< aux(119)
s(880) =< aux(119)
s(881) =< aux(119)
s(882) =< aux(119)
s(883) =< aux(119)
s(884) =< aux(119)
s(885) =< aux(119)
s(866) =< s(904)
s(867) =< s(904)
s(868) =< s(904)
s(870) =< s(904)
s(872) =< s(904)
s(873) =< s(904)
s(874) =< s(904)
s(875) =< s(904)
s(876) =< s(904)
s(877) =< s(904)
s(878) =< s(904)
s(880) =< s(904)
s(881) =< s(904)
s(885) =< s(850)
s(830) =< s(850)
s(867) =< s(913)
s(875) =< s(913)
s(877) =< s(913)
s(882) =< s(858)
s(873) =< s(857)
s(874) =< s(857)
s(875) =< s(857)
s(876) =< s(857)
s(877) =< s(857)
s(878) =< s(857)
s(880) =< s(857)
s(881) =< s(857)
s(872) =< s(856)
s(874) =< s(856)
s(875) =< s(856)
s(876) =< s(856)
s(877) =< s(856)
s(880) =< s(856)
s(831) =< aux(111)* (1/3)
s(832) =< aux(119)* (1/3)
s(867) =< s(883)* (1/3)+s(884)* (1/3)+s(885)* (1/3)+s(913)
s(875) =< s(883)* (1/3)+s(884)* (1/3)+s(885)* (1/3)+s(913)
s(877) =< s(883)* (1/3)+s(884)* (1/3)+s(885)* (1/3)+s(913)
s(866) =< s(884)* (1/3)+s(885)* (1/3)+s(912)
s(872) =< s(884)* (1/3)+s(885)* (1/3)+s(912)
s(874) =< s(884)* (1/3)+s(885)* (1/3)+s(912)
s(833) =< s(850)
s(833) =< aux(119)
s(834) =< aux(119)
s(832) =< aux(119)
s(835) =< s(850)
s(836) =< s(853)
s(836) =< aux(111)
s(837) =< aux(111)
s(831) =< aux(111)
s(838) =< s(853)
s(830) =< aux(111)
s(840) =< aux(111)
s(829) =< aux(111)
s(830) =< aux(119)
s(840) =< aux(119)
s(829) =< aux(119)
s(899) =< s(907)
s(899) =< aux(126)
s(900) =< aux(126)
s(864) =< aux(126)
s(901) =< s(904)
s(901) =< aux(134)
s(902) =< aux(134)
s(865) =< aux(134)
s(903) =< s(904)
s(806) =< s(854)
s(807) =< s(855)
s(808) =< aux(110)
s(809) =< aux(110)
s(810) =< aux(110)
s(811) =< aux(110)
s(812) =< aux(110)
s(813) =< aux(110)
s(814) =< aux(110)
s(815) =< aux(110)
s(816) =< aux(110)
s(817) =< aux(110)
s(818) =< aux(110)
s(819) =< aux(110)
s(820) =< aux(110)
s(821) =< aux(110)
s(822) =< aux(110)
s(823) =< aux(110)
s(824) =< aux(110)
s(825) =< aux(110)
s(826) =< aux(110)
s(827) =< aux(110)
s(820) =< aux(111)
s(821) =< aux(111)
s(822) =< aux(111)
s(823) =< aux(111)
s(824) =< aux(111)
s(825) =< aux(111)
s(826) =< aux(111)
s(827) =< aux(111)
s(828) =< s(849)
s(808) =< s(849)
s(809) =< s(849)
s(810) =< s(849)
s(811) =< s(849)
s(814) =< s(849)
s(815) =< s(849)
s(816) =< s(849)
s(817) =< s(849)
s(818) =< s(849)
s(819) =< s(849)
s(820) =< s(849)
s(821) =< s(849)
s(822) =< s(849)
s(826) =< s(853)
s(827) =< s(853)
s(808) =< s(854)
s(814) =< s(854)
s(816) =< s(854)
s(825) =< s(862)
s(818) =< s(861)
s(819) =< s(861)
s(820) =< s(861)
s(821) =< s(861)
s(822) =< s(861)
s(817) =< s(860)
s(819) =< s(860)
s(820) =< s(860)
s(808) =< aux(118)
s(809) =< aux(118)
s(810) =< aux(118)
s(811) =< aux(118)
s(812) =< aux(118)
s(813) =< aux(118)
s(814) =< aux(118)
s(815) =< aux(118)
s(816) =< aux(118)
s(817) =< aux(118)
s(818) =< aux(118)
s(819) =< aux(118)
s(820) =< aux(118)
s(821) =< aux(118)
s(822) =< aux(118)
s(823) =< aux(118)
s(824) =< aux(118)
s(825) =< aux(118)
s(826) =< aux(118)
s(827) =< aux(118)
s(817) =< aux(119)
s(818) =< aux(119)
s(819) =< aux(119)
s(820) =< aux(119)
s(821) =< aux(119)
s(822) =< aux(119)
s(823) =< aux(119)
s(824) =< aux(119)
s(825) =< aux(119)
s(826) =< aux(119)
s(827) =< aux(119)
s(808) =< s(846)
s(809) =< s(846)
s(810) =< s(846)
s(812) =< s(846)
s(814) =< s(846)
s(815) =< s(846)
s(816) =< s(846)
s(817) =< s(846)
s(818) =< s(846)
s(819) =< s(846)
s(820) =< s(846)
s(822) =< s(846)
s(823) =< s(846)
s(827) =< s(850)
s(809) =< s(855)
s(817) =< s(855)
s(819) =< s(855)
s(824) =< s(858)
s(815) =< s(857)
s(816) =< s(857)
s(817) =< s(857)
s(818) =< s(857)
s(819) =< s(857)
s(820) =< s(857)
s(822) =< s(857)
s(823) =< s(857)
s(814) =< s(856)
s(816) =< s(856)
s(817) =< s(856)
s(818) =< s(856)
s(819) =< s(856)
s(822) =< s(856)
s(809) =< s(825)* (1/3)+s(826)* (1/3)+s(827)* (1/3)+s(855)
s(817) =< s(825)* (1/3)+s(826)* (1/3)+s(827)* (1/3)+s(855)
s(819) =< s(825)* (1/3)+s(826)* (1/3)+s(827)* (1/3)+s(855)
s(808) =< s(826)* (1/3)+s(827)* (1/3)+s(854)
s(814) =< s(826)* (1/3)+s(827)* (1/3)+s(854)
s(816) =< s(826)* (1/3)+s(827)* (1/3)+s(854)
s(841) =< s(849)
s(841) =< aux(110)
s(842) =< aux(110)
s(806) =< aux(110)
s(843) =< s(846)
s(843) =< aux(118)
s(844) =< aux(118)
s(807) =< aux(118)
s(845) =< s(846)

  with precondition: [V1>=0,V>=0,V2>=1,Out>=0,Out+V1>=1] 


#### Cost of loops [102,103,104,105,106,107] 

 * loop 102:red(V1,Out) -> [red(V1',Out'),red(V1'2,Out'2)] 
1
 * loop 103:red(V1,Out) -> [red(V1',Out'),red(V1'2,Out'2)] 
1
 * loop 104:red(V1,Out) -> [red(V1',Out'),red(V1'2,Out'2),red(V1'3,Out'3)] 
3*s(1513)+1*s(1514)+1*s(1515)+3
 * loop 105:red(V1,Out) -> [red(V1',Out'),red(V1'2,Out'2),red(V1'3,Out'3)] 
695*s(1855)+2*s(1835)+7*s(1836)+1*s(1837)+4*s(1838)+2*s(1839)+2*s(1840)+1*s(1841)+3*s(1842)+5*s(1843)+5*s(1844)+4*s(1845)+1*s(1846)+1*s(1847)+4*s(1852)+1*s(1848)+2*s(1850)+5*s(1851)+3*s(1853)+2*s(1854)+4
  Such that:s(1827) =< V1'3
s(1828) =< V1'3+1
s(1829) =< V1'3/2
s(1830) =< V1'3/2+1/2
s(1831) =< V1'3/3
s(1832) =< V1'3/3+1/3
s(1833) =< V1'3/4+1/4
s(1834) =< V1'3/5+1/5
s(1835) =< s(1831)
s(1836) =< s(1827)
s(1837) =< s(1827)
s(1838) =< s(1827)
s(1839) =< s(1827)
s(1840) =< s(1827)
s(1841) =< s(1827)
s(1842) =< s(1827)
s(1843) =< s(1827)
s(1844) =< s(1827)
s(1845) =< s(1827)
s(1846) =< s(1827)
s(1847) =< s(1827)
s(1842) =< s(1828)
s(1843) =< s(1828)
s(1844) =< s(1828)
s(1845) =< s(1828)
s(1846) =< s(1828)
s(1847) =< s(1828)
s(1836) =< s(1829)
s(1837) =< s(1829)
s(1839) =< s(1829)
s(1840) =< s(1829)
s(1841) =< s(1829)
s(1842) =< s(1829)
s(1843) =< s(1829)
s(1844) =< s(1829)
s(1847) =< s(1830)
s(1848) =< s(1830)
s(1837) =< s(1831)
s(1842) =< s(1831)
s(1846) =< s(1832)
s(1840) =< s(1833)
s(1841) =< s(1833)
s(1842) =< s(1833)
s(1843) =< s(1833)
s(1844) =< s(1833)
s(1839) =< s(1834)
s(1841) =< s(1834)
s(1842) =< s(1834)
s(1843) =< s(1834)
s(1849) =< s(1828)* (1/2)
s(1850) =< s(1828)* (1/3)
s(1837) =< s(1845)* (1/3)+s(1845)* (1/3)+s(1847)* (1/3)+s(1831)
s(1842) =< s(1845)* (1/3)+s(1845)* (1/3)+s(1847)* (1/3)+s(1831)
s(1851) =< s(1849)
s(1851) =< s(1828)
s(1852) =< s(1828)
s(1850) =< s(1828)
s(1853) =< s(1849)
s(1848) =< s(1828)
s(1835) =< s(1827)
s(1854) =< s(1829)

 * loop 106:red(V1,Out) -> [red(V1',Out'),red(V1'2,Out'2),red(V1'3,Out'3)] 
1*s(1959)+0
 * loop 107:red(V1,Out) -> [red(V1',Out')] 
1
#### Cost of phase [102,103,104,105,106,107]:red(V1,Out) -> [] 
711*it(102)+1*it([108])+2*s(1964)+7*s(1965)+1*s(1966)+4*s(1967)+2*s(1968)+2*s(1969)+1*s(1970)+3*s(1971)+5*s(1972)+5*s(1973)+4*s(1974)+1*s(1975)+1*s(1976)+4*s(1977)+6*s(1978)+2*s(1979)+3*s(1981)+2*s(1982)+0
#### Cost of chains of red(V1,Out):
* Chain [multiple([102,103,104,105,106,107],[[],[109],[108]])]...: 711*it(102)+1*it([108])+2*s(1964)+7*s(1965)+1*s(1966)+4*s(1967)+2*s(1968)+2*s(1969)+1*s(1970)+3*s(1971)+5*s(1972)+5*s(1973)+4*s(1974)+1*s(1975)+1*s(1976)+4*s(1977)+6*s(1978)+2*s(1979)+3*s(1981)+2*s(1982)+0
  with precondition: [V1>=1] 

* Chain [109]: 0
  with precondition: [Out=0,V1>=0] 

* Chain [108]: 1
  with precondition: [V1=Out,V1>=1] 


#### Cost of chains of islam(V1,Out):
* Chain [112]: 0
  with precondition: [Out=0,V1>=0] 

* Chain [111]: 1
  with precondition: [Out=1,V1>=1] 

* Chain [110]: 1
  with precondition: [Out=2,V1>=1] 


#### Cost of chains of isvar(V1,Out):
* Chain [115]: 0
  with precondition: [Out=0,V1>=0] 

* Chain [114]: 1
  with precondition: [Out=1,V1>=1] 

* Chain [113]: 1
  with precondition: [Out=2,V1>=1] 


#### Cost of chains of lambody(V1,Out):
* Chain [117]: 0
  with precondition: [Out=0,V1>=0] 

* Chain [116]: 1
  with precondition: [Out>=0,V1>=Out+1] 


#### Cost of chains of lamvar(V1,Out):
* Chain [119]: 0
  with precondition: [Out=0,V1>=0] 

* Chain [118]: 1
  with precondition: [Out>=1,V1>=Out] 


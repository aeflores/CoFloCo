
Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. recursive  : [duplicate/2]
1. non_recursive  : [goal/2]
2. non_recursive  : [start/1]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into duplicate/2
1. SCC is completely evaluated into other SCCs
2. SCC is partially evaluated into start/1

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations duplicate/2 
* CE 5 is refined into CE [6] 
* CE 4 is refined into CE [7] 


#### Refined cost equations duplicate/2 
* CE 6: duplicate(V,Out) = 1
     [Out=0,V=0] 
* CE 7: duplicate(V,Out) = 1+ duplicate(W,X)
     [X+2*V>=Out,Out>=X+2,X+2*V=2*W+Out] 

### Cost equations --> "Loop" of duplicate/2 
* CEs [7] --> Loop 4 
* CEs [6] --> Loop 5 

#### Loops of duplicate/2 
* Loop 4: duplicate(V,Out)->  duplicate(V',Out')
                  [Out'+2*V>=Out,Out>=Out'+2,Out'+2*V=2*V'+Out] 
* Loop 5: duplicate(V,Out) [Out=0,V=0] 

### Ranking functions of CR duplicate(V,Out) 
* RF of phase [4]: [V]

#### Partial ranking functions of CR duplicate(V,Out) 
* Partial RF of phase [4]:
  - RF of loop [4:1]:
    V


### Resulting Chains:duplicate(V,Out) 
* [[4],5]
* [5]


### Merging Chains  duplicate/2 into  External patterns of execution 
* [[5]] --> 1 
* [[5,[4]]] --> 2 


### Specialization of cost equations start/1 
* CE 2 is refined into CE [8,9] 
* CE 3 is refined into CE [10,11] 


#### Refined cost equations start/1 
* CE 8: start(V) = 0+ duplicate(W,X):1
     [X=0,W=0,V=0] 
* CE 9: start(V) = 0+ duplicate(W,X):2
     [X>=2,X=2*W,X=2*V] 
* CE 10: start(V) = 1+ duplicate(W,X):1
     [X=0,W=0,V=0] 
* CE 11: start(V) = 1+ duplicate(W,X):2
     [X>=2,X=2*W,X=2*V] 

### Cost equations --> "Loop" of start/1 
* CEs [9,11] --> Loop 6 
* CEs [8,10] --> Loop 7 

#### Loops of start/1 
* Loop 6: start(V) [V>=1] 
* Loop 7: start(V) [V=0] 

### Ranking functions of CR start(V) 

#### Partial ranking functions of CR start(V) 


### Resulting Chains:start(V) 
* [7]
* [6]


### Merging Chains  start/1 into  External patterns of execution 
* [[7]] --> 1 
* [[6]] --> 2 


Computing Bounds
=====================================

#### Cost of loops [4] 

 * loop 4:duplicate(V,Out) -> [duplicate(V',Out')] 
1
#### Cost of phase [4]:duplicate(V,Out) -> [duplicate(V',Out')] 
1*it(4)+0
  Such that:it(4) =< V
it(4) =< V-V'

#### Cost of chains of duplicate(V,Out):
* Chain [[4],5]: 1*it(4)+1
  Such that:it(4) =< Out/2

  with precondition: [2*V=Out,V>=1] 

* Chain [5]: 1
  with precondition: [V=0,Out=0] 


#### Cost of chains of start(V):
* Chain [7]: 2
  with precondition: [V=0] 

* Chain [6]: 2*s(1)+2
  Such that:aux(1) =< V
s(1) =< aux(1)

  with precondition: [V>=1] 


Closed-form bounds of start(V): 
-------------------------------------
* Chain [7] with precondition: [V=0] 
    - Upper bound: 2 
    - Complexity: constant 
* Chain [6] with precondition: [V>=1] 
    - Upper bound: 2*V+2 
    - Complexity: n 

### Maximum cost of start(V): 2*V+2 
Asymptotic class: n 

Time statistics: 
-------------------------------------
* Partial evaluation computed in 3 ms.
* Invariants computed in 4 ms.
   - Backward Invariants 1 ms.
   - Transitive Invariants 1 ms.
* Refinement performed in 8 ms.
* Termination proved in 1 ms.
* Upper bounds computed in 8 ms.
   - Equation cost structures 2 ms.
   - Phase cost structures 2 ms.
   - Chain cost structures 2 ms.
   - Solving cost expressions 1 ms.
* Total analysis performed in 40 ms.


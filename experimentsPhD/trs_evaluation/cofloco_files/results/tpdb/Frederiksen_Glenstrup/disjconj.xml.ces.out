
Preprocessing Cost Relations
=====================================
2. SCC does not have a single cut point : [conj/2,disj/2]  
 Merged into conjdisj/2

#### Computed strongly connected components 
0. non_recursive  : [and/3]
1. non_recursive  : [bool/2]
3. non_recursive  : [disjconj/2]
4. non_recursive  : [getFirst/2]
5. non_recursive  : [getSecond/2]
6. non_recursive  : [isAnd/2]
7. non_recursive  : [isConsTerm/3]
8. non_recursive  : [isOp/2]
9. non_recursive  : [start/2]
2. recursive [non_tail,multiple] : [conjdisj/2]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into and/3
1. SCC is partially evaluated into bool/2
3. SCC is completely evaluated into other SCCs
4. SCC is partially evaluated into getFirst/2
5. SCC is partially evaluated into getSecond/2
6. SCC is partially evaluated into isAnd/2
7. SCC is partially evaluated into isConsTerm/3
8. SCC is partially evaluated into isOp/2
9. SCC is partially evaluated into start/2
2. SCC is partially evaluated into conjdisj/2

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations and/3 
* CE 44 is refined into CE [45] 
* CE 43 is refined into CE [46] 
* CE 41 is refined into CE [47] 
* CE 42 is refined into CE [48] 
* CE 40 is refined into CE [49] 


#### Refined cost equations and/3 
* CE 45: and(V,V13,Out) = 0
     [V13>=0,V>=0,Out=0] 
* CE 46: and(V,V13,Out) = 0
     [Out=2,V13=2,V=2] 
* CE 47: and(V,V13,Out) = 0
     [Out=1,V13=1,V=2] 
* CE 48: and(V,V13,Out) = 0
     [Out=1,V13=2,V=1] 
* CE 49: and(V,V13,Out) = 0
     [Out=1,V13=1,V=1] 

### Cost equations --> "Loop" of and/3 
* CEs [45] --> Loop 35 
* CEs [46] --> Loop 36 
* CEs [47] --> Loop 37 
* CEs [48] --> Loop 38 
* CEs [49] --> Loop 39 

#### Loops of and/3 
* Loop 35: and(V,V13,Out) [V13>=0,V>=0,Out=0] 
* Loop 36: and(V,V13,Out) [Out=2,V13=2,V=2] 
* Loop 37: and(V,V13,Out) [Out=1,V13=1,V=2] 
* Loop 38: and(V,V13,Out) [Out=1,V13=2,V=1] 
* Loop 39: and(V,V13,Out) [Out=1,V13=1,V=1] 

### Ranking functions of CR and(V,V13,Out) 

#### Partial ranking functions of CR and(V,V13,Out) 


### Resulting Chains:and(V,V13,Out) 
* [39]
* [38]
* [37]
* [36]
* [35]


### Merging Chains  and/3 into  External patterns of execution 
* [[39]] --> 1 
* [[38]] --> 2 
* [[37]] --> 3 
* [[36]] --> 4 
* [[35]] --> 5 


### Specialization of cost equations bool/2 
* CE 19 is refined into CE [50] 
* CE 20 is refined into CE [51] 
* CE 17 is refined into CE [52] 
* CE 18 is refined into CE [53] 


#### Refined cost equations bool/2 
* CE 50: bool(V,Out) = 1
     [V>=1,Out=1] 
* CE 51: bool(V,Out) = 0
     [V>=0,Out=0] 
* CE 52: bool(V,Out) = 1
     [Out=2,V=1] 
* CE 53: bool(V,Out) = 1
     [Out=2,V=0] 

### Cost equations --> "Loop" of bool/2 
* CEs [50] --> Loop 40 
* CEs [51] --> Loop 41 
* CEs [52] --> Loop 42 
* CEs [53] --> Loop 43 

#### Loops of bool/2 
* Loop 40: bool(V,Out) [V>=1,Out=1] 
* Loop 41: bool(V,Out) [V>=0,Out=0] 
* Loop 42: bool(V,Out) [Out=2,V=1] 
* Loop 43: bool(V,Out) [Out=2,V=0] 

### Ranking functions of CR bool(V,Out) 

#### Partial ranking functions of CR bool(V,Out) 


### Resulting Chains:bool(V,Out) 
* [43]
* [42]
* [41]
* [40]


### Merging Chains  bool/2 into  External patterns of execution 
* [[43]] --> 1 
* [[42]] --> 2 
* [[41]] --> 3 
* [[40]] --> 4 


### Specialization of cost equations conjdisj/2 
* CE 16 is refined into CE [54] 
* CE 11 is refined into CE [55] 
* CE 15 is refined into CE [56] 
* CE 12 is refined into CE [57] 
* CE 13 is refined into CE [58] 
* CE 14 is refined into CE [59,60,61,62,63] 


#### Refined cost equations conjdisj/2 
* CE 54: conjdisj(A,B) = 1+ conjdisj(A,B)
     [A>=1] 
* CE 55: conjdisj(A,B) = 1
     [A>=1,B=1] 
* CE 56: conjdisj(A,B) = 0
     [A>=0,B=0] 
* CE 57: conjdisj(A,B) = 1
     [B=2,A=1] 
* CE 58: conjdisj(A,B) = 1
     [B=2,A=0] 
* CE 59: conjdisj(A,B) = 1+ conjdisj(C,D)+ conjdisj(C,E)+ and(F,G,H):1
     [A>=C+1,C>=0,E=1,D=1,H=1,G=1,F=1,B=1] 
* CE 60: conjdisj(A,B) = 1+ conjdisj(C,D)+ conjdisj(C,E)+ and(F,G,H):2
     [A>=C+1,C>=0,E=2,D=1,H=1,G=2,F=1,B=1] 
* CE 61: conjdisj(A,B) = 1+ conjdisj(C,D)+ conjdisj(C,E)+ and(F,G,H):3
     [A>=C+1,C>=0,E=1,D=2,H=1,G=1,F=2,B=1] 
* CE 62: conjdisj(A,B) = 1+ conjdisj(C,D)+ conjdisj(C,E)+ and(F,G,H):4
     [A>=C+1,C>=0,E=2,D=2,H=2,G=2,F=2,B=2] 
* CE 63: conjdisj(A,B) = 1+ conjdisj(C,D)+ conjdisj(C,E)+ and(D,E,F):5
     [A>=C+1,C>=0,E>=0,D>=0,F=0,B=0] 

### Cost equations --> "Loop" of conjdisj/2 
* CEs [62] --> Loop 44 
* CEs [61] --> Loop 45 
* CEs [60] --> Loop 46 
* CEs [59] --> Loop 47 
* CEs [63] --> Loop 48 
* CEs [55] --> Loop 49 
* CEs [56] --> Loop 50 
* CEs [57] --> Loop 51 
* CEs [58] --> Loop 52 
* CEs [54] --> Loop 53 

#### Loops of conjdisj/2 
* Loop 44: conjdisj(A,B)->  conjdisj(A',B')  conjdisj(A',A'2)
                  [A>=A'+1,A'>=0,A'2=2,B'=2,B=2] 
* Loop 45: conjdisj(A,B)->  conjdisj(A',B')  conjdisj(A',A'2)
                  [A>=A'+1,A'>=0,A'2=1,B'=2,B=1] 
* Loop 46: conjdisj(A,B)->  conjdisj(A',B')  conjdisj(A',A'2)
                  [A>=A'+1,A'>=0,A'2=2,B'=1,B=1] 
* Loop 47: conjdisj(A,B)->  conjdisj(A',B')  conjdisj(A',A'2)
                  [A>=A'+1,A'>=0,A'2=1,B'=1,B=1] 
* Loop 48: conjdisj(A,B)->  conjdisj(A',B')  conjdisj(A',A'2)
                  [A>=A'+1,A'2>=0,B'>=0,A'>=0,B=0] 
* Loop 49: conjdisj(A,B) [A>=1,B=1] 
* Loop 50: conjdisj(A,B) [A>=0,B=0] 
* Loop 51: conjdisj(A,B) [B=2,A=1] 
* Loop 52: conjdisj(A,B) [B=2,A=0] 
* Loop 53: conjdisj(A,B)->  conjdisj(A,B)
                  [A>=1] 

### Ranking functions of CR conjdisj(A,B) 

#### Partial ranking functions of CR conjdisj(A,B) 
* Partial RF of phase [44,45,46,47,48,53]:
  - RF of loop [44:1,44:2,45:1,45:2,46:1,46:2,47:1,47:2,48:1,48:2]:
    A


### Resulting Chains:conjdisj(A,B) 
* [multiple([44,45,46,47,48,53],[[],[52],[51],[50],[49]])]...
* [52]
* [51]
* [50]
* [49]


### Merging Chains  conjdisj/2 into  External patterns of execution 
* [[52]] --> 1 
* [[51]] --> 2 
* [[50]] --> 3 
* [[49]] --> 4 
* [[multiple([44,45,46,47,48,53],[[],[52],[51],[50],[49]])]] --> 5 


### Specialization of cost equations getFirst/2 
* CE 38 is refined into CE [64] 
* CE 39 is refined into CE [65] 


#### Refined cost equations getFirst/2 
* CE 64: getFirst(V,Out) = 1
     [V>=Out+1,Out>=0] 
* CE 65: getFirst(V,Out) = 0
     [V>=0,Out=0] 

### Cost equations --> "Loop" of getFirst/2 
* CEs [64] --> Loop 54 
* CEs [65] --> Loop 55 

#### Loops of getFirst/2 
* Loop 54: getFirst(V,Out) [V>=Out+1,Out>=0] 
* Loop 55: getFirst(V,Out) [V>=0,Out=0] 

### Ranking functions of CR getFirst(V,Out) 

#### Partial ranking functions of CR getFirst(V,Out) 


### Resulting Chains:getFirst(V,Out) 
* [55]
* [54]


### Merging Chains  getFirst/2 into  External patterns of execution 
* [[55]] --> 1 
* [[54]] --> 2 


### Specialization of cost equations getSecond/2 
* CE 36 is refined into CE [66] 
* CE 37 is refined into CE [67] 


#### Refined cost equations getSecond/2 
* CE 66: getSecond(V,Out) = 1
     [V>=Out+1,Out>=0] 
* CE 67: getSecond(V,Out) = 0
     [V>=0,Out=0] 

### Cost equations --> "Loop" of getSecond/2 
* CEs [66] --> Loop 56 
* CEs [67] --> Loop 57 

#### Loops of getSecond/2 
* Loop 56: getSecond(V,Out) [V>=Out+1,Out>=0] 
* Loop 57: getSecond(V,Out) [V>=0,Out=0] 

### Ranking functions of CR getSecond(V,Out) 

#### Partial ranking functions of CR getSecond(V,Out) 


### Resulting Chains:getSecond(V,Out) 
* [57]
* [56]


### Merging Chains  getSecond/2 into  External patterns of execution 
* [[57]] --> 1 
* [[56]] --> 2 


### Specialization of cost equations isAnd/2 
* CE 34 is refined into CE [68] 
* CE 32 is refined into CE [69] 
* CE 35 is refined into CE [70] 
* CE 33 is refined into CE [71] 


#### Refined cost equations isAnd/2 
* CE 68: isAnd(V,Out) = 1
     [V>=1,Out=2] 
* CE 69: isAnd(V,Out) = 1
     [V>=1,Out=1] 
* CE 70: isAnd(V,Out) = 0
     [V>=0,Out=0] 
* CE 71: isAnd(V,Out) = 1
     [Out=1,V=0] 

### Cost equations --> "Loop" of isAnd/2 
* CEs [68] --> Loop 58 
* CEs [69] --> Loop 59 
* CEs [70] --> Loop 60 
* CEs [71] --> Loop 61 

#### Loops of isAnd/2 
* Loop 58: isAnd(V,Out) [V>=1,Out=2] 
* Loop 59: isAnd(V,Out) [V>=1,Out=1] 
* Loop 60: isAnd(V,Out) [V>=0,Out=0] 
* Loop 61: isAnd(V,Out) [Out=1,V=0] 

### Ranking functions of CR isAnd(V,Out) 

#### Partial ranking functions of CR isAnd(V,Out) 


### Resulting Chains:isAnd(V,Out) 
* [61]
* [60]
* [59]
* [58]


### Merging Chains  isAnd/2 into  External patterns of execution 
* [[61]] --> 1 
* [[60]] --> 2 
* [[59]] --> 3 
* [[58]] --> 4 


### Specialization of cost equations isConsTerm/3 
* CE 21 is refined into CE [72] 
* CE 23 is refined into CE [73] 
* CE 26 is refined into CE [74] 
* CE 27 is refined into CE [75] 
* CE 22 is refined into CE [76] 
* CE 24 is refined into CE [77] 
* CE 25 is refined into CE [78] 


#### Refined cost equations isConsTerm/3 
* CE 72: isConsTerm(V,V13,Out) = 1
     [V13>=1,V>=1,Out=2] 
* CE 73: isConsTerm(V,V13,Out) = 1
     [V13>=1,V>=1,Out=1] 
* CE 74: isConsTerm(V,V13,Out) = 1
     [V13>=1,V>=1,Out=1] 
* CE 75: isConsTerm(V,V13,Out) = 0
     [V13>=0,V>=0,Out=0] 
* CE 76: isConsTerm(V,V13,Out) = 1
     [V>=1,Out=1,V13=0] 
* CE 77: isConsTerm(V,V13,Out) = 1
     [V13>=1,Out=1,V=0] 
* CE 78: isConsTerm(V,V13,Out) = 1
     [Out=2,V13=0,V=0] 

### Cost equations --> "Loop" of isConsTerm/3 
* CEs [72] --> Loop 62 
* CEs [73,74] --> Loop 63 
* CEs [75] --> Loop 64 
* CEs [76] --> Loop 65 
* CEs [77] --> Loop 66 
* CEs [78] --> Loop 67 

#### Loops of isConsTerm/3 
* Loop 62: isConsTerm(V,V13,Out) [V13>=1,V>=1,Out=2] 
* Loop 63: isConsTerm(V,V13,Out) [V13>=1,V>=1,Out=1] 
* Loop 64: isConsTerm(V,V13,Out) [V13>=0,V>=0,Out=0] 
* Loop 65: isConsTerm(V,V13,Out) [V>=1,Out=1,V13=0] 
* Loop 66: isConsTerm(V,V13,Out) [V13>=1,Out=1,V=0] 
* Loop 67: isConsTerm(V,V13,Out) [Out=2,V13=0,V=0] 

### Ranking functions of CR isConsTerm(V,V13,Out) 

#### Partial ranking functions of CR isConsTerm(V,V13,Out) 


### Resulting Chains:isConsTerm(V,V13,Out) 
* [67]
* [66]
* [65]
* [64]
* [63]
* [62]


### Merging Chains  isConsTerm/3 into  External patterns of execution 
* [[67]] --> 1 
* [[66]] --> 2 
* [[65]] --> 3 
* [[64]] --> 4 
* [[63]] --> 5 
* [[62]] --> 6 


### Specialization of cost equations isOp/2 
* CE 30 is refined into CE [79] 
* CE 31 is refined into CE [80] 
* CE 28 is refined into CE [81] 
* CE 29 is refined into CE [82] 


#### Refined cost equations isOp/2 
* CE 79: isOp(V,Out) = 1
     [V>=1,Out=2] 
* CE 80: isOp(V,Out) = 0
     [V>=0,Out=0] 
* CE 81: isOp(V,Out) = 1
     [Out=1,V=1] 
* CE 82: isOp(V,Out) = 1
     [Out=1,V=0] 

### Cost equations --> "Loop" of isOp/2 
* CEs [79] --> Loop 68 
* CEs [80] --> Loop 69 
* CEs [81] --> Loop 70 
* CEs [82] --> Loop 71 

#### Loops of isOp/2 
* Loop 68: isOp(V,Out) [V>=1,Out=2] 
* Loop 69: isOp(V,Out) [V>=0,Out=0] 
* Loop 70: isOp(V,Out) [Out=1,V=1] 
* Loop 71: isOp(V,Out) [Out=1,V=0] 

### Ranking functions of CR isOp(V,Out) 

#### Partial ranking functions of CR isOp(V,Out) 


### Resulting Chains:isOp(V,Out) 
* [71]
* [70]
* [69]
* [68]


### Merging Chains  isOp/2 into  External patterns of execution 
* [[71]] --> 1 
* [[70]] --> 2 
* [[69]] --> 3 
* [[68]] --> 4 


### Specialization of cost equations start/2 
* CE 2 is refined into CE [83,84,85,86,87] 
* CE 3 is refined into CE [88,89,90,91] 
* CE 4 is refined into CE [92,93,94,95,96,97] 
* CE 5 is refined into CE [98,99,100,101] 
* CE 6 is refined into CE [102,103,104,105] 
* CE 7 is refined into CE [106,107] 
* CE 8 is refined into CE [108,109] 
* CE 9 is refined into CE [110,111,112,113,114] 
* CE 10 is refined into CE [115,116,117,118,119] 


#### Refined cost equations start/2 
* CE 83: start(V,V13) = 0+ conjdisj(W13,X13):1
     [X13=2,W13=0,V=0] 
* CE 84: start(V,V13) = 0+ conjdisj(W13,X13):2
     [X13=2,W13=1,V=1] 
* CE 85: start(V,V13) = 0+ conjdisj(V,W13):3
     [V>=0,W13=0] 
* CE 86: start(V,V13) = 0+ conjdisj(V,W13):4
     [V>=1,W13=1] 
* CE 87: start(V,V13) = 0+ conjdisj(V,W13):5
     [V>=1] 
* CE 88: start(V,V13) = 0+ bool(W13,X13):1
     [X13=2,W13=0,V=0] 
* CE 89: start(V,V13) = 0+ bool(W13,X13):2
     [X13=2,W13=1,V=1] 
* CE 90: start(V,V13) = 0+ bool(V,W13):3
     [V>=0,W13=0] 
* CE 91: start(V,V13) = 0+ bool(V,W13):4
     [V>=1,W13=1] 
* CE 92: start(V,V13) = 0+ isConsTerm(W13,X13,Y13):1
     [Y13=2,X13=0,W13=0,V13=0,V=0] 
* CE 93: start(V,V13) = 0+ isConsTerm(W13,V13,X13):2
     [V13>=1,X13=1,W13=0,V=0] 
* CE 94: start(V,V13) = 0+ isConsTerm(V,W13,X13):3
     [V>=1,X13=1,W13=0,V13=0] 
* CE 95: start(V,V13) = 0+ isConsTerm(V,V13,W13):4
     [V13>=0,V>=0,W13=0] 
* CE 96: start(V,V13) = 0+ isConsTerm(V,V13,W13):5
     [V13>=1,V>=1,W13=1] 
* CE 97: start(V,V13) = 0+ isConsTerm(V,V13,W13):6
     [V13>=1,V>=1,W13=2] 
* CE 98: start(V,V13) = 0+ isOp(W13,X13):1
     [X13=1,W13=0,V=0] 
* CE 99: start(V,V13) = 0+ isOp(W13,X13):2
     [X13=1,W13=1,V=1] 
* CE 100: start(V,V13) = 0+ isOp(V,W13):3
     [V>=0,W13=0] 
* CE 101: start(V,V13) = 0+ isOp(V,W13):4
     [V>=1,W13=2] 
* CE 102: start(V,V13) = 0+ isAnd(W13,X13):1
     [X13=1,W13=0,V=0] 
* CE 103: start(V,V13) = 0+ isAnd(V,W13):2
     [V>=0,W13=0] 
* CE 104: start(V,V13) = 0+ isAnd(V,W13):3
     [V>=1,W13=1] 
* CE 105: start(V,V13) = 0+ isAnd(V,W13):4
     [V>=1,W13=2] 
* CE 106: start(V,V13) = 0+ getSecond(V,W13):1
     [V>=0,W13=0] 
* CE 107: start(V,V13) = 0+ getSecond(V,W13):2
     [V>=W13+1,W13>=0] 
* CE 108: start(V,V13) = 0+ getFirst(V,W13):1
     [V>=0,W13=0] 
* CE 109: start(V,V13) = 0+ getFirst(V,W13):2
     [V>=W13+1,W13>=0] 
* CE 110: start(V,V13) = 1+ conjdisj(W13,X13):1
     [X13=2,W13=0,V=0] 
* CE 111: start(V,V13) = 1+ conjdisj(W13,X13):2
     [X13=2,W13=1,V=1] 
* CE 112: start(V,V13) = 1+ conjdisj(V,W13):3
     [V>=0,W13=0] 
* CE 113: start(V,V13) = 1+ conjdisj(V,W13):4
     [V>=1,W13=1] 
* CE 114: start(V,V13) = 1+ conjdisj(V,W13):5
     [V>=1] 
* CE 115: start(V,V13) = 0+ and(W13,X13,Y13):1
     [Y13=1,X13=1,W13=1,V13=1,V=1] 
* CE 116: start(V,V13) = 0+ and(W13,X13,Y13):2
     [Y13=1,X13=2,W13=1,V13=2,V=1] 
* CE 117: start(V,V13) = 0+ and(W13,X13,Y13):3
     [Y13=1,X13=1,W13=2,V13=1,V=2] 
* CE 118: start(V,V13) = 0+ and(W13,X13,Y13):4
     [Y13=2,X13=2,W13=2,V13=2,V=2] 
* CE 119: start(V,V13) = 0+ and(V,V13,W13):5
     [V13>=0,V>=0,W13=0] 

### Cost equations --> "Loop" of start/2 
* CEs [94] --> Loop 72 
* CEs [118] --> Loop 73 
* CEs [117] --> Loop 74 
* CEs [84,89,99,111,115,116] --> Loop 75 
* CEs [83,85,86,88,90,91,92,93,95,96,97,98,100,101,102,103,104,105,106,107,108,109,110,112,113,119] --> Loop 76 
* CEs [87,114] --> Loop 77 

#### Loops of start/2 
* Loop 72: start(V,V13) [V>=1,V13=0] 
* Loop 73: start(V,V13) [V13=2,V=2] 
* Loop 74: start(V,V13) [V13=1,V=2] 
* Loop 75: start(V,V13) [V=1] 
* Loop 76: start(V,V13) [V>=0] 
* Loop 77: start(V,V13) [V>=1] 

### Ranking functions of CR start(V,V13) 

#### Partial ranking functions of CR start(V,V13) 


### Resulting Chains:start(V,V13) 
* [77]...
* [76]
* [75]
* [74]
* [73]
* [72]


### Merging Chains  start/2 into  External patterns of execution 
* [[75],[76]] --> 1 
* [[74]] --> 2 
* [[73]] --> 3 
* [[72]] --> 4 
* [[77]] --> 5 


Computing Bounds
=====================================

#### Cost of chains of and(V,V13,Out):
* Chain [39]: 0
  with precondition: [V=1,V13=1,Out=1] 

* Chain [38]: 0
  with precondition: [V=1,V13=2,Out=1] 

* Chain [37]: 0
  with precondition: [V=2,V13=1,Out=1] 

* Chain [36]: 0
  with precondition: [V=2,V13=2,Out=2] 

* Chain [35]: 0
  with precondition: [Out=0,V>=0,V13>=0] 


#### Cost of chains of bool(V,Out):
* Chain [43]: 1
  with precondition: [V=0,Out=2] 

* Chain [42]: 1
  with precondition: [V=1,Out=2] 

* Chain [41]: 0
  with precondition: [Out=0,V>=0] 

* Chain [40]: 1
  with precondition: [Out=1,V>=1] 


#### Cost of loops [44,45,46,47,48,53] 

 * loop 44:conjdisj(A,B) -> [conjdisj(A',B'),conjdisj(A'2,B'2)] 
1
 * loop 45:conjdisj(A,B) -> [conjdisj(A',B'),conjdisj(A'2,B'2)] 
1
 * loop 46:conjdisj(A,B) -> [conjdisj(A',B'),conjdisj(A'2,B'2)] 
1
 * loop 47:conjdisj(A,B) -> [conjdisj(A',B'),conjdisj(A'2,B'2)] 
1
 * loop 48:conjdisj(A,B) -> [conjdisj(A',B'),conjdisj(A'2,B'2)] 
1
 * loop 53:conjdisj(A,B) -> [conjdisj(A',B')] 
1
#### Cost of phase [44,45,46,47,48,53]:conjdisj(A,B) -> [] 
6*it(44)+3*it([49])+0
#### Cost of chains of conjdisj(A,B):
* Chain [multiple([44,45,46,47,48,53],[[],[52],[51],[50],[49]])]...: 6*it(44)+3*it([49])+0
  with precondition: [A>=1] 

* Chain [52]: 1
  with precondition: [A=0,B=2] 

* Chain [51]: 1
  with precondition: [A=1,B=2] 

* Chain [50]: 0
  with precondition: [B=0,A>=0] 

* Chain [49]: 1
  with precondition: [B=1,A>=1] 


#### Cost of chains of getFirst(V,Out):
* Chain [55]: 0
  with precondition: [Out=0,V>=0] 

* Chain [54]: 1
  with precondition: [Out>=0,V>=Out+1] 


#### Cost of chains of getSecond(V,Out):
* Chain [57]: 0
  with precondition: [Out=0,V>=0] 

* Chain [56]: 1
  with precondition: [Out>=0,V>=Out+1] 


#### Cost of chains of isAnd(V,Out):
* Chain [61]: 1
  with precondition: [V=0,Out=1] 

* Chain [60]: 0
  with precondition: [Out=0,V>=0] 

* Chain [59]: 1
  with precondition: [Out=1,V>=1] 

* Chain [58]: 1
  with precondition: [Out=2,V>=1] 


#### Cost of chains of isConsTerm(V,V13,Out):
* Chain [67]: 1
  with precondition: [V=0,V13=0,Out=2] 

* Chain [66]: 1
  with precondition: [V=0,Out=1,V13>=1] 

* Chain [65]: 1
  with precondition: [V13=0,Out=1,V>=1] 

* Chain [64]: 0
  with precondition: [Out=0,V>=0,V13>=0] 

* Chain [63]: 1
  with precondition: [Out=1,V>=1,V13>=1] 

* Chain [62]: 1
  with precondition: [Out=2,V>=1,V13>=1] 


#### Cost of chains of isOp(V,Out):
* Chain [71]: 1
  with precondition: [V=0,Out=1] 

* Chain [70]: 1
  with precondition: [V=1,Out=1] 

* Chain [69]: 0
  with precondition: [Out=0,V>=0] 

* Chain [68]: 1
  with precondition: [Out=2,V>=1] 


#### Cost of chains of start(V,V13):
* Chain [77]...: 1*aux(2)+0
  with precondition: [V>=1] 

* Chain [76]: 2
  with precondition: [V>=0] 

* Chain [75]: 2
  with precondition: [V=1] 

* Chain [74]: 0
  with precondition: [V=2,V13=1] 

* Chain [73]: 0
  with precondition: [V=2,V13=2] 

* Chain [72]: 1
  with precondition: [V13=0,V>=1] 


Closed-form bounds of start(V,V13): 
-------------------------------------
* Chain [77]... with precondition: [V>=1] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [76] with precondition: [V>=0] 
    - Upper bound: 2 
    - Complexity: constant 
* Chain [75] with precondition: [V=1] 
    - Upper bound: 2 
    - Complexity: constant 
* Chain [74] with precondition: [V=2,V13=1] 
    - Upper bound: 0 
    - Complexity: constant 
* Chain [73] with precondition: [V=2,V13=2] 
    - Upper bound: 0 
    - Complexity: constant 
* Chain [72] with precondition: [V13=0,V>=1] 
    - Upper bound: 1 
    - Complexity: constant 

### Maximum cost of start(V,V13): inf 
Asymptotic class: infinity 

Time statistics: 
-------------------------------------
* Partial evaluation computed in 32 ms.
* Invariants computed in 30 ms.
   - Backward Invariants 10 ms.
   - Transitive Invariants 5 ms.
* Refinement performed in 93 ms.
* Termination proved in 6 ms.
* Upper bounds computed in 61 ms.
   - Equation cost structures 28 ms.
   - Phase cost structures 32 ms.
   - Chain cost structures 0 ms.
   - Solving cost expressions 0 ms.
* Total analysis performed in 267 ms.


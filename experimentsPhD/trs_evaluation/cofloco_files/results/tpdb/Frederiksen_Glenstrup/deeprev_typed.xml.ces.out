
Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. recursive  : [revconsapp/3]
1. recursive  : [deeprevapp/3]
2. non_recursive  : [deeprev/2]
3. non_recursive  : [first/2]
4. non_recursive  : [goal/2]
5. non_recursive  : [isEmptyT/2]
6. non_recursive  : [isNotEmptyT/2]
7. non_recursive  : [isVal/2]
8. non_recursive  : [second/2]
9. non_recursive  : [start/2]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into revconsapp/3
1. SCC is partially evaluated into deeprevapp/3
2. SCC is partially evaluated into deeprev/2
3. SCC is partially evaluated into first/2
4. SCC is completely evaluated into other SCCs
5. SCC is partially evaluated into isEmptyT/2
6. SCC is partially evaluated into isNotEmptyT/2
7. SCC is partially evaluated into isVal/2
8. SCC is partially evaluated into second/2
9. SCC is partially evaluated into start/2

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations revconsapp/3 
* CE 12 is refined into CE [38] 
* CE 14 is refined into CE [39] 
* CE 13 is refined into CE [40] 
* CE 11 is refined into CE [41] 


#### Refined cost equations revconsapp/3 
* CE 38: revconsapp(A,B,B) = 1
     [B>=0,A>=1] 
* CE 39: revconsapp(V1,V,Out) = 0
     [V>=0,V1>=0,Out=0] 
* CE 40: revconsapp(A,B,B) = 1
     [B>=0,A=0] 
* CE 41: revconsapp(V1,V,Out) = 1+ revconsapp(W1,X1,Out)
     [V1+V>=X1,X1>=V+1,V>=0,V1+V=W1+X1] 

### Cost equations --> "Loop" of revconsapp/3 
* CEs [41] --> Loop 27 
* CEs [38] --> Loop 28 
* CEs [39] --> Loop 29 
* CEs [40] --> Loop 30 

#### Loops of revconsapp/3 
* Loop 27: revconsapp(V1,V,Out)->  revconsapp(V1',V',Out)
                  [V1+V>=V',V'>=V+1,V>=0,V1+V=V1'+V'] 
* Loop 28: revconsapp(A,B,B) [B>=0,A>=1] 
* Loop 29: revconsapp(V1,V,Out) [V>=0,V1>=0,Out=0] 
* Loop 30: revconsapp(A,B,B) [B>=0,A=0] 

### Ranking functions of CR revconsapp(V1,V,Out) 
* RF of phase [27]: [V1]

#### Partial ranking functions of CR revconsapp(V1,V,Out) 
* Partial RF of phase [27]:
  - RF of loop [27:1]:
    V1


### Resulting Chains:revconsapp(V1,V,Out) 
* [[27],30]
* [[27],29]
* [[27],28]
* [30]
* [29]
* [28]


### Merging Chains  revconsapp/3 into  External patterns of execution 
* [[30]] --> 1 
* [[29],[29,[27]]] --> 2 
* [[28]] --> 3 
* [[30,[27]]] --> 4 
* [[28,[27]]] --> 5 


### Specialization of cost equations deeprevapp/3 
* CE 16 is refined into CE [42,43,44,45,46] 
* CE 18 is refined into CE [47] 
* CE 17 is refined into CE [48] 
* CE 15 is refined into CE [49] 


#### Refined cost equations deeprevapp/3 
* CE 42: deeprevapp(A,B,A) = 1+ revconsapp(C,A,A):1
     [A>=1,C=0,B=0] 
* CE 43: deeprevapp(V1,V,Out) = 1+ revconsapp(V,V1,W1):2
     [V1>=1,V>=0,W1=0,Out=0] 
* CE 44: deeprevapp(A,B,A) = 1+ revconsapp(B,A,A):3
     [A>=1,B>=1] 
* CE 45: deeprevapp(V1,V,Out) = 1+ revconsapp(V,W1,Out):4
     [Out>=V+1,V>=1,Out=V+W1,Out=V1+V] 
* CE 46: deeprevapp(V1,V,Out) = 1+ revconsapp(V,V1,Out):5
     [V1+V>=Out+1,Out>=V1+1,V1>=1] 
* CE 47: deeprevapp(V1,V,Out) = 0
     [V>=0,V1>=0,Out=0] 
* CE 48: deeprevapp(A,B,B) = 1
     [B>=0,A=0] 
* CE 49: deeprevapp(V1,V,Out) = 1+ deeprevapp(W1,X1,Out)
     [V1+V>=X1,X1>=V+1,V>=0,V1+V=W1+X1] 

### Cost equations --> "Loop" of deeprevapp/3 
* CEs [49] --> Loop 31 
* CEs [46] --> Loop 32 
* CEs [45] --> Loop 33 
* CEs [44] --> Loop 34 
* CEs [43,47] --> Loop 35 
* CEs [42] --> Loop 36 
* CEs [48] --> Loop 37 

#### Loops of deeprevapp/3 
* Loop 31: deeprevapp(V1,V,Out)->  deeprevapp(V1',V',Out)
                  [V1+V>=V',V'>=V+1,V>=0,V1+V=V1'+V'] 
* Loop 32: deeprevapp(V1,V,Out) [V1+V>=Out+1,Out>=V1+1,V1>=1] 
* Loop 33: deeprevapp(V1,V,Out) [V>=1,V1>=1,V1+V=Out] 
* Loop 34: deeprevapp(A,B,A) [B>=1,A>=1] 
* Loop 35: deeprevapp(V1,V,Out) [V>=0,V1>=0,Out=0] 
* Loop 36: deeprevapp(A,B,A) [A>=1,B=0] 
* Loop 37: deeprevapp(A,B,B) [B>=0,A=0] 

### Ranking functions of CR deeprevapp(V1,V,Out) 
* RF of phase [31]: [V1]

#### Partial ranking functions of CR deeprevapp(V1,V,Out) 
* Partial RF of phase [31]:
  - RF of loop [31:1]:
    V1


### Resulting Chains:deeprevapp(V1,V,Out) 
* [[31],37]
* [[31],35]
* [[31],34]
* [[31],33]
* [[31],32]
* [37]
* [36]
* [35]
* [34]
* [33]
* [32]


### Merging Chains  deeprevapp/3 into  External patterns of execution 
* [[37]] --> 1 
* [[33],[36],[33,[31]],[37,[31]]] --> 2 
* [[35],[35,[31]]] --> 3 
* [[34]] --> 4 
* [[32]] --> 5 
* [[32,[31]]] --> 6 
* [[34,[31]]] --> 7 


### Specialization of cost equations deeprev/2 
* CE 19 is refined into CE [50,51,52,53] 
* CE 20 is refined into CE [54] 
* CE 21 is refined into CE [55] 
* CE 22 is refined into CE [56] 


#### Refined cost equations deeprev/2 
* CE 50: deeprev(A,A) = 1+ deeprevapp(A,B,A):2
     [A>=1,B=0] 
* CE 51: deeprev(V1,Out) = 1+ deeprevapp(V1,W1,X1):3
     [V1>=1,X1=0,W1=0,Out=0] 
* CE 52: deeprev(V1,Out) = 1+ deeprevapp(V1,W1,Out):6
     [V1>=Out+1,Out>=2,W1=0] 
* CE 53: deeprev(V1,Out) = 1+ deeprevapp(V1,W1,Out):7
     [V1>=Out+1,Out>=1,W1=0] 
* CE 54: deeprev(A,A) = 1
     [A>=1] 
* CE 55: deeprev(V1,Out) = 1
     [Out=0,V1=0] 
* CE 56: deeprev(V1,Out) = 0
     [V1>=0,Out=0] 

### Cost equations --> "Loop" of deeprev/2 
* CEs [52,53] --> Loop 38 
* CEs [50,54] --> Loop 39 
* CEs [51,55,56] --> Loop 40 

#### Loops of deeprev/2 
* Loop 38: deeprev(V1,Out) [V1>=Out+1,Out>=1] 
* Loop 39: deeprev(A,A) [A>=1] 
* Loop 40: deeprev(V1,Out) [V1>=0,Out=0] 

### Ranking functions of CR deeprev(V1,Out) 

#### Partial ranking functions of CR deeprev(V1,Out) 


### Resulting Chains:deeprev(V1,Out) 
* [40]
* [39]
* [38]


### Merging Chains  deeprev/2 into  External patterns of execution 
* [[40]] --> 1 
* [[39]] --> 2 
* [[38]] --> 3 


### Specialization of cost equations first/2 
* CE 36 is refined into CE [57] 
* CE 37 is refined into CE [58] 


#### Refined cost equations first/2 
* CE 57: first(V1,Out) = 1
     [V1>=Out+1,Out>=0] 
* CE 58: first(V1,Out) = 0
     [V1>=0,Out=0] 

### Cost equations --> "Loop" of first/2 
* CEs [57] --> Loop 41 
* CEs [58] --> Loop 42 

#### Loops of first/2 
* Loop 41: first(V1,Out) [V1>=Out+1,Out>=0] 
* Loop 42: first(V1,Out) [V1>=0,Out=0] 

### Ranking functions of CR first(V1,Out) 

#### Partial ranking functions of CR first(V1,Out) 


### Resulting Chains:first(V1,Out) 
* [42]
* [41]


### Merging Chains  first/2 into  External patterns of execution 
* [[42]] --> 1 
* [[41]] --> 2 


### Specialization of cost equations isEmptyT/2 
* CE 33 is refined into CE [59] 
* CE 35 is refined into CE [60] 
* CE 34 is refined into CE [61] 


#### Refined cost equations isEmptyT/2 
* CE 59: isEmptyT(V1,Out) = 1
     [V1>=1,Out=1] 
* CE 60: isEmptyT(V1,Out) = 0
     [V1>=0,Out=0] 
* CE 61: isEmptyT(V1,Out) = 1
     [Out=2,V1=0] 

### Cost equations --> "Loop" of isEmptyT/2 
* CEs [59] --> Loop 43 
* CEs [60] --> Loop 44 
* CEs [61] --> Loop 45 

#### Loops of isEmptyT/2 
* Loop 43: isEmptyT(V1,Out) [V1>=1,Out=1] 
* Loop 44: isEmptyT(V1,Out) [V1>=0,Out=0] 
* Loop 45: isEmptyT(V1,Out) [Out=2,V1=0] 

### Ranking functions of CR isEmptyT(V1,Out) 

#### Partial ranking functions of CR isEmptyT(V1,Out) 


### Resulting Chains:isEmptyT(V1,Out) 
* [45]
* [44]
* [43]


### Merging Chains  isEmptyT/2 into  External patterns of execution 
* [[45]] --> 1 
* [[44]] --> 2 
* [[43]] --> 3 


### Specialization of cost equations isNotEmptyT/2 
* CE 29 is refined into CE [62] 
* CE 30 is refined into CE [63] 
* CE 32 is refined into CE [64] 
* CE 31 is refined into CE [65] 


#### Refined cost equations isNotEmptyT/2 
* CE 62: isNotEmptyT(V1,Out) = 1
     [V1>=1,Out=2] 
* CE 63: isNotEmptyT(V1,Out) = 1
     [V1>=1,Out=1] 
* CE 64: isNotEmptyT(V1,Out) = 0
     [V1>=0,Out=0] 
* CE 65: isNotEmptyT(V1,Out) = 1
     [Out=1,V1=0] 

### Cost equations --> "Loop" of isNotEmptyT/2 
* CEs [62] --> Loop 46 
* CEs [63] --> Loop 47 
* CEs [64] --> Loop 48 
* CEs [65] --> Loop 49 

#### Loops of isNotEmptyT/2 
* Loop 46: isNotEmptyT(V1,Out) [V1>=1,Out=2] 
* Loop 47: isNotEmptyT(V1,Out) [V1>=1,Out=1] 
* Loop 48: isNotEmptyT(V1,Out) [V1>=0,Out=0] 
* Loop 49: isNotEmptyT(V1,Out) [Out=1,V1=0] 

### Ranking functions of CR isNotEmptyT(V1,Out) 

#### Partial ranking functions of CR isNotEmptyT(V1,Out) 


### Resulting Chains:isNotEmptyT(V1,Out) 
* [49]
* [48]
* [47]
* [46]


### Merging Chains  isNotEmptyT/2 into  External patterns of execution 
* [[49]] --> 1 
* [[48]] --> 2 
* [[47]] --> 3 
* [[46]] --> 4 


### Specialization of cost equations isVal/2 
* CE 26 is refined into CE [66] 
* CE 25 is refined into CE [67] 
* CE 28 is refined into CE [68] 
* CE 27 is refined into CE [69] 


#### Refined cost equations isVal/2 
* CE 66: isVal(V1,Out) = 1
     [V1>=1,Out=2] 
* CE 67: isVal(V1,Out) = 1
     [V1>=1,Out=1] 
* CE 68: isVal(V1,Out) = 0
     [V1>=0,Out=0] 
* CE 69: isVal(V1,Out) = 1
     [Out=1,V1=0] 

### Cost equations --> "Loop" of isVal/2 
* CEs [66] --> Loop 50 
* CEs [67] --> Loop 51 
* CEs [68] --> Loop 52 
* CEs [69] --> Loop 53 

#### Loops of isVal/2 
* Loop 50: isVal(V1,Out) [V1>=1,Out=2] 
* Loop 51: isVal(V1,Out) [V1>=1,Out=1] 
* Loop 52: isVal(V1,Out) [V1>=0,Out=0] 
* Loop 53: isVal(V1,Out) [Out=1,V1=0] 

### Ranking functions of CR isVal(V1,Out) 

#### Partial ranking functions of CR isVal(V1,Out) 


### Resulting Chains:isVal(V1,Out) 
* [53]
* [52]
* [51]
* [50]


### Merging Chains  isVal/2 into  External patterns of execution 
* [[53]] --> 1 
* [[52]] --> 2 
* [[51]] --> 3 
* [[50]] --> 4 


### Specialization of cost equations second/2 
* CE 23 is refined into CE [70] 
* CE 24 is refined into CE [71] 


#### Refined cost equations second/2 
* CE 70: second(V1,Out) = 1
     [V1>=Out+1,Out>=0] 
* CE 71: second(V1,Out) = 0
     [V1>=0,Out=0] 

### Cost equations --> "Loop" of second/2 
* CEs [70] --> Loop 54 
* CEs [71] --> Loop 55 

#### Loops of second/2 
* Loop 54: second(V1,Out) [V1>=Out+1,Out>=0] 
* Loop 55: second(V1,Out) [V1>=0,Out=0] 

### Ranking functions of CR second(V1,Out) 

#### Partial ranking functions of CR second(V1,Out) 


### Resulting Chains:second(V1,Out) 
* [55]
* [54]


### Merging Chains  second/2 into  External patterns of execution 
* [[55]] --> 1 
* [[54]] --> 2 


### Specialization of cost equations start/2 
* CE 2 is refined into CE [72,73,74,75,76] 
* CE 3 is refined into CE [77,78,79,80,81,82,83] 
* CE 4 is refined into CE [84,85,86] 
* CE 5 is refined into CE [87,88] 
* CE 6 is refined into CE [89,90,91,92] 
* CE 7 is refined into CE [93,94,95,96] 
* CE 8 is refined into CE [97,98,99] 
* CE 9 is refined into CE [100,101] 
* CE 10 is refined into CE [102,103,104] 


#### Refined cost equations start/2 
* CE 72: start(V1,V) = 0+ revconsapp(W1,V,V):1
     [V>=0,W1=0,V1=0] 
* CE 73: start(V1,V) = 0+ revconsapp(V1,V,W1):2
     [V>=0,V1>=0,W1=0] 
* CE 74: start(V1,V) = 0+ revconsapp(V1,V,V):3
     [V>=0,V1>=1] 
* CE 75: start(V1,V) = 0+ revconsapp(V1,W1,X1):4
     [X1>=V1,V1>=1,X1=V1+W1,X1=V1+V] 
* CE 76: start(V1,V) = 0+ revconsapp(V1,V,W1):5
     [V1+V>=W1+1,W1>=V+1,V>=0] 
* CE 77: start(V1,V) = 0+ deeprevapp(W1,V,V):1
     [V>=0,W1=0,V1=0] 
* CE 78: start(V1,V) = 0+ deeprevapp(V1,W1,X1):2
     [X1>=V1,V1>=1,X1=V1+W1,X1=V1+V] 
* CE 79: start(V1,V) = 0+ deeprevapp(V1,V,W1):3
     [V>=0,V1>=0,W1=0] 
* CE 80: start(V1,V) = 0+ deeprevapp(V1,V,V1):4
     [V1>=1,V>=1] 
* CE 81: start(V1,V) = 0+ deeprevapp(V1,V,W1):5
     [V1+V>=W1+1,W1>=V1+1,V1>=1] 
* CE 82: start(V1,V) = 0+ deeprevapp(V1,V,W1):6
     [V1+V>=W1+1,W1>=2,V>=0,V1>=2] 
* CE 83: start(V1,V) = 0+ deeprevapp(V1,V,W1):7
     [V1>=W1+1,W1>=1,V>=0] 
* CE 84: start(V1,V) = 0+ deeprev(V1,W1):1
     [V1>=0,W1=0] 
* CE 85: start(V1,V) = 0+ deeprev(V1,V1):2
     [V1>=1] 
* CE 86: start(V1,V) = 0+ deeprev(V1,W1):3
     [V1>=W1+1,W1>=1] 
* CE 87: start(V1,V) = 0+ second(V1,W1):1
     [V1>=0,W1=0] 
* CE 88: start(V1,V) = 0+ second(V1,W1):2
     [V1>=W1+1,W1>=0] 
* CE 89: start(V1,V) = 0+ isVal(W1,X1):1
     [X1=1,W1=0,V1=0] 
* CE 90: start(V1,V) = 0+ isVal(V1,W1):2
     [V1>=0,W1=0] 
* CE 91: start(V1,V) = 0+ isVal(V1,W1):3
     [V1>=1,W1=1] 
* CE 92: start(V1,V) = 0+ isVal(V1,W1):4
     [V1>=1,W1=2] 
* CE 93: start(V1,V) = 0+ isNotEmptyT(W1,X1):1
     [X1=1,W1=0,V1=0] 
* CE 94: start(V1,V) = 0+ isNotEmptyT(V1,W1):2
     [V1>=0,W1=0] 
* CE 95: start(V1,V) = 0+ isNotEmptyT(V1,W1):3
     [V1>=1,W1=1] 
* CE 96: start(V1,V) = 0+ isNotEmptyT(V1,W1):4
     [V1>=1,W1=2] 
* CE 97: start(V1,V) = 0+ isEmptyT(W1,X1):1
     [X1=2,W1=0,V1=0] 
* CE 98: start(V1,V) = 0+ isEmptyT(V1,W1):2
     [V1>=0,W1=0] 
* CE 99: start(V1,V) = 0+ isEmptyT(V1,W1):3
     [V1>=1,W1=1] 
* CE 100: start(V1,V) = 0+ first(V1,W1):1
     [V1>=0,W1=0] 
* CE 101: start(V1,V) = 0+ first(V1,W1):2
     [V1>=W1+1,W1>=0] 
* CE 102: start(V1,V) = 1+ deeprev(V1,W1):1
     [V1>=0,W1=0] 
* CE 103: start(V1,V) = 1+ deeprev(V1,V1):2
     [V1>=1] 
* CE 104: start(V1,V) = 1+ deeprev(V1,W1):3
     [V1>=W1+1,W1>=1] 

### Cost equations --> "Loop" of start/2 
* CEs [72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104] --> Loop 56 

#### Loops of start/2 
* Loop 56: start(V1,V) [V1>=0] 

### Ranking functions of CR start(V1,V) 

#### Partial ranking functions of CR start(V1,V) 


### Resulting Chains:start(V1,V) 
* [56]


### Merging Chains  start/2 into  External patterns of execution 
* [[56]] --> 1 


Computing Bounds
=====================================

#### Cost of loops [27] 

 * loop 27:revconsapp(V1,V,Out) -> [revconsapp(V1',V',Out')] 
1
#### Cost of phase [27]:revconsapp(V1,V,Out) -> [revconsapp(V1',V',Out')] 
1*it(27)+0
  Such that:it(27) =< V1
it(27) =< V1-V1'

#### Cost of phase [27]:revconsapp(V1,V,Out) -> [revconsapp(V1',V',Out')] 
1*it(27)+0
  Such that:it(27) =< V1
it(27) =< V1-V1'

#### Cost of phase [27]:revconsapp(V1,V,Out) -> [revconsapp(V1',V',Out')] 
1*it(27)+0
  Such that:it(27) =< V1
it(27) =< V1-V1'

#### Cost of chains of revconsapp(V1,V,Out):
* Chain [[27],30]: 1*it(27)+1
  Such that:it(27) =< -V+Out

  with precondition: [V+V1=Out,V1>=1,V>=0] 

* Chain [[27],29]: 1*it(27)+0
  Such that:it(27) =< V1

  with precondition: [Out=0,V1>=1,V>=0] 

* Chain [[27],28]: 1*it(27)+1
  Such that:it(27) =< -V+Out

  with precondition: [V>=0,Out>=V+1,V+V1>=Out+1] 

* Chain [30]: 1
  with precondition: [V1=0,V=Out,V>=0] 

* Chain [29]: 0
  with precondition: [Out=0,V1>=0,V>=0] 

* Chain [28]: 1
  with precondition: [V=Out,V1>=1,V>=0] 


#### Cost of loops [31] 

 * loop 31:deeprevapp(V1,V,Out) -> [deeprevapp(V1',V',Out')] 
1
#### Cost of phase [31]:deeprevapp(V1,V,Out) -> [deeprevapp(V1',V',Out')] 
1*it(31)+0
  Such that:it(31) =< V1
it(31) =< V1-V1'

#### Cost of phase [31]:deeprevapp(V1,V,Out) -> [deeprevapp(V1',V',Out')] 
1*it(31)+0
  Such that:it(31) =< V1
it(31) =< V1-V1'

#### Cost of phase [31]:deeprevapp(V1,V,Out) -> [deeprevapp(V1',V',Out')] 
1*it(31)+0
  Such that:it(31) =< V1
it(31) =< V1-V1'

#### Cost of phase [31]:deeprevapp(V1,V,Out) -> [deeprevapp(V1',V',Out')] 
1*it(31)+0
  Such that:it(31) =< V1
it(31) =< V1-V1'

#### Cost of phase [31]:deeprevapp(V1,V,Out) -> [deeprevapp(V1',V',Out')] 
1*it(31)+0
  Such that:it(31) =< V1
it(31) =< V1-V1'

#### Cost of chains of deeprevapp(V1,V,Out):
* Chain [[31],37]: 1*it(31)+1
  Such that:it(31) =< -V+Out

  with precondition: [V+V1=Out,V1>=1,V>=0] 

* Chain [[31],35]: 1*it(31)+1*s(2)+1
  Such that:it(31) =< V1
s(2) =< V1+V

  with precondition: [Out=0,V1>=1,V>=0] 

* Chain [[31],34]: 1*it(31)+2
  Such that:it(31) =< V1-Out

  with precondition: [V>=0,Out>=1,V1>=Out+1] 

* Chain [[31],33]: 1*it(31)+1*s(3)+2
  Such that:it(31) =< V1
s(3) =< Out

  with precondition: [V+V1=Out,V1>=2,V>=0] 

* Chain [[31],32]: 1*it(31)+1*s(4)+2
  Such that:it(31) =< V1
s(4) =< V1+V

  with precondition: [V1>=2,V>=0,Out>=2,V+V1>=Out+1] 

* Chain [37]: 1
  with precondition: [V1=0,V=Out,V>=0] 

* Chain [36]: 2
  with precondition: [V=0,V1=Out,V1>=1] 

* Chain [35]: 1*s(2)+1
  Such that:s(2) =< V

  with precondition: [Out=0,V1>=0,V>=0] 

* Chain [34]: 2
  with precondition: [V1=Out,V1>=1,V>=1] 

* Chain [33]: 1*s(3)+2
  Such that:s(3) =< V

  with precondition: [V+V1=Out,V1>=1,V>=1] 

* Chain [32]: 1*s(4)+2
  Such that:s(4) =< V

  with precondition: [V1>=1,Out>=V1+1,V+V1>=Out+1] 


#### Cost of chains of deeprev(V1,Out):
* Chain [40]: 2*s(12)+2
  Such that:aux(1) =< V1
s(12) =< aux(1)

  with precondition: [Out=0,V1>=0] 

* Chain [39]: 3*s(15)+3
  Such that:aux(2) =< V1
s(15) =< aux(2)

  with precondition: [V1=Out,V1>=1] 

* Chain [38]: 3*s(19)+3
  Such that:aux(4) =< V1
s(19) =< aux(4)

  with precondition: [Out>=1,V1>=Out+1] 


#### Cost of chains of first(V1,Out):
* Chain [42]: 0
  with precondition: [Out=0,V1>=0] 

* Chain [41]: 1
  with precondition: [Out>=0,V1>=Out+1] 


#### Cost of chains of isEmptyT(V1,Out):
* Chain [45]: 1
  with precondition: [V1=0,Out=2] 

* Chain [44]: 0
  with precondition: [Out=0,V1>=0] 

* Chain [43]: 1
  with precondition: [Out=1,V1>=1] 


#### Cost of chains of isNotEmptyT(V1,Out):
* Chain [49]: 1
  with precondition: [V1=0,Out=1] 

* Chain [48]: 0
  with precondition: [Out=0,V1>=0] 

* Chain [47]: 1
  with precondition: [Out=1,V1>=1] 

* Chain [46]: 1
  with precondition: [Out=2,V1>=1] 


#### Cost of chains of isVal(V1,Out):
* Chain [53]: 1
  with precondition: [V1=0,Out=1] 

* Chain [52]: 0
  with precondition: [Out=0,V1>=0] 

* Chain [51]: 1
  with precondition: [Out=1,V1>=1] 

* Chain [50]: 1
  with precondition: [Out=2,V1>=1] 


#### Cost of chains of second(V1,Out):
* Chain [55]: 0
  with precondition: [Out=0,V1>=0] 

* Chain [54]: 1
  with precondition: [Out>=0,V1>=Out+1] 


#### Cost of chains of start(V1,V):
* Chain [56]: 24*s(22)+3*s(27)+3*s(28)+4
  Such that:aux(6) =< V1
aux(7) =< V1+V
aux(8) =< V
s(22) =< aux(6)
s(28) =< aux(7)
s(27) =< aux(8)

  with precondition: [V1>=0] 


Closed-form bounds of start(V1,V): 
-------------------------------------
* Chain [56] with precondition: [V1>=0] 
    - Upper bound: 24*V1+4+nat(V)*3+nat(V1+V)*3 
    - Complexity: n 

### Maximum cost of start(V1,V): 24*V1+4+nat(V)*3+nat(V1+V)*3 
Asymptotic class: n 

Time statistics: 
-------------------------------------
* Partial evaluation computed in 18 ms.
* Invariants computed in 32 ms.
   - Backward Invariants 22 ms.
   - Transitive Invariants 3 ms.
* Refinement performed in 80 ms.
* Termination proved in 4 ms.
* Upper bounds computed in 72 ms.
   - Equation cost structures 36 ms.
   - Phase cost structures 7 ms.
   - Chain cost structures 24 ms.
   - Solving cost expressions 0 ms.
* Total analysis performed in 243 ms.



Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. recursive  : [lookup/3]
1. recursive  : [fun1/3]
2. recursive  : [fun/6,turing/5]
3. non_recursive  : [getGoto/2]
4. non_recursive  : [getGotoFirst/2]
5. non_recursive  : [getGotoSecond/2]
6. non_recursive  : [getWrite/2]
7. non_recursive  : [instrConstrCheck/3]
8. non_recursive  : [instrsConstrCheck/3]
9. non_recursive  : [instrsFirst/2]
10. non_recursive  : [instrsSecond/2]
11. non_recursive  : [notEmpty/2]
12. non_recursive  : [run/3]
13. non_recursive  : [start/5]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into lookup/3
1. SCC is partially evaluated into fun1/3
2. SCC is partially evaluated into turing/5
3. SCC is partially evaluated into getGoto/2
4. SCC is partially evaluated into getGotoFirst/2
5. SCC is partially evaluated into getGotoSecond/2
6. SCC is partially evaluated into getWrite/2
7. SCC is partially evaluated into instrConstrCheck/3
8. SCC is partially evaluated into instrsConstrCheck/3
9. SCC is partially evaluated into instrsFirst/2
10. SCC is partially evaluated into instrsSecond/2
11. SCC is partially evaluated into notEmpty/2
12. SCC is completely evaluated into other SCCs
13. SCC is partially evaluated into start/5

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations lookup/3 
* CE 32 is refined into CE [64] 
* CE 31 is refined into CE [65] 
* CE 30 is refined into CE [66] 


#### Refined cost equations lookup/3 
* CE 64: lookup(V2,V,Out) = 0
     [V>=0,V2>=0,Out=0] 
* CE 65: lookup(A,B,B) = 1
     [B>=0,A=0] 
* CE 66: lookup(V2,V,Out) = 1+ lookup(W2,X2,Out)
     [V>=X2+1,X2>=0,W2>=0,W2+1=V2] 

### Cost equations --> "Loop" of lookup/3 
* CEs [66] --> Loop 46 
* CEs [64] --> Loop 47 
* CEs [65] --> Loop 48 

#### Loops of lookup/3 
* Loop 46: lookup(V2,V,Out)->  lookup(V2',V',Out)
                  [V>=V'+1,V'>=0,V2'>=0,V2'+1=V2] 
* Loop 47: lookup(V2,V,Out) [V>=0,V2>=0,Out=0] 
* Loop 48: lookup(A,B,B) [B>=0,A=0] 

### Ranking functions of CR lookup(V2,V,Out) 
* RF of phase [46]: [V,V2]

#### Partial ranking functions of CR lookup(V2,V,Out) 
* Partial RF of phase [46]:
  - RF of loop [46:1]:
    V
    V2


### Resulting Chains:lookup(V2,V,Out) 
* [[46],48]
* [[46],47]
* [48]
* [47]


### Merging Chains  lookup/3 into  External patterns of execution 
* [[48]] --> 1 
* [[47],[47,[46]]] --> 2 
* [[48,[46]]] --> 3 


### Specialization of cost equations fun1/3 
* CE 63 is refined into CE [67] 
* CE 61 is refined into CE [68] 
* CE 60 is refined into CE [69] 
* CE 62 is refined into CE [70] 
* CE 59 is refined into CE [71] 


#### Refined cost equations fun1/3 
* CE 67: fun1(V2,V,Out) = 0
     [V>=0,V2>=0,Out=0] 
* CE 68: fun1(V2,V,Out) = 0
     [V2>=1,Out=1,V=0] 
* CE 69: fun1(V2,V,Out) = 0
     [V>=1,Out=1,V2=0] 
* CE 70: fun1(V2,V,Out) = 0
     [Out=2,V=0,V2=0] 
* CE 71: fun1(V2,V,Out) = 0+ fun1(W2,X2,Out)
     [X2>=0,W2>=0,X2+1=V,W2+1=V2] 

### Cost equations --> "Loop" of fun1/3 
* CEs [71] --> Loop 49 
* CEs [67] --> Loop 50 
* CEs [68] --> Loop 51 
* CEs [69] --> Loop 52 
* CEs [70] --> Loop 53 

#### Loops of fun1/3 
* Loop 49: fun1(V2,V,Out)->  fun1(V2',V',Out)
                  [V'>=0,V2'>=0,V'+1=V,V2'+1=V2] 
* Loop 50: fun1(V2,V,Out) [V>=0,V2>=0,Out=0] 
* Loop 51: fun1(V2,V,Out) [V2>=1,Out=1,V=0] 
* Loop 52: fun1(V2,V,Out) [V>=1,Out=1,V2=0] 
* Loop 53: fun1(V2,V,Out) [Out=2,V=0,V2=0] 

### Ranking functions of CR fun1(V2,V,Out) 
* RF of phase [49]: [V,V2]

#### Partial ranking functions of CR fun1(V2,V,Out) 
* Partial RF of phase [49]:
  - RF of loop [49:1]:
    V
    V2


### Resulting Chains:fun1(V2,V,Out) 
* [[49],53]
* [[49],52]
* [[49],51]
* [[49],50]
* [53]
* [52]
* [51]
* [50]


### Merging Chains  fun1/3 into  External patterns of execution 
* [[53]] --> 1 
* [[52]] --> 2 
* [[51]] --> 3 
* [[50],[50,[49]]] --> 4 
* [[52,[49]]] --> 5 
* [[51,[49]]] --> 6 
* [[53,[49]]] --> 7 


### Specialization of cost equations turing/5 
* CE 27 is refined into CE [72] 
* CE 18 is refined into CE [73,74,75,76,77,78,79] 
* CE 29 is refined into CE [80] 
* CE 28 is refined into CE [81] 
* CE 26 is refined into CE [82] 
* CE 19 is refined into CE [83,84,85,86] 
* CE 20 is refined into CE [87,88,89,90,91,92] 
* CE 21 is refined into CE [93,94,95] 
* CE 24 is refined into CE [96] 
* CE 22 is refined into CE [97] 
* CE 23 is refined into CE [98] 
* CE 25 is refined into CE [99] 


#### Refined cost equations turing/5 
* CE 72: turing(A,B,C,D,C) = 1
     [D>=0,C>=0,B>=0,A>=1] 
* CE 73: turing(V2,V,V3,V9,Out) = 1+ fun1(W9,X9,Y9):1
     [V9>=0,V3>=1,V>=0,V2>=2,Y9=2,X9=0,W9=0,Out=0] 
* CE 74: turing(V2,V,V3,V9,Out) = 1+ fun1(W9,X9,Y9):2
     [V2>=X9+2,X9>=1,V9>=0,V3>=1,V>=0,Y9=1,W9=0,Out=0] 
* CE 75: turing(V2,V,V3,V9,Out) = 1+ fun1(W9,X9,Y9):3
     [V3>=W9+1,W9>=1,V9>=0,V>=0,V2>=2,Y9=1,X9=0,Out=0] 
* CE 76: turing(V2,V,V3,V9,Out) = 1+ fun1(W9,X9,Y9):4
     [V2>=X9+2,V3>=W9+1,X9>=0,W9>=0,V9>=0,V>=0,Y9=0,Out=0] 
* CE 77: turing(V2,V,V3,V9,Out) = 1+ fun1(W9,X9,Y9):5
     [V2>=X9+2,X9>=W9+1,V3>=W9+1,W9>=1,V9>=0,V>=0,Y9=1,Out=0] 
* CE 78: turing(V2,V,V3,V9,Out) = 1+ fun1(W9,X9,Y9):6
     [W9>=X9+1,V2>=X9+2,V3>=W9+1,X9>=1,V9>=0,V>=0,Y9=1,Out=0] 
* CE 79: turing(V2,V,V3,V9,Out) = 1+ fun1(W9,W9,X9):7
     [V3>=W9+1,V2>=W9+2,W9>=1,V9>=0,V>=0,X9=2,Out=0] 
* CE 80: turing(V2,V,V3,V9,Out) = 0
     [V9>=0,V3>=0,V>=0,V2>=0,Out=0] 
* CE 81: turing(A,B,C,D,C) = 1
     [D>=0,C>=0,B>=0,A=0] 
* CE 82: turing(V2,V,V3,V9,Out) = 1+ turing(W9,V,X9,V9,Out)
     [V2+V3>=W9+X9+2,W9+X9+1>=V2,V2>=W9+2,W9>=0,V9>=0,V>=0] 
* CE 83: turing(V2,V,V3,V9,Out) = 1+ fun1(W9,X9,Y9):2+ turing(Z9,V,V3,V9,Out)
     [V2>=Z9+1,V2>=X9+2,Z9>=0,X9>=1,V9>=0,V3>=1,V>=0,Y9=1,W9=0] 
* CE 84: turing(V2,V,V3,V9,Out) = 1+ fun1(W9,X9,Y9):3+ turing(Z9,V,V3,V9,Out)
     [V2>=Z9+1,V3>=W9+1,Z9>=0,W9>=1,V9>=0,V>=0,V2>=2,Y9=1,X9=0] 
* CE 85: turing(V2,V,V3,V9,Out) = 1+ fun1(W9,X9,Y9):5+ turing(Z9,V,V3,V9,Out)
     [V2>=Z9+1,V2>=X9+2,X9>=W9+1,V3>=W9+1,Z9>=0,W9>=1,V9>=0,V>=0,Y9=1] 
* CE 86: turing(V2,V,V3,V9,Out) = 1+ fun1(W9,X9,Y9):6+ turing(Z9,V,V3,V9,Out)
     [V2>=Z9+1,W9>=X9+1,V2>=X9+2,V3>=W9+1,Z9>=0,X9>=1,V9>=0,V>=0,Y9=1] 
* CE 87: turing(V2,V,V3,V9,Out) = 1+ fun1(W9,X9,Y9):1+ lookup(Z9,V9,V9):1+ turing(V9,V,V3,V9,Out)
     [V9>=0,V3>=1,V>=0,V2>=2,Z9=0,Y9=2,X9=0,W9=0] 
* CE 88: turing(V2,V,V3,V9,Out) = 1+ fun1(W9,X9,Y9):1+ lookup(Z9,V9,A10):2+ turing(B10,V,V3,V9,Out)
     [V2>=Z9+2,V9>=0,Z9>=0,V3>=1,V>=0,B10=0,A10=0,Y9=2,X9=0,W9=0] 
* CE 89: turing(V2,V,V3,V9,Out) = 1+ fun1(W9,X9,Y9):1+ lookup(Z9,V9,A10):3+ turing(A10,V,V3,V9,Out)
     [V9>=Z9+A10,V2>=Z9+2,A10>=0,Z9>=1,V3>=1,V>=0,Y9=2,X9=0,W9=0] 
* CE 90: turing(V2,V,V3,V9,Out) = 1+ fun1(W9,W9,X9):7+ lookup(Y9,V9,V9):1+ turing(V9,V,V3,V9,Out)
     [V3>=W9+1,V2>=W9+2,V9>=0,W9>=1,V>=0,Y9=0,X9=2] 
* CE 91: turing(V2,V,V3,V9,Out) = 1+ fun1(W9,W9,X9):7+ lookup(Y9,V9,Z9):2+ turing(A10,V,V3,V9,Out)
     [V2>=Y9+2,V3>=W9+1,V2>=W9+2,V9>=0,Y9>=0,W9>=1,V>=0,A10=0,Z9=0,X9=2] 
* CE 92: turing(V2,V,V3,V9,Out) = 1+ fun1(W9,W9,X9):7+ lookup(Y9,V9,Z9):3+ turing(Z9,V,V3,V9,Out)
     [V9>=Y9+Z9,V2>=Y9+2,V3>=W9+1,V2>=W9+2,Z9>=0,Y9>=1,W9>=1,V>=0,X9=2] 
* CE 93: turing(V2,V,V3,V9,Out) = 1+ lookup(W9,V9,V9):1+ turing(V9,V,V3,V9,Out)
     [V9>=0,V3>=0,V>=0,V2>=2,W9=0] 
* CE 94: turing(V2,V,V3,V9,Out) = 1+ lookup(W9,V9,X9):2+ turing(Y9,V,V3,V9,Out)
     [V2>=W9+2,V9>=0,W9>=0,V3>=0,V>=0,Y9=0,X9=0] 
* CE 95: turing(V2,V,V3,V9,Out) = 1+ lookup(W9,V9,X9):3+ turing(X9,V,V3,V9,Out)
     [V9>=W9+X9,V2>=W9+2,X9>=0,W9>=1,V3>=0,V>=0] 
* CE 96: turing(V2,V,V3,V9,Out) = 1+ turing(W9,X9,Y9,V9,Out)
     [V+V3>=Y9,Y9>=V3+1,W9>=0,V9>=0,V3>=0,V+V3=X9+Y9,W9+2=V2] 
* CE 97: turing(V2,V,V3,V9,Out) = 1+ turing(W9,X9,Y9,V9,Out)
     [X9+Y9>=V3,V3>=Y9+1,Y9>=0,W9>=0,V9>=0,V+V3=X9+Y9,W9+3=V2] 
* CE 98: turing(V2,V,V3,V9,Out) = 1+ turing(W9,X9,Y9,V9,Out)
     [W9>=0,V9>=0,V>=0,V+1=X9,W9+3=V2,Y9=0,V3=0] 
* CE 99: turing(V2,V,V3,V9,Out) = 1+ turing(W9,X9,Y9,V9,Out)
     [W9>=0,V9>=0,V3>=0,V3+1=Y9,W9+2=V2,X9=0,V=0] 

### Cost equations --> "Loop" of turing/5 
* CEs [82] --> Loop 54 
* CEs [83] --> Loop 55 
* CEs [89,92,95] --> Loop 56 
* CEs [84,85,86] --> Loop 57 
* CEs [87,90,93] --> Loop 58 
* CEs [96] --> Loop 59 
* CEs [97] --> Loop 60 
* CEs [88,91,94] --> Loop 61 
* CEs [98] --> Loop 62 
* CEs [99] --> Loop 63 
* CEs [72] --> Loop 64 
* CEs [73,74,75,76,77,78,79,80] --> Loop 65 
* CEs [81] --> Loop 66 

#### Loops of turing/5 
* Loop 54: turing(V2,V,V3,V9,Out)->  turing(V2',V,V3',V9,Out)
                  [V2+V3>=V2'+V3'+2,V2'+V3'+1>=V2,V2>=V2'+2,V2'>=0,V9>=0,V>=0] 
* Loop 55: turing(V2,V,V3,V9,Out)->  turing(V2',V,V3,V9,Out)
                  [V2>=V2'+1,V2'>=0,V9>=0,V3>=1,V>=0,V2>=3] 
* Loop 56: turing(V2,V,V3,V9,Out)->  turing(V2',V,V3,V9,Out)
                  [V9>=V2'+1,V2'>=0,V3>=0,V>=0,V2>=3] 
* Loop 57: turing(V2,V,V3,V9,Out)->  turing(V2',V,V3,V9,Out)
                  [V2>=V2'+1,V2'>=0,V9>=0,V3>=2,V>=0,V2>=2] 
* Loop 58: turing(V2,V,V3,V9,Out)->  turing(V9,V,V3,V9,Out)
                  [V9>=0,V3>=0,V>=0,V2>=2] 
* Loop 59: turing(V2,V,V3,V9,Out)->  turing(V2',V',V3',V9,Out)
                  [V>=V'+1,V'>=0,V9>=0,V3>=0,V2>=2,V'+V3'=V+V3,V2=V2'+2] 
* Loop 60: turing(V2,V,V3,V9,Out)->  turing(V2',V',V3',V9,Out)
                  [V+V3>=V',V'>=V+1,V9>=0,V>=0,V2>=3,V+V3=V'+V3',V2=V2'+3] 
* Loop 61: turing(V2,V,V3,V9,Out)->  turing(V2',V,V3,V9,Out)
                  [V9>=0,V3>=0,V>=0,V2>=2,V2'=0] 
* Loop 62: turing(V2,V,V3,V9,Out)->  turing(V2',V',V3',V9,Out)
                  [V9>=0,V>=0,V2>=3,V+1=V',V2=V2'+3,V3'=0,V3=0] 
* Loop 63: turing(V2,V,V3,V9,Out)->  turing(V2',V',V3',V9,Out)
                  [V9>=0,V3>=0,V2>=2,V3+1=V3',V2=V2'+2,V'=0,V=0] 
* Loop 64: turing(A,B,C,D,C) [D>=0,C>=0,B>=0,A>=1] 
* Loop 65: turing(V2,V,V3,V9,Out) [V9>=0,V3>=0,V>=0,V2>=0,Out=0] 
* Loop 66: turing(A,B,C,D,C) [D>=0,C>=0,B>=0,A=0] 

### Ranking functions of CR turing(V2,V,V3,V9,Out) 

#### Partial ranking functions of CR turing(V2,V,V3,V9,Out) 
* Partial RF of phase [54,55,56,57,58,59,60,62,63]:
  - RF of loop [54:1]:
    V2/2+V3/2-1 depends on loops [56:1,58:1,59:1] 
  - RF of loop [54:1,59:1,63:1]:
    V2/2-1/2 depends on loops [56:1,58:1] 
  - RF of loop [55:1]:
    V2-2 depends on loops [56:1,58:1] 
  - RF of loop [57:1]:
    V2-1 depends on loops [56:1,58:1] 
  - RF of loop [59:1]:
    V depends on loops [60:1,62:1] 
  - RF of loop [60:1]:
    V3 depends on loops [54:1,59:1,63:1] 
  - RF of loop [60:1,62:1]:
    V2/3-2/3 depends on loops [56:1,58:1] 


### Resulting Chains:turing(V2,V,V3,V9,Out) 
* [[54,55,56,57,58,59,60,62,63]]...
* [[54,55,56,57,58,59,60,62,63],66]
* [[54,55,56,57,58,59,60,62,63],65]
* [[54,55,56,57,58,59,60,62,63],64]
* [[54,55,56,57,58,59,60,62,63],61,66]
* [[54,55,56,57,58,59,60,62,63],61,65]
* [66]
* [65]
* [64]
* [61,66]
* [61,65]


### Merging Chains  turing/5 into  External patterns of execution 
* [[66]] --> 1 
* [[65,61],[65],[65,61,[54,55,56,57,58,59,60,62,63]],[65,[54,55,56,57,58,59,60,62,63]]] --> 2 
* [[66,61],[64]] --> 3 
* [[66,61,[54,55,56,57,58,59,60,62,63]],[64,[54,55,56,57,58,59,60,62,63]],[66,[54,55,56,57,58,59,60,62,63]]] --> 4 
* [[[54,55,56,57,58,59,60,62,63]]] --> 5 


### Specialization of cost equations getGoto/2 
* CE 57 is refined into CE [100] 
* CE 58 is refined into CE [101] 


#### Refined cost equations getGoto/2 
* CE 100: getGoto(V2,Out) = 1
     [Out>=0,Out+1=V2] 
* CE 101: getGoto(V2,Out) = 0
     [V2>=0,Out=0] 

### Cost equations --> "Loop" of getGoto/2 
* CEs [100] --> Loop 67 
* CEs [101] --> Loop 68 

#### Loops of getGoto/2 
* Loop 67: getGoto(V2,Out) [V2>=1,V2=Out+1] 
* Loop 68: getGoto(V2,Out) [V2>=0,Out=0] 

### Ranking functions of CR getGoto(V2,Out) 

#### Partial ranking functions of CR getGoto(V2,Out) 


### Resulting Chains:getGoto(V2,Out) 
* [68]
* [67]


### Merging Chains  getGoto/2 into  External patterns of execution 
* [[68]] --> 1 
* [[67]] --> 2 


### Specialization of cost equations getGotoFirst/2 
* CE 55 is refined into CE [102] 
* CE 56 is refined into CE [103] 


#### Refined cost equations getGotoFirst/2 
* CE 102: getGotoFirst(V2,Out) = 1
     [V2>=Out+1,Out>=0] 
* CE 103: getGotoFirst(V2,Out) = 0
     [V2>=0,Out=0] 

### Cost equations --> "Loop" of getGotoFirst/2 
* CEs [102] --> Loop 69 
* CEs [103] --> Loop 70 

#### Loops of getGotoFirst/2 
* Loop 69: getGotoFirst(V2,Out) [V2>=Out+1,Out>=0] 
* Loop 70: getGotoFirst(V2,Out) [V2>=0,Out=0] 

### Ranking functions of CR getGotoFirst(V2,Out) 

#### Partial ranking functions of CR getGotoFirst(V2,Out) 


### Resulting Chains:getGotoFirst(V2,Out) 
* [70]
* [69]


### Merging Chains  getGotoFirst/2 into  External patterns of execution 
* [[70]] --> 1 
* [[69]] --> 2 


### Specialization of cost equations getGotoSecond/2 
* CE 53 is refined into CE [104] 
* CE 54 is refined into CE [105] 


#### Refined cost equations getGotoSecond/2 
* CE 104: getGotoSecond(V2,Out) = 1
     [V2>=Out+1,Out>=0] 
* CE 105: getGotoSecond(V2,Out) = 0
     [V2>=0,Out=0] 

### Cost equations --> "Loop" of getGotoSecond/2 
* CEs [104] --> Loop 71 
* CEs [105] --> Loop 72 

#### Loops of getGotoSecond/2 
* Loop 71: getGotoSecond(V2,Out) [V2>=Out+1,Out>=0] 
* Loop 72: getGotoSecond(V2,Out) [V2>=0,Out=0] 

### Ranking functions of CR getGotoSecond(V2,Out) 

#### Partial ranking functions of CR getGotoSecond(V2,Out) 


### Resulting Chains:getGotoSecond(V2,Out) 
* [72]
* [71]


### Merging Chains  getGotoSecond/2 into  External patterns of execution 
* [[72]] --> 1 
* [[71]] --> 2 


### Specialization of cost equations getWrite/2 
* CE 51 is refined into CE [106] 
* CE 52 is refined into CE [107] 


#### Refined cost equations getWrite/2 
* CE 106: getWrite(V2,Out) = 1
     [Out>=0,Out+1=V2] 
* CE 107: getWrite(V2,Out) = 0
     [V2>=0,Out=0] 

### Cost equations --> "Loop" of getWrite/2 
* CEs [106] --> Loop 73 
* CEs [107] --> Loop 74 

#### Loops of getWrite/2 
* Loop 73: getWrite(V2,Out) [V2>=1,V2=Out+1] 
* Loop 74: getWrite(V2,Out) [V2>=0,Out=0] 

### Ranking functions of CR getWrite(V2,Out) 

#### Partial ranking functions of CR getWrite(V2,Out) 


### Resulting Chains:getWrite(V2,Out) 
* [74]
* [73]


### Merging Chains  getWrite/2 into  External patterns of execution 
* [[74]] --> 1 
* [[73]] --> 2 


### Specialization of cost equations instrConstrCheck/3 
* CE 38 is refined into CE [108] 
* CE 39 is refined into CE [109] 
* CE 43 is refined into CE [110] 
* CE 40 is refined into CE [111] 
* CE 41 is refined into CE [112] 
* CE 42 is refined into CE [113] 


#### Refined cost equations instrConstrCheck/3 
* CE 108: instrConstrCheck(V2,V,Out) = 1
     [V>=1,V2>=1,Out=2] 
* CE 109: instrConstrCheck(V2,V,Out) = 1
     [V>=1,V2>=1,Out=1] 
* CE 110: instrConstrCheck(V2,V,Out) = 0
     [V>=0,V2>=0,Out=0] 
* CE 111: instrConstrCheck(V2,V,Out) = 1
     [V2>=1,Out=1,V=0] 
* CE 112: instrConstrCheck(V2,V,Out) = 1
     [V>=1,Out=1,V2=0] 
* CE 113: instrConstrCheck(V2,V,Out) = 1
     [Out=2,V=0,V2=0] 

### Cost equations --> "Loop" of instrConstrCheck/3 
* CEs [108] --> Loop 75 
* CEs [109] --> Loop 76 
* CEs [110] --> Loop 77 
* CEs [111] --> Loop 78 
* CEs [112] --> Loop 79 
* CEs [113] --> Loop 80 

#### Loops of instrConstrCheck/3 
* Loop 75: instrConstrCheck(V2,V,Out) [V>=1,V2>=1,Out=2] 
* Loop 76: instrConstrCheck(V2,V,Out) [V>=1,V2>=1,Out=1] 
* Loop 77: instrConstrCheck(V2,V,Out) [V>=0,V2>=0,Out=0] 
* Loop 78: instrConstrCheck(V2,V,Out) [V2>=1,Out=1,V=0] 
* Loop 79: instrConstrCheck(V2,V,Out) [V>=1,Out=1,V2=0] 
* Loop 80: instrConstrCheck(V2,V,Out) [Out=2,V=0,V2=0] 

### Ranking functions of CR instrConstrCheck(V2,V,Out) 

#### Partial ranking functions of CR instrConstrCheck(V2,V,Out) 


### Resulting Chains:instrConstrCheck(V2,V,Out) 
* [80]
* [79]
* [78]
* [77]
* [76]
* [75]


### Merging Chains  instrConstrCheck/3 into  External patterns of execution 
* [[80]] --> 1 
* [[79]] --> 2 
* [[78]] --> 3 
* [[77]] --> 4 
* [[76]] --> 5 
* [[75]] --> 6 


### Specialization of cost equations instrsConstrCheck/3 
* CE 33 is refined into CE [114] 
* CE 37 is refined into CE [115] 
* CE 34 is refined into CE [116] 
* CE 35 is refined into CE [117] 
* CE 36 is refined into CE [118] 


#### Refined cost equations instrsConstrCheck/3 
* CE 114: instrsConstrCheck(V2,V,Out) = 1
     [V>=1,V2>=1,Out=2] 
* CE 115: instrsConstrCheck(V2,V,Out) = 0
     [V>=0,V2>=0,Out=0] 
* CE 116: instrsConstrCheck(V2,V,Out) = 1
     [V2>=1,Out=1,V=0] 
* CE 117: instrsConstrCheck(V2,V,Out) = 1
     [V>=1,Out=1,V2=0] 
* CE 118: instrsConstrCheck(V2,V,Out) = 1
     [Out=2,V=0,V2=0] 

### Cost equations --> "Loop" of instrsConstrCheck/3 
* CEs [114] --> Loop 81 
* CEs [115] --> Loop 82 
* CEs [116] --> Loop 83 
* CEs [117] --> Loop 84 
* CEs [118] --> Loop 85 

#### Loops of instrsConstrCheck/3 
* Loop 81: instrsConstrCheck(V2,V,Out) [V>=1,V2>=1,Out=2] 
* Loop 82: instrsConstrCheck(V2,V,Out) [V>=0,V2>=0,Out=0] 
* Loop 83: instrsConstrCheck(V2,V,Out) [V2>=1,Out=1,V=0] 
* Loop 84: instrsConstrCheck(V2,V,Out) [V>=1,Out=1,V2=0] 
* Loop 85: instrsConstrCheck(V2,V,Out) [Out=2,V=0,V2=0] 

### Ranking functions of CR instrsConstrCheck(V2,V,Out) 

#### Partial ranking functions of CR instrsConstrCheck(V2,V,Out) 


### Resulting Chains:instrsConstrCheck(V2,V,Out) 
* [85]
* [84]
* [83]
* [82]
* [81]


### Merging Chains  instrsConstrCheck/3 into  External patterns of execution 
* [[85]] --> 1 
* [[84]] --> 2 
* [[83]] --> 3 
* [[82]] --> 4 
* [[81]] --> 5 


### Specialization of cost equations instrsFirst/2 
* CE 49 is refined into CE [119] 
* CE 50 is refined into CE [120] 


#### Refined cost equations instrsFirst/2 
* CE 119: instrsFirst(V2,Out) = 1
     [V2>=Out+1,Out>=0] 
* CE 120: instrsFirst(V2,Out) = 0
     [V2>=0,Out=0] 

### Cost equations --> "Loop" of instrsFirst/2 
* CEs [119] --> Loop 86 
* CEs [120] --> Loop 87 

#### Loops of instrsFirst/2 
* Loop 86: instrsFirst(V2,Out) [V2>=Out+1,Out>=0] 
* Loop 87: instrsFirst(V2,Out) [V2>=0,Out=0] 

### Ranking functions of CR instrsFirst(V2,Out) 

#### Partial ranking functions of CR instrsFirst(V2,Out) 


### Resulting Chains:instrsFirst(V2,Out) 
* [87]
* [86]


### Merging Chains  instrsFirst/2 into  External patterns of execution 
* [[87]] --> 1 
* [[86]] --> 2 


### Specialization of cost equations instrsSecond/2 
* CE 47 is refined into CE [121] 
* CE 48 is refined into CE [122] 


#### Refined cost equations instrsSecond/2 
* CE 121: instrsSecond(V2,Out) = 1
     [V2>=Out+1,Out>=0] 
* CE 122: instrsSecond(V2,Out) = 0
     [V2>=0,Out=0] 

### Cost equations --> "Loop" of instrsSecond/2 
* CEs [121] --> Loop 88 
* CEs [122] --> Loop 89 

#### Loops of instrsSecond/2 
* Loop 88: instrsSecond(V2,Out) [V2>=Out+1,Out>=0] 
* Loop 89: instrsSecond(V2,Out) [V2>=0,Out=0] 

### Ranking functions of CR instrsSecond(V2,Out) 

#### Partial ranking functions of CR instrsSecond(V2,Out) 


### Resulting Chains:instrsSecond(V2,Out) 
* [89]
* [88]


### Merging Chains  instrsSecond/2 into  External patterns of execution 
* [[89]] --> 1 
* [[88]] --> 2 


### Specialization of cost equations notEmpty/2 
* CE 44 is refined into CE [123] 
* CE 46 is refined into CE [124] 
* CE 45 is refined into CE [125] 


#### Refined cost equations notEmpty/2 
* CE 123: notEmpty(V2,Out) = 1
     [V2>=1,Out=2] 
* CE 124: notEmpty(V2,Out) = 0
     [V2>=0,Out=0] 
* CE 125: notEmpty(V2,Out) = 1
     [Out=1,V2=0] 

### Cost equations --> "Loop" of notEmpty/2 
* CEs [123] --> Loop 90 
* CEs [124] --> Loop 91 
* CEs [125] --> Loop 92 

#### Loops of notEmpty/2 
* Loop 90: notEmpty(V2,Out) [V2>=1,Out=2] 
* Loop 91: notEmpty(V2,Out) [V2>=0,Out=0] 
* Loop 92: notEmpty(V2,Out) [Out=1,V2=0] 

### Ranking functions of CR notEmpty(V2,Out) 

#### Partial ranking functions of CR notEmpty(V2,Out) 


### Resulting Chains:notEmpty(V2,Out) 
* [92]
* [91]
* [90]


### Merging Chains  notEmpty/2 into  External patterns of execution 
* [[92]] --> 1 
* [[91]] --> 2 
* [[90]] --> 3 


### Specialization of cost equations start/5 
* CE 4 is refined into CE [126,127,128,129,130,131,132,133,134,135,136,137] 
* CE 2 is refined into CE [138] 
* CE 3 is refined into CE [139,140,141,142,143] 
* CE 5 is refined into CE [144,145,146,147,148] 
* CE 6 is refined into CE [149,150,151] 
* CE 7 is refined into CE [152,153,154,155,156] 
* CE 8 is refined into CE [157,158,159,160,161,162] 
* CE 9 is refined into CE [163,164,165] 
* CE 10 is refined into CE [166,167] 
* CE 11 is refined into CE [168,169] 
* CE 12 is refined into CE [170,171] 
* CE 13 is refined into CE [172,173] 
* CE 14 is refined into CE [174,175] 
* CE 15 is refined into CE [176,177] 
* CE 16 is refined into CE [178,179,180,181,182] 
* CE 17 is refined into CE [183,184,185,186,187,188,189] 


#### Refined cost equations start/5 
* CE 126: start(V2,V,V3,V9,V128) = 0+ lookup(W128,X128,Y128):1+ turing(Z128,V3,V9,A129,V9):1
     [V9>=0,V3>=0,V>=2,A129=0,Z128=0,Y128=0,X128=0,W128=0,V128=0,V2=2] 
* CE 127: start(V2,V,V3,V9,V128) = 0+ lookup(W128,V128,V128):1+ turing(V128,V3,V9,V128,X128):2
     [V9>=0,V3>=0,V128>=0,V>=2,X128=0,W128=0,V2=2] 
* CE 128: start(V2,V,V3,V9,V128) = 0+ lookup(W128,V128,V128):1+ turing(V128,V3,V9,V128,V9):3
     [V9>=0,V3>=0,V128>=1,V>=2,W128=0,V2=2] 
* CE 129: start(V2,V,V3,V9,V128) = 0+ lookup(W128,V128,V128):1+ turing(V128,V3,V9,V128,X128):4
     [X128>=0,V9>=0,V3>=0,V128>=2,V>=2,W128=0,V2=2] 
* CE 130: start(V2,V,V3,V9,V128) = 0+ lookup(W128,V128,V128):1+ turing(V128,V3,V9,V128,X128):5
     [V9>=0,V3>=0,V128>=2,V>=2,W128=0,V2=2] 
* CE 131: start(V2,V,V3,V9,V128) = 0+ lookup(W128,V128,X128):2+ turing(Y128,V3,V9,V128,V9):1
     [V>=W128+2,V9>=0,V128>=0,V3>=0,W128>=0,Y128=0,X128=0,V2=2] 
* CE 132: start(V2,V,V3,V9,V128) = 0+ lookup(W128,V128,X128):2+ turing(Y128,V3,V9,V128,Z128):2
     [V>=W128+2,V128>=0,V9>=0,V3>=0,W128>=0,Z128=0,Y128=0,X128=0,V2=2] 
* CE 133: start(V2,V,V3,V9,V128) = 0+ lookup(W128,V128,X128):3+ turing(Y128,V3,V9,V128,V9):1
     [V128>=W128,V>=W128+2,V9>=0,V3>=0,W128>=1,Y128=0,X128=0,V2=2] 
* CE 134: start(V2,V,V3,V9,V128) = 0+ lookup(W128,V128,X128):3+ turing(X128,V3,V9,V128,Y128):2
     [V128>=W128+X128,V>=W128+2,V9>=0,V3>=0,X128>=0,W128>=1,Y128=0,V2=2] 
* CE 135: start(V2,V,V3,V9,V128) = 0+ lookup(W128,V128,X128):3+ turing(X128,V3,V9,V128,V9):3
     [V128>=W128+X128,V>=W128+2,V9>=0,V3>=0,X128>=1,W128>=1,V2=2] 
* CE 136: start(V2,V,V3,V9,V128) = 0+ lookup(W128,V128,X128):3+ turing(X128,V3,V9,V128,Y128):4
     [V128>=W128+X128,V>=W128+2,Y128>=0,V9>=0,V3>=0,X128>=2,W128>=1,V2=2] 
* CE 137: start(V2,V,V3,V9,V128) = 0+ lookup(W128,V128,X128):3+ turing(X128,V3,V9,V128,Y128):5
     [V128>=W128+X128,V>=W128+2,V9>=0,V3>=0,X128>=2,W128>=1,V2=2] 
* CE 138: start(V2,V,V3,V9,V128) = 0
     [V128>=0,V9>=0,V3>=0,V>=0,V2>=0] 
* CE 139: start(V2,V,V3,V9,V128) = 0+ turing(W128,V3,V9,V128,V9):1
     [V9>=0,V128>=0,V3>=0,V>=1,W128=0,V2=1] 
* CE 140: start(V2,V,V3,V9,V128) = 0+ turing(W128,V3,V9,V128,X128):2
     [V>=W128+1,V128>=0,V9>=0,V3>=0,W128>=0,X128=0,V2=1] 
* CE 141: start(V2,V,V3,V9,V128) = 0+ turing(W128,V3,V9,V128,V9):3
     [V>=W128+1,V9>=0,V128>=0,V3>=0,W128>=1,V2=1] 
* CE 142: start(V2,V,V3,V9,V128) = 0+ turing(W128,V3,V9,V128,X128):4
     [V>=W128+1,X128>=0,V128>=0,V9>=0,V3>=0,W128>=2,V2=1] 
* CE 143: start(V2,V,V3,V9,V128) = 0+ turing(W128,V3,V9,V128,X128):5
     [V>=W128+1,V128>=0,V9>=0,V3>=0,W128>=2,V2=1] 
* CE 144: start(V2,V,V3,V9,V128) = 0+ turing(W128,V,V3,V9,V3):1
     [V3>=0,V9>=0,V>=0,W128=0,V2=0] 
* CE 145: start(V2,V,V3,V9,V128) = 0+ turing(V2,V,V3,V9,W128):2
     [V9>=0,V3>=0,V>=0,V2>=0,W128=0] 
* CE 146: start(V2,V,V3,V9,V128) = 0+ turing(V2,V,V3,V9,V3):3
     [V3>=0,V9>=0,V>=0,V2>=1] 
* CE 147: start(V2,V,V3,V9,V128) = 0+ turing(V2,V,V3,V9,W128):4
     [W128>=0,V9>=0,V3>=0,V>=0,V2>=2] 
* CE 148: start(V2,V,V3,V9,V128) = 0+ turing(V2,V,V3,V9,W128):5
     [V9>=0,V3>=0,V>=0,V2>=2] 
* CE 149: start(V2,V,V3,V9,V128) = 0+ lookup(W128,V,V):1
     [V>=0,W128=0,V2=0] 
* CE 150: start(V2,V,V3,V9,V128) = 0+ lookup(V2,V,W128):2
     [V>=0,V2>=0,W128=0] 
* CE 151: start(V2,V,V3,V9,V128) = 0+ lookup(V2,V,W128):3
     [V>=V2+W128,W128>=0,V2>=1] 
* CE 152: start(V2,V,V3,V9,V128) = 0+ instrsConstrCheck(W128,X128,Y128):1
     [Y128=2,X128=0,W128=0,V=0,V2=0] 
* CE 153: start(V2,V,V3,V9,V128) = 0+ instrsConstrCheck(W128,V,X128):2
     [V>=1,X128=1,W128=0,V2=0] 
* CE 154: start(V2,V,V3,V9,V128) = 0+ instrsConstrCheck(V2,W128,X128):3
     [V2>=1,X128=1,W128=0,V=0] 
* CE 155: start(V2,V,V3,V9,V128) = 0+ instrsConstrCheck(V2,V,W128):4
     [V>=0,V2>=0,W128=0] 
* CE 156: start(V2,V,V3,V9,V128) = 0+ instrsConstrCheck(V2,V,W128):5
     [V>=1,V2>=1,W128=2] 
* CE 157: start(V2,V,V3,V9,V128) = 0+ instrConstrCheck(W128,X128,Y128):1
     [Y128=2,X128=0,W128=0,V=0,V2=0] 
* CE 158: start(V2,V,V3,V9,V128) = 0+ instrConstrCheck(W128,V,X128):2
     [V>=1,X128=1,W128=0,V2=0] 
* CE 159: start(V2,V,V3,V9,V128) = 0+ instrConstrCheck(V2,W128,X128):3
     [V2>=1,X128=1,W128=0,V=0] 
* CE 160: start(V2,V,V3,V9,V128) = 0+ instrConstrCheck(V2,V,W128):4
     [V>=0,V2>=0,W128=0] 
* CE 161: start(V2,V,V3,V9,V128) = 0+ instrConstrCheck(V2,V,W128):5
     [V>=1,V2>=1,W128=1] 
* CE 162: start(V2,V,V3,V9,V128) = 0+ instrConstrCheck(V2,V,W128):6
     [V>=1,V2>=1,W128=2] 
* CE 163: start(V2,V,V3,V9,V128) = 0+ notEmpty(W128,X128):1
     [X128=1,W128=0,V2=0] 
* CE 164: start(V2,V,V3,V9,V128) = 0+ notEmpty(V2,W128):2
     [V2>=0,W128=0] 
* CE 165: start(V2,V,V3,V9,V128) = 0+ notEmpty(V2,W128):3
     [V2>=1,W128=2] 
* CE 166: start(V2,V,V3,V9,V128) = 0+ instrsSecond(V2,W128):1
     [V2>=0,W128=0] 
* CE 167: start(V2,V,V3,V9,V128) = 0+ instrsSecond(V2,W128):2
     [V2>=W128+1,W128>=0] 
* CE 168: start(V2,V,V3,V9,V128) = 0+ instrsFirst(V2,W128):1
     [V2>=0,W128=0] 
* CE 169: start(V2,V,V3,V9,V128) = 0+ instrsFirst(V2,W128):2
     [V2>=W128+1,W128>=0] 
* CE 170: start(V2,V,V3,V9,V128) = 0+ getWrite(V2,W128):1
     [V2>=0,W128=0] 
* CE 171: start(V2,V,V3,V9,V128) = 0+ getWrite(W128,X128):2
     [X128>=0,X128+1=W128,X128+1=V2] 
* CE 172: start(V2,V,V3,V9,V128) = 0+ getGotoSecond(V2,W128):1
     [V2>=0,W128=0] 
* CE 173: start(V2,V,V3,V9,V128) = 0+ getGotoSecond(V2,W128):2
     [V2>=W128+1,W128>=0] 
* CE 174: start(V2,V,V3,V9,V128) = 0+ getGotoFirst(V2,W128):1
     [V2>=0,W128=0] 
* CE 175: start(V2,V,V3,V9,V128) = 0+ getGotoFirst(V2,W128):2
     [V2>=W128+1,W128>=0] 
* CE 176: start(V2,V,V3,V9,V128) = 0+ getGoto(V2,W128):1
     [V2>=0,W128=0] 
* CE 177: start(V2,V,V3,V9,V128) = 0+ getGoto(W128,X128):2
     [X128>=0,X128+1=W128,X128+1=V2] 
* CE 178: start(V2,V,V3,V9,V128) = 1+ turing(W128,X128,V,Y128,V):1
     [V>=0,Y128=0,X128=0,W128=0,V2=0] 
* CE 179: start(V2,V,V3,V9,V128) = 1+ turing(V2,W128,V,V2,X128):2
     [V>=0,V2>=0,X128=0,W128=0] 
* CE 180: start(V2,V,V3,V9,V128) = 1+ turing(V2,W128,V,V2,V):3
     [V>=0,V2>=1,W128=0] 
* CE 181: start(V2,V,V3,V9,V128) = 1+ turing(V2,W128,V,V2,X128):4
     [X128>=0,V>=0,V2>=2,W128=0] 
* CE 182: start(V2,V,V3,V9,V128) = 1+ turing(V2,W128,V,V2,X128):5
     [V>=0,V2>=2,W128=0] 
* CE 183: start(V2,V,V3,V9,V128) = 0+ fun1(W128,X128,Y128):1
     [Y128=2,X128=0,W128=0,V=0,V2=0] 
* CE 184: start(V2,V,V3,V9,V128) = 0+ fun1(W128,V,X128):2
     [V>=1,X128=1,W128=0,V2=0] 
* CE 185: start(V2,V,V3,V9,V128) = 0+ fun1(V2,W128,X128):3
     [V2>=1,X128=1,W128=0,V=0] 
* CE 186: start(V2,V,V3,V9,V128) = 0+ fun1(V2,V,W128):4
     [V>=0,V2>=0,W128=0] 
* CE 187: start(V2,V,V3,V9,V128) = 0+ fun1(V2,V,W128):5
     [V>=V2+1,V2>=1,W128=1] 
* CE 188: start(V2,V,V3,V9,V128) = 0+ fun1(V2,V,W128):6
     [V2>=V+1,V>=1,W128=1] 
* CE 189: start(A,A,B,C,D) = 0+ fun1(A,A,E):7
     [A>=1,E=2] 

### Cost equations --> "Loop" of start/5 
* CEs [189] --> Loop 93 
* CEs [154,159,185] --> Loop 94 
* CEs [126,127,128,129,131,132,133,134,135,136] --> Loop 95 
* CEs [139,140,141,142] --> Loop 96 
* CEs [138,144,145,146,147,149,150,151,152,153,155,156,157,158,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,183,184,186,187,188] --> Loop 97 
* CEs [130,137,148,182] --> Loop 98 
* CEs [143] --> Loop 99 

#### Loops of start/5 
* Loop 93: start(A,A,B,C,D) [A>=1] 
* Loop 94: start(V2,V,V3,V9,V128) [V2>=1,V=0] 
* Loop 95: start(V2,V,V3,V9,V128) [V128>=0,V9>=0,V3>=0,V>=2,V2=2] 
* Loop 96: start(V2,V,V3,V9,V128) [V128>=0,V9>=0,V3>=0,V>=1,V2=1] 
* Loop 97: start(V2,V,V3,V9,V128) [V2>=0] 
* Loop 98: start(V2,V,V3,V9,V128) [V>=0,V2>=2] 
* Loop 99: start(V2,V,V3,V9,V128) [V128>=0,V9>=0,V3>=0,V>=3,V2=1] 

### Ranking functions of CR start(V2,V,V3,V9,V128) 

#### Partial ranking functions of CR start(V2,V,V3,V9,V128) 


### Resulting Chains:start(V2,V,V3,V9,V128) 
* [99]...
* [98]...
* [97]
* [96]
* [95]
* [94]
* [93]


### Merging Chains  start/5 into  External patterns of execution 
* [[96],[97]] --> 1 
* [[95]] --> 2 
* [[94]] --> 3 
* [[93]] --> 4 
* [[99]] --> 5 
* [[98]] --> 6 


Computing Bounds
=====================================

#### Cost of loops [46] 

 * loop 46:lookup(V2,V,Out) -> [lookup(V2',V',Out')] 
1
#### Cost of phase [46]:lookup(V2,V,Out) -> [lookup(V2',V',Out')] 
1*it(46)+0
  Such that:it(46) =< V2
it(46) =< V2-V2'
it(46) =< V
it(46) =< V-V'

#### Cost of phase [46]:lookup(V2,V,Out) -> [lookup(V2',V',Out')] 
1*it(46)+0
  Such that:it(46) =< V2
it(46) =< V2-V2'
it(46) =< V
it(46) =< V-V'

#### Cost of chains of lookup(V2,V,Out):
* Chain [[46],48]: 1*it(46)+1
  Such that:it(46) =< V2

  with precondition: [V2>=1,Out>=0,V>=Out+V2] 

* Chain [[46],47]: 1*it(46)+0
  Such that:it(46) =< V

  with precondition: [Out=0,V2>=1,V>=1] 

* Chain [48]: 1
  with precondition: [V2=0,V=Out,V>=0] 

* Chain [47]: 0
  with precondition: [Out=0,V2>=0,V>=0] 


#### Cost of loops [49] 

 * loop 49:fun1(V2,V,Out) -> [fun1(V2',V',Out')] 
0
#### Cost of phase [49]:fun1(V2,V,Out) -> [fun1(V2',V',Out')] 
0
#### Cost of phase [49]:fun1(V2,V,Out) -> [fun1(V2',V',Out')] 
0
#### Cost of phase [49]:fun1(V2,V,Out) -> [fun1(V2',V',Out')] 
0
#### Cost of phase [49]:fun1(V2,V,Out) -> [fun1(V2',V',Out')] 
0
#### Cost of chains of fun1(V2,V,Out):
* Chain [[49],53]: 0
  with precondition: [Out=2,V2=V,V2>=1] 

* Chain [[49],52]: 0
  with precondition: [Out=1,V2>=1,V>=V2+1] 

* Chain [[49],51]: 0
  with precondition: [Out=1,V>=1,V2>=V+1] 

* Chain [[49],50]: 0
  with precondition: [Out=0,V2>=1,V>=1] 

* Chain [53]: 0
  with precondition: [V2=0,V=0,Out=2] 

* Chain [52]: 0
  with precondition: [V2=0,Out=1,V>=1] 

* Chain [51]: 0
  with precondition: [V=0,Out=1,V2>=1] 

* Chain [50]: 0
  with precondition: [Out=0,V2>=0,V>=0] 


#### Cost of loops [54,55,56,57,58,59,60,62,63] 

 * loop 54:turing(V2,V,V3,V9,Out) -> [turing(V2',V',V3',V9',Out')] 
1
 * loop 55:turing(V2,V,V3,V9,Out) -> [turing(V2',V',V3',V9',Out')] 
1
 * loop 56:turing(V2,V,V3,V9,Out) -> [turing(V2',V',V3',V9',Out')] 
3*s(6)+2
  Such that:s(5) =< V2
s(6) =< s(5)

 * loop 57:turing(V2,V,V3,V9,Out) -> [turing(V2',V',V3',V9',Out')] 
1
 * loop 58:turing(V2,V,V3,V9,Out) -> [turing(V2',V',V3',V9',Out')] 
2
 * loop 59:turing(V2,V,V3,V9,Out) -> [turing(V2',V',V3',V9',Out')] 
1
 * loop 60:turing(V2,V,V3,V9,Out) -> [turing(V2',V',V3',V9',Out')] 
1
 * loop 62:turing(V2,V,V3,V9,Out) -> [turing(V2',V',V3',V9',Out')] 
1
 * loop 63:turing(V2,V,V3,V9,Out) -> [turing(V2',V',V3',V9',Out')] 
1
#### Cost of phase [54,55,56,57,58,59,60,62,63]:turing(V2,V,V3,V9,Out) -> [turing(V2',V',V3',V9',Out')] 
1*it(54)+2*it(55)+4*it(56)+2*it(59)+2*it(60)+3*s(7)+0
#### Cost of phase [54,55,56,57,58,59,60,62,63]:turing(V2,V,V3,V9,Out) -> [turing(V2',V',V3',V9',Out')] 
1*it(54)+2*it(55)+4*it(56)+2*it(59)+2*it(60)+3*s(7)+0
#### Cost of phase [54,55,56,57,58,59,60,62,63]:turing(V2,V,V3,V9,Out) -> [turing(V2',V',V3',V9',Out')] 
1*it(54)+2*it(55)+4*it(56)+2*it(59)+2*it(60)+3*s(7)+0
#### Cost of phase [54,55,56,57,58,59,60,62,63]:turing(V2,V,V3,V9,Out) -> [turing(V2',V',V3',V9',Out')] 
1*it(54)+2*it(55)+4*it(56)+2*it(59)+2*it(60)+3*s(7)+0
#### Cost of phase [54,55,56,57,58,59,60,62,63]:turing(V2,V,V3,V9,Out) -> [turing(V2',V',V3',V9',Out')] 
1*it(54)+2*it(55)+4*it(56)+2*it(59)+2*it(60)+3*s(7)+0
#### Cost of phase [54,55,56,57,58,59,60,62,63]:turing(V2,V,V3,V9,Out) -> [turing(V2',V',V3',V9',Out')] 
1*it(54)+2*it(55)+4*it(56)+2*it(59)+2*it(60)+3*s(7)+0
#### Cost of chains of turing(V2,V,V3,V9,Out):
* Chain [[54,55,56,57,58,59,60,62,63]]...: 14*it(54)+0
  with precondition: [V2>=2,V3>=0,V9>=0,V>=0] 

* Chain [[54,55,56,57,58,59,60,62,63],66]: 14*it(54)+1
  with precondition: [V2>=2,V>=0,V3>=0,V9>=0,Out>=0] 

* Chain [[54,55,56,57,58,59,60,62,63],65]: 14*it(54)+1
  with precondition: [Out=0,V2>=2,V>=0,V3>=0,V9>=0] 

* Chain [[54,55,56,57,58,59,60,62,63],64]: 14*it(54)+1
  with precondition: [V2>=2,V>=0,V3>=0,V9>=0,Out>=0,Out+V2+2*V9>=4,V3+2*V2+2*V9>=6] 

* Chain [[54,55,56,57,58,59,60,62,63],61,66]: 14*it(54)+3*s(9)+2
  Such that:aux(110) =< V9
s(9) =< aux(110)

  with precondition: [V2>=2,V>=0,V3>=0,V9>=0,Out>=0,V9+2*V2>=6,V2+V3+V9>=4,2*V2+3*V9+4*Out>=10,2*Out+2*V2+2*V3+3*V9>=10] 

* Chain [[54,55,56,57,58,59,60,62,63],61,65]: 14*it(54)+3*s(9)+2
  Such that:aux(110) =< V9
s(9) =< aux(110)

  with precondition: [Out=0,V2>=2,V>=0,V3>=0,V9>=0,V9+2*V2>=6,V2+V3+V9>=4] 

* Chain [66]: 1
  with precondition: [V2=0,V3=Out,V>=0,V3>=0,V9>=0] 

* Chain [65]: 1
  with precondition: [Out=0,V2>=0,V>=0,V3>=0,V9>=0] 

* Chain [64]: 1
  with precondition: [V3=Out,V2>=1,V>=0,V3>=0,V9>=0] 

* Chain [61,66]: 3*s(9)+2
  Such that:aux(110) =< V9
s(9) =< aux(110)

  with precondition: [V3=Out,V2>=2,V>=0,V3>=0,V9>=0] 

* Chain [61,65]: 3*s(9)+2
  Such that:aux(110) =< V9
s(9) =< aux(110)

  with precondition: [Out=0,V2>=2,V>=0,V3>=0,V9>=0] 


#### Cost of chains of getGoto(V2,Out):
* Chain [68]: 0
  with precondition: [Out=0,V2>=0] 

* Chain [67]: 1
  with precondition: [V2=Out+1,V2>=1] 


#### Cost of chains of getGotoFirst(V2,Out):
* Chain [70]: 0
  with precondition: [Out=0,V2>=0] 

* Chain [69]: 1
  with precondition: [Out>=0,V2>=Out+1] 


#### Cost of chains of getGotoSecond(V2,Out):
* Chain [72]: 0
  with precondition: [Out=0,V2>=0] 

* Chain [71]: 1
  with precondition: [Out>=0,V2>=Out+1] 


#### Cost of chains of getWrite(V2,Out):
* Chain [74]: 0
  with precondition: [Out=0,V2>=0] 

* Chain [73]: 1
  with precondition: [V2=Out+1,V2>=1] 


#### Cost of chains of instrConstrCheck(V2,V,Out):
* Chain [80]: 1
  with precondition: [V2=0,V=0,Out=2] 

* Chain [79]: 1
  with precondition: [V2=0,Out=1,V>=1] 

* Chain [78]: 1
  with precondition: [V=0,Out=1,V2>=1] 

* Chain [77]: 0
  with precondition: [Out=0,V2>=0,V>=0] 

* Chain [76]: 1
  with precondition: [Out=1,V2>=1,V>=1] 

* Chain [75]: 1
  with precondition: [Out=2,V2>=1,V>=1] 


#### Cost of chains of instrsConstrCheck(V2,V,Out):
* Chain [85]: 1
  with precondition: [V2=0,V=0,Out=2] 

* Chain [84]: 1
  with precondition: [V2=0,Out=1,V>=1] 

* Chain [83]: 1
  with precondition: [V=0,Out=1,V2>=1] 

* Chain [82]: 0
  with precondition: [Out=0,V2>=0,V>=0] 

* Chain [81]: 1
  with precondition: [Out=2,V2>=1,V>=1] 


#### Cost of chains of instrsFirst(V2,Out):
* Chain [87]: 0
  with precondition: [Out=0,V2>=0] 

* Chain [86]: 1
  with precondition: [Out>=0,V2>=Out+1] 


#### Cost of chains of instrsSecond(V2,Out):
* Chain [89]: 0
  with precondition: [Out=0,V2>=0] 

* Chain [88]: 1
  with precondition: [Out>=0,V2>=Out+1] 


#### Cost of chains of notEmpty(V2,Out):
* Chain [92]: 1
  with precondition: [V2=0,Out=1] 

* Chain [91]: 0
  with precondition: [Out=0,V2>=0] 

* Chain [90]: 1
  with precondition: [Out=2,V2>=1] 


#### Cost of chains of start(V2,V,V3,V9,V128):
* Chain [99]...: 14*s(25)+0
  with precondition: [V2=1,V>=3,V3>=0,V9>=0,V128>=0] 

* Chain [98]...: 56*s(26)+1*s(27)+1
  Such that:s(27) =< V128

  with precondition: [V2>=2,V>=0] 

* Chain [97]: 12*s(32)+140*s(33)+1*s(39)+13*s(40)+3
  Such that:s(39) =< V
aux(112) =< V2
aux(113) =< V9
s(40) =< aux(112)
s(32) =< aux(113)

  with precondition: [V2>=0] 

* Chain [96]: 12*s(50)+70*s(51)+2
  Such that:aux(114) =< V128
s(50) =< aux(114)

  with precondition: [V2=1,V>=1,V3>=0,V9>=0,V128>=0] 

* Chain [95]: 36*s(58)+168*s(59)+3
  Such that:aux(119) =< V128
s(58) =< aux(119)

  with precondition: [V2=2,V>=2,V3>=0,V9>=0,V128>=0] 

* Chain [94]: 1
  with precondition: [V=0,V2>=1] 

* Chain [93]: 0
  with precondition: [V2=V,V2>=1] 


Closed-form bounds of start(V2,V,V3,V9,V128): 
-------------------------------------
* Chain [99]... with precondition: [V2=1,V>=3,V3>=0,V9>=0,V128>=0] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [98]... with precondition: [V2>=2,V>=0] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [97] with precondition: [V2>=0] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [96] with precondition: [V2=1,V>=1,V3>=0,V9>=0,V128>=0] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [95] with precondition: [V2=2,V>=2,V3>=0,V9>=0,V128>=0] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [94] with precondition: [V=0,V2>=1] 
    - Upper bound: 1 
    - Complexity: constant 
* Chain [93] with precondition: [V2=V,V2>=1] 
    - Upper bound: 0 
    - Complexity: constant 

### Maximum cost of start(V2,V,V3,V9,V128): inf 
Asymptotic class: infinity 

Time statistics: 
-------------------------------------
* Partial evaluation computed in 254 ms.
* Invariants computed in 526 ms.
   - Backward Invariants 321 ms.
   - Transitive Invariants 107 ms.
* Refinement performed in 897 ms.
* Termination proved in 133 ms.
* Upper bounds computed in 381 ms.
   - Equation cost structures 92 ms.
   - Phase cost structures 232 ms.
   - Chain cost structures 64 ms.
   - Solving cost expressions 1 ms.
* Total analysis performed in 2476 ms.



Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. recursive  : [geq/3]
1. non_recursive  : [if/4]
2. recursive  : [minus/3]
3. recursive [non_tail] : [ (div)/3]
4. non_recursive  : [start/3]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into geq/3
1. SCC is partially evaluated into if/4
2. SCC is partially evaluated into minus/3
3. SCC is partially evaluated into (div)/3
4. SCC is partially evaluated into start/3

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations geq/3 
* CE 12 is refined into CE [19] 
* CE 9 is refined into CE [20] 
* CE 10 is refined into CE [21] 
* CE 11 is refined into CE [22] 


#### Refined cost equations geq/3 
* CE 19: geq(V1,V,Out) = 0
     [V>=0,V1>=0,Out=0] 
* CE 20: geq(V1,V,Out) = 1
     [V1>=0,Out=2,V=0] 
* CE 21: geq(V1,V,Out) = 1
     [V>=1,Out=1,V1=0] 
* CE 22: geq(V1,V,Out) = 1+ geq(W1,X1,Out)
     [X1>=0,W1>=0,X1+1=V,W1+1=V1] 

### Cost equations --> "Loop" of geq/3 
* CEs [22] --> Loop 13 
* CEs [19] --> Loop 14 
* CEs [20] --> Loop 15 
* CEs [21] --> Loop 16 

#### Loops of geq/3 
* Loop 13: geq(V1,V,Out)->  geq(V1',V',Out)
                  [V'>=0,V1'>=0,V'+1=V,V1'+1=V1] 
* Loop 14: geq(V1,V,Out) [V>=0,V1>=0,Out=0] 
* Loop 15: geq(V1,V,Out) [V1>=0,Out=2,V=0] 
* Loop 16: geq(V1,V,Out) [V>=1,Out=1,V1=0] 

### Ranking functions of CR geq(V1,V,Out) 
* RF of phase [13]: [V,V1]

#### Partial ranking functions of CR geq(V1,V,Out) 
* Partial RF of phase [13]:
  - RF of loop [13:1]:
    V
    V1


### Resulting Chains:geq(V1,V,Out) 
* [[13],16]
* [[13],15]
* [[13],14]
* [16]
* [15]
* [14]


### Merging Chains  geq/3 into  External patterns of execution 
* [[16]] --> 1 
* [[15]] --> 2 
* [[14],[14,[13]]] --> 3 
* [[16,[13]]] --> 4 
* [[15,[13]]] --> 5 


### Specialization of cost equations if/4 
* CE 18 is refined into CE [23] 
* CE 16 is refined into CE [24] 
* CE 17 is refined into CE [25] 


#### Refined cost equations if/4 
* CE 23: if(V1,V,V2,Out) = 0
     [V2>=0,V>=0,V1>=0,Out=0] 
* CE 24: if(A,B,C,B) = 1
     [C>=0,B>=0,A=2] 
* CE 25: if(A,B,C,C) = 1
     [C>=0,B>=0,A=1] 

### Cost equations --> "Loop" of if/4 
* CEs [23] --> Loop 17 
* CEs [24] --> Loop 18 
* CEs [25] --> Loop 19 

#### Loops of if/4 
* Loop 17: if(V1,V,V2,Out) [V2>=0,V>=0,V1>=0,Out=0] 
* Loop 18: if(A,B,C,B) [C>=0,B>=0,A=2] 
* Loop 19: if(A,B,C,C) [C>=0,B>=0,A=1] 

### Ranking functions of CR if(V1,V,V2,Out) 

#### Partial ranking functions of CR if(V1,V,V2,Out) 


### Resulting Chains:if(V1,V,V2,Out) 
* [19]
* [18]
* [17]


### Merging Chains  if/4 into  External patterns of execution 
* [[19]] --> 1 
* [[18]] --> 2 
* [[17]] --> 3 


### Specialization of cost equations minus/3 
* CE 6 is refined into CE [26] 
* CE 8 is refined into CE [27] 
* CE 7 is refined into CE [28] 


#### Refined cost equations minus/3 
* CE 26: minus(V1,V,Out) = 1
     [V>=0,Out=0,V1=0] 
* CE 27: minus(V1,V,Out) = 0
     [V>=0,V1>=0,Out=0] 
* CE 28: minus(V1,V,Out) = 1+ minus(W1,X1,Out)
     [X1>=0,W1>=0,X1+1=V,W1+1=V1] 

### Cost equations --> "Loop" of minus/3 
* CEs [28] --> Loop 20 
* CEs [26,27] --> Loop 21 

#### Loops of minus/3 
* Loop 20: minus(V1,V,Out)->  minus(V1',V',Out)
                  [V'>=0,V1'>=0,V'+1=V,V1'+1=V1] 
* Loop 21: minus(V1,V,Out) [V>=0,V1>=0,Out=0] 

### Ranking functions of CR minus(V1,V,Out) 
* RF of phase [20]: [V,V1]

#### Partial ranking functions of CR minus(V1,V,Out) 
* Partial RF of phase [20]:
  - RF of loop [20:1]:
    V
    V1


### Resulting Chains:minus(V1,V,Out) 
* [[20],21]
* [21]


### Merging Chains  minus/3 into  External patterns of execution 
* [[21],[21,[20]]] --> 1 


### Specialization of cost equations (div)/3 
* CE 13 is refined into CE [29] 
* CE 15 is refined into CE [30] 
* CE 14 is refined into CE [31,32,33,34,35,36,37,38,39] 


#### Refined cost equations (div)/3 
* CE 29: div(V1,V,Out) = 1
     [V>=1,Out=0,V1=0] 
* CE 30: div(V1,V,Out) = 0
     [V>=0,V1>=0,Out=0] 
* CE 31: div(V1,V,Out) = 1+ geq(W1,X1,Y1):1+ minus(Z1,X1,A2):1+ div(B2,C2,D2)+ if(E2,F2,G2,H2):1
     [F2>=0,X1>=1,F2=D2+1,X1+1=C2,X1+1=V,B2=0,H2=0,G2=0,E2=1,A2=0,Z1=0,Y1=1,W1=0,Out=0,V1=1] 
* CE 32: div(V1,V,Out) = 1+ geq(W1,X1,Y1):1+ minus(Z1,X1,A2):1+ div(B2,C2,D2)+ if(E2,F2,G2,H2):3
     [F2>=0,X1>=1,F2=D2+1,X1+1=C2,X1+1=V,B2=0,H2=0,G2=0,E2=1,A2=0,Z1=0,Y1=1,W1=0,Out=0,V1=1] 
* CE 33: div(V1,V,Out) = 1+ geq(W1,X1,Y1):2+ minus(W1,Z1,A2):1+ div(B2,C2,D2)+ if(E2,Out,F2,Out):2
     [Out>=0,W1>=0,Out=D2+1,W1+1=V1,C2=1,B2=0,F2=0,E2=2,A2=0,Z1=0,Y1=2,X1=0,V=1] 
* CE 34: div(V1,V,Out) = 1+ geq(W1,X1,Y1):2+ minus(W1,Z1,A2):1+ div(B2,C2,D2)+ if(E2,F2,G2,H2):3
     [F2>=0,W1>=0,F2=D2+1,W1+1=V1,C2=1,B2=0,H2=0,G2=0,E2=2,A2=0,Z1=0,Y1=2,X1=0,Out=0,V=1] 
* CE 35: div(V1,V,Out) = 1+ geq(W1,X1,Y1):3+ minus(W1,X1,Z1):1+ div(A2,B2,C2)+ if(D2,E2,F2,G2):3
     [E2>=0,X1>=0,W1>=0,E2=C2+1,X1+1=B2,X1+1=V,W1+1=V1,A2=0,G2=0,F2=0,D2=0,Z1=0,Y1=0,Out=0] 
* CE 36: div(V1,V,Out) = 1+ geq(W1,X1,Y1):4+ minus(W1,X1,Z1):1+ div(A2,B2,C2)+ if(D2,E2,F2,G2):1
     [X1>=W1+1,E2>=0,W1>=1,E2=C2+1,X1+1=B2,X1+1=V,W1+1=V1,A2=0,G2=0,F2=0,D2=1,Z1=0,Y1=1,Out=0] 
* CE 37: div(V1,V,Out) = 1+ geq(W1,X1,Y1):4+ minus(W1,X1,Z1):1+ div(A2,B2,C2)+ if(D2,E2,F2,G2):3
     [X1>=W1+1,E2>=0,W1>=1,E2=C2+1,X1+1=B2,X1+1=V,W1+1=V1,A2=0,G2=0,F2=0,D2=1,Z1=0,Y1=1,Out=0] 
* CE 38: div(V1,V,Out) = 1+ geq(W1,X1,Y1):5+ minus(W1,X1,Z1):1+ div(A2,B2,C2)+ if(D2,Out,E2,Out):2
     [W1>=X1,Out>=0,X1>=1,Out=C2+1,X1+1=B2,X1+1=V,W1+1=V1,A2=0,E2=0,D2=2,Z1=0,Y1=2] 
* CE 39: div(V1,V,Out) = 1+ geq(W1,X1,Y1):5+ minus(W1,X1,Z1):1+ div(A2,B2,C2)+ if(D2,E2,F2,G2):3
     [W1>=X1,E2>=0,X1>=1,E2=C2+1,X1+1=B2,X1+1=V,W1+1=V1,A2=0,G2=0,F2=0,D2=2,Z1=0,Y1=2,Out=0] 

### Cost equations --> "Loop" of (div)/3 
* CEs [38] --> Loop 22 
* CEs [39] --> Loop 23 
* CEs [33] --> Loop 24 
* CEs [34] --> Loop 25 
* CEs [31,32,35,36,37] --> Loop 26 
* CEs [29,30] --> Loop 27 

#### Loops of (div)/3 
* Loop 22: div(V1,V,Out)->  div(V1',V,Out')
                  [V1>=V,Out>=0,V>=2,Out=Out'+1,V1'=0] 
* Loop 23: div(V1,V,Out)->  div(V1',V,Out')
                  [V1>=V,Out'+1>=0,V>=2,V1'=0,Out=0] 
* Loop 24: div(V1,V,Out)->  div(V1',V',Out')
                  [Out>=0,V1>=1,Out=Out'+1,V'=1,V1'=0,V=1] 
* Loop 25: div(V1,V,Out)->  div(V1',V',Out')
                  [Out'+1>=0,V1>=1,V'=1,V1'=0,Out=0,V=1] 
* Loop 26: div(V1,V,Out)->  div(V1',V,Out')
                  [Out'+1>=0,V>=1,V1>=1,V1'=0,Out=0] 
* Loop 27: div(V1,V,Out) [V>=0,V1>=0,Out=0] 

### Ranking functions of CR div(V1,V,Out) 

#### Partial ranking functions of CR div(V1,V,Out) 


### Resulting Chains:div(V1,V,Out) 
* [27]
* [26,27]
* [25,27]
* [24,27]
* [23,27]
* [22,27]


### Merging Chains  (div)/3 into  External patterns of execution 
* [[27,23],[27,25],[27,26],[27]] --> 1 
* [[27,24]] --> 2 
* [[27,22]] --> 3 


### Specialization of cost equations start/3 
* CE 2 is refined into CE [40] 
* CE 3 is refined into CE [41,42,43,44,45] 
* CE 4 is refined into CE [46,47,48] 
* CE 5 is refined into CE [49,50,51] 


#### Refined cost equations start/3 
* CE 40: start(V1,V,V2) = 0+ minus(V1,V,W2):1
     [V>=0,V1>=0,W2=0] 
* CE 41: start(V1,V,V2) = 0+ geq(W2,V,X2):1
     [V>=1,X2=1,W2=0,V1=0] 
* CE 42: start(V1,V,V2) = 0+ geq(V1,W2,X2):2
     [V1>=0,X2=2,W2=0,V=0] 
* CE 43: start(V1,V,V2) = 0+ geq(V1,V,W2):3
     [V>=0,V1>=0,W2=0] 
* CE 44: start(V1,V,V2) = 0+ geq(V1,V,W2):4
     [V>=V1+1,V1>=1,W2=1] 
* CE 45: start(V1,V,V2) = 0+ geq(V1,V,W2):5
     [V1>=V,V>=1,W2=2] 
* CE 46: start(V1,V,V2) = 0+ div(V1,V,W2):1
     [V>=0,V1>=0,W2=0] 
* CE 47: start(V1,V,V2) = 0+ div(V1,W2,X2):2
     [V1>=1,X2=1,W2=1,V=1] 
* CE 48: start(V1,V,V2) = 0+ div(V1,V,W2):3
     [V1>=V,V>=2,W2=1] 
* CE 49: start(V1,V,V2) = 0+ if(W2,V,V2,V2):1
     [V2>=0,V>=0,W2=1,V1=1] 
* CE 50: start(V1,V,V2) = 0+ if(W2,V,V2,V):2
     [V>=0,V2>=0,W2=2,V1=2] 
* CE 51: start(V1,V,V2) = 0+ if(V1,V,V2,W2):3
     [V2>=0,V>=0,V1>=0,W2=0] 

### Cost equations --> "Loop" of start/3 
* CEs [47] --> Loop 28 
* CEs [42] --> Loop 29 
* CEs [50] --> Loop 30 
* CEs [49] --> Loop 31 
* CEs [40,41,43,44,45,46,48,51] --> Loop 32 

#### Loops of start/3 
* Loop 28: start(V1,V,V2) [V1>=1,V=1] 
* Loop 29: start(V1,V,V2) [V1>=0,V=0] 
* Loop 30: start(V1,V,V2) [V2>=0,V>=0,V1=2] 
* Loop 31: start(V1,V,V2) [V2>=0,V>=0,V1=1] 
* Loop 32: start(V1,V,V2) [V>=0,V1>=0] 

### Ranking functions of CR start(V1,V,V2) 

#### Partial ranking functions of CR start(V1,V,V2) 


### Resulting Chains:start(V1,V,V2) 
* [32]
* [31]
* [30]
* [29]
* [28]


### Merging Chains  start/3 into  External patterns of execution 
* [[31],[32]] --> 1 
* [[30]] --> 2 
* [[29]] --> 3 
* [[28]] --> 4 


Computing Bounds
=====================================

#### Cost of loops [13] 

 * loop 13:geq(V1,V,Out) -> [geq(V1',V',Out')] 
1
#### Cost of phase [13]:geq(V1,V,Out) -> [geq(V1',V',Out')] 
1*it(13)+0
  Such that:it(13) =< V1
it(13) =< V1-V1'
it(13) =< V
it(13) =< V-V'

#### Cost of phase [13]:geq(V1,V,Out) -> [geq(V1',V',Out')] 
1*it(13)+0
  Such that:it(13) =< V1
it(13) =< V1-V1'
it(13) =< V
it(13) =< V-V'

#### Cost of phase [13]:geq(V1,V,Out) -> [geq(V1',V',Out')] 
1*it(13)+0
  Such that:it(13) =< V1
it(13) =< V1-V1'
it(13) =< V
it(13) =< V-V'

#### Cost of chains of geq(V1,V,Out):
* Chain [[13],16]: 1*it(13)+1
  Such that:it(13) =< V1

  with precondition: [Out=1,V1>=1,V>=V1+1] 

* Chain [[13],15]: 1*it(13)+1
  Such that:it(13) =< V

  with precondition: [Out=2,V>=1,V1>=V] 

* Chain [[13],14]: 1*it(13)+0
  Such that:it(13) =< V

  with precondition: [Out=0,V1>=1,V>=1] 

* Chain [16]: 1
  with precondition: [V1=0,Out=1,V>=1] 

* Chain [15]: 1
  with precondition: [V=0,Out=2,V1>=0] 

* Chain [14]: 0
  with precondition: [Out=0,V1>=0,V>=0] 


#### Cost of chains of if(V1,V,V2,Out):
* Chain [19]: 1
  with precondition: [V1=1,V2=Out,V>=0,V2>=0] 

* Chain [18]: 1
  with precondition: [V1=2,V=Out,V>=0,V2>=0] 

* Chain [17]: 0
  with precondition: [Out=0,V1>=0,V>=0,V2>=0] 


#### Cost of loops [20] 

 * loop 20:minus(V1,V,Out) -> [minus(V1',V',Out')] 
1
#### Cost of phase [20]:minus(V1,V,Out) -> [minus(V1',V',Out')] 
1*it(20)+0
  Such that:it(20) =< V1
it(20) =< V1-V1'
it(20) =< V
it(20) =< V-V'

#### Cost of chains of minus(V1,V,Out):
* Chain [[20],21]: 1*it(20)+1
  Such that:it(20) =< V

  with precondition: [Out=0,V1>=1,V>=1] 

* Chain [21]: 1
  with precondition: [Out=0,V1>=0,V>=0] 


#### Cost of chains of div(V1,V,Out):
* Chain [27]: 1
  with precondition: [Out=0,V1>=0,V>=0] 

* Chain [26,27]: 6*s(3)+2*s(7)+5
  Such that:aux(2) =< V1
aux(4) =< V
s(7) =< aux(2)
s(3) =< aux(4)

  with precondition: [Out=0,V1>=1,V>=1] 

* Chain [25,27]: 4
  with precondition: [V=1,Out=0,V1>=1] 

* Chain [24,27]: 5
  with precondition: [V=1,Out=1,V1>=1] 

* Chain [23,27]: 2*s(13)+4
  Such that:aux(5) =< V
s(13) =< aux(5)

  with precondition: [Out=0,V>=2,V1>=V] 

* Chain [22,27]: 2*s(15)+5
  Such that:aux(6) =< V
s(15) =< aux(6)

  with precondition: [Out=1,V>=2,V1>=V] 


#### Cost of chains of start(V1,V,V2):
* Chain [32]: 13*s(23)+3*s(25)+5
  Such that:aux(8) =< V1
aux(9) =< V
s(25) =< aux(8)
s(23) =< aux(9)

  with precondition: [V1>=0,V>=0] 

* Chain [31]: 1
  with precondition: [V1=1,V>=0,V2>=0] 

* Chain [30]: 1
  with precondition: [V1=2,V>=0,V2>=0] 

* Chain [29]: 1
  with precondition: [V=0,V1>=0] 

* Chain [28]: 5
  with precondition: [V=1,V1>=1] 


Closed-form bounds of start(V1,V,V2): 
-------------------------------------
* Chain [32] with precondition: [V1>=0,V>=0] 
    - Upper bound: 3*V1+13*V+5 
    - Complexity: n 
* Chain [31] with precondition: [V1=1,V>=0,V2>=0] 
    - Upper bound: 1 
    - Complexity: constant 
* Chain [30] with precondition: [V1=2,V>=0,V2>=0] 
    - Upper bound: 1 
    - Complexity: constant 
* Chain [29] with precondition: [V=0,V1>=0] 
    - Upper bound: 1 
    - Complexity: constant 
* Chain [28] with precondition: [V=1,V1>=1] 
    - Upper bound: 5 
    - Complexity: constant 

### Maximum cost of start(V1,V,V2): 3*V1+13*V+5 
Asymptotic class: n 

Time statistics: 
-------------------------------------
* Partial evaluation computed in 11 ms.
* Invariants computed in 31 ms.
   - Backward Invariants 16 ms.
   - Transitive Invariants 3 ms.
* Refinement performed in 79 ms.
* Termination proved in 4 ms.
* Upper bounds computed in 58 ms.
   - Equation cost structures 13 ms.
   - Phase cost structures 4 ms.
   - Chain cost structures 12 ms.
   - Solving cost expressions 0 ms.
* Total analysis performed in 208 ms.


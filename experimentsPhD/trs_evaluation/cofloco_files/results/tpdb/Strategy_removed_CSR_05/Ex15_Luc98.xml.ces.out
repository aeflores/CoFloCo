
Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. recursive  : [add/3]
1. non_recursive  : [and/3]
2. recursive  : [first/3]
3. recursive  : [from/2]
4. non_recursive  : [if/4]
5. non_recursive  : [start/3]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into add/3
1. SCC is partially evaluated into and/3
2. SCC is partially evaluated into first/3
3. SCC is partially evaluated into from/2
4. SCC is partially evaluated into if/4
5. SCC is partially evaluated into start/3

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations add/3 
* CE 12 is refined into CE [17] 
* CE 11 is refined into CE [18] 


#### Refined cost equations add/3 
* CE 17: add(V1,V,Out) = 1+ add(W1,V,X1)
     [W1>=0,V>=0,X1+1=Out,W1+1=V1] 
* CE 18: add(A,B,B) = 1
     [B>=0,A=0] 

### Cost equations --> "Loop" of add/3 
* CEs [18] --> Loop 11 
* CEs [17] --> Loop 12 

#### Loops of add/3 
* Loop 11: add(A,B,B) [B>=0,A=0] 
* Loop 12: add(V1,V,Out)->  add(V1',V,Out')
                  [V1'>=0,V>=0,Out=Out'+1,V1'+1=V1] 

### Ranking functions of CR add(V1,V,Out) 
* RF of phase [12]: [V1]

#### Partial ranking functions of CR add(V1,V,Out) 
* Partial RF of phase [12]:
  - RF of loop [12:1]:
    V1


### Resulting Chains:add(V1,V,Out) 
* [[12],11]
* [11]


### Merging Chains  add/3 into  External patterns of execution 
* [[11]] --> 1 
* [[11,[12]]] --> 2 


### Specialization of cost equations and/3 
* CE 7 is refined into CE [19] 
* CE 8 is refined into CE [20] 


#### Refined cost equations and/3 
* CE 19: and(A,B,B) = 1
     [B>=0,A=1] 
* CE 20: and(V1,V,Out) = 1
     [V>=0,Out=0,V1=0] 

### Cost equations --> "Loop" of and/3 
* CEs [19] --> Loop 13 
* CEs [20] --> Loop 14 

#### Loops of and/3 
* Loop 13: and(A,B,B) [B>=0,A=1] 
* Loop 14: and(V1,V,Out) [V>=0,Out=0,V1=0] 

### Ranking functions of CR and(V1,V,Out) 

#### Partial ranking functions of CR and(V1,V,Out) 


### Resulting Chains:and(V1,V,Out) 
* [14]
* [13]


### Merging Chains  and/3 into  External patterns of execution 
* [[14]] --> 1 
* [[13]] --> 2 


### Specialization of cost equations first/3 
* CE 13 is refined into CE [21] 
* CE 15 is refined into CE [22] 
* CE 14 is refined into CE [23] 


#### Refined cost equations first/3 
* CE 21: first(V1,V,Out) = 1
     [V>=0,Out=0,V1=0] 
* CE 22: first(V1,V,Out) = 0
     [V>=0,V1>=0,Out=0] 
* CE 23: first(V1,V,Out) = 1+ first(W1,X1,Y1)
     [V+Y1>=Out,Out>=Y1+1,W1>=0,V+Y1=Out+X1,W1+1=V1] 

### Cost equations --> "Loop" of first/3 
* CEs [23] --> Loop 15 
* CEs [21,22] --> Loop 16 

#### Loops of first/3 
* Loop 15: first(V1,V,Out)->  first(V1',V',Out')
                  [V+Out'>=Out,Out>=Out'+1,V1'>=0,V+Out'=Out+V',V1'+1=V1] 
* Loop 16: first(V1,V,Out) [V>=0,V1>=0,Out=0] 

### Ranking functions of CR first(V1,V,Out) 
* RF of phase [15]: [V,V1]

#### Partial ranking functions of CR first(V1,V,Out) 
* Partial RF of phase [15]:
  - RF of loop [15:1]:
    V
    V1


### Resulting Chains:first(V1,V,Out) 
* [[15],16]
* [16]


### Merging Chains  first/3 into  External patterns of execution 
* [[16]] --> 1 
* [[16,[15]]] --> 2 


### Specialization of cost equations from/2 
* CE 16 is refined into CE [24] 


#### Refined cost equations from/2 
* CE 24: from(V1,Out) = 1+ from(W1,X1)
     [V1>=0,V1+X1+1=Out,V1+1=W1] 

### Cost equations --> "Loop" of from/2 
* CEs [24] --> Loop 17 

#### Loops of from/2 
* Loop 17: from(V1,Out)->  from(V1',Out')
                  [V1>=0,V1+Out'+1=Out,V1+1=V1'] 

### Ranking functions of CR from(V1,Out) 

#### Partial ranking functions of CR from(V1,Out) 

Warning: no base case found for predicate

### Resulting Chains:from(V1,Out) 
* [[17]]...


### Merging Chains  from/2 into  External patterns of execution 
* [[[17]]] --> 1 


### Specialization of cost equations if/4 
* CE 9 is refined into CE [25] 
* CE 10 is refined into CE [26] 


#### Refined cost equations if/4 
* CE 25: if(A,B,C,B) = 1
     [C>=0,B>=0,A=1] 
* CE 26: if(A,B,C,C) = 1
     [C>=0,B>=0,A=0] 

### Cost equations --> "Loop" of if/4 
* CEs [25] --> Loop 18 
* CEs [26] --> Loop 19 

#### Loops of if/4 
* Loop 18: if(A,B,C,B) [C>=0,B>=0,A=1] 
* Loop 19: if(A,B,C,C) [C>=0,B>=0,A=0] 

### Ranking functions of CR if(V1,V,V2,Out) 

#### Partial ranking functions of CR if(V1,V,V2,Out) 


### Resulting Chains:if(V1,V,V2,Out) 
* [19]
* [18]


### Merging Chains  if/4 into  External patterns of execution 
* [[19]] --> 1 
* [[18]] --> 2 


### Specialization of cost equations start/3 
* CE 2 is refined into CE [27,28] 
* CE 3 is refined into CE [29,30] 
* CE 4 is refined into CE [31,32] 
* CE 5 is refined into CE [33,34] 
* CE 6 is refined into CE [35] 


#### Refined cost equations start/3 
* CE 27: start(V1,V,V2) = 0+ and(W2,V,X2):1
     [V>=0,X2=0,W2=0,V1=0] 
* CE 28: start(V1,V,V2) = 0+ and(W2,V,V):2
     [V>=0,W2=1,V1=1] 
* CE 29: start(V1,V,V2) = 0+ if(W2,V,V2,V2):1
     [V2>=0,V>=0,W2=0,V1=0] 
* CE 30: start(V1,V,V2) = 0+ if(W2,V,V2,V):2
     [V>=0,V2>=0,W2=1,V1=1] 
* CE 31: start(V1,V,V2) = 0+ add(W2,V,V):1
     [V>=0,W2=0,V1=0] 
* CE 32: start(V1,V,V2) = 0+ add(V1,W2,X2):2
     [X2>=V1,V1>=1,X2=V1+W2,X2=V1+V] 
* CE 33: start(V1,V,V2) = 0+ first(V1,V,W2):1
     [V>=0,V1>=0,W2=0] 
* CE 34: start(V1,V,V2) = 0+ first(V1,V,W2):2
     [V>=W2,W2>=1,V1>=1] 
* CE 35: start(V1,V,V2) = 0+ from(V1,W2):1
     [V1>=0] 

### Cost equations --> "Loop" of start/3 
* CEs [35] --> Loop 20 
* CEs [28,30] --> Loop 21 
* CEs [27,29,31,32,33,34] --> Loop 22 

#### Loops of start/3 
* Loop 20: start(V1,V,V2) [V1>=0] 
* Loop 21: start(V1,V,V2) [V>=0,V1=1] 
* Loop 22: start(V1,V,V2) [V>=0,V1>=0] 

### Ranking functions of CR start(V1,V,V2) 

#### Partial ranking functions of CR start(V1,V,V2) 


### Resulting Chains:start(V1,V,V2) 
* [22]
* [21]
* [20]...


### Merging Chains  start/3 into  External patterns of execution 
* [[21],[22]] --> 1 
* [[20]] --> 2 


Computing Bounds
=====================================

#### Cost of loops [12] 

 * loop 12:add(V1,V,Out) -> [add(V1',V',Out')] 
1
#### Cost of phase [12]:add(V1,V,Out) -> [add(V1',V',Out')] 
1*it(12)+0
  Such that:it(12) =< V1
it(12) =< V1-V1'

#### Cost of chains of add(V1,V,Out):
* Chain [[12],11]: 1*it(12)+1
  Such that:it(12) =< -V+Out

  with precondition: [V+V1=Out,V1>=1,V>=0] 

* Chain [11]: 1
  with precondition: [V1=0,V=Out,V>=0] 


#### Cost of chains of and(V1,V,Out):
* Chain [14]: 1
  with precondition: [V1=0,Out=0,V>=0] 

* Chain [13]: 1
  with precondition: [V1=1,V=Out,V>=0] 


#### Cost of loops [15] 

 * loop 15:first(V1,V,Out) -> [first(V1',V',Out')] 
1
#### Cost of phase [15]:first(V1,V,Out) -> [first(V1',V',Out')] 
1*it(15)+0
  Such that:it(15) =< V1
it(15) =< V1-V1'
it(15) =< V
it(15) =< V-V'

#### Cost of chains of first(V1,V,Out):
* Chain [[15],16]: 1*it(15)+1
  Such that:it(15) =< V1

  with precondition: [V1>=1,Out>=1,V>=Out] 

* Chain [16]: 1
  with precondition: [Out=0,V1>=0,V>=0] 


#### Cost of loops [17] 

 * loop 17:from(V1,Out) -> [from(V1',Out')] 
1
#### Cost of phase [17]:from(V1,Out) -> [from(V1',Out')] 
1*it(17)+0
#### Cost of chains of from(V1,Out):
* Chain [[17]]...: 1*it(17)+0
  with precondition: [V1>=0] 


#### Cost of chains of if(V1,V,V2,Out):
* Chain [19]: 1
  with precondition: [V1=0,V2=Out,V>=0,V2>=0] 

* Chain [18]: 1
  with precondition: [V1=1,V=Out,V>=0,V2>=0] 


#### Cost of chains of start(V1,V,V2):
* Chain [22]: 2*s(1)+1
  Such that:aux(1) =< V1
s(1) =< aux(1)

  with precondition: [V1>=0,V>=0] 

* Chain [21]: 1
  with precondition: [V1=1,V>=0] 

* Chain [20]...: 1*s(3)+0
  with precondition: [V1>=0] 


Closed-form bounds of start(V1,V,V2): 
-------------------------------------
* Chain [22] with precondition: [V1>=0,V>=0] 
    - Upper bound: 2*V1+1 
    - Complexity: n 
* Chain [21] with precondition: [V1=1,V>=0] 
    - Upper bound: 1 
    - Complexity: constant 
* Chain [20]... with precondition: [V1>=0] 
    - Upper bound: inf 
    - Complexity: infinity 

### Maximum cost of start(V1,V,V2): inf 
Asymptotic class: infinity 

Time statistics: 
-------------------------------------
* Partial evaluation computed in 9 ms.
* Invariants computed in 13 ms.
   - Backward Invariants 6 ms.
   - Transitive Invariants 4 ms.
* Refinement performed in 37 ms.
* Termination proved in 6 ms.
* Upper bounds computed in 24 ms.
   - Equation cost structures 11 ms.
   - Phase cost structures 6 ms.
   - Chain cost structures 7 ms.
   - Solving cost expressions 0 ms.
* Total analysis performed in 109 ms.


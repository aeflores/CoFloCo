
Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. recursive  : [choose/5,insert/3]
1. recursive [non_tail] : [sort/2]
2. non_recursive  : [start/4]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into choose/5
1. SCC is partially evaluated into sort/2
2. SCC is partially evaluated into start/4

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations choose/5 
* CE 12 is refined into CE [18] 
* CE 10 is refined into CE [19] 
* CE 7 is refined into CE [20] 
* CE 9 is refined into CE [21] 
* CE 11 is refined into CE [22] 
* CE 8 is refined into CE [23] 


#### Refined cost equations choose/5 
* CE 18: choose(V,V4,V13,V11,Out) = 0
     [V11>=0,V13>=0,V4>=0,V>=0,Out=0] 
* CE 19: choose(V,V4,V13,V11,Out) = 1
     [Out>=V4+1,V13>=0,V4>=1,V+V4+1=Out,V11=0] 
* CE 20: choose(V,V4,V13,V11,Out) = 1
     [V4>=Out,Out>=1,V11>=1,V>=0,V13=0] 
* CE 21: choose(V,V4,V13,V11,Out) = 2
     [Out>=V4+1,V11>=1,V4>=1,V+V4+1=Out,V13=0] 
* CE 22: choose(V,V4,V13,V11,Out) = 1+ choose(V,V4,W13,X13,Out)
     [X13>=0,W13>=0,V4>=1,V>=0,X13+1=V11,W13+1=V13] 
* CE 23: choose(V,V4,V13,V11,Out) = 2+ choose(V,W13,V,X13,Y13)
     [V4+Y13>=Out+X13+1,Out>=Y13+1,X13>=0,V11>=1,V>=0,V4+Y13=Out+W13,V13=0] 

### Cost equations --> "Loop" of choose/5 
* CEs [22] --> Loop 12 
* CEs [23] --> Loop 13 
* CEs [18] --> Loop 14 
* CEs [19] --> Loop 15 
* CEs [20] --> Loop 16 
* CEs [21] --> Loop 17 

#### Loops of choose/5 
* Loop 12: choose(V,V4,V13,V11,Out)->  choose(V,V4,V13',V11',Out)
                  [V11>=1,V13>=1,V4>=1,V>=0,V11=V11'+1,V13=V13'+1] 
* Loop 13: choose(V,V4,V13,V11,Out)->  choose(V,A',V,B',C')
                  [A'>=B'+1,V4>=A'+1,B'>=0,V11>=1,V>=0,Out+A'=V4+C',V13=0] 
* Loop 14: choose(V,V4,V13,V11,Out) [V11>=0,V13>=0,V4>=0,V>=0,Out=0] 
* Loop 15: choose(V,V4,V13,V11,Out) [V13>=0,V4>=1,V>=0,V+V4+1=Out,V11=0] 
* Loop 16: choose(V,V4,V13,V11,Out) [V4>=Out,Out>=1,V11>=1,V>=0,V13=0] 
* Loop 17: choose(V,V4,V13,V11,Out) [V11>=1,V4>=1,V>=0,V+V4+1=Out,V13=0] 

### Ranking functions of CR choose(V,V4,V13,V11,Out) 

#### Partial ranking functions of CR choose(V,V4,V13,V11,Out) 
* Partial RF of phase [12,13]:
  - RF of loop [12:1]:
    V11 depends on loops [13:1] 
    V13 depends on loops [13:1] 
  - RF of loop [13:1]:
    V4-1


### Resulting Chains:choose(V,V4,V13,V11,Out) 
* [[12,13],17]
* [[12,13],16]
* [[12,13],15]
* [[12,13],14]
* [17]
* [16]
* [15]
* [14]


### Merging Chains  choose/5 into  External patterns of execution 
* [[17]] --> 1 
* [[16]] --> 2 
* [[15]] --> 3 
* [[14]] --> 4 
* [[15,[12,13]],[17,[12,13]]] --> 5 
* [[14,[12,13]]] --> 6 
* [[16,[12,13]]] --> 7 


### Specialization of cost equations sort/2 
* CE 16 is refined into CE [24] 
* CE 17 is refined into CE [25] 
* CE 14 is refined into CE [26,27,28,29,30,31,32] 
* CE 15 is refined into CE [33] 
* CE 13 is refined into CE [34] 


#### Refined cost equations sort/2 
* CE 24: sort(V,Out) = 1
     [Out=0,V=0] 
* CE 25: sort(V,Out) = 0
     [V>=0,Out=0] 
* CE 26: sort(V,Out) = 2+ sort(W,X)+ choose(Y,Z,A1,B1,Out):1
     [Out>=B1+2,W>=0,B1>=1,Out=X+1,Out=Z+1,W+1=V,A1=0,Y=0] 
* CE 27: sort(V,Out) = 2+ sort(W,X)+ choose(Y,X,Z,A1,Out):2
     [X>=Out,X>=A1+1,W>=0,Out>=1,A1>=1,W+1=V,Z=0,Y=0] 
* CE 28: sort(V,Out) = 2+ sort(W,X)+ choose(Y,Z,Y,A1,Out):3
     [Out>=Y+2,W>=0,Y>=0,Out=Y+X+1,Out=Y+Z+1,Y+W+1=V,A1=0] 
* CE 29: sort(V,Out) = 2+ sort(W,X)+ choose(Y,X,Y,Z,A1):4
     [X>=Z+1,W>=0,Z>=0,Y>=0,Y+W+1=V,A1=0,Out=0] 
* CE 30: sort(V,Out) = 2+ sort(W,X)+ choose(Y,Z,Y,A1,Out):5
     [Out>=Y+A1+2,W>=0,A1>=1,Y>=0,Out=Y+X+1,Out=Y+Z+1,Y+W+1=V] 
* CE 31: sort(V,Out) = 2+ sort(W,X)+ choose(Y,X,Y,Z,Out):6
     [Out+Y>=1,X>=Out+1,X>=Z+1,W>=0,Out>=0,Z>=1,Y>=0,Y+W+1=V] 
* CE 32: sort(V,Out) = 2+ sort(W,X)+ choose(Y,X,Y,Z,Out):7
     [X+2*Y>=3,Out+Y>=2,X>=Out,X>=Z+1,Z>=Y+1,W>=0,Out>=1,Y>=0,Y+W+1=V] 
* CE 33: sort(V,Out) = 2+ sort(W,X)
     [V>=W+1,W>=0,V=Out+W,X=0] 
* CE 34: sort(V,Out) = 1+ sort(W,X)
     [V>=W+1,X>=0,W>=0,Out=0] 

### Cost equations --> "Loop" of sort/2 
* CEs [32] --> Loop 18 
* CEs [31] --> Loop 19 
* CEs [27] --> Loop 20 
* CEs [26,28,30] --> Loop 21 
* CEs [33] --> Loop 22 
* CEs [29,34] --> Loop 23 
* CEs [24,25] --> Loop 24 

#### Loops of sort/2 
* Loop 18: sort(V,Out)->  sort(V',Out')
                  [V+Out>=V'+3,V'+Out'>=V+1,Out'+2*V>=2*V'+5,V>=V'+1,Out'>=Out,V'>=0,Out>=1] 
* Loop 19: sort(V,Out)->  sort(V',Out')
                  [V+Out>=V'+2,V>=V'+1,Out'>=Out+1,Out'>=2,V'>=0,Out>=0] 
* Loop 20: sort(V,Out)->  sort(V',Out')
                  [Out'>=Out,Out'>=2,Out>=1,V>=1,V=V'+1] 
* Loop 21: sort(V,Out)->  sort(V',Out')
                  [Out+V'>=V+1,V>=V'+1,V'>=0,V+Out'=Out+V'] 
* Loop 22: sort(V,Out)->  sort(V',Out')
                  [V>=Out,Out>=1,Out+V'=V,Out'=0] 
* Loop 23: sort(V,Out)->  sort(V',Out')
                  [V>=V'+1,Out'>=0,V'>=0,Out=0] 
* Loop 24: sort(V,Out) [V>=0,Out=0] 

### Ranking functions of CR sort(V,Out) 
* RF of phase [18,19,20,21,22,23]: [V]

#### Partial ranking functions of CR sort(V,Out) 
* Partial RF of phase [18,19,20,21,22,23]:
  - RF of loop [18:1,19:1,20:1,21:1,22:1,23:1]:
    V


### Resulting Chains:sort(V,Out) 
* [[18,19,20,21,22,23],24]
* [24]


### Merging Chains  sort/2 into  External patterns of execution 
* [[24]] --> 1 
* [[24,[18,19,20,21,22,23]]] --> 2 


### Specialization of cost equations start/4 
* CE 2 is refined into CE [35] 
* CE 3 is refined into CE [36,37,38,39,40,41,42] 
* CE 4 is refined into CE [43] 
* CE 5 is refined into CE [44,45] 
* CE 6 is refined into CE [46,47,48,49,50,51,52] 


#### Refined cost equations start/4 
* CE 35: start(V,V4,V13,V11) = 0
     [V4>=0,V>=0] 
* CE 36: start(V,V4,V13,V11) = 1+ choose(W13,X13,Y13,Z13,A14):1
     [A14>=Z13+2,Z13>=1,A14=X13+1,A14=V4+1,Y13=0,W13=0,V=0] 
* CE 37: start(V,V4,V13,V11) = 1+ choose(W13,V4,X13,Y13,Z13):2
     [V4>=Z13,V4>=Y13+1,Z13>=1,Y13>=1,X13=0,W13=0,V=0] 
* CE 38: start(V,V4,V13,V11) = 1+ choose(V,W13,V,X13,Y13):3
     [Y13>=V+2,V>=0,Y13=V+W13+1,Y13=V+V4+1,X13=0] 
* CE 39: start(V,V4,V13,V11) = 1+ choose(V,V4,V,W13,X13):4
     [V4>=W13+1,W13>=0,V>=0,X13=0] 
* CE 40: start(V,V4,V13,V11) = 1+ choose(V,W13,V,X13,Y13):5
     [Y13>=V+X13+2,X13>=1,V>=0,Y13=V+W13+1,Y13=V+V4+1] 
* CE 41: start(V,V4,V13,V11) = 1+ choose(V,V4,V,W13,X13):6
     [V+X13>=1,V4>=X13+1,V4>=W13+1,X13>=0,W13>=1,V>=0] 
* CE 42: start(V,V4,V13,V11) = 1+ choose(V,V4,V,W13,X13):7
     [V4+2*V>=3,V+X13>=2,V4>=X13,V4>=W13+1,W13>=V+1,X13>=1,V>=0] 
* CE 43: start(V,V4,V13,V11) = 1
     [V>=0,V4=0] 
* CE 44: start(V,V4,V13,V11) = 0+ sort(V,W13):1
     [V>=0,W13=0] 
* CE 45: start(V,V4,V13,V11) = 0+ sort(V,W13):2
     [V>=W13,W13>=0,V>=1] 
* CE 46: start(V,V4,V13,V11) = 0+ choose(V,W13,X13,V11,Y13):1
     [Y13>=V+2,V11>=1,V>=0,Y13=V+W13+1,Y13=V+V4+1,X13=0,V13=0] 
* CE 47: start(V,V4,V13,V11) = 0+ choose(V,V4,W13,V11,X13):2
     [V4>=X13,X13>=1,V11>=1,V>=0,W13=0,V13=0] 
* CE 48: start(V,V4,V13,V11) = 0+ choose(V,W13,V13,X13,Y13):3
     [Y13>=V+2,V13>=0,V>=0,Y13=V+W13+1,Y13=V+V4+1,X13=0,V11=0] 
* CE 49: start(V,V4,V13,V11) = 0+ choose(V,V4,V13,V11,W13):4
     [V11>=0,V13>=0,V4>=0,V>=0,W13=0] 
* CE 50: start(V,V4,V13,V11) = 0+ choose(V,W13,V13,V11,X13):5
     [V13+X13>=V+3,X13>=V+2,V11>=1,V13>=0,V>=0,X13=V+W13+1,X13=V+V4+1] 
* CE 51: start(V,V4,V13,V11) = 0+ choose(V,V4,V13,V11,W13):6
     [V13+W13>=1,V4>=W13+1,W13>=0,V11>=1,V13>=0,V>=0] 
* CE 52: start(V,V4,V13,V11) = 0+ choose(V,V4,V13,V11,W13):7
     [V13+W13>=2,V4+2*V13>=3,V4>=W13,V11>=V13+1,W13>=1,V13>=0,V>=0] 

### Cost equations --> "Loop" of start/4 
* CEs [48] --> Loop 25 
* CEs [46,47] --> Loop 26 
* CEs [43] --> Loop 27 
* CEs [35,36,37,38,39,40,41,42,44,45,49,50,51,52] --> Loop 28 

#### Loops of start/4 
* Loop 25: start(V,V4,V13,V11) [V13>=0,V4>=1,V>=0,V11=0] 
* Loop 26: start(V,V4,V13,V11) [V11>=1,V4>=1,V>=0,V13=0] 
* Loop 27: start(V,V4,V13,V11) [V>=0,V4=0] 
* Loop 28: start(V,V4,V13,V11) [V>=0] 

### Ranking functions of CR start(V,V4,V13,V11) 

#### Partial ranking functions of CR start(V,V4,V13,V11) 


### Resulting Chains:start(V,V4,V13,V11) 
* [28]
* [27]
* [26]
* [25]


### Merging Chains  start/4 into  External patterns of execution 
* [[27],[28]] --> 1 
* [[26]] --> 2 
* [[25]] --> 3 


Computing Bounds
=====================================

#### Cost of loops [12,13] 

 * loop 12:choose(V,V4,V13,V11,Out) -> [choose(V',V4',V13',V11',Out')] 
1
 * loop 13:choose(V,V4,V13,V11,Out) -> [choose(V',V4',V13',V11',Out')] 
2
#### Cost of phase [12,13]:choose(V,V4,V13,V11,Out) -> [choose(V',V4',V13',V11',Out')] 
1*it(12)+2*it(13)+0
  Such that:it(13) =< V4-V4'
aux(4) =< V11
aux(8) =< V11-V11'
aux(15) =< V4
it(13) =< aux(15)
aux(3) =< it(13)*aux(15)
it(12) =< aux(3)+aux(4)
it(12) =< aux(3)+aux(8)

#### Cost of phase [12,13]:choose(V,V4,V13,V11,Out) -> [choose(V',V4',V13',V11',Out')] 
1*it(12)+2*it(13)+0
  Such that:it(13) =< V4-V4'
aux(4) =< V11
aux(8) =< V11-V11'
aux(15) =< V4
it(13) =< aux(15)
aux(3) =< it(13)*aux(15)
it(12) =< aux(3)+aux(4)
it(12) =< aux(3)+aux(8)

#### Cost of phase [12,13]:choose(V,V4,V13,V11,Out) -> [choose(V',V4',V13',V11',Out')] 
1*it(12)+2*it(13)+0
  Such that:it(13) =< V4-V4'
aux(4) =< V11
aux(8) =< V11-V11'
aux(15) =< V4
it(13) =< aux(15)
aux(3) =< it(13)*aux(15)
it(12) =< aux(3)+aux(4)
it(12) =< aux(3)+aux(8)

#### Cost of phase [12,13]:choose(V,V4,V13,V11,Out) -> [choose(V',V4',V13',V11',Out')] 
1*it(12)+2*it(13)+0
  Such that:it(13) =< V4-V4'
aux(4) =< V11
aux(8) =< V11-V11'
aux(15) =< V4
it(13) =< aux(15)
aux(3) =< it(13)*aux(15)
it(12) =< aux(3)+aux(4)
it(12) =< aux(3)+aux(8)

#### Cost of chains of choose(V,V4,V13,V11,Out):
* Chain [[12,13],17]: 1*it(12)+2*it(13)+2
  Such that:aux(16) =< V4
aux(17) =< V11
it(13) =< aux(16)
aux(3) =< it(13)*aux(16)
it(12) =< aux(3)+aux(17)

  with precondition: [V+V4+1=Out,V>=0,V4>=1,V13>=0,V11>=V13+1,V4+2*V13>=3] 

* Chain [[12,13],16]: 1*it(12)+2*it(13)+1
  Such that:aux(15) =< V4
it(13) =< V4+V11
aux(18) =< V11
it(13) =< aux(15)
aux(3) =< it(13)*aux(15)
it(12) =< aux(3)+aux(18)

  with precondition: [V>=0,V13>=0,Out>=1,V11>=V13+1,V4>=Out,V4+2*V13>=3,Out+V13>=2] 

* Chain [[12,13],15]: 1*it(12)+2*it(13)+1
  Such that:aux(19) =< V4
aux(20) =< V11
it(13) =< aux(19)
aux(3) =< it(13)*aux(19)
it(12) =< aux(3)+aux(20)

  with precondition: [V+V4+1=Out,V>=0,V4>=1,V13>=0,V11>=1,V4+V13>=2] 

* Chain [[12,13],14]: 1*it(12)+2*it(13)+0
  Such that:aux(15) =< V4
it(13) =< Out
aux(21) =< V11
it(13) =< aux(15)
aux(3) =< it(13)*aux(15)
it(12) =< aux(3)+aux(21)

  with precondition: [V>=0,V13>=0,V11>=1,Out>=0,V4>=Out+1,Out+V13>=1] 

* Chain [17]: 2
  with precondition: [V13=0,V+V4+1=Out,V>=0,V4>=1,V11>=1] 

* Chain [16]: 1
  with precondition: [V13=0,V>=0,V11>=1,Out>=1,V4>=Out] 

* Chain [15]: 1
  with precondition: [V11=0,V+V4+1=Out,V>=0,V4>=1,V13>=0] 

* Chain [14]: 0
  with precondition: [Out=0,V>=0,V4>=0,V13>=0,V11>=0] 


#### Cost of loops [18,19,20,21,22,23] 

 * loop 18:sort(V,Out) -> [sort(V',Out')] 
2*s(16)+1*s(19)+3
  Such that:s(16) =< 2*V'
s(17) =< V'
s(16) =< s(17)
s(18) =< s(16)*s(17)
s(19) =< s(18)+s(17)

 * loop 19:sort(V,Out) -> [sort(V',Out')] 
2*s(26)+1*s(28)+2
  Such that:s(25) =< V'
s(26) =< s(25)
s(27) =< s(26)*s(25)
s(28) =< s(27)+s(25)

 * loop 20:sort(V,Out) -> [sort(V',Out')] 
3
 * loop 21:sort(V,Out) -> [sort(V',Out')] 
4*s(35)+2*s(37)+4
  Such that:s(34) =< V'
s(35) =< s(34)
s(36) =< s(35)*s(34)
s(37) =< s(36)+s(34)

 * loop 22:sort(V,Out) -> [sort(V',Out')] 
2
 * loop 23:sort(V,Out) -> [sort(V',Out')] 
2
#### Cost of phase [18,19,20,21,22,23]:sort(V,Out) -> [sort(V',Out')] 
16*it(18)+2*s(38)+1*s(39)+6*s(42)+3*s(43)+0
  Such that:aux(31) =< V
aux(32) =< V-V'
it(18) =< aux(31)
it(18) =< aux(32)
aux(27) =< aux(31)
aux(28) =< it(18)*aux(27)
s(38) =< aux(28)*2
s(42) =< aux(28)
s(45) =< s(42)*aux(27)
s(43) =< s(45)+aux(28)
s(38) =< aux(28)
s(41) =< s(38)*aux(31)
s(39) =< s(41)+aux(28)

#### Cost of chains of sort(V,Out):
* Chain [[18,19,20,21,22,23],24]: 16*it(18)+2*s(38)+1*s(39)+6*s(42)+3*s(43)+1
  Such that:aux(33) =< V
it(18) =< aux(33)
aux(27) =< aux(33)
aux(28) =< it(18)*aux(27)
s(38) =< aux(28)*2
s(42) =< aux(28)
s(45) =< s(42)*aux(27)
s(43) =< s(45)+aux(28)
s(38) =< aux(28)
s(41) =< s(38)*aux(33)
s(39) =< s(41)+aux(28)

  with precondition: [V>=1,Out>=0,V>=Out] 

* Chain [24]: 1
  with precondition: [Out=0,V>=0] 


#### Cost of chains of start(V,V4,V13,V11):
* Chain [28]: 12*s(52)+3*s(54)+2*s(61)+1*s(64)+16*s(66)+2*s(69)+6*s(70)+3*s(72)+1*s(74)+3*s(79)+2*s(86)+1*s(89)+3
  Such that:s(65) =< V
s(86) =< V4+V11
s(61) =< 2*V4
aux(38) =< V4
aux(39) =< V11
s(66) =< s(65)
s(67) =< s(65)
s(68) =< s(66)*s(67)
s(69) =< s(68)*2
s(70) =< s(68)
s(71) =< s(70)*s(67)
s(72) =< s(71)+s(68)
s(69) =< s(68)
s(73) =< s(69)*s(65)
s(74) =< s(73)+s(68)
s(52) =< aux(38)
s(53) =< s(52)*aux(38)
s(54) =< s(53)+aux(38)
s(79) =< s(53)+aux(39)
s(86) =< aux(38)
s(88) =< s(86)*aux(38)
s(89) =< s(88)+aux(39)
s(61) =< aux(38)
s(63) =< s(61)*aux(38)
s(64) =< s(63)+aux(38)

  with precondition: [V>=0] 

* Chain [27]: 1
  with precondition: [V4=0,V>=0] 

* Chain [26]: 2
  with precondition: [V13=0,V>=0,V4>=1,V11>=1] 

* Chain [25]: 1
  with precondition: [V11=0,V>=0,V4>=1,V13>=0] 


Closed-form bounds of start(V,V4,V13,V11): 
-------------------------------------
* Chain [28] with precondition: [V>=0] 
    - Upper bound: 16*V+3+14*V*V+5*V*V*V+nat(V4)*16+nat(V4)*6*nat(V4)+nat(2*V4)*nat(V4)+nat(V4+V11)*nat(V4)+nat(V11)*4+nat(2*V4)*2+nat(V4+V11)*2 
    - Complexity: n^3 
* Chain [27] with precondition: [V4=0,V>=0] 
    - Upper bound: 1 
    - Complexity: constant 
* Chain [26] with precondition: [V13=0,V>=0,V4>=1,V11>=1] 
    - Upper bound: 2 
    - Complexity: constant 
* Chain [25] with precondition: [V11=0,V>=0,V4>=1,V13>=0] 
    - Upper bound: 1 
    - Complexity: constant 

### Maximum cost of start(V,V4,V13,V11): max([1,16*V+2+14*V*V+5*V*V*V+nat(V4)*16+nat(V4)*6*nat(V4)+nat(2*V4)*nat(V4)+nat(V4+V11)*nat(V4)+nat(V11)*4+nat(2*V4)*2+nat(V4+V11)*2])+1 
Asymptotic class: n^3 

Time statistics: 
-------------------------------------
* Partial evaluation computed in 64 ms.
* Invariants computed in 147 ms.
   - Backward Invariants 81 ms.
   - Transitive Invariants 28 ms.
* Refinement performed in 307 ms.
* Termination proved in 29 ms.
* Upper bounds computed in 492 ms.
   - Equation cost structures 144 ms.
   - Phase cost structures 233 ms.
   - Chain cost structures 135 ms.
   - Solving cost expressions 8 ms.
* Total analysis performed in 1125 ms.


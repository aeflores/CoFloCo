
Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. non_recursive  : [fun/2]
1. recursive  : [fun2/3]
2. non_recursive  : [fun1/2]
3. recursive  : [fun4/3]
4. non_recursive  : [fun3/2]
5. recursive  : [fun6/3]
6. non_recursive  : [fun5/2]
7. recursive  : [fun8/3]
8. non_recursive  : [fun7/2]
9. recursive  : [fun10/3]
10. non_recursive  : [fun9/2]
11. recursive  : [fun12/3]
12. non_recursive  : [fun11/2]
13. recursive  : [fun14/3]
14. non_recursive  : [fun13/2]
15. recursive  : [fun16/3]
16. non_recursive  : [fun15/2]
17. recursive  : [fun18/3]
18. non_recursive  : [fun17/2]
19. recursive  : [fun20/3]
20. non_recursive  : [fun19/2]
21. non_recursive  : [start/2]

#### Obtained direct recursion through partial evaluation 
0. SCC is completely evaluated into other SCCs
1. SCC is partially evaluated into fun2/3
2. SCC is completely evaluated into other SCCs
3. SCC is partially evaluated into fun4/3
4. SCC is completely evaluated into other SCCs
5. SCC is partially evaluated into fun6/3
6. SCC is completely evaluated into other SCCs
7. SCC is partially evaluated into fun8/3
8. SCC is completely evaluated into other SCCs
9. SCC is partially evaluated into fun10/3
10. SCC is completely evaluated into other SCCs
11. SCC is partially evaluated into fun12/3
12. SCC is completely evaluated into other SCCs
13. SCC is partially evaluated into fun14/3
14. SCC is completely evaluated into other SCCs
15. SCC is partially evaluated into fun16/3
16. SCC is completely evaluated into other SCCs
17. SCC is partially evaluated into fun18/3
18. SCC is completely evaluated into other SCCs
19. SCC is partially evaluated into fun20/3
20. SCC is completely evaluated into other SCCs
21. SCC is partially evaluated into start/2

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations fun2/3 
* CE 24 is refined into CE [43] 
* CE 23 is refined into CE [44] 


#### Refined cost equations fun2/3 
* CE 43: fun2(V,V3,Out) = 0
     [V3>=0,V>=0,Out=0] 
* CE 44: fun2(V,V3,Out) = 2+ fun2(W3,V3,X3)
     [W3>=0,V3>=0,X3+1=Out,W3+1=V] 

### Cost equations --> "Loop" of fun2/3 
* CEs [44] --> Loop 22 
* CEs [43] --> Loop 23 

#### Loops of fun2/3 
* Loop 22: fun2(V,V3,Out)->  fun2(V',V3,Out')
                  [V'>=0,V3>=0,Out=Out'+1,V'+1=V] 
* Loop 23: fun2(V,V3,Out) [V3>=0,V>=0,Out=0] 

### Ranking functions of CR fun2(V,V3,Out) 
* RF of phase [22]: [V]

#### Partial ranking functions of CR fun2(V,V3,Out) 
* Partial RF of phase [22]:
  - RF of loop [22:1]:
    V


### Resulting Chains:fun2(V,V3,Out) 
* [[22],23]
* [23]


### Merging Chains  fun2/3 into  External patterns of execution 
* [[23]] --> 1 
* [[23,[22]]] --> 2 


### Specialization of cost equations fun4/3 
* CE 26 is refined into CE [45] 
* CE 25 is refined into CE [46,47] 


#### Refined cost equations fun4/3 
* CE 45: fun4(V,V3,Out) = 0
     [V3>=0,V>=0,Out=0] 
* CE 46: fun4(V,V3,Out) = 2+ fun2(V3,V3,W3):1+ fun4(X3,V3,Y3)
     [X3>=0,V3>=0,Y3+1=Out,X3+1=V,W3=0] 
* CE 47: fun4(V,V3,Out) = 2+ fun2(V3,V3,W3):2+ fun4(X3,V3,Y3)
     [V3>=W3,X3>=0,W3>=1,W3+Y3+1=Out,X3+1=V] 

### Cost equations --> "Loop" of fun4/3 
* CEs [47] --> Loop 24 
* CEs [46] --> Loop 25 
* CEs [45] --> Loop 26 

#### Loops of fun4/3 
* Loop 24: fun4(V,V3,Out)->  fun4(V',V3,Out')
                  [V3+Out'+1>=Out,Out>=Out'+2,V>=1,V=V'+1] 
* Loop 25: fun4(V,V3,Out)->  fun4(V',V3,Out')
                  [V3>=0,V>=1,Out=Out'+1,V=V'+1] 
* Loop 26: fun4(V,V3,Out) [V3>=0,V>=0,Out=0] 

### Ranking functions of CR fun4(V,V3,Out) 
* RF of phase [24,25]: [V]

#### Partial ranking functions of CR fun4(V,V3,Out) 
* Partial RF of phase [24,25]:
  - RF of loop [24:1,25:1]:
    V


### Resulting Chains:fun4(V,V3,Out) 
* [[24,25],26]
* [26]


### Merging Chains  fun4/3 into  External patterns of execution 
* [[26]] --> 1 
* [[26,[24,25]]] --> 2 


### Specialization of cost equations fun6/3 
* CE 28 is refined into CE [48] 
* CE 27 is refined into CE [49,50] 


#### Refined cost equations fun6/3 
* CE 48: fun6(V,V3,Out) = 0
     [V3>=0,V>=0,Out=0] 
* CE 49: fun6(V,V3,Out) = 2+ fun4(V3,V3,W3):1+ fun6(X3,V3,Y3)
     [X3>=0,V3>=0,Y3+1=Out,X3+1=V,W3=0] 
* CE 50: fun6(V,V3,Out) = 2+ fun4(V3,V3,W3):2+ fun6(X3,V3,Y3)
     [X3>=0,W3>=1,V3>=1,W3+Y3+1=Out,X3+1=V] 

### Cost equations --> "Loop" of fun6/3 
* CEs [50] --> Loop 27 
* CEs [49] --> Loop 28 
* CEs [48] --> Loop 29 

#### Loops of fun6/3 
* Loop 27: fun6(V,V3,Out)->  fun6(V',V3,Out')
                  [Out>=Out'+2,V3>=1,V>=1,V=V'+1] 
* Loop 28: fun6(V,V3,Out)->  fun6(V',V3,Out')
                  [V3>=0,V>=1,Out=Out'+1,V=V'+1] 
* Loop 29: fun6(V,V3,Out) [V3>=0,V>=0,Out=0] 

### Ranking functions of CR fun6(V,V3,Out) 
* RF of phase [27,28]: [V]

#### Partial ranking functions of CR fun6(V,V3,Out) 
* Partial RF of phase [27,28]:
  - RF of loop [27:1,28:1]:
    V


### Resulting Chains:fun6(V,V3,Out) 
* [[27,28],29]
* [29]


### Merging Chains  fun6/3 into  External patterns of execution 
* [[29]] --> 1 
* [[29,[27,28]]] --> 2 


### Specialization of cost equations fun8/3 
* CE 30 is refined into CE [51] 
* CE 29 is refined into CE [52,53] 


#### Refined cost equations fun8/3 
* CE 51: fun8(V,V3,Out) = 0
     [V3>=0,V>=0,Out=0] 
* CE 52: fun8(V,V3,Out) = 2+ fun6(V3,V3,W3):1+ fun8(X3,V3,Y3)
     [X3>=0,V3>=0,Y3+1=Out,X3+1=V,W3=0] 
* CE 53: fun8(V,V3,Out) = 2+ fun6(V3,V3,W3):2+ fun8(X3,V3,Y3)
     [X3>=0,W3>=1,V3>=1,W3+Y3+1=Out,X3+1=V] 

### Cost equations --> "Loop" of fun8/3 
* CEs [53] --> Loop 30 
* CEs [52] --> Loop 31 
* CEs [51] --> Loop 32 

#### Loops of fun8/3 
* Loop 30: fun8(V,V3,Out)->  fun8(V',V3,Out')
                  [Out>=Out'+2,V3>=1,V>=1,V=V'+1] 
* Loop 31: fun8(V,V3,Out)->  fun8(V',V3,Out')
                  [V3>=0,V>=1,Out=Out'+1,V=V'+1] 
* Loop 32: fun8(V,V3,Out) [V3>=0,V>=0,Out=0] 

### Ranking functions of CR fun8(V,V3,Out) 
* RF of phase [30,31]: [V]

#### Partial ranking functions of CR fun8(V,V3,Out) 
* Partial RF of phase [30,31]:
  - RF of loop [30:1,31:1]:
    V


### Resulting Chains:fun8(V,V3,Out) 
* [[30,31],32]
* [32]


### Merging Chains  fun8/3 into  External patterns of execution 
* [[32]] --> 1 
* [[32,[30,31]]] --> 2 


### Specialization of cost equations fun10/3 
* CE 32 is refined into CE [54] 
* CE 31 is refined into CE [55,56] 


#### Refined cost equations fun10/3 
* CE 54: fun10(V,V3,Out) = 0
     [V3>=0,V>=0,Out=0] 
* CE 55: fun10(V,V3,Out) = 2+ fun8(V3,V3,W3):1+ fun10(X3,V3,Y3)
     [X3>=0,V3>=0,Y3+1=Out,X3+1=V,W3=0] 
* CE 56: fun10(V,V3,Out) = 2+ fun8(V3,V3,W3):2+ fun10(X3,V3,Y3)
     [X3>=0,W3>=1,V3>=1,W3+Y3+1=Out,X3+1=V] 

### Cost equations --> "Loop" of fun10/3 
* CEs [56] --> Loop 33 
* CEs [55] --> Loop 34 
* CEs [54] --> Loop 35 

#### Loops of fun10/3 
* Loop 33: fun10(V,V3,Out)->  fun10(V',V3,Out')
                  [Out>=Out'+2,V3>=1,V>=1,V=V'+1] 
* Loop 34: fun10(V,V3,Out)->  fun10(V',V3,Out')
                  [V3>=0,V>=1,Out=Out'+1,V=V'+1] 
* Loop 35: fun10(V,V3,Out) [V3>=0,V>=0,Out=0] 

### Ranking functions of CR fun10(V,V3,Out) 
* RF of phase [33,34]: [V]

#### Partial ranking functions of CR fun10(V,V3,Out) 
* Partial RF of phase [33,34]:
  - RF of loop [33:1,34:1]:
    V


### Resulting Chains:fun10(V,V3,Out) 
* [[33,34],35]
* [35]


### Merging Chains  fun10/3 into  External patterns of execution 
* [[35]] --> 1 
* [[35,[33,34]]] --> 2 


### Specialization of cost equations fun12/3 
* CE 34 is refined into CE [57] 
* CE 33 is refined into CE [58,59] 


#### Refined cost equations fun12/3 
* CE 57: fun12(V,V3,Out) = 0
     [V3>=0,V>=0,Out=0] 
* CE 58: fun12(V,V3,Out) = 2+ fun10(V3,V3,W3):1+ fun12(X3,V3,Y3)
     [X3>=0,V3>=0,Y3+1=Out,X3+1=V,W3=0] 
* CE 59: fun12(V,V3,Out) = 2+ fun10(V3,V3,W3):2+ fun12(X3,V3,Y3)
     [X3>=0,W3>=1,V3>=1,W3+Y3+1=Out,X3+1=V] 

### Cost equations --> "Loop" of fun12/3 
* CEs [59] --> Loop 36 
* CEs [58] --> Loop 37 
* CEs [57] --> Loop 38 

#### Loops of fun12/3 
* Loop 36: fun12(V,V3,Out)->  fun12(V',V3,Out')
                  [Out>=Out'+2,V3>=1,V>=1,V=V'+1] 
* Loop 37: fun12(V,V3,Out)->  fun12(V',V3,Out')
                  [V3>=0,V>=1,Out=Out'+1,V=V'+1] 
* Loop 38: fun12(V,V3,Out) [V3>=0,V>=0,Out=0] 

### Ranking functions of CR fun12(V,V3,Out) 
* RF of phase [36,37]: [V]

#### Partial ranking functions of CR fun12(V,V3,Out) 
* Partial RF of phase [36,37]:
  - RF of loop [36:1,37:1]:
    V


### Resulting Chains:fun12(V,V3,Out) 
* [[36,37],38]
* [38]


### Merging Chains  fun12/3 into  External patterns of execution 
* [[38]] --> 1 
* [[38,[36,37]]] --> 2 


### Specialization of cost equations fun14/3 
* CE 36 is refined into CE [60] 
* CE 35 is refined into CE [61,62] 


#### Refined cost equations fun14/3 
* CE 60: fun14(V,V3,Out) = 0
     [V3>=0,V>=0,Out=0] 
* CE 61: fun14(V,V3,Out) = 2+ fun12(V3,V3,W3):1+ fun14(X3,V3,Y3)
     [X3>=0,V3>=0,Y3+1=Out,X3+1=V,W3=0] 
* CE 62: fun14(V,V3,Out) = 2+ fun12(V3,V3,W3):2+ fun14(X3,V3,Y3)
     [X3>=0,W3>=1,V3>=1,W3+Y3+1=Out,X3+1=V] 

### Cost equations --> "Loop" of fun14/3 
* CEs [62] --> Loop 39 
* CEs [61] --> Loop 40 
* CEs [60] --> Loop 41 

#### Loops of fun14/3 
* Loop 39: fun14(V,V3,Out)->  fun14(V',V3,Out')
                  [Out>=Out'+2,V3>=1,V>=1,V=V'+1] 
* Loop 40: fun14(V,V3,Out)->  fun14(V',V3,Out')
                  [V3>=0,V>=1,Out=Out'+1,V=V'+1] 
* Loop 41: fun14(V,V3,Out) [V3>=0,V>=0,Out=0] 

### Ranking functions of CR fun14(V,V3,Out) 
* RF of phase [39,40]: [V]

#### Partial ranking functions of CR fun14(V,V3,Out) 
* Partial RF of phase [39,40]:
  - RF of loop [39:1,40:1]:
    V


### Resulting Chains:fun14(V,V3,Out) 
* [[39,40],41]
* [41]


### Merging Chains  fun14/3 into  External patterns of execution 
* [[41]] --> 1 
* [[41,[39,40]]] --> 2 


### Specialization of cost equations fun16/3 
* CE 38 is refined into CE [63] 
* CE 37 is refined into CE [64,65] 


#### Refined cost equations fun16/3 
* CE 63: fun16(V,V3,Out) = 0
     [V3>=0,V>=0,Out=0] 
* CE 64: fun16(V,V3,Out) = 2+ fun14(V3,V3,W3):1+ fun16(X3,V3,Y3)
     [X3>=0,V3>=0,Y3+1=Out,X3+1=V,W3=0] 
* CE 65: fun16(V,V3,Out) = 2+ fun14(V3,V3,W3):2+ fun16(X3,V3,Y3)
     [X3>=0,W3>=1,V3>=1,W3+Y3+1=Out,X3+1=V] 

### Cost equations --> "Loop" of fun16/3 
* CEs [65] --> Loop 42 
* CEs [64] --> Loop 43 
* CEs [63] --> Loop 44 

#### Loops of fun16/3 
* Loop 42: fun16(V,V3,Out)->  fun16(V',V3,Out')
                  [Out>=Out'+2,V3>=1,V>=1,V=V'+1] 
* Loop 43: fun16(V,V3,Out)->  fun16(V',V3,Out')
                  [V3>=0,V>=1,Out=Out'+1,V=V'+1] 
* Loop 44: fun16(V,V3,Out) [V3>=0,V>=0,Out=0] 

### Ranking functions of CR fun16(V,V3,Out) 
* RF of phase [42,43]: [V]

#### Partial ranking functions of CR fun16(V,V3,Out) 
* Partial RF of phase [42,43]:
  - RF of loop [42:1,43:1]:
    V


### Resulting Chains:fun16(V,V3,Out) 
* [[42,43],44]
* [44]


### Merging Chains  fun16/3 into  External patterns of execution 
* [[44]] --> 1 
* [[44,[42,43]]] --> 2 


### Specialization of cost equations fun18/3 
* CE 40 is refined into CE [66] 
* CE 39 is refined into CE [67,68] 


#### Refined cost equations fun18/3 
* CE 66: fun18(V,V3,Out) = 0
     [V3>=0,V>=0,Out=0] 
* CE 67: fun18(V,V3,Out) = 2+ fun16(V3,V3,W3):1+ fun18(X3,V3,Y3)
     [X3>=0,V3>=0,Y3+1=Out,X3+1=V,W3=0] 
* CE 68: fun18(V,V3,Out) = 2+ fun16(V3,V3,W3):2+ fun18(X3,V3,Y3)
     [X3>=0,W3>=1,V3>=1,W3+Y3+1=Out,X3+1=V] 

### Cost equations --> "Loop" of fun18/3 
* CEs [68] --> Loop 45 
* CEs [67] --> Loop 46 
* CEs [66] --> Loop 47 

#### Loops of fun18/3 
* Loop 45: fun18(V,V3,Out)->  fun18(V',V3,Out')
                  [Out>=Out'+2,V3>=1,V>=1,V=V'+1] 
* Loop 46: fun18(V,V3,Out)->  fun18(V',V3,Out')
                  [V3>=0,V>=1,Out=Out'+1,V=V'+1] 
* Loop 47: fun18(V,V3,Out) [V3>=0,V>=0,Out=0] 

### Ranking functions of CR fun18(V,V3,Out) 
* RF of phase [45,46]: [V]

#### Partial ranking functions of CR fun18(V,V3,Out) 
* Partial RF of phase [45,46]:
  - RF of loop [45:1,46:1]:
    V


### Resulting Chains:fun18(V,V3,Out) 
* [[45,46],47]
* [47]


### Merging Chains  fun18/3 into  External patterns of execution 
* [[47]] --> 1 
* [[47,[45,46]]] --> 2 


### Specialization of cost equations fun20/3 
* CE 42 is refined into CE [69] 
* CE 41 is refined into CE [70,71] 


#### Refined cost equations fun20/3 
* CE 69: fun20(V,V3,Out) = 0
     [V3>=0,V>=0,Out=0] 
* CE 70: fun20(V,V3,Out) = 2+ fun18(V3,V3,W3):1+ fun20(X3,V3,Y3)
     [X3>=0,V3>=0,Y3+1=Out,X3+1=V,W3=0] 
* CE 71: fun20(V,V3,Out) = 2+ fun18(V3,V3,W3):2+ fun20(X3,V3,Y3)
     [X3>=0,W3>=1,V3>=1,W3+Y3+1=Out,X3+1=V] 

### Cost equations --> "Loop" of fun20/3 
* CEs [71] --> Loop 48 
* CEs [70] --> Loop 49 
* CEs [69] --> Loop 50 

#### Loops of fun20/3 
* Loop 48: fun20(V,V3,Out)->  fun20(V',V3,Out')
                  [Out>=Out'+2,V3>=1,V>=1,V=V'+1] 
* Loop 49: fun20(V,V3,Out)->  fun20(V',V3,Out')
                  [V3>=0,V>=1,Out=Out'+1,V=V'+1] 
* Loop 50: fun20(V,V3,Out) [V3>=0,V>=0,Out=0] 

### Ranking functions of CR fun20(V,V3,Out) 
* RF of phase [48,49]: [V]

#### Partial ranking functions of CR fun20(V,V3,Out) 
* Partial RF of phase [48,49]:
  - RF of loop [48:1,49:1]:
    V


### Resulting Chains:fun20(V,V3,Out) 
* [[48,49],50]
* [50]


### Merging Chains  fun20/3 into  External patterns of execution 
* [[50]] --> 1 
* [[50,[48,49]]] --> 2 


### Specialization of cost equations start/2 
* CE 2 is refined into CE [72] 
* CE 3 is refined into CE [73,74] 
* CE 4 is refined into CE [75,76] 
* CE 5 is refined into CE [77,78] 
* CE 6 is refined into CE [79,80] 
* CE 7 is refined into CE [81,82] 
* CE 8 is refined into CE [83,84] 
* CE 9 is refined into CE [85,86] 
* CE 10 is refined into CE [87,88] 
* CE 11 is refined into CE [89,90] 
* CE 12 is refined into CE [91,92] 
* CE 13 is refined into CE [93,94] 
* CE 14 is refined into CE [95,96] 
* CE 15 is refined into CE [97,98] 
* CE 16 is refined into CE [99,100] 
* CE 17 is refined into CE [101,102] 
* CE 18 is refined into CE [103,104] 
* CE 19 is refined into CE [105,106] 
* CE 20 is refined into CE [107,108] 
* CE 21 is refined into CE [109,110] 
* CE 22 is refined into CE [111,112] 


#### Refined cost equations start/2 
* CE 72: start(V,V3) = 1
     [V>=0] 
* CE 73: start(V,V3) = 1+ fun2(V,V,W3):1
     [V>=0,W3=0] 
* CE 74: start(V,V3) = 1+ fun2(V,V,W3):2
     [V>=W3,W3>=1] 
* CE 75: start(V,V3) = 0+ fun2(V,V3,W3):1
     [V3>=0,V>=0,W3=0] 
* CE 76: start(V,V3) = 0+ fun2(V,V3,W3):2
     [V>=W3,W3>=1,V3>=0] 
* CE 77: start(V,V3) = 1+ fun4(V,V,W3):1
     [V>=0,W3=0] 
* CE 78: start(V,V3) = 1+ fun4(V,V,W3):2
     [W3>=1,V>=1] 
* CE 79: start(V,V3) = 0+ fun4(V,V3,W3):1
     [V3>=0,V>=0,W3=0] 
* CE 80: start(V,V3) = 0+ fun4(V,V3,W3):2
     [W3>=1,V3>=0,V>=1] 
* CE 81: start(V,V3) = 1+ fun6(V,V,W3):1
     [V>=0,W3=0] 
* CE 82: start(V,V3) = 1+ fun6(V,V,W3):2
     [W3>=1,V>=1] 
* CE 83: start(V,V3) = 0+ fun6(V,V3,W3):1
     [V3>=0,V>=0,W3=0] 
* CE 84: start(V,V3) = 0+ fun6(V,V3,W3):2
     [W3>=1,V3>=0,V>=1] 
* CE 85: start(V,V3) = 1+ fun8(V,V,W3):1
     [V>=0,W3=0] 
* CE 86: start(V,V3) = 1+ fun8(V,V,W3):2
     [W3>=1,V>=1] 
* CE 87: start(V,V3) = 0+ fun8(V,V3,W3):1
     [V3>=0,V>=0,W3=0] 
* CE 88: start(V,V3) = 0+ fun8(V,V3,W3):2
     [W3>=1,V3>=0,V>=1] 
* CE 89: start(V,V3) = 1+ fun10(V,V,W3):1
     [V>=0,W3=0] 
* CE 90: start(V,V3) = 1+ fun10(V,V,W3):2
     [W3>=1,V>=1] 
* CE 91: start(V,V3) = 0+ fun10(V,V3,W3):1
     [V3>=0,V>=0,W3=0] 
* CE 92: start(V,V3) = 0+ fun10(V,V3,W3):2
     [W3>=1,V3>=0,V>=1] 
* CE 93: start(V,V3) = 1+ fun12(V,V,W3):1
     [V>=0,W3=0] 
* CE 94: start(V,V3) = 1+ fun12(V,V,W3):2
     [W3>=1,V>=1] 
* CE 95: start(V,V3) = 0+ fun12(V,V3,W3):1
     [V3>=0,V>=0,W3=0] 
* CE 96: start(V,V3) = 0+ fun12(V,V3,W3):2
     [W3>=1,V3>=0,V>=1] 
* CE 97: start(V,V3) = 1+ fun14(V,V,W3):1
     [V>=0,W3=0] 
* CE 98: start(V,V3) = 1+ fun14(V,V,W3):2
     [W3>=1,V>=1] 
* CE 99: start(V,V3) = 0+ fun14(V,V3,W3):1
     [V3>=0,V>=0,W3=0] 
* CE 100: start(V,V3) = 0+ fun14(V,V3,W3):2
     [W3>=1,V3>=0,V>=1] 
* CE 101: start(V,V3) = 1+ fun16(V,V,W3):1
     [V>=0,W3=0] 
* CE 102: start(V,V3) = 1+ fun16(V,V,W3):2
     [W3>=1,V>=1] 
* CE 103: start(V,V3) = 0+ fun16(V,V3,W3):1
     [V3>=0,V>=0,W3=0] 
* CE 104: start(V,V3) = 0+ fun16(V,V3,W3):2
     [W3>=1,V3>=0,V>=1] 
* CE 105: start(V,V3) = 1+ fun18(V,V,W3):1
     [V>=0,W3=0] 
* CE 106: start(V,V3) = 1+ fun18(V,V,W3):2
     [W3>=1,V>=1] 
* CE 107: start(V,V3) = 0+ fun18(V,V3,W3):1
     [V3>=0,V>=0,W3=0] 
* CE 108: start(V,V3) = 0+ fun18(V,V3,W3):2
     [W3>=1,V3>=0,V>=1] 
* CE 109: start(V,V3) = 1+ fun20(V,V,W3):1
     [V>=0,W3=0] 
* CE 110: start(V,V3) = 1+ fun20(V,V,W3):2
     [W3>=1,V>=1] 
* CE 111: start(V,V3) = 0+ fun20(V,V3,W3):1
     [V3>=0,V>=0,W3=0] 
* CE 112: start(V,V3) = 0+ fun20(V,V3,W3):2
     [W3>=1,V3>=0,V>=1] 

### Cost equations --> "Loop" of start/2 
* CEs [72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112] --> Loop 51 

#### Loops of start/2 
* Loop 51: start(V,V3) [V>=0] 

### Ranking functions of CR start(V,V3) 

#### Partial ranking functions of CR start(V,V3) 


### Resulting Chains:start(V,V3) 
* [51]


### Merging Chains  start/2 into  External patterns of execution 
* [[51]] --> 1 


Computing Bounds
=====================================

#### Cost of loops [22] 

 * loop 22:fun2(V,V3,Out) -> [fun2(V',V3',Out')] 
2
#### Cost of phase [22]:fun2(V,V3,Out) -> [fun2(V',V3',Out')] 
2*it(22)+0
  Such that:it(22) =< V
it(22) =< V-V'

#### Cost of chains of fun2(V,V3,Out):
* Chain [[22],23]: 2*it(22)+0
  Such that:it(22) =< Out

  with precondition: [V3>=0,Out>=1,V>=Out] 

* Chain [23]: 0
  with precondition: [Out=0,V>=0,V3>=0] 


#### Cost of loops [24,25] 

 * loop 24:fun4(V,V3,Out) -> [fun4(V',V3',Out')] 
2*s(2)+2
  Such that:s(2) =< V3'

 * loop 25:fun4(V,V3,Out) -> [fun4(V',V3',Out')] 
2
#### Cost of phase [24,25]:fun4(V,V3,Out) -> [fun4(V',V3',Out')] 
4*it(24)+2*s(3)+0
  Such that:aux(1) =< V3
aux(2) =< V
aux(3) =< V-V'
it(24) =< aux(2)
it(24) =< aux(3)
s(3) =< it(24)*aux(1)

#### Cost of chains of fun4(V,V3,Out):
* Chain [[24,25],26]: 4*it(24)+2*s(3)+0
  Such that:aux(1) =< V3
aux(4) =< V
it(24) =< aux(4)
s(3) =< it(24)*aux(1)

  with precondition: [V>=1,V3>=0,Out>=1] 

* Chain [26]: 0
  with precondition: [Out=0,V>=0,V3>=0] 


#### Cost of loops [27,28] 

 * loop 27:fun6(V,V3,Out) -> [fun6(V',V3',Out')] 
4*s(9)+2*s(10)+2
  Such that:s(8) =< V3'
s(9) =< s(8)
s(10) =< s(9)*s(8)

 * loop 28:fun6(V,V3,Out) -> [fun6(V',V3',Out')] 
2
#### Cost of phase [27,28]:fun6(V,V3,Out) -> [fun6(V',V3',Out')] 
4*it(27)+4*s(11)+2*s(12)+0
  Such that:s(8) =< V3
aux(7) =< V
aux(8) =< V-V'
it(27) =< aux(7)
it(27) =< aux(8)
aux(6) =< s(8)
s(13) =< it(27)*aux(6)
s(11) =< s(13)
s(12) =< s(11)*s(8)

#### Cost of chains of fun6(V,V3,Out):
* Chain [[27,28],29]: 4*it(27)+4*s(11)+2*s(12)+0
  Such that:s(8) =< V3
aux(9) =< V
it(27) =< aux(9)
aux(6) =< s(8)
s(13) =< it(27)*aux(6)
s(11) =< s(13)
s(12) =< s(11)*s(8)

  with precondition: [V>=1,V3>=0,Out>=1] 

* Chain [29]: 0
  with precondition: [Out=0,V>=0,V3>=0] 


#### Cost of loops [30,31] 

 * loop 30:fun8(V,V3,Out) -> [fun8(V',V3',Out')] 
4*s(22)+4*s(25)+2*s(26)+2
  Such that:s(21) =< V3'
s(22) =< s(21)
s(23) =< s(21)
s(24) =< s(22)*s(23)
s(25) =< s(24)
s(26) =< s(25)*s(21)

 * loop 31:fun8(V,V3,Out) -> [fun8(V',V3',Out')] 
2
#### Cost of phase [30,31]:fun8(V,V3,Out) -> [fun8(V',V3',Out')] 
4*it(30)+4*s(27)+4*s(28)+2*s(29)+0
  Such that:s(21) =< V3
aux(12) =< V
aux(13) =< V-V'
it(30) =< aux(12)
it(30) =< aux(13)
aux(11) =< s(21)
s(31) =< it(30)*aux(11)
s(27) =< s(31)
s(30) =< s(27)*aux(11)
s(28) =< s(30)
s(29) =< s(28)*s(21)

#### Cost of chains of fun8(V,V3,Out):
* Chain [[30,31],32]: 4*it(30)+4*s(27)+4*s(28)+2*s(29)+0
  Such that:s(21) =< V3
aux(14) =< V
it(30) =< aux(14)
aux(11) =< s(21)
s(31) =< it(30)*aux(11)
s(27) =< s(31)
s(30) =< s(27)*aux(11)
s(28) =< s(30)
s(29) =< s(28)*s(21)

  with precondition: [V>=1,V3>=0,Out>=1] 

* Chain [32]: 0
  with precondition: [Out=0,V>=0,V3>=0] 


#### Cost of loops [33,34] 

 * loop 33:fun10(V,V3,Out) -> [fun10(V',V3',Out')] 
4*s(42)+4*s(45)+4*s(47)+2*s(48)+2
  Such that:s(41) =< V3'
s(42) =< s(41)
s(43) =< s(41)
s(44) =< s(42)*s(43)
s(45) =< s(44)
s(46) =< s(45)*s(43)
s(47) =< s(46)
s(48) =< s(47)*s(41)

 * loop 34:fun10(V,V3,Out) -> [fun10(V',V3',Out')] 
2
#### Cost of phase [33,34]:fun10(V,V3,Out) -> [fun10(V',V3',Out')] 
4*it(33)+4*s(49)+4*s(50)+4*s(51)+2*s(52)+0
  Such that:s(41) =< V3
aux(17) =< V
aux(18) =< V-V'
it(33) =< aux(17)
it(33) =< aux(18)
aux(16) =< s(41)
s(55) =< it(33)*aux(16)
s(49) =< s(55)
s(54) =< s(49)*aux(16)
s(50) =< s(54)
s(53) =< s(50)*aux(16)
s(51) =< s(53)
s(52) =< s(51)*s(41)

#### Cost of chains of fun10(V,V3,Out):
* Chain [[33,34],35]: 4*it(33)+4*s(49)+4*s(50)+4*s(51)+2*s(52)+0
  Such that:s(41) =< V3
aux(19) =< V
it(33) =< aux(19)
aux(16) =< s(41)
s(55) =< it(33)*aux(16)
s(49) =< s(55)
s(54) =< s(49)*aux(16)
s(50) =< s(54)
s(53) =< s(50)*aux(16)
s(51) =< s(53)
s(52) =< s(51)*s(41)

  with precondition: [V>=1,V3>=0,Out>=1] 

* Chain [35]: 0
  with precondition: [Out=0,V>=0,V3>=0] 


#### Cost of loops [36,37] 

 * loop 36:fun12(V,V3,Out) -> [fun12(V',V3',Out')] 
4*s(68)+4*s(71)+4*s(73)+4*s(75)+2*s(76)+2
  Such that:s(67) =< V3'
s(68) =< s(67)
s(69) =< s(67)
s(70) =< s(68)*s(69)
s(71) =< s(70)
s(72) =< s(71)*s(69)
s(73) =< s(72)
s(74) =< s(73)*s(69)
s(75) =< s(74)
s(76) =< s(75)*s(67)

 * loop 37:fun12(V,V3,Out) -> [fun12(V',V3',Out')] 
2
#### Cost of phase [36,37]:fun12(V,V3,Out) -> [fun12(V',V3',Out')] 
4*it(36)+4*s(77)+4*s(78)+4*s(79)+4*s(80)+2*s(81)+0
  Such that:s(67) =< V3
aux(22) =< V
aux(23) =< V-V'
it(36) =< aux(22)
it(36) =< aux(23)
aux(21) =< s(67)
s(85) =< it(36)*aux(21)
s(77) =< s(85)
s(84) =< s(77)*aux(21)
s(78) =< s(84)
s(83) =< s(78)*aux(21)
s(79) =< s(83)
s(82) =< s(79)*aux(21)
s(80) =< s(82)
s(81) =< s(80)*s(67)

#### Cost of chains of fun12(V,V3,Out):
* Chain [[36,37],38]: 4*it(36)+4*s(77)+4*s(78)+4*s(79)+4*s(80)+2*s(81)+0
  Such that:s(67) =< V3
aux(24) =< V
it(36) =< aux(24)
aux(21) =< s(67)
s(85) =< it(36)*aux(21)
s(77) =< s(85)
s(84) =< s(77)*aux(21)
s(78) =< s(84)
s(83) =< s(78)*aux(21)
s(79) =< s(83)
s(82) =< s(79)*aux(21)
s(80) =< s(82)
s(81) =< s(80)*s(67)

  with precondition: [V>=1,V3>=0,Out>=1] 

* Chain [38]: 0
  with precondition: [Out=0,V>=0,V3>=0] 


#### Cost of loops [39,40] 

 * loop 39:fun14(V,V3,Out) -> [fun14(V',V3',Out')] 
4*s(100)+4*s(103)+4*s(105)+4*s(107)+4*s(109)+2*s(110)+2
  Such that:s(99) =< V3'
s(100) =< s(99)
s(101) =< s(99)
s(102) =< s(100)*s(101)
s(103) =< s(102)
s(104) =< s(103)*s(101)
s(105) =< s(104)
s(106) =< s(105)*s(101)
s(107) =< s(106)
s(108) =< s(107)*s(101)
s(109) =< s(108)
s(110) =< s(109)*s(99)

 * loop 40:fun14(V,V3,Out) -> [fun14(V',V3',Out')] 
2
#### Cost of phase [39,40]:fun14(V,V3,Out) -> [fun14(V',V3',Out')] 
4*it(39)+4*s(111)+4*s(112)+4*s(113)+4*s(114)+4*s(115)+2*s(116)+0
  Such that:s(99) =< V3
aux(27) =< V
aux(28) =< V-V'
it(39) =< aux(27)
it(39) =< aux(28)
aux(26) =< s(99)
s(121) =< it(39)*aux(26)
s(111) =< s(121)
s(120) =< s(111)*aux(26)
s(112) =< s(120)
s(119) =< s(112)*aux(26)
s(113) =< s(119)
s(118) =< s(113)*aux(26)
s(114) =< s(118)
s(117) =< s(114)*aux(26)
s(115) =< s(117)
s(116) =< s(115)*s(99)

#### Cost of chains of fun14(V,V3,Out):
* Chain [[39,40],41]: 4*it(39)+4*s(111)+4*s(112)+4*s(113)+4*s(114)+4*s(115)+2*s(116)+0
  Such that:s(99) =< V3
aux(29) =< V
it(39) =< aux(29)
aux(26) =< s(99)
s(121) =< it(39)*aux(26)
s(111) =< s(121)
s(120) =< s(111)*aux(26)
s(112) =< s(120)
s(119) =< s(112)*aux(26)
s(113) =< s(119)
s(118) =< s(113)*aux(26)
s(114) =< s(118)
s(117) =< s(114)*aux(26)
s(115) =< s(117)
s(116) =< s(115)*s(99)

  with precondition: [V>=1,V3>=0,Out>=1] 

* Chain [41]: 0
  with precondition: [Out=0,V>=0,V3>=0] 


#### Cost of loops [42,43] 

 * loop 42:fun16(V,V3,Out) -> [fun16(V',V3',Out')] 
4*s(138)+4*s(141)+4*s(143)+4*s(145)+4*s(147)+4*s(149)+2*s(150)+2
  Such that:s(137) =< V3'
s(138) =< s(137)
s(139) =< s(137)
s(140) =< s(138)*s(139)
s(141) =< s(140)
s(142) =< s(141)*s(139)
s(143) =< s(142)
s(144) =< s(143)*s(139)
s(145) =< s(144)
s(146) =< s(145)*s(139)
s(147) =< s(146)
s(148) =< s(147)*s(139)
s(149) =< s(148)
s(150) =< s(149)*s(137)

 * loop 43:fun16(V,V3,Out) -> [fun16(V',V3',Out')] 
2
#### Cost of phase [42,43]:fun16(V,V3,Out) -> [fun16(V',V3',Out')] 
4*it(42)+4*s(151)+4*s(152)+4*s(153)+4*s(154)+4*s(155)+4*s(156)+2*s(157)+0
  Such that:s(137) =< V3
aux(32) =< V
aux(33) =< V-V'
it(42) =< aux(32)
it(42) =< aux(33)
aux(31) =< s(137)
s(163) =< it(42)*aux(31)
s(151) =< s(163)
s(162) =< s(151)*aux(31)
s(152) =< s(162)
s(161) =< s(152)*aux(31)
s(153) =< s(161)
s(160) =< s(153)*aux(31)
s(154) =< s(160)
s(159) =< s(154)*aux(31)
s(155) =< s(159)
s(158) =< s(155)*aux(31)
s(156) =< s(158)
s(157) =< s(156)*s(137)

#### Cost of chains of fun16(V,V3,Out):
* Chain [[42,43],44]: 4*it(42)+4*s(151)+4*s(152)+4*s(153)+4*s(154)+4*s(155)+4*s(156)+2*s(157)+0
  Such that:s(137) =< V3
aux(34) =< V
it(42) =< aux(34)
aux(31) =< s(137)
s(163) =< it(42)*aux(31)
s(151) =< s(163)
s(162) =< s(151)*aux(31)
s(152) =< s(162)
s(161) =< s(152)*aux(31)
s(153) =< s(161)
s(160) =< s(153)*aux(31)
s(154) =< s(160)
s(159) =< s(154)*aux(31)
s(155) =< s(159)
s(158) =< s(155)*aux(31)
s(156) =< s(158)
s(157) =< s(156)*s(137)

  with precondition: [V>=1,V3>=0,Out>=1] 

* Chain [44]: 0
  with precondition: [Out=0,V>=0,V3>=0] 


#### Cost of loops [45,46] 

 * loop 45:fun18(V,V3,Out) -> [fun18(V',V3',Out')] 
4*s(182)+4*s(185)+4*s(187)+4*s(189)+4*s(191)+4*s(193)+4*s(195)+2*s(196)+2
  Such that:s(181) =< V3'
s(182) =< s(181)
s(183) =< s(181)
s(184) =< s(182)*s(183)
s(185) =< s(184)
s(186) =< s(185)*s(183)
s(187) =< s(186)
s(188) =< s(187)*s(183)
s(189) =< s(188)
s(190) =< s(189)*s(183)
s(191) =< s(190)
s(192) =< s(191)*s(183)
s(193) =< s(192)
s(194) =< s(193)*s(183)
s(195) =< s(194)
s(196) =< s(195)*s(181)

 * loop 46:fun18(V,V3,Out) -> [fun18(V',V3',Out')] 
2
#### Cost of phase [45,46]:fun18(V,V3,Out) -> [fun18(V',V3',Out')] 
4*it(45)+4*s(197)+4*s(198)+4*s(199)+4*s(200)+4*s(201)+4*s(202)+4*s(203)+2*s(204)+0
  Such that:s(181) =< V3
aux(37) =< V
aux(38) =< V-V'
it(45) =< aux(37)
it(45) =< aux(38)
aux(36) =< s(181)
s(211) =< it(45)*aux(36)
s(197) =< s(211)
s(210) =< s(197)*aux(36)
s(198) =< s(210)
s(209) =< s(198)*aux(36)
s(199) =< s(209)
s(208) =< s(199)*aux(36)
s(200) =< s(208)
s(207) =< s(200)*aux(36)
s(201) =< s(207)
s(206) =< s(201)*aux(36)
s(202) =< s(206)
s(205) =< s(202)*aux(36)
s(203) =< s(205)
s(204) =< s(203)*s(181)

#### Cost of chains of fun18(V,V3,Out):
* Chain [[45,46],47]: 4*it(45)+4*s(197)+4*s(198)+4*s(199)+4*s(200)+4*s(201)+4*s(202)+4*s(203)+2*s(204)+0
  Such that:s(181) =< V3
aux(39) =< V
it(45) =< aux(39)
aux(36) =< s(181)
s(211) =< it(45)*aux(36)
s(197) =< s(211)
s(210) =< s(197)*aux(36)
s(198) =< s(210)
s(209) =< s(198)*aux(36)
s(199) =< s(209)
s(208) =< s(199)*aux(36)
s(200) =< s(208)
s(207) =< s(200)*aux(36)
s(201) =< s(207)
s(206) =< s(201)*aux(36)
s(202) =< s(206)
s(205) =< s(202)*aux(36)
s(203) =< s(205)
s(204) =< s(203)*s(181)

  with precondition: [V>=1,V3>=0,Out>=1] 

* Chain [47]: 0
  with precondition: [Out=0,V>=0,V3>=0] 


#### Cost of loops [48,49] 

 * loop 48:fun20(V,V3,Out) -> [fun20(V',V3',Out')] 
4*s(232)+4*s(235)+4*s(237)+4*s(239)+4*s(241)+4*s(243)+4*s(245)+4*s(247)+2*s(248)+2
  Such that:s(231) =< V3'
s(232) =< s(231)
s(233) =< s(231)
s(234) =< s(232)*s(233)
s(235) =< s(234)
s(236) =< s(235)*s(233)
s(237) =< s(236)
s(238) =< s(237)*s(233)
s(239) =< s(238)
s(240) =< s(239)*s(233)
s(241) =< s(240)
s(242) =< s(241)*s(233)
s(243) =< s(242)
s(244) =< s(243)*s(233)
s(245) =< s(244)
s(246) =< s(245)*s(233)
s(247) =< s(246)
s(248) =< s(247)*s(231)

 * loop 49:fun20(V,V3,Out) -> [fun20(V',V3',Out')] 
2
#### Cost of phase [48,49]:fun20(V,V3,Out) -> [fun20(V',V3',Out')] 
4*it(48)+4*s(249)+4*s(250)+4*s(251)+4*s(252)+4*s(253)+4*s(254)+4*s(255)+4*s(256)+2*s(257)+0
  Such that:s(231) =< V3
aux(42) =< V
aux(43) =< V-V'
it(48) =< aux(42)
it(48) =< aux(43)
aux(41) =< s(231)
s(265) =< it(48)*aux(41)
s(249) =< s(265)
s(264) =< s(249)*aux(41)
s(250) =< s(264)
s(263) =< s(250)*aux(41)
s(251) =< s(263)
s(262) =< s(251)*aux(41)
s(252) =< s(262)
s(261) =< s(252)*aux(41)
s(253) =< s(261)
s(260) =< s(253)*aux(41)
s(254) =< s(260)
s(259) =< s(254)*aux(41)
s(255) =< s(259)
s(258) =< s(255)*aux(41)
s(256) =< s(258)
s(257) =< s(256)*s(231)

#### Cost of chains of fun20(V,V3,Out):
* Chain [[48,49],50]: 4*it(48)+4*s(249)+4*s(250)+4*s(251)+4*s(252)+4*s(253)+4*s(254)+4*s(255)+4*s(256)+2*s(257)+0
  Such that:s(231) =< V3
aux(44) =< V
it(48) =< aux(44)
aux(41) =< s(231)
s(265) =< it(48)*aux(41)
s(249) =< s(265)
s(264) =< s(249)*aux(41)
s(250) =< s(264)
s(263) =< s(250)*aux(41)
s(251) =< s(263)
s(262) =< s(251)*aux(41)
s(252) =< s(262)
s(261) =< s(252)*aux(41)
s(253) =< s(261)
s(260) =< s(253)*aux(41)
s(254) =< s(260)
s(259) =< s(254)*aux(41)
s(255) =< s(259)
s(258) =< s(255)*aux(41)
s(256) =< s(258)
s(257) =< s(256)*s(231)

  with precondition: [V>=1,V3>=0,Out>=1] 

* Chain [50]: 0
  with precondition: [Out=0,V>=0,V3>=0] 


#### Cost of chains of start(V,V3):
* Chain [51]: 76*s(266)+2*s(271)+2*s(275)+32*s(281)+2*s(282)+32*s(288)+2*s(289)+28*s(297)+2*s(298)+28*s(306)+2*s(307)+24*s(317)+2*s(318)+24*s(328)+2*s(329)+20*s(341)+2*s(342)+20*s(354)+2*s(355)+16*s(369)+2*s(370)+16*s(384)+2*s(385)+12*s(401)+2*s(402)+12*s(418)+2*s(419)+8*s(437)+2*s(438)+8*s(456)+2*s(457)+4*s(477)+2*s(478)+4*s(498)+2*s(499)+1
  Such that:aux(54) =< V
aux(55) =< V3
s(266) =< aux(54)
s(271) =< s(266)*aux(54)
s(279) =< aux(54)
s(280) =< s(266)*s(279)
s(281) =< s(280)
s(282) =< s(281)*aux(54)
s(296) =< s(281)*s(279)
s(297) =< s(296)
s(298) =< s(297)*aux(54)
s(316) =< s(297)*s(279)
s(317) =< s(316)
s(318) =< s(317)*aux(54)
s(340) =< s(317)*s(279)
s(341) =< s(340)
s(342) =< s(341)*aux(54)
s(368) =< s(341)*s(279)
s(369) =< s(368)
s(370) =< s(369)*aux(54)
s(400) =< s(369)*s(279)
s(401) =< s(400)
s(402) =< s(401)*aux(54)
s(436) =< s(401)*s(279)
s(437) =< s(436)
s(438) =< s(437)*aux(54)
s(476) =< s(437)*s(279)
s(477) =< s(476)
s(478) =< s(477)*aux(54)
s(275) =< s(266)*aux(55)
s(286) =< aux(55)
s(287) =< s(266)*s(286)
s(288) =< s(287)
s(289) =< s(288)*aux(55)
s(305) =< s(288)*s(286)
s(306) =< s(305)
s(307) =< s(306)*aux(55)
s(327) =< s(306)*s(286)
s(328) =< s(327)
s(329) =< s(328)*aux(55)
s(353) =< s(328)*s(286)
s(354) =< s(353)
s(355) =< s(354)*aux(55)
s(383) =< s(354)*s(286)
s(384) =< s(383)
s(385) =< s(384)*aux(55)
s(417) =< s(384)*s(286)
s(418) =< s(417)
s(419) =< s(418)*aux(55)
s(455) =< s(418)*s(286)
s(456) =< s(455)
s(457) =< s(456)*aux(55)
s(497) =< s(456)*s(286)
s(498) =< s(497)
s(499) =< s(498)*aux(55)

  with precondition: [V>=0] 


Closed-form bounds of start(V,V3): 
-------------------------------------
* Chain [51] with precondition: [V>=0] 
    - Upper bound: 76*V+1+34*V*V+30*V*V*V+26*V*V*V*V+22*V*V*V*V*V+18*V*V*V*V*V*V+14*V*V*V*V*V*V*V+10*V*V*V*V*V*V*V*V+6*V*V*V*V*V*V*V*V*V+2*V*V*V*V*V*V*V*V*V*V+nat(V3)*34*V+nat(V3)*30*nat(V3)*V+nat(V3)*26*nat(V3)*nat(V3)*V+nat(V3)*22*nat(V3)*nat(V3)*nat(V3)*V+nat(V3)*18*nat(V3)*nat(V3)*nat(V3)*nat(V3)*V+nat(V3)*14*nat(V3)*nat(V3)*nat(V3)*nat(V3)*nat(V3)*V+nat(V3)*10*nat(V3)*nat(V3)*nat(V3)*nat(V3)*nat(V3)*nat(V3)*V+nat(V3)*6*nat(V3)*nat(V3)*nat(V3)*nat(V3)*nat(V3)*nat(V3)*nat(V3)*V+nat(V3)*2*nat(V3)*nat(V3)*nat(V3)*nat(V3)*nat(V3)*nat(V3)*nat(V3)*nat(V3)*V 
    - Complexity: n^10 

### Maximum cost of start(V,V3): 76*V+1+34*V*V+30*V*V*V+26*V*V*V*V+22*V*V*V*V*V+18*V*V*V*V*V*V+14*V*V*V*V*V*V*V+10*V*V*V*V*V*V*V*V+6*V*V*V*V*V*V*V*V*V+2*V*V*V*V*V*V*V*V*V*V+nat(V3)*34*V+nat(V3)*30*nat(V3)*V+nat(V3)*26*nat(V3)*nat(V3)*V+nat(V3)*22*nat(V3)*nat(V3)*nat(V3)*V+nat(V3)*18*nat(V3)*nat(V3)*nat(V3)*nat(V3)*V+nat(V3)*14*nat(V3)*nat(V3)*nat(V3)*nat(V3)*nat(V3)*V+nat(V3)*10*nat(V3)*nat(V3)*nat(V3)*nat(V3)*nat(V3)*nat(V3)*V+nat(V3)*6*nat(V3)*nat(V3)*nat(V3)*nat(V3)*nat(V3)*nat(V3)*nat(V3)*V+nat(V3)*2*nat(V3)*nat(V3)*nat(V3)*nat(V3)*nat(V3)*nat(V3)*nat(V3)*nat(V3)*V 
Asymptotic class: n^10 

Time statistics: 
-------------------------------------
* Partial evaluation computed in 35 ms.
* Invariants computed in 64 ms.
   - Backward Invariants 22 ms.
   - Transitive Invariants 19 ms.
* Refinement performed in 131 ms.
* Termination proved in 21 ms.
* Upper bounds computed in 359 ms.
   - Equation cost structures 218 ms.
   - Phase cost structures 108 ms.
   - Chain cost structures 31 ms.
   - Solving cost expressions 10 ms.
* Total analysis performed in 665 ms.


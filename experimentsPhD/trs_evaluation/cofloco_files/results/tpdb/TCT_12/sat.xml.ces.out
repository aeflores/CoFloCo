
Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. recursive  : [choice/2]
1. recursive  : [eq/3]
2. recursive  : [guess/2]
3. non_recursive  : [if/4]
4. recursive [non_tail] : [member/3]
5. non_recursive  : [negate/2]
6. recursive [non_tail] : [verify/2]
7. non_recursive  : [satck/3]
8. non_recursive  : [sat/2]
9. non_recursive  : [start/3]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into choice/2
1. SCC is partially evaluated into eq/3
2. SCC is partially evaluated into guess/2
3. SCC is partially evaluated into if/4
4. SCC is partially evaluated into member/3
5. SCC is partially evaluated into negate/2
6. SCC is partially evaluated into verify/2
7. SCC is partially evaluated into satck/3
8. SCC is partially evaluated into sat/2
9. SCC is partially evaluated into start/3

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations choice/2 
* CE 23 is refined into CE [34] 
* CE 25 is refined into CE [35] 
* CE 24 is refined into CE [36] 


#### Refined cost equations choice/2 
* CE 34: choice(V3,Out) = 1
     [V3>=Out+1,Out>=0] 
* CE 35: choice(V3,Out) = 0
     [V3>=0,Out=0] 
* CE 36: choice(V3,Out) = 1+ choice(W3,Out)
     [V3>=W3+1,W3>=0] 

### Cost equations --> "Loop" of choice/2 
* CEs [36] --> Loop 23 
* CEs [34] --> Loop 24 
* CEs [35] --> Loop 25 

#### Loops of choice/2 
* Loop 23: choice(V3,Out)->  choice(V3',Out)
                  [V3>=V3'+1,V3'>=0] 
* Loop 24: choice(V3,Out) [V3>=Out+1,Out>=0] 
* Loop 25: choice(V3,Out) [V3>=0,Out=0] 

### Ranking functions of CR choice(V3,Out) 
* RF of phase [23]: [V3]

#### Partial ranking functions of CR choice(V3,Out) 
* Partial RF of phase [23]:
  - RF of loop [23:1]:
    V3


### Resulting Chains:choice(V3,Out) 
* [[23],25]
* [[23],24]
* [25]
* [24]


### Merging Chains  choice/2 into  External patterns of execution 
* [[25],[25,[23]]] --> 1 
* [[24],[24,[23]]] --> 2 


### Specialization of cost equations eq/3 
* CE 19 is refined into CE [37] 
* CE 20 is refined into CE [38] 
* CE 17 is refined into CE [39] 
* CE 18 is refined into CE [40] 


#### Refined cost equations eq/3 
* CE 37: eq(V3,V1,Out) = 1
     [V1>=1,V3>=1,Out=0] 
* CE 38: eq(V3,V1,Out) = 0
     [V1>=0,V3>=0,Out=0] 
* CE 39: eq(V3,V1,Out) = 1
     [Out=2,V1=1,V3=1] 
* CE 40: eq(V3,V1,Out) = 1+ eq(W3,X3,Out)
     [X3>=0,W3>=0,X3+1=V1,W3+1=V3] 

### Cost equations --> "Loop" of eq/3 
* CEs [40] --> Loop 26 
* CEs [37,38] --> Loop 27 
* CEs [39] --> Loop 28 

#### Loops of eq/3 
* Loop 26: eq(V3,V1,Out)->  eq(V3',V1',Out)
                  [V1'>=0,V3'>=0,V1'+1=V1,V3'+1=V3] 
* Loop 27: eq(V3,V1,Out) [V1>=0,V3>=0,Out=0] 
* Loop 28: eq(V3,V1,Out) [Out=2,V1=1,V3=1] 

### Ranking functions of CR eq(V3,V1,Out) 
* RF of phase [26]: [V1,V3]

#### Partial ranking functions of CR eq(V3,V1,Out) 
* Partial RF of phase [26]:
  - RF of loop [26:1]:
    V1
    V3


### Resulting Chains:eq(V3,V1,Out) 
* [[26],28]
* [[26],27]
* [28]
* [27]


### Merging Chains  eq/3 into  External patterns of execution 
* [[28]] --> 1 
* [[27],[27,[26]]] --> 2 
* [[28,[26]]] --> 3 


### Specialization of cost equations guess/2 
* CE 28 is refined into CE [41] 
* CE 26 is refined into CE [42] 
* CE 27 is refined into CE [43,44] 


#### Refined cost equations guess/2 
* CE 41: guess(V3,Out) = 0
     [V3>=0,Out=0] 
* CE 42: guess(V3,Out) = 1
     [Out=1,V3=1] 
* CE 43: guess(V3,Out) = 1+ choice(W3,X3):1+ guess(Y3,Z3)
     [Y3>=0,W3>=0,W3+Y3+1=V3,Z3+1=Out,X3=0] 
* CE 44: guess(V3,Out) = 1+ choice(W3,X3):2+ guess(Y3,Z3)
     [W3>=X3+1,Y3>=0,X3>=0,X3+Z3+1=Out,W3+Y3+1=V3] 

### Cost equations --> "Loop" of guess/2 
* CEs [44] --> Loop 29 
* CEs [43] --> Loop 30 
* CEs [41] --> Loop 31 
* CEs [42] --> Loop 32 

#### Loops of guess/2 
* Loop 29: guess(V3,Out)->  guess(V3',Out')
                  [V3+Out'>=Out+V3'+1,Out>=Out'+1,V3'>=0] 
* Loop 30: guess(V3,Out)->  guess(V3',Out')
                  [V3>=V3'+1,V3'>=0,Out=Out'+1] 
* Loop 31: guess(V3,Out) [V3>=0,Out=0] 
* Loop 32: guess(V3,Out) [Out=1,V3=1] 

### Ranking functions of CR guess(V3,Out) 
* RF of phase [29,30]: [V3]

#### Partial ranking functions of CR guess(V3,Out) 
* Partial RF of phase [29,30]:
  - RF of loop [29:1]:
    V3-1
  - RF of loop [30:1]:
    V3


### Resulting Chains:guess(V3,Out) 
* [[29,30],32]
* [[29,30],31]
* [32]
* [31]


### Merging Chains  guess/2 into  External patterns of execution 
* [[32],[31,[29,30]],[32,[29,30]]] --> 1 
* [[31]] --> 2 


### Specialization of cost equations if/4 
* CE 13 is refined into CE [45] 
* CE 11 is refined into CE [46] 
* CE 12 is refined into CE [47] 


#### Refined cost equations if/4 
* CE 45: if(V3,V1,V4,Out) = 0
     [V4>=0,V1>=0,V3>=0,Out=0] 
* CE 46: if(A,B,C,B) = 1
     [C>=0,B>=0,A=2] 
* CE 47: if(A,B,C,C) = 1
     [C>=0,B>=0,A=0] 

### Cost equations --> "Loop" of if/4 
* CEs [45] --> Loop 33 
* CEs [46] --> Loop 34 
* CEs [47] --> Loop 35 

#### Loops of if/4 
* Loop 33: if(V3,V1,V4,Out) [V4>=0,V1>=0,V3>=0,Out=0] 
* Loop 34: if(A,B,C,B) [C>=0,B>=0,A=2] 
* Loop 35: if(A,B,C,C) [C>=0,B>=0,A=0] 

### Ranking functions of CR if(V3,V1,V4,Out) 

#### Partial ranking functions of CR if(V3,V1,V4,Out) 


### Resulting Chains:if(V3,V1,V4,Out) 
* [35]
* [34]
* [33]


### Merging Chains  if/4 into  External patterns of execution 
* [[35]] --> 1 
* [[34]] --> 2 
* [[33]] --> 3 


### Specialization of cost equations member/3 
* CE 14 is refined into CE [48] 
* CE 16 is refined into CE [49] 
* CE 15 is refined into CE [50,51,52,53,54,55] 


#### Refined cost equations member/3 
* CE 48: member(V3,V1,Out) = 1
     [V3>=0,Out=0,V1=1] 
* CE 49: member(V3,V1,Out) = 0
     [V1>=0,V3>=0,Out=0] 
* CE 50: member(V3,V1,Out) = 1+ eq(W3,X3,Y3):1+ member(Z3,A4,B4)+ if(C4,D4,B4,E4):2
     [A4>=0,B4>=0,A4+2=V1,Z3=1,E4=2,D4=2,C4=2,Y3=2,X3=1,W3=1,Out=2,V3=1] 
* CE 51: member(V3,V1,Out) = 1+ eq(W3,X3,Y3):1+ member(Z3,A4,B4)+ if(C4,D4,B4,E4):3
     [A4>=0,B4>=0,A4+2=V1,Z3=1,E4=0,D4=2,C4=2,Y3=2,X3=1,W3=1,Out=0,V3=1] 
* CE 52: member(V3,V1,Out) = 1+ eq(V3,W3,X3):2+ member(V3,Y3,Out)+ if(Z3,A4,Out,Out):1
     [Y3>=0,Out>=0,W3>=0,V3>=0,W3+Y3+1=V1,A4=2,Z3=0,X3=0] 
* CE 53: member(V3,V1,Out) = 1+ eq(V3,W3,X3):2+ member(V3,Y3,Z3)+ if(A4,B4,Z3,C4):3
     [Y3>=0,Z3>=0,W3>=0,V3>=0,W3+Y3+1=V1,C4=0,B4=2,A4=0,X3=0,Out=0] 
* CE 54: member(V3,V1,Out) = 1+ eq(V3,V3,W3):3+ member(V3,X3,Y3)+ if(Z3,A4,Y3,B4):2
     [X3>=0,Y3>=0,V3>=2,V3+X3+1=V1,B4=2,A4=2,Z3=2,W3=2,Out=2] 
* CE 55: member(V3,V1,Out) = 1+ eq(V3,V3,W3):3+ member(V3,X3,Y3)+ if(Z3,A4,Y3,B4):3
     [X3>=0,Y3>=0,V3>=2,V3+X3+1=V1,B4=0,A4=2,Z3=2,W3=2,Out=0] 

### Cost equations --> "Loop" of member/3 
* CEs [52] --> Loop 36 
* CEs [54] --> Loop 37 
* CEs [55] --> Loop 38 
* CEs [50] --> Loop 39 
* CEs [51,53] --> Loop 40 
* CEs [48,49] --> Loop 41 

#### Loops of member/3 
* Loop 36: member(V3,V1,Out)->  member(V3,V1',Out)
                  [V1>=V1'+1,V1'>=0,Out>=0,V3>=0] 
* Loop 37: member(V3,V1,Out)->  member(V3,V1',Out')
                  [V1>=V3+1,Out'>=0,V3>=2,V3+V1'+1=V1,Out=2] 
* Loop 38: member(V3,V1,Out)->  member(V3,V1',Out')
                  [V1>=V3+1,Out'>=0,V3>=2,V3+V1'+1=V1,Out=0] 
* Loop 39: member(V3,V1,Out)->  member(V3',V1',Out')
                  [Out'>=0,V1>=2,V1=V1'+2,V3'=1,Out=2,V3=1] 
* Loop 40: member(V3,V1,Out)->  member(V3,V1',Out')
                  [V1>=V1'+1,Out'>=0,V1'>=0,V3>=0,Out=0] 
* Loop 41: member(V3,V1,Out) [V1>=0,V3>=0,Out=0] 

### Ranking functions of CR member(V3,V1,Out) 
* RF of phase [36,37,38,39,40]: [V1]

#### Partial ranking functions of CR member(V3,V1,Out) 
* Partial RF of phase [36,37,38,39,40]:
  - RF of loop [36:1,40:1]:
    V1
  - RF of loop [37:1,38:1]:
    V1/3-2/3
    -V3/3+V1/3
  - RF of loop [39:1]:
    V1/2-1/2


### Resulting Chains:member(V3,V1,Out) 
* [[36,37,38,39,40],41]
* [41]


### Merging Chains  member/3 into  External patterns of execution 
* [[41]] --> 1 
* [[41,[36,37,38,39,40]]] --> 2 


### Specialization of cost equations negate/2 
* CE 21 is refined into CE [56] 
* CE 22 is refined into CE [57] 


#### Refined cost equations negate/2 
* CE 56: negate(A,A) = 1
     [A>=1] 
* CE 57: negate(V3,Out) = 0
     [V3>=0,Out=0] 

### Cost equations --> "Loop" of negate/2 
* CEs [56] --> Loop 42 
* CEs [57] --> Loop 43 

#### Loops of negate/2 
* Loop 42: negate(A,A) [A>=1] 
* Loop 43: negate(V3,Out) [V3>=0,Out=0] 

### Ranking functions of CR negate(V3,Out) 

#### Partial ranking functions of CR negate(V3,Out) 


### Resulting Chains:negate(V3,Out) 
* [43]
* [42]


### Merging Chains  negate/2 into  External patterns of execution 
* [[43]] --> 1 
* [[42]] --> 2 


### Specialization of cost equations verify/2 
* CE 31 is refined into CE [58] 
* CE 29 is refined into CE [59] 
* CE 30 is refined into CE [60,61,62,63,64,65,66,67,68] 


#### Refined cost equations verify/2 
* CE 58: verify(V3,Out) = 0
     [V3>=0,Out=0] 
* CE 59: verify(V3,Out) = 1
     [Out=2,V3=1] 
* CE 60: verify(V3,Out) = 1+ negate(W3,X3):1+ member(Y3,Z3,A4):1+ verify(Z3,Out)+ if(B4,C4,Out,Out):1
     [Out>=0,Z3>=0,W3>=0,W3+Z3+1=V3,C4=0,B4=0,A4=0,Y3=0,X3=0] 
* CE 61: verify(V3,Out) = 1+ negate(W3,X3):1+ member(Y3,Z3,A4):1+ verify(Z3,B4)+ if(C4,D4,B4,E4):3
     [B4>=0,Z3>=0,W3>=0,W3+Z3+1=V3,E4=0,D4=0,C4=0,A4=0,Y3=0,X3=0,Out=0] 
* CE 62: verify(V3,Out) = 1+ negate(W3,X3):1+ member(Y3,Z3,A4):2+ verify(Z3,Out)+ if(B4,C4,Out,Out):1
     [Out>=0,Z3>=1,W3>=0,W3+Z3+1=V3,C4=0,B4=0,A4=0,Y3=0,X3=0] 
* CE 63: verify(V3,Out) = 1+ negate(W3,X3):1+ member(Y3,Z3,A4):2+ verify(Z3,B4)+ if(C4,D4,B4,E4):3
     [B4>=0,Z3>=1,W3>=0,W3+Z3+1=V3,E4=0,D4=0,C4=0,A4=0,Y3=0,X3=0,Out=0] 
* CE 64: verify(V3,Out) = 1+ negate(W3,W3):2+ member(W3,X3,Y3):1+ verify(X3,Out)+ if(Z3,A4,Out,Out):1
     [Out>=0,X3>=0,W3>=1,W3+X3+1=V3,A4=0,Z3=0,Y3=0] 
* CE 65: verify(V3,Out) = 1+ negate(W3,W3):2+ member(W3,X3,Y3):1+ verify(X3,Z3)+ if(A4,B4,Z3,C4):3
     [Z3>=0,X3>=0,W3>=1,W3+X3+1=V3,C4=0,B4=0,A4=0,Y3=0,Out=0] 
* CE 66: verify(V3,Out) = 1+ negate(W3,W3):2+ member(W3,X3,Y3):2+ verify(X3,Out)+ if(Z3,A4,Out,Out):1
     [Out>=0,X3>=1,W3>=1,W3+X3+1=V3,A4=0,Z3=0,Y3=0] 
* CE 67: verify(V3,Out) = 1+ negate(W3,W3):2+ member(W3,X3,Y3):2+ verify(X3,Z3)+ if(A4,B4,Z3,C4):2
     [Z3>=0,X3>=2,W3>=1,W3+X3+1=V3,C4=0,B4=0,A4=2,Y3=2,Out=0] 
* CE 68: verify(V3,Out) = 1+ negate(W3,W3):2+ member(W3,X3,Y3):2+ verify(X3,Z3)+ if(Y3,A4,Z3,B4):3
     [2*X3>=Y3+2,Z3>=0,Y3>=0,W3>=1,2>=Y3,W3+X3+1=V3,B4=0,A4=0,Out=0] 

### Cost equations --> "Loop" of verify/2 
* CEs [60,62,64,66] --> Loop 44 
* CEs [61,63,65,67,68] --> Loop 45 
* CEs [58] --> Loop 46 
* CEs [59] --> Loop 47 

#### Loops of verify/2 
* Loop 44: verify(V3,Out)->  verify(V3',Out)
                  [V3>=V3'+1,V3'>=0,Out>=0] 
* Loop 45: verify(V3,Out)->  verify(V3',Out')
                  [V3>=V3'+1,Out'>=0,V3'>=0,Out=0] 
* Loop 46: verify(V3,Out) [V3>=0,Out=0] 
* Loop 47: verify(V3,Out) [Out=2,V3=1] 

### Ranking functions of CR verify(V3,Out) 
* RF of phase [44,45]: [V3]

#### Partial ranking functions of CR verify(V3,Out) 
* Partial RF of phase [44,45]:
  - RF of loop [44:1,45:1]:
    V3


### Resulting Chains:verify(V3,Out) 
* [[44,45],47]
* [[44,45],46]
* [47]
* [46]


### Merging Chains  verify/2 into  External patterns of execution 
* [[47]] --> 1 
* [[46],[46,[44,45]]] --> 2 
* [[47,[44,45]]] --> 3 


### Specialization of cost equations satck/3 
* CE 33 is refined into CE [69,70,71,72,73,74,75] 


#### Refined cost equations satck/3 
* CE 69: satck(V3,V1,Out) = 1+ verify(W3,X3):1+ if(Y3,Z3,A4,B4):2
     [V3>=0,B4=1,A4=3,Z3=1,Y3=2,X3=2,W3=1,Out=1,V1=1] 
* CE 70: satck(V3,V1,Out) = 1+ verify(W3,X3):1+ if(Y3,Z3,A4,B4):3
     [V3>=0,B4=0,A4=3,Z3=1,Y3=2,X3=2,W3=1,Out=0,V1=1] 
* CE 71: satck(V3,V1,Out) = 1+ verify(V1,W3):2+ if(X3,V1,Y3,Z3):1
     [V1>=0,V3>=0,Z3=3,Y3=3,X3=0,W3=0,Out=3] 
* CE 72: satck(V3,V1,Out) = 1+ verify(V1,W3):2+ if(X3,V1,Y3,Z3):3
     [V1>=0,V3>=0,Z3=0,Y3=3,X3=0,W3=0,Out=0] 
* CE 73: satck(V3,V1,Out) = 1+ verify(V1,W3):3+ if(X3,V1,Y3,Z3):1
     [V1>=2,V3>=0,Z3=3,Y3=3,X3=0,W3=0,Out=3] 
* CE 74: satck(A,B,B) = 1+ verify(B,C):3+ if(D,B,E,B):2
     [B>=2,A>=0,E=3,D=2,C=2] 
* CE 75: satck(V3,V1,Out) = 1+ verify(V1,W3):3+ if(W3,V1,X3,Y3):3
     [V1>=2,W3>=0,V3>=0,2>=W3,Y3=0,X3=3,Out=0] 

### Cost equations --> "Loop" of satck/3 
* CEs [74] --> Loop 48 
* CEs [71,73] --> Loop 49 
* CEs [69] --> Loop 50 
* CEs [70,72,75] --> Loop 51 

#### Loops of satck/3 
* Loop 48: satck(A,B,B) [B>=2,A>=0] 
* Loop 49: satck(V3,V1,Out) [V1>=0,V3>=0,Out=3] 
* Loop 50: satck(V3,V1,Out) [V3>=0,Out=1,V1=1] 
* Loop 51: satck(V3,V1,Out) [V1>=0,V3>=0,Out=0] 

### Ranking functions of CR satck(V3,V1,Out) 

#### Partial ranking functions of CR satck(V3,V1,Out) 


### Resulting Chains:satck(V3,V1,Out) 
* [51]
* [50]
* [49]
* [48]


### Merging Chains  satck/3 into  External patterns of execution 
* [[50]] --> 1 
* [[51]] --> 2 
* [[49]] --> 3 
* [[48]] --> 4 


### Specialization of cost equations sat/2 
* CE 32 is refined into CE [76,77,78,79,80,81] 


#### Refined cost equations sat/2 
* CE 76: sat(V3,Out) = 1+ guess(V3,W3):1+ satck(V3,X3,Y3):1
     [V3>=1,Y3=1,X3=1,W3=1,Out=1] 
* CE 77: sat(V3,Out) = 1+ guess(V3,W3):1+ satck(V3,W3,X3):2
     [V3>=W3,W3>=1,X3=0,Out=0] 
* CE 78: sat(V3,Out) = 1+ guess(V3,W3):1+ satck(V3,W3,X3):3
     [V3>=W3,W3>=1,X3=3,Out=3] 
* CE 79: sat(V3,Out) = 1+ guess(V3,Out):1+ satck(V3,Out,Out):4
     [V3>=Out,Out>=2] 
* CE 80: sat(V3,Out) = 1+ guess(V3,W3):2+ satck(V3,X3,Y3):2
     [V3>=0,Y3=0,X3=0,W3=0,Out=0] 
* CE 81: sat(V3,Out) = 1+ guess(V3,W3):2+ satck(V3,X3,Y3):3
     [V3>=0,Y3=3,X3=0,W3=0,Out=3] 

### Cost equations --> "Loop" of sat/2 
* CEs [79] --> Loop 52 
* CEs [78,81] --> Loop 53 
* CEs [76] --> Loop 54 
* CEs [77,80] --> Loop 55 

#### Loops of sat/2 
* Loop 52: sat(V3,Out) [V3>=Out,Out>=2] 
* Loop 53: sat(V3,Out) [V3>=0,Out=3] 
* Loop 54: sat(V3,Out) [V3>=1,Out=1] 
* Loop 55: sat(V3,Out) [V3>=0,Out=0] 

### Ranking functions of CR sat(V3,Out) 

#### Partial ranking functions of CR sat(V3,Out) 


### Resulting Chains:sat(V3,Out) 
* [55]
* [54]
* [53]
* [52]


### Merging Chains  sat/2 into  External patterns of execution 
* [[55]] --> 1 
* [[54]] --> 2 
* [[53]] --> 3 
* [[52]] --> 4 


### Specialization of cost equations start/3 
* CE 2 is refined into CE [82,83,84] 
* CE 3 is refined into CE [85,86] 
* CE 4 is refined into CE [87,88,89] 
* CE 5 is refined into CE [90,91] 
* CE 6 is refined into CE [92,93] 
* CE 7 is refined into CE [94,95] 
* CE 8 is refined into CE [96,97,98] 
* CE 9 is refined into CE [99,100,101,102] 
* CE 10 is refined into CE [103,104,105,106] 


#### Refined cost equations start/3 
* CE 82: start(V3,V1,V4) = 0+ if(W4,V1,V4,V4):1
     [V4>=0,V1>=0,W4=0,V3=0] 
* CE 83: start(V3,V1,V4) = 0+ if(W4,V1,V4,V1):2
     [V1>=0,V4>=0,W4=2,V3=2] 
* CE 84: start(V3,V1,V4) = 0+ if(V3,V1,V4,W4):3
     [V4>=0,V1>=0,V3>=0,W4=0] 
* CE 85: start(V3,V1,V4) = 0+ member(V3,V1,W4):1
     [V1>=0,V3>=0,W4=0] 
* CE 86: start(V3,V1,V4) = 0+ member(V3,V1,W4):2
     [2*V1>=W4+2,2*V3>=W4,W4>=0,2>=W4] 
* CE 87: start(V3,V1,V4) = 0+ eq(W4,X4,Y4):1
     [Y4=2,X4=1,W4=1,V1=1,V3=1] 
* CE 88: start(V3,V1,V4) = 0+ eq(V3,V1,W4):2
     [V1>=0,V3>=0,W4=0] 
* CE 89: start(A,A,B) = 0+ eq(A,A,C):3
     [A>=2,C=2] 
* CE 90: start(V3,V1,V4) = 0+ negate(V3,W4):1
     [V3>=0,W4=0] 
* CE 91: start(V3,V1,V4) = 0+ negate(V3,V3):2
     [V3>=1] 
* CE 92: start(V3,V1,V4) = 0+ choice(V3,W4):1
     [V3>=0,W4=0] 
* CE 93: start(V3,V1,V4) = 0+ choice(V3,W4):2
     [V3>=W4+1,W4>=0] 
* CE 94: start(V3,V1,V4) = 0+ guess(V3,W4):1
     [V3>=W4,W4>=1] 
* CE 95: start(V3,V1,V4) = 0+ guess(V3,W4):2
     [V3>=0,W4=0] 
* CE 96: start(V3,V1,V4) = 0+ verify(W4,X4):1
     [X4=2,W4=1,V3=1] 
* CE 97: start(V3,V1,V4) = 0+ verify(V3,W4):2
     [V3>=0,W4=0] 
* CE 98: start(V3,V1,V4) = 0+ verify(V3,W4):3
     [W4>=0,V3>=2,2>=W4] 
* CE 99: start(V3,V1,V4) = 0+ sat(V3,W4):1
     [V3>=0,W4=0] 
* CE 100: start(V3,V1,V4) = 0+ sat(V3,W4):2
     [V3>=1,W4=1] 
* CE 101: start(V3,V1,V4) = 0+ sat(V3,W4):3
     [V3>=0,W4=3] 
* CE 102: start(V3,V1,V4) = 0+ sat(V3,W4):4
     [V3>=W4,W4>=2] 
* CE 103: start(V3,V1,V4) = 0+ satck(V3,W4,X4):1
     [V3>=0,X4=1,W4=1,V1=1] 
* CE 104: start(V3,V1,V4) = 0+ satck(V3,V1,W4):2
     [V1>=0,V3>=0,W4=0] 
* CE 105: start(V3,V1,V4) = 0+ satck(V3,V1,W4):3
     [V1>=0,V3>=0,W4=3] 
* CE 106: start(V3,V1,V4) = 0+ satck(V3,V1,V1):4
     [V1>=2,V3>=0] 

### Cost equations --> "Loop" of start/3 
* CEs [89] --> Loop 56 
* CEs [103] --> Loop 57 
* CEs [83] --> Loop 58 
* CEs [87,96] --> Loop 59 
* CEs [82,84,85,86,88,90,91,92,93,94,95,97,98,99,100,101,102,104,105,106] --> Loop 60 

#### Loops of start/3 
* Loop 56: start(A,A,B) [A>=2] 
* Loop 57: start(V3,V1,V4) [V3>=0,V1=1] 
* Loop 58: start(V3,V1,V4) [V4>=0,V1>=0,V3=2] 
* Loop 59: start(V3,V1,V4) [V3=1] 
* Loop 60: start(V3,V1,V4) [V3>=0] 

### Ranking functions of CR start(V3,V1,V4) 

#### Partial ranking functions of CR start(V3,V1,V4) 


### Resulting Chains:start(V3,V1,V4) 
* [60]
* [59]
* [58]
* [57]
* [56]


### Merging Chains  start/3 into  External patterns of execution 
* [[59],[60]] --> 1 
* [[58]] --> 2 
* [[57]] --> 3 
* [[56]] --> 4 


Computing Bounds
=====================================

#### Cost of loops [23] 

 * loop 23:choice(V3,Out) -> [choice(V3',Out')] 
1
#### Cost of phase [23]:choice(V3,Out) -> [choice(V3',Out')] 
1*it(23)+0
  Such that:it(23) =< V3
it(23) =< V3-V3'

#### Cost of phase [23]:choice(V3,Out) -> [choice(V3',Out')] 
1*it(23)+0
  Such that:it(23) =< V3
it(23) =< V3-V3'

#### Cost of chains of choice(V3,Out):
* Chain [[23],25]: 1*it(23)+0
  Such that:it(23) =< V3

  with precondition: [Out=0,V3>=1] 

* Chain [[23],24]: 1*it(23)+1
  Such that:it(23) =< V3-Out

  with precondition: [Out>=0,V3>=Out+2] 

* Chain [25]: 0
  with precondition: [Out=0,V3>=0] 

* Chain [24]: 1
  with precondition: [Out>=0,V3>=Out+1] 


#### Cost of loops [26] 

 * loop 26:eq(V3,V1,Out) -> [eq(V3',V1',Out')] 
1
#### Cost of phase [26]:eq(V3,V1,Out) -> [eq(V3',V1',Out')] 
1*it(26)+0
  Such that:it(26) =< V3
it(26) =< V3-V3'
it(26) =< V1
it(26) =< V1-V1'

#### Cost of phase [26]:eq(V3,V1,Out) -> [eq(V3',V1',Out')] 
1*it(26)+0
  Such that:it(26) =< V3
it(26) =< V3-V3'
it(26) =< V1
it(26) =< V1-V1'

#### Cost of chains of eq(V3,V1,Out):
* Chain [[26],28]: 1*it(26)+1
  Such that:it(26) =< V3

  with precondition: [Out=2,V3=V1,V3>=2] 

* Chain [[26],27]: 1*it(26)+1
  Such that:it(26) =< V1

  with precondition: [Out=0,V3>=1,V1>=1] 

* Chain [28]: 1
  with precondition: [V3=1,V1=1,Out=2] 

* Chain [27]: 1
  with precondition: [Out=0,V3>=0,V1>=0] 


#### Cost of loops [29,30] 

 * loop 29:guess(V3,Out) -> [guess(V3',Out')] 
1*s(5)+2
  Such that:s(5) =< V3-V3'

 * loop 30:guess(V3,Out) -> [guess(V3',Out')] 
1*s(7)+1
  Such that:s(7) =< V3-V3'

#### Cost of phase [29,30]:guess(V3,Out) -> [guess(V3',Out')] 
5*it(29)+0
  Such that:aux(1) =< V3
aux(2) =< V3-V3'
it(29) =< aux(1)
it(29) =< aux(2)

#### Cost of phase [29,30]:guess(V3,Out) -> [guess(V3',Out')] 
5*it(29)+0
  Such that:aux(1) =< V3
aux(2) =< V3-V3'
it(29) =< aux(1)
it(29) =< aux(2)

#### Cost of chains of guess(V3,Out):
* Chain [[29,30],32]: 5*it(29)+1
  Such that:aux(3) =< V3
it(29) =< aux(3)

  with precondition: [Out>=2,V3>=Out] 

* Chain [[29,30],31]: 5*it(29)+0
  Such that:aux(4) =< V3
it(29) =< aux(4)

  with precondition: [Out>=1,V3>=Out] 

* Chain [32]: 1
  with precondition: [V3=1,Out=1] 

* Chain [31]: 0
  with precondition: [Out=0,V3>=0] 


#### Cost of chains of if(V3,V1,V4,Out):
* Chain [35]: 1
  with precondition: [V3=0,V4=Out,V1>=0,V4>=0] 

* Chain [34]: 1
  with precondition: [V3=2,V1=Out,V1>=0,V4>=0] 

* Chain [33]: 0
  with precondition: [Out=0,V3>=0,V1>=0,V4>=0] 


#### Cost of loops [36,37,38,39,40] 

 * loop 36:member(V3,V1,Out) -> [member(V3',V1',Out')] 
1*s(15)+3
  Such that:s(15) =< V1-V1'

 * loop 37:member(V3,V1,Out) -> [member(V3',V1',Out')] 
1*s(17)+3
  Such that:s(17) =< V3'

 * loop 38:member(V3,V1,Out) -> [member(V3',V1',Out')] 
1*s(19)+2
  Such that:s(19) =< V3'

 * loop 39:member(V3,V1,Out) -> [member(V3',V1',Out')] 
3
 * loop 40:member(V3,V1,Out) -> [member(V3',V1',Out')] 
1*s(21)+2
  Such that:s(21) =< V1-V1'

#### Cost of phase [36,37,38,39,40]:member(V3,V1,Out) -> [member(V3',V1',Out')] 
9*it(36)+5*it(37)+3*it(39)+0
  Such that:it(39) =< V1/2
it(39) =< V1/2-V1'/2
aux(6) =< -V3/3+V1/3
aux(7) =< -V3/3+V1/3+V3'/3-V1'/3
aux(8) =< V1
aux(9) =< V1-V1'
aux(10) =< V1/3
aux(11) =< V1/3-V1'/3
it(37) =< aux(6)
it(37) =< aux(7)
it(36) =< aux(8)
it(37) =< aux(8)
it(39) =< aux(8)
it(36) =< aux(9)
it(37) =< aux(9)
it(39) =< aux(9)
it(37) =< aux(10)
it(37) =< aux(11)

#### Cost of chains of member(V3,V1,Out):
* Chain [[36,37,38,39,40],41]: 9*it(36)+5*it(37)+3*it(39)+1
  Such that:aux(6) =< -V3/3+V1/3
it(39) =< V1/2
aux(12) =< V1
aux(13) =< V1/3
it(37) =< aux(6)
it(37) =< aux(13)
it(36) =< aux(12)
it(37) =< aux(12)
it(39) =< aux(12)

  with precondition: [2>=Out,Out>=0,2*V3>=Out,2*V1>=Out+2] 

* Chain [41]: 1
  with precondition: [Out=0,V3>=0,V1>=0] 


#### Cost of chains of negate(V3,Out):
* Chain [43]: 0
  with precondition: [Out=0,V3>=0] 

* Chain [42]: 1
  with precondition: [V3=Out,V3>=1] 


#### Cost of loops [44,45] 

 * loop 44:verify(V3,Out) -> [verify(V3',Out')] 
6*s(42)+5*s(45)+18*s(44)+5*s(43)+4
  Such that:s(38) =< -V3/3+2/3*V3'+1/3
s(39) =< V3'
s(40) =< V3'/2
s(41) =< V3'/3
s(42) =< s(40)
s(43) =< s(38)
s(43) =< s(41)
s(44) =< s(39)
s(43) =< s(39)
s(42) =< s(39)
s(45) =< s(41)
s(45) =< s(39)

 * loop 45:verify(V3,Out) -> [verify(V3',Out')] 
9*s(68)+5*s(71)+27*s(70)+10*s(69)+4
  Such that:s(64) =< -V3/3+2/3*V3'+1/3
s(65) =< V3'
s(66) =< V3'/2
s(67) =< V3'/3
s(68) =< s(66)
s(69) =< s(64)
s(69) =< s(67)
s(70) =< s(65)
s(69) =< s(65)
s(68) =< s(65)
s(71) =< s(67)
s(71) =< s(65)

#### Cost of phase [44,45]:verify(V3,Out) -> [verify(V3',Out')] 
8*it(44)+15*s(72)+10*s(73)+45*s(74)+5*s(75)+10*s(83)+0
  Such that:aux(23) =< V3/3
aux(31) =< V3
aux(32) =< V3-V3'
it(44) =< aux(31)
it(44) =< aux(32)
aux(24) =< aux(23)*3
aux(27) =< aux(23)
s(78) =< it(44)*aux(23)
aux(25) =< it(44)*aux(24)
s(86) =< it(44)*aux(27)
s(77) =< aux(25)* (1/3)
s(79) =< aux(25)* (1/2)
s(72) =< s(79)
s(83) =< s(86)
s(83) =< s(77)
s(74) =< aux(25)
s(83) =< aux(25)
s(72) =< aux(25)
s(73) =< s(77)
s(73) =< aux(25)
s(75) =< s(78)
s(75) =< s(77)
s(75) =< aux(25)

#### Cost of phase [44,45]:verify(V3,Out) -> [verify(V3',Out')] 
8*it(44)+15*s(72)+10*s(73)+45*s(74)+5*s(75)+10*s(83)+0
  Such that:aux(23) =< V3/3
aux(31) =< V3
aux(32) =< V3-V3'
it(44) =< aux(31)
it(44) =< aux(32)
aux(24) =< aux(23)*3
aux(27) =< aux(23)
s(78) =< it(44)*aux(23)
aux(25) =< it(44)*aux(24)
s(86) =< it(44)*aux(27)
s(77) =< aux(25)* (1/3)
s(79) =< aux(25)* (1/2)
s(72) =< s(79)
s(83) =< s(86)
s(83) =< s(77)
s(74) =< aux(25)
s(83) =< aux(25)
s(72) =< aux(25)
s(73) =< s(77)
s(73) =< aux(25)
s(75) =< s(78)
s(75) =< s(77)
s(75) =< aux(25)

#### Cost of chains of verify(V3,Out):
* Chain [[44,45],47]: 8*it(44)+15*s(72)+10*s(73)+45*s(74)+5*s(75)+10*s(83)+1
  Such that:aux(23) =< V3/3
aux(33) =< V3
it(44) =< aux(33)
aux(24) =< aux(23)*3
aux(27) =< aux(23)
s(78) =< it(44)*aux(23)
aux(25) =< it(44)*aux(24)
s(86) =< it(44)*aux(27)
s(77) =< aux(25)* (1/3)
s(79) =< aux(25)* (1/2)
s(72) =< s(79)
s(83) =< s(86)
s(83) =< s(77)
s(74) =< aux(25)
s(83) =< aux(25)
s(72) =< aux(25)
s(73) =< s(77)
s(73) =< aux(25)
s(75) =< s(78)
s(75) =< s(77)
s(75) =< aux(25)

  with precondition: [2>=Out,V3>=2,Out>=0] 

* Chain [[44,45],46]: 8*it(44)+15*s(72)+10*s(73)+45*s(74)+5*s(75)+10*s(83)+0
  Such that:aux(23) =< V3/3
aux(34) =< V3
it(44) =< aux(34)
aux(24) =< aux(23)*3
aux(27) =< aux(23)
s(78) =< it(44)*aux(23)
aux(25) =< it(44)*aux(24)
s(86) =< it(44)*aux(27)
s(77) =< aux(25)* (1/3)
s(79) =< aux(25)* (1/2)
s(72) =< s(79)
s(83) =< s(86)
s(83) =< s(77)
s(74) =< aux(25)
s(83) =< aux(25)
s(72) =< aux(25)
s(73) =< s(77)
s(73) =< aux(25)
s(75) =< s(78)
s(75) =< s(77)
s(75) =< aux(25)

  with precondition: [Out=0,V3>=1] 

* Chain [47]: 1
  with precondition: [V3=1,Out=2] 

* Chain [46]: 0
  with precondition: [Out=0,V3>=0] 


#### Cost of chains of satck(V3,V1,Out):
* Chain [51]: 16*s(105)+30*s(113)+20*s(114)+90*s(115)+20*s(116)+10*s(117)+2
  Such that:aux(35) =< V1
aux(36) =< V1/3
s(105) =< aux(35)
s(106) =< aux(36)*3
s(107) =< aux(36)
s(108) =< s(105)*aux(36)
s(109) =< s(105)*s(106)
s(110) =< s(105)*s(107)
s(111) =< s(109)* (1/3)
s(112) =< s(109)* (1/2)
s(113) =< s(112)
s(114) =< s(110)
s(114) =< s(111)
s(115) =< s(109)
s(114) =< s(109)
s(113) =< s(109)
s(116) =< s(111)
s(116) =< s(109)
s(117) =< s(108)
s(117) =< s(111)
s(117) =< s(109)

  with precondition: [Out=0,V3>=0,V1>=0] 

* Chain [50]: 3
  with precondition: [V1=1,Out=1,V3>=0] 

* Chain [49]: 16*s(135)+30*s(143)+20*s(144)+90*s(145)+20*s(146)+10*s(147)+3
  Such that:aux(37) =< V1
aux(38) =< V1/3
s(135) =< aux(37)
s(136) =< aux(38)*3
s(137) =< aux(38)
s(138) =< s(135)*aux(38)
s(139) =< s(135)*s(136)
s(140) =< s(135)*s(137)
s(141) =< s(139)* (1/3)
s(142) =< s(139)* (1/2)
s(143) =< s(142)
s(144) =< s(140)
s(144) =< s(141)
s(145) =< s(139)
s(144) =< s(139)
s(143) =< s(139)
s(146) =< s(141)
s(146) =< s(139)
s(147) =< s(138)
s(147) =< s(141)
s(147) =< s(139)

  with precondition: [Out=3,V3>=0,V1>=0] 

* Chain [48]: 8*s(165)+15*s(173)+10*s(174)+45*s(175)+10*s(176)+5*s(177)+3
  Such that:s(164) =< V1
s(163) =< V1/3
s(165) =< s(164)
s(166) =< s(163)*3
s(167) =< s(163)
s(168) =< s(165)*s(163)
s(169) =< s(165)*s(166)
s(170) =< s(165)*s(167)
s(171) =< s(169)* (1/3)
s(172) =< s(169)* (1/2)
s(173) =< s(172)
s(174) =< s(170)
s(174) =< s(171)
s(175) =< s(169)
s(174) =< s(169)
s(173) =< s(169)
s(176) =< s(171)
s(176) =< s(169)
s(177) =< s(168)
s(177) =< s(171)
s(177) =< s(169)

  with precondition: [V1=Out,V3>=0,V1>=2] 


#### Cost of chains of sat(V3,Out):
* Chain [55]: 26*s(179)+30*s(190)+20*s(191)+90*s(192)+20*s(193)+10*s(194)+4
  Such that:aux(39) =< V3
s(181) =< V3/3
s(179) =< aux(39)
s(183) =< s(181)*3
s(184) =< s(181)
s(185) =< s(179)*s(181)
s(186) =< s(179)*s(183)
s(187) =< s(179)*s(184)
s(188) =< s(186)* (1/3)
s(189) =< s(186)* (1/2)
s(190) =< s(189)
s(191) =< s(187)
s(191) =< s(188)
s(192) =< s(186)
s(191) =< s(186)
s(190) =< s(186)
s(193) =< s(188)
s(193) =< s(186)
s(194) =< s(185)
s(194) =< s(188)
s(194) =< s(186)

  with precondition: [Out=0,V3>=0] 

* Chain [54]: 10*s(211)+5
  Such that:s(210) =< V3
s(211) =< s(210)

  with precondition: [Out=1,V3>=1] 

* Chain [53]: 26*s(213)+30*s(224)+20*s(225)+90*s(226)+20*s(227)+10*s(228)+5
  Such that:aux(41) =< V3
s(215) =< V3/3
s(213) =< aux(41)
s(217) =< s(215)*3
s(218) =< s(215)
s(219) =< s(213)*s(215)
s(220) =< s(213)*s(217)
s(221) =< s(213)*s(218)
s(222) =< s(220)* (1/3)
s(223) =< s(220)* (1/2)
s(224) =< s(223)
s(225) =< s(221)
s(225) =< s(222)
s(226) =< s(220)
s(225) =< s(220)
s(224) =< s(220)
s(227) =< s(222)
s(227) =< s(220)
s(228) =< s(219)
s(228) =< s(222)
s(228) =< s(220)

  with precondition: [Out=3,V3>=0] 

* Chain [52]: 18*s(245)+15*s(256)+10*s(257)+45*s(258)+10*s(259)+5*s(260)+5
  Such that:s(247) =< V3/3
aux(43) =< V3
s(245) =< aux(43)
s(249) =< s(247)*3
s(250) =< s(247)
s(251) =< s(245)*s(247)
s(252) =< s(245)*s(249)
s(253) =< s(245)*s(250)
s(254) =< s(252)* (1/3)
s(255) =< s(252)* (1/2)
s(256) =< s(255)
s(257) =< s(253)
s(257) =< s(254)
s(258) =< s(252)
s(257) =< s(252)
s(256) =< s(252)
s(259) =< s(254)
s(259) =< s(252)
s(260) =< s(251)
s(260) =< s(254)
s(260) =< s(252)

  with precondition: [Out>=2,V3>=Out] 


#### Cost of chains of start(V3,V1,V4):
* Chain [60]: 3*s(262)+5*s(265)+50*s(266)+108*s(268)+105*s(282)+70*s(283)+315*s(284)+70*s(285)+35*s(286)+75*s(359)+50*s(360)+225*s(361)+50*s(362)+25*s(363)+5
  Such that:s(261) =< -V3/3+V1/3
s(262) =< V1/2
aux(44) =< V3
aux(45) =< V3/3
aux(46) =< V1
aux(47) =< V1/3
s(268) =< aux(44)
s(266) =< aux(46)
s(275) =< aux(45)*3
s(276) =< aux(45)
s(277) =< s(268)*aux(45)
s(278) =< s(268)*s(275)
s(279) =< s(268)*s(276)
s(280) =< s(278)* (1/3)
s(281) =< s(278)* (1/2)
s(282) =< s(281)
s(283) =< s(279)
s(283) =< s(280)
s(284) =< s(278)
s(283) =< s(278)
s(282) =< s(278)
s(285) =< s(280)
s(285) =< s(278)
s(286) =< s(277)
s(286) =< s(280)
s(286) =< s(278)
s(265) =< s(261)
s(265) =< aux(47)
s(265) =< aux(46)
s(262) =< aux(46)
s(352) =< aux(47)*3
s(353) =< aux(47)
s(354) =< s(266)*aux(47)
s(355) =< s(266)*s(352)
s(356) =< s(266)*s(353)
s(357) =< s(355)* (1/3)
s(358) =< s(355)* (1/2)
s(359) =< s(358)
s(360) =< s(356)
s(360) =< s(357)
s(361) =< s(355)
s(360) =< s(355)
s(359) =< s(355)
s(362) =< s(357)
s(362) =< s(355)
s(363) =< s(354)
s(363) =< s(357)
s(363) =< s(355)

  with precondition: [V3>=0] 

* Chain [59]: 1
  with precondition: [V3=1] 

* Chain [58]: 1
  with precondition: [V3=2,V1>=0,V4>=0] 

* Chain [57]: 3
  with precondition: [V1=1,V3>=0] 

* Chain [56]: 1*s(394)+1
  Such that:s(394) =< V1

  with precondition: [V3=V1,V3>=2] 


Closed-form bounds of start(V3,V1,V4): 
-------------------------------------
* Chain [60] with precondition: [V3>=0] 
    - Upper bound: 108*V3+5+nat(V1)*50+nat(-V3/3+V1/3)*5+2555/6*V3*V3+nat(V1/2)*3+1825/2*nat(V1/3)*nat(V1) 
    - Complexity: n^2 
* Chain [59] with precondition: [V3=1] 
    - Upper bound: 1 
    - Complexity: constant 
* Chain [58] with precondition: [V3=2,V1>=0,V4>=0] 
    - Upper bound: 1 
    - Complexity: constant 
* Chain [57] with precondition: [V1=1,V3>=0] 
    - Upper bound: 3 
    - Complexity: constant 
* Chain [56] with precondition: [V3=V1,V3>=2] 
    - Upper bound: V1+1 
    - Complexity: n 

### Maximum cost of start(V3,V1,V4): max([2,108*V3+4+nat(V1)*49+nat(-V3/3+V1/3)*5+2555/6*V3*V3+nat(V1/2)*3+1825/2*nat(V1/3)*nat(V1)+nat(V1)])+1 
Asymptotic class: n^2 

Time statistics: 
-------------------------------------
* Partial evaluation computed in 57 ms.
* Invariants computed in 151 ms.
   - Backward Invariants 71 ms.
   - Transitive Invariants 31 ms.
* Refinement performed in 444 ms.
* Termination proved in 48 ms.
* Upper bounds computed in 980 ms.
   - Equation cost structures 605 ms.
   - Phase cost structures 359 ms.
   - Chain cost structures 83 ms.
   - Solving cost expressions 15 ms.
* Total analysis performed in 1804 ms.



Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. non_recursive  : [fun/2]
1. recursive  : [fun2/3]
2. non_recursive  : [fun1/2]
3. recursive  : [fun4/3]
4. non_recursive  : [fun3/2]
5. recursive  : [fun6/3]
6. non_recursive  : [fun5/2]
7. recursive  : [fun8/3]
8. non_recursive  : [fun7/2]
9. recursive  : [fun10/3]
10. non_recursive  : [fun9/2]
11. non_recursive  : [start/2]

#### Obtained direct recursion through partial evaluation 
0. SCC is completely evaluated into other SCCs
1. SCC is partially evaluated into fun2/3
2. SCC is completely evaluated into other SCCs
3. SCC is partially evaluated into fun4/3
4. SCC is completely evaluated into other SCCs
5. SCC is partially evaluated into fun6/3
6. SCC is completely evaluated into other SCCs
7. SCC is partially evaluated into fun8/3
8. SCC is completely evaluated into other SCCs
9. SCC is partially evaluated into fun10/3
10. SCC is completely evaluated into other SCCs
11. SCC is partially evaluated into start/2

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations fun2/3 
* CE 14 is refined into CE [23] 
* CE 13 is refined into CE [24] 


#### Refined cost equations fun2/3 
* CE 23: fun2(V,V3,Out) = 0
     [V3>=0,V>=0,Out=0] 
* CE 24: fun2(V,V3,Out) = 2+ fun2(W3,V3,X3)
     [W3>=0,V3>=0,X3+1=Out,W3+1=V] 

### Cost equations --> "Loop" of fun2/3 
* CEs [24] --> Loop 12 
* CEs [23] --> Loop 13 

#### Loops of fun2/3 
* Loop 12: fun2(V,V3,Out)->  fun2(V',V3,Out')
                  [V'>=0,V3>=0,Out=Out'+1,V'+1=V] 
* Loop 13: fun2(V,V3,Out) [V3>=0,V>=0,Out=0] 

### Ranking functions of CR fun2(V,V3,Out) 
* RF of phase [12]: [V]

#### Partial ranking functions of CR fun2(V,V3,Out) 
* Partial RF of phase [12]:
  - RF of loop [12:1]:
    V


### Resulting Chains:fun2(V,V3,Out) 
* [[12],13]
* [13]


### Merging Chains  fun2/3 into  External patterns of execution 
* [[13]] --> 1 
* [[13,[12]]] --> 2 


### Specialization of cost equations fun4/3 
* CE 16 is refined into CE [25] 
* CE 15 is refined into CE [26,27] 


#### Refined cost equations fun4/3 
* CE 25: fun4(V,V3,Out) = 0
     [V3>=0,V>=0,Out=0] 
* CE 26: fun4(V,V3,Out) = 2+ fun2(V3,V3,W3):1+ fun4(X3,V3,Y3)
     [X3>=0,V3>=0,Y3+1=Out,X3+1=V,W3=0] 
* CE 27: fun4(V,V3,Out) = 2+ fun2(V3,V3,W3):2+ fun4(X3,V3,Y3)
     [V3>=W3,X3>=0,W3>=1,W3+Y3+1=Out,X3+1=V] 

### Cost equations --> "Loop" of fun4/3 
* CEs [27] --> Loop 14 
* CEs [26] --> Loop 15 
* CEs [25] --> Loop 16 

#### Loops of fun4/3 
* Loop 14: fun4(V,V3,Out)->  fun4(V',V3,Out')
                  [V3+Out'+1>=Out,Out>=Out'+2,V>=1,V=V'+1] 
* Loop 15: fun4(V,V3,Out)->  fun4(V',V3,Out')
                  [V3>=0,V>=1,Out=Out'+1,V=V'+1] 
* Loop 16: fun4(V,V3,Out) [V3>=0,V>=0,Out=0] 

### Ranking functions of CR fun4(V,V3,Out) 
* RF of phase [14,15]: [V]

#### Partial ranking functions of CR fun4(V,V3,Out) 
* Partial RF of phase [14,15]:
  - RF of loop [14:1,15:1]:
    V


### Resulting Chains:fun4(V,V3,Out) 
* [[14,15],16]
* [16]


### Merging Chains  fun4/3 into  External patterns of execution 
* [[16]] --> 1 
* [[16,[14,15]]] --> 2 


### Specialization of cost equations fun6/3 
* CE 18 is refined into CE [28] 
* CE 17 is refined into CE [29,30] 


#### Refined cost equations fun6/3 
* CE 28: fun6(V,V3,Out) = 0
     [V3>=0,V>=0,Out=0] 
* CE 29: fun6(V,V3,Out) = 2+ fun4(V3,V3,W3):1+ fun6(X3,V3,Y3)
     [X3>=0,V3>=0,Y3+1=Out,X3+1=V,W3=0] 
* CE 30: fun6(V,V3,Out) = 2+ fun4(V3,V3,W3):2+ fun6(X3,V3,Y3)
     [X3>=0,W3>=1,V3>=1,W3+Y3+1=Out,X3+1=V] 

### Cost equations --> "Loop" of fun6/3 
* CEs [30] --> Loop 17 
* CEs [29] --> Loop 18 
* CEs [28] --> Loop 19 

#### Loops of fun6/3 
* Loop 17: fun6(V,V3,Out)->  fun6(V',V3,Out')
                  [Out>=Out'+2,V3>=1,V>=1,V=V'+1] 
* Loop 18: fun6(V,V3,Out)->  fun6(V',V3,Out')
                  [V3>=0,V>=1,Out=Out'+1,V=V'+1] 
* Loop 19: fun6(V,V3,Out) [V3>=0,V>=0,Out=0] 

### Ranking functions of CR fun6(V,V3,Out) 
* RF of phase [17,18]: [V]

#### Partial ranking functions of CR fun6(V,V3,Out) 
* Partial RF of phase [17,18]:
  - RF of loop [17:1,18:1]:
    V


### Resulting Chains:fun6(V,V3,Out) 
* [[17,18],19]
* [19]


### Merging Chains  fun6/3 into  External patterns of execution 
* [[19]] --> 1 
* [[19,[17,18]]] --> 2 


### Specialization of cost equations fun8/3 
* CE 20 is refined into CE [31] 
* CE 19 is refined into CE [32,33] 


#### Refined cost equations fun8/3 
* CE 31: fun8(V,V3,Out) = 0
     [V3>=0,V>=0,Out=0] 
* CE 32: fun8(V,V3,Out) = 2+ fun6(V3,V3,W3):1+ fun8(X3,V3,Y3)
     [X3>=0,V3>=0,Y3+1=Out,X3+1=V,W3=0] 
* CE 33: fun8(V,V3,Out) = 2+ fun6(V3,V3,W3):2+ fun8(X3,V3,Y3)
     [X3>=0,W3>=1,V3>=1,W3+Y3+1=Out,X3+1=V] 

### Cost equations --> "Loop" of fun8/3 
* CEs [33] --> Loop 20 
* CEs [32] --> Loop 21 
* CEs [31] --> Loop 22 

#### Loops of fun8/3 
* Loop 20: fun8(V,V3,Out)->  fun8(V',V3,Out')
                  [Out>=Out'+2,V3>=1,V>=1,V=V'+1] 
* Loop 21: fun8(V,V3,Out)->  fun8(V',V3,Out')
                  [V3>=0,V>=1,Out=Out'+1,V=V'+1] 
* Loop 22: fun8(V,V3,Out) [V3>=0,V>=0,Out=0] 

### Ranking functions of CR fun8(V,V3,Out) 
* RF of phase [20,21]: [V]

#### Partial ranking functions of CR fun8(V,V3,Out) 
* Partial RF of phase [20,21]:
  - RF of loop [20:1,21:1]:
    V


### Resulting Chains:fun8(V,V3,Out) 
* [[20,21],22]
* [22]


### Merging Chains  fun8/3 into  External patterns of execution 
* [[22]] --> 1 
* [[22,[20,21]]] --> 2 


### Specialization of cost equations fun10/3 
* CE 22 is refined into CE [34] 
* CE 21 is refined into CE [35,36] 


#### Refined cost equations fun10/3 
* CE 34: fun10(V,V3,Out) = 0
     [V3>=0,V>=0,Out=0] 
* CE 35: fun10(V,V3,Out) = 2+ fun8(V3,V3,W3):1+ fun10(X3,V3,Y3)
     [X3>=0,V3>=0,Y3+1=Out,X3+1=V,W3=0] 
* CE 36: fun10(V,V3,Out) = 2+ fun8(V3,V3,W3):2+ fun10(X3,V3,Y3)
     [X3>=0,W3>=1,V3>=1,W3+Y3+1=Out,X3+1=V] 

### Cost equations --> "Loop" of fun10/3 
* CEs [36] --> Loop 23 
* CEs [35] --> Loop 24 
* CEs [34] --> Loop 25 

#### Loops of fun10/3 
* Loop 23: fun10(V,V3,Out)->  fun10(V',V3,Out')
                  [Out>=Out'+2,V3>=1,V>=1,V=V'+1] 
* Loop 24: fun10(V,V3,Out)->  fun10(V',V3,Out')
                  [V3>=0,V>=1,Out=Out'+1,V=V'+1] 
* Loop 25: fun10(V,V3,Out) [V3>=0,V>=0,Out=0] 

### Ranking functions of CR fun10(V,V3,Out) 
* RF of phase [23,24]: [V]

#### Partial ranking functions of CR fun10(V,V3,Out) 
* Partial RF of phase [23,24]:
  - RF of loop [23:1,24:1]:
    V


### Resulting Chains:fun10(V,V3,Out) 
* [[23,24],25]
* [25]


### Merging Chains  fun10/3 into  External patterns of execution 
* [[25]] --> 1 
* [[25,[23,24]]] --> 2 


### Specialization of cost equations start/2 
* CE 2 is refined into CE [37] 
* CE 3 is refined into CE [38,39] 
* CE 4 is refined into CE [40,41] 
* CE 5 is refined into CE [42,43] 
* CE 6 is refined into CE [44,45] 
* CE 7 is refined into CE [46,47] 
* CE 8 is refined into CE [48,49] 
* CE 9 is refined into CE [50,51] 
* CE 10 is refined into CE [52,53] 
* CE 11 is refined into CE [54,55] 
* CE 12 is refined into CE [56,57] 


#### Refined cost equations start/2 
* CE 37: start(V,V3) = 1
     [V>=0] 
* CE 38: start(V,V3) = 1+ fun2(V,V,W3):1
     [V>=0,W3=0] 
* CE 39: start(V,V3) = 1+ fun2(V,V,W3):2
     [V>=W3,W3>=1] 
* CE 40: start(V,V3) = 0+ fun2(V,V3,W3):1
     [V3>=0,V>=0,W3=0] 
* CE 41: start(V,V3) = 0+ fun2(V,V3,W3):2
     [V>=W3,W3>=1,V3>=0] 
* CE 42: start(V,V3) = 1+ fun4(V,V,W3):1
     [V>=0,W3=0] 
* CE 43: start(V,V3) = 1+ fun4(V,V,W3):2
     [W3>=1,V>=1] 
* CE 44: start(V,V3) = 0+ fun4(V,V3,W3):1
     [V3>=0,V>=0,W3=0] 
* CE 45: start(V,V3) = 0+ fun4(V,V3,W3):2
     [W3>=1,V3>=0,V>=1] 
* CE 46: start(V,V3) = 1+ fun6(V,V,W3):1
     [V>=0,W3=0] 
* CE 47: start(V,V3) = 1+ fun6(V,V,W3):2
     [W3>=1,V>=1] 
* CE 48: start(V,V3) = 0+ fun6(V,V3,W3):1
     [V3>=0,V>=0,W3=0] 
* CE 49: start(V,V3) = 0+ fun6(V,V3,W3):2
     [W3>=1,V3>=0,V>=1] 
* CE 50: start(V,V3) = 1+ fun8(V,V,W3):1
     [V>=0,W3=0] 
* CE 51: start(V,V3) = 1+ fun8(V,V,W3):2
     [W3>=1,V>=1] 
* CE 52: start(V,V3) = 0+ fun8(V,V3,W3):1
     [V3>=0,V>=0,W3=0] 
* CE 53: start(V,V3) = 0+ fun8(V,V3,W3):2
     [W3>=1,V3>=0,V>=1] 
* CE 54: start(V,V3) = 1+ fun10(V,V,W3):1
     [V>=0,W3=0] 
* CE 55: start(V,V3) = 1+ fun10(V,V,W3):2
     [W3>=1,V>=1] 
* CE 56: start(V,V3) = 0+ fun10(V,V3,W3):1
     [V3>=0,V>=0,W3=0] 
* CE 57: start(V,V3) = 0+ fun10(V,V3,W3):2
     [W3>=1,V3>=0,V>=1] 

### Cost equations --> "Loop" of start/2 
* CEs [37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57] --> Loop 26 

#### Loops of start/2 
* Loop 26: start(V,V3) [V>=0] 

### Ranking functions of CR start(V,V3) 

#### Partial ranking functions of CR start(V,V3) 


### Resulting Chains:start(V,V3) 
* [26]


### Merging Chains  start/2 into  External patterns of execution 
* [[26]] --> 1 


Computing Bounds
=====================================

#### Cost of loops [12] 

 * loop 12:fun2(V,V3,Out) -> [fun2(V',V3',Out')] 
2
#### Cost of phase [12]:fun2(V,V3,Out) -> [fun2(V',V3',Out')] 
2*it(12)+0
  Such that:it(12) =< V
it(12) =< V-V'

#### Cost of chains of fun2(V,V3,Out):
* Chain [[12],13]: 2*it(12)+0
  Such that:it(12) =< Out

  with precondition: [V3>=0,Out>=1,V>=Out] 

* Chain [13]: 0
  with precondition: [Out=0,V>=0,V3>=0] 


#### Cost of loops [14,15] 

 * loop 14:fun4(V,V3,Out) -> [fun4(V',V3',Out')] 
2*s(2)+2
  Such that:s(2) =< V3'

 * loop 15:fun4(V,V3,Out) -> [fun4(V',V3',Out')] 
2
#### Cost of phase [14,15]:fun4(V,V3,Out) -> [fun4(V',V3',Out')] 
4*it(14)+2*s(3)+0
  Such that:aux(1) =< V3
aux(2) =< V
aux(3) =< V-V'
it(14) =< aux(2)
it(14) =< aux(3)
s(3) =< it(14)*aux(1)

#### Cost of chains of fun4(V,V3,Out):
* Chain [[14,15],16]: 4*it(14)+2*s(3)+0
  Such that:aux(1) =< V3
aux(4) =< V
it(14) =< aux(4)
s(3) =< it(14)*aux(1)

  with precondition: [V>=1,V3>=0,Out>=1] 

* Chain [16]: 0
  with precondition: [Out=0,V>=0,V3>=0] 


#### Cost of loops [17,18] 

 * loop 17:fun6(V,V3,Out) -> [fun6(V',V3',Out')] 
4*s(9)+2*s(10)+2
  Such that:s(8) =< V3'
s(9) =< s(8)
s(10) =< s(9)*s(8)

 * loop 18:fun6(V,V3,Out) -> [fun6(V',V3',Out')] 
2
#### Cost of phase [17,18]:fun6(V,V3,Out) -> [fun6(V',V3',Out')] 
4*it(17)+4*s(11)+2*s(12)+0
  Such that:s(8) =< V3
aux(7) =< V
aux(8) =< V-V'
it(17) =< aux(7)
it(17) =< aux(8)
aux(6) =< s(8)
s(13) =< it(17)*aux(6)
s(11) =< s(13)
s(12) =< s(11)*s(8)

#### Cost of chains of fun6(V,V3,Out):
* Chain [[17,18],19]: 4*it(17)+4*s(11)+2*s(12)+0
  Such that:s(8) =< V3
aux(9) =< V
it(17) =< aux(9)
aux(6) =< s(8)
s(13) =< it(17)*aux(6)
s(11) =< s(13)
s(12) =< s(11)*s(8)

  with precondition: [V>=1,V3>=0,Out>=1] 

* Chain [19]: 0
  with precondition: [Out=0,V>=0,V3>=0] 


#### Cost of loops [20,21] 

 * loop 20:fun8(V,V3,Out) -> [fun8(V',V3',Out')] 
4*s(22)+4*s(25)+2*s(26)+2
  Such that:s(21) =< V3'
s(22) =< s(21)
s(23) =< s(21)
s(24) =< s(22)*s(23)
s(25) =< s(24)
s(26) =< s(25)*s(21)

 * loop 21:fun8(V,V3,Out) -> [fun8(V',V3',Out')] 
2
#### Cost of phase [20,21]:fun8(V,V3,Out) -> [fun8(V',V3',Out')] 
4*it(20)+4*s(27)+4*s(28)+2*s(29)+0
  Such that:s(21) =< V3
aux(12) =< V
aux(13) =< V-V'
it(20) =< aux(12)
it(20) =< aux(13)
aux(11) =< s(21)
s(31) =< it(20)*aux(11)
s(27) =< s(31)
s(30) =< s(27)*aux(11)
s(28) =< s(30)
s(29) =< s(28)*s(21)

#### Cost of chains of fun8(V,V3,Out):
* Chain [[20,21],22]: 4*it(20)+4*s(27)+4*s(28)+2*s(29)+0
  Such that:s(21) =< V3
aux(14) =< V
it(20) =< aux(14)
aux(11) =< s(21)
s(31) =< it(20)*aux(11)
s(27) =< s(31)
s(30) =< s(27)*aux(11)
s(28) =< s(30)
s(29) =< s(28)*s(21)

  with precondition: [V>=1,V3>=0,Out>=1] 

* Chain [22]: 0
  with precondition: [Out=0,V>=0,V3>=0] 


#### Cost of loops [23,24] 

 * loop 23:fun10(V,V3,Out) -> [fun10(V',V3',Out')] 
4*s(42)+4*s(45)+4*s(47)+2*s(48)+2
  Such that:s(41) =< V3'
s(42) =< s(41)
s(43) =< s(41)
s(44) =< s(42)*s(43)
s(45) =< s(44)
s(46) =< s(45)*s(43)
s(47) =< s(46)
s(48) =< s(47)*s(41)

 * loop 24:fun10(V,V3,Out) -> [fun10(V',V3',Out')] 
2
#### Cost of phase [23,24]:fun10(V,V3,Out) -> [fun10(V',V3',Out')] 
4*it(23)+4*s(49)+4*s(50)+4*s(51)+2*s(52)+0
  Such that:s(41) =< V3
aux(17) =< V
aux(18) =< V-V'
it(23) =< aux(17)
it(23) =< aux(18)
aux(16) =< s(41)
s(55) =< it(23)*aux(16)
s(49) =< s(55)
s(54) =< s(49)*aux(16)
s(50) =< s(54)
s(53) =< s(50)*aux(16)
s(51) =< s(53)
s(52) =< s(51)*s(41)

#### Cost of chains of fun10(V,V3,Out):
* Chain [[23,24],25]: 4*it(23)+4*s(49)+4*s(50)+4*s(51)+2*s(52)+0
  Such that:s(41) =< V3
aux(19) =< V
it(23) =< aux(19)
aux(16) =< s(41)
s(55) =< it(23)*aux(16)
s(49) =< s(55)
s(54) =< s(49)*aux(16)
s(50) =< s(54)
s(53) =< s(50)*aux(16)
s(51) =< s(53)
s(52) =< s(51)*s(41)

  with precondition: [V>=1,V3>=0,Out>=1] 

* Chain [25]: 0
  with precondition: [Out=0,V>=0,V3>=0] 


#### Cost of chains of start(V,V3):
* Chain [26]: 36*s(56)+2*s(61)+2*s(65)+12*s(71)+2*s(72)+12*s(78)+2*s(79)+8*s(87)+2*s(88)+8*s(96)+2*s(97)+4*s(107)+2*s(108)+4*s(118)+2*s(119)+1
  Such that:aux(24) =< V
aux(25) =< V3
s(56) =< aux(24)
s(61) =< s(56)*aux(24)
s(69) =< aux(24)
s(70) =< s(56)*s(69)
s(71) =< s(70)
s(72) =< s(71)*aux(24)
s(86) =< s(71)*s(69)
s(87) =< s(86)
s(88) =< s(87)*aux(24)
s(106) =< s(87)*s(69)
s(107) =< s(106)
s(108) =< s(107)*aux(24)
s(65) =< s(56)*aux(25)
s(76) =< aux(25)
s(77) =< s(56)*s(76)
s(78) =< s(77)
s(79) =< s(78)*aux(25)
s(95) =< s(78)*s(76)
s(96) =< s(95)
s(97) =< s(96)*aux(25)
s(117) =< s(96)*s(76)
s(118) =< s(117)
s(119) =< s(118)*aux(25)

  with precondition: [V>=0] 


Closed-form bounds of start(V,V3): 
-------------------------------------
* Chain [26] with precondition: [V>=0] 
    - Upper bound: 36*V+1+14*V*V+10*V*V*V+6*V*V*V*V+2*V*V*V*V*V+nat(V3)*14*V+nat(V3)*10*nat(V3)*V+nat(V3)*6*nat(V3)*nat(V3)*V+nat(V3)*2*nat(V3)*nat(V3)*nat(V3)*V 
    - Complexity: n^5 

### Maximum cost of start(V,V3): 36*V+1+14*V*V+10*V*V*V+6*V*V*V*V+2*V*V*V*V*V+nat(V3)*14*V+nat(V3)*10*nat(V3)*V+nat(V3)*6*nat(V3)*nat(V3)*V+nat(V3)*2*nat(V3)*nat(V3)*nat(V3)*V 
Asymptotic class: n^5 

Time statistics: 
-------------------------------------
* Partial evaluation computed in 57 ms.
* Invariants computed in 105 ms.
   - Backward Invariants 37 ms.
   - Transitive Invariants 33 ms.
* Refinement performed in 207 ms.
* Termination proved in 31 ms.
* Upper bounds computed in 313 ms.
   - Equation cost structures 137 ms.
   - Phase cost structures 143 ms.
   - Chain cost structures 44 ms.
   - Solving cost expressions 9 ms.
* Total analysis performed in 806 ms.



Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. non_recursive  : [if/4]
1. recursive  : [leq/3]
2. recursive  : [minus/3]
3. recursive [non_tail] : [ (mod)/3]
4. non_recursive  : [start/3]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into if/4
1. SCC is partially evaluated into leq/3
2. SCC is partially evaluated into minus/3
3. SCC is partially evaluated into (mod)/3
4. SCC is partially evaluated into start/3

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations if/4 
* CE 12 is refined into CE [20] 
* CE 10 is refined into CE [21] 
* CE 11 is refined into CE [22] 


#### Refined cost equations if/4 
* CE 20: if(V1,V,V8,Out) = 0
     [V8>=0,V>=0,V1>=0,Out=0] 
* CE 21: if(A,B,C,B) = 1
     [C>=0,B>=0,A=2] 
* CE 22: if(A,B,C,C) = 1
     [C>=0,B>=0,A=1] 

### Cost equations --> "Loop" of if/4 
* CEs [20] --> Loop 15 
* CEs [21] --> Loop 16 
* CEs [22] --> Loop 17 

#### Loops of if/4 
* Loop 15: if(V1,V,V8,Out) [V8>=0,V>=0,V1>=0,Out=0] 
* Loop 16: if(A,B,C,B) [C>=0,B>=0,A=2] 
* Loop 17: if(A,B,C,C) [C>=0,B>=0,A=1] 

### Ranking functions of CR if(V1,V,V8,Out) 

#### Partial ranking functions of CR if(V1,V,V8,Out) 


### Resulting Chains:if(V1,V,V8,Out) 
* [17]
* [16]
* [15]


### Merging Chains  if/4 into  External patterns of execution 
* [[17]] --> 1 
* [[16]] --> 2 
* [[15]] --> 3 


### Specialization of cost equations leq/3 
* CE 9 is refined into CE [23] 
* CE 7 is refined into CE [24] 
* CE 6 is refined into CE [25] 
* CE 8 is refined into CE [26] 


#### Refined cost equations leq/3 
* CE 23: leq(V1,V,Out) = 0
     [V>=0,V1>=0,Out=0] 
* CE 24: leq(V1,V,Out) = 1
     [V1>=1,Out=1,V=0] 
* CE 25: leq(V1,V,Out) = 1
     [V>=0,Out=2,V1=0] 
* CE 26: leq(V1,V,Out) = 1+ leq(W1,X1,Out)
     [X1>=0,W1>=0,X1+1=V,W1+1=V1] 

### Cost equations --> "Loop" of leq/3 
* CEs [26] --> Loop 18 
* CEs [23] --> Loop 19 
* CEs [24] --> Loop 20 
* CEs [25] --> Loop 21 

#### Loops of leq/3 
* Loop 18: leq(V1,V,Out)->  leq(V1',V',Out)
                  [V'>=0,V1'>=0,V'+1=V,V1'+1=V1] 
* Loop 19: leq(V1,V,Out) [V>=0,V1>=0,Out=0] 
* Loop 20: leq(V1,V,Out) [V1>=1,Out=1,V=0] 
* Loop 21: leq(V1,V,Out) [V>=0,Out=2,V1=0] 

### Ranking functions of CR leq(V1,V,Out) 
* RF of phase [18]: [V,V1]

#### Partial ranking functions of CR leq(V1,V,Out) 
* Partial RF of phase [18]:
  - RF of loop [18:1]:
    V
    V1


### Resulting Chains:leq(V1,V,Out) 
* [[18],21]
* [[18],20]
* [[18],19]
* [21]
* [20]
* [19]


### Merging Chains  leq/3 into  External patterns of execution 
* [[21]] --> 1 
* [[20]] --> 2 
* [[19],[19,[18]]] --> 3 
* [[20,[18]]] --> 4 
* [[21,[18]]] --> 5 


### Specialization of cost equations minus/3 
* CE 15 is refined into CE [27] 
* CE 13 is refined into CE [28] 
* CE 14 is refined into CE [29] 


#### Refined cost equations minus/3 
* CE 27: minus(V1,V,Out) = 0
     [V>=0,V1>=0,Out=0] 
* CE 28: minus(A,B,A) = 1
     [A>=0,B=0] 
* CE 29: minus(V1,V,Out) = 1+ minus(W1,X1,Out)
     [X1>=0,W1>=0,X1+1=V,W1+1=V1] 

### Cost equations --> "Loop" of minus/3 
* CEs [29] --> Loop 22 
* CEs [27] --> Loop 23 
* CEs [28] --> Loop 24 

#### Loops of minus/3 
* Loop 22: minus(V1,V,Out)->  minus(V1',V',Out)
                  [V'>=0,V1'>=0,V'+1=V,V1'+1=V1] 
* Loop 23: minus(V1,V,Out) [V>=0,V1>=0,Out=0] 
* Loop 24: minus(A,B,A) [A>=0,B=0] 

### Ranking functions of CR minus(V1,V,Out) 
* RF of phase [22]: [V,V1]

#### Partial ranking functions of CR minus(V1,V,Out) 
* Partial RF of phase [22]:
  - RF of loop [22:1]:
    V
    V1


### Resulting Chains:minus(V1,V,Out) 
* [[22],24]
* [[22],23]
* [24]
* [23]


### Merging Chains  minus/3 into  External patterns of execution 
* [[24]] --> 1 
* [[23],[23,[22]]] --> 2 
* [[24,[22]]] --> 3 


### Specialization of cost equations (mod)/3 
* CE 17 is refined into CE [30] 
* CE 16 is refined into CE [31] 
* CE 19 is refined into CE [32] 
* CE 18 is refined into CE [33,34,35,36,37,38,39,40,41,42,43,44,45,46] 


#### Refined cost equations (mod)/3 
* CE 30: mod(V1,V,Out) = 1
     [V1>=1,Out=0,V=0] 
* CE 31: mod(V1,V,Out) = 1
     [V>=0,Out=0,V1=0] 
* CE 32: mod(V1,V,Out) = 0
     [V>=0,V1>=0,Out=0] 
* CE 33: mod(V1,V,Out) = 1+ leq(W1,X1,Y1):1+ minus(V1,Z1,A2):2+ mod(B2,C2,Out)+ if(D2,Out,V1,Out):2
     [Out>=0,V1>=1,V1=X1+1,C2=1,B2=0,D2=2,A2=0,Z1=1,Y1=2,W1=0,V=1] 
* CE 34: mod(V1,V,Out) = 1+ leq(W1,X1,Y1):1+ minus(V1,Z1,A2):2+ mod(B2,C2,D2)+ if(E2,D2,V1,F2):3
     [V1>=1,D2>=0,V1=X1+1,C2=1,B2=0,F2=0,E2=2,A2=0,Z1=1,Y1=2,W1=0,Out=0,V=1] 
* CE 35: mod(V1,V,Out) = 1+ leq(W1,X1,Y1):1+ minus(V1,Z1,A2):3+ mod(B2,C2,Out)+ if(D2,Out,V1,Out):2
     [Out>=0,V1>=1,V1=B2+1,V1=A2+1,V1=X1+1,C2=1,D2=2,Z1=1,Y1=2,W1=0,V=1] 
* CE 36: mod(V1,V,Out) = 1+ leq(W1,X1,Y1):1+ minus(V1,Z1,A2):3+ mod(B2,C2,D2)+ if(E2,D2,V1,F2):3
     [V1>=1,D2>=0,V1=B2+1,V1=A2+1,V1=X1+1,C2=1,F2=0,E2=2,Z1=1,Y1=2,W1=0,Out=0,V=1] 
* CE 37: mod(V1,V,Out) = 1+ leq(W1,X1,Y1):2+ minus(Z1,V,A2):2+ mod(B2,V,C2)+ if(D2,C2,E2,F2):1
     [C2>=0,V>=2,V=W1+1,B2=0,F2=1,E2=1,D2=1,A2=0,Z1=1,Y1=1,X1=0,Out=1,V1=1] 
* CE 38: mod(V1,V,Out) = 1+ leq(W1,X1,Y1):2+ minus(Z1,V,A2):2+ mod(B2,V,C2)+ if(D2,C2,E2,F2):3
     [C2>=0,V>=2,V=W1+1,B2=0,F2=0,E2=1,D2=1,A2=0,Z1=1,Y1=1,X1=0,Out=0,V1=1] 
* CE 39: mod(V1,V,Out) = 1+ leq(W1,X1,Y1):3+ minus(V1,V,Z1):2+ mod(A2,V,B2)+ if(C2,B2,V1,D2):3
     [V1>=1,B2>=0,V>=1,V1=X1+1,V=W1+1,A2=0,D2=0,C2=0,Z1=0,Y1=0,Out=0] 
* CE 40: mod(V1,V,Out) = 1+ leq(W1,X1,Y1):3+ minus(V1,V,Z1):3+ mod(A2,V,B2)+ if(C2,B2,V1,D2):3
     [V1>=V,B2>=0,V>=1,V1=V+A2,V1=V+Z1,V1=X1+1,V=W1+1,D2=0,C2=0,Y1=0,Out=0] 
* CE 41: mod(A,B,A) = 1+ leq(C,D,E):4+ minus(A,B,F):2+ mod(G,B,H)+ if(I,H,A,A):1
     [B>=A+1,A>=2,H>=0,A=D+1,B=C+1,G=0,I=1,F=0,E=1] 
* CE 42: mod(V1,V,Out) = 1+ leq(W1,X1,Y1):4+ minus(V1,V,Z1):2+ mod(A2,V,B2)+ if(C2,B2,V1,D2):3
     [V>=V1+1,V1>=2,B2>=0,V1=X1+1,V=W1+1,A2=0,D2=0,C2=1,Z1=0,Y1=1,Out=0] 
* CE 43: mod(V1,V,Out) = 1+ leq(W1,X1,Y1):5+ minus(V1,V,Z1):2+ mod(A2,V,Out)+ if(B2,Out,V1,Out):2
     [V1>=V,Out>=0,V>=2,V1=X1+1,V=W1+1,A2=0,B2=2,Z1=0,Y1=2] 
* CE 44: mod(V1,V,Out) = 1+ leq(W1,X1,Y1):5+ minus(V1,V,Z1):2+ mod(A2,V,B2)+ if(C2,B2,V1,D2):3
     [V1>=V,B2>=0,V>=2,V1=X1+1,V=W1+1,A2=0,D2=0,C2=2,Z1=0,Y1=2,Out=0] 
* CE 45: mod(V1,V,Out) = 1+ leq(W1,X1,Y1):5+ minus(V1,V,Z1):3+ mod(A2,V,Out)+ if(B2,Out,V1,Out):2
     [V1>=V,Out>=0,V>=2,V1=V+A2,V1=V+Z1,V1=X1+1,V=W1+1,B2=2,Y1=2] 
* CE 46: mod(V1,V,Out) = 1+ leq(W1,X1,Y1):5+ minus(V1,V,Z1):3+ mod(A2,V,B2)+ if(C2,B2,V1,D2):3
     [V1>=V,B2>=0,V>=2,V1=V+A2,V1=V+Z1,V1=X1+1,V=W1+1,D2=0,C2=2,Y1=2,Out=0] 

### Cost equations --> "Loop" of (mod)/3 
* CEs [45] --> Loop 25 
* CEs [43] --> Loop 26 
* CEs [41] --> Loop 27 
* CEs [35] --> Loop 28 
* CEs [33] --> Loop 29 
* CEs [36,40,46] --> Loop 30 
* CEs [34] --> Loop 31 
* CEs [37] --> Loop 32 
* CEs [38,39,42,44] --> Loop 33 
* CEs [30] --> Loop 34 
* CEs [31,32] --> Loop 35 

#### Loops of (mod)/3 
* Loop 25: mod(V1,V,Out)->  mod(V1',V,Out)
                  [V1>=V,Out>=0,V>=2,V+V1'=V1] 
* Loop 26: mod(V1,V,Out)->  mod(V1',V,Out)
                  [V1>=V,Out>=0,V>=2,V1'=0] 
* Loop 27: mod(A,B,A)->  mod(A',B,B')
                  [B>=A+1,B'>=0,A>=2,A'=0] 
* Loop 28: mod(V1,V,Out)->  mod(V1',V',Out)
                  [Out>=0,V1>=1,V1=V1'+1,V'=1,V=1] 
* Loop 29: mod(V1,V,Out)->  mod(V1',V',Out)
                  [Out>=0,V1>=1,V'=1,V1'=0,V=1] 
* Loop 30: mod(V1,V,Out)->  mod(V1',V,Out')
                  [V1>=V,Out'>=0,V>=1,V+V1'=V1,Out=0] 
* Loop 31: mod(V1,V,Out)->  mod(V1',V',Out')
                  [Out'>=0,V1>=1,V'=1,V1'=0,Out=0,V=1] 
* Loop 32: mod(V1,V,Out)->  mod(V1',V,Out')
                  [Out'>=0,V>=2,V1'=0,Out=1,V1=1] 
* Loop 33: mod(V1,V,Out)->  mod(V1',V,Out')
                  [Out'>=0,V>=1,V1>=1,V1'=0,Out=0] 
* Loop 34: mod(V1,V,Out) [V1>=1,Out=0,V=0] 
* Loop 35: mod(V1,V,Out) [V>=0,V1>=0,Out=0] 

### Ranking functions of CR mod(V1,V,Out) 
* RF of phase [25,28,30]: [V1,V1-V+1]

#### Partial ranking functions of CR mod(V1,V,Out) 
* Partial RF of phase [25,28,30]:
  - RF of loop [25:1]:
    V1-1
  - RF of loop [25:1,30:1]:
    V1-V+1
  - RF of loop [28:1,30:1]:
    V1


### Resulting Chains:mod(V1,V,Out) 
* [[25,28,30],35]
* [[25,28,30],33,35]
* [[25,28,30],32,35]
* [[25,28,30],31,35]
* [[25,28,30],29,35]
* [[25,28,30],27,35]
* [[25,28,30],26,35]
* [35]
* [34]
* [33,35]
* [32,35]
* [31,35]
* [29,35]
* [27,35]
* [26,35]


### Merging Chains  (mod)/3 into  External patterns of execution 
* [[35,32]] --> 1 
* [[35,26],[35,33],[34],[35],[35,26,[25,28,30]],[35,33,[25,28,30]],[35,[25,28,30]]] --> 2 
* [[35,29],[35,31],[35,29,[25,28,30]],[35,31,[25,28,30]]] --> 3 
* [[35,27]] --> 4 
* [[35,32,[25,28,30]]] --> 5 
* [[35,27,[25,28,30]]] --> 6 


### Specialization of cost equations start/3 
* CE 2 is refined into CE [47,48,49,50,51] 
* CE 3 is refined into CE [52,53,54] 
* CE 4 is refined into CE [55,56,57] 
* CE 5 is refined into CE [58,59,60,61,62,63] 


#### Refined cost equations start/3 
* CE 47: start(V1,V,V8) = 0+ leq(W8,V,X8):1
     [V>=0,X8=2,W8=0,V1=0] 
* CE 48: start(V1,V,V8) = 0+ leq(V1,W8,X8):2
     [V1>=1,X8=1,W8=0,V=0] 
* CE 49: start(V1,V,V8) = 0+ leq(V1,V,W8):3
     [V>=0,V1>=0,W8=0] 
* CE 50: start(V1,V,V8) = 0+ leq(V1,V,W8):4
     [V1>=V+1,V>=1,W8=1] 
* CE 51: start(V1,V,V8) = 0+ leq(V1,V,W8):5
     [V>=V1,V1>=1,W8=2] 
* CE 52: start(V1,V,V8) = 0+ if(W8,V,V8,V8):1
     [V8>=0,V>=0,W8=1,V1=1] 
* CE 53: start(V1,V,V8) = 0+ if(W8,V,V8,V):2
     [V>=0,V8>=0,W8=2,V1=2] 
* CE 54: start(V1,V,V8) = 0+ if(V1,V,V8,W8):3
     [V8>=0,V>=0,V1>=0,W8=0] 
* CE 55: start(V1,V,V8) = 0+ minus(V1,W8,V1):1
     [V1>=0,W8=0,V=0] 
* CE 56: start(V1,V,V8) = 0+ minus(V1,V,W8):2
     [V>=0,V1>=0,W8=0] 
* CE 57: start(V1,V,V8) = 0+ minus(W8,V,X8):3
     [X8>=0,V>=1,V+X8=W8,V+X8=V1] 
* CE 58: start(V1,V,V8) = 0+ mod(W8,V,X8):1
     [V>=2,X8=1,W8=1,V1=1] 
* CE 59: start(V1,V,V8) = 0+ mod(V1,V,W8):2
     [V>=0,V1>=0,W8=0] 
* CE 60: start(V1,V,V8) = 0+ mod(V1,W8,X8):3
     [V1>=1,X8=0,W8=1,V=1] 
* CE 61: start(V1,V,V8) = 0+ mod(V1,V,V1):4
     [V>=V1+1,V1>=2] 
* CE 62: start(V1,V,V8) = 0+ mod(V1,V,W8):5
     [V1>=V+1,W8>=0,V>=2,1>=W8] 
* CE 63: start(V1,V,V8) = 0+ mod(V1,V,W8):6
     [V1>=V+W8,V>=W8+1,V1>=V+2,W8>=0,V>=3] 

### Cost equations --> "Loop" of start/3 
* CEs [60] --> Loop 36 
* CEs [48,55] --> Loop 37 
* CEs [53] --> Loop 38 
* CEs [58] --> Loop 39 
* CEs [52] --> Loop 40 
* CEs [47,49,50,51,54,56,57,59,61,62,63] --> Loop 41 

#### Loops of start/3 
* Loop 36: start(V1,V,V8) [V1>=1,V=1] 
* Loop 37: start(V1,V,V8) [V1>=0,V=0] 
* Loop 38: start(V1,V,V8) [V8>=0,V>=0,V1=2] 
* Loop 39: start(V1,V,V8) [V>=2,V1=1] 
* Loop 40: start(V1,V,V8) [V8>=0,V>=0,V1=1] 
* Loop 41: start(V1,V,V8) [V>=0,V1>=0] 

### Ranking functions of CR start(V1,V,V8) 

#### Partial ranking functions of CR start(V1,V,V8) 


### Resulting Chains:start(V1,V,V8) 
* [41]
* [40]
* [39]
* [38]
* [37]
* [36]


### Merging Chains  start/3 into  External patterns of execution 
* [[40],[41]] --> 1 
* [[39]] --> 2 
* [[38]] --> 3 
* [[37]] --> 4 
* [[36]] --> 5 


Computing Bounds
=====================================

#### Cost of chains of if(V1,V,V8,Out):
* Chain [17]: 1
  with precondition: [V1=1,V8=Out,V>=0,V8>=0] 

* Chain [16]: 1
  with precondition: [V1=2,V=Out,V>=0,V8>=0] 

* Chain [15]: 0
  with precondition: [Out=0,V1>=0,V>=0,V8>=0] 


#### Cost of loops [18] 

 * loop 18:leq(V1,V,Out) -> [leq(V1',V',Out')] 
1
#### Cost of phase [18]:leq(V1,V,Out) -> [leq(V1',V',Out')] 
1*it(18)+0
  Such that:it(18) =< V1
it(18) =< V1-V1'
it(18) =< V
it(18) =< V-V'

#### Cost of phase [18]:leq(V1,V,Out) -> [leq(V1',V',Out')] 
1*it(18)+0
  Such that:it(18) =< V1
it(18) =< V1-V1'
it(18) =< V
it(18) =< V-V'

#### Cost of phase [18]:leq(V1,V,Out) -> [leq(V1',V',Out')] 
1*it(18)+0
  Such that:it(18) =< V1
it(18) =< V1-V1'
it(18) =< V
it(18) =< V-V'

#### Cost of chains of leq(V1,V,Out):
* Chain [[18],21]: 1*it(18)+1
  Such that:it(18) =< V1

  with precondition: [Out=2,V1>=1,V>=V1] 

* Chain [[18],20]: 1*it(18)+1
  Such that:it(18) =< V

  with precondition: [Out=1,V>=1,V1>=V+1] 

* Chain [[18],19]: 1*it(18)+0
  Such that:it(18) =< V

  with precondition: [Out=0,V1>=1,V>=1] 

* Chain [21]: 1
  with precondition: [V1=0,Out=2,V>=0] 

* Chain [20]: 1
  with precondition: [V=0,Out=1,V1>=1] 

* Chain [19]: 0
  with precondition: [Out=0,V1>=0,V>=0] 


#### Cost of loops [22] 

 * loop 22:minus(V1,V,Out) -> [minus(V1',V',Out')] 
1
#### Cost of phase [22]:minus(V1,V,Out) -> [minus(V1',V',Out')] 
1*it(22)+0
  Such that:it(22) =< V1
it(22) =< V1-V1'
it(22) =< V
it(22) =< V-V'

#### Cost of phase [22]:minus(V1,V,Out) -> [minus(V1',V',Out')] 
1*it(22)+0
  Such that:it(22) =< V1
it(22) =< V1-V1'
it(22) =< V
it(22) =< V-V'

#### Cost of chains of minus(V1,V,Out):
* Chain [[22],24]: 1*it(22)+1
  Such that:it(22) =< V

  with precondition: [V1=Out+V,V>=1,V1>=V] 

* Chain [[22],23]: 1*it(22)+0
  Such that:it(22) =< V

  with precondition: [Out=0,V1>=1,V>=1] 

* Chain [24]: 1
  with precondition: [V=0,V1=Out,V1>=0] 

* Chain [23]: 0
  with precondition: [Out=0,V1>=0,V>=0] 


#### Cost of loops [25,28,30] 

 * loop 25:mod(V1,V,Out) -> [mod(V1',V',Out')] 
2*s(6)+4
  Such that:s(5) =< V'
s(6) =< s(5)

 * loop 28:mod(V1,V,Out) -> [mod(V1',V',Out')] 
1*s(8)+4
  Such that:s(8) =< 1

 * loop 30:mod(V1,V,Out) -> [mod(V1',V',Out')] 
1*s(14)+1*s(16)+1*s(15)+2*s(18)+3
  Such that:s(14) =< 1
s(15) =< V
s(16) =< V+V1'
s(17) =< V'
s(18) =< s(17)

#### Cost of phase [25,28,30]:mod(V1,V,Out) -> [mod(V1',V',Out')] 
11*it(25)+4*s(19)+2*s(21)+1*s(23)+1*s(24)+0
  Such that:aux(6) =< V1
aux(7) =< V1-V+1
aux(8) =< V1-V-V1'+V'
aux(9) =< V1-V1'
aux(3) =< aux(6)
it(25) =< aux(6)
s(20) =< aux(6)
s(24) =< aux(6)
aux(3) =< aux(7)
it(25) =< aux(7)
aux(3) =< aux(8)
it(25) =< aux(8)
aux(3) =< aux(9)
it(25) =< aux(9)
s(20) =< aux(9)
s(24) =< aux(9)
s(23) =< it(25)*aux(6)
s(21) =< aux(3)
s(19) =< s(20)

#### Cost of phase [25,28,30]:mod(V1,V,Out) -> [mod(V1',V',Out')] 
11*it(25)+4*s(19)+2*s(21)+1*s(23)+1*s(24)+0
  Such that:aux(6) =< V1
aux(7) =< V1-V+1
aux(8) =< V1-V-V1'+V'
aux(9) =< V1-V1'
aux(3) =< aux(6)
it(25) =< aux(6)
s(20) =< aux(6)
s(24) =< aux(6)
aux(3) =< aux(7)
it(25) =< aux(7)
aux(3) =< aux(8)
it(25) =< aux(8)
aux(3) =< aux(9)
it(25) =< aux(9)
s(20) =< aux(9)
s(24) =< aux(9)
s(23) =< it(25)*aux(6)
s(21) =< aux(3)
s(19) =< s(20)

#### Cost of phase [25,28,30]:mod(V1,V,Out) -> [mod(V1',V',Out')] 
11*it(25)+4*s(19)+2*s(21)+1*s(23)+1*s(24)+0
  Such that:aux(6) =< V1
aux(7) =< V1-V+1
aux(8) =< V1-V-V1'+V'
aux(9) =< V1-V1'
aux(3) =< aux(6)
it(25) =< aux(6)
s(20) =< aux(6)
s(24) =< aux(6)
aux(3) =< aux(7)
it(25) =< aux(7)
aux(3) =< aux(8)
it(25) =< aux(8)
aux(3) =< aux(9)
it(25) =< aux(9)
s(20) =< aux(9)
s(24) =< aux(9)
s(23) =< it(25)*aux(6)
s(21) =< aux(3)
s(19) =< s(20)

#### Cost of phase [25,28,30]:mod(V1,V,Out) -> [mod(V1',V',Out')] 
11*it(25)+4*s(19)+2*s(21)+1*s(23)+1*s(24)+0
  Such that:aux(6) =< V1
aux(7) =< V1-V+1
aux(8) =< V1-V-V1'+V'
aux(9) =< V1-V1'
aux(3) =< aux(6)
it(25) =< aux(6)
s(20) =< aux(6)
s(24) =< aux(6)
aux(3) =< aux(7)
it(25) =< aux(7)
aux(3) =< aux(8)
it(25) =< aux(8)
aux(3) =< aux(9)
it(25) =< aux(9)
s(20) =< aux(9)
s(24) =< aux(9)
s(23) =< it(25)*aux(6)
s(21) =< aux(3)
s(19) =< s(20)

#### Cost of phase [25,28,30]:mod(V1,V,Out) -> [mod(V1',V',Out')] 
11*it(25)+4*s(19)+2*s(21)+1*s(23)+1*s(24)+0
  Such that:aux(6) =< V1
aux(7) =< V1-V+1
aux(8) =< V1-V-V1'+V'
aux(9) =< V1-V1'
aux(3) =< aux(6)
it(25) =< aux(6)
s(20) =< aux(6)
s(24) =< aux(6)
aux(3) =< aux(7)
it(25) =< aux(7)
aux(3) =< aux(8)
it(25) =< aux(8)
aux(3) =< aux(9)
it(25) =< aux(9)
s(20) =< aux(9)
s(24) =< aux(9)
s(23) =< it(25)*aux(6)
s(21) =< aux(3)
s(19) =< s(20)

#### Cost of phase [25,28,30]:mod(V1,V,Out) -> [mod(V1',V',Out')] 
11*it(25)+4*s(19)+2*s(21)+1*s(23)+1*s(24)+0
  Such that:aux(6) =< V1
aux(7) =< V1-V+1
aux(8) =< V1-V-V1'+V'
aux(9) =< V1-V1'
aux(3) =< aux(6)
it(25) =< aux(6)
s(20) =< aux(6)
s(24) =< aux(6)
aux(3) =< aux(7)
it(25) =< aux(7)
aux(3) =< aux(8)
it(25) =< aux(8)
aux(3) =< aux(9)
it(25) =< aux(9)
s(20) =< aux(9)
s(24) =< aux(9)
s(23) =< it(25)*aux(6)
s(21) =< aux(3)
s(19) =< s(20)

#### Cost of phase [25,28,30]:mod(V1,V,Out) -> [mod(V1',V',Out')] 
11*it(25)+4*s(19)+2*s(21)+1*s(23)+1*s(24)+0
  Such that:aux(6) =< V1
aux(7) =< V1-V+1
aux(8) =< V1-V-V1'+V'
aux(9) =< V1-V1'
aux(3) =< aux(6)
it(25) =< aux(6)
s(20) =< aux(6)
s(24) =< aux(6)
aux(3) =< aux(7)
it(25) =< aux(7)
aux(3) =< aux(8)
it(25) =< aux(8)
aux(3) =< aux(9)
it(25) =< aux(9)
s(20) =< aux(9)
s(24) =< aux(9)
s(23) =< it(25)*aux(6)
s(21) =< aux(3)
s(19) =< s(20)

#### Cost of chains of mod(V1,V,Out):
* Chain [[25,28,30],35]: 11*it(25)+5*s(19)+2*s(21)+1*s(23)+1
  Such that:aux(7) =< V1-V+1
aux(10) =< V1
aux(3) =< aux(10)
it(25) =< aux(10)
s(19) =< aux(10)
aux(3) =< aux(7)
it(25) =< aux(7)
s(23) =< it(25)*aux(10)
s(21) =< aux(3)

  with precondition: [Out=0,V>=1,V1>=V] 

* Chain [[25,28,30],33,35]: 11*it(25)+7*s(19)+2*s(21)+1*s(23)+5*s(27)+3
  Such that:aux(7) =< V1-V+1
aux(13) =< V
aux(14) =< V1
s(19) =< aux(14)
s(27) =< aux(13)
aux(3) =< aux(14)
it(25) =< aux(14)
aux(3) =< aux(7)
it(25) =< aux(7)
s(23) =< it(25)*aux(14)
s(21) =< aux(3)

  with precondition: [Out=0,V>=1,V1>=V+1] 

* Chain [[25,28,30],32,35]: 11*it(25)+5*s(19)+2*s(21)+1*s(23)+1*s(34)+4
  Such that:aux(7) =< V1-V+1
s(34) =< V
aux(15) =< V1
aux(3) =< aux(15)
it(25) =< aux(15)
s(19) =< aux(15)
aux(3) =< aux(7)
it(25) =< aux(7)
s(23) =< it(25)*aux(15)
s(21) =< aux(3)

  with precondition: [1>=Out,V>=2,Out>=0,V1>=V+1] 

* Chain [[25,28,30],31,35]: 18*it(25)+1*s(23)+1*s(35)+3
  Such that:s(35) =< 1
aux(16) =< V1
it(25) =< aux(16)
s(23) =< it(25)*aux(16)

  with precondition: [V=1,Out=0,V1>=2] 

* Chain [[25,28,30],29,35]: 18*it(25)+1*s(23)+1*s(36)+4
  Such that:s(36) =< 1
aux(17) =< V1
it(25) =< aux(17)
s(23) =< it(25)*aux(17)

  with precondition: [V=1,Out=0,V1>=2] 

* Chain [[25,28,30],27,35]: 11*it(25)+6*s(19)+2*s(21)+1*s(23)+1*s(38)+4
  Such that:aux(7) =< V1-V+1
s(38) =< V
aux(18) =< V1
s(19) =< aux(18)
aux(3) =< aux(18)
it(25) =< aux(18)
aux(3) =< aux(7)
it(25) =< aux(7)
s(23) =< it(25)*aux(18)
s(21) =< aux(3)

  with precondition: [V>=3,Out>=0,V1>=V+2,V>=Out+1,V1>=Out+V] 

* Chain [[25,28,30],26,35]: 11*it(25)+4*s(19)+2*s(21)+1*s(23)+1*s(24)+2*s(39)+4
  Such that:aux(6) =< V1
aux(7) =< V1-V+1
aux(19) =< V
aux(20) =< V1-V
s(39) =< aux(19)
aux(3) =< aux(6)
it(25) =< aux(6)
s(20) =< aux(6)
s(24) =< aux(6)
aux(3) =< aux(7)
it(25) =< aux(7)
aux(3) =< aux(20)
it(25) =< aux(20)
s(20) =< aux(20)
s(24) =< aux(20)
s(23) =< it(25)*aux(6)
s(21) =< aux(3)
s(19) =< s(20)

  with precondition: [Out=0,V>=2,V1>=2*V] 

* Chain [35]: 1
  with precondition: [Out=0,V1>=0,V>=0] 

* Chain [34]: 1
  with precondition: [V=0,Out=0,V1>=1] 

* Chain [33,35]: 5*s(27)+2*s(28)+3
  Such that:aux(12) =< V1
aux(13) =< V
s(28) =< aux(12)
s(27) =< aux(13)

  with precondition: [Out=0,V1>=1,V>=1] 

* Chain [32,35]: 1*s(34)+4
  Such that:s(34) =< V

  with precondition: [V1=1,Out=1,V>=2] 

* Chain [31,35]: 1*s(35)+3
  Such that:s(35) =< 1

  with precondition: [V=1,Out=0,V1>=1] 

* Chain [29,35]: 1*s(36)+4
  Such that:s(36) =< 1

  with precondition: [V=1,Out=0,V1>=1] 

* Chain [27,35]: 1*s(37)+1*s(38)+4
  Such that:s(38) =< V
s(37) =< Out

  with precondition: [V1=Out,V1>=2,V>=V1+1] 

* Chain [26,35]: 2*s(39)+4
  Such that:aux(19) =< V
s(39) =< aux(19)

  with precondition: [Out=0,V>=2,V1>=V] 


#### Cost of chains of start(V1,V,V8):
* Chain [41]: 21*s(85)+27*s(87)+11*s(97)+1*s(99)+1*s(100)+2*s(101)+4*s(102)+44*s(104)+4*s(105)+8*s(106)+4
  Such that:s(90) =< V1-V
aux(26) =< V1
aux(27) =< V1-V+1
aux(28) =< V
s(87) =< aux(26)
s(85) =< aux(28)
s(96) =< aux(26)
s(97) =< aux(26)
s(98) =< aux(26)
s(99) =< aux(26)
s(96) =< aux(27)
s(97) =< aux(27)
s(96) =< s(90)
s(97) =< s(90)
s(98) =< s(90)
s(99) =< s(90)
s(100) =< s(97)*aux(26)
s(101) =< s(96)
s(102) =< s(98)
s(103) =< aux(26)
s(104) =< aux(26)
s(103) =< aux(27)
s(104) =< aux(27)
s(105) =< s(104)*aux(26)
s(106) =< s(103)

  with precondition: [V1>=0,V>=0] 

* Chain [40]: 1
  with precondition: [V1=1,V>=0,V8>=0] 

* Chain [39]: 1*s(125)+4
  Such that:s(125) =< V

  with precondition: [V1=1,V>=2] 

* Chain [38]: 1
  with precondition: [V1=2,V>=0,V8>=0] 

* Chain [37]: 1
  with precondition: [V=0,V1>=0] 

* Chain [36]: 4*s(128)+36*s(129)+2*s(130)+4
  Such that:s(126) =< 1
s(127) =< V1
s(128) =< s(126)
s(129) =< s(127)
s(130) =< s(129)*s(127)

  with precondition: [V=1,V1>=1] 


Closed-form bounds of start(V1,V,V8): 
-------------------------------------
* Chain [41] with precondition: [V1>=0,V>=0] 
    - Upper bound: 97*V1+4+5*V1*V1+21*V 
    - Complexity: n^2 
* Chain [40] with precondition: [V1=1,V>=0,V8>=0] 
    - Upper bound: 1 
    - Complexity: constant 
* Chain [39] with precondition: [V1=1,V>=2] 
    - Upper bound: V+4 
    - Complexity: n 
* Chain [38] with precondition: [V1=2,V>=0,V8>=0] 
    - Upper bound: 1 
    - Complexity: constant 
* Chain [37] with precondition: [V=0,V1>=0] 
    - Upper bound: 1 
    - Complexity: constant 
* Chain [36] with precondition: [V=1,V1>=1] 
    - Upper bound: 36*V1+8+2*V1*V1 
    - Complexity: n^2 

### Maximum cost of start(V1,V,V8): max([V+3,36*V1+3+2*V1*V1+max([4,3*V1*V1+61*V1+21*V])])+1 
Asymptotic class: n^2 

Time statistics: 
-------------------------------------
* Partial evaluation computed in 11 ms.
* Invariants computed in 67 ms.
   - Backward Invariants 38 ms.
   - Transitive Invariants 5 ms.
* Refinement performed in 127 ms.
* Termination proved in 9 ms.
* Upper bounds computed in 255 ms.
   - Equation cost structures 94 ms.
   - Phase cost structures 53 ms.
   - Chain cost structures 48 ms.
   - Solving cost expressions 8 ms.
* Total analysis performed in 499 ms.


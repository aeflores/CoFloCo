
Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. non_recursive  : [and/3]
1. recursive [non_tail,multiple] : [eq/3]
2. non_recursive  : [if/4]
3. recursive [multiple] : [ren/4]
4. non_recursive  : [start/3]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into and/3
1. SCC is partially evaluated into eq/3
2. SCC is partially evaluated into if/4
3. SCC is partially evaluated into ren/4
4. SCC is partially evaluated into start/3

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations and/3 
* CE 10 is refined into CE [25] 
* CE 9 is refined into CE [26] 
* CE 7 is refined into CE [27] 
* CE 8 is refined into CE [28] 
* CE 6 is refined into CE [29] 


#### Refined cost equations and/3 
* CE 25: and(V1,V,Out) = 0
     [V>=0,V1>=0,Out=0] 
* CE 26: and(V1,V,Out) = 1
     [Out=2,V=2,V1=2] 
* CE 27: and(V1,V,Out) = 1
     [Out=1,V=1,V1=2] 
* CE 28: and(V1,V,Out) = 1
     [Out=1,V=2,V1=1] 
* CE 29: and(V1,V,Out) = 1
     [Out=1,V=1,V1=1] 

### Cost equations --> "Loop" of and/3 
* CEs [25] --> Loop 21 
* CEs [26] --> Loop 22 
* CEs [27] --> Loop 23 
* CEs [28] --> Loop 24 
* CEs [29] --> Loop 25 

#### Loops of and/3 
* Loop 21: and(V1,V,Out) [V>=0,V1>=0,Out=0] 
* Loop 22: and(V1,V,Out) [Out=2,V=2,V1=2] 
* Loop 23: and(V1,V,Out) [Out=1,V=1,V1=2] 
* Loop 24: and(V1,V,Out) [Out=1,V=2,V1=1] 
* Loop 25: and(V1,V,Out) [Out=1,V=1,V1=1] 

### Ranking functions of CR and(V1,V,Out) 

#### Partial ranking functions of CR and(V1,V,Out) 


### Resulting Chains:and(V1,V,Out) 
* [25]
* [24]
* [23]
* [22]
* [21]


### Merging Chains  and/3 into  External patterns of execution 
* [[25]] --> 1 
* [[24]] --> 2 
* [[23]] --> 3 
* [[22]] --> 4 
* [[21]] --> 5 


### Specialization of cost equations eq/3 
* CE 16 is refined into CE [30] 
* CE 17 is refined into CE [31] 
* CE 12 is refined into CE [32] 
* CE 13 is refined into CE [33] 
* CE 11 is refined into CE [34] 
* CE 15 is refined into CE [35] 
* CE 14 is refined into CE [36,37,38,39,40] 


#### Refined cost equations eq/3 
* CE 30: eq(V1,V,Out) = 1
     [V>=1,V1>=1,Out=1] 
* CE 31: eq(V1,V,Out) = 0
     [V>=0,V1>=0,Out=0] 
* CE 32: eq(V1,V,Out) = 1
     [V1>=1,Out=1,V=0] 
* CE 33: eq(V1,V,Out) = 1
     [V>=1,Out=1,V1=0] 
* CE 34: eq(V1,V,Out) = 1
     [Out=2,V=0,V1=0] 
* CE 35: eq(V1,V,Out) = 1+ eq(W1,X1,Out)
     [X1>=0,W1>=0,X1+1=V,W1+1=V1] 
* CE 36: eq(V1,V,Out) = 1+ eq(W1,X1,Y1)+ eq(Z1,A2,B2)+ and(C2,D2,E2):1
     [A2>=0,Z1>=0,X1>=0,W1>=0,X1+A2+1=V,W1+Z1+1=V1,B2=1,Y1=1,E2=1,D2=1,C2=1,Out=1] 
* CE 37: eq(V1,V,Out) = 1+ eq(W1,X1,Y1)+ eq(Z1,A2,B2)+ and(C2,D2,E2):2
     [A2>=0,Z1>=0,X1>=0,W1>=0,X1+A2+1=V,W1+Z1+1=V1,B2=2,Y1=1,E2=1,D2=2,C2=1,Out=1] 
* CE 38: eq(V1,V,Out) = 1+ eq(W1,X1,Y1)+ eq(Z1,A2,B2)+ and(C2,D2,E2):3
     [A2>=0,Z1>=0,X1>=0,W1>=0,X1+A2+1=V,W1+Z1+1=V1,B2=1,Y1=2,E2=1,D2=1,C2=2,Out=1] 
* CE 39: eq(V1,V,Out) = 1+ eq(W1,X1,Y1)+ eq(Z1,A2,B2)+ and(C2,D2,E2):4
     [A2>=0,Z1>=0,X1>=0,W1>=0,X1+A2+1=V,W1+Z1+1=V1,B2=2,Y1=2,E2=2,D2=2,C2=2,Out=2] 
* CE 40: eq(V1,V,Out) = 1+ eq(W1,X1,Y1)+ eq(Z1,A2,B2)+ and(Y1,B2,C2):5
     [A2>=0,Z1>=0,X1>=0,W1>=0,B2>=0,Y1>=0,X1+A2+1=V,W1+Z1+1=V1,C2=0,Out=0] 

### Cost equations --> "Loop" of eq/3 
* CEs [39] --> Loop 26 
* CEs [38] --> Loop 27 
* CEs [37] --> Loop 28 
* CEs [36] --> Loop 29 
* CEs [40] --> Loop 30 
* CEs [35] --> Loop 31 
* CEs [30] --> Loop 32 
* CEs [31] --> Loop 33 
* CEs [32] --> Loop 34 
* CEs [33] --> Loop 35 
* CEs [34] --> Loop 36 

#### Loops of eq/3 
* Loop 26: eq(V1,V,Out)->  eq(V1',V',Out')  eq(V1'2,V'2,Out'2)
                  [V>=V'+1,V1>=V1'+1,V'>=0,V1'>=0,V'+V'2+1=V,V1'+V1'2+1=V1,Out'2=2,Out'=2,Out=2] 
* Loop 27: eq(V1,V,Out)->  eq(V1',V',Out')  eq(V1'2,V'2,Out'2)
                  [V>=V'+1,V1>=V1'+1,V'>=0,V1'>=0,V'+V'2+1=V,V1'+V1'2+1=V1,Out'2=1,Out'=2,Out=1] 
* Loop 28: eq(V1,V,Out)->  eq(V1',V',Out')  eq(V1'2,V'2,Out'2)
                  [V>=V'+1,V1>=V1'+1,V'>=0,V1'>=0,V'+V'2+1=V,V1'+V1'2+1=V1,Out'2=2,Out'=1,Out=1] 
* Loop 29: eq(V1,V,Out)->  eq(V1',V',Out')  eq(V1'2,V'2,Out'2)
                  [V>=V'+1,V1>=V1'+1,V'>=0,V1'>=0,V'+V'2+1=V,V1'+V1'2+1=V1,Out'2=1,Out'=1,Out=1] 
* Loop 30: eq(V1,V,Out)->  eq(V1',V',Out')  eq(V1'2,V'2,Out'2)
                  [V>=V'+1,V1>=V1'+1,Out'2>=0,Out'>=0,V'>=0,V1'>=0,V'+V'2+1=V,V1'+V1'2+1=V1,Out=0] 
* Loop 31: eq(V1,V,Out)->  eq(V1',V',Out)
                  [V'>=0,V1'>=0,V'+1=V,V1'+1=V1] 
* Loop 32: eq(V1,V,Out) [V>=1,V1>=1,Out=1] 
* Loop 33: eq(V1,V,Out) [V>=0,V1>=0,Out=0] 
* Loop 34: eq(V1,V,Out) [V1>=1,Out=1,V=0] 
* Loop 35: eq(V1,V,Out) [V>=1,Out=1,V1=0] 
* Loop 36: eq(V1,V,Out) [Out=2,V=0,V1=0] 

### Ranking functions of CR eq(V1,V,Out) 
* RF of phase [26,27,28,29,30,31]: [V,V1]

#### Partial ranking functions of CR eq(V1,V,Out) 
* Partial RF of phase [26,27,28,29,30,31]:
  - RF of loop [26:1,26:2,27:1,27:2,28:1,28:2,29:1,29:2,30:1,30:2,31:1]:
    V
    V1


### Resulting Chains:eq(V1,V,Out) 
* [36]
* [35]
* [34]
* [33]
* [32]
* [multiple([26,27,28,29,30,31],[[36],[35],[34],[33],[32]])]


### Merging Chains  eq/3 into  External patterns of execution 
* [[36]] --> 1 
* [[35]] --> 2 
* [[34]] --> 3 
* [[33]] --> 4 
* [[32],[multiple([26,27,28,29,30,31],[[36],[35],[34],[33],[32]])]] --> 5 


### Specialization of cost equations if/4 
* CE 20 is refined into CE [41] 
* CE 18 is refined into CE [42] 
* CE 19 is refined into CE [43] 


#### Refined cost equations if/4 
* CE 41: if(V1,V,V2,Out) = 0
     [V2>=0,V>=0,V1>=0,Out=0] 
* CE 42: if(A,B,C,B) = 1
     [C>=1,B>=1,A=2] 
* CE 43: if(A,B,C,C) = 1
     [C>=1,B>=1,A=1] 

### Cost equations --> "Loop" of if/4 
* CEs [41] --> Loop 37 
* CEs [42] --> Loop 38 
* CEs [43] --> Loop 39 

#### Loops of if/4 
* Loop 37: if(V1,V,V2,Out) [V2>=0,V>=0,V1>=0,Out=0] 
* Loop 38: if(A,B,C,B) [C>=1,B>=1,A=2] 
* Loop 39: if(A,B,C,C) [C>=1,B>=1,A=1] 

### Ranking functions of CR if(V1,V,V2,Out) 

#### Partial ranking functions of CR if(V1,V,V2,Out) 


### Resulting Chains:if(V1,V,V2,Out) 
* [39]
* [38]
* [37]


### Merging Chains  if/4 into  External patterns of execution 
* [[39]] --> 1 
* [[38]] --> 2 
* [[37]] --> 3 


### Specialization of cost equations ren/4 
* CE 21 is refined into CE [44,45,46,47,48,49,50,51,52,53] 
* CE 24 is refined into CE [54] 
* CE 23 is refined into CE [55] 
* CE 22 is refined into CE [56] 


#### Refined cost equations ren/4 
* CE 44: ren(A,B,C,B) = 1+ eq(D,E,F):1+ if(G,B,H,B):2
     [B>=1,H=1,G=2,F=2,E=0,D=0,C=1,A=1] 
* CE 45: ren(V1,V,V2,Out) = 1+ eq(W2,X2,Y2):1+ if(Z2,V,A3,B3):3
     [V>=1,B3=0,A3=1,Z2=2,Y2=2,X2=0,W2=0,Out=0,V2=1,V1=1] 
* CE 46: ren(A,B,C,C) = 1+ eq(D,E,F):2+ if(G,B,C,C):1
     [C>=2,B>=1,C=E+1,G=1,F=1,D=0,A=1] 
* CE 47: ren(V1,V,V2,Out) = 1+ eq(W2,X2,Y2):2+ if(Z2,V,V2,A3):3
     [V2>=2,V>=1,V2=X2+1,A3=0,Z2=1,Y2=1,W2=0,Out=0,V1=1] 
* CE 48: ren(V1,V,V2,Out) = 1+ eq(W2,X2,Y2):3+ if(Z2,V,A3,B3):1
     [V>=1,W2>=1,W2+1=V1,B3=1,A3=1,Z2=1,Y2=1,X2=0,Out=1,V2=1] 
* CE 49: ren(V1,V,V2,Out) = 1+ eq(W2,X2,Y2):3+ if(Z2,V,A3,B3):3
     [V>=1,W2>=1,W2+1=V1,B3=0,A3=1,Z2=1,Y2=1,X2=0,Out=0,V2=1] 
* CE 50: ren(V1,V,V2,Out) = 1+ eq(W2,X2,Y2):4+ if(Z2,V,V2,A3):3
     [V2>=1,V>=1,W2>=0,V2=X2+1,W2+1=V1,A3=0,Z2=0,Y2=0,Out=0] 
* CE 51: ren(A,B,C,C) = 1+ eq(D,E,F):5+ if(G,B,C,C):1
     [C>=2,B>=1,D>=1,C=E+1,D+1=A,G=1,F=1] 
* CE 52: ren(A,B,C,B) = 1+ eq(D,E,F):5+ if(G,B,C,B):2
     [B>=1,C>=2,D>=1,C=E+1,D+1=A,G=2,F=2] 
* CE 53: ren(V1,V,V2,Out) = 1+ eq(W2,X2,Y2):5+ if(Y2,V,V2,Z2):3
     [V2>=2,V>=1,Y2>=0,W2>=1,2>=Y2,V2=X2+1,W2+1=V1,Z2=0,Out=0] 
* CE 54: ren(V1,V,V2,Out) = 0
     [V2>=0,V>=0,V1>=0,Out=0] 
* CE 55: ren(V1,V,V2,Out) = 1+ ren(W2,X2,Y2,Z2)+ ren(V1,V,Z2,A3)
     [Y2>=0,W2>=0,V>=0,V1>=0,V1+V+W2+Y2+A3+6=Out,V1+V+W2+Y2+5=X2,W2+Y2+1=V2] 
* CE 56: ren(V1,V,V2,Out) = 1+ ren(V1,V,W2,X2)+ ren(V1,V,Y2,Z2)
     [Y2>=0,W2>=0,V>=0,V1>=0,X2+Z2+1=Out,W2+Y2+1=V2] 

### Cost equations --> "Loop" of ren/4 
* CEs [55] --> Loop 40 
* CEs [56] --> Loop 41 
* CEs [51] --> Loop 42 
* CEs [52] --> Loop 43 
* CEs [48] --> Loop 44 
* CEs [49] --> Loop 45 
* CEs [46] --> Loop 46 
* CEs [47] --> Loop 47 
* CEs [44] --> Loop 48 
* CEs [45,50,53,54] --> Loop 49 

#### Loops of ren/4 
* Loop 40: ren(V1,V,V2,Out)->  ren(V1',V',V2',Out')  ren(V1,V,Out',A'2)
                  [V2>=V1'+1,V1'>=0,V>=0,V1>=0,V1+V+V2+A'2+5=Out,V1+V+V2+4=V',V1'+V2'+1=V2] 
* Loop 41: ren(V1,V,V2,Out)->  ren(V1,V,V2',Out')  ren(V1,V,V2'2,Out'2)
                  [V2>=V2'+1,V2'>=0,V>=0,V1>=0,Out=Out'+Out'2+1,V2'+V2'2+1=V2] 
* Loop 42: ren(A,B,C,C) [C>=2,B>=1,A>=2] 
* Loop 43: ren(A,B,C,B) [C>=2,B>=1,A>=2] 
* Loop 44: ren(V1,V,V2,Out) [V>=1,V1>=2,Out=1,V2=1] 
* Loop 45: ren(V1,V,V2,Out) [V>=1,V1>=2,Out=0,V2=1] 
* Loop 46: ren(A,B,C,C) [C>=2,B>=1,A=1] 
* Loop 47: ren(V1,V,V2,Out) [V2>=2,V>=1,Out=0,V1=1] 
* Loop 48: ren(A,B,C,B) [B>=1,C=1,A=1] 
* Loop 49: ren(V1,V,V2,Out) [V2>=0,V>=0,V1>=0,Out=0] 

### Ranking functions of CR ren(V1,V,V2,Out) 

#### Partial ranking functions of CR ren(V1,V,V2,Out) 
* Partial RF of phase [40,41]:
  - RF of loop [40:1]:
    V1+V2 depends on loops [40:2] 
  - RF of loop [40:1,41:1,41:2]:
    V2 depends on loops [40:2] 


### Resulting Chains:ren(V1,V,V2,Out) 
* [multiple([40,41],[[],[49],[48],[47],[46],[45],[44],[43],[42]])]...
* [49]
* [48]
* [47]
* [46]
* [45]
* [44]
* [43]
* [42]


### Merging Chains  ren/4 into  External patterns of execution 
* [[48]] --> 1 
* [[47],[49]] --> 2 
* [[46]] --> 3 
* [[45]] --> 4 
* [[44]] --> 5 
* [[43]] --> 6 
* [[42]] --> 7 
* [[multiple([40,41],[[],[49],[48],[47],[46],[45],[44],[43],[42]])]] --> 8 


### Specialization of cost equations start/3 
* CE 2 is refined into CE [57,58,59,60,61] 
* CE 3 is refined into CE [62,63,64,65,66] 
* CE 4 is refined into CE [67,68,69] 
* CE 5 is refined into CE [70,71,72,73,74,75,76,77] 


#### Refined cost equations start/3 
* CE 57: start(V1,V,V2) = 0+ and(W2,X2,Y2):1
     [Y2=1,X2=1,W2=1,V=1,V1=1] 
* CE 58: start(V1,V,V2) = 0+ and(W2,X2,Y2):2
     [Y2=1,X2=2,W2=1,V=2,V1=1] 
* CE 59: start(V1,V,V2) = 0+ and(W2,X2,Y2):3
     [Y2=1,X2=1,W2=2,V=1,V1=2] 
* CE 60: start(V1,V,V2) = 0+ and(W2,X2,Y2):4
     [Y2=2,X2=2,W2=2,V=2,V1=2] 
* CE 61: start(V1,V,V2) = 0+ and(V1,V,W2):5
     [V>=0,V1>=0,W2=0] 
* CE 62: start(V1,V,V2) = 0+ eq(W2,X2,Y2):1
     [Y2=2,X2=0,W2=0,V=0,V1=0] 
* CE 63: start(V1,V,V2) = 0+ eq(W2,V,X2):2
     [V>=1,X2=1,W2=0,V1=0] 
* CE 64: start(V1,V,V2) = 0+ eq(V1,W2,X2):3
     [V1>=1,X2=1,W2=0,V=0] 
* CE 65: start(V1,V,V2) = 0+ eq(V1,V,W2):4
     [V>=0,V1>=0,W2=0] 
* CE 66: start(V1,V,V2) = 0+ eq(V1,V,W2):5
     [W2>=0,V>=1,V1>=1,2>=W2] 
* CE 67: start(V1,V,V2) = 0+ if(W2,V,V2,V2):1
     [V2>=1,V>=1,W2=1,V1=1] 
* CE 68: start(V1,V,V2) = 0+ if(W2,V,V2,V):2
     [V>=1,V2>=1,W2=2,V1=2] 
* CE 69: start(V1,V,V2) = 0+ if(V1,V,V2,W2):3
     [V2>=0,V>=0,V1>=0,W2=0] 
* CE 70: start(V1,V,V2) = 0+ ren(W2,V,X2,V):1
     [V>=1,X2=1,W2=1,V2=1,V1=1] 
* CE 71: start(V1,V,V2) = 0+ ren(V1,V,V2,W2):2
     [V2>=0,V>=0,V1>=0,W2=0] 
* CE 72: start(V1,V,V2) = 0+ ren(W2,V,V2,V2):3
     [V2>=2,V>=1,W2=1,V1=1] 
* CE 73: start(V1,V,V2) = 0+ ren(V1,V,W2,X2):4
     [V>=1,V1>=2,X2=0,W2=1,V2=1] 
* CE 74: start(V1,V,V2) = 0+ ren(V1,V,W2,X2):5
     [V>=1,V1>=2,X2=1,W2=1,V2=1] 
* CE 75: start(V1,V,V2) = 0+ ren(V1,V,V2,V):6
     [V>=1,V2>=2,V1>=2] 
* CE 76: start(V1,V,V2) = 0+ ren(V1,V,V2,V2):7
     [V2>=2,V>=1,V1>=2] 
* CE 77: start(V1,V,V2) = 0+ ren(V1,V,V2,W2):8
     [V2>=1,V>=0,V1>=0] 

### Cost equations --> "Loop" of start/3 
* CEs [77] --> Loop 50 
* CEs [73,74] --> Loop 51 
* CEs [64] --> Loop 52 
* CEs [68] --> Loop 53 
* CEs [60] --> Loop 54 
* CEs [59] --> Loop 55 
* CEs [67,70,72] --> Loop 56 
* CEs [58] --> Loop 57 
* CEs [57] --> Loop 58 
* CEs [63] --> Loop 59 
* CEs [61,62,65,66,69,71,75,76] --> Loop 60 

#### Loops of start/3 
* Loop 50: start(V1,V,V2) [V2>=1,V>=0,V1>=0] 
* Loop 51: start(V1,V,V2) [V>=1,V1>=2,V2=1] 
* Loop 52: start(V1,V,V2) [V1>=1,V=0] 
* Loop 53: start(V1,V,V2) [V2>=1,V>=1,V1=2] 
* Loop 54: start(V1,V,V2) [V=2,V1=2] 
* Loop 55: start(V1,V,V2) [V=1,V1=2] 
* Loop 56: start(V1,V,V2) [V2>=1,V>=1,V1=1] 
* Loop 57: start(V1,V,V2) [V=2,V1=1] 
* Loop 58: start(V1,V,V2) [V=1,V1=1] 
* Loop 59: start(V1,V,V2) [V>=1,V1=0] 
* Loop 60: start(V1,V,V2) [V>=0,V1>=0] 

### Ranking functions of CR start(V1,V,V2) 

#### Partial ranking functions of CR start(V1,V,V2) 


### Resulting Chains:start(V1,V,V2) 
* [60]
* [59]
* [58]
* [57]
* [56]
* [55]
* [54]
* [53]
* [52]
* [51]
* [50]...


### Merging Chains  start/3 into  External patterns of execution 
* [[59],[60]] --> 1 
* [[58]] --> 2 
* [[57]] --> 3 
* [[56]] --> 4 
* [[55]] --> 5 
* [[54]] --> 6 
* [[53]] --> 7 
* [[52]] --> 8 
* [[51]] --> 9 
* [[50]] --> 10 


Computing Bounds
=====================================

#### Cost of chains of and(V1,V,Out):
* Chain [25]: 1
  with precondition: [V1=1,V=1,Out=1] 

* Chain [24]: 1
  with precondition: [V1=1,V=2,Out=1] 

* Chain [23]: 1
  with precondition: [V1=2,V=1,Out=1] 

* Chain [22]: 1
  with precondition: [V1=2,V=2,Out=2] 

* Chain [21]: 0
  with precondition: [Out=0,V1>=0,V>=0] 


#### Cost of loops [26,27,28,29,30,31] 

 * loop 26:eq(V1,V,Out) -> [eq(V1',V',Out'),eq(V1'2,V'2,Out'2)] 
2
 * loop 27:eq(V1,V,Out) -> [eq(V1',V',Out'),eq(V1'2,V'2,Out'2)] 
2
 * loop 28:eq(V1,V,Out) -> [eq(V1',V',Out'),eq(V1'2,V'2,Out'2)] 
2
 * loop 29:eq(V1,V,Out) -> [eq(V1',V',Out'),eq(V1'2,V'2,Out'2)] 
2
 * loop 30:eq(V1,V,Out) -> [eq(V1',V',Out'),eq(V1'2,V'2,Out'2)] 
1
 * loop 31:eq(V1,V,Out) -> [eq(V1',V',Out')] 
1
#### Cost of phase [26,27,28,29,30,31]:eq(V1,V,Out) -> [] 
9*it(26)+1*it(31)+1*it([32])+1*it([34])+1*it([35])+1*it([36])+0
  Such that:it([36]) =< V+1
it([35]) =< V/2+1/2
aux(1) =< V1
aux(2) =< V1+1
aux(3) =< V1/2+1/2
aux(4) =< V
it(26) =< aux(1)
it(31) =< aux(1)
it([32]) =< aux(1)
it([34]) =< aux(1)
it([34]) =< aux(2)
it([35]) =< aux(2)
it([36]) =< aux(2)
it([32]) =< aux(3)
it([34]) =< aux(3)
it(31) =< aux(4)
it([32]) =< aux(4)
it([35]) =< aux(4)

#### Cost of chains of eq(V1,V,Out):
* Chain [36]: 1
  with precondition: [V1=0,V=0,Out=2] 

* Chain [35]: 1
  with precondition: [V1=0,Out=1,V>=1] 

* Chain [34]: 1
  with precondition: [V=0,Out=1,V1>=1] 

* Chain [33]: 0
  with precondition: [Out=0,V1>=0,V>=0] 

* Chain [32]: 1
  with precondition: [Out=1,V1>=1,V>=1] 

* Chain [multiple([26,27,28,29,30,31],[[36],[35],[34],[33],[32]])]: 9*it(26)+1*it(31)+1*it([32])+1*it([34])+1*it([35])+1*it([36])+0
  Such that:it([36]) =< V+1
it([35]) =< V/2+1/2
aux(1) =< V1
aux(2) =< V1+1
aux(3) =< V1/2+1/2
aux(4) =< V
it(26) =< aux(1)
it(31) =< aux(1)
it([32]) =< aux(1)
it([34]) =< aux(1)
it([34]) =< aux(2)
it([35]) =< aux(2)
it([36]) =< aux(2)
it([32]) =< aux(3)
it([34]) =< aux(3)
it(31) =< aux(4)
it([32]) =< aux(4)
it([35]) =< aux(4)

  with precondition: [2>=Out,V1>=1,V>=1,Out>=0] 


#### Cost of chains of if(V1,V,V2,Out):
* Chain [39]: 1
  with precondition: [V1=1,V2=Out,V>=1,V2>=1] 

* Chain [38]: 1
  with precondition: [V1=2,V=Out,V>=1,V2>=1] 

* Chain [37]: 0
  with precondition: [Out=0,V1>=0,V>=0,V2>=0] 


#### Cost of loops [40,41] 

 * loop 40:ren(V1,V,V2,Out) -> [ren(V1',V',V2',Out'),ren(V1'2,V'2,V2'2,Out'2)] 
1
 * loop 41:ren(V1,V,V2,Out) -> [ren(V1',V',V2',Out'),ren(V1'2,V'2,V2'2,Out'2)] 
1
#### Cost of phase [40,41]:ren(V1,V,V2,Out) -> [] 
1*it(40)+20*it(41)+2*it([49])+2*s(41)+1*s(42)+9*s(43)+1*s(44)+1*s(45)+2*s(49)+1*s(50)+9*s(51)+1*s(52)+1*s(53)+2*s(57)+1*s(58)+9*s(59)+1*s(60)+1*s(61)+0
#### Cost of chains of ren(V1,V,V2,Out):
* Chain [multiple([40,41],[[],[49],[48],[47],[46],[45],[44],[43],[42]])]...: 1*it(40)+20*it(41)+2*it([49])+2*s(41)+1*s(42)+9*s(43)+1*s(44)+1*s(45)+2*s(49)+1*s(50)+9*s(51)+1*s(52)+1*s(53)+2*s(57)+1*s(58)+9*s(59)+1*s(60)+1*s(61)+0
  with precondition: [V2>=1,V>=0,V1>=0] 

* Chain [49]: 2*s(15)+1*s(16)+9*s(17)+1*s(19)+1*s(20)+2
  Such that:aux(5) =< V1
s(13) =< V1/2
aux(6) =< V2
s(16) =< V2/2
s(15) =< aux(6)
s(17) =< aux(5)
s(15) =< aux(5)
s(19) =< aux(5)
s(20) =< aux(5)
s(16) =< aux(5)
s(19) =< s(13)
s(20) =< s(13)
s(19) =< aux(6)
s(16) =< aux(6)

  with precondition: [Out=0,V1>=0,V>=0,V2>=0] 

* Chain [48]: 3
  with precondition: [V1=1,V2=1,V=Out,V>=1] 

* Chain [47]: 2
  with precondition: [V1=1,Out=0,V>=1,V2>=2] 

* Chain [46]: 3
  with precondition: [V1=1,V2=Out,V>=1,V2>=2] 

* Chain [45]: 2
  with precondition: [V2=1,Out=0,V1>=2,V>=1] 

* Chain [44]: 3
  with precondition: [V2=1,Out=1,V1>=2,V>=1] 

* Chain [43]: 2*s(25)+1*s(26)+9*s(27)+1*s(29)+1*s(30)+3
  Such that:s(23) =< V1/2
s(26) =< V2/2
aux(7) =< V1
aux(8) =< V2
s(25) =< aux(8)
s(27) =< aux(7)
s(25) =< aux(7)
s(29) =< aux(7)
s(30) =< aux(7)
s(26) =< aux(7)
s(29) =< s(23)
s(30) =< s(23)
s(29) =< aux(8)
s(26) =< aux(8)

  with precondition: [V=Out,V1>=2,V>=1,V2>=2] 

* Chain [42]: 2*s(35)+1*s(36)+9*s(37)+1*s(39)+1*s(40)+3
  Such that:s(33) =< V1/2
s(36) =< V2/2
aux(9) =< V1
aux(10) =< V2
s(35) =< aux(10)
s(37) =< aux(9)
s(35) =< aux(9)
s(39) =< aux(9)
s(40) =< aux(9)
s(36) =< aux(9)
s(39) =< s(33)
s(40) =< s(33)
s(39) =< aux(10)
s(36) =< aux(10)

  with precondition: [V2=Out,V1>=2,V>=1,V2>=2] 


#### Cost of chains of start(V1,V,V2):
* Chain [60]: 1*s(77)+1*s(78)+36*s(79)+1*s(80)+1*s(81)+1*s(82)+3*s(86)+6*s(87)+3*s(89)+3*s(90)+3
  Such that:s(74) =< V1+1
s(75) =< V1/2+1/2
s(76) =< V
s(77) =< V+1
s(78) =< V/2+1/2
aux(46) =< V1
aux(47) =< V1/2
aux(48) =< V2
aux(49) =< V2/2
s(86) =< aux(49)
s(79) =< aux(46)
s(80) =< aux(46)
s(81) =< aux(46)
s(82) =< aux(46)
s(82) =< s(74)
s(78) =< s(74)
s(77) =< s(74)
s(81) =< s(75)
s(82) =< s(75)
s(80) =< s(76)
s(81) =< s(76)
s(78) =< s(76)
s(87) =< aux(48)
s(87) =< aux(46)
s(89) =< aux(46)
s(90) =< aux(46)
s(86) =< aux(46)
s(89) =< aux(47)
s(90) =< aux(47)
s(89) =< aux(48)
s(86) =< aux(48)

  with precondition: [V1>=0,V>=0] 

* Chain [59]: 1
  with precondition: [V1=0,V>=1] 

* Chain [58]: 1
  with precondition: [V1=1,V=1] 

* Chain [57]: 1
  with precondition: [V1=1,V=2] 

* Chain [56]: 3
  with precondition: [V1=1,V>=1,V2>=1] 

* Chain [55]: 1
  with precondition: [V1=2,V=1] 

* Chain [54]: 1
  with precondition: [V1=2,V=2] 

* Chain [53]: 1
  with precondition: [V1=2,V>=1,V2>=1] 

* Chain [52]: 1
  with precondition: [V=0,V1>=1] 

* Chain [51]: 3
  with precondition: [V2=1,V1>=2,V>=1] 

* Chain [50]...: 65*s(107)+0
  with precondition: [V1>=0,V>=0,V2>=1] 


Closed-form bounds of start(V1,V,V2): 
-------------------------------------
* Chain [60] with precondition: [V1>=0,V>=0] 
    - Upper bound: V/2+1/2+ (45*V1+3+nat(V2)*6+ (V+1))+nat(V2/2)*3 
    - Complexity: n 
* Chain [59] with precondition: [V1=0,V>=1] 
    - Upper bound: 1 
    - Complexity: constant 
* Chain [58] with precondition: [V1=1,V=1] 
    - Upper bound: 1 
    - Complexity: constant 
* Chain [57] with precondition: [V1=1,V=2] 
    - Upper bound: 1 
    - Complexity: constant 
* Chain [56] with precondition: [V1=1,V>=1,V2>=1] 
    - Upper bound: 3 
    - Complexity: constant 
* Chain [55] with precondition: [V1=2,V=1] 
    - Upper bound: 1 
    - Complexity: constant 
* Chain [54] with precondition: [V1=2,V=2] 
    - Upper bound: 1 
    - Complexity: constant 
* Chain [53] with precondition: [V1=2,V>=1,V2>=1] 
    - Upper bound: 1 
    - Complexity: constant 
* Chain [52] with precondition: [V=0,V1>=1] 
    - Upper bound: 1 
    - Complexity: constant 
* Chain [51] with precondition: [V2=1,V1>=2,V>=1] 
    - Upper bound: 3 
    - Complexity: constant 
* Chain [50]... with precondition: [V1>=0,V>=0,V2>=1] 
    - Upper bound: inf 
    - Complexity: infinity 

### Maximum cost of start(V1,V,V2): inf 
Asymptotic class: infinity 

Time statistics: 
-------------------------------------
* Partial evaluation computed in 24 ms.
* Invariants computed in 57 ms.
   - Backward Invariants 17 ms.
   - Transitive Invariants 13 ms.
* Refinement performed in 152 ms.
* Termination proved in 18 ms.
* Upper bounds computed in 284 ms.
   - Equation cost structures 57 ms.
   - Phase cost structures 226 ms.
   - Chain cost structures 0 ms.
   - Solving cost expressions 3 ms.
* Total analysis performed in 580 ms.



Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. recursive  : [eq/3]
1. recursive  : [ifrm/4,rm/3]
2. recursive  : [purge/2]
3. non_recursive  : [start/3]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into eq/3
1. SCC is partially evaluated into rm/3
2. SCC is partially evaluated into purge/2
3. SCC is partially evaluated into start/3

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations eq/3 
* CE 16 is refined into CE [20] 
* CE 15 is refined into CE [21] 
* CE 14 is refined into CE [22] 
* CE 13 is refined into CE [23] 


#### Refined cost equations eq/3 
* CE 20: eq(V1,V,Out) = 1+ eq(W1,X1,Out)
     [X1>=0,W1>=0,X1+1=V,W1+1=V1] 
* CE 21: eq(V1,V,Out) = 1
     [V1>=1,Out=0,V=0] 
* CE 22: eq(V1,V,Out) = 1
     [V>=1,Out=0,V1=0] 
* CE 23: eq(V1,V,Out) = 1
     [Out=1,V=0,V1=0] 

### Cost equations --> "Loop" of eq/3 
* CEs [21] --> Loop 12 
* CEs [22] --> Loop 13 
* CEs [23] --> Loop 14 
* CEs [20] --> Loop 15 

#### Loops of eq/3 
* Loop 12: eq(V1,V,Out) [V1>=1,Out=0,V=0] 
* Loop 13: eq(V1,V,Out) [V>=1,Out=0,V1=0] 
* Loop 14: eq(V1,V,Out) [Out=1,V=0,V1=0] 
* Loop 15: eq(V1,V,Out)->  eq(V1',V',Out)
                  [V'>=0,V1'>=0,V'+1=V,V1'+1=V1] 

### Ranking functions of CR eq(V1,V,Out) 
* RF of phase [15]: [V,V1]

#### Partial ranking functions of CR eq(V1,V,Out) 
* Partial RF of phase [15]:
  - RF of loop [15:1]:
    V
    V1


### Resulting Chains:eq(V1,V,Out) 
* [[15],14]
* [[15],13]
* [[15],12]
* [14]
* [13]
* [12]


### Merging Chains  eq/3 into  External patterns of execution 
* [[14]] --> 1 
* [[13]] --> 2 
* [[12]] --> 3 
* [[13,[15]]] --> 4 
* [[12,[15]]] --> 5 
* [[14,[15]]] --> 6 


### Specialization of cost equations rm/3 
* CE 8 is refined into CE [24,25,26,27,28,29] 
* CE 11 is refined into CE [30] 
* CE 12 is refined into CE [31] 
* CE 9 is refined into CE [32,33,34,35] 
* CE 10 is refined into CE [36,37] 


#### Refined cost equations rm/3 
* CE 24: rm(V1,V,Out) = 1+ eq(W1,X1,Y1):1
     [V>=1,Y1=1,X1=0,W1=0,Out=0,V1=0] 
* CE 25: rm(V1,V,Out) = 1+ eq(W1,X1,Y1):2
     [V>=X1+1,X1>=1,Y1=0,W1=0,Out=0,V1=0] 
* CE 26: rm(V1,V,Out) = 1+ eq(V1,W1,X1):3
     [V1>=1,V>=1,X1=0,W1=0,Out=0] 
* CE 27: rm(V1,V,Out) = 1+ eq(V1,W1,X1):4
     [V>=W1+1,W1>=V1+1,V1>=1,X1=0,Out=0] 
* CE 28: rm(V1,V,Out) = 1+ eq(V1,W1,X1):5
     [V1>=W1+1,V>=W1+1,W1>=1,X1=0,Out=0] 
* CE 29: rm(V1,V,Out) = 1+ eq(V1,V1,W1):6
     [V>=V1+1,V1>=1,W1=1,Out=0] 
* CE 30: rm(V1,V,Out) = 1
     [V1>=0,Out=0,V=0] 
* CE 31: rm(V1,V,Out) = 0
     [V>=0,V1>=0,Out=0] 
* CE 32: rm(V1,V,Out) = 2+ eq(W1,X1,Y1):2+ rm(Z1,A2,B2)
     [V>=A2+1,V>=X1+1,A2>=0,X1>=1,V+B2=Out+A2,Z1=0,Y1=0,W1=0,V1=0] 
* CE 33: rm(V1,V,Out) = 2+ eq(V1,W1,X1):3+ rm(V1,Y1,Z1)
     [V>=Y1+1,Y1>=0,V1>=1,V+Z1=Out+Y1,X1=0,W1=0] 
* CE 34: rm(V1,V,Out) = 2+ eq(V1,W1,X1):4+ rm(V1,Y1,Z1)
     [V>=Y1+1,V>=W1+1,W1>=V1+1,Y1>=0,V1>=1,V+Z1=Out+Y1,X1=0] 
* CE 35: rm(V1,V,Out) = 2+ eq(V1,W1,X1):5+ rm(V1,Y1,Z1)
     [V>=Y1+1,V1>=W1+1,V>=W1+1,Y1>=0,W1>=1,V+Z1=Out+Y1,X1=0] 
* CE 36: rm(V1,V,Out) = 2+ eq(W1,X1,Y1):1+ rm(Z1,A2,Out)
     [V>=A2+1,A2>=0,Z1=0,Y1=1,X1=0,W1=0,V1=0] 
* CE 37: rm(V1,V,Out) = 2+ eq(V1,V1,W1):6+ rm(V1,X1,Out)
     [V>=X1+1,V>=V1+1,X1>=0,V1>=1,W1=1] 

### Cost equations --> "Loop" of rm/3 
* CEs [33,34,35] --> Loop 16 
* CEs [37] --> Loop 17 
* CEs [32] --> Loop 18 
* CEs [36] --> Loop 19 
* CEs [30] --> Loop 20 
* CEs [24,25,26,27,28,29,31] --> Loop 21 

#### Loops of rm/3 
* Loop 16: rm(V1,V,Out)->  rm(V1,V',Out')
                  [V>=V'+1,V'>=0,V1>=1,V+Out'=Out+V'] 
* Loop 17: rm(V1,V,Out)->  rm(V1,V',Out)
                  [V>=V'+1,V>=V1+1,V'>=0,V1>=1] 
* Loop 18: rm(V1,V,Out)->  rm(V1',V',Out')
                  [V>=V'+1,V'>=0,V>=2,V+Out'=Out+V',V1'=0,V1=0] 
* Loop 19: rm(V1,V,Out)->  rm(V1',V',Out)
                  [V>=V'+1,V'>=0,V1'=0,V1=0] 
* Loop 20: rm(V1,V,Out) [V1>=0,Out=0,V=0] 
* Loop 21: rm(V1,V,Out) [V>=0,V1>=0,Out=0] 

### Ranking functions of CR rm(V1,V,Out) 
* RF of phase [16,17]: [V]
* RF of phase [18,19]: [V]

#### Partial ranking functions of CR rm(V1,V,Out) 
* Partial RF of phase [16,17]:
  - RF of loop [16:1]:
    V
  - RF of loop [17:1]:
    V-1
    -V1+V
* Partial RF of phase [18,19]:
  - RF of loop [18:1]:
    V-1
  - RF of loop [19:1]:
    V


### Resulting Chains:rm(V1,V,Out) 
* [[18,19],21]
* [[18,19],20]
* [[16,17],21]
* [[16,17],20]
* [21]
* [20]


### Merging Chains  rm/3 into  External patterns of execution 
* [[20,[18,19]],[21,[18,19]]] --> 1 
* [[20],[21]] --> 2 
* [[20,[16,17]],[21,[16,17]]] --> 3 


### Specialization of cost equations purge/2 
* CE 17 is refined into CE [38] 
* CE 19 is refined into CE [39] 
* CE 18 is refined into CE [40,41,42] 


#### Refined cost equations purge/2 
* CE 38: purge(V1,Out) = 1
     [Out=0,V1=0] 
* CE 39: purge(V1,Out) = 0
     [V1>=0,Out=0] 
* CE 40: purge(V1,Out) = 1+ rm(W1,X1,Y1):1+ purge(Y1,Z1)
     [2*X1>=Y1+2,X1>=Y1,Y1>=0,Out=Z1+1,X1+1=V1,W1=0] 
* CE 41: purge(V1,Out) = 1+ rm(W1,X1,Y1):2+ purge(Z1,A2)
     [X1>=0,W1>=0,W1+A2+1=Out,W1+X1+1=V1,Z1=0,Y1=0] 
* CE 42: purge(V1,Out) = 1+ rm(W1,X1,Y1):3+ purge(Y1,Z1)
     [X1+Y1>=2,X1>=Y1,Y1>=0,W1>=1,W1+Z1+1=Out,W1+X1+1=V1] 

### Cost equations --> "Loop" of purge/2 
* CEs [42] --> Loop 22 
* CEs [40] --> Loop 23 
* CEs [41] --> Loop 24 
* CEs [38,39] --> Loop 25 

#### Loops of purge/2 
* Loop 22: purge(V1,Out)->  purge(V1',Out')
                  [V1+V1'+Out'>=Out+2,V1+Out'>=Out+V1',Out>=Out'+2,V1'>=0] 
* Loop 23: purge(V1,Out)->  purge(V1',Out')
                  [2*V1>=V1'+4,V1>=V1'+1,V1'>=0,Out=Out'+1] 
* Loop 24: purge(V1,Out)->  purge(V1',Out')
                  [V1+Out'>=Out,Out>=Out'+1,V1'=0] 
* Loop 25: purge(V1,Out) [V1>=0,Out=0] 

### Ranking functions of CR purge(V1,Out) 
* RF of phase [22,23]: [V1-1]

#### Partial ranking functions of CR purge(V1,Out) 
* Partial RF of phase [22,23]:
  - RF of loop [22:1]:
    V1-2
  - RF of loop [23:1]:
    V1-1


### Resulting Chains:purge(V1,Out) 
* [[22,23],25]
* [[22,23],24,25]
* [25]
* [24,25]


### Merging Chains  purge/2 into  External patterns of execution 
* [[25]] --> 1 
* [[25,24],[25,24,[22,23]],[25,[22,23]]] --> 2 


### Specialization of cost equations start/3 
* CE 4 is refined into CE [43,44,45] 
* CE 2 is refined into CE [46] 
* CE 3 is refined into CE [47,48,49] 
* CE 5 is refined into CE [50,51,52,53,54,55] 
* CE 6 is refined into CE [56,57,58] 
* CE 7 is refined into CE [59,60] 


#### Refined cost equations start/3 
* CE 43: start(V1,V,V2) = 1+ rm(W2,X2,Y2):1
     [2*X2>=Y2+2,X2>=Y2,V2>=X2+1,Y2>=0,W2=0,V=0,V1=1] 
* CE 44: start(V1,V,V2) = 1+ rm(V,W2,X2):2
     [V2>=W2+1,W2>=0,V>=0,X2=0,V1=1] 
* CE 45: start(V1,V,V2) = 1+ rm(V,W2,X2):3
     [W2+X2>=2,W2>=X2,V2>=W2+1,X2>=0,V>=1,V1=1] 
* CE 46: start(V1,V,V2) = 0
     [V2>=0,V>=0,V1>=0] 
* CE 47: start(V1,V,V2) = 1+ rm(W2,X2,Y2):1
     [2*X2>=Y2+2,X2>=Y2,V2>=X2+1,Y2>=0,W2=0,V=0,V1=0] 
* CE 48: start(V1,V,V2) = 1+ rm(V,W2,X2):2
     [V2>=W2+1,W2>=0,V>=0,X2=0,V1=0] 
* CE 49: start(V1,V,V2) = 1+ rm(V,W2,X2):3
     [W2+X2>=2,W2>=X2,V2>=W2+1,X2>=0,V>=1,V1=0] 
* CE 50: start(V1,V,V2) = 0+ eq(W2,X2,Y2):1
     [Y2=1,X2=0,W2=0,V=0,V1=0] 
* CE 51: start(V1,V,V2) = 0+ eq(W2,V,X2):2
     [V>=1,X2=0,W2=0,V1=0] 
* CE 52: start(V1,V,V2) = 0+ eq(V1,W2,X2):3
     [V1>=1,X2=0,W2=0,V=0] 
* CE 53: start(V1,V,V2) = 0+ eq(V1,V,W2):4
     [V>=V1+1,V1>=1,W2=0] 
* CE 54: start(V1,V,V2) = 0+ eq(V1,V,W2):5
     [V1>=V+1,V>=1,W2=0] 
* CE 55: start(A,A,B) = 0+ eq(A,A,C):6
     [A>=1,C=1] 
* CE 56: start(V1,V,V2) = 0+ rm(W2,V,X2):1
     [2*V>=X2+2,V>=X2,X2>=0,W2=0,V1=0] 
* CE 57: start(V1,V,V2) = 0+ rm(V1,V,W2):2
     [V>=0,V1>=0,W2=0] 
* CE 58: start(V1,V,V2) = 0+ rm(V1,V,W2):3
     [V+W2>=2,V>=W2,W2>=0,V1>=1] 
* CE 59: start(V1,V,V2) = 0+ purge(V1,W2):1
     [V1>=0,W2=0] 
* CE 60: start(V1,V,V2) = 0+ purge(V1,W2):2
     [V1>=W2,W2>=1] 

### Cost equations --> "Loop" of start/3 
* CEs [55] --> Loop 26 
* CEs [52] --> Loop 27 
* CEs [43,44,45] --> Loop 28 
* CEs [51,56] --> Loop 29 
* CEs [48,49] --> Loop 30 
* CEs [46,47,50,53,54,57,58,59,60] --> Loop 31 

#### Loops of start/3 
* Loop 26: start(A,A,B) [A>=1] 
* Loop 27: start(V1,V,V2) [V1>=1,V=0] 
* Loop 28: start(V1,V,V2) [V2>=1,V>=0,V1=1] 
* Loop 29: start(V1,V,V2) [V>=1,V1=0] 
* Loop 30: start(V1,V,V2) [V2>=1,V>=0,V1=0] 
* Loop 31: start(V1,V,V2) [V1>=0] 

### Ranking functions of CR start(V1,V,V2) 

#### Partial ranking functions of CR start(V1,V,V2) 


### Resulting Chains:start(V1,V,V2) 
* [31]
* [30]
* [29]
* [28]
* [27]
* [26]


### Merging Chains  start/3 into  External patterns of execution 
* [[30],[31]] --> 1 
* [[29]] --> 2 
* [[28]] --> 3 
* [[27]] --> 4 
* [[26]] --> 5 


Computing Bounds
=====================================

#### Cost of loops [15] 

 * loop 15:eq(V1,V,Out) -> [eq(V1',V',Out')] 
1
#### Cost of phase [15]:eq(V1,V,Out) -> [eq(V1',V',Out')] 
1*it(15)+0
  Such that:it(15) =< V1
it(15) =< V1-V1'
it(15) =< V
it(15) =< V-V'

#### Cost of phase [15]:eq(V1,V,Out) -> [eq(V1',V',Out')] 
1*it(15)+0
  Such that:it(15) =< V1
it(15) =< V1-V1'
it(15) =< V
it(15) =< V-V'

#### Cost of phase [15]:eq(V1,V,Out) -> [eq(V1',V',Out')] 
1*it(15)+0
  Such that:it(15) =< V1
it(15) =< V1-V1'
it(15) =< V
it(15) =< V-V'

#### Cost of chains of eq(V1,V,Out):
* Chain [[15],14]: 1*it(15)+1
  Such that:it(15) =< V1

  with precondition: [Out=1,V1=V,V1>=1] 

* Chain [[15],13]: 1*it(15)+1
  Such that:it(15) =< V1

  with precondition: [Out=0,V1>=1,V>=V1+1] 

* Chain [[15],12]: 1*it(15)+1
  Such that:it(15) =< V

  with precondition: [Out=0,V>=1,V1>=V+1] 

* Chain [14]: 1
  with precondition: [V1=0,V=0,Out=1] 

* Chain [13]: 1
  with precondition: [V1=0,Out=0,V>=1] 

* Chain [12]: 1
  with precondition: [V=0,Out=0,V1>=1] 


#### Cost of loops [18,19] 

 * loop 18:rm(V1,V,Out) -> [rm(V1',V',Out')] 
3
 * loop 19:rm(V1,V,Out) -> [rm(V1',V',Out')] 
3
#### Cost of phase [18,19]:rm(V1,V,Out) -> [rm(V1',V',Out')] 
6*it(18)+0
  Such that:aux(2) =< V
aux(3) =< V-V'
it(18) =< aux(2)
it(18) =< aux(3)

#### Cost of phase [18,19]:rm(V1,V,Out) -> [rm(V1',V',Out')] 
6*it(18)+0
  Such that:aux(2) =< V
aux(3) =< V-V'
it(18) =< aux(2)
it(18) =< aux(3)

#### Cost of loops [16,17] 

 * loop 16:rm(V1,V,Out) -> [rm(V1',V',Out')] 
1*s(7)+1*s(6)+3
  Such that:s(6) =< V
s(7) =< V1'

 * loop 17:rm(V1,V,Out) -> [rm(V1',V',Out')] 
1*s(9)+3
  Such that:s(9) =< V1'

#### Cost of phase [16,17]:rm(V1,V,Out) -> [rm(V1',V',Out')] 
3*it(16)+3*it(17)+1*s(10)+1*s(11)+1*s(12)+0
  Such that:it(17) =< -V1+V
it(17) =< -V1+V+V1'-V'
aux(7) =< V1
aux(9) =< V
aux(10) =< V-V'
it(16) =< aux(9)
it(17) =< aux(9)
it(16) =< aux(10)
it(17) =< aux(10)
aux(8) =< aux(7)
s(10) =< it(16)*aux(7)
s(11) =< it(16)*aux(9)
s(12) =< it(17)*aux(8)

#### Cost of phase [16,17]:rm(V1,V,Out) -> [rm(V1',V',Out')] 
3*it(16)+3*it(17)+1*s(10)+1*s(11)+1*s(12)+0
  Such that:it(17) =< -V1+V
it(17) =< -V1+V+V1'-V'
aux(7) =< V1
aux(9) =< V
aux(10) =< V-V'
it(16) =< aux(9)
it(17) =< aux(9)
it(16) =< aux(10)
it(17) =< aux(10)
aux(8) =< aux(7)
s(10) =< it(16)*aux(7)
s(11) =< it(16)*aux(9)
s(12) =< it(17)*aux(8)

#### Cost of chains of rm(V1,V,Out):
* Chain [[18,19],21]: 7*it(18)+2
  Such that:aux(4) =< V
it(18) =< aux(4)

  with precondition: [V1=0,Out>=0,V>=Out,2*V>=Out+2] 

* Chain [[18,19],20]: 6*it(18)+1
  Such that:aux(5) =< V
it(18) =< aux(5)

  with precondition: [V1=0,Out>=0,V>=Out,2*V>=Out+2] 

* Chain [[16,17],21]: 4*it(16)+3*it(17)+2*s(1)+1*s(10)+1*s(11)+1*s(12)+2
  Such that:it(17) =< -V1+V
aux(11) =< V1
aux(12) =< V
it(17) =< aux(12)
it(16) =< aux(12)
s(1) =< aux(11)
aux(8) =< aux(11)
s(10) =< it(16)*aux(11)
s(11) =< it(16)*aux(12)
s(12) =< it(17)*aux(8)

  with precondition: [V1>=1,Out>=0,V>=Out,Out+V>=2] 

* Chain [[16,17],20]: 3*it(16)+3*it(17)+1*s(10)+1*s(11)+1*s(12)+1
  Such that:it(17) =< -V1+V
aux(7) =< V1
aux(13) =< V
it(17) =< aux(13)
it(16) =< aux(13)
aux(8) =< aux(7)
s(10) =< it(16)*aux(7)
s(11) =< it(16)*aux(13)
s(12) =< it(17)*aux(8)

  with precondition: [V1>=1,Out>=0,V>=Out,Out+V>=2] 

* Chain [21]: 2*s(1)+1*s(2)+2
  Such that:s(2) =< V
aux(1) =< V1
s(1) =< aux(1)

  with precondition: [Out=0,V1>=0,V>=0] 

* Chain [20]: 1
  with precondition: [V=0,Out=0,V1>=0] 


#### Cost of loops [22,23] 

 * loop 22:purge(V1,Out) -> [purge(V1',Out')] 
13*s(49)+2*s(51)+2*s(52)+2*s(53)+2*s(54)+3
  Such that:s(47) =< V1-V1'
s(48) =< V1
s(47) =< s(48)
s(49) =< s(48)
s(50) =< s(47)
s(51) =< s(49)*s(47)
s(52) =< s(49)*s(48)
s(53) =< s(49)*s(50)
s(54) =< s(47)

 * loop 23:purge(V1,Out) -> [purge(V1',Out')] 
13*s(58)+3
  Such that:s(57) =< V1
s(58) =< s(57)

#### Cost of phase [22,23]:purge(V1,Out) -> [purge(V1',Out')] 
3*it(22)+3*it(23)+13*s(59)+2*s(60)+4*s(61)+2*s(63)+13*s(66)+0
  Such that:aux(21) =< V1
aux(22) =< V1-V1'
aux(23) =< 2*V1
aux(24) =< 2*V1-2*V1'
it(22) =< aux(21)
it(23) =< aux(21)
s(47) =< aux(21)
it(22) =< aux(22)
it(23) =< aux(22)
it(23) =< aux(23)
s(64) =< aux(23)
it(23) =< aux(24)
s(64) =< aux(24)
aux(19) =< s(47)
s(67) =< it(23)*aux(19)
s(65) =< it(22)*aux(19)
s(66) =< s(67)
s(64) =< s(65)
s(47) =< aux(19)
s(59) =< s(65)
s(60) =< s(59)*s(47)
s(61) =< s(59)*aux(19)
s(63) =< s(64)

#### Cost of phase [22,23]:purge(V1,Out) -> [purge(V1',Out')] 
3*it(22)+3*it(23)+13*s(59)+2*s(60)+4*s(61)+2*s(63)+13*s(66)+0
  Such that:aux(21) =< V1
aux(22) =< V1-V1'
aux(23) =< 2*V1
aux(24) =< 2*V1-2*V1'
it(22) =< aux(21)
it(23) =< aux(21)
s(47) =< aux(21)
it(22) =< aux(22)
it(23) =< aux(22)
it(23) =< aux(23)
s(64) =< aux(23)
it(23) =< aux(24)
s(64) =< aux(24)
aux(19) =< s(47)
s(67) =< it(23)*aux(19)
s(65) =< it(22)*aux(19)
s(66) =< s(67)
s(64) =< s(65)
s(47) =< aux(19)
s(59) =< s(65)
s(60) =< s(59)*s(47)
s(61) =< s(59)*aux(19)
s(63) =< s(64)

#### Cost of chains of purge(V1,Out):
* Chain [[22,23],25]: 3*it(22)+3*it(23)+13*s(59)+2*s(60)+4*s(61)+2*s(63)+13*s(66)+1
  Such that:aux(25) =< V1
aux(26) =< 2*V1
it(22) =< aux(25)
it(23) =< aux(25)
s(47) =< aux(25)
it(23) =< aux(26)
s(64) =< aux(26)
aux(19) =< s(47)
s(67) =< it(23)*aux(19)
s(65) =< it(22)*aux(19)
s(66) =< s(67)
s(64) =< s(65)
s(47) =< aux(19)
s(59) =< s(65)
s(60) =< s(59)*s(47)
s(61) =< s(59)*aux(19)
s(63) =< s(64)

  with precondition: [Out>=1,V1>=Out+1] 

* Chain [[22,23],24,25]: 3*it(22)+3*it(23)+13*s(59)+2*s(60)+4*s(61)+2*s(63)+13*s(66)+3*s(69)+4
  Such that:aux(28) =< V1
aux(29) =< 2*V1
s(69) =< aux(29)
it(22) =< aux(28)
it(23) =< aux(28)
s(47) =< aux(28)
it(23) =< aux(29)
s(64) =< aux(29)
aux(19) =< s(47)
s(67) =< it(23)*aux(19)
s(65) =< it(22)*aux(19)
s(66) =< s(67)
s(64) =< s(65)
s(47) =< aux(19)
s(59) =< s(65)
s(60) =< s(59)*s(47)
s(61) =< s(59)*aux(19)
s(63) =< s(64)

  with precondition: [Out>=2,V1>=Out,2*V1>=Out+3] 

* Chain [25]: 1
  with precondition: [Out=0,V1>=0] 

* Chain [24,25]: 3*s(69)+4
  Such that:aux(27) =< V1
s(69) =< aux(27)

  with precondition: [Out>=1,V1>=Out] 


#### Cost of chains of start(V1,V,V2):
* Chain [31]: 13*s(103)+14*s(104)+9*s(105)+6*s(112)+2*s(115)+2*s(116)+2*s(117)+3*s(122)+6*s(123)+13*s(129)+13*s(130)+2*s(131)+4*s(132)+2*s(133)+13*s(139)+13*s(140)+2*s(141)+4*s(142)+2*s(143)+4
  Such that:s(109) =< -V1+V
s(120) =< 2*V1
s(102) =< V2
aux(32) =< V1
aux(33) =< V
s(104) =< aux(32)
s(105) =< aux(33)
s(112) =< s(109)
s(112) =< aux(33)
s(114) =< aux(32)
s(115) =< s(105)*aux(32)
s(116) =< s(105)*aux(33)
s(117) =< s(112)*s(114)
s(122) =< s(120)
s(123) =< aux(32)
s(124) =< aux(32)
s(123) =< s(120)
s(125) =< s(120)
s(126) =< s(124)
s(127) =< s(123)*s(126)
s(128) =< s(104)*s(126)
s(129) =< s(127)
s(125) =< s(128)
s(124) =< s(126)
s(130) =< s(128)
s(131) =< s(130)*s(124)
s(132) =< s(130)*s(126)
s(133) =< s(125)
s(134) =< aux(32)
s(135) =< s(120)
s(136) =< s(134)
s(137) =< s(123)*s(136)
s(138) =< s(104)*s(136)
s(139) =< s(137)
s(135) =< s(138)
s(134) =< s(136)
s(140) =< s(138)
s(141) =< s(140)*s(134)
s(142) =< s(140)*s(136)
s(143) =< s(135)
s(103) =< s(102)

  with precondition: [V1>=0] 

* Chain [30]: 8*s(145)+4*s(146)+6*s(150)+2*s(153)+2*s(154)+2*s(155)+3
  Such that:s(147) =< -V+V2
aux(34) =< V
aux(35) =< V2
s(145) =< aux(35)
s(150) =< s(147)
s(150) =< aux(35)
s(152) =< aux(34)
s(153) =< s(145)*aux(34)
s(154) =< s(145)*aux(35)
s(155) =< s(150)*s(152)
s(146) =< aux(34)

  with precondition: [V1=0,V>=0,V2>=1] 

* Chain [29]: 13*s(158)+2
  Such that:s(157) =< V
s(158) =< s(157)

  with precondition: [V1=0,V>=1] 

* Chain [28]: 21*s(160)+4*s(163)+6*s(167)+2*s(170)+2*s(171)+2*s(172)+3
  Such that:s(164) =< -V+V2
aux(36) =< V
aux(37) =< V2
s(160) =< aux(37)
s(167) =< s(164)
s(167) =< aux(37)
s(169) =< aux(36)
s(170) =< s(160)*aux(36)
s(171) =< s(160)*aux(37)
s(172) =< s(167)*s(169)
s(163) =< aux(36)

  with precondition: [V1=1,V>=0,V2>=1] 

* Chain [27]: 1
  with precondition: [V=0,V1>=1] 

* Chain [26]: 1*s(174)+1
  Such that:s(174) =< V

  with precondition: [V1=V,V1>=1] 


Closed-form bounds of start(V1,V,V2): 
-------------------------------------
* Chain [31] with precondition: [V1>=0] 
    - Upper bound: 20*V1+4+52*V1*V1+12*V1*V1*V1+2*V1*nat(V)+2*V1*nat(-V1+V)+nat(V)*9+nat(V)*2*nat(V)+nat(V2)*13+14*V1+nat(-V1+V)*6 
    - Complexity: n^3 
* Chain [30] with precondition: [V1=0,V>=0,V2>=1] 
    - Upper bound: 4*V+3+2*V*V2+2*V*nat(-V+V2)+8*V2+2*V2*V2+nat(-V+V2)*6 
    - Complexity: n^2 
* Chain [29] with precondition: [V1=0,V>=1] 
    - Upper bound: 13*V+2 
    - Complexity: n 
* Chain [28] with precondition: [V1=1,V>=0,V2>=1] 
    - Upper bound: 4*V+3+2*V*V2+2*V*nat(-V+V2)+21*V2+2*V2*V2+nat(-V+V2)*6 
    - Complexity: n^2 
* Chain [27] with precondition: [V=0,V1>=1] 
    - Upper bound: 1 
    - Complexity: constant 
* Chain [26] with precondition: [V1=V,V1>=1] 
    - Upper bound: V+1 
    - Complexity: n 

### Maximum cost of start(V1,V,V2): nat(V)*3+1+max([nat(V)*9,nat(V2)*8+1+max([nat(V)*2*nat(-V+V2)+nat(V)*2*nat(V2)+nat(V2)*2*nat(V2)+nat(-V+V2)*6+nat(V2)*13,20*V1+1+52*V1*V1+12*V1*V1*V1+2*V1*nat(V)+2*V1*nat(-V1+V)+nat(V)*5+nat(V)*2*nat(V)+nat(V2)*5+14*V1+nat(-V1+V)*6])])+nat(V)+1 
Asymptotic class: n^3 

Time statistics: 
-------------------------------------
* Partial evaluation computed in 18 ms.
* Invariants computed in 40 ms.
   - Backward Invariants 21 ms.
   - Transitive Invariants 7 ms.
* Refinement performed in 83 ms.
* Termination proved in 12 ms.
* Upper bounds computed in 157 ms.
   - Equation cost structures 49 ms.
   - Phase cost structures 54 ms.
   - Chain cost structures 41 ms.
   - Solving cost expressions 6 ms.
* Total analysis performed in 335 ms.


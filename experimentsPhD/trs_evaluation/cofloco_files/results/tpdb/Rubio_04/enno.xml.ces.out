
Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. recursive  : [append/3]
1. non_recursive  : [fun1/7]
2. recursive  : [lt/3]
3. non_recursive  : [fun/5]
4. recursive [non_tail] : [split/3]
5. recursive [non_tail,multiple] : [fun2/4,qsort/2]
6. non_recursive  : [start/6]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into append/3
1. SCC is partially evaluated into fun1/7
2. SCC is partially evaluated into lt/3
3. SCC is partially evaluated into fun/5
4. SCC is partially evaluated into split/3
5. SCC is partially evaluated into qsort/2
6. SCC is partially evaluated into start/6

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations append/3 
* CE 16 is refined into CE [29] 
* CE 14 is refined into CE [30] 
* CE 15 is refined into CE [31] 


#### Refined cost equations append/3 
* CE 29: append(V1,V,Out) = 0
     [V>=0,V1>=0,Out=0] 
* CE 30: append(A,B,B) = 1
     [B>=0,A=1] 
* CE 31: append(V1,V,Out) = 1+ append(W1,V,X1)
     [V1+X1>=Out,Out>=X1+1,V>=0,V1+X1=Out+W1] 

### Cost equations --> "Loop" of append/3 
* CEs [31] --> Loop 20 
* CEs [29] --> Loop 21 
* CEs [30] --> Loop 22 

#### Loops of append/3 
* Loop 20: append(V1,V,Out)->  append(V1',V,Out')
                  [V1+Out'>=Out,Out>=Out'+1,V>=0,V1+Out'=Out+V1'] 
* Loop 21: append(V1,V,Out) [V>=0,V1>=0,Out=0] 
* Loop 22: append(A,B,B) [B>=0,A=1] 

### Ranking functions of CR append(V1,V,Out) 
* RF of phase [20]: [V1]

#### Partial ranking functions of CR append(V1,V,Out) 
* Partial RF of phase [20]:
  - RF of loop [20:1]:
    V1


### Resulting Chains:append(V1,V,Out) 
* [[20],22]
* [[20],21]
* [22]
* [21]


### Merging Chains  append/3 into  External patterns of execution 
* [[22]] --> 1 
* [[21]] --> 2 
* [[22,[20]]] --> 3 
* [[21,[20]]] --> 4 


### Specialization of cost equations fun1/7 
* CE 28 is refined into CE [32] 
* CE 26 is refined into CE [33] 
* CE 27 is refined into CE [34] 


#### Refined cost equations fun1/7 
* CE 32: fun1(V1,V,V2,V3,V4,V5,Out) = 0
     [V5>=0,V4>=0,V3>=0,V2>=0,V>=0,V1>=0,Out=0] 
* CE 33: fun1(V1,V,V2,V3,V4,V5,Out) = 1
     [V5>=0,V4>=0,V3>=0,V2>=0,V>=0,V2+V4+V5+2=Out,V1=2] 
* CE 34: fun1(V1,V,V2,V3,V4,V5,Out) = 1
     [V5>=0,V4>=0,V3>=0,V2>=0,V>=0,V2+V4+V5+2=Out,V1=1] 

### Cost equations --> "Loop" of fun1/7 
* CEs [32] --> Loop 23 
* CEs [33] --> Loop 24 
* CEs [34] --> Loop 25 

#### Loops of fun1/7 
* Loop 23: fun1(V1,V,V2,V3,V4,V5,Out) [V5>=0,V4>=0,V3>=0,V2>=0,V>=0,V1>=0,Out=0] 
* Loop 24: fun1(V1,V,V2,V3,V4,V5,Out) [V5>=0,V4>=0,V3>=0,V2>=0,V>=0,V2+V4+V5+2=Out,V1=2] 
* Loop 25: fun1(V1,V,V2,V3,V4,V5,Out) [V5>=0,V4>=0,V3>=0,V2>=0,V>=0,V2+V4+V5+2=Out,V1=1] 

### Ranking functions of CR fun1(V1,V,V2,V3,V4,V5,Out) 

#### Partial ranking functions of CR fun1(V1,V,V2,V3,V4,V5,Out) 


### Resulting Chains:fun1(V1,V,V2,V3,V4,V5,Out) 
* [25]
* [24]
* [23]


### Merging Chains  fun1/7 into  External patterns of execution 
* [[25]] --> 1 
* [[24]] --> 2 
* [[23]] --> 3 


### Specialization of cost equations lt/3 
* CE 20 is refined into CE [35] 
* CE 18 is refined into CE [36] 
* CE 17 is refined into CE [37] 
* CE 19 is refined into CE [38] 


#### Refined cost equations lt/3 
* CE 35: lt(V1,V,Out) = 0
     [V>=0,V1>=0,Out=0] 
* CE 36: lt(V1,V,Out) = 1
     [V1>=1,Out=1,V=0] 
* CE 37: lt(V1,V,Out) = 1
     [V>=1,Out=2,V1=0] 
* CE 38: lt(V1,V,Out) = 1+ lt(W1,X1,Out)
     [X1>=0,W1>=0,X1+1=V,W1+1=V1] 

### Cost equations --> "Loop" of lt/3 
* CEs [38] --> Loop 26 
* CEs [35] --> Loop 27 
* CEs [36] --> Loop 28 
* CEs [37] --> Loop 29 

#### Loops of lt/3 
* Loop 26: lt(V1,V,Out)->  lt(V1',V',Out)
                  [V'>=0,V1'>=0,V'+1=V,V1'+1=V1] 
* Loop 27: lt(V1,V,Out) [V>=0,V1>=0,Out=0] 
* Loop 28: lt(V1,V,Out) [V1>=1,Out=1,V=0] 
* Loop 29: lt(V1,V,Out) [V>=1,Out=2,V1=0] 

### Ranking functions of CR lt(V1,V,Out) 
* RF of phase [26]: [V,V1]

#### Partial ranking functions of CR lt(V1,V,Out) 
* Partial RF of phase [26]:
  - RF of loop [26:1]:
    V
    V1


### Resulting Chains:lt(V1,V,Out) 
* [[26],29]
* [[26],28]
* [[26],27]
* [29]
* [28]
* [27]


### Merging Chains  lt/3 into  External patterns of execution 
* [[29]] --> 1 
* [[28]] --> 2 
* [[27],[27,[26]]] --> 3 
* [[28,[26]]] --> 4 
* [[29,[26]]] --> 5 


### Specialization of cost equations fun/5 
* CE 24 is refined into CE [39,40,41,42,43,44,45,46,47] 
* CE 25 is refined into CE [48] 


#### Refined cost equations fun/5 
* CE 39: fun(V1,V,V2,V3,Out) = 1+ lt(W3,V2,X3):1+ fun1(Y3,Z3,V2,V3,A4,B4,Out):2
     [Out>=V2+A4+2,A4>=0,V3>=0,V2>=1,Out=V2+A4+B4+2,Out=V1+V2+1,Z3=0,Y3=2,X3=2,W3=0,V=0] 
* CE 40: fun(V1,V,V2,V3,Out) = 1+ lt(W3,V2,X3):1+ fun1(Y3,Z3,V2,V3,A4,B4,C4):3
     [B4>=0,A4>=0,V3>=0,V2>=1,A4+B4+1=V1,C4=0,Z3=0,Y3=2,X3=2,W3=0,Out=0,V=0] 
* CE 41: fun(V1,V,V2,V3,Out) = 1+ lt(V,W3,X3):2+ fun1(Y3,V,Z3,V3,A4,B4,Out):1
     [Out>=A4+2,A4>=0,V3>=0,V>=1,Out=A4+B4+2,Out=V1+1,Z3=0,Y3=1,X3=1,W3=0,V2=0] 
* CE 42: fun(V1,V,V2,V3,Out) = 1+ lt(V,W3,X3):2+ fun1(Y3,V,Z3,V3,A4,B4,C4):3
     [B4>=0,A4>=0,V3>=0,V>=1,A4+B4+1=V1,C4=0,Z3=0,Y3=1,X3=1,W3=0,Out=0,V2=0] 
* CE 43: fun(V1,V,V2,V3,Out) = 1+ lt(V,V2,W3):3+ fun1(X3,V,V2,V3,Y3,Z3,A4):3
     [Z3>=0,Y3>=0,V3>=0,V2>=0,V>=0,Y3+Z3+1=V1,A4=0,X3=0,W3=0,Out=0] 
* CE 44: fun(V1,V,V2,V3,Out) = 1+ lt(V,V2,W3):4+ fun1(X3,V,V2,V3,Y3,Z3,Out):1
     [Out>=V2+Y3+2,V>=V2+1,Y3>=0,V3>=0,V2>=1,Out=V2+Y3+Z3+2,Out=V1+V2+1,X3=1,W3=1] 
* CE 45: fun(V1,V,V2,V3,Out) = 1+ lt(V,V2,W3):4+ fun1(X3,V,V2,V3,Y3,Z3,A4):3
     [V>=V2+1,Z3>=0,Y3>=0,V3>=0,V2>=1,Y3+Z3+1=V1,A4=0,X3=1,W3=1,Out=0] 
* CE 46: fun(V1,V,V2,V3,Out) = 1+ lt(V,V2,W3):5+ fun1(X3,V,V2,V3,Y3,Z3,Out):2
     [Out>=V2+Y3+2,V2>=V+1,Y3>=0,V3>=0,V>=1,Out=V2+Y3+Z3+2,Out=V1+V2+1,X3=2,W3=2] 
* CE 47: fun(V1,V,V2,V3,Out) = 1+ lt(V,V2,W3):5+ fun1(X3,V,V2,V3,Y3,Z3,A4):3
     [V2>=V+1,Z3>=0,Y3>=0,V3>=0,V>=1,Y3+Z3+1=V1,A4=0,X3=2,W3=2,Out=0] 
* CE 48: fun(V1,V,V2,V3,Out) = 0
     [V3>=0,V2>=0,V>=0,V1>=0,Out=0] 

### Cost equations --> "Loop" of fun/5 
* CEs [44] --> Loop 30 
* CEs [46] --> Loop 31 
* CEs [41] --> Loop 32 
* CEs [42] --> Loop 33 
* CEs [39] --> Loop 34 
* CEs [40,43,45,47,48] --> Loop 35 

#### Loops of fun/5 
* Loop 30: fun(V1,V,V2,V3,Out) [V>=V2+1,V3>=0,V2>=1,V1>=1,V1+V2+1=Out] 
* Loop 31: fun(V1,V,V2,V3,Out) [V2>=V+1,V3>=0,V>=1,V1>=1,V1+V2+1=Out] 
* Loop 32: fun(V1,V,V2,V3,Out) [V3>=0,V>=1,V1>=1,V1+1=Out,V2=0] 
* Loop 33: fun(V1,V,V2,V3,Out) [V3>=0,V>=1,V1>=1,Out=0,V2=0] 
* Loop 34: fun(V1,V,V2,V3,Out) [V3>=0,V2>=1,V1>=1,V1+V2+1=Out,V=0] 
* Loop 35: fun(V1,V,V2,V3,Out) [V3>=0,V2>=0,V>=0,V1>=0,Out=0] 

### Ranking functions of CR fun(V1,V,V2,V3,Out) 

#### Partial ranking functions of CR fun(V1,V,V2,V3,Out) 


### Resulting Chains:fun(V1,V,V2,V3,Out) 
* [35]
* [34]
* [33]
* [32]
* [31]
* [30]


### Merging Chains  fun/5 into  External patterns of execution 
* [[34]] --> 1 
* [[33],[35]] --> 2 
* [[32]] --> 3 
* [[31]] --> 4 
* [[30]] --> 5 


### Specialization of cost equations split/3 
* CE 23 is refined into CE [49] 
* CE 21 is refined into CE [50] 
* CE 22 is refined into CE [51,52,53,54,55] 


#### Refined cost equations split/3 
* CE 49: split(V1,V,Out) = 0
     [V>=0,V1>=0,Out=0] 
* CE 50: split(V1,V,Out) = 1
     [V1>=0,Out=3,V=1] 
* CE 51: split(V1,V,Out) = 1+ split(W1,X1,Y1)+ fun(Y1,Z1,A2,X1,Out):1
     [Out>=Y1+2,X1>=0,Y1>=1,Out+X1=V+Y1,Out=Y1+A2+1,W1=0,Z1=0,V1=0] 
* CE 52: split(V1,V,Out) = 1+ split(V1,W1,X1)+ fun(X1,V1,Y1,W1,Z1):2
     [W1>=0,Y1>=0,V1>=0,X1>=0,Y1+W1+1=V,Z1=0,Out=0] 
* CE 53: split(V1,V,Out) = 1+ split(V1,W1,X1)+ fun(Y1,V1,Z1,W1,Out):3
     [Out>=2,W1>=0,V1>=1,Out=X1+1,Out=Y1+1,W1+1=V,Z1=0] 
* CE 54: split(V1,V,Out) = 1+ split(V1,W1,X1)+ fun(X1,V1,Y1,W1,Out):4
     [Out>=V1+X1+2,W1>=0,V1>=1,X1>=1,Out+W1=V+X1,Out=X1+Y1+1] 
* CE 55: split(V1,V,Out) = 1+ split(V1,W1,X1)+ fun(X1,V1,Y1,W1,Out):5
     [V1+X1>=Out,Out>=X1+2,W1>=0,X1>=1,Out+W1=V+X1,Out=X1+Y1+1] 

### Cost equations --> "Loop" of split/3 
* CEs [55] --> Loop 36 
* CEs [54] --> Loop 37 
* CEs [53] --> Loop 38 
* CEs [52] --> Loop 39 
* CEs [51] --> Loop 40 
* CEs [49] --> Loop 41 
* CEs [50] --> Loop 42 

#### Loops of split/3 
* Loop 36: split(V1,V,Out)->  split(V1,V',Out')
                  [Out+V'>=V+1,V1+V'>=V,V>=V'+2,V'>=0,V+Out'=Out+V'] 
* Loop 37: split(V1,V,Out)->  split(V1,V',Out')
                  [Out+V'>=V+1,V>=V1+V'+2,V'>=0,V1>=1,Out+V'=V+Out'] 
* Loop 38: split(V1,V,Out)->  split(V1,V',Out')
                  [Out>=2,V>=1,V1>=1,Out=Out'+1,V=V'+1] 
* Loop 39: split(V1,V,Out)->  split(V1,V',Out')
                  [V>=V'+1,Out'>=0,V'>=0,V1>=0,Out=0] 
* Loop 40: split(V1,V,Out)->  split(V1',V',Out')
                  [Out+V'>=V+1,V>=V'+2,V'>=0,V+Out'=Out+V',V1'=0,V1=0] 
* Loop 41: split(V1,V,Out) [V>=0,V1>=0,Out=0] 
* Loop 42: split(V1,V,Out) [V1>=0,Out=3,V=1] 

### Ranking functions of CR split(V1,V,Out) 
* RF of phase [36,37,38]: [V]
* RF of phase [39]: [V]
* RF of phase [40]: [V-1]

#### Partial ranking functions of CR split(V1,V,Out) 
* Partial RF of phase [36,37,38]:
  - RF of loop [36:1]:
    V-1
  - RF of loop [37:1]:
    V/3-2/3
    -V1/3+V/3-1/3
  - RF of loop [38:1]:
    V
* Partial RF of phase [39]:
  - RF of loop [39:1]:
    V
* Partial RF of phase [40]:
  - RF of loop [40:1]:
    V-1


### Resulting Chains:split(V1,V,Out) 
* [[40],42]
* [[39],[40],42]
* [[39],[36,37,38],42]
* [[39],42]
* [[39],41]
* [[36,37,38],42]
* [42]
* [41]


### Merging Chains  split/3 into  External patterns of execution 
* [[41],[41,[39]],[42,[39]],[42,[36,37,38],[39]],[42,[40],[39]]] --> 1 
* [[42,[40]]] --> 2 
* [[42]] --> 3 
* [[42,[36,37,38]]] --> 4 


### Specialization of cost equations qsort/2 
* CE 10 is refined into CE [56,57,58,59] 
* CE 13 is refined into CE [60] 
* CE 12 is refined into CE [61] 
* CE 11 is refined into CE [62,63,64,65,66,67,68,69,70,71,72,73] 


#### Refined cost equations qsort/2 
* CE 56: qsort(V1,Out) = 1+ split(W1,X1,Y1):1
     [X1>=0,W1>=0,W1+X1+1=V1,Y1=0,Out=0] 
* CE 57: qsort(V1,Out) = 1+ split(W1,X1,Y1):2
     [Y1>=5,Y1=X1+2,Y1=V1+1,W1=0,Out=0] 
* CE 58: qsort(V1,Out) = 1+ split(W1,X1,Y1):3
     [W1>=0,W1+2=V1,Y1=3,X1=1,Out=0] 
* CE 59: qsort(V1,Out) = 1+ split(W1,X1,Y1):4
     [Y1>=4,W1>=1,W1+Y1=V1+1,Y1=X1+2,Out=0] 
* CE 60: qsort(V1,Out) = 0
     [V1>=0,Out=0] 
* CE 61: qsort(V1,Out) = 1
     [Out=1,V1=1] 
* CE 62: qsort(V1,Out) = 2+ split(W1,X1,Y1):2+ qsort(Z1,A2)+ qsort(B2,C2)+ append(D2,Out,Out):1
     [Y1>=B2+1,B2>=0,Out>=0,Y1>=5,Y1=Z1+B2+1,Out+1=Y1+C2,Y1=X1+2,Y1=V1+1,A2=1,D2=1,W1=0] 
* CE 63: qsort(V1,Out) = 2+ split(W1,X1,Y1):2+ qsort(Z1,A2)+ qsort(B2,C2)+ append(A2,D2,E2):2
     [Y1>=B2+1,B2>=0,D2>=0,A2>=0,Y1>=5,Y1=Z1+B2+1,D2+1=Y1+C2,Y1=X1+2,Y1=V1+1,E2=0,W1=0,Out=0] 
* CE 64: qsort(V1,Out) = 2+ split(W1,X1,Y1):2+ qsort(Z1,A2)+ qsort(B2,C2)+ append(A2,D2,Out):3
     [Y1>=B2+1,Out+1>=A2,B2>=0,A2>=2,Y1>=5,Out+2=Y1+A2+C2,Y1=Z1+B2+1,Out+1=A2+D2,Y1=X1+2,Y1=V1+1,W1=0] 
* CE 65: qsort(V1,Out) = 2+ split(W1,X1,Y1):2+ qsort(Z1,A2)+ qsort(B2,C2)+ append(A2,D2,Out):4
     [Y1>=B2+1,A2>=Out,B2>=0,Out>=1,D2>=0,Y1>=5,Y1=Z1+B2+1,D2+1=Y1+C2,Y1=X1+2,Y1=V1+1,W1=0] 
* CE 66: qsort(V1,Out) = 2+ split(W1,X1,Y1):3+ qsort(Z1,A2)+ qsort(B2,C2)+ append(D2,Out,Out):1
     [B2>=0,Out>=0,W1>=0,2>=B2,Z1+B2=2,Out=C2+2,W1+2=V1,A2=1,D2=1,Y1=3,X1=1] 
* CE 67: qsort(V1,Out) = 2+ split(W1,X1,Y1):3+ qsort(Z1,A2)+ qsort(B2,C2)+ append(A2,D2,E2):2
     [B2>=0,D2>=0,A2>=0,W1>=0,2>=B2,Z1+B2=2,D2=C2+2,W1+2=V1,E2=0,Y1=3,X1=1,Out=0] 
* CE 68: qsort(V1,Out) = 2+ split(W1,X1,Y1):3+ qsort(Z1,A2)+ qsort(B2,C2)+ append(A2,D2,Out):3
     [Out+1>=A2,B2>=0,A2>=2,W1>=0,2>=B2,Out=A2+C2+1,Out+1=A2+D2,Z1+B2=2,W1+2=V1,Y1=3,X1=1] 
* CE 69: qsort(V1,Out) = 2+ split(W1,X1,Y1):3+ qsort(Z1,A2)+ qsort(B2,C2)+ append(A2,D2,Out):4
     [A2>=Out,B2>=0,Out>=1,D2>=0,W1>=0,2>=B2,Z1+B2=2,D2=C2+2,W1+2=V1,Y1=3,X1=1] 
* CE 70: qsort(V1,Out) = 2+ split(W1,X1,Y1):4+ qsort(Z1,A2)+ qsort(B2,C2)+ append(D2,Out,Out):1
     [Y1>=B2+1,B2>=0,Out>=0,Y1>=4,W1>=1,Y1=Z1+B2+1,Out+1=Y1+C2,W1+Y1=V1+1,Y1=X1+2,A2=1,D2=1] 
* CE 71: qsort(V1,Out) = 2+ split(W1,X1,Y1):4+ qsort(Z1,A2)+ qsort(B2,C2)+ append(A2,D2,E2):2
     [Y1>=B2+1,B2>=0,D2>=0,A2>=0,Y1>=4,W1>=1,Y1=Z1+B2+1,D2+1=Y1+C2,W1+Y1=V1+1,Y1=X1+2,E2=0,Out=0] 
* CE 72: qsort(V1,Out) = 2+ split(W1,X1,Y1):4+ qsort(Z1,A2)+ qsort(B2,C2)+ append(A2,D2,Out):3
     [Y1>=B2+1,Out+1>=A2,B2>=0,A2>=2,Y1>=4,W1>=1,Out+2=Y1+A2+C2,Y1=Z1+B2+1,Out+1=A2+D2,W1+Y1=V1+1,Y1=X1+2] 
* CE 73: qsort(V1,Out) = 2+ split(W1,X1,Y1):4+ qsort(Z1,A2)+ qsort(B2,C2)+ append(A2,D2,Out):4
     [Y1>=B2+1,A2>=Out,B2>=0,Out>=1,D2>=0,Y1>=4,W1>=1,Y1=Z1+B2+1,D2+1=Y1+C2,W1+Y1=V1+1,Y1=X1+2] 

### Cost equations --> "Loop" of qsort/2 
* CEs [73] --> Loop 43 
* CEs [72] --> Loop 44 
* CEs [65] --> Loop 45 
* CEs [64] --> Loop 46 
* CEs [69] --> Loop 47 
* CEs [68] --> Loop 48 
* CEs [70] --> Loop 49 
* CEs [62] --> Loop 50 
* CEs [66] --> Loop 51 
* CEs [71] --> Loop 52 
* CEs [63] --> Loop 53 
* CEs [67] --> Loop 54 
* CEs [56,57,58,59,60] --> Loop 55 
* CEs [61] --> Loop 56 

#### Loops of qsort/2 
* Loop 43: qsort(V1,Out)->  qsort(V1',Out')  qsort(V1'2,Out'2)
                  [V1'+V1'2+Out'2>=0,V1>=V1'+V1'2+1,V1'+V1'2>=3,Out'>=Out,V1'2>=0,V1'>=0,Out>=1] 
* Loop 44: qsort(V1,Out)->  qsort(V1',Out')  qsort(V1'2,Out'2)
                  [V1>=V1'+V1'2+1,V1'+V1'2>=3,Out+1>=Out',V1'2>=0,Out'>=2,V1'>=0,V1'+Out'+V1'2+Out'2=Out+1] 
* Loop 45: qsort(V1,Out)->  qsort(V1',Out')  qsort(V1'2,Out'2)
                  [V1+Out'2>=0,V1>=V1',Out'>=Out,V1'>=0,Out>=1,V1>=4,V1=V1'+V1'2] 
* Loop 46: qsort(V1,Out)->  qsort(V1',Out')  qsort(V1'2,Out'2)
                  [Out+1>=Out',V1>=V1',Out'>=2,V1'>=0,V1>=4,Out+1=V1+Out'+Out'2,V1=V1'+V1'2] 
* Loop 47: qsort(V1,Out)->  qsort(V1',Out')  qsort(V1'2,Out'2)
                  [Out'>=Out,Out'2+2>=0,V1'>=0,Out>=1,V1>=2,2>=V1',V1'+V1'2=2] 
* Loop 48: qsort(V1,Out)->  qsort(V1',Out')  qsort(V1'2,Out'2)
                  [Out+1>=Out',Out'>=2,V1'>=0,V1>=2,2>=V1',Out'+Out'2+1=Out,V1'+V1'2=2] 
* Loop 49: qsort(V1,Out)->  qsort(V1',Out')  qsort(V1'2,Out'2)
                  [V1>=V1'+V1'2+1,V1'+V1'2>=3,V1'2>=0,V1'>=0,Out>=0,V1'+V1'2+Out'2=Out,Out'=1] 
* Loop 50: qsort(V1,Out)->  qsort(V1',Out')  qsort(V1'2,Out'2)
                  [V1>=V1',V1'>=0,Out>=0,V1>=4,V1=V1'+V1'2,V1+Out'2=Out,Out'=1] 
* Loop 51: qsort(V1,Out)->  qsort(V1',Out')  qsort(V1'2,Out'2)
                  [V1'>=0,Out>=0,V1>=2,2>=V1',V1'+V1'2=2,Out=Out'2+2,Out'=1] 
* Loop 52: qsort(V1,Out)->  qsort(V1',Out')  qsort(V1'2,Out'2)
                  [V1'+V1'2+Out'2>=0,V1>=V1'+V1'2+1,V1'+V1'2>=3,V1'2>=0,Out'>=0,V1'>=0,Out=0] 
* Loop 53: qsort(V1,Out)->  qsort(V1',Out')  qsort(V1'2,Out'2)
                  [V1+Out'2>=0,V1>=V1',Out'>=0,V1'>=0,V1>=4,V1=V1'+V1'2,Out=0] 
* Loop 54: qsort(V1,Out)->  qsort(V1',Out')  qsort(V1'2,Out'2)
                  [Out'2+2>=0,Out'>=0,V1'>=0,V1>=2,2>=V1',V1'+V1'2=2,Out=0] 
* Loop 55: qsort(V1,Out) [V1>=0,Out=0] 
* Loop 56: qsort(V1,Out) [Out=1,V1=1] 

### Ranking functions of CR qsort(V1,Out) 

#### Partial ranking functions of CR qsort(V1,Out) 
* Partial RF of phase [43,44,45,46,49,50,52,53]:
  - RF of loop [43:1,43:2,44:1,44:2,49:1,49:2,52:1,52:2]:
    V1-3


### Resulting Chains:qsort(V1,Out) 
* [multiple([47,48,51,54],[[],[56],[55]])]...
* [multiple([43,44,45,46,49,50,52,53],[[],[multiple([47,48,51,54],[[],[56],[55]])],[56],[55]])]...
* [56]
* [55]


### Merging Chains  qsort/2 into  External patterns of execution 
* [[56]] --> 1 
* [[55]] --> 2 
* [[multiple([47,48,51,54],[[],[56],[55]])]] --> 3 
* [[multiple([43,44,45,46,49,50,52,53],[[],[multiple([47,48,51,54],[[],[56],[55]])],[56],[55]])]] --> 4 


### Specialization of cost equations start/6 
* CE 2 is refined into CE [74] 
* CE 3 is refined into CE [75,76,77,78,79,80,81,82,83,84,85,86,87,88] 
* CE 4 is refined into CE [89,90,91,92,93] 
* CE 5 is refined into CE [94,95,96,97] 
* CE 6 is refined into CE [98,99,100,101] 
* CE 7 is refined into CE [102,103,104,105,106] 
* CE 8 is refined into CE [107,108,109] 
* CE 9 is refined into CE [110,111,112,113] 


#### Refined cost equations start/6 
* CE 74: start(V1,V,V2,V3,V4,V5) = 0
     [V2>=0,V>=0,V1>=0] 
* CE 75: start(V1,V,V2,V3,V4,V5) = 1+ qsort(W5,X5):1+ qsort(Y5,Z5):1+ append(A6,B6,B6):1
     [B6>=2,V>=0,B6=V2+2,A6=1,Z5=1,Y5=1,X5=1,W5=1,V1=3] 
* CE 76: start(V1,V,V2,V3,V4,V5) = 1+ qsort(W5,X5):1+ qsort(Y5,Z5):1+ append(A6,B6,C6):2
     [B6>=2,V>=0,B6=V2+2,C6=0,A6=1,Z5=1,Y5=1,X5=1,W5=1,V1=3] 
* CE 77: start(V1,V,V2,V3,V4,V5) = 1+ qsort(W5,X5):1+ qsort(Y5,Z5):1+ append(A6,B6,C6):4
     [B6>=2,V>=0,B6=V2+2,C6=1,A6=1,Z5=1,Y5=1,X5=1,W5=1,V1=3] 
* CE 78: start(V1,V,V2,V3,V4,V5) = 1+ qsort(W5,X5):1+ qsort(Y5,Z5):2+ append(A6,B6,B6):1
     [B6>=1,Y5>=0,V>=0,B6=V2+1,Y5+2=V1,A6=1,Z5=0,X5=1,W5=1] 
* CE 79: start(V1,V,V2,V3,V4,V5) = 1+ qsort(W5,X5):1+ qsort(Y5,Z5):2+ append(A6,B6,C6):2
     [B6>=1,Y5>=0,V>=0,B6=V2+1,Y5+2=V1,C6=0,A6=1,Z5=0,X5=1,W5=1] 
* CE 80: start(V1,V,V2,V3,V4,V5) = 1+ qsort(W5,X5):1+ qsort(Y5,Z5):2+ append(A6,B6,C6):4
     [B6>=1,Y5>=0,V>=0,B6=V2+1,Y5+2=V1,C6=1,A6=1,Z5=0,X5=1,W5=1] 
* CE 81: start(V1,V,V2,V3,V4,V5) = 1+ qsort(W5,X5):1+ qsort(Y5,Z5):3
     [Z5>=0,Y5>=2,V2>=0,V>=0,V2+Z5+1=A6,Y5+2=V1,B6=1,X5=1,W5=1] 
* CE 82: start(V1,V,V2,V3,V4,V5) = 1+ qsort(W5,X5):1+ qsort(Y5,Z5):4
     [Z5>=0,Y5>=4,V2>=0,V>=0,V2+Z5+1=A6,Y5+2=V1,B6=1,X5=1,W5=1] 
* CE 83: start(V1,V,V2,V3,V4,V5) = 1+ qsort(W5,X5):2+ qsort(Y5,Z5):1+ append(A6,B6,C6):2
     [B6>=2,W5>=0,V>=0,B6=V2+2,W5+2=V1,C6=0,A6=0,Z5=1,Y5=1,X5=0] 
* CE 84: start(V1,V,V2,V3,V4,V5) = 1+ qsort(W5,X5):2+ qsort(Y5,Z5):2+ append(A6,B6,C6):2
     [B6>=1,Y5>=0,W5>=0,V>=0,W5+Y5+1=V1,B6=V2+1,C6=0,A6=0,Z5=0,X5=0] 
* CE 85: start(V1,V,V2,V3,V4,V5) = 1+ qsort(W5,X5):2+ qsort(Y5,Z5):3
     [Z5>=0,Y5>=2,W5>=0,V2>=0,V>=0,V2+Z5+1=A6,W5+Y5+1=V1,B6=0,X5=0] 
* CE 86: start(V1,V,V2,V3,V4,V5) = 1+ qsort(W5,X5):2+ qsort(Y5,Z5):4
     [Z5>=0,Y5>=4,W5>=0,V2>=0,V>=0,V2+Z5+1=A6,W5+Y5+1=V1,B6=0,X5=0] 
* CE 87: start(V1,V,V2,V3,V4,V5) = 1+ qsort(W5,X5):3
     [Y5>=0,X5>=0,W5>=2,V2>=0,V>=0,V2+Z5+1=A6,W5+Y5+1=V1] 
* CE 88: start(V1,V,V2,V3,V4,V5) = 1+ qsort(W5,X5):4
     [Y5>=0,X5>=0,W5>=4,V2>=0,V>=0,V2+Z5+1=A6,W5+Y5+1=V1] 
* CE 89: start(V1,V,V2,V3,V4,V5) = 0+ lt(W5,V,X5):1
     [V>=1,X5=2,W5=0,V1=0] 
* CE 90: start(V1,V,V2,V3,V4,V5) = 0+ lt(V1,W5,X5):2
     [V1>=1,X5=1,W5=0,V=0] 
* CE 91: start(V1,V,V2,V3,V4,V5) = 0+ lt(V1,V,W5):3
     [V>=0,V1>=0,W5=0] 
* CE 92: start(V1,V,V2,V3,V4,V5) = 0+ lt(V1,V,W5):4
     [V1>=V+1,V>=1,W5=1] 
* CE 93: start(V1,V,V2,V3,V4,V5) = 0+ lt(V1,V,W5):5
     [V>=V1+1,V1>=1,W5=2] 
* CE 94: start(V1,V,V2,V3,V4,V5) = 0+ append(W5,V,V):1
     [V>=0,W5=1,V1=1] 
* CE 95: start(V1,V,V2,V3,V4,V5) = 0+ append(V1,V,W5):2
     [V>=0,V1>=0,W5=0] 
* CE 96: start(V1,V,V2,V3,V4,V5) = 0+ append(V1,W5,X5):3
     [X5+1>=V1,V1>=2,X5+1=V1+W5,X5+1=V1+V] 
* CE 97: start(V1,V,V2,V3,V4,V5) = 0+ append(V1,V,W5):4
     [V1>=W5,W5>=1,V>=0] 
* CE 98: start(V1,V,V2,V3,V4,V5) = 0+ split(V1,V,W5):1
     [V>=0,V1>=0,W5=0] 
* CE 99: start(V1,V,V2,V3,V4,V5) = 0+ split(W5,X5,Y5):2
     [Y5>=5,Y5=X5+2,Y5=V+2,W5=0,V1=0] 
* CE 100: start(V1,V,V2,V3,V4,V5) = 0+ split(V1,W5,X5):3
     [V1>=0,X5=3,W5=1,V=1] 
* CE 101: start(V1,V,V2,V3,V4,V5) = 0+ split(V1,W5,X5):4
     [X5>=4,V1>=1,X5=W5+2,X5=V+2] 
* CE 102: start(V1,V,V2,V3,V4,V5) = 0+ fun(V1,W5,X5,V3,Y5):1
     [Y5>=V1+2,V3>=0,V1>=1,Y5=V1+X5+1,Y5=V1+V2+1,W5=0,V=0] 
* CE 103: start(V1,V,V2,V3,V4,V5) = 0+ fun(V1,V,V2,V3,W5):2
     [V3>=0,V2>=0,V>=0,V1>=0,W5=0] 
* CE 104: start(V1,V,V2,V3,V4,V5) = 0+ fun(W5,V,X5,V3,Y5):3
     [Y5>=2,V3>=0,V>=1,Y5=W5+1,Y5=V1+1,X5=0,V2=0] 
* CE 105: start(V1,V,V2,V3,V4,V5) = 0+ fun(V1,V,W5,V3,X5):4
     [X5>=V1+V+2,V3>=0,V>=1,V1>=1,X5=V1+W5+1,X5=V1+V2+1] 
* CE 106: start(V1,V,V2,V3,V4,V5) = 0+ fun(V1,V,W5,V3,X5):5
     [V1+V>=X5,X5>=V1+2,V3>=0,V1>=1,X5=V1+W5+1,X5=V1+V2+1] 
* CE 107: start(V1,V,V2,V3,V4,V5) = 0+ fun1(W5,V,V2,V3,V4,X5,Y5):1
     [Y5>=V2+V4+2,V4>=0,V3>=0,V2>=0,V>=0,Y5=V2+V4+X5+2,Y5=V2+V4+V5+2,W5=1,V1=1] 
* CE 108: start(V1,V,V2,V3,V4,V5) = 0+ fun1(W5,V,V2,V3,V4,X5,Y5):2
     [Y5>=V2+V4+2,V4>=0,V3>=0,V2>=0,V>=0,Y5=V2+V4+X5+2,Y5=V2+V4+V5+2,W5=2,V1=2] 
* CE 109: start(V1,V,V2,V3,V4,V5) = 0+ fun1(V1,V,V2,V3,V4,V5,W5):3
     [V5>=0,V4>=0,V3>=0,V2>=0,V>=0,V1>=0,W5=0] 
* CE 110: start(V1,V,V2,V3,V4,V5) = 0+ qsort(W5,X5):1
     [X5=1,W5=1,V1=1] 
* CE 111: start(V1,V,V2,V3,V4,V5) = 0+ qsort(V1,W5):2
     [V1>=0,W5=0] 
* CE 112: start(V1,V,V2,V3,V4,V5) = 0+ qsort(V1,W5):3
     [W5>=0,V1>=2] 
* CE 113: start(V1,V,V2,V3,V4,V5) = 0+ qsort(V1,W5):4
     [W5>=0,V1>=4] 

### Cost equations --> "Loop" of start/6 
* CEs [81,82,85,86,87,88,112,113] --> Loop 57 
* CEs [104] --> Loop 58 
* CEs [100] --> Loop 59 
* CEs [90,102] --> Loop 60 
* CEs [75,76,77] --> Loop 61 
* CEs [108] --> Loop 62 
* CEs [94,107,110] --> Loop 63 
* CEs [74,78,79,80,83,84,89,91,92,93,95,96,97,98,99,101,103,105,106,109,111] --> Loop 64 

#### Loops of start/6 
* Loop 57: start(V1,V,V2,V3,V4,V5) [V1>=2] 
* Loop 58: start(V1,V,V2,V3,V4,V5) [V3>=0,V>=1,V1>=1,V2=0] 
* Loop 59: start(V1,V,V2,V3,V4,V5) [V1>=0,V=1] 
* Loop 60: start(V1,V,V2,V3,V4,V5) [V1>=1,V=0] 
* Loop 61: start(V1,V,V2,V3,V4,V5) [V2>=0,V>=0,V1=3] 
* Loop 62: start(V1,V,V2,V3,V4,V5) [V5>=0,V4>=0,V3>=0,V2>=0,V>=0,V1=2] 
* Loop 63: start(V1,V,V2,V3,V4,V5) [V1=1] 
* Loop 64: start(V1,V,V2,V3,V4,V5) [V1>=0] 

### Ranking functions of CR start(V1,V,V2,V3,V4,V5) 

#### Partial ranking functions of CR start(V1,V,V2,V3,V4,V5) 


### Resulting Chains:start(V1,V,V2,V3,V4,V5) 
* [64]
* [63]
* [62]
* [61]
* [60]
* [59]
* [58]
* [57]...


### Merging Chains  start/6 into  External patterns of execution 
* [[63],[64]] --> 1 
* [[62]] --> 2 
* [[61]] --> 3 
* [[60]] --> 4 
* [[59]] --> 5 
* [[58]] --> 6 
* [[57]] --> 7 


Computing Bounds
=====================================

#### Cost of loops [20] 

 * loop 20:append(V1,V,Out) -> [append(V1',V',Out')] 
1
#### Cost of phase [20]:append(V1,V,Out) -> [append(V1',V',Out')] 
1*it(20)+0
  Such that:it(20) =< V1
it(20) =< V1-V1'

#### Cost of phase [20]:append(V1,V,Out) -> [append(V1',V',Out')] 
1*it(20)+0
  Such that:it(20) =< V1
it(20) =< V1-V1'

#### Cost of chains of append(V1,V,Out):
* Chain [[20],22]: 1*it(20)+1
  Such that:it(20) =< -V+Out

  with precondition: [V+V1=Out+1,V1>=2,V>=0] 

* Chain [[20],21]: 1*it(20)+0
  Such that:it(20) =< Out

  with precondition: [V>=0,Out>=1,V1>=Out] 

* Chain [22]: 1
  with precondition: [V1=1,V=Out,V>=0] 

* Chain [21]: 0
  with precondition: [Out=0,V1>=0,V>=0] 


#### Cost of chains of fun1(V1,V,V2,V3,V4,V5,Out):
* Chain [25]: 1
  with precondition: [V1=1,V2+V4+V5+2=Out,V>=0,V2>=0,V3>=0,V4>=0,V5>=0] 

* Chain [24]: 1
  with precondition: [V1=2,V2+V4+V5+2=Out,V>=0,V2>=0,V3>=0,V4>=0,V5>=0] 

* Chain [23]: 0
  with precondition: [Out=0,V1>=0,V>=0,V2>=0,V3>=0,V4>=0,V5>=0] 


#### Cost of loops [26] 

 * loop 26:lt(V1,V,Out) -> [lt(V1',V',Out')] 
1
#### Cost of phase [26]:lt(V1,V,Out) -> [lt(V1',V',Out')] 
1*it(26)+0
  Such that:it(26) =< V1
it(26) =< V1-V1'
it(26) =< V
it(26) =< V-V'

#### Cost of phase [26]:lt(V1,V,Out) -> [lt(V1',V',Out')] 
1*it(26)+0
  Such that:it(26) =< V1
it(26) =< V1-V1'
it(26) =< V
it(26) =< V-V'

#### Cost of phase [26]:lt(V1,V,Out) -> [lt(V1',V',Out')] 
1*it(26)+0
  Such that:it(26) =< V1
it(26) =< V1-V1'
it(26) =< V
it(26) =< V-V'

#### Cost of chains of lt(V1,V,Out):
* Chain [[26],29]: 1*it(26)+1
  Such that:it(26) =< V1

  with precondition: [Out=2,V1>=1,V>=V1+1] 

* Chain [[26],28]: 1*it(26)+1
  Such that:it(26) =< V

  with precondition: [Out=1,V>=1,V1>=V+1] 

* Chain [[26],27]: 1*it(26)+0
  Such that:it(26) =< V

  with precondition: [Out=0,V1>=1,V>=1] 

* Chain [29]: 1
  with precondition: [V1=0,Out=2,V>=1] 

* Chain [28]: 1
  with precondition: [V=0,Out=1,V1>=1] 

* Chain [27]: 0
  with precondition: [Out=0,V1>=0,V>=0] 


#### Cost of chains of fun(V1,V,V2,V3,Out):
* Chain [35]: 2*s(2)+1*s(4)+2
  Such that:s(4) =< V
aux(1) =< V2
s(2) =< aux(1)

  with precondition: [Out=0,V1>=0,V>=0,V2>=0,V3>=0] 

* Chain [34]: 3
  with precondition: [V=0,V1+V2+1=Out,V1>=1,V2>=1,V3>=0] 

* Chain [33]: 2
  with precondition: [V2=0,Out=0,V1>=1,V>=1,V3>=0] 

* Chain [32]: 3
  with precondition: [V2=0,V1+1=Out,V1>=1,V>=1,V3>=0] 

* Chain [31]: 1*s(5)+3
  Such that:s(5) =< V

  with precondition: [V1+V2+1=Out,V1>=1,V>=1,V3>=0,V2>=V+1] 

* Chain [30]: 1*s(6)+3
  Such that:s(6) =< V2

  with precondition: [V1+V2+1=Out,V1>=1,V2>=1,V3>=0,V>=V2+1] 


#### Cost of loops [40] 

 * loop 40:split(V1,V,Out) -> [split(V1',V',Out')] 
4
#### Cost of phase [40]:split(V1,V,Out) -> [split(V1',V',Out')] 
4*it(40)+0
  Such that:it(40) =< V
it(40) =< V-V'

#### Cost of loops [39] 

 * loop 39:split(V1,V,Out) -> [split(V1',V',Out')] 
1*s(13)+2*s(15)+3
  Such that:s(13) =< V1
s(14) =< V-V'
s(15) =< s(14)

#### Cost of phase [39]:split(V1,V,Out) -> [split(V1',V',Out')] 
3*it(39)+1*s(16)+2*s(17)+0
  Such that:aux(2) =< V1
it(39) =< V
s(18) =< V+2
aux(3) =< V-V'
it(39) =< aux(3)
s(18) =< aux(3)
s(16) =< it(39)*aux(2)
s(17) =< s(18)

#### Cost of loops [36,37,38] 

 * loop 36:split(V1,V,Out) -> [split(V1',V',Out')] 
1*s(20)+4
  Such that:s(20) =< V-V'

 * loop 37:split(V1,V,Out) -> [split(V1',V',Out')] 
1*s(22)+4
  Such that:s(22) =< V1'

 * loop 38:split(V1,V,Out) -> [split(V1',V',Out')] 
4
#### Cost of phase [36,37,38]:split(V1,V,Out) -> [split(V1',V',Out')] 
10*it(36)+4*it(37)+0
  Such that:it(37) =< -V1/3+V/3
it(37) =< -V1/3+V/3+V1'/3-V'/3
it(37) =< V/3
it(37) =< V/3-V'/3
aux(5) =< V
aux(6) =< V-V'
it(36) =< aux(5)
it(37) =< aux(5)
it(36) =< aux(6)
it(37) =< aux(6)

#### Cost of phase [39]:split(V1,V,Out) -> [split(V1',V',Out')] 
3*it(39)+1*s(16)+2*s(17)+0
  Such that:aux(2) =< V1
it(39) =< V
s(18) =< V+2
aux(3) =< V-V'
it(39) =< aux(3)
s(18) =< aux(3)
s(16) =< it(39)*aux(2)
s(17) =< s(18)

#### Cost of phase [39]:split(V1,V,Out) -> [split(V1',V',Out')] 
3*it(39)+1*s(16)+2*s(17)+0
  Such that:aux(2) =< V1
it(39) =< V
s(18) =< V+2
aux(3) =< V-V'
it(39) =< aux(3)
s(18) =< aux(3)
s(16) =< it(39)*aux(2)
s(17) =< s(18)

#### Cost of phase [39]:split(V1,V,Out) -> [split(V1',V',Out')] 
3*it(39)+1*s(16)+2*s(17)+0
  Such that:aux(2) =< V1
it(39) =< V
s(18) =< V+2
aux(3) =< V-V'
it(39) =< aux(3)
s(18) =< aux(3)
s(16) =< it(39)*aux(2)
s(17) =< s(18)

#### Cost of chains of split(V1,V,Out):
* Chain [[40],42]: 4*it(40)+1
  Such that:it(40) =< Out

  with precondition: [V1=0,Out=V+2,Out>=5] 

* Chain [[39],[40],42]: 3*it(39)+6*it(40)+1
  Such that:it(39) =< V
aux(4) =< V+2
it(40) =< aux(4)
it(39) =< aux(4)

  with precondition: [V1=0,Out=0,V>=4] 

* Chain [[39],[36,37,38],42]: 12*it(36)+4*it(37)+3*it(39)+1*s(16)+1
  Such that:aux(2) =< V1
it(37) =< -V1/3+V/3
it(39) =< V
aux(8) =< V+2
it(37) =< aux(8)
it(36) =< aux(8)
it(39) =< aux(8)
s(16) =< it(39)*aux(2)

  with precondition: [Out=0,V1>=1,V>=3] 

* Chain [[39],42]: 3*it(39)+1*s(16)+2*s(17)+1
  Such that:aux(2) =< V1
s(18) =< V+2
aux(9) =< V
it(39) =< aux(9)
s(18) =< aux(9)
s(16) =< it(39)*aux(2)
s(17) =< s(18)

  with precondition: [Out=0,V1>=0,V>=2] 

* Chain [[39],41]: 3*it(39)+1*s(16)+2*s(17)+0
  Such that:aux(2) =< V1
s(18) =< V+2
aux(10) =< V
it(39) =< aux(10)
s(18) =< aux(10)
s(16) =< it(39)*aux(2)
s(17) =< s(18)

  with precondition: [Out=0,V1>=0,V>=1] 

* Chain [[36,37,38],42]: 10*it(36)+4*it(37)+1
  Such that:it(37) =< -V1/3+V/3
it(37) =< Out/3
aux(7) =< Out
it(36) =< aux(7)
it(37) =< aux(7)

  with precondition: [Out=V+2,V1>=1,Out>=4] 

* Chain [42]: 1
  with precondition: [V=1,Out=3,V1>=0] 

* Chain [41]: 0
  with precondition: [Out=0,V1>=0,V>=0] 


#### Cost of loops [47,48,51,54] 

 * loop 47:qsort(V1,Out) -> [qsort(V1',Out'),qsort(V1'2,Out'2)] 
1*s(62)+3
 * loop 48:qsort(V1,Out) -> [qsort(V1',Out'),qsort(V1'2,Out'2)] 
1*s(64)+4
 * loop 51:qsort(V1,Out) -> [qsort(V1',Out'),qsort(V1'2,Out'2)] 
4
 * loop 54:qsort(V1,Out) -> [qsort(V1',Out'),qsort(V1'2,Out'2)] 
3
#### Cost of phase [47,48,51,54]:qsort(V1,Out) -> [] 
30*it(47)+3*it([55])+2*s(65)+4*s(67)+6*s(68)+2*s(70)+4*s(71)+22*s(72)+1*s(73)+4*s(74)+0
  Such that:aux(19) =< 1
aux(20) =< V1+1
aux(23) =< V1
it(47) =< aux(23)
aux(17) =< aux(23)+1
s(78) =< aux(23)* (1/3)
s(75) =< it(47)+it(47)+it(47)+it(47)+aux(20)
it([55]) =< it(47)+it(47)+it(47)+it(47)+aux(19)
s(75) =< it([55])*aux(17)
s(72) =< s(75)
s(67) =< s(78)
s(74) =< s(78)
s(74) =< aux(23)
s(76) =< aux(23)
s(47) =< aux(23)
s(76) =< s(75)
s(47) =< aux(17)
s(68) =< aux(23)
s(70) =< it(47)*s(47)
s(71) =< s(76)
s(67) =< s(75)
s(68) =< s(75)
s(73) =< s(68)*s(47)

#### Cost of loops [43,44,45,46,49,50,52,53] 

 * loop 43:qsort(V1,Out) -> [qsort(V1',Out'),qsort(V1'2,Out'2)] 
4*s(83)+10*s(85)+1*s(86)+3
  Such that:s(83) =< -V1/3+2/3*V1'+2/3*V1'2
s(84) =< V1'+V1'2+1
s(83) =< V1'/3+V1'2/3+1/3
s(85) =< s(84)
s(83) =< s(84)

 * loop 44:qsort(V1,Out) -> [qsort(V1',Out'),qsort(V1'2,Out'2)] 
4*s(91)+10*s(93)+1*s(94)+4
  Such that:s(91) =< -V1/3+2/3*V1'+2/3*V1'2
s(92) =< V1'+V1'2+1
s(91) =< V1'/3+V1'2/3+1/3
s(93) =< s(92)
s(91) =< s(92)

 * loop 45:qsort(V1,Out) -> [qsort(V1',Out'),qsort(V1'2,Out'2)] 
4*s(97)+1*s(98)+3
  Such that:s(97) =< V1+1

 * loop 46:qsort(V1,Out) -> [qsort(V1',Out'),qsort(V1'2,Out'2)] 
4*s(101)+1*s(102)+4
  Such that:s(101) =< V1+1

 * loop 49:qsort(V1,Out) -> [qsort(V1',Out'),qsort(V1'2,Out'2)] 
4*s(106)+10*s(108)+4
  Such that:s(106) =< -V1/3+2/3*V1'+2/3*V1'2
s(107) =< V1'+V1'2+1
s(106) =< V1'/3+V1'2/3+1/3
s(108) =< s(107)
s(106) =< s(107)

 * loop 50:qsort(V1,Out) -> [qsort(V1',Out'),qsort(V1'2,Out'2)] 
4*s(110)+4
  Such that:s(110) =< V1'+V1'2+1

 * loop 52:qsort(V1,Out) -> [qsort(V1',Out'),qsort(V1'2,Out'2)] 
4*s(114)+10*s(116)+3
  Such that:s(114) =< -V1/3+2/3*V1'+2/3*V1'2
s(115) =< V1'+V1'2+1
s(114) =< V1'/3+V1'2/3+1/3
s(116) =< s(115)
s(114) =< s(115)

 * loop 53:qsort(V1,Out) -> [qsort(V1',Out'),qsort(V1'2,Out'2)] 
4*s(118)+3
  Such that:s(118) =< V1'+V1'2+1

#### Cost of phase [43,44,45,46,49,50,52,53]:qsort(V1,Out) -> [] 
14*it(43)+14*it(45)+3*it([55])+4*s(67)+6*s(68)+16*s(69)+2*s(70)+4*s(71)+22*s(72)+1*s(73)+4*s(74)+16*s(119)+40*s(120)+6*s(121)+16*s(127)+30*s(139)+3*s(140)+4*s(142)+6*s(143)+2*s(144)+4*s(145)+22*s(146)+1*s(147)+4*s(148)+0
  Such that:aux(16) =< V1
aux(46) =< V1/3+1/3
aux(51) =< V1+1
aux(52) =< V1/2
aux(53) =< 2/5*V1
it(45) =< aux(52)
it(43) =< aux(53)
aux(30) =< aux(16)+1
aux(23) =< aux(16)
aux(24) =< aux(16)* (1/3)-2/3
aux(17) =< aux(16)+1
it([55]) =< it(45)+it(45)+it(45)+it(45)+aux(51)
s(154) =< it(45)+it(45)+it(45)+it(45)+aux(51)
s(151) =< it(45)+it(45)+it(45)+it(45)+aux(51)
s(153) =< it(45)* (1/3)+it(45)* (1/3)+it(45)* (1/3)+it(45)* (1/3)+aux(46)
aux(45) =< it(45)+it(45)+it(45)+it(45)+aux(51)
it([multiple([47,48,51,54],[[],[56],[55]])]) =< it(45)+it(45)+it(45)+it(45)+aux(51)
s(75) =< it(45)+it(45)+it(45)+it(45)+aux(51)
s(154) =< it([multiple([47,48,51,54],[[],[56],[55]])])*aux(30)
s(151) =< it([multiple([47,48,51,54],[[],[56],[55]])])*aux(23)
aux(45) =< it([55])*aux(23)
s(75) =< it([55])*aux(30)
s(127) =< it(45)*aux(30)
aux(26) =< it(43)*aux(23)
s(119) =< it(43)*aux(24)
s(78) =< aux(45)* (1/3)
s(119) =< aux(26)* (1/3)
s(72) =< s(75)
s(67) =< s(78)
s(74) =< s(78)
s(69) =< aux(45)
s(74) =< aux(45)
s(76) =< aux(45)
s(47) =< aux(16)
s(76) =< s(75)
s(47) =< aux(17)
s(68) =< aux(45)
s(70) =< s(69)*s(47)
s(71) =< s(76)
s(67) =< s(75)
s(68) =< s(75)
s(73) =< s(68)*s(47)
s(139) =< s(151)
aux(17) =< aux(23)+1
s(152) =< s(151)* (1/3)
s(149) =< s(139)+s(139)+s(139)+s(139)+s(154)
s(140) =< s(139)+s(139)+s(139)+s(139)+s(153)
s(149) =< s(140)*aux(17)
s(146) =< s(149)
s(142) =< s(152)
s(148) =< s(152)
s(148) =< s(151)
s(150) =< s(151)
s(47) =< aux(23)
s(150) =< s(149)
s(143) =< s(151)
s(144) =< s(139)*s(47)
s(145) =< s(150)
s(142) =< s(149)
s(143) =< s(149)
s(147) =< s(143)*s(47)
s(120) =< aux(26)
s(119) =< aux(26)

#### Cost of chains of qsort(V1,Out):
* Chain [multiple([47,48,51,54],[[],[56],[55]])]...: 30*it(47)+3*it([55])+2*s(65)+4*s(67)+6*s(68)+2*s(70)+4*s(71)+22*s(72)+1*s(73)+4*s(74)+0
  Such that:aux(19) =< 1
aux(20) =< V1+1
aux(23) =< V1
it(47) =< aux(23)
aux(17) =< aux(23)+1
s(78) =< aux(23)* (1/3)
s(75) =< it(47)+it(47)+it(47)+it(47)+aux(20)
it([55]) =< it(47)+it(47)+it(47)+it(47)+aux(19)
s(75) =< it([55])*aux(17)
s(72) =< s(75)
s(67) =< s(78)
s(74) =< s(78)
s(74) =< aux(23)
s(76) =< aux(23)
s(47) =< aux(23)
s(76) =< s(75)
s(47) =< aux(17)
s(68) =< aux(23)
s(70) =< it(47)*s(47)
s(71) =< s(76)
s(67) =< s(75)
s(68) =< s(75)
s(73) =< s(68)*s(47)

  with precondition: [V1>=2,Out>=0] 

* Chain [multiple([43,44,45,46,49,50,52,53],[[],[multiple([47,48,51,54],[[],[56],[55]])],[56],[55]])]...: 14*it(43)+14*it(45)+3*it([55])+4*s(67)+6*s(68)+16*s(69)+2*s(70)+4*s(71)+22*s(72)+1*s(73)+4*s(74)+16*s(119)+40*s(120)+6*s(121)+16*s(127)+30*s(139)+3*s(140)+4*s(142)+6*s(143)+2*s(144)+4*s(145)+22*s(146)+1*s(147)+4*s(148)+0
  Such that:aux(16) =< V1
aux(46) =< V1/3+1/3
aux(51) =< V1+1
aux(52) =< V1/2
aux(53) =< 2/5*V1
it(45) =< aux(52)
it(43) =< aux(53)
aux(30) =< aux(16)+1
aux(23) =< aux(16)
aux(24) =< aux(16)* (1/3)-2/3
aux(17) =< aux(16)+1
it([55]) =< it(45)+it(45)+it(45)+it(45)+aux(51)
s(154) =< it(45)+it(45)+it(45)+it(45)+aux(51)
s(151) =< it(45)+it(45)+it(45)+it(45)+aux(51)
s(153) =< it(45)* (1/3)+it(45)* (1/3)+it(45)* (1/3)+it(45)* (1/3)+aux(46)
aux(45) =< it(45)+it(45)+it(45)+it(45)+aux(51)
it([multiple([47,48,51,54],[[],[56],[55]])]) =< it(45)+it(45)+it(45)+it(45)+aux(51)
s(75) =< it(45)+it(45)+it(45)+it(45)+aux(51)
s(154) =< it([multiple([47,48,51,54],[[],[56],[55]])])*aux(30)
s(151) =< it([multiple([47,48,51,54],[[],[56],[55]])])*aux(23)
aux(45) =< it([55])*aux(23)
s(75) =< it([55])*aux(30)
s(127) =< it(45)*aux(30)
aux(26) =< it(43)*aux(23)
s(119) =< it(43)*aux(24)
s(78) =< aux(45)* (1/3)
s(119) =< aux(26)* (1/3)
s(72) =< s(75)
s(67) =< s(78)
s(74) =< s(78)
s(69) =< aux(45)
s(74) =< aux(45)
s(76) =< aux(45)
s(47) =< aux(16)
s(76) =< s(75)
s(47) =< aux(17)
s(68) =< aux(45)
s(70) =< s(69)*s(47)
s(71) =< s(76)
s(67) =< s(75)
s(68) =< s(75)
s(73) =< s(68)*s(47)
s(139) =< s(151)
aux(17) =< aux(23)+1
s(152) =< s(151)* (1/3)
s(149) =< s(139)+s(139)+s(139)+s(139)+s(154)
s(140) =< s(139)+s(139)+s(139)+s(139)+s(153)
s(149) =< s(140)*aux(17)
s(146) =< s(149)
s(142) =< s(152)
s(148) =< s(152)
s(148) =< s(151)
s(150) =< s(151)
s(47) =< aux(23)
s(150) =< s(149)
s(143) =< s(151)
s(144) =< s(139)*s(47)
s(145) =< s(150)
s(142) =< s(149)
s(143) =< s(149)
s(147) =< s(143)*s(47)
s(120) =< aux(26)
s(119) =< aux(26)

  with precondition: [V1>=4,Out>=0] 

* Chain [56]: 1
  with precondition: [V1=1,Out=1] 

* Chain [55]: 4*s(46)+6*s(50)+16*s(52)+2*s(53)+4*s(54)+22*s(55)+1*s(56)+4*s(58)+2
  Such that:aux(16) =< V1
aux(17) =< V1+1
aux(18) =< V1/3
s(55) =< aux(17)
s(46) =< aux(18)
s(58) =< aux(18)
s(52) =< aux(16)
s(58) =< aux(16)
s(47) =< aux(16)
s(47) =< aux(17)
s(50) =< aux(16)
s(53) =< s(52)*s(47)
s(54) =< s(47)
s(46) =< aux(17)
s(50) =< aux(17)
s(56) =< s(50)*s(47)

  with precondition: [Out=0,V1>=0] 


#### Cost of chains of start(V1,V,V2,V3,V4,V5):
* Chain [64]: 279*s(158)+36*s(159)+15*s(164)+1*s(191)+8*s(208)+44*s(219)+16*s(220)+4*s(225)+8*s(226)+2*s(227)+10*s(228)+4*s(233)+6*s(237)+2*s(240)+4*s(241)+32*s(242)+1*s(243)+4*s(245)+3*s(250)+4*s(257)+5
  Such that:s(191) =< 1
s(245) =< V/3+2/3
aux(59) =< V1
aux(60) =< V1+1
aux(61) =< -V1/3+V/3
aux(62) =< V1/3
aux(63) =< V
aux(64) =< V+2
aux(65) =< V2
s(158) =< aux(59)
s(233) =< aux(61)
s(245) =< aux(61)
s(206) =< aux(62)
s(228) =< aux(63)
s(242) =< aux(64)
s(250) =< aux(65)
s(159) =< aux(62)
s(159) =< aux(59)
s(164) =< s(158)*aux(59)
s(237) =< aux(63)
s(238) =< aux(64)
s(238) =< aux(63)
s(240) =< s(228)*aux(59)
s(241) =< s(238)
s(233) =< aux(64)
s(237) =< aux(64)
s(243) =< s(237)*aux(59)
s(219) =< aux(60)
s(257) =< aux(62)
s(223) =< aux(59)
s(223) =< aux(60)
s(220) =< aux(59)
s(225) =< s(158)*s(223)
s(226) =< s(223)
s(257) =< aux(60)
s(220) =< aux(60)
s(227) =< s(220)*s(223)
s(206) =< aux(59)
s(208) =< s(206)
s(208) =< aux(59)
s(245) =< aux(64)

  with precondition: [V1>=0] 

* Chain [63]: 1
  with precondition: [V1=1] 

* Chain [62]: 1
  with precondition: [V1=2,V>=0,V2>=0,V3>=0,V4>=0,V5>=0] 

* Chain [61]: 5
  with precondition: [V1=3,V>=0,V2>=0] 

* Chain [60]: 3
  with precondition: [V=0,V1>=1] 

* Chain [59]: 1
  with precondition: [V=1,V1>=0] 

* Chain [58]: 3
  with precondition: [V2=0,V1>=1,V>=1,V3>=0] 

* Chain [57]...: 202*s(269)+12*s(273)+66*s(274)+12*s(275)+16*s(276)+18*s(279)+8*s(280)+12*s(281)+3*s(282)+32*s(283)+42*s(289)+42*s(290)+6*s(295)+48*s(302)+48*s(304)+44*s(306)+8*s(307)+8*s(308)+32*s(309)+12*s(312)+4*s(313)+8*s(314)+2*s(315)+60*s(316)+6*s(319)+44*s(320)+8*s(321)+8*s(322)+12*s(324)+4*s(325)+8*s(326)+2*s(327)+120*s(328)+22*s(333)+10*s(334)+2*s(339)+4*s(340)+1*s(341)+8*s(364)+3*s(369)+14*s(378)+3*s(383)+16*s(390)+16*s(392)+22*s(394)+4*s(395)+4*s(396)+16*s(397)+6*s(400)+2*s(401)+4*s(402)+1*s(403)+30*s(404)+3*s(407)+22*s(408)+4*s(409)+4*s(410)+6*s(412)+2*s(413)+4*s(414)+1*s(415)+40*s(416)+22*s(490)+4*s(491)+6*s(495)+4*s(497)+1*s(498)+3*s(511)+22*s(522)+4*s(523)+4*s(524)+16*s(525)+6*s(528)+2*s(529)+4*s(530)+1*s(531)+30*s(532)+3*s(535)+22*s(536)+4*s(537)+4*s(538)+6*s(540)+2*s(541)+4*s(542)+1*s(543)+3
  Such that:aux(71) =< 2*V1
s(501) =< V1/3+1/3
aux(74) =< 1
aux(75) =< V1
aux(76) =< V1+1
aux(77) =< V1/2
aux(78) =< V1/3
aux(79) =< 2/5*V1
s(269) =< aux(75)
s(270) =< aux(75)+1
s(271) =< aux(75)* (1/3)
s(272) =< s(269)+s(269)+s(269)+s(269)+aux(75)
s(273) =< s(269)+s(269)+s(269)+s(269)+aux(74)
s(272) =< s(273)*s(270)
s(274) =< s(272)
s(275) =< s(271)
s(276) =< s(271)
s(276) =< aux(75)
s(277) =< aux(75)
s(278) =< aux(75)
s(277) =< s(272)
s(278) =< s(270)
s(279) =< aux(75)
s(280) =< s(269)*s(278)
s(281) =< s(277)
s(275) =< s(272)
s(279) =< s(272)
s(282) =< s(279)*s(278)
s(333) =< aux(76)
s(334) =< aux(75)
s(337) =< aux(75)
s(337) =< aux(76)
s(339) =< s(269)*s(337)
s(340) =< s(337)
s(334) =< aux(76)
s(341) =< s(334)*s(337)
s(488) =< s(269)+s(269)+s(269)+s(269)+aux(76)
s(488) =< s(273)*s(270)
s(490) =< s(488)
s(491) =< s(271)
s(493) =< aux(75)
s(493) =< s(488)
s(495) =< aux(75)
s(497) =< s(493)
s(491) =< s(488)
s(495) =< s(488)
s(498) =< s(495)*s(278)
s(362) =< aux(75)
s(362) =< aux(71)
s(378) =< aux(71)
s(292) =< aux(75)
s(293) =< aux(75)* (1/3)-2/3
s(294) =< aux(75)+1
s(383) =< s(269)+s(269)+s(269)+s(269)+aux(76)
s(384) =< s(269)+s(269)+s(269)+s(269)+aux(76)
s(385) =< s(269)+s(269)+s(269)+s(269)+aux(76)
s(386) =< s(269)* (1/3)+s(269)* (1/3)+s(269)* (1/3)+s(269)* (1/3)+aux(76)
s(387) =< s(269)+s(269)+s(269)+s(269)+aux(76)
s(388) =< s(269)+s(269)+s(269)+s(269)+aux(76)
s(389) =< s(269)+s(269)+s(269)+s(269)+aux(76)
s(384) =< s(388)*s(270)
s(385) =< s(388)*s(292)
s(387) =< s(383)*s(292)
s(389) =< s(383)*s(270)
s(390) =< s(269)*s(270)
s(391) =< s(378)*s(292)
s(392) =< s(378)*s(293)
s(393) =< s(387)* (1/3)
s(392) =< s(391)* (1/3)
s(394) =< s(389)
s(395) =< s(393)
s(396) =< s(393)
s(397) =< s(387)
s(396) =< s(387)
s(398) =< s(387)
s(311) =< aux(75)
s(398) =< s(389)
s(311) =< s(294)
s(400) =< s(387)
s(401) =< s(397)*s(311)
s(402) =< s(398)
s(395) =< s(389)
s(400) =< s(389)
s(403) =< s(400)*s(311)
s(404) =< s(385)
s(294) =< s(292)+1
s(405) =< s(385)* (1/3)
s(406) =< s(404)+s(404)+s(404)+s(404)+s(384)
s(407) =< s(404)+s(404)+s(404)+s(404)+s(386)
s(406) =< s(407)*s(294)
s(408) =< s(406)
s(409) =< s(405)
s(410) =< s(405)
s(410) =< s(385)
s(411) =< s(385)
s(311) =< s(292)
s(411) =< s(406)
s(412) =< s(385)
s(413) =< s(404)*s(311)
s(414) =< s(411)
s(409) =< s(406)
s(412) =< s(406)
s(415) =< s(412)*s(311)
s(416) =< s(391)
s(392) =< s(391)
s(364) =< s(362)
s(364) =< aux(75)
s(369) =< s(269)*aux(75)
s(289) =< aux(77)
s(290) =< aux(79)
s(511) =< s(289)+s(289)+s(289)+s(289)+aux(76)
s(512) =< s(289)+s(289)+s(289)+s(289)+aux(76)
s(513) =< s(289)+s(289)+s(289)+s(289)+aux(76)
s(514) =< s(289)* (1/3)+s(289)* (1/3)+s(289)* (1/3)+s(289)* (1/3)+s(501)
s(515) =< s(289)+s(289)+s(289)+s(289)+aux(76)
s(516) =< s(289)+s(289)+s(289)+s(289)+aux(76)
s(517) =< s(289)+s(289)+s(289)+s(289)+aux(76)
s(512) =< s(516)*s(270)
s(513) =< s(516)*s(292)
s(515) =< s(511)*s(292)
s(517) =< s(511)*s(270)
s(302) =< s(289)*s(270)
s(303) =< s(290)*s(292)
s(304) =< s(290)*s(293)
s(521) =< s(515)* (1/3)
s(304) =< s(303)* (1/3)
s(522) =< s(517)
s(523) =< s(521)
s(524) =< s(521)
s(525) =< s(515)
s(524) =< s(515)
s(526) =< s(515)
s(526) =< s(517)
s(528) =< s(515)
s(529) =< s(525)*s(311)
s(530) =< s(526)
s(523) =< s(517)
s(528) =< s(517)
s(531) =< s(528)*s(311)
s(532) =< s(513)
s(533) =< s(513)* (1/3)
s(534) =< s(532)+s(532)+s(532)+s(532)+s(512)
s(535) =< s(532)+s(532)+s(532)+s(532)+s(514)
s(534) =< s(535)*s(294)
s(536) =< s(534)
s(537) =< s(533)
s(538) =< s(533)
s(538) =< s(513)
s(539) =< s(513)
s(539) =< s(534)
s(540) =< s(513)
s(541) =< s(532)*s(311)
s(542) =< s(539)
s(537) =< s(534)
s(540) =< s(534)
s(543) =< s(540)*s(311)
s(328) =< s(303)
s(304) =< s(303)
s(295) =< s(289)+s(289)+s(289)+s(289)+aux(75)
s(296) =< s(289)+s(289)+s(289)+s(289)+aux(75)
s(297) =< s(289)+s(289)+s(289)+s(289)+aux(75)
s(298) =< s(289)* (1/3)+s(289)* (1/3)+s(289)* (1/3)+s(289)* (1/3)+aux(78)
s(299) =< s(289)+s(289)+s(289)+s(289)+aux(75)
s(300) =< s(289)+s(289)+s(289)+s(289)+aux(75)
s(301) =< s(289)+s(289)+s(289)+s(289)+aux(75)
s(296) =< s(300)*s(270)
s(297) =< s(300)*s(292)
s(299) =< s(295)*s(292)
s(301) =< s(295)*s(270)
s(305) =< s(299)* (1/3)
s(306) =< s(301)
s(307) =< s(305)
s(308) =< s(305)
s(309) =< s(299)
s(308) =< s(299)
s(310) =< s(299)
s(310) =< s(301)
s(312) =< s(299)
s(313) =< s(309)*s(311)
s(314) =< s(310)
s(307) =< s(301)
s(312) =< s(301)
s(315) =< s(312)*s(311)
s(316) =< s(297)
s(317) =< s(297)* (1/3)
s(318) =< s(316)+s(316)+s(316)+s(316)+s(296)
s(319) =< s(316)+s(316)+s(316)+s(316)+s(298)
s(318) =< s(319)*s(294)
s(320) =< s(318)
s(321) =< s(317)
s(322) =< s(317)
s(322) =< s(297)
s(323) =< s(297)
s(323) =< s(318)
s(324) =< s(297)
s(325) =< s(316)*s(311)
s(326) =< s(323)
s(321) =< s(318)
s(324) =< s(318)
s(327) =< s(324)*s(311)

  with precondition: [V1>=2] 


Closed-form bounds of start(V1,V,V2,V3,V4,V5): 
-------------------------------------
* Chain [64] with precondition: [V1>=0] 
    - Upper bound: 303*V1+6+21*V1*V1+3*V1*nat(V)+nat(V)*16+nat(V2)*3+ (44*V1+44)+nat(V+2)*36+nat(V/3+2/3)*4+nat(-V1/3+V/3)*4+16*V1 
    - Complexity: n^2 
* Chain [63] with precondition: [V1=1] 
    - Upper bound: 1 
    - Complexity: constant 
* Chain [62] with precondition: [V1=2,V>=0,V2>=0,V3>=0,V4>=0,V5>=0] 
    - Upper bound: 1 
    - Complexity: constant 
* Chain [61] with precondition: [V1=3,V>=0,V2>=0] 
    - Upper bound: 5 
    - Complexity: constant 
* Chain [60] with precondition: [V=0,V1>=1] 
    - Upper bound: 3 
    - Complexity: constant 
* Chain [59] with precondition: [V=1,V1>=0] 
    - Upper bound: 1 
    - Complexity: constant 
* Chain [58] with precondition: [V2=0,V1>=1,V>=1,V3>=0] 
    - Upper bound: 3 
    - Complexity: constant 
* Chain [57]... with precondition: [V1>=2] 
    - Upper bound: inf 
    - Complexity: infinity 

### Maximum cost of start(V1,V,V2,V3,V4,V5): inf 
Asymptotic class: infinity 

Time statistics: 
-------------------------------------
* Partial evaluation computed in 26 ms.
* Invariants computed in 101 ms.
   - Backward Invariants 28 ms.
   - Transitive Invariants 21 ms.
* Refinement performed in 274 ms.
* Termination proved in 31 ms.
* Upper bounds computed in 882 ms.
   - Equation cost structures 582 ms.
   - Phase cost structures 231 ms.
   - Chain cost structures 36 ms.
   - Solving cost expressions 46 ms.
* Total analysis performed in 1362 ms.



Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. recursive  : [inc/2]
1. non_recursive  : [isEmpty/2]
2. non_recursive  : [left/2]
3. non_recursive  : [right/2]
4. recursive  : [count/3,if/7]
5. non_recursive  : [nrOfNodes/2]
6. non_recursive  : [start/6]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into inc/2
1. SCC is partially evaluated into isEmpty/2
2. SCC is partially evaluated into left/2
3. SCC is partially evaluated into right/2
4. SCC is partially evaluated into count/3
5. SCC is completely evaluated into other SCCs
6. SCC is partially evaluated into start/6

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations inc/2 
* CE 21 is refined into CE [22] 
* CE 20 is refined into CE [23] 


#### Refined cost equations inc/2 
* CE 22: inc(V,Out) = 1+ inc(W,X)
     [W>=0,X+1=Out,W+1=V] 
* CE 23: inc(V,Out) = 1
     [Out=1,V=0] 

### Cost equations --> "Loop" of inc/2 
* CEs [23] --> Loop 14 
* CEs [22] --> Loop 15 

#### Loops of inc/2 
* Loop 14: inc(V,Out) [Out=1,V=0] 
* Loop 15: inc(V,Out)->  inc(V',Out')
                  [V'>=0,Out=Out'+1,V'+1=V] 

### Ranking functions of CR inc(V,Out) 
* RF of phase [15]: [V]

#### Partial ranking functions of CR inc(V,Out) 
* Partial RF of phase [15]:
  - RF of loop [15:1]:
    V


### Resulting Chains:inc(V,Out) 
* [[15],14]
* [14]


### Merging Chains  inc/2 into  External patterns of execution 
* [[14]] --> 1 
* [[14,[15]]] --> 2 


### Specialization of cost equations isEmpty/2 
* CE 15 is refined into CE [24] 
* CE 14 is refined into CE [25] 


#### Refined cost equations isEmpty/2 
* CE 24: isEmpty(V,Out) = 1
     [V>=1,Out=0] 
* CE 25: isEmpty(V,Out) = 1
     [Out=1,V=0] 

### Cost equations --> "Loop" of isEmpty/2 
* CEs [24] --> Loop 16 
* CEs [25] --> Loop 17 

#### Loops of isEmpty/2 
* Loop 16: isEmpty(V,Out) [V>=1,Out=0] 
* Loop 17: isEmpty(V,Out) [Out=1,V=0] 

### Ranking functions of CR isEmpty(V,Out) 

#### Partial ranking functions of CR isEmpty(V,Out) 


### Resulting Chains:isEmpty(V,Out) 
* [17]
* [16]


### Merging Chains  isEmpty/2 into  External patterns of execution 
* [[17]] --> 1 
* [[16]] --> 2 


### Specialization of cost equations left/2 
* CE 17 is refined into CE [26] 
* CE 16 is refined into CE [27] 


#### Refined cost equations left/2 
* CE 26: left(V,Out) = 1
     [V>=Out+1,Out>=0] 
* CE 27: left(V,Out) = 1
     [Out=0,V=0] 

### Cost equations --> "Loop" of left/2 
* CEs [26] --> Loop 18 
* CEs [27] --> Loop 19 

#### Loops of left/2 
* Loop 18: left(V,Out) [V>=Out+1,Out>=0] 
* Loop 19: left(V,Out) [Out=0,V=0] 

### Ranking functions of CR left(V,Out) 

#### Partial ranking functions of CR left(V,Out) 


### Resulting Chains:left(V,Out) 
* [19]
* [18]


### Merging Chains  left/2 into  External patterns of execution 
* [[19]] --> 1 
* [[18]] --> 2 


### Specialization of cost equations right/2 
* CE 19 is refined into CE [28] 
* CE 18 is refined into CE [29] 


#### Refined cost equations right/2 
* CE 28: right(V,Out) = 1
     [V>=Out+1,Out>=0] 
* CE 29: right(V,Out) = 1
     [Out=0,V=0] 

### Cost equations --> "Loop" of right/2 
* CEs [28] --> Loop 20 
* CEs [29] --> Loop 21 

#### Loops of right/2 
* Loop 20: right(V,Out) [V>=Out+1,Out>=0] 
* Loop 21: right(V,Out) [Out=0,V=0] 

### Ranking functions of CR right(V,Out) 

#### Partial ranking functions of CR right(V,Out) 


### Resulting Chains:right(V,Out) 
* [21]
* [20]


### Merging Chains  right/2 into  External patterns of execution 
* [[21]] --> 1 
* [[20]] --> 2 


### Specialization of cost equations count/3 
* CE 13 is refined into CE [30,31] 
* CE 11 is refined into CE [32,33,34,35,36,37,38,39] 
* CE 12 is refined into CE [40,41,42,43,44,45,46,47] 


#### Refined cost equations count/3 
* CE 30: count(V,V8,Out) = 2+ isEmpty(W8,X8):1+ left(Y8,Z8):1+ isEmpty(A9,B9):1+ right(C9,D9):1+ left(E9,F9):1+ left(G9,H9):1+ left(I9,J9):1+ right(K9,L9):1+ right(M9,N9):1+ inc(O9,P9):1
     [P9=1,O9=0,N9=0,M9=0,L9=0,K9=0,J9=0,I9=0,H9=0,G9=0,F9=0,E9=0,D9=0,C9=0,B9=1,A9=0,Z8=0,Y8=0,X8=1,W8=0,Out=0,V8=0,V=0] 
* CE 31: count(V,V8,Out) = 2+ isEmpty(W8,X8):1+ left(Y8,Z8):1+ isEmpty(A9,B9):1+ right(C9,D9):1+ left(E9,F9):1+ left(G9,H9):1+ left(I9,J9):1+ right(K9,L9):1+ right(M9,N9):1+ inc(O9,P9):2
     [P9>=2,P9=O9+1,P9=Out+1,P9=V8+1,N9=0,M9=0,L9=0,K9=0,J9=0,I9=0,H9=0,G9=0,F9=0,E9=0,D9=0,C9=0,B9=1,A9=0,Z8=0,Y8=0,X8=1,W8=0,V=0] 
* CE 32: count(V,V8,Out) = 2+ isEmpty(V,W8):2+ left(V,X8):2+ isEmpty(Y8,Z8):1+ right(V,A9):2+ left(V,B9):2+ left(C9,D9):1+ left(V,E9):2+ right(F9,G9):1+ right(V,H9):2+ inc(I9,J9):1+ count(A9,K9,Out)
     [V>=H9+1,V>=A9+1,H9>=0,A9>=0,K9=1,J9=1,I9=0,G9=0,F9=0,E9=0,D9=0,C9=0,B9=0,Z8=1,Y8=0,X8=0,W8=0,V8=0] 
* CE 33: count(V,V8,Out) = 2+ isEmpty(V,W8):2+ left(V,X8):2+ isEmpty(Y8,Z8):1+ right(V,A9):2+ left(V,B9):2+ left(C9,D9):1+ left(V,E9):2+ right(F9,G9):1+ right(V,H9):2+ inc(I9,J9):2+ count(A9,J9,Out)
     [V>=H9+1,V>=A9+1,J9>=2,H9>=0,A9>=0,J9=I9+1,J9=V8+1,G9=0,F9=0,E9=0,D9=0,C9=0,B9=0,Z8=1,Y8=0,X8=0,W8=0] 
* CE 34: count(V,V8,Out) = 2+ isEmpty(V,W8):2+ left(V,X8):2+ isEmpty(Y8,Z8):1+ right(V,A9):2+ left(V,B9):2+ left(C9,D9):1+ left(V,E9):2+ right(E9,F9):2+ right(V,G9):2+ inc(H9,I9):1+ count(A9,J9,Out)
     [V>=G9+1,E9>=F9+1,V>=E9+1,V>=A9+1,G9>=0,F9>=0,A9>=0,J9=1,I9=1,H9=0,D9=0,C9=0,B9=0,Z8=1,Y8=0,X8=0,W8=0,V8=0] 
* CE 35: count(V,V8,Out) = 2+ isEmpty(V,W8):2+ left(V,X8):2+ isEmpty(Y8,Z8):1+ right(V,A9):2+ left(V,B9):2+ left(C9,D9):1+ left(V,E9):2+ right(E9,F9):2+ right(V,G9):2+ inc(H9,I9):2+ count(A9,I9,Out)
     [V>=G9+1,E9>=F9+1,V>=E9+1,V>=A9+1,I9>=2,G9>=0,F9>=0,A9>=0,I9=H9+1,I9=V8+1,D9=0,C9=0,B9=0,Z8=1,Y8=0,X8=0,W8=0] 
* CE 36: count(V,V8,Out) = 2+ isEmpty(V,W8):2+ left(V,X8):2+ isEmpty(Y8,Z8):1+ right(V,A9):2+ left(V,B9):2+ left(B9,C9):2+ left(V,D9):2+ right(E9,F9):1+ right(V,G9):2+ inc(H9,I9):1+ count(A9,J9,Out)
     [V>=G9+1,B9>=C9+1,V>=B9+1,V>=A9+1,G9>=0,C9>=0,A9>=0,J9=1,I9=1,H9=0,F9=0,E9=0,D9=0,Z8=1,Y8=0,X8=0,W8=0,V8=0] 
* CE 37: count(V,V8,Out) = 2+ isEmpty(V,W8):2+ left(V,X8):2+ isEmpty(Y8,Z8):1+ right(V,A9):2+ left(V,B9):2+ left(B9,C9):2+ left(V,D9):2+ right(E9,F9):1+ right(V,G9):2+ inc(H9,I9):2+ count(A9,I9,Out)
     [V>=G9+1,B9>=C9+1,V>=B9+1,V>=A9+1,I9>=2,G9>=0,C9>=0,A9>=0,I9=H9+1,I9=V8+1,F9=0,E9=0,D9=0,Z8=1,Y8=0,X8=0,W8=0] 
* CE 38: count(V,V8,Out) = 2+ isEmpty(V,W8):2+ left(V,X8):2+ isEmpty(Y8,Z8):1+ right(V,A9):2+ left(V,B9):2+ left(B9,C9):2+ left(V,D9):2+ right(D9,E9):2+ right(V,F9):2+ inc(G9,H9):1+ count(A9,I9,Out)
     [V>=F9+1,D9>=E9+1,V>=D9+1,B9>=C9+1,V>=B9+1,V>=A9+1,F9>=0,E9>=0,C9>=0,A9>=0,I9=1,H9=1,G9=0,Z8=1,Y8=0,X8=0,W8=0,V8=0] 
* CE 39: count(V,V8,Out) = 2+ isEmpty(V,W8):2+ left(V,X8):2+ isEmpty(Y8,Z8):1+ right(V,A9):2+ left(V,B9):2+ left(B9,C9):2+ left(V,D9):2+ right(D9,E9):2+ right(V,F9):2+ inc(G9,H9):2+ count(A9,H9,Out)
     [V>=F9+1,D9>=E9+1,V>=D9+1,B9>=C9+1,V>=B9+1,V>=A9+1,H9>=2,F9>=0,E9>=0,C9>=0,A9>=0,H9=G9+1,H9=V8+1,Z8=1,Y8=0,X8=0,W8=0] 
* CE 40: count(V,V8,Out) = 2+ isEmpty(V,W8):2+ left(V,X8):2+ isEmpty(X8,Y8):2+ right(V,Z8):2+ left(V,A9):2+ left(B9,C9):1+ left(V,D9):2+ right(E9,F9):1+ right(V,G9):2+ inc(H9,I9):1+ count(J9,K9,Out)
     [V>=G9+1,V>=Z8+1,V>=X8+1,G9>=0,Z8>=0,X8>=1,G9+2=J9,K9=0,I9=1,H9=0,F9=0,E9=0,D9=0,C9=0,B9=0,A9=0,Y8=0,W8=0,V8=0] 
* CE 41: count(V,V8,Out) = 2+ isEmpty(V,W8):2+ left(V,X8):2+ isEmpty(X8,Y8):2+ right(V,Z8):2+ left(V,A9):2+ left(B9,C9):1+ left(V,D9):2+ right(E9,F9):1+ right(V,G9):2+ inc(H9,I9):2+ count(J9,K9,Out)
     [V>=G9+1,V>=Z8+1,V>=X8+1,I9>=2,G9>=0,Z8>=0,X8>=1,I9=K9+1,G9+2=J9,I9=H9+1,I9=V8+1,F9=0,E9=0,D9=0,C9=0,B9=0,A9=0,Y8=0,W8=0] 
* CE 42: count(V,V8,Out) = 2+ isEmpty(V,W8):2+ left(V,X8):2+ isEmpty(X8,Y8):2+ right(V,Z8):2+ left(V,A9):2+ left(B9,C9):1+ left(V,D9):2+ right(D9,E9):2+ right(V,F9):2+ inc(G9,H9):1+ count(I9,J9,Out)
     [V>=F9+1,D9>=E9+1,V>=D9+1,V>=Z8+1,V>=X8+1,F9>=0,E9>=0,Z8>=0,X8>=1,E9+F9+2=I9,J9=0,H9=1,G9=0,C9=0,B9=0,A9=0,Y8=0,W8=0,V8=0] 
* CE 43: count(V,V8,Out) = 2+ isEmpty(V,W8):2+ left(V,X8):2+ isEmpty(X8,Y8):2+ right(V,Z8):2+ left(V,A9):2+ left(B9,C9):1+ left(V,D9):2+ right(D9,E9):2+ right(V,F9):2+ inc(G9,H9):2+ count(I9,J9,Out)
     [V>=F9+1,D9>=E9+1,V>=D9+1,V>=Z8+1,V>=X8+1,H9>=2,F9>=0,E9>=0,Z8>=0,X8>=1,E9+F9+2=I9,H9=J9+1,H9=G9+1,H9=V8+1,C9=0,B9=0,A9=0,Y8=0,W8=0] 
* CE 44: count(V,V8,Out) = 2+ isEmpty(V,W8):2+ left(V,X8):2+ isEmpty(X8,Y8):2+ right(V,Z8):2+ left(V,A9):2+ left(A9,B9):2+ left(V,C9):2+ right(D9,E9):1+ right(V,F9):2+ inc(G9,H9):1+ count(I9,J9,Out)
     [V>=F9+1,A9>=B9+1,V>=A9+1,V>=Z8+1,V>=X8+1,F9>=0,B9>=0,Z8>=0,X8>=1,B9+F9+2=I9,J9=0,H9=1,G9=0,E9=0,D9=0,C9=0,Y8=0,W8=0,V8=0] 
* CE 45: count(V,V8,Out) = 2+ isEmpty(V,W8):2+ left(V,X8):2+ isEmpty(X8,Y8):2+ right(V,Z8):2+ left(V,A9):2+ left(A9,B9):2+ left(V,C9):2+ right(D9,E9):1+ right(V,F9):2+ inc(G9,H9):2+ count(I9,J9,Out)
     [V>=F9+1,A9>=B9+1,V>=A9+1,V>=Z8+1,V>=X8+1,H9>=2,F9>=0,B9>=0,Z8>=0,X8>=1,B9+F9+2=I9,H9=J9+1,H9=G9+1,H9=V8+1,E9=0,D9=0,C9=0,Y8=0,W8=0] 
* CE 46: count(V,V8,Out) = 2+ isEmpty(V,W8):2+ left(V,X8):2+ isEmpty(X8,Y8):2+ right(V,Z8):2+ left(V,A9):2+ left(A9,B9):2+ left(V,C9):2+ right(C9,D9):2+ right(V,E9):2+ inc(F9,G9):1+ count(H9,I9,Out)
     [V>=E9+1,C9>=D9+1,V>=C9+1,A9>=B9+1,V>=A9+1,V>=Z8+1,V>=X8+1,E9>=0,D9>=0,B9>=0,Z8>=0,X8>=1,B9+D9+E9+2=H9,I9=0,G9=1,F9=0,Y8=0,W8=0,V8=0] 
* CE 47: count(V,V8,Out) = 2+ isEmpty(V,W8):2+ left(V,X8):2+ isEmpty(X8,Y8):2+ right(V,Z8):2+ left(V,A9):2+ left(A9,B9):2+ left(V,C9):2+ right(C9,D9):2+ right(V,E9):2+ inc(F9,G9):2+ count(H9,I9,Out)
     [V>=E9+1,C9>=D9+1,V>=C9+1,A9>=B9+1,V>=A9+1,V>=Z8+1,V>=X8+1,G9>=2,E9>=0,D9>=0,B9>=0,Z8>=0,X8>=1,B9+D9+E9+2=H9,G9=I9+1,G9=F9+1,G9=V8+1,Y8=0,W8=0] 

### Cost equations --> "Loop" of count/3 
* CEs [41,43,45,47] --> Loop 22 
* CEs [33,35,37,39] --> Loop 23 
* CEs [32,34,36,38] --> Loop 24 
* CEs [40,42,44,46] --> Loop 25 
* CEs [31] --> Loop 26 
* CEs [30] --> Loop 27 

#### Loops of count/3 
* Loop 22: count(V,V8,Out)->  count(V',V8,Out)
                  [3*V>=V'+3,V'>=2,V8>=1,V>=2] 
* Loop 23: count(V,V8,Out)->  count(V',V8',Out)
                  [V>=V'+1,V'>=0,V8>=1,V8+1=V8'] 
* Loop 24: count(V,V8,Out)->  count(V',V8',Out)
                  [V>=V'+1,V'>=0,V8'=1,V8=0] 
* Loop 25: count(V,V8,Out)->  count(V',V8',Out)
                  [3*V>=V'+3,V'>=2,V>=2,V8'=0,V8=0] 
* Loop 26: count(A,B,B) [B>=1,A=0] 
* Loop 27: count(V,V8,Out) [Out=0,V8=0,V=0] 

### Ranking functions of CR count(V,V8,Out) 

#### Partial ranking functions of CR count(V,V8,Out) 
* Partial RF of phase [22,23]:
  - RF of loop [23:1]:
    V depends on loops [22:1] 


### Resulting Chains:count(V,V8,Out) 
* [[25]]...
* [[25],24,[22,23]]...
* [[25],24,[22,23],26]
* [[25],24,26]
* [[22,23]]...
* [[22,23],26]
* [27]
* [26]
* [24,[22,23]]...
* [24,[22,23],26]
* [24,26]


### Merging Chains  count/3 into  External patterns of execution 
* [[27]] --> 1 
* [[26]] --> 2 
* [[26,24],[26,24,[25]]] --> 3 
* [[26,[22,23],24],[26,[22,23],24,[25]]] --> 4 
* [[26,[22,23]]] --> 5 
* [[[22,23],24],[[22,23],24,[25]]] --> 6 
* [[[22,23]]] --> 7 
* [[[25]]] --> 8 


### Specialization of cost equations start/6 
* CE 4 is refined into CE [48] 
* CE 2 is refined into CE [49,50,51,52,53,54,55,56] 
* CE 3 is refined into CE [57,58,59,60,61,62,63,64] 
* CE 5 is refined into CE [65,66] 
* CE 6 is refined into CE [67,68] 
* CE 7 is refined into CE [69,70] 
* CE 8 is refined into CE [71,72] 
* CE 9 is refined into CE [73,74,75,76,77,78,79,80] 
* CE 10 is refined into CE [81,82,83,84,85] 


#### Refined cost equations start/6 
* CE 48: start(V,V8,V12,V19,V16,V18) = 1
     [V18>=0,V16>=0,V19>=0,V12>=0,V8>=0,V=1] 
* CE 49: start(V,V8,V12,V19,V16,V18) = 1+ count(W19,X19,Y19):1
     [V16>=0,V19>=0,Y19=0,X19=0,W19=0,V18=0,V12=0,V8=1,V=0] 
* CE 50: start(V,V8,V12,V19,V16,V18) = 1+ count(W19,V18,V18):2
     [V18>=1,V16>=0,V19>=0,W19=0,V12=0,V8=1,V=0] 
* CE 51: start(V,V8,V12,V19,V16,V18) = 1+ count(V12,W19,X19):3
     [V12>=1,V16>=0,V19>=0,X19=1,W19=0,V18=0,V8=1,V=0] 
* CE 52: start(V,V8,V12,V19,V16,V18) = 1+ count(V12,W19,X19):4
     [X19>=2,V12>=2,V16>=0,V19>=0,W19=0,V18=0,V8=1,V=0] 
* CE 53: start(V,V8,V12,V19,V16,V18) = 1+ count(V12,V18,W19):5
     [W19>=V18+1,V18>=1,V12>=1,V16>=0,V19>=0,V8=1,V=0] 
* CE 54: start(V,V8,V12,V19,V16,V18) = 1+ count(V12,W19,X19):6
     [V12>=2,V16>=0,V19>=0,W19=0,V18=0,V8=1,V=0] 
* CE 55: start(V,V8,V12,V19,V16,V18) = 1+ count(V12,V18,W19):7
     [V18>=1,V12>=1,V16>=0,V19>=0,V8=1,V=0] 
* CE 56: start(V,V8,V12,V19,V16,V18) = 1+ count(V12,W19,X19):8
     [V12>=2,V16>=0,V19>=0,W19=0,V18=0,V8=1,V=0] 
* CE 57: start(V,V8,V12,V19,V16,V18) = 1+ count(W19,X19,Y19):1
     [V18>=0,V12>=0,Y19=0,X19=0,W19=0,V16=0,V19=0,V8=0,V=0] 
* CE 58: start(V,V8,V12,V19,V16,V18) = 1+ count(W19,V16,V16):2
     [V16>=1,V18>=0,V12>=0,W19=0,V19=0,V8=0,V=0] 
* CE 59: start(V,V8,V12,V19,V16,V18) = 1+ count(V19,W19,X19):3
     [V19>=1,V18>=0,V12>=0,X19=1,W19=0,V16=0,V8=0,V=0] 
* CE 60: start(V,V8,V12,V19,V16,V18) = 1+ count(V19,W19,X19):4
     [X19>=2,V19>=2,V18>=0,V12>=0,W19=0,V16=0,V8=0,V=0] 
* CE 61: start(V,V8,V12,V19,V16,V18) = 1+ count(V19,V16,W19):5
     [W19>=V16+1,V16>=1,V19>=1,V18>=0,V12>=0,V8=0,V=0] 
* CE 62: start(V,V8,V12,V19,V16,V18) = 1+ count(V19,W19,X19):6
     [V19>=2,V18>=0,V12>=0,W19=0,V16=0,V8=0,V=0] 
* CE 63: start(V,V8,V12,V19,V16,V18) = 1+ count(V19,V16,W19):7
     [V16>=1,V19>=1,V18>=0,V12>=0,V8=0,V=0] 
* CE 64: start(V,V8,V12,V19,V16,V18) = 1+ count(V19,W19,X19):8
     [V19>=2,V18>=0,V12>=0,W19=0,V16=0,V8=0,V=0] 
* CE 65: start(V,V8,V12,V19,V16,V18) = 0+ isEmpty(W19,X19):1
     [X19=1,W19=0,V=0] 
* CE 66: start(V,V8,V12,V19,V16,V18) = 0+ isEmpty(V,W19):2
     [V>=1,W19=0] 
* CE 67: start(V,V8,V12,V19,V16,V18) = 0+ left(W19,X19):1
     [X19=0,W19=0,V=0] 
* CE 68: start(V,V8,V12,V19,V16,V18) = 0+ left(V,W19):2
     [V>=W19+1,W19>=0] 
* CE 69: start(V,V8,V12,V19,V16,V18) = 0+ right(W19,X19):1
     [X19=0,W19=0,V=0] 
* CE 70: start(V,V8,V12,V19,V16,V18) = 0+ right(V,W19):2
     [V>=W19+1,W19>=0] 
* CE 71: start(V,V8,V12,V19,V16,V18) = 0+ inc(W19,X19):1
     [X19=1,W19=0,V=0] 
* CE 72: start(V,V8,V12,V19,V16,V18) = 0+ inc(W19,X19):2
     [X19>=2,X19=W19+1,X19=V+1] 
* CE 73: start(V,V8,V12,V19,V16,V18) = 0+ count(W19,X19,Y19):1
     [Y19=0,X19=0,W19=0,V8=0,V=0] 
* CE 74: start(V,V8,V12,V19,V16,V18) = 0+ count(W19,V8,V8):2
     [V8>=1,W19=0,V=0] 
* CE 75: start(V,V8,V12,V19,V16,V18) = 0+ count(V,W19,X19):3
     [V>=1,X19=1,W19=0,V8=0] 
* CE 76: start(V,V8,V12,V19,V16,V18) = 0+ count(V,W19,X19):4
     [X19>=2,V>=2,W19=0,V8=0] 
* CE 77: start(V,V8,V12,V19,V16,V18) = 0+ count(V,V8,W19):5
     [W19>=V8+1,V8>=1,V>=1] 
* CE 78: start(V,V8,V12,V19,V16,V18) = 0+ count(V,W19,X19):6
     [V>=2,W19=0,V8=0] 
* CE 79: start(V,V8,V12,V19,V16,V18) = 0+ count(V,V8,W19):7
     [V8>=1,V>=1] 
* CE 80: start(V,V8,V12,V19,V16,V18) = 0+ count(V,W19,X19):8
     [V>=2,W19=0,V8=0] 
* CE 81: start(V,V8,V12,V19,V16,V18) = 1+ count(W19,X19,Y19):1
     [Y19=0,X19=0,W19=0,V=0] 
* CE 82: start(V,V8,V12,V19,V16,V18) = 1+ count(V,W19,X19):3
     [V>=1,X19=1,W19=0] 
* CE 83: start(V,V8,V12,V19,V16,V18) = 1+ count(V,W19,X19):4
     [X19>=2,V>=2,W19=0] 
* CE 84: start(V,V8,V12,V19,V16,V18) = 1+ count(V,W19,X19):6
     [V>=2,W19=0] 
* CE 85: start(V,V8,V12,V19,V16,V18) = 1+ count(V,W19,X19):8
     [V>=2,W19=0] 

### Cost equations --> "Loop" of start/6 
* CEs [79] --> Loop 28 
* CEs [78,80,84,85] --> Loop 29 
* CEs [55] --> Loop 30 
* CEs [54,56] --> Loop 31 
* CEs [63] --> Loop 32 
* CEs [62,64] --> Loop 33 
* CEs [75,76] --> Loop 34 
* CEs [48,66,68,70,72,77,82,83] --> Loop 35 
* CEs [49,50,51,52,53,57,58,59,60,61,65,67,69,71,73,74,81] --> Loop 36 

#### Loops of start/6 
* Loop 28: start(V,V8,V12,V19,V16,V18) [V8>=1,V>=1] 
* Loop 29: start(V,V8,V12,V19,V16,V18) [V>=2] 
* Loop 30: start(V,V8,V12,V19,V16,V18) [V18>=1,V16>=0,V19>=0,V12>=1,V8=1,V=0] 
* Loop 31: start(V,V8,V12,V19,V16,V18) [V16>=0,V19>=0,V12>=2,V18=0,V8=1,V=0] 
* Loop 32: start(V,V8,V12,V19,V16,V18) [V18>=0,V16>=1,V19>=1,V12>=0,V8=0,V=0] 
* Loop 33: start(V,V8,V12,V19,V16,V18) [V18>=0,V19>=2,V12>=0,V16=0,V8=0,V=0] 
* Loop 34: start(V,V8,V12,V19,V16,V18) [V>=1,V8=0] 
* Loop 35: start(V,V8,V12,V19,V16,V18) [V>=1] 
* Loop 36: start(V,V8,V12,V19,V16,V18) [V=0] 

### Ranking functions of CR start(V,V8,V12,V19,V16,V18) 

#### Partial ranking functions of CR start(V,V8,V12,V19,V16,V18) 


### Resulting Chains:start(V,V8,V12,V19,V16,V18) 
* [36]
* [35]
* [34]
* [33]...
* [32]...
* [31]...
* [30]...
* [29]...
* [28]...


### Merging Chains  start/6 into  External patterns of execution 
* [[36]] --> 1 
* [[34],[35]] --> 2 
* [[33]] --> 3 
* [[32]] --> 4 
* [[31]] --> 5 
* [[30]] --> 6 
* [[28]] --> 7 
* [[29]] --> 8 


Computing Bounds
=====================================

#### Cost of loops [15] 

 * loop 15:inc(V,Out) -> [inc(V',Out')] 
1
#### Cost of phase [15]:inc(V,Out) -> [inc(V',Out')] 
1*it(15)+0
  Such that:it(15) =< V
it(15) =< V-V'

#### Cost of chains of inc(V,Out):
* Chain [[15],14]: 1*it(15)+1
  Such that:it(15) =< Out

  with precondition: [V+1=Out,V>=1] 

* Chain [14]: 1
  with precondition: [V=0,Out=1] 


#### Cost of chains of isEmpty(V,Out):
* Chain [17]: 1
  with precondition: [V=0,Out=1] 

* Chain [16]: 1
  with precondition: [Out=0,V>=1] 


#### Cost of chains of left(V,Out):
* Chain [19]: 1
  with precondition: [V=0,Out=0] 

* Chain [18]: 1
  with precondition: [Out>=0,V>=Out+1] 


#### Cost of chains of right(V,Out):
* Chain [21]: 1
  with precondition: [V=0,Out=0] 

* Chain [20]: 1
  with precondition: [Out>=0,V>=Out+1] 


#### Cost of loops [25] 

 * loop 25:count(V,V8,Out) -> [count(V',V8',Out')] 
12
#### Cost of phase [25]:count(V,V8,Out) -> [count(V',V8',Out')] 
12*it(25)+0
#### Cost of loops [22,23] 

 * loop 22:count(V,V8,Out) -> [count(V',V8',Out')] 
4*s(6)+12
  Such that:s(5) =< V8'+1
s(6) =< s(5)

 * loop 23:count(V,V8,Out) -> [count(V',V8',Out')] 
4*s(12)+12
  Such that:s(11) =< V8'
s(12) =< s(11)

#### Cost of phase [22,23]:count(V,V8,Out) -> [count(V',V8',Out')] 
12*it(22)+12*it(23)+4*s(13)+4*s(15)+0
#### Cost of phase [25]:count(V,V8,Out) -> [count(V',V8',Out')] 
12*it(25)+0
#### Cost of phase [22,23]:count(V,V8,Out) -> [count(V',V8',Out')] 
12*it(22)+12*it(23)+4*s(13)+4*s(15)+0
#### Cost of phase [25]:count(V,V8,Out) -> [count(V',V8',Out')] 
12*it(25)+0
#### Cost of phase [25]:count(V,V8,Out) -> [count(V',V8',Out')] 
12*it(25)+0
#### Cost of chains of count(V,V8,Out):
* Chain [[25]]...: 12*it(25)+0
  with precondition: [V>=2,V8=0] 

* Chain [[25],24,[22,23]]...: 44*it(22)+12
  with precondition: [V8=0,V>=2] 

* Chain [[25],24,[22,23],26]: 44*it(22)+1*s(17)+24
  Such that:s(17) =< Out+1

  with precondition: [V8=0,V>=2,Out>=2] 

* Chain [[25],24,26]: 12*it(25)+1*s(17)+24
  Such that:s(17) =< 2

  with precondition: [V8=0,Out=1,V>=2] 

* Chain [[22,23]]...: 32*it(22)+0
  with precondition: [V>=1,V8>=1] 

* Chain [[22,23],26]: 32*it(22)+1*s(17)+12
  Such that:s(17) =< Out+1

  with precondition: [V>=1,V8>=1,Out>=V8+1] 

* Chain [27]: 12
  with precondition: [V=0,V8=0,Out=0] 

* Chain [26]: 1*s(17)+12
  Such that:s(17) =< V8+1

  with precondition: [V=0,V8=Out,V8>=1] 

* Chain [24,[22,23]]...: 32*it(22)+12
  with precondition: [V8=0,V>=2] 

* Chain [24,[22,23],26]: 32*it(22)+1*s(17)+24
  Such that:s(17) =< Out+1

  with precondition: [V8=0,V>=2,Out>=2] 

* Chain [24,26]: 1*s(17)+24
  Such that:s(17) =< 2

  with precondition: [V8=0,Out=1,V>=1] 


#### Cost of chains of start(V,V8,V12,V19,V16,V18):
* Chain [36]: 1*s(27)+224*s(28)+1*s(34)+1*s(41)+25
  Such that:s(41) =< V8+1
s(34) =< V16+1
s(27) =< V18+1

  with precondition: [V=0] 

* Chain [35]: 1*s(42)+112*s(43)+25
  Such that:s(42) =< V+1

  with precondition: [V>=1] 

* Chain [34]: 1*aux(16)+0
  with precondition: [V8=0,V>=1] 

* Chain [33]...: 1*aux(17)+0
  with precondition: [V=0,V8=0,V16=0,V12>=0,V19>=2,V18>=0] 

* Chain [32]...: 32*s(55)+1
  with precondition: [V=0,V8=0,V12>=0,V19>=1,V16>=1,V18>=0] 

* Chain [31]...: 1*aux(18)+0
  with precondition: [V=0,V8=1,V18=0,V12>=2,V19>=0,V16>=0] 

* Chain [30]...: 32*s(58)+1
  with precondition: [V=0,V8=1,V12>=1,V19>=0,V16>=0,V18>=1] 

* Chain [29]...: 1*aux(19)+0
  with precondition: [V>=2] 

* Chain [28]...: 32*s(63)+0
  with precondition: [V>=1,V8>=1] 


Closed-form bounds of start(V,V8,V12,V19,V16,V18): 
-------------------------------------
* Chain [36] with precondition: [V=0] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [35] with precondition: [V>=1] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [34] with precondition: [V8=0,V>=1] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [33]... with precondition: [V=0,V8=0,V16=0,V12>=0,V19>=2,V18>=0] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [32]... with precondition: [V=0,V8=0,V12>=0,V19>=1,V16>=1,V18>=0] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [31]... with precondition: [V=0,V8=1,V18=0,V12>=2,V19>=0,V16>=0] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [30]... with precondition: [V=0,V8=1,V12>=1,V19>=0,V16>=0,V18>=1] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [29]... with precondition: [V>=2] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [28]... with precondition: [V>=1,V8>=1] 
    - Upper bound: inf 
    - Complexity: infinity 

### Maximum cost of start(V,V8,V12,V19,V16,V18): inf 
Asymptotic class: infinity 

Time statistics: 
-------------------------------------
* Partial evaluation computed in 31 ms.
* Invariants computed in 39 ms.
   - Backward Invariants 17 ms.
   - Transitive Invariants 6 ms.
* Refinement performed in 205 ms.
* Termination proved in 4 ms.
* Upper bounds computed in 118 ms.
   - Equation cost structures 67 ms.
   - Phase cost structures 58 ms.
   - Chain cost structures 11 ms.
   - Solving cost expressions 0 ms.
* Total analysis performed in 432 ms.


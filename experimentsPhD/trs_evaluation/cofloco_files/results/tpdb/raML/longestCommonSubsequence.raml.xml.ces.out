
Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. non_recursive  : [fun/2]
1. recursive  : [firstline/2,fun7/2]
2. non_recursive  : [fun25/3]
3. recursive [non_tail,multiple] : [fun2/3]
4. non_recursive  : [fun1/3]
5. non_recursive  : [fun10/2]
6. non_recursive  : [fun20/3]
7. non_recursive  : [fun14/4]
8. non_recursive  : [fun4/2]
9. recursive  : [fun5/3]
10. non_recursive  : [fun3/3]
11. non_recursive  : [max/3]
12. non_recursive  : [fun23/2]
13. non_recursive  : [fun24/2]
14. recursive [non_tail] : [fun6/3]
15. non_recursive  : [plus/3]
16. non_recursive  : [fun21/5]
17. non_recursive  : [fun19/7]
18. non_recursive  : [fun22/2]
19. non_recursive  : [right/2]
20. non_recursive  : [fun18/7]
21. non_recursive  : [fun17/6]
22. recursive [non_tail] : [fun15/4,fun16/5,newline/4]
23. non_recursive  : [fun13/4]
24. non_recursive  : [fun12/4]
25. recursive [non_tail] : [fun11/3,lcstable/3]
26. non_recursive  : [fun9/2]
27. non_recursive  : [fun8/2]
28. non_recursive  : [lcs/3]
29. non_recursive  : [start/6]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into fun/2
1. SCC is partially evaluated into firstline/2
2. SCC is partially evaluated into fun25/3
3. SCC is partially evaluated into fun2/3
4. SCC is completely evaluated into other SCCs
5. SCC is partially evaluated into fun10/2
6. SCC is completely evaluated into other SCCs
7. SCC is partially evaluated into fun14/4
8. SCC is partially evaluated into fun4/2
9. SCC is partially evaluated into fun5/3
10. SCC is partially evaluated into fun3/3
11. SCC is partially evaluated into max/3
12. SCC is partially evaluated into fun23/2
13. SCC is partially evaluated into fun24/2
14. SCC is partially evaluated into fun6/3
15. SCC is completely evaluated into other SCCs
16. SCC is partially evaluated into fun21/5
17. SCC is partially evaluated into fun19/7
18. SCC is partially evaluated into fun22/2
19. SCC is completely evaluated into other SCCs
20. SCC is partially evaluated into fun18/7
21. SCC is partially evaluated into fun17/6
22. SCC is partially evaluated into newline/4
23. SCC is partially evaluated into fun13/4
24. SCC is completely evaluated into other SCCs
25. SCC is partially evaluated into lcstable/3
26. SCC is partially evaluated into fun9/2
27. SCC is completely evaluated into other SCCs
28. SCC is partially evaluated into lcs/3
29. SCC is partially evaluated into start/6

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations fun/2 
* CE 55 is refined into CE [119] 
* CE 56 is refined into CE [120] 
* CE 54 is refined into CE [121] 
* CE 57 is refined into CE [122] 


#### Refined cost equations fun/2 
* CE 119: fun(A,A) = 1
     [A>=1] 
* CE 120: fun(V,Out) = 1
     [V>=1,V+1=Out] 
* CE 121: fun(V,Out) = 1
     [Out=0,V=0] 
* CE 122: fun(V,Out) = 0
     [V>=0,Out=0] 

### Cost equations --> "Loop" of fun/2 
* CEs [119] --> Loop 77 
* CEs [120] --> Loop 78 
* CEs [121,122] --> Loop 79 

#### Loops of fun/2 
* Loop 77: fun(A,A) [A>=1] 
* Loop 78: fun(V,Out) [V>=1,V+1=Out] 
* Loop 79: fun(V,Out) [V>=0,Out=0] 

### Ranking functions of CR fun(V,Out) 

#### Partial ranking functions of CR fun(V,Out) 


### Resulting Chains:fun(V,Out) 
* [79]
* [78]
* [77]


### Merging Chains  fun/2 into  External patterns of execution 
* [[79]] --> 1 
* [[78]] --> 2 
* [[77]] --> 3 


### Specialization of cost equations firstline/2 
* CE 41 is refined into CE [123] 
* CE 39 is refined into CE [124] 
* CE 40 is refined into CE [125] 


#### Refined cost equations firstline/2 
* CE 123: firstline(V,Out) = 2+ fun(W,X):1+ firstline(Y,Z)
     [V>=Y+1,Y>=0,Z+1=Out,X=0,W=0] 
* CE 124: firstline(V,Out) = 1
     [V>=0,Out=0] 
* CE 125: firstline(V,Out) = 2
     [Out=1,V=1] 

### Cost equations --> "Loop" of firstline/2 
* CEs [124] --> Loop 80 
* CEs [125] --> Loop 81 
* CEs [123] --> Loop 82 

#### Loops of firstline/2 
* Loop 80: firstline(V,Out) [V>=0,Out=0] 
* Loop 81: firstline(V,Out) [Out=1,V=1] 
* Loop 82: firstline(V,Out)->  firstline(V',Out')
                  [V>=V'+1,V'>=0,Out=Out'+1] 

### Ranking functions of CR firstline(V,Out) 
* RF of phase [82]: [V]

#### Partial ranking functions of CR firstline(V,Out) 
* Partial RF of phase [82]:
  - RF of loop [82:1]:
    V


### Resulting Chains:firstline(V,Out) 
* [[82],81]
* [[82],80]
* [81]
* [80]


### Merging Chains  firstline/2 into  External patterns of execution 
* [[81],[80,[82]],[81,[82]]] --> 1 
* [[80]] --> 2 


### Specialization of cost equations fun25/3 
* CE 96 is refined into CE [126] 
* CE 95 is refined into CE [127] 
* CE 94 is refined into CE [128] 
* CE 93 is refined into CE [129] 
* CE 92 is refined into CE [130] 


#### Refined cost equations fun25/3 
* CE 126: fun25(V,V3,Out) = 0
     [V3>=0,V>=0,Out=0] 
* CE 127: fun25(V,V3,Out) = 0
     [Out=2,V3=2,V=2] 
* CE 128: fun25(V,V3,Out) = 0
     [Out=1,V3=1,V=2] 
* CE 129: fun25(V,V3,Out) = 0
     [Out=1,V3=2,V=1] 
* CE 130: fun25(V,V3,Out) = 0
     [Out=1,V3=1,V=1] 

### Cost equations --> "Loop" of fun25/3 
* CEs [126] --> Loop 83 
* CEs [127] --> Loop 84 
* CEs [128] --> Loop 85 
* CEs [129] --> Loop 86 
* CEs [130] --> Loop 87 

#### Loops of fun25/3 
* Loop 83: fun25(V,V3,Out) [V3>=0,V>=0,Out=0] 
* Loop 84: fun25(V,V3,Out) [Out=2,V3=2,V=2] 
* Loop 85: fun25(V,V3,Out) [Out=1,V3=1,V=2] 
* Loop 86: fun25(V,V3,Out) [Out=1,V3=2,V=1] 
* Loop 87: fun25(V,V3,Out) [Out=1,V3=1,V=1] 

### Ranking functions of CR fun25(V,V3,Out) 

#### Partial ranking functions of CR fun25(V,V3,Out) 


### Resulting Chains:fun25(V,V3,Out) 
* [87]
* [86]
* [85]
* [84]
* [83]


### Merging Chains  fun25/3 into  External patterns of execution 
* [[87]] --> 1 
* [[86]] --> 2 
* [[85]] --> 3 
* [[84]] --> 4 
* [[83]] --> 5 


### Specialization of cost equations fun2/3 
* CE 62 is refined into CE [131] 
* CE 65 is refined into CE [132] 
* CE 60 is refined into CE [133] 
* CE 64 is refined into CE [134] 
* CE 59 is refined into CE [135] 
* CE 58 is refined into CE [136] 
* CE 63 is refined into CE [137,138,139,140,141] 
* CE 61 is refined into CE [142] 


#### Refined cost equations fun2/3 
* CE 131: fun2(V,V3,Out) = 0
     [V3>=1,V>=1,Out=1] 
* CE 132: fun2(V,V3,Out) = 0
     [V3>=0,V>=0,Out=0] 
* CE 133: fun2(V,V3,Out) = 0
     [V>=1,Out=1,V3=0] 
* CE 134: fun2(V,V3,Out) = 0
     [Out=2,V3=1,V=1] 
* CE 135: fun2(V,V3,Out) = 0
     [V3>=1,Out=1,V=0] 
* CE 136: fun2(V,V3,Out) = 0
     [Out=2,V3=0,V=0] 
* CE 137: fun2(V,V3,Out) = 0+ fun2(W3,X3,Y3)+ fun2(Z3,A4,B4)+ fun25(C4,D4,E4):1
     [A4>=0,Z3>=0,X3>=0,W3>=0,X3+A4+1=V3,W3+Z3+1=V,B4=1,Y3=1,E4=1,D4=1,C4=1,Out=1] 
* CE 138: fun2(V,V3,Out) = 0+ fun2(W3,X3,Y3)+ fun2(Z3,A4,B4)+ fun25(C4,D4,E4):2
     [A4>=0,Z3>=0,X3>=0,W3>=0,X3+A4+1=V3,W3+Z3+1=V,B4=2,Y3=1,E4=1,D4=2,C4=1,Out=1] 
* CE 139: fun2(V,V3,Out) = 0+ fun2(W3,X3,Y3)+ fun2(Z3,A4,B4)+ fun25(C4,D4,E4):3
     [A4>=0,Z3>=0,X3>=0,W3>=0,X3+A4+1=V3,W3+Z3+1=V,B4=1,Y3=2,E4=1,D4=1,C4=2,Out=1] 
* CE 140: fun2(V,V3,Out) = 0+ fun2(W3,X3,Y3)+ fun2(Z3,A4,B4)+ fun25(C4,D4,E4):4
     [A4>=0,Z3>=0,X3>=0,W3>=0,X3+A4+1=V3,W3+Z3+1=V,B4=2,Y3=2,E4=2,D4=2,C4=2,Out=2] 
* CE 141: fun2(V,V3,Out) = 0+ fun2(W3,X3,Y3)+ fun2(Z3,A4,B4)+ fun25(Y3,B4,C4):5
     [A4>=0,Z3>=0,X3>=0,W3>=0,B4>=0,Y3>=0,X3+A4+1=V3,W3+Z3+1=V,C4=0,Out=0] 
* CE 142: fun2(V,V3,Out) = 0+ fun2(W3,X3,Out)
     [X3>=0,W3>=0,X3+1=V3,W3+1=V] 

### Cost equations --> "Loop" of fun2/3 
* CEs [142] --> Loop 88 
* CEs [140] --> Loop 89 
* CEs [139] --> Loop 90 
* CEs [138] --> Loop 91 
* CEs [137] --> Loop 92 
* CEs [141] --> Loop 93 
* CEs [131] --> Loop 94 
* CEs [132] --> Loop 95 
* CEs [133] --> Loop 96 
* CEs [134] --> Loop 97 
* CEs [135] --> Loop 98 
* CEs [136] --> Loop 99 

#### Loops of fun2/3 
* Loop 88: fun2(V,V3,Out)->  fun2(V',V3',Out)
                  [V3'>=0,V'>=0,V3'+1=V3,V'+1=V] 
* Loop 89: fun2(V,V3,Out)->  fun2(V',V3',Out')  fun2(V'2,V3'2,Out'2)
                  [V3>=V3'+1,V>=V'+1,V3'>=0,V'>=0,V3'+V3'2+1=V3,V'+V'2+1=V,Out'2=2,Out'=2,Out=2] 
* Loop 90: fun2(V,V3,Out)->  fun2(V',V3',Out')  fun2(V'2,V3'2,Out'2)
                  [V3>=V3'+1,V>=V'+1,V3'>=0,V'>=0,V3'+V3'2+1=V3,V'+V'2+1=V,Out'2=1,Out'=2,Out=1] 
* Loop 91: fun2(V,V3,Out)->  fun2(V',V3',Out')  fun2(V'2,V3'2,Out'2)
                  [V3>=V3'+1,V>=V'+1,V3'>=0,V'>=0,V3'+V3'2+1=V3,V'+V'2+1=V,Out'2=2,Out'=1,Out=1] 
* Loop 92: fun2(V,V3,Out)->  fun2(V',V3',Out')  fun2(V'2,V3'2,Out'2)
                  [V3>=V3'+1,V>=V'+1,V3'>=0,V'>=0,V3'+V3'2+1=V3,V'+V'2+1=V,Out'2=1,Out'=1,Out=1] 
* Loop 93: fun2(V,V3,Out)->  fun2(V',V3',Out')  fun2(V'2,V3'2,Out'2)
                  [V3>=V3'+1,V>=V'+1,Out'2>=0,Out'>=0,V3'>=0,V'>=0,V3'+V3'2+1=V3,V'+V'2+1=V,Out=0] 
* Loop 94: fun2(V,V3,Out) [V3>=1,V>=1,Out=1] 
* Loop 95: fun2(V,V3,Out) [V3>=0,V>=0,Out=0] 
* Loop 96: fun2(V,V3,Out) [V>=1,Out=1,V3=0] 
* Loop 97: fun2(V,V3,Out) [Out=2,V3=1,V=1] 
* Loop 98: fun2(V,V3,Out) [V3>=1,Out=1,V=0] 
* Loop 99: fun2(V,V3,Out) [Out=2,V3=0,V=0] 

### Ranking functions of CR fun2(V,V3,Out) 
* RF of phase [88,89,90,91,92,93]: [V,V3]

#### Partial ranking functions of CR fun2(V,V3,Out) 
* Partial RF of phase [88,89,90,91,92,93]:
  - RF of loop [88:1,89:1,89:2,90:1,90:2,91:1,91:2,92:1,92:2,93:1,93:2]:
    V
    V3


### Resulting Chains:fun2(V,V3,Out) 
* [99]
* [98]
* [97]
* [96]
* [95]
* [94]
* [multiple([88,89,90,91,92,93],[[99],[98],[97],[96],[95],[94]])]


### Merging Chains  fun2/3 into  External patterns of execution 
* [[99]] --> 1 
* [[98]] --> 2 
* [[97],[multiple([88,89,90,91,92,93],[[99],[98],[97],[96],[95],[94]])]] --> 3 
* [[96]] --> 4 
* [[95]] --> 5 
* [[94]] --> 6 


### Specialization of cost equations fun10/2 
* CE 77 is refined into CE [143] 
* CE 79 is refined into CE [144] 
* CE 78 is refined into CE [145] 


#### Refined cost equations fun10/2 
* CE 143: fun10(V,Out) = 1
     [V>=Out+1,Out>=0] 
* CE 144: fun10(V,Out) = 0
     [V>=0,Out=0] 
* CE 145: fun10(V,Out) = 1+ fun(W,X):1
     [X=0,W=0,Out=0,V=1] 

### Cost equations --> "Loop" of fun10/2 
* CEs [143] --> Loop 100 
* CEs [144,145] --> Loop 101 

#### Loops of fun10/2 
* Loop 100: fun10(V,Out) [V>=Out+1,Out>=0] 
* Loop 101: fun10(V,Out) [V>=0,Out=0] 

### Ranking functions of CR fun10(V,Out) 

#### Partial ranking functions of CR fun10(V,Out) 


### Resulting Chains:fun10(V,Out) 
* [101]
* [100]


### Merging Chains  fun10/2 into  External patterns of execution 
* [[101]] --> 1 
* [[100]] --> 2 


### Specialization of cost equations fun14/4 
* CE 83 is refined into CE [146] 
* CE 82 is refined into CE [147] 
* CE 81 is refined into CE [148] 


#### Refined cost equations fun14/4 
* CE 146: fun14(V,V3,V26,Out) = 0
     [V26>=0,V3>=0,V>=0,Out=0] 
* CE 147: fun14(A,B,C,B) = 1
     [C>=0,B>=0,A=2] 
* CE 148: fun14(A,B,C,C) = 1
     [C>=0,B>=0,A=1] 

### Cost equations --> "Loop" of fun14/4 
* CEs [146] --> Loop 102 
* CEs [147] --> Loop 103 
* CEs [148] --> Loop 104 

#### Loops of fun14/4 
* Loop 102: fun14(V,V3,V26,Out) [V26>=0,V3>=0,V>=0,Out=0] 
* Loop 103: fun14(A,B,C,B) [C>=0,B>=0,A=2] 
* Loop 104: fun14(A,B,C,C) [C>=0,B>=0,A=1] 

### Ranking functions of CR fun14(V,V3,V26,Out) 

#### Partial ranking functions of CR fun14(V,V3,V26,Out) 


### Resulting Chains:fun14(V,V3,V26,Out) 
* [104]
* [103]
* [102]


### Merging Chains  fun14/4 into  External patterns of execution 
* [[104]] --> 1 
* [[103]] --> 2 
* [[102]] --> 3 


### Specialization of cost equations fun4/2 
* CE 100 is refined into CE [149] 
* CE 99 is refined into CE [150] 
* CE 98 is refined into CE [151] 
* CE 97 is refined into CE [152] 


#### Refined cost equations fun4/2 
* CE 149: fun4(V,Out) = 0
     [V>=0,Out=0] 
* CE 150: fun4(V,Out) = 0
     [Out=1,V=3] 
* CE 151: fun4(V,Out) = 0
     [Out=2,V=2] 
* CE 152: fun4(V,Out) = 0
     [Out=1,V=1] 

### Cost equations --> "Loop" of fun4/2 
* CEs [149] --> Loop 105 
* CEs [150] --> Loop 106 
* CEs [151] --> Loop 107 
* CEs [152] --> Loop 108 

#### Loops of fun4/2 
* Loop 105: fun4(V,Out) [V>=0,Out=0] 
* Loop 106: fun4(V,Out) [Out=1,V=3] 
* Loop 107: fun4(V,Out) [Out=2,V=2] 
* Loop 108: fun4(V,Out) [Out=1,V=1] 

### Ranking functions of CR fun4(V,Out) 

#### Partial ranking functions of CR fun4(V,Out) 


### Resulting Chains:fun4(V,Out) 
* [108]
* [107]
* [106]
* [105]


### Merging Chains  fun4/2 into  External patterns of execution 
* [[108]] --> 1 
* [[107]] --> 2 
* [[106]] --> 3 
* [[105]] --> 4 


### Specialization of cost equations fun5/3 
* CE 106 is refined into CE [153] 
* CE 108 is refined into CE [154] 
* CE 110 is refined into CE [155] 
* CE 104 is refined into CE [156] 
* CE 107 is refined into CE [157] 
* CE 103 is refined into CE [158] 
* CE 102 is refined into CE [159] 
* CE 101 is refined into CE [160] 
* CE 105 is refined into CE [161] 
* CE 109 is refined into CE [162] 


#### Refined cost equations fun5/3 
* CE 153: fun5(V,V3,Out) = 0
     [V3>=1,V>=1,Out=3] 
* CE 154: fun5(V,V3,Out) = 0
     [V3>=1,V>=1,Out=2] 
* CE 155: fun5(V,V3,Out) = 0
     [V3>=0,V>=0,Out=0] 
* CE 156: fun5(V,V3,Out) = 0
     [V>=1,Out=3,V3=0] 
* CE 157: fun5(V,V3,Out) = 0
     [V>=1,Out=2,V3=0] 
* CE 158: fun5(V,V3,Out) = 0
     [V3>=1,Out=3,V=0] 
* CE 159: fun5(V,V3,Out) = 0
     [V3>=1,Out=2,V=0] 
* CE 160: fun5(V,V3,Out) = 0
     [Out=1,V3=0,V=0] 
* CE 161: fun5(V,V3,Out) = 0+ fun5(W3,X3,Out)
     [X3>=0,W3>=0,W3+1=V3,X3+1=V] 
* CE 162: fun5(V,V3,Out) = 0+ fun5(W3,X3,Out)
     [X3>=0,W3>=0,X3+1=V3,W3+1=V] 

### Cost equations --> "Loop" of fun5/3 
* CEs [161] --> Loop 109 
* CEs [162] --> Loop 110 
* CEs [153] --> Loop 111 
* CEs [154] --> Loop 112 
* CEs [155] --> Loop 113 
* CEs [156] --> Loop 114 
* CEs [157] --> Loop 115 
* CEs [158] --> Loop 116 
* CEs [159] --> Loop 117 
* CEs [160] --> Loop 118 

#### Loops of fun5/3 
* Loop 109: fun5(V,V3,Out)->  fun5(V',V3',Out)
                  [V3>=1,V>=1,V=V3'+1,V3=V'+1] 
* Loop 110: fun5(V,V3,Out)->  fun5(V',V3',Out)
                  [V3>=1,V>=1,V3=V3'+1,V=V'+1] 
* Loop 111: fun5(V,V3,Out) [V3>=1,V>=1,Out=3] 
* Loop 112: fun5(V,V3,Out) [V3>=1,V>=1,Out=2] 
* Loop 113: fun5(V,V3,Out) [V3>=0,V>=0,Out=0] 
* Loop 114: fun5(V,V3,Out) [V>=1,Out=3,V3=0] 
* Loop 115: fun5(V,V3,Out) [V>=1,Out=2,V3=0] 
* Loop 116: fun5(V,V3,Out) [V3>=1,Out=3,V=0] 
* Loop 117: fun5(V,V3,Out) [V3>=1,Out=2,V=0] 
* Loop 118: fun5(V,V3,Out) [Out=1,V3=0,V=0] 

### Ranking functions of CR fun5(V,V3,Out) 
* RF of phase [109,110]: [V/2+V3/2-1/2]

#### Partial ranking functions of CR fun5(V,V3,Out) 
* Partial RF of phase [109,110]:
  - RF of loop [109:1]:
    V/2+V3/2-1/2
  - RF of loop [110:1]:
    V depends on loops [109:1] 
    V3 depends on loops [109:1] 


### Resulting Chains:fun5(V,V3,Out) 
* [[109,110],118]
* [[109,110],117]
* [[109,110],116]
* [[109,110],115]
* [[109,110],114]
* [[109,110],113]
* [[109,110],112]
* [[109,110],111]
* [118]
* [117]
* [116]
* [115]
* [114]
* [113]
* [112]
* [111]


### Merging Chains  fun5/3 into  External patterns of execution 
* [[118]] --> 1 
* [[117]] --> 2 
* [[116]] --> 3 
* [[115]] --> 4 
* [[114]] --> 5 
* [[113],[113,[109,110]]] --> 6 
* [[118,[109,110]]] --> 7 
* [[112],[112,[109,110]],[115,[109,110]],[117,[109,110]]] --> 8 
* [[111],[111,[109,110]],[114,[109,110]],[116,[109,110]]] --> 9 


### Specialization of cost equations fun3/3 
* CE 66 is refined into CE [163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179] 


#### Refined cost equations fun3/3 
* CE 163: fun3(V,V3,Out) = 1+ fun5(W3,X3,Y3):1+ fun4(Z3,A4):1
     [A4=1,Z3=1,Y3=1,X3=0,W3=0,Out=1,V3=0,V=0] 
* CE 164: fun3(V,V3,Out) = 1+ fun5(W3,X3,Y3):1+ fun4(Z3,A4):4
     [A4=0,Z3=1,Y3=1,X3=0,W3=0,Out=0,V3=0,V=0] 
* CE 165: fun3(V,V3,Out) = 1+ fun5(W3,V3,X3):2+ fun4(Y3,Z3):2
     [V3>=1,Z3=2,Y3=2,X3=2,W3=0,Out=2,V=0] 
* CE 166: fun3(V,V3,Out) = 1+ fun5(W3,V3,X3):2+ fun4(Y3,Z3):4
     [V3>=1,Z3=0,Y3=2,X3=2,W3=0,Out=0,V=0] 
* CE 167: fun3(V,V3,Out) = 1+ fun5(W3,V3,X3):3+ fun4(Y3,Z3):3
     [V3>=1,Z3=1,Y3=3,X3=3,W3=0,Out=1,V=0] 
* CE 168: fun3(V,V3,Out) = 1+ fun5(W3,V3,X3):3+ fun4(Y3,Z3):4
     [V3>=1,Z3=0,Y3=3,X3=3,W3=0,Out=0,V=0] 
* CE 169: fun3(V,V3,Out) = 1+ fun5(V,W3,X3):4+ fun4(Y3,Z3):2
     [V>=1,Z3=2,Y3=2,X3=2,W3=0,Out=2,V3=0] 
* CE 170: fun3(V,V3,Out) = 1+ fun5(V,W3,X3):4+ fun4(Y3,Z3):4
     [V>=1,Z3=0,Y3=2,X3=2,W3=0,Out=0,V3=0] 
* CE 171: fun3(V,V3,Out) = 1+ fun5(V,W3,X3):5+ fun4(Y3,Z3):3
     [V>=1,Z3=1,Y3=3,X3=3,W3=0,Out=1,V3=0] 
* CE 172: fun3(V,V3,Out) = 1+ fun5(V,W3,X3):5+ fun4(Y3,Z3):4
     [V>=1,Z3=0,Y3=3,X3=3,W3=0,Out=0,V3=0] 
* CE 173: fun3(V,V3,Out) = 1+ fun5(V,V3,W3):6+ fun4(X3,Y3):4
     [V3>=0,V>=0,Y3=0,X3=0,W3=0,Out=0] 
* CE 174: fun3(A,A,B) = 1+ fun5(A,A,C):7+ fun4(D,E):1
     [A>=1,E=1,D=1,C=1,B=1] 
* CE 175: fun3(A,A,B) = 1+ fun5(A,A,C):7+ fun4(D,E):4
     [A>=1,E=0,D=1,C=1,B=0] 
* CE 176: fun3(V,V3,Out) = 1+ fun5(V,V3,W3):8+ fun4(X3,Y3):2
     [V3>=1,V>=1,Y3=2,X3=2,W3=2,Out=2] 
* CE 177: fun3(V,V3,Out) = 1+ fun5(V,V3,W3):8+ fun4(X3,Y3):4
     [V3>=1,V>=1,Y3=0,X3=2,W3=2,Out=0] 
* CE 178: fun3(V,V3,Out) = 1+ fun5(V,V3,W3):9+ fun4(X3,Y3):3
     [V3>=1,V>=1,Y3=1,X3=3,W3=3,Out=1] 
* CE 179: fun3(V,V3,Out) = 1+ fun5(V,V3,W3):9+ fun4(X3,Y3):4
     [V3>=1,V>=1,Y3=0,X3=3,W3=3,Out=0] 

### Cost equations --> "Loop" of fun3/3 
* CEs [176] --> Loop 119 
* CEs [174,178] --> Loop 120 
* CEs [175] --> Loop 121 
* CEs [169] --> Loop 122 
* CEs [171] --> Loop 123 
* CEs [170,172] --> Loop 124 
* CEs [165] --> Loop 125 
* CEs [167] --> Loop 126 
* CEs [166,168] --> Loop 127 
* CEs [163] --> Loop 128 
* CEs [164,173,177,179] --> Loop 129 

#### Loops of fun3/3 
* Loop 119: fun3(V,V3,Out) [V3>=1,V>=1,Out=2] 
* Loop 120: fun3(V,V3,Out) [V3>=1,V>=1,Out=1] 
* Loop 121: fun3(A,A,B) [A>=1,B=0] 
* Loop 122: fun3(V,V3,Out) [V>=1,Out=2,V3=0] 
* Loop 123: fun3(V,V3,Out) [V>=1,Out=1,V3=0] 
* Loop 124: fun3(V,V3,Out) [V>=1,Out=0,V3=0] 
* Loop 125: fun3(V,V3,Out) [V3>=1,Out=2,V=0] 
* Loop 126: fun3(V,V3,Out) [V3>=1,Out=1,V=0] 
* Loop 127: fun3(V,V3,Out) [V3>=1,Out=0,V=0] 
* Loop 128: fun3(V,V3,Out) [Out=1,V3=0,V=0] 
* Loop 129: fun3(V,V3,Out) [V3>=0,V>=0,Out=0] 

### Ranking functions of CR fun3(V,V3,Out) 

#### Partial ranking functions of CR fun3(V,V3,Out) 


### Resulting Chains:fun3(V,V3,Out) 
* [129]
* [128]
* [127]
* [126]
* [125]
* [124]
* [123]
* [122]
* [121]
* [120]
* [119]


### Merging Chains  fun3/3 into  External patterns of execution 
* [[128]] --> 1 
* [[127],[129]] --> 2 
* [[126]] --> 3 
* [[125]] --> 4 
* [[124]] --> 5 
* [[123]] --> 6 
* [[122]] --> 7 
* [[121]] --> 8 
* [[120]] --> 9 
* [[119]] --> 10 


### Specialization of cost equations max/3 
* CE 80 is refined into CE [180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196] 


#### Refined cost equations max/3 
* CE 180: max(V,V3,Out) = 1+ fun3(W3,X3,Y3):1+ fun14(Z3,A4,B4,C4):1
     [C4=0,B4=0,A4=0,Z3=1,Y3=1,X3=0,W3=0,Out=0,V3=0,V=0] 
* CE 181: max(V,V3,Out) = 1+ fun3(W3,X3,Y3):1+ fun14(Z3,A4,B4,C4):3
     [C4=0,B4=0,A4=0,Z3=1,Y3=1,X3=0,W3=0,Out=0,V3=0,V=0] 
* CE 182: max(V,V3,Out) = 1+ fun3(V,V3,W3):2+ fun14(X3,V,V3,Y3):3
     [V3>=0,V>=0,Y3=0,X3=0,W3=0,Out=0] 
* CE 183: max(A,B,B) = 1+ fun3(C,B,D):3+ fun14(E,F,B,B):1
     [B>=1,F=0,E=1,D=1,C=0,A=0] 
* CE 184: max(V,V3,Out) = 1+ fun3(W3,V3,X3):3+ fun14(Y3,Z3,V3,A4):3
     [V3>=1,A4=0,Z3=0,Y3=1,X3=1,W3=0,Out=0,V=0] 
* CE 185: max(V,V3,Out) = 1+ fun3(W3,V3,X3):4+ fun14(Y3,Z3,V3,A4):2
     [V3>=1,A4=0,Z3=0,Y3=2,X3=2,W3=0,Out=0,V=0] 
* CE 186: max(V,V3,Out) = 1+ fun3(W3,V3,X3):4+ fun14(Y3,Z3,V3,A4):3
     [V3>=1,A4=0,Z3=0,Y3=2,X3=2,W3=0,Out=0,V=0] 
* CE 187: max(V,V3,Out) = 1+ fun3(V,W3,X3):5+ fun14(Y3,V,Z3,A4):3
     [V>=1,A4=0,Z3=0,Y3=0,X3=0,W3=0,Out=0,V3=0] 
* CE 188: max(V,V3,Out) = 1+ fun3(V,W3,X3):6+ fun14(Y3,V,Z3,A4):1
     [V>=1,A4=0,Z3=0,Y3=1,X3=1,W3=0,Out=0,V3=0] 
* CE 189: max(V,V3,Out) = 1+ fun3(V,W3,X3):6+ fun14(Y3,V,Z3,A4):3
     [V>=1,A4=0,Z3=0,Y3=1,X3=1,W3=0,Out=0,V3=0] 
* CE 190: max(A,B,A) = 1+ fun3(A,C,D):7+ fun14(E,A,F,A):2
     [A>=1,F=0,E=2,D=2,C=0,B=0] 
* CE 191: max(V,V3,Out) = 1+ fun3(V,W3,X3):7+ fun14(Y3,V,Z3,A4):3
     [V>=1,A4=0,Z3=0,Y3=2,X3=2,W3=0,Out=0,V3=0] 
* CE 192: max(A,A,B) = 1+ fun3(A,A,C):8+ fun14(D,A,A,E):3
     [A>=1,E=0,D=0,C=0,B=0] 
* CE 193: max(A,B,B) = 1+ fun3(A,B,C):9+ fun14(D,A,B,B):1
     [B>=1,A>=1,D=1,C=1] 
* CE 194: max(V,V3,Out) = 1+ fun3(V,V3,W3):9+ fun14(X3,V,V3,Y3):3
     [V3>=1,V>=1,Y3=0,X3=1,W3=1,Out=0] 
* CE 195: max(A,B,A) = 1+ fun3(A,B,C):10+ fun14(D,A,B,A):2
     [A>=1,B>=1,D=2,C=2] 
* CE 196: max(V,V3,Out) = 1+ fun3(V,V3,W3):10+ fun14(X3,V,V3,Y3):3
     [V3>=1,V>=1,Y3=0,X3=2,W3=2,Out=0] 

### Cost equations --> "Loop" of max/3 
* CEs [193] --> Loop 130 
* CEs [195] --> Loop 131 
* CEs [192] --> Loop 132 
* CEs [190] --> Loop 133 
* CEs [187,188,189,191] --> Loop 134 
* CEs [183] --> Loop 135 
* CEs [184,185,186] --> Loop 136 
* CEs [180,181,182,194,196] --> Loop 137 

#### Loops of max/3 
* Loop 130: max(A,B,B) [B>=1,A>=1] 
* Loop 131: max(A,B,A) [B>=1,A>=1] 
* Loop 132: max(A,A,B) [A>=1,B=0] 
* Loop 133: max(A,B,A) [A>=1,B=0] 
* Loop 134: max(V,V3,Out) [V>=1,Out=0,V3=0] 
* Loop 135: max(A,B,B) [B>=1,A=0] 
* Loop 136: max(V,V3,Out) [V3>=1,Out=0,V=0] 
* Loop 137: max(V,V3,Out) [V3>=0,V>=0,Out=0] 

### Ranking functions of CR max(V,V3,Out) 

#### Partial ranking functions of CR max(V,V3,Out) 


### Resulting Chains:max(V,V3,Out) 
* [137]
* [136]
* [135]
* [134]
* [133]
* [132]
* [131]
* [130]


### Merging Chains  max/3 into  External patterns of execution 
* [[136],[137]] --> 1 
* [[135]] --> 2 
* [[134]] --> 3 
* [[133]] --> 4 
* [[132]] --> 5 
* [[131]] --> 6 
* [[130]] --> 7 


### Specialization of cost equations fun23/2 
* CE 114 is refined into CE [197] 
* CE 112 is refined into CE [198] 
* CE 113 is refined into CE [199] 
* CE 111 is refined into CE [200] 


#### Refined cost equations fun23/2 
* CE 197: fun23(V,Out) = 0
     [V>=3,V=Out+1] 
* CE 198: fun23(V,Out) = 0
     [V>=2,V+1=Out] 
* CE 199: fun23(V,Out) = 0
     [V>=0,Out=0] 
* CE 200: fun23(V,Out) = 0
     [Out=2,V=0] 

### Cost equations --> "Loop" of fun23/2 
* CEs [197] --> Loop 138 
* CEs [198] --> Loop 139 
* CEs [199] --> Loop 140 
* CEs [200] --> Loop 141 

#### Loops of fun23/2 
* Loop 138: fun23(V,Out) [V>=3,V=Out+1] 
* Loop 139: fun23(V,Out) [V>=2,V+1=Out] 
* Loop 140: fun23(V,Out) [V>=0,Out=0] 
* Loop 141: fun23(V,Out) [Out=2,V=0] 

### Ranking functions of CR fun23(V,Out) 

#### Partial ranking functions of CR fun23(V,Out) 


### Resulting Chains:fun23(V,Out) 
* [141]
* [140]
* [139]
* [138]


### Merging Chains  fun23/2 into  External patterns of execution 
* [[141]] --> 1 
* [[140]] --> 2 
* [[139]] --> 3 
* [[138]] --> 4 


### Specialization of cost equations fun24/2 
* CE 117 is refined into CE [201] 
* CE 118 is refined into CE [202] 
* CE 116 is refined into CE [203] 
* CE 115 is refined into CE [204] 


#### Refined cost equations fun24/2 
* CE 201: fun24(V,Out) = 0
     [V>=3,V=Out+1] 
* CE 202: fun24(V,Out) = 0
     [V>=2,V+1=Out] 
* CE 203: fun24(V,Out) = 0
     [V>=0,Out=0] 
* CE 204: fun24(V,Out) = 0
     [Out=2,V=0] 

### Cost equations --> "Loop" of fun24/2 
* CEs [201] --> Loop 142 
* CEs [202] --> Loop 143 
* CEs [203] --> Loop 144 
* CEs [204] --> Loop 145 

#### Loops of fun24/2 
* Loop 142: fun24(V,Out) [V>=3,V=Out+1] 
* Loop 143: fun24(V,Out) [V>=2,V+1=Out] 
* Loop 144: fun24(V,Out) [V>=0,Out=0] 
* Loop 145: fun24(V,Out) [Out=2,V=0] 

### Ranking functions of CR fun24(V,Out) 

#### Partial ranking functions of CR fun24(V,Out) 


### Resulting Chains:fun24(V,Out) 
* [145]
* [144]
* [143]
* [142]


### Merging Chains  fun24/2 into  External patterns of execution 
* [[145]] --> 1 
* [[144]] --> 2 
* [[143]] --> 3 
* [[142]] --> 4 


### Specialization of cost equations fun6/3 
* CE 72 is refined into CE [205] 
* CE 68 is refined into CE [206,207,208,209] 
* CE 70 is refined into CE [210,211,212,213] 
* CE 67 is refined into CE [214] 
* CE 69 is refined into CE [215,216,217,218] 
* CE 71 is refined into CE [219,220,221,222] 


#### Refined cost equations fun6/3 
* CE 205: fun6(V,V3,Out) = 0
     [V3>=0,V>=0,Out=0] 
* CE 206: fun6(V,V3,Out) = 0+ fun23(W3,X3):1
     [X3=2,W3=0,Out=2,V3=0,V=2] 
* CE 207: fun6(V,V3,Out) = 0+ fun23(V3,W3):2
     [V3>=0,W3=0,Out=0,V=2] 
* CE 208: fun6(V,V3,Out) = 0+ fun23(W3,Out):3
     [Out>=3,Out=W3+1,Out=V3+1,V=2] 
* CE 209: fun6(V,V3,Out) = 0+ fun23(W3,Out):4
     [Out>=2,Out+1=W3,Out+1=V3,V=2] 
* CE 210: fun6(V,V3,Out) = 0+ fun24(W3,X3):1
     [X3=2,W3=0,Out=2,V3=0,V=2] 
* CE 211: fun6(V,V3,Out) = 0+ fun24(V3,W3):2
     [V3>=0,W3=0,Out=0,V=2] 
* CE 212: fun6(V,V3,Out) = 0+ fun24(W3,Out):3
     [Out>=3,Out=W3+1,Out=V3+1,V=2] 
* CE 213: fun6(V,V3,Out) = 0+ fun24(W3,Out):4
     [Out>=2,Out+1=W3,Out+1=V3,V=2] 
* CE 214: fun6(A,B,B) = 0
     [B>=0,A=0] 
* CE 215: fun6(V,V3,Out) = 0+ fun6(W3,V3,X3)+ fun23(Y3,Z3):1
     [V3>=0,V>=3,V=W3+1,X3=0,Z3=2,Y3=0,Out=2] 
* CE 216: fun6(V,V3,Out) = 0+ fun6(W3,V3,X3)+ fun23(X3,Y3):2
     [X3>=0,V3>=0,V>=3,V=W3+1,Y3=0,Out=0] 
* CE 217: fun6(V,V3,Out) = 0+ fun6(W3,V3,X3)+ fun23(Y3,Out):3
     [Out>=3,V3>=0,V>=3,Out=X3+1,V=W3+1,Out=Y3+1] 
* CE 218: fun6(V,V3,Out) = 0+ fun6(W3,V3,X3)+ fun23(Y3,Out):4
     [Out>=2,V3>=0,V>=3,Out+1=X3,V=W3+1,Out+1=Y3] 
* CE 219: fun6(V,V3,Out) = 0+ fun6(W3,V3,X3)+ fun24(Y3,Z3):1
     [V3>=0,V>=3,V=W3+1,X3=0,Z3=2,Y3=0,Out=2] 
* CE 220: fun6(V,V3,Out) = 0+ fun6(W3,V3,X3)+ fun24(X3,Y3):2
     [X3>=0,V3>=0,V>=3,V=W3+1,Y3=0,Out=0] 
* CE 221: fun6(V,V3,Out) = 0+ fun6(W3,V3,X3)+ fun24(Y3,Out):3
     [Out>=3,V3>=0,V>=3,Out=X3+1,V=W3+1,Out=Y3+1] 
* CE 222: fun6(V,V3,Out) = 0+ fun6(W3,V3,X3)+ fun24(Y3,Out):4
     [Out>=2,V3>=0,V>=3,Out+1=X3,V=W3+1,Out+1=Y3] 

### Cost equations --> "Loop" of fun6/3 
* CEs [217,221] --> Loop 146 
* CEs [218,222] --> Loop 147 
* CEs [215,219] --> Loop 148 
* CEs [216,220] --> Loop 149 
* CEs [209,213] --> Loop 150 
* CEs [208,212] --> Loop 151 
* CEs [205,207,211] --> Loop 152 
* CEs [206,210] --> Loop 153 
* CEs [214] --> Loop 154 

#### Loops of fun6/3 
* Loop 146: fun6(V,V3,Out)->  fun6(V',V3,Out')
                  [Out>=3,V3>=0,V>=3,Out=Out'+1,V=V'+1] 
* Loop 147: fun6(V,V3,Out)->  fun6(V',V3,Out')
                  [Out>=2,V3>=0,V>=3,Out+1=Out',V=V'+1] 
* Loop 148: fun6(V,V3,Out)->  fun6(V',V3,Out')
                  [V3>=0,V>=3,V=V'+1,Out'=0,Out=2] 
* Loop 149: fun6(V,V3,Out)->  fun6(V',V3,Out')
                  [Out'>=0,V3>=0,V>=3,V=V'+1,Out=0] 
* Loop 150: fun6(V,V3,Out) [V3>=3,V3=Out+1,V=2] 
* Loop 151: fun6(V,V3,Out) [V3>=2,V3+1=Out,V=2] 
* Loop 152: fun6(V,V3,Out) [V3>=0,V>=0,Out=0] 
* Loop 153: fun6(V,V3,Out) [Out=2,V3=0,V=2] 
* Loop 154: fun6(A,B,B) [B>=0,A=0] 

### Ranking functions of CR fun6(V,V3,Out) 
* RF of phase [146,147,148,149]: [V-2]

#### Partial ranking functions of CR fun6(V,V3,Out) 
* Partial RF of phase [146,147,148,149]:
  - RF of loop [146:1,147:1,148:1,149:1]:
    V-2


### Resulting Chains:fun6(V,V3,Out) 
* [[146,147,148,149],153]
* [[146,147,148,149],152]
* [[146,147,148,149],151]
* [[146,147,148,149],150]
* [154]
* [153]
* [152]
* [151]
* [150]


### Merging Chains  fun6/3 into  External patterns of execution 
* [[154]] --> 1 
* [[153]] --> 2 
* [[151]] --> 3 
* [[150]] --> 4 
* [[153,[146,147,148,149]]] --> 5 
* [[152]] --> 6 
* [[152,[146,147,148,149]]] --> 7 
* [[150,[146,147,148,149]],[151,[146,147,148,149]]] --> 8 


### Specialization of cost equations fun21/5 
* CE 88 is refined into CE [223] 
* CE 87 is refined into CE [224,225,226,227,228] 
* CE 86 is refined into CE [229,230,231,232,233,234,235] 


#### Refined cost equations fun21/5 
* CE 223: fun21(V,V3,V26,V55,Out) = 0
     [V55>=0,V26>=0,V3>=0,V>=0,Out=0] 
* CE 224: fun21(V,V3,V26,V55,Out) = 2+ fun6(W55,X55,Y55):1
     [V55>=0,V3>=0,Y55=2,X55=2,W55=0,Out=2,V26=0,V=2] 
* CE 225: fun21(V,V3,V26,V55,Out) = 2+ fun6(W55,X55,Y55):3
     [V55>=0,V3>=0,Y55=3,X55=2,W55=2,Out=3,V26=2,V=2] 
* CE 226: fun21(V,V3,V26,V55,Out) = 2+ fun6(V26,W55,X55):6
     [V26>=0,V55>=0,V3>=0,X55=0,W55=2,Out=0,V=2] 
* CE 227: fun21(V,V3,V26,V55,Out) = 2+ fun6(V26,W55,Out):7
     [V26>=Out+1,Out>=0,V26>=3,V55>=0,V3>=0,W55=2,V=2] 
* CE 228: fun21(V,V3,V26,V55,Out) = 2+ fun6(V26,W55,Out):8
     [V26+1>=Out,Out>=0,V26>=3,V55>=0,V3>=0,W55=2,V=2] 
* CE 229: fun21(V,V3,V26,V55,Out) = 1+ max(V3,V55,W55):1
     [V55>=0,V3>=0,V26>=0,W55=0,Out=0,V=1] 
* CE 230: fun21(A,B,C,D,D) = 1+ max(E,D,D):2
     [D>=1,C>=0,E=0,B=0,A=1] 
* CE 231: fun21(V,V3,V26,V55,Out) = 1+ max(V3,W55,X55):3
     [V3>=1,V26>=0,X55=0,W55=0,Out=0,V55=0,V=1] 
* CE 232: fun21(A,B,C,D,B) = 1+ max(B,E,B):4
     [B>=1,C>=0,E=0,D=0,A=1] 
* CE 233: fun21(A,B,C,B,D) = 1+ max(B,B,E):5
     [B>=1,C>=0,E=0,D=0,A=1] 
* CE 234: fun21(A,B,C,D,B) = 1+ max(B,D,B):6
     [B>=1,D>=1,C>=0,A=1] 
* CE 235: fun21(A,B,C,D,D) = 1+ max(B,D,D):7
     [D>=1,B>=1,C>=0,A=1] 

### Cost equations --> "Loop" of fun21/5 
* CEs [227,228] --> Loop 155 
* CEs [226] --> Loop 156 
* CEs [225] --> Loop 157 
* CEs [224] --> Loop 158 
* CEs [235] --> Loop 159 
* CEs [234] --> Loop 160 
* CEs [233] --> Loop 161 
* CEs [232] --> Loop 162 
* CEs [223,229,231] --> Loop 163 
* CEs [230] --> Loop 164 

#### Loops of fun21/5 
* Loop 155: fun21(V,V3,V26,V55,Out) [V26+1>=Out,Out>=0,V55>=0,V26>=3,V3>=0,V=2] 
* Loop 156: fun21(V,V3,V26,V55,Out) [V55>=0,V26>=0,V3>=0,Out=0,V=2] 
* Loop 157: fun21(V,V3,V26,V55,Out) [V55>=0,V3>=0,Out=3,V26=2,V=2] 
* Loop 158: fun21(V,V3,V26,V55,Out) [V55>=0,V3>=0,Out=2,V26=0,V=2] 
* Loop 159: fun21(A,B,C,D,D) [D>=1,C>=0,B>=1,A=1] 
* Loop 160: fun21(A,B,C,D,B) [D>=1,C>=0,B>=1,A=1] 
* Loop 161: fun21(A,B,C,B,D) [C>=0,B>=1,D=0,A=1] 
* Loop 162: fun21(A,B,C,D,B) [C>=0,B>=1,D=0,A=1] 
* Loop 163: fun21(V,V3,V26,V55,Out) [V55>=0,V26>=0,V3>=0,V>=0,Out=0] 
* Loop 164: fun21(A,B,C,D,D) [D>=1,C>=0,B=0,A=1] 

### Ranking functions of CR fun21(V,V3,V26,V55,Out) 

#### Partial ranking functions of CR fun21(V,V3,V26,V55,Out) 


### Resulting Chains:fun21(V,V3,V26,V55,Out) 
* [164]
* [163]
* [162]
* [161]
* [160]
* [159]
* [158]
* [157]
* [156]
* [155]


### Merging Chains  fun21/5 into  External patterns of execution 
* [[164]] --> 1 
* [[162]] --> 2 
* [[161],[163]] --> 3 
* [[160]] --> 4 
* [[159]] --> 5 
* [[158]] --> 6 
* [[157]] --> 7 
* [[156]] --> 8 
* [[155]] --> 9 


### Specialization of cost equations fun19/7 
* CE 85 is refined into CE [236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265] 


#### Refined cost equations fun19/7 
* CE 236: fun19(V,V3,V26,V55,V65,V71,Out) = 3+ fun2(W71,X71,Y71):1+ fun21(Z71,V3,V,V55,A72):3
     [V55>=0,V>=0,V3>=0,V26>=0,V26+1=Out,A72=0,Z71=2,Y71=2,X71=0,W71=0,V71=0,V65=0] 
* CE 237: fun19(V,V3,V26,V55,V65,V71,Out) = 3+ fun2(W71,X71,Y71):1+ fun21(Z71,V3,A72,V55,B72):6
     [V55>=0,V3>=0,V26>=0,V26+3=Out,B72=2,A72=0,Z71=2,Y71=2,X71=0,W71=0,V71=0,V65=0,V=0] 
* CE 238: fun19(V,V3,V26,V55,V65,V71,Out) = 3+ fun2(W71,X71,Y71):1+ fun21(Z71,V3,A72,V55,B72):7
     [V55>=0,V3>=0,V26>=0,V26+4=Out,B72=3,A72=2,Z71=2,Y71=2,X71=0,W71=0,V71=0,V65=0,V=2] 
* CE 239: fun19(V,V3,V26,V55,V65,V71,Out) = 3+ fun2(W71,X71,Y71):1+ fun21(Z71,V3,V,V55,A72):8
     [V55>=0,V>=0,V3>=0,V26>=0,V26+1=Out,A72=0,Z71=2,Y71=2,X71=0,W71=0,V71=0,V65=0] 
* CE 240: fun19(V,V3,V26,V55,V65,V71,Out) = 3+ fun2(W71,X71,Y71):1+ fun21(Z71,V3,V,V55,A72):9
     [V+1>=A72,A72>=0,V55>=0,V>=3,V3>=0,V26>=0,V26+A72+1=Out,Z71=2,Y71=2,X71=0,W71=0,V71=0,V65=0] 
* CE 241: fun19(V,V3,V26,V55,V65,V71,Out) = 3+ fun2(W71,V71,X71):2+ fun21(Y71,Z71,V,V55,V55):1
     [V55>=1,V>=0,V71>=1,V26>=0,V26+V55+1=Out,Z71=0,Y71=1,X71=1,W71=0,V65=0,V3=0] 
* CE 242: fun19(V,V3,V26,V55,V65,V71,Out) = 3+ fun2(W71,V71,X71):2+ fun21(Y71,V3,V,Z71,V3):2
     [V3>=1,V>=0,V71>=1,V26>=0,V3+V26+1=Out,Z71=0,Y71=1,X71=1,W71=0,V65=0,V55=0] 
* CE 243: fun19(V,V3,V26,V55,V65,V71,Out) = 3+ fun2(W71,V71,X71):2+ fun21(Y71,V3,V,V55,Z71):3
     [V55>=0,V>=0,V3>=0,V71>=1,V26>=0,V26+1=Out,Z71=0,Y71=1,X71=1,W71=0,V65=0] 
* CE 244: fun19(V,V3,V26,V55,V65,V71,Out) = 3+ fun2(W71,V71,X71):2+ fun21(Y71,V3,V,V55,V3):4
     [V3>=1,V55>=1,V>=0,V71>=1,V26>=0,V3+V26+1=Out,Y71=1,X71=1,W71=0,V65=0] 
* CE 245: fun19(V,V3,V26,V55,V65,V71,Out) = 3+ fun2(W71,V71,X71):2+ fun21(Y71,V3,V,V55,V55):5
     [V55>=1,V>=0,V3>=1,V71>=1,V26>=0,V26+V55+1=Out,Y71=1,X71=1,W71=0,V65=0] 
* CE 246: fun19(V,V3,V26,V55,V65,V71,Out) = 3+ fun2(V65,V71,W71):3+ fun21(X71,Y71,V,V55,V55):1
     [V55>=1,V>=0,V71>=1,V65>=1,V26>=0,V26+V55+1=Out,Y71=0,X71=1,W71=1,V3=0] 
* CE 247: fun19(V,V3,V26,V55,V65,V71,Out) = 3+ fun2(V65,V71,W71):3+ fun21(X71,V3,V,Y71,V3):2
     [V3>=1,V>=0,V71>=1,V65>=1,V26>=0,V3+V26+1=Out,Y71=0,X71=1,W71=1,V55=0] 
* CE 248: fun19(V,V3,V26,V55,V65,V71,Out) = 3+ fun2(V65,V71,W71):3+ fun21(W71,V3,V,V55,X71):3
     [V55>=0,V>=0,V3>=0,W71>=0,V71>=1,V65>=1,V26>=0,2>=W71,V26+1=Out,X71=0] 
* CE 249: fun19(V,V3,V26,V55,V65,V71,Out) = 3+ fun2(V65,V71,W71):3+ fun21(X71,V3,V,V55,V3):4
     [V3>=1,V55>=1,V>=0,V71>=1,V65>=1,V26>=0,V3+V26+1=Out,X71=1,W71=1] 
* CE 250: fun19(V,V3,V26,V55,V65,V71,Out) = 3+ fun2(V65,V71,W71):3+ fun21(X71,V3,V,V55,V55):5
     [V55>=1,V>=0,V3>=1,V71>=1,V65>=1,V26>=0,V26+V55+1=Out,X71=1,W71=1] 
* CE 251: fun19(V,V3,V26,V55,V65,V71,Out) = 3+ fun2(V65,V71,W71):3+ fun21(X71,V3,Y71,V55,Z71):6
     [V55>=0,V3>=0,V71>=1,V65>=1,V26>=0,V26+3=Out,Z71=2,Y71=0,X71=2,W71=2,V=0] 
* CE 252: fun19(V,V3,V26,V55,V65,V71,Out) = 3+ fun2(V65,V71,W71):3+ fun21(X71,V3,Y71,V55,Z71):7
     [V55>=0,V3>=0,V71>=1,V65>=1,V26>=0,V26+4=Out,Z71=3,Y71=2,X71=2,W71=2,V=2] 
* CE 253: fun19(V,V3,V26,V55,V65,V71,Out) = 3+ fun2(V65,V71,W71):3+ fun21(X71,V3,V,V55,Y71):8
     [V55>=0,V>=0,V3>=0,V71>=1,V65>=1,V26>=0,V26+1=Out,Y71=0,X71=2,W71=2] 
* CE 254: fun19(V,V3,V26,V55,V65,V71,Out) = 3+ fun2(V65,V71,W71):3+ fun21(X71,V3,V,V55,Y71):9
     [V+1>=Y71,Y71>=0,V55>=0,V>=3,V3>=0,V71>=1,V65>=1,V26>=0,V26+Y71+1=Out,X71=2,W71=2] 
* CE 255: fun19(V,V3,V26,V55,V65,V71,Out) = 3+ fun2(V65,W71,X71):4+ fun21(Y71,Z71,V,V55,V55):1
     [V55>=1,V>=0,V65>=1,V26>=0,V26+V55+1=Out,Z71=0,Y71=1,X71=1,W71=0,V71=0,V3=0] 
* CE 256: fun19(V,V3,V26,V55,V65,V71,Out) = 3+ fun2(V65,W71,X71):4+ fun21(Y71,V3,V,Z71,V3):2
     [V3>=1,V>=0,V65>=1,V26>=0,V3+V26+1=Out,Z71=0,Y71=1,X71=1,W71=0,V71=0,V55=0] 
* CE 257: fun19(V,V3,V26,V55,V65,V71,Out) = 3+ fun2(V65,W71,X71):4+ fun21(Y71,V3,V,V55,Z71):3
     [V55>=0,V>=0,V3>=0,V65>=1,V26>=0,V26+1=Out,Z71=0,Y71=1,X71=1,W71=0,V71=0] 
* CE 258: fun19(V,V3,V26,V55,V65,V71,Out) = 3+ fun2(V65,W71,X71):4+ fun21(Y71,V3,V,V55,V3):4
     [V3>=1,V55>=1,V>=0,V65>=1,V26>=0,V3+V26+1=Out,Y71=1,X71=1,W71=0,V71=0] 
* CE 259: fun19(V,V3,V26,V55,V65,V71,Out) = 3+ fun2(V65,W71,X71):4+ fun21(Y71,V3,V,V55,V55):5
     [V55>=1,V>=0,V3>=1,V65>=1,V26>=0,V26+V55+1=Out,Y71=1,X71=1,W71=0,V71=0] 
* CE 260: fun19(V,V3,V26,V55,V65,V71,Out) = 3+ fun2(V65,V71,W71):5+ fun21(X71,V3,V,V55,Y71):3
     [V55>=0,V>=0,V3>=0,V71>=0,V65>=0,V26>=0,V26+1=Out,Y71=0,X71=0,W71=0] 
* CE 261: fun19(V,V3,V26,V55,V65,V71,Out) = 3+ fun2(V65,V71,W71):6+ fun21(X71,Y71,V,V55,V55):1
     [V55>=1,V>=0,V71>=1,V65>=1,V26>=0,V26+V55+1=Out,Y71=0,X71=1,W71=1,V3=0] 
* CE 262: fun19(V,V3,V26,V55,V65,V71,Out) = 3+ fun2(V65,V71,W71):6+ fun21(X71,V3,V,Y71,V3):2
     [V3>=1,V>=0,V71>=1,V65>=1,V26>=0,V3+V26+1=Out,Y71=0,X71=1,W71=1,V55=0] 
* CE 263: fun19(V,V3,V26,V55,V65,V71,Out) = 3+ fun2(V65,V71,W71):6+ fun21(X71,V3,V,V55,Y71):3
     [V55>=0,V>=0,V3>=0,V71>=1,V65>=1,V26>=0,V26+1=Out,Y71=0,X71=1,W71=1] 
* CE 264: fun19(V,V3,V26,V55,V65,V71,Out) = 3+ fun2(V65,V71,W71):6+ fun21(X71,V3,V,V55,V3):4
     [V3>=1,V55>=1,V>=0,V71>=1,V65>=1,V26>=0,V3+V26+1=Out,X71=1,W71=1] 
* CE 265: fun19(V,V3,V26,V55,V65,V71,Out) = 3+ fun2(V65,V71,W71):6+ fun21(X71,V3,V,V55,V55):5
     [V55>=1,V>=0,V3>=1,V71>=1,V65>=1,V26>=0,V26+V55+1=Out,X71=1,W71=1] 

### Cost equations --> "Loop" of fun19/7 
* CEs [254] --> Loop 165 
* CEs [250,265] --> Loop 166 
* CEs [249,264] --> Loop 167 
* CEs [259] --> Loop 168 
* CEs [258] --> Loop 169 
* CEs [257] --> Loop 170 
* CEs [245] --> Loop 171 
* CEs [244] --> Loop 172 
* CEs [243] --> Loop 173 
* CEs [240] --> Loop 174 
* CEs [236,239,248,253,260,263] --> Loop 175 
* CEs [247,262] --> Loop 176 
* CEs [256] --> Loop 177 
* CEs [242] --> Loop 178 
* CEs [246,261] --> Loop 179 
* CEs [255] --> Loop 180 
* CEs [241] --> Loop 181 
* CEs [252] --> Loop 182 
* CEs [238] --> Loop 183 
* CEs [251] --> Loop 184 
* CEs [237] --> Loop 185 

#### Loops of fun19/7 
* Loop 165: fun19(V,V3,V26,V55,V65,V71,Out) [V+V26+2>=Out,Out>=V26+1,V71>=1,V65>=1,V55>=0,V26>=0,V3>=0,V>=3] 
* Loop 166: fun19(V,V3,V26,V55,V65,V71,Out) [V71>=1,V65>=1,V55>=1,V26>=0,V3>=1,V>=0,V26+V55+1=Out] 
* Loop 167: fun19(V,V3,V26,V55,V65,V71,Out) [V71>=1,V65>=1,V55>=1,V26>=0,V3>=1,V>=0,V3+V26+1=Out] 
* Loop 168: fun19(V,V3,V26,V55,V65,V71,Out) [V65>=1,V55>=1,V26>=0,V3>=1,V>=0,V26+V55+1=Out,V71=0] 
* Loop 169: fun19(V,V3,V26,V55,V65,V71,Out) [V65>=1,V55>=1,V26>=0,V3>=1,V>=0,V3+V26+1=Out,V71=0] 
* Loop 170: fun19(V,V3,V26,V55,V65,V71,Out) [V65>=1,V55>=0,V26>=0,V3>=0,V>=0,V26+1=Out,V71=0] 
* Loop 171: fun19(V,V3,V26,V55,V65,V71,Out) [V71>=1,V55>=1,V26>=0,V3>=1,V>=0,V26+V55+1=Out,V65=0] 
* Loop 172: fun19(V,V3,V26,V55,V65,V71,Out) [V71>=1,V55>=1,V26>=0,V3>=1,V>=0,V3+V26+1=Out,V65=0] 
* Loop 173: fun19(V,V3,V26,V55,V65,V71,Out) [V71>=1,V55>=0,V26>=0,V3>=0,V>=0,V26+1=Out,V65=0] 
* Loop 174: fun19(V,V3,V26,V55,V65,V71,Out) [V+V26+2>=Out,Out>=V26+1,V55>=0,V26>=0,V3>=0,V>=3,V71=0,V65=0] 
* Loop 175: fun19(V,V3,V26,V55,V65,V71,Out) [V71>=0,V65>=0,V55>=0,V26>=0,V3>=0,V>=0,V26+1=Out] 
* Loop 176: fun19(V,V3,V26,V55,V65,V71,Out) [V71>=1,V65>=1,V26>=0,V3>=1,V>=0,V3+V26+1=Out,V55=0] 
* Loop 177: fun19(V,V3,V26,V55,V65,V71,Out) [V65>=1,V26>=0,V3>=1,V>=0,V3+V26+1=Out,V71=0,V55=0] 
* Loop 178: fun19(V,V3,V26,V55,V65,V71,Out) [V71>=1,V26>=0,V3>=1,V>=0,V3+V26+1=Out,V65=0,V55=0] 
* Loop 179: fun19(V,V3,V26,V55,V65,V71,Out) [V71>=1,V65>=1,V55>=1,V26>=0,V>=0,V26+V55+1=Out,V3=0] 
* Loop 180: fun19(V,V3,V26,V55,V65,V71,Out) [V65>=1,V55>=1,V26>=0,V>=0,V26+V55+1=Out,V71=0,V3=0] 
* Loop 181: fun19(V,V3,V26,V55,V65,V71,Out) [V71>=1,V55>=1,V26>=0,V>=0,V26+V55+1=Out,V65=0,V3=0] 
* Loop 182: fun19(V,V3,V26,V55,V65,V71,Out) [V71>=1,V65>=1,V55>=0,V26>=0,V3>=0,V26+4=Out,V=2] 
* Loop 183: fun19(V,V3,V26,V55,V65,V71,Out) [V55>=0,V26>=0,V3>=0,V26+4=Out,V71=0,V65=0,V=2] 
* Loop 184: fun19(V,V3,V26,V55,V65,V71,Out) [V71>=1,V65>=1,V55>=0,V26>=0,V3>=0,V26+3=Out,V=0] 
* Loop 185: fun19(V,V3,V26,V55,V65,V71,Out) [V55>=0,V26>=0,V3>=0,V26+3=Out,V71=0,V65=0,V=0] 

### Ranking functions of CR fun19(V,V3,V26,V55,V65,V71,Out) 

#### Partial ranking functions of CR fun19(V,V3,V26,V55,V65,V71,Out) 


### Resulting Chains:fun19(V,V3,V26,V55,V65,V71,Out) 
* [185]
* [184]
* [183]
* [182]
* [181]
* [180]
* [179]
* [178]
* [177]
* [176]
* [175]
* [174]
* [173]
* [172]
* [171]
* [170]
* [169]
* [168]
* [167]
* [166]
* [165]


### Merging Chains  fun19/7 into  External patterns of execution 
* [[185]] --> 1 
* [[184]] --> 2 
* [[183]] --> 3 
* [[182]] --> 4 
* [[181]] --> 5 
* [[180]] --> 6 
* [[179]] --> 7 
* [[178]] --> 8 
* [[177]] --> 9 
* [[176]] --> 10 
* [[174]] --> 11 
* [[173],[175]] --> 12 
* [[172]] --> 13 
* [[171]] --> 14 
* [[170]] --> 15 
* [[169]] --> 16 
* [[168]] --> 17 
* [[167]] --> 18 
* [[166]] --> 19 
* [[165]] --> 20 


### Specialization of cost equations fun22/2 
* CE 89 is refined into CE [266] 
* CE 91 is refined into CE [267] 
* CE 90 is refined into CE [268] 


#### Refined cost equations fun22/2 
* CE 266: fun22(V,Out) = 1
     [V>=Out+1,Out>=0] 
* CE 267: fun22(V,Out) = 0
     [V>=0,Out=0] 
* CE 268: fun22(V,Out) = 1+ fun(W,X):1
     [X=0,W=0,Out=0,V=1] 

### Cost equations --> "Loop" of fun22/2 
* CEs [266] --> Loop 186 
* CEs [267,268] --> Loop 187 

#### Loops of fun22/2 
* Loop 186: fun22(V,Out) [V>=Out+1,Out>=0] 
* Loop 187: fun22(V,Out) [V>=0,Out=0] 

### Ranking functions of CR fun22(V,Out) 

#### Partial ranking functions of CR fun22(V,Out) 


### Resulting Chains:fun22(V,Out) 
* [187]
* [186]


### Merging Chains  fun22/2 into  External patterns of execution 
* [[187]] --> 1 
* [[186]] --> 2 


### Specialization of cost equations fun18/7 
* CE 84 is refined into CE [269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304] 


#### Refined cost equations fun18/7 
* CE 269: fun18(V,V3,V26,V55,V65,V71,Out) = 2+ fun22(V26,W71):1+ fun19(X71,V3,Y71,V,Z71,A72,Out):1
     [Out>=3,V>=0,V3>=0,V26>=0,Out=Y71+3,Out=V55+3,A72=0,Z71=0,X71=0,W71=0,V71=0,V65=0] 
* CE 270: fun18(V,V3,V26,V55,V65,V71,Out) = 2+ fun22(V26,W71):1+ fun19(X71,V3,Y71,V,V65,V71,Out):2
     [Out>=3,V71>=1,V65>=1,V>=0,V3>=0,V26>=0,Out=Y71+3,Out=V55+3,X71=0,W71=0] 
* CE 271: fun18(V,V3,V26,V55,V65,V71,Out) = 2+ fun22(V26,W71):1+ fun19(X71,Y71,V55,Z71,A72,V71,Out):5
     [Out>=V55+2,V71>=1,V55>=0,V26>=0,Out=V55+Z71+1,Out=V+V55+1,A72=0,Y71=0,X71=0,W71=0,V65=0,V3=0] 
* CE 272: fun18(V,V3,V26,V55,V65,V71,Out) = 2+ fun22(V26,W71):1+ fun19(X71,Y71,V55,Z71,V65,A72,Out):6
     [Out>=V55+2,V65>=1,V55>=0,V26>=0,Out=V55+Z71+1,Out=V+V55+1,A72=0,Y71=0,X71=0,W71=0,V71=0,V3=0] 
* CE 273: fun18(V,V3,V26,V55,V65,V71,Out) = 2+ fun22(V26,W71):1+ fun19(X71,Y71,V55,Z71,V65,V71,Out):7
     [Out>=V55+2,V71>=1,V65>=1,V55>=0,V26>=0,Out=V55+Z71+1,Out=V+V55+1,Y71=0,X71=0,W71=0,V3=0] 
* CE 274: fun18(V,V3,V26,V55,V65,V71,Out) = 2+ fun22(V26,W71):1+ fun19(X71,V3,Y71,Z71,A72,V71,Out):8
     [Out>=V3+1,V71>=1,V3>=1,V26>=0,Out=V3+Y71+1,Out=V3+V55+1,A72=0,Z71=0,X71=0,W71=0,V65=0,V=0] 
* CE 275: fun18(V,V3,V26,V55,V65,V71,Out) = 2+ fun22(V26,W71):1+ fun19(X71,V3,Y71,Z71,V65,A72,Out):9
     [Out>=V3+1,V65>=1,V3>=1,V26>=0,Out=V3+Y71+1,Out=V3+V55+1,A72=0,Z71=0,X71=0,W71=0,V71=0,V=0] 
* CE 276: fun18(V,V3,V26,V55,V65,V71,Out) = 2+ fun22(V26,W71):1+ fun19(X71,V3,Y71,Z71,V65,V71,Out):10
     [Out>=V3+1,V71>=1,V65>=1,V3>=1,V26>=0,Out=V3+Y71+1,Out=V3+V55+1,Z71=0,X71=0,W71=0,V=0] 
* CE 277: fun18(V,V3,V26,V55,V65,V71,Out) = 2+ fun22(V26,W71):1+ fun19(X71,V3,Y71,V,V65,V71,Out):12
     [Out>=1,V71>=0,V65>=0,V>=0,V3>=0,V26>=0,Out=Y71+1,Out=V55+1,X71=0,W71=0] 
* CE 278: fun18(V,V3,V26,V55,V65,V71,Out) = 2+ fun22(V26,W71):1+ fun19(X71,V3,Y71,V,Z71,V71,Out):13
     [Out>=V3+1,V71>=1,V>=1,V3>=1,V26>=0,Out=V3+Y71+1,Out=V3+V55+1,Z71=0,X71=0,W71=0,V65=0] 
* CE 279: fun18(V,V3,V26,V55,V65,V71,Out) = 2+ fun22(V26,W71):1+ fun19(X71,V3,V55,Y71,Z71,V71,Out):14
     [Out>=V55+2,V71>=1,V55>=0,V3>=1,V26>=0,Out=V55+Y71+1,Out=V+V55+1,Z71=0,X71=0,W71=0,V65=0] 
* CE 280: fun18(V,V3,V26,V55,V65,V71,Out) = 2+ fun22(V26,W71):1+ fun19(X71,V3,Y71,V,V65,Z71,Out):15
     [Out>=1,V65>=1,V>=0,V3>=0,V26>=0,Out=Y71+1,Out=V55+1,Z71=0,X71=0,W71=0,V71=0] 
* CE 281: fun18(V,V3,V26,V55,V65,V71,Out) = 2+ fun22(V26,W71):1+ fun19(X71,V3,Y71,V,V65,Z71,Out):16
     [Out>=V3+1,V65>=1,V>=1,V3>=1,V26>=0,Out=V3+Y71+1,Out=V3+V55+1,Z71=0,X71=0,W71=0,V71=0] 
* CE 282: fun18(V,V3,V26,V55,V65,V71,Out) = 2+ fun22(V26,W71):1+ fun19(X71,V3,V55,Y71,V65,Z71,Out):17
     [Out>=V55+2,V65>=1,V55>=0,V3>=1,V26>=0,Out=V55+Y71+1,Out=V+V55+1,Z71=0,X71=0,W71=0,V71=0] 
* CE 283: fun18(V,V3,V26,V55,V65,V71,Out) = 2+ fun22(V26,W71):1+ fun19(X71,V3,Y71,V,V65,V71,Out):18
     [Out>=V3+1,V71>=1,V65>=1,V>=1,V3>=1,V26>=0,Out=V3+Y71+1,Out=V3+V55+1,X71=0,W71=0] 
* CE 284: fun18(V,V3,V26,V55,V65,V71,Out) = 2+ fun22(V26,W71):1+ fun19(X71,V3,V55,Y71,V65,V71,Out):19
     [Out>=V55+2,V71>=1,V65>=1,V55>=0,V3>=1,V26>=0,Out=V55+Y71+1,Out=V+V55+1,X71=0,W71=0] 
* CE 285: fun18(V,V3,V26,V55,V65,V71,Out) = 2+ fun22(V26,W71):2+ fun19(X71,V3,Y71,V,Z71,A72,Out):1
     [Out>=3,V>=0,V3>=0,V26>=1,Out=Y71+3,Out=V55+3,A72=0,Z71=0,X71=0,W71=0,V71=0,V65=0] 
* CE 286: fun18(V,V3,V26,V55,V65,V71,Out) = 2+ fun22(V26,W71):2+ fun19(X71,V3,Y71,V,V65,V71,Out):2
     [Out>=3,V71>=1,V65>=1,V>=0,V3>=0,V26>=1,Out=Y71+3,Out=V55+3,X71=0,W71=0] 
* CE 287: fun18(V,V3,V26,V55,V65,V71,Out) = 2+ fun22(V26,W71):2+ fun19(X71,V3,Y71,V,Z71,A72,Out):3
     [Out>=4,V>=0,V3>=0,V26>=3,Out=Y71+4,Out=V55+4,A72=0,Z71=0,X71=2,W71=2,V71=0,V65=0] 
* CE 288: fun18(V,V3,V26,V55,V65,V71,Out) = 2+ fun22(V26,W71):2+ fun19(X71,V3,Y71,V,V65,V71,Out):4
     [Out>=4,V71>=1,V65>=1,V>=0,V3>=0,V26>=3,Out=Y71+4,Out=V55+4,X71=2,W71=2] 
* CE 289: fun18(V,V3,V26,V55,V65,V71,Out) = 2+ fun22(V26,W71):2+ fun19(W71,X71,V55,Y71,Z71,V71,Out):5
     [Out>=V55+2,V26>=W71+1,V71>=1,V55>=0,W71>=0,Out=V55+Y71+1,Out=V+V55+1,Z71=0,X71=0,V65=0,V3=0] 
* CE 290: fun18(V,V3,V26,V55,V65,V71,Out) = 2+ fun22(V26,W71):2+ fun19(W71,X71,V55,Y71,V65,Z71,Out):6
     [Out>=V55+2,V26>=W71+1,V65>=1,V55>=0,W71>=0,Out=V55+Y71+1,Out=V+V55+1,Z71=0,X71=0,V71=0,V3=0] 
* CE 291: fun18(V,V3,V26,V55,V65,V71,Out) = 2+ fun22(V26,W71):2+ fun19(W71,X71,V55,Y71,V65,V71,Out):7
     [Out>=V55+2,V26>=W71+1,V71>=1,V65>=1,V55>=0,W71>=0,Out=V55+Y71+1,Out=V+V55+1,X71=0,V3=0] 
* CE 292: fun18(V,V3,V26,V55,V65,V71,Out) = 2+ fun22(V26,W71):2+ fun19(W71,V3,X71,Y71,Z71,V71,Out):8
     [Out>=V3+1,V26>=W71+1,V71>=1,V3>=1,W71>=0,Out=V3+X71+1,Out=V3+V55+1,Z71=0,Y71=0,V65=0,V=0] 
* CE 293: fun18(V,V3,V26,V55,V65,V71,Out) = 2+ fun22(V26,W71):2+ fun19(W71,V3,X71,Y71,V65,Z71,Out):9
     [Out>=V3+1,V26>=W71+1,V65>=1,V3>=1,W71>=0,Out=V3+X71+1,Out=V3+V55+1,Z71=0,Y71=0,V71=0,V=0] 
* CE 294: fun18(V,V3,V26,V55,V65,V71,Out) = 2+ fun22(V26,W71):2+ fun19(W71,V3,X71,Y71,V65,V71,Out):10
     [Out>=V3+1,V26>=W71+1,V71>=1,V65>=1,V3>=1,W71>=0,Out=V3+X71+1,Out=V3+V55+1,Y71=0,V=0] 
* CE 295: fun18(V,V3,V26,V55,V65,V71,Out) = 2+ fun22(V26,W71):2+ fun19(W71,V3,V55,V,X71,Y71,Out):11
     [V55+W71+2>=Out,Out>=V55+1,V26>=W71+1,V>=0,V55>=0,V3>=0,W71>=3,Y71=0,X71=0,V71=0,V65=0] 
* CE 296: fun18(V,V3,V26,V55,V65,V71,Out) = 2+ fun22(V26,W71):2+ fun19(W71,V3,X71,V,V65,V71,Out):12
     [V26>=W71+1,Out>=1,V71>=0,V65>=0,V>=0,V3>=0,W71>=0,Out=X71+1,Out=V55+1] 
* CE 297: fun18(V,V3,V26,V55,V65,V71,Out) = 2+ fun22(V26,W71):2+ fun19(W71,V3,X71,V,Y71,V71,Out):13
     [Out>=V3+1,V26>=W71+1,V71>=1,V>=1,V3>=1,W71>=0,Out=V3+X71+1,Out=V3+V55+1,Y71=0,V65=0] 
* CE 298: fun18(V,V3,V26,V55,V65,V71,Out) = 2+ fun22(V26,W71):2+ fun19(W71,V3,V55,X71,Y71,V71,Out):14
     [Out>=V55+2,V26>=W71+1,V71>=1,V55>=0,V3>=1,W71>=0,Out=V55+X71+1,Out=V+V55+1,Y71=0,V65=0] 
* CE 299: fun18(V,V3,V26,V55,V65,V71,Out) = 2+ fun22(V26,W71):2+ fun19(W71,V3,X71,V,V65,Y71,Out):15
     [V26>=W71+1,Out>=1,V65>=1,V>=0,V3>=0,W71>=0,Out=X71+1,Out=V55+1,Y71=0,V71=0] 
* CE 300: fun18(V,V3,V26,V55,V65,V71,Out) = 2+ fun22(V26,W71):2+ fun19(W71,V3,X71,V,V65,Y71,Out):16
     [Out>=V3+1,V26>=W71+1,V65>=1,V>=1,V3>=1,W71>=0,Out=V3+X71+1,Out=V3+V55+1,Y71=0,V71=0] 
* CE 301: fun18(V,V3,V26,V55,V65,V71,Out) = 2+ fun22(V26,W71):2+ fun19(W71,V3,V55,X71,V65,Y71,Out):17
     [Out>=V55+2,V26>=W71+1,V65>=1,V55>=0,V3>=1,W71>=0,Out=V55+X71+1,Out=V+V55+1,Y71=0,V71=0] 
* CE 302: fun18(V,V3,V26,V55,V65,V71,Out) = 2+ fun22(V26,W71):2+ fun19(W71,V3,X71,V,V65,V71,Out):18
     [Out>=V3+1,V26>=W71+1,V71>=1,V65>=1,V>=1,V3>=1,W71>=0,Out=V3+X71+1,Out=V3+V55+1] 
* CE 303: fun18(V,V3,V26,V55,V65,V71,Out) = 2+ fun22(V26,W71):2+ fun19(W71,V3,V55,X71,V65,V71,Out):19
     [Out>=V55+2,V26>=W71+1,V71>=1,V65>=1,V55>=0,V3>=1,W71>=0,Out=V55+X71+1,Out=V+V55+1] 
* CE 304: fun18(V,V3,V26,V55,V65,V71,Out) = 2+ fun22(V26,W71):2+ fun19(W71,V3,V55,V,V65,V71,Out):20
     [V55+W71+2>=Out,Out>=V55+1,V26>=W71+1,V71>=1,V65>=1,V>=0,V55>=0,V3>=0,W71>=3] 

### Cost equations --> "Loop" of fun18/7 
* CEs [304] --> Loop 188 
* CEs [283,302] --> Loop 189 
* CEs [284,303] --> Loop 190 
* CEs [288] --> Loop 191 
* CEs [270,286] --> Loop 192 
* CEs [281,300] --> Loop 193 
* CEs [282,301] --> Loop 194 
* CEs [277,280,296,299] --> Loop 195 
* CEs [278,297] --> Loop 196 
* CEs [279,298] --> Loop 197 
* CEs [295] --> Loop 198 
* CEs [287] --> Loop 199 
* CEs [269,285] --> Loop 200 
* CEs [273,291] --> Loop 201 
* CEs [272,290] --> Loop 202 
* CEs [271,289] --> Loop 203 
* CEs [276,294] --> Loop 204 
* CEs [275,293] --> Loop 205 
* CEs [274,292] --> Loop 206 

#### Loops of fun18/7 
* Loop 188: fun18(V,V3,V26,V55,V65,V71,Out) [V26+V55+1>=Out,Out>=V55+1,V71>=1,V65>=1,V55>=0,V26>=4,V3>=0,V>=0] 
* Loop 189: fun18(V,V3,V26,V55,V65,V71,Out) [V71>=1,V65>=1,V55>=0,V26>=0,V3>=1,V>=1,V3+V55+1=Out] 
* Loop 190: fun18(V,V3,V26,V55,V65,V71,Out) [V71>=1,V65>=1,V55>=0,V26>=0,V3>=1,V>=1,V+V55+1=Out] 
* Loop 191: fun18(V,V3,V26,V55,V65,V71,Out) [V71>=1,V65>=1,V55>=0,V26>=3,V3>=0,V>=0,V55+4=Out] 
* Loop 192: fun18(V,V3,V26,V55,V65,V71,Out) [V71>=1,V65>=1,V55>=0,V26>=0,V3>=0,V>=0,V55+3=Out] 
* Loop 193: fun18(V,V3,V26,V55,V65,V71,Out) [V65>=1,V55>=0,V26>=0,V3>=1,V>=1,V3+V55+1=Out,V71=0] 
* Loop 194: fun18(V,V3,V26,V55,V65,V71,Out) [V65>=1,V55>=0,V26>=0,V3>=1,V>=1,V+V55+1=Out,V71=0] 
* Loop 195: fun18(V,V3,V26,V55,V65,V71,Out) [V71>=0,V65>=0,V55>=0,V26>=0,V3>=0,V>=0,V55+1=Out] 
* Loop 196: fun18(V,V3,V26,V55,V65,V71,Out) [V71>=1,V55>=0,V26>=0,V3>=1,V>=1,V3+V55+1=Out,V65=0] 
* Loop 197: fun18(V,V3,V26,V55,V65,V71,Out) [V71>=1,V55>=0,V26>=0,V3>=1,V>=1,V+V55+1=Out,V65=0] 
* Loop 198: fun18(V,V3,V26,V55,V65,V71,Out) [V26+V55+1>=Out,Out>=V55+1,V55>=0,V26>=4,V3>=0,V>=0,V71=0,V65=0] 
* Loop 199: fun18(V,V3,V26,V55,V65,V71,Out) [V55>=0,V26>=3,V3>=0,V>=0,V55+4=Out,V71=0,V65=0] 
* Loop 200: fun18(V,V3,V26,V55,V65,V71,Out) [V55>=0,V26>=0,V3>=0,V>=0,V55+3=Out,V71=0,V65=0] 
* Loop 201: fun18(V,V3,V26,V55,V65,V71,Out) [V71>=1,V65>=1,V55>=0,V26>=0,V>=1,V+V55+1=Out,V3=0] 
* Loop 202: fun18(V,V3,V26,V55,V65,V71,Out) [V65>=1,V55>=0,V26>=0,V>=1,V+V55+1=Out,V71=0,V3=0] 
* Loop 203: fun18(V,V3,V26,V55,V65,V71,Out) [V71>=1,V55>=0,V26>=0,V>=1,V+V55+1=Out,V65=0,V3=0] 
* Loop 204: fun18(V,V3,V26,V55,V65,V71,Out) [V71>=1,V65>=1,V55>=0,V26>=0,V3>=1,V3+V55+1=Out,V=0] 
* Loop 205: fun18(V,V3,V26,V55,V65,V71,Out) [V65>=1,V55>=0,V26>=0,V3>=1,V3+V55+1=Out,V71=0,V=0] 
* Loop 206: fun18(V,V3,V26,V55,V65,V71,Out) [V71>=1,V55>=0,V26>=0,V3>=1,V3+V55+1=Out,V65=0,V=0] 

### Ranking functions of CR fun18(V,V3,V26,V55,V65,V71,Out) 

#### Partial ranking functions of CR fun18(V,V3,V26,V55,V65,V71,Out) 


### Resulting Chains:fun18(V,V3,V26,V55,V65,V71,Out) 
* [206]
* [205]
* [204]
* [203]
* [202]
* [201]
* [200]
* [199]
* [198]
* [197]
* [196]
* [195]
* [194]
* [193]
* [192]
* [191]
* [190]
* [189]
* [188]


### Merging Chains  fun18/7 into  External patterns of execution 
* [[206]] --> 1 
* [[205]] --> 2 
* [[204]] --> 3 
* [[203]] --> 4 
* [[202]] --> 5 
* [[201]] --> 6 
* [[199]] --> 7 
* [[200]] --> 8 
* [[198]] --> 9 
* [[197]] --> 10 
* [[196]] --> 11 
* [[194]] --> 12 
* [[193]] --> 13 
* [[191]] --> 14 
* [[192]] --> 15 
* [[195]] --> 16 
* [[190]] --> 17 
* [[189]] --> 18 
* [[188]] --> 19 


### Specialization of cost equations fun17/6 
* CE 53 is refined into CE [305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333] 


#### Refined cost equations fun17/6 
* CE 305: fun17(V,V3,V26,V55,V65,Out) = 2+ fun22(W65,X65):1+ fun18(Y65,V3,V26,Z65,A66,V65,Out):1
     [Out>=V3+1,V65>=1,V26>=0,V3>=1,Out=V3+Z65+1,Out=V3+W65+1,Out=V+V3+1,A66=0,Y65=0,X65=0,V55=0] 
* CE 306: fun17(V,V3,V26,V55,V65,Out) = 2+ fun22(W65,X65):1+ fun18(Y65,V3,V26,Z65,V55,A66,Out):2
     [Out>=V3+1,V55>=1,V26>=0,V3>=1,Out=V3+Z65+1,Out=V3+W65+1,Out=V+V3+1,A66=0,Y65=0,X65=0,V65=0] 
* CE 307: fun17(V,V3,V26,V55,V65,Out) = 2+ fun22(W65,X65):1+ fun18(Y65,V3,V26,Z65,V55,V65,Out):3
     [Out>=V3+1,V65>=1,V55>=1,V26>=0,V3>=1,Out=V3+Z65+1,Out=V3+W65+1,Out=V+V3+1,Y65=0,X65=0] 
* CE 308: fun17(V,V3,V26,V55,V65,Out) = 2+ fun22(W65,X65):1+ fun18(Y65,V3,V26,Z65,A66,B66,Out):7
     [Out>=4,V26>=3,V3>=0,Out=Z65+4,Out=W65+4,Out=V+4,B66=0,A66=0,Y65=0,X65=0,V65=0,V55=0] 
* CE 309: fun17(V,V3,V26,V55,V65,Out) = 2+ fun22(W65,X65):1+ fun18(Y65,V3,V26,Z65,A66,B66,Out):8
     [Out>=3,V26>=0,V3>=0,Out=Z65+3,Out=W65+3,Out=V+3,B66=0,A66=0,Y65=0,X65=0,V65=0,V55=0] 
* CE 310: fun17(V,V3,V26,V55,V65,Out) = 2+ fun22(V,W65):1+ fun18(X65,V3,V26,V,Y65,Z65,Out):9
     [V+V26+1>=Out,Out>=V+1,V>=0,V26>=4,V3>=0,Z65=0,Y65=0,X65=0,W65=0,V65=0,V55=0] 
* CE 311: fun17(V,V3,V26,V55,V65,Out) = 2+ fun22(W65,X65):1+ fun18(Y65,V3,V26,Z65,V55,V65,Out):14
     [Out>=4,V65>=1,V55>=1,V26>=3,V3>=0,Out=Z65+4,Out=W65+4,Out=V+4,Y65=0,X65=0] 
* CE 312: fun17(V,V3,V26,V55,V65,Out) = 2+ fun22(W65,X65):1+ fun18(Y65,V3,V26,Z65,V55,V65,Out):15
     [Out>=3,V65>=1,V55>=1,V26>=0,V3>=0,Out=Z65+3,Out=W65+3,Out=V+3,Y65=0,X65=0] 
* CE 313: fun17(V,V3,V26,V55,V65,Out) = 2+ fun22(W65,X65):1+ fun18(Y65,V3,V26,Z65,V55,V65,Out):16
     [Out>=1,V65>=0,V55>=0,V26>=0,V3>=0,Out=Z65+1,Out=W65+1,Out=V+1,Y65=0,X65=0] 
* CE 314: fun17(V,V3,V26,V55,V65,Out) = 2+ fun22(V,W65):1+ fun18(X65,V3,V26,V,V55,V65,Out):19
     [V+V26+1>=Out,Out>=V+1,V65>=1,V55>=1,V>=0,V26>=4,V3>=0,X65=0,W65=0] 
* CE 315: fun17(V,V3,V26,V55,V65,Out) = 2+ fun22(W65,X65):2+ fun18(Y65,V3,V26,Z65,A66,V65,Out):1
     [Out>=V3+2,V65>=1,V26>=0,V3>=1,Out=V3+Z65+1,Out=V3+W65+1,Out=V+V3+1,A66=0,Y65=0,X65=0,V55=0] 
* CE 316: fun17(V,V3,V26,V55,V65,Out) = 2+ fun22(W65,X65):2+ fun18(Y65,V3,V26,Z65,V55,A66,Out):2
     [Out>=V3+2,V55>=1,V26>=0,V3>=1,Out=V3+Z65+1,Out=V3+W65+1,Out=V+V3+1,A66=0,Y65=0,X65=0,V65=0] 
* CE 317: fun17(V,V3,V26,V55,V65,Out) = 2+ fun22(W65,X65):2+ fun18(Y65,V3,V26,Z65,V55,V65,Out):3
     [Out>=V3+2,V65>=1,V55>=1,V26>=0,V3>=1,Out=V3+Z65+1,Out=V3+W65+1,Out=V+V3+1,Y65=0,X65=0] 
* CE 318: fun17(V,V3,V26,V55,V65,Out) = 2+ fun22(W65,X65):2+ fun18(X65,Y65,V26,Z65,A66,V65,Out):4
     [Out>=2*X65+2,V65>=1,V26>=0,X65>=1,Out=X65+Z65+1,Out=W65+X65+1,Out=V+X65+1,A66=0,Y65=0,V55=0,V3=0] 
* CE 319: fun17(V,V3,V26,V55,V65,Out) = 2+ fun22(W65,X65):2+ fun18(X65,Y65,V26,Z65,V55,A66,Out):5
     [Out>=2*X65+2,V55>=1,V26>=0,X65>=1,Out=X65+Z65+1,Out=W65+X65+1,Out=V+X65+1,A66=0,Y65=0,V65=0,V3=0] 
* CE 320: fun17(V,V3,V26,V55,V65,Out) = 2+ fun22(W65,X65):2+ fun18(X65,Y65,V26,Z65,V55,V65,Out):6
     [Out>=2*X65+2,V65>=1,V55>=1,V26>=0,X65>=1,Out=X65+Z65+1,Out=W65+X65+1,Out=V+X65+1,Y65=0,V3=0] 
* CE 321: fun17(V,V3,V26,V55,V65,Out) = 2+ fun22(W65,X65):2+ fun18(X65,V3,V26,Y65,Z65,A66,Out):7
     [Out>=X65+5,V26>=3,V3>=0,X65>=0,Out=Y65+4,Out=W65+4,Out=V+4,A66=0,Z65=0,V65=0,V55=0] 
* CE 322: fun17(V,V3,V26,V55,V65,Out) = 2+ fun22(W65,X65):2+ fun18(X65,V3,V26,Y65,Z65,A66,Out):8
     [Out>=X65+4,V26>=0,V3>=0,X65>=0,Out=Y65+3,Out=W65+3,Out=V+3,A66=0,Z65=0,V65=0,V55=0] 
* CE 323: fun17(V,V3,V26,V55,V65,Out) = 2+ fun22(V,W65):2+ fun18(W65,V3,V26,V,X65,Y65,Out):9
     [V+V26+1>=Out,Out>=V+1,V>=W65+1,V26>=4,V3>=0,W65>=0,Y65=0,X65=0,V65=0,V55=0] 
* CE 324: fun17(V,V3,V26,V55,V65,Out) = 2+ fun22(W65,X65):2+ fun18(X65,V3,V26,Y65,Z65,V65,Out):10
     [Out>=2*X65+2,V65>=1,V26>=0,V3>=1,X65>=1,Out=X65+Y65+1,Out=W65+X65+1,Out=V+X65+1,Z65=0,V55=0] 
* CE 325: fun17(V,V3,V26,V55,V65,Out) = 2+ fun22(W65,X65):2+ fun18(X65,V3,V26,Y65,Z65,V65,Out):11
     [Out>=V3+X65+2,V65>=1,V26>=0,V3>=1,X65>=1,Out=V3+Y65+1,Out=V3+W65+1,Out=V+V3+1,Z65=0,V55=0] 
* CE 326: fun17(V,V3,V26,V55,V65,Out) = 2+ fun22(W65,X65):2+ fun18(X65,V3,V26,Y65,V55,Z65,Out):12
     [Out>=2*X65+2,V55>=1,V26>=0,V3>=1,X65>=1,Out=X65+Y65+1,Out=W65+X65+1,Out=V+X65+1,Z65=0,V65=0] 
* CE 327: fun17(V,V3,V26,V55,V65,Out) = 2+ fun22(W65,X65):2+ fun18(X65,V3,V26,Y65,V55,Z65,Out):13
     [Out>=V3+X65+2,V55>=1,V26>=0,V3>=1,X65>=1,Out=V3+Y65+1,Out=V3+W65+1,Out=V+V3+1,Z65=0,V65=0] 
* CE 328: fun17(V,V3,V26,V55,V65,Out) = 2+ fun22(W65,X65):2+ fun18(X65,V3,V26,Y65,V55,V65,Out):14
     [Out>=X65+5,V65>=1,V55>=1,V26>=3,V3>=0,X65>=0,Out=Y65+4,Out=W65+4,Out=V+4] 
* CE 329: fun17(V,V3,V26,V55,V65,Out) = 2+ fun22(W65,X65):2+ fun18(X65,V3,V26,Y65,V55,V65,Out):15
     [Out>=X65+4,V65>=1,V55>=1,V26>=0,V3>=0,X65>=0,Out=Y65+3,Out=W65+3,Out=V+3] 
* CE 330: fun17(V,V3,V26,V55,V65,Out) = 2+ fun22(W65,X65):2+ fun18(X65,V3,V26,Y65,V55,V65,Out):16
     [Out>=X65+2,V65>=0,V55>=0,V26>=0,V3>=0,X65>=0,Out=Y65+1,Out=W65+1,Out=V+1] 
* CE 331: fun17(V,V3,V26,V55,V65,Out) = 2+ fun22(W65,X65):2+ fun18(X65,V3,V26,Y65,V55,V65,Out):17
     [Out>=2*X65+2,V65>=1,V55>=1,V26>=0,V3>=1,X65>=1,Out=X65+Y65+1,Out=W65+X65+1,Out=V+X65+1] 
* CE 332: fun17(V,V3,V26,V55,V65,Out) = 2+ fun22(W65,X65):2+ fun18(X65,V3,V26,Y65,V55,V65,Out):18
     [Out>=V3+X65+2,V65>=1,V55>=1,V26>=0,V3>=1,X65>=1,Out=V3+Y65+1,Out=V3+W65+1,Out=V+V3+1] 
* CE 333: fun17(V,V3,V26,V55,V65,Out) = 2+ fun22(V,W65):2+ fun18(W65,V3,V26,V,V55,V65,Out):19
     [V+V26+1>=Out,Out>=V+1,V>=W65+1,V65>=1,V55>=1,V26>=4,V3>=0,W65>=0] 

### Cost equations --> "Loop" of fun17/6 
* CEs [331] --> Loop 207 
* CEs [314,333] --> Loop 208 
* CEs [307,317,332] --> Loop 209 
* CEs [311,328] --> Loop 210 
* CEs [312,329] --> Loop 211 
* CEs [313,330] --> Loop 212 
* CEs [326] --> Loop 213 
* CEs [306,316,327] --> Loop 214 
* CEs [324] --> Loop 215 
* CEs [305,315,325] --> Loop 216 
* CEs [310,323] --> Loop 217 
* CEs [308,321] --> Loop 218 
* CEs [309,322] --> Loop 219 
* CEs [320] --> Loop 220 
* CEs [319] --> Loop 221 
* CEs [318] --> Loop 222 

#### Loops of fun17/6 
* Loop 207: fun17(V,V3,V26,V55,V65,Out) [2*V>=Out,Out>=V+2,V65>=1,V55>=1,V26>=0,V3>=1] 
* Loop 208: fun17(V,V3,V26,V55,V65,Out) [V+V26+1>=Out,Out>=V+1,V65>=1,V55>=1,V26>=4,V3>=0,V>=0] 
* Loop 209: fun17(V,V3,V26,V55,V65,Out) [V65>=1,V55>=1,V26>=0,V3>=1,V>=0,V+V3+1=Out] 
* Loop 210: fun17(V,V3,V26,V55,V65,Out) [V65>=1,V55>=1,V26>=3,V3>=0,V>=0,V+4=Out] 
* Loop 211: fun17(V,V3,V26,V55,V65,Out) [V65>=1,V55>=1,V26>=0,V3>=0,V>=0,V+3=Out] 
* Loop 212: fun17(V,V3,V26,V55,V65,Out) [V65>=0,V55>=0,V26>=0,V3>=0,V>=0,V+1=Out] 
* Loop 213: fun17(V,V3,V26,V55,V65,Out) [2*V>=Out,Out>=V+2,V55>=1,V26>=0,V3>=1,V65=0] 
* Loop 214: fun17(V,V3,V26,V55,V65,Out) [V55>=1,V26>=0,V3>=1,V>=0,V+V3+1=Out,V65=0] 
* Loop 215: fun17(V,V3,V26,V55,V65,Out) [2*V>=Out,Out>=V+2,V65>=1,V26>=0,V3>=1,V55=0] 
* Loop 216: fun17(V,V3,V26,V55,V65,Out) [V65>=1,V26>=0,V3>=1,V>=0,V+V3+1=Out,V55=0] 
* Loop 217: fun17(V,V3,V26,V55,V65,Out) [V+V26+1>=Out,Out>=V+1,V26>=4,V3>=0,V>=0,V65=0,V55=0] 
* Loop 218: fun17(V,V3,V26,V55,V65,Out) [V26>=3,V3>=0,V>=0,V+4=Out,V65=0,V55=0] 
* Loop 219: fun17(V,V3,V26,V55,V65,Out) [V26>=0,V3>=0,V>=0,V+3=Out,V65=0,V55=0] 
* Loop 220: fun17(V,V3,V26,V55,V65,Out) [2*V>=Out,Out>=V+2,V65>=1,V55>=1,V26>=0,V3=0] 
* Loop 221: fun17(V,V3,V26,V55,V65,Out) [2*V>=Out,Out>=V+2,V55>=1,V26>=0,V65=0,V3=0] 
* Loop 222: fun17(V,V3,V26,V55,V65,Out) [2*V>=Out,Out>=V+2,V65>=1,V26>=0,V55=0,V3=0] 

### Ranking functions of CR fun17(V,V3,V26,V55,V65,Out) 

#### Partial ranking functions of CR fun17(V,V3,V26,V55,V65,Out) 


### Resulting Chains:fun17(V,V3,V26,V55,V65,Out) 
* [222]
* [221]
* [220]
* [219]
* [218]
* [217]
* [216]
* [215]
* [214]
* [213]
* [212]
* [211]
* [210]
* [209]
* [208]
* [207]


### Merging Chains  fun17/6 into  External patterns of execution 
* [[222]] --> 1 
* [[221]] --> 2 
* [[220]] --> 3 
* [[218]] --> 4 
* [[219]] --> 5 
* [[217]] --> 6 
* [[216]] --> 7 
* [[215]] --> 8 
* [[214]] --> 9 
* [[213]] --> 10 
* [[210]] --> 11 
* [[211]] --> 12 
* [[212]] --> 13 
* [[209]] --> 14 
* [[208]] --> 15 
* [[207]] --> 16 


### Specialization of cost equations newline/4 
* CE 48 is refined into CE [334] 
* CE 51 is refined into CE [335] 
* CE 52 is refined into CE [336] 
* CE 49 is refined into CE [337] 
* CE 50 is refined into CE [338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353] 


#### Refined cost equations newline/4 
* CE 334: newline(V,V3,V26,Out) = 2
     [V26>=1,V3>=0,V>=0,Out=0] 
* CE 335: newline(V,V3,V26,Out) = 1
     [V26>=0,V3>=0,V>=0,Out=0] 
* CE 336: newline(V,V3,V26,Out) = 2
     [V3>=0,V>=0,Out=1,V26=1] 
* CE 337: newline(V,V3,V26,Out) = 3
     [V26>=1,V>=0,Out=1,V3=1] 
* CE 338: newline(V,V3,V26,Out) = 3+ newline(V,W26,X26,Y26)+ fun17(Y26,Z26,W26,A27,V,Out):1
     [2*Y26>=Out,Out>=Y26+2,X26>=0,V>=1,W26>=0,X26+1=V26,W26+1=V3,A27=0,Z26=0] 
* CE 339: newline(V,V3,V26,Out) = 3+ newline(W26,X26,Y26,Z26)+ fun17(Z26,A27,X26,B27,C27,Out):2
     [2*Z26>=Out,Out>=Z26+2,Y26>=0,B27>=1,X26>=0,B27+Y26+1=V26,X26+1=V3,W26=0,C27=0,A27=0,V=0] 
* CE 340: newline(V,V3,V26,Out) = 3+ newline(V,W26,X26,Y26)+ fun17(Y26,Z26,W26,A27,V,Out):3
     [2*Y26>=Out,Out>=Y26+2,X26>=0,V>=1,A27>=1,W26>=0,A27+X26+1=V26,W26+1=V3,Z26=0] 
* CE 341: newline(V,V3,V26,Out) = 3+ newline(W26,X26,Y26,Z26)+ fun17(A27,B27,X26,C27,D27,Out):4
     [Y26>=0,Out>=4,X26>=3,B27>=0,B27+X26+1=V3,Out=Z26+4,Out=A27+4,Y26+1=V26,W26=0,D27=0,C27=0,V=0] 
* CE 342: newline(V,V3,V26,Out) = 3+ newline(W26,X26,Y26,Z26)+ fun17(A27,B27,X26,C27,D27,Out):5
     [Y26>=0,Out>=3,X26>=0,B27>=0,B27+X26+1=V3,Out=Z26+3,Out=A27+3,Y26+1=V26,W26=0,D27=0,C27=0,V=0] 
* CE 343: newline(V,V3,V26,Out) = 3+ newline(W26,X26,Y26,Z26)+ fun17(Z26,A27,X26,B27,C27,Out):6
     [Z26+X26+1>=Out,Out>=Z26+1,Y26>=0,X26>=4,A27>=0,Z26>=0,A27+X26+1=V3,Y26+1=V26,W26=0,C27=0,B27=0,V=0] 
* CE 344: newline(V,V3,V26,Out) = 3+ newline(V,W26,X26,Y26)+ fun17(Y26,Z26,W26,A27,V,Out):7
     [Out>=Y26+2,X26>=0,V>=1,W26>=0,Y26>=0,Out+W26=V3+Y26,Out=Y26+Z26+1,X26+1=V26,A27=0] 
* CE 345: newline(V,V3,V26,Out) = 3+ newline(V,W26,X26,Y26)+ fun17(Y26,Z26,W26,A27,V,Out):8
     [2*Y26>=Out,Out>=Y26+2,X26>=0,V>=1,W26>=0,Z26>=1,Z26+W26+1=V3,X26+1=V26,A27=0] 
* CE 346: newline(V,V3,V26,Out) = 3+ newline(W26,X26,Y26,Z26)+ fun17(Z26,A27,X26,B27,C27,Out):9
     [Out>=Z26+2,Y26>=0,B27>=1,X26>=0,Z26>=0,Out+X26=V3+Z26,Out=Z26+A27+1,B27+Y26+1=V26,W26=0,C27=0,V=0] 
* CE 347: newline(V,V3,V26,Out) = 3+ newline(W26,X26,Y26,Z26)+ fun17(Z26,A27,X26,B27,C27,Out):10
     [2*Z26>=Out,Out>=Z26+2,Y26>=0,B27>=1,X26>=0,A27>=1,B27+Y26+1=V26,A27+X26+1=V3,W26=0,C27=0,V=0] 
* CE 348: newline(V,V3,V26,Out) = 3+ newline(V,W26,X26,Y26)+ fun17(Z26,A27,W26,B27,V,Out):11
     [X26>=0,Out>=4,V>=1,B27>=1,W26>=3,A27>=0,B27+X26+1=V26,A27+W26+1=V3,Out=Y26+4,Out=Z26+4] 
* CE 349: newline(V,V3,V26,Out) = 3+ newline(V,W26,X26,Y26)+ fun17(Z26,A27,W26,B27,V,Out):12
     [X26>=0,Out>=3,V>=1,B27>=1,W26>=0,A27>=0,B27+X26+1=V26,A27+W26+1=V3,Out=Y26+3,Out=Z26+3] 
* CE 350: newline(V,V3,V26,Out) = 3+ newline(V,W26,X26,Y26)+ fun17(Z26,A27,W26,B27,V,Out):13
     [X26>=0,Out>=1,V>=0,B27>=0,W26>=0,A27>=0,B27+X26+1=V26,A27+W26+1=V3,Out=Y26+1,Out=Z26+1] 
* CE 351: newline(V,V3,V26,Out) = 3+ newline(V,W26,X26,Y26)+ fun17(Y26,Z26,W26,A27,V,Out):14
     [Out>=Y26+2,X26>=0,V>=1,A27>=1,W26>=0,Y26>=0,Out+W26=V3+Y26,Out=Y26+Z26+1,A27+X26+1=V26] 
* CE 352: newline(V,V3,V26,Out) = 3+ newline(V,W26,X26,Y26)+ fun17(Y26,Z26,W26,A27,V,Out):15
     [Y26+W26+1>=Out,Out>=Y26+1,X26>=0,V>=1,A27>=1,W26>=4,Z26>=0,Y26>=0,A27+X26+1=V26,Z26+W26+1=V3] 
* CE 353: newline(V,V3,V26,Out) = 3+ newline(V,W26,X26,Y26)+ fun17(Y26,Z26,W26,A27,V,Out):16
     [2*Y26>=Out,Out>=Y26+2,X26>=0,V>=1,A27>=1,W26>=0,Z26>=1,A27+X26+1=V26,Z26+W26+1=V3] 

### Cost equations --> "Loop" of newline/4 
* CEs [352] --> Loop 223 
* CEs [353] --> Loop 224 
* CEs [351] --> Loop 225 
* CEs [348] --> Loop 226 
* CEs [349] --> Loop 227 
* CEs [350] --> Loop 228 
* CEs [345] --> Loop 229 
* CEs [344] --> Loop 230 
* CEs [340] --> Loop 231 
* CEs [338] --> Loop 232 
* CEs [347] --> Loop 233 
* CEs [346] --> Loop 234 
* CEs [343] --> Loop 235 
* CEs [341] --> Loop 236 
* CEs [342] --> Loop 237 
* CEs [339] --> Loop 238 
* CEs [334,335] --> Loop 239 
* CEs [336] --> Loop 240 
* CEs [337] --> Loop 241 

#### Loops of newline/4 
* Loop 223: newline(V,V3,V26,Out)->  newline(V,V3',V26',Out')
                  [V3'+Out'+1>=Out,Out>=Out'+1,V26>=V26'+2,V3>=V3'+1,Out'>=0,V26'>=0,V3'>=4,V>=1] 
* Loop 224: newline(V,V3,V26,Out)->  newline(V,V3',V26',Out')
                  [Out>=Out'+2,V26>=V26'+2,V3>=V3'+2,2*Out'>=Out,V26'>=0,V3'>=0,V>=1] 
* Loop 225: newline(V,V3,V26,Out)->  newline(V,V3',V26',Out')
                  [Out+V3'>=V3,V26>=V26'+2,V3>=V3'+2,V26'>=0,V3'>=0,V>=1,V3+Out'=Out+V3'] 
* Loop 226: newline(V,V3,V26,Out)->  newline(V,V3',V26',Out')
                  [V26>=V26'+2,V3>=V3'+1,V26'>=0,V3'>=3,Out>=4,V>=1,Out=Out'+4] 
* Loop 227: newline(V,V3,V26,Out)->  newline(V,V3',V26',Out')
                  [V26>=V26'+2,V3>=V3'+1,V26'>=0,V3'>=0,Out>=3,V>=1,Out=Out'+3] 
* Loop 228: newline(V,V3,V26,Out)->  newline(V,V3',V26',Out')
                  [V26>=V26'+1,V3>=V3'+1,V26'>=0,V3'>=0,Out>=1,V>=0,Out=Out'+1] 
* Loop 229: newline(V,V3,V26,Out)->  newline(V,V3',V26',Out')
                  [Out>=Out'+2,V3>=V3'+2,2*Out'>=Out,V3'>=0,V26>=1,V>=1,V26=V26'+1] 
* Loop 230: newline(V,V3,V26,Out)->  newline(V,V3',V26',Out')
                  [Out+V3'>=V3,V3>=V3'+2,V3'>=0,V26>=1,V>=1,V3+Out'=Out+V3',V26=V26'+1] 
* Loop 231: newline(V,V3,V26,Out)->  newline(V,V3',V26',Out')
                  [Out>=Out'+2,V26>=V26'+2,2*Out'>=Out,V26'>=0,V3>=1,V>=1,V3=V3'+1] 
* Loop 232: newline(V,V3,V26,Out)->  newline(V,V3',V26',Out')
                  [Out>=Out'+2,2*Out'>=Out,V26>=1,V3>=1,V>=1,V26=V26'+1,V3=V3'+1] 
* Loop 233: newline(V,V3,V26,Out)->  newline(V',V3',V26',Out')
                  [Out>=Out'+2,V26>=V26'+2,V3>=V3'+2,2*Out'>=Out,V26'>=0,V3'>=0,V'=0,V=0] 
* Loop 234: newline(V,V3,V26,Out)->  newline(V',V3',V26',Out')
                  [Out+V3'>=V3,V26>=V26'+2,V3>=V3'+2,V26'>=0,V3'>=0,V3+Out'=Out+V3',V'=0,V=0] 
* Loop 235: newline(V,V3,V26,Out)->  newline(V',V3',V26',Out')
                  [V3'+Out'+1>=Out,Out>=Out'+1,V3>=V3'+1,Out'>=0,V3'>=4,V26>=1,V26=V26'+1,V'=0,V=0] 
* Loop 236: newline(V,V3,V26,Out)->  newline(V',V3',V26',Out')
                  [V3>=V3'+1,V3'>=3,Out>=4,V26>=1,Out=Out'+4,V26=V26'+1,V'=0,V=0] 
* Loop 237: newline(V,V3,V26,Out)->  newline(V',V3',V26',Out')
                  [V3>=V3'+1,V3'>=0,Out>=3,V26>=1,Out=Out'+3,V26=V26'+1,V'=0,V=0] 
* Loop 238: newline(V,V3,V26,Out)->  newline(V',V3',V26',Out')
                  [Out>=Out'+2,V26>=V26'+2,2*Out'>=Out,V26'>=0,V3>=1,V3=V3'+1,V'=0,V=0] 
* Loop 239: newline(V,V3,V26,Out) [V26>=0,V3>=0,V>=0,Out=0] 
* Loop 240: newline(V,V3,V26,Out) [V3>=0,V>=0,Out=1,V26=1] 
* Loop 241: newline(V,V3,V26,Out) [V26>=1,V>=0,Out=1,V3=1] 

### Ranking functions of CR newline(V,V3,V26,Out) 
* RF of phase [223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238]: [V3,V26]

#### Partial ranking functions of CR newline(V,V3,V26,Out) 
* Partial RF of phase [223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238]:
  - RF of loop [223:1,224:1,225:1,226:1,227:1,231:1,238:1]:
    V26/2-1/2
  - RF of loop [223:1,235:1]:
    V3-4
  - RF of loop [224:1,225:1,229:1,230:1]:
    V3/2-1/2
  - RF of loop [226:1,236:1]:
    V3-3
  - RF of loop [227:1,228:1,231:1,232:1,237:1,238:1]:
    V3
  - RF of loop [228:1,229:1,230:1,232:1,235:1,236:1,237:1]:
    V26
  - RF of loop [233:1,234:1]:
    V3-1
    V26-1


### Resulting Chains:newline(V,V3,V26,Out) 
* [[223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238],241]
* [[223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238],240]
* [[223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238],239]
* [241]
* [240]
* [239]


### Merging Chains  newline/4 into  External patterns of execution 
* [[241],[239,[223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238]],[240,[223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238]],[241,[223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238]]] --> 1 
* [[240]] --> 2 
* [[239]] --> 3 


### Specialization of cost equations fun13/4 
* CE 47 is refined into CE [354] 
* CE 45 is refined into CE [355,356,357] 
* CE 46 is refined into CE [358] 


#### Refined cost equations fun13/4 
* CE 354: fun13(V,V3,V26,Out) = 0
     [V26>=0,V3>=0,V>=0,Out=0] 
* CE 355: fun13(V,V3,V26,Out) = 1+ newline(V26,W26,V3,X26):1
     [V>=W26+1,X26>=1,V3>=1,W26>=1,V26>=0,V+X26+1=Out] 
* CE 356: fun13(V,V3,V26,Out) = 1+ newline(V26,W26,X26,Y26):2
     [V>=W26+1,W26>=0,V26>=0,V+2=Out,Y26=1,X26=1,V3=1] 
* CE 357: fun13(V,V3,V26,Out) = 1+ newline(V26,W26,V3,X26):3
     [V>=W26+1,V3>=0,W26>=0,V26>=0,V+1=Out,X26=0] 
* CE 358: fun13(V,V3,V26,Out) = 1
     [V26>=0,V3>=0,Out=1,V=1] 

### Cost equations --> "Loop" of fun13/4 
* CEs [355] --> Loop 242 
* CEs [357] --> Loop 243 
* CEs [354] --> Loop 244 
* CEs [356] --> Loop 245 
* CEs [358] --> Loop 246 

#### Loops of fun13/4 
* Loop 242: fun13(V,V3,V26,Out) [Out>=V+2,V26>=0,V3>=1,V>=2] 
* Loop 243: fun13(V,V3,V26,Out) [V26>=0,V3>=0,V>=1,V+1=Out] 
* Loop 244: fun13(V,V3,V26,Out) [V26>=0,V3>=0,V>=0,Out=0] 
* Loop 245: fun13(V,V3,V26,Out) [V26>=0,V>=1,V+2=Out,V3=1] 
* Loop 246: fun13(V,V3,V26,Out) [V26>=0,V3>=0,Out=1,V=1] 

### Ranking functions of CR fun13(V,V3,V26,Out) 

#### Partial ranking functions of CR fun13(V,V3,V26,Out) 


### Resulting Chains:fun13(V,V3,V26,Out) 
* [246]
* [245]
* [244]
* [243]
* [242]


### Merging Chains  fun13/4 into  External patterns of execution 
* [[246]] --> 1 
* [[245]] --> 2 
* [[244]] --> 3 
* [[243]] --> 4 
* [[242]] --> 5 


### Specialization of cost equations lcstable/3 
* CE 44 is refined into CE [359,360,361,362,363] 
* CE 42 is refined into CE [364] 
* CE 43 is refined into CE [365,366] 


#### Refined cost equations lcstable/3 
* CE 359: lcstable(V,V3,Out) = 3+ lcstable(W3,V3,X3)+ fun13(Y3,V3,Z3,A4):1
     [W3>=0,Z3>=0,V3>=0,Z3+W3+1=V,X3=1,A4=1,Y3=1,Out=1] 
* CE 360: lcstable(V,V3,Out) = 3+ lcstable(W3,X3,Y3)+ fun13(Z3,A4,B4,Out):2
     [W3>=0,Out>=3,B4>=0,B4+W3+1=V,Out=Y3+2,Out=Z3+2,X3=1,A4=1,V3=1] 
* CE 361: lcstable(V,V3,Out) = 3+ lcstable(W3,V3,X3)+ fun13(X3,V3,Y3,Z3):3
     [W3>=0,Y3>=0,V3>=0,X3>=0,Y3+W3+1=V,Z3=0,Out=0] 
* CE 362: lcstable(V,V3,Out) = 3+ lcstable(W3,V3,X3)+ fun13(Y3,V3,Z3,Out):4
     [W3>=0,Out>=2,Z3>=0,V3>=0,Z3+W3+1=V,Out=X3+1,Out=Y3+1] 
* CE 363: lcstable(V,V3,Out) = 3+ lcstable(W3,V3,X3)+ fun13(X3,V3,Y3,Out):5
     [Out>=X3+2,W3>=0,Y3>=0,V3>=1,X3>=2,Y3+W3+1=V] 
* CE 364: lcstable(V,V3,Out) = 1
     [V3>=0,V>=0,Out=0] 
* CE 365: lcstable(V,V3,Out) = 2+ firstline(V3,W3):1
     [V3>=W3,W3>=1,W3+2=Out,V=1] 
* CE 366: lcstable(V,V3,Out) = 2+ firstline(V3,W3):2
     [V3>=0,W3=0,Out=2,V=1] 

### Cost equations --> "Loop" of lcstable/3 
* CEs [364] --> Loop 247 
* CEs [365] --> Loop 248 
* CEs [366] --> Loop 249 
* CEs [363] --> Loop 250 
* CEs [362] --> Loop 251 
* CEs [359] --> Loop 252 
* CEs [361] --> Loop 253 
* CEs [360] --> Loop 254 

#### Loops of lcstable/3 
* Loop 247: lcstable(V,V3,Out) [V3>=0,V>=0,Out=0] 
* Loop 248: lcstable(V,V3,Out) [V3+2>=Out,Out>=3,V=1] 
* Loop 249: lcstable(V,V3,Out) [V3>=0,Out=2,V=1] 
* Loop 250: lcstable(V,V3,Out)->  lcstable(V',V3,Out')
                  [Out>=Out'+2,V>=V'+1,Out'>=2,V'>=0,V3>=1] 
* Loop 251: lcstable(V,V3,Out)->  lcstable(V',V3,Out')
                  [V>=V'+1,V'>=0,Out>=2,V3>=0,Out=Out'+1] 
* Loop 252: lcstable(V,V3,Out)->  lcstable(V',V3,Out')
                  [V>=V'+1,V'>=0,V3>=0,Out'=1,Out=1] 
* Loop 253: lcstable(V,V3,Out)->  lcstable(V',V3,Out')
                  [V>=V'+1,Out'>=0,V'>=0,V3>=0,Out=0] 
* Loop 254: lcstable(V,V3,Out)->  lcstable(V',V3',Out')
                  [V>=V'+1,V'>=0,Out>=3,Out=Out'+2,V3'=1,V3=1] 

### Ranking functions of CR lcstable(V,V3,Out) 
* RF of phase [250,251,254]: [V]
* RF of phase [252]: [V]
* RF of phase [253]: [V]

#### Partial ranking functions of CR lcstable(V,V3,Out) 
* Partial RF of phase [250,251,254]:
  - RF of loop [250:1,251:1,254:1]:
    V
* Partial RF of phase [252]:
  - RF of loop [252:1]:
    V
* Partial RF of phase [253]:
  - RF of loop [253:1]:
    V


### Resulting Chains:lcstable(V,V3,Out) 
* [[253],[250,251,254],249]
* [[253],[250,251,254],248]
* [[253],249]
* [[253],248]
* [[253],247]
* [[250,251,254],249]
* [[250,251,254],248]
* [249]
* [248]
* [247]


### Merging Chains  lcstable/3 into  External patterns of execution 
* [[249]] --> 1 
* [[248]] --> 2 
* [[247],[247,[253]],[248,[253]],[249,[253]],[248,[250,251,254],[253]],[249,[250,251,254],[253]]] --> 3 
* [[248,[250,251,254]],[249,[250,251,254]]] --> 4 


### Specialization of cost equations fun9/2 
* CE 76 is refined into CE [367] 
* CE 74 is refined into CE [368,369] 
* CE 75 is refined into CE [370] 


#### Refined cost equations fun9/2 
* CE 367: fun9(V,Out) = 0
     [V>=0,Out=0] 
* CE 368: fun9(V,Out) = 1+ fun10(W,X):1
     [V>=W+1,W>=0,X=0,Out=0] 
* CE 369: fun9(V,Out) = 1+ fun10(W,Out):2
     [W>=Out+1,V>=W+1,Out>=0] 
* CE 370: fun9(V,Out) = 1+ fun(W,X):1
     [X=0,W=0,Out=0,V=1] 

### Cost equations --> "Loop" of fun9/2 
* CEs [369] --> Loop 255 
* CEs [367,368,370] --> Loop 256 

#### Loops of fun9/2 
* Loop 255: fun9(V,Out) [V>=Out+2,Out>=0] 
* Loop 256: fun9(V,Out) [V>=0,Out=0] 

### Ranking functions of CR fun9(V,Out) 

#### Partial ranking functions of CR fun9(V,Out) 


### Resulting Chains:fun9(V,Out) 
* [256]
* [255]


### Merging Chains  fun9/2 into  External patterns of execution 
* [[256]] --> 1 
* [[255]] --> 2 


### Specialization of cost equations lcs/3 
* CE 73 is refined into CE [371,372,373,374,375,376,377] 


#### Refined cost equations lcs/3 
* CE 371: lcs(V,V3,Out) = 2+ lcstable(W3,V3,X3):1+ fun9(Y3,Z3):1
     [V3>=0,Z3=0,Y3=2,X3=2,W3=1,Out=0,V=1] 
* CE 372: lcs(V,V3,Out) = 2+ lcstable(W3,V3,X3):1+ fun9(Y3,Z3):2
     [V3>=0,Z3=0,Y3=2,X3=2,W3=1,Out=0,V=1] 
* CE 373: lcs(V,V3,Out) = 2+ lcstable(W3,V3,X3):2+ fun9(X3,Y3):1
     [V3+2>=X3,X3>=3,Y3=0,W3=1,Out=0,V=1] 
* CE 374: lcs(V,V3,Out) = 2+ lcstable(W3,V3,X3):2+ fun9(X3,Out):2
     [X3>=Out+2,V3+2>=X3,Out>=0,X3>=3,W3=1,V=1] 
* CE 375: lcs(V,V3,Out) = 2+ lcstable(V,V3,W3):3+ fun9(X3,Y3):1
     [V3>=0,V>=0,Y3=0,X3=0,W3=0,Out=0] 
* CE 376: lcs(V,V3,Out) = 2+ lcstable(V,V3,W3):4+ fun9(W3,X3):1
     [W3>=3,V3>=0,V>=2,X3=0,Out=0] 
* CE 377: lcs(V,V3,Out) = 2+ lcstable(V,V3,W3):4+ fun9(W3,Out):2
     [W3>=Out+2,Out>=0,W3>=3,V3>=0,V>=2] 

### Cost equations --> "Loop" of lcs/3 
* CEs [377] --> Loop 257 
* CEs [374] --> Loop 258 
* CEs [371,372,373,375,376] --> Loop 259 

#### Loops of lcs/3 
* Loop 257: lcs(V,V3,Out) [Out>=0,V3>=0,V>=2] 
* Loop 258: lcs(V,V3,Out) [V3>=Out,Out>=0,V3>=1,V=1] 
* Loop 259: lcs(V,V3,Out) [V3>=0,V>=0,Out=0] 

### Ranking functions of CR lcs(V,V3,Out) 

#### Partial ranking functions of CR lcs(V,V3,Out) 


### Resulting Chains:lcs(V,V3,Out) 
* [259]
* [258]
* [257]


### Merging Chains  lcs/3 into  External patterns of execution 
* [[258]] --> 1 
* [[259]] --> 2 
* [[257]] --> 3 


### Specialization of cost equations start/6 
* CE 6 is refined into CE [378] 
* CE 2 is refined into CE [379] 
* CE 3 is refined into CE [380,381] 
* CE 4 is refined into CE [382,383,384,385,386,387,388,389,390,391,392,393,394] 
* CE 5 is refined into CE [395] 
* CE 7 is refined into CE [396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431] 
* CE 8 is refined into CE [432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467] 
* CE 9 is refined into CE [468] 
* CE 10 is refined into CE [469,470] 
* CE 11 is refined into CE [471,472,473] 
* CE 12 is refined into CE [474,475,476,477,478,479] 
* CE 13 is refined into CE [480,481,482,483,484,485,486,487,488,489] 
* CE 14 is refined into CE [490,491,492,493,494,495,496,497] 
* CE 15 is refined into CE [498,499] 
* CE 16 is refined into CE [500,501,502] 
* CE 17 is refined into CE [503,504] 
* CE 18 is refined into CE [505,506] 
* CE 19 is refined into CE [507,508] 
* CE 20 is refined into CE [509,510,511,512] 
* CE 21 is refined into CE [513,514,515,516,517] 
* CE 22 is refined into CE [518,519,520,521,522] 
* CE 23 is refined into CE [523,524,525,526,527,528,529] 
* CE 24 is refined into CE [530,531,532] 
* CE 25 is refined into CE [533,534,535] 
* CE 26 is refined into CE [536,537,538,539,540,541,542,543,544,545,546,547,548,549,550,551] 
* CE 27 is refined into CE [552,553,554,555,556,557,558,559,560,561,562,563,564,565,566,567,568,569,570] 
* CE 28 is refined into CE [571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590] 
* CE 29 is refined into CE [591,592,593,594,595,596,597,598,599] 
* CE 30 is refined into CE [600,601] 
* CE 31 is refined into CE [602,603] 
* CE 32 is refined into CE [604,605,606,607,608,609,610,611] 
* CE 33 is refined into CE [612,613,614,615,616] 
* CE 34 is refined into CE [617,618,619,620] 
* CE 35 is refined into CE [621,622,623,624,625,626,627,628,629] 
* CE 36 is refined into CE [630,631,632,633,634,635] 
* CE 37 is refined into CE [636,637,638,639] 
* CE 38 is refined into CE [640,641,642,643] 


#### Refined cost equations start/6 
* CE 378: start(V,V3,V26,V55,V65,V71) = 2
     [V26>=0,V>=1,V3=1] 
* CE 379: start(V,V3,V26,V55,V65,V71) = 0
     [V>=0] 
* CE 380: start(V,V3,V26,V55,V65,V71) = 1+ firstline(V3,W71):1
     [V3>=W71,W71>=1,V=1] 
* CE 381: start(V,V3,V26,V55,V65,V71) = 1+ firstline(V3,W71):2
     [V3>=0,W71=0,V=1] 
* CE 382: start(V,V3,V26,V55,V65,V71) = 2+ lcstable(W71,X71,Y71):1+ fun13(Z71,A72,B72,C72):2
     [B72>=0,B72+2=V,C72=4,A72=1,Z71=2,Y71=2,X71=1,W71=1,V3=1] 
* CE 383: start(V,V3,V26,V55,V65,V71) = 2+ lcstable(W71,V3,X71):1+ fun13(Y71,V3,Z71,A72):3
     [Z71>=0,V3>=0,Z71+2=V,A72=0,Y71=2,X71=2,W71=1] 
* CE 384: start(V,V3,V26,V55,V65,V71) = 2+ lcstable(W71,V3,X71):1+ fun13(Y71,V3,Z71,A72):4
     [Z71>=0,V3>=0,Z71+2=V,A72=3,Y71=2,X71=2,W71=1] 
* CE 385: start(V,V3,V26,V55,V65,V71) = 2+ lcstable(W71,V3,X71):1+ fun13(Y71,V3,Z71,A72):5
     [A72>=4,Z71>=0,V3>=1,Z71+2=V,Y71=2,X71=2,W71=1] 
* CE 386: start(V,V3,V26,V55,V65,V71) = 2+ lcstable(W71,X71,Y71):2+ fun13(Z71,A72,B72,C72):2
     [B72>=0,B72+2=V,C72=5,A72=1,Z71=3,Y71=3,X71=1,W71=1,V3=1] 
* CE 387: start(V,V3,V26,V55,V65,V71) = 2+ lcstable(W71,V3,X71):2+ fun13(X71,V3,Y71,Z71):3
     [V3+2>=X71,Y71>=0,X71>=3,Y71+2=V,Z71=0,W71=1] 
* CE 388: start(V,V3,V26,V55,V65,V71) = 2+ lcstable(W71,V3,X71):2+ fun13(Y71,V3,Z71,A72):4
     [V3+3>=A72,A72>=4,Z71>=0,A72=Y71+1,A72=X71+1,Z71+2=V,W71=1] 
* CE 389: start(V,V3,V26,V55,V65,V71) = 2+ lcstable(W71,V3,X71):2+ fun13(X71,V3,Y71,Z71):5
     [Z71>=X71+2,V3+2>=X71,Y71>=0,X71>=3,Y71+2=V,W71=1] 
* CE 390: start(V,V3,V26,V55,V65,V71) = 2+ lcstable(W71,V3,X71):3+ fun13(Y71,V3,Z71,A72):3
     [Z71>=0,V3>=0,W71>=0,W71+Z71+1=V,A72=0,Y71=0,X71=0] 
* CE 391: start(V,V3,V26,V55,V65,V71) = 2+ lcstable(W71,X71,Y71):4+ fun13(Z71,A72,B72,C72):2
     [C72>=5,B72>=0,W71>=2,W71+B72+1=V,C72=Z71+2,C72=Y71+2,A72=1,X71=1,V3=1] 
* CE 392: start(V,V3,V26,V55,V65,V71) = 2+ lcstable(W71,V3,X71):4+ fun13(X71,V3,Y71,Z71):3
     [Y71>=0,V3>=0,X71>=3,W71>=2,W71+Y71+1=V,Z71=0] 
* CE 393: start(V,V3,V26,V55,V65,V71) = 2+ lcstable(W71,V3,X71):4+ fun13(Y71,V3,Z71,A72):4
     [A72>=4,Z71>=0,V3>=0,W71>=2,W71+Z71+1=V,A72=Y71+1,A72=X71+1] 
* CE 394: start(V,V3,V26,V55,V65,V71) = 2+ lcstable(W71,V3,X71):4+ fun13(X71,V3,Y71,Z71):5
     [Z71>=X71+2,Y71>=0,V3>=1,X71>=3,W71>=2,W71+Y71+1=V] 
* CE 395: start(V,V3,V26,V55,V65,V71) = 1
     [V3>=0,V>=0] 
* CE 396: start(V,V3,V26,V55,V65,V71) = 2+ newline(V26,W71,X71,Y71):1+ fun17(Y71,Z71,W71,A72,V26,B72):1
     [2*Y71>=B72,B72>=Y71+2,V26>=1,W71>=1,X71>=1,W71+1=V3,X71+1=V,A72=0,Z71=0] 
* CE 397: start(V,V3,V26,V55,V65,V71) = 2+ newline(W71,X71,Y71,Z71):1+ fun17(Z71,A72,X71,B72,C72,D72):2
     [2*Z71>=D72,D72>=Z71+2,B72>=1,X71>=1,Y71>=1,Y71+B72+1=V,X71+1=V3,C72=0,A72=0,W71=0,V26=0] 
* CE 398: start(V,V3,V26,V55,V65,V71) = 2+ newline(V26,W71,X71,Y71):1+ fun17(Y71,Z71,W71,A72,V26,B72):3
     [2*Y71>=B72,B72>=Y71+2,V26>=1,A72>=1,W71>=1,X71>=1,X71+A72+1=V,W71+1=V3,Z71=0] 
* CE 399: start(V,V3,V26,V55,V65,V71) = 2+ newline(W71,X71,Y71,Z71):1+ fun17(A72,B72,X71,C72,D72,E72):4
     [E72>=5,X71>=3,B72>=0,Y71>=1,X71+B72+1=V3,E72=A72+4,E72=Z71+4,Y71+1=V,D72=0,C72=0,W71=0,V26=0] 
* CE 400: start(V,V3,V26,V55,V65,V71) = 2+ newline(W71,X71,Y71,Z71):1+ fun17(A72,B72,X71,C72,D72,E72):5
     [E72>=4,X71>=1,B72>=0,Y71>=1,X71+B72+1=V3,E72=A72+3,E72=Z71+3,Y71+1=V,D72=0,C72=0,W71=0,V26=0] 
* CE 401: start(V,V3,V26,V55,V65,V71) = 2+ newline(W71,X71,Y71,Z71):1+ fun17(Z71,A72,X71,B72,C72,D72):6
     [X71+Z71+1>=D72,D72>=Z71+1,X71>=4,A72>=0,Z71>=1,Y71>=1,X71+A72+1=V3,Y71+1=V,C72=0,B72=0,W71=0,V26=0] 
* CE 402: start(V,V3,V26,V55,V65,V71) = 2+ newline(V26,W71,X71,Y71):1+ fun17(Y71,Z71,W71,A72,V26,B72):7
     [B72>=Y71+2,V26>=1,W71>=1,Y71>=1,X71>=1,W71+B72=V3+Y71,B72=Y71+Z71+1,X71+1=V,A72=0] 
* CE 403: start(V,V3,V26,V55,V65,V71) = 2+ newline(V26,W71,X71,Y71):1+ fun17(Y71,Z71,W71,A72,V26,B72):8
     [2*Y71>=B72,B72>=Y71+2,V26>=1,W71>=1,Z71>=1,X71>=1,W71+Z71+1=V3,X71+1=V,A72=0] 
* CE 404: start(V,V3,V26,V55,V65,V71) = 2+ newline(W71,X71,Y71,Z71):1+ fun17(Z71,A72,X71,B72,C72,D72):9
     [D72>=Z71+2,B72>=1,X71>=1,Z71>=1,Y71>=1,X71+D72=V3+Z71,D72=Z71+A72+1,Y71+B72+1=V,C72=0,W71=0,V26=0] 
* CE 405: start(V,V3,V26,V55,V65,V71) = 2+ newline(W71,X71,Y71,Z71):1+ fun17(Z71,A72,X71,B72,C72,D72):10
     [2*Z71>=D72,D72>=Z71+2,B72>=1,X71>=1,A72>=1,Y71>=1,X71+A72+1=V3,Y71+B72+1=V,C72=0,W71=0,V26=0] 
* CE 406: start(V,V3,V26,V55,V65,V71) = 2+ newline(V26,W71,X71,Y71):1+ fun17(Z71,A72,W71,B72,V26,C72):11
     [C72>=5,V26>=1,B72>=1,W71>=3,A72>=0,X71>=1,W71+A72+1=V3,X71+B72+1=V,C72=Z71+4,C72=Y71+4] 
* CE 407: start(V,V3,V26,V55,V65,V71) = 2+ newline(V26,W71,X71,Y71):1+ fun17(Z71,A72,W71,B72,V26,C72):12
     [C72>=4,V26>=1,B72>=1,W71>=1,A72>=0,X71>=1,W71+A72+1=V3,X71+B72+1=V,C72=Z71+3,C72=Y71+3] 
* CE 408: start(V,V3,V26,V55,V65,V71) = 2+ newline(V26,W71,X71,Y71):1+ fun17(Z71,A72,W71,B72,V26,C72):13
     [C72>=2,V26>=0,B72>=0,W71>=1,A72>=0,X71>=1,W71+A72+1=V3,X71+B72+1=V,C72=Z71+1,C72=Y71+1] 
* CE 409: start(V,V3,V26,V55,V65,V71) = 2+ newline(V26,W71,X71,Y71):1+ fun17(Y71,Z71,W71,A72,V26,B72):14
     [B72>=Y71+2,V26>=1,A72>=1,W71>=1,Y71>=1,X71>=1,W71+B72=V3+Y71,B72=Y71+Z71+1,X71+A72+1=V] 
* CE 410: start(V,V3,V26,V55,V65,V71) = 2+ newline(V26,W71,X71,Y71):1+ fun17(Y71,Z71,W71,A72,V26,B72):15
     [W71+Y71+1>=B72,B72>=Y71+1,V26>=1,A72>=1,W71>=4,Z71>=0,Y71>=1,X71>=1,W71+Z71+1=V3,X71+A72+1=V] 
* CE 411: start(V,V3,V26,V55,V65,V71) = 2+ newline(V26,W71,X71,Y71):1+ fun17(Y71,Z71,W71,A72,V26,B72):16
     [2*Y71>=B72,B72>=Y71+2,V26>=1,A72>=1,W71>=1,Z71>=1,X71>=1,W71+Z71+1=V3,X71+A72+1=V] 
* CE 412: start(V,V3,V26,V55,V65,V71) = 2+ newline(W71,X71,Y71,Z71):2+ fun17(A72,B72,X71,C72,D72,E72):4
     [X71>=3,B72>=0,X71+B72+1=V3,E72=5,D72=0,C72=0,A72=1,Z71=1,Y71=1,W71=0,V26=0,V=2] 
* CE 413: start(V,V3,V26,V55,V65,V71) = 2+ newline(W71,X71,Y71,Z71):2+ fun17(A72,B72,X71,C72,D72,E72):5
     [X71>=0,B72>=0,X71+B72+1=V3,E72=4,D72=0,C72=0,A72=1,Z71=1,Y71=1,W71=0,V26=0,V=2] 
* CE 414: start(V,V3,V26,V55,V65,V71) = 2+ newline(W71,X71,Y71,Z71):2+ fun17(A72,B72,X71,C72,D72,E72):6
     [X71+2>=E72,E72>=2,X71>=4,B72>=0,X71+B72+1=V3,D72=0,C72=0,A72=1,Z71=1,Y71=1,W71=0,V26=0,V=2] 
* CE 415: start(V,V3,V26,V55,V65,V71) = 2+ newline(V26,W71,X71,Y71):2+ fun17(Z71,A72,W71,B72,V26,C72):7
     [C72>=3,V26>=1,W71>=0,W71+C72=V3+1,C72=A72+2,B72=0,Z71=1,Y71=1,X71=1,V=2] 
* CE 416: start(V,V3,V26,V55,V65,V71) = 2+ newline(W71,X71,Y71,Z71):2+ fun17(A72,B72,X71,C72,D72,E72):9
     [E72>=3,C72>=1,X71>=0,X71+E72=V3+1,E72=B72+2,C72+2=V,D72=0,A72=1,Z71=1,Y71=1,W71=0,V26=0] 
* CE 417: start(V,V3,V26,V55,V65,V71) = 2+ newline(V26,W71,X71,Y71):2+ fun17(Z71,A72,W71,B72,V26,C72):11
     [V26>=1,B72>=1,W71>=3,A72>=0,W71+A72+1=V3,B72+2=V,C72=5,Z71=1,Y71=1,X71=1] 
* CE 418: start(V,V3,V26,V55,V65,V71) = 2+ newline(V26,W71,X71,Y71):2+ fun17(Z71,A72,W71,B72,V26,C72):12
     [V26>=1,B72>=1,W71>=0,A72>=0,W71+A72+1=V3,B72+2=V,C72=4,Z71=1,Y71=1,X71=1] 
* CE 419: start(V,V3,V26,V55,V65,V71) = 2+ newline(V26,W71,X71,Y71):2+ fun17(Z71,A72,W71,B72,V26,C72):13
     [V26>=0,B72>=0,W71>=0,A72>=0,W71+A72+1=V3,B72+2=V,C72=2,Z71=1,Y71=1,X71=1] 
* CE 420: start(V,V3,V26,V55,V65,V71) = 2+ newline(V26,W71,X71,Y71):2+ fun17(Z71,A72,W71,B72,V26,C72):14
     [C72>=3,V26>=1,B72>=1,W71>=0,W71+C72=V3+1,C72=A72+2,B72+2=V,Z71=1,Y71=1,X71=1] 
* CE 421: start(V,V3,V26,V55,V65,V71) = 2+ newline(V26,W71,X71,Y71):2+ fun17(Z71,A72,W71,B72,V26,C72):15
     [W71+2>=C72,C72>=2,V26>=1,B72>=1,W71>=4,A72>=0,W71+A72+1=V3,B72+2=V,Z71=1,Y71=1,X71=1] 
* CE 422: start(V,V3,V26,V55,V65,V71) = 2+ newline(W71,X71,Y71,Z71):3+ fun17(A72,B72,X71,C72,D72,E72):4
     [X71>=3,B72>=0,Y71>=0,X71+B72+1=V3,Y71+1=V,E72=4,D72=0,C72=0,A72=0,Z71=0,W71=0,V26=0] 
* CE 423: start(V,V3,V26,V55,V65,V71) = 2+ newline(W71,X71,Y71,Z71):3+ fun17(A72,B72,X71,C72,D72,E72):5
     [X71>=0,B72>=0,Y71>=0,X71+B72+1=V3,Y71+1=V,E72=3,D72=0,C72=0,A72=0,Z71=0,W71=0,V26=0] 
* CE 424: start(V,V3,V26,V55,V65,V71) = 2+ newline(W71,X71,Y71,Z71):3+ fun17(A72,B72,X71,C72,D72,E72):6
     [X71+1>=E72,E72>=1,X71>=4,B72>=0,Y71>=0,X71+B72+1=V3,Y71+1=V,D72=0,C72=0,A72=0,Z71=0,W71=0,V26=0] 
* CE 425: start(V,V3,V26,V55,V65,V71) = 2+ newline(V26,W71,X71,Y71):3+ fun17(Z71,A72,W71,B72,V26,C72):7
     [C72>=2,V26>=1,W71>=0,X71>=0,W71+C72=V3,C72=A72+1,X71+1=V,B72=0,Z71=0,Y71=0] 
* CE 426: start(V,V3,V26,V55,V65,V71) = 2+ newline(W71,X71,Y71,Z71):3+ fun17(A72,B72,X71,C72,D72,E72):9
     [E72>=2,C72>=1,X71>=0,Y71>=0,X71+E72=V3,Y71+C72+1=V,E72=B72+1,D72=0,A72=0,Z71=0,W71=0,V26=0] 
* CE 427: start(V,V3,V26,V55,V65,V71) = 2+ newline(V26,W71,X71,Y71):3+ fun17(Z71,A72,W71,B72,V26,C72):11
     [V26>=1,B72>=1,W71>=3,A72>=0,X71>=0,W71+A72+1=V3,X71+B72+1=V,C72=4,Z71=0,Y71=0] 
* CE 428: start(V,V3,V26,V55,V65,V71) = 2+ newline(V26,W71,X71,Y71):3+ fun17(Z71,A72,W71,B72,V26,C72):12
     [V26>=1,B72>=1,W71>=0,A72>=0,X71>=0,W71+A72+1=V3,X71+B72+1=V,C72=3,Z71=0,Y71=0] 
* CE 429: start(V,V3,V26,V55,V65,V71) = 2+ newline(V26,W71,X71,Y71):3+ fun17(Z71,A72,W71,B72,V26,C72):13
     [V26>=0,B72>=0,W71>=0,A72>=0,X71>=0,W71+A72+1=V3,X71+B72+1=V,C72=1,Z71=0,Y71=0] 
* CE 430: start(V,V3,V26,V55,V65,V71) = 2+ newline(V26,W71,X71,Y71):3+ fun17(Z71,A72,W71,B72,V26,C72):14
     [C72>=2,V26>=1,B72>=1,W71>=0,X71>=0,W71+C72=V3,X71+B72+1=V,C72=A72+1,Z71=0,Y71=0] 
* CE 431: start(V,V3,V26,V55,V65,V71) = 2+ newline(V26,W71,X71,Y71):3+ fun17(Z71,A72,W71,B72,V26,C72):15
     [W71+1>=C72,C72>=1,V26>=1,B72>=1,W71>=4,A72>=0,X71>=0,W71+A72+1=V3,X71+B72+1=V,Z71=0,Y71=0] 
* CE 432: start(V,V3,V26,V55,V65,V71) = 1+ newline(V55,W71,V26,X71):1+ fun17(X71,Y71,W71,Z71,V55,A72):1
     [2*X71>=A72,A72>=X71+2,V55>=1,W71>=1,V26>=1,W71+1=V,Z71=0,Y71=0,V3=0] 
* CE 433: start(V,V3,V26,V55,V65,V71) = 1+ newline(W71,X71,V26,Y71):1+ fun17(Y71,Z71,X71,V3,A72,B72):2
     [2*Y71>=B72,B72>=Y71+2,V3>=1,X71>=1,V26>=1,X71+1=V,A72=0,Z71=0,W71=0,V55=0] 
* CE 434: start(V,V3,V26,V55,V65,V71) = 1+ newline(V55,W71,V26,X71):1+ fun17(X71,Y71,W71,V3,V55,Z71):3
     [2*X71>=Z71,Z71>=X71+2,V55>=1,V3>=1,W71>=1,V26>=1,W71+1=V,Y71=0] 
* CE 435: start(V,V3,V26,V55,V65,V71) = 1+ newline(W71,X71,V26,Y71):1+ fun17(Z71,A72,X71,B72,C72,D72):4
     [D72>=5,X71>=3,A72>=0,V26>=1,X71+A72+1=V,D72=Z71+4,D72=Y71+4,C72=0,B72=0,W71=0,V55=0,V3=0] 
* CE 436: start(V,V3,V26,V55,V65,V71) = 1+ newline(W71,X71,V26,Y71):1+ fun17(Z71,A72,X71,B72,C72,D72):5
     [D72>=4,X71>=1,A72>=0,V26>=1,X71+A72+1=V,D72=Z71+3,D72=Y71+3,C72=0,B72=0,W71=0,V55=0,V3=0] 
* CE 437: start(V,V3,V26,V55,V65,V71) = 1+ newline(W71,X71,V26,Y71):1+ fun17(Y71,Z71,X71,A72,B72,C72):6
     [X71+Y71+1>=C72,C72>=Y71+1,X71>=4,Z71>=0,Y71>=1,V26>=1,X71+Z71+1=V,B72=0,A72=0,W71=0,V55=0,V3=0] 
* CE 438: start(V,V3,V26,V55,V65,V71) = 1+ newline(V55,W71,V26,X71):1+ fun17(X71,Y71,W71,Z71,V55,A72):7
     [A72>=X71+2,V55>=1,W71>=1,X71>=1,V26>=1,W71+A72=V+X71,A72=X71+Y71+1,Z71=0,V3=0] 
* CE 439: start(V,V3,V26,V55,V65,V71) = 1+ newline(V55,W71,V26,X71):1+ fun17(X71,Y71,W71,Z71,V55,A72):8
     [2*X71>=A72,A72>=X71+2,V55>=1,W71>=1,Y71>=1,V26>=1,W71+Y71+1=V,Z71=0,V3=0] 
* CE 440: start(V,V3,V26,V55,V65,V71) = 1+ newline(W71,X71,V26,Y71):1+ fun17(Y71,Z71,X71,V3,A72,B72):9
     [B72>=Y71+2,V3>=1,X71>=1,Y71>=1,V26>=1,X71+B72=V+Y71,B72=Y71+Z71+1,A72=0,W71=0,V55=0] 
* CE 441: start(V,V3,V26,V55,V65,V71) = 1+ newline(W71,X71,V26,Y71):1+ fun17(Y71,Z71,X71,V3,A72,B72):10
     [2*Y71>=B72,B72>=Y71+2,V3>=1,X71>=1,Z71>=1,V26>=1,X71+Z71+1=V,A72=0,W71=0,V55=0] 
* CE 442: start(V,V3,V26,V55,V65,V71) = 1+ newline(V55,W71,V26,X71):1+ fun17(Y71,Z71,W71,V3,V55,A72):11
     [A72>=5,V55>=1,V3>=1,W71>=3,Z71>=0,V26>=1,W71+Z71+1=V,A72=Y71+4,A72=X71+4] 
* CE 443: start(V,V3,V26,V55,V65,V71) = 1+ newline(V55,W71,V26,X71):1+ fun17(Y71,Z71,W71,V3,V55,A72):12
     [A72>=4,V55>=1,V3>=1,W71>=1,Z71>=0,V26>=1,W71+Z71+1=V,A72=Y71+3,A72=X71+3] 
* CE 444: start(V,V3,V26,V55,V65,V71) = 1+ newline(V55,W71,V26,X71):1+ fun17(Y71,Z71,W71,V3,V55,A72):13
     [A72>=2,V55>=0,V3>=0,W71>=1,Z71>=0,V26>=1,W71+Z71+1=V,A72=Y71+1,A72=X71+1] 
* CE 445: start(V,V3,V26,V55,V65,V71) = 1+ newline(V55,W71,V26,X71):1+ fun17(X71,Y71,W71,V3,V55,Z71):14
     [Z71>=X71+2,V55>=1,V3>=1,W71>=1,X71>=1,V26>=1,W71+Z71=V+X71,Z71=X71+Y71+1] 
* CE 446: start(V,V3,V26,V55,V65,V71) = 1+ newline(V55,W71,V26,X71):1+ fun17(X71,Y71,W71,V3,V55,Z71):15
     [W71+X71+1>=Z71,Z71>=X71+1,V55>=1,V3>=1,W71>=4,Y71>=0,X71>=1,V26>=1,W71+Y71+1=V] 
* CE 447: start(V,V3,V26,V55,V65,V71) = 1+ newline(V55,W71,V26,X71):1+ fun17(X71,Y71,W71,V3,V55,Z71):16
     [2*X71>=Z71,Z71>=X71+2,V55>=1,V3>=1,W71>=1,Y71>=1,V26>=1,W71+Y71+1=V] 
* CE 448: start(V,V3,V26,V55,V65,V71) = 1+ newline(W71,X71,Y71,Z71):2+ fun17(A72,B72,X71,C72,D72,E72):4
     [X71>=3,B72>=0,X71+B72+1=V,E72=5,D72=0,C72=0,A72=1,Z71=1,Y71=1,W71=0,V55=0,V26=1,V3=0] 
* CE 449: start(V,V3,V26,V55,V65,V71) = 1+ newline(W71,X71,Y71,Z71):2+ fun17(A72,B72,X71,C72,D72,E72):5
     [X71>=0,B72>=0,X71+B72+1=V,E72=4,D72=0,C72=0,A72=1,Z71=1,Y71=1,W71=0,V55=0,V26=1,V3=0] 
* CE 450: start(V,V3,V26,V55,V65,V71) = 1+ newline(W71,X71,Y71,Z71):2+ fun17(A72,B72,X71,C72,D72,E72):6
     [X71+2>=E72,E72>=2,X71>=4,B72>=0,X71+B72+1=V,D72=0,C72=0,A72=1,Z71=1,Y71=1,W71=0,V55=0,V26=1,V3=0] 
* CE 451: start(V,V3,V26,V55,V65,V71) = 1+ newline(V55,W71,X71,Y71):2+ fun17(Z71,A72,W71,B72,V55,C72):7
     [C72>=3,V55>=1,W71>=0,W71+C72=V+1,C72=A72+2,B72=0,Z71=1,Y71=1,X71=1,V26=1,V3=0] 
* CE 452: start(V,V3,V26,V55,V65,V71) = 1+ newline(W71,X71,Y71,Z71):2+ fun17(A72,B72,X71,V3,C72,D72):9
     [D72>=3,V3>=1,X71>=0,X71+D72=V+1,D72=B72+2,C72=0,A72=1,Z71=1,Y71=1,W71=0,V55=0,V26=1] 
* CE 453: start(V,V3,V26,V55,V65,V71) = 1+ newline(V55,W71,X71,Y71):2+ fun17(Z71,A72,W71,V3,V55,B72):11
     [V55>=1,V3>=1,W71>=3,A72>=0,W71+A72+1=V,B72=5,Z71=1,Y71=1,X71=1,V26=1] 
* CE 454: start(V,V3,V26,V55,V65,V71) = 1+ newline(V55,W71,X71,Y71):2+ fun17(Z71,A72,W71,V3,V55,B72):12
     [V55>=1,V3>=1,W71>=0,A72>=0,W71+A72+1=V,B72=4,Z71=1,Y71=1,X71=1,V26=1] 
* CE 455: start(V,V3,V26,V55,V65,V71) = 1+ newline(V55,W71,X71,Y71):2+ fun17(Z71,A72,W71,V3,V55,B72):13
     [V55>=0,V3>=0,W71>=0,A72>=0,W71+A72+1=V,B72=2,Z71=1,Y71=1,X71=1,V26=1] 
* CE 456: start(V,V3,V26,V55,V65,V71) = 1+ newline(V55,W71,X71,Y71):2+ fun17(Z71,A72,W71,V3,V55,B72):14
     [B72>=3,V55>=1,V3>=1,W71>=0,W71+B72=V+1,B72=A72+2,Z71=1,Y71=1,X71=1,V26=1] 
* CE 457: start(V,V3,V26,V55,V65,V71) = 1+ newline(V55,W71,X71,Y71):2+ fun17(Z71,A72,W71,V3,V55,B72):15
     [W71+2>=B72,B72>=2,V55>=1,V3>=1,W71>=4,A72>=0,W71+A72+1=V,Z71=1,Y71=1,X71=1,V26=1] 
* CE 458: start(V,V3,V26,V55,V65,V71) = 1+ newline(W71,X71,V26,Y71):3+ fun17(Z71,A72,X71,B72,C72,D72):4
     [X71>=3,A72>=0,V26>=0,X71+A72+1=V,D72=4,C72=0,B72=0,Z71=0,Y71=0,W71=0,V55=0,V3=0] 
* CE 459: start(V,V3,V26,V55,V65,V71) = 1+ newline(W71,X71,V26,Y71):3+ fun17(Z71,A72,X71,B72,C72,D72):5
     [X71>=0,A72>=0,V26>=0,X71+A72+1=V,D72=3,C72=0,B72=0,Z71=0,Y71=0,W71=0,V55=0,V3=0] 
* CE 460: start(V,V3,V26,V55,V65,V71) = 1+ newline(W71,X71,V26,Y71):3+ fun17(Z71,A72,X71,B72,C72,D72):6
     [X71+1>=D72,D72>=1,X71>=4,A72>=0,V26>=0,X71+A72+1=V,C72=0,B72=0,Z71=0,Y71=0,W71=0,V55=0,V3=0] 
* CE 461: start(V,V3,V26,V55,V65,V71) = 1+ newline(V55,W71,V26,X71):3+ fun17(Y71,Z71,W71,A72,V55,B72):7
     [B72>=2,V55>=1,W71>=0,V26>=0,W71+B72=V,B72=Z71+1,A72=0,Y71=0,X71=0,V3=0] 
* CE 462: start(V,V3,V26,V55,V65,V71) = 1+ newline(W71,X71,V26,Y71):3+ fun17(Z71,A72,X71,V3,B72,C72):9
     [C72>=2,V3>=1,X71>=0,V26>=0,X71+C72=V,C72=A72+1,B72=0,Z71=0,Y71=0,W71=0,V55=0] 
* CE 463: start(V,V3,V26,V55,V65,V71) = 1+ newline(V55,W71,V26,X71):3+ fun17(Y71,Z71,W71,V3,V55,A72):11
     [V55>=1,V3>=1,W71>=3,Z71>=0,V26>=0,W71+Z71+1=V,A72=4,Y71=0,X71=0] 
* CE 464: start(V,V3,V26,V55,V65,V71) = 1+ newline(V55,W71,V26,X71):3+ fun17(Y71,Z71,W71,V3,V55,A72):12
     [V55>=1,V3>=1,W71>=0,Z71>=0,V26>=0,W71+Z71+1=V,A72=3,Y71=0,X71=0] 
* CE 465: start(V,V3,V26,V55,V65,V71) = 1+ newline(V55,W71,V26,X71):3+ fun17(Y71,Z71,W71,V3,V55,A72):13
     [V55>=0,V3>=0,W71>=0,Z71>=0,V26>=0,W71+Z71+1=V,A72=1,Y71=0,X71=0] 
* CE 466: start(V,V3,V26,V55,V65,V71) = 1+ newline(V55,W71,V26,X71):3+ fun17(Y71,Z71,W71,V3,V55,A72):14
     [A72>=2,V55>=1,V3>=1,W71>=0,V26>=0,W71+A72=V,A72=Z71+1,Y71=0,X71=0] 
* CE 467: start(V,V3,V26,V55,V65,V71) = 1+ newline(V55,W71,V26,X71):3+ fun17(Y71,Z71,W71,V3,V55,A72):15
     [W71+1>=A72,A72>=1,V55>=1,V3>=1,W71>=4,Z71>=0,V26>=0,W71+Z71+1=V,Y71=0,X71=0] 
* CE 468: start(V,V3,V26,V55,V65,V71) = 1
     [V=1] 
* CE 469: start(V,V3,V26,V55,V65,V71) = 1+ fun(W71,X71):1+ firstline(Y71,Z71):1
     [Y71>=Z71,V>=Y71+1,Z71>=1,X71=0,W71=0] 
* CE 470: start(V,V3,V26,V55,V65,V71) = 1+ fun(W71,X71):1+ firstline(Y71,Z71):2
     [V>=Y71+1,Y71>=0,Z71=0,X71=0,W71=0] 
* CE 471: start(V,V3,V26,V55,V65,V71) = 0+ fun(V,W71):1
     [V>=0,W71=0] 
* CE 472: start(V,V3,V26,V55,V65,V71) = 0+ fun(W71,X71):2
     [X71>=2,X71=W71+1,X71=V+1] 
* CE 473: start(V,V3,V26,V55,V65,V71) = 0+ fun(V,V):3
     [V>=1] 
* CE 474: start(V,V3,V26,V55,V65,V71) = 1+ fun2(W71,X71,Y71):1
     [Y71=2,X71=0,W71=0,V3=0,V=0] 
* CE 475: start(V,V3,V26,V55,V65,V71) = 1+ fun2(W71,V3,X71):2
     [V3>=1,X71=1,W71=0,V=0] 
* CE 476: start(V,V3,V26,V55,V65,V71) = 1+ fun2(V,V3,W71):3
     [W71>=0,V3>=1,V>=1,2>=W71] 
* CE 477: start(V,V3,V26,V55,V65,V71) = 1+ fun2(V,W71,X71):4
     [V>=1,X71=1,W71=0,V3=0] 
* CE 478: start(V,V3,V26,V55,V65,V71) = 1+ fun2(V,V3,W71):5
     [V3>=0,V>=0,W71=0] 
* CE 479: start(V,V3,V26,V55,V65,V71) = 1+ fun2(V,V3,W71):6
     [V3>=1,V>=1,W71=1] 
* CE 480: start(V,V3,V26,V55,V65,V71) = 0+ fun3(W71,X71,Y71):1
     [Y71=1,X71=0,W71=0,V3=0,V=0] 
* CE 481: start(V,V3,V26,V55,V65,V71) = 0+ fun3(V,V3,W71):2
     [V3>=0,V>=0,W71=0] 
* CE 482: start(V,V3,V26,V55,V65,V71) = 0+ fun3(W71,V3,X71):3
     [V3>=1,X71=1,W71=0,V=0] 
* CE 483: start(V,V3,V26,V55,V65,V71) = 0+ fun3(W71,V3,X71):4
     [V3>=1,X71=2,W71=0,V=0] 
* CE 484: start(V,V3,V26,V55,V65,V71) = 0+ fun3(V,W71,X71):5
     [V>=1,X71=0,W71=0,V3=0] 
* CE 485: start(V,V3,V26,V55,V65,V71) = 0+ fun3(V,W71,X71):6
     [V>=1,X71=1,W71=0,V3=0] 
* CE 486: start(V,V3,V26,V55,V65,V71) = 0+ fun3(V,W71,X71):7
     [V>=1,X71=2,W71=0,V3=0] 
* CE 487: start(A,A,B,C,D,E) = 0+ fun3(A,A,F):8
     [A>=1,F=0] 
* CE 488: start(V,V3,V26,V55,V65,V71) = 0+ fun3(V,V3,W71):9
     [V3>=1,V>=1,W71=1] 
* CE 489: start(V,V3,V26,V55,V65,V71) = 0+ fun3(V,V3,W71):10
     [V3>=1,V>=1,W71=2] 
* CE 490: start(V,V3,V26,V55,V65,V71) = 1+ fun6(W71,V3,V3):1
     [V3>=0,W71=0,V=0] 
* CE 491: start(V,V3,V26,V55,V65,V71) = 1+ fun6(W71,X71,Y71):2
     [Y71=2,X71=0,W71=2,V3=0,V=2] 
* CE 492: start(V,V3,V26,V55,V65,V71) = 1+ fun6(W71,X71,Y71):3
     [Y71>=3,Y71=X71+1,Y71=V3+1,W71=2,V=2] 
* CE 493: start(V,V3,V26,V55,V65,V71) = 1+ fun6(W71,X71,Y71):4
     [Y71>=2,Y71+1=X71,Y71+1=V3,W71=2,V=2] 
* CE 494: start(V,V3,V26,V55,V65,V71) = 1+ fun6(V,W71,X71):5
     [V>=X71,X71>=0,V>=3,W71=0,V3=0] 
* CE 495: start(V,V3,V26,V55,V65,V71) = 1+ fun6(V,V3,W71):6
     [V3>=0,V>=0,W71=0] 
* CE 496: start(V,V3,V26,V55,V65,V71) = 1+ fun6(V,V3,W71):7
     [V>=W71+1,W71>=0,V3>=0,V>=3] 
* CE 497: start(V,V3,V26,V55,V65,V71) = 1+ fun6(V,V3,W71):8
     [V+V3>=W71+1,W71>=0,V3>=2,V>=3] 
* CE 498: start(V,V3,V26,V55,V65,V71) = 0+ firstline(V,W71):1
     [V>=W71,W71>=1] 
* CE 499: start(V,V3,V26,V55,V65,V71) = 0+ firstline(V,W71):2
     [V>=0,W71=0] 
* CE 500: start(V,V3,V26,V55,V65,V71) = 0+ lcs(W71,V3,X71):1
     [V3>=X71,X71>=0,V3>=1,W71=1,V=1] 
* CE 501: start(V,V3,V26,V55,V65,V71) = 0+ lcs(V,V3,W71):2
     [V3>=0,V>=0,W71=0] 
* CE 502: start(V,V3,V26,V55,V65,V71) = 0+ lcs(V,V3,W71):3
     [W71>=0,V3>=0,V>=2] 
* CE 503: start(V,V3,V26,V55,V65,V71) = 1+ fun9(V,W71):1
     [V>=0,W71=0] 
* CE 504: start(V,V3,V26,V55,V65,V71) = 1+ fun9(V,W71):2
     [V>=W71+2,W71>=0] 
* CE 505: start(V,V3,V26,V55,V65,V71) = 0+ fun9(V,W71):1
     [V>=0,W71=0] 
* CE 506: start(V,V3,V26,V55,V65,V71) = 0+ fun9(V,W71):2
     [V>=W71+2,W71>=0] 
* CE 507: start(V,V3,V26,V55,V65,V71) = 0+ fun10(V,W71):1
     [V>=0,W71=0] 
* CE 508: start(V,V3,V26,V55,V65,V71) = 0+ fun10(V,W71):2
     [V>=W71+1,W71>=0] 
* CE 509: start(V,V3,V26,V55,V65,V71) = 0+ lcstable(W71,V3,X71):1
     [V3>=0,X71=2,W71=1,V=1] 
* CE 510: start(V,V3,V26,V55,V65,V71) = 0+ lcstable(W71,V3,X71):2
     [V3+2>=X71,X71>=3,W71=1,V=1] 
* CE 511: start(V,V3,V26,V55,V65,V71) = 0+ lcstable(V,V3,W71):3
     [V3>=0,V>=0,W71=0] 
* CE 512: start(V,V3,V26,V55,V65,V71) = 0+ lcstable(V,V3,W71):4
     [W71>=3,V3>=0,V>=2] 
* CE 513: start(V,V3,V26,V55,V65,V71) = 1+ fun13(W71,V3,V26,X71):1
     [V26>=0,V3>=0,X71=1,W71=1,V=1] 
* CE 514: start(V,V3,V26,V55,V65,V71) = 1+ fun13(W71,X71,V26,Y71):2
     [Y71>=3,V26>=0,Y71=W71+2,Y71=V+2,X71=1,V3=1] 
* CE 515: start(V,V3,V26,V55,V65,V71) = 1+ fun13(V,V3,V26,W71):3
     [V26>=0,V3>=0,V>=0,W71=0] 
* CE 516: start(V,V3,V26,V55,V65,V71) = 1+ fun13(W71,V3,V26,X71):4
     [X71>=2,V26>=0,V3>=0,X71=W71+1,X71=V+1] 
* CE 517: start(V,V3,V26,V55,V65,V71) = 1+ fun13(V,V3,V26,W71):5
     [W71>=V+2,V26>=0,V3>=1,V>=2] 
* CE 518: start(V,V3,V26,V55,V65,V71) = 0+ fun13(W71,V3,V26,X71):1
     [V26>=0,V3>=0,X71=1,W71=1,V=1] 
* CE 519: start(V,V3,V26,V55,V65,V71) = 0+ fun13(W71,X71,V26,Y71):2
     [Y71>=3,V26>=0,Y71=W71+2,Y71=V+2,X71=1,V3=1] 
* CE 520: start(V,V3,V26,V55,V65,V71) = 0+ fun13(V,V3,V26,W71):3
     [V26>=0,V3>=0,V>=0,W71=0] 
* CE 521: start(V,V3,V26,V55,V65,V71) = 0+ fun13(W71,V3,V26,X71):4
     [X71>=2,V26>=0,V3>=0,X71=W71+1,X71=V+1] 
* CE 522: start(V,V3,V26,V55,V65,V71) = 0+ fun13(V,V3,V26,W71):5
     [W71>=V+2,V26>=0,V3>=1,V>=2] 
* CE 523: start(V,V3,V26,V55,V65,V71) = 0+ max(V,V3,W71):1
     [V3>=0,V>=0,W71=0] 
* CE 524: start(V,V3,V26,V55,V65,V71) = 0+ max(W71,V3,V3):2
     [V3>=1,W71=0,V=0] 
* CE 525: start(V,V3,V26,V55,V65,V71) = 0+ max(V,W71,X71):3
     [V>=1,X71=0,W71=0,V3=0] 
* CE 526: start(V,V3,V26,V55,V65,V71) = 0+ max(V,W71,V):4
     [V>=1,W71=0,V3=0] 
* CE 527: start(A,A,B,C,D,E) = 0+ max(A,A,F):5
     [A>=1,F=0] 
* CE 528: start(V,V3,V26,V55,V65,V71) = 0+ max(V,V3,V):6
     [V>=1,V3>=1] 
* CE 529: start(V,V3,V26,V55,V65,V71) = 0+ max(V,V3,V3):7
     [V3>=1,V>=1] 
* CE 530: start(V,V3,V26,V55,V65,V71) = 0+ fun14(W71,V3,V26,V26):1
     [V26>=0,V3>=0,W71=1,V=1] 
* CE 531: start(V,V3,V26,V55,V65,V71) = 0+ fun14(W71,V3,V26,V3):2
     [V3>=0,V26>=0,W71=2,V=2] 
* CE 532: start(V,V3,V26,V55,V65,V71) = 0+ fun14(V,V3,V26,W71):3
     [V26>=0,V3>=0,V>=0,W71=0] 
* CE 533: start(V,V3,V26,V55,V65,V71) = 0+ newline(V,V3,V26,W71):1
     [W71>=1,V26>=1,V3>=1,V>=0] 
* CE 534: start(V,V3,V26,V55,V65,V71) = 0+ newline(V,V3,W71,X71):2
     [V3>=0,V>=0,X71=1,W71=1,V26=1] 
* CE 535: start(V,V3,V26,V55,V65,V71) = 0+ newline(V,V3,V26,W71):3
     [V26>=0,V3>=0,V>=0,W71=0] 
* CE 536: start(V,V3,V26,V55,V65,V71) = 0+ fun17(V,W71,V26,X71,V65,Y71):1
     [2*V>=Y71,Y71>=V+2,V65>=1,V26>=0,X71=0,W71=0,V55=0,V3=0] 
* CE 537: start(V,V3,V26,V55,V65,V71) = 0+ fun17(V,W71,V26,V55,X71,Y71):2
     [2*V>=Y71,Y71>=V+2,V55>=1,V26>=0,X71=0,W71=0,V65=0,V3=0] 
* CE 538: start(V,V3,V26,V55,V65,V71) = 0+ fun17(V,W71,V26,V55,V65,X71):3
     [2*V>=X71,X71>=V+2,V65>=1,V55>=1,V26>=0,W71=0,V3=0] 
* CE 539: start(V,V3,V26,V55,V65,V71) = 0+ fun17(W71,V3,V26,X71,Y71,Z71):4
     [Z71>=4,V26>=3,V3>=0,Z71=W71+4,Z71=V+4,Y71=0,X71=0,V65=0,V55=0] 
* CE 540: start(V,V3,V26,V55,V65,V71) = 0+ fun17(W71,V3,V26,X71,Y71,Z71):5
     [Z71>=3,V26>=0,V3>=0,Z71=W71+3,Z71=V+3,Y71=0,X71=0,V65=0,V55=0] 
* CE 541: start(V,V3,V26,V55,V65,V71) = 0+ fun17(V,V3,V26,W71,X71,Y71):6
     [V+V26+1>=Y71,Y71>=V+1,V26>=4,V3>=0,V>=0,X71=0,W71=0,V65=0,V55=0] 
* CE 542: start(V,V3,V26,V55,V65,V71) = 0+ fun17(V,W71,V26,X71,V65,Y71):7
     [Y71>=V+2,V65>=1,V26>=0,V>=0,Y71=V+W71+1,Y71=V+V3+1,X71=0,V55=0] 
* CE 543: start(V,V3,V26,V55,V65,V71) = 0+ fun17(V,V3,V26,W71,V65,X71):8
     [2*V>=X71,X71>=V+2,V65>=1,V26>=0,V3>=1,W71=0,V55=0] 
* CE 544: start(V,V3,V26,V55,V65,V71) = 0+ fun17(V,W71,V26,V55,X71,Y71):9
     [Y71>=V+2,V55>=1,V26>=0,V>=0,Y71=V+W71+1,Y71=V+V3+1,X71=0,V65=0] 
* CE 545: start(V,V3,V26,V55,V65,V71) = 0+ fun17(V,V3,V26,V55,W71,X71):10
     [2*V>=X71,X71>=V+2,V55>=1,V26>=0,V3>=1,W71=0,V65=0] 
* CE 546: start(V,V3,V26,V55,V65,V71) = 0+ fun17(W71,V3,V26,V55,V65,X71):11
     [X71>=4,V65>=1,V55>=1,V26>=3,V3>=0,X71=W71+4,X71=V+4] 
* CE 547: start(V,V3,V26,V55,V65,V71) = 0+ fun17(W71,V3,V26,V55,V65,X71):12
     [X71>=3,V65>=1,V55>=1,V26>=0,V3>=0,X71=W71+3,X71=V+3] 
* CE 548: start(V,V3,V26,V55,V65,V71) = 0+ fun17(W71,V3,V26,V55,V65,X71):13
     [X71>=1,V65>=0,V55>=0,V26>=0,V3>=0,X71=W71+1,X71=V+1] 
* CE 549: start(V,V3,V26,V55,V65,V71) = 0+ fun17(V,W71,V26,V55,V65,X71):14
     [X71>=V+2,V65>=1,V55>=1,V26>=0,V>=0,X71=V+W71+1,X71=V+V3+1] 
* CE 550: start(V,V3,V26,V55,V65,V71) = 0+ fun17(V,V3,V26,V55,V65,W71):15
     [V+V26+1>=W71,W71>=V+1,V65>=1,V55>=1,V26>=4,V3>=0,V>=0] 
* CE 551: start(V,V3,V26,V55,V65,V71) = 0+ fun17(V,V3,V26,V55,V65,W71):16
     [2*V>=W71,W71>=V+2,V65>=1,V55>=1,V26>=0,V3>=1] 
* CE 552: start(V,V3,V26,V55,V65,V71) = 0+ fun18(W71,V3,V26,X71,Y71,V71,Z71):1
     [Z71>=V3+1,V71>=1,V26>=0,V3>=1,Z71=V3+X71+1,Z71=V3+V55+1,Y71=0,W71=0,V65=0,V=0] 
* CE 553: start(V,V3,V26,V55,V65,V71) = 0+ fun18(W71,V3,V26,X71,V65,Y71,Z71):2
     [Z71>=V3+1,V65>=1,V26>=0,V3>=1,Z71=V3+X71+1,Z71=V3+V55+1,Y71=0,W71=0,V71=0,V=0] 
* CE 554: start(V,V3,V26,V55,V65,V71) = 0+ fun18(W71,V3,V26,X71,V65,V71,Y71):3
     [Y71>=V3+1,V71>=1,V65>=1,V26>=0,V3>=1,Y71=V3+X71+1,Y71=V3+V55+1,W71=0,V=0] 
* CE 555: start(V,V3,V26,V55,V65,V71) = 0+ fun18(V,W71,V26,X71,Y71,V71,Z71):4
     [Z71>=V+1,V71>=1,V26>=0,V>=1,Z71=V+X71+1,Z71=V+V55+1,Y71=0,W71=0,V65=0,V3=0] 
* CE 556: start(V,V3,V26,V55,V65,V71) = 0+ fun18(V,W71,V26,X71,V65,Y71,Z71):5
     [Z71>=V+1,V65>=1,V26>=0,V>=1,Z71=V+X71+1,Z71=V+V55+1,Y71=0,W71=0,V71=0,V3=0] 
* CE 557: start(V,V3,V26,V55,V65,V71) = 0+ fun18(V,W71,V26,X71,V65,V71,Y71):6
     [Y71>=V+1,V71>=1,V65>=1,V26>=0,V>=1,Y71=V+X71+1,Y71=V+V55+1,W71=0,V3=0] 
* CE 558: start(V,V3,V26,V55,V65,V71) = 0+ fun18(V,V3,V26,W71,X71,Y71,Z71):7
     [Z71>=4,V26>=3,V3>=0,V>=0,Z71=W71+4,Z71=V55+4,Y71=0,X71=0,V71=0,V65=0] 
* CE 559: start(V,V3,V26,V55,V65,V71) = 0+ fun18(V,V3,V26,W71,X71,Y71,Z71):8
     [Z71>=3,V26>=0,V3>=0,V>=0,Z71=W71+3,Z71=V55+3,Y71=0,X71=0,V71=0,V65=0] 
* CE 560: start(V,V3,V26,V55,V65,V71) = 0+ fun18(V,V3,V26,V55,W71,X71,Y71):9
     [V26+V55+1>=Y71,Y71>=V55+1,V55>=0,V26>=4,V3>=0,V>=0,X71=0,W71=0,V71=0,V65=0] 
* CE 561: start(V,V3,V26,V55,V65,V71) = 0+ fun18(V,V3,V26,W71,X71,V71,Y71):10
     [Y71>=V+1,V71>=1,V26>=0,V3>=1,V>=1,Y71=V+W71+1,Y71=V+V55+1,X71=0,V65=0] 
* CE 562: start(V,V3,V26,V55,V65,V71) = 0+ fun18(V,V3,V26,W71,X71,V71,Y71):11
     [Y71>=V3+1,V71>=1,V26>=0,V3>=1,V>=1,Y71=V3+W71+1,Y71=V3+V55+1,X71=0,V65=0] 
* CE 563: start(V,V3,V26,V55,V65,V71) = 0+ fun18(V,V3,V26,W71,V65,X71,Y71):12
     [Y71>=V+1,V65>=1,V26>=0,V3>=1,V>=1,Y71=V+W71+1,Y71=V+V55+1,X71=0,V71=0] 
* CE 564: start(V,V3,V26,V55,V65,V71) = 0+ fun18(V,V3,V26,W71,V65,X71,Y71):13
     [Y71>=V3+1,V65>=1,V26>=0,V3>=1,V>=1,Y71=V3+W71+1,Y71=V3+V55+1,X71=0,V71=0] 
* CE 565: start(V,V3,V26,V55,V65,V71) = 0+ fun18(V,V3,V26,W71,V65,V71,X71):14
     [X71>=4,V71>=1,V65>=1,V26>=3,V3>=0,V>=0,X71=W71+4,X71=V55+4] 
* CE 566: start(V,V3,V26,V55,V65,V71) = 0+ fun18(V,V3,V26,W71,V65,V71,X71):15
     [X71>=3,V71>=1,V65>=1,V26>=0,V3>=0,V>=0,X71=W71+3,X71=V55+3] 
* CE 567: start(V,V3,V26,V55,V65,V71) = 0+ fun18(V,V3,V26,W71,V65,V71,X71):16
     [X71>=1,V71>=0,V65>=0,V26>=0,V3>=0,V>=0,X71=W71+1,X71=V55+1] 
* CE 568: start(V,V3,V26,V55,V65,V71) = 0+ fun18(V,V3,V26,W71,V65,V71,X71):17
     [X71>=V+1,V71>=1,V65>=1,V26>=0,V3>=1,V>=1,X71=V+W71+1,X71=V+V55+1] 
* CE 569: start(V,V3,V26,V55,V65,V71) = 0+ fun18(V,V3,V26,W71,V65,V71,X71):18
     [X71>=V3+1,V71>=1,V65>=1,V26>=0,V3>=1,V>=1,X71=V3+W71+1,X71=V3+V55+1] 
* CE 570: start(V,V3,V26,V55,V65,V71) = 0+ fun18(V,V3,V26,V55,V65,V71,W71):19
     [V26+V55+1>=W71,W71>=V55+1,V71>=1,V65>=1,V55>=0,V26>=4,V3>=0,V>=0] 
* CE 571: start(V,V3,V26,V55,V65,V71) = 0+ fun19(W71,V3,X71,V55,Y71,Z71,A72):1
     [A72>=3,V55>=0,V3>=0,A72=X71+3,A72=V26+3,Z71=0,Y71=0,W71=0,V71=0,V65=0,V=0] 
* CE 572: start(V,V3,V26,V55,V65,V71) = 0+ fun19(W71,V3,X71,V55,V65,V71,Y71):2
     [Y71>=3,V71>=1,V65>=1,V55>=0,V3>=0,Y71=X71+3,Y71=V26+3,W71=0,V=0] 
* CE 573: start(V,V3,V26,V55,V65,V71) = 0+ fun19(W71,V3,X71,V55,Y71,Z71,A72):3
     [A72>=4,V55>=0,V3>=0,A72=X71+4,A72=V26+4,Z71=0,Y71=0,W71=2,V71=0,V65=0,V=2] 
* CE 574: start(V,V3,V26,V55,V65,V71) = 0+ fun19(W71,V3,X71,V55,V65,V71,Y71):4
     [Y71>=4,V71>=1,V65>=1,V55>=0,V3>=0,Y71=X71+4,Y71=V26+4,W71=2,V=2] 
* CE 575: start(V,V3,V26,V55,V65,V71) = 0+ fun19(V,W71,V26,X71,Y71,V71,Z71):5
     [Z71>=V26+2,V71>=1,V26>=0,V>=0,Z71=V26+X71+1,Z71=V26+V55+1,Y71=0,W71=0,V65=0,V3=0] 
* CE 576: start(V,V3,V26,V55,V65,V71) = 0+ fun19(V,W71,V26,X71,V65,Y71,Z71):6
     [Z71>=V26+2,V65>=1,V26>=0,V>=0,Z71=V26+X71+1,Z71=V26+V55+1,Y71=0,W71=0,V71=0,V3=0] 
* CE 577: start(V,V3,V26,V55,V65,V71) = 0+ fun19(V,W71,V26,X71,V65,V71,Y71):7
     [Y71>=V26+2,V71>=1,V65>=1,V26>=0,V>=0,Y71=V26+X71+1,Y71=V26+V55+1,W71=0,V3=0] 
* CE 578: start(V,V3,V26,V55,V65,V71) = 0+ fun19(V,V3,W71,X71,Y71,V71,Z71):8
     [Z71>=V3+1,V71>=1,V3>=1,V>=0,Z71=V3+W71+1,Z71=V3+V26+1,Y71=0,X71=0,V65=0,V55=0] 
* CE 579: start(V,V3,V26,V55,V65,V71) = 0+ fun19(V,V3,W71,X71,V65,Y71,Z71):9
     [Z71>=V3+1,V65>=1,V3>=1,V>=0,Z71=V3+W71+1,Z71=V3+V26+1,Y71=0,X71=0,V71=0,V55=0] 
* CE 580: start(V,V3,V26,V55,V65,V71) = 0+ fun19(V,V3,W71,X71,V65,V71,Y71):10
     [Y71>=V3+1,V71>=1,V65>=1,V3>=1,V>=0,Y71=V3+W71+1,Y71=V3+V26+1,X71=0,V55=0] 
* CE 581: start(V,V3,V26,V55,V65,V71) = 0+ fun19(V,V3,V26,V55,W71,X71,Y71):11
     [V+V26+2>=Y71,Y71>=V26+1,V55>=0,V26>=0,V3>=0,V>=3,X71=0,W71=0,V71=0,V65=0] 
* CE 582: start(V,V3,V26,V55,V65,V71) = 0+ fun19(V,V3,W71,V55,V65,V71,X71):12
     [X71>=1,V71>=0,V65>=0,V55>=0,V3>=0,V>=0,X71=W71+1,X71=V26+1] 
* CE 583: start(V,V3,V26,V55,V65,V71) = 0+ fun19(V,V3,W71,V55,X71,V71,Y71):13
     [Y71>=V3+1,V71>=1,V55>=1,V3>=1,V>=0,Y71=V3+W71+1,Y71=V3+V26+1,X71=0,V65=0] 
* CE 584: start(V,V3,V26,V55,V65,V71) = 0+ fun19(V,V3,V26,W71,X71,V71,Y71):14
     [Y71>=V26+2,V71>=1,V26>=0,V3>=1,V>=0,Y71=V26+W71+1,Y71=V26+V55+1,X71=0,V65=0] 
* CE 585: start(V,V3,V26,V55,V65,V71) = 0+ fun19(V,V3,W71,V55,V65,X71,Y71):15
     [Y71>=1,V65>=1,V55>=0,V3>=0,V>=0,Y71=W71+1,Y71=V26+1,X71=0,V71=0] 
* CE 586: start(V,V3,V26,V55,V65,V71) = 0+ fun19(V,V3,W71,V55,V65,X71,Y71):16
     [Y71>=V3+1,V65>=1,V55>=1,V3>=1,V>=0,Y71=V3+W71+1,Y71=V3+V26+1,X71=0,V71=0] 
* CE 587: start(V,V3,V26,V55,V65,V71) = 0+ fun19(V,V3,V26,W71,V65,X71,Y71):17
     [Y71>=V26+2,V65>=1,V26>=0,V3>=1,V>=0,Y71=V26+W71+1,Y71=V26+V55+1,X71=0,V71=0] 
* CE 588: start(V,V3,V26,V55,V65,V71) = 0+ fun19(V,V3,W71,V55,V65,V71,X71):18
     [X71>=V3+1,V71>=1,V65>=1,V55>=1,V3>=1,V>=0,X71=V3+W71+1,X71=V3+V26+1] 
* CE 589: start(V,V3,V26,V55,V65,V71) = 0+ fun19(V,V3,V26,W71,V65,V71,X71):19
     [X71>=V26+2,V71>=1,V65>=1,V26>=0,V3>=1,V>=0,X71=V26+W71+1,X71=V26+V55+1] 
* CE 590: start(V,V3,V26,V55,V65,V71) = 0+ fun19(V,V3,V26,V55,V65,V71,W71):20
     [V+V26+2>=W71,W71>=V26+1,V71>=1,V65>=1,V55>=0,V26>=0,V3>=0,V>=3] 
* CE 591: start(V,V3,V26,V55,V65,V71) = 0+ fun21(W71,X71,V26,V55,V55):1
     [V55>=1,V26>=0,X71=0,W71=1,V3=0,V=1] 
* CE 592: start(V,V3,V26,V55,V65,V71) = 0+ fun21(W71,V3,V26,X71,V3):2
     [V3>=1,V26>=0,X71=0,W71=1,V55=0,V=1] 
* CE 593: start(V,V3,V26,V55,V65,V71) = 0+ fun21(V,V3,V26,V55,W71):3
     [V55>=0,V26>=0,V3>=0,V>=0,W71=0] 
* CE 594: start(V,V3,V26,V55,V65,V71) = 0+ fun21(W71,V3,V26,V55,V3):4
     [V3>=1,V55>=1,V26>=0,W71=1,V=1] 
* CE 595: start(V,V3,V26,V55,V65,V71) = 0+ fun21(W71,V3,V26,V55,V55):5
     [V55>=1,V26>=0,V3>=1,W71=1,V=1] 
* CE 596: start(V,V3,V26,V55,V65,V71) = 0+ fun21(W71,V3,X71,V55,Y71):6
     [V55>=0,V3>=0,Y71=2,X71=0,W71=2,V26=0,V=2] 
* CE 597: start(V,V3,V26,V55,V65,V71) = 0+ fun21(W71,V3,X71,V55,Y71):7
     [V55>=0,V3>=0,Y71=3,X71=2,W71=2,V26=2,V=2] 
* CE 598: start(V,V3,V26,V55,V65,V71) = 0+ fun21(W71,V3,V26,V55,X71):8
     [V55>=0,V26>=0,V3>=0,X71=0,W71=2,V=2] 
* CE 599: start(V,V3,V26,V55,V65,V71) = 0+ fun21(W71,V3,V26,V55,X71):9
     [V26+1>=X71,X71>=0,V55>=0,V26>=3,V3>=0,W71=2,V=2] 
* CE 600: start(V,V3,V26,V55,V65,V71) = 1+ fun22(V,W71):1
     [V>=0,W71=0] 
* CE 601: start(V,V3,V26,V55,V65,V71) = 1+ fun22(V,W71):2
     [V>=W71+1,W71>=0] 
* CE 602: start(V,V3,V26,V55,V65,V71) = 0+ fun22(V,W71):1
     [V>=0,W71=0] 
* CE 603: start(V,V3,V26,V55,V65,V71) = 0+ fun22(V,W71):2
     [V>=W71+1,W71>=0] 
* CE 604: start(V,V3,V26,V55,V65,V71) = 0+ fun6(W71,V3,V3):1
     [V3>=0,W71=0,V=0] 
* CE 605: start(V,V3,V26,V55,V65,V71) = 0+ fun6(W71,X71,Y71):2
     [Y71=2,X71=0,W71=2,V3=0,V=2] 
* CE 606: start(V,V3,V26,V55,V65,V71) = 0+ fun6(W71,X71,Y71):3
     [Y71>=3,Y71=X71+1,Y71=V3+1,W71=2,V=2] 
* CE 607: start(V,V3,V26,V55,V65,V71) = 0+ fun6(W71,X71,Y71):4
     [Y71>=2,Y71+1=X71,Y71+1=V3,W71=2,V=2] 
* CE 608: start(V,V3,V26,V55,V65,V71) = 0+ fun6(V,W71,X71):5
     [V>=X71,X71>=0,V>=3,W71=0,V3=0] 
* CE 609: start(V,V3,V26,V55,V65,V71) = 0+ fun6(V,V3,W71):6
     [V3>=0,V>=0,W71=0] 
* CE 610: start(V,V3,V26,V55,V65,V71) = 0+ fun6(V,V3,W71):7
     [V>=W71+1,W71>=0,V3>=0,V>=3] 
* CE 611: start(V,V3,V26,V55,V65,V71) = 0+ fun6(V,V3,W71):8
     [V+V3>=W71+1,W71>=0,V3>=2,V>=3] 
* CE 612: start(V,V3,V26,V55,V65,V71) = 0+ fun25(W71,X71,Y71):1
     [Y71=1,X71=1,W71=1,V3=1,V=1] 
* CE 613: start(V,V3,V26,V55,V65,V71) = 0+ fun25(W71,X71,Y71):2
     [Y71=1,X71=2,W71=1,V3=2,V=1] 
* CE 614: start(V,V3,V26,V55,V65,V71) = 0+ fun25(W71,X71,Y71):3
     [Y71=1,X71=1,W71=2,V3=1,V=2] 
* CE 615: start(V,V3,V26,V55,V65,V71) = 0+ fun25(W71,X71,Y71):4
     [Y71=2,X71=2,W71=2,V3=2,V=2] 
* CE 616: start(V,V3,V26,V55,V65,V71) = 0+ fun25(V,V3,W71):5
     [V3>=0,V>=0,W71=0] 
* CE 617: start(V,V3,V26,V55,V65,V71) = 0+ fun4(W71,X71):1
     [X71=1,W71=1,V=1] 
* CE 618: start(V,V3,V26,V55,V65,V71) = 0+ fun4(W71,X71):2
     [X71=2,W71=2,V=2] 
* CE 619: start(V,V3,V26,V55,V65,V71) = 0+ fun4(W71,X71):3
     [X71=1,W71=3,V=3] 
* CE 620: start(V,V3,V26,V55,V65,V71) = 0+ fun4(V,W71):4
     [V>=0,W71=0] 
* CE 621: start(V,V3,V26,V55,V65,V71) = 0+ fun5(W71,X71,Y71):1
     [Y71=1,X71=0,W71=0,V3=0,V=0] 
* CE 622: start(V,V3,V26,V55,V65,V71) = 0+ fun5(W71,V3,X71):2
     [V3>=1,X71=2,W71=0,V=0] 
* CE 623: start(V,V3,V26,V55,V65,V71) = 0+ fun5(W71,V3,X71):3
     [V3>=1,X71=3,W71=0,V=0] 
* CE 624: start(V,V3,V26,V55,V65,V71) = 0+ fun5(V,W71,X71):4
     [V>=1,X71=2,W71=0,V3=0] 
* CE 625: start(V,V3,V26,V55,V65,V71) = 0+ fun5(V,W71,X71):5
     [V>=1,X71=3,W71=0,V3=0] 
* CE 626: start(V,V3,V26,V55,V65,V71) = 0+ fun5(V,V3,W71):6
     [V3>=0,V>=0,W71=0] 
* CE 627: start(A,A,B,C,D,E) = 0+ fun5(A,A,F):7
     [A>=1,F=1] 
* CE 628: start(V,V3,V26,V55,V65,V71) = 0+ fun5(V,V3,W71):8
     [V3>=1,V>=1,W71=2] 
* CE 629: start(V,V3,V26,V55,V65,V71) = 0+ fun5(V,V3,W71):9
     [V3>=1,V>=1,W71=3] 
* CE 630: start(V,V3,V26,V55,V65,V71) = 0+ fun2(W71,X71,Y71):1
     [Y71=2,X71=0,W71=0,V3=0,V=0] 
* CE 631: start(V,V3,V26,V55,V65,V71) = 0+ fun2(W71,V3,X71):2
     [V3>=1,X71=1,W71=0,V=0] 
* CE 632: start(V,V3,V26,V55,V65,V71) = 0+ fun2(V,V3,W71):3
     [W71>=0,V3>=1,V>=1,2>=W71] 
* CE 633: start(V,V3,V26,V55,V65,V71) = 0+ fun2(V,W71,X71):4
     [V>=1,X71=1,W71=0,V3=0] 
* CE 634: start(V,V3,V26,V55,V65,V71) = 0+ fun2(V,V3,W71):5
     [V3>=0,V>=0,W71=0] 
* CE 635: start(V,V3,V26,V55,V65,V71) = 0+ fun2(V,V3,W71):6
     [V3>=1,V>=1,W71=1] 
* CE 636: start(V,V3,V26,V55,V65,V71) = 0+ fun23(W71,X71):1
     [X71=2,W71=0,V=0] 
* CE 637: start(V,V3,V26,V55,V65,V71) = 0+ fun23(V,W71):2
     [V>=0,W71=0] 
* CE 638: start(V,V3,V26,V55,V65,V71) = 0+ fun23(W71,X71):3
     [X71>=3,X71=W71+1,X71=V+1] 
* CE 639: start(V,V3,V26,V55,V65,V71) = 0+ fun23(W71,X71):4
     [X71>=2,X71+1=W71,X71+1=V] 
* CE 640: start(V,V3,V26,V55,V65,V71) = 0+ fun24(W71,X71):1
     [X71=2,W71=0,V=0] 
* CE 641: start(V,V3,V26,V55,V65,V71) = 0+ fun24(V,W71):2
     [V>=0,W71=0] 
* CE 642: start(V,V3,V26,V55,V65,V71) = 0+ fun24(W71,X71):3
     [X71>=3,X71=W71+1,X71=V+1] 
* CE 643: start(V,V3,V26,V55,V65,V71) = 0+ fun24(W71,X71):4
     [X71>=2,X71+1=W71,X71+1=V] 

### Cost equations --> "Loop" of start/6 
* CEs [487,527,627] --> Loop 260 
* CEs [561,562] --> Loop 261 
* CEs [544,545,583,584] --> Loop 262 
* CEs [558,559,560,581] --> Loop 263 
* CEs [542,579,580] --> Loop 264 
* CEs [539,540,541,578] --> Loop 265 
* CEs [433,440,441,452,462,543] --> Loop 266 
* CEs [397,399,400,401,404,405,416,422,423,424,426] --> Loop 267 
* CEs [382,386,391] --> Loop 268 
* CEs [378,514,519] --> Loop 269 
* CEs [577] --> Loop 270 
* CEs [556] --> Loop 271 
* CEs [563,564,576,585,586,587] --> Loop 272 
* CEs [537] --> Loop 273 
* CEs [555] --> Loop 274 
* CEs [575] --> Loop 275 
* CEs [451,453,454,455,456,457,534] --> Loop 276 
* CEs [432,435,436,437,438,439,448,449,450,458,459,460,461,477,484,485,486,494,525,526,536,538,557,608,624,625,633] --> Loop 277 
* CEs [619] --> Loop 278 
* CEs [412,413,414,415,491,492,493,531,573,574,596,597,598,599,605,606,607,614,615,618] --> Loop 279 
* CEs [380,381,468,500,509,510,513,518,530,591,592,594,595,612,613,617] --> Loop 280 
* CEs [379,383,384,385,387,388,389,390,392,393,394,395,396,398,402,403,406,407,408,409,410,411,417,418,419,420,421,425,427,428,429,430,431,434,442,443,444,445,446,447,463,464,465,466,467,469,470,471,472,473,474,475,476,478,479,480,481,482,483,488,489,490,495,496,497,498,499,501,502,503,504,505,506,507,508,511,512,515,516,517,520,521,522,523,524,528,529,532,533,535,546,547,548,549,550,551,552,553,554,565,566,567,568,569,570,571,572,582,588,589,590,593,600,601,602,603,604,609,610,611,616,620,621,622,623,626,628,629,630,631,632,634,635,636,637,638,639,640,641,642,643] --> Loop 281 

#### Loops of start/6 
* Loop 260: start(A,A,B,C,D,E) [A>=1] 
* Loop 261: start(V,V3,V26,V55,V65,V71) [V71>=1,V55>=0,V26>=0,V3>=1,V>=1,V65=0] 
* Loop 262: start(V,V3,V26,V55,V65,V71) [V55>=1,V26>=0,V3>=1,V>=0,V65=0] 
* Loop 263: start(V,V3,V26,V55,V65,V71) [V55>=0,V26>=0,V3>=0,V>=0,V71=0,V65=0] 
* Loop 264: start(V,V3,V26,V55,V65,V71) [V65>=1,V26>=0,V3>=1,V>=0,V55=0] 
* Loop 265: start(V,V3,V26,V55,V65,V71) [V26>=0,V3>=0,V>=0,V65=0,V55=0] 
* Loop 266: start(V,V3,V26,V55,V65,V71) [V26>=0,V3>=1,V>=2,V55=0] 
* Loop 267: start(V,V3,V26,V55,V65,V71) [V3>=1,V>=1,V26=0] 
* Loop 268: start(V,V3,V26,V55,V65,V71) [V>=2,V3=1] 
* Loop 269: start(V,V3,V26,V55,V65,V71) [V26>=0,V>=1,V3=1] 
* Loop 270: start(V,V3,V26,V55,V65,V71) [V71>=1,V65>=1,V55>=1,V26>=0,V>=0,V3=0] 
* Loop 271: start(V,V3,V26,V55,V65,V71) [V65>=1,V55>=0,V26>=0,V>=1,V71=0,V3=0] 
* Loop 272: start(V,V3,V26,V55,V65,V71) [V65>=1,V55>=0,V26>=0,V3>=0,V>=0,V71=0] 
* Loop 273: start(V,V3,V26,V55,V65,V71) [V55>=1,V26>=0,V>=2,V65=0,V3=0] 
* Loop 274: start(V,V3,V26,V55,V65,V71) [V71>=1,V55>=0,V26>=0,V>=1,V65=0,V3=0] 
* Loop 275: start(V,V3,V26,V55,V65,V71) [V71>=1,V55>=1,V26>=0,V>=0,V65=0,V3=0] 
* Loop 276: start(V,V3,V26,V55,V65,V71) [V3>=0,V>=0,V26=1] 
* Loop 277: start(V,V3,V26,V55,V65,V71) [V>=1,V3=0] 
* Loop 278: start(V,V3,V26,V55,V65,V71) [V=3] 
* Loop 279: start(V,V3,V26,V55,V65,V71) [V=2] 
* Loop 280: start(V,V3,V26,V55,V65,V71) [V=1] 
* Loop 281: start(V,V3,V26,V55,V65,V71) [V>=0] 

### Ranking functions of CR start(V,V3,V26,V55,V65,V71) 

#### Partial ranking functions of CR start(V,V3,V26,V55,V65,V71) 


### Resulting Chains:start(V,V3,V26,V55,V65,V71) 
* [281]
* [280]
* [279]
* [278]
* [277]
* [276]
* [275]
* [274]
* [273]
* [272]
* [271]
* [270]
* [269]
* [268]
* [267]
* [266]
* [265]
* [264]
* [263]
* [262]
* [261]
* [260]


### Merging Chains  start/6 into  External patterns of execution 
* [[280],[281]] --> 1 
* [[279]] --> 2 
* [[278]] --> 3 
* [[275]] --> 4 
* [[274],[277]] --> 5 
* [[273]] --> 6 
* [[271],[272]] --> 7 
* [[270]] --> 8 
* [[269]] --> 9 
* [[268]] --> 10 
* [[267]] --> 11 
* [[276]] --> 12 
* [[265]] --> 13 
* [[264]] --> 14 
* [[266]] --> 15 
* [[263]] --> 16 
* [[262]] --> 17 
* [[261]] --> 18 
* [[260]] --> 19 


Computing Bounds
=====================================

#### Cost of chains of fun(V,Out):
* Chain [79]: 1
  with precondition: [Out=0,V>=0] 

* Chain [78]: 1
  with precondition: [V+1=Out,V>=1] 

* Chain [77]: 1
  with precondition: [V=Out,V>=1] 


#### Cost of loops [82] 

 * loop 82:firstline(V,Out) -> [firstline(V',Out')] 
3
#### Cost of phase [82]:firstline(V,Out) -> [firstline(V',Out')] 
3*it(82)+0
  Such that:it(82) =< V
it(82) =< V-V'

#### Cost of phase [82]:firstline(V,Out) -> [firstline(V',Out')] 
3*it(82)+0
  Such that:it(82) =< V
it(82) =< V-V'

#### Cost of chains of firstline(V,Out):
* Chain [[82],81]: 3*it(82)+2
  Such that:it(82) =< V

  with precondition: [Out>=2,V>=Out] 

* Chain [[82],80]: 3*it(82)+1
  Such that:it(82) =< V

  with precondition: [Out>=1,V>=Out] 

* Chain [81]: 2
  with precondition: [V=1,Out=1] 

* Chain [80]: 1
  with precondition: [Out=0,V>=0] 


#### Cost of chains of fun25(V,V3,Out):
* Chain [87]: 0
  with precondition: [V=1,V3=1,Out=1] 

* Chain [86]: 0
  with precondition: [V=1,V3=2,Out=1] 

* Chain [85]: 0
  with precondition: [V=2,V3=1,Out=1] 

* Chain [84]: 0
  with precondition: [V=2,V3=2,Out=2] 

* Chain [83]: 0
  with precondition: [Out=0,V>=0,V3>=0] 


#### Cost of loops [88,89,90,91,92,93] 

 * loop 88:fun2(V,V3,Out) -> [fun2(V',V3',Out')] 
0
 * loop 89:fun2(V,V3,Out) -> [fun2(V',V3',Out'),fun2(V'2,V3'2,Out'2)] 
0
 * loop 90:fun2(V,V3,Out) -> [fun2(V',V3',Out'),fun2(V'2,V3'2,Out'2)] 
0
 * loop 91:fun2(V,V3,Out) -> [fun2(V',V3',Out'),fun2(V'2,V3'2,Out'2)] 
0
 * loop 92:fun2(V,V3,Out) -> [fun2(V',V3',Out'),fun2(V'2,V3'2,Out'2)] 
0
 * loop 93:fun2(V,V3,Out) -> [fun2(V',V3',Out'),fun2(V'2,V3'2,Out'2)] 
0
#### Cost of phase [88,89,90,91,92,93]:fun2(V,V3,Out) -> [] 
0
#### Cost of chains of fun2(V,V3,Out):
* Chain [99]: 0
  with precondition: [V=0,V3=0,Out=2] 

* Chain [98]: 0
  with precondition: [V=0,Out=1,V3>=1] 

* Chain [97]: 0
  with precondition: [V=1,V3=1,Out=2] 

* Chain [96]: 0
  with precondition: [V3=0,Out=1,V>=1] 

* Chain [95]: 0
  with precondition: [Out=0,V>=0,V3>=0] 

* Chain [94]: 0
  with precondition: [Out=1,V>=1,V3>=1] 

* Chain [multiple([88,89,90,91,92,93],[[99],[98],[97],[96],[95],[94]])]: 0
  with precondition: [2>=Out,V>=1,V3>=1,Out>=0] 


#### Cost of chains of fun10(V,Out):
* Chain [101]: 2
  with precondition: [Out=0,V>=0] 

* Chain [100]: 1
  with precondition: [Out>=0,V>=Out+1] 


#### Cost of chains of fun14(V,V3,V26,Out):
* Chain [104]: 1
  with precondition: [V=1,V26=Out,V3>=0,V26>=0] 

* Chain [103]: 1
  with precondition: [V=2,V3=Out,V3>=0,V26>=0] 

* Chain [102]: 0
  with precondition: [Out=0,V>=0,V3>=0,V26>=0] 


#### Cost of chains of fun4(V,Out):
* Chain [108]: 0
  with precondition: [V=1,Out=1] 

* Chain [107]: 0
  with precondition: [V=2,Out=2] 

* Chain [106]: 0
  with precondition: [V=3,Out=1] 

* Chain [105]: 0
  with precondition: [Out=0,V>=0] 


#### Cost of loops [109,110] 

 * loop 109:fun5(V,V3,Out) -> [fun5(V',V3',Out')] 
0
 * loop 110:fun5(V,V3,Out) -> [fun5(V',V3',Out')] 
0
#### Cost of phase [109,110]:fun5(V,V3,Out) -> [fun5(V',V3',Out')] 
0
#### Cost of phase [109,110]:fun5(V,V3,Out) -> [fun5(V',V3',Out')] 
0
#### Cost of phase [109,110]:fun5(V,V3,Out) -> [fun5(V',V3',Out')] 
0
#### Cost of phase [109,110]:fun5(V,V3,Out) -> [fun5(V',V3',Out')] 
0
#### Cost of phase [109,110]:fun5(V,V3,Out) -> [fun5(V',V3',Out')] 
0
#### Cost of phase [109,110]:fun5(V,V3,Out) -> [fun5(V',V3',Out')] 
0
#### Cost of phase [109,110]:fun5(V,V3,Out) -> [fun5(V',V3',Out')] 
0
#### Cost of phase [109,110]:fun5(V,V3,Out) -> [fun5(V',V3',Out')] 
0
#### Cost of chains of fun5(V,V3,Out):
* Chain [[109,110],118]: 0
  with precondition: [Out=1,V3=V,V3>=1] 

* Chain [[109,110],117]: 0
  with precondition: [Out=2,V>=1,V3>=1,V+V3>=3] 

* Chain [[109,110],116]: 0
  with precondition: [Out=3,V>=1,V3>=1,V+V3>=3] 

* Chain [[109,110],115]: 0
  with precondition: [Out=2,V>=1,V3>=1,V+V3>=3] 

* Chain [[109,110],114]: 0
  with precondition: [Out=3,V>=1,V3>=1,V+V3>=3] 

* Chain [[109,110],113]: 0
  with precondition: [Out=0,V>=1,V3>=1] 

* Chain [[109,110],112]: 0
  with precondition: [Out=2,V>=2,V3>=2] 

* Chain [[109,110],111]: 0
  with precondition: [Out=3,V>=2,V3>=2] 

* Chain [118]: 0
  with precondition: [V=0,V3=0,Out=1] 

* Chain [117]: 0
  with precondition: [V=0,Out=2,V3>=1] 

* Chain [116]: 0
  with precondition: [V=0,Out=3,V3>=1] 

* Chain [115]: 0
  with precondition: [V3=0,Out=2,V>=1] 

* Chain [114]: 0
  with precondition: [V3=0,Out=3,V>=1] 

* Chain [113]: 0
  with precondition: [Out=0,V>=0,V3>=0] 

* Chain [112]: 0
  with precondition: [Out=2,V>=1,V3>=1] 

* Chain [111]: 0
  with precondition: [Out=3,V>=1,V3>=1] 


#### Cost of chains of fun3(V,V3,Out):
* Chain [129]: 1
  with precondition: [Out=0,V>=0,V3>=0] 

* Chain [128]: 1
  with precondition: [V=0,V3=0,Out=1] 

* Chain [127]: 1
  with precondition: [V=0,Out=0,V3>=1] 

* Chain [126]: 1
  with precondition: [V=0,Out=1,V3>=1] 

* Chain [125]: 1
  with precondition: [V=0,Out=2,V3>=1] 

* Chain [124]: 1
  with precondition: [V3=0,Out=0,V>=1] 

* Chain [123]: 1
  with precondition: [V3=0,Out=1,V>=1] 

* Chain [122]: 1
  with precondition: [V3=0,Out=2,V>=1] 

* Chain [121]: 1
  with precondition: [Out=0,V=V3,V>=1] 

* Chain [120]: 1
  with precondition: [Out=1,V>=1,V3>=1] 

* Chain [119]: 1
  with precondition: [Out=2,V>=1,V3>=1] 


#### Cost of chains of max(V,V3,Out):
* Chain [137]: 3
  with precondition: [Out=0,V>=0,V3>=0] 

* Chain [136]: 3
  with precondition: [V=0,Out=0,V3>=1] 

* Chain [135]: 3
  with precondition: [V=0,V3=Out,V3>=1] 

* Chain [134]: 3
  with precondition: [V3=0,Out=0,V>=1] 

* Chain [133]: 3
  with precondition: [V3=0,V=Out,V>=1] 

* Chain [132]: 2
  with precondition: [Out=0,V=V3,V>=1] 

* Chain [131]: 3
  with precondition: [V=Out,V>=1,V3>=1] 

* Chain [130]: 3
  with precondition: [V3=Out,V>=1,V3>=1] 


#### Cost of chains of fun23(V,Out):
* Chain [141]: 0
  with precondition: [V=0,Out=2] 

* Chain [140]: 0
  with precondition: [Out=0,V>=0] 

* Chain [139]: 0
  with precondition: [V+1=Out,V>=2] 

* Chain [138]: 0
  with precondition: [V=Out+1,V>=3] 


#### Cost of chains of fun24(V,Out):
* Chain [145]: 0
  with precondition: [V=0,Out=2] 

* Chain [144]: 0
  with precondition: [Out=0,V>=0] 

* Chain [143]: 0
  with precondition: [V+1=Out,V>=2] 

* Chain [142]: 0
  with precondition: [V=Out+1,V>=3] 


#### Cost of loops [146,147,148,149] 

 * loop 146:fun6(V,V3,Out) -> [fun6(V',V3',Out')] 
0
 * loop 147:fun6(V,V3,Out) -> [fun6(V',V3',Out')] 
0
 * loop 148:fun6(V,V3,Out) -> [fun6(V',V3',Out')] 
0
 * loop 149:fun6(V,V3,Out) -> [fun6(V',V3',Out')] 
0
#### Cost of phase [146,147,148,149]:fun6(V,V3,Out) -> [fun6(V',V3',Out')] 
0
#### Cost of phase [146,147,148,149]:fun6(V,V3,Out) -> [fun6(V',V3',Out')] 
0
#### Cost of phase [146,147,148,149]:fun6(V,V3,Out) -> [fun6(V',V3',Out')] 
0
#### Cost of phase [146,147,148,149]:fun6(V,V3,Out) -> [fun6(V',V3',Out')] 
0
#### Cost of chains of fun6(V,V3,Out):
* Chain [[146,147,148,149],153]: 0
  with precondition: [V3=0,V>=3,Out>=0,V>=Out] 

* Chain [[146,147,148,149],152]: 0
  with precondition: [V>=3,V3>=0,Out>=0,V>=Out+1] 

* Chain [[146,147,148,149],151]: 0
  with precondition: [V>=3,V3>=2,Out>=0,V+V3>=Out+1] 

* Chain [[146,147,148,149],150]: 0
  with precondition: [V>=3,V3>=3,Out>=0,V+V3>=Out+3] 

* Chain [154]: 0
  with precondition: [V=0,V3=Out,V3>=0] 

* Chain [153]: 0
  with precondition: [V=2,V3=0,Out=2] 

* Chain [152]: 0
  with precondition: [Out=0,V>=0,V3>=0] 

* Chain [151]: 0
  with precondition: [V=2,V3+1=Out,V3>=2] 

* Chain [150]: 0
  with precondition: [V=2,V3=Out+1,V3>=3] 


#### Cost of chains of fun21(V,V3,V26,V55,Out):
* Chain [164]: 4
  with precondition: [V=1,V3=0,V55=Out,V26>=0,V55>=1] 

* Chain [163]: 4
  with precondition: [Out=0,V>=0,V3>=0,V26>=0,V55>=0] 

* Chain [162]: 4
  with precondition: [V=1,V55=0,V3=Out,V3>=1,V26>=0] 

* Chain [161]: 3
  with precondition: [V=1,Out=0,V3=V55,V3>=1,V26>=0] 

* Chain [160]: 4
  with precondition: [V=1,V3=Out,V3>=1,V26>=0,V55>=1] 

* Chain [159]: 4
  with precondition: [V=1,V55=Out,V3>=1,V26>=0,V55>=1] 

* Chain [158]: 2
  with precondition: [V=2,V26=0,Out=2,V3>=0,V55>=0] 

* Chain [157]: 2
  with precondition: [V=2,V26=2,Out=3,V3>=0,V55>=0] 

* Chain [156]: 2
  with precondition: [V=2,Out=0,V3>=0,V26>=0,V55>=0] 

* Chain [155]: 2
  with precondition: [V=2,V3>=0,V26>=3,V55>=0,Out>=0,V26+1>=Out] 


#### Cost of chains of fun19(V,V3,V26,V55,V65,V71,Out):
* Chain [185]: 5
  with precondition: [V=0,V65=0,V71=0,V26+3=Out,V3>=0,V26>=0,V55>=0] 

* Chain [184]: 5
  with precondition: [V=0,V26+3=Out,V3>=0,V26>=0,V55>=0,V65>=1,V71>=1] 

* Chain [183]: 5
  with precondition: [V=2,V65=0,V71=0,V26+4=Out,V3>=0,V26>=0,V55>=0] 

* Chain [182]: 5
  with precondition: [V=2,V26+4=Out,V3>=0,V26>=0,V55>=0,V65>=1,V71>=1] 

* Chain [181]: 7
  with precondition: [V3=0,V65=0,V26+V55+1=Out,V>=0,V26>=0,V55>=1,V71>=1] 

* Chain [180]: 7
  with precondition: [V3=0,V71=0,V26+V55+1=Out,V>=0,V26>=0,V55>=1,V65>=1] 

* Chain [179]: 7
  with precondition: [V3=0,V26+V55+1=Out,V>=0,V26>=0,V55>=1,V65>=1,V71>=1] 

* Chain [178]: 7
  with precondition: [V55=0,V65=0,V3+V26+1=Out,V>=0,V3>=1,V26>=0,V71>=1] 

* Chain [177]: 7
  with precondition: [V55=0,V71=0,V3+V26+1=Out,V>=0,V3>=1,V26>=0,V65>=1] 

* Chain [176]: 7
  with precondition: [V55=0,V3+V26+1=Out,V>=0,V3>=1,V26>=0,V65>=1,V71>=1] 

* Chain [175]: 7
  with precondition: [V26+1=Out,V>=0,V3>=0,V26>=0,V55>=0,V65>=0,V71>=0] 

* Chain [174]: 5
  with precondition: [V65=0,V71=0,V>=3,V3>=0,V26>=0,V55>=0,Out>=V26+1,V+V26+2>=Out] 

* Chain [173]: 7
  with precondition: [V65=0,V26+1=Out,V>=0,V3>=0,V26>=0,V55>=0,V71>=1] 

* Chain [172]: 7
  with precondition: [V65=0,V3+V26+1=Out,V>=0,V3>=1,V26>=0,V55>=1,V71>=1] 

* Chain [171]: 7
  with precondition: [V65=0,V26+V55+1=Out,V>=0,V3>=1,V26>=0,V55>=1,V71>=1] 

* Chain [170]: 7
  with precondition: [V71=0,V26+1=Out,V>=0,V3>=0,V26>=0,V55>=0,V65>=1] 

* Chain [169]: 7
  with precondition: [V71=0,V3+V26+1=Out,V>=0,V3>=1,V26>=0,V55>=1,V65>=1] 

* Chain [168]: 7
  with precondition: [V71=0,V26+V55+1=Out,V>=0,V3>=1,V26>=0,V55>=1,V65>=1] 

* Chain [167]: 7
  with precondition: [V3+V26+1=Out,V>=0,V3>=1,V26>=0,V55>=1,V65>=1,V71>=1] 

* Chain [166]: 7
  with precondition: [V26+V55+1=Out,V>=0,V3>=1,V26>=0,V55>=1,V65>=1,V71>=1] 

* Chain [165]: 5
  with precondition: [V>=3,V3>=0,V26>=0,V55>=0,V65>=1,V71>=1,Out>=V26+1,V+V26+2>=Out] 


#### Cost of chains of fun22(V,Out):
* Chain [187]: 2
  with precondition: [Out=0,V>=0] 

* Chain [186]: 1
  with precondition: [Out>=0,V>=Out+1] 


#### Cost of chains of fun18(V,V3,V26,V55,V65,V71,Out):
* Chain [206]: 11
  with precondition: [V=0,V65=0,V3+V55+1=Out,V3>=1,V26>=0,V55>=0,V71>=1] 

* Chain [205]: 11
  with precondition: [V=0,V71=0,V3+V55+1=Out,V3>=1,V26>=0,V55>=0,V65>=1] 

* Chain [204]: 11
  with precondition: [V=0,V3+V55+1=Out,V3>=1,V26>=0,V55>=0,V65>=1,V71>=1] 

* Chain [203]: 11
  with precondition: [V3=0,V65=0,V+V55+1=Out,V>=1,V26>=0,V55>=0,V71>=1] 

* Chain [202]: 11
  with precondition: [V3=0,V71=0,V+V55+1=Out,V>=1,V26>=0,V55>=0,V65>=1] 

* Chain [201]: 11
  with precondition: [V3=0,V+V55+1=Out,V>=1,V26>=0,V55>=0,V65>=1,V71>=1] 

* Chain [200]: 9
  with precondition: [V65=0,V71=0,V55+3=Out,V>=0,V3>=0,V26>=0,V55>=0] 

* Chain [199]: 8
  with precondition: [V65=0,V71=0,V55+4=Out,V>=0,V3>=0,V26>=3,V55>=0] 

* Chain [198]: 8
  with precondition: [V65=0,V71=0,V>=0,V3>=0,V26>=4,V55>=0,Out>=V55+1,V26+V55+1>=Out] 

* Chain [197]: 11
  with precondition: [V65=0,V+V55+1=Out,V>=1,V3>=1,V26>=0,V55>=0,V71>=1] 

* Chain [196]: 11
  with precondition: [V65=0,V3+V55+1=Out,V>=1,V3>=1,V26>=0,V55>=0,V71>=1] 

* Chain [195]: 11
  with precondition: [V55+1=Out,V>=0,V3>=0,V26>=0,V55>=0,V65>=0,V71>=0] 

* Chain [194]: 11
  with precondition: [V71=0,V+V55+1=Out,V>=1,V3>=1,V26>=0,V55>=0,V65>=1] 

* Chain [193]: 11
  with precondition: [V71=0,V3+V55+1=Out,V>=1,V3>=1,V26>=0,V55>=0,V65>=1] 

* Chain [192]: 9
  with precondition: [V55+3=Out,V>=0,V3>=0,V26>=0,V55>=0,V65>=1,V71>=1] 

* Chain [191]: 8
  with precondition: [V55+4=Out,V>=0,V3>=0,V26>=3,V55>=0,V65>=1,V71>=1] 

* Chain [190]: 11
  with precondition: [V+V55+1=Out,V>=1,V3>=1,V26>=0,V55>=0,V65>=1,V71>=1] 

* Chain [189]: 11
  with precondition: [V3+V55+1=Out,V>=1,V3>=1,V26>=0,V55>=0,V65>=1,V71>=1] 

* Chain [188]: 8
  with precondition: [V>=0,V3>=0,V26>=4,V55>=0,V65>=1,V71>=1,Out>=V55+1,V26+V55+1>=Out] 


#### Cost of chains of fun17(V,V3,V26,V55,V65,Out):
* Chain [222]: 14
  with precondition: [V3=0,V55=0,V26>=0,V65>=1,Out>=V+2,2*V>=Out] 

* Chain [221]: 14
  with precondition: [V3=0,V65=0,V26>=0,V55>=1,Out>=V+2,2*V>=Out] 

* Chain [220]: 14
  with precondition: [V3=0,V26>=0,V55>=1,V65>=1,Out>=V+2,2*V>=Out] 

* Chain [219]: 13
  with precondition: [V55=0,V65=0,V+3=Out,V>=0,V3>=0,V26>=0] 

* Chain [218]: 12
  with precondition: [V55=0,V65=0,V+4=Out,V>=0,V3>=0,V26>=3] 

* Chain [217]: 12
  with precondition: [V55=0,V65=0,V>=0,V3>=0,V26>=4,Out>=V+1,V+V26+1>=Out] 

* Chain [216]: 15
  with precondition: [V55=0,V+V3+1=Out,V>=0,V3>=1,V26>=0,V65>=1] 

* Chain [215]: 14
  with precondition: [V55=0,V3>=1,V26>=0,V65>=1,Out>=V+2,2*V>=Out] 

* Chain [214]: 15
  with precondition: [V65=0,V+V3+1=Out,V>=0,V3>=1,V26>=0,V55>=1] 

* Chain [213]: 14
  with precondition: [V65=0,V3>=1,V26>=0,V55>=1,Out>=V+2,2*V>=Out] 

* Chain [212]: 15
  with precondition: [V+1=Out,V>=0,V3>=0,V26>=0,V55>=0,V65>=0] 

* Chain [211]: 13
  with precondition: [V+3=Out,V>=0,V3>=0,V26>=0,V55>=1,V65>=1] 

* Chain [210]: 12
  with precondition: [V+4=Out,V>=0,V3>=0,V26>=3,V55>=1,V65>=1] 

* Chain [209]: 15
  with precondition: [V+V3+1=Out,V>=0,V3>=1,V26>=0,V55>=1,V65>=1] 

* Chain [208]: 12
  with precondition: [V>=0,V3>=0,V26>=4,V55>=1,V65>=1,Out>=V+1,V+V26+1>=Out] 

* Chain [207]: 14
  with precondition: [V3>=1,V26>=0,V55>=1,V65>=1,Out>=V+2,2*V>=Out] 


#### Cost of loops [223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238] 

 * loop 223:newline(V,V3,V26,Out) -> [newline(V',V3',V26',Out')] 
15
 * loop 224:newline(V,V3,V26,Out) -> [newline(V',V3',V26',Out')] 
17
 * loop 225:newline(V,V3,V26,Out) -> [newline(V',V3',V26',Out')] 
18
 * loop 226:newline(V,V3,V26,Out) -> [newline(V',V3',V26',Out')] 
15
 * loop 227:newline(V,V3,V26,Out) -> [newline(V',V3',V26',Out')] 
16
 * loop 228:newline(V,V3,V26,Out) -> [newline(V',V3',V26',Out')] 
18
 * loop 229:newline(V,V3,V26,Out) -> [newline(V',V3',V26',Out')] 
17
 * loop 230:newline(V,V3,V26,Out) -> [newline(V',V3',V26',Out')] 
18
 * loop 231:newline(V,V3,V26,Out) -> [newline(V',V3',V26',Out')] 
17
 * loop 232:newline(V,V3,V26,Out) -> [newline(V',V3',V26',Out')] 
17
 * loop 233:newline(V,V3,V26,Out) -> [newline(V',V3',V26',Out')] 
17
 * loop 234:newline(V,V3,V26,Out) -> [newline(V',V3',V26',Out')] 
18
 * loop 235:newline(V,V3,V26,Out) -> [newline(V',V3',V26',Out')] 
15
 * loop 236:newline(V,V3,V26,Out) -> [newline(V',V3',V26',Out')] 
15
 * loop 237:newline(V,V3,V26,Out) -> [newline(V',V3',V26',Out')] 
16
 * loop 238:newline(V,V3,V26,Out) -> [newline(V',V3',V26',Out')] 
17
#### Cost of phase [223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238]:newline(V,V3,V26,Out) -> [newline(V',V3',V26',Out')] 
80*it(223)+70*it(224)+81*it(228)+35*it(229)+0
  Such that:aux(34) =< V3
aux(35) =< V3-V3'
aux(36) =< V3/2
aux(37) =< V3/2-V3'/2
aux(38) =< V26
aux(39) =< V26-V26'
aux(40) =< V26/2
aux(41) =< V26/2-V26'/2
it(223) =< aux(34)
it(224) =< aux(34)
it(228) =< aux(34)
it(229) =< aux(34)
it(223) =< aux(35)
it(224) =< aux(35)
it(228) =< aux(35)
it(229) =< aux(35)
it(224) =< aux(36)
it(229) =< aux(36)
it(224) =< aux(37)
it(229) =< aux(37)
it(223) =< aux(38)
it(224) =< aux(38)
it(228) =< aux(38)
it(229) =< aux(38)
it(223) =< aux(39)
it(224) =< aux(39)
it(228) =< aux(39)
it(229) =< aux(39)
it(223) =< aux(40)
it(224) =< aux(40)
it(223) =< aux(41)
it(224) =< aux(41)

#### Cost of phase [223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238]:newline(V,V3,V26,Out) -> [newline(V',V3',V26',Out')] 
80*it(223)+70*it(224)+81*it(228)+35*it(229)+0
  Such that:aux(34) =< V3
aux(35) =< V3-V3'
aux(36) =< V3/2
aux(37) =< V3/2-V3'/2
aux(38) =< V26
aux(39) =< V26-V26'
aux(40) =< V26/2
aux(41) =< V26/2-V26'/2
it(223) =< aux(34)
it(224) =< aux(34)
it(228) =< aux(34)
it(229) =< aux(34)
it(223) =< aux(35)
it(224) =< aux(35)
it(228) =< aux(35)
it(229) =< aux(35)
it(224) =< aux(36)
it(229) =< aux(36)
it(224) =< aux(37)
it(229) =< aux(37)
it(223) =< aux(38)
it(224) =< aux(38)
it(228) =< aux(38)
it(229) =< aux(38)
it(223) =< aux(39)
it(224) =< aux(39)
it(228) =< aux(39)
it(229) =< aux(39)
it(223) =< aux(40)
it(224) =< aux(40)
it(223) =< aux(41)
it(224) =< aux(41)

#### Cost of phase [223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238]:newline(V,V3,V26,Out) -> [newline(V',V3',V26',Out')] 
80*it(223)+70*it(224)+81*it(228)+35*it(229)+0
  Such that:aux(34) =< V3
aux(35) =< V3-V3'
aux(36) =< V3/2
aux(37) =< V3/2-V3'/2
aux(38) =< V26
aux(39) =< V26-V26'
aux(40) =< V26/2
aux(41) =< V26/2-V26'/2
it(223) =< aux(34)
it(224) =< aux(34)
it(228) =< aux(34)
it(229) =< aux(34)
it(223) =< aux(35)
it(224) =< aux(35)
it(228) =< aux(35)
it(229) =< aux(35)
it(224) =< aux(36)
it(229) =< aux(36)
it(224) =< aux(37)
it(229) =< aux(37)
it(223) =< aux(38)
it(224) =< aux(38)
it(228) =< aux(38)
it(229) =< aux(38)
it(223) =< aux(39)
it(224) =< aux(39)
it(228) =< aux(39)
it(229) =< aux(39)
it(223) =< aux(40)
it(224) =< aux(40)
it(223) =< aux(41)
it(224) =< aux(41)

#### Cost of chains of newline(V,V3,V26,Out):
* Chain [[223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238],241]: 80*it(223)+70*it(224)+81*it(228)+35*it(229)+3
  Such that:aux(42) =< V3
aux(43) =< V3/2
aux(44) =< V26
aux(45) =< V26/2
it(223) =< aux(42)
it(224) =< aux(42)
it(228) =< aux(42)
it(229) =< aux(42)
it(224) =< aux(43)
it(229) =< aux(43)
it(223) =< aux(44)
it(224) =< aux(44)
it(228) =< aux(44)
it(229) =< aux(44)
it(223) =< aux(45)
it(224) =< aux(45)

  with precondition: [V>=0,V3>=2,V26>=2,Out>=2] 

* Chain [[223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238],240]: 80*it(223)+70*it(224)+81*it(228)+35*it(229)+2
  Such that:aux(46) =< V3
aux(47) =< V3/2
aux(48) =< V26
aux(49) =< V26/2
it(223) =< aux(46)
it(224) =< aux(46)
it(228) =< aux(46)
it(229) =< aux(46)
it(224) =< aux(47)
it(229) =< aux(47)
it(223) =< aux(48)
it(224) =< aux(48)
it(228) =< aux(48)
it(229) =< aux(48)
it(223) =< aux(49)
it(224) =< aux(49)

  with precondition: [V>=0,V3>=1,V26>=2,Out>=2] 

* Chain [[223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238],239]: 80*it(223)+70*it(224)+81*it(228)+35*it(229)+2
  Such that:aux(50) =< V3
aux(51) =< V3/2
aux(52) =< V26
aux(53) =< V26/2
it(223) =< aux(50)
it(224) =< aux(50)
it(228) =< aux(50)
it(229) =< aux(50)
it(224) =< aux(51)
it(229) =< aux(51)
it(223) =< aux(52)
it(224) =< aux(52)
it(228) =< aux(52)
it(229) =< aux(52)
it(223) =< aux(53)
it(224) =< aux(53)

  with precondition: [V>=0,V3>=1,V26>=1,Out>=1] 

* Chain [241]: 3
  with precondition: [V3=1,Out=1,V>=0,V26>=1] 

* Chain [240]: 2
  with precondition: [V26=1,Out=1,V>=0,V3>=0] 

* Chain [239]: 2
  with precondition: [Out=0,V>=0,V3>=0,V26>=0] 


#### Cost of chains of fun13(V,V3,V26,Out):
* Chain [246]: 1
  with precondition: [V=1,Out=1,V3>=0,V26>=0] 

* Chain [245]: 3
  with precondition: [V3=1,V+2=Out,V>=1,V26>=0] 

* Chain [244]: 0
  with precondition: [Out=0,V>=0,V3>=0,V26>=0] 

* Chain [243]: 3
  with precondition: [V+1=Out,V>=1,V3>=0,V26>=0] 

* Chain [242]: 240*s(31)+210*s(32)+243*s(33)+105*s(34)+4
  Such that:s(27) =< V
s(28) =< V/2
s(29) =< V3
s(30) =< V3/2
s(31) =< s(27)
s(32) =< s(27)
s(33) =< s(27)
s(34) =< s(27)
s(32) =< s(28)
s(34) =< s(28)
s(31) =< s(29)
s(32) =< s(29)
s(33) =< s(29)
s(34) =< s(29)
s(31) =< s(30)
s(32) =< s(30)

  with precondition: [V>=2,V3>=1,V26>=0,Out>=V+2] 


#### Cost of loops [250,251,254] 

 * loop 250:lcstable(V,V3,Out) -> [lcstable(V',V3',Out')] 
240*s(45)+210*s(46)+243*s(47)+105*s(48)+7
  Such that:s(43) =< V3'
s(44) =< V3'/2
s(45) =< s(43)
s(46) =< s(43)
s(47) =< s(43)
s(48) =< s(43)
s(45) =< s(44)
s(46) =< s(44)

 * loop 251:lcstable(V,V3,Out) -> [lcstable(V',V3',Out')] 
6
 * loop 254:lcstable(V,V3,Out) -> [lcstable(V',V3',Out')] 
6
#### Cost of phase [250,251,254]:lcstable(V,V3,Out) -> [lcstable(V',V3',Out')] 
19*it(250)+450*s(49)+348*s(51)+0
  Such that:aux(58) =< V3
aux(60) =< V
aux(61) =< V-V'
it(250) =< aux(60)
it(250) =< aux(61)
aux(59) =< it(250)*aux(58)
s(53) =< aux(59)* (1/2)
s(49) =< aux(59)
s(51) =< aux(59)
s(49) =< s(53)

#### Cost of loops [253] 

 * loop 253:lcstable(V,V3,Out) -> [lcstable(V',V3',Out')] 
3
#### Cost of phase [253]:lcstable(V,V3,Out) -> [lcstable(V',V3',Out')] 
3*it(253)+0
  Such that:it(253) =< V
it(253) =< V-V'

#### Cost of phase [250,251,254]:lcstable(V,V3,Out) -> [lcstable(V',V3',Out')] 
19*it(250)+450*s(49)+348*s(51)+0
  Such that:aux(58) =< V3
aux(60) =< V
aux(61) =< V-V'
it(250) =< aux(60)
it(250) =< aux(61)
aux(59) =< it(250)*aux(58)
s(53) =< aux(59)* (1/2)
s(49) =< aux(59)
s(51) =< aux(59)
s(49) =< s(53)

#### Cost of phase [253]:lcstable(V,V3,Out) -> [lcstable(V',V3',Out')] 
3*it(253)+0
  Such that:it(253) =< V
it(253) =< V-V'

#### Cost of phase [253]:lcstable(V,V3,Out) -> [lcstable(V',V3',Out')] 
3*it(253)+0
  Such that:it(253) =< V
it(253) =< V-V'

#### Cost of phase [253]:lcstable(V,V3,Out) -> [lcstable(V',V3',Out')] 
3*it(253)+0
  Such that:it(253) =< V
it(253) =< V-V'

#### Cost of phase [253]:lcstable(V,V3,Out) -> [lcstable(V',V3',Out')] 
3*it(253)+0
  Such that:it(253) =< V
it(253) =< V-V'

#### Cost of chains of lcstable(V,V3,Out):
* Chain [[253],[250,251,254],249]: 22*it(250)+450*s(49)+348*s(51)+3
  Such that:aux(58) =< V3
aux(63) =< V
it(250) =< aux(63)
aux(59) =< it(250)*aux(58)
s(53) =< aux(59)* (1/2)
s(49) =< aux(59)
s(51) =< aux(59)
s(49) =< s(53)

  with precondition: [Out=0,V>=3,V3>=0] 

* Chain [[253],[250,251,254],248]: 22*it(250)+450*s(49)+348*s(51)+6*s(56)+4
  Such that:aux(65) =< V3
aux(66) =< V
it(250) =< aux(66)
s(56) =< aux(65)
aux(59) =< it(250)*aux(65)
s(53) =< aux(59)* (1/2)
s(49) =< aux(59)
s(51) =< aux(59)
s(49) =< s(53)

  with precondition: [Out=0,V>=3,V3>=1] 

* Chain [[253],249]: 3*it(253)+3
  Such that:it(253) =< V

  with precondition: [Out=0,V>=2,V3>=0] 

* Chain [[253],248]: 3*it(253)+6*s(56)+4
  Such that:it(253) =< V
s(55) =< V3
s(56) =< s(55)

  with precondition: [Out=0,V>=2,V3>=1] 

* Chain [[253],247]: 3*it(253)+1
  Such that:it(253) =< V

  with precondition: [Out=0,V>=1,V3>=0] 

* Chain [[250,251,254],249]: 19*it(250)+450*s(49)+348*s(51)+3
  Such that:aux(58) =< V3
aux(62) =< V
it(250) =< aux(62)
aux(59) =< it(250)*aux(58)
s(53) =< aux(59)* (1/2)
s(49) =< aux(59)
s(51) =< aux(59)
s(49) =< s(53)

  with precondition: [V>=2,V3>=0,Out>=3] 

* Chain [[250,251,254],248]: 19*it(250)+450*s(49)+348*s(51)+6*s(56)+4
  Such that:aux(64) =< V
aux(65) =< V3
s(56) =< aux(65)
it(250) =< aux(64)
aux(59) =< it(250)*aux(65)
s(53) =< aux(59)* (1/2)
s(49) =< aux(59)
s(51) =< aux(59)
s(49) =< s(53)

  with precondition: [V>=2,V3>=1,Out>=4] 

* Chain [249]: 3
  with precondition: [V=1,Out=2,V3>=0] 

* Chain [248]: 6*s(56)+4
  Such that:s(55) =< V3
s(56) =< s(55)

  with precondition: [V=1,Out>=3,V3+2>=Out] 

* Chain [247]: 1
  with precondition: [Out=0,V>=0,V3>=0] 


#### Cost of chains of fun9(V,Out):
* Chain [256]: 3
  with precondition: [Out=0,V>=0] 

* Chain [255]: 2
  with precondition: [Out>=0,V>=Out+2] 


#### Cost of chains of lcs(V,V3,Out):
* Chain [259]: 24*s(93)+91*s(96)+1800*s(100)+1392*s(101)+9
  Such that:aux(71) =< V
aux(72) =< V3
s(96) =< aux(71)
s(93) =< aux(72)
s(98) =< s(96)*aux(72)
s(99) =< s(98)* (1/2)
s(100) =< s(98)
s(101) =< s(98)
s(100) =< s(99)

  with precondition: [Out=0,V>=0,V3>=0] 

* Chain [258]: 6*s(111)+8
  Such that:s(110) =< V3
s(111) =< s(110)

  with precondition: [V=1,V3>=1,Out>=0,V3>=Out] 

* Chain [257]: 6*s(114)+38*s(115)+900*s(118)+696*s(119)+8
  Such that:s(112) =< V
s(113) =< V3
s(114) =< s(113)
s(115) =< s(112)
s(116) =< s(115)*s(113)
s(117) =< s(116)* (1/2)
s(118) =< s(116)
s(119) =< s(116)
s(118) =< s(117)

  with precondition: [V>=2,V3>=0,Out>=0] 


#### Cost of chains of start(V,V3,V26,V55,V65,V71):
* Chain [281]: 240*s(124)+210*s(125)+243*s(126)+105*s(127)+444*s(129)+240*s(138)+210*s(139)+243*s(140)+105*s(141)+399*s(144)+8100*s(148)+6264*s(149)+450*s(178)+2610*s(186)+2520*s(187)+2916*s(188)+1530*s(189)+1680*s(266)+1470*s(267)+1701*s(268)+735*s(269)+240*s(374)+210*s(375)+243*s(376)+105*s(377)+20
  Such that:s(121) =< 1
s(120) =< 2
s(134) =< V3+2
s(135) =< V3/2+1
aux(75) =< V
aux(76) =< V/2
aux(77) =< V3
aux(78) =< V3/2
aux(79) =< V26
aux(80) =< V26/2
s(124) =< s(120)
s(125) =< s(120)
s(126) =< s(120)
s(127) =< s(120)
s(125) =< s(121)
s(127) =< s(121)
s(124) =< aux(77)
s(125) =< aux(77)
s(126) =< aux(77)
s(127) =< aux(77)
s(124) =< aux(78)
s(125) =< aux(78)
s(144) =< aux(75)
s(129) =< aux(77)
s(146) =< s(144)*aux(77)
s(147) =< s(146)* (1/2)
s(148) =< s(146)
s(149) =< s(146)
s(148) =< s(147)
s(178) =< aux(77)
s(178) =< aux(78)
s(186) =< aux(77)
s(187) =< aux(77)
s(188) =< aux(77)
s(189) =< aux(77)
s(187) =< aux(78)
s(189) =< aux(78)
s(186) =< aux(75)
s(187) =< aux(75)
s(188) =< aux(75)
s(189) =< aux(75)
s(186) =< aux(76)
s(187) =< aux(76)
s(266) =< aux(75)
s(267) =< aux(75)
s(268) =< aux(75)
s(269) =< aux(75)
s(267) =< aux(76)
s(269) =< aux(76)
s(266) =< aux(79)
s(267) =< aux(79)
s(268) =< aux(79)
s(269) =< aux(79)
s(266) =< aux(80)
s(267) =< aux(80)
s(374) =< aux(77)
s(375) =< aux(77)
s(376) =< aux(77)
s(377) =< aux(77)
s(375) =< aux(78)
s(377) =< aux(78)
s(374) =< aux(79)
s(375) =< aux(79)
s(376) =< aux(79)
s(377) =< aux(79)
s(374) =< aux(80)
s(375) =< aux(80)
s(138) =< s(134)
s(139) =< s(134)
s(140) =< s(134)
s(141) =< s(134)
s(139) =< s(135)
s(141) =< s(135)
s(138) =< aux(77)
s(139) =< aux(77)
s(140) =< aux(77)
s(141) =< aux(77)
s(138) =< aux(78)
s(139) =< aux(78)

  with precondition: [V>=0] 

* Chain [280]: 18*s(379)+8
  Such that:aux(81) =< V3
s(379) =< aux(81)

  with precondition: [V=1] 

* Chain [279]: 19
  with precondition: [V=2] 

* Chain [278]: 0
  with precondition: [V=3] 

* Chain [277]: 1440*s(388)+1260*s(389)+1458*s(390)+630*s(391)+19
  Such that:aux(82) =< V
aux(83) =< V/2
aux(84) =< V26
aux(85) =< V26/2
s(388) =< aux(82)
s(389) =< aux(82)
s(390) =< aux(82)
s(391) =< aux(82)
s(389) =< aux(83)
s(391) =< aux(83)
s(388) =< aux(84)
s(389) =< aux(84)
s(390) =< aux(84)
s(391) =< aux(84)
s(388) =< aux(85)
s(389) =< aux(85)

  with precondition: [V3=0,V>=1] 

* Chain [276]: 18
  with precondition: [V26=1,V>=0,V3>=0] 

* Chain [275]: 7
  with precondition: [V3=0,V65=0,V>=0,V26>=0,V55>=1,V71>=1] 

* Chain [274]: 11
  with precondition: [V3=0,V65=0,V>=1,V26>=0,V55>=0,V71>=1] 

* Chain [273]: 14
  with precondition: [V3=0,V65=0,V>=2,V26>=0,V55>=1] 

* Chain [272]: 11
  with precondition: [V71=0,V>=0,V3>=0,V26>=0,V55>=0,V65>=1] 

* Chain [271]: 11
  with precondition: [V3=0,V71=0,V>=1,V26>=0,V55>=0,V65>=1] 

* Chain [270]: 7
  with precondition: [V3=0,V>=0,V26>=0,V55>=1,V65>=1,V71>=1] 

* Chain [269]: 4
  with precondition: [V3=1,V>=1,V26>=0] 

* Chain [268]: 12*s(433)+38*s(437)+900*s(440)+696*s(441)+9
  Such that:s(434) =< V
aux(86) =< 1
s(433) =< aux(86)
s(437) =< s(434)
s(438) =< s(437)*aux(86)
s(439) =< s(438)* (1/2)
s(440) =< s(438)
s(441) =< s(438)
s(440) =< s(439)

  with precondition: [V3=1,V>=2] 

* Chain [267]: 1440*s(446)+1260*s(447)+1458*s(448)+630*s(449)+20
  Such that:aux(87) =< V
aux(88) =< V/2
aux(89) =< V3
aux(90) =< V3/2
s(446) =< aux(89)
s(447) =< aux(89)
s(448) =< aux(89)
s(449) =< aux(89)
s(447) =< aux(90)
s(449) =< aux(90)
s(446) =< aux(87)
s(447) =< aux(87)
s(448) =< aux(87)
s(449) =< aux(87)
s(446) =< aux(88)
s(447) =< aux(88)

  with precondition: [V26=0,V>=1,V3>=1] 

* Chain [266]: 720*s(494)+630*s(495)+729*s(496)+315*s(497)+19
  Such that:aux(91) =< V
aux(92) =< V/2
aux(93) =< V26
aux(94) =< V26/2
s(494) =< aux(91)
s(495) =< aux(91)
s(496) =< aux(91)
s(497) =< aux(91)
s(495) =< aux(92)
s(497) =< aux(92)
s(494) =< aux(93)
s(495) =< aux(93)
s(496) =< aux(93)
s(497) =< aux(93)
s(494) =< aux(94)
s(495) =< aux(94)

  with precondition: [V55=0,V>=2,V3>=1,V26>=0] 

* Chain [265]: 13
  with precondition: [V55=0,V65=0,V>=0,V3>=0,V26>=0] 

* Chain [264]: 15
  with precondition: [V55=0,V>=0,V3>=1,V26>=0,V65>=1] 

* Chain [263]: 9
  with precondition: [V65=0,V71=0,V>=0,V3>=0,V26>=0,V55>=0] 

* Chain [262]: 15
  with precondition: [V65=0,V>=0,V3>=1,V26>=0,V55>=1] 

* Chain [261]: 11
  with precondition: [V65=0,V>=1,V3>=1,V26>=0,V55>=0,V71>=1] 

* Chain [260]: 2
  with precondition: [V=V3,V>=1] 


Closed-form bounds of start(V,V3,V26,V55,V65,V71): 
-------------------------------------
* Chain [281] with precondition: [V>=0] 
    - Upper bound: 5985*V+1616+nat(V3)*11268+nat(V3)*14364*V+nat(V3+2)*798 
    - Complexity: n^2 
* Chain [280] with precondition: [V=1] 
    - Upper bound: nat(V3)*18+8 
    - Complexity: n 
* Chain [279] with precondition: [V=2] 
    - Upper bound: 19 
    - Complexity: constant 
* Chain [278] with precondition: [V=3] 
    - Upper bound: 0 
    - Complexity: constant 
* Chain [277] with precondition: [V3=0,V>=1] 
    - Upper bound: 4788*V+19 
    - Complexity: n 
* Chain [276] with precondition: [V26=1,V>=0,V3>=0] 
    - Upper bound: 18 
    - Complexity: constant 
* Chain [275] with precondition: [V3=0,V65=0,V>=0,V26>=0,V55>=1,V71>=1] 
    - Upper bound: 7 
    - Complexity: constant 
* Chain [274] with precondition: [V3=0,V65=0,V>=1,V26>=0,V55>=0,V71>=1] 
    - Upper bound: 11 
    - Complexity: constant 
* Chain [273] with precondition: [V3=0,V65=0,V>=2,V26>=0,V55>=1] 
    - Upper bound: 14 
    - Complexity: constant 
* Chain [272] with precondition: [V71=0,V>=0,V3>=0,V26>=0,V55>=0,V65>=1] 
    - Upper bound: 11 
    - Complexity: constant 
* Chain [271] with precondition: [V3=0,V71=0,V>=1,V26>=0,V55>=0,V65>=1] 
    - Upper bound: 11 
    - Complexity: constant 
* Chain [270] with precondition: [V3=0,V>=0,V26>=0,V55>=1,V65>=1,V71>=1] 
    - Upper bound: 7 
    - Complexity: constant 
* Chain [269] with precondition: [V3=1,V>=1,V26>=0] 
    - Upper bound: 4 
    - Complexity: constant 
* Chain [268] with precondition: [V3=1,V>=2] 
    - Upper bound: 1634*V+21 
    - Complexity: n 
* Chain [267] with precondition: [V26=0,V>=1,V3>=1] 
    - Upper bound: 4788*V3+20 
    - Complexity: n 
* Chain [266] with precondition: [V55=0,V>=2,V3>=1,V26>=0] 
    - Upper bound: 2394*V+19 
    - Complexity: n 
* Chain [265] with precondition: [V55=0,V65=0,V>=0,V3>=0,V26>=0] 
    - Upper bound: 13 
    - Complexity: constant 
* Chain [264] with precondition: [V55=0,V>=0,V3>=1,V26>=0,V65>=1] 
    - Upper bound: 15 
    - Complexity: constant 
* Chain [263] with precondition: [V65=0,V71=0,V>=0,V3>=0,V26>=0,V55>=0] 
    - Upper bound: 9 
    - Complexity: constant 
* Chain [262] with precondition: [V65=0,V>=0,V3>=1,V26>=0,V55>=1] 
    - Upper bound: 15 
    - Complexity: constant 
* Chain [261] with precondition: [V65=0,V>=1,V3>=1,V26>=0,V55>=0,V71>=1] 
    - Upper bound: 11 
    - Complexity: constant 
* Chain [260] with precondition: [V=V3,V>=1] 
    - Upper bound: 2 
    - Complexity: constant 

### Maximum cost of start(V,V3,V26,V55,V65,V71): max([max([19,nat(V3)*4770+12+ (nat(V3)*18+8)]),1634*V+19+max([2,1197*V+1597+nat(V3)*11268+nat(V3)*14364*V+nat(V3+2)*798+2394*V+760*V])]) 
Asymptotic class: n^2 

Time statistics: 
-------------------------------------
* Partial evaluation computed in 380 ms.
* Invariants computed in 364 ms.
   - Backward Invariants 205 ms.
   - Transitive Invariants 50 ms.
* Refinement performed in 1479 ms.
* Termination proved in 76 ms.
* Upper bounds computed in 1794 ms.
   - Equation cost structures 1326 ms.
   - Phase cost structures 328 ms.
   - Chain cost structures 68 ms.
   - Solving cost expressions 33 ms.
* Total analysis performed in 4484 ms.



Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. non_recursive  : [fun1/2]
1. recursive  : [fun2/3]
2. non_recursive  : [fun/3]
3. non_recursive  : [fun5/5]
4. non_recursive  : [fun4/3]
5. recursive [non_tail] : [findMin/2,fun3/2]
6. recursive  : [fun6/2,minSort/2]
7. non_recursive  : [start/4]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into fun1/2
1. SCC is partially evaluated into fun2/3
2. SCC is partially evaluated into fun/3
3. SCC is partially evaluated into fun5/5
4. SCC is partially evaluated into fun4/3
5. SCC is partially evaluated into findMin/2
6. SCC is partially evaluated into minSort/2
7. SCC is partially evaluated into start/4

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations fun1/2 
* CE 29 is refined into CE [40] 
* CE 28 is refined into CE [41] 
* CE 27 is refined into CE [42] 
* CE 26 is refined into CE [43] 


#### Refined cost equations fun1/2 
* CE 40: fun1(V1,Out) = 0
     [V1>=0,Out=0] 
* CE 41: fun1(V1,Out) = 0
     [Out=2,V1=3] 
* CE 42: fun1(V1,Out) = 0
     [Out=1,V1=2] 
* CE 43: fun1(V1,Out) = 0
     [Out=1,V1=1] 

### Cost equations --> "Loop" of fun1/2 
* CEs [40] --> Loop 27 
* CEs [41] --> Loop 28 
* CEs [42] --> Loop 29 
* CEs [43] --> Loop 30 

#### Loops of fun1/2 
* Loop 27: fun1(V1,Out) [V1>=0,Out=0] 
* Loop 28: fun1(V1,Out) [Out=2,V1=3] 
* Loop 29: fun1(V1,Out) [Out=1,V1=2] 
* Loop 30: fun1(V1,Out) [Out=1,V1=1] 

### Ranking functions of CR fun1(V1,Out) 

#### Partial ranking functions of CR fun1(V1,Out) 


### Resulting Chains:fun1(V1,Out) 
* [30]
* [29]
* [28]
* [27]


### Merging Chains  fun1/2 into  External patterns of execution 
* [[30]] --> 1 
* [[29]] --> 2 
* [[28]] --> 3 
* [[27]] --> 4 


### Specialization of cost equations fun2/3 
* CE 35 is refined into CE [44] 
* CE 37 is refined into CE [45] 
* CE 39 is refined into CE [46] 
* CE 33 is refined into CE [47] 
* CE 36 is refined into CE [48] 
* CE 32 is refined into CE [49] 
* CE 31 is refined into CE [50] 
* CE 30 is refined into CE [51] 
* CE 34 is refined into CE [52] 
* CE 38 is refined into CE [53] 


#### Refined cost equations fun2/3 
* CE 44: fun2(V1,V,Out) = 0
     [V>=1,V1>=1,Out=3] 
* CE 45: fun2(V1,V,Out) = 0
     [V>=1,V1>=1,Out=2] 
* CE 46: fun2(V1,V,Out) = 0
     [V>=0,V1>=0,Out=0] 
* CE 47: fun2(V1,V,Out) = 0
     [V1>=1,Out=3,V=0] 
* CE 48: fun2(V1,V,Out) = 0
     [V1>=1,Out=2,V=0] 
* CE 49: fun2(V1,V,Out) = 0
     [V>=1,Out=3,V1=0] 
* CE 50: fun2(V1,V,Out) = 0
     [V>=1,Out=2,V1=0] 
* CE 51: fun2(V1,V,Out) = 0
     [Out=1,V=0,V1=0] 
* CE 52: fun2(V1,V,Out) = 0+ fun2(W1,X1,Out)
     [X1>=0,W1>=0,W1+1=V,X1+1=V1] 
* CE 53: fun2(V1,V,Out) = 0+ fun2(W1,X1,Out)
     [X1>=0,W1>=0,X1+1=V,W1+1=V1] 

### Cost equations --> "Loop" of fun2/3 
* CEs [52] --> Loop 31 
* CEs [53] --> Loop 32 
* CEs [44] --> Loop 33 
* CEs [45] --> Loop 34 
* CEs [46] --> Loop 35 
* CEs [47] --> Loop 36 
* CEs [48] --> Loop 37 
* CEs [49] --> Loop 38 
* CEs [50] --> Loop 39 
* CEs [51] --> Loop 40 

#### Loops of fun2/3 
* Loop 31: fun2(V1,V,Out)->  fun2(V1',V',Out)
                  [V>=1,V1>=1,V1=V'+1,V=V1'+1] 
* Loop 32: fun2(V1,V,Out)->  fun2(V1',V',Out)
                  [V>=1,V1>=1,V=V'+1,V1=V1'+1] 
* Loop 33: fun2(V1,V,Out) [V>=1,V1>=1,Out=3] 
* Loop 34: fun2(V1,V,Out) [V>=1,V1>=1,Out=2] 
* Loop 35: fun2(V1,V,Out) [V>=0,V1>=0,Out=0] 
* Loop 36: fun2(V1,V,Out) [V1>=1,Out=3,V=0] 
* Loop 37: fun2(V1,V,Out) [V1>=1,Out=2,V=0] 
* Loop 38: fun2(V1,V,Out) [V>=1,Out=3,V1=0] 
* Loop 39: fun2(V1,V,Out) [V>=1,Out=2,V1=0] 
* Loop 40: fun2(V1,V,Out) [Out=1,V=0,V1=0] 

### Ranking functions of CR fun2(V1,V,Out) 
* RF of phase [31,32]: [V1/2+V/2-1/2]

#### Partial ranking functions of CR fun2(V1,V,Out) 
* Partial RF of phase [31,32]:
  - RF of loop [31:1]:
    V1/2+V/2-1/2
  - RF of loop [32:1]:
    V depends on loops [31:1] 
    V1 depends on loops [31:1] 


### Resulting Chains:fun2(V1,V,Out) 
* [[31,32],40]
* [[31,32],39]
* [[31,32],38]
* [[31,32],37]
* [[31,32],36]
* [[31,32],35]
* [[31,32],34]
* [[31,32],33]
* [40]
* [39]
* [38]
* [37]
* [36]
* [35]
* [34]
* [33]


### Merging Chains  fun2/3 into  External patterns of execution 
* [[40]] --> 1 
* [[39]] --> 2 
* [[38]] --> 3 
* [[37]] --> 4 
* [[36]] --> 5 
* [[35],[35,[31,32]]] --> 6 
* [[40,[31,32]]] --> 7 
* [[34],[34,[31,32]],[37,[31,32]],[39,[31,32]]] --> 8 
* [[33],[33,[31,32]],[36,[31,32]],[38,[31,32]]] --> 9 


### Specialization of cost equations fun/3 
* CE 22 is refined into CE [54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70] 


#### Refined cost equations fun/3 
* CE 54: fun(V1,V,Out) = 1+ fun2(W1,X1,Y1):1+ fun1(Z1,A2):1
     [A2=1,Z1=1,Y1=1,X1=0,W1=0,Out=1,V=0,V1=0] 
* CE 55: fun(V1,V,Out) = 1+ fun2(W1,X1,Y1):1+ fun1(Z1,A2):4
     [A2=0,Z1=1,Y1=1,X1=0,W1=0,Out=0,V=0,V1=0] 
* CE 56: fun(V1,V,Out) = 1+ fun2(W1,V,X1):2+ fun1(Y1,Z1):2
     [V>=1,Z1=1,Y1=2,X1=2,W1=0,Out=1,V1=0] 
* CE 57: fun(V1,V,Out) = 1+ fun2(W1,V,X1):2+ fun1(Y1,Z1):4
     [V>=1,Z1=0,Y1=2,X1=2,W1=0,Out=0,V1=0] 
* CE 58: fun(V1,V,Out) = 1+ fun2(W1,V,X1):3+ fun1(Y1,Z1):3
     [V>=1,Z1=2,Y1=3,X1=3,W1=0,Out=2,V1=0] 
* CE 59: fun(V1,V,Out) = 1+ fun2(W1,V,X1):3+ fun1(Y1,Z1):4
     [V>=1,Z1=0,Y1=3,X1=3,W1=0,Out=0,V1=0] 
* CE 60: fun(V1,V,Out) = 1+ fun2(V1,W1,X1):4+ fun1(Y1,Z1):2
     [V1>=1,Z1=1,Y1=2,X1=2,W1=0,Out=1,V=0] 
* CE 61: fun(V1,V,Out) = 1+ fun2(V1,W1,X1):4+ fun1(Y1,Z1):4
     [V1>=1,Z1=0,Y1=2,X1=2,W1=0,Out=0,V=0] 
* CE 62: fun(V1,V,Out) = 1+ fun2(V1,W1,X1):5+ fun1(Y1,Z1):3
     [V1>=1,Z1=2,Y1=3,X1=3,W1=0,Out=2,V=0] 
* CE 63: fun(V1,V,Out) = 1+ fun2(V1,W1,X1):5+ fun1(Y1,Z1):4
     [V1>=1,Z1=0,Y1=3,X1=3,W1=0,Out=0,V=0] 
* CE 64: fun(V1,V,Out) = 1+ fun2(V1,V,W1):6+ fun1(X1,Y1):4
     [V>=0,V1>=0,Y1=0,X1=0,W1=0,Out=0] 
* CE 65: fun(A,A,B) = 1+ fun2(A,A,C):7+ fun1(D,E):1
     [A>=1,E=1,D=1,C=1,B=1] 
* CE 66: fun(A,A,B) = 1+ fun2(A,A,C):7+ fun1(D,E):4
     [A>=1,E=0,D=1,C=1,B=0] 
* CE 67: fun(V1,V,Out) = 1+ fun2(V1,V,W1):8+ fun1(X1,Y1):2
     [V>=1,V1>=1,Y1=1,X1=2,W1=2,Out=1] 
* CE 68: fun(V1,V,Out) = 1+ fun2(V1,V,W1):8+ fun1(X1,Y1):4
     [V>=1,V1>=1,Y1=0,X1=2,W1=2,Out=0] 
* CE 69: fun(V1,V,Out) = 1+ fun2(V1,V,W1):9+ fun1(X1,Y1):3
     [V>=1,V1>=1,Y1=2,X1=3,W1=3,Out=2] 
* CE 70: fun(V1,V,Out) = 1+ fun2(V1,V,W1):9+ fun1(X1,Y1):4
     [V>=1,V1>=1,Y1=0,X1=3,W1=3,Out=0] 

### Cost equations --> "Loop" of fun/3 
* CEs [69] --> Loop 41 
* CEs [65,67] --> Loop 42 
* CEs [66] --> Loop 43 
* CEs [62] --> Loop 44 
* CEs [60] --> Loop 45 
* CEs [61,63] --> Loop 46 
* CEs [58] --> Loop 47 
* CEs [56] --> Loop 48 
* CEs [57,59] --> Loop 49 
* CEs [54] --> Loop 50 
* CEs [55,64,68,70] --> Loop 51 

#### Loops of fun/3 
* Loop 41: fun(V1,V,Out) [V>=1,V1>=1,Out=2] 
* Loop 42: fun(V1,V,Out) [V>=1,V1>=1,Out=1] 
* Loop 43: fun(A,A,B) [A>=1,B=0] 
* Loop 44: fun(V1,V,Out) [V1>=1,Out=2,V=0] 
* Loop 45: fun(V1,V,Out) [V1>=1,Out=1,V=0] 
* Loop 46: fun(V1,V,Out) [V1>=1,Out=0,V=0] 
* Loop 47: fun(V1,V,Out) [V>=1,Out=2,V1=0] 
* Loop 48: fun(V1,V,Out) [V>=1,Out=1,V1=0] 
* Loop 49: fun(V1,V,Out) [V>=1,Out=0,V1=0] 
* Loop 50: fun(V1,V,Out) [Out=1,V=0,V1=0] 
* Loop 51: fun(V1,V,Out) [V>=0,V1>=0,Out=0] 

### Ranking functions of CR fun(V1,V,Out) 

#### Partial ranking functions of CR fun(V1,V,Out) 


### Resulting Chains:fun(V1,V,Out) 
* [51]
* [50]
* [49]
* [48]
* [47]
* [46]
* [45]
* [44]
* [43]
* [42]
* [41]


### Merging Chains  fun/3 into  External patterns of execution 
* [[50]] --> 1 
* [[49],[51]] --> 2 
* [[48]] --> 3 
* [[47]] --> 4 
* [[46]] --> 5 
* [[45]] --> 6 
* [[44]] --> 7 
* [[43]] --> 8 
* [[42]] --> 9 
* [[41]] --> 10 


### Specialization of cost equations fun5/5 
* CE 25 is refined into CE [71] 
* CE 24 is refined into CE [72] 
* CE 23 is refined into CE [73] 


#### Refined cost equations fun5/5 
* CE 71: fun5(V1,V,V13,V14,Out) = 0
     [V14>=0,V13>=0,V>=0,V1>=0,Out=0] 
* CE 72: fun5(V1,V,V13,V14,Out) = 1
     [V14>=0,V13>=0,V>=0,V+V13+V14+2=Out,V1=2] 
* CE 73: fun5(V1,V,V13,V14,Out) = 1
     [V14>=0,V13>=0,V>=0,V+V13+V14+2=Out,V1=1] 

### Cost equations --> "Loop" of fun5/5 
* CEs [71] --> Loop 52 
* CEs [72] --> Loop 53 
* CEs [73] --> Loop 54 

#### Loops of fun5/5 
* Loop 52: fun5(V1,V,V13,V14,Out) [V14>=0,V13>=0,V>=0,V1>=0,Out=0] 
* Loop 53: fun5(V1,V,V13,V14,Out) [V14>=0,V13>=0,V>=0,V+V13+V14+2=Out,V1=2] 
* Loop 54: fun5(V1,V,V13,V14,Out) [V14>=0,V13>=0,V>=0,V+V13+V14+2=Out,V1=1] 

### Ranking functions of CR fun5(V1,V,V13,V14,Out) 

#### Partial ranking functions of CR fun5(V1,V,V13,V14,Out) 


### Resulting Chains:fun5(V1,V,V13,V14,Out) 
* [54]
* [53]
* [52]


### Merging Chains  fun5/5 into  External patterns of execution 
* [[54]] --> 1 
* [[53]] --> 2 
* [[52]] --> 3 


### Specialization of cost equations fun4/3 
* CE 19 is refined into CE [74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90] 
* CE 21 is refined into CE [91] 
* CE 20 is refined into CE [92] 


#### Refined cost equations fun4/3 
* CE 74: fun4(V1,V,Out) = 1+ fun(W1,X1,Y1):1+ fun5(Z1,A2,B2,C2,Out):1
     [Out>=2,Out=C2+2,Out=V1+1,B2=0,A2=0,Z1=1,Y1=1,X1=0,W1=0,V=0] 
* CE 75: fun4(V1,V,Out) = 1+ fun(W1,X1,Y1):1+ fun5(Z1,A2,B2,C2,D2):3
     [C2>=0,C2+1=V1,D2=0,B2=0,A2=0,Z1=1,Y1=1,X1=0,W1=0,Out=0,V=0] 
* CE 76: fun4(V1,V,Out) = 1+ fun(V,W1,X1):2+ fun5(Y1,V,W1,Z1,A2):3
     [Z1>=0,W1>=0,V>=0,W1+Z1+1=V1,A2=0,Y1=0,X1=0,Out=0] 
* CE 77: fun4(V1,V,Out) = 1+ fun(W1,X1,Y1):3+ fun5(Z1,A2,X1,B2,Out):1
     [Out>=X1+2,X1>=1,Out=X1+B2+2,Out=V1+1,A2=0,Z1=1,Y1=1,W1=0,V=0] 
* CE 78: fun4(V1,V,Out) = 1+ fun(W1,X1,Y1):3+ fun5(Z1,A2,X1,B2,C2):3
     [B2>=0,X1>=1,X1+B2+1=V1,C2=0,A2=0,Z1=1,Y1=1,W1=0,Out=0,V=0] 
* CE 79: fun4(V1,V,Out) = 1+ fun(W1,X1,Y1):4+ fun5(Z1,A2,X1,B2,Out):2
     [Out>=X1+2,X1>=1,Out=X1+B2+2,Out=V1+1,A2=0,Z1=2,Y1=2,W1=0,V=0] 
* CE 80: fun4(V1,V,Out) = 1+ fun(W1,X1,Y1):4+ fun5(Z1,A2,X1,B2,C2):3
     [B2>=0,X1>=1,X1+B2+1=V1,C2=0,A2=0,Z1=2,Y1=2,W1=0,Out=0,V=0] 
* CE 81: fun4(V1,V,Out) = 1+ fun(V,W1,X1):5+ fun5(Y1,V,Z1,A2,B2):3
     [A2>=0,V>=1,A2+1=V1,B2=0,Z1=0,Y1=0,X1=0,W1=0,Out=0] 
* CE 82: fun4(V1,V,Out) = 1+ fun(V,W1,X1):6+ fun5(Y1,V,Z1,A2,Out):1
     [Out>=V+2,V>=1,Out=V+A2+2,Out=V1+V+1,Z1=0,Y1=1,X1=1,W1=0] 
* CE 83: fun4(V1,V,Out) = 1+ fun(V,W1,X1):6+ fun5(Y1,V,Z1,A2,B2):3
     [A2>=0,V>=1,A2+1=V1,B2=0,Z1=0,Y1=1,X1=1,W1=0,Out=0] 
* CE 84: fun4(V1,V,Out) = 1+ fun(V,W1,X1):7+ fun5(Y1,V,Z1,A2,Out):2
     [Out>=V+2,V>=1,Out=V+A2+2,Out=V1+V+1,Z1=0,Y1=2,X1=2,W1=0] 
* CE 85: fun4(V1,V,Out) = 1+ fun(V,W1,X1):7+ fun5(Y1,V,Z1,A2,B2):3
     [A2>=0,V>=1,A2+1=V1,B2=0,Z1=0,Y1=2,X1=2,W1=0,Out=0] 
* CE 86: fun4(V1,V,Out) = 1+ fun(V,V,W1):8+ fun5(X1,V,V,Y1,Z1):3
     [Y1>=0,V>=1,V+Y1+1=V1,Z1=0,X1=0,W1=0,Out=0] 
* CE 87: fun4(V1,V,Out) = 1+ fun(V,W1,X1):9+ fun5(Y1,V,W1,Z1,Out):1
     [Out>=V+W1+2,W1>=1,V>=1,Out=V+W1+Z1+2,Out=V1+V+1,Y1=1,X1=1] 
* CE 88: fun4(V1,V,Out) = 1+ fun(V,W1,X1):9+ fun5(Y1,V,W1,Z1,A2):3
     [Z1>=0,W1>=1,V>=1,W1+Z1+1=V1,A2=0,Y1=1,X1=1,Out=0] 
* CE 89: fun4(V1,V,Out) = 1+ fun(V,W1,X1):10+ fun5(Y1,V,W1,Z1,Out):2
     [Out>=V+W1+2,W1>=1,V>=1,Out=V+W1+Z1+2,Out=V1+V+1,Y1=2,X1=2] 
* CE 90: fun4(V1,V,Out) = 1+ fun(V,W1,X1):10+ fun5(Y1,V,W1,Z1,A2):3
     [Z1>=0,W1>=1,V>=1,W1+Z1+1=V1,A2=0,Y1=2,X1=2,Out=0] 
* CE 91: fun4(V1,V,Out) = 0
     [V>=0,V1>=0,Out=0] 
* CE 92: fun4(V1,V,Out) = 1
     [V>=0,V+1=Out,V1=0] 

### Cost equations --> "Loop" of fun4/3 
* CEs [82,84,87,89] --> Loop 55 
* CEs [74,77,79] --> Loop 56 
* CEs [75,76,78,80,81,83,85,86,88,90,91] --> Loop 57 
* CEs [92] --> Loop 58 

#### Loops of fun4/3 
* Loop 55: fun4(V1,V,Out) [V>=1,V1>=1,V1+V+1=Out] 
* Loop 56: fun4(V1,V,Out) [V1>=1,V1+1=Out,V=0] 
* Loop 57: fun4(V1,V,Out) [V>=0,V1>=0,Out=0] 
* Loop 58: fun4(V1,V,Out) [V>=0,V+1=Out,V1=0] 

### Ranking functions of CR fun4(V1,V,Out) 

#### Partial ranking functions of CR fun4(V1,V,Out) 


### Resulting Chains:fun4(V1,V,Out) 
* [58]
* [57]
* [56]
* [55]


### Merging Chains  fun4/3 into  External patterns of execution 
* [[58]] --> 1 
* [[56]] --> 2 
* [[57]] --> 3 
* [[55]] --> 4 


### Specialization of cost equations findMin/2 
* CE 18 is refined into CE [93,94,95,96] 
* CE 16 is refined into CE [97] 
* CE 17 is refined into CE [98] 


#### Refined cost equations findMin/2 
* CE 93: findMin(V1,Out) = 2+ findMin(W1,X1)+ fun4(Y1,Z1,Out):1
     [W1>=0,Out>=1,Out+W1=V1,Out=Z1+1,X1=0,Y1=0] 
* CE 94: findMin(V1,Out) = 2+ findMin(W1,X1)+ fun4(Y1,Z1,Out):2
     [W1>=0,Out>=2,Out=X1+1,Out=Y1+1,W1+1=V1,Z1=0] 
* CE 95: findMin(V1,Out) = 2+ findMin(W1,X1)+ fun4(X1,Y1,Z1):3
     [W1>=0,Y1>=0,X1>=0,Y1+W1+1=V1,Z1=0,Out=0] 
* CE 96: findMin(V1,Out) = 2+ findMin(W1,X1)+ fun4(X1,Y1,Out):4
     [Out>=X1+2,W1>=0,X1>=1,Out+W1=V1+X1,Out=X1+Y1+1] 
* CE 97: findMin(V1,Out) = 1
     [V1>=0,Out=0] 
* CE 98: findMin(V1,Out) = 2
     [Out=0,V1=0] 

### Cost equations --> "Loop" of findMin/2 
* CEs [97,98] --> Loop 59 
* CEs [96] --> Loop 60 
* CEs [94] --> Loop 61 
* CEs [93] --> Loop 62 
* CEs [95] --> Loop 63 

#### Loops of findMin/2 
* Loop 59: findMin(V1,Out) [V1>=0,Out=0] 
* Loop 60: findMin(V1,Out)->  findMin(V1',Out')
                  [Out+V1'>=V1+1,V1>=V1'+2,V1'>=0,V1+Out'=Out+V1'] 
* Loop 61: findMin(V1,Out)->  findMin(V1',Out')
                  [Out>=2,V1>=1,Out=Out'+1,V1=V1'+1] 
* Loop 62: findMin(V1,Out)->  findMin(V1',Out')
                  [V1>=Out,Out>=1,Out+V1'=V1,Out'=0] 
* Loop 63: findMin(V1,Out)->  findMin(V1',Out')
                  [V1>=V1'+1,Out'>=0,V1'>=0,Out=0] 

### Ranking functions of CR findMin(V1,Out) 
* RF of phase [60,61,62,63]: [V1]

#### Partial ranking functions of CR findMin(V1,Out) 
* Partial RF of phase [60,61,62,63]:
  - RF of loop [60:1]:
    V1-1
  - RF of loop [61:1,62:1,63:1]:
    V1


### Resulting Chains:findMin(V1,Out) 
* [[60,61,62,63],59]
* [59]


### Merging Chains  findMin/2 into  External patterns of execution 
* [[59]] --> 1 
* [[59,[60,61,62,63]]] --> 2 


### Specialization of cost equations minSort/2 
* CE 15 is refined into CE [99] 
* CE 13 is refined into CE [100,101] 
* CE 14 is refined into CE [102,103] 


#### Refined cost equations minSort/2 
* CE 99: minSort(V1,Out) = 2+ findMin(V1,W1):2+ minSort(X1,Y1)
     [W1+Y1>=Out,Out>=Y1+1,V1>=W1,W1+Y1=Out+X1] 
* CE 100: minSort(V1,Out) = 1+ findMin(V1,W1):1
     [V1>=0,W1=0,Out=0] 
* CE 101: minSort(V1,Out) = 1+ findMin(V1,W1):2
     [V1>=W1,W1>=0,V1>=1,Out=0] 
* CE 102: minSort(V1,Out) = 2+ findMin(V1,W1):1
     [V1>=0,W1=0,Out=0] 
* CE 103: minSort(V1,Out) = 2+ findMin(V1,W1):2
     [V1>=1,W1=0,Out=0] 

### Cost equations --> "Loop" of minSort/2 
* CEs [100,101,102,103] --> Loop 64 
* CEs [99] --> Loop 65 

#### Loops of minSort/2 
* Loop 64: minSort(V1,Out) [V1>=0,Out=0] 
* Loop 65: minSort(V1,Out)->  minSort(V1',Out')
                  [V1+Out'>=Out+V1',Out>=Out'+1,V1'>=0] 

### Ranking functions of CR minSort(V1,Out) 
* RF of phase [65]: [V1]

#### Partial ranking functions of CR minSort(V1,Out) 
* Partial RF of phase [65]:
  - RF of loop [65:1]:
    V1


### Resulting Chains:minSort(V1,Out) 
* [[65],64]
* [64]


### Merging Chains  minSort/2 into  External patterns of execution 
* [[64]] --> 1 
* [[64,[65]]] --> 2 


### Specialization of cost equations start/4 
* CE 2 is refined into CE [104] 
* CE 3 is refined into CE [105] 
* CE 4 is refined into CE [106,107] 
* CE 5 is refined into CE [108,109,110,111,112,113] 
* CE 6 is refined into CE [114,115,116,117,118,119,120,121,122,123] 
* CE 7 is refined into CE [124,125] 
* CE 8 is refined into CE [126,127,128,129] 
* CE 9 is refined into CE [130,131,132] 
* CE 10 is refined into CE [133,134] 
* CE 11 is refined into CE [135,136,137,138] 
* CE 12 is refined into CE [139,140,141,142,143,144,145,146,147] 


#### Refined cost equations start/4 
* CE 104: start(V1,V,V13,V14) = 0
     [V1>=0] 
* CE 105: start(V1,V,V13,V14) = 1
     [V1=0] 
* CE 106: start(V1,V,V13,V14) = 1+ minSort(W14,X14):1
     [V1>=W14+1,W14>=0,X14=0] 
* CE 107: start(V1,V,V13,V14) = 1+ minSort(W14,X14):2
     [W14>=X14,V1>=W14+1,X14>=1] 
* CE 108: start(V1,V,V13,V14) = 1+ findMin(W14,X14):1+ fun4(Y14,Z14,A15):1
     [A15>=1,W14>=0,W14+A15=V1,A15=Z14+1,Y14=0,X14=0] 
* CE 109: start(V1,V,V13,V14) = 1+ findMin(W14,X14):1+ fun4(Y14,Z14,A15):3
     [Z14>=0,W14>=0,W14+Z14+1=V1,A15=0,Y14=0,X14=0] 
* CE 110: start(V1,V,V13,V14) = 1+ findMin(W14,X14):2+ fun4(Y14,Z14,A15):1
     [A15>=1,W14>=1,W14+A15=V1,A15=Z14+1,Y14=0,X14=0] 
* CE 111: start(V1,V,V13,V14) = 1+ findMin(W14,X14):2+ fun4(Y14,Z14,A15):2
     [W14+1>=A15,A15>=2,A15=Y14+1,A15=X14+1,W14+1=V1,Z14=0] 
* CE 112: start(V1,V,V13,V14) = 1+ findMin(W14,X14):2+ fun4(X14,Y14,Z14):3
     [W14>=X14,Y14>=0,X14>=0,W14>=1,W14+Y14+1=V1,Z14=0] 
* CE 113: start(V1,V,V13,V14) = 1+ findMin(W14,X14):2+ fun4(X14,Y14,Z14):4
     [Z14>=X14+2,W14>=X14,X14>=1,W14+Z14=V1+X14,Z14=X14+Y14+1] 
* CE 114: start(V1,V,V13,V14) = 0+ fun(W14,X14,Y14):1
     [Y14=1,X14=0,W14=0,V=0,V1=0] 
* CE 115: start(V1,V,V13,V14) = 0+ fun(V1,V,W14):2
     [V>=0,V1>=0,W14=0] 
* CE 116: start(V1,V,V13,V14) = 0+ fun(W14,V,X14):3
     [V>=1,X14=1,W14=0,V1=0] 
* CE 117: start(V1,V,V13,V14) = 0+ fun(W14,V,X14):4
     [V>=1,X14=2,W14=0,V1=0] 
* CE 118: start(V1,V,V13,V14) = 0+ fun(V1,W14,X14):5
     [V1>=1,X14=0,W14=0,V=0] 
* CE 119: start(V1,V,V13,V14) = 0+ fun(V1,W14,X14):6
     [V1>=1,X14=1,W14=0,V=0] 
* CE 120: start(V1,V,V13,V14) = 0+ fun(V1,W14,X14):7
     [V1>=1,X14=2,W14=0,V=0] 
* CE 121: start(A,A,B,C) = 0+ fun(A,A,D):8
     [A>=1,D=0] 
* CE 122: start(V1,V,V13,V14) = 0+ fun(V1,V,W14):9
     [V>=1,V1>=1,W14=1] 
* CE 123: start(V1,V,V13,V14) = 0+ fun(V1,V,W14):10
     [V>=1,V1>=1,W14=2] 
* CE 124: start(V1,V,V13,V14) = 0+ findMin(V1,W14):1
     [V1>=0,W14=0] 
* CE 125: start(V1,V,V13,V14) = 0+ findMin(V1,W14):2
     [V1>=W14,W14>=0,V1>=1] 
* CE 126: start(V1,V,V13,V14) = 0+ fun4(W14,X14,Y14):1
     [Y14>=1,Y14=X14+1,Y14=V+1,W14=0,V1=0] 
* CE 127: start(V1,V,V13,V14) = 0+ fun4(W14,X14,Y14):2
     [Y14>=2,Y14=W14+1,Y14=V1+1,X14=0,V=0] 
* CE 128: start(V1,V,V13,V14) = 0+ fun4(V1,V,W14):3
     [V>=0,V1>=0,W14=0] 
* CE 129: start(V1,V,V13,V14) = 0+ fun4(V1,W14,X14):4
     [X14>=V1+2,V1>=1,X14=V1+W14+1,X14=V1+V+1] 
* CE 130: start(V1,V,V13,V14) = 0+ fun5(W14,V,V13,X14,Y14):1
     [Y14>=V+V13+2,V13>=0,V>=0,Y14=V+V13+X14+2,Y14=V+V13+V14+2,W14=1,V1=1] 
* CE 131: start(V1,V,V13,V14) = 0+ fun5(W14,V,V13,X14,Y14):2
     [Y14>=V+V13+2,V13>=0,V>=0,Y14=V+V13+X14+2,Y14=V+V13+V14+2,W14=2,V1=2] 
* CE 132: start(V1,V,V13,V14) = 0+ fun5(V1,V,V13,V14,W14):3
     [V14>=0,V13>=0,V>=0,V1>=0,W14=0] 
* CE 133: start(V1,V,V13,V14) = 0+ minSort(V1,W14):1
     [V1>=0,W14=0] 
* CE 134: start(V1,V,V13,V14) = 0+ minSort(V1,W14):2
     [V1>=W14,W14>=1] 
* CE 135: start(V1,V,V13,V14) = 0+ fun1(W14,X14):1
     [X14=1,W14=1,V1=1] 
* CE 136: start(V1,V,V13,V14) = 0+ fun1(W14,X14):2
     [X14=1,W14=2,V1=2] 
* CE 137: start(V1,V,V13,V14) = 0+ fun1(W14,X14):3
     [X14=2,W14=3,V1=3] 
* CE 138: start(V1,V,V13,V14) = 0+ fun1(V1,W14):4
     [V1>=0,W14=0] 
* CE 139: start(V1,V,V13,V14) = 0+ fun2(W14,X14,Y14):1
     [Y14=1,X14=0,W14=0,V=0,V1=0] 
* CE 140: start(V1,V,V13,V14) = 0+ fun2(W14,V,X14):2
     [V>=1,X14=2,W14=0,V1=0] 
* CE 141: start(V1,V,V13,V14) = 0+ fun2(W14,V,X14):3
     [V>=1,X14=3,W14=0,V1=0] 
* CE 142: start(V1,V,V13,V14) = 0+ fun2(V1,W14,X14):4
     [V1>=1,X14=2,W14=0,V=0] 
* CE 143: start(V1,V,V13,V14) = 0+ fun2(V1,W14,X14):5
     [V1>=1,X14=3,W14=0,V=0] 
* CE 144: start(V1,V,V13,V14) = 0+ fun2(V1,V,W14):6
     [V>=0,V1>=0,W14=0] 
* CE 145: start(A,A,B,C) = 0+ fun2(A,A,D):7
     [A>=1,D=1] 
* CE 146: start(V1,V,V13,V14) = 0+ fun2(V1,V,W14):8
     [V>=1,V1>=1,W14=2] 
* CE 147: start(V1,V,V13,V14) = 0+ fun2(V1,V,W14):9
     [V>=1,V1>=1,W14=3] 

### Cost equations --> "Loop" of start/4 
* CEs [121,145] --> Loop 66 
* CEs [118,119,120,127,142,143] --> Loop 67 
* CEs [137] --> Loop 68 
* CEs [131,136] --> Loop 69 
* CEs [130,135] --> Loop 70 
* CEs [104,105,106,107,108,109,110,111,112,113,114,115,116,117,122,123,124,125,126,128,129,132,133,134,138,139,140,141,144,146,147] --> Loop 71 

#### Loops of start/4 
* Loop 66: start(A,A,B,C) [A>=1] 
* Loop 67: start(V1,V,V13,V14) [V1>=1,V=0] 
* Loop 68: start(V1,V,V13,V14) [V1=3] 
* Loop 69: start(V1,V,V13,V14) [V1=2] 
* Loop 70: start(V1,V,V13,V14) [V1=1] 
* Loop 71: start(V1,V,V13,V14) [V1>=0] 

### Ranking functions of CR start(V1,V,V13,V14) 

#### Partial ranking functions of CR start(V1,V,V13,V14) 


### Resulting Chains:start(V1,V,V13,V14) 
* [71]
* [70]
* [69]
* [68]
* [67]
* [66]


### Merging Chains  start/4 into  External patterns of execution 
* [[70],[71]] --> 1 
* [[69]] --> 2 
* [[68]] --> 3 
* [[67]] --> 4 
* [[66]] --> 5 


Computing Bounds
=====================================

#### Cost of chains of fun1(V1,Out):
* Chain [30]: 0
  with precondition: [V1=1,Out=1] 

* Chain [29]: 0
  with precondition: [V1=2,Out=1] 

* Chain [28]: 0
  with precondition: [V1=3,Out=2] 

* Chain [27]: 0
  with precondition: [Out=0,V1>=0] 


#### Cost of loops [31,32] 

 * loop 31:fun2(V1,V,Out) -> [fun2(V1',V',Out')] 
0
 * loop 32:fun2(V1,V,Out) -> [fun2(V1',V',Out')] 
0
#### Cost of phase [31,32]:fun2(V1,V,Out) -> [fun2(V1',V',Out')] 
0
#### Cost of phase [31,32]:fun2(V1,V,Out) -> [fun2(V1',V',Out')] 
0
#### Cost of phase [31,32]:fun2(V1,V,Out) -> [fun2(V1',V',Out')] 
0
#### Cost of phase [31,32]:fun2(V1,V,Out) -> [fun2(V1',V',Out')] 
0
#### Cost of phase [31,32]:fun2(V1,V,Out) -> [fun2(V1',V',Out')] 
0
#### Cost of phase [31,32]:fun2(V1,V,Out) -> [fun2(V1',V',Out')] 
0
#### Cost of phase [31,32]:fun2(V1,V,Out) -> [fun2(V1',V',Out')] 
0
#### Cost of phase [31,32]:fun2(V1,V,Out) -> [fun2(V1',V',Out')] 
0
#### Cost of chains of fun2(V1,V,Out):
* Chain [[31,32],40]: 0
  with precondition: [Out=1,V=V1,V>=1] 

* Chain [[31,32],39]: 0
  with precondition: [Out=2,V1>=1,V>=1,V+V1>=3] 

* Chain [[31,32],38]: 0
  with precondition: [Out=3,V1>=1,V>=1,V+V1>=3] 

* Chain [[31,32],37]: 0
  with precondition: [Out=2,V1>=1,V>=1,V+V1>=3] 

* Chain [[31,32],36]: 0
  with precondition: [Out=3,V1>=1,V>=1,V+V1>=3] 

* Chain [[31,32],35]: 0
  with precondition: [Out=0,V1>=1,V>=1] 

* Chain [[31,32],34]: 0
  with precondition: [Out=2,V1>=2,V>=2] 

* Chain [[31,32],33]: 0
  with precondition: [Out=3,V1>=2,V>=2] 

* Chain [40]: 0
  with precondition: [V1=0,V=0,Out=1] 

* Chain [39]: 0
  with precondition: [V1=0,Out=2,V>=1] 

* Chain [38]: 0
  with precondition: [V1=0,Out=3,V>=1] 

* Chain [37]: 0
  with precondition: [V=0,Out=2,V1>=1] 

* Chain [36]: 0
  with precondition: [V=0,Out=3,V1>=1] 

* Chain [35]: 0
  with precondition: [Out=0,V1>=0,V>=0] 

* Chain [34]: 0
  with precondition: [Out=2,V1>=1,V>=1] 

* Chain [33]: 0
  with precondition: [Out=3,V1>=1,V>=1] 


#### Cost of chains of fun(V1,V,Out):
* Chain [51]: 1
  with precondition: [Out=0,V1>=0,V>=0] 

* Chain [50]: 1
  with precondition: [V1=0,V=0,Out=1] 

* Chain [49]: 1
  with precondition: [V1=0,Out=0,V>=1] 

* Chain [48]: 1
  with precondition: [V1=0,Out=1,V>=1] 

* Chain [47]: 1
  with precondition: [V1=0,Out=2,V>=1] 

* Chain [46]: 1
  with precondition: [V=0,Out=0,V1>=1] 

* Chain [45]: 1
  with precondition: [V=0,Out=1,V1>=1] 

* Chain [44]: 1
  with precondition: [V=0,Out=2,V1>=1] 

* Chain [43]: 1
  with precondition: [Out=0,V1=V,V1>=1] 

* Chain [42]: 1
  with precondition: [Out=1,V1>=1,V>=1] 

* Chain [41]: 1
  with precondition: [Out=2,V1>=1,V>=1] 


#### Cost of chains of fun5(V1,V,V13,V14,Out):
* Chain [54]: 1
  with precondition: [V1=1,V+V13+V14+2=Out,V>=0,V13>=0,V14>=0] 

* Chain [53]: 1
  with precondition: [V1=2,V+V13+V14+2=Out,V>=0,V13>=0,V14>=0] 

* Chain [52]: 0
  with precondition: [Out=0,V1>=0,V>=0,V13>=0,V14>=0] 


#### Cost of chains of fun4(V1,V,Out):
* Chain [58]: 1
  with precondition: [V1=0,V+1=Out,V>=0] 

* Chain [57]: 2
  with precondition: [Out=0,V1>=0,V>=0] 

* Chain [56]: 3
  with precondition: [V=0,V1+1=Out,V1>=1] 

* Chain [55]: 3
  with precondition: [V+V1+1=Out,V1>=1,V>=1] 


#### Cost of loops [60,61,62,63] 

 * loop 60:findMin(V1,Out) -> [findMin(V1',Out')] 
5
 * loop 61:findMin(V1,Out) -> [findMin(V1',Out')] 
5
 * loop 62:findMin(V1,Out) -> [findMin(V1',Out')] 
3
 * loop 63:findMin(V1,Out) -> [findMin(V1',Out')] 
4
#### Cost of phase [60,61,62,63]:findMin(V1,Out) -> [findMin(V1',Out')] 
17*it(60)+0
  Such that:aux(16) =< V1
aux(17) =< V1-V1'
it(60) =< aux(16)
it(60) =< aux(17)

#### Cost of chains of findMin(V1,Out):
* Chain [[60,61,62,63],59]: 17*it(60)+2
  Such that:aux(18) =< V1
it(60) =< aux(18)

  with precondition: [V1>=1,Out>=0,V1>=Out] 

* Chain [59]: 2
  with precondition: [Out=0,V1>=0] 


#### Cost of loops [65] 

 * loop 65:minSort(V1,Out) -> [minSort(V1',Out')] 
17*s(8)+4
  Such that:s(7) =< V1
s(8) =< s(7)

#### Cost of phase [65]:minSort(V1,Out) -> [minSort(V1',Out')] 
4*it(65)+17*s(9)+0
  Such that:it(65) =< V1-V1'
aux(21) =< V1
it(65) =< aux(21)
s(10) =< it(65)*aux(21)
s(9) =< s(10)

#### Cost of chains of minSort(V1,Out):
* Chain [[65],64]: 4*it(65)+34*s(2)+17*s(9)+4
  Such that:aux(19) =< V1-Out
aux(22) =< V1
aux(19) =< aux(22)
it(65) =< aux(22)
s(2) =< aux(19)
s(10) =< it(65)*aux(22)
s(9) =< s(10)

  with precondition: [Out>=1,V1>=Out] 

* Chain [64]: 34*s(2)+4
  Such that:aux(19) =< V1
s(2) =< aux(19)

  with precondition: [Out=0,V1>=0] 


#### Cost of chains of start(V1,V,V13,V14):
* Chain [71]: 229*s(12)+34*s(18)+6
  Such that:aux(25) =< V1
s(12) =< aux(25)
s(17) =< s(12)*aux(25)
s(18) =< s(17)

  with precondition: [V1>=0] 

* Chain [70]: 1
  with precondition: [V1=1] 

* Chain [69]: 1
  with precondition: [V1=2] 

* Chain [68]: 0
  with precondition: [V1=3] 

* Chain [67]: 3
  with precondition: [V=0,V1>=1] 

* Chain [66]: 1
  with precondition: [V1=V,V1>=1] 


Closed-form bounds of start(V1,V,V13,V14): 
-------------------------------------
* Chain [71] with precondition: [V1>=0] 
    - Upper bound: 229*V1+6+34*V1*V1 
    - Complexity: n^2 
* Chain [70] with precondition: [V1=1] 
    - Upper bound: 1 
    - Complexity: constant 
* Chain [69] with precondition: [V1=2] 
    - Upper bound: 1 
    - Complexity: constant 
* Chain [68] with precondition: [V1=3] 
    - Upper bound: 0 
    - Complexity: constant 
* Chain [67] with precondition: [V=0,V1>=1] 
    - Upper bound: 3 
    - Complexity: constant 
* Chain [66] with precondition: [V1=V,V1>=1] 
    - Upper bound: 1 
    - Complexity: constant 

### Maximum cost of start(V1,V,V13,V14): max([3,229*V1+6+34*V1*V1]) 
Asymptotic class: n^2 

Time statistics: 
-------------------------------------
* Partial evaluation computed in 95 ms.
* Invariants computed in 169 ms.
   - Backward Invariants 105 ms.
   - Transitive Invariants 16 ms.
* Refinement performed in 613 ms.
* Termination proved in 26 ms.
* Upper bounds computed in 413 ms.
   - Equation cost structures 212 ms.
   - Phase cost structures 133 ms.
   - Chain cost structures 63 ms.
   - Solving cost expressions 2 ms.
* Total analysis performed in 1457 ms.


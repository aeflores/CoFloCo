
Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. recursive  : [append/3,fun5/3]
1. non_recursive  : [fun18/3]
2. recursive [non_tail,multiple] : [fun1/3]
3. non_recursive  : [fun/3]
4. non_recursive  : [fun17/5]
5. non_recursive  : [fun3/2]
6. recursive  : [fun4/3]
7. non_recursive  : [fun2/3]
8. non_recursive  : [fun16/4]
9. recursive [non_tail] : [fun15/3,splitqs/3]
10. recursive [non_tail,multiple] : [fun10/2,fun11/3,quicksort/2]
11. recursive  : [fun12/2,fun13/3,sortAll/2]
12. recursive  : [fun6/4,fun7/5,fun8/6,fun9/7,insert/3]
13. recursive [non_tail] : [fun14/2,split/2]
14. non_recursive  : [splitAndSort/2]
15. non_recursive  : [start/6]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into append/3
1. SCC is partially evaluated into fun18/3
2. SCC is partially evaluated into fun1/3
3. SCC is completely evaluated into other SCCs
4. SCC is partially evaluated into fun17/5
5. SCC is partially evaluated into fun3/2
6. SCC is partially evaluated into fun4/3
7. SCC is partially evaluated into fun2/3
8. SCC is partially evaluated into fun16/4
9. SCC is partially evaluated into splitqs/3
10. SCC is partially evaluated into quicksort/2
11. SCC is partially evaluated into sortAll/2
12. SCC is partially evaluated into insert/3
13. SCC is partially evaluated into split/2
14. SCC is partially evaluated into splitAndSort/2
15. SCC is partially evaluated into start/6

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations append/3 
* CE 70 is refined into CE [97] 
* CE 68 is refined into CE [98] 
* CE 69 is refined into CE [99] 


#### Refined cost equations append/3 
* CE 97: append(V1,V,Out) = 2+ append(W1,V,X1)
     [V1+X1>=Out,Out>=X1+1,V>=0,Out+W1=V1+X1] 
* CE 98: append(V1,V,Out) = 1
     [V>=0,V1>=0,Out=0] 
* CE 99: append(A,B,B) = 2
     [B>=0,A=1] 

### Cost equations --> "Loop" of append/3 
* CEs [98] --> Loop 55 
* CEs [99] --> Loop 56 
* CEs [97] --> Loop 57 

#### Loops of append/3 
* Loop 55: append(V1,V,Out) [V>=0,V1>=0,Out=0] 
* Loop 56: append(A,B,B) [B>=0,A=1] 
* Loop 57: append(V1,V,Out)->  append(V1',V,Out')
                  [V1+Out'>=Out,Out>=Out'+1,V>=0,V1+Out'=Out+V1'] 

### Ranking functions of CR append(V1,V,Out) 
* RF of phase [57]: [V1]

#### Partial ranking functions of CR append(V1,V,Out) 
* Partial RF of phase [57]:
  - RF of loop [57:1]:
    V1


### Resulting Chains:append(V1,V,Out) 
* [[57],56]
* [[57],55]
* [56]
* [55]


### Merging Chains  append/3 into  External patterns of execution 
* [[56]] --> 1 
* [[55]] --> 2 
* [[56,[57]]] --> 3 
* [[55,[57]]] --> 4 


### Specialization of cost equations fun18/3 
* CE 82 is refined into CE [100] 
* CE 81 is refined into CE [101] 
* CE 80 is refined into CE [102] 
* CE 79 is refined into CE [103] 
* CE 78 is refined into CE [104] 


#### Refined cost equations fun18/3 
* CE 100: fun18(V1,V,Out) = 0
     [V>=0,V1>=0,Out=0] 
* CE 101: fun18(V1,V,Out) = 0
     [Out=2,V=2,V1=2] 
* CE 102: fun18(V1,V,Out) = 0
     [Out=1,V=1,V1=2] 
* CE 103: fun18(V1,V,Out) = 0
     [Out=1,V=2,V1=1] 
* CE 104: fun18(V1,V,Out) = 0
     [Out=1,V=1,V1=1] 

### Cost equations --> "Loop" of fun18/3 
* CEs [100] --> Loop 58 
* CEs [101] --> Loop 59 
* CEs [102] --> Loop 60 
* CEs [103] --> Loop 61 
* CEs [104] --> Loop 62 

#### Loops of fun18/3 
* Loop 58: fun18(V1,V,Out) [V>=0,V1>=0,Out=0] 
* Loop 59: fun18(V1,V,Out) [Out=2,V=2,V1=2] 
* Loop 60: fun18(V1,V,Out) [Out=1,V=1,V1=2] 
* Loop 61: fun18(V1,V,Out) [Out=1,V=2,V1=1] 
* Loop 62: fun18(V1,V,Out) [Out=1,V=1,V1=1] 

### Ranking functions of CR fun18(V1,V,Out) 

#### Partial ranking functions of CR fun18(V1,V,Out) 


### Resulting Chains:fun18(V1,V,Out) 
* [62]
* [61]
* [60]
* [59]
* [58]


### Merging Chains  fun18/3 into  External patterns of execution 
* [[62]] --> 1 
* [[61]] --> 2 
* [[60]] --> 3 
* [[59]] --> 4 
* [[58]] --> 5 


### Specialization of cost equations fun1/3 
* CE 53 is refined into CE [105] 
* CE 56 is refined into CE [106] 
* CE 51 is refined into CE [107] 
* CE 55 is refined into CE [108] 
* CE 50 is refined into CE [109] 
* CE 49 is refined into CE [110] 
* CE 54 is refined into CE [111,112,113,114,115] 
* CE 52 is refined into CE [116] 


#### Refined cost equations fun1/3 
* CE 105: fun1(V1,V,Out) = 0
     [V>=1,V1>=1,Out=1] 
* CE 106: fun1(V1,V,Out) = 0
     [V>=0,V1>=0,Out=0] 
* CE 107: fun1(V1,V,Out) = 0
     [V1>=1,Out=1,V=0] 
* CE 108: fun1(V1,V,Out) = 0
     [Out=2,V=1,V1=1] 
* CE 109: fun1(V1,V,Out) = 0
     [V>=1,Out=1,V1=0] 
* CE 110: fun1(V1,V,Out) = 0
     [Out=2,V=0,V1=0] 
* CE 111: fun1(V1,V,Out) = 0+ fun1(W1,X1,Y1)+ fun1(Z1,A2,B2)+ fun18(C2,D2,E2):1
     [A2>=0,Z1>=0,X1>=0,W1>=0,X1+A2+1=V,W1+Z1+1=V1,B2=1,Y1=1,E2=1,D2=1,C2=1,Out=1] 
* CE 112: fun1(V1,V,Out) = 0+ fun1(W1,X1,Y1)+ fun1(Z1,A2,B2)+ fun18(C2,D2,E2):2
     [A2>=0,Z1>=0,X1>=0,W1>=0,X1+A2+1=V,W1+Z1+1=V1,B2=2,Y1=1,E2=1,D2=2,C2=1,Out=1] 
* CE 113: fun1(V1,V,Out) = 0+ fun1(W1,X1,Y1)+ fun1(Z1,A2,B2)+ fun18(C2,D2,E2):3
     [A2>=0,Z1>=0,X1>=0,W1>=0,X1+A2+1=V,W1+Z1+1=V1,B2=1,Y1=2,E2=1,D2=1,C2=2,Out=1] 
* CE 114: fun1(V1,V,Out) = 0+ fun1(W1,X1,Y1)+ fun1(Z1,A2,B2)+ fun18(C2,D2,E2):4
     [A2>=0,Z1>=0,X1>=0,W1>=0,X1+A2+1=V,W1+Z1+1=V1,B2=2,Y1=2,E2=2,D2=2,C2=2,Out=2] 
* CE 115: fun1(V1,V,Out) = 0+ fun1(W1,X1,Y1)+ fun1(Z1,A2,B2)+ fun18(Y1,B2,C2):5
     [A2>=0,Z1>=0,X1>=0,W1>=0,B2>=0,Y1>=0,X1+A2+1=V,W1+Z1+1=V1,C2=0,Out=0] 
* CE 116: fun1(V1,V,Out) = 0+ fun1(W1,X1,Out)
     [X1>=0,W1>=0,X1+1=V,W1+1=V1] 

### Cost equations --> "Loop" of fun1/3 
* CEs [116] --> Loop 63 
* CEs [114] --> Loop 64 
* CEs [113] --> Loop 65 
* CEs [112] --> Loop 66 
* CEs [111] --> Loop 67 
* CEs [115] --> Loop 68 
* CEs [105] --> Loop 69 
* CEs [106] --> Loop 70 
* CEs [107] --> Loop 71 
* CEs [108] --> Loop 72 
* CEs [109] --> Loop 73 
* CEs [110] --> Loop 74 

#### Loops of fun1/3 
* Loop 63: fun1(V1,V,Out)->  fun1(V1',V',Out)
                  [V'>=0,V1'>=0,V'+1=V,V1'+1=V1] 
* Loop 64: fun1(V1,V,Out)->  fun1(V1',V',Out')  fun1(V1'2,V'2,Out'2)
                  [V>=V'+1,V1>=V1'+1,V'>=0,V1'>=0,V'+V'2+1=V,V1'+V1'2+1=V1,Out'2=2,Out'=2,Out=2] 
* Loop 65: fun1(V1,V,Out)->  fun1(V1',V',Out')  fun1(V1'2,V'2,Out'2)
                  [V>=V'+1,V1>=V1'+1,V'>=0,V1'>=0,V'+V'2+1=V,V1'+V1'2+1=V1,Out'2=1,Out'=2,Out=1] 
* Loop 66: fun1(V1,V,Out)->  fun1(V1',V',Out')  fun1(V1'2,V'2,Out'2)
                  [V>=V'+1,V1>=V1'+1,V'>=0,V1'>=0,V'+V'2+1=V,V1'+V1'2+1=V1,Out'2=2,Out'=1,Out=1] 
* Loop 67: fun1(V1,V,Out)->  fun1(V1',V',Out')  fun1(V1'2,V'2,Out'2)
                  [V>=V'+1,V1>=V1'+1,V'>=0,V1'>=0,V'+V'2+1=V,V1'+V1'2+1=V1,Out'2=1,Out'=1,Out=1] 
* Loop 68: fun1(V1,V,Out)->  fun1(V1',V',Out')  fun1(V1'2,V'2,Out'2)
                  [V>=V'+1,V1>=V1'+1,Out'2>=0,Out'>=0,V'>=0,V1'>=0,V'+V'2+1=V,V1'+V1'2+1=V1,Out=0] 
* Loop 69: fun1(V1,V,Out) [V>=1,V1>=1,Out=1] 
* Loop 70: fun1(V1,V,Out) [V>=0,V1>=0,Out=0] 
* Loop 71: fun1(V1,V,Out) [V1>=1,Out=1,V=0] 
* Loop 72: fun1(V1,V,Out) [Out=2,V=1,V1=1] 
* Loop 73: fun1(V1,V,Out) [V>=1,Out=1,V1=0] 
* Loop 74: fun1(V1,V,Out) [Out=2,V=0,V1=0] 

### Ranking functions of CR fun1(V1,V,Out) 
* RF of phase [63,64,65,66,67,68]: [V,V1]

#### Partial ranking functions of CR fun1(V1,V,Out) 
* Partial RF of phase [63,64,65,66,67,68]:
  - RF of loop [63:1,64:1,64:2,65:1,65:2,66:1,66:2,67:1,67:2,68:1,68:2]:
    V
    V1


### Resulting Chains:fun1(V1,V,Out) 
* [74]
* [73]
* [72]
* [71]
* [70]
* [69]
* [multiple([63,64,65,66,67,68],[[74],[73],[72],[71],[70],[69]])]


### Merging Chains  fun1/3 into  External patterns of execution 
* [[74]] --> 1 
* [[73]] --> 2 
* [[72],[multiple([63,64,65,66,67,68],[[74],[73],[72],[71],[70],[69]])]] --> 3 
* [[71]] --> 4 
* [[70]] --> 5 
* [[69]] --> 6 


### Specialization of cost equations fun17/5 
* CE 77 is refined into CE [117] 
* CE 76 is refined into CE [118] 
* CE 75 is refined into CE [119] 


#### Refined cost equations fun17/5 
* CE 117: fun17(V1,V,V16,V24,Out) = 0
     [V24>=0,V16>=0,V>=0,V1>=0,Out=0] 
* CE 118: fun17(V1,V,V16,V24,Out) = 1
     [V24>=0,V16>=0,V>=0,V+V16+V24+2=Out,V1=2] 
* CE 119: fun17(V1,V,V16,V24,Out) = 1
     [V24>=0,V16>=0,V>=0,V+V16+V24+2=Out,V1=1] 

### Cost equations --> "Loop" of fun17/5 
* CEs [117] --> Loop 75 
* CEs [118] --> Loop 76 
* CEs [119] --> Loop 77 

#### Loops of fun17/5 
* Loop 75: fun17(V1,V,V16,V24,Out) [V24>=0,V16>=0,V>=0,V1>=0,Out=0] 
* Loop 76: fun17(V1,V,V16,V24,Out) [V24>=0,V16>=0,V>=0,V+V16+V24+2=Out,V1=2] 
* Loop 77: fun17(V1,V,V16,V24,Out) [V24>=0,V16>=0,V>=0,V+V16+V24+2=Out,V1=1] 

### Ranking functions of CR fun17(V1,V,V16,V24,Out) 

#### Partial ranking functions of CR fun17(V1,V,V16,V24,Out) 


### Resulting Chains:fun17(V1,V,V16,V24,Out) 
* [77]
* [76]
* [75]


### Merging Chains  fun17/5 into  External patterns of execution 
* [[77]] --> 1 
* [[76]] --> 2 
* [[75]] --> 3 


### Specialization of cost equations fun3/2 
* CE 86 is refined into CE [120] 
* CE 85 is refined into CE [121] 
* CE 84 is refined into CE [122] 
* CE 83 is refined into CE [123] 


#### Refined cost equations fun3/2 
* CE 120: fun3(V1,Out) = 0
     [V1>=0,Out=0] 
* CE 121: fun3(V1,Out) = 0
     [Out=1,V1=3] 
* CE 122: fun3(V1,Out) = 0
     [Out=2,V1=2] 
* CE 123: fun3(V1,Out) = 0
     [Out=1,V1=1] 

### Cost equations --> "Loop" of fun3/2 
* CEs [120] --> Loop 78 
* CEs [121] --> Loop 79 
* CEs [122] --> Loop 80 
* CEs [123] --> Loop 81 

#### Loops of fun3/2 
* Loop 78: fun3(V1,Out) [V1>=0,Out=0] 
* Loop 79: fun3(V1,Out) [Out=1,V1=3] 
* Loop 80: fun3(V1,Out) [Out=2,V1=2] 
* Loop 81: fun3(V1,Out) [Out=1,V1=1] 

### Ranking functions of CR fun3(V1,Out) 

#### Partial ranking functions of CR fun3(V1,Out) 


### Resulting Chains:fun3(V1,Out) 
* [81]
* [80]
* [79]
* [78]


### Merging Chains  fun3/2 into  External patterns of execution 
* [[81]] --> 1 
* [[80]] --> 2 
* [[79]] --> 3 
* [[78]] --> 4 


### Specialization of cost equations fun4/3 
* CE 92 is refined into CE [124] 
* CE 94 is refined into CE [125] 
* CE 96 is refined into CE [126] 
* CE 90 is refined into CE [127] 
* CE 93 is refined into CE [128] 
* CE 89 is refined into CE [129] 
* CE 88 is refined into CE [130] 
* CE 87 is refined into CE [131] 
* CE 91 is refined into CE [132] 
* CE 95 is refined into CE [133] 


#### Refined cost equations fun4/3 
* CE 124: fun4(V1,V,Out) = 0
     [V>=1,V1>=1,Out=3] 
* CE 125: fun4(V1,V,Out) = 0
     [V>=1,V1>=1,Out=2] 
* CE 126: fun4(V1,V,Out) = 0
     [V>=0,V1>=0,Out=0] 
* CE 127: fun4(V1,V,Out) = 0
     [V1>=1,Out=3,V=0] 
* CE 128: fun4(V1,V,Out) = 0
     [V1>=1,Out=2,V=0] 
* CE 129: fun4(V1,V,Out) = 0
     [V>=1,Out=3,V1=0] 
* CE 130: fun4(V1,V,Out) = 0
     [V>=1,Out=2,V1=0] 
* CE 131: fun4(V1,V,Out) = 0
     [Out=1,V=0,V1=0] 
* CE 132: fun4(V1,V,Out) = 0+ fun4(W1,X1,Out)
     [X1>=0,W1>=0,W1+1=V,X1+1=V1] 
* CE 133: fun4(V1,V,Out) = 0+ fun4(W1,X1,Out)
     [X1>=0,W1>=0,X1+1=V,W1+1=V1] 

### Cost equations --> "Loop" of fun4/3 
* CEs [132] --> Loop 82 
* CEs [133] --> Loop 83 
* CEs [124] --> Loop 84 
* CEs [125] --> Loop 85 
* CEs [126] --> Loop 86 
* CEs [127] --> Loop 87 
* CEs [128] --> Loop 88 
* CEs [129] --> Loop 89 
* CEs [130] --> Loop 90 
* CEs [131] --> Loop 91 

#### Loops of fun4/3 
* Loop 82: fun4(V1,V,Out)->  fun4(V1',V',Out)
                  [V>=1,V1>=1,V1=V'+1,V=V1'+1] 
* Loop 83: fun4(V1,V,Out)->  fun4(V1',V',Out)
                  [V>=1,V1>=1,V=V'+1,V1=V1'+1] 
* Loop 84: fun4(V1,V,Out) [V>=1,V1>=1,Out=3] 
* Loop 85: fun4(V1,V,Out) [V>=1,V1>=1,Out=2] 
* Loop 86: fun4(V1,V,Out) [V>=0,V1>=0,Out=0] 
* Loop 87: fun4(V1,V,Out) [V1>=1,Out=3,V=0] 
* Loop 88: fun4(V1,V,Out) [V1>=1,Out=2,V=0] 
* Loop 89: fun4(V1,V,Out) [V>=1,Out=3,V1=0] 
* Loop 90: fun4(V1,V,Out) [V>=1,Out=2,V1=0] 
* Loop 91: fun4(V1,V,Out) [Out=1,V=0,V1=0] 

### Ranking functions of CR fun4(V1,V,Out) 
* RF of phase [82,83]: [V1/2+V/2-1/2]

#### Partial ranking functions of CR fun4(V1,V,Out) 
* Partial RF of phase [82,83]:
  - RF of loop [82:1]:
    V1/2+V/2-1/2
  - RF of loop [83:1]:
    V depends on loops [82:1] 
    V1 depends on loops [82:1] 


### Resulting Chains:fun4(V1,V,Out) 
* [[82,83],91]
* [[82,83],90]
* [[82,83],89]
* [[82,83],88]
* [[82,83],87]
* [[82,83],86]
* [[82,83],85]
* [[82,83],84]
* [91]
* [90]
* [89]
* [88]
* [87]
* [86]
* [85]
* [84]


### Merging Chains  fun4/3 into  External patterns of execution 
* [[91]] --> 1 
* [[90]] --> 2 
* [[89]] --> 3 
* [[88]] --> 4 
* [[87]] --> 5 
* [[86],[86,[82,83]]] --> 6 
* [[91,[82,83]]] --> 7 
* [[85],[85,[82,83]],[88,[82,83]],[90,[82,83]]] --> 8 
* [[84],[84,[82,83]],[87,[82,83]],[89,[82,83]]] --> 9 


### Specialization of cost equations fun2/3 
* CE 73 is refined into CE [134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150] 


#### Refined cost equations fun2/3 
* CE 134: fun2(V1,V,Out) = 1+ fun4(W1,X1,Y1):1+ fun3(Z1,A2):1
     [A2=1,Z1=1,Y1=1,X1=0,W1=0,Out=1,V=0,V1=0] 
* CE 135: fun2(V1,V,Out) = 1+ fun4(W1,X1,Y1):1+ fun3(Z1,A2):4
     [A2=0,Z1=1,Y1=1,X1=0,W1=0,Out=0,V=0,V1=0] 
* CE 136: fun2(V1,V,Out) = 1+ fun4(W1,V,X1):2+ fun3(Y1,Z1):2
     [V>=1,Z1=2,Y1=2,X1=2,W1=0,Out=2,V1=0] 
* CE 137: fun2(V1,V,Out) = 1+ fun4(W1,V,X1):2+ fun3(Y1,Z1):4
     [V>=1,Z1=0,Y1=2,X1=2,W1=0,Out=0,V1=0] 
* CE 138: fun2(V1,V,Out) = 1+ fun4(W1,V,X1):3+ fun3(Y1,Z1):3
     [V>=1,Z1=1,Y1=3,X1=3,W1=0,Out=1,V1=0] 
* CE 139: fun2(V1,V,Out) = 1+ fun4(W1,V,X1):3+ fun3(Y1,Z1):4
     [V>=1,Z1=0,Y1=3,X1=3,W1=0,Out=0,V1=0] 
* CE 140: fun2(V1,V,Out) = 1+ fun4(V1,W1,X1):4+ fun3(Y1,Z1):2
     [V1>=1,Z1=2,Y1=2,X1=2,W1=0,Out=2,V=0] 
* CE 141: fun2(V1,V,Out) = 1+ fun4(V1,W1,X1):4+ fun3(Y1,Z1):4
     [V1>=1,Z1=0,Y1=2,X1=2,W1=0,Out=0,V=0] 
* CE 142: fun2(V1,V,Out) = 1+ fun4(V1,W1,X1):5+ fun3(Y1,Z1):3
     [V1>=1,Z1=1,Y1=3,X1=3,W1=0,Out=1,V=0] 
* CE 143: fun2(V1,V,Out) = 1+ fun4(V1,W1,X1):5+ fun3(Y1,Z1):4
     [V1>=1,Z1=0,Y1=3,X1=3,W1=0,Out=0,V=0] 
* CE 144: fun2(V1,V,Out) = 1+ fun4(V1,V,W1):6+ fun3(X1,Y1):4
     [V>=0,V1>=0,Y1=0,X1=0,W1=0,Out=0] 
* CE 145: fun2(A,A,B) = 1+ fun4(A,A,C):7+ fun3(D,E):1
     [A>=1,E=1,D=1,C=1,B=1] 
* CE 146: fun2(A,A,B) = 1+ fun4(A,A,C):7+ fun3(D,E):4
     [A>=1,E=0,D=1,C=1,B=0] 
* CE 147: fun2(V1,V,Out) = 1+ fun4(V1,V,W1):8+ fun3(X1,Y1):2
     [V>=1,V1>=1,Y1=2,X1=2,W1=2,Out=2] 
* CE 148: fun2(V1,V,Out) = 1+ fun4(V1,V,W1):8+ fun3(X1,Y1):4
     [V>=1,V1>=1,Y1=0,X1=2,W1=2,Out=0] 
* CE 149: fun2(V1,V,Out) = 1+ fun4(V1,V,W1):9+ fun3(X1,Y1):3
     [V>=1,V1>=1,Y1=1,X1=3,W1=3,Out=1] 
* CE 150: fun2(V1,V,Out) = 1+ fun4(V1,V,W1):9+ fun3(X1,Y1):4
     [V>=1,V1>=1,Y1=0,X1=3,W1=3,Out=0] 

### Cost equations --> "Loop" of fun2/3 
* CEs [147] --> Loop 92 
* CEs [145,149] --> Loop 93 
* CEs [146] --> Loop 94 
* CEs [140] --> Loop 95 
* CEs [142] --> Loop 96 
* CEs [141,143] --> Loop 97 
* CEs [136] --> Loop 98 
* CEs [138] --> Loop 99 
* CEs [137,139] --> Loop 100 
* CEs [134] --> Loop 101 
* CEs [135,144,148,150] --> Loop 102 

#### Loops of fun2/3 
* Loop 92: fun2(V1,V,Out) [V>=1,V1>=1,Out=2] 
* Loop 93: fun2(V1,V,Out) [V>=1,V1>=1,Out=1] 
* Loop 94: fun2(A,A,B) [A>=1,B=0] 
* Loop 95: fun2(V1,V,Out) [V1>=1,Out=2,V=0] 
* Loop 96: fun2(V1,V,Out) [V1>=1,Out=1,V=0] 
* Loop 97: fun2(V1,V,Out) [V1>=1,Out=0,V=0] 
* Loop 98: fun2(V1,V,Out) [V>=1,Out=2,V1=0] 
* Loop 99: fun2(V1,V,Out) [V>=1,Out=1,V1=0] 
* Loop 100: fun2(V1,V,Out) [V>=1,Out=0,V1=0] 
* Loop 101: fun2(V1,V,Out) [Out=1,V=0,V1=0] 
* Loop 102: fun2(V1,V,Out) [V>=0,V1>=0,Out=0] 

### Ranking functions of CR fun2(V1,V,Out) 

#### Partial ranking functions of CR fun2(V1,V,Out) 


### Resulting Chains:fun2(V1,V,Out) 
* [102]
* [101]
* [100]
* [99]
* [98]
* [97]
* [96]
* [95]
* [94]
* [93]
* [92]


### Merging Chains  fun2/3 into  External patterns of execution 
* [[101]] --> 1 
* [[100],[102]] --> 2 
* [[99]] --> 3 
* [[98]] --> 4 
* [[97]] --> 5 
* [[96]] --> 6 
* [[95]] --> 7 
* [[94]] --> 8 
* [[93]] --> 9 
* [[92]] --> 10 


### Specialization of cost equations fun16/4 
* CE 71 is refined into CE [151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167] 
* CE 72 is refined into CE [168] 


#### Refined cost equations fun16/4 
* CE 151: fun16(V1,V,V16,Out) = 1+ fun2(W16,X16,Y16):1+ fun17(Z16,A17,B17,C17,Out):1
     [Out>=A17+2,A17>=0,Out=A17+B17+2,Out=V1+1,C17=0,Z16=1,Y16=1,X16=0,W16=0,V16=0,V=0] 
* CE 152: fun16(V1,V,V16,Out) = 1+ fun2(W16,X16,Y16):1+ fun17(Z16,A17,B17,C17,D17):3
     [B17>=0,A17>=0,A17+B17+1=V1,D17=0,C17=0,Z16=1,Y16=1,X16=0,W16=0,Out=0,V16=0,V=0] 
* CE 153: fun16(V1,V,V16,Out) = 1+ fun2(V16,V,W16):2+ fun17(X16,Y16,Z16,V16,A17):3
     [V16>=0,Z16>=0,Y16>=0,V>=0,Y16+Z16+1=V1,A17=0,X16=0,W16=0,Out=0] 
* CE 154: fun16(V1,V,V16,Out) = 1+ fun2(W16,V,X16):3+ fun17(Y16,Z16,A17,B17,Out):1
     [Out>=Z16+2,Z16>=0,V>=1,Out=Z16+A17+2,Out=V1+1,B17=0,Y16=1,X16=1,W16=0,V16=0] 
* CE 155: fun16(V1,V,V16,Out) = 1+ fun2(W16,V,X16):3+ fun17(Y16,Z16,A17,B17,C17):3
     [A17>=0,Z16>=0,V>=1,Z16+A17+1=V1,C17=0,B17=0,Y16=1,X16=1,W16=0,Out=0,V16=0] 
* CE 156: fun16(V1,V,V16,Out) = 1+ fun2(W16,V,X16):4+ fun17(Y16,Z16,A17,B17,Out):2
     [Out>=Z16+2,Z16>=0,V>=1,Out=Z16+A17+2,Out=V1+1,B17=0,Y16=2,X16=2,W16=0,V16=0] 
* CE 157: fun16(V1,V,V16,Out) = 1+ fun2(W16,V,X16):4+ fun17(Y16,Z16,A17,B17,C17):3
     [A17>=0,Z16>=0,V>=1,Z16+A17+1=V1,C17=0,B17=0,Y16=2,X16=2,W16=0,Out=0,V16=0] 
* CE 158: fun16(V1,V,V16,Out) = 1+ fun2(V16,W16,X16):5+ fun17(Y16,Z16,A17,V16,B17):3
     [V16>=1,A17>=0,Z16>=0,Z16+A17+1=V1,B17=0,Y16=0,X16=0,W16=0,Out=0,V=0] 
* CE 159: fun16(V1,V,V16,Out) = 1+ fun2(W16,X16,Y16):6+ fun17(Z16,A17,B17,C17,Out):1
     [Out>=A17+B17+3,B17>=0,A17>=0,Out=A17+B17+C17+2,Out=W16+A17+B17+2,Out=V16+A17+B17+2,A17+B17+1=V1,Z16=1,Y16=1,X16=0,V=0] 
* CE 160: fun16(V1,V,V16,Out) = 1+ fun2(V16,W16,X16):6+ fun17(Y16,Z16,A17,V16,B17):3
     [V16>=1,A17>=0,Z16>=0,Z16+A17+1=V1,B17=0,Y16=1,X16=1,W16=0,Out=0,V=0] 
* CE 161: fun16(V1,V,V16,Out) = 1+ fun2(W16,X16,Y16):7+ fun17(Z16,A17,B17,C17,Out):2
     [Out>=A17+B17+3,B17>=0,A17>=0,Out=A17+B17+C17+2,Out=W16+A17+B17+2,Out=V16+A17+B17+2,A17+B17+1=V1,Z16=2,Y16=2,X16=0,V=0] 
* CE 162: fun16(V1,V,V16,Out) = 1+ fun2(V16,W16,X16):7+ fun17(Y16,Z16,A17,V16,B17):3
     [V16>=1,A17>=0,Z16>=0,Z16+A17+1=V1,B17=0,Y16=2,X16=2,W16=0,Out=0,V=0] 
* CE 163: fun16(A,B,B,C) = 1+ fun2(B,B,D):8+ fun17(E,F,G,B,H):3
     [B>=1,G>=0,F>=0,F+G+1=A,H=0,E=0,D=0,C=0] 
* CE 164: fun16(V1,V,V16,Out) = 1+ fun2(W16,V,X16):9+ fun17(Y16,Z16,A17,B17,Out):1
     [Out>=Z16+A17+3,A17>=0,Z16>=0,V>=1,Out=Z16+A17+B17+2,Out=W16+Z16+A17+2,Out=V16+Z16+A17+2,Z16+A17+1=V1,Y16=1,X16=1] 
* CE 165: fun16(V1,V,V16,Out) = 1+ fun2(V16,V,W16):9+ fun17(X16,Y16,Z16,V16,A17):3
     [V16>=1,Z16>=0,Y16>=0,V>=1,Y16+Z16+1=V1,A17=0,X16=1,W16=1,Out=0] 
* CE 166: fun16(V1,V,V16,Out) = 1+ fun2(W16,V,X16):10+ fun17(Y16,Z16,A17,B17,Out):2
     [Out>=Z16+A17+3,A17>=0,Z16>=0,V>=1,Out=Z16+A17+B17+2,Out=W16+Z16+A17+2,Out=V16+Z16+A17+2,Z16+A17+1=V1,Y16=2,X16=2] 
* CE 167: fun16(V1,V,V16,Out) = 1+ fun2(V16,V,W16):10+ fun17(X16,Y16,Z16,V16,A17):3
     [V16>=1,Z16>=0,Y16>=0,V>=1,Y16+Z16+1=V1,A17=0,X16=2,W16=2,Out=0] 
* CE 168: fun16(V1,V,V16,Out) = 0
     [V16>=0,V>=0,V1>=0,Out=0] 

### Cost equations --> "Loop" of fun16/4 
* CEs [164,166] --> Loop 103 
* CEs [163] --> Loop 104 
* CEs [154,156] --> Loop 105 
* CEs [155,157] --> Loop 106 
* CEs [159,161] --> Loop 107 
* CEs [158,160,162] --> Loop 108 
* CEs [151] --> Loop 109 
* CEs [152,153,165,167,168] --> Loop 110 

#### Loops of fun16/4 
* Loop 103: fun16(V1,V,V16,Out) [V16>=1,V>=1,V1>=1,V1+V16+1=Out] 
* Loop 104: fun16(A,B,B,C) [B>=1,A>=1,C=0] 
* Loop 105: fun16(V1,V,V16,Out) [V>=1,V1>=1,V1+1=Out,V16=0] 
* Loop 106: fun16(V1,V,V16,Out) [V>=1,V1>=1,Out=0,V16=0] 
* Loop 107: fun16(V1,V,V16,Out) [V16>=1,V1>=1,V1+V16+1=Out,V=0] 
* Loop 108: fun16(V1,V,V16,Out) [V16>=1,V1>=1,Out=0,V=0] 
* Loop 109: fun16(V1,V,V16,Out) [V1>=1,V1+1=Out,V16=0,V=0] 
* Loop 110: fun16(V1,V,V16,Out) [V16>=0,V>=0,V1>=0,Out=0] 

### Ranking functions of CR fun16(V1,V,V16,Out) 

#### Partial ranking functions of CR fun16(V1,V,V16,Out) 


### Resulting Chains:fun16(V1,V,V16,Out) 
* [110]
* [109]
* [108]
* [107]
* [106]
* [105]
* [104]
* [103]


### Merging Chains  fun16/4 into  External patterns of execution 
* [[109]] --> 1 
* [[108],[110]] --> 2 
* [[107]] --> 3 
* [[106]] --> 4 
* [[105]] --> 5 
* [[104]] --> 6 
* [[103]] --> 7 


### Specialization of cost equations splitqs/3 
* CE 67 is refined into CE [169,170,171,172,173,174,175] 
* CE 65 is refined into CE [176] 
* CE 66 is refined into CE [177] 


#### Refined cost equations splitqs/3 
* CE 169: splitqs(V1,V,Out) = 2+ splitqs(W1,X1,Y1)+ fun16(Z1,A2,B2,Out):1
     [X1>=0,Out>=2,Out=Y1+1,Out=Z1+1,X1+1=V,W1=0,B2=0,A2=0,V1=0] 
* CE 170: splitqs(V1,V,Out) = 2+ splitqs(V1,W1,X1)+ fun16(X1,V1,Y1,Z1):2
     [W1>=0,Y1>=0,V1>=0,X1>=0,Y1+W1+1=V,Z1=0,Out=0] 
* CE 171: splitqs(V1,V,Out) = 2+ splitqs(W1,X1,Y1)+ fun16(Y1,Z1,A2,Out):3
     [Out>=Y1+2,X1>=0,Y1>=1,Out+X1=V+Y1,Out=Y1+A2+1,W1=0,Z1=0,V1=0] 
* CE 172: splitqs(V1,V,Out) = 2+ splitqs(V1,W1,X1)+ fun16(X1,V1,Y1,Z1):4
     [W1>=0,V1>=1,X1>=1,W1+1=V,Z1=0,Y1=0,Out=0] 
* CE 173: splitqs(V1,V,Out) = 2+ splitqs(V1,W1,X1)+ fun16(Y1,V1,Z1,Out):5
     [W1>=0,Out>=2,V1>=1,Out=X1+1,Out=Y1+1,W1+1=V,Z1=0] 
* CE 174: splitqs(V1,V,Out) = 2+ splitqs(V1,W1,X1)+ fun16(X1,V1,V1,Y1):6
     [W1>=0,V1>=1,X1>=1,V1+W1+1=V,Y1=0,Out=0] 
* CE 175: splitqs(V1,V,Out) = 2+ splitqs(V1,W1,X1)+ fun16(X1,V1,Y1,Out):7
     [Out>=X1+2,W1>=0,V1>=1,X1>=1,Out+W1=V+X1,Out=X1+Y1+1] 
* CE 176: splitqs(V1,V,Out) = 1
     [V>=0,V1>=0,Out=0] 
* CE 177: splitqs(V1,V,Out) = 2
     [V1>=0,Out=3,V=1] 

### Cost equations --> "Loop" of splitqs/3 
* CEs [176] --> Loop 111 
* CEs [177] --> Loop 112 
* CEs [175] --> Loop 113 
* CEs [173] --> Loop 114 
* CEs [174] --> Loop 115 
* CEs [170,172] --> Loop 116 
* CEs [171] --> Loop 117 
* CEs [169] --> Loop 118 

#### Loops of splitqs/3 
* Loop 111: splitqs(V1,V,Out) [V>=0,V1>=0,Out=0] 
* Loop 112: splitqs(V1,V,Out) [V1>=0,Out=3,V=1] 
* Loop 113: splitqs(V1,V,Out)->  splitqs(V1,V',Out')
                  [Out+V'>=V+1,V>=V'+2,V'>=0,V1>=1,V+Out'=Out+V'] 
* Loop 114: splitqs(V1,V,Out)->  splitqs(V1,V',Out')
                  [Out>=2,V>=1,V1>=1,Out=Out'+1,V=V'+1] 
* Loop 115: splitqs(V1,V,Out)->  splitqs(V1,V',Out')
                  [V>=V1+1,Out'>=1,V1>=1,V1+V'+1=V,Out=0] 
* Loop 116: splitqs(V1,V,Out)->  splitqs(V1,V',Out')
                  [V>=V'+1,Out'>=0,V'>=0,V1>=0,Out=0] 
* Loop 117: splitqs(V1,V,Out)->  splitqs(V1',V',Out')
                  [Out+V'>=V+1,V>=V'+2,V'>=0,V+Out'=Out+V',V1'=0,V1=0] 
* Loop 118: splitqs(V1,V,Out)->  splitqs(V1',V',Out')
                  [Out>=2,V>=1,Out=Out'+1,V=V'+1,V1'=0,V1=0] 

### Ranking functions of CR splitqs(V1,V,Out) 
* RF of phase [113,114]: [V]
* RF of phase [116]: [V]
* RF of phase [117,118]: [V]

#### Partial ranking functions of CR splitqs(V1,V,Out) 
* Partial RF of phase [113,114]:
  - RF of loop [113:1]:
    V/2-1/2
  - RF of loop [114:1]:
    V
* Partial RF of phase [116]:
  - RF of loop [116:1]:
    V
* Partial RF of phase [117,118]:
  - RF of loop [117:1]:
    V-1
  - RF of loop [118:1]:
    V


### Resulting Chains:splitqs(V1,V,Out) 
* [[117,118],112]
* [[116],[117,118],112]
* [[116],[113,114],112]
* [[116],115,[113,114],112]
* [[116],115,112]
* [[116],112]
* [[116],111]
* [[113,114],112]
* [115,[113,114],112]
* [115,112]
* [112]
* [111]


### Merging Chains  splitqs/3 into  External patterns of execution 
* [[111],[112,[113,114],115],[111,[116]],[112,[116]],[112,115,[116]],[112,[113,114],115,[116]],[112,[113,114],[116]],[112,[117,118],[116]]] --> 1 
* [[112,[117,118]]] --> 2 
* [[112]] --> 3 
* [[112,115]] --> 4 
* [[112,[113,114]]] --> 5 


### Specialization of cost equations quicksort/2 
* CE 57 is refined into CE [178] 
* CE 60 is refined into CE [179,180,181,182,183] 
* CE 58 is refined into CE [184] 
* CE 59 is refined into CE [185,186,187,188,189,190,191,192,193,194,195,196] 


#### Refined cost equations quicksort/2 
* CE 178: quicksort(V1,Out) = 1
     [V1>=0,Out=0] 
* CE 179: quicksort(V1,Out) = 2+ splitqs(W1,X1,Y1):1
     [X1>=0,W1>=0,W1+X1+1=V1,Y1=0,Out=0] 
* CE 180: quicksort(V1,Out) = 2+ splitqs(W1,X1,Y1):2
     [Y1>=4,Y1=X1+2,Y1=V1+1,W1=0,Out=0] 
* CE 181: quicksort(V1,Out) = 2+ splitqs(W1,X1,Y1):3
     [W1>=0,W1+2=V1,Y1=3,X1=1,Out=0] 
* CE 182: quicksort(V1,Out) = 2+ splitqs(W1,X1,Y1):4
     [X1>=3,X1=W1+2,2*X1=V1+1,Y1=0,Out=0] 
* CE 183: quicksort(V1,Out) = 2+ splitqs(W1,X1,Y1):5
     [Y1>=4,W1>=1,W1+Y1=V1+1,Y1=X1+2,Out=0] 
* CE 184: quicksort(V1,Out) = 2
     [Out=1,V1=1] 
* CE 185: quicksort(V1,Out) = 3+ splitqs(W1,X1,Y1):2+ quicksort(Z1,A2)+ quicksort(B2,C2)+ append(D2,Out,Out):1
     [Y1>=B2+1,B2>=0,Out>=0,Y1>=4,Y1=Z1+B2+1,Out=C2+1,Y1=X1+2,Y1=V1+1,A2=1,D2=1,W1=0] 
* CE 186: quicksort(V1,Out) = 3+ splitqs(W1,X1,Y1):2+ quicksort(Z1,A2)+ quicksort(B2,C2)+ append(A2,D2,E2):2
     [Y1>=B2+1,B2>=0,D2>=0,A2>=0,Y1>=4,Y1=Z1+B2+1,D2=C2+1,Y1=X1+2,Y1=V1+1,E2=0,W1=0,Out=0] 
* CE 187: quicksort(V1,Out) = 3+ splitqs(W1,X1,Y1):2+ quicksort(Z1,A2)+ quicksort(B2,C2)+ append(A2,D2,Out):3
     [Y1>=B2+1,Out+1>=A2,B2>=0,A2>=2,Y1>=4,Y1=Z1+B2+1,Out=A2+C2,Out+1=A2+D2,Y1=X1+2,Y1=V1+1,W1=0] 
* CE 188: quicksort(V1,Out) = 3+ splitqs(W1,X1,Y1):2+ quicksort(Z1,A2)+ quicksort(B2,C2)+ append(A2,D2,Out):4
     [Y1>=B2+1,A2>=Out,B2>=0,Out>=1,D2>=0,Y1>=4,Y1=Z1+B2+1,D2=C2+1,Y1=X1+2,Y1=V1+1,W1=0] 
* CE 189: quicksort(V1,Out) = 3+ splitqs(W1,X1,Y1):3+ quicksort(Z1,A2)+ quicksort(B2,C2)+ append(D2,Out,Out):1
     [B2>=0,Out>=0,W1>=0,2>=B2,Out=W1+C2+1,Z1+B2=2,W1+2=V1,A2=1,D2=1,Y1=3,X1=1] 
* CE 190: quicksort(V1,Out) = 3+ splitqs(W1,X1,Y1):3+ quicksort(Z1,A2)+ quicksort(B2,C2)+ append(A2,D2,E2):2
     [B2>=0,D2>=0,A2>=0,W1>=0,2>=B2,D2=W1+C2+1,Z1+B2=2,W1+2=V1,E2=0,Y1=3,X1=1,Out=0] 
* CE 191: quicksort(V1,Out) = 3+ splitqs(W1,X1,Y1):3+ quicksort(Z1,A2)+ quicksort(B2,C2)+ append(A2,D2,Out):3
     [Out+1>=A2,B2>=0,A2>=2,W1>=0,2>=B2,Out=W1+A2+C2,Out+1=A2+D2,Z1+B2=2,W1+2=V1,Y1=3,X1=1] 
* CE 192: quicksort(V1,Out) = 3+ splitqs(W1,X1,Y1):3+ quicksort(Z1,A2)+ quicksort(B2,C2)+ append(A2,D2,Out):4
     [A2>=Out,B2>=0,Out>=1,D2>=0,W1>=0,2>=B2,D2=W1+C2+1,Z1+B2=2,W1+2=V1,Y1=3,X1=1] 
* CE 193: quicksort(V1,Out) = 3+ splitqs(W1,X1,Y1):5+ quicksort(Z1,A2)+ quicksort(B2,C2)+ append(D2,Out,Out):1
     [Y1>=B2+1,B2>=0,Out>=0,Y1>=4,W1>=1,Y1=Z1+B2+1,Out=W1+C2+1,W1+Y1=V1+1,Y1=X1+2,A2=1,D2=1] 
* CE 194: quicksort(V1,Out) = 3+ splitqs(W1,X1,Y1):5+ quicksort(Z1,A2)+ quicksort(B2,C2)+ append(A2,D2,E2):2
     [Y1>=B2+1,B2>=0,D2>=0,A2>=0,Y1>=4,W1>=1,Y1=Z1+B2+1,D2=W1+C2+1,W1+Y1=V1+1,Y1=X1+2,E2=0,Out=0] 
* CE 195: quicksort(V1,Out) = 3+ splitqs(W1,X1,Y1):5+ quicksort(Z1,A2)+ quicksort(B2,C2)+ append(A2,D2,Out):3
     [Y1>=B2+1,Out+1>=A2,B2>=0,A2>=2,Y1>=4,W1>=1,Out=W1+A2+C2,Y1=Z1+B2+1,Out+1=A2+D2,W1+Y1=V1+1,Y1=X1+2] 
* CE 196: quicksort(V1,Out) = 3+ splitqs(W1,X1,Y1):5+ quicksort(Z1,A2)+ quicksort(B2,C2)+ append(A2,D2,Out):4
     [Y1>=B2+1,A2>=Out,B2>=0,Out>=1,D2>=0,Y1>=4,W1>=1,Y1=Z1+B2+1,D2=W1+C2+1,W1+Y1=V1+1,Y1=X1+2] 

### Cost equations --> "Loop" of quicksort/2 
* CEs [196] --> Loop 119 
* CEs [195] --> Loop 120 
* CEs [188] --> Loop 121 
* CEs [187] --> Loop 122 
* CEs [192] --> Loop 123 
* CEs [191] --> Loop 124 
* CEs [193] --> Loop 125 
* CEs [189] --> Loop 126 
* CEs [185] --> Loop 127 
* CEs [194] --> Loop 128 
* CEs [186] --> Loop 129 
* CEs [190] --> Loop 130 
* CEs [178,179,180,181,182,183] --> Loop 131 
* CEs [184] --> Loop 132 

#### Loops of quicksort/2 
* Loop 119: quicksort(V1,Out)->  quicksort(V1',Out')  quicksort(V1'2,Out'2)
                  [V1+Out'2+1>=V1'+V1'2,V1>=V1'+V1'2+1,V1'+V1'2>=3,Out'>=Out,V1'2>=0,V1'>=0,Out>=1] 
* Loop 120: quicksort(V1,Out)->  quicksort(V1',Out')  quicksort(V1'2,Out'2)
                  [V1>=V1'+V1'2+1,V1'+V1'2>=3,Out+1>=Out',V1'2>=0,Out'>=2,V1'>=0,Out+V1'+V1'2=V1+Out'+Out'2] 
* Loop 121: quicksort(V1,Out)->  quicksort(V1',Out')  quicksort(V1'2,Out'2)
                  [V1>=V1',Out'>=Out,Out'2+1>=0,V1'>=0,Out>=1,V1>=3,V1=V1'+V1'2] 
* Loop 122: quicksort(V1,Out)->  quicksort(V1',Out')  quicksort(V1'2,Out'2)
                  [Out+1>=Out',V1>=V1',Out'>=2,V1'>=0,V1>=3,V1=V1'+V1'2,Out'+Out'2=Out] 
* Loop 123: quicksort(V1,Out)->  quicksort(V1',Out')  quicksort(V1'2,Out'2)
                  [V1+Out'2>=1,Out'>=Out,V1'>=0,Out>=1,V1>=2,2>=V1',V1'+V1'2=2] 
* Loop 124: quicksort(V1,Out)->  quicksort(V1',Out')  quicksort(V1'2,Out'2)
                  [Out+1>=Out',Out'>=2,V1'>=0,V1>=2,2>=V1',V1+Out'+Out'2=Out+2,V1'+V1'2=2] 
* Loop 125: quicksort(V1,Out)->  quicksort(V1',Out')  quicksort(V1'2,Out'2)
                  [V1>=V1'+V1'2+1,V1'+V1'2>=3,V1'2>=0,V1'>=0,Out>=0,V1+Out'2+1=Out+V1'+V1'2,Out'=1] 
* Loop 126: quicksort(V1,Out)->  quicksort(V1',Out')  quicksort(V1'2,Out'2)
                  [V1'>=0,Out>=0,V1>=2,2>=V1',Out+1=V1+Out'2,V1'+V1'2=2,Out'=1] 
* Loop 127: quicksort(V1,Out)->  quicksort(V1',Out')  quicksort(V1'2,Out'2)
                  [V1>=V1',V1'>=0,Out>=0,V1>=3,V1=V1'+V1'2,Out=Out'2+1,Out'=1] 
* Loop 128: quicksort(V1,Out)->  quicksort(V1',Out')  quicksort(V1'2,Out'2)
                  [V1+Out'2+1>=V1'+V1'2,V1>=V1'+V1'2+1,V1'+V1'2>=3,V1'2>=0,Out'>=0,V1'>=0,Out=0] 
* Loop 129: quicksort(V1,Out)->  quicksort(V1',Out')  quicksort(V1'2,Out'2)
                  [V1>=V1',Out'2+1>=0,Out'>=0,V1'>=0,V1>=3,V1=V1'+V1'2,Out=0] 
* Loop 130: quicksort(V1,Out)->  quicksort(V1',Out')  quicksort(V1'2,Out'2)
                  [V1+Out'2>=1,Out'>=0,V1'>=0,V1>=2,2>=V1',V1'+V1'2=2,Out=0] 
* Loop 131: quicksort(V1,Out) [V1>=0,Out=0] 
* Loop 132: quicksort(V1,Out) [Out=1,V1=1] 

### Ranking functions of CR quicksort(V1,Out) 

#### Partial ranking functions of CR quicksort(V1,Out) 
* Partial RF of phase [119,120,121,122,125,127,128,129]:
  - RF of loop [119:1,119:2,120:1,120:2,125:1,125:2,128:1,128:2]:
    V1-3


### Resulting Chains:quicksort(V1,Out) 
* [multiple([123,124,126,130],[[],[132],[131]])]...
* [multiple([119,120,121,122,125,127,128,129],[[],[multiple([123,124,126,130],[[],[132],[131]])],[132],[131]])]...
* [132]
* [131]


### Merging Chains  quicksort/2 into  External patterns of execution 
* [[132]] --> 1 
* [[131]] --> 2 
* [[multiple([123,124,126,130],[[],[132],[131]])]] --> 3 
* [[multiple([119,120,121,122,125,127,128,129],[[],[multiple([123,124,126,130],[[],[132],[131]])],[132],[131]])]] --> 4 


### Specialization of cost equations sortAll/2 
* CE 61 is refined into CE [197] 
* CE 64 is refined into CE [198] 
* CE 62 is refined into CE [199] 
* CE 63 is refined into CE [200,201,202,203] 


#### Refined cost equations sortAll/2 
* CE 197: sortAll(V1,Out) = 1
     [V1>=0,Out=0] 
* CE 198: sortAll(V1,Out) = 2
     [V1>=1,Out=0] 
* CE 199: sortAll(V1,Out) = 2
     [Out=1,V1=1] 
* CE 200: sortAll(V1,Out) = 3+ quicksort(W1,X1):1+ sortAll(Y1,Z1)
     [V1+Z1>=Out,Out>=Z1+3,Out+Y1=V1+Z1,X1=1,W1=1] 
* CE 201: sortAll(V1,Out) = 3+ quicksort(W1,X1):2+ sortAll(Y1,Z1)
     [V1+Z1>=Out+W1,Out>=Z1+2,W1>=0,Out+W1+Y1=V1+Z1,X1=0] 
* CE 202: sortAll(V1,Out) = 3+ quicksort(W1,X1):3
     [V1+X1+Y1>=Out+W1,Out>=X1+Y1+2,X1>=0,W1>=2,Out+W1+Z1=V1+X1+Y1] 
* CE 203: sortAll(V1,Out) = 3+ quicksort(W1,X1):4
     [V1+X1+Y1>=Out+W1,Out>=X1+Y1+2,X1>=0,W1>=3,Out+W1+Z1=V1+X1+Y1] 

### Cost equations --> "Loop" of sortAll/2 
* CEs [202,203] --> Loop 133 
* CEs [200,201] --> Loop 134 
* CEs [197,198] --> Loop 135 
* CEs [199] --> Loop 136 

#### Loops of sortAll/2 
* Loop 133: sortAll(V1,Out) [V1>=4] 
* Loop 134: sortAll(V1,Out)->  sortAll(V1',Out')
                  [V1+Out'>=Out+V1',Out>=Out'+2,V1'>=0] 
* Loop 135: sortAll(V1,Out) [V1>=0,Out=0] 
* Loop 136: sortAll(V1,Out) [Out=1,V1=1] 

### Ranking functions of CR sortAll(V1,Out) 
* RF of phase [134]: [V1-1]

#### Partial ranking functions of CR sortAll(V1,Out) 
* Partial RF of phase [134]:
  - RF of loop [134:1]:
    V1-1


### Resulting Chains:sortAll(V1,Out) 
* [[134],136]
* [[134],135]
* [[134],133]...
* [136]
* [135]
* [133]...


### Merging Chains  sortAll/2 into  External patterns of execution 
* [[136]] --> 1 
* [[135]] --> 2 
* [[135,[134]],[136,[134]]] --> 3 
* [[133]] --> 4 
* [[133,[134]]] --> 5 


### Specialization of cost equations insert/3 
* CE 46 is refined into CE [204,205] 
* CE 42 is refined into CE [206] 
* CE 44 is refined into CE [207] 
* CE 47 is refined into CE [208,209,210,211,212,213] 
* CE 48 is refined into CE [214] 
* CE 43 is refined into CE [215] 
* CE 45 is refined into CE [216,217,218,219] 


#### Refined cost equations insert/3 
* CE 204: insert(V1,V,Out) = 6+ fun1(W1,X1,Y1):1
     [Out>=V1+2,V1>=1,V1+V=Out,Y1=2,X1=0,W1=0] 
* CE 205: insert(V1,V,Out) = 6+ fun1(W1,X1,Y1):3
     [Out+X1>=V1+W1+2,V1>=X1+1,X1>=1,W1>=1,Out+X1=V1+V,Y1=2] 
* CE 206: insert(V1,V,Out) = 2
     [V>=0,V1>=1,Out=0] 
* CE 207: insert(V1,V,Out) = 3
     [V>=1,V1>=1,Out=0] 
* CE 208: insert(V1,V,Out) = 5+ fun1(W1,X1,Y1):1
     [V>=2,V1>=1,Y1=2,X1=0,W1=0,Out=0] 
* CE 209: insert(V1,V,Out) = 5+ fun1(W1,X1,Y1):2
     [V1>=X1+1,X1>=1,V>=2,Y1=1,W1=0,Out=0] 
* CE 210: insert(V1,V,Out) = 5+ fun1(W1,X1,Y1):3
     [V1>=X1+1,V>=W1+2,Y1>=0,X1>=1,W1>=1,2>=Y1,Out=0] 
* CE 211: insert(V1,V,Out) = 5+ fun1(W1,X1,Y1):4
     [V>=W1+2,W1>=1,V1>=1,Y1=1,X1=0,Out=0] 
* CE 212: insert(V1,V,Out) = 5+ fun1(W1,X1,Y1):5
     [V1>=X1+1,V>=W1+2,X1>=0,W1>=0,Y1=0,Out=0] 
* CE 213: insert(V1,V,Out) = 5+ fun1(W1,X1,Y1):6
     [V1>=X1+1,V>=W1+2,X1>=1,W1>=1,Y1=1,Out=0] 
* CE 214: insert(V1,V,Out) = 1
     [V>=0,V1>=0,Out=0] 
* CE 215: insert(V1,V,Out) = 3
     [V1>=1,V1+4=Out,V=1] 
* CE 216: insert(V1,V,Out) = 6+ fun1(W1,X1,Y1):2+ insert(V1,Z1,A2)
     [V>=Z1+2,V1>=X1+1,Z1>=0,X1>=1,Out+Z1=V+A2,Y1=1,W1=0] 
* CE 217: insert(V1,V,Out) = 6+ fun1(W1,X1,Y1):3+ insert(V1,Z1,A2)
     [V>=W1+Z1+2,V1>=X1+1,Z1>=0,X1>=1,W1>=1,Out+Z1=V+A2,Y1=1] 
* CE 218: insert(V1,V,Out) = 6+ fun1(W1,X1,Y1):4+ insert(V1,Z1,A2)
     [V>=W1+Z1+2,Z1>=0,W1>=1,V1>=1,Out+Z1=V+A2,Y1=1,X1=0] 
* CE 219: insert(V1,V,Out) = 6+ fun1(W1,X1,Y1):6+ insert(V1,Z1,A2)
     [V>=W1+Z1+2,V1>=X1+1,Z1>=0,X1>=1,W1>=1,Out+Z1=V+A2,Y1=1] 

### Cost equations --> "Loop" of insert/3 
* CEs [216] --> Loop 137 
* CEs [217,218,219] --> Loop 138 
* CEs [205] --> Loop 139 
* CEs [204] --> Loop 140 
* CEs [206,207,208,209,210,211,212,213,214] --> Loop 141 
* CEs [215] --> Loop 142 

#### Loops of insert/3 
* Loop 137: insert(V1,V,Out)->  insert(V1,V',Out')
                  [V>=V'+2,V'>=0,V1>=2,V+Out'=Out+V'] 
* Loop 138: insert(V1,V,Out)->  insert(V1,V',Out')
                  [V>=V'+3,V'>=0,V1>=1,V+Out'=Out+V'] 
* Loop 139: insert(V1,V,Out) [V1+V>=Out+1,Out>=V+1,V>=3] 
* Loop 140: insert(V1,V,Out) [V>=2,V1>=1,V1+V=Out] 
* Loop 141: insert(V1,V,Out) [V>=0,V1>=0,Out=0] 
* Loop 142: insert(V1,V,Out) [V1>=1,V1+4=Out,V=1] 

### Ranking functions of CR insert(V1,V,Out) 
* RF of phase [137,138]: [V/2-1/2,V1/2+V/2-3/2]

#### Partial ranking functions of CR insert(V1,V,Out) 
* Partial RF of phase [137,138]:
  - RF of loop [137:1]:
    V-1
  - RF of loop [138:1]:
    V/3-2/3


### Resulting Chains:insert(V1,V,Out) 
* [[137,138],142]
* [[137,138],141]
* [[137,138],140]
* [[137,138],139]
* [142]
* [141]
* [140]
* [139]


### Merging Chains  insert/3 into  External patterns of execution 
* [[142]] --> 1 
* [[141]] --> 2 
* [[142,[137,138]]] --> 3 
* [[140],[140,[137,138]]] --> 4 
* [[141,[137,138]]] --> 5 
* [[139],[139,[137,138]]] --> 6 


### Specialization of cost equations split/2 
* CE 41 is refined into CE [220,221,222,223,224,225] 
* CE 39 is refined into CE [226] 
* CE 40 is refined into CE [227] 


#### Refined cost equations split/2 
* CE 220: split(V1,Out) = 2+ split(W1,X1)+ insert(Y1,Z1,Out):1
     [W1>=0,Out>=5,Out+W1=V1+3,Out=Y1+4,X1=1,Z1=1] 
* CE 221: split(V1,Out) = 2+ split(W1,X1)+ insert(Y1,X1,Z1):2
     [W1>=0,X1>=0,Y1>=0,Y1+W1+1=V1,Z1=0,Out=0] 
* CE 222: split(V1,Out) = 2+ split(W1,X1)+ insert(Y1,Z1,Out):3
     [Out>=Y1+6,W1>=0,Out>=8,Y1>=1,Out=Y1+X1+3,Out=Y1+Z1+3,Y1+W1+1=V1] 
* CE 223: split(V1,Out) = 2+ split(W1,X1)+ insert(Y1,Z1,Out):4
     [Out>=Y1+2,W1>=0,Y1>=1,Out=Y1+X1,Out=Y1+Z1,Y1+W1+1=V1] 
* CE 224: split(V1,Out) = 2+ split(W1,X1)+ insert(Y1,X1,Out):5
     [Out+Y1>=4,X1>=Out,W1>=0,Out>=2,Y1>=1,Y1+W1+1=V1] 
* CE 225: split(V1,Out) = 2+ split(W1,X1)+ insert(Y1,X1,Out):6
     [Y1+X1>=Out+1,Out>=X1+1,W1>=0,X1>=3,Y1+W1+1=V1] 
* CE 226: split(V1,Out) = 1
     [V1>=0,Out=0] 
* CE 227: split(V1,Out) = 2
     [Out=1,V1=1] 

### Cost equations --> "Loop" of split/2 
* CEs [226] --> Loop 143 
* CEs [227] --> Loop 144 
* CEs [225] --> Loop 145 
* CEs [224] --> Loop 146 
* CEs [223] --> Loop 147 
* CEs [222] --> Loop 148 
* CEs [220] --> Loop 149 
* CEs [221] --> Loop 150 

#### Loops of split/2 
* Loop 143: split(V1,Out) [V1>=0,Out=0] 
* Loop 144: split(V1,Out) [Out=1,V1=1] 
* Loop 145: split(V1,Out)->  split(V1',Out')
                  [V1+Out'>=Out+V1'+2,Out>=Out'+1,Out'>=3,V1'>=0] 
* Loop 146: split(V1,Out)->  split(V1',Out')
                  [V1+Out>=V1'+5,V1>=V1'+2,Out'>=Out,V1'>=0,Out>=2] 
* Loop 147: split(V1,Out)->  split(V1',Out')
                  [Out+V1'>=V1+1,V1>=V1'+2,V1'>=0,V1+Out'=Out+V1'+1] 
* Loop 148: split(V1,Out)->  split(V1',Out')
                  [Out+V1'>=V1+5,V1>=V1'+2,V1'>=0,Out>=8,V1+Out'+2=Out+V1'] 
* Loop 149: split(V1,Out)->  split(V1',Out')
                  [V1+3>=Out,Out>=5,Out+V1'=V1+3,Out'=1] 
* Loop 150: split(V1,Out)->  split(V1',Out')
                  [V1>=V1'+1,Out'>=0,V1'>=0,Out=0] 

### Ranking functions of CR split(V1,Out) 
* RF of phase [145,146,147,148]: [V1-1]
* RF of phase [150]: [V1]

#### Partial ranking functions of CR split(V1,Out) 
* Partial RF of phase [145,146,147,148]:
  - RF of loop [145:1]:
    V1-2
  - RF of loop [146:1,147:1,148:1]:
    V1-1
* Partial RF of phase [150]:
  - RF of loop [150:1]:
    V1


### Resulting Chains:split(V1,Out) 
* [[150],[145,146,147,148],149,144]
* [[150],149,144]
* [[150],144]
* [[150],143]
* [[145,146,147,148],149,144]
* [149,144]
* [144]
* [143]


### Merging Chains  split/2 into  External patterns of execution 
* [[144]] --> 1 
* [[143],[143,[150]],[144,[150]],[144,149,[150]],[144,149,[145,146,147,148],[150]]] --> 2 
* [[144,149]] --> 3 
* [[144,149,[145,146,147,148]]] --> 4 


### Specialization of cost equations splitAndSort/2 
* CE 74 is refined into CE [228,229,230,231,232,233,234,235,236,237,238] 


#### Refined cost equations splitAndSort/2 
* CE 228: splitAndSort(V1,Out) = 1+ split(W1,X1):1+ sortAll(Y1,Z1):1
     [Z1=1,Y1=1,X1=1,W1=1,Out=1,V1=1] 
* CE 229: splitAndSort(V1,Out) = 1+ split(W1,X1):1+ sortAll(Y1,Z1):2
     [Z1=0,Y1=1,X1=1,W1=1,Out=0,V1=1] 
* CE 230: splitAndSort(V1,Out) = 1+ split(V1,W1):2+ sortAll(X1,Y1):2
     [V1>=0,Y1=0,X1=0,W1=0,Out=0] 
* CE 231: splitAndSort(V1,Out) = 1+ split(W1,X1):3+ sortAll(X1,Y1):2
     [X1>=5,X1=W1+2,X1=V1+2,Y1=0,Out=0] 
* CE 232: splitAndSort(V1,Out) = 1+ split(W1,X1):3+ sortAll(X1,Out):3
     [X1>=Out,Out>=2,X1>=5,X1=W1+2,X1=V1+2] 
* CE 233: splitAndSort(V1,Out) = 1+ split(W1,X1):3+ sortAll(X1,Out):4
     [X1>=5,X1=W1+2,X1=V1+2] 
* CE 234: splitAndSort(V1,Out) = 1+ split(W1,X1):3+ sortAll(X1,Out):5
     [X1>=6,X1=W1+2,X1=V1+2] 
* CE 235: splitAndSort(V1,Out) = 1+ split(V1,W1):4+ sortAll(W1,X1):2
     [V1+W1>=8,2*V1>=W1+1,W1>=2,V1>=5,X1=0,Out=0] 
* CE 236: splitAndSort(V1,Out) = 1+ split(V1,W1):4+ sortAll(W1,Out):3
     [V1+W1>=8,W1>=Out,2*V1>=W1+1,Out>=2,V1>=5] 
* CE 237: splitAndSort(V1,Out) = 1+ split(V1,W1):4+ sortAll(W1,Out):4
     [2*V1>=W1+1,W1>=4,V1>=5] 
* CE 238: splitAndSort(V1,Out) = 1+ split(V1,W1):4+ sortAll(W1,Out):5
     [2*V1>=W1+1,W1>=6,V1>=5] 

### Cost equations --> "Loop" of splitAndSort/2 
* CEs [233,234,237,238] --> Loop 151 
* CEs [236] --> Loop 152 
* CEs [232] --> Loop 153 
* CEs [228] --> Loop 154 
* CEs [229,230,231,235] --> Loop 155 

#### Loops of splitAndSort/2 
* Loop 151: splitAndSort(V1,Out) [V1>=3] 
* Loop 152: splitAndSort(V1,Out) [2*V1>=Out+1,Out>=2,V1>=5] 
* Loop 153: splitAndSort(V1,Out) [V1+2>=Out,Out>=2,V1>=3] 
* Loop 154: splitAndSort(V1,Out) [Out=1,V1=1] 
* Loop 155: splitAndSort(V1,Out) [V1>=0,Out=0] 

### Ranking functions of CR splitAndSort(V1,Out) 

#### Partial ranking functions of CR splitAndSort(V1,Out) 


### Resulting Chains:splitAndSort(V1,Out) 
* [155]
* [154]
* [153]
* [152]
* [151]...


### Merging Chains  splitAndSort/2 into  External patterns of execution 
* [[154]] --> 1 
* [[155]] --> 2 
* [[153]] --> 3 
* [[152]] --> 4 
* [[151]] --> 5 


### Specialization of cost equations start/6 
* CE 2 is refined into CE [239] 
* CE 3 is refined into CE [240] 
* CE 4 is refined into CE [241,242,243,244,245,246,247,248,249,250,251,252,253] 
* CE 5 is refined into CE [254] 
* CE 6 is refined into CE [255] 
* CE 7 is refined into CE [256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279] 
* CE 8 is refined into CE [280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303] 
* CE 9 is refined into CE [304,305] 
* CE 10 is refined into CE [306,307] 
* CE 11 is refined into CE [308,309,310,311,312,313] 
* CE 12 is refined into CE [314,315,316,317,318,319] 
* CE 13 is refined into CE [320,321,322,323,324,325] 
* CE 14 is refined into CE [326,327] 
* CE 15 is refined into CE [328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351] 
* CE 16 is refined into CE [352,353,354,355,356,357] 
* CE 17 is refined into CE [358,359,360,361,362,363,364,365,366,367,368,369] 
* CE 18 is refined into CE [370,371,372,373,374,375,376,377,378,379,380,381] 
* CE 19 is refined into CE [382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413] 
* CE 20 is refined into CE [414,415,416,417,418] 
* CE 21 is refined into CE [419,420,421,422,423,424,425,426,427,428,429,430,431,432] 
* CE 22 is refined into CE [433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449] 
* CE 23 is refined into CE [450,451,452,453] 
* CE 24 is refined into CE [454,455,456,457,458,459] 
* CE 25 is refined into CE [460,461,462,463,464,465,466,467,468,469] 
* CE 26 is refined into CE [470,471,472,473] 
* CE 27 is refined into CE [474,475,476,477,478,479] 
* CE 28 is refined into CE [480,481,482,483] 
* CE 29 is refined into CE [484,485,486,487,488] 
* CE 30 is refined into CE [489,490,491,492] 
* CE 31 is refined into CE [493,494,495,496,497] 
* CE 32 is refined into CE [498,499,500,501,502] 
* CE 33 is refined into CE [503,504,505,506,507,508,509] 
* CE 34 is refined into CE [510,511,512] 
* CE 35 is refined into CE [513,514,515,516,517] 
* CE 36 is refined into CE [518,519,520,521] 
* CE 37 is refined into CE [522,523,524,525,526,527,528,529,530] 
* CE 38 is refined into CE [531,532,533,534,535,536] 


#### Refined cost equations start/6 
* CE 239: start(V1,V,V16,V24,V32,V39) = 0
     [V1>=0] 
* CE 240: start(V1,V,V16,V24,V32,V39) = 1
     [V1>=1] 
* CE 241: start(V1,V,V16,V24,V32,V39) = 1+ split(W39,X39):1+ insert(Y39,Z39,A40):1
     [A40>=5,A40=Y39+4,A40=V1+2,Z39=1,X39=1,W39=1] 
* CE 242: start(V1,V,V16,V24,V32,V39) = 1+ split(W39,X39):1+ insert(Y39,Z39,A40):2
     [Y39>=0,Y39+2=V1,A40=0,Z39=1,X39=1,W39=1] 
* CE 243: start(V1,V,V16,V24,V32,V39) = 1+ split(W39,X39):2+ insert(Y39,Z39,A40):2
     [Y39>=0,W39>=0,W39+Y39+1=V1,A40=0,Z39=0,X39=0] 
* CE 244: start(V1,V,V16,V24,V32,V39) = 1+ split(W39,X39):3+ insert(Y39,X39,Z39):2
     [X39>=5,Y39>=0,X39+Y39=V1+1,X39=W39+2,Z39=0] 
* CE 245: start(V1,V,V16,V24,V32,V39) = 1+ split(W39,X39):3+ insert(Y39,Z39,A40):3
     [A40>=Y39+8,Y39>=1,A40=Y39+Z39+3,A40=X39+Y39+3,A40=W39+Y39+5,A40=V1+4] 
* CE 246: start(V1,V,V16,V24,V32,V39) = 1+ split(W39,X39):3+ insert(Y39,Z39,A40):4
     [A40>=Y39+5,Y39>=1,A40=Y39+Z39,A40=X39+Y39,A40=W39+Y39+2,A40=V1+1] 
* CE 247: start(V1,V,V16,V24,V32,V39) = 1+ split(W39,X39):3+ insert(Y39,X39,Z39):5
     [Y39+Z39>=4,X39>=Z39,Z39>=2,X39>=5,Y39>=1,X39+Y39=V1+1,X39=W39+2] 
* CE 248: start(V1,V,V16,V24,V32,V39) = 1+ split(W39,X39):3+ insert(Y39,X39,Z39):6
     [X39+Y39>=Z39+1,Z39>=X39+1,X39>=5,X39+Y39=V1+1,X39=W39+2] 
* CE 249: start(V1,V,V16,V24,V32,V39) = 1+ split(W39,X39):4+ insert(Y39,X39,Z39):2
     [W39+X39>=8,2*W39>=X39+1,X39>=2,Y39>=0,W39>=5,W39+Y39+1=V1,Z39=0] 
* CE 250: start(V1,V,V16,V24,V32,V39) = 1+ split(W39,X39):4+ insert(Y39,Z39,A40):3
     [Y39+2*W39+2>=A40,A40>=Y39+6,A40>=8,Y39>=1,W39>=5,A40=Y39+Z39+3,A40=X39+Y39+3,W39+Y39+1=V1] 
* CE 251: start(V1,V,V16,V24,V32,V39) = 1+ split(W39,X39):4+ insert(Y39,Z39,A40):4
     [Y39+2*W39>=A40+1,W39+A40>=Y39+8,A40>=Y39+2,Y39>=1,W39>=5,A40=Y39+Z39,A40=X39+Y39,W39+Y39+1=V1] 
* CE 252: start(V1,V,V16,V24,V32,V39) = 1+ split(W39,X39):4+ insert(Y39,X39,Z39):5
     [Y39+Z39>=4,W39+X39>=8,X39>=Z39,2*W39>=X39+1,Z39>=2,Y39>=1,W39>=5,W39+Y39+1=V1] 
* CE 253: start(V1,V,V16,V24,V32,V39) = 1+ split(W39,X39):4+ insert(Y39,X39,Z39):6
     [X39+Y39>=Z39+1,2*W39>=X39+1,Z39>=X39+1,X39>=3,W39>=5,W39+Y39+1=V1] 
* CE 254: start(V1,V,V16,V24,V32,V39) = 1
     [V16>=0,V>=0,V1>=1] 
* CE 255: start(V1,V,V16,V24,V32,V39) = 2
     [V16>=0,V>=1,V1>=1] 
* CE 256: start(V1,V,V16,V24,V32,V39) = 5+ fun1(W39,X39,Y39):2+ insert(Z39,A40,B40):1
     [V1>=X39+1,B40>=5,X39>=1,V>=3,B40=Z39+4,B40=V16+4,A40=1,Y39=1,W39=0] 
* CE 257: start(V1,V,V16,V24,V32,V39) = 5+ fun1(W39,X39,Y39):2+ insert(V16,Z39,A40):2
     [V>=Z39+2,V1>=X39+1,Z39>=0,V16>=0,X39>=1,A40=0,Y39=1,W39=0] 
* CE 258: start(V1,V,V16,V24,V32,V39) = 5+ fun1(W39,X39,Y39):2+ insert(V16,Z39,A40):3
     [V+V16+1>=A40,A40>=V16+6,V1>=X39+1,A40>=8,V16>=1,X39>=1,A40=V16+Z39+3,Y39=1,W39=0] 
* CE 259: start(V1,V,V16,V24,V32,V39) = 5+ fun1(W39,X39,Y39):2+ insert(V16,Z39,A40):4
     [V+V16>=A40+2,A40>=V16+2,V1>=X39+1,V16>=1,X39>=1,A40=V16+Z39,Y39=1,W39=0] 
* CE 260: start(V1,V,V16,V24,V32,V39) = 5+ fun1(W39,X39,Y39):2+ insert(V16,Z39,A40):5
     [V16+A40>=4,Z39>=A40,V>=Z39+2,V1>=X39+1,A40>=2,V16>=1,X39>=1,Y39=1,W39=0] 
* CE 261: start(V1,V,V16,V24,V32,V39) = 5+ fun1(W39,X39,Y39):2+ insert(V16,Z39,A40):6
     [V16+Z39>=A40+1,A40>=Z39+1,V>=Z39+2,V1>=X39+1,Z39>=3,X39>=1,Y39=1,W39=0] 
* CE 262: start(V1,V,V16,V24,V32,V39) = 5+ fun1(W39,X39,Y39):3+ insert(Z39,A40,B40):1
     [V1>=X39+1,V>=W39+3,B40>=5,X39>=1,W39>=1,B40=Z39+4,B40=V16+4,A40=1,Y39=1] 
* CE 263: start(V1,V,V16,V24,V32,V39) = 5+ fun1(W39,X39,Y39):3+ insert(V16,Z39,A40):2
     [V>=W39+Z39+2,V1>=X39+1,Z39>=0,V16>=0,X39>=1,W39>=1,A40=0,Y39=1] 
* CE 264: start(V1,V,V16,V24,V32,V39) = 5+ fun1(W39,X39,Y39):3+ insert(V16,Z39,A40):3
     [V+V16+1>=W39+A40,A40>=V16+6,V1>=X39+1,A40>=8,V16>=1,X39>=1,W39>=1,A40=V16+Z39+3,Y39=1] 
* CE 265: start(V1,V,V16,V24,V32,V39) = 5+ fun1(W39,X39,Y39):3+ insert(V16,Z39,A40):4
     [V+V16>=W39+A40+2,A40>=V16+2,V1>=X39+1,V16>=1,X39>=1,W39>=1,A40=V16+Z39,Y39=1] 
* CE 266: start(V1,V,V16,V24,V32,V39) = 5+ fun1(W39,X39,Y39):3+ insert(V16,Z39,A40):5
     [V>=W39+Z39+2,V16+A40>=4,Z39>=A40,V1>=X39+1,A40>=2,V16>=1,X39>=1,W39>=1,Y39=1] 
* CE 267: start(V1,V,V16,V24,V32,V39) = 5+ fun1(W39,X39,Y39):3+ insert(V16,Z39,A40):6
     [V16+Z39>=A40+1,V>=W39+Z39+2,A40>=Z39+1,V1>=X39+1,Z39>=3,X39>=1,W39>=1,Y39=1] 
* CE 268: start(V1,V,V16,V24,V32,V39) = 5+ fun1(W39,X39,Y39):4+ insert(Z39,A40,B40):1
     [V>=W39+3,B40>=5,W39>=1,V1>=1,B40=Z39+4,B40=V16+4,A40=1,Y39=1,X39=0] 
* CE 269: start(V1,V,V16,V24,V32,V39) = 5+ fun1(W39,X39,Y39):4+ insert(V16,Z39,A40):2
     [V>=W39+Z39+2,Z39>=0,V16>=0,W39>=1,V1>=1,A40=0,Y39=1,X39=0] 
* CE 270: start(V1,V,V16,V24,V32,V39) = 5+ fun1(W39,X39,Y39):4+ insert(V16,Z39,A40):3
     [V+V16+1>=W39+A40,A40>=V16+6,A40>=8,V16>=1,W39>=1,V1>=1,A40=V16+Z39+3,Y39=1,X39=0] 
* CE 271: start(V1,V,V16,V24,V32,V39) = 5+ fun1(W39,X39,Y39):4+ insert(V16,Z39,A40):4
     [V+V16>=W39+A40+2,A40>=V16+2,V16>=1,W39>=1,V1>=1,A40=V16+Z39,Y39=1,X39=0] 
* CE 272: start(V1,V,V16,V24,V32,V39) = 5+ fun1(W39,X39,Y39):4+ insert(V16,Z39,A40):5
     [V>=W39+Z39+2,V16+A40>=4,Z39>=A40,A40>=2,V16>=1,W39>=1,V1>=1,Y39=1,X39=0] 
* CE 273: start(V1,V,V16,V24,V32,V39) = 5+ fun1(W39,X39,Y39):4+ insert(V16,Z39,A40):6
     [V16+Z39>=A40+1,V>=W39+Z39+2,A40>=Z39+1,Z39>=3,W39>=1,V1>=1,Y39=1,X39=0] 
* CE 274: start(V1,V,V16,V24,V32,V39) = 5+ fun1(W39,X39,Y39):6+ insert(Z39,A40,B40):1
     [V1>=X39+1,V>=W39+3,B40>=5,X39>=1,W39>=1,B40=Z39+4,B40=V16+4,A40=1,Y39=1] 
* CE 275: start(V1,V,V16,V24,V32,V39) = 5+ fun1(W39,X39,Y39):6+ insert(V16,Z39,A40):2
     [V>=W39+Z39+2,V1>=X39+1,Z39>=0,V16>=0,X39>=1,W39>=1,A40=0,Y39=1] 
* CE 276: start(V1,V,V16,V24,V32,V39) = 5+ fun1(W39,X39,Y39):6+ insert(V16,Z39,A40):3
     [V+V16+1>=W39+A40,A40>=V16+6,V1>=X39+1,A40>=8,V16>=1,X39>=1,W39>=1,A40=V16+Z39+3,Y39=1] 
* CE 277: start(V1,V,V16,V24,V32,V39) = 5+ fun1(W39,X39,Y39):6+ insert(V16,Z39,A40):4
     [V+V16>=W39+A40+2,A40>=V16+2,V1>=X39+1,V16>=1,X39>=1,W39>=1,A40=V16+Z39,Y39=1] 
* CE 278: start(V1,V,V16,V24,V32,V39) = 5+ fun1(W39,X39,Y39):6+ insert(V16,Z39,A40):5
     [V>=W39+Z39+2,V16+A40>=4,Z39>=A40,V1>=X39+1,A40>=2,V16>=1,X39>=1,W39>=1,Y39=1] 
* CE 279: start(V1,V,V16,V24,V32,V39) = 5+ fun1(W39,X39,Y39):6+ insert(V16,Z39,A40):6
     [V16+Z39>=A40+1,V>=W39+Z39+2,A40>=Z39+1,V1>=X39+1,Z39>=3,X39>=1,W39>=1,Y39=1] 
* CE 280: start(V1,V,V16,V24,V32,V39) = 4+ fun1(W39,V,X39):2+ insert(Y39,Z39,A40):1
     [A40>=5,V>=1,V16>=0,V1>=3,A40=Y39+4,A40=V24+4,Z39=1,X39=1,W39=0] 
* CE 281: start(V1,V,V16,V24,V32,V39) = 4+ fun1(W39,V,X39):2+ insert(V24,Y39,Z39):2
     [V1>=Y39+2,Y39>=0,V24>=0,V>=1,V16>=0,Z39=0,X39=1,W39=0] 
* CE 282: start(V1,V,V16,V24,V32,V39) = 4+ fun1(W39,V,X39):2+ insert(V24,Y39,Z39):3
     [V1+V24+1>=Z39,Z39>=V24+6,Z39>=8,V24>=1,V>=1,V16>=0,Z39=V24+Y39+3,X39=1,W39=0] 
* CE 283: start(V1,V,V16,V24,V32,V39) = 4+ fun1(W39,V,X39):2+ insert(V24,Y39,Z39):4
     [V1+V24>=Z39+2,Z39>=V24+2,V24>=1,V>=1,V16>=0,Z39=V24+Y39,X39=1,W39=0] 
* CE 284: start(V1,V,V16,V24,V32,V39) = 4+ fun1(W39,V,X39):2+ insert(V24,Y39,Z39):5
     [V24+Z39>=4,Y39>=Z39,V1>=Y39+2,Z39>=2,V24>=1,V>=1,V16>=0,X39=1,W39=0] 
* CE 285: start(V1,V,V16,V24,V32,V39) = 4+ fun1(W39,V,X39):2+ insert(V24,Y39,Z39):6
     [V24+Y39>=Z39+1,Z39>=Y39+1,V1>=Y39+2,Y39>=3,V>=1,V16>=0,X39=1,W39=0] 
* CE 286: start(V1,V,V16,V24,V32,V39) = 4+ fun1(W39,V,X39):3+ insert(Y39,Z39,A40):1
     [V1>=W39+3,A40>=5,V>=1,W39>=1,V16>=0,A40=Y39+4,A40=V24+4,Z39=1,X39=1] 
* CE 287: start(V1,V,V16,V24,V32,V39) = 4+ fun1(W39,V,X39):3+ insert(V24,Y39,Z39):2
     [V1>=W39+Y39+2,Y39>=0,V24>=0,V>=1,W39>=1,V16>=0,Z39=0,X39=1] 
* CE 288: start(V1,V,V16,V24,V32,V39) = 4+ fun1(W39,V,X39):3+ insert(V24,Y39,Z39):3
     [V1+V24+1>=W39+Z39,Z39>=V24+6,Z39>=8,V24>=1,V>=1,W39>=1,V16>=0,Z39=V24+Y39+3,X39=1] 
* CE 289: start(V1,V,V16,V24,V32,V39) = 4+ fun1(W39,V,X39):3+ insert(V24,Y39,Z39):4
     [V1+V24>=W39+Z39+2,Z39>=V24+2,V24>=1,V>=1,W39>=1,V16>=0,Z39=V24+Y39,X39=1] 
* CE 290: start(V1,V,V16,V24,V32,V39) = 4+ fun1(W39,V,X39):3+ insert(V24,Y39,Z39):5
     [V1>=W39+Y39+2,V24+Z39>=4,Y39>=Z39,Z39>=2,V24>=1,V>=1,W39>=1,V16>=0,X39=1] 
* CE 291: start(V1,V,V16,V24,V32,V39) = 4+ fun1(W39,V,X39):3+ insert(V24,Y39,Z39):6
     [V24+Y39>=Z39+1,V1>=W39+Y39+2,Z39>=Y39+1,Y39>=3,V>=1,W39>=1,V16>=0,X39=1] 
* CE 292: start(V1,V,V16,V24,V32,V39) = 4+ fun1(W39,X39,Y39):4+ insert(Z39,A40,B40):1
     [V1>=W39+3,B40>=5,W39>=1,V16>=0,B40=Z39+4,B40=V24+4,A40=1,Y39=1,X39=0,V=0] 
* CE 293: start(V1,V,V16,V24,V32,V39) = 4+ fun1(W39,X39,Y39):4+ insert(V24,Z39,A40):2
     [V1>=W39+Z39+2,Z39>=0,V24>=0,W39>=1,V16>=0,A40=0,Y39=1,X39=0,V=0] 
* CE 294: start(V1,V,V16,V24,V32,V39) = 4+ fun1(W39,X39,Y39):4+ insert(V24,Z39,A40):3
     [V1+V24+1>=W39+A40,A40>=V24+6,A40>=8,V24>=1,W39>=1,V16>=0,A40=V24+Z39+3,Y39=1,X39=0,V=0] 
* CE 295: start(V1,V,V16,V24,V32,V39) = 4+ fun1(W39,X39,Y39):4+ insert(V24,Z39,A40):4
     [V1+V24>=W39+A40+2,A40>=V24+2,V24>=1,W39>=1,V16>=0,A40=V24+Z39,Y39=1,X39=0,V=0] 
* CE 296: start(V1,V,V16,V24,V32,V39) = 4+ fun1(W39,X39,Y39):4+ insert(V24,Z39,A40):5
     [V1>=W39+Z39+2,V24+A40>=4,Z39>=A40,A40>=2,V24>=1,W39>=1,V16>=0,Y39=1,X39=0,V=0] 
* CE 297: start(V1,V,V16,V24,V32,V39) = 4+ fun1(W39,X39,Y39):4+ insert(V24,Z39,A40):6
     [V24+Z39>=A40+1,V1>=W39+Z39+2,A40>=Z39+1,Z39>=3,W39>=1,V16>=0,Y39=1,X39=0,V=0] 
* CE 298: start(V1,V,V16,V24,V32,V39) = 4+ fun1(W39,V,X39):6+ insert(Y39,Z39,A40):1
     [V1>=W39+3,A40>=5,V>=1,W39>=1,V16>=0,A40=Y39+4,A40=V24+4,Z39=1,X39=1] 
* CE 299: start(V1,V,V16,V24,V32,V39) = 4+ fun1(W39,V,X39):6+ insert(V24,Y39,Z39):2
     [V1>=W39+Y39+2,Y39>=0,V24>=0,V>=1,W39>=1,V16>=0,Z39=0,X39=1] 
* CE 300: start(V1,V,V16,V24,V32,V39) = 4+ fun1(W39,V,X39):6+ insert(V24,Y39,Z39):3
     [V1+V24+1>=W39+Z39,Z39>=V24+6,Z39>=8,V24>=1,V>=1,W39>=1,V16>=0,Z39=V24+Y39+3,X39=1] 
* CE 301: start(V1,V,V16,V24,V32,V39) = 4+ fun1(W39,V,X39):6+ insert(V24,Y39,Z39):4
     [V1+V24>=W39+Z39+2,Z39>=V24+2,V24>=1,V>=1,W39>=1,V16>=0,Z39=V24+Y39,X39=1] 
* CE 302: start(V1,V,V16,V24,V32,V39) = 4+ fun1(W39,V,X39):6+ insert(V24,Y39,Z39):5
     [V1>=W39+Y39+2,V24+Z39>=4,Y39>=Z39,Z39>=2,V24>=1,V>=1,W39>=1,V16>=0,X39=1] 
* CE 303: start(V1,V,V16,V24,V32,V39) = 4+ fun1(W39,V,X39):6+ insert(V24,Y39,Z39):6
     [V24+Y39>=Z39+1,V1>=W39+Y39+2,Z39>=Y39+1,Y39>=3,V>=1,W39>=1,V16>=0,X39=1] 
* CE 304: start(V1,V,V16,V24,V32,V39) = 5+ fun1(W39,X39,Y39):1
     [V16>=0,V>=2,V1>=1,Y39=2,X39=0,W39=0] 
* CE 305: start(V1,V,V16,V24,V32,V39) = 5+ fun1(W39,X39,Y39):3
     [V1>=X39+1,V>=W39+2,X39>=1,W39>=1,V16>=0,Y39=2] 
* CE 306: start(V1,V,V16,V24,V32,V39) = 4+ fun1(W39,X39,Y39):1
     [V24>=0,V16>=0,V1>=2,Y39=2,X39=0,W39=0,V=0] 
* CE 307: start(V1,V,V16,V24,V32,V39) = 4+ fun1(W39,V,X39):3
     [V1>=W39+2,V>=1,W39>=1,V24>=0,V16>=0,X39=2] 
* CE 308: start(V1,V,V16,V24,V32,V39) = 4+ fun1(W39,X39,Y39):1
     [V16>=0,V>=2,V1>=1,Y39=2,X39=0,W39=0] 
* CE 309: start(V1,V,V16,V24,V32,V39) = 4+ fun1(W39,X39,Y39):2
     [V1>=X39+1,X39>=1,V16>=0,V>=2,Y39=1,W39=0] 
* CE 310: start(V1,V,V16,V24,V32,V39) = 4+ fun1(W39,X39,Y39):3
     [V1>=X39+1,V>=W39+2,Y39>=0,X39>=1,W39>=1,V16>=0,2>=Y39] 
* CE 311: start(V1,V,V16,V24,V32,V39) = 4+ fun1(W39,X39,Y39):4
     [V>=W39+2,W39>=1,V16>=0,V1>=1,Y39=1,X39=0] 
* CE 312: start(V1,V,V16,V24,V32,V39) = 4+ fun1(W39,X39,Y39):5
     [V1>=X39+1,V>=W39+2,X39>=0,W39>=0,V16>=0,Y39=0] 
* CE 313: start(V1,V,V16,V24,V32,V39) = 4+ fun1(W39,X39,Y39):6
     [V1>=X39+1,V>=W39+2,X39>=1,W39>=1,V16>=0,Y39=1] 
* CE 314: start(V1,V,V16,V24,V32,V39) = 3+ fun1(W39,X39,Y39):1
     [V24>=0,V16>=0,V1>=2,Y39=2,X39=0,W39=0,V=0] 
* CE 315: start(V1,V,V16,V24,V32,V39) = 3+ fun1(W39,V,X39):2
     [V>=1,V24>=0,V16>=0,V1>=2,X39=1,W39=0] 
* CE 316: start(V1,V,V16,V24,V32,V39) = 3+ fun1(W39,V,X39):3
     [V1>=W39+2,X39>=0,V>=1,W39>=1,V24>=0,V16>=0,2>=X39] 
* CE 317: start(V1,V,V16,V24,V32,V39) = 3+ fun1(W39,X39,Y39):4
     [V1>=W39+2,W39>=1,V24>=0,V16>=0,Y39=1,X39=0,V=0] 
* CE 318: start(V1,V,V16,V24,V32,V39) = 3+ fun1(W39,V,X39):5
     [V1>=W39+2,V>=0,W39>=0,V24>=0,V16>=0,X39=0] 
* CE 319: start(V1,V,V16,V24,V32,V39) = 3+ fun1(W39,V,X39):6
     [V1>=W39+2,V>=1,W39>=1,V24>=0,V16>=0,X39=1] 
* CE 320: start(V1,V,V16,V24,V32,V39) = 2+ fun1(W39,X39,Y39):1
     [V32>=0,V24>=0,V16>=0,V1>=1,Y39=2,X39=0,W39=0,V=0] 
* CE 321: start(V1,V,V16,V24,V32,V39) = 2+ fun1(W39,V,X39):2
     [V>=1,V32>=0,V24>=0,V16>=0,V1>=1,X39=1,W39=0] 
* CE 322: start(V1,V,V16,V24,V32,V39) = 2+ fun1(W39,V,X39):3
     [V1>=W39+1,X39>=0,V>=1,W39>=1,V32>=0,V24>=0,V16>=0,2>=X39] 
* CE 323: start(V1,V,V16,V24,V32,V39) = 2+ fun1(W39,X39,Y39):4
     [V1>=W39+1,W39>=1,V32>=0,V24>=0,V16>=0,Y39=1,X39=0,V=0] 
* CE 324: start(V1,V,V16,V24,V32,V39) = 2+ fun1(W39,V,X39):5
     [V1>=W39+1,V>=0,W39>=0,V32>=0,V24>=0,V16>=0,X39=0] 
* CE 325: start(V1,V,V16,V24,V32,V39) = 2+ fun1(W39,V,X39):6
     [V1>=W39+1,V>=1,W39>=1,V32>=0,V24>=0,V16>=0,X39=1] 
* CE 326: start(V1,V,V16,V24,V32,V39) = 3+ fun1(W39,X39,Y39):1
     [V32>=0,V24>=0,V16>=0,V1>=1,Y39=2,X39=0,W39=0,V=0] 
* CE 327: start(V1,V,V16,V24,V32,V39) = 3+ fun1(W39,V,X39):3
     [V1>=W39+1,V>=1,W39>=1,V32>=0,V24>=0,V16>=0,X39=2] 
* CE 328: start(V1,V,V16,V24,V32,V39) = 3+ fun1(W39,V,X39):2+ insert(Y39,Z39,A40):1
     [A40>=5,V>=1,V24>=0,V1>=1,A40=Y39+4,A40=V32+4,Z39=1,X39=1,W39=0,V16=1] 
* CE 329: start(V1,V,V16,V24,V32,V39) = 3+ fun1(W39,V,X39):2+ insert(V32,V16,Y39):2
     [V16>=0,V32>=0,V>=1,V24>=0,V1>=1,Y39=0,X39=1,W39=0] 
* CE 330: start(V1,V,V16,V24,V32,V39) = 3+ fun1(W39,V,X39):2+ insert(V32,Y39,Z39):3
     [Z39>=V32+6,Z39>=8,V32>=1,V>=1,V24>=0,V1>=1,Z39=V32+Y39+3,Z39=V16+V32+3,X39=1,W39=0] 
* CE 331: start(V1,V,V16,V24,V32,V39) = 3+ fun1(W39,V,X39):2+ insert(V32,Y39,Z39):4
     [Z39>=V32+2,V32>=1,V>=1,V24>=0,V1>=1,Z39=V32+Y39,Z39=V16+V32,X39=1,W39=0] 
* CE 332: start(V1,V,V16,V24,V32,V39) = 3+ fun1(W39,V,X39):2+ insert(V32,V16,Y39):5
     [V32+Y39>=4,V16>=Y39,Y39>=2,V32>=1,V>=1,V24>=0,V1>=1,X39=1,W39=0] 
* CE 333: start(V1,V,V16,V24,V32,V39) = 3+ fun1(W39,V,X39):2+ insert(V32,V16,Y39):6
     [V16+V32>=Y39+1,Y39>=V16+1,V16>=3,V>=1,V24>=0,V1>=1,X39=1,W39=0] 
* CE 334: start(V1,V,V16,V24,V32,V39) = 3+ fun1(W39,V,X39):3+ insert(Y39,Z39,A40):1
     [V1>=W39+1,A40>=5,V>=1,W39>=1,V24>=0,A40=Y39+4,A40=V32+4,Z39=1,X39=1,V16=1] 
* CE 335: start(V1,V,V16,V24,V32,V39) = 3+ fun1(W39,V,X39):3+ insert(V32,V16,Y39):2
     [V1>=W39+1,V16>=0,V32>=0,V>=1,W39>=1,V24>=0,Y39=0,X39=1] 
* CE 336: start(V1,V,V16,V24,V32,V39) = 3+ fun1(W39,V,X39):3+ insert(V32,Y39,Z39):3
     [Z39>=V32+6,V1>=W39+1,Z39>=8,V32>=1,V>=1,W39>=1,V24>=0,Z39=V32+Y39+3,Z39=V16+V32+3,X39=1] 
* CE 337: start(V1,V,V16,V24,V32,V39) = 3+ fun1(W39,V,X39):3+ insert(V32,Y39,Z39):4
     [Z39>=V32+2,V1>=W39+1,V32>=1,V>=1,W39>=1,V24>=0,Z39=V32+Y39,Z39=V16+V32,X39=1] 
* CE 338: start(V1,V,V16,V24,V32,V39) = 3+ fun1(W39,V,X39):3+ insert(V32,V16,Y39):5
     [V32+Y39>=4,V16>=Y39,V1>=W39+1,Y39>=2,V32>=1,V>=1,W39>=1,V24>=0,X39=1] 
* CE 339: start(V1,V,V16,V24,V32,V39) = 3+ fun1(W39,V,X39):3+ insert(V32,V16,Y39):6
     [V16+V32>=Y39+1,Y39>=V16+1,V1>=W39+1,V16>=3,V>=1,W39>=1,V24>=0,X39=1] 
* CE 340: start(V1,V,V16,V24,V32,V39) = 3+ fun1(W39,X39,Y39):4+ insert(Z39,A40,B40):1
     [V1>=W39+1,B40>=5,W39>=1,V24>=0,B40=Z39+4,B40=V32+4,A40=1,Y39=1,X39=0,V16=1,V=0] 
* CE 341: start(V1,V,V16,V24,V32,V39) = 3+ fun1(W39,X39,Y39):4+ insert(V32,V16,Z39):2
     [V1>=W39+1,V16>=0,V32>=0,W39>=1,V24>=0,Z39=0,Y39=1,X39=0,V=0] 
* CE 342: start(V1,V,V16,V24,V32,V39) = 3+ fun1(W39,X39,Y39):4+ insert(V32,Z39,A40):3
     [A40>=V32+6,V1>=W39+1,A40>=8,V32>=1,W39>=1,V24>=0,A40=V32+Z39+3,A40=V16+V32+3,Y39=1,X39=0,V=0] 
* CE 343: start(V1,V,V16,V24,V32,V39) = 3+ fun1(W39,X39,Y39):4+ insert(V32,Z39,A40):4
     [A40>=V32+2,V1>=W39+1,V32>=1,W39>=1,V24>=0,A40=V32+Z39,A40=V16+V32,Y39=1,X39=0,V=0] 
* CE 344: start(V1,V,V16,V24,V32,V39) = 3+ fun1(W39,X39,Y39):4+ insert(V32,V16,Z39):5
     [V32+Z39>=4,V16>=Z39,V1>=W39+1,Z39>=2,V32>=1,W39>=1,V24>=0,Y39=1,X39=0,V=0] 
* CE 345: start(V1,V,V16,V24,V32,V39) = 3+ fun1(W39,X39,Y39):4+ insert(V32,V16,Z39):6
     [V16+V32>=Z39+1,Z39>=V16+1,V1>=W39+1,V16>=3,W39>=1,V24>=0,Y39=1,X39=0,V=0] 
* CE 346: start(V1,V,V16,V24,V32,V39) = 3+ fun1(W39,V,X39):6+ insert(Y39,Z39,A40):1
     [V1>=W39+1,A40>=5,V>=1,W39>=1,V24>=0,A40=Y39+4,A40=V32+4,Z39=1,X39=1,V16=1] 
* CE 347: start(V1,V,V16,V24,V32,V39) = 3+ fun1(W39,V,X39):6+ insert(V32,V16,Y39):2
     [V1>=W39+1,V16>=0,V32>=0,V>=1,W39>=1,V24>=0,Y39=0,X39=1] 
* CE 348: start(V1,V,V16,V24,V32,V39) = 3+ fun1(W39,V,X39):6+ insert(V32,Y39,Z39):3
     [Z39>=V32+6,V1>=W39+1,Z39>=8,V32>=1,V>=1,W39>=1,V24>=0,Z39=V32+Y39+3,Z39=V16+V32+3,X39=1] 
* CE 349: start(V1,V,V16,V24,V32,V39) = 3+ fun1(W39,V,X39):6+ insert(V32,Y39,Z39):4
     [Z39>=V32+2,V1>=W39+1,V32>=1,V>=1,W39>=1,V24>=0,Z39=V32+Y39,Z39=V16+V32,X39=1] 
* CE 350: start(V1,V,V16,V24,V32,V39) = 3+ fun1(W39,V,X39):6+ insert(V32,V16,Y39):5
     [V32+Y39>=4,V16>=Y39,V1>=W39+1,Y39>=2,V32>=1,V>=1,W39>=1,V24>=0,X39=1] 
* CE 351: start(V1,V,V16,V24,V32,V39) = 3+ fun1(W39,V,X39):6+ insert(V32,V16,Y39):6
     [V16+V32>=Y39+1,Y39>=V16+1,V1>=W39+1,V16>=3,V>=1,W39>=1,V24>=0,X39=1] 
* CE 352: start(V1,V,V16,V24,V32,V39) = 1+ insert(W39,X39,Y39):1
     [Y39>=5,V32>=0,V24>=0,V>=0,Y39=W39+4,Y39=V39+4,X39=1,V16=1,V1=1] 
* CE 353: start(V1,V,V16,V24,V32,V39) = 1+ insert(V39,V16,W39):2
     [V16>=0,V39>=0,V32>=0,V24>=0,V>=0,W39=0,V1=1] 
* CE 354: start(V1,V,V16,V24,V32,V39) = 1+ insert(V39,W39,X39):3
     [X39>=V39+6,X39>=8,V39>=1,V32>=0,V24>=0,V>=0,X39=V39+W39+3,X39=V16+V39+3,V1=1] 
* CE 355: start(V1,V,V16,V24,V32,V39) = 1+ insert(V39,W39,X39):4
     [X39>=V39+2,V39>=1,V32>=0,V24>=0,V>=0,X39=V39+W39,X39=V16+V39,V1=1] 
* CE 356: start(V1,V,V16,V24,V32,V39) = 1+ insert(V39,V16,W39):5
     [V39+W39>=4,V16>=W39,W39>=2,V39>=1,V32>=0,V24>=0,V>=0,V1=1] 
* CE 357: start(V1,V,V16,V24,V32,V39) = 1+ insert(V39,V16,W39):6
     [V16+V39>=W39+1,W39>=V16+1,V16>=3,V32>=0,V24>=0,V>=0,V1=1] 
* CE 358: start(V1,V,V16,V24,V32,V39) = 2+ quicksort(W39,X39):1+ sortAll(Y39,Z39):1
     [V1>=4,Z39=1,Y39=1,X39=1,W39=1] 
* CE 359: start(V1,V,V16,V24,V32,V39) = 2+ quicksort(W39,X39):1+ sortAll(Y39,Z39):2
     [V1>=Y39+3,Y39>=0,Z39=0,X39=1,W39=1] 
* CE 360: start(V1,V,V16,V24,V32,V39) = 2+ quicksort(W39,X39):1+ sortAll(Y39,Z39):3
     [Y39>=Z39,V1>=Y39+3,Z39>=2,X39=1,W39=1] 
* CE 361: start(V1,V,V16,V24,V32,V39) = 2+ quicksort(W39,X39):1+ sortAll(Y39,Z39):4
     [V1>=Y39+3,Y39>=4,X39=1,W39=1] 
* CE 362: start(V1,V,V16,V24,V32,V39) = 2+ quicksort(W39,X39):1+ sortAll(Y39,Z39):5
     [V1>=Y39+3,Y39>=6,X39=1,W39=1] 
* CE 363: start(V1,V,V16,V24,V32,V39) = 2+ quicksort(W39,X39):2+ sortAll(Y39,Z39):1
     [V1>=W39+3,W39>=0,Z39=1,Y39=1,X39=0] 
* CE 364: start(V1,V,V16,V24,V32,V39) = 2+ quicksort(W39,X39):2+ sortAll(Y39,Z39):2
     [V1>=W39+Y39+2,Y39>=0,W39>=0,Z39=0,X39=0] 
* CE 365: start(V1,V,V16,V24,V32,V39) = 2+ quicksort(W39,X39):2+ sortAll(Y39,Z39):3
     [V1>=W39+Y39+2,Y39>=Z39,Z39>=2,W39>=0,X39=0] 
* CE 366: start(V1,V,V16,V24,V32,V39) = 2+ quicksort(W39,X39):2+ sortAll(Y39,Z39):4
     [V1>=W39+Y39+2,Y39>=4,W39>=0,X39=0] 
* CE 367: start(V1,V,V16,V24,V32,V39) = 2+ quicksort(W39,X39):2+ sortAll(Y39,Z39):5
     [V1>=W39+Y39+2,Y39>=6,W39>=0,X39=0] 
* CE 368: start(V1,V,V16,V24,V32,V39) = 2+ quicksort(W39,X39):3
     [V1>=W39+Y39+2,Y39>=0,X39>=0,W39>=2] 
* CE 369: start(V1,V,V16,V24,V32,V39) = 2+ quicksort(W39,X39):4
     [V1>=W39+Y39+2,Y39>=0,X39>=0,W39>=3] 
* CE 370: start(V1,V,V16,V24,V32,V39) = 1+ quicksort(W39,X39):1+ sortAll(Y39,Z39):1
     [V1>=2,Z39=1,Y39=1,X39=1,W39=1,V=1] 
* CE 371: start(V1,V,V16,V24,V32,V39) = 1+ quicksort(W39,X39):1+ sortAll(V,Y39):2
     [V>=0,V1>=2,Y39=0,X39=1,W39=1] 
* CE 372: start(V1,V,V16,V24,V32,V39) = 1+ quicksort(W39,X39):1+ sortAll(V,Y39):3
     [V>=Y39,Y39>=2,V1>=2,X39=1,W39=1] 
* CE 373: start(V1,V,V16,V24,V32,V39) = 1+ quicksort(W39,X39):1+ sortAll(V,Y39):4
     [V>=4,V1>=2,X39=1,W39=1] 
* CE 374: start(V1,V,V16,V24,V32,V39) = 1+ quicksort(W39,X39):1+ sortAll(V,Y39):5
     [V>=6,V1>=2,X39=1,W39=1] 
* CE 375: start(V1,V,V16,V24,V32,V39) = 1+ quicksort(W39,X39):2+ sortAll(Y39,Z39):1
     [V1>=W39+1,W39>=0,Z39=1,Y39=1,X39=0,V=1] 
* CE 376: start(V1,V,V16,V24,V32,V39) = 1+ quicksort(W39,X39):2+ sortAll(V,Y39):2
     [V1>=W39+1,V>=0,W39>=0,Y39=0,X39=0] 
* CE 377: start(V1,V,V16,V24,V32,V39) = 1+ quicksort(W39,X39):2+ sortAll(V,Y39):3
     [V>=Y39,V1>=W39+1,Y39>=2,W39>=0,X39=0] 
* CE 378: start(V1,V,V16,V24,V32,V39) = 1+ quicksort(W39,X39):2+ sortAll(V,Y39):4
     [V1>=W39+1,V>=4,W39>=0,X39=0] 
* CE 379: start(V1,V,V16,V24,V32,V39) = 1+ quicksort(W39,X39):2+ sortAll(V,Y39):5
     [V1>=W39+1,V>=6,W39>=0,X39=0] 
* CE 380: start(V1,V,V16,V24,V32,V39) = 1+ quicksort(W39,X39):3
     [V1>=W39+1,X39>=0,W39>=2,V>=0] 
* CE 381: start(V1,V,V16,V24,V32,V39) = 1+ quicksort(W39,X39):4
     [V1>=W39+1,X39>=0,W39>=3,V>=0] 
* CE 382: start(V1,V,V16,V24,V32,V39) = 2+ splitqs(W39,X39,Y39):2+ quicksort(Z39,A40):1+ quicksort(X39,B40):2+ append(C40,D40,E40):1
     [X39>=2,X39+2=Y39,X39+1=V1,E40=1,D40=1,C40=1,B40=0,A40=1,Z39=1,W39=0] 
* CE 383: start(V1,V,V16,V24,V32,V39) = 2+ splitqs(W39,X39,Y39):2+ quicksort(Z39,A40):1+ quicksort(X39,B40):2+ append(C40,D40,E40):2
     [X39>=2,X39+2=Y39,X39+1=V1,E40=0,D40=1,C40=1,B40=0,A40=1,Z39=1,W39=0] 
* CE 384: start(V1,V,V16,V24,V32,V39) = 2+ splitqs(W39,X39,Y39):2+ quicksort(Z39,A40):1+ quicksort(X39,B40):2+ append(C40,D40,E40):4
     [X39>=2,X39+2=Y39,X39+1=V1,E40=1,D40=1,C40=1,B40=0,A40=1,Z39=1,W39=0] 
* CE 385: start(V1,V,V16,V24,V32,V39) = 2+ splitqs(W39,X39,Y39):2+ quicksort(Z39,A40):1+ quicksort(X39,B40):3
     [B40>=0,X39>=2,B40+1=C40,X39+2=Y39,X39+1=V1,D40=1,A40=1,Z39=1,W39=0] 
* CE 386: start(V1,V,V16,V24,V32,V39) = 2+ splitqs(W39,X39,Y39):2+ quicksort(Z39,A40):1+ quicksort(X39,B40):4
     [B40>=0,X39>=3,B40+1=C40,X39+2=Y39,X39+1=V1,D40=1,A40=1,Z39=1,W39=0] 
* CE 387: start(V1,V,V16,V24,V32,V39) = 2+ splitqs(W39,X39,Y39):2+ quicksort(X39,Z39):2+ quicksort(A40,B40):1+ append(C40,D40,E40):2
     [X39>=2,X39+2=Y39,X39+1=V1,E40=0,D40=2,C40=0,B40=1,A40=1,Z39=0,W39=0] 
* CE 388: start(V1,V,V16,V24,V32,V39) = 2+ splitqs(W39,X39,Y39):2+ quicksort(Z39,A40):2+ quicksort(B40,C40):2+ append(D40,E40,F40):2
     [Z39+B40>=3,B40>=0,Z39>=0,Z39+B40+1=Y39,Z39+B40=X39+1,Z39+B40=V1,F40=0,E40=1,D40=0,C40=0,A40=0,W39=0] 
* CE 389: start(V1,V,V16,V24,V32,V39) = 2+ splitqs(W39,X39,Y39):2+ quicksort(Z39,A40):2+ quicksort(B40,C40):3
     [Z39+B40>=3,C40>=0,B40>=2,Z39>=0,Z39+B40+1=Y39,Z39+B40=X39+1,Z39+B40=V1,C40+1=D40,E40=0,A40=0,W39=0] 
* CE 390: start(V1,V,V16,V24,V32,V39) = 2+ splitqs(W39,X39,Y39):2+ quicksort(Z39,A40):2+ quicksort(B40,C40):4
     [C40>=0,B40>=3,Z39>=0,Z39+B40+1=Y39,Z39+B40=X39+1,Z39+B40=V1,C40+1=D40,E40=0,A40=0,W39=0] 
* CE 391: start(V1,V,V16,V24,V32,V39) = 2+ splitqs(W39,X39,Y39):2+ quicksort(Z39,A40):3
     [Y39>=Z39+1,A40>=0,Z39>=2,Y39>=4,Z39+B40+1=Y39,C40=D40+1,Y39=X39+2,Y39=V1+1,W39=0] 
* CE 392: start(V1,V,V16,V24,V32,V39) = 2+ splitqs(W39,X39,Y39):2+ quicksort(Z39,A40):4
     [Y39>=Z39+1,A40>=0,Z39>=3,Z39+B40+1=Y39,C40=D40+1,Y39=X39+2,Y39=V1+1,W39=0] 
* CE 393: start(V1,V,V16,V24,V32,V39) = 2+ splitqs(W39,X39,Y39):3+ quicksort(Z39,A40):1+ quicksort(B40,C40):1+ append(D40,V1,V1):1
     [V1>=2,V1=W39+2,D40=1,C40=1,B40=1,A40=1,Z39=1,Y39=3,X39=1] 
* CE 394: start(V1,V,V16,V24,V32,V39) = 2+ splitqs(W39,X39,Y39):3+ quicksort(Z39,A40):1+ quicksort(B40,C40):1+ append(D40,V1,E40):2
     [V1>=2,V1=W39+2,E40=0,D40=1,C40=1,B40=1,A40=1,Z39=1,Y39=3,X39=1] 
* CE 395: start(V1,V,V16,V24,V32,V39) = 2+ splitqs(W39,X39,Y39):3+ quicksort(Z39,A40):1+ quicksort(B40,C40):1+ append(D40,V1,E40):4
     [V1>=2,V1=W39+2,E40=1,D40=1,C40=1,B40=1,A40=1,Z39=1,Y39=3,X39=1] 
* CE 396: start(V1,V,V16,V24,V32,V39) = 2+ splitqs(W39,X39,Y39):3+ quicksort(Z39,A40):1+ quicksort(B40,C40):2+ append(D40,E40,E40):1
     [E40>=1,E40=W39+1,E40+1=V1,D40=1,C40=0,B40=1,A40=1,Z39=1,Y39=3,X39=1] 
* CE 397: start(V1,V,V16,V24,V32,V39) = 2+ splitqs(W39,X39,Y39):3+ quicksort(Z39,A40):1+ quicksort(B40,C40):2+ append(D40,E40,F40):2
     [E40>=1,E40=W39+1,E40+1=V1,F40=0,D40=1,C40=0,B40=1,A40=1,Z39=1,Y39=3,X39=1] 
* CE 398: start(V1,V,V16,V24,V32,V39) = 2+ splitqs(W39,X39,Y39):3+ quicksort(Z39,A40):1+ quicksort(B40,C40):2+ append(D40,E40,F40):4
     [E40>=1,E40=W39+1,E40+1=V1,F40=1,D40=1,C40=0,B40=1,A40=1,Z39=1,Y39=3,X39=1] 
* CE 399: start(V1,V,V16,V24,V32,V39) = 2+ splitqs(W39,X39,Y39):3+ quicksort(Z39,A40):2+ quicksort(B40,C40):1+ append(D40,V1,E40):2
     [V1>=2,V1=W39+2,E40=0,D40=0,C40=1,B40=1,A40=0,Z39=1,Y39=3,X39=1] 
* CE 400: start(V1,V,V16,V24,V32,V39) = 2+ splitqs(W39,X39,Y39):3+ quicksort(Z39,A40):2+ quicksort(B40,C40):2+ append(D40,E40,F40):2
     [E40>=1,B40>=0,2>=B40,Z39+B40=2,E40=W39+1,E40+1=V1,F40=0,D40=0,C40=0,A40=0,Y39=3,X39=1] 
* CE 401: start(V1,V,V16,V24,V32,V39) = 2+ splitqs(W39,X39,Y39):3+ quicksort(Z39,A40):2+ quicksort(B40,C40):3
     [C40>=0,W39>=0,W39+C40+1=D40,W39+2=V1,E40=0,B40=2,A40=0,Z39=0,Y39=3,X39=1] 
* CE 402: start(V1,V,V16,V24,V32,V39) = 2+ splitqs(W39,X39,Y39):3+ quicksort(Z39,A40):3
     [A40>=0,W39>=0,W39+B40+1=C40,W39+2=V1,D40=0,Z39=2,Y39=3,X39=1] 
* CE 403: start(V1,V,V16,V24,V32,V39) = 2+ splitqs(W39,X39,Y39):5+ quicksort(Z39,A40):1+ quicksort(X39,B40):2+ append(C40,D40,D40):1
     [D40>=2,X39>=2,X39+D40=V1,X39+2=Y39,D40=W39+1,C40=1,B40=0,A40=1,Z39=1] 
* CE 404: start(V1,V,V16,V24,V32,V39) = 2+ splitqs(W39,X39,Y39):5+ quicksort(Z39,A40):1+ quicksort(X39,B40):2+ append(C40,D40,E40):2
     [D40>=2,X39>=2,X39+D40=V1,X39+2=Y39,D40=W39+1,E40=0,C40=1,B40=0,A40=1,Z39=1] 
* CE 405: start(V1,V,V16,V24,V32,V39) = 2+ splitqs(W39,X39,Y39):5+ quicksort(Z39,A40):1+ quicksort(X39,B40):2+ append(C40,D40,E40):4
     [D40>=2,X39>=2,X39+D40=V1,X39+2=Y39,D40=W39+1,E40=1,C40=1,B40=0,A40=1,Z39=1] 
* CE 406: start(V1,V,V16,V24,V32,V39) = 2+ splitqs(W39,X39,Y39):5+ quicksort(Z39,A40):1+ quicksort(X39,B40):3
     [B40>=0,X39>=2,W39>=1,W39+B40+1=C40,W39+X39+1=V1,X39+2=Y39,D40=1,A40=1,Z39=1] 
* CE 407: start(V1,V,V16,V24,V32,V39) = 2+ splitqs(W39,X39,Y39):5+ quicksort(Z39,A40):1+ quicksort(X39,B40):4
     [B40>=0,X39>=3,W39>=1,W39+B40+1=C40,W39+X39+1=V1,X39+2=Y39,D40=1,A40=1,Z39=1] 
* CE 408: start(V1,V,V16,V24,V32,V39) = 2+ splitqs(W39,X39,Y39):5+ quicksort(X39,Z39):2+ quicksort(A40,B40):1+ append(C40,D40,E40):2
     [D40>=3,X39>=2,X39+D40=V1+1,X39+2=Y39,D40=W39+2,E40=0,C40=0,B40=1,A40=1,Z39=0] 
* CE 409: start(V1,V,V16,V24,V32,V39) = 2+ splitqs(W39,X39,Y39):5+ quicksort(Z39,A40):2+ quicksort(B40,C40):2+ append(D40,E40,F40):2
     [Z39+B40>=3,E40>=2,B40>=0,Z39>=0,Z39+B40+E40=V1+1,Z39+B40+1=Y39,Z39+B40=X39+1,E40=W39+1,F40=0,D40=0,C40=0,A40=0] 
* CE 410: start(V1,V,V16,V24,V32,V39) = 2+ splitqs(W39,X39,Y39):5+ quicksort(Z39,A40):2+ quicksort(B40,C40):3
     [Z39+B40>=3,C40>=0,B40>=2,Z39>=0,W39>=1,W39+Z39+B40=V1,W39+C40+1=D40,Z39+B40+1=Y39,Z39+B40=X39+1,E40=0,A40=0] 
* CE 411: start(V1,V,V16,V24,V32,V39) = 2+ splitqs(W39,X39,Y39):5+ quicksort(Z39,A40):2+ quicksort(B40,C40):4
     [C40>=0,B40>=3,Z39>=0,W39>=1,W39+Z39+B40=V1,W39+C40+1=D40,Z39+B40+1=Y39,Z39+B40=X39+1,E40=0,A40=0] 
* CE 412: start(V1,V,V16,V24,V32,V39) = 2+ splitqs(W39,X39,Y39):5+ quicksort(Z39,A40):3
     [Y39>=Z39+1,A40>=0,Z39>=2,Y39>=4,W39>=1,W39+B40+1=C40,Z39+D40+1=Y39,W39+Y39=V1+1,Y39=X39+2] 
* CE 413: start(V1,V,V16,V24,V32,V39) = 2+ splitqs(W39,X39,Y39):5+ quicksort(Z39,A40):4
     [Y39>=Z39+1,A40>=0,Z39>=3,W39>=1,W39+B40+1=C40,Z39+D40+1=Y39,W39+Y39=V1+1,Y39=X39+2] 
* CE 414: start(V1,V,V16,V24,V32,V39) = 1+ splitqs(W39,X39,Y39):1
     [X39>=0,W39>=0,W39+X39+1=V1,Y39=0] 
* CE 415: start(V1,V,V16,V24,V32,V39) = 1+ splitqs(W39,X39,Y39):2
     [Y39>=4,Y39=X39+2,Y39=V1+1,W39=0] 
* CE 416: start(V1,V,V16,V24,V32,V39) = 1+ splitqs(W39,X39,Y39):3
     [W39>=0,W39+2=V1,Y39=3,X39=1] 
* CE 417: start(V1,V,V16,V24,V32,V39) = 1+ splitqs(W39,X39,Y39):4
     [X39>=3,X39=W39+2,2*X39=V1+1,Y39=0] 
* CE 418: start(V1,V,V16,V24,V32,V39) = 1+ splitqs(W39,X39,Y39):5
     [Y39>=4,W39>=1,W39+Y39=V1+1,Y39=X39+2] 
* CE 419: start(V1,V,V16,V24,V32,V39) = 1+ quicksort(W39,X39):1+ quicksort(Y39,Z39):1+ append(A40,B40,B40):1
     [B40>=2,B40=V+2,A40=1,Z39=1,Y39=1,X39=1,W39=1,V1=3] 
* CE 420: start(V1,V,V16,V24,V32,V39) = 1+ quicksort(W39,X39):1+ quicksort(Y39,Z39):1+ append(A40,B40,C40):2
     [B40>=2,B40=V+2,C40=0,A40=1,Z39=1,Y39=1,X39=1,W39=1,V1=3] 
* CE 421: start(V1,V,V16,V24,V32,V39) = 1+ quicksort(W39,X39):1+ quicksort(Y39,Z39):1+ append(A40,B40,C40):4
     [B40>=2,B40=V+2,C40=1,A40=1,Z39=1,Y39=1,X39=1,W39=1,V1=3] 
* CE 422: start(V1,V,V16,V24,V32,V39) = 1+ quicksort(W39,X39):1+ quicksort(Y39,Z39):2+ append(A40,B40,B40):1
     [B40>=1,Y39>=0,B40=V+1,Y39+2=V1,A40=1,Z39=0,X39=1,W39=1] 
* CE 423: start(V1,V,V16,V24,V32,V39) = 1+ quicksort(W39,X39):1+ quicksort(Y39,Z39):2+ append(A40,B40,C40):2
     [B40>=1,Y39>=0,B40=V+1,Y39+2=V1,C40=0,A40=1,Z39=0,X39=1,W39=1] 
* CE 424: start(V1,V,V16,V24,V32,V39) = 1+ quicksort(W39,X39):1+ quicksort(Y39,Z39):2+ append(A40,B40,C40):4
     [B40>=1,Y39>=0,B40=V+1,Y39+2=V1,C40=1,A40=1,Z39=0,X39=1,W39=1] 
* CE 425: start(V1,V,V16,V24,V32,V39) = 1+ quicksort(W39,X39):1+ quicksort(Y39,Z39):3
     [Z39>=0,Y39>=2,V>=0,V+Z39+1=A40,Y39+2=V1,B40=1,X39=1,W39=1] 
* CE 426: start(V1,V,V16,V24,V32,V39) = 1+ quicksort(W39,X39):1+ quicksort(Y39,Z39):4
     [Z39>=0,Y39>=3,V>=0,V+Z39+1=A40,Y39+2=V1,B40=1,X39=1,W39=1] 
* CE 427: start(V1,V,V16,V24,V32,V39) = 1+ quicksort(W39,X39):2+ quicksort(Y39,Z39):1+ append(A40,B40,C40):2
     [B40>=2,W39>=0,B40=V+2,W39+2=V1,C40=0,A40=0,Z39=1,Y39=1,X39=0] 
* CE 428: start(V1,V,V16,V24,V32,V39) = 1+ quicksort(W39,X39):2+ quicksort(Y39,Z39):2+ append(A40,B40,C40):2
     [B40>=1,Y39>=0,W39>=0,W39+Y39+1=V1,B40=V+1,C40=0,A40=0,Z39=0,X39=0] 
* CE 429: start(V1,V,V16,V24,V32,V39) = 1+ quicksort(W39,X39):2+ quicksort(Y39,Z39):3
     [Z39>=0,Y39>=2,W39>=0,V>=0,V+Z39+1=A40,W39+Y39+1=V1,B40=0,X39=0] 
* CE 430: start(V1,V,V16,V24,V32,V39) = 1+ quicksort(W39,X39):2+ quicksort(Y39,Z39):4
     [Z39>=0,Y39>=3,W39>=0,V>=0,V+Z39+1=A40,W39+Y39+1=V1,B40=0,X39=0] 
* CE 431: start(V1,V,V16,V24,V32,V39) = 1+ quicksort(W39,X39):3
     [Y39>=0,X39>=0,W39>=2,V>=0,V+Z39+1=A40,W39+Y39+1=V1] 
* CE 432: start(V1,V,V16,V24,V32,V39) = 1+ quicksort(W39,X39):4
     [Y39>=0,X39>=0,W39>=3,V>=0,V+Z39+1=A40,W39+Y39+1=V1] 
* CE 433: start(V1,V,V16,V24,V32,V39) = 1+ splitqs(V,W39,X39):1+ fun16(Y39,V,Z39,A40):2
     [Z39>=0,V>=0,W39>=0,W39+Z39+1=V1,A40=0,Y39=0,X39=0] 
* CE 434: start(V1,V,V16,V24,V32,V39) = 1+ splitqs(W39,X39,Y39):2+ fun16(Z39,A40,B40,C40):1
     [C40>=5,C40=Z39+1,C40=Y39+1,C40=X39+3,C40=V1+2,B40=0,A40=0,W39=0,V=0] 
* CE 435: start(V1,V,V16,V24,V32,V39) = 1+ splitqs(W39,X39,Y39):2+ fun16(Y39,Z39,A40,B40):2
     [A40>=0,Y39>=4,Y39+A40=V1+1,Y39=X39+2,B40=0,Z39=0,W39=0,V=0] 
* CE 436: start(V1,V,V16,V24,V32,V39) = 1+ splitqs(W39,X39,Y39):2+ fun16(Y39,Z39,A40,B40):3
     [B40>=Y39+2,Y39>=4,B40=Y39+A40+1,Y39=X39+2,B40=V1+2,Z39=0,W39=0,V=0] 
* CE 437: start(V1,V,V16,V24,V32,V39) = 1+ splitqs(W39,X39,Y39):3+ fun16(Z39,A40,B40,C40):1
     [C40=4,B40=0,A40=0,Z39=3,Y39=3,X39=1,W39=0,V=0,V1=2] 
* CE 438: start(V1,V,V16,V24,V32,V39) = 1+ splitqs(V,W39,X39):3+ fun16(Y39,V,Z39,A40):2
     [Z39>=0,V>=0,Z39+2=V1,A40=0,Y39=3,X39=3,W39=1] 
* CE 439: start(V1,V,V16,V24,V32,V39) = 1+ splitqs(W39,X39,Y39):3+ fun16(Z39,A40,B40,C40):3
     [C40>=5,C40=B40+4,C40=V1+2,A40=0,Z39=3,Y39=3,X39=1,W39=0,V=0] 
* CE 440: start(V1,V,V16,V24,V32,V39) = 1+ splitqs(V,W39,X39):3+ fun16(Y39,V,Z39,A40):4
     [V>=1,A40=0,Z39=0,Y39=3,X39=3,W39=1,V1=2] 
* CE 441: start(V1,V,V16,V24,V32,V39) = 1+ splitqs(V,W39,X39):3+ fun16(Y39,V,Z39,A40):5
     [V>=1,A40=4,Z39=0,Y39=3,X39=3,W39=1,V1=2] 
* CE 442: start(V1,V,V16,V24,V32,V39) = 1+ splitqs(V,W39,X39):3+ fun16(Y39,V,V,Z39):6
     [V>=1,V+2=V1,Z39=0,Y39=3,X39=3,W39=1] 
* CE 443: start(V1,V,V16,V24,V32,V39) = 1+ splitqs(V,W39,X39):3+ fun16(Y39,V,Z39,A40):7
     [A40>=5,V>=1,A40=Z39+4,A40=V1+2,Y39=3,X39=3,W39=1] 
* CE 444: start(V1,V,V16,V24,V32,V39) = 1+ splitqs(V,W39,X39):4+ fun16(Y39,V,Z39,A40):2
     [Z39>=0,V>=1,V+Z39+3=V1,V+2=W39,A40=0,Y39=0,X39=0] 
* CE 445: start(V1,V,V16,V24,V32,V39) = 1+ splitqs(V,W39,X39):5+ fun16(X39,V,Y39,Z39):2
     [Y39>=0,V>=1,X39>=4,X39+Y39=V1+1,X39=W39+2,Z39=0] 
* CE 446: start(V1,V,V16,V24,V32,V39) = 1+ splitqs(V,W39,X39):5+ fun16(X39,V,Y39,Z39):4
     [V>=1,X39>=4,X39=W39+2,X39=V1+1,Z39=0,Y39=0] 
* CE 447: start(V1,V,V16,V24,V32,V39) = 1+ splitqs(V,W39,X39):5+ fun16(Y39,V,Z39,A40):5
     [A40>=5,V>=1,A40=Y39+1,A40=X39+1,A40=W39+3,A40=V1+2,Z39=0] 
* CE 448: start(V1,V,V16,V24,V32,V39) = 1+ splitqs(V,W39,X39):5+ fun16(X39,V,V,Y39):6
     [V>=1,X39>=4,V+X39=V1+1,X39=W39+2,Y39=0] 
* CE 449: start(V1,V,V16,V24,V32,V39) = 1+ splitqs(V,W39,X39):5+ fun16(X39,V,Y39,Z39):7
     [Z39>=X39+2,V>=1,X39>=4,Z39=X39+Y39+1,X39=W39+2,Z39=V1+2] 
* CE 450: start(V1,V,V16,V24,V32,V39) = 1+ append(W39,V,V):1
     [V>=0,V1>=2,W39=1] 
* CE 451: start(V1,V,V16,V24,V32,V39) = 1+ append(W39,V,X39):2
     [V1>=W39+1,V>=0,W39>=0,X39=0] 
* CE 452: start(V1,V,V16,V24,V32,V39) = 1+ append(W39,X39,Y39):3
     [Y39+1>=W39,V1>=W39+1,W39>=2,Y39+1=W39+X39,Y39+1=V+W39] 
* CE 453: start(V1,V,V16,V24,V32,V39) = 1+ append(W39,V,X39):4
     [W39>=X39,V1>=W39+1,X39>=1,V>=0] 
* CE 454: start(V1,V,V16,V24,V32,V39) = 1+ fun1(W39,X39,Y39):1
     [Y39=2,X39=0,W39=0,V=0,V1=0] 
* CE 455: start(V1,V,V16,V24,V32,V39) = 1+ fun1(W39,V,X39):2
     [V>=1,X39=1,W39=0,V1=0] 
* CE 456: start(V1,V,V16,V24,V32,V39) = 1+ fun1(V1,V,W39):3
     [W39>=0,V>=1,V1>=1,2>=W39] 
* CE 457: start(V1,V,V16,V24,V32,V39) = 1+ fun1(V1,W39,X39):4
     [V1>=1,X39=1,W39=0,V=0] 
* CE 458: start(V1,V,V16,V24,V32,V39) = 1+ fun1(V1,V,W39):5
     [V>=0,V1>=0,W39=0] 
* CE 459: start(V1,V,V16,V24,V32,V39) = 1+ fun1(V1,V,W39):6
     [V>=1,V1>=1,W39=1] 
* CE 460: start(V1,V,V16,V24,V32,V39) = 0+ fun2(W39,X39,Y39):1
     [Y39=1,X39=0,W39=0,V=0,V1=0] 
* CE 461: start(V1,V,V16,V24,V32,V39) = 0+ fun2(V1,V,W39):2
     [V>=0,V1>=0,W39=0] 
* CE 462: start(V1,V,V16,V24,V32,V39) = 0+ fun2(W39,V,X39):3
     [V>=1,X39=1,W39=0,V1=0] 
* CE 463: start(V1,V,V16,V24,V32,V39) = 0+ fun2(W39,V,X39):4
     [V>=1,X39=2,W39=0,V1=0] 
* CE 464: start(V1,V,V16,V24,V32,V39) = 0+ fun2(V1,W39,X39):5
     [V1>=1,X39=0,W39=0,V=0] 
* CE 465: start(V1,V,V16,V24,V32,V39) = 0+ fun2(V1,W39,X39):6
     [V1>=1,X39=1,W39=0,V=0] 
* CE 466: start(V1,V,V16,V24,V32,V39) = 0+ fun2(V1,W39,X39):7
     [V1>=1,X39=2,W39=0,V=0] 
* CE 467: start(A,A,B,C,D,E) = 0+ fun2(A,A,F):8
     [A>=1,F=0] 
* CE 468: start(V1,V,V16,V24,V32,V39) = 0+ fun2(V1,V,W39):9
     [V>=1,V1>=1,W39=1] 
* CE 469: start(V1,V,V16,V24,V32,V39) = 0+ fun2(V1,V,W39):10
     [V>=1,V1>=1,W39=2] 
* CE 470: start(V1,V,V16,V24,V32,V39) = 0+ append(W39,V,V):1
     [V>=0,W39=1,V1=1] 
* CE 471: start(V1,V,V16,V24,V32,V39) = 0+ append(V1,V,W39):2
     [V>=0,V1>=0,W39=0] 
* CE 472: start(V1,V,V16,V24,V32,V39) = 0+ append(V1,W39,X39):3
     [X39+1>=V1,V1>=2,X39+1=V1+W39,X39+1=V1+V] 
* CE 473: start(V1,V,V16,V24,V32,V39) = 0+ append(V1,V,W39):4
     [V1>=W39,W39>=1,V>=0] 
* CE 474: start(V1,V,V16,V24,V32,V39) = 0+ insert(W39,X39,Y39):1
     [Y39>=5,Y39=W39+4,Y39=V1+4,X39=1,V=1] 
* CE 475: start(V1,V,V16,V24,V32,V39) = 0+ insert(V1,V,W39):2
     [V>=0,V1>=0,W39=0] 
* CE 476: start(V1,V,V16,V24,V32,V39) = 0+ insert(V1,W39,X39):3
     [X39>=V1+6,X39>=8,V1>=1,X39=V1+W39+3,X39=V1+V+3] 
* CE 477: start(V1,V,V16,V24,V32,V39) = 0+ insert(V1,W39,X39):4
     [X39>=V1+2,V1>=1,X39=V1+W39,X39=V1+V] 
* CE 478: start(V1,V,V16,V24,V32,V39) = 0+ insert(V1,V,W39):5
     [V1+W39>=4,V>=W39,W39>=2,V1>=1] 
* CE 479: start(V1,V,V16,V24,V32,V39) = 0+ insert(V1,V,W39):6
     [V1+V>=W39+1,W39>=V+1,V>=3] 
* CE 480: start(V1,V,V16,V24,V32,V39) = 0+ quicksort(W39,X39):1
     [X39=1,W39=1,V1=1] 
* CE 481: start(V1,V,V16,V24,V32,V39) = 0+ quicksort(V1,W39):2
     [V1>=0,W39=0] 
* CE 482: start(V1,V,V16,V24,V32,V39) = 0+ quicksort(V1,W39):3
     [W39>=0,V1>=2] 
* CE 483: start(V1,V,V16,V24,V32,V39) = 0+ quicksort(V1,W39):4
     [W39>=0,V1>=3] 
* CE 484: start(V1,V,V16,V24,V32,V39) = 0+ sortAll(W39,X39):1
     [X39=1,W39=1,V1=1] 
* CE 485: start(V1,V,V16,V24,V32,V39) = 0+ sortAll(V1,W39):2
     [V1>=0,W39=0] 
* CE 486: start(V1,V,V16,V24,V32,V39) = 0+ sortAll(V1,W39):3
     [V1>=W39,W39>=2] 
* CE 487: start(V1,V,V16,V24,V32,V39) = 0+ sortAll(V1,W39):4
     [V1>=4] 
* CE 488: start(V1,V,V16,V24,V32,V39) = 0+ sortAll(V1,W39):5
     [V1>=6] 
* CE 489: start(V1,V,V16,V24,V32,V39) = 0+ split(W39,X39):1
     [X39=1,W39=1,V1=1] 
* CE 490: start(V1,V,V16,V24,V32,V39) = 0+ split(V1,W39):2
     [V1>=0,W39=0] 
* CE 491: start(V1,V,V16,V24,V32,V39) = 0+ split(W39,X39):3
     [X39>=5,X39=W39+2,X39=V1+2] 
* CE 492: start(V1,V,V16,V24,V32,V39) = 0+ split(V1,W39):4
     [V1+W39>=8,2*V1>=W39+1,W39>=2,V1>=5] 
* CE 493: start(V1,V,V16,V24,V32,V39) = 0+ splitAndSort(W39,X39):1
     [X39=1,W39=1,V1=1] 
* CE 494: start(V1,V,V16,V24,V32,V39) = 0+ splitAndSort(V1,W39):2
     [V1>=0,W39=0] 
* CE 495: start(V1,V,V16,V24,V32,V39) = 0+ splitAndSort(V1,W39):3
     [V1+2>=W39,W39>=2,V1>=3] 
* CE 496: start(V1,V,V16,V24,V32,V39) = 0+ splitAndSort(V1,W39):4
     [2*V1>=W39+1,W39>=2,V1>=5] 
* CE 497: start(V1,V,V16,V24,V32,V39) = 0+ splitAndSort(V1,W39):5
     [V1>=3] 
* CE 498: start(V1,V,V16,V24,V32,V39) = 0+ splitqs(V1,V,W39):1
     [V>=0,V1>=0,W39=0] 
* CE 499: start(V1,V,V16,V24,V32,V39) = 0+ splitqs(W39,X39,Y39):2
     [Y39>=4,Y39=X39+2,Y39=V+2,W39=0,V1=0] 
* CE 500: start(V1,V,V16,V24,V32,V39) = 0+ splitqs(V1,W39,X39):3
     [V1>=0,X39=3,W39=1,V=1] 
* CE 501: start(V1,V,V16,V24,V32,V39) = 0+ splitqs(W39,V,X39):4
     [V>=3,V=W39+2,V=V1+2,X39=0] 
* CE 502: start(V1,V,V16,V24,V32,V39) = 0+ splitqs(V1,W39,X39):5
     [X39>=4,V1>=1,X39=W39+2,X39=V+2] 
* CE 503: start(V1,V,V16,V24,V32,V39) = 0+ fun16(W39,X39,Y39,Z39):1
     [Z39>=2,Z39=W39+1,Z39=V1+1,Y39=0,X39=0,V16=0,V=0] 
* CE 504: start(V1,V,V16,V24,V32,V39) = 0+ fun16(V1,V,V16,W39):2
     [V16>=0,V>=0,V1>=0,W39=0] 
* CE 505: start(V1,V,V16,V24,V32,V39) = 0+ fun16(V1,W39,X39,Y39):3
     [Y39>=V1+2,V1>=1,Y39=V1+X39+1,Y39=V1+V16+1,W39=0,V=0] 
* CE 506: start(V1,V,V16,V24,V32,V39) = 0+ fun16(V1,V,W39,X39):4
     [V>=1,V1>=1,X39=0,W39=0,V16=0] 
* CE 507: start(V1,V,V16,V24,V32,V39) = 0+ fun16(W39,V,X39,Y39):5
     [Y39>=2,V>=1,Y39=W39+1,Y39=V1+1,X39=0,V16=0] 
* CE 508: start(A,B,B,C,D,E) = 0+ fun16(A,B,B,F):6
     [B>=1,A>=1,F=0] 
* CE 509: start(V1,V,V16,V24,V32,V39) = 0+ fun16(V1,V,W39,X39):7
     [X39>=V1+2,V>=1,V1>=1,X39=V1+W39+1,X39=V1+V16+1] 
* CE 510: start(V1,V,V16,V24,V32,V39) = 0+ fun17(W39,V,V16,X39,Y39):1
     [Y39>=V+V16+2,V16>=0,V>=0,Y39=V+V16+X39+2,Y39=V+V16+V24+2,W39=1,V1=1] 
* CE 511: start(V1,V,V16,V24,V32,V39) = 0+ fun17(W39,V,V16,X39,Y39):2
     [Y39>=V+V16+2,V16>=0,V>=0,Y39=V+V16+X39+2,Y39=V+V16+V24+2,W39=2,V1=2] 
* CE 512: start(V1,V,V16,V24,V32,V39) = 0+ fun17(V1,V,V16,V24,W39):3
     [V24>=0,V16>=0,V>=0,V1>=0,W39=0] 
* CE 513: start(V1,V,V16,V24,V32,V39) = 0+ fun18(W39,X39,Y39):1
     [Y39=1,X39=1,W39=1,V=1,V1=1] 
* CE 514: start(V1,V,V16,V24,V32,V39) = 0+ fun18(W39,X39,Y39):2
     [Y39=1,X39=2,W39=1,V=2,V1=1] 
* CE 515: start(V1,V,V16,V24,V32,V39) = 0+ fun18(W39,X39,Y39):3
     [Y39=1,X39=1,W39=2,V=1,V1=2] 
* CE 516: start(V1,V,V16,V24,V32,V39) = 0+ fun18(W39,X39,Y39):4
     [Y39=2,X39=2,W39=2,V=2,V1=2] 
* CE 517: start(V1,V,V16,V24,V32,V39) = 0+ fun18(V1,V,W39):5
     [V>=0,V1>=0,W39=0] 
* CE 518: start(V1,V,V16,V24,V32,V39) = 0+ fun3(W39,X39):1
     [X39=1,W39=1,V1=1] 
* CE 519: start(V1,V,V16,V24,V32,V39) = 0+ fun3(W39,X39):2
     [X39=2,W39=2,V1=2] 
* CE 520: start(V1,V,V16,V24,V32,V39) = 0+ fun3(W39,X39):3
     [X39=1,W39=3,V1=3] 
* CE 521: start(V1,V,V16,V24,V32,V39) = 0+ fun3(V1,W39):4
     [V1>=0,W39=0] 
* CE 522: start(V1,V,V16,V24,V32,V39) = 0+ fun4(W39,X39,Y39):1
     [Y39=1,X39=0,W39=0,V=0,V1=0] 
* CE 523: start(V1,V,V16,V24,V32,V39) = 0+ fun4(W39,V,X39):2
     [V>=1,X39=2,W39=0,V1=0] 
* CE 524: start(V1,V,V16,V24,V32,V39) = 0+ fun4(W39,V,X39):3
     [V>=1,X39=3,W39=0,V1=0] 
* CE 525: start(V1,V,V16,V24,V32,V39) = 0+ fun4(V1,W39,X39):4
     [V1>=1,X39=2,W39=0,V=0] 
* CE 526: start(V1,V,V16,V24,V32,V39) = 0+ fun4(V1,W39,X39):5
     [V1>=1,X39=3,W39=0,V=0] 
* CE 527: start(V1,V,V16,V24,V32,V39) = 0+ fun4(V1,V,W39):6
     [V>=0,V1>=0,W39=0] 
* CE 528: start(A,A,B,C,D,E) = 0+ fun4(A,A,F):7
     [A>=1,F=1] 
* CE 529: start(V1,V,V16,V24,V32,V39) = 0+ fun4(V1,V,W39):8
     [V>=1,V1>=1,W39=2] 
* CE 530: start(V1,V,V16,V24,V32,V39) = 0+ fun4(V1,V,W39):9
     [V>=1,V1>=1,W39=3] 
* CE 531: start(V1,V,V16,V24,V32,V39) = 0+ fun1(W39,X39,Y39):1
     [Y39=2,X39=0,W39=0,V=0,V1=0] 
* CE 532: start(V1,V,V16,V24,V32,V39) = 0+ fun1(W39,V,X39):2
     [V>=1,X39=1,W39=0,V1=0] 
* CE 533: start(V1,V,V16,V24,V32,V39) = 0+ fun1(V1,V,W39):3
     [W39>=0,V>=1,V1>=1,2>=W39] 
* CE 534: start(V1,V,V16,V24,V32,V39) = 0+ fun1(V1,W39,X39):4
     [V1>=1,X39=1,W39=0,V=0] 
* CE 535: start(V1,V,V16,V24,V32,V39) = 0+ fun1(V1,V,W39):5
     [V>=0,V1>=0,W39=0] 
* CE 536: start(V1,V,V16,V24,V32,V39) = 0+ fun1(V1,V,W39):6
     [V>=1,V1>=1,W39=1] 

### Cost equations --> "Loop" of start/6 
* CEs [508] --> Loop 156 
* CEs [467,528] --> Loop 157 
* CEs [501] --> Loop 158 
* CEs [442] --> Loop 159 
* CEs [328,334,346] --> Loop 160 
* CEs [506,507] --> Loop 161 
* CEs [370,375,474,500] --> Loop 162 
* CEs [340] --> Loop 163 
* CEs [292,293,294,295,296,297,306,314,317,320,323,326,341,342,343,344,345,434,435,436,439,457,464,465,466,503,505,525,526,534] --> Loop 164 
* CEs [419,420,421,520] --> Loop 165 
* CEs [437,440,441,511,515,516,519] --> Loop 166 
* CEs [352,353,354,355,356,357,470,480,484,489,493,510,513,514,518] --> Loop 167 
* CEs [455,462,463,499,523,524,532] --> Loop 168 
* CEs [239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,298,299,300,301,302,303,304,305,307,308,309,310,311,312,313,315,316,318,319,321,322,324,325,327,329,330,331,332,333,335,336,337,338,339,347,348,349,350,351,358,359,360,363,364,365,371,372,376,377,382,383,384,387,388,393,394,395,396,397,398,399,400,403,404,405,408,409,414,415,416,417,418,422,423,424,427,428,433,438,443,444,445,446,447,448,449,450,451,452,453,454,456,458,459,460,461,468,469,471,472,473,475,476,477,478,479,481,485,486,490,491,492,494,495,496,498,502,504,509,512,517,521,522,527,529,530,531,533,535,536] --> Loop 169 
* CEs [361,362,366,367,368,369,380,381,385,386,389,390,391,392,401,402,406,407,410,411,412,413,425,426,429,430,431,432,482,483,487,488,497] --> Loop 170 
* CEs [373,374,378,379] --> Loop 171 

#### Loops of start/6 
* Loop 156: start(A,B,B,C,D,E) [B>=1,A>=1] 
* Loop 157: start(A,A,B,C,D,E) [A>=1] 
* Loop 158: start(V1,V,V16,V24,V32,V39) [V1>=1,V1+2=V] 
* Loop 159: start(V1,V,V16,V24,V32,V39) [V1>=3,V1=V+2] 
* Loop 160: start(V1,V,V16,V24,V32,V39) [V32>=1,V24>=0,V>=1,V1>=1,V16=1] 
* Loop 161: start(V1,V,V16,V24,V32,V39) [V>=1,V1>=1,V16=0] 
* Loop 162: start(V1,V,V16,V24,V32,V39) [V1>=0,V=1] 
* Loop 163: start(V1,V,V16,V24,V32,V39) [V32>=1,V24>=0,V1>=2,V16=1,V=0] 
* Loop 164: start(V1,V,V16,V24,V32,V39) [V1>=1,V=0] 
* Loop 165: start(V1,V,V16,V24,V32,V39) [V1=3] 
* Loop 166: start(V1,V,V16,V24,V32,V39) [V1=2] 
* Loop 167: start(V1,V,V16,V24,V32,V39) [V1=1] 
* Loop 168: start(V1,V,V16,V24,V32,V39) [V>=1,V1=0] 
* Loop 169: start(V1,V,V16,V24,V32,V39) [V1>=0] 
* Loop 170: start(V1,V,V16,V24,V32,V39) [V1>=2] 
* Loop 171: start(V1,V,V16,V24,V32,V39) [V>=4,V1>=1] 

### Ranking functions of CR start(V1,V,V16,V24,V32,V39) 

#### Partial ranking functions of CR start(V1,V,V16,V24,V32,V39) 


### Resulting Chains:start(V1,V,V16,V24,V32,V39) 
* [171]...
* [170]...
* [169]
* [168]
* [167]
* [166]
* [165]
* [164]
* [163]
* [162]
* [161]
* [160]
* [159]
* [158]
* [157]
* [156]


### Merging Chains  start/6 into  External patterns of execution 
* [[168],[169]] --> 1 
* [[167]] --> 2 
* [[166]] --> 3 
* [[165]] --> 4 
* [[163],[164]] --> 5 
* [[162]] --> 6 
* [[161]] --> 7 
* [[160]] --> 8 
* [[158]] --> 9 
* [[157]] --> 10 
* [[159]] --> 11 
* [[156]] --> 12 
* [[171]] --> 13 
* [[170]] --> 14 


Computing Bounds
=====================================

#### Cost of loops [57] 

 * loop 57:append(V1,V,Out) -> [append(V1',V',Out')] 
2
#### Cost of phase [57]:append(V1,V,Out) -> [append(V1',V',Out')] 
2*it(57)+0
  Such that:it(57) =< V1
it(57) =< V1-V1'

#### Cost of phase [57]:append(V1,V,Out) -> [append(V1',V',Out')] 
2*it(57)+0
  Such that:it(57) =< V1
it(57) =< V1-V1'

#### Cost of chains of append(V1,V,Out):
* Chain [[57],56]: 2*it(57)+2
  Such that:it(57) =< -V+Out

  with precondition: [V+V1=Out+1,V1>=2,V>=0] 

* Chain [[57],55]: 2*it(57)+1
  Such that:it(57) =< Out

  with precondition: [V>=0,Out>=1,V1>=Out] 

* Chain [56]: 2
  with precondition: [V1=1,V=Out,V>=0] 

* Chain [55]: 1
  with precondition: [Out=0,V1>=0,V>=0] 


#### Cost of chains of fun18(V1,V,Out):
* Chain [62]: 0
  with precondition: [V1=1,V=1,Out=1] 

* Chain [61]: 0
  with precondition: [V1=1,V=2,Out=1] 

* Chain [60]: 0
  with precondition: [V1=2,V=1,Out=1] 

* Chain [59]: 0
  with precondition: [V1=2,V=2,Out=2] 

* Chain [58]: 0
  with precondition: [Out=0,V1>=0,V>=0] 


#### Cost of loops [63,64,65,66,67,68] 

 * loop 63:fun1(V1,V,Out) -> [fun1(V1',V',Out')] 
0
 * loop 64:fun1(V1,V,Out) -> [fun1(V1',V',Out'),fun1(V1'2,V'2,Out'2)] 
0
 * loop 65:fun1(V1,V,Out) -> [fun1(V1',V',Out'),fun1(V1'2,V'2,Out'2)] 
0
 * loop 66:fun1(V1,V,Out) -> [fun1(V1',V',Out'),fun1(V1'2,V'2,Out'2)] 
0
 * loop 67:fun1(V1,V,Out) -> [fun1(V1',V',Out'),fun1(V1'2,V'2,Out'2)] 
0
 * loop 68:fun1(V1,V,Out) -> [fun1(V1',V',Out'),fun1(V1'2,V'2,Out'2)] 
0
#### Cost of phase [63,64,65,66,67,68]:fun1(V1,V,Out) -> [] 
0
#### Cost of chains of fun1(V1,V,Out):
* Chain [74]: 0
  with precondition: [V1=0,V=0,Out=2] 

* Chain [73]: 0
  with precondition: [V1=0,Out=1,V>=1] 

* Chain [72]: 0
  with precondition: [V1=1,V=1,Out=2] 

* Chain [71]: 0
  with precondition: [V=0,Out=1,V1>=1] 

* Chain [70]: 0
  with precondition: [Out=0,V1>=0,V>=0] 

* Chain [69]: 0
  with precondition: [Out=1,V1>=1,V>=1] 

* Chain [multiple([63,64,65,66,67,68],[[74],[73],[72],[71],[70],[69]])]: 0
  with precondition: [2>=Out,V1>=1,V>=1,Out>=0] 


#### Cost of chains of fun17(V1,V,V16,V24,Out):
* Chain [77]: 1
  with precondition: [V1=1,V+V16+V24+2=Out,V>=0,V16>=0,V24>=0] 

* Chain [76]: 1
  with precondition: [V1=2,V+V16+V24+2=Out,V>=0,V16>=0,V24>=0] 

* Chain [75]: 0
  with precondition: [Out=0,V1>=0,V>=0,V16>=0,V24>=0] 


#### Cost of chains of fun3(V1,Out):
* Chain [81]: 0
  with precondition: [V1=1,Out=1] 

* Chain [80]: 0
  with precondition: [V1=2,Out=2] 

* Chain [79]: 0
  with precondition: [V1=3,Out=1] 

* Chain [78]: 0
  with precondition: [Out=0,V1>=0] 


#### Cost of loops [82,83] 

 * loop 82:fun4(V1,V,Out) -> [fun4(V1',V',Out')] 
0
 * loop 83:fun4(V1,V,Out) -> [fun4(V1',V',Out')] 
0
#### Cost of phase [82,83]:fun4(V1,V,Out) -> [fun4(V1',V',Out')] 
0
#### Cost of phase [82,83]:fun4(V1,V,Out) -> [fun4(V1',V',Out')] 
0
#### Cost of phase [82,83]:fun4(V1,V,Out) -> [fun4(V1',V',Out')] 
0
#### Cost of phase [82,83]:fun4(V1,V,Out) -> [fun4(V1',V',Out')] 
0
#### Cost of phase [82,83]:fun4(V1,V,Out) -> [fun4(V1',V',Out')] 
0
#### Cost of phase [82,83]:fun4(V1,V,Out) -> [fun4(V1',V',Out')] 
0
#### Cost of phase [82,83]:fun4(V1,V,Out) -> [fun4(V1',V',Out')] 
0
#### Cost of phase [82,83]:fun4(V1,V,Out) -> [fun4(V1',V',Out')] 
0
#### Cost of chains of fun4(V1,V,Out):
* Chain [[82,83],91]: 0
  with precondition: [Out=1,V=V1,V>=1] 

* Chain [[82,83],90]: 0
  with precondition: [Out=2,V1>=1,V>=1,V+V1>=3] 

* Chain [[82,83],89]: 0
  with precondition: [Out=3,V1>=1,V>=1,V+V1>=3] 

* Chain [[82,83],88]: 0
  with precondition: [Out=2,V1>=1,V>=1,V+V1>=3] 

* Chain [[82,83],87]: 0
  with precondition: [Out=3,V1>=1,V>=1,V+V1>=3] 

* Chain [[82,83],86]: 0
  with precondition: [Out=0,V1>=1,V>=1] 

* Chain [[82,83],85]: 0
  with precondition: [Out=2,V1>=2,V>=2] 

* Chain [[82,83],84]: 0
  with precondition: [Out=3,V1>=2,V>=2] 

* Chain [91]: 0
  with precondition: [V1=0,V=0,Out=1] 

* Chain [90]: 0
  with precondition: [V1=0,Out=2,V>=1] 

* Chain [89]: 0
  with precondition: [V1=0,Out=3,V>=1] 

* Chain [88]: 0
  with precondition: [V=0,Out=2,V1>=1] 

* Chain [87]: 0
  with precondition: [V=0,Out=3,V1>=1] 

* Chain [86]: 0
  with precondition: [Out=0,V1>=0,V>=0] 

* Chain [85]: 0
  with precondition: [Out=2,V1>=1,V>=1] 

* Chain [84]: 0
  with precondition: [Out=3,V1>=1,V>=1] 


#### Cost of chains of fun2(V1,V,Out):
* Chain [102]: 1
  with precondition: [Out=0,V1>=0,V>=0] 

* Chain [101]: 1
  with precondition: [V1=0,V=0,Out=1] 

* Chain [100]: 1
  with precondition: [V1=0,Out=0,V>=1] 

* Chain [99]: 1
  with precondition: [V1=0,Out=1,V>=1] 

* Chain [98]: 1
  with precondition: [V1=0,Out=2,V>=1] 

* Chain [97]: 1
  with precondition: [V=0,Out=0,V1>=1] 

* Chain [96]: 1
  with precondition: [V=0,Out=1,V1>=1] 

* Chain [95]: 1
  with precondition: [V=0,Out=2,V1>=1] 

* Chain [94]: 1
  with precondition: [Out=0,V1=V,V1>=1] 

* Chain [93]: 1
  with precondition: [Out=1,V1>=1,V>=1] 

* Chain [92]: 1
  with precondition: [Out=2,V1>=1,V>=1] 


#### Cost of chains of fun16(V1,V,V16,Out):
* Chain [110]: 2
  with precondition: [Out=0,V1>=0,V>=0,V16>=0] 

* Chain [109]: 3
  with precondition: [V=0,V16=0,V1+1=Out,V1>=1] 

* Chain [108]: 2
  with precondition: [V=0,Out=0,V1>=1,V16>=1] 

* Chain [107]: 3
  with precondition: [V=0,V1+V16+1=Out,V1>=1,V16>=1] 

* Chain [106]: 2
  with precondition: [V16=0,Out=0,V1>=1,V>=1] 

* Chain [105]: 3
  with precondition: [V16=0,V1+1=Out,V1>=1,V>=1] 

* Chain [104]: 2
  with precondition: [Out=0,V=V16,V1>=1,V>=1] 

* Chain [103]: 3
  with precondition: [V1+V16+1=Out,V1>=1,V>=1,V16>=1] 


#### Cost of loops [117,118] 

 * loop 117:splitqs(V1,V,Out) -> [splitqs(V1',V',Out')] 
5
 * loop 118:splitqs(V1,V,Out) -> [splitqs(V1',V',Out')] 
5
#### Cost of phase [117,118]:splitqs(V1,V,Out) -> [splitqs(V1',V',Out')] 
10*it(117)+0
  Such that:aux(31) =< V
aux(32) =< V-V'
it(117) =< aux(31)
it(117) =< aux(32)

#### Cost of loops [116] 

 * loop 116:splitqs(V1,V,Out) -> [splitqs(V1',V',Out')] 
4
#### Cost of phase [116]:splitqs(V1,V,Out) -> [splitqs(V1',V',Out')] 
4*it(116)+0
  Such that:it(116) =< V
it(116) =< V-V'

#### Cost of loops [113,114] 

 * loop 113:splitqs(V1,V,Out) -> [splitqs(V1',V',Out')] 
5
 * loop 114:splitqs(V1,V,Out) -> [splitqs(V1',V',Out')] 
5
#### Cost of phase [113,114]:splitqs(V1,V,Out) -> [splitqs(V1',V',Out')] 
5*it(113)+5*it(114)+0
  Such that:it(113) =< V/2
it(113) =< V/2-V'/2
aux(35) =< V
aux(36) =< V-V'
it(113) =< aux(35)
it(114) =< aux(35)
it(113) =< aux(36)
it(114) =< aux(36)

#### Cost of phase [116]:splitqs(V1,V,Out) -> [splitqs(V1',V',Out')] 
4*it(116)+0
  Such that:it(116) =< V
it(116) =< V-V'

#### Cost of phase [116]:splitqs(V1,V,Out) -> [splitqs(V1',V',Out')] 
4*it(116)+0
  Such that:it(116) =< V
it(116) =< V-V'

#### Cost of phase [116]:splitqs(V1,V,Out) -> [splitqs(V1',V',Out')] 
4*it(116)+0
  Such that:it(116) =< V
it(116) =< V-V'

#### Cost of phase [116]:splitqs(V1,V,Out) -> [splitqs(V1',V',Out')] 
4*it(116)+0
  Such that:it(116) =< V
it(116) =< V-V'

#### Cost of phase [116]:splitqs(V1,V,Out) -> [splitqs(V1',V',Out')] 
4*it(116)+0
  Such that:it(116) =< V
it(116) =< V-V'

#### Cost of chains of splitqs(V1,V,Out):
* Chain [[117,118],112]: 10*it(117)+2
  Such that:aux(33) =< Out
it(117) =< aux(33)

  with precondition: [V1=0,Out=V+2,Out>=4] 

* Chain [[116],[117,118],112]: 4*it(116)+10*it(117)+2
  Such that:aux(33) =< V+1
aux(34) =< V+2
aux(33) =< aux(34)
it(116) =< aux(34)
it(117) =< aux(33)

  with precondition: [V1=0,Out=0,V>=3] 

* Chain [[116],[113,114],112]: 5*it(113)+9*it(114)+2
  Such that:it(113) =< V/2+1/2
aux(38) =< V+2
it(113) =< aux(38)
it(114) =< aux(38)

  with precondition: [Out=0,V1>=1,V>=3] 

* Chain [[116],115,[113,114],112]: 5*it(113)+9*it(114)+6
  Such that:it(113) =< -V1/2+V/2
aux(39) =< -V1+V+1
it(113) =< aux(39)
it(114) =< aux(39)

  with precondition: [Out=0,V1>=1,V>=V1+4] 

* Chain [[116],115,112]: 4*it(116)+6
  Such that:it(116) =< -V1+V

  with precondition: [Out=0,V1>=1,V>=V1+3] 

* Chain [[116],112]: 4*it(116)+2
  Such that:it(116) =< V

  with precondition: [Out=0,V1>=0,V>=2] 

* Chain [[116],111]: 4*it(116)+1
  Such that:it(116) =< V

  with precondition: [Out=0,V1>=0,V>=1] 

* Chain [[113,114],112]: 5*it(113)+5*it(114)+2
  Such that:it(113) =< Out/2
aux(37) =< Out
it(113) =< aux(37)
it(114) =< aux(37)

  with precondition: [Out=V+2,V1>=1,Out>=4] 

* Chain [115,[113,114],112]: 5*it(113)+5*it(114)+6
  Such that:aux(37) =< -V1+V+1
it(113) =< -V1/2+V/2+1/2
it(113) =< aux(37)
it(114) =< aux(37)

  with precondition: [Out=0,V1>=1,V>=V1+3] 

* Chain [115,112]: 6
  with precondition: [Out=0,V1+2=V,V1>=1] 

* Chain [112]: 2
  with precondition: [V=1,Out=3,V1>=0] 

* Chain [111]: 1
  with precondition: [Out=0,V1>=0,V>=0] 


#### Cost of loops [123,124,126,130] 

 * loop 123:quicksort(V1,Out) -> [quicksort(V1',Out'),quicksort(V1'2,Out'2)] 
2*s(35)+6
 * loop 124:quicksort(V1,Out) -> [quicksort(V1',Out'),quicksort(V1'2,Out'2)] 
2*s(37)+7
 * loop 126:quicksort(V1,Out) -> [quicksort(V1',Out'),quicksort(V1'2,Out'2)] 
7
 * loop 130:quicksort(V1,Out) -> [quicksort(V1',Out'),quicksort(V1'2,Out'2)] 
6
#### Cost of phase [123,124,126,130]:quicksort(V1,Out) -> [] 
57*it(123)+10*it([131])+4*s(38)+15*s(41)+5*s(42)+23*s(43)+10*s(44)+0
  Such that:aux(48) =< 1
aux(52) =< V1
aux(53) =< V1+1
it(123) =< aux(52)
s(47) =< aux(52)* (1/2)
s(45) =< it(123)+it(123)+it(123)+it(123)+aux(53)
it([131]) =< it(123)+it(123)+it(123)+it(123)+aux(48)
s(45) =< it([131])*aux(53)
s(41) =< s(47)
s(41) =< aux(52)
s(46) =< aux(52)
s(42) =< s(47)
s(46) =< s(45)
s(43) =< s(45)
s(44) =< s(46)
s(42) =< s(45)

#### Cost of loops [119,120,121,122,125,127,128,129] 

 * loop 119:quicksort(V1,Out) -> [quicksort(V1',Out'),quicksort(V1'2,Out'2)] 
5*s(54)+5*s(55)+2*s(56)+6
  Such that:s(53) =< V1'+V1'2+1
s(54) =< V1'/2+V1'2/2+1/2
s(54) =< s(53)
s(55) =< s(53)

 * loop 120:quicksort(V1,Out) -> [quicksort(V1',Out'),quicksort(V1'2,Out'2)] 
5*s(62)+5*s(63)+2*s(64)+7
  Such that:s(61) =< V1'+V1'2+1
s(62) =< V1'/2+V1'2/2+1/2
s(62) =< s(61)
s(63) =< s(61)

 * loop 121:quicksort(V1,Out) -> [quicksort(V1',Out'),quicksort(V1'2,Out'2)] 
10*s(69)+2*s(70)+6
  Such that:s(68) =< V1+1
s(69) =< s(68)

 * loop 122:quicksort(V1,Out) -> [quicksort(V1',Out'),quicksort(V1'2,Out'2)] 
10*s(75)+2*s(76)+7
  Such that:s(74) =< V1+1
s(75) =< s(74)

 * loop 125:quicksort(V1,Out) -> [quicksort(V1',Out'),quicksort(V1'2,Out'2)] 
5*s(81)+5*s(82)+7
  Such that:s(80) =< V1'+V1'2+1
s(81) =< V1'/2+V1'2/2+1/2
s(81) =< s(80)
s(82) =< s(80)

 * loop 127:quicksort(V1,Out) -> [quicksort(V1',Out'),quicksort(V1'2,Out'2)] 
10*s(86)+7
  Such that:s(85) =< V1'+V1'2+1
s(86) =< s(85)

 * loop 128:quicksort(V1,Out) -> [quicksort(V1',Out'),quicksort(V1'2,Out'2)] 
5*s(91)+5*s(92)+6
  Such that:s(90) =< V1'+V1'2+1
s(91) =< V1'/2+V1'2/2+1/2
s(91) =< s(90)
s(92) =< s(90)

 * loop 129:quicksort(V1,Out) -> [quicksort(V1',Out'),quicksort(V1'2,Out'2)] 
10*s(96)+6
  Such that:s(95) =< V1'+V1'2+1
s(96) =< s(95)

#### Cost of phase [119,120,121,122,125,127,128,129]:quicksort(V1,Out) -> [] 
26*it(119)+26*it(121)+10*it([131])+31*s(40)+15*s(41)+5*s(42)+23*s(43)+10*s(44)+20*s(97)+20*s(98)+12*s(99)+40*s(105)+57*s(121)+10*s(122)+15*s(124)+5*s(125)+23*s(126)+10*s(127)+0
  Such that:aux(72) =< V1/3+1/3
aux(77) =< V1+1
aux(78) =< 2/3*V1
aux(79) =< 2/5*V1
it(121) =< aux(78)
it(119) =< aux(79)
aux(58) =< aux(77)
aux(54) =< aux(77)-1
it([131]) =< it(121)+it(121)+it(121)+it(121)+aux(77)
s(133) =< it(121)+it(121)+it(121)+it(121)+aux(77)
s(131) =< it(121)+it(121)+it(121)+it(121)+aux(77)
s(132) =< it(121)* (1/3)+it(121)* (1/3)+it(121)* (1/3)+it(121)* (1/3)+aux(72)
aux(71) =< it(121)+it(121)+it(121)+it(121)+aux(77)
it([multiple([123,124,126,130],[[],[132],[131]])]) =< it(121)+it(121)+it(121)+it(121)+aux(77)
s(45) =< it(121)+it(121)+it(121)+it(121)+aux(77)
s(133) =< it([multiple([123,124,126,130],[[],[132],[131]])])*aux(58)
s(131) =< it([multiple([123,124,126,130],[[],[132],[131]])])*aux(54)
aux(71) =< it([131])*aux(54)
s(45) =< it([131])*aux(58)
s(107) =< it(121)*aux(58)
aux(55) =< it(119)*aux(54)
s(47) =< aux(71)* (1/2)
s(97) =< aux(55)* (1/2)
s(41) =< s(47)
s(41) =< aux(71)
s(40) =< aux(71)
s(46) =< aux(71)
s(42) =< s(47)
s(46) =< s(45)
s(43) =< s(45)
s(44) =< s(46)
s(42) =< s(45)
s(121) =< s(131)
s(130) =< s(131)* (1/2)
s(128) =< s(121)+s(121)+s(121)+s(121)+s(133)
s(122) =< s(121)+s(121)+s(121)+s(121)+s(132)
s(128) =< s(122)*aux(77)
s(124) =< s(130)
s(124) =< s(131)
s(129) =< s(131)
s(125) =< s(130)
s(129) =< s(128)
s(126) =< s(128)
s(127) =< s(129)
s(125) =< s(128)
s(105) =< s(107)
s(97) =< aux(55)
s(98) =< aux(55)

#### Cost of chains of quicksort(V1,Out):
* Chain [multiple([123,124,126,130],[[],[132],[131]])]...: 57*it(123)+10*it([131])+4*s(38)+15*s(41)+5*s(42)+23*s(43)+10*s(44)+0
  Such that:aux(48) =< 1
aux(52) =< V1
aux(53) =< V1+1
it(123) =< aux(52)
s(47) =< aux(52)* (1/2)
s(45) =< it(123)+it(123)+it(123)+it(123)+aux(53)
it([131]) =< it(123)+it(123)+it(123)+it(123)+aux(48)
s(45) =< it([131])*aux(53)
s(41) =< s(47)
s(41) =< aux(52)
s(46) =< aux(52)
s(42) =< s(47)
s(46) =< s(45)
s(43) =< s(45)
s(44) =< s(46)
s(42) =< s(45)

  with precondition: [V1>=2,Out>=0] 

* Chain [multiple([119,120,121,122,125,127,128,129],[[],[multiple([123,124,126,130],[[],[132],[131]])],[132],[131]])]...: 26*it(119)+26*it(121)+10*it([131])+31*s(40)+15*s(41)+5*s(42)+23*s(43)+10*s(44)+20*s(97)+20*s(98)+12*s(99)+40*s(105)+57*s(121)+10*s(122)+15*s(124)+5*s(125)+23*s(126)+10*s(127)+0
  Such that:aux(72) =< V1/3+1/3
aux(77) =< V1+1
aux(78) =< 2/3*V1
aux(79) =< 2/5*V1
it(121) =< aux(78)
it(119) =< aux(79)
aux(58) =< aux(77)
aux(54) =< aux(77)-1
it([131]) =< it(121)+it(121)+it(121)+it(121)+aux(77)
s(133) =< it(121)+it(121)+it(121)+it(121)+aux(77)
s(131) =< it(121)+it(121)+it(121)+it(121)+aux(77)
s(132) =< it(121)* (1/3)+it(121)* (1/3)+it(121)* (1/3)+it(121)* (1/3)+aux(72)
aux(71) =< it(121)+it(121)+it(121)+it(121)+aux(77)
it([multiple([123,124,126,130],[[],[132],[131]])]) =< it(121)+it(121)+it(121)+it(121)+aux(77)
s(45) =< it(121)+it(121)+it(121)+it(121)+aux(77)
s(133) =< it([multiple([123,124,126,130],[[],[132],[131]])])*aux(58)
s(131) =< it([multiple([123,124,126,130],[[],[132],[131]])])*aux(54)
aux(71) =< it([131])*aux(54)
s(45) =< it([131])*aux(58)
s(107) =< it(121)*aux(58)
aux(55) =< it(119)*aux(54)
s(47) =< aux(71)* (1/2)
s(97) =< aux(55)* (1/2)
s(41) =< s(47)
s(41) =< aux(71)
s(40) =< aux(71)
s(46) =< aux(71)
s(42) =< s(47)
s(46) =< s(45)
s(43) =< s(45)
s(44) =< s(46)
s(42) =< s(45)
s(121) =< s(131)
s(130) =< s(131)* (1/2)
s(128) =< s(121)+s(121)+s(121)+s(121)+s(133)
s(122) =< s(121)+s(121)+s(121)+s(121)+s(132)
s(128) =< s(122)*aux(77)
s(124) =< s(130)
s(124) =< s(131)
s(129) =< s(131)
s(125) =< s(130)
s(129) =< s(128)
s(126) =< s(128)
s(127) =< s(129)
s(125) =< s(128)
s(105) =< s(107)
s(97) =< aux(55)
s(98) =< aux(55)

  with precondition: [V1>=3,Out>=0] 

* Chain [132]: 2
  with precondition: [V1=1,Out=1] 

* Chain [131]: 31*s(17)+15*s(18)+5*s(21)+23*s(27)+10*s(28)+8
  Such that:aux(45) =< V1
aux(46) =< V1+1
aux(47) =< V1/2
s(18) =< aux(47)
s(18) =< aux(45)
s(17) =< aux(45)
s(20) =< aux(45)
s(21) =< aux(47)
s(20) =< aux(46)
s(27) =< aux(46)
s(28) =< s(20)
s(21) =< aux(46)

  with precondition: [Out=0,V1>=0] 


#### Cost of loops [134] 

 * loop 134:sortAll(V1,Out) -> [sortAll(V1',Out')] 
20*s(145)+64*s(146)+11
  Such that:s(143) =< V1-V1'
s(144) =< V1/2-V1'/2
s(145) =< s(144)
s(145) =< s(143)
s(146) =< s(143)

#### Cost of phase [134]:sortAll(V1,Out) -> [sortAll(V1',Out')] 
11*it(134)+20*s(147)+64*s(148)+0
  Such that:aux(82) =< V1
aux(83) =< V1-V1'
aux(81) =< aux(82)
it(134) =< aux(82)
aux(81) =< aux(83)
it(134) =< aux(83)
s(150) =< aux(81)* (1/2)
s(147) =< s(150)
s(147) =< aux(81)
s(148) =< aux(81)

#### Cost of phase [134]:sortAll(V1,Out) -> [sortAll(V1',Out')] 
11*it(134)+20*s(147)+64*s(148)+0
  Such that:aux(82) =< V1
aux(83) =< V1-V1'
aux(81) =< aux(82)
it(134) =< aux(82)
aux(81) =< aux(83)
it(134) =< aux(83)
s(150) =< aux(81)* (1/2)
s(147) =< s(150)
s(147) =< aux(81)
s(148) =< aux(81)

#### Cost of phase [134]:sortAll(V1,Out) -> [sortAll(V1',Out')] 
11*it(134)+20*s(147)+64*s(148)+0
  Such that:aux(82) =< V1
aux(83) =< V1-V1'
aux(81) =< aux(82)
it(134) =< aux(82)
aux(81) =< aux(83)
it(134) =< aux(83)
s(150) =< aux(81)* (1/2)
s(147) =< s(150)
s(147) =< aux(81)
s(148) =< aux(81)

#### Cost of chains of sortAll(V1,Out):
* Chain [[134],136]: 75*it(134)+20*s(147)+2
  Such that:aux(84) =< V1
it(134) =< aux(84)
s(150) =< aux(84)* (1/2)
s(147) =< s(150)
s(147) =< aux(84)

  with precondition: [Out>=3,V1>=Out] 

* Chain [[134],135]: 75*it(134)+20*s(147)+2
  Such that:aux(85) =< V1
it(134) =< aux(85)
s(150) =< aux(85)* (1/2)
s(147) =< s(150)
s(147) =< aux(85)

  with precondition: [Out>=2,V1>=Out] 

* Chain [[134],133]...: 11*it(134)+20*s(147)+64*s(148)+57*s(154)+10*s(157)+15*s(158)+5*s(160)+23*s(161)+10*s(162)+16*s(163)+52*s(168)+10*s(172)+20*s(182)+15*s(183)+31*s(184)+5*s(186)+23*s(187)+10*s(188)+57*s(189)+10*s(192)+15*s(193)+5*s(195)+23*s(196)+10*s(197)+40*s(198)+20*s(199)+3
  Such that:s(151) =< 1
aux(88) =< V1
aux(89) =< 2*V1
s(154) =< aux(88)
s(155) =< aux(88)* (1/2)
s(156) =< s(154)+s(154)+s(154)+s(154)+aux(88)
s(157) =< s(154)+s(154)+s(154)+s(154)+s(151)
s(156) =< s(157)*aux(88)
s(158) =< s(155)
s(158) =< aux(88)
s(159) =< aux(88)
s(160) =< s(155)
s(159) =< s(156)
s(161) =< s(156)
s(162) =< s(159)
s(160) =< s(156)
s(168) =< aux(89)
s(170) =< aux(88)
s(171) =< aux(88)-1
s(172) =< s(168)+s(168)+s(168)+s(168)+aux(88)
s(173) =< s(168)+s(168)+s(168)+s(168)+aux(88)
s(174) =< s(168)+s(168)+s(168)+s(168)+aux(88)
s(175) =< s(168)* (1/3)+s(168)* (1/3)+s(168)* (1/3)+s(168)* (1/3)+aux(88)
s(176) =< s(168)+s(168)+s(168)+s(168)+aux(88)
s(177) =< s(168)+s(168)+s(168)+s(168)+aux(88)
s(178) =< s(168)+s(168)+s(168)+s(168)+aux(88)
s(173) =< s(177)*s(170)
s(174) =< s(177)*s(171)
s(176) =< s(172)*s(171)
s(178) =< s(172)*s(170)
s(179) =< s(168)*s(170)
s(180) =< s(168)*s(171)
s(181) =< s(176)* (1/2)
s(182) =< s(180)* (1/2)
s(183) =< s(181)
s(183) =< s(176)
s(184) =< s(176)
s(185) =< s(176)
s(186) =< s(181)
s(185) =< s(178)
s(187) =< s(178)
s(188) =< s(185)
s(186) =< s(178)
s(189) =< s(174)
s(190) =< s(174)* (1/2)
s(191) =< s(189)+s(189)+s(189)+s(189)+s(173)
s(192) =< s(189)+s(189)+s(189)+s(189)+s(175)
s(191) =< s(192)*aux(88)
s(193) =< s(190)
s(193) =< s(174)
s(194) =< s(174)
s(195) =< s(190)
s(194) =< s(191)
s(196) =< s(191)
s(197) =< s(194)
s(195) =< s(191)
s(198) =< s(179)
s(182) =< s(180)
s(199) =< s(180)
aux(81) =< aux(88)
it(134) =< aux(88)
aux(81) =< aux(89)
it(134) =< aux(89)
s(150) =< aux(81)* (1/2)
s(147) =< s(150)
s(147) =< aux(81)
s(148) =< aux(81)

  with precondition: [V1>=6] 

* Chain [136]: 2
  with precondition: [V1=1,Out=1] 

* Chain [135]: 2
  with precondition: [Out=0,V1>=0] 

* Chain [133]...: 57*s(154)+10*s(157)+15*s(158)+5*s(160)+23*s(161)+10*s(162)+16*s(163)+26*s(168)+26*s(169)+10*s(172)+20*s(182)+15*s(183)+31*s(184)+5*s(186)+23*s(187)+10*s(188)+57*s(189)+10*s(192)+15*s(193)+5*s(195)+23*s(196)+10*s(197)+40*s(198)+20*s(199)+3
  Such that:s(151) =< 1
s(164) =< V1/3
s(166) =< 2/3*V1
s(167) =< 2/5*V1
aux(87) =< V1
s(154) =< aux(87)
s(155) =< aux(87)* (1/2)
s(156) =< s(154)+s(154)+s(154)+s(154)+aux(87)
s(157) =< s(154)+s(154)+s(154)+s(154)+s(151)
s(156) =< s(157)*aux(87)
s(158) =< s(155)
s(158) =< aux(87)
s(159) =< aux(87)
s(160) =< s(155)
s(159) =< s(156)
s(161) =< s(156)
s(162) =< s(159)
s(160) =< s(156)
s(168) =< s(166)
s(169) =< s(167)
s(170) =< aux(87)
s(171) =< aux(87)-1
s(172) =< s(168)+s(168)+s(168)+s(168)+aux(87)
s(173) =< s(168)+s(168)+s(168)+s(168)+aux(87)
s(174) =< s(168)+s(168)+s(168)+s(168)+aux(87)
s(175) =< s(168)* (1/3)+s(168)* (1/3)+s(168)* (1/3)+s(168)* (1/3)+s(164)
s(176) =< s(168)+s(168)+s(168)+s(168)+aux(87)
s(177) =< s(168)+s(168)+s(168)+s(168)+aux(87)
s(178) =< s(168)+s(168)+s(168)+s(168)+aux(87)
s(173) =< s(177)*s(170)
s(174) =< s(177)*s(171)
s(176) =< s(172)*s(171)
s(178) =< s(172)*s(170)
s(179) =< s(168)*s(170)
s(180) =< s(169)*s(171)
s(181) =< s(176)* (1/2)
s(182) =< s(180)* (1/2)
s(183) =< s(181)
s(183) =< s(176)
s(184) =< s(176)
s(185) =< s(176)
s(186) =< s(181)
s(185) =< s(178)
s(187) =< s(178)
s(188) =< s(185)
s(186) =< s(178)
s(189) =< s(174)
s(190) =< s(174)* (1/2)
s(191) =< s(189)+s(189)+s(189)+s(189)+s(173)
s(192) =< s(189)+s(189)+s(189)+s(189)+s(175)
s(191) =< s(192)*aux(87)
s(193) =< s(190)
s(193) =< s(174)
s(194) =< s(174)
s(195) =< s(190)
s(194) =< s(191)
s(196) =< s(191)
s(197) =< s(194)
s(195) =< s(191)
s(198) =< s(179)
s(182) =< s(180)
s(199) =< s(180)

  with precondition: [V1>=4] 


#### Cost of loops [137,138] 

 * loop 137:insert(V1,V,Out) -> [insert(V1',V',Out')] 
6
 * loop 138:insert(V1,V,Out) -> [insert(V1',V',Out')] 
6
#### Cost of phase [137,138]:insert(V1,V,Out) -> [insert(V1',V',Out')] 
6*it(137)+6*it(138)+0
  Such that:it(138) =< V/3
it(138) =< V/3-V'/3
aux(91) =< V1/2+V/2
aux(92) =< V1/2+V/2-V1'/2-V'/2
aux(93) =< V
aux(94) =< V-V'
aux(95) =< V/2
aux(96) =< V/2-V'/2
it(137) =< aux(91)
it(138) =< aux(91)
it(137) =< aux(92)
it(138) =< aux(92)
it(137) =< aux(93)
it(138) =< aux(93)
it(137) =< aux(94)
it(138) =< aux(94)
it(137) =< aux(95)
it(138) =< aux(95)
it(137) =< aux(96)
it(138) =< aux(96)

#### Cost of phase [137,138]:insert(V1,V,Out) -> [insert(V1',V',Out')] 
6*it(137)+6*it(138)+0
  Such that:it(138) =< V/3
it(138) =< V/3-V'/3
aux(91) =< V1/2+V/2
aux(92) =< V1/2+V/2-V1'/2-V'/2
aux(93) =< V
aux(94) =< V-V'
aux(95) =< V/2
aux(96) =< V/2-V'/2
it(137) =< aux(91)
it(138) =< aux(91)
it(137) =< aux(92)
it(138) =< aux(92)
it(137) =< aux(93)
it(138) =< aux(93)
it(137) =< aux(94)
it(138) =< aux(94)
it(137) =< aux(95)
it(138) =< aux(95)
it(137) =< aux(96)
it(138) =< aux(96)

#### Cost of phase [137,138]:insert(V1,V,Out) -> [insert(V1',V',Out')] 
6*it(137)+6*it(138)+0
  Such that:it(138) =< V/3
it(138) =< V/3-V'/3
aux(91) =< V1/2+V/2
aux(92) =< V1/2+V/2-V1'/2-V'/2
aux(93) =< V
aux(94) =< V-V'
aux(95) =< V/2
aux(96) =< V/2-V'/2
it(137) =< aux(91)
it(138) =< aux(91)
it(137) =< aux(92)
it(138) =< aux(92)
it(137) =< aux(93)
it(138) =< aux(93)
it(137) =< aux(94)
it(138) =< aux(94)
it(137) =< aux(95)
it(138) =< aux(95)
it(137) =< aux(96)
it(138) =< aux(96)

#### Cost of phase [137,138]:insert(V1,V,Out) -> [insert(V1',V',Out')] 
6*it(137)+6*it(138)+0
  Such that:it(138) =< V/3
it(138) =< V/3-V'/3
aux(91) =< V1/2+V/2
aux(92) =< V1/2+V/2-V1'/2-V'/2
aux(93) =< V
aux(94) =< V-V'
aux(95) =< V/2
aux(96) =< V/2-V'/2
it(137) =< aux(91)
it(138) =< aux(91)
it(137) =< aux(92)
it(138) =< aux(92)
it(137) =< aux(93)
it(138) =< aux(93)
it(137) =< aux(94)
it(138) =< aux(94)
it(137) =< aux(95)
it(138) =< aux(95)
it(137) =< aux(96)
it(138) =< aux(96)

#### Cost of chains of insert(V1,V,Out):
* Chain [[137,138],142]: 6*it(137)+6*it(138)+3
  Such that:it(138) =< -V1/3+Out/3
aux(91) =< Out/2
aux(97) =< -V1+Out
aux(98) =< -V1/2+Out/2
it(137) =< aux(91)
it(138) =< aux(91)
it(137) =< aux(98)
it(138) =< aux(98)
it(137) =< aux(97)
it(138) =< aux(97)

  with precondition: [V+V1+3=Out,V1>=1,V>=3,V+V1>=5] 

* Chain [[137,138],141]: 6*it(137)+6*it(138)+5
  Such that:aux(91) =< V1/2+V/2
aux(93) =< V
aux(95) =< V/2
aux(94) =< Out
it(138) =< Out/3
aux(99) =< Out/2
it(137) =< aux(91)
it(138) =< aux(91)
it(137) =< aux(99)
it(138) =< aux(99)
it(137) =< aux(93)
it(138) =< aux(93)
it(137) =< aux(94)
it(138) =< aux(94)
it(137) =< aux(95)
it(138) =< aux(95)

  with precondition: [V1>=1,Out>=2,V>=Out,Out+V1>=4] 

* Chain [[137,138],140]: 6*it(137)+6*it(138)+6
  Such that:it(138) =< -V1/3+Out/3
aux(91) =< Out/2
aux(100) =< -V1+Out
aux(101) =< -V1/2+Out/2
it(137) =< aux(91)
it(138) =< aux(91)
it(137) =< aux(101)
it(138) =< aux(101)
it(137) =< aux(100)
it(138) =< aux(100)

  with precondition: [V+V1=Out,V1>=1,V>=4,V+V1>=6] 

* Chain [[137,138],139]: 6*it(137)+6*it(138)+6
  Such that:aux(91) =< V1/2+V/2
it(138) =< V/3
aux(102) =< V
aux(103) =< V/2
it(137) =< aux(91)
it(138) =< aux(91)
it(137) =< aux(103)
it(138) =< aux(103)
it(137) =< aux(102)
it(138) =< aux(102)

  with precondition: [V>=5,Out>=V+1,V+V1>=Out+1] 

* Chain [142]: 3
  with precondition: [V=1,V1+4=Out,V1>=1] 

* Chain [141]: 5
  with precondition: [Out=0,V1>=0,V>=0] 

* Chain [140]: 6
  with precondition: [V+V1=Out,V1>=1,V>=2] 

* Chain [139]: 6
  with precondition: [V>=3,Out>=V+1,V+V1>=Out+1] 


#### Cost of loops [145,146,147,148] 

 * loop 145:split(V1,Out) -> [split(V1',Out')] 
6*s(227)+6*s(228)+8
  Such that:s(224) =< V1/2+V1'/2
s(225) =< V1'
s(226) =< 2*V1'
s(227) =< 2/3*V1'
s(228) =< s(224)
s(227) =< s(224)
s(228) =< s(225)
s(227) =< s(225)
s(228) =< s(226)
s(227) =< s(226)

 * loop 146:split(V1,Out) -> [split(V1',Out')] 
6*s(237)+6*s(240)+7
  Such that:s(236) =< V1/2+V1'/2
s(237) =< 2/3*V1'
s(238) =< V1'
s(239) =< 2*V1'
s(240) =< s(236)
s(237) =< s(236)
s(240) =< s(238)
s(237) =< s(238)
s(240) =< s(239)
s(237) =< s(239)

 * loop 147:split(V1,Out) -> [split(V1',Out')] 
6*s(249)+6*s(250)+8
  Such that:s(246) =< V1/2+V1'/2
s(247) =< V1'
s(248) =< 2*V1'
s(249) =< 2/3*V1'
s(250) =< s(246)
s(249) =< s(246)
s(250) =< s(247)
s(249) =< s(247)
s(250) =< s(248)
s(249) =< s(248)

 * loop 148:split(V1,Out) -> [split(V1',Out')] 
6*s(259)+6*s(260)+5
  Such that:s(256) =< V1/2+V1'/2+1/2
s(257) =< V1'+1
s(258) =< 2*V1'+2
s(259) =< 2/3*V1'+2/3
s(260) =< s(256)
s(259) =< s(256)
s(260) =< s(257)
s(259) =< s(257)
s(260) =< s(258)
s(259) =< s(258)

#### Cost of phase [145,146,147,148]:split(V1,Out) -> [split(V1',Out')] 
28*it(145)+6*s(261)+6*s(262)+12*s(266)+12*s(267)+6*s(276)+6*s(277)+0
  Such that:aux(122) =< V1
aux(123) =< V1-V1'
it(145) =< aux(122)
it(145) =< aux(123)
aux(110) =< aux(122)+1/2
aux(118) =< aux(122)+1
aux(111) =< aux(122)-1/2
aux(107) =< aux(122)-3/2
s(265) =< it(145)*aux(122)
aux(120) =< it(145)*aux(110)
s(280) =< it(145)*aux(118)
aux(112) =< it(145)*aux(111)
aux(108) =< it(145)*aux(107)
s(276) =< aux(120)* (2/3)
s(278) =< aux(120)*2
s(266) =< aux(112)* (2/3)
s(268) =< aux(112)*2
s(261) =< aux(108)* (2/3)
s(263) =< aux(108)*2
s(277) =< s(280)
s(276) =< s(280)
s(277) =< aux(120)
s(276) =< aux(120)
s(277) =< s(278)
s(276) =< s(278)
s(267) =< aux(120)
s(266) =< aux(120)
s(267) =< aux(112)
s(266) =< aux(112)
s(267) =< s(268)
s(266) =< s(268)
s(262) =< s(265)
s(261) =< s(265)
s(262) =< aux(108)
s(261) =< aux(108)
s(262) =< s(263)
s(261) =< s(263)

#### Cost of loops [150] 

 * loop 150:split(V1,Out) -> [split(V1',Out')] 
7
#### Cost of phase [150]:split(V1,Out) -> [split(V1',Out')] 
7*it(150)+0
  Such that:it(150) =< V1
it(150) =< V1-V1'

#### Cost of phase [150]:split(V1,Out) -> [split(V1',Out')] 
7*it(150)+0
  Such that:it(150) =< V1
it(150) =< V1-V1'

#### Cost of phase [150]:split(V1,Out) -> [split(V1',Out')] 
7*it(150)+0
  Such that:it(150) =< V1
it(150) =< V1-V1'

#### Cost of phase [150]:split(V1,Out) -> [split(V1',Out')] 
7*it(150)+0
  Such that:it(150) =< V1
it(150) =< V1-V1'

#### Cost of chains of split(V1,Out):
* Chain [[150],[145,146,147,148],149,144]: 35*it(145)+6*s(261)+6*s(262)+12*s(266)+12*s(267)+6*s(276)+6*s(277)+7
  Such that:aux(125) =< V1
it(145) =< aux(125)
aux(110) =< aux(125)+1/2
aux(118) =< aux(125)+1
aux(111) =< aux(125)-1/2
aux(107) =< aux(125)-3/2
s(265) =< it(145)*aux(125)
aux(120) =< it(145)*aux(110)
s(280) =< it(145)*aux(118)
aux(112) =< it(145)*aux(111)
aux(108) =< it(145)*aux(107)
s(276) =< aux(120)* (2/3)
s(278) =< aux(120)*2
s(266) =< aux(112)* (2/3)
s(268) =< aux(112)*2
s(261) =< aux(108)* (2/3)
s(263) =< aux(108)*2
s(277) =< s(280)
s(276) =< s(280)
s(277) =< aux(120)
s(276) =< aux(120)
s(277) =< s(278)
s(276) =< s(278)
s(267) =< aux(120)
s(266) =< aux(120)
s(267) =< aux(112)
s(266) =< aux(112)
s(267) =< s(268)
s(266) =< s(268)
s(262) =< s(265)
s(261) =< s(265)
s(262) =< aux(108)
s(261) =< aux(108)
s(262) =< s(263)
s(261) =< s(263)

  with precondition: [Out=0,V1>=6] 

* Chain [[150],149,144]: 7*it(150)+7
  Such that:it(150) =< V1

  with precondition: [Out=0,V1>=4] 

* Chain [[150],144]: 7*it(150)+2
  Such that:it(150) =< V1

  with precondition: [Out=0,V1>=2] 

* Chain [[150],143]: 7*it(150)+1
  Such that:it(150) =< V1

  with precondition: [Out=0,V1>=1] 

* Chain [[145,146,147,148],149,144]: 28*it(145)+6*s(261)+6*s(262)+12*s(266)+12*s(267)+6*s(276)+6*s(277)+7
  Such that:aux(124) =< V1
it(145) =< aux(124)
aux(110) =< aux(124)+1/2
aux(118) =< aux(124)+1
aux(111) =< aux(124)-1/2
aux(107) =< aux(124)-3/2
s(265) =< it(145)*aux(124)
aux(120) =< it(145)*aux(110)
s(280) =< it(145)*aux(118)
aux(112) =< it(145)*aux(111)
aux(108) =< it(145)*aux(107)
s(276) =< aux(120)* (2/3)
s(278) =< aux(120)*2
s(266) =< aux(112)* (2/3)
s(268) =< aux(112)*2
s(261) =< aux(108)* (2/3)
s(263) =< aux(108)*2
s(277) =< s(280)
s(276) =< s(280)
s(277) =< aux(120)
s(276) =< aux(120)
s(277) =< s(278)
s(276) =< s(278)
s(267) =< aux(120)
s(266) =< aux(120)
s(267) =< aux(112)
s(266) =< aux(112)
s(267) =< s(268)
s(266) =< s(268)
s(262) =< s(265)
s(261) =< s(265)
s(262) =< aux(108)
s(261) =< aux(108)
s(262) =< s(263)
s(261) =< s(263)

  with precondition: [V1>=5,Out>=2,2*V1>=Out+1,Out+V1>=8] 

* Chain [149,144]: 7
  with precondition: [V1+2=Out,V1>=3] 

* Chain [144]: 2
  with precondition: [V1=1,Out=1] 

* Chain [143]: 1
  with precondition: [Out=0,V1>=0] 


#### Cost of chains of splitAndSort(V1,Out):
* Chain [155]: 84*s(305)+12*s(315)+24*s(317)+12*s(319)+12*s(321)+24*s(322)+12*s(323)+10
  Such that:aux(127) =< V1
s(305) =< aux(127)
s(306) =< aux(127)+1/2
s(307) =< aux(127)+1
s(308) =< aux(127)-1/2
s(309) =< aux(127)-3/2
s(310) =< s(305)*aux(127)
s(311) =< s(305)*s(306)
s(312) =< s(305)*s(307)
s(313) =< s(305)*s(308)
s(314) =< s(305)*s(309)
s(315) =< s(311)* (2/3)
s(316) =< s(311)*2
s(317) =< s(313)* (2/3)
s(318) =< s(313)*2
s(319) =< s(314)* (2/3)
s(320) =< s(314)*2
s(321) =< s(312)
s(315) =< s(312)
s(321) =< s(311)
s(315) =< s(311)
s(321) =< s(316)
s(315) =< s(316)
s(322) =< s(311)
s(317) =< s(311)
s(322) =< s(313)
s(317) =< s(313)
s(322) =< s(318)
s(317) =< s(318)
s(323) =< s(310)
s(319) =< s(310)
s(323) =< s(314)
s(319) =< s(314)
s(323) =< s(320)
s(319) =< s(320)

  with precondition: [Out=0,V1>=0] 

* Chain [154]: 5
  with precondition: [V1=1,Out=1] 

* Chain [153]: 150*s(345)+40*s(347)+10
  Such that:s(344) =< V1+2
s(345) =< s(344)
s(346) =< s(344)* (1/2)
s(347) =< s(346)
s(347) =< s(344)

  with precondition: [V1>=3,Out>=2,V1+2>=Out] 

* Chain [152]: 28*s(349)+6*s(359)+12*s(361)+6*s(363)+6*s(365)+12*s(366)+6*s(367)+150*s(369)+40*s(371)+10
  Such that:s(348) =< V1
s(368) =< 2*V1
s(369) =< s(368)
s(370) =< s(368)* (1/2)
s(371) =< s(370)
s(371) =< s(368)
s(349) =< s(348)
s(350) =< s(348)+1/2
s(351) =< s(348)+1
s(352) =< s(348)-1/2
s(353) =< s(348)-3/2
s(354) =< s(349)*s(348)
s(355) =< s(349)*s(350)
s(356) =< s(349)*s(351)
s(357) =< s(349)*s(352)
s(358) =< s(349)*s(353)
s(359) =< s(355)* (2/3)
s(360) =< s(355)*2
s(361) =< s(357)* (2/3)
s(362) =< s(357)*2
s(363) =< s(358)* (2/3)
s(364) =< s(358)*2
s(365) =< s(356)
s(359) =< s(356)
s(365) =< s(355)
s(359) =< s(355)
s(365) =< s(360)
s(359) =< s(360)
s(366) =< s(355)
s(361) =< s(355)
s(366) =< s(357)
s(361) =< s(357)
s(366) =< s(362)
s(361) =< s(362)
s(367) =< s(354)
s(363) =< s(354)
s(367) =< s(358)
s(363) =< s(358)
s(367) =< s(364)
s(363) =< s(364)

  with precondition: [V1>=5,Out>=2,2*V1>=Out+1] 

* Chain [151]...: 114*s(377)+20*s(380)+30*s(381)+10*s(383)+46*s(384)+20*s(385)+26*s(386)+26*s(387)+10*s(390)+20*s(400)+15*s(401)+31*s(402)+5*s(404)+23*s(405)+10*s(406)+57*s(407)+10*s(410)+15*s(411)+5*s(413)+23*s(414)+10*s(415)+40*s(416)+20*s(417)+64*s(418)+52*s(431)+10*s(434)+20*s(444)+15*s(445)+31*s(446)+5*s(448)+23*s(449)+10*s(450)+57*s(451)+10*s(454)+15*s(455)+5*s(457)+23*s(458)+10*s(459)+40*s(460)+20*s(461)+11*s(463)+20*s(465)+64*s(466)+56*s(469)+12*s(479)+24*s(481)+12*s(483)+12*s(485)+24*s(486)+12*s(487)+114*s(493)+20*s(496)+30*s(497)+10*s(499)+46*s(500)+20*s(501)+26*s(502)+26*s(503)+10*s(506)+20*s(516)+15*s(517)+31*s(518)+5*s(520)+23*s(521)+10*s(522)+57*s(523)+10*s(526)+15*s(527)+5*s(529)+23*s(530)+10*s(531)+40*s(532)+20*s(533)+52*s(567)+10*s(570)+20*s(580)+15*s(581)+31*s(582)+5*s(584)+23*s(585)+10*s(586)+57*s(587)+10*s(590)+15*s(591)+5*s(593)+23*s(594)+10*s(595)+40*s(596)+20*s(597)+11*s(599)+20*s(601)+64*s(602)+11
  Such that:s(421) =< 2*V1+4
s(557) =< 4*V1
s(373) =< V1/3+2/3
s(489) =< 2/3*V1
s(374) =< 2/3*V1+4/3
s(375) =< 2/5*V1+4/5
s(490) =< 4/3*V1
s(491) =< 4/5*V1
aux(128) =< 1
aux(129) =< V1
aux(130) =< V1+2
aux(131) =< 2*V1
s(377) =< aux(130)
s(378) =< aux(130)* (1/2)
s(379) =< s(377)+s(377)+s(377)+s(377)+aux(130)
s(380) =< s(377)+s(377)+s(377)+s(377)+aux(128)
s(379) =< s(380)*aux(130)
s(381) =< s(378)
s(381) =< aux(130)
s(382) =< aux(130)
s(383) =< s(378)
s(382) =< s(379)
s(384) =< s(379)
s(385) =< s(382)
s(383) =< s(379)
s(386) =< s(374)
s(387) =< s(375)
s(388) =< aux(130)
s(389) =< aux(130)-1
s(390) =< s(386)+s(386)+s(386)+s(386)+aux(130)
s(391) =< s(386)+s(386)+s(386)+s(386)+aux(130)
s(392) =< s(386)+s(386)+s(386)+s(386)+aux(130)
s(393) =< s(386)* (1/3)+s(386)* (1/3)+s(386)* (1/3)+s(386)* (1/3)+s(373)
s(394) =< s(386)+s(386)+s(386)+s(386)+aux(130)
s(395) =< s(386)+s(386)+s(386)+s(386)+aux(130)
s(396) =< s(386)+s(386)+s(386)+s(386)+aux(130)
s(391) =< s(395)*s(388)
s(392) =< s(395)*s(389)
s(394) =< s(390)*s(389)
s(396) =< s(390)*s(388)
s(397) =< s(386)*s(388)
s(398) =< s(387)*s(389)
s(399) =< s(394)* (1/2)
s(400) =< s(398)* (1/2)
s(401) =< s(399)
s(401) =< s(394)
s(402) =< s(394)
s(403) =< s(394)
s(404) =< s(399)
s(403) =< s(396)
s(405) =< s(396)
s(406) =< s(403)
s(404) =< s(396)
s(407) =< s(392)
s(408) =< s(392)* (1/2)
s(409) =< s(407)+s(407)+s(407)+s(407)+s(391)
s(410) =< s(407)+s(407)+s(407)+s(407)+s(393)
s(409) =< s(410)*aux(130)
s(411) =< s(408)
s(411) =< s(392)
s(412) =< s(392)
s(413) =< s(408)
s(412) =< s(409)
s(414) =< s(409)
s(415) =< s(412)
s(413) =< s(409)
s(416) =< s(397)
s(400) =< s(398)
s(417) =< s(398)
s(431) =< s(421)
s(434) =< s(431)+s(431)+s(431)+s(431)+aux(130)
s(435) =< s(431)+s(431)+s(431)+s(431)+aux(130)
s(436) =< s(431)+s(431)+s(431)+s(431)+aux(130)
s(437) =< s(431)* (1/3)+s(431)* (1/3)+s(431)* (1/3)+s(431)* (1/3)+aux(130)
s(438) =< s(431)+s(431)+s(431)+s(431)+aux(130)
s(439) =< s(431)+s(431)+s(431)+s(431)+aux(130)
s(440) =< s(431)+s(431)+s(431)+s(431)+aux(130)
s(435) =< s(439)*s(388)
s(436) =< s(439)*s(389)
s(438) =< s(434)*s(389)
s(440) =< s(434)*s(388)
s(441) =< s(431)*s(388)
s(442) =< s(431)*s(389)
s(443) =< s(438)* (1/2)
s(444) =< s(442)* (1/2)
s(445) =< s(443)
s(445) =< s(438)
s(446) =< s(438)
s(447) =< s(438)
s(448) =< s(443)
s(447) =< s(440)
s(449) =< s(440)
s(450) =< s(447)
s(448) =< s(440)
s(451) =< s(436)
s(452) =< s(436)* (1/2)
s(453) =< s(451)+s(451)+s(451)+s(451)+s(435)
s(454) =< s(451)+s(451)+s(451)+s(451)+s(437)
s(453) =< s(454)*aux(130)
s(455) =< s(452)
s(455) =< s(436)
s(456) =< s(436)
s(457) =< s(452)
s(456) =< s(453)
s(458) =< s(453)
s(459) =< s(456)
s(457) =< s(453)
s(460) =< s(441)
s(444) =< s(442)
s(461) =< s(442)
s(462) =< aux(130)
s(463) =< aux(130)
s(462) =< s(421)
s(463) =< s(421)
s(464) =< s(462)* (1/2)
s(465) =< s(464)
s(465) =< s(462)
s(466) =< s(462)
s(493) =< aux(131)
s(494) =< aux(131)* (1/2)
s(495) =< s(493)+s(493)+s(493)+s(493)+aux(131)
s(496) =< s(493)+s(493)+s(493)+s(493)+aux(128)
s(495) =< s(496)*aux(131)
s(497) =< s(494)
s(497) =< aux(131)
s(498) =< aux(131)
s(499) =< s(494)
s(498) =< s(495)
s(500) =< s(495)
s(501) =< s(498)
s(499) =< s(495)
s(502) =< s(490)
s(503) =< s(491)
s(504) =< aux(131)
s(505) =< aux(131)-1
s(506) =< s(502)+s(502)+s(502)+s(502)+aux(131)
s(507) =< s(502)+s(502)+s(502)+s(502)+aux(131)
s(508) =< s(502)+s(502)+s(502)+s(502)+aux(131)
s(509) =< s(502)* (1/3)+s(502)* (1/3)+s(502)* (1/3)+s(502)* (1/3)+s(489)
s(510) =< s(502)+s(502)+s(502)+s(502)+aux(131)
s(511) =< s(502)+s(502)+s(502)+s(502)+aux(131)
s(512) =< s(502)+s(502)+s(502)+s(502)+aux(131)
s(507) =< s(511)*s(504)
s(508) =< s(511)*s(505)
s(510) =< s(506)*s(505)
s(512) =< s(506)*s(504)
s(513) =< s(502)*s(504)
s(514) =< s(503)*s(505)
s(515) =< s(510)* (1/2)
s(516) =< s(514)* (1/2)
s(517) =< s(515)
s(517) =< s(510)
s(518) =< s(510)
s(519) =< s(510)
s(520) =< s(515)
s(519) =< s(512)
s(521) =< s(512)
s(522) =< s(519)
s(520) =< s(512)
s(523) =< s(508)
s(524) =< s(508)* (1/2)
s(525) =< s(523)+s(523)+s(523)+s(523)+s(507)
s(526) =< s(523)+s(523)+s(523)+s(523)+s(509)
s(525) =< s(526)*aux(131)
s(527) =< s(524)
s(527) =< s(508)
s(528) =< s(508)
s(529) =< s(524)
s(528) =< s(525)
s(530) =< s(525)
s(531) =< s(528)
s(529) =< s(525)
s(532) =< s(513)
s(516) =< s(514)
s(533) =< s(514)
s(469) =< aux(129)
s(470) =< aux(129)+1/2
s(471) =< aux(129)+1
s(472) =< aux(129)-1/2
s(473) =< aux(129)-3/2
s(474) =< s(469)*aux(129)
s(475) =< s(469)*s(470)
s(476) =< s(469)*s(471)
s(477) =< s(469)*s(472)
s(478) =< s(469)*s(473)
s(479) =< s(475)* (2/3)
s(480) =< s(475)*2
s(481) =< s(477)* (2/3)
s(482) =< s(477)*2
s(483) =< s(478)* (2/3)
s(484) =< s(478)*2
s(485) =< s(476)
s(479) =< s(476)
s(485) =< s(475)
s(479) =< s(475)
s(485) =< s(480)
s(479) =< s(480)
s(486) =< s(475)
s(481) =< s(475)
s(486) =< s(477)
s(481) =< s(477)
s(486) =< s(482)
s(481) =< s(482)
s(487) =< s(474)
s(483) =< s(474)
s(487) =< s(478)
s(483) =< s(478)
s(487) =< s(484)
s(483) =< s(484)
s(567) =< s(557)
s(570) =< s(567)+s(567)+s(567)+s(567)+aux(131)
s(571) =< s(567)+s(567)+s(567)+s(567)+aux(131)
s(572) =< s(567)+s(567)+s(567)+s(567)+aux(131)
s(573) =< s(567)* (1/3)+s(567)* (1/3)+s(567)* (1/3)+s(567)* (1/3)+aux(131)
s(574) =< s(567)+s(567)+s(567)+s(567)+aux(131)
s(575) =< s(567)+s(567)+s(567)+s(567)+aux(131)
s(576) =< s(567)+s(567)+s(567)+s(567)+aux(131)
s(571) =< s(575)*s(504)
s(572) =< s(575)*s(505)
s(574) =< s(570)*s(505)
s(576) =< s(570)*s(504)
s(577) =< s(567)*s(504)
s(578) =< s(567)*s(505)
s(579) =< s(574)* (1/2)
s(580) =< s(578)* (1/2)
s(581) =< s(579)
s(581) =< s(574)
s(582) =< s(574)
s(583) =< s(574)
s(584) =< s(579)
s(583) =< s(576)
s(585) =< s(576)
s(586) =< s(583)
s(584) =< s(576)
s(587) =< s(572)
s(588) =< s(572)* (1/2)
s(589) =< s(587)+s(587)+s(587)+s(587)+s(571)
s(590) =< s(587)+s(587)+s(587)+s(587)+s(573)
s(589) =< s(590)*aux(131)
s(591) =< s(588)
s(591) =< s(572)
s(592) =< s(572)
s(593) =< s(588)
s(592) =< s(589)
s(594) =< s(589)
s(595) =< s(592)
s(593) =< s(589)
s(596) =< s(577)
s(580) =< s(578)
s(597) =< s(578)
s(598) =< aux(131)
s(599) =< aux(131)
s(598) =< s(557)
s(599) =< s(557)
s(600) =< s(598)* (1/2)
s(601) =< s(600)
s(601) =< s(598)
s(602) =< s(598)

  with precondition: [V1>=3] 


#### Cost of chains of start(V1,V,V16,V24,V32,V39):
* Chain [171]...: 228*s(609)+40*s(612)+60*s(613)+20*s(615)+92*s(616)+40*s(617)+52*s(618)+52*s(619)+20*s(622)+40*s(632)+30*s(633)+62*s(634)+10*s(636)+46*s(637)+20*s(638)+114*s(639)+20*s(642)+30*s(643)+10*s(645)+46*s(646)+20*s(647)+80*s(648)+40*s(649)+64*s(650)+104*s(663)+20*s(666)+40*s(676)+30*s(677)+62*s(678)+10*s(680)+46*s(681)+20*s(682)+114*s(683)+20*s(686)+30*s(687)+10*s(689)+46*s(690)+20*s(691)+80*s(692)+40*s(693)+22*s(695)+40*s(697)+128*s(698)+40*s(703)+128*s(704)+12
  Such that:aux(134) =< 1
aux(135) =< V1
aux(136) =< V1/2
aux(137) =< V
aux(138) =< 2*V
aux(139) =< V/3
aux(140) =< 2/3*V
aux(141) =< 2/5*V
s(609) =< aux(137)
s(610) =< aux(137)* (1/2)
s(611) =< s(609)+s(609)+s(609)+s(609)+aux(137)
s(612) =< s(609)+s(609)+s(609)+s(609)+aux(134)
s(611) =< s(612)*aux(137)
s(613) =< s(610)
s(613) =< aux(137)
s(614) =< aux(137)
s(615) =< s(610)
s(614) =< s(611)
s(616) =< s(611)
s(617) =< s(614)
s(615) =< s(611)
s(618) =< aux(140)
s(619) =< aux(141)
s(620) =< aux(137)
s(621) =< aux(137)-1
s(622) =< s(618)+s(618)+s(618)+s(618)+aux(137)
s(623) =< s(618)+s(618)+s(618)+s(618)+aux(137)
s(624) =< s(618)+s(618)+s(618)+s(618)+aux(137)
s(625) =< s(618)* (1/3)+s(618)* (1/3)+s(618)* (1/3)+s(618)* (1/3)+aux(139)
s(626) =< s(618)+s(618)+s(618)+s(618)+aux(137)
s(627) =< s(618)+s(618)+s(618)+s(618)+aux(137)
s(628) =< s(618)+s(618)+s(618)+s(618)+aux(137)
s(623) =< s(627)*s(620)
s(624) =< s(627)*s(621)
s(626) =< s(622)*s(621)
s(628) =< s(622)*s(620)
s(629) =< s(618)*s(620)
s(630) =< s(619)*s(621)
s(631) =< s(626)* (1/2)
s(632) =< s(630)* (1/2)
s(633) =< s(631)
s(633) =< s(626)
s(634) =< s(626)
s(635) =< s(626)
s(636) =< s(631)
s(635) =< s(628)
s(637) =< s(628)
s(638) =< s(635)
s(636) =< s(628)
s(639) =< s(624)
s(640) =< s(624)* (1/2)
s(641) =< s(639)+s(639)+s(639)+s(639)+s(623)
s(642) =< s(639)+s(639)+s(639)+s(639)+s(625)
s(641) =< s(642)*aux(137)
s(643) =< s(640)
s(643) =< s(624)
s(644) =< s(624)
s(645) =< s(640)
s(644) =< s(641)
s(646) =< s(641)
s(647) =< s(644)
s(645) =< s(641)
s(648) =< s(629)
s(632) =< s(630)
s(649) =< s(630)
s(663) =< aux(138)
s(666) =< s(663)+s(663)+s(663)+s(663)+aux(137)
s(667) =< s(663)+s(663)+s(663)+s(663)+aux(137)
s(668) =< s(663)+s(663)+s(663)+s(663)+aux(137)
s(669) =< s(663)* (1/3)+s(663)* (1/3)+s(663)* (1/3)+s(663)* (1/3)+aux(137)
s(670) =< s(663)+s(663)+s(663)+s(663)+aux(137)
s(671) =< s(663)+s(663)+s(663)+s(663)+aux(137)
s(672) =< s(663)+s(663)+s(663)+s(663)+aux(137)
s(667) =< s(671)*s(620)
s(668) =< s(671)*s(621)
s(670) =< s(666)*s(621)
s(672) =< s(666)*s(620)
s(673) =< s(663)*s(620)
s(674) =< s(663)*s(621)
s(675) =< s(670)* (1/2)
s(676) =< s(674)* (1/2)
s(677) =< s(675)
s(677) =< s(670)
s(678) =< s(670)
s(679) =< s(670)
s(680) =< s(675)
s(679) =< s(672)
s(681) =< s(672)
s(682) =< s(679)
s(680) =< s(672)
s(683) =< s(668)
s(684) =< s(668)* (1/2)
s(685) =< s(683)+s(683)+s(683)+s(683)+s(667)
s(686) =< s(683)+s(683)+s(683)+s(683)+s(669)
s(685) =< s(686)*aux(137)
s(687) =< s(684)
s(687) =< s(668)
s(688) =< s(668)
s(689) =< s(684)
s(688) =< s(685)
s(690) =< s(685)
s(691) =< s(688)
s(689) =< s(685)
s(692) =< s(673)
s(676) =< s(674)
s(693) =< s(674)
s(694) =< aux(137)
s(695) =< aux(137)
s(694) =< aux(138)
s(695) =< aux(138)
s(696) =< s(694)* (1/2)
s(697) =< s(696)
s(697) =< s(694)
s(698) =< s(694)
s(703) =< aux(136)
s(703) =< aux(135)
s(704) =< aux(135)

  with precondition: [V1>=1,V>=4] 

* Chain [170]...: 1399*s(819)+180*s(822)+270*s(823)+70*s(825)+322*s(826)+140*s(827)+286*s(828)+286*s(829)+90*s(832)+180*s(842)+135*s(843)+279*s(844)+45*s(846)+207*s(847)+90*s(848)+513*s(849)+90*s(852)+135*s(853)+45*s(855)+207*s(856)+90*s(857)+360*s(858)+180*s(859)+360*s(860)+478*s(873)+50*s(876)+100*s(886)+75*s(887)+155*s(888)+25*s(890)+115*s(891)+50*s(892)+285*s(893)+50*s(896)+75*s(897)+25*s(899)+115*s(900)+50*s(901)+200*s(902)+100*s(903)+33*s(905)+40*s(907)+256*s(908)+50*s(913)+20*s(969)+20*s(1021)+183*s(1125)+15*s(1183)+5*s(1186)+40*s(1188)+20*s(1198)+92*s(1199)+40*s(1200)+15*s(1207)+5*s(1210)+137*s(1211)+10*s(1212)+20*s(1221)+40*s(1231)+30*s(1232)+62*s(1233)+10*s(1235)+46*s(1236)+20*s(1237)+114*s(1238)+10*s(1241)+30*s(1242)+5*s(1244)+23*s(1245)+10*s(1246)+80*s(1247)+40*s(1248)+20*s(1275)+40*s(1285)+30*s(1286)+62*s(1287)+10*s(1289)+46*s(1290)+20*s(1291)+114*s(1292)+20*s(1295)+30*s(1296)+10*s(1298)+46*s(1299)+20*s(1300)+80*s(1301)+40*s(1302)+23*s(1311)+114*s(1316)+20*s(1319)+30*s(1320)+10*s(1322)+46*s(1323)+20*s(1324)+30*s(1339)+5*s(1404)+10*s(1429)+10*s(1634)+5*s(1637)+23*s(1638)+10*s(1639)+20*s(1854)+30*s(1855)+10*s(1857)+46*s(1858)+20*s(1859)+26*s(1860)+26*s(1861)+10*s(1864)+20*s(1874)+15*s(1875)+31*s(1876)+5*s(1878)+23*s(1879)+10*s(1880)+57*s(1881)+10*s(1884)+15*s(1885)+5*s(1887)+23*s(1888)+10*s(1889)+40*s(1890)+20*s(1891)+52*s(1892)+10*s(1893)+20*s(1903)+15*s(1904)+31*s(1905)+5*s(1907)+23*s(1908)+10*s(1909)+57*s(1910)+10*s(1913)+15*s(1914)+5*s(1916)+23*s(1917)+10*s(1918)+40*s(1919)+20*s(1920)+11*s(1922)+20*s(1924)+64*s(1925)+20*s(1929)+30*s(1930)+10*s(1932)+46*s(1933)+20*s(1934)+26*s(1935)+26*s(1936)+10*s(1939)+20*s(1949)+15*s(1950)+31*s(1951)+5*s(1953)+23*s(1954)+10*s(1955)+57*s(1956)+10*s(1959)+15*s(1960)+5*s(1962)+23*s(1963)+10*s(1964)+40*s(1965)+20*s(1966)+12*s(1977)+24*s(1979)+12*s(1981)+12*s(1983)+24*s(1984)+12*s(1985)+52*s(1986)+10*s(1987)+20*s(1997)+15*s(1998)+31*s(1999)+5*s(2001)+23*s(2002)+10*s(2003)+57*s(2004)+10*s(2007)+15*s(2008)+5*s(2010)+23*s(2011)+10*s(2012)+40*s(2013)+20*s(2014)+11*s(2016)+20*s(2018)+64*s(2019)+13
  Such that:s(1839) =< 2*V1+4
s(1840) =< 4*V1
s(1841) =< V1/3+2/3
s(1843) =< 2/3*V1+4/3
s(1844) =< 2/5*V1+4/5
s(1845) =< 4/3*V1
s(1846) =< 4/5*V1
aux(170) =< 1
aux(171) =< 2
aux(172) =< 3
aux(173) =< V1
aux(174) =< V1+1
aux(175) =< V1+2
aux(176) =< 2*V1
aux(177) =< V1/2
aux(178) =< V1/3
aux(179) =< V1/3+1/3
aux(180) =< 2/3*V1
aux(181) =< 2/5*V1
s(968) =< aux(177)
s(1339) =< aux(177)
s(819) =< aux(173)
s(820) =< aux(173)* (1/2)
s(821) =< s(819)+s(819)+s(819)+s(819)+aux(173)
s(822) =< s(819)+s(819)+s(819)+s(819)+aux(170)
s(821) =< s(822)*aux(173)
s(823) =< s(820)
s(823) =< aux(173)
s(824) =< aux(173)
s(825) =< s(820)
s(824) =< s(821)
s(826) =< s(821)
s(827) =< s(824)
s(825) =< s(821)
s(828) =< aux(180)
s(829) =< aux(181)
s(830) =< aux(173)
s(831) =< aux(173)-1
s(832) =< s(828)+s(828)+s(828)+s(828)+aux(173)
s(833) =< s(828)+s(828)+s(828)+s(828)+aux(173)
s(834) =< s(828)+s(828)+s(828)+s(828)+aux(173)
s(835) =< s(828)* (1/3)+s(828)* (1/3)+s(828)* (1/3)+s(828)* (1/3)+aux(178)
s(836) =< s(828)+s(828)+s(828)+s(828)+aux(173)
s(837) =< s(828)+s(828)+s(828)+s(828)+aux(173)
s(838) =< s(828)+s(828)+s(828)+s(828)+aux(173)
s(833) =< s(837)*s(830)
s(834) =< s(837)*s(831)
s(836) =< s(832)*s(831)
s(838) =< s(832)*s(830)
s(839) =< s(828)*s(830)
s(840) =< s(829)*s(831)
s(841) =< s(836)* (1/2)
s(842) =< s(840)* (1/2)
s(843) =< s(841)
s(843) =< s(836)
s(844) =< s(836)
s(845) =< s(836)
s(846) =< s(841)
s(845) =< s(838)
s(847) =< s(838)
s(848) =< s(845)
s(846) =< s(838)
s(849) =< s(834)
s(850) =< s(834)* (1/2)
s(851) =< s(849)+s(849)+s(849)+s(849)+s(833)
s(852) =< s(849)+s(849)+s(849)+s(849)+s(835)
s(851) =< s(852)*aux(173)
s(853) =< s(850)
s(853) =< s(834)
s(854) =< s(834)
s(855) =< s(850)
s(854) =< s(851)
s(856) =< s(851)
s(857) =< s(854)
s(855) =< s(851)
s(858) =< s(839)
s(842) =< s(840)
s(859) =< s(840)
s(873) =< aux(176)
s(876) =< s(873)+s(873)+s(873)+s(873)+aux(173)
s(877) =< s(873)+s(873)+s(873)+s(873)+aux(173)
s(878) =< s(873)+s(873)+s(873)+s(873)+aux(173)
s(879) =< s(873)* (1/3)+s(873)* (1/3)+s(873)* (1/3)+s(873)* (1/3)+aux(173)
s(880) =< s(873)+s(873)+s(873)+s(873)+aux(173)
s(881) =< s(873)+s(873)+s(873)+s(873)+aux(173)
s(882) =< s(873)+s(873)+s(873)+s(873)+aux(173)
s(877) =< s(881)*s(830)
s(878) =< s(881)*s(831)
s(880) =< s(876)*s(831)
s(882) =< s(876)*s(830)
s(883) =< s(873)*s(830)
s(884) =< s(873)*s(831)
s(885) =< s(880)* (1/2)
s(886) =< s(884)* (1/2)
s(887) =< s(885)
s(887) =< s(880)
s(888) =< s(880)
s(889) =< s(880)
s(890) =< s(885)
s(889) =< s(882)
s(891) =< s(882)
s(892) =< s(889)
s(890) =< s(882)
s(893) =< s(878)
s(894) =< s(878)* (1/2)
s(895) =< s(893)+s(893)+s(893)+s(893)+s(877)
s(896) =< s(893)+s(893)+s(893)+s(893)+s(879)
s(895) =< s(896)*aux(173)
s(897) =< s(894)
s(897) =< s(878)
s(898) =< s(878)
s(899) =< s(894)
s(898) =< s(895)
s(900) =< s(895)
s(901) =< s(898)
s(899) =< s(895)
s(902) =< s(883)
s(886) =< s(884)
s(903) =< s(884)
s(904) =< aux(173)
s(905) =< aux(173)
s(904) =< aux(176)
s(905) =< aux(176)
s(906) =< s(904)* (1/2)
s(907) =< s(906)
s(907) =< s(904)
s(908) =< s(904)
s(913) =< s(904)
s(913) =< aux(173)
s(968) =< aux(173)
s(968) =< aux(176)
s(1020) =< s(904)* (1/2)
s(1021) =< s(1020)
s(1021) =< s(904)
s(969) =< s(968)
s(969) =< s(904)
s(1125) =< aux(174)
s(1182) =< aux(173)
s(1182) =< aux(174)
s(1194) =< s(819)+s(819)+s(819)+s(819)+aux(174)
s(1194) =< s(822)*aux(174)
s(1197) =< aux(173)
s(1198) =< s(820)
s(1197) =< s(1194)
s(1199) =< s(1194)
s(1200) =< s(1197)
s(1198) =< s(1194)
s(1183) =< s(1182)
s(1183) =< aux(173)
s(1186) =< s(1182)
s(1188) =< s(1182)
s(1186) =< aux(174)
s(1316) =< aux(171)
s(1317) =< aux(171)* (1/2)
s(1318) =< s(1316)+s(1316)+s(1316)+s(1316)+aux(172)
s(1319) =< s(1316)+s(1316)+s(1316)+s(1316)+aux(170)
s(1318) =< s(1319)*aux(172)
s(1320) =< s(1317)
s(1320) =< aux(171)
s(1321) =< aux(171)
s(1322) =< s(1317)
s(1321) =< s(1318)
s(1323) =< s(1318)
s(1324) =< s(1321)
s(1322) =< s(1318)
s(1339) =< aux(173)
s(1404) =< aux(173)
s(1404) =< aux(174)
s(1211) =< aux(175)
s(1852) =< aux(175)* (1/2)
s(1853) =< s(1211)+s(1211)+s(1211)+s(1211)+aux(175)
s(1854) =< s(1211)+s(1211)+s(1211)+s(1211)+aux(170)
s(1853) =< s(1854)*aux(175)
s(1855) =< s(1852)
s(1855) =< aux(175)
s(1856) =< aux(175)
s(1857) =< s(1852)
s(1856) =< s(1853)
s(1858) =< s(1853)
s(1859) =< s(1856)
s(1857) =< s(1853)
s(1860) =< s(1843)
s(1861) =< s(1844)
s(1862) =< aux(175)
s(1863) =< aux(175)-1
s(1864) =< s(1860)+s(1860)+s(1860)+s(1860)+aux(175)
s(1865) =< s(1860)+s(1860)+s(1860)+s(1860)+aux(175)
s(1866) =< s(1860)+s(1860)+s(1860)+s(1860)+aux(175)
s(1867) =< s(1860)* (1/3)+s(1860)* (1/3)+s(1860)* (1/3)+s(1860)* (1/3)+s(1841)
s(1868) =< s(1860)+s(1860)+s(1860)+s(1860)+aux(175)
s(1869) =< s(1860)+s(1860)+s(1860)+s(1860)+aux(175)
s(1870) =< s(1860)+s(1860)+s(1860)+s(1860)+aux(175)
s(1865) =< s(1869)*s(1862)
s(1866) =< s(1869)*s(1863)
s(1868) =< s(1864)*s(1863)
s(1870) =< s(1864)*s(1862)
s(1871) =< s(1860)*s(1862)
s(1872) =< s(1861)*s(1863)
s(1873) =< s(1868)* (1/2)
s(1874) =< s(1872)* (1/2)
s(1875) =< s(1873)
s(1875) =< s(1868)
s(1876) =< s(1868)
s(1877) =< s(1868)
s(1878) =< s(1873)
s(1877) =< s(1870)
s(1879) =< s(1870)
s(1880) =< s(1877)
s(1878) =< s(1870)
s(1881) =< s(1866)
s(1882) =< s(1866)* (1/2)
s(1883) =< s(1881)+s(1881)+s(1881)+s(1881)+s(1865)
s(1884) =< s(1881)+s(1881)+s(1881)+s(1881)+s(1867)
s(1883) =< s(1884)*aux(175)
s(1885) =< s(1882)
s(1885) =< s(1866)
s(1886) =< s(1866)
s(1887) =< s(1882)
s(1886) =< s(1883)
s(1888) =< s(1883)
s(1889) =< s(1886)
s(1887) =< s(1883)
s(1890) =< s(1871)
s(1874) =< s(1872)
s(1891) =< s(1872)
s(1892) =< s(1839)
s(1893) =< s(1892)+s(1892)+s(1892)+s(1892)+aux(175)
s(1894) =< s(1892)+s(1892)+s(1892)+s(1892)+aux(175)
s(1895) =< s(1892)+s(1892)+s(1892)+s(1892)+aux(175)
s(1896) =< s(1892)* (1/3)+s(1892)* (1/3)+s(1892)* (1/3)+s(1892)* (1/3)+aux(175)
s(1897) =< s(1892)+s(1892)+s(1892)+s(1892)+aux(175)
s(1898) =< s(1892)+s(1892)+s(1892)+s(1892)+aux(175)
s(1899) =< s(1892)+s(1892)+s(1892)+s(1892)+aux(175)
s(1894) =< s(1898)*s(1862)
s(1895) =< s(1898)*s(1863)
s(1897) =< s(1893)*s(1863)
s(1899) =< s(1893)*s(1862)
s(1900) =< s(1892)*s(1862)
s(1901) =< s(1892)*s(1863)
s(1902) =< s(1897)* (1/2)
s(1903) =< s(1901)* (1/2)
s(1904) =< s(1902)
s(1904) =< s(1897)
s(1905) =< s(1897)
s(1906) =< s(1897)
s(1907) =< s(1902)
s(1906) =< s(1899)
s(1908) =< s(1899)
s(1909) =< s(1906)
s(1907) =< s(1899)
s(1910) =< s(1895)
s(1911) =< s(1895)* (1/2)
s(1912) =< s(1910)+s(1910)+s(1910)+s(1910)+s(1894)
s(1913) =< s(1910)+s(1910)+s(1910)+s(1910)+s(1896)
s(1912) =< s(1913)*aux(175)
s(1914) =< s(1911)
s(1914) =< s(1895)
s(1915) =< s(1895)
s(1916) =< s(1911)
s(1915) =< s(1912)
s(1917) =< s(1912)
s(1918) =< s(1915)
s(1916) =< s(1912)
s(1919) =< s(1900)
s(1903) =< s(1901)
s(1920) =< s(1901)
s(1921) =< aux(175)
s(1922) =< aux(175)
s(1921) =< s(1839)
s(1922) =< s(1839)
s(1923) =< s(1921)* (1/2)
s(1924) =< s(1923)
s(1924) =< s(1921)
s(1925) =< s(1921)
s(1927) =< aux(176)* (1/2)
s(1928) =< s(873)+s(873)+s(873)+s(873)+aux(176)
s(1929) =< s(873)+s(873)+s(873)+s(873)+aux(170)
s(1928) =< s(1929)*aux(176)
s(1930) =< s(1927)
s(1930) =< aux(176)
s(1931) =< aux(176)
s(1932) =< s(1927)
s(1931) =< s(1928)
s(1933) =< s(1928)
s(1934) =< s(1931)
s(1932) =< s(1928)
s(1935) =< s(1845)
s(1936) =< s(1846)
s(1937) =< aux(176)
s(1938) =< aux(176)-1
s(1939) =< s(1935)+s(1935)+s(1935)+s(1935)+aux(176)
s(1940) =< s(1935)+s(1935)+s(1935)+s(1935)+aux(176)
s(1941) =< s(1935)+s(1935)+s(1935)+s(1935)+aux(176)
s(1942) =< s(1935)* (1/3)+s(1935)* (1/3)+s(1935)* (1/3)+s(1935)* (1/3)+aux(180)
s(1943) =< s(1935)+s(1935)+s(1935)+s(1935)+aux(176)
s(1944) =< s(1935)+s(1935)+s(1935)+s(1935)+aux(176)
s(1945) =< s(1935)+s(1935)+s(1935)+s(1935)+aux(176)
s(1940) =< s(1944)*s(1937)
s(1941) =< s(1944)*s(1938)
s(1943) =< s(1939)*s(1938)
s(1945) =< s(1939)*s(1937)
s(1946) =< s(1935)*s(1937)
s(1947) =< s(1936)*s(1938)
s(1948) =< s(1943)* (1/2)
s(1949) =< s(1947)* (1/2)
s(1950) =< s(1948)
s(1950) =< s(1943)
s(1951) =< s(1943)
s(1952) =< s(1943)
s(1953) =< s(1948)
s(1952) =< s(1945)
s(1954) =< s(1945)
s(1955) =< s(1952)
s(1953) =< s(1945)
s(1956) =< s(1941)
s(1957) =< s(1941)* (1/2)
s(1958) =< s(1956)+s(1956)+s(1956)+s(1956)+s(1940)
s(1959) =< s(1956)+s(1956)+s(1956)+s(1956)+s(1942)
s(1958) =< s(1959)*aux(176)
s(1960) =< s(1957)
s(1960) =< s(1941)
s(1961) =< s(1941)
s(1962) =< s(1957)
s(1961) =< s(1958)
s(1963) =< s(1958)
s(1964) =< s(1961)
s(1962) =< s(1958)
s(1965) =< s(1946)
s(1949) =< s(1947)
s(1966) =< s(1947)
s(1968) =< aux(173)+1/2
s(1969) =< aux(173)+1
s(1970) =< aux(173)-1/2
s(1971) =< aux(173)-3/2
s(1972) =< s(819)*aux(173)
s(1973) =< s(819)*s(1968)
s(1974) =< s(819)*s(1969)
s(1975) =< s(819)*s(1970)
s(1976) =< s(819)*s(1971)
s(1977) =< s(1973)* (2/3)
s(1978) =< s(1973)*2
s(1979) =< s(1975)* (2/3)
s(1980) =< s(1975)*2
s(1981) =< s(1976)* (2/3)
s(1982) =< s(1976)*2
s(1983) =< s(1974)
s(1977) =< s(1974)
s(1983) =< s(1973)
s(1977) =< s(1973)
s(1983) =< s(1978)
s(1977) =< s(1978)
s(1984) =< s(1973)
s(1979) =< s(1973)
s(1984) =< s(1975)
s(1979) =< s(1975)
s(1984) =< s(1980)
s(1979) =< s(1980)
s(1985) =< s(1972)
s(1981) =< s(1972)
s(1985) =< s(1976)
s(1981) =< s(1976)
s(1985) =< s(1982)
s(1981) =< s(1982)
s(1986) =< s(1840)
s(1987) =< s(1986)+s(1986)+s(1986)+s(1986)+aux(176)
s(1988) =< s(1986)+s(1986)+s(1986)+s(1986)+aux(176)
s(1989) =< s(1986)+s(1986)+s(1986)+s(1986)+aux(176)
s(1990) =< s(1986)* (1/3)+s(1986)* (1/3)+s(1986)* (1/3)+s(1986)* (1/3)+aux(176)
s(1991) =< s(1986)+s(1986)+s(1986)+s(1986)+aux(176)
s(1992) =< s(1986)+s(1986)+s(1986)+s(1986)+aux(176)
s(1993) =< s(1986)+s(1986)+s(1986)+s(1986)+aux(176)
s(1988) =< s(1992)*s(1937)
s(1989) =< s(1992)*s(1938)
s(1991) =< s(1987)*s(1938)
s(1993) =< s(1987)*s(1937)
s(1994) =< s(1986)*s(1937)
s(1995) =< s(1986)*s(1938)
s(1996) =< s(1991)* (1/2)
s(1997) =< s(1995)* (1/2)
s(1998) =< s(1996)
s(1998) =< s(1991)
s(1999) =< s(1991)
s(2000) =< s(1991)
s(2001) =< s(1996)
s(2000) =< s(1993)
s(2002) =< s(1993)
s(2003) =< s(2000)
s(2001) =< s(1993)
s(2004) =< s(1989)
s(2005) =< s(1989)* (1/2)
s(2006) =< s(2004)+s(2004)+s(2004)+s(2004)+s(1988)
s(2007) =< s(2004)+s(2004)+s(2004)+s(2004)+s(1990)
s(2006) =< s(2007)*aux(176)
s(2008) =< s(2005)
s(2008) =< s(1989)
s(2009) =< s(1989)
s(2010) =< s(2005)
s(2009) =< s(2006)
s(2011) =< s(2006)
s(2012) =< s(2009)
s(2010) =< s(2006)
s(2013) =< s(1994)
s(1997) =< s(1995)
s(2014) =< s(1995)
s(2015) =< aux(176)
s(2016) =< aux(176)
s(2015) =< s(1840)
s(2016) =< s(1840)
s(2017) =< s(2015)* (1/2)
s(2018) =< s(2017)
s(2018) =< s(2015)
s(2019) =< s(2015)
s(1311) =< aux(170)
s(1219) =< aux(174)
s(1220) =< aux(174)-1
s(1221) =< s(873)+s(873)+s(873)+s(873)+aux(174)
s(1222) =< s(873)+s(873)+s(873)+s(873)+aux(174)
s(1223) =< s(873)+s(873)+s(873)+s(873)+aux(174)
s(1225) =< s(873)+s(873)+s(873)+s(873)+aux(174)
s(1226) =< s(873)+s(873)+s(873)+s(873)+aux(174)
s(1227) =< s(873)+s(873)+s(873)+s(873)+aux(174)
s(1222) =< s(1226)*s(1219)
s(1223) =< s(1226)*s(1220)
s(1225) =< s(1221)*s(1220)
s(1227) =< s(1221)*s(1219)
s(1228) =< s(873)*s(1219)
s(1229) =< s(873)*s(1220)
s(1230) =< s(1225)* (1/2)
s(1231) =< s(1229)* (1/2)
s(1232) =< s(1230)
s(1232) =< s(1225)
s(1233) =< s(1225)
s(1234) =< s(1225)
s(1235) =< s(1230)
s(1234) =< s(1227)
s(1236) =< s(1227)
s(1237) =< s(1234)
s(1235) =< s(1227)
s(1238) =< s(1223)
s(1239) =< s(1223)* (1/2)
s(1633) =< s(1238)+s(1238)+s(1238)+s(1238)+s(1222)
s(1634) =< s(1238)+s(1238)+s(1238)+s(1238)+s(879)
s(1633) =< s(1634)*aux(174)
s(1242) =< s(1239)
s(1242) =< s(1223)
s(1636) =< s(1223)
s(1637) =< s(1239)
s(1636) =< s(1633)
s(1638) =< s(1633)
s(1639) =< s(1636)
s(1637) =< s(1633)
s(1247) =< s(1228)
s(1231) =< s(1229)
s(1248) =< s(1229)
s(1429) =< s(904)
s(1429) =< aux(174)
s(1275) =< s(828)+s(828)+s(828)+s(828)+aux(174)
s(1276) =< s(828)+s(828)+s(828)+s(828)+aux(174)
s(1277) =< s(828)+s(828)+s(828)+s(828)+aux(174)
s(1278) =< s(828)* (1/3)+s(828)* (1/3)+s(828)* (1/3)+s(828)* (1/3)+aux(179)
s(1279) =< s(828)+s(828)+s(828)+s(828)+aux(174)
s(1280) =< s(828)+s(828)+s(828)+s(828)+aux(174)
s(1281) =< s(828)+s(828)+s(828)+s(828)+aux(174)
s(1276) =< s(1280)*s(1219)
s(1277) =< s(1280)*s(1220)
s(1279) =< s(1275)*s(1220)
s(1281) =< s(1275)*s(1219)
s(1282) =< s(828)*s(1219)
s(1283) =< s(829)*s(1220)
s(1284) =< s(1279)* (1/2)
s(1285) =< s(1283)* (1/2)
s(1286) =< s(1284)
s(1286) =< s(1279)
s(1287) =< s(1279)
s(1288) =< s(1279)
s(1289) =< s(1284)
s(1288) =< s(1281)
s(1290) =< s(1281)
s(1291) =< s(1288)
s(1289) =< s(1281)
s(1292) =< s(1277)
s(1293) =< s(1277)* (1/2)
s(1294) =< s(1292)+s(1292)+s(1292)+s(1292)+s(1276)
s(1295) =< s(1292)+s(1292)+s(1292)+s(1292)+s(1278)
s(1294) =< s(1295)*aux(174)
s(1296) =< s(1293)
s(1296) =< s(1277)
s(1297) =< s(1277)
s(1298) =< s(1293)
s(1297) =< s(1294)
s(1299) =< s(1294)
s(1300) =< s(1297)
s(1298) =< s(1294)
s(1301) =< s(1282)
s(1285) =< s(1283)
s(1302) =< s(1283)
s(1206) =< aux(174)
s(1206) =< aux(176)
s(1224) =< s(873)* (1/3)+s(873)* (1/3)+s(873)* (1/3)+s(873)* (1/3)+aux(174)
s(1240) =< s(1238)+s(1238)+s(1238)+s(1238)+s(1222)
s(1241) =< s(1238)+s(1238)+s(1238)+s(1238)+s(1224)
s(1240) =< s(1241)*aux(174)
s(1243) =< s(1223)
s(1244) =< s(1239)
s(1243) =< s(1240)
s(1245) =< s(1240)
s(1246) =< s(1243)
s(1244) =< s(1240)
s(1207) =< s(1206)
s(1207) =< aux(174)
s(1209) =< aux(174)
s(1210) =< s(1206)
s(1209) =< aux(175)
s(1212) =< s(1209)
s(1210) =< aux(175)

  with precondition: [V1>=2] 

* Chain [169]: 2375*s(2022)+66*s(2032)+132*s(2034)+66*s(2036)+66*s(2038)+132*s(2039)+66*s(2040)+6*s(2041)+6*s(2045)+18*s(2048)+18*s(2050)+24*s(2103)+24*s(2107)+6*s(2185)+6*s(2189)+90*s(2192)+90*s(2194)+6*s(2273)+6*s(2277)+66*s(2280)+66*s(2282)+18*s(2339)+18*s(2343)+54*s(2346)+54*s(2348)+120*s(2408)+380*s(2412)+308*s(2441)+80*s(2443)+216*s(2467)+134*s(2499)+15*s(2516)+5*s(2519)+70*s(2521)+15*s(2528)+60*s(2535)+20*s(2538)+154*s(2539)+40*s(2540)+15*s(2572)+5*s(2575)+46*s(2576)+20*s(2577)+15*s(2581)+5*s(2584)+15*s(2661)+20*s(2714)+18*s(2729)+10*s(2730)+15*s(2741)+5*s(2750)+5*s(2752)+6*s(2760)+6*s(2764)+18*s(2767)+18*s(2769)+150*s(2856)+40*s(2858)+150*s(2861)+40*s(2863)+4*s(2883)+5*s(2884)+5*s(2885)+5*s(2887)+14*s(2892)+18*s(2893)+10*s(2894)+5*s(2895)+21
  Such that:aux(223) =< 3
s(2883) =< -V1+V
s(2888) =< -V1+V+1
s(2855) =< V1+2
s(2043) =< V1+3
aux(241) =< V1-V
s(2751) =< V1-V+1
s(2884) =< -V1/2+V/2
s(2885) =< -V1/2+V/2+1/2
s(2042) =< V1/2+2
s(2044) =< V1/2+3/2
aux(242) =< V1/2-V/2
s(2750) =< V1/2-V/2+1/2
s(2761) =< V1/2+V/2+3/2
s(2274) =< V1/2+V24/2+1/2
s(2041) =< V1/3+1
s(2273) =< V1/3+1/3
s(2762) =< V+3
s(2895) =< V/2+1
s(2763) =< V/2+3/2
s(2186) =< V/2+V16/2+1/2
s(2760) =< V/3+1
s(2185) =< V/3+1/3
aux(245) =< 1
aux(246) =< 2
aux(247) =< 1/2
aux(248) =< V1
aux(249) =< V1+1
aux(250) =< 2*V1
aux(251) =< V1/2
aux(252) =< V1/2+1/2
aux(253) =< V1/2+V/2
aux(254) =< V1/2+V24/2
aux(255) =< V1/3
aux(256) =< 2/3*V1
aux(257) =< V
aux(258) =< V+1
aux(259) =< V+2
aux(260) =< V/2
aux(261) =< V/2+1/2
aux(262) =< V/2+V16/2
aux(263) =< V/3
aux(264) =< V16
aux(265) =< V16+3
aux(266) =< V16/2
aux(267) =< V16/2+3/2
aux(268) =< V16/2+V32/2
aux(269) =< V16/2+V32/2+3/2
aux(270) =< V16/3
aux(271) =< V16/3+1
s(2499) =< aux(245)
s(2022) =< aux(248)
s(2515) =< aux(251)
s(2412) =< aux(251)
s(2713) =< aux(251)
s(2661) =< aux(251)
s(2741) =< aux(252)
s(2048) =< aux(255)
s(2280) =< aux(255)
s(2103) =< aux(256)
s(2886) =< aux(258)
s(2887) =< aux(261)
s(2192) =< aux(263)
s(2767) =< aux(263)
s(2346) =< aux(270)
s(2339) =< aux(271)
s(2537) =< aux(245)
s(2537) =< aux(246)
s(2581) =< aux(245)
s(2581) =< aux(246)
s(2539) =< aux(246)
s(2574) =< aux(246)
s(2584) =< aux(245)
s(2574) =< aux(223)
s(2576) =< aux(223)
s(2577) =< s(2574)
s(2584) =< aux(223)
s(2572) =< s(2537)
s(2572) =< aux(246)
s(2575) =< s(2537)
s(2575) =< aux(223)
s(2412) =< aux(248)
s(2467) =< aux(249)
s(2535) =< aux(247)
s(2535) =< aux(245)
s(2538) =< aux(247)
s(2540) =< s(2537)
s(2538) =< aux(246)
s(2441) =< aux(257)
s(2885) =< s(2888)
s(2892) =< s(2888)
s(2884) =< s(2888)
s(2886) =< aux(259)
s(2893) =< aux(259)
s(2894) =< s(2886)
s(2887) =< aux(259)
s(2407) =< aux(248)* (1/2)
s(2408) =< s(2407)
s(2408) =< aux(248)
s(2023) =< aux(248)+1/2
s(2024) =< aux(248)+1
s(2025) =< aux(248)-1/2
s(2026) =< aux(248)-3/2
s(2027) =< s(2022)*aux(248)
s(2028) =< s(2022)*s(2023)
s(2029) =< s(2022)*s(2024)
s(2030) =< s(2022)*s(2025)
s(2031) =< s(2022)*s(2026)
s(2032) =< s(2028)* (2/3)
s(2033) =< s(2028)*2
s(2034) =< s(2030)* (2/3)
s(2035) =< s(2030)*2
s(2036) =< s(2031)* (2/3)
s(2037) =< s(2031)*2
s(2038) =< s(2029)
s(2032) =< s(2029)
s(2038) =< s(2028)
s(2032) =< s(2028)
s(2038) =< s(2033)
s(2032) =< s(2033)
s(2039) =< s(2028)
s(2034) =< s(2028)
s(2039) =< s(2030)
s(2034) =< s(2030)
s(2039) =< s(2035)
s(2034) =< s(2035)
s(2040) =< s(2027)
s(2036) =< s(2027)
s(2040) =< s(2031)
s(2036) =< s(2031)
s(2040) =< s(2037)
s(2036) =< s(2037)
s(2050) =< aux(252)
s(2048) =< aux(252)
s(2050) =< aux(251)
s(2048) =< aux(251)
s(2050) =< aux(248)
s(2048) =< aux(248)
s(2282) =< aux(254)
s(2280) =< aux(254)
s(2282) =< aux(251)
s(2280) =< aux(251)
s(2282) =< aux(248)
s(2280) =< aux(248)
s(2518) =< aux(248)
s(2518) =< aux(249)
s(2521) =< s(2518)
s(2661) =< aux(249)
s(2861) =< aux(250)
s(2862) =< aux(250)* (1/2)
s(2863) =< s(2862)
s(2863) =< aux(250)
s(2277) =< s(2274)
s(2273) =< s(2274)
s(2277) =< aux(252)
s(2273) =< aux(252)
s(2277) =< aux(249)
s(2273) =< aux(249)
s(2528) =< aux(248)
s(2528) =< aux(249)
s(2713) =< aux(248)
s(2714) =< s(2713)
s(2714) =< aux(248)
s(2729) =< aux(241)
s(2730) =< aux(242)
s(2730) =< aux(241)
s(2741) =< aux(249)
s(2856) =< s(2855)
s(2857) =< s(2855)* (1/2)
s(2858) =< s(2857)
s(2858) =< s(2855)
s(2045) =< s(2042)
s(2041) =< s(2042)
s(2045) =< s(2044)
s(2041) =< s(2044)
s(2045) =< s(2043)
s(2041) =< s(2043)
s(2750) =< s(2751)
s(2752) =< s(2751)
s(2107) =< aux(248)
s(2103) =< aux(248)
s(2107) =< aux(250)
s(2103) =< aux(250)
s(2442) =< aux(257)* (1/2)
s(2443) =< s(2442)
s(2443) =< aux(257)
s(2515) =< aux(248)
s(2515) =< aux(249)
s(2516) =< s(2515)
s(2516) =< aux(248)
s(2519) =< s(2515)
s(2519) =< aux(249)
s(2769) =< aux(253)
s(2767) =< aux(253)
s(2769) =< aux(260)
s(2767) =< aux(260)
s(2769) =< aux(257)
s(2767) =< aux(257)
s(2764) =< s(2761)
s(2760) =< s(2761)
s(2764) =< s(2763)
s(2760) =< s(2763)
s(2764) =< s(2762)
s(2760) =< s(2762)
s(2194) =< aux(262)
s(2192) =< aux(262)
s(2194) =< aux(260)
s(2192) =< aux(260)
s(2194) =< aux(257)
s(2192) =< aux(257)
s(2189) =< s(2186)
s(2185) =< s(2186)
s(2189) =< aux(261)
s(2185) =< aux(261)
s(2189) =< aux(258)
s(2185) =< aux(258)
s(2895) =< aux(259)
s(2348) =< aux(268)
s(2346) =< aux(268)
s(2348) =< aux(266)
s(2346) =< aux(266)
s(2348) =< aux(264)
s(2346) =< aux(264)
s(2343) =< aux(269)
s(2339) =< aux(269)
s(2343) =< aux(267)
s(2339) =< aux(267)
s(2343) =< aux(265)
s(2339) =< aux(265)

  with precondition: [V1>=0] 

* Chain [168]: 10*s(2899)+2
  Such that:s(2898) =< V+2
s(2899) =< s(2898)

  with precondition: [V1=0,V>=1] 

* Chain [167]: 6*s(2900)+6*s(2904)+18*s(2907)+18*s(2909)+7
  Such that:s(2902) =< V16+3
s(2903) =< V16/2+3/2
s(2901) =< V16/2+V39/2+3/2
s(2900) =< V16/3+1
aux(274) =< V16
aux(275) =< V16/2
aux(276) =< V16/2+V39/2
aux(277) =< V16/3
s(2907) =< aux(277)
s(2909) =< aux(276)
s(2907) =< aux(276)
s(2909) =< aux(275)
s(2907) =< aux(275)
s(2909) =< aux(274)
s(2907) =< aux(274)
s(2904) =< s(2901)
s(2900) =< s(2901)
s(2904) =< s(2903)
s(2900) =< s(2903)
s(2904) =< s(2902)
s(2900) =< s(2902)

  with precondition: [V1=1] 

* Chain [166]: 6
  with precondition: [V1=2] 

* Chain [165]: 9
  with precondition: [V1=3] 

* Chain [164]: 24*s(2923)+24*s(2927)+6*s(2945)+6*s(2949)+18*s(2952)+18*s(2954)+20*s(2968)+10*s(2972)+10
  Such that:s(2947) =< V16+3
s(2948) =< V16/2+3/2
s(2946) =< V16/2+V32/2+3/2
s(2945) =< V16/3+1
aux(282) =< V1
aux(283) =< V1+1
aux(284) =< V1/2
aux(285) =< V1/2+V24/2
aux(286) =< V1/3
aux(287) =< V16
aux(288) =< V16/2
aux(289) =< V16/2+V32/2
aux(290) =< V16/3
s(2923) =< aux(286)
s(2952) =< aux(290)
s(2927) =< aux(285)
s(2923) =< aux(285)
s(2927) =< aux(284)
s(2923) =< aux(284)
s(2927) =< aux(282)
s(2923) =< aux(282)
s(2972) =< aux(282)
s(2968) =< aux(283)
s(2954) =< aux(289)
s(2952) =< aux(289)
s(2954) =< aux(288)
s(2952) =< aux(288)
s(2954) =< aux(287)
s(2952) =< aux(287)
s(2949) =< s(2946)
s(2945) =< s(2946)
s(2949) =< s(2948)
s(2945) =< s(2948)
s(2949) =< s(2947)
s(2945) =< s(2947)

  with precondition: [V=0,V1>=1] 

* Chain [163]: 6
  with precondition: [V=0,V16=1,V1>=2,V24>=0,V32>=1] 

* Chain [162]: 20*s(2976)+64*s(2977)+11
  Such that:aux(291) =< V1
s(2975) =< V1/2
s(2976) =< s(2975)
s(2976) =< aux(291)
s(2977) =< aux(291)

  with precondition: [V=1,V1>=0] 

* Chain [161]: 3
  with precondition: [V16=0,V1>=1,V>=1] 

* Chain [160]: 6
  with precondition: [V16=1,V1>=1,V>=1,V24>=0,V32>=1] 

* Chain [159]: 5
  with precondition: [V1=V+2,V1>=3] 

* Chain [158]: 6
  with precondition: [V1+2=V,V1>=1] 

* Chain [157]: 1
  with precondition: [V1=V,V1>=1] 

* Chain [156]: 2
  with precondition: [V=V16,V1>=1,V>=1] 


Closed-form bounds of start(V1,V,V16,V24,V32,V39): 
-------------------------------------
* Chain [171]... with precondition: [V1>=1,V>=4] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [170]... with precondition: [V1>=2] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [169] with precondition: [V1>=0] 
    - Upper bound: 2698*V1+761+308*V1*V1+nat(V)*348+nat(V1-3/2)*44*V1+nat(V1-1/2)*88*V1+340*V1+16*V1+ (216*V1+216)+ (170*V1+340)+nat(V+1)*10+nat(V+2)*18+nat(-V1+V)*4+nat(-V1+V+1)*14+nat(V1/2+V/2+3/2)*6+nat(V1/2+V24/2+1/2)*6+nat(V/2+V16/2+1/2)*6+nat(V16/2+V32/2+3/2)*18+nat(-V1/2+V/2+1/2)*5+nat(V1-V+1)*5+nat(V1/2-V/2+1/2)*5+ (3*V1+12)+nat(V1/2+V/2)*18+nat(V1/2+V24/2)*66+ (33/2*V1+33/2)+ (2*V1+6)+ (2*V1+2)+nat(V/2+1)*5+nat(V/2+V16/2)*90+nat(V/2+1/2)*5+nat(V/3+1)*6+nat(V/3+1/3)*6+nat(V16/2+V32/2)*54+nat(V16/3+1)*18+nat(-V1/2+V/2)*5+nat(V1-V)*18+nat(V1/2-V/2)*10+435/2*V1+28*V1+nat(V/3)*108+nat(V16/3)*54 
    - Complexity: n^2 
* Chain [168] with precondition: [V1=0,V>=1] 
    - Upper bound: 10*V+22 
    - Complexity: n 
* Chain [167] with precondition: [V1=1] 
    - Upper bound: nat(V16/2+V39/2+3/2)*6+7+nat(V16/2+V39/2)*18+nat(V16/3+1)*6+nat(V16/3)*18 
    - Complexity: n 
* Chain [166] with precondition: [V1=2] 
    - Upper bound: 6 
    - Complexity: constant 
* Chain [165] with precondition: [V1=3] 
    - Upper bound: 9 
    - Complexity: constant 
* Chain [164] with precondition: [V=0,V1>=1] 
    - Upper bound: 30*V1+30+nat(V16/2+V32/2+3/2)*6+nat(V1/2+V24/2)*24+nat(V16/2+V32/2)*18+nat(V16/3+1)*6+8*V1+nat(V16/3)*18 
    - Complexity: n 
* Chain [163] with precondition: [V=0,V16=1,V1>=2,V24>=0,V32>=1] 
    - Upper bound: 6 
    - Complexity: constant 
* Chain [162] with precondition: [V=1,V1>=0] 
    - Upper bound: 74*V1+11 
    - Complexity: n 
* Chain [161] with precondition: [V16=0,V1>=1,V>=1] 
    - Upper bound: 3 
    - Complexity: constant 
* Chain [160] with precondition: [V16=1,V1>=1,V>=1,V24>=0,V32>=1] 
    - Upper bound: 6 
    - Complexity: constant 
* Chain [159] with precondition: [V1=V+2,V1>=3] 
    - Upper bound: 5 
    - Complexity: constant 
* Chain [158] with precondition: [V1+2=V,V1>=1] 
    - Upper bound: 6 
    - Complexity: constant 
* Chain [157] with precondition: [V1=V,V1>=1] 
    - Upper bound: 1 
    - Complexity: constant 
* Chain [156] with precondition: [V=V16,V1>=1,V>=1] 
    - Upper bound: 2 
    - Complexity: constant 

### Maximum cost of start(V1,V,V16,V24,V32,V39): inf 
Asymptotic class: infinity 

Time statistics: 
-------------------------------------
* Partial evaluation computed in 501 ms.
* Invariants computed in 383 ms.
   - Backward Invariants 162 ms.
   - Transitive Invariants 66 ms.
* Refinement performed in 1280 ms.
* Termination proved in 86 ms.
* Upper bounds computed in 16979 ms.
   - Equation cost structures 15681 ms.
   - Phase cost structures 382 ms.
   - Chain cost structures 103 ms.
   - Solving cost expressions 656 ms.
* Total analysis performed in 19588 ms.


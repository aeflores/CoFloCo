
Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. non_recursive  : [fun4/2]
1. non_recursive  : [fun5/2]
2. recursive [non_tail] : [fun3/3]
3. recursive [non_tail] : [fun6/3]
4. non_recursive  : [fun/3]
5. non_recursive  : [times/3]
6. recursive  : [fun2/3,mult/3]
7. recursive  : [dyade/3,fun1/3]
8. non_recursive  : [start/2]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into fun4/2
1. SCC is partially evaluated into fun5/2
2. SCC is partially evaluated into fun3/3
3. SCC is partially evaluated into fun6/3
4. SCC is partially evaluated into fun/3
5. SCC is completely evaluated into other SCCs
6. SCC is partially evaluated into mult/3
7. SCC is partially evaluated into fun1/3
8. SCC is partially evaluated into start/2

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations fun4/2 
* CE 35 is refined into CE [40] 
* CE 33 is refined into CE [41] 
* CE 34 is refined into CE [42] 
* CE 32 is refined into CE [43] 


#### Refined cost equations fun4/2 
* CE 40: fun4(V1,Out) = 0
     [V1>=3,V1=Out+1] 
* CE 41: fun4(V1,Out) = 0
     [V1>=2,V1+1=Out] 
* CE 42: fun4(V1,Out) = 0
     [V1>=0,Out=0] 
* CE 43: fun4(V1,Out) = 0
     [Out=2,V1=0] 

### Cost equations --> "Loop" of fun4/2 
* CEs [40] --> Loop 25 
* CEs [41] --> Loop 26 
* CEs [42] --> Loop 27 
* CEs [43] --> Loop 28 

#### Loops of fun4/2 
* Loop 25: fun4(V1,Out) [V1>=3,V1=Out+1] 
* Loop 26: fun4(V1,Out) [V1>=2,V1+1=Out] 
* Loop 27: fun4(V1,Out) [V1>=0,Out=0] 
* Loop 28: fun4(V1,Out) [Out=2,V1=0] 

### Ranking functions of CR fun4(V1,Out) 

#### Partial ranking functions of CR fun4(V1,Out) 


### Resulting Chains:fun4(V1,Out) 
* [28]
* [27]
* [26]
* [25]


### Merging Chains  fun4/2 into  External patterns of execution 
* [[28]] --> 1 
* [[27]] --> 2 
* [[26]] --> 3 
* [[25]] --> 4 


### Specialization of cost equations fun5/2 
* CE 38 is refined into CE [44] 
* CE 39 is refined into CE [45] 
* CE 37 is refined into CE [46] 
* CE 36 is refined into CE [47] 


#### Refined cost equations fun5/2 
* CE 44: fun5(V1,Out) = 0
     [V1>=3,V1=Out+1] 
* CE 45: fun5(V1,Out) = 0
     [V1>=2,V1+1=Out] 
* CE 46: fun5(V1,Out) = 0
     [V1>=0,Out=0] 
* CE 47: fun5(V1,Out) = 0
     [Out=2,V1=0] 

### Cost equations --> "Loop" of fun5/2 
* CEs [44] --> Loop 29 
* CEs [45] --> Loop 30 
* CEs [46] --> Loop 31 
* CEs [47] --> Loop 32 

#### Loops of fun5/2 
* Loop 29: fun5(V1,Out) [V1>=3,V1=Out+1] 
* Loop 30: fun5(V1,Out) [V1>=2,V1+1=Out] 
* Loop 31: fun5(V1,Out) [V1>=0,Out=0] 
* Loop 32: fun5(V1,Out) [Out=2,V1=0] 

### Ranking functions of CR fun5(V1,Out) 

#### Partial ranking functions of CR fun5(V1,Out) 


### Resulting Chains:fun5(V1,Out) 
* [32]
* [31]
* [30]
* [29]


### Merging Chains  fun5/2 into  External patterns of execution 
* [[32]] --> 1 
* [[31]] --> 2 
* [[30]] --> 3 
* [[29]] --> 4 


### Specialization of cost equations fun3/3 
* CE 29 is refined into CE [48] 
* CE 25 is refined into CE [49,50,51,52] 
* CE 27 is refined into CE [53,54,55,56] 
* CE 24 is refined into CE [57] 
* CE 26 is refined into CE [58,59,60,61] 
* CE 28 is refined into CE [62,63,64,65] 


#### Refined cost equations fun3/3 
* CE 48: fun3(V1,V,Out) = 0
     [V>=0,V1>=0,Out=0] 
* CE 49: fun3(V1,V,Out) = 0+ fun4(W1,X1):1
     [X1=2,W1=0,Out=2,V=0,V1=2] 
* CE 50: fun3(V1,V,Out) = 0+ fun4(V,W1):2
     [V>=0,W1=0,Out=0,V1=2] 
* CE 51: fun3(V1,V,Out) = 0+ fun4(W1,Out):3
     [Out>=3,Out=W1+1,Out=V+1,V1=2] 
* CE 52: fun3(V1,V,Out) = 0+ fun4(W1,Out):4
     [Out>=2,Out+1=W1,Out+1=V,V1=2] 
* CE 53: fun3(V1,V,Out) = 0+ fun5(W1,X1):1
     [X1=2,W1=0,Out=2,V=0,V1=2] 
* CE 54: fun3(V1,V,Out) = 0+ fun5(V,W1):2
     [V>=0,W1=0,Out=0,V1=2] 
* CE 55: fun3(V1,V,Out) = 0+ fun5(W1,Out):3
     [Out>=3,Out=W1+1,Out=V+1,V1=2] 
* CE 56: fun3(V1,V,Out) = 0+ fun5(W1,Out):4
     [Out>=2,Out+1=W1,Out+1=V,V1=2] 
* CE 57: fun3(A,B,B) = 0
     [B>=0,A=0] 
* CE 58: fun3(V1,V,Out) = 0+ fun3(W1,V,X1)+ fun4(Y1,Z1):1
     [V>=0,V1>=3,V1=W1+1,X1=0,Z1=2,Y1=0,Out=2] 
* CE 59: fun3(V1,V,Out) = 0+ fun3(W1,V,X1)+ fun4(X1,Y1):2
     [X1>=0,V>=0,V1>=3,V1=W1+1,Y1=0,Out=0] 
* CE 60: fun3(V1,V,Out) = 0+ fun3(W1,V,X1)+ fun4(Y1,Out):3
     [Out>=3,V>=0,V1>=3,Out=X1+1,V1=W1+1,Out=Y1+1] 
* CE 61: fun3(V1,V,Out) = 0+ fun3(W1,V,X1)+ fun4(Y1,Out):4
     [Out>=2,V>=0,V1>=3,Out+1=X1,V1=W1+1,Out+1=Y1] 
* CE 62: fun3(V1,V,Out) = 0+ fun3(W1,V,X1)+ fun5(Y1,Z1):1
     [V>=0,V1>=3,V1=W1+1,X1=0,Z1=2,Y1=0,Out=2] 
* CE 63: fun3(V1,V,Out) = 0+ fun3(W1,V,X1)+ fun5(X1,Y1):2
     [X1>=0,V>=0,V1>=3,V1=W1+1,Y1=0,Out=0] 
* CE 64: fun3(V1,V,Out) = 0+ fun3(W1,V,X1)+ fun5(Y1,Out):3
     [Out>=3,V>=0,V1>=3,Out=X1+1,V1=W1+1,Out=Y1+1] 
* CE 65: fun3(V1,V,Out) = 0+ fun3(W1,V,X1)+ fun5(Y1,Out):4
     [Out>=2,V>=0,V1>=3,Out+1=X1,V1=W1+1,Out+1=Y1] 

### Cost equations --> "Loop" of fun3/3 
* CEs [60,64] --> Loop 33 
* CEs [61,65] --> Loop 34 
* CEs [58,62] --> Loop 35 
* CEs [59,63] --> Loop 36 
* CEs [52,56] --> Loop 37 
* CEs [51,55] --> Loop 38 
* CEs [48,50,54] --> Loop 39 
* CEs [49,53] --> Loop 40 
* CEs [57] --> Loop 41 

#### Loops of fun3/3 
* Loop 33: fun3(V1,V,Out)->  fun3(V1',V,Out')
                  [Out>=3,V>=0,V1>=3,Out=Out'+1,V1=V1'+1] 
* Loop 34: fun3(V1,V,Out)->  fun3(V1',V,Out')
                  [Out>=2,V>=0,V1>=3,Out+1=Out',V1=V1'+1] 
* Loop 35: fun3(V1,V,Out)->  fun3(V1',V,Out')
                  [V>=0,V1>=3,V1=V1'+1,Out'=0,Out=2] 
* Loop 36: fun3(V1,V,Out)->  fun3(V1',V,Out')
                  [Out'>=0,V>=0,V1>=3,V1=V1'+1,Out=0] 
* Loop 37: fun3(V1,V,Out) [V>=3,V=Out+1,V1=2] 
* Loop 38: fun3(V1,V,Out) [V>=2,V+1=Out,V1=2] 
* Loop 39: fun3(V1,V,Out) [V>=0,V1>=0,Out=0] 
* Loop 40: fun3(V1,V,Out) [Out=2,V=0,V1=2] 
* Loop 41: fun3(A,B,B) [B>=0,A=0] 

### Ranking functions of CR fun3(V1,V,Out) 
* RF of phase [33,34,35,36]: [V1-2]

#### Partial ranking functions of CR fun3(V1,V,Out) 
* Partial RF of phase [33,34,35,36]:
  - RF of loop [33:1,34:1,35:1,36:1]:
    V1-2


### Resulting Chains:fun3(V1,V,Out) 
* [[33,34,35,36],40]
* [[33,34,35,36],39]
* [[33,34,35,36],38]
* [[33,34,35,36],37]
* [41]
* [40]
* [39]
* [38]
* [37]


### Merging Chains  fun3/3 into  External patterns of execution 
* [[41]] --> 1 
* [[40]] --> 2 
* [[38]] --> 3 
* [[37]] --> 4 
* [[40,[33,34,35,36]]] --> 5 
* [[39]] --> 6 
* [[39,[33,34,35,36]]] --> 7 
* [[37,[33,34,35,36]],[38,[33,34,35,36]]] --> 8 


### Specialization of cost equations fun6/3 
* CE 30 is refined into CE [66] 
* CE 31 is refined into CE [67,68,69,70,71,72,73] 


#### Refined cost equations fun6/3 
* CE 66: fun6(V1,V,Out) = 0
     [V>=0,V1>=0,Out=0] 
* CE 67: fun6(V1,V,Out) = 0+ fun6(W1,X1,Y1)+ fun3(Z1,A2,B2):2
     [W1>=0,W1+1=V1,Y1=0,X1=1,B2=2,A2=0,Z1=2,Out=2,V=1] 
* CE 68: fun6(V1,V,Out) = 0+ fun6(W1,X1,Y1)+ fun3(Z1,A2,Out):3
     [W1>=0,Out>=3,Out=Y1+1,Out=A2+1,W1+1=V1,X1=1,Z1=2,V=1] 
* CE 69: fun6(V1,V,Out) = 0+ fun6(W1,X1,Y1)+ fun3(Z1,A2,Out):4
     [W1>=0,Out>=2,Out+1=Y1,Out+1=A2,W1+1=V1,X1=1,Z1=2,V=1] 
* CE 70: fun6(V1,V,Out) = 0+ fun6(W1,X1,Y1)+ fun3(Z1,A2,Out):5
     [Z1>=Out,W1>=0,Out>=0,Z1>=3,Z1=X1+1,Z1=V+1,W1+1=V1,Y1=0,A2=0] 
* CE 71: fun6(V1,V,Out) = 0+ fun6(W1,X1,Y1)+ fun3(Z1,Y1,A2):6
     [W1>=0,Y1>=0,Z1>=1,Z1=X1+1,Z1=V+1,W1+1=V1,A2=0,Out=0] 
* CE 72: fun6(V1,V,Out) = 0+ fun6(W1,X1,Y1)+ fun3(Z1,Y1,Out):7
     [Z1>=Out+1,W1>=0,Out>=0,Y1>=0,Z1>=3,Z1=X1+1,Z1=V+1,W1+1=V1] 
* CE 73: fun6(V1,V,Out) = 0+ fun6(W1,X1,Y1)+ fun3(Z1,Y1,Out):8
     [Z1+Y1>=Out+1,W1>=0,Out>=0,Y1>=2,Z1>=3,Z1=X1+1,Z1=V+1,W1+1=V1] 

### Cost equations --> "Loop" of fun6/3 
* CEs [73] --> Loop 42 
* CEs [72] --> Loop 43 
* CEs [70] --> Loop 44 
* CEs [71] --> Loop 45 
* CEs [68] --> Loop 46 
* CEs [69] --> Loop 47 
* CEs [67] --> Loop 48 
* CEs [66] --> Loop 49 

#### Loops of fun6/3 
* Loop 42: fun6(V1,V,Out)->  fun6(V1',V,Out')
                  [V+Out'>=Out,Out'>=2,Out>=0,V>=2,V1>=1,V1=V1'+1] 
* Loop 43: fun6(V1,V,Out)->  fun6(V1',V,Out')
                  [V>=Out,Out'>=0,Out>=0,V>=2,V1>=1,V1=V1'+1] 
* Loop 44: fun6(V1,V,Out)->  fun6(V1',V,Out')
                  [V+1>=Out,Out>=0,V>=2,V1>=1,V1=V1'+1,Out'=0] 
* Loop 45: fun6(V1,V,Out)->  fun6(V1',V,Out')
                  [Out'>=0,V>=0,V1>=1,V1=V1'+1,Out=0] 
* Loop 46: fun6(V1,V,Out)->  fun6(V1',V',Out')
                  [Out>=3,V1>=1,Out=Out'+1,V1=V1'+1,V'=1,V=1] 
* Loop 47: fun6(V1,V,Out)->  fun6(V1',V',Out')
                  [Out>=2,V1>=1,Out+1=Out',V1=V1'+1,V'=1,V=1] 
* Loop 48: fun6(V1,V,Out)->  fun6(V1',V',Out')
                  [V1>=1,V1=V1'+1,Out'=0,V'=1,Out=2,V=1] 
* Loop 49: fun6(V1,V,Out) [V>=0,V1>=0,Out=0] 

### Ranking functions of CR fun6(V1,V,Out) 
* RF of phase [42,43,44,45,46,47,48]: [V1]

#### Partial ranking functions of CR fun6(V1,V,Out) 
* Partial RF of phase [42,43,44,45,46,47,48]:
  - RF of loop [42:1,43:1,44:1,45:1,46:1,47:1,48:1]:
    V1


### Resulting Chains:fun6(V1,V,Out) 
* [[42,43,44,45,46,47,48],49]
* [49]


### Merging Chains  fun6/3 into  External patterns of execution 
* [[49]] --> 1 
* [[49,[42,43,44,45,46,47,48]]] --> 2 


### Specialization of cost equations fun/3 
* CE 20 is refined into CE [74,75] 
* CE 19 is refined into CE [76] 
* CE 17 is refined into CE [77] 
* CE 18 is refined into CE [78] 


#### Refined cost equations fun/3 
* CE 74: fun(V1,V,Out) = 0+ fun6(W1,X1,Y1):1
     [X1>=0,W1>=0,X1+1=V,W1+1=V1,Y1=0,Out=1] 
* CE 75: fun(V1,V,Out) = 0+ fun6(W1,X1,Y1):2
     [Y1>=0,X1>=0,W1>=1,Y1+1=Out,X1+1=V,W1+1=V1] 
* CE 76: fun(V1,V,Out) = 0
     [V1>=1,Out=0,V=0] 
* CE 77: fun(V1,V,Out) = 0
     [V>=0,V1>=0,Out=0] 
* CE 78: fun(V1,V,Out) = 0
     [V>=1,Out=0,V1=0] 

### Cost equations --> "Loop" of fun/3 
* CEs [75] --> Loop 50 
* CEs [74] --> Loop 51 
* CEs [76] --> Loop 52 
* CEs [77,78] --> Loop 53 

#### Loops of fun/3 
* Loop 50: fun(V1,V,Out) [Out>=1,V>=1,V1>=2] 
* Loop 51: fun(V1,V,Out) [V>=1,V1>=1,Out=1] 
* Loop 52: fun(V1,V,Out) [V1>=1,Out=0,V=0] 
* Loop 53: fun(V1,V,Out) [V>=0,V1>=0,Out=0] 

### Ranking functions of CR fun(V1,V,Out) 

#### Partial ranking functions of CR fun(V1,V,Out) 


### Resulting Chains:fun(V1,V,Out) 
* [53]
* [52]
* [51]
* [50]


### Merging Chains  fun/3 into  External patterns of execution 
* [[52],[53]] --> 1 
* [[51]] --> 2 
* [[50]] --> 3 


### Specialization of cost equations mult/3 
* CE 23 is refined into CE [79,80,81] 
* CE 21 is refined into CE [82] 
* CE 22 is refined into CE [83] 


#### Refined cost equations mult/3 
* CE 79: mult(V1,V,Out) = 3+ fun(V1,W1,X1):1+ mult(V1,Y1,Z1)
     [Y1>=0,W1>=0,V1>=0,W1+Y1+1=V,Z1+1=Out,X1=0] 
* CE 80: mult(V1,V,Out) = 3+ fun(V1,W1,X1):2+ mult(V1,Y1,Z1)
     [Y1>=0,W1>=1,V1>=1,W1+Y1+1=V,Z1+2=Out,X1=1] 
* CE 81: mult(V1,V,Out) = 3+ fun(V1,W1,X1):3+ mult(V1,Y1,Z1)
     [Y1>=0,X1>=1,W1>=1,V1>=2,X1+Z1+1=Out,W1+Y1+1=V] 
* CE 82: mult(V1,V,Out) = 1
     [V>=0,V1>=0,Out=0] 
* CE 83: mult(V1,V,Out) = 2
     [V1>=0,Out=1,V=1] 

### Cost equations --> "Loop" of mult/3 
* CEs [82] --> Loop 54 
* CEs [83] --> Loop 55 
* CEs [81] --> Loop 56 
* CEs [80] --> Loop 57 
* CEs [79] --> Loop 58 

#### Loops of mult/3 
* Loop 54: mult(V1,V,Out) [V>=0,V1>=0,Out=0] 
* Loop 55: mult(V1,V,Out) [V1>=0,Out=1,V=1] 
* Loop 56: mult(V1,V,Out)->  mult(V1,V',Out')
                  [Out>=Out'+2,V>=V'+2,V'>=0,V1>=2] 
* Loop 57: mult(V1,V,Out)->  mult(V1,V',Out')
                  [V>=V'+2,V'>=0,V1>=1,Out=Out'+2] 
* Loop 58: mult(V1,V,Out)->  mult(V1,V',Out')
                  [V>=V'+1,V'>=0,V1>=0,Out=Out'+1] 

### Ranking functions of CR mult(V1,V,Out) 
* RF of phase [56,57,58]: [V]

#### Partial ranking functions of CR mult(V1,V,Out) 
* Partial RF of phase [56,57,58]:
  - RF of loop [56:1]:
    V-1
  - RF of loop [57:1]:
    V/2-1/2
  - RF of loop [58:1]:
    V


### Resulting Chains:mult(V1,V,Out) 
* [[56,57,58],55]
* [[56,57,58],54]
* [55]
* [54]


### Merging Chains  mult/3 into  External patterns of execution 
* [[55],[54,[56,57,58]],[55,[56,57,58]]] --> 1 
* [[54]] --> 2 


### Specialization of cost equations fun1/3 
* CE 16 is refined into CE [84] 
* CE 15 is refined into CE [85] 
* CE 14 is refined into CE [86,87] 


#### Refined cost equations fun1/3 
* CE 84: fun1(V1,V,Out) = 0
     [V>=0,V1>=0,Out=0] 
* CE 85: fun1(V1,V,Out) = 1
     [V>=0,Out=1,V1=1] 
* CE 86: fun1(V1,V,Out) = 2+ mult(W1,V,X1):1+ fun1(Y1,V,Z1)
     [Y1>=0,X1>=1,V>=1,W1>=0,X1+Z1+1=Out,W1+Y1+1=V1] 
* CE 87: fun1(V1,V,Out) = 2+ mult(W1,V,X1):2+ fun1(Y1,V,Z1)
     [Y1>=0,V>=0,W1>=0,W1+Y1+1=V1,Z1+1=Out,X1=0] 

### Cost equations --> "Loop" of fun1/3 
* CEs [86] --> Loop 59 
* CEs [87] --> Loop 60 
* CEs [84] --> Loop 61 
* CEs [85] --> Loop 62 

#### Loops of fun1/3 
* Loop 59: fun1(V1,V,Out)->  fun1(V1',V,Out')
                  [Out>=Out'+2,V1>=V1'+1,V1'>=0,V>=1] 
* Loop 60: fun1(V1,V,Out)->  fun1(V1',V,Out')
                  [V1>=V1'+1,V1'>=0,V>=0,Out=Out'+1] 
* Loop 61: fun1(V1,V,Out) [V>=0,V1>=0,Out=0] 
* Loop 62: fun1(V1,V,Out) [V>=0,Out=1,V1=1] 

### Ranking functions of CR fun1(V1,V,Out) 
* RF of phase [59,60]: [V1]

#### Partial ranking functions of CR fun1(V1,V,Out) 
* Partial RF of phase [59,60]:
  - RF of loop [59:1,60:1]:
    V1


### Resulting Chains:fun1(V1,V,Out) 
* [[59,60],62]
* [[59,60],61]
* [62]
* [61]


### Merging Chains  fun1/3 into  External patterns of execution 
* [[62],[61,[59,60]],[62,[59,60]]] --> 1 
* [[61]] --> 2 


### Specialization of cost equations start/2 
* CE 2 is refined into CE [88,89] 
* CE 3 is refined into CE [90] 
* CE 4 is refined into CE [91] 
* CE 5 is refined into CE [92,93,94,95,96,97] 
* CE 6 is refined into CE [98,99,100] 
* CE 7 is refined into CE [101,102] 
* CE 8 is refined into CE [103,104] 
* CE 9 is refined into CE [105,106,107,108,109,110,111,112] 
* CE 10 is refined into CE [113,114,115] 
* CE 11 is refined into CE [116,117] 
* CE 12 is refined into CE [118,119,120,121] 
* CE 13 is refined into CE [122,123,124,125] 


#### Refined cost equations start/2 
* CE 88: start(V1,V) = 1+ fun1(V1,V,W1):1
     [W1>=1,V>=0,V1>=1] 
* CE 89: start(V1,V) = 1+ fun1(V1,V,W1):2
     [V>=0,V1>=0,W1=0] 
* CE 90: start(V1,V) = 0
     [V>=0,V1>=0] 
* CE 91: start(V1,V) = 1
     [V>=0,V1=1] 
* CE 92: start(V1,V) = 2+ fun(V,W1,X1):1+ mult(V,Y1,Z1):1
     [Z1>=1,Y1>=1,V>=0,W1>=0,W1+Y1+1=V1,X1=0] 
* CE 93: start(V1,V) = 2+ fun(V,W1,X1):1+ mult(V,Y1,Z1):2
     [Y1>=0,V>=0,W1>=0,W1+Y1+1=V1,Z1=0,X1=0] 
* CE 94: start(V1,V) = 2+ fun(V,W1,X1):2+ mult(V,Y1,Z1):1
     [Z1>=1,Y1>=1,V>=1,W1>=1,W1+Y1+1=V1,X1=1] 
* CE 95: start(V1,V) = 2+ fun(V,W1,X1):2+ mult(V,Y1,Z1):2
     [Y1>=0,V>=1,W1>=1,W1+Y1+1=V1,Z1=0,X1=1] 
* CE 96: start(V1,V) = 2+ fun(V,W1,X1):3+ mult(V,Y1,Z1):1
     [Z1>=1,Y1>=1,V>=2,X1>=1,W1>=1,W1+Y1+1=V1] 
* CE 97: start(V1,V) = 2+ fun(V,W1,X1):3+ mult(V,Y1,Z1):2
     [Y1>=0,V>=2,X1>=1,W1>=1,W1+Y1+1=V1,Z1=0] 
* CE 98: start(V1,V) = 1+ fun(V1,V,W1):1
     [V>=0,V1>=0,W1=0] 
* CE 99: start(V1,V) = 1+ fun(V1,V,W1):2
     [V>=1,V1>=1,W1=1] 
* CE 100: start(V1,V) = 1+ fun(V1,V,W1):3
     [W1>=1,V>=1,V1>=2] 
* CE 101: start(V1,V) = 0+ fun1(V1,V,W1):1
     [W1>=1,V>=0,V1>=1] 
* CE 102: start(V1,V) = 0+ fun1(V1,V,W1):2
     [V>=0,V1>=0,W1=0] 
* CE 103: start(V1,V) = 0+ mult(V1,V,W1):1
     [W1>=1,V>=1,V1>=0] 
* CE 104: start(V1,V) = 0+ mult(V1,V,W1):2
     [V>=0,V1>=0,W1=0] 
* CE 105: start(V1,V) = 0+ fun3(W1,V,V):1
     [V>=0,W1=0,V1=0] 
* CE 106: start(V1,V) = 0+ fun3(W1,X1,Y1):2
     [Y1=2,X1=0,W1=2,V=0,V1=2] 
* CE 107: start(V1,V) = 0+ fun3(W1,X1,Y1):3
     [Y1>=3,Y1=X1+1,Y1=V+1,W1=2,V1=2] 
* CE 108: start(V1,V) = 0+ fun3(W1,X1,Y1):4
     [Y1>=2,Y1+1=X1,Y1+1=V,W1=2,V1=2] 
* CE 109: start(V1,V) = 0+ fun3(V1,W1,X1):5
     [V1>=X1,X1>=0,V1>=3,W1=0,V=0] 
* CE 110: start(V1,V) = 0+ fun3(V1,V,W1):6
     [V>=0,V1>=0,W1=0] 
* CE 111: start(V1,V) = 0+ fun3(V1,V,W1):7
     [V1>=W1+1,W1>=0,V>=0,V1>=3] 
* CE 112: start(V1,V) = 0+ fun3(V1,V,W1):8
     [V1+V>=W1+1,W1>=0,V>=2,V1>=3] 
* CE 113: start(V1,V) = 0+ fun(V1,V,W1):1
     [V>=0,V1>=0,W1=0] 
* CE 114: start(V1,V) = 0+ fun(V1,V,W1):2
     [V>=1,V1>=1,W1=1] 
* CE 115: start(V1,V) = 0+ fun(V1,V,W1):3
     [W1>=1,V>=1,V1>=2] 
* CE 116: start(V1,V) = 0+ fun6(V1,V,W1):1
     [V>=0,V1>=0,W1=0] 
* CE 117: start(V1,V) = 0+ fun6(V1,V,W1):2
     [W1>=0,V>=0,V1>=1] 
* CE 118: start(V1,V) = 0+ fun4(W1,X1):1
     [X1=2,W1=0,V1=0] 
* CE 119: start(V1,V) = 0+ fun4(V1,W1):2
     [V1>=0,W1=0] 
* CE 120: start(V1,V) = 0+ fun4(W1,X1):3
     [X1>=3,X1=W1+1,X1=V1+1] 
* CE 121: start(V1,V) = 0+ fun4(W1,X1):4
     [X1>=2,X1+1=W1,X1+1=V1] 
* CE 122: start(V1,V) = 0+ fun5(W1,X1):1
     [X1=2,W1=0,V1=0] 
* CE 123: start(V1,V) = 0+ fun5(V1,W1):2
     [V1>=0,W1=0] 
* CE 124: start(V1,V) = 0+ fun5(W1,X1):3
     [X1>=3,X1=W1+1,X1=V1+1] 
* CE 125: start(V1,V) = 0+ fun5(W1,X1):4
     [X1>=2,X1+1=W1,X1+1=V1] 

### Cost equations --> "Loop" of start/2 
* CEs [109] --> Loop 63 
* CEs [107,108] --> Loop 64 
* CEs [106] --> Loop 65 
* CEs [91] --> Loop 66 
* CEs [88,89,90,92,93,94,95,96,97,98,99,100,101,102,103,104,105,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125] --> Loop 67 

#### Loops of start/2 
* Loop 63: start(V1,V) [V1>=3,V=0] 
* Loop 64: start(V1,V) [V>=2,V1=2] 
* Loop 65: start(V1,V) [V=0,V1=2] 
* Loop 66: start(V1,V) [V>=0,V1=1] 
* Loop 67: start(V1,V) [V1>=0] 

### Ranking functions of CR start(V1,V) 

#### Partial ranking functions of CR start(V1,V) 


### Resulting Chains:start(V1,V) 
* [67]
* [66]
* [65]
* [64]
* [63]


### Merging Chains  start/2 into  External patterns of execution 
* [[66],[67]] --> 1 
* [[65]] --> 2 
* [[64]] --> 3 
* [[63]] --> 4 


Computing Bounds
=====================================

#### Cost of chains of fun4(V1,Out):
* Chain [28]: 0
  with precondition: [V1=0,Out=2] 

* Chain [27]: 0
  with precondition: [Out=0,V1>=0] 

* Chain [26]: 0
  with precondition: [V1+1=Out,V1>=2] 

* Chain [25]: 0
  with precondition: [V1=Out+1,V1>=3] 


#### Cost of chains of fun5(V1,Out):
* Chain [32]: 0
  with precondition: [V1=0,Out=2] 

* Chain [31]: 0
  with precondition: [Out=0,V1>=0] 

* Chain [30]: 0
  with precondition: [V1+1=Out,V1>=2] 

* Chain [29]: 0
  with precondition: [V1=Out+1,V1>=3] 


#### Cost of loops [33,34,35,36] 

 * loop 33:fun3(V1,V,Out) -> [fun3(V1',V',Out')] 
0
 * loop 34:fun3(V1,V,Out) -> [fun3(V1',V',Out')] 
0
 * loop 35:fun3(V1,V,Out) -> [fun3(V1',V',Out')] 
0
 * loop 36:fun3(V1,V,Out) -> [fun3(V1',V',Out')] 
0
#### Cost of phase [33,34,35,36]:fun3(V1,V,Out) -> [fun3(V1',V',Out')] 
0
#### Cost of phase [33,34,35,36]:fun3(V1,V,Out) -> [fun3(V1',V',Out')] 
0
#### Cost of phase [33,34,35,36]:fun3(V1,V,Out) -> [fun3(V1',V',Out')] 
0
#### Cost of phase [33,34,35,36]:fun3(V1,V,Out) -> [fun3(V1',V',Out')] 
0
#### Cost of chains of fun3(V1,V,Out):
* Chain [[33,34,35,36],40]: 0
  with precondition: [V=0,V1>=3,Out>=0,V1>=Out] 

* Chain [[33,34,35,36],39]: 0
  with precondition: [V1>=3,V>=0,Out>=0,V1>=Out+1] 

* Chain [[33,34,35,36],38]: 0
  with precondition: [V1>=3,V>=2,Out>=0,V+V1>=Out+1] 

* Chain [[33,34,35,36],37]: 0
  with precondition: [V1>=3,V>=3,Out>=0,V+V1>=Out+3] 

* Chain [41]: 0
  with precondition: [V1=0,V=Out,V>=0] 

* Chain [40]: 0
  with precondition: [V1=2,V=0,Out=2] 

* Chain [39]: 0
  with precondition: [Out=0,V1>=0,V>=0] 

* Chain [38]: 0
  with precondition: [V1=2,V+1=Out,V>=2] 

* Chain [37]: 0
  with precondition: [V1=2,V=Out+1,V>=3] 


#### Cost of loops [42,43,44,45,46,47,48] 

 * loop 42:fun6(V1,V,Out) -> [fun6(V1',V',Out')] 
0
 * loop 43:fun6(V1,V,Out) -> [fun6(V1',V',Out')] 
0
 * loop 44:fun6(V1,V,Out) -> [fun6(V1',V',Out')] 
0
 * loop 45:fun6(V1,V,Out) -> [fun6(V1',V',Out')] 
0
 * loop 46:fun6(V1,V,Out) -> [fun6(V1',V',Out')] 
0
 * loop 47:fun6(V1,V,Out) -> [fun6(V1',V',Out')] 
0
 * loop 48:fun6(V1,V,Out) -> [fun6(V1',V',Out')] 
0
#### Cost of phase [42,43,44,45,46,47,48]:fun6(V1,V,Out) -> [fun6(V1',V',Out')] 
0
#### Cost of chains of fun6(V1,V,Out):
* Chain [[42,43,44,45,46,47,48],49]: 0
  with precondition: [V1>=1,V>=0,Out>=0] 

* Chain [49]: 0
  with precondition: [Out=0,V1>=0,V>=0] 


#### Cost of chains of fun(V1,V,Out):
* Chain [53]: 0
  with precondition: [Out=0,V1>=0,V>=0] 

* Chain [52]: 0
  with precondition: [V=0,Out=0,V1>=1] 

* Chain [51]: 0
  with precondition: [Out=1,V1>=1,V>=1] 

* Chain [50]: 0
  with precondition: [V1>=2,V>=1,Out>=1] 


#### Cost of loops [56,57,58] 

 * loop 56:mult(V1,V,Out) -> [mult(V1',V',Out')] 
3
 * loop 57:mult(V1,V,Out) -> [mult(V1',V',Out')] 
3
 * loop 58:mult(V1,V,Out) -> [mult(V1',V',Out')] 
3
#### Cost of phase [56,57,58]:mult(V1,V,Out) -> [mult(V1',V',Out')] 
6*it(56)+3*it(57)+0
  Such that:it(57) =< V/2
it(57) =< V/2-V'/2
aux(5) =< V
aux(6) =< V-V'
it(56) =< aux(5)
it(57) =< aux(5)
it(56) =< aux(6)
it(57) =< aux(6)

#### Cost of phase [56,57,58]:mult(V1,V,Out) -> [mult(V1',V',Out')] 
6*it(56)+3*it(57)+0
  Such that:it(57) =< V/2
it(57) =< V/2-V'/2
aux(5) =< V
aux(6) =< V-V'
it(56) =< aux(5)
it(57) =< aux(5)
it(56) =< aux(6)
it(57) =< aux(6)

#### Cost of chains of mult(V1,V,Out):
* Chain [[56,57,58],55]: 6*it(56)+3*it(57)+2
  Such that:it(57) =< V/2
aux(7) =< V
it(56) =< aux(7)
it(57) =< aux(7)

  with precondition: [V1>=0,V>=2,Out>=2] 

* Chain [[56,57,58],54]: 6*it(56)+3*it(57)+1
  Such that:it(57) =< V/2
aux(8) =< V
it(56) =< aux(8)
it(57) =< aux(8)

  with precondition: [V1>=0,V>=1,Out>=1] 

* Chain [55]: 2
  with precondition: [V=1,Out=1,V1>=0] 

* Chain [54]: 1
  with precondition: [Out=0,V1>=0,V>=0] 


#### Cost of loops [59,60] 

 * loop 59:fun1(V1,V,Out) -> [fun1(V1',V',Out')] 
6*s(13)+12*s(14)+4
  Such that:s(11) =< V'
s(12) =< V'/2
s(13) =< s(12)
s(14) =< s(11)
s(13) =< s(11)

 * loop 60:fun1(V1,V,Out) -> [fun1(V1',V',Out')] 
3
#### Cost of phase [59,60]:fun1(V1,V,Out) -> [fun1(V1',V',Out')] 
7*it(59)+6*s(15)+12*s(16)+0
  Such that:aux(11) =< V
aux(13) =< V1
aux(14) =< V1-V1'
it(59) =< aux(13)
it(59) =< aux(14)
aux(12) =< it(59)*aux(11)
s(18) =< aux(12)* (1/2)
s(15) =< s(18)
s(16) =< aux(12)
s(15) =< aux(12)

#### Cost of phase [59,60]:fun1(V1,V,Out) -> [fun1(V1',V',Out')] 
7*it(59)+6*s(15)+12*s(16)+0
  Such that:aux(11) =< V
aux(13) =< V1
aux(14) =< V1-V1'
it(59) =< aux(13)
it(59) =< aux(14)
aux(12) =< it(59)*aux(11)
s(18) =< aux(12)* (1/2)
s(15) =< s(18)
s(16) =< aux(12)
s(15) =< aux(12)

#### Cost of chains of fun1(V1,V,Out):
* Chain [[59,60],62]: 7*it(59)+6*s(15)+12*s(16)+1
  Such that:aux(11) =< V
aux(15) =< V1
it(59) =< aux(15)
aux(12) =< it(59)*aux(11)
s(18) =< aux(12)* (1/2)
s(15) =< s(18)
s(16) =< aux(12)
s(15) =< aux(12)

  with precondition: [V1>=2,V>=0,Out>=2] 

* Chain [[59,60],61]: 7*it(59)+6*s(15)+12*s(16)+0
  Such that:aux(11) =< V
aux(16) =< V1
it(59) =< aux(16)
aux(12) =< it(59)*aux(11)
s(18) =< aux(12)* (1/2)
s(15) =< s(18)
s(16) =< aux(12)
s(15) =< aux(12)

  with precondition: [V1>=1,V>=0,Out>=1] 

* Chain [62]: 1
  with precondition: [V1=1,Out=1,V>=0] 

* Chain [61]: 0
  with precondition: [Out=0,V1>=0,V>=0] 


#### Cost of chains of start(V1,V):
* Chain [67]: 64*s(35)+24*s(38)+48*s(39)+18*s(42)+6*s(61)+12*s(62)+4
  Such that:s(60) =< V/2
aux(19) =< V1
aux(20) =< V1/2
aux(21) =< V
s(35) =< aux(19)
s(36) =< s(35)*aux(21)
s(37) =< s(36)* (1/2)
s(38) =< s(37)
s(39) =< s(36)
s(38) =< s(36)
s(42) =< aux(20)
s(42) =< aux(19)
s(61) =< s(60)
s(62) =< aux(21)
s(61) =< aux(21)

  with precondition: [V1>=0] 

* Chain [66]: 1
  with precondition: [V1=1,V>=0] 

* Chain [65]: 0
  with precondition: [V1=2,V=0] 

* Chain [64]: 0
  with precondition: [V1=2,V>=2] 

* Chain [63]: 0
  with precondition: [V=0,V1>=3] 


Closed-form bounds of start(V1,V): 
-------------------------------------
* Chain [67] with precondition: [V1>=0] 
    - Upper bound: 64*V1+4+nat(V)*12+nat(V)*60*V1+9*V1+nat(V/2)*6 
    - Complexity: n^2 
* Chain [66] with precondition: [V1=1,V>=0] 
    - Upper bound: 1 
    - Complexity: constant 
* Chain [65] with precondition: [V1=2,V=0] 
    - Upper bound: 0 
    - Complexity: constant 
* Chain [64] with precondition: [V1=2,V>=2] 
    - Upper bound: 0 
    - Complexity: constant 
* Chain [63] with precondition: [V=0,V1>=3] 
    - Upper bound: 0 
    - Complexity: constant 

### Maximum cost of start(V1,V): max([1,64*V1+4+nat(V)*12+nat(V)*60*V1+9*V1+nat(V/2)*6]) 
Asymptotic class: n^2 

Time statistics: 
-------------------------------------
* Partial evaluation computed in 30 ms.
* Invariants computed in 71 ms.
   - Backward Invariants 36 ms.
   - Transitive Invariants 14 ms.
* Refinement performed in 156 ms.
* Termination proved in 16 ms.
* Upper bounds computed in 120 ms.
   - Equation cost structures 57 ms.
   - Phase cost structures 54 ms.
   - Chain cost structures 20 ms.
   - Solving cost expressions 1 ms.
* Total analysis performed in 440 ms.


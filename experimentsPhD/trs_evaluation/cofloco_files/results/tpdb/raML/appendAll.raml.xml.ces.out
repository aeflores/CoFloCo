
Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. recursive  : [append/3,fun/3]
1. recursive [non_tail] : [appendAll/2,fun1/2]
2. recursive [non_tail] : [appendAll2/2,fun2/2]
3. recursive [non_tail] : [appendAll3/2,fun3/2]
4. non_recursive  : [start/2]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into append/3
1. SCC is partially evaluated into appendAll/2
2. SCC is partially evaluated into appendAll2/2
3. SCC is partially evaluated into fun3/2
4. SCC is partially evaluated into start/2

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations append/3 
* CE 18 is refined into CE [19] 
* CE 17 is refined into CE [20] 


#### Refined cost equations append/3 
* CE 19: append(V2,V1,Out) = 2+ append(W2,V1,X2)
     [V2+X2>=Out,Out>=X2+1,V1>=0,Out+W2=V2+X2] 
* CE 20: append(A,B,B) = 2
     [B>=0,A=0] 

### Cost equations --> "Loop" of append/3 
* CEs [20] --> Loop 10 
* CEs [19] --> Loop 11 

#### Loops of append/3 
* Loop 10: append(A,B,B) [B>=0,A=0] 
* Loop 11: append(V2,V1,Out)->  append(V2',V1,Out')
                  [V2+Out'>=Out,Out>=Out'+1,V1>=0,V2+Out'=Out+V2'] 

### Ranking functions of CR append(V2,V1,Out) 
* RF of phase [11]: [V2]

#### Partial ranking functions of CR append(V2,V1,Out) 
* Partial RF of phase [11]:
  - RF of loop [11:1]:
    V2


### Resulting Chains:append(V2,V1,Out) 
* [[11],10]
* [10]


### Merging Chains  append/3 into  External patterns of execution 
* [[10]] --> 1 
* [[10,[11]]] --> 2 


### Specialization of cost equations appendAll/2 
* CE 14 is refined into CE [21,22] 
* CE 13 is refined into CE [23] 


#### Refined cost equations appendAll/2 
* CE 21: appendAll(V2,Out) = 2+ appendAll(W2,Out)+ append(X2,Out,Out):1
     [W2>=0,Out>=0,W2+1=V2,X2=0] 
* CE 22: appendAll(V2,Out) = 2+ appendAll(W2,X2)+ append(Y2,Z2,Out):2
     [Out>=Y2,W2>=0,Y2>=1,Out=Y2+X2,Out=Y2+Z2,Y2+W2+1=V2] 
* CE 23: appendAll(V2,Out) = 2
     [Out=0,V2=0] 

### Cost equations --> "Loop" of appendAll/2 
* CEs [23] --> Loop 12 
* CEs [22] --> Loop 13 
* CEs [21] --> Loop 14 

#### Loops of appendAll/2 
* Loop 12: appendAll(V2,Out) [Out=0,V2=0] 
* Loop 13: appendAll(V2,Out)->  appendAll(V2',Out')
                  [Out+V2'+1>=V2,V2>=V2'+2,V2'>=0,V2+Out'=Out+V2'+1] 
* Loop 14: appendAll(V2,Out)->  appendAll(V2',Out)
                  [Out>=0,V2>=1,V2=V2'+1] 

### Ranking functions of CR appendAll(V2,Out) 
* RF of phase [13,14]: [V2]

#### Partial ranking functions of CR appendAll(V2,Out) 
* Partial RF of phase [13,14]:
  - RF of loop [13:1]:
    V2-1
  - RF of loop [14:1]:
    V2


### Resulting Chains:appendAll(V2,Out) 
* [[13,14],12]
* [12]


### Merging Chains  appendAll/2 into  External patterns of execution 
* [[12]] --> 1 
* [[12,[13,14]]] --> 2 


### Specialization of cost equations appendAll2/2 
* CE 16 is refined into CE [24,25,26] 
* CE 15 is refined into CE [27] 


#### Refined cost equations appendAll2/2 
* CE 24: appendAll2(V2,Out) = 2+ appendAll(W2,X2):1+ appendAll2(Y2,Out)+ append(Z2,Out,Out):1
     [Y2>=0,Out>=0,Y2+1=V2,Z2=0,X2=0,W2=0] 
* CE 25: appendAll2(V2,Out) = 2+ appendAll(W2,X2):2+ appendAll2(Y2,Out)+ append(Z2,Out,Out):1
     [Y2>=0,Out>=0,W2>=1,W2+Y2+1=V2,Z2=0,X2=0] 
* CE 26: appendAll2(V2,Out) = 2+ appendAll(W2,X2):2+ appendAll2(Y2,Z2)+ append(X2,A3,Out):2
     [Out>=X2,W2>=X2+1,Y2>=0,X2>=1,Out=X2+Z2,Out=X2+A3,W2+Y2+1=V2] 
* CE 27: appendAll2(V2,Out) = 2
     [Out=0,V2=0] 

### Cost equations --> "Loop" of appendAll2/2 
* CEs [27] --> Loop 15 
* CEs [26] --> Loop 16 
* CEs [25] --> Loop 17 
* CEs [24] --> Loop 18 

#### Loops of appendAll2/2 
* Loop 15: appendAll2(V2,Out) [Out=0,V2=0] 
* Loop 16: appendAll2(V2,Out)->  appendAll2(V2',Out')
                  [V2+Out'>=Out+V2'+2,Out>=Out'+1,Out'>=0,V2'>=0] 
* Loop 17: appendAll2(V2,Out)->  appendAll2(V2',Out)
                  [V2>=V2'+2,V2'>=0,Out>=0] 
* Loop 18: appendAll2(V2,Out)->  appendAll2(V2',Out)
                  [Out>=0,V2>=1,V2=V2'+1] 

### Ranking functions of CR appendAll2(V2,Out) 
* RF of phase [16,17,18]: [V2]

#### Partial ranking functions of CR appendAll2(V2,Out) 
* Partial RF of phase [16,17,18]:
  - RF of loop [16:1]:
    V2-2
  - RF of loop [17:1]:
    V2-1
  - RF of loop [18:1]:
    V2


### Resulting Chains:appendAll2(V2,Out) 
* [[16,17,18],15]
* [15]


### Merging Chains  appendAll2/2 into  External patterns of execution 
* [[15]] --> 1 
* [[15,[16,17,18]]] --> 2 


### Specialization of cost equations fun3/2 
* CE 12 is refined into CE [28] 
* CE 11 is refined into CE [29,30,31] 


#### Refined cost equations fun3/2 
* CE 28: fun3(V2,Out) = 1
     [Out=0,V2=0] 
* CE 29: fun3(V2,Out) = 2+ appendAll2(W2,X2):1+ fun3(Y2,Out)+ append(Z2,Out,Out):1
     [Y2>=0,Out>=0,Y2+1=V2,Z2=0,X2=0,W2=0] 
* CE 30: fun3(V2,Out) = 2+ appendAll2(W2,X2):2+ fun3(Y2,Out)+ append(Z2,Out,Out):1
     [Y2>=0,Out>=0,W2>=1,W2+Y2+1=V2,Z2=0,X2=0] 
* CE 31: fun3(V2,Out) = 2+ appendAll2(W2,X2):2+ fun3(Y2,Z2)+ append(X2,A3,Out):2
     [Out>=X2,W2>=X2+1,Y2>=0,X2>=1,Out=X2+Z2,Out=X2+A3,W2+Y2+1=V2] 

### Cost equations --> "Loop" of fun3/2 
* CEs [31] --> Loop 19 
* CEs [30] --> Loop 20 
* CEs [29] --> Loop 21 
* CEs [28] --> Loop 22 

#### Loops of fun3/2 
* Loop 19: fun3(V2,Out)->  fun3(V2',Out')
                  [V2+Out'>=Out+V2'+2,Out>=Out'+1,Out'>=0,V2'>=0] 
* Loop 20: fun3(V2,Out)->  fun3(V2',Out)
                  [V2>=V2'+2,V2'>=0,Out>=0] 
* Loop 21: fun3(V2,Out)->  fun3(V2',Out)
                  [Out>=0,V2>=1,V2=V2'+1] 
* Loop 22: fun3(V2,Out) [Out=0,V2=0] 

### Ranking functions of CR fun3(V2,Out) 
* RF of phase [19,20,21]: [V2]

#### Partial ranking functions of CR fun3(V2,Out) 
* Partial RF of phase [19,20,21]:
  - RF of loop [19:1]:
    V2-2
  - RF of loop [20:1]:
    V2-1
  - RF of loop [21:1]:
    V2


### Resulting Chains:fun3(V2,Out) 
* [[19,20,21],22]
* [22]


### Merging Chains  fun3/2 into  External patterns of execution 
* [[22]] --> 1 
* [[22,[19,20,21]]] --> 2 


### Specialization of cost equations start/2 
* CE 2 is refined into CE [32,33] 
* CE 3 is refined into CE [34] 
* CE 4 is refined into CE [35,36,37,38,39,40] 
* CE 5 is refined into CE [41,42,43,44] 
* CE 6 is refined into CE [45,46] 
* CE 7 is refined into CE [47,48] 
* CE 8 is refined into CE [49,50] 
* CE 9 is refined into CE [51,52] 
* CE 10 is refined into CE [53,54] 


#### Refined cost equations start/2 
* CE 32: start(V2,V1) = 1+ fun3(W2,X2):1
     [X2=0,W2=0,V2=0] 
* CE 33: start(V2,V1) = 1+ fun3(V2,W2):2
     [V2>=W2+1,W2>=0] 
* CE 34: start(V2,V1) = 1
     [V2=0] 
* CE 35: start(V2,V1) = 1+ appendAll(W2,X2):1+ appendAll2(Y2,Z2):1+ append(A3,B3,C3):1
     [C3=0,B3=0,A3=0,Z2=0,Y2=0,X2=0,W2=0,V2=1] 
* CE 36: start(V2,V1) = 1+ appendAll(W2,X2):1+ appendAll2(Y2,Z2):2+ append(A3,Z2,Z2):1
     [Y2>=Z2+1,Z2>=0,Y2+1=V2,A3=0,X2=0,W2=0] 
* CE 37: start(V2,V1) = 1+ appendAll(W2,X2):2+ appendAll2(Y2,Z2):1+ append(A3,B3,C3):1
     [W2>=1,W2+1=V2,C3=0,B3=0,A3=0,Z2=0,Y2=0,X2=0] 
* CE 38: start(V2,V1) = 1+ appendAll(W2,X2):2+ appendAll2(Y2,Z2):1+ append(X2,A3,X2):2
     [W2>=X2+1,X2>=1,W2+1=V2,A3=0,Z2=0,Y2=0] 
* CE 39: start(V2,V1) = 1+ appendAll(W2,X2):2+ appendAll2(Y2,Z2):2+ append(A3,Z2,Z2):1
     [Y2>=Z2+1,Z2>=0,W2>=1,W2+Y2+1=V2,A3=0,X2=0] 
* CE 40: start(V2,V1) = 1+ appendAll(W2,X2):2+ appendAll2(Y2,Z2):2+ append(X2,A3,B3):2
     [X2+Y2>=B3+1,B3>=X2,W2>=X2+1,X2>=1,B3=X2+A3,B3=X2+Z2,W2+Y2+1=V2] 
* CE 41: start(V2,V1) = 1+ appendAll(W2,X2):1+ append(Y2,Z2,A3):1
     [A3=0,Z2=0,Y2=0,X2=0,W2=0,V2=1] 
* CE 42: start(V2,V1) = 1+ appendAll(W2,X2):1+ append(Y2,Z2,Y2):2
     [Y2>=1,Y2+1=V2,Z2=0,X2=0,W2=0] 
* CE 43: start(V2,V1) = 1+ appendAll(W2,X2):2+ append(Y2,X2,X2):1
     [W2>=X2+1,X2>=0,W2+1=V2,Y2=0] 
* CE 44: start(V2,V1) = 1+ appendAll(W2,X2):2+ append(Y2,Z2,A3):2
     [W2+Y2>=A3+1,A3>=Y2,Y2>=1,A3=Y2+Z2,A3=X2+Y2,W2+Y2+1=V2] 
* CE 45: start(V2,V1) = 1+ append(W2,V1,V1):1
     [V1>=0,V2>=1,W2=0] 
* CE 46: start(V2,V1) = 1+ append(W2,X2,Y2):2
     [Y2>=W2,V2>=W2+1,W2>=1,Y2=W2+X2,Y2=V1+W2] 
* CE 47: start(V2,V1) = 0+ append(W2,V1,V1):1
     [V1>=0,W2=0,V2=0] 
* CE 48: start(V2,V1) = 0+ append(V2,W2,X2):2
     [X2>=V2,V2>=1,X2=V2+W2,X2=V2+V1] 
* CE 49: start(V2,V1) = 0+ appendAll(W2,X2):1
     [X2=0,W2=0,V2=0] 
* CE 50: start(V2,V1) = 0+ appendAll(V2,W2):2
     [V2>=W2+1,W2>=0] 
* CE 51: start(V2,V1) = 0+ appendAll2(W2,X2):1
     [X2=0,W2=0,V2=0] 
* CE 52: start(V2,V1) = 0+ appendAll2(V2,W2):2
     [V2>=W2+1,W2>=0] 
* CE 53: start(V2,V1) = 0+ fun3(W2,X2):1
     [X2=0,W2=0,V2=0] 
* CE 54: start(V2,V1) = 0+ fun3(V2,W2):2
     [V2>=W2+1,W2>=0] 

### Cost equations --> "Loop" of start/2 
* CEs [33,35,36,37,38,39,40,41,42,43,44,45,46,48,50,52,54] --> Loop 23 
* CEs [32,34,47,49,51,53] --> Loop 24 

#### Loops of start/2 
* Loop 23: start(V2,V1) [V2>=1] 
* Loop 24: start(V2,V1) [V2=0] 

### Ranking functions of CR start(V2,V1) 

#### Partial ranking functions of CR start(V2,V1) 


### Resulting Chains:start(V2,V1) 
* [24]
* [23]


### Merging Chains  start/2 into  External patterns of execution 
* [[24]] --> 1 
* [[23]] --> 2 


Computing Bounds
=====================================

#### Cost of loops [11] 

 * loop 11:append(V2,V1,Out) -> [append(V2',V1',Out')] 
2
#### Cost of phase [11]:append(V2,V1,Out) -> [append(V2',V1',Out')] 
2*it(11)+0
  Such that:it(11) =< V2
it(11) =< V2-V2'

#### Cost of chains of append(V2,V1,Out):
* Chain [[11],10]: 2*it(11)+2
  Such that:it(11) =< -V1+Out

  with precondition: [V1+V2=Out,V2>=1,V1>=0] 

* Chain [10]: 2
  with precondition: [V2=0,V1=Out,V1>=0] 


#### Cost of loops [13,14] 

 * loop 13:appendAll(V2,Out) -> [appendAll(V2',Out')] 
2*s(2)+4
  Such that:s(2) =< V2-V2'

 * loop 14:appendAll(V2,Out) -> [appendAll(V2',Out')] 
4
#### Cost of phase [13,14]:appendAll(V2,Out) -> [appendAll(V2',Out')] 
10*it(13)+0
  Such that:aux(1) =< V2
aux(2) =< V2-V2'
it(13) =< aux(1)
it(13) =< aux(2)

#### Cost of chains of appendAll(V2,Out):
* Chain [[13,14],12]: 10*it(13)+2
  Such that:aux(3) =< V2
it(13) =< aux(3)

  with precondition: [Out>=0,V2>=Out+1] 

* Chain [12]: 2
  with precondition: [V2=0,Out=0] 


#### Cost of loops [16,17,18] 

 * loop 16:appendAll2(V2,Out) -> [appendAll2(V2',Out')] 
12*s(8)+6
  Such that:s(7) =< V2-V2'
s(8) =< s(7)

 * loop 17:appendAll2(V2,Out) -> [appendAll2(V2',Out')] 
10*s(12)+6
  Such that:s(11) =< V2-V2'
s(12) =< s(11)

 * loop 18:appendAll2(V2,Out) -> [appendAll2(V2',Out')] 
6
#### Cost of phase [16,17,18]:appendAll2(V2,Out) -> [appendAll2(V2',Out')] 
18*it(16)+22*s(13)+0
  Such that:aux(5) =< V2
aux(6) =< V2-V2'
it(16) =< aux(5)
s(14) =< aux(5)
it(16) =< aux(6)
s(14) =< aux(6)
s(13) =< s(14)

#### Cost of chains of appendAll2(V2,Out):
* Chain [[16,17,18],15]: 40*it(16)+2
  Such that:aux(7) =< V2
it(16) =< aux(7)

  with precondition: [Out>=0,V2>=Out+1] 

* Chain [15]: 2
  with precondition: [V2=0,Out=0] 


#### Cost of loops [19,20,21] 

 * loop 19:fun3(V2,Out) -> [fun3(V2',Out')] 
42*s(21)+6
  Such that:s(20) =< V2-V2'
s(21) =< s(20)

 * loop 20:fun3(V2,Out) -> [fun3(V2',Out')] 
40*s(25)+6
  Such that:s(24) =< V2-V2'
s(25) =< s(24)

 * loop 21:fun3(V2,Out) -> [fun3(V2',Out')] 
6
#### Cost of phase [19,20,21]:fun3(V2,Out) -> [fun3(V2',Out')] 
18*it(19)+82*s(26)+0
  Such that:aux(9) =< V2
aux(10) =< V2-V2'
it(19) =< aux(9)
s(27) =< aux(9)
it(19) =< aux(10)
s(27) =< aux(10)
s(26) =< s(27)

#### Cost of chains of fun3(V2,Out):
* Chain [[19,20,21],22]: 100*it(19)+1
  Such that:aux(11) =< V2
it(19) =< aux(11)

  with precondition: [Out>=0,V2>=Out+1] 

* Chain [22]: 1
  with precondition: [V2=0,Out=0] 


#### Cost of chains of start(V2,V1):
* Chain [24]: 2
  with precondition: [V2=0] 

* Chain [23]: 442*s(31)+7
  Such that:aux(16) =< V2
s(31) =< aux(16)

  with precondition: [V2>=1] 


Closed-form bounds of start(V2,V1): 
-------------------------------------
* Chain [24] with precondition: [V2=0] 
    - Upper bound: 2 
    - Complexity: constant 
* Chain [23] with precondition: [V2>=1] 
    - Upper bound: 442*V2+7 
    - Complexity: n 

### Maximum cost of start(V2,V1): 442*V2+7 
Asymptotic class: n 

Time statistics: 
-------------------------------------
* Partial evaluation computed in 17 ms.
* Invariants computed in 22 ms.
   - Backward Invariants 8 ms.
   - Transitive Invariants 5 ms.
* Refinement performed in 70 ms.
* Termination proved in 9 ms.
* Upper bounds computed in 72 ms.
   - Equation cost structures 32 ms.
   - Phase cost structures 41 ms.
   - Chain cost structures 9 ms.
   - Solving cost expressions 0 ms.
* Total analysis performed in 212 ms.


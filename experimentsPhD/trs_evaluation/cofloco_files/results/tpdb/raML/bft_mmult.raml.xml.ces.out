
Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. recursive  : [appendreverse/3,fun2/3]
1. non_recursive  : [fun13/3]
2. non_recursive  : [enqueue/3]
3. non_recursive  : [fun17/2]
4. non_recursive  : [fun18/2]
5. recursive [non_tail] : [fun1/3]
6. non_recursive  : [plus/3]
7. recursive [non_tail] : [fun19/3]
8. non_recursive  : [fun/3]
9. non_recursive  : [times/3]
10. recursive  : [fun14/4,fun15/5,lineMult/4]
11. recursive  : [computeLine/4,fun10/5,fun9/4]
12. recursive  : [fun16/3,matrixMult/3]
13. non_recursive  : [fun12/2]
14. non_recursive  : [reverse/2]
15. non_recursive  : [fun11/3]
16. non_recursive  : [dequeue/3]
17. non_recursive  : [fun5/2]
18. recursive  : [fun3/3,fun4/3,fun6/4,fun7/4,fun8/4]
19. non_recursive  : [bftMult/3]
20. non_recursive  : [start/4]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into appendreverse/3
1. SCC is partially evaluated into fun13/3
2. SCC is completely evaluated into other SCCs
3. SCC is partially evaluated into fun17/2
4. SCC is partially evaluated into fun18/2
5. SCC is partially evaluated into fun1/3
6. SCC is completely evaluated into other SCCs
7. SCC is partially evaluated into fun19/3
8. SCC is partially evaluated into fun/3
9. SCC is completely evaluated into other SCCs
10. SCC is partially evaluated into lineMult/4
11. SCC is partially evaluated into computeLine/4
12. SCC is partially evaluated into matrixMult/3
13. SCC is partially evaluated into fun12/2
14. SCC is completely evaluated into other SCCs
15. SCC is partially evaluated into fun11/3
16. SCC is completely evaluated into other SCCs
17. SCC is partially evaluated into fun5/2
18. SCC is partially evaluated into fun3/3
19. SCC is completely evaluated into other SCCs
20. SCC is partially evaluated into start/4

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations appendreverse/3 
* CE 74 is refined into CE [92] 
* CE 72 is refined into CE [93] 
* CE 73 is refined into CE [94] 


#### Refined cost equations appendreverse/3 
* CE 92: appendreverse(V1,V,Out) = 2+ appendreverse(W1,X1,Out)
     [V1+V>=X1,X1>=V+1,V>=0,V1+V=W1+X1] 
* CE 93: appendreverse(V1,V,Out) = 1
     [V>=0,V1>=0,Out=0] 
* CE 94: appendreverse(A,B,B) = 2
     [B>=0,A=2] 

### Cost equations --> "Loop" of appendreverse/3 
* CEs [93] --> Loop 48 
* CEs [94] --> Loop 49 
* CEs [92] --> Loop 50 

#### Loops of appendreverse/3 
* Loop 48: appendreverse(V1,V,Out) [V>=0,V1>=0,Out=0] 
* Loop 49: appendreverse(A,B,B) [B>=0,A=2] 
* Loop 50: appendreverse(V1,V,Out)->  appendreverse(V1',V',Out)
                  [V1+V>=V',V'>=V+1,V>=0,V1+V=V1'+V'] 

### Ranking functions of CR appendreverse(V1,V,Out) 
* RF of phase [50]: [V1]

#### Partial ranking functions of CR appendreverse(V1,V,Out) 
* Partial RF of phase [50]:
  - RF of loop [50:1]:
    V1


### Resulting Chains:appendreverse(V1,V,Out) 
* [[50],49]
* [[50],48]
* [49]
* [48]


### Merging Chains  appendreverse/3 into  External patterns of execution 
* [[49]] --> 1 
* [[48],[48,[50]]] --> 2 
* [[49,[50]]] --> 3 


### Specialization of cost equations fun13/3 
* CE 47 is refined into CE [95] 
* CE 48 is refined into CE [96] 


#### Refined cost equations fun13/3 
* CE 95: fun13(V1,V,Out) = 1
     [V>=0,V1>=1,V1+V+1=Out] 
* CE 96: fun13(V1,V,Out) = 0
     [V>=0,V1>=0,Out=0] 

### Cost equations --> "Loop" of fun13/3 
* CEs [95] --> Loop 51 
* CEs [96] --> Loop 52 

#### Loops of fun13/3 
* Loop 51: fun13(V1,V,Out) [V>=0,V1>=1,V1+V+1=Out] 
* Loop 52: fun13(V1,V,Out) [V>=0,V1>=0,Out=0] 

### Ranking functions of CR fun13(V1,V,Out) 

#### Partial ranking functions of CR fun13(V1,V,Out) 


### Resulting Chains:fun13(V1,V,Out) 
* [52]
* [51]


### Merging Chains  fun13/3 into  External patterns of execution 
* [[52]] --> 1 
* [[51]] --> 2 


### Specialization of cost equations fun17/2 
* CE 87 is refined into CE [97] 
* CE 85 is refined into CE [98] 
* CE 86 is refined into CE [99] 
* CE 84 is refined into CE [100] 


#### Refined cost equations fun17/2 
* CE 97: fun17(V1,Out) = 0
     [V1>=3,V1=Out+1] 
* CE 98: fun17(V1,Out) = 0
     [V1>=2,V1+1=Out] 
* CE 99: fun17(V1,Out) = 0
     [V1>=0,Out=0] 
* CE 100: fun17(V1,Out) = 0
     [Out=2,V1=0] 

### Cost equations --> "Loop" of fun17/2 
* CEs [97] --> Loop 53 
* CEs [98] --> Loop 54 
* CEs [99] --> Loop 55 
* CEs [100] --> Loop 56 

#### Loops of fun17/2 
* Loop 53: fun17(V1,Out) [V1>=3,V1=Out+1] 
* Loop 54: fun17(V1,Out) [V1>=2,V1+1=Out] 
* Loop 55: fun17(V1,Out) [V1>=0,Out=0] 
* Loop 56: fun17(V1,Out) [Out=2,V1=0] 

### Ranking functions of CR fun17(V1,Out) 

#### Partial ranking functions of CR fun17(V1,Out) 


### Resulting Chains:fun17(V1,Out) 
* [56]
* [55]
* [54]
* [53]


### Merging Chains  fun17/2 into  External patterns of execution 
* [[56]] --> 1 
* [[55]] --> 2 
* [[54]] --> 3 
* [[53]] --> 4 


### Specialization of cost equations fun18/2 
* CE 90 is refined into CE [101] 
* CE 91 is refined into CE [102] 
* CE 89 is refined into CE [103] 
* CE 88 is refined into CE [104] 


#### Refined cost equations fun18/2 
* CE 101: fun18(V1,Out) = 0
     [V1>=3,V1=Out+1] 
* CE 102: fun18(V1,Out) = 0
     [V1>=2,V1+1=Out] 
* CE 103: fun18(V1,Out) = 0
     [V1>=0,Out=0] 
* CE 104: fun18(V1,Out) = 0
     [Out=2,V1=0] 

### Cost equations --> "Loop" of fun18/2 
* CEs [101] --> Loop 57 
* CEs [102] --> Loop 58 
* CEs [103] --> Loop 59 
* CEs [104] --> Loop 60 

#### Loops of fun18/2 
* Loop 57: fun18(V1,Out) [V1>=3,V1=Out+1] 
* Loop 58: fun18(V1,Out) [V1>=2,V1+1=Out] 
* Loop 59: fun18(V1,Out) [V1>=0,Out=0] 
* Loop 60: fun18(V1,Out) [Out=2,V1=0] 

### Ranking functions of CR fun18(V1,Out) 

#### Partial ranking functions of CR fun18(V1,Out) 


### Resulting Chains:fun18(V1,Out) 
* [60]
* [59]
* [58]
* [57]


### Merging Chains  fun18/2 into  External patterns of execution 
* [[60]] --> 1 
* [[59]] --> 2 
* [[58]] --> 3 
* [[57]] --> 4 


### Specialization of cost equations fun1/3 
* CE 71 is refined into CE [105] 
* CE 67 is refined into CE [106,107,108,109] 
* CE 69 is refined into CE [110,111,112,113] 
* CE 66 is refined into CE [114] 
* CE 68 is refined into CE [115,116,117,118] 
* CE 70 is refined into CE [119,120,121,122] 


#### Refined cost equations fun1/3 
* CE 105: fun1(V1,V,Out) = 0
     [V>=0,V1>=0,Out=0] 
* CE 106: fun1(V1,V,Out) = 0+ fun17(W1,X1):1
     [X1=2,W1=0,Out=2,V=0,V1=2] 
* CE 107: fun1(V1,V,Out) = 0+ fun17(V,W1):2
     [V>=0,W1=0,Out=0,V1=2] 
* CE 108: fun1(V1,V,Out) = 0+ fun17(W1,Out):3
     [Out>=3,Out=W1+1,Out=V+1,V1=2] 
* CE 109: fun1(V1,V,Out) = 0+ fun17(W1,Out):4
     [Out>=2,Out+1=W1,Out+1=V,V1=2] 
* CE 110: fun1(V1,V,Out) = 0+ fun18(W1,X1):1
     [X1=2,W1=0,Out=2,V=0,V1=2] 
* CE 111: fun1(V1,V,Out) = 0+ fun18(V,W1):2
     [V>=0,W1=0,Out=0,V1=2] 
* CE 112: fun1(V1,V,Out) = 0+ fun18(W1,Out):3
     [Out>=3,Out=W1+1,Out=V+1,V1=2] 
* CE 113: fun1(V1,V,Out) = 0+ fun18(W1,Out):4
     [Out>=2,Out+1=W1,Out+1=V,V1=2] 
* CE 114: fun1(A,B,B) = 0
     [B>=0,A=0] 
* CE 115: fun1(V1,V,Out) = 0+ fun1(W1,V,X1)+ fun17(Y1,Z1):1
     [V>=0,V1>=3,V1=W1+1,X1=0,Z1=2,Y1=0,Out=2] 
* CE 116: fun1(V1,V,Out) = 0+ fun1(W1,V,X1)+ fun17(X1,Y1):2
     [X1>=0,V>=0,V1>=3,V1=W1+1,Y1=0,Out=0] 
* CE 117: fun1(V1,V,Out) = 0+ fun1(W1,V,X1)+ fun17(Y1,Out):3
     [Out>=3,V>=0,V1>=3,Out=X1+1,V1=W1+1,Out=Y1+1] 
* CE 118: fun1(V1,V,Out) = 0+ fun1(W1,V,X1)+ fun17(Y1,Out):4
     [Out>=2,V>=0,V1>=3,Out+1=X1,V1=W1+1,Out+1=Y1] 
* CE 119: fun1(V1,V,Out) = 0+ fun1(W1,V,X1)+ fun18(Y1,Z1):1
     [V>=0,V1>=3,V1=W1+1,X1=0,Z1=2,Y1=0,Out=2] 
* CE 120: fun1(V1,V,Out) = 0+ fun1(W1,V,X1)+ fun18(X1,Y1):2
     [X1>=0,V>=0,V1>=3,V1=W1+1,Y1=0,Out=0] 
* CE 121: fun1(V1,V,Out) = 0+ fun1(W1,V,X1)+ fun18(Y1,Out):3
     [Out>=3,V>=0,V1>=3,Out=X1+1,V1=W1+1,Out=Y1+1] 
* CE 122: fun1(V1,V,Out) = 0+ fun1(W1,V,X1)+ fun18(Y1,Out):4
     [Out>=2,V>=0,V1>=3,Out+1=X1,V1=W1+1,Out+1=Y1] 

### Cost equations --> "Loop" of fun1/3 
* CEs [117,121] --> Loop 61 
* CEs [118,122] --> Loop 62 
* CEs [115,119] --> Loop 63 
* CEs [116,120] --> Loop 64 
* CEs [109,113] --> Loop 65 
* CEs [108,112] --> Loop 66 
* CEs [105,107,111] --> Loop 67 
* CEs [106,110] --> Loop 68 
* CEs [114] --> Loop 69 

#### Loops of fun1/3 
* Loop 61: fun1(V1,V,Out)->  fun1(V1',V,Out')
                  [Out>=3,V>=0,V1>=3,Out=Out'+1,V1=V1'+1] 
* Loop 62: fun1(V1,V,Out)->  fun1(V1',V,Out')
                  [Out>=2,V>=0,V1>=3,Out+1=Out',V1=V1'+1] 
* Loop 63: fun1(V1,V,Out)->  fun1(V1',V,Out')
                  [V>=0,V1>=3,V1=V1'+1,Out'=0,Out=2] 
* Loop 64: fun1(V1,V,Out)->  fun1(V1',V,Out')
                  [Out'>=0,V>=0,V1>=3,V1=V1'+1,Out=0] 
* Loop 65: fun1(V1,V,Out) [V>=3,V=Out+1,V1=2] 
* Loop 66: fun1(V1,V,Out) [V>=2,V+1=Out,V1=2] 
* Loop 67: fun1(V1,V,Out) [V>=0,V1>=0,Out=0] 
* Loop 68: fun1(V1,V,Out) [Out=2,V=0,V1=2] 
* Loop 69: fun1(A,B,B) [B>=0,A=0] 

### Ranking functions of CR fun1(V1,V,Out) 
* RF of phase [61,62,63,64]: [V1-2]

#### Partial ranking functions of CR fun1(V1,V,Out) 
* Partial RF of phase [61,62,63,64]:
  - RF of loop [61:1,62:1,63:1,64:1]:
    V1-2


### Resulting Chains:fun1(V1,V,Out) 
* [[61,62,63,64],68]
* [[61,62,63,64],67]
* [[61,62,63,64],66]
* [[61,62,63,64],65]
* [69]
* [68]
* [67]
* [66]
* [65]


### Merging Chains  fun1/3 into  External patterns of execution 
* [[69]] --> 1 
* [[68]] --> 2 
* [[66]] --> 3 
* [[65]] --> 4 
* [[68,[61,62,63,64]]] --> 5 
* [[67]] --> 6 
* [[67,[61,62,63,64]]] --> 7 
* [[65,[61,62,63,64]],[66,[61,62,63,64]]] --> 8 


### Specialization of cost equations fun19/3 
* CE 82 is refined into CE [123] 
* CE 83 is refined into CE [124,125,126,127,128,129,130] 


#### Refined cost equations fun19/3 
* CE 123: fun19(V1,V,Out) = 0
     [V>=0,V1>=0,Out=0] 
* CE 124: fun19(V1,V,Out) = 0+ fun19(W1,X1,Y1)+ fun1(Z1,A2,B2):2
     [W1>=0,W1+1=V1,Y1=0,X1=1,B2=2,A2=0,Z1=2,Out=2,V=1] 
* CE 125: fun19(V1,V,Out) = 0+ fun19(W1,X1,Y1)+ fun1(Z1,A2,Out):3
     [W1>=0,Out>=3,Out=Y1+1,Out=A2+1,W1+1=V1,X1=1,Z1=2,V=1] 
* CE 126: fun19(V1,V,Out) = 0+ fun19(W1,X1,Y1)+ fun1(Z1,A2,Out):4
     [W1>=0,Out>=2,Out+1=Y1,Out+1=A2,W1+1=V1,X1=1,Z1=2,V=1] 
* CE 127: fun19(V1,V,Out) = 0+ fun19(W1,X1,Y1)+ fun1(Z1,A2,Out):5
     [Z1>=Out,W1>=0,Out>=0,Z1>=3,Z1=X1+1,Z1=V+1,W1+1=V1,Y1=0,A2=0] 
* CE 128: fun19(V1,V,Out) = 0+ fun19(W1,X1,Y1)+ fun1(Z1,Y1,A2):6
     [W1>=0,Y1>=0,Z1>=1,Z1=X1+1,Z1=V+1,W1+1=V1,A2=0,Out=0] 
* CE 129: fun19(V1,V,Out) = 0+ fun19(W1,X1,Y1)+ fun1(Z1,Y1,Out):7
     [Z1>=Out+1,W1>=0,Out>=0,Y1>=0,Z1>=3,Z1=X1+1,Z1=V+1,W1+1=V1] 
* CE 130: fun19(V1,V,Out) = 0+ fun19(W1,X1,Y1)+ fun1(Z1,Y1,Out):8
     [Z1+Y1>=Out+1,W1>=0,Out>=0,Y1>=2,Z1>=3,Z1=X1+1,Z1=V+1,W1+1=V1] 

### Cost equations --> "Loop" of fun19/3 
* CEs [130] --> Loop 70 
* CEs [129] --> Loop 71 
* CEs [127] --> Loop 72 
* CEs [128] --> Loop 73 
* CEs [125] --> Loop 74 
* CEs [126] --> Loop 75 
* CEs [124] --> Loop 76 
* CEs [123] --> Loop 77 

#### Loops of fun19/3 
* Loop 70: fun19(V1,V,Out)->  fun19(V1',V,Out')
                  [V+Out'>=Out,Out'>=2,Out>=0,V>=2,V1>=1,V1=V1'+1] 
* Loop 71: fun19(V1,V,Out)->  fun19(V1',V,Out')
                  [V>=Out,Out'>=0,Out>=0,V>=2,V1>=1,V1=V1'+1] 
* Loop 72: fun19(V1,V,Out)->  fun19(V1',V,Out')
                  [V+1>=Out,Out>=0,V>=2,V1>=1,V1=V1'+1,Out'=0] 
* Loop 73: fun19(V1,V,Out)->  fun19(V1',V,Out')
                  [Out'>=0,V>=0,V1>=1,V1=V1'+1,Out=0] 
* Loop 74: fun19(V1,V,Out)->  fun19(V1',V',Out')
                  [Out>=3,V1>=1,Out=Out'+1,V1=V1'+1,V'=1,V=1] 
* Loop 75: fun19(V1,V,Out)->  fun19(V1',V',Out')
                  [Out>=2,V1>=1,Out+1=Out',V1=V1'+1,V'=1,V=1] 
* Loop 76: fun19(V1,V,Out)->  fun19(V1',V',Out')
                  [V1>=1,V1=V1'+1,Out'=0,V'=1,Out=2,V=1] 
* Loop 77: fun19(V1,V,Out) [V>=0,V1>=0,Out=0] 

### Ranking functions of CR fun19(V1,V,Out) 
* RF of phase [70,71,72,73,74,75,76]: [V1]

#### Partial ranking functions of CR fun19(V1,V,Out) 
* Partial RF of phase [70,71,72,73,74,75,76]:
  - RF of loop [70:1,71:1,72:1,73:1,74:1,75:1,76:1]:
    V1


### Resulting Chains:fun19(V1,V,Out) 
* [[70,71,72,73,74,75,76],77]
* [77]


### Merging Chains  fun19/3 into  External patterns of execution 
* [[77]] --> 1 
* [[77,[70,71,72,73,74,75,76]]] --> 2 


### Specialization of cost equations fun/3 
* CE 65 is refined into CE [131,132] 
* CE 64 is refined into CE [133] 
* CE 62 is refined into CE [134] 
* CE 63 is refined into CE [135] 


#### Refined cost equations fun/3 
* CE 131: fun(V1,V,Out) = 0+ fun19(W1,X1,Y1):1
     [X1>=0,W1>=0,X1+1=V,W1+1=V1,Y1=0,Out=1] 
* CE 132: fun(V1,V,Out) = 0+ fun19(W1,X1,Y1):2
     [Y1>=0,X1>=0,W1>=1,Y1+1=Out,X1+1=V,W1+1=V1] 
* CE 133: fun(V1,V,Out) = 0
     [V1>=1,Out=0,V=0] 
* CE 134: fun(V1,V,Out) = 0
     [V>=0,V1>=0,Out=0] 
* CE 135: fun(V1,V,Out) = 0
     [V>=1,Out=0,V1=0] 

### Cost equations --> "Loop" of fun/3 
* CEs [132] --> Loop 78 
* CEs [131] --> Loop 79 
* CEs [133] --> Loop 80 
* CEs [134,135] --> Loop 81 

#### Loops of fun/3 
* Loop 78: fun(V1,V,Out) [Out>=1,V>=1,V1>=2] 
* Loop 79: fun(V1,V,Out) [V>=1,V1>=1,Out=1] 
* Loop 80: fun(V1,V,Out) [V1>=1,Out=0,V=0] 
* Loop 81: fun(V1,V,Out) [V>=0,V1>=0,Out=0] 

### Ranking functions of CR fun(V1,V,Out) 

#### Partial ranking functions of CR fun(V1,V,Out) 


### Resulting Chains:fun(V1,V,Out) 
* [81]
* [80]
* [79]
* [78]


### Merging Chains  fun/3 into  External patterns of execution 
* [[80],[81]] --> 1 
* [[79]] --> 2 
* [[78]] --> 3 


### Specialization of cost equations lineMult/4 
* CE 57 is refined into CE [136] 
* CE 60 is refined into CE [137] 
* CE 61 is refined into CE [138] 
* CE 59 is refined into CE [139,140,141,142,143,144,145,146,147,148] 
* CE 58 is refined into CE [149,150,151] 


#### Refined cost equations lineMult/4 
* CE 136: lineMult(V1,V,V22,Out) = 2
     [V22>=0,V>=1,V1>=0,Out=0] 
* CE 137: lineMult(V1,V,V22,Out) = 1
     [V22>=0,V>=0,V1>=0,Out=0] 
* CE 138: lineMult(V1,V,V22,Out) = 2
     [V22>=0,V1>=0,Out=2,V=2] 
* CE 139: lineMult(V1,V,V22,Out) = 5+ fun(W22,V1,X22):1+ fun1(Y22,Z22,Z22):1+ lineMult(V1,A23,B23,C23)
     [B23>=0,A23>=0,Z22>=0,V1>=0,W22>=0,Z22+C23+1=Out,Z22+B23+1=V22,W22+A23+1=V,Y22=0,X22=0] 
* CE 140: lineMult(V1,V,V22,Out) = 5+ fun(W22,V1,X22):1+ fun1(Y22,Z22,A23):6+ lineMult(V1,B23,C23,D23)
     [C23>=0,B23>=0,Z22>=0,V1>=0,W22>=0,Z22+C23+1=V22,W22+B23+1=V,D23+1=Out,A23=0,Y22=0,X22=0] 
* CE 141: lineMult(V1,V,V22,Out) = 5+ fun(W22,V1,X22):2+ fun1(Y22,Z22,A23):6+ lineMult(V1,B23,C23,D23)
     [C23>=0,B23>=0,Z22>=0,V1>=1,W22>=1,Z22+C23+1=V22,W22+B23+1=V,D23+1=Out,A23=0,Y22=1,X22=1] 
* CE 142: lineMult(V1,V,V22,Out) = 5+ fun(W22,V1,X22):3+ fun1(Y22,Z22,A23):2+ lineMult(V1,B23,C23,D23)
     [C23>=0,B23>=0,V1>=1,W22>=2,W22+B23+1=V,D23+3=Out,C23+1=V22,A23=2,Z22=0,Y22=2,X22=2] 
* CE 143: lineMult(V1,V,V22,Out) = 5+ fun(W22,V1,X22):3+ fun1(Y22,Z22,A23):3+ lineMult(V1,B23,C23,D23)
     [C23>=0,B23>=0,A23>=3,V1>=1,W22>=2,A23+D23+1=Out,A23+C23=V22,W22+B23+1=V,A23=Z22+1,Y22=2,X22=2] 
* CE 144: lineMult(V1,V,V22,Out) = 5+ fun(W22,V1,X22):3+ fun1(Y22,Z22,A23):4+ lineMult(V1,B23,C23,D23)
     [C23>=0,B23>=0,A23>=2,V1>=1,W22>=2,A23+D23+1=Out,A23+C23+2=V22,W22+B23+1=V,A23+1=Z22,Y22=2,X22=2] 
* CE 145: lineMult(V1,V,V22,Out) = 5+ fun(W22,V1,X22):3+ fun1(X22,Y22,Z22):5+ lineMult(V1,A23,B23,C23)
     [X22>=Z22,B23>=0,A23>=0,Z22>=0,X22>=3,V1>=1,W22>=2,Z22+C23+1=Out,W22+A23+1=V,B23+1=V22,Y22=0] 
* CE 146: lineMult(V1,V,V22,Out) = 5+ fun(W22,V1,X22):3+ fun1(X22,Y22,Z22):6+ lineMult(V1,A23,B23,C23)
     [B23>=0,A23>=0,Y22>=0,X22>=1,V1>=1,W22>=2,Y22+B23+1=V22,W22+A23+1=V,C23+1=Out,Z22=0] 
* CE 147: lineMult(V1,V,V22,Out) = 5+ fun(W22,V1,X22):3+ fun1(X22,Y22,Z22):7+ lineMult(V1,A23,B23,C23)
     [X22>=Z22+1,B23>=0,A23>=0,Z22>=0,Y22>=0,X22>=3,V1>=1,W22>=2,Z22+C23+1=Out,Y22+B23+1=V22,W22+A23+1=V] 
* CE 148: lineMult(V1,V,V22,Out) = 5+ fun(W22,V1,X22):3+ fun1(X22,Y22,Z22):8+ lineMult(V1,A23,B23,C23)
     [X22+Y22>=Z22+1,B23>=0,A23>=0,Z22>=0,Y22>=2,X22>=3,V1>=1,W22>=2,Z22+C23+1=Out,Y22+B23+1=V22,W22+A23+1=V] 
* CE 149: lineMult(V1,V,V22,Out) = 4+ fun(W22,V1,X22):1+ lineMult(V1,Y22,Z22,A23)
     [Y22>=0,V1>=0,W22>=0,W22+Y22+1=V,A23+1=Out,Z22=2,X22=0,V22=2] 
* CE 150: lineMult(V1,V,V22,Out) = 4+ fun(W22,V1,X22):2+ lineMult(V1,Y22,Z22,A23)
     [Y22>=0,V1>=1,W22>=1,W22+Y22+1=V,A23+2=Out,Z22=2,X22=1,V22=2] 
* CE 151: lineMult(V1,V,V22,Out) = 4+ fun(W22,V1,X22):3+ lineMult(V1,Y22,Z22,A23)
     [Y22>=0,X22>=1,V1>=1,W22>=2,X22+A23+1=Out,W22+Y22+1=V,Z22=2,V22=2] 

### Cost equations --> "Loop" of lineMult/4 
* CEs [143] --> Loop 82 
* CEs [139] --> Loop 83 
* CEs [144] --> Loop 84 
* CEs [140,141,146] --> Loop 85 
* CEs [142,145,147,148] --> Loop 86 
* CEs [151] --> Loop 87 
* CEs [150] --> Loop 88 
* CEs [149] --> Loop 89 
* CEs [136,137] --> Loop 90 
* CEs [138] --> Loop 91 

#### Loops of lineMult/4 
* Loop 82: lineMult(V1,V,V22,Out)->  lineMult(V1,V',V22',Out')
                  [V22>=V22'+3,V>=V'+3,V22'>=0,V'>=0,V1>=1,V22+Out'+1=Out+V22'] 
* Loop 83: lineMult(V1,V,V22,Out)->  lineMult(V1,V',V22',Out')
                  [V22>=V22'+1,V>=V'+1,V22'>=0,V'>=0,V1>=0,Out+V22'=V22+Out'] 
* Loop 84: lineMult(V1,V,V22,Out)->  lineMult(V1,V',V22',Out')
                  [V22>=V22'+4,V>=V'+3,V22'>=0,V'>=0,V1>=1,V22+Out'=Out+V22'+1] 
* Loop 85: lineMult(V1,V,V22,Out)->  lineMult(V1,V',V22',Out')
                  [V22>=V22'+1,V>=V'+1,V22'>=0,V'>=0,V1>=0,Out=Out'+1] 
* Loop 86: lineMult(V1,V,V22,Out)->  lineMult(V1,V',V22',Out')
                  [Out>=Out'+1,V22>=V22'+1,V>=V'+3,V22'>=0,V'>=0,V1>=1] 
* Loop 87: lineMult(V1,V,V22,Out)->  lineMult(V1,V',V22',Out')
                  [Out>=Out'+2,V>=V'+3,V'>=0,V1>=1,V22'=2,V22=2] 
* Loop 88: lineMult(V1,V,V22,Out)->  lineMult(V1,V',V22',Out')
                  [V>=V'+2,V'>=0,V1>=1,Out=Out'+2,V22'=2,V22=2] 
* Loop 89: lineMult(V1,V,V22,Out)->  lineMult(V1,V',V22',Out')
                  [V>=V'+1,V'>=0,V1>=0,Out=Out'+1,V22'=2,V22=2] 
* Loop 90: lineMult(V1,V,V22,Out) [V22>=0,V>=0,V1>=0,Out=0] 
* Loop 91: lineMult(V1,V,V22,Out) [V22>=0,V1>=0,Out=2,V=2] 

### Ranking functions of CR lineMult(V1,V,V22,Out) 
* RF of phase [82,83,84,85,86,87,88,89]: [V]

#### Partial ranking functions of CR lineMult(V1,V,V22,Out) 
* Partial RF of phase [82,83,84,85,86,87,88,89]:
  - RF of loop [82:1]:
    V22/3-2/3
  - RF of loop [82:1,84:1,86:1,87:1]:
    V/3-2/3
  - RF of loop [83:1,85:1,86:1]:
    V22
  - RF of loop [83:1,85:1,89:1]:
    V
  - RF of loop [84:1]:
    V22/4-3/4
  - RF of loop [88:1]:
    V/2-1/2


### Resulting Chains:lineMult(V1,V,V22,Out) 
* [[82,83,84,85,86,87,88,89],91]
* [[82,83,84,85,86,87,88,89],90]
* [91]
* [90]


### Merging Chains  lineMult/4 into  External patterns of execution 
* [[91]] --> 1 
* [[90]] --> 2 
* [[90,[82,83,84,85,86,87,88,89]],[91,[82,83,84,85,86,87,88,89]]] --> 3 


### Specialization of cost equations computeLine/4 
* CE 52 is refined into CE [152] 
* CE 56 is refined into CE [153] 
* CE 55 is refined into CE [154] 
* CE 53 is refined into CE [155] 
* CE 54 is refined into CE [156,157,158] 


#### Refined cost equations computeLine/4 
* CE 152: computeLine(V1,V,V22,Out) = 1
     [V22>=0,V>=0,V1>=0,Out=0] 
* CE 153: computeLine(V1,V,V22,Out) = 2
     [V22>=0,V>=0,V1>=1,Out=0] 
* CE 154: computeLine(V1,V,V22,Out) = 3
     [V22>=0,V1>=1,Out=2,V=2] 
* CE 155: computeLine(A,B,C,C) = 2
     [C>=0,B>=0,A=2] 
* CE 156: computeLine(V1,V,V22,Out) = 3+ lineMult(W22,X22,V22,Y22):1+ computeLine(Z22,A23,B23,Out)
     [A23>=0,Z22>=0,V22>=0,W22>=0,W22+Z22+1=V1,A23+3=V,B23=2,Y22=2,X22=2] 
* CE 157: computeLine(V1,V,V22,Out) = 3+ lineMult(W22,X22,V22,Y22):2+ computeLine(Z22,A23,B23,Out)
     [A23>=0,Z22>=0,V22>=0,X22>=0,W22>=0,X22+A23+1=V,W22+Z22+1=V1,B23=0,Y22=0] 
* CE 158: computeLine(V1,V,V22,Out) = 3+ lineMult(W22,X22,V22,Y22):3+ computeLine(Z22,A23,Y22,Out)
     [A23>=0,Z22>=0,Y22>=1,V22>=1,X22>=1,W22>=0,X22+A23+1=V,W22+Z22+1=V1] 

### Cost equations --> "Loop" of computeLine/4 
* CEs [158] --> Loop 92 
* CEs [156] --> Loop 93 
* CEs [157] --> Loop 94 
* CEs [152,153] --> Loop 95 
* CEs [154] --> Loop 96 
* CEs [155] --> Loop 97 

#### Loops of computeLine/4 
* Loop 92: computeLine(V1,V,V22,Out)->  computeLine(V1',V',V22',Out)
                  [V>=V'+2,V1>=V1'+1,V22'>=1,V'>=0,V1'>=0,V22>=1] 
* Loop 93: computeLine(V1,V,V22,Out)->  computeLine(V1',V',V22',Out)
                  [V1>=V1'+1,V1'>=0,V22>=0,V>=3,V=V'+3,V22'=2] 
* Loop 94: computeLine(V1,V,V22,Out)->  computeLine(V1',V',V22',Out)
                  [V>=V'+1,V1>=V1'+1,V'>=0,V1'>=0,V22>=0,V22'=0] 
* Loop 95: computeLine(V1,V,V22,Out) [V22>=0,V>=0,V1>=0,Out=0] 
* Loop 96: computeLine(V1,V,V22,Out) [V22>=0,V1>=1,Out=2,V=2] 
* Loop 97: computeLine(A,B,C,C) [C>=0,B>=0,A=2] 

### Ranking functions of CR computeLine(V1,V,V22,Out) 
* RF of phase [92,93,94]: [V,V1]

#### Partial ranking functions of CR computeLine(V1,V,V22,Out) 
* Partial RF of phase [92,93,94]:
  - RF of loop [92:1]:
    V/2-1/2
  - RF of loop [92:1,93:1,94:1]:
    V1
  - RF of loop [93:1]:
    V/3-2/3
  - RF of loop [94:1]:
    V


### Resulting Chains:computeLine(V1,V,V22,Out) 
* [[92,93,94],97]
* [[92,93,94],96]
* [[92,93,94],95]
* [97]
* [96]
* [95]


### Merging Chains  computeLine/4 into  External patterns of execution 
* [[97]] --> 1 
* [[96]] --> 2 
* [[95],[95,[92,93,94]]] --> 3 
* [[96,[92,93,94]]] --> 4 
* [[97,[92,93,94]]] --> 5 


### Specialization of cost equations matrixMult/3 
* CE 51 is refined into CE [159,160,161,162,163] 
* CE 49 is refined into CE [164] 
* CE 50 is refined into CE [165] 


#### Refined cost equations matrixMult/3 
* CE 159: matrixMult(V1,V,Out) = 2+ computeLine(W1,V,X1,Y1):1+ matrixMult(Z1,V,A2)
     [Z1>=0,V>=0,A2+3=Out,Z1+3=V1,Y1=2,X1=2,W1=2] 
* CE 160: matrixMult(V1,V,Out) = 2+ computeLine(W1,X1,Y1,Z1):2+ matrixMult(A2,B2,C2)
     [A2>=0,W1>=1,W1+A2+1=V1,C2+3=Out,B2=2,Z1=2,Y1=2,X1=2,V=2] 
* CE 161: matrixMult(V1,V,Out) = 2+ computeLine(W1,V,X1,Y1):3+ matrixMult(Z1,V,A2)
     [Z1>=0,V>=0,W1>=0,W1+Z1+1=V1,A2+1=Out,Y1=0,X1=2] 
* CE 162: matrixMult(V1,V,Out) = 2+ computeLine(W1,V,X1,Y1):4+ matrixMult(Z1,V,A2)
     [Z1>=0,V>=3,W1>=2,W1+Z1+1=V1,A2+3=Out,Y1=2,X1=2] 
* CE 163: matrixMult(V1,V,Out) = 2+ computeLine(W1,V,X1,Y1):5+ matrixMult(Z1,V,A2)
     [Z1>=0,Y1>=0,V>=1,W1>=3,Y1+A2+1=Out,W1+Z1+1=V1,X1=2] 
* CE 164: matrixMult(V1,V,Out) = 1
     [V>=0,V1>=0,Out=0] 
* CE 165: matrixMult(V1,V,Out) = 2
     [V>=0,Out=2,V1=2] 

### Cost equations --> "Loop" of matrixMult/3 
* CEs [164] --> Loop 98 
* CEs [165] --> Loop 99 
* CEs [163] --> Loop 100 
* CEs [162] --> Loop 101 
* CEs [161] --> Loop 102 
* CEs [159] --> Loop 103 
* CEs [160] --> Loop 104 

#### Loops of matrixMult/3 
* Loop 98: matrixMult(V1,V,Out) [V>=0,V1>=0,Out=0] 
* Loop 99: matrixMult(V1,V,Out) [V>=0,Out=2,V1=2] 
* Loop 100: matrixMult(V1,V,Out)->  matrixMult(V1',V,Out')
                  [Out>=Out'+1,V1>=V1'+4,V1'>=0,V>=1] 
* Loop 101: matrixMult(V1,V,Out)->  matrixMult(V1',V,Out')
                  [V1>=V1'+3,V1'>=0,V>=3,Out=Out'+3] 
* Loop 102: matrixMult(V1,V,Out)->  matrixMult(V1',V,Out')
                  [V1>=V1'+1,V1'>=0,V>=0,Out=Out'+1] 
* Loop 103: matrixMult(V1,V,Out)->  matrixMult(V1',V,Out')
                  [V>=0,V1>=3,Out=Out'+3,V1=V1'+3] 
* Loop 104: matrixMult(V1,V,Out)->  matrixMult(V1',V',Out')
                  [V1>=V1'+2,V1'>=0,Out=Out'+3,V'=2,V=2] 

### Ranking functions of CR matrixMult(V1,V,Out) 
* RF of phase [100,101,102,103,104]: [V1]

#### Partial ranking functions of CR matrixMult(V1,V,Out) 
* Partial RF of phase [100,101,102,103,104]:
  - RF of loop [100:1]:
    V1/4-3/4
  - RF of loop [101:1,103:1]:
    V1-2
  - RF of loop [102:1]:
    V1
  - RF of loop [104:1]:
    V1-1


### Resulting Chains:matrixMult(V1,V,Out) 
* [[100,101,102,103,104],99]
* [[100,101,102,103,104],98]
* [99]
* [98]


### Merging Chains  matrixMult/3 into  External patterns of execution 
* [[99],[98,[100,101,102,103,104]],[99,[100,101,102,103,104]]] --> 1 
* [[98]] --> 2 


### Specialization of cost equations fun12/2 
* CE 80 is refined into CE [166] 
* CE 81 is refined into CE [167] 


#### Refined cost equations fun12/2 
* CE 166: fun12(V1,Out) = 1
     [V1>=1,V1+6=Out] 
* CE 167: fun12(V1,Out) = 0
     [V1>=0,Out=0] 

### Cost equations --> "Loop" of fun12/2 
* CEs [166] --> Loop 105 
* CEs [167] --> Loop 106 

#### Loops of fun12/2 
* Loop 105: fun12(V1,Out) [V1>=1,V1+6=Out] 
* Loop 106: fun12(V1,Out) [V1>=0,Out=0] 

### Ranking functions of CR fun12(V1,Out) 

#### Partial ranking functions of CR fun12(V1,Out) 


### Resulting Chains:fun12(V1,Out) 
* [106]
* [105]


### Merging Chains  fun12/2 into  External patterns of execution 
* [[106]] --> 1 
* [[105]] --> 2 


### Specialization of cost equations fun11/3 
* CE 77 is refined into CE [168] 
* CE 79 is refined into CE [169] 
* CE 78 is refined into CE [170,171,172,173,174] 


#### Refined cost equations fun11/3 
* CE 168: fun11(V1,V,Out) = 1
     [V>=0,V1>=1,V1+V+4=Out] 
* CE 169: fun11(V1,V,Out) = 0
     [V>=0,V1>=0,Out=0] 
* CE 170: fun11(V1,V,Out) = 2+ appendreverse(W1,X1,Y1):1+ fun12(Z1,A2):1
     [A2=0,Z1=2,Y1=2,X1=2,W1=2,Out=0,V=2,V1=2] 
* CE 171: fun11(V1,V,Out) = 2+ appendreverse(W1,X1,Y1):1+ fun12(Z1,A2):2
     [A2=8,Z1=2,Y1=2,X1=2,W1=2,Out=8,V=2,V1=2] 
* CE 172: fun11(V1,V,Out) = 2+ appendreverse(V,W1,X1):2+ fun12(Y1,Z1):1
     [V>=0,Z1=0,Y1=0,X1=0,W1=2,Out=0,V1=2] 
* CE 173: fun11(V1,V,Out) = 2+ appendreverse(V,W1,V):3+ fun12(V,X1):1
     [V>=3,X1=0,W1=2,Out=0,V1=2] 
* CE 174: fun11(V1,V,Out) = 2+ appendreverse(W1,X1,Y1):3+ fun12(Z1,Out):2
     [Out>=9,Out=Z1+6,Out=Y1+6,Out=W1+6,Out=V+6,X1=2,V1=2] 

### Cost equations --> "Loop" of fun11/3 
* CEs [174] --> Loop 107 
* CEs [168,171] --> Loop 108 
* CEs [169,170,172,173] --> Loop 109 

#### Loops of fun11/3 
* Loop 107: fun11(V1,V,Out) [V>=3,V+6=Out,V1=2] 
* Loop 108: fun11(V1,V,Out) [V>=0,V1>=1,V1+V+4=Out] 
* Loop 109: fun11(V1,V,Out) [V>=0,V1>=0,Out=0] 

### Ranking functions of CR fun11(V1,V,Out) 

#### Partial ranking functions of CR fun11(V1,V,Out) 


### Resulting Chains:fun11(V1,V,Out) 
* [109]
* [108]
* [107]


### Merging Chains  fun11/3 into  External patterns of execution 
* [[107],[108]] --> 1 
* [[109]] --> 2 


### Specialization of cost equations fun5/2 
* CE 75 is refined into CE [175,176] 
* CE 76 is refined into CE [177] 


#### Refined cost equations fun5/2 
* CE 175: fun5(V1,Out) = 2+ fun11(W1,X1,Out):1
     [Out>=W1+4,W1>=1,Out=W1+X1+4,Out=V1+3] 
* CE 176: fun5(V1,Out) = 2+ fun11(W1,X1,Y1):2
     [X1>=0,W1>=0,W1+X1+1=V1,Y1=0,Out=0] 
* CE 177: fun5(V1,Out) = 0
     [V1>=0,Out=0] 

### Cost equations --> "Loop" of fun5/2 
* CEs [175] --> Loop 110 
* CEs [176,177] --> Loop 111 

#### Loops of fun5/2 
* Loop 110: fun5(V1,Out) [V1>=2,V1+3=Out] 
* Loop 111: fun5(V1,Out) [V1>=0,Out=0] 

### Ranking functions of CR fun5(V1,Out) 

#### Partial ranking functions of CR fun5(V1,Out) 


### Resulting Chains:fun5(V1,Out) 
* [111]
* [110]


### Merging Chains  fun5/2 into  External patterns of execution 
* [[111]] --> 1 
* [[110]] --> 2 


### Specialization of cost equations fun3/3 
* CE 45 is refined into CE [178] 
* CE 41 is refined into CE [179] 
* CE 44 is refined into CE [180] 
* CE 46 is refined into CE [181,182] 
* CE 42 is refined into CE [183] 
* CE 43 is refined into CE [184,185,186,187,188,189] 


#### Refined cost equations fun3/3 
* CE 178: fun3(A,B,B) = 3+ fun5(C,D):2
     [D>=5,B>=0,D=C+3,D=A+3] 
* CE 179: fun3(V1,V,Out) = 3+ fun5(W1,X1):2
     [X1>=5,V>=0,X1=W1+3,X1=V1+3,Out=0] 
* CE 180: fun3(V1,V,Out) = 2+ fun5(W1,X1):2
     [X1>=5,V>=0,X1=W1+3,X1=V1+3,Out=0] 
* CE 181: fun3(V1,V,Out) = 1+ fun5(V1,W1):1
     [V1>=0,V>=0,W1=0,Out=0] 
* CE 182: fun3(V1,V,Out) = 1+ fun5(W1,X1):2
     [X1>=5,V>=0,X1=W1+3,X1=V1+3,Out=0] 
* CE 183: fun3(V1,V,Out) = 4+ fun5(W1,X1):2+ fun3(Y1,V,Out)
     [X1>=Y1+3,Y1>=0,X1>=5,V>=0,X1=W1+3,X1=V1+3] 
* CE 184: fun3(V1,V,Out) = 7+ fun5(W1,X1):2+ fun13(Y1,Z1,A2):1+ fun13(B2,C2,D2):1+ matrixMult(V,E2,F2):1+ fun3(G2,F2,Out)
     [X1>=Y1+Z1+C2+E2+3,F2>=1,E2>=0,V>=1,C2>=0,Z1>=0,Y1>=0,X1>=5,X1=W1+3,X1=V1+3,G2=0,D2=0,B2=0,A2=0] 
* CE 185: fun3(V1,V,Out) = 7+ fun5(W1,X1):2+ fun13(Y1,Z1,A2):1+ fun13(B2,C2,D2):1+ matrixMult(V,E2,F2):2+ fun3(G2,H2,Out)
     [X1>=Y1+Z1+C2+E2+3,E2>=0,V>=0,C2>=0,Z1>=0,Y1>=0,X1>=5,X1=W1+3,X1=V1+3,H2=0,G2=0,F2=0,D2=0,B2=0,A2=0] 
* CE 186: fun3(V1,V,Out) = 7+ fun5(W1,X1):2+ fun13(Y1,Z1,A2):2+ fun13(A2,B2,C2):1+ matrixMult(V,D2,E2):1+ fun3(F2,E2,Out)
     [X1>=A2+B2+D2+2,A2>=Y1+1,E2>=1,D2>=0,V>=1,B2>=0,Y1>=1,X1>=5,A2=Y1+Z1+1,X1=W1+3,X1=V1+3,F2=0,C2=0] 
* CE 187: fun3(V1,V,Out) = 7+ fun5(W1,X1):2+ fun13(Y1,Z1,A2):2+ fun13(A2,B2,C2):1+ matrixMult(V,D2,E2):2+ fun3(F2,G2,Out)
     [X1>=A2+B2+D2+2,A2>=Y1+1,D2>=0,V>=0,B2>=0,Y1>=1,X1>=5,A2=Y1+Z1+1,X1=W1+3,X1=V1+3,G2=0,F2=0,E2=0,C2=0] 
* CE 188: fun3(V1,V,Out) = 7+ fun5(W1,X1):2+ fun13(Y1,Z1,A2):2+ fun13(A2,B2,C2):2+ matrixMult(V,D2,E2):1+ fun3(C2,E2,Out)
     [X1>=C2+D2+1,C2>=A2+1,A2>=Y1+1,E2>=1,D2>=0,V>=1,Y1>=1,X1>=5,C2=A2+B2+1,A2=Y1+Z1+1,X1=W1+3,X1=V1+3] 
* CE 189: fun3(V1,V,Out) = 7+ fun5(W1,X1):2+ fun13(Y1,Z1,A2):2+ fun13(A2,B2,C2):2+ matrixMult(V,D2,E2):2+ fun3(C2,F2,Out)
     [X1>=C2+D2+1,C2>=A2+1,A2>=Y1+1,D2>=0,V>=0,Y1>=1,X1>=5,C2=A2+B2+1,A2=Y1+Z1+1,X1=W1+3,X1=V1+3,F2=0,E2=0] 

### Cost equations --> "Loop" of fun3/3 
* CEs [188] --> Loop 112 
* CEs [183] --> Loop 113 
* CEs [189] --> Loop 114 
* CEs [184,186] --> Loop 115 
* CEs [185,187] --> Loop 116 
* CEs [178] --> Loop 117 
* CEs [179,180,181,182] --> Loop 118 

#### Loops of fun3/3 
* Loop 112: fun3(V1,V,Out)->  fun3(V1',V',Out)
                  [V1+2>=V1',V'>=1,V1'>=3,V>=1,V1>=2] 
* Loop 113: fun3(V1,V,Out)->  fun3(V1',V,Out)
                  [V1>=V1',V1'>=0,V>=0,V1>=2] 
* Loop 114: fun3(V1,V,Out)->  fun3(V1',V',Out)
                  [V1+2>=V1',V1'>=3,V>=0,V1>=2,V'=0] 
* Loop 115: fun3(V1,V,Out)->  fun3(V1',V',Out)
                  [V'>=1,V>=1,V1>=2,V1'=0] 
* Loop 116: fun3(V1,V,Out)->  fun3(V1',V',Out)
                  [V>=0,V1>=2,V'=0,V1'=0] 
* Loop 117: fun3(A,B,B) [B>=0,A>=2] 
* Loop 118: fun3(V1,V,Out) [V>=0,V1>=0,Out=0] 

### Ranking functions of CR fun3(V1,V,Out) 

#### Partial ranking functions of CR fun3(V1,V,Out) 


### Resulting Chains:fun3(V1,V,Out) 
* [[112,113,114]]...
* [[112,113,114],118]
* [[112,113,114],117]
* [[112,113,114],116,118]
* [[112,113,114],115,118]
* [118]
* [117]
* [116,118]
* [115,118]


### Merging Chains  fun3/3 into  External patterns of execution 
* [[118,115],[118,116],[118],[118,115,[112,113,114]],[118,116,[112,113,114]],[118,[112,113,114]]] --> 1 
* [[117],[117,[112,113,114]]] --> 2 
* [[[112,113,114]]] --> 3 


### Specialization of cost equations start/4 
* CE 14 is refined into CE [190] 
* CE 16 is refined into CE [191,192,193,194,195,196,197,198,199] 
* CE 17 is refined into CE [200,201,202,203,204,205,206,207,208] 
* CE 2 is refined into CE [209] 
* CE 3 is refined into CE [210] 
* CE 4 is refined into CE [211] 
* CE 5 is refined into CE [212,213,214] 
* CE 6 is refined into CE [215,216,217] 
* CE 7 is refined into CE [218,219,220] 
* CE 8 is refined into CE [221,222,223,224,225,226,227,228,229,230] 
* CE 9 is refined into CE [231,232,233,234,235,236,237,238,239,240] 
* CE 10 is refined into CE [241,242,243,244,245,246,247,248,249,250] 
* CE 11 is refined into CE [251,252,253,254,255,256] 
* CE 12 is refined into CE [257,258,259,260,261,262,263,264,265,266] 
* CE 13 is refined into CE [267,268,269,270,271,272,273,274,275,276,277,278,279,280,281] 
* CE 15 is refined into CE [282,283,284,285,286,287,288,289,290,291,292,293,294,295,296] 
* CE 18 is refined into CE [297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326] 
* CE 19 is refined into CE [327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356] 
* CE 20 is refined into CE [357,358,359] 
* CE 21 is refined into CE [360,361,362] 
* CE 22 is refined into CE [363,364,365,366,367,368,369,370] 
* CE 23 is refined into CE [371,372,373] 
* CE 24 is refined into CE [374,375,376] 
* CE 25 is refined into CE [377,378,379] 
* CE 26 is refined into CE [380,381] 
* CE 27 is refined into CE [382,383,384,385,386] 
* CE 28 is refined into CE [387,388] 
* CE 29 is refined into CE [389,390] 
* CE 30 is refined into CE [391,392] 
* CE 31 is refined into CE [393,394] 
* CE 32 is refined into CE [395,396] 
* CE 33 is refined into CE [397,398,399] 
* CE 34 is refined into CE [400,401] 
* CE 35 is refined into CE [402,403,404] 
* CE 36 is refined into CE [405,406,407,408,409,410,411,412] 
* CE 37 is refined into CE [413,414,415] 
* CE 38 is refined into CE [416,417] 
* CE 39 is refined into CE [418,419,420,421] 
* CE 40 is refined into CE [422,423,424,425] 


#### Refined cost equations start/4 
* CE 190: start(V1,V,V22,V52) = 2
     [V>=0,V1>=1,V22=2] 
* CE 191: start(V1,V,V22,V52) = 3+ fun(W52,V22,X52):1+ lineMult(V22,Y52,Z52,A53):1
     [V22>=0,W52>=0,W52+3=V1,A53=2,Z52=2,Y52=2,X52=0,V=2] 
* CE 192: start(V1,V,V22,V52) = 3+ fun(W52,V22,X52):1+ lineMult(V22,Y52,Z52,A53):2
     [Y52>=0,V22>=0,W52>=0,W52+Y52+1=V1,A53=0,Z52=2,X52=0,V=2] 
* CE 193: start(V1,V,V22,V52) = 3+ fun(W52,V22,X52):1+ lineMult(V22,Y52,Z52,A53):3
     [A53>=1,Y52>=1,V22>=0,W52>=0,W52+Y52+1=V1,Z52=2,X52=0,V=2] 
* CE 194: start(V1,V,V22,V52) = 3+ fun(W52,V22,X52):2+ lineMult(V22,Y52,Z52,A53):1
     [V22>=1,W52>=1,W52+3=V1,A53=2,Z52=2,Y52=2,X52=1,V=2] 
* CE 195: start(V1,V,V22,V52) = 3+ fun(W52,V22,X52):2+ lineMult(V22,Y52,Z52,A53):2
     [Y52>=0,V22>=1,W52>=1,W52+Y52+1=V1,A53=0,Z52=2,X52=1,V=2] 
* CE 196: start(V1,V,V22,V52) = 3+ fun(W52,V22,X52):2+ lineMult(V22,Y52,Z52,A53):3
     [A53>=1,Y52>=1,V22>=1,W52>=1,W52+Y52+1=V1,Z52=2,X52=1,V=2] 
* CE 197: start(V1,V,V22,V52) = 3+ fun(W52,V22,X52):3+ lineMult(V22,Y52,Z52,A53):1
     [V22>=1,X52>=1,W52>=2,W52+3=V1,A53=2,Z52=2,Y52=2,V=2] 
* CE 198: start(V1,V,V22,V52) = 3+ fun(W52,V22,X52):3+ lineMult(V22,Y52,Z52,A53):2
     [Y52>=0,V22>=1,X52>=1,W52>=2,W52+Y52+1=V1,A53=0,Z52=2,V=2] 
* CE 199: start(V1,V,V22,V52) = 3+ fun(W52,V22,X52):3+ lineMult(V22,Y52,Z52,A53):3
     [A53>=1,Y52>=1,V22>=1,X52>=1,W52>=2,W52+Y52+1=V1,Z52=2,V=2] 
* CE 200: start(V1,V,V22,V52) = 2+ fun(V22,V,W52):1+ lineMult(V,X52,Y52,Z52):1
     [V>=0,V22>=0,Z52=2,Y52=2,X52=2,W52=0,V52=2,V1=2] 
* CE 201: start(V1,V,V22,V52) = 2+ fun(V22,V,W52):1+ lineMult(V,V52,X52,Y52):2
     [V52>=0,V>=0,V22>=0,Y52=0,X52=2,W52=0,V1=2] 
* CE 202: start(V1,V,V22,V52) = 2+ fun(V22,V,W52):1+ lineMult(V,V52,X52,Y52):3
     [Y52>=1,V52>=1,V>=0,V22>=0,X52=2,W52=0,V1=2] 
* CE 203: start(V1,V,V22,V52) = 2+ fun(V22,V,W52):2+ lineMult(V,X52,Y52,Z52):1
     [V>=1,V22>=1,Z52=2,Y52=2,X52=2,W52=1,V52=2,V1=2] 
* CE 204: start(V1,V,V22,V52) = 2+ fun(V22,V,W52):2+ lineMult(V,V52,X52,Y52):2
     [V52>=0,V>=1,V22>=1,Y52=0,X52=2,W52=1,V1=2] 
* CE 205: start(V1,V,V22,V52) = 2+ fun(V22,V,W52):2+ lineMult(V,V52,X52,Y52):3
     [Y52>=1,V52>=1,V>=1,V22>=1,X52=2,W52=1,V1=2] 
* CE 206: start(V1,V,V22,V52) = 2+ fun(V22,V,W52):3+ lineMult(V,X52,Y52,Z52):1
     [V>=1,W52>=1,V22>=2,Z52=2,Y52=2,X52=2,V52=2,V1=2] 
* CE 207: start(V1,V,V22,V52) = 2+ fun(V22,V,W52):3+ lineMult(V,V52,X52,Y52):2
     [V52>=0,V>=1,W52>=1,V22>=2,Y52=0,X52=2,V1=2] 
* CE 208: start(V1,V,V22,V52) = 2+ fun(V22,V,W52):3+ lineMult(V,V52,X52,Y52):3
     [Y52>=1,V52>=1,V>=1,W52>=1,V22>=2,X52=2,V1=2] 
* CE 209: start(V1,V,V22,V52) = 2
     [V>=0,V1>=2] 
* CE 210: start(V1,V,V22,V52) = 1
     [V>=0,V1>=1] 
* CE 211: start(V1,V,V22,V52) = 0
     [V>=0,V1>=0] 
* CE 212: start(V1,V,V22,V52) = 3+ fun3(W52,V,X52):1
     [V1>=W52+3,V>=0,W52>=0,X52=0] 
* CE 213: start(V1,V,V22,V52) = 3+ fun3(W52,V,X52):2
     [V1>=W52+3,X52>=0,V>=0,W52>=2] 
* CE 214: start(V1,V,V22,V52) = 3+ fun3(W52,V,X52):3
     [V1>=W52+3,V>=0,W52>=2] 
* CE 215: start(V1,V,V22,V52) = 2+ fun3(V22,V,W52):1
     [V>=0,V22>=0,V1>=2,W52=0] 
* CE 216: start(V1,V,V22,V52) = 2+ fun3(V22,V,W52):2
     [W52>=0,V>=0,V22>=2,V1>=2] 
* CE 217: start(V1,V,V22,V52) = 2+ fun3(V22,V,W52):3
     [V>=0,V22>=2,V1>=2] 
* CE 218: start(V1,V,V22,V52) = 1+ fun3(V22,V,W52):1
     [V>=0,V22>=0,W52=0,V1=1] 
* CE 219: start(V1,V,V22,V52) = 1+ fun3(V22,V,W52):2
     [W52>=0,V>=0,V22>=2,V1=1] 
* CE 220: start(V1,V,V22,V52) = 1+ fun3(V22,V,W52):3
     [V>=0,V22>=2,V1=1] 
* CE 221: start(V1,V,V22,V52) = 6+ fun13(W52,X52,Y52):1+ fun13(Z52,A53,B53):1+ matrixMult(V,C53,D53):1+ fun3(E53,D53,F53):1
     [V1>=W52+X52+A53+C53+3,D53>=1,C53>=0,V>=1,A53>=0,X52>=0,W52>=0,F53=0,E53=0,B53=0,Z52=0,Y52=0] 
* CE 222: start(V1,V,V22,V52) = 6+ fun13(W52,X52,Y52):1+ fun13(Z52,A53,B53):1+ matrixMult(V,C53,D53):2+ fun3(E53,F53,G53):1
     [V1>=W52+X52+A53+C53+3,C53>=0,V>=0,A53>=0,X52>=0,W52>=0,G53=0,F53=0,E53=0,D53=0,B53=0,Z52=0,Y52=0] 
* CE 223: start(V1,V,V22,V52) = 6+ fun13(W52,X52,Y52):2+ fun13(Y52,Z52,A53):1+ matrixMult(V,B53,C53):1+ fun3(D53,C53,E53):1
     [V1>=Y52+Z52+B53+2,Y52>=W52+1,C53>=1,B53>=0,V>=1,Z52>=0,W52>=1,Y52=W52+X52+1,E53=0,D53=0,A53=0] 
* CE 224: start(V1,V,V22,V52) = 6+ fun13(W52,X52,Y52):2+ fun13(Y52,Z52,A53):1+ matrixMult(V,B53,C53):2+ fun3(D53,E53,F53):1
     [V1>=Y52+Z52+B53+2,Y52>=W52+1,B53>=0,V>=0,Z52>=0,W52>=1,Y52=W52+X52+1,F53=0,E53=0,D53=0,C53=0,A53=0] 
* CE 225: start(V1,V,V22,V52) = 6+ fun13(W52,X52,Y52):2+ fun13(Y52,Z52,A53):2+ matrixMult(V,B53,C53):1+ fun3(A53,C53,D53):1
     [V1>=A53+B53+1,A53>=Y52+1,Y52>=W52+1,C53>=1,B53>=0,V>=1,W52>=1,A53=Y52+Z52+1,Y52=W52+X52+1,D53=0] 
* CE 226: start(V1,V,V22,V52) = 6+ fun13(W52,X52,Y52):2+ fun13(Y52,Z52,A53):2+ matrixMult(V,B53,C53):1+ fun3(A53,C53,D53):2
     [V1>=A53+B53+1,A53>=Y52+1,Y52>=W52+1,D53>=0,C53>=1,B53>=0,V>=1,W52>=1,A53=Y52+Z52+1,Y52=W52+X52+1] 
* CE 227: start(V1,V,V22,V52) = 6+ fun13(W52,X52,Y52):2+ fun13(Y52,Z52,A53):2+ matrixMult(V,B53,C53):1+ fun3(A53,C53,D53):3
     [V1>=A53+B53+1,A53>=Y52+1,Y52>=W52+1,C53>=1,B53>=0,V>=1,W52>=1,A53=Y52+Z52+1,Y52=W52+X52+1] 
* CE 228: start(V1,V,V22,V52) = 6+ fun13(W52,X52,Y52):2+ fun13(Y52,Z52,A53):2+ matrixMult(V,B53,C53):2+ fun3(A53,D53,E53):1
     [V1>=A53+B53+1,A53>=Y52+1,Y52>=W52+1,B53>=0,V>=0,W52>=1,A53=Y52+Z52+1,Y52=W52+X52+1,E53=0,D53=0,C53=0] 
* CE 229: start(V1,V,V22,V52) = 6+ fun13(W52,X52,Y52):2+ fun13(Y52,Z52,A53):2+ matrixMult(V,B53,C53):2+ fun3(A53,D53,E53):2
     [V1>=A53+B53+1,A53>=Y52+1,Y52>=W52+1,E53>=0,B53>=0,V>=0,W52>=1,A53=Y52+Z52+1,Y52=W52+X52+1,D53=0,C53=0] 
* CE 230: start(V1,V,V22,V52) = 6+ fun13(W52,X52,Y52):2+ fun13(Y52,Z52,A53):2+ matrixMult(V,B53,C53):2+ fun3(A53,D53,E53):3
     [V1>=A53+B53+1,A53>=Y52+1,Y52>=W52+1,B53>=0,V>=0,W52>=1,A53=Y52+Z52+1,Y52=W52+X52+1,D53=0,C53=0] 
* CE 231: start(V1,V,V22,V52) = 5+ fun13(V22,W52,X52):1+ fun13(Y52,Z52,A53):1+ matrixMult(V,B53,C53):1+ fun3(D53,C53,E53):1
     [V1>=W52+Z52+B53+2,C53>=1,B53>=0,V>=1,Z52>=0,W52>=0,V22>=0,E53=0,D53=0,A53=0,Y52=0,X52=0] 
* CE 232: start(V1,V,V22,V52) = 5+ fun13(V22,W52,X52):1+ fun13(Y52,Z52,A53):1+ matrixMult(V,B53,C53):2+ fun3(D53,E53,F53):1
     [V1>=W52+Z52+B53+2,B53>=0,V>=0,Z52>=0,W52>=0,V22>=0,F53=0,E53=0,D53=0,C53=0,A53=0,Y52=0,X52=0] 
* CE 233: start(V1,V,V22,V52) = 5+ fun13(V22,W52,X52):2+ fun13(X52,Y52,Z52):1+ matrixMult(V,A53,B53):1+ fun3(C53,B53,D53):1
     [V1+V22>=X52+Y52+A53+1,X52>=V22+1,B53>=1,A53>=0,V>=1,Y52>=0,V22>=1,X52=V22+W52+1,D53=0,C53=0,Z52=0] 
* CE 234: start(V1,V,V22,V52) = 5+ fun13(V22,W52,X52):2+ fun13(X52,Y52,Z52):1+ matrixMult(V,A53,B53):2+ fun3(C53,D53,E53):1
     [V1+V22>=X52+Y52+A53+1,X52>=V22+1,A53>=0,V>=0,Y52>=0,V22>=1,X52=V22+W52+1,E53=0,D53=0,C53=0,B53=0,Z52=0] 
* CE 235: start(V1,V,V22,V52) = 5+ fun13(V22,W52,X52):2+ fun13(X52,Y52,Z52):2+ matrixMult(V,A53,B53):1+ fun3(Z52,B53,C53):1
     [V1+V22>=Z52+A53,Z52>=X52+1,X52>=V22+1,B53>=1,A53>=0,V>=1,V22>=1,Z52=X52+Y52+1,X52=V22+W52+1,C53=0] 
* CE 236: start(V1,V,V22,V52) = 5+ fun13(V22,W52,X52):2+ fun13(X52,Y52,Z52):2+ matrixMult(V,A53,B53):1+ fun3(Z52,B53,C53):2
     [V1+V22>=Z52+A53,Z52>=X52+1,X52>=V22+1,C53>=0,B53>=1,A53>=0,V>=1,V22>=1,Z52=X52+Y52+1,X52=V22+W52+1] 
* CE 237: start(V1,V,V22,V52) = 5+ fun13(V22,W52,X52):2+ fun13(X52,Y52,Z52):2+ matrixMult(V,A53,B53):1+ fun3(Z52,B53,C53):3
     [V1+V22>=Z52+A53,Z52>=X52+1,X52>=V22+1,B53>=1,A53>=0,V>=1,V22>=1,Z52=X52+Y52+1,X52=V22+W52+1] 
* CE 238: start(V1,V,V22,V52) = 5+ fun13(V22,W52,X52):2+ fun13(X52,Y52,Z52):2+ matrixMult(V,A53,B53):2+ fun3(Z52,C53,D53):1
     [V1+V22>=Z52+A53,Z52>=X52+1,X52>=V22+1,A53>=0,V>=0,V22>=1,Z52=X52+Y52+1,X52=V22+W52+1,D53=0,C53=0,B53=0] 
* CE 239: start(V1,V,V22,V52) = 5+ fun13(V22,W52,X52):2+ fun13(X52,Y52,Z52):2+ matrixMult(V,A53,B53):2+ fun3(Z52,C53,D53):2
     [V1+V22>=Z52+A53,Z52>=X52+1,X52>=V22+1,D53>=0,A53>=0,V>=0,V22>=1,Z52=X52+Y52+1,X52=V22+W52+1,C53=0,B53=0] 
* CE 240: start(V1,V,V22,V52) = 5+ fun13(V22,W52,X52):2+ fun13(X52,Y52,Z52):2+ matrixMult(V,A53,B53):2+ fun3(Z52,C53,D53):3
     [V1+V22>=Z52+A53,Z52>=X52+1,X52>=V22+1,A53>=0,V>=0,V22>=1,Z52=X52+Y52+1,X52=V22+W52+1,C53=0,B53=0] 
* CE 241: start(V1,V,V22,V52) = 4+ fun13(V22,W52,X52):1+ fun13(Y52,Z52,A53):1+ matrixMult(V,B53,C53):1+ fun3(D53,C53,E53):1
     [C53>=1,B53>=0,V>=1,Z52>=0,W52>=0,V22>=0,W52+Z52+B53+1=V1,E53=0,D53=0,A53=0,Y52=0,X52=0] 
* CE 242: start(V1,V,V22,V52) = 4+ fun13(V22,W52,X52):1+ fun13(Y52,Z52,A53):1+ matrixMult(V,B53,C53):2+ fun3(D53,E53,F53):1
     [B53>=0,V>=0,Z52>=0,W52>=0,V22>=0,W52+Z52+B53+1=V1,F53=0,E53=0,D53=0,C53=0,A53=0,Y52=0,X52=0] 
* CE 243: start(V1,V,V22,V52) = 4+ fun13(V22,W52,X52):2+ fun13(X52,Y52,Z52):1+ matrixMult(V,A53,B53):1+ fun3(C53,B53,D53):1
     [X52>=V22+1,B53>=1,A53>=0,V>=1,Y52>=0,V22>=1,X52+Y52+A53=V1+V22,X52=V22+W52+1,D53=0,C53=0,Z52=0] 
* CE 244: start(V1,V,V22,V52) = 4+ fun13(V22,W52,X52):2+ fun13(X52,Y52,Z52):1+ matrixMult(V,A53,B53):2+ fun3(C53,D53,E53):1
     [X52>=V22+1,A53>=0,V>=0,Y52>=0,V22>=1,X52+Y52+A53=V1+V22,X52=V22+W52+1,E53=0,D53=0,C53=0,B53=0,Z52=0] 
* CE 245: start(V1,V,V22,V52) = 4+ fun13(V22,W52,X52):2+ fun13(X52,Y52,Z52):2+ matrixMult(V,A53,B53):1+ fun3(Z52,B53,C53):1
     [Z52>=X52+1,X52>=V22+1,B53>=1,A53>=0,V>=1,V22>=1,Z52+A53=V1+V22+1,Z52=X52+Y52+1,X52=V22+W52+1,C53=0] 
* CE 246: start(V1,V,V22,V52) = 4+ fun13(V22,W52,X52):2+ fun13(X52,Y52,Z52):2+ matrixMult(V,A53,B53):1+ fun3(Z52,B53,C53):2
     [Z52>=X52+1,X52>=V22+1,C53>=0,B53>=1,A53>=0,V>=1,V22>=1,Z52+A53=V1+V22+1,Z52=X52+Y52+1,X52=V22+W52+1] 
* CE 247: start(V1,V,V22,V52) = 4+ fun13(V22,W52,X52):2+ fun13(X52,Y52,Z52):2+ matrixMult(V,A53,B53):1+ fun3(Z52,B53,C53):3
     [Z52>=X52+1,X52>=V22+1,B53>=1,A53>=0,V>=1,V22>=1,Z52+A53=V1+V22+1,Z52=X52+Y52+1,X52=V22+W52+1] 
* CE 248: start(V1,V,V22,V52) = 4+ fun13(V22,W52,X52):2+ fun13(X52,Y52,Z52):2+ matrixMult(V,A53,B53):2+ fun3(Z52,C53,D53):1
     [Z52>=X52+1,X52>=V22+1,A53>=0,V>=0,V22>=1,Z52+A53=V1+V22+1,Z52=X52+Y52+1,X52=V22+W52+1,D53=0,C53=0,B53=0] 
* CE 249: start(V1,V,V22,V52) = 4+ fun13(V22,W52,X52):2+ fun13(X52,Y52,Z52):2+ matrixMult(V,A53,B53):2+ fun3(Z52,C53,D53):2
     [Z52>=X52+1,X52>=V22+1,D53>=0,A53>=0,V>=0,V22>=1,Z52+A53=V1+V22+1,Z52=X52+Y52+1,X52=V22+W52+1,C53=0,B53=0] 
* CE 250: start(V1,V,V22,V52) = 4+ fun13(V22,W52,X52):2+ fun13(X52,Y52,Z52):2+ matrixMult(V,A53,B53):2+ fun3(Z52,C53,D53):3
     [Z52>=X52+1,X52>=V22+1,A53>=0,V>=0,V22>=1,Z52+A53=V1+V22+1,Z52=X52+Y52+1,X52=V22+W52+1,C53=0,B53=0] 
* CE 251: start(V1,V,V22,V52) = 1+ matrixMult(V,V22,W52):1+ fun3(V1,W52,X52):1
     [W52>=1,V1>=0,V22>=0,V>=1,X52=0] 
* CE 252: start(V1,V,V22,V52) = 1+ matrixMult(V,V22,W52):1+ fun3(V1,W52,X52):2
     [X52>=0,W52>=1,V1>=2,V22>=0,V>=1] 
* CE 253: start(V1,V,V22,V52) = 1+ matrixMult(V,V22,W52):1+ fun3(V1,W52,X52):3
     [W52>=1,V1>=2,V22>=0,V>=1] 
* CE 254: start(V1,V,V22,V52) = 1+ matrixMult(V,V22,W52):2+ fun3(V1,X52,Y52):1
     [V1>=0,V22>=0,V>=0,Y52=0,X52=0,W52=0] 
* CE 255: start(V1,V,V22,V52) = 1+ matrixMult(V,V22,W52):2+ fun3(V1,X52,Y52):2
     [Y52>=0,V1>=2,V22>=0,V>=0,X52=0,W52=0] 
* CE 256: start(V1,V,V22,V52) = 1+ matrixMult(V,V22,W52):2+ fun3(V1,X52,Y52):3
     [V1>=2,V22>=0,V>=0,X52=0,W52=0] 
* CE 257: start(V1,V,V22,V52) = 1+ computeLine(W52,V,X52,Y52):1+ matrixMult(Z52,V,A53):1
     [A53>=1,V>=0,Z52>=1,Z52+3=V1,Y52=2,X52=2,W52=2] 
* CE 258: start(V1,V,V22,V52) = 1+ computeLine(W52,V,X52,Y52):1+ matrixMult(Z52,V,A53):2
     [V>=0,Z52>=0,Z52+3=V1,A53=0,Y52=2,X52=2,W52=2] 
* CE 259: start(V1,V,V22,V52) = 1+ computeLine(W52,X52,Y52,Z52):2+ matrixMult(A53,B53,C53):1
     [C53>=1,A53>=1,W52>=1,W52+A53+1=V1,B53=2,Z52=2,Y52=2,X52=2,V=2] 
* CE 260: start(V1,V,V22,V52) = 1+ computeLine(W52,X52,Y52,Z52):2+ matrixMult(A53,B53,C53):2
     [A53>=0,W52>=1,W52+A53+1=V1,C53=0,B53=2,Z52=2,Y52=2,X52=2,V=2] 
* CE 261: start(V1,V,V22,V52) = 1+ computeLine(W52,V,X52,Y52):3+ matrixMult(Z52,V,A53):1
     [A53>=1,V>=0,Z52>=1,W52>=0,W52+Z52+1=V1,Y52=0,X52=2] 
* CE 262: start(V1,V,V22,V52) = 1+ computeLine(W52,V,X52,Y52):3+ matrixMult(Z52,V,A53):2
     [V>=0,Z52>=0,W52>=0,W52+Z52+1=V1,A53=0,Y52=0,X52=2] 
* CE 263: start(V1,V,V22,V52) = 1+ computeLine(W52,V,X52,Y52):4+ matrixMult(Z52,V,A53):1
     [A53>=1,V>=3,Z52>=1,W52>=2,W52+Z52+1=V1,Y52=2,X52=2] 
* CE 264: start(V1,V,V22,V52) = 1+ computeLine(W52,V,X52,Y52):4+ matrixMult(Z52,V,A53):2
     [V>=3,Z52>=0,W52>=2,W52+Z52+1=V1,A53=0,Y52=2,X52=2] 
* CE 265: start(V1,V,V22,V52) = 1+ computeLine(W52,V,X52,Y52):5+ matrixMult(Z52,V,A53):1
     [A53>=1,V>=1,Z52>=1,Y52>=0,W52>=3,W52+Z52+1=V1,X52=2] 
* CE 266: start(V1,V,V22,V52) = 1+ computeLine(W52,V,X52,Y52):5+ matrixMult(Z52,V,A53):2
     [V>=1,Z52>=0,Y52>=0,W52>=3,W52+Z52+1=V1,A53=0,X52=2] 
* CE 267: start(V1,V,V22,V52) = 2+ lineMult(W52,X52,V,Y52):1+ computeLine(Z52,A53,B53,C53):1
     [A53>=0,V>=0,W52>=0,A53+3=V22,W52+3=V1,C53=2,B53=2,Z52=2,Y52=2,X52=2] 
* CE 268: start(V1,V,V22,V52) = 2+ lineMult(W52,X52,V,Y52):1+ computeLine(Z52,A53,B53,C53):2
     [Z52>=1,V>=0,W52>=0,W52+Z52+1=V1,C53=2,B53=2,A53=2,Y52=2,X52=2,V22=5] 
* CE 269: start(V1,V,V22,V52) = 2+ lineMult(W52,X52,V,Y52):1+ computeLine(Z52,A53,B53,C53):3
     [A53>=0,Z52>=0,V>=0,W52>=0,W52+Z52+1=V1,A53+3=V22,C53=0,B53=2,Y52=2,X52=2] 
* CE 270: start(V1,V,V22,V52) = 2+ lineMult(W52,X52,V,Y52):1+ computeLine(Z52,A53,B53,C53):4
     [A53>=3,Z52>=2,V>=0,W52>=0,W52+Z52+1=V1,A53+3=V22,C53=2,B53=2,Y52=2,X52=2] 
* CE 271: start(V1,V,V22,V52) = 2+ lineMult(W52,X52,V,Y52):1+ computeLine(Z52,A53,B53,C53):5
     [C53>=0,A53>=1,Z52>=3,V>=0,W52>=0,W52+Z52+1=V1,A53+3=V22,B53=2,Y52=2,X52=2] 
* CE 272: start(V1,V,V22,V52) = 2+ lineMult(W52,X52,V,Y52):2+ computeLine(Z52,A53,B53,C53):1
     [A53>=0,V>=0,X52>=0,W52>=0,X52+A53+1=V22,W52+3=V1,C53=0,B53=0,Z52=2,Y52=0] 
* CE 273: start(V1,V,V22,V52) = 2+ lineMult(W52,X52,V,Y52):2+ computeLine(Z52,A53,B53,C53):2
     [Z52>=1,V>=0,X52>=0,W52>=0,W52+Z52+1=V1,X52+3=V22,C53=2,B53=0,A53=2,Y52=0] 
* CE 274: start(V1,V,V22,V52) = 2+ lineMult(W52,X52,V,Y52):2+ computeLine(Z52,A53,B53,C53):3
     [A53>=0,Z52>=0,V>=0,X52>=0,W52>=0,X52+A53+1=V22,W52+Z52+1=V1,C53=0,B53=0,Y52=0] 
* CE 275: start(V1,V,V22,V52) = 2+ lineMult(W52,X52,V,Y52):2+ computeLine(Z52,A53,B53,C53):4
     [A53>=3,Z52>=2,V>=0,X52>=0,W52>=0,X52+A53+1=V22,W52+Z52+1=V1,C53=2,B53=0,Y52=0] 
* CE 276: start(V1,V,V22,V52) = 2+ lineMult(W52,X52,V,Y52):2+ computeLine(Z52,A53,B53,C53):5
     [C53>=0,A53>=1,Z52>=3,V>=0,X52>=0,W52>=0,X52+A53+1=V22,W52+Z52+1=V1,B53=0,Y52=0] 
* CE 277: start(V1,V,V22,V52) = 2+ lineMult(W52,X52,V,Y52):3+ computeLine(Z52,A53,Y52,Y52):1
     [Y52>=1,A53>=0,V>=1,X52>=1,W52>=0,X52+A53+1=V22,W52+3=V1,Z52=2] 
* CE 278: start(V1,V,V22,V52) = 2+ lineMult(W52,X52,V,Y52):3+ computeLine(Z52,A53,Y52,B53):2
     [Y52>=1,Z52>=1,V>=1,X52>=1,W52>=0,W52+Z52+1=V1,X52+3=V22,B53=2,A53=2] 
* CE 279: start(V1,V,V22,V52) = 2+ lineMult(W52,X52,V,Y52):3+ computeLine(Z52,A53,Y52,B53):3
     [Y52>=1,A53>=0,Z52>=0,V>=1,X52>=1,W52>=0,X52+A53+1=V22,W52+Z52+1=V1,B53=0] 
* CE 280: start(V1,V,V22,V52) = 2+ lineMult(W52,X52,V,Y52):3+ computeLine(Z52,A53,Y52,B53):4
     [Y52>=1,A53>=3,Z52>=2,V>=1,X52>=1,W52>=0,X52+A53+1=V22,W52+Z52+1=V1,B53=2] 
* CE 281: start(V1,V,V22,V52) = 2+ lineMult(W52,X52,V,Y52):3+ computeLine(Z52,A53,Y52,B53):5
     [B53>=0,Y52>=1,A53>=1,Z52>=3,V>=1,X52>=1,W52>=0,X52+A53+1=V22,W52+Z52+1=V1] 
* CE 282: start(V1,V,V22,V52) = 1+ lineMult(V22,W52,V,X52):1+ computeLine(Y52,Z52,A53,B53):1
     [Z52>=0,V>=0,V22>=0,Z52+3=V1,B53=2,A53=2,Y52=2,X52=2,W52=2,V52=2] 
* CE 283: start(V1,V,V22,V52) = 1+ lineMult(V22,W52,V,X52):1+ computeLine(V52,Y52,Z52,A53):2
     [V52>=1,V>=0,V22>=0,A53=2,Z52=2,Y52=2,X52=2,W52=2,V1=5] 
* CE 284: start(V1,V,V22,V52) = 1+ lineMult(V22,W52,V,X52):1+ computeLine(V52,Y52,Z52,A53):3
     [Y52>=0,V52>=0,V>=0,V22>=0,Y52+3=V1,A53=0,Z52=2,X52=2,W52=2] 
* CE 285: start(V1,V,V22,V52) = 1+ lineMult(V22,W52,V,X52):1+ computeLine(V52,Y52,Z52,A53):4
     [Y52>=3,V52>=2,V>=0,V22>=0,Y52+3=V1,A53=2,Z52=2,X52=2,W52=2] 
* CE 286: start(V1,V,V22,V52) = 1+ lineMult(V22,W52,V,X52):1+ computeLine(V52,Y52,Z52,A53):5
     [A53>=0,Y52>=1,V52>=3,V>=0,V22>=0,Y52+3=V1,Z52=2,X52=2,W52=2] 
* CE 287: start(V1,V,V22,V52) = 1+ lineMult(V22,W52,V,X52):2+ computeLine(Y52,Z52,A53,B53):1
     [Z52>=0,V>=0,W52>=0,V22>=0,W52+Z52+1=V1,B53=0,A53=0,Y52=2,X52=0,V52=2] 
* CE 288: start(V1,V,V22,V52) = 1+ lineMult(V22,W52,V,X52):2+ computeLine(V52,Y52,Z52,A53):2
     [V52>=1,V>=0,W52>=0,V22>=0,W52+3=V1,A53=2,Z52=0,Y52=2,X52=0] 
* CE 289: start(V1,V,V22,V52) = 1+ lineMult(V22,W52,V,X52):2+ computeLine(V52,Y52,Z52,A53):3
     [Y52>=0,V52>=0,V>=0,W52>=0,V22>=0,W52+Y52+1=V1,A53=0,Z52=0,X52=0] 
* CE 290: start(V1,V,V22,V52) = 1+ lineMult(V22,W52,V,X52):2+ computeLine(V52,Y52,Z52,A53):4
     [Y52>=3,V52>=2,V>=0,W52>=0,V22>=0,W52+Y52+1=V1,A53=2,Z52=0,X52=0] 
* CE 291: start(V1,V,V22,V52) = 1+ lineMult(V22,W52,V,X52):2+ computeLine(V52,Y52,Z52,A53):5
     [A53>=0,Y52>=1,V52>=3,V>=0,W52>=0,V22>=0,W52+Y52+1=V1,Z52=0,X52=0] 
* CE 292: start(V1,V,V22,V52) = 1+ lineMult(V22,W52,V,X52):3+ computeLine(Y52,Z52,X52,X52):1
     [X52>=1,Z52>=0,V>=1,W52>=1,V22>=0,W52+Z52+1=V1,Y52=2,V52=2] 
* CE 293: start(V1,V,V22,V52) = 1+ lineMult(V22,W52,V,X52):3+ computeLine(V52,Y52,X52,Z52):2
     [X52>=1,V52>=1,V>=1,W52>=1,V22>=0,W52+3=V1,Z52=2,Y52=2] 
* CE 294: start(V1,V,V22,V52) = 1+ lineMult(V22,W52,V,X52):3+ computeLine(V52,Y52,X52,Z52):3
     [X52>=1,Y52>=0,V52>=0,V>=1,W52>=1,V22>=0,W52+Y52+1=V1,Z52=0] 
* CE 295: start(V1,V,V22,V52) = 1+ lineMult(V22,W52,V,X52):3+ computeLine(V52,Y52,X52,Z52):4
     [X52>=1,Y52>=3,V52>=2,V>=1,W52>=1,V22>=0,W52+Y52+1=V1,Z52=2] 
* CE 296: start(V1,V,V22,V52) = 1+ lineMult(V22,W52,V,X52):3+ computeLine(V52,Y52,X52,Z52):5
     [Z52>=0,X52>=1,Y52>=1,V52>=3,V>=1,W52>=1,V22>=0,W52+Y52+1=V1] 
* CE 297: start(V1,V,V22,V52) = 4+ fun(W52,V22,X52):1+ fun1(Y52,Z52,Z52):1+ lineMult(V22,A53,B53,C53):1
     [B53>=0,V22>=0,Z52>=0,W52>=0,Z52+B53+1=V,W52+3=V1,C53=2,A53=2,Y52=0,X52=0] 
* CE 298: start(V1,V,V22,V52) = 4+ fun(W52,V22,X52):1+ fun1(Y52,Z52,Z52):1+ lineMult(V22,A53,B53,C53):2
     [B53>=0,A53>=0,V22>=0,Z52>=0,W52>=0,Z52+B53+1=V,W52+A53+1=V1,C53=0,Y52=0,X52=0] 
* CE 299: start(V1,V,V22,V52) = 4+ fun(W52,V22,X52):1+ fun1(Y52,Z52,Z52):1+ lineMult(V22,A53,B53,C53):3
     [C53>=1,B53>=1,A53>=1,V22>=0,Z52>=0,W52>=0,Z52+B53+1=V,W52+A53+1=V1,Y52=0,X52=0] 
* CE 300: start(V1,V,V22,V52) = 4+ fun(W52,V22,X52):1+ fun1(Y52,Z52,A53):6+ lineMult(V22,B53,C53,D53):1
     [C53>=0,V22>=0,Z52>=0,W52>=0,Z52+C53+1=V,W52+3=V1,D53=2,B53=2,A53=0,Y52=0,X52=0] 
* CE 301: start(V1,V,V22,V52) = 4+ fun(W52,V22,X52):1+ fun1(Y52,Z52,A53):6+ lineMult(V22,B53,C53,D53):2
     [C53>=0,B53>=0,V22>=0,Z52>=0,W52>=0,Z52+C53+1=V,W52+B53+1=V1,D53=0,A53=0,Y52=0,X52=0] 
* CE 302: start(V1,V,V22,V52) = 4+ fun(W52,V22,X52):1+ fun1(Y52,Z52,A53):6+ lineMult(V22,B53,C53,D53):3
     [D53>=1,C53>=1,B53>=1,V22>=0,Z52>=0,W52>=0,Z52+C53+1=V,W52+B53+1=V1,A53=0,Y52=0,X52=0] 
* CE 303: start(V1,V,V22,V52) = 4+ fun(W52,V22,X52):2+ fun1(Y52,Z52,A53):6+ lineMult(V22,B53,C53,D53):1
     [C53>=0,V22>=1,Z52>=0,W52>=1,Z52+C53+1=V,W52+3=V1,D53=2,B53=2,A53=0,Y52=1,X52=1] 
* CE 304: start(V1,V,V22,V52) = 4+ fun(W52,V22,X52):2+ fun1(Y52,Z52,A53):6+ lineMult(V22,B53,C53,D53):2
     [C53>=0,B53>=0,V22>=1,Z52>=0,W52>=1,Z52+C53+1=V,W52+B53+1=V1,D53=0,A53=0,Y52=1,X52=1] 
* CE 305: start(V1,V,V22,V52) = 4+ fun(W52,V22,X52):2+ fun1(Y52,Z52,A53):6+ lineMult(V22,B53,C53,D53):3
     [D53>=1,C53>=1,B53>=1,V22>=1,Z52>=0,W52>=1,Z52+C53+1=V,W52+B53+1=V1,A53=0,Y52=1,X52=1] 
* CE 306: start(V1,V,V22,V52) = 4+ fun(W52,V22,X52):3+ fun1(Y52,Z52,A53):2+ lineMult(V22,B53,C53,D53):1
     [C53>=0,V22>=1,W52>=2,C53+1=V,W52+3=V1,D53=2,B53=2,A53=2,Z52=0,Y52=2,X52=2] 
* CE 307: start(V1,V,V22,V52) = 4+ fun(W52,V22,X52):3+ fun1(Y52,Z52,A53):2+ lineMult(V22,B53,C53,D53):2
     [C53>=0,B53>=0,V22>=1,W52>=2,W52+B53+1=V1,C53+1=V,D53=0,A53=2,Z52=0,Y52=2,X52=2] 
* CE 308: start(V1,V,V22,V52) = 4+ fun(W52,V22,X52):3+ fun1(Y52,Z52,A53):2+ lineMult(V22,B53,C53,D53):3
     [D53>=1,C53>=1,B53>=1,V22>=1,W52>=2,W52+B53+1=V1,C53+1=V,A53=2,Z52=0,Y52=2,X52=2] 
* CE 309: start(V1,V,V22,V52) = 4+ fun(W52,V22,X52):3+ fun1(Y52,Z52,A53):3+ lineMult(V22,B53,C53,D53):1
     [C53>=0,V22>=1,A53>=3,W52>=2,A53+C53=V,A53=Z52+1,W52+3=V1,D53=2,B53=2,Y52=2,X52=2] 
* CE 310: start(V1,V,V22,V52) = 4+ fun(W52,V22,X52):3+ fun1(Y52,Z52,A53):3+ lineMult(V22,B53,C53,D53):2
     [C53>=0,B53>=0,V22>=1,A53>=3,W52>=2,A53+C53=V,W52+B53+1=V1,A53=Z52+1,D53=0,Y52=2,X52=2] 
* CE 311: start(V1,V,V22,V52) = 4+ fun(W52,V22,X52):3+ fun1(Y52,Z52,A53):3+ lineMult(V22,B53,C53,D53):3
     [D53>=1,C53>=1,B53>=1,V22>=1,A53>=3,W52>=2,A53+C53=V,W52+B53+1=V1,A53=Z52+1,Y52=2,X52=2] 
* CE 312: start(V1,V,V22,V52) = 4+ fun(W52,V22,X52):3+ fun1(Y52,Z52,A53):4+ lineMult(V22,B53,C53,D53):1
     [C53>=0,V22>=1,A53>=2,W52>=2,A53+C53+2=V,A53+1=Z52,W52+3=V1,D53=2,B53=2,Y52=2,X52=2] 
* CE 313: start(V1,V,V22,V52) = 4+ fun(W52,V22,X52):3+ fun1(Y52,Z52,A53):4+ lineMult(V22,B53,C53,D53):2
     [C53>=0,B53>=0,V22>=1,A53>=2,W52>=2,A53+C53+2=V,W52+B53+1=V1,A53+1=Z52,D53=0,Y52=2,X52=2] 
* CE 314: start(V1,V,V22,V52) = 4+ fun(W52,V22,X52):3+ fun1(Y52,Z52,A53):4+ lineMult(V22,B53,C53,D53):3
     [D53>=1,C53>=1,B53>=1,V22>=1,A53>=2,W52>=2,A53+C53+2=V,W52+B53+1=V1,A53+1=Z52,Y52=2,X52=2] 
* CE 315: start(V1,V,V22,V52) = 4+ fun(W52,V22,X52):3+ fun1(X52,Y52,Z52):5+ lineMult(V22,A53,B53,C53):1
     [X52>=Z52,B53>=0,V22>=1,Z52>=0,X52>=3,W52>=2,B53+1=V,W52+3=V1,C53=2,A53=2,Y52=0] 
* CE 316: start(V1,V,V22,V52) = 4+ fun(W52,V22,X52):3+ fun1(X52,Y52,Z52):5+ lineMult(V22,A53,B53,C53):2
     [X52>=Z52,B53>=0,A53>=0,V22>=1,Z52>=0,X52>=3,W52>=2,W52+A53+1=V1,B53+1=V,C53=0,Y52=0] 
* CE 317: start(V1,V,V22,V52) = 4+ fun(W52,V22,X52):3+ fun1(X52,Y52,Z52):5+ lineMult(V22,A53,B53,C53):3
     [X52>=Z52,C53>=1,B53>=1,A53>=1,V22>=1,Z52>=0,X52>=3,W52>=2,W52+A53+1=V1,B53+1=V,Y52=0] 
* CE 318: start(V1,V,V22,V52) = 4+ fun(W52,V22,X52):3+ fun1(X52,Y52,Z52):6+ lineMult(V22,A53,B53,C53):1
     [B53>=0,V22>=1,Y52>=0,X52>=1,W52>=2,Y52+B53+1=V,W52+3=V1,C53=2,A53=2,Z52=0] 
* CE 319: start(V1,V,V22,V52) = 4+ fun(W52,V22,X52):3+ fun1(X52,Y52,Z52):6+ lineMult(V22,A53,B53,C53):2
     [B53>=0,A53>=0,V22>=1,Y52>=0,X52>=1,W52>=2,Y52+B53+1=V,W52+A53+1=V1,C53=0,Z52=0] 
* CE 320: start(V1,V,V22,V52) = 4+ fun(W52,V22,X52):3+ fun1(X52,Y52,Z52):6+ lineMult(V22,A53,B53,C53):3
     [C53>=1,B53>=1,A53>=1,V22>=1,Y52>=0,X52>=1,W52>=2,Y52+B53+1=V,W52+A53+1=V1,Z52=0] 
* CE 321: start(V1,V,V22,V52) = 4+ fun(W52,V22,X52):3+ fun1(X52,Y52,Z52):7+ lineMult(V22,A53,B53,C53):1
     [X52>=Z52+1,B53>=0,V22>=1,Z52>=0,Y52>=0,X52>=3,W52>=2,Y52+B53+1=V,W52+3=V1,C53=2,A53=2] 
* CE 322: start(V1,V,V22,V52) = 4+ fun(W52,V22,X52):3+ fun1(X52,Y52,Z52):7+ lineMult(V22,A53,B53,C53):2
     [X52>=Z52+1,B53>=0,A53>=0,V22>=1,Z52>=0,Y52>=0,X52>=3,W52>=2,Y52+B53+1=V,W52+A53+1=V1,C53=0] 
* CE 323: start(V1,V,V22,V52) = 4+ fun(W52,V22,X52):3+ fun1(X52,Y52,Z52):7+ lineMult(V22,A53,B53,C53):3
     [X52>=Z52+1,C53>=1,B53>=1,A53>=1,V22>=1,Z52>=0,Y52>=0,X52>=3,W52>=2,Y52+B53+1=V,W52+A53+1=V1] 
* CE 324: start(V1,V,V22,V52) = 4+ fun(W52,V22,X52):3+ fun1(X52,Y52,Z52):8+ lineMult(V22,A53,B53,C53):1
     [X52+Y52>=Z52+1,B53>=0,V22>=1,Z52>=0,Y52>=2,X52>=3,W52>=2,Y52+B53+1=V,W52+3=V1,C53=2,A53=2] 
* CE 325: start(V1,V,V22,V52) = 4+ fun(W52,V22,X52):3+ fun1(X52,Y52,Z52):8+ lineMult(V22,A53,B53,C53):2
     [X52+Y52>=Z52+1,B53>=0,A53>=0,V22>=1,Z52>=0,Y52>=2,X52>=3,W52>=2,Y52+B53+1=V,W52+A53+1=V1,C53=0] 
* CE 326: start(V1,V,V22,V52) = 4+ fun(W52,V22,X52):3+ fun1(X52,Y52,Z52):8+ lineMult(V22,A53,B53,C53):3
     [X52+Y52>=Z52+1,C53>=1,B53>=1,A53>=1,V22>=1,Z52>=0,Y52>=2,X52>=3,W52>=2,Y52+B53+1=V,W52+A53+1=V1] 
* CE 327: start(V1,V,V22,V52) = 3+ fun(V22,V,W52):1+ fun1(X52,Y52,Y52):1+ lineMult(V,Z52,A53,B53):1
     [A53>=0,V>=0,Y52>=0,V22>=0,Y52+A53+1=V1,B53=2,Z52=2,X52=0,W52=0,V52=2] 
* CE 328: start(V1,V,V22,V52) = 3+ fun(V22,V,W52):1+ fun1(X52,Y52,Y52):1+ lineMult(V,V52,Z52,A53):2
     [Z52>=0,V52>=0,V>=0,Y52>=0,V22>=0,Y52+Z52+1=V1,A53=0,X52=0,W52=0] 
* CE 329: start(V1,V,V22,V52) = 3+ fun(V22,V,W52):1+ fun1(X52,Y52,Y52):1+ lineMult(V,V52,Z52,A53):3
     [A53>=1,Z52>=1,V52>=1,V>=0,Y52>=0,V22>=0,Y52+Z52+1=V1,X52=0,W52=0] 
* CE 330: start(V1,V,V22,V52) = 3+ fun(V22,V,W52):1+ fun1(X52,Y52,Z52):6+ lineMult(V,A53,B53,C53):1
     [B53>=0,V>=0,Y52>=0,V22>=0,Y52+B53+1=V1,C53=2,A53=2,Z52=0,X52=0,W52=0,V52=2] 
* CE 331: start(V1,V,V22,V52) = 3+ fun(V22,V,W52):1+ fun1(X52,Y52,Z52):6+ lineMult(V,V52,A53,B53):2
     [A53>=0,V52>=0,V>=0,Y52>=0,V22>=0,Y52+A53+1=V1,B53=0,Z52=0,X52=0,W52=0] 
* CE 332: start(V1,V,V22,V52) = 3+ fun(V22,V,W52):1+ fun1(X52,Y52,Z52):6+ lineMult(V,V52,A53,B53):3
     [B53>=1,A53>=1,V52>=1,V>=0,Y52>=0,V22>=0,Y52+A53+1=V1,Z52=0,X52=0,W52=0] 
* CE 333: start(V1,V,V22,V52) = 3+ fun(V22,V,W52):2+ fun1(X52,Y52,Z52):6+ lineMult(V,A53,B53,C53):1
     [B53>=0,V>=1,Y52>=0,V22>=1,Y52+B53+1=V1,C53=2,A53=2,Z52=0,X52=1,W52=1,V52=2] 
* CE 334: start(V1,V,V22,V52) = 3+ fun(V22,V,W52):2+ fun1(X52,Y52,Z52):6+ lineMult(V,V52,A53,B53):2
     [A53>=0,V52>=0,V>=1,Y52>=0,V22>=1,Y52+A53+1=V1,B53=0,Z52=0,X52=1,W52=1] 
* CE 335: start(V1,V,V22,V52) = 3+ fun(V22,V,W52):2+ fun1(X52,Y52,Z52):6+ lineMult(V,V52,A53,B53):3
     [B53>=1,A53>=1,V52>=1,V>=1,Y52>=0,V22>=1,Y52+A53+1=V1,Z52=0,X52=1,W52=1] 
* CE 336: start(V1,V,V22,V52) = 3+ fun(V22,V,W52):3+ fun1(X52,Y52,Z52):2+ lineMult(V,A53,B53,C53):1
     [B53>=0,V>=1,V22>=2,B53+1=V1,C53=2,A53=2,Z52=2,Y52=0,X52=2,W52=2,V52=2] 
* CE 337: start(V1,V,V22,V52) = 3+ fun(V22,V,W52):3+ fun1(X52,Y52,Z52):2+ lineMult(V,V52,A53,B53):2
     [A53>=0,V52>=0,V>=1,V22>=2,A53+1=V1,B53=0,Z52=2,Y52=0,X52=2,W52=2] 
* CE 338: start(V1,V,V22,V52) = 3+ fun(V22,V,W52):3+ fun1(X52,Y52,Z52):2+ lineMult(V,V52,A53,B53):3
     [B53>=1,A53>=1,V52>=1,V>=1,V22>=2,A53+1=V1,Z52=2,Y52=0,X52=2,W52=2] 
* CE 339: start(V1,V,V22,V52) = 3+ fun(V22,V,W52):3+ fun1(X52,Y52,Z52):3+ lineMult(V,A53,B53,C53):1
     [B53>=0,V>=1,Z52>=3,V22>=2,Z52+B53=V1,Z52=Y52+1,C53=2,A53=2,X52=2,W52=2,V52=2] 
* CE 340: start(V1,V,V22,V52) = 3+ fun(V22,V,W52):3+ fun1(X52,Y52,Z52):3+ lineMult(V,V52,A53,B53):2
     [A53>=0,V52>=0,V>=1,Z52>=3,V22>=2,Z52+A53=V1,Z52=Y52+1,B53=0,X52=2,W52=2] 
* CE 341: start(V1,V,V22,V52) = 3+ fun(V22,V,W52):3+ fun1(X52,Y52,Z52):3+ lineMult(V,V52,A53,B53):3
     [B53>=1,A53>=1,V52>=1,V>=1,Z52>=3,V22>=2,Z52+A53=V1,Z52=Y52+1,X52=2,W52=2] 
* CE 342: start(V1,V,V22,V52) = 3+ fun(V22,V,W52):3+ fun1(X52,Y52,Z52):4+ lineMult(V,A53,B53,C53):1
     [B53>=0,V>=1,Z52>=2,V22>=2,Z52+B53+2=V1,Z52+1=Y52,C53=2,A53=2,X52=2,W52=2,V52=2] 
* CE 343: start(V1,V,V22,V52) = 3+ fun(V22,V,W52):3+ fun1(X52,Y52,Z52):4+ lineMult(V,V52,A53,B53):2
     [A53>=0,V52>=0,V>=1,Z52>=2,V22>=2,Z52+A53+2=V1,Z52+1=Y52,B53=0,X52=2,W52=2] 
* CE 344: start(V1,V,V22,V52) = 3+ fun(V22,V,W52):3+ fun1(X52,Y52,Z52):4+ lineMult(V,V52,A53,B53):3
     [B53>=1,A53>=1,V52>=1,V>=1,Z52>=2,V22>=2,Z52+A53+2=V1,Z52+1=Y52,X52=2,W52=2] 
* CE 345: start(V1,V,V22,V52) = 3+ fun(V22,V,W52):3+ fun1(W52,X52,Y52):5+ lineMult(V,Z52,A53,B53):1
     [W52>=Y52,A53>=0,V>=1,Y52>=0,W52>=3,V22>=2,A53+1=V1,B53=2,Z52=2,X52=0,V52=2] 
* CE 346: start(V1,V,V22,V52) = 3+ fun(V22,V,W52):3+ fun1(W52,X52,Y52):5+ lineMult(V,V52,Z52,A53):2
     [W52>=Y52,Z52>=0,V52>=0,V>=1,Y52>=0,W52>=3,V22>=2,Z52+1=V1,A53=0,X52=0] 
* CE 347: start(V1,V,V22,V52) = 3+ fun(V22,V,W52):3+ fun1(W52,X52,Y52):5+ lineMult(V,V52,Z52,A53):3
     [W52>=Y52,A53>=1,Z52>=1,V52>=1,V>=1,Y52>=0,W52>=3,V22>=2,Z52+1=V1,X52=0] 
* CE 348: start(V1,V,V22,V52) = 3+ fun(V22,V,W52):3+ fun1(W52,X52,Y52):6+ lineMult(V,Z52,A53,B53):1
     [A53>=0,V>=1,X52>=0,W52>=1,V22>=2,X52+A53+1=V1,B53=2,Z52=2,Y52=0,V52=2] 
* CE 349: start(V1,V,V22,V52) = 3+ fun(V22,V,W52):3+ fun1(W52,X52,Y52):6+ lineMult(V,V52,Z52,A53):2
     [Z52>=0,V52>=0,V>=1,X52>=0,W52>=1,V22>=2,X52+Z52+1=V1,A53=0,Y52=0] 
* CE 350: start(V1,V,V22,V52) = 3+ fun(V22,V,W52):3+ fun1(W52,X52,Y52):6+ lineMult(V,V52,Z52,A53):3
     [A53>=1,Z52>=1,V52>=1,V>=1,X52>=0,W52>=1,V22>=2,X52+Z52+1=V1,Y52=0] 
* CE 351: start(V1,V,V22,V52) = 3+ fun(V22,V,W52):3+ fun1(W52,X52,Y52):7+ lineMult(V,Z52,A53,B53):1
     [W52>=Y52+1,A53>=0,V>=1,Y52>=0,X52>=0,W52>=3,V22>=2,X52+A53+1=V1,B53=2,Z52=2,V52=2] 
* CE 352: start(V1,V,V22,V52) = 3+ fun(V22,V,W52):3+ fun1(W52,X52,Y52):7+ lineMult(V,V52,Z52,A53):2
     [W52>=Y52+1,Z52>=0,V52>=0,V>=1,Y52>=0,X52>=0,W52>=3,V22>=2,X52+Z52+1=V1,A53=0] 
* CE 353: start(V1,V,V22,V52) = 3+ fun(V22,V,W52):3+ fun1(W52,X52,Y52):7+ lineMult(V,V52,Z52,A53):3
     [W52>=Y52+1,A53>=1,Z52>=1,V52>=1,V>=1,Y52>=0,X52>=0,W52>=3,V22>=2,X52+Z52+1=V1] 
* CE 354: start(V1,V,V22,V52) = 3+ fun(V22,V,W52):3+ fun1(W52,X52,Y52):8+ lineMult(V,Z52,A53,B53):1
     [W52+X52>=Y52+1,A53>=0,V>=1,Y52>=0,X52>=2,W52>=3,V22>=2,X52+A53+1=V1,B53=2,Z52=2,V52=2] 
* CE 355: start(V1,V,V22,V52) = 3+ fun(V22,V,W52):3+ fun1(W52,X52,Y52):8+ lineMult(V,V52,Z52,A53):2
     [W52+X52>=Y52+1,Z52>=0,V52>=0,V>=1,Y52>=0,X52>=2,W52>=3,V22>=2,X52+Z52+1=V1,A53=0] 
* CE 356: start(V1,V,V22,V52) = 3+ fun(V22,V,W52):3+ fun1(W52,X52,Y52):8+ lineMult(V,V52,Z52,A53):3
     [W52+X52>=Y52+1,A53>=1,Z52>=1,V52>=1,V>=1,Y52>=0,X52>=2,W52>=3,V22>=2,X52+Z52+1=V1] 
* CE 357: start(V1,V,V22,V52) = 1+ appendreverse(W52,X52,X52):1
     [X52+2>=V1,V1>=3,X52+2=V1+V,W52=2] 
* CE 358: start(V1,V,V22,V52) = 1+ appendreverse(W52,X52,Y52):2
     [W52+X52>=V1,V1>=W52+1,W52>=0,W52+X52=V1+V,Y52=0] 
* CE 359: start(V1,V,V22,V52) = 1+ appendreverse(W52,X52,Y52):3
     [V1>=W52+1,Y52+2>=V1,W52>=3,Y52+2=W52+X52,Y52+2=V1+V] 
* CE 360: start(V1,V,V22,V52) = 1+ fun(V1,V,W52):1
     [V>=0,V1>=0,W52=0] 
* CE 361: start(V1,V,V22,V52) = 1+ fun(V1,V,W52):2
     [V>=1,V1>=1,W52=1] 
* CE 362: start(V1,V,V22,V52) = 1+ fun(V1,V,W52):3
     [W52>=1,V>=1,V1>=2] 
* CE 363: start(V1,V,V22,V52) = 1+ fun1(W52,V,V):1
     [V>=0,W52=0,V1=0] 
* CE 364: start(V1,V,V22,V52) = 1+ fun1(W52,X52,Y52):2
     [Y52=2,X52=0,W52=2,V=0,V1=2] 
* CE 365: start(V1,V,V22,V52) = 1+ fun1(W52,X52,Y52):3
     [Y52>=3,Y52=X52+1,Y52=V+1,W52=2,V1=2] 
* CE 366: start(V1,V,V22,V52) = 1+ fun1(W52,X52,Y52):4
     [Y52>=2,Y52+1=X52,Y52+1=V,W52=2,V1=2] 
* CE 367: start(V1,V,V22,V52) = 1+ fun1(V1,W52,X52):5
     [V1>=X52,X52>=0,V1>=3,W52=0,V=0] 
* CE 368: start(V1,V,V22,V52) = 1+ fun1(V1,V,W52):6
     [V>=0,V1>=0,W52=0] 
* CE 369: start(V1,V,V22,V52) = 1+ fun1(V1,V,W52):7
     [V1>=W52+1,W52>=0,V>=0,V1>=3] 
* CE 370: start(V1,V,V22,V52) = 1+ fun1(V1,V,W52):8
     [V1+V>=W52+1,W52>=0,V>=2,V1>=3] 
* CE 371: start(V1,V,V22,V52) = 0+ appendreverse(W52,V,V):1
     [V>=0,W52=2,V1=2] 
* CE 372: start(V1,V,V22,V52) = 0+ appendreverse(V1,V,W52):2
     [V>=0,V1>=0,W52=0] 
* CE 373: start(V1,V,V22,V52) = 0+ appendreverse(V1,W52,X52):3
     [X52+2>=V1,V1>=3,X52+2=V1+W52,X52+2=V1+V] 
* CE 374: start(V1,V,V22,V52) = 1+ fun3(W52,V,X52):1
     [V>=0,W52>=6,W52=V1+6,X52=0] 
* CE 375: start(V1,V,V22,V52) = 1+ fun3(W52,V,X52):2
     [X52>=0,V>=0,W52>=6,W52=V1+6] 
* CE 376: start(V1,V,V22,V52) = 1+ fun3(W52,V,X52):3
     [V>=0,W52>=6,W52=V1+6] 
* CE 377: start(V1,V,V22,V52) = 0+ fun3(V1,V,W52):1
     [V>=0,V1>=0,W52=0] 
* CE 378: start(V1,V,V22,V52) = 0+ fun3(V1,V,W52):2
     [W52>=0,V>=0,V1>=2] 
* CE 379: start(V1,V,V22,V52) = 0+ fun3(V1,V,W52):3
     [V>=0,V1>=2] 
* CE 380: start(V1,V,V22,V52) = 0+ fun5(V1,W52):1
     [V1>=0,W52=0] 
* CE 381: start(V1,V,V22,V52) = 0+ fun5(W52,X52):2
     [X52>=5,X52=W52+3,X52=V1+3] 
* CE 382: start(V1,V,V22,V52) = 0+ computeLine(W52,V,V22,V22):1
     [V22>=0,V>=0,W52=2,V1=2] 
* CE 383: start(V1,V,V22,V52) = 0+ computeLine(V1,W52,V22,X52):2
     [V22>=0,V1>=1,X52=2,W52=2,V=2] 
* CE 384: start(V1,V,V22,V52) = 0+ computeLine(V1,V,V22,W52):3
     [V22>=0,V>=0,V1>=0,W52=0] 
* CE 385: start(V1,V,V22,V52) = 0+ computeLine(V1,V,V22,W52):4
     [V22>=0,V>=3,V1>=2,W52=2] 
* CE 386: start(V1,V,V22,V52) = 0+ computeLine(V1,V,V22,W52):5
     [W52>=0,V22>=0,V>=1,V1>=3] 
* CE 387: start(V1,V,V22,V52) = 1+ fun11(V1,W52,X52):1
     [X52>=V1+4,V1>=1,X52=V1+W52+4,X52=V1+V+4] 
* CE 388: start(V1,V,V22,V52) = 1+ fun11(V1,V,W52):2
     [V>=0,V1>=0,W52=0] 
* CE 389: start(V1,V,V22,V52) = 0+ fun11(V1,W52,X52):1
     [X52>=V1+4,V1>=1,X52=V1+W52+4,X52=V1+V+4] 
* CE 390: start(V1,V,V22,V52) = 0+ fun11(V1,V,W52):2
     [V>=0,V1>=0,W52=0] 
* CE 391: start(V1,V,V22,V52) = 0+ fun12(V1,W52):1
     [V1>=0,W52=0] 
* CE 392: start(V1,V,V22,V52) = 0+ fun12(W52,X52):2
     [X52>=7,X52=W52+6,X52=V1+6] 
* CE 393: start(V1,V,V22,V52) = 1+ fun13(V,V1,W52):1
     [V1>=0,V>=0,W52=0] 
* CE 394: start(V1,V,V22,V52) = 1+ fun13(V,W52,X52):2
     [X52>=V+1,V>=1,X52=V+W52+1,X52=V1+V+1] 
* CE 395: start(V1,V,V22,V52) = 0+ fun13(V1,V,W52):1
     [V>=0,V1>=0,W52=0] 
* CE 396: start(V1,V,V22,V52) = 0+ fun13(V1,W52,X52):2
     [X52>=V1+1,V1>=1,X52=V1+W52+1,X52=V1+V+1] 
* CE 397: start(V1,V,V22,V52) = 0+ lineMult(V1,W52,V22,X52):1
     [V22>=0,V1>=0,X52=2,W52=2,V=2] 
* CE 398: start(V1,V,V22,V52) = 0+ lineMult(V1,V,V22,W52):2
     [V22>=0,V>=0,V1>=0,W52=0] 
* CE 399: start(V1,V,V22,V52) = 0+ lineMult(V1,V,V22,W52):3
     [W52>=1,V22>=1,V>=1,V1>=0] 
* CE 400: start(V1,V,V22,V52) = 0+ matrixMult(V1,V,W52):1
     [W52>=1,V>=0,V1>=1] 
* CE 401: start(V1,V,V22,V52) = 0+ matrixMult(V1,V,W52):2
     [V>=0,V1>=0,W52=0] 
* CE 402: start(V1,V,V22,V52) = 1+ appendreverse(W52,X52,Y52):1
     [Y52=2,X52=2,W52=2,V1=2] 
* CE 403: start(V1,V,V22,V52) = 1+ appendreverse(V1,W52,X52):2
     [V1>=0,X52=0,W52=2] 
* CE 404: start(V1,V,V22,V52) = 1+ appendreverse(V1,W52,V1):3
     [V1>=3,W52=2] 
* CE 405: start(V1,V,V22,V52) = 0+ fun1(W52,V,V):1
     [V>=0,W52=0,V1=0] 
* CE 406: start(V1,V,V22,V52) = 0+ fun1(W52,X52,Y52):2
     [Y52=2,X52=0,W52=2,V=0,V1=2] 
* CE 407: start(V1,V,V22,V52) = 0+ fun1(W52,X52,Y52):3
     [Y52>=3,Y52=X52+1,Y52=V+1,W52=2,V1=2] 
* CE 408: start(V1,V,V22,V52) = 0+ fun1(W52,X52,Y52):4
     [Y52>=2,Y52+1=X52,Y52+1=V,W52=2,V1=2] 
* CE 409: start(V1,V,V22,V52) = 0+ fun1(V1,W52,X52):5
     [V1>=X52,X52>=0,V1>=3,W52=0,V=0] 
* CE 410: start(V1,V,V22,V52) = 0+ fun1(V1,V,W52):6
     [V>=0,V1>=0,W52=0] 
* CE 411: start(V1,V,V22,V52) = 0+ fun1(V1,V,W52):7
     [V1>=W52+1,W52>=0,V>=0,V1>=3] 
* CE 412: start(V1,V,V22,V52) = 0+ fun1(V1,V,W52):8
     [V1+V>=W52+1,W52>=0,V>=2,V1>=3] 
* CE 413: start(V1,V,V22,V52) = 0+ fun(V1,V,W52):1
     [V>=0,V1>=0,W52=0] 
* CE 414: start(V1,V,V22,V52) = 0+ fun(V1,V,W52):2
     [V>=1,V1>=1,W52=1] 
* CE 415: start(V1,V,V22,V52) = 0+ fun(V1,V,W52):3
     [W52>=1,V>=1,V1>=2] 
* CE 416: start(V1,V,V22,V52) = 0+ fun19(V1,V,W52):1
     [V>=0,V1>=0,W52=0] 
* CE 417: start(V1,V,V22,V52) = 0+ fun19(V1,V,W52):2
     [W52>=0,V>=0,V1>=1] 
* CE 418: start(V1,V,V22,V52) = 0+ fun17(W52,X52):1
     [X52=2,W52=0,V1=0] 
* CE 419: start(V1,V,V22,V52) = 0+ fun17(V1,W52):2
     [V1>=0,W52=0] 
* CE 420: start(V1,V,V22,V52) = 0+ fun17(W52,X52):3
     [X52>=3,X52=W52+1,X52=V1+1] 
* CE 421: start(V1,V,V22,V52) = 0+ fun17(W52,X52):4
     [X52>=2,X52+1=W52,X52+1=V1] 
* CE 422: start(V1,V,V22,V52) = 0+ fun18(W52,X52):1
     [X52=2,W52=0,V1=0] 
* CE 423: start(V1,V,V22,V52) = 0+ fun18(V1,W52):2
     [V1>=0,W52=0] 
* CE 424: start(V1,V,V22,V52) = 0+ fun18(W52,X52):3
     [X52>=3,X52=W52+1,X52=V1+1] 
* CE 425: start(V1,V,V22,V52) = 0+ fun18(W52,X52):4
     [X52>=2,X52+1=W52,X52+1=V1] 

### Cost equations --> "Loop" of start/4 
* CEs [282,287,292,327,330,333,336,339,342,345,348,351,354] --> Loop 119 
* CEs [268] --> Loop 120 
* CEs [190] --> Loop 121 
* CEs [259,260] --> Loop 122 
* CEs [191,192,193,194,195,196,197,198,199,383,397] --> Loop 123 
* CEs [367,409] --> Loop 124 
* CEs [283] --> Loop 125 
* CEs [200,201,202,203,204,205,206,207,208,364,365,366,371,382,402,406,407,408] --> Loop 126 
* CEs [218,219] --> Loop 127 
* CEs [209,210,211,212,213,215,216,221,222,223,224,225,226,228,229,231,232,233,234,235,236,238,239,241,242,243,244,245,246,248,249,251,252,254,255,257,258,261,262,263,264,265,266,267,269,270,271,272,273,274,275,276,277,278,279,280,281,284,285,286,288,289,290,291,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,328,329,331,332,334,335,337,338,340,341,343,344,346,347,349,350,352,353,355,356,357,358,359,360,361,362,363,368,369,370,372,373,374,375,377,378,380,381,384,385,386,387,388,389,390,391,392,393,394,395,396,398,399,400,401,403,404,405,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425] --> Loop 128 
* CEs [214,217,220,227,230,237,240,247,250,253,256,376,379] --> Loop 129 

#### Loops of start/4 
* Loop 119: start(V1,V,V22,V52) [V22>=0,V>=0,V1>=1,V52=2] 
* Loop 120: start(V1,V,V22,V52) [V>=0,V1>=2,V22=5] 
* Loop 121: start(V1,V,V22,V52) [V>=0,V1>=1,V22=2] 
* Loop 122: start(V1,V,V22,V52) [V1>=2,V=2] 
* Loop 123: start(V1,V,V22,V52) [V22>=0,V1>=0,V=2] 
* Loop 124: start(V1,V,V22,V52) [V1>=3,V=0] 
* Loop 125: start(V1,V,V22,V52) [V52>=1,V22>=0,V>=0,V1=5] 
* Loop 126: start(V1,V,V22,V52) [V1=2] 
* Loop 127: start(V1,V,V22,V52) [V22>=0,V>=0,V1=1] 
* Loop 128: start(V1,V,V22,V52) [V1>=0] 
* Loop 129: start(V1,V,V22,V52) [V>=0,V1>=0] 

### Ranking functions of CR start(V1,V,V22,V52) 

#### Partial ranking functions of CR start(V1,V,V22,V52) 


### Resulting Chains:start(V1,V,V22,V52) 
* [129]...
* [128]
* [127]
* [126]
* [125]
* [124]
* [123]
* [122]
* [121]
* [120]
* [119]


### Merging Chains  start/4 into  External patterns of execution 
* [[127],[128]] --> 1 
* [[126]] --> 2 
* [[125]] --> 3 
* [[124]] --> 4 
* [[123]] --> 5 
* [[122]] --> 6 
* [[121]] --> 7 
* [[120]] --> 8 
* [[119]] --> 9 
* [[129]] --> 10 


Computing Bounds
=====================================

#### Cost of loops [50] 

 * loop 50:appendreverse(V1,V,Out) -> [appendreverse(V1',V',Out')] 
2
#### Cost of phase [50]:appendreverse(V1,V,Out) -> [appendreverse(V1',V',Out')] 
2*it(50)+0
  Such that:it(50) =< V1
it(50) =< V1-V1'

#### Cost of phase [50]:appendreverse(V1,V,Out) -> [appendreverse(V1',V',Out')] 
2*it(50)+0
  Such that:it(50) =< V1
it(50) =< V1-V1'

#### Cost of chains of appendreverse(V1,V,Out):
* Chain [[50],49]: 2*it(50)+2
  Such that:it(50) =< -V+Out

  with precondition: [V+V1=Out+2,V1>=3,V>=0] 

* Chain [[50],48]: 2*it(50)+1
  Such that:it(50) =< V1

  with precondition: [Out=0,V1>=1,V>=0] 

* Chain [49]: 2
  with precondition: [V1=2,V=Out,V>=0] 

* Chain [48]: 1
  with precondition: [Out=0,V1>=0,V>=0] 


#### Cost of chains of fun13(V1,V,Out):
* Chain [52]: 0
  with precondition: [Out=0,V1>=0,V>=0] 

* Chain [51]: 1
  with precondition: [V+V1+1=Out,V1>=1,V>=0] 


#### Cost of chains of fun17(V1,Out):
* Chain [56]: 0
  with precondition: [V1=0,Out=2] 

* Chain [55]: 0
  with precondition: [Out=0,V1>=0] 

* Chain [54]: 0
  with precondition: [V1+1=Out,V1>=2] 

* Chain [53]: 0
  with precondition: [V1=Out+1,V1>=3] 


#### Cost of chains of fun18(V1,Out):
* Chain [60]: 0
  with precondition: [V1=0,Out=2] 

* Chain [59]: 0
  with precondition: [Out=0,V1>=0] 

* Chain [58]: 0
  with precondition: [V1+1=Out,V1>=2] 

* Chain [57]: 0
  with precondition: [V1=Out+1,V1>=3] 


#### Cost of loops [61,62,63,64] 

 * loop 61:fun1(V1,V,Out) -> [fun1(V1',V',Out')] 
0
 * loop 62:fun1(V1,V,Out) -> [fun1(V1',V',Out')] 
0
 * loop 63:fun1(V1,V,Out) -> [fun1(V1',V',Out')] 
0
 * loop 64:fun1(V1,V,Out) -> [fun1(V1',V',Out')] 
0
#### Cost of phase [61,62,63,64]:fun1(V1,V,Out) -> [fun1(V1',V',Out')] 
0
#### Cost of phase [61,62,63,64]:fun1(V1,V,Out) -> [fun1(V1',V',Out')] 
0
#### Cost of phase [61,62,63,64]:fun1(V1,V,Out) -> [fun1(V1',V',Out')] 
0
#### Cost of phase [61,62,63,64]:fun1(V1,V,Out) -> [fun1(V1',V',Out')] 
0
#### Cost of chains of fun1(V1,V,Out):
* Chain [[61,62,63,64],68]: 0
  with precondition: [V=0,V1>=3,Out>=0,V1>=Out] 

* Chain [[61,62,63,64],67]: 0
  with precondition: [V1>=3,V>=0,Out>=0,V1>=Out+1] 

* Chain [[61,62,63,64],66]: 0
  with precondition: [V1>=3,V>=2,Out>=0,V+V1>=Out+1] 

* Chain [[61,62,63,64],65]: 0
  with precondition: [V1>=3,V>=3,Out>=0,V+V1>=Out+3] 

* Chain [69]: 0
  with precondition: [V1=0,V=Out,V>=0] 

* Chain [68]: 0
  with precondition: [V1=2,V=0,Out=2] 

* Chain [67]: 0
  with precondition: [Out=0,V1>=0,V>=0] 

* Chain [66]: 0
  with precondition: [V1=2,V+1=Out,V>=2] 

* Chain [65]: 0
  with precondition: [V1=2,V=Out+1,V>=3] 


#### Cost of loops [70,71,72,73,74,75,76] 

 * loop 70:fun19(V1,V,Out) -> [fun19(V1',V',Out')] 
0
 * loop 71:fun19(V1,V,Out) -> [fun19(V1',V',Out')] 
0
 * loop 72:fun19(V1,V,Out) -> [fun19(V1',V',Out')] 
0
 * loop 73:fun19(V1,V,Out) -> [fun19(V1',V',Out')] 
0
 * loop 74:fun19(V1,V,Out) -> [fun19(V1',V',Out')] 
0
 * loop 75:fun19(V1,V,Out) -> [fun19(V1',V',Out')] 
0
 * loop 76:fun19(V1,V,Out) -> [fun19(V1',V',Out')] 
0
#### Cost of phase [70,71,72,73,74,75,76]:fun19(V1,V,Out) -> [fun19(V1',V',Out')] 
0
#### Cost of chains of fun19(V1,V,Out):
* Chain [[70,71,72,73,74,75,76],77]: 0
  with precondition: [V1>=1,V>=0,Out>=0] 

* Chain [77]: 0
  with precondition: [Out=0,V1>=0,V>=0] 


#### Cost of chains of fun(V1,V,Out):
* Chain [81]: 0
  with precondition: [Out=0,V1>=0,V>=0] 

* Chain [80]: 0
  with precondition: [V=0,Out=0,V1>=1] 

* Chain [79]: 0
  with precondition: [Out=1,V1>=1,V>=1] 

* Chain [78]: 0
  with precondition: [V1>=2,V>=1,Out>=1] 


#### Cost of loops [82,83,84,85,86,87,88,89] 

 * loop 82:lineMult(V1,V,V22,Out) -> [lineMult(V1',V',V22',Out')] 
5
 * loop 83:lineMult(V1,V,V22,Out) -> [lineMult(V1',V',V22',Out')] 
5
 * loop 84:lineMult(V1,V,V22,Out) -> [lineMult(V1',V',V22',Out')] 
5
 * loop 85:lineMult(V1,V,V22,Out) -> [lineMult(V1',V',V22',Out')] 
5
 * loop 86:lineMult(V1,V,V22,Out) -> [lineMult(V1',V',V22',Out')] 
5
 * loop 87:lineMult(V1,V,V22,Out) -> [lineMult(V1',V',V22',Out')] 
4
 * loop 88:lineMult(V1,V,V22,Out) -> [lineMult(V1',V',V22',Out')] 
4
 * loop 89:lineMult(V1,V,V22,Out) -> [lineMult(V1',V',V22',Out')] 
4
#### Cost of phase [82,83,84,85,86,87,88,89]:lineMult(V1,V,V22,Out) -> [lineMult(V1',V',V22',Out')] 
5*it(82)+10*it(83)+5*it(84)+5*it(86)+4*it(87)+4*it(88)+4*it(89)+0
  Such that:it(88) =< V/2
it(88) =< V/2-V'/2
it(84) =< V22/4
it(84) =< V22/4-V22'/4
aux(5) =< V
aux(6) =< V-V'
aux(7) =< V/3
aux(8) =< V/3-V'/3
aux(9) =< V22
aux(10) =< V22-V22'
aux(11) =< V22/3
aux(12) =< V22/3-V22'/3
it(82) =< aux(5)
it(83) =< aux(5)
it(84) =< aux(5)
it(86) =< aux(5)
it(87) =< aux(5)
it(88) =< aux(5)
it(89) =< aux(5)
it(82) =< aux(6)
it(83) =< aux(6)
it(84) =< aux(6)
it(86) =< aux(6)
it(87) =< aux(6)
it(88) =< aux(6)
it(89) =< aux(6)
it(82) =< aux(7)
it(84) =< aux(7)
it(86) =< aux(7)
it(87) =< aux(7)
it(82) =< aux(8)
it(84) =< aux(8)
it(86) =< aux(8)
it(87) =< aux(8)
it(83) =< aux(9)
it(84) =< aux(9)
it(86) =< aux(9)
it(83) =< aux(10)
it(84) =< aux(10)
it(86) =< aux(10)
it(82) =< aux(11)
it(84) =< aux(11)
it(82) =< aux(12)
it(84) =< aux(12)

#### Cost of phase [82,83,84,85,86,87,88,89]:lineMult(V1,V,V22,Out) -> [lineMult(V1',V',V22',Out')] 
5*it(82)+10*it(83)+5*it(84)+5*it(86)+4*it(87)+4*it(88)+4*it(89)+0
  Such that:it(88) =< V/2
it(88) =< V/2-V'/2
it(84) =< V22/4
it(84) =< V22/4-V22'/4
aux(5) =< V
aux(6) =< V-V'
aux(7) =< V/3
aux(8) =< V/3-V'/3
aux(9) =< V22
aux(10) =< V22-V22'
aux(11) =< V22/3
aux(12) =< V22/3-V22'/3
it(82) =< aux(5)
it(83) =< aux(5)
it(84) =< aux(5)
it(86) =< aux(5)
it(87) =< aux(5)
it(88) =< aux(5)
it(89) =< aux(5)
it(82) =< aux(6)
it(83) =< aux(6)
it(84) =< aux(6)
it(86) =< aux(6)
it(87) =< aux(6)
it(88) =< aux(6)
it(89) =< aux(6)
it(82) =< aux(7)
it(84) =< aux(7)
it(86) =< aux(7)
it(87) =< aux(7)
it(82) =< aux(8)
it(84) =< aux(8)
it(86) =< aux(8)
it(87) =< aux(8)
it(83) =< aux(9)
it(84) =< aux(9)
it(86) =< aux(9)
it(83) =< aux(10)
it(84) =< aux(10)
it(86) =< aux(10)
it(82) =< aux(11)
it(84) =< aux(11)
it(82) =< aux(12)
it(84) =< aux(12)

#### Cost of chains of lineMult(V1,V,V22,Out):
* Chain [[82,83,84,85,86,87,88,89],91]: 5*it(82)+10*it(83)+5*it(84)+5*it(86)+4*it(87)+4*it(88)+4*it(89)+2
  Such that:it(88) =< V/2
it(84) =< V22/4
aux(13) =< V
aux(14) =< V/3
aux(15) =< V22
aux(16) =< V22/3
it(82) =< aux(13)
it(83) =< aux(13)
it(84) =< aux(13)
it(86) =< aux(13)
it(87) =< aux(13)
it(88) =< aux(13)
it(89) =< aux(13)
it(82) =< aux(14)
it(84) =< aux(14)
it(86) =< aux(14)
it(87) =< aux(14)
it(83) =< aux(15)
it(84) =< aux(15)
it(86) =< aux(15)
it(82) =< aux(16)
it(84) =< aux(16)

  with precondition: [V1>=0,V>=3,V22>=1,Out>=3] 

* Chain [[82,83,84,85,86,87,88,89],90]: 5*it(82)+10*it(83)+5*it(84)+5*it(86)+4*it(87)+4*it(88)+4*it(89)+2
  Such that:it(88) =< V/2
it(84) =< V22/4
aux(17) =< V
aux(18) =< V/3
aux(19) =< V22
aux(20) =< V22/3
it(82) =< aux(17)
it(83) =< aux(17)
it(84) =< aux(17)
it(86) =< aux(17)
it(87) =< aux(17)
it(88) =< aux(17)
it(89) =< aux(17)
it(82) =< aux(18)
it(84) =< aux(18)
it(86) =< aux(18)
it(87) =< aux(18)
it(83) =< aux(19)
it(84) =< aux(19)
it(86) =< aux(19)
it(82) =< aux(20)
it(84) =< aux(20)

  with precondition: [V1>=0,V>=1,V22>=1,Out>=1] 

* Chain [91]: 2
  with precondition: [V=2,Out=2,V1>=0,V22>=0] 

* Chain [90]: 2
  with precondition: [Out=0,V1>=0,V>=0,V22>=0] 


#### Cost of loops [92,93,94] 

 * loop 92:computeLine(V1,V,V22,Out) -> [computeLine(V1',V',V22',Out')] 
8*s(43)+10*s(44)+10*s(45)+20*s(46)+10*s(47)+8*s(48)+8*s(49)+5
  Such that:s(37) =< V-V'
s(38) =< V/2-V'/2
s(39) =< V/3-V'/3
s(40) =< V22
s(41) =< V22/3
s(42) =< V22/4
s(43) =< s(38)
s(44) =< s(42)
s(45) =< s(37)
s(46) =< s(37)
s(44) =< s(37)
s(47) =< s(37)
s(48) =< s(37)
s(43) =< s(37)
s(49) =< s(37)
s(45) =< s(39)
s(44) =< s(39)
s(47) =< s(39)
s(48) =< s(39)
s(46) =< s(40)
s(44) =< s(40)
s(47) =< s(40)
s(45) =< s(41)
s(44) =< s(41)

 * loop 93:computeLine(V1,V,V22,Out) -> [computeLine(V1',V',V22',Out')] 
5
 * loop 94:computeLine(V1,V,V22,Out) -> [computeLine(V1',V',V22',Out')] 
5
#### Cost of phase [92,93,94]:computeLine(V1,V,V22,Out) -> [computeLine(V1',V',V22',Out')] 
5*it(92)+5*it(93)+5*it(94)+8*s(50)+10*s(51)+10*s(52)+20*s(53)+10*s(54)+8*s(55)+8*s(56)+0
  Such that:it(93) =< V/3
it(93) =< V/3-V'/3
aux(35) =< V1
aux(36) =< V1-V1'
aux(37) =< V
aux(38) =< V-V'
aux(39) =< V/2
aux(40) =< V/2-V'/2
it(92) =< aux(35)
it(93) =< aux(35)
it(94) =< aux(35)
it(92) =< aux(36)
it(93) =< aux(36)
it(94) =< aux(36)
aux(27) =< aux(37)
it(92) =< aux(37)
it(93) =< aux(37)
it(94) =< aux(37)
aux(27) =< aux(38)
it(92) =< aux(38)
it(93) =< aux(38)
it(94) =< aux(38)
it(92) =< aux(39)
it(93) =< aux(39)
it(92) =< aux(40)
it(93) =< aux(40)
s(59) =< aux(27)* (1/3)
s(62) =< aux(27)* (1/2)
s(50) =< s(62)
s(52) =< aux(27)
s(53) =< aux(27)
s(51) =< aux(27)
s(54) =< aux(27)
s(55) =< aux(27)
s(50) =< aux(27)
s(56) =< aux(27)
s(52) =< s(59)
s(51) =< s(59)
s(54) =< s(59)
s(55) =< s(59)

#### Cost of phase [92,93,94]:computeLine(V1,V,V22,Out) -> [computeLine(V1',V',V22',Out')] 
5*it(92)+5*it(93)+5*it(94)+8*s(50)+10*s(51)+10*s(52)+20*s(53)+10*s(54)+8*s(55)+8*s(56)+0
  Such that:it(93) =< V/3
it(93) =< V/3-V'/3
aux(35) =< V1
aux(36) =< V1-V1'
aux(37) =< V
aux(38) =< V-V'
aux(39) =< V/2
aux(40) =< V/2-V'/2
it(92) =< aux(35)
it(93) =< aux(35)
it(94) =< aux(35)
it(92) =< aux(36)
it(93) =< aux(36)
it(94) =< aux(36)
aux(27) =< aux(37)
it(92) =< aux(37)
it(93) =< aux(37)
it(94) =< aux(37)
aux(27) =< aux(38)
it(92) =< aux(38)
it(93) =< aux(38)
it(94) =< aux(38)
it(92) =< aux(39)
it(93) =< aux(39)
it(92) =< aux(40)
it(93) =< aux(40)
s(59) =< aux(27)* (1/3)
s(62) =< aux(27)* (1/2)
s(50) =< s(62)
s(52) =< aux(27)
s(53) =< aux(27)
s(51) =< aux(27)
s(54) =< aux(27)
s(55) =< aux(27)
s(50) =< aux(27)
s(56) =< aux(27)
s(52) =< s(59)
s(51) =< s(59)
s(54) =< s(59)
s(55) =< s(59)

#### Cost of phase [92,93,94]:computeLine(V1,V,V22,Out) -> [computeLine(V1',V',V22',Out')] 
5*it(92)+5*it(93)+5*it(94)+8*s(50)+10*s(51)+10*s(52)+20*s(53)+10*s(54)+8*s(55)+8*s(56)+0
  Such that:it(93) =< V/3
it(93) =< V/3-V'/3
aux(35) =< V1
aux(36) =< V1-V1'
aux(37) =< V
aux(38) =< V-V'
aux(39) =< V/2
aux(40) =< V/2-V'/2
it(92) =< aux(35)
it(93) =< aux(35)
it(94) =< aux(35)
it(92) =< aux(36)
it(93) =< aux(36)
it(94) =< aux(36)
aux(27) =< aux(37)
it(92) =< aux(37)
it(93) =< aux(37)
it(94) =< aux(37)
aux(27) =< aux(38)
it(92) =< aux(38)
it(93) =< aux(38)
it(94) =< aux(38)
it(92) =< aux(39)
it(93) =< aux(39)
it(92) =< aux(40)
it(93) =< aux(40)
s(59) =< aux(27)* (1/3)
s(62) =< aux(27)* (1/2)
s(50) =< s(62)
s(52) =< aux(27)
s(53) =< aux(27)
s(51) =< aux(27)
s(54) =< aux(27)
s(55) =< aux(27)
s(50) =< aux(27)
s(56) =< aux(27)
s(52) =< s(59)
s(51) =< s(59)
s(54) =< s(59)
s(55) =< s(59)

#### Cost of chains of computeLine(V1,V,V22,Out):
* Chain [[92,93,94],97]: 5*it(92)+5*it(93)+5*it(94)+8*s(50)+38*s(51)+28*s(53)+2
  Such that:it(93) =< V/3
aux(41) =< V1
aux(42) =< V
aux(43) =< V/2
it(92) =< aux(41)
it(93) =< aux(41)
it(94) =< aux(41)
it(92) =< aux(42)
it(93) =< aux(42)
it(94) =< aux(42)
it(92) =< aux(43)
it(93) =< aux(43)
s(59) =< aux(42)* (1/3)
s(62) =< aux(42)* (1/2)
s(50) =< s(62)
s(51) =< aux(42)
s(53) =< aux(42)
s(50) =< aux(42)
s(51) =< s(59)

  with precondition: [V1>=3,V>=1,V22>=0,Out>=0] 

* Chain [[92,93,94],96]: 5*it(92)+5*it(93)+5*it(94)+8*s(50)+38*s(51)+28*s(53)+3
  Such that:it(93) =< V/3
aux(44) =< V1
aux(45) =< V
aux(46) =< V/2
it(92) =< aux(44)
it(93) =< aux(44)
it(94) =< aux(44)
it(92) =< aux(45)
it(93) =< aux(45)
it(94) =< aux(45)
it(92) =< aux(46)
it(93) =< aux(46)
s(59) =< aux(45)* (1/3)
s(62) =< aux(45)* (1/2)
s(50) =< s(62)
s(51) =< aux(45)
s(53) =< aux(45)
s(50) =< aux(45)
s(51) =< s(59)

  with precondition: [Out=2,V1>=2,V>=3,V22>=0] 

* Chain [[92,93,94],95]: 5*it(92)+5*it(93)+5*it(94)+8*s(50)+38*s(51)+28*s(53)+2
  Such that:it(93) =< V/3
aux(47) =< V1
aux(48) =< V
aux(49) =< V/2
it(92) =< aux(47)
it(93) =< aux(47)
it(94) =< aux(47)
it(92) =< aux(48)
it(93) =< aux(48)
it(94) =< aux(48)
it(92) =< aux(49)
it(93) =< aux(49)
s(59) =< aux(48)* (1/3)
s(62) =< aux(48)* (1/2)
s(50) =< s(62)
s(51) =< aux(48)
s(53) =< aux(48)
s(50) =< aux(48)
s(51) =< s(59)

  with precondition: [Out=0,V1>=1,V>=1,V22>=0] 

* Chain [97]: 2
  with precondition: [V1=2,V22=Out,V>=0,V22>=0] 

* Chain [96]: 3
  with precondition: [V=2,Out=2,V1>=1,V22>=0] 

* Chain [95]: 2
  with precondition: [Out=0,V1>=0,V>=0,V22>=0] 


#### Cost of loops [100,101,102,103,104] 

 * loop 100:matrixMult(V1,V,Out) -> [matrixMult(V1',V',Out')] 
5*s(88)+5*s(89)+5*s(90)+8*s(93)+38*s(94)+28*s(95)+4
  Such that:s(85) =< V1-V1'
s(86) =< V'
s(87) =< V'/2
s(88) =< V'/3
s(89) =< s(85)
s(88) =< s(85)
s(90) =< s(85)
s(89) =< s(86)
s(88) =< s(86)
s(90) =< s(86)
s(89) =< s(87)
s(88) =< s(87)
s(91) =< s(86)* (1/3)
s(92) =< s(86)* (1/2)
s(93) =< s(92)
s(94) =< s(86)
s(95) =< s(86)
s(93) =< s(86)
s(94) =< s(91)

 * loop 101:matrixMult(V1,V,Out) -> [matrixMult(V1',V',Out')] 
5*s(110)+5*s(111)+5*s(112)+8*s(115)+38*s(116)+28*s(117)+5
  Such that:s(107) =< V1-V1'
s(108) =< V'
s(109) =< V'/2
s(110) =< V'/3
s(111) =< s(107)
s(110) =< s(107)
s(112) =< s(107)
s(111) =< s(108)
s(110) =< s(108)
s(112) =< s(108)
s(111) =< s(109)
s(110) =< s(109)
s(113) =< s(108)* (1/3)
s(114) =< s(108)* (1/2)
s(115) =< s(114)
s(116) =< s(108)
s(117) =< s(108)
s(115) =< s(108)
s(116) =< s(113)

 * loop 102:matrixMult(V1,V,Out) -> [matrixMult(V1',V',Out')] 
5*s(132)+5*s(133)+5*s(134)+8*s(137)+38*s(138)+28*s(139)+4
  Such that:s(129) =< V1-V1'
s(130) =< V
s(131) =< V/2
s(132) =< V/3
s(133) =< s(129)
s(132) =< s(129)
s(134) =< s(129)
s(133) =< s(130)
s(132) =< s(130)
s(134) =< s(130)
s(133) =< s(131)
s(132) =< s(131)
s(135) =< s(130)* (1/3)
s(136) =< s(130)* (1/2)
s(137) =< s(136)
s(138) =< s(130)
s(139) =< s(130)
s(137) =< s(130)
s(138) =< s(135)

 * loop 103:matrixMult(V1,V,Out) -> [matrixMult(V1',V',Out')] 
4
 * loop 104:matrixMult(V1,V,Out) -> [matrixMult(V1',V',Out')] 
5
#### Cost of phase [100,101,102,103,104]:matrixMult(V1,V,Out) -> [matrixMult(V1',V',Out')] 
4*it(100)+18*it(101)+5*s(140)+5*s(141)+5*s(142)+8*s(143)+38*s(144)+28*s(145)+10*s(151)+10*s(152)+10*s(153)+16*s(154)+76*s(155)+56*s(156)+0
  Such that:it(100) =< V1/4
it(100) =< V1/4-V1'/4
aux(50) =< V
aux(59) =< V1
aux(60) =< V1-V1'
it(100) =< aux(59)
it(101) =< aux(59)
s(150) =< aux(59)
it(100) =< aux(60)
it(101) =< aux(60)
s(150) =< aux(60)
aux(53) =< aux(50)
aux(51) =< it(100)*aux(50)
aux(54) =< it(101)*aux(53)
s(140) =< aux(51)* (1/3)
s(148) =< aux(51)* (1/2)
s(151) =< aux(54)* (1/3)
s(159) =< aux(54)* (1/2)
s(152) =< s(150)
s(151) =< s(150)
s(153) =< s(150)
s(152) =< aux(54)
s(151) =< aux(54)
s(153) =< aux(54)
s(152) =< s(159)
s(151) =< s(159)
s(157) =< aux(54)* (1/3)
s(154) =< s(159)
s(155) =< aux(54)
s(156) =< aux(54)
s(154) =< aux(54)
s(155) =< s(157)
s(141) =< s(150)
s(140) =< s(150)
s(142) =< s(150)
s(141) =< aux(51)
s(140) =< aux(51)
s(142) =< aux(51)
s(141) =< s(148)
s(140) =< s(148)
s(146) =< aux(51)* (1/3)
s(143) =< s(148)
s(144) =< aux(51)
s(145) =< aux(51)
s(143) =< aux(51)
s(144) =< s(146)

#### Cost of phase [100,101,102,103,104]:matrixMult(V1,V,Out) -> [matrixMult(V1',V',Out')] 
4*it(100)+18*it(101)+5*s(140)+5*s(141)+5*s(142)+8*s(143)+38*s(144)+28*s(145)+10*s(151)+10*s(152)+10*s(153)+16*s(154)+76*s(155)+56*s(156)+0
  Such that:it(100) =< V1/4
it(100) =< V1/4-V1'/4
aux(50) =< V
aux(59) =< V1
aux(60) =< V1-V1'
it(100) =< aux(59)
it(101) =< aux(59)
s(150) =< aux(59)
it(100) =< aux(60)
it(101) =< aux(60)
s(150) =< aux(60)
aux(53) =< aux(50)
aux(51) =< it(100)*aux(50)
aux(54) =< it(101)*aux(53)
s(140) =< aux(51)* (1/3)
s(148) =< aux(51)* (1/2)
s(151) =< aux(54)* (1/3)
s(159) =< aux(54)* (1/2)
s(152) =< s(150)
s(151) =< s(150)
s(153) =< s(150)
s(152) =< aux(54)
s(151) =< aux(54)
s(153) =< aux(54)
s(152) =< s(159)
s(151) =< s(159)
s(157) =< aux(54)* (1/3)
s(154) =< s(159)
s(155) =< aux(54)
s(156) =< aux(54)
s(154) =< aux(54)
s(155) =< s(157)
s(141) =< s(150)
s(140) =< s(150)
s(142) =< s(150)
s(141) =< aux(51)
s(140) =< aux(51)
s(142) =< aux(51)
s(141) =< s(148)
s(140) =< s(148)
s(146) =< aux(51)* (1/3)
s(143) =< s(148)
s(144) =< aux(51)
s(145) =< aux(51)
s(143) =< aux(51)
s(144) =< s(146)

#### Cost of chains of matrixMult(V1,V,Out):
* Chain [[100,101,102,103,104],99]: 4*it(100)+18*it(101)+5*s(140)+5*s(141)+5*s(142)+8*s(143)+38*s(144)+28*s(145)+10*s(151)+10*s(152)+10*s(153)+16*s(154)+76*s(155)+56*s(156)+2
  Such that:it(100) =< V1/4
aux(50) =< V
aux(61) =< V1
it(100) =< aux(61)
it(101) =< aux(61)
aux(53) =< aux(50)
aux(51) =< it(100)*aux(50)
aux(54) =< it(101)*aux(53)
s(140) =< aux(51)* (1/3)
s(148) =< aux(51)* (1/2)
s(151) =< aux(54)* (1/3)
s(159) =< aux(54)* (1/2)
s(152) =< aux(61)
s(151) =< aux(61)
s(153) =< aux(61)
s(152) =< aux(54)
s(151) =< aux(54)
s(153) =< aux(54)
s(152) =< s(159)
s(151) =< s(159)
s(157) =< aux(54)* (1/3)
s(154) =< s(159)
s(155) =< aux(54)
s(156) =< aux(54)
s(154) =< aux(54)
s(155) =< s(157)
s(141) =< aux(61)
s(140) =< aux(61)
s(142) =< aux(61)
s(141) =< aux(51)
s(140) =< aux(51)
s(142) =< aux(51)
s(141) =< s(148)
s(140) =< s(148)
s(146) =< aux(51)* (1/3)
s(143) =< s(148)
s(144) =< aux(51)
s(145) =< aux(51)
s(143) =< aux(51)
s(144) =< s(146)

  with precondition: [V1>=3,V>=0,Out>=3] 

* Chain [[100,101,102,103,104],98]: 4*it(100)+18*it(101)+5*s(140)+5*s(141)+5*s(142)+8*s(143)+38*s(144)+28*s(145)+10*s(151)+10*s(152)+10*s(153)+16*s(154)+76*s(155)+56*s(156)+1
  Such that:it(100) =< V1/4
aux(50) =< V
aux(62) =< V1
it(100) =< aux(62)
it(101) =< aux(62)
aux(53) =< aux(50)
aux(51) =< it(100)*aux(50)
aux(54) =< it(101)*aux(53)
s(140) =< aux(51)* (1/3)
s(148) =< aux(51)* (1/2)
s(151) =< aux(54)* (1/3)
s(159) =< aux(54)* (1/2)
s(152) =< aux(62)
s(151) =< aux(62)
s(153) =< aux(62)
s(152) =< aux(54)
s(151) =< aux(54)
s(153) =< aux(54)
s(152) =< s(159)
s(151) =< s(159)
s(157) =< aux(54)* (1/3)
s(154) =< s(159)
s(155) =< aux(54)
s(156) =< aux(54)
s(154) =< aux(54)
s(155) =< s(157)
s(141) =< aux(62)
s(140) =< aux(62)
s(142) =< aux(62)
s(141) =< aux(51)
s(140) =< aux(51)
s(142) =< aux(51)
s(141) =< s(148)
s(140) =< s(148)
s(146) =< aux(51)* (1/3)
s(143) =< s(148)
s(144) =< aux(51)
s(145) =< aux(51)
s(143) =< aux(51)
s(144) =< s(146)

  with precondition: [V1>=1,V>=0,Out>=1] 

* Chain [99]: 2
  with precondition: [V1=2,Out=2,V>=0] 

* Chain [98]: 1
  with precondition: [Out=0,V1>=0,V>=0] 


#### Cost of chains of fun12(V1,Out):
* Chain [106]: 0
  with precondition: [Out=0,V1>=0] 

* Chain [105]: 1
  with precondition: [V1+6=Out,V1>=1] 


#### Cost of chains of fun11(V1,V,Out):
* Chain [109]: 4*s(219)+4
  Such that:aux(66) =< V
s(219) =< aux(66)

  with precondition: [Out=0,V1>=0,V>=0] 

* Chain [108]: 5
  with precondition: [V+V1+4=Out,V1>=1,V>=0] 

* Chain [107]: 2*s(221)+5
  Such that:s(221) =< V

  with precondition: [V1=2,V+6=Out,V>=3] 


#### Cost of chains of fun5(V1,Out):
* Chain [111]: 4*s(224)+6
  Such that:s(223) =< V1
s(224) =< s(223)

  with precondition: [Out=0,V1>=0] 

* Chain [110]: 2*s(225)+7
  Such that:s(225) =< V1

  with precondition: [V1+3=Out,V1>=2] 


#### Cost of loops [112,113,114] 

 * loop 112:fun3(V1,V,Out) -> [fun3(V1',V',Out')] 
2*s(251)+8*s(255)+36*s(256)+10*s(260)+20*s(262)+20*s(264)+20*s(265)+32*s(267)+152*s(268)+112*s(269)+10*s(270)+10*s(271)+16*s(273)+76*s(274)+56*s(275)+18
  Such that:s(251) =< V1
s(252) =< V1-V1'+2
s(253) =< V
s(254) =< V/4
s(255) =< s(254)
s(255) =< s(253)
s(256) =< s(253)
s(257) =< s(252)
s(258) =< s(255)*s(252)
s(259) =< s(256)*s(257)
s(260) =< s(258)* (1/3)
s(261) =< s(258)* (1/2)
s(262) =< s(259)* (1/3)
s(263) =< s(259)* (1/2)
s(264) =< s(253)
s(262) =< s(253)
s(265) =< s(253)
s(264) =< s(259)
s(262) =< s(259)
s(265) =< s(259)
s(264) =< s(263)
s(262) =< s(263)
s(266) =< s(259)* (1/3)
s(267) =< s(263)
s(268) =< s(259)
s(269) =< s(259)
s(267) =< s(259)
s(268) =< s(266)
s(270) =< s(253)
s(260) =< s(253)
s(271) =< s(253)
s(270) =< s(258)
s(260) =< s(258)
s(271) =< s(258)
s(270) =< s(261)
s(260) =< s(261)
s(272) =< s(258)* (1/3)
s(273) =< s(261)
s(274) =< s(258)
s(275) =< s(258)
s(273) =< s(258)
s(274) =< s(272)

 * loop 113:fun3(V1,V,Out) -> [fun3(V1',V',Out')] 
2*s(277)+11
  Such that:s(277) =< V1

 * loop 114:fun3(V1,V,Out) -> [fun3(V1',V',Out')] 
2*s(279)+17
  Such that:s(279) =< V1

#### Cost of phase [112,113,114]:fun3(V1,V,Out) -> [fun3(V1',V',Out')] 
46*it(112)+6*s(280)+8*s(281)+36*s(282)+10*s(283)+20*s(284)+20*s(285)+20*s(286)+32*s(287)+152*s(288)+112*s(289)+10*s(290)+10*s(291)+16*s(292)+76*s(293)+56*s(294)+0
#### Cost of phase [112,113,114]:fun3(V1,V,Out) -> [fun3(V1',V',Out')] 
46*it(112)+6*s(280)+8*s(281)+36*s(282)+10*s(283)+20*s(284)+20*s(285)+20*s(286)+32*s(287)+152*s(288)+112*s(289)+10*s(290)+10*s(291)+16*s(292)+76*s(293)+56*s(294)+0
#### Cost of loops [112,113,114] 

 * loop 112:fun3(V1,V,Out) -> [fun3(V1',V',Out')] 
2*s(251)+8*s(255)+36*s(256)+10*s(260)+20*s(262)+20*s(264)+20*s(265)+32*s(267)+152*s(268)+112*s(269)+10*s(270)+10*s(271)+16*s(273)+76*s(274)+56*s(275)+18
  Such that:s(251) =< V1
s(252) =< V1-V1'+2
s(253) =< V
s(254) =< V/4
s(255) =< s(254)
s(255) =< s(253)
s(256) =< s(253)
s(257) =< s(252)
s(258) =< s(255)*s(252)
s(259) =< s(256)*s(257)
s(260) =< s(258)* (1/3)
s(261) =< s(258)* (1/2)
s(262) =< s(259)* (1/3)
s(263) =< s(259)* (1/2)
s(264) =< s(253)
s(262) =< s(253)
s(265) =< s(253)
s(264) =< s(259)
s(262) =< s(259)
s(265) =< s(259)
s(264) =< s(263)
s(262) =< s(263)
s(266) =< s(259)* (1/3)
s(267) =< s(263)
s(268) =< s(259)
s(269) =< s(259)
s(267) =< s(259)
s(268) =< s(266)
s(270) =< s(253)
s(260) =< s(253)
s(271) =< s(253)
s(270) =< s(258)
s(260) =< s(258)
s(271) =< s(258)
s(270) =< s(261)
s(260) =< s(261)
s(272) =< s(258)* (1/3)
s(273) =< s(261)
s(274) =< s(258)
s(275) =< s(258)
s(273) =< s(258)
s(274) =< s(272)

 * loop 113:fun3(V1,V,Out) -> [fun3(V1',V',Out')] 
2*s(277)+11
  Such that:s(277) =< V1

 * loop 114:fun3(V1,V,Out) -> [fun3(V1',V',Out')] 
2*s(279)+17
  Such that:s(279) =< V1

#### Cost of phase [112,113,114]:fun3(V1,V,Out) -> [] 
46*it(112)+10*it([118])+6*s(280)+8*s(281)+36*s(282)+10*s(283)+20*s(284)+20*s(285)+20*s(286)+32*s(287)+152*s(288)+112*s(289)+10*s(290)+10*s(291)+16*s(292)+76*s(293)+56*s(294)+10*s(310)+0
  Such that:it([118]) =< 1

#### Cost of phase [112,113,114]:fun3(V1,V,Out) -> [fun3(V1',V',Out')] 
46*it(112)+6*s(280)+8*s(281)+36*s(282)+10*s(283)+20*s(284)+20*s(285)+20*s(286)+32*s(287)+152*s(288)+112*s(289)+10*s(290)+10*s(291)+16*s(292)+76*s(293)+56*s(294)+0
#### Cost of loops [112,113,114] 

 * loop 112:fun3(V1,V,Out) -> [fun3(V1',V',Out')] 
2*s(251)+8*s(255)+36*s(256)+10*s(260)+20*s(262)+20*s(264)+20*s(265)+32*s(267)+152*s(268)+112*s(269)+10*s(270)+10*s(271)+16*s(273)+76*s(274)+56*s(275)+18
  Such that:s(251) =< V1
s(252) =< V1-V1'+2
s(253) =< V
s(254) =< V/4
s(255) =< s(254)
s(255) =< s(253)
s(256) =< s(253)
s(257) =< s(252)
s(258) =< s(255)*s(252)
s(259) =< s(256)*s(257)
s(260) =< s(258)* (1/3)
s(261) =< s(258)* (1/2)
s(262) =< s(259)* (1/3)
s(263) =< s(259)* (1/2)
s(264) =< s(253)
s(262) =< s(253)
s(265) =< s(253)
s(264) =< s(259)
s(262) =< s(259)
s(265) =< s(259)
s(264) =< s(263)
s(262) =< s(263)
s(266) =< s(259)* (1/3)
s(267) =< s(263)
s(268) =< s(259)
s(269) =< s(259)
s(267) =< s(259)
s(268) =< s(266)
s(270) =< s(253)
s(260) =< s(253)
s(271) =< s(253)
s(270) =< s(258)
s(260) =< s(258)
s(271) =< s(258)
s(270) =< s(261)
s(260) =< s(261)
s(272) =< s(258)* (1/3)
s(273) =< s(261)
s(274) =< s(258)
s(275) =< s(258)
s(273) =< s(258)
s(274) =< s(272)

 * loop 113:fun3(V1,V,Out) -> [fun3(V1',V',Out')] 
2*s(277)+11
  Such that:s(277) =< V1

 * loop 114:fun3(V1,V,Out) -> [fun3(V1',V',Out')] 
2*s(279)+17
  Such that:s(279) =< V1

#### Cost of phase [112,113,114]:fun3(V1,V,Out) -> [] 
46*it(112)+10*it([117])+6*s(280)+8*s(281)+36*s(282)+10*s(283)+20*s(284)+20*s(285)+20*s(286)+32*s(287)+152*s(288)+112*s(289)+10*s(290)+10*s(291)+16*s(292)+76*s(293)+56*s(294)+2*s(313)+0
  Such that:it([117]) =< 1

#### Cost of phase [112,113,114]:fun3(V1,V,Out) -> [fun3(V1',V',Out')] 
46*it(112)+6*s(280)+8*s(281)+36*s(282)+10*s(283)+20*s(284)+20*s(285)+20*s(286)+32*s(287)+152*s(288)+112*s(289)+10*s(290)+10*s(291)+16*s(292)+76*s(293)+56*s(294)+0
#### Cost of loops [112,113,114] 

 * loop 112:fun3(V1,V,Out) -> [fun3(V1',V',Out')] 
2*s(251)+8*s(255)+36*s(256)+10*s(260)+20*s(262)+20*s(264)+20*s(265)+32*s(267)+152*s(268)+112*s(269)+10*s(270)+10*s(271)+16*s(273)+76*s(274)+56*s(275)+18
  Such that:s(251) =< V1
s(252) =< V1-V1'+2
s(253) =< V
s(254) =< V/4
s(255) =< s(254)
s(255) =< s(253)
s(256) =< s(253)
s(257) =< s(252)
s(258) =< s(255)*s(252)
s(259) =< s(256)*s(257)
s(260) =< s(258)* (1/3)
s(261) =< s(258)* (1/2)
s(262) =< s(259)* (1/3)
s(263) =< s(259)* (1/2)
s(264) =< s(253)
s(262) =< s(253)
s(265) =< s(253)
s(264) =< s(259)
s(262) =< s(259)
s(265) =< s(259)
s(264) =< s(263)
s(262) =< s(263)
s(266) =< s(259)* (1/3)
s(267) =< s(263)
s(268) =< s(259)
s(269) =< s(259)
s(267) =< s(259)
s(268) =< s(266)
s(270) =< s(253)
s(260) =< s(253)
s(271) =< s(253)
s(270) =< s(258)
s(260) =< s(258)
s(271) =< s(258)
s(270) =< s(261)
s(260) =< s(261)
s(272) =< s(258)* (1/3)
s(273) =< s(261)
s(274) =< s(258)
s(275) =< s(258)
s(273) =< s(258)
s(274) =< s(272)

 * loop 113:fun3(V1,V,Out) -> [fun3(V1',V',Out')] 
2*s(277)+11
  Such that:s(277) =< V1

 * loop 114:fun3(V1,V,Out) -> [fun3(V1',V',Out')] 
2*s(279)+17
  Such that:s(279) =< V1

#### Cost of phase [112,113,114]:fun3(V1,V,Out) -> [] 
46*it(112)+26*it([116,118])+6*s(280)+8*s(281)+36*s(282)+10*s(283)+20*s(284)+20*s(285)+20*s(286)+32*s(287)+152*s(288)+112*s(289)+10*s(290)+10*s(291)+16*s(292)+76*s(293)+56*s(294)+4*s(316)+0
  Such that:it([116,118]) =< 1

#### Cost of phase [112,113,114]:fun3(V1,V,Out) -> [fun3(V1',V',Out')] 
46*it(112)+6*s(280)+8*s(281)+36*s(282)+10*s(283)+20*s(284)+20*s(285)+20*s(286)+32*s(287)+152*s(288)+112*s(289)+10*s(290)+10*s(291)+16*s(292)+76*s(293)+56*s(294)+0
#### Cost of loops [112,113,114] 

 * loop 112:fun3(V1,V,Out) -> [fun3(V1',V',Out')] 
2*s(251)+8*s(255)+36*s(256)+10*s(260)+20*s(262)+20*s(264)+20*s(265)+32*s(267)+152*s(268)+112*s(269)+10*s(270)+10*s(271)+16*s(273)+76*s(274)+56*s(275)+18
  Such that:s(251) =< V1
s(252) =< V1-V1'+2
s(253) =< V
s(254) =< V/4
s(255) =< s(254)
s(255) =< s(253)
s(256) =< s(253)
s(257) =< s(252)
s(258) =< s(255)*s(252)
s(259) =< s(256)*s(257)
s(260) =< s(258)* (1/3)
s(261) =< s(258)* (1/2)
s(262) =< s(259)* (1/3)
s(263) =< s(259)* (1/2)
s(264) =< s(253)
s(262) =< s(253)
s(265) =< s(253)
s(264) =< s(259)
s(262) =< s(259)
s(265) =< s(259)
s(264) =< s(263)
s(262) =< s(263)
s(266) =< s(259)* (1/3)
s(267) =< s(263)
s(268) =< s(259)
s(269) =< s(259)
s(267) =< s(259)
s(268) =< s(266)
s(270) =< s(253)
s(260) =< s(253)
s(271) =< s(253)
s(270) =< s(258)
s(260) =< s(258)
s(271) =< s(258)
s(270) =< s(261)
s(260) =< s(261)
s(272) =< s(258)* (1/3)
s(273) =< s(261)
s(274) =< s(258)
s(275) =< s(258)
s(273) =< s(258)
s(274) =< s(272)

 * loop 113:fun3(V1,V,Out) -> [fun3(V1',V',Out')] 
2*s(277)+11
  Such that:s(277) =< V1

 * loop 114:fun3(V1,V,Out) -> [fun3(V1',V',Out')] 
2*s(279)+17
  Such that:s(279) =< V1

#### Cost of phase [112,113,114]:fun3(V1,V,Out) -> [] 
46*it(112)+27*it([115,118])+6*s(280)+8*s(281)+36*s(282)+10*s(283)+20*s(284)+20*s(285)+20*s(286)+32*s(287)+152*s(288)+112*s(289)+10*s(290)+10*s(291)+16*s(292)+76*s(293)+56*s(294)+4*s(368)+16*s(369)+72*s(370)+20*s(371)+40*s(372)+40*s(373)+40*s(374)+64*s(375)+304*s(376)+224*s(377)+20*s(378)+20*s(379)+32*s(380)+152*s(381)+112*s(382)+0
  Such that:it([115,118]) =< 1

#### Cost of chains of fun3(V1,V,Out):
* Chain [[112,113,114]]...: 630*it(112)+0
  with precondition: [V1>=2,V>=0] 

* Chain [[112,113,114],118]: 46*it(112)+10*it([118])+6*s(280)+8*s(281)+36*s(282)+10*s(283)+20*s(284)+20*s(285)+20*s(286)+32*s(287)+152*s(288)+112*s(289)+10*s(290)+10*s(291)+16*s(292)+76*s(293)+56*s(294)+10*s(310)+0
  Such that:it([118]) =< 1

  with precondition: [Out=0,V1>=2,V>=0] 

* Chain [[112,113,114],117]: 46*it(112)+10*it([117])+6*s(280)+8*s(281)+36*s(282)+10*s(283)+20*s(284)+20*s(285)+20*s(286)+32*s(287)+152*s(288)+112*s(289)+10*s(290)+10*s(291)+16*s(292)+76*s(293)+56*s(294)+2*s(313)+0
  Such that:it([117]) =< 1

  with precondition: [V1>=2,V>=0,Out>=0] 

* Chain [[112,113,114],116,118]: 46*it(112)+26*it([116,118])+6*s(280)+8*s(281)+36*s(282)+10*s(283)+20*s(284)+20*s(285)+20*s(286)+32*s(287)+152*s(288)+112*s(289)+10*s(290)+10*s(291)+16*s(292)+76*s(293)+56*s(294)+4*s(316)+0
  Such that:it([116,118]) =< 1

  with precondition: [Out=0,V1>=2,V>=0] 

* Chain [[112,113,114],115,118]: 46*it(112)+27*it([115,118])+6*s(280)+8*s(281)+36*s(282)+10*s(283)+20*s(284)+20*s(285)+20*s(286)+32*s(287)+152*s(288)+112*s(289)+10*s(290)+10*s(291)+16*s(292)+76*s(293)+56*s(294)+4*s(368)+16*s(369)+72*s(370)+20*s(371)+40*s(372)+40*s(373)+40*s(374)+64*s(375)+304*s(376)+224*s(377)+20*s(378)+20*s(379)+32*s(380)+152*s(381)+112*s(382)+0
  Such that:it([115,118]) =< 1

  with precondition: [Out=0,V1>=2,V>=1] 

* Chain [118]: 10*s(305)+10
  Such that:aux(76) =< V1
s(305) =< aux(76)

  with precondition: [Out=0,V1>=0,V>=0] 

* Chain [117]: 2*s(312)+10
  Such that:s(312) =< V1

  with precondition: [V=Out,V1>=2,V>=0] 

* Chain [116,118]: 4*s(314)+26
  Such that:aux(103) =< V1
s(314) =< aux(103)

  with precondition: [Out=0,V1>=2,V>=0] 

* Chain [115,118]: 4*s(318)+16*s(322)+72*s(323)+20*s(327)+40*s(329)+40*s(331)+40*s(332)+64*s(334)+304*s(335)+224*s(336)+20*s(337)+20*s(338)+32*s(340)+152*s(341)+112*s(342)+27
  Such that:aux(119) =< V1
aux(120) =< V
aux(121) =< V/4
s(318) =< aux(119)
s(322) =< aux(121)
s(322) =< aux(120)
s(323) =< aux(120)
s(324) =< aux(119)
s(325) =< s(322)*aux(119)
s(326) =< s(323)*s(324)
s(327) =< s(325)* (1/3)
s(328) =< s(325)* (1/2)
s(329) =< s(326)* (1/3)
s(330) =< s(326)* (1/2)
s(331) =< aux(120)
s(329) =< aux(120)
s(332) =< aux(120)
s(331) =< s(326)
s(329) =< s(326)
s(332) =< s(326)
s(331) =< s(330)
s(329) =< s(330)
s(333) =< s(326)* (1/3)
s(334) =< s(330)
s(335) =< s(326)
s(336) =< s(326)
s(334) =< s(326)
s(335) =< s(333)
s(337) =< aux(120)
s(327) =< aux(120)
s(338) =< aux(120)
s(337) =< s(325)
s(327) =< s(325)
s(338) =< s(325)
s(337) =< s(328)
s(327) =< s(328)
s(339) =< s(325)* (1/3)
s(340) =< s(328)
s(341) =< s(325)
s(342) =< s(325)
s(340) =< s(325)
s(341) =< s(339)

  with precondition: [Out=0,V1>=2,V>=1] 


#### Cost of chains of start(V1,V,V22,V52):
* Chain [129]...: 8190*s(508)+32*s(514)+144*s(515)+30*s(519)+60*s(521)+60*s(523)+60*s(524)+96*s(526)+456*s(527)+336*s(528)+30*s(529)+30*s(530)+48*s(532)+228*s(533)+168*s(534)+10*s(597)+20*s(599)+20*s(601)+20*s(602)+32*s(604)+152*s(605)+112*s(606)+10*s(607)+10*s(608)+16*s(610)+76*s(611)+56*s(612)+10
  Such that:s(591) =< V22
aux(139) =< V1
aux(140) =< V
aux(141) =< V/4
s(514) =< aux(141)
s(514) =< aux(140)
s(515) =< aux(140)
s(516) =< aux(139)
s(517) =< s(514)*aux(139)
s(518) =< s(515)*s(516)
s(519) =< s(517)* (1/3)
s(520) =< s(517)* (1/2)
s(521) =< s(518)* (1/3)
s(522) =< s(518)* (1/2)
s(523) =< aux(140)
s(521) =< aux(140)
s(524) =< aux(140)
s(523) =< s(518)
s(521) =< s(518)
s(524) =< s(518)
s(523) =< s(522)
s(521) =< s(522)
s(525) =< s(518)* (1/3)
s(526) =< s(522)
s(527) =< s(518)
s(528) =< s(518)
s(526) =< s(518)
s(527) =< s(525)
s(529) =< aux(140)
s(519) =< aux(140)
s(530) =< aux(140)
s(529) =< s(517)
s(519) =< s(517)
s(530) =< s(517)
s(529) =< s(520)
s(519) =< s(520)
s(531) =< s(517)* (1/3)
s(532) =< s(520)
s(533) =< s(517)
s(534) =< s(517)
s(532) =< s(517)
s(533) =< s(531)
s(594) =< s(591)
s(595) =< s(514)*s(591)
s(596) =< s(515)*s(594)
s(597) =< s(595)* (1/3)
s(598) =< s(595)* (1/2)
s(599) =< s(596)* (1/3)
s(600) =< s(596)* (1/2)
s(601) =< aux(140)
s(599) =< aux(140)
s(602) =< aux(140)
s(601) =< s(596)
s(599) =< s(596)
s(602) =< s(596)
s(601) =< s(600)
s(599) =< s(600)
s(603) =< s(596)* (1/3)
s(604) =< s(600)
s(605) =< s(596)
s(606) =< s(596)
s(604) =< s(596)
s(605) =< s(603)
s(607) =< aux(140)
s(597) =< aux(140)
s(608) =< aux(140)
s(607) =< s(595)
s(597) =< s(595)
s(608) =< s(595)
s(607) =< s(598)
s(597) =< s(598)
s(609) =< s(595)* (1/3)
s(610) =< s(598)
s(611) =< s(595)
s(612) =< s(595)
s(610) =< s(595)
s(611) =< s(609)

  with precondition: [V1>=0,V>=0] 

* Chain [128]: 1632*s(621)+730*s(622)+176*s(623)+1064*s(624)+120*s(628)+240*s(630)+240*s(632)+240*s(633)+384*s(635)+1824*s(636)+1344*s(637)+120*s(638)+120*s(639)+192*s(641)+912*s(642)+672*s(643)+92680*s(644)+336*s(653)+40*s(659)+80*s(661)+80*s(663)+80*s(664)+128*s(666)+608*s(667)+448*s(668)+40*s(669)+40*s(670)+64*s(672)+304*s(673)+224*s(674)+20*s(1117)+40*s(1119)+40*s(1121)+40*s(1122)+64*s(1124)+304*s(1125)+224*s(1126)+20*s(1127)+20*s(1128)+32*s(1130)+152*s(1131)+112*s(1132)+40*s(1138)+20*s(1387)+40*s(1389)+40*s(1391)+40*s(1392)+64*s(1394)+304*s(1395)+224*s(1396)+20*s(1397)+20*s(1398)+32*s(1400)+152*s(1401)+112*s(1402)+40*s(1408)+16*s(1602)+20*s(1607)+100*s(1609)+100*s(1611)+100*s(1612)+160*s(1614)+760*s(1615)+560*s(1616)+20*s(1617)+20*s(1618)+32*s(1620)+152*s(1621)+112*s(1622)+45*s(1626)+45*s(1627)+325*s(1628)+72*s(1631)+342*s(1632)+30*s(1642)+30*s(1652)+30*s(1653)+48*s(1655)+228*s(1656)+168*s(1657)+30*s(1764)+60*s(1765)+45*s(1766)+72*s(1769)+342*s(1770)+16*s(1833)+20*s(1834)+20*s(1835)+120*s(1836)+20*s(1837)+16*s(1838)+30*s(1860)+30*s(1861)+30*s(1863)+24*s(1864)+30*s(1928)+60*s(1929)+245*s(1930)+72*s(1933)+342*s(1934)+88*s(1997)+110*s(1998)+110*s(1999)+110*s(2001)+88*s(2002)+30*s(2011)+30*s(2012)+30*s(2014)+24*s(2015)+80*s(2212)+100*s(2213)+100*s(2214)+100*s(2216)+80*s(2217)+80*s(2218)+20*s(2345)+20*s(2351)+40*s(2353)+40*s(2355)+40*s(2356)+64*s(2358)+304*s(2359)+224*s(2360)+20*s(2361)+20*s(2362)+32*s(2364)+152*s(2365)+112*s(2366)+8*s(2450)+10*s(2451)+10*s(2452)+10*s(2454)+8*s(2455)+37
  Such that:s(2449) =< V22/4
aux(170) =< 1
aux(171) =< V1
aux(172) =< V1+6
aux(173) =< V1+V22
aux(174) =< V1+V22+1
aux(175) =< V1/2
aux(176) =< V1/3
aux(177) =< V1/4
aux(178) =< V
aux(179) =< V/2
aux(180) =< V/3
aux(181) =< V/4
aux(182) =< V22
aux(183) =< V22/2
aux(184) =< V22/3
aux(185) =< V52
aux(186) =< V52/2
aux(187) =< V52/3
s(621) =< aux(170)
s(622) =< aux(171)
s(2345) =< aux(172)
s(1138) =< aux(173)
s(1408) =< aux(174)
s(1928) =< aux(176)
s(2006) =< aux(176)
s(624) =< aux(178)
s(1626) =< aux(180)
s(653) =< aux(182)
s(1764) =< aux(184)
s(1855) =< aux(184)
s(623) =< aux(181)
s(623) =< aux(178)
s(625) =< aux(171)
s(626) =< s(623)*aux(171)
s(627) =< s(624)*s(625)
s(628) =< s(626)* (1/3)
s(629) =< s(626)* (1/2)
s(630) =< s(627)* (1/3)
s(631) =< s(627)* (1/2)
s(632) =< aux(178)
s(630) =< aux(178)
s(633) =< aux(178)
s(632) =< s(627)
s(630) =< s(627)
s(633) =< s(627)
s(632) =< s(631)
s(630) =< s(631)
s(634) =< s(627)* (1/3)
s(635) =< s(631)
s(636) =< s(627)
s(637) =< s(627)
s(635) =< s(627)
s(636) =< s(634)
s(638) =< aux(178)
s(628) =< aux(178)
s(639) =< aux(178)
s(638) =< s(626)
s(628) =< s(626)
s(639) =< s(626)
s(638) =< s(629)
s(628) =< s(629)
s(640) =< s(626)* (1/3)
s(641) =< s(629)
s(642) =< s(626)
s(643) =< s(626)
s(641) =< s(626)
s(642) =< s(640)
s(656) =< aux(182)
s(657) =< s(623)*aux(182)
s(658) =< s(624)*s(656)
s(659) =< s(657)* (1/3)
s(660) =< s(657)* (1/2)
s(661) =< s(658)* (1/3)
s(662) =< s(658)* (1/2)
s(663) =< aux(178)
s(661) =< aux(178)
s(664) =< aux(178)
s(663) =< s(658)
s(661) =< s(658)
s(664) =< s(658)
s(663) =< s(662)
s(661) =< s(662)
s(665) =< s(658)* (1/3)
s(666) =< s(662)
s(667) =< s(658)
s(668) =< s(658)
s(666) =< s(658)
s(667) =< s(665)
s(669) =< aux(178)
s(659) =< aux(178)
s(670) =< aux(178)
s(669) =< s(657)
s(659) =< s(657)
s(670) =< s(657)
s(669) =< s(660)
s(659) =< s(660)
s(671) =< s(657)* (1/3)
s(672) =< s(660)
s(673) =< s(657)
s(674) =< s(657)
s(672) =< s(657)
s(673) =< s(671)
s(1114) =< aux(173)
s(1115) =< s(623)*aux(173)
s(1116) =< s(624)*s(1114)
s(1117) =< s(1115)* (1/3)
s(1118) =< s(1115)* (1/2)
s(1119) =< s(1116)* (1/3)
s(1120) =< s(1116)* (1/2)
s(1121) =< aux(178)
s(1119) =< aux(178)
s(1122) =< aux(178)
s(1121) =< s(1116)
s(1119) =< s(1116)
s(1122) =< s(1116)
s(1121) =< s(1120)
s(1119) =< s(1120)
s(1123) =< s(1116)* (1/3)
s(1124) =< s(1120)
s(1125) =< s(1116)
s(1126) =< s(1116)
s(1124) =< s(1116)
s(1125) =< s(1123)
s(1127) =< aux(178)
s(1117) =< aux(178)
s(1128) =< aux(178)
s(1127) =< s(1115)
s(1117) =< s(1115)
s(1128) =< s(1115)
s(1127) =< s(1118)
s(1117) =< s(1118)
s(1129) =< s(1115)* (1/3)
s(1130) =< s(1118)
s(1131) =< s(1115)
s(1132) =< s(1115)
s(1130) =< s(1115)
s(1131) =< s(1129)
s(1384) =< aux(174)
s(1385) =< s(623)*aux(174)
s(1386) =< s(624)*s(1384)
s(1387) =< s(1385)* (1/3)
s(1388) =< s(1385)* (1/2)
s(1389) =< s(1386)* (1/3)
s(1390) =< s(1386)* (1/2)
s(1391) =< aux(178)
s(1389) =< aux(178)
s(1392) =< aux(178)
s(1391) =< s(1386)
s(1389) =< s(1386)
s(1392) =< s(1386)
s(1391) =< s(1390)
s(1389) =< s(1390)
s(1393) =< s(1386)* (1/3)
s(1394) =< s(1390)
s(1395) =< s(1386)
s(1396) =< s(1386)
s(1394) =< s(1386)
s(1395) =< s(1393)
s(1397) =< aux(178)
s(1387) =< aux(178)
s(1398) =< aux(178)
s(1397) =< s(1385)
s(1387) =< s(1385)
s(1398) =< s(1385)
s(1397) =< s(1388)
s(1387) =< s(1388)
s(1399) =< s(1385)* (1/3)
s(1400) =< s(1388)
s(1401) =< s(1385)
s(1402) =< s(1385)
s(1400) =< s(1385)
s(1401) =< s(1399)
s(2348) =< aux(172)
s(2349) =< s(623)*aux(172)
s(2350) =< s(624)*s(2348)
s(2351) =< s(2349)* (1/3)
s(2352) =< s(2349)* (1/2)
s(2353) =< s(2350)* (1/3)
s(2354) =< s(2350)* (1/2)
s(2355) =< aux(178)
s(2353) =< aux(178)
s(2356) =< aux(178)
s(2355) =< s(2350)
s(2353) =< s(2350)
s(2356) =< s(2350)
s(2355) =< s(2354)
s(2353) =< s(2354)
s(2357) =< s(2350)* (1/3)
s(2358) =< s(2354)
s(2359) =< s(2350)
s(2360) =< s(2350)
s(2358) =< s(2350)
s(2359) =< s(2357)
s(2361) =< aux(178)
s(2351) =< aux(178)
s(2362) =< aux(178)
s(2361) =< s(2349)
s(2351) =< s(2349)
s(2362) =< s(2349)
s(2361) =< s(2352)
s(2351) =< s(2352)
s(2363) =< s(2349)* (1/3)
s(2364) =< s(2352)
s(2365) =< s(2349)
s(2366) =< s(2349)
s(2364) =< s(2349)
s(2365) =< s(2363)
s(1602) =< aux(177)
s(1602) =< aux(171)
s(1604) =< aux(178)
s(1605) =< s(1602)*aux(178)
s(1606) =< s(622)*s(1604)
s(1607) =< s(1605)* (1/3)
s(1608) =< s(1605)* (1/2)
s(1609) =< s(1606)* (1/3)
s(1610) =< s(1606)* (1/2)
s(1611) =< aux(171)
s(1609) =< aux(171)
s(1612) =< aux(171)
s(1611) =< s(1606)
s(1609) =< s(1606)
s(1612) =< s(1606)
s(1611) =< s(1610)
s(1609) =< s(1610)
s(1613) =< s(1606)* (1/3)
s(1614) =< s(1610)
s(1615) =< s(1606)
s(1616) =< s(1606)
s(1614) =< s(1606)
s(1615) =< s(1613)
s(1617) =< aux(171)
s(1607) =< aux(171)
s(1618) =< aux(171)
s(1617) =< s(1605)
s(1607) =< s(1605)
s(1618) =< s(1605)
s(1617) =< s(1608)
s(1607) =< s(1608)
s(1619) =< s(1605)* (1/3)
s(1620) =< s(1608)
s(1621) =< s(1605)
s(1622) =< s(1605)
s(1620) =< s(1605)
s(1621) =< s(1619)
s(1627) =< aux(171)
s(1626) =< aux(171)
s(1628) =< aux(171)
s(1627) =< aux(178)
s(1626) =< aux(178)
s(1628) =< aux(178)
s(1627) =< aux(179)
s(1626) =< aux(179)
s(1629) =< aux(178)* (1/3)
s(1630) =< aux(178)* (1/2)
s(1631) =< s(1630)
s(1632) =< aux(178)
s(1631) =< aux(178)
s(1632) =< s(1629)
s(1765) =< aux(171)
s(1764) =< aux(171)
s(1766) =< aux(171)
s(1765) =< aux(182)
s(1764) =< aux(182)
s(1766) =< aux(182)
s(1765) =< aux(183)
s(1764) =< aux(183)
s(1767) =< aux(182)* (1/3)
s(1768) =< aux(182)* (1/2)
s(1769) =< s(1768)
s(1770) =< aux(182)
s(1769) =< aux(182)
s(1770) =< s(1767)
s(1855) =< aux(182)
s(1860) =< aux(181)
s(1861) =< aux(182)
s(1836) =< aux(182)
s(1860) =< aux(182)
s(1863) =< aux(182)
s(1864) =< aux(182)
s(1861) =< s(1855)
s(1860) =< s(1855)
s(1863) =< s(1855)
s(1864) =< s(1855)
s(1836) =< aux(178)
s(1860) =< aux(178)
s(1863) =< aux(178)
s(1861) =< aux(180)
s(1860) =< aux(180)
s(1929) =< aux(185)
s(1928) =< aux(185)
s(1930) =< aux(185)
s(1929) =< aux(171)
s(1928) =< aux(171)
s(1930) =< aux(171)
s(1929) =< aux(175)
s(1928) =< aux(175)
s(1931) =< aux(171)* (1/3)
s(1932) =< aux(171)* (1/2)
s(1933) =< s(1932)
s(1934) =< aux(171)
s(1933) =< aux(171)
s(1934) =< s(1931)
s(1997) =< aux(175)
s(1998) =< aux(181)
s(1999) =< aux(171)
s(1998) =< aux(171)
s(2001) =< aux(171)
s(2002) =< aux(171)
s(1997) =< aux(171)
s(1999) =< aux(176)
s(1998) =< aux(176)
s(2001) =< aux(176)
s(2002) =< aux(176)
s(1998) =< aux(178)
s(2001) =< aux(178)
s(1999) =< aux(180)
s(1998) =< aux(180)
s(2212) =< aux(186)
s(2213) =< aux(177)
s(2214) =< aux(185)
s(2213) =< aux(185)
s(2216) =< aux(185)
s(2217) =< aux(185)
s(2212) =< aux(185)
s(2218) =< aux(185)
s(2214) =< aux(187)
s(2213) =< aux(187)
s(2216) =< aux(187)
s(2217) =< aux(187)
s(2213) =< aux(171)
s(2216) =< aux(171)
s(2214) =< aux(176)
s(2213) =< aux(176)
s(2006) =< aux(171)
s(2011) =< aux(181)
s(2012) =< aux(171)
s(2011) =< aux(171)
s(2014) =< aux(171)
s(2015) =< aux(171)
s(2012) =< s(2006)
s(2011) =< s(2006)
s(2014) =< s(2006)
s(2015) =< s(2006)
s(2011) =< aux(178)
s(2014) =< aux(178)
s(2012) =< aux(180)
s(2011) =< aux(180)
s(1833) =< aux(183)
s(1834) =< aux(181)
s(1835) =< aux(182)
s(1834) =< aux(182)
s(1837) =< aux(182)
s(1838) =< aux(182)
s(1833) =< aux(182)
s(1835) =< aux(184)
s(1834) =< aux(184)
s(1837) =< aux(184)
s(1838) =< aux(184)
s(1834) =< aux(178)
s(1837) =< aux(178)
s(1835) =< aux(180)
s(1834) =< aux(180)
s(2450) =< aux(179)
s(2451) =< s(2449)
s(2452) =< aux(178)
s(2451) =< aux(178)
s(2454) =< aux(178)
s(2455) =< aux(178)
s(2450) =< aux(178)
s(2452) =< aux(180)
s(2451) =< aux(180)
s(2454) =< aux(180)
s(2455) =< aux(180)
s(2451) =< aux(182)
s(2454) =< aux(182)
s(2452) =< aux(184)
s(2451) =< aux(184)
s(1640) =< s(622)*aux(178)
s(1642) =< s(1640)* (1/3)
s(1643) =< s(1640)* (1/2)
s(1652) =< aux(171)
s(1642) =< aux(171)
s(1653) =< aux(171)
s(1652) =< s(1640)
s(1642) =< s(1640)
s(1653) =< s(1640)
s(1652) =< s(1643)
s(1642) =< s(1643)
s(1654) =< s(1640)* (1/3)
s(1655) =< s(1643)
s(1656) =< s(1640)
s(1657) =< s(1640)
s(1655) =< s(1640)
s(1656) =< s(1654)

  with precondition: [V1>=0] 

* Chain [127]: 73*s(2487)+20*s(2488)+16*s(2489)+72*s(2490)+20*s(2494)+40*s(2496)+40*s(2498)+40*s(2499)+64*s(2501)+304*s(2502)+224*s(2503)+20*s(2504)+20*s(2505)+32*s(2507)+152*s(2508)+112*s(2509)+3696*s(2510)+28
  Such that:s(2483) =< V
s(2484) =< V/4
aux(188) =< 1
aux(189) =< V22
s(2487) =< aux(188)
s(2488) =< aux(189)
s(2489) =< s(2484)
s(2489) =< s(2483)
s(2490) =< s(2483)
s(2491) =< aux(189)
s(2492) =< s(2489)*aux(189)
s(2493) =< s(2490)*s(2491)
s(2494) =< s(2492)* (1/3)
s(2495) =< s(2492)* (1/2)
s(2496) =< s(2493)* (1/3)
s(2497) =< s(2493)* (1/2)
s(2498) =< s(2483)
s(2496) =< s(2483)
s(2499) =< s(2483)
s(2498) =< s(2493)
s(2496) =< s(2493)
s(2499) =< s(2493)
s(2498) =< s(2497)
s(2496) =< s(2497)
s(2500) =< s(2493)* (1/3)
s(2501) =< s(2497)
s(2502) =< s(2493)
s(2503) =< s(2493)
s(2501) =< s(2493)
s(2502) =< s(2500)
s(2504) =< s(2483)
s(2494) =< s(2483)
s(2505) =< s(2483)
s(2504) =< s(2492)
s(2494) =< s(2492)
s(2505) =< s(2492)
s(2504) =< s(2495)
s(2494) =< s(2495)
s(2506) =< s(2492)* (1/3)
s(2507) =< s(2495)
s(2508) =< s(2492)
s(2509) =< s(2492)
s(2507) =< s(2492)
s(2508) =< s(2506)

  with precondition: [V1=1,V>=0,V22>=0] 

* Chain [126]: 24*s(2520)+30*s(2521)+30*s(2522)+60*s(2523)+30*s(2524)+24*s(2525)+24*s(2526)+4
  Such that:aux(190) =< 2
aux(191) =< 1/2
aux(192) =< 2/3
aux(193) =< V52
aux(194) =< V52/2
aux(195) =< V52/3
s(2520) =< aux(194)
s(2521) =< aux(191)
s(2522) =< aux(193)
s(2523) =< aux(193)
s(2521) =< aux(193)
s(2524) =< aux(193)
s(2525) =< aux(193)
s(2520) =< aux(193)
s(2526) =< aux(193)
s(2522) =< aux(195)
s(2521) =< aux(195)
s(2524) =< aux(195)
s(2525) =< aux(195)
s(2523) =< aux(190)
s(2521) =< aux(190)
s(2524) =< aux(190)
s(2522) =< aux(192)
s(2521) =< aux(192)

  with precondition: [V1=2] 

* Chain [125]: 6
  with precondition: [V1=5,V>=0,V22>=0,V52>=1] 

* Chain [124]: 1
  with precondition: [V=0,V1>=3] 

* Chain [123]: 24*s(2559)+30*s(2560)+30*s(2561)+60*s(2562)+30*s(2563)+24*s(2564)+24*s(2565)+5
  Such that:aux(196) =< 2
aux(197) =< 1/2
aux(198) =< 2/3
aux(199) =< V1
aux(200) =< V1/2
aux(201) =< V1/3
s(2559) =< aux(200)
s(2560) =< aux(197)
s(2561) =< aux(199)
s(2562) =< aux(199)
s(2560) =< aux(199)
s(2563) =< aux(199)
s(2564) =< aux(199)
s(2559) =< aux(199)
s(2565) =< aux(199)
s(2561) =< aux(201)
s(2560) =< aux(201)
s(2563) =< aux(201)
s(2564) =< aux(201)
s(2562) =< aux(196)
s(2560) =< aux(196)
s(2563) =< aux(196)
s(2561) =< aux(198)
s(2560) =< aux(198)

  with precondition: [V=2,V1>=0,V22>=0] 

* Chain [122]: 8*s(2595)+36*s(2596)+10*s(2600)+20*s(2602)+20*s(2604)+20*s(2605)+32*s(2607)+152*s(2608)+112*s(2609)+10*s(2610)+10*s(2611)+16*s(2613)+76*s(2614)+56*s(2615)+6
  Such that:s(2594) =< 2
s(2592) =< V1
s(2593) =< V1/4
s(2595) =< s(2593)
s(2595) =< s(2592)
s(2596) =< s(2592)
s(2597) =< s(2594)
s(2598) =< s(2595)*s(2594)
s(2599) =< s(2596)*s(2597)
s(2600) =< s(2598)* (1/3)
s(2601) =< s(2598)* (1/2)
s(2602) =< s(2599)* (1/3)
s(2603) =< s(2599)* (1/2)
s(2604) =< s(2592)
s(2602) =< s(2592)
s(2605) =< s(2592)
s(2604) =< s(2599)
s(2602) =< s(2599)
s(2605) =< s(2599)
s(2604) =< s(2603)
s(2602) =< s(2603)
s(2606) =< s(2599)* (1/3)
s(2607) =< s(2603)
s(2608) =< s(2599)
s(2609) =< s(2599)
s(2607) =< s(2599)
s(2608) =< s(2606)
s(2610) =< s(2592)
s(2600) =< s(2592)
s(2611) =< s(2592)
s(2610) =< s(2598)
s(2600) =< s(2598)
s(2611) =< s(2598)
s(2610) =< s(2601)
s(2600) =< s(2601)
s(2612) =< s(2598)* (1/3)
s(2613) =< s(2601)
s(2614) =< s(2598)
s(2615) =< s(2598)
s(2613) =< s(2598)
s(2614) =< s(2612)

  with precondition: [V=2,V1>=2] 

* Chain [121]: 2
  with precondition: [V22=2,V1>=1,V>=0] 

* Chain [120]: 7
  with precondition: [V22=5,V1>=2,V>=0] 

* Chain [119]: 8*s(2622)+10*s(2623)+10*s(2624)+20*s(2625)+10*s(2626)+8*s(2627)+8*s(2628)+5
  Such that:s(2616) =< V1
s(2617) =< V1/2
s(2618) =< V1/3
s(2619) =< V
s(2620) =< V/3
s(2621) =< V/4
s(2622) =< s(2617)
s(2623) =< s(2621)
s(2624) =< s(2616)
s(2625) =< s(2616)
s(2623) =< s(2616)
s(2626) =< s(2616)
s(2627) =< s(2616)
s(2622) =< s(2616)
s(2628) =< s(2616)
s(2624) =< s(2618)
s(2623) =< s(2618)
s(2626) =< s(2618)
s(2627) =< s(2618)
s(2625) =< s(2619)
s(2623) =< s(2619)
s(2626) =< s(2619)
s(2624) =< s(2620)
s(2623) =< s(2620)

  with precondition: [V52=2,V1>=1,V>=0,V22>=0] 


Closed-form bounds of start(V1,V,V22,V52): 
-------------------------------------
* Chain [129]... with precondition: [V1>=0,V>=0] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [128] with precondition: [V1>=0] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [127] with precondition: [V1=1,V>=0,V22>=0] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [126] with precondition: [V1=2] 
    - Upper bound: nat(V52)*48+219+nat(V52/2)*24 
    - Complexity: n 
* Chain [125] with precondition: [V1=5,V>=0,V22>=0,V52>=1] 
    - Upper bound: 6 
    - Complexity: constant 
* Chain [124] with precondition: [V=0,V1>=3] 
    - Upper bound: 1 
    - Complexity: constant 
* Chain [123] with precondition: [V=2,V1>=0,V22>=0] 
    - Upper bound: 60*V1+220 
    - Complexity: n 
* Chain [122] with precondition: [V=2,V1>=2] 
    - Upper bound: 743*V1+6 
    - Complexity: n 
* Chain [121] with precondition: [V22=2,V1>=1,V>=0] 
    - Upper bound: 2 
    - Complexity: constant 
* Chain [120] with precondition: [V22=5,V1>=2,V>=0] 
    - Upper bound: 7 
    - Complexity: constant 
* Chain [119] with precondition: [V52=2,V1>=1,V>=0,V22>=0] 
    - Upper bound: 60*V1+5/2*V+5 
    - Complexity: n 

### Maximum cost of start(V1,V,V22,V52): inf 
Asymptotic class: infinity 

Time statistics: 
-------------------------------------
* Partial evaluation computed in 191 ms.
* Invariants computed in 151 ms.
   - Backward Invariants 76 ms.
   - Transitive Invariants 27 ms.
* Refinement performed in 806 ms.
* Termination proved in 48 ms.
* Upper bounds computed in 11418 ms.
   - Equation cost structures 10776 ms.
   - Phase cost structures 390 ms.
   - Chain cost structures 63 ms.
   - Solving cost expressions 122 ms.
* Total analysis performed in 12845 ms.


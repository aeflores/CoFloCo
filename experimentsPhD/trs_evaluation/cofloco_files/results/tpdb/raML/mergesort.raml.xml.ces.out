
Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. non_recursive  : [fun1/2]
1. recursive  : [fun2/3]
2. non_recursive  : [fun/3]
3. non_recursive  : [fun11/4]
4. recursive [non_tail] : [fun10/3,fun9/2,msplit/2]
5. recursive  : [fun3/3,fun4/4,fun5/6,merge/3]
6. recursive [non_tail,multiple] : [fun6/2,fun7/3,fun8/2,mergesort/2]
7. non_recursive  : [start/5]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into fun1/2
1. SCC is partially evaluated into fun2/3
2. SCC is partially evaluated into fun/3
3. SCC is partially evaluated into fun11/4
4. SCC is partially evaluated into msplit/2
5. SCC is partially evaluated into merge/3
6. SCC is partially evaluated into mergesort/2
7. SCC is partially evaluated into start/5

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations fun1/2 
* CE 52 is refined into CE [63] 
* CE 51 is refined into CE [64] 
* CE 50 is refined into CE [65] 
* CE 49 is refined into CE [66] 


#### Refined cost equations fun1/2 
* CE 63: fun1(V1,Out) = 0
     [V1>=0,Out=0] 
* CE 64: fun1(V1,Out) = 0
     [Out=2,V1=3] 
* CE 65: fun1(V1,Out) = 0
     [Out=1,V1=2] 
* CE 66: fun1(V1,Out) = 0
     [Out=1,V1=1] 

### Cost equations --> "Loop" of fun1/2 
* CEs [63] --> Loop 33 
* CEs [64] --> Loop 34 
* CEs [65] --> Loop 35 
* CEs [66] --> Loop 36 

#### Loops of fun1/2 
* Loop 33: fun1(V1,Out) [V1>=0,Out=0] 
* Loop 34: fun1(V1,Out) [Out=2,V1=3] 
* Loop 35: fun1(V1,Out) [Out=1,V1=2] 
* Loop 36: fun1(V1,Out) [Out=1,V1=1] 

### Ranking functions of CR fun1(V1,Out) 

#### Partial ranking functions of CR fun1(V1,Out) 


### Resulting Chains:fun1(V1,Out) 
* [36]
* [35]
* [34]
* [33]


### Merging Chains  fun1/2 into  External patterns of execution 
* [[36]] --> 1 
* [[35]] --> 2 
* [[34]] --> 3 
* [[33]] --> 4 


### Specialization of cost equations fun2/3 
* CE 58 is refined into CE [67] 
* CE 60 is refined into CE [68] 
* CE 62 is refined into CE [69] 
* CE 56 is refined into CE [70] 
* CE 59 is refined into CE [71] 
* CE 55 is refined into CE [72] 
* CE 54 is refined into CE [73] 
* CE 53 is refined into CE [74] 
* CE 57 is refined into CE [75] 
* CE 61 is refined into CE [76] 


#### Refined cost equations fun2/3 
* CE 67: fun2(V1,V,Out) = 0
     [V>=1,V1>=1,Out=3] 
* CE 68: fun2(V1,V,Out) = 0
     [V>=1,V1>=1,Out=2] 
* CE 69: fun2(V1,V,Out) = 0
     [V>=0,V1>=0,Out=0] 
* CE 70: fun2(V1,V,Out) = 0
     [V1>=1,Out=3,V=0] 
* CE 71: fun2(V1,V,Out) = 0
     [V1>=1,Out=2,V=0] 
* CE 72: fun2(V1,V,Out) = 0
     [V>=1,Out=3,V1=0] 
* CE 73: fun2(V1,V,Out) = 0
     [V>=1,Out=2,V1=0] 
* CE 74: fun2(V1,V,Out) = 0
     [Out=1,V=0,V1=0] 
* CE 75: fun2(V1,V,Out) = 0+ fun2(W1,X1,Out)
     [X1>=0,W1>=0,W1+1=V,X1+1=V1] 
* CE 76: fun2(V1,V,Out) = 0+ fun2(W1,X1,Out)
     [X1>=0,W1>=0,X1+1=V,W1+1=V1] 

### Cost equations --> "Loop" of fun2/3 
* CEs [75] --> Loop 37 
* CEs [76] --> Loop 38 
* CEs [67] --> Loop 39 
* CEs [68] --> Loop 40 
* CEs [69] --> Loop 41 
* CEs [70] --> Loop 42 
* CEs [71] --> Loop 43 
* CEs [72] --> Loop 44 
* CEs [73] --> Loop 45 
* CEs [74] --> Loop 46 

#### Loops of fun2/3 
* Loop 37: fun2(V1,V,Out)->  fun2(V1',V',Out)
                  [V>=1,V1>=1,V1=V'+1,V=V1'+1] 
* Loop 38: fun2(V1,V,Out)->  fun2(V1',V',Out)
                  [V>=1,V1>=1,V=V'+1,V1=V1'+1] 
* Loop 39: fun2(V1,V,Out) [V>=1,V1>=1,Out=3] 
* Loop 40: fun2(V1,V,Out) [V>=1,V1>=1,Out=2] 
* Loop 41: fun2(V1,V,Out) [V>=0,V1>=0,Out=0] 
* Loop 42: fun2(V1,V,Out) [V1>=1,Out=3,V=0] 
* Loop 43: fun2(V1,V,Out) [V1>=1,Out=2,V=0] 
* Loop 44: fun2(V1,V,Out) [V>=1,Out=3,V1=0] 
* Loop 45: fun2(V1,V,Out) [V>=1,Out=2,V1=0] 
* Loop 46: fun2(V1,V,Out) [Out=1,V=0,V1=0] 

### Ranking functions of CR fun2(V1,V,Out) 
* RF of phase [37,38]: [V1/2+V/2-1/2]

#### Partial ranking functions of CR fun2(V1,V,Out) 
* Partial RF of phase [37,38]:
  - RF of loop [37:1]:
    V1/2+V/2-1/2
  - RF of loop [38:1]:
    V depends on loops [37:1] 
    V1 depends on loops [37:1] 


### Resulting Chains:fun2(V1,V,Out) 
* [[37,38],46]
* [[37,38],45]
* [[37,38],44]
* [[37,38],43]
* [[37,38],42]
* [[37,38],41]
* [[37,38],40]
* [[37,38],39]
* [46]
* [45]
* [44]
* [43]
* [42]
* [41]
* [40]
* [39]


### Merging Chains  fun2/3 into  External patterns of execution 
* [[46]] --> 1 
* [[45]] --> 2 
* [[44]] --> 3 
* [[43]] --> 4 
* [[42]] --> 5 
* [[41],[41,[37,38]]] --> 6 
* [[46,[37,38]]] --> 7 
* [[40],[40,[37,38]],[43,[37,38]],[45,[37,38]]] --> 8 
* [[39],[39,[37,38]],[42,[37,38]],[44,[37,38]]] --> 9 


### Specialization of cost equations fun/3 
* CE 46 is refined into CE [77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93] 


#### Refined cost equations fun/3 
* CE 77: fun(V1,V,Out) = 1+ fun2(W1,X1,Y1):1+ fun1(Z1,A2):1
     [A2=1,Z1=1,Y1=1,X1=0,W1=0,Out=1,V=0,V1=0] 
* CE 78: fun(V1,V,Out) = 1+ fun2(W1,X1,Y1):1+ fun1(Z1,A2):4
     [A2=0,Z1=1,Y1=1,X1=0,W1=0,Out=0,V=0,V1=0] 
* CE 79: fun(V1,V,Out) = 1+ fun2(W1,V,X1):2+ fun1(Y1,Z1):2
     [V>=1,Z1=1,Y1=2,X1=2,W1=0,Out=1,V1=0] 
* CE 80: fun(V1,V,Out) = 1+ fun2(W1,V,X1):2+ fun1(Y1,Z1):4
     [V>=1,Z1=0,Y1=2,X1=2,W1=0,Out=0,V1=0] 
* CE 81: fun(V1,V,Out) = 1+ fun2(W1,V,X1):3+ fun1(Y1,Z1):3
     [V>=1,Z1=2,Y1=3,X1=3,W1=0,Out=2,V1=0] 
* CE 82: fun(V1,V,Out) = 1+ fun2(W1,V,X1):3+ fun1(Y1,Z1):4
     [V>=1,Z1=0,Y1=3,X1=3,W1=0,Out=0,V1=0] 
* CE 83: fun(V1,V,Out) = 1+ fun2(V1,W1,X1):4+ fun1(Y1,Z1):2
     [V1>=1,Z1=1,Y1=2,X1=2,W1=0,Out=1,V=0] 
* CE 84: fun(V1,V,Out) = 1+ fun2(V1,W1,X1):4+ fun1(Y1,Z1):4
     [V1>=1,Z1=0,Y1=2,X1=2,W1=0,Out=0,V=0] 
* CE 85: fun(V1,V,Out) = 1+ fun2(V1,W1,X1):5+ fun1(Y1,Z1):3
     [V1>=1,Z1=2,Y1=3,X1=3,W1=0,Out=2,V=0] 
* CE 86: fun(V1,V,Out) = 1+ fun2(V1,W1,X1):5+ fun1(Y1,Z1):4
     [V1>=1,Z1=0,Y1=3,X1=3,W1=0,Out=0,V=0] 
* CE 87: fun(V1,V,Out) = 1+ fun2(V1,V,W1):6+ fun1(X1,Y1):4
     [V>=0,V1>=0,Y1=0,X1=0,W1=0,Out=0] 
* CE 88: fun(A,A,B) = 1+ fun2(A,A,C):7+ fun1(D,E):1
     [A>=1,E=1,D=1,C=1,B=1] 
* CE 89: fun(A,A,B) = 1+ fun2(A,A,C):7+ fun1(D,E):4
     [A>=1,E=0,D=1,C=1,B=0] 
* CE 90: fun(V1,V,Out) = 1+ fun2(V1,V,W1):8+ fun1(X1,Y1):2
     [V>=1,V1>=1,Y1=1,X1=2,W1=2,Out=1] 
* CE 91: fun(V1,V,Out) = 1+ fun2(V1,V,W1):8+ fun1(X1,Y1):4
     [V>=1,V1>=1,Y1=0,X1=2,W1=2,Out=0] 
* CE 92: fun(V1,V,Out) = 1+ fun2(V1,V,W1):9+ fun1(X1,Y1):3
     [V>=1,V1>=1,Y1=2,X1=3,W1=3,Out=2] 
* CE 93: fun(V1,V,Out) = 1+ fun2(V1,V,W1):9+ fun1(X1,Y1):4
     [V>=1,V1>=1,Y1=0,X1=3,W1=3,Out=0] 

### Cost equations --> "Loop" of fun/3 
* CEs [92] --> Loop 47 
* CEs [88,90] --> Loop 48 
* CEs [89] --> Loop 49 
* CEs [85] --> Loop 50 
* CEs [83] --> Loop 51 
* CEs [84,86] --> Loop 52 
* CEs [81] --> Loop 53 
* CEs [79] --> Loop 54 
* CEs [80,82] --> Loop 55 
* CEs [77] --> Loop 56 
* CEs [78,87,91,93] --> Loop 57 

#### Loops of fun/3 
* Loop 47: fun(V1,V,Out) [V>=1,V1>=1,Out=2] 
* Loop 48: fun(V1,V,Out) [V>=1,V1>=1,Out=1] 
* Loop 49: fun(A,A,B) [A>=1,B=0] 
* Loop 50: fun(V1,V,Out) [V1>=1,Out=2,V=0] 
* Loop 51: fun(V1,V,Out) [V1>=1,Out=1,V=0] 
* Loop 52: fun(V1,V,Out) [V1>=1,Out=0,V=0] 
* Loop 53: fun(V1,V,Out) [V>=1,Out=2,V1=0] 
* Loop 54: fun(V1,V,Out) [V>=1,Out=1,V1=0] 
* Loop 55: fun(V1,V,Out) [V>=1,Out=0,V1=0] 
* Loop 56: fun(V1,V,Out) [Out=1,V=0,V1=0] 
* Loop 57: fun(V1,V,Out) [V>=0,V1>=0,Out=0] 

### Ranking functions of CR fun(V1,V,Out) 

#### Partial ranking functions of CR fun(V1,V,Out) 


### Resulting Chains:fun(V1,V,Out) 
* [57]
* [56]
* [55]
* [54]
* [53]
* [52]
* [51]
* [50]
* [49]
* [48]
* [47]


### Merging Chains  fun/3 into  External patterns of execution 
* [[56]] --> 1 
* [[55],[57]] --> 2 
* [[54]] --> 3 
* [[53]] --> 4 
* [[52]] --> 5 
* [[51]] --> 6 
* [[50]] --> 7 
* [[49]] --> 8 
* [[48]] --> 9 
* [[47]] --> 10 


### Specialization of cost equations fun11/4 
* CE 47 is refined into CE [94] 
* CE 48 is refined into CE [95] 


#### Refined cost equations fun11/4 
* CE 94: fun11(V1,V,V11,Out) = 1
     [V11>=0,V>=0,V1>=1,V1+V+V11+2=Out] 
* CE 95: fun11(V1,V,V11,Out) = 0
     [V11>=0,V>=0,V1>=0,Out=0] 

### Cost equations --> "Loop" of fun11/4 
* CEs [94] --> Loop 58 
* CEs [95] --> Loop 59 

#### Loops of fun11/4 
* Loop 58: fun11(V1,V,V11,Out) [V11>=0,V>=0,V1>=1,V1+V+V11+2=Out] 
* Loop 59: fun11(V1,V,V11,Out) [V11>=0,V>=0,V1>=0,Out=0] 

### Ranking functions of CR fun11(V1,V,V11,Out) 

#### Partial ranking functions of CR fun11(V1,V,V11,Out) 


### Resulting Chains:fun11(V1,V,V11,Out) 
* [59]
* [58]


### Merging Chains  fun11/4 into  External patterns of execution 
* [[59]] --> 1 
* [[58]] --> 2 


### Specialization of cost equations msplit/2 
* CE 31 is refined into CE [96] 
* CE 28 is refined into CE [97] 
* CE 32 is refined into CE [98] 
* CE 29 is refined into CE [99] 
* CE 30 is refined into CE [100,101] 


#### Refined cost equations msplit/2 
* CE 96: msplit(V1,Out) = 3
     [V1>=1,V1+1=Out] 
* CE 97: msplit(V1,Out) = 1
     [V1>=0,Out=0] 
* CE 98: msplit(V1,Out) = 2
     [V1>=1,Out=0] 
* CE 99: msplit(V1,Out) = 2
     [Out=1,V1=0] 
* CE 100: msplit(V1,Out) = 3+ msplit(W1,X1)+ fun11(X1,Y1,Z1,A2):1
     [V1>=Y1+Z1+2,Z1>=0,Y1>=0,X1>=0,Y1+Z1+W1+2=V1,A2=0,Out=0] 
* CE 101: msplit(V1,Out) = 3+ msplit(W1,X1)+ fun11(X1,Y1,Z1,Out):2
     [V1+X1>=Out,Out>=X1+Y1+2,Y1>=0,X1>=1,Out=X1+Y1+Z1+2,Out+W1=V1+X1] 

### Cost equations --> "Loop" of msplit/2 
* CEs [101] --> Loop 60 
* CEs [100] --> Loop 61 
* CEs [96] --> Loop 62 
* CEs [97,98] --> Loop 63 
* CEs [99] --> Loop 64 

#### Loops of msplit/2 
* Loop 60: msplit(V1,Out)->  msplit(V1',Out')
                  [Out+V1'>=V1+1,V1>=V1'+2,V1'>=0,V1+Out'=Out+V1'] 
* Loop 61: msplit(V1,Out)->  msplit(V1',Out')
                  [V1>=V1'+2,Out'>=0,V1'>=0,Out=0] 
* Loop 62: msplit(V1,Out) [V1>=1,V1+1=Out] 
* Loop 63: msplit(V1,Out) [V1>=0,Out=0] 
* Loop 64: msplit(V1,Out) [Out=1,V1=0] 

### Ranking functions of CR msplit(V1,Out) 
* RF of phase [60]: [V1-1]
* RF of phase [61]: [V1-1]

#### Partial ranking functions of CR msplit(V1,Out) 
* Partial RF of phase [60]:
  - RF of loop [60:1]:
    V1-1
* Partial RF of phase [61]:
  - RF of loop [61:1]:
    V1-1


### Resulting Chains:msplit(V1,Out) 
* [[61],[60],64]
* [[61],[60],62]
* [[61],64]
* [[61],63]
* [[61],62]
* [[60],64]
* [[60],62]
* [64]
* [63]
* [62]


### Merging Chains  msplit/2 into  External patterns of execution 
* [[64]] --> 1 
* [[63],[62,[61]],[63,[61]],[64,[61]],[62,[60],[61]],[64,[60],[61]]] --> 2 
* [[62],[62,[60]],[64,[60]]] --> 3 


### Specialization of cost equations merge/3 
* CE 39 is refined into CE [102,103,104,105,106,107,108,109,110,111] 
* CE 42 is refined into CE [112] 
* CE 44 is refined into CE [113] 
* CE 43 is refined into CE [114] 
* CE 45 is refined into CE [115] 
* CE 40 is refined into CE [116,117,118] 
* CE 41 is refined into CE [119,120,121,122] 


#### Refined cost equations merge/3 
* CE 102: merge(V1,V,Out) = 3+ fun(W1,X1,Y1):1
     [V>=1,V1>=1,Y1=1,X1=0,W1=0,Out=0] 
* CE 103: merge(V1,V,Out) = 3+ fun(W1,X1,Y1):2
     [V>=X1+1,V1>=W1+1,X1>=0,W1>=0,Y1=0,Out=0] 
* CE 104: merge(V1,V,Out) = 3+ fun(W1,X1,Y1):3
     [V>=X1+1,X1>=1,V1>=1,Y1=1,W1=0,Out=0] 
* CE 105: merge(V1,V,Out) = 3+ fun(W1,X1,Y1):4
     [V>=X1+1,X1>=1,V1>=1,Y1=2,W1=0,Out=0] 
* CE 106: merge(V1,V,Out) = 3+ fun(W1,X1,Y1):5
     [V1>=W1+1,W1>=1,V>=1,Y1=0,X1=0,Out=0] 
* CE 107: merge(V1,V,Out) = 3+ fun(W1,X1,Y1):6
     [V1>=W1+1,W1>=1,V>=1,Y1=1,X1=0,Out=0] 
* CE 108: merge(V1,V,Out) = 3+ fun(W1,X1,Y1):7
     [V1>=W1+1,W1>=1,V>=1,Y1=2,X1=0,Out=0] 
* CE 109: merge(V1,V,Out) = 3+ fun(W1,W1,X1):8
     [V>=W1+1,V1>=W1+1,W1>=1,X1=0,Out=0] 
* CE 110: merge(V1,V,Out) = 3+ fun(W1,X1,Y1):9
     [V>=X1+1,V1>=W1+1,X1>=1,W1>=1,Y1=1,Out=0] 
* CE 111: merge(V1,V,Out) = 3+ fun(W1,X1,Y1):10
     [V>=X1+1,V1>=W1+1,X1>=1,W1>=1,Y1=2,Out=0] 
* CE 112: merge(V1,V,Out) = 2
     [V>=0,V1>=1,Out=0] 
* CE 113: merge(V1,V,Out) = 1
     [V>=0,V1>=0,Out=0] 
* CE 114: merge(A,B,A) = 3
     [A>=1,B=0] 
* CE 115: merge(A,B,B) = 2
     [B>=0,A=0] 
* CE 116: merge(V1,V,Out) = 4+ fun(W1,X1,Y1):4+ merge(Z1,V,A2)
     [V>=X1+1,Z1>=0,X1>=1,Out=A2+1,Z1+1=V1,Y1=2,W1=0] 
* CE 117: merge(V1,V,Out) = 4+ fun(W1,X1,Y1):7+ merge(Z1,V,A2)
     [Z1>=0,W1>=1,V>=1,W1+A2+1=Out,W1+Z1+1=V1,Y1=2,X1=0] 
* CE 118: merge(V1,V,Out) = 4+ fun(W1,X1,Y1):10+ merge(Z1,V,A2)
     [V>=X1+1,Z1>=0,X1>=1,W1>=1,W1+A2+1=Out,W1+Z1+1=V1,Y1=2] 
* CE 119: merge(V1,V,Out) = 4+ fun(W1,X1,Y1):1+ merge(V1,Z1,A2)
     [Z1>=0,V1>=1,Out=A2+1,Z1+1=V,Y1=1,X1=0,W1=0] 
* CE 120: merge(V1,V,Out) = 4+ fun(W1,X1,Y1):3+ merge(V1,Z1,A2)
     [Z1>=0,X1>=1,V1>=1,X1+A2+1=Out,X1+Z1+1=V,Y1=1,W1=0] 
* CE 121: merge(V1,V,Out) = 4+ fun(W1,X1,Y1):6+ merge(V1,Z1,A2)
     [V1>=W1+1,Z1>=0,W1>=1,Out=A2+1,Z1+1=V,Y1=1,X1=0] 
* CE 122: merge(V1,V,Out) = 4+ fun(W1,X1,Y1):9+ merge(V1,Z1,A2)
     [V1>=W1+1,Z1>=0,X1>=1,W1>=1,X1+A2+1=Out,X1+Z1+1=V,Y1=1] 

### Cost equations --> "Loop" of merge/3 
* CEs [117,118] --> Loop 65 
* CEs [120,122] --> Loop 66 
* CEs [119,121] --> Loop 67 
* CEs [116] --> Loop 68 
* CEs [102,103,104,105,106,107,108,109,110,111,112,113] --> Loop 69 
* CEs [114] --> Loop 70 
* CEs [115] --> Loop 71 

#### Loops of merge/3 
* Loop 65: merge(V1,V,Out)->  merge(V1',V,Out')
                  [V1>=V1'+2,V1'>=0,V>=1,V1+Out'=Out+V1'] 
* Loop 66: merge(V1,V,Out)->  merge(V1,V',Out')
                  [V>=V'+2,V'>=0,V1>=1,V+Out'=Out+V'] 
* Loop 67: merge(V1,V,Out)->  merge(V1,V',Out')
                  [V>=1,V1>=1,Out=Out'+1,V=V'+1] 
* Loop 68: merge(V1,V,Out)->  merge(V1',V,Out')
                  [V>=2,V1>=1,Out=Out'+1,V1=V1'+1] 
* Loop 69: merge(V1,V,Out) [V>=0,V1>=0,Out=0] 
* Loop 70: merge(A,B,A) [A>=1,B=0] 
* Loop 71: merge(A,B,B) [B>=0,A=0] 

### Ranking functions of CR merge(V1,V,Out) 
* RF of phase [65,66,67,68]: [V1+V-1,V1+2*V-2,V1+3*V-3,V1+3/2*V-2,2*V1+V-2,3*V1+V-3,3/2*V1+V-2]

#### Partial ranking functions of CR merge(V1,V,Out) 
* Partial RF of phase [65,66,67,68]:
  - RF of loop [65:1]:
    V1/2-1/2
  - RF of loop [66:1]:
    V/2-1/2
  - RF of loop [67:1]:
    V
  - RF of loop [68:1]:
    V1


### Resulting Chains:merge(V1,V,Out) 
* [[65,66,67,68],71]
* [[65,66,67,68],70]
* [[65,66,67,68],69]
* [71]
* [70]
* [69]


### Merging Chains  merge/3 into  External patterns of execution 
* [[71]] --> 1 
* [[70]] --> 2 
* [[69]] --> 3 
* [[70,[65,66,67,68]],[71,[65,66,67,68]]] --> 4 
* [[69,[65,66,67,68]]] --> 5 


### Specialization of cost equations mergesort/2 
* CE 34 is refined into CE [123] 
* CE 33 is refined into CE [124] 
* CE 36 is refined into CE [125,126] 
* CE 37 is refined into CE [127] 
* CE 38 is refined into CE [128] 
* CE 35 is refined into CE [129,130,131,132,133] 


#### Refined cost equations mergesort/2 
* CE 123: mergesort(A,A) = 3
     [A>=1] 
* CE 124: mergesort(V1,Out) = 2
     [V1>=1,Out=0] 
* CE 125: mergesort(V1,Out) = 3+ msplit(V1,W1):2
     [V1>=2,W1=0,Out=0] 
* CE 126: mergesort(V1,Out) = 3+ msplit(W1,X1):3
     [X1>=3,X1=W1+1,X1=V1+1,Out=0] 
* CE 127: mergesort(V1,Out) = 1
     [V1>=0,Out=0] 
* CE 128: mergesort(V1,Out) = 2
     [Out=0,V1=0] 
* CE 129: mergesort(V1,Out) = 4+ msplit(W1,X1):3+ mergesort(Y1,Z1)+ mergesort(A2,Out)+ merge(B2,Out,Out):1
     [X1>=A2+1,A2>=0,Out>=0,X1>=3,X1=Y1+A2+1,X1=W1+1,X1=V1+1,Z1=0,B2=0] 
* CE 130: mergesort(V1,Out) = 4+ msplit(W1,X1):3+ mergesort(Y1,Out)+ mergesort(Z1,A2)+ merge(Out,B2,Out):2
     [X1>=Z1+1,Z1>=0,Out>=1,X1>=3,X1=Y1+Z1+1,X1=W1+1,X1=V1+1,A2=0,B2=0] 
* CE 131: mergesort(V1,Out) = 4+ msplit(W1,X1):3+ mergesort(Y1,Z1)+ mergesort(A2,B2)+ merge(Z1,B2,C2):3
     [X1>=A2+1,A2>=0,B2>=0,Z1>=0,X1>=3,X1=Y1+A2+1,X1=W1+1,X1=V1+1,C2=0,Out=0] 
* CE 132: mergesort(V1,Out) = 4+ msplit(W1,X1):3+ mergesort(Y1,Z1)+ mergesort(A2,B2)+ merge(Z1,C2,Out):4
     [X1>=A2+1,Out>=Z1+1,A2>=0,Z1>=1,X1>=3,X1=Y1+A2+1,Out=Z1+B2,Out=Z1+C2,X1=W1+1,X1=V1+1] 
* CE 133: mergesort(V1,Out) = 4+ msplit(W1,X1):3+ mergesort(Y1,Z1)+ mergesort(A2,B2)+ merge(Z1,B2,Out):5
     [Z1+B2>=Out+1,X1>=A2+1,A2>=0,Out>=1,B2>=1,Z1>=1,X1>=3,X1=Y1+A2+1,X1=W1+1,X1=V1+1] 

### Cost equations --> "Loop" of mergesort/2 
* CEs [133] --> Loop 72 
* CEs [132] --> Loop 73 
* CEs [130] --> Loop 74 
* CEs [129] --> Loop 75 
* CEs [131] --> Loop 76 
* CEs [123] --> Loop 77 
* CEs [124,125,126,127,128] --> Loop 78 

#### Loops of mergesort/2 
* Loop 72: mergesort(V1,Out)->  mergesort(V1',Out')  mergesort(V1'2,Out'2)
                  [Out'+Out'2>=Out+1,V1>=V1',Out'2>=1,Out'>=1,V1'>=0,Out>=1,V1>=2,V1=V1'+V1'2] 
* Loop 73: mergesort(V1,Out)->  mergesort(V1',Out')  mergesort(V1'2,Out'2)
                  [Out>=Out'+1,V1>=V1',Out'>=1,V1'>=0,V1>=2,V1=V1'+V1'2,Out'+Out'2=Out] 
* Loop 74: mergesort(V1,Out)->  mergesort(V1',Out)  mergesort(V1'2,Out'2)
                  [V1>=V1',V1'>=0,Out>=1,V1>=2,V1=V1'+V1'2,Out'2=0] 
* Loop 75: mergesort(V1,Out)->  mergesort(V1',Out')  mergesort(V1'2,Out)
                  [V1>=V1',V1'>=0,Out>=0,V1>=2,V1=V1'+V1'2,Out'=0] 
* Loop 76: mergesort(V1,Out)->  mergesort(V1',Out')  mergesort(V1'2,Out'2)
                  [V1>=V1',Out'2>=0,Out'>=0,V1'>=0,V1>=2,V1=V1'+V1'2,Out=0] 
* Loop 77: mergesort(A,A) [A>=1] 
* Loop 78: mergesort(V1,Out) [V1>=0,Out=0] 

### Ranking functions of CR mergesort(V1,Out) 

#### Partial ranking functions of CR mergesort(V1,Out) 


### Resulting Chains:mergesort(V1,Out) 
* [multiple([72,73,74,75,76],[[],[78],[77]])]...
* [78]
* [77]


### Merging Chains  mergesort/2 into  External patterns of execution 
* [[78]] --> 1 
* [[77]] --> 2 
* [[multiple([72,73,74,75,76],[[],[78],[77]])]] --> 3 


### Specialization of cost equations start/5 
* CE 15 is refined into CE [134,135,136,137] 
* CE 18 is refined into CE [138,139,140,141] 
* CE 2 is refined into CE [142] 
* CE 3 is refined into CE [143] 
* CE 4 is refined into CE [144] 
* CE 5 is refined into CE [145] 
* CE 6 is refined into CE [146,147,148,149,150,151,152,153,154,155,156,157] 
* CE 7 is refined into CE [158,159,160,161,162,163,164,165,166,167,168,169] 
* CE 8 is refined into CE [170,171] 
* CE 9 is refined into CE [172,173] 
* CE 10 is refined into CE [174,175,176,177,178,179,180,181,182,183,184,185] 
* CE 11 is refined into CE [186,187,188,189,190,191,192,193,194,195] 
* CE 12 is refined into CE [196,197,198,199,200,201,202,203,204,205] 
* CE 13 is refined into CE [206,207,208,209,210,211,212,213,214,215,216,217] 
* CE 14 is refined into CE [218,219,220,221,222,223,224,225,226,227,228,229] 
* CE 16 is refined into CE [230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245] 
* CE 17 is refined into CE [246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261] 
* CE 19 is refined into CE [262,263,264,265,266] 
* CE 20 is refined into CE [267,268,269,270,271] 
* CE 21 is refined into CE [272,273,274,275,276,277,278,279,280,281] 
* CE 22 is refined into CE [282,283,284,285,286] 
* CE 23 is refined into CE [287,288,289] 
* CE 24 is refined into CE [290,291,292] 
* CE 25 is refined into CE [293,294] 
* CE 26 is refined into CE [295,296,297,298] 
* CE 27 is refined into CE [299,300,301,302,303,304,305,306,307] 


#### Refined cost equations start/5 
* CE 134: start(V1,V,V11,V21,V19) = 1+ merge(W21,X21,X21):1
     [X21>=V19+1,V19>=0,V>=0,X21=V21+V19+1,W21=0,V11=0,V1=2] 
* CE 135: start(V1,V,V11,V21,V19) = 1+ merge(V11,W21,X21):3
     [W21>=V19+1,V11>=0,V19>=0,V>=0,W21=V21+V19+1,X21=0,V1=2] 
* CE 136: start(V1,V,V11,V21,V19) = 1+ merge(V11,W21,X21):4
     [X21>=V11+V19+1,V11>=1,V19>=0,V>=0,X21=V11+V21+V19+1,X21=V11+W21,V1=2] 
* CE 137: start(V1,V,V11,V21,V19) = 1+ merge(V11,W21,X21):5
     [V11+W21>=X21+1,W21>=V19+1,X21>=1,V11>=1,V19>=0,V>=0,W21=V21+V19+1,V1=2] 
* CE 138: start(V1,V,V11,V21,V19) = 1+ merge(W21,X21,W21):2
     [W21>=V11+1,V21>=0,V11>=0,W21=V+V11+1,X21=0,V19=0,V1=1] 
* CE 139: start(V1,V,V11,V21,V19) = 1+ merge(W21,V19,X21):3
     [W21>=V11+1,V19>=0,V21>=0,V11>=0,W21=V+V11+1,X21=0,V1=1] 
* CE 140: start(V1,V,V11,V21,V19) = 1+ merge(W21,X21,Y21):4
     [Y21>=W21+1,W21>=V11+1,V21>=0,V11>=0,Y21=W21+X21,Y21=V19+W21,W21=V+V11+1,V1=1] 
* CE 141: start(V1,V,V11,V21,V19) = 1+ merge(W21,V19,X21):5
     [V19+W21>=X21+1,W21>=V11+1,X21>=1,V19>=1,V21>=0,V11>=0,W21=V+V11+1,V1=1] 
* CE 142: start(V1,V,V11,V21,V19) = 1
     [V1>=1] 
* CE 143: start(V1,V,V11,V21,V19) = 0
     [V1>=0] 
* CE 144: start(V1,V,V11,V21,V19) = 2
     [V1>=1] 
* CE 145: start(V1,V,V11,V21,V19) = 1
     [V1=0] 
* CE 146: start(V1,V,V11,V21,V19) = 3+ msplit(W21,X21):3+ mergesort(Y21,Z21):1+ mergesort(A22,B22):1+ merge(C22,D22,E22):1
     [Y21+A22>=2,A22>=0,Y21>=0,Y21+A22+1=X21,Y21+A22=W21,Y21+A22=V1,E22=0,D22=0,C22=0,B22=0,Z21=0] 
* CE 147: start(V1,V,V11,V21,V19) = 3+ msplit(W21,X21):3+ mergesort(Y21,Z21):1+ mergesort(A22,B22):1+ merge(C22,D22,E22):3
     [Y21+A22>=2,A22>=0,Y21>=0,Y21+A22+1=X21,Y21+A22=W21,Y21+A22=V1,E22=0,D22=0,C22=0,B22=0,Z21=0] 
* CE 148: start(V1,V,V11,V21,V19) = 3+ msplit(W21,X21):3+ mergesort(Y21,Z21):1+ mergesort(A22,A22):2+ merge(B22,A22,A22):1
     [Y21+A22>=2,A22>=1,Y21>=0,Y21+A22+1=X21,Y21+A22=W21,Y21+A22=V1,B22=0,Z21=0] 
* CE 149: start(V1,V,V11,V21,V19) = 3+ msplit(W21,X21):3+ mergesort(Y21,Z21):1+ mergesort(A22,A22):2+ merge(B22,A22,C22):3
     [Y21+A22>=2,A22>=1,Y21>=0,Y21+A22+1=X21,Y21+A22=W21,Y21+A22=V1,C22=0,B22=0,Z21=0] 
* CE 150: start(V1,V,V11,V21,V19) = 3+ msplit(W21,X21):3+ mergesort(Y21,Z21):1+ mergesort(A22,B22):3
     [B22>=0,A22>=2,Y21>=0,Y21+A22+1=X21,Y21+A22=W21,Y21+A22=V1,C22=0,Z21=0] 
* CE 151: start(V1,V,V11,V21,V19) = 3+ msplit(W21,X21):3+ mergesort(Y21,Y21):2+ mergesort(Z21,A22):1+ merge(Y21,B22,Y21):2
     [Y21+Z21>=2,Y21>=1,Z21>=0,Y21+Z21+1=X21,Y21+Z21=W21,Y21+Z21=V1,B22=0,A22=0] 
* CE 152: start(V1,V,V11,V21,V19) = 3+ msplit(W21,X21):3+ mergesort(Y21,Y21):2+ mergesort(Z21,A22):1+ merge(Y21,B22,C22):3
     [Y21+Z21>=2,Y21>=1,Z21>=0,Y21+Z21+1=X21,Y21+Z21=W21,Y21+Z21=V1,C22=0,B22=0,A22=0] 
* CE 153: start(V1,V,V11,V21,V19) = 3+ msplit(W21,X21):3+ mergesort(Y21,Y21):2+ mergesort(Z21,Z21):2+ merge(Y21,Z21,A22):3
     [Z21>=1,Y21>=1,Y21+Z21+1=X21,Y21+Z21=W21,Y21+Z21=V1,A22=0] 
* CE 154: start(V1,V,V11,V21,V19) = 3+ msplit(V1,W21):3+ mergesort(X21,X21):2+ mergesort(Y21,Z21):2+ merge(X21,A22,V1):4
     [V1>=X21+1,X21>=1,V1=X21+A22,V1=X21+Z21,V1=X21+Y21,V1+1=W21] 
* CE 155: start(V1,V,V11,V21,V19) = 3+ msplit(W21,X21):3+ mergesort(Y21,Y21):2+ mergesort(Z21,Z21):2+ merge(Y21,Z21,A22):5
     [Y21+Z21>=A22+1,A22>=1,Z21>=1,Y21>=1,Y21+Z21+1=X21,Y21+Z21=W21,Y21+Z21=V1] 
* CE 156: start(V1,V,V11,V21,V19) = 3+ msplit(W21,X21):3+ mergesort(Y21,Y21):2+ mergesort(Z21,A22):3
     [A22>=0,Z21>=2,Y21>=1,Y21+Z21+1=X21,Y21+Z21=W21,Y21+Z21=V1] 
* CE 157: start(V1,V,V11,V21,V19) = 3+ msplit(W21,X21):3+ mergesort(Y21,Z21):3
     [X21>=Y21+1,Z21>=0,Y21>=2,Y21+A22+1=X21,X21=W21+1,X21=V1+1] 
* CE 158: start(V1,V,V11,V21,V19) = 2+ msplit(W21,X21):3+ mergesort(Y21,Z21):1+ mergesort(A22,B22):1+ merge(C22,D22,E22):1
     [Y21+A22>=V+2,A22>=0,Y21>=0,V>=0,Y21+A22=V1+V+1,Y21+A22+1=X21,Y21+A22=W21,E22=0,D22=0,C22=0,B22=0,Z21=0] 
* CE 159: start(V1,V,V11,V21,V19) = 2+ msplit(W21,X21):3+ mergesort(Y21,Z21):1+ mergesort(A22,B22):1+ merge(C22,D22,E22):3
     [Y21+A22>=V+2,A22>=0,Y21>=0,V>=0,Y21+A22=V1+V+1,Y21+A22+1=X21,Y21+A22=W21,E22=0,D22=0,C22=0,B22=0,Z21=0] 
* CE 160: start(V1,V,V11,V21,V19) = 2+ msplit(W21,X21):3+ mergesort(Y21,Z21):1+ mergesort(A22,A22):2+ merge(B22,A22,A22):1
     [Y21+A22>=V+2,A22>=1,Y21>=0,V>=0,Y21+A22=V1+V+1,Y21+A22+1=X21,Y21+A22=W21,B22=0,Z21=0] 
* CE 161: start(V1,V,V11,V21,V19) = 2+ msplit(W21,X21):3+ mergesort(Y21,Z21):1+ mergesort(A22,A22):2+ merge(B22,A22,C22):3
     [Y21+A22>=V+2,A22>=1,Y21>=0,V>=0,Y21+A22=V1+V+1,Y21+A22+1=X21,Y21+A22=W21,C22=0,B22=0,Z21=0] 
* CE 162: start(V1,V,V11,V21,V19) = 2+ msplit(W21,X21):3+ mergesort(Y21,Z21):1+ mergesort(A22,B22):3
     [Y21+A22>=V+2,B22>=0,A22>=2,Y21>=0,V>=0,Y21+A22=V1+V+1,Y21+A22+1=X21,Y21+A22=W21,C22=0,Z21=0] 
* CE 163: start(V1,V,V11,V21,V19) = 2+ msplit(W21,X21):3+ mergesort(Y21,Y21):2+ mergesort(Z21,A22):1+ merge(Y21,B22,Y21):2
     [Y21+Z21>=V+2,Y21>=1,Z21>=0,V>=0,Y21+Z21=V1+V+1,Y21+Z21+1=X21,Y21+Z21=W21,B22=0,A22=0] 
* CE 164: start(V1,V,V11,V21,V19) = 2+ msplit(W21,X21):3+ mergesort(Y21,Y21):2+ mergesort(Z21,A22):1+ merge(Y21,B22,C22):3
     [Y21+Z21>=V+2,Y21>=1,Z21>=0,V>=0,Y21+Z21=V1+V+1,Y21+Z21+1=X21,Y21+Z21=W21,C22=0,B22=0,A22=0] 
* CE 165: start(V1,V,V11,V21,V19) = 2+ msplit(W21,X21):3+ mergesort(Y21,Y21):2+ mergesort(Z21,Z21):2+ merge(Y21,Z21,A22):3
     [Y21+Z21>=V+2,Z21>=1,Y21>=1,V>=0,Y21+Z21=V1+V+1,Y21+Z21+1=X21,Y21+Z21=W21,A22=0] 
* CE 166: start(V1,V,V11,V21,V19) = 2+ msplit(W21,X21):3+ mergesort(Y21,Y21):2+ mergesort(Z21,A22):2+ merge(Y21,B22,W21):4
     [W21>=Y21+1,W21>=V+2,Y21>=1,V>=0,W21=Y21+B22,W21=Y21+A22,W21=Y21+Z21,W21=V1+V+1,W21+1=X21] 
* CE 167: start(V1,V,V11,V21,V19) = 2+ msplit(W21,X21):3+ mergesort(Y21,Y21):2+ mergesort(Z21,Z21):2+ merge(Y21,Z21,A22):5
     [Y21+Z21>=A22+1,Y21+Z21>=V+2,A22>=1,Z21>=1,Y21>=1,V>=0,Y21+Z21=V1+V+1,Y21+Z21+1=X21,Y21+Z21=W21] 
* CE 168: start(V1,V,V11,V21,V19) = 2+ msplit(W21,X21):3+ mergesort(Y21,Y21):2+ mergesort(Z21,A22):3
     [Y21+Z21>=V+2,A22>=0,Z21>=2,Y21>=1,V>=0,Y21+Z21=V1+V+1,Y21+Z21+1=X21,Y21+Z21=W21] 
* CE 169: start(V1,V,V11,V21,V19) = 2+ msplit(W21,X21):3+ mergesort(Y21,Z21):3
     [X21>=Y21+1,X21>=V+3,Z21>=0,Y21>=2,V>=0,Y21+A22+1=X21,X21=V1+V+2,X21=W21+1] 
* CE 170: start(V1,V,V11,V21,V19) = 2+ msplit(V1,W21):2
     [V1>=2,W21=0] 
* CE 171: start(V1,V,V11,V21,V19) = 2+ msplit(W21,X21):3
     [X21>=3,X21=W21+1,X21=V1+1] 
* CE 172: start(V1,V,V11,V21,V19) = 1+ msplit(W21,X21):2
     [W21>=V+2,V>=0,W21=V1+V+1,X21=0] 
* CE 173: start(V1,V,V11,V21,V19) = 1+ msplit(W21,X21):3
     [X21>=V+3,V>=0,X21=V1+V+2,X21=W21+1] 
* CE 174: start(V1,V,V11,V21,V19) = 1+ mergesort(W21,X21):1+ mergesort(Y21,Z21):1+ merge(A22,B22,C22):1
     [Y21>=0,W21>=0,W21+Y21+1=V1,C22=0,B22=0,A22=0,Z21=0,X21=0] 
* CE 175: start(V1,V,V11,V21,V19) = 1+ mergesort(W21,X21):1+ mergesort(Y21,Z21):1+ merge(A22,B22,C22):3
     [Y21>=0,W21>=0,W21+Y21+1=V1,C22=0,B22=0,A22=0,Z21=0,X21=0] 
* CE 176: start(V1,V,V11,V21,V19) = 1+ mergesort(W21,X21):1+ mergesort(Y21,Y21):2+ merge(Z21,Y21,Y21):1
     [Y21>=1,W21>=0,W21+Y21+1=V1,Z21=0,X21=0] 
* CE 177: start(V1,V,V11,V21,V19) = 1+ mergesort(W21,X21):1+ mergesort(Y21,Y21):2+ merge(Z21,Y21,A22):3
     [Y21>=1,W21>=0,W21+Y21+1=V1,A22=0,Z21=0,X21=0] 
* CE 178: start(V1,V,V11,V21,V19) = 1+ mergesort(W21,X21):1+ mergesort(Y21,Z21):3
     [Z21>=0,Y21>=2,W21>=0,W21+Y21+1=V1,A22=0,X21=0] 
* CE 179: start(V1,V,V11,V21,V19) = 1+ mergesort(W21,W21):2+ mergesort(X21,Y21):1+ merge(W21,Z21,W21):2
     [W21>=1,X21>=0,W21+X21+1=V1,Z21=0,Y21=0] 
* CE 180: start(V1,V,V11,V21,V19) = 1+ mergesort(W21,W21):2+ mergesort(X21,Y21):1+ merge(W21,Z21,A22):3
     [W21>=1,X21>=0,W21+X21+1=V1,A22=0,Z21=0,Y21=0] 
* CE 181: start(V1,V,V11,V21,V19) = 1+ mergesort(W21,W21):2+ mergesort(X21,X21):2+ merge(W21,X21,Y21):3
     [X21>=1,W21>=1,W21+X21+1=V1,Y21=0] 
* CE 182: start(V1,V,V11,V21,V19) = 1+ mergesort(W21,W21):2+ mergesort(X21,Y21):2+ merge(W21,Z21,A22):4
     [A22>=W21+1,W21>=1,A22=W21+Z21,A22=W21+Y21,A22=W21+X21,A22+1=V1] 
* CE 183: start(V1,V,V11,V21,V19) = 1+ mergesort(W21,W21):2+ mergesort(X21,X21):2+ merge(W21,X21,Y21):5
     [W21+X21>=Y21+1,Y21>=1,X21>=1,W21>=1,W21+X21+1=V1] 
* CE 184: start(V1,V,V11,V21,V19) = 1+ mergesort(W21,W21):2+ mergesort(X21,Y21):3
     [Y21>=0,X21>=2,W21>=1,W21+X21+1=V1] 
* CE 185: start(V1,V,V11,V21,V19) = 1+ mergesort(W21,X21):3
     [Y21>=0,X21>=0,W21>=2,W21+Y21+1=V1] 
* CE 186: start(V1,V,V11,V21,V19) = 2+ fun(W21,X21,Y21):1
     [V>=1,V1>=1,Y21=1,X21=0,W21=0] 
* CE 187: start(V1,V,V11,V21,V19) = 2+ fun(W21,X21,Y21):2
     [V>=X21+1,V1>=W21+1,X21>=0,W21>=0,Y21=0] 
* CE 188: start(V1,V,V11,V21,V19) = 2+ fun(W21,X21,Y21):3
     [V>=X21+1,X21>=1,V1>=1,Y21=1,W21=0] 
* CE 189: start(V1,V,V11,V21,V19) = 2+ fun(W21,X21,Y21):4
     [V>=X21+1,X21>=1,V1>=1,Y21=2,W21=0] 
* CE 190: start(V1,V,V11,V21,V19) = 2+ fun(W21,X21,Y21):5
     [V1>=W21+1,W21>=1,V>=1,Y21=0,X21=0] 
* CE 191: start(V1,V,V11,V21,V19) = 2+ fun(W21,X21,Y21):6
     [V1>=W21+1,W21>=1,V>=1,Y21=1,X21=0] 
* CE 192: start(V1,V,V11,V21,V19) = 2+ fun(W21,X21,Y21):7
     [V1>=W21+1,W21>=1,V>=1,Y21=2,X21=0] 
* CE 193: start(V1,V,V11,V21,V19) = 2+ fun(W21,W21,X21):8
     [V>=W21+1,V1>=W21+1,W21>=1,X21=0] 
* CE 194: start(V1,V,V11,V21,V19) = 2+ fun(W21,X21,Y21):9
     [V>=X21+1,V1>=W21+1,X21>=1,W21>=1,Y21=1] 
* CE 195: start(V1,V,V11,V21,V19) = 2+ fun(W21,X21,Y21):10
     [V>=X21+1,V1>=W21+1,X21>=1,W21>=1,Y21=2] 
* CE 196: start(V1,V,V11,V21,V19) = 1+ fun(W21,X21,Y21):1
     [V11>=0,V1>=1,Y21=1,X21=0,W21=0,V=0] 
* CE 197: start(V1,V,V11,V21,V19) = 1+ fun(V,W21,X21):2
     [V1>=W21+1,W21>=0,V>=0,V11>=0,X21=0] 
* CE 198: start(V1,V,V11,V21,V19) = 1+ fun(W21,X21,Y21):3
     [V1>=X21+1,X21>=1,V11>=0,Y21=1,W21=0,V=0] 
* CE 199: start(V1,V,V11,V21,V19) = 1+ fun(W21,X21,Y21):4
     [V1>=X21+1,X21>=1,V11>=0,Y21=2,W21=0,V=0] 
* CE 200: start(V1,V,V11,V21,V19) = 1+ fun(V,W21,X21):5
     [V>=1,V11>=0,V1>=1,X21=0,W21=0] 
* CE 201: start(V1,V,V11,V21,V19) = 1+ fun(V,W21,X21):6
     [V>=1,V11>=0,V1>=1,X21=1,W21=0] 
* CE 202: start(V1,V,V11,V21,V19) = 1+ fun(V,W21,X21):7
     [V>=1,V11>=0,V1>=1,X21=2,W21=0] 
* CE 203: start(V1,V,V11,V21,V19) = 1+ fun(V,V,W21):8
     [V1>=V+1,V>=1,V11>=0,W21=0] 
* CE 204: start(V1,V,V11,V21,V19) = 1+ fun(V,W21,X21):9
     [V1>=W21+1,W21>=1,V>=1,V11>=0,X21=1] 
* CE 205: start(V1,V,V11,V21,V19) = 1+ fun(V,W21,X21):10
     [V1>=W21+1,W21>=1,V>=1,V11>=0,X21=2] 
* CE 206: start(V1,V,V11,V21,V19) = 3+ fun(W21,X21,Y21):4+ merge(Z21,V,V):1
     [V>=X21+1,X21>=1,Z21=0,Y21=2,W21=0,V1=1] 
* CE 207: start(V1,V,V11,V21,V19) = 3+ fun(W21,X21,Y21):4+ merge(Z21,V,A22):3
     [V>=X21+1,Z21>=0,X21>=1,Z21+1=V1,A22=0,Y21=2,W21=0] 
* CE 208: start(V1,V,V11,V21,V19) = 3+ fun(W21,X21,Y21):4+ merge(Z21,A22,B22):4
     [B22>=X21+Z21+1,Z21>=1,X21>=1,B22=Z21+A22,B22=V+Z21,Z21+1=V1,Y21=2,W21=0] 
* CE 209: start(V1,V,V11,V21,V19) = 3+ fun(W21,X21,Y21):4+ merge(Z21,V,A22):5
     [V+Z21>=A22+1,V>=X21+1,A22>=1,Z21>=1,X21>=1,Z21+1=V1,Y21=2,W21=0] 
* CE 210: start(V1,V,V11,V21,V19) = 3+ fun(W21,X21,Y21):7+ merge(Z21,V,V):1
     [V>=1,W21>=1,W21+1=V1,Z21=0,Y21=2,X21=0] 
* CE 211: start(V1,V,V11,V21,V19) = 3+ fun(W21,X21,Y21):7+ merge(Z21,V,A22):3
     [V>=1,Z21>=0,W21>=1,W21+Z21+1=V1,A22=0,Y21=2,X21=0] 
* CE 212: start(V1,V,V11,V21,V19) = 3+ fun(W21,X21,Y21):7+ merge(Z21,A22,B22):4
     [B22>=Z21+1,Z21>=1,W21>=1,B22=Z21+A22,B22=V+Z21,W21+Z21+1=V1,Y21=2,X21=0] 
* CE 213: start(V1,V,V11,V21,V19) = 3+ fun(W21,X21,Y21):7+ merge(Z21,V,A22):5
     [V+Z21>=A22+1,A22>=1,V>=1,Z21>=1,W21>=1,W21+Z21+1=V1,Y21=2,X21=0] 
* CE 214: start(V1,V,V11,V21,V19) = 3+ fun(W21,X21,Y21):10+ merge(Z21,V,V):1
     [V>=X21+1,X21>=1,W21>=1,W21+1=V1,Z21=0,Y21=2] 
* CE 215: start(V1,V,V11,V21,V19) = 3+ fun(W21,X21,Y21):10+ merge(Z21,V,A22):3
     [V>=X21+1,Z21>=0,X21>=1,W21>=1,W21+Z21+1=V1,A22=0,Y21=2] 
* CE 216: start(V1,V,V11,V21,V19) = 3+ fun(W21,X21,Y21):10+ merge(Z21,A22,B22):4
     [B22>=X21+Z21+1,Z21>=1,X21>=1,W21>=1,B22=Z21+A22,B22=V+Z21,W21+Z21+1=V1,Y21=2] 
* CE 217: start(V1,V,V11,V21,V19) = 3+ fun(W21,X21,Y21):10+ merge(Z21,V,A22):5
     [V+Z21>=A22+1,V>=X21+1,A22>=1,Z21>=1,X21>=1,W21>=1,W21+Z21+1=V1,Y21=2] 
* CE 218: start(V1,V,V11,V21,V19) = 2+ fun(W21,X21,Y21):4+ merge(Z21,V1,V1):1
     [V1>=X21+1,X21>=1,Z21=0,Y21=2,W21=0,V11=0,V=0] 
* CE 219: start(V1,V,V11,V21,V19) = 2+ fun(W21,X21,Y21):4+ merge(V11,V1,Z21):3
     [V1>=X21+1,V11>=0,X21>=1,Z21=0,Y21=2,W21=0,V=0] 
* CE 220: start(V1,V,V11,V21,V19) = 2+ fun(W21,X21,Y21):4+ merge(V11,Z21,A22):4
     [A22>=V11+X21+1,V11>=1,X21>=1,A22=V11+Z21,A22=V1+V11,Y21=2,W21=0,V=0] 
* CE 221: start(V1,V,V11,V21,V19) = 2+ fun(W21,X21,Y21):4+ merge(V11,V1,Z21):5
     [V1+V11>=Z21+1,V1>=X21+1,Z21>=1,V11>=1,X21>=1,Y21=2,W21=0,V=0] 
* CE 222: start(V1,V,V11,V21,V19) = 2+ fun(V,W21,X21):7+ merge(Y21,V1,V1):1
     [V1>=1,V>=1,Y21=0,X21=2,W21=0,V11=0] 
* CE 223: start(V1,V,V11,V21,V19) = 2+ fun(V,W21,X21):7+ merge(V11,V1,Y21):3
     [V1>=1,V11>=0,V>=1,Y21=0,X21=2,W21=0] 
* CE 224: start(V1,V,V11,V21,V19) = 2+ fun(V,W21,X21):7+ merge(V11,Y21,Z21):4
     [Z21>=V11+1,V11>=1,V>=1,Z21=V11+Y21,Z21=V1+V11,X21=2,W21=0] 
* CE 225: start(V1,V,V11,V21,V19) = 2+ fun(V,W21,X21):7+ merge(V11,V1,Y21):5
     [V1+V11>=Y21+1,Y21>=1,V1>=1,V11>=1,V>=1,X21=2,W21=0] 
* CE 226: start(V1,V,V11,V21,V19) = 2+ fun(V,W21,X21):10+ merge(Y21,V1,V1):1
     [V1>=W21+1,W21>=1,V>=1,Y21=0,X21=2,V11=0] 
* CE 227: start(V1,V,V11,V21,V19) = 2+ fun(V,W21,X21):10+ merge(V11,V1,Y21):3
     [V1>=W21+1,V11>=0,W21>=1,V>=1,Y21=0,X21=2] 
* CE 228: start(V1,V,V11,V21,V19) = 2+ fun(V,W21,X21):10+ merge(V11,Y21,Z21):4
     [Z21>=V11+W21+1,V11>=1,W21>=1,V>=1,Z21=V11+Y21,Z21=V1+V11,X21=2] 
* CE 229: start(V1,V,V11,V21,V19) = 2+ fun(V,W21,X21):10+ merge(V11,V1,Y21):5
     [V1+V11>=Y21+1,V1>=W21+1,Y21>=1,V11>=1,W21>=1,V>=1,X21=2] 
* CE 230: start(V1,V,V11,V21,V19) = 3+ fun(W21,X21,Y21):1+ merge(V1,Z21,V1):2
     [V1>=1,Z21=0,Y21=1,X21=0,W21=0,V=1] 
* CE 231: start(V1,V,V11,V21,V19) = 3+ fun(W21,X21,Y21):1+ merge(V1,Z21,A22):3
     [Z21>=0,V1>=1,Z21+1=V,A22=0,Y21=1,X21=0,W21=0] 
* CE 232: start(V1,V,V11,V21,V19) = 3+ fun(W21,X21,Y21):1+ merge(V1,Z21,A22):4
     [A22>=V1+1,V1>=1,A22=V1+Z21,A22+1=V1+V,Y21=1,X21=0,W21=0] 
* CE 233: start(V1,V,V11,V21,V19) = 3+ fun(W21,X21,Y21):1+ merge(V1,Z21,A22):5
     [V1+Z21>=A22+1,A22>=1,Z21>=1,V1>=1,Z21+1=V,Y21=1,X21=0,W21=0] 
* CE 234: start(V1,V,V11,V21,V19) = 3+ fun(W21,X21,Y21):3+ merge(V1,Z21,V1):2
     [V1>=1,X21>=1,X21+1=V,Z21=0,Y21=1,W21=0] 
* CE 235: start(V1,V,V11,V21,V19) = 3+ fun(W21,X21,Y21):3+ merge(V1,Z21,A22):3
     [Z21>=0,V1>=1,X21>=1,X21+Z21+1=V,A22=0,Y21=1,W21=0] 
* CE 236: start(V1,V,V11,V21,V19) = 3+ fun(W21,X21,Y21):3+ merge(V1,Z21,A22):4
     [A22>=V1+1,V1>=1,X21>=1,X21+A22+1=V1+V,A22=V1+Z21,Y21=1,W21=0] 
* CE 237: start(V1,V,V11,V21,V19) = 3+ fun(W21,X21,Y21):3+ merge(V1,Z21,A22):5
     [V1+Z21>=A22+1,A22>=1,Z21>=1,V1>=1,X21>=1,X21+Z21+1=V,Y21=1,W21=0] 
* CE 238: start(V1,V,V11,V21,V19) = 3+ fun(W21,X21,Y21):6+ merge(V1,Z21,V1):2
     [V1>=W21+1,W21>=1,Z21=0,Y21=1,X21=0,V=1] 
* CE 239: start(V1,V,V11,V21,V19) = 3+ fun(W21,X21,Y21):6+ merge(V1,Z21,A22):3
     [V1>=W21+1,Z21>=0,W21>=1,Z21+1=V,A22=0,Y21=1,X21=0] 
* CE 240: start(V1,V,V11,V21,V19) = 3+ fun(W21,X21,Y21):6+ merge(V1,Z21,A22):4
     [A22>=V1+1,V1>=W21+1,W21>=1,A22=V1+Z21,A22+1=V1+V,Y21=1,X21=0] 
* CE 241: start(V1,V,V11,V21,V19) = 3+ fun(W21,X21,Y21):6+ merge(V1,Z21,A22):5
     [V1+Z21>=A22+1,V1>=W21+1,A22>=1,Z21>=1,W21>=1,Z21+1=V,Y21=1,X21=0] 
* CE 242: start(V1,V,V11,V21,V19) = 3+ fun(W21,X21,Y21):9+ merge(V1,Z21,V1):2
     [V1>=W21+1,X21>=1,W21>=1,X21+1=V,Z21=0,Y21=1] 
* CE 243: start(V1,V,V11,V21,V19) = 3+ fun(W21,X21,Y21):9+ merge(V1,Z21,A22):3
     [V1>=W21+1,Z21>=0,X21>=1,W21>=1,X21+Z21+1=V,A22=0,Y21=1] 
* CE 244: start(V1,V,V11,V21,V19) = 3+ fun(W21,X21,Y21):9+ merge(V1,Z21,A22):4
     [A22>=V1+1,V1>=W21+1,X21>=1,W21>=1,X21+A22+1=V1+V,A22=V1+Z21,Y21=1] 
* CE 245: start(V1,V,V11,V21,V19) = 3+ fun(W21,X21,Y21):9+ merge(V1,Z21,A22):5
     [V1+Z21>=A22+1,V1>=W21+1,A22>=1,Z21>=1,X21>=1,W21>=1,X21+Z21+1=V,Y21=1] 
* CE 246: start(V1,V,V11,V21,V19) = 2+ fun(W21,X21,Y21):1+ merge(Z21,A22,Z21):2
     [Z21>=1,Z21=V11+1,A22=0,Y21=1,X21=0,W21=0,V=0,V1=1] 
* CE 247: start(V1,V,V11,V21,V19) = 2+ fun(W21,X21,Y21):1+ merge(Z21,A22,B22):3
     [A22>=0,Z21>=1,Z21=V11+1,A22+1=V1,B22=0,Y21=1,X21=0,W21=0,V=0] 
* CE 248: start(V1,V,V11,V21,V19) = 2+ fun(W21,X21,Y21):1+ merge(Z21,A22,B22):4
     [B22>=Z21+1,Z21>=1,B22=Z21+A22,B22+1=V1+Z21,Z21=V11+1,Y21=1,X21=0,W21=0,V=0] 
* CE 249: start(V1,V,V11,V21,V19) = 2+ fun(W21,X21,Y21):1+ merge(Z21,A22,B22):5
     [Z21+A22>=B22+1,B22>=1,A22>=1,Z21>=1,Z21=V11+1,A22+1=V1,Y21=1,X21=0,W21=0,V=0] 
* CE 250: start(V1,V,V11,V21,V19) = 2+ fun(W21,X21,Y21):3+ merge(Z21,A22,Z21):2
     [Z21>=1,X21>=1,Z21=V11+1,X21+1=V1,A22=0,Y21=1,W21=0,V=0] 
* CE 251: start(V1,V,V11,V21,V19) = 2+ fun(W21,X21,Y21):3+ merge(Z21,A22,B22):3
     [A22>=0,Z21>=1,X21>=1,X21+A22+1=V1,Z21=V11+1,B22=0,Y21=1,W21=0,V=0] 
* CE 252: start(V1,V,V11,V21,V19) = 2+ fun(W21,X21,Y21):3+ merge(Z21,A22,B22):4
     [B22>=Z21+1,Z21>=1,X21>=1,X21+B22+1=V1+Z21,B22=Z21+A22,Z21=V11+1,Y21=1,W21=0,V=0] 
* CE 253: start(V1,V,V11,V21,V19) = 2+ fun(W21,X21,Y21):3+ merge(Z21,A22,B22):5
     [Z21+A22>=B22+1,B22>=1,A22>=1,Z21>=1,X21>=1,X21+A22+1=V1,Z21=V11+1,Y21=1,W21=0,V=0] 
* CE 254: start(V1,V,V11,V21,V19) = 2+ fun(V,W21,X21):6+ merge(Y21,Z21,Y21):2
     [Y21>=V+1,V>=1,Y21=V+V11+1,Z21=0,X21=1,W21=0,V1=1] 
* CE 255: start(V1,V,V11,V21,V19) = 2+ fun(V,W21,X21):6+ merge(Y21,Z21,A22):3
     [Y21>=V+1,Z21>=0,V>=1,Y21=V+V11+1,Z21+1=V1,A22=0,X21=1,W21=0] 
* CE 256: start(V1,V,V11,V21,V19) = 2+ fun(V,W21,X21):6+ merge(Y21,Z21,A22):4
     [A22>=Y21+1,Y21>=V+1,V>=1,A22=Y21+Z21,Y21=V+V11+1,A22+1=V1+Y21,X21=1,W21=0] 
* CE 257: start(V1,V,V11,V21,V19) = 2+ fun(V,W21,X21):6+ merge(Y21,Z21,A22):5
     [Y21+Z21>=A22+1,Y21>=V+1,A22>=1,Z21>=1,V>=1,Y21=V+V11+1,Z21+1=V1,X21=1,W21=0] 
* CE 258: start(V1,V,V11,V21,V19) = 2+ fun(V,W21,X21):9+ merge(Y21,Z21,Y21):2
     [Y21>=V+1,W21>=1,V>=1,Y21=V+V11+1,W21+1=V1,Z21=0,X21=1] 
* CE 259: start(V1,V,V11,V21,V19) = 2+ fun(V,W21,X21):9+ merge(Y21,Z21,A22):3
     [Y21>=V+1,Z21>=0,W21>=1,V>=1,Y21=V+V11+1,W21+Z21+1=V1,A22=0,X21=1] 
* CE 260: start(V1,V,V11,V21,V19) = 2+ fun(V,W21,X21):9+ merge(Y21,Z21,A22):4
     [A22>=Y21+1,Y21>=V+1,W21>=1,V>=1,W21+A22+1=V1+Y21,A22=Y21+Z21,Y21=V+V11+1,X21=1] 
* CE 261: start(V1,V,V11,V21,V19) = 2+ fun(V,W21,X21):9+ merge(Y21,Z21,A22):5
     [Y21+Z21>=A22+1,Y21>=V+1,A22>=1,Z21>=1,W21>=1,V>=1,Y21=V+V11+1,W21+Z21+1=V1,X21=1] 
* CE 262: start(V1,V,V11,V21,V19) = 2+ msplit(W21,X21):1+ fun11(Y21,Z21,A22,B22):1
     [A22>=0,Z21>=0,Z21+A22+2=V1,B22=0,Y21=1,X21=1,W21=0] 
* CE 263: start(V1,V,V11,V21,V19) = 2+ msplit(W21,X21):1+ fun11(Y21,Z21,A22,B22):2
     [B22>=Z21+3,Z21>=0,B22=Z21+A22+3,B22=V1+1,Y21=1,X21=1,W21=0] 
* CE 264: start(V1,V,V11,V21,V19) = 2+ msplit(W21,X21):2+ fun11(Y21,Z21,A22,B22):1
     [A22>=0,Z21>=0,W21>=0,W21+Z21+A22+2=V1,B22=0,Y21=0,X21=0] 
* CE 265: start(V1,V,V11,V21,V19) = 2+ msplit(W21,X21):3+ fun11(X21,Y21,Z21,A22):1
     [Z21>=0,Y21>=0,X21>=2,X21+Y21+Z21+1=V1,X21=W21+1,A22=0] 
* CE 266: start(V1,V,V11,V21,V19) = 2+ msplit(W21,X21):3+ fun11(X21,Y21,Z21,A22):2
     [A22>=X21+Y21+2,Y21>=0,X21>=2,A22=X21+Y21+Z21+2,X21=W21+1,A22=V1+1] 
* CE 267: start(V1,V,V11,V21,V19) = 1+ msplit(W21,X21):1+ fun11(Y21,V,Z21,A22):1
     [Z21>=0,V>=0,Z21+1=V1,A22=0,Y21=1,X21=1,W21=0] 
* CE 268: start(V1,V,V11,V21,V19) = 1+ msplit(W21,X21):1+ fun11(Y21,V,Z21,A22):2
     [A22>=V+3,V>=0,A22=V+Z21+3,A22=V1+V+2,Y21=1,X21=1,W21=0] 
* CE 269: start(V1,V,V11,V21,V19) = 1+ msplit(W21,X21):2+ fun11(Y21,V,Z21,A22):1
     [Z21>=0,V>=0,W21>=0,W21+Z21+1=V1,A22=0,Y21=0,X21=0] 
* CE 270: start(V1,V,V11,V21,V19) = 1+ msplit(W21,X21):3+ fun11(X21,V,Y21,Z21):1
     [Y21>=0,V>=0,X21>=2,X21+Y21=V1,X21=W21+1,Z21=0] 
* CE 271: start(V1,V,V11,V21,V19) = 1+ msplit(W21,X21):3+ fun11(X21,V,Y21,Z21):2
     [Z21>=V+X21+2,V>=0,X21>=2,Z21=V+X21+Y21+2,Z21=V1+V+2,X21=W21+1] 
* CE 272: start(V1,V,V11,V21,V19) = 0+ fun(W21,X21,Y21):1
     [Y21=1,X21=0,W21=0,V=0,V1=0] 
* CE 273: start(V1,V,V11,V21,V19) = 0+ fun(V1,V,W21):2
     [V>=0,V1>=0,W21=0] 
* CE 274: start(V1,V,V11,V21,V19) = 0+ fun(W21,V,X21):3
     [V>=1,X21=1,W21=0,V1=0] 
* CE 275: start(V1,V,V11,V21,V19) = 0+ fun(W21,V,X21):4
     [V>=1,X21=2,W21=0,V1=0] 
* CE 276: start(V1,V,V11,V21,V19) = 0+ fun(V1,W21,X21):5
     [V1>=1,X21=0,W21=0,V=0] 
* CE 277: start(V1,V,V11,V21,V19) = 0+ fun(V1,W21,X21):6
     [V1>=1,X21=1,W21=0,V=0] 
* CE 278: start(V1,V,V11,V21,V19) = 0+ fun(V1,W21,X21):7
     [V1>=1,X21=2,W21=0,V=0] 
* CE 279: start(A,A,B,C,D) = 0+ fun(A,A,E):8
     [A>=1,E=0] 
* CE 280: start(V1,V,V11,V21,V19) = 0+ fun(V1,V,W21):9
     [V>=1,V1>=1,W21=1] 
* CE 281: start(V1,V,V11,V21,V19) = 0+ fun(V1,V,W21):10
     [V>=1,V1>=1,W21=2] 
* CE 282: start(V1,V,V11,V21,V19) = 0+ merge(W21,V,V):1
     [V>=0,W21=0,V1=0] 
* CE 283: start(V1,V,V11,V21,V19) = 0+ merge(V1,W21,V1):2
     [V1>=1,W21=0,V=0] 
* CE 284: start(V1,V,V11,V21,V19) = 0+ merge(V1,V,W21):3
     [V>=0,V1>=0,W21=0] 
* CE 285: start(V1,V,V11,V21,V19) = 0+ merge(V1,W21,X21):4
     [X21>=V1+1,V1>=1,X21=V1+W21,X21=V1+V] 
* CE 286: start(V1,V,V11,V21,V19) = 0+ merge(V1,V,W21):5
     [V1+V>=W21+1,W21>=1,V>=1,V1>=1] 
* CE 287: start(V1,V,V11,V21,V19) = 0+ mergesort(V1,W21):1
     [V1>=0,W21=0] 
* CE 288: start(V1,V,V11,V21,V19) = 0+ mergesort(V1,V1):2
     [V1>=1] 
* CE 289: start(V1,V,V11,V21,V19) = 0+ mergesort(V1,W21):3
     [W21>=0,V1>=2] 
* CE 290: start(V1,V,V11,V21,V19) = 0+ msplit(W21,X21):1
     [X21=1,W21=0,V1=0] 
* CE 291: start(V1,V,V11,V21,V19) = 0+ msplit(V1,W21):2
     [V1>=0,W21=0] 
* CE 292: start(V1,V,V11,V21,V19) = 0+ msplit(W21,X21):3
     [X21>=2,X21=W21+1,X21=V1+1] 
* CE 293: start(V1,V,V11,V21,V19) = 0+ fun11(V1,V,V11,W21):1
     [V11>=0,V>=0,V1>=0,W21=0] 
* CE 294: start(V1,V,V11,V21,V19) = 0+ fun11(V1,V,W21,X21):2
     [X21>=V1+V+2,V>=0,V1>=1,X21=V1+V+W21+2,X21=V1+V+V11+2] 
* CE 295: start(V1,V,V11,V21,V19) = 0+ fun1(W21,X21):1
     [X21=1,W21=1,V1=1] 
* CE 296: start(V1,V,V11,V21,V19) = 0+ fun1(W21,X21):2
     [X21=1,W21=2,V1=2] 
* CE 297: start(V1,V,V11,V21,V19) = 0+ fun1(W21,X21):3
     [X21=2,W21=3,V1=3] 
* CE 298: start(V1,V,V11,V21,V19) = 0+ fun1(V1,W21):4
     [V1>=0,W21=0] 
* CE 299: start(V1,V,V11,V21,V19) = 0+ fun2(W21,X21,Y21):1
     [Y21=1,X21=0,W21=0,V=0,V1=0] 
* CE 300: start(V1,V,V11,V21,V19) = 0+ fun2(W21,V,X21):2
     [V>=1,X21=2,W21=0,V1=0] 
* CE 301: start(V1,V,V11,V21,V19) = 0+ fun2(W21,V,X21):3
     [V>=1,X21=3,W21=0,V1=0] 
* CE 302: start(V1,V,V11,V21,V19) = 0+ fun2(V1,W21,X21):4
     [V1>=1,X21=2,W21=0,V=0] 
* CE 303: start(V1,V,V11,V21,V19) = 0+ fun2(V1,W21,X21):5
     [V1>=1,X21=3,W21=0,V=0] 
* CE 304: start(V1,V,V11,V21,V19) = 0+ fun2(V1,V,W21):6
     [V>=0,V1>=0,W21=0] 
* CE 305: start(A,A,B,C,D) = 0+ fun2(A,A,E):7
     [A>=1,E=1] 
* CE 306: start(V1,V,V11,V21,V19) = 0+ fun2(V1,V,W21):8
     [V>=1,V1>=1,W21=2] 
* CE 307: start(V1,V,V11,V21,V19) = 0+ fun2(V1,V,W21):9
     [V>=1,V1>=1,W21=3] 

### Cost equations --> "Loop" of start/5 
* CEs [279,305] --> Loop 79 
* CEs [222,226] --> Loop 80 
* CEs [230,238] --> Loop 81 
* CEs [196,198,199,218,219,220,221,247,248,249,250,251,252,253,276,277,278,283,302,303] --> Loop 82 
* CEs [297] --> Loop 83 
* CEs [134,135,136,137,296] --> Loop 84 
* CEs [138,139,140,141,206,246,254,295] --> Loop 85 
* CEs [142,143,144,145,146,147,148,149,151,152,153,154,155,158,159,160,161,163,164,165,166,167,170,171,172,173,174,175,176,177,179,180,181,182,183,186,187,188,189,190,191,192,193,194,195,197,200,201,202,203,204,205,207,208,209,210,211,212,213,214,215,216,217,223,224,225,227,228,229,231,232,233,234,235,236,237,239,240,241,242,243,244,245,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,280,281,282,284,285,286,287,288,290,291,292,293,294,298,299,300,301,304,306,307] --> Loop 86 
* CEs [150,156,157,178,184,185,289] --> Loop 87 
* CEs [162,168,169] --> Loop 88 

#### Loops of start/5 
* Loop 79: start(A,A,B,C,D) [A>=1] 
* Loop 80: start(V1,V,V11,V21,V19) [V>=1,V1>=1,V11=0] 
* Loop 81: start(V1,V,V11,V21,V19) [V1>=1,V=1] 
* Loop 82: start(V1,V,V11,V21,V19) [V1>=1,V=0] 
* Loop 83: start(V1,V,V11,V21,V19) [V1=3] 
* Loop 84: start(V1,V,V11,V21,V19) [V1=2] 
* Loop 85: start(V1,V,V11,V21,V19) [V1=1] 
* Loop 86: start(V1,V,V11,V21,V19) [V1>=0] 
* Loop 87: start(V1,V,V11,V21,V19) [V1>=2] 
* Loop 88: start(V1,V,V11,V21,V19) [V>=0,V1>=1] 

### Ranking functions of CR start(V1,V,V11,V21,V19) 

#### Partial ranking functions of CR start(V1,V,V11,V21,V19) 


### Resulting Chains:start(V1,V,V11,V21,V19) 
* [88]...
* [87]...
* [86]
* [85]
* [84]
* [83]
* [82]
* [81]
* [80]
* [79]


### Merging Chains  start/5 into  External patterns of execution 
* [[85],[86]] --> 1 
* [[84]] --> 2 
* [[83]] --> 3 
* [[82]] --> 4 
* [[81]] --> 5 
* [[80]] --> 6 
* [[79]] --> 7 
* [[88]] --> 8 
* [[87]] --> 9 


Computing Bounds
=====================================

#### Cost of chains of fun1(V1,Out):
* Chain [36]: 0
  with precondition: [V1=1,Out=1] 

* Chain [35]: 0
  with precondition: [V1=2,Out=1] 

* Chain [34]: 0
  with precondition: [V1=3,Out=2] 

* Chain [33]: 0
  with precondition: [Out=0,V1>=0] 


#### Cost of loops [37,38] 

 * loop 37:fun2(V1,V,Out) -> [fun2(V1',V',Out')] 
0
 * loop 38:fun2(V1,V,Out) -> [fun2(V1',V',Out')] 
0
#### Cost of phase [37,38]:fun2(V1,V,Out) -> [fun2(V1',V',Out')] 
0
#### Cost of phase [37,38]:fun2(V1,V,Out) -> [fun2(V1',V',Out')] 
0
#### Cost of phase [37,38]:fun2(V1,V,Out) -> [fun2(V1',V',Out')] 
0
#### Cost of phase [37,38]:fun2(V1,V,Out) -> [fun2(V1',V',Out')] 
0
#### Cost of phase [37,38]:fun2(V1,V,Out) -> [fun2(V1',V',Out')] 
0
#### Cost of phase [37,38]:fun2(V1,V,Out) -> [fun2(V1',V',Out')] 
0
#### Cost of phase [37,38]:fun2(V1,V,Out) -> [fun2(V1',V',Out')] 
0
#### Cost of phase [37,38]:fun2(V1,V,Out) -> [fun2(V1',V',Out')] 
0
#### Cost of chains of fun2(V1,V,Out):
* Chain [[37,38],46]: 0
  with precondition: [Out=1,V=V1,V>=1] 

* Chain [[37,38],45]: 0
  with precondition: [Out=2,V1>=1,V>=1,V+V1>=3] 

* Chain [[37,38],44]: 0
  with precondition: [Out=3,V1>=1,V>=1,V+V1>=3] 

* Chain [[37,38],43]: 0
  with precondition: [Out=2,V1>=1,V>=1,V+V1>=3] 

* Chain [[37,38],42]: 0
  with precondition: [Out=3,V1>=1,V>=1,V+V1>=3] 

* Chain [[37,38],41]: 0
  with precondition: [Out=0,V1>=1,V>=1] 

* Chain [[37,38],40]: 0
  with precondition: [Out=2,V1>=2,V>=2] 

* Chain [[37,38],39]: 0
  with precondition: [Out=3,V1>=2,V>=2] 

* Chain [46]: 0
  with precondition: [V1=0,V=0,Out=1] 

* Chain [45]: 0
  with precondition: [V1=0,Out=2,V>=1] 

* Chain [44]: 0
  with precondition: [V1=0,Out=3,V>=1] 

* Chain [43]: 0
  with precondition: [V=0,Out=2,V1>=1] 

* Chain [42]: 0
  with precondition: [V=0,Out=3,V1>=1] 

* Chain [41]: 0
  with precondition: [Out=0,V1>=0,V>=0] 

* Chain [40]: 0
  with precondition: [Out=2,V1>=1,V>=1] 

* Chain [39]: 0
  with precondition: [Out=3,V1>=1,V>=1] 


#### Cost of chains of fun(V1,V,Out):
* Chain [57]: 1
  with precondition: [Out=0,V1>=0,V>=0] 

* Chain [56]: 1
  with precondition: [V1=0,V=0,Out=1] 

* Chain [55]: 1
  with precondition: [V1=0,Out=0,V>=1] 

* Chain [54]: 1
  with precondition: [V1=0,Out=1,V>=1] 

* Chain [53]: 1
  with precondition: [V1=0,Out=2,V>=1] 

* Chain [52]: 1
  with precondition: [V=0,Out=0,V1>=1] 

* Chain [51]: 1
  with precondition: [V=0,Out=1,V1>=1] 

* Chain [50]: 1
  with precondition: [V=0,Out=2,V1>=1] 

* Chain [49]: 1
  with precondition: [Out=0,V1=V,V1>=1] 

* Chain [48]: 1
  with precondition: [Out=1,V1>=1,V>=1] 

* Chain [47]: 1
  with precondition: [Out=2,V1>=1,V>=1] 


#### Cost of chains of fun11(V1,V,V11,Out):
* Chain [59]: 0
  with precondition: [Out=0,V1>=0,V>=0,V11>=0] 

* Chain [58]: 1
  with precondition: [V+V1+V11+2=Out,V1>=1,V>=0,V11>=0] 


#### Cost of loops [60] 

 * loop 60:msplit(V1,Out) -> [msplit(V1',Out')] 
4
#### Cost of phase [60]:msplit(V1,Out) -> [msplit(V1',Out')] 
4*it(60)+0
  Such that:it(60) =< V1
it(60) =< V1-V1'

#### Cost of loops [61] 

 * loop 61:msplit(V1,Out) -> [msplit(V1',Out')] 
3
#### Cost of phase [61]:msplit(V1,Out) -> [msplit(V1',Out')] 
3*it(61)+0
  Such that:it(61) =< V1
it(61) =< V1-V1'

#### Cost of phase [60]:msplit(V1,Out) -> [msplit(V1',Out')] 
4*it(60)+0
  Such that:it(60) =< V1
it(60) =< V1-V1'

#### Cost of phase [61]:msplit(V1,Out) -> [msplit(V1',Out')] 
3*it(61)+0
  Such that:it(61) =< V1
it(61) =< V1-V1'

#### Cost of phase [61]:msplit(V1,Out) -> [msplit(V1',Out')] 
3*it(61)+0
  Such that:it(61) =< V1
it(61) =< V1-V1'

#### Cost of phase [61]:msplit(V1,Out) -> [msplit(V1',Out')] 
3*it(61)+0
  Such that:it(61) =< V1
it(61) =< V1-V1'

#### Cost of phase [61]:msplit(V1,Out) -> [msplit(V1',Out')] 
3*it(61)+0
  Such that:it(61) =< V1
it(61) =< V1-V1'

#### Cost of chains of msplit(V1,Out):
* Chain [[61],[60],64]: 4*it(60)+3*it(61)+2
  Such that:it(60) =< V1
aux(16) =< V1+1
it(60) =< aux(16)
it(61) =< aux(16)

  with precondition: [Out=0,V1>=4] 

* Chain [[61],[60],62]: 4*it(60)+3*it(61)+3
  Such that:it(60) =< V1
aux(17) =< V1+1
it(60) =< aux(17)
it(61) =< aux(17)

  with precondition: [Out=0,V1>=5] 

* Chain [[61],64]: 3*it(61)+2
  Such that:it(61) =< V1

  with precondition: [Out=0,V1>=2] 

* Chain [[61],63]: 3*it(61)+2
  Such that:it(61) =< V1

  with precondition: [Out=0,V1>=2] 

* Chain [[61],62]: 3*it(61)+3
  Such that:it(61) =< V1

  with precondition: [Out=0,V1>=3] 

* Chain [[60],64]: 4*it(60)+2
  Such that:it(60) =< Out

  with precondition: [Out=V1+1,Out>=3] 

* Chain [[60],62]: 4*it(60)+3
  Such that:it(60) =< Out

  with precondition: [Out=V1+1,Out>=4] 

* Chain [64]: 2
  with precondition: [V1=0,Out=1] 

* Chain [63]: 2
  with precondition: [Out=0,V1>=0] 

* Chain [62]: 3
  with precondition: [V1+1=Out,V1>=1] 


#### Cost of loops [65,66,67,68] 

 * loop 65:merge(V1,V,Out) -> [merge(V1',V',Out')] 
5
 * loop 66:merge(V1,V,Out) -> [merge(V1',V',Out')] 
5
 * loop 67:merge(V1,V,Out) -> [merge(V1',V',Out')] 
5
 * loop 68:merge(V1,V,Out) -> [merge(V1',V',Out')] 
5
#### Cost of phase [65,66,67,68]:merge(V1,V,Out) -> [merge(V1',V',Out')] 
5*it(65)+5*it(66)+5*it(67)+5*it(68)+0
  Such that:it(68) =< V1
it(68) =< V1-V1'
it(65) =< V1/2
it(65) =< V1/2-V1'/2
it(67) =< V
it(67) =< V-V'
it(66) =< V/2
it(66) =< V/2-V'/2
aux(21) =< V1+V
aux(22) =< V1+V-V1'-V'
aux(23) =< V1+2*V
aux(24) =< V1+2*V-V1'-2*V'
aux(25) =< V1+3*V
aux(26) =< V1+3*V-V1'-3*V'
aux(27) =< V1+3/2*V
aux(28) =< V1+3/2*V-V1'-3/2*V'
aux(29) =< 2*V1+V
aux(30) =< 2*V1+V-2*V1'-V'
aux(31) =< 3*V1+V
aux(32) =< 3*V1+V-3*V1'-V'
aux(33) =< 3/2*V1+V
aux(34) =< 3/2*V1+V-3/2*V1'-V'
it(65) =< aux(21)
it(66) =< aux(21)
it(67) =< aux(21)
it(68) =< aux(21)
it(65) =< aux(22)
it(66) =< aux(22)
it(67) =< aux(22)
it(68) =< aux(22)
it(65) =< aux(23)
it(66) =< aux(23)
it(67) =< aux(23)
it(68) =< aux(23)
it(65) =< aux(24)
it(66) =< aux(24)
it(67) =< aux(24)
it(68) =< aux(24)
it(65) =< aux(25)
it(66) =< aux(25)
it(67) =< aux(25)
it(68) =< aux(25)
it(65) =< aux(26)
it(66) =< aux(26)
it(67) =< aux(26)
it(68) =< aux(26)
it(65) =< aux(27)
it(66) =< aux(27)
it(67) =< aux(27)
it(68) =< aux(27)
it(65) =< aux(28)
it(66) =< aux(28)
it(67) =< aux(28)
it(68) =< aux(28)
it(65) =< aux(29)
it(66) =< aux(29)
it(67) =< aux(29)
it(68) =< aux(29)
it(65) =< aux(30)
it(66) =< aux(30)
it(67) =< aux(30)
it(68) =< aux(30)
it(65) =< aux(31)
it(66) =< aux(31)
it(67) =< aux(31)
it(68) =< aux(31)
it(65) =< aux(32)
it(66) =< aux(32)
it(67) =< aux(32)
it(68) =< aux(32)
it(65) =< aux(33)
it(66) =< aux(33)
it(67) =< aux(33)
it(68) =< aux(33)
it(65) =< aux(34)
it(66) =< aux(34)
it(67) =< aux(34)
it(68) =< aux(34)

#### Cost of phase [65,66,67,68]:merge(V1,V,Out) -> [merge(V1',V',Out')] 
5*it(65)+5*it(66)+5*it(67)+5*it(68)+0
  Such that:it(68) =< V1
it(68) =< V1-V1'
it(65) =< V1/2
it(65) =< V1/2-V1'/2
it(67) =< V
it(67) =< V-V'
it(66) =< V/2
it(66) =< V/2-V'/2
aux(21) =< V1+V
aux(22) =< V1+V-V1'-V'
aux(23) =< V1+2*V
aux(24) =< V1+2*V-V1'-2*V'
aux(25) =< V1+3*V
aux(26) =< V1+3*V-V1'-3*V'
aux(27) =< V1+3/2*V
aux(28) =< V1+3/2*V-V1'-3/2*V'
aux(29) =< 2*V1+V
aux(30) =< 2*V1+V-2*V1'-V'
aux(31) =< 3*V1+V
aux(32) =< 3*V1+V-3*V1'-V'
aux(33) =< 3/2*V1+V
aux(34) =< 3/2*V1+V-3/2*V1'-V'
it(65) =< aux(21)
it(66) =< aux(21)
it(67) =< aux(21)
it(68) =< aux(21)
it(65) =< aux(22)
it(66) =< aux(22)
it(67) =< aux(22)
it(68) =< aux(22)
it(65) =< aux(23)
it(66) =< aux(23)
it(67) =< aux(23)
it(68) =< aux(23)
it(65) =< aux(24)
it(66) =< aux(24)
it(67) =< aux(24)
it(68) =< aux(24)
it(65) =< aux(25)
it(66) =< aux(25)
it(67) =< aux(25)
it(68) =< aux(25)
it(65) =< aux(26)
it(66) =< aux(26)
it(67) =< aux(26)
it(68) =< aux(26)
it(65) =< aux(27)
it(66) =< aux(27)
it(67) =< aux(27)
it(68) =< aux(27)
it(65) =< aux(28)
it(66) =< aux(28)
it(67) =< aux(28)
it(68) =< aux(28)
it(65) =< aux(29)
it(66) =< aux(29)
it(67) =< aux(29)
it(68) =< aux(29)
it(65) =< aux(30)
it(66) =< aux(30)
it(67) =< aux(30)
it(68) =< aux(30)
it(65) =< aux(31)
it(66) =< aux(31)
it(67) =< aux(31)
it(68) =< aux(31)
it(65) =< aux(32)
it(66) =< aux(32)
it(67) =< aux(32)
it(68) =< aux(32)
it(65) =< aux(33)
it(66) =< aux(33)
it(67) =< aux(33)
it(68) =< aux(33)
it(65) =< aux(34)
it(66) =< aux(34)
it(67) =< aux(34)
it(68) =< aux(34)

#### Cost of phase [65,66,67,68]:merge(V1,V,Out) -> [merge(V1',V',Out')] 
5*it(65)+5*it(66)+5*it(67)+5*it(68)+0
  Such that:it(68) =< V1
it(68) =< V1-V1'
it(65) =< V1/2
it(65) =< V1/2-V1'/2
it(67) =< V
it(67) =< V-V'
it(66) =< V/2
it(66) =< V/2-V'/2
aux(21) =< V1+V
aux(22) =< V1+V-V1'-V'
aux(23) =< V1+2*V
aux(24) =< V1+2*V-V1'-2*V'
aux(25) =< V1+3*V
aux(26) =< V1+3*V-V1'-3*V'
aux(27) =< V1+3/2*V
aux(28) =< V1+3/2*V-V1'-3/2*V'
aux(29) =< 2*V1+V
aux(30) =< 2*V1+V-2*V1'-V'
aux(31) =< 3*V1+V
aux(32) =< 3*V1+V-3*V1'-V'
aux(33) =< 3/2*V1+V
aux(34) =< 3/2*V1+V-3/2*V1'-V'
it(65) =< aux(21)
it(66) =< aux(21)
it(67) =< aux(21)
it(68) =< aux(21)
it(65) =< aux(22)
it(66) =< aux(22)
it(67) =< aux(22)
it(68) =< aux(22)
it(65) =< aux(23)
it(66) =< aux(23)
it(67) =< aux(23)
it(68) =< aux(23)
it(65) =< aux(24)
it(66) =< aux(24)
it(67) =< aux(24)
it(68) =< aux(24)
it(65) =< aux(25)
it(66) =< aux(25)
it(67) =< aux(25)
it(68) =< aux(25)
it(65) =< aux(26)
it(66) =< aux(26)
it(67) =< aux(26)
it(68) =< aux(26)
it(65) =< aux(27)
it(66) =< aux(27)
it(67) =< aux(27)
it(68) =< aux(27)
it(65) =< aux(28)
it(66) =< aux(28)
it(67) =< aux(28)
it(68) =< aux(28)
it(65) =< aux(29)
it(66) =< aux(29)
it(67) =< aux(29)
it(68) =< aux(29)
it(65) =< aux(30)
it(66) =< aux(30)
it(67) =< aux(30)
it(68) =< aux(30)
it(65) =< aux(31)
it(66) =< aux(31)
it(67) =< aux(31)
it(68) =< aux(31)
it(65) =< aux(32)
it(66) =< aux(32)
it(67) =< aux(32)
it(68) =< aux(32)
it(65) =< aux(33)
it(66) =< aux(33)
it(67) =< aux(33)
it(68) =< aux(33)
it(65) =< aux(34)
it(66) =< aux(34)
it(67) =< aux(34)
it(68) =< aux(34)

#### Cost of chains of merge(V1,V,Out):
* Chain [[65,66,67,68],71]: 5*it(65)+5*it(66)+5*it(67)+5*it(68)+2
  Such that:it(67) =< -V1+Out
it(68) =< V1
it(66) =< -V1/2+Out/2
it(65) =< V1/2
aux(21) =< Out
aux(35) =< -2*V1+3*Out
aux(36) =< -V1+2*Out
aux(37) =< V1+Out
aux(38) =< 2*V1+Out
aux(39) =< -V1/2+3/2*Out
aux(40) =< V1/2+Out
it(65) =< aux(21)
it(66) =< aux(21)
it(67) =< aux(21)
it(68) =< aux(21)
it(65) =< aux(37)
it(66) =< aux(37)
it(67) =< aux(37)
it(68) =< aux(37)
it(65) =< aux(36)
it(66) =< aux(36)
it(67) =< aux(36)
it(68) =< aux(36)
it(65) =< aux(35)
it(66) =< aux(35)
it(67) =< aux(35)
it(68) =< aux(35)
it(65) =< aux(39)
it(66) =< aux(39)
it(67) =< aux(39)
it(68) =< aux(39)
it(65) =< aux(38)
it(66) =< aux(38)
it(67) =< aux(38)
it(68) =< aux(38)
it(65) =< aux(40)
it(66) =< aux(40)
it(67) =< aux(40)
it(68) =< aux(40)

  with precondition: [V+V1=Out,V1>=1,V>=1,V+V1>=3] 

* Chain [[65,66,67,68],70]: 5*it(65)+5*it(66)+5*it(67)+5*it(68)+3
  Such that:it(67) =< -V1+Out
it(68) =< V1
it(66) =< -V1/2+Out/2
it(65) =< V1/2
aux(41) =< -2*V1+3*Out
aux(42) =< -V1+2*Out
aux(43) =< V1+Out
aux(44) =< 2*V1+Out
aux(45) =< -V1/2+3/2*Out
aux(46) =< V1/2+Out
aux(47) =< Out
it(65) =< aux(47)
it(66) =< aux(47)
it(67) =< aux(47)
it(68) =< aux(47)
it(65) =< aux(42)
it(66) =< aux(42)
it(67) =< aux(42)
it(68) =< aux(42)
it(65) =< aux(41)
it(66) =< aux(41)
it(67) =< aux(41)
it(68) =< aux(41)
it(65) =< aux(45)
it(66) =< aux(45)
it(67) =< aux(45)
it(68) =< aux(45)
it(65) =< aux(43)
it(66) =< aux(43)
it(67) =< aux(43)
it(68) =< aux(43)
it(65) =< aux(44)
it(66) =< aux(44)
it(67) =< aux(44)
it(68) =< aux(44)
it(65) =< aux(46)
it(66) =< aux(46)
it(67) =< aux(46)
it(68) =< aux(46)

  with precondition: [V+V1=Out,V1>=1,V>=1] 

* Chain [[65,66,67,68],69]: 10*it(65)+10*it(67)+4
  Such that:aux(21) =< V1+V
aux(23) =< V1+2*V
aux(25) =< V1+3*V
aux(27) =< V1+3/2*V
aux(29) =< 2*V1+V
aux(31) =< 3*V1+V
aux(33) =< 3/2*V1+V
aux(28) =< 5/2*Out
aux(48) =< Out
aux(49) =< 3*Out
aux(50) =< 4*Out
aux(51) =< 5*Out
aux(52) =< 7*Out
aux(53) =< Out/2
it(65) =< aux(48)
it(67) =< aux(48)
aux(24) =< aux(49)
aux(28) =< aux(49)
it(65) =< aux(49)
it(67) =< aux(49)
aux(24) =< aux(50)
aux(26) =< aux(50)
aux(28) =< aux(50)
aux(24) =< aux(51)
aux(26) =< aux(52)
aux(28) =< aux(52)
it(65) =< aux(53)
it(65) =< aux(21)
it(67) =< aux(21)
it(65) =< aux(23)
it(67) =< aux(23)
it(65) =< aux(24)
it(67) =< aux(24)
it(65) =< aux(25)
it(67) =< aux(25)
it(65) =< aux(26)
it(67) =< aux(26)
it(65) =< aux(27)
it(67) =< aux(27)
it(65) =< aux(28)
it(67) =< aux(28)
it(65) =< aux(29)
it(67) =< aux(29)
it(65) =< aux(51)
it(67) =< aux(51)
it(65) =< aux(31)
it(67) =< aux(31)
it(65) =< aux(50)
it(67) =< aux(50)
it(65) =< aux(33)
it(67) =< aux(33)

  with precondition: [V1>=1,V>=1,Out>=1,V+V1>=Out+1] 

* Chain [71]: 2
  with precondition: [V1=0,V=Out,V>=0] 

* Chain [70]: 3
  with precondition: [V=0,V1=Out,V1>=1] 

* Chain [69]: 4
  with precondition: [Out=0,V1>=0,V>=0] 


#### Cost of loops [72,73,74,75,76] 

 * loop 72:mergesort(V1,Out) -> [mergesort(V1',Out'),mergesort(V1'2,Out'2)] 
8*s(62)+10*s(63)+10*s(64)+11
  Such that:s(61) =< V1+1
s(62) =< s(61)

 * loop 73:mergesort(V1,Out) -> [mergesort(V1',Out'),mergesort(V1'2,Out'2)] 
8*s(83)+10*s(84)+10*s(85)+10*s(86)+10*s(87)+10
  Such that:s(82) =< V1+1
s(83) =< s(82)

 * loop 74:mergesort(V1,Out) -> [mergesort(V1',Out'),mergesort(V1'2,Out'2)] 
8*s(91)+10
  Such that:s(90) =< V1'+V1'2+1
s(91) =< s(90)

 * loop 75:mergesort(V1,Out) -> [mergesort(V1',Out'),mergesort(V1'2,Out'2)] 
8*s(95)+9
  Such that:s(94) =< V1'+V1'2+1
s(95) =< s(94)

 * loop 76:mergesort(V1,Out) -> [mergesort(V1',Out'),mergesort(V1'2,Out'2)] 
8*s(99)+11
  Such that:s(98) =< V1'+V1'2+1
s(99) =< s(98)

#### Cost of phase [72,73,74,75,76]:mergesort(V1,Out) -> [] 
63*it(72)+6*it([78])+8*s(100)+60*s(101)+32*s(104)+8*s(117)+14*s(118)+0
  Such that:aux(71) =< 1
aux(74) =< V1
aux(75) =< V1+1
it(72) =< aux(74)
aux(67) =< aux(75)
s(119) =< it(72)+it(72)+it(72)+it(72)+it(72)+aux(75)
it([78]) =< it(72)+it(72)+it(72)+it(72)+it(72)+aux(71)
s(103) =< it(72)*aux(75)
s(119) =< it([78])*aux(67)
s(109) =< it(72)*aux(67)
s(117) =< aux(74)
s(117) =< s(119)
s(118) =< s(119)
s(104) =< s(109)
s(100) =< s(103)

#### Cost of chains of mergesort(V1,Out):
* Chain [multiple([72,73,74,75,76],[[],[78],[77]])]...: 63*it(72)+6*it([78])+8*s(100)+60*s(101)+32*s(104)+8*s(117)+14*s(118)+0
  Such that:aux(71) =< 1
aux(74) =< V1
aux(75) =< V1+1
it(72) =< aux(74)
aux(67) =< aux(75)
s(119) =< it(72)+it(72)+it(72)+it(72)+it(72)+aux(75)
it([78]) =< it(72)+it(72)+it(72)+it(72)+it(72)+aux(71)
s(103) =< it(72)*aux(75)
s(119) =< it([78])*aux(67)
s(109) =< it(72)*aux(67)
s(117) =< aux(74)
s(117) =< s(119)
s(118) =< s(119)
s(104) =< s(109)
s(100) =< s(103)

  with precondition: [V1>=2,Out>=0] 

* Chain [78]: 9*s(36)+8*s(37)+14*s(38)+6
  Such that:s(34) =< V1
aux(65) =< V1+1
s(36) =< s(34)
s(37) =< s(34)
s(37) =< aux(65)
s(38) =< aux(65)

  with precondition: [Out=0,V1>=0] 

* Chain [77]: 3
  with precondition: [V1=Out,V1>=1] 


#### Cost of chains of start(V1,V,V11,V21,V19):
* Chain [88]...: 101*s(122)+72*s(125)+8*s(126)+6*s(134)+8*s(137)+14*s(138)+32*s(139)+8*s(140)+180*s(141)+63*s(147)+6*s(150)+8*s(153)+14*s(154)+32*s(155)+8*s(156)+6*s(166)+8*s(169)+14*s(170)+32*s(171)+8*s(172)+11
  Such that:s(145) =< V1+V
aux(78) =< 1
aux(79) =< V1+V+1
aux(80) =< V1+V+2
s(122) =< aux(80)
s(132) =< aux(80)
s(133) =< s(122)+s(122)+s(122)+s(122)+s(122)+aux(80)
s(134) =< s(122)+s(122)+s(122)+s(122)+s(122)+aux(78)
s(135) =< s(122)*aux(80)
s(133) =< s(134)*s(132)
s(136) =< s(122)*s(132)
s(137) =< aux(80)
s(137) =< s(133)
s(138) =< s(133)
s(139) =< s(136)
s(140) =< s(135)
s(125) =< aux(79)
s(126) =< aux(79)
s(126) =< aux(80)
s(147) =< s(145)
s(148) =< aux(79)
s(149) =< s(147)+s(147)+s(147)+s(147)+s(147)+aux(79)
s(150) =< s(147)+s(147)+s(147)+s(147)+s(147)+aux(78)
s(151) =< s(147)*aux(79)
s(149) =< s(150)*s(148)
s(152) =< s(147)*s(148)
s(153) =< s(145)
s(153) =< s(149)
s(154) =< s(149)
s(155) =< s(152)
s(156) =< s(151)
s(165) =< s(125)+s(125)+s(125)+s(125)+s(125)+aux(80)
s(166) =< s(125)+s(125)+s(125)+s(125)+s(125)+aux(78)
s(167) =< s(125)*aux(80)
s(165) =< s(166)*s(132)
s(168) =< s(125)*s(132)
s(169) =< aux(79)
s(169) =< s(165)
s(170) =< s(165)
s(171) =< s(168)
s(172) =< s(167)

  with precondition: [V1>=1,V>=0] 

* Chain [87]...: 33*s(175)+8*s(179)+14*s(180)+472*s(184)+42*s(187)+24*s(190)+42*s(191)+96*s(192)+24*s(193)+420*s(194)+32*s(206)+56*s(207)+128*s(208)+32*s(209)+12
  Such that:s(177) =< V1+2
aux(87) =< 1
aux(88) =< V1
aux(89) =< V1+1
s(184) =< aux(88)
s(185) =< aux(89)
s(186) =< s(184)+s(184)+s(184)+s(184)+s(184)+aux(89)
s(187) =< s(184)+s(184)+s(184)+s(184)+s(184)+aux(87)
s(188) =< s(184)*aux(89)
s(186) =< s(187)*s(185)
s(189) =< s(184)*s(185)
s(190) =< aux(88)
s(190) =< s(186)
s(191) =< s(186)
s(192) =< s(189)
s(193) =< s(188)
s(175) =< aux(89)
s(179) =< aux(89)
s(179) =< s(177)
s(180) =< s(177)
s(201) =< aux(88)
s(202) =< s(184)+s(184)+s(184)+s(184)+s(184)+aux(88)
s(204) =< s(184)*aux(88)
s(202) =< s(187)*s(201)
s(205) =< s(184)*s(201)
s(206) =< aux(88)
s(206) =< s(202)
s(207) =< s(202)
s(208) =< s(205)
s(209) =< s(204)

  with precondition: [V1>=2] 

* Chain [86]: 204*s(289)+495*s(292)+40*s(293)+10*s(355)+20*s(356)+10*s(357)+20*s(375)+20*s(376)+176*s(380)+83*s(383)+24*s(384)+36*s(407)+32*s(408)+10*s(446)+20*s(447)+10*s(448)+10*s(466)+10*s(467)+10*s(535)+10*s(536)+10*s(537)+10*s(538)+80*s(568)+80*s(569)+80*s(570)+80*s(571)+80*s(586)+80*s(587)+20*s(667)+20*s(668)+20*s(669)+20*s(670)+20*s(685)+20*s(686)+10*s(865)+10*s(866)+10*s(867)+10*s(868)+10*s(883)+10*s(884)+10*s(898)+10*s(899)+10*s(900)+10*s(901)+10*s(916)+10*s(917)+22
  Such that:aux(111) =< 2*V1+2*V+2
s(441) =< V1/2+V/2+1/2
s(455) =< 3/2*V1+3/2*V+1
aux(115) =< 3/2*V1+3/2*V+3/2
aux(152) =< V1
aux(153) =< V1+1
aux(154) =< V1+V
aux(155) =< V1+V+1
aux(156) =< V1+V+2
aux(157) =< V1+V+V11
aux(158) =< V1+2*V
aux(159) =< V1+2*V+2*V11
aux(160) =< V1+2*V+2*V11+1
aux(161) =< V1+3*V
aux(162) =< V1+3*V+3*V11+1
aux(163) =< V1+3*V+3*V11+2
aux(164) =< V1+3/2*V
aux(165) =< V1+3/2*V+3/2*V11
aux(166) =< V1+3/2*V+3/2*V11+1/2
aux(167) =< V1+V11
aux(168) =< V1+2*V11
aux(169) =< V1+3*V11
aux(170) =< V1+3/2*V11
aux(171) =< 2*V1
aux(172) =< 2*V1+V
aux(173) =< 2*V1+V+V11
aux(174) =< 2*V1+V11
aux(175) =< 3*V1
aux(176) =< 3*V1+V
aux(177) =< 3*V1+V+V11
aux(178) =< 3*V1+3*V
aux(179) =< 3*V1+3*V+3
aux(180) =< 3*V1+3*V+3*V11
aux(181) =< 3*V1+V11
aux(182) =< 3*V1+3*V11
aux(183) =< 4*V1
aux(184) =< 4*V1+4*V
aux(185) =< 4*V1+4*V+4
aux(186) =< 4*V1+4*V+4*V11
aux(187) =< 4*V1+4*V11
aux(188) =< 5*V1
aux(189) =< 5*V1+5*V
aux(190) =< 5*V1+5*V+5
aux(191) =< 5*V1+5*V+5*V11
aux(192) =< 5*V1+5*V11
aux(193) =< 7*V1
aux(194) =< 7*V1+7*V
aux(195) =< 7*V1+7*V+7
aux(196) =< 7*V1+7*V+7*V11
aux(197) =< 7*V1+7*V11
aux(198) =< V1/2
aux(199) =< V1/2+V/2
aux(200) =< V1/2+V/2+V11/2
aux(201) =< V1/2+V11/2
aux(202) =< 3/2*V1
aux(203) =< 3/2*V1+V
aux(204) =< 3/2*V1+V+V11
aux(205) =< 3/2*V1+V11
aux(206) =< 5/2*V1
aux(207) =< 5/2*V1+5/2*V
aux(208) =< 5/2*V1+5/2*V+5/2
aux(209) =< 5/2*V1+5/2*V+5/2*V11
aux(210) =< 5/2*V1+5/2*V11
aux(211) =< V
aux(212) =< V+V11+1
aux(213) =< V/2
aux(214) =< V/2+V11/2+1/2
aux(215) =< V11
aux(216) =< V11/2
s(453) =< aux(179)
s(346) =< aux(188)
s(350) =< aux(198)
s(351) =< aux(206)
s(531) =< aux(206)
s(459) =< aux(207)
s(442) =< aux(208)
s(876) =< aux(209)
s(678) =< aux(210)
s(292) =< aux(152)
s(289) =< aux(153)
s(293) =< aux(152)
s(293) =< aux(153)
s(568) =< aux(211)
s(569) =< aux(152)
s(570) =< aux(213)
s(571) =< aux(198)
s(571) =< aux(154)
s(570) =< aux(154)
s(568) =< aux(154)
s(569) =< aux(154)
s(571) =< aux(158)
s(570) =< aux(158)
s(568) =< aux(158)
s(569) =< aux(158)
s(571) =< aux(161)
s(570) =< aux(161)
s(568) =< aux(161)
s(569) =< aux(161)
s(571) =< aux(164)
s(570) =< aux(164)
s(568) =< aux(164)
s(569) =< aux(164)
s(571) =< aux(172)
s(570) =< aux(172)
s(568) =< aux(172)
s(569) =< aux(172)
s(571) =< aux(176)
s(570) =< aux(176)
s(568) =< aux(176)
s(569) =< aux(176)
s(571) =< aux(203)
s(570) =< aux(203)
s(568) =< aux(203)
s(569) =< aux(203)
s(667) =< aux(152)
s(668) =< aux(215)
s(669) =< aux(198)
s(670) =< aux(216)
s(670) =< aux(167)
s(669) =< aux(167)
s(667) =< aux(167)
s(668) =< aux(167)
s(670) =< aux(174)
s(669) =< aux(174)
s(667) =< aux(174)
s(668) =< aux(174)
s(670) =< aux(181)
s(669) =< aux(181)
s(667) =< aux(181)
s(668) =< aux(181)
s(670) =< aux(205)
s(669) =< aux(205)
s(667) =< aux(205)
s(668) =< aux(205)
s(670) =< aux(168)
s(669) =< aux(168)
s(667) =< aux(168)
s(668) =< aux(168)
s(670) =< aux(169)
s(669) =< aux(169)
s(667) =< aux(169)
s(668) =< aux(169)
s(670) =< aux(170)
s(669) =< aux(170)
s(667) =< aux(170)
s(668) =< aux(170)
s(865) =< aux(152)
s(866) =< aux(212)
s(867) =< aux(198)
s(868) =< aux(214)
s(868) =< aux(157)
s(867) =< aux(157)
s(865) =< aux(157)
s(866) =< aux(157)
s(868) =< aux(173)
s(867) =< aux(173)
s(865) =< aux(173)
s(866) =< aux(173)
s(868) =< aux(177)
s(867) =< aux(177)
s(865) =< aux(177)
s(866) =< aux(177)
s(868) =< aux(204)
s(867) =< aux(204)
s(865) =< aux(204)
s(866) =< aux(204)
s(868) =< aux(160)
s(867) =< aux(160)
s(865) =< aux(160)
s(866) =< aux(160)
s(868) =< aux(163)
s(867) =< aux(163)
s(865) =< aux(163)
s(866) =< aux(163)
s(868) =< aux(166)
s(867) =< aux(166)
s(865) =< aux(166)
s(866) =< aux(166)
s(898) =< aux(152)
s(899) =< aux(212)
s(900) =< aux(198)
s(901) =< aux(214)
s(901) =< aux(157)
s(900) =< aux(157)
s(898) =< aux(157)
s(899) =< aux(157)
s(901) =< aux(173)
s(900) =< aux(173)
s(898) =< aux(173)
s(899) =< aux(173)
s(901) =< aux(177)
s(900) =< aux(177)
s(898) =< aux(177)
s(899) =< aux(177)
s(901) =< aux(204)
s(900) =< aux(204)
s(898) =< aux(204)
s(899) =< aux(204)
s(901) =< aux(159)
s(900) =< aux(159)
s(898) =< aux(159)
s(899) =< aux(159)
s(901) =< aux(162)
s(900) =< aux(162)
s(898) =< aux(162)
s(899) =< aux(162)
s(901) =< aux(165)
s(900) =< aux(165)
s(898) =< aux(165)
s(899) =< aux(165)
s(345) =< aux(152)
s(345) =< aux(171)
s(346) =< aux(171)
s(350) =< aux(171)
s(345) =< aux(175)
s(346) =< aux(175)
s(344) =< aux(183)
s(351) =< aux(183)
s(344) =< aux(188)
s(350) =< aux(202)
s(351) =< aux(202)
s(355) =< s(345)
s(356) =< aux(171)
s(357) =< s(350)
s(356) =< aux(152)
s(357) =< aux(152)
s(355) =< aux(152)
s(356) =< s(346)
s(357) =< s(346)
s(355) =< s(346)
s(356) =< s(344)
s(357) =< s(344)
s(355) =< s(344)
s(356) =< s(351)
s(357) =< s(351)
s(355) =< s(351)
s(356) =< aux(183)
s(357) =< aux(183)
s(355) =< aux(183)
s(356) =< aux(188)
s(357) =< aux(188)
s(355) =< aux(188)
s(362) =< aux(175)
s(362) =< aux(183)
s(363) =< aux(183)
s(364) =< aux(183)
s(362) =< aux(188)
s(363) =< aux(193)
s(364) =< aux(193)
s(364) =< aux(206)
s(368) =< aux(206)
s(375) =< aux(152)
s(376) =< aux(152)
s(368) =< aux(175)
s(375) =< aux(175)
s(376) =< aux(175)
s(368) =< aux(183)
s(368) =< aux(193)
s(375) =< aux(198)
s(375) =< s(362)
s(376) =< s(362)
s(375) =< s(363)
s(376) =< s(363)
s(375) =< s(364)
s(376) =< s(364)
s(375) =< s(368)
s(376) =< s(368)
s(375) =< aux(188)
s(376) =< aux(188)
s(375) =< aux(183)
s(376) =< aux(183)
s(407) =< aux(154)
s(408) =< aux(154)
s(408) =< aux(155)
s(383) =< aux(155)
s(380) =< aux(156)
s(435) =< aux(185)
s(455) =< aux(185)
s(453) =< aux(190)
s(435) =< aux(190)
s(455) =< aux(195)
s(455) =< aux(208)
s(466) =< aux(154)
s(467) =< aux(154)
s(468) =< aux(178)
s(459) =< aux(178)
s(466) =< aux(178)
s(467) =< aux(178)
s(468) =< aux(184)
s(469) =< aux(184)
s(459) =< aux(184)
s(468) =< aux(189)
s(469) =< aux(194)
s(459) =< aux(194)
s(466) =< aux(199)
s(466) =< aux(155)
s(467) =< aux(155)
s(466) =< s(453)
s(467) =< s(453)
s(466) =< s(468)
s(467) =< s(468)
s(466) =< s(435)
s(467) =< s(435)
s(466) =< s(469)
s(467) =< s(469)
s(466) =< s(455)
s(467) =< s(455)
s(466) =< s(459)
s(467) =< s(459)
s(466) =< aux(185)
s(467) =< aux(185)
s(466) =< aux(189)
s(467) =< aux(189)
s(466) =< aux(195)
s(467) =< aux(195)
s(466) =< aux(184)
s(467) =< aux(184)
s(466) =< aux(208)
s(467) =< aux(208)
s(384) =< aux(155)
s(384) =< aux(156)
s(436) =< aux(155)
s(436) =< aux(111)
s(437) =< aux(111)
s(441) =< aux(111)
s(436) =< aux(179)
s(437) =< aux(179)
s(442) =< aux(185)
s(437) =< aux(190)
s(441) =< aux(115)
s(442) =< aux(115)
s(446) =< s(436)
s(447) =< aux(111)
s(448) =< s(441)
s(447) =< aux(155)
s(448) =< aux(155)
s(446) =< aux(155)
s(447) =< s(437)
s(448) =< s(437)
s(446) =< s(437)
s(447) =< s(435)
s(448) =< s(435)
s(446) =< s(435)
s(447) =< s(442)
s(448) =< s(442)
s(446) =< s(442)
s(447) =< aux(185)
s(448) =< aux(185)
s(446) =< aux(185)
s(447) =< aux(195)
s(448) =< aux(195)
s(446) =< aux(195)
s(586) =< aux(154)
s(587) =< aux(154)
s(586) =< aux(178)
s(587) =< aux(178)
s(586) =< aux(199)
s(586) =< aux(158)
s(587) =< aux(158)
s(586) =< s(468)
s(587) =< s(468)
s(586) =< aux(161)
s(587) =< aux(161)
s(586) =< s(469)
s(587) =< s(469)
s(586) =< aux(164)
s(587) =< aux(164)
s(586) =< s(459)
s(587) =< s(459)
s(586) =< aux(172)
s(587) =< aux(172)
s(586) =< aux(189)
s(587) =< aux(189)
s(586) =< aux(176)
s(587) =< aux(176)
s(586) =< aux(184)
s(587) =< aux(184)
s(586) =< aux(203)
s(587) =< aux(203)
s(916) =< aux(157)
s(917) =< aux(157)
s(885) =< aux(180)
s(876) =< aux(180)
s(916) =< aux(180)
s(917) =< aux(180)
s(885) =< aux(186)
s(886) =< aux(186)
s(876) =< aux(186)
s(885) =< aux(191)
s(886) =< aux(196)
s(876) =< aux(196)
s(916) =< aux(200)
s(916) =< aux(173)
s(917) =< aux(173)
s(916) =< s(885)
s(917) =< s(885)
s(916) =< aux(177)
s(917) =< aux(177)
s(916) =< s(886)
s(917) =< s(886)
s(916) =< aux(204)
s(917) =< aux(204)
s(916) =< s(876)
s(917) =< s(876)
s(916) =< aux(159)
s(917) =< aux(159)
s(916) =< aux(191)
s(917) =< aux(191)
s(916) =< aux(162)
s(917) =< aux(162)
s(916) =< aux(186)
s(917) =< aux(186)
s(916) =< aux(165)
s(917) =< aux(165)
s(883) =< aux(157)
s(884) =< aux(157)
s(883) =< aux(180)
s(884) =< aux(180)
s(883) =< aux(200)
s(883) =< aux(173)
s(884) =< aux(173)
s(883) =< s(885)
s(884) =< s(885)
s(883) =< aux(177)
s(884) =< aux(177)
s(883) =< s(886)
s(884) =< s(886)
s(883) =< aux(204)
s(884) =< aux(204)
s(883) =< s(876)
s(884) =< s(876)
s(883) =< aux(160)
s(884) =< aux(160)
s(883) =< aux(191)
s(884) =< aux(191)
s(883) =< aux(163)
s(884) =< aux(163)
s(883) =< aux(186)
s(884) =< aux(186)
s(883) =< aux(166)
s(884) =< aux(166)
s(685) =< aux(167)
s(686) =< aux(167)
s(687) =< aux(182)
s(678) =< aux(182)
s(685) =< aux(182)
s(686) =< aux(182)
s(687) =< aux(187)
s(688) =< aux(187)
s(678) =< aux(187)
s(687) =< aux(192)
s(688) =< aux(197)
s(678) =< aux(197)
s(685) =< aux(201)
s(685) =< aux(174)
s(686) =< aux(174)
s(685) =< s(687)
s(686) =< s(687)
s(685) =< aux(181)
s(686) =< aux(181)
s(685) =< s(688)
s(686) =< s(688)
s(685) =< aux(205)
s(686) =< aux(205)
s(685) =< s(678)
s(686) =< s(678)
s(685) =< aux(168)
s(686) =< aux(168)
s(685) =< aux(192)
s(686) =< aux(192)
s(685) =< aux(169)
s(686) =< aux(169)
s(685) =< aux(187)
s(686) =< aux(187)
s(685) =< aux(170)
s(686) =< aux(170)
s(530) =< aux(175)
s(531) =< aux(193)
s(530) =< aux(198)
s(530) =< aux(202)
s(531) =< aux(202)
s(535) =< s(345)
s(536) =< aux(152)
s(537) =< s(530)
s(538) =< aux(198)
s(538) =< aux(152)
s(537) =< aux(152)
s(535) =< aux(152)
s(538) =< s(346)
s(537) =< s(346)
s(535) =< s(346)
s(536) =< s(346)
s(538) =< aux(183)
s(537) =< aux(183)
s(535) =< aux(183)
s(536) =< aux(183)
s(538) =< s(531)
s(537) =< s(531)
s(535) =< s(531)
s(536) =< s(531)
s(538) =< aux(171)
s(537) =< aux(171)
s(535) =< aux(171)
s(536) =< aux(171)
s(538) =< aux(193)
s(537) =< aux(193)
s(535) =< aux(193)
s(536) =< aux(193)
s(538) =< aux(202)
s(537) =< aux(202)
s(535) =< aux(202)
s(536) =< aux(202)

  with precondition: [V1>=0] 

* Chain [85]: 10*s(994)+10*s(995)+10*s(996)+10*s(997)+10*s(1012)+10*s(1013)+6
  Such that:s(986) =< V+V11+1
s(1006) =< V+V11+V19
s(1007) =< 3*V+3*V11+3*V19
s(1008) =< 4*V+4*V11+4*V19
s(1009) =< 5*V+5*V11+5*V19
s(1010) =< 7*V+7*V11+7*V19
s(991) =< V/2+V11/2+1/2
s(1011) =< V/2+V11/2+V19/2
s(1005) =< 5/2*V+5/2*V11+5/2*V19
s(984) =< V19
s(989) =< V19/2
aux(217) =< V+V11+V19+1
aux(218) =< V+V11+2*V19+1
aux(219) =< V+V11+3*V19+1
aux(220) =< V+V11+3/2*V19+1
aux(221) =< 2*V+2*V11+V19+2
aux(222) =< 3*V+3*V11+V19+3
aux(223) =< 3/2*V+3/2*V11+V19+3/2
s(994) =< s(984)
s(995) =< s(986)
s(996) =< s(989)
s(997) =< s(991)
s(997) =< aux(217)
s(996) =< aux(217)
s(994) =< aux(217)
s(995) =< aux(217)
s(997) =< aux(218)
s(996) =< aux(218)
s(994) =< aux(218)
s(995) =< aux(218)
s(997) =< aux(219)
s(996) =< aux(219)
s(994) =< aux(219)
s(995) =< aux(219)
s(997) =< aux(220)
s(996) =< aux(220)
s(994) =< aux(220)
s(995) =< aux(220)
s(997) =< aux(221)
s(996) =< aux(221)
s(994) =< aux(221)
s(995) =< aux(221)
s(997) =< aux(222)
s(996) =< aux(222)
s(994) =< aux(222)
s(995) =< aux(222)
s(997) =< aux(223)
s(996) =< aux(223)
s(994) =< aux(223)
s(995) =< aux(223)
s(1012) =< s(1006)
s(1013) =< s(1006)
s(1014) =< s(1007)
s(1005) =< s(1007)
s(1012) =< s(1007)
s(1013) =< s(1007)
s(1014) =< s(1008)
s(1015) =< s(1008)
s(1005) =< s(1008)
s(1014) =< s(1009)
s(1015) =< s(1010)
s(1005) =< s(1010)
s(1012) =< s(1011)
s(1012) =< aux(217)
s(1013) =< aux(217)
s(1012) =< aux(218)
s(1013) =< aux(218)
s(1012) =< s(1014)
s(1013) =< s(1014)
s(1012) =< aux(219)
s(1013) =< aux(219)
s(1012) =< s(1015)
s(1013) =< s(1015)
s(1012) =< aux(220)
s(1013) =< aux(220)
s(1012) =< s(1005)
s(1013) =< s(1005)
s(1012) =< aux(221)
s(1013) =< aux(221)
s(1012) =< s(1009)
s(1013) =< s(1009)
s(1012) =< aux(222)
s(1013) =< aux(222)
s(1012) =< s(1008)
s(1013) =< s(1008)
s(1012) =< aux(223)
s(1013) =< aux(223)

  with precondition: [V1=1] 

* Chain [84]: 10*s(1027)+10*s(1028)+10*s(1029)+10*s(1030)+10*s(1045)+10*s(1046)+5
  Such that:s(1019) =< V11
s(1039) =< V11+V21+V19
s(1040) =< 3*V11+3*V21+3*V19
s(1041) =< 4*V11+4*V21+4*V19
s(1042) =< 5*V11+5*V21+5*V19
s(1043) =< 7*V11+7*V21+7*V19
s(1024) =< V11/2
s(1044) =< V11/2+V21/2+V19/2
s(1038) =< 5/2*V11+5/2*V21+5/2*V19
s(1017) =< V21+V19+1
s(1022) =< V21/2+V19/2+1/2
aux(224) =< V11+V21+V19+1
aux(225) =< V11+2*V21+2*V19+2
aux(226) =< V11+3*V21+3*V19+3
aux(227) =< V11+3/2*V21+3/2*V19+3/2
aux(228) =< 2*V11+V21+V19+1
aux(229) =< 3*V11+V21+V19+1
aux(230) =< 3/2*V11+V21+V19+1
s(1027) =< s(1017)
s(1028) =< s(1019)
s(1029) =< s(1022)
s(1030) =< s(1024)
s(1030) =< aux(224)
s(1029) =< aux(224)
s(1027) =< aux(224)
s(1028) =< aux(224)
s(1030) =< aux(225)
s(1029) =< aux(225)
s(1027) =< aux(225)
s(1028) =< aux(225)
s(1030) =< aux(226)
s(1029) =< aux(226)
s(1027) =< aux(226)
s(1028) =< aux(226)
s(1030) =< aux(227)
s(1029) =< aux(227)
s(1027) =< aux(227)
s(1028) =< aux(227)
s(1030) =< aux(228)
s(1029) =< aux(228)
s(1027) =< aux(228)
s(1028) =< aux(228)
s(1030) =< aux(229)
s(1029) =< aux(229)
s(1027) =< aux(229)
s(1028) =< aux(229)
s(1030) =< aux(230)
s(1029) =< aux(230)
s(1027) =< aux(230)
s(1028) =< aux(230)
s(1045) =< s(1039)
s(1046) =< s(1039)
s(1047) =< s(1040)
s(1038) =< s(1040)
s(1045) =< s(1040)
s(1046) =< s(1040)
s(1047) =< s(1041)
s(1048) =< s(1041)
s(1038) =< s(1041)
s(1047) =< s(1042)
s(1048) =< s(1043)
s(1038) =< s(1043)
s(1045) =< s(1044)
s(1045) =< aux(224)
s(1046) =< aux(224)
s(1045) =< aux(225)
s(1046) =< aux(225)
s(1045) =< s(1047)
s(1046) =< s(1047)
s(1045) =< aux(226)
s(1046) =< aux(226)
s(1045) =< s(1048)
s(1046) =< s(1048)
s(1045) =< aux(227)
s(1046) =< aux(227)
s(1045) =< s(1038)
s(1046) =< s(1038)
s(1045) =< aux(228)
s(1046) =< aux(228)
s(1045) =< s(1042)
s(1046) =< s(1042)
s(1045) =< aux(229)
s(1046) =< aux(229)
s(1045) =< s(1041)
s(1046) =< s(1041)
s(1045) =< aux(230)
s(1046) =< aux(230)

  with precondition: [V1=2] 

* Chain [83]: 0
  with precondition: [V1=3] 

* Chain [82]: 10*s(1060)+10*s(1061)+10*s(1062)+10*s(1063)+10*s(1078)+10*s(1079)+10*s(1093)+10*s(1094)+10*s(1095)+10*s(1096)+10*s(1111)+10*s(1112)+10*s(1126)+10*s(1127)+10*s(1128)+10*s(1129)+10*s(1144)+10*s(1145)+7
  Such that:s(1052) =< V11
s(1057) =< V11/2
aux(234) =< V1
aux(235) =< V1+V11
aux(236) =< V1+2*V11
aux(237) =< V1+2*V11+1
aux(238) =< V1+3*V11
aux(239) =< V1+3*V11+1
aux(240) =< V1+3*V11+2
aux(241) =< V1+3/2*V11
aux(242) =< V1+3/2*V11+1/2
aux(243) =< 2*V1+V11
aux(244) =< 3*V1+V11
aux(245) =< 3*V1+3*V11
aux(246) =< 4*V1+4*V11
aux(247) =< 5*V1+5*V11
aux(248) =< 7*V1+7*V11
aux(249) =< V1/2
aux(250) =< V1/2+V11/2
aux(251) =< 3/2*V1+V11
aux(252) =< 5/2*V1+5/2*V11
aux(253) =< V11+1
aux(254) =< V11/2+1/2
s(1071) =< aux(252)
s(1060) =< aux(234)
s(1061) =< s(1052)
s(1062) =< aux(249)
s(1063) =< s(1057)
s(1063) =< aux(235)
s(1062) =< aux(235)
s(1060) =< aux(235)
s(1061) =< aux(235)
s(1063) =< aux(243)
s(1062) =< aux(243)
s(1060) =< aux(243)
s(1061) =< aux(243)
s(1063) =< aux(244)
s(1062) =< aux(244)
s(1060) =< aux(244)
s(1061) =< aux(244)
s(1063) =< aux(251)
s(1062) =< aux(251)
s(1060) =< aux(251)
s(1061) =< aux(251)
s(1063) =< aux(236)
s(1062) =< aux(236)
s(1060) =< aux(236)
s(1061) =< aux(236)
s(1063) =< aux(238)
s(1062) =< aux(238)
s(1060) =< aux(238)
s(1061) =< aux(238)
s(1063) =< aux(241)
s(1062) =< aux(241)
s(1060) =< aux(241)
s(1061) =< aux(241)
s(1093) =< aux(234)
s(1094) =< aux(253)
s(1095) =< aux(249)
s(1096) =< aux(254)
s(1096) =< aux(235)
s(1095) =< aux(235)
s(1093) =< aux(235)
s(1094) =< aux(235)
s(1096) =< aux(243)
s(1095) =< aux(243)
s(1093) =< aux(243)
s(1094) =< aux(243)
s(1096) =< aux(244)
s(1095) =< aux(244)
s(1093) =< aux(244)
s(1094) =< aux(244)
s(1096) =< aux(251)
s(1095) =< aux(251)
s(1093) =< aux(251)
s(1094) =< aux(251)
s(1096) =< aux(237)
s(1095) =< aux(237)
s(1093) =< aux(237)
s(1094) =< aux(237)
s(1096) =< aux(240)
s(1095) =< aux(240)
s(1093) =< aux(240)
s(1094) =< aux(240)
s(1096) =< aux(242)
s(1095) =< aux(242)
s(1093) =< aux(242)
s(1094) =< aux(242)
s(1126) =< aux(234)
s(1127) =< aux(253)
s(1128) =< aux(249)
s(1129) =< aux(254)
s(1129) =< aux(235)
s(1128) =< aux(235)
s(1126) =< aux(235)
s(1127) =< aux(235)
s(1129) =< aux(243)
s(1128) =< aux(243)
s(1126) =< aux(243)
s(1127) =< aux(243)
s(1129) =< aux(244)
s(1128) =< aux(244)
s(1126) =< aux(244)
s(1127) =< aux(244)
s(1129) =< aux(251)
s(1128) =< aux(251)
s(1126) =< aux(251)
s(1127) =< aux(251)
s(1129) =< aux(236)
s(1128) =< aux(236)
s(1126) =< aux(236)
s(1127) =< aux(236)
s(1129) =< aux(239)
s(1128) =< aux(239)
s(1126) =< aux(239)
s(1127) =< aux(239)
s(1129) =< aux(241)
s(1128) =< aux(241)
s(1126) =< aux(241)
s(1127) =< aux(241)
s(1078) =< aux(235)
s(1079) =< aux(235)
s(1080) =< aux(245)
s(1071) =< aux(245)
s(1078) =< aux(245)
s(1079) =< aux(245)
s(1080) =< aux(246)
s(1081) =< aux(246)
s(1071) =< aux(246)
s(1080) =< aux(247)
s(1081) =< aux(248)
s(1071) =< aux(248)
s(1078) =< aux(250)
s(1078) =< aux(243)
s(1079) =< aux(243)
s(1078) =< s(1080)
s(1079) =< s(1080)
s(1078) =< aux(244)
s(1079) =< aux(244)
s(1078) =< s(1081)
s(1079) =< s(1081)
s(1078) =< aux(251)
s(1079) =< aux(251)
s(1078) =< s(1071)
s(1079) =< s(1071)
s(1078) =< aux(236)
s(1079) =< aux(236)
s(1078) =< aux(247)
s(1079) =< aux(247)
s(1078) =< aux(238)
s(1079) =< aux(238)
s(1078) =< aux(246)
s(1079) =< aux(246)
s(1078) =< aux(241)
s(1079) =< aux(241)
s(1144) =< aux(235)
s(1145) =< aux(235)
s(1144) =< aux(245)
s(1145) =< aux(245)
s(1144) =< aux(250)
s(1144) =< aux(243)
s(1145) =< aux(243)
s(1144) =< s(1080)
s(1145) =< s(1080)
s(1144) =< aux(244)
s(1145) =< aux(244)
s(1144) =< s(1081)
s(1145) =< s(1081)
s(1144) =< aux(251)
s(1145) =< aux(251)
s(1144) =< s(1071)
s(1145) =< s(1071)
s(1144) =< aux(236)
s(1145) =< aux(236)
s(1144) =< aux(247)
s(1145) =< aux(247)
s(1144) =< aux(239)
s(1145) =< aux(239)
s(1144) =< aux(246)
s(1145) =< aux(246)
s(1144) =< aux(241)
s(1145) =< aux(241)
s(1111) =< aux(235)
s(1112) =< aux(235)
s(1111) =< aux(245)
s(1112) =< aux(245)
s(1111) =< aux(250)
s(1111) =< aux(243)
s(1112) =< aux(243)
s(1111) =< s(1080)
s(1112) =< s(1080)
s(1111) =< aux(244)
s(1112) =< aux(244)
s(1111) =< s(1081)
s(1112) =< s(1081)
s(1111) =< aux(251)
s(1112) =< aux(251)
s(1111) =< s(1071)
s(1112) =< s(1071)
s(1111) =< aux(237)
s(1112) =< aux(237)
s(1111) =< aux(247)
s(1112) =< aux(247)
s(1111) =< aux(240)
s(1112) =< aux(240)
s(1111) =< aux(246)
s(1112) =< aux(246)
s(1111) =< aux(242)
s(1112) =< aux(242)

  with precondition: [V=0,V1>=1] 

* Chain [81]: 7
  with precondition: [V=1,V1>=1] 

* Chain [80]: 5
  with precondition: [V11=0,V1>=1,V>=1] 

* Chain [79]: 1
  with precondition: [V1=V,V1>=1] 


Closed-form bounds of start(V1,V,V11,V21,V19): 
-------------------------------------
* Chain [88]... with precondition: [V1>=1,V>=0] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [87]... with precondition: [V1>=2] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [86] with precondition: [V1>=0] 
    - Upper bound: 725*V1+22+nat(V)*80+nat(V11)*20+40*V1+30*V1+nat(V1+V)*248+nat(V1+V11)*40+ (204*V1+204)+nat(V1+V+V11)*40+nat(V1+V+1)*117+nat(V1+V+2)*176+nat(V+V11+1)*20+nat(2*V1+2*V+2)*20+nat(V1/2+V/2+1/2)*10+nat(V/2+V11/2+1/2)*20+70*V1+nat(V/2)*80+nat(V11/2)*20 
    - Complexity: n 
* Chain [85] with precondition: [V1=1] 
    - Upper bound: nat(V19)*10+6+nat(V+V11+V19)*20+nat(V+V11+1)*10+nat(V/2+V11/2+1/2)*10+nat(V19/2)*10 
    - Complexity: n 
* Chain [84] with precondition: [V1=2] 
    - Upper bound: nat(V11)*10+5+nat(V11+V21+V19)*20+nat(V21+V19+1)*10+nat(V21/2+V19/2+1/2)*10+nat(V11/2)*10 
    - Complexity: n 
* Chain [83] with precondition: [V1=3] 
    - Upper bound: 0 
    - Complexity: constant 
* Chain [82] with precondition: [V=0,V1>=1] 
    - Upper bound: 30*V1+7+nat(V11)*10+nat(V1+V11)*60+nat(V11+1)*20+nat(V11/2+1/2)*20+15*V1+nat(V11/2)*10 
    - Complexity: n 
* Chain [81] with precondition: [V=1,V1>=1] 
    - Upper bound: 7 
    - Complexity: constant 
* Chain [80] with precondition: [V11=0,V1>=1,V>=1] 
    - Upper bound: 5 
    - Complexity: constant 
* Chain [79] with precondition: [V1=V,V1>=1] 
    - Upper bound: 1 
    - Complexity: constant 

### Maximum cost of start(V1,V,V11,V21,V19): inf 
Asymptotic class: infinity 

Time statistics: 
-------------------------------------
* Partial evaluation computed in 99 ms.
* Invariants computed in 89 ms.
   - Backward Invariants 47 ms.
   - Transitive Invariants 13 ms.
* Refinement performed in 485 ms.
* Termination proved in 28 ms.
* Upper bounds computed in 5199 ms.
   - Equation cost structures 4422 ms.
   - Phase cost structures 141 ms.
   - Chain cost structures 126 ms.
   - Solving cost expressions 434 ms.
* Total analysis performed in 5965 ms.


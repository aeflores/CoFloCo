
Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. non_recursive  : [fun7/2]
1. non_recursive  : [fun8/2]
2. recursive [non_tail] : [fun1/3]
3. non_recursive  : [plus/3]
4. recursive [non_tail] : [fun9/3]
5. non_recursive  : [fun/3]
6. non_recursive  : [times/3]
7. recursive  : [fun4/4,fun5/5,lineMult/4]
8. recursive  : [computeLine/4,fun2/4,fun3/5]
9. recursive  : [fun6/3,matrixMult/3]
10. non_recursive  : [start/4]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into fun7/2
1. SCC is partially evaluated into fun8/2
2. SCC is partially evaluated into fun1/3
3. SCC is completely evaluated into other SCCs
4. SCC is partially evaluated into fun9/3
5. SCC is partially evaluated into fun/3
6. SCC is completely evaluated into other SCCs
7. SCC is partially evaluated into lineMult/4
8. SCC is partially evaluated into computeLine/4
9. SCC is partially evaluated into matrixMult/3
10. SCC is partially evaluated into start/4

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations fun7/2 
* CE 51 is refined into CE [56] 
* CE 49 is refined into CE [57] 
* CE 50 is refined into CE [58] 
* CE 48 is refined into CE [59] 


#### Refined cost equations fun7/2 
* CE 56: fun7(V1,Out) = 0
     [V1>=3,V1=Out+1] 
* CE 57: fun7(V1,Out) = 0
     [V1>=2,V1+1=Out] 
* CE 58: fun7(V1,Out) = 0
     [V1>=0,Out=0] 
* CE 59: fun7(V1,Out) = 0
     [Out=2,V1=0] 

### Cost equations --> "Loop" of fun7/2 
* CEs [56] --> Loop 32 
* CEs [57] --> Loop 33 
* CEs [58] --> Loop 34 
* CEs [59] --> Loop 35 

#### Loops of fun7/2 
* Loop 32: fun7(V1,Out) [V1>=3,V1=Out+1] 
* Loop 33: fun7(V1,Out) [V1>=2,V1+1=Out] 
* Loop 34: fun7(V1,Out) [V1>=0,Out=0] 
* Loop 35: fun7(V1,Out) [Out=2,V1=0] 

### Ranking functions of CR fun7(V1,Out) 

#### Partial ranking functions of CR fun7(V1,Out) 


### Resulting Chains:fun7(V1,Out) 
* [35]
* [34]
* [33]
* [32]


### Merging Chains  fun7/2 into  External patterns of execution 
* [[35]] --> 1 
* [[34]] --> 2 
* [[33]] --> 3 
* [[32]] --> 4 


### Specialization of cost equations fun8/2 
* CE 54 is refined into CE [60] 
* CE 55 is refined into CE [61] 
* CE 53 is refined into CE [62] 
* CE 52 is refined into CE [63] 


#### Refined cost equations fun8/2 
* CE 60: fun8(V1,Out) = 0
     [V1>=3,V1=Out+1] 
* CE 61: fun8(V1,Out) = 0
     [V1>=2,V1+1=Out] 
* CE 62: fun8(V1,Out) = 0
     [V1>=0,Out=0] 
* CE 63: fun8(V1,Out) = 0
     [Out=2,V1=0] 

### Cost equations --> "Loop" of fun8/2 
* CEs [60] --> Loop 36 
* CEs [61] --> Loop 37 
* CEs [62] --> Loop 38 
* CEs [63] --> Loop 39 

#### Loops of fun8/2 
* Loop 36: fun8(V1,Out) [V1>=3,V1=Out+1] 
* Loop 37: fun8(V1,Out) [V1>=2,V1+1=Out] 
* Loop 38: fun8(V1,Out) [V1>=0,Out=0] 
* Loop 39: fun8(V1,Out) [Out=2,V1=0] 

### Ranking functions of CR fun8(V1,Out) 

#### Partial ranking functions of CR fun8(V1,Out) 


### Resulting Chains:fun8(V1,Out) 
* [39]
* [38]
* [37]
* [36]


### Merging Chains  fun8/2 into  External patterns of execution 
* [[39]] --> 1 
* [[38]] --> 2 
* [[37]] --> 3 
* [[36]] --> 4 


### Specialization of cost equations fun1/3 
* CE 45 is refined into CE [64] 
* CE 41 is refined into CE [65,66,67,68] 
* CE 43 is refined into CE [69,70,71,72] 
* CE 40 is refined into CE [73] 
* CE 42 is refined into CE [74,75,76,77] 
* CE 44 is refined into CE [78,79,80,81] 


#### Refined cost equations fun1/3 
* CE 64: fun1(V1,V,Out) = 0
     [V>=0,V1>=0,Out=0] 
* CE 65: fun1(V1,V,Out) = 0+ fun7(W1,X1):1
     [X1=2,W1=0,Out=2,V=0,V1=2] 
* CE 66: fun1(V1,V,Out) = 0+ fun7(V,W1):2
     [V>=0,W1=0,Out=0,V1=2] 
* CE 67: fun1(V1,V,Out) = 0+ fun7(W1,Out):3
     [Out>=3,Out=W1+1,Out=V+1,V1=2] 
* CE 68: fun1(V1,V,Out) = 0+ fun7(W1,Out):4
     [Out>=2,Out+1=W1,Out+1=V,V1=2] 
* CE 69: fun1(V1,V,Out) = 0+ fun8(W1,X1):1
     [X1=2,W1=0,Out=2,V=0,V1=2] 
* CE 70: fun1(V1,V,Out) = 0+ fun8(V,W1):2
     [V>=0,W1=0,Out=0,V1=2] 
* CE 71: fun1(V1,V,Out) = 0+ fun8(W1,Out):3
     [Out>=3,Out=W1+1,Out=V+1,V1=2] 
* CE 72: fun1(V1,V,Out) = 0+ fun8(W1,Out):4
     [Out>=2,Out+1=W1,Out+1=V,V1=2] 
* CE 73: fun1(A,B,B) = 0
     [B>=0,A=0] 
* CE 74: fun1(V1,V,Out) = 0+ fun1(W1,V,X1)+ fun7(Y1,Z1):1
     [V>=0,V1>=3,V1=W1+1,X1=0,Z1=2,Y1=0,Out=2] 
* CE 75: fun1(V1,V,Out) = 0+ fun1(W1,V,X1)+ fun7(X1,Y1):2
     [X1>=0,V>=0,V1>=3,V1=W1+1,Y1=0,Out=0] 
* CE 76: fun1(V1,V,Out) = 0+ fun1(W1,V,X1)+ fun7(Y1,Out):3
     [Out>=3,V>=0,V1>=3,Out=X1+1,V1=W1+1,Out=Y1+1] 
* CE 77: fun1(V1,V,Out) = 0+ fun1(W1,V,X1)+ fun7(Y1,Out):4
     [Out>=2,V>=0,V1>=3,Out+1=X1,V1=W1+1,Out+1=Y1] 
* CE 78: fun1(V1,V,Out) = 0+ fun1(W1,V,X1)+ fun8(Y1,Z1):1
     [V>=0,V1>=3,V1=W1+1,X1=0,Z1=2,Y1=0,Out=2] 
* CE 79: fun1(V1,V,Out) = 0+ fun1(W1,V,X1)+ fun8(X1,Y1):2
     [X1>=0,V>=0,V1>=3,V1=W1+1,Y1=0,Out=0] 
* CE 80: fun1(V1,V,Out) = 0+ fun1(W1,V,X1)+ fun8(Y1,Out):3
     [Out>=3,V>=0,V1>=3,Out=X1+1,V1=W1+1,Out=Y1+1] 
* CE 81: fun1(V1,V,Out) = 0+ fun1(W1,V,X1)+ fun8(Y1,Out):4
     [Out>=2,V>=0,V1>=3,Out+1=X1,V1=W1+1,Out+1=Y1] 

### Cost equations --> "Loop" of fun1/3 
* CEs [76,80] --> Loop 40 
* CEs [77,81] --> Loop 41 
* CEs [74,78] --> Loop 42 
* CEs [75,79] --> Loop 43 
* CEs [68,72] --> Loop 44 
* CEs [67,71] --> Loop 45 
* CEs [64,66,70] --> Loop 46 
* CEs [65,69] --> Loop 47 
* CEs [73] --> Loop 48 

#### Loops of fun1/3 
* Loop 40: fun1(V1,V,Out)->  fun1(V1',V,Out')
                  [Out>=3,V>=0,V1>=3,Out=Out'+1,V1=V1'+1] 
* Loop 41: fun1(V1,V,Out)->  fun1(V1',V,Out')
                  [Out>=2,V>=0,V1>=3,Out+1=Out',V1=V1'+1] 
* Loop 42: fun1(V1,V,Out)->  fun1(V1',V,Out')
                  [V>=0,V1>=3,V1=V1'+1,Out'=0,Out=2] 
* Loop 43: fun1(V1,V,Out)->  fun1(V1',V,Out')
                  [Out'>=0,V>=0,V1>=3,V1=V1'+1,Out=0] 
* Loop 44: fun1(V1,V,Out) [V>=3,V=Out+1,V1=2] 
* Loop 45: fun1(V1,V,Out) [V>=2,V+1=Out,V1=2] 
* Loop 46: fun1(V1,V,Out) [V>=0,V1>=0,Out=0] 
* Loop 47: fun1(V1,V,Out) [Out=2,V=0,V1=2] 
* Loop 48: fun1(A,B,B) [B>=0,A=0] 

### Ranking functions of CR fun1(V1,V,Out) 
* RF of phase [40,41,42,43]: [V1-2]

#### Partial ranking functions of CR fun1(V1,V,Out) 
* Partial RF of phase [40,41,42,43]:
  - RF of loop [40:1,41:1,42:1,43:1]:
    V1-2


### Resulting Chains:fun1(V1,V,Out) 
* [[40,41,42,43],47]
* [[40,41,42,43],46]
* [[40,41,42,43],45]
* [[40,41,42,43],44]
* [48]
* [47]
* [46]
* [45]
* [44]


### Merging Chains  fun1/3 into  External patterns of execution 
* [[48]] --> 1 
* [[47]] --> 2 
* [[45]] --> 3 
* [[44]] --> 4 
* [[47,[40,41,42,43]]] --> 5 
* [[46]] --> 6 
* [[46,[40,41,42,43]]] --> 7 
* [[44,[40,41,42,43]],[45,[40,41,42,43]]] --> 8 


### Specialization of cost equations fun9/3 
* CE 46 is refined into CE [82] 
* CE 47 is refined into CE [83,84,85,86,87,88,89] 


#### Refined cost equations fun9/3 
* CE 82: fun9(V1,V,Out) = 0
     [V>=0,V1>=0,Out=0] 
* CE 83: fun9(V1,V,Out) = 0+ fun9(W1,X1,Y1)+ fun1(Z1,A2,B2):2
     [W1>=0,W1+1=V1,Y1=0,X1=1,B2=2,A2=0,Z1=2,Out=2,V=1] 
* CE 84: fun9(V1,V,Out) = 0+ fun9(W1,X1,Y1)+ fun1(Z1,A2,Out):3
     [W1>=0,Out>=3,Out=Y1+1,Out=A2+1,W1+1=V1,X1=1,Z1=2,V=1] 
* CE 85: fun9(V1,V,Out) = 0+ fun9(W1,X1,Y1)+ fun1(Z1,A2,Out):4
     [W1>=0,Out>=2,Out+1=Y1,Out+1=A2,W1+1=V1,X1=1,Z1=2,V=1] 
* CE 86: fun9(V1,V,Out) = 0+ fun9(W1,X1,Y1)+ fun1(Z1,A2,Out):5
     [Z1>=Out,W1>=0,Out>=0,Z1>=3,Z1=X1+1,Z1=V+1,W1+1=V1,Y1=0,A2=0] 
* CE 87: fun9(V1,V,Out) = 0+ fun9(W1,X1,Y1)+ fun1(Z1,Y1,A2):6
     [W1>=0,Y1>=0,Z1>=1,Z1=X1+1,Z1=V+1,W1+1=V1,A2=0,Out=0] 
* CE 88: fun9(V1,V,Out) = 0+ fun9(W1,X1,Y1)+ fun1(Z1,Y1,Out):7
     [Z1>=Out+1,W1>=0,Out>=0,Y1>=0,Z1>=3,Z1=X1+1,Z1=V+1,W1+1=V1] 
* CE 89: fun9(V1,V,Out) = 0+ fun9(W1,X1,Y1)+ fun1(Z1,Y1,Out):8
     [Z1+Y1>=Out+1,W1>=0,Out>=0,Y1>=2,Z1>=3,Z1=X1+1,Z1=V+1,W1+1=V1] 

### Cost equations --> "Loop" of fun9/3 
* CEs [89] --> Loop 49 
* CEs [88] --> Loop 50 
* CEs [86] --> Loop 51 
* CEs [87] --> Loop 52 
* CEs [84] --> Loop 53 
* CEs [85] --> Loop 54 
* CEs [83] --> Loop 55 
* CEs [82] --> Loop 56 

#### Loops of fun9/3 
* Loop 49: fun9(V1,V,Out)->  fun9(V1',V,Out')
                  [V+Out'>=Out,Out'>=2,Out>=0,V>=2,V1>=1,V1=V1'+1] 
* Loop 50: fun9(V1,V,Out)->  fun9(V1',V,Out')
                  [V>=Out,Out'>=0,Out>=0,V>=2,V1>=1,V1=V1'+1] 
* Loop 51: fun9(V1,V,Out)->  fun9(V1',V,Out')
                  [V+1>=Out,Out>=0,V>=2,V1>=1,V1=V1'+1,Out'=0] 
* Loop 52: fun9(V1,V,Out)->  fun9(V1',V,Out')
                  [Out'>=0,V>=0,V1>=1,V1=V1'+1,Out=0] 
* Loop 53: fun9(V1,V,Out)->  fun9(V1',V',Out')
                  [Out>=3,V1>=1,Out=Out'+1,V1=V1'+1,V'=1,V=1] 
* Loop 54: fun9(V1,V,Out)->  fun9(V1',V',Out')
                  [Out>=2,V1>=1,Out+1=Out',V1=V1'+1,V'=1,V=1] 
* Loop 55: fun9(V1,V,Out)->  fun9(V1',V',Out')
                  [V1>=1,V1=V1'+1,Out'=0,V'=1,Out=2,V=1] 
* Loop 56: fun9(V1,V,Out) [V>=0,V1>=0,Out=0] 

### Ranking functions of CR fun9(V1,V,Out) 
* RF of phase [49,50,51,52,53,54,55]: [V1]

#### Partial ranking functions of CR fun9(V1,V,Out) 
* Partial RF of phase [49,50,51,52,53,54,55]:
  - RF of loop [49:1,50:1,51:1,52:1,53:1,54:1,55:1]:
    V1


### Resulting Chains:fun9(V1,V,Out) 
* [[49,50,51,52,53,54,55],56]
* [56]


### Merging Chains  fun9/3 into  External patterns of execution 
* [[56]] --> 1 
* [[56,[49,50,51,52,53,54,55]]] --> 2 


### Specialization of cost equations fun/3 
* CE 39 is refined into CE [90,91] 
* CE 38 is refined into CE [92] 
* CE 36 is refined into CE [93] 
* CE 37 is refined into CE [94] 


#### Refined cost equations fun/3 
* CE 90: fun(V1,V,Out) = 0+ fun9(W1,X1,Y1):1
     [X1>=0,W1>=0,X1+1=V,W1+1=V1,Y1=0,Out=1] 
* CE 91: fun(V1,V,Out) = 0+ fun9(W1,X1,Y1):2
     [Y1>=0,X1>=0,W1>=1,Y1+1=Out,X1+1=V,W1+1=V1] 
* CE 92: fun(V1,V,Out) = 0
     [V1>=1,Out=0,V=0] 
* CE 93: fun(V1,V,Out) = 0
     [V>=0,V1>=0,Out=0] 
* CE 94: fun(V1,V,Out) = 0
     [V>=1,Out=0,V1=0] 

### Cost equations --> "Loop" of fun/3 
* CEs [91] --> Loop 57 
* CEs [90] --> Loop 58 
* CEs [92] --> Loop 59 
* CEs [93,94] --> Loop 60 

#### Loops of fun/3 
* Loop 57: fun(V1,V,Out) [Out>=1,V>=1,V1>=2] 
* Loop 58: fun(V1,V,Out) [V>=1,V1>=1,Out=1] 
* Loop 59: fun(V1,V,Out) [V1>=1,Out=0,V=0] 
* Loop 60: fun(V1,V,Out) [V>=0,V1>=0,Out=0] 

### Ranking functions of CR fun(V1,V,Out) 

#### Partial ranking functions of CR fun(V1,V,Out) 


### Resulting Chains:fun(V1,V,Out) 
* [60]
* [59]
* [58]
* [57]


### Merging Chains  fun/3 into  External patterns of execution 
* [[59],[60]] --> 1 
* [[58]] --> 2 
* [[57]] --> 3 


### Specialization of cost equations lineMult/4 
* CE 31 is refined into CE [95] 
* CE 34 is refined into CE [96] 
* CE 35 is refined into CE [97] 
* CE 33 is refined into CE [98,99,100,101,102,103,104,105,106,107] 
* CE 32 is refined into CE [108,109,110] 


#### Refined cost equations lineMult/4 
* CE 95: lineMult(V1,V,V7,Out) = 2
     [V7>=0,V>=1,V1>=0,Out=0] 
* CE 96: lineMult(V1,V,V7,Out) = 1
     [V7>=0,V>=0,V1>=0,Out=0] 
* CE 97: lineMult(V1,V,V7,Out) = 2
     [V7>=0,V1>=0,Out=1,V=1] 
* CE 98: lineMult(V1,V,V7,Out) = 5+ fun(W7,V1,X7):1+ fun1(Y7,Z7,Z7):1+ lineMult(V1,A8,B8,C8)
     [B8>=0,A8>=0,Z7>=0,V1>=0,W7>=0,Z7+C8+1=Out,Z7+B8+1=V7,W7+A8+1=V,Y7=0,X7=0] 
* CE 99: lineMult(V1,V,V7,Out) = 5+ fun(W7,V1,X7):1+ fun1(Y7,Z7,A8):6+ lineMult(V1,B8,C8,D8)
     [C8>=0,B8>=0,Z7>=0,V1>=0,W7>=0,Z7+C8+1=V7,W7+B8+1=V,D8+1=Out,A8=0,Y7=0,X7=0] 
* CE 100: lineMult(V1,V,V7,Out) = 5+ fun(W7,V1,X7):2+ fun1(Y7,Z7,A8):6+ lineMult(V1,B8,C8,D8)
     [C8>=0,B8>=0,Z7>=0,V1>=1,W7>=1,Z7+C8+1=V7,W7+B8+1=V,D8+1=Out,A8=0,Y7=1,X7=1] 
* CE 101: lineMult(V1,V,V7,Out) = 5+ fun(W7,V1,X7):3+ fun1(Y7,Z7,A8):2+ lineMult(V1,B8,C8,D8)
     [C8>=0,B8>=0,V1>=1,W7>=2,W7+B8+1=V,D8+3=Out,C8+1=V7,A8=2,Z7=0,Y7=2,X7=2] 
* CE 102: lineMult(V1,V,V7,Out) = 5+ fun(W7,V1,X7):3+ fun1(Y7,Z7,A8):3+ lineMult(V1,B8,C8,D8)
     [C8>=0,B8>=0,A8>=3,V1>=1,W7>=2,A8+D8+1=Out,A8+C8=V7,W7+B8+1=V,A8=Z7+1,Y7=2,X7=2] 
* CE 103: lineMult(V1,V,V7,Out) = 5+ fun(W7,V1,X7):3+ fun1(Y7,Z7,A8):4+ lineMult(V1,B8,C8,D8)
     [C8>=0,B8>=0,A8>=2,V1>=1,W7>=2,A8+D8+1=Out,A8+C8+2=V7,W7+B8+1=V,A8+1=Z7,Y7=2,X7=2] 
* CE 104: lineMult(V1,V,V7,Out) = 5+ fun(W7,V1,X7):3+ fun1(X7,Y7,Z7):5+ lineMult(V1,A8,B8,C8)
     [X7>=Z7,B8>=0,A8>=0,Z7>=0,X7>=3,V1>=1,W7>=2,Z7+C8+1=Out,W7+A8+1=V,B8+1=V7,Y7=0] 
* CE 105: lineMult(V1,V,V7,Out) = 5+ fun(W7,V1,X7):3+ fun1(X7,Y7,Z7):6+ lineMult(V1,A8,B8,C8)
     [B8>=0,A8>=0,Y7>=0,X7>=1,V1>=1,W7>=2,Y7+B8+1=V7,W7+A8+1=V,C8+1=Out,Z7=0] 
* CE 106: lineMult(V1,V,V7,Out) = 5+ fun(W7,V1,X7):3+ fun1(X7,Y7,Z7):7+ lineMult(V1,A8,B8,C8)
     [X7>=Z7+1,B8>=0,A8>=0,Z7>=0,Y7>=0,X7>=3,V1>=1,W7>=2,Z7+C8+1=Out,Y7+B8+1=V7,W7+A8+1=V] 
* CE 107: lineMult(V1,V,V7,Out) = 5+ fun(W7,V1,X7):3+ fun1(X7,Y7,Z7):8+ lineMult(V1,A8,B8,C8)
     [X7+Y7>=Z7+1,B8>=0,A8>=0,Z7>=0,Y7>=2,X7>=3,V1>=1,W7>=2,Z7+C8+1=Out,Y7+B8+1=V7,W7+A8+1=V] 
* CE 108: lineMult(V1,V,V7,Out) = 4+ fun(W7,V1,X7):1+ lineMult(V1,Y7,Z7,A8)
     [Y7>=0,V1>=0,W7>=0,W7+Y7+1=V,A8+1=Out,Z7=1,X7=0,V7=1] 
* CE 109: lineMult(V1,V,V7,Out) = 4+ fun(W7,V1,X7):2+ lineMult(V1,Y7,Z7,A8)
     [Y7>=0,V1>=1,W7>=1,W7+Y7+1=V,A8+2=Out,Z7=1,X7=1,V7=1] 
* CE 110: lineMult(V1,V,V7,Out) = 4+ fun(W7,V1,X7):3+ lineMult(V1,Y7,Z7,A8)
     [Y7>=0,X7>=1,V1>=1,W7>=2,X7+A8+1=Out,W7+Y7+1=V,Z7=1,V7=1] 

### Cost equations --> "Loop" of lineMult/4 
* CEs [102] --> Loop 61 
* CEs [98] --> Loop 62 
* CEs [103] --> Loop 63 
* CEs [99,100,105] --> Loop 64 
* CEs [101,104,106,107] --> Loop 65 
* CEs [110] --> Loop 66 
* CEs [109] --> Loop 67 
* CEs [108] --> Loop 68 
* CEs [95,96] --> Loop 69 
* CEs [97] --> Loop 70 

#### Loops of lineMult/4 
* Loop 61: lineMult(V1,V,V7,Out)->  lineMult(V1,V',V7',Out')
                  [V7>=V7'+3,V>=V'+3,V7'>=0,V'>=0,V1>=1,V7+Out'+1=Out+V7'] 
* Loop 62: lineMult(V1,V,V7,Out)->  lineMult(V1,V',V7',Out')
                  [V7>=V7'+1,V>=V'+1,V7'>=0,V'>=0,V1>=0,Out+V7'=V7+Out'] 
* Loop 63: lineMult(V1,V,V7,Out)->  lineMult(V1,V',V7',Out')
                  [V7>=V7'+4,V>=V'+3,V7'>=0,V'>=0,V1>=1,V7+Out'=Out+V7'+1] 
* Loop 64: lineMult(V1,V,V7,Out)->  lineMult(V1,V',V7',Out')
                  [V7>=V7'+1,V>=V'+1,V7'>=0,V'>=0,V1>=0,Out=Out'+1] 
* Loop 65: lineMult(V1,V,V7,Out)->  lineMult(V1,V',V7',Out')
                  [Out>=Out'+1,V7>=V7'+1,V>=V'+3,V7'>=0,V'>=0,V1>=1] 
* Loop 66: lineMult(V1,V,V7,Out)->  lineMult(V1,V',V7',Out')
                  [Out>=Out'+2,V>=V'+3,V'>=0,V1>=1,V7'=1,V7=1] 
* Loop 67: lineMult(V1,V,V7,Out)->  lineMult(V1,V',V7',Out')
                  [V>=V'+2,V'>=0,V1>=1,Out=Out'+2,V7'=1,V7=1] 
* Loop 68: lineMult(V1,V,V7,Out)->  lineMult(V1,V',V7',Out')
                  [V>=V'+1,V'>=0,V1>=0,Out=Out'+1,V7'=1,V7=1] 
* Loop 69: lineMult(V1,V,V7,Out) [V7>=0,V>=0,V1>=0,Out=0] 
* Loop 70: lineMult(V1,V,V7,Out) [V7>=0,V1>=0,Out=1,V=1] 

### Ranking functions of CR lineMult(V1,V,V7,Out) 
* RF of phase [61,62,63,64,65,66,67,68]: [V]

#### Partial ranking functions of CR lineMult(V1,V,V7,Out) 
* Partial RF of phase [61,62,63,64,65,66,67,68]:
  - RF of loop [61:1]:
    V7/3-2/3
  - RF of loop [61:1,63:1,65:1,66:1]:
    V/3-2/3
  - RF of loop [62:1,64:1,65:1]:
    V7
  - RF of loop [62:1,64:1,68:1]:
    V
  - RF of loop [63:1]:
    V7/4-3/4
  - RF of loop [67:1]:
    V/2-1/2


### Resulting Chains:lineMult(V1,V,V7,Out) 
* [[61,62,63,64,65,66,67,68],70]
* [[61,62,63,64,65,66,67,68],69]
* [70]
* [69]


### Merging Chains  lineMult/4 into  External patterns of execution 
* [[70]] --> 1 
* [[69]] --> 2 
* [[69,[61,62,63,64,65,66,67,68]],[70,[61,62,63,64,65,66,67,68]]] --> 3 


### Specialization of cost equations computeLine/4 
* CE 23 is refined into CE [111] 
* CE 26 is refined into CE [112] 
* CE 24 is refined into CE [113] 
* CE 27 is refined into CE [114] 
* CE 25 is refined into CE [115,116,117] 


#### Refined cost equations computeLine/4 
* CE 111: computeLine(V1,V,V7,Out) = 2
     [V7>=0,V>=0,V1>=1,Out=0] 
* CE 112: computeLine(V1,V,V7,Out) = 1
     [V7>=0,V>=0,V1>=0,Out=0] 
* CE 113: computeLine(V1,V,V7,Out) = 3
     [V7>=0,V1>=1,Out=1,V=1] 
* CE 114: computeLine(A,B,C,C) = 2
     [C>=0,B>=0,A=1] 
* CE 115: computeLine(V1,V,V7,Out) = 3+ lineMult(W7,X7,V7,Y7):1+ computeLine(Z7,A8,B8,Out)
     [A8>=0,Z7>=0,V7>=0,W7>=0,W7+Z7+1=V1,A8+2=V,B8=1,Y7=1,X7=1] 
* CE 116: computeLine(V1,V,V7,Out) = 3+ lineMult(W7,X7,V7,Y7):2+ computeLine(Z7,A8,B8,Out)
     [A8>=0,Z7>=0,V7>=0,X7>=0,W7>=0,X7+A8+1=V,W7+Z7+1=V1,B8=0,Y7=0] 
* CE 117: computeLine(V1,V,V7,Out) = 3+ lineMult(W7,X7,V7,Y7):3+ computeLine(Z7,A8,Y7,Out)
     [A8>=0,Z7>=0,Y7>=1,V7>=1,X7>=1,W7>=0,X7+A8+1=V,W7+Z7+1=V1] 

### Cost equations --> "Loop" of computeLine/4 
* CEs [117] --> Loop 71 
* CEs [115] --> Loop 72 
* CEs [116] --> Loop 73 
* CEs [111,112] --> Loop 74 
* CEs [113] --> Loop 75 
* CEs [114] --> Loop 76 

#### Loops of computeLine/4 
* Loop 71: computeLine(V1,V,V7,Out)->  computeLine(V1',V',V7',Out)
                  [V>=V'+2,V1>=V1'+1,V7'>=1,V'>=0,V1'>=0,V7>=1] 
* Loop 72: computeLine(V1,V,V7,Out)->  computeLine(V1',V',V7',Out)
                  [V1>=V1'+1,V1'>=0,V7>=0,V>=2,V=V'+2,V7'=1] 
* Loop 73: computeLine(V1,V,V7,Out)->  computeLine(V1',V',V7',Out)
                  [V>=V'+1,V1>=V1'+1,V'>=0,V1'>=0,V7>=0,V7'=0] 
* Loop 74: computeLine(V1,V,V7,Out) [V7>=0,V>=0,V1>=0,Out=0] 
* Loop 75: computeLine(V1,V,V7,Out) [V7>=0,V1>=1,Out=1,V=1] 
* Loop 76: computeLine(A,B,C,C) [C>=0,B>=0,A=1] 

### Ranking functions of CR computeLine(V1,V,V7,Out) 
* RF of phase [71,72,73]: [V,V1]

#### Partial ranking functions of CR computeLine(V1,V,V7,Out) 
* Partial RF of phase [71,72,73]:
  - RF of loop [71:1,72:1]:
    V/2-1/2
  - RF of loop [71:1,72:1,73:1]:
    V1
  - RF of loop [73:1]:
    V


### Resulting Chains:computeLine(V1,V,V7,Out) 
* [[71,72,73],76]
* [[71,72,73],75]
* [[71,72,73],74]
* [76]
* [75]
* [74]


### Merging Chains  computeLine/4 into  External patterns of execution 
* [[76]] --> 1 
* [[75]] --> 2 
* [[74],[74,[71,72,73]]] --> 3 
* [[75,[71,72,73]],[76,[71,72,73]]] --> 4 


### Specialization of cost equations matrixMult/3 
* CE 30 is refined into CE [118,119,120,121] 
* CE 28 is refined into CE [122] 
* CE 29 is refined into CE [123] 


#### Refined cost equations matrixMult/3 
* CE 118: matrixMult(V1,V,Out) = 2+ computeLine(W1,V,X1,Y1):1+ matrixMult(Z1,V,A2)
     [Z1>=0,V>=0,A2+2=Out,Z1+2=V1,Y1=1,X1=1,W1=1] 
* CE 119: matrixMult(V1,V,Out) = 2+ computeLine(W1,X1,Y1,Z1):2+ matrixMult(A2,B2,C2)
     [A2>=0,W1>=1,W1+A2+1=V1,C2+2=Out,B2=1,Z1=1,Y1=1,X1=1,V=1] 
* CE 120: matrixMult(V1,V,Out) = 2+ computeLine(W1,V,X1,Y1):3+ matrixMult(Z1,V,A2)
     [Z1>=0,V>=0,W1>=0,W1+Z1+1=V1,A2+1=Out,Y1=0,X1=1] 
* CE 121: matrixMult(V1,V,Out) = 2+ computeLine(W1,V,X1,Y1):4+ matrixMult(Z1,V,A2)
     [Z1>=0,Y1>=0,V>=1,W1>=2,Y1+A2+1=Out,W1+Z1+1=V1,X1=1] 
* CE 122: matrixMult(V1,V,Out) = 1
     [V>=0,V1>=0,Out=0] 
* CE 123: matrixMult(V1,V,Out) = 2
     [V>=0,Out=1,V1=1] 

### Cost equations --> "Loop" of matrixMult/3 
* CEs [122] --> Loop 77 
* CEs [123] --> Loop 78 
* CEs [121] --> Loop 79 
* CEs [120] --> Loop 80 
* CEs [118] --> Loop 81 
* CEs [119] --> Loop 82 

#### Loops of matrixMult/3 
* Loop 77: matrixMult(V1,V,Out) [V>=0,V1>=0,Out=0] 
* Loop 78: matrixMult(V1,V,Out) [V>=0,Out=1,V1=1] 
* Loop 79: matrixMult(V1,V,Out)->  matrixMult(V1',V,Out')
                  [Out>=Out'+1,V1>=V1'+3,V1'>=0,V>=1] 
* Loop 80: matrixMult(V1,V,Out)->  matrixMult(V1',V,Out')
                  [V1>=V1'+1,V1'>=0,V>=0,Out=Out'+1] 
* Loop 81: matrixMult(V1,V,Out)->  matrixMult(V1',V,Out')
                  [V>=0,V1>=2,Out=Out'+2,V1=V1'+2] 
* Loop 82: matrixMult(V1,V,Out)->  matrixMult(V1',V',Out')
                  [V1>=V1'+2,V1'>=0,Out=Out'+2,V'=1,V=1] 

### Ranking functions of CR matrixMult(V1,V,Out) 
* RF of phase [79,80,81,82]: [V1]

#### Partial ranking functions of CR matrixMult(V1,V,Out) 
* Partial RF of phase [79,80,81,82]:
  - RF of loop [79:1]:
    V1/3-2/3
  - RF of loop [80:1]:
    V1
  - RF of loop [81:1]:
    V1-1
  - RF of loop [82:1]:
    V1/2-1/2


### Resulting Chains:matrixMult(V1,V,Out) 
* [[79,80,81,82],78]
* [[79,80,81,82],77]
* [78]
* [77]


### Merging Chains  matrixMult/3 into  External patterns of execution 
* [[78],[77,[79,80,81,82]],[78,[79,80,81,82]]] --> 1 
* [[77]] --> 2 


### Specialization of cost equations start/4 
* CE 6 is refined into CE [124] 
* CE 9 is refined into CE [125,126,127,128,129,130,131,132,133] 
* CE 2 is refined into CE [134] 
* CE 3 is refined into CE [135] 
* CE 4 is refined into CE [136,137,138,139,140,141,142,143] 
* CE 5 is refined into CE [144] 
* CE 7 is refined into CE [145,146,147,148,149,150,151,152,153,154,155,156] 
* CE 8 is refined into CE [157,158,159,160,161,162,163,164,165,166,167,168] 
* CE 10 is refined into CE [169,170,171,172,173,174,175,176,177] 
* CE 11 is refined into CE [178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207] 
* CE 12 is refined into CE [208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237] 
* CE 13 is refined into CE [238,239,240] 
* CE 14 is refined into CE [241,242,243,244,245,246,247,248] 
* CE 15 is refined into CE [249,250,251,252] 
* CE 16 is refined into CE [253,254,255] 
* CE 17 is refined into CE [256,257] 
* CE 18 is refined into CE [258,259,260,261,262,263,264,265] 
* CE 19 is refined into CE [266,267,268] 
* CE 20 is refined into CE [269,270] 
* CE 21 is refined into CE [271,272,273,274] 
* CE 22 is refined into CE [275,276,277,278] 


#### Refined cost equations start/4 
* CE 124: start(V1,V,V7,V21) = 2
     [V>=0,V1>=1,V7=1] 
* CE 125: start(V1,V,V7,V21) = 3+ fun(W21,V7,X21):1+ lineMult(V7,Y21,Z21,A22):1
     [V7>=0,W21>=0,W21+2=V1,A22=1,Z21=1,Y21=1,X21=0,V=1] 
* CE 126: start(V1,V,V7,V21) = 3+ fun(W21,V7,X21):1+ lineMult(V7,Y21,Z21,A22):2
     [Y21>=0,V7>=0,W21>=0,W21+Y21+1=V1,A22=0,Z21=1,X21=0,V=1] 
* CE 127: start(V1,V,V7,V21) = 3+ fun(W21,V7,X21):1+ lineMult(V7,Y21,Z21,A22):3
     [A22>=1,Y21>=1,V7>=0,W21>=0,W21+Y21+1=V1,Z21=1,X21=0,V=1] 
* CE 128: start(V1,V,V7,V21) = 3+ fun(W21,V7,X21):2+ lineMult(V7,Y21,Z21,A22):1
     [V7>=1,W21>=1,W21+2=V1,A22=1,Z21=1,Y21=1,X21=1,V=1] 
* CE 129: start(V1,V,V7,V21) = 3+ fun(W21,V7,X21):2+ lineMult(V7,Y21,Z21,A22):2
     [Y21>=0,V7>=1,W21>=1,W21+Y21+1=V1,A22=0,Z21=1,X21=1,V=1] 
* CE 130: start(V1,V,V7,V21) = 3+ fun(W21,V7,X21):2+ lineMult(V7,Y21,Z21,A22):3
     [A22>=1,Y21>=1,V7>=1,W21>=1,W21+Y21+1=V1,Z21=1,X21=1,V=1] 
* CE 131: start(V1,V,V7,V21) = 3+ fun(W21,V7,X21):3+ lineMult(V7,Y21,Z21,A22):1
     [V7>=1,X21>=1,W21>=2,W21+2=V1,A22=1,Z21=1,Y21=1,V=1] 
* CE 132: start(V1,V,V7,V21) = 3+ fun(W21,V7,X21):3+ lineMult(V7,Y21,Z21,A22):2
     [Y21>=0,V7>=1,X21>=1,W21>=2,W21+Y21+1=V1,A22=0,Z21=1,V=1] 
* CE 133: start(V1,V,V7,V21) = 3+ fun(W21,V7,X21):3+ lineMult(V7,Y21,Z21,A22):3
     [A22>=1,Y21>=1,V7>=1,X21>=1,W21>=2,W21+Y21+1=V1,Z21=1,V=1] 
* CE 134: start(V1,V,V7,V21) = 0
     [V>=0,V1>=0] 
* CE 135: start(V1,V,V7,V21) = 1
     [V>=0,V1=1] 
* CE 136: start(V1,V,V7,V21) = 1+ computeLine(W21,V,X21,Y21):1+ matrixMult(Z21,V,A22):1
     [A22>=1,V>=0,Z21>=1,Z21+2=V1,Y21=1,X21=1,W21=1] 
* CE 137: start(V1,V,V7,V21) = 1+ computeLine(W21,V,X21,Y21):1+ matrixMult(Z21,V,A22):2
     [V>=0,Z21>=0,Z21+2=V1,A22=0,Y21=1,X21=1,W21=1] 
* CE 138: start(V1,V,V7,V21) = 1+ computeLine(W21,X21,Y21,Z21):2+ matrixMult(A22,B22,C22):1
     [C22>=1,A22>=1,W21>=1,W21+A22+1=V1,B22=1,Z21=1,Y21=1,X21=1,V=1] 
* CE 139: start(V1,V,V7,V21) = 1+ computeLine(W21,X21,Y21,Z21):2+ matrixMult(A22,B22,C22):2
     [A22>=0,W21>=1,W21+A22+1=V1,C22=0,B22=1,Z21=1,Y21=1,X21=1,V=1] 
* CE 140: start(V1,V,V7,V21) = 1+ computeLine(W21,V,X21,Y21):3+ matrixMult(Z21,V,A22):1
     [A22>=1,V>=0,Z21>=1,W21>=0,W21+Z21+1=V1,Y21=0,X21=1] 
* CE 141: start(V1,V,V7,V21) = 1+ computeLine(W21,V,X21,Y21):3+ matrixMult(Z21,V,A22):2
     [V>=0,Z21>=0,W21>=0,W21+Z21+1=V1,A22=0,Y21=0,X21=1] 
* CE 142: start(V1,V,V7,V21) = 1+ computeLine(W21,V,X21,Y21):4+ matrixMult(Z21,V,A22):1
     [A22>=1,V>=1,Z21>=1,Y21>=0,W21>=2,W21+Z21+1=V1,X21=1] 
* CE 143: start(V1,V,V7,V21) = 1+ computeLine(W21,V,X21,Y21):4+ matrixMult(Z21,V,A22):2
     [V>=1,Z21>=0,Y21>=0,W21>=2,W21+Z21+1=V1,A22=0,X21=1] 
* CE 144: start(V1,V,V7,V21) = 1
     [V7>=0,V>=0,V1>=1] 
* CE 145: start(V1,V,V7,V21) = 2+ lineMult(W21,X21,V,Y21):1+ computeLine(Z21,A22,B22,C22):1
     [A22>=0,V>=0,W21>=0,A22+2=V7,W21+2=V1,C22=1,B22=1,Z21=1,Y21=1,X21=1] 
* CE 146: start(V1,V,V7,V21) = 2+ lineMult(W21,X21,V,Y21):1+ computeLine(Z21,A22,B22,C22):2
     [Z21>=1,V>=0,W21>=0,W21+Z21+1=V1,C22=1,B22=1,A22=1,Y21=1,X21=1,V7=3] 
* CE 147: start(V1,V,V7,V21) = 2+ lineMult(W21,X21,V,Y21):1+ computeLine(Z21,A22,B22,C22):3
     [A22>=0,Z21>=0,V>=0,W21>=0,W21+Z21+1=V1,A22+2=V7,C22=0,B22=1,Y21=1,X21=1] 
* CE 148: start(V1,V,V7,V21) = 2+ lineMult(W21,X21,V,Y21):1+ computeLine(Z21,A22,B22,C22):4
     [C22>=0,A22>=1,Z21>=2,V>=0,W21>=0,W21+Z21+1=V1,A22+2=V7,B22=1,Y21=1,X21=1] 
* CE 149: start(V1,V,V7,V21) = 2+ lineMult(W21,X21,V,Y21):2+ computeLine(Z21,A22,B22,C22):1
     [A22>=0,V>=0,X21>=0,W21>=0,X21+A22+1=V7,W21+2=V1,C22=0,B22=0,Z21=1,Y21=0] 
* CE 150: start(V1,V,V7,V21) = 2+ lineMult(W21,X21,V,Y21):2+ computeLine(Z21,A22,B22,C22):2
     [Z21>=1,V>=0,X21>=0,W21>=0,W21+Z21+1=V1,X21+2=V7,C22=1,B22=0,A22=1,Y21=0] 
* CE 151: start(V1,V,V7,V21) = 2+ lineMult(W21,X21,V,Y21):2+ computeLine(Z21,A22,B22,C22):3
     [A22>=0,Z21>=0,V>=0,X21>=0,W21>=0,X21+A22+1=V7,W21+Z21+1=V1,C22=0,B22=0,Y21=0] 
* CE 152: start(V1,V,V7,V21) = 2+ lineMult(W21,X21,V,Y21):2+ computeLine(Z21,A22,B22,C22):4
     [C22>=0,A22>=1,Z21>=2,V>=0,X21>=0,W21>=0,X21+A22+1=V7,W21+Z21+1=V1,B22=0,Y21=0] 
* CE 153: start(V1,V,V7,V21) = 2+ lineMult(W21,X21,V,Y21):3+ computeLine(Z21,A22,Y21,Y21):1
     [Y21>=1,A22>=0,V>=1,X21>=1,W21>=0,X21+A22+1=V7,W21+2=V1,Z21=1] 
* CE 154: start(V1,V,V7,V21) = 2+ lineMult(W21,X21,V,Y21):3+ computeLine(Z21,A22,Y21,B22):2
     [Y21>=1,Z21>=1,V>=1,X21>=1,W21>=0,W21+Z21+1=V1,X21+2=V7,B22=1,A22=1] 
* CE 155: start(V1,V,V7,V21) = 2+ lineMult(W21,X21,V,Y21):3+ computeLine(Z21,A22,Y21,B22):3
     [Y21>=1,A22>=0,Z21>=0,V>=1,X21>=1,W21>=0,X21+A22+1=V7,W21+Z21+1=V1,B22=0] 
* CE 156: start(V1,V,V7,V21) = 2+ lineMult(W21,X21,V,Y21):3+ computeLine(Z21,A22,Y21,B22):4
     [B22>=0,Y21>=1,A22>=1,Z21>=2,V>=1,X21>=1,W21>=0,X21+A22+1=V7,W21+Z21+1=V1] 
* CE 157: start(V1,V,V7,V21) = 1+ lineMult(V7,W21,V,X21):1+ computeLine(Y21,Z21,A22,B22):1
     [Z21>=0,V>=0,V7>=0,Z21+2=V1,B22=1,A22=1,Y21=1,X21=1,W21=1,V21=1] 
* CE 158: start(V1,V,V7,V21) = 1+ lineMult(V7,W21,V,X21):1+ computeLine(V21,Y21,Z21,A22):2
     [V21>=1,V>=0,V7>=0,A22=1,Z21=1,Y21=1,X21=1,W21=1,V1=3] 
* CE 159: start(V1,V,V7,V21) = 1+ lineMult(V7,W21,V,X21):1+ computeLine(V21,Y21,Z21,A22):3
     [Y21>=0,V21>=0,V>=0,V7>=0,Y21+2=V1,A22=0,Z21=1,X21=1,W21=1] 
* CE 160: start(V1,V,V7,V21) = 1+ lineMult(V7,W21,V,X21):1+ computeLine(V21,Y21,Z21,A22):4
     [A22>=0,Y21>=1,V21>=2,V>=0,V7>=0,Y21+2=V1,Z21=1,X21=1,W21=1] 
* CE 161: start(V1,V,V7,V21) = 1+ lineMult(V7,W21,V,X21):2+ computeLine(Y21,Z21,A22,B22):1
     [Z21>=0,V>=0,W21>=0,V7>=0,W21+Z21+1=V1,B22=0,A22=0,Y21=1,X21=0,V21=1] 
* CE 162: start(V1,V,V7,V21) = 1+ lineMult(V7,W21,V,X21):2+ computeLine(V21,Y21,Z21,A22):2
     [V21>=1,V>=0,W21>=0,V7>=0,W21+2=V1,A22=1,Z21=0,Y21=1,X21=0] 
* CE 163: start(V1,V,V7,V21) = 1+ lineMult(V7,W21,V,X21):2+ computeLine(V21,Y21,Z21,A22):3
     [Y21>=0,V21>=0,V>=0,W21>=0,V7>=0,W21+Y21+1=V1,A22=0,Z21=0,X21=0] 
* CE 164: start(V1,V,V7,V21) = 1+ lineMult(V7,W21,V,X21):2+ computeLine(V21,Y21,Z21,A22):4
     [A22>=0,Y21>=1,V21>=2,V>=0,W21>=0,V7>=0,W21+Y21+1=V1,Z21=0,X21=0] 
* CE 165: start(V1,V,V7,V21) = 1+ lineMult(V7,W21,V,X21):3+ computeLine(Y21,Z21,X21,X21):1
     [X21>=1,Z21>=0,V>=1,W21>=1,V7>=0,W21+Z21+1=V1,Y21=1,V21=1] 
* CE 166: start(V1,V,V7,V21) = 1+ lineMult(V7,W21,V,X21):3+ computeLine(V21,Y21,X21,Z21):2
     [X21>=1,V21>=1,V>=1,W21>=1,V7>=0,W21+2=V1,Z21=1,Y21=1] 
* CE 167: start(V1,V,V7,V21) = 1+ lineMult(V7,W21,V,X21):3+ computeLine(V21,Y21,X21,Z21):3
     [X21>=1,Y21>=0,V21>=0,V>=1,W21>=1,V7>=0,W21+Y21+1=V1,Z21=0] 
* CE 168: start(V1,V,V7,V21) = 1+ lineMult(V7,W21,V,X21):3+ computeLine(V21,Y21,X21,Z21):4
     [Z21>=0,X21>=1,Y21>=1,V21>=2,V>=1,W21>=1,V7>=0,W21+Y21+1=V1] 
* CE 169: start(V1,V,V7,V21) = 2+ fun(V7,V,W21):1+ lineMult(V,X21,Y21,Z21):1
     [V>=0,V7>=0,Z21=1,Y21=1,X21=1,W21=0,V21=1,V1=1] 
* CE 170: start(V1,V,V7,V21) = 2+ fun(V7,V,W21):1+ lineMult(V,V21,X21,Y21):2
     [V21>=0,V>=0,V7>=0,Y21=0,X21=1,W21=0,V1=1] 
* CE 171: start(V1,V,V7,V21) = 2+ fun(V7,V,W21):1+ lineMult(V,V21,X21,Y21):3
     [Y21>=1,V21>=1,V>=0,V7>=0,X21=1,W21=0,V1=1] 
* CE 172: start(V1,V,V7,V21) = 2+ fun(V7,V,W21):2+ lineMult(V,X21,Y21,Z21):1
     [V>=1,V7>=1,Z21=1,Y21=1,X21=1,W21=1,V21=1,V1=1] 
* CE 173: start(V1,V,V7,V21) = 2+ fun(V7,V,W21):2+ lineMult(V,V21,X21,Y21):2
     [V21>=0,V>=1,V7>=1,Y21=0,X21=1,W21=1,V1=1] 
* CE 174: start(V1,V,V7,V21) = 2+ fun(V7,V,W21):2+ lineMult(V,V21,X21,Y21):3
     [Y21>=1,V21>=1,V>=1,V7>=1,X21=1,W21=1,V1=1] 
* CE 175: start(V1,V,V7,V21) = 2+ fun(V7,V,W21):3+ lineMult(V,X21,Y21,Z21):1
     [V>=1,W21>=1,V7>=2,Z21=1,Y21=1,X21=1,V21=1,V1=1] 
* CE 176: start(V1,V,V7,V21) = 2+ fun(V7,V,W21):3+ lineMult(V,V21,X21,Y21):2
     [V21>=0,V>=1,W21>=1,V7>=2,Y21=0,X21=1,V1=1] 
* CE 177: start(V1,V,V7,V21) = 2+ fun(V7,V,W21):3+ lineMult(V,V21,X21,Y21):3
     [Y21>=1,V21>=1,V>=1,W21>=1,V7>=2,X21=1,V1=1] 
* CE 178: start(V1,V,V7,V21) = 4+ fun(W21,V7,X21):1+ fun1(Y21,Z21,Z21):1+ lineMult(V7,A22,B22,C22):1
     [B22>=0,V7>=0,Z21>=0,W21>=0,Z21+B22+1=V,W21+2=V1,C22=1,A22=1,Y21=0,X21=0] 
* CE 179: start(V1,V,V7,V21) = 4+ fun(W21,V7,X21):1+ fun1(Y21,Z21,Z21):1+ lineMult(V7,A22,B22,C22):2
     [B22>=0,A22>=0,V7>=0,Z21>=0,W21>=0,Z21+B22+1=V,W21+A22+1=V1,C22=0,Y21=0,X21=0] 
* CE 180: start(V1,V,V7,V21) = 4+ fun(W21,V7,X21):1+ fun1(Y21,Z21,Z21):1+ lineMult(V7,A22,B22,C22):3
     [C22>=1,B22>=1,A22>=1,V7>=0,Z21>=0,W21>=0,Z21+B22+1=V,W21+A22+1=V1,Y21=0,X21=0] 
* CE 181: start(V1,V,V7,V21) = 4+ fun(W21,V7,X21):1+ fun1(Y21,Z21,A22):6+ lineMult(V7,B22,C22,D22):1
     [C22>=0,V7>=0,Z21>=0,W21>=0,Z21+C22+1=V,W21+2=V1,D22=1,B22=1,A22=0,Y21=0,X21=0] 
* CE 182: start(V1,V,V7,V21) = 4+ fun(W21,V7,X21):1+ fun1(Y21,Z21,A22):6+ lineMult(V7,B22,C22,D22):2
     [C22>=0,B22>=0,V7>=0,Z21>=0,W21>=0,Z21+C22+1=V,W21+B22+1=V1,D22=0,A22=0,Y21=0,X21=0] 
* CE 183: start(V1,V,V7,V21) = 4+ fun(W21,V7,X21):1+ fun1(Y21,Z21,A22):6+ lineMult(V7,B22,C22,D22):3
     [D22>=1,C22>=1,B22>=1,V7>=0,Z21>=0,W21>=0,Z21+C22+1=V,W21+B22+1=V1,A22=0,Y21=0,X21=0] 
* CE 184: start(V1,V,V7,V21) = 4+ fun(W21,V7,X21):2+ fun1(Y21,Z21,A22):6+ lineMult(V7,B22,C22,D22):1
     [C22>=0,V7>=1,Z21>=0,W21>=1,Z21+C22+1=V,W21+2=V1,D22=1,B22=1,A22=0,Y21=1,X21=1] 
* CE 185: start(V1,V,V7,V21) = 4+ fun(W21,V7,X21):2+ fun1(Y21,Z21,A22):6+ lineMult(V7,B22,C22,D22):2
     [C22>=0,B22>=0,V7>=1,Z21>=0,W21>=1,Z21+C22+1=V,W21+B22+1=V1,D22=0,A22=0,Y21=1,X21=1] 
* CE 186: start(V1,V,V7,V21) = 4+ fun(W21,V7,X21):2+ fun1(Y21,Z21,A22):6+ lineMult(V7,B22,C22,D22):3
     [D22>=1,C22>=1,B22>=1,V7>=1,Z21>=0,W21>=1,Z21+C22+1=V,W21+B22+1=V1,A22=0,Y21=1,X21=1] 
* CE 187: start(V1,V,V7,V21) = 4+ fun(W21,V7,X21):3+ fun1(Y21,Z21,A22):2+ lineMult(V7,B22,C22,D22):1
     [C22>=0,V7>=1,W21>=2,C22+1=V,W21+2=V1,D22=1,B22=1,A22=2,Z21=0,Y21=2,X21=2] 
* CE 188: start(V1,V,V7,V21) = 4+ fun(W21,V7,X21):3+ fun1(Y21,Z21,A22):2+ lineMult(V7,B22,C22,D22):2
     [C22>=0,B22>=0,V7>=1,W21>=2,W21+B22+1=V1,C22+1=V,D22=0,A22=2,Z21=0,Y21=2,X21=2] 
* CE 189: start(V1,V,V7,V21) = 4+ fun(W21,V7,X21):3+ fun1(Y21,Z21,A22):2+ lineMult(V7,B22,C22,D22):3
     [D22>=1,C22>=1,B22>=1,V7>=1,W21>=2,W21+B22+1=V1,C22+1=V,A22=2,Z21=0,Y21=2,X21=2] 
* CE 190: start(V1,V,V7,V21) = 4+ fun(W21,V7,X21):3+ fun1(Y21,Z21,A22):3+ lineMult(V7,B22,C22,D22):1
     [C22>=0,V7>=1,A22>=3,W21>=2,A22+C22=V,A22=Z21+1,W21+2=V1,D22=1,B22=1,Y21=2,X21=2] 
* CE 191: start(V1,V,V7,V21) = 4+ fun(W21,V7,X21):3+ fun1(Y21,Z21,A22):3+ lineMult(V7,B22,C22,D22):2
     [C22>=0,B22>=0,V7>=1,A22>=3,W21>=2,A22+C22=V,W21+B22+1=V1,A22=Z21+1,D22=0,Y21=2,X21=2] 
* CE 192: start(V1,V,V7,V21) = 4+ fun(W21,V7,X21):3+ fun1(Y21,Z21,A22):3+ lineMult(V7,B22,C22,D22):3
     [D22>=1,C22>=1,B22>=1,V7>=1,A22>=3,W21>=2,A22+C22=V,W21+B22+1=V1,A22=Z21+1,Y21=2,X21=2] 
* CE 193: start(V1,V,V7,V21) = 4+ fun(W21,V7,X21):3+ fun1(Y21,Z21,A22):4+ lineMult(V7,B22,C22,D22):1
     [C22>=0,V7>=1,A22>=2,W21>=2,A22+C22+2=V,A22+1=Z21,W21+2=V1,D22=1,B22=1,Y21=2,X21=2] 
* CE 194: start(V1,V,V7,V21) = 4+ fun(W21,V7,X21):3+ fun1(Y21,Z21,A22):4+ lineMult(V7,B22,C22,D22):2
     [C22>=0,B22>=0,V7>=1,A22>=2,W21>=2,A22+C22+2=V,W21+B22+1=V1,A22+1=Z21,D22=0,Y21=2,X21=2] 
* CE 195: start(V1,V,V7,V21) = 4+ fun(W21,V7,X21):3+ fun1(Y21,Z21,A22):4+ lineMult(V7,B22,C22,D22):3
     [D22>=1,C22>=1,B22>=1,V7>=1,A22>=2,W21>=2,A22+C22+2=V,W21+B22+1=V1,A22+1=Z21,Y21=2,X21=2] 
* CE 196: start(V1,V,V7,V21) = 4+ fun(W21,V7,X21):3+ fun1(X21,Y21,Z21):5+ lineMult(V7,A22,B22,C22):1
     [X21>=Z21,B22>=0,V7>=1,Z21>=0,X21>=3,W21>=2,B22+1=V,W21+2=V1,C22=1,A22=1,Y21=0] 
* CE 197: start(V1,V,V7,V21) = 4+ fun(W21,V7,X21):3+ fun1(X21,Y21,Z21):5+ lineMult(V7,A22,B22,C22):2
     [X21>=Z21,B22>=0,A22>=0,V7>=1,Z21>=0,X21>=3,W21>=2,W21+A22+1=V1,B22+1=V,C22=0,Y21=0] 
* CE 198: start(V1,V,V7,V21) = 4+ fun(W21,V7,X21):3+ fun1(X21,Y21,Z21):5+ lineMult(V7,A22,B22,C22):3
     [X21>=Z21,C22>=1,B22>=1,A22>=1,V7>=1,Z21>=0,X21>=3,W21>=2,W21+A22+1=V1,B22+1=V,Y21=0] 
* CE 199: start(V1,V,V7,V21) = 4+ fun(W21,V7,X21):3+ fun1(X21,Y21,Z21):6+ lineMult(V7,A22,B22,C22):1
     [B22>=0,V7>=1,Y21>=0,X21>=1,W21>=2,Y21+B22+1=V,W21+2=V1,C22=1,A22=1,Z21=0] 
* CE 200: start(V1,V,V7,V21) = 4+ fun(W21,V7,X21):3+ fun1(X21,Y21,Z21):6+ lineMult(V7,A22,B22,C22):2
     [B22>=0,A22>=0,V7>=1,Y21>=0,X21>=1,W21>=2,Y21+B22+1=V,W21+A22+1=V1,C22=0,Z21=0] 
* CE 201: start(V1,V,V7,V21) = 4+ fun(W21,V7,X21):3+ fun1(X21,Y21,Z21):6+ lineMult(V7,A22,B22,C22):3
     [C22>=1,B22>=1,A22>=1,V7>=1,Y21>=0,X21>=1,W21>=2,Y21+B22+1=V,W21+A22+1=V1,Z21=0] 
* CE 202: start(V1,V,V7,V21) = 4+ fun(W21,V7,X21):3+ fun1(X21,Y21,Z21):7+ lineMult(V7,A22,B22,C22):1
     [X21>=Z21+1,B22>=0,V7>=1,Z21>=0,Y21>=0,X21>=3,W21>=2,Y21+B22+1=V,W21+2=V1,C22=1,A22=1] 
* CE 203: start(V1,V,V7,V21) = 4+ fun(W21,V7,X21):3+ fun1(X21,Y21,Z21):7+ lineMult(V7,A22,B22,C22):2
     [X21>=Z21+1,B22>=0,A22>=0,V7>=1,Z21>=0,Y21>=0,X21>=3,W21>=2,Y21+B22+1=V,W21+A22+1=V1,C22=0] 
* CE 204: start(V1,V,V7,V21) = 4+ fun(W21,V7,X21):3+ fun1(X21,Y21,Z21):7+ lineMult(V7,A22,B22,C22):3
     [X21>=Z21+1,C22>=1,B22>=1,A22>=1,V7>=1,Z21>=0,Y21>=0,X21>=3,W21>=2,Y21+B22+1=V,W21+A22+1=V1] 
* CE 205: start(V1,V,V7,V21) = 4+ fun(W21,V7,X21):3+ fun1(X21,Y21,Z21):8+ lineMult(V7,A22,B22,C22):1
     [X21+Y21>=Z21+1,B22>=0,V7>=1,Z21>=0,Y21>=2,X21>=3,W21>=2,Y21+B22+1=V,W21+2=V1,C22=1,A22=1] 
* CE 206: start(V1,V,V7,V21) = 4+ fun(W21,V7,X21):3+ fun1(X21,Y21,Z21):8+ lineMult(V7,A22,B22,C22):2
     [X21+Y21>=Z21+1,B22>=0,A22>=0,V7>=1,Z21>=0,Y21>=2,X21>=3,W21>=2,Y21+B22+1=V,W21+A22+1=V1,C22=0] 
* CE 207: start(V1,V,V7,V21) = 4+ fun(W21,V7,X21):3+ fun1(X21,Y21,Z21):8+ lineMult(V7,A22,B22,C22):3
     [X21+Y21>=Z21+1,C22>=1,B22>=1,A22>=1,V7>=1,Z21>=0,Y21>=2,X21>=3,W21>=2,Y21+B22+1=V,W21+A22+1=V1] 
* CE 208: start(V1,V,V7,V21) = 3+ fun(V7,V,W21):1+ fun1(X21,Y21,Y21):1+ lineMult(V,Z21,A22,B22):1
     [A22>=0,V>=0,Y21>=0,V7>=0,Y21+A22+1=V1,B22=1,Z21=1,X21=0,W21=0,V21=1] 
* CE 209: start(V1,V,V7,V21) = 3+ fun(V7,V,W21):1+ fun1(X21,Y21,Y21):1+ lineMult(V,V21,Z21,A22):2
     [Z21>=0,V21>=0,V>=0,Y21>=0,V7>=0,Y21+Z21+1=V1,A22=0,X21=0,W21=0] 
* CE 210: start(V1,V,V7,V21) = 3+ fun(V7,V,W21):1+ fun1(X21,Y21,Y21):1+ lineMult(V,V21,Z21,A22):3
     [A22>=1,Z21>=1,V21>=1,V>=0,Y21>=0,V7>=0,Y21+Z21+1=V1,X21=0,W21=0] 
* CE 211: start(V1,V,V7,V21) = 3+ fun(V7,V,W21):1+ fun1(X21,Y21,Z21):6+ lineMult(V,A22,B22,C22):1
     [B22>=0,V>=0,Y21>=0,V7>=0,Y21+B22+1=V1,C22=1,A22=1,Z21=0,X21=0,W21=0,V21=1] 
* CE 212: start(V1,V,V7,V21) = 3+ fun(V7,V,W21):1+ fun1(X21,Y21,Z21):6+ lineMult(V,V21,A22,B22):2
     [A22>=0,V21>=0,V>=0,Y21>=0,V7>=0,Y21+A22+1=V1,B22=0,Z21=0,X21=0,W21=0] 
* CE 213: start(V1,V,V7,V21) = 3+ fun(V7,V,W21):1+ fun1(X21,Y21,Z21):6+ lineMult(V,V21,A22,B22):3
     [B22>=1,A22>=1,V21>=1,V>=0,Y21>=0,V7>=0,Y21+A22+1=V1,Z21=0,X21=0,W21=0] 
* CE 214: start(V1,V,V7,V21) = 3+ fun(V7,V,W21):2+ fun1(X21,Y21,Z21):6+ lineMult(V,A22,B22,C22):1
     [B22>=0,V>=1,Y21>=0,V7>=1,Y21+B22+1=V1,C22=1,A22=1,Z21=0,X21=1,W21=1,V21=1] 
* CE 215: start(V1,V,V7,V21) = 3+ fun(V7,V,W21):2+ fun1(X21,Y21,Z21):6+ lineMult(V,V21,A22,B22):2
     [A22>=0,V21>=0,V>=1,Y21>=0,V7>=1,Y21+A22+1=V1,B22=0,Z21=0,X21=1,W21=1] 
* CE 216: start(V1,V,V7,V21) = 3+ fun(V7,V,W21):2+ fun1(X21,Y21,Z21):6+ lineMult(V,V21,A22,B22):3
     [B22>=1,A22>=1,V21>=1,V>=1,Y21>=0,V7>=1,Y21+A22+1=V1,Z21=0,X21=1,W21=1] 
* CE 217: start(V1,V,V7,V21) = 3+ fun(V7,V,W21):3+ fun1(X21,Y21,Z21):2+ lineMult(V,A22,B22,C22):1
     [B22>=0,V>=1,V7>=2,B22+1=V1,C22=1,A22=1,Z21=2,Y21=0,X21=2,W21=2,V21=1] 
* CE 218: start(V1,V,V7,V21) = 3+ fun(V7,V,W21):3+ fun1(X21,Y21,Z21):2+ lineMult(V,V21,A22,B22):2
     [A22>=0,V21>=0,V>=1,V7>=2,A22+1=V1,B22=0,Z21=2,Y21=0,X21=2,W21=2] 
* CE 219: start(V1,V,V7,V21) = 3+ fun(V7,V,W21):3+ fun1(X21,Y21,Z21):2+ lineMult(V,V21,A22,B22):3
     [B22>=1,A22>=1,V21>=1,V>=1,V7>=2,A22+1=V1,Z21=2,Y21=0,X21=2,W21=2] 
* CE 220: start(V1,V,V7,V21) = 3+ fun(V7,V,W21):3+ fun1(X21,Y21,Z21):3+ lineMult(V,A22,B22,C22):1
     [B22>=0,V>=1,Z21>=3,V7>=2,Z21+B22=V1,Z21=Y21+1,C22=1,A22=1,X21=2,W21=2,V21=1] 
* CE 221: start(V1,V,V7,V21) = 3+ fun(V7,V,W21):3+ fun1(X21,Y21,Z21):3+ lineMult(V,V21,A22,B22):2
     [A22>=0,V21>=0,V>=1,Z21>=3,V7>=2,Z21+A22=V1,Z21=Y21+1,B22=0,X21=2,W21=2] 
* CE 222: start(V1,V,V7,V21) = 3+ fun(V7,V,W21):3+ fun1(X21,Y21,Z21):3+ lineMult(V,V21,A22,B22):3
     [B22>=1,A22>=1,V21>=1,V>=1,Z21>=3,V7>=2,Z21+A22=V1,Z21=Y21+1,X21=2,W21=2] 
* CE 223: start(V1,V,V7,V21) = 3+ fun(V7,V,W21):3+ fun1(X21,Y21,Z21):4+ lineMult(V,A22,B22,C22):1
     [B22>=0,V>=1,Z21>=2,V7>=2,Z21+B22+2=V1,Z21+1=Y21,C22=1,A22=1,X21=2,W21=2,V21=1] 
* CE 224: start(V1,V,V7,V21) = 3+ fun(V7,V,W21):3+ fun1(X21,Y21,Z21):4+ lineMult(V,V21,A22,B22):2
     [A22>=0,V21>=0,V>=1,Z21>=2,V7>=2,Z21+A22+2=V1,Z21+1=Y21,B22=0,X21=2,W21=2] 
* CE 225: start(V1,V,V7,V21) = 3+ fun(V7,V,W21):3+ fun1(X21,Y21,Z21):4+ lineMult(V,V21,A22,B22):3
     [B22>=1,A22>=1,V21>=1,V>=1,Z21>=2,V7>=2,Z21+A22+2=V1,Z21+1=Y21,X21=2,W21=2] 
* CE 226: start(V1,V,V7,V21) = 3+ fun(V7,V,W21):3+ fun1(W21,X21,Y21):5+ lineMult(V,Z21,A22,B22):1
     [W21>=Y21,A22>=0,V>=1,Y21>=0,W21>=3,V7>=2,A22+1=V1,B22=1,Z21=1,X21=0,V21=1] 
* CE 227: start(V1,V,V7,V21) = 3+ fun(V7,V,W21):3+ fun1(W21,X21,Y21):5+ lineMult(V,V21,Z21,A22):2
     [W21>=Y21,Z21>=0,V21>=0,V>=1,Y21>=0,W21>=3,V7>=2,Z21+1=V1,A22=0,X21=0] 
* CE 228: start(V1,V,V7,V21) = 3+ fun(V7,V,W21):3+ fun1(W21,X21,Y21):5+ lineMult(V,V21,Z21,A22):3
     [W21>=Y21,A22>=1,Z21>=1,V21>=1,V>=1,Y21>=0,W21>=3,V7>=2,Z21+1=V1,X21=0] 
* CE 229: start(V1,V,V7,V21) = 3+ fun(V7,V,W21):3+ fun1(W21,X21,Y21):6+ lineMult(V,Z21,A22,B22):1
     [A22>=0,V>=1,X21>=0,W21>=1,V7>=2,X21+A22+1=V1,B22=1,Z21=1,Y21=0,V21=1] 
* CE 230: start(V1,V,V7,V21) = 3+ fun(V7,V,W21):3+ fun1(W21,X21,Y21):6+ lineMult(V,V21,Z21,A22):2
     [Z21>=0,V21>=0,V>=1,X21>=0,W21>=1,V7>=2,X21+Z21+1=V1,A22=0,Y21=0] 
* CE 231: start(V1,V,V7,V21) = 3+ fun(V7,V,W21):3+ fun1(W21,X21,Y21):6+ lineMult(V,V21,Z21,A22):3
     [A22>=1,Z21>=1,V21>=1,V>=1,X21>=0,W21>=1,V7>=2,X21+Z21+1=V1,Y21=0] 
* CE 232: start(V1,V,V7,V21) = 3+ fun(V7,V,W21):3+ fun1(W21,X21,Y21):7+ lineMult(V,Z21,A22,B22):1
     [W21>=Y21+1,A22>=0,V>=1,Y21>=0,X21>=0,W21>=3,V7>=2,X21+A22+1=V1,B22=1,Z21=1,V21=1] 
* CE 233: start(V1,V,V7,V21) = 3+ fun(V7,V,W21):3+ fun1(W21,X21,Y21):7+ lineMult(V,V21,Z21,A22):2
     [W21>=Y21+1,Z21>=0,V21>=0,V>=1,Y21>=0,X21>=0,W21>=3,V7>=2,X21+Z21+1=V1,A22=0] 
* CE 234: start(V1,V,V7,V21) = 3+ fun(V7,V,W21):3+ fun1(W21,X21,Y21):7+ lineMult(V,V21,Z21,A22):3
     [W21>=Y21+1,A22>=1,Z21>=1,V21>=1,V>=1,Y21>=0,X21>=0,W21>=3,V7>=2,X21+Z21+1=V1] 
* CE 235: start(V1,V,V7,V21) = 3+ fun(V7,V,W21):3+ fun1(W21,X21,Y21):8+ lineMult(V,Z21,A22,B22):1
     [W21+X21>=Y21+1,A22>=0,V>=1,Y21>=0,X21>=2,W21>=3,V7>=2,X21+A22+1=V1,B22=1,Z21=1,V21=1] 
* CE 236: start(V1,V,V7,V21) = 3+ fun(V7,V,W21):3+ fun1(W21,X21,Y21):8+ lineMult(V,V21,Z21,A22):2
     [W21+X21>=Y21+1,Z21>=0,V21>=0,V>=1,Y21>=0,X21>=2,W21>=3,V7>=2,X21+Z21+1=V1,A22=0] 
* CE 237: start(V1,V,V7,V21) = 3+ fun(V7,V,W21):3+ fun1(W21,X21,Y21):8+ lineMult(V,V21,Z21,A22):3
     [W21+X21>=Y21+1,A22>=1,Z21>=1,V21>=1,V>=1,Y21>=0,X21>=2,W21>=3,V7>=2,X21+Z21+1=V1] 
* CE 238: start(V1,V,V7,V21) = 1+ fun(V1,V,W21):1
     [V>=0,V1>=0,W21=0] 
* CE 239: start(V1,V,V7,V21) = 1+ fun(V1,V,W21):2
     [V>=1,V1>=1,W21=1] 
* CE 240: start(V1,V,V7,V21) = 1+ fun(V1,V,W21):3
     [W21>=1,V>=1,V1>=2] 
* CE 241: start(V1,V,V7,V21) = 1+ fun1(W21,V,V):1
     [V>=0,W21=0,V1=0] 
* CE 242: start(V1,V,V7,V21) = 1+ fun1(W21,X21,Y21):2
     [Y21=2,X21=0,W21=2,V=0,V1=2] 
* CE 243: start(V1,V,V7,V21) = 1+ fun1(W21,X21,Y21):3
     [Y21>=3,Y21=X21+1,Y21=V+1,W21=2,V1=2] 
* CE 244: start(V1,V,V7,V21) = 1+ fun1(W21,X21,Y21):4
     [Y21>=2,Y21+1=X21,Y21+1=V,W21=2,V1=2] 
* CE 245: start(V1,V,V7,V21) = 1+ fun1(V1,W21,X21):5
     [V1>=X21,X21>=0,V1>=3,W21=0,V=0] 
* CE 246: start(V1,V,V7,V21) = 1+ fun1(V1,V,W21):6
     [V>=0,V1>=0,W21=0] 
* CE 247: start(V1,V,V7,V21) = 1+ fun1(V1,V,W21):7
     [V1>=W21+1,W21>=0,V>=0,V1>=3] 
* CE 248: start(V1,V,V7,V21) = 1+ fun1(V1,V,W21):8
     [V1+V>=W21+1,W21>=0,V>=2,V1>=3] 
* CE 249: start(V1,V,V7,V21) = 0+ computeLine(W21,V,V7,V7):1
     [V7>=0,V>=0,W21=1,V1=1] 
* CE 250: start(V1,V,V7,V21) = 0+ computeLine(V1,W21,V7,X21):2
     [V7>=0,V1>=1,X21=1,W21=1,V=1] 
* CE 251: start(V1,V,V7,V21) = 0+ computeLine(V1,V,V7,W21):3
     [V7>=0,V>=0,V1>=0,W21=0] 
* CE 252: start(V1,V,V7,V21) = 0+ computeLine(V1,V,V7,W21):4
     [W21>=0,V7>=0,V>=1,V1>=2] 
* CE 253: start(V1,V,V7,V21) = 0+ lineMult(V1,W21,V7,X21):1
     [V7>=0,V1>=0,X21=1,W21=1,V=1] 
* CE 254: start(V1,V,V7,V21) = 0+ lineMult(V1,V,V7,W21):2
     [V7>=0,V>=0,V1>=0,W21=0] 
* CE 255: start(V1,V,V7,V21) = 0+ lineMult(V1,V,V7,W21):3
     [W21>=1,V7>=1,V>=1,V1>=0] 
* CE 256: start(V1,V,V7,V21) = 0+ matrixMult(V1,V,W21):1
     [W21>=1,V>=0,V1>=1] 
* CE 257: start(V1,V,V7,V21) = 0+ matrixMult(V1,V,W21):2
     [V>=0,V1>=0,W21=0] 
* CE 258: start(V1,V,V7,V21) = 0+ fun1(W21,V,V):1
     [V>=0,W21=0,V1=0] 
* CE 259: start(V1,V,V7,V21) = 0+ fun1(W21,X21,Y21):2
     [Y21=2,X21=0,W21=2,V=0,V1=2] 
* CE 260: start(V1,V,V7,V21) = 0+ fun1(W21,X21,Y21):3
     [Y21>=3,Y21=X21+1,Y21=V+1,W21=2,V1=2] 
* CE 261: start(V1,V,V7,V21) = 0+ fun1(W21,X21,Y21):4
     [Y21>=2,Y21+1=X21,Y21+1=V,W21=2,V1=2] 
* CE 262: start(V1,V,V7,V21) = 0+ fun1(V1,W21,X21):5
     [V1>=X21,X21>=0,V1>=3,W21=0,V=0] 
* CE 263: start(V1,V,V7,V21) = 0+ fun1(V1,V,W21):6
     [V>=0,V1>=0,W21=0] 
* CE 264: start(V1,V,V7,V21) = 0+ fun1(V1,V,W21):7
     [V1>=W21+1,W21>=0,V>=0,V1>=3] 
* CE 265: start(V1,V,V7,V21) = 0+ fun1(V1,V,W21):8
     [V1+V>=W21+1,W21>=0,V>=2,V1>=3] 
* CE 266: start(V1,V,V7,V21) = 0+ fun(V1,V,W21):1
     [V>=0,V1>=0,W21=0] 
* CE 267: start(V1,V,V7,V21) = 0+ fun(V1,V,W21):2
     [V>=1,V1>=1,W21=1] 
* CE 268: start(V1,V,V7,V21) = 0+ fun(V1,V,W21):3
     [W21>=1,V>=1,V1>=2] 
* CE 269: start(V1,V,V7,V21) = 0+ fun9(V1,V,W21):1
     [V>=0,V1>=0,W21=0] 
* CE 270: start(V1,V,V7,V21) = 0+ fun9(V1,V,W21):2
     [W21>=0,V>=0,V1>=1] 
* CE 271: start(V1,V,V7,V21) = 0+ fun7(W21,X21):1
     [X21=2,W21=0,V1=0] 
* CE 272: start(V1,V,V7,V21) = 0+ fun7(V1,W21):2
     [V1>=0,W21=0] 
* CE 273: start(V1,V,V7,V21) = 0+ fun7(W21,X21):3
     [X21>=3,X21=W21+1,X21=V1+1] 
* CE 274: start(V1,V,V7,V21) = 0+ fun7(W21,X21):4
     [X21>=2,X21+1=W21,X21+1=V1] 
* CE 275: start(V1,V,V7,V21) = 0+ fun8(W21,X21):1
     [X21=2,W21=0,V1=0] 
* CE 276: start(V1,V,V7,V21) = 0+ fun8(V1,W21):2
     [V1>=0,W21=0] 
* CE 277: start(V1,V,V7,V21) = 0+ fun8(W21,X21):3
     [X21>=3,X21=W21+1,X21=V1+1] 
* CE 278: start(V1,V,V7,V21) = 0+ fun8(W21,X21):4
     [X21>=2,X21+1=W21,X21+1=V1] 

### Cost equations --> "Loop" of start/4 
* CEs [157,161,165,208,211,214,217,220,223,226,229,232,235] --> Loop 83 
* CEs [146] --> Loop 84 
* CEs [124] --> Loop 85 
* CEs [138,139] --> Loop 86 
* CEs [125,126,127,128,129,130,131,132,133,250,253] --> Loop 87 
* CEs [245,262] --> Loop 88 
* CEs [158] --> Loop 89 
* CEs [243,244,260,261] --> Loop 90 
* CEs [242,259] --> Loop 91 
* CEs [135,169,170,171,172,173,174,175,176,177,249] --> Loop 92 
* CEs [134,136,137,140,141,142,143,144,145,147,148,149,150,151,152,153,154,155,156,159,160,162,163,164,166,167,168,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,209,210,212,213,215,216,218,219,221,222,224,225,227,228,230,231,233,234,236,237,238,239,240,241,246,247,248,251,252,254,255,256,257,258,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278] --> Loop 93 

#### Loops of start/4 
* Loop 83: start(V1,V,V7,V21) [V7>=0,V>=0,V1>=1,V21=1] 
* Loop 84: start(V1,V,V7,V21) [V>=0,V1>=2,V7=3] 
* Loop 85: start(V1,V,V7,V21) [V>=0,V1>=1,V7=1] 
* Loop 86: start(V1,V,V7,V21) [V1>=2,V=1] 
* Loop 87: start(V1,V,V7,V21) [V7>=0,V1>=0,V=1] 
* Loop 88: start(V1,V,V7,V21) [V1>=3,V=0] 
* Loop 89: start(V1,V,V7,V21) [V21>=1,V7>=0,V>=0,V1=3] 
* Loop 90: start(V1,V,V7,V21) [V>=2,V1=2] 
* Loop 91: start(V1,V,V7,V21) [V=0,V1=2] 
* Loop 92: start(V1,V,V7,V21) [V>=0,V1=1] 
* Loop 93: start(V1,V,V7,V21) [V1>=0] 

### Ranking functions of CR start(V1,V,V7,V21) 

#### Partial ranking functions of CR start(V1,V,V7,V21) 


### Resulting Chains:start(V1,V,V7,V21) 
* [93]
* [92]
* [91]
* [90]
* [89]
* [88]
* [87]
* [86]
* [85]
* [84]
* [83]


### Merging Chains  start/4 into  External patterns of execution 
* [[92],[93]] --> 1 
* [[91]] --> 2 
* [[90]] --> 3 
* [[89]] --> 4 
* [[88]] --> 5 
* [[87]] --> 6 
* [[86]] --> 7 
* [[85]] --> 8 
* [[84]] --> 9 
* [[83]] --> 10 


Computing Bounds
=====================================

#### Cost of chains of fun7(V1,Out):
* Chain [35]: 0
  with precondition: [V1=0,Out=2] 

* Chain [34]: 0
  with precondition: [Out=0,V1>=0] 

* Chain [33]: 0
  with precondition: [V1+1=Out,V1>=2] 

* Chain [32]: 0
  with precondition: [V1=Out+1,V1>=3] 


#### Cost of chains of fun8(V1,Out):
* Chain [39]: 0
  with precondition: [V1=0,Out=2] 

* Chain [38]: 0
  with precondition: [Out=0,V1>=0] 

* Chain [37]: 0
  with precondition: [V1+1=Out,V1>=2] 

* Chain [36]: 0
  with precondition: [V1=Out+1,V1>=3] 


#### Cost of loops [40,41,42,43] 

 * loop 40:fun1(V1,V,Out) -> [fun1(V1',V',Out')] 
0
 * loop 41:fun1(V1,V,Out) -> [fun1(V1',V',Out')] 
0
 * loop 42:fun1(V1,V,Out) -> [fun1(V1',V',Out')] 
0
 * loop 43:fun1(V1,V,Out) -> [fun1(V1',V',Out')] 
0
#### Cost of phase [40,41,42,43]:fun1(V1,V,Out) -> [fun1(V1',V',Out')] 
0
#### Cost of phase [40,41,42,43]:fun1(V1,V,Out) -> [fun1(V1',V',Out')] 
0
#### Cost of phase [40,41,42,43]:fun1(V1,V,Out) -> [fun1(V1',V',Out')] 
0
#### Cost of phase [40,41,42,43]:fun1(V1,V,Out) -> [fun1(V1',V',Out')] 
0
#### Cost of chains of fun1(V1,V,Out):
* Chain [[40,41,42,43],47]: 0
  with precondition: [V=0,V1>=3,Out>=0,V1>=Out] 

* Chain [[40,41,42,43],46]: 0
  with precondition: [V1>=3,V>=0,Out>=0,V1>=Out+1] 

* Chain [[40,41,42,43],45]: 0
  with precondition: [V1>=3,V>=2,Out>=0,V+V1>=Out+1] 

* Chain [[40,41,42,43],44]: 0
  with precondition: [V1>=3,V>=3,Out>=0,V+V1>=Out+3] 

* Chain [48]: 0
  with precondition: [V1=0,V=Out,V>=0] 

* Chain [47]: 0
  with precondition: [V1=2,V=0,Out=2] 

* Chain [46]: 0
  with precondition: [Out=0,V1>=0,V>=0] 

* Chain [45]: 0
  with precondition: [V1=2,V+1=Out,V>=2] 

* Chain [44]: 0
  with precondition: [V1=2,V=Out+1,V>=3] 


#### Cost of loops [49,50,51,52,53,54,55] 

 * loop 49:fun9(V1,V,Out) -> [fun9(V1',V',Out')] 
0
 * loop 50:fun9(V1,V,Out) -> [fun9(V1',V',Out')] 
0
 * loop 51:fun9(V1,V,Out) -> [fun9(V1',V',Out')] 
0
 * loop 52:fun9(V1,V,Out) -> [fun9(V1',V',Out')] 
0
 * loop 53:fun9(V1,V,Out) -> [fun9(V1',V',Out')] 
0
 * loop 54:fun9(V1,V,Out) -> [fun9(V1',V',Out')] 
0
 * loop 55:fun9(V1,V,Out) -> [fun9(V1',V',Out')] 
0
#### Cost of phase [49,50,51,52,53,54,55]:fun9(V1,V,Out) -> [fun9(V1',V',Out')] 
0
#### Cost of chains of fun9(V1,V,Out):
* Chain [[49,50,51,52,53,54,55],56]: 0
  with precondition: [V1>=1,V>=0,Out>=0] 

* Chain [56]: 0
  with precondition: [Out=0,V1>=0,V>=0] 


#### Cost of chains of fun(V1,V,Out):
* Chain [60]: 0
  with precondition: [Out=0,V1>=0,V>=0] 

* Chain [59]: 0
  with precondition: [V=0,Out=0,V1>=1] 

* Chain [58]: 0
  with precondition: [Out=1,V1>=1,V>=1] 

* Chain [57]: 0
  with precondition: [V1>=2,V>=1,Out>=1] 


#### Cost of loops [61,62,63,64,65,66,67,68] 

 * loop 61:lineMult(V1,V,V7,Out) -> [lineMult(V1',V',V7',Out')] 
5
 * loop 62:lineMult(V1,V,V7,Out) -> [lineMult(V1',V',V7',Out')] 
5
 * loop 63:lineMult(V1,V,V7,Out) -> [lineMult(V1',V',V7',Out')] 
5
 * loop 64:lineMult(V1,V,V7,Out) -> [lineMult(V1',V',V7',Out')] 
5
 * loop 65:lineMult(V1,V,V7,Out) -> [lineMult(V1',V',V7',Out')] 
5
 * loop 66:lineMult(V1,V,V7,Out) -> [lineMult(V1',V',V7',Out')] 
4
 * loop 67:lineMult(V1,V,V7,Out) -> [lineMult(V1',V',V7',Out')] 
4
 * loop 68:lineMult(V1,V,V7,Out) -> [lineMult(V1',V',V7',Out')] 
4
#### Cost of phase [61,62,63,64,65,66,67,68]:lineMult(V1,V,V7,Out) -> [lineMult(V1',V',V7',Out')] 
5*it(61)+10*it(62)+5*it(63)+5*it(65)+4*it(66)+4*it(67)+4*it(68)+0
  Such that:it(67) =< V/2
it(67) =< V/2-V'/2
it(63) =< V7/4
it(63) =< V7/4-V7'/4
aux(5) =< V
aux(6) =< V-V'
aux(7) =< V/3
aux(8) =< V/3-V'/3
aux(9) =< V7
aux(10) =< V7-V7'
aux(11) =< V7/3
aux(12) =< V7/3-V7'/3
it(61) =< aux(5)
it(62) =< aux(5)
it(63) =< aux(5)
it(65) =< aux(5)
it(66) =< aux(5)
it(67) =< aux(5)
it(68) =< aux(5)
it(61) =< aux(6)
it(62) =< aux(6)
it(63) =< aux(6)
it(65) =< aux(6)
it(66) =< aux(6)
it(67) =< aux(6)
it(68) =< aux(6)
it(61) =< aux(7)
it(63) =< aux(7)
it(65) =< aux(7)
it(66) =< aux(7)
it(61) =< aux(8)
it(63) =< aux(8)
it(65) =< aux(8)
it(66) =< aux(8)
it(62) =< aux(9)
it(63) =< aux(9)
it(65) =< aux(9)
it(62) =< aux(10)
it(63) =< aux(10)
it(65) =< aux(10)
it(61) =< aux(11)
it(63) =< aux(11)
it(61) =< aux(12)
it(63) =< aux(12)

#### Cost of phase [61,62,63,64,65,66,67,68]:lineMult(V1,V,V7,Out) -> [lineMult(V1',V',V7',Out')] 
5*it(61)+10*it(62)+5*it(63)+5*it(65)+4*it(66)+4*it(67)+4*it(68)+0
  Such that:it(67) =< V/2
it(67) =< V/2-V'/2
it(63) =< V7/4
it(63) =< V7/4-V7'/4
aux(5) =< V
aux(6) =< V-V'
aux(7) =< V/3
aux(8) =< V/3-V'/3
aux(9) =< V7
aux(10) =< V7-V7'
aux(11) =< V7/3
aux(12) =< V7/3-V7'/3
it(61) =< aux(5)
it(62) =< aux(5)
it(63) =< aux(5)
it(65) =< aux(5)
it(66) =< aux(5)
it(67) =< aux(5)
it(68) =< aux(5)
it(61) =< aux(6)
it(62) =< aux(6)
it(63) =< aux(6)
it(65) =< aux(6)
it(66) =< aux(6)
it(67) =< aux(6)
it(68) =< aux(6)
it(61) =< aux(7)
it(63) =< aux(7)
it(65) =< aux(7)
it(66) =< aux(7)
it(61) =< aux(8)
it(63) =< aux(8)
it(65) =< aux(8)
it(66) =< aux(8)
it(62) =< aux(9)
it(63) =< aux(9)
it(65) =< aux(9)
it(62) =< aux(10)
it(63) =< aux(10)
it(65) =< aux(10)
it(61) =< aux(11)
it(63) =< aux(11)
it(61) =< aux(12)
it(63) =< aux(12)

#### Cost of chains of lineMult(V1,V,V7,Out):
* Chain [[61,62,63,64,65,66,67,68],70]: 5*it(61)+10*it(62)+5*it(63)+5*it(65)+4*it(66)+4*it(67)+4*it(68)+2
  Such that:it(67) =< V/2
it(63) =< V7/4
aux(13) =< V
aux(14) =< V/3
aux(15) =< V7
aux(16) =< V7/3
it(61) =< aux(13)
it(62) =< aux(13)
it(63) =< aux(13)
it(65) =< aux(13)
it(66) =< aux(13)
it(67) =< aux(13)
it(68) =< aux(13)
it(61) =< aux(14)
it(63) =< aux(14)
it(65) =< aux(14)
it(66) =< aux(14)
it(62) =< aux(15)
it(63) =< aux(15)
it(65) =< aux(15)
it(61) =< aux(16)
it(63) =< aux(16)

  with precondition: [V1>=0,V>=2,V7>=1,Out>=2] 

* Chain [[61,62,63,64,65,66,67,68],69]: 5*it(61)+10*it(62)+5*it(63)+5*it(65)+4*it(66)+4*it(67)+4*it(68)+2
  Such that:it(67) =< V/2
it(63) =< V7/4
aux(17) =< V
aux(18) =< V/3
aux(19) =< V7
aux(20) =< V7/3
it(61) =< aux(17)
it(62) =< aux(17)
it(63) =< aux(17)
it(65) =< aux(17)
it(66) =< aux(17)
it(67) =< aux(17)
it(68) =< aux(17)
it(61) =< aux(18)
it(63) =< aux(18)
it(65) =< aux(18)
it(66) =< aux(18)
it(62) =< aux(19)
it(63) =< aux(19)
it(65) =< aux(19)
it(61) =< aux(20)
it(63) =< aux(20)

  with precondition: [V1>=0,V>=1,V7>=1,Out>=1] 

* Chain [70]: 2
  with precondition: [V=1,Out=1,V1>=0,V7>=0] 

* Chain [69]: 2
  with precondition: [Out=0,V1>=0,V>=0,V7>=0] 


#### Cost of loops [71,72,73] 

 * loop 71:computeLine(V1,V,V7,Out) -> [computeLine(V1',V',V7',Out')] 
8*s(42)+10*s(43)+10*s(44)+20*s(45)+10*s(46)+8*s(47)+8*s(48)+5
  Such that:s(36) =< V-V'
s(37) =< V/2-V'/2
s(38) =< V/3-V'/3
s(39) =< V7
s(40) =< V7/3
s(41) =< V7/4
s(42) =< s(37)
s(43) =< s(41)
s(44) =< s(36)
s(45) =< s(36)
s(43) =< s(36)
s(46) =< s(36)
s(47) =< s(36)
s(42) =< s(36)
s(48) =< s(36)
s(44) =< s(38)
s(43) =< s(38)
s(46) =< s(38)
s(47) =< s(38)
s(45) =< s(39)
s(43) =< s(39)
s(46) =< s(39)
s(44) =< s(40)
s(43) =< s(40)

 * loop 72:computeLine(V1,V,V7,Out) -> [computeLine(V1',V',V7',Out')] 
5
 * loop 73:computeLine(V1,V,V7,Out) -> [computeLine(V1',V',V7',Out')] 
5
#### Cost of phase [71,72,73]:computeLine(V1,V,V7,Out) -> [computeLine(V1',V',V7',Out')] 
10*it(71)+5*it(73)+8*s(49)+10*s(50)+10*s(51)+20*s(52)+10*s(53)+8*s(54)+8*s(55)+0
  Such that:aux(35) =< V1
aux(36) =< V1-V1'
aux(37) =< V
aux(38) =< V-V'
aux(39) =< V/2
aux(40) =< V/2-V'/2
it(71) =< aux(35)
it(73) =< aux(35)
it(71) =< aux(36)
it(73) =< aux(36)
aux(27) =< aux(37)
it(71) =< aux(37)
it(73) =< aux(37)
aux(27) =< aux(38)
it(71) =< aux(38)
it(73) =< aux(38)
it(71) =< aux(39)
it(71) =< aux(40)
s(58) =< aux(27)* (1/3)
s(61) =< aux(27)* (1/2)
s(49) =< s(61)
s(51) =< aux(27)
s(52) =< aux(27)
s(50) =< aux(27)
s(53) =< aux(27)
s(54) =< aux(27)
s(49) =< aux(27)
s(55) =< aux(27)
s(51) =< s(58)
s(50) =< s(58)
s(53) =< s(58)
s(54) =< s(58)

#### Cost of phase [71,72,73]:computeLine(V1,V,V7,Out) -> [computeLine(V1',V',V7',Out')] 
10*it(71)+5*it(73)+8*s(49)+10*s(50)+10*s(51)+20*s(52)+10*s(53)+8*s(54)+8*s(55)+0
  Such that:aux(35) =< V1
aux(36) =< V1-V1'
aux(37) =< V
aux(38) =< V-V'
aux(39) =< V/2
aux(40) =< V/2-V'/2
it(71) =< aux(35)
it(73) =< aux(35)
it(71) =< aux(36)
it(73) =< aux(36)
aux(27) =< aux(37)
it(71) =< aux(37)
it(73) =< aux(37)
aux(27) =< aux(38)
it(71) =< aux(38)
it(73) =< aux(38)
it(71) =< aux(39)
it(71) =< aux(40)
s(58) =< aux(27)* (1/3)
s(61) =< aux(27)* (1/2)
s(49) =< s(61)
s(51) =< aux(27)
s(52) =< aux(27)
s(50) =< aux(27)
s(53) =< aux(27)
s(54) =< aux(27)
s(49) =< aux(27)
s(55) =< aux(27)
s(51) =< s(58)
s(50) =< s(58)
s(53) =< s(58)
s(54) =< s(58)

#### Cost of phase [71,72,73]:computeLine(V1,V,V7,Out) -> [computeLine(V1',V',V7',Out')] 
10*it(71)+5*it(73)+8*s(49)+10*s(50)+10*s(51)+20*s(52)+10*s(53)+8*s(54)+8*s(55)+0
  Such that:aux(35) =< V1
aux(36) =< V1-V1'
aux(37) =< V
aux(38) =< V-V'
aux(39) =< V/2
aux(40) =< V/2-V'/2
it(71) =< aux(35)
it(73) =< aux(35)
it(71) =< aux(36)
it(73) =< aux(36)
aux(27) =< aux(37)
it(71) =< aux(37)
it(73) =< aux(37)
aux(27) =< aux(38)
it(71) =< aux(38)
it(73) =< aux(38)
it(71) =< aux(39)
it(71) =< aux(40)
s(58) =< aux(27)* (1/3)
s(61) =< aux(27)* (1/2)
s(49) =< s(61)
s(51) =< aux(27)
s(52) =< aux(27)
s(50) =< aux(27)
s(53) =< aux(27)
s(54) =< aux(27)
s(49) =< aux(27)
s(55) =< aux(27)
s(51) =< s(58)
s(50) =< s(58)
s(53) =< s(58)
s(54) =< s(58)

#### Cost of chains of computeLine(V1,V,V7,Out):
* Chain [[71,72,73],76]: 10*it(71)+5*it(73)+8*s(49)+38*s(50)+28*s(52)+2
  Such that:aux(41) =< V1
aux(42) =< V
aux(43) =< V/2
it(71) =< aux(41)
it(73) =< aux(41)
it(71) =< aux(42)
it(73) =< aux(42)
it(71) =< aux(43)
s(58) =< aux(42)* (1/3)
s(61) =< aux(42)* (1/2)
s(49) =< s(61)
s(50) =< aux(42)
s(52) =< aux(42)
s(49) =< aux(42)
s(50) =< s(58)

  with precondition: [V1>=2,V>=1,V7>=0,Out>=0] 

* Chain [[71,72,73],75]: 10*it(71)+5*it(73)+8*s(49)+38*s(50)+28*s(52)+3
  Such that:aux(44) =< V1
aux(45) =< V
aux(46) =< V/2
it(71) =< aux(44)
it(73) =< aux(44)
it(71) =< aux(45)
it(73) =< aux(45)
it(71) =< aux(46)
s(58) =< aux(45)* (1/3)
s(61) =< aux(45)* (1/2)
s(49) =< s(61)
s(50) =< aux(45)
s(52) =< aux(45)
s(49) =< aux(45)
s(50) =< s(58)

  with precondition: [Out=1,V1>=2,V>=2,V7>=0] 

* Chain [[71,72,73],74]: 10*it(71)+5*it(73)+8*s(49)+38*s(50)+28*s(52)+2
  Such that:aux(47) =< V1
aux(48) =< V
aux(49) =< V/2
it(71) =< aux(47)
it(73) =< aux(47)
it(71) =< aux(48)
it(73) =< aux(48)
it(71) =< aux(49)
s(58) =< aux(48)* (1/3)
s(61) =< aux(48)* (1/2)
s(49) =< s(61)
s(50) =< aux(48)
s(52) =< aux(48)
s(49) =< aux(48)
s(50) =< s(58)

  with precondition: [Out=0,V1>=1,V>=1,V7>=0] 

* Chain [76]: 2
  with precondition: [V1=1,V7=Out,V>=0,V7>=0] 

* Chain [75]: 3
  with precondition: [V=1,Out=1,V1>=1,V7>=0] 

* Chain [74]: 2
  with precondition: [Out=0,V1>=0,V>=0,V7>=0] 


#### Cost of loops [79,80,81,82] 

 * loop 79:matrixMult(V1,V,Out) -> [matrixMult(V1',V',Out')] 
20*s(105)+10*s(106)+16*s(109)+76*s(110)+56*s(111)+5
  Such that:s(102) =< V1-V1'
s(103) =< V'
s(104) =< V'/2
s(105) =< s(102)
s(106) =< s(102)
s(105) =< s(103)
s(106) =< s(103)
s(105) =< s(104)
s(107) =< s(103)* (1/3)
s(108) =< s(103)* (1/2)
s(109) =< s(108)
s(110) =< s(103)
s(111) =< s(103)
s(109) =< s(103)
s(110) =< s(107)

 * loop 80:matrixMult(V1,V,Out) -> [matrixMult(V1',V',Out')] 
10*s(125)+5*s(126)+8*s(129)+38*s(130)+28*s(131)+4
  Such that:s(122) =< V1-V1'
s(123) =< V
s(124) =< V/2
s(125) =< s(122)
s(126) =< s(122)
s(125) =< s(123)
s(126) =< s(123)
s(125) =< s(124)
s(127) =< s(123)* (1/3)
s(128) =< s(123)* (1/2)
s(129) =< s(128)
s(130) =< s(123)
s(131) =< s(123)
s(129) =< s(123)
s(130) =< s(127)

 * loop 81:matrixMult(V1,V,Out) -> [matrixMult(V1',V',Out')] 
4
 * loop 82:matrixMult(V1,V,Out) -> [matrixMult(V1',V',Out')] 
5
#### Cost of phase [79,80,81,82]:matrixMult(V1,V,Out) -> [matrixMult(V1',V',Out')] 
5*it(79)+8*it(80)+5*it(82)+20*s(132)+10*s(133)+16*s(134)+76*s(135)+56*s(136)+10*s(142)+5*s(143)+8*s(144)+38*s(145)+28*s(146)+0
  Such that:it(82) =< V1/2
it(82) =< V1/2-V1'/2
it(79) =< V1/3
it(79) =< V1/3-V1'/3
aux(53) =< V
aux(57) =< V1
aux(58) =< V1-V1'
it(79) =< aux(57)
it(80) =< aux(57)
it(82) =< aux(57)
s(141) =< aux(57)
it(79) =< aux(58)
it(80) =< aux(58)
it(82) =< aux(58)
s(141) =< aux(58)
aux(55) =< aux(53)
aux(54) =< it(79)*aux(53)
aux(56) =< it(80)*aux(55)
s(139) =< aux(54)* (1/2)
s(149) =< aux(56)* (1/2)
s(142) =< s(141)
s(143) =< s(141)
s(142) =< aux(56)
s(143) =< aux(56)
s(142) =< s(149)
s(147) =< aux(56)* (1/3)
s(144) =< s(149)
s(145) =< aux(56)
s(146) =< aux(56)
s(144) =< aux(56)
s(145) =< s(147)
s(132) =< s(141)
s(133) =< s(141)
s(132) =< aux(54)
s(133) =< aux(54)
s(132) =< s(139)
s(137) =< aux(54)* (1/3)
s(134) =< s(139)
s(135) =< aux(54)
s(136) =< aux(54)
s(134) =< aux(54)
s(135) =< s(137)

#### Cost of phase [79,80,81,82]:matrixMult(V1,V,Out) -> [matrixMult(V1',V',Out')] 
5*it(79)+8*it(80)+5*it(82)+20*s(132)+10*s(133)+16*s(134)+76*s(135)+56*s(136)+10*s(142)+5*s(143)+8*s(144)+38*s(145)+28*s(146)+0
  Such that:it(82) =< V1/2
it(82) =< V1/2-V1'/2
it(79) =< V1/3
it(79) =< V1/3-V1'/3
aux(53) =< V
aux(57) =< V1
aux(58) =< V1-V1'
it(79) =< aux(57)
it(80) =< aux(57)
it(82) =< aux(57)
s(141) =< aux(57)
it(79) =< aux(58)
it(80) =< aux(58)
it(82) =< aux(58)
s(141) =< aux(58)
aux(55) =< aux(53)
aux(54) =< it(79)*aux(53)
aux(56) =< it(80)*aux(55)
s(139) =< aux(54)* (1/2)
s(149) =< aux(56)* (1/2)
s(142) =< s(141)
s(143) =< s(141)
s(142) =< aux(56)
s(143) =< aux(56)
s(142) =< s(149)
s(147) =< aux(56)* (1/3)
s(144) =< s(149)
s(145) =< aux(56)
s(146) =< aux(56)
s(144) =< aux(56)
s(145) =< s(147)
s(132) =< s(141)
s(133) =< s(141)
s(132) =< aux(54)
s(133) =< aux(54)
s(132) =< s(139)
s(137) =< aux(54)* (1/3)
s(134) =< s(139)
s(135) =< aux(54)
s(136) =< aux(54)
s(134) =< aux(54)
s(135) =< s(137)

#### Cost of chains of matrixMult(V1,V,Out):
* Chain [[79,80,81,82],78]: 5*it(79)+8*it(80)+5*it(82)+20*s(132)+10*s(133)+16*s(134)+76*s(135)+56*s(136)+10*s(142)+5*s(143)+8*s(144)+38*s(145)+28*s(146)+2
  Such that:it(82) =< V1/2
it(79) =< V1/3
aux(53) =< V
aux(59) =< V1
it(79) =< aux(59)
it(80) =< aux(59)
it(82) =< aux(59)
aux(55) =< aux(53)
aux(54) =< it(79)*aux(53)
aux(56) =< it(80)*aux(55)
s(139) =< aux(54)* (1/2)
s(149) =< aux(56)* (1/2)
s(142) =< aux(59)
s(143) =< aux(59)
s(142) =< aux(56)
s(143) =< aux(56)
s(142) =< s(149)
s(147) =< aux(56)* (1/3)
s(144) =< s(149)
s(145) =< aux(56)
s(146) =< aux(56)
s(144) =< aux(56)
s(145) =< s(147)
s(132) =< aux(59)
s(133) =< aux(59)
s(132) =< aux(54)
s(133) =< aux(54)
s(132) =< s(139)
s(137) =< aux(54)* (1/3)
s(134) =< s(139)
s(135) =< aux(54)
s(136) =< aux(54)
s(134) =< aux(54)
s(135) =< s(137)

  with precondition: [V1>=2,V>=0,Out>=2] 

* Chain [[79,80,81,82],77]: 5*it(79)+8*it(80)+5*it(82)+20*s(132)+10*s(133)+16*s(134)+76*s(135)+56*s(136)+10*s(142)+5*s(143)+8*s(144)+38*s(145)+28*s(146)+1
  Such that:it(82) =< V1/2
it(79) =< V1/3
aux(53) =< V
aux(60) =< V1
it(79) =< aux(60)
it(80) =< aux(60)
it(82) =< aux(60)
aux(55) =< aux(53)
aux(54) =< it(79)*aux(53)
aux(56) =< it(80)*aux(55)
s(139) =< aux(54)* (1/2)
s(149) =< aux(56)* (1/2)
s(142) =< aux(60)
s(143) =< aux(60)
s(142) =< aux(56)
s(143) =< aux(56)
s(142) =< s(149)
s(147) =< aux(56)* (1/3)
s(144) =< s(149)
s(145) =< aux(56)
s(146) =< aux(56)
s(144) =< aux(56)
s(145) =< s(147)
s(132) =< aux(60)
s(133) =< aux(60)
s(132) =< aux(54)
s(133) =< aux(54)
s(132) =< s(139)
s(137) =< aux(54)* (1/3)
s(134) =< s(139)
s(135) =< aux(54)
s(136) =< aux(54)
s(134) =< aux(54)
s(135) =< s(137)

  with precondition: [V1>=1,V>=0,Out>=1] 

* Chain [78]: 2
  with precondition: [V1=1,Out=1,V>=0] 

* Chain [77]: 1
  with precondition: [Out=0,V1>=0,V>=0] 


#### Cost of chains of start(V1,V,V7,V21):
* Chain [93]: 108*s(200)+108*s(201)+476*s(202)+80*s(208)+40*s(209)+64*s(211)+304*s(212)+224*s(213)+80*s(214)+40*s(215)+64*s(217)+304*s(218)+224*s(219)+90*s(223)+325*s(224)+72*s(227)+342*s(228)+260*s(229)+80*s(248)+40*s(249)+64*s(251)+304*s(252)+224*s(253)+60*s(311)+75*s(312)+72*s(315)+342*s(316)+300*s(317)+16*s(354)+20*s(355)+20*s(356)+120*s(357)+20*s(358)+16*s(359)+16*s(380)+20*s(381)+20*s(382)+90*s(423)+245*s(424)+72*s(427)+342*s(428)+110*s(467)+110*s(468)+110*s(470)+16*s(479)+20*s(480)+20*s(481)+80*s(655)+100*s(656)+100*s(657)+100*s(659)+80*s(660)+80*s(661)+8*s(805)+10*s(806)+10*s(807)+10*s(809)+8*s(810)+7
  Such that:s(804) =< V7/4
aux(75) =< V1
aux(76) =< V1/2
aux(77) =< V1/3
aux(78) =< V1/4
aux(79) =< V
aux(80) =< V/2
aux(81) =< V/3
aux(82) =< V/4
aux(83) =< V7
aux(84) =< V7/2
aux(85) =< V7/3
aux(86) =< V21
aux(87) =< V21/2
aux(88) =< V21/3
s(375) =< aux(84)
s(200) =< aux(76)
s(201) =< aux(77)
s(201) =< aux(75)
s(202) =< aux(75)
s(200) =< aux(75)
s(203) =< aux(79)
s(204) =< s(201)*aux(79)
s(205) =< s(202)*s(203)
s(206) =< s(204)* (1/2)
s(207) =< s(205)* (1/2)
s(208) =< aux(75)
s(209) =< aux(75)
s(208) =< s(205)
s(209) =< s(205)
s(208) =< s(207)
s(210) =< s(205)* (1/3)
s(211) =< s(207)
s(212) =< s(205)
s(213) =< s(205)
s(211) =< s(205)
s(212) =< s(210)
s(214) =< aux(75)
s(215) =< aux(75)
s(214) =< s(204)
s(215) =< s(204)
s(214) =< s(206)
s(216) =< s(204)* (1/3)
s(217) =< s(206)
s(218) =< s(204)
s(219) =< s(204)
s(217) =< s(204)
s(218) =< s(216)
s(223) =< aux(75)
s(224) =< aux(75)
s(223) =< aux(79)
s(224) =< aux(79)
s(223) =< aux(80)
s(225) =< aux(79)* (1/3)
s(226) =< aux(79)* (1/2)
s(227) =< s(226)
s(228) =< aux(79)
s(229) =< aux(79)
s(227) =< aux(79)
s(228) =< s(225)
s(311) =< aux(75)
s(312) =< aux(75)
s(311) =< aux(83)
s(312) =< aux(83)
s(311) =< aux(84)
s(313) =< aux(83)* (1/3)
s(314) =< aux(83)* (1/2)
s(315) =< s(314)
s(316) =< aux(83)
s(317) =< aux(83)
s(315) =< aux(83)
s(316) =< s(313)
s(375) =< aux(83)
s(380) =< s(375)
s(381) =< aux(82)
s(382) =< aux(83)
s(357) =< aux(83)
s(381) =< aux(83)
s(380) =< aux(83)
s(357) =< aux(79)
s(381) =< aux(79)
s(382) =< aux(81)
s(381) =< aux(81)
s(423) =< aux(86)
s(424) =< aux(86)
s(423) =< aux(75)
s(424) =< aux(75)
s(423) =< aux(76)
s(425) =< aux(75)* (1/3)
s(426) =< aux(75)* (1/2)
s(427) =< s(426)
s(428) =< aux(75)
s(427) =< aux(75)
s(428) =< s(425)
s(467) =< aux(82)
s(468) =< aux(75)
s(467) =< aux(75)
s(470) =< aux(75)
s(468) =< aux(77)
s(467) =< aux(77)
s(470) =< aux(77)
s(467) =< aux(79)
s(470) =< aux(79)
s(468) =< aux(81)
s(467) =< aux(81)
s(655) =< aux(87)
s(656) =< aux(78)
s(657) =< aux(86)
s(656) =< aux(86)
s(659) =< aux(86)
s(660) =< aux(86)
s(655) =< aux(86)
s(661) =< aux(86)
s(657) =< aux(88)
s(656) =< aux(88)
s(659) =< aux(88)
s(660) =< aux(88)
s(656) =< aux(75)
s(659) =< aux(75)
s(657) =< aux(77)
s(656) =< aux(77)
s(354) =< aux(84)
s(355) =< aux(82)
s(356) =< aux(83)
s(355) =< aux(83)
s(358) =< aux(83)
s(359) =< aux(83)
s(354) =< aux(83)
s(356) =< aux(85)
s(355) =< aux(85)
s(358) =< aux(85)
s(359) =< aux(85)
s(355) =< aux(79)
s(358) =< aux(79)
s(356) =< aux(81)
s(355) =< aux(81)
s(474) =< aux(75)
s(474) =< aux(76)
s(479) =< s(474)
s(480) =< aux(82)
s(481) =< aux(75)
s(480) =< aux(75)
s(479) =< aux(75)
s(480) =< aux(79)
s(481) =< aux(81)
s(480) =< aux(81)
s(805) =< aux(80)
s(806) =< s(804)
s(807) =< aux(79)
s(806) =< aux(79)
s(809) =< aux(79)
s(810) =< aux(79)
s(805) =< aux(79)
s(807) =< aux(81)
s(806) =< aux(81)
s(809) =< aux(81)
s(810) =< aux(81)
s(806) =< aux(83)
s(809) =< aux(83)
s(807) =< aux(85)
s(806) =< aux(85)
s(238) =< s(202)*aux(79)
s(240) =< s(238)* (1/2)
s(248) =< aux(75)
s(249) =< aux(75)
s(248) =< s(238)
s(249) =< s(238)
s(248) =< s(240)
s(250) =< s(238)* (1/3)
s(251) =< s(240)
s(252) =< s(238)
s(253) =< s(238)
s(251) =< s(238)
s(252) =< s(250)

  with precondition: [V1>=0] 

* Chain [92]: 24*s(842)+30*s(843)+30*s(844)+60*s(845)+30*s(846)+24*s(847)+24*s(848)+4
  Such that:aux(89) =< 1
aux(90) =< 1/3
aux(91) =< 1/4
aux(92) =< V21
aux(93) =< V21/2
aux(94) =< V21/3
s(842) =< aux(93)
s(843) =< aux(91)
s(844) =< aux(92)
s(845) =< aux(92)
s(843) =< aux(92)
s(846) =< aux(92)
s(847) =< aux(92)
s(842) =< aux(92)
s(848) =< aux(92)
s(844) =< aux(94)
s(843) =< aux(94)
s(846) =< aux(94)
s(847) =< aux(94)
s(845) =< aux(89)
s(843) =< aux(89)
s(846) =< aux(89)
s(844) =< aux(90)
s(843) =< aux(90)

  with precondition: [V1=1,V>=0] 

* Chain [91]: 1
  with precondition: [V1=2,V=0] 

* Chain [90]: 1
  with precondition: [V1=2,V>=2] 

* Chain [89]: 6
  with precondition: [V1=3,V>=0,V7>=0,V21>=1] 

* Chain [88]: 1
  with precondition: [V=0,V1>=3] 

* Chain [87]: 24*s(881)+30*s(882)+30*s(883)+60*s(884)+30*s(885)+24*s(886)+24*s(887)+5
  Such that:aux(95) =< 1
aux(96) =< 1/3
aux(97) =< 1/4
aux(98) =< V1
aux(99) =< V1/2
aux(100) =< V1/3
s(881) =< aux(99)
s(882) =< aux(97)
s(883) =< aux(98)
s(884) =< aux(98)
s(882) =< aux(98)
s(885) =< aux(98)
s(886) =< aux(98)
s(881) =< aux(98)
s(887) =< aux(98)
s(883) =< aux(100)
s(882) =< aux(100)
s(885) =< aux(100)
s(886) =< aux(100)
s(884) =< aux(95)
s(882) =< aux(95)
s(885) =< aux(95)
s(883) =< aux(96)
s(882) =< aux(96)

  with precondition: [V=1,V1>=0,V7>=0] 

* Chain [86]: 10*s(918)+10*s(919)+16*s(920)+20*s(926)+10*s(927)+16*s(929)+76*s(930)+56*s(931)+40*s(932)+20*s(933)+32*s(935)+152*s(936)+112*s(937)+6
  Such that:s(917) =< 1
s(914) =< V1
s(915) =< V1/2
s(916) =< V1/3
s(918) =< s(915)
s(919) =< s(916)
s(919) =< s(914)
s(920) =< s(914)
s(918) =< s(914)
s(921) =< s(917)
s(922) =< s(919)*s(917)
s(923) =< s(920)*s(921)
s(924) =< s(922)* (1/2)
s(925) =< s(923)* (1/2)
s(926) =< s(914)
s(927) =< s(914)
s(926) =< s(923)
s(927) =< s(923)
s(926) =< s(925)
s(928) =< s(923)* (1/3)
s(929) =< s(925)
s(930) =< s(923)
s(931) =< s(923)
s(929) =< s(923)
s(930) =< s(928)
s(932) =< s(914)
s(933) =< s(914)
s(932) =< s(922)
s(933) =< s(922)
s(932) =< s(924)
s(934) =< s(922)* (1/3)
s(935) =< s(924)
s(936) =< s(922)
s(937) =< s(922)
s(935) =< s(922)
s(936) =< s(934)

  with precondition: [V=1,V1>=2] 

* Chain [85]: 2
  with precondition: [V7=1,V1>=1,V>=0] 

* Chain [84]: 7
  with precondition: [V7=3,V1>=2,V>=0] 

* Chain [83]: 8*s(944)+10*s(945)+10*s(946)+20*s(947)+10*s(948)+8*s(949)+8*s(950)+5
  Such that:s(938) =< V1
s(939) =< V1/2
s(940) =< V1/3
s(941) =< V
s(942) =< V/3
s(943) =< V/4
s(944) =< s(939)
s(945) =< s(943)
s(946) =< s(938)
s(947) =< s(938)
s(945) =< s(938)
s(948) =< s(938)
s(949) =< s(938)
s(944) =< s(938)
s(950) =< s(938)
s(946) =< s(940)
s(945) =< s(940)
s(948) =< s(940)
s(949) =< s(940)
s(947) =< s(941)
s(945) =< s(941)
s(948) =< s(941)
s(946) =< s(942)
s(945) =< s(942)

  with precondition: [V21=1,V1>=1,V>=0,V7>=0] 


Closed-form bounds of start(V1,V,V7,V21): 
-------------------------------------
* Chain [93] with precondition: [V1>=0] 
    - Upper bound: 2020*V1+7+nat(V)*666+nat(V)*1120*V1+V1/3* (nat(V)*560)+nat(V7)*874+nat(V21)*695+54*V1+36*V1+25*V1+nat(V/2)*8+nat(V/4)*170+nat(V7/2)*32+nat(V7/4)*10+nat(V21/2)*80 
    - Complexity: n^2 
* Chain [92] with precondition: [V1=1,V>=0] 
    - Upper bound: 223/2+nat(V21)*48+nat(V21/2)*24 
    - Complexity: n 
* Chain [91] with precondition: [V1=2,V=0] 
    - Upper bound: 1 
    - Complexity: constant 
* Chain [90] with precondition: [V1=2,V>=2] 
    - Upper bound: 1 
    - Complexity: constant 
* Chain [89] with precondition: [V1=3,V>=0,V7>=0,V21>=1] 
    - Upper bound: 6 
    - Complexity: constant 
* Chain [88] with precondition: [V=0,V1>=3] 
    - Upper bound: 1 
    - Complexity: constant 
* Chain [87] with precondition: [V=1,V1>=0,V7>=0] 
    - Upper bound: 60*V1+225/2 
    - Complexity: n 
* Chain [86] with precondition: [V=1,V1>=2] 
    - Upper bound: 1043/3*V1+6 
    - Complexity: n 
* Chain [85] with precondition: [V7=1,V1>=1,V>=0] 
    - Upper bound: 2 
    - Complexity: constant 
* Chain [84] with precondition: [V7=3,V1>=2,V>=0] 
    - Upper bound: 7 
    - Complexity: constant 
* Chain [83] with precondition: [V21=1,V1>=1,V>=0,V7>=0] 
    - Upper bound: 60*V1+5/2*V+5 
    - Complexity: n 

### Maximum cost of start(V1,V,V7,V21): max([max([6,221/2+nat(V21)*48+nat(V21/2)*24]),52*V1+4+max([8*V1+215/2,8*V1+max([nat(V/4)*10,227*V1+1+max([182/3*V1,1774*V1+1+nat(V)*666+nat(V)*1120*V1+V1/3* (nat(V)*560)+nat(V7)*874+nat(V21)*695+49*V1+25*V1+nat(V/2)*8+nat(V/4)*170+nat(V7/2)*32+nat(V7/4)*10+nat(V21/2)*80])])])])+1 
Asymptotic class: n^2 

Time statistics: 
-------------------------------------
* Partial evaluation computed in 88 ms.
* Invariants computed in 116 ms.
   - Backward Invariants 58 ms.
   - Transitive Invariants 22 ms.
* Refinement performed in 538 ms.
* Termination proved in 41 ms.
* Upper bounds computed in 1541 ms.
   - Equation cost structures 1275 ms.
   - Phase cost structures 164 ms.
   - Chain cost structures 53 ms.
   - Solving cost expressions 30 ms.
* Total analysis performed in 2405 ms.


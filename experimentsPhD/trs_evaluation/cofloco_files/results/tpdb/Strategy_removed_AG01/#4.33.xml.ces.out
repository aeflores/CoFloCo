
Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. recursive  : [sum/3]
1. recursive  : [weight/2]
2. non_recursive  : [start/2]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into sum/3
1. SCC is partially evaluated into weight/2
2. SCC is partially evaluated into start/2

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations sum/3 
* CE 7 is refined into CE [11] 
* CE 6 is refined into CE [12] 
* CE 4 is refined into CE [13] 
* CE 5 is refined into CE [14] 


#### Refined cost equations sum/3 
* CE 11: sum(V1,V,Out) = 0
     [V>=0,V1>=0,Out=0] 
* CE 12: sum(A,B,B) = 1
     [B>=0,A=0] 
* CE 13: sum(V1,V,Out) = 1+ sum(W1,X1,Out)
     [V>=1,V1>=2,V+1=X1,V1=W1+1] 
* CE 14: sum(V1,V,Out) = 1+ sum(W1,V,Out)
     [W1>=0,V>=0,W1+1=V1] 

### Cost equations --> "Loop" of sum/3 
* CEs [13] --> Loop 9 
* CEs [14] --> Loop 10 
* CEs [11] --> Loop 11 
* CEs [12] --> Loop 12 

#### Loops of sum/3 
* Loop 9: sum(V1,V,Out)->  sum(V1',V',Out)
                  [V>=1,V1>=2,V+1=V',V1=V1'+1] 
* Loop 10: sum(V1,V,Out)->  sum(V1',V,Out)
                  [V>=0,V1>=1,V1=V1'+1] 
* Loop 11: sum(V1,V,Out) [V>=0,V1>=0,Out=0] 
* Loop 12: sum(A,B,B) [B>=0,A=0] 

### Ranking functions of CR sum(V1,V,Out) 
* RF of phase [9,10]: [V1]

#### Partial ranking functions of CR sum(V1,V,Out) 
* Partial RF of phase [9,10]:
  - RF of loop [9:1]:
    V1-1
  - RF of loop [10:1]:
    V1


### Resulting Chains:sum(V1,V,Out) 
* [[9,10],12]
* [[9,10],11]
* [12]
* [11]


### Merging Chains  sum/3 into  External patterns of execution 
* [[12]] --> 1 
* [[11],[11,[9,10]]] --> 2 
* [[12,[9,10]]] --> 3 


### Specialization of cost equations weight/2 
* CE 9 is refined into CE [15] 
* CE 10 is refined into CE [16] 
* CE 8 is refined into CE [17,18] 


#### Refined cost equations weight/2 
* CE 15: weight(V1,Out) = 1
     [Out>=0,Out+1=V1] 
* CE 16: weight(V1,Out) = 0
     [V1>=0,Out=0] 
* CE 17: weight(V1,Out) = 1+ sum(V1,W1,X1):2+ weight(Y1,Out)
     [V1>=W1+1,W1>=1,Y1=0,X1=0] 
* CE 18: weight(V1,Out) = 1+ sum(V1,W1,X1):3+ weight(X1,Out)
     [V1+W1>=X1+1,X1>=W1,V1>=W1+1,W1>=1] 

### Cost equations --> "Loop" of weight/2 
* CEs [18] --> Loop 13 
* CEs [17] --> Loop 14 
* CEs [15] --> Loop 15 
* CEs [16] --> Loop 16 

#### Loops of weight/2 
* Loop 13: weight(V1,Out)->  weight(V1',Out)
                  [2*V1>=V1'+2,V1'>=1,V1>=2] 
* Loop 14: weight(V1,Out)->  weight(V1',Out)
                  [V1>=2,V1'=0] 
* Loop 15: weight(V1,Out) [V1>=1,V1=Out+1] 
* Loop 16: weight(V1,Out) [V1>=0,Out=0] 

### Ranking functions of CR weight(V1,Out) 

#### Partial ranking functions of CR weight(V1,Out) 


### Resulting Chains:weight(V1,Out) 
* [[13]]...
* [[13],16]
* [[13],15]
* [[13],14,16]
* [16]
* [15]
* [14,16]


### Merging Chains  weight/2 into  External patterns of execution 
* [[16,14],[16],[16,14,[13]],[16,[13]]] --> 1 
* [[15]] --> 2 
* [[15,[13]]] --> 3 
* [[[13]]] --> 4 


### Specialization of cost equations start/2 
* CE 2 is refined into CE [19,20,21] 
* CE 3 is refined into CE [22,23,24,25] 


#### Refined cost equations start/2 
* CE 19: start(V1,V) = 0+ sum(W1,V,V):1
     [V>=0,W1=0,V1=0] 
* CE 20: start(V1,V) = 0+ sum(V1,V,W1):2
     [V>=0,V1>=0,W1=0] 
* CE 21: start(V1,V) = 0+ sum(V1,V,W1):3
     [V1+V>=W1+1,W1>=V,V>=0] 
* CE 22: start(V1,V) = 0+ weight(V1,W1):1
     [V1>=0,W1=0] 
* CE 23: start(V1,V) = 0+ weight(W1,X1):2
     [X1>=0,X1+1=W1,X1+1=V1] 
* CE 24: start(V1,V) = 0+ weight(V1,W1):3
     [W1>=0,V1>=2] 
* CE 25: start(V1,V) = 0+ weight(V1,W1):4
     [V1>=2] 

### Cost equations --> "Loop" of start/2 
* CEs [25] --> Loop 17 
* CEs [19,20,21,22,23,24] --> Loop 18 

#### Loops of start/2 
* Loop 17: start(V1,V) [V1>=2] 
* Loop 18: start(V1,V) [V1>=0] 

### Ranking functions of CR start(V1,V) 

#### Partial ranking functions of CR start(V1,V) 


### Resulting Chains:start(V1,V) 
* [18]
* [17]...


### Merging Chains  start/2 into  External patterns of execution 
* [[18]] --> 1 
* [[17]] --> 2 


Computing Bounds
=====================================

#### Cost of loops [9,10] 

 * loop 9:sum(V1,V,Out) -> [sum(V1',V',Out')] 
1
 * loop 10:sum(V1,V,Out) -> [sum(V1',V',Out')] 
1
#### Cost of phase [9,10]:sum(V1,V,Out) -> [sum(V1',V',Out')] 
2*it(9)+0
  Such that:aux(1) =< V1
aux(2) =< V1-V1'
it(9) =< aux(1)
it(9) =< aux(2)

#### Cost of phase [9,10]:sum(V1,V,Out) -> [sum(V1',V',Out')] 
2*it(9)+0
  Such that:aux(1) =< V1
aux(2) =< V1-V1'
it(9) =< aux(1)
it(9) =< aux(2)

#### Cost of chains of sum(V1,V,Out):
* Chain [[9,10],12]: 2*it(9)+1
  Such that:aux(3) =< V1
it(9) =< aux(3)

  with precondition: [V>=0,Out>=V,V+V1>=Out+1] 

* Chain [[9,10],11]: 2*it(9)+0
  Such that:aux(4) =< V1
it(9) =< aux(4)

  with precondition: [Out=0,V1>=1,V>=0] 

* Chain [12]: 1
  with precondition: [V1=0,V=Out,V>=0] 

* Chain [11]: 0
  with precondition: [Out=0,V1>=0,V>=0] 


#### Cost of loops [13] 

 * loop 13:weight(V1,Out) -> [weight(V1',Out')] 
2*s(6)+2
  Such that:s(5) =< V1
s(6) =< s(5)

#### Cost of phase [13]:weight(V1,Out) -> [weight(V1',Out')] 
2*it(13)+2*s(7)+0
#### Cost of phase [13]:weight(V1,Out) -> [weight(V1',Out')] 
2*it(13)+2*s(7)+0
#### Cost of phase [13]:weight(V1,Out) -> [weight(V1',Out')] 
2*it(13)+2*s(7)+0
#### Cost of phase [13]:weight(V1,Out) -> [weight(V1',Out')] 
2*it(13)+2*s(7)+0
#### Cost of loops [13] 

 * loop 13:weight(V1,Out) -> [weight(V1',Out')] 
2*s(6)+2
  Such that:s(5) =< V1
s(6) =< s(5)

#### Cost of phase [13]:weight(V1,Out) -> [] 
2*it(13)+1*it([14,16])+2*s(7)+2*s(11)+0
  Such that:it([14,16]) =< 1

#### Cost of chains of weight(V1,Out):
* Chain [[13]]...: 4*it(13)+0
  with precondition: [V1>=2] 

* Chain [[13],16]: 4*it(13)+0
  with precondition: [Out=0,V1>=2] 

* Chain [[13],15]: 4*it(13)+1
  with precondition: [V1>=2,Out>=0] 

* Chain [[13],14,16]: 2*it(13)+1*it([14,16])+2*s(7)+2*s(11)+0
  Such that:it([14,16]) =< 1

  with precondition: [Out=0,V1>=2] 

* Chain [16]: 0
  with precondition: [Out=0,V1>=0] 

* Chain [15]: 1
  with precondition: [V1=Out+1,V1>=1] 

* Chain [14,16]: 2*s(10)+1
  Such that:s(9) =< V1
s(10) =< s(9)

  with precondition: [Out=0,V1>=2] 


#### Cost of chains of start(V1,V):
* Chain [18]: 6*s(21)+1*s(24)+14*s(27)+1
  Such that:s(24) =< 1
aux(18) =< V1
s(21) =< aux(18)

  with precondition: [V1>=0] 

* Chain [17]...: 4*s(29)+0
  with precondition: [V1>=2] 


Closed-form bounds of start(V1,V): 
-------------------------------------
* Chain [18] with precondition: [V1>=0] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [17]... with precondition: [V1>=2] 
    - Upper bound: inf 
    - Complexity: infinity 

### Maximum cost of start(V1,V): inf 
Asymptotic class: infinity 

Time statistics: 
-------------------------------------
* Partial evaluation computed in 6 ms.
* Invariants computed in 19 ms.
   - Backward Invariants 10 ms.
   - Transitive Invariants 4 ms.
* Refinement performed in 26 ms.
* Termination proved in 4 ms.
* Upper bounds computed in 49 ms.
   - Equation cost structures 9 ms.
   - Phase cost structures 28 ms.
   - Chain cost structures 9 ms.
   - Solving cost expressions 1 ms.
* Total analysis performed in 121 ms.



Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. non_recursive  : [fun1/2]
1. non_recursive  : [fun2/2]
2. recursive [non_tail] : [fun/3]
3. non_recursive  : [fun10/2]
4. non_recursive  : [fun11/2]
5. non_recursive  : [fun12/2]
6. non_recursive  : [fun13/2]
7. non_recursive  : [fun15/2]
8. non_recursive  : [fun16/2]
9. non_recursive  : [fun17/2]
10. non_recursive  : [fun18/2]
11. non_recursive  : [fun4/2]
12. non_recursive  : [fun5/2]
13. non_recursive  : [fun6/2]
14. non_recursive  : [fun8/2]
15. non_recursive  : [fun9/2]
16. recursive [non_tail,multiple] : [fun14/6,fun3/3,fun7/6]
17. non_recursive  : [fun20/2]
18. non_recursive  : [fun19/2]
19. non_recursive  : [start/5]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into fun1/2
1. SCC is partially evaluated into fun2/2
2. SCC is partially evaluated into fun/3
3. SCC is partially evaluated into fun10/2
4. SCC is partially evaluated into fun11/2
5. SCC is partially evaluated into fun12/2
6. SCC is partially evaluated into fun13/2
7. SCC is partially evaluated into fun15/2
8. SCC is partially evaluated into fun16/2
9. SCC is partially evaluated into fun17/2
10. SCC is partially evaluated into fun18/2
11. SCC is partially evaluated into fun4/2
12. SCC is partially evaluated into fun5/2
13. SCC is partially evaluated into fun6/2
14. SCC is partially evaluated into fun8/2
15. SCC is partially evaluated into fun9/2
16. SCC is partially evaluated into fun3/3
17. SCC is partially evaluated into fun20/2
18. SCC is partially evaluated into fun19/2
19. SCC is partially evaluated into start/5

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations fun1/2 
* CE 48 is refined into CE [76] 
* CE 47 is refined into CE [77] 


#### Refined cost equations fun1/2 
* CE 76: fun1(V2,Out) = 0
     [V2>=0,Out=0] 
* CE 77: fun1(V2,Out) = 1
     [Out=1,V2=1] 

### Cost equations --> "Loop" of fun1/2 
* CEs [76] --> Loop 48 
* CEs [77] --> Loop 49 

#### Loops of fun1/2 
* Loop 48: fun1(V2,Out) [V2>=0,Out=0] 
* Loop 49: fun1(V2,Out) [Out=1,V2=1] 

### Ranking functions of CR fun1(V2,Out) 

#### Partial ranking functions of CR fun1(V2,Out) 


### Resulting Chains:fun1(V2,Out) 
* [49]
* [48]


### Merging Chains  fun1/2 into  External patterns of execution 
* [[49]] --> 1 
* [[48]] --> 2 


### Specialization of cost equations fun2/2 
* CE 50 is refined into CE [78] 
* CE 49 is refined into CE [79] 


#### Refined cost equations fun2/2 
* CE 78: fun2(V2,Out) = 0
     [V2>=0,Out=0] 
* CE 79: fun2(V2,Out) = 1
     [Out=1,V2=1] 

### Cost equations --> "Loop" of fun2/2 
* CEs [78] --> Loop 50 
* CEs [79] --> Loop 51 

#### Loops of fun2/2 
* Loop 50: fun2(V2,Out) [V2>=0,Out=0] 
* Loop 51: fun2(V2,Out) [Out=1,V2=1] 

### Ranking functions of CR fun2(V2,Out) 

#### Partial ranking functions of CR fun2(V2,Out) 


### Resulting Chains:fun2(V2,Out) 
* [51]
* [50]


### Merging Chains  fun2/2 into  External patterns of execution 
* [[51]] --> 1 
* [[50]] --> 2 


### Specialization of cost equations fun/3 
* CE 43 is refined into CE [80] 
* CE 46 is refined into CE [81] 
* CE 45 is refined into CE [82,83] 
* CE 44 is refined into CE [84,85] 


#### Refined cost equations fun/3 
* CE 80: fun(V2,V1,Out) = 1
     [V1>=1,V2>=1,Out=1] 
* CE 81: fun(V2,V1,Out) = 0
     [V1>=0,V2>=0,Out=0] 
* CE 82: fun(V2,V1,Out) = 1+ fun(W2,V1,X2)+ fun2(Y2,Z2):1
     [V2>=W2+1,W2>=0,V1>=0,X2=1,Z2=1,Y2=1,Out=1] 
* CE 83: fun(V2,V1,Out) = 1+ fun(W2,V1,X2)+ fun2(X2,Y2):2
     [V2>=W2+1,W2>=0,X2>=0,V1>=0,Y2=0,Out=0] 
* CE 84: fun(V2,V1,Out) = 1+ fun(V2,W2,X2)+ fun1(Y2,Z2):1
     [V1>=W2+1,W2>=0,V2>=0,X2=1,Z2=1,Y2=1,Out=1] 
* CE 85: fun(V2,V1,Out) = 1+ fun(V2,W2,X2)+ fun1(X2,Y2):2
     [V1>=W2+1,W2>=0,X2>=0,V2>=0,Y2=0,Out=0] 

### Cost equations --> "Loop" of fun/3 
* CEs [82] --> Loop 52 
* CEs [84] --> Loop 53 
* CEs [83] --> Loop 54 
* CEs [85] --> Loop 55 
* CEs [80] --> Loop 56 
* CEs [81] --> Loop 57 

#### Loops of fun/3 
* Loop 52: fun(V2,V1,Out)->  fun(V2',V1,Out')
                  [V2>=V2'+1,V2'>=0,V1>=0,Out'=1,Out=1] 
* Loop 53: fun(V2,V1,Out)->  fun(V2,V1',Out')
                  [V1>=V1'+1,V1'>=0,V2>=0,Out'=1,Out=1] 
* Loop 54: fun(V2,V1,Out)->  fun(V2',V1,Out')
                  [V2>=V2'+1,Out'>=0,V2'>=0,V1>=0,Out=0] 
* Loop 55: fun(V2,V1,Out)->  fun(V2,V1',Out')
                  [V1>=V1'+1,Out'>=0,V1'>=0,V2>=0,Out=0] 
* Loop 56: fun(V2,V1,Out) [V1>=1,V2>=1,Out=1] 
* Loop 57: fun(V2,V1,Out) [V1>=0,V2>=0,Out=0] 

### Ranking functions of CR fun(V2,V1,Out) 
* RF of phase [52,53]: [V2+V1]
* RF of phase [54,55]: [V2+V1]

#### Partial ranking functions of CR fun(V2,V1,Out) 
* Partial RF of phase [52,53]:
  - RF of loop [52:1]:
    V2
  - RF of loop [53:1]:
    V1
* Partial RF of phase [54,55]:
  - RF of loop [54:1]:
    V2
  - RF of loop [55:1]:
    V1


### Resulting Chains:fun(V2,V1,Out) 
* [[54,55],[52,53],56]
* [[54,55],57]
* [[54,55],56]
* [[52,53],56]
* [57]
* [56]


### Merging Chains  fun/3 into  External patterns of execution 
* [[57],[56,[54,55]],[57,[54,55]],[56,[52,53],[54,55]]] --> 1 
* [[56],[56,[52,53]]] --> 2 


### Specialization of cost equations fun10/2 
* CE 60 is refined into CE [86] 
* CE 59 is refined into CE [87] 


#### Refined cost equations fun10/2 
* CE 86: fun10(V2,Out) = 0
     [V2>=0,Out=0] 
* CE 87: fun10(V2,Out) = 1
     [Out=1,V2=1] 

### Cost equations --> "Loop" of fun10/2 
* CEs [86] --> Loop 58 
* CEs [87] --> Loop 59 

#### Loops of fun10/2 
* Loop 58: fun10(V2,Out) [V2>=0,Out=0] 
* Loop 59: fun10(V2,Out) [Out=1,V2=1] 

### Ranking functions of CR fun10(V2,Out) 

#### Partial ranking functions of CR fun10(V2,Out) 


### Resulting Chains:fun10(V2,Out) 
* [59]
* [58]


### Merging Chains  fun10/2 into  External patterns of execution 
* [[59]] --> 1 
* [[58]] --> 2 


### Specialization of cost equations fun11/2 
* CE 62 is refined into CE [88] 
* CE 61 is refined into CE [89] 


#### Refined cost equations fun11/2 
* CE 88: fun11(V2,Out) = 0
     [V2>=0,Out=0] 
* CE 89: fun11(V2,Out) = 1
     [Out=1,V2=1] 

### Cost equations --> "Loop" of fun11/2 
* CEs [88] --> Loop 60 
* CEs [89] --> Loop 61 

#### Loops of fun11/2 
* Loop 60: fun11(V2,Out) [V2>=0,Out=0] 
* Loop 61: fun11(V2,Out) [Out=1,V2=1] 

### Ranking functions of CR fun11(V2,Out) 

#### Partial ranking functions of CR fun11(V2,Out) 


### Resulting Chains:fun11(V2,Out) 
* [61]
* [60]


### Merging Chains  fun11/2 into  External patterns of execution 
* [[61]] --> 1 
* [[60]] --> 2 


### Specialization of cost equations fun12/2 
* CE 64 is refined into CE [90] 
* CE 63 is refined into CE [91] 


#### Refined cost equations fun12/2 
* CE 90: fun12(V2,Out) = 0
     [V2>=0,Out=0] 
* CE 91: fun12(V2,Out) = 1
     [Out=1,V2=1] 

### Cost equations --> "Loop" of fun12/2 
* CEs [90] --> Loop 62 
* CEs [91] --> Loop 63 

#### Loops of fun12/2 
* Loop 62: fun12(V2,Out) [V2>=0,Out=0] 
* Loop 63: fun12(V2,Out) [Out=1,V2=1] 

### Ranking functions of CR fun12(V2,Out) 

#### Partial ranking functions of CR fun12(V2,Out) 


### Resulting Chains:fun12(V2,Out) 
* [63]
* [62]


### Merging Chains  fun12/2 into  External patterns of execution 
* [[63]] --> 1 
* [[62]] --> 2 


### Specialization of cost equations fun13/2 
* CE 66 is refined into CE [92] 
* CE 65 is refined into CE [93] 


#### Refined cost equations fun13/2 
* CE 92: fun13(V2,Out) = 0
     [V2>=0,Out=0] 
* CE 93: fun13(V2,Out) = 1
     [Out=1,V2=1] 

### Cost equations --> "Loop" of fun13/2 
* CEs [92] --> Loop 64 
* CEs [93] --> Loop 65 

#### Loops of fun13/2 
* Loop 64: fun13(V2,Out) [V2>=0,Out=0] 
* Loop 65: fun13(V2,Out) [Out=1,V2=1] 

### Ranking functions of CR fun13(V2,Out) 

#### Partial ranking functions of CR fun13(V2,Out) 


### Resulting Chains:fun13(V2,Out) 
* [65]
* [64]


### Merging Chains  fun13/2 into  External patterns of execution 
* [[65]] --> 1 
* [[64]] --> 2 


### Specialization of cost equations fun15/2 
* CE 40 is refined into CE [94] 
* CE 39 is refined into CE [95] 


#### Refined cost equations fun15/2 
* CE 94: fun15(V2,Out) = 0
     [V2>=0,Out=0] 
* CE 95: fun15(V2,Out) = 1
     [Out=1,V2=1] 

### Cost equations --> "Loop" of fun15/2 
* CEs [94] --> Loop 66 
* CEs [95] --> Loop 67 

#### Loops of fun15/2 
* Loop 66: fun15(V2,Out) [V2>=0,Out=0] 
* Loop 67: fun15(V2,Out) [Out=1,V2=1] 

### Ranking functions of CR fun15(V2,Out) 

#### Partial ranking functions of CR fun15(V2,Out) 


### Resulting Chains:fun15(V2,Out) 
* [67]
* [66]


### Merging Chains  fun15/2 into  External patterns of execution 
* [[67]] --> 1 
* [[66]] --> 2 


### Specialization of cost equations fun16/2 
* CE 68 is refined into CE [96] 
* CE 67 is refined into CE [97] 


#### Refined cost equations fun16/2 
* CE 96: fun16(V2,Out) = 0
     [V2>=0,Out=0] 
* CE 97: fun16(V2,Out) = 1
     [Out=1,V2=1] 

### Cost equations --> "Loop" of fun16/2 
* CEs [96] --> Loop 68 
* CEs [97] --> Loop 69 

#### Loops of fun16/2 
* Loop 68: fun16(V2,Out) [V2>=0,Out=0] 
* Loop 69: fun16(V2,Out) [Out=1,V2=1] 

### Ranking functions of CR fun16(V2,Out) 

#### Partial ranking functions of CR fun16(V2,Out) 


### Resulting Chains:fun16(V2,Out) 
* [69]
* [68]


### Merging Chains  fun16/2 into  External patterns of execution 
* [[69]] --> 1 
* [[68]] --> 2 


### Specialization of cost equations fun17/2 
* CE 70 is refined into CE [98] 
* CE 69 is refined into CE [99] 


#### Refined cost equations fun17/2 
* CE 98: fun17(V2,Out) = 0
     [V2>=0,Out=0] 
* CE 99: fun17(V2,Out) = 1
     [Out=1,V2=1] 

### Cost equations --> "Loop" of fun17/2 
* CEs [98] --> Loop 70 
* CEs [99] --> Loop 71 

#### Loops of fun17/2 
* Loop 70: fun17(V2,Out) [V2>=0,Out=0] 
* Loop 71: fun17(V2,Out) [Out=1,V2=1] 

### Ranking functions of CR fun17(V2,Out) 

#### Partial ranking functions of CR fun17(V2,Out) 


### Resulting Chains:fun17(V2,Out) 
* [71]
* [70]


### Merging Chains  fun17/2 into  External patterns of execution 
* [[71]] --> 1 
* [[70]] --> 2 


### Specialization of cost equations fun18/2 
* CE 72 is refined into CE [100] 
* CE 71 is refined into CE [101] 


#### Refined cost equations fun18/2 
* CE 100: fun18(V2,Out) = 0
     [V2>=0,Out=0] 
* CE 101: fun18(V2,Out) = 1
     [Out=1,V2=1] 

### Cost equations --> "Loop" of fun18/2 
* CEs [100] --> Loop 72 
* CEs [101] --> Loop 73 

#### Loops of fun18/2 
* Loop 72: fun18(V2,Out) [V2>=0,Out=0] 
* Loop 73: fun18(V2,Out) [Out=1,V2=1] 

### Ranking functions of CR fun18(V2,Out) 

#### Partial ranking functions of CR fun18(V2,Out) 


### Resulting Chains:fun18(V2,Out) 
* [73]
* [72]


### Merging Chains  fun18/2 into  External patterns of execution 
* [[73]] --> 1 
* [[72]] --> 2 


### Specialization of cost equations fun4/2 
* CE 52 is refined into CE [102] 
* CE 51 is refined into CE [103] 


#### Refined cost equations fun4/2 
* CE 102: fun4(V2,Out) = 0
     [V2>=0,Out=0] 
* CE 103: fun4(V2,Out) = 1
     [Out=1,V2=1] 

### Cost equations --> "Loop" of fun4/2 
* CEs [102] --> Loop 74 
* CEs [103] --> Loop 75 

#### Loops of fun4/2 
* Loop 74: fun4(V2,Out) [V2>=0,Out=0] 
* Loop 75: fun4(V2,Out) [Out=1,V2=1] 

### Ranking functions of CR fun4(V2,Out) 

#### Partial ranking functions of CR fun4(V2,Out) 


### Resulting Chains:fun4(V2,Out) 
* [75]
* [74]


### Merging Chains  fun4/2 into  External patterns of execution 
* [[75]] --> 1 
* [[74]] --> 2 


### Specialization of cost equations fun5/2 
* CE 54 is refined into CE [104] 
* CE 53 is refined into CE [105] 


#### Refined cost equations fun5/2 
* CE 104: fun5(V2,Out) = 0
     [V2>=0,Out=0] 
* CE 105: fun5(V2,Out) = 1
     [Out=1,V2=1] 

### Cost equations --> "Loop" of fun5/2 
* CEs [104] --> Loop 76 
* CEs [105] --> Loop 77 

#### Loops of fun5/2 
* Loop 76: fun5(V2,Out) [V2>=0,Out=0] 
* Loop 77: fun5(V2,Out) [Out=1,V2=1] 

### Ranking functions of CR fun5(V2,Out) 

#### Partial ranking functions of CR fun5(V2,Out) 


### Resulting Chains:fun5(V2,Out) 
* [77]
* [76]


### Merging Chains  fun5/2 into  External patterns of execution 
* [[77]] --> 1 
* [[76]] --> 2 


### Specialization of cost equations fun6/2 
* CE 56 is refined into CE [106] 
* CE 55 is refined into CE [107] 


#### Refined cost equations fun6/2 
* CE 106: fun6(V2,Out) = 0
     [V2>=0,Out=0] 
* CE 107: fun6(V2,Out) = 1
     [Out=1,V2=1] 

### Cost equations --> "Loop" of fun6/2 
* CEs [106] --> Loop 78 
* CEs [107] --> Loop 79 

#### Loops of fun6/2 
* Loop 78: fun6(V2,Out) [V2>=0,Out=0] 
* Loop 79: fun6(V2,Out) [Out=1,V2=1] 

### Ranking functions of CR fun6(V2,Out) 

#### Partial ranking functions of CR fun6(V2,Out) 


### Resulting Chains:fun6(V2,Out) 
* [79]
* [78]


### Merging Chains  fun6/2 into  External patterns of execution 
* [[79]] --> 1 
* [[78]] --> 2 


### Specialization of cost equations fun8/2 
* CE 42 is refined into CE [108] 
* CE 41 is refined into CE [109] 


#### Refined cost equations fun8/2 
* CE 108: fun8(V2,Out) = 0
     [V2>=0,Out=0] 
* CE 109: fun8(V2,Out) = 1
     [Out=1,V2=1] 

### Cost equations --> "Loop" of fun8/2 
* CEs [108] --> Loop 80 
* CEs [109] --> Loop 81 

#### Loops of fun8/2 
* Loop 80: fun8(V2,Out) [V2>=0,Out=0] 
* Loop 81: fun8(V2,Out) [Out=1,V2=1] 

### Ranking functions of CR fun8(V2,Out) 

#### Partial ranking functions of CR fun8(V2,Out) 


### Resulting Chains:fun8(V2,Out) 
* [81]
* [80]


### Merging Chains  fun8/2 into  External patterns of execution 
* [[81]] --> 1 
* [[80]] --> 2 


### Specialization of cost equations fun9/2 
* CE 58 is refined into CE [110] 
* CE 57 is refined into CE [111] 


#### Refined cost equations fun9/2 
* CE 110: fun9(V2,Out) = 0
     [V2>=0,Out=0] 
* CE 111: fun9(V2,Out) = 1
     [Out=1,V2=1] 

### Cost equations --> "Loop" of fun9/2 
* CEs [110] --> Loop 82 
* CEs [111] --> Loop 83 

#### Loops of fun9/2 
* Loop 82: fun9(V2,Out) [V2>=0,Out=0] 
* Loop 83: fun9(V2,Out) [Out=1,V2=1] 

### Ranking functions of CR fun9(V2,Out) 

#### Partial ranking functions of CR fun9(V2,Out) 


### Resulting Chains:fun9(V2,Out) 
* [83]
* [82]


### Merging Chains  fun9/2 into  External patterns of execution 
* [[83]] --> 1 
* [[82]] --> 2 


### Specialization of cost equations fun3/3 
* CE 38 is refined into CE [112] 
* CE 37 is refined into CE [113,114,115] 
* CE 33 is refined into CE [116,117] 
* CE 36 is refined into CE [118,119] 
* CE 28 is refined into CE [120,121] 
* CE 32 is refined into CE [122,123] 
* CE 30 is refined into CE [124,125] 
* CE 35 is refined into CE [126,127] 
* CE 29 is refined into CE [128,129] 
* CE 34 is refined into CE [130,131] 
* CE 27 is refined into CE [132,133] 
* CE 31 is refined into CE [134,135] 
* CE 24 is refined into CE [136] 
* CE 25 is refined into CE [137,138] 
* CE 26 is refined into CE [139,140] 


#### Refined cost equations fun3/3 
* CE 112: fun3(V2,V1,Out) = 0
     [V1>=0,V2>=0,Out=0] 
* CE 113: fun3(V2,V1,Out) = 1+ fun(W2,X2,Y2):1+ fun18(Z2,A3):2
     [X2>=0,W2>=0,W2+X2+1=V1,A3=0,Z2=0,Y2=0,Out=0,V2=1] 
* CE 114: fun3(V2,V1,Out) = 1+ fun(W2,X2,Y2):2+ fun18(Z2,A3):1
     [X2>=1,W2>=1,W2+X2+1=V1,A3=1,Z2=1,Y2=1,Out=1,V2=1] 
* CE 115: fun3(V2,V1,Out) = 1+ fun(W2,X2,Y2):2+ fun18(Z2,A3):2
     [X2>=1,W2>=1,W2+X2+1=V1,A3=0,Z2=1,Y2=1,Out=0,V2=1] 
* CE 116: fun3(V2,V1,Out) = 1+ fun3(W2,X2,Y2)+ fun12(Z2,A3):1
     [V2>=W2+2,W2>=1,V1>=1,V2+V1=W2+X2,Y2=1,A3=1,Z2=1,Out=1] 
* CE 117: fun3(V2,V1,Out) = 1+ fun3(W2,X2,Y2)+ fun12(Y2,Z2):2
     [V2>=W2+2,W2>=1,Y2>=0,V1>=1,V2+V1=W2+X2,Z2=0,Out=0] 
* CE 118: fun3(V2,V1,Out) = 1+ fun3(W2,X2,Y2)+ fun17(Z2,A3):1
     [V2>=W2+2,W2>=1,V1>=1,V2+V1=W2+X2,Y2=1,A3=1,Z2=1,Out=1] 
* CE 119: fun3(V2,V1,Out) = 1+ fun3(W2,X2,Y2)+ fun17(Y2,Z2):2
     [V2>=W2+2,W2>=1,Y2>=0,V1>=1,V2+V1=W2+X2,Z2=0,Out=0] 
* CE 120: fun3(V2,V1,Out) = 1+ fun3(W2,V1,X2)+ fun5(Y2,Z2):1
     [2*V2>=W2+1,W2>=V2+2,V1>=0,X2=1,Z2=1,Y2=1,Out=1] 
* CE 121: fun3(V2,V1,Out) = 1+ fun3(W2,V1,X2)+ fun5(X2,Y2):2
     [2*V2>=W2+1,W2>=V2+2,X2>=0,V1>=0,Y2=0,Out=0] 
* CE 122: fun3(V2,V1,Out) = 1+ fun3(W2,V1,X2)+ fun11(Y2,Z2):1
     [2*V2>=W2+1,W2>=V2+2,V1>=0,X2=1,Z2=1,Y2=1,Out=1] 
* CE 123: fun3(V2,V1,Out) = 1+ fun3(W2,V1,X2)+ fun11(X2,Y2):2
     [2*V2>=W2+1,W2>=V2+2,X2>=0,V1>=0,Y2=0,Out=0] 
* CE 124: fun3(V2,V1,Out) = 1+ fun3(W2,V1,X2)+ fun9(Y2,Z2):1
     [V1>=0,V2>=3,V2=W2+1,X2=1,Z2=1,Y2=1,Out=1] 
* CE 125: fun3(V2,V1,Out) = 1+ fun3(W2,V1,X2)+ fun9(X2,Y2):2
     [X2>=0,V1>=0,V2>=3,V2=W2+1,Y2=0,Out=0] 
* CE 126: fun3(V2,V1,Out) = 1+ fun3(W2,V1,X2)+ fun16(Y2,Z2):1
     [V1>=0,V2>=3,V2=W2+1,X2=1,Z2=1,Y2=1,Out=1] 
* CE 127: fun3(V2,V1,Out) = 1+ fun3(W2,V1,X2)+ fun16(X2,Y2):2
     [X2>=0,V1>=0,V2>=3,V2=W2+1,Y2=0,Out=0] 
* CE 128: fun3(V2,V1,Out) = 1+ fun3(V2,V1,W2)+ fun6(X2,Y2):1
     [V1>=0,V2>=3,W2=1,Y2=1,X2=1,Out=1] 
* CE 129: fun3(V2,V1,Out) = 1+ fun3(V2,V1,W2)+ fun6(W2,X2):2
     [W2>=0,V1>=0,V2>=3,X2=0,Out=0] 
* CE 130: fun3(V2,V1,Out) = 1+ fun3(V2,V1,W2)+ fun13(X2,Y2):1
     [V1>=0,V2>=3,W2=1,Y2=1,X2=1,Out=1] 
* CE 131: fun3(V2,V1,Out) = 1+ fun3(V2,V1,W2)+ fun13(W2,X2):2
     [W2>=0,V1>=0,V2>=3,X2=0,Out=0] 
* CE 132: fun3(V2,V1,Out) = 1+ fun3(W2,V1,X2)+ fun4(Y2,Z2):1
     [V1>=0,V2>=3,V2+1=W2,X2=1,Z2=1,Y2=1,Out=1] 
* CE 133: fun3(V2,V1,Out) = 1+ fun3(W2,V1,X2)+ fun4(X2,Y2):2
     [X2>=0,V1>=0,V2>=3,V2+1=W2,Y2=0,Out=0] 
* CE 134: fun3(V2,V1,Out) = 1+ fun3(W2,V1,X2)+ fun10(Y2,Z2):1
     [V1>=0,V2>=3,V2+1=W2,X2=1,Z2=1,Y2=1,Out=1] 
* CE 135: fun3(V2,V1,Out) = 1+ fun3(W2,V1,X2)+ fun10(X2,Y2):2
     [X2>=0,V1>=0,V2>=3,V2+1=W2,Y2=0,Out=0] 
* CE 136: fun3(V2,V1,Out) = 1+ fun3(W2,V1,X2)
     [V2>=W2+1,X2>=0,W2>=2,V1>=0,Out=0] 
* CE 137: fun3(V2,V1,Out) = 2+ fun3(W2,V1,X2)+ fun3(Y2,V1,Z2)+ fun15(A3,B3):1
     [W2+Y2>=V2+1,V2>=Y2+1,V2>=W2+1,V1>=0,Z2=1,X2=1,B3=1,A3=1,Out=1] 
* CE 138: fun3(V2,V1,Out) = 2+ fun3(W2,V1,X2)+ fun3(Y2,V1,Z2)+ fun15(Z2,A3):2
     [W2+Y2>=V2+1,V2>=Y2+1,V2>=W2+1,Z2>=0,V1>=0,X2=1,A3=0,Out=0] 
* CE 139: fun3(V2,V1,Out) = 2+ fun3(W2,V1,X2)+ fun3(Y2,V1,Z2)+ fun8(A3,B3):1
     [W2+Y2>=V2+1,V2>=Y2+1,V2>=W2+1,V1>=0,Z2=1,X2=1,B3=1,A3=1,Out=1] 
* CE 140: fun3(V2,V1,Out) = 2+ fun3(W2,V1,X2)+ fun3(Y2,V1,Z2)+ fun8(Z2,A3):2
     [W2+Y2>=V2+1,V2>=Y2+1,V2>=W2+1,Z2>=0,V1>=0,X2=1,A3=0,Out=0] 

### Cost equations --> "Loop" of fun3/3 
* CEs [137,139] --> Loop 84 
* CEs [138,140] --> Loop 85 
* CEs [116,118] --> Loop 86 
* CEs [120,122] --> Loop 87 
* CEs [124,126] --> Loop 88 
* CEs [128,130] --> Loop 89 
* CEs [132,134] --> Loop 90 
* CEs [117,119] --> Loop 91 
* CEs [121,123] --> Loop 92 
* CEs [125,127,136] --> Loop 93 
* CEs [129,131] --> Loop 94 
* CEs [133,135] --> Loop 95 
* CEs [114] --> Loop 96 
* CEs [112,113,115] --> Loop 97 

#### Loops of fun3/3 
* Loop 84: fun3(V2,V1,Out)->  fun3(V2',V1,Out')  fun3(V2'2,V1,Out'2)
                  [V2'+V2'2>=V2+1,V2>=V2'2+1,V2>=V2'+1,V1>=0,Out'2=1,Out'=1,Out=1] 
* Loop 85: fun3(V2,V1,Out)->  fun3(V2',V1,Out')  fun3(V2'2,V1,Out'2)
                  [V2'+V2'2>=V2+1,V2>=V2'2+1,V2>=V2'+1,Out'2>=0,V1>=0,Out'=1,Out=0] 
* Loop 86: fun3(V2,V1,Out)->  fun3(V2',V1',Out')
                  [V2>=V2'+2,V2'>=1,V1>=1,V2+V1=V2'+V1',Out'=1,Out=1] 
* Loop 87: fun3(V2,V1,Out)->  fun3(V2',V1,Out')
                  [2*V2>=V2'+1,V2'>=V2+2,V1>=0,Out'=1,Out=1] 
* Loop 88: fun3(V2,V1,Out)->  fun3(V2',V1,Out')
                  [V1>=0,V2>=3,V2=V2'+1,Out'=1,Out=1] 
* Loop 89: fun3(V2,V1,Out)->  fun3(V2,V1,Out')
                  [V1>=0,V2>=3,Out'=1,Out=1] 
* Loop 90: fun3(V2,V1,Out)->  fun3(V2',V1,Out')
                  [V1>=0,V2>=3,V2+1=V2',Out'=1,Out=1] 
* Loop 91: fun3(V2,V1,Out)->  fun3(V2',V1',Out')
                  [V2>=V2'+2,Out'>=0,V2'>=1,V1>=1,V2+V1=V2'+V1',Out=0] 
* Loop 92: fun3(V2,V1,Out)->  fun3(V2',V1,Out')
                  [2*V2>=V2'+1,V2'>=V2+2,Out'>=0,V1>=0,Out=0] 
* Loop 93: fun3(V2,V1,Out)->  fun3(V2',V1,Out')
                  [V2>=V2'+1,Out'>=0,V2'>=2,V1>=0,Out=0] 
* Loop 94: fun3(V2,V1,Out)->  fun3(V2,V1,Out')
                  [Out'>=0,V1>=0,V2>=3,Out=0] 
* Loop 95: fun3(V2,V1,Out)->  fun3(V2',V1,Out')
                  [Out'>=0,V1>=0,V2>=3,V2+1=V2',Out=0] 
* Loop 96: fun3(V2,V1,Out) [V1>=3,Out=1,V2=1] 
* Loop 97: fun3(V2,V1,Out) [V1>=0,V2>=0,Out=0] 

### Ranking functions of CR fun3(V2,V1,Out) 

#### Partial ranking functions of CR fun3(V2,V1,Out) 
* Partial RF of phase [84,86,87,88,89,90]:
  - RF of loop [84:1,84:2,88:1]:
    V2-2 depends on loops [87:1,90:1] 
  - RF of loop [86:1]:
    V2/2-1 depends on loops [87:1,90:1] 
* Partial RF of phase [85,91,92,93,94,95]:
  - RF of loop [85:1,85:2,93:1]:
    V2-2 depends on loops [92:1,95:1] 
  - RF of loop [91:1]:
    V2/2-1 depends on loops [92:1,95:1] 


### Resulting Chains:fun3(V2,V1,Out) 
* [multiple([85,91,92,93,94,95],[[],[multiple([84,86,87,88,89,90],[[],[96]])],[97],[96]])]...
* [multiple([84,86,87,88,89,90],[[],[96]])]...
* [97]
* [96]


### Merging Chains  fun3/3 into  External patterns of execution 
* [[96]] --> 1 
* [[97]] --> 2 
* [[multiple([85,91,92,93,94,95],[[],[multiple([84,86,87,88,89,90],[[],[96]])],[97],[96]])]] --> 3 
* [[multiple([84,86,87,88,89,90],[[],[96]])]] --> 4 


### Specialization of cost equations fun20/2 
* CE 75 is refined into CE [141] 
* CE 74 is refined into CE [142] 


#### Refined cost equations fun20/2 
* CE 141: fun20(V2,Out) = 0
     [V2>=0,Out=0] 
* CE 142: fun20(V2,Out) = 1
     [Out=1,V2=1] 

### Cost equations --> "Loop" of fun20/2 
* CEs [141] --> Loop 98 
* CEs [142] --> Loop 99 

#### Loops of fun20/2 
* Loop 98: fun20(V2,Out) [V2>=0,Out=0] 
* Loop 99: fun20(V2,Out) [Out=1,V2=1] 

### Ranking functions of CR fun20(V2,Out) 

#### Partial ranking functions of CR fun20(V2,Out) 


### Resulting Chains:fun20(V2,Out) 
* [99]
* [98]


### Merging Chains  fun20/2 into  External patterns of execution 
* [[99]] --> 1 
* [[98]] --> 2 


### Specialization of cost equations fun19/2 
* CE 73 is refined into CE [143,144,145] 


#### Refined cost equations fun19/2 
* CE 143: fun19(V2,Out) = 1+ fun3(W2,X2,Y2):2+ fun20(Z2,A3):2
     [W2>=2,W2=V2+2,A3=0,Z2=0,Y2=0,X2=1,Out=0] 
* CE 144: fun19(V2,Out) = 1+ fun3(W2,X2,Y2):3
     [W2>=3,W2=V2+2,Z2=0,Y2=0,X2=1] 
* CE 145: fun19(V2,Out) = 1+ fun3(W2,X2,Y2):4
     [W2>=3,W2=V2+2,Z2=1,Y2=1,X2=1] 

### Cost equations --> "Loop" of fun19/2 
* CEs [144,145] --> Loop 100 
* CEs [143] --> Loop 101 

#### Loops of fun19/2 
* Loop 100: fun19(V2,Out) [V2>=1] 
* Loop 101: fun19(V2,Out) [V2>=0,Out=0] 

### Ranking functions of CR fun19(V2,Out) 

#### Partial ranking functions of CR fun19(V2,Out) 


### Resulting Chains:fun19(V2,Out) 
* [101]
* [100]...


### Merging Chains  fun19/2 into  External patterns of execution 
* [[101]] --> 1 
* [[100]] --> 2 


### Specialization of cost equations start/5 
* CE 2 is refined into CE [146] 
* CE 3 is refined into CE [147,148,149] 
* CE 4 is refined into CE [150,151,152] 
* CE 5 is refined into CE [153,154] 
* CE 6 is refined into CE [155,156] 
* CE 7 is refined into CE [157,158] 
* CE 8 is refined into CE [159,160,161,162] 
* CE 9 is refined into CE [163,164] 
* CE 10 is refined into CE [165,166] 
* CE 11 is refined into CE [167,168] 
* CE 12 is refined into CE [169,170] 
* CE 13 is refined into CE [171,172] 
* CE 14 is refined into CE [173,174] 
* CE 15 is refined into CE [175,176] 
* CE 16 is refined into CE [177,178] 
* CE 17 is refined into CE [179,180] 
* CE 18 is refined into CE [181,182] 
* CE 19 is refined into CE [183,184] 
* CE 20 is refined into CE [185,186] 
* CE 21 is refined into CE [187,188] 
* CE 22 is refined into CE [189,190] 
* CE 23 is refined into CE [191,192] 


#### Refined cost equations start/5 
* CE 146: start(V2,V1,V3,V5,V4) = 0
     [V4>=0,V5>=0,V3>=0,V1>=0,V2>=0] 
* CE 147: start(V2,V1,V3,V5,V4) = 1+ fun3(W5,V4,X5):2+ fun15(Y5,Z5):2
     [W5>=V3+V5+2,V4>=0,V5>=0,V3>=0,W5=V1+V3+V5+2,Z5=0,Y5=0,X5=0,V2=1] 
* CE 148: start(V2,V1,V3,V5,V4) = 1+ fun3(W5,V4,X5):3
     [W5>=V3+V5+2,V4>=0,W5>=3,V5>=0,V3>=0,W5=V1+V3+V5+2,Y5=0,X5=0,V2=1] 
* CE 149: start(V2,V1,V3,V5,V4) = 1+ fun3(W5,V4,X5):4
     [W5>=V3+V5+2,V4>=0,W5>=3,V5>=0,V3>=0,W5=V1+V3+V5+2,Y5=1,X5=1,V2=1] 
* CE 150: start(V2,V1,V3,V5,V4) = 1+ fun3(W5,V4,X5):2+ fun8(Y5,Z5):2
     [W5>=V3+V5+2,V4>=0,V5>=0,V3>=0,W5=V1+V3+V5+2,Z5=0,Y5=0,X5=0,V2=1] 
* CE 151: start(V2,V1,V3,V5,V4) = 1+ fun3(W5,V4,X5):3
     [W5>=V3+V5+2,V4>=0,W5>=3,V5>=0,V3>=0,W5=V1+V3+V5+2,Y5=0,X5=0,V2=1] 
* CE 152: start(V2,V1,V3,V5,V4) = 1+ fun3(W5,V4,X5):4
     [W5>=V3+V5+2,V4>=0,W5>=3,V5>=0,V3>=0,W5=V1+V3+V5+2,Y5=1,X5=1,V2=1] 
* CE 153: start(V2,V1,V3,V5,V4) = 0+ fun(V2,V1,W5):1
     [V1>=0,V2>=0,W5=0] 
* CE 154: start(V2,V1,V3,V5,V4) = 0+ fun(V2,V1,W5):2
     [V1>=1,V2>=1,W5=1] 
* CE 155: start(V2,V1,V3,V5,V4) = 0+ fun1(W5,X5):1
     [X5=1,W5=1,V2=1] 
* CE 156: start(V2,V1,V3,V5,V4) = 0+ fun1(V2,W5):2
     [V2>=0,W5=0] 
* CE 157: start(V2,V1,V3,V5,V4) = 0+ fun2(W5,X5):1
     [X5=1,W5=1,V2=1] 
* CE 158: start(V2,V1,V3,V5,V4) = 0+ fun2(V2,W5):2
     [V2>=0,W5=0] 
* CE 159: start(V2,V1,V3,V5,V4) = 0+ fun3(W5,V1,X5):1
     [V1>=3,X5=1,W5=1,V2=1] 
* CE 160: start(V2,V1,V3,V5,V4) = 0+ fun3(V2,V1,W5):2
     [V1>=0,V2>=0,W5=0] 
* CE 161: start(V2,V1,V3,V5,V4) = 0+ fun3(V2,V1,W5):3
     [V1>=0,V2>=3,W5=0] 
* CE 162: start(V2,V1,V3,V5,V4) = 0+ fun3(V2,V1,W5):4
     [V1>=0,V2>=3,W5=1] 
* CE 163: start(V2,V1,V3,V5,V4) = 0+ fun4(W5,X5):1
     [X5=1,W5=1,V2=1] 
* CE 164: start(V2,V1,V3,V5,V4) = 0+ fun4(V2,W5):2
     [V2>=0,W5=0] 
* CE 165: start(V2,V1,V3,V5,V4) = 0+ fun5(W5,X5):1
     [X5=1,W5=1,V2=1] 
* CE 166: start(V2,V1,V3,V5,V4) = 0+ fun5(V2,W5):2
     [V2>=0,W5=0] 
* CE 167: start(V2,V1,V3,V5,V4) = 0+ fun6(W5,X5):1
     [X5=1,W5=1,V2=1] 
* CE 168: start(V2,V1,V3,V5,V4) = 0+ fun6(V2,W5):2
     [V2>=0,W5=0] 
* CE 169: start(V2,V1,V3,V5,V4) = 0+ fun8(W5,X5):1
     [X5=1,W5=1,V2=1] 
* CE 170: start(V2,V1,V3,V5,V4) = 0+ fun8(V2,W5):2
     [V2>=0,W5=0] 
* CE 171: start(V2,V1,V3,V5,V4) = 0+ fun9(W5,X5):1
     [X5=1,W5=1,V2=1] 
* CE 172: start(V2,V1,V3,V5,V4) = 0+ fun9(V2,W5):2
     [V2>=0,W5=0] 
* CE 173: start(V2,V1,V3,V5,V4) = 0+ fun10(W5,X5):1
     [X5=1,W5=1,V2=1] 
* CE 174: start(V2,V1,V3,V5,V4) = 0+ fun10(V2,W5):2
     [V2>=0,W5=0] 
* CE 175: start(V2,V1,V3,V5,V4) = 0+ fun11(W5,X5):1
     [X5=1,W5=1,V2=1] 
* CE 176: start(V2,V1,V3,V5,V4) = 0+ fun11(V2,W5):2
     [V2>=0,W5=0] 
* CE 177: start(V2,V1,V3,V5,V4) = 0+ fun12(W5,X5):1
     [X5=1,W5=1,V2=1] 
* CE 178: start(V2,V1,V3,V5,V4) = 0+ fun12(V2,W5):2
     [V2>=0,W5=0] 
* CE 179: start(V2,V1,V3,V5,V4) = 0+ fun13(W5,X5):1
     [X5=1,W5=1,V2=1] 
* CE 180: start(V2,V1,V3,V5,V4) = 0+ fun13(V2,W5):2
     [V2>=0,W5=0] 
* CE 181: start(V2,V1,V3,V5,V4) = 0+ fun15(W5,X5):1
     [X5=1,W5=1,V2=1] 
* CE 182: start(V2,V1,V3,V5,V4) = 0+ fun15(V2,W5):2
     [V2>=0,W5=0] 
* CE 183: start(V2,V1,V3,V5,V4) = 0+ fun16(W5,X5):1
     [X5=1,W5=1,V2=1] 
* CE 184: start(V2,V1,V3,V5,V4) = 0+ fun16(V2,W5):2
     [V2>=0,W5=0] 
* CE 185: start(V2,V1,V3,V5,V4) = 0+ fun17(W5,X5):1
     [X5=1,W5=1,V2=1] 
* CE 186: start(V2,V1,V3,V5,V4) = 0+ fun17(V2,W5):2
     [V2>=0,W5=0] 
* CE 187: start(V2,V1,V3,V5,V4) = 0+ fun18(W5,X5):1
     [X5=1,W5=1,V2=1] 
* CE 188: start(V2,V1,V3,V5,V4) = 0+ fun18(V2,W5):2
     [V2>=0,W5=0] 
* CE 189: start(V2,V1,V3,V5,V4) = 0+ fun19(V2,W5):1
     [V2>=0,W5=0] 
* CE 190: start(V2,V1,V3,V5,V4) = 0+ fun19(V2,W5):2
     [V2>=1] 
* CE 191: start(V2,V1,V3,V5,V4) = 0+ fun20(W5,X5):1
     [X5=1,W5=1,V2=1] 
* CE 192: start(V2,V1,V3,V5,V4) = 0+ fun20(V2,W5):2
     [V2>=0,W5=0] 

### Cost equations --> "Loop" of start/5 
* CEs [146,147,150,153,154,155,156,157,158,159,160,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,191,192] --> Loop 102 
* CEs [148,149,151,152,161,162,190] --> Loop 103 

#### Loops of start/5 
* Loop 102: start(V2,V1,V3,V5,V4) [V2>=0] 
* Loop 103: start(V2,V1,V3,V5,V4) [V2>=1] 

### Ranking functions of CR start(V2,V1,V3,V5,V4) 

#### Partial ranking functions of CR start(V2,V1,V3,V5,V4) 


### Resulting Chains:start(V2,V1,V3,V5,V4) 
* [103]...
* [102]


### Merging Chains  start/5 into  External patterns of execution 
* [[102]] --> 1 
* [[103]] --> 2 


Computing Bounds
=====================================

#### Cost of chains of fun1(V2,Out):
* Chain [49]: 1
  with precondition: [V2=1,Out=1] 

* Chain [48]: 0
  with precondition: [Out=0,V2>=0] 


#### Cost of chains of fun2(V2,Out):
* Chain [51]: 1
  with precondition: [V2=1,Out=1] 

* Chain [50]: 0
  with precondition: [Out=0,V2>=0] 


#### Cost of loops [52,53] 

 * loop 52:fun(V2,V1,Out) -> [fun(V2',V1',Out')] 
2
 * loop 53:fun(V2,V1,Out) -> [fun(V2',V1',Out')] 
2
#### Cost of phase [52,53]:fun(V2,V1,Out) -> [fun(V2',V1',Out')] 
2*it(52)+2*it(53)+0
  Such that:it(52) =< V2
it(52) =< V2-V2'
it(53) =< V1
it(53) =< V1-V1'
aux(1) =< V2+V1
aux(2) =< V2+V1-V2'-V1'
it(52) =< aux(1)
it(53) =< aux(1)
it(52) =< aux(2)
it(53) =< aux(2)

#### Cost of loops [54,55] 

 * loop 54:fun(V2,V1,Out) -> [fun(V2',V1',Out')] 
1
 * loop 55:fun(V2,V1,Out) -> [fun(V2',V1',Out')] 
1
#### Cost of phase [54,55]:fun(V2,V1,Out) -> [fun(V2',V1',Out')] 
1*it(54)+1*it(55)+0
  Such that:it(54) =< V2
it(54) =< V2-V2'
it(55) =< V1
it(55) =< V1-V1'
aux(4) =< V2+V1
aux(5) =< V2+V1-V2'-V1'
it(54) =< aux(4)
it(55) =< aux(4)
it(54) =< aux(5)
it(55) =< aux(5)

#### Cost of phase [54,55]:fun(V2,V1,Out) -> [fun(V2',V1',Out')] 
1*it(54)+1*it(55)+0
  Such that:it(54) =< V2
it(54) =< V2-V2'
it(55) =< V1
it(55) =< V1-V1'
aux(4) =< V2+V1
aux(5) =< V2+V1-V2'-V1'
it(54) =< aux(4)
it(55) =< aux(4)
it(54) =< aux(5)
it(55) =< aux(5)

#### Cost of phase [54,55]:fun(V2,V1,Out) -> [fun(V2',V1',Out')] 
1*it(54)+1*it(55)+0
  Such that:it(54) =< V2
it(54) =< V2-V2'
it(55) =< V1
it(55) =< V1-V1'
aux(4) =< V2+V1
aux(5) =< V2+V1-V2'-V1'
it(54) =< aux(4)
it(55) =< aux(4)
it(54) =< aux(5)
it(55) =< aux(5)

#### Cost of chains of fun(V2,V1,Out):
* Chain [[54,55],[52,53],56]: 3*it(52)+3*it(53)+1
  Such that:aux(6) =< V2
aux(7) =< V2+V1
it(52) =< aux(6)
it(52) =< aux(7)
it(53) =< aux(7)

  with precondition: [Out=0,V2>=1,V1>=1,V1+V2>=4] 

* Chain [[54,55],57]: 1*it(54)+1*it(55)+0
  Such that:it(54) =< V2
it(55) =< V1
aux(8) =< V2+V1
it(54) =< aux(8)
it(55) =< aux(8)

  with precondition: [Out=0,V2>=0,V1>=0,V1+V2>=1] 

* Chain [[54,55],56]: 1*it(54)+1*it(55)+1
  Such that:it(54) =< V2
it(55) =< V1
aux(9) =< V2+V1
it(54) =< aux(9)
it(55) =< aux(9)

  with precondition: [Out=0,V2>=1,V1>=1,V1+V2>=3] 

* Chain [[52,53],56]: 2*it(52)+2*it(53)+1
  Such that:it(52) =< V2
it(53) =< V1
aux(3) =< V2+V1
it(52) =< aux(3)
it(53) =< aux(3)

  with precondition: [Out=1,V2>=1,V1>=1,V1+V2>=3] 

* Chain [57]: 0
  with precondition: [Out=0,V2>=0,V1>=0] 

* Chain [56]: 1
  with precondition: [Out=1,V2>=1,V1>=1] 


#### Cost of chains of fun10(V2,Out):
* Chain [59]: 1
  with precondition: [V2=1,Out=1] 

* Chain [58]: 0
  with precondition: [Out=0,V2>=0] 


#### Cost of chains of fun11(V2,Out):
* Chain [61]: 1
  with precondition: [V2=1,Out=1] 

* Chain [60]: 0
  with precondition: [Out=0,V2>=0] 


#### Cost of chains of fun12(V2,Out):
* Chain [63]: 1
  with precondition: [V2=1,Out=1] 

* Chain [62]: 0
  with precondition: [Out=0,V2>=0] 


#### Cost of chains of fun13(V2,Out):
* Chain [65]: 1
  with precondition: [V2=1,Out=1] 

* Chain [64]: 0
  with precondition: [Out=0,V2>=0] 


#### Cost of chains of fun15(V2,Out):
* Chain [67]: 1
  with precondition: [V2=1,Out=1] 

* Chain [66]: 0
  with precondition: [Out=0,V2>=0] 


#### Cost of chains of fun16(V2,Out):
* Chain [69]: 1
  with precondition: [V2=1,Out=1] 

* Chain [68]: 0
  with precondition: [Out=0,V2>=0] 


#### Cost of chains of fun17(V2,Out):
* Chain [71]: 1
  with precondition: [V2=1,Out=1] 

* Chain [70]: 0
  with precondition: [Out=0,V2>=0] 


#### Cost of chains of fun18(V2,Out):
* Chain [73]: 1
  with precondition: [V2=1,Out=1] 

* Chain [72]: 0
  with precondition: [Out=0,V2>=0] 


#### Cost of chains of fun4(V2,Out):
* Chain [75]: 1
  with precondition: [V2=1,Out=1] 

* Chain [74]: 0
  with precondition: [Out=0,V2>=0] 


#### Cost of chains of fun5(V2,Out):
* Chain [77]: 1
  with precondition: [V2=1,Out=1] 

* Chain [76]: 0
  with precondition: [Out=0,V2>=0] 


#### Cost of chains of fun6(V2,Out):
* Chain [79]: 1
  with precondition: [V2=1,Out=1] 

* Chain [78]: 0
  with precondition: [Out=0,V2>=0] 


#### Cost of chains of fun8(V2,Out):
* Chain [81]: 1
  with precondition: [V2=1,Out=1] 

* Chain [80]: 0
  with precondition: [Out=0,V2>=0] 


#### Cost of chains of fun9(V2,Out):
* Chain [83]: 1
  with precondition: [V2=1,Out=1] 

* Chain [82]: 0
  with precondition: [Out=0,V2>=0] 


#### Cost of loops [84,86,87,88,89,90] 

 * loop 84:fun3(V2,V1,Out) -> [fun3(V2',V1',Out'),fun3(V2'2,V1'2,Out'2)] 
3
 * loop 86:fun3(V2,V1,Out) -> [fun3(V2',V1',Out')] 
2
 * loop 87:fun3(V2,V1,Out) -> [fun3(V2',V1',Out')] 
2
 * loop 88:fun3(V2,V1,Out) -> [fun3(V2',V1',Out')] 
2
 * loop 89:fun3(V2,V1,Out) -> [fun3(V2',V1',Out')] 
2
 * loop 90:fun3(V2,V1,Out) -> [fun3(V2',V1',Out')] 
2
#### Cost of phase [84,86,87,88,89,90]:fun3(V2,V1,Out) -> [] 
13*it(84)+3*it([96])+4*s(17)+0
#### Cost of loops [85,91,92,93,94,95] 

 * loop 85:fun3(V2,V1,Out) -> [fun3(V2',V1',Out'),fun3(V2'2,V1'2,Out'2)] 
2
 * loop 91:fun3(V2,V1,Out) -> [fun3(V2',V1',Out')] 
1
 * loop 92:fun3(V2,V1,Out) -> [fun3(V2',V1',Out')] 
1
 * loop 93:fun3(V2,V1,Out) -> [fun3(V2',V1',Out')] 
1
 * loop 94:fun3(V2,V1,Out) -> [fun3(V2',V1',Out')] 
1
 * loop 95:fun3(V2,V1,Out) -> [fun3(V2',V1',Out')] 
1
#### Cost of phase [85,91,92,93,94,95]:fun3(V2,V1,Out) -> [] 
27*it(85)+5*it([96])+4*s(17)+14*s(31)+0
#### Cost of chains of fun3(V2,V1,Out):
* Chain [multiple([85,91,92,93,94,95],[[],[multiple([84,86,87,88,89,90],[[],[96]])],[97],[96]])]...: 27*it(85)+5*it([96])+4*s(17)+14*s(31)+0
  with precondition: [V1>=0,V2>=3,Out=0] 

* Chain [multiple([84,86,87,88,89,90],[[],[96]])]...: 13*it(84)+3*it([96])+4*s(17)+0
  with precondition: [V1>=0,V2>=3,Out=1] 

* Chain [97]: 14*s(22)+2
  Such that:aux(46) =< V1
s(22) =< aux(46)

  with precondition: [Out=0,V2>=0,V1>=0] 

* Chain [96]: 4*s(14)+3
  Such that:aux(13) =< V1
s(14) =< aux(13)

  with precondition: [V2=1,Out=1,V1>=3] 


#### Cost of chains of fun20(V2,Out):
* Chain [99]: 1
  with precondition: [V2=1,Out=1] 

* Chain [98]: 0
  with precondition: [Out=0,V2>=0] 


#### Cost of chains of fun19(V2,Out):
* Chain [101]: 14*s(34)+3
  Such that:s(33) =< 1
s(34) =< s(33)

  with precondition: [Out=0,V2>=0] 

* Chain [100]...: 1*aux(77)+0
  with precondition: [V2>=1] 


#### Cost of chains of start(V2,V1,V3,V5,V4):
* Chain [103]...: 1*aux(78)+0
  with precondition: [V2>=1] 

* Chain [102]: 28*s(65)+7*s(71)+4*s(72)+3*s(73)+18*s(78)+14*s(82)+3
  Such that:s(81) =< 1
aux(79) =< V2
aux(80) =< V2+V1
aux(81) =< V1
aux(82) =< V4
s(71) =< aux(79)
s(72) =< aux(81)
s(82) =< s(81)
s(71) =< aux(80)
s(72) =< aux(80)
s(73) =< aux(80)
s(78) =< aux(81)
s(65) =< aux(82)

  with precondition: [V2>=0] 


Closed-form bounds of start(V2,V1,V3,V5,V4): 
-------------------------------------
* Chain [103]... with precondition: [V2>=1] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [102] with precondition: [V2>=0] 
    - Upper bound: 7*V2+17+nat(V1)*22+nat(V4)*28+nat(V2+V1)*3 
    - Complexity: n 

### Maximum cost of start(V2,V1,V3,V5,V4): inf 
Asymptotic class: infinity 

Time statistics: 
-------------------------------------
* Partial evaluation computed in 54 ms.
* Invariants computed in 76 ms.
   - Backward Invariants 18 ms.
   - Transitive Invariants 23 ms.
* Refinement performed in 222 ms.
* Termination proved in 23 ms.
* Upper bounds computed in 248 ms.
   - Equation cost structures 69 ms.
   - Phase cost structures 171 ms.
   - Chain cost structures 24 ms.
   - Solving cost expressions 1 ms.
* Total analysis performed in 704 ms.



Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. recursive  : [double/2]
1. recursive  : [half/2]
2. non_recursive  : [if/4]
3. recursive  : [minus/3]
4. non_recursive  : [start/3]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into double/2
1. SCC is partially evaluated into half/2
2. SCC is partially evaluated into if/4
3. SCC is partially evaluated into minus/3
4. SCC is partially evaluated into start/3

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations double/2 
* CE 6 is refined into CE [19] 
* CE 8 is refined into CE [20] 
* CE 7 is refined into CE [21] 


#### Refined cost equations double/2 
* CE 19: double(V,Out) = 1
     [Out=0,V=0] 
* CE 20: double(V,Out) = 0
     [V>=0,Out=0] 
* CE 21: double(V,Out) = 1+ double(W,X)
     [W>=0,X+2=Out,W+1=V] 

### Cost equations --> "Loop" of double/2 
* CEs [21] --> Loop 13 
* CEs [19,20] --> Loop 14 

#### Loops of double/2 
* Loop 13: double(V,Out)->  double(V',Out')
                  [V'>=0,Out=Out'+2,V'+1=V] 
* Loop 14: double(V,Out) [V>=0,Out=0] 

### Ranking functions of CR double(V,Out) 
* RF of phase [13]: [V]

#### Partial ranking functions of CR double(V,Out) 
* Partial RF of phase [13]:
  - RF of loop [13:1]:
    V


### Resulting Chains:double(V,Out) 
* [[13],14]
* [14]


### Merging Chains  double/2 into  External patterns of execution 
* [[14]] --> 1 
* [[14,[13]]] --> 2 


### Specialization of cost equations half/2 
* CE 9 is refined into CE [22] 
* CE 11 is refined into CE [23] 
* CE 12 is refined into CE [24] 
* CE 10 is refined into CE [25] 


#### Refined cost equations half/2 
* CE 22: half(V,Out) = 1
     [Out=0,V=1] 
* CE 23: half(V,Out) = 1
     [Out=0,V=0] 
* CE 24: half(V,Out) = 0
     [V>=0,Out=0] 
* CE 25: half(V,Out) = 1+ half(W,X)
     [W>=0,X+1=Out,W+2=V] 

### Cost equations --> "Loop" of half/2 
* CEs [25] --> Loop 15 
* CEs [22] --> Loop 16 
* CEs [23,24] --> Loop 17 

#### Loops of half/2 
* Loop 15: half(V,Out)->  half(V',Out')
                  [V'>=0,Out=Out'+1,V'+2=V] 
* Loop 16: half(V,Out) [Out=0,V=1] 
* Loop 17: half(V,Out) [V>=0,Out=0] 

### Ranking functions of CR half(V,Out) 
* RF of phase [15]: [V-1]

#### Partial ranking functions of CR half(V,Out) 
* Partial RF of phase [15]:
  - RF of loop [15:1]:
    V-1


### Resulting Chains:half(V,Out) 
* [[15],17]
* [[15],16]
* [17]
* [16]


### Merging Chains  half/2 into  External patterns of execution 
* [[16],[17]] --> 1 
* [[16,[15]],[17,[15]]] --> 2 


### Specialization of cost equations if/4 
* CE 13 is refined into CE [26] 
* CE 15 is refined into CE [27] 
* CE 14 is refined into CE [28] 


#### Refined cost equations if/4 
* CE 26: if(A,B,C,C) = 1
     [C>=0,B>=0,A>=1] 
* CE 27: if(V,V4,V7,Out) = 0
     [V7>=0,V4>=0,V>=0,Out=0] 
* CE 28: if(A,B,C,B) = 1
     [C>=0,B>=0,A=0] 

### Cost equations --> "Loop" of if/4 
* CEs [26] --> Loop 18 
* CEs [27] --> Loop 19 
* CEs [28] --> Loop 20 

#### Loops of if/4 
* Loop 18: if(A,B,C,C) [C>=0,B>=0,A>=1] 
* Loop 19: if(V,V4,V7,Out) [V7>=0,V4>=0,V>=0,Out=0] 
* Loop 20: if(A,B,C,B) [C>=0,B>=0,A=0] 

### Ranking functions of CR if(V,V4,V7,Out) 

#### Partial ranking functions of CR if(V,V4,V7,Out) 


### Resulting Chains:if(V,V4,V7,Out) 
* [20]
* [19]
* [18]


### Merging Chains  if/4 into  External patterns of execution 
* [[20]] --> 1 
* [[19]] --> 2 
* [[18]] --> 3 


### Specialization of cost equations minus/3 
* CE 18 is refined into CE [29] 
* CE 17 is refined into CE [30] 
* CE 16 is refined into CE [31] 


#### Refined cost equations minus/3 
* CE 29: minus(V,V4,Out) = 0
     [V4>=0,V>=0,Out=0] 
* CE 30: minus(A,B,A) = 1
     [A>=0,B=0] 
* CE 31: minus(V,V4,Out) = 1+ minus(W4,X4,Out)
     [X4>=0,W4>=0,X4+1=V4,W4+1=V] 

### Cost equations --> "Loop" of minus/3 
* CEs [31] --> Loop 21 
* CEs [29] --> Loop 22 
* CEs [30] --> Loop 23 

#### Loops of minus/3 
* Loop 21: minus(V,V4,Out)->  minus(V',V4',Out)
                  [V4'>=0,V'>=0,V4'+1=V4,V'+1=V] 
* Loop 22: minus(V,V4,Out) [V4>=0,V>=0,Out=0] 
* Loop 23: minus(A,B,A) [A>=0,B=0] 

### Ranking functions of CR minus(V,V4,Out) 
* RF of phase [21]: [V,V4]

#### Partial ranking functions of CR minus(V,V4,Out) 
* Partial RF of phase [21]:
  - RF of loop [21:1]:
    V
    V4


### Resulting Chains:minus(V,V4,Out) 
* [[21],23]
* [[21],22]
* [23]
* [22]


### Merging Chains  minus/3 into  External patterns of execution 
* [[23]] --> 1 
* [[22],[22,[21]]] --> 2 
* [[23,[21]]] --> 3 


### Specialization of cost equations start/3 
* CE 2 is refined into CE [32,33] 
* CE 3 is refined into CE [34,35] 
* CE 4 is refined into CE [36,37,38] 
* CE 5 is refined into CE [39,40,41] 


#### Refined cost equations start/3 
* CE 32: start(V,V4,V7) = 0+ double(V,W7):1
     [V>=0,W7=0] 
* CE 33: start(V,V4,V7) = 0+ double(V,W7):2
     [2*V>=W7,W7>=2] 
* CE 34: start(V,V4,V7) = 0+ half(V,W7):1
     [V>=0,W7=0] 
* CE 35: start(V,V4,V7) = 0+ half(V,W7):2
     [V>=2*W7,W7>=1] 
* CE 36: start(V,V4,V7) = 0+ if(W7,V4,V7,V4):1
     [V4>=0,V7>=0,W7=0,V=0] 
* CE 37: start(V,V4,V7) = 0+ if(V,V4,V7,W7):2
     [V7>=0,V4>=0,V>=0,W7=0] 
* CE 38: start(V,V4,V7) = 0+ if(V,V4,V7,V7):3
     [V7>=0,V4>=0,V>=1] 
* CE 39: start(V,V4,V7) = 0+ minus(V,W7,V):1
     [V>=0,W7=0,V4=0] 
* CE 40: start(V,V4,V7) = 0+ minus(V,V4,W7):2
     [V4>=0,V>=0,W7=0] 
* CE 41: start(V,V4,V7) = 0+ minus(W7,V4,X7):3
     [X7>=0,V4>=1,V4+X7=W7,V4+X7=V] 

### Cost equations --> "Loop" of start/3 
* CEs [39] --> Loop 24 
* CEs [32,33,34,35,36,37,38,40,41] --> Loop 25 

#### Loops of start/3 
* Loop 24: start(V,V4,V7) [V>=0,V4=0] 
* Loop 25: start(V,V4,V7) [V>=0] 

### Ranking functions of CR start(V,V4,V7) 

#### Partial ranking functions of CR start(V,V4,V7) 


### Resulting Chains:start(V,V4,V7) 
* [25]
* [24]


### Merging Chains  start/3 into  External patterns of execution 
* [[24],[25]] --> 1 


Computing Bounds
=====================================

#### Cost of loops [13] 

 * loop 13:double(V,Out) -> [double(V',Out')] 
1
#### Cost of phase [13]:double(V,Out) -> [double(V',Out')] 
1*it(13)+0
  Such that:it(13) =< V
it(13) =< V-V'

#### Cost of chains of double(V,Out):
* Chain [[13],14]: 1*it(13)+1
  Such that:it(13) =< Out/2

  with precondition: [Out>=2,2*V>=Out] 

* Chain [14]: 1
  with precondition: [Out=0,V>=0] 


#### Cost of loops [15] 

 * loop 15:half(V,Out) -> [half(V',Out')] 
1
#### Cost of phase [15]:half(V,Out) -> [half(V',Out')] 
1*it(15)+0
  Such that:it(15) =< V
it(15) =< V-V'

#### Cost of phase [15]:half(V,Out) -> [half(V',Out')] 
1*it(15)+0
  Such that:it(15) =< V
it(15) =< V-V'

#### Cost of chains of half(V,Out):
* Chain [[15],17]: 1*it(15)+1
  Such that:it(15) =< 2*Out

  with precondition: [Out>=1,V>=2*Out] 

* Chain [[15],16]: 1*it(15)+1
  Such that:it(15) =< 2*Out

  with precondition: [V=2*Out+1,V>=3] 

* Chain [17]: 1
  with precondition: [Out=0,V>=0] 

* Chain [16]: 1
  with precondition: [V=1,Out=0] 


#### Cost of chains of if(V,V4,V7,Out):
* Chain [20]: 1
  with precondition: [V=0,V4=Out,V4>=0,V7>=0] 

* Chain [19]: 0
  with precondition: [Out=0,V>=0,V4>=0,V7>=0] 

* Chain [18]: 1
  with precondition: [V7=Out,V>=1,V4>=0,V7>=0] 


#### Cost of loops [21] 

 * loop 21:minus(V,V4,Out) -> [minus(V',V4',Out')] 
1
#### Cost of phase [21]:minus(V,V4,Out) -> [minus(V',V4',Out')] 
1*it(21)+0
  Such that:it(21) =< V
it(21) =< V-V'
it(21) =< V4
it(21) =< V4-V4'

#### Cost of phase [21]:minus(V,V4,Out) -> [minus(V',V4',Out')] 
1*it(21)+0
  Such that:it(21) =< V
it(21) =< V-V'
it(21) =< V4
it(21) =< V4-V4'

#### Cost of chains of minus(V,V4,Out):
* Chain [[21],23]: 1*it(21)+1
  Such that:it(21) =< V4

  with precondition: [V=Out+V4,V4>=1,V>=V4] 

* Chain [[21],22]: 1*it(21)+0
  Such that:it(21) =< V4

  with precondition: [Out=0,V>=1,V4>=1] 

* Chain [23]: 1
  with precondition: [V4=0,V=Out,V>=0] 

* Chain [22]: 0
  with precondition: [Out=0,V>=0,V4>=0] 


#### Cost of chains of start(V,V4,V7):
* Chain [25]: 3*s(4)+2*s(7)+1
  Such that:aux(2) =< V
aux(3) =< V4
s(4) =< aux(2)
s(7) =< aux(3)

  with precondition: [V>=0] 

* Chain [24]: 1
  with precondition: [V4=0,V>=0] 


Closed-form bounds of start(V,V4,V7): 
-------------------------------------
* Chain [25] with precondition: [V>=0] 
    - Upper bound: 3*V+1+nat(V4)*2 
    - Complexity: n 
* Chain [24] with precondition: [V4=0,V>=0] 
    - Upper bound: 1 
    - Complexity: constant 

### Maximum cost of start(V,V4,V7): nat(V4)*2+3*V+1 
Asymptotic class: n 

Time statistics: 
-------------------------------------
* Partial evaluation computed in 9 ms.
* Invariants computed in 21 ms.
   - Backward Invariants 11 ms.
   - Transitive Invariants 3 ms.
* Refinement performed in 35 ms.
* Termination proved in 3 ms.
* Upper bounds computed in 31 ms.
   - Equation cost structures 11 ms.
   - Phase cost structures 6 ms.
   - Chain cost structures 12 ms.
   - Solving cost expressions 0 ms.
* Total analysis performed in 118 ms.


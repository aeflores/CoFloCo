
Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. recursive  : [fun/2]
1. recursive [non_tail] : [int/3]
2. non_recursive  : [start/2]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into fun/2
1. SCC is partially evaluated into int/3
2. SCC is partially evaluated into start/2

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations fun/2 
* CE 9 is refined into CE [10] 
* CE 8 is refined into CE [11] 


#### Refined cost equations fun/2 
* CE 10: fun(V1,Out) = 1+ fun(W1,X1)
     [V1>=W1+1,W1>=0,Out+W1=V1+X1+1] 
* CE 11: fun(V1,Out) = 1
     [Out=0,V1=0] 

### Cost equations --> "Loop" of fun/2 
* CEs [11] --> Loop 8 
* CEs [10] --> Loop 9 

#### Loops of fun/2 
* Loop 8: fun(V1,Out) [Out=0,V1=0] 
* Loop 9: fun(V1,Out)->  fun(V1',Out')
                  [V1>=V1'+1,V1'>=0,V1+Out'+1=Out+V1'] 

### Ranking functions of CR fun(V1,Out) 
* RF of phase [9]: [V1]

#### Partial ranking functions of CR fun(V1,Out) 
* Partial RF of phase [9]:
  - RF of loop [9:1]:
    V1


### Resulting Chains:fun(V1,Out) 
* [[9],8]
* [8]


### Merging Chains  fun/2 into  External patterns of execution 
* [[8]] --> 1 
* [[8,[9]]] --> 2 


### Specialization of cost equations int/3 
* CE 7 is refined into CE [12,13] 
* CE 5 is refined into CE [14] 
* CE 6 is refined into CE [15] 
* CE 4 is refined into CE [16] 


#### Refined cost equations int/3 
* CE 12: int(V1,V,Out) = 1+ int(W1,X1,Y1)+ fun(Z1,A2):1
     [X1>=0,W1>=0,X1+1=V,W1+1=V1,Y1=0,A2=0,Z1=0,Out=0] 
* CE 13: int(V1,V,Out) = 1+ int(W1,X1,Y1)+ fun(Y1,Out):2
     [2*Y1>=Out,Out>=Y1+1,X1>=0,W1>=0,X1+1=V,W1+1=V1] 
* CE 14: int(V1,V,Out) = 1+ int(W1,V,X1)
     [V>=1,X1+1=Out,W1=1,V1=0] 
* CE 15: int(V1,V,Out) = 1
     [V1>=1,Out=0,V=0] 
* CE 16: int(V1,V,Out) = 1
     [Out=1,V=0,V1=0] 

### Cost equations --> "Loop" of int/3 
* CEs [15] --> Loop 10 
* CEs [16] --> Loop 11 
* CEs [13] --> Loop 12 
* CEs [12] --> Loop 13 
* CEs [14] --> Loop 14 

#### Loops of int/3 
* Loop 10: int(V1,V,Out) [V1>=1,Out=0,V=0] 
* Loop 11: int(V1,V,Out) [Out=1,V=0,V1=0] 
* Loop 12: int(V1,V,Out)->  int(V1',V',Out')
                  [Out>=Out'+1,2*Out'>=Out,V>=1,V1>=1,V=V'+1,V1=V1'+1] 
* Loop 13: int(V1,V,Out)->  int(V1',V',Out')
                  [V>=1,V1>=1,V=V'+1,V1=V1'+1,Out'=0,Out=0] 
* Loop 14: int(V1,V,Out)->  int(V1',V,Out')
                  [V>=1,Out=Out'+1,V1'=1,V1=0] 

### Ranking functions of CR int(V1,V,Out) 

#### Partial ranking functions of CR int(V1,V,Out) 
* Partial RF of phase [12,13,14]:
  - RF of loop [12:1,13:1]:
    V
    V1 depends on loops [14:1] 
  - RF of loop [14:1]:
    -V1+1 depends on loops [12:1,13:1] 


### Resulting Chains:int(V1,V,Out) 
* [[12,13,14],11]
* [[12,13,14],10]
* [11]
* [10]


### Merging Chains  int/3 into  External patterns of execution 
* [[11]] --> 1 
* [[10]] --> 2 
* [[10,[12,13,14]]] --> 3 
* [[11,[12,13,14]]] --> 4 


### Specialization of cost equations start/2 
* CE 2 is refined into CE [17,18,19,20] 
* CE 3 is refined into CE [21,22] 


#### Refined cost equations start/2 
* CE 17: start(V1,V) = 0+ int(W1,X1,Y1):1
     [Y1=1,X1=0,W1=0,V=0,V1=0] 
* CE 18: start(V1,V) = 0+ int(V1,W1,X1):2
     [V1>=1,X1=0,W1=0,V=0] 
* CE 19: start(V1,V) = 0+ int(V1,V,W1):3
     [V1>=V+1,V>=1,W1=0] 
* CE 20: start(V1,V) = 0+ int(V1,V,W1):4
     [V1+W1>=2*V+1,V>=V1,V>=1,V1>=0] 
* CE 21: start(V1,V) = 0+ fun(W1,X1):1
     [X1=0,W1=0,V1=0] 
* CE 22: start(V1,V) = 0+ fun(V1,W1):2
     [2*V1>=W1,W1>=V1+1] 

### Cost equations --> "Loop" of start/2 
* CEs [20] --> Loop 15 
* CEs [18,19,22] --> Loop 16 
* CEs [17,21] --> Loop 17 

#### Loops of start/2 
* Loop 15: start(V1,V) [V>=V1,V>=1,V1>=0] 
* Loop 16: start(V1,V) [V1>=1] 
* Loop 17: start(V1,V) [V1=0] 

### Ranking functions of CR start(V1,V) 

#### Partial ranking functions of CR start(V1,V) 


### Resulting Chains:start(V1,V) 
* [17]
* [16]
* [15]


### Merging Chains  start/2 into  External patterns of execution 
* [[17]] --> 1 
* [[15]] --> 2 
* [[16]] --> 3 


Computing Bounds
=====================================

#### Cost of loops [9] 

 * loop 9:fun(V1,Out) -> [fun(V1',Out')] 
1
#### Cost of phase [9]:fun(V1,Out) -> [fun(V1',Out')] 
1*it(9)+0
  Such that:it(9) =< V1
it(9) =< V1-V1'

#### Cost of chains of fun(V1,Out):
* Chain [[9],8]: 1*it(9)+1
  Such that:it(9) =< V1

  with precondition: [Out>=V1+1,2*V1>=Out] 

* Chain [8]: 1
  with precondition: [V1=0,Out=0] 


#### Cost of loops [12,13,14] 

 * loop 12:int(V1,V,Out) -> [int(V1',V',Out')] 
1*s(2)+2
 * loop 13:int(V1,V,Out) -> [int(V1',V',Out')] 
2
 * loop 14:int(V1,V,Out) -> [int(V1',V',Out')] 
1
#### Cost of phase [12,13,14]:int(V1,V,Out) -> [int(V1',V',Out')] 
4*it(12)+1*it(14)+1*s(3)+0
  Such that:aux(5) =< -V1+1
aux(6) =< -V1+V1'
aux(9) =< V
aux(10) =< V-V'
it(12) =< aux(9)
it(12) =< aux(10)
it(14) =< it(12)+it(12)+aux(6)
it(14) =< it(12)+it(12)+aux(5)

#### Cost of phase [12,13,14]:int(V1,V,Out) -> [int(V1',V',Out')] 
4*it(12)+1*it(14)+1*s(3)+0
  Such that:aux(5) =< -V1+1
aux(6) =< -V1+V1'
aux(9) =< V
aux(10) =< V-V'
it(12) =< aux(9)
it(12) =< aux(10)
it(14) =< it(12)+it(12)+aux(6)
it(14) =< it(12)+it(12)+aux(5)

#### Cost of chains of int(V1,V,Out):
* Chain [[12,13,14],11]: 4*it(12)+1*it(14)+1*s(3)+1
  Such that:aux(6) =< -V1
aux(5) =< -V1+1
aux(11) =< V
it(12) =< aux(11)
it(14) =< it(12)+it(12)+aux(6)
it(14) =< it(12)+it(12)+aux(5)

  with precondition: [V1>=0,V>=1,V>=V1,Out+V1>=2*V+1] 

* Chain [[12,13,14],10]: 4*it(12)+1*it(14)+1*s(3)+1
  Such that:aux(5) =< -V1+1
aux(6) =< -V+Out
aux(12) =< V
it(12) =< aux(12)
it(14) =< it(12)+it(12)+aux(6)
it(14) =< it(12)+it(12)+aux(5)

  with precondition: [Out=0,V>=1,V1>=V+1] 

* Chain [11]: 1
  with precondition: [V1=0,V=0,Out=1] 

* Chain [10]: 1
  with precondition: [V=0,Out=0,V1>=1] 


#### Cost of chains of start(V1,V):
* Chain [17]: 1
  with precondition: [V1=0] 

* Chain [16]: 4*s(7)+1*s(8)+1*s(9)+1*s(10)+1
  Such that:s(4) =< -V1+1
s(10) =< V1
s(5) =< -V
s(6) =< V
s(7) =< s(6)
s(8) =< s(7)+s(7)+s(5)
s(8) =< s(7)+s(7)+s(4)

  with precondition: [V1>=1] 

* Chain [15]: 4*s(14)+1*s(15)+1*s(16)+1
  Such that:s(11) =< -V1
s(12) =< -V1+1
s(13) =< V
s(14) =< s(13)
s(15) =< s(14)+s(14)+s(11)
s(15) =< s(14)+s(14)+s(12)

  with precondition: [V1>=0,V>=1,V>=V1] 


Closed-form bounds of start(V1,V): 
-------------------------------------
* Chain [17] with precondition: [V1=0] 
    - Upper bound: 1 
    - Complexity: constant 
* Chain [16] with precondition: [V1>=1] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [15] with precondition: [V1>=0,V>=1,V>=V1] 
    - Upper bound: inf 
    - Complexity: infinity 

### Maximum cost of start(V1,V): inf 
Asymptotic class: infinity 

Time statistics: 
-------------------------------------
* Partial evaluation computed in 16 ms.
* Invariants computed in 60 ms.
   - Backward Invariants 27 ms.
   - Transitive Invariants 15 ms.
* Refinement performed in 91 ms.
* Termination proved in 16 ms.
* Upper bounds computed in 111 ms.
   - Equation cost structures 35 ms.
   - Phase cost structures 36 ms.
   - Chain cost structures 39 ms.
   - Solving cost expressions 4 ms.
* Total analysis performed in 337 ms.



Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. recursive  : [flatten/2]
1. non_recursive  : [fun/3]
2. non_recursive  : [rev/2]
3. non_recursive  : [start/2]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into flatten/2
1. SCC is partially evaluated into fun/3
2. SCC is partially evaluated into rev/2
3. SCC is partially evaluated into start/2

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations flatten/2 
* CE 5 is refined into CE [14] 
* CE 7 is refined into CE [15] 
* CE 6 is refined into CE [16] 


#### Refined cost equations flatten/2 
* CE 14: flatten(V,Out) = 1
     [Out=0,V=0] 
* CE 15: flatten(V,Out) = 0
     [V>=0,Out=0] 
* CE 16: flatten(V,Out) = 1+ flatten(W,Out)
     [W>=0,W+1=V] 

### Cost equations --> "Loop" of flatten/2 
* CEs [16] --> Loop 9 
* CEs [14,15] --> Loop 10 

#### Loops of flatten/2 
* Loop 9: flatten(V,Out)->  flatten(V',Out)
                  [V'>=0,V'+1=V] 
* Loop 10: flatten(V,Out) [V>=0,Out=0] 

### Ranking functions of CR flatten(V,Out) 
* RF of phase [9]: [V]

#### Partial ranking functions of CR flatten(V,Out) 
* Partial RF of phase [9]:
  - RF of loop [9:1]:
    V


### Resulting Chains:flatten(V,Out) 
* [[9],10]
* [10]


### Merging Chains  flatten/2 into  External patterns of execution 
* [[10],[10,[9]]] --> 1 


### Specialization of cost equations fun/3 
* CE 13 is refined into CE [17] 
* CE 11 is refined into CE [18] 
* CE 12 is refined into CE [19] 


#### Refined cost equations fun/3 
* CE 17: fun(V,V3,Out) = 0
     [V3>=0,V>=0,Out=0] 
* CE 18: fun(A,B,A) = 1
     [A>=0,B=0] 
* CE 19: fun(A,B,B) = 1
     [B>=0,A=0] 

### Cost equations --> "Loop" of fun/3 
* CEs [17] --> Loop 11 
* CEs [18] --> Loop 12 
* CEs [19] --> Loop 13 

#### Loops of fun/3 
* Loop 11: fun(V,V3,Out) [V3>=0,V>=0,Out=0] 
* Loop 12: fun(A,B,A) [A>=0,B=0] 
* Loop 13: fun(A,B,B) [B>=0,A=0] 

### Ranking functions of CR fun(V,V3,Out) 

#### Partial ranking functions of CR fun(V,V3,Out) 


### Resulting Chains:fun(V,V3,Out) 
* [13]
* [12]
* [11]


### Merging Chains  fun/3 into  External patterns of execution 
* [[13]] --> 1 
* [[12]] --> 2 
* [[11]] --> 3 


### Specialization of cost equations rev/2 
* CE 8 is refined into CE [20] 
* CE 9 is refined into CE [21] 
* CE 10 is refined into CE [22] 


#### Refined cost equations rev/2 
* CE 20: rev(A,A) = 1
     [A>=1] 
* CE 21: rev(V,Out) = 1
     [Out=0,V=0] 
* CE 22: rev(V,Out) = 0
     [V>=0,Out=0] 

### Cost equations --> "Loop" of rev/2 
* CEs [20] --> Loop 14 
* CEs [21,22] --> Loop 15 

#### Loops of rev/2 
* Loop 14: rev(A,A) [A>=1] 
* Loop 15: rev(V,Out) [V>=0,Out=0] 

### Ranking functions of CR rev(V,Out) 

#### Partial ranking functions of CR rev(V,Out) 


### Resulting Chains:rev(V,Out) 
* [15]
* [14]


### Merging Chains  rev/2 into  External patterns of execution 
* [[15]] --> 1 
* [[14]] --> 2 


### Specialization of cost equations start/2 
* CE 2 is refined into CE [23] 
* CE 3 is refined into CE [24,25] 
* CE 4 is refined into CE [26,27,28] 


#### Refined cost equations start/2 
* CE 23: start(V,V3) = 0+ flatten(V,W3):1
     [V>=0,W3=0] 
* CE 24: start(V,V3) = 0+ rev(V,W3):1
     [V>=0,W3=0] 
* CE 25: start(V,V3) = 0+ rev(V,V):2
     [V>=1] 
* CE 26: start(V,V3) = 0+ fun(W3,V3,V3):1
     [V3>=0,W3=0,V=0] 
* CE 27: start(V,V3) = 0+ fun(V,W3,V):2
     [V>=0,W3=0,V3=0] 
* CE 28: start(V,V3) = 0+ fun(V,V3,W3):3
     [V3>=0,V>=0,W3=0] 

### Cost equations --> "Loop" of start/2 
* CEs [27] --> Loop 16 
* CEs [23,24,25,26,28] --> Loop 17 

#### Loops of start/2 
* Loop 16: start(V,V3) [V>=0,V3=0] 
* Loop 17: start(V,V3) [V>=0] 

### Ranking functions of CR start(V,V3) 

#### Partial ranking functions of CR start(V,V3) 


### Resulting Chains:start(V,V3) 
* [17]
* [16]


### Merging Chains  start/2 into  External patterns of execution 
* [[16],[17]] --> 1 


Computing Bounds
=====================================

#### Cost of loops [9] 

 * loop 9:flatten(V,Out) -> [flatten(V',Out')] 
1
#### Cost of phase [9]:flatten(V,Out) -> [flatten(V',Out')] 
1*it(9)+0
  Such that:it(9) =< V
it(9) =< V-V'

#### Cost of chains of flatten(V,Out):
* Chain [[9],10]: 1*it(9)+1
  Such that:it(9) =< V

  with precondition: [Out=0,V>=1] 

* Chain [10]: 1
  with precondition: [Out=0,V>=0] 


#### Cost of chains of fun(V,V3,Out):
* Chain [13]: 1
  with precondition: [V=0,V3=Out,V3>=0] 

* Chain [12]: 1
  with precondition: [V3=0,V=Out,V>=0] 

* Chain [11]: 0
  with precondition: [Out=0,V>=0,V3>=0] 


#### Cost of chains of rev(V,Out):
* Chain [15]: 1
  with precondition: [Out=0,V>=0] 

* Chain [14]: 1
  with precondition: [V=Out,V>=1] 


#### Cost of chains of start(V,V3):
* Chain [17]: 1*s(2)+1
  Such that:s(2) =< V

  with precondition: [V>=0] 

* Chain [16]: 1
  with precondition: [V3=0,V>=0] 


Closed-form bounds of start(V,V3): 
-------------------------------------
* Chain [17] with precondition: [V>=0] 
    - Upper bound: V+1 
    - Complexity: n 
* Chain [16] with precondition: [V3=0,V>=0] 
    - Upper bound: 1 
    - Complexity: constant 

### Maximum cost of start(V,V3): V+1 
Asymptotic class: n 

Time statistics: 
-------------------------------------
* Partial evaluation computed in 16 ms.
* Invariants computed in 18 ms.
   - Backward Invariants 10 ms.
   - Transitive Invariants 2 ms.
* Refinement performed in 57 ms.
* Termination proved in 5 ms.
* Upper bounds computed in 33 ms.
   - Equation cost structures 19 ms.
   - Phase cost structures 6 ms.
   - Chain cost structures 5 ms.
   - Solving cost expressions 1 ms.
* Total analysis performed in 167 ms.


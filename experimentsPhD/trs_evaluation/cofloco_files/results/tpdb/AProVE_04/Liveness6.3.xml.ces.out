
Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. recursive  : [check/2]
1. recursive  : [no/2]
2. recursive  : [sent/2]
3. recursive  : [rec/2]
4. non_recursive  : [start/1]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into check/2
1. SCC is partially evaluated into no/2
2. SCC is partially evaluated into sent/2
3. SCC is partially evaluated into rec/2
4. SCC is partially evaluated into start/1

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations check/2 
* CE 7 is refined into CE [15] 
* CE 6 is refined into CE [16] 


#### Refined cost equations check/2 
* CE 15: check(V,Out) = 0
     [V>=0,Out=0] 
* CE 16: check(V,Out) = 1+ check(W,X)
     [W>=0,X+1=Out,W+1=V] 

### Cost equations --> "Loop" of check/2 
* CEs [16] --> Loop 11 
* CEs [15] --> Loop 12 

#### Loops of check/2 
* Loop 11: check(V,Out)->  check(V',Out')
                  [V'>=0,Out=Out'+1,V'+1=V] 
* Loop 12: check(V,Out) [V>=0,Out=0] 

### Ranking functions of CR check(V,Out) 
* RF of phase [11]: [V]

#### Partial ranking functions of CR check(V,Out) 
* Partial RF of phase [11]:
  - RF of loop [11:1]:
    V


### Resulting Chains:check(V,Out) 
* [[11],12]
* [12]


### Merging Chains  check/2 into  External patterns of execution 
* [[12]] --> 1 
* [[12,[11]]] --> 2 


### Specialization of cost equations no/2 
* CE 12 is refined into CE [17] 
* CE 11 is refined into CE [18] 


#### Refined cost equations no/2 
* CE 17: no(V,Out) = 0
     [V>=0,Out=0] 
* CE 18: no(V,Out) = 1+ no(W,X)
     [W>=0,X+1=Out,W+1=V] 

### Cost equations --> "Loop" of no/2 
* CEs [18] --> Loop 13 
* CEs [17] --> Loop 14 

#### Loops of no/2 
* Loop 13: no(V,Out)->  no(V',Out')
                  [V'>=0,Out=Out'+1,V'+1=V] 
* Loop 14: no(V,Out) [V>=0,Out=0] 

### Ranking functions of CR no(V,Out) 
* RF of phase [13]: [V]

#### Partial ranking functions of CR no(V,Out) 
* Partial RF of phase [13]:
  - RF of loop [13:1]:
    V


### Resulting Chains:no(V,Out) 
* [[13],14]
* [14]


### Merging Chains  no/2 into  External patterns of execution 
* [[14]] --> 1 
* [[14,[13]]] --> 2 


### Specialization of cost equations sent/2 
* CE 14 is refined into CE [19] 
* CE 13 is refined into CE [20] 


#### Refined cost equations sent/2 
* CE 19: sent(V,Out) = 0
     [V>=0,Out=0] 
* CE 20: sent(V,Out) = 1+ sent(W,X)
     [W>=0,X+1=Out,W+1=V] 

### Cost equations --> "Loop" of sent/2 
* CEs [20] --> Loop 15 
* CEs [19] --> Loop 16 

#### Loops of sent/2 
* Loop 15: sent(V,Out)->  sent(V',Out')
                  [V'>=0,Out=Out'+1,V'+1=V] 
* Loop 16: sent(V,Out) [V>=0,Out=0] 

### Ranking functions of CR sent(V,Out) 
* RF of phase [15]: [V]

#### Partial ranking functions of CR sent(V,Out) 
* Partial RF of phase [15]:
  - RF of loop [15:1]:
    V


### Resulting Chains:sent(V,Out) 
* [[15],16]
* [16]


### Merging Chains  sent/2 into  External patterns of execution 
* [[16]] --> 1 
* [[16,[15]]] --> 2 


### Specialization of cost equations rec/2 
* CE 10 is refined into CE [21] 
* CE 8 is refined into CE [22] 
* CE 9 is refined into CE [23] 


#### Refined cost equations rec/2 
* CE 21: rec(V,Out) = 0
     [V>=0,Out=0] 
* CE 22: rec(V,Out) = 1+ sent(W,X):1
     [X=0,W=0,Out=1,V=0] 
* CE 23: rec(V,Out) = 1+ rec(W,X)
     [W>=0,X+1=Out,W+1=V] 

### Cost equations --> "Loop" of rec/2 
* CEs [23] --> Loop 17 
* CEs [21] --> Loop 18 
* CEs [22] --> Loop 19 

#### Loops of rec/2 
* Loop 17: rec(V,Out)->  rec(V',Out')
                  [V'>=0,Out=Out'+1,V'+1=V] 
* Loop 18: rec(V,Out) [V>=0,Out=0] 
* Loop 19: rec(V,Out) [Out=1,V=0] 

### Ranking functions of CR rec(V,Out) 
* RF of phase [17]: [V]

#### Partial ranking functions of CR rec(V,Out) 
* Partial RF of phase [17]:
  - RF of loop [17:1]:
    V


### Resulting Chains:rec(V,Out) 
* [[17],19]
* [[17],18]
* [19]
* [18]


### Merging Chains  rec/2 into  External patterns of execution 
* [[19]] --> 1 
* [[18]] --> 2 
* [[19,[17]]] --> 3 
* [[18,[17]]] --> 4 


### Specialization of cost equations start/1 
* CE 2 is refined into CE [24,25] 
* CE 3 is refined into CE [26,27,28,29] 
* CE 4 is refined into CE [30,31] 
* CE 5 is refined into CE [32,33] 


#### Refined cost equations start/1 
* CE 24: start(V) = 0+ check(V,W):1
     [V>=0,W=0] 
* CE 25: start(V) = 0+ check(V,W):2
     [V>=W,W>=1] 
* CE 26: start(V) = 0+ rec(W,X):1
     [X=1,W=0,V=0] 
* CE 27: start(V) = 0+ rec(V,W):2
     [V>=0,W=0] 
* CE 28: start(V) = 0+ rec(W,X):3
     [X>=2,X=W+1,X=V+1] 
* CE 29: start(V) = 0+ rec(V,W):4
     [V>=W,W>=1] 
* CE 30: start(V) = 0+ no(V,W):1
     [V>=0,W=0] 
* CE 31: start(V) = 0+ no(V,W):2
     [V>=W,W>=1] 
* CE 32: start(V) = 0+ sent(V,W):1
     [V>=0,W=0] 
* CE 33: start(V) = 0+ sent(V,W):2
     [V>=W,W>=1] 

### Cost equations --> "Loop" of start/1 
* CEs [24,25,26,27,28,29,30,31,32,33] --> Loop 20 

#### Loops of start/1 
* Loop 20: start(V) [V>=0] 

### Ranking functions of CR start(V) 

#### Partial ranking functions of CR start(V) 


### Resulting Chains:start(V) 
* [20]


### Merging Chains  start/1 into  External patterns of execution 
* [[20]] --> 1 


Computing Bounds
=====================================

#### Cost of loops [11] 

 * loop 11:check(V,Out) -> [check(V',Out')] 
1
#### Cost of phase [11]:check(V,Out) -> [check(V',Out')] 
1*it(11)+0
  Such that:it(11) =< V
it(11) =< V-V'

#### Cost of chains of check(V,Out):
* Chain [[11],12]: 1*it(11)+0
  Such that:it(11) =< Out

  with precondition: [Out>=1,V>=Out] 

* Chain [12]: 0
  with precondition: [Out=0,V>=0] 


#### Cost of loops [13] 

 * loop 13:no(V,Out) -> [no(V',Out')] 
1
#### Cost of phase [13]:no(V,Out) -> [no(V',Out')] 
1*it(13)+0
  Such that:it(13) =< V
it(13) =< V-V'

#### Cost of chains of no(V,Out):
* Chain [[13],14]: 1*it(13)+0
  Such that:it(13) =< Out

  with precondition: [Out>=1,V>=Out] 

* Chain [14]: 0
  with precondition: [Out=0,V>=0] 


#### Cost of loops [15] 

 * loop 15:sent(V,Out) -> [sent(V',Out')] 
1
#### Cost of phase [15]:sent(V,Out) -> [sent(V',Out')] 
1*it(15)+0
  Such that:it(15) =< V
it(15) =< V-V'

#### Cost of chains of sent(V,Out):
* Chain [[15],16]: 1*it(15)+0
  Such that:it(15) =< Out

  with precondition: [Out>=1,V>=Out] 

* Chain [16]: 0
  with precondition: [Out=0,V>=0] 


#### Cost of loops [17] 

 * loop 17:rec(V,Out) -> [rec(V',Out')] 
1
#### Cost of phase [17]:rec(V,Out) -> [rec(V',Out')] 
1*it(17)+0
  Such that:it(17) =< V
it(17) =< V-V'

#### Cost of phase [17]:rec(V,Out) -> [rec(V',Out')] 
1*it(17)+0
  Such that:it(17) =< V
it(17) =< V-V'

#### Cost of chains of rec(V,Out):
* Chain [[17],19]: 1*it(17)+1
  Such that:it(17) =< Out

  with precondition: [V+1=Out,V>=1] 

* Chain [[17],18]: 1*it(17)+0
  Such that:it(17) =< Out

  with precondition: [Out>=1,V>=Out] 

* Chain [19]: 1
  with precondition: [V=0,Out=1] 

* Chain [18]: 0
  with precondition: [Out=0,V>=0] 


#### Cost of chains of start(V):
* Chain [20]: 4*s(1)+1*s(2)+1
  Such that:s(2) =< V+1
aux(1) =< V
s(1) =< aux(1)

  with precondition: [V>=0] 


Closed-form bounds of start(V): 
-------------------------------------
* Chain [20] with precondition: [V>=0] 
    - Upper bound: 5*V+2 
    - Complexity: n 

### Maximum cost of start(V): 5*V+2 
Asymptotic class: n 

Time statistics: 
-------------------------------------
* Partial evaluation computed in 5 ms.
* Invariants computed in 16 ms.
   - Backward Invariants 8 ms.
   - Transitive Invariants 4 ms.
* Refinement performed in 26 ms.
* Termination proved in 4 ms.
* Upper bounds computed in 24 ms.
   - Equation cost structures 11 ms.
   - Phase cost structures 4 ms.
   - Chain cost structures 10 ms.
   - Solving cost expressions 0 ms.
* Total analysis performed in 91 ms.


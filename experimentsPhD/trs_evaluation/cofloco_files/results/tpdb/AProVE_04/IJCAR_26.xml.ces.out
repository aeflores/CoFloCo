
Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. recursive  : [ (div)/3,quot/4]
1. recursive  : [eq/3]
2. non_recursive  : [p/2]
3. recursive  : [plus/3]
4. recursive [non_tail] : [times/3]
5. non_recursive  : [divides/3]
6. recursive  : [if/4,pr/3]
7. non_recursive  : [prime/2]
8. non_recursive  : [start/3]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into quot/4
1. SCC is partially evaluated into eq/3
2. SCC is partially evaluated into p/2
3. SCC is partially evaluated into plus/3
4. SCC is partially evaluated into times/3
5. SCC is partially evaluated into divides/3
6. SCC is partially evaluated into pr/3
7. SCC is partially evaluated into prime/2
8. SCC is partially evaluated into start/3

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations quot/4 
* CE 23 is refined into CE [46] 
* CE 24 is refined into CE [47] 
* CE 20 is refined into CE [48] 
* CE 22 is refined into CE [49] 
* CE 21 is refined into CE [50] 


#### Refined cost equations quot/4 
* CE 46: quot(V,V1,V4,Out) = 1
     [V4>=0,V1>=1,Out=0,V=0] 
* CE 47: quot(V,V1,V4,Out) = 0
     [V4>=0,V1>=0,V>=0,Out=0] 
* CE 48: quot(V,V1,V4,Out) = 2
     [V4>=1,Out=1,V1=0,V=0] 
* CE 49: quot(V,V1,V4,Out) = 1+ quot(W4,X4,V4,Out)
     [X4>=0,W4>=0,V4>=0,X4+1=V1,W4+1=V] 
* CE 50: quot(V,V1,V4,Out) = 2+ quot(V,V4,V4,W4)
     [V4>=1,V>=0,W4+1=Out,V1=0] 

### Cost equations --> "Loop" of quot/4 
* CEs [49] --> Loop 30 
* CEs [50] --> Loop 31 
* CEs [46,47] --> Loop 32 
* CEs [48] --> Loop 33 

#### Loops of quot/4 
* Loop 30: quot(V,V1,V4,Out)->  quot(V',V1',V4,Out)
                  [V4>=0,V1>=1,V>=1,V1=V1'+1,V=V'+1] 
* Loop 31: quot(V,V1,V4,Out)->  quot(V,V4,V4,A')
                  [V4>=1,V>=0,Out=A'+1,V1=0] 
* Loop 32: quot(V,V1,V4,Out) [V4>=0,V1>=0,V>=0,Out=0] 
* Loop 33: quot(V,V1,V4,Out) [V4>=1,Out=1,V1=0,V=0] 

### Ranking functions of CR quot(V,V1,V4,Out) 

#### Partial ranking functions of CR quot(V,V1,V4,Out) 
* Partial RF of phase [30,31]:
  - RF of loop [30:1]:
    V
    V1 depends on loops [31:1] 
  - RF of loop [31:1]:
    -V1+1 depends on loops [30:1] 


### Resulting Chains:quot(V,V1,V4,Out) 
* [[30,31],33]
* [[30,31],32]
* [33]
* [32]


### Merging Chains  quot/4 into  External patterns of execution 
* [[33],[32,[30,31]],[33,[30,31]]] --> 1 
* [[32]] --> 2 


### Specialization of cost equations eq/3 
* CE 35 is refined into CE [51] 
* CE 31 is refined into CE [52] 
* CE 32 is refined into CE [53] 
* CE 34 is refined into CE [54] 
* CE 33 is refined into CE [55] 


#### Refined cost equations eq/3 
* CE 51: eq(V,V1,Out) = 0
     [V1>=0,V>=0,Out=0] 
* CE 52: eq(V,V1,Out) = 1
     [V>=1,Out=1,V1=0] 
* CE 53: eq(V,V1,Out) = 1
     [V1>=1,Out=1,V=0] 
* CE 54: eq(V,V1,Out) = 1
     [Out=2,V1=0,V=0] 
* CE 55: eq(V,V1,Out) = 1+ eq(W1,X1,Out)
     [X1>=0,W1>=0,X1+1=V1,W1+1=V] 

### Cost equations --> "Loop" of eq/3 
* CEs [55] --> Loop 34 
* CEs [51] --> Loop 35 
* CEs [52] --> Loop 36 
* CEs [53] --> Loop 37 
* CEs [54] --> Loop 38 

#### Loops of eq/3 
* Loop 34: eq(V,V1,Out)->  eq(V',V1',Out)
                  [V1'>=0,V'>=0,V1'+1=V1,V'+1=V] 
* Loop 35: eq(V,V1,Out) [V1>=0,V>=0,Out=0] 
* Loop 36: eq(V,V1,Out) [V>=1,Out=1,V1=0] 
* Loop 37: eq(V,V1,Out) [V1>=1,Out=1,V=0] 
* Loop 38: eq(V,V1,Out) [Out=2,V1=0,V=0] 

### Ranking functions of CR eq(V,V1,Out) 
* RF of phase [34]: [V,V1]

#### Partial ranking functions of CR eq(V,V1,Out) 
* Partial RF of phase [34]:
  - RF of loop [34:1]:
    V
    V1


### Resulting Chains:eq(V,V1,Out) 
* [[34],38]
* [[34],37]
* [[34],36]
* [[34],35]
* [38]
* [37]
* [36]
* [35]


### Merging Chains  eq/3 into  External patterns of execution 
* [[38]] --> 1 
* [[37]] --> 2 
* [[36]] --> 3 
* [[35],[35,[34]]] --> 4 
* [[37,[34]]] --> 5 
* [[36,[34]]] --> 6 
* [[38,[34]]] --> 7 


### Specialization of cost equations p/2 
* CE 40 is refined into CE [56] 
* CE 41 is refined into CE [57] 


#### Refined cost equations p/2 
* CE 56: p(V,Out) = 1
     [Out>=0,Out+1=V] 
* CE 57: p(V,Out) = 0
     [V>=0,Out=0] 

### Cost equations --> "Loop" of p/2 
* CEs [56] --> Loop 39 
* CEs [57] --> Loop 40 

#### Loops of p/2 
* Loop 39: p(V,Out) [V>=1,V=Out+1] 
* Loop 40: p(V,Out) [V>=0,Out=0] 

### Ranking functions of CR p(V,Out) 

#### Partial ranking functions of CR p(V,Out) 


### Resulting Chains:p(V,Out) 
* [40]
* [39]


### Merging Chains  p/2 into  External patterns of execution 
* [[40]] --> 1 
* [[39]] --> 2 


### Specialization of cost equations plus/3 
* CE 30 is refined into CE [58] 
* CE 27 is refined into CE [59] 
* CE 28 is refined into CE [60] 
* CE 26 is refined into CE [61,62] 
* CE 25 is refined into CE [63] 
* CE 29 is refined into CE [64,65] 


#### Refined cost equations plus/3 
* CE 58: plus(V,V1,Out) = 0
     [V1>=0,V>=0,Out=0] 
* CE 59: plus(A,B,A) = 1
     [A>=0,B=0] 
* CE 60: plus(A,B,B) = 1
     [B>=0,A=0] 
* CE 61: plus(V,V1,Out) = 1+ p(V1,W1):1+ plus(V,X1,Y1)
     [V1>=1,V>=0,Y1+1=Out,X1=0,W1=0] 
* CE 62: plus(V,V1,Out) = 1+ p(W1,X1):2+ plus(V,X1,Y1)
     [X1>=0,V>=0,X1+1=W1,Y1+1=Out,X1+1=V1] 
* CE 63: plus(V,V1,Out) = 1+ plus(W1,V1,X1)
     [W1>=0,V1>=0,X1+1=Out,W1+1=V] 
* CE 64: plus(V,V1,Out) = 1+ p(V,W1):1+ plus(X1,V1,Y1)
     [V>=1,V1>=0,Y1+1=Out,X1=0,W1=0] 
* CE 65: plus(V,V1,Out) = 1+ p(W1,X1):2+ plus(X1,V1,Y1)
     [X1>=0,V1>=0,X1+1=W1,Y1+1=Out,X1+1=V] 

### Cost equations --> "Loop" of plus/3 
* CEs [62] --> Loop 41 
* CEs [63,65] --> Loop 42 
* CEs [61] --> Loop 43 
* CEs [64] --> Loop 44 
* CEs [58] --> Loop 45 
* CEs [59] --> Loop 46 
* CEs [60] --> Loop 47 

#### Loops of plus/3 
* Loop 41: plus(V,V1,Out)->  plus(V,V1',Out')
                  [V1>=1,V>=0,Out=Out'+1,V1=V1'+1] 
* Loop 42: plus(V,V1,Out)->  plus(V',V1,Out')
                  [V1>=0,V>=1,Out=Out'+1,V=V'+1] 
* Loop 43: plus(V,V1,Out)->  plus(V,V1',Out')
                  [V1>=1,V>=0,Out=Out'+1,V1'=0] 
* Loop 44: plus(V,V1,Out)->  plus(V',V1,Out')
                  [V1>=0,V>=1,Out=Out'+1,V'=0] 
* Loop 45: plus(V,V1,Out) [V1>=0,V>=0,Out=0] 
* Loop 46: plus(A,B,A) [A>=0,B=0] 
* Loop 47: plus(A,B,B) [B>=0,A=0] 

### Ranking functions of CR plus(V,V1,Out) 
* RF of phase [41,42,43,44]: [V+V1]

#### Partial ranking functions of CR plus(V,V1,Out) 
* Partial RF of phase [41,42,43,44]:
  - RF of loop [41:1,43:1]:
    V1
  - RF of loop [42:1,44:1]:
    V


### Resulting Chains:plus(V,V1,Out) 
* [[41,42,43,44],47]
* [[41,42,43,44],46]
* [[41,42,43,44],45]
* [47]
* [46]
* [45]


### Merging Chains  plus/3 into  External patterns of execution 
* [[47]] --> 1 
* [[46]] --> 2 
* [[45]] --> 3 
* [[45,[41,42,43,44]],[46,[41,42,43,44]],[47,[41,42,43,44]]] --> 4 


### Specialization of cost equations times/3 
* CE 38 is refined into CE [66] 
* CE 37 is refined into CE [67] 
* CE 39 is refined into CE [68] 
* CE 36 is refined into CE [69,70,71,72] 


#### Refined cost equations times/3 
* CE 66: times(A,B,B) = 1
     [B>=0,A=1] 
* CE 67: times(V,V1,Out) = 1
     [V1>=0,Out=0,V=0] 
* CE 68: times(V,V1,Out) = 0
     [V1>=0,V>=0,Out=0] 
* CE 69: times(V,V1,Out) = 1+ times(W1,X1,Out)+ plus(Y1,Out,Out):1
     [W1>=0,Out>=0,W1+1=V,X1=0,Y1=0,V1=0] 
* CE 70: times(A,B,B) = 1+ times(C,B,D)+ plus(B,E,B):2
     [C>=0,B>=0,C+1=A,D=0,E=0] 
* CE 71: times(V,V1,Out) = 1+ times(W1,V1,X1)+ plus(V1,X1,Y1):3
     [W1>=0,X1>=0,V1>=0,W1+1=V,Y1=0,Out=0] 
* CE 72: times(V,V1,Out) = 1+ times(W1,V1,X1)+ plus(V1,X1,Out):4
     [V1+X1>=Out,W1>=0,Out>=1,X1>=0,V1>=0,W1+1=V] 

### Cost equations --> "Loop" of times/3 
* CEs [72] --> Loop 48 
* CEs [70] --> Loop 49 
* CEs [71] --> Loop 50 
* CEs [69] --> Loop 51 
* CEs [66] --> Loop 52 
* CEs [67,68] --> Loop 53 

#### Loops of times/3 
* Loop 48: times(V,V1,Out)->  times(V',V1,Out')
                  [V1+Out'>=Out,Out'>=0,Out>=1,V1>=0,V>=1,V=V'+1] 
* Loop 49: times(A,B,B)->  times(A',B,B')
                  [B>=0,A>=1,A=A'+1,B'=0] 
* Loop 50: times(V,V1,Out)->  times(V',V1,Out')
                  [Out'>=0,V1>=0,V>=1,V=V'+1,Out=0] 
* Loop 51: times(V,V1,Out)->  times(V',V1',Out)
                  [Out>=0,V>=1,V=V'+1,V1'=0,V1=0] 
* Loop 52: times(A,B,B) [B>=0,A=1] 
* Loop 53: times(V,V1,Out) [V1>=0,V>=0,Out=0] 

### Ranking functions of CR times(V,V1,Out) 
* RF of phase [48,49,50,51]: [V]

#### Partial ranking functions of CR times(V,V1,Out) 
* Partial RF of phase [48,49,50,51]:
  - RF of loop [48:1,49:1,50:1,51:1]:
    V


### Resulting Chains:times(V,V1,Out) 
* [[48,49,50,51],53]
* [[48,49,50,51],52]
* [53]
* [52]


### Merging Chains  times/3 into  External patterns of execution 
* [[52],[52,[48,49,50,51]],[53,[48,49,50,51]]] --> 1 
* [[53]] --> 2 


### Specialization of cost equations divides/3 
* CE 42 is refined into CE [73,74] 
* CE 43 is refined into CE [75,76,77,78,79,80,81,82,83,84,85,86,87] 


#### Refined cost equations divides/3 
* CE 73: divides(V,V1,Out) = 2+ times(W1,V,X1):2+ eq(Y1,Z1,A2):1
     [V>=0,A2=2,Z1=0,Y1=0,X1=0,W1=0,Out=2,V1=0] 
* CE 74: divides(V,V1,Out) = 2+ times(W1,V,X1):2+ eq(Y1,Z1,A2):4
     [V>=0,A2=0,Z1=0,Y1=0,X1=0,W1=0,Out=0,V1=0] 
* CE 75: divides(V,V1,Out) = 2+ quot(W1,V,V,X1):1+ times(X1,V,Y1):1+ eq(Z1,A2,B2):1
     [V>=1,X1>=1,B2=2,A2=0,Z1=0,Y1=0,W1=0,Out=2,V1=0] 
* CE 76: divides(V,V1,Out) = 2+ quot(W1,V,V,X1):1+ times(X1,V,Y1):1+ eq(Z1,Y1,A2):2
     [Y1>=1,V>=1,X1>=1,A2=1,Z1=0,W1=0,Out=1,V1=0] 
* CE 77: divides(V,V1,Out) = 2+ quot(V1,V,V,W1):1+ times(W1,V,X1):1+ eq(V1,Y1,Z1):3
     [2*V>=1,V1>=1,W1>=1,Z1=1,Y1=0,X1=0,Out=1] 
* CE 78: divides(V,V1,Out) = 2+ quot(V1,V,V,W1):1+ times(W1,V,X1):1+ eq(V1,X1,Y1):4
     [V+V1>=1,2*V>=1,X1>=0,V1>=0,W1>=1,Y1=0,Out=0] 
* CE 79: divides(V,V1,Out) = 2+ quot(V1,V,V,W1):1+ times(W1,V,X1):1+ eq(V1,X1,Y1):5
     [X1>=V1+1,2*V>=1,V1>=1,W1>=1,Y1=1,Out=1] 
* CE 80: divides(V,V1,Out) = 2+ quot(V1,V,V,W1):1+ times(W1,V,X1):1+ eq(V1,X1,Y1):6
     [V1>=X1+1,2*V>=1,X1>=1,W1>=1,Y1=1,Out=1] 
* CE 81: divides(V,V1,Out) = 2+ quot(V1,V,V,W1):1+ times(W1,V,V1):1+ eq(V1,V1,X1):7
     [2*V>=1,V1>=1,W1>=1,X1=2,Out=2] 
* CE 82: divides(V,V1,Out) = 2+ quot(W1,V,V,X1):1+ times(X1,V,Y1):2+ eq(Z1,A2,B2):1
     [V>=1,X1>=1,B2=2,A2=0,Z1=0,Y1=0,W1=0,Out=2,V1=0] 
* CE 83: divides(V,V1,Out) = 2+ quot(V1,V,V,W1):1+ times(W1,V,X1):2+ eq(V1,Y1,Z1):3
     [V+W1>=1,2*V>=1,V1>=1,W1>=0,Z1=1,Y1=0,X1=0,Out=1] 
* CE 84: divides(V,V1,Out) = 2+ quot(V1,V,V,W1):1+ times(W1,V,X1):2+ eq(V1,Y1,Z1):4
     [V+V1>=1,V1+W1>=1,V+W1>=1,2*V>=1,V1>=0,W1>=0,Z1=0,Y1=0,X1=0,Out=0] 
* CE 85: divides(V,V1,Out) = 2+ quot(W1,V,V,X1):2+ times(Y1,V,Z1):2+ eq(A2,B2,C2):1
     [V>=0,C2=2,B2=0,A2=0,Z1=0,Y1=0,X1=0,W1=0,Out=2,V1=0] 
* CE 86: divides(V,V1,Out) = 2+ quot(V1,V,V,W1):2+ times(X1,V,Y1):2+ eq(V1,Z1,A2):3
     [V1>=1,V>=0,A2=1,Z1=0,Y1=0,X1=0,W1=0,Out=1] 
* CE 87: divides(V,V1,Out) = 2+ quot(V1,V,V,W1):2+ times(X1,V,Y1):2+ eq(V1,Z1,A2):4
     [V1>=0,V>=0,A2=0,Z1=0,Y1=0,X1=0,W1=0,Out=0] 

### Cost equations --> "Loop" of divides/3 
* CEs [81] --> Loop 54 
* CEs [77,79,80,83,86] --> Loop 55 
* CEs [73,75,82,85] --> Loop 56 
* CEs [76] --> Loop 57 
* CEs [74,78,84,87] --> Loop 58 

#### Loops of divides/3 
* Loop 54: divides(V,V1,Out) [2*V>=1,V1>=1,Out=2] 
* Loop 55: divides(V,V1,Out) [V1>=1,V>=0,Out=1] 
* Loop 56: divides(V,V1,Out) [V>=0,Out=2,V1=0] 
* Loop 57: divides(V,V1,Out) [V>=1,Out=1,V1=0] 
* Loop 58: divides(V,V1,Out) [V1>=0,V>=0,Out=0] 

### Ranking functions of CR divides(V,V1,Out) 

#### Partial ranking functions of CR divides(V,V1,Out) 


### Resulting Chains:divides(V,V1,Out) 
* [58]
* [57]
* [56]
* [55]
* [54]


### Merging Chains  divides/3 into  External patterns of execution 
* [[57]] --> 1 
* [[56]] --> 2 
* [[58]] --> 3 
* [[55]] --> 4 
* [[54]] --> 5 


### Specialization of cost equations pr/3 
* CE 16 is refined into CE [88,89] 
* CE 15 is refined into CE [90,91,92,93,94] 
* CE 19 is refined into CE [95] 
* CE 18 is refined into CE [96] 
* CE 17 is refined into CE [97,98] 


#### Refined cost equations pr/3 
* CE 88: pr(V,V1,Out) = 2+ divides(V1,W1,X1):2
     [V1>=2,X1=2,W1=0,Out=1,V=0] 
* CE 89: pr(V,V1,Out) = 2+ divides(V1,V,W1):5
     [V>=1,V1>=2,W1=2,Out=1] 
* CE 90: pr(V,V1,Out) = 1+ divides(V1,W1,X1):1
     [V1>=2,X1=1,W1=0,Out=0,V=0] 
* CE 91: pr(V,V1,Out) = 1+ divides(V1,W1,X1):2
     [V1>=2,X1=2,W1=0,Out=0,V=0] 
* CE 92: pr(V,V1,Out) = 1+ divides(V1,V,W1):3
     [V>=0,V1>=2,W1=0,Out=0] 
* CE 93: pr(V,V1,Out) = 1+ divides(V1,V,W1):4
     [V>=1,V1>=2,W1=1,Out=0] 
* CE 94: pr(V,V1,Out) = 1+ divides(V1,V,W1):5
     [V>=1,V1>=2,W1=2,Out=0] 
* CE 95: pr(V,V1,Out) = 0
     [V1>=0,V>=0,Out=0] 
* CE 96: pr(V,V1,Out) = 1
     [V>=0,Out=2,V1=1] 
* CE 97: pr(V,V1,Out) = 2+ divides(V1,W1,X1):1+ pr(Y1,Z1,Out)
     [V1>=2,V1=Z1+1,Y1=0,X1=1,W1=0,V=0] 
* CE 98: pr(V,V1,Out) = 2+ divides(V1,V,W1):4+ pr(V,X1,Out)
     [V>=1,V1>=2,V1=X1+1,W1=1] 

### Cost equations --> "Loop" of pr/3 
* CEs [98] --> Loop 59 
* CEs [97] --> Loop 60 
* CEs [89] --> Loop 61 
* CEs [96] --> Loop 62 
* CEs [88] --> Loop 63 
* CEs [90,91,92,93,94,95] --> Loop 64 

#### Loops of pr/3 
* Loop 59: pr(V,V1,Out)->  pr(V,V1',Out)
                  [V1>=2,V>=1,V1=V1'+1] 
* Loop 60: pr(V,V1,Out)->  pr(V',V1',Out)
                  [V1>=2,V1=V1'+1,V'=0,V=0] 
* Loop 61: pr(V,V1,Out) [V1>=2,V>=1,Out=1] 
* Loop 62: pr(V,V1,Out) [V>=0,Out=2,V1=1] 
* Loop 63: pr(V,V1,Out) [V1>=2,Out=1,V=0] 
* Loop 64: pr(V,V1,Out) [V1>=0,V>=0,Out=0] 

### Ranking functions of CR pr(V,V1,Out) 
* RF of phase [59]: [V1-1]
* RF of phase [60]: [V1-1]

#### Partial ranking functions of CR pr(V,V1,Out) 
* Partial RF of phase [59]:
  - RF of loop [59:1]:
    V1-1
* Partial RF of phase [60]:
  - RF of loop [60:1]:
    V1-1


### Resulting Chains:pr(V,V1,Out) 
* [[60],64]
* [[60],63]
* [[60],62]
* [[59],64]
* [[59],62]
* [[59],61]
* [64]
* [63]
* [62]
* [61]


### Merging Chains  pr/3 into  External patterns of execution 
* [[64],[64,[59]],[64,[60]]] --> 1 
* [[63],[63,[60]]] --> 2 
* [[62,[60]]] --> 3 
* [[62]] --> 4 
* [[61],[61,[59]]] --> 5 
* [[62,[59]]] --> 6 


### Specialization of cost equations prime/2 
* CE 44 is refined into CE [99,100,101,102] 
* CE 45 is refined into CE [103] 


#### Refined cost equations prime/2 
* CE 99: prime(V,Out) = 1+ pr(V,W,X):1
     [V>=2,V=W+1,X=0,Out=0] 
* CE 100: prime(V,Out) = 1+ pr(W,X,Y):4
     [Y=2,X=1,W=2,Out=2,V=2] 
* CE 101: prime(V,Out) = 1+ pr(V,W,X):5
     [V>=3,V=W+1,X=1,Out=1] 
* CE 102: prime(V,Out) = 1+ pr(V,W,X):6
     [V>=3,V=W+1,X=2,Out=2] 
* CE 103: prime(V,Out) = 0
     [V>=0,Out=0] 

### Cost equations --> "Loop" of prime/2 
* CEs [102] --> Loop 65 
* CEs [101] --> Loop 66 
* CEs [99,103] --> Loop 67 
* CEs [100] --> Loop 68 

#### Loops of prime/2 
* Loop 65: prime(V,Out) [V>=3,Out=2] 
* Loop 66: prime(V,Out) [V>=3,Out=1] 
* Loop 67: prime(V,Out) [V>=0,Out=0] 
* Loop 68: prime(V,Out) [Out=2,V=2] 

### Ranking functions of CR prime(V,Out) 

#### Partial ranking functions of CR prime(V,Out) 


### Resulting Chains:prime(V,Out) 
* [68]
* [67]
* [66]
* [65]


### Merging Chains  prime/2 into  External patterns of execution 
* [[68]] --> 1 
* [[67]] --> 2 
* [[66]] --> 3 
* [[65]] --> 4 


### Specialization of cost equations start/3 
* CE 3 is refined into CE [104] 
* CE 4 is refined into CE [105,106,107,108,109,110] 
* CE 2 is refined into CE [111] 
* CE 5 is refined into CE [112] 
* CE 6 is refined into CE [113,114] 
* CE 7 is refined into CE [115,116,117,118] 
* CE 8 is refined into CE [119,120,121,122,123,124,125] 
* CE 9 is refined into CE [126,127] 
* CE 10 is refined into CE [128,129] 
* CE 11 is refined into CE [130,131,132,133,134] 
* CE 12 is refined into CE [135,136,137,138,139,140] 
* CE 13 is refined into CE [141,142] 
* CE 14 is refined into CE [143,144,145,146] 


#### Refined cost equations start/3 
* CE 104: start(V,V1,V4) = 1
     [V4>=0,V1>=0,V=2] 
* CE 105: start(V,V1,V4) = 1+ pr(V1,V4,W4):1
     [V4>=0,V1>=0,W4=0,V=1] 
* CE 106: start(V,V1,V4) = 1+ pr(W4,V4,X4):2
     [V4>=2,X4=1,W4=0,V1=0,V=1] 
* CE 107: start(V,V1,V4) = 1+ pr(W4,V4,X4):3
     [V4>=2,X4=2,W4=0,V1=0,V=1] 
* CE 108: start(V,V1,V4) = 1+ pr(V1,W4,X4):4
     [V1>=0,X4=2,W4=1,V4=1,V=1] 
* CE 109: start(V,V1,V4) = 1+ pr(V1,V4,W4):5
     [V4>=2,V1>=1,W4=1,V=1] 
* CE 110: start(V,V1,V4) = 1+ pr(V1,V4,W4):6
     [V4>=2,V1>=1,W4=2,V=1] 
* CE 111: start(V,V1,V4) = 0
     [V4>=0,V1>=0,V>=0] 
* CE 112: start(V,V1,V4) = 1
     [V1>=0,V=0] 
* CE 113: start(V,V1,V4) = 1+ quot(V,V1,V1,W4):1
     [V1+W4>=1,V+W4>=1,V+V1>=1,2*V1>=1,W4>=0,V>=0] 
* CE 114: start(V,V1,V4) = 1+ quot(V,V1,V1,W4):2
     [V1>=0,V>=0,W4=0] 
* CE 115: start(V,V1,V4) = 0+ plus(W4,V1,V1):1
     [V1>=0,W4=0,V=0] 
* CE 116: start(V,V1,V4) = 0+ plus(V,W4,V):2
     [V>=0,W4=0,V1=0] 
* CE 117: start(V,V1,V4) = 0+ plus(V,V1,W4):3
     [V1>=0,V>=0,W4=0] 
* CE 118: start(V,V1,V4) = 0+ plus(V,V1,W4):4
     [V+V1>=W4,W4>=1,V1>=0,V>=0] 
* CE 119: start(V,V1,V4) = 0+ eq(W4,X4,Y4):1
     [Y4=2,X4=0,W4=0,V1=0,V=0] 
* CE 120: start(V,V1,V4) = 0+ eq(W4,V1,X4):2
     [V1>=1,X4=1,W4=0,V=0] 
* CE 121: start(V,V1,V4) = 0+ eq(V,W4,X4):3
     [V>=1,X4=1,W4=0,V1=0] 
* CE 122: start(V,V1,V4) = 0+ eq(V,V1,W4):4
     [V1>=0,V>=0,W4=0] 
* CE 123: start(V,V1,V4) = 0+ eq(V,V1,W4):5
     [V1>=V+1,V>=1,W4=1] 
* CE 124: start(V,V1,V4) = 0+ eq(V,V1,W4):6
     [V>=V1+1,V1>=1,W4=1] 
* CE 125: start(A,A,B) = 0+ eq(A,A,C):7
     [A>=1,C=2] 
* CE 126: start(V,V1,V4) = 0+ times(V,V1,W4):1
     [W4>=0,V1>=0,V>=1] 
* CE 127: start(V,V1,V4) = 0+ times(V,V1,W4):2
     [V1>=0,V>=0,W4=0] 
* CE 128: start(V,V1,V4) = 0+ p(V,W4):1
     [V>=0,W4=0] 
* CE 129: start(V,V1,V4) = 0+ p(W4,X4):2
     [X4>=0,X4+1=W4,X4+1=V] 
* CE 130: start(V,V1,V4) = 0+ divides(V,W4,X4):1
     [V>=1,X4=1,W4=0,V1=0] 
* CE 131: start(V,V1,V4) = 0+ divides(V,W4,X4):2
     [V>=0,X4=2,W4=0,V1=0] 
* CE 132: start(V,V1,V4) = 0+ divides(V,V1,W4):3
     [V1>=0,V>=0,W4=0] 
* CE 133: start(V,V1,V4) = 0+ divides(V,V1,W4):4
     [V1>=1,V>=0,W4=1] 
* CE 134: start(V,V1,V4) = 0+ divides(V,V1,W4):5
     [2*V>=1,V1>=1,W4=2] 
* CE 135: start(V,V1,V4) = 0+ pr(V,V1,W4):1
     [V1>=0,V>=0,W4=0] 
* CE 136: start(V,V1,V4) = 0+ pr(W4,V1,X4):2
     [V1>=2,X4=1,W4=0,V=0] 
* CE 137: start(V,V1,V4) = 0+ pr(W4,V1,X4):3
     [V1>=2,X4=2,W4=0,V=0] 
* CE 138: start(V,V1,V4) = 0+ pr(V,W4,X4):4
     [V>=0,X4=2,W4=1,V1=1] 
* CE 139: start(V,V1,V4) = 0+ pr(V,V1,W4):5
     [V1>=2,V>=1,W4=1] 
* CE 140: start(V,V1,V4) = 0+ pr(V,V1,W4):6
     [V1>=2,V>=1,W4=2] 
* CE 141: start(V,V1,V4) = 0+ quot(V,V1,V4,W4):1
     [V1+W4>=1,V1+V4>=1,V+W4>=1,V+V4>=1,W4>=0,V4>=0,V1>=0,V>=0] 
* CE 142: start(V,V1,V4) = 0+ quot(V,V1,V4,W4):2
     [V4>=0,V1>=0,V>=0,W4=0] 
* CE 143: start(V,V1,V4) = 0+ prime(W4,X4):1
     [X4=2,W4=2,V=2] 
* CE 144: start(V,V1,V4) = 0+ prime(V,W4):2
     [V>=0,W4=0] 
* CE 145: start(V,V1,V4) = 0+ prime(V,W4):3
     [V>=3,W4=1] 
* CE 146: start(V,V1,V4) = 0+ prime(V,W4):4
     [V>=3,W4=2] 

### Cost equations --> "Loop" of start/3 
* CEs [125] --> Loop 69 
* CEs [138] --> Loop 70 
* CEs [116,121,130,131] --> Loop 71 
* CEs [104,143] --> Loop 72 
* CEs [108] --> Loop 73 
* CEs [105,106,107,109,110] --> Loop 74 
* CEs [111,112,113,114,115,117,118,119,120,122,123,124,126,127,128,129,132,133,134,135,136,137,139,140,141,142,144,145,146] --> Loop 75 

#### Loops of start/3 
* Loop 69: start(A,A,B) [A>=1] 
* Loop 70: start(V,V1,V4) [V>=0,V1=1] 
* Loop 71: start(V,V1,V4) [V>=0,V1=0] 
* Loop 72: start(V,V1,V4) [V=2] 
* Loop 73: start(V,V1,V4) [V1>=0,V4=1,V=1] 
* Loop 74: start(V,V1,V4) [V4>=0,V1>=0,V=1] 
* Loop 75: start(V,V1,V4) [V>=0] 

### Ranking functions of CR start(V,V1,V4) 

#### Partial ranking functions of CR start(V,V1,V4) 


### Resulting Chains:start(V,V1,V4) 
* [75]
* [74]
* [73]
* [72]
* [71]
* [70]
* [69]


### Merging Chains  start/3 into  External patterns of execution 
* [[73],[74],[75]] --> 1 
* [[72]] --> 2 
* [[71]] --> 3 
* [[70]] --> 4 
* [[69]] --> 5 


Computing Bounds
=====================================

#### Cost of loops [30,31] 

 * loop 30:quot(V,V1,V4,Out) -> [quot(V',V1',V4',Out')] 
1
 * loop 31:quot(V,V1,V4,Out) -> [quot(V',V1',V4',Out')] 
2
#### Cost of phase [30,31]:quot(V,V1,V4,Out) -> [quot(V',V1',V4',Out')] 
1*it(30)+2*it(31)+0
  Such that:it(30) =< V
it(30) =< V-V'
aux(5) =< -V1+1
aux(6) =< -V1+V1'
it(31) =< it(30)+aux(6)
it(31) =< it(30)+aux(5)

#### Cost of phase [30,31]:quot(V,V1,V4,Out) -> [quot(V',V1',V4',Out')] 
1*it(30)+2*it(31)+0
  Such that:it(30) =< V
it(30) =< V-V'
aux(5) =< -V1+1
aux(6) =< -V1+V1'
it(31) =< it(30)+aux(6)
it(31) =< it(30)+aux(5)

#### Cost of chains of quot(V,V1,V4,Out):
* Chain [[30,31],33]: 1*it(30)+2*it(31)+2
  Such that:it(30) =< V
aux(6) =< -V1
aux(5) =< -V1+1
it(31) =< it(30)+aux(6)
it(31) =< it(30)+aux(5)

  with precondition: [V1>=0,V4>=0,Out>=1,V1+V4>=1,Out+V1>=2,V+1>=Out+V1] 

* Chain [[30,31],32]: 1*it(30)+2*it(31)+1
  Such that:it(30) =< V
aux(5) =< -V1+1
it(31) =< it(30)+aux(5)

  with precondition: [V>=0,V1>=0,V4>=0,Out>=0,V+V4>=1,Out+V>=1,V1+V4>=1,Out+V1>=1] 

* Chain [33]: 2
  with precondition: [V=0,V1=0,Out=1,V4>=1] 

* Chain [32]: 1
  with precondition: [Out=0,V>=0,V1>=0,V4>=0] 


#### Cost of loops [34] 

 * loop 34:eq(V,V1,Out) -> [eq(V',V1',Out')] 
1
#### Cost of phase [34]:eq(V,V1,Out) -> [eq(V',V1',Out')] 
1*it(34)+0
  Such that:it(34) =< V
it(34) =< V-V'
it(34) =< V1
it(34) =< V1-V1'

#### Cost of phase [34]:eq(V,V1,Out) -> [eq(V',V1',Out')] 
1*it(34)+0
  Such that:it(34) =< V
it(34) =< V-V'
it(34) =< V1
it(34) =< V1-V1'

#### Cost of phase [34]:eq(V,V1,Out) -> [eq(V',V1',Out')] 
1*it(34)+0
  Such that:it(34) =< V
it(34) =< V-V'
it(34) =< V1
it(34) =< V1-V1'

#### Cost of phase [34]:eq(V,V1,Out) -> [eq(V',V1',Out')] 
1*it(34)+0
  Such that:it(34) =< V
it(34) =< V-V'
it(34) =< V1
it(34) =< V1-V1'

#### Cost of chains of eq(V,V1,Out):
* Chain [[34],38]: 1*it(34)+1
  Such that:it(34) =< V

  with precondition: [Out=2,V=V1,V>=1] 

* Chain [[34],37]: 1*it(34)+1
  Such that:it(34) =< V

  with precondition: [Out=1,V>=1,V1>=V+1] 

* Chain [[34],36]: 1*it(34)+1
  Such that:it(34) =< V1

  with precondition: [Out=1,V1>=1,V>=V1+1] 

* Chain [[34],35]: 1*it(34)+0
  Such that:it(34) =< V1

  with precondition: [Out=0,V>=1,V1>=1] 

* Chain [38]: 1
  with precondition: [V=0,V1=0,Out=2] 

* Chain [37]: 1
  with precondition: [V=0,Out=1,V1>=1] 

* Chain [36]: 1
  with precondition: [V1=0,Out=1,V>=1] 

* Chain [35]: 0
  with precondition: [Out=0,V>=0,V1>=0] 


#### Cost of chains of p(V,Out):
* Chain [40]: 0
  with precondition: [Out=0,V>=0] 

* Chain [39]: 1
  with precondition: [V=Out+1,V>=1] 


#### Cost of loops [41,42,43,44] 

 * loop 41:plus(V,V1,Out) -> [plus(V',V1',Out')] 
2
 * loop 42:plus(V,V1,Out) -> [plus(V',V1',Out')] 
2
 * loop 43:plus(V,V1,Out) -> [plus(V',V1',Out')] 
1
 * loop 44:plus(V,V1,Out) -> [plus(V',V1',Out')] 
1
#### Cost of phase [41,42,43,44]:plus(V,V1,Out) -> [plus(V',V1',Out')] 
3*it(41)+3*it(42)+0
  Such that:aux(13) =< V
aux(14) =< V+V1
aux(15) =< V+V1-V'-V1'
aux(16) =< V-V'
aux(17) =< V1
aux(18) =< V1-V1'
it(42) =< aux(13)
it(41) =< aux(14)
it(42) =< aux(14)
it(41) =< aux(15)
it(42) =< aux(15)
it(42) =< aux(16)
it(41) =< aux(17)
it(41) =< aux(18)

#### Cost of phase [41,42,43,44]:plus(V,V1,Out) -> [plus(V',V1',Out')] 
3*it(41)+3*it(42)+0
  Such that:aux(13) =< V
aux(14) =< V+V1
aux(15) =< V+V1-V'-V1'
aux(16) =< V-V'
aux(17) =< V1
aux(18) =< V1-V1'
it(42) =< aux(13)
it(41) =< aux(14)
it(42) =< aux(14)
it(41) =< aux(15)
it(42) =< aux(15)
it(42) =< aux(16)
it(41) =< aux(17)
it(41) =< aux(18)

#### Cost of phase [41,42,43,44]:plus(V,V1,Out) -> [plus(V',V1',Out')] 
3*it(41)+3*it(42)+0
  Such that:aux(13) =< V
aux(14) =< V+V1
aux(15) =< V+V1-V'-V1'
aux(16) =< V-V'
aux(17) =< V1
aux(18) =< V1-V1'
it(42) =< aux(13)
it(41) =< aux(14)
it(42) =< aux(14)
it(41) =< aux(15)
it(42) =< aux(15)
it(42) =< aux(16)
it(41) =< aux(17)
it(41) =< aux(18)

#### Cost of chains of plus(V,V1,Out):
* Chain [[41,42,43,44],47]: 3*it(41)+3*it(42)+1
  Such that:aux(19) =< V
aux(20) =< V+V1
aux(21) =< V1
it(42) =< aux(19)
it(41) =< aux(20)
it(42) =< aux(20)
it(41) =< aux(21)

  with precondition: [V>=0,V1>=0,Out>=1,V+V1>=Out] 

* Chain [[41,42,43,44],46]: 3*it(41)+3*it(42)+1
  Such that:aux(22) =< V
aux(23) =< V+V1
aux(24) =< V1
it(42) =< aux(22)
it(41) =< aux(23)
it(42) =< aux(23)
it(41) =< aux(24)

  with precondition: [V>=0,V1>=0,Out>=1,V+V1>=Out] 

* Chain [[41,42,43,44],45]: 3*it(41)+3*it(42)+0
  Such that:aux(25) =< V
aux(26) =< V+V1
aux(27) =< V1
it(42) =< aux(25)
it(41) =< aux(26)
it(42) =< aux(26)
it(41) =< aux(27)

  with precondition: [V>=0,V1>=0,Out>=1,V+V1>=Out] 

* Chain [47]: 1
  with precondition: [V=0,V1=Out,V1>=0] 

* Chain [46]: 1
  with precondition: [V1=0,V=Out,V>=0] 

* Chain [45]: 0
  with precondition: [Out=0,V>=0,V1>=0] 


#### Cost of loops [48,49,50,51] 

 * loop 48:times(V,V1,Out) -> [times(V',V1',Out')] 
9*s(30)+9*s(31)+2
  Such that:s(29) =< V1
s(30) =< s(29)

 * loop 49:times(V,V1,Out) -> [times(V',V1',Out')] 
2
 * loop 50:times(V,V1,Out) -> [times(V',V1',Out')] 
1
 * loop 51:times(V,V1,Out) -> [times(V',V1',Out')] 
2
#### Cost of phase [48,49,50,51]:times(V,V1,Out) -> [times(V',V1',Out')] 
7*it(48)+9*s(32)+9*s(33)+0
  Such that:aux(31) =< V1
aux(32) =< V
aux(33) =< V-V'
it(48) =< aux(32)
it(48) =< aux(33)
s(34) =< it(48)*aux(31)
s(32) =< s(34)

#### Cost of phase [48,49,50,51]:times(V,V1,Out) -> [times(V',V1',Out')] 
7*it(48)+9*s(32)+9*s(33)+0
  Such that:aux(31) =< V1
aux(32) =< V
aux(33) =< V-V'
it(48) =< aux(32)
it(48) =< aux(33)
s(34) =< it(48)*aux(31)
s(32) =< s(34)

#### Cost of chains of times(V,V1,Out):
* Chain [[48,49,50,51],53]: 7*it(48)+9*s(32)+9*s(33)+1
  Such that:aux(31) =< V1
aux(34) =< V
it(48) =< aux(34)
s(34) =< it(48)*aux(31)
s(32) =< s(34)

  with precondition: [V>=1,V1>=0,Out>=0] 

* Chain [[48,49,50,51],52]: 7*it(48)+9*s(32)+9*s(33)+1
  Such that:aux(31) =< V1
aux(35) =< V
it(48) =< aux(35)
s(34) =< it(48)*aux(31)
s(32) =< s(34)

  with precondition: [V>=2,V1>=0,Out>=0] 

* Chain [53]: 1
  with precondition: [Out=0,V>=0,V1>=0] 

* Chain [52]: 1
  with precondition: [V=1,V1=Out,V1>=0] 


#### Cost of chains of divides(V,V1,Out):
* Chain [58]: 4*s(51)+4*s(52)+4*s(53)+51*s(56)+5
  Such that:aux(38) =< -V
aux(39) =< -V+1
aux(40) =< V1
s(51) =< aux(40)
s(52) =< s(51)+aux(39)
s(53) =< s(51)+aux(38)
s(53) =< s(51)+aux(39)

  with precondition: [Out=0,V>=0,V1>=0] 

* Chain [57]: 2*s(73)+2*s(74)+14*s(77)+18*s(79)+18*s(80)+6
  Such that:s(69) =< -V
s(71) =< -V+1
s(73) =< s(71)
s(74) =< s(69)
s(74) =< s(71)

  with precondition: [V1=0,Out=1,V>=1] 

* Chain [56]: 4*s(85)+4*s(86)+50*s(89)+6
  Such that:aux(41) =< -V
aux(42) =< -V+1
s(85) =< aux(42)
s(86) =< aux(41)
s(86) =< aux(42)

  with precondition: [V1=0,Out=2,V>=0] 

* Chain [55]: 10*s(102)+8*s(103)+8*s(104)+150*s(107)+6
  Such that:aux(45) =< -V
aux(46) =< -V+1
aux(47) =< V1
s(102) =< aux(47)
s(103) =< s(102)+aux(46)
s(104) =< s(102)+aux(45)
s(104) =< s(102)+aux(46)

  with precondition: [Out=1,V>=0,V1>=1] 

* Chain [54]: 3*s(146)+2*s(147)+2*s(148)+14*s(151)+18*s(153)+18*s(154)+6
  Such that:s(143) =< -V
s(145) =< -V+1
aux(48) =< V1
s(146) =< aux(48)
s(147) =< s(146)+s(145)
s(148) =< s(146)+s(143)
s(148) =< s(146)+s(145)

  with precondition: [Out=2,V1>=1,2*V>=1] 


#### Cost of loops [60] 

 * loop 60:pr(V,V1,Out) -> [pr(V',V1',Out')] 
2*s(200)+2*s(201)+50*s(202)+8
  Such that:s(198) =< -V1
s(199) =< -V1+1
s(200) =< s(199)
s(201) =< s(198)
s(201) =< s(199)

#### Cost of phase [60]:pr(V,V1,Out) -> [pr(V',V1',Out')] 
8*it(60)+50*s(205)+0
  Such that:it(60) =< V1
it(60) =< V1-V1'

#### Cost of phase [60]:pr(V,V1,Out) -> [pr(V',V1',Out')] 
8*it(60)+50*s(205)+0
  Such that:it(60) =< V1
it(60) =< V1-V1'

#### Cost of phase [60]:pr(V,V1,Out) -> [pr(V',V1',Out')] 
8*it(60)+50*s(205)+0
  Such that:it(60) =< V1
it(60) =< V1-V1'

#### Cost of loops [59] 

 * loop 59:pr(V,V1,Out) -> [pr(V',V1',Out')] 
10*s(222)+16*s(223)+150*s(224)+8
  Such that:s(220) =< V'
s(221) =< -V1'
s(222) =< s(220)
s(223) =< s(222)+s(221)

#### Cost of phase [59]:pr(V,V1,Out) -> [pr(V',V1',Out')] 
8*it(59)+10*s(225)+16*s(226)+150*s(227)+0
  Such that:aux(56) =< V
it(59) =< V1
it(59) =< V1-V1'
s(229) =< it(59)*aux(56)
s(225) =< s(229)
s(226) =< s(225)

#### Cost of phase [59]:pr(V,V1,Out) -> [pr(V',V1',Out')] 
8*it(59)+10*s(225)+16*s(226)+150*s(227)+0
  Such that:aux(56) =< V
it(59) =< V1
it(59) =< V1-V1'
s(229) =< it(59)*aux(56)
s(225) =< s(229)
s(226) =< s(225)

#### Cost of phase [59]:pr(V,V1,Out) -> [pr(V',V1',Out')] 
8*it(59)+10*s(225)+16*s(226)+150*s(227)+0
  Such that:aux(56) =< V
it(59) =< V1
it(59) =< V1-V1'
s(229) =< it(59)*aux(56)
s(225) =< s(229)
s(226) =< s(225)

#### Cost of chains of pr(V,V1,Out):
* Chain [[60],64]: 8*it(60)+401*s(160)+7
  Such that:it(60) =< V1

  with precondition: [V=0,Out=0,V1>=2] 

* Chain [[60],63]: 8*it(60)+100*s(205)+8
  Such that:it(60) =< V1

  with precondition: [V=0,Out=1,V1>=3] 

* Chain [[60],62]: 8*it(60)+50*s(205)+1
  Such that:it(60) =< V1

  with precondition: [V=0,Out=2,V1>=2] 

* Chain [[59],64]: 8*it(59)+501*s(160)+17*s(171)+28*s(172)+10*s(225)+16*s(226)+7
  Such that:it(59) =< V1
aux(58) =< V
s(171) =< aux(58)
s(172) =< s(171)
s(229) =< it(59)*aux(58)
s(225) =< s(229)
s(226) =< s(225)

  with precondition: [Out=0,V>=1,V1>=2] 

* Chain [[59],62]: 8*it(59)+10*s(225)+16*s(226)+150*s(227)+1
  Such that:aux(56) =< V
it(59) =< V1
s(229) =< it(59)*aux(56)
s(225) =< s(229)
s(226) =< s(225)

  with precondition: [Out=2,V>=1,V1>=2] 

* Chain [[59],61]: 8*it(59)+10*s(225)+16*s(226)+200*s(227)+3*s(233)+4*s(234)+8
  Such that:it(59) =< V1
aux(60) =< V
s(233) =< aux(60)
s(234) =< s(233)
s(229) =< it(59)*aux(60)
s(225) =< s(229)
s(226) =< s(225)

  with precondition: [Out=1,V>=1,V1>=3] 

* Chain [64]: 6*s(158)+6*s(159)+351*s(160)+17*s(171)+14*s(172)+14*s(173)+7
  Such that:aux(49) =< V
aux(50) =< -V1
aux(51) =< -V1+1
s(171) =< aux(49)
s(172) =< s(171)+aux(51)
s(173) =< s(171)+aux(50)
s(173) =< s(171)+aux(51)
s(158) =< aux(51)
s(159) =< aux(50)
s(159) =< aux(51)

  with precondition: [Out=0,V>=0,V1>=0] 

* Chain [63]: 4*s(210)+4*s(211)+50*s(212)+8
  Such that:s(208) =< -V1
s(209) =< -V1+1
s(210) =< s(209)
s(211) =< s(208)
s(211) =< s(209)

  with precondition: [V=0,Out=1,V1>=2] 

* Chain [62]: 1
  with precondition: [V1=1,Out=2,V>=0] 

* Chain [61]: 3*s(233)+2*s(234)+2*s(235)+50*s(236)+8
  Such that:s(232) =< V
s(230) =< -V1
s(231) =< -V1+1
s(233) =< s(232)
s(234) =< s(233)+s(231)
s(235) =< s(233)+s(230)
s(235) =< s(233)+s(231)

  with precondition: [Out=1,V>=1,V1>=2] 


#### Cost of chains of prime(V,Out):
* Chain [68]: 2
  with precondition: [V=2,Out=2] 

* Chain [67]: 50*s(284)+14*s(286)+14*s(287)+6*s(288)+6*s(289)+28*s(290)+10*s(292)+16*s(293)+1253*s(294)+8
  Such that:s(280) =< -V+1
s(281) =< -V+2
aux(64) =< V
s(284) =< aux(64)
s(286) =< s(284)+s(281)
s(287) =< s(284)+s(280)
s(287) =< s(284)+s(281)
s(288) =< s(281)
s(289) =< s(280)
s(289) =< s(281)
s(290) =< s(284)
s(291) =< s(284)*aux(64)
s(292) =< s(291)
s(293) =< s(292)

  with precondition: [Out=0,V>=0] 

* Chain [66]: 14*s(297)+2*s(300)+2*s(301)+4*s(302)+10*s(304)+16*s(305)+250*s(306)+9
  Such that:s(295) =< -V+1
s(296) =< -V+2
aux(65) =< V
s(297) =< aux(65)
s(300) =< s(297)+s(296)
s(301) =< s(297)+s(295)
s(301) =< s(297)+s(296)
s(302) =< s(297)
s(303) =< s(297)*aux(65)
s(304) =< s(303)
s(305) =< s(304)

  with precondition: [Out=1,V>=3] 

* Chain [65]: 8*s(308)+10*s(310)+16*s(311)+150*s(312)+2
  Such that:aux(66) =< V
s(308) =< aux(66)
s(309) =< s(308)*aux(66)
s(310) =< s(309)
s(311) =< s(310)

  with precondition: [Out=2,V>=3] 


#### Cost of chains of start(V,V1,V4):
* Chain [75]: 131*s(316)+20*s(317)+20*s(318)+9*s(322)+9*s(323)+67*s(324)+18*s(331)+3775*s(332)+14*s(337)+14*s(338)+10*s(364)+10*s(365)+64*s(366)+10*s(368)+16*s(369)+20*s(388)+32*s(389)+16*s(407)+16*s(408)+6*s(409)+6*s(410)+30*s(413)+48*s(414)+9
  Such that:s(320) =< V+V1
aux(67) =< -V
aux(68) =< -V+1
aux(69) =< -V+2
aux(70) =< V
aux(71) =< -V1
aux(72) =< -V1+1
aux(73) =< V1
s(316) =< aux(70)
s(324) =< aux(73)
s(337) =< s(324)+aux(68)
s(338) =< s(324)+aux(67)
s(338) =< s(324)+aux(68)
s(407) =< s(316)+aux(69)
s(408) =< s(316)+aux(68)
s(408) =< s(316)+aux(69)
s(409) =< aux(69)
s(410) =< aux(68)
s(410) =< aux(69)
s(366) =< s(316)
s(412) =< s(316)*aux(70)
s(413) =< s(412)
s(414) =< s(413)
s(317) =< s(316)+aux(72)
s(318) =< s(316)+aux(71)
s(318) =< s(316)+aux(72)
s(322) =< aux(70)
s(323) =< s(320)
s(322) =< s(320)
s(323) =< aux(73)
s(330) =< s(316)*aux(73)
s(331) =< s(330)
s(364) =< aux(72)
s(365) =< aux(71)
s(365) =< aux(72)
s(367) =< s(324)*aux(70)
s(368) =< s(367)
s(369) =< s(368)
s(387) =< s(324)*aux(70)
s(388) =< s(387)
s(389) =< s(388)

  with precondition: [V>=0] 

* Chain [74]: 48*s(437)+40*s(438)+16*s(439)+16*s(440)+10*s(441)+10*s(442)+32*s(443)+10*s(445)+16*s(446)+1853*s(447)+20*s(465)+32*s(466)+9
  Such that:aux(74) =< V1
aux(75) =< -V4
aux(76) =< -V4+1
aux(77) =< V4
s(437) =< aux(77)
s(438) =< aux(74)
s(439) =< s(438)+aux(76)
s(440) =< s(438)+aux(75)
s(440) =< s(438)+aux(76)
s(441) =< aux(76)
s(442) =< aux(75)
s(442) =< aux(76)
s(443) =< s(438)
s(444) =< s(437)*aux(74)
s(445) =< s(444)
s(446) =< s(445)
s(464) =< s(437)*aux(74)
s(465) =< s(464)
s(466) =< s(465)

  with precondition: [V=1,V1>=0,V4>=0] 

* Chain [73]: 2
  with precondition: [V=1,V4=1,V1>=0] 

* Chain [72]: 2
  with precondition: [V=2] 

* Chain [71]: 6*s(476)+6*s(477)+100*s(478)+6
  Such that:aux(78) =< -V
aux(79) =< -V+1
s(476) =< aux(79)
s(477) =< aux(78)
s(477) =< aux(79)

  with precondition: [V1=0,V>=0] 

* Chain [70]: 1
  with precondition: [V1=1,V>=0] 

* Chain [69]: 1*s(486)+1
  Such that:s(486) =< V1

  with precondition: [V=V1,V>=1] 


Closed-form bounds of start(V,V1,V4): 
-------------------------------------
* Chain [75] with precondition: [V>=0] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [74] with precondition: [V=1,V1>=0,V4>=0] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [73] with precondition: [V=1,V4=1,V1>=0] 
    - Upper bound: 2 
    - Complexity: constant 
* Chain [72] with precondition: [V=2] 
    - Upper bound: 2 
    - Complexity: constant 
* Chain [71] with precondition: [V1=0,V>=0] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [70] with precondition: [V1=1,V>=0] 
    - Upper bound: 1 
    - Complexity: constant 
* Chain [69] with precondition: [V=V1,V>=1] 
    - Upper bound: V1+1 
    - Complexity: n 

### Maximum cost of start(V,V1,V4): inf 
Asymptotic class: infinity 

Time statistics: 
-------------------------------------
* Partial evaluation computed in 38 ms.
* Invariants computed in 89 ms.
   - Backward Invariants 53 ms.
   - Transitive Invariants 15 ms.
* Refinement performed in 194 ms.
* Termination proved in 18 ms.
* Upper bounds computed in 340 ms.
   - Equation cost structures 184 ms.
   - Phase cost structures 82 ms.
   - Chain cost structures 64 ms.
   - Solving cost expressions 8 ms.
* Total analysis performed in 735 ms.


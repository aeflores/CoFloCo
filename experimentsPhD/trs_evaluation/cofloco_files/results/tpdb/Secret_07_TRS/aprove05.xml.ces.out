
Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. non_recursive  : [a/1]
1. recursive  : [ge/3]
2. non_recursive  : [head/2]
3. non_recursive  : [isempty/2]
4. non_recursive  : [tail/2]
5. recursive  : [plus/3]
6. recursive  : [ifTimes/6,timesIter/5]
7. non_recursive  : [times/3]
8. recursive  : [ifProd/4,prodIter/3]
9. non_recursive  : [prod/2]
10. non_recursive  : [start/5]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into a/1
1. SCC is partially evaluated into ge/3
2. SCC is partially evaluated into head/2
3. SCC is partially evaluated into isempty/2
4. SCC is partially evaluated into tail/2
5. SCC is partially evaluated into plus/3
6. SCC is partially evaluated into timesIter/5
7. SCC is completely evaluated into other SCCs
8. SCC is partially evaluated into prodIter/3
9. SCC is completely evaluated into other SCCs
10. SCC is partially evaluated into start/5

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations a/1 
* CE 36 is refined into CE [37] 
* CE 35 is refined into CE [38] 


#### Refined cost equations a/1 
* CE 37: a(Out) = 1
     [Out=1] 
* CE 38: a(Out) = 1
     [Out=0] 

### Cost equations --> "Loop" of a/1 
* CEs [37] --> Loop 23 
* CEs [38] --> Loop 24 

#### Loops of a/1 
* Loop 23: a(Out) [Out=1] 
* Loop 24: a(Out) [Out=0] 

### Ranking functions of CR a(Out) 

#### Partial ranking functions of CR a(Out) 


### Resulting Chains:a(Out) 
* [24]
* [23]


### Merging Chains  a/1 into  External patterns of execution 
* [[24]] --> 1 
* [[23]] --> 2 


### Specialization of cost equations ge/3 
* CE 34 is refined into CE [39] 
* CE 31 is refined into CE [40] 
* CE 32 is refined into CE [41] 
* CE 33 is refined into CE [42] 


#### Refined cost equations ge/3 
* CE 39: ge(V,V2,Out) = 0
     [V2>=0,V>=0,Out=0] 
* CE 40: ge(V,V2,Out) = 1
     [V>=0,Out=2,V2=0] 
* CE 41: ge(V,V2,Out) = 1
     [V2>=1,Out=1,V=0] 
* CE 42: ge(V,V2,Out) = 1+ ge(W2,X2,Out)
     [X2>=0,W2>=0,X2+1=V2,W2+1=V] 

### Cost equations --> "Loop" of ge/3 
* CEs [42] --> Loop 25 
* CEs [39] --> Loop 26 
* CEs [40] --> Loop 27 
* CEs [41] --> Loop 28 

#### Loops of ge/3 
* Loop 25: ge(V,V2,Out)->  ge(V',V2',Out)
                  [V2'>=0,V'>=0,V2'+1=V2,V'+1=V] 
* Loop 26: ge(V,V2,Out) [V2>=0,V>=0,Out=0] 
* Loop 27: ge(V,V2,Out) [V>=0,Out=2,V2=0] 
* Loop 28: ge(V,V2,Out) [V2>=1,Out=1,V=0] 

### Ranking functions of CR ge(V,V2,Out) 
* RF of phase [25]: [V,V2]

#### Partial ranking functions of CR ge(V,V2,Out) 
* Partial RF of phase [25]:
  - RF of loop [25:1]:
    V
    V2


### Resulting Chains:ge(V,V2,Out) 
* [[25],28]
* [[25],27]
* [[25],26]
* [28]
* [27]
* [26]


### Merging Chains  ge/3 into  External patterns of execution 
* [[28]] --> 1 
* [[27]] --> 2 
* [[26],[26,[25]]] --> 3 
* [[28,[25]]] --> 4 
* [[27,[25]]] --> 5 


### Specialization of cost equations head/2 
* CE 19 is refined into CE [43] 
* CE 18 is refined into CE [44] 


#### Refined cost equations head/2 
* CE 43: head(V,Out) = 1
     [V>=Out+1,Out>=0] 
* CE 44: head(V,Out) = 1
     [Out=1,V=0] 

### Cost equations --> "Loop" of head/2 
* CEs [43] --> Loop 29 
* CEs [44] --> Loop 30 

#### Loops of head/2 
* Loop 29: head(V,Out) [V>=Out+1,Out>=0] 
* Loop 30: head(V,Out) [Out=1,V=0] 

### Ranking functions of CR head(V,Out) 

#### Partial ranking functions of CR head(V,Out) 


### Resulting Chains:head(V,Out) 
* [30]
* [29]


### Merging Chains  head/2 into  External patterns of execution 
* [[30]] --> 1 
* [[29]] --> 2 


### Specialization of cost equations isempty/2 
* CE 30 is refined into CE [45] 
* CE 29 is refined into CE [46] 


#### Refined cost equations isempty/2 
* CE 45: isempty(V,Out) = 1
     [V>=1,Out=1] 
* CE 46: isempty(V,Out) = 1
     [Out=2,V=0] 

### Cost equations --> "Loop" of isempty/2 
* CEs [45] --> Loop 31 
* CEs [46] --> Loop 32 

#### Loops of isempty/2 
* Loop 31: isempty(V,Out) [V>=1,Out=1] 
* Loop 32: isempty(V,Out) [Out=2,V=0] 

### Ranking functions of CR isempty(V,Out) 

#### Partial ranking functions of CR isempty(V,Out) 


### Resulting Chains:isempty(V,Out) 
* [32]
* [31]


### Merging Chains  isempty/2 into  External patterns of execution 
* [[32]] --> 1 
* [[31]] --> 2 


### Specialization of cost equations tail/2 
* CE 17 is refined into CE [47] 
* CE 16 is refined into CE [48] 


#### Refined cost equations tail/2 
* CE 47: tail(V,Out) = 1
     [V>=Out+1,Out>=0] 
* CE 48: tail(V,Out) = 1
     [Out=0,V=0] 

### Cost equations --> "Loop" of tail/2 
* CEs [47] --> Loop 33 
* CEs [48] --> Loop 34 

#### Loops of tail/2 
* Loop 33: tail(V,Out) [V>=Out+1,Out>=0] 
* Loop 34: tail(V,Out) [Out=0,V=0] 

### Ranking functions of CR tail(V,Out) 

#### Partial ranking functions of CR tail(V,Out) 


### Resulting Chains:tail(V,Out) 
* [34]
* [33]


### Merging Chains  tail/2 into  External patterns of execution 
* [[34]] --> 1 
* [[33]] --> 2 


### Specialization of cost equations plus/3 
* CE 28 is refined into CE [49] 
* CE 26 is refined into CE [50] 
* CE 27 is refined into CE [51] 


#### Refined cost equations plus/3 
* CE 49: plus(V,V2,Out) = 0
     [V2>=0,V>=0,Out=0] 
* CE 50: plus(A,B,B) = 1
     [B>=0,A=0] 
* CE 51: plus(V,V2,Out) = 1+ plus(W2,V2,X2)
     [W2>=0,V2>=0,X2+1=Out,W2+1=V] 

### Cost equations --> "Loop" of plus/3 
* CEs [51] --> Loop 35 
* CEs [49] --> Loop 36 
* CEs [50] --> Loop 37 

#### Loops of plus/3 
* Loop 35: plus(V,V2,Out)->  plus(V',V2,Out')
                  [V'>=0,V2>=0,Out=Out'+1,V'+1=V] 
* Loop 36: plus(V,V2,Out) [V2>=0,V>=0,Out=0] 
* Loop 37: plus(A,B,B) [B>=0,A=0] 

### Ranking functions of CR plus(V,V2,Out) 
* RF of phase [35]: [V]

#### Partial ranking functions of CR plus(V,V2,Out) 
* Partial RF of phase [35]:
  - RF of loop [35:1]:
    V


### Resulting Chains:plus(V,V2,Out) 
* [[35],37]
* [[35],36]
* [37]
* [36]


### Merging Chains  plus/3 into  External patterns of execution 
* [[37]] --> 1 
* [[36]] --> 2 
* [[37,[35]]] --> 3 
* [[36,[35]]] --> 4 


### Specialization of cost equations timesIter/5 
* CE 22 is refined into CE [52,53] 
* CE 20 is refined into CE [54,55,56,57,58] 
* CE 21 is refined into CE [59,60,61,62,63,64,65,66] 


#### Refined cost equations timesIter/5 
* CE 52: timesIter(A,B,C,D,C) = 2+ ge(D,E,F):2
     [D>=0,C>=0,B>=0,F=2,E=0,A=0] 
* CE 53: timesIter(A,B,C,D,C) = 2+ ge(D,A,E):5
     [D>=A,A>=1,C>=0,B>=0,E=2] 
* CE 54: timesIter(V,V2,V7,V19,Out) = 1+ ge(W19,V,X19):1
     [V>=1,V7>=0,V2>=0,X19=1,W19=0,Out=0,V19=0] 
* CE 55: timesIter(V,V2,V7,V19,Out) = 1+ ge(V19,W19,X19):2
     [V19>=0,V7>=0,V2>=0,X19=2,W19=0,Out=0,V=0] 
* CE 56: timesIter(V,V2,V7,V19,Out) = 1+ ge(V19,V,W19):3
     [V>=0,V19>=0,V7>=0,V2>=0,W19=0,Out=0] 
* CE 57: timesIter(V,V2,V7,V19,Out) = 1+ ge(V19,V,W19):4
     [V>=V19+1,V19>=1,V7>=0,V2>=0,W19=1,Out=0] 
* CE 58: timesIter(V,V2,V7,V19,Out) = 1+ ge(V19,V,W19):5
     [V19>=V,V>=1,V7>=0,V2>=0,W19=2,Out=0] 
* CE 59: timesIter(V,V2,V7,V19,Out) = 2+ ge(W19,V,X19):1+ plus(Y19,V7,V7):1+ timesIter(V,Z19,V7,A20,Out)
     [V7>=0,V>=1,A20=1,Z19=0,Y19=0,X19=1,W19=0,V19=0,V2=0] 
* CE 60: timesIter(V,V2,V7,V19,Out) = 2+ ge(W19,V,X19):1+ plus(V2,V7,Y19):2+ timesIter(V,V2,Z19,A20,Out)
     [V7>=0,V2>=0,V>=1,A20=1,Z19=0,Y19=0,X19=1,W19=0,V19=0] 
* CE 61: timesIter(V,V2,V7,V19,Out) = 2+ ge(W19,V,X19):1+ plus(V2,Y19,Z19):3+ timesIter(V,V2,Z19,A20,Out)
     [Z19>=V2,V2>=1,V>=1,Z19=V2+Y19,Z19=V2+V7,A20=1,X19=1,W19=0,V19=0] 
* CE 62: timesIter(V,V2,V7,V19,Out) = 2+ ge(W19,V,X19):1+ plus(V2,V7,Y19):4+ timesIter(V,V2,Y19,Z19,Out)
     [V2>=Y19,Y19>=1,V7>=0,V>=1,Z19=1,X19=1,W19=0,V19=0] 
* CE 63: timesIter(V,V2,V7,V19,Out) = 2+ ge(V19,V,W19):4+ plus(X19,V7,V7):1+ timesIter(V,Y19,V7,Z19,Out)
     [V>=V19+1,V7>=0,V19>=1,V19+1=Z19,Y19=0,X19=0,W19=1,V2=0] 
* CE 64: timesIter(V,V2,V7,V19,Out) = 2+ ge(V19,V,W19):4+ plus(V2,V7,X19):2+ timesIter(V,V2,Y19,Z19,Out)
     [V>=V19+1,V7>=0,V2>=0,V19>=1,V19+1=Z19,Y19=0,X19=0,W19=1] 
* CE 65: timesIter(V,V2,V7,V19,Out) = 2+ ge(V19,V,W19):4+ plus(V2,X19,Y19):3+ timesIter(V,V2,Y19,Z19,Out)
     [Y19>=V2,V>=V19+1,V2>=1,V19>=1,Y19=V2+X19,Y19=V2+V7,V19+1=Z19,W19=1] 
* CE 66: timesIter(V,V2,V7,V19,Out) = 2+ ge(V19,V,W19):4+ plus(V2,V7,X19):4+ timesIter(V,V2,X19,Y19,Out)
     [V2>=X19,V>=V19+1,X19>=1,V7>=0,V19>=1,V19+1=Y19,W19=1] 

### Cost equations --> "Loop" of timesIter/5 
* CEs [66] --> Loop 38 
* CEs [65] --> Loop 39 
* CEs [64] --> Loop 40 
* CEs [62] --> Loop 41 
* CEs [61] --> Loop 42 
* CEs [60] --> Loop 43 
* CEs [63] --> Loop 44 
* CEs [59] --> Loop 45 
* CEs [53] --> Loop 46 
* CEs [54] --> Loop 47 
* CEs [52] --> Loop 48 
* CEs [55,56,57,58] --> Loop 49 

#### Loops of timesIter/5 
* Loop 38: timesIter(V,V2,V7,V19,Out)->  timesIter(V,V2,V7',V19',Out)
                  [V2>=V7',V>=V19+1,V7'>=1,V19>=1,V7>=0,V19+1=V19'] 
* Loop 39: timesIter(V,V2,V7,V19,Out)->  timesIter(V,V2,V7',V19',Out)
                  [V>=V19+1,V19>=1,V7>=0,V2>=1,V2+V7=V7',V19+1=V19'] 
* Loop 40: timesIter(V,V2,V7,V19,Out)->  timesIter(V,V2,V7',V19',Out)
                  [V>=V19+1,V19>=1,V7>=0,V2>=0,V19+1=V19',V7'=0] 
* Loop 41: timesIter(V,V2,V7,V19,Out)->  timesIter(V,V2,V7',V19',Out)
                  [V2>=V7',V7'>=1,V7>=0,V>=1,V19'=1,V19=0] 
* Loop 42: timesIter(V,V2,V7,V19,Out)->  timesIter(V,V2,V7',V19',Out)
                  [V7>=0,V2>=1,V>=1,V2+V7=V7',V19'=1,V19=0] 
* Loop 43: timesIter(V,V2,V7,V19,Out)->  timesIter(V,V2,V7',V19',Out)
                  [V7>=0,V2>=0,V>=1,V19'=1,V7'=0,V19=0] 
* Loop 44: timesIter(V,V2,V7,V19,Out)->  timesIter(V,V2',V7,V19',Out)
                  [V>=V19+1,V19>=1,V7>=0,V19+1=V19',V2'=0,V2=0] 
* Loop 45: timesIter(V,V2,V7,V19,Out)->  timesIter(V,V2',V7,V19',Out)
                  [V7>=0,V>=1,V19'=1,V2'=0,V19=0,V2=0] 
* Loop 46: timesIter(A,B,C,D,C) [D>=A,C>=0,B>=0,A>=1] 
* Loop 47: timesIter(V,V2,V7,V19,Out) [V7>=0,V2>=0,V>=1,Out=0,V19=0] 
* Loop 48: timesIter(A,B,C,D,C) [D>=0,C>=0,B>=0,A=0] 
* Loop 49: timesIter(V,V2,V7,V19,Out) [V19>=0,V7>=0,V2>=0,V>=0,Out=0] 

### Ranking functions of CR timesIter(V,V2,V7,V19,Out) 
* RF of phase [38,39,40,44]: [V-V19]

#### Partial ranking functions of CR timesIter(V,V2,V7,V19,Out) 
* Partial RF of phase [38,39,40,44]:
  - RF of loop [38:1,39:1,40:1,44:1]:
    V-V19


### Resulting Chains:timesIter(V,V2,V7,V19,Out) 
* [[38,39,40,44],49]
* [[38,39,40,44],46]
* [49]
* [48]
* [47]
* [46]
* [45,[38,39,40,44],49]
* [45,[38,39,40,44],46]
* [45,49]
* [45,46]
* [43,[38,39,40,44],49]
* [43,[38,39,40,44],46]
* [43,49]
* [43,46]
* [42,[38,39,40,44],49]
* [42,[38,39,40,44],46]
* [42,49]
* [42,46]
* [41,[38,39,40,44],49]
* [41,[38,39,40,44],46]
* [41,49]
* [41,46]


### Merging Chains  timesIter/5 into  External patterns of execution 
* [[48]] --> 1 
* [[46,45]] --> 2 
* [[49,41],[49,[38,39,40,44],41],[49,42],[49,[38,39,40,44],42],[46,43],[49,43],[49,[38,39,40,44],43],[47],[49],[49,[38,39,40,44]]] --> 3 
* [[46,42]] --> 4 
* [[46,41]] --> 5 
* [[49,45],[49,[38,39,40,44],45]] --> 6 
* [[46,[38,39,40,44],41],[46,[38,39,40,44],42],[46,[38,39,40,44],43],[46,[38,39,40,44],45]] --> 7 
* [[46]] --> 8 
* [[46,[38,39,40,44]]] --> 9 


### Specialization of cost equations prodIter/3 
* CE 25 is refined into CE [67] 
* CE 23 is refined into CE [68,69] 
* CE 24 is refined into CE [70,71,72,73,74,75,76] 


#### Refined cost equations prodIter/3 
* CE 67: prodIter(A,B,B) = 2+ isempty(C,D):1
     [B>=0,D=2,C=0,A=0] 
* CE 68: prodIter(V,V2,Out) = 1+ isempty(W2,X2):1
     [V2>=0,X2=2,W2=0,Out=0,V=0] 
* CE 69: prodIter(V,V2,Out) = 1+ isempty(V,W2):2
     [V>=1,V2>=0,W2=1,Out=0] 
* CE 70: prodIter(V,V2,Out) = 3+ isempty(V,W2):2+ tail(V,X2):2+ head(V,Y2):2+ timesIter(Z2,Y2,A3,B3,C3):1+ prodIter(X2,D3,Out)
     [V>=Y2+1,V>=X2+1,Y2>=0,X2>=0,D3=0,C3=0,B3=0,A3=0,Z2=0,W2=1,V2=0] 
* CE 71: prodIter(V,V2,Out) = 3+ isempty(V,W2):2+ tail(V,X2):2+ head(V,Y2):2+ timesIter(Z2,A3,B3,C3,D3):2+ prodIter(X2,E3,Out)
     [V>=X2+1,X2>=0,E3=0,D3=0,C3=0,B3=0,A3=0,Z2=1,Y2=0,W2=1,V2=1] 
* CE 72: prodIter(V,V2,Out) = 3+ isempty(V,W2):2+ tail(V,X2):2+ head(V,Y2):2+ timesIter(V2,Y2,Z2,A3,B3):3+ prodIter(X2,C3,Out)
     [V>=Y2+1,V>=X2+1,Y2>=0,V2>=0,X2>=0,C3=0,B3=0,A3=0,Z2=0,W2=1] 
* CE 73: prodIter(V,V2,Out) = 3+ isempty(V,W2):2+ tail(V,X2):2+ head(V,Y2):2+ timesIter(Z2,Y2,A3,B3,Y2):4+ prodIter(X2,Y2,Out)
     [V>=Y2+1,V>=X2+1,Y2>=1,X2>=0,B3=0,A3=0,Z2=1,W2=1,V2=1] 
* CE 74: prodIter(V,V2,Out) = 3+ isempty(V,W2):2+ tail(V,X2):2+ head(V,Y2):2+ timesIter(Z2,Y2,A3,B3,C3):5+ prodIter(X2,C3,Out)
     [Y2>=C3,V>=Y2+1,V>=X2+1,C3>=1,X2>=0,B3=0,A3=0,Z2=1,W2=1,V2=1] 
* CE 75: prodIter(V,V2,Out) = 3+ isempty(V,W2):2+ tail(V,X2):2+ head(V,Y2):2+ timesIter(V2,Z2,A3,B3,C3):6+ prodIter(X2,D3,Out)
     [V>=X2+1,V2>=1,X2>=0,D3=0,C3=0,B3=0,A3=0,Z2=0,Y2=0,W2=1] 
* CE 76: prodIter(V,V2,Out) = 3+ isempty(V,W2):2+ tail(V,X2):2+ head(V,Y2):2+ timesIter(V2,Y2,Z2,A3,B3):7+ prodIter(X2,B3,Out)
     [V>=Y2+1,V>=X2+1,B3>=0,Y2>=0,V2>=2,X2>=0,A3=0,Z2=0,W2=1] 

### Cost equations --> "Loop" of prodIter/3 
* CEs [76] --> Loop 50 
* CEs [73,74] --> Loop 51 
* CEs [71] --> Loop 52 
* CEs [70,72,75] --> Loop 53 
* CEs [69] --> Loop 54 
* CEs [67] --> Loop 55 
* CEs [68] --> Loop 56 

#### Loops of prodIter/3 
* Loop 50: prodIter(V,V2,Out)->  prodIter(V',V2',Out)
                  [V>=V'+1,V2'>=0,V'>=0,V2>=2] 
* Loop 51: prodIter(V,V2,Out)->  prodIter(V',V2',Out)
                  [V>=V2'+1,V>=V'+1,V2'>=1,V'>=0,V2=1] 
* Loop 52: prodIter(V,V2,Out)->  prodIter(V',V2',Out)
                  [V>=V'+1,V'>=0,V2'=0,V2=1] 
* Loop 53: prodIter(V,V2,Out)->  prodIter(V',V2',Out)
                  [V>=V'+1,V'>=0,V2>=0,V2'=0] 
* Loop 54: prodIter(V,V2,Out) [V2>=0,V>=1,Out=0] 
* Loop 55: prodIter(A,B,B) [B>=0,A=0] 
* Loop 56: prodIter(V,V2,Out) [V2>=0,Out=0,V=0] 

### Ranking functions of CR prodIter(V,V2,Out) 
* RF of phase [50,51]: [V]
* RF of phase [53]: [V]

#### Partial ranking functions of CR prodIter(V,V2,Out) 
* Partial RF of phase [50,51]:
  - RF of loop [50:1]:
    V
  - RF of loop [51:1]:
    V-1
* Partial RF of phase [53]:
  - RF of loop [53:1]:
    V


### Resulting Chains:prodIter(V,V2,Out) 
* [[53],56]
* [[53],55]
* [[53],54]
* [[50,51],[53],56]
* [[50,51],[53],55]
* [[50,51],[53],54]
* [[50,51],56]
* [[50,51],55]
* [[50,51],54]
* [[50,51],52,[53],56]
* [[50,51],52,[53],55]
* [[50,51],52,[53],54]
* [[50,51],52,56]
* [[50,51],52,55]
* [[50,51],52,54]
* [56]
* [55]
* [54]
* [52,[53],56]
* [52,[53],55]
* [52,[53],54]
* [52,56]
* [52,55]
* [52,54]


### Merging Chains  prodIter/3 into  External patterns of execution 
* [[56]] --> 1 
* [[55]] --> 2 
* [[54,52],[55,52],[56,52],[54,[53],52],[55,[53],52],[56,[53],52],[54],[54,52,[50,51]],[55,52,[50,51]],[56,52,[50,51]],[54,[53],52,[50,51]],[55,[53],52,[50,51]],[56,[53],52,[50,51]],[54,[50,51]],[56,[50,51]],[54,[53],[50,51]],[55,[53],[50,51]],[56,[53],[50,51]],[54,[53]],[55,[53]],[56,[53]]] --> 3 
* [[55,[50,51]]] --> 4 


### Specialization of cost equations start/5 
* CE 2 is refined into CE [77] 
* CE 3 is refined into CE [78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111] 
* CE 4 is refined into CE [112] 
* CE 5 is refined into CE [113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128] 
* CE 6 is refined into CE [129,130,131,132] 
* CE 7 is refined into CE [133,134,135,136] 
* CE 8 is refined into CE [137,138,139,140] 
* CE 9 is refined into CE [141,142,143,144,145,146,147] 
* CE 10 is refined into CE [148,149,150,151,152,153,154,155,156] 
* CE 11 is refined into CE [157,158] 
* CE 12 is refined into CE [159,160] 
* CE 13 is refined into CE [161,162] 
* CE 14 is refined into CE [163,164,165,166,167] 
* CE 15 is refined into CE [168,169] 


#### Refined cost equations start/5 
* CE 77: start(V,V2,V7,V19,V24) = 0
     [V7>=0,V2>=0,V>=0] 
* CE 78: start(V,V2,V7,V19,V24) = 2+ tail(W24,X24):1+ head(Y24,Z24):1+ timesIter(A25,B25,C25,D25,E25):1+ prodIter(F25,G25,H25):1
     [H25=0,G25=0,F25=0,E25=0,D25=0,C25=0,B25=1,A25=0,Z24=1,Y24=0,X24=0,W24=0,V7=0,V2=0,V=1] 
* CE 79: start(V,V2,V7,V19,V24) = 2+ tail(W24,X24):1+ head(Y24,Z24):1+ timesIter(A25,B25,C25,D25,E25):1+ prodIter(F25,G25,H25):2
     [H25=0,G25=0,F25=0,E25=0,D25=0,C25=0,B25=1,A25=0,Z24=1,Y24=0,X24=0,W24=0,V7=0,V2=0,V=1] 
* CE 80: start(V,V2,V7,V19,V24) = 2+ tail(W24,X24):1+ head(Y24,Z24):1+ timesIter(V7,A25,B25,C25,D25):3+ prodIter(E25,F25,G25):1
     [V7>=0,G25=0,F25=0,E25=0,D25=0,C25=0,B25=0,A25=1,Z24=1,Y24=0,X24=0,W24=0,V2=0,V=1] 
* CE 81: start(V,V2,V7,V19,V24) = 2+ tail(W24,X24):1+ head(Y24,Z24):1+ timesIter(V7,A25,B25,C25,D25):3+ prodIter(E25,F25,G25):2
     [V7>=0,G25=0,F25=0,E25=0,D25=0,C25=0,B25=0,A25=1,Z24=1,Y24=0,X24=0,W24=0,V2=0,V=1] 
* CE 82: start(V,V2,V7,V19,V24) = 2+ tail(W24,X24):1+ head(Y24,Z24):1+ timesIter(A25,B25,C25,D25,E25):4+ prodIter(F25,G25,H25):1
     [H25=0,G25=1,F25=0,E25=1,D25=0,C25=0,B25=1,A25=1,Z24=1,Y24=0,X24=0,W24=0,V7=1,V2=0,V=1] 
* CE 83: start(V,V2,V7,V19,V24) = 2+ tail(W24,X24):1+ head(Y24,Z24):1+ timesIter(A25,B25,C25,D25,E25):4+ prodIter(F25,G25,H25):2
     [H25=1,G25=1,F25=0,E25=1,D25=0,C25=0,B25=1,A25=1,Z24=1,Y24=0,X24=0,W24=0,V7=1,V2=0,V=1] 
* CE 84: start(V,V2,V7,V19,V24) = 2+ tail(W24,X24):1+ head(Y24,Z24):1+ timesIter(A25,B25,C25,D25,E25):5+ prodIter(F25,G25,H25):1
     [H25=0,G25=1,F25=0,E25=1,D25=0,C25=0,B25=1,A25=1,Z24=1,Y24=0,X24=0,W24=0,V7=1,V2=0,V=1] 
* CE 85: start(V,V2,V7,V19,V24) = 2+ tail(W24,X24):1+ head(Y24,Z24):1+ timesIter(A25,B25,C25,D25,E25):5+ prodIter(F25,G25,H25):2
     [H25=1,G25=1,F25=0,E25=1,D25=0,C25=0,B25=1,A25=1,Z24=1,Y24=0,X24=0,W24=0,V7=1,V2=0,V=1] 
* CE 86: start(V,V2,V7,V19,V24) = 2+ tail(W24,X24):1+ head(Y24,Z24):1+ timesIter(V7,A25,B25,C25,D25):7+ prodIter(E25,D25,F25):1
     [D25>=0,V7>=2,F25=0,E25=0,C25=0,B25=0,A25=1,Z24=1,Y24=0,X24=0,W24=0,V2=0,V=1] 
* CE 87: start(V,V2,V7,V19,V24) = 2+ tail(W24,X24):1+ head(Y24,Z24):1+ timesIter(V7,A25,B25,C25,D25):7+ prodIter(E25,D25,D25):2
     [D25>=0,V7>=2,E25=0,C25=0,B25=0,A25=1,Z24=1,Y24=0,X24=0,W24=0,V2=0,V=1] 
* CE 88: start(V,V2,V7,V19,V24) = 2+ tail(V2,W24):2+ head(V2,X24):2+ timesIter(Y24,X24,Z24,A25,B25):1+ prodIter(C25,D25,E25):1
     [V2>=X24+1,X24>=0,E25=0,D25=0,C25=0,B25=0,A25=0,Z24=0,Y24=0,W24=0,V7=0,V=1] 
* CE 89: start(V,V2,V7,V19,V24) = 2+ tail(V2,W24):2+ head(V2,X24):2+ timesIter(Y24,X24,Z24,A25,B25):1+ prodIter(C25,D25,E25):2
     [V2>=X24+1,X24>=0,E25=0,D25=0,C25=0,B25=0,A25=0,Z24=0,Y24=0,W24=0,V7=0,V=1] 
* CE 90: start(V,V2,V7,V19,V24) = 2+ tail(V2,W24):2+ head(V2,X24):2+ timesIter(Y24,X24,Z24,A25,B25):1+ prodIter(W24,C25,D25):3
     [V2>=W24+1,V2>=X24+1,W24>=1,X24>=0,D25=0,C25=0,B25=0,A25=0,Z24=0,Y24=0,V7=0,V=1] 
* CE 91: start(V,V2,V7,V19,V24) = 2+ tail(V2,W24):2+ head(V2,X24):2+ timesIter(Y24,Z24,A25,B25,C25):2+ prodIter(D25,E25,F25):1
     [V2>=1,F25=0,E25=0,D25=0,C25=0,B25=0,A25=0,Z24=0,Y24=1,X24=0,W24=0,V7=1,V=1] 
* CE 92: start(V,V2,V7,V19,V24) = 2+ tail(V2,W24):2+ head(V2,X24):2+ timesIter(Y24,Z24,A25,B25,C25):2+ prodIter(D25,E25,F25):2
     [V2>=1,F25=0,E25=0,D25=0,C25=0,B25=0,A25=0,Z24=0,Y24=1,X24=0,W24=0,V7=1,V=1] 
* CE 93: start(V,V2,V7,V19,V24) = 2+ tail(V2,W24):2+ head(V2,X24):2+ timesIter(Y24,Z24,A25,B25,C25):2+ prodIter(W24,D25,E25):3
     [V2>=W24+1,W24>=1,E25=0,D25=0,C25=0,B25=0,A25=0,Z24=0,Y24=1,X24=0,V7=1,V=1] 
* CE 94: start(V,V2,V7,V19,V24) = 2+ tail(V2,W24):2+ head(V2,X24):2+ timesIter(V7,X24,Y24,Z24,A25):3+ prodIter(B25,C25,D25):1
     [V2>=X24+1,X24>=0,V7>=0,D25=0,C25=0,B25=0,A25=0,Z24=0,Y24=0,W24=0,V=1] 
* CE 95: start(V,V2,V7,V19,V24) = 2+ tail(V2,W24):2+ head(V2,X24):2+ timesIter(V7,X24,Y24,Z24,A25):3+ prodIter(B25,C25,D25):2
     [V2>=X24+1,X24>=0,V7>=0,D25=0,C25=0,B25=0,A25=0,Z24=0,Y24=0,W24=0,V=1] 
* CE 96: start(V,V2,V7,V19,V24) = 2+ tail(V2,W24):2+ head(V2,X24):2+ timesIter(V7,X24,Y24,Z24,A25):3+ prodIter(W24,B25,C25):3
     [V2>=W24+1,V2>=X24+1,W24>=1,X24>=0,V7>=0,C25=0,B25=0,A25=0,Z24=0,Y24=0,V=1] 
* CE 97: start(V,V2,V7,V19,V24) = 2+ tail(V2,W24):2+ head(V2,X24):2+ timesIter(Y24,X24,Z24,A25,X24):4+ prodIter(B25,X24,C25):1
     [V2>=X24+1,X24>=1,C25=0,B25=0,A25=0,Z24=0,Y24=1,W24=0,V7=1,V=1] 
* CE 98: start(V,V2,V7,V19,V24) = 2+ tail(V2,W24):2+ head(V2,X24):2+ timesIter(Y24,X24,Z24,A25,X24):4+ prodIter(B25,X24,X24):2
     [V2>=X24+1,X24>=1,B25=0,A25=0,Z24=0,Y24=1,W24=0,V7=1,V=1] 
* CE 99: start(V,V2,V7,V19,V24) = 2+ tail(V2,W24):2+ head(V2,X24):2+ timesIter(Y24,X24,Z24,A25,X24):4+ prodIter(W24,X24,B25):3
     [V2>=X24+1,V2>=W24+1,X24>=1,W24>=1,B25=0,A25=0,Z24=0,Y24=1,V7=1,V=1] 
* CE 100: start(V,V2,V7,V19,V24) = 2+ tail(V2,W24):2+ head(V2,X24):2+ timesIter(Y24,X24,Z24,A25,X24):4+ prodIter(W24,X24,B25):4
     [W24+X24>=3,V2>=X24+1,V2>=W24+1,B25>=0,X24>=1,W24>=1,A25=0,Z24=0,Y24=1,V7=1,V=1] 
* CE 101: start(V,V2,V7,V19,V24) = 2+ tail(V2,W24):2+ head(V2,X24):2+ timesIter(Y24,X24,Z24,A25,B25):5+ prodIter(C25,B25,D25):1
     [X24>=B25,V2>=X24+1,B25>=1,D25=0,C25=0,A25=0,Z24=0,Y24=1,W24=0,V7=1,V=1] 
* CE 102: start(V,V2,V7,V19,V24) = 2+ tail(V2,W24):2+ head(V2,X24):2+ timesIter(Y24,X24,Z24,A25,B25):5+ prodIter(C25,B25,B25):2
     [X24>=B25,V2>=X24+1,B25>=1,C25=0,A25=0,Z24=0,Y24=1,W24=0,V7=1,V=1] 
* CE 103: start(V,V2,V7,V19,V24) = 2+ tail(V2,W24):2+ head(V2,X24):2+ timesIter(Y24,X24,Z24,A25,B25):5+ prodIter(W24,B25,C25):3
     [X24>=B25,V2>=W24+1,V2>=X24+1,B25>=1,W24>=1,C25=0,A25=0,Z24=0,Y24=1,V7=1,V=1] 
* CE 104: start(V,V2,V7,V19,V24) = 2+ tail(V2,W24):2+ head(V2,X24):2+ timesIter(Y24,X24,Z24,A25,B25):5+ prodIter(W24,B25,C25):4
     [W24+B25>=3,X24>=B25,V2>=W24+1,V2>=X24+1,C25>=0,B25>=1,W24>=1,A25=0,Z24=0,Y24=1,V7=1,V=1] 
* CE 105: start(V,V2,V7,V19,V24) = 2+ tail(V2,W24):2+ head(V2,X24):2+ timesIter(V7,Y24,Z24,A25,B25):6+ prodIter(C25,D25,E25):1
     [V7>=1,V2>=1,E25=0,D25=0,C25=0,B25=0,A25=0,Z24=0,Y24=0,X24=0,W24=0,V=1] 
* CE 106: start(V,V2,V7,V19,V24) = 2+ tail(V2,W24):2+ head(V2,X24):2+ timesIter(V7,Y24,Z24,A25,B25):6+ prodIter(C25,D25,E25):2
     [V7>=1,V2>=1,E25=0,D25=0,C25=0,B25=0,A25=0,Z24=0,Y24=0,X24=0,W24=0,V=1] 
* CE 107: start(V,V2,V7,V19,V24) = 2+ tail(V2,W24):2+ head(V2,X24):2+ timesIter(V7,Y24,Z24,A25,B25):6+ prodIter(W24,C25,D25):3
     [V2>=W24+1,W24>=1,V7>=1,D25=0,C25=0,B25=0,A25=0,Z24=0,Y24=0,X24=0,V=1] 
* CE 108: start(V,V2,V7,V19,V24) = 2+ tail(V2,W24):2+ head(V2,X24):2+ timesIter(V7,X24,Y24,Z24,A25):7+ prodIter(B25,A25,C25):1
     [V2>=X24+1,A25>=0,X24>=0,V7>=2,C25=0,B25=0,Z24=0,Y24=0,W24=0,V=1] 
* CE 109: start(V,V2,V7,V19,V24) = 2+ tail(V2,W24):2+ head(V2,X24):2+ timesIter(V7,X24,Y24,Z24,A25):7+ prodIter(B25,A25,A25):2
     [V2>=X24+1,A25>=0,X24>=0,V7>=2,B25=0,Z24=0,Y24=0,W24=0,V=1] 
* CE 110: start(V,V2,V7,V19,V24) = 2+ tail(V2,W24):2+ head(V2,X24):2+ timesIter(V7,X24,Y24,Z24,A25):7+ prodIter(W24,A25,B25):3
     [V2>=W24+1,V2>=X24+1,A25>=0,W24>=1,X24>=0,V7>=2,B25=0,Z24=0,Y24=0,V=1] 
* CE 111: start(V,V2,V7,V19,V24) = 2+ tail(V2,W24):2+ head(V2,X24):2+ timesIter(V7,X24,Y24,Z24,A25):7+ prodIter(W24,A25,B25):4
     [W24+A25>=3,V2>=W24+1,V2>=X24+1,B25>=0,A25>=1,W24>=1,X24>=0,V7>=2,Z24=0,Y24=0,V=1] 
* CE 112: start(V,V2,V7,V19,V24) = 1
     [V7>=0,V2>=0,V=2] 
* CE 113: start(V,V2,V7,V19,V24) = 1+ plus(W24,V19,V19):1+ timesIter(X24,Y24,V19,Z24,V19):1
     [V19>=0,Z24>=1,Z24=V24+1,Y24=0,X24=0,W24=0,V7=0,V2=0,V=1] 
* CE 114: start(V,V2,V7,V19,V24) = 1+ plus(W24,V19,V19):1+ timesIter(V2,X24,V19,Y24,Z24):3
     [Y24>=1,V19>=0,V2>=0,Y24=V24+1,Z24=0,X24=0,W24=0,V7=0,V=1] 
* CE 115: start(V,V2,V7,V19,V24) = 1+ plus(W24,V19,V19):1+ timesIter(V2,X24,V19,Y24,V19):8
     [Y24>=V2,V19>=0,V2>=1,Y24=V24+1,X24=0,W24=0,V7=0,V=1] 
* CE 116: start(V,V2,V7,V19,V24) = 1+ plus(W24,V19,V19):1+ timesIter(V2,X24,V19,Y24,Z24):9
     [V2>=Y24+1,Z24>=0,Y24>=1,V19>=0,Y24=V24+1,X24=0,W24=0,V7=0,V=1] 
* CE 117: start(V,V2,V7,V19,V24) = 1+ plus(V7,V19,W24):2+ timesIter(X24,V7,Y24,Z24,A25):1
     [Z24>=1,V7>=0,V19>=0,Z24=V24+1,A25=0,Y24=0,X24=0,W24=0,V2=0,V=1] 
* CE 118: start(V,V2,V7,V19,V24) = 1+ plus(V7,V19,W24):2+ timesIter(V2,V7,X24,Y24,Z24):3
     [Y24>=1,V7>=0,V2>=0,V19>=0,Y24=V24+1,Z24=0,X24=0,W24=0,V=1] 
* CE 119: start(V,V2,V7,V19,V24) = 1+ plus(V7,V19,W24):2+ timesIter(V2,V7,X24,Y24,Z24):8
     [Y24>=V2,V7>=0,V2>=1,V19>=0,Y24=V24+1,Z24=0,X24=0,W24=0,V=1] 
* CE 120: start(V,V2,V7,V19,V24) = 1+ plus(V7,V19,W24):2+ timesIter(V2,V7,X24,Y24,Z24):9
     [V2>=Y24+1,Z24>=0,Y24>=1,V7>=0,V19>=0,Y24=V24+1,X24=0,W24=0,V=1] 
* CE 121: start(V,V2,V7,V19,V24) = 1+ plus(V7,W24,X24):3+ timesIter(Y24,V7,X24,Z24,X24):1
     [X24>=V7,Z24>=1,V7>=1,X24=V7+W24,X24=V7+V19,Z24=V24+1,Y24=0,V2=0,V=1] 
* CE 122: start(V,V2,V7,V19,V24) = 1+ plus(V7,W24,X24):3+ timesIter(V2,V7,X24,Y24,Z24):3
     [X24>=V7,Y24>=1,V7>=1,V2>=0,V7+W24=X24,V7+V19=X24,Y24=V24+1,Z24=0,V=1] 
* CE 123: start(V,V2,V7,V19,V24) = 1+ plus(V7,W24,X24):3+ timesIter(V2,V7,X24,Y24,X24):8
     [X24>=V7,Y24>=V2,V7>=1,V2>=1,X24=V7+W24,X24=V7+V19,Y24=V24+1,V=1] 
* CE 124: start(V,V2,V7,V19,V24) = 1+ plus(V7,W24,X24):3+ timesIter(V2,V7,X24,Y24,Z24):9
     [V2>=Y24+1,X24>=V7,Z24>=0,Y24>=1,V7>=1,V7+W24=X24,V7+V19=X24,Y24=V24+1,V=1] 
* CE 125: start(V,V2,V7,V19,V24) = 1+ plus(V7,V19,W24):4+ timesIter(X24,V7,W24,Y24,W24):1
     [V7>=W24,W24>=1,Y24>=1,V19>=0,Y24=V24+1,X24=0,V2=0,V=1] 
* CE 126: start(V,V2,V7,V19,V24) = 1+ plus(V7,V19,W24):4+ timesIter(V2,V7,W24,X24,Y24):3
     [V7>=W24,X24>=1,W24>=1,V2>=0,V19>=0,X24=V24+1,Y24=0,V=1] 
* CE 127: start(V,V2,V7,V19,V24) = 1+ plus(V7,V19,W24):4+ timesIter(V2,V7,W24,X24,W24):8
     [V7>=W24,X24>=V2,W24>=1,V2>=1,V19>=0,X24=V24+1,V=1] 
* CE 128: start(V,V2,V7,V19,V24) = 1+ plus(V7,V19,W24):4+ timesIter(V2,V7,W24,X24,Y24):9
     [V2>=X24+1,V7>=W24,Y24>=0,X24>=1,W24>=1,V19>=0,X24=V24+1,V=1] 
* CE 129: start(V,V2,V7,V19,V24) = 1+ prodIter(W24,X24,Y24):1
     [Y24=0,X24=1,W24=0,V=0] 
* CE 130: start(V,V2,V7,V19,V24) = 1+ prodIter(W24,X24,Y24):2
     [Y24=1,X24=1,W24=0,V=0] 
* CE 131: start(V,V2,V7,V19,V24) = 1+ prodIter(V,W24,X24):3
     [V>=1,X24=0,W24=1] 
* CE 132: start(V,V2,V7,V19,V24) = 1+ prodIter(V,W24,X24):4
     [X24>=0,V>=2,W24=1] 
* CE 133: start(V,V2,V7,V19,V24) = 0+ prodIter(W24,V2,X24):1
     [V2>=0,X24=0,W24=0,V=0] 
* CE 134: start(V,V2,V7,V19,V24) = 0+ prodIter(W24,V2,V2):2
     [V2>=0,W24=0,V=0] 
* CE 135: start(V,V2,V7,V19,V24) = 0+ prodIter(V,V2,W24):3
     [V2>=0,V>=1,W24=0] 
* CE 136: start(V,V2,V7,V19,V24) = 0+ prodIter(V,V2,W24):4
     [V+V2>=3,W24>=0,V2>=1,V>=1] 
* CE 137: start(V,V2,V7,V19,V24) = 0+ plus(W24,V2,V2):1
     [V2>=0,W24=0,V=0] 
* CE 138: start(V,V2,V7,V19,V24) = 0+ plus(V,V2,W24):2
     [V2>=0,V>=0,W24=0] 
* CE 139: start(V,V2,V7,V19,V24) = 0+ plus(V,W24,X24):3
     [X24>=V,V>=1,X24=V+W24,X24=V+V2] 
* CE 140: start(V,V2,V7,V19,V24) = 0+ plus(V,V2,W24):4
     [V>=W24,W24>=1,V2>=0] 
* CE 141: start(V,V2,V7,V19,V24) = 1+ timesIter(W24,V2,X24,Y24,Z24):1
     [V2>=0,Z24=0,Y24=0,X24=0,W24=0,V=0] 
* CE 142: start(V,V2,V7,V19,V24) = 1+ timesIter(W24,X24,Y24,Z24,A25):2
     [A25=0,Z24=0,Y24=0,X24=0,W24=1,V2=0,V=1] 
* CE 143: start(V,V2,V7,V19,V24) = 1+ timesIter(V,V2,W24,X24,Y24):3
     [V2>=0,V>=0,Y24=0,X24=0,W24=0] 
* CE 144: start(V,V2,V7,V19,V24) = 1+ timesIter(W24,V2,X24,Y24,V2):4
     [V2>=1,Y24=0,X24=0,W24=1,V=1] 
* CE 145: start(V,V2,V7,V19,V24) = 1+ timesIter(W24,V2,X24,Y24,Z24):5
     [V2>=Z24,Z24>=1,Y24=0,X24=0,W24=1,V=1] 
* CE 146: start(V,V2,V7,V19,V24) = 1+ timesIter(V,W24,X24,Y24,Z24):6
     [V>=1,Z24=0,Y24=0,X24=0,W24=0,V2=0] 
* CE 147: start(V,V2,V7,V19,V24) = 1+ timesIter(V,V2,W24,X24,Y24):7
     [Y24>=0,V2>=0,V>=2,X24=0,W24=0] 
* CE 148: start(V,V2,V7,V19,V24) = 0+ timesIter(W24,V2,V7,V19,V7):1
     [V7>=0,V19>=0,V2>=0,W24=0,V=0] 
* CE 149: start(V,V2,V7,V19,V24) = 0+ timesIter(W24,X24,V7,Y24,V7):2
     [V7>=0,Y24=0,X24=0,W24=1,V19=0,V2=0,V=1] 
* CE 150: start(V,V2,V7,V19,V24) = 0+ timesIter(V,V2,V7,V19,W24):3
     [V19>=0,V7>=0,V2>=0,V>=0,W24=0] 
* CE 151: start(V,V2,V7,V19,V24) = 0+ timesIter(W24,V2,X24,Y24,Z24):4
     [Z24>=V2,V2>=1,Z24=V2+X24,Z24=V2+V7,Y24=0,W24=1,V19=0,V=1] 
* CE 152: start(V,V2,V7,V19,V24) = 0+ timesIter(W24,V2,V7,X24,Y24):5
     [V2>=Y24,Y24>=1,V7>=0,X24=0,W24=1,V19=0,V=1] 
* CE 153: start(V,V2,V7,V19,V24) = 0+ timesIter(V,W24,V7,X24,Y24):6
     [V7>=0,V>=1,Y24=0,X24=0,W24=0,V19=0,V2=0] 
* CE 154: start(V,V2,V7,V19,V24) = 0+ timesIter(V,V2,V7,W24,X24):7
     [X24>=0,V7>=0,V2>=0,V>=2,W24=0,V19=0] 
* CE 155: start(V,V2,V7,V19,V24) = 0+ timesIter(V,V2,V7,V19,V7):8
     [V19>=V,V7>=0,V2>=0,V>=1] 
* CE 156: start(V,V2,V7,V19,V24) = 0+ timesIter(V,V2,V7,V19,W24):9
     [V>=V19+1,W24>=0,V19>=1,V7>=0,V2>=0] 
* CE 157: start(V,V2,V7,V19,V24) = 0+ isempty(W24,X24):1
     [X24=2,W24=0,V=0] 
* CE 158: start(V,V2,V7,V19,V24) = 0+ isempty(V,W24):2
     [V>=1,W24=1] 
* CE 159: start(V,V2,V7,V19,V24) = 0+ head(W24,X24):1
     [X24=1,W24=0,V=0] 
* CE 160: start(V,V2,V7,V19,V24) = 0+ head(V,W24):2
     [V>=W24+1,W24>=0] 
* CE 161: start(V,V2,V7,V19,V24) = 0+ tail(W24,X24):1
     [X24=0,W24=0,V=0] 
* CE 162: start(V,V2,V7,V19,V24) = 0+ tail(V,W24):2
     [V>=W24+1,W24>=0] 
* CE 163: start(V,V2,V7,V19,V24) = 0+ ge(W24,V2,X24):1
     [V2>=1,X24=1,W24=0,V=0] 
* CE 164: start(V,V2,V7,V19,V24) = 0+ ge(V,W24,X24):2
     [V>=0,X24=2,W24=0,V2=0] 
* CE 165: start(V,V2,V7,V19,V24) = 0+ ge(V,V2,W24):3
     [V2>=0,V>=0,W24=0] 
* CE 166: start(V,V2,V7,V19,V24) = 0+ ge(V,V2,W24):4
     [V2>=V+1,V>=1,W24=1] 
* CE 167: start(V,V2,V7,V19,V24) = 0+ ge(V,V2,W24):5
     [V>=V2,V2>=1,W24=2] 
* CE 168: start(V,V2,V7,V19,V24) = 0+ a(W24):1
     [W24=0] 
* CE 169: start(V,V2,V7,V19,V24) = 0+ a(W24):2
     [W24=1] 

### Cost equations --> "Loop" of start/5 
* CEs [77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169] --> Loop 57 

#### Loops of start/5 
* Loop 57: start(V,V2,V7,V19,V24) [] 

### Ranking functions of CR start(V,V2,V7,V19,V24) 

#### Partial ranking functions of CR start(V,V2,V7,V19,V24) 


### Resulting Chains:start(V,V2,V7,V19,V24) 
* [57]


### Merging Chains  start/5 into  External patterns of execution 
* [[57]] --> 1 


Computing Bounds
=====================================

#### Cost of chains of a(Out):
* Chain [24]: 1
  with precondition: [Out=0] 

* Chain [23]: 1
  with precondition: [Out=1] 


#### Cost of loops [25] 

 * loop 25:ge(V,V2,Out) -> [ge(V',V2',Out')] 
1
#### Cost of phase [25]:ge(V,V2,Out) -> [ge(V',V2',Out')] 
1*it(25)+0
  Such that:it(25) =< V
it(25) =< V-V'
it(25) =< V2
it(25) =< V2-V2'

#### Cost of phase [25]:ge(V,V2,Out) -> [ge(V',V2',Out')] 
1*it(25)+0
  Such that:it(25) =< V
it(25) =< V-V'
it(25) =< V2
it(25) =< V2-V2'

#### Cost of phase [25]:ge(V,V2,Out) -> [ge(V',V2',Out')] 
1*it(25)+0
  Such that:it(25) =< V
it(25) =< V-V'
it(25) =< V2
it(25) =< V2-V2'

#### Cost of chains of ge(V,V2,Out):
* Chain [[25],28]: 1*it(25)+1
  Such that:it(25) =< V

  with precondition: [Out=1,V>=1,V2>=V+1] 

* Chain [[25],27]: 1*it(25)+1
  Such that:it(25) =< V2

  with precondition: [Out=2,V2>=1,V>=V2] 

* Chain [[25],26]: 1*it(25)+0
  Such that:it(25) =< V2

  with precondition: [Out=0,V>=1,V2>=1] 

* Chain [28]: 1
  with precondition: [V=0,Out=1,V2>=1] 

* Chain [27]: 1
  with precondition: [V2=0,Out=2,V>=0] 

* Chain [26]: 0
  with precondition: [Out=0,V>=0,V2>=0] 


#### Cost of chains of head(V,Out):
* Chain [30]: 1
  with precondition: [V=0,Out=1] 

* Chain [29]: 1
  with precondition: [Out>=0,V>=Out+1] 


#### Cost of chains of isempty(V,Out):
* Chain [32]: 1
  with precondition: [V=0,Out=2] 

* Chain [31]: 1
  with precondition: [Out=1,V>=1] 


#### Cost of chains of tail(V,Out):
* Chain [34]: 1
  with precondition: [V=0,Out=0] 

* Chain [33]: 1
  with precondition: [Out>=0,V>=Out+1] 


#### Cost of loops [35] 

 * loop 35:plus(V,V2,Out) -> [plus(V',V2',Out')] 
1
#### Cost of phase [35]:plus(V,V2,Out) -> [plus(V',V2',Out')] 
1*it(35)+0
  Such that:it(35) =< V
it(35) =< V-V'

#### Cost of phase [35]:plus(V,V2,Out) -> [plus(V',V2',Out')] 
1*it(35)+0
  Such that:it(35) =< V
it(35) =< V-V'

#### Cost of chains of plus(V,V2,Out):
* Chain [[35],37]: 1*it(35)+1
  Such that:it(35) =< -V2+Out

  with precondition: [V+V2=Out,V>=1,V2>=0] 

* Chain [[35],36]: 1*it(35)+0
  Such that:it(35) =< Out

  with precondition: [V2>=0,Out>=1,V>=Out] 

* Chain [37]: 1
  with precondition: [V=0,V2=Out,V2>=0] 

* Chain [36]: 0
  with precondition: [Out=0,V>=0,V2>=0] 


#### Cost of loops [38,39,40,44] 

 * loop 38:timesIter(V,V2,V7,V19,Out) -> [timesIter(V',V2',V7',V19',Out')] 
1*s(8)+1*s(7)+3
  Such that:s(7) =< V7'
s(8) =< V19'

 * loop 39:timesIter(V,V2,V7,V19,Out) -> [timesIter(V',V2',V7',V19',Out')] 
1*s(12)+1*s(11)+4
  Such that:s(11) =< V2'
s(12) =< V19'

 * loop 40:timesIter(V,V2,V7,V19,Out) -> [timesIter(V',V2',V7',V19',Out')] 
1*s(14)+3
  Such that:s(14) =< V19'

 * loop 44:timesIter(V,V2,V7,V19,Out) -> [timesIter(V',V2',V7',V19',Out')] 
1*s(16)+4
  Such that:s(16) =< V19'

#### Cost of phase [38,39,40,44]:timesIter(V,V2,V7,V19,Out) -> [timesIter(V',V2',V7',V19',Out')] 
14*it(38)+1*s(17)+1*s(18)+3*s(19)+1*s(20)+0
  Such that:aux(3) =< V
aux(2) =< V2
aux(8) =< V-V19
aux(9) =< V-V19-V'+V19'
it(38) =< aux(8)
it(38) =< aux(9)
aux(5) =< aux(3)
aux(4) =< aux(2)
s(17) =< it(38)*aux(3)
s(18) =< it(38)*aux(2)
s(19) =< it(38)*aux(5)
s(20) =< it(38)*aux(4)

#### Cost of phase [38,39,40,44]:timesIter(V,V2,V7,V19,Out) -> [timesIter(V',V2',V7',V19',Out')] 
14*it(38)+1*s(17)+1*s(18)+3*s(19)+1*s(20)+0
  Such that:aux(3) =< V
aux(2) =< V2
aux(8) =< V-V19
aux(9) =< V-V19-V'+V19'
it(38) =< aux(8)
it(38) =< aux(9)
aux(5) =< aux(3)
aux(4) =< aux(2)
s(17) =< it(38)*aux(3)
s(18) =< it(38)*aux(2)
s(19) =< it(38)*aux(5)
s(20) =< it(38)*aux(4)

#### Cost of chains of timesIter(V,V2,V7,V19,Out):
* Chain [[38,39,40,44],49]: 14*it(38)+3*s(2)+1*s(17)+1*s(18)+3*s(19)+1*s(20)+2
  Such that:aux(2) =< V2
aux(10) =< V
aux(11) =< V-V19
s(2) =< aux(10)
it(38) =< aux(11)
aux(5) =< aux(10)
aux(4) =< aux(2)
s(17) =< it(38)*aux(10)
s(18) =< it(38)*aux(2)
s(19) =< it(38)*aux(5)
s(20) =< it(38)*aux(4)

  with precondition: [Out=0,V2>=0,V7>=0,V19>=1,V>=V19+1] 

* Chain [[38,39,40,44],46]: 14*it(38)+1*s(17)+1*s(18)+3*s(19)+1*s(20)+1*s(23)+3
  Such that:aux(2) =< V2
aux(12) =< V
aux(13) =< V-V19
s(23) =< aux(12)
it(38) =< aux(13)
aux(5) =< aux(12)
aux(4) =< aux(2)
s(17) =< it(38)*aux(12)
s(18) =< it(38)*aux(2)
s(19) =< it(38)*aux(5)
s(20) =< it(38)*aux(4)

  with precondition: [V2>=0,V7>=0,V19>=1,Out>=0,V>=V19+1] 

* Chain [49]: 2*s(2)+1*s(3)+2
  Such that:s(3) =< V19
aux(1) =< V
s(2) =< aux(1)

  with precondition: [Out=0,V>=0,V2>=0,V7>=0,V19>=0] 

* Chain [48]: 3
  with precondition: [V=0,V7=Out,V2>=0,V7>=0,V19>=0] 

* Chain [47]: 2
  with precondition: [V19=0,Out=0,V>=1,V2>=0,V7>=0] 

* Chain [46]: 1*s(23)+3
  Such that:s(23) =< V

  with precondition: [V7=Out,V>=1,V2>=0,V7>=0,V19>=V] 

* Chain [45,[38,39,40,44],49]: 17*it(38)+1*s(17)+3*s(19)+6
  Such that:aux(14) =< V
it(38) =< aux(14)
aux(5) =< aux(14)
s(17) =< it(38)*aux(14)
s(19) =< it(38)*aux(5)

  with precondition: [V2=0,V19=0,Out=0,V>=2,V7>=0] 

* Chain [45,[38,39,40,44],46]: 15*it(38)+1*s(17)+3*s(19)+7
  Such that:aux(15) =< V
it(38) =< aux(15)
aux(5) =< aux(15)
s(17) =< it(38)*aux(15)
s(19) =< it(38)*aux(5)

  with precondition: [V2=0,V19=0,V>=2,V7>=0,Out>=0] 

* Chain [45,49]: 2*s(2)+1*s(3)+6
  Such that:s(3) =< 1
aux(1) =< V
s(2) =< aux(1)

  with precondition: [V2=0,V19=0,Out=0,V>=1,V7>=0] 

* Chain [45,46]: 1*s(23)+7
  Such that:s(23) =< 1

  with precondition: [V=1,V2=0,V19=0,V7=Out,V7>=0] 

* Chain [43,[38,39,40,44],49]: 17*it(38)+1*s(17)+1*s(18)+3*s(19)+1*s(20)+5
  Such that:aux(2) =< V2
aux(16) =< V
it(38) =< aux(16)
aux(5) =< aux(16)
aux(4) =< aux(2)
s(17) =< it(38)*aux(16)
s(18) =< it(38)*aux(2)
s(19) =< it(38)*aux(5)
s(20) =< it(38)*aux(4)

  with precondition: [V19=0,Out=0,V>=2,V2>=0,V7>=0] 

* Chain [43,[38,39,40,44],46]: 15*it(38)+1*s(17)+1*s(18)+3*s(19)+1*s(20)+6
  Such that:aux(2) =< V2
aux(17) =< V
it(38) =< aux(17)
aux(5) =< aux(17)
aux(4) =< aux(2)
s(17) =< it(38)*aux(17)
s(18) =< it(38)*aux(2)
s(19) =< it(38)*aux(5)
s(20) =< it(38)*aux(4)

  with precondition: [V19=0,V>=2,V2>=0,V7>=0,Out>=0] 

* Chain [43,49]: 2*s(2)+1*s(3)+5
  Such that:s(3) =< 1
aux(1) =< V
s(2) =< aux(1)

  with precondition: [V19=0,Out=0,V>=1,V2>=0,V7>=0] 

* Chain [43,46]: 1*s(23)+6
  Such that:s(23) =< 1

  with precondition: [V=1,V19=0,Out=0,V2>=0,V7>=0] 

* Chain [42,[38,39,40,44],49]: 17*it(38)+1*s(17)+1*s(18)+3*s(19)+1*s(20)+1*s(24)+6
  Such that:aux(18) =< V
aux(19) =< V2
s(24) =< aux(19)
it(38) =< aux(18)
aux(5) =< aux(18)
aux(4) =< aux(19)
s(17) =< it(38)*aux(18)
s(18) =< it(38)*aux(19)
s(19) =< it(38)*aux(5)
s(20) =< it(38)*aux(4)

  with precondition: [V19=0,Out=0,V>=2,V2>=1,V7>=0] 

* Chain [42,[38,39,40,44],46]: 15*it(38)+1*s(17)+1*s(18)+3*s(19)+1*s(20)+1*s(24)+7
  Such that:aux(20) =< V
aux(21) =< V2
s(24) =< aux(21)
it(38) =< aux(20)
aux(5) =< aux(20)
aux(4) =< aux(21)
s(17) =< it(38)*aux(20)
s(18) =< it(38)*aux(21)
s(19) =< it(38)*aux(5)
s(20) =< it(38)*aux(4)

  with precondition: [V19=0,V>=2,V2>=1,V7>=0,Out>=0] 

* Chain [42,49]: 2*s(2)+1*s(3)+1*s(24)+6
  Such that:s(3) =< 1
aux(1) =< V
s(24) =< V2
s(2) =< aux(1)

  with precondition: [V19=0,Out=0,V>=1,V2>=1,V7>=0] 

* Chain [42,46]: 1*s(23)+1*s(24)+7
  Such that:s(23) =< 1
s(24) =< -V7+Out

  with precondition: [V=1,V19=0,Out=V2+V7,V7>=0,Out>=V7+1] 

* Chain [41,[38,39,40,44],49]: 17*it(38)+1*s(17)+1*s(18)+3*s(19)+1*s(20)+1*s(25)+5
  Such that:aux(22) =< V
aux(23) =< V2
s(25) =< aux(23)
it(38) =< aux(22)
aux(5) =< aux(22)
aux(4) =< aux(23)
s(17) =< it(38)*aux(22)
s(18) =< it(38)*aux(23)
s(19) =< it(38)*aux(5)
s(20) =< it(38)*aux(4)

  with precondition: [V19=0,Out=0,V>=2,V2>=1,V7>=0] 

* Chain [41,[38,39,40,44],46]: 15*it(38)+1*s(17)+1*s(18)+3*s(19)+1*s(20)+1*s(25)+6
  Such that:aux(24) =< V
aux(25) =< V2
s(25) =< aux(25)
it(38) =< aux(24)
aux(5) =< aux(24)
aux(4) =< aux(25)
s(17) =< it(38)*aux(24)
s(18) =< it(38)*aux(25)
s(19) =< it(38)*aux(5)
s(20) =< it(38)*aux(4)

  with precondition: [V19=0,V>=2,V2>=1,V7>=0,Out>=0] 

* Chain [41,49]: 2*s(2)+1*s(3)+1*s(25)+5
  Such that:s(3) =< 1
aux(1) =< V
s(25) =< V2
s(2) =< aux(1)

  with precondition: [V19=0,Out=0,V>=1,V2>=1,V7>=0] 

* Chain [41,46]: 1*s(23)+1*s(25)+6
  Such that:s(23) =< 1
s(25) =< Out

  with precondition: [V=1,V19=0,V7>=0,Out>=1,V2>=Out] 


#### Cost of loops [53] 

 * loop 53:prodIter(V,V2,Out) -> [prodIter(V',V2',Out')] 
5*s(151)+4*s(152)+95*s(153)+5*s(156)+4*s(157)+15*s(158)+4*s(159)+12
  Such that:s(148) =< V
s(149) =< 1
s(150) =< V2
s(151) =< s(149)
s(152) =< s(148)
s(153) =< s(150)
s(154) =< s(150)
s(155) =< s(148)
s(156) =< s(153)*s(150)
s(157) =< s(153)*s(148)
s(158) =< s(153)*s(154)
s(159) =< s(153)*s(155)

#### Cost of phase [53]:prodIter(V,V2,Out) -> [prodIter(V',V2',Out')] 
12*it(53)+5*s(160)+4*s(161)+95*s(162)+5*s(163)+4*s(164)+15*s(165)+4*s(166)+0
  Such that:s(167) =< V2-V2'
aux(37) =< V
aux(38) =< V-V'
aux(39) =< V2
aux(35) =< aux(37)
it(53) =< aux(37)
aux(35) =< aux(38)
it(53) =< aux(38)
s(167) =< aux(39)
aux(36) =< aux(37)
s(168) =< it(53)*aux(36)
s(160) =< aux(35)
s(161) =< s(168)
s(162) =< s(167)
s(154) =< aux(39)
s(163) =< s(162)*aux(39)
s(164) =< s(162)*aux(37)
s(165) =< s(162)*s(154)
s(166) =< s(162)*aux(36)

#### Cost of phase [53]:prodIter(V,V2,Out) -> [prodIter(V',V2',Out')] 
12*it(53)+5*s(160)+4*s(161)+95*s(162)+5*s(163)+4*s(164)+15*s(165)+4*s(166)+0
  Such that:s(167) =< V2-V2'
aux(37) =< V
aux(38) =< V-V'
aux(39) =< V2
aux(35) =< aux(37)
it(53) =< aux(37)
aux(35) =< aux(38)
it(53) =< aux(38)
s(167) =< aux(39)
aux(36) =< aux(37)
s(168) =< it(53)*aux(36)
s(160) =< aux(35)
s(161) =< s(168)
s(162) =< s(167)
s(154) =< aux(39)
s(163) =< s(162)*aux(39)
s(164) =< s(162)*aux(37)
s(165) =< s(162)*s(154)
s(166) =< s(162)*aux(36)

#### Cost of phase [53]:prodIter(V,V2,Out) -> [prodIter(V',V2',Out')] 
12*it(53)+5*s(160)+4*s(161)+95*s(162)+5*s(163)+4*s(164)+15*s(165)+4*s(166)+0
  Such that:s(167) =< V2-V2'
aux(37) =< V
aux(38) =< V-V'
aux(39) =< V2
aux(35) =< aux(37)
it(53) =< aux(37)
aux(35) =< aux(38)
it(53) =< aux(38)
s(167) =< aux(39)
aux(36) =< aux(37)
s(168) =< it(53)*aux(36)
s(160) =< aux(35)
s(161) =< s(168)
s(162) =< s(167)
s(154) =< aux(39)
s(163) =< s(162)*aux(39)
s(164) =< s(162)*aux(37)
s(165) =< s(162)*s(154)
s(166) =< s(162)*aux(36)

#### Cost of loops [50,51] 

 * loop 50:prodIter(V,V2,Out) -> [prodIter(V',V2',Out')] 
2*s(182)+60*s(183)+4*s(186)+3*s(187)+12*s(188)+3*s(189)+13
  Such that:s(180) =< V
s(181) =< V2
s(182) =< s(180)
s(183) =< s(181)
s(184) =< s(181)
s(185) =< s(180)
s(186) =< s(183)*s(181)
s(187) =< s(183)*s(180)
s(188) =< s(183)*s(184)
s(189) =< s(183)*s(185)

 * loop 51:prodIter(V,V2,Out) -> [prodIter(V',V2',Out')] 
2*s(196)+2*s(197)+13
  Such that:s(194) =< 1
s(195) =< V2'
s(196) =< s(194)
s(197) =< s(195)

#### Cost of phase [50,51]:prodIter(V,V2,Out) -> [prodIter(V',V2',Out')] 
26*it(50)+2*s(198)+60*s(199)+4*s(200)+3*s(201)+12*s(202)+3*s(203)+2*s(206)+2*s(207)+0
  Such that:aux(63) =< V
aux(64) =< V-V2
aux(65) =< V-V'
aux(54) =< aux(63)
it(50) =< aux(63)
aux(54) =< aux(65)
it(50) =< aux(65)
aux(57) =< aux(63)-1
aux(51) =< aux(63)
aux(55) =< it(50)*aux(57)
s(208) =< it(50)*aux(57)
s(205) =< it(50)*aux(51)
s(208) =< aux(55)+aux(64)
s(206) =< aux(54)
s(207) =< s(208)
s(198) =< s(205)

#### Cost of loops [50,51] 

 * loop 50:prodIter(V,V2,Out) -> [prodIter(V',V2',Out')] 
2*s(182)+60*s(183)+4*s(186)+3*s(187)+12*s(188)+3*s(189)+13
  Such that:s(180) =< V
s(181) =< V2
s(182) =< s(180)
s(183) =< s(181)
s(184) =< s(181)
s(185) =< s(180)
s(186) =< s(183)*s(181)
s(187) =< s(183)*s(180)
s(188) =< s(183)*s(184)
s(189) =< s(183)*s(185)

 * loop 51:prodIter(V,V2,Out) -> [prodIter(V',V2',Out')] 
2*s(196)+2*s(197)+13
  Such that:s(194) =< 1
s(195) =< V2'
s(196) =< s(194)
s(197) =< s(195)

#### Cost of phase [50,51]:prodIter(V,V2,Out) -> [] 
45*it(50)+2*it([[53],56])+6*s(198)+60*s(199)+4*s(200)+3*s(201)+12*s(202)+3*s(203)+2*s(207)+95*s(212)+5*s(213)+4*s(214)+15*s(215)+4*s(216)+0
  Such that:it([[53],56]) =< 1
aux(82) =< V
aux(83) =< V-V2
it(50) =< aux(82)
it([[53],56]) =< aux(82)
aux(75) =< aux(82)-1
aux(36) =< aux(82)
aux(73) =< it(50)*aux(75)
s(208) =< it(50)*aux(75)
s(205) =< it(50)*aux(36)
s(208) =< aux(73)+aux(83)
s(198) =< s(205)
s(207) =< s(208)

#### Cost of phase [50,51]:prodIter(V,V2,Out) -> [prodIter(V',V2',Out')] 
26*it(50)+2*s(198)+60*s(199)+4*s(200)+3*s(201)+12*s(202)+3*s(203)+2*s(206)+2*s(207)+0
  Such that:aux(63) =< V
aux(64) =< V-V2
aux(65) =< V-V'
aux(54) =< aux(63)
it(50) =< aux(63)
aux(54) =< aux(65)
it(50) =< aux(65)
aux(57) =< aux(63)-1
aux(51) =< aux(63)
aux(55) =< it(50)*aux(57)
s(208) =< it(50)*aux(57)
s(205) =< it(50)*aux(51)
s(208) =< aux(55)+aux(64)
s(206) =< aux(54)
s(207) =< s(208)
s(198) =< s(205)

#### Cost of loops [50,51] 

 * loop 50:prodIter(V,V2,Out) -> [prodIter(V',V2',Out')] 
2*s(182)+60*s(183)+4*s(186)+3*s(187)+12*s(188)+3*s(189)+13
  Such that:s(180) =< V
s(181) =< V2
s(182) =< s(180)
s(183) =< s(181)
s(184) =< s(181)
s(185) =< s(180)
s(186) =< s(183)*s(181)
s(187) =< s(183)*s(180)
s(188) =< s(183)*s(184)
s(189) =< s(183)*s(185)

 * loop 51:prodIter(V,V2,Out) -> [prodIter(V',V2',Out')] 
2*s(196)+2*s(197)+13
  Such that:s(194) =< 1
s(195) =< V2'
s(196) =< s(194)
s(197) =< s(195)

#### Cost of phase [50,51]:prodIter(V,V2,Out) -> [] 
45*it(50)+3*it([[53],55])+6*s(198)+60*s(199)+4*s(200)+3*s(201)+12*s(202)+3*s(203)+2*s(207)+95*s(222)+5*s(223)+4*s(224)+15*s(225)+4*s(226)+0
  Such that:it([[53],55]) =< 1
aux(100) =< V
aux(101) =< V-V2
it(50) =< aux(100)
it([[53],55]) =< aux(100)
aux(93) =< aux(100)-1
aux(36) =< aux(100)
aux(91) =< it(50)*aux(93)
s(208) =< it(50)*aux(93)
s(205) =< it(50)*aux(36)
s(208) =< aux(91)+aux(101)
s(198) =< s(205)
s(207) =< s(208)

#### Cost of phase [50,51]:prodIter(V,V2,Out) -> [prodIter(V',V2',Out')] 
26*it(50)+2*s(198)+60*s(199)+4*s(200)+3*s(201)+12*s(202)+3*s(203)+2*s(206)+2*s(207)+0
  Such that:aux(63) =< V
aux(64) =< V-V2
aux(65) =< V-V'
aux(54) =< aux(63)
it(50) =< aux(63)
aux(54) =< aux(65)
it(50) =< aux(65)
aux(57) =< aux(63)-1
aux(51) =< aux(63)
aux(55) =< it(50)*aux(57)
s(208) =< it(50)*aux(57)
s(205) =< it(50)*aux(51)
s(208) =< aux(55)+aux(64)
s(206) =< aux(54)
s(207) =< s(208)
s(198) =< s(205)

#### Cost of loops [50,51] 

 * loop 50:prodIter(V,V2,Out) -> [prodIter(V',V2',Out')] 
2*s(182)+60*s(183)+4*s(186)+3*s(187)+12*s(188)+3*s(189)+13
  Such that:s(180) =< V
s(181) =< V2
s(182) =< s(180)
s(183) =< s(181)
s(184) =< s(181)
s(185) =< s(180)
s(186) =< s(183)*s(181)
s(187) =< s(183)*s(180)
s(188) =< s(183)*s(184)
s(189) =< s(183)*s(185)

 * loop 51:prodIter(V,V2,Out) -> [prodIter(V',V2',Out')] 
2*s(196)+2*s(197)+13
  Such that:s(194) =< 1
s(195) =< V2'
s(196) =< s(194)
s(197) =< s(195)

#### Cost of phase [50,51]:prodIter(V,V2,Out) -> [] 
45*it(50)+2*it([[53],54])+6*s(198)+60*s(199)+4*s(200)+3*s(201)+12*s(202)+3*s(203)+2*s(207)+95*s(232)+5*s(233)+4*s(234)+15*s(235)+4*s(236)+0
  Such that:it([[53],54]) =< 1
aux(118) =< V
aux(119) =< V-V2
it(50) =< aux(118)
it([[53],54]) =< aux(118)
aux(111) =< aux(118)-1
aux(36) =< aux(118)
aux(109) =< it(50)*aux(111)
s(208) =< it(50)*aux(111)
s(205) =< it(50)*aux(36)
s(208) =< aux(109)+aux(119)
s(198) =< s(205)
s(207) =< s(208)

#### Cost of phase [50,51]:prodIter(V,V2,Out) -> [prodIter(V',V2',Out')] 
26*it(50)+2*s(198)+60*s(199)+4*s(200)+3*s(201)+12*s(202)+3*s(203)+2*s(206)+2*s(207)+0
  Such that:aux(63) =< V
aux(64) =< V-V2
aux(65) =< V-V'
aux(54) =< aux(63)
it(50) =< aux(63)
aux(54) =< aux(65)
it(50) =< aux(65)
aux(57) =< aux(63)-1
aux(51) =< aux(63)
aux(55) =< it(50)*aux(57)
s(208) =< it(50)*aux(57)
s(205) =< it(50)*aux(51)
s(208) =< aux(55)+aux(64)
s(206) =< aux(54)
s(207) =< s(208)
s(198) =< s(205)

#### Cost of phase [50,51]:prodIter(V,V2,Out) -> [prodIter(V',V2',Out')] 
26*it(50)+2*s(198)+60*s(199)+4*s(200)+3*s(201)+12*s(202)+3*s(203)+2*s(206)+2*s(207)+0
  Such that:aux(63) =< V
aux(64) =< V-V2
aux(65) =< V-V'
aux(54) =< aux(63)
it(50) =< aux(63)
aux(54) =< aux(65)
it(50) =< aux(65)
aux(57) =< aux(63)-1
aux(51) =< aux(63)
aux(55) =< it(50)*aux(57)
s(208) =< it(50)*aux(57)
s(205) =< it(50)*aux(51)
s(208) =< aux(55)+aux(64)
s(206) =< aux(54)
s(207) =< s(208)
s(198) =< s(205)

#### Cost of phase [50,51]:prodIter(V,V2,Out) -> [prodIter(V',V2',Out')] 
26*it(50)+2*s(198)+60*s(199)+4*s(200)+3*s(201)+12*s(202)+3*s(203)+2*s(206)+2*s(207)+0
  Such that:aux(63) =< V
aux(64) =< V-V2
aux(65) =< V-V'
aux(54) =< aux(63)
it(50) =< aux(63)
aux(54) =< aux(65)
it(50) =< aux(65)
aux(57) =< aux(63)-1
aux(51) =< aux(63)
aux(55) =< it(50)*aux(57)
s(208) =< it(50)*aux(57)
s(205) =< it(50)*aux(51)
s(208) =< aux(55)+aux(64)
s(206) =< aux(54)
s(207) =< s(208)
s(198) =< s(205)

#### Cost of phase [50,51]:prodIter(V,V2,Out) -> [prodIter(V',V2',Out')] 
26*it(50)+2*s(198)+60*s(199)+4*s(200)+3*s(201)+12*s(202)+3*s(203)+2*s(206)+2*s(207)+0
  Such that:aux(63) =< V
aux(64) =< V-V2
aux(65) =< V-V'
aux(54) =< aux(63)
it(50) =< aux(63)
aux(54) =< aux(65)
it(50) =< aux(65)
aux(57) =< aux(63)-1
aux(51) =< aux(63)
aux(55) =< it(50)*aux(57)
s(208) =< it(50)*aux(57)
s(205) =< it(50)*aux(51)
s(208) =< aux(55)+aux(64)
s(206) =< aux(54)
s(207) =< s(208)
s(198) =< s(205)

#### Cost of phase [50,51]:prodIter(V,V2,Out) -> [prodIter(V',V2',Out')] 
26*it(50)+2*s(198)+60*s(199)+4*s(200)+3*s(201)+12*s(202)+3*s(203)+2*s(206)+2*s(207)+0
  Such that:aux(63) =< V
aux(64) =< V-V2
aux(65) =< V-V'
aux(54) =< aux(63)
it(50) =< aux(63)
aux(54) =< aux(65)
it(50) =< aux(65)
aux(57) =< aux(63)-1
aux(51) =< aux(63)
aux(55) =< it(50)*aux(57)
s(208) =< it(50)*aux(57)
s(205) =< it(50)*aux(51)
s(208) =< aux(55)+aux(64)
s(206) =< aux(54)
s(207) =< s(208)
s(198) =< s(205)

#### Cost of phase [50,51]:prodIter(V,V2,Out) -> [prodIter(V',V2',Out')] 
26*it(50)+2*s(198)+60*s(199)+4*s(200)+3*s(201)+12*s(202)+3*s(203)+2*s(206)+2*s(207)+0
  Such that:aux(63) =< V
aux(64) =< V-V2
aux(65) =< V-V'
aux(54) =< aux(63)
it(50) =< aux(63)
aux(54) =< aux(65)
it(50) =< aux(65)
aux(57) =< aux(63)-1
aux(51) =< aux(63)
aux(55) =< it(50)*aux(57)
s(208) =< it(50)*aux(57)
s(205) =< it(50)*aux(51)
s(208) =< aux(55)+aux(64)
s(206) =< aux(54)
s(207) =< s(208)
s(198) =< s(205)

#### Cost of phase [50,51]:prodIter(V,V2,Out) -> [prodIter(V',V2',Out')] 
26*it(50)+2*s(198)+60*s(199)+4*s(200)+3*s(201)+12*s(202)+3*s(203)+2*s(206)+2*s(207)+0
  Such that:aux(63) =< V
aux(64) =< V-V2
aux(65) =< V-V'
aux(54) =< aux(63)
it(50) =< aux(63)
aux(54) =< aux(65)
it(50) =< aux(65)
aux(57) =< aux(63)-1
aux(51) =< aux(63)
aux(55) =< it(50)*aux(57)
s(208) =< it(50)*aux(57)
s(205) =< it(50)*aux(51)
s(208) =< aux(55)+aux(64)
s(206) =< aux(54)
s(207) =< s(208)
s(198) =< s(205)

#### Cost of phase [50,51]:prodIter(V,V2,Out) -> [prodIter(V',V2',Out')] 
26*it(50)+2*s(198)+60*s(199)+4*s(200)+3*s(201)+12*s(202)+3*s(203)+2*s(206)+2*s(207)+0
  Such that:aux(63) =< V
aux(64) =< V-V2
aux(65) =< V-V'
aux(54) =< aux(63)
it(50) =< aux(63)
aux(54) =< aux(65)
it(50) =< aux(65)
aux(57) =< aux(63)-1
aux(51) =< aux(63)
aux(55) =< it(50)*aux(57)
s(208) =< it(50)*aux(57)
s(205) =< it(50)*aux(51)
s(208) =< aux(55)+aux(64)
s(206) =< aux(54)
s(207) =< s(208)
s(198) =< s(205)

#### Cost of phase [50,51]:prodIter(V,V2,Out) -> [prodIter(V',V2',Out')] 
26*it(50)+2*s(198)+60*s(199)+4*s(200)+3*s(201)+12*s(202)+3*s(203)+2*s(206)+2*s(207)+0
  Such that:aux(63) =< V
aux(64) =< V-V2
aux(65) =< V-V'
aux(54) =< aux(63)
it(50) =< aux(63)
aux(54) =< aux(65)
it(50) =< aux(65)
aux(57) =< aux(63)-1
aux(51) =< aux(63)
aux(55) =< it(50)*aux(57)
s(208) =< it(50)*aux(57)
s(205) =< it(50)*aux(51)
s(208) =< aux(55)+aux(64)
s(206) =< aux(54)
s(207) =< s(208)
s(198) =< s(205)

#### Cost of chains of prodIter(V,V2,Out):
* Chain [[53],56]: 17*it(53)+4*s(161)+95*s(162)+5*s(163)+4*s(164)+15*s(165)+4*s(166)+2
  Such that:aux(40) =< V
aux(41) =< V2
it(53) =< aux(40)
aux(36) =< aux(40)
s(168) =< it(53)*aux(36)
s(161) =< s(168)
s(162) =< aux(41)
s(154) =< aux(41)
s(163) =< s(162)*aux(41)
s(164) =< s(162)*aux(40)
s(165) =< s(162)*s(154)
s(166) =< s(162)*aux(36)

  with precondition: [Out=0,V>=1,V2>=0] 

* Chain [[53],55]: 17*it(53)+4*s(161)+95*s(162)+5*s(163)+4*s(164)+15*s(165)+4*s(166)+3
  Such that:aux(42) =< V
aux(43) =< V2
it(53) =< aux(42)
aux(36) =< aux(42)
s(168) =< it(53)*aux(36)
s(161) =< s(168)
s(162) =< aux(43)
s(154) =< aux(43)
s(163) =< s(162)*aux(43)
s(164) =< s(162)*aux(42)
s(165) =< s(162)*s(154)
s(166) =< s(162)*aux(36)

  with precondition: [Out=0,V>=1,V2>=0] 

* Chain [[53],54]: 17*it(53)+4*s(161)+95*s(162)+5*s(163)+4*s(164)+15*s(165)+4*s(166)+2
  Such that:aux(44) =< V
aux(45) =< V2
it(53) =< aux(44)
aux(36) =< aux(44)
s(168) =< it(53)*aux(36)
s(161) =< s(168)
s(162) =< aux(45)
s(154) =< aux(45)
s(163) =< s(162)*aux(45)
s(164) =< s(162)*aux(44)
s(165) =< s(162)*s(154)
s(166) =< s(162)*aux(36)

  with precondition: [Out=0,V>=2,V2>=0] 

* Chain [[50,51],[53],56]: 45*it(50)+2*it([[53],56])+6*s(198)+60*s(199)+4*s(200)+3*s(201)+12*s(202)+3*s(203)+2*s(207)+95*s(212)+5*s(213)+4*s(214)+15*s(215)+4*s(216)+0
  Such that:it([[53],56]) =< 1
aux(82) =< V
aux(83) =< V-V2
it(50) =< aux(82)
it([[53],56]) =< aux(82)
aux(75) =< aux(82)-1
aux(36) =< aux(82)
aux(73) =< it(50)*aux(75)
s(208) =< it(50)*aux(75)
s(205) =< it(50)*aux(36)
s(208) =< aux(73)+aux(83)
s(198) =< s(205)
s(207) =< s(208)

  with precondition: [Out=0,V>=2,V2>=1] 

* Chain [[50,51],[53],55]: 45*it(50)+3*it([[53],55])+6*s(198)+60*s(199)+4*s(200)+3*s(201)+12*s(202)+3*s(203)+2*s(207)+95*s(222)+5*s(223)+4*s(224)+15*s(225)+4*s(226)+0
  Such that:it([[53],55]) =< 1
aux(100) =< V
aux(101) =< V-V2
it(50) =< aux(100)
it([[53],55]) =< aux(100)
aux(93) =< aux(100)-1
aux(36) =< aux(100)
aux(91) =< it(50)*aux(93)
s(208) =< it(50)*aux(93)
s(205) =< it(50)*aux(36)
s(208) =< aux(91)+aux(101)
s(198) =< s(205)
s(207) =< s(208)

  with precondition: [Out=0,V>=2,V2>=1] 

* Chain [[50,51],[53],54]: 45*it(50)+2*it([[53],54])+6*s(198)+60*s(199)+4*s(200)+3*s(201)+12*s(202)+3*s(203)+2*s(207)+95*s(232)+5*s(233)+4*s(234)+15*s(235)+4*s(236)+0
  Such that:it([[53],54]) =< 1
aux(118) =< V
aux(119) =< V-V2
it(50) =< aux(118)
it([[53],54]) =< aux(118)
aux(111) =< aux(118)-1
aux(36) =< aux(118)
aux(109) =< it(50)*aux(111)
s(208) =< it(50)*aux(111)
s(205) =< it(50)*aux(36)
s(208) =< aux(109)+aux(119)
s(198) =< s(205)
s(207) =< s(208)

  with precondition: [Out=0,V>=3,V2>=1] 

* Chain [[50,51],56]: 28*it(50)+2*s(198)+82*s(199)+2*s(207)+2
  Such that:aux(64) =< V-V2
aux(120) =< V
it(50) =< aux(120)
aux(57) =< aux(120)-1
aux(51) =< aux(120)
aux(55) =< it(50)*aux(57)
s(208) =< it(50)*aux(57)
s(205) =< it(50)*aux(51)
s(208) =< aux(55)+aux(64)
s(207) =< s(208)
s(198) =< s(205)

  with precondition: [Out=0,V>=1,V2>=1,V+V2>=3] 

* Chain [[50,51],55]: 28*it(50)+2*s(198)+82*s(199)+2*s(207)+3
  Such that:aux(64) =< V-V2
aux(121) =< V
it(50) =< aux(121)
aux(57) =< aux(121)-1
aux(51) =< aux(121)
aux(55) =< it(50)*aux(57)
s(208) =< it(50)*aux(57)
s(205) =< it(50)*aux(51)
s(208) =< aux(55)+aux(64)
s(207) =< s(208)
s(198) =< s(205)

  with precondition: [V>=1,V2>=1,Out>=0,V+V2>=3] 

* Chain [[50,51],54]: 28*it(50)+2*s(198)+82*s(199)+2*s(207)+2
  Such that:aux(64) =< V-V2
aux(122) =< V
it(50) =< aux(122)
aux(57) =< aux(122)-1
aux(51) =< aux(122)
aux(55) =< it(50)*aux(57)
s(208) =< it(50)*aux(57)
s(205) =< it(50)*aux(51)
s(208) =< aux(55)+aux(64)
s(207) =< s(208)
s(198) =< s(205)

  with precondition: [Out=0,V>=2,V2>=1] 

* Chain [[50,51],52,[53],56]: 45*it(50)+6*s(161)+82*s(199)+2*s(207)+1*s(240)+15
  Such that:s(240) =< 1
aux(64) =< V-V2
aux(123) =< V
it(50) =< aux(123)
aux(36) =< aux(123)
s(168) =< it(50)*aux(36)
s(161) =< s(168)
aux(57) =< aux(123)-1
aux(55) =< it(50)*aux(57)
s(208) =< it(50)*aux(57)
s(208) =< aux(55)+aux(64)
s(207) =< s(208)

  with precondition: [Out=0,V>=3,V2>=1] 

* Chain [[50,51],52,[53],55]: 45*it(50)+6*s(161)+82*s(199)+2*s(207)+1*s(240)+16
  Such that:s(240) =< 1
aux(64) =< V-V2
aux(124) =< V
it(50) =< aux(124)
aux(36) =< aux(124)
s(168) =< it(50)*aux(36)
s(161) =< s(168)
aux(57) =< aux(124)-1
aux(55) =< it(50)*aux(57)
s(208) =< it(50)*aux(57)
s(208) =< aux(55)+aux(64)
s(207) =< s(208)

  with precondition: [Out=0,V>=3,V2>=1] 

* Chain [[50,51],52,[53],54]: 45*it(50)+6*s(161)+82*s(199)+2*s(207)+1*s(240)+15
  Such that:s(240) =< 1
aux(64) =< V-V2
aux(125) =< V
it(50) =< aux(125)
aux(36) =< aux(125)
s(168) =< it(50)*aux(36)
s(161) =< s(168)
aux(57) =< aux(125)-1
aux(55) =< it(50)*aux(57)
s(208) =< it(50)*aux(57)
s(208) =< aux(55)+aux(64)
s(207) =< s(208)

  with precondition: [Out=0,V>=4,V2>=1] 

* Chain [[50,51],52,56]: 28*it(50)+2*s(198)+82*s(199)+2*s(207)+1*s(240)+15
  Such that:s(240) =< 1
aux(64) =< V-V2
aux(126) =< V
it(50) =< aux(126)
aux(57) =< aux(126)-1
aux(51) =< aux(126)
aux(55) =< it(50)*aux(57)
s(208) =< it(50)*aux(57)
s(205) =< it(50)*aux(51)
s(208) =< aux(55)+aux(64)
s(207) =< s(208)
s(198) =< s(205)

  with precondition: [Out=0,V>=2,V2>=1] 

* Chain [[50,51],52,55]: 28*it(50)+2*s(198)+82*s(199)+2*s(207)+1*s(240)+16
  Such that:s(240) =< 1
aux(64) =< V-V2
aux(127) =< V
it(50) =< aux(127)
aux(57) =< aux(127)-1
aux(51) =< aux(127)
aux(55) =< it(50)*aux(57)
s(208) =< it(50)*aux(57)
s(205) =< it(50)*aux(51)
s(208) =< aux(55)+aux(64)
s(207) =< s(208)
s(198) =< s(205)

  with precondition: [Out=0,V>=2,V2>=1] 

* Chain [[50,51],52,54]: 28*it(50)+2*s(198)+82*s(199)+2*s(207)+1*s(240)+15
  Such that:s(240) =< 1
aux(64) =< V-V2
aux(128) =< V
it(50) =< aux(128)
aux(57) =< aux(128)-1
aux(51) =< aux(128)
aux(55) =< it(50)*aux(57)
s(208) =< it(50)*aux(57)
s(205) =< it(50)*aux(51)
s(208) =< aux(55)+aux(64)
s(207) =< s(208)
s(198) =< s(205)

  with precondition: [Out=0,V>=3,V2>=1] 

* Chain [56]: 2
  with precondition: [V=0,Out=0,V2>=0] 

* Chain [55]: 3
  with precondition: [V=0,V2=Out,V2>=0] 

* Chain [54]: 2
  with precondition: [Out=0,V>=1,V2>=0] 

* Chain [52,[53],56]: 17*it(53)+4*s(161)+1*s(240)+15
  Such that:s(240) =< 1
aux(40) =< V
it(53) =< aux(40)
aux(36) =< aux(40)
s(168) =< it(53)*aux(36)
s(161) =< s(168)

  with precondition: [V2=1,Out=0,V>=2] 

* Chain [52,[53],55]: 17*it(53)+4*s(161)+1*s(240)+16
  Such that:s(240) =< 1
aux(42) =< V
it(53) =< aux(42)
aux(36) =< aux(42)
s(168) =< it(53)*aux(36)
s(161) =< s(168)

  with precondition: [V2=1,Out=0,V>=2] 

* Chain [52,[53],54]: 17*it(53)+4*s(161)+1*s(240)+15
  Such that:s(240) =< 1
aux(44) =< V
it(53) =< aux(44)
aux(36) =< aux(44)
s(168) =< it(53)*aux(36)
s(161) =< s(168)

  with precondition: [V2=1,Out=0,V>=3] 

* Chain [52,56]: 1*s(240)+15
  Such that:s(240) =< 1

  with precondition: [V2=1,Out=0,V>=1] 

* Chain [52,55]: 1*s(240)+16
  Such that:s(240) =< 1

  with precondition: [V2=1,Out=0,V>=1] 

* Chain [52,54]: 1*s(240)+15
  Such that:s(240) =< 1

  with precondition: [V2=1,Out=0,V>=2] 


#### Cost of chains of start(V,V2,V7,V19,V24):
* Chain [57]: 479*s(460)+817*s(462)+47*s(465)+14*s(466)+141*s(467)+14*s(468)+49*s(526)+4825*s(527)+496*s(530)+160*s(534)+12218*s(541)+24*s(577)+24*s(579)+81*s(666)+195*s(668)+4*s(836)+112*s(849)+8*s(850)+24*s(852)+9*s(877)+9*s(879)+6*s(882)+6*s(884)+14*s(972)+1381*s(973)+144*s(976)+24*s(980)+15*s(983)+12*s(984)+45*s(985)+12*s(986)+24*s(1012)+12*s(1016)+12*s(1018)+17*s(1044)+13*s(1045)+51*s(1046)+13*s(1047)+1*s(1075)+28*s(1088)+2*s(1089)+2*s(1090)+6*s(1091)+2*s(1092)+27
  Such that:s(1075) =< V19
aux(168) =< 1
aux(169) =< V
aux(170) =< V-V2
aux(171) =< V-V19
aux(172) =< V2
aux(173) =< V2-V24
aux(174) =< V7
aux(175) =< V24+1
s(460) =< aux(168)
s(973) =< aux(169)
s(527) =< aux(172)
s(462) =< aux(174)
s(836) =< aux(175)
s(463) =< aux(174)
s(464) =< aux(168)
s(465) =< s(462)*aux(174)
s(466) =< s(462)*aux(168)
s(467) =< s(462)*s(463)
s(468) =< s(462)*s(464)
s(526) =< aux(168)
s(528) =< aux(172)
s(529) =< s(527)*s(528)
s(530) =< s(529)
s(531) =< aux(172)-1
s(532) =< s(527)*s(531)
s(533) =< s(527)*s(531)
s(533) =< s(532)+aux(172)
s(534) =< s(533)
s(526) =< aux(172)
s(577) =< s(462)*aux(172)
s(579) =< s(462)*s(528)
s(666) =< s(527)*aux(172)
s(668) =< s(527)*s(528)
s(972) =< aux(168)
s(974) =< aux(169)
s(975) =< s(973)*s(974)
s(976) =< s(975)
s(977) =< aux(169)-1
s(978) =< s(973)*s(977)
s(979) =< s(973)*s(977)
s(979) =< s(978)+aux(169)
s(980) =< s(979)
s(972) =< aux(169)
s(983) =< s(460)*aux(168)
s(984) =< s(460)*aux(169)
s(985) =< s(460)*s(464)
s(986) =< s(460)*s(974)
s(849) =< aux(173)
s(850) =< s(849)*aux(172)
s(852) =< s(849)*s(528)
s(877) =< s(527)*aux(174)
s(879) =< s(527)*s(463)
s(882) =< s(849)*aux(174)
s(884) =< s(849)*s(463)
s(1011) =< s(973)*s(977)
s(1011) =< s(978)+aux(170)
s(1012) =< s(1011)
s(1016) =< s(527)*aux(169)
s(1018) =< s(527)*s(974)
s(1044) =< s(973)*aux(169)
s(1045) =< s(973)*aux(172)
s(1046) =< s(973)*s(974)
s(1047) =< s(973)*s(528)
s(1088) =< aux(171)
s(1089) =< s(1088)*aux(169)
s(1090) =< s(1088)*aux(172)
s(1091) =< s(1088)*s(974)
s(1092) =< s(1088)*s(528)

  with precondition: [] 


Closed-form bounds of start(V,V2,V7,V19,V24): 
-------------------------------------
* Chain [57] with precondition: [] 
    - Upper bound: inf 
    - Complexity: infinity 

### Maximum cost of start(V,V2,V7,V19,V24): inf 
Asymptotic class: infinity 

Time statistics: 
-------------------------------------
* Partial evaluation computed in 41 ms.
* Invariants computed in 398 ms.
   - Backward Invariants 232 ms.
   - Transitive Invariants 32 ms.
* Refinement performed in 877 ms.
* Termination proved in 36 ms.
* Upper bounds computed in 3730 ms.
   - Equation cost structures 2082 ms.
   - Phase cost structures 956 ms.
   - Chain cost structures 240 ms.
   - Solving cost expressions 32 ms.
* Total analysis performed in 5143 ms.


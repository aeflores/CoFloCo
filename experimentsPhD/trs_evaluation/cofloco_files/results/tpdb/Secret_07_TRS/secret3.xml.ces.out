
Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. recursive [multiple] : [a/4]
1. recursive  : [app/3]
2. recursive  : [sum/2]
3. non_recursive  : [start/3]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into a/4
1. SCC is partially evaluated into app/3
2. SCC is partially evaluated into sum/2
3. SCC is partially evaluated into start/3

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations a/4 
* CE 13 is refined into CE [16] 
* CE 15 is refined into CE [17] 
* CE 14 is refined into CE [18] 
* CE 12 is refined into CE [19] 


#### Refined cost equations a/4 
* CE 16: a(V,V1,V12,Out) = 1+ a(V,W12,X12,Out)
     [W12>=0,V>=0,W12+1=V1,X12=1,V12=0] 
* CE 17: a(V,V1,V12,Out) = 1+ a(W12,V12,V12,Out)
     [W12>=0,V12>=0,W12+1=V,V1=0] 
* CE 18: a(V,V1,V12,Out) = 1+ a(V,W12,X12,Y12)+ a(V,Z12,Y12,Out)
     [Z12>=0,X12>=0,V>=0,Z12+1=W12,X12+1=V12,Z12+1=V1] 
* CE 19: a(V,V1,V12,Out) = 1
     [V12>=0,V12+1=Out,V1=0,V=0] 

### Cost equations --> "Loop" of a/4 
* CEs [19] --> Loop 13 
* CEs [18] --> Loop 14 
* CEs [16] --> Loop 15 
* CEs [17] --> Loop 16 

#### Loops of a/4 
* Loop 13: a(V,V1,V12,Out) [V12>=0,V12+1=Out,V1=0,V=0] 
* Loop 14: a(V,V1,V12,Out)->  a(V,V1',V12',Out')  a(V,A'2,Out',Out)
                  [A'2>=0,V12'>=0,V>=0,A'2+1=V1',V12'+1=V12,A'2+1=V1] 
* Loop 15: a(V,V1,V12,Out)->  a(V,V1',V12',Out)
                  [V1>=1,V>=0,V1=V1'+1,V12'=1,V12=0] 
* Loop 16: a(V,V1,V12,Out)->  a(A',V12,V12,Out)
                  [V12>=0,V>=1,V=A'+1,V1=0] 

### Ranking functions of CR a(V,V1,V12,Out) 

#### Partial ranking functions of CR a(V,V1,V12,Out) 
* Partial RF of phase [14,15,16]:
  - RF of loop [14:1]:
    V12 depends on loops [14:2,15:1] 
  - RF of loop [14:2,15:1]:
    V1 depends on loops [16:1] 
  - RF of loop [15:1]:
    -V12+1 depends on loops [14:1,14:2] 
  - RF of loop [16:1]:
    V


### Resulting Chains:a(V,V1,V12,Out) 
* [13]
* [multiple([14,15,16],[[13]])]


### Merging Chains  a/4 into  External patterns of execution 
* [[13]] --> 1 
* [[multiple([14,15,16],[[13]])]] --> 2 


### Specialization of cost equations app/3 
* CE 8 is refined into CE [20] 
* CE 6 is refined into CE [21] 
* CE 5 is refined into CE [22] 
* CE 7 is refined into CE [23] 


#### Refined cost equations app/3 
* CE 20: app(V,V1,Out) = 0
     [V1>=0,V>=0,Out=0] 
* CE 21: app(A,B,A) = 1
     [A>=0,B=0] 
* CE 22: app(A,B,B) = 1
     [B>=0,A=0] 
* CE 23: app(V,V1,Out) = 1+ app(W1,V1,X1)
     [V+X1>=Out,Out>=X1+1,V1>=0,V+X1=Out+W1] 

### Cost equations --> "Loop" of app/3 
* CEs [23] --> Loop 17 
* CEs [20] --> Loop 18 
* CEs [21] --> Loop 19 
* CEs [22] --> Loop 20 

#### Loops of app/3 
* Loop 17: app(V,V1,Out)->  app(V',V1,Out')
                  [V+Out'>=Out,Out>=Out'+1,V1>=0,V+Out'=Out+V'] 
* Loop 18: app(V,V1,Out) [V1>=0,V>=0,Out=0] 
* Loop 19: app(A,B,A) [A>=0,B=0] 
* Loop 20: app(A,B,B) [B>=0,A=0] 

### Ranking functions of CR app(V,V1,Out) 
* RF of phase [17]: [V]

#### Partial ranking functions of CR app(V,V1,Out) 
* Partial RF of phase [17]:
  - RF of loop [17:1]:
    V


### Resulting Chains:app(V,V1,Out) 
* [[17],20]
* [[17],19]
* [[17],18]
* [20]
* [19]
* [18]


### Merging Chains  app/3 into  External patterns of execution 
* [[20]] --> 1 
* [[19],[19,[17]]] --> 2 
* [[18]] --> 3 
* [[20,[17]]] --> 4 
* [[18,[17]]] --> 5 


### Specialization of cost equations sum/2 
* CE 9 is refined into CE [24] 
* CE 11 is refined into CE [25] 
* CE 10 is refined into CE [26,27] 


#### Refined cost equations sum/2 
* CE 24: sum(A,A) = 1
     [A>=1] 
* CE 25: sum(V,Out) = 0
     [V>=0,Out=0] 
* CE 26: sum(V,Out) = 1+ a(W,X,Y,Z):1+ sum(V,Out)
     [V>=2,Z=1,Y=0,X=0,W=0] 
* CE 27: sum(V,Out) = 1+ a(W,X,Y,Z):2+ sum(A1,Out)
     [W+X>=1,A1>=Z+1,Z>=X+1,X>=0,W>=0,W+X+A1+1=V+Z,Y=0] 

### Cost equations --> "Loop" of sum/2 
* CEs [27] --> Loop 21 
* CEs [26] --> Loop 22 
* CEs [24] --> Loop 23 
* CEs [25] --> Loop 24 

#### Loops of sum/2 
* Loop 21: sum(V,Out)->  sum(V',Out)
                  [V'>=2,V>=3] 
* Loop 22: sum(V,Out)->  sum(V,Out)
                  [V>=2] 
* Loop 23: sum(A,A) [A>=1] 
* Loop 24: sum(V,Out) [V>=0,Out=0] 

### Ranking functions of CR sum(V,Out) 

#### Partial ranking functions of CR sum(V,Out) 


### Resulting Chains:sum(V,Out) 
* [[21,22]]...
* [[21,22],24]
* [[21,22],23]
* [24]
* [23]


### Merging Chains  sum/2 into  External patterns of execution 
* [[24],[24,[21,22]]] --> 1 
* [[23]] --> 2 
* [[23,[21,22]]] --> 3 
* [[[21,22]]] --> 4 


### Specialization of cost equations start/3 
* CE 2 is refined into CE [28,29,30,31,32] 
* CE 3 is refined into CE [33,34,35,36] 
* CE 4 is refined into CE [37,38] 


#### Refined cost equations start/3 
* CE 28: start(V,V1,V12) = 0+ app(W12,V1,V1):1
     [V1>=0,W12=0,V=0] 
* CE 29: start(V,V1,V12) = 0+ app(V,W12,V):2
     [V>=0,W12=0,V1=0] 
* CE 30: start(V,V1,V12) = 0+ app(V,V1,W12):3
     [V1>=0,V>=0,W12=0] 
* CE 31: start(V,V1,V12) = 0+ app(V,W12,X12):4
     [X12>=V,V>=1,X12=V+W12,X12=V+V1] 
* CE 32: start(V,V1,V12) = 0+ app(V,V1,W12):5
     [V>=W12,W12>=1,V1>=0] 
* CE 33: start(V,V1,V12) = 0+ sum(V,W12):1
     [V>=0,W12=0] 
* CE 34: start(V,V1,V12) = 0+ sum(V,V):2
     [V>=1] 
* CE 35: start(V,V1,V12) = 0+ sum(V,W12):3
     [W12>=2,V>=2] 
* CE 36: start(V,V1,V12) = 0+ sum(V,W12):4
     [V>=2] 
* CE 37: start(V,V1,V12) = 0+ a(W12,X12,Y12,Z12):1
     [Z12>=1,Z12=Y12+1,Z12=V12+1,X12=0,W12=0,V1=0,V=0] 
* CE 38: start(V,V1,V12) = 0+ a(V,V1,V12,W12):2
     [W12>=V1+V12+1,V+V1>=1,V12>=0,V1>=0,V>=0] 

### Cost equations --> "Loop" of start/3 
* CEs [29] --> Loop 25 
* CEs [28,30,31,32,33,34,35,37,38] --> Loop 26 
* CEs [36] --> Loop 27 

#### Loops of start/3 
* Loop 25: start(V,V1,V12) [V>=0,V1=0] 
* Loop 26: start(V,V1,V12) [V>=0] 
* Loop 27: start(V,V1,V12) [V>=2] 

### Ranking functions of CR start(V,V1,V12) 

#### Partial ranking functions of CR start(V,V1,V12) 


### Resulting Chains:start(V,V1,V12) 
* [27]...
* [26]
* [25]


### Merging Chains  start/3 into  External patterns of execution 
* [[25],[26]] --> 1 
* [[27]] --> 2 


Computing Bounds
=====================================

#### Cost of loops [14,15,16] 

 * loop 14:a(V,V1,V12,Out) -> [a(V',V1',V12',Out'),a(V'2,V1'2,V12'2,Out'2)] 
1
 * loop 15:a(V,V1,V12,Out) -> [a(V',V1',V12',Out')] 
1
 * loop 16:a(V,V1,V12,Out) -> [a(V',V1',V12',Out')] 
1
#### Cost of phase [14,15,16]:a(V,V1,V12,Out) -> [] 
1*it(14)+1*it(15)+1*it(16)+1*it([13])+0
  Such that:aux(35) =< -V12+1
it(15) =< aux(35)

#### Cost of chains of a(V,V1,V12,Out):
* Chain [13]: 1
  with precondition: [V=0,V1=0,V12+1=Out,V12>=0] 

* Chain [multiple([14,15,16],[[13]])]: 1*it(14)+1*it(15)+1*it(16)+1*it([13])+0
  Such that:aux(35) =< -V12+1
it(15) =< aux(35)

  with precondition: [V>=0,V1>=0,V12>=0,V+V1>=1,Out>=V1+V12+1] 


#### Cost of loops [17] 

 * loop 17:app(V,V1,Out) -> [app(V',V1',Out')] 
1
#### Cost of phase [17]:app(V,V1,Out) -> [app(V',V1',Out')] 
1*it(17)+0
  Such that:it(17) =< V
it(17) =< V-V'

#### Cost of phase [17]:app(V,V1,Out) -> [app(V',V1',Out')] 
1*it(17)+0
  Such that:it(17) =< V
it(17) =< V-V'

#### Cost of phase [17]:app(V,V1,Out) -> [app(V',V1',Out')] 
1*it(17)+0
  Such that:it(17) =< V
it(17) =< V-V'

#### Cost of chains of app(V,V1,Out):
* Chain [[17],20]: 1*it(17)+1
  Such that:it(17) =< -V1+Out

  with precondition: [V+V1=Out,V>=1,V1>=0] 

* Chain [[17],19]: 1*it(17)+1
  Such that:it(17) =< Out

  with precondition: [V1=0,V=Out,V>=1] 

* Chain [[17],18]: 1*it(17)+0
  Such that:it(17) =< Out

  with precondition: [V1>=0,Out>=1,V>=Out] 

* Chain [20]: 1
  with precondition: [V=0,V1=Out,V1>=0] 

* Chain [19]: 1
  with precondition: [V1=0,V=Out,V>=0] 

* Chain [18]: 0
  with precondition: [Out=0,V>=0,V1>=0] 


#### Cost of loops [21,22] 

 * loop 21:sum(V,Out) -> [sum(V',Out')] 
1*s(8)+3*s(9)+1
  Such that:s(7) =< 1
s(8) =< s(7)

 * loop 22:sum(V,Out) -> [sum(V',Out')] 
2
#### Cost of phase [21,22]:sum(V,Out) -> [sum(V',Out')] 
6*it(21)+1*s(10)+0
#### Cost of phase [21,22]:sum(V,Out) -> [sum(V',Out')] 
6*it(21)+1*s(10)+0
#### Cost of phase [21,22]:sum(V,Out) -> [sum(V',Out')] 
6*it(21)+1*s(10)+0
#### Cost of chains of sum(V,Out):
* Chain [[21,22]]...: 7*it(21)+0
  with precondition: [V>=2] 

* Chain [[21,22],24]: 7*it(21)+0
  with precondition: [Out=0,V>=2] 

* Chain [[21,22],23]: 7*it(21)+1
  with precondition: [V>=2,Out>=2] 

* Chain [24]: 0
  with precondition: [Out=0,V>=0] 

* Chain [23]: 1
  with precondition: [V=Out,V>=1] 


#### Cost of chains of start(V,V1,V12):
* Chain [27]...: 7*s(14)+0
  with precondition: [V>=2] 

* Chain [26]: 2*s(15)+11*s(17)+1*s(20)+1
  Such that:s(19) =< -V12+1
aux(38) =< V
s(15) =< aux(38)
s(20) =< s(19)

  with precondition: [V>=0] 

* Chain [25]: 1*s(24)+1
  Such that:s(24) =< V

  with precondition: [V1=0,V>=0] 


Closed-form bounds of start(V,V1,V12): 
-------------------------------------
* Chain [27]... with precondition: [V>=2] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [26] with precondition: [V>=0] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [25] with precondition: [V1=0,V>=0] 
    - Upper bound: V+1 
    - Complexity: n 

### Maximum cost of start(V,V1,V12): inf 
Asymptotic class: infinity 

Time statistics: 
-------------------------------------
* Partial evaluation computed in 33 ms.
* Invariants computed in 105 ms.
   - Backward Invariants 51 ms.
   - Transitive Invariants 22 ms.
* Refinement performed in 178 ms.
* Termination proved in 38 ms.
* Upper bounds computed in 386 ms.
   - Equation cost structures 53 ms.
   - Phase cost structures 312 ms.
   - Chain cost structures 33 ms.
   - Solving cost expressions 2 ms.
* Total analysis performed in 819 ms.



Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. recursive  : [f0/4,f1/4,f2/4]
1. recursive  : [ge/3]
2. recursive  : [p/2]
3. recursive  : [inc/2]
4. recursive  : [isZero/2]
5. recursive  : [ifPlus/4,plus/3]
6. recursive  : [ifTimes/6,timesIter/5]
7. non_recursive  : [times/3]
8. non_recursive  : [start/5]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into f2/4
1. SCC is partially evaluated into ge/3
2. SCC is partially evaluated into p/2
3. SCC is partially evaluated into inc/2
4. SCC is partially evaluated into isZero/2
5. SCC is partially evaluated into plus/3
6. SCC is partially evaluated into timesIter/5
7. SCC is completely evaluated into other SCCs
8. SCC is partially evaluated into start/5

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations f2/4 
* CE 33 is refined into CE [42] 
* CE 30 is refined into CE [43] 
* CE 32 is refined into CE [44] 
* CE 31 is refined into CE [45] 


#### Refined cost equations f2/4 
* CE 42: f2(V,V1,V6,Out) = 0
     [V6>=0,V1>=0,V>=0,Out=0] 
* CE 43: f2(V,V1,V6,Out) = 2
     [V6>=0,V>=0,Out=2,V1=1] 
* CE 44: f2(V,V1,V6,Out) = 3
     [V6>=0,Out=1,V1=1,V=0] 
* CE 45: f2(V,V1,V6,Out) = 3+ f2(V6,V6,V6,Out)
     [V6>=0,V1=1,V=0] 

### Cost equations --> "Loop" of f2/4 
* CEs [45] --> Loop 26 
* CEs [42] --> Loop 27 
* CEs [43] --> Loop 28 
* CEs [44] --> Loop 29 

#### Loops of f2/4 
* Loop 26: f2(V,V1,V6,Out)->  f2(V6,V6,V6,Out)
                  [V6>=0,V1=1,V=0] 
* Loop 27: f2(V,V1,V6,Out) [V6>=0,V1>=0,V>=0,Out=0] 
* Loop 28: f2(V,V1,V6,Out) [V6>=0,V>=0,Out=2,V1=1] 
* Loop 29: f2(V,V1,V6,Out) [V6>=0,Out=1,V1=1,V=0] 

### Ranking functions of CR f2(V,V1,V6,Out) 

#### Partial ranking functions of CR f2(V,V1,V6,Out) 


### Resulting Chains:f2(V,V1,V6,Out) 
* [29]
* [28]
* [27]
* [26,28]
* [26,27]


### Merging Chains  f2/4 into  External patterns of execution 
* [[28,26],[28]] --> 1 
* [[27,26],[27]] --> 2 
* [[29]] --> 3 


### Specialization of cost equations ge/3 
* CE 41 is refined into CE [46] 
* CE 38 is refined into CE [47] 
* CE 39 is refined into CE [48] 
* CE 40 is refined into CE [49] 


#### Refined cost equations ge/3 
* CE 46: ge(V,V1,Out) = 0
     [V1>=0,V>=0,Out=0] 
* CE 47: ge(V,V1,Out) = 1
     [V>=0,Out=2,V1=0] 
* CE 48: ge(V,V1,Out) = 1
     [V1>=1,Out=1,V=0] 
* CE 49: ge(V,V1,Out) = 1+ ge(W1,X1,Out)
     [X1>=0,W1>=0,X1+1=V1,W1+1=V] 

### Cost equations --> "Loop" of ge/3 
* CEs [49] --> Loop 30 
* CEs [46] --> Loop 31 
* CEs [47] --> Loop 32 
* CEs [48] --> Loop 33 

#### Loops of ge/3 
* Loop 30: ge(V,V1,Out)->  ge(V',V1',Out)
                  [V1'>=0,V'>=0,V1'+1=V1,V'+1=V] 
* Loop 31: ge(V,V1,Out) [V1>=0,V>=0,Out=0] 
* Loop 32: ge(V,V1,Out) [V>=0,Out=2,V1=0] 
* Loop 33: ge(V,V1,Out) [V1>=1,Out=1,V=0] 

### Ranking functions of CR ge(V,V1,Out) 
* RF of phase [30]: [V,V1]

#### Partial ranking functions of CR ge(V,V1,Out) 
* Partial RF of phase [30]:
  - RF of loop [30:1]:
    V
    V1


### Resulting Chains:ge(V,V1,Out) 
* [[30],33]
* [[30],32]
* [[30],31]
* [33]
* [32]
* [31]


### Merging Chains  ge/3 into  External patterns of execution 
* [[33]] --> 1 
* [[32]] --> 2 
* [[31],[31,[30]]] --> 3 
* [[33,[30]]] --> 4 
* [[32,[30]]] --> 5 


### Specialization of cost equations p/2 
* CE 27 is refined into CE [50] 
* CE 26 is refined into CE [51] 
* CE 29 is refined into CE [52] 
* CE 28 is refined into CE [53] 


#### Refined cost equations p/2 
* CE 50: p(V,Out) = 1
     [Out>=0,Out+1=V] 
* CE 51: p(V,Out) = 1
     [Out=0,V=0] 
* CE 52: p(V,Out) = 0
     [V>=0,Out=0] 
* CE 53: p(V,Out) = 1+ p(W,X)
     [V>=2,V=W+1,X+1=Out] 

### Cost equations --> "Loop" of p/2 
* CEs [53] --> Loop 34 
* CEs [50] --> Loop 35 
* CEs [51,52] --> Loop 36 

#### Loops of p/2 
* Loop 34: p(V,Out)->  p(V',Out')
                  [V>=2,Out=Out'+1,V=V'+1] 
* Loop 35: p(V,Out) [V>=1,V=Out+1] 
* Loop 36: p(V,Out) [V>=0,Out=0] 

### Ranking functions of CR p(V,Out) 
* RF of phase [34]: [V-1]

#### Partial ranking functions of CR p(V,Out) 
* Partial RF of phase [34]:
  - RF of loop [34:1]:
    V-1


### Resulting Chains:p(V,Out) 
* [[34],36]
* [[34],35]
* [36]
* [35]


### Merging Chains  p/2 into  External patterns of execution 
* [[36]] --> 1 
* [[35],[35,[34]]] --> 2 
* [[36,[34]]] --> 3 


### Specialization of cost equations inc/2 
* CE 18 is refined into CE [54] 
* CE 19 is refined into CE [55] 


#### Refined cost equations inc/2 
* CE 54: inc(V,Out) = 1
     [V>=0,V+1=Out] 
* CE 55: inc(V,Out) = 1+ inc(W,X)
     [W>=0,X+1=Out,W+1=V] 

### Cost equations --> "Loop" of inc/2 
* CEs [55] --> Loop 37 
* CEs [54] --> Loop 38 

#### Loops of inc/2 
* Loop 37: inc(V,Out)->  inc(V',Out')
                  [V'>=0,Out=Out'+1,V'+1=V] 
* Loop 38: inc(V,Out) [V>=0,V+1=Out] 

### Ranking functions of CR inc(V,Out) 
* RF of phase [37]: [V]

#### Partial ranking functions of CR inc(V,Out) 
* Partial RF of phase [37]:
  - RF of loop [37:1]:
    V


### Resulting Chains:inc(V,Out) 
* [[37],38]
* [38]


### Merging Chains  inc/2 into  External patterns of execution 
* [[38],[38,[37]]] --> 1 


### Specialization of cost equations isZero/2 
* CE 37 is refined into CE [56] 
* CE 35 is refined into CE [57] 
* CE 34 is refined into CE [58] 
* CE 36 is refined into CE [59] 


#### Refined cost equations isZero/2 
* CE 56: isZero(V,Out) = 0
     [V>=0,Out=0] 
* CE 57: isZero(V,Out) = 1
     [Out=1,V=1] 
* CE 58: isZero(V,Out) = 1
     [Out=2,V=0] 
* CE 59: isZero(V,Out) = 1+ isZero(W,Out)
     [V>=2,V=W+1] 

### Cost equations --> "Loop" of isZero/2 
* CEs [59] --> Loop 39 
* CEs [56] --> Loop 40 
* CEs [57] --> Loop 41 
* CEs [58] --> Loop 42 

#### Loops of isZero/2 
* Loop 39: isZero(V,Out)->  isZero(V',Out)
                  [V>=2,V=V'+1] 
* Loop 40: isZero(V,Out) [V>=0,Out=0] 
* Loop 41: isZero(V,Out) [Out=1,V=1] 
* Loop 42: isZero(V,Out) [Out=2,V=0] 

### Ranking functions of CR isZero(V,Out) 
* RF of phase [39]: [V-1]

#### Partial ranking functions of CR isZero(V,Out) 
* Partial RF of phase [39]:
  - RF of loop [39:1]:
    V-1


### Resulting Chains:isZero(V,Out) 
* [[39],41]
* [[39],40]
* [42]
* [41]
* [40]


### Merging Chains  isZero/2 into  External patterns of execution 
* [[42]] --> 1 
* [[41]] --> 2 
* [[40],[40,[39]]] --> 3 
* [[41,[39]]] --> 4 


### Specialization of cost equations plus/3 
* CE 20 is refined into CE [60,61,62,63] 
* CE 22 is refined into CE [64,65,66] 
* CE 21 is refined into CE [67,68,69,70,71] 


#### Refined cost equations plus/3 
* CE 60: plus(V,V1,Out) = 1+ isZero(W1,X1):1+ inc(Y1,Z1):1
     [Z1>=1,Z1=Y1+1,Z1=V1+1,X1=2,W1=0,Out=0,V=0] 
* CE 61: plus(V,V1,Out) = 1+ isZero(W1,X1):2+ inc(Y1,Z1):1
     [Z1>=1,Z1=Y1+1,Z1=V1+1,X1=1,W1=1,Out=0,V=1] 
* CE 62: plus(V,V1,Out) = 1+ isZero(V,W1):3+ inc(X1,Y1):1
     [Y1>=1,V>=0,Y1=X1+1,Y1=V1+1,W1=0,Out=0] 
* CE 63: plus(V,V1,Out) = 1+ isZero(V,W1):4+ inc(X1,Y1):1
     [Y1>=1,V>=2,Y1=X1+1,Y1=V1+1,W1=1,Out=0] 
* CE 64: plus(V,V1,Out) = 2+ isZero(W1,X1):1+ inc(Y1,Z1):1+ p(Z1,A2):1
     [Z1>=1,Z1=Y1+1,Z1=V1+1,A2=0,X1=2,W1=0,Out=0,V=0] 
* CE 65: plus(A,B,B) = 2+ isZero(C,D):1+ inc(B,E):1+ p(F,B):2
     [B>=0,B+1=F,B+1=E,D=2,C=0,A=0] 
* CE 66: plus(V,V1,Out) = 2+ isZero(W1,X1):1+ inc(Y1,Z1):1+ p(Z1,Out):3
     [Z1>=Out+1,Out>=1,Z1=Y1+1,Z1=V1+1,X1=2,W1=0,V=0] 
* CE 67: plus(V,V1,Out) = 2+ isZero(W1,X1):2+ inc(Y1,Z1):1+ p(A2,B2):1+ plus(C2,Z1,Out)
     [Z1>=1,Z1=Y1+1,Z1=V1+1,C2=0,B2=0,A2=1,X1=1,W1=1,V=1] 
* CE 68: plus(V,V1,Out) = 2+ isZero(W1,X1):2+ inc(Y1,Z1):1+ p(A2,B2):2+ plus(C2,Z1,Out)
     [Z1>=1,Z1=Y1+1,Z1=V1+1,C2=0,B2=0,A2=1,X1=1,W1=1,V=1] 
* CE 69: plus(V,V1,Out) = 2+ isZero(V,W1):4+ inc(X1,Y1):1+ p(V,Z1):1+ plus(A2,Y1,Out)
     [V>=2,Y1>=1,Y1=X1+1,Y1=V1+1,A2=0,Z1=0,W1=1] 
* CE 70: plus(V,V1,Out) = 2+ isZero(W1,X1):4+ inc(Y1,Z1):1+ p(A2,B2):2+ plus(B2,Z1,Out)
     [B2>=1,Z1>=1,B2+1=A2,Z1=Y1+1,B2+1=W1,Z1=V1+1,B2+1=V,X1=1] 
* CE 71: plus(V,V1,Out) = 2+ isZero(V,W1):4+ inc(X1,Y1):1+ p(V,Z1):3+ plus(Z1,Y1,Out)
     [V>=Z1+1,Z1>=1,Y1>=1,Y1=X1+1,Y1=V1+1,W1=1] 

### Cost equations --> "Loop" of plus/3 
* CEs [70,71] --> Loop 43 
* CEs [69] --> Loop 44 
* CEs [67,68] --> Loop 45 
* CEs [61] --> Loop 46 
* CEs [66] --> Loop 47 
* CEs [65] --> Loop 48 
* CEs [60,62,63,64] --> Loop 49 

#### Loops of plus/3 
* Loop 43: plus(V,V1,Out)->  plus(V',V1',Out)
                  [V>=V'+1,V'>=1,V1>=0,V1+1=V1'] 
* Loop 44: plus(V,V1,Out)->  plus(V',V1',Out)
                  [V1>=0,V>=2,V1+1=V1',V'=0] 
* Loop 45: plus(V,V1,Out)->  plus(V',V1',Out)
                  [V1>=0,V1+1=V1',V'=0,V=1] 
* Loop 46: plus(V,V1,Out) [V1>=0,Out=0,V=1] 
* Loop 47: plus(V,V1,Out) [V1>=Out,Out>=1,V=0] 
* Loop 48: plus(A,B,B) [B>=0,A=0] 
* Loop 49: plus(V,V1,Out) [V1>=0,V>=0,Out=0] 

### Ranking functions of CR plus(V,V1,Out) 
* RF of phase [43]: [V-1]

#### Partial ranking functions of CR plus(V,V1,Out) 
* Partial RF of phase [43]:
  - RF of loop [43:1]:
    V-1


### Resulting Chains:plus(V,V1,Out) 
* [[43],49]
* [[43],46]
* [[43],45,49]
* [[43],45,48]
* [[43],45,47]
* [[43],44,49]
* [[43],44,48]
* [[43],44,47]
* [49]
* [48]
* [47]
* [46]
* [45,49]
* [45,48]
* [45,47]
* [44,49]
* [44,48]
* [44,47]


### Merging Chains  plus/3 into  External patterns of execution 
* [[48]] --> 1 
* [[47]] --> 2 
* [[49,44],[49,45],[46],[49],[49,44,[43]],[49,45,[43]],[46,[43]],[49,[43]]] --> 3 
* [[47,45],[48,45]] --> 4 
* [[47,44],[48,44],[47,44,[43]],[48,44,[43]],[47,45,[43]],[48,45,[43]]] --> 5 


### Specialization of cost equations timesIter/5 
* CE 25 is refined into CE [72,73] 
* CE 23 is refined into CE [74,75,76,77,78] 
* CE 24 is refined into CE [79,80,81,82,83,84,85,86,87,88] 


#### Refined cost equations timesIter/5 
* CE 72: timesIter(A,B,C,D,D) = 2+ ge(A,E,F):2
     [A>=0,D>=0,C>=0,F=2,E=0,B=0] 
* CE 73: timesIter(A,B,C,D,D) = 2+ ge(A,B,E):5
     [A>=B,B>=1,D>=0,C>=0,E=2] 
* CE 74: timesIter(V,V1,V6,V14,Out) = 1+ ge(W14,V1,X14):1
     [V1>=1,V14>=0,V6>=0,X14=1,W14=0,Out=0,V=0] 
* CE 75: timesIter(V,V1,V6,V14,Out) = 1+ ge(V,W14,X14):2
     [V>=0,V14>=0,V6>=0,X14=2,W14=0,Out=0,V1=0] 
* CE 76: timesIter(V,V1,V6,V14,Out) = 1+ ge(V,V1,W14):3
     [V1>=0,V>=0,V14>=0,V6>=0,W14=0,Out=0] 
* CE 77: timesIter(V,V1,V6,V14,Out) = 1+ ge(V,V1,W14):4
     [V1>=V+1,V>=1,V14>=0,V6>=0,W14=1,Out=0] 
* CE 78: timesIter(V,V1,V6,V14,Out) = 1+ ge(V,V1,W14):5
     [V>=V1,V1>=1,V14>=0,V6>=0,W14=2,Out=0] 
* CE 79: timesIter(V,V1,V6,V14,Out) = 2+ ge(W14,V1,X14):1+ inc(Y14,Z14):1+ plus(A15,V6,V6):1+ timesIter(B15,V1,V6,V6,Out)
     [V6>=0,V1>=1,B15=1,A15=0,Z14=1,Y14=0,X14=1,W14=0,V14=0,V=0] 
* CE 80: timesIter(V,V1,V6,V14,Out) = 2+ ge(W14,V1,X14):1+ inc(Y14,Z14):1+ plus(A15,V6,B15):2+ timesIter(C15,V1,V6,B15,Out)
     [V6>=B15,B15>=1,V1>=1,C15=1,A15=0,Z14=1,Y14=0,X14=1,W14=0,V14=0,V=0] 
* CE 81: timesIter(V,V1,V6,V14,Out) = 2+ ge(W14,V1,X14):1+ inc(Y14,Z14):1+ plus(V14,V6,A15):3+ timesIter(B15,V1,V6,C15,Out)
     [V6>=0,V14>=0,V1>=1,C15=0,B15=1,A15=0,Z14=1,Y14=0,X14=1,W14=0,V=0] 
* CE 82: timesIter(V,V1,V6,V14,Out) = 2+ ge(W14,V1,X14):1+ inc(Y14,Z14):1+ plus(A15,V6,B15):4+ timesIter(C15,V1,V6,B15,Out)
     [V6+1>=B15,B15>=1,V1>=1,C15=1,A15=1,Z14=1,Y14=0,X14=1,W14=0,V14=1,V=0] 
* CE 83: timesIter(V,V1,V6,V14,Out) = 2+ ge(W14,V1,X14):1+ inc(Y14,Z14):1+ plus(V14,V6,A15):5+ timesIter(B15,V1,V6,A15,Out)
     [V6+V14>=A15,A15>=1,V6>=0,V14>=2,V1>=1,B15=1,Z14=1,Y14=0,X14=1,W14=0,V=0] 
* CE 84: timesIter(V,V1,V6,V14,Out) = 2+ ge(W14,V1,X14):4+ inc(Y14,Z14):1+ plus(A15,V6,V6):1+ timesIter(Z14,V1,V6,V6,Out)
     [V1>=Z14,V6>=0,Z14>=2,Z14=Y14+1,Z14=W14+1,Z14=V+1,A15=0,X14=1,V14=0] 
* CE 85: timesIter(V,V1,V6,V14,Out) = 2+ ge(W14,V1,X14):4+ inc(Y14,Z14):1+ plus(A15,V6,B15):2+ timesIter(Z14,V1,V6,B15,Out)
     [V6>=B15,V1>=Z14,B15>=1,Z14>=2,Z14=Y14+1,Z14=W14+1,Z14=V+1,A15=0,X14=1,V14=0] 
* CE 86: timesIter(V,V1,V6,V14,Out) = 2+ ge(W14,V1,X14):4+ inc(Y14,Z14):1+ plus(V14,V6,A15):3+ timesIter(Z14,V1,V6,B15,Out)
     [V1>=Z14,V6>=0,V14>=0,Z14>=2,Z14=Y14+1,Z14=W14+1,Z14=V+1,B15=0,A15=0,X14=1] 
* CE 87: timesIter(V,V1,V6,V14,Out) = 2+ ge(W14,V1,X14):4+ inc(Y14,Z14):1+ plus(A15,V6,B15):4+ timesIter(Z14,V1,V6,B15,Out)
     [V6+1>=B15,V1>=Z14,B15>=1,Z14>=2,Z14=Y14+1,Z14=W14+1,Z14=V+1,A15=1,X14=1,V14=1] 
* CE 88: timesIter(V,V1,V6,V14,Out) = 2+ ge(W14,V1,X14):4+ inc(Y14,Z14):1+ plus(V14,V6,A15):5+ timesIter(Z14,V1,V6,A15,Out)
     [V6+V14>=A15,V1>=Z14,A15>=1,V6>=0,V14>=2,Z14>=2,Z14=Y14+1,Z14=W14+1,Z14=V+1,X14=1] 

### Cost equations --> "Loop" of timesIter/5 
* CEs [88] --> Loop 50 
* CEs [86] --> Loop 51 
* CEs [87] --> Loop 52 
* CEs [85] --> Loop 53 
* CEs [84] --> Loop 54 
* CEs [83] --> Loop 55 
* CEs [81] --> Loop 56 
* CEs [82] --> Loop 57 
* CEs [80] --> Loop 58 
* CEs [79] --> Loop 59 
* CEs [73] --> Loop 60 
* CEs [72] --> Loop 61 
* CEs [75] --> Loop 62 
* CEs [74,76,77,78] --> Loop 63 

#### Loops of timesIter/5 
* Loop 50: timesIter(V,V1,V6,V14,Out)->  timesIter(V',V1,V6,V14',Out)
                  [V6+V14>=V14',V1>=V+1,V14'>=1,V14>=2,V6>=0,V>=1,V+1=V'] 
* Loop 51: timesIter(V,V1,V6,V14,Out)->  timesIter(V',V1,V6,V14',Out)
                  [V1>=V+1,V14>=0,V6>=0,V>=1,V+1=V',V14'=0] 
* Loop 52: timesIter(V,V1,V6,V14,Out)->  timesIter(V',V1,V6,V14',Out)
                  [V6+1>=V14',V1>=V+1,V14'>=1,V>=1,V+1=V',V14=1] 
* Loop 53: timesIter(V,V1,V6,V14,Out)->  timesIter(V',V1,V6,V14',Out)
                  [V6>=V14',V1>=V+1,V14'>=1,V>=1,V+1=V',V14=0] 
* Loop 54: timesIter(V,V1,V6,V14,Out)->  timesIter(A',V1,V6,V6,Out)
                  [V1>=V+1,V6>=0,V>=1,V+1=A',V14=0] 
* Loop 55: timesIter(V,V1,V6,V14,Out)->  timesIter(V',V1,V6,V14',Out)
                  [V6+V14>=V14',V14'>=1,V14>=2,V6>=0,V1>=1,V'=1,V=0] 
* Loop 56: timesIter(V,V1,V6,V14,Out)->  timesIter(V',V1,V6,V14',Out)
                  [V14>=0,V6>=0,V1>=1,V14'=0,V'=1,V=0] 
* Loop 57: timesIter(V,V1,V6,V14,Out)->  timesIter(V',V1,V6,V14',Out)
                  [V6+1>=V14',V14'>=1,V1>=1,V'=1,V14=1,V=0] 
* Loop 58: timesIter(V,V1,V6,V14,Out)->  timesIter(V',V1,V6,V14',Out)
                  [V6>=V14',V14'>=1,V1>=1,V'=1,V14=0,V=0] 
* Loop 59: timesIter(V,V1,V6,V14,Out)->  timesIter(A',V1,V6,V6,Out)
                  [V6>=0,V1>=1,A'=1,V14=0,V=0] 
* Loop 60: timesIter(A,B,C,D,D) [A>=B,D>=0,C>=0,B>=1] 
* Loop 61: timesIter(A,B,C,D,D) [D>=0,C>=0,A>=0,B=0] 
* Loop 62: timesIter(V,V1,V6,V14,Out) [V14>=0,V6>=0,V>=0,Out=0,V1=0] 
* Loop 63: timesIter(V,V1,V6,V14,Out) [V14>=0,V6>=0,V1>=0,V>=0,Out=0] 

### Ranking functions of CR timesIter(V,V1,V6,V14,Out) 
* RF of phase [50,51,52,53,54]: [-V+V1]

#### Partial ranking functions of CR timesIter(V,V1,V6,V14,Out) 
* Partial RF of phase [50,51,52,53,54]:
  - RF of loop [50:1,51:1,52:1,53:1,54:1]:
    -V+V1
  - RF of loop [53:1]:
    -V14+1 depends on loops [50:1,51:1] 


### Resulting Chains:timesIter(V,V1,V6,V14,Out) 
* [[50,51,52,53,54],63]
* [[50,51,52,53,54],60]
* [63]
* [62]
* [61]
* [60]
* [59,[50,51,52,53,54],63]
* [59,[50,51,52,53,54],60]
* [59,63]
* [59,60]
* [58,[50,51,52,53,54],63]
* [58,[50,51,52,53,54],60]
* [58,63]
* [58,60]
* [57,[50,51,52,53,54],63]
* [57,[50,51,52,53,54],60]
* [57,63]
* [57,60]
* [56,[50,51,52,53,54],63]
* [56,[50,51,52,53,54],60]
* [56,63]
* [56,60]
* [55,[50,51,52,53,54],63]
* [55,[50,51,52,53,54],60]
* [55,63]
* [55,60]


### Merging Chains  timesIter/5 into  External patterns of execution 
* [[60,59]] --> 1 
* [[60,58]] --> 2 
* [[60,57]] --> 3 
* [[63,55],[63,[50,51,52,53,54],55],[60,56],[63,56],[63,[50,51,52,53,54],56],[63],[63,[50,51,52,53,54]]] --> 4 
* [[60,55]] --> 5 
* [[63,58],[63,[50,51,52,53,54],58],[63,59],[63,[50,51,52,53,54],59]] --> 6 
* [[60,[50,51,52,53,54],55],[60,[50,51,52,53,54],56],[60,[50,51,52,53,54],58],[60,[50,51,52,53,54],59]] --> 7 
* [[63,57],[63,[50,51,52,53,54],57]] --> 8 
* [[60,[50,51,52,53,54],57]] --> 9 
* [[62]] --> 10 
* [[61]] --> 11 
* [[60]] --> 12 
* [[60,[50,51,52,53,54]]] --> 13 


### Specialization of cost equations start/5 
* CE 6 is refined into CE [89,90,91] 
* CE 3 is refined into CE [92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116] 
* CE 5 is refined into CE [117,118,119,120,121,122,123,124,125,126,127] 
* CE 2 is refined into CE [128] 
* CE 4 is refined into CE [129] 
* CE 7 is refined into CE [130,131,132] 
* CE 8 is refined into CE [133] 
* CE 9 is refined into CE [134,135,136] 
* CE 10 is refined into CE [137,138,139,140,141] 
* CE 11 is refined into CE [142,143,144,145,146,147,148] 
* CE 12 is refined into CE [149,150,151,152,153,154,155,156,157,158,159,160,161] 
* CE 13 is refined into CE [162,163,164,165] 
* CE 14 is refined into CE [166] 
* CE 15 is refined into CE [167,168,169] 
* CE 16 is refined into CE [170,171,172,173,174] 
* CE 17 is refined into CE [175,176,177] 


#### Refined cost equations start/5 
* CE 89: start(V,V1,V6,V14,V19) = 1+ p(V6,W19):1
     [V6>=0,V1>=0,W19=0,V=2] 
* CE 90: start(V,V1,V6,V14,V19) = 1+ p(W19,X19):2
     [X19>=0,V1>=0,X19+1=W19,X19+1=V6,V=2] 
* CE 91: start(V,V1,V6,V14,V19) = 1+ p(V6,W19):3
     [V6>=W19+1,W19>=1,V1>=0,V=2] 
* CE 92: start(V,V1,V6,V14,V19) = 1+ inc(W19,X19):1+ plus(Y19,V14,V14):1+ timesIter(X19,V6,V14,V14,Z19):4
     [V14>=0,V6>=0,X19>=1,X19=W19+1,X19=V1+1,Z19=0,Y19=0,V19=0,V=1] 
* CE 93: start(V,V1,V6,V14,V19) = 1+ inc(W19,X19):1+ plus(Y19,V14,V14):1+ timesIter(X19,Z19,V14,V14,A20):10
     [V14>=0,X19>=1,X19=W19+1,X19=V1+1,A20=0,Z19=0,Y19=0,V19=0,V6=0,V=1] 
* CE 94: start(V,V1,V6,V14,V19) = 1+ inc(W19,X19):1+ plus(Y19,V14,V14):1+ timesIter(X19,Z19,V14,V14,V14):11
     [V14>=0,X19>=1,X19=W19+1,X19=V1+1,Z19=0,Y19=0,V19=0,V6=0,V=1] 
* CE 95: start(V,V1,V6,V14,V19) = 1+ inc(W19,X19):1+ plus(Y19,V14,V14):1+ timesIter(X19,V6,V14,V14,V14):12
     [X19>=V6,V14>=0,V6>=1,X19=W19+1,X19=V1+1,Y19=0,V19=0,V=1] 
* CE 96: start(V,V1,V6,V14,V19) = 1+ inc(W19,X19):1+ plus(Y19,V14,V14):1+ timesIter(X19,V6,V14,V14,Z19):13
     [V6>=X19+1,Z19>=0,V14>=0,X19>=1,X19=W19+1,X19=V1+1,Y19=0,V19=0,V=1] 
* CE 97: start(V,V1,V6,V14,V19) = 1+ inc(W19,X19):1+ plus(Y19,V14,Z19):2+ timesIter(X19,V6,V14,Z19,A20):4
     [V14>=Z19,Z19>=1,V6>=0,X19>=1,X19=W19+1,X19=V1+1,A20=0,Y19=0,V19=0,V=1] 
* CE 98: start(V,V1,V6,V14,V19) = 1+ inc(W19,X19):1+ plus(Y19,V14,Z19):2+ timesIter(X19,A20,V14,Z19,B20):10
     [V14>=Z19,Z19>=1,X19>=1,X19=W19+1,X19=V1+1,B20=0,A20=0,Y19=0,V19=0,V6=0,V=1] 
* CE 99: start(V,V1,V6,V14,V19) = 1+ inc(W19,X19):1+ plus(Y19,V14,Z19):2+ timesIter(X19,A20,V14,Z19,Z19):11
     [V14>=Z19,Z19>=1,X19>=1,X19=W19+1,X19=V1+1,A20=0,Y19=0,V19=0,V6=0,V=1] 
* CE 100: start(V,V1,V6,V14,V19) = 1+ inc(W19,X19):1+ plus(Y19,V14,Z19):2+ timesIter(X19,V6,V14,Z19,Z19):12
     [V14>=Z19,X19>=V6,Z19>=1,V6>=1,X19=W19+1,X19=V1+1,Y19=0,V19=0,V=1] 
* CE 101: start(V,V1,V6,V14,V19) = 1+ inc(W19,X19):1+ plus(Y19,V14,Z19):2+ timesIter(X19,V6,V14,Z19,A20):13
     [V14>=Z19,V6>=X19+1,A20>=0,Z19>=1,X19>=1,X19=W19+1,X19=V1+1,Y19=0,V19=0,V=1] 
* CE 102: start(V,V1,V6,V14,V19) = 1+ inc(W19,X19):1+ plus(V19,V14,Y19):3+ timesIter(X19,V6,V14,Z19,A20):4
     [V14>=0,V6>=0,X19>=1,V19>=0,X19=W19+1,X19=V1+1,A20=0,Z19=0,Y19=0,V=1] 
* CE 103: start(V,V1,V6,V14,V19) = 1+ inc(W19,X19):1+ plus(V19,V14,Y19):3+ timesIter(X19,Z19,V14,A20,B20):10
     [V14>=0,X19>=1,V19>=0,X19=W19+1,X19=V1+1,B20=0,A20=0,Z19=0,Y19=0,V6=0,V=1] 
* CE 104: start(V,V1,V6,V14,V19) = 1+ inc(W19,X19):1+ plus(V19,V14,Y19):3+ timesIter(X19,Z19,V14,A20,B20):11
     [V14>=0,X19>=1,V19>=0,X19=W19+1,X19=V1+1,B20=0,A20=0,Z19=0,Y19=0,V6=0,V=1] 
* CE 105: start(V,V1,V6,V14,V19) = 1+ inc(W19,X19):1+ plus(V19,V14,Y19):3+ timesIter(X19,V6,V14,Z19,A20):12
     [X19>=V6,V14>=0,V6>=1,V19>=0,X19=W19+1,X19=V1+1,A20=0,Z19=0,Y19=0,V=1] 
* CE 106: start(V,V1,V6,V14,V19) = 1+ inc(W19,X19):1+ plus(V19,V14,Y19):3+ timesIter(X19,V6,V14,Z19,A20):13
     [V6>=X19+1,A20>=0,V14>=0,X19>=1,V19>=0,X19=W19+1,X19=V1+1,Z19=0,Y19=0,V=1] 
* CE 107: start(V,V1,V6,V14,V19) = 1+ inc(W19,X19):1+ plus(Y19,V14,Z19):4+ timesIter(X19,V6,V14,Z19,A20):4
     [V14+1>=Z19,Z19>=1,V6>=0,X19>=1,X19=W19+1,X19=V1+1,A20=0,Y19=1,V19=1,V=1] 
* CE 108: start(V,V1,V6,V14,V19) = 1+ inc(W19,X19):1+ plus(Y19,V14,Z19):4+ timesIter(X19,A20,V14,Z19,B20):10
     [V14+1>=Z19,Z19>=1,X19>=1,X19=W19+1,X19=V1+1,B20=0,A20=0,Y19=1,V19=1,V6=0,V=1] 
* CE 109: start(V,V1,V6,V14,V19) = 1+ inc(W19,X19):1+ plus(Y19,V14,Z19):4+ timesIter(X19,A20,V14,Z19,Z19):11
     [V14+1>=Z19,Z19>=1,X19>=1,X19=W19+1,X19=V1+1,A20=0,Y19=1,V19=1,V6=0,V=1] 
* CE 110: start(V,V1,V6,V14,V19) = 1+ inc(W19,X19):1+ plus(Y19,V14,Z19):4+ timesIter(X19,V6,V14,Z19,Z19):12
     [V14+1>=Z19,X19>=V6,Z19>=1,V6>=1,X19=W19+1,X19=V1+1,Y19=1,V19=1,V=1] 
* CE 111: start(V,V1,V6,V14,V19) = 1+ inc(W19,X19):1+ plus(Y19,V14,Z19):4+ timesIter(X19,V6,V14,Z19,A20):13
     [V14+1>=Z19,V6>=X19+1,A20>=0,Z19>=1,X19>=1,X19=W19+1,X19=V1+1,Y19=1,V19=1,V=1] 
* CE 112: start(V,V1,V6,V14,V19) = 1+ inc(W19,X19):1+ plus(V19,V14,Y19):5+ timesIter(X19,V6,V14,Y19,Z19):4
     [V14+V19>=Y19,Y19>=1,V14>=0,V6>=0,X19>=1,V19>=2,X19=W19+1,X19=V1+1,Z19=0,V=1] 
* CE 113: start(V,V1,V6,V14,V19) = 1+ inc(W19,X19):1+ plus(V19,V14,Y19):5+ timesIter(X19,Z19,V14,Y19,A20):10
     [V14+V19>=Y19,Y19>=1,V14>=0,X19>=1,V19>=2,X19=W19+1,X19=V1+1,A20=0,Z19=0,V6=0,V=1] 
* CE 114: start(V,V1,V6,V14,V19) = 1+ inc(W19,X19):1+ plus(V19,V14,Y19):5+ timesIter(X19,Z19,V14,Y19,Y19):11
     [V14+V19>=Y19,Y19>=1,V14>=0,X19>=1,V19>=2,X19=W19+1,X19=V1+1,Z19=0,V6=0,V=1] 
* CE 115: start(V,V1,V6,V14,V19) = 1+ inc(W19,X19):1+ plus(V19,V14,Y19):5+ timesIter(X19,V6,V14,Y19,Y19):12
     [V14+V19>=Y19,X19>=V6,Y19>=1,V14>=0,V6>=1,V19>=2,X19=W19+1,X19=V1+1,V=1] 
* CE 116: start(V,V1,V6,V14,V19) = 1+ inc(W19,X19):1+ plus(V19,V14,Y19):5+ timesIter(X19,V6,V14,Y19,Z19):13
     [V14+V19>=Y19,V6>=X19+1,Z19>=0,Y19>=1,V14>=0,X19>=1,V19>=2,X19=W19+1,X19=V1+1,V=1] 
* CE 117: start(V,V1,V6,V14,V19) = 1+ p(V1,W19):1+ plus(X19,V6,V6):1
     [V6>=0,V1>=0,X19=0,W19=0,V=1] 
* CE 118: start(V,V1,V6,V14,V19) = 1+ p(V1,W19):1+ plus(X19,V6,Y19):2
     [V6>=Y19,Y19>=1,V1>=0,X19=0,W19=0,V=1] 
* CE 119: start(V,V1,V6,V14,V19) = 1+ p(V1,W19):1+ plus(X19,V6,Y19):3
     [V6>=0,V1>=0,Y19=0,X19=0,W19=0,V=1] 
* CE 120: start(V,V1,V6,V14,V19) = 1+ p(W19,X19):2+ plus(Y19,V6,V6):1
     [V6>=0,Y19=0,X19=0,W19=1,V1=1,V=1] 
* CE 121: start(V,V1,V6,V14,V19) = 1+ p(W19,X19):2+ plus(Y19,V6,Z19):2
     [V6>=Z19,Z19>=1,Y19=0,X19=0,W19=1,V1=1,V=1] 
* CE 122: start(V,V1,V6,V14,V19) = 1+ p(W19,X19):2+ plus(X19,V6,Y19):3
     [V6>=0,X19>=0,X19+1=W19,X19+1=V1,Y19=0,V=1] 
* CE 123: start(V,V1,V6,V14,V19) = 1+ p(W19,X19):2+ plus(Y19,V6,Z19):4
     [V6+1>=Z19,Z19>=1,Y19=1,X19=1,W19=2,V1=2,V=1] 
* CE 124: start(V,V1,V6,V14,V19) = 1+ p(W19,X19):2+ plus(X19,V6,Y19):5
     [V6+X19>=Y19,Y19>=1,V6>=0,X19>=2,X19+1=W19,X19+1=V1,V=1] 
* CE 125: start(V,V1,V6,V14,V19) = 1+ p(V1,W19):3+ plus(W19,V6,X19):3
     [V1>=W19+1,V6>=0,W19>=1,X19=0,V=1] 
* CE 126: start(V,V1,V6,V14,V19) = 1+ p(V1,W19):3+ plus(X19,V6,Y19):4
     [V6+1>=Y19,Y19>=1,V1>=2,X19=1,W19=1,V=1] 
* CE 127: start(V,V1,V6,V14,V19) = 1+ p(V1,W19):3+ plus(W19,V6,X19):5
     [V6+W19>=X19,V1>=W19+1,X19>=1,V6>=0,W19>=2,V=1] 
* CE 128: start(V,V1,V6,V14,V19) = 0
     [V6>=0,V1>=0,V>=0] 
* CE 129: start(V,V1,V6,V14,V19) = 1
     [V6>=0,V1>=0,V>=0] 
* CE 130: start(V,V1,V6,V14,V19) = 2+ f2(V6,W19,V6,X19):1
     [V6>=0,X19=2,W19=1,V1=1,V=0] 
* CE 131: start(V,V1,V6,V14,V19) = 2+ f2(V6,V1,V6,W19):2
     [V1>=0,V6>=0,W19=0,V=0] 
* CE 132: start(V,V1,V6,V14,V19) = 2+ f2(W19,X19,Y19,Z19):3
     [Z19=1,Y19=0,X19=1,W19=0,V6=0,V1=1,V=0] 
* CE 133: start(V,V1,V6,V14,V19) = 2
     [V6>=0,V1>=0,V=0] 
* CE 134: start(V,V1,V6,V14,V19) = 1+ f2(V,W19,V6,X19):1
     [V6>=0,V>=0,X19=2,W19=1,V1=1] 
* CE 135: start(V,V1,V6,V14,V19) = 1+ f2(V,V1,V6,W19):2
     [V6>=0,V1>=0,V>=0,W19=0] 
* CE 136: start(V,V1,V6,V14,V19) = 1+ f2(W19,X19,V6,Y19):3
     [V6>=0,Y19=1,X19=1,W19=0,V1=1,V=0] 
* CE 137: start(V,V1,V6,V14,V19) = 0+ plus(W19,V1,V1):1
     [V1>=0,W19=0,V=0] 
* CE 138: start(V,V1,V6,V14,V19) = 0+ plus(W19,V1,X19):2
     [V1>=X19,X19>=1,W19=0,V=0] 
* CE 139: start(V,V1,V6,V14,V19) = 0+ plus(V,V1,W19):3
     [V1>=0,V>=0,W19=0] 
* CE 140: start(V,V1,V6,V14,V19) = 0+ plus(W19,V1,X19):4
     [V1+1>=X19,X19>=1,W19=1,V=1] 
* CE 141: start(V,V1,V6,V14,V19) = 0+ plus(V,V1,W19):5
     [V+V1>=W19,W19>=1,V1>=0,V>=2] 
* CE 142: start(V,V1,V6,V14,V19) = 1+ timesIter(W19,X19,V1,Y19,V1):1
     [V1>=0,Y19=0,X19=1,W19=0,V=1] 
* CE 143: start(V,V1,V6,V14,V19) = 1+ timesIter(W19,X19,V1,Y19,Z19):2
     [V1>=Z19,Z19>=1,Y19=0,X19=1,W19=0,V=1] 
* CE 144: start(V,V1,V6,V14,V19) = 1+ timesIter(W19,V,V1,X19,Y19):4
     [V1>=0,V>=0,Y19=0,X19=0,W19=0] 
* CE 145: start(V,V1,V6,V14,V19) = 1+ timesIter(W19,V,V1,X19,Y19):6
     [V1>=0,V>=1,Y19=0,X19=0,W19=0] 
* CE 146: start(V,V1,V6,V14,V19) = 1+ timesIter(W19,V,V1,X19,Y19):7
     [Y19>=0,V1>=0,V>=2,X19=0,W19=0] 
* CE 147: start(V,V1,V6,V14,V19) = 1+ timesIter(W19,X19,V1,Y19,Z19):10
     [V1>=0,Z19=0,Y19=0,X19=0,W19=0,V=0] 
* CE 148: start(V,V1,V6,V14,V19) = 1+ timesIter(W19,X19,V1,Y19,Z19):11
     [V1>=0,Z19=0,Y19=0,X19=0,W19=0,V=0] 
* CE 149: start(V,V1,V6,V14,V19) = 0+ timesIter(W19,X19,V6,Y19,V6):1
     [V6>=0,Y19=0,X19=1,W19=0,V14=0,V1=1,V=0] 
* CE 150: start(V,V1,V6,V14,V19) = 0+ timesIter(W19,X19,V6,Y19,Z19):2
     [V6>=Z19,Z19>=1,Y19=0,X19=1,W19=0,V14=0,V1=1,V=0] 
* CE 151: start(V,V1,V6,V14,V19) = 0+ timesIter(W19,X19,V6,Y19,Z19):3
     [V6+1>=Z19,Z19>=1,Y19=1,X19=1,W19=0,V14=1,V1=1,V=0] 
* CE 152: start(V,V1,V6,V14,V19) = 0+ timesIter(V,V1,V6,V14,W19):4
     [V14>=0,V6>=0,V1>=0,V>=0,W19=0] 
* CE 153: start(V,V1,V6,V14,V19) = 0+ timesIter(W19,X19,V6,V14,Y19):5
     [V6+V14>=Y19,Y19>=1,V14>=2,V6>=0,X19=1,W19=0,V1=1,V=0] 
* CE 154: start(V,V1,V6,V14,V19) = 0+ timesIter(W19,V1,V6,X19,Y19):6
     [V6>=0,V1>=1,Y19=0,X19=0,W19=0,V14=0,V=0] 
* CE 155: start(V,V1,V6,V14,V19) = 0+ timesIter(W19,V1,V6,V14,X19):7
     [X19>=0,V14>=0,V6>=0,V1>=2,W19=0,V=0] 
* CE 156: start(V,V1,V6,V14,V19) = 0+ timesIter(W19,V1,V6,X19,Y19):8
     [V6>=0,V1>=1,Y19=0,X19=1,W19=0,V14=1,V=0] 
* CE 157: start(V,V1,V6,V14,V19) = 0+ timesIter(W19,V1,V6,X19,Y19):9
     [Y19>=0,V6>=0,V1>=2,X19=1,W19=0,V14=1,V=0] 
* CE 158: start(V,V1,V6,V14,V19) = 0+ timesIter(V,W19,V6,V14,X19):10
     [V14>=0,V6>=0,V>=0,X19=0,W19=0,V1=0] 
* CE 159: start(V,V1,V6,V14,V19) = 0+ timesIter(V,W19,V6,V14,V14):11
     [V14>=0,V6>=0,V>=0,W19=0,V1=0] 
* CE 160: start(V,V1,V6,V14,V19) = 0+ timesIter(V,V1,V6,V14,V14):12
     [V>=V1,V14>=0,V6>=0,V1>=1] 
* CE 161: start(V,V1,V6,V14,V19) = 0+ timesIter(V,V1,V6,V14,W19):13
     [V1>=V+1,W19>=0,V14>=0,V6>=0,V>=1] 
* CE 162: start(V,V1,V6,V14,V19) = 0+ isZero(W19,X19):1
     [X19=2,W19=0,V=0] 
* CE 163: start(V,V1,V6,V14,V19) = 0+ isZero(W19,X19):2
     [X19=1,W19=1,V=1] 
* CE 164: start(V,V1,V6,V14,V19) = 0+ isZero(V,W19):3
     [V>=0,W19=0] 
* CE 165: start(V,V1,V6,V14,V19) = 0+ isZero(V,W19):4
     [V>=2,W19=1] 
* CE 166: start(V,V1,V6,V14,V19) = 0+ inc(W19,X19):1
     [X19>=1,X19=W19+1,X19=V+1] 
* CE 167: start(V,V1,V6,V14,V19) = 0+ p(V,W19):1
     [V>=0,W19=0] 
* CE 168: start(V,V1,V6,V14,V19) = 0+ p(W19,X19):2
     [X19>=0,X19+1=W19,X19+1=V] 
* CE 169: start(V,V1,V6,V14,V19) = 0+ p(V,W19):3
     [V>=W19+1,W19>=1] 
* CE 170: start(V,V1,V6,V14,V19) = 0+ ge(W19,V1,X19):1
     [V1>=1,X19=1,W19=0,V=0] 
* CE 171: start(V,V1,V6,V14,V19) = 0+ ge(V,W19,X19):2
     [V>=0,X19=2,W19=0,V1=0] 
* CE 172: start(V,V1,V6,V14,V19) = 0+ ge(V,V1,W19):3
     [V1>=0,V>=0,W19=0] 
* CE 173: start(V,V1,V6,V14,V19) = 0+ ge(V,V1,W19):4
     [V1>=V+1,V>=1,W19=1] 
* CE 174: start(V,V1,V6,V14,V19) = 0+ ge(V,V1,W19):5
     [V>=V1,V1>=1,W19=2] 
* CE 175: start(V,V1,V6,V14,V19) = 0+ f2(V,W19,V6,X19):1
     [V6>=0,V>=0,X19=2,W19=1,V1=1] 
* CE 176: start(V,V1,V6,V14,V19) = 0+ f2(V,V1,V6,W19):2
     [V6>=0,V1>=0,V>=0,W19=0] 
* CE 177: start(V,V1,V6,V14,V19) = 0+ f2(W19,X19,V6,Y19):3
     [V6>=0,Y19=1,X19=1,W19=0,V1=1,V=0] 

### Cost equations --> "Loop" of start/5 
* CEs [134,175] --> Loop 64 
* CEs [158,159,171] --> Loop 65 
* CEs [89,90,91] --> Loop 66 
* CEs [92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,140,142,143,163] --> Loop 67 
* CEs [128,129,130,131,132,133,135,136,137,138,139,141,144,145,146,147,148,149,150,151,152,153,154,155,156,157,160,161,162,164,165,166,167,168,169,170,172,173,174,176,177] --> Loop 68 

#### Loops of start/5 
* Loop 64: start(V,V1,V6,V14,V19) [V6>=0,V>=0,V1=1] 
* Loop 65: start(V,V1,V6,V14,V19) [V>=0,V1=0] 
* Loop 66: start(V,V1,V6,V14,V19) [V6>=0,V1>=0,V=2] 
* Loop 67: start(V,V1,V6,V14,V19) [V=1] 
* Loop 68: start(V,V1,V6,V14,V19) [V>=0] 

### Ranking functions of CR start(V,V1,V6,V14,V19) 

#### Partial ranking functions of CR start(V,V1,V6,V14,V19) 


### Resulting Chains:start(V,V1,V6,V14,V19) 
* [68]
* [67]
* [66]
* [65]
* [64]


### Merging Chains  start/5 into  External patterns of execution 
* [[67],[68]] --> 1 
* [[66]] --> 2 
* [[65]] --> 3 
* [[64]] --> 4 


Computing Bounds
=====================================

#### Cost of chains of f2(V,V1,V6,Out):
* Chain [29]: 3
  with precondition: [V=0,V1=1,Out=1,V6>=0] 

* Chain [28]: 2
  with precondition: [V1=1,Out=2,V>=0,V6>=0] 

* Chain [27]: 0
  with precondition: [Out=0,V>=0,V1>=0,V6>=0] 

* Chain [26,28]: 5
  with precondition: [V=0,V1=1,V6=1,Out=2] 

* Chain [26,27]: 3
  with precondition: [V=0,V1=1,Out=0,V6>=0] 


#### Cost of loops [30] 

 * loop 30:ge(V,V1,Out) -> [ge(V',V1',Out')] 
1
#### Cost of phase [30]:ge(V,V1,Out) -> [ge(V',V1',Out')] 
1*it(30)+0
  Such that:it(30) =< V
it(30) =< V-V'
it(30) =< V1
it(30) =< V1-V1'

#### Cost of phase [30]:ge(V,V1,Out) -> [ge(V',V1',Out')] 
1*it(30)+0
  Such that:it(30) =< V
it(30) =< V-V'
it(30) =< V1
it(30) =< V1-V1'

#### Cost of phase [30]:ge(V,V1,Out) -> [ge(V',V1',Out')] 
1*it(30)+0
  Such that:it(30) =< V
it(30) =< V-V'
it(30) =< V1
it(30) =< V1-V1'

#### Cost of chains of ge(V,V1,Out):
* Chain [[30],33]: 1*it(30)+1
  Such that:it(30) =< V

  with precondition: [Out=1,V>=1,V1>=V+1] 

* Chain [[30],32]: 1*it(30)+1
  Such that:it(30) =< V1

  with precondition: [Out=2,V1>=1,V>=V1] 

* Chain [[30],31]: 1*it(30)+0
  Such that:it(30) =< V1

  with precondition: [Out=0,V>=1,V1>=1] 

* Chain [33]: 1
  with precondition: [V=0,Out=1,V1>=1] 

* Chain [32]: 1
  with precondition: [V1=0,Out=2,V>=0] 

* Chain [31]: 0
  with precondition: [Out=0,V>=0,V1>=0] 


#### Cost of loops [34] 

 * loop 34:p(V,Out) -> [p(V',Out')] 
1
#### Cost of phase [34]:p(V,Out) -> [p(V',Out')] 
1*it(34)+0
  Such that:it(34) =< V
it(34) =< V-V'

#### Cost of phase [34]:p(V,Out) -> [p(V',Out')] 
1*it(34)+0
  Such that:it(34) =< V
it(34) =< V-V'

#### Cost of chains of p(V,Out):
* Chain [[34],36]: 1*it(34)+1
  Such that:it(34) =< Out

  with precondition: [Out>=1,V>=Out+1] 

* Chain [[34],35]: 1*it(34)+1
  Such that:it(34) =< Out

  with precondition: [V=Out+1,V>=2] 

* Chain [36]: 1
  with precondition: [Out=0,V>=0] 

* Chain [35]: 1
  with precondition: [V=Out+1,V>=1] 


#### Cost of loops [37] 

 * loop 37:inc(V,Out) -> [inc(V',Out')] 
1
#### Cost of phase [37]:inc(V,Out) -> [inc(V',Out')] 
1*it(37)+0
  Such that:it(37) =< V
it(37) =< V-V'

#### Cost of chains of inc(V,Out):
* Chain [[37],38]: 1*it(37)+1
  Such that:it(37) =< Out

  with precondition: [V+1=Out,V>=1] 

* Chain [38]: 1
  with precondition: [V+1=Out,V>=0] 


#### Cost of loops [39] 

 * loop 39:isZero(V,Out) -> [isZero(V',Out')] 
1
#### Cost of phase [39]:isZero(V,Out) -> [isZero(V',Out')] 
1*it(39)+0
  Such that:it(39) =< V
it(39) =< V-V'

#### Cost of phase [39]:isZero(V,Out) -> [isZero(V',Out')] 
1*it(39)+0
  Such that:it(39) =< V
it(39) =< V-V'

#### Cost of chains of isZero(V,Out):
* Chain [[39],41]: 1*it(39)+1
  Such that:it(39) =< V

  with precondition: [Out=1,V>=2] 

* Chain [[39],40]: 1*it(39)+0
  Such that:it(39) =< V

  with precondition: [Out=0,V>=2] 

* Chain [42]: 1
  with precondition: [V=0,Out=2] 

* Chain [41]: 1
  with precondition: [V=1,Out=1] 

* Chain [40]: 0
  with precondition: [Out=0,V>=0] 


#### Cost of loops [43] 

 * loop 43:plus(V,V1,Out) -> [plus(V',V1',Out')] 
3*s(20)+2*s(21)+1*s(17)+5
  Such that:s(17) =< V'
s(18) =< V
s(19) =< V1'
s(20) =< s(18)
s(21) =< s(19)

#### Cost of phase [43]:plus(V,V1,Out) -> [plus(V',V1',Out')] 
5*it(43)+3*s(22)+2*s(23)+1*s(24)+0
  Such that:aux(8) =< V+V1
it(43) =< V-V'
aux(9) =< V
it(43) =< aux(9)
aux(7) =< aux(9)-1
s(25) =< it(43)*aux(8)
s(26) =< it(43)*aux(9)
s(24) =< it(43)*aux(7)
s(22) =< s(26)
s(23) =< s(25)

#### Cost of phase [43]:plus(V,V1,Out) -> [plus(V',V1',Out')] 
5*it(43)+3*s(22)+2*s(23)+1*s(24)+0
  Such that:aux(8) =< V+V1
it(43) =< V-V'
aux(9) =< V
it(43) =< aux(9)
aux(7) =< aux(9)-1
s(25) =< it(43)*aux(8)
s(26) =< it(43)*aux(9)
s(24) =< it(43)*aux(7)
s(22) =< s(26)
s(23) =< s(25)

#### Cost of phase [43]:plus(V,V1,Out) -> [plus(V',V1',Out')] 
5*it(43)+3*s(22)+2*s(23)+1*s(24)+0
  Such that:aux(8) =< V+V1
it(43) =< V-V'
aux(9) =< V
it(43) =< aux(9)
aux(7) =< aux(9)-1
s(25) =< it(43)*aux(8)
s(26) =< it(43)*aux(9)
s(24) =< it(43)*aux(7)
s(22) =< s(26)
s(23) =< s(25)

#### Cost of phase [43]:plus(V,V1,Out) -> [plus(V',V1',Out')] 
5*it(43)+3*s(22)+2*s(23)+1*s(24)+0
  Such that:aux(8) =< V+V1
it(43) =< V-V'
aux(9) =< V
it(43) =< aux(9)
aux(7) =< aux(9)-1
s(25) =< it(43)*aux(8)
s(26) =< it(43)*aux(9)
s(24) =< it(43)*aux(7)
s(22) =< s(26)
s(23) =< s(25)

#### Cost of phase [43]:plus(V,V1,Out) -> [plus(V',V1',Out')] 
5*it(43)+3*s(22)+2*s(23)+1*s(24)+0
  Such that:aux(8) =< V+V1
it(43) =< V-V'
aux(9) =< V
it(43) =< aux(9)
aux(7) =< aux(9)-1
s(25) =< it(43)*aux(8)
s(26) =< it(43)*aux(9)
s(24) =< it(43)*aux(7)
s(22) =< s(26)
s(23) =< s(25)

#### Cost of phase [43]:plus(V,V1,Out) -> [plus(V',V1',Out')] 
5*it(43)+3*s(22)+2*s(23)+1*s(24)+0
  Such that:aux(8) =< V+V1
it(43) =< V-V'
aux(9) =< V
it(43) =< aux(9)
aux(7) =< aux(9)-1
s(25) =< it(43)*aux(8)
s(26) =< it(43)*aux(9)
s(24) =< it(43)*aux(7)
s(22) =< s(26)
s(23) =< s(25)

#### Cost of phase [43]:plus(V,V1,Out) -> [plus(V',V1',Out')] 
5*it(43)+3*s(22)+2*s(23)+1*s(24)+0
  Such that:aux(8) =< V+V1
it(43) =< V-V'
aux(9) =< V
it(43) =< aux(9)
aux(7) =< aux(9)-1
s(25) =< it(43)*aux(8)
s(26) =< it(43)*aux(9)
s(24) =< it(43)*aux(7)
s(22) =< s(26)
s(23) =< s(25)

#### Cost of phase [43]:plus(V,V1,Out) -> [plus(V',V1',Out')] 
5*it(43)+3*s(22)+2*s(23)+1*s(24)+0
  Such that:aux(8) =< V+V1
it(43) =< V-V'
aux(9) =< V
it(43) =< aux(9)
aux(7) =< aux(9)-1
s(25) =< it(43)*aux(8)
s(26) =< it(43)*aux(9)
s(24) =< it(43)*aux(7)
s(22) =< s(26)
s(23) =< s(25)

#### Cost of chains of plus(V,V1,Out):
* Chain [[43],49]: 5*it(43)+4*s(5)+2*s(6)+3*s(22)+2*s(23)+1*s(24)+5
  Such that:aux(8) =< V+V1
aux(10) =< V
aux(11) =< V+V1+1
aux(1) =< aux(10)
it(43) =< aux(10)
aux(1) =< aux(11)
s(6) =< aux(1)
s(5) =< aux(11)
aux(7) =< aux(10)-1
s(25) =< it(43)*aux(8)
s(26) =< it(43)*aux(10)
s(24) =< it(43)*aux(7)
s(22) =< s(26)
s(23) =< s(25)

  with precondition: [Out=0,V>=2,V1>=0] 

* Chain [[43],46]: 5*it(43)+3*s(22)+2*s(23)+1*s(24)+1*s(27)+3
  Such that:aux(12) =< V
aux(13) =< V+V1
it(43) =< aux(12)
s(27) =< aux(13)
aux(7) =< aux(12)-1
s(25) =< it(43)*aux(13)
s(26) =< it(43)*aux(12)
s(24) =< it(43)*aux(7)
s(22) =< s(26)
s(23) =< s(25)

  with precondition: [Out=0,V>=2,V1>=0] 

* Chain [[43],45,49]: 5*it(43)+4*s(5)+3*s(22)+2*s(23)+1*s(24)+2*s(28)+10
  Such that:aux(2) =< V+V1+1
aux(15) =< V
aux(16) =< V+V1
it(43) =< aux(15)
s(5) =< aux(2)
s(28) =< aux(16)
aux(7) =< aux(15)-1
s(25) =< it(43)*aux(16)
s(26) =< it(43)*aux(15)
s(24) =< it(43)*aux(7)
s(22) =< s(26)
s(23) =< s(25)

  with precondition: [Out=0,V>=2,V1>=0] 

* Chain [[43],45,48]: 5*it(43)+3*s(22)+2*s(23)+1*s(24)+3*s(28)+1*s(31)+10
  Such that:aux(8) =< V+V1
aux(17) =< Out
s(31) =< Out+1
aux(18) =< V
it(43) =< aux(18)
s(28) =< aux(17)
aux(7) =< aux(18)-1
s(25) =< it(43)*aux(8)
s(26) =< it(43)*aux(18)
s(24) =< it(43)*aux(7)
s(22) =< s(26)
s(23) =< s(25)

  with precondition: [V1>=0,Out>=V1+2,V+V1>=Out] 

* Chain [[43],45,47]: 5*it(43)+3*s(22)+2*s(23)+1*s(24)+3*s(28)+1*s(33)+10
  Such that:s(33) =< V+V1+1
aux(20) =< V
aux(21) =< V+V1
it(43) =< aux(20)
s(28) =< aux(21)
aux(7) =< aux(20)-1
s(25) =< it(43)*aux(21)
s(26) =< it(43)*aux(20)
s(24) =< it(43)*aux(7)
s(22) =< s(26)
s(23) =< s(25)

  with precondition: [V>=2,V1>=0,Out>=1,V+V1>=Out] 

* Chain [[43],44,49]: 5*it(43)+4*s(5)+3*s(22)+2*s(23)+1*s(24)+1*s(35)+1*s(36)+10
  Such that:aux(8) =< V+V1
aux(2) =< V+V1+2
aux(22) =< V
aux(23) =< V+V1+1
it(43) =< aux(22)
s(35) =< aux(22)
s(35) =< aux(23)
s(36) =< aux(23)
s(5) =< aux(2)
aux(7) =< aux(22)-1
s(25) =< it(43)*aux(8)
s(26) =< it(43)*aux(22)
s(24) =< it(43)*aux(7)
s(22) =< s(26)
s(23) =< s(25)

  with precondition: [Out=0,V>=3,V1>=0] 

* Chain [[43],44,48]: 6*it(43)+3*s(22)+2*s(23)+1*s(24)+1*s(31)+2*s(32)+10
  Such that:aux(8) =< V+V1
aux(24) =< Out
s(31) =< Out+1
aux(25) =< V
it(43) =< aux(25)
s(32) =< aux(24)
aux(7) =< aux(25)-1
s(25) =< it(43)*aux(8)
s(26) =< it(43)*aux(25)
s(24) =< it(43)*aux(7)
s(22) =< s(26)
s(23) =< s(25)

  with precondition: [V1>=0,Out>=V1+2,V+V1>=Out+1] 

* Chain [[43],44,47]: 6*it(43)+3*s(22)+2*s(23)+1*s(24)+1*s(33)+2*s(34)+10
  Such that:aux(8) =< V+V1
aux(26) =< V+V1+1
s(33) =< V+V1+2
aux(27) =< V
it(43) =< aux(27)
s(34) =< aux(26)
aux(7) =< aux(27)-1
s(25) =< it(43)*aux(8)
s(26) =< it(43)*aux(27)
s(24) =< it(43)*aux(7)
s(22) =< s(26)
s(23) =< s(25)

  with precondition: [V>=3,V1>=0,Out>=1,V+V1>=Out+1] 

* Chain [49]: 4*s(5)+2*s(6)+5
  Such that:aux(1) =< V
aux(2) =< V1+1
s(6) =< aux(1)
s(5) =< aux(2)

  with precondition: [Out=0,V>=0,V1>=0] 

* Chain [48]: 1*s(31)+1*s(32)+5
  Such that:s(32) =< V1
s(31) =< V1+1

  with precondition: [V=0,V1=Out,V1>=0] 

* Chain [47]: 1*s(33)+1*s(34)+5
  Such that:s(34) =< V1
s(33) =< V1+1

  with precondition: [V=0,Out>=1,V1>=Out] 

* Chain [46]: 1*s(27)+3
  Such that:s(27) =< V1+1

  with precondition: [V=1,Out=0,V1>=0] 

* Chain [45,49]: 4*s(5)+2*s(28)+10
  Such that:aux(14) =< V1+1
aux(2) =< V1+2
s(5) =< aux(2)
s(28) =< aux(14)

  with precondition: [V=1,Out=0,V1>=0] 

* Chain [45,48]: 3*s(28)+1*s(31)+10
  Such that:s(31) =< Out+1
aux(17) =< Out
s(28) =< aux(17)

  with precondition: [V=1,Out=V1+1,Out>=1] 

* Chain [45,47]: 3*s(28)+1*s(33)+10
  Such that:s(33) =< V1+2
aux(19) =< V1+1
s(28) =< aux(19)

  with precondition: [V=1,Out>=1,V1+1>=Out] 

* Chain [44,49]: 4*s(5)+1*s(35)+1*s(36)+10
  Such that:s(35) =< V
s(36) =< V1+1
aux(2) =< V1+2
s(5) =< aux(2)

  with precondition: [Out=0,V>=2,V1>=0] 

* Chain [44,48]: 1*s(31)+2*s(32)+1*s(35)+10
  Such that:s(35) =< V
s(31) =< Out+1
aux(24) =< Out
s(32) =< aux(24)

  with precondition: [Out=V1+1,V>=2,Out>=1] 

* Chain [44,47]: 1*s(33)+2*s(34)+1*s(35)+10
  Such that:s(35) =< V
s(33) =< V1+2
aux(26) =< V1+1
s(34) =< aux(26)

  with precondition: [V>=2,Out>=1,V1+1>=Out] 


#### Cost of loops [50,51,52,53,54] 

 * loop 50:timesIter(V,V1,V6,V14,Out) -> [timesIter(V',V1',V6',V14',Out')] 
1*s(185)+1*s(186)+1*s(191)+1*s(188)+24*s(195)+3*s(196)+3*s(197)+2*s(198)+7*s(199)+4*s(203)+12*s(204)+8*s(205)+3*s(206)+14
  Such that:s(185) =< V
s(186) =< V+1
s(187) =< V6+1
s(188) =< V6+2
s(189) =< V6+V14
s(190) =< V6+V14+1
s(191) =< V6+V14+2
s(192) =< V14
s(193) =< V14'
s(194) =< V14'+1
s(195) =< s(192)
s(196) =< s(190)
s(197) =< s(194)
s(198) =< s(187)
s(199) =< s(193)
s(200) =< s(192)-1
s(201) =< s(195)*s(189)
s(202) =< s(195)*s(192)
s(203) =< s(195)*s(200)
s(204) =< s(202)
s(205) =< s(201)
s(206) =< s(189)

 * loop 51:timesIter(V,V1,V6,V14,Out) -> [timesIter(V',V1',V6',V14',Out')] 
1*s(230)+1*s(231)+23*s(238)+8*s(239)+8*s(240)+3*s(241)+4*s(245)+12*s(246)+8*s(247)+1*s(248)+9*s(249)+4*s(250)+2*s(252)+14
  Such that:s(230) =< V
s(231) =< V+1
s(232) =< V14
s(233) =< V14+V6'
s(234) =< V14+V6'+1
s(235) =< V14+V6'+2
s(236) =< V6'+1
s(237) =< V6'+2
s(238) =< s(232)
s(239) =< s(236)
s(240) =< s(237)
s(241) =< s(233)
s(242) =< s(232)-1
s(243) =< s(238)*s(233)
s(244) =< s(238)*s(232)
s(245) =< s(238)*s(242)
s(246) =< s(244)
s(247) =< s(243)
s(248) =< s(232)
s(248) =< s(234)
s(249) =< s(234)
s(250) =< s(235)
s(251) =< s(232)
s(251) =< s(234)
s(252) =< s(251)

 * loop 52:timesIter(V,V1,V6,V14,Out) -> [timesIter(V',V1',V6',V14',Out')] 
1*s(261)+1*s(262)+1*s(264)+1*s(266)+3*s(267)+3*s(268)+14
  Such that:s(261) =< V
s(262) =< V+1
s(263) =< V6'+1
s(264) =< V6'+2
s(265) =< V14'
s(266) =< V14'+1
s(267) =< s(263)
s(268) =< s(265)

 * loop 53:timesIter(V,V1,V6,V14,Out) -> [timesIter(V',V1',V6',V14',Out')] 
2*s(276)+1*s(273)+1*s(274)+9
  Such that:s(273) =< V6'
s(274) =< V6'+1
s(275) =< V'
s(276) =< s(275)

 * loop 54:timesIter(V,V1,V6,V14,Out) -> [timesIter(V',V1',V6',V14',Out')] 
2*s(284)+1*s(281)+1*s(282)+9
  Such that:s(281) =< V14'
s(282) =< V14'+1
s(283) =< V'
s(284) =< s(283)

#### Cost of phase [50,51,52,53,54]:timesIter(V,V1,V6,V14,Out) -> [timesIter(V',V1',V6',V14',Out')] 
42*it(50)+18*it(53)+1*s(285)+3*s(286)+1*s(287)+2*s(288)+24*s(289)+15*s(290)+2*s(292)+13*s(293)+4*s(294)+12*s(295)+8*s(296)+2*s(306)+23*s(308)+11*s(309)+8*s(310)+4*s(312)+12*s(313)+8*s(314)+1*s(315)+4*s(317)+2*s(318)+1*s(331)+3*s(333)+4*s(336)+1*s(337)+1*s(338)+1*s(341)+1*s(342)+0
  Such that:aux(97) =< -2*V+2*V1+V6
aux(95) =< -2*V+2*V1+V6-V14+1
aux(91) =< -V+V1+V6
aux(116) =< -V+V1+V6-V14
aux(89) =< -V+V1+V6-V14+1
aux(51) =< V1
aux(53) =< V6+1
aux(103) =< V6-V14+1
aux(41) =< V6+V14
aux(74) =< V14-V14'
aux(129) =< -V+V1
aux(130) =< -V+V1+V'-V1'
aux(131) =< V6-V14
aux(132) =< V14
it(50) =< aux(129)
it(53) =< aux(129)
it(50) =< aux(130)
it(53) =< aux(130)
aux(61) =< aux(53)-1
aux(124) =< aux(53)-2
aux(119) =< aux(91)
aux(118) =< aux(91)-1
aux(81) =< aux(53)
aux(52) =< aux(51)+1
aux(98) =< aux(97)+1
aux(54) =< aux(53)+1
aux(92) =< aux(91)+1
aux(63) =< aux(51)
aux(93) =< it(50)*aux(97)
aux(87) =< it(50)*aux(91)
s(302) =< it(50)*aux(53)
s(285) =< it(50)*aux(51)
aux(42) =< it(50)*aux(61)
aux(120) =< it(50)*aux(124)
aux(115) =< it(50)*aux(119)
aux(114) =< it(50)*aux(118)
aux(43) =< it(50)*aux(61)
aux(102) =< it(50)*aux(81)
aux(94) =< it(50)*aux(98)
s(331) =< it(50)*aux(54)
aux(88) =< it(50)*aux(92)
s(334) =< it(50)*aux(81)
s(288) =< it(50)*aux(54)
s(286) =< it(50)*aux(52)
s(306) =< it(50)*aux(63)
s(326) =< it(50)*aux(54)
aux(45) =< aux(42)+aux(120)+aux(131)
aux(68) =< aux(42)+aux(120)+aux(131)
s(342) =< aux(115)+aux(114)+aux(116)
aux(49) =< aux(102)+aux(42)+aux(103)
aux(43) =< aux(102)+aux(42)+aux(103)
aux(44) =< aux(94)+aux(93)+aux(95)
s(331) =< aux(94)+aux(93)+aux(95)
s(341) =< aux(94)+aux(93)+aux(95)
it(53) =< aux(88)+aux(87)+aux(89)
s(334) =< aux(88)+aux(87)+aux(89)
aux(45) =< it(53)*aux(61)
aux(68) =< it(53)*aux(61)
s(342) =< it(53)*aux(81)
s(339) =< it(53)*aux(52)
aux(67) =< it(53)*aux(61)
s(338) =< it(53)*aux(81)
s(337) =< it(53)*aux(61)
s(192) =< aux(132)+aux(42)+aux(43)+aux(49)+aux(49)
s(189) =< aux(41)+aux(42)+aux(43)+aux(44)+aux(45)
s(321) =< aux(68)+aux(67)+aux(42)+aux(42)+aux(132)
aux(57) =< s(189)+2
aux(56) =< s(189)+1
aux(55) =< s(189)
aux(58) =< s(192)
s(321) =< aux(68)+aux(67)+aux(42)+aux(42)+aux(74)
s(322) =< it(50)*aux(57)
s(303) =< it(50)*aux(56)
s(298) =< it(50)*aux(55)
s(321) =< it(50)*aux(58)
s(305) =< it(50)*aux(58)
s(287) =< it(50)*aux(57)
s(336) =< s(339)
s(309) =< aux(102)
s(333) =< s(334)
s(308) =< s(321)
s(310) =< s(326)
s(293) =< s(298)
s(242) =< aux(58)-1
s(323) =< s(308)*aux(55)
s(324) =< s(308)*aux(58)
s(312) =< s(308)*s(242)
s(313) =< s(324)
s(314) =< s(323)
s(315) =< s(321)
s(315) =< s(303)
s(290) =< s(303)
s(317) =< s(322)
s(319) =< s(321)
s(319) =< s(303)
s(318) =< s(319)
s(289) =< s(305)
s(292) =< s(302)
s(200) =< s(192)-1
s(299) =< s(289)*s(189)
s(300) =< s(289)*s(192)
s(294) =< s(289)*s(200)
s(295) =< s(300)
s(296) =< s(299)

#### Cost of phase [50,51,52,53,54]:timesIter(V,V1,V6,V14,Out) -> [timesIter(V',V1',V6',V14',Out')] 
42*it(50)+18*it(53)+1*s(285)+3*s(286)+1*s(287)+2*s(288)+24*s(289)+15*s(290)+2*s(292)+13*s(293)+4*s(294)+12*s(295)+8*s(296)+2*s(306)+23*s(308)+11*s(309)+8*s(310)+4*s(312)+12*s(313)+8*s(314)+1*s(315)+4*s(317)+2*s(318)+1*s(331)+3*s(333)+4*s(336)+1*s(337)+1*s(338)+1*s(341)+1*s(342)+0
  Such that:aux(97) =< -2*V+2*V1+V6
aux(95) =< -2*V+2*V1+V6-V14+1
aux(91) =< -V+V1+V6
aux(116) =< -V+V1+V6-V14
aux(89) =< -V+V1+V6-V14+1
aux(51) =< V1
aux(53) =< V6+1
aux(103) =< V6-V14+1
aux(41) =< V6+V14
aux(74) =< V14-V14'
aux(129) =< -V+V1
aux(130) =< -V+V1+V'-V1'
aux(131) =< V6-V14
aux(132) =< V14
it(50) =< aux(129)
it(53) =< aux(129)
it(50) =< aux(130)
it(53) =< aux(130)
aux(61) =< aux(53)-1
aux(124) =< aux(53)-2
aux(119) =< aux(91)
aux(118) =< aux(91)-1
aux(81) =< aux(53)
aux(52) =< aux(51)+1
aux(98) =< aux(97)+1
aux(54) =< aux(53)+1
aux(92) =< aux(91)+1
aux(63) =< aux(51)
aux(93) =< it(50)*aux(97)
aux(87) =< it(50)*aux(91)
s(302) =< it(50)*aux(53)
s(285) =< it(50)*aux(51)
aux(42) =< it(50)*aux(61)
aux(120) =< it(50)*aux(124)
aux(115) =< it(50)*aux(119)
aux(114) =< it(50)*aux(118)
aux(43) =< it(50)*aux(61)
aux(102) =< it(50)*aux(81)
aux(94) =< it(50)*aux(98)
s(331) =< it(50)*aux(54)
aux(88) =< it(50)*aux(92)
s(334) =< it(50)*aux(81)
s(288) =< it(50)*aux(54)
s(286) =< it(50)*aux(52)
s(306) =< it(50)*aux(63)
s(326) =< it(50)*aux(54)
aux(45) =< aux(42)+aux(120)+aux(131)
aux(68) =< aux(42)+aux(120)+aux(131)
s(342) =< aux(115)+aux(114)+aux(116)
aux(49) =< aux(102)+aux(42)+aux(103)
aux(43) =< aux(102)+aux(42)+aux(103)
aux(44) =< aux(94)+aux(93)+aux(95)
s(331) =< aux(94)+aux(93)+aux(95)
s(341) =< aux(94)+aux(93)+aux(95)
it(53) =< aux(88)+aux(87)+aux(89)
s(334) =< aux(88)+aux(87)+aux(89)
aux(45) =< it(53)*aux(61)
aux(68) =< it(53)*aux(61)
s(342) =< it(53)*aux(81)
s(339) =< it(53)*aux(52)
aux(67) =< it(53)*aux(61)
s(338) =< it(53)*aux(81)
s(337) =< it(53)*aux(61)
s(192) =< aux(132)+aux(42)+aux(43)+aux(49)+aux(49)
s(189) =< aux(41)+aux(42)+aux(43)+aux(44)+aux(45)
s(321) =< aux(68)+aux(67)+aux(42)+aux(42)+aux(132)
aux(57) =< s(189)+2
aux(56) =< s(189)+1
aux(55) =< s(189)
aux(58) =< s(192)
s(321) =< aux(68)+aux(67)+aux(42)+aux(42)+aux(74)
s(322) =< it(50)*aux(57)
s(303) =< it(50)*aux(56)
s(298) =< it(50)*aux(55)
s(321) =< it(50)*aux(58)
s(305) =< it(50)*aux(58)
s(287) =< it(50)*aux(57)
s(336) =< s(339)
s(309) =< aux(102)
s(333) =< s(334)
s(308) =< s(321)
s(310) =< s(326)
s(293) =< s(298)
s(242) =< aux(58)-1
s(323) =< s(308)*aux(55)
s(324) =< s(308)*aux(58)
s(312) =< s(308)*s(242)
s(313) =< s(324)
s(314) =< s(323)
s(315) =< s(321)
s(315) =< s(303)
s(290) =< s(303)
s(317) =< s(322)
s(319) =< s(321)
s(319) =< s(303)
s(318) =< s(319)
s(289) =< s(305)
s(292) =< s(302)
s(200) =< s(192)-1
s(299) =< s(289)*s(189)
s(300) =< s(289)*s(192)
s(294) =< s(289)*s(200)
s(295) =< s(300)
s(296) =< s(299)

#### Cost of chains of timesIter(V,V1,V6,V14,Out):
* Chain [[50,51,52,53,54],63]: 42*it(50)+18*it(53)+3*s(160)+1*s(285)+3*s(286)+1*s(287)+2*s(288)+24*s(289)+15*s(290)+2*s(292)+13*s(293)+4*s(294)+12*s(295)+8*s(296)+2*s(306)+23*s(308)+11*s(309)+8*s(310)+4*s(312)+12*s(313)+8*s(314)+1*s(315)+4*s(317)+2*s(318)+1*s(331)+3*s(333)+4*s(336)+1*s(337)+1*s(338)+1*s(341)+1*s(342)+2
  Such that:aux(97) =< -2*V+2*V1+V6
aux(95) =< -2*V+2*V1+V6-V14+1
aux(91) =< -V+V1+V6
aux(116) =< -V+V1+V6-V14
aux(89) =< -V+V1+V6-V14+1
aux(53) =< V6+1
aux(131) =< V6-V14
aux(103) =< V6-V14+1
aux(41) =< V6+V14
aux(133) =< -V+V1
aux(134) =< V1
aux(135) =< V14
s(160) =< aux(134)
it(50) =< aux(133)
it(53) =< aux(133)
aux(61) =< aux(53)-1
aux(124) =< aux(53)-2
aux(119) =< aux(91)
aux(118) =< aux(91)-1
aux(81) =< aux(53)
aux(52) =< aux(134)+1
aux(98) =< aux(97)+1
aux(54) =< aux(53)+1
aux(92) =< aux(91)+1
aux(63) =< aux(134)
aux(93) =< it(50)*aux(97)
aux(87) =< it(50)*aux(91)
s(302) =< it(50)*aux(53)
s(285) =< it(50)*aux(134)
aux(42) =< it(50)*aux(61)
aux(120) =< it(50)*aux(124)
aux(115) =< it(50)*aux(119)
aux(114) =< it(50)*aux(118)
aux(43) =< it(50)*aux(61)
aux(102) =< it(50)*aux(81)
aux(94) =< it(50)*aux(98)
s(331) =< it(50)*aux(54)
aux(88) =< it(50)*aux(92)
s(334) =< it(50)*aux(81)
s(288) =< it(50)*aux(54)
s(286) =< it(50)*aux(52)
s(306) =< it(50)*aux(63)
s(326) =< it(50)*aux(54)
aux(45) =< aux(42)+aux(120)+aux(131)
s(342) =< aux(115)+aux(114)+aux(116)
aux(49) =< aux(102)+aux(42)+aux(103)
aux(43) =< aux(102)+aux(42)+aux(103)
aux(44) =< aux(94)+aux(93)+aux(95)
s(331) =< aux(94)+aux(93)+aux(95)
s(341) =< aux(94)+aux(93)+aux(95)
it(53) =< aux(88)+aux(87)+aux(89)
s(334) =< aux(88)+aux(87)+aux(89)
aux(45) =< it(53)*aux(61)
s(342) =< it(53)*aux(81)
s(339) =< it(53)*aux(52)
aux(67) =< it(53)*aux(61)
s(338) =< it(53)*aux(81)
s(337) =< it(53)*aux(61)
s(192) =< aux(135)+aux(42)+aux(43)+aux(49)+aux(49)
s(189) =< aux(41)+aux(42)+aux(43)+aux(44)+aux(45)
s(321) =< aux(45)+aux(67)+aux(42)+aux(42)+aux(135)
aux(57) =< s(189)+2
aux(56) =< s(189)+1
aux(55) =< s(189)
aux(58) =< s(192)
s(322) =< it(50)*aux(57)
s(303) =< it(50)*aux(56)
s(298) =< it(50)*aux(55)
s(321) =< it(50)*aux(58)
s(305) =< it(50)*aux(58)
s(287) =< it(50)*aux(57)
s(336) =< s(339)
s(309) =< aux(102)
s(333) =< s(334)
s(308) =< s(321)
s(310) =< s(326)
s(293) =< s(298)
s(242) =< aux(58)-1
s(323) =< s(308)*aux(55)
s(324) =< s(308)*aux(58)
s(312) =< s(308)*s(242)
s(313) =< s(324)
s(314) =< s(323)
s(315) =< s(321)
s(315) =< s(303)
s(290) =< s(303)
s(317) =< s(322)
s(319) =< s(321)
s(319) =< s(303)
s(318) =< s(319)
s(289) =< s(305)
s(292) =< s(302)
s(200) =< s(192)-1
s(299) =< s(289)*s(189)
s(300) =< s(289)*s(192)
s(294) =< s(289)*s(200)
s(295) =< s(300)
s(296) =< s(299)

  with precondition: [Out=0,V>=1,V6>=0,V14>=0,V1>=V+1] 

* Chain [[50,51,52,53,54],60]: 42*it(50)+18*it(53)+1*s(285)+3*s(286)+1*s(287)+2*s(288)+24*s(289)+15*s(290)+2*s(292)+13*s(293)+4*s(294)+12*s(295)+8*s(296)+2*s(306)+23*s(308)+11*s(309)+8*s(310)+4*s(312)+12*s(313)+8*s(314)+1*s(315)+4*s(317)+2*s(318)+1*s(331)+3*s(333)+4*s(336)+1*s(337)+1*s(338)+1*s(341)+1*s(342)+1*s(344)+3
  Such that:aux(97) =< -2*V+2*V1+V6
aux(95) =< -2*V+2*V1+V6-V14+1
aux(91) =< -V+V1+V6
aux(116) =< -V+V1+V6-V14
aux(89) =< -V+V1+V6-V14+1
aux(53) =< V6+1
aux(131) =< V6-V14
aux(103) =< V6-V14+1
aux(41) =< V6+V14
aux(132) =< V14
aux(74) =< V14-Out
aux(136) =< -V+V1
aux(137) =< V1
s(344) =< aux(137)
it(50) =< aux(136)
it(53) =< aux(136)
aux(61) =< aux(53)-1
aux(124) =< aux(53)-2
aux(119) =< aux(91)
aux(118) =< aux(91)-1
aux(81) =< aux(53)
aux(52) =< aux(137)+1
aux(98) =< aux(97)+1
aux(54) =< aux(53)+1
aux(92) =< aux(91)+1
aux(63) =< aux(137)
aux(93) =< it(50)*aux(97)
aux(87) =< it(50)*aux(91)
s(302) =< it(50)*aux(53)
s(285) =< it(50)*aux(137)
aux(42) =< it(50)*aux(61)
aux(120) =< it(50)*aux(124)
aux(115) =< it(50)*aux(119)
aux(114) =< it(50)*aux(118)
aux(43) =< it(50)*aux(61)
aux(102) =< it(50)*aux(81)
aux(94) =< it(50)*aux(98)
s(331) =< it(50)*aux(54)
aux(88) =< it(50)*aux(92)
s(334) =< it(50)*aux(81)
s(288) =< it(50)*aux(54)
s(286) =< it(50)*aux(52)
s(306) =< it(50)*aux(63)
s(326) =< it(50)*aux(54)
aux(45) =< aux(42)+aux(120)+aux(131)
s(342) =< aux(115)+aux(114)+aux(116)
aux(49) =< aux(102)+aux(42)+aux(103)
aux(43) =< aux(102)+aux(42)+aux(103)
aux(44) =< aux(94)+aux(93)+aux(95)
s(331) =< aux(94)+aux(93)+aux(95)
s(341) =< aux(94)+aux(93)+aux(95)
it(53) =< aux(88)+aux(87)+aux(89)
s(334) =< aux(88)+aux(87)+aux(89)
aux(45) =< it(53)*aux(61)
s(342) =< it(53)*aux(81)
s(339) =< it(53)*aux(52)
aux(67) =< it(53)*aux(61)
s(338) =< it(53)*aux(81)
s(337) =< it(53)*aux(61)
s(192) =< aux(132)+aux(42)+aux(43)+aux(49)+aux(49)
s(189) =< aux(41)+aux(42)+aux(43)+aux(44)+aux(45)
s(321) =< aux(45)+aux(67)+aux(42)+aux(42)+aux(132)
aux(57) =< s(189)+2
aux(56) =< s(189)+1
aux(55) =< s(189)
aux(58) =< s(192)
s(321) =< aux(45)+aux(67)+aux(42)+aux(42)+aux(74)
s(322) =< it(50)*aux(57)
s(303) =< it(50)*aux(56)
s(298) =< it(50)*aux(55)
s(321) =< it(50)*aux(58)
s(305) =< it(50)*aux(58)
s(287) =< it(50)*aux(57)
s(336) =< s(339)
s(309) =< aux(102)
s(333) =< s(334)
s(308) =< s(321)
s(310) =< s(326)
s(293) =< s(298)
s(242) =< aux(58)-1
s(323) =< s(308)*aux(55)
s(324) =< s(308)*aux(58)
s(312) =< s(308)*s(242)
s(313) =< s(324)
s(314) =< s(323)
s(315) =< s(321)
s(315) =< s(303)
s(290) =< s(303)
s(317) =< s(322)
s(319) =< s(321)
s(319) =< s(303)
s(318) =< s(319)
s(289) =< s(305)
s(292) =< s(302)
s(200) =< s(192)-1
s(299) =< s(289)*s(189)
s(300) =< s(289)*s(192)
s(294) =< s(289)*s(200)
s(295) =< s(300)
s(296) =< s(299)

  with precondition: [V>=1,V6>=0,V14>=0,Out>=0,V1>=V+1] 

* Chain [63]: 2*s(160)+1*s(161)+2
  Such that:s(161) =< V
aux(38) =< V1
s(160) =< aux(38)

  with precondition: [Out=0,V>=0,V1>=0,V6>=0,V14>=0] 

* Chain [62]: 2
  with precondition: [V1=0,Out=0,V>=0,V6>=0,V14>=0] 

* Chain [61]: 3
  with precondition: [V1=0,V14=Out,V>=0,V6>=0,V14>=0] 

* Chain [60]: 1*s(344)+3
  Such that:s(344) =< V1

  with precondition: [V14=Out,V1>=1,V6>=0,V14>=0,V>=V1] 

* Chain [59,[50,51,52,53,54],63]: 45*it(50)+18*it(53)+1*s(285)+3*s(286)+1*s(287)+2*s(288)+24*s(289)+15*s(290)+2*s(292)+13*s(293)+4*s(294)+12*s(295)+8*s(296)+2*s(306)+23*s(308)+11*s(309)+8*s(310)+4*s(312)+12*s(313)+8*s(314)+1*s(315)+4*s(317)+2*s(318)+1*s(331)+3*s(333)+4*s(336)+1*s(337)+1*s(338)+1*s(341)+1*s(342)+1*s(345)+1*s(346)+1*s(347)+11
  Such that:aux(91) =< V1+V6
aux(95) =< 2*V1
aux(97) =< 2*V1+V6
aux(41) =< 2*V6
aux(138) =< 1
aux(139) =< V1
aux(140) =< V6
aux(141) =< V6+1
s(345) =< aux(138)
s(346) =< aux(140)
s(347) =< aux(141)
it(50) =< aux(139)
it(53) =< aux(139)
aux(61) =< aux(141)-1
aux(124) =< aux(141)-2
aux(119) =< aux(91)
aux(118) =< aux(91)-1
aux(81) =< aux(141)
aux(52) =< aux(139)+1
aux(98) =< aux(97)+1
aux(54) =< aux(141)+1
aux(92) =< aux(91)+1
aux(63) =< aux(139)
aux(93) =< it(50)*aux(97)
aux(87) =< it(50)*aux(91)
s(302) =< it(50)*aux(141)
s(285) =< it(50)*aux(139)
aux(42) =< it(50)*aux(61)
aux(120) =< it(50)*aux(124)
aux(115) =< it(50)*aux(119)
aux(114) =< it(50)*aux(118)
aux(43) =< it(50)*aux(61)
aux(102) =< it(50)*aux(81)
aux(94) =< it(50)*aux(98)
s(331) =< it(50)*aux(54)
aux(88) =< it(50)*aux(92)
s(334) =< it(50)*aux(81)
s(288) =< it(50)*aux(54)
s(286) =< it(50)*aux(52)
s(306) =< it(50)*aux(63)
s(326) =< it(50)*aux(54)
aux(45) =< aux(42)+aux(120)
s(342) =< aux(115)+aux(114)+aux(139)
aux(49) =< aux(102)+aux(42)+aux(138)
aux(43) =< aux(102)+aux(42)+aux(138)
aux(44) =< aux(94)+aux(93)+aux(95)
s(331) =< aux(94)+aux(93)+aux(95)
s(341) =< aux(94)+aux(93)+aux(95)
it(53) =< aux(88)+aux(87)+aux(139)
s(334) =< aux(88)+aux(87)+aux(139)
aux(45) =< it(53)*aux(61)
s(342) =< it(53)*aux(81)
s(339) =< it(53)*aux(52)
aux(67) =< it(53)*aux(61)
s(338) =< it(53)*aux(81)
s(337) =< it(53)*aux(61)
s(192) =< aux(140)+aux(42)+aux(43)+aux(49)+aux(49)
s(189) =< aux(41)+aux(42)+aux(43)+aux(44)+aux(45)
s(321) =< aux(45)+aux(67)+aux(42)+aux(42)+aux(140)
aux(57) =< s(189)+2
aux(56) =< s(189)+1
aux(55) =< s(189)
aux(58) =< s(192)
s(322) =< it(50)*aux(57)
s(303) =< it(50)*aux(56)
s(298) =< it(50)*aux(55)
s(321) =< it(50)*aux(58)
s(305) =< it(50)*aux(58)
s(287) =< it(50)*aux(57)
s(336) =< s(339)
s(309) =< aux(102)
s(333) =< s(334)
s(308) =< s(321)
s(310) =< s(326)
s(293) =< s(298)
s(242) =< aux(58)-1
s(323) =< s(308)*aux(55)
s(324) =< s(308)*aux(58)
s(312) =< s(308)*s(242)
s(313) =< s(324)
s(314) =< s(323)
s(315) =< s(321)
s(315) =< s(303)
s(290) =< s(303)
s(317) =< s(322)
s(319) =< s(321)
s(319) =< s(303)
s(318) =< s(319)
s(289) =< s(305)
s(292) =< s(302)
s(200) =< s(192)-1
s(299) =< s(289)*s(189)
s(300) =< s(289)*s(192)
s(294) =< s(289)*s(200)
s(295) =< s(300)
s(296) =< s(299)

  with precondition: [V=0,V14=0,Out=0,V1>=2,V6>=0] 

* Chain [59,[50,51,52,53,54],60]: 43*it(50)+18*it(53)+1*s(285)+3*s(286)+1*s(287)+2*s(288)+24*s(289)+15*s(290)+2*s(292)+13*s(293)+4*s(294)+12*s(295)+8*s(296)+2*s(306)+23*s(308)+11*s(309)+8*s(310)+4*s(312)+12*s(313)+8*s(314)+1*s(315)+4*s(317)+2*s(318)+1*s(331)+3*s(333)+4*s(336)+1*s(337)+1*s(338)+1*s(341)+1*s(342)+1*s(345)+1*s(346)+1*s(347)+12
  Such that:aux(91) =< V1+V6
aux(95) =< 2*V1
aux(97) =< 2*V1+V6
aux(74) =< V6-Out
aux(41) =< 2*V6
aux(142) =< 1
aux(143) =< V1
aux(144) =< V6
aux(145) =< V6+1
s(345) =< aux(142)
s(346) =< aux(144)
s(347) =< aux(145)
it(50) =< aux(143)
it(53) =< aux(143)
aux(61) =< aux(145)-1
aux(124) =< aux(145)-2
aux(119) =< aux(91)
aux(118) =< aux(91)-1
aux(81) =< aux(145)
aux(52) =< aux(143)+1
aux(98) =< aux(97)+1
aux(54) =< aux(145)+1
aux(92) =< aux(91)+1
aux(63) =< aux(143)
aux(93) =< it(50)*aux(97)
aux(87) =< it(50)*aux(91)
s(302) =< it(50)*aux(145)
s(285) =< it(50)*aux(143)
aux(42) =< it(50)*aux(61)
aux(120) =< it(50)*aux(124)
aux(115) =< it(50)*aux(119)
aux(114) =< it(50)*aux(118)
aux(43) =< it(50)*aux(61)
aux(102) =< it(50)*aux(81)
aux(94) =< it(50)*aux(98)
s(331) =< it(50)*aux(54)
aux(88) =< it(50)*aux(92)
s(334) =< it(50)*aux(81)
s(288) =< it(50)*aux(54)
s(286) =< it(50)*aux(52)
s(306) =< it(50)*aux(63)
s(326) =< it(50)*aux(54)
aux(45) =< aux(42)+aux(120)
s(342) =< aux(115)+aux(114)+aux(143)
aux(49) =< aux(102)+aux(42)+aux(142)
aux(43) =< aux(102)+aux(42)+aux(142)
aux(44) =< aux(94)+aux(93)+aux(95)
s(331) =< aux(94)+aux(93)+aux(95)
s(341) =< aux(94)+aux(93)+aux(95)
it(53) =< aux(88)+aux(87)+aux(143)
s(334) =< aux(88)+aux(87)+aux(143)
aux(45) =< it(53)*aux(61)
s(342) =< it(53)*aux(81)
s(339) =< it(53)*aux(52)
aux(67) =< it(53)*aux(61)
s(338) =< it(53)*aux(81)
s(337) =< it(53)*aux(61)
s(192) =< aux(144)+aux(42)+aux(43)+aux(49)+aux(49)
s(189) =< aux(41)+aux(42)+aux(43)+aux(44)+aux(45)
s(321) =< aux(45)+aux(67)+aux(42)+aux(42)+aux(144)
aux(57) =< s(189)+2
aux(56) =< s(189)+1
aux(55) =< s(189)
aux(58) =< s(192)
s(321) =< aux(45)+aux(67)+aux(42)+aux(42)+aux(74)
s(322) =< it(50)*aux(57)
s(303) =< it(50)*aux(56)
s(298) =< it(50)*aux(55)
s(321) =< it(50)*aux(58)
s(305) =< it(50)*aux(58)
s(287) =< it(50)*aux(57)
s(336) =< s(339)
s(309) =< aux(102)
s(333) =< s(334)
s(308) =< s(321)
s(310) =< s(326)
s(293) =< s(298)
s(242) =< aux(58)-1
s(323) =< s(308)*aux(55)
s(324) =< s(308)*aux(58)
s(312) =< s(308)*s(242)
s(313) =< s(324)
s(314) =< s(323)
s(315) =< s(321)
s(315) =< s(303)
s(290) =< s(303)
s(317) =< s(322)
s(319) =< s(321)
s(319) =< s(303)
s(318) =< s(319)
s(289) =< s(305)
s(292) =< s(302)
s(200) =< s(192)-1
s(299) =< s(289)*s(189)
s(300) =< s(289)*s(192)
s(294) =< s(289)*s(200)
s(295) =< s(300)
s(296) =< s(299)

  with precondition: [V=0,V14=0,V1>=2,V6>=0,Out>=0] 

* Chain [59,63]: 2*s(160)+2*s(161)+1*s(346)+1*s(347)+11
  Such that:aux(38) =< V1
s(346) =< V6
s(347) =< V6+1
aux(146) =< 1
s(161) =< aux(146)
s(160) =< aux(38)

  with precondition: [V=0,V14=0,Out=0,V1>=1,V6>=0] 

* Chain [59,60]: 2*s(344)+1*s(346)+1*s(347)+12
  Such that:s(346) =< Out
s(347) =< Out+1
aux(147) =< 1
s(344) =< aux(147)

  with precondition: [V=0,V1=1,V14=0,V6=Out,V6>=0] 

* Chain [58,[50,51,52,53,54],63]: 45*it(50)+18*it(53)+1*s(285)+3*s(286)+1*s(287)+2*s(288)+24*s(289)+15*s(290)+2*s(292)+13*s(293)+4*s(294)+12*s(295)+8*s(296)+2*s(306)+23*s(308)+11*s(309)+8*s(310)+4*s(312)+12*s(313)+8*s(314)+1*s(315)+4*s(317)+2*s(318)+1*s(331)+3*s(333)+4*s(336)+1*s(337)+1*s(338)+1*s(341)+1*s(342)+1*s(348)+1*s(349)+1*s(350)+11
  Such that:s(348) =< 1
aux(97) =< 2*V1+V6
aux(95) =< 2*V1+2*V6
s(349) =< V6
aux(131) =< 2*V6
aux(103) =< 2*V6+1
aux(148) =< V1
aux(149) =< V1+V6
aux(150) =< V1+2*V6
aux(151) =< V6+1
aux(89) =< aux(149)
aux(89) =< aux(150)
s(350) =< aux(151)
it(50) =< aux(148)
it(53) =< aux(148)
aux(61) =< aux(151)-1
aux(124) =< aux(151)-2
aux(119) =< aux(149)
aux(118) =< aux(149)-1
aux(81) =< aux(151)
aux(52) =< aux(148)+1
aux(98) =< aux(97)+1
aux(54) =< aux(151)+1
aux(92) =< aux(149)+1
aux(63) =< aux(148)
aux(93) =< it(50)*aux(97)
aux(87) =< it(50)*aux(149)
s(302) =< it(50)*aux(151)
s(285) =< it(50)*aux(148)
aux(42) =< it(50)*aux(61)
aux(120) =< it(50)*aux(124)
aux(115) =< it(50)*aux(119)
aux(114) =< it(50)*aux(118)
aux(43) =< it(50)*aux(61)
aux(102) =< it(50)*aux(81)
aux(94) =< it(50)*aux(98)
s(331) =< it(50)*aux(54)
aux(88) =< it(50)*aux(92)
s(334) =< it(50)*aux(81)
s(288) =< it(50)*aux(54)
s(286) =< it(50)*aux(52)
s(306) =< it(50)*aux(63)
s(326) =< it(50)*aux(54)
aux(45) =< aux(42)+aux(120)+aux(131)
s(342) =< aux(115)+aux(114)+aux(150)
aux(49) =< aux(102)+aux(42)+aux(103)
aux(43) =< aux(102)+aux(42)+aux(103)
aux(44) =< aux(94)+aux(93)+aux(95)
s(331) =< aux(94)+aux(93)+aux(95)
s(341) =< aux(94)+aux(93)+aux(95)
it(53) =< aux(88)+aux(87)+aux(89)
s(334) =< aux(88)+aux(87)+aux(89)
aux(45) =< it(53)*aux(61)
s(342) =< it(53)*aux(81)
s(339) =< it(53)*aux(52)
aux(67) =< it(53)*aux(61)
s(338) =< it(53)*aux(81)
s(337) =< it(53)*aux(61)
s(192) =< aux(149)+aux(42)+aux(43)+aux(49)+aux(49)
s(189) =< aux(150)+aux(42)+aux(43)+aux(44)+aux(45)
s(321) =< aux(45)+aux(67)+aux(42)+aux(42)+aux(149)
aux(57) =< s(189)+2
aux(56) =< s(189)+1
aux(55) =< s(189)
aux(58) =< s(192)
s(322) =< it(50)*aux(57)
s(303) =< it(50)*aux(56)
s(298) =< it(50)*aux(55)
s(321) =< it(50)*aux(58)
s(305) =< it(50)*aux(58)
s(287) =< it(50)*aux(57)
s(336) =< s(339)
s(309) =< aux(102)
s(333) =< s(334)
s(308) =< s(321)
s(310) =< s(326)
s(293) =< s(298)
s(242) =< aux(58)-1
s(323) =< s(308)*aux(55)
s(324) =< s(308)*aux(58)
s(312) =< s(308)*s(242)
s(313) =< s(324)
s(314) =< s(323)
s(315) =< s(321)
s(315) =< s(303)
s(290) =< s(303)
s(317) =< s(322)
s(319) =< s(321)
s(319) =< s(303)
s(318) =< s(319)
s(289) =< s(305)
s(292) =< s(302)
s(200) =< s(192)-1
s(299) =< s(289)*s(189)
s(300) =< s(289)*s(192)
s(294) =< s(289)*s(200)
s(295) =< s(300)
s(296) =< s(299)

  with precondition: [V=0,V14=0,Out=0,V1>=2,V6>=1] 

* Chain [58,[50,51,52,53,54],60]: 43*it(50)+18*it(53)+1*s(285)+3*s(286)+1*s(287)+2*s(288)+24*s(289)+15*s(290)+2*s(292)+13*s(293)+4*s(294)+12*s(295)+8*s(296)+2*s(306)+23*s(308)+11*s(309)+8*s(310)+4*s(312)+12*s(313)+8*s(314)+1*s(315)+4*s(317)+2*s(318)+1*s(331)+3*s(333)+4*s(336)+1*s(337)+1*s(338)+1*s(341)+1*s(342)+1*s(348)+1*s(349)+1*s(350)+12
  Such that:s(348) =< 1
aux(97) =< 2*V1+V6
aux(95) =< 2*V1+2*V6
s(349) =< V6
aux(74) =< V6-Out
aux(131) =< 2*V6
aux(103) =< 2*V6+1
aux(152) =< V1
aux(153) =< V1+V6
aux(154) =< V1+2*V6
aux(155) =< V6+1
aux(89) =< aux(153)
aux(89) =< aux(154)
s(350) =< aux(155)
it(50) =< aux(152)
it(53) =< aux(152)
aux(61) =< aux(155)-1
aux(124) =< aux(155)-2
aux(119) =< aux(153)
aux(118) =< aux(153)-1
aux(81) =< aux(155)
aux(52) =< aux(152)+1
aux(98) =< aux(97)+1
aux(54) =< aux(155)+1
aux(92) =< aux(153)+1
aux(63) =< aux(152)
aux(93) =< it(50)*aux(97)
aux(87) =< it(50)*aux(153)
s(302) =< it(50)*aux(155)
s(285) =< it(50)*aux(152)
aux(42) =< it(50)*aux(61)
aux(120) =< it(50)*aux(124)
aux(115) =< it(50)*aux(119)
aux(114) =< it(50)*aux(118)
aux(43) =< it(50)*aux(61)
aux(102) =< it(50)*aux(81)
aux(94) =< it(50)*aux(98)
s(331) =< it(50)*aux(54)
aux(88) =< it(50)*aux(92)
s(334) =< it(50)*aux(81)
s(288) =< it(50)*aux(54)
s(286) =< it(50)*aux(52)
s(306) =< it(50)*aux(63)
s(326) =< it(50)*aux(54)
aux(45) =< aux(42)+aux(120)+aux(131)
s(342) =< aux(115)+aux(114)+aux(154)
aux(49) =< aux(102)+aux(42)+aux(103)
aux(43) =< aux(102)+aux(42)+aux(103)
aux(44) =< aux(94)+aux(93)+aux(95)
s(331) =< aux(94)+aux(93)+aux(95)
s(341) =< aux(94)+aux(93)+aux(95)
it(53) =< aux(88)+aux(87)+aux(89)
s(334) =< aux(88)+aux(87)+aux(89)
aux(45) =< it(53)*aux(61)
s(342) =< it(53)*aux(81)
s(339) =< it(53)*aux(52)
aux(67) =< it(53)*aux(61)
s(338) =< it(53)*aux(81)
s(337) =< it(53)*aux(61)
s(192) =< aux(153)+aux(42)+aux(43)+aux(49)+aux(49)
s(189) =< aux(154)+aux(42)+aux(43)+aux(44)+aux(45)
s(321) =< aux(45)+aux(67)+aux(42)+aux(42)+aux(153)
aux(57) =< s(189)+2
aux(56) =< s(189)+1
aux(55) =< s(189)
aux(58) =< s(192)
s(321) =< aux(45)+aux(67)+aux(42)+aux(42)+aux(74)
s(322) =< it(50)*aux(57)
s(303) =< it(50)*aux(56)
s(298) =< it(50)*aux(55)
s(321) =< it(50)*aux(58)
s(305) =< it(50)*aux(58)
s(287) =< it(50)*aux(57)
s(336) =< s(339)
s(309) =< aux(102)
s(333) =< s(334)
s(308) =< s(321)
s(310) =< s(326)
s(293) =< s(298)
s(242) =< aux(58)-1
s(323) =< s(308)*aux(55)
s(324) =< s(308)*aux(58)
s(312) =< s(308)*s(242)
s(313) =< s(324)
s(314) =< s(323)
s(315) =< s(321)
s(315) =< s(303)
s(290) =< s(303)
s(317) =< s(322)
s(319) =< s(321)
s(319) =< s(303)
s(318) =< s(319)
s(289) =< s(305)
s(292) =< s(302)
s(200) =< s(192)-1
s(299) =< s(289)*s(189)
s(300) =< s(289)*s(192)
s(294) =< s(289)*s(200)
s(295) =< s(300)
s(296) =< s(299)

  with precondition: [V=0,V14=0,V1>=2,V6>=1,Out>=0] 

* Chain [58,63]: 2*s(160)+2*s(161)+1*s(349)+1*s(350)+11
  Such that:aux(38) =< V1
s(349) =< V6
s(350) =< V6+1
aux(156) =< 1
s(161) =< aux(156)
s(160) =< aux(38)

  with precondition: [V=0,V14=0,Out=0,V1>=1,V6>=1] 

* Chain [58,60]: 2*s(344)+1*s(349)+1*s(350)+12
  Such that:s(349) =< V6
s(350) =< V6+1
aux(157) =< 1
s(344) =< aux(157)

  with precondition: [V=0,V1=1,V14=0,Out>=1,V6>=Out] 

* Chain [57,[50,51,52,53,54],63]: 45*it(50)+18*it(53)+1*s(285)+3*s(286)+1*s(287)+2*s(288)+24*s(289)+15*s(290)+2*s(292)+13*s(293)+4*s(294)+12*s(295)+8*s(296)+2*s(306)+23*s(308)+11*s(309)+8*s(310)+4*s(312)+12*s(313)+8*s(314)+1*s(315)+4*s(317)+2*s(318)+1*s(331)+3*s(333)+4*s(336)+1*s(337)+1*s(338)+1*s(341)+1*s(342)+1*s(351)+1*s(353)+4*s(355)+3*s(356)+16
  Such that:s(351) =< 1
aux(131) =< V6
s(353) =< V6+2
aux(158) =< V1
aux(159) =< V1+V6
aux(160) =< 2*V1+V6
aux(161) =< 2*V1+2*V6
aux(162) =< V6+1
aux(95) =< aux(160)
s(355) =< aux(160)
aux(95) =< aux(161)
it(50) =< aux(158)
it(53) =< aux(158)
aux(61) =< aux(162)-1
aux(124) =< aux(162)-2
aux(119) =< aux(159)
aux(118) =< aux(159)-1
aux(81) =< aux(162)
aux(52) =< aux(158)+1
aux(98) =< aux(160)+1
aux(54) =< aux(162)+1
aux(92) =< aux(159)+1
aux(63) =< aux(158)
aux(93) =< it(50)*aux(160)
aux(87) =< it(50)*aux(159)
s(302) =< it(50)*aux(162)
s(285) =< it(50)*aux(158)
aux(42) =< it(50)*aux(61)
aux(120) =< it(50)*aux(124)
aux(115) =< it(50)*aux(119)
aux(114) =< it(50)*aux(118)
aux(43) =< it(50)*aux(61)
aux(102) =< it(50)*aux(81)
aux(94) =< it(50)*aux(98)
s(331) =< it(50)*aux(54)
aux(88) =< it(50)*aux(92)
s(334) =< it(50)*aux(81)
s(288) =< it(50)*aux(54)
s(286) =< it(50)*aux(52)
s(306) =< it(50)*aux(63)
s(326) =< it(50)*aux(54)
aux(45) =< aux(42)+aux(120)+aux(131)
s(342) =< aux(115)+aux(114)+aux(159)
aux(49) =< aux(102)+aux(42)+aux(162)
aux(43) =< aux(102)+aux(42)+aux(162)
aux(44) =< aux(94)+aux(93)+aux(95)
s(331) =< aux(94)+aux(93)+aux(95)
s(341) =< aux(94)+aux(93)+aux(95)
it(53) =< aux(88)+aux(87)+aux(159)
s(334) =< aux(88)+aux(87)+aux(159)
aux(45) =< it(53)*aux(61)
s(342) =< it(53)*aux(81)
s(339) =< it(53)*aux(52)
aux(67) =< it(53)*aux(61)
s(338) =< it(53)*aux(81)
s(337) =< it(53)*aux(61)
s(192) =< aux(160)+aux(42)+aux(43)+aux(49)+aux(49)
s(189) =< aux(161)+aux(42)+aux(43)+aux(44)+aux(45)
s(321) =< aux(45)+aux(67)+aux(42)+aux(42)+aux(160)
aux(57) =< s(189)+2
aux(56) =< s(189)+1
aux(55) =< s(189)
aux(58) =< s(192)
s(322) =< it(50)*aux(57)
s(303) =< it(50)*aux(56)
s(298) =< it(50)*aux(55)
s(321) =< it(50)*aux(58)
s(305) =< it(50)*aux(58)
s(287) =< it(50)*aux(57)
s(336) =< s(339)
s(309) =< aux(102)
s(333) =< s(334)
s(308) =< s(321)
s(310) =< s(326)
s(293) =< s(298)
s(242) =< aux(58)-1
s(323) =< s(308)*aux(55)
s(324) =< s(308)*aux(58)
s(312) =< s(308)*s(242)
s(313) =< s(324)
s(314) =< s(323)
s(315) =< s(321)
s(315) =< s(303)
s(290) =< s(303)
s(317) =< s(322)
s(319) =< s(321)
s(319) =< s(303)
s(318) =< s(319)
s(289) =< s(305)
s(292) =< s(302)
s(200) =< s(192)-1
s(299) =< s(289)*s(189)
s(300) =< s(289)*s(192)
s(294) =< s(289)*s(200)
s(295) =< s(300)
s(296) =< s(299)
s(356) =< aux(162)

  with precondition: [V=0,V14=1,Out=0,V1>=2,V6>=0] 

* Chain [57,[50,51,52,53,54],60]: 43*it(50)+18*it(53)+1*s(285)+3*s(286)+1*s(287)+2*s(288)+24*s(289)+15*s(290)+2*s(292)+13*s(293)+4*s(294)+12*s(295)+8*s(296)+2*s(306)+23*s(308)+11*s(309)+8*s(310)+4*s(312)+12*s(313)+8*s(314)+1*s(315)+4*s(317)+2*s(318)+1*s(331)+3*s(333)+4*s(336)+1*s(337)+1*s(338)+1*s(341)+1*s(342)+1*s(351)+1*s(353)+4*s(355)+3*s(356)+17
  Such that:s(351) =< 1
aux(131) =< V6
s(353) =< V6+2
aux(74) =< V6-Out+1
aux(163) =< V1
aux(164) =< V1+V6
aux(165) =< 2*V1+V6
aux(166) =< 2*V1+2*V6
aux(167) =< V6+1
aux(95) =< aux(165)
s(355) =< aux(165)
aux(95) =< aux(166)
it(50) =< aux(163)
it(53) =< aux(163)
aux(61) =< aux(167)-1
aux(124) =< aux(167)-2
aux(119) =< aux(164)
aux(118) =< aux(164)-1
aux(81) =< aux(167)
aux(52) =< aux(163)+1
aux(98) =< aux(165)+1
aux(54) =< aux(167)+1
aux(92) =< aux(164)+1
aux(63) =< aux(163)
aux(93) =< it(50)*aux(165)
aux(87) =< it(50)*aux(164)
s(302) =< it(50)*aux(167)
s(285) =< it(50)*aux(163)
aux(42) =< it(50)*aux(61)
aux(120) =< it(50)*aux(124)
aux(115) =< it(50)*aux(119)
aux(114) =< it(50)*aux(118)
aux(43) =< it(50)*aux(61)
aux(102) =< it(50)*aux(81)
aux(94) =< it(50)*aux(98)
s(331) =< it(50)*aux(54)
aux(88) =< it(50)*aux(92)
s(334) =< it(50)*aux(81)
s(288) =< it(50)*aux(54)
s(286) =< it(50)*aux(52)
s(306) =< it(50)*aux(63)
s(326) =< it(50)*aux(54)
aux(45) =< aux(42)+aux(120)+aux(131)
s(342) =< aux(115)+aux(114)+aux(164)
aux(49) =< aux(102)+aux(42)+aux(167)
aux(43) =< aux(102)+aux(42)+aux(167)
aux(44) =< aux(94)+aux(93)+aux(95)
s(331) =< aux(94)+aux(93)+aux(95)
s(341) =< aux(94)+aux(93)+aux(95)
it(53) =< aux(88)+aux(87)+aux(164)
s(334) =< aux(88)+aux(87)+aux(164)
aux(45) =< it(53)*aux(61)
s(342) =< it(53)*aux(81)
s(339) =< it(53)*aux(52)
aux(67) =< it(53)*aux(61)
s(338) =< it(53)*aux(81)
s(337) =< it(53)*aux(61)
s(192) =< aux(165)+aux(42)+aux(43)+aux(49)+aux(49)
s(189) =< aux(166)+aux(42)+aux(43)+aux(44)+aux(45)
s(321) =< aux(45)+aux(67)+aux(42)+aux(42)+aux(165)
aux(57) =< s(189)+2
aux(56) =< s(189)+1
aux(55) =< s(189)
aux(58) =< s(192)
s(321) =< aux(45)+aux(67)+aux(42)+aux(42)+aux(74)
s(322) =< it(50)*aux(57)
s(303) =< it(50)*aux(56)
s(298) =< it(50)*aux(55)
s(321) =< it(50)*aux(58)
s(305) =< it(50)*aux(58)
s(287) =< it(50)*aux(57)
s(336) =< s(339)
s(309) =< aux(102)
s(333) =< s(334)
s(308) =< s(321)
s(310) =< s(326)
s(293) =< s(298)
s(242) =< aux(58)-1
s(323) =< s(308)*aux(55)
s(324) =< s(308)*aux(58)
s(312) =< s(308)*s(242)
s(313) =< s(324)
s(314) =< s(323)
s(315) =< s(321)
s(315) =< s(303)
s(290) =< s(303)
s(317) =< s(322)
s(319) =< s(321)
s(319) =< s(303)
s(318) =< s(319)
s(289) =< s(305)
s(292) =< s(302)
s(200) =< s(192)-1
s(299) =< s(289)*s(189)
s(300) =< s(289)*s(192)
s(294) =< s(289)*s(200)
s(295) =< s(300)
s(296) =< s(299)
s(356) =< aux(167)

  with precondition: [V=0,V14=1,V1>=2,V6>=0,Out>=0] 

* Chain [57,63]: 2*s(160)+2*s(161)+2*s(353)+6*s(356)+16
  Such that:aux(38) =< V1
aux(168) =< 1
aux(169) =< V6+1
aux(170) =< V6+2
s(161) =< aux(168)
s(353) =< aux(170)
s(160) =< aux(38)
s(356) =< aux(169)

  with precondition: [V=0,V14=1,Out=0,V1>=1,V6>=0] 

* Chain [57,60]: 2*s(344)+1*s(353)+1*s(355)+3*s(356)+3*s(357)+17
  Such that:s(352) =< V6+1
s(353) =< V6+2
s(354) =< Out
s(355) =< Out+1
aux(171) =< 1
s(344) =< aux(171)
s(356) =< s(352)
s(357) =< s(354)

  with precondition: [V=0,V1=1,V14=1,Out>=1,V6+1>=Out] 

* Chain [56,[50,51,52,53,54],63]: 45*it(50)+18*it(53)+1*s(285)+3*s(286)+1*s(287)+2*s(288)+24*s(289)+15*s(290)+2*s(292)+13*s(293)+4*s(294)+12*s(295)+8*s(296)+2*s(306)+23*s(308)+11*s(309)+8*s(310)+4*s(312)+12*s(313)+8*s(314)+1*s(315)+4*s(317)+2*s(318)+1*s(331)+3*s(333)+4*s(336)+1*s(337)+1*s(338)+1*s(341)+1*s(342)+1*s(358)+23*s(365)+8*s(366)+8*s(367)+3*s(368)+4*s(372)+12*s(373)+8*s(374)+1*s(375)+9*s(376)+4*s(377)+2*s(379)+16
  Such that:s(358) =< 1
s(364) =< V6+2
s(361) =< V6+V14
s(362) =< V6+V14+1
s(359) =< V6+V14+2
s(360) =< V14
aux(172) =< V1
aux(173) =< V1+V6
aux(174) =< 2*V1+V6
aux(175) =< V6
aux(176) =< V6+1
it(50) =< aux(172)
it(53) =< aux(172)
aux(61) =< aux(176)-1
aux(124) =< aux(176)-2
aux(119) =< aux(173)
aux(118) =< aux(173)-1
aux(81) =< aux(176)
aux(52) =< aux(172)+1
aux(98) =< aux(174)+1
aux(54) =< aux(176)+1
aux(92) =< aux(173)+1
aux(63) =< aux(172)
aux(93) =< it(50)*aux(174)
aux(87) =< it(50)*aux(173)
s(302) =< it(50)*aux(176)
s(285) =< it(50)*aux(172)
aux(42) =< it(50)*aux(61)
aux(120) =< it(50)*aux(124)
aux(115) =< it(50)*aux(119)
aux(114) =< it(50)*aux(118)
aux(43) =< it(50)*aux(61)
aux(102) =< it(50)*aux(81)
aux(94) =< it(50)*aux(98)
s(331) =< it(50)*aux(54)
aux(88) =< it(50)*aux(92)
s(334) =< it(50)*aux(81)
s(288) =< it(50)*aux(54)
s(286) =< it(50)*aux(52)
s(306) =< it(50)*aux(63)
s(326) =< it(50)*aux(54)
aux(45) =< aux(42)+aux(120)+aux(175)
s(342) =< aux(115)+aux(114)+aux(173)
aux(49) =< aux(102)+aux(42)+aux(176)
aux(43) =< aux(102)+aux(42)+aux(176)
aux(44) =< aux(94)+aux(93)+aux(174)
s(331) =< aux(94)+aux(93)+aux(174)
s(341) =< aux(94)+aux(93)+aux(174)
it(53) =< aux(88)+aux(87)+aux(173)
s(334) =< aux(88)+aux(87)+aux(173)
aux(45) =< it(53)*aux(61)
s(342) =< it(53)*aux(81)
s(339) =< it(53)*aux(52)
aux(67) =< it(53)*aux(61)
s(338) =< it(53)*aux(81)
s(337) =< it(53)*aux(61)
s(192) =< aux(42)+aux(43)+aux(49)+aux(49)
s(189) =< aux(175)+aux(42)+aux(43)+aux(44)+aux(45)
s(321) =< aux(45)+aux(67)+aux(42)+aux(42)
aux(57) =< s(189)+2
aux(56) =< s(189)+1
aux(55) =< s(189)
aux(58) =< s(192)
s(322) =< it(50)*aux(57)
s(303) =< it(50)*aux(56)
s(298) =< it(50)*aux(55)
s(321) =< it(50)*aux(58)
s(305) =< it(50)*aux(58)
s(287) =< it(50)*aux(57)
s(336) =< s(339)
s(309) =< aux(102)
s(333) =< s(334)
s(308) =< s(321)
s(310) =< s(326)
s(293) =< s(298)
s(242) =< aux(58)-1
s(323) =< s(308)*aux(55)
s(324) =< s(308)*aux(58)
s(312) =< s(308)*s(242)
s(313) =< s(324)
s(314) =< s(323)
s(315) =< s(321)
s(315) =< s(303)
s(290) =< s(303)
s(317) =< s(322)
s(319) =< s(321)
s(319) =< s(303)
s(318) =< s(319)
s(289) =< s(305)
s(292) =< s(302)
s(200) =< s(192)-1
s(299) =< s(289)*s(189)
s(300) =< s(289)*s(192)
s(294) =< s(289)*s(200)
s(295) =< s(300)
s(296) =< s(299)
s(365) =< s(360)
s(366) =< aux(176)
s(367) =< s(364)
s(368) =< s(361)
s(369) =< s(360)-1
s(370) =< s(365)*s(361)
s(371) =< s(365)*s(360)
s(372) =< s(365)*s(369)
s(373) =< s(371)
s(374) =< s(370)
s(375) =< s(360)
s(375) =< s(362)
s(376) =< s(362)
s(377) =< s(359)
s(378) =< s(360)
s(378) =< s(362)
s(379) =< s(378)

  with precondition: [V=0,Out=0,V1>=2,V6>=0,V14>=0] 

* Chain [56,[50,51,52,53,54],60]: 43*it(50)+18*it(53)+1*s(285)+3*s(286)+1*s(287)+2*s(288)+24*s(289)+15*s(290)+2*s(292)+13*s(293)+4*s(294)+12*s(295)+8*s(296)+2*s(306)+23*s(308)+11*s(309)+8*s(310)+4*s(312)+12*s(313)+8*s(314)+1*s(315)+4*s(317)+2*s(318)+1*s(331)+3*s(333)+4*s(336)+1*s(337)+1*s(338)+1*s(341)+1*s(342)+1*s(358)+23*s(365)+8*s(366)+8*s(367)+3*s(368)+4*s(372)+12*s(373)+8*s(374)+1*s(375)+9*s(376)+4*s(377)+2*s(379)+17
  Such that:s(358) =< 1
s(364) =< V6+2
s(361) =< V6+V14
s(362) =< V6+V14+1
s(359) =< V6+V14+2
s(360) =< V14
aux(74) =< -Out
aux(177) =< V1
aux(178) =< V1+V6
aux(179) =< 2*V1+V6
aux(180) =< V6
aux(181) =< V6+1
it(50) =< aux(177)
it(53) =< aux(177)
aux(61) =< aux(181)-1
aux(124) =< aux(181)-2
aux(119) =< aux(178)
aux(118) =< aux(178)-1
aux(81) =< aux(181)
aux(52) =< aux(177)+1
aux(98) =< aux(179)+1
aux(54) =< aux(181)+1
aux(92) =< aux(178)+1
aux(63) =< aux(177)
aux(93) =< it(50)*aux(179)
aux(87) =< it(50)*aux(178)
s(302) =< it(50)*aux(181)
s(285) =< it(50)*aux(177)
aux(42) =< it(50)*aux(61)
aux(120) =< it(50)*aux(124)
aux(115) =< it(50)*aux(119)
aux(114) =< it(50)*aux(118)
aux(43) =< it(50)*aux(61)
aux(102) =< it(50)*aux(81)
aux(94) =< it(50)*aux(98)
s(331) =< it(50)*aux(54)
aux(88) =< it(50)*aux(92)
s(334) =< it(50)*aux(81)
s(288) =< it(50)*aux(54)
s(286) =< it(50)*aux(52)
s(306) =< it(50)*aux(63)
s(326) =< it(50)*aux(54)
aux(45) =< aux(42)+aux(120)+aux(180)
s(342) =< aux(115)+aux(114)+aux(178)
aux(49) =< aux(102)+aux(42)+aux(181)
aux(43) =< aux(102)+aux(42)+aux(181)
aux(44) =< aux(94)+aux(93)+aux(179)
s(331) =< aux(94)+aux(93)+aux(179)
s(341) =< aux(94)+aux(93)+aux(179)
it(53) =< aux(88)+aux(87)+aux(178)
s(334) =< aux(88)+aux(87)+aux(178)
aux(45) =< it(53)*aux(61)
s(342) =< it(53)*aux(81)
s(339) =< it(53)*aux(52)
aux(67) =< it(53)*aux(61)
s(338) =< it(53)*aux(81)
s(337) =< it(53)*aux(61)
s(192) =< aux(42)+aux(43)+aux(49)+aux(49)
s(189) =< aux(180)+aux(42)+aux(43)+aux(44)+aux(45)
s(321) =< aux(45)+aux(67)+aux(42)+aux(42)
aux(57) =< s(189)+2
aux(56) =< s(189)+1
aux(55) =< s(189)
aux(58) =< s(192)
s(321) =< aux(45)+aux(67)+aux(42)+aux(42)+aux(74)
s(322) =< it(50)*aux(57)
s(303) =< it(50)*aux(56)
s(298) =< it(50)*aux(55)
s(321) =< it(50)*aux(58)
s(305) =< it(50)*aux(58)
s(287) =< it(50)*aux(57)
s(336) =< s(339)
s(309) =< aux(102)
s(333) =< s(334)
s(308) =< s(321)
s(310) =< s(326)
s(293) =< s(298)
s(242) =< aux(58)-1
s(323) =< s(308)*aux(55)
s(324) =< s(308)*aux(58)
s(312) =< s(308)*s(242)
s(313) =< s(324)
s(314) =< s(323)
s(315) =< s(321)
s(315) =< s(303)
s(290) =< s(303)
s(317) =< s(322)
s(319) =< s(321)
s(319) =< s(303)
s(318) =< s(319)
s(289) =< s(305)
s(292) =< s(302)
s(200) =< s(192)-1
s(299) =< s(289)*s(189)
s(300) =< s(289)*s(192)
s(294) =< s(289)*s(200)
s(295) =< s(300)
s(296) =< s(299)
s(365) =< s(360)
s(366) =< aux(181)
s(367) =< s(364)
s(368) =< s(361)
s(369) =< s(360)-1
s(370) =< s(365)*s(361)
s(371) =< s(365)*s(360)
s(372) =< s(365)*s(369)
s(373) =< s(371)
s(374) =< s(370)
s(375) =< s(360)
s(375) =< s(362)
s(376) =< s(362)
s(377) =< s(359)
s(378) =< s(360)
s(378) =< s(362)
s(379) =< s(378)

  with precondition: [V=0,V1>=2,V6>=0,V14>=0,Out>=0] 

* Chain [56,63]: 2*s(160)+2*s(161)+23*s(365)+8*s(366)+8*s(367)+3*s(368)+4*s(372)+12*s(373)+8*s(374)+1*s(375)+9*s(376)+4*s(377)+2*s(379)+16
  Such that:aux(38) =< V1
s(363) =< V6+1
s(364) =< V6+2
s(361) =< V6+V14
s(362) =< V6+V14+1
s(359) =< V6+V14+2
s(360) =< V14
aux(182) =< 1
s(161) =< aux(182)
s(160) =< aux(38)
s(365) =< s(360)
s(366) =< s(363)
s(367) =< s(364)
s(368) =< s(361)
s(369) =< s(360)-1
s(370) =< s(365)*s(361)
s(371) =< s(365)*s(360)
s(372) =< s(365)*s(369)
s(373) =< s(371)
s(374) =< s(370)
s(375) =< s(360)
s(375) =< s(362)
s(376) =< s(362)
s(377) =< s(359)
s(378) =< s(360)
s(378) =< s(362)
s(379) =< s(378)

  with precondition: [V=0,Out=0,V1>=1,V6>=0,V14>=0] 

* Chain [56,60]: 2*s(344)+23*s(365)+8*s(366)+8*s(367)+3*s(368)+4*s(372)+12*s(373)+8*s(374)+1*s(375)+9*s(376)+4*s(377)+2*s(379)+17
  Such that:s(363) =< V6+1
s(364) =< V6+2
s(361) =< V6+V14
s(362) =< V6+V14+1
s(359) =< V6+V14+2
s(360) =< V14
aux(183) =< 1
s(344) =< aux(183)
s(365) =< s(360)
s(366) =< s(363)
s(367) =< s(364)
s(368) =< s(361)
s(369) =< s(360)-1
s(370) =< s(365)*s(361)
s(371) =< s(365)*s(360)
s(372) =< s(365)*s(369)
s(373) =< s(371)
s(374) =< s(370)
s(375) =< s(360)
s(375) =< s(362)
s(376) =< s(362)
s(377) =< s(359)
s(378) =< s(360)
s(378) =< s(362)
s(379) =< s(378)

  with precondition: [V=0,V1=1,Out=0,V6>=0,V14>=0] 

* Chain [55,[50,51,52,53,54],63]: 45*it(50)+18*it(53)+1*s(285)+3*s(286)+1*s(287)+2*s(288)+24*s(289)+15*s(290)+2*s(292)+13*s(293)+4*s(294)+12*s(295)+8*s(296)+2*s(306)+23*s(308)+11*s(309)+8*s(310)+4*s(312)+12*s(313)+8*s(314)+1*s(315)+4*s(317)+2*s(318)+1*s(331)+3*s(333)+4*s(336)+1*s(337)+1*s(338)+1*s(341)+1*s(342)+1*s(380)+1*s(381)+1*s(383)+24*s(389)+6*s(390)+2*s(392)+10*s(393)+4*s(397)+12*s(398)+8*s(399)+16
  Such that:s(380) =< 1
s(383) =< V6+2
s(381) =< V6+V14+2
aux(41) =< 2*V6+V14
s(384) =< V14
aux(184) =< V1
aux(185) =< V1+V6
aux(186) =< 2*V1+V6
aux(187) =< V6
aux(188) =< V6+1
aux(189) =< V6+V14
aux(190) =< V6+V14+1
it(50) =< aux(184)
it(53) =< aux(184)
aux(61) =< aux(188)-1
aux(124) =< aux(188)-2
aux(119) =< aux(185)
aux(118) =< aux(185)-1
aux(81) =< aux(188)
aux(52) =< aux(184)+1
aux(98) =< aux(186)+1
aux(54) =< aux(188)+1
aux(92) =< aux(185)+1
aux(63) =< aux(184)
aux(93) =< it(50)*aux(186)
aux(87) =< it(50)*aux(185)
s(302) =< it(50)*aux(188)
s(285) =< it(50)*aux(184)
aux(42) =< it(50)*aux(61)
aux(120) =< it(50)*aux(124)
aux(115) =< it(50)*aux(119)
aux(114) =< it(50)*aux(118)
aux(43) =< it(50)*aux(61)
aux(102) =< it(50)*aux(81)
aux(94) =< it(50)*aux(98)
s(331) =< it(50)*aux(54)
aux(88) =< it(50)*aux(92)
s(334) =< it(50)*aux(81)
s(288) =< it(50)*aux(54)
s(286) =< it(50)*aux(52)
s(306) =< it(50)*aux(63)
s(326) =< it(50)*aux(54)
aux(45) =< aux(42)+aux(120)+aux(187)
s(342) =< aux(115)+aux(114)+aux(185)
aux(49) =< aux(102)+aux(42)+aux(187)
aux(43) =< aux(102)+aux(42)+aux(187)
aux(44) =< aux(94)+aux(93)+aux(186)
s(331) =< aux(94)+aux(93)+aux(186)
s(341) =< aux(94)+aux(93)+aux(186)
it(53) =< aux(88)+aux(87)+aux(185)
s(334) =< aux(88)+aux(87)+aux(185)
aux(45) =< it(53)*aux(61)
s(342) =< it(53)*aux(81)
s(339) =< it(53)*aux(52)
aux(67) =< it(53)*aux(61)
s(338) =< it(53)*aux(81)
s(337) =< it(53)*aux(61)
s(192) =< aux(189)+aux(42)+aux(43)+aux(49)+aux(49)
s(189) =< aux(41)+aux(42)+aux(43)+aux(44)+aux(45)
s(321) =< aux(45)+aux(67)+aux(42)+aux(42)+aux(189)
aux(57) =< s(189)+2
aux(56) =< s(189)+1
aux(55) =< s(189)
aux(58) =< s(192)
s(322) =< it(50)*aux(57)
s(303) =< it(50)*aux(56)
s(298) =< it(50)*aux(55)
s(321) =< it(50)*aux(58)
s(305) =< it(50)*aux(58)
s(287) =< it(50)*aux(57)
s(336) =< s(339)
s(309) =< aux(102)
s(333) =< s(334)
s(308) =< s(321)
s(310) =< s(326)
s(293) =< s(298)
s(242) =< aux(58)-1
s(323) =< s(308)*aux(55)
s(324) =< s(308)*aux(58)
s(312) =< s(308)*s(242)
s(313) =< s(324)
s(314) =< s(323)
s(315) =< s(321)
s(315) =< s(303)
s(290) =< s(303)
s(317) =< s(322)
s(319) =< s(321)
s(319) =< s(303)
s(318) =< s(319)
s(289) =< s(305)
s(292) =< s(302)
s(200) =< s(192)-1
s(299) =< s(289)*s(189)
s(300) =< s(289)*s(192)
s(294) =< s(289)*s(200)
s(295) =< s(300)
s(296) =< s(299)
s(389) =< s(384)
s(390) =< aux(190)
s(392) =< aux(188)
s(393) =< aux(189)
s(394) =< s(384)-1
s(395) =< s(389)*aux(189)
s(396) =< s(389)*s(384)
s(397) =< s(389)*s(394)
s(398) =< s(396)
s(399) =< s(395)

  with precondition: [V=0,Out=0,V1>=2,V6>=0,V14>=2] 

* Chain [55,[50,51,52,53,54],60]: 43*it(50)+18*it(53)+1*s(285)+3*s(286)+1*s(287)+2*s(288)+24*s(289)+15*s(290)+2*s(292)+13*s(293)+4*s(294)+12*s(295)+8*s(296)+2*s(306)+23*s(308)+11*s(309)+8*s(310)+4*s(312)+12*s(313)+8*s(314)+1*s(315)+4*s(317)+2*s(318)+1*s(331)+3*s(333)+4*s(336)+1*s(337)+1*s(338)+1*s(341)+1*s(342)+1*s(380)+1*s(381)+1*s(383)+24*s(389)+6*s(390)+2*s(392)+10*s(393)+4*s(397)+12*s(398)+8*s(399)+17
  Such that:s(380) =< 1
s(383) =< V6+2
s(381) =< V6+V14+2
aux(74) =< V6+V14-Out
aux(41) =< 2*V6+V14
s(384) =< V14
aux(191) =< V1
aux(192) =< V1+V6
aux(193) =< 2*V1+V6
aux(194) =< V6
aux(195) =< V6+1
aux(196) =< V6+V14
aux(197) =< V6+V14+1
it(50) =< aux(191)
it(53) =< aux(191)
aux(61) =< aux(195)-1
aux(124) =< aux(195)-2
aux(119) =< aux(192)
aux(118) =< aux(192)-1
aux(81) =< aux(195)
aux(52) =< aux(191)+1
aux(98) =< aux(193)+1
aux(54) =< aux(195)+1
aux(92) =< aux(192)+1
aux(63) =< aux(191)
aux(93) =< it(50)*aux(193)
aux(87) =< it(50)*aux(192)
s(302) =< it(50)*aux(195)
s(285) =< it(50)*aux(191)
aux(42) =< it(50)*aux(61)
aux(120) =< it(50)*aux(124)
aux(115) =< it(50)*aux(119)
aux(114) =< it(50)*aux(118)
aux(43) =< it(50)*aux(61)
aux(102) =< it(50)*aux(81)
aux(94) =< it(50)*aux(98)
s(331) =< it(50)*aux(54)
aux(88) =< it(50)*aux(92)
s(334) =< it(50)*aux(81)
s(288) =< it(50)*aux(54)
s(286) =< it(50)*aux(52)
s(306) =< it(50)*aux(63)
s(326) =< it(50)*aux(54)
aux(45) =< aux(42)+aux(120)+aux(194)
s(342) =< aux(115)+aux(114)+aux(192)
aux(49) =< aux(102)+aux(42)+aux(194)
aux(43) =< aux(102)+aux(42)+aux(194)
aux(44) =< aux(94)+aux(93)+aux(193)
s(331) =< aux(94)+aux(93)+aux(193)
s(341) =< aux(94)+aux(93)+aux(193)
it(53) =< aux(88)+aux(87)+aux(192)
s(334) =< aux(88)+aux(87)+aux(192)
aux(45) =< it(53)*aux(61)
s(342) =< it(53)*aux(81)
s(339) =< it(53)*aux(52)
aux(67) =< it(53)*aux(61)
s(338) =< it(53)*aux(81)
s(337) =< it(53)*aux(61)
s(192) =< aux(196)+aux(42)+aux(43)+aux(49)+aux(49)
s(189) =< aux(41)+aux(42)+aux(43)+aux(44)+aux(45)
s(321) =< aux(45)+aux(67)+aux(42)+aux(42)+aux(196)
aux(57) =< s(189)+2
aux(56) =< s(189)+1
aux(55) =< s(189)
aux(58) =< s(192)
s(321) =< aux(45)+aux(67)+aux(42)+aux(42)+aux(74)
s(322) =< it(50)*aux(57)
s(303) =< it(50)*aux(56)
s(298) =< it(50)*aux(55)
s(321) =< it(50)*aux(58)
s(305) =< it(50)*aux(58)
s(287) =< it(50)*aux(57)
s(336) =< s(339)
s(309) =< aux(102)
s(333) =< s(334)
s(308) =< s(321)
s(310) =< s(326)
s(293) =< s(298)
s(242) =< aux(58)-1
s(323) =< s(308)*aux(55)
s(324) =< s(308)*aux(58)
s(312) =< s(308)*s(242)
s(313) =< s(324)
s(314) =< s(323)
s(315) =< s(321)
s(315) =< s(303)
s(290) =< s(303)
s(317) =< s(322)
s(319) =< s(321)
s(319) =< s(303)
s(318) =< s(319)
s(289) =< s(305)
s(292) =< s(302)
s(200) =< s(192)-1
s(299) =< s(289)*s(189)
s(300) =< s(289)*s(192)
s(294) =< s(289)*s(200)
s(295) =< s(300)
s(296) =< s(299)
s(389) =< s(384)
s(390) =< aux(197)
s(392) =< aux(195)
s(393) =< aux(196)
s(394) =< s(384)-1
s(395) =< s(389)*aux(196)
s(396) =< s(389)*s(384)
s(397) =< s(389)*s(394)
s(398) =< s(396)
s(399) =< s(395)

  with precondition: [V=0,V1>=2,V6>=0,V14>=2,Out>=0] 

* Chain [55,63]: 2*s(160)+2*s(161)+1*s(381)+1*s(383)+24*s(389)+6*s(390)+2*s(392)+10*s(393)+4*s(397)+12*s(398)+8*s(399)+16
  Such that:aux(38) =< V1
s(382) =< V6+1
s(383) =< V6+2
s(381) =< V6+V14+2
s(384) =< V14
aux(198) =< 1
aux(199) =< V6+V14
aux(200) =< V6+V14+1
s(161) =< aux(198)
s(160) =< aux(38)
s(389) =< s(384)
s(390) =< aux(200)
s(392) =< s(382)
s(393) =< aux(199)
s(394) =< s(384)-1
s(395) =< s(389)*aux(199)
s(396) =< s(389)*s(384)
s(397) =< s(389)*s(394)
s(398) =< s(396)
s(399) =< s(395)

  with precondition: [V=0,Out=0,V1>=1,V6>=0,V14>=2] 

* Chain [55,60]: 2*s(344)+1*s(381)+1*s(383)+24*s(389)+3*s(390)+3*s(391)+2*s(392)+7*s(393)+4*s(397)+12*s(398)+8*s(399)+3*s(400)+17
  Such that:s(382) =< V6+1
s(383) =< V6+2
s(385) =< V6+V14
s(386) =< V6+V14+1
s(381) =< V6+V14+2
s(384) =< V14
s(387) =< Out
s(388) =< Out+1
aux(201) =< 1
s(344) =< aux(201)
s(389) =< s(384)
s(390) =< s(386)
s(391) =< s(388)
s(392) =< s(382)
s(393) =< s(387)
s(394) =< s(384)-1
s(395) =< s(389)*s(385)
s(396) =< s(389)*s(384)
s(397) =< s(389)*s(394)
s(398) =< s(396)
s(399) =< s(395)
s(400) =< s(385)

  with precondition: [V=0,V1=1,V6>=0,V14>=2,Out>=1,V6+V14>=Out] 



Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. recursive  : [gt/3]
1. recursive  : [trunc/2]
2. recursive  : [f/4]
3. non_recursive  : [start/3]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into gt/3
1. SCC is partially evaluated into trunc/2
2. SCC is partially evaluated into f/4
3. SCC is partially evaluated into start/3

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations gt/3 
* CE 12 is refined into CE [13] 
* CE 11 is refined into CE [14] 
* CE 10 is refined into CE [15] 


#### Refined cost equations gt/3 
* CE 13: gt(V1,V,Out) = 1+ gt(W1,X1,Out)
     [X1>=0,W1>=0,X1+1=V,W1+1=V1] 
* CE 14: gt(V1,V,Out) = 1
     [V1>=1,Out=1,V=0] 
* CE 15: gt(V1,V,Out) = 1
     [V>=0,Out=0,V1=0] 

### Cost equations --> "Loop" of gt/3 
* CEs [14] --> Loop 10 
* CEs [15] --> Loop 11 
* CEs [13] --> Loop 12 

#### Loops of gt/3 
* Loop 10: gt(V1,V,Out) [V1>=1,Out=1,V=0] 
* Loop 11: gt(V1,V,Out) [V>=0,Out=0,V1=0] 
* Loop 12: gt(V1,V,Out)->  gt(V1',V',Out)
                  [V'>=0,V1'>=0,V'+1=V,V1'+1=V1] 

### Ranking functions of CR gt(V1,V,Out) 
* RF of phase [12]: [V,V1]

#### Partial ranking functions of CR gt(V1,V,Out) 
* Partial RF of phase [12]:
  - RF of loop [12:1]:
    V
    V1


### Resulting Chains:gt(V1,V,Out) 
* [[12],11]
* [[12],10]
* [11]
* [10]


### Merging Chains  gt/3 into  External patterns of execution 
* [[11]] --> 1 
* [[10]] --> 2 
* [[11,[12]]] --> 3 
* [[10,[12]]] --> 4 


### Specialization of cost equations trunc/2 
* CE 9 is refined into CE [16] 
* CE 8 is refined into CE [17] 
* CE 7 is refined into CE [18] 


#### Refined cost equations trunc/2 
* CE 16: trunc(V1,Out) = 1+ trunc(W1,X1)
     [W1>=0,X1+2=Out,W1+2=V1] 
* CE 17: trunc(V1,Out) = 1
     [Out=0,V1=1] 
* CE 18: trunc(V1,Out) = 1
     [Out=0,V1=0] 

### Cost equations --> "Loop" of trunc/2 
* CEs [17] --> Loop 13 
* CEs [18] --> Loop 14 
* CEs [16] --> Loop 15 

#### Loops of trunc/2 
* Loop 13: trunc(V1,Out) [Out=0,V1=1] 
* Loop 14: trunc(V1,Out) [Out=0,V1=0] 
* Loop 15: trunc(V1,Out)->  trunc(V1',Out')
                  [V1'>=0,Out=Out'+2,V1'+2=V1] 

### Ranking functions of CR trunc(V1,Out) 
* RF of phase [15]: [V1-1]

#### Partial ranking functions of CR trunc(V1,Out) 
* Partial RF of phase [15]:
  - RF of loop [15:1]:
    V1-1


### Resulting Chains:trunc(V1,Out) 
* [[15],14]
* [[15],13]
* [14]
* [13]


### Merging Chains  trunc/2 into  External patterns of execution 
* [[14]] --> 1 
* [[13]] --> 2 
* [[14,[15]]] --> 3 
* [[13,[15]]] --> 4 


### Specialization of cost equations f/4 
* CE 6 is refined into CE [19] 
* CE 5 is refined into CE [20,21,22,23,24,25,26,27,28] 


#### Refined cost equations f/4 
* CE 19: f(V1,V,V2,Out) = 0
     [V2>=0,V>=0,V1>=0,Out=0] 
* CE 20: f(V1,V,V2,Out) = 1+ gt(W2,V2,X2):1+ trunc(Y2,Z2):1+ f(A3,B3,C3,Out)
     [V2>=0,V2+1=C3,B3=0,A3=0,Z2=0,Y2=0,X2=0,W2=0,V=0,V1=1] 
* CE 21: f(V1,V,V2,Out) = 1+ gt(W2,X2,Y2):2+ trunc(Z2,A3):2+ f(B3,C3,D3,Out)
     [D3=1,C3=0,B3=1,A3=0,Z2=1,Y2=1,X2=0,W2=1,V2=0,V=1,V1=1] 
* CE 22: f(V1,V,V2,Out) = 1+ gt(V,W2,X2):2+ trunc(V,V):3+ f(Y2,V,Z2,Out)
     [V>=2,Z2=1,Y2=1,X2=1,W2=0,V2=0,V1=1] 
* CE 23: f(V1,V,V2,Out) = 1+ gt(W2,X2,Y2):2+ trunc(Z2,A3):4+ f(B3,A3,C3,Out)
     [A3>=2,A3+1=Z2,A3+1=W2,A3+1=V,C3=1,B3=1,Y2=1,X2=0,V2=0,V1=1] 
* CE 24: f(V1,V,V2,Out) = 1+ gt(W2,V2,X2):3+ trunc(Y2,Z2):2+ f(A3,B3,C3,Out)
     [V2>=1,V2+1=C3,B3=0,A3=0,Z2=0,Y2=1,X2=0,W2=1,V=1,V1=1] 
* CE 25: f(V1,V,V2,Out) = 1+ gt(V,V2,W2):3+ trunc(V,V):3+ f(X2,V,Y2,Out)
     [V2>=V,V>=2,V2+1=Y2,X2=0,W2=0,V1=1] 
* CE 26: f(V1,V,V2,Out) = 1+ gt(W2,V2,X2):3+ trunc(Y2,Z2):4+ f(A3,Z2,B3,Out)
     [V2>=Z2+1,Z2>=2,V2+1=B3,Z2+1=Y2,Z2+1=W2,Z2+1=V,A3=0,X2=0,V1=1] 
* CE 27: f(V1,V,V2,Out) = 1+ gt(V,V2,W2):4+ trunc(V,V):3+ f(X2,V,Y2,Out)
     [V>=V2+1,V2>=1,V2+1=Y2,X2=1,W2=1,V1=1] 
* CE 28: f(V1,V,V2,Out) = 1+ gt(W2,V2,X2):4+ trunc(Y2,Z2):4+ f(A3,Z2,B3,Out)
     [Z2>=V2,Z2>=2,V2>=1,V2+1=B3,Z2+1=Y2,Z2+1=W2,Z2+1=V,A3=1,X2=1,V1=1] 

### Cost equations --> "Loop" of f/4 
* CEs [27] --> Loop 16 
* CEs [28] --> Loop 17 
* CEs [26] --> Loop 18 
* CEs [25] --> Loop 19 
* CEs [23] --> Loop 20 
* CEs [22] --> Loop 21 
* CEs [24] --> Loop 22 
* CEs [21] --> Loop 23 
* CEs [20] --> Loop 24 
* CEs [19] --> Loop 25 

#### Loops of f/4 
* Loop 16: f(V1,V,V2,Out)->  f(V1',V,V2',Out)
                  [V>=V2+1,V2>=1,V2+1=V2',V1'=1,V1=1] 
* Loop 17: f(V1,V,V2,Out)->  f(V1',V',V2',Out)
                  [V>=V2+1,V2>=1,V>=3,V2+1=V2',V=V'+1,V1'=1,V1=1] 
* Loop 18: f(V1,V,V2,Out)->  f(V1',V',V2',Out)
                  [V2>=V,V>=3,V2+1=V2',V=V'+1,V1'=0,V1=1] 
* Loop 19: f(V1,V,V2,Out)->  f(V1',V,V2',Out)
                  [V2>=V,V>=2,V2+1=V2',V1'=0,V1=1] 
* Loop 20: f(V1,V,V2,Out)->  f(V1',V',V2',Out)
                  [V>=3,V=V'+1,V2'=1,V1'=1,V2=0,V1=1] 
* Loop 21: f(V1,V,V2,Out)->  f(V1',V,V2',Out)
                  [V>=2,V2'=1,V1'=1,V2=0,V1=1] 
* Loop 22: f(V1,V,V2,Out)->  f(V1',V',V2',Out)
                  [V2>=1,V2+1=V2',V'=0,V1'=0,V=1,V1=1] 
* Loop 23: f(V1,V,V2,Out)->  f(V1',V',V2',Out)
                  [V2'=1,V'=0,V1'=1,V2=0,V=1,V1=1] 
* Loop 24: f(V1,V,V2,Out)->  f(V1',V',V2',Out)
                  [V2>=0,V2+1=V2',V'=0,V1'=0,V=0,V1=1] 
* Loop 25: f(V1,V,V2,Out) [V2>=0,V>=0,V1>=0,Out=0] 

### Ranking functions of CR f(V1,V,V2,Out) 
* RF of phase [16,17]: [V-V2]

#### Partial ranking functions of CR f(V1,V,V2,Out) 
* Partial RF of phase [16,17]:
  - RF of loop [16:1]:
    V-V2
  - RF of loop [17:1]:
    V-2
    V/2-V2/2


### Resulting Chains:f(V1,V,V2,Out) 
* [[16,17],25]
* [[16,17],19,25]
* [[16,17],18,25]
* [25]
* [24,25]
* [23,25]
* [23,24,25]
* [22,25]
* [21,[16,17],25]
* [21,[16,17],19,25]
* [21,[16,17],18,25]
* [21,25]
* [20,[16,17],25]
* [20,[16,17],19,25]
* [20,[16,17],18,25]
* [20,25]
* [19,25]
* [18,25]


### Merging Chains  f/4 into  External patterns of execution 
* [[25,24],[25]] --> 1 
* [[25,24,23],[25,23]] --> 2 
* [[25,22]] --> 3 
* [[25,20],[25,18,[16,17],20],[25,19,[16,17],20],[25,[16,17],20],[25,21],[25,18,[16,17],21],[25,19,[16,17],21],[25,[16,17],21]] --> 4 
* [[25,18],[25,19]] --> 5 
* [[25,18,[16,17]],[25,19,[16,17]],[25,[16,17]]] --> 6 


### Specialization of cost equations start/3 
* CE 2 is refined into CE [29,30,31,32,33,34] 
* CE 3 is refined into CE [35,36,37,38] 
* CE 4 is refined into CE [39,40,41,42] 


#### Refined cost equations start/3 
* CE 29: start(V1,V,V2) = 0+ f(V1,V,V2,W2):1
     [V2>=0,V>=0,V1>=0,W2=0] 
* CE 30: start(V1,V,V2) = 0+ f(W2,X2,Y2,Z2):2
     [Z2=0,Y2=0,X2=1,W2=1,V2=0,V=1,V1=1] 
* CE 31: start(V1,V,V2) = 0+ f(W2,X2,V2,Y2):3
     [V2>=1,Y2=0,X2=1,W2=1,V=1,V1=1] 
* CE 32: start(V1,V,V2) = 0+ f(W2,V,X2,Y2):4
     [V>=2,Y2=0,X2=0,W2=1,V2=0,V1=1] 
* CE 33: start(V1,V,V2) = 0+ f(W2,V,V2,X2):5
     [V2>=V,V>=2,X2=0,W2=1,V1=1] 
* CE 34: start(V1,V,V2) = 0+ f(W2,V,V2,X2):6
     [V>=V2+1,V2>=1,X2=0,W2=1,V1=1] 
* CE 35: start(V1,V,V2) = 0+ trunc(W2,X2):1
     [X2=0,W2=0,V1=0] 
* CE 36: start(V1,V,V2) = 0+ trunc(W2,X2):2
     [X2=0,W2=1,V1=1] 
* CE 37: start(V1,V,V2) = 0+ trunc(V1,V1):3
     [V1>=2] 
* CE 38: start(V1,V,V2) = 0+ trunc(W2,X2):4
     [X2>=2,X2+1=W2,X2+1=V1] 
* CE 39: start(V1,V,V2) = 0+ gt(W2,V,X2):1
     [V>=0,X2=0,W2=0,V1=0] 
* CE 40: start(V1,V,V2) = 0+ gt(V1,W2,X2):2
     [V1>=1,X2=1,W2=0,V=0] 
* CE 41: start(V1,V,V2) = 0+ gt(V1,V,W2):3
     [V>=V1,V1>=1,W2=0] 
* CE 42: start(V1,V,V2) = 0+ gt(V1,V,W2):4
     [V1>=V+1,V>=1,W2=1] 

### Cost equations --> "Loop" of start/3 
* CEs [37,38,42] --> Loop 26 
* CEs [41] --> Loop 27 
* CEs [29] --> Loop 28 
* CEs [40] --> Loop 29 
* CEs [30,31,32,33,34,36] --> Loop 30 
* CEs [35,39] --> Loop 31 

#### Loops of start/3 
* Loop 26: start(V1,V,V2) [V1>=2] 
* Loop 27: start(V1,V,V2) [V>=V1,V1>=1] 
* Loop 28: start(V1,V,V2) [V2>=0,V>=0,V1>=0] 
* Loop 29: start(V1,V,V2) [V1>=1,V=0] 
* Loop 30: start(V1,V,V2) [V1=1] 
* Loop 31: start(V1,V,V2) [V1=0] 

### Ranking functions of CR start(V1,V,V2) 

#### Partial ranking functions of CR start(V1,V,V2) 


### Resulting Chains:start(V1,V,V2) 
* [31]
* [30]
* [29]
* [28]
* [27]
* [26]


### Merging Chains  start/3 into  External patterns of execution 
* [[31]] --> 1 
* [[30]] --> 2 
* [[29]] --> 3 
* [[28]] --> 4 
* [[27]] --> 5 
* [[26]] --> 6 


Computing Bounds
=====================================

#### Cost of loops [12] 

 * loop 12:gt(V1,V,Out) -> [gt(V1',V',Out')] 
1
#### Cost of phase [12]:gt(V1,V,Out) -> [gt(V1',V',Out')] 
1*it(12)+0
  Such that:it(12) =< V1
it(12) =< V1-V1'
it(12) =< V
it(12) =< V-V'

#### Cost of phase [12]:gt(V1,V,Out) -> [gt(V1',V',Out')] 
1*it(12)+0
  Such that:it(12) =< V1
it(12) =< V1-V1'
it(12) =< V
it(12) =< V-V'

#### Cost of chains of gt(V1,V,Out):
* Chain [[12],11]: 1*it(12)+1
  Such that:it(12) =< V1

  with precondition: [Out=0,V1>=1,V>=V1] 

* Chain [[12],10]: 1*it(12)+1
  Such that:it(12) =< V

  with precondition: [Out=1,V>=1,V1>=V+1] 

* Chain [11]: 1
  with precondition: [V1=0,Out=0,V>=0] 

* Chain [10]: 1
  with precondition: [V=0,Out=1,V1>=1] 


#### Cost of loops [15] 

 * loop 15:trunc(V1,Out) -> [trunc(V1',Out')] 
1
#### Cost of phase [15]:trunc(V1,Out) -> [trunc(V1',Out')] 
1*it(15)+0
  Such that:it(15) =< V1
it(15) =< V1-V1'

#### Cost of phase [15]:trunc(V1,Out) -> [trunc(V1',Out')] 
1*it(15)+0
  Such that:it(15) =< V1
it(15) =< V1-V1'

#### Cost of chains of trunc(V1,Out):
* Chain [[15],14]: 1*it(15)+1
  Such that:it(15) =< Out

  with precondition: [V1=Out,V1>=2] 

* Chain [[15],13]: 1*it(15)+1
  Such that:it(15) =< Out

  with precondition: [V1=Out+1,V1>=3] 

* Chain [14]: 1
  with precondition: [V1=0,Out=0] 

* Chain [13]: 1
  with precondition: [V1=1,Out=0] 


#### Cost of loops [16,17] 

 * loop 16:f(V1,V,V2,Out) -> [f(V1',V',V2',Out')] 
1*s(4)+1*s(3)+3
  Such that:s(3) =< V'
s(4) =< V2'

 * loop 17:f(V1,V,V2,Out) -> [f(V1',V',V2',Out')] 
1*s(8)+1*s(7)+3
  Such that:s(7) =< V'
s(8) =< V2'

#### Cost of phase [16,17]:f(V1,V,V2,Out) -> [f(V1',V',V2',Out')] 
3*it(16)+3*it(17)+2*s(9)+1*s(11)+1*s(12)+0
  Such that:it(17) =< V-V'
it(17) =< V/2-V2/2
it(17) =< V/2-V2/2-V'/2+V2'/2
aux(5) =< V
aux(6) =< V-V2
aux(7) =< V-V2-V'+V2'
it(17) =< aux(5)
it(16) =< aux(6)
it(17) =< aux(6)
it(16) =< aux(7)
it(17) =< aux(7)
aux(4) =< aux(5)
aux(3) =< aux(5)-1
s(9) =< it(16)*aux(5)
s(11) =< it(17)*aux(4)
s(12) =< it(17)*aux(3)

#### Cost of phase [16,17]:f(V1,V,V2,Out) -> [f(V1',V',V2',Out')] 
3*it(16)+3*it(17)+2*s(9)+1*s(11)+1*s(12)+0
  Such that:it(17) =< V-V'
it(17) =< V/2-V2/2
it(17) =< V/2-V2/2-V'/2+V2'/2
aux(5) =< V
aux(6) =< V-V2
aux(7) =< V-V2-V'+V2'
it(17) =< aux(5)
it(16) =< aux(6)
it(17) =< aux(6)
it(16) =< aux(7)
it(17) =< aux(7)
aux(4) =< aux(5)
aux(3) =< aux(5)-1
s(9) =< it(16)*aux(5)
s(11) =< it(17)*aux(4)
s(12) =< it(17)*aux(3)

#### Cost of phase [16,17]:f(V1,V,V2,Out) -> [f(V1',V',V2',Out')] 
3*it(16)+3*it(17)+2*s(9)+1*s(11)+1*s(12)+0
  Such that:it(17) =< V-V'
it(17) =< V/2-V2/2
it(17) =< V/2-V2/2-V'/2+V2'/2
aux(5) =< V
aux(6) =< V-V2
aux(7) =< V-V2-V'+V2'
it(17) =< aux(5)
it(16) =< aux(6)
it(17) =< aux(6)
it(16) =< aux(7)
it(17) =< aux(7)
aux(4) =< aux(5)
aux(3) =< aux(5)-1
s(9) =< it(16)*aux(5)
s(11) =< it(17)*aux(4)
s(12) =< it(17)*aux(3)

#### Cost of chains of f(V1,V,V2,Out):
* Chain [[16,17],25]: 3*it(16)+3*it(17)+2*s(9)+1*s(11)+1*s(12)+0
  Such that:aux(5) =< V
aux(6) =< V-V2
aux(7) =< V-V2+1
it(17) =< V/2-V2/2
it(17) =< aux(5)
it(16) =< aux(6)
it(17) =< aux(6)
it(16) =< aux(7)
it(17) =< aux(7)
aux(4) =< aux(5)
aux(3) =< aux(5)-1
s(9) =< it(16)*aux(5)
s(11) =< it(17)*aux(4)
s(12) =< it(17)*aux(3)

  with precondition: [V1=1,Out=0,V2>=1,V>=V2+1] 

* Chain [[16,17],19,25]: 3*it(16)+3*it(17)+2*s(9)+1*s(11)+1*s(12)+2*s(13)+3
  Such that:aux(6) =< V-V2
aux(9) =< V
aux(10) =< 2*V-V2
aux(8) =< aux(9)
it(17) =< aux(9)
aux(8) =< aux(10)
s(13) =< aux(8)
it(16) =< aux(6)
it(17) =< aux(6)
it(16) =< aux(10)
it(17) =< aux(10)
aux(4) =< aux(9)
aux(3) =< aux(9)-1
s(9) =< it(16)*aux(9)
s(11) =< it(17)*aux(4)
s(12) =< it(17)*aux(3)

  with precondition: [V1=1,Out=0,V2>=1,V>=V2+1] 

* Chain [[16,17],18,25]: 3*it(16)+3*it(17)+2*s(9)+1*s(11)+1*s(12)+2*s(15)+3
  Such that:aux(6) =< V-V2
aux(12) =< V
aux(13) =< 2*V-V2
aux(11) =< aux(12)
it(17) =< aux(12)
aux(11) =< aux(13)
s(15) =< aux(11)
it(16) =< aux(6)
it(17) =< aux(6)
it(16) =< aux(13)
it(17) =< aux(13)
aux(4) =< aux(12)
aux(3) =< aux(12)-1
s(9) =< it(16)*aux(12)
s(11) =< it(17)*aux(4)
s(12) =< it(17)*aux(3)

  with precondition: [V1=1,Out=0,V>=3,V2>=1,V>=V2+1] 

* Chain [25]: 0
  with precondition: [Out=0,V1>=0,V>=0,V2>=0] 

* Chain [24,25]: 3
  with precondition: [V1=1,V=0,Out=0,V2>=0] 

* Chain [23,25]: 3
  with precondition: [V1=1,V=1,V2=0,Out=0] 

* Chain [23,24,25]: 6
  with precondition: [V1=1,V=1,V2=0,Out=0] 

* Chain [22,25]: 1*s(17)+3
  Such that:s(17) =< 1

  with precondition: [V1=1,V=1,Out=0,V2>=1] 

* Chain [21,[16,17],25]: 4*it(16)+3*it(17)+2*s(9)+1*s(11)+1*s(12)+3
  Such that:it(17) =< V/2
aux(14) =< V
it(16) =< aux(14)
it(17) =< aux(14)
aux(4) =< aux(14)
aux(3) =< aux(14)-1
s(9) =< it(16)*aux(14)
s(11) =< it(17)*aux(4)
s(12) =< it(17)*aux(3)

  with precondition: [V1=1,V2=0,Out=0,V>=2] 

* Chain [21,[16,17],19,25]: 6*it(16)+2*s(9)+1*s(11)+1*s(12)+2*s(13)+1*s(18)+6
  Such that:aux(10) =< 2*V
aux(15) =< V
s(18) =< aux(15)
aux(8) =< aux(15)
it(16) =< aux(15)
aux(8) =< aux(10)
s(13) =< aux(8)
it(16) =< aux(10)
aux(4) =< aux(15)
aux(3) =< aux(15)-1
s(9) =< it(16)*aux(15)
s(11) =< it(16)*aux(4)
s(12) =< it(16)*aux(3)

  with precondition: [V1=1,V2=0,Out=0,V>=2] 

* Chain [21,[16,17],18,25]: 6*it(16)+2*s(9)+1*s(11)+1*s(12)+2*s(15)+1*s(18)+6
  Such that:aux(13) =< 2*V
aux(16) =< V
s(18) =< aux(16)
aux(11) =< aux(16)
it(16) =< aux(16)
aux(11) =< aux(13)
s(15) =< aux(11)
it(16) =< aux(13)
aux(4) =< aux(16)
aux(3) =< aux(16)-1
s(9) =< it(16)*aux(16)
s(11) =< it(16)*aux(4)
s(12) =< it(16)*aux(3)

  with precondition: [V1=1,V2=0,Out=0,V>=3] 

* Chain [21,25]: 1*s(18)+3
  Such that:s(18) =< V

  with precondition: [V1=1,V2=0,Out=0,V>=2] 

* Chain [20,[16,17],25]: 4*it(16)+3*it(17)+2*s(9)+1*s(11)+1*s(12)+3
  Such that:it(17) =< V/2
aux(17) =< V
it(16) =< aux(17)
it(17) =< aux(17)
aux(4) =< aux(17)
aux(3) =< aux(17)-1
s(9) =< it(16)*aux(17)
s(11) =< it(17)*aux(4)
s(12) =< it(17)*aux(3)

  with precondition: [V1=1,V2=0,Out=0,V>=3] 

* Chain [20,[16,17],19,25]: 6*it(16)+2*s(9)+1*s(11)+1*s(12)+2*s(13)+1*s(19)+6
  Such that:aux(10) =< 2*V
aux(18) =< V
s(19) =< aux(18)
aux(8) =< aux(18)
it(16) =< aux(18)
aux(8) =< aux(10)
s(13) =< aux(8)
it(16) =< aux(10)
aux(4) =< aux(18)
aux(3) =< aux(18)-1
s(9) =< it(16)*aux(18)
s(11) =< it(16)*aux(4)
s(12) =< it(16)*aux(3)

  with precondition: [V1=1,V2=0,Out=0,V>=3] 

* Chain [20,[16,17],18,25]: 6*it(16)+2*s(9)+1*s(11)+1*s(12)+2*s(15)+1*s(19)+6
  Such that:aux(13) =< 2*V
aux(19) =< V
s(19) =< aux(19)
aux(11) =< aux(19)
it(16) =< aux(19)
aux(11) =< aux(13)
s(15) =< aux(11)
it(16) =< aux(13)
aux(4) =< aux(19)
aux(3) =< aux(19)-1
s(9) =< it(16)*aux(19)
s(11) =< it(16)*aux(4)
s(12) =< it(16)*aux(3)

  with precondition: [V1=1,V2=0,Out=0,V>=4] 

* Chain [20,25]: 1*s(19)+3
  Such that:s(19) =< V

  with precondition: [V1=1,V2=0,Out=0,V>=3] 

* Chain [19,25]: 2*s(13)+3
  Such that:aux(8) =< V
s(13) =< aux(8)

  with precondition: [V1=1,Out=0,V>=2,V2>=V] 

* Chain [18,25]: 2*s(15)+3
  Such that:aux(11) =< V
s(15) =< aux(11)

  with precondition: [V1=1,Out=0,V>=3,V2>=V] 


#### Cost of chains of start(V1,V,V2):
* Chain [31]: 1
  with precondition: [V1=0] 

* Chain [30]: 1*s(120)+18*s(124)+6*s(125)+24*s(127)+8*s(128)+8*s(131)+4*s(132)+4*s(133)+4*s(134)+2*s(135)+2*s(136)+3*s(140)+3*s(144)+2*s(147)+1*s(148)+1*s(149)+6*s(151)+4*s(152)+6*s(153)+4*s(154)+2*s(155)+2*s(156)+6
  Such that:s(120) =< 1
s(142) =< V-V2
s(139) =< V-V2+1
s(122) =< 2*V
s(143) =< 2*V-V2
s(123) =< V/2
s(140) =< V/2-V2/2
aux(27) =< V
s(124) =< aux(27)
s(125) =< s(123)
s(126) =< aux(27)
s(127) =< aux(27)
s(126) =< s(122)
s(128) =< s(126)
s(127) =< s(122)
s(129) =< aux(27)
s(130) =< aux(27)-1
s(131) =< s(127)*aux(27)
s(132) =< s(127)*s(129)
s(133) =< s(127)*s(130)
s(125) =< aux(27)
s(134) =< s(124)*aux(27)
s(135) =< s(125)*s(129)
s(136) =< s(125)*s(130)
s(140) =< aux(27)
s(144) =< s(142)
s(140) =< s(142)
s(144) =< s(139)
s(140) =< s(139)
s(147) =< s(144)*aux(27)
s(148) =< s(140)*s(129)
s(149) =< s(140)*s(130)
s(150) =< aux(27)
s(151) =< aux(27)
s(150) =< s(143)
s(152) =< s(150)
s(153) =< s(142)
s(151) =< s(142)
s(153) =< s(143)
s(151) =< s(143)
s(154) =< s(153)*aux(27)
s(155) =< s(151)*s(129)
s(156) =< s(151)*s(130)

  with precondition: [V1=1] 

* Chain [29]: 1
  with precondition: [V=0,V1>=1] 

* Chain [28]: 3
  with precondition: [V1>=0,V>=0,V2>=0] 

* Chain [27]: 1*s(157)+1
  Such that:s(157) =< V1

  with precondition: [V1>=1,V>=V1] 

* Chain [26]: 2*s(158)+1*s(160)+1
  Such that:s(160) =< V
aux(28) =< V1
s(158) =< aux(28)

  with precondition: [V1>=2] 


Closed-form bounds of start(V1,V,V2): 
-------------------------------------
* Chain [31] with precondition: [V1=0] 
    - Upper bound: 1 
    - Complexity: constant 
* Chain [30] with precondition: [V1=1] 
    - Upper bound: nat(V)*60+7+nat(V)*18*nat(V)+nat(V)*6*nat(V-V2)+nat(V)*2*nat(V/2)+nat(nat(V)+ -1)*6*nat(V)+nat(V/2-V2/2)*nat(nat(V)+ -1)+nat(nat(V)+ -1)*2*nat(V/2)+nat(V-V2)*9+nat(V/2-V2/2)*3+nat(V/2-V2/2)*nat(V)+nat(V/2)*6 
    - Complexity: n^2 
* Chain [29] with precondition: [V=0,V1>=1] 
    - Upper bound: 1 
    - Complexity: constant 
* Chain [28] with precondition: [V1>=0,V>=0,V2>=0] 
    - Upper bound: 3 
    - Complexity: constant 
* Chain [27] with precondition: [V1>=1,V>=V1] 
    - Upper bound: V1+1 
    - Complexity: n 
* Chain [26] with precondition: [V1>=2] 
    - Upper bound: 2*V1+1+nat(V) 
    - Complexity: n 

### Maximum cost of start(V1,V,V2): max([max([2,nat(V)*60+6+nat(V)*18*nat(V)+nat(V)*6*nat(V-V2)+nat(V)*2*nat(V/2)+nat(nat(V)+ -1)*6*nat(V)+nat(V/2-V2/2)*nat(nat(V)+ -1)+nat(nat(V)+ -1)*2*nat(V/2)+nat(V-V2)*9+nat(V/2-V2/2)*3+nat(V/2-V2/2)*nat(V)+nat(V/2)*6]),nat(V)+V1+V1])+1 
Asymptotic class: n^2 

Time statistics: 
-------------------------------------
* Partial evaluation computed in 6 ms.
* Invariants computed in 80 ms.
   - Backward Invariants 36 ms.
   - Transitive Invariants 5 ms.
* Refinement performed in 79 ms.
* Termination proved in 8 ms.
* Upper bounds computed in 175 ms.
   - Equation cost structures 25 ms.
   - Phase cost structures 41 ms.
   - Chain cost structures 34 ms.
   - Solving cost expressions 5 ms.
* Total analysis performed in 370 ms.


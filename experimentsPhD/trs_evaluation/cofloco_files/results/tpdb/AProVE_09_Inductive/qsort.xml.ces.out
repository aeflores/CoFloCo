
Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. recursive  : [append/3]
1. recursive  : [ge/3]
2. recursive  : [filterhigh/3,if2/5]
3. recursive  : [filterlow/3,if1/5]
4. recursive [non_tail,multiple] : [qsort/2]
5. non_recursive  : [start/4]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into append/3
1. SCC is partially evaluated into ge/3
2. SCC is partially evaluated into filterhigh/3
3. SCC is partially evaluated into filterlow/3
4. SCC is partially evaluated into qsort/2
5. SCC is partially evaluated into start/4

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations append/3 
* CE 27 is refined into CE [28] 
* CE 25 is refined into CE [29] 
* CE 26 is refined into CE [30] 


#### Refined cost equations append/3 
* CE 28: append(V,V3,Out) = 0
     [V3>=0,V>=0,Out=0] 
* CE 29: append(V,V3,Out) = 1
     [Out=1,V3=1,V=0] 
* CE 30: append(V,V3,Out) = 1+ append(W3,X3,Y3)
     [V+Y3>=Out,Out>=Y3+1,V+Y3=Out+W3,X3=1,V3=1] 

### Cost equations --> "Loop" of append/3 
* CEs [30] --> Loop 17 
* CEs [28] --> Loop 18 
* CEs [29] --> Loop 19 

#### Loops of append/3 
* Loop 17: append(V,V3,Out)->  append(V',V3',Out')
                  [V+Out'>=Out,Out>=Out'+1,V+Out'=Out+V',V3'=1,V3=1] 
* Loop 18: append(V,V3,Out) [V3>=0,V>=0,Out=0] 
* Loop 19: append(V,V3,Out) [Out=1,V3=1,V=0] 

### Ranking functions of CR append(V,V3,Out) 
* RF of phase [17]: [V]

#### Partial ranking functions of CR append(V,V3,Out) 
* Partial RF of phase [17]:
  - RF of loop [17:1]:
    V


### Resulting Chains:append(V,V3,Out) 
* [[17],19]
* [[17],18]
* [19]
* [18]


### Merging Chains  append/3 into  External patterns of execution 
* [[19]] --> 1 
* [[19,[17]]] --> 2 
* [[18,[17]]] --> 3 
* [[18]] --> 4 


### Specialization of cost equations ge/3 
* CE 24 is refined into CE [31] 
* CE 22 is refined into CE [32] 
* CE 23 is refined into CE [33] 


#### Refined cost equations ge/3 
* CE 31: ge(V,V3,Out) = 1+ ge(W3,X3,Out)
     [X3>=0,W3>=0,X3+1=V3,W3+1=V] 
* CE 32: ge(V,V3,Out) = 1
     [V>=0,Out=1,V3=0] 
* CE 33: ge(V,V3,Out) = 1
     [V3>=1,Out=0,V=0] 

### Cost equations --> "Loop" of ge/3 
* CEs [32] --> Loop 20 
* CEs [33] --> Loop 21 
* CEs [31] --> Loop 22 

#### Loops of ge/3 
* Loop 20: ge(V,V3,Out) [V>=0,Out=1,V3=0] 
* Loop 21: ge(V,V3,Out) [V3>=1,Out=0,V=0] 
* Loop 22: ge(V,V3,Out)->  ge(V',V3',Out)
                  [V3'>=0,V'>=0,V3'+1=V3,V'+1=V] 

### Ranking functions of CR ge(V,V3,Out) 
* RF of phase [22]: [V,V3]

#### Partial ranking functions of CR ge(V,V3,Out) 
* Partial RF of phase [22]:
  - RF of loop [22:1]:
    V
    V3


### Resulting Chains:ge(V,V3,Out) 
* [[22],21]
* [[22],20]
* [21]
* [20]


### Merging Chains  ge/3 into  External patterns of execution 
* [[21]] --> 1 
* [[20]] --> 2 
* [[21,[22]]] --> 3 
* [[20,[22]]] --> 4 


### Specialization of cost equations filterhigh/3 
* CE 17 is refined into CE [34] 
* CE 18 is refined into CE [35] 
* CE 15 is refined into CE [36,37] 
* CE 16 is refined into CE [38,39] 


#### Refined cost equations filterhigh/3 
* CE 34: filterhigh(V,V3,Out) = 1
     [V>=0,Out=0,V3=0] 
* CE 35: filterhigh(V,V3,Out) = 0
     [V3>=0,V>=0,Out=0] 
* CE 36: filterhigh(V,V3,Out) = 2+ ge(W3,V,X3):1+ filterhigh(V,Y3,Z3)
     [Y3>=0,V>=1,Out=Z3+1,Y3+1=V3,X3=0,W3=0] 
* CE 37: filterhigh(V,V3,Out) = 2+ ge(W3,V,X3):3+ filterhigh(V,Y3,Z3)
     [V>=W3+1,Y3>=0,W3>=1,W3+Z3+1=Out,W3+Y3+1=V3,X3=0] 
* CE 38: filterhigh(V,V3,Out) = 2+ ge(W3,X3,Y3):2+ filterhigh(Z3,A4,Out)
     [A4>=0,W3>=0,W3+A4+1=V3,Z3=0,Y3=1,X3=0,V=0] 
* CE 39: filterhigh(V,V3,Out) = 2+ ge(W3,V,X3):4+ filterhigh(V,Y3,Out)
     [W3>=V,Y3>=0,V>=1,W3+Y3+1=V3,X3=1] 

### Cost equations --> "Loop" of filterhigh/3 
* CEs [37] --> Loop 23 
* CEs [39] --> Loop 24 
* CEs [36] --> Loop 25 
* CEs [38] --> Loop 26 
* CEs [34,35] --> Loop 27 

#### Loops of filterhigh/3 
* Loop 23: filterhigh(V,V3,Out)->  filterhigh(V,V3',Out')
                  [V+V3'>=V3,V3>=V3'+2,V3'>=0,V3+Out'=Out+V3'] 
* Loop 24: filterhigh(V,V3,Out)->  filterhigh(V,V3',Out)
                  [V3>=V+V3'+1,V3'>=0,V>=1] 
* Loop 25: filterhigh(V,V3,Out)->  filterhigh(V,V3',Out')
                  [V3>=1,V>=1,Out=Out'+1,V3=V3'+1] 
* Loop 26: filterhigh(V,V3,Out)->  filterhigh(V',V3',Out)
                  [V3>=V3'+1,V3'>=0,V'=0,V=0] 
* Loop 27: filterhigh(V,V3,Out) [V3>=0,V>=0,Out=0] 

### Ranking functions of CR filterhigh(V,V3,Out) 
* RF of phase [23,24,25]: [V3]
* RF of phase [26]: [V3]

#### Partial ranking functions of CR filterhigh(V,V3,Out) 
* Partial RF of phase [23,24,25]:
  - RF of loop [23:1]:
    V3-1
  - RF of loop [24:1]:
    -V/2+V3/2
    V3/2-1/2
  - RF of loop [25:1]:
    V3
* Partial RF of phase [26]:
  - RF of loop [26:1]:
    V3


### Resulting Chains:filterhigh(V,V3,Out) 
* [[26],27]
* [[23,24,25],27]
* [27]


### Merging Chains  filterhigh/3 into  External patterns of execution 
* [[27],[27,[26]]] --> 1 
* [[27,[23,24,25]]] --> 2 


### Specialization of cost equations filterlow/3 
* CE 13 is refined into CE [40] 
* CE 14 is refined into CE [41] 
* CE 11 is refined into CE [42,43] 
* CE 12 is refined into CE [44,45] 


#### Refined cost equations filterlow/3 
* CE 40: filterlow(V,V3,Out) = 1
     [V>=0,Out=0,V3=0] 
* CE 41: filterlow(V,V3,Out) = 0
     [V3>=0,V>=0,Out=0] 
* CE 42: filterlow(V,V3,Out) = 2+ ge(W3,X3,Y3):1+ filterlow(Z3,A4,B4)
     [A4>=0,X3>=1,X3+B4+1=Out,X3+A4+1=V3,Z3=0,Y3=0,W3=0,V=0] 
* CE 43: filterlow(V,V3,Out) = 2+ ge(V,W3,X3):3+ filterlow(V,Y3,Z3)
     [W3>=V+1,Y3>=0,V>=1,W3+Z3+1=Out,W3+Y3+1=V3,X3=0] 
* CE 44: filterlow(V,V3,Out) = 2+ ge(V,W3,X3):2+ filterlow(V,Y3,Out)
     [Y3>=0,V>=0,Y3+1=V3,X3=1,W3=0] 
* CE 45: filterlow(V,V3,Out) = 2+ ge(V,W3,X3):4+ filterlow(V,Y3,Out)
     [V>=W3,Y3>=0,W3>=1,W3+Y3+1=V3,X3=1] 

### Cost equations --> "Loop" of filterlow/3 
* CEs [43] --> Loop 28 
* CEs [45] --> Loop 29 
* CEs [44] --> Loop 30 
* CEs [42] --> Loop 31 
* CEs [40,41] --> Loop 32 

#### Loops of filterlow/3 
* Loop 28: filterlow(V,V3,Out)->  filterlow(V,V3',Out')
                  [V3>=V+V3'+2,V3'>=0,V>=1,Out+V3'=V3+Out'] 
* Loop 29: filterlow(V,V3,Out)->  filterlow(V,V3',Out)
                  [V+V3'+1>=V3,V3>=V3'+2,V3'>=0] 
* Loop 30: filterlow(V,V3,Out)->  filterlow(V,V3',Out)
                  [V3>=1,V>=0,V3=V3'+1] 
* Loop 31: filterlow(V,V3,Out)->  filterlow(V',V3',Out')
                  [V3>=V3'+2,V3'>=0,V3+Out'=Out+V3',V'=0,V=0] 
* Loop 32: filterlow(V,V3,Out) [V3>=0,V>=0,Out=0] 

### Ranking functions of CR filterlow(V,V3,Out) 
* RF of phase [28,29,30,31]: [V3]

#### Partial ranking functions of CR filterlow(V,V3,Out) 
* Partial RF of phase [28,29,30,31]:
  - RF of loop [28:1]:
    -V/3+V3/3-1/3
    V3/3-2/3
  - RF of loop [29:1]:
    V3/2-1/2
  - RF of loop [30:1]:
    V3
  - RF of loop [31:1]:
    V3-1


### Resulting Chains:filterlow(V,V3,Out) 
* [[28,29,30,31],32]
* [32]


### Merging Chains  filterlow/3 into  External patterns of execution 
* [[32]] --> 1 
* [[32,[28,29,30,31]]] --> 2 


### Specialization of cost equations qsort/2 
* CE 19 is refined into CE [46] 
* CE 21 is refined into CE [47] 
* CE 20 is refined into CE [48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63] 


#### Refined cost equations qsort/2 
* CE 46: qsort(V,Out) = 1
     [Out=0,V=0] 
* CE 47: qsort(V,Out) = 0
     [V>=0,Out=0] 
* CE 48: qsort(V,Out) = 1+ filterlow(W,V,X):1+ qsort(Y,Z)+ filterhigh(W,V,A1):1+ qsort(B1,C1)+ append(D1,E1,F1):1
     [V>=W+1,W>=0,W+C1=0,B1=0,Z=0,Y=0,F1=1,E1=1,D1=0,A1=0,X=0,Out=1] 
* CE 49: qsort(V,Out) = 1+ filterlow(W,V,X):1+ qsort(Y,Z)+ filterhigh(W,V,A1):1+ qsort(B1,C1)+ append(D1,E1,Out):2
     [V>=W+1,Out>=2,W>=0,W+C1=0,Out=Z+1,Out=D1+1,B1=0,Y=0,E1=1,A1=0,X=0] 
* CE 50: qsort(V,Out) = 1+ filterlow(W,V,X):1+ qsort(Y,Z)+ filterhigh(W,V,A1):1+ qsort(B1,C1)+ append(Z,D1,Out):3
     [Z>=Out,V>=W+1,Out>=1,W>=0,W+C1=0,B1=0,Y=0,D1=1,A1=0,X=0] 
* CE 51: qsort(V,Out) = 1+ filterlow(W,V,X):1+ qsort(Y,Z)+ filterhigh(W,V,A1):1+ qsort(B1,C1)+ append(Z,D1,E1):4
     [V>=W+1,D1>=0,Z>=0,W>=0,D1=W+C1+1,B1=0,Y=0,E1=0,A1=0,X=0,Out=0] 
* CE 52: qsort(V,Out) = 1+ filterlow(W,V,X):1+ qsort(Y,Z)+ filterhigh(W,V,A1):2+ qsort(A1,B1)+ append(C1,D1,E1):1
     [V>=A1,V>=W+1,A1>=0,W>=1,W+B1=0,Z=0,Y=0,E1=1,D1=1,C1=0,X=0,Out=1] 
* CE 53: qsort(V,Out) = 1+ filterlow(W,V,X):1+ qsort(Y,Z)+ filterhigh(W,V,A1):2+ qsort(A1,B1)+ append(C1,D1,Out):2
     [V>=A1,V>=W+1,Out>=2,A1>=0,W>=1,W+B1=0,Out=Z+1,Out=C1+1,Y=0,D1=1,X=0] 
* CE 54: qsort(V,Out) = 1+ filterlow(W,V,X):1+ qsort(Y,Z)+ filterhigh(W,V,A1):2+ qsort(A1,B1)+ append(Z,C1,Out):3
     [Z>=Out,V>=A1,V>=W+1,Out>=1,A1>=0,W>=1,W+B1=0,Y=0,C1=1,X=0] 
* CE 55: qsort(V,Out) = 1+ filterlow(W,V,X):1+ qsort(Y,Z)+ filterhigh(W,V,A1):2+ qsort(A1,B1)+ append(Z,C1,D1):4
     [V>=A1,V>=W+1,C1>=0,Z>=0,A1>=0,W>=1,C1=W+B1+1,Y=0,D1=0,X=0,Out=0] 
* CE 56: qsort(V,Out) = 1+ filterlow(W,V,X):2+ qsort(X,Y)+ filterhigh(W,V,Z):1+ qsort(A1,B1)+ append(C1,D1,E1):1
     [V>=W+1,2*V>=X+2,V>=X,W>=0,X>=0,W+B1=0,A1=0,Y=0,E1=1,D1=1,C1=0,Z=0,Out=1] 
* CE 57: qsort(V,Out) = 1+ filterlow(W,V,X):2+ qsort(X,Y)+ filterhigh(W,V,Z):1+ qsort(A1,B1)+ append(C1,D1,Out):2
     [V>=W+1,2*V>=X+2,V>=X,Out>=2,W>=0,X>=0,W+B1=0,Out=Y+1,Out=C1+1,A1=0,D1=1,Z=0] 
* CE 58: qsort(V,Out) = 1+ filterlow(W,V,X):2+ qsort(X,Y)+ filterhigh(W,V,Z):1+ qsort(A1,B1)+ append(Y,C1,Out):3
     [Y>=Out,V>=W+1,2*V>=X+2,V>=X,Out>=1,W>=0,X>=0,W+B1=0,A1=0,C1=1,Z=0] 
* CE 59: qsort(V,Out) = 1+ filterlow(W,V,X):2+ qsort(X,Y)+ filterhigh(W,V,Z):1+ qsort(A1,B1)+ append(Y,C1,D1):4
     [V>=W+1,2*V>=X+2,V>=X,C1>=0,Y>=0,W>=0,X>=0,C1=W+B1+1,A1=0,D1=0,Z=0,Out=0] 
* CE 60: qsort(V,Out) = 1+ filterlow(W,V,X):2+ qsort(X,Y)+ filterhigh(W,V,Z):2+ qsort(Z,A1)+ append(B1,C1,D1):1
     [V>=Z,V>=W+1,V>=X,Z>=0,W>=1,X>=0,W+A1=0,Y=0,D1=1,C1=1,B1=0,Out=1] 
* CE 61: qsort(V,Out) = 1+ filterlow(W,V,X):2+ qsort(X,Y)+ filterhigh(W,V,Z):2+ qsort(Z,A1)+ append(B1,C1,Out):2
     [V>=Z,V>=W+1,V>=X,Out>=2,Z>=0,W>=1,X>=0,W+A1=0,Out=Y+1,Out=B1+1,C1=1] 
* CE 62: qsort(V,Out) = 1+ filterlow(W,V,X):2+ qsort(X,Y)+ filterhigh(W,V,Z):2+ qsort(Z,A1)+ append(Y,B1,Out):3
     [Y>=Out,V>=Z,V>=W+1,V>=X,Out>=1,Z>=0,W>=1,X>=0,W+A1=0,B1=1] 
* CE 63: qsort(V,Out) = 1+ filterlow(W,V,X):2+ qsort(X,Y)+ filterhigh(W,V,Z):2+ qsort(Z,A1)+ append(Y,B1,C1):4
     [V>=Z,V>=W+1,V>=X,B1>=0,Y>=0,Z>=0,W>=1,X>=0,B1=W+A1+1,C1=0,Out=0] 

### Cost equations --> "Loop" of qsort/2 
* CEs [54,62] --> Loop 33 
* CEs [53,61] --> Loop 34 
* CEs [50,58] --> Loop 35 
* CEs [49,57] --> Loop 36 
* CEs [52,60] --> Loop 37 
* CEs [48,56] --> Loop 38 
* CEs [55,63] --> Loop 39 
* CEs [51,59] --> Loop 40 
* CEs [46,47] --> Loop 41 

#### Loops of qsort/2 
* Loop 33: qsort(V,Out)->  qsort(V',Out')  qsort(V'2,Out'2)
                  [V+Out'2>=1,V>=V'2,V>=V',Out'>=Out,V'2>=0,V'>=0,Out>=1,0>=Out'2+1] 
* Loop 34: qsort(V,Out)->  qsort(V',Out')  qsort(V'2,Out'2)
                  [V+Out'2>=1,V>=V'2,V>=V',V'2>=0,V'>=0,Out>=2,0>=Out'2+1,Out=Out'+1] 
* Loop 35: qsort(V,Out)->  qsort(V',Out')  qsort(V'2,Out'2)
                  [V+Out'2>=1,2*V>=V'+2,V>=V',Out'>=Out,V'>=0,Out>=1,0>=Out'2,V'2=0] 
* Loop 36: qsort(V,Out)->  qsort(V',Out')  qsort(V'2,Out'2)
                  [V+Out'2>=1,2*V>=V'+2,V>=V',V'>=0,Out>=2,0>=Out'2,Out=Out'+1,V'2=0] 
* Loop 37: qsort(V,Out)->  qsort(V',Out')  qsort(V'2,Out'2)
                  [V+Out'2>=1,V>=V'2,V>=V',V'2>=0,V'>=0,0>=Out'2+1,Out'=0,Out=1] 
* Loop 38: qsort(V,Out)->  qsort(V',Out')  qsort(V'2,Out'2)
                  [V+Out'2>=1,2*V>=V'+2,V>=V',V'>=0,0>=Out'2,V'2=0,Out'=0,Out=1] 
* Loop 39: qsort(V,Out)->  qsort(V',Out')  qsort(V'2,Out'2)
                  [V+Out'2>=0,V>=V'2,V>=V',V'2>=0,Out'>=0,V'>=0,V>=2,Out=0] 
* Loop 40: qsort(V,Out)->  qsort(V',Out')  qsort(V'2,Out'2)
                  [V+Out'2>=0,2*V>=V'+2,V>=V',Out'>=0,V'>=0,V'2=0,Out=0] 
* Loop 41: qsort(V,Out) [V>=0,Out=0] 

### Ranking functions of CR qsort(V,Out) 

#### Partial ranking functions of CR qsort(V,Out) 
* Partial RF of phase [33,34,35,36,37,38,39,40]:
  - RF of loop [35:2,36:2,38:2,40:2]:
    V


### Resulting Chains:qsort(V,Out) 
* [multiple([33,34,35,36,37,38,39,40],[[],[41]])]...
* [41]


### Merging Chains  qsort/2 into  External patterns of execution 
* [[41]] --> 1 
* [[multiple([33,34,35,36,37,38,39,40],[[],[41]])]] --> 2 


### Specialization of cost equations start/4 
* CE 3 is refined into CE [64,65] 
* CE 5 is refined into CE [66,67] 
* CE 2 is refined into CE [68,69] 
* CE 4 is refined into CE [70,71] 
* CE 6 is refined into CE [72,73] 
* CE 7 is refined into CE [74,75] 
* CE 8 is refined into CE [76,77] 
* CE 9 is refined into CE [78,79,80,81] 
* CE 10 is refined into CE [82,83,84,85] 


#### Refined cost equations start/4 
* CE 64: start(V,V3,V9,V12) = 1+ filterlow(V3,V12,W12):1
     [V12>=0,V3>=0,V9>=0,W12=0,V=1] 
* CE 65: start(V,V3,V9,V12) = 1+ filterlow(V3,V12,W12):2
     [2*V12>=W12+2,V12>=W12,W12>=0,V3>=0,V9>=0,V=1] 
* CE 66: start(V,V3,V9,V12) = 1+ filterhigh(V3,V12,W12):1
     [V12>=0,V3>=0,V9>=0,W12=0,V=1] 
* CE 67: start(V,V3,V9,V12) = 1+ filterhigh(V3,V12,W12):2
     [V12+W12>=2,V12>=W12,W12>=0,V3>=1,V9>=0,V=1] 
* CE 68: start(V,V3,V9,V12) = 1+ filterlow(V3,V12,W12):1
     [V12>=0,V3>=0,V9>=0,W12=0,V=0] 
* CE 69: start(V,V3,V9,V12) = 1+ filterlow(V3,V12,W12):2
     [2*V12>=W12+2,V12>=W12,W12>=0,V3>=0,V9>=0,V=0] 
* CE 70: start(V,V3,V9,V12) = 1+ filterhigh(V3,V12,W12):1
     [V12>=0,V3>=0,V9>=0,W12=0,V=0] 
* CE 71: start(V,V3,V9,V12) = 1+ filterhigh(V3,V12,W12):2
     [V12+W12>=2,V12>=W12,W12>=0,V3>=1,V9>=0,V=0] 
* CE 72: start(V,V3,V9,V12) = 0+ qsort(V,W12):1
     [V>=0,W12=0] 
* CE 73: start(V,V3,V9,V12) = 0+ qsort(V,W12):2
     [W12>=0,V>=1] 
* CE 74: start(V,V3,V9,V12) = 0+ filterlow(V,V3,W12):1
     [V3>=0,V>=0,W12=0] 
* CE 75: start(V,V3,V9,V12) = 0+ filterlow(V,V3,W12):2
     [2*V3>=W12+2,V3>=W12,W12>=0,V>=0] 
* CE 76: start(V,V3,V9,V12) = 0+ filterhigh(V,V3,W12):1
     [V3>=0,V>=0,W12=0] 
* CE 77: start(V,V3,V9,V12) = 0+ filterhigh(V,V3,W12):2
     [V3+W12>=2,V3>=W12,W12>=0,V>=1] 
* CE 78: start(V,V3,V9,V12) = 0+ ge(W12,V3,X12):1
     [V3>=1,X12=0,W12=0,V=0] 
* CE 79: start(V,V3,V9,V12) = 0+ ge(V,W12,X12):2
     [V>=0,X12=1,W12=0,V3=0] 
* CE 80: start(V,V3,V9,V12) = 0+ ge(V,V3,W12):3
     [V3>=V+1,V>=1,W12=0] 
* CE 81: start(V,V3,V9,V12) = 0+ ge(V,V3,W12):4
     [V>=V3,V3>=1,W12=1] 
* CE 82: start(V,V3,V9,V12) = 0+ append(W12,X12,Y12):1
     [Y12=1,X12=1,W12=0,V3=1,V=0] 
* CE 83: start(V,V3,V9,V12) = 0+ append(W12,X12,Y12):2
     [Y12>=2,Y12=W12+1,Y12=V+1,X12=1,V3=1] 
* CE 84: start(V,V3,V9,V12) = 0+ append(V,W12,X12):3
     [V>=X12,X12>=1,W12=1,V3=1] 
* CE 85: start(V,V3,V9,V12) = 0+ append(V,V3,W12):4
     [V3>=0,V>=0,W12=0] 

### Cost equations --> "Loop" of start/4 
* CEs [83,84] --> Loop 42 
* CEs [79] --> Loop 43 
* CEs [64,65,66,67] --> Loop 44 
* CEs [68,69,70] --> Loop 45 
* CEs [71,72,74,75,76,77,78,80,81,82,85] --> Loop 46 
* CEs [73] --> Loop 47 

#### Loops of start/4 
* Loop 42: start(V,V3,V9,V12) [V>=1,V3=1] 
* Loop 43: start(V,V3,V9,V12) [V>=0,V3=0] 
* Loop 44: start(V,V3,V9,V12) [V12>=0,V9>=0,V3>=0,V=1] 
* Loop 45: start(V,V3,V9,V12) [V12>=0,V9>=0,V3>=0,V=0] 
* Loop 46: start(V,V3,V9,V12) [V>=0] 
* Loop 47: start(V,V3,V9,V12) [V>=1] 

### Ranking functions of CR start(V,V3,V9,V12) 

#### Partial ranking functions of CR start(V,V3,V9,V12) 


### Resulting Chains:start(V,V3,V9,V12) 
* [47]...
* [46]
* [45]
* [44]
* [43]
* [42]


### Merging Chains  start/4 into  External patterns of execution 
* [[45],[46]] --> 1 
* [[44]] --> 2 
* [[43]] --> 3 
* [[42]] --> 4 
* [[47]] --> 5 


Computing Bounds
=====================================

#### Cost of loops [17] 

 * loop 17:append(V,V3,Out) -> [append(V',V3',Out')] 
1
#### Cost of phase [17]:append(V,V3,Out) -> [append(V',V3',Out')] 
1*it(17)+0
  Such that:it(17) =< V
it(17) =< V-V'

#### Cost of phase [17]:append(V,V3,Out) -> [append(V',V3',Out')] 
1*it(17)+0
  Such that:it(17) =< V
it(17) =< V-V'

#### Cost of chains of append(V,V3,Out):
* Chain [[17],19]: 1*it(17)+1
  Such that:it(17) =< Out

  with precondition: [V3=1,V+1=Out,V>=1] 

* Chain [[17],18]: 1*it(17)+0
  Such that:it(17) =< Out

  with precondition: [V3=1,Out>=1,V>=Out] 

* Chain [19]: 1
  with precondition: [V=0,V3=1,Out=1] 

* Chain [18]: 0
  with precondition: [Out=0,V>=0,V3>=0] 


#### Cost of loops [22] 

 * loop 22:ge(V,V3,Out) -> [ge(V',V3',Out')] 
1
#### Cost of phase [22]:ge(V,V3,Out) -> [ge(V',V3',Out')] 
1*it(22)+0
  Such that:it(22) =< V
it(22) =< V-V'
it(22) =< V3
it(22) =< V3-V3'

#### Cost of phase [22]:ge(V,V3,Out) -> [ge(V',V3',Out')] 
1*it(22)+0
  Such that:it(22) =< V
it(22) =< V-V'
it(22) =< V3
it(22) =< V3-V3'

#### Cost of chains of ge(V,V3,Out):
* Chain [[22],21]: 1*it(22)+1
  Such that:it(22) =< V

  with precondition: [Out=0,V>=1,V3>=V+1] 

* Chain [[22],20]: 1*it(22)+1
  Such that:it(22) =< V3

  with precondition: [Out=1,V3>=1,V>=V3] 

* Chain [21]: 1
  with precondition: [V=0,Out=0,V3>=1] 

* Chain [20]: 1
  with precondition: [V3=0,Out=1,V>=0] 


#### Cost of loops [26] 

 * loop 26:filterhigh(V,V3,Out) -> [filterhigh(V',V3',Out')] 
3
#### Cost of phase [26]:filterhigh(V,V3,Out) -> [filterhigh(V',V3',Out')] 
3*it(26)+0
  Such that:it(26) =< V3
it(26) =< V3-V3'

#### Cost of loops [23,24,25] 

 * loop 23:filterhigh(V,V3,Out) -> [filterhigh(V',V3',Out')] 
1*s(2)+3
  Such that:s(2) =< V3-V3'

 * loop 24:filterhigh(V,V3,Out) -> [filterhigh(V',V3',Out')] 
1*s(4)+3
  Such that:s(4) =< V'

 * loop 25:filterhigh(V,V3,Out) -> [filterhigh(V',V3',Out')] 
3
#### Cost of phase [23,24,25]:filterhigh(V,V3,Out) -> [filterhigh(V',V3',Out')] 
8*it(23)+3*it(24)+0
  Such that:it(24) =< -V/2+V3/2
it(24) =< -V/2+V3/2+V'/2-V3'/2
it(24) =< V3/2
it(24) =< V3/2-V3'/2
aux(1) =< V3
aux(2) =< V3-V3'
it(23) =< aux(1)
it(24) =< aux(1)
it(23) =< aux(2)
it(24) =< aux(2)

#### Cost of chains of filterhigh(V,V3,Out):
* Chain [[26],27]: 3*it(26)+1
  Such that:it(26) =< V3

  with precondition: [V=0,Out=0,V3>=1] 

* Chain [[23,24,25],27]: 8*it(23)+3*it(24)+1
  Such that:it(24) =< -V/2+V3/2
it(24) =< V3/2
aux(3) =< V3
it(23) =< aux(3)
it(24) =< aux(3)

  with precondition: [V>=1,Out>=0,V3>=Out,Out+V3>=2] 

* Chain [27]: 1
  with precondition: [Out=0,V>=0,V3>=0] 


#### Cost of loops [28,29,30,31] 

 * loop 28:filterlow(V,V3,Out) -> [filterlow(V',V3',Out')] 
1*s(9)+3
  Such that:s(9) =< V'

 * loop 29:filterlow(V,V3,Out) -> [filterlow(V',V3',Out')] 
1*s(11)+3
  Such that:s(11) =< V3-V3'

 * loop 30:filterlow(V,V3,Out) -> [filterlow(V',V3',Out')] 
3
 * loop 31:filterlow(V,V3,Out) -> [filterlow(V',V3',Out')] 
3
#### Cost of phase [28,29,30,31]:filterlow(V,V3,Out) -> [filterlow(V',V3',Out')] 
3*it(28)+6*it(29)+5*it(30)+0
  Such that:it(28) =< -V/3+V3/3
it(28) =< -V/3+V3/3+V'/3-V3'/3
it(28) =< V3/3
it(28) =< V3/3-V3'/3
aux(4) =< V3
aux(5) =< V3-V3'
aux(6) =< V3/2
aux(7) =< V3/2-V3'/2
it(28) =< aux(4)
it(29) =< aux(4)
it(30) =< aux(4)
it(28) =< aux(5)
it(29) =< aux(5)
it(30) =< aux(5)
it(29) =< aux(6)
it(29) =< aux(7)

#### Cost of chains of filterlow(V,V3,Out):
* Chain [[28,29,30,31],32]: 3*it(28)+6*it(29)+5*it(30)+1
  Such that:it(28) =< -V/3+V3/3
it(28) =< V3/3
aux(8) =< V3
aux(9) =< V3/2
it(28) =< aux(8)
it(29) =< aux(8)
it(30) =< aux(8)
it(29) =< aux(9)

  with precondition: [V>=0,Out>=0,V3>=Out,2*V3>=Out+2] 

* Chain [32]: 1
  with precondition: [Out=0,V>=0,V3>=0] 


#### Cost of loops [33,34,35,36,37,38,39,40] 

 * loop 33:qsort(V,Out) -> [qsort(V',Out'),qsort(V'2,Out'2)] 
12*s(30)+21*s(31)+2*s(32)+3*s(27)+3
  Such that:s(27) =< V/3
s(28) =< V
s(29) =< V/2
s(30) =< s(29)
s(31) =< s(28)
s(30) =< s(28)
s(27) =< s(28)

 * loop 34:qsort(V,Out) -> [qsort(V',Out'),qsort(V'2,Out'2)] 
12*s(49)+21*s(50)+2*s(51)+3*s(46)+4
  Such that:s(46) =< V/3
s(47) =< V
s(48) =< V/2
s(49) =< s(48)
s(50) =< s(47)
s(49) =< s(47)
s(46) =< s(47)

 * loop 35:qsort(V,Out) -> [qsort(V',Out'),qsort(V'2,Out'2)] 
11*s(64)+2*s(66)+3*s(62)+6*s(65)+3
  Such that:s(61) =< V/2
s(62) =< V/3
s(63) =< V
s(64) =< s(63)
s(62) =< s(63)
s(65) =< s(63)
s(65) =< s(61)

 * loop 36:qsort(V,Out) -> [qsort(V',Out'),qsort(V'2,Out'2)] 
11*s(79)+2*s(81)+3*s(77)+6*s(80)+4
  Such that:s(76) =< V/2
s(77) =< V/3
s(78) =< V
s(79) =< s(78)
s(77) =< s(78)
s(80) =< s(78)
s(80) =< s(76)

 * loop 37:qsort(V,Out) -> [qsort(V',Out'),qsort(V'2,Out'2)] 
12*s(96)+21*s(97)+3*s(93)+4
  Such that:s(93) =< V/3
s(94) =< V
s(95) =< V/2
s(96) =< s(95)
s(97) =< s(94)
s(96) =< s(94)
s(93) =< s(94)

 * loop 38:qsort(V,Out) -> [qsort(V',Out'),qsort(V'2,Out'2)] 
11*s(108)+3*s(106)+6*s(109)+4
  Such that:s(105) =< V/2
s(106) =< V/3
s(107) =< V
s(108) =< s(107)
s(106) =< s(107)
s(109) =< s(107)
s(109) =< s(105)

 * loop 39:qsort(V,Out) -> [qsort(V',Out'),qsort(V'2,Out'2)] 
12*s(124)+21*s(125)+3*s(121)+3
  Such that:s(121) =< V/3
s(122) =< V
s(123) =< V/2
s(124) =< s(123)
s(125) =< s(122)
s(124) =< s(122)
s(121) =< s(122)

 * loop 40:qsort(V,Out) -> [qsort(V',Out'),qsort(V'2,Out'2)] 
11*s(136)+3*s(134)+6*s(137)+3
  Such that:s(133) =< V/2
s(134) =< V/3
s(135) =< V
s(136) =< s(135)
s(134) =< s(135)
s(137) =< s(135)
s(137) =< s(133)

#### Cost of phase [33,34,35,36,37,38,39,40]:qsort(V,Out) -> [] 
22*it(33)+14*it(35)+1*it([41])+12*s(138)+21*s(139)+3*s(141)+36*s(144)+63*s(145)+9*s(147)+44*s(150)+12*s(152)+24*s(153)+0
#### Cost of chains of qsort(V,Out):
* Chain [multiple([33,34,35,36,37,38,39,40],[[],[41]])]...: 22*it(33)+14*it(35)+1*it([41])+12*s(138)+21*s(139)+3*s(141)+36*s(144)+63*s(145)+9*s(147)+44*s(150)+12*s(152)+24*s(153)+0
  with precondition: [V>=1,Out>=0] 

* Chain [41]: 1
  with precondition: [Out=0,V>=0] 


#### Cost of chains of start(V,V3,V9,V12):
* Chain [47]...: 261*s(182)+0
  with precondition: [V>=1] 

* Chain [46]: 3*s(194)+8*s(196)+3*s(197)+6*s(200)+17*s(201)+3*s(203)+1*s(206)+2
  Such that:s(206) =< V
s(203) =< -V/2+V3/2
s(197) =< -V/3+V3/3
s(194) =< -V3/2+V12/2
s(197) =< V3/3
s(195) =< V12
s(194) =< V12/2
aux(68) =< V3
aux(69) =< V3/2
s(201) =< aux(68)
s(203) =< aux(69)
s(203) =< aux(68)
s(197) =< aux(68)
s(200) =< aux(68)
s(200) =< aux(69)
s(196) =< s(195)
s(194) =< s(195)

  with precondition: [V>=0] 

* Chain [45]: 3*s(208)+6*s(211)+8*s(212)+2
  Such that:s(208) =< -V3/3+V12/3
s(210) =< V12/2
s(208) =< V12/3
aux(70) =< V12
s(212) =< aux(70)
s(208) =< aux(70)
s(211) =< aux(70)
s(211) =< s(210)

  with precondition: [V=0,V3>=0,V9>=0,V12>=0] 

* Chain [44]: 3*s(214)+6*s(217)+16*s(218)+3*s(220)+2
  Such that:s(220) =< -V3/2+V12/2
s(214) =< -V3/3+V12/3
s(214) =< V12/3
aux(71) =< V12
aux(72) =< V12/2
s(218) =< aux(71)
s(220) =< aux(72)
s(220) =< aux(71)
s(214) =< aux(71)
s(217) =< aux(71)
s(217) =< aux(72)

  with precondition: [V=1,V3>=0,V9>=0,V12>=0] 

* Chain [43]: 1
  with precondition: [V3=0,V>=0] 

* Chain [42]: 1*s(223)+1*s(224)+1
  Such that:s(224) =< V
s(223) =< V+1

  with precondition: [V3=1,V>=1] 


Closed-form bounds of start(V,V3,V9,V12): 
-------------------------------------
* Chain [47]... with precondition: [V>=1] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [46] with precondition: [V>=0] 
    - Upper bound: V+2+nat(V3)*23+nat(V12)*8+nat(-V/2+V3/2)*3+nat(-V/3+V3/3)*3+nat(-V3/2+V12/2)*3 
    - Complexity: n 
* Chain [45] with precondition: [V=0,V3>=0,V9>=0,V12>=0] 
    - Upper bound: 14*V12+2+nat(-V3/3+V12/3)*3 
    - Complexity: n 
* Chain [44] with precondition: [V=1,V3>=0,V9>=0,V12>=0] 
    - Upper bound: 22*V12+2+nat(-V3/2+V12/2)*3+nat(-V3/3+V12/3)*3 
    - Complexity: n 
* Chain [43] with precondition: [V3=0,V>=0] 
    - Upper bound: 1 
    - Complexity: constant 
* Chain [42] with precondition: [V3=1,V>=1] 
    - Upper bound: 2*V+2 
    - Complexity: n 

### Maximum cost of start(V,V3,V9,V12): inf 
Asymptotic class: infinity 

Time statistics: 
-------------------------------------
* Partial evaluation computed in 88 ms.
* Invariants computed in 218 ms.
   - Backward Invariants 59 ms.
   - Transitive Invariants 68 ms.
* Refinement performed in 586 ms.
* Termination proved in 107 ms.
* Upper bounds computed in 965 ms.
   - Equation cost structures 328 ms.
   - Phase cost structures 757 ms.
   - Chain cost structures 79 ms.
   - Solving cost expressions 10 ms.
* Total analysis performed in 2083 ms.


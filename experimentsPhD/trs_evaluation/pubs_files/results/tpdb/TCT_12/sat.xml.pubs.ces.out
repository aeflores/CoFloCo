This is PUBS, version 0.2.
Copyright (C) 2007, 2008, 2009 UPM, UCM.
This program comes with ABSOLUTELY NO WARRANTY.
This is free software, and you are welcome to
redistribute it under certain conditions.



CRS $pubs_aux_entry$(A,B,C) -- THE MAIN ENTRY

  * Non Asymptotic Upper Bound: max([3+3*nat(B)+3*nat(B)*nat(B-1)+nat(B)+nat(B)*nat(B-1)+pow(nat(1*B+ -1),2),5+2*nat(A)+nat(A-1)+3*nat(A)+3*nat(A)*nat(A-1)+nat(A)+nat(A)*nat(A-1)+pow(nat(1*A+ -1),2),1+3*nat(A)+3*nat(A)*nat(A-1)+nat(A)+nat(A)*nat(A-1)+pow(nat(1*A+ -1),2),1+2*nat(A)+nat(A-1),1+nat(A),2+nat(A),1+3*nat(B)+nat(A)*nat(B)+nat(B)]) 

  * LOOPS $pubs_aux_entry$(D,E,F) -> $pubs_aux_entry$(G,H,I)

  * Ranking function: N/A

  * Invariants $pubs_aux_entry$(A,B,C) -> $pubs_aux_entry$(D,E,F)

     entry  : []
     non-rec: [A=D,B=E,C=F]
     rec    : [0=1]
     inv    : [A=D,B=E,C=F]

CRS start(A,B,C)

  * Non Asymptotic Upper Bound: max([3+3*nat(B)+3*nat(B)*nat(B-1)+nat(B)+nat(B)*nat(B-1)+pow(nat(1*B+ -1),2),5+2*nat(A)+nat(A-1)+3*nat(A)+3*nat(A)*nat(A-1)+nat(A)+nat(A)*nat(A-1)+pow(nat(1*A+ -1),2),1+3*nat(A)+3*nat(A)*nat(A-1)+nat(A)+nat(A)*nat(A-1)+pow(nat(1*A+ -1),2),1+2*nat(A)+nat(A-1),1+nat(A),2+nat(A),1+3*nat(B)+nat(A)*nat(B)+nat(B)]) 

  * LOOPS start(D,E,F) -> start(G,H,I)

  * Ranking function: N/A

  * Invariants start(A,B,C) -> start(D,E,F)

     entry  : []
     non-rec: [A=D,B=E,C=F]
     rec    : [0=1]
     inv    : [A=D,B=E,C=F]

CRS sat(A)

  * Non Asymptotic Upper Bound: 5+2*nat(A)+nat(A-1)+3*nat(A)+3*nat(A)*nat(A-1)+nat(A)+nat(A)*nat(A-1)+pow(nat(1*A+ -1),2) 

  * LOOPS sat(B) -> sat(C)

  * Ranking function: N/A

  * Invariants sat(A) -> sat(B)

     entry  : [A>=0]
     non-rec: [A=B,A>=0]
     rec    : [0=1]
     inv    : [A>=0,A=B]

CRS satck(A,B)

  * Non Asymptotic Upper Bound: 3+3*nat(B)+3*nat(B)*nat(B-1)+nat(B)+nat(B)*nat(B-1)+pow(nat(1*B+ -1),2) 

  * LOOPS satck(C,D) -> satck(E,F)

  * Ranking function: N/A

  * Invariants satck(A,B) -> satck(C,D)

     entry  : [B>=0,A>=0]
     non-rec: [A=C,B=D,B>=0,A>=0]
     rec    : [0=1]
     inv    : [A>=0,B>=0,A=C,B=D]

CRS verify(A)

  * Non Asymptotic Upper Bound: 1+3*nat(A)+3*nat(A)*nat(A-1)+nat(A)+nat(A)*nat(A-1)+pow(nat(A-1),2) 

  * LOOPS verify(B) -> verify(C)
     - [C>=0,B>=C+1]

  * Ranking function: nat(B)

  * Invariants verify(A) -> verify(B)

     entry  : [A>=0]
     non-rec: [A=B,A>=0]
     rec    : [A>=B+1,B>=0]
     inv    : [A>=B,B>=0]

CRS negate(A)

  * Non Asymptotic Upper Bound: 1 

  * LOOPS negate(B) -> negate(C)

  * Ranking function: N/A

  * Invariants negate(A) -> negate(B)

     entry  : [A>=0]
     non-rec: [A=B,A>=0]
     rec    : [0=1]
     inv    : [A>=0,A=B]

CRS member(A,B)

  * Non Asymptotic Upper Bound: 1+3*nat(B)+nat(A)*nat(B)+nat(B) 

  * LOOPS member(C,D) -> member(E,F)
     - [D>=F+1,E>=0,F>=0,C=E]

  * Ranking function: nat(D)

  * Invariants member(A,B) -> member(C,D)

     entry  : [B>=0,A>=0]
     non-rec: [A=C,B=D,B>=0,A>=0]
     rec    : [B>=D+1,D>=0,C>=0,A=C]
     inv    : [B>=D,A>=0,D>=0,A=C]

CRS if(A,B,C)

  * Non Asymptotic Upper Bound: 1 

  * LOOPS if(D,E,F) -> if(G,H,I)

  * Ranking function: N/A

  * Invariants if(A,B,C) -> if(D,E,F)

     entry  : [C>=0,B>=0,A>=0]
     non-rec: [A=D,B=E,C=F,C>=0,B>=0,A>=0]
     rec    : [0=1]
     inv    : [A>=0,B>=0,C>=0,A=D,B=E,C=F]

CRS guess(A)

  * Non Asymptotic Upper Bound: 1+2*nat(A)+nat(A-1) 

  * LOOPS guess(B) -> guess(C)
     - [B>=C+1,C>=0]

  * Ranking function: nat(B)

  * Invariants guess(A) -> guess(B)

     entry  : [A>=0]
     non-rec: [A=B,A>=0]
     rec    : [A>=B+1,B>=0]
     inv    : [A>=B,B>=0]

CRS eq(A,B)

  * Non Asymptotic Upper Bound: 2+nat(A) 

  * LOOPS eq(C,D) -> eq(E,F)
     - [D=F+1,C=E+1,C>=1,D>=1]

  * Ranking function: nat(D)

  * Invariants eq(A,B) -> eq(C,D)

     entry  : [B>=0,A>=0]
     non-rec: [A=C,B=D,B>=0,A>=0]
     rec    : [A+D=B+C,C>=0,B+C>=A,A>=C+1]
     inv    : [B>=D,A+D>=B,D>=0,A+D=B+C]

CRS choice(A)

  * Non Asymptotic Upper Bound: 1+nat(A) 

  * LOOPS choice(B) -> choice(C)
     - [C>=0,B>=C+1]

  * Ranking function: nat(B)

  * Invariants choice(A) -> choice(B)

     entry  : [A>=0]
     non-rec: [A=B,A>=0]
     rec    : [A>=B+1,B>=0]
     inv    : [A>=B,B>=0]



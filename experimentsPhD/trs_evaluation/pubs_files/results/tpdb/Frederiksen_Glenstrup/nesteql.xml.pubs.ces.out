This is PUBS, version 0.2.
Copyright (C) 2007, 2008, 2009 UPM, UCM.
This program comes with ABSOLUTELY NO WARRANTY.
This is free software, and you are welcome to
redistribute it under certain conditions.



CRS $pubs_aux_entry$(A) -- THE MAIN ENTRY

  * Non Asymptotic Upper Bound: max([1+c(failed(schemes_failed,[scc=1,cr=nesteql/1])),c(failed(schemes_failed,[scc=0,cr=eql/1])),c(failed(schemes_failed,[scc=1,cr=nesteql/1]))]) 

  * LOOPS $pubs_aux_entry$(B) -> $pubs_aux_entry$(C)

  * Ranking function: N/A

  * Invariants $pubs_aux_entry$(A) -> $pubs_aux_entry$(B)

     entry  : []
     non-rec: [A=B]
     rec    : [0=1]
     inv    : [A=B]

CRS start(A)

  * Non Asymptotic Upper Bound: max([1+c(failed(schemes_failed,[scc=1,cr=nesteql/1])),c(failed(schemes_failed,[scc=0,cr=eql/1])),c(failed(schemes_failed,[scc=1,cr=nesteql/1]))]) 

  * LOOPS start(B) -> start(C)

  * Ranking function: N/A

  * Invariants start(A) -> start(B)

     entry  : []
     non-rec: [A=B]
     rec    : [0=1]
     inv    : [A=B]

CRS number17(A)

  * Non Asymptotic Upper Bound: 1 

  * LOOPS number17(B) -> number17(C)

  * Ranking function: N/A

  * Invariants number17(A) -> number17(B)

     entry  : [A>=0]
     non-rec: [A=B,A>=0]
     rec    : [0=1]
     inv    : [A>=0,A=B]

CRS goal(A)

  * Non Asymptotic Upper Bound: 1+c(failed(schemes_failed,[scc=1,cr=nesteql/1])) 

  * LOOPS goal(B) -> goal(C)

  * Ranking function: N/A

  * Invariants goal(A) -> goal(B)

     entry  : [A>=0]
     non-rec: [A=B,A>=0]
     rec    : [0=1]
     inv    : [A>=0,A=B]

CRS nesteql(A)

  * Non Asymptotic Upper Bound: c(failed(schemes_failed,[scc=1,cr=nesteql/1])) 

  * LOOPS nesteql(B) -> nesteql(C)
     - [B>=1]

  * Ranking function: c(failed(no_rf,[scc=1,cr=nesteql/1]))

  * Invariants nesteql(A) -> nesteql(B)

     entry  : [A>=0]
     non-rec: [A=B,A>=0]
     rec    : [A>=1]
     inv    : [A>=0]

CRS eql(A)

  * Non Asymptotic Upper Bound: c(failed(schemes_failed,[scc=0,cr=eql/1])) 

  * LOOPS eql(B) -> eql(C)
     - [B=C,B>=1]

  * Ranking function: c(failed(no_rf,[scc=0,cr=eql/1]))

  * Invariants eql(A) -> eql(B)

     entry  : [A>=0]
     non-rec: [A=B,A>=0]
     rec    : [A>=1,A=B]
     inv    : [A>=0,A=B]



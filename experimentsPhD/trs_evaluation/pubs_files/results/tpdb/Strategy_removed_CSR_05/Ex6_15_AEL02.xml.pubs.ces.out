This is PUBS, version 0.2.
Copyright (C) 2007, 2008, 2009 UPM, UCM.
This program comes with ABSOLUTELY NO WARRANTY.
This is free software, and you are welcome to
redistribute it under certain conditions.



CRS $pubs_aux_entry$(A,B) -- THE MAIN ENTRY

  * Non Asymptotic Upper Bound: max([1+2*nat(A)+nat(A-1),1+nat(A),2+nat(A)+nat(-A+B-1),1+3*nat(A)+nat(A-1),1+2*nat(A)+nat(B-1),c(failed(schemes_failed,[scc=4,cr=from/1])),1+nat(A),1+nat(A),1+nat(A)]) 

  * LOOPS $pubs_aux_entry$(C,D) -> $pubs_aux_entry$(E,F)

  * Ranking function: N/A

  * Invariants $pubs_aux_entry$(A,B) -> $pubs_aux_entry$(C,D)

     entry  : []
     non-rec: [A=C,B=D]
     rec    : [0=1]
     inv    : [A=C,B=D]

CRS start(A,B)

  * Non Asymptotic Upper Bound: max([1+2*nat(A)+nat(A-1),1+nat(A),2+nat(A)+nat(-A+B-1),1+3*nat(A)+nat(A-1),1+2*nat(A)+nat(B-1),c(failed(schemes_failed,[scc=4,cr=from/1])),1+nat(A),1+nat(A),1+nat(A)]) 

  * LOOPS start(C,D) -> start(E,F)

  * Ranking function: N/A

  * Invariants start(A,B) -> start(C,D)

     entry  : []
     non-rec: [A=C,B=D]
     rec    : [0=1]
     inv    : [A=C,B=D]

CRS unquote1(A)

  * Non Asymptotic Upper Bound: 1+3*nat(A)+nat(A-1) 

  * LOOPS unquote1(B) -> unquote1(C)
     - [B>=C+1,C>=0]

  * Ranking function: nat(B)

  * Invariants unquote1(A) -> unquote1(B)

     entry  : [A>=0]
     non-rec: [A=B,A>=0]
     rec    : [A>=B+1,B>=0]
     inv    : [A>=B,B>=0]

CRS unquote(A)

  * Non Asymptotic Upper Bound: 1+nat(A) 

  * LOOPS unquote(B) -> unquote(C)
     - [B=C+1,C>=0]

  * Ranking function: nat(B)

  * Invariants unquote(A) -> unquote(B)

     entry  : [A>=0]
     non-rec: [A=B,A>=0]
     rec    : [B>=0,A>=B+1]
     inv    : [A>=B,B>=0]

CRS sel1(A,B)

  * Non Asymptotic Upper Bound: 2+nat(A)+nat(-A+B-1) 

  * LOOPS sel1(C,D) -> sel1(E,F)
     - [C=E+1,C>=1,F>=0,D>=F+1]

  * Ranking function: nat(D)

  * Invariants sel1(A,B) -> sel1(C,D)

     entry  : [B>=0,A>=0]
     non-rec: [A=C,B=D,B>=0,A>=0]
     rec    : [B+C>=A+D,C>=0,D>=0,A>=C+1]
     inv    : [A>=C,C>=0,D>=0,B+C>=A+D]

CRS sel(A,B)

  * Non Asymptotic Upper Bound: 1+nat(A) 

  * LOOPS sel(C,D) -> sel(E,F)
     - [C=E+1,C>=1,F>=0,D>=F+1]

  * Ranking function: nat(D)

  * Invariants sel(A,B) -> sel(C,D)

     entry  : [B>=0,A>=0]
     non-rec: [A=C,B=D,B>=0,A>=0]
     rec    : [B+C>=A+D,C>=0,D>=0,A>=C+1]
     inv    : [A>=C,C>=0,D>=0,B+C>=A+D]

CRS quote1(A)

  * Non Asymptotic Upper Bound: 1+2*nat(A)+nat(A-1) 

  * LOOPS quote1(B) -> quote1(C)
     - [B>=C+1,C>=0]

  * Ranking function: nat(B)

  * Invariants quote1(A) -> quote1(B)

     entry  : [A>=0]
     non-rec: [A=B,A>=0]
     rec    : [A>=B+1,B>=0]
     inv    : [A>=B,B>=0]

CRS from(A)

  * Non Asymptotic Upper Bound: c(failed(schemes_failed,[scc=4,cr=from/1])) 

  * LOOPS from(B) -> from(C)
     - [B+1=C,C>=1]

  * Ranking function: c(failed(no_rf,[scc=4,cr=from/1]))

  * Invariants from(A) -> from(B)

     entry  : [A>=0]
     non-rec: [A=B,A>=0]
     rec    : [A>=0,B>=A+1]
     inv    : [B>=A,A>=0]

CRS first1(A,B)

  * Non Asymptotic Upper Bound: 1+2*nat(A)+nat(B-1) 

  * LOOPS first1(C,D) -> first1(E,F)
     - [D>=F+1,F>=0,C>=1,C=E+1]

  * Ranking function: nat(D)

  * Invariants first1(A,B) -> first1(C,D)

     entry  : [B>=0,A>=0]
     non-rec: [A=C,B=D,B>=0,A>=0]
     rec    : [B+C>=A+D,C>=0,D>=0,A>=C+1]
     inv    : [A>=C,C>=0,D>=0,B+C>=A+D]

CRS quote(A)

  * Non Asymptotic Upper Bound: 1+nat(A) 

  * LOOPS quote(B) -> quote(C)
     - [B=C+1,C>=0]

  * Ranking function: nat(B)

  * Invariants quote(A) -> quote(B)

     entry  : [A>=0]
     non-rec: [A=B,A>=0]
     rec    : [B>=0,A>=B+1]
     inv    : [A>=B,B>=0]

CRS first(A,B)

  * Non Asymptotic Upper Bound: 1+nat(A) 

  * LOOPS first(C,D) -> first(E,F)
     - [C=E+1,C>=1,F>=0,D>=F+1]

  * Ranking function: nat(D)

  * Invariants first(A,B) -> first(C,D)

     entry  : [B>=0,A>=0]
     non-rec: [A=C,B=D,B>=0,A>=0]
     rec    : [B+C>=A+D,C>=0,D>=0,A>=C+1]
     inv    : [A>=C,C>=0,D>=0,B+C>=A+D]

CRS fcons(A,B)

  * Non Asymptotic Upper Bound: 1 

  * LOOPS fcons(C,D) -> fcons(E,F)

  * Ranking function: N/A

  * Invariants fcons(A,B) -> fcons(C,D)

     entry  : []
     non-rec: [A=C,B=D]
     rec    : [0=1]
     inv    : [A=C,B=D]



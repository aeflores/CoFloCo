This is PUBS, version 0.2.
Copyright (C) 2007, 2008, 2009 UPM, UCM.
This program comes with ABSOLUTELY NO WARRANTY.
This is free software, and you are welcome to
redistribute it under certain conditions.



CRS $pubs_aux_entry$(A,B) -- THE MAIN ENTRY

  * Non Asymptotic Upper Bound: max([1,2*nat(A)+59/10*nat(A+1),4+2*nat(A)+59/10*nat(A+1)+2*nat(c(maximize_failed))+59/10*nat(c(maximize_failed))+2*nat(c(maximize_failed))+59/10*nat(c(maximize_failed))+c(failed(schemes_failed,[scc=18,cr=fun9/2])),5+2*nat(A)+59/10*nat(A+1)+2*nat(c(maximize_failed))+59/10*nat(c(maximize_failed)),2+2*nat(A/2-1)+59/10*nat(A/2)+2*nat(A-2)+59/10*nat(A-1)+c(failed(schemes_failed,[scc=18,cr=fun9/2])),3+2*nat(A)+59/10*nat(A+1),c(failed(cover_point,[scc=14,cr=isNeList/1])),c(failed(cover_point,[scc=14,cr=isList/1])),c(failed(schemes_failed,[scc=18,cr=fun9/2])),c(failed(cover_point,[scc=14,cr=fun6/2])),c(failed(cover_point,[scc=14,cr=fun4/2])),c(failed(cover_point,[scc=14,cr=fun1/2]))]) 

  * LOOPS $pubs_aux_entry$(C,D) -> $pubs_aux_entry$(E,F)

  * Ranking function: N/A

  * Invariants $pubs_aux_entry$(A,B) -> $pubs_aux_entry$(C,D)

     entry  : []
     non-rec: [A=C,B=D]
     rec    : [0=1]
     inv    : [A=C,B=D]

CRS start(A,B)

  * Non Asymptotic Upper Bound: max([1,2*nat(A)+59/10*nat(A+1),4+2*nat(A)+59/10*nat(A+1)+2*nat(c(maximize_failed))+59/10*nat(c(maximize_failed))+2*nat(c(maximize_failed))+59/10*nat(c(maximize_failed))+c(failed(schemes_failed,[scc=18,cr=fun9/2])),5+2*nat(A)+59/10*nat(A+1)+2*nat(c(maximize_failed))+59/10*nat(c(maximize_failed)),2+2*nat(A/2-1)+59/10*nat(A/2)+2*nat(A-2)+59/10*nat(A-1)+c(failed(schemes_failed,[scc=18,cr=fun9/2])),3+2*nat(A)+59/10*nat(A+1),c(failed(cover_point,[scc=14,cr=isNeList/1])),c(failed(cover_point,[scc=14,cr=isList/1])),c(failed(schemes_failed,[scc=18,cr=fun9/2])),c(failed(cover_point,[scc=14,cr=fun6/2])),c(failed(cover_point,[scc=14,cr=fun4/2])),c(failed(cover_point,[scc=14,cr=fun1/2]))]) 

  * LOOPS start(C,D) -> start(E,F)

  * Ranking function: N/A

  * Invariants start(A,B) -> start(C,D)

     entry  : []
     non-rec: [A=C,B=D]
     rec    : [0=1]
     inv    : [A=C,B=D]

CRS fun9(A,B)

  * Non Asymptotic Upper Bound: c(failed(schemes_failed,[scc=18,cr=fun9/2])) 

  * LOOPS fun9(C,D) -> fun9(E,F)
     - [D>=0,C=1]

  * Ranking function: c(failed(no_rf,[scc=18,cr=fun9/2]))

  * Invariants fun9(A,B) -> fun9(C,D)

     entry  : []
     non-rec: [A=C,B=D]
     rec    : [B>=0,A=1]
     inv    : []

CRS fun8(A)

  * Non Asymptotic Upper Bound: 1 

  * LOOPS fun8(B) -> fun8(C)

  * Ranking function: N/A

  * Invariants fun8(A) -> fun8(B)

     entry  : []
     non-rec: [A=B]
     rec    : [0=1]
     inv    : [A=B]

CRS fun11(A)

  * Non Asymptotic Upper Bound: 1 

  * LOOPS fun11(B) -> fun11(C)

  * Ranking function: N/A

  * Invariants fun11(A) -> fun11(B)

     entry  : []
     non-rec: [A=B]
     rec    : [0=1]
     inv    : [A=B]

CRS fun10(A)

  * Non Asymptotic Upper Bound: 1 

  * LOOPS fun10(B) -> fun10(C)

  * Ranking function: N/A

  * Invariants fun10(A) -> fun10(B)

     entry  : []
     non-rec: [A=B]
     rec    : [0=1]
     inv    : [A=B]

CRS isQid(A)

  * Non Asymptotic Upper Bound: 1 

  * LOOPS isQid(B) -> isQid(C)

  * Ranking function: N/A

  * Invariants isQid(A) -> isQid(B)

     entry  : []
     non-rec: [A=B]
     rec    : [0=1]
     inv    : [A=B]

CRS fun7(A)

  * Non Asymptotic Upper Bound: 1 

  * LOOPS fun7(B) -> fun7(C)

  * Ranking function: N/A

  * Invariants fun7(A) -> fun7(B)

     entry  : [A>=0]
     non-rec: [A=B,A>=0]
     rec    : [0=1]
     inv    : [A>=0,A=B]

CRS fun5(A)

  * Non Asymptotic Upper Bound: 1 

  * LOOPS fun5(B) -> fun5(C)

  * Ranking function: N/A

  * Invariants fun5(A) -> fun5(B)

     entry  : [A>=0]
     non-rec: [A=B,A>=0]
     rec    : [0=1]
     inv    : [A>=0,A=B]

CRS fun3(A)

  * Non Asymptotic Upper Bound: 1 

  * LOOPS fun3(B) -> fun3(C)

  * Ranking function: N/A

  * Invariants fun3(A) -> fun3(B)

     entry  : [A>=0]
     non-rec: [A=B,A>=0]
     rec    : [0=1]
     inv    : [A>=0,A=B]

CRS fun2(A)

  * Non Asymptotic Upper Bound: 1 

  * LOOPS fun2(B) -> fun2(C)

  * Ranking function: N/A

  * Invariants fun2(A) -> fun2(B)

     entry  : [A>=0]
     non-rec: [A=B,A>=0]
     rec    : [0=1]
     inv    : [A>=0,A=B]

CRS fun(A)

  * Non Asymptotic Upper Bound: 1 

  * LOOPS fun(B) -> fun(C)

  * Ranking function: N/A

  * Invariants fun(A) -> fun(B)

     entry  : [A>=0]
     non-rec: [A=B,A>=0]
     rec    : [0=1]
     inv    : [A>=0,A=B]

CRS activate(A)

  * Non Asymptotic Upper Bound: 2*nat(A)+59/10*nat(A+1) 

  * LOOPS activate(B) -> activate(C)
     - [B>=C+1,C>=0]
     - [B>=C+1,C>=0]

  * Ranking function: nat(B)

  * Invariants activate(A) -> activate(B)

     entry  : [A>=0]
     non-rec: [A=B,A>=0]
     rec    : [A>=B+1,B>=0]
     inv    : [A>=B,B>=0]

CRS u

  * Non Asymptotic Upper Bound: 1 

  * LOOPS u -> u

  * Ranking function: N/A

  * Invariants u -> u

     entry  : []
     non-rec: []
     rec    : [0=1]
     inv    : []

CRS o

  * Non Asymptotic Upper Bound: 1 

  * LOOPS o -> o

  * Ranking function: N/A

  * Invariants o -> o

     entry  : []
     non-rec: []
     rec    : [0=1]
     inv    : []

CRS nil

  * Non Asymptotic Upper Bound: 1 

  * LOOPS nil -> nil

  * Ranking function: N/A

  * Invariants nil -> nil

     entry  : []
     non-rec: []
     rec    : [0=1]
     inv    : []

CRS i

  * Non Asymptotic Upper Bound: 1 

  * LOOPS i -> i

  * Ranking function: N/A

  * Invariants i -> i

     entry  : []
     non-rec: []
     rec    : [0=1]
     inv    : []

CRS fun12(A,B)

  * Non Asymptotic Upper Bound: 1 

  * LOOPS fun12(C,D) -> fun12(E,F)

  * Ranking function: N/A

  * Invariants fun12(A,B) -> fun12(C,D)

     entry  : []
     non-rec: [A=C,B=D]
     rec    : [0=1]
     inv    : [A=C,B=D]

CRS e

  * Non Asymptotic Upper Bound: 1 

  * LOOPS e -> e

  * Ranking function: N/A

  * Invariants e -> e

     entry  : []
     non-rec: []
     rec    : [0=1]
     inv    : []

CRS a

  * Non Asymptotic Upper Bound: 1 

  * LOOPS a -> a

  * Ranking function: N/A

  * Invariants a -> a

     entry  : []
     non-rec: []
     rec    : [0=1]
     inv    : []



This is PUBS, version 0.2.
Copyright (C) 2007, 2008, 2009 UPM, UCM.
This program comes with ABSOLUTELY NO WARRANTY.
This is free software, and you are welcome to
redistribute it under certain conditions.



CRS $pubs_aux_entry$(A,B) -- THE MAIN ENTRY

  * Non Asymptotic Upper Bound: max([c(failed(cover_point,[scc=10,cr=fun36/1])),4+c(failed(schemes_failed,[scc=1,cr=isPalListKind/0])),c(failed(cover_point,[scc=10,cr=fun31/1])),c(failed(cover_point,[scc=10,cr=fun33/1])),c(failed(cover_point,[scc=10,cr=fun13/1])),c(failed(cover_point,[scc=10,cr=fun32/1])),c(failed(schemes_failed,[scc=17,cr=fun23/1])),c(failed(cover_point,[scc=10,cr=fun4/1])),4+c(failed(schemes_failed,[scc=1,cr=isPalListKind/0])),c(failed(cover_point,[scc=10,cr=fun17/1])),c(failed(schemes_failed,[scc=1,cr=isPalListKind/0])),c(failed(cover_point,[scc=10,cr=fun30/1])),4+c(failed(schemes_failed,[scc=1,cr=isPalListKind/0])),12+c(failed(schemes_failed,[scc=1,cr=isPalListKind/0]))+c(failed(schemes_failed,[scc=1,cr=isPalListKind/0]))+c(failed(schemes_failed,[scc=1,cr=isPalListKind/0]))+c(failed(schemes_failed,[scc=1,cr=isPalListKind/0]))+c(failed(schemes_failed,[scc=1,cr=isPalListKind/0])),9+c(failed(schemes_failed,[scc=1,cr=isPalListKind/0]))+c(failed(schemes_failed,[scc=1,cr=isPalListKind/0]))+c(failed(schemes_failed,[scc=17,cr=fun23/1]))+c(failed(schemes_failed,[scc=1,cr=isPalListKind/0])),c(failed(cover_point,[scc=10,cr=fun25/1])),5+c(failed(schemes_failed,[scc=1,cr=isPalListKind/0]))+c(failed(schemes_failed,[scc=1,cr=isPalListKind/0])),2+c(failed(schemes_failed,[scc=17,cr=fun23/1])),c(failed(cover_point,[scc=10,cr=fun10/1])),7+c(failed(schemes_failed,[scc=1,cr=isPalListKind/0]))+c(failed(schemes_failed,[scc=1,cr=isPalListKind/0])),4+c(failed(schemes_failed,[scc=17,cr=fun23/1])),c(failed(cover_point,[scc=10,cr=fun20/1])),2+c(failed(schemes_failed,[scc=1,cr=isPalListKind/0])),c(failed(cover_point,[scc=10,cr=fun3/1])),9+c(failed(schemes_failed,[scc=1,cr=isPalListKind/0]))+c(failed(schemes_failed,[scc=1,cr=isPalListKind/0]))+c(failed(schemes_failed,[scc=1,cr=isPalListKind/0]))+c(failed(schemes_failed,[scc=1,cr=isPalListKind/0])),6+c(failed(schemes_failed,[scc=1,cr=isPalListKind/0]))+c(failed(schemes_failed,[scc=1,cr=isPalListKind/0]))+c(failed(schemes_failed,[scc=17,cr=fun23/1])),c(failed(cover_point,[scc=10,cr=fun15/1])),c(failed(cover_point,[scc=10,cr=fun14/1])),c(failed(cover_point,[scc=10,cr=isList/0])),c(failed(cover_point,[scc=10,cr=fun9/1])),c(failed(cover_point,[scc=10,cr=fun7/1])),8+c(failed(schemes_failed,[scc=1,cr=isPalListKind/0]))+c(failed(schemes_failed,[scc=1,cr=isPalListKind/0]))+c(failed(schemes_failed,[scc=1,cr=isPalListKind/0])),5+c(failed(schemes_failed,[scc=1,cr=isPalListKind/0]))+c(failed(schemes_failed,[scc=17,cr=fun23/1])),c(failed(cover_point,[scc=10,cr=isNeList/0])),c(failed(cover_point,[scc=10,cr=fun2/1])),2+c(failed(schemes_failed,[scc=1,cr=isPalListKind/0]))]) 

  * LOOPS $pubs_aux_entry$(C,D) -> $pubs_aux_entry$(E,F)

  * Ranking function: N/A

  * Invariants $pubs_aux_entry$(A,B) -> $pubs_aux_entry$(C,D)

     entry  : []
     non-rec: [A=C,B=D]
     rec    : [0=1]
     inv    : [A=C,B=D]

CRS start(A,B)

  * Non Asymptotic Upper Bound: max([c(failed(cover_point,[scc=10,cr=fun36/1])),4+c(failed(schemes_failed,[scc=1,cr=isPalListKind/0])),c(failed(cover_point,[scc=10,cr=fun31/1])),c(failed(cover_point,[scc=10,cr=fun33/1])),c(failed(cover_point,[scc=10,cr=fun13/1])),c(failed(cover_point,[scc=10,cr=fun32/1])),c(failed(schemes_failed,[scc=17,cr=fun23/1])),c(failed(cover_point,[scc=10,cr=fun4/1])),4+c(failed(schemes_failed,[scc=1,cr=isPalListKind/0])),c(failed(cover_point,[scc=10,cr=fun17/1])),c(failed(schemes_failed,[scc=1,cr=isPalListKind/0])),c(failed(cover_point,[scc=10,cr=fun30/1])),4+c(failed(schemes_failed,[scc=1,cr=isPalListKind/0])),12+c(failed(schemes_failed,[scc=1,cr=isPalListKind/0]))+c(failed(schemes_failed,[scc=1,cr=isPalListKind/0]))+c(failed(schemes_failed,[scc=1,cr=isPalListKind/0]))+c(failed(schemes_failed,[scc=1,cr=isPalListKind/0]))+c(failed(schemes_failed,[scc=1,cr=isPalListKind/0])),9+c(failed(schemes_failed,[scc=1,cr=isPalListKind/0]))+c(failed(schemes_failed,[scc=1,cr=isPalListKind/0]))+c(failed(schemes_failed,[scc=17,cr=fun23/1]))+c(failed(schemes_failed,[scc=1,cr=isPalListKind/0])),c(failed(cover_point,[scc=10,cr=fun25/1])),5+c(failed(schemes_failed,[scc=1,cr=isPalListKind/0]))+c(failed(schemes_failed,[scc=1,cr=isPalListKind/0])),2+c(failed(schemes_failed,[scc=17,cr=fun23/1])),c(failed(cover_point,[scc=10,cr=fun10/1])),7+c(failed(schemes_failed,[scc=1,cr=isPalListKind/0]))+c(failed(schemes_failed,[scc=1,cr=isPalListKind/0])),4+c(failed(schemes_failed,[scc=17,cr=fun23/1])),c(failed(cover_point,[scc=10,cr=fun20/1])),2+c(failed(schemes_failed,[scc=1,cr=isPalListKind/0])),c(failed(cover_point,[scc=10,cr=fun3/1])),9+c(failed(schemes_failed,[scc=1,cr=isPalListKind/0]))+c(failed(schemes_failed,[scc=1,cr=isPalListKind/0]))+c(failed(schemes_failed,[scc=1,cr=isPalListKind/0]))+c(failed(schemes_failed,[scc=1,cr=isPalListKind/0])),6+c(failed(schemes_failed,[scc=1,cr=isPalListKind/0]))+c(failed(schemes_failed,[scc=1,cr=isPalListKind/0]))+c(failed(schemes_failed,[scc=17,cr=fun23/1])),c(failed(cover_point,[scc=10,cr=fun15/1])),c(failed(cover_point,[scc=10,cr=fun14/1])),c(failed(cover_point,[scc=10,cr=isList/0])),c(failed(cover_point,[scc=10,cr=fun9/1])),c(failed(cover_point,[scc=10,cr=fun7/1])),8+c(failed(schemes_failed,[scc=1,cr=isPalListKind/0]))+c(failed(schemes_failed,[scc=1,cr=isPalListKind/0]))+c(failed(schemes_failed,[scc=1,cr=isPalListKind/0])),5+c(failed(schemes_failed,[scc=1,cr=isPalListKind/0]))+c(failed(schemes_failed,[scc=17,cr=fun23/1])),c(failed(cover_point,[scc=10,cr=isNeList/0])),c(failed(cover_point,[scc=10,cr=fun2/1])),2+c(failed(schemes_failed,[scc=1,cr=isPalListKind/0]))]) 

  * LOOPS start(C,D) -> start(E,F)

  * Ranking function: N/A

  * Invariants start(A,B) -> start(C,D)

     entry  : []
     non-rec: [A=C,B=D]
     rec    : [0=1]
     inv    : [A=C,B=D]

CRS fun28(A,B)

  * Non Asymptotic Upper Bound: 1 

  * LOOPS fun28(C,D) -> fun28(E,F)

  * Ranking function: N/A

  * Invariants fun28(A,B) -> fun28(C,D)

     entry  : [B>=0,A>=0]
     non-rec: [A=C,B=D,B>=0,A>=0]
     rec    : [0=1]
     inv    : [A>=0,B>=0,A=C,B=D]

CRS fun23(A)

  * Non Asymptotic Upper Bound: c(failed(schemes_failed,[scc=17,cr=fun23/1])) 

  * LOOPS fun23(B) -> fun23(C)
     - [B=0]

  * Ranking function: c(failed(no_rf,[scc=17,cr=fun23/1]))

  * Invariants fun23(A) -> fun23(B)

     entry  : []
     non-rec: [A=B]
     rec    : [A=0]
     inv    : []

CRS fun24(A)

  * Non Asymptotic Upper Bound: 4+c(failed(schemes_failed,[scc=1,cr=isPalListKind/0])) 

  * LOOPS fun24(B) -> fun24(C)

  * Ranking function: N/A

  * Invariants fun24(A) -> fun24(B)

     entry  : []
     non-rec: [A=B]
     rec    : [0=1]
     inv    : [A=B]

CRS fun34(A)

  * Non Asymptotic Upper Bound: 3 

  * LOOPS fun34(B) -> fun34(C)

  * Ranking function: N/A

  * Invariants fun34(A) -> fun34(B)

     entry  : []
     non-rec: [A=B]
     rec    : [0=1]
     inv    : [A=B]

CRS fun35(A)

  * Non Asymptotic Upper Bound: 1 

  * LOOPS fun35(B) -> fun35(C)

  * Ranking function: N/A

  * Invariants fun35(A) -> fun35(B)

     entry  : []
     non-rec: [A=B]
     rec    : [0=1]
     inv    : [A=B]

CRS fun21(A)

  * Non Asymptotic Upper Bound: 1 

  * LOOPS fun21(B) -> fun21(C)

  * Ranking function: N/A

  * Invariants fun21(A) -> fun21(B)

     entry  : []
     non-rec: [A=B]
     rec    : [0=1]
     inv    : [A=B]

CRS fun18(A)

  * Non Asymptotic Upper Bound: 2+c(failed(schemes_failed,[scc=1,cr=isPalListKind/0])) 

  * LOOPS fun18(B) -> fun18(C)

  * Ranking function: N/A

  * Invariants fun18(A) -> fun18(B)

     entry  : []
     non-rec: [A=B]
     rec    : [0=1]
     inv    : [A=B]

CRS fun19(A)

  * Non Asymptotic Upper Bound: 1 

  * LOOPS fun19(B) -> fun19(C)

  * Ranking function: N/A

  * Invariants fun19(A) -> fun19(B)

     entry  : []
     non-rec: [A=B]
     rec    : [0=1]
     inv    : [A=B]

CRS fun16(A)

  * Non Asymptotic Upper Bound: 1 

  * LOOPS fun16(B) -> fun16(C)

  * Ranking function: N/A

  * Invariants fun16(A) -> fun16(B)

     entry  : [A>=0]
     non-rec: [A=B,A>=0]
     rec    : [0=1]
     inv    : [A>=0,A=B]

CRS fun26(A)

  * Non Asymptotic Upper Bound: 1 

  * LOOPS fun26(B) -> fun26(C)

  * Ranking function: N/A

  * Invariants fun26(A) -> fun26(B)

     entry  : [A>=0]
     non-rec: [A=B,A>=0]
     rec    : [0=1]
     inv    : [A>=0,A=B]

CRS fun8(A)

  * Non Asymptotic Upper Bound: 1 

  * LOOPS fun8(B) -> fun8(C)

  * Ranking function: N/A

  * Invariants fun8(A) -> fun8(B)

     entry  : [A>=0]
     non-rec: [A=B,A>=0]
     rec    : [0=1]
     inv    : [A>=0,A=B]

CRS fun27(A)

  * Non Asymptotic Upper Bound: 4+c(failed(schemes_failed,[scc=1,cr=isPalListKind/0])) 

  * LOOPS fun27(B) -> fun27(C)

  * Ranking function: N/A

  * Invariants fun27(A) -> fun27(B)

     entry  : [A>=0]
     non-rec: [A=B,A>=0]
     rec    : [0=1]
     inv    : [A>=0,A=B]

CRS fun11(A)

  * Non Asymptotic Upper Bound: 3 

  * LOOPS fun11(B) -> fun11(C)

  * Ranking function: N/A

  * Invariants fun11(A) -> fun11(B)

     entry  : []
     non-rec: [A=B]
     rec    : [0=1]
     inv    : [A=B]

CRS isQid

  * Non Asymptotic Upper Bound: 1 

  * LOOPS isQid -> isQid

  * Ranking function: N/A

  * Invariants isQid -> isQid

     entry  : []
     non-rec: []
     rec    : [0=1]
     inv    : []

CRS fun12(A)

  * Non Asymptotic Upper Bound: 1 

  * LOOPS fun12(B) -> fun12(C)

  * Ranking function: N/A

  * Invariants fun12(A) -> fun12(B)

     entry  : []
     non-rec: [A=B]
     rec    : [0=1]
     inv    : [A=B]

CRS fun22(A)

  * Non Asymptotic Upper Bound: 1 

  * LOOPS fun22(B) -> fun22(C)

  * Ranking function: N/A

  * Invariants fun22(A) -> fun22(B)

     entry  : [A>=0]
     non-rec: [A=B,A>=0]
     rec    : [0=1]
     inv    : [A>=0,A=B]

CRS isPalListKind

  * Non Asymptotic Upper Bound: c(failed(schemes_failed,[scc=1,cr=isPalListKind/0])) 

  * LOOPS isPalListKind -> isPalListKind
     - []

  * Ranking function: c(failed(no_rf,[scc=1,cr=isPalListKind/0]))

  * Invariants isPalListKind -> isPalListKind

     entry  : []
     non-rec: []
     rec    : []
     inv    : []

CRS fun1(A)

  * Non Asymptotic Upper Bound: 1 

  * LOOPS fun1(B) -> fun1(C)

  * Ranking function: N/A

  * Invariants fun1(A) -> fun1(B)

     entry  : []
     non-rec: [A=B]
     rec    : [0=1]
     inv    : [A=B]



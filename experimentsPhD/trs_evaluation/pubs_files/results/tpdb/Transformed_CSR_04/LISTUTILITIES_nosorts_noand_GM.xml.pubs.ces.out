This is PUBS, version 0.2.
Copyright (C) 2007, 2008, 2009 UPM, UCM.
This program comes with ABSOLUTELY NO WARRANTY.
This is free software, and you are welcome to
redistribute it under certain conditions.



CRS $pubs_aux_entry$(A,B,C,D) -- THE MAIN ENTRY

  * Non Asymptotic Upper Bound: max([c(failed(cover_point,[scc=0,cr=mark/1])),c(failed(cover_point,[scc=0,cr=fun26/2])),c(failed(cover_point,[scc=0,cr=fun25/1])),c(failed(cover_point,[scc=0,cr=fun3/2])),c(failed(cover_point,[scc=0,cr=fun2/1])),c(failed(cover_point,[scc=0,cr=fun24/2])),c(failed(cover_point,[scc=0,cr=fun23/1])),c(failed(cover_point,[scc=0,cr=fun10/1])),c(failed(cover_point,[scc=0,cr=fun22/1])),c(failed(cover_point,[scc=0,cr=fun11/2])),c(failed(cover_point,[scc=0,cr=fun21/3])),c(failed(cover_point,[scc=0,cr=fun20/3])),c(failed(cover_point,[scc=0,cr=fun19/2])),c(failed(cover_point,[scc=0,cr=fun18/2])),c(failed(cover_point,[scc=0,cr=fun17/2])),c(failed(cover_point,[scc=0,cr=fun16/4])),c(failed(cover_point,[scc=0,cr=fun15/4])),c(failed(cover_point,[scc=0,cr=fun14/4])),c(failed(cover_point,[scc=0,cr=fun13/2])),c(failed(cover_point,[scc=0,cr=fun12/2])),c(failed(cover_point,[scc=0,cr=fun9/3])),c(failed(cover_point,[scc=0,cr=fun8/3])),c(failed(cover_point,[scc=0,cr=fun7/2])),c(failed(cover_point,[scc=0,cr=fun6/2])),c(failed(cover_point,[scc=0,cr=fun5/2])),c(failed(cover_point,[scc=0,cr=fun4/2])),c(failed(cover_point,[scc=0,cr=fun1/3])),c(failed(cover_point,[scc=0,cr=fun/3]))]) 

  * LOOPS $pubs_aux_entry$(E,F,G,H) -> $pubs_aux_entry$(I,J,K,L)

  * Ranking function: N/A

  * Invariants $pubs_aux_entry$(A,B,C,D) -> $pubs_aux_entry$(E,F,G,H)

     entry  : []
     non-rec: [A=E,B=F,C=G,D=H]
     rec    : [0=1]
     inv    : [A=E,B=F,C=G,D=H]

CRS start(A,B,C,D)

  * Non Asymptotic Upper Bound: max([c(failed(cover_point,[scc=0,cr=mark/1])),c(failed(cover_point,[scc=0,cr=fun26/2])),c(failed(cover_point,[scc=0,cr=fun25/1])),c(failed(cover_point,[scc=0,cr=fun3/2])),c(failed(cover_point,[scc=0,cr=fun2/1])),c(failed(cover_point,[scc=0,cr=fun24/2])),c(failed(cover_point,[scc=0,cr=fun23/1])),c(failed(cover_point,[scc=0,cr=fun10/1])),c(failed(cover_point,[scc=0,cr=fun22/1])),c(failed(cover_point,[scc=0,cr=fun11/2])),c(failed(cover_point,[scc=0,cr=fun21/3])),c(failed(cover_point,[scc=0,cr=fun20/3])),c(failed(cover_point,[scc=0,cr=fun19/2])),c(failed(cover_point,[scc=0,cr=fun18/2])),c(failed(cover_point,[scc=0,cr=fun17/2])),c(failed(cover_point,[scc=0,cr=fun16/4])),c(failed(cover_point,[scc=0,cr=fun15/4])),c(failed(cover_point,[scc=0,cr=fun14/4])),c(failed(cover_point,[scc=0,cr=fun13/2])),c(failed(cover_point,[scc=0,cr=fun12/2])),c(failed(cover_point,[scc=0,cr=fun9/3])),c(failed(cover_point,[scc=0,cr=fun8/3])),c(failed(cover_point,[scc=0,cr=fun7/2])),c(failed(cover_point,[scc=0,cr=fun6/2])),c(failed(cover_point,[scc=0,cr=fun5/2])),c(failed(cover_point,[scc=0,cr=fun4/2])),c(failed(cover_point,[scc=0,cr=fun1/3])),c(failed(cover_point,[scc=0,cr=fun/3]))]) 

  * LOOPS start(E,F,G,H) -> start(I,J,K,L)

  * Ranking function: N/A

  * Invariants start(A,B,C,D) -> start(E,F,G,H)

     entry  : []
     non-rec: [A=E,B=F,C=G,D=H]
     rec    : [0=1]
     inv    : [A=E,B=F,C=G,D=H]



This is PUBS, version 0.2.
Copyright (C) 2007, 2008, 2009 UPM, UCM.
This program comes with ABSOLUTELY NO WARRANTY.
This is free software, and you are welcome to
redistribute it under certain conditions.



CRS $pubs_aux_entry$(A,B,C) -- THE MAIN ENTRY

  * Non Asymptotic Upper Bound: max([12+c(failed(schemes_failed,[scc=7,cr=iftimes/3]))+c(failed(schemes_failed,[scc=8,cr=if/3])),c(failed(schemes_failed,[scc=8,cr=if/3])),6+c(failed(schemes_failed,[scc=8,cr=if/3])),2+nat(B),c(failed(schemes_failed,[scc=7,cr=iftimes/3])),2+c(failed(schemes_failed,[scc=7,cr=iftimes/3])),c(failed(schemes_failed,[scc=6,cr=ifplus/3])),2+c(failed(schemes_failed,[scc=6,cr=ifplus/3]))]) 

  * LOOPS $pubs_aux_entry$(D,E,F) -> $pubs_aux_entry$(G,H,I)

  * Ranking function: N/A

  * Invariants $pubs_aux_entry$(A,B,C) -> $pubs_aux_entry$(D,E,F)

     entry  : []
     non-rec: [A=D,B=E,C=F]
     rec    : [0=1]
     inv    : [A=D,B=E,C=F]

CRS start(A,B,C)

  * Non Asymptotic Upper Bound: max([12+c(failed(schemes_failed,[scc=7,cr=iftimes/3]))+c(failed(schemes_failed,[scc=8,cr=if/3])),c(failed(schemes_failed,[scc=8,cr=if/3])),6+c(failed(schemes_failed,[scc=8,cr=if/3])),2+nat(B),c(failed(schemes_failed,[scc=7,cr=iftimes/3])),2+c(failed(schemes_failed,[scc=7,cr=iftimes/3])),c(failed(schemes_failed,[scc=6,cr=ifplus/3])),2+c(failed(schemes_failed,[scc=6,cr=ifplus/3]))]) 

  * LOOPS start(D,E,F) -> start(G,H,I)

  * Ranking function: N/A

  * Invariants start(A,B,C) -> start(D,E,F)

     entry  : []
     non-rec: [A=D,B=E,C=F]
     rec    : [0=1]
     inv    : [A=D,B=E,C=F]

CRS if(A,B,C)

  * Non Asymptotic Upper Bound: c(failed(schemes_failed,[scc=8,cr=if/3])) 

  * LOOPS if(D,E,F) -> if(G,H,I)
     - [I>=0,F>=0,D=1,E=1]

  * Ranking function: c(failed(no_rf,[scc=8,cr=if/3]))

  * Invariants if(A,B,C) -> if(D,E,F)

     entry  : [C>=0]
     non-rec: [A=D,B=E,C=F,C>=0]
     rec    : [F>=0,C>=0,A=1,B=1]
     inv    : [F>=0,C>=0]

CRS iftimes(A,B,C)

  * Non Asymptotic Upper Bound: c(failed(schemes_failed,[scc=7,cr=iftimes/3])) 

  * LOOPS iftimes(D,E,F) -> iftimes(G,H,I)
     - [H>=0,F>=0,E>=0,D=1,F=I]

  * Ranking function: c(failed(no_rf,[scc=7,cr=iftimes/3]))

  * Invariants iftimes(A,B,C) -> iftimes(D,E,F)

     entry  : [C>=0,B>=0]
     non-rec: [A=D,B=E,C=F,C>=0,B>=0]
     rec    : [E>=0,C>=0,B>=0,A=1,C=F]
     inv    : [E>=0,B>=0,C>=0,C=F]

CRS ifplus(A,B,C)

  * Non Asymptotic Upper Bound: c(failed(schemes_failed,[scc=6,cr=ifplus/3])) 

  * LOOPS ifplus(D,E,F) -> ifplus(G,H,I)
     - [H>=0,F>=0,E>=0,D=1,F=I]

  * Ranking function: c(failed(no_rf,[scc=6,cr=ifplus/3]))

  * Invariants ifplus(A,B,C) -> ifplus(D,E,F)

     entry  : [C>=0,B>=0]
     non-rec: [A=D,B=E,C=F,C>=0,B>=0]
     rec    : [E>=0,C>=0,B>=0,A=1,C=F]
     inv    : [E>=0,B>=0,C>=0,C=F]

CRS isZero(A)

  * Non Asymptotic Upper Bound: 1 

  * LOOPS isZero(B) -> isZero(C)

  * Ranking function: N/A

  * Invariants isZero(A) -> isZero(B)

     entry  : [A>=0]
     non-rec: [A=B,A>=0]
     rec    : [0=1]
     inv    : [A>=0,A=B]

CRS p(A)

  * Non Asymptotic Upper Bound: 1 

  * LOOPS p(B) -> p(C)

  * Ranking function: N/A

  * Invariants p(A) -> p(B)

     entry  : [A>=0]
     non-rec: [A=B,A>=0]
     rec    : [0=1]
     inv    : [A>=0,A=B]

CRS shorter(A,B)

  * Non Asymptotic Upper Bound: 2+nat(B) 

  * LOOPS shorter(C,D) -> shorter(E,F)
     - [D=F+1,E>=0,C>=E+1,D>=1]

  * Ranking function: nat(D)

  * Invariants shorter(A,B) -> shorter(C,D)

     entry  : [B>=0,A>=0]
     non-rec: [A=C,B=D,B>=0,A>=0]
     rec    : [A+D>=B+C,D>=0,C>=0,B>=D+1]
     inv    : [B>=D,C>=0,D>=0,A+D>=B+C]

CRS cddr(A)

  * Non Asymptotic Upper Bound: 1 

  * LOOPS cddr(B) -> cddr(C)

  * Ranking function: N/A

  * Invariants cddr(A) -> cddr(B)

     entry  : [A>=0]
     non-rec: [A=B,A>=0]
     rec    : [0=1]
     inv    : [A>=0,A=B]

CRS car(A)

  * Non Asymptotic Upper Bound: 1 

  * LOOPS car(B) -> car(C)

  * Ranking function: N/A

  * Invariants car(A) -> car(B)

     entry  : [A>=0]
     non-rec: [A=B,A>=0]
     rec    : [0=1]
     inv    : [A>=0,A=B]

CRS cadr(A)

  * Non Asymptotic Upper Bound: 1 

  * LOOPS cadr(B) -> cadr(C)

  * Ranking function: N/A

  * Invariants cadr(A) -> cadr(B)

     entry  : [A>=0]
     non-rec: [A=B,A>=0]
     rec    : [0=1]
     inv    : [A>=0,A=B]



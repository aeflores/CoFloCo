This is PUBS, version 0.2.
Copyright (C) 2007, 2008, 2009 UPM, UCM.
This program comes with ABSOLUTELY NO WARRANTY.
This is free software, and you are welcome to
redistribute it under certain conditions.



CRS $pubs_aux_entry$(A,B,C,D,E) -- THE MAIN ENTRY

  * Non Asymptotic Upper Bound: max([2+nat(A),1+nat(A),nat(A+1)+2/3*nat(4*A+1)+nat(2*A+1)*nat(2*A+ -1)/2,1+nat(A),c(failed(schemes_failed,[scc=5,cr=if/5])),7+nat(A)+nat(A)+nat(B+1)+2/3*nat(4*B+1)+nat(2*B+1)*nat(2*B+ -1)/2+nat(2*B+1)+nat(2*B+1)+c(failed(schemes_failed,[scc=5,cr=if/5])),8+nat(A)+nat(A)+nat(B+1)+2/3*nat(4*B+1)+nat(2*B+1)*nat(2*B+ -1)/2+nat(2*B+1)+nat(2*B+1)+c(failed(schemes_failed,[scc=5,cr=if/5]))]) 

  * LOOPS $pubs_aux_entry$(F,G,H,I,J) -> $pubs_aux_entry$(K,L,M,N,O)

  * Ranking function: N/A

  * Invariants $pubs_aux_entry$(A,B,C,D,E) -> $pubs_aux_entry$(F,G,H,I,J)

     entry  : []
     non-rec: [A=F,B=G,C=H,D=I,E=J]
     rec    : [0=1]
     inv    : [A=F,B=G,C=H,D=I,E=J]

CRS start(A,B,C,D,E)

  * Non Asymptotic Upper Bound: max([2+nat(A),1+nat(A),nat(A+1)+2/3*nat(4*A+1)+nat(2*A+1)*nat(2*A+ -1)/2,1+nat(A),c(failed(schemes_failed,[scc=5,cr=if/5])),7+nat(A)+nat(A)+nat(B+1)+2/3*nat(4*B+1)+nat(2*B+1)*nat(2*B+ -1)/2+nat(2*B+1)+nat(2*B+1)+c(failed(schemes_failed,[scc=5,cr=if/5])),8+nat(A)+nat(A)+nat(B+1)+2/3*nat(4*B+1)+nat(2*B+1)*nat(2*B+ -1)/2+nat(2*B+1)+nat(2*B+1)+c(failed(schemes_failed,[scc=5,cr=if/5]))]) 

  * LOOPS start(F,G,H,I,J) -> start(K,L,M,N,O)

  * Ranking function: N/A

  * Invariants start(A,B,C,D,E) -> start(F,G,H,I,J)

     entry  : []
     non-rec: [A=F,B=G,C=H,D=I,E=J]
     rec    : [0=1]
     inv    : [A=F,B=G,C=H,D=I,E=J]

CRS lessElements(A,B)

  * Non Asymptotic Upper Bound: 8+nat(A)+nat(A)+nat(B+1)+2/3*nat(4*B+1)+nat(2*B+1)*nat(2*B+ -1)/2+nat(2*B+1)+nat(2*B+1)+c(failed(schemes_failed,[scc=5,cr=if/5])) 

  * LOOPS lessElements(C,D) -> lessElements(E,F)

  * Ranking function: N/A

  * Invariants lessElements(A,B) -> lessElements(C,D)

     entry  : [B>=0,A>=0]
     non-rec: [A=C,B=D,B>=0,A>=0]
     rec    : [0=1]
     inv    : [A>=0,B>=0,A=C,B=D]

CRS if(A,B,C,D,E)

  * Non Asymptotic Upper Bound: c(failed(schemes_failed,[scc=5,cr=if/5])) 

  * LOOPS if(F,G,H,I,J) -> if(K,L,M,N,O)
     - [2>=K,2>=L,K>=0,L>=0,I>=0,H>=0,J>=0,I=N,H=M,G=1,F=1,J+1=O]

  * Ranking function: c(failed(no_rf,[scc=5,cr=if/5]))

  * Invariants if(A,B,C,D,E) -> if(F,G,H,I,J)

     entry  : [A>=0,B>=0,C>=0,D>=0,E>=0]
     non-rec: [A=F,B=G,C=H,D=I,E=J,A>=0,B>=0,C>=0,D>=0,E>=0]
     rec    : [D=I,C=H,B=1,A=1,D>=0,C>=0,E>=0,2>=F,2>=G,J>=E+1,G>=0,F>=0]
     inv    : [2*A>=F,A+B>=F,2*B>=G,B+1>=G,B+J>=E+G,A+B>=G,A+1>=F,A+J>=E+F,G+J>=B+E,A+G>=B,G>=0,B+F>=A,F+1>=A,F+J>=A+E,F>=0,G+1>=B,C>=0,D>=0,E>=0,D=I,C=H]

CRS toList(A)

  * Non Asymptotic Upper Bound: nat(A+1)+2/3*nat(4*A+1)+nat(2*A+1)*nat(2*A-1)/2 

  * LOOPS toList(B) -> toList(C)
     - [B>=C+1,C>=0]
     - [B>=C+1,C>=0]

  * Ranking function: nat(B)

  * Invariants toList(A) -> toList(B)

     entry  : [A>=0]
     non-rec: [A=B,A>=0]
     rec    : [A>=B+1,B>=0]
     inv    : [A>=B,B>=0]

CRS length(A)

  * Non Asymptotic Upper Bound: 1+nat(A) 

  * LOOPS length(B) -> length(C)
     - [C>=0,B>=C+1]

  * Ranking function: nat(B)

  * Invariants length(A) -> length(B)

     entry  : [A>=0]
     non-rec: [A=B,A>=0]
     rec    : [A>=B+1,B>=0]
     inv    : [A>=B,B>=0]

CRS le(A,B)

  * Non Asymptotic Upper Bound: 2+nat(A) 

  * LOOPS le(C,D) -> le(E,F)
     - [D=F+1,C=E+1,C>=1,D>=1]

  * Ranking function: nat(D)

  * Invariants le(A,B) -> le(C,D)

     entry  : [B>=0,A>=0]
     non-rec: [A=C,B=D,B>=0,A>=0]
     rec    : [A+D=B+C,C>=0,B+C>=A,A>=C+1]
     inv    : [B>=D,A+D>=B,D>=0,A+D=B+C]

CRS append(A,B)

  * Non Asymptotic Upper Bound: 1+nat(A) 

  * LOOPS append(C,D) -> append(E,F)
     - [D=F,E>=0,C>=E+1,D>=0]

  * Ranking function: nat(C)

  * Invariants append(A,B) -> append(C,D)

     entry  : [B>=0,A>=0]
     non-rec: [A=C,B=D,B>=0,A>=0]
     rec    : [B>=0,A>=C+1,C>=0,B=D]
     inv    : [A>=C,C>=0,B>=0,B=D]

CRS a

  * Non Asymptotic Upper Bound: 1 

  * LOOPS a -> a

  * Ranking function: N/A

  * Invariants a -> a

     entry  : []
     non-rec: []
     rec    : [0=1]
     inv    : []



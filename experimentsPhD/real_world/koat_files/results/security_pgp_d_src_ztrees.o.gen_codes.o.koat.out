YES(?, 20*v_max_code + 43)

Initial complexity problem:
1:	T:
		(1, 1)    eval_gen_codes_start(v_19, v_25, v_bits.0, v_max_code, v_n.0) -> Com_1(eval_gen_codes_bb0_in(v_19, v_25, v_bits.0, v_max_code, v_n.0))
		(?, 1)    eval_gen_codes_bb0_in(v_19, v_25, v_bits.0, v_max_code, v_n.0) -> Com_1(eval_gen_codes_bb1_in(v_19, v_25, 1, v_max_code, v_n.0))
		(?, 1)    eval_gen_codes_bb1_in(v_19, v_25, v_bits.0, v_max_code, v_n.0) -> Com_1(eval_gen_codes_bb1_in(v_19, v_25, v_bits.0 + 1, v_max_code, v_n.0)) [ v_bits.0 <= 15 ]
		(?, 1)    eval_gen_codes_bb1_in(v_19, v_25, v_bits.0, v_max_code, v_n.0) -> Com_1(eval_gen_codes_bb3_in(v_19, v_25, v_bits.0, v_max_code, 0)) [ v_bits.0 > 15 ]
		(?, 1)    eval_gen_codes_bb3_in(v_19, v_25, v_bits.0, v_max_code, v_n.0) -> Com_1(eval_gen_codes_bb6_in(nondef.2, v_25, v_bits.0, v_max_code, v_n.0)) [ v_n.0 <= v_max_code ]
		(?, 1)    eval_gen_codes_bb3_in(v_19, v_25, v_bits.0, v_max_code, v_n.0) -> Com_1(eval_gen_codes_21(nondef.2, nondef.3, v_bits.0, v_max_code, v_n.0)) [ v_n.0 <= v_max_code ]
		(?, 1)    eval_gen_codes_bb3_in(v_19, v_25, v_bits.0, v_max_code, v_n.0) -> Com_1(eval_gen_codes_stop(v_19, v_25, v_bits.0, v_max_code, v_n.0)) [ v_n.0 > v_max_code ]
		(?, 1)    eval_gen_codes_21(v_19, v_25, v_bits.0, v_max_code, v_n.0) -> Com_2(eval_bi_reverse_start(v_19, v_25, v_bits.0, v_max_code, v_n.0), eval_gen_codes_22(v_19, v_25, v_bits.0, v_max_code, v_n.0))
		(?, 1)    eval_gen_codes_22(v_19, v_25, v_bits.0, v_max_code, v_n.0) -> Com_1(eval_gen_codes_bb6_in(v_19, v_25, v_bits.0, v_max_code, v_n.0))
		(?, 1)    eval_gen_codes_bb6_in(v_19, v_25, v_bits.0, v_max_code, v_n.0) -> Com_1(eval_gen_codes_bb3_in(v_19, v_25, v_bits.0, v_max_code, v_n.0 + 1))
	start location:	eval_gen_codes_start
	leaf cost:	0

Slicing away variables that do not contribute to conditions from problem 1 leaves variables [v_bits.0, v_max_code, v_n.0].
We thus obtain the following problem:
2:	T:
		(?, 1)    eval_gen_codes_bb6_in(v_bits.0, v_max_code, v_n.0) -> Com_1(eval_gen_codes_bb3_in(v_bits.0, v_max_code, v_n.0 + 1))
		(?, 1)    eval_gen_codes_22(v_bits.0, v_max_code, v_n.0) -> Com_1(eval_gen_codes_bb6_in(v_bits.0, v_max_code, v_n.0))
		(?, 1)    eval_gen_codes_21(v_bits.0, v_max_code, v_n.0) -> Com_2(eval_bi_reverse_start(v_bits.0, v_max_code, v_n.0), eval_gen_codes_22(v_bits.0, v_max_code, v_n.0))
		(?, 1)    eval_gen_codes_bb3_in(v_bits.0, v_max_code, v_n.0) -> Com_1(eval_gen_codes_stop(v_bits.0, v_max_code, v_n.0)) [ v_n.0 > v_max_code ]
		(?, 1)    eval_gen_codes_bb3_in(v_bits.0, v_max_code, v_n.0) -> Com_1(eval_gen_codes_21(v_bits.0, v_max_code, v_n.0)) [ v_n.0 <= v_max_code ]
		(?, 1)    eval_gen_codes_bb3_in(v_bits.0, v_max_code, v_n.0) -> Com_1(eval_gen_codes_bb6_in(v_bits.0, v_max_code, v_n.0)) [ v_n.0 <= v_max_code ]
		(?, 1)    eval_gen_codes_bb1_in(v_bits.0, v_max_code, v_n.0) -> Com_1(eval_gen_codes_bb3_in(v_bits.0, v_max_code, 0)) [ v_bits.0 > 15 ]
		(?, 1)    eval_gen_codes_bb1_in(v_bits.0, v_max_code, v_n.0) -> Com_1(eval_gen_codes_bb1_in(v_bits.0 + 1, v_max_code, v_n.0)) [ v_bits.0 <= 15 ]
		(?, 1)    eval_gen_codes_bb0_in(v_bits.0, v_max_code, v_n.0) -> Com_1(eval_gen_codes_bb1_in(1, v_max_code, v_n.0))
		(1, 1)    eval_gen_codes_start(v_bits.0, v_max_code, v_n.0) -> Com_1(eval_gen_codes_bb0_in(v_bits.0, v_max_code, v_n.0))
	start location:	eval_gen_codes_start
	leaf cost:	0

Repeatedly propagating knowledge in problem 2 produces the following problem:
3:	T:
		(?, 1)    eval_gen_codes_bb6_in(v_bits.0, v_max_code, v_n.0) -> Com_1(eval_gen_codes_bb3_in(v_bits.0, v_max_code, v_n.0 + 1))
		(?, 1)    eval_gen_codes_22(v_bits.0, v_max_code, v_n.0) -> Com_1(eval_gen_codes_bb6_in(v_bits.0, v_max_code, v_n.0))
		(?, 1)    eval_gen_codes_21(v_bits.0, v_max_code, v_n.0) -> Com_2(eval_bi_reverse_start(v_bits.0, v_max_code, v_n.0), eval_gen_codes_22(v_bits.0, v_max_code, v_n.0))
		(?, 1)    eval_gen_codes_bb3_in(v_bits.0, v_max_code, v_n.0) -> Com_1(eval_gen_codes_stop(v_bits.0, v_max_code, v_n.0)) [ v_n.0 > v_max_code ]
		(?, 1)    eval_gen_codes_bb3_in(v_bits.0, v_max_code, v_n.0) -> Com_1(eval_gen_codes_21(v_bits.0, v_max_code, v_n.0)) [ v_n.0 <= v_max_code ]
		(?, 1)    eval_gen_codes_bb3_in(v_bits.0, v_max_code, v_n.0) -> Com_1(eval_gen_codes_bb6_in(v_bits.0, v_max_code, v_n.0)) [ v_n.0 <= v_max_code ]
		(?, 1)    eval_gen_codes_bb1_in(v_bits.0, v_max_code, v_n.0) -> Com_1(eval_gen_codes_bb3_in(v_bits.0, v_max_code, 0)) [ v_bits.0 > 15 ]
		(?, 1)    eval_gen_codes_bb1_in(v_bits.0, v_max_code, v_n.0) -> Com_1(eval_gen_codes_bb1_in(v_bits.0 + 1, v_max_code, v_n.0)) [ v_bits.0 <= 15 ]
		(1, 1)    eval_gen_codes_bb0_in(v_bits.0, v_max_code, v_n.0) -> Com_1(eval_gen_codes_bb1_in(1, v_max_code, v_n.0))
		(1, 1)    eval_gen_codes_start(v_bits.0, v_max_code, v_n.0) -> Com_1(eval_gen_codes_bb0_in(v_bits.0, v_max_code, v_n.0))
	start location:	eval_gen_codes_start
	leaf cost:	0

A polynomial rank function with
	Pol(eval_gen_codes_bb6_in) = 1
	Pol(eval_gen_codes_bb3_in) = 1
	Pol(eval_gen_codes_22) = 1
	Pol(eval_gen_codes_21) = 1
	Pol(eval_bi_reverse_start) = 0
	Pol(eval_gen_codes_stop) = 0
	Pol(eval_gen_codes_bb1_in) = 2
	Pol(eval_gen_codes_bb0_in) = 2
	Pol(eval_gen_codes_start) = 2
orients all transitions weakly and the transitions
	eval_gen_codes_bb3_in(v_bits.0, v_max_code, v_n.0) -> Com_1(eval_gen_codes_stop(v_bits.0, v_max_code, v_n.0)) [ v_n.0 > v_max_code ]
	eval_gen_codes_bb1_in(v_bits.0, v_max_code, v_n.0) -> Com_1(eval_gen_codes_bb3_in(v_bits.0, v_max_code, 0)) [ v_bits.0 > 15 ]
strictly and produces the following problem:
4:	T:
		(?, 1)    eval_gen_codes_bb6_in(v_bits.0, v_max_code, v_n.0) -> Com_1(eval_gen_codes_bb3_in(v_bits.0, v_max_code, v_n.0 + 1))
		(?, 1)    eval_gen_codes_22(v_bits.0, v_max_code, v_n.0) -> Com_1(eval_gen_codes_bb6_in(v_bits.0, v_max_code, v_n.0))
		(?, 1)    eval_gen_codes_21(v_bits.0, v_max_code, v_n.0) -> Com_2(eval_bi_reverse_start(v_bits.0, v_max_code, v_n.0), eval_gen_codes_22(v_bits.0, v_max_code, v_n.0))
		(2, 1)    eval_gen_codes_bb3_in(v_bits.0, v_max_code, v_n.0) -> Com_1(eval_gen_codes_stop(v_bits.0, v_max_code, v_n.0)) [ v_n.0 > v_max_code ]
		(?, 1)    eval_gen_codes_bb3_in(v_bits.0, v_max_code, v_n.0) -> Com_1(eval_gen_codes_21(v_bits.0, v_max_code, v_n.0)) [ v_n.0 <= v_max_code ]
		(?, 1)    eval_gen_codes_bb3_in(v_bits.0, v_max_code, v_n.0) -> Com_1(eval_gen_codes_bb6_in(v_bits.0, v_max_code, v_n.0)) [ v_n.0 <= v_max_code ]
		(2, 1)    eval_gen_codes_bb1_in(v_bits.0, v_max_code, v_n.0) -> Com_1(eval_gen_codes_bb3_in(v_bits.0, v_max_code, 0)) [ v_bits.0 > 15 ]
		(?, 1)    eval_gen_codes_bb1_in(v_bits.0, v_max_code, v_n.0) -> Com_1(eval_gen_codes_bb1_in(v_bits.0 + 1, v_max_code, v_n.0)) [ v_bits.0 <= 15 ]
		(1, 1)    eval_gen_codes_bb0_in(v_bits.0, v_max_code, v_n.0) -> Com_1(eval_gen_codes_bb1_in(1, v_max_code, v_n.0))
		(1, 1)    eval_gen_codes_start(v_bits.0, v_max_code, v_n.0) -> Com_1(eval_gen_codes_bb0_in(v_bits.0, v_max_code, v_n.0))
	start location:	eval_gen_codes_start
	leaf cost:	0

A polynomial rank function with
	Pol(eval_gen_codes_bb6_in) = 0
	Pol(eval_gen_codes_bb3_in) = 0
	Pol(eval_gen_codes_21) = 0
	Pol(eval_gen_codes_bb1_in) = -V_1 + 16
	Pol(eval_gen_codes_22) = 0
	Pol(eval_bi_reverse_start) = 0
and size complexities
	S("eval_gen_codes_start(v_bits.0, v_max_code, v_n.0) -> Com_1(eval_gen_codes_bb0_in(v_bits.0, v_max_code, v_n.0))", 0-0) = v_bits.0
	S("eval_gen_codes_start(v_bits.0, v_max_code, v_n.0) -> Com_1(eval_gen_codes_bb0_in(v_bits.0, v_max_code, v_n.0))", 0-1) = v_max_code
	S("eval_gen_codes_start(v_bits.0, v_max_code, v_n.0) -> Com_1(eval_gen_codes_bb0_in(v_bits.0, v_max_code, v_n.0))", 0-2) = v_n.0
	S("eval_gen_codes_bb0_in(v_bits.0, v_max_code, v_n.0) -> Com_1(eval_gen_codes_bb1_in(1, v_max_code, v_n.0))", 0-0) = 1
	S("eval_gen_codes_bb0_in(v_bits.0, v_max_code, v_n.0) -> Com_1(eval_gen_codes_bb1_in(1, v_max_code, v_n.0))", 0-1) = v_max_code
	S("eval_gen_codes_bb0_in(v_bits.0, v_max_code, v_n.0) -> Com_1(eval_gen_codes_bb1_in(1, v_max_code, v_n.0))", 0-2) = v_n.0
	S("eval_gen_codes_bb1_in(v_bits.0, v_max_code, v_n.0) -> Com_1(eval_gen_codes_bb1_in(v_bits.0 + 1, v_max_code, v_n.0)) [ v_bits.0 <= 15 ]", 0-0) = 16
	S("eval_gen_codes_bb1_in(v_bits.0, v_max_code, v_n.0) -> Com_1(eval_gen_codes_bb1_in(v_bits.0 + 1, v_max_code, v_n.0)) [ v_bits.0 <= 15 ]", 0-1) = v_max_code
	S("eval_gen_codes_bb1_in(v_bits.0, v_max_code, v_n.0) -> Com_1(eval_gen_codes_bb1_in(v_bits.0 + 1, v_max_code, v_n.0)) [ v_bits.0 <= 15 ]", 0-2) = v_n.0
	S("eval_gen_codes_bb1_in(v_bits.0, v_max_code, v_n.0) -> Com_1(eval_gen_codes_bb3_in(v_bits.0, v_max_code, 0)) [ v_bits.0 > 15 ]", 0-0) = 16
	S("eval_gen_codes_bb1_in(v_bits.0, v_max_code, v_n.0) -> Com_1(eval_gen_codes_bb3_in(v_bits.0, v_max_code, 0)) [ v_bits.0 > 15 ]", 0-1) = v_max_code
	S("eval_gen_codes_bb1_in(v_bits.0, v_max_code, v_n.0) -> Com_1(eval_gen_codes_bb3_in(v_bits.0, v_max_code, 0)) [ v_bits.0 > 15 ]", 0-2) = 0
	S("eval_gen_codes_bb3_in(v_bits.0, v_max_code, v_n.0) -> Com_1(eval_gen_codes_bb6_in(v_bits.0, v_max_code, v_n.0)) [ v_n.0 <= v_max_code ]", 0-0) = 16
	S("eval_gen_codes_bb3_in(v_bits.0, v_max_code, v_n.0) -> Com_1(eval_gen_codes_bb6_in(v_bits.0, v_max_code, v_n.0)) [ v_n.0 <= v_max_code ]", 0-1) = v_max_code
	S("eval_gen_codes_bb3_in(v_bits.0, v_max_code, v_n.0) -> Com_1(eval_gen_codes_bb6_in(v_bits.0, v_max_code, v_n.0)) [ v_n.0 <= v_max_code ]", 0-2) = ?
	S("eval_gen_codes_bb3_in(v_bits.0, v_max_code, v_n.0) -> Com_1(eval_gen_codes_21(v_bits.0, v_max_code, v_n.0)) [ v_n.0 <= v_max_code ]", 0-0) = 16
	S("eval_gen_codes_bb3_in(v_bits.0, v_max_code, v_n.0) -> Com_1(eval_gen_codes_21(v_bits.0, v_max_code, v_n.0)) [ v_n.0 <= v_max_code ]", 0-1) = v_max_code
	S("eval_gen_codes_bb3_in(v_bits.0, v_max_code, v_n.0) -> Com_1(eval_gen_codes_21(v_bits.0, v_max_code, v_n.0)) [ v_n.0 <= v_max_code ]", 0-2) = ?
	S("eval_gen_codes_bb3_in(v_bits.0, v_max_code, v_n.0) -> Com_1(eval_gen_codes_stop(v_bits.0, v_max_code, v_n.0)) [ v_n.0 > v_max_code ]", 0-0) = 16
	S("eval_gen_codes_bb3_in(v_bits.0, v_max_code, v_n.0) -> Com_1(eval_gen_codes_stop(v_bits.0, v_max_code, v_n.0)) [ v_n.0 > v_max_code ]", 0-1) = v_max_code
	S("eval_gen_codes_bb3_in(v_bits.0, v_max_code, v_n.0) -> Com_1(eval_gen_codes_stop(v_bits.0, v_max_code, v_n.0)) [ v_n.0 > v_max_code ]", 0-2) = ?
	S("eval_gen_codes_21(v_bits.0, v_max_code, v_n.0) -> Com_2(eval_bi_reverse_start(v_bits.0, v_max_code, v_n.0), eval_gen_codes_22(v_bits.0, v_max_code, v_n.0))", 0-0) = 16
	S("eval_gen_codes_21(v_bits.0, v_max_code, v_n.0) -> Com_2(eval_bi_reverse_start(v_bits.0, v_max_code, v_n.0), eval_gen_codes_22(v_bits.0, v_max_code, v_n.0))", 0-1) = v_max_code
	S("eval_gen_codes_21(v_bits.0, v_max_code, v_n.0) -> Com_2(eval_bi_reverse_start(v_bits.0, v_max_code, v_n.0), eval_gen_codes_22(v_bits.0, v_max_code, v_n.0))", 0-2) = ?
	S("eval_gen_codes_21(v_bits.0, v_max_code, v_n.0) -> Com_2(eval_bi_reverse_start(v_bits.0, v_max_code, v_n.0), eval_gen_codes_22(v_bits.0, v_max_code, v_n.0))", 1-0) = 16
	S("eval_gen_codes_21(v_bits.0, v_max_code, v_n.0) -> Com_2(eval_bi_reverse_start(v_bits.0, v_max_code, v_n.0), eval_gen_codes_22(v_bits.0, v_max_code, v_n.0))", 1-1) = v_max_code
	S("eval_gen_codes_21(v_bits.0, v_max_code, v_n.0) -> Com_2(eval_bi_reverse_start(v_bits.0, v_max_code, v_n.0), eval_gen_codes_22(v_bits.0, v_max_code, v_n.0))", 1-2) = ?
	S("eval_gen_codes_22(v_bits.0, v_max_code, v_n.0) -> Com_1(eval_gen_codes_bb6_in(v_bits.0, v_max_code, v_n.0))", 0-0) = 16
	S("eval_gen_codes_22(v_bits.0, v_max_code, v_n.0) -> Com_1(eval_gen_codes_bb6_in(v_bits.0, v_max_code, v_n.0))", 0-1) = v_max_code
	S("eval_gen_codes_22(v_bits.0, v_max_code, v_n.0) -> Com_1(eval_gen_codes_bb6_in(v_bits.0, v_max_code, v_n.0))", 0-2) = ?
	S("eval_gen_codes_bb6_in(v_bits.0, v_max_code, v_n.0) -> Com_1(eval_gen_codes_bb3_in(v_bits.0, v_max_code, v_n.0 + 1))", 0-0) = 16
	S("eval_gen_codes_bb6_in(v_bits.0, v_max_code, v_n.0) -> Com_1(eval_gen_codes_bb3_in(v_bits.0, v_max_code, v_n.0 + 1))", 0-1) = v_max_code
	S("eval_gen_codes_bb6_in(v_bits.0, v_max_code, v_n.0) -> Com_1(eval_gen_codes_bb3_in(v_bits.0, v_max_code, v_n.0 + 1))", 0-2) = ?
orients the transitions
	eval_gen_codes_bb6_in(v_bits.0, v_max_code, v_n.0) -> Com_1(eval_gen_codes_bb3_in(v_bits.0, v_max_code, v_n.0 + 1))
	eval_gen_codes_bb3_in(v_bits.0, v_max_code, v_n.0) -> Com_1(eval_gen_codes_bb6_in(v_bits.0, v_max_code, v_n.0)) [ v_n.0 <= v_max_code ]
	eval_gen_codes_bb3_in(v_bits.0, v_max_code, v_n.0) -> Com_1(eval_gen_codes_21(v_bits.0, v_max_code, v_n.0)) [ v_n.0 <= v_max_code ]
	eval_gen_codes_bb1_in(v_bits.0, v_max_code, v_n.0) -> Com_1(eval_gen_codes_bb1_in(v_bits.0 + 1, v_max_code, v_n.0)) [ v_bits.0 <= 15 ]
	eval_gen_codes_22(v_bits.0, v_max_code, v_n.0) -> Com_1(eval_gen_codes_bb6_in(v_bits.0, v_max_code, v_n.0))
	eval_gen_codes_21(v_bits.0, v_max_code, v_n.0) -> Com_2(eval_bi_reverse_start(v_bits.0, v_max_code, v_n.0), eval_gen_codes_22(v_bits.0, v_max_code, v_n.0))
weakly and the transition
	eval_gen_codes_bb1_in(v_bits.0, v_max_code, v_n.0) -> Com_1(eval_gen_codes_bb1_in(v_bits.0 + 1, v_max_code, v_n.0)) [ v_bits.0 <= 15 ]
strictly and produces the following problem:
5:	T:
		(?, 1)     eval_gen_codes_bb6_in(v_bits.0, v_max_code, v_n.0) -> Com_1(eval_gen_codes_bb3_in(v_bits.0, v_max_code, v_n.0 + 1))
		(?, 1)     eval_gen_codes_22(v_bits.0, v_max_code, v_n.0) -> Com_1(eval_gen_codes_bb6_in(v_bits.0, v_max_code, v_n.0))
		(?, 1)     eval_gen_codes_21(v_bits.0, v_max_code, v_n.0) -> Com_2(eval_bi_reverse_start(v_bits.0, v_max_code, v_n.0), eval_gen_codes_22(v_bits.0, v_max_code, v_n.0))
		(2, 1)     eval_gen_codes_bb3_in(v_bits.0, v_max_code, v_n.0) -> Com_1(eval_gen_codes_stop(v_bits.0, v_max_code, v_n.0)) [ v_n.0 > v_max_code ]
		(?, 1)     eval_gen_codes_bb3_in(v_bits.0, v_max_code, v_n.0) -> Com_1(eval_gen_codes_21(v_bits.0, v_max_code, v_n.0)) [ v_n.0 <= v_max_code ]
		(?, 1)     eval_gen_codes_bb3_in(v_bits.0, v_max_code, v_n.0) -> Com_1(eval_gen_codes_bb6_in(v_bits.0, v_max_code, v_n.0)) [ v_n.0 <= v_max_code ]
		(2, 1)     eval_gen_codes_bb1_in(v_bits.0, v_max_code, v_n.0) -> Com_1(eval_gen_codes_bb3_in(v_bits.0, v_max_code, 0)) [ v_bits.0 > 15 ]
		(17, 1)    eval_gen_codes_bb1_in(v_bits.0, v_max_code, v_n.0) -> Com_1(eval_gen_codes_bb1_in(v_bits.0 + 1, v_max_code, v_n.0)) [ v_bits.0 <= 15 ]
		(1, 1)     eval_gen_codes_bb0_in(v_bits.0, v_max_code, v_n.0) -> Com_1(eval_gen_codes_bb1_in(1, v_max_code, v_n.0))
		(1, 1)     eval_gen_codes_start(v_bits.0, v_max_code, v_n.0) -> Com_1(eval_gen_codes_bb0_in(v_bits.0, v_max_code, v_n.0))
	start location:	eval_gen_codes_start
	leaf cost:	0

Applied AI with 'oct' on problem 5 to obtain the following invariants:
  For symbol eval_gen_codes_21: X_2 - X_3 >= 0 /\ X_3 >= 0 /\ X_2 + X_3 >= 0 /\ X_1 + X_3 - 16 >= 0 /\ X_2 >= 0 /\ X_1 + X_2 - 16 >= 0 /\ X_1 - 16 >= 0
  For symbol eval_gen_codes_22: X_2 - X_3 >= 0 /\ X_3 >= 0 /\ X_2 + X_3 >= 0 /\ X_1 + X_3 - 16 >= 0 /\ X_2 >= 0 /\ X_1 + X_2 - 16 >= 0 /\ X_1 - 16 >= 0
  For symbol eval_gen_codes_bb1_in: X_1 - 1 >= 0
  For symbol eval_gen_codes_bb3_in: X_3 >= 0 /\ X_1 + X_3 - 16 >= 0 /\ X_1 - 16 >= 0
  For symbol eval_gen_codes_bb6_in: X_2 - X_3 >= 0 /\ X_3 >= 0 /\ X_2 + X_3 >= 0 /\ X_1 + X_3 - 16 >= 0 /\ X_2 >= 0 /\ X_1 + X_2 - 16 >= 0 /\ X_1 - 16 >= 0


This yielded the following problem:
6:	T:
		(1, 1)     eval_gen_codes_start(v_bits.0, v_max_code, v_n.0) -> Com_1(eval_gen_codes_bb0_in(v_bits.0, v_max_code, v_n.0))
		(1, 1)     eval_gen_codes_bb0_in(v_bits.0, v_max_code, v_n.0) -> Com_1(eval_gen_codes_bb1_in(1, v_max_code, v_n.0))
		(17, 1)    eval_gen_codes_bb1_in(v_bits.0, v_max_code, v_n.0) -> Com_1(eval_gen_codes_bb1_in(v_bits.0 + 1, v_max_code, v_n.0)) [ v_bits.0 - 1 >= 0 /\ v_bits.0 <= 15 ]
		(2, 1)     eval_gen_codes_bb1_in(v_bits.0, v_max_code, v_n.0) -> Com_1(eval_gen_codes_bb3_in(v_bits.0, v_max_code, 0)) [ v_bits.0 - 1 >= 0 /\ v_bits.0 > 15 ]
		(?, 1)     eval_gen_codes_bb3_in(v_bits.0, v_max_code, v_n.0) -> Com_1(eval_gen_codes_bb6_in(v_bits.0, v_max_code, v_n.0)) [ v_n.0 >= 0 /\ v_bits.0 + v_n.0 - 16 >= 0 /\ v_bits.0 - 16 >= 0 /\ v_n.0 <= v_max_code ]
		(?, 1)     eval_gen_codes_bb3_in(v_bits.0, v_max_code, v_n.0) -> Com_1(eval_gen_codes_21(v_bits.0, v_max_code, v_n.0)) [ v_n.0 >= 0 /\ v_bits.0 + v_n.0 - 16 >= 0 /\ v_bits.0 - 16 >= 0 /\ v_n.0 <= v_max_code ]
		(2, 1)     eval_gen_codes_bb3_in(v_bits.0, v_max_code, v_n.0) -> Com_1(eval_gen_codes_stop(v_bits.0, v_max_code, v_n.0)) [ v_n.0 >= 0 /\ v_bits.0 + v_n.0 - 16 >= 0 /\ v_bits.0 - 16 >= 0 /\ v_n.0 > v_max_code ]
		(?, 1)     eval_gen_codes_21(v_bits.0, v_max_code, v_n.0) -> Com_2(eval_bi_reverse_start(v_bits.0, v_max_code, v_n.0), eval_gen_codes_22(v_bits.0, v_max_code, v_n.0)) [ v_max_code - v_n.0 >= 0 /\ v_n.0 >= 0 /\ v_max_code + v_n.0 >= 0 /\ v_bits.0 + v_n.0 - 16 >= 0 /\ v_max_code >= 0 /\ v_bits.0 + v_max_code - 16 >= 0 /\ v_bits.0 - 16 >= 0 ]
		(?, 1)     eval_gen_codes_22(v_bits.0, v_max_code, v_n.0) -> Com_1(eval_gen_codes_bb6_in(v_bits.0, v_max_code, v_n.0)) [ v_max_code - v_n.0 >= 0 /\ v_n.0 >= 0 /\ v_max_code + v_n.0 >= 0 /\ v_bits.0 + v_n.0 - 16 >= 0 /\ v_max_code >= 0 /\ v_bits.0 + v_max_code - 16 >= 0 /\ v_bits.0 - 16 >= 0 ]
		(?, 1)     eval_gen_codes_bb6_in(v_bits.0, v_max_code, v_n.0) -> Com_1(eval_gen_codes_bb3_in(v_bits.0, v_max_code, v_n.0 + 1)) [ v_max_code - v_n.0 >= 0 /\ v_n.0 >= 0 /\ v_max_code + v_n.0 >= 0 /\ v_bits.0 + v_n.0 - 16 >= 0 /\ v_max_code >= 0 /\ v_bits.0 + v_max_code - 16 >= 0 /\ v_bits.0 - 16 >= 0 ]
	start location:	eval_gen_codes_start
	leaf cost:	0

A polynomial rank function with
	Pol(eval_gen_codes_start) = 4*V_2 + 4
	Pol(eval_gen_codes_bb0_in) = 4*V_2 + 4
	Pol(eval_gen_codes_bb1_in) = 4*V_2 + 4
	Pol(eval_gen_codes_bb3_in) = 4*V_2 - 4*V_3 + 4
	Pol(eval_gen_codes_bb6_in) = 4*V_2 - 4*V_3 + 1
	Pol(eval_gen_codes_21) = 4*V_2 - 4*V_3 + 3
	Pol(eval_gen_codes_stop) = 4*V_2 - 4*V_3
	Pol(eval_bi_reverse_start) = -4*V_3
	Pol(eval_gen_codes_22) = 4*V_2 - 4*V_3 + 2
orients all transitions weakly and the transitions
	eval_gen_codes_bb6_in(v_bits.0, v_max_code, v_n.0) -> Com_1(eval_gen_codes_bb3_in(v_bits.0, v_max_code, v_n.0 + 1)) [ v_max_code - v_n.0 >= 0 /\ v_n.0 >= 0 /\ v_max_code + v_n.0 >= 0 /\ v_bits.0 + v_n.0 - 16 >= 0 /\ v_max_code >= 0 /\ v_bits.0 + v_max_code - 16 >= 0 /\ v_bits.0 - 16 >= 0 ]
	eval_gen_codes_bb3_in(v_bits.0, v_max_code, v_n.0) -> Com_1(eval_gen_codes_bb6_in(v_bits.0, v_max_code, v_n.0)) [ v_n.0 >= 0 /\ v_bits.0 + v_n.0 - 16 >= 0 /\ v_bits.0 - 16 >= 0 /\ v_n.0 <= v_max_code ]
	eval_gen_codes_bb3_in(v_bits.0, v_max_code, v_n.0) -> Com_1(eval_gen_codes_21(v_bits.0, v_max_code, v_n.0)) [ v_n.0 >= 0 /\ v_bits.0 + v_n.0 - 16 >= 0 /\ v_bits.0 - 16 >= 0 /\ v_n.0 <= v_max_code ]
	eval_gen_codes_22(v_bits.0, v_max_code, v_n.0) -> Com_1(eval_gen_codes_bb6_in(v_bits.0, v_max_code, v_n.0)) [ v_max_code - v_n.0 >= 0 /\ v_n.0 >= 0 /\ v_max_code + v_n.0 >= 0 /\ v_bits.0 + v_n.0 - 16 >= 0 /\ v_max_code >= 0 /\ v_bits.0 + v_max_code - 16 >= 0 /\ v_bits.0 - 16 >= 0 ]
	eval_gen_codes_21(v_bits.0, v_max_code, v_n.0) -> Com_2(eval_bi_reverse_start(v_bits.0, v_max_code, v_n.0), eval_gen_codes_22(v_bits.0, v_max_code, v_n.0)) [ v_max_code - v_n.0 >= 0 /\ v_n.0 >= 0 /\ v_max_code + v_n.0 >= 0 /\ v_bits.0 + v_n.0 - 16 >= 0 /\ v_max_code >= 0 /\ v_bits.0 + v_max_code - 16 >= 0 /\ v_bits.0 - 16 >= 0 ]
strictly and produces the following problem:
7:	T:
		(1, 1)                   eval_gen_codes_start(v_bits.0, v_max_code, v_n.0) -> Com_1(eval_gen_codes_bb0_in(v_bits.0, v_max_code, v_n.0))
		(1, 1)                   eval_gen_codes_bb0_in(v_bits.0, v_max_code, v_n.0) -> Com_1(eval_gen_codes_bb1_in(1, v_max_code, v_n.0))
		(17, 1)                  eval_gen_codes_bb1_in(v_bits.0, v_max_code, v_n.0) -> Com_1(eval_gen_codes_bb1_in(v_bits.0 + 1, v_max_code, v_n.0)) [ v_bits.0 - 1 >= 0 /\ v_bits.0 <= 15 ]
		(2, 1)                   eval_gen_codes_bb1_in(v_bits.0, v_max_code, v_n.0) -> Com_1(eval_gen_codes_bb3_in(v_bits.0, v_max_code, 0)) [ v_bits.0 - 1 >= 0 /\ v_bits.0 > 15 ]
		(4*v_max_code + 4, 1)    eval_gen_codes_bb3_in(v_bits.0, v_max_code, v_n.0) -> Com_1(eval_gen_codes_bb6_in(v_bits.0, v_max_code, v_n.0)) [ v_n.0 >= 0 /\ v_bits.0 + v_n.0 - 16 >= 0 /\ v_bits.0 - 16 >= 0 /\ v_n.0 <= v_max_code ]
		(4*v_max_code + 4, 1)    eval_gen_codes_bb3_in(v_bits.0, v_max_code, v_n.0) -> Com_1(eval_gen_codes_21(v_bits.0, v_max_code, v_n.0)) [ v_n.0 >= 0 /\ v_bits.0 + v_n.0 - 16 >= 0 /\ v_bits.0 - 16 >= 0 /\ v_n.0 <= v_max_code ]
		(2, 1)                   eval_gen_codes_bb3_in(v_bits.0, v_max_code, v_n.0) -> Com_1(eval_gen_codes_stop(v_bits.0, v_max_code, v_n.0)) [ v_n.0 >= 0 /\ v_bits.0 + v_n.0 - 16 >= 0 /\ v_bits.0 - 16 >= 0 /\ v_n.0 > v_max_code ]
		(4*v_max_code + 4, 1)    eval_gen_codes_21(v_bits.0, v_max_code, v_n.0) -> Com_2(eval_bi_reverse_start(v_bits.0, v_max_code, v_n.0), eval_gen_codes_22(v_bits.0, v_max_code, v_n.0)) [ v_max_code - v_n.0 >= 0 /\ v_n.0 >= 0 /\ v_max_code + v_n.0 >= 0 /\ v_bits.0 + v_n.0 - 16 >= 0 /\ v_max_code >= 0 /\ v_bits.0 + v_max_code - 16 >= 0 /\ v_bits.0 - 16 >= 0 ]
		(4*v_max_code + 4, 1)    eval_gen_codes_22(v_bits.0, v_max_code, v_n.0) -> Com_1(eval_gen_codes_bb6_in(v_bits.0, v_max_code, v_n.0)) [ v_max_code - v_n.0 >= 0 /\ v_n.0 >= 0 /\ v_max_code + v_n.0 >= 0 /\ v_bits.0 + v_n.0 - 16 >= 0 /\ v_max_code >= 0 /\ v_bits.0 + v_max_code - 16 >= 0 /\ v_bits.0 - 16 >= 0 ]
		(4*v_max_code + 4, 1)    eval_gen_codes_bb6_in(v_bits.0, v_max_code, v_n.0) -> Com_1(eval_gen_codes_bb3_in(v_bits.0, v_max_code, v_n.0 + 1)) [ v_max_code - v_n.0 >= 0 /\ v_n.0 >= 0 /\ v_max_code + v_n.0 >= 0 /\ v_bits.0 + v_n.0 - 16 >= 0 /\ v_max_code >= 0 /\ v_bits.0 + v_max_code - 16 >= 0 /\ v_bits.0 - 16 >= 0 ]
	start location:	eval_gen_codes_start
	leaf cost:	0

Complexity upper bound 20*v_max_code + 43

Time: 0.384 sec (SMT: 0.323 sec)

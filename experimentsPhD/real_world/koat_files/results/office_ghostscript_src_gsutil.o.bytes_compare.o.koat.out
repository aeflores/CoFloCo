MAYBE

Initial complexity problem:
1:	T:
		(1, 1)    eval_bytes_compare_start(v_len.1, v_len1, v_len2) -> eval_bytes_compare_bb0_in(v_len.1, v_len1, v_len2)
		(?, 1)    eval_bytes_compare_bb0_in(v_len.1, v_len1, v_len2) -> eval_bytes_compare_bb1_in(v_len2, v_len1, v_len2)
		(?, 1)    eval_bytes_compare_bb0_in(v_len.1, v_len1, v_len2) -> eval_bytes_compare_bb1_in(v_len1, v_len1, v_len2)
		(?, 1)    eval_bytes_compare_bb1_in(v_len.1, v_len1, v_len2) -> eval_bytes_compare_bb6_in(v_len.1, v_len1, v_len2) [ v_len.1 < 0 ]
		(?, 1)    eval_bytes_compare_bb1_in(v_len.1, v_len1, v_len2) -> eval_bytes_compare_bb6_in(v_len.1, v_len1, v_len2) [ v_len.1 > 0 ]
		(?, 1)    eval_bytes_compare_bb1_in(v_len.1, v_len1, v_len2) -> eval_bytes_compare_bb1_in(v_len.1 - 1, v_len1, v_len2) [ v_len.1 < 0 ]
		(?, 1)    eval_bytes_compare_bb1_in(v_len.1, v_len1, v_len2) -> eval_bytes_compare_bb1_in(v_len.1 - 1, v_len1, v_len2) [ v_len.1 > 0 ]
		(?, 1)    eval_bytes_compare_bb1_in(v_len.1, v_len1, v_len2) -> eval_bytes_compare_bb6_in(v_len.1, v_len1, v_len2) [ v_len.1 = 0 ]
		(?, 1)    eval_bytes_compare_bb6_in(v_len.1, v_len1, v_len2) -> eval_bytes_compare_stop(v_len.1, v_len1, v_len2)
	start location:	eval_bytes_compare_start
	leaf cost:	0

Repeatedly removing leaves of the complexity graph in problem 1 produces the following problem:
2:	T:
		(1, 1)    eval_bytes_compare_start(v_len.1, v_len1, v_len2) -> eval_bytes_compare_bb0_in(v_len.1, v_len1, v_len2)
		(?, 1)    eval_bytes_compare_bb0_in(v_len.1, v_len1, v_len2) -> eval_bytes_compare_bb1_in(v_len2, v_len1, v_len2)
		(?, 1)    eval_bytes_compare_bb0_in(v_len.1, v_len1, v_len2) -> eval_bytes_compare_bb1_in(v_len1, v_len1, v_len2)
		(?, 1)    eval_bytes_compare_bb1_in(v_len.1, v_len1, v_len2) -> eval_bytes_compare_bb1_in(v_len.1 - 1, v_len1, v_len2) [ v_len.1 < 0 ]
		(?, 1)    eval_bytes_compare_bb1_in(v_len.1, v_len1, v_len2) -> eval_bytes_compare_bb1_in(v_len.1 - 1, v_len1, v_len2) [ v_len.1 > 0 ]
	start location:	eval_bytes_compare_start
	leaf cost:	4

Repeatedly propagating knowledge in problem 2 produces the following problem:
3:	T:
		(1, 1)    eval_bytes_compare_start(v_len.1, v_len1, v_len2) -> eval_bytes_compare_bb0_in(v_len.1, v_len1, v_len2)
		(1, 1)    eval_bytes_compare_bb0_in(v_len.1, v_len1, v_len2) -> eval_bytes_compare_bb1_in(v_len2, v_len1, v_len2)
		(1, 1)    eval_bytes_compare_bb0_in(v_len.1, v_len1, v_len2) -> eval_bytes_compare_bb1_in(v_len1, v_len1, v_len2)
		(?, 1)    eval_bytes_compare_bb1_in(v_len.1, v_len1, v_len2) -> eval_bytes_compare_bb1_in(v_len.1 - 1, v_len1, v_len2) [ v_len.1 < 0 ]
		(?, 1)    eval_bytes_compare_bb1_in(v_len.1, v_len1, v_len2) -> eval_bytes_compare_bb1_in(v_len.1 - 1, v_len1, v_len2) [ v_len.1 > 0 ]
	start location:	eval_bytes_compare_start
	leaf cost:	4

A polynomial rank function with
	Pol(eval_bytes_compare_bb1_in) = V_1
and size complexities
	S("eval_bytes_compare_bb1_in(v_len.1, v_len1, v_len2) -> eval_bytes_compare_bb1_in(v_len.1 - 1, v_len1, v_len2) [ v_len.1 > 0 ]", 0-0) = v_len1 + v_len2
	S("eval_bytes_compare_bb1_in(v_len.1, v_len1, v_len2) -> eval_bytes_compare_bb1_in(v_len.1 - 1, v_len1, v_len2) [ v_len.1 > 0 ]", 0-1) = v_len1
	S("eval_bytes_compare_bb1_in(v_len.1, v_len1, v_len2) -> eval_bytes_compare_bb1_in(v_len.1 - 1, v_len1, v_len2) [ v_len.1 > 0 ]", 0-2) = v_len2
	S("eval_bytes_compare_bb1_in(v_len.1, v_len1, v_len2) -> eval_bytes_compare_bb1_in(v_len.1 - 1, v_len1, v_len2) [ v_len.1 < 0 ]", 0-0) = ?
	S("eval_bytes_compare_bb1_in(v_len.1, v_len1, v_len2) -> eval_bytes_compare_bb1_in(v_len.1 - 1, v_len1, v_len2) [ v_len.1 < 0 ]", 0-1) = v_len1
	S("eval_bytes_compare_bb1_in(v_len.1, v_len1, v_len2) -> eval_bytes_compare_bb1_in(v_len.1 - 1, v_len1, v_len2) [ v_len.1 < 0 ]", 0-2) = v_len2
	S("eval_bytes_compare_bb0_in(v_len.1, v_len1, v_len2) -> eval_bytes_compare_bb1_in(v_len1, v_len1, v_len2)", 0-0) = v_len1
	S("eval_bytes_compare_bb0_in(v_len.1, v_len1, v_len2) -> eval_bytes_compare_bb1_in(v_len1, v_len1, v_len2)", 0-1) = v_len1
	S("eval_bytes_compare_bb0_in(v_len.1, v_len1, v_len2) -> eval_bytes_compare_bb1_in(v_len1, v_len1, v_len2)", 0-2) = v_len2
	S("eval_bytes_compare_bb0_in(v_len.1, v_len1, v_len2) -> eval_bytes_compare_bb1_in(v_len2, v_len1, v_len2)", 0-0) = v_len2
	S("eval_bytes_compare_bb0_in(v_len.1, v_len1, v_len2) -> eval_bytes_compare_bb1_in(v_len2, v_len1, v_len2)", 0-1) = v_len1
	S("eval_bytes_compare_bb0_in(v_len.1, v_len1, v_len2) -> eval_bytes_compare_bb1_in(v_len2, v_len1, v_len2)", 0-2) = v_len2
	S("eval_bytes_compare_start(v_len.1, v_len1, v_len2) -> eval_bytes_compare_bb0_in(v_len.1, v_len1, v_len2)", 0-0) = v_len.1
	S("eval_bytes_compare_start(v_len.1, v_len1, v_len2) -> eval_bytes_compare_bb0_in(v_len.1, v_len1, v_len2)", 0-1) = v_len1
	S("eval_bytes_compare_start(v_len.1, v_len1, v_len2) -> eval_bytes_compare_bb0_in(v_len.1, v_len1, v_len2)", 0-2) = v_len2
orients the transitions
	eval_bytes_compare_bb1_in(v_len.1, v_len1, v_len2) -> eval_bytes_compare_bb1_in(v_len.1 - 1, v_len1, v_len2) [ v_len.1 < 0 ]
	eval_bytes_compare_bb1_in(v_len.1, v_len1, v_len2) -> eval_bytes_compare_bb1_in(v_len.1 - 1, v_len1, v_len2) [ v_len.1 > 0 ]
weakly and the transition
	eval_bytes_compare_bb1_in(v_len.1, v_len1, v_len2) -> eval_bytes_compare_bb1_in(v_len.1 - 1, v_len1, v_len2) [ v_len.1 > 0 ]
strictly and produces the following problem:
4:	T:
		(1, 1)                  eval_bytes_compare_start(v_len.1, v_len1, v_len2) -> eval_bytes_compare_bb0_in(v_len.1, v_len1, v_len2)
		(1, 1)                  eval_bytes_compare_bb0_in(v_len.1, v_len1, v_len2) -> eval_bytes_compare_bb1_in(v_len2, v_len1, v_len2)
		(1, 1)                  eval_bytes_compare_bb0_in(v_len.1, v_len1, v_len2) -> eval_bytes_compare_bb1_in(v_len1, v_len1, v_len2)
		(?, 1)                  eval_bytes_compare_bb1_in(v_len.1, v_len1, v_len2) -> eval_bytes_compare_bb1_in(v_len.1 - 1, v_len1, v_len2) [ v_len.1 < 0 ]
		(v_len1 + v_len2, 1)    eval_bytes_compare_bb1_in(v_len.1, v_len1, v_len2) -> eval_bytes_compare_bb1_in(v_len.1 - 1, v_len1, v_len2) [ v_len.1 > 0 ]
	start location:	eval_bytes_compare_start
	leaf cost:	4

By chaining the transition eval_bytes_compare_start(v_len.1, v_len1, v_len2) -> eval_bytes_compare_bb0_in(v_len.1, v_len1, v_len2) with all transitions in problem 4, the following new transitions are obtained:
	eval_bytes_compare_start(v_len.1, v_len1, v_len2) -> eval_bytes_compare_bb1_in(v_len1, v_len1, v_len2)
	eval_bytes_compare_start(v_len.1, v_len1, v_len2) -> eval_bytes_compare_bb1_in(v_len2, v_len1, v_len2)
We thus obtain the following problem:
5:	T:
		(1, 2)                  eval_bytes_compare_start(v_len.1, v_len1, v_len2) -> eval_bytes_compare_bb1_in(v_len1, v_len1, v_len2)
		(1, 2)                  eval_bytes_compare_start(v_len.1, v_len1, v_len2) -> eval_bytes_compare_bb1_in(v_len2, v_len1, v_len2)
		(1, 1)                  eval_bytes_compare_bb0_in(v_len.1, v_len1, v_len2) -> eval_bytes_compare_bb1_in(v_len2, v_len1, v_len2)
		(1, 1)                  eval_bytes_compare_bb0_in(v_len.1, v_len1, v_len2) -> eval_bytes_compare_bb1_in(v_len1, v_len1, v_len2)
		(?, 1)                  eval_bytes_compare_bb1_in(v_len.1, v_len1, v_len2) -> eval_bytes_compare_bb1_in(v_len.1 - 1, v_len1, v_len2) [ v_len.1 < 0 ]
		(v_len1 + v_len2, 1)    eval_bytes_compare_bb1_in(v_len.1, v_len1, v_len2) -> eval_bytes_compare_bb1_in(v_len.1 - 1, v_len1, v_len2) [ v_len.1 > 0 ]
	start location:	eval_bytes_compare_start
	leaf cost:	4

Testing for reachability in the complexity graph removes the following transitions from problem 5:
	eval_bytes_compare_bb0_in(v_len.1, v_len1, v_len2) -> eval_bytes_compare_bb1_in(v_len2, v_len1, v_len2)
	eval_bytes_compare_bb0_in(v_len.1, v_len1, v_len2) -> eval_bytes_compare_bb1_in(v_len1, v_len1, v_len2)
We thus obtain the following problem:
6:	T:
		(v_len1 + v_len2, 1)    eval_bytes_compare_bb1_in(v_len.1, v_len1, v_len2) -> eval_bytes_compare_bb1_in(v_len.1 - 1, v_len1, v_len2) [ v_len.1 > 0 ]
		(?, 1)                  eval_bytes_compare_bb1_in(v_len.1, v_len1, v_len2) -> eval_bytes_compare_bb1_in(v_len.1 - 1, v_len1, v_len2) [ v_len.1 < 0 ]
		(1, 2)                  eval_bytes_compare_start(v_len.1, v_len1, v_len2) -> eval_bytes_compare_bb1_in(v_len2, v_len1, v_len2)
		(1, 2)                  eval_bytes_compare_start(v_len.1, v_len1, v_len2) -> eval_bytes_compare_bb1_in(v_len1, v_len1, v_len2)
	start location:	eval_bytes_compare_start
	leaf cost:	4

By chaining the transition eval_bytes_compare_start(v_len.1, v_len1, v_len2) -> eval_bytes_compare_bb1_in(v_len2, v_len1, v_len2) with all transitions in problem 6, the following new transitions are obtained:
	eval_bytes_compare_start(v_len.1, v_len1, v_len2) -> eval_bytes_compare_bb1_in(v_len2 - 1, v_len1, v_len2) [ v_len2 > 0 ]
	eval_bytes_compare_start(v_len.1, v_len1, v_len2) -> eval_bytes_compare_bb1_in(v_len2 - 1, v_len1, v_len2) [ v_len2 < 0 ]
We thus obtain the following problem:
7:	T:
		(1, 3)                  eval_bytes_compare_start(v_len.1, v_len1, v_len2) -> eval_bytes_compare_bb1_in(v_len2 - 1, v_len1, v_len2) [ v_len2 > 0 ]
		(1, 3)                  eval_bytes_compare_start(v_len.1, v_len1, v_len2) -> eval_bytes_compare_bb1_in(v_len2 - 1, v_len1, v_len2) [ v_len2 < 0 ]
		(v_len1 + v_len2, 1)    eval_bytes_compare_bb1_in(v_len.1, v_len1, v_len2) -> eval_bytes_compare_bb1_in(v_len.1 - 1, v_len1, v_len2) [ v_len.1 > 0 ]
		(?, 1)                  eval_bytes_compare_bb1_in(v_len.1, v_len1, v_len2) -> eval_bytes_compare_bb1_in(v_len.1 - 1, v_len1, v_len2) [ v_len.1 < 0 ]
		(1, 2)                  eval_bytes_compare_start(v_len.1, v_len1, v_len2) -> eval_bytes_compare_bb1_in(v_len1, v_len1, v_len2)
	start location:	eval_bytes_compare_start
	leaf cost:	4

By chaining the transition eval_bytes_compare_start(v_len.1, v_len1, v_len2) -> eval_bytes_compare_bb1_in(v_len2 - 1, v_len1, v_len2) [ v_len2 > 0 ] with all transitions in problem 7, the following new transition is obtained:
	eval_bytes_compare_start(v_len.1, v_len1, v_len2) -> eval_bytes_compare_bb1_in(v_len2 - 2, v_len1, v_len2) [ v_len2 > 0 /\ v_len2 - 1 > 0 ]
We thus obtain the following problem:
8:	T:
		(1, 4)                  eval_bytes_compare_start(v_len.1, v_len1, v_len2) -> eval_bytes_compare_bb1_in(v_len2 - 2, v_len1, v_len2) [ v_len2 > 0 /\ v_len2 - 1 > 0 ]
		(1, 3)                  eval_bytes_compare_start(v_len.1, v_len1, v_len2) -> eval_bytes_compare_bb1_in(v_len2 - 1, v_len1, v_len2) [ v_len2 < 0 ]
		(v_len1 + v_len2, 1)    eval_bytes_compare_bb1_in(v_len.1, v_len1, v_len2) -> eval_bytes_compare_bb1_in(v_len.1 - 1, v_len1, v_len2) [ v_len.1 > 0 ]
		(?, 1)                  eval_bytes_compare_bb1_in(v_len.1, v_len1, v_len2) -> eval_bytes_compare_bb1_in(v_len.1 - 1, v_len1, v_len2) [ v_len.1 < 0 ]
		(1, 2)                  eval_bytes_compare_start(v_len.1, v_len1, v_len2) -> eval_bytes_compare_bb1_in(v_len1, v_len1, v_len2)
	start location:	eval_bytes_compare_start
	leaf cost:	4

By chaining the transition eval_bytes_compare_start(v_len.1, v_len1, v_len2) -> eval_bytes_compare_bb1_in(v_len2 - 2, v_len1, v_len2) [ v_len2 > 0 /\ v_len2 - 1 > 0 ] with all transitions in problem 8, the following new transition is obtained:
	eval_bytes_compare_start(v_len.1, v_len1, v_len2) -> eval_bytes_compare_bb1_in(v_len2 - 3, v_len1, v_len2) [ v_len2 > 0 /\ v_len2 - 1 > 0 /\ v_len2 - 2 > 0 ]
We thus obtain the following problem:
9:	T:
		(1, 5)                  eval_bytes_compare_start(v_len.1, v_len1, v_len2) -> eval_bytes_compare_bb1_in(v_len2 - 3, v_len1, v_len2) [ v_len2 > 0 /\ v_len2 - 1 > 0 /\ v_len2 - 2 > 0 ]
		(1, 3)                  eval_bytes_compare_start(v_len.1, v_len1, v_len2) -> eval_bytes_compare_bb1_in(v_len2 - 1, v_len1, v_len2) [ v_len2 < 0 ]
		(v_len1 + v_len2, 1)    eval_bytes_compare_bb1_in(v_len.1, v_len1, v_len2) -> eval_bytes_compare_bb1_in(v_len.1 - 1, v_len1, v_len2) [ v_len.1 > 0 ]
		(?, 1)                  eval_bytes_compare_bb1_in(v_len.1, v_len1, v_len2) -> eval_bytes_compare_bb1_in(v_len.1 - 1, v_len1, v_len2) [ v_len.1 < 0 ]
		(1, 2)                  eval_bytes_compare_start(v_len.1, v_len1, v_len2) -> eval_bytes_compare_bb1_in(v_len1, v_len1, v_len2)
	start location:	eval_bytes_compare_start
	leaf cost:	4

By chaining the transition eval_bytes_compare_start(v_len.1, v_len1, v_len2) -> eval_bytes_compare_bb1_in(v_len2 - 3, v_len1, v_len2) [ v_len2 > 0 /\ v_len2 - 1 > 0 /\ v_len2 - 2 > 0 ] with all transitions in problem 9, the following new transition is obtained:
	eval_bytes_compare_start(v_len.1, v_len1, v_len2) -> eval_bytes_compare_bb1_in(v_len2 - 4, v_len1, v_len2) [ v_len2 > 0 /\ v_len2 - 1 > 0 /\ v_len2 - 2 > 0 /\ v_len2 - 3 > 0 ]
We thus obtain the following problem:
10:	T:
		(1, 6)                  eval_bytes_compare_start(v_len.1, v_len1, v_len2) -> eval_bytes_compare_bb1_in(v_len2 - 4, v_len1, v_len2) [ v_len2 > 0 /\ v_len2 - 1 > 0 /\ v_len2 - 2 > 0 /\ v_len2 - 3 > 0 ]
		(1, 3)                  eval_bytes_compare_start(v_len.1, v_len1, v_len2) -> eval_bytes_compare_bb1_in(v_len2 - 1, v_len1, v_len2) [ v_len2 < 0 ]
		(v_len1 + v_len2, 1)    eval_bytes_compare_bb1_in(v_len.1, v_len1, v_len2) -> eval_bytes_compare_bb1_in(v_len.1 - 1, v_len1, v_len2) [ v_len.1 > 0 ]
		(?, 1)                  eval_bytes_compare_bb1_in(v_len.1, v_len1, v_len2) -> eval_bytes_compare_bb1_in(v_len.1 - 1, v_len1, v_len2) [ v_len.1 < 0 ]
		(1, 2)                  eval_bytes_compare_start(v_len.1, v_len1, v_len2) -> eval_bytes_compare_bb1_in(v_len1, v_len1, v_len2)
	start location:	eval_bytes_compare_start
	leaf cost:	4

By chaining the transition eval_bytes_compare_start(v_len.1, v_len1, v_len2) -> eval_bytes_compare_bb1_in(v_len2 - 4, v_len1, v_len2) [ v_len2 > 0 /\ v_len2 - 1 > 0 /\ v_len2 - 2 > 0 /\ v_len2 - 3 > 0 ] with all transitions in problem 10, the following new transition is obtained:
	eval_bytes_compare_start(v_len.1, v_len1, v_len2) -> eval_bytes_compare_bb1_in(v_len2 - 5, v_len1, v_len2) [ v_len2 > 0 /\ v_len2 - 1 > 0 /\ v_len2 - 2 > 0 /\ v_len2 - 3 > 0 /\ v_len2 - 4 > 0 ]
We thus obtain the following problem:
11:	T:
		(1, 7)                  eval_bytes_compare_start(v_len.1, v_len1, v_len2) -> eval_bytes_compare_bb1_in(v_len2 - 5, v_len1, v_len2) [ v_len2 > 0 /\ v_len2 - 1 > 0 /\ v_len2 - 2 > 0 /\ v_len2 - 3 > 0 /\ v_len2 - 4 > 0 ]
		(1, 3)                  eval_bytes_compare_start(v_len.1, v_len1, v_len2) -> eval_bytes_compare_bb1_in(v_len2 - 1, v_len1, v_len2) [ v_len2 < 0 ]
		(v_len1 + v_len2, 1)    eval_bytes_compare_bb1_in(v_len.1, v_len1, v_len2) -> eval_bytes_compare_bb1_in(v_len.1 - 1, v_len1, v_len2) [ v_len.1 > 0 ]
		(?, 1)                  eval_bytes_compare_bb1_in(v_len.1, v_len1, v_len2) -> eval_bytes_compare_bb1_in(v_len.1 - 1, v_len1, v_len2) [ v_len.1 < 0 ]
		(1, 2)                  eval_bytes_compare_start(v_len.1, v_len1, v_len2) -> eval_bytes_compare_bb1_in(v_len1, v_len1, v_len2)
	start location:	eval_bytes_compare_start
	leaf cost:	4

By chaining the transition eval_bytes_compare_start(v_len.1, v_len1, v_len2) -> eval_bytes_compare_bb1_in(v_len2 - 5, v_len1, v_len2) [ v_len2 > 0 /\ v_len2 - 1 > 0 /\ v_len2 - 2 > 0 /\ v_len2 - 3 > 0 /\ v_len2 - 4 > 0 ] with all transitions in problem 11, the following new transition is obtained:
	eval_bytes_compare_start(v_len.1, v_len1, v_len2) -> eval_bytes_compare_bb1_in(v_len2 - 6, v_len1, v_len2) [ v_len2 > 0 /\ v_len2 - 1 > 0 /\ v_len2 - 2 > 0 /\ v_len2 - 3 > 0 /\ v_len2 - 4 > 0 /\ v_len2 - 5 > 0 ]
We thus obtain the following problem:
12:	T:
		(1, 8)                  eval_bytes_compare_start(v_len.1, v_len1, v_len2) -> eval_bytes_compare_bb1_in(v_len2 - 6, v_len1, v_len2) [ v_len2 > 0 /\ v_len2 - 1 > 0 /\ v_len2 - 2 > 0 /\ v_len2 - 3 > 0 /\ v_len2 - 4 > 0 /\ v_len2 - 5 > 0 ]
		(1, 3)                  eval_bytes_compare_start(v_len.1, v_len1, v_len2) -> eval_bytes_compare_bb1_in(v_len2 - 1, v_len1, v_len2) [ v_len2 < 0 ]
		(v_len1 + v_len2, 1)    eval_bytes_compare_bb1_in(v_len.1, v_len1, v_len2) -> eval_bytes_compare_bb1_in(v_len.1 - 1, v_len1, v_len2) [ v_len.1 > 0 ]
		(?, 1)                  eval_bytes_compare_bb1_in(v_len.1, v_len1, v_len2) -> eval_bytes_compare_bb1_in(v_len.1 - 1, v_len1, v_len2) [ v_len.1 < 0 ]
		(1, 2)                  eval_bytes_compare_start(v_len.1, v_len1, v_len2) -> eval_bytes_compare_bb1_in(v_len1, v_len1, v_len2)
	start location:	eval_bytes_compare_start
	leaf cost:	4

By chaining the transition eval_bytes_compare_start(v_len.1, v_len1, v_len2) -> eval_bytes_compare_bb1_in(v_len2 - 6, v_len1, v_len2) [ v_len2 > 0 /\ v_len2 - 1 > 0 /\ v_len2 - 2 > 0 /\ v_len2 - 3 > 0 /\ v_len2 - 4 > 0 /\ v_len2 - 5 > 0 ] with all transitions in problem 12, the following new transition is obtained:
	eval_bytes_compare_start(v_len.1, v_len1, v_len2) -> eval_bytes_compare_bb1_in(v_len2 - 7, v_len1, v_len2) [ v_len2 > 0 /\ v_len2 - 1 > 0 /\ v_len2 - 2 > 0 /\ v_len2 - 3 > 0 /\ v_len2 - 4 > 0 /\ v_len2 - 5 > 0 /\ v_len2 - 6 > 0 ]
We thus obtain the following problem:
13:	T:
		(1, 9)                  eval_bytes_compare_start(v_len.1, v_len1, v_len2) -> eval_bytes_compare_bb1_in(v_len2 - 7, v_len1, v_len2) [ v_len2 > 0 /\ v_len2 - 1 > 0 /\ v_len2 - 2 > 0 /\ v_len2 - 3 > 0 /\ v_len2 - 4 > 0 /\ v_len2 - 5 > 0 /\ v_len2 - 6 > 0 ]
		(1, 3)                  eval_bytes_compare_start(v_len.1, v_len1, v_len2) -> eval_bytes_compare_bb1_in(v_len2 - 1, v_len1, v_len2) [ v_len2 < 0 ]
		(v_len1 + v_len2, 1)    eval_bytes_compare_bb1_in(v_len.1, v_len1, v_len2) -> eval_bytes_compare_bb1_in(v_len.1 - 1, v_len1, v_len2) [ v_len.1 > 0 ]
		(?, 1)                  eval_bytes_compare_bb1_in(v_len.1, v_len1, v_len2) -> eval_bytes_compare_bb1_in(v_len.1 - 1, v_len1, v_len2) [ v_len.1 < 0 ]
		(1, 2)                  eval_bytes_compare_start(v_len.1, v_len1, v_len2) -> eval_bytes_compare_bb1_in(v_len1, v_len1, v_len2)
	start location:	eval_bytes_compare_start
	leaf cost:	4

By chaining the transition eval_bytes_compare_start(v_len.1, v_len1, v_len2) -> eval_bytes_compare_bb1_in(v_len2 - 7, v_len1, v_len2) [ v_len2 > 0 /\ v_len2 - 1 > 0 /\ v_len2 - 2 > 0 /\ v_len2 - 3 > 0 /\ v_len2 - 4 > 0 /\ v_len2 - 5 > 0 /\ v_len2 - 6 > 0 ] with all transitions in problem 13, the following new transition is obtained:
	eval_bytes_compare_start(v_len.1, v_len1, v_len2) -> eval_bytes_compare_bb1_in(v_len2 - 8, v_len1, v_len2) [ v_len2 > 0 /\ v_len2 - 1 > 0 /\ v_len2 - 2 > 0 /\ v_len2 - 3 > 0 /\ v_len2 - 4 > 0 /\ v_len2 - 5 > 0 /\ v_len2 - 6 > 0 /\ v_len2 - 7 > 0 ]
We thus obtain the following problem:
14:	T:
		(1, 10)                 eval_bytes_compare_start(v_len.1, v_len1, v_len2) -> eval_bytes_compare_bb1_in(v_len2 - 8, v_len1, v_len2) [ v_len2 > 0 /\ v_len2 - 1 > 0 /\ v_len2 - 2 > 0 /\ v_len2 - 3 > 0 /\ v_len2 - 4 > 0 /\ v_len2 - 5 > 0 /\ v_len2 - 6 > 0 /\ v_len2 - 7 > 0 ]
		(1, 3)                  eval_bytes_compare_start(v_len.1, v_len1, v_len2) -> eval_bytes_compare_bb1_in(v_len2 - 1, v_len1, v_len2) [ v_len2 < 0 ]
		(v_len1 + v_len2, 1)    eval_bytes_compare_bb1_in(v_len.1, v_len1, v_len2) -> eval_bytes_compare_bb1_in(v_len.1 - 1, v_len1, v_len2) [ v_len.1 > 0 ]
		(?, 1)                  eval_bytes_compare_bb1_in(v_len.1, v_len1, v_len2) -> eval_bytes_compare_bb1_in(v_len.1 - 1, v_len1, v_len2) [ v_len.1 < 0 ]
		(1, 2)                  eval_bytes_compare_start(v_len.1, v_len1, v_len2) -> eval_bytes_compare_bb1_in(v_len1, v_len1, v_len2)
	start location:	eval_bytes_compare_start
	leaf cost:	4

By chaining the transition eval_bytes_compare_start(v_len.1, v_len1, v_len2) -> eval_bytes_compare_bb1_in(v_len2 - 8, v_len1, v_len2) [ v_len2 > 0 /\ v_len2 - 1 > 0 /\ v_len2 - 2 > 0 /\ v_len2 - 3 > 0 /\ v_len2 - 4 > 0 /\ v_len2 - 5 > 0 /\ v_len2 - 6 > 0 /\ v_len2 - 7 > 0 ] with all transitions in problem 14, the following new transition is obtained:
	eval_bytes_compare_start(v_len.1, v_len1, v_len2) -> eval_bytes_compare_bb1_in(v_len2 - 9, v_len1, v_len2) [ v_len2 > 0 /\ v_len2 - 1 > 0 /\ v_len2 - 2 > 0 /\ v_len2 - 3 > 0 /\ v_len2 - 4 > 0 /\ v_len2 - 5 > 0 /\ v_len2 - 6 > 0 /\ v_len2 - 7 > 0 /\ v_len2 - 8 > 0 ]
We thus obtain the following problem:
15:	T:
		(1, 11)                 eval_bytes_compare_start(v_len.1, v_len1, v_len2) -> eval_bytes_compare_bb1_in(v_len2 - 9, v_len1, v_len2) [ v_len2 > 0 /\ v_len2 - 1 > 0 /\ v_len2 - 2 > 0 /\ v_len2 - 3 > 0 /\ v_len2 - 4 > 0 /\ v_len2 - 5 > 0 /\ v_len2 - 6 > 0 /\ v_len2 - 7 > 0 /\ v_len2 - 8 > 0 ]
		(1, 3)                  eval_bytes_compare_start(v_len.1, v_len1, v_len2) -> eval_bytes_compare_bb1_in(v_len2 - 1, v_len1, v_len2) [ v_len2 < 0 ]
		(v_len1 + v_len2, 1)    eval_bytes_compare_bb1_in(v_len.1, v_len1, v_len2) -> eval_bytes_compare_bb1_in(v_len.1 - 1, v_len1, v_len2) [ v_len.1 > 0 ]
		(?, 1)                  eval_bytes_compare_bb1_in(v_len.1, v_len1, v_len2) -> eval_bytes_compare_bb1_in(v_len.1 - 1, v_len1, v_len2) [ v_len.1 < 0 ]
		(1, 2)                  eval_bytes_compare_start(v_len.1, v_len1, v_len2) -> eval_bytes_compare_bb1_in(v_len1, v_len1, v_len2)
	start location:	eval_bytes_compare_start
	leaf cost:	4

By chaining the transition eval_bytes_compare_start(v_len.1, v_len1, v_len2) -> eval_bytes_compare_bb1_in(v_len2 - 9, v_len1, v_len2) [ v_len2 > 0 /\ v_len2 - 1 > 0 /\ v_len2 - 2 > 0 /\ v_len2 - 3 > 0 /\ v_len2 - 4 > 0 /\ v_len2 - 5 > 0 /\ v_len2 - 6 > 0 /\ v_len2 - 7 > 0 /\ v_len2 - 8 > 0 ] with all transitions in problem 15, the following new transition is obtained:
	eval_bytes_compare_start(v_len.1, v_len1, v_len2) -> eval_bytes_compare_bb1_in(v_len2 - 10, v_len1, v_len2) [ v_len2 > 0 /\ v_len2 - 1 > 0 /\ v_len2 - 2 > 0 /\ v_len2 - 3 > 0 /\ v_len2 - 4 > 0 /\ v_len2 - 5 > 0 /\ v_len2 - 6 > 0 /\ v_len2 - 7 > 0 /\ v_len2 - 8 > 0 /\ v_len2 - 9 > 0 ]
We thus obtain the following problem:
16:	T:
		(1, 12)                 eval_bytes_compare_start(v_len.1, v_len1, v_len2) -> eval_bytes_compare_bb1_in(v_len2 - 10, v_len1, v_len2) [ v_len2 > 0 /\ v_len2 - 1 > 0 /\ v_len2 - 2 > 0 /\ v_len2 - 3 > 0 /\ v_len2 - 4 > 0 /\ v_len2 - 5 > 0 /\ v_len2 - 6 > 0 /\ v_len2 - 7 > 0 /\ v_len2 - 8 > 0 /\ v_len2 - 9 > 0 ]
		(1, 3)                  eval_bytes_compare_start(v_len.1, v_len1, v_len2) -> eval_bytes_compare_bb1_in(v_len2 - 1, v_len1, v_len2) [ v_len2 < 0 ]
		(v_len1 + v_len2, 1)    eval_bytes_compare_bb1_in(v_len.1, v_len1, v_len2) -> eval_bytes_compare_bb1_in(v_len.1 - 1, v_len1, v_len2) [ v_len.1 > 0 ]
		(?, 1)                  eval_bytes_compare_bb1_in(v_len.1, v_len1, v_len2) -> eval_bytes_compare_bb1_in(v_len.1 - 1, v_len1, v_len2) [ v_len.1 < 0 ]
		(1, 2)                  eval_bytes_compare_start(v_len.1, v_len1, v_len2) -> eval_bytes_compare_bb1_in(v_len1, v_len1, v_len2)
	start location:	eval_bytes_compare_start
	leaf cost:	4

By chaining the transition eval_bytes_compare_start(v_len.1, v_len1, v_len2) -> eval_bytes_compare_bb1_in(v_len2 - 10, v_len1, v_len2) [ v_len2 > 0 /\ v_len2 - 1 > 0 /\ v_len2 - 2 > 0 /\ v_len2 - 3 > 0 /\ v_len2 - 4 > 0 /\ v_len2 - 5 > 0 /\ v_len2 - 6 > 0 /\ v_len2 - 7 > 0 /\ v_len2 - 8 > 0 /\ v_len2 - 9 > 0 ] with all transitions in problem 16, the following new transition is obtained:
	eval_bytes_compare_start(v_len.1, v_len1, v_len2) -> eval_bytes_compare_bb1_in(v_len2 - 11, v_len1, v_len2) [ v_len2 > 0 /\ v_len2 - 1 > 0 /\ v_len2 - 2 > 0 /\ v_len2 - 3 > 0 /\ v_len2 - 4 > 0 /\ v_len2 - 5 > 0 /\ v_len2 - 6 > 0 /\ v_len2 - 7 > 0 /\ v_len2 - 8 > 0 /\ v_len2 - 9 > 0 /\ v_len2 - 10 > 0 ]
We thus obtain the following problem:
17:	T:
		(1, 13)                 eval_bytes_compare_start(v_len.1, v_len1, v_len2) -> eval_bytes_compare_bb1_in(v_len2 - 11, v_len1, v_len2) [ v_len2 > 0 /\ v_len2 - 1 > 0 /\ v_len2 - 2 > 0 /\ v_len2 - 3 > 0 /\ v_len2 - 4 > 0 /\ v_len2 - 5 > 0 /\ v_len2 - 6 > 0 /\ v_len2 - 7 > 0 /\ v_len2 - 8 > 0 /\ v_len2 - 9 > 0 /\ v_len2 - 10 > 0 ]
		(1, 3)                  eval_bytes_compare_start(v_len.1, v_len1, v_len2) -> eval_bytes_compare_bb1_in(v_len2 - 1, v_len1, v_len2) [ v_len2 < 0 ]
		(v_len1 + v_len2, 1)    eval_bytes_compare_bb1_in(v_len.1, v_len1, v_len2) -> eval_bytes_compare_bb1_in(v_len.1 - 1, v_len1, v_len2) [ v_len.1 > 0 ]
		(?, 1)                  eval_bytes_compare_bb1_in(v_len.1, v_len1, v_len2) -> eval_bytes_compare_bb1_in(v_len.1 - 1, v_len1, v_len2) [ v_len.1 < 0 ]
		(1, 2)                  eval_bytes_compare_start(v_len.1, v_len1, v_len2) -> eval_bytes_compare_bb1_in(v_len1, v_len1, v_len2)
	start location:	eval_bytes_compare_start
	leaf cost:	4

By chaining the transition eval_bytes_compare_start(v_len.1, v_len1, v_len2) -> eval_bytes_compare_bb1_in(v_len2 - 11, v_len1, v_len2) [ v_len2 > 0 /\ v_len2 - 1 > 0 /\ v_len2 - 2 > 0 /\ v_len2 - 3 > 0 /\ v_len2 - 4 > 0 /\ v_len2 - 5 > 0 /\ v_len2 - 6 > 0 /\ v_len2 - 7 > 0 /\ v_len2 - 8 > 0 /\ v_len2 - 9 > 0 /\ v_len2 - 10 > 0 ] with all transitions in problem 17, the following new transition is obtained:
	eval_bytes_compare_start(v_len.1, v_len1, v_len2) -> eval_bytes_compare_bb1_in(v_len2 - 12, v_len1, v_len2) [ v_len2 > 0 /\ v_len2 - 1 > 0 /\ v_len2 - 2 > 0 /\ v_len2 - 3 > 0 /\ v_len2 - 4 > 0 /\ v_len2 - 5 > 0 /\ v_len2 - 6 > 0 /\ v_len2 - 7 > 0 /\ v_len2 - 8 > 0 /\ v_len2 - 9 > 0 /\ v_len2 - 10 > 0 /\ v_len2 - 11 > 0 ]
We thus obtain the following problem:
18:	T:
		(1, 14)                 eval_bytes_compare_start(v_len.1, v_len1, v_len2) -> eval_bytes_compare_bb1_in(v_len2 - 12, v_len1, v_len2) [ v_len2 > 0 /\ v_len2 - 1 > 0 /\ v_len2 - 2 > 0 /\ v_len2 - 3 > 0 /\ v_len2 - 4 > 0 /\ v_len2 - 5 > 0 /\ v_len2 - 6 > 0 /\ v_len2 - 7 > 0 /\ v_len2 - 8 > 0 /\ v_len2 - 9 > 0 /\ v_len2 - 10 > 0 /\ v_len2 - 11 > 0 ]
		(1, 3)                  eval_bytes_compare_start(v_len.1, v_len1, v_len2) -> eval_bytes_compare_bb1_in(v_len2 - 1, v_len1, v_len2) [ v_len2 < 0 ]
		(v_len1 + v_len2, 1)    eval_bytes_compare_bb1_in(v_len.1, v_len1, v_len2) -> eval_bytes_compare_bb1_in(v_len.1 - 1, v_len1, v_len2) [ v_len.1 > 0 ]
		(?, 1)                  eval_bytes_compare_bb1_in(v_len.1, v_len1, v_len2) -> eval_bytes_compare_bb1_in(v_len.1 - 1, v_len1, v_len2) [ v_len.1 < 0 ]
		(1, 2)                  eval_bytes_compare_start(v_len.1, v_len1, v_len2) -> eval_bytes_compare_bb1_in(v_len1, v_len1, v_len2)
	start location:	eval_bytes_compare_start
	leaf cost:	4

By chaining the transition eval_bytes_compare_start(v_len.1, v_len1, v_len2) -> eval_bytes_compare_bb1_in(v_len2 - 12, v_len1, v_len2) [ v_len2 > 0 /\ v_len2 - 1 > 0 /\ v_len2 - 2 > 0 /\ v_len2 - 3 > 0 /\ v_len2 - 4 > 0 /\ v_len2 - 5 > 0 /\ v_len2 - 6 > 0 /\ v_len2 - 7 > 0 /\ v_len2 - 8 > 0 /\ v_len2 - 9 > 0 /\ v_len2 - 10 > 0 /\ v_len2 - 11 > 0 ] with all transitions in problem 18, the following new transition is obtained:
	eval_bytes_compare_start(v_len.1, v_len1, v_len2) -> eval_bytes_compare_bb1_in(v_len2 - 13, v_len1, v_len2) [ v_len2 > 0 /\ v_len2 - 1 > 0 /\ v_len2 - 2 > 0 /\ v_len2 - 3 > 0 /\ v_len2 - 4 > 0 /\ v_len2 - 5 > 0 /\ v_len2 - 6 > 0 /\ v_len2 - 7 > 0 /\ v_len2 - 8 > 0 /\ v_len2 - 9 > 0 /\ v_len2 - 10 > 0 /\ v_len2 - 11 > 0 /\ v_len2 - 12 > 0 ]
We thus obtain the following problem:
19:	T:
		(1, 15)                 eval_bytes_compare_start(v_len.1, v_len1, v_len2) -> eval_bytes_compare_bb1_in(v_len2 - 13, v_len1, v_len2) [ v_len2 > 0 /\ v_len2 - 1 > 0 /\ v_len2 - 2 > 0 /\ v_len2 - 3 > 0 /\ v_len2 - 4 > 0 /\ v_len2 - 5 > 0 /\ v_len2 - 6 > 0 /\ v_len2 - 7 > 0 /\ v_len2 - 8 > 0 /\ v_len2 - 9 > 0 /\ v_len2 - 10 > 0 /\ v_len2 - 11 > 0 /\ v_len2 - 12 > 0 ]
		(1, 3)                  eval_bytes_compare_start(v_len.1, v_len1, v_len2) -> eval_bytes_compare_bb1_in(v_len2 - 1, v_len1, v_len2) [ v_len2 < 0 ]
		(v_len1 + v_len2, 1)    eval_bytes_compare_bb1_in(v_len.1, v_len1, v_len2) -> eval_bytes_compare_bb1_in(v_len.1 - 1, v_len1, v_len2) [ v_len.1 > 0 ]
		(?, 1)                  eval_bytes_compare_bb1_in(v_len.1, v_len1, v_len2) -> eval_bytes_compare_bb1_in(v_len.1 - 1, v_len1, v_len2) [ v_len.1 < 0 ]
		(1, 2)                  eval_bytes_compare_start(v_len.1, v_len1, v_len2) -> eval_bytes_compare_bb1_in(v_len1, v_len1, v_len2)
	start location:	eval_bytes_compare_start
	leaf cost:	4

By chaining the transition eval_bytes_compare_start(v_len.1, v_len1, v_len2) -> eval_bytes_compare_bb1_in(v_len2 - 13, v_len1, v_len2) [ v_len2 > 0 /\ v_len2 - 1 > 0 /\ v_len2 - 2 > 0 /\ v_len2 - 3 > 0 /\ v_len2 - 4 > 0 /\ v_len2 - 5 > 0 /\ v_len2 - 6 > 0 /\ v_len2 - 7 > 0 /\ v_len2 - 8 > 0 /\ v_len2 - 9 > 0 /\ v_len2 - 10 > 0 /\ v_len2 - 11 > 0 /\ v_len2 - 12 > 0 ] with all transitions in problem 19, the following new transition is obtained:
	eval_bytes_compare_start(v_len.1, v_len1, v_len2) -> eval_bytes_compare_bb1_in(v_len2 - 14, v_len1, v_len2) [ v_len2 > 0 /\ v_len2 - 1 > 0 /\ v_len2 - 2 > 0 /\ v_len2 - 3 > 0 /\ v_len2 - 4 > 0 /\ v_len2 - 5 > 0 /\ v_len2 - 6 > 0 /\ v_len2 - 7 > 0 /\ v_len2 - 8 > 0 /\ v_len2 - 9 > 0 /\ v_len2 - 10 > 0 /\ v_len2 - 11 > 0 /\ v_len2 - 12 > 0 /\ v_len2 - 13 > 0 ]
We thus obtain the following problem:
20:	T:
		(1, 16)                 eval_bytes_compare_start(v_len.1, v_len1, v_len2) -> eval_bytes_compare_bb1_in(v_len2 - 14, v_len1, v_len2) [ v_len2 > 0 /\ v_len2 - 1 > 0 /\ v_len2 - 2 > 0 /\ v_len2 - 3 > 0 /\ v_len2 - 4 > 0 /\ v_len2 - 5 > 0 /\ v_len2 - 6 > 0 /\ v_len2 - 7 > 0 /\ v_len2 - 8 > 0 /\ v_len2 - 9 > 0 /\ v_len2 - 10 > 0 /\ v_len2 - 11 > 0 /\ v_len2 - 12 > 0 /\ v_len2 - 13 > 0 ]
		(1, 3)                  eval_bytes_compare_start(v_len.1, v_len1, v_len2) -> eval_bytes_compare_bb1_in(v_len2 - 1, v_len1, v_len2) [ v_len2 < 0 ]
		(v_len1 + v_len2, 1)    eval_bytes_compare_bb1_in(v_len.1, v_len1, v_len2) -> eval_bytes_compare_bb1_in(v_len.1 - 1, v_len1, v_len2) [ v_len.1 > 0 ]
		(?, 1)                  eval_bytes_compare_bb1_in(v_len.1, v_len1, v_len2) -> eval_bytes_compare_bb1_in(v_len.1 - 1, v_len1, v_len2) [ v_len.1 < 0 ]
		(1, 2)                  eval_bytes_compare_start(v_len.1, v_len1, v_len2) -> eval_bytes_compare_bb1_in(v_len1, v_len1, v_len2)
	start location:	eval_bytes_compare_start
	leaf cost:	4

Complexity upper bound ?

Time: 0.370 sec (SMT: 0.310 sec)

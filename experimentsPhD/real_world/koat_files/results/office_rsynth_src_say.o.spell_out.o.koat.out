YES(?, 15*v_n + 11)

Initial complexity problem:
1:	T:
		(1, 1)    eval_spell_out_start(v_.01, v_3, v_n) -> Com_1(eval_spell_out_bb0_in(v_.01, v_3, v_n))
		(?, 1)    eval_spell_out_bb0_in(v_.01, v_3, v_n) -> Com_1(eval_spell_out_0(v_.01, v_3, v_n))
		(?, 1)    eval_spell_out_0(v_.01, v_3, v_n) -> Com_2(eval_fprintf_start(v_.01, v_3, v_n), eval_spell_out_1(v_.01, v_3, v_n))
		(?, 1)    eval_spell_out_1(v_.01, v_3, v_n) -> Com_1(eval_spell_out_bb1_in(v_n, v_3, v_n))
		(?, 1)    eval_spell_out_bb1_in(v_.01, v_3, v_n) -> Com_1(eval_spell_out_8(v_.01, v_.01 - 1, v_n)) [ v_.01 > 0 ]
		(?, 1)    eval_spell_out_bb1_in(v_.01, v_3, v_n) -> Com_1(eval_spell_out_stop(v_.01, v_3, v_n)) [ v_.01 <= 0 ]
		(?, 1)    eval_spell_out_8(v_.01, v_3, v_n) -> Com_2(eval_xlate_string_start(v_.01, v_3, v_n), eval_spell_out_9(v_.01, v_3, v_n))
		(?, 1)    eval_spell_out_9(v_.01, v_3, v_n) -> Com_1(eval_spell_out_bb1_in(v_3, v_3, v_n))
	start location:	eval_spell_out_start
	leaf cost:	0

Repeatedly propagating knowledge in problem 1 produces the following problem:
2:	T:
		(1, 1)    eval_spell_out_start(v_.01, v_3, v_n) -> Com_1(eval_spell_out_bb0_in(v_.01, v_3, v_n))
		(1, 1)    eval_spell_out_bb0_in(v_.01, v_3, v_n) -> Com_1(eval_spell_out_0(v_.01, v_3, v_n))
		(1, 1)    eval_spell_out_0(v_.01, v_3, v_n) -> Com_2(eval_fprintf_start(v_.01, v_3, v_n), eval_spell_out_1(v_.01, v_3, v_n))
		(1, 1)    eval_spell_out_1(v_.01, v_3, v_n) -> Com_1(eval_spell_out_bb1_in(v_n, v_3, v_n))
		(?, 1)    eval_spell_out_bb1_in(v_.01, v_3, v_n) -> Com_1(eval_spell_out_8(v_.01, v_.01 - 1, v_n)) [ v_.01 > 0 ]
		(?, 1)    eval_spell_out_bb1_in(v_.01, v_3, v_n) -> Com_1(eval_spell_out_stop(v_.01, v_3, v_n)) [ v_.01 <= 0 ]
		(?, 1)    eval_spell_out_8(v_.01, v_3, v_n) -> Com_2(eval_xlate_string_start(v_.01, v_3, v_n), eval_spell_out_9(v_.01, v_3, v_n))
		(?, 1)    eval_spell_out_9(v_.01, v_3, v_n) -> Com_1(eval_spell_out_bb1_in(v_3, v_3, v_n))
	start location:	eval_spell_out_start
	leaf cost:	0

A polynomial rank function with
	Pol(eval_spell_out_start) = 1
	Pol(eval_spell_out_bb0_in) = 1
	Pol(eval_spell_out_0) = 1
	Pol(eval_fprintf_start) = 0
	Pol(eval_spell_out_1) = 1
	Pol(eval_spell_out_bb1_in) = 1
	Pol(eval_spell_out_8) = 1
	Pol(eval_spell_out_stop) = 0
	Pol(eval_xlate_string_start) = 0
	Pol(eval_spell_out_9) = 1
orients all transitions weakly and the transition
	eval_spell_out_bb1_in(v_.01, v_3, v_n) -> Com_1(eval_spell_out_stop(v_.01, v_3, v_n)) [ v_.01 <= 0 ]
strictly and produces the following problem:
3:	T:
		(1, 1)    eval_spell_out_start(v_.01, v_3, v_n) -> Com_1(eval_spell_out_bb0_in(v_.01, v_3, v_n))
		(1, 1)    eval_spell_out_bb0_in(v_.01, v_3, v_n) -> Com_1(eval_spell_out_0(v_.01, v_3, v_n))
		(1, 1)    eval_spell_out_0(v_.01, v_3, v_n) -> Com_2(eval_fprintf_start(v_.01, v_3, v_n), eval_spell_out_1(v_.01, v_3, v_n))
		(1, 1)    eval_spell_out_1(v_.01, v_3, v_n) -> Com_1(eval_spell_out_bb1_in(v_n, v_3, v_n))
		(?, 1)    eval_spell_out_bb1_in(v_.01, v_3, v_n) -> Com_1(eval_spell_out_8(v_.01, v_.01 - 1, v_n)) [ v_.01 > 0 ]
		(1, 1)    eval_spell_out_bb1_in(v_.01, v_3, v_n) -> Com_1(eval_spell_out_stop(v_.01, v_3, v_n)) [ v_.01 <= 0 ]
		(?, 1)    eval_spell_out_8(v_.01, v_3, v_n) -> Com_2(eval_xlate_string_start(v_.01, v_3, v_n), eval_spell_out_9(v_.01, v_3, v_n))
		(?, 1)    eval_spell_out_9(v_.01, v_3, v_n) -> Com_1(eval_spell_out_bb1_in(v_3, v_3, v_n))
	start location:	eval_spell_out_start
	leaf cost:	0

Applied AI with 'oct' on problem 3 to obtain the following invariants:
  For symbol eval_spell_out_8: X_3 - 1 >= 0 /\ X_2 + X_3 - 1 >= 0 /\ -X_2 + X_3 - 1 >= 0 /\ X_1 + X_3 - 2 >= 0 /\ -X_1 + X_3 >= 0 /\ X_1 - X_2 - 1 >= 0 /\ X_2 >= 0 /\ X_1 + X_2 - 1 >= 0 /\ -X_1 + X_2 + 1 >= 0 /\ X_1 - 1 >= 0
  For symbol eval_spell_out_9: X_3 - 1 >= 0 /\ X_2 + X_3 - 1 >= 0 /\ -X_2 + X_3 - 1 >= 0 /\ X_1 + X_3 - 2 >= 0 /\ -X_1 + X_3 >= 0 /\ X_1 - X_2 - 1 >= 0 /\ X_2 >= 0 /\ X_1 + X_2 - 1 >= 0 /\ -X_1 + X_2 + 1 >= 0 /\ X_1 - 1 >= 0
  For symbol eval_spell_out_bb1_in: -X_1 + X_3 >= 0


This yielded the following problem:
4:	T:
		(?, 1)    eval_spell_out_9(v_.01, v_3, v_n) -> Com_1(eval_spell_out_bb1_in(v_3, v_3, v_n)) [ v_n - 1 >= 0 /\ v_3 + v_n - 1 >= 0 /\ -v_3 + v_n - 1 >= 0 /\ v_.01 + v_n - 2 >= 0 /\ -v_.01 + v_n >= 0 /\ v_.01 - v_3 - 1 >= 0 /\ v_3 >= 0 /\ v_.01 + v_3 - 1 >= 0 /\ -v_.01 + v_3 + 1 >= 0 /\ v_.01 - 1 >= 0 ]
		(?, 1)    eval_spell_out_8(v_.01, v_3, v_n) -> Com_2(eval_xlate_string_start(v_.01, v_3, v_n), eval_spell_out_9(v_.01, v_3, v_n)) [ v_n - 1 >= 0 /\ v_3 + v_n - 1 >= 0 /\ -v_3 + v_n - 1 >= 0 /\ v_.01 + v_n - 2 >= 0 /\ -v_.01 + v_n >= 0 /\ v_.01 - v_3 - 1 >= 0 /\ v_3 >= 0 /\ v_.01 + v_3 - 1 >= 0 /\ -v_.01 + v_3 + 1 >= 0 /\ v_.01 - 1 >= 0 ]
		(1, 1)    eval_spell_out_bb1_in(v_.01, v_3, v_n) -> Com_1(eval_spell_out_stop(v_.01, v_3, v_n)) [ -v_.01 + v_n >= 0 /\ v_.01 <= 0 ]
		(?, 1)    eval_spell_out_bb1_in(v_.01, v_3, v_n) -> Com_1(eval_spell_out_8(v_.01, v_.01 - 1, v_n)) [ -v_.01 + v_n >= 0 /\ v_.01 > 0 ]
		(1, 1)    eval_spell_out_1(v_.01, v_3, v_n) -> Com_1(eval_spell_out_bb1_in(v_n, v_3, v_n))
		(1, 1)    eval_spell_out_0(v_.01, v_3, v_n) -> Com_2(eval_fprintf_start(v_.01, v_3, v_n), eval_spell_out_1(v_.01, v_3, v_n))
		(1, 1)    eval_spell_out_bb0_in(v_.01, v_3, v_n) -> Com_1(eval_spell_out_0(v_.01, v_3, v_n))
		(1, 1)    eval_spell_out_start(v_.01, v_3, v_n) -> Com_1(eval_spell_out_bb0_in(v_.01, v_3, v_n))
	start location:	eval_spell_out_start
	leaf cost:	0

A polynomial rank function with
	Pol(eval_spell_out_bb1_in) = 3*V_1 + 2*V_3 - 2
	Pol(eval_spell_out_8) = 3*V_2 + 2*V_3
	Pol(eval_spell_out_9) = -V_1 + 4*V_2 + 2*V_3
	Pol(eval_xlate_string_start) = V_1 - V_2 - 1
and size complexities
	S("eval_spell_out_start(v_.01, v_3, v_n) -> Com_1(eval_spell_out_bb0_in(v_.01, v_3, v_n))", 0-0) = v_.01
	S("eval_spell_out_start(v_.01, v_3, v_n) -> Com_1(eval_spell_out_bb0_in(v_.01, v_3, v_n))", 0-1) = v_3
	S("eval_spell_out_start(v_.01, v_3, v_n) -> Com_1(eval_spell_out_bb0_in(v_.01, v_3, v_n))", 0-2) = v_n
	S("eval_spell_out_bb0_in(v_.01, v_3, v_n) -> Com_1(eval_spell_out_0(v_.01, v_3, v_n))", 0-0) = v_.01
	S("eval_spell_out_bb0_in(v_.01, v_3, v_n) -> Com_1(eval_spell_out_0(v_.01, v_3, v_n))", 0-1) = v_3
	S("eval_spell_out_bb0_in(v_.01, v_3, v_n) -> Com_1(eval_spell_out_0(v_.01, v_3, v_n))", 0-2) = v_n
	S("eval_spell_out_0(v_.01, v_3, v_n) -> Com_2(eval_fprintf_start(v_.01, v_3, v_n), eval_spell_out_1(v_.01, v_3, v_n))", 0-0) = v_.01
	S("eval_spell_out_0(v_.01, v_3, v_n) -> Com_2(eval_fprintf_start(v_.01, v_3, v_n), eval_spell_out_1(v_.01, v_3, v_n))", 0-1) = v_3
	S("eval_spell_out_0(v_.01, v_3, v_n) -> Com_2(eval_fprintf_start(v_.01, v_3, v_n), eval_spell_out_1(v_.01, v_3, v_n))", 0-2) = v_n
	S("eval_spell_out_0(v_.01, v_3, v_n) -> Com_2(eval_fprintf_start(v_.01, v_3, v_n), eval_spell_out_1(v_.01, v_3, v_n))", 1-0) = v_.01
	S("eval_spell_out_0(v_.01, v_3, v_n) -> Com_2(eval_fprintf_start(v_.01, v_3, v_n), eval_spell_out_1(v_.01, v_3, v_n))", 1-1) = v_3
	S("eval_spell_out_0(v_.01, v_3, v_n) -> Com_2(eval_fprintf_start(v_.01, v_3, v_n), eval_spell_out_1(v_.01, v_3, v_n))", 1-2) = v_n
	S("eval_spell_out_1(v_.01, v_3, v_n) -> Com_1(eval_spell_out_bb1_in(v_n, v_3, v_n))", 0-0) = v_n
	S("eval_spell_out_1(v_.01, v_3, v_n) -> Com_1(eval_spell_out_bb1_in(v_n, v_3, v_n))", 0-1) = v_3
	S("eval_spell_out_1(v_.01, v_3, v_n) -> Com_1(eval_spell_out_bb1_in(v_n, v_3, v_n))", 0-2) = v_n
	S("eval_spell_out_bb1_in(v_.01, v_3, v_n) -> Com_1(eval_spell_out_8(v_.01, v_.01 - 1, v_n)) [ -v_.01 + v_n >= 0 /\\ v_.01 > 0 ]", 0-0) = v_n
	S("eval_spell_out_bb1_in(v_.01, v_3, v_n) -> Com_1(eval_spell_out_8(v_.01, v_.01 - 1, v_n)) [ -v_.01 + v_n >= 0 /\\ v_.01 > 0 ]", 0-1) = v_n
	S("eval_spell_out_bb1_in(v_.01, v_3, v_n) -> Com_1(eval_spell_out_8(v_.01, v_.01 - 1, v_n)) [ -v_.01 + v_n >= 0 /\\ v_.01 > 0 ]", 0-2) = v_n
	S("eval_spell_out_bb1_in(v_.01, v_3, v_n) -> Com_1(eval_spell_out_stop(v_.01, v_3, v_n)) [ -v_.01 + v_n >= 0 /\\ v_.01 <= 0 ]", 0-0) = v_n
	S("eval_spell_out_bb1_in(v_.01, v_3, v_n) -> Com_1(eval_spell_out_stop(v_.01, v_3, v_n)) [ -v_.01 + v_n >= 0 /\\ v_.01 <= 0 ]", 0-1) = v_3 + v_n
	S("eval_spell_out_bb1_in(v_.01, v_3, v_n) -> Com_1(eval_spell_out_stop(v_.01, v_3, v_n)) [ -v_.01 + v_n >= 0 /\\ v_.01 <= 0 ]", 0-2) = v_n
	S("eval_spell_out_8(v_.01, v_3, v_n) -> Com_2(eval_xlate_string_start(v_.01, v_3, v_n), eval_spell_out_9(v_.01, v_3, v_n)) [ v_n - 1 >= 0 /\\ v_3 + v_n - 1 >= 0 /\\ -v_3 + v_n - 1 >= 0 /\\ v_.01 + v_n - 2 >= 0 /\\ -v_.01 + v_n >= 0 /\\ v_.01 - v_3 - 1 >= 0 /\\ v_3 >= 0 /\\ v_.01 + v_3 - 1 >= 0 /\\ -v_.01 + v_3 + 1 >= 0 /\\ v_.01 - 1 >= 0 ]", 0-0) = v_n
	S("eval_spell_out_8(v_.01, v_3, v_n) -> Com_2(eval_xlate_string_start(v_.01, v_3, v_n), eval_spell_out_9(v_.01, v_3, v_n)) [ v_n - 1 >= 0 /\\ v_3 + v_n - 1 >= 0 /\\ -v_3 + v_n - 1 >= 0 /\\ v_.01 + v_n - 2 >= 0 /\\ -v_.01 + v_n >= 0 /\\ v_.01 - v_3 - 1 >= 0 /\\ v_3 >= 0 /\\ v_.01 + v_3 - 1 >= 0 /\\ -v_.01 + v_3 + 1 >= 0 /\\ v_.01 - 1 >= 0 ]", 0-1) = v_n
	S("eval_spell_out_8(v_.01, v_3, v_n) -> Com_2(eval_xlate_string_start(v_.01, v_3, v_n), eval_spell_out_9(v_.01, v_3, v_n)) [ v_n - 1 >= 0 /\\ v_3 + v_n - 1 >= 0 /\\ -v_3 + v_n - 1 >= 0 /\\ v_.01 + v_n - 2 >= 0 /\\ -v_.01 + v_n >= 0 /\\ v_.01 - v_3 - 1 >= 0 /\\ v_3 >= 0 /\\ v_.01 + v_3 - 1 >= 0 /\\ -v_.01 + v_3 + 1 >= 0 /\\ v_.01 - 1 >= 0 ]", 0-2) = v_n
	S("eval_spell_out_8(v_.01, v_3, v_n) -> Com_2(eval_xlate_string_start(v_.01, v_3, v_n), eval_spell_out_9(v_.01, v_3, v_n)) [ v_n - 1 >= 0 /\\ v_3 + v_n - 1 >= 0 /\\ -v_3 + v_n - 1 >= 0 /\\ v_.01 + v_n - 2 >= 0 /\\ -v_.01 + v_n >= 0 /\\ v_.01 - v_3 - 1 >= 0 /\\ v_3 >= 0 /\\ v_.01 + v_3 - 1 >= 0 /\\ -v_.01 + v_3 + 1 >= 0 /\\ v_.01 - 1 >= 0 ]", 1-0) = v_n
	S("eval_spell_out_8(v_.01, v_3, v_n) -> Com_2(eval_xlate_string_start(v_.01, v_3, v_n), eval_spell_out_9(v_.01, v_3, v_n)) [ v_n - 1 >= 0 /\\ v_3 + v_n - 1 >= 0 /\\ -v_3 + v_n - 1 >= 0 /\\ v_.01 + v_n - 2 >= 0 /\\ -v_.01 + v_n >= 0 /\\ v_.01 - v_3 - 1 >= 0 /\\ v_3 >= 0 /\\ v_.01 + v_3 - 1 >= 0 /\\ -v_.01 + v_3 + 1 >= 0 /\\ v_.01 - 1 >= 0 ]", 1-1) = v_n
	S("eval_spell_out_8(v_.01, v_3, v_n) -> Com_2(eval_xlate_string_start(v_.01, v_3, v_n), eval_spell_out_9(v_.01, v_3, v_n)) [ v_n - 1 >= 0 /\\ v_3 + v_n - 1 >= 0 /\\ -v_3 + v_n - 1 >= 0 /\\ v_.01 + v_n - 2 >= 0 /\\ -v_.01 + v_n >= 0 /\\ v_.01 - v_3 - 1 >= 0 /\\ v_3 >= 0 /\\ v_.01 + v_3 - 1 >= 0 /\\ -v_.01 + v_3 + 1 >= 0 /\\ v_.01 - 1 >= 0 ]", 1-2) = v_n
	S("eval_spell_out_9(v_.01, v_3, v_n) -> Com_1(eval_spell_out_bb1_in(v_3, v_3, v_n)) [ v_n - 1 >= 0 /\\ v_3 + v_n - 1 >= 0 /\\ -v_3 + v_n - 1 >= 0 /\\ v_.01 + v_n - 2 >= 0 /\\ -v_.01 + v_n >= 0 /\\ v_.01 - v_3 - 1 >= 0 /\\ v_3 >= 0 /\\ v_.01 + v_3 - 1 >= 0 /\\ -v_.01 + v_3 + 1 >= 0 /\\ v_.01 - 1 >= 0 ]", 0-0) = v_n
	S("eval_spell_out_9(v_.01, v_3, v_n) -> Com_1(eval_spell_out_bb1_in(v_3, v_3, v_n)) [ v_n - 1 >= 0 /\\ v_3 + v_n - 1 >= 0 /\\ -v_3 + v_n - 1 >= 0 /\\ v_.01 + v_n - 2 >= 0 /\\ -v_.01 + v_n >= 0 /\\ v_.01 - v_3 - 1 >= 0 /\\ v_3 >= 0 /\\ v_.01 + v_3 - 1 >= 0 /\\ -v_.01 + v_3 + 1 >= 0 /\\ v_.01 - 1 >= 0 ]", 0-1) = v_n
	S("eval_spell_out_9(v_.01, v_3, v_n) -> Com_1(eval_spell_out_bb1_in(v_3, v_3, v_n)) [ v_n - 1 >= 0 /\\ v_3 + v_n - 1 >= 0 /\\ -v_3 + v_n - 1 >= 0 /\\ v_.01 + v_n - 2 >= 0 /\\ -v_.01 + v_n >= 0 /\\ v_.01 - v_3 - 1 >= 0 /\\ v_3 >= 0 /\\ v_.01 + v_3 - 1 >= 0 /\\ -v_.01 + v_3 + 1 >= 0 /\\ v_.01 - 1 >= 0 ]", 0-2) = v_n
orients the transitions
	eval_spell_out_bb1_in(v_.01, v_3, v_n) -> Com_1(eval_spell_out_8(v_.01, v_.01 - 1, v_n)) [ -v_.01 + v_n >= 0 /\ v_.01 > 0 ]
	eval_spell_out_9(v_.01, v_3, v_n) -> Com_1(eval_spell_out_bb1_in(v_3, v_3, v_n)) [ v_n - 1 >= 0 /\ v_3 + v_n - 1 >= 0 /\ -v_3 + v_n - 1 >= 0 /\ v_.01 + v_n - 2 >= 0 /\ -v_.01 + v_n >= 0 /\ v_.01 - v_3 - 1 >= 0 /\ v_3 >= 0 /\ v_.01 + v_3 - 1 >= 0 /\ -v_.01 + v_3 + 1 >= 0 /\ v_.01 - 1 >= 0 ]
	eval_spell_out_8(v_.01, v_3, v_n) -> Com_2(eval_xlate_string_start(v_.01, v_3, v_n), eval_spell_out_9(v_.01, v_3, v_n)) [ v_n - 1 >= 0 /\ v_3 + v_n - 1 >= 0 /\ -v_3 + v_n - 1 >= 0 /\ v_.01 + v_n - 2 >= 0 /\ -v_.01 + v_n >= 0 /\ v_.01 - v_3 - 1 >= 0 /\ v_3 >= 0 /\ v_.01 + v_3 - 1 >= 0 /\ -v_.01 + v_3 + 1 >= 0 /\ v_.01 - 1 >= 0 ]
weakly and the transitions
	eval_spell_out_bb1_in(v_.01, v_3, v_n) -> Com_1(eval_spell_out_8(v_.01, v_.01 - 1, v_n)) [ -v_.01 + v_n >= 0 /\ v_.01 > 0 ]
	eval_spell_out_9(v_.01, v_3, v_n) -> Com_1(eval_spell_out_bb1_in(v_3, v_3, v_n)) [ v_n - 1 >= 0 /\ v_3 + v_n - 1 >= 0 /\ -v_3 + v_n - 1 >= 0 /\ v_.01 + v_n - 2 >= 0 /\ -v_.01 + v_n >= 0 /\ v_.01 - v_3 - 1 >= 0 /\ v_3 >= 0 /\ v_.01 + v_3 - 1 >= 0 /\ -v_.01 + v_3 + 1 >= 0 /\ v_.01 - 1 >= 0 ]
	eval_spell_out_8(v_.01, v_3, v_n) -> Com_2(eval_xlate_string_start(v_.01, v_3, v_n), eval_spell_out_9(v_.01, v_3, v_n)) [ v_n - 1 >= 0 /\ v_3 + v_n - 1 >= 0 /\ -v_3 + v_n - 1 >= 0 /\ v_.01 + v_n - 2 >= 0 /\ -v_.01 + v_n >= 0 /\ v_.01 - v_3 - 1 >= 0 /\ v_3 >= 0 /\ v_.01 + v_3 - 1 >= 0 /\ -v_.01 + v_3 + 1 >= 0 /\ v_.01 - 1 >= 0 ]
strictly and produces the following problem:
5:	T:
		(5*v_n + 2, 1)    eval_spell_out_9(v_.01, v_3, v_n) -> Com_1(eval_spell_out_bb1_in(v_3, v_3, v_n)) [ v_n - 1 >= 0 /\ v_3 + v_n - 1 >= 0 /\ -v_3 + v_n - 1 >= 0 /\ v_.01 + v_n - 2 >= 0 /\ -v_.01 + v_n >= 0 /\ v_.01 - v_3 - 1 >= 0 /\ v_3 >= 0 /\ v_.01 + v_3 - 1 >= 0 /\ -v_.01 + v_3 + 1 >= 0 /\ v_.01 - 1 >= 0 ]
		(5*v_n + 2, 1)    eval_spell_out_8(v_.01, v_3, v_n) -> Com_2(eval_xlate_string_start(v_.01, v_3, v_n), eval_spell_out_9(v_.01, v_3, v_n)) [ v_n - 1 >= 0 /\ v_3 + v_n - 1 >= 0 /\ -v_3 + v_n - 1 >= 0 /\ v_.01 + v_n - 2 >= 0 /\ -v_.01 + v_n >= 0 /\ v_.01 - v_3 - 1 >= 0 /\ v_3 >= 0 /\ v_.01 + v_3 - 1 >= 0 /\ -v_.01 + v_3 + 1 >= 0 /\ v_.01 - 1 >= 0 ]
		(1, 1)            eval_spell_out_bb1_in(v_.01, v_3, v_n) -> Com_1(eval_spell_out_stop(v_.01, v_3, v_n)) [ -v_.01 + v_n >= 0 /\ v_.01 <= 0 ]
		(5*v_n + 2, 1)    eval_spell_out_bb1_in(v_.01, v_3, v_n) -> Com_1(eval_spell_out_8(v_.01, v_.01 - 1, v_n)) [ -v_.01 + v_n >= 0 /\ v_.01 > 0 ]
		(1, 1)            eval_spell_out_1(v_.01, v_3, v_n) -> Com_1(eval_spell_out_bb1_in(v_n, v_3, v_n))
		(1, 1)            eval_spell_out_0(v_.01, v_3, v_n) -> Com_2(eval_fprintf_start(v_.01, v_3, v_n), eval_spell_out_1(v_.01, v_3, v_n))
		(1, 1)            eval_spell_out_bb0_in(v_.01, v_3, v_n) -> Com_1(eval_spell_out_0(v_.01, v_3, v_n))
		(1, 1)            eval_spell_out_start(v_.01, v_3, v_n) -> Com_1(eval_spell_out_bb0_in(v_.01, v_3, v_n))
	start location:	eval_spell_out_start
	leaf cost:	0

Complexity upper bound 15*v_n + 11

Time: 0.104 sec (SMT: 0.089 sec)

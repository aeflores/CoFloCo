MAYBE

Initial complexity problem:
1:	T:
		(1, 1)    eval_trueRandEvent_start(v_'trueRandBits, v_'trueRandEvent.event1, v_'trueRandEvent.event2, v_1, v_cbits.0, v_delta.0, v_event) -> Com_1(eval_trueRandEvent_bb0_in(v_'trueRandBits, v_'trueRandEvent.event1, v_'trueRandEvent.event2, v_1, v_cbits.0, v_delta.0, v_event))
		(?, 1)    eval_trueRandEvent_bb0_in(v_'trueRandBits, v_'trueRandEvent.event1, v_'trueRandEvent.event2, v_1, v_cbits.0, v_delta.0, v_event) -> Com_1(eval_trueRandEvent_1(v_'trueRandBits, v_'trueRandEvent.event1, v_'trueRandEvent.event2, v_1, v_cbits.0, v_delta.0, v_event))
		(?, 1)    eval_trueRandEvent_1(v_'trueRandBits, v_'trueRandEvent.event1, v_'trueRandEvent.event2, v_1, v_cbits.0, v_delta.0, v_event) -> Com_2(eval_noise_start(v_'trueRandBits, v_'trueRandEvent.event1, v_'trueRandEvent.event2, v_1, v_cbits.0, v_delta.0, v_event), eval_trueRandEvent_2(v_'trueRandBits, v_'trueRandEvent.event1, v_'trueRandEvent.event2, nondef.0, v_cbits.0, v_delta.0, v_event))
		(?, 1)    eval_trueRandEvent_2(v_'trueRandBits, v_'trueRandEvent.event1, v_'trueRandEvent.event2, v_1, v_cbits.0, v_delta.0, v_event) -> Com_2(eval_randPoolAddBytes_start(v_'trueRandBits, v_'trueRandEvent.event1, v_'trueRandEvent.event2, v_1, v_cbits.0, v_delta.0, v_event), eval_trueRandEvent_3(v_'trueRandBits, v_'trueRandEvent.event1, v_'trueRandEvent.event2, v_1, v_cbits.0, v_delta.0, v_event))
		(?, 1)    eval_trueRandEvent_3(v_'trueRandBits, v_'trueRandEvent.event1, v_'trueRandEvent.event2, v_1, v_cbits.0, v_delta.0, v_event) -> Com_1(eval_trueRandEvent_bb6_in(v_'trueRandBits, v_'trueRandEvent.event1, v_'trueRandEvent.event2, v_1, v_cbits.0, v_delta.0, v_event))
		(?, 1)    eval_trueRandEvent_3(v_'trueRandBits, v_'trueRandEvent.event1, v_'trueRandEvent.event2, v_1, v_cbits.0, v_delta.0, v_event) -> Com_1(eval_trueRandEvent_bb2_in(v_'trueRandBits, v_'trueRandEvent.event1, v_'trueRandEvent.event2, v_1, v_cbits.0, v_delta.0, v_event))
		(?, 1)    eval_trueRandEvent_bb2_in(v_'trueRandBits, v_'trueRandEvent.event1, v_'trueRandEvent.event2, v_1, v_cbits.0, v_delta.0, v_event) -> Com_1(eval_trueRandEvent_bb3_in(v_'trueRandBits, v_'trueRandEvent.event1, v_'trueRandEvent.event2, v_1, 0, v_1, v_event))
		(?, 1)    eval_trueRandEvent_bb3_in(v_'trueRandBits, v_'trueRandEvent.event1, v_'trueRandEvent.event2, v_1, v_cbits.0, v_delta.0, v_event) -> Com_1(eval_trueRandEvent_bb3_in(v_'trueRandBits, v_'trueRandEvent.event1, v_'trueRandEvent.event2, v_1, v_cbits.0 + 1, nondef.4, v_event)) [ v_delta.0 < 0 ]
		(?, 1)    eval_trueRandEvent_bb3_in(v_'trueRandBits, v_'trueRandEvent.event1, v_'trueRandEvent.event2, v_1, v_cbits.0, v_delta.0, v_event) -> Com_1(eval_trueRandEvent_bb3_in(v_'trueRandBits, v_'trueRandEvent.event1, v_'trueRandEvent.event2, v_1, v_cbits.0 + 1, nondef.4, v_event)) [ v_delta.0 > 0 ]
		(?, 1)    eval_trueRandEvent_bb3_in(v_'trueRandBits, v_'trueRandEvent.event1, v_'trueRandEvent.event2, v_1, v_cbits.0, v_delta.0, v_event) -> Com_1(eval_trueRandEvent_bb6_in(v_'trueRandBits, v_'trueRandEvent.event1, v_'trueRandEvent.event2, v_1, v_cbits.0, v_delta.0, v_event)) [ v_delta.0 = 0 ]
		(?, 1)    eval_trueRandEvent_bb6_in(v_'trueRandBits, v_'trueRandEvent.event1, v_'trueRandEvent.event2, v_1, v_cbits.0, v_delta.0, v_event) -> Com_1(eval_trueRandEvent_stop(v_'trueRandBits, v_'trueRandEvent.event1, v_'trueRandEvent.event2, v_1, v_cbits.0, v_delta.0, v_event))
	start location:	eval_trueRandEvent_start
	leaf cost:	0

Slicing away variables that do not contribute to conditions from problem 1 leaves variables [v_1, v_delta.0].
We thus obtain the following problem:
2:	T:
		(?, 1)    eval_trueRandEvent_bb6_in(v_1, v_delta.0) -> Com_1(eval_trueRandEvent_stop(v_1, v_delta.0))
		(?, 1)    eval_trueRandEvent_bb3_in(v_1, v_delta.0) -> Com_1(eval_trueRandEvent_bb6_in(v_1, v_delta.0)) [ v_delta.0 = 0 ]
		(?, 1)    eval_trueRandEvent_bb3_in(v_1, v_delta.0) -> Com_1(eval_trueRandEvent_bb3_in(v_1, nondef.4)) [ v_delta.0 > 0 ]
		(?, 1)    eval_trueRandEvent_bb3_in(v_1, v_delta.0) -> Com_1(eval_trueRandEvent_bb3_in(v_1, nondef.4)) [ v_delta.0 < 0 ]
		(?, 1)    eval_trueRandEvent_bb2_in(v_1, v_delta.0) -> Com_1(eval_trueRandEvent_bb3_in(v_1, v_1))
		(?, 1)    eval_trueRandEvent_3(v_1, v_delta.0) -> Com_1(eval_trueRandEvent_bb2_in(v_1, v_delta.0))
		(?, 1)    eval_trueRandEvent_3(v_1, v_delta.0) -> Com_1(eval_trueRandEvent_bb6_in(v_1, v_delta.0))
		(?, 1)    eval_trueRandEvent_2(v_1, v_delta.0) -> Com_2(eval_randPoolAddBytes_start(v_1, v_delta.0), eval_trueRandEvent_3(v_1, v_delta.0))
		(?, 1)    eval_trueRandEvent_1(v_1, v_delta.0) -> Com_2(eval_noise_start(v_1, v_delta.0), eval_trueRandEvent_2(nondef.0, v_delta.0))
		(?, 1)    eval_trueRandEvent_bb0_in(v_1, v_delta.0) -> Com_1(eval_trueRandEvent_1(v_1, v_delta.0))
		(1, 1)    eval_trueRandEvent_start(v_1, v_delta.0) -> Com_1(eval_trueRandEvent_bb0_in(v_1, v_delta.0))
	start location:	eval_trueRandEvent_start
	leaf cost:	0

Repeatedly propagating knowledge in problem 2 produces the following problem:
3:	T:
		(?, 1)    eval_trueRandEvent_bb6_in(v_1, v_delta.0) -> Com_1(eval_trueRandEvent_stop(v_1, v_delta.0))
		(?, 1)    eval_trueRandEvent_bb3_in(v_1, v_delta.0) -> Com_1(eval_trueRandEvent_bb6_in(v_1, v_delta.0)) [ v_delta.0 = 0 ]
		(?, 1)    eval_trueRandEvent_bb3_in(v_1, v_delta.0) -> Com_1(eval_trueRandEvent_bb3_in(v_1, nondef.4)) [ v_delta.0 > 0 ]
		(?, 1)    eval_trueRandEvent_bb3_in(v_1, v_delta.0) -> Com_1(eval_trueRandEvent_bb3_in(v_1, nondef.4)) [ v_delta.0 < 0 ]
		(1, 1)    eval_trueRandEvent_bb2_in(v_1, v_delta.0) -> Com_1(eval_trueRandEvent_bb3_in(v_1, v_1))
		(1, 1)    eval_trueRandEvent_3(v_1, v_delta.0) -> Com_1(eval_trueRandEvent_bb2_in(v_1, v_delta.0))
		(1, 1)    eval_trueRandEvent_3(v_1, v_delta.0) -> Com_1(eval_trueRandEvent_bb6_in(v_1, v_delta.0))
		(1, 1)    eval_trueRandEvent_2(v_1, v_delta.0) -> Com_2(eval_randPoolAddBytes_start(v_1, v_delta.0), eval_trueRandEvent_3(v_1, v_delta.0))
		(1, 1)    eval_trueRandEvent_1(v_1, v_delta.0) -> Com_2(eval_noise_start(v_1, v_delta.0), eval_trueRandEvent_2(nondef.0, v_delta.0))
		(1, 1)    eval_trueRandEvent_bb0_in(v_1, v_delta.0) -> Com_1(eval_trueRandEvent_1(v_1, v_delta.0))
		(1, 1)    eval_trueRandEvent_start(v_1, v_delta.0) -> Com_1(eval_trueRandEvent_bb0_in(v_1, v_delta.0))
	start location:	eval_trueRandEvent_start
	leaf cost:	0

A polynomial rank function with
	Pol(eval_trueRandEvent_bb6_in) = 1
	Pol(eval_trueRandEvent_stop) = 0
	Pol(eval_trueRandEvent_bb3_in) = 2
	Pol(eval_trueRandEvent_bb2_in) = 2
	Pol(eval_trueRandEvent_3) = 2
	Pol(eval_trueRandEvent_2) = 2
	Pol(eval_randPoolAddBytes_start) = 0
	Pol(eval_trueRandEvent_1) = 2
	Pol(eval_noise_start) = 0
	Pol(eval_trueRandEvent_bb0_in) = 2
	Pol(eval_trueRandEvent_start) = 2
orients all transitions weakly and the transitions
	eval_trueRandEvent_bb6_in(v_1, v_delta.0) -> Com_1(eval_trueRandEvent_stop(v_1, v_delta.0))
	eval_trueRandEvent_bb3_in(v_1, v_delta.0) -> Com_1(eval_trueRandEvent_bb6_in(v_1, v_delta.0)) [ v_delta.0 = 0 ]
strictly and produces the following problem:
4:	T:
		(2, 1)    eval_trueRandEvent_bb6_in(v_1, v_delta.0) -> Com_1(eval_trueRandEvent_stop(v_1, v_delta.0))
		(2, 1)    eval_trueRandEvent_bb3_in(v_1, v_delta.0) -> Com_1(eval_trueRandEvent_bb6_in(v_1, v_delta.0)) [ v_delta.0 = 0 ]
		(?, 1)    eval_trueRandEvent_bb3_in(v_1, v_delta.0) -> Com_1(eval_trueRandEvent_bb3_in(v_1, nondef.4)) [ v_delta.0 > 0 ]
		(?, 1)    eval_trueRandEvent_bb3_in(v_1, v_delta.0) -> Com_1(eval_trueRandEvent_bb3_in(v_1, nondef.4)) [ v_delta.0 < 0 ]
		(1, 1)    eval_trueRandEvent_bb2_in(v_1, v_delta.0) -> Com_1(eval_trueRandEvent_bb3_in(v_1, v_1))
		(1, 1)    eval_trueRandEvent_3(v_1, v_delta.0) -> Com_1(eval_trueRandEvent_bb2_in(v_1, v_delta.0))
		(1, 1)    eval_trueRandEvent_3(v_1, v_delta.0) -> Com_1(eval_trueRandEvent_bb6_in(v_1, v_delta.0))
		(1, 1)    eval_trueRandEvent_2(v_1, v_delta.0) -> Com_2(eval_randPoolAddBytes_start(v_1, v_delta.0), eval_trueRandEvent_3(v_1, v_delta.0))
		(1, 1)    eval_trueRandEvent_1(v_1, v_delta.0) -> Com_2(eval_noise_start(v_1, v_delta.0), eval_trueRandEvent_2(nondef.0, v_delta.0))
		(1, 1)    eval_trueRandEvent_bb0_in(v_1, v_delta.0) -> Com_1(eval_trueRandEvent_1(v_1, v_delta.0))
		(1, 1)    eval_trueRandEvent_start(v_1, v_delta.0) -> Com_1(eval_trueRandEvent_bb0_in(v_1, v_delta.0))
	start location:	eval_trueRandEvent_start
	leaf cost:	0

By chaining the transition eval_trueRandEvent_bb3_in(v_1, v_delta.0) -> Com_1(eval_trueRandEvent_bb6_in(v_1, v_delta.0)) [ v_delta.0 = 0 ] with all transitions in problem 4, the following new transition is obtained:
	eval_trueRandEvent_bb3_in(v_1, v_delta.0) -> Com_1(eval_trueRandEvent_stop(v_1, v_delta.0)) [ v_delta.0 = 0 ]
We thus obtain the following problem:
5:	T:
		(2, 2)    eval_trueRandEvent_bb3_in(v_1, v_delta.0) -> Com_1(eval_trueRandEvent_stop(v_1, v_delta.0)) [ v_delta.0 = 0 ]
		(2, 1)    eval_trueRandEvent_bb6_in(v_1, v_delta.0) -> Com_1(eval_trueRandEvent_stop(v_1, v_delta.0))
		(?, 1)    eval_trueRandEvent_bb3_in(v_1, v_delta.0) -> Com_1(eval_trueRandEvent_bb3_in(v_1, nondef.4)) [ v_delta.0 > 0 ]
		(?, 1)    eval_trueRandEvent_bb3_in(v_1, v_delta.0) -> Com_1(eval_trueRandEvent_bb3_in(v_1, nondef.4)) [ v_delta.0 < 0 ]
		(1, 1)    eval_trueRandEvent_bb2_in(v_1, v_delta.0) -> Com_1(eval_trueRandEvent_bb3_in(v_1, v_1))
		(1, 1)    eval_trueRandEvent_3(v_1, v_delta.0) -> Com_1(eval_trueRandEvent_bb2_in(v_1, v_delta.0))
		(1, 1)    eval_trueRandEvent_3(v_1, v_delta.0) -> Com_1(eval_trueRandEvent_bb6_in(v_1, v_delta.0))
		(1, 1)    eval_trueRandEvent_2(v_1, v_delta.0) -> Com_2(eval_randPoolAddBytes_start(v_1, v_delta.0), eval_trueRandEvent_3(v_1, v_delta.0))
		(1, 1)    eval_trueRandEvent_1(v_1, v_delta.0) -> Com_2(eval_noise_start(v_1, v_delta.0), eval_trueRandEvent_2(nondef.0, v_delta.0))
		(1, 1)    eval_trueRandEvent_bb0_in(v_1, v_delta.0) -> Com_1(eval_trueRandEvent_1(v_1, v_delta.0))
		(1, 1)    eval_trueRandEvent_start(v_1, v_delta.0) -> Com_1(eval_trueRandEvent_bb0_in(v_1, v_delta.0))
	start location:	eval_trueRandEvent_start
	leaf cost:	0

By chaining the transition eval_trueRandEvent_3(v_1, v_delta.0) -> Com_1(eval_trueRandEvent_bb2_in(v_1, v_delta.0)) with all transitions in problem 5, the following new transition is obtained:
	eval_trueRandEvent_3(v_1, v_delta.0) -> Com_1(eval_trueRandEvent_bb3_in(v_1, v_1))
We thus obtain the following problem:
6:	T:
		(1, 2)    eval_trueRandEvent_3(v_1, v_delta.0) -> Com_1(eval_trueRandEvent_bb3_in(v_1, v_1))
		(2, 2)    eval_trueRandEvent_bb3_in(v_1, v_delta.0) -> Com_1(eval_trueRandEvent_stop(v_1, v_delta.0)) [ v_delta.0 = 0 ]
		(2, 1)    eval_trueRandEvent_bb6_in(v_1, v_delta.0) -> Com_1(eval_trueRandEvent_stop(v_1, v_delta.0))
		(?, 1)    eval_trueRandEvent_bb3_in(v_1, v_delta.0) -> Com_1(eval_trueRandEvent_bb3_in(v_1, nondef.4)) [ v_delta.0 > 0 ]
		(?, 1)    eval_trueRandEvent_bb3_in(v_1, v_delta.0) -> Com_1(eval_trueRandEvent_bb3_in(v_1, nondef.4)) [ v_delta.0 < 0 ]
		(1, 1)    eval_trueRandEvent_bb2_in(v_1, v_delta.0) -> Com_1(eval_trueRandEvent_bb3_in(v_1, v_1))
		(1, 1)    eval_trueRandEvent_3(v_1, v_delta.0) -> Com_1(eval_trueRandEvent_bb6_in(v_1, v_delta.0))
		(1, 1)    eval_trueRandEvent_2(v_1, v_delta.0) -> Com_2(eval_randPoolAddBytes_start(v_1, v_delta.0), eval_trueRandEvent_3(v_1, v_delta.0))
		(1, 1)    eval_trueRandEvent_1(v_1, v_delta.0) -> Com_2(eval_noise_start(v_1, v_delta.0), eval_trueRandEvent_2(nondef.0, v_delta.0))
		(1, 1)    eval_trueRandEvent_bb0_in(v_1, v_delta.0) -> Com_1(eval_trueRandEvent_1(v_1, v_delta.0))
		(1, 1)    eval_trueRandEvent_start(v_1, v_delta.0) -> Com_1(eval_trueRandEvent_bb0_in(v_1, v_delta.0))
	start location:	eval_trueRandEvent_start
	leaf cost:	0

Testing for reachability in the complexity graph removes the following transition from problem 6:
	eval_trueRandEvent_bb2_in(v_1, v_delta.0) -> Com_1(eval_trueRandEvent_bb3_in(v_1, v_1))
We thus obtain the following problem:
7:	T:
		(2, 2)    eval_trueRandEvent_bb3_in(v_1, v_delta.0) -> Com_1(eval_trueRandEvent_stop(v_1, v_delta.0)) [ v_delta.0 = 0 ]
		(?, 1)    eval_trueRandEvent_bb3_in(v_1, v_delta.0) -> Com_1(eval_trueRandEvent_bb3_in(v_1, nondef.4)) [ v_delta.0 < 0 ]
		(?, 1)    eval_trueRandEvent_bb3_in(v_1, v_delta.0) -> Com_1(eval_trueRandEvent_bb3_in(v_1, nondef.4)) [ v_delta.0 > 0 ]
		(2, 1)    eval_trueRandEvent_bb6_in(v_1, v_delta.0) -> Com_1(eval_trueRandEvent_stop(v_1, v_delta.0))
		(1, 2)    eval_trueRandEvent_3(v_1, v_delta.0) -> Com_1(eval_trueRandEvent_bb3_in(v_1, v_1))
		(1, 1)    eval_trueRandEvent_3(v_1, v_delta.0) -> Com_1(eval_trueRandEvent_bb6_in(v_1, v_delta.0))
		(1, 1)    eval_trueRandEvent_2(v_1, v_delta.0) -> Com_2(eval_randPoolAddBytes_start(v_1, v_delta.0), eval_trueRandEvent_3(v_1, v_delta.0))
		(1, 1)    eval_trueRandEvent_1(v_1, v_delta.0) -> Com_2(eval_noise_start(v_1, v_delta.0), eval_trueRandEvent_2(nondef.0, v_delta.0))
		(1, 1)    eval_trueRandEvent_bb0_in(v_1, v_delta.0) -> Com_1(eval_trueRandEvent_1(v_1, v_delta.0))
		(1, 1)    eval_trueRandEvent_start(v_1, v_delta.0) -> Com_1(eval_trueRandEvent_bb0_in(v_1, v_delta.0))
	start location:	eval_trueRandEvent_start
	leaf cost:	0

By chaining the transition eval_trueRandEvent_3(v_1, v_delta.0) -> Com_1(eval_trueRandEvent_bb6_in(v_1, v_delta.0)) with all transitions in problem 7, the following new transition is obtained:
	eval_trueRandEvent_3(v_1, v_delta.0) -> Com_1(eval_trueRandEvent_stop(v_1, v_delta.0))
We thus obtain the following problem:
8:	T:
		(1, 2)    eval_trueRandEvent_3(v_1, v_delta.0) -> Com_1(eval_trueRandEvent_stop(v_1, v_delta.0))
		(2, 2)    eval_trueRandEvent_bb3_in(v_1, v_delta.0) -> Com_1(eval_trueRandEvent_stop(v_1, v_delta.0)) [ v_delta.0 = 0 ]
		(?, 1)    eval_trueRandEvent_bb3_in(v_1, v_delta.0) -> Com_1(eval_trueRandEvent_bb3_in(v_1, nondef.4)) [ v_delta.0 < 0 ]
		(?, 1)    eval_trueRandEvent_bb3_in(v_1, v_delta.0) -> Com_1(eval_trueRandEvent_bb3_in(v_1, nondef.4)) [ v_delta.0 > 0 ]
		(2, 1)    eval_trueRandEvent_bb6_in(v_1, v_delta.0) -> Com_1(eval_trueRandEvent_stop(v_1, v_delta.0))
		(1, 2)    eval_trueRandEvent_3(v_1, v_delta.0) -> Com_1(eval_trueRandEvent_bb3_in(v_1, v_1))
		(1, 1)    eval_trueRandEvent_2(v_1, v_delta.0) -> Com_2(eval_randPoolAddBytes_start(v_1, v_delta.0), eval_trueRandEvent_3(v_1, v_delta.0))
		(1, 1)    eval_trueRandEvent_1(v_1, v_delta.0) -> Com_2(eval_noise_start(v_1, v_delta.0), eval_trueRandEvent_2(nondef.0, v_delta.0))
		(1, 1)    eval_trueRandEvent_bb0_in(v_1, v_delta.0) -> Com_1(eval_trueRandEvent_1(v_1, v_delta.0))
		(1, 1)    eval_trueRandEvent_start(v_1, v_delta.0) -> Com_1(eval_trueRandEvent_bb0_in(v_1, v_delta.0))
	start location:	eval_trueRandEvent_start
	leaf cost:	0

Testing for reachability in the complexity graph removes the following transition from problem 8:
	eval_trueRandEvent_bb6_in(v_1, v_delta.0) -> Com_1(eval_trueRandEvent_stop(v_1, v_delta.0))
We thus obtain the following problem:
9:	T:
		(2, 2)    eval_trueRandEvent_bb3_in(v_1, v_delta.0) -> Com_1(eval_trueRandEvent_stop(v_1, v_delta.0)) [ v_delta.0 = 0 ]
		(?, 1)    eval_trueRandEvent_bb3_in(v_1, v_delta.0) -> Com_1(eval_trueRandEvent_bb3_in(v_1, nondef.4)) [ v_delta.0 < 0 ]
		(?, 1)    eval_trueRandEvent_bb3_in(v_1, v_delta.0) -> Com_1(eval_trueRandEvent_bb3_in(v_1, nondef.4)) [ v_delta.0 > 0 ]
		(1, 2)    eval_trueRandEvent_3(v_1, v_delta.0) -> Com_1(eval_trueRandEvent_stop(v_1, v_delta.0))
		(1, 2)    eval_trueRandEvent_3(v_1, v_delta.0) -> Com_1(eval_trueRandEvent_bb3_in(v_1, v_1))
		(1, 1)    eval_trueRandEvent_2(v_1, v_delta.0) -> Com_2(eval_randPoolAddBytes_start(v_1, v_delta.0), eval_trueRandEvent_3(v_1, v_delta.0))
		(1, 1)    eval_trueRandEvent_1(v_1, v_delta.0) -> Com_2(eval_noise_start(v_1, v_delta.0), eval_trueRandEvent_2(nondef.0, v_delta.0))
		(1, 1)    eval_trueRandEvent_bb0_in(v_1, v_delta.0) -> Com_1(eval_trueRandEvent_1(v_1, v_delta.0))
		(1, 1)    eval_trueRandEvent_start(v_1, v_delta.0) -> Com_1(eval_trueRandEvent_bb0_in(v_1, v_delta.0))
	start location:	eval_trueRandEvent_start
	leaf cost:	0

By chaining the transition eval_trueRandEvent_bb0_in(v_1, v_delta.0) -> Com_1(eval_trueRandEvent_1(v_1, v_delta.0)) with all transitions in problem 9, the following new transition is obtained:
	eval_trueRandEvent_bb0_in(v_1, v_delta.0) -> Com_2(eval_noise_start(v_1, v_delta.0), eval_trueRandEvent_2(nondef.0, v_delta.0))
We thus obtain the following problem:
10:	T:
		(1, 2)    eval_trueRandEvent_bb0_in(v_1, v_delta.0) -> Com_2(eval_noise_start(v_1, v_delta.0), eval_trueRandEvent_2(nondef.0, v_delta.0))
		(2, 2)    eval_trueRandEvent_bb3_in(v_1, v_delta.0) -> Com_1(eval_trueRandEvent_stop(v_1, v_delta.0)) [ v_delta.0 = 0 ]
		(?, 1)    eval_trueRandEvent_bb3_in(v_1, v_delta.0) -> Com_1(eval_trueRandEvent_bb3_in(v_1, nondef.4)) [ v_delta.0 < 0 ]
		(?, 1)    eval_trueRandEvent_bb3_in(v_1, v_delta.0) -> Com_1(eval_trueRandEvent_bb3_in(v_1, nondef.4)) [ v_delta.0 > 0 ]
		(1, 2)    eval_trueRandEvent_3(v_1, v_delta.0) -> Com_1(eval_trueRandEvent_stop(v_1, v_delta.0))
		(1, 2)    eval_trueRandEvent_3(v_1, v_delta.0) -> Com_1(eval_trueRandEvent_bb3_in(v_1, v_1))
		(1, 1)    eval_trueRandEvent_2(v_1, v_delta.0) -> Com_2(eval_randPoolAddBytes_start(v_1, v_delta.0), eval_trueRandEvent_3(v_1, v_delta.0))
		(1, 1)    eval_trueRandEvent_1(v_1, v_delta.0) -> Com_2(eval_noise_start(v_1, v_delta.0), eval_trueRandEvent_2(nondef.0, v_delta.0))
		(1, 1)    eval_trueRandEvent_start(v_1, v_delta.0) -> Com_1(eval_trueRandEvent_bb0_in(v_1, v_delta.0))
	start location:	eval_trueRandEvent_start
	leaf cost:	0

Testing for reachability in the complexity graph removes the following transition from problem 10:
	eval_trueRandEvent_1(v_1, v_delta.0) -> Com_2(eval_noise_start(v_1, v_delta.0), eval_trueRandEvent_2(nondef.0, v_delta.0))
We thus obtain the following problem:
11:	T:
		(2, 2)    eval_trueRandEvent_bb3_in(v_1, v_delta.0) -> Com_1(eval_trueRandEvent_stop(v_1, v_delta.0)) [ v_delta.0 = 0 ]
		(?, 1)    eval_trueRandEvent_bb3_in(v_1, v_delta.0) -> Com_1(eval_trueRandEvent_bb3_in(v_1, nondef.4)) [ v_delta.0 < 0 ]
		(?, 1)    eval_trueRandEvent_bb3_in(v_1, v_delta.0) -> Com_1(eval_trueRandEvent_bb3_in(v_1, nondef.4)) [ v_delta.0 > 0 ]
		(1, 2)    eval_trueRandEvent_3(v_1, v_delta.0) -> Com_1(eval_trueRandEvent_stop(v_1, v_delta.0))
		(1, 2)    eval_trueRandEvent_3(v_1, v_delta.0) -> Com_1(eval_trueRandEvent_bb3_in(v_1, v_1))
		(1, 1)    eval_trueRandEvent_2(v_1, v_delta.0) -> Com_2(eval_randPoolAddBytes_start(v_1, v_delta.0), eval_trueRandEvent_3(v_1, v_delta.0))
		(1, 2)    eval_trueRandEvent_bb0_in(v_1, v_delta.0) -> Com_2(eval_noise_start(v_1, v_delta.0), eval_trueRandEvent_2(nondef.0, v_delta.0))
		(1, 1)    eval_trueRandEvent_start(v_1, v_delta.0) -> Com_1(eval_trueRandEvent_bb0_in(v_1, v_delta.0))
	start location:	eval_trueRandEvent_start
	leaf cost:	0

By chaining the transition eval_trueRandEvent_start(v_1, v_delta.0) -> Com_1(eval_trueRandEvent_bb0_in(v_1, v_delta.0)) with all transitions in problem 11, the following new transition is obtained:
	eval_trueRandEvent_start(v_1, v_delta.0) -> Com_2(eval_noise_start(v_1, v_delta.0), eval_trueRandEvent_2(nondef.0, v_delta.0))
We thus obtain the following problem:
12:	T:
		(1, 3)    eval_trueRandEvent_start(v_1, v_delta.0) -> Com_2(eval_noise_start(v_1, v_delta.0), eval_trueRandEvent_2(nondef.0, v_delta.0))
		(2, 2)    eval_trueRandEvent_bb3_in(v_1, v_delta.0) -> Com_1(eval_trueRandEvent_stop(v_1, v_delta.0)) [ v_delta.0 = 0 ]
		(?, 1)    eval_trueRandEvent_bb3_in(v_1, v_delta.0) -> Com_1(eval_trueRandEvent_bb3_in(v_1, nondef.4)) [ v_delta.0 < 0 ]
		(?, 1)    eval_trueRandEvent_bb3_in(v_1, v_delta.0) -> Com_1(eval_trueRandEvent_bb3_in(v_1, nondef.4)) [ v_delta.0 > 0 ]
		(1, 2)    eval_trueRandEvent_3(v_1, v_delta.0) -> Com_1(eval_trueRandEvent_stop(v_1, v_delta.0))
		(1, 2)    eval_trueRandEvent_3(v_1, v_delta.0) -> Com_1(eval_trueRandEvent_bb3_in(v_1, v_1))
		(1, 1)    eval_trueRandEvent_2(v_1, v_delta.0) -> Com_2(eval_randPoolAddBytes_start(v_1, v_delta.0), eval_trueRandEvent_3(v_1, v_delta.0))
		(1, 2)    eval_trueRandEvent_bb0_in(v_1, v_delta.0) -> Com_2(eval_noise_start(v_1, v_delta.0), eval_trueRandEvent_2(nondef.0, v_delta.0))
	start location:	eval_trueRandEvent_start
	leaf cost:	0

Testing for reachability in the complexity graph removes the following transition from problem 12:
	eval_trueRandEvent_bb0_in(v_1, v_delta.0) -> Com_2(eval_noise_start(v_1, v_delta.0), eval_trueRandEvent_2(nondef.0, v_delta.0))
We thus obtain the following problem:
13:	T:
		(2, 2)    eval_trueRandEvent_bb3_in(v_1, v_delta.0) -> Com_1(eval_trueRandEvent_stop(v_1, v_delta.0)) [ v_delta.0 = 0 ]
		(?, 1)    eval_trueRandEvent_bb3_in(v_1, v_delta.0) -> Com_1(eval_trueRandEvent_bb3_in(v_1, nondef.4)) [ v_delta.0 < 0 ]
		(?, 1)    eval_trueRandEvent_bb3_in(v_1, v_delta.0) -> Com_1(eval_trueRandEvent_bb3_in(v_1, nondef.4)) [ v_delta.0 > 0 ]
		(1, 2)    eval_trueRandEvent_3(v_1, v_delta.0) -> Com_1(eval_trueRandEvent_stop(v_1, v_delta.0))
		(1, 2)    eval_trueRandEvent_3(v_1, v_delta.0) -> Com_1(eval_trueRandEvent_bb3_in(v_1, v_1))
		(1, 1)    eval_trueRandEvent_2(v_1, v_delta.0) -> Com_2(eval_randPoolAddBytes_start(v_1, v_delta.0), eval_trueRandEvent_3(v_1, v_delta.0))
		(1, 3)    eval_trueRandEvent_start(v_1, v_delta.0) -> Com_2(eval_noise_start(v_1, v_delta.0), eval_trueRandEvent_2(nondef.0, v_delta.0))
	start location:	eval_trueRandEvent_start
	leaf cost:	0

Complexity upper bound ?

Time: 0.396 sec (SMT: 0.323 sec)

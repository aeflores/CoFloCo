YES(?, v_count + 3)

Initial complexity problem:
1:	T:
		(1, 1)    eval_make_uint_array_start(v_count, v_i.0) -> eval_make_uint_array_bb0_in(v_count, v_i.0)
		(?, 1)    eval_make_uint_array_bb0_in(v_count, v_i.0) -> eval_make_uint_array_bb1_in(v_count, 0)
		(?, 1)    eval_make_uint_array_bb1_in(v_count, v_i.0) -> eval_make_uint_array_bb1_in(v_count, v_i.0 + 1) [ v_i.0 < v_count ]
		(?, 1)    eval_make_uint_array_bb1_in(v_count, v_i.0) -> eval_make_uint_array_stop(v_count, v_i.0) [ v_i.0 >= v_count ]
	start location:	eval_make_uint_array_start
	leaf cost:	0

Repeatedly removing leaves of the complexity graph in problem 1 produces the following problem:
2:	T:
		(1, 1)    eval_make_uint_array_start(v_count, v_i.0) -> eval_make_uint_array_bb0_in(v_count, v_i.0)
		(?, 1)    eval_make_uint_array_bb0_in(v_count, v_i.0) -> eval_make_uint_array_bb1_in(v_count, 0)
		(?, 1)    eval_make_uint_array_bb1_in(v_count, v_i.0) -> eval_make_uint_array_bb1_in(v_count, v_i.0 + 1) [ v_i.0 < v_count ]
	start location:	eval_make_uint_array_start
	leaf cost:	1

Repeatedly propagating knowledge in problem 2 produces the following problem:
3:	T:
		(1, 1)    eval_make_uint_array_start(v_count, v_i.0) -> eval_make_uint_array_bb0_in(v_count, v_i.0)
		(1, 1)    eval_make_uint_array_bb0_in(v_count, v_i.0) -> eval_make_uint_array_bb1_in(v_count, 0)
		(?, 1)    eval_make_uint_array_bb1_in(v_count, v_i.0) -> eval_make_uint_array_bb1_in(v_count, v_i.0 + 1) [ v_i.0 < v_count ]
	start location:	eval_make_uint_array_start
	leaf cost:	1

A polynomial rank function with
	Pol(eval_make_uint_array_start) = V_1
	Pol(eval_make_uint_array_bb0_in) = V_1
	Pol(eval_make_uint_array_bb1_in) = V_1 - V_2
orients all transitions weakly and the transition
	eval_make_uint_array_bb1_in(v_count, v_i.0) -> eval_make_uint_array_bb1_in(v_count, v_i.0 + 1) [ v_i.0 < v_count ]
strictly and produces the following problem:
4:	T:
		(1, 1)          eval_make_uint_array_start(v_count, v_i.0) -> eval_make_uint_array_bb0_in(v_count, v_i.0)
		(1, 1)          eval_make_uint_array_bb0_in(v_count, v_i.0) -> eval_make_uint_array_bb1_in(v_count, 0)
		(v_count, 1)    eval_make_uint_array_bb1_in(v_count, v_i.0) -> eval_make_uint_array_bb1_in(v_count, v_i.0 + 1) [ v_i.0 < v_count ]
	start location:	eval_make_uint_array_start
	leaf cost:	1

Complexity upper bound v_count + 3

Time: 0.021 sec (SMT: 0.020 sec)

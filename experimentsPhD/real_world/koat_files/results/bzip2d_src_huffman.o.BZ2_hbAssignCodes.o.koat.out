YES(?, 16*v_maxLen + 16*v_minLen + 8*v_alphaSize*v_maxLen + 8*v_alphaSize*v_minLen + 8*v_alphaSize + 19)

Initial complexity problem:
1:	T:
		(1, 1)    eval_BZ2_hbAssignCodes_start(v_alphaSize, v_i.0, v_maxLen, v_minLen, v_n.0) -> eval_BZ2_hbAssignCodes_bb0_in(v_alphaSize, v_i.0, v_maxLen, v_minLen, v_n.0)
		(?, 1)    eval_BZ2_hbAssignCodes_bb0_in(v_alphaSize, v_i.0, v_maxLen, v_minLen, v_n.0) -> eval_BZ2_hbAssignCodes_bb1_in(v_alphaSize, v_i.0, v_maxLen, v_minLen, v_minLen)
		(?, 1)    eval_BZ2_hbAssignCodes_bb1_in(v_alphaSize, v_i.0, v_maxLen, v_minLen, v_n.0) -> eval_BZ2_hbAssignCodes_bb2_in(v_alphaSize, 0, v_maxLen, v_minLen, v_n.0) [ v_n.0 <= v_maxLen ]
		(?, 1)    eval_BZ2_hbAssignCodes_bb1_in(v_alphaSize, v_i.0, v_maxLen, v_minLen, v_n.0) -> eval_BZ2_hbAssignCodes_stop(v_alphaSize, v_i.0, v_maxLen, v_minLen, v_n.0) [ v_n.0 > v_maxLen ]
		(?, 1)    eval_BZ2_hbAssignCodes_bb2_in(v_alphaSize, v_i.0, v_maxLen, v_minLen, v_n.0) -> eval_BZ2_hbAssignCodes_bb5_in(v_alphaSize, v_i.0, v_maxLen, v_minLen, v_n.0) [ v_i.0 < v_alphaSize ]
		(?, 1)    eval_BZ2_hbAssignCodes_bb2_in(v_alphaSize, v_i.0, v_maxLen, v_minLen, v_n.0) -> eval_BZ2_hbAssignCodes_bb1_in(v_alphaSize, v_i.0, v_maxLen, v_minLen, v_n.0 + 1) [ v_i.0 >= v_alphaSize ]
		(?, 1)    eval_BZ2_hbAssignCodes_bb5_in(v_alphaSize, v_i.0, v_maxLen, v_minLen, v_n.0) -> eval_BZ2_hbAssignCodes_bb2_in(v_alphaSize, v_i.0 + 1, v_maxLen, v_minLen, v_n.0)
	start location:	eval_BZ2_hbAssignCodes_start
	leaf cost:	0

Repeatedly removing leaves of the complexity graph in problem 1 produces the following problem:
2:	T:
		(1, 1)    eval_BZ2_hbAssignCodes_start(v_alphaSize, v_i.0, v_maxLen, v_minLen, v_n.0) -> eval_BZ2_hbAssignCodes_bb0_in(v_alphaSize, v_i.0, v_maxLen, v_minLen, v_n.0)
		(?, 1)    eval_BZ2_hbAssignCodes_bb0_in(v_alphaSize, v_i.0, v_maxLen, v_minLen, v_n.0) -> eval_BZ2_hbAssignCodes_bb1_in(v_alphaSize, v_i.0, v_maxLen, v_minLen, v_minLen)
		(?, 1)    eval_BZ2_hbAssignCodes_bb1_in(v_alphaSize, v_i.0, v_maxLen, v_minLen, v_n.0) -> eval_BZ2_hbAssignCodes_bb2_in(v_alphaSize, 0, v_maxLen, v_minLen, v_n.0) [ v_n.0 <= v_maxLen ]
		(?, 1)    eval_BZ2_hbAssignCodes_bb2_in(v_alphaSize, v_i.0, v_maxLen, v_minLen, v_n.0) -> eval_BZ2_hbAssignCodes_bb5_in(v_alphaSize, v_i.0, v_maxLen, v_minLen, v_n.0) [ v_i.0 < v_alphaSize ]
		(?, 1)    eval_BZ2_hbAssignCodes_bb2_in(v_alphaSize, v_i.0, v_maxLen, v_minLen, v_n.0) -> eval_BZ2_hbAssignCodes_bb1_in(v_alphaSize, v_i.0, v_maxLen, v_minLen, v_n.0 + 1) [ v_i.0 >= v_alphaSize ]
		(?, 1)    eval_BZ2_hbAssignCodes_bb5_in(v_alphaSize, v_i.0, v_maxLen, v_minLen, v_n.0) -> eval_BZ2_hbAssignCodes_bb2_in(v_alphaSize, v_i.0 + 1, v_maxLen, v_minLen, v_n.0)
	start location:	eval_BZ2_hbAssignCodes_start
	leaf cost:	1

Repeatedly propagating knowledge in problem 2 produces the following problem:
3:	T:
		(1, 1)    eval_BZ2_hbAssignCodes_start(v_alphaSize, v_i.0, v_maxLen, v_minLen, v_n.0) -> eval_BZ2_hbAssignCodes_bb0_in(v_alphaSize, v_i.0, v_maxLen, v_minLen, v_n.0)
		(1, 1)    eval_BZ2_hbAssignCodes_bb0_in(v_alphaSize, v_i.0, v_maxLen, v_minLen, v_n.0) -> eval_BZ2_hbAssignCodes_bb1_in(v_alphaSize, v_i.0, v_maxLen, v_minLen, v_minLen)
		(?, 1)    eval_BZ2_hbAssignCodes_bb1_in(v_alphaSize, v_i.0, v_maxLen, v_minLen, v_n.0) -> eval_BZ2_hbAssignCodes_bb2_in(v_alphaSize, 0, v_maxLen, v_minLen, v_n.0) [ v_n.0 <= v_maxLen ]
		(?, 1)    eval_BZ2_hbAssignCodes_bb2_in(v_alphaSize, v_i.0, v_maxLen, v_minLen, v_n.0) -> eval_BZ2_hbAssignCodes_bb5_in(v_alphaSize, v_i.0, v_maxLen, v_minLen, v_n.0) [ v_i.0 < v_alphaSize ]
		(?, 1)    eval_BZ2_hbAssignCodes_bb2_in(v_alphaSize, v_i.0, v_maxLen, v_minLen, v_n.0) -> eval_BZ2_hbAssignCodes_bb1_in(v_alphaSize, v_i.0, v_maxLen, v_minLen, v_n.0 + 1) [ v_i.0 >= v_alphaSize ]
		(?, 1)    eval_BZ2_hbAssignCodes_bb5_in(v_alphaSize, v_i.0, v_maxLen, v_minLen, v_n.0) -> eval_BZ2_hbAssignCodes_bb2_in(v_alphaSize, v_i.0 + 1, v_maxLen, v_minLen, v_n.0)
	start location:	eval_BZ2_hbAssignCodes_start
	leaf cost:	1

Separating problem 3 produces the isolated subproblem
10001:	T:
		(1, 0)    inner_10000_start_sep(v_alphaSize, v_i.0, v_maxLen, v_minLen, v_n.0) -> eval_BZ2_hbAssignCodes_bb2_in(v_alphaSize, 0, v_maxLen, v_minLen, v_n.0)
		(?, 1)    eval_BZ2_hbAssignCodes_bb5_in(v_alphaSize, v_i.0, v_maxLen, v_minLen, v_n.0) -> eval_BZ2_hbAssignCodes_bb2_in(v_alphaSize, v_i.0 + 1, v_maxLen, v_minLen, v_n.0)
		(?, 1)    eval_BZ2_hbAssignCodes_bb2_in(v_alphaSize, v_i.0, v_maxLen, v_minLen, v_n.0) -> eval_BZ2_hbAssignCodes_bb5_in(v_alphaSize, v_i.0, v_maxLen, v_minLen, v_n.0) [ v_i.0 < v_alphaSize ]
	start location:	inner_10000_start_sep
	leaf cost:	0

=== begin of proof for isolated subproblem 10001 ===
	Initial complexity problem:
	10001:	T:
			(1, 0)    inner_10000_start_sep(v_alphaSize, v_i.0, v_maxLen, v_minLen, v_n.0) -> eval_BZ2_hbAssignCodes_bb2_in(v_alphaSize, 0, v_maxLen, v_minLen, v_n.0)
			(?, 1)    eval_BZ2_hbAssignCodes_bb5_in(v_alphaSize, v_i.0, v_maxLen, v_minLen, v_n.0) -> eval_BZ2_hbAssignCodes_bb2_in(v_alphaSize, v_i.0 + 1, v_maxLen, v_minLen, v_n.0)
			(?, 1)    eval_BZ2_hbAssignCodes_bb2_in(v_alphaSize, v_i.0, v_maxLen, v_minLen, v_n.0) -> eval_BZ2_hbAssignCodes_bb5_in(v_alphaSize, v_i.0, v_maxLen, v_minLen, v_n.0) [ v_i.0 < v_alphaSize ]
		start location:	inner_10000_start_sep
		leaf cost:	0
	
	A polynomial rank function with
		Pol(inner_10000_start_sep) = V_1 + 1
		Pol(eval_BZ2_hbAssignCodes_bb2_in) = V_1 - V_2 + 1
		Pol(eval_BZ2_hbAssignCodes_bb5_in) = V_1 - V_2
	orients all transitions weakly and the transition
		eval_BZ2_hbAssignCodes_bb2_in(v_alphaSize, v_i.0, v_maxLen, v_minLen, v_n.0) -> eval_BZ2_hbAssignCodes_bb5_in(v_alphaSize, v_i.0, v_maxLen, v_minLen, v_n.0) [ v_i.0 < v_alphaSize ]
	strictly and produces the following problem:
	10002:	T:
			(1, 0)                  inner_10000_start_sep(v_alphaSize, v_i.0, v_maxLen, v_minLen, v_n.0) -> eval_BZ2_hbAssignCodes_bb2_in(v_alphaSize, 0, v_maxLen, v_minLen, v_n.0)
			(?, 1)                  eval_BZ2_hbAssignCodes_bb5_in(v_alphaSize, v_i.0, v_maxLen, v_minLen, v_n.0) -> eval_BZ2_hbAssignCodes_bb2_in(v_alphaSize, v_i.0 + 1, v_maxLen, v_minLen, v_n.0)
			(v_alphaSize + 1, 1)    eval_BZ2_hbAssignCodes_bb2_in(v_alphaSize, v_i.0, v_maxLen, v_minLen, v_n.0) -> eval_BZ2_hbAssignCodes_bb5_in(v_alphaSize, v_i.0, v_maxLen, v_minLen, v_n.0) [ v_i.0 < v_alphaSize ]
		start location:	inner_10000_start_sep
		leaf cost:	0
	
	Repeatedly propagating knowledge in problem 10002 produces the following problem:
	10003:	T:
			(1, 0)                  inner_10000_start_sep(v_alphaSize, v_i.0, v_maxLen, v_minLen, v_n.0) -> eval_BZ2_hbAssignCodes_bb2_in(v_alphaSize, 0, v_maxLen, v_minLen, v_n.0)
			(v_alphaSize + 1, 1)    eval_BZ2_hbAssignCodes_bb5_in(v_alphaSize, v_i.0, v_maxLen, v_minLen, v_n.0) -> eval_BZ2_hbAssignCodes_bb2_in(v_alphaSize, v_i.0 + 1, v_maxLen, v_minLen, v_n.0)
			(v_alphaSize + 1, 1)    eval_BZ2_hbAssignCodes_bb2_in(v_alphaSize, v_i.0, v_maxLen, v_minLen, v_n.0) -> eval_BZ2_hbAssignCodes_bb5_in(v_alphaSize, v_i.0, v_maxLen, v_minLen, v_n.0) [ v_i.0 < v_alphaSize ]
		start location:	inner_10000_start_sep
		leaf cost:	0
=== end of proof for isolated subproblem 10001 ===

Applying the information from the isolated subproblem 10001 to problem 3 produces the following problem:
4:	T:
		(?, 0)                    inner_10000_in_sep(v_alphaSize, v_i.0, v_maxLen, v_minLen, v_n.0) -> inner_10000_out_sep(v_alphaSize, v_i.0, v_maxLen, v_minLen, v_n.0)
		(?, 2*v_alphaSize + 2)    inner_10000_in_sep(v_alphaSize, v_i.0, v_maxLen, v_minLen, v_n.0) -> inner_10000_compl_sep(v_alphaSize, v_i.0, v_maxLen, v_minLen, v_n.0)
		(?, 0)                    inner_10000_compl_sep(v_alphaSize, v_i.0, v_maxLen, v_minLen, v_n.0) -> inner_10000_out_sep(v_alphaSize, v_i.0_sep, v_maxLen, v_minLen, v_n.0) [ v_alphaSize >= 0 /\ v_i.0_sep >= 0 /\ v_i.0_sep <= v_alphaSize + 1 ]
		(?, 0)                    inner_10000_compl_sep(v_alphaSize, v_i.0, v_maxLen, v_minLen, v_n.0) -> inner_10000_out_sep(v_alphaSize, v_i.0_sep, v_maxLen, v_minLen, v_n.0) [ v_alphaSize >= 0 /\ v_i.0_sep < 0 /\ -v_i.0_sep <= v_alphaSize + 1 ]
		(?, 0)                    inner_10000_compl_sep(v_alphaSize, v_i.0, v_maxLen, v_minLen, v_n.0) -> inner_10000_out_sep(v_alphaSize, v_i.0_sep, v_maxLen, v_minLen, v_n.0) [ v_alphaSize < 0 /\ v_i.0_sep >= 0 /\ v_i.0_sep <= -v_alphaSize + 1 ]
		(?, 0)                    inner_10000_compl_sep(v_alphaSize, v_i.0, v_maxLen, v_minLen, v_n.0) -> inner_10000_out_sep(v_alphaSize, v_i.0_sep, v_maxLen, v_minLen, v_n.0) [ v_alphaSize < 0 /\ v_i.0_sep < 0 /\ -v_i.0_sep <= -v_alphaSize + 1 ]
		(?, 1)                    inner_10000_out_sep(v_alphaSize, v_i.0, v_maxLen, v_minLen, v_n.0) -> eval_BZ2_hbAssignCodes_bb1_in(v_alphaSize, v_i.0, v_maxLen, v_minLen, v_n.0 + 1) [ v_i.0 >= v_alphaSize ]
		(?, 1)                    eval_BZ2_hbAssignCodes_bb1_in(v_alphaSize, v_i.0, v_maxLen, v_minLen, v_n.0) -> inner_10000_in_sep(v_alphaSize, 0, v_maxLen, v_minLen, v_n.0) [ v_n.0 <= v_maxLen ]
		(1, 1)                    eval_BZ2_hbAssignCodes_bb0_in(v_alphaSize, v_i.0, v_maxLen, v_minLen, v_n.0) -> eval_BZ2_hbAssignCodes_bb1_in(v_alphaSize, v_i.0, v_maxLen, v_minLen, v_minLen)
		(1, 1)                    eval_BZ2_hbAssignCodes_start(v_alphaSize, v_i.0, v_maxLen, v_minLen, v_n.0) -> eval_BZ2_hbAssignCodes_bb0_in(v_alphaSize, v_i.0, v_maxLen, v_minLen, v_n.0)
	start location:	eval_BZ2_hbAssignCodes_start
	leaf cost:	1

Applied AI with 'oct' on problem 4 to obtain the following invariants:
  For symbol eval_BZ2_hbAssignCodes_bb1_in: -X_4 + X_5 >= 0
  For symbol inner_10000_compl_sep: X_3 - X_5 >= 0 /\ -X_4 + X_5 >= 0 /\ X_3 - X_4 >= 0 /\ -X_2 >= 0 /\ X_2 >= 0
  For symbol inner_10000_in_sep: X_3 - X_5 >= 0 /\ -X_4 + X_5 >= 0 /\ X_3 - X_4 >= 0 /\ -X_2 >= 0 /\ X_2 >= 0
  For symbol inner_10000_out_sep: X_3 - X_5 >= 0 /\ -X_4 + X_5 >= 0 /\ X_3 - X_4 >= 0


This yielded the following problem:
5:	T:
		(1, 1)                    eval_BZ2_hbAssignCodes_start(v_alphaSize, v_i.0, v_maxLen, v_minLen, v_n.0) -> eval_BZ2_hbAssignCodes_bb0_in(v_alphaSize, v_i.0, v_maxLen, v_minLen, v_n.0)
		(1, 1)                    eval_BZ2_hbAssignCodes_bb0_in(v_alphaSize, v_i.0, v_maxLen, v_minLen, v_n.0) -> eval_BZ2_hbAssignCodes_bb1_in(v_alphaSize, v_i.0, v_maxLen, v_minLen, v_minLen)
		(?, 1)                    eval_BZ2_hbAssignCodes_bb1_in(v_alphaSize, v_i.0, v_maxLen, v_minLen, v_n.0) -> inner_10000_in_sep(v_alphaSize, 0, v_maxLen, v_minLen, v_n.0) [ -v_minLen + v_n.0 >= 0 /\ v_n.0 <= v_maxLen ]
		(?, 1)                    inner_10000_out_sep(v_alphaSize, v_i.0, v_maxLen, v_minLen, v_n.0) -> eval_BZ2_hbAssignCodes_bb1_in(v_alphaSize, v_i.0, v_maxLen, v_minLen, v_n.0 + 1) [ v_maxLen - v_n.0 >= 0 /\ -v_minLen + v_n.0 >= 0 /\ v_maxLen - v_minLen >= 0 /\ v_i.0 >= v_alphaSize ]
		(?, 0)                    inner_10000_compl_sep(v_alphaSize, v_i.0, v_maxLen, v_minLen, v_n.0) -> inner_10000_out_sep(v_alphaSize, v_i.0_sep, v_maxLen, v_minLen, v_n.0) [ v_maxLen - v_n.0 >= 0 /\ -v_minLen + v_n.0 >= 0 /\ v_maxLen - v_minLen >= 0 /\ -v_i.0 >= 0 /\ v_i.0 >= 0 /\ v_alphaSize < 0 /\ v_i.0_sep < 0 /\ -v_i.0_sep <= -v_alphaSize + 1 ]
		(?, 0)                    inner_10000_compl_sep(v_alphaSize, v_i.0, v_maxLen, v_minLen, v_n.0) -> inner_10000_out_sep(v_alphaSize, v_i.0_sep, v_maxLen, v_minLen, v_n.0) [ v_maxLen - v_n.0 >= 0 /\ -v_minLen + v_n.0 >= 0 /\ v_maxLen - v_minLen >= 0 /\ -v_i.0 >= 0 /\ v_i.0 >= 0 /\ v_alphaSize < 0 /\ v_i.0_sep >= 0 /\ v_i.0_sep <= -v_alphaSize + 1 ]
		(?, 0)                    inner_10000_compl_sep(v_alphaSize, v_i.0, v_maxLen, v_minLen, v_n.0) -> inner_10000_out_sep(v_alphaSize, v_i.0_sep, v_maxLen, v_minLen, v_n.0) [ v_maxLen - v_n.0 >= 0 /\ -v_minLen + v_n.0 >= 0 /\ v_maxLen - v_minLen >= 0 /\ -v_i.0 >= 0 /\ v_i.0 >= 0 /\ v_alphaSize >= 0 /\ v_i.0_sep < 0 /\ -v_i.0_sep <= v_alphaSize + 1 ]
		(?, 0)                    inner_10000_compl_sep(v_alphaSize, v_i.0, v_maxLen, v_minLen, v_n.0) -> inner_10000_out_sep(v_alphaSize, v_i.0_sep, v_maxLen, v_minLen, v_n.0) [ v_maxLen - v_n.0 >= 0 /\ -v_minLen + v_n.0 >= 0 /\ v_maxLen - v_minLen >= 0 /\ -v_i.0 >= 0 /\ v_i.0 >= 0 /\ v_alphaSize >= 0 /\ v_i.0_sep >= 0 /\ v_i.0_sep <= v_alphaSize + 1 ]
		(?, 2*v_alphaSize + 2)    inner_10000_in_sep(v_alphaSize, v_i.0, v_maxLen, v_minLen, v_n.0) -> inner_10000_compl_sep(v_alphaSize, v_i.0, v_maxLen, v_minLen, v_n.0) [ v_maxLen - v_n.0 >= 0 /\ -v_minLen + v_n.0 >= 0 /\ v_maxLen - v_minLen >= 0 /\ -v_i.0 >= 0 /\ v_i.0 >= 0 ]
		(?, 0)                    inner_10000_in_sep(v_alphaSize, v_i.0, v_maxLen, v_minLen, v_n.0) -> inner_10000_out_sep(v_alphaSize, v_i.0, v_maxLen, v_minLen, v_n.0) [ v_maxLen - v_n.0 >= 0 /\ -v_minLen + v_n.0 >= 0 /\ v_maxLen - v_minLen >= 0 /\ -v_i.0 >= 0 /\ v_i.0 >= 0 ]
	start location:	eval_BZ2_hbAssignCodes_start
	leaf cost:	1

A polynomial rank function with
	Pol(eval_BZ2_hbAssignCodes_start) = 4*V_3 - 4*V_4 + 4
	Pol(eval_BZ2_hbAssignCodes_bb0_in) = 4*V_3 - 4*V_4 + 4
	Pol(eval_BZ2_hbAssignCodes_bb1_in) = 4*V_3 - 4*V_5 + 4
	Pol(inner_10000_in_sep) = 4*V_3 - 4*V_5 + 3
	Pol(inner_10000_out_sep) = 4*V_3 - 4*V_5 + 1
	Pol(inner_10000_compl_sep) = 4*V_3 - 4*V_5 + 2
orients all transitions weakly and the transitions
	inner_10000_out_sep(v_alphaSize, v_i.0, v_maxLen, v_minLen, v_n.0) -> eval_BZ2_hbAssignCodes_bb1_in(v_alphaSize, v_i.0, v_maxLen, v_minLen, v_n.0 + 1) [ v_maxLen - v_n.0 >= 0 /\ -v_minLen + v_n.0 >= 0 /\ v_maxLen - v_minLen >= 0 /\ v_i.0 >= v_alphaSize ]
	inner_10000_in_sep(v_alphaSize, v_i.0, v_maxLen, v_minLen, v_n.0) -> inner_10000_out_sep(v_alphaSize, v_i.0, v_maxLen, v_minLen, v_n.0) [ v_maxLen - v_n.0 >= 0 /\ -v_minLen + v_n.0 >= 0 /\ v_maxLen - v_minLen >= 0 /\ -v_i.0 >= 0 /\ v_i.0 >= 0 ]
	inner_10000_in_sep(v_alphaSize, v_i.0, v_maxLen, v_minLen, v_n.0) -> inner_10000_compl_sep(v_alphaSize, v_i.0, v_maxLen, v_minLen, v_n.0) [ v_maxLen - v_n.0 >= 0 /\ -v_minLen + v_n.0 >= 0 /\ v_maxLen - v_minLen >= 0 /\ -v_i.0 >= 0 /\ v_i.0 >= 0 ]
	inner_10000_compl_sep(v_alphaSize, v_i.0, v_maxLen, v_minLen, v_n.0) -> inner_10000_out_sep(v_alphaSize, v_i.0_sep, v_maxLen, v_minLen, v_n.0) [ v_maxLen - v_n.0 >= 0 /\ -v_minLen + v_n.0 >= 0 /\ v_maxLen - v_minLen >= 0 /\ -v_i.0 >= 0 /\ v_i.0 >= 0 /\ v_alphaSize < 0 /\ v_i.0_sep < 0 /\ -v_i.0_sep <= -v_alphaSize + 1 ]
	inner_10000_compl_sep(v_alphaSize, v_i.0, v_maxLen, v_minLen, v_n.0) -> inner_10000_out_sep(v_alphaSize, v_i.0_sep, v_maxLen, v_minLen, v_n.0) [ v_maxLen - v_n.0 >= 0 /\ -v_minLen + v_n.0 >= 0 /\ v_maxLen - v_minLen >= 0 /\ -v_i.0 >= 0 /\ v_i.0 >= 0 /\ v_alphaSize < 0 /\ v_i.0_sep >= 0 /\ v_i.0_sep <= -v_alphaSize + 1 ]
	inner_10000_compl_sep(v_alphaSize, v_i.0, v_maxLen, v_minLen, v_n.0) -> inner_10000_out_sep(v_alphaSize, v_i.0_sep, v_maxLen, v_minLen, v_n.0) [ v_maxLen - v_n.0 >= 0 /\ -v_minLen + v_n.0 >= 0 /\ v_maxLen - v_minLen >= 0 /\ -v_i.0 >= 0 /\ v_i.0 >= 0 /\ v_alphaSize >= 0 /\ v_i.0_sep < 0 /\ -v_i.0_sep <= v_alphaSize + 1 ]
	inner_10000_compl_sep(v_alphaSize, v_i.0, v_maxLen, v_minLen, v_n.0) -> inner_10000_out_sep(v_alphaSize, v_i.0_sep, v_maxLen, v_minLen, v_n.0) [ v_maxLen - v_n.0 >= 0 /\ -v_minLen + v_n.0 >= 0 /\ v_maxLen - v_minLen >= 0 /\ -v_i.0 >= 0 /\ v_i.0 >= 0 /\ v_alphaSize >= 0 /\ v_i.0_sep >= 0 /\ v_i.0_sep <= v_alphaSize + 1 ]
	eval_BZ2_hbAssignCodes_bb1_in(v_alphaSize, v_i.0, v_maxLen, v_minLen, v_n.0) -> inner_10000_in_sep(v_alphaSize, 0, v_maxLen, v_minLen, v_n.0) [ -v_minLen + v_n.0 >= 0 /\ v_n.0 <= v_maxLen ]
strictly and produces the following problem:
6:	T:
		(1, 1)                                              eval_BZ2_hbAssignCodes_start(v_alphaSize, v_i.0, v_maxLen, v_minLen, v_n.0) -> eval_BZ2_hbAssignCodes_bb0_in(v_alphaSize, v_i.0, v_maxLen, v_minLen, v_n.0)
		(1, 1)                                              eval_BZ2_hbAssignCodes_bb0_in(v_alphaSize, v_i.0, v_maxLen, v_minLen, v_n.0) -> eval_BZ2_hbAssignCodes_bb1_in(v_alphaSize, v_i.0, v_maxLen, v_minLen, v_minLen)
		(4*v_maxLen + 4*v_minLen + 4, 1)                    eval_BZ2_hbAssignCodes_bb1_in(v_alphaSize, v_i.0, v_maxLen, v_minLen, v_n.0) -> inner_10000_in_sep(v_alphaSize, 0, v_maxLen, v_minLen, v_n.0) [ -v_minLen + v_n.0 >= 0 /\ v_n.0 <= v_maxLen ]
		(4*v_maxLen + 4*v_minLen + 4, 1)                    inner_10000_out_sep(v_alphaSize, v_i.0, v_maxLen, v_minLen, v_n.0) -> eval_BZ2_hbAssignCodes_bb1_in(v_alphaSize, v_i.0, v_maxLen, v_minLen, v_n.0 + 1) [ v_maxLen - v_n.0 >= 0 /\ -v_minLen + v_n.0 >= 0 /\ v_maxLen - v_minLen >= 0 /\ v_i.0 >= v_alphaSize ]
		(4*v_maxLen + 4*v_minLen + 4, 0)                    inner_10000_compl_sep(v_alphaSize, v_i.0, v_maxLen, v_minLen, v_n.0) -> inner_10000_out_sep(v_alphaSize, v_i.0_sep, v_maxLen, v_minLen, v_n.0) [ v_maxLen - v_n.0 >= 0 /\ -v_minLen + v_n.0 >= 0 /\ v_maxLen - v_minLen >= 0 /\ -v_i.0 >= 0 /\ v_i.0 >= 0 /\ v_alphaSize < 0 /\ v_i.0_sep < 0 /\ -v_i.0_sep <= -v_alphaSize + 1 ]
		(4*v_maxLen + 4*v_minLen + 4, 0)                    inner_10000_compl_sep(v_alphaSize, v_i.0, v_maxLen, v_minLen, v_n.0) -> inner_10000_out_sep(v_alphaSize, v_i.0_sep, v_maxLen, v_minLen, v_n.0) [ v_maxLen - v_n.0 >= 0 /\ -v_minLen + v_n.0 >= 0 /\ v_maxLen - v_minLen >= 0 /\ -v_i.0 >= 0 /\ v_i.0 >= 0 /\ v_alphaSize < 0 /\ v_i.0_sep >= 0 /\ v_i.0_sep <= -v_alphaSize + 1 ]
		(4*v_maxLen + 4*v_minLen + 4, 0)                    inner_10000_compl_sep(v_alphaSize, v_i.0, v_maxLen, v_minLen, v_n.0) -> inner_10000_out_sep(v_alphaSize, v_i.0_sep, v_maxLen, v_minLen, v_n.0) [ v_maxLen - v_n.0 >= 0 /\ -v_minLen + v_n.0 >= 0 /\ v_maxLen - v_minLen >= 0 /\ -v_i.0 >= 0 /\ v_i.0 >= 0 /\ v_alphaSize >= 0 /\ v_i.0_sep < 0 /\ -v_i.0_sep <= v_alphaSize + 1 ]
		(4*v_maxLen + 4*v_minLen + 4, 0)                    inner_10000_compl_sep(v_alphaSize, v_i.0, v_maxLen, v_minLen, v_n.0) -> inner_10000_out_sep(v_alphaSize, v_i.0_sep, v_maxLen, v_minLen, v_n.0) [ v_maxLen - v_n.0 >= 0 /\ -v_minLen + v_n.0 >= 0 /\ v_maxLen - v_minLen >= 0 /\ -v_i.0 >= 0 /\ v_i.0 >= 0 /\ v_alphaSize >= 0 /\ v_i.0_sep >= 0 /\ v_i.0_sep <= v_alphaSize + 1 ]
		(4*v_maxLen + 4*v_minLen + 4, 2*v_alphaSize + 2)    inner_10000_in_sep(v_alphaSize, v_i.0, v_maxLen, v_minLen, v_n.0) -> inner_10000_compl_sep(v_alphaSize, v_i.0, v_maxLen, v_minLen, v_n.0) [ v_maxLen - v_n.0 >= 0 /\ -v_minLen + v_n.0 >= 0 /\ v_maxLen - v_minLen >= 0 /\ -v_i.0 >= 0 /\ v_i.0 >= 0 ]
		(4*v_maxLen + 4*v_minLen + 4, 0)                    inner_10000_in_sep(v_alphaSize, v_i.0, v_maxLen, v_minLen, v_n.0) -> inner_10000_out_sep(v_alphaSize, v_i.0, v_maxLen, v_minLen, v_n.0) [ v_maxLen - v_n.0 >= 0 /\ -v_minLen + v_n.0 >= 0 /\ v_maxLen - v_minLen >= 0 /\ -v_i.0 >= 0 /\ v_i.0 >= 0 ]
	start location:	eval_BZ2_hbAssignCodes_start
	leaf cost:	1

Complexity upper bound 16*v_maxLen + 16*v_minLen + 8*v_alphaSize*v_maxLen + 8*v_alphaSize*v_minLen + 8*v_alphaSize + 19

Time: 0.158 sec (SMT: 0.124 sec)

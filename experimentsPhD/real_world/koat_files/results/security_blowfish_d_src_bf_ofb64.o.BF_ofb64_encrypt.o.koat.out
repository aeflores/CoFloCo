MAYBE

Initial complexity problem:
1:	T:
		(1, 1)    eval_BF_ofb64_encrypt_start(v_79, v_l.0, v_length) -> Com_1(eval_BF_ofb64_encrypt_bb0_in(v_79, v_l.0, v_length))
		(?, 1)    eval_BF_ofb64_encrypt_bb0_in(v_79, v_l.0, v_length) -> Com_1(eval_BF_ofb64_encrypt_bb1_in(v_79, v_length, v_length))
		(?, 1)    eval_BF_ofb64_encrypt_bb1_in(v_79, v_l.0, v_length) -> Com_1(eval_BF_ofb64_encrypt_64(v_l.0 - 1, v_l.0, v_length)) [ v_l.0 < 0 ]
		(?, 1)    eval_BF_ofb64_encrypt_bb1_in(v_79, v_l.0, v_length) -> Com_1(eval_BF_ofb64_encrypt_64(v_l.0 - 1, v_l.0, v_length)) [ v_l.0 > 0 ]
		(?, 1)    eval_BF_ofb64_encrypt_bb1_in(v_79, v_l.0, v_length) -> Com_1(eval_BF_ofb64_encrypt_bb4_in(v_l.0 - 1, v_l.0, v_length)) [ v_l.0 < 0 ]
		(?, 1)    eval_BF_ofb64_encrypt_bb1_in(v_79, v_l.0, v_length) -> Com_1(eval_BF_ofb64_encrypt_bb4_in(v_l.0 - 1, v_l.0, v_length)) [ v_l.0 > 0 ]
		(?, 1)    eval_BF_ofb64_encrypt_bb1_in(v_79, v_l.0, v_length) -> Com_1(eval_BF_ofb64_encrypt_bb7_in(v_79, v_l.0, v_length)) [ v_l.0 = 0 ]
		(?, 1)    eval_BF_ofb64_encrypt_64(v_79, v_l.0, v_length) -> Com_2(eval_BF_encrypt_start(v_79, v_l.0, v_length), eval_BF_ofb64_encrypt_65(v_79, v_l.0, v_length))
		(?, 1)    eval_BF_ofb64_encrypt_65(v_79, v_l.0, v_length) -> Com_1(eval_BF_ofb64_encrypt_bb4_in(v_79, v_l.0, v_length))
		(?, 1)    eval_BF_ofb64_encrypt_bb4_in(v_79, v_l.0, v_length) -> Com_1(eval_BF_ofb64_encrypt_bb1_in(v_79, v_79, v_length))
		(?, 1)    eval_BF_ofb64_encrypt_bb7_in(v_79, v_l.0, v_length) -> Com_1(eval_BF_ofb64_encrypt_stop(v_79, v_l.0, v_length))
	start location:	eval_BF_ofb64_encrypt_start
	leaf cost:	0

Repeatedly propagating knowledge in problem 1 produces the following problem:
2:	T:
		(1, 1)    eval_BF_ofb64_encrypt_start(v_79, v_l.0, v_length) -> Com_1(eval_BF_ofb64_encrypt_bb0_in(v_79, v_l.0, v_length))
		(1, 1)    eval_BF_ofb64_encrypt_bb0_in(v_79, v_l.0, v_length) -> Com_1(eval_BF_ofb64_encrypt_bb1_in(v_79, v_length, v_length))
		(?, 1)    eval_BF_ofb64_encrypt_bb1_in(v_79, v_l.0, v_length) -> Com_1(eval_BF_ofb64_encrypt_64(v_l.0 - 1, v_l.0, v_length)) [ v_l.0 < 0 ]
		(?, 1)    eval_BF_ofb64_encrypt_bb1_in(v_79, v_l.0, v_length) -> Com_1(eval_BF_ofb64_encrypt_64(v_l.0 - 1, v_l.0, v_length)) [ v_l.0 > 0 ]
		(?, 1)    eval_BF_ofb64_encrypt_bb1_in(v_79, v_l.0, v_length) -> Com_1(eval_BF_ofb64_encrypt_bb4_in(v_l.0 - 1, v_l.0, v_length)) [ v_l.0 < 0 ]
		(?, 1)    eval_BF_ofb64_encrypt_bb1_in(v_79, v_l.0, v_length) -> Com_1(eval_BF_ofb64_encrypt_bb4_in(v_l.0 - 1, v_l.0, v_length)) [ v_l.0 > 0 ]
		(?, 1)    eval_BF_ofb64_encrypt_bb1_in(v_79, v_l.0, v_length) -> Com_1(eval_BF_ofb64_encrypt_bb7_in(v_79, v_l.0, v_length)) [ v_l.0 = 0 ]
		(?, 1)    eval_BF_ofb64_encrypt_64(v_79, v_l.0, v_length) -> Com_2(eval_BF_encrypt_start(v_79, v_l.0, v_length), eval_BF_ofb64_encrypt_65(v_79, v_l.0, v_length))
		(?, 1)    eval_BF_ofb64_encrypt_65(v_79, v_l.0, v_length) -> Com_1(eval_BF_ofb64_encrypt_bb4_in(v_79, v_l.0, v_length))
		(?, 1)    eval_BF_ofb64_encrypt_bb4_in(v_79, v_l.0, v_length) -> Com_1(eval_BF_ofb64_encrypt_bb1_in(v_79, v_79, v_length))
		(?, 1)    eval_BF_ofb64_encrypt_bb7_in(v_79, v_l.0, v_length) -> Com_1(eval_BF_ofb64_encrypt_stop(v_79, v_l.0, v_length))
	start location:	eval_BF_ofb64_encrypt_start
	leaf cost:	0

A polynomial rank function with
	Pol(eval_BF_ofb64_encrypt_start) = 2
	Pol(eval_BF_ofb64_encrypt_bb0_in) = 2
	Pol(eval_BF_ofb64_encrypt_bb1_in) = 2
	Pol(eval_BF_ofb64_encrypt_64) = 2
	Pol(eval_BF_ofb64_encrypt_bb4_in) = 2
	Pol(eval_BF_ofb64_encrypt_bb7_in) = 1
	Pol(eval_BF_encrypt_start) = 0
	Pol(eval_BF_ofb64_encrypt_65) = 2
	Pol(eval_BF_ofb64_encrypt_stop) = 0
orients all transitions weakly and the transitions
	eval_BF_ofb64_encrypt_bb7_in(v_79, v_l.0, v_length) -> Com_1(eval_BF_ofb64_encrypt_stop(v_79, v_l.0, v_length))
	eval_BF_ofb64_encrypt_bb1_in(v_79, v_l.0, v_length) -> Com_1(eval_BF_ofb64_encrypt_bb7_in(v_79, v_l.0, v_length)) [ v_l.0 = 0 ]
strictly and produces the following problem:
3:	T:
		(1, 1)    eval_BF_ofb64_encrypt_start(v_79, v_l.0, v_length) -> Com_1(eval_BF_ofb64_encrypt_bb0_in(v_79, v_l.0, v_length))
		(1, 1)    eval_BF_ofb64_encrypt_bb0_in(v_79, v_l.0, v_length) -> Com_1(eval_BF_ofb64_encrypt_bb1_in(v_79, v_length, v_length))
		(?, 1)    eval_BF_ofb64_encrypt_bb1_in(v_79, v_l.0, v_length) -> Com_1(eval_BF_ofb64_encrypt_64(v_l.0 - 1, v_l.0, v_length)) [ v_l.0 < 0 ]
		(?, 1)    eval_BF_ofb64_encrypt_bb1_in(v_79, v_l.0, v_length) -> Com_1(eval_BF_ofb64_encrypt_64(v_l.0 - 1, v_l.0, v_length)) [ v_l.0 > 0 ]
		(?, 1)    eval_BF_ofb64_encrypt_bb1_in(v_79, v_l.0, v_length) -> Com_1(eval_BF_ofb64_encrypt_bb4_in(v_l.0 - 1, v_l.0, v_length)) [ v_l.0 < 0 ]
		(?, 1)    eval_BF_ofb64_encrypt_bb1_in(v_79, v_l.0, v_length) -> Com_1(eval_BF_ofb64_encrypt_bb4_in(v_l.0 - 1, v_l.0, v_length)) [ v_l.0 > 0 ]
		(2, 1)    eval_BF_ofb64_encrypt_bb1_in(v_79, v_l.0, v_length) -> Com_1(eval_BF_ofb64_encrypt_bb7_in(v_79, v_l.0, v_length)) [ v_l.0 = 0 ]
		(?, 1)    eval_BF_ofb64_encrypt_64(v_79, v_l.0, v_length) -> Com_2(eval_BF_encrypt_start(v_79, v_l.0, v_length), eval_BF_ofb64_encrypt_65(v_79, v_l.0, v_length))
		(?, 1)    eval_BF_ofb64_encrypt_65(v_79, v_l.0, v_length) -> Com_1(eval_BF_ofb64_encrypt_bb4_in(v_79, v_l.0, v_length))
		(?, 1)    eval_BF_ofb64_encrypt_bb4_in(v_79, v_l.0, v_length) -> Com_1(eval_BF_ofb64_encrypt_bb1_in(v_79, v_79, v_length))
		(2, 1)    eval_BF_ofb64_encrypt_bb7_in(v_79, v_l.0, v_length) -> Com_1(eval_BF_ofb64_encrypt_stop(v_79, v_l.0, v_length))
	start location:	eval_BF_ofb64_encrypt_start
	leaf cost:	0

Applied AI with 'oct' on problem 3 to obtain the following invariants:
  For symbol eval_BF_ofb64_encrypt_64: -X_2 + X_3 >= 0 /\ -X_1 + X_3 - 1 >= 0 /\ X_1 - X_2 + 1 >= 0 /\ -X_1 + X_2 - 1 >= 0
  For symbol eval_BF_ofb64_encrypt_65: -X_2 + X_3 >= 0 /\ -X_1 + X_3 - 1 >= 0 /\ X_1 - X_2 + 1 >= 0 /\ -X_1 + X_2 - 1 >= 0
  For symbol eval_BF_ofb64_encrypt_bb1_in: -X_2 + X_3 >= 0
  For symbol eval_BF_ofb64_encrypt_bb4_in: -X_2 + X_3 >= 0 /\ -X_1 + X_3 - 1 >= 0 /\ X_1 - X_2 + 1 >= 0 /\ -X_1 + X_2 - 1 >= 0
  For symbol eval_BF_ofb64_encrypt_bb7_in: X_3 >= 0 /\ X_2 + X_3 >= 0 /\ -X_2 + X_3 >= 0 /\ -X_2 >= 0 /\ X_2 >= 0


This yielded the following problem:
4:	T:
		(2, 1)    eval_BF_ofb64_encrypt_bb7_in(v_79, v_l.0, v_length) -> Com_1(eval_BF_ofb64_encrypt_stop(v_79, v_l.0, v_length)) [ v_length >= 0 /\ v_l.0 + v_length >= 0 /\ -v_l.0 + v_length >= 0 /\ -v_l.0 >= 0 /\ v_l.0 >= 0 ]
		(?, 1)    eval_BF_ofb64_encrypt_bb4_in(v_79, v_l.0, v_length) -> Com_1(eval_BF_ofb64_encrypt_bb1_in(v_79, v_79, v_length)) [ -v_l.0 + v_length >= 0 /\ -v_79 + v_length - 1 >= 0 /\ v_79 - v_l.0 + 1 >= 0 /\ -v_79 + v_l.0 - 1 >= 0 ]
		(?, 1)    eval_BF_ofb64_encrypt_65(v_79, v_l.0, v_length) -> Com_1(eval_BF_ofb64_encrypt_bb4_in(v_79, v_l.0, v_length)) [ -v_l.0 + v_length >= 0 /\ -v_79 + v_length - 1 >= 0 /\ v_79 - v_l.0 + 1 >= 0 /\ -v_79 + v_l.0 - 1 >= 0 ]
		(?, 1)    eval_BF_ofb64_encrypt_64(v_79, v_l.0, v_length) -> Com_2(eval_BF_encrypt_start(v_79, v_l.0, v_length), eval_BF_ofb64_encrypt_65(v_79, v_l.0, v_length)) [ -v_l.0 + v_length >= 0 /\ -v_79 + v_length - 1 >= 0 /\ v_79 - v_l.0 + 1 >= 0 /\ -v_79 + v_l.0 - 1 >= 0 ]
		(2, 1)    eval_BF_ofb64_encrypt_bb1_in(v_79, v_l.0, v_length) -> Com_1(eval_BF_ofb64_encrypt_bb7_in(v_79, v_l.0, v_length)) [ -v_l.0 + v_length >= 0 /\ v_l.0 = 0 ]
		(?, 1)    eval_BF_ofb64_encrypt_bb1_in(v_79, v_l.0, v_length) -> Com_1(eval_BF_ofb64_encrypt_bb4_in(v_l.0 - 1, v_l.0, v_length)) [ -v_l.0 + v_length >= 0 /\ v_l.0 > 0 ]
		(?, 1)    eval_BF_ofb64_encrypt_bb1_in(v_79, v_l.0, v_length) -> Com_1(eval_BF_ofb64_encrypt_bb4_in(v_l.0 - 1, v_l.0, v_length)) [ -v_l.0 + v_length >= 0 /\ v_l.0 < 0 ]
		(?, 1)    eval_BF_ofb64_encrypt_bb1_in(v_79, v_l.0, v_length) -> Com_1(eval_BF_ofb64_encrypt_64(v_l.0 - 1, v_l.0, v_length)) [ -v_l.0 + v_length >= 0 /\ v_l.0 > 0 ]
		(?, 1)    eval_BF_ofb64_encrypt_bb1_in(v_79, v_l.0, v_length) -> Com_1(eval_BF_ofb64_encrypt_64(v_l.0 - 1, v_l.0, v_length)) [ -v_l.0 + v_length >= 0 /\ v_l.0 < 0 ]
		(1, 1)    eval_BF_ofb64_encrypt_bb0_in(v_79, v_l.0, v_length) -> Com_1(eval_BF_ofb64_encrypt_bb1_in(v_79, v_length, v_length))
		(1, 1)    eval_BF_ofb64_encrypt_start(v_79, v_l.0, v_length) -> Com_1(eval_BF_ofb64_encrypt_bb0_in(v_79, v_l.0, v_length))
	start location:	eval_BF_ofb64_encrypt_start
	leaf cost:	0

By chaining the transition eval_BF_ofb64_encrypt_65(v_79, v_l.0, v_length) -> Com_1(eval_BF_ofb64_encrypt_bb4_in(v_79, v_l.0, v_length)) [ -v_l.0 + v_length >= 0 /\ -v_79 + v_length - 1 >= 0 /\ v_79 - v_l.0 + 1 >= 0 /\ -v_79 + v_l.0 - 1 >= 0 ] with all transitions in problem 4, the following new transition is obtained:
	eval_BF_ofb64_encrypt_65(v_79, v_l.0, v_length) -> Com_1(eval_BF_ofb64_encrypt_bb1_in(v_79, v_79, v_length)) [ -v_l.0 + v_length >= 0 /\ -v_79 + v_length - 1 >= 0 /\ v_79 - v_l.0 + 1 >= 0 /\ -v_79 + v_l.0 - 1 >= 0 ]
We thus obtain the following problem:
5:	T:
		(?, 2)    eval_BF_ofb64_encrypt_65(v_79, v_l.0, v_length) -> Com_1(eval_BF_ofb64_encrypt_bb1_in(v_79, v_79, v_length)) [ -v_l.0 + v_length >= 0 /\ -v_79 + v_length - 1 >= 0 /\ v_79 - v_l.0 + 1 >= 0 /\ -v_79 + v_l.0 - 1 >= 0 ]
		(2, 1)    eval_BF_ofb64_encrypt_bb7_in(v_79, v_l.0, v_length) -> Com_1(eval_BF_ofb64_encrypt_stop(v_79, v_l.0, v_length)) [ v_length >= 0 /\ v_l.0 + v_length >= 0 /\ -v_l.0 + v_length >= 0 /\ -v_l.0 >= 0 /\ v_l.0 >= 0 ]
		(?, 1)    eval_BF_ofb64_encrypt_bb4_in(v_79, v_l.0, v_length) -> Com_1(eval_BF_ofb64_encrypt_bb1_in(v_79, v_79, v_length)) [ -v_l.0 + v_length >= 0 /\ -v_79 + v_length - 1 >= 0 /\ v_79 - v_l.0 + 1 >= 0 /\ -v_79 + v_l.0 - 1 >= 0 ]
		(?, 1)    eval_BF_ofb64_encrypt_64(v_79, v_l.0, v_length) -> Com_2(eval_BF_encrypt_start(v_79, v_l.0, v_length), eval_BF_ofb64_encrypt_65(v_79, v_l.0, v_length)) [ -v_l.0 + v_length >= 0 /\ -v_79 + v_length - 1 >= 0 /\ v_79 - v_l.0 + 1 >= 0 /\ -v_79 + v_l.0 - 1 >= 0 ]
		(2, 1)    eval_BF_ofb64_encrypt_bb1_in(v_79, v_l.0, v_length) -> Com_1(eval_BF_ofb64_encrypt_bb7_in(v_79, v_l.0, v_length)) [ -v_l.0 + v_length >= 0 /\ v_l.0 = 0 ]
		(?, 1)    eval_BF_ofb64_encrypt_bb1_in(v_79, v_l.0, v_length) -> Com_1(eval_BF_ofb64_encrypt_bb4_in(v_l.0 - 1, v_l.0, v_length)) [ -v_l.0 + v_length >= 0 /\ v_l.0 > 0 ]
		(?, 1)    eval_BF_ofb64_encrypt_bb1_in(v_79, v_l.0, v_length) -> Com_1(eval_BF_ofb64_encrypt_bb4_in(v_l.0 - 1, v_l.0, v_length)) [ -v_l.0 + v_length >= 0 /\ v_l.0 < 0 ]
		(?, 1)    eval_BF_ofb64_encrypt_bb1_in(v_79, v_l.0, v_length) -> Com_1(eval_BF_ofb64_encrypt_64(v_l.0 - 1, v_l.0, v_length)) [ -v_l.0 + v_length >= 0 /\ v_l.0 > 0 ]
		(?, 1)    eval_BF_ofb64_encrypt_bb1_in(v_79, v_l.0, v_length) -> Com_1(eval_BF_ofb64_encrypt_64(v_l.0 - 1, v_l.0, v_length)) [ -v_l.0 + v_length >= 0 /\ v_l.0 < 0 ]
		(1, 1)    eval_BF_ofb64_encrypt_bb0_in(v_79, v_l.0, v_length) -> Com_1(eval_BF_ofb64_encrypt_bb1_in(v_79, v_length, v_length))
		(1, 1)    eval_BF_ofb64_encrypt_start(v_79, v_l.0, v_length) -> Com_1(eval_BF_ofb64_encrypt_bb0_in(v_79, v_l.0, v_length))
	start location:	eval_BF_ofb64_encrypt_start
	leaf cost:	0

By chaining the transition eval_BF_ofb64_encrypt_bb1_in(v_79, v_l.0, v_length) -> Com_1(eval_BF_ofb64_encrypt_bb7_in(v_79, v_l.0, v_length)) [ -v_l.0 + v_length >= 0 /\ v_l.0 = 0 ] with all transitions in problem 5, the following new transition is obtained:
	eval_BF_ofb64_encrypt_bb1_in(v_79, v_l.0, v_length) -> Com_1(eval_BF_ofb64_encrypt_stop(v_79, v_l.0, v_length)) [ -v_l.0 + v_length >= 0 /\ v_l.0 = 0 /\ v_length >= 0 /\ v_l.0 + v_length >= 0 /\ -v_l.0 >= 0 /\ v_l.0 >= 0 ]
We thus obtain the following problem:
6:	T:
		(2, 2)    eval_BF_ofb64_encrypt_bb1_in(v_79, v_l.0, v_length) -> Com_1(eval_BF_ofb64_encrypt_stop(v_79, v_l.0, v_length)) [ -v_l.0 + v_length >= 0 /\ v_l.0 = 0 /\ v_length >= 0 /\ v_l.0 + v_length >= 0 /\ -v_l.0 >= 0 /\ v_l.0 >= 0 ]
		(?, 2)    eval_BF_ofb64_encrypt_65(v_79, v_l.0, v_length) -> Com_1(eval_BF_ofb64_encrypt_bb1_in(v_79, v_79, v_length)) [ -v_l.0 + v_length >= 0 /\ -v_79 + v_length - 1 >= 0 /\ v_79 - v_l.0 + 1 >= 0 /\ -v_79 + v_l.0 - 1 >= 0 ]
		(2, 1)    eval_BF_ofb64_encrypt_bb7_in(v_79, v_l.0, v_length) -> Com_1(eval_BF_ofb64_encrypt_stop(v_79, v_l.0, v_length)) [ v_length >= 0 /\ v_l.0 + v_length >= 0 /\ -v_l.0 + v_length >= 0 /\ -v_l.0 >= 0 /\ v_l.0 >= 0 ]
		(?, 1)    eval_BF_ofb64_encrypt_bb4_in(v_79, v_l.0, v_length) -> Com_1(eval_BF_ofb64_encrypt_bb1_in(v_79, v_79, v_length)) [ -v_l.0 + v_length >= 0 /\ -v_79 + v_length - 1 >= 0 /\ v_79 - v_l.0 + 1 >= 0 /\ -v_79 + v_l.0 - 1 >= 0 ]
		(?, 1)    eval_BF_ofb64_encrypt_64(v_79, v_l.0, v_length) -> Com_2(eval_BF_encrypt_start(v_79, v_l.0, v_length), eval_BF_ofb64_encrypt_65(v_79, v_l.0, v_length)) [ -v_l.0 + v_length >= 0 /\ -v_79 + v_length - 1 >= 0 /\ v_79 - v_l.0 + 1 >= 0 /\ -v_79 + v_l.0 - 1 >= 0 ]
		(?, 1)    eval_BF_ofb64_encrypt_bb1_in(v_79, v_l.0, v_length) -> Com_1(eval_BF_ofb64_encrypt_bb4_in(v_l.0 - 1, v_l.0, v_length)) [ -v_l.0 + v_length >= 0 /\ v_l.0 > 0 ]
		(?, 1)    eval_BF_ofb64_encrypt_bb1_in(v_79, v_l.0, v_length) -> Com_1(eval_BF_ofb64_encrypt_bb4_in(v_l.0 - 1, v_l.0, v_length)) [ -v_l.0 + v_length >= 0 /\ v_l.0 < 0 ]
		(?, 1)    eval_BF_ofb64_encrypt_bb1_in(v_79, v_l.0, v_length) -> Com_1(eval_BF_ofb64_encrypt_64(v_l.0 - 1, v_l.0, v_length)) [ -v_l.0 + v_length >= 0 /\ v_l.0 > 0 ]
		(?, 1)    eval_BF_ofb64_encrypt_bb1_in(v_79, v_l.0, v_length) -> Com_1(eval_BF_ofb64_encrypt_64(v_l.0 - 1, v_l.0, v_length)) [ -v_l.0 + v_length >= 0 /\ v_l.0 < 0 ]
		(1, 1)    eval_BF_ofb64_encrypt_bb0_in(v_79, v_l.0, v_length) -> Com_1(eval_BF_ofb64_encrypt_bb1_in(v_79, v_length, v_length))
		(1, 1)    eval_BF_ofb64_encrypt_start(v_79, v_l.0, v_length) -> Com_1(eval_BF_ofb64_encrypt_bb0_in(v_79, v_l.0, v_length))
	start location:	eval_BF_ofb64_encrypt_start
	leaf cost:	0

Testing for reachability in the complexity graph removes the following transition from problem 6:
	eval_BF_ofb64_encrypt_bb7_in(v_79, v_l.0, v_length) -> Com_1(eval_BF_ofb64_encrypt_stop(v_79, v_l.0, v_length)) [ v_length >= 0 /\ v_l.0 + v_length >= 0 /\ -v_l.0 + v_length >= 0 /\ -v_l.0 >= 0 /\ v_l.0 >= 0 ]
We thus obtain the following problem:
7:	T:
		(?, 2)    eval_BF_ofb64_encrypt_65(v_79, v_l.0, v_length) -> Com_1(eval_BF_ofb64_encrypt_bb1_in(v_79, v_79, v_length)) [ -v_l.0 + v_length >= 0 /\ -v_79 + v_length - 1 >= 0 /\ v_79 - v_l.0 + 1 >= 0 /\ -v_79 + v_l.0 - 1 >= 0 ]
		(?, 1)    eval_BF_ofb64_encrypt_64(v_79, v_l.0, v_length) -> Com_2(eval_BF_encrypt_start(v_79, v_l.0, v_length), eval_BF_ofb64_encrypt_65(v_79, v_l.0, v_length)) [ -v_l.0 + v_length >= 0 /\ -v_79 + v_length - 1 >= 0 /\ v_79 - v_l.0 + 1 >= 0 /\ -v_79 + v_l.0 - 1 >= 0 ]
		(?, 1)    eval_BF_ofb64_encrypt_bb4_in(v_79, v_l.0, v_length) -> Com_1(eval_BF_ofb64_encrypt_bb1_in(v_79, v_79, v_length)) [ -v_l.0 + v_length >= 0 /\ -v_79 + v_length - 1 >= 0 /\ v_79 - v_l.0 + 1 >= 0 /\ -v_79 + v_l.0 - 1 >= 0 ]
		(2, 2)    eval_BF_ofb64_encrypt_bb1_in(v_79, v_l.0, v_length) -> Com_1(eval_BF_ofb64_encrypt_stop(v_79, v_l.0, v_length)) [ -v_l.0 + v_length >= 0 /\ v_l.0 = 0 /\ v_length >= 0 /\ v_l.0 + v_length >= 0 /\ -v_l.0 >= 0 /\ v_l.0 >= 0 ]
		(?, 1)    eval_BF_ofb64_encrypt_bb1_in(v_79, v_l.0, v_length) -> Com_1(eval_BF_ofb64_encrypt_64(v_l.0 - 1, v_l.0, v_length)) [ -v_l.0 + v_length >= 0 /\ v_l.0 < 0 ]
		(?, 1)    eval_BF_ofb64_encrypt_bb1_in(v_79, v_l.0, v_length) -> Com_1(eval_BF_ofb64_encrypt_64(v_l.0 - 1, v_l.0, v_length)) [ -v_l.0 + v_length >= 0 /\ v_l.0 > 0 ]
		(?, 1)    eval_BF_ofb64_encrypt_bb1_in(v_79, v_l.0, v_length) -> Com_1(eval_BF_ofb64_encrypt_bb4_in(v_l.0 - 1, v_l.0, v_length)) [ -v_l.0 + v_length >= 0 /\ v_l.0 < 0 ]
		(?, 1)    eval_BF_ofb64_encrypt_bb1_in(v_79, v_l.0, v_length) -> Com_1(eval_BF_ofb64_encrypt_bb4_in(v_l.0 - 1, v_l.0, v_length)) [ -v_l.0 + v_length >= 0 /\ v_l.0 > 0 ]
		(1, 1)    eval_BF_ofb64_encrypt_bb0_in(v_79, v_l.0, v_length) -> Com_1(eval_BF_ofb64_encrypt_bb1_in(v_79, v_length, v_length))
		(1, 1)    eval_BF_ofb64_encrypt_start(v_79, v_l.0, v_length) -> Com_1(eval_BF_ofb64_encrypt_bb0_in(v_79, v_l.0, v_length))
	start location:	eval_BF_ofb64_encrypt_start
	leaf cost:	0

By chaining the transition eval_BF_ofb64_encrypt_bb1_in(v_79, v_l.0, v_length) -> Com_1(eval_BF_ofb64_encrypt_64(v_l.0 - 1, v_l.0, v_length)) [ -v_l.0 + v_length >= 0 /\ v_l.0 < 0 ] with all transitions in problem 7, the following new transition is obtained:
	eval_BF_ofb64_encrypt_bb1_in(v_79, v_l.0, v_length) -> Com_2(eval_BF_encrypt_start(v_l.0 - 1, v_l.0, v_length), eval_BF_ofb64_encrypt_65(v_l.0 - 1, v_l.0, v_length)) [ -v_l.0 + v_length >= 0 /\ v_l.0 < 0 /\ 0 >= 0 ]
We thus obtain the following problem:
8:	T:
		(?, 2)    eval_BF_ofb64_encrypt_bb1_in(v_79, v_l.0, v_length) -> Com_2(eval_BF_encrypt_start(v_l.0 - 1, v_l.0, v_length), eval_BF_ofb64_encrypt_65(v_l.0 - 1, v_l.0, v_length)) [ -v_l.0 + v_length >= 0 /\ v_l.0 < 0 /\ 0 >= 0 ]
		(?, 2)    eval_BF_ofb64_encrypt_65(v_79, v_l.0, v_length) -> Com_1(eval_BF_ofb64_encrypt_bb1_in(v_79, v_79, v_length)) [ -v_l.0 + v_length >= 0 /\ -v_79 + v_length - 1 >= 0 /\ v_79 - v_l.0 + 1 >= 0 /\ -v_79 + v_l.0 - 1 >= 0 ]
		(?, 1)    eval_BF_ofb64_encrypt_64(v_79, v_l.0, v_length) -> Com_2(eval_BF_encrypt_start(v_79, v_l.0, v_length), eval_BF_ofb64_encrypt_65(v_79, v_l.0, v_length)) [ -v_l.0 + v_length >= 0 /\ -v_79 + v_length - 1 >= 0 /\ v_79 - v_l.0 + 1 >= 0 /\ -v_79 + v_l.0 - 1 >= 0 ]
		(?, 1)    eval_BF_ofb64_encrypt_bb4_in(v_79, v_l.0, v_length) -> Com_1(eval_BF_ofb64_encrypt_bb1_in(v_79, v_79, v_length)) [ -v_l.0 + v_length >= 0 /\ -v_79 + v_length - 1 >= 0 /\ v_79 - v_l.0 + 1 >= 0 /\ -v_79 + v_l.0 - 1 >= 0 ]
		(2, 2)    eval_BF_ofb64_encrypt_bb1_in(v_79, v_l.0, v_length) -> Com_1(eval_BF_ofb64_encrypt_stop(v_79, v_l.0, v_length)) [ -v_l.0 + v_length >= 0 /\ v_l.0 = 0 /\ v_length >= 0 /\ v_l.0 + v_length >= 0 /\ -v_l.0 >= 0 /\ v_l.0 >= 0 ]
		(?, 1)    eval_BF_ofb64_encrypt_bb1_in(v_79, v_l.0, v_length) -> Com_1(eval_BF_ofb64_encrypt_64(v_l.0 - 1, v_l.0, v_length)) [ -v_l.0 + v_length >= 0 /\ v_l.0 > 0 ]
		(?, 1)    eval_BF_ofb64_encrypt_bb1_in(v_79, v_l.0, v_length) -> Com_1(eval_BF_ofb64_encrypt_bb4_in(v_l.0 - 1, v_l.0, v_length)) [ -v_l.0 + v_length >= 0 /\ v_l.0 < 0 ]
		(?, 1)    eval_BF_ofb64_encrypt_bb1_in(v_79, v_l.0, v_length) -> Com_1(eval_BF_ofb64_encrypt_bb4_in(v_l.0 - 1, v_l.0, v_length)) [ -v_l.0 + v_length >= 0 /\ v_l.0 > 0 ]
		(1, 1)    eval_BF_ofb64_encrypt_bb0_in(v_79, v_l.0, v_length) -> Com_1(eval_BF_ofb64_encrypt_bb1_in(v_79, v_length, v_length))
		(1, 1)    eval_BF_ofb64_encrypt_start(v_79, v_l.0, v_length) -> Com_1(eval_BF_ofb64_encrypt_bb0_in(v_79, v_l.0, v_length))
	start location:	eval_BF_ofb64_encrypt_start
	leaf cost:	0

By chaining the transition eval_BF_ofb64_encrypt_bb1_in(v_79, v_l.0, v_length) -> Com_1(eval_BF_ofb64_encrypt_64(v_l.0 - 1, v_l.0, v_length)) [ -v_l.0 + v_length >= 0 /\ v_l.0 > 0 ] with all transitions in problem 8, the following new transition is obtained:
	eval_BF_ofb64_encrypt_bb1_in(v_79, v_l.0, v_length) -> Com_2(eval_BF_encrypt_start(v_l.0 - 1, v_l.0, v_length), eval_BF_ofb64_encrypt_65(v_l.0 - 1, v_l.0, v_length)) [ -v_l.0 + v_length >= 0 /\ v_l.0 > 0 /\ 0 >= 0 ]
We thus obtain the following problem:
9:	T:
		(?, 2)    eval_BF_ofb64_encrypt_bb1_in(v_79, v_l.0, v_length) -> Com_2(eval_BF_encrypt_start(v_l.0 - 1, v_l.0, v_length), eval_BF_ofb64_encrypt_65(v_l.0 - 1, v_l.0, v_length)) [ -v_l.0 + v_length >= 0 /\ v_l.0 > 0 /\ 0 >= 0 ]
		(?, 2)    eval_BF_ofb64_encrypt_bb1_in(v_79, v_l.0, v_length) -> Com_2(eval_BF_encrypt_start(v_l.0 - 1, v_l.0, v_length), eval_BF_ofb64_encrypt_65(v_l.0 - 1, v_l.0, v_length)) [ -v_l.0 + v_length >= 0 /\ v_l.0 < 0 /\ 0 >= 0 ]
		(?, 2)    eval_BF_ofb64_encrypt_65(v_79, v_l.0, v_length) -> Com_1(eval_BF_ofb64_encrypt_bb1_in(v_79, v_79, v_length)) [ -v_l.0 + v_length >= 0 /\ -v_79 + v_length - 1 >= 0 /\ v_79 - v_l.0 + 1 >= 0 /\ -v_79 + v_l.0 - 1 >= 0 ]
		(?, 1)    eval_BF_ofb64_encrypt_64(v_79, v_l.0, v_length) -> Com_2(eval_BF_encrypt_start(v_79, v_l.0, v_length), eval_BF_ofb64_encrypt_65(v_79, v_l.0, v_length)) [ -v_l.0 + v_length >= 0 /\ -v_79 + v_length - 1 >= 0 /\ v_79 - v_l.0 + 1 >= 0 /\ -v_79 + v_l.0 - 1 >= 0 ]
		(?, 1)    eval_BF_ofb64_encrypt_bb4_in(v_79, v_l.0, v_length) -> Com_1(eval_BF_ofb64_encrypt_bb1_in(v_79, v_79, v_length)) [ -v_l.0 + v_length >= 0 /\ -v_79 + v_length - 1 >= 0 /\ v_79 - v_l.0 + 1 >= 0 /\ -v_79 + v_l.0 - 1 >= 0 ]
		(2, 2)    eval_BF_ofb64_encrypt_bb1_in(v_79, v_l.0, v_length) -> Com_1(eval_BF_ofb64_encrypt_stop(v_79, v_l.0, v_length)) [ -v_l.0 + v_length >= 0 /\ v_l.0 = 0 /\ v_length >= 0 /\ v_l.0 + v_length >= 0 /\ -v_l.0 >= 0 /\ v_l.0 >= 0 ]
		(?, 1)    eval_BF_ofb64_encrypt_bb1_in(v_79, v_l.0, v_length) -> Com_1(eval_BF_ofb64_encrypt_bb4_in(v_l.0 - 1, v_l.0, v_length)) [ -v_l.0 + v_length >= 0 /\ v_l.0 < 0 ]
		(?, 1)    eval_BF_ofb64_encrypt_bb1_in(v_79, v_l.0, v_length) -> Com_1(eval_BF_ofb64_encrypt_bb4_in(v_l.0 - 1, v_l.0, v_length)) [ -v_l.0 + v_length >= 0 /\ v_l.0 > 0 ]
		(1, 1)    eval_BF_ofb64_encrypt_bb0_in(v_79, v_l.0, v_length) -> Com_1(eval_BF_ofb64_encrypt_bb1_in(v_79, v_length, v_length))
		(1, 1)    eval_BF_ofb64_encrypt_start(v_79, v_l.0, v_length) -> Com_1(eval_BF_ofb64_encrypt_bb0_in(v_79, v_l.0, v_length))
	start location:	eval_BF_ofb64_encrypt_start
	leaf cost:	0

Testing for reachability in the complexity graph removes the following transition from problem 9:
	eval_BF_ofb64_encrypt_64(v_79, v_l.0, v_length) -> Com_2(eval_BF_encrypt_start(v_79, v_l.0, v_length), eval_BF_ofb64_encrypt_65(v_79, v_l.0, v_length)) [ -v_l.0 + v_length >= 0 /\ -v_79 + v_length - 1 >= 0 /\ v_79 - v_l.0 + 1 >= 0 /\ -v_79 + v_l.0 - 1 >= 0 ]
We thus obtain the following problem:
10:	T:
		(?, 2)    eval_BF_ofb64_encrypt_65(v_79, v_l.0, v_length) -> Com_1(eval_BF_ofb64_encrypt_bb1_in(v_79, v_79, v_length)) [ -v_l.0 + v_length >= 0 /\ -v_79 + v_length - 1 >= 0 /\ v_79 - v_l.0 + 1 >= 0 /\ -v_79 + v_l.0 - 1 >= 0 ]
		(?, 1)    eval_BF_ofb64_encrypt_bb4_in(v_79, v_l.0, v_length) -> Com_1(eval_BF_ofb64_encrypt_bb1_in(v_79, v_79, v_length)) [ -v_l.0 + v_length >= 0 /\ -v_79 + v_length - 1 >= 0 /\ v_79 - v_l.0 + 1 >= 0 /\ -v_79 + v_l.0 - 1 >= 0 ]
		(?, 2)    eval_BF_ofb64_encrypt_bb1_in(v_79, v_l.0, v_length) -> Com_2(eval_BF_encrypt_start(v_l.0 - 1, v_l.0, v_length), eval_BF_ofb64_encrypt_65(v_l.0 - 1, v_l.0, v_length)) [ -v_l.0 + v_length >= 0 /\ v_l.0 > 0 /\ 0 >= 0 ]
		(?, 2)    eval_BF_ofb64_encrypt_bb1_in(v_79, v_l.0, v_length) -> Com_2(eval_BF_encrypt_start(v_l.0 - 1, v_l.0, v_length), eval_BF_ofb64_encrypt_65(v_l.0 - 1, v_l.0, v_length)) [ -v_l.0 + v_length >= 0 /\ v_l.0 < 0 /\ 0 >= 0 ]
		(2, 2)    eval_BF_ofb64_encrypt_bb1_in(v_79, v_l.0, v_length) -> Com_1(eval_BF_ofb64_encrypt_stop(v_79, v_l.0, v_length)) [ -v_l.0 + v_length >= 0 /\ v_l.0 = 0 /\ v_length >= 0 /\ v_l.0 + v_length >= 0 /\ -v_l.0 >= 0 /\ v_l.0 >= 0 ]
		(?, 1)    eval_BF_ofb64_encrypt_bb1_in(v_79, v_l.0, v_length) -> Com_1(eval_BF_ofb64_encrypt_bb4_in(v_l.0 - 1, v_l.0, v_length)) [ -v_l.0 + v_length >= 0 /\ v_l.0 < 0 ]
		(?, 1)    eval_BF_ofb64_encrypt_bb1_in(v_79, v_l.0, v_length) -> Com_1(eval_BF_ofb64_encrypt_bb4_in(v_l.0 - 1, v_l.0, v_length)) [ -v_l.0 + v_length >= 0 /\ v_l.0 > 0 ]
		(1, 1)    eval_BF_ofb64_encrypt_bb0_in(v_79, v_l.0, v_length) -> Com_1(eval_BF_ofb64_encrypt_bb1_in(v_79, v_length, v_length))
		(1, 1)    eval_BF_ofb64_encrypt_start(v_79, v_l.0, v_length) -> Com_1(eval_BF_ofb64_encrypt_bb0_in(v_79, v_l.0, v_length))
	start location:	eval_BF_ofb64_encrypt_start
	leaf cost:	0

By chaining the transition eval_BF_ofb64_encrypt_bb1_in(v_79, v_l.0, v_length) -> Com_1(eval_BF_ofb64_encrypt_bb4_in(v_l.0 - 1, v_l.0, v_length)) [ -v_l.0 + v_length >= 0 /\ v_l.0 < 0 ] with all transitions in problem 10, the following new transition is obtained:
	eval_BF_ofb64_encrypt_bb1_in(v_79, v_l.0, v_length) -> Com_1(eval_BF_ofb64_encrypt_bb1_in(v_l.0 - 1, v_l.0 - 1, v_length)) [ -v_l.0 + v_length >= 0 /\ v_l.0 < 0 /\ 0 >= 0 ]
We thus obtain the following problem:
11:	T:
		(?, 2)    eval_BF_ofb64_encrypt_bb1_in(v_79, v_l.0, v_length) -> Com_1(eval_BF_ofb64_encrypt_bb1_in(v_l.0 - 1, v_l.0 - 1, v_length)) [ -v_l.0 + v_length >= 0 /\ v_l.0 < 0 /\ 0 >= 0 ]
		(?, 2)    eval_BF_ofb64_encrypt_65(v_79, v_l.0, v_length) -> Com_1(eval_BF_ofb64_encrypt_bb1_in(v_79, v_79, v_length)) [ -v_l.0 + v_length >= 0 /\ -v_79 + v_length - 1 >= 0 /\ v_79 - v_l.0 + 1 >= 0 /\ -v_79 + v_l.0 - 1 >= 0 ]
		(?, 1)    eval_BF_ofb64_encrypt_bb4_in(v_79, v_l.0, v_length) -> Com_1(eval_BF_ofb64_encrypt_bb1_in(v_79, v_79, v_length)) [ -v_l.0 + v_length >= 0 /\ -v_79 + v_length - 1 >= 0 /\ v_79 - v_l.0 + 1 >= 0 /\ -v_79 + v_l.0 - 1 >= 0 ]
		(?, 2)    eval_BF_ofb64_encrypt_bb1_in(v_79, v_l.0, v_length) -> Com_2(eval_BF_encrypt_start(v_l.0 - 1, v_l.0, v_length), eval_BF_ofb64_encrypt_65(v_l.0 - 1, v_l.0, v_length)) [ -v_l.0 + v_length >= 0 /\ v_l.0 > 0 /\ 0 >= 0 ]
		(?, 2)    eval_BF_ofb64_encrypt_bb1_in(v_79, v_l.0, v_length) -> Com_2(eval_BF_encrypt_start(v_l.0 - 1, v_l.0, v_length), eval_BF_ofb64_encrypt_65(v_l.0 - 1, v_l.0, v_length)) [ -v_l.0 + v_length >= 0 /\ v_l.0 < 0 /\ 0 >= 0 ]
		(2, 2)    eval_BF_ofb64_encrypt_bb1_in(v_79, v_l.0, v_length) -> Com_1(eval_BF_ofb64_encrypt_stop(v_79, v_l.0, v_length)) [ -v_l.0 + v_length >= 0 /\ v_l.0 = 0 /\ v_length >= 0 /\ v_l.0 + v_length >= 0 /\ -v_l.0 >= 0 /\ v_l.0 >= 0 ]
		(?, 1)    eval_BF_ofb64_encrypt_bb1_in(v_79, v_l.0, v_length) -> Com_1(eval_BF_ofb64_encrypt_bb4_in(v_l.0 - 1, v_l.0, v_length)) [ -v_l.0 + v_length >= 0 /\ v_l.0 > 0 ]
		(1, 1)    eval_BF_ofb64_encrypt_bb0_in(v_79, v_l.0, v_length) -> Com_1(eval_BF_ofb64_encrypt_bb1_in(v_79, v_length, v_length))
		(1, 1)    eval_BF_ofb64_encrypt_start(v_79, v_l.0, v_length) -> Com_1(eval_BF_ofb64_encrypt_bb0_in(v_79, v_l.0, v_length))
	start location:	eval_BF_ofb64_encrypt_start
	leaf cost:	0

By chaining the transition eval_BF_ofb64_encrypt_bb1_in(v_79, v_l.0, v_length) -> Com_1(eval_BF_ofb64_encrypt_bb4_in(v_l.0 - 1, v_l.0, v_length)) [ -v_l.0 + v_length >= 0 /\ v_l.0 > 0 ] with all transitions in problem 11, the following new transition is obtained:
	eval_BF_ofb64_encrypt_bb1_in(v_79, v_l.0, v_length) -> Com_1(eval_BF_ofb64_encrypt_bb1_in(v_l.0 - 1, v_l.0 - 1, v_length)) [ -v_l.0 + v_length >= 0 /\ v_l.0 > 0 /\ 0 >= 0 ]
We thus obtain the following problem:
12:	T:
		(?, 2)    eval_BF_ofb64_encrypt_bb1_in(v_79, v_l.0, v_length) -> Com_1(eval_BF_ofb64_encrypt_bb1_in(v_l.0 - 1, v_l.0 - 1, v_length)) [ -v_l.0 + v_length >= 0 /\ v_l.0 > 0 /\ 0 >= 0 ]
		(?, 2)    eval_BF_ofb64_encrypt_bb1_in(v_79, v_l.0, v_length) -> Com_1(eval_BF_ofb64_encrypt_bb1_in(v_l.0 - 1, v_l.0 - 1, v_length)) [ -v_l.0 + v_length >= 0 /\ v_l.0 < 0 /\ 0 >= 0 ]
		(?, 2)    eval_BF_ofb64_encrypt_65(v_79, v_l.0, v_length) -> Com_1(eval_BF_ofb64_encrypt_bb1_in(v_79, v_79, v_length)) [ -v_l.0 + v_length >= 0 /\ -v_79 + v_length - 1 >= 0 /\ v_79 - v_l.0 + 1 >= 0 /\ -v_79 + v_l.0 - 1 >= 0 ]
		(?, 1)    eval_BF_ofb64_encrypt_bb4_in(v_79, v_l.0, v_length) -> Com_1(eval_BF_ofb64_encrypt_bb1_in(v_79, v_79, v_length)) [ -v_l.0 + v_length >= 0 /\ -v_79 + v_length - 1 >= 0 /\ v_79 - v_l.0 + 1 >= 0 /\ -v_79 + v_l.0 - 1 >= 0 ]
		(?, 2)    eval_BF_ofb64_encrypt_bb1_in(v_79, v_l.0, v_length) -> Com_2(eval_BF_encrypt_start(v_l.0 - 1, v_l.0, v_length), eval_BF_ofb64_encrypt_65(v_l.0 - 1, v_l.0, v_length)) [ -v_l.0 + v_length >= 0 /\ v_l.0 > 0 /\ 0 >= 0 ]
		(?, 2)    eval_BF_ofb64_encrypt_bb1_in(v_79, v_l.0, v_length) -> Com_2(eval_BF_encrypt_start(v_l.0 - 1, v_l.0, v_length), eval_BF_ofb64_encrypt_65(v_l.0 - 1, v_l.0, v_length)) [ -v_l.0 + v_length >= 0 /\ v_l.0 < 0 /\ 0 >= 0 ]
		(2, 2)    eval_BF_ofb64_encrypt_bb1_in(v_79, v_l.0, v_length) -> Com_1(eval_BF_ofb64_encrypt_stop(v_79, v_l.0, v_length)) [ -v_l.0 + v_length >= 0 /\ v_l.0 = 0 /\ v_length >= 0 /\ v_l.0 + v_length >= 0 /\ -v_l.0 >= 0 /\ v_l.0 >= 0 ]
		(1, 1)    eval_BF_ofb64_encrypt_bb0_in(v_79, v_l.0, v_length) -> Com_1(eval_BF_ofb64_encrypt_bb1_in(v_79, v_length, v_length))
		(1, 1)    eval_BF_ofb64_encrypt_start(v_79, v_l.0, v_length) -> Com_1(eval_BF_ofb64_encrypt_bb0_in(v_79, v_l.0, v_length))
	start location:	eval_BF_ofb64_encrypt_start
	leaf cost:	0

Testing for reachability in the complexity graph removes the following transition from problem 12:
	eval_BF_ofb64_encrypt_bb4_in(v_79, v_l.0, v_length) -> Com_1(eval_BF_ofb64_encrypt_bb1_in(v_79, v_79, v_length)) [ -v_l.0 + v_length >= 0 /\ -v_79 + v_length - 1 >= 0 /\ v_79 - v_l.0 + 1 >= 0 /\ -v_79 + v_l.0 - 1 >= 0 ]
We thus obtain the following problem:
13:	T:
		(?, 2)    eval_BF_ofb64_encrypt_65(v_79, v_l.0, v_length) -> Com_1(eval_BF_ofb64_encrypt_bb1_in(v_79, v_79, v_length)) [ -v_l.0 + v_length >= 0 /\ -v_79 + v_length - 1 >= 0 /\ v_79 - v_l.0 + 1 >= 0 /\ -v_79 + v_l.0 - 1 >= 0 ]
		(?, 2)    eval_BF_ofb64_encrypt_bb1_in(v_79, v_l.0, v_length) -> Com_1(eval_BF_ofb64_encrypt_bb1_in(v_l.0 - 1, v_l.0 - 1, v_length)) [ -v_l.0 + v_length >= 0 /\ v_l.0 > 0 /\ 0 >= 0 ]
		(?, 2)    eval_BF_ofb64_encrypt_bb1_in(v_79, v_l.0, v_length) -> Com_1(eval_BF_ofb64_encrypt_bb1_in(v_l.0 - 1, v_l.0 - 1, v_length)) [ -v_l.0 + v_length >= 0 /\ v_l.0 < 0 /\ 0 >= 0 ]
		(?, 2)    eval_BF_ofb64_encrypt_bb1_in(v_79, v_l.0, v_length) -> Com_2(eval_BF_encrypt_start(v_l.0 - 1, v_l.0, v_length), eval_BF_ofb64_encrypt_65(v_l.0 - 1, v_l.0, v_length)) [ -v_l.0 + v_length >= 0 /\ v_l.0 > 0 /\ 0 >= 0 ]
		(?, 2)    eval_BF_ofb64_encrypt_bb1_in(v_79, v_l.0, v_length) -> Com_2(eval_BF_encrypt_start(v_l.0 - 1, v_l.0, v_length), eval_BF_ofb64_encrypt_65(v_l.0 - 1, v_l.0, v_length)) [ -v_l.0 + v_length >= 0 /\ v_l.0 < 0 /\ 0 >= 0 ]
		(2, 2)    eval_BF_ofb64_encrypt_bb1_in(v_79, v_l.0, v_length) -> Com_1(eval_BF_ofb64_encrypt_stop(v_79, v_l.0, v_length)) [ -v_l.0 + v_length >= 0 /\ v_l.0 = 0 /\ v_length >= 0 /\ v_l.0 + v_length >= 0 /\ -v_l.0 >= 0 /\ v_l.0 >= 0 ]
		(1, 1)    eval_BF_ofb64_encrypt_bb0_in(v_79, v_l.0, v_length) -> Com_1(eval_BF_ofb64_encrypt_bb1_in(v_79, v_length, v_length))
		(1, 1)    eval_BF_ofb64_encrypt_start(v_79, v_l.0, v_length) -> Com_1(eval_BF_ofb64_encrypt_bb0_in(v_79, v_l.0, v_length))
	start location:	eval_BF_ofb64_encrypt_start
	leaf cost:	0

By chaining the transition eval_BF_ofb64_encrypt_start(v_79, v_l.0, v_length) -> Com_1(eval_BF_ofb64_encrypt_bb0_in(v_79, v_l.0, v_length)) with all transitions in problem 13, the following new transition is obtained:
	eval_BF_ofb64_encrypt_start(v_79, v_l.0, v_length) -> Com_1(eval_BF_ofb64_encrypt_bb1_in(v_79, v_length, v_length))
We thus obtain the following problem:
14:	T:
		(1, 2)    eval_BF_ofb64_encrypt_start(v_79, v_l.0, v_length) -> Com_1(eval_BF_ofb64_encrypt_bb1_in(v_79, v_length, v_length))
		(?, 2)    eval_BF_ofb64_encrypt_65(v_79, v_l.0, v_length) -> Com_1(eval_BF_ofb64_encrypt_bb1_in(v_79, v_79, v_length)) [ -v_l.0 + v_length >= 0 /\ -v_79 + v_length - 1 >= 0 /\ v_79 - v_l.0 + 1 >= 0 /\ -v_79 + v_l.0 - 1 >= 0 ]
		(?, 2)    eval_BF_ofb64_encrypt_bb1_in(v_79, v_l.0, v_length) -> Com_1(eval_BF_ofb64_encrypt_bb1_in(v_l.0 - 1, v_l.0 - 1, v_length)) [ -v_l.0 + v_length >= 0 /\ v_l.0 > 0 /\ 0 >= 0 ]
		(?, 2)    eval_BF_ofb64_encrypt_bb1_in(v_79, v_l.0, v_length) -> Com_1(eval_BF_ofb64_encrypt_bb1_in(v_l.0 - 1, v_l.0 - 1, v_length)) [ -v_l.0 + v_length >= 0 /\ v_l.0 < 0 /\ 0 >= 0 ]
		(?, 2)    eval_BF_ofb64_encrypt_bb1_in(v_79, v_l.0, v_length) -> Com_2(eval_BF_encrypt_start(v_l.0 - 1, v_l.0, v_length), eval_BF_ofb64_encrypt_65(v_l.0 - 1, v_l.0, v_length)) [ -v_l.0 + v_length >= 0 /\ v_l.0 > 0 /\ 0 >= 0 ]
		(?, 2)    eval_BF_ofb64_encrypt_bb1_in(v_79, v_l.0, v_length) -> Com_2(eval_BF_encrypt_start(v_l.0 - 1, v_l.0, v_length), eval_BF_ofb64_encrypt_65(v_l.0 - 1, v_l.0, v_length)) [ -v_l.0 + v_length >= 0 /\ v_l.0 < 0 /\ 0 >= 0 ]
		(2, 2)    eval_BF_ofb64_encrypt_bb1_in(v_79, v_l.0, v_length) -> Com_1(eval_BF_ofb64_encrypt_stop(v_79, v_l.0, v_length)) [ -v_l.0 + v_length >= 0 /\ v_l.0 = 0 /\ v_length >= 0 /\ v_l.0 + v_length >= 0 /\ -v_l.0 >= 0 /\ v_l.0 >= 0 ]
		(1, 1)    eval_BF_ofb64_encrypt_bb0_in(v_79, v_l.0, v_length) -> Com_1(eval_BF_ofb64_encrypt_bb1_in(v_79, v_length, v_length))
	start location:	eval_BF_ofb64_encrypt_start
	leaf cost:	0

Testing for reachability in the complexity graph removes the following transition from problem 14:
	eval_BF_ofb64_encrypt_bb0_in(v_79, v_l.0, v_length) -> Com_1(eval_BF_ofb64_encrypt_bb1_in(v_79, v_length, v_length))
We thus obtain the following problem:
15:	T:
		(?, 2)    eval_BF_ofb64_encrypt_65(v_79, v_l.0, v_length) -> Com_1(eval_BF_ofb64_encrypt_bb1_in(v_79, v_79, v_length)) [ -v_l.0 + v_length >= 0 /\ -v_79 + v_length - 1 >= 0 /\ v_79 - v_l.0 + 1 >= 0 /\ -v_79 + v_l.0 - 1 >= 0 ]
		(?, 2)    eval_BF_ofb64_encrypt_bb1_in(v_79, v_l.0, v_length) -> Com_1(eval_BF_ofb64_encrypt_bb1_in(v_l.0 - 1, v_l.0 - 1, v_length)) [ -v_l.0 + v_length >= 0 /\ v_l.0 > 0 /\ 0 >= 0 ]
		(?, 2)    eval_BF_ofb64_encrypt_bb1_in(v_79, v_l.0, v_length) -> Com_1(eval_BF_ofb64_encrypt_bb1_in(v_l.0 - 1, v_l.0 - 1, v_length)) [ -v_l.0 + v_length >= 0 /\ v_l.0 < 0 /\ 0 >= 0 ]
		(?, 2)    eval_BF_ofb64_encrypt_bb1_in(v_79, v_l.0, v_length) -> Com_2(eval_BF_encrypt_start(v_l.0 - 1, v_l.0, v_length), eval_BF_ofb64_encrypt_65(v_l.0 - 1, v_l.0, v_length)) [ -v_l.0 + v_length >= 0 /\ v_l.0 > 0 /\ 0 >= 0 ]
		(?, 2)    eval_BF_ofb64_encrypt_bb1_in(v_79, v_l.0, v_length) -> Com_2(eval_BF_encrypt_start(v_l.0 - 1, v_l.0, v_length), eval_BF_ofb64_encrypt_65(v_l.0 - 1, v_l.0, v_length)) [ -v_l.0 + v_length >= 0 /\ v_l.0 < 0 /\ 0 >= 0 ]
		(2, 2)    eval_BF_ofb64_encrypt_bb1_in(v_79, v_l.0, v_length) -> Com_1(eval_BF_ofb64_encrypt_stop(v_79, v_l.0, v_length)) [ -v_l.0 + v_length >= 0 /\ v_l.0 = 0 /\ v_length >= 0 /\ v_l.0 + v_length >= 0 /\ -v_l.0 >= 0 /\ v_l.0 >= 0 ]
		(1, 2)    eval_BF_ofb64_encrypt_start(v_79, v_l.0, v_length) -> Com_1(eval_BF_ofb64_encrypt_bb1_in(v_79, v_length, v_length))
	start location:	eval_BF_ofb64_encrypt_start
	leaf cost:	0

A separated polynomial rank function for exponential bounds with
	Pol(eval_BF_ofb64_encrypt_65) = V_2 - 1
	Pol(eval_BF_ofb64_encrypt_bb1_in) = V_2
	Pol(eval_BF_encrypt_start) = V_2 - 1
	Pol(eval_BF_ofb64_encrypt_stop) = V_2
	Pol(eval_BF_ofb64_encrypt_start) = V_3
orients all transitions weakly and the transitions
	eval_BF_ofb64_encrypt_bb1_in(v_79, v_l.0, v_length) -> Com_2(eval_BF_encrypt_start(v_l.0 - 1, v_l.0, v_length), eval_BF_ofb64_encrypt_65(v_l.0 - 1, v_l.0, v_length)) [ -v_l.0 + v_length >= 0 /\ v_l.0 > 0 /\ 0 >= 0 ]
	eval_BF_ofb64_encrypt_bb1_in(v_79, v_l.0, v_length) -> Com_1(eval_BF_ofb64_encrypt_bb1_in(v_l.0 - 1, v_l.0 - 1, v_length)) [ -v_l.0 + v_length >= 0 /\ v_l.0 > 0 /\ 0 >= 0 ]
strictly and produces the following problem:
16:	T:
		(?, 2)                       eval_BF_ofb64_encrypt_65(v_79, v_l.0, v_length) -> Com_1(eval_BF_ofb64_encrypt_bb1_in(v_79, v_79, v_length)) [ -v_l.0 + v_length >= 0 /\ -v_79 + v_length - 1 >= 0 /\ v_79 - v_l.0 + 1 >= 0 /\ -v_79 + v_l.0 - 1 >= 0 ]
		(pow(2, v_length + 1), 2)    eval_BF_ofb64_encrypt_bb1_in(v_79, v_l.0, v_length) -> Com_1(eval_BF_ofb64_encrypt_bb1_in(v_l.0 - 1, v_l.0 - 1, v_length)) [ -v_l.0 + v_length >= 0 /\ v_l.0 > 0 /\ 0 >= 0 ]
		(?, 2)                       eval_BF_ofb64_encrypt_bb1_in(v_79, v_l.0, v_length) -> Com_1(eval_BF_ofb64_encrypt_bb1_in(v_l.0 - 1, v_l.0 - 1, v_length)) [ -v_l.0 + v_length >= 0 /\ v_l.0 < 0 /\ 0 >= 0 ]
		(pow(2, v_length + 1), 2)    eval_BF_ofb64_encrypt_bb1_in(v_79, v_l.0, v_length) -> Com_2(eval_BF_encrypt_start(v_l.0 - 1, v_l.0, v_length), eval_BF_ofb64_encrypt_65(v_l.0 - 1, v_l.0, v_length)) [ -v_l.0 + v_length >= 0 /\ v_l.0 > 0 /\ 0 >= 0 ]
		(?, 2)                       eval_BF_ofb64_encrypt_bb1_in(v_79, v_l.0, v_length) -> Com_2(eval_BF_encrypt_start(v_l.0 - 1, v_l.0, v_length), eval_BF_ofb64_encrypt_65(v_l.0 - 1, v_l.0, v_length)) [ -v_l.0 + v_length >= 0 /\ v_l.0 < 0 /\ 0 >= 0 ]
		(2, 2)                       eval_BF_ofb64_encrypt_bb1_in(v_79, v_l.0, v_length) -> Com_1(eval_BF_ofb64_encrypt_stop(v_79, v_l.0, v_length)) [ -v_l.0 + v_length >= 0 /\ v_l.0 = 0 /\ v_length >= 0 /\ v_l.0 + v_length >= 0 /\ -v_l.0 >= 0 /\ v_l.0 >= 0 ]
		(1, 2)                       eval_BF_ofb64_encrypt_start(v_79, v_l.0, v_length) -> Com_1(eval_BF_ofb64_encrypt_bb1_in(v_79, v_length, v_length))
	start location:	eval_BF_ofb64_encrypt_start
	leaf cost:	0

Complexity upper bound ?

Time: 1.584 sec (SMT: 1.324 sec)

YES(?, 9*v_max_code + 12)

Initial complexity problem:
1:	T:
		(1, 1)    eval_scan_tree_start(v_max_code, v_n.0) -> eval_scan_tree_bb0_in(v_max_code, v_n.0)
		(?, 1)    eval_scan_tree_bb0_in(v_max_code, v_n.0) -> eval_scan_tree_bb1_in(v_max_code, 0)
		(?, 1)    eval_scan_tree_bb1_in(v_max_code, v_n.0) -> eval_scan_tree_bb14_in(v_max_code, v_n.0) [ v_n.0 <= v_max_code ]
		(?, 1)    eval_scan_tree_bb1_in(v_max_code, v_n.0) -> eval_scan_tree_bb12_in(v_max_code, v_n.0) [ v_n.0 <= v_max_code ]
		(?, 1)    eval_scan_tree_bb1_in(v_max_code, v_n.0) -> eval_scan_tree_bb8_in(v_max_code, v_n.0) [ v_n.0 <= v_max_code ]
		(?, 1)    eval_scan_tree_bb1_in(v_max_code, v_n.0) -> eval_scan_tree_stop(v_max_code, v_n.0) [ v_n.0 > v_max_code ]
		(?, 1)    eval_scan_tree_bb8_in(v_max_code, v_n.0) -> eval_scan_tree_bb12_in(v_max_code, v_n.0)
		(?, 1)    eval_scan_tree_bb12_in(v_max_code, v_n.0) -> eval_scan_tree_bb14_in(v_max_code, v_n.0)
		(?, 1)    eval_scan_tree_bb14_in(v_max_code, v_n.0) -> eval_scan_tree_bb1_in(v_max_code, v_n.0 + 1)
	start location:	eval_scan_tree_start
	leaf cost:	0

Repeatedly removing leaves of the complexity graph in problem 1 produces the following problem:
2:	T:
		(1, 1)    eval_scan_tree_start(v_max_code, v_n.0) -> eval_scan_tree_bb0_in(v_max_code, v_n.0)
		(?, 1)    eval_scan_tree_bb0_in(v_max_code, v_n.0) -> eval_scan_tree_bb1_in(v_max_code, 0)
		(?, 1)    eval_scan_tree_bb1_in(v_max_code, v_n.0) -> eval_scan_tree_bb14_in(v_max_code, v_n.0) [ v_n.0 <= v_max_code ]
		(?, 1)    eval_scan_tree_bb1_in(v_max_code, v_n.0) -> eval_scan_tree_bb12_in(v_max_code, v_n.0) [ v_n.0 <= v_max_code ]
		(?, 1)    eval_scan_tree_bb1_in(v_max_code, v_n.0) -> eval_scan_tree_bb8_in(v_max_code, v_n.0) [ v_n.0 <= v_max_code ]
		(?, 1)    eval_scan_tree_bb8_in(v_max_code, v_n.0) -> eval_scan_tree_bb12_in(v_max_code, v_n.0)
		(?, 1)    eval_scan_tree_bb12_in(v_max_code, v_n.0) -> eval_scan_tree_bb14_in(v_max_code, v_n.0)
		(?, 1)    eval_scan_tree_bb14_in(v_max_code, v_n.0) -> eval_scan_tree_bb1_in(v_max_code, v_n.0 + 1)
	start location:	eval_scan_tree_start
	leaf cost:	1

Repeatedly propagating knowledge in problem 2 produces the following problem:
3:	T:
		(1, 1)    eval_scan_tree_start(v_max_code, v_n.0) -> eval_scan_tree_bb0_in(v_max_code, v_n.0)
		(1, 1)    eval_scan_tree_bb0_in(v_max_code, v_n.0) -> eval_scan_tree_bb1_in(v_max_code, 0)
		(?, 1)    eval_scan_tree_bb1_in(v_max_code, v_n.0) -> eval_scan_tree_bb14_in(v_max_code, v_n.0) [ v_n.0 <= v_max_code ]
		(?, 1)    eval_scan_tree_bb1_in(v_max_code, v_n.0) -> eval_scan_tree_bb12_in(v_max_code, v_n.0) [ v_n.0 <= v_max_code ]
		(?, 1)    eval_scan_tree_bb1_in(v_max_code, v_n.0) -> eval_scan_tree_bb8_in(v_max_code, v_n.0) [ v_n.0 <= v_max_code ]
		(?, 1)    eval_scan_tree_bb8_in(v_max_code, v_n.0) -> eval_scan_tree_bb12_in(v_max_code, v_n.0)
		(?, 1)    eval_scan_tree_bb12_in(v_max_code, v_n.0) -> eval_scan_tree_bb14_in(v_max_code, v_n.0)
		(?, 1)    eval_scan_tree_bb14_in(v_max_code, v_n.0) -> eval_scan_tree_bb1_in(v_max_code, v_n.0 + 1)
	start location:	eval_scan_tree_start
	leaf cost:	1

A polynomial rank function with
	Pol(eval_scan_tree_start) = V_1 + 1
	Pol(eval_scan_tree_bb0_in) = V_1 + 1
	Pol(eval_scan_tree_bb1_in) = V_1 - V_2 + 1
	Pol(eval_scan_tree_bb14_in) = V_1 - V_2
	Pol(eval_scan_tree_bb12_in) = V_1 - V_2
	Pol(eval_scan_tree_bb8_in) = V_1 - V_2
orients all transitions weakly and the transitions
	eval_scan_tree_bb1_in(v_max_code, v_n.0) -> eval_scan_tree_bb8_in(v_max_code, v_n.0) [ v_n.0 <= v_max_code ]
	eval_scan_tree_bb1_in(v_max_code, v_n.0) -> eval_scan_tree_bb14_in(v_max_code, v_n.0) [ v_n.0 <= v_max_code ]
	eval_scan_tree_bb1_in(v_max_code, v_n.0) -> eval_scan_tree_bb12_in(v_max_code, v_n.0) [ v_n.0 <= v_max_code ]
strictly and produces the following problem:
4:	T:
		(1, 1)                 eval_scan_tree_start(v_max_code, v_n.0) -> eval_scan_tree_bb0_in(v_max_code, v_n.0)
		(1, 1)                 eval_scan_tree_bb0_in(v_max_code, v_n.0) -> eval_scan_tree_bb1_in(v_max_code, 0)
		(v_max_code + 1, 1)    eval_scan_tree_bb1_in(v_max_code, v_n.0) -> eval_scan_tree_bb14_in(v_max_code, v_n.0) [ v_n.0 <= v_max_code ]
		(v_max_code + 1, 1)    eval_scan_tree_bb1_in(v_max_code, v_n.0) -> eval_scan_tree_bb12_in(v_max_code, v_n.0) [ v_n.0 <= v_max_code ]
		(v_max_code + 1, 1)    eval_scan_tree_bb1_in(v_max_code, v_n.0) -> eval_scan_tree_bb8_in(v_max_code, v_n.0) [ v_n.0 <= v_max_code ]
		(?, 1)                 eval_scan_tree_bb8_in(v_max_code, v_n.0) -> eval_scan_tree_bb12_in(v_max_code, v_n.0)
		(?, 1)                 eval_scan_tree_bb12_in(v_max_code, v_n.0) -> eval_scan_tree_bb14_in(v_max_code, v_n.0)
		(?, 1)                 eval_scan_tree_bb14_in(v_max_code, v_n.0) -> eval_scan_tree_bb1_in(v_max_code, v_n.0 + 1)
	start location:	eval_scan_tree_start
	leaf cost:	1

Repeatedly propagating knowledge in problem 4 produces the following problem:
5:	T:
		(1, 1)                   eval_scan_tree_start(v_max_code, v_n.0) -> eval_scan_tree_bb0_in(v_max_code, v_n.0)
		(1, 1)                   eval_scan_tree_bb0_in(v_max_code, v_n.0) -> eval_scan_tree_bb1_in(v_max_code, 0)
		(v_max_code + 1, 1)      eval_scan_tree_bb1_in(v_max_code, v_n.0) -> eval_scan_tree_bb14_in(v_max_code, v_n.0) [ v_n.0 <= v_max_code ]
		(v_max_code + 1, 1)      eval_scan_tree_bb1_in(v_max_code, v_n.0) -> eval_scan_tree_bb12_in(v_max_code, v_n.0) [ v_n.0 <= v_max_code ]
		(v_max_code + 1, 1)      eval_scan_tree_bb1_in(v_max_code, v_n.0) -> eval_scan_tree_bb8_in(v_max_code, v_n.0) [ v_n.0 <= v_max_code ]
		(v_max_code + 1, 1)      eval_scan_tree_bb8_in(v_max_code, v_n.0) -> eval_scan_tree_bb12_in(v_max_code, v_n.0)
		(2*v_max_code + 2, 1)    eval_scan_tree_bb12_in(v_max_code, v_n.0) -> eval_scan_tree_bb14_in(v_max_code, v_n.0)
		(3*v_max_code + 3, 1)    eval_scan_tree_bb14_in(v_max_code, v_n.0) -> eval_scan_tree_bb1_in(v_max_code, v_n.0 + 1)
	start location:	eval_scan_tree_start
	leaf cost:	1

Complexity upper bound 9*v_max_code + 12

Time: 0.099 sec (SMT: 0.087 sec)

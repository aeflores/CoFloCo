MAYBE

Initial complexity problem:
1:	T:
		(1, 1)    eval_PackBitsEncodeChunk_start(v_.02, v_2, v_cc, v_s) -> Com_1(eval_PackBitsEncodeChunk_bb0_in(v_.02, v_2, v_cc, v_s))
		(?, 1)    eval_PackBitsEncodeChunk_bb0_in(v_.02, v_2, v_cc, v_s) -> Com_1(eval_PackBitsEncodeChunk_bb2_in(v_cc, nondef.0, v_cc, v_s))
		(?, 1)    eval_PackBitsEncodeChunk_bb0_in(v_.02, v_2, v_cc, v_s) -> Com_1(eval_PackBitsEncodeChunk_10(v_.02, v_2, v_cc, v_s))
		(?, 1)    eval_PackBitsEncodeChunk_bb2_in(v_.02, v_2, v_cc, v_s) -> Com_1(eval_PackBitsEncodeChunk_6(v_.02, v_2, v_cc, v_s)) [ v_.02 > 0 ]
		(?, 1)    eval_PackBitsEncodeChunk_bb2_in(v_.02, v_2, v_cc, v_s) -> Com_1(eval_PackBitsEncodeChunk_bb5_in(v_.02, v_2, v_cc, v_s)) [ v_.02 <= 0 ]
		(?, 1)    eval_PackBitsEncodeChunk_6(v_.02, v_2, v_cc, v_s) -> Com_2(eval_PackBitsEncode_start(v_.02, v_2, v_cc, v_s), eval_PackBitsEncodeChunk_7(v_.02, v_2, v_cc, v_s))
		(?, 1)    eval_PackBitsEncodeChunk_7(v_.02, v_2, v_cc, v_s) -> Com_1(eval_PackBitsEncodeChunk_bb5_in(v_.02, v_2, v_cc, v_s))
		(?, 1)    eval_PackBitsEncodeChunk_7(v_.02, v_2, v_cc, v_s) -> Com_1(eval_PackBitsEncodeChunk_bb2_in(v_.02 - v_2, v_2, v_cc, v_s))
		(?, 1)    eval_PackBitsEncodeChunk_bb5_in(v_.02, v_2, v_cc, v_s) -> Com_1(eval_PackBitsEncodeChunk_stop(v_.02, v_2, v_cc, v_s))
		(?, 1)    eval_PackBitsEncodeChunk_10(v_.02, v_2, v_cc, v_s) -> Com_2(eval___assert_fail_start(v_.02, v_2, v_cc, v_s), eval_PackBitsEncodeChunk_11(v_.02, v_2, v_cc, v_s))
		(?, 1)    eval_PackBitsEncodeChunk_11(v_.02, v_2, v_cc, v_s) -> Com_1(eval_PackBitsEncodeChunk_stop(v_.02, v_2, v_cc, v_s))
	start location:	eval_PackBitsEncodeChunk_start
	leaf cost:	0

Slicing away variables that do not contribute to conditions from problem 1 leaves variables [v_.02, v_2, v_cc].
We thus obtain the following problem:
2:	T:
		(?, 1)    eval_PackBitsEncodeChunk_11(v_.02, v_2, v_cc) -> Com_1(eval_PackBitsEncodeChunk_stop(v_.02, v_2, v_cc))
		(?, 1)    eval_PackBitsEncodeChunk_10(v_.02, v_2, v_cc) -> Com_2(eval___assert_fail_start(v_.02, v_2, v_cc), eval_PackBitsEncodeChunk_11(v_.02, v_2, v_cc))
		(?, 1)    eval_PackBitsEncodeChunk_bb5_in(v_.02, v_2, v_cc) -> Com_1(eval_PackBitsEncodeChunk_stop(v_.02, v_2, v_cc))
		(?, 1)    eval_PackBitsEncodeChunk_7(v_.02, v_2, v_cc) -> Com_1(eval_PackBitsEncodeChunk_bb2_in(v_.02 - v_2, v_2, v_cc))
		(?, 1)    eval_PackBitsEncodeChunk_7(v_.02, v_2, v_cc) -> Com_1(eval_PackBitsEncodeChunk_bb5_in(v_.02, v_2, v_cc))
		(?, 1)    eval_PackBitsEncodeChunk_6(v_.02, v_2, v_cc) -> Com_2(eval_PackBitsEncode_start(v_.02, v_2, v_cc), eval_PackBitsEncodeChunk_7(v_.02, v_2, v_cc))
		(?, 1)    eval_PackBitsEncodeChunk_bb2_in(v_.02, v_2, v_cc) -> Com_1(eval_PackBitsEncodeChunk_bb5_in(v_.02, v_2, v_cc)) [ v_.02 <= 0 ]
		(?, 1)    eval_PackBitsEncodeChunk_bb2_in(v_.02, v_2, v_cc) -> Com_1(eval_PackBitsEncodeChunk_6(v_.02, v_2, v_cc)) [ v_.02 > 0 ]
		(?, 1)    eval_PackBitsEncodeChunk_bb0_in(v_.02, v_2, v_cc) -> Com_1(eval_PackBitsEncodeChunk_10(v_.02, v_2, v_cc))
		(?, 1)    eval_PackBitsEncodeChunk_bb0_in(v_.02, v_2, v_cc) -> Com_1(eval_PackBitsEncodeChunk_bb2_in(v_cc, nondef.0, v_cc))
		(1, 1)    eval_PackBitsEncodeChunk_start(v_.02, v_2, v_cc) -> Com_1(eval_PackBitsEncodeChunk_bb0_in(v_.02, v_2, v_cc))
	start location:	eval_PackBitsEncodeChunk_start
	leaf cost:	0

Repeatedly propagating knowledge in problem 2 produces the following problem:
3:	T:
		(1, 1)    eval_PackBitsEncodeChunk_11(v_.02, v_2, v_cc) -> Com_1(eval_PackBitsEncodeChunk_stop(v_.02, v_2, v_cc))
		(1, 1)    eval_PackBitsEncodeChunk_10(v_.02, v_2, v_cc) -> Com_2(eval___assert_fail_start(v_.02, v_2, v_cc), eval_PackBitsEncodeChunk_11(v_.02, v_2, v_cc))
		(?, 1)    eval_PackBitsEncodeChunk_bb5_in(v_.02, v_2, v_cc) -> Com_1(eval_PackBitsEncodeChunk_stop(v_.02, v_2, v_cc))
		(?, 1)    eval_PackBitsEncodeChunk_7(v_.02, v_2, v_cc) -> Com_1(eval_PackBitsEncodeChunk_bb2_in(v_.02 - v_2, v_2, v_cc))
		(?, 1)    eval_PackBitsEncodeChunk_7(v_.02, v_2, v_cc) -> Com_1(eval_PackBitsEncodeChunk_bb5_in(v_.02, v_2, v_cc))
		(?, 1)    eval_PackBitsEncodeChunk_6(v_.02, v_2, v_cc) -> Com_2(eval_PackBitsEncode_start(v_.02, v_2, v_cc), eval_PackBitsEncodeChunk_7(v_.02, v_2, v_cc))
		(?, 1)    eval_PackBitsEncodeChunk_bb2_in(v_.02, v_2, v_cc) -> Com_1(eval_PackBitsEncodeChunk_bb5_in(v_.02, v_2, v_cc)) [ v_.02 <= 0 ]
		(?, 1)    eval_PackBitsEncodeChunk_bb2_in(v_.02, v_2, v_cc) -> Com_1(eval_PackBitsEncodeChunk_6(v_.02, v_2, v_cc)) [ v_.02 > 0 ]
		(1, 1)    eval_PackBitsEncodeChunk_bb0_in(v_.02, v_2, v_cc) -> Com_1(eval_PackBitsEncodeChunk_10(v_.02, v_2, v_cc))
		(1, 1)    eval_PackBitsEncodeChunk_bb0_in(v_.02, v_2, v_cc) -> Com_1(eval_PackBitsEncodeChunk_bb2_in(v_cc, nondef.0, v_cc))
		(1, 1)    eval_PackBitsEncodeChunk_start(v_.02, v_2, v_cc) -> Com_1(eval_PackBitsEncodeChunk_bb0_in(v_.02, v_2, v_cc))
	start location:	eval_PackBitsEncodeChunk_start
	leaf cost:	0

A polynomial rank function with
	Pol(eval_PackBitsEncodeChunk_11) = 0
	Pol(eval_PackBitsEncodeChunk_stop) = 0
	Pol(eval_PackBitsEncodeChunk_10) = 0
	Pol(eval___assert_fail_start) = 0
	Pol(eval_PackBitsEncodeChunk_bb5_in) = 1
	Pol(eval_PackBitsEncodeChunk_7) = 2
	Pol(eval_PackBitsEncodeChunk_bb2_in) = 2
	Pol(eval_PackBitsEncodeChunk_6) = 2
	Pol(eval_PackBitsEncode_start) = 0
	Pol(eval_PackBitsEncodeChunk_bb0_in) = 2
	Pol(eval_PackBitsEncodeChunk_start) = 2
orients all transitions weakly and the transitions
	eval_PackBitsEncodeChunk_bb5_in(v_.02, v_2, v_cc) -> Com_1(eval_PackBitsEncodeChunk_stop(v_.02, v_2, v_cc))
	eval_PackBitsEncodeChunk_bb2_in(v_.02, v_2, v_cc) -> Com_1(eval_PackBitsEncodeChunk_bb5_in(v_.02, v_2, v_cc)) [ v_.02 <= 0 ]
	eval_PackBitsEncodeChunk_7(v_.02, v_2, v_cc) -> Com_1(eval_PackBitsEncodeChunk_bb5_in(v_.02, v_2, v_cc))
strictly and produces the following problem:
4:	T:
		(1, 1)    eval_PackBitsEncodeChunk_11(v_.02, v_2, v_cc) -> Com_1(eval_PackBitsEncodeChunk_stop(v_.02, v_2, v_cc))
		(1, 1)    eval_PackBitsEncodeChunk_10(v_.02, v_2, v_cc) -> Com_2(eval___assert_fail_start(v_.02, v_2, v_cc), eval_PackBitsEncodeChunk_11(v_.02, v_2, v_cc))
		(2, 1)    eval_PackBitsEncodeChunk_bb5_in(v_.02, v_2, v_cc) -> Com_1(eval_PackBitsEncodeChunk_stop(v_.02, v_2, v_cc))
		(?, 1)    eval_PackBitsEncodeChunk_7(v_.02, v_2, v_cc) -> Com_1(eval_PackBitsEncodeChunk_bb2_in(v_.02 - v_2, v_2, v_cc))
		(2, 1)    eval_PackBitsEncodeChunk_7(v_.02, v_2, v_cc) -> Com_1(eval_PackBitsEncodeChunk_bb5_in(v_.02, v_2, v_cc))
		(?, 1)    eval_PackBitsEncodeChunk_6(v_.02, v_2, v_cc) -> Com_2(eval_PackBitsEncode_start(v_.02, v_2, v_cc), eval_PackBitsEncodeChunk_7(v_.02, v_2, v_cc))
		(2, 1)    eval_PackBitsEncodeChunk_bb2_in(v_.02, v_2, v_cc) -> Com_1(eval_PackBitsEncodeChunk_bb5_in(v_.02, v_2, v_cc)) [ v_.02 <= 0 ]
		(?, 1)    eval_PackBitsEncodeChunk_bb2_in(v_.02, v_2, v_cc) -> Com_1(eval_PackBitsEncodeChunk_6(v_.02, v_2, v_cc)) [ v_.02 > 0 ]
		(1, 1)    eval_PackBitsEncodeChunk_bb0_in(v_.02, v_2, v_cc) -> Com_1(eval_PackBitsEncodeChunk_10(v_.02, v_2, v_cc))
		(1, 1)    eval_PackBitsEncodeChunk_bb0_in(v_.02, v_2, v_cc) -> Com_1(eval_PackBitsEncodeChunk_bb2_in(v_cc, nondef.0, v_cc))
		(1, 1)    eval_PackBitsEncodeChunk_start(v_.02, v_2, v_cc) -> Com_1(eval_PackBitsEncodeChunk_bb0_in(v_.02, v_2, v_cc))
	start location:	eval_PackBitsEncodeChunk_start
	leaf cost:	0

Applied AI with 'oct' on problem 4 to obtain the following invariants:
  For symbol eval_PackBitsEncodeChunk_6: X_1 - 1 >= 0
  For symbol eval_PackBitsEncodeChunk_7: X_1 - 1 >= 0


This yielded the following problem:
5:	T:
		(1, 1)    eval_PackBitsEncodeChunk_start(v_.02, v_2, v_cc) -> Com_1(eval_PackBitsEncodeChunk_bb0_in(v_.02, v_2, v_cc))
		(1, 1)    eval_PackBitsEncodeChunk_bb0_in(v_.02, v_2, v_cc) -> Com_1(eval_PackBitsEncodeChunk_bb2_in(v_cc, nondef.0, v_cc))
		(1, 1)    eval_PackBitsEncodeChunk_bb0_in(v_.02, v_2, v_cc) -> Com_1(eval_PackBitsEncodeChunk_10(v_.02, v_2, v_cc))
		(?, 1)    eval_PackBitsEncodeChunk_bb2_in(v_.02, v_2, v_cc) -> Com_1(eval_PackBitsEncodeChunk_6(v_.02, v_2, v_cc)) [ v_.02 > 0 ]
		(2, 1)    eval_PackBitsEncodeChunk_bb2_in(v_.02, v_2, v_cc) -> Com_1(eval_PackBitsEncodeChunk_bb5_in(v_.02, v_2, v_cc)) [ v_.02 <= 0 ]
		(?, 1)    eval_PackBitsEncodeChunk_6(v_.02, v_2, v_cc) -> Com_2(eval_PackBitsEncode_start(v_.02, v_2, v_cc), eval_PackBitsEncodeChunk_7(v_.02, v_2, v_cc)) [ v_.02 - 1 >= 0 ]
		(2, 1)    eval_PackBitsEncodeChunk_7(v_.02, v_2, v_cc) -> Com_1(eval_PackBitsEncodeChunk_bb5_in(v_.02, v_2, v_cc)) [ v_.02 - 1 >= 0 ]
		(?, 1)    eval_PackBitsEncodeChunk_7(v_.02, v_2, v_cc) -> Com_1(eval_PackBitsEncodeChunk_bb2_in(v_.02 - v_2, v_2, v_cc)) [ v_.02 - 1 >= 0 ]
		(2, 1)    eval_PackBitsEncodeChunk_bb5_in(v_.02, v_2, v_cc) -> Com_1(eval_PackBitsEncodeChunk_stop(v_.02, v_2, v_cc))
		(1, 1)    eval_PackBitsEncodeChunk_10(v_.02, v_2, v_cc) -> Com_2(eval___assert_fail_start(v_.02, v_2, v_cc), eval_PackBitsEncodeChunk_11(v_.02, v_2, v_cc))
		(1, 1)    eval_PackBitsEncodeChunk_11(v_.02, v_2, v_cc) -> Com_1(eval_PackBitsEncodeChunk_stop(v_.02, v_2, v_cc))
	start location:	eval_PackBitsEncodeChunk_start
	leaf cost:	0

By chaining the transition eval_PackBitsEncodeChunk_bb0_in(v_.02, v_2, v_cc) -> Com_1(eval_PackBitsEncodeChunk_10(v_.02, v_2, v_cc)) with all transitions in problem 5, the following new transition is obtained:
	eval_PackBitsEncodeChunk_bb0_in(v_.02, v_2, v_cc) -> Com_2(eval___assert_fail_start(v_.02, v_2, v_cc), eval_PackBitsEncodeChunk_11(v_.02, v_2, v_cc))
We thus obtain the following problem:
6:	T:
		(1, 2)    eval_PackBitsEncodeChunk_bb0_in(v_.02, v_2, v_cc) -> Com_2(eval___assert_fail_start(v_.02, v_2, v_cc), eval_PackBitsEncodeChunk_11(v_.02, v_2, v_cc))
		(1, 1)    eval_PackBitsEncodeChunk_start(v_.02, v_2, v_cc) -> Com_1(eval_PackBitsEncodeChunk_bb0_in(v_.02, v_2, v_cc))
		(1, 1)    eval_PackBitsEncodeChunk_bb0_in(v_.02, v_2, v_cc) -> Com_1(eval_PackBitsEncodeChunk_bb2_in(v_cc, nondef.0, v_cc))
		(?, 1)    eval_PackBitsEncodeChunk_bb2_in(v_.02, v_2, v_cc) -> Com_1(eval_PackBitsEncodeChunk_6(v_.02, v_2, v_cc)) [ v_.02 > 0 ]
		(2, 1)    eval_PackBitsEncodeChunk_bb2_in(v_.02, v_2, v_cc) -> Com_1(eval_PackBitsEncodeChunk_bb5_in(v_.02, v_2, v_cc)) [ v_.02 <= 0 ]
		(?, 1)    eval_PackBitsEncodeChunk_6(v_.02, v_2, v_cc) -> Com_2(eval_PackBitsEncode_start(v_.02, v_2, v_cc), eval_PackBitsEncodeChunk_7(v_.02, v_2, v_cc)) [ v_.02 - 1 >= 0 ]
		(2, 1)    eval_PackBitsEncodeChunk_7(v_.02, v_2, v_cc) -> Com_1(eval_PackBitsEncodeChunk_bb5_in(v_.02, v_2, v_cc)) [ v_.02 - 1 >= 0 ]
		(?, 1)    eval_PackBitsEncodeChunk_7(v_.02, v_2, v_cc) -> Com_1(eval_PackBitsEncodeChunk_bb2_in(v_.02 - v_2, v_2, v_cc)) [ v_.02 - 1 >= 0 ]
		(2, 1)    eval_PackBitsEncodeChunk_bb5_in(v_.02, v_2, v_cc) -> Com_1(eval_PackBitsEncodeChunk_stop(v_.02, v_2, v_cc))
		(1, 1)    eval_PackBitsEncodeChunk_10(v_.02, v_2, v_cc) -> Com_2(eval___assert_fail_start(v_.02, v_2, v_cc), eval_PackBitsEncodeChunk_11(v_.02, v_2, v_cc))
		(1, 1)    eval_PackBitsEncodeChunk_11(v_.02, v_2, v_cc) -> Com_1(eval_PackBitsEncodeChunk_stop(v_.02, v_2, v_cc))
	start location:	eval_PackBitsEncodeChunk_start
	leaf cost:	0

Testing for reachability in the complexity graph removes the following transition from problem 6:
	eval_PackBitsEncodeChunk_10(v_.02, v_2, v_cc) -> Com_2(eval___assert_fail_start(v_.02, v_2, v_cc), eval_PackBitsEncodeChunk_11(v_.02, v_2, v_cc))
We thus obtain the following problem:
7:	T:
		(?, 1)    eval_PackBitsEncodeChunk_7(v_.02, v_2, v_cc) -> Com_1(eval_PackBitsEncodeChunk_bb2_in(v_.02 - v_2, v_2, v_cc)) [ v_.02 - 1 >= 0 ]
		(2, 1)    eval_PackBitsEncodeChunk_7(v_.02, v_2, v_cc) -> Com_1(eval_PackBitsEncodeChunk_bb5_in(v_.02, v_2, v_cc)) [ v_.02 - 1 >= 0 ]
		(2, 1)    eval_PackBitsEncodeChunk_bb5_in(v_.02, v_2, v_cc) -> Com_1(eval_PackBitsEncodeChunk_stop(v_.02, v_2, v_cc))
		(?, 1)    eval_PackBitsEncodeChunk_6(v_.02, v_2, v_cc) -> Com_2(eval_PackBitsEncode_start(v_.02, v_2, v_cc), eval_PackBitsEncodeChunk_7(v_.02, v_2, v_cc)) [ v_.02 - 1 >= 0 ]
		(1, 1)    eval_PackBitsEncodeChunk_11(v_.02, v_2, v_cc) -> Com_1(eval_PackBitsEncodeChunk_stop(v_.02, v_2, v_cc))
		(2, 1)    eval_PackBitsEncodeChunk_bb2_in(v_.02, v_2, v_cc) -> Com_1(eval_PackBitsEncodeChunk_bb5_in(v_.02, v_2, v_cc)) [ v_.02 <= 0 ]
		(?, 1)    eval_PackBitsEncodeChunk_bb2_in(v_.02, v_2, v_cc) -> Com_1(eval_PackBitsEncodeChunk_6(v_.02, v_2, v_cc)) [ v_.02 > 0 ]
		(1, 2)    eval_PackBitsEncodeChunk_bb0_in(v_.02, v_2, v_cc) -> Com_2(eval___assert_fail_start(v_.02, v_2, v_cc), eval_PackBitsEncodeChunk_11(v_.02, v_2, v_cc))
		(1, 1)    eval_PackBitsEncodeChunk_bb0_in(v_.02, v_2, v_cc) -> Com_1(eval_PackBitsEncodeChunk_bb2_in(v_cc, nondef.0, v_cc))
		(1, 1)    eval_PackBitsEncodeChunk_start(v_.02, v_2, v_cc) -> Com_1(eval_PackBitsEncodeChunk_bb0_in(v_.02, v_2, v_cc))
	start location:	eval_PackBitsEncodeChunk_start
	leaf cost:	0

By chaining the transition eval_PackBitsEncodeChunk_7(v_.02, v_2, v_cc) -> Com_1(eval_PackBitsEncodeChunk_bb5_in(v_.02, v_2, v_cc)) [ v_.02 - 1 >= 0 ] with all transitions in problem 7, the following new transition is obtained:
	eval_PackBitsEncodeChunk_7(v_.02, v_2, v_cc) -> Com_1(eval_PackBitsEncodeChunk_stop(v_.02, v_2, v_cc)) [ v_.02 - 1 >= 0 ]
We thus obtain the following problem:
8:	T:
		(2, 2)    eval_PackBitsEncodeChunk_7(v_.02, v_2, v_cc) -> Com_1(eval_PackBitsEncodeChunk_stop(v_.02, v_2, v_cc)) [ v_.02 - 1 >= 0 ]
		(?, 1)    eval_PackBitsEncodeChunk_7(v_.02, v_2, v_cc) -> Com_1(eval_PackBitsEncodeChunk_bb2_in(v_.02 - v_2, v_2, v_cc)) [ v_.02 - 1 >= 0 ]
		(2, 1)    eval_PackBitsEncodeChunk_bb5_in(v_.02, v_2, v_cc) -> Com_1(eval_PackBitsEncodeChunk_stop(v_.02, v_2, v_cc))
		(?, 1)    eval_PackBitsEncodeChunk_6(v_.02, v_2, v_cc) -> Com_2(eval_PackBitsEncode_start(v_.02, v_2, v_cc), eval_PackBitsEncodeChunk_7(v_.02, v_2, v_cc)) [ v_.02 - 1 >= 0 ]
		(1, 1)    eval_PackBitsEncodeChunk_11(v_.02, v_2, v_cc) -> Com_1(eval_PackBitsEncodeChunk_stop(v_.02, v_2, v_cc))
		(2, 1)    eval_PackBitsEncodeChunk_bb2_in(v_.02, v_2, v_cc) -> Com_1(eval_PackBitsEncodeChunk_bb5_in(v_.02, v_2, v_cc)) [ v_.02 <= 0 ]
		(?, 1)    eval_PackBitsEncodeChunk_bb2_in(v_.02, v_2, v_cc) -> Com_1(eval_PackBitsEncodeChunk_6(v_.02, v_2, v_cc)) [ v_.02 > 0 ]
		(1, 2)    eval_PackBitsEncodeChunk_bb0_in(v_.02, v_2, v_cc) -> Com_2(eval___assert_fail_start(v_.02, v_2, v_cc), eval_PackBitsEncodeChunk_11(v_.02, v_2, v_cc))
		(1, 1)    eval_PackBitsEncodeChunk_bb0_in(v_.02, v_2, v_cc) -> Com_1(eval_PackBitsEncodeChunk_bb2_in(v_cc, nondef.0, v_cc))
		(1, 1)    eval_PackBitsEncodeChunk_start(v_.02, v_2, v_cc) -> Com_1(eval_PackBitsEncodeChunk_bb0_in(v_.02, v_2, v_cc))
	start location:	eval_PackBitsEncodeChunk_start
	leaf cost:	0

By chaining the transition eval_PackBitsEncodeChunk_bb2_in(v_.02, v_2, v_cc) -> Com_1(eval_PackBitsEncodeChunk_bb5_in(v_.02, v_2, v_cc)) [ v_.02 <= 0 ] with all transitions in problem 8, the following new transition is obtained:
	eval_PackBitsEncodeChunk_bb2_in(v_.02, v_2, v_cc) -> Com_1(eval_PackBitsEncodeChunk_stop(v_.02, v_2, v_cc)) [ v_.02 <= 0 ]
We thus obtain the following problem:
9:	T:
		(2, 2)    eval_PackBitsEncodeChunk_bb2_in(v_.02, v_2, v_cc) -> Com_1(eval_PackBitsEncodeChunk_stop(v_.02, v_2, v_cc)) [ v_.02 <= 0 ]
		(2, 2)    eval_PackBitsEncodeChunk_7(v_.02, v_2, v_cc) -> Com_1(eval_PackBitsEncodeChunk_stop(v_.02, v_2, v_cc)) [ v_.02 - 1 >= 0 ]
		(?, 1)    eval_PackBitsEncodeChunk_7(v_.02, v_2, v_cc) -> Com_1(eval_PackBitsEncodeChunk_bb2_in(v_.02 - v_2, v_2, v_cc)) [ v_.02 - 1 >= 0 ]
		(2, 1)    eval_PackBitsEncodeChunk_bb5_in(v_.02, v_2, v_cc) -> Com_1(eval_PackBitsEncodeChunk_stop(v_.02, v_2, v_cc))
		(?, 1)    eval_PackBitsEncodeChunk_6(v_.02, v_2, v_cc) -> Com_2(eval_PackBitsEncode_start(v_.02, v_2, v_cc), eval_PackBitsEncodeChunk_7(v_.02, v_2, v_cc)) [ v_.02 - 1 >= 0 ]
		(1, 1)    eval_PackBitsEncodeChunk_11(v_.02, v_2, v_cc) -> Com_1(eval_PackBitsEncodeChunk_stop(v_.02, v_2, v_cc))
		(?, 1)    eval_PackBitsEncodeChunk_bb2_in(v_.02, v_2, v_cc) -> Com_1(eval_PackBitsEncodeChunk_6(v_.02, v_2, v_cc)) [ v_.02 > 0 ]
		(1, 2)    eval_PackBitsEncodeChunk_bb0_in(v_.02, v_2, v_cc) -> Com_2(eval___assert_fail_start(v_.02, v_2, v_cc), eval_PackBitsEncodeChunk_11(v_.02, v_2, v_cc))
		(1, 1)    eval_PackBitsEncodeChunk_bb0_in(v_.02, v_2, v_cc) -> Com_1(eval_PackBitsEncodeChunk_bb2_in(v_cc, nondef.0, v_cc))
		(1, 1)    eval_PackBitsEncodeChunk_start(v_.02, v_2, v_cc) -> Com_1(eval_PackBitsEncodeChunk_bb0_in(v_.02, v_2, v_cc))
	start location:	eval_PackBitsEncodeChunk_start
	leaf cost:	0

Testing for reachability in the complexity graph removes the following transition from problem 9:
	eval_PackBitsEncodeChunk_bb5_in(v_.02, v_2, v_cc) -> Com_1(eval_PackBitsEncodeChunk_stop(v_.02, v_2, v_cc))
We thus obtain the following problem:
10:	T:
		(2, 2)    eval_PackBitsEncodeChunk_7(v_.02, v_2, v_cc) -> Com_1(eval_PackBitsEncodeChunk_stop(v_.02, v_2, v_cc)) [ v_.02 - 1 >= 0 ]
		(?, 1)    eval_PackBitsEncodeChunk_7(v_.02, v_2, v_cc) -> Com_1(eval_PackBitsEncodeChunk_bb2_in(v_.02 - v_2, v_2, v_cc)) [ v_.02 - 1 >= 0 ]
		(?, 1)    eval_PackBitsEncodeChunk_6(v_.02, v_2, v_cc) -> Com_2(eval_PackBitsEncode_start(v_.02, v_2, v_cc), eval_PackBitsEncodeChunk_7(v_.02, v_2, v_cc)) [ v_.02 - 1 >= 0 ]
		(1, 1)    eval_PackBitsEncodeChunk_11(v_.02, v_2, v_cc) -> Com_1(eval_PackBitsEncodeChunk_stop(v_.02, v_2, v_cc))
		(2, 2)    eval_PackBitsEncodeChunk_bb2_in(v_.02, v_2, v_cc) -> Com_1(eval_PackBitsEncodeChunk_stop(v_.02, v_2, v_cc)) [ v_.02 <= 0 ]
		(?, 1)    eval_PackBitsEncodeChunk_bb2_in(v_.02, v_2, v_cc) -> Com_1(eval_PackBitsEncodeChunk_6(v_.02, v_2, v_cc)) [ v_.02 > 0 ]
		(1, 2)    eval_PackBitsEncodeChunk_bb0_in(v_.02, v_2, v_cc) -> Com_2(eval___assert_fail_start(v_.02, v_2, v_cc), eval_PackBitsEncodeChunk_11(v_.02, v_2, v_cc))
		(1, 1)    eval_PackBitsEncodeChunk_bb0_in(v_.02, v_2, v_cc) -> Com_1(eval_PackBitsEncodeChunk_bb2_in(v_cc, nondef.0, v_cc))
		(1, 1)    eval_PackBitsEncodeChunk_start(v_.02, v_2, v_cc) -> Com_1(eval_PackBitsEncodeChunk_bb0_in(v_.02, v_2, v_cc))
	start location:	eval_PackBitsEncodeChunk_start
	leaf cost:	0

By chaining the transition eval_PackBitsEncodeChunk_bb2_in(v_.02, v_2, v_cc) -> Com_1(eval_PackBitsEncodeChunk_6(v_.02, v_2, v_cc)) [ v_.02 > 0 ] with all transitions in problem 10, the following new transition is obtained:
	eval_PackBitsEncodeChunk_bb2_in(v_.02, v_2, v_cc) -> Com_2(eval_PackBitsEncode_start(v_.02, v_2, v_cc), eval_PackBitsEncodeChunk_7(v_.02, v_2, v_cc)) [ v_.02 > 0 /\ v_.02 - 1 >= 0 ]
We thus obtain the following problem:
11:	T:
		(?, 2)    eval_PackBitsEncodeChunk_bb2_in(v_.02, v_2, v_cc) -> Com_2(eval_PackBitsEncode_start(v_.02, v_2, v_cc), eval_PackBitsEncodeChunk_7(v_.02, v_2, v_cc)) [ v_.02 > 0 /\ v_.02 - 1 >= 0 ]
		(2, 2)    eval_PackBitsEncodeChunk_7(v_.02, v_2, v_cc) -> Com_1(eval_PackBitsEncodeChunk_stop(v_.02, v_2, v_cc)) [ v_.02 - 1 >= 0 ]
		(?, 1)    eval_PackBitsEncodeChunk_7(v_.02, v_2, v_cc) -> Com_1(eval_PackBitsEncodeChunk_bb2_in(v_.02 - v_2, v_2, v_cc)) [ v_.02 - 1 >= 0 ]
		(?, 1)    eval_PackBitsEncodeChunk_6(v_.02, v_2, v_cc) -> Com_2(eval_PackBitsEncode_start(v_.02, v_2, v_cc), eval_PackBitsEncodeChunk_7(v_.02, v_2, v_cc)) [ v_.02 - 1 >= 0 ]
		(1, 1)    eval_PackBitsEncodeChunk_11(v_.02, v_2, v_cc) -> Com_1(eval_PackBitsEncodeChunk_stop(v_.02, v_2, v_cc))
		(2, 2)    eval_PackBitsEncodeChunk_bb2_in(v_.02, v_2, v_cc) -> Com_1(eval_PackBitsEncodeChunk_stop(v_.02, v_2, v_cc)) [ v_.02 <= 0 ]
		(1, 2)    eval_PackBitsEncodeChunk_bb0_in(v_.02, v_2, v_cc) -> Com_2(eval___assert_fail_start(v_.02, v_2, v_cc), eval_PackBitsEncodeChunk_11(v_.02, v_2, v_cc))
		(1, 1)    eval_PackBitsEncodeChunk_bb0_in(v_.02, v_2, v_cc) -> Com_1(eval_PackBitsEncodeChunk_bb2_in(v_cc, nondef.0, v_cc))
		(1, 1)    eval_PackBitsEncodeChunk_start(v_.02, v_2, v_cc) -> Com_1(eval_PackBitsEncodeChunk_bb0_in(v_.02, v_2, v_cc))
	start location:	eval_PackBitsEncodeChunk_start
	leaf cost:	0

Testing for reachability in the complexity graph removes the following transition from problem 11:
	eval_PackBitsEncodeChunk_6(v_.02, v_2, v_cc) -> Com_2(eval_PackBitsEncode_start(v_.02, v_2, v_cc), eval_PackBitsEncodeChunk_7(v_.02, v_2, v_cc)) [ v_.02 - 1 >= 0 ]
We thus obtain the following problem:
12:	T:
		(2, 2)    eval_PackBitsEncodeChunk_7(v_.02, v_2, v_cc) -> Com_1(eval_PackBitsEncodeChunk_stop(v_.02, v_2, v_cc)) [ v_.02 - 1 >= 0 ]
		(?, 1)    eval_PackBitsEncodeChunk_7(v_.02, v_2, v_cc) -> Com_1(eval_PackBitsEncodeChunk_bb2_in(v_.02 - v_2, v_2, v_cc)) [ v_.02 - 1 >= 0 ]
		(1, 1)    eval_PackBitsEncodeChunk_11(v_.02, v_2, v_cc) -> Com_1(eval_PackBitsEncodeChunk_stop(v_.02, v_2, v_cc))
		(?, 2)    eval_PackBitsEncodeChunk_bb2_in(v_.02, v_2, v_cc) -> Com_2(eval_PackBitsEncode_start(v_.02, v_2, v_cc), eval_PackBitsEncodeChunk_7(v_.02, v_2, v_cc)) [ v_.02 > 0 /\ v_.02 - 1 >= 0 ]
		(2, 2)    eval_PackBitsEncodeChunk_bb2_in(v_.02, v_2, v_cc) -> Com_1(eval_PackBitsEncodeChunk_stop(v_.02, v_2, v_cc)) [ v_.02 <= 0 ]
		(1, 2)    eval_PackBitsEncodeChunk_bb0_in(v_.02, v_2, v_cc) -> Com_2(eval___assert_fail_start(v_.02, v_2, v_cc), eval_PackBitsEncodeChunk_11(v_.02, v_2, v_cc))
		(1, 1)    eval_PackBitsEncodeChunk_bb0_in(v_.02, v_2, v_cc) -> Com_1(eval_PackBitsEncodeChunk_bb2_in(v_cc, nondef.0, v_cc))
		(1, 1)    eval_PackBitsEncodeChunk_start(v_.02, v_2, v_cc) -> Com_1(eval_PackBitsEncodeChunk_bb0_in(v_.02, v_2, v_cc))
	start location:	eval_PackBitsEncodeChunk_start
	leaf cost:	0

By chaining the transition eval_PackBitsEncodeChunk_7(v_.02, v_2, v_cc) -> Com_1(eval_PackBitsEncodeChunk_bb2_in(v_.02 - v_2, v_2, v_cc)) [ v_.02 - 1 >= 0 ] with all transitions in problem 12, the following new transitions are obtained:
	eval_PackBitsEncodeChunk_7(v_.02, v_2, v_cc) -> Com_2(eval_PackBitsEncode_start(v_.02 - v_2, v_2, v_cc), eval_PackBitsEncodeChunk_7(v_.02 - v_2, v_2, v_cc)) [ v_.02 - 1 >= 0 /\ v_.02 - v_2 > 0 /\ v_.02 - v_2 - 1 >= 0 ]
	eval_PackBitsEncodeChunk_7(v_.02, v_2, v_cc) -> Com_1(eval_PackBitsEncodeChunk_stop(v_.02 - v_2, v_2, v_cc)) [ v_.02 - 1 >= 0 /\ v_.02 - v_2 <= 0 ]
We thus obtain the following problem:
13:	T:
		(?, 3)    eval_PackBitsEncodeChunk_7(v_.02, v_2, v_cc) -> Com_2(eval_PackBitsEncode_start(v_.02 - v_2, v_2, v_cc), eval_PackBitsEncodeChunk_7(v_.02 - v_2, v_2, v_cc)) [ v_.02 - 1 >= 0 /\ v_.02 - v_2 > 0 /\ v_.02 - v_2 - 1 >= 0 ]
		(?, 3)    eval_PackBitsEncodeChunk_7(v_.02, v_2, v_cc) -> Com_1(eval_PackBitsEncodeChunk_stop(v_.02 - v_2, v_2, v_cc)) [ v_.02 - 1 >= 0 /\ v_.02 - v_2 <= 0 ]
		(2, 2)    eval_PackBitsEncodeChunk_7(v_.02, v_2, v_cc) -> Com_1(eval_PackBitsEncodeChunk_stop(v_.02, v_2, v_cc)) [ v_.02 - 1 >= 0 ]
		(1, 1)    eval_PackBitsEncodeChunk_11(v_.02, v_2, v_cc) -> Com_1(eval_PackBitsEncodeChunk_stop(v_.02, v_2, v_cc))
		(?, 2)    eval_PackBitsEncodeChunk_bb2_in(v_.02, v_2, v_cc) -> Com_2(eval_PackBitsEncode_start(v_.02, v_2, v_cc), eval_PackBitsEncodeChunk_7(v_.02, v_2, v_cc)) [ v_.02 > 0 /\ v_.02 - 1 >= 0 ]
		(2, 2)    eval_PackBitsEncodeChunk_bb2_in(v_.02, v_2, v_cc) -> Com_1(eval_PackBitsEncodeChunk_stop(v_.02, v_2, v_cc)) [ v_.02 <= 0 ]
		(1, 2)    eval_PackBitsEncodeChunk_bb0_in(v_.02, v_2, v_cc) -> Com_2(eval___assert_fail_start(v_.02, v_2, v_cc), eval_PackBitsEncodeChunk_11(v_.02, v_2, v_cc))
		(1, 1)    eval_PackBitsEncodeChunk_bb0_in(v_.02, v_2, v_cc) -> Com_1(eval_PackBitsEncodeChunk_bb2_in(v_cc, nondef.0, v_cc))
		(1, 1)    eval_PackBitsEncodeChunk_start(v_.02, v_2, v_cc) -> Com_1(eval_PackBitsEncodeChunk_bb0_in(v_.02, v_2, v_cc))
	start location:	eval_PackBitsEncodeChunk_start
	leaf cost:	0

Repeatedly propagating knowledge in problem 13 produces the following problem:
14:	T:
		(?, 3)    eval_PackBitsEncodeChunk_7(v_.02, v_2, v_cc) -> Com_2(eval_PackBitsEncode_start(v_.02 - v_2, v_2, v_cc), eval_PackBitsEncodeChunk_7(v_.02 - v_2, v_2, v_cc)) [ v_.02 - 1 >= 0 /\ v_.02 - v_2 > 0 /\ v_.02 - v_2 - 1 >= 0 ]
		(?, 3)    eval_PackBitsEncodeChunk_7(v_.02, v_2, v_cc) -> Com_1(eval_PackBitsEncodeChunk_stop(v_.02 - v_2, v_2, v_cc)) [ v_.02 - 1 >= 0 /\ v_.02 - v_2 <= 0 ]
		(2, 2)    eval_PackBitsEncodeChunk_7(v_.02, v_2, v_cc) -> Com_1(eval_PackBitsEncodeChunk_stop(v_.02, v_2, v_cc)) [ v_.02 - 1 >= 0 ]
		(1, 1)    eval_PackBitsEncodeChunk_11(v_.02, v_2, v_cc) -> Com_1(eval_PackBitsEncodeChunk_stop(v_.02, v_2, v_cc))
		(1, 2)    eval_PackBitsEncodeChunk_bb2_in(v_.02, v_2, v_cc) -> Com_2(eval_PackBitsEncode_start(v_.02, v_2, v_cc), eval_PackBitsEncodeChunk_7(v_.02, v_2, v_cc)) [ v_.02 > 0 /\ v_.02 - 1 >= 0 ]
		(2, 2)    eval_PackBitsEncodeChunk_bb2_in(v_.02, v_2, v_cc) -> Com_1(eval_PackBitsEncodeChunk_stop(v_.02, v_2, v_cc)) [ v_.02 <= 0 ]
		(1, 2)    eval_PackBitsEncodeChunk_bb0_in(v_.02, v_2, v_cc) -> Com_2(eval___assert_fail_start(v_.02, v_2, v_cc), eval_PackBitsEncodeChunk_11(v_.02, v_2, v_cc))
		(1, 1)    eval_PackBitsEncodeChunk_bb0_in(v_.02, v_2, v_cc) -> Com_1(eval_PackBitsEncodeChunk_bb2_in(v_cc, nondef.0, v_cc))
		(1, 1)    eval_PackBitsEncodeChunk_start(v_.02, v_2, v_cc) -> Com_1(eval_PackBitsEncodeChunk_bb0_in(v_.02, v_2, v_cc))
	start location:	eval_PackBitsEncodeChunk_start
	leaf cost:	0

A polynomial rank function with
	Pol(eval_PackBitsEncodeChunk_7) = 1
	Pol(eval_PackBitsEncode_start) = 0
	Pol(eval_PackBitsEncodeChunk_stop) = 0
	Pol(eval_PackBitsEncodeChunk_11) = 0
	Pol(eval_PackBitsEncodeChunk_bb2_in) = 1
	Pol(eval_PackBitsEncodeChunk_bb0_in) = 1
	Pol(eval___assert_fail_start) = 0
	Pol(eval_PackBitsEncodeChunk_start) = 1
orients all transitions weakly and the transition
	eval_PackBitsEncodeChunk_7(v_.02, v_2, v_cc) -> Com_1(eval_PackBitsEncodeChunk_stop(v_.02 - v_2, v_2, v_cc)) [ v_.02 - 1 >= 0 /\ v_.02 - v_2 <= 0 ]
strictly and produces the following problem:
15:	T:
		(?, 3)    eval_PackBitsEncodeChunk_7(v_.02, v_2, v_cc) -> Com_2(eval_PackBitsEncode_start(v_.02 - v_2, v_2, v_cc), eval_PackBitsEncodeChunk_7(v_.02 - v_2, v_2, v_cc)) [ v_.02 - 1 >= 0 /\ v_.02 - v_2 > 0 /\ v_.02 - v_2 - 1 >= 0 ]
		(1, 3)    eval_PackBitsEncodeChunk_7(v_.02, v_2, v_cc) -> Com_1(eval_PackBitsEncodeChunk_stop(v_.02 - v_2, v_2, v_cc)) [ v_.02 - 1 >= 0 /\ v_.02 - v_2 <= 0 ]
		(2, 2)    eval_PackBitsEncodeChunk_7(v_.02, v_2, v_cc) -> Com_1(eval_PackBitsEncodeChunk_stop(v_.02, v_2, v_cc)) [ v_.02 - 1 >= 0 ]
		(1, 1)    eval_PackBitsEncodeChunk_11(v_.02, v_2, v_cc) -> Com_1(eval_PackBitsEncodeChunk_stop(v_.02, v_2, v_cc))
		(1, 2)    eval_PackBitsEncodeChunk_bb2_in(v_.02, v_2, v_cc) -> Com_2(eval_PackBitsEncode_start(v_.02, v_2, v_cc), eval_PackBitsEncodeChunk_7(v_.02, v_2, v_cc)) [ v_.02 > 0 /\ v_.02 - 1 >= 0 ]
		(2, 2)    eval_PackBitsEncodeChunk_bb2_in(v_.02, v_2, v_cc) -> Com_1(eval_PackBitsEncodeChunk_stop(v_.02, v_2, v_cc)) [ v_.02 <= 0 ]
		(1, 2)    eval_PackBitsEncodeChunk_bb0_in(v_.02, v_2, v_cc) -> Com_2(eval___assert_fail_start(v_.02, v_2, v_cc), eval_PackBitsEncodeChunk_11(v_.02, v_2, v_cc))
		(1, 1)    eval_PackBitsEncodeChunk_bb0_in(v_.02, v_2, v_cc) -> Com_1(eval_PackBitsEncodeChunk_bb2_in(v_cc, nondef.0, v_cc))
		(1, 1)    eval_PackBitsEncodeChunk_start(v_.02, v_2, v_cc) -> Com_1(eval_PackBitsEncodeChunk_bb0_in(v_.02, v_2, v_cc))
	start location:	eval_PackBitsEncodeChunk_start
	leaf cost:	0

By chaining the transition eval_PackBitsEncodeChunk_bb0_in(v_.02, v_2, v_cc) -> Com_1(eval_PackBitsEncodeChunk_bb2_in(v_cc, nondef.0, v_cc)) with all transitions in problem 15, the following new transitions are obtained:
	eval_PackBitsEncodeChunk_bb0_in(v_.02, v_2, v_cc) -> Com_2(eval_PackBitsEncode_start(v_cc, nondef.0, v_cc), eval_PackBitsEncodeChunk_7(v_cc, nondef.0, v_cc)) [ v_cc > 0 /\ v_cc - 1 >= 0 ]
	eval_PackBitsEncodeChunk_bb0_in(v_.02, v_2, v_cc) -> Com_1(eval_PackBitsEncodeChunk_stop(v_cc, nondef.0, v_cc)) [ v_cc <= 0 ]
We thus obtain the following problem:
16:	T:
		(1, 3)    eval_PackBitsEncodeChunk_bb0_in(v_.02, v_2, v_cc) -> Com_2(eval_PackBitsEncode_start(v_cc, nondef.0, v_cc), eval_PackBitsEncodeChunk_7(v_cc, nondef.0, v_cc)) [ v_cc > 0 /\ v_cc - 1 >= 0 ]
		(1, 3)    eval_PackBitsEncodeChunk_bb0_in(v_.02, v_2, v_cc) -> Com_1(eval_PackBitsEncodeChunk_stop(v_cc, nondef.0, v_cc)) [ v_cc <= 0 ]
		(?, 3)    eval_PackBitsEncodeChunk_7(v_.02, v_2, v_cc) -> Com_2(eval_PackBitsEncode_start(v_.02 - v_2, v_2, v_cc), eval_PackBitsEncodeChunk_7(v_.02 - v_2, v_2, v_cc)) [ v_.02 - 1 >= 0 /\ v_.02 - v_2 > 0 /\ v_.02 - v_2 - 1 >= 0 ]
		(1, 3)    eval_PackBitsEncodeChunk_7(v_.02, v_2, v_cc) -> Com_1(eval_PackBitsEncodeChunk_stop(v_.02 - v_2, v_2, v_cc)) [ v_.02 - 1 >= 0 /\ v_.02 - v_2 <= 0 ]
		(2, 2)    eval_PackBitsEncodeChunk_7(v_.02, v_2, v_cc) -> Com_1(eval_PackBitsEncodeChunk_stop(v_.02, v_2, v_cc)) [ v_.02 - 1 >= 0 ]
		(1, 1)    eval_PackBitsEncodeChunk_11(v_.02, v_2, v_cc) -> Com_1(eval_PackBitsEncodeChunk_stop(v_.02, v_2, v_cc))
		(1, 2)    eval_PackBitsEncodeChunk_bb2_in(v_.02, v_2, v_cc) -> Com_2(eval_PackBitsEncode_start(v_.02, v_2, v_cc), eval_PackBitsEncodeChunk_7(v_.02, v_2, v_cc)) [ v_.02 > 0 /\ v_.02 - 1 >= 0 ]
		(2, 2)    eval_PackBitsEncodeChunk_bb2_in(v_.02, v_2, v_cc) -> Com_1(eval_PackBitsEncodeChunk_stop(v_.02, v_2, v_cc)) [ v_.02 <= 0 ]
		(1, 2)    eval_PackBitsEncodeChunk_bb0_in(v_.02, v_2, v_cc) -> Com_2(eval___assert_fail_start(v_.02, v_2, v_cc), eval_PackBitsEncodeChunk_11(v_.02, v_2, v_cc))
		(1, 1)    eval_PackBitsEncodeChunk_start(v_.02, v_2, v_cc) -> Com_1(eval_PackBitsEncodeChunk_bb0_in(v_.02, v_2, v_cc))
	start location:	eval_PackBitsEncodeChunk_start
	leaf cost:	0

Testing for reachability in the complexity graph removes the following transitions from problem 16:
	eval_PackBitsEncodeChunk_bb2_in(v_.02, v_2, v_cc) -> Com_2(eval_PackBitsEncode_start(v_.02, v_2, v_cc), eval_PackBitsEncodeChunk_7(v_.02, v_2, v_cc)) [ v_.02 > 0 /\ v_.02 - 1 >= 0 ]
	eval_PackBitsEncodeChunk_bb2_in(v_.02, v_2, v_cc) -> Com_1(eval_PackBitsEncodeChunk_stop(v_.02, v_2, v_cc)) [ v_.02 <= 0 ]
We thus obtain the following problem:
17:	T:
		(1, 3)    eval_PackBitsEncodeChunk_7(v_.02, v_2, v_cc) -> Com_1(eval_PackBitsEncodeChunk_stop(v_.02 - v_2, v_2, v_cc)) [ v_.02 - 1 >= 0 /\ v_.02 - v_2 <= 0 ]
		(?, 3)    eval_PackBitsEncodeChunk_7(v_.02, v_2, v_cc) -> Com_2(eval_PackBitsEncode_start(v_.02 - v_2, v_2, v_cc), eval_PackBitsEncodeChunk_7(v_.02 - v_2, v_2, v_cc)) [ v_.02 - 1 >= 0 /\ v_.02 - v_2 > 0 /\ v_.02 - v_2 - 1 >= 0 ]
		(2, 2)    eval_PackBitsEncodeChunk_7(v_.02, v_2, v_cc) -> Com_1(eval_PackBitsEncodeChunk_stop(v_.02, v_2, v_cc)) [ v_.02 - 1 >= 0 ]
		(1, 1)    eval_PackBitsEncodeChunk_11(v_.02, v_2, v_cc) -> Com_1(eval_PackBitsEncodeChunk_stop(v_.02, v_2, v_cc))
		(1, 3)    eval_PackBitsEncodeChunk_bb0_in(v_.02, v_2, v_cc) -> Com_1(eval_PackBitsEncodeChunk_stop(v_cc, nondef.0, v_cc)) [ v_cc <= 0 ]
		(1, 3)    eval_PackBitsEncodeChunk_bb0_in(v_.02, v_2, v_cc) -> Com_2(eval_PackBitsEncode_start(v_cc, nondef.0, v_cc), eval_PackBitsEncodeChunk_7(v_cc, nondef.0, v_cc)) [ v_cc > 0 /\ v_cc - 1 >= 0 ]
		(1, 2)    eval_PackBitsEncodeChunk_bb0_in(v_.02, v_2, v_cc) -> Com_2(eval___assert_fail_start(v_.02, v_2, v_cc), eval_PackBitsEncodeChunk_11(v_.02, v_2, v_cc))
		(1, 1)    eval_PackBitsEncodeChunk_start(v_.02, v_2, v_cc) -> Com_1(eval_PackBitsEncodeChunk_bb0_in(v_.02, v_2, v_cc))
	start location:	eval_PackBitsEncodeChunk_start
	leaf cost:	0

Complexity upper bound ?

Time: 0.762 sec (SMT: 0.617 sec)

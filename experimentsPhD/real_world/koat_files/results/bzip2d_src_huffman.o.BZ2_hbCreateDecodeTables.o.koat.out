YES(?, 9*v_alphaSize + 10*v_maxLen + 10*v_minLen + 8*v_alphaSize*v_maxLen + 8*v_alphaSize*v_minLen + 116)

Initial complexity problem:
1:	T:
		(1, 1)    eval_BZ2_hbCreateDecodeTables_start(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) -> eval_BZ2_hbCreateDecodeTables_bb0_in(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink)
		(?, 1)    eval_BZ2_hbCreateDecodeTables_bb0_in(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) -> eval_BZ2_hbCreateDecodeTables_bb1_in(v_alphaSize, v_minLen, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink)
		(?, 1)    eval_BZ2_hbCreateDecodeTables_bb1_in(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) -> eval_BZ2_hbCreateDecodeTables_bb2_in(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, 0, v_maxLen, v_minLen, v_minLen.sink) [ v_i.0 <= v_maxLen ]
		(?, 1)    eval_BZ2_hbCreateDecodeTables_bb1_in(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) -> eval_BZ2_hbCreateDecodeTables_bb7_in(v_alphaSize, v_i.0, 0, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) [ v_i.0 > v_maxLen ]
		(?, 1)    eval_BZ2_hbCreateDecodeTables_bb2_in(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) -> eval_BZ2_hbCreateDecodeTables_bb5_in(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) [ v_j.0 < v_alphaSize ]
		(?, 1)    eval_BZ2_hbCreateDecodeTables_bb2_in(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) -> eval_BZ2_hbCreateDecodeTables_bb1_in(v_alphaSize, v_i.0 + 1, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) [ v_j.0 >= v_alphaSize ]
		(?, 1)    eval_BZ2_hbCreateDecodeTables_bb5_in(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) -> eval_BZ2_hbCreateDecodeTables_bb2_in(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0 + 1, v_maxLen, v_minLen, v_minLen.sink)
		(?, 1)    eval_BZ2_hbCreateDecodeTables_bb7_in(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) -> eval_BZ2_hbCreateDecodeTables_bb7_in(v_alphaSize, v_i.0, v_i.1 + 1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) [ v_i.1 < 23 ]
		(?, 1)    eval_BZ2_hbCreateDecodeTables_bb7_in(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) -> eval_BZ2_hbCreateDecodeTables_bb9_in(v_alphaSize, v_i.0, v_i.1, 0, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) [ v_i.1 >= 23 ]
		(?, 1)    eval_BZ2_hbCreateDecodeTables_bb9_in(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) -> eval_BZ2_hbCreateDecodeTables_bb9_in(v_alphaSize, v_i.0, v_i.1, v_i.2 + 1, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) [ v_i.2 < v_alphaSize ]
		(?, 1)    eval_BZ2_hbCreateDecodeTables_bb9_in(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) -> eval_BZ2_hbCreateDecodeTables_bb11_in(v_alphaSize, v_i.0, v_i.1, v_i.2, 1, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) [ v_i.2 >= v_alphaSize ]
		(?, 1)    eval_BZ2_hbCreateDecodeTables_bb11_in(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) -> eval_BZ2_hbCreateDecodeTables_bb11_in(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3 + 1, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) [ v_i.3 < 23 ]
		(?, 1)    eval_BZ2_hbCreateDecodeTables_bb11_in(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) -> eval_BZ2_hbCreateDecodeTables_bb13_in(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, 0, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) [ v_i.3 >= 23 ]
		(?, 1)    eval_BZ2_hbCreateDecodeTables_bb13_in(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) -> eval_BZ2_hbCreateDecodeTables_bb13_in(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4 + 1, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) [ v_i.4 < 23 ]
		(?, 1)    eval_BZ2_hbCreateDecodeTables_bb13_in(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) -> eval_BZ2_hbCreateDecodeTables_bb15_in(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_minLen, v_j.0, v_maxLen, v_minLen, v_minLen.sink) [ v_i.4 >= 23 ]
		(?, 1)    eval_BZ2_hbCreateDecodeTables_bb15_in(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) -> eval_BZ2_hbCreateDecodeTables_bb15_in(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5 + 1, v_j.0, v_maxLen, v_minLen, v_minLen.sink) [ v_i.5 <= v_maxLen ]
		(?, 1)    eval_BZ2_hbCreateDecodeTables_bb15_in(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) -> eval_BZ2_hbCreateDecodeTables_bb17_in(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen) [ v_i.5 > v_maxLen ]
		(?, 1)    eval_BZ2_hbCreateDecodeTables_bb17_in(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) -> eval_BZ2_hbCreateDecodeTables_bb17_in(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink + 1) [ v_minLen.sink + 1 <= v_maxLen ]
		(?, 1)    eval_BZ2_hbCreateDecodeTables_bb17_in(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) -> eval_BZ2_hbCreateDecodeTables_stop(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) [ v_minLen.sink + 1 > v_maxLen ]
	start location:	eval_BZ2_hbCreateDecodeTables_start
	leaf cost:	0

Repeatedly removing leaves of the complexity graph in problem 1 produces the following problem:
2:	T:
		(1, 1)    eval_BZ2_hbCreateDecodeTables_start(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) -> eval_BZ2_hbCreateDecodeTables_bb0_in(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink)
		(?, 1)    eval_BZ2_hbCreateDecodeTables_bb0_in(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) -> eval_BZ2_hbCreateDecodeTables_bb1_in(v_alphaSize, v_minLen, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink)
		(?, 1)    eval_BZ2_hbCreateDecodeTables_bb1_in(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) -> eval_BZ2_hbCreateDecodeTables_bb2_in(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, 0, v_maxLen, v_minLen, v_minLen.sink) [ v_i.0 <= v_maxLen ]
		(?, 1)    eval_BZ2_hbCreateDecodeTables_bb1_in(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) -> eval_BZ2_hbCreateDecodeTables_bb7_in(v_alphaSize, v_i.0, 0, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) [ v_i.0 > v_maxLen ]
		(?, 1)    eval_BZ2_hbCreateDecodeTables_bb2_in(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) -> eval_BZ2_hbCreateDecodeTables_bb5_in(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) [ v_j.0 < v_alphaSize ]
		(?, 1)    eval_BZ2_hbCreateDecodeTables_bb2_in(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) -> eval_BZ2_hbCreateDecodeTables_bb1_in(v_alphaSize, v_i.0 + 1, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) [ v_j.0 >= v_alphaSize ]
		(?, 1)    eval_BZ2_hbCreateDecodeTables_bb5_in(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) -> eval_BZ2_hbCreateDecodeTables_bb2_in(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0 + 1, v_maxLen, v_minLen, v_minLen.sink)
		(?, 1)    eval_BZ2_hbCreateDecodeTables_bb7_in(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) -> eval_BZ2_hbCreateDecodeTables_bb7_in(v_alphaSize, v_i.0, v_i.1 + 1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) [ v_i.1 < 23 ]
		(?, 1)    eval_BZ2_hbCreateDecodeTables_bb7_in(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) -> eval_BZ2_hbCreateDecodeTables_bb9_in(v_alphaSize, v_i.0, v_i.1, 0, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) [ v_i.1 >= 23 ]
		(?, 1)    eval_BZ2_hbCreateDecodeTables_bb9_in(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) -> eval_BZ2_hbCreateDecodeTables_bb9_in(v_alphaSize, v_i.0, v_i.1, v_i.2 + 1, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) [ v_i.2 < v_alphaSize ]
		(?, 1)    eval_BZ2_hbCreateDecodeTables_bb9_in(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) -> eval_BZ2_hbCreateDecodeTables_bb11_in(v_alphaSize, v_i.0, v_i.1, v_i.2, 1, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) [ v_i.2 >= v_alphaSize ]
		(?, 1)    eval_BZ2_hbCreateDecodeTables_bb11_in(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) -> eval_BZ2_hbCreateDecodeTables_bb11_in(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3 + 1, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) [ v_i.3 < 23 ]
		(?, 1)    eval_BZ2_hbCreateDecodeTables_bb11_in(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) -> eval_BZ2_hbCreateDecodeTables_bb13_in(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, 0, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) [ v_i.3 >= 23 ]
		(?, 1)    eval_BZ2_hbCreateDecodeTables_bb13_in(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) -> eval_BZ2_hbCreateDecodeTables_bb13_in(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4 + 1, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) [ v_i.4 < 23 ]
		(?, 1)    eval_BZ2_hbCreateDecodeTables_bb13_in(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) -> eval_BZ2_hbCreateDecodeTables_bb15_in(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_minLen, v_j.0, v_maxLen, v_minLen, v_minLen.sink) [ v_i.4 >= 23 ]
		(?, 1)    eval_BZ2_hbCreateDecodeTables_bb15_in(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) -> eval_BZ2_hbCreateDecodeTables_bb15_in(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5 + 1, v_j.0, v_maxLen, v_minLen, v_minLen.sink) [ v_i.5 <= v_maxLen ]
		(?, 1)    eval_BZ2_hbCreateDecodeTables_bb15_in(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) -> eval_BZ2_hbCreateDecodeTables_bb17_in(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen) [ v_i.5 > v_maxLen ]
		(?, 1)    eval_BZ2_hbCreateDecodeTables_bb17_in(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) -> eval_BZ2_hbCreateDecodeTables_bb17_in(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink + 1) [ v_minLen.sink + 1 <= v_maxLen ]
	start location:	eval_BZ2_hbCreateDecodeTables_start
	leaf cost:	1

Repeatedly propagating knowledge in problem 2 produces the following problem:
3:	T:
		(1, 1)    eval_BZ2_hbCreateDecodeTables_start(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) -> eval_BZ2_hbCreateDecodeTables_bb0_in(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink)
		(1, 1)    eval_BZ2_hbCreateDecodeTables_bb0_in(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) -> eval_BZ2_hbCreateDecodeTables_bb1_in(v_alphaSize, v_minLen, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink)
		(?, 1)    eval_BZ2_hbCreateDecodeTables_bb1_in(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) -> eval_BZ2_hbCreateDecodeTables_bb2_in(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, 0, v_maxLen, v_minLen, v_minLen.sink) [ v_i.0 <= v_maxLen ]
		(?, 1)    eval_BZ2_hbCreateDecodeTables_bb1_in(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) -> eval_BZ2_hbCreateDecodeTables_bb7_in(v_alphaSize, v_i.0, 0, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) [ v_i.0 > v_maxLen ]
		(?, 1)    eval_BZ2_hbCreateDecodeTables_bb2_in(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) -> eval_BZ2_hbCreateDecodeTables_bb5_in(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) [ v_j.0 < v_alphaSize ]
		(?, 1)    eval_BZ2_hbCreateDecodeTables_bb2_in(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) -> eval_BZ2_hbCreateDecodeTables_bb1_in(v_alphaSize, v_i.0 + 1, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) [ v_j.0 >= v_alphaSize ]
		(?, 1)    eval_BZ2_hbCreateDecodeTables_bb5_in(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) -> eval_BZ2_hbCreateDecodeTables_bb2_in(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0 + 1, v_maxLen, v_minLen, v_minLen.sink)
		(?, 1)    eval_BZ2_hbCreateDecodeTables_bb7_in(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) -> eval_BZ2_hbCreateDecodeTables_bb7_in(v_alphaSize, v_i.0, v_i.1 + 1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) [ v_i.1 < 23 ]
		(?, 1)    eval_BZ2_hbCreateDecodeTables_bb7_in(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) -> eval_BZ2_hbCreateDecodeTables_bb9_in(v_alphaSize, v_i.0, v_i.1, 0, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) [ v_i.1 >= 23 ]
		(?, 1)    eval_BZ2_hbCreateDecodeTables_bb9_in(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) -> eval_BZ2_hbCreateDecodeTables_bb9_in(v_alphaSize, v_i.0, v_i.1, v_i.2 + 1, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) [ v_i.2 < v_alphaSize ]
		(?, 1)    eval_BZ2_hbCreateDecodeTables_bb9_in(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) -> eval_BZ2_hbCreateDecodeTables_bb11_in(v_alphaSize, v_i.0, v_i.1, v_i.2, 1, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) [ v_i.2 >= v_alphaSize ]
		(?, 1)    eval_BZ2_hbCreateDecodeTables_bb11_in(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) -> eval_BZ2_hbCreateDecodeTables_bb11_in(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3 + 1, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) [ v_i.3 < 23 ]
		(?, 1)    eval_BZ2_hbCreateDecodeTables_bb11_in(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) -> eval_BZ2_hbCreateDecodeTables_bb13_in(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, 0, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) [ v_i.3 >= 23 ]
		(?, 1)    eval_BZ2_hbCreateDecodeTables_bb13_in(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) -> eval_BZ2_hbCreateDecodeTables_bb13_in(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4 + 1, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) [ v_i.4 < 23 ]
		(?, 1)    eval_BZ2_hbCreateDecodeTables_bb13_in(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) -> eval_BZ2_hbCreateDecodeTables_bb15_in(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_minLen, v_j.0, v_maxLen, v_minLen, v_minLen.sink) [ v_i.4 >= 23 ]
		(?, 1)    eval_BZ2_hbCreateDecodeTables_bb15_in(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) -> eval_BZ2_hbCreateDecodeTables_bb15_in(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5 + 1, v_j.0, v_maxLen, v_minLen, v_minLen.sink) [ v_i.5 <= v_maxLen ]
		(?, 1)    eval_BZ2_hbCreateDecodeTables_bb15_in(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) -> eval_BZ2_hbCreateDecodeTables_bb17_in(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen) [ v_i.5 > v_maxLen ]
		(?, 1)    eval_BZ2_hbCreateDecodeTables_bb17_in(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) -> eval_BZ2_hbCreateDecodeTables_bb17_in(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink + 1) [ v_minLen.sink + 1 <= v_maxLen ]
	start location:	eval_BZ2_hbCreateDecodeTables_start
	leaf cost:	1

Separating problem 3 produces the isolated subproblem
10001:	T:
		(1, 0)    inner_10000_start_sep(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) -> eval_BZ2_hbCreateDecodeTables_bb2_in(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, 0, v_maxLen, v_minLen, v_minLen.sink)
		(?, 1)    eval_BZ2_hbCreateDecodeTables_bb5_in(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) -> eval_BZ2_hbCreateDecodeTables_bb2_in(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0 + 1, v_maxLen, v_minLen, v_minLen.sink)
		(?, 1)    eval_BZ2_hbCreateDecodeTables_bb2_in(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) -> eval_BZ2_hbCreateDecodeTables_bb5_in(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) [ v_j.0 < v_alphaSize ]
	start location:	inner_10000_start_sep
	leaf cost:	0

=== begin of proof for isolated subproblem 10001 ===
	Initial complexity problem:
	10001:	T:
			(1, 0)    inner_10000_start_sep(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) -> eval_BZ2_hbCreateDecodeTables_bb2_in(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, 0, v_maxLen, v_minLen, v_minLen.sink)
			(?, 1)    eval_BZ2_hbCreateDecodeTables_bb5_in(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) -> eval_BZ2_hbCreateDecodeTables_bb2_in(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0 + 1, v_maxLen, v_minLen, v_minLen.sink)
			(?, 1)    eval_BZ2_hbCreateDecodeTables_bb2_in(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) -> eval_BZ2_hbCreateDecodeTables_bb5_in(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) [ v_j.0 < v_alphaSize ]
		start location:	inner_10000_start_sep
		leaf cost:	0
	
	A polynomial rank function with
		Pol(inner_10000_start_sep) = V_1
		Pol(eval_BZ2_hbCreateDecodeTables_bb2_in) = V_1 - V_8
		Pol(eval_BZ2_hbCreateDecodeTables_bb5_in) = V_1 - V_8 - 1
	orients all transitions weakly and the transition
		eval_BZ2_hbCreateDecodeTables_bb2_in(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) -> eval_BZ2_hbCreateDecodeTables_bb5_in(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) [ v_j.0 < v_alphaSize ]
	strictly and produces the following problem:
	10002:	T:
			(1, 0)              inner_10000_start_sep(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) -> eval_BZ2_hbCreateDecodeTables_bb2_in(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, 0, v_maxLen, v_minLen, v_minLen.sink)
			(?, 1)              eval_BZ2_hbCreateDecodeTables_bb5_in(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) -> eval_BZ2_hbCreateDecodeTables_bb2_in(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0 + 1, v_maxLen, v_minLen, v_minLen.sink)
			(v_alphaSize, 1)    eval_BZ2_hbCreateDecodeTables_bb2_in(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) -> eval_BZ2_hbCreateDecodeTables_bb5_in(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) [ v_j.0 < v_alphaSize ]
		start location:	inner_10000_start_sep
		leaf cost:	0
	
	Repeatedly propagating knowledge in problem 10002 produces the following problem:
	10003:	T:
			(1, 0)              inner_10000_start_sep(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) -> eval_BZ2_hbCreateDecodeTables_bb2_in(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, 0, v_maxLen, v_minLen, v_minLen.sink)
			(v_alphaSize, 1)    eval_BZ2_hbCreateDecodeTables_bb5_in(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) -> eval_BZ2_hbCreateDecodeTables_bb2_in(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0 + 1, v_maxLen, v_minLen, v_minLen.sink)
			(v_alphaSize, 1)    eval_BZ2_hbCreateDecodeTables_bb2_in(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) -> eval_BZ2_hbCreateDecodeTables_bb5_in(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) [ v_j.0 < v_alphaSize ]
		start location:	inner_10000_start_sep
		leaf cost:	0
=== end of proof for isolated subproblem 10001 ===

Applying the information from the isolated subproblem 10001 to problem 3 produces the following problem:
4:	T:
		(?, 0)                inner_10000_in_sep(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) -> inner_10000_out_sep(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink)
		(?, 2*v_alphaSize)    inner_10000_in_sep(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) -> inner_10000_compl_sep(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink)
		(?, 0)                inner_10000_compl_sep(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) -> inner_10000_out_sep(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0_sep, v_maxLen, v_minLen, v_minLen.sink) [ v_alphaSize >= 0 /\ v_j.0_sep >= 0 /\ v_j.0_sep <= v_alphaSize ]
		(?, 0)                inner_10000_compl_sep(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) -> inner_10000_out_sep(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0_sep, v_maxLen, v_minLen, v_minLen.sink) [ v_alphaSize >= 0 /\ v_j.0_sep < 0 /\ -v_j.0_sep <= v_alphaSize ]
		(?, 0)                inner_10000_compl_sep(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) -> inner_10000_out_sep(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0_sep, v_maxLen, v_minLen, v_minLen.sink) [ v_alphaSize < 0 /\ v_j.0_sep >= 0 /\ v_j.0_sep <= -v_alphaSize ]
		(?, 0)                inner_10000_compl_sep(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) -> inner_10000_out_sep(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0_sep, v_maxLen, v_minLen, v_minLen.sink) [ v_alphaSize < 0 /\ v_j.0_sep < 0 /\ -v_j.0_sep <= -v_alphaSize ]
		(?, 1)                inner_10000_out_sep(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) -> eval_BZ2_hbCreateDecodeTables_bb1_in(v_alphaSize, v_i.0 + 1, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) [ v_j.0 >= v_alphaSize ]
		(?, 1)                eval_BZ2_hbCreateDecodeTables_bb1_in(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) -> inner_10000_in_sep(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, 0, v_maxLen, v_minLen, v_minLen.sink) [ v_i.0 <= v_maxLen ]
		(?, 1)                eval_BZ2_hbCreateDecodeTables_bb17_in(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) -> eval_BZ2_hbCreateDecodeTables_bb17_in(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink + 1) [ v_minLen.sink + 1 <= v_maxLen ]
		(?, 1)                eval_BZ2_hbCreateDecodeTables_bb15_in(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) -> eval_BZ2_hbCreateDecodeTables_bb17_in(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen) [ v_i.5 > v_maxLen ]
		(?, 1)                eval_BZ2_hbCreateDecodeTables_bb15_in(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) -> eval_BZ2_hbCreateDecodeTables_bb15_in(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5 + 1, v_j.0, v_maxLen, v_minLen, v_minLen.sink) [ v_i.5 <= v_maxLen ]
		(?, 1)                eval_BZ2_hbCreateDecodeTables_bb13_in(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) -> eval_BZ2_hbCreateDecodeTables_bb15_in(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_minLen, v_j.0, v_maxLen, v_minLen, v_minLen.sink) [ v_i.4 >= 23 ]
		(?, 1)                eval_BZ2_hbCreateDecodeTables_bb13_in(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) -> eval_BZ2_hbCreateDecodeTables_bb13_in(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4 + 1, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) [ v_i.4 < 23 ]
		(?, 1)                eval_BZ2_hbCreateDecodeTables_bb11_in(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) -> eval_BZ2_hbCreateDecodeTables_bb13_in(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, 0, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) [ v_i.3 >= 23 ]
		(?, 1)                eval_BZ2_hbCreateDecodeTables_bb11_in(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) -> eval_BZ2_hbCreateDecodeTables_bb11_in(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3 + 1, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) [ v_i.3 < 23 ]
		(?, 1)                eval_BZ2_hbCreateDecodeTables_bb9_in(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) -> eval_BZ2_hbCreateDecodeTables_bb11_in(v_alphaSize, v_i.0, v_i.1, v_i.2, 1, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) [ v_i.2 >= v_alphaSize ]
		(?, 1)                eval_BZ2_hbCreateDecodeTables_bb9_in(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) -> eval_BZ2_hbCreateDecodeTables_bb9_in(v_alphaSize, v_i.0, v_i.1, v_i.2 + 1, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) [ v_i.2 < v_alphaSize ]
		(?, 1)                eval_BZ2_hbCreateDecodeTables_bb7_in(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) -> eval_BZ2_hbCreateDecodeTables_bb9_in(v_alphaSize, v_i.0, v_i.1, 0, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) [ v_i.1 >= 23 ]
		(?, 1)                eval_BZ2_hbCreateDecodeTables_bb7_in(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) -> eval_BZ2_hbCreateDecodeTables_bb7_in(v_alphaSize, v_i.0, v_i.1 + 1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) [ v_i.1 < 23 ]
		(?, 1)                eval_BZ2_hbCreateDecodeTables_bb1_in(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) -> eval_BZ2_hbCreateDecodeTables_bb7_in(v_alphaSize, v_i.0, 0, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) [ v_i.0 > v_maxLen ]
		(1, 1)                eval_BZ2_hbCreateDecodeTables_bb0_in(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) -> eval_BZ2_hbCreateDecodeTables_bb1_in(v_alphaSize, v_minLen, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink)
		(1, 1)                eval_BZ2_hbCreateDecodeTables_start(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) -> eval_BZ2_hbCreateDecodeTables_bb0_in(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink)
	start location:	eval_BZ2_hbCreateDecodeTables_start
	leaf cost:	1

Applied AI with 'oct' on problem 4 to obtain the following invariants:
  For symbol eval_BZ2_hbCreateDecodeTables_bb11_in: X_2 - X_9 - 1 >= 0 /\ X_5 - 1 >= 0 /\ X_4 + X_5 - 1 >= 0 /\ X_3 + X_5 - 24 >= 0 /\ X_4 >= 0 /\ X_3 + X_4 - 23 >= 0 /\ -X_1 + X_4 >= 0 /\ X_3 - 23 >= 0 /\ -X_10 + X_2 >= 0
  For symbol eval_BZ2_hbCreateDecodeTables_bb13_in: X_2 - X_9 - 1 >= 0 /\ X_6 >= 0 /\ X_5 + X_6 - 23 >= 0 /\ X_4 + X_6 >= 0 /\ X_3 + X_6 - 23 >= 0 /\ X_5 - 23 >= 0 /\ X_4 + X_5 - 23 >= 0 /\ X_3 + X_5 - 46 >= 0 /\ X_4 >= 0 /\ X_3 + X_4 - 23 >= 0 /\ -X_1 + X_4 >= 0 /\ X_3 - 23 >= 0 /\ -X_10 + X_2 >= 0
  For symbol eval_BZ2_hbCreateDecodeTables_bb15_in: X_2 - X_9 - 1 >= 0 /\ X_2 - X_7 >= 0 /\ -X_10 + X_7 >= 0 /\ X_6 - 23 >= 0 /\ X_5 + X_6 - 46 >= 0 /\ X_4 + X_6 - 23 >= 0 /\ X_3 + X_6 - 46 >= 0 /\ X_5 - 23 >= 0 /\ X_4 + X_5 - 23 >= 0 /\ X_3 + X_5 - 46 >= 0 /\ X_4 >= 0 /\ X_3 + X_4 - 23 >= 0 /\ -X_1 + X_4 >= 0 /\ X_3 - 23 >= 0 /\ -X_10 + X_2 >= 0
  For symbol eval_BZ2_hbCreateDecodeTables_bb17_in: X_7 - X_9 - 1 >= 0 /\ X_2 - X_9 - 1 >= 0 /\ X_2 - X_7 >= 0 /\ -X_11 + X_7 >= 0 /\ -X_10 + X_7 >= 0 /\ X_6 - 23 >= 0 /\ X_5 + X_6 - 46 >= 0 /\ X_4 + X_6 - 23 >= 0 /\ X_3 + X_6 - 46 >= 0 /\ X_5 - 23 >= 0 /\ X_4 + X_5 - 23 >= 0 /\ X_3 + X_5 - 46 >= 0 /\ X_4 >= 0 /\ X_3 + X_4 - 23 >= 0 /\ -X_1 + X_4 >= 0 /\ X_3 - 23 >= 0 /\ -X_11 + X_2 >= 0 /\ -X_10 + X_2 >= 0 /\ -X_10 + X_11 >= 0
  For symbol eval_BZ2_hbCreateDecodeTables_bb1_in: -X_10 + X_2 >= 0
  For symbol eval_BZ2_hbCreateDecodeTables_bb7_in: X_2 - X_9 - 1 >= 0 /\ X_3 >= 0 /\ -X_10 + X_2 >= 0
  For symbol eval_BZ2_hbCreateDecodeTables_bb9_in: X_2 - X_9 - 1 >= 0 /\ X_4 >= 0 /\ X_3 + X_4 - 23 >= 0 /\ X_3 - 23 >= 0 /\ -X_10 + X_2 >= 0
  For symbol inner_10000_compl_sep: -X_2 + X_9 >= 0 /\ -X_10 + X_9 >= 0 /\ -X_8 >= 0 /\ X_8 >= 0 /\ -X_10 + X_2 >= 0
  For symbol inner_10000_in_sep: -X_2 + X_9 >= 0 /\ -X_10 + X_9 >= 0 /\ -X_8 >= 0 /\ X_8 >= 0 /\ -X_10 + X_2 >= 0
  For symbol inner_10000_out_sep: -X_2 + X_9 >= 0 /\ -X_10 + X_9 >= 0 /\ -X_10 + X_2 >= 0


This yielded the following problem:
5:	T:
		(1, 1)                eval_BZ2_hbCreateDecodeTables_start(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) -> eval_BZ2_hbCreateDecodeTables_bb0_in(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink)
		(1, 1)                eval_BZ2_hbCreateDecodeTables_bb0_in(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) -> eval_BZ2_hbCreateDecodeTables_bb1_in(v_alphaSize, v_minLen, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink)
		(?, 1)                eval_BZ2_hbCreateDecodeTables_bb1_in(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) -> eval_BZ2_hbCreateDecodeTables_bb7_in(v_alphaSize, v_i.0, 0, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) [ -v_minLen + v_i.0 >= 0 /\ v_i.0 > v_maxLen ]
		(?, 1)                eval_BZ2_hbCreateDecodeTables_bb7_in(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) -> eval_BZ2_hbCreateDecodeTables_bb7_in(v_alphaSize, v_i.0, v_i.1 + 1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) [ v_i.0 - v_maxLen - 1 >= 0 /\ v_i.1 >= 0 /\ -v_minLen + v_i.0 >= 0 /\ v_i.1 < 23 ]
		(?, 1)                eval_BZ2_hbCreateDecodeTables_bb7_in(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) -> eval_BZ2_hbCreateDecodeTables_bb9_in(v_alphaSize, v_i.0, v_i.1, 0, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) [ v_i.0 - v_maxLen - 1 >= 0 /\ v_i.1 >= 0 /\ -v_minLen + v_i.0 >= 0 /\ v_i.1 >= 23 ]
		(?, 1)                eval_BZ2_hbCreateDecodeTables_bb9_in(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) -> eval_BZ2_hbCreateDecodeTables_bb9_in(v_alphaSize, v_i.0, v_i.1, v_i.2 + 1, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) [ v_i.0 - v_maxLen - 1 >= 0 /\ v_i.2 >= 0 /\ v_i.1 + v_i.2 - 23 >= 0 /\ v_i.1 - 23 >= 0 /\ -v_minLen + v_i.0 >= 0 /\ v_i.2 < v_alphaSize ]
		(?, 1)                eval_BZ2_hbCreateDecodeTables_bb9_in(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) -> eval_BZ2_hbCreateDecodeTables_bb11_in(v_alphaSize, v_i.0, v_i.1, v_i.2, 1, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) [ v_i.0 - v_maxLen - 1 >= 0 /\ v_i.2 >= 0 /\ v_i.1 + v_i.2 - 23 >= 0 /\ v_i.1 - 23 >= 0 /\ -v_minLen + v_i.0 >= 0 /\ v_i.2 >= v_alphaSize ]
		(?, 1)                eval_BZ2_hbCreateDecodeTables_bb11_in(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) -> eval_BZ2_hbCreateDecodeTables_bb11_in(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3 + 1, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) [ v_i.0 - v_maxLen - 1 >= 0 /\ v_i.3 - 1 >= 0 /\ v_i.2 + v_i.3 - 1 >= 0 /\ v_i.1 + v_i.3 - 24 >= 0 /\ v_i.2 >= 0 /\ v_i.1 + v_i.2 - 23 >= 0 /\ -v_alphaSize + v_i.2 >= 0 /\ v_i.1 - 23 >= 0 /\ -v_minLen + v_i.0 >= 0 /\ v_i.3 < 23 ]
		(?, 1)                eval_BZ2_hbCreateDecodeTables_bb11_in(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) -> eval_BZ2_hbCreateDecodeTables_bb13_in(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, 0, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) [ v_i.0 - v_maxLen - 1 >= 0 /\ v_i.3 - 1 >= 0 /\ v_i.2 + v_i.3 - 1 >= 0 /\ v_i.1 + v_i.3 - 24 >= 0 /\ v_i.2 >= 0 /\ v_i.1 + v_i.2 - 23 >= 0 /\ -v_alphaSize + v_i.2 >= 0 /\ v_i.1 - 23 >= 0 /\ -v_minLen + v_i.0 >= 0 /\ v_i.3 >= 23 ]
		(?, 1)                eval_BZ2_hbCreateDecodeTables_bb13_in(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) -> eval_BZ2_hbCreateDecodeTables_bb13_in(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4 + 1, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) [ v_i.0 - v_maxLen - 1 >= 0 /\ v_i.4 >= 0 /\ v_i.3 + v_i.4 - 23 >= 0 /\ v_i.2 + v_i.4 >= 0 /\ v_i.1 + v_i.4 - 23 >= 0 /\ v_i.3 - 23 >= 0 /\ v_i.2 + v_i.3 - 23 >= 0 /\ v_i.1 + v_i.3 - 46 >= 0 /\ v_i.2 >= 0 /\ v_i.1 + v_i.2 - 23 >= 0 /\ -v_alphaSize + v_i.2 >= 0 /\ v_i.1 - 23 >= 0 /\ -v_minLen + v_i.0 >= 0 /\ v_i.4 < 23 ]
		(?, 1)                eval_BZ2_hbCreateDecodeTables_bb13_in(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) -> eval_BZ2_hbCreateDecodeTables_bb15_in(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_minLen, v_j.0, v_maxLen, v_minLen, v_minLen.sink) [ v_i.0 - v_maxLen - 1 >= 0 /\ v_i.4 >= 0 /\ v_i.3 + v_i.4 - 23 >= 0 /\ v_i.2 + v_i.4 >= 0 /\ v_i.1 + v_i.4 - 23 >= 0 /\ v_i.3 - 23 >= 0 /\ v_i.2 + v_i.3 - 23 >= 0 /\ v_i.1 + v_i.3 - 46 >= 0 /\ v_i.2 >= 0 /\ v_i.1 + v_i.2 - 23 >= 0 /\ -v_alphaSize + v_i.2 >= 0 /\ v_i.1 - 23 >= 0 /\ -v_minLen + v_i.0 >= 0 /\ v_i.4 >= 23 ]
		(?, 1)                eval_BZ2_hbCreateDecodeTables_bb15_in(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) -> eval_BZ2_hbCreateDecodeTables_bb15_in(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5 + 1, v_j.0, v_maxLen, v_minLen, v_minLen.sink) [ v_i.0 - v_maxLen - 1 >= 0 /\ v_i.0 - v_i.5 >= 0 /\ -v_minLen + v_i.5 >= 0 /\ v_i.4 - 23 >= 0 /\ v_i.3 + v_i.4 - 46 >= 0 /\ v_i.2 + v_i.4 - 23 >= 0 /\ v_i.1 + v_i.4 - 46 >= 0 /\ v_i.3 - 23 >= 0 /\ v_i.2 + v_i.3 - 23 >= 0 /\ v_i.1 + v_i.3 - 46 >= 0 /\ v_i.2 >= 0 /\ v_i.1 + v_i.2 - 23 >= 0 /\ -v_alphaSize + v_i.2 >= 0 /\ v_i.1 - 23 >= 0 /\ -v_minLen + v_i.0 >= 0 /\ v_i.5 <= v_maxLen ]
		(?, 1)                eval_BZ2_hbCreateDecodeTables_bb15_in(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) -> eval_BZ2_hbCreateDecodeTables_bb17_in(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen) [ v_i.0 - v_maxLen - 1 >= 0 /\ v_i.0 - v_i.5 >= 0 /\ -v_minLen + v_i.5 >= 0 /\ v_i.4 - 23 >= 0 /\ v_i.3 + v_i.4 - 46 >= 0 /\ v_i.2 + v_i.4 - 23 >= 0 /\ v_i.1 + v_i.4 - 46 >= 0 /\ v_i.3 - 23 >= 0 /\ v_i.2 + v_i.3 - 23 >= 0 /\ v_i.1 + v_i.3 - 46 >= 0 /\ v_i.2 >= 0 /\ v_i.1 + v_i.2 - 23 >= 0 /\ -v_alphaSize + v_i.2 >= 0 /\ v_i.1 - 23 >= 0 /\ -v_minLen + v_i.0 >= 0 /\ v_i.5 > v_maxLen ]
		(?, 1)                eval_BZ2_hbCreateDecodeTables_bb17_in(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) -> eval_BZ2_hbCreateDecodeTables_bb17_in(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink + 1) [ v_i.5 - v_maxLen - 1 >= 0 /\ v_i.0 - v_maxLen - 1 >= 0 /\ v_i.0 - v_i.5 >= 0 /\ -v_minLen.sink + v_i.5 >= 0 /\ -v_minLen + v_i.5 >= 0 /\ v_i.4 - 23 >= 0 /\ v_i.3 + v_i.4 - 46 >= 0 /\ v_i.2 + v_i.4 - 23 >= 0 /\ v_i.1 + v_i.4 - 46 >= 0 /\ v_i.3 - 23 >= 0 /\ v_i.2 + v_i.3 - 23 >= 0 /\ v_i.1 + v_i.3 - 46 >= 0 /\ v_i.2 >= 0 /\ v_i.1 + v_i.2 - 23 >= 0 /\ -v_alphaSize + v_i.2 >= 0 /\ v_i.1 - 23 >= 0 /\ -v_minLen.sink + v_i.0 >= 0 /\ -v_minLen + v_i.0 >= 0 /\ -v_minLen + v_minLen.sink >= 0 /\ v_minLen.sink + 1 <= v_maxLen ]
		(?, 1)                eval_BZ2_hbCreateDecodeTables_bb1_in(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) -> inner_10000_in_sep(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, 0, v_maxLen, v_minLen, v_minLen.sink) [ -v_minLen + v_i.0 >= 0 /\ v_i.0 <= v_maxLen ]
		(?, 1)                inner_10000_out_sep(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) -> eval_BZ2_hbCreateDecodeTables_bb1_in(v_alphaSize, v_i.0 + 1, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) [ -v_i.0 + v_maxLen >= 0 /\ -v_minLen + v_maxLen >= 0 /\ -v_minLen + v_i.0 >= 0 /\ v_j.0 >= v_alphaSize ]
		(?, 0)                inner_10000_compl_sep(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) -> inner_10000_out_sep(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0_sep, v_maxLen, v_minLen, v_minLen.sink) [ -v_i.0 + v_maxLen >= 0 /\ -v_minLen + v_maxLen >= 0 /\ -v_j.0 >= 0 /\ v_j.0 >= 0 /\ -v_minLen + v_i.0 >= 0 /\ v_alphaSize < 0 /\ v_j.0_sep < 0 /\ -v_j.0_sep <= -v_alphaSize ]
		(?, 0)                inner_10000_compl_sep(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) -> inner_10000_out_sep(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0_sep, v_maxLen, v_minLen, v_minLen.sink) [ -v_i.0 + v_maxLen >= 0 /\ -v_minLen + v_maxLen >= 0 /\ -v_j.0 >= 0 /\ v_j.0 >= 0 /\ -v_minLen + v_i.0 >= 0 /\ v_alphaSize < 0 /\ v_j.0_sep >= 0 /\ v_j.0_sep <= -v_alphaSize ]
		(?, 0)                inner_10000_compl_sep(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) -> inner_10000_out_sep(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0_sep, v_maxLen, v_minLen, v_minLen.sink) [ -v_i.0 + v_maxLen >= 0 /\ -v_minLen + v_maxLen >= 0 /\ -v_j.0 >= 0 /\ v_j.0 >= 0 /\ -v_minLen + v_i.0 >= 0 /\ v_alphaSize >= 0 /\ v_j.0_sep < 0 /\ -v_j.0_sep <= v_alphaSize ]
		(?, 0)                inner_10000_compl_sep(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) -> inner_10000_out_sep(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0_sep, v_maxLen, v_minLen, v_minLen.sink) [ -v_i.0 + v_maxLen >= 0 /\ -v_minLen + v_maxLen >= 0 /\ -v_j.0 >= 0 /\ v_j.0 >= 0 /\ -v_minLen + v_i.0 >= 0 /\ v_alphaSize >= 0 /\ v_j.0_sep >= 0 /\ v_j.0_sep <= v_alphaSize ]
		(?, 2*v_alphaSize)    inner_10000_in_sep(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) -> inner_10000_compl_sep(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) [ -v_i.0 + v_maxLen >= 0 /\ -v_minLen + v_maxLen >= 0 /\ -v_j.0 >= 0 /\ v_j.0 >= 0 /\ -v_minLen + v_i.0 >= 0 ]
		(?, 0)                inner_10000_in_sep(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) -> inner_10000_out_sep(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) [ -v_i.0 + v_maxLen >= 0 /\ -v_minLen + v_maxLen >= 0 /\ -v_j.0 >= 0 /\ v_j.0 >= 0 /\ -v_minLen + v_i.0 >= 0 ]
	start location:	eval_BZ2_hbCreateDecodeTables_start
	leaf cost:	1

A polynomial rank function with
	Pol(eval_BZ2_hbCreateDecodeTables_start) = 6
	Pol(eval_BZ2_hbCreateDecodeTables_bb0_in) = 6
	Pol(eval_BZ2_hbCreateDecodeTables_bb1_in) = 6
	Pol(eval_BZ2_hbCreateDecodeTables_bb7_in) = 5
	Pol(eval_BZ2_hbCreateDecodeTables_bb9_in) = 4
	Pol(eval_BZ2_hbCreateDecodeTables_bb11_in) = 3
	Pol(eval_BZ2_hbCreateDecodeTables_bb13_in) = 2
	Pol(eval_BZ2_hbCreateDecodeTables_bb15_in) = 1
	Pol(eval_BZ2_hbCreateDecodeTables_bb17_in) = 0
	Pol(inner_10000_in_sep) = 6
	Pol(inner_10000_out_sep) = 6
	Pol(inner_10000_compl_sep) = 6
orients all transitions weakly and the transitions
	eval_BZ2_hbCreateDecodeTables_bb9_in(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) -> eval_BZ2_hbCreateDecodeTables_bb11_in(v_alphaSize, v_i.0, v_i.1, v_i.2, 1, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) [ v_i.0 - v_maxLen - 1 >= 0 /\ v_i.2 >= 0 /\ v_i.1 + v_i.2 - 23 >= 0 /\ v_i.1 - 23 >= 0 /\ -v_minLen + v_i.0 >= 0 /\ v_i.2 >= v_alphaSize ]
	eval_BZ2_hbCreateDecodeTables_bb7_in(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) -> eval_BZ2_hbCreateDecodeTables_bb9_in(v_alphaSize, v_i.0, v_i.1, 0, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) [ v_i.0 - v_maxLen - 1 >= 0 /\ v_i.1 >= 0 /\ -v_minLen + v_i.0 >= 0 /\ v_i.1 >= 23 ]
	eval_BZ2_hbCreateDecodeTables_bb1_in(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) -> eval_BZ2_hbCreateDecodeTables_bb7_in(v_alphaSize, v_i.0, 0, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) [ -v_minLen + v_i.0 >= 0 /\ v_i.0 > v_maxLen ]
	eval_BZ2_hbCreateDecodeTables_bb15_in(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) -> eval_BZ2_hbCreateDecodeTables_bb17_in(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen) [ v_i.0 - v_maxLen - 1 >= 0 /\ v_i.0 - v_i.5 >= 0 /\ -v_minLen + v_i.5 >= 0 /\ v_i.4 - 23 >= 0 /\ v_i.3 + v_i.4 - 46 >= 0 /\ v_i.2 + v_i.4 - 23 >= 0 /\ v_i.1 + v_i.4 - 46 >= 0 /\ v_i.3 - 23 >= 0 /\ v_i.2 + v_i.3 - 23 >= 0 /\ v_i.1 + v_i.3 - 46 >= 0 /\ v_i.2 >= 0 /\ v_i.1 + v_i.2 - 23 >= 0 /\ -v_alphaSize + v_i.2 >= 0 /\ v_i.1 - 23 >= 0 /\ -v_minLen + v_i.0 >= 0 /\ v_i.5 > v_maxLen ]
	eval_BZ2_hbCreateDecodeTables_bb13_in(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) -> eval_BZ2_hbCreateDecodeTables_bb15_in(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_minLen, v_j.0, v_maxLen, v_minLen, v_minLen.sink) [ v_i.0 - v_maxLen - 1 >= 0 /\ v_i.4 >= 0 /\ v_i.3 + v_i.4 - 23 >= 0 /\ v_i.2 + v_i.4 >= 0 /\ v_i.1 + v_i.4 - 23 >= 0 /\ v_i.3 - 23 >= 0 /\ v_i.2 + v_i.3 - 23 >= 0 /\ v_i.1 + v_i.3 - 46 >= 0 /\ v_i.2 >= 0 /\ v_i.1 + v_i.2 - 23 >= 0 /\ -v_alphaSize + v_i.2 >= 0 /\ v_i.1 - 23 >= 0 /\ -v_minLen + v_i.0 >= 0 /\ v_i.4 >= 23 ]
	eval_BZ2_hbCreateDecodeTables_bb11_in(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) -> eval_BZ2_hbCreateDecodeTables_bb13_in(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, 0, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) [ v_i.0 - v_maxLen - 1 >= 0 /\ v_i.3 - 1 >= 0 /\ v_i.2 + v_i.3 - 1 >= 0 /\ v_i.1 + v_i.3 - 24 >= 0 /\ v_i.2 >= 0 /\ v_i.1 + v_i.2 - 23 >= 0 /\ -v_alphaSize + v_i.2 >= 0 /\ v_i.1 - 23 >= 0 /\ -v_minLen + v_i.0 >= 0 /\ v_i.3 >= 23 ]
strictly and produces the following problem:
6:	T:
		(1, 1)                eval_BZ2_hbCreateDecodeTables_start(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) -> eval_BZ2_hbCreateDecodeTables_bb0_in(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink)
		(1, 1)                eval_BZ2_hbCreateDecodeTables_bb0_in(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) -> eval_BZ2_hbCreateDecodeTables_bb1_in(v_alphaSize, v_minLen, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink)
		(6, 1)                eval_BZ2_hbCreateDecodeTables_bb1_in(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) -> eval_BZ2_hbCreateDecodeTables_bb7_in(v_alphaSize, v_i.0, 0, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) [ -v_minLen + v_i.0 >= 0 /\ v_i.0 > v_maxLen ]
		(?, 1)                eval_BZ2_hbCreateDecodeTables_bb7_in(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) -> eval_BZ2_hbCreateDecodeTables_bb7_in(v_alphaSize, v_i.0, v_i.1 + 1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) [ v_i.0 - v_maxLen - 1 >= 0 /\ v_i.1 >= 0 /\ -v_minLen + v_i.0 >= 0 /\ v_i.1 < 23 ]
		(6, 1)                eval_BZ2_hbCreateDecodeTables_bb7_in(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) -> eval_BZ2_hbCreateDecodeTables_bb9_in(v_alphaSize, v_i.0, v_i.1, 0, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) [ v_i.0 - v_maxLen - 1 >= 0 /\ v_i.1 >= 0 /\ -v_minLen + v_i.0 >= 0 /\ v_i.1 >= 23 ]
		(?, 1)                eval_BZ2_hbCreateDecodeTables_bb9_in(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) -> eval_BZ2_hbCreateDecodeTables_bb9_in(v_alphaSize, v_i.0, v_i.1, v_i.2 + 1, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) [ v_i.0 - v_maxLen - 1 >= 0 /\ v_i.2 >= 0 /\ v_i.1 + v_i.2 - 23 >= 0 /\ v_i.1 - 23 >= 0 /\ -v_minLen + v_i.0 >= 0 /\ v_i.2 < v_alphaSize ]
		(6, 1)                eval_BZ2_hbCreateDecodeTables_bb9_in(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) -> eval_BZ2_hbCreateDecodeTables_bb11_in(v_alphaSize, v_i.0, v_i.1, v_i.2, 1, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) [ v_i.0 - v_maxLen - 1 >= 0 /\ v_i.2 >= 0 /\ v_i.1 + v_i.2 - 23 >= 0 /\ v_i.1 - 23 >= 0 /\ -v_minLen + v_i.0 >= 0 /\ v_i.2 >= v_alphaSize ]
		(?, 1)                eval_BZ2_hbCreateDecodeTables_bb11_in(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) -> eval_BZ2_hbCreateDecodeTables_bb11_in(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3 + 1, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) [ v_i.0 - v_maxLen - 1 >= 0 /\ v_i.3 - 1 >= 0 /\ v_i.2 + v_i.3 - 1 >= 0 /\ v_i.1 + v_i.3 - 24 >= 0 /\ v_i.2 >= 0 /\ v_i.1 + v_i.2 - 23 >= 0 /\ -v_alphaSize + v_i.2 >= 0 /\ v_i.1 - 23 >= 0 /\ -v_minLen + v_i.0 >= 0 /\ v_i.3 < 23 ]
		(6, 1)                eval_BZ2_hbCreateDecodeTables_bb11_in(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) -> eval_BZ2_hbCreateDecodeTables_bb13_in(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, 0, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) [ v_i.0 - v_maxLen - 1 >= 0 /\ v_i.3 - 1 >= 0 /\ v_i.2 + v_i.3 - 1 >= 0 /\ v_i.1 + v_i.3 - 24 >= 0 /\ v_i.2 >= 0 /\ v_i.1 + v_i.2 - 23 >= 0 /\ -v_alphaSize + v_i.2 >= 0 /\ v_i.1 - 23 >= 0 /\ -v_minLen + v_i.0 >= 0 /\ v_i.3 >= 23 ]
		(?, 1)                eval_BZ2_hbCreateDecodeTables_bb13_in(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) -> eval_BZ2_hbCreateDecodeTables_bb13_in(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4 + 1, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) [ v_i.0 - v_maxLen - 1 >= 0 /\ v_i.4 >= 0 /\ v_i.3 + v_i.4 - 23 >= 0 /\ v_i.2 + v_i.4 >= 0 /\ v_i.1 + v_i.4 - 23 >= 0 /\ v_i.3 - 23 >= 0 /\ v_i.2 + v_i.3 - 23 >= 0 /\ v_i.1 + v_i.3 - 46 >= 0 /\ v_i.2 >= 0 /\ v_i.1 + v_i.2 - 23 >= 0 /\ -v_alphaSize + v_i.2 >= 0 /\ v_i.1 - 23 >= 0 /\ -v_minLen + v_i.0 >= 0 /\ v_i.4 < 23 ]
		(6, 1)                eval_BZ2_hbCreateDecodeTables_bb13_in(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) -> eval_BZ2_hbCreateDecodeTables_bb15_in(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_minLen, v_j.0, v_maxLen, v_minLen, v_minLen.sink) [ v_i.0 - v_maxLen - 1 >= 0 /\ v_i.4 >= 0 /\ v_i.3 + v_i.4 - 23 >= 0 /\ v_i.2 + v_i.4 >= 0 /\ v_i.1 + v_i.4 - 23 >= 0 /\ v_i.3 - 23 >= 0 /\ v_i.2 + v_i.3 - 23 >= 0 /\ v_i.1 + v_i.3 - 46 >= 0 /\ v_i.2 >= 0 /\ v_i.1 + v_i.2 - 23 >= 0 /\ -v_alphaSize + v_i.2 >= 0 /\ v_i.1 - 23 >= 0 /\ -v_minLen + v_i.0 >= 0 /\ v_i.4 >= 23 ]
		(?, 1)                eval_BZ2_hbCreateDecodeTables_bb15_in(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) -> eval_BZ2_hbCreateDecodeTables_bb15_in(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5 + 1, v_j.0, v_maxLen, v_minLen, v_minLen.sink) [ v_i.0 - v_maxLen - 1 >= 0 /\ v_i.0 - v_i.5 >= 0 /\ -v_minLen + v_i.5 >= 0 /\ v_i.4 - 23 >= 0 /\ v_i.3 + v_i.4 - 46 >= 0 /\ v_i.2 + v_i.4 - 23 >= 0 /\ v_i.1 + v_i.4 - 46 >= 0 /\ v_i.3 - 23 >= 0 /\ v_i.2 + v_i.3 - 23 >= 0 /\ v_i.1 + v_i.3 - 46 >= 0 /\ v_i.2 >= 0 /\ v_i.1 + v_i.2 - 23 >= 0 /\ -v_alphaSize + v_i.2 >= 0 /\ v_i.1 - 23 >= 0 /\ -v_minLen + v_i.0 >= 0 /\ v_i.5 <= v_maxLen ]
		(6, 1)                eval_BZ2_hbCreateDecodeTables_bb15_in(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) -> eval_BZ2_hbCreateDecodeTables_bb17_in(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen) [ v_i.0 - v_maxLen - 1 >= 0 /\ v_i.0 - v_i.5 >= 0 /\ -v_minLen + v_i.5 >= 0 /\ v_i.4 - 23 >= 0 /\ v_i.3 + v_i.4 - 46 >= 0 /\ v_i.2 + v_i.4 - 23 >= 0 /\ v_i.1 + v_i.4 - 46 >= 0 /\ v_i.3 - 23 >= 0 /\ v_i.2 + v_i.3 - 23 >= 0 /\ v_i.1 + v_i.3 - 46 >= 0 /\ v_i.2 >= 0 /\ v_i.1 + v_i.2 - 23 >= 0 /\ -v_alphaSize + v_i.2 >= 0 /\ v_i.1 - 23 >= 0 /\ -v_minLen + v_i.0 >= 0 /\ v_i.5 > v_maxLen ]
		(?, 1)                eval_BZ2_hbCreateDecodeTables_bb17_in(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) -> eval_BZ2_hbCreateDecodeTables_bb17_in(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink + 1) [ v_i.5 - v_maxLen - 1 >= 0 /\ v_i.0 - v_maxLen - 1 >= 0 /\ v_i.0 - v_i.5 >= 0 /\ -v_minLen.sink + v_i.5 >= 0 /\ -v_minLen + v_i.5 >= 0 /\ v_i.4 - 23 >= 0 /\ v_i.3 + v_i.4 - 46 >= 0 /\ v_i.2 + v_i.4 - 23 >= 0 /\ v_i.1 + v_i.4 - 46 >= 0 /\ v_i.3 - 23 >= 0 /\ v_i.2 + v_i.3 - 23 >= 0 /\ v_i.1 + v_i.3 - 46 >= 0 /\ v_i.2 >= 0 /\ v_i.1 + v_i.2 - 23 >= 0 /\ -v_alphaSize + v_i.2 >= 0 /\ v_i.1 - 23 >= 0 /\ -v_minLen.sink + v_i.0 >= 0 /\ -v_minLen + v_i.0 >= 0 /\ -v_minLen + v_minLen.sink >= 0 /\ v_minLen.sink + 1 <= v_maxLen ]
		(?, 1)                eval_BZ2_hbCreateDecodeTables_bb1_in(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) -> inner_10000_in_sep(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, 0, v_maxLen, v_minLen, v_minLen.sink) [ -v_minLen + v_i.0 >= 0 /\ v_i.0 <= v_maxLen ]
		(?, 1)                inner_10000_out_sep(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) -> eval_BZ2_hbCreateDecodeTables_bb1_in(v_alphaSize, v_i.0 + 1, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) [ -v_i.0 + v_maxLen >= 0 /\ -v_minLen + v_maxLen >= 0 /\ -v_minLen + v_i.0 >= 0 /\ v_j.0 >= v_alphaSize ]
		(?, 0)                inner_10000_compl_sep(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) -> inner_10000_out_sep(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0_sep, v_maxLen, v_minLen, v_minLen.sink) [ -v_i.0 + v_maxLen >= 0 /\ -v_minLen + v_maxLen >= 0 /\ -v_j.0 >= 0 /\ v_j.0 >= 0 /\ -v_minLen + v_i.0 >= 0 /\ v_alphaSize < 0 /\ v_j.0_sep < 0 /\ -v_j.0_sep <= -v_alphaSize ]
		(?, 0)                inner_10000_compl_sep(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) -> inner_10000_out_sep(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0_sep, v_maxLen, v_minLen, v_minLen.sink) [ -v_i.0 + v_maxLen >= 0 /\ -v_minLen + v_maxLen >= 0 /\ -v_j.0 >= 0 /\ v_j.0 >= 0 /\ -v_minLen + v_i.0 >= 0 /\ v_alphaSize < 0 /\ v_j.0_sep >= 0 /\ v_j.0_sep <= -v_alphaSize ]
		(?, 0)                inner_10000_compl_sep(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) -> inner_10000_out_sep(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0_sep, v_maxLen, v_minLen, v_minLen.sink) [ -v_i.0 + v_maxLen >= 0 /\ -v_minLen + v_maxLen >= 0 /\ -v_j.0 >= 0 /\ v_j.0 >= 0 /\ -v_minLen + v_i.0 >= 0 /\ v_alphaSize >= 0 /\ v_j.0_sep < 0 /\ -v_j.0_sep <= v_alphaSize ]
		(?, 0)                inner_10000_compl_sep(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) -> inner_10000_out_sep(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0_sep, v_maxLen, v_minLen, v_minLen.sink) [ -v_i.0 + v_maxLen >= 0 /\ -v_minLen + v_maxLen >= 0 /\ -v_j.0 >= 0 /\ v_j.0 >= 0 /\ -v_minLen + v_i.0 >= 0 /\ v_alphaSize >= 0 /\ v_j.0_sep >= 0 /\ v_j.0_sep <= v_alphaSize ]
		(?, 2*v_alphaSize)    inner_10000_in_sep(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) -> inner_10000_compl_sep(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) [ -v_i.0 + v_maxLen >= 0 /\ -v_minLen + v_maxLen >= 0 /\ -v_j.0 >= 0 /\ v_j.0 >= 0 /\ -v_minLen + v_i.0 >= 0 ]
		(?, 0)                inner_10000_in_sep(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) -> inner_10000_out_sep(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) [ -v_i.0 + v_maxLen >= 0 /\ -v_minLen + v_maxLen >= 0 /\ -v_j.0 >= 0 /\ v_j.0 >= 0 /\ -v_minLen + v_i.0 >= 0 ]
	start location:	eval_BZ2_hbCreateDecodeTables_start
	leaf cost:	1

A polynomial rank function with
	Pol(eval_BZ2_hbCreateDecodeTables_start) = 23
	Pol(eval_BZ2_hbCreateDecodeTables_bb0_in) = 23
	Pol(eval_BZ2_hbCreateDecodeTables_bb1_in) = 23
	Pol(eval_BZ2_hbCreateDecodeTables_bb7_in) = -V_3 + 23
	Pol(eval_BZ2_hbCreateDecodeTables_bb9_in) = -V_3
	Pol(eval_BZ2_hbCreateDecodeTables_bb11_in) = -V_3
	Pol(eval_BZ2_hbCreateDecodeTables_bb13_in) = -V_3
	Pol(eval_BZ2_hbCreateDecodeTables_bb15_in) = -V_3
	Pol(eval_BZ2_hbCreateDecodeTables_bb17_in) = -V_3
	Pol(inner_10000_in_sep) = 23
	Pol(inner_10000_out_sep) = 23
	Pol(inner_10000_compl_sep) = 23
orients all transitions weakly and the transition
	eval_BZ2_hbCreateDecodeTables_bb7_in(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) -> eval_BZ2_hbCreateDecodeTables_bb7_in(v_alphaSize, v_i.0, v_i.1 + 1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) [ v_i.0 - v_maxLen - 1 >= 0 /\ v_i.1 >= 0 /\ -v_minLen + v_i.0 >= 0 /\ v_i.1 < 23 ]
strictly and produces the following problem:
7:	T:
		(1, 1)                eval_BZ2_hbCreateDecodeTables_start(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) -> eval_BZ2_hbCreateDecodeTables_bb0_in(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink)
		(1, 1)                eval_BZ2_hbCreateDecodeTables_bb0_in(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) -> eval_BZ2_hbCreateDecodeTables_bb1_in(v_alphaSize, v_minLen, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink)
		(6, 1)                eval_BZ2_hbCreateDecodeTables_bb1_in(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) -> eval_BZ2_hbCreateDecodeTables_bb7_in(v_alphaSize, v_i.0, 0, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) [ -v_minLen + v_i.0 >= 0 /\ v_i.0 > v_maxLen ]
		(23, 1)               eval_BZ2_hbCreateDecodeTables_bb7_in(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) -> eval_BZ2_hbCreateDecodeTables_bb7_in(v_alphaSize, v_i.0, v_i.1 + 1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) [ v_i.0 - v_maxLen - 1 >= 0 /\ v_i.1 >= 0 /\ -v_minLen + v_i.0 >= 0 /\ v_i.1 < 23 ]
		(6, 1)                eval_BZ2_hbCreateDecodeTables_bb7_in(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) -> eval_BZ2_hbCreateDecodeTables_bb9_in(v_alphaSize, v_i.0, v_i.1, 0, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) [ v_i.0 - v_maxLen - 1 >= 0 /\ v_i.1 >= 0 /\ -v_minLen + v_i.0 >= 0 /\ v_i.1 >= 23 ]
		(?, 1)                eval_BZ2_hbCreateDecodeTables_bb9_in(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) -> eval_BZ2_hbCreateDecodeTables_bb9_in(v_alphaSize, v_i.0, v_i.1, v_i.2 + 1, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) [ v_i.0 - v_maxLen - 1 >= 0 /\ v_i.2 >= 0 /\ v_i.1 + v_i.2 - 23 >= 0 /\ v_i.1 - 23 >= 0 /\ -v_minLen + v_i.0 >= 0 /\ v_i.2 < v_alphaSize ]
		(6, 1)                eval_BZ2_hbCreateDecodeTables_bb9_in(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) -> eval_BZ2_hbCreateDecodeTables_bb11_in(v_alphaSize, v_i.0, v_i.1, v_i.2, 1, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) [ v_i.0 - v_maxLen - 1 >= 0 /\ v_i.2 >= 0 /\ v_i.1 + v_i.2 - 23 >= 0 /\ v_i.1 - 23 >= 0 /\ -v_minLen + v_i.0 >= 0 /\ v_i.2 >= v_alphaSize ]
		(?, 1)                eval_BZ2_hbCreateDecodeTables_bb11_in(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) -> eval_BZ2_hbCreateDecodeTables_bb11_in(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3 + 1, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) [ v_i.0 - v_maxLen - 1 >= 0 /\ v_i.3 - 1 >= 0 /\ v_i.2 + v_i.3 - 1 >= 0 /\ v_i.1 + v_i.3 - 24 >= 0 /\ v_i.2 >= 0 /\ v_i.1 + v_i.2 - 23 >= 0 /\ -v_alphaSize + v_i.2 >= 0 /\ v_i.1 - 23 >= 0 /\ -v_minLen + v_i.0 >= 0 /\ v_i.3 < 23 ]
		(6, 1)                eval_BZ2_hbCreateDecodeTables_bb11_in(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) -> eval_BZ2_hbCreateDecodeTables_bb13_in(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, 0, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) [ v_i.0 - v_maxLen - 1 >= 0 /\ v_i.3 - 1 >= 0 /\ v_i.2 + v_i.3 - 1 >= 0 /\ v_i.1 + v_i.3 - 24 >= 0 /\ v_i.2 >= 0 /\ v_i.1 + v_i.2 - 23 >= 0 /\ -v_alphaSize + v_i.2 >= 0 /\ v_i.1 - 23 >= 0 /\ -v_minLen + v_i.0 >= 0 /\ v_i.3 >= 23 ]
		(?, 1)                eval_BZ2_hbCreateDecodeTables_bb13_in(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) -> eval_BZ2_hbCreateDecodeTables_bb13_in(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4 + 1, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) [ v_i.0 - v_maxLen - 1 >= 0 /\ v_i.4 >= 0 /\ v_i.3 + v_i.4 - 23 >= 0 /\ v_i.2 + v_i.4 >= 0 /\ v_i.1 + v_i.4 - 23 >= 0 /\ v_i.3 - 23 >= 0 /\ v_i.2 + v_i.3 - 23 >= 0 /\ v_i.1 + v_i.3 - 46 >= 0 /\ v_i.2 >= 0 /\ v_i.1 + v_i.2 - 23 >= 0 /\ -v_alphaSize + v_i.2 >= 0 /\ v_i.1 - 23 >= 0 /\ -v_minLen + v_i.0 >= 0 /\ v_i.4 < 23 ]
		(6, 1)                eval_BZ2_hbCreateDecodeTables_bb13_in(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) -> eval_BZ2_hbCreateDecodeTables_bb15_in(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_minLen, v_j.0, v_maxLen, v_minLen, v_minLen.sink) [ v_i.0 - v_maxLen - 1 >= 0 /\ v_i.4 >= 0 /\ v_i.3 + v_i.4 - 23 >= 0 /\ v_i.2 + v_i.4 >= 0 /\ v_i.1 + v_i.4 - 23 >= 0 /\ v_i.3 - 23 >= 0 /\ v_i.2 + v_i.3 - 23 >= 0 /\ v_i.1 + v_i.3 - 46 >= 0 /\ v_i.2 >= 0 /\ v_i.1 + v_i.2 - 23 >= 0 /\ -v_alphaSize + v_i.2 >= 0 /\ v_i.1 - 23 >= 0 /\ -v_minLen + v_i.0 >= 0 /\ v_i.4 >= 23 ]
		(?, 1)                eval_BZ2_hbCreateDecodeTables_bb15_in(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) -> eval_BZ2_hbCreateDecodeTables_bb15_in(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5 + 1, v_j.0, v_maxLen, v_minLen, v_minLen.sink) [ v_i.0 - v_maxLen - 1 >= 0 /\ v_i.0 - v_i.5 >= 0 /\ -v_minLen + v_i.5 >= 0 /\ v_i.4 - 23 >= 0 /\ v_i.3 + v_i.4 - 46 >= 0 /\ v_i.2 + v_i.4 - 23 >= 0 /\ v_i.1 + v_i.4 - 46 >= 0 /\ v_i.3 - 23 >= 0 /\ v_i.2 + v_i.3 - 23 >= 0 /\ v_i.1 + v_i.3 - 46 >= 0 /\ v_i.2 >= 0 /\ v_i.1 + v_i.2 - 23 >= 0 /\ -v_alphaSize + v_i.2 >= 0 /\ v_i.1 - 23 >= 0 /\ -v_minLen + v_i.0 >= 0 /\ v_i.5 <= v_maxLen ]
		(6, 1)                eval_BZ2_hbCreateDecodeTables_bb15_in(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) -> eval_BZ2_hbCreateDecodeTables_bb17_in(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen) [ v_i.0 - v_maxLen - 1 >= 0 /\ v_i.0 - v_i.5 >= 0 /\ -v_minLen + v_i.5 >= 0 /\ v_i.4 - 23 >= 0 /\ v_i.3 + v_i.4 - 46 >= 0 /\ v_i.2 + v_i.4 - 23 >= 0 /\ v_i.1 + v_i.4 - 46 >= 0 /\ v_i.3 - 23 >= 0 /\ v_i.2 + v_i.3 - 23 >= 0 /\ v_i.1 + v_i.3 - 46 >= 0 /\ v_i.2 >= 0 /\ v_i.1 + v_i.2 - 23 >= 0 /\ -v_alphaSize + v_i.2 >= 0 /\ v_i.1 - 23 >= 0 /\ -v_minLen + v_i.0 >= 0 /\ v_i.5 > v_maxLen ]
		(?, 1)                eval_BZ2_hbCreateDecodeTables_bb17_in(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) -> eval_BZ2_hbCreateDecodeTables_bb17_in(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink + 1) [ v_i.5 - v_maxLen - 1 >= 0 /\ v_i.0 - v_maxLen - 1 >= 0 /\ v_i.0 - v_i.5 >= 0 /\ -v_minLen.sink + v_i.5 >= 0 /\ -v_minLen + v_i.5 >= 0 /\ v_i.4 - 23 >= 0 /\ v_i.3 + v_i.4 - 46 >= 0 /\ v_i.2 + v_i.4 - 23 >= 0 /\ v_i.1 + v_i.4 - 46 >= 0 /\ v_i.3 - 23 >= 0 /\ v_i.2 + v_i.3 - 23 >= 0 /\ v_i.1 + v_i.3 - 46 >= 0 /\ v_i.2 >= 0 /\ v_i.1 + v_i.2 - 23 >= 0 /\ -v_alphaSize + v_i.2 >= 0 /\ v_i.1 - 23 >= 0 /\ -v_minLen.sink + v_i.0 >= 0 /\ -v_minLen + v_i.0 >= 0 /\ -v_minLen + v_minLen.sink >= 0 /\ v_minLen.sink + 1 <= v_maxLen ]
		(?, 1)                eval_BZ2_hbCreateDecodeTables_bb1_in(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) -> inner_10000_in_sep(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, 0, v_maxLen, v_minLen, v_minLen.sink) [ -v_minLen + v_i.0 >= 0 /\ v_i.0 <= v_maxLen ]
		(?, 1)                inner_10000_out_sep(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) -> eval_BZ2_hbCreateDecodeTables_bb1_in(v_alphaSize, v_i.0 + 1, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) [ -v_i.0 + v_maxLen >= 0 /\ -v_minLen + v_maxLen >= 0 /\ -v_minLen + v_i.0 >= 0 /\ v_j.0 >= v_alphaSize ]
		(?, 0)                inner_10000_compl_sep(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) -> inner_10000_out_sep(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0_sep, v_maxLen, v_minLen, v_minLen.sink) [ -v_i.0 + v_maxLen >= 0 /\ -v_minLen + v_maxLen >= 0 /\ -v_j.0 >= 0 /\ v_j.0 >= 0 /\ -v_minLen + v_i.0 >= 0 /\ v_alphaSize < 0 /\ v_j.0_sep < 0 /\ -v_j.0_sep <= -v_alphaSize ]
		(?, 0)                inner_10000_compl_sep(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) -> inner_10000_out_sep(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0_sep, v_maxLen, v_minLen, v_minLen.sink) [ -v_i.0 + v_maxLen >= 0 /\ -v_minLen + v_maxLen >= 0 /\ -v_j.0 >= 0 /\ v_j.0 >= 0 /\ -v_minLen + v_i.0 >= 0 /\ v_alphaSize < 0 /\ v_j.0_sep >= 0 /\ v_j.0_sep <= -v_alphaSize ]
		(?, 0)                inner_10000_compl_sep(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) -> inner_10000_out_sep(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0_sep, v_maxLen, v_minLen, v_minLen.sink) [ -v_i.0 + v_maxLen >= 0 /\ -v_minLen + v_maxLen >= 0 /\ -v_j.0 >= 0 /\ v_j.0 >= 0 /\ -v_minLen + v_i.0 >= 0 /\ v_alphaSize >= 0 /\ v_j.0_sep < 0 /\ -v_j.0_sep <= v_alphaSize ]
		(?, 0)                inner_10000_compl_sep(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) -> inner_10000_out_sep(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0_sep, v_maxLen, v_minLen, v_minLen.sink) [ -v_i.0 + v_maxLen >= 0 /\ -v_minLen + v_maxLen >= 0 /\ -v_j.0 >= 0 /\ v_j.0 >= 0 /\ -v_minLen + v_i.0 >= 0 /\ v_alphaSize >= 0 /\ v_j.0_sep >= 0 /\ v_j.0_sep <= v_alphaSize ]
		(?, 2*v_alphaSize)    inner_10000_in_sep(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) -> inner_10000_compl_sep(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) [ -v_i.0 + v_maxLen >= 0 /\ -v_minLen + v_maxLen >= 0 /\ -v_j.0 >= 0 /\ v_j.0 >= 0 /\ -v_minLen + v_i.0 >= 0 ]
		(?, 0)                inner_10000_in_sep(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) -> inner_10000_out_sep(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) [ -v_i.0 + v_maxLen >= 0 /\ -v_minLen + v_maxLen >= 0 /\ -v_j.0 >= 0 /\ v_j.0 >= 0 /\ -v_minLen + v_i.0 >= 0 ]
	start location:	eval_BZ2_hbCreateDecodeTables_start
	leaf cost:	1

A polynomial rank function with
	Pol(eval_BZ2_hbCreateDecodeTables_start) = V_1
	Pol(eval_BZ2_hbCreateDecodeTables_bb0_in) = V_1
	Pol(eval_BZ2_hbCreateDecodeTables_bb1_in) = V_1
	Pol(eval_BZ2_hbCreateDecodeTables_bb7_in) = V_1
	Pol(eval_BZ2_hbCreateDecodeTables_bb9_in) = V_1 - V_4
	Pol(eval_BZ2_hbCreateDecodeTables_bb11_in) = V_1 - V_4
	Pol(eval_BZ2_hbCreateDecodeTables_bb13_in) = V_1 - V_4
	Pol(eval_BZ2_hbCreateDecodeTables_bb15_in) = V_1 - V_4
	Pol(eval_BZ2_hbCreateDecodeTables_bb17_in) = V_1 - V_4
	Pol(inner_10000_in_sep) = V_1
	Pol(inner_10000_out_sep) = V_1
	Pol(inner_10000_compl_sep) = V_1
orients all transitions weakly and the transition
	eval_BZ2_hbCreateDecodeTables_bb9_in(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) -> eval_BZ2_hbCreateDecodeTables_bb9_in(v_alphaSize, v_i.0, v_i.1, v_i.2 + 1, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) [ v_i.0 - v_maxLen - 1 >= 0 /\ v_i.2 >= 0 /\ v_i.1 + v_i.2 - 23 >= 0 /\ v_i.1 - 23 >= 0 /\ -v_minLen + v_i.0 >= 0 /\ v_i.2 < v_alphaSize ]
strictly and produces the following problem:
8:	T:
		(1, 1)                eval_BZ2_hbCreateDecodeTables_start(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) -> eval_BZ2_hbCreateDecodeTables_bb0_in(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink)
		(1, 1)                eval_BZ2_hbCreateDecodeTables_bb0_in(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) -> eval_BZ2_hbCreateDecodeTables_bb1_in(v_alphaSize, v_minLen, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink)
		(6, 1)                eval_BZ2_hbCreateDecodeTables_bb1_in(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) -> eval_BZ2_hbCreateDecodeTables_bb7_in(v_alphaSize, v_i.0, 0, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) [ -v_minLen + v_i.0 >= 0 /\ v_i.0 > v_maxLen ]
		(23, 1)               eval_BZ2_hbCreateDecodeTables_bb7_in(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) -> eval_BZ2_hbCreateDecodeTables_bb7_in(v_alphaSize, v_i.0, v_i.1 + 1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) [ v_i.0 - v_maxLen - 1 >= 0 /\ v_i.1 >= 0 /\ -v_minLen + v_i.0 >= 0 /\ v_i.1 < 23 ]
		(6, 1)                eval_BZ2_hbCreateDecodeTables_bb7_in(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) -> eval_BZ2_hbCreateDecodeTables_bb9_in(v_alphaSize, v_i.0, v_i.1, 0, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) [ v_i.0 - v_maxLen - 1 >= 0 /\ v_i.1 >= 0 /\ -v_minLen + v_i.0 >= 0 /\ v_i.1 >= 23 ]
		(v_alphaSize, 1)      eval_BZ2_hbCreateDecodeTables_bb9_in(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) -> eval_BZ2_hbCreateDecodeTables_bb9_in(v_alphaSize, v_i.0, v_i.1, v_i.2 + 1, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) [ v_i.0 - v_maxLen - 1 >= 0 /\ v_i.2 >= 0 /\ v_i.1 + v_i.2 - 23 >= 0 /\ v_i.1 - 23 >= 0 /\ -v_minLen + v_i.0 >= 0 /\ v_i.2 < v_alphaSize ]
		(6, 1)                eval_BZ2_hbCreateDecodeTables_bb9_in(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) -> eval_BZ2_hbCreateDecodeTables_bb11_in(v_alphaSize, v_i.0, v_i.1, v_i.2, 1, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) [ v_i.0 - v_maxLen - 1 >= 0 /\ v_i.2 >= 0 /\ v_i.1 + v_i.2 - 23 >= 0 /\ v_i.1 - 23 >= 0 /\ -v_minLen + v_i.0 >= 0 /\ v_i.2 >= v_alphaSize ]
		(?, 1)                eval_BZ2_hbCreateDecodeTables_bb11_in(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) -> eval_BZ2_hbCreateDecodeTables_bb11_in(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3 + 1, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) [ v_i.0 - v_maxLen - 1 >= 0 /\ v_i.3 - 1 >= 0 /\ v_i.2 + v_i.3 - 1 >= 0 /\ v_i.1 + v_i.3 - 24 >= 0 /\ v_i.2 >= 0 /\ v_i.1 + v_i.2 - 23 >= 0 /\ -v_alphaSize + v_i.2 >= 0 /\ v_i.1 - 23 >= 0 /\ -v_minLen + v_i.0 >= 0 /\ v_i.3 < 23 ]
		(6, 1)                eval_BZ2_hbCreateDecodeTables_bb11_in(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) -> eval_BZ2_hbCreateDecodeTables_bb13_in(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, 0, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) [ v_i.0 - v_maxLen - 1 >= 0 /\ v_i.3 - 1 >= 0 /\ v_i.2 + v_i.3 - 1 >= 0 /\ v_i.1 + v_i.3 - 24 >= 0 /\ v_i.2 >= 0 /\ v_i.1 + v_i.2 - 23 >= 0 /\ -v_alphaSize + v_i.2 >= 0 /\ v_i.1 - 23 >= 0 /\ -v_minLen + v_i.0 >= 0 /\ v_i.3 >= 23 ]
		(?, 1)                eval_BZ2_hbCreateDecodeTables_bb13_in(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) -> eval_BZ2_hbCreateDecodeTables_bb13_in(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4 + 1, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) [ v_i.0 - v_maxLen - 1 >= 0 /\ v_i.4 >= 0 /\ v_i.3 + v_i.4 - 23 >= 0 /\ v_i.2 + v_i.4 >= 0 /\ v_i.1 + v_i.4 - 23 >= 0 /\ v_i.3 - 23 >= 0 /\ v_i.2 + v_i.3 - 23 >= 0 /\ v_i.1 + v_i.3 - 46 >= 0 /\ v_i.2 >= 0 /\ v_i.1 + v_i.2 - 23 >= 0 /\ -v_alphaSize + v_i.2 >= 0 /\ v_i.1 - 23 >= 0 /\ -v_minLen + v_i.0 >= 0 /\ v_i.4 < 23 ]
		(6, 1)                eval_BZ2_hbCreateDecodeTables_bb13_in(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) -> eval_BZ2_hbCreateDecodeTables_bb15_in(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_minLen, v_j.0, v_maxLen, v_minLen, v_minLen.sink) [ v_i.0 - v_maxLen - 1 >= 0 /\ v_i.4 >= 0 /\ v_i.3 + v_i.4 - 23 >= 0 /\ v_i.2 + v_i.4 >= 0 /\ v_i.1 + v_i.4 - 23 >= 0 /\ v_i.3 - 23 >= 0 /\ v_i.2 + v_i.3 - 23 >= 0 /\ v_i.1 + v_i.3 - 46 >= 0 /\ v_i.2 >= 0 /\ v_i.1 + v_i.2 - 23 >= 0 /\ -v_alphaSize + v_i.2 >= 0 /\ v_i.1 - 23 >= 0 /\ -v_minLen + v_i.0 >= 0 /\ v_i.4 >= 23 ]
		(?, 1)                eval_BZ2_hbCreateDecodeTables_bb15_in(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) -> eval_BZ2_hbCreateDecodeTables_bb15_in(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5 + 1, v_j.0, v_maxLen, v_minLen, v_minLen.sink) [ v_i.0 - v_maxLen - 1 >= 0 /\ v_i.0 - v_i.5 >= 0 /\ -v_minLen + v_i.5 >= 0 /\ v_i.4 - 23 >= 0 /\ v_i.3 + v_i.4 - 46 >= 0 /\ v_i.2 + v_i.4 - 23 >= 0 /\ v_i.1 + v_i.4 - 46 >= 0 /\ v_i.3 - 23 >= 0 /\ v_i.2 + v_i.3 - 23 >= 0 /\ v_i.1 + v_i.3 - 46 >= 0 /\ v_i.2 >= 0 /\ v_i.1 + v_i.2 - 23 >= 0 /\ -v_alphaSize + v_i.2 >= 0 /\ v_i.1 - 23 >= 0 /\ -v_minLen + v_i.0 >= 0 /\ v_i.5 <= v_maxLen ]
		(6, 1)                eval_BZ2_hbCreateDecodeTables_bb15_in(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) -> eval_BZ2_hbCreateDecodeTables_bb17_in(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen) [ v_i.0 - v_maxLen - 1 >= 0 /\ v_i.0 - v_i.5 >= 0 /\ -v_minLen + v_i.5 >= 0 /\ v_i.4 - 23 >= 0 /\ v_i.3 + v_i.4 - 46 >= 0 /\ v_i.2 + v_i.4 - 23 >= 0 /\ v_i.1 + v_i.4 - 46 >= 0 /\ v_i.3 - 23 >= 0 /\ v_i.2 + v_i.3 - 23 >= 0 /\ v_i.1 + v_i.3 - 46 >= 0 /\ v_i.2 >= 0 /\ v_i.1 + v_i.2 - 23 >= 0 /\ -v_alphaSize + v_i.2 >= 0 /\ v_i.1 - 23 >= 0 /\ -v_minLen + v_i.0 >= 0 /\ v_i.5 > v_maxLen ]
		(?, 1)                eval_BZ2_hbCreateDecodeTables_bb17_in(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) -> eval_BZ2_hbCreateDecodeTables_bb17_in(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink + 1) [ v_i.5 - v_maxLen - 1 >= 0 /\ v_i.0 - v_maxLen - 1 >= 0 /\ v_i.0 - v_i.5 >= 0 /\ -v_minLen.sink + v_i.5 >= 0 /\ -v_minLen + v_i.5 >= 0 /\ v_i.4 - 23 >= 0 /\ v_i.3 + v_i.4 - 46 >= 0 /\ v_i.2 + v_i.4 - 23 >= 0 /\ v_i.1 + v_i.4 - 46 >= 0 /\ v_i.3 - 23 >= 0 /\ v_i.2 + v_i.3 - 23 >= 0 /\ v_i.1 + v_i.3 - 46 >= 0 /\ v_i.2 >= 0 /\ v_i.1 + v_i.2 - 23 >= 0 /\ -v_alphaSize + v_i.2 >= 0 /\ v_i.1 - 23 >= 0 /\ -v_minLen.sink + v_i.0 >= 0 /\ -v_minLen + v_i.0 >= 0 /\ -v_minLen + v_minLen.sink >= 0 /\ v_minLen.sink + 1 <= v_maxLen ]
		(?, 1)                eval_BZ2_hbCreateDecodeTables_bb1_in(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) -> inner_10000_in_sep(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, 0, v_maxLen, v_minLen, v_minLen.sink) [ -v_minLen + v_i.0 >= 0 /\ v_i.0 <= v_maxLen ]
		(?, 1)                inner_10000_out_sep(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) -> eval_BZ2_hbCreateDecodeTables_bb1_in(v_alphaSize, v_i.0 + 1, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) [ -v_i.0 + v_maxLen >= 0 /\ -v_minLen + v_maxLen >= 0 /\ -v_minLen + v_i.0 >= 0 /\ v_j.0 >= v_alphaSize ]
		(?, 0)                inner_10000_compl_sep(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) -> inner_10000_out_sep(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0_sep, v_maxLen, v_minLen, v_minLen.sink) [ -v_i.0 + v_maxLen >= 0 /\ -v_minLen + v_maxLen >= 0 /\ -v_j.0 >= 0 /\ v_j.0 >= 0 /\ -v_minLen + v_i.0 >= 0 /\ v_alphaSize < 0 /\ v_j.0_sep < 0 /\ -v_j.0_sep <= -v_alphaSize ]
		(?, 0)                inner_10000_compl_sep(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) -> inner_10000_out_sep(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0_sep, v_maxLen, v_minLen, v_minLen.sink) [ -v_i.0 + v_maxLen >= 0 /\ -v_minLen + v_maxLen >= 0 /\ -v_j.0 >= 0 /\ v_j.0 >= 0 /\ -v_minLen + v_i.0 >= 0 /\ v_alphaSize < 0 /\ v_j.0_sep >= 0 /\ v_j.0_sep <= -v_alphaSize ]
		(?, 0)                inner_10000_compl_sep(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) -> inner_10000_out_sep(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0_sep, v_maxLen, v_minLen, v_minLen.sink) [ -v_i.0 + v_maxLen >= 0 /\ -v_minLen + v_maxLen >= 0 /\ -v_j.0 >= 0 /\ v_j.0 >= 0 /\ -v_minLen + v_i.0 >= 0 /\ v_alphaSize >= 0 /\ v_j.0_sep < 0 /\ -v_j.0_sep <= v_alphaSize ]
		(?, 0)                inner_10000_compl_sep(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) -> inner_10000_out_sep(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0_sep, v_maxLen, v_minLen, v_minLen.sink) [ -v_i.0 + v_maxLen >= 0 /\ -v_minLen + v_maxLen >= 0 /\ -v_j.0 >= 0 /\ v_j.0 >= 0 /\ -v_minLen + v_i.0 >= 0 /\ v_alphaSize >= 0 /\ v_j.0_sep >= 0 /\ v_j.0_sep <= v_alphaSize ]
		(?, 2*v_alphaSize)    inner_10000_in_sep(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) -> inner_10000_compl_sep(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) [ -v_i.0 + v_maxLen >= 0 /\ -v_minLen + v_maxLen >= 0 /\ -v_j.0 >= 0 /\ v_j.0 >= 0 /\ -v_minLen + v_i.0 >= 0 ]
		(?, 0)                inner_10000_in_sep(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) -> inner_10000_out_sep(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) [ -v_i.0 + v_maxLen >= 0 /\ -v_minLen + v_maxLen >= 0 /\ -v_j.0 >= 0 /\ v_j.0 >= 0 /\ -v_minLen + v_i.0 >= 0 ]
	start location:	eval_BZ2_hbCreateDecodeTables_start
	leaf cost:	1

A polynomial rank function with
	Pol(eval_BZ2_hbCreateDecodeTables_start) = 22
	Pol(eval_BZ2_hbCreateDecodeTables_bb0_in) = 22
	Pol(eval_BZ2_hbCreateDecodeTables_bb1_in) = 22
	Pol(eval_BZ2_hbCreateDecodeTables_bb7_in) = 22
	Pol(eval_BZ2_hbCreateDecodeTables_bb9_in) = 22
	Pol(eval_BZ2_hbCreateDecodeTables_bb11_in) = -V_5 + 23
	Pol(eval_BZ2_hbCreateDecodeTables_bb13_in) = -V_5
	Pol(eval_BZ2_hbCreateDecodeTables_bb15_in) = -V_5
	Pol(eval_BZ2_hbCreateDecodeTables_bb17_in) = -V_5
	Pol(inner_10000_in_sep) = 22
	Pol(inner_10000_out_sep) = 22
	Pol(inner_10000_compl_sep) = 22
orients all transitions weakly and the transition
	eval_BZ2_hbCreateDecodeTables_bb11_in(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) -> eval_BZ2_hbCreateDecodeTables_bb11_in(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3 + 1, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) [ v_i.0 - v_maxLen - 1 >= 0 /\ v_i.3 - 1 >= 0 /\ v_i.2 + v_i.3 - 1 >= 0 /\ v_i.1 + v_i.3 - 24 >= 0 /\ v_i.2 >= 0 /\ v_i.1 + v_i.2 - 23 >= 0 /\ -v_alphaSize + v_i.2 >= 0 /\ v_i.1 - 23 >= 0 /\ -v_minLen + v_i.0 >= 0 /\ v_i.3 < 23 ]
strictly and produces the following problem:
9:	T:
		(1, 1)                eval_BZ2_hbCreateDecodeTables_start(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) -> eval_BZ2_hbCreateDecodeTables_bb0_in(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink)
		(1, 1)                eval_BZ2_hbCreateDecodeTables_bb0_in(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) -> eval_BZ2_hbCreateDecodeTables_bb1_in(v_alphaSize, v_minLen, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink)
		(6, 1)                eval_BZ2_hbCreateDecodeTables_bb1_in(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) -> eval_BZ2_hbCreateDecodeTables_bb7_in(v_alphaSize, v_i.0, 0, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) [ -v_minLen + v_i.0 >= 0 /\ v_i.0 > v_maxLen ]
		(23, 1)               eval_BZ2_hbCreateDecodeTables_bb7_in(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) -> eval_BZ2_hbCreateDecodeTables_bb7_in(v_alphaSize, v_i.0, v_i.1 + 1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) [ v_i.0 - v_maxLen - 1 >= 0 /\ v_i.1 >= 0 /\ -v_minLen + v_i.0 >= 0 /\ v_i.1 < 23 ]
		(6, 1)                eval_BZ2_hbCreateDecodeTables_bb7_in(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) -> eval_BZ2_hbCreateDecodeTables_bb9_in(v_alphaSize, v_i.0, v_i.1, 0, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) [ v_i.0 - v_maxLen - 1 >= 0 /\ v_i.1 >= 0 /\ -v_minLen + v_i.0 >= 0 /\ v_i.1 >= 23 ]
		(v_alphaSize, 1)      eval_BZ2_hbCreateDecodeTables_bb9_in(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) -> eval_BZ2_hbCreateDecodeTables_bb9_in(v_alphaSize, v_i.0, v_i.1, v_i.2 + 1, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) [ v_i.0 - v_maxLen - 1 >= 0 /\ v_i.2 >= 0 /\ v_i.1 + v_i.2 - 23 >= 0 /\ v_i.1 - 23 >= 0 /\ -v_minLen + v_i.0 >= 0 /\ v_i.2 < v_alphaSize ]
		(6, 1)                eval_BZ2_hbCreateDecodeTables_bb9_in(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) -> eval_BZ2_hbCreateDecodeTables_bb11_in(v_alphaSize, v_i.0, v_i.1, v_i.2, 1, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) [ v_i.0 - v_maxLen - 1 >= 0 /\ v_i.2 >= 0 /\ v_i.1 + v_i.2 - 23 >= 0 /\ v_i.1 - 23 >= 0 /\ -v_minLen + v_i.0 >= 0 /\ v_i.2 >= v_alphaSize ]
		(22, 1)               eval_BZ2_hbCreateDecodeTables_bb11_in(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) -> eval_BZ2_hbCreateDecodeTables_bb11_in(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3 + 1, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) [ v_i.0 - v_maxLen - 1 >= 0 /\ v_i.3 - 1 >= 0 /\ v_i.2 + v_i.3 - 1 >= 0 /\ v_i.1 + v_i.3 - 24 >= 0 /\ v_i.2 >= 0 /\ v_i.1 + v_i.2 - 23 >= 0 /\ -v_alphaSize + v_i.2 >= 0 /\ v_i.1 - 23 >= 0 /\ -v_minLen + v_i.0 >= 0 /\ v_i.3 < 23 ]
		(6, 1)                eval_BZ2_hbCreateDecodeTables_bb11_in(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) -> eval_BZ2_hbCreateDecodeTables_bb13_in(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, 0, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) [ v_i.0 - v_maxLen - 1 >= 0 /\ v_i.3 - 1 >= 0 /\ v_i.2 + v_i.3 - 1 >= 0 /\ v_i.1 + v_i.3 - 24 >= 0 /\ v_i.2 >= 0 /\ v_i.1 + v_i.2 - 23 >= 0 /\ -v_alphaSize + v_i.2 >= 0 /\ v_i.1 - 23 >= 0 /\ -v_minLen + v_i.0 >= 0 /\ v_i.3 >= 23 ]
		(?, 1)                eval_BZ2_hbCreateDecodeTables_bb13_in(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) -> eval_BZ2_hbCreateDecodeTables_bb13_in(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4 + 1, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) [ v_i.0 - v_maxLen - 1 >= 0 /\ v_i.4 >= 0 /\ v_i.3 + v_i.4 - 23 >= 0 /\ v_i.2 + v_i.4 >= 0 /\ v_i.1 + v_i.4 - 23 >= 0 /\ v_i.3 - 23 >= 0 /\ v_i.2 + v_i.3 - 23 >= 0 /\ v_i.1 + v_i.3 - 46 >= 0 /\ v_i.2 >= 0 /\ v_i.1 + v_i.2 - 23 >= 0 /\ -v_alphaSize + v_i.2 >= 0 /\ v_i.1 - 23 >= 0 /\ -v_minLen + v_i.0 >= 0 /\ v_i.4 < 23 ]
		(6, 1)                eval_BZ2_hbCreateDecodeTables_bb13_in(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) -> eval_BZ2_hbCreateDecodeTables_bb15_in(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_minLen, v_j.0, v_maxLen, v_minLen, v_minLen.sink) [ v_i.0 - v_maxLen - 1 >= 0 /\ v_i.4 >= 0 /\ v_i.3 + v_i.4 - 23 >= 0 /\ v_i.2 + v_i.4 >= 0 /\ v_i.1 + v_i.4 - 23 >= 0 /\ v_i.3 - 23 >= 0 /\ v_i.2 + v_i.3 - 23 >= 0 /\ v_i.1 + v_i.3 - 46 >= 0 /\ v_i.2 >= 0 /\ v_i.1 + v_i.2 - 23 >= 0 /\ -v_alphaSize + v_i.2 >= 0 /\ v_i.1 - 23 >= 0 /\ -v_minLen + v_i.0 >= 0 /\ v_i.4 >= 23 ]
		(?, 1)                eval_BZ2_hbCreateDecodeTables_bb15_in(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) -> eval_BZ2_hbCreateDecodeTables_bb15_in(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5 + 1, v_j.0, v_maxLen, v_minLen, v_minLen.sink) [ v_i.0 - v_maxLen - 1 >= 0 /\ v_i.0 - v_i.5 >= 0 /\ -v_minLen + v_i.5 >= 0 /\ v_i.4 - 23 >= 0 /\ v_i.3 + v_i.4 - 46 >= 0 /\ v_i.2 + v_i.4 - 23 >= 0 /\ v_i.1 + v_i.4 - 46 >= 0 /\ v_i.3 - 23 >= 0 /\ v_i.2 + v_i.3 - 23 >= 0 /\ v_i.1 + v_i.3 - 46 >= 0 /\ v_i.2 >= 0 /\ v_i.1 + v_i.2 - 23 >= 0 /\ -v_alphaSize + v_i.2 >= 0 /\ v_i.1 - 23 >= 0 /\ -v_minLen + v_i.0 >= 0 /\ v_i.5 <= v_maxLen ]
		(6, 1)                eval_BZ2_hbCreateDecodeTables_bb15_in(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) -> eval_BZ2_hbCreateDecodeTables_bb17_in(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen) [ v_i.0 - v_maxLen - 1 >= 0 /\ v_i.0 - v_i.5 >= 0 /\ -v_minLen + v_i.5 >= 0 /\ v_i.4 - 23 >= 0 /\ v_i.3 + v_i.4 - 46 >= 0 /\ v_i.2 + v_i.4 - 23 >= 0 /\ v_i.1 + v_i.4 - 46 >= 0 /\ v_i.3 - 23 >= 0 /\ v_i.2 + v_i.3 - 23 >= 0 /\ v_i.1 + v_i.3 - 46 >= 0 /\ v_i.2 >= 0 /\ v_i.1 + v_i.2 - 23 >= 0 /\ -v_alphaSize + v_i.2 >= 0 /\ v_i.1 - 23 >= 0 /\ -v_minLen + v_i.0 >= 0 /\ v_i.5 > v_maxLen ]
		(?, 1)                eval_BZ2_hbCreateDecodeTables_bb17_in(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) -> eval_BZ2_hbCreateDecodeTables_bb17_in(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink + 1) [ v_i.5 - v_maxLen - 1 >= 0 /\ v_i.0 - v_maxLen - 1 >= 0 /\ v_i.0 - v_i.5 >= 0 /\ -v_minLen.sink + v_i.5 >= 0 /\ -v_minLen + v_i.5 >= 0 /\ v_i.4 - 23 >= 0 /\ v_i.3 + v_i.4 - 46 >= 0 /\ v_i.2 + v_i.4 - 23 >= 0 /\ v_i.1 + v_i.4 - 46 >= 0 /\ v_i.3 - 23 >= 0 /\ v_i.2 + v_i.3 - 23 >= 0 /\ v_i.1 + v_i.3 - 46 >= 0 /\ v_i.2 >= 0 /\ v_i.1 + v_i.2 - 23 >= 0 /\ -v_alphaSize + v_i.2 >= 0 /\ v_i.1 - 23 >= 0 /\ -v_minLen.sink + v_i.0 >= 0 /\ -v_minLen + v_i.0 >= 0 /\ -v_minLen + v_minLen.sink >= 0 /\ v_minLen.sink + 1 <= v_maxLen ]
		(?, 1)                eval_BZ2_hbCreateDecodeTables_bb1_in(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) -> inner_10000_in_sep(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, 0, v_maxLen, v_minLen, v_minLen.sink) [ -v_minLen + v_i.0 >= 0 /\ v_i.0 <= v_maxLen ]
		(?, 1)                inner_10000_out_sep(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) -> eval_BZ2_hbCreateDecodeTables_bb1_in(v_alphaSize, v_i.0 + 1, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) [ -v_i.0 + v_maxLen >= 0 /\ -v_minLen + v_maxLen >= 0 /\ -v_minLen + v_i.0 >= 0 /\ v_j.0 >= v_alphaSize ]
		(?, 0)                inner_10000_compl_sep(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) -> inner_10000_out_sep(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0_sep, v_maxLen, v_minLen, v_minLen.sink) [ -v_i.0 + v_maxLen >= 0 /\ -v_minLen + v_maxLen >= 0 /\ -v_j.0 >= 0 /\ v_j.0 >= 0 /\ -v_minLen + v_i.0 >= 0 /\ v_alphaSize < 0 /\ v_j.0_sep < 0 /\ -v_j.0_sep <= -v_alphaSize ]
		(?, 0)                inner_10000_compl_sep(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) -> inner_10000_out_sep(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0_sep, v_maxLen, v_minLen, v_minLen.sink) [ -v_i.0 + v_maxLen >= 0 /\ -v_minLen + v_maxLen >= 0 /\ -v_j.0 >= 0 /\ v_j.0 >= 0 /\ -v_minLen + v_i.0 >= 0 /\ v_alphaSize < 0 /\ v_j.0_sep >= 0 /\ v_j.0_sep <= -v_alphaSize ]
		(?, 0)                inner_10000_compl_sep(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) -> inner_10000_out_sep(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0_sep, v_maxLen, v_minLen, v_minLen.sink) [ -v_i.0 + v_maxLen >= 0 /\ -v_minLen + v_maxLen >= 0 /\ -v_j.0 >= 0 /\ v_j.0 >= 0 /\ -v_minLen + v_i.0 >= 0 /\ v_alphaSize >= 0 /\ v_j.0_sep < 0 /\ -v_j.0_sep <= v_alphaSize ]
		(?, 0)                inner_10000_compl_sep(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) -> inner_10000_out_sep(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0_sep, v_maxLen, v_minLen, v_minLen.sink) [ -v_i.0 + v_maxLen >= 0 /\ -v_minLen + v_maxLen >= 0 /\ -v_j.0 >= 0 /\ v_j.0 >= 0 /\ -v_minLen + v_i.0 >= 0 /\ v_alphaSize >= 0 /\ v_j.0_sep >= 0 /\ v_j.0_sep <= v_alphaSize ]
		(?, 2*v_alphaSize)    inner_10000_in_sep(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) -> inner_10000_compl_sep(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) [ -v_i.0 + v_maxLen >= 0 /\ -v_minLen + v_maxLen >= 0 /\ -v_j.0 >= 0 /\ v_j.0 >= 0 /\ -v_minLen + v_i.0 >= 0 ]
		(?, 0)                inner_10000_in_sep(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) -> inner_10000_out_sep(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) [ -v_i.0 + v_maxLen >= 0 /\ -v_minLen + v_maxLen >= 0 /\ -v_j.0 >= 0 /\ v_j.0 >= 0 /\ -v_minLen + v_i.0 >= 0 ]
	start location:	eval_BZ2_hbCreateDecodeTables_start
	leaf cost:	1

A polynomial rank function with
	Pol(eval_BZ2_hbCreateDecodeTables_start) = 23
	Pol(eval_BZ2_hbCreateDecodeTables_bb0_in) = 23
	Pol(eval_BZ2_hbCreateDecodeTables_bb1_in) = 23
	Pol(eval_BZ2_hbCreateDecodeTables_bb7_in) = 23
	Pol(eval_BZ2_hbCreateDecodeTables_bb9_in) = 23
	Pol(eval_BZ2_hbCreateDecodeTables_bb11_in) = 23
	Pol(eval_BZ2_hbCreateDecodeTables_bb13_in) = -V_6 + 23
	Pol(eval_BZ2_hbCreateDecodeTables_bb15_in) = -V_6
	Pol(eval_BZ2_hbCreateDecodeTables_bb17_in) = -V_6
	Pol(inner_10000_in_sep) = 23
	Pol(inner_10000_out_sep) = 23
	Pol(inner_10000_compl_sep) = 23
orients all transitions weakly and the transition
	eval_BZ2_hbCreateDecodeTables_bb13_in(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) -> eval_BZ2_hbCreateDecodeTables_bb13_in(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4 + 1, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) [ v_i.0 - v_maxLen - 1 >= 0 /\ v_i.4 >= 0 /\ v_i.3 + v_i.4 - 23 >= 0 /\ v_i.2 + v_i.4 >= 0 /\ v_i.1 + v_i.4 - 23 >= 0 /\ v_i.3 - 23 >= 0 /\ v_i.2 + v_i.3 - 23 >= 0 /\ v_i.1 + v_i.3 - 46 >= 0 /\ v_i.2 >= 0 /\ v_i.1 + v_i.2 - 23 >= 0 /\ -v_alphaSize + v_i.2 >= 0 /\ v_i.1 - 23 >= 0 /\ -v_minLen + v_i.0 >= 0 /\ v_i.4 < 23 ]
strictly and produces the following problem:
10:	T:
		(1, 1)                eval_BZ2_hbCreateDecodeTables_start(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) -> eval_BZ2_hbCreateDecodeTables_bb0_in(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink)
		(1, 1)                eval_BZ2_hbCreateDecodeTables_bb0_in(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) -> eval_BZ2_hbCreateDecodeTables_bb1_in(v_alphaSize, v_minLen, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink)
		(6, 1)                eval_BZ2_hbCreateDecodeTables_bb1_in(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) -> eval_BZ2_hbCreateDecodeTables_bb7_in(v_alphaSize, v_i.0, 0, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) [ -v_minLen + v_i.0 >= 0 /\ v_i.0 > v_maxLen ]
		(23, 1)               eval_BZ2_hbCreateDecodeTables_bb7_in(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) -> eval_BZ2_hbCreateDecodeTables_bb7_in(v_alphaSize, v_i.0, v_i.1 + 1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) [ v_i.0 - v_maxLen - 1 >= 0 /\ v_i.1 >= 0 /\ -v_minLen + v_i.0 >= 0 /\ v_i.1 < 23 ]
		(6, 1)                eval_BZ2_hbCreateDecodeTables_bb7_in(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) -> eval_BZ2_hbCreateDecodeTables_bb9_in(v_alphaSize, v_i.0, v_i.1, 0, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) [ v_i.0 - v_maxLen - 1 >= 0 /\ v_i.1 >= 0 /\ -v_minLen + v_i.0 >= 0 /\ v_i.1 >= 23 ]
		(v_alphaSize, 1)      eval_BZ2_hbCreateDecodeTables_bb9_in(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) -> eval_BZ2_hbCreateDecodeTables_bb9_in(v_alphaSize, v_i.0, v_i.1, v_i.2 + 1, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) [ v_i.0 - v_maxLen - 1 >= 0 /\ v_i.2 >= 0 /\ v_i.1 + v_i.2 - 23 >= 0 /\ v_i.1 - 23 >= 0 /\ -v_minLen + v_i.0 >= 0 /\ v_i.2 < v_alphaSize ]
		(6, 1)                eval_BZ2_hbCreateDecodeTables_bb9_in(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) -> eval_BZ2_hbCreateDecodeTables_bb11_in(v_alphaSize, v_i.0, v_i.1, v_i.2, 1, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) [ v_i.0 - v_maxLen - 1 >= 0 /\ v_i.2 >= 0 /\ v_i.1 + v_i.2 - 23 >= 0 /\ v_i.1 - 23 >= 0 /\ -v_minLen + v_i.0 >= 0 /\ v_i.2 >= v_alphaSize ]
		(22, 1)               eval_BZ2_hbCreateDecodeTables_bb11_in(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) -> eval_BZ2_hbCreateDecodeTables_bb11_in(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3 + 1, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) [ v_i.0 - v_maxLen - 1 >= 0 /\ v_i.3 - 1 >= 0 /\ v_i.2 + v_i.3 - 1 >= 0 /\ v_i.1 + v_i.3 - 24 >= 0 /\ v_i.2 >= 0 /\ v_i.1 + v_i.2 - 23 >= 0 /\ -v_alphaSize + v_i.2 >= 0 /\ v_i.1 - 23 >= 0 /\ -v_minLen + v_i.0 >= 0 /\ v_i.3 < 23 ]
		(6, 1)                eval_BZ2_hbCreateDecodeTables_bb11_in(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) -> eval_BZ2_hbCreateDecodeTables_bb13_in(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, 0, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) [ v_i.0 - v_maxLen - 1 >= 0 /\ v_i.3 - 1 >= 0 /\ v_i.2 + v_i.3 - 1 >= 0 /\ v_i.1 + v_i.3 - 24 >= 0 /\ v_i.2 >= 0 /\ v_i.1 + v_i.2 - 23 >= 0 /\ -v_alphaSize + v_i.2 >= 0 /\ v_i.1 - 23 >= 0 /\ -v_minLen + v_i.0 >= 0 /\ v_i.3 >= 23 ]
		(23, 1)               eval_BZ2_hbCreateDecodeTables_bb13_in(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) -> eval_BZ2_hbCreateDecodeTables_bb13_in(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4 + 1, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) [ v_i.0 - v_maxLen - 1 >= 0 /\ v_i.4 >= 0 /\ v_i.3 + v_i.4 - 23 >= 0 /\ v_i.2 + v_i.4 >= 0 /\ v_i.1 + v_i.4 - 23 >= 0 /\ v_i.3 - 23 >= 0 /\ v_i.2 + v_i.3 - 23 >= 0 /\ v_i.1 + v_i.3 - 46 >= 0 /\ v_i.2 >= 0 /\ v_i.1 + v_i.2 - 23 >= 0 /\ -v_alphaSize + v_i.2 >= 0 /\ v_i.1 - 23 >= 0 /\ -v_minLen + v_i.0 >= 0 /\ v_i.4 < 23 ]
		(6, 1)                eval_BZ2_hbCreateDecodeTables_bb13_in(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) -> eval_BZ2_hbCreateDecodeTables_bb15_in(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_minLen, v_j.0, v_maxLen, v_minLen, v_minLen.sink) [ v_i.0 - v_maxLen - 1 >= 0 /\ v_i.4 >= 0 /\ v_i.3 + v_i.4 - 23 >= 0 /\ v_i.2 + v_i.4 >= 0 /\ v_i.1 + v_i.4 - 23 >= 0 /\ v_i.3 - 23 >= 0 /\ v_i.2 + v_i.3 - 23 >= 0 /\ v_i.1 + v_i.3 - 46 >= 0 /\ v_i.2 >= 0 /\ v_i.1 + v_i.2 - 23 >= 0 /\ -v_alphaSize + v_i.2 >= 0 /\ v_i.1 - 23 >= 0 /\ -v_minLen + v_i.0 >= 0 /\ v_i.4 >= 23 ]
		(?, 1)                eval_BZ2_hbCreateDecodeTables_bb15_in(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) -> eval_BZ2_hbCreateDecodeTables_bb15_in(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5 + 1, v_j.0, v_maxLen, v_minLen, v_minLen.sink) [ v_i.0 - v_maxLen - 1 >= 0 /\ v_i.0 - v_i.5 >= 0 /\ -v_minLen + v_i.5 >= 0 /\ v_i.4 - 23 >= 0 /\ v_i.3 + v_i.4 - 46 >= 0 /\ v_i.2 + v_i.4 - 23 >= 0 /\ v_i.1 + v_i.4 - 46 >= 0 /\ v_i.3 - 23 >= 0 /\ v_i.2 + v_i.3 - 23 >= 0 /\ v_i.1 + v_i.3 - 46 >= 0 /\ v_i.2 >= 0 /\ v_i.1 + v_i.2 - 23 >= 0 /\ -v_alphaSize + v_i.2 >= 0 /\ v_i.1 - 23 >= 0 /\ -v_minLen + v_i.0 >= 0 /\ v_i.5 <= v_maxLen ]
		(6, 1)                eval_BZ2_hbCreateDecodeTables_bb15_in(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) -> eval_BZ2_hbCreateDecodeTables_bb17_in(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen) [ v_i.0 - v_maxLen - 1 >= 0 /\ v_i.0 - v_i.5 >= 0 /\ -v_minLen + v_i.5 >= 0 /\ v_i.4 - 23 >= 0 /\ v_i.3 + v_i.4 - 46 >= 0 /\ v_i.2 + v_i.4 - 23 >= 0 /\ v_i.1 + v_i.4 - 46 >= 0 /\ v_i.3 - 23 >= 0 /\ v_i.2 + v_i.3 - 23 >= 0 /\ v_i.1 + v_i.3 - 46 >= 0 /\ v_i.2 >= 0 /\ v_i.1 + v_i.2 - 23 >= 0 /\ -v_alphaSize + v_i.2 >= 0 /\ v_i.1 - 23 >= 0 /\ -v_minLen + v_i.0 >= 0 /\ v_i.5 > v_maxLen ]
		(?, 1)                eval_BZ2_hbCreateDecodeTables_bb17_in(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) -> eval_BZ2_hbCreateDecodeTables_bb17_in(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink + 1) [ v_i.5 - v_maxLen - 1 >= 0 /\ v_i.0 - v_maxLen - 1 >= 0 /\ v_i.0 - v_i.5 >= 0 /\ -v_minLen.sink + v_i.5 >= 0 /\ -v_minLen + v_i.5 >= 0 /\ v_i.4 - 23 >= 0 /\ v_i.3 + v_i.4 - 46 >= 0 /\ v_i.2 + v_i.4 - 23 >= 0 /\ v_i.1 + v_i.4 - 46 >= 0 /\ v_i.3 - 23 >= 0 /\ v_i.2 + v_i.3 - 23 >= 0 /\ v_i.1 + v_i.3 - 46 >= 0 /\ v_i.2 >= 0 /\ v_i.1 + v_i.2 - 23 >= 0 /\ -v_alphaSize + v_i.2 >= 0 /\ v_i.1 - 23 >= 0 /\ -v_minLen.sink + v_i.0 >= 0 /\ -v_minLen + v_i.0 >= 0 /\ -v_minLen + v_minLen.sink >= 0 /\ v_minLen.sink + 1 <= v_maxLen ]
		(?, 1)                eval_BZ2_hbCreateDecodeTables_bb1_in(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) -> inner_10000_in_sep(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, 0, v_maxLen, v_minLen, v_minLen.sink) [ -v_minLen + v_i.0 >= 0 /\ v_i.0 <= v_maxLen ]
		(?, 1)                inner_10000_out_sep(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) -> eval_BZ2_hbCreateDecodeTables_bb1_in(v_alphaSize, v_i.0 + 1, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) [ -v_i.0 + v_maxLen >= 0 /\ -v_minLen + v_maxLen >= 0 /\ -v_minLen + v_i.0 >= 0 /\ v_j.0 >= v_alphaSize ]
		(?, 0)                inner_10000_compl_sep(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) -> inner_10000_out_sep(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0_sep, v_maxLen, v_minLen, v_minLen.sink) [ -v_i.0 + v_maxLen >= 0 /\ -v_minLen + v_maxLen >= 0 /\ -v_j.0 >= 0 /\ v_j.0 >= 0 /\ -v_minLen + v_i.0 >= 0 /\ v_alphaSize < 0 /\ v_j.0_sep < 0 /\ -v_j.0_sep <= -v_alphaSize ]
		(?, 0)                inner_10000_compl_sep(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) -> inner_10000_out_sep(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0_sep, v_maxLen, v_minLen, v_minLen.sink) [ -v_i.0 + v_maxLen >= 0 /\ -v_minLen + v_maxLen >= 0 /\ -v_j.0 >= 0 /\ v_j.0 >= 0 /\ -v_minLen + v_i.0 >= 0 /\ v_alphaSize < 0 /\ v_j.0_sep >= 0 /\ v_j.0_sep <= -v_alphaSize ]
		(?, 0)                inner_10000_compl_sep(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) -> inner_10000_out_sep(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0_sep, v_maxLen, v_minLen, v_minLen.sink) [ -v_i.0 + v_maxLen >= 0 /\ -v_minLen + v_maxLen >= 0 /\ -v_j.0 >= 0 /\ v_j.0 >= 0 /\ -v_minLen + v_i.0 >= 0 /\ v_alphaSize >= 0 /\ v_j.0_sep < 0 /\ -v_j.0_sep <= v_alphaSize ]
		(?, 0)                inner_10000_compl_sep(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) -> inner_10000_out_sep(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0_sep, v_maxLen, v_minLen, v_minLen.sink) [ -v_i.0 + v_maxLen >= 0 /\ -v_minLen + v_maxLen >= 0 /\ -v_j.0 >= 0 /\ v_j.0 >= 0 /\ -v_minLen + v_i.0 >= 0 /\ v_alphaSize >= 0 /\ v_j.0_sep >= 0 /\ v_j.0_sep <= v_alphaSize ]
		(?, 2*v_alphaSize)    inner_10000_in_sep(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) -> inner_10000_compl_sep(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) [ -v_i.0 + v_maxLen >= 0 /\ -v_minLen + v_maxLen >= 0 /\ -v_j.0 >= 0 /\ v_j.0 >= 0 /\ -v_minLen + v_i.0 >= 0 ]
		(?, 0)                inner_10000_in_sep(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) -> inner_10000_out_sep(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) [ -v_i.0 + v_maxLen >= 0 /\ -v_minLen + v_maxLen >= 0 /\ -v_j.0 >= 0 /\ v_j.0 >= 0 /\ -v_minLen + v_i.0 >= 0 ]
	start location:	eval_BZ2_hbCreateDecodeTables_start
	leaf cost:	1

A polynomial rank function with
	Pol(eval_BZ2_hbCreateDecodeTables_start) = V_9 - V_10 + 1
	Pol(eval_BZ2_hbCreateDecodeTables_bb0_in) = V_9 - V_10 + 1
	Pol(eval_BZ2_hbCreateDecodeTables_bb1_in) = V_9 - V_10 + 1
	Pol(eval_BZ2_hbCreateDecodeTables_bb7_in) = V_9 - V_10 + 1
	Pol(eval_BZ2_hbCreateDecodeTables_bb9_in) = V_9 - V_10 + 1
	Pol(eval_BZ2_hbCreateDecodeTables_bb11_in) = V_9 - V_10 + 1
	Pol(eval_BZ2_hbCreateDecodeTables_bb13_in) = V_9 - V_10 + 1
	Pol(eval_BZ2_hbCreateDecodeTables_bb15_in) = -V_7 + V_9 + 1
	Pol(eval_BZ2_hbCreateDecodeTables_bb17_in) = -V_2 + V_9
	Pol(inner_10000_in_sep) = V_9 - V_10 + 1
	Pol(inner_10000_out_sep) = V_9 - V_10 + 1
	Pol(inner_10000_compl_sep) = V_9 - V_10 + 1
orients all transitions weakly and the transition
	eval_BZ2_hbCreateDecodeTables_bb15_in(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) -> eval_BZ2_hbCreateDecodeTables_bb15_in(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5 + 1, v_j.0, v_maxLen, v_minLen, v_minLen.sink) [ v_i.0 - v_maxLen - 1 >= 0 /\ v_i.0 - v_i.5 >= 0 /\ -v_minLen + v_i.5 >= 0 /\ v_i.4 - 23 >= 0 /\ v_i.3 + v_i.4 - 46 >= 0 /\ v_i.2 + v_i.4 - 23 >= 0 /\ v_i.1 + v_i.4 - 46 >= 0 /\ v_i.3 - 23 >= 0 /\ v_i.2 + v_i.3 - 23 >= 0 /\ v_i.1 + v_i.3 - 46 >= 0 /\ v_i.2 >= 0 /\ v_i.1 + v_i.2 - 23 >= 0 /\ -v_alphaSize + v_i.2 >= 0 /\ v_i.1 - 23 >= 0 /\ -v_minLen + v_i.0 >= 0 /\ v_i.5 <= v_maxLen ]
strictly and produces the following problem:
11:	T:
		(1, 1)                          eval_BZ2_hbCreateDecodeTables_start(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) -> eval_BZ2_hbCreateDecodeTables_bb0_in(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink)
		(1, 1)                          eval_BZ2_hbCreateDecodeTables_bb0_in(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) -> eval_BZ2_hbCreateDecodeTables_bb1_in(v_alphaSize, v_minLen, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink)
		(6, 1)                          eval_BZ2_hbCreateDecodeTables_bb1_in(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) -> eval_BZ2_hbCreateDecodeTables_bb7_in(v_alphaSize, v_i.0, 0, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) [ -v_minLen + v_i.0 >= 0 /\ v_i.0 > v_maxLen ]
		(23, 1)                         eval_BZ2_hbCreateDecodeTables_bb7_in(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) -> eval_BZ2_hbCreateDecodeTables_bb7_in(v_alphaSize, v_i.0, v_i.1 + 1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) [ v_i.0 - v_maxLen - 1 >= 0 /\ v_i.1 >= 0 /\ -v_minLen + v_i.0 >= 0 /\ v_i.1 < 23 ]
		(6, 1)                          eval_BZ2_hbCreateDecodeTables_bb7_in(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) -> eval_BZ2_hbCreateDecodeTables_bb9_in(v_alphaSize, v_i.0, v_i.1, 0, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) [ v_i.0 - v_maxLen - 1 >= 0 /\ v_i.1 >= 0 /\ -v_minLen + v_i.0 >= 0 /\ v_i.1 >= 23 ]
		(v_alphaSize, 1)                eval_BZ2_hbCreateDecodeTables_bb9_in(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) -> eval_BZ2_hbCreateDecodeTables_bb9_in(v_alphaSize, v_i.0, v_i.1, v_i.2 + 1, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) [ v_i.0 - v_maxLen - 1 >= 0 /\ v_i.2 >= 0 /\ v_i.1 + v_i.2 - 23 >= 0 /\ v_i.1 - 23 >= 0 /\ -v_minLen + v_i.0 >= 0 /\ v_i.2 < v_alphaSize ]
		(6, 1)                          eval_BZ2_hbCreateDecodeTables_bb9_in(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) -> eval_BZ2_hbCreateDecodeTables_bb11_in(v_alphaSize, v_i.0, v_i.1, v_i.2, 1, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) [ v_i.0 - v_maxLen - 1 >= 0 /\ v_i.2 >= 0 /\ v_i.1 + v_i.2 - 23 >= 0 /\ v_i.1 - 23 >= 0 /\ -v_minLen + v_i.0 >= 0 /\ v_i.2 >= v_alphaSize ]
		(22, 1)                         eval_BZ2_hbCreateDecodeTables_bb11_in(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) -> eval_BZ2_hbCreateDecodeTables_bb11_in(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3 + 1, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) [ v_i.0 - v_maxLen - 1 >= 0 /\ v_i.3 - 1 >= 0 /\ v_i.2 + v_i.3 - 1 >= 0 /\ v_i.1 + v_i.3 - 24 >= 0 /\ v_i.2 >= 0 /\ v_i.1 + v_i.2 - 23 >= 0 /\ -v_alphaSize + v_i.2 >= 0 /\ v_i.1 - 23 >= 0 /\ -v_minLen + v_i.0 >= 0 /\ v_i.3 < 23 ]
		(6, 1)                          eval_BZ2_hbCreateDecodeTables_bb11_in(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) -> eval_BZ2_hbCreateDecodeTables_bb13_in(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, 0, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) [ v_i.0 - v_maxLen - 1 >= 0 /\ v_i.3 - 1 >= 0 /\ v_i.2 + v_i.3 - 1 >= 0 /\ v_i.1 + v_i.3 - 24 >= 0 /\ v_i.2 >= 0 /\ v_i.1 + v_i.2 - 23 >= 0 /\ -v_alphaSize + v_i.2 >= 0 /\ v_i.1 - 23 >= 0 /\ -v_minLen + v_i.0 >= 0 /\ v_i.3 >= 23 ]
		(23, 1)                         eval_BZ2_hbCreateDecodeTables_bb13_in(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) -> eval_BZ2_hbCreateDecodeTables_bb13_in(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4 + 1, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) [ v_i.0 - v_maxLen - 1 >= 0 /\ v_i.4 >= 0 /\ v_i.3 + v_i.4 - 23 >= 0 /\ v_i.2 + v_i.4 >= 0 /\ v_i.1 + v_i.4 - 23 >= 0 /\ v_i.3 - 23 >= 0 /\ v_i.2 + v_i.3 - 23 >= 0 /\ v_i.1 + v_i.3 - 46 >= 0 /\ v_i.2 >= 0 /\ v_i.1 + v_i.2 - 23 >= 0 /\ -v_alphaSize + v_i.2 >= 0 /\ v_i.1 - 23 >= 0 /\ -v_minLen + v_i.0 >= 0 /\ v_i.4 < 23 ]
		(6, 1)                          eval_BZ2_hbCreateDecodeTables_bb13_in(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) -> eval_BZ2_hbCreateDecodeTables_bb15_in(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_minLen, v_j.0, v_maxLen, v_minLen, v_minLen.sink) [ v_i.0 - v_maxLen - 1 >= 0 /\ v_i.4 >= 0 /\ v_i.3 + v_i.4 - 23 >= 0 /\ v_i.2 + v_i.4 >= 0 /\ v_i.1 + v_i.4 - 23 >= 0 /\ v_i.3 - 23 >= 0 /\ v_i.2 + v_i.3 - 23 >= 0 /\ v_i.1 + v_i.3 - 46 >= 0 /\ v_i.2 >= 0 /\ v_i.1 + v_i.2 - 23 >= 0 /\ -v_alphaSize + v_i.2 >= 0 /\ v_i.1 - 23 >= 0 /\ -v_minLen + v_i.0 >= 0 /\ v_i.4 >= 23 ]
		(v_maxLen + v_minLen + 1, 1)    eval_BZ2_hbCreateDecodeTables_bb15_in(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) -> eval_BZ2_hbCreateDecodeTables_bb15_in(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5 + 1, v_j.0, v_maxLen, v_minLen, v_minLen.sink) [ v_i.0 - v_maxLen - 1 >= 0 /\ v_i.0 - v_i.5 >= 0 /\ -v_minLen + v_i.5 >= 0 /\ v_i.4 - 23 >= 0 /\ v_i.3 + v_i.4 - 46 >= 0 /\ v_i.2 + v_i.4 - 23 >= 0 /\ v_i.1 + v_i.4 - 46 >= 0 /\ v_i.3 - 23 >= 0 /\ v_i.2 + v_i.3 - 23 >= 0 /\ v_i.1 + v_i.3 - 46 >= 0 /\ v_i.2 >= 0 /\ v_i.1 + v_i.2 - 23 >= 0 /\ -v_alphaSize + v_i.2 >= 0 /\ v_i.1 - 23 >= 0 /\ -v_minLen + v_i.0 >= 0 /\ v_i.5 <= v_maxLen ]
		(6, 1)                          eval_BZ2_hbCreateDecodeTables_bb15_in(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) -> eval_BZ2_hbCreateDecodeTables_bb17_in(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen) [ v_i.0 - v_maxLen - 1 >= 0 /\ v_i.0 - v_i.5 >= 0 /\ -v_minLen + v_i.5 >= 0 /\ v_i.4 - 23 >= 0 /\ v_i.3 + v_i.4 - 46 >= 0 /\ v_i.2 + v_i.4 - 23 >= 0 /\ v_i.1 + v_i.4 - 46 >= 0 /\ v_i.3 - 23 >= 0 /\ v_i.2 + v_i.3 - 23 >= 0 /\ v_i.1 + v_i.3 - 46 >= 0 /\ v_i.2 >= 0 /\ v_i.1 + v_i.2 - 23 >= 0 /\ -v_alphaSize + v_i.2 >= 0 /\ v_i.1 - 23 >= 0 /\ -v_minLen + v_i.0 >= 0 /\ v_i.5 > v_maxLen ]
		(?, 1)                          eval_BZ2_hbCreateDecodeTables_bb17_in(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) -> eval_BZ2_hbCreateDecodeTables_bb17_in(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink + 1) [ v_i.5 - v_maxLen - 1 >= 0 /\ v_i.0 - v_maxLen - 1 >= 0 /\ v_i.0 - v_i.5 >= 0 /\ -v_minLen.sink + v_i.5 >= 0 /\ -v_minLen + v_i.5 >= 0 /\ v_i.4 - 23 >= 0 /\ v_i.3 + v_i.4 - 46 >= 0 /\ v_i.2 + v_i.4 - 23 >= 0 /\ v_i.1 + v_i.4 - 46 >= 0 /\ v_i.3 - 23 >= 0 /\ v_i.2 + v_i.3 - 23 >= 0 /\ v_i.1 + v_i.3 - 46 >= 0 /\ v_i.2 >= 0 /\ v_i.1 + v_i.2 - 23 >= 0 /\ -v_alphaSize + v_i.2 >= 0 /\ v_i.1 - 23 >= 0 /\ -v_minLen.sink + v_i.0 >= 0 /\ -v_minLen + v_i.0 >= 0 /\ -v_minLen + v_minLen.sink >= 0 /\ v_minLen.sink + 1 <= v_maxLen ]
		(?, 1)                          eval_BZ2_hbCreateDecodeTables_bb1_in(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) -> inner_10000_in_sep(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, 0, v_maxLen, v_minLen, v_minLen.sink) [ -v_minLen + v_i.0 >= 0 /\ v_i.0 <= v_maxLen ]
		(?, 1)                          inner_10000_out_sep(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) -> eval_BZ2_hbCreateDecodeTables_bb1_in(v_alphaSize, v_i.0 + 1, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) [ -v_i.0 + v_maxLen >= 0 /\ -v_minLen + v_maxLen >= 0 /\ -v_minLen + v_i.0 >= 0 /\ v_j.0 >= v_alphaSize ]
		(?, 0)                          inner_10000_compl_sep(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) -> inner_10000_out_sep(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0_sep, v_maxLen, v_minLen, v_minLen.sink) [ -v_i.0 + v_maxLen >= 0 /\ -v_minLen + v_maxLen >= 0 /\ -v_j.0 >= 0 /\ v_j.0 >= 0 /\ -v_minLen + v_i.0 >= 0 /\ v_alphaSize < 0 /\ v_j.0_sep < 0 /\ -v_j.0_sep <= -v_alphaSize ]
		(?, 0)                          inner_10000_compl_sep(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) -> inner_10000_out_sep(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0_sep, v_maxLen, v_minLen, v_minLen.sink) [ -v_i.0 + v_maxLen >= 0 /\ -v_minLen + v_maxLen >= 0 /\ -v_j.0 >= 0 /\ v_j.0 >= 0 /\ -v_minLen + v_i.0 >= 0 /\ v_alphaSize < 0 /\ v_j.0_sep >= 0 /\ v_j.0_sep <= -v_alphaSize ]
		(?, 0)                          inner_10000_compl_sep(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) -> inner_10000_out_sep(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0_sep, v_maxLen, v_minLen, v_minLen.sink) [ -v_i.0 + v_maxLen >= 0 /\ -v_minLen + v_maxLen >= 0 /\ -v_j.0 >= 0 /\ v_j.0 >= 0 /\ -v_minLen + v_i.0 >= 0 /\ v_alphaSize >= 0 /\ v_j.0_sep < 0 /\ -v_j.0_sep <= v_alphaSize ]
		(?, 0)                          inner_10000_compl_sep(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) -> inner_10000_out_sep(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0_sep, v_maxLen, v_minLen, v_minLen.sink) [ -v_i.0 + v_maxLen >= 0 /\ -v_minLen + v_maxLen >= 0 /\ -v_j.0 >= 0 /\ v_j.0 >= 0 /\ -v_minLen + v_i.0 >= 0 /\ v_alphaSize >= 0 /\ v_j.0_sep >= 0 /\ v_j.0_sep <= v_alphaSize ]
		(?, 2*v_alphaSize)              inner_10000_in_sep(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) -> inner_10000_compl_sep(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) [ -v_i.0 + v_maxLen >= 0 /\ -v_minLen + v_maxLen >= 0 /\ -v_j.0 >= 0 /\ v_j.0 >= 0 /\ -v_minLen + v_i.0 >= 0 ]
		(?, 0)                          inner_10000_in_sep(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) -> inner_10000_out_sep(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) [ -v_i.0 + v_maxLen >= 0 /\ -v_minLen + v_maxLen >= 0 /\ -v_j.0 >= 0 /\ v_j.0 >= 0 /\ -v_minLen + v_i.0 >= 0 ]
	start location:	eval_BZ2_hbCreateDecodeTables_start
	leaf cost:	1

A polynomial rank function with
	Pol(eval_BZ2_hbCreateDecodeTables_start) = V_9 - V_10
	Pol(eval_BZ2_hbCreateDecodeTables_bb0_in) = V_9 - V_10
	Pol(eval_BZ2_hbCreateDecodeTables_bb1_in) = V_9 - V_10
	Pol(eval_BZ2_hbCreateDecodeTables_bb7_in) = V_9 - V_10
	Pol(eval_BZ2_hbCreateDecodeTables_bb9_in) = V_9 - V_10
	Pol(eval_BZ2_hbCreateDecodeTables_bb11_in) = V_9 - V_10
	Pol(eval_BZ2_hbCreateDecodeTables_bb13_in) = V_9 - V_10
	Pol(eval_BZ2_hbCreateDecodeTables_bb15_in) = V_9 - V_10
	Pol(eval_BZ2_hbCreateDecodeTables_bb17_in) = V_9 - V_11
	Pol(inner_10000_in_sep) = V_9 - V_10
	Pol(inner_10000_out_sep) = V_9 - V_10
	Pol(inner_10000_compl_sep) = V_9 - V_10
orients all transitions weakly and the transition
	eval_BZ2_hbCreateDecodeTables_bb17_in(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) -> eval_BZ2_hbCreateDecodeTables_bb17_in(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink + 1) [ v_i.5 - v_maxLen - 1 >= 0 /\ v_i.0 - v_maxLen - 1 >= 0 /\ v_i.0 - v_i.5 >= 0 /\ -v_minLen.sink + v_i.5 >= 0 /\ -v_minLen + v_i.5 >= 0 /\ v_i.4 - 23 >= 0 /\ v_i.3 + v_i.4 - 46 >= 0 /\ v_i.2 + v_i.4 - 23 >= 0 /\ v_i.1 + v_i.4 - 46 >= 0 /\ v_i.3 - 23 >= 0 /\ v_i.2 + v_i.3 - 23 >= 0 /\ v_i.1 + v_i.3 - 46 >= 0 /\ v_i.2 >= 0 /\ v_i.1 + v_i.2 - 23 >= 0 /\ -v_alphaSize + v_i.2 >= 0 /\ v_i.1 - 23 >= 0 /\ -v_minLen.sink + v_i.0 >= 0 /\ -v_minLen + v_i.0 >= 0 /\ -v_minLen + v_minLen.sink >= 0 /\ v_minLen.sink + 1 <= v_maxLen ]
strictly and produces the following problem:
12:	T:
		(1, 1)                          eval_BZ2_hbCreateDecodeTables_start(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) -> eval_BZ2_hbCreateDecodeTables_bb0_in(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink)
		(1, 1)                          eval_BZ2_hbCreateDecodeTables_bb0_in(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) -> eval_BZ2_hbCreateDecodeTables_bb1_in(v_alphaSize, v_minLen, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink)
		(6, 1)                          eval_BZ2_hbCreateDecodeTables_bb1_in(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) -> eval_BZ2_hbCreateDecodeTables_bb7_in(v_alphaSize, v_i.0, 0, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) [ -v_minLen + v_i.0 >= 0 /\ v_i.0 > v_maxLen ]
		(23, 1)                         eval_BZ2_hbCreateDecodeTables_bb7_in(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) -> eval_BZ2_hbCreateDecodeTables_bb7_in(v_alphaSize, v_i.0, v_i.1 + 1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) [ v_i.0 - v_maxLen - 1 >= 0 /\ v_i.1 >= 0 /\ -v_minLen + v_i.0 >= 0 /\ v_i.1 < 23 ]
		(6, 1)                          eval_BZ2_hbCreateDecodeTables_bb7_in(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) -> eval_BZ2_hbCreateDecodeTables_bb9_in(v_alphaSize, v_i.0, v_i.1, 0, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) [ v_i.0 - v_maxLen - 1 >= 0 /\ v_i.1 >= 0 /\ -v_minLen + v_i.0 >= 0 /\ v_i.1 >= 23 ]
		(v_alphaSize, 1)                eval_BZ2_hbCreateDecodeTables_bb9_in(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) -> eval_BZ2_hbCreateDecodeTables_bb9_in(v_alphaSize, v_i.0, v_i.1, v_i.2 + 1, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) [ v_i.0 - v_maxLen - 1 >= 0 /\ v_i.2 >= 0 /\ v_i.1 + v_i.2 - 23 >= 0 /\ v_i.1 - 23 >= 0 /\ -v_minLen + v_i.0 >= 0 /\ v_i.2 < v_alphaSize ]
		(6, 1)                          eval_BZ2_hbCreateDecodeTables_bb9_in(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) -> eval_BZ2_hbCreateDecodeTables_bb11_in(v_alphaSize, v_i.0, v_i.1, v_i.2, 1, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) [ v_i.0 - v_maxLen - 1 >= 0 /\ v_i.2 >= 0 /\ v_i.1 + v_i.2 - 23 >= 0 /\ v_i.1 - 23 >= 0 /\ -v_minLen + v_i.0 >= 0 /\ v_i.2 >= v_alphaSize ]
		(22, 1)                         eval_BZ2_hbCreateDecodeTables_bb11_in(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) -> eval_BZ2_hbCreateDecodeTables_bb11_in(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3 + 1, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) [ v_i.0 - v_maxLen - 1 >= 0 /\ v_i.3 - 1 >= 0 /\ v_i.2 + v_i.3 - 1 >= 0 /\ v_i.1 + v_i.3 - 24 >= 0 /\ v_i.2 >= 0 /\ v_i.1 + v_i.2 - 23 >= 0 /\ -v_alphaSize + v_i.2 >= 0 /\ v_i.1 - 23 >= 0 /\ -v_minLen + v_i.0 >= 0 /\ v_i.3 < 23 ]
		(6, 1)                          eval_BZ2_hbCreateDecodeTables_bb11_in(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) -> eval_BZ2_hbCreateDecodeTables_bb13_in(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, 0, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) [ v_i.0 - v_maxLen - 1 >= 0 /\ v_i.3 - 1 >= 0 /\ v_i.2 + v_i.3 - 1 >= 0 /\ v_i.1 + v_i.3 - 24 >= 0 /\ v_i.2 >= 0 /\ v_i.1 + v_i.2 - 23 >= 0 /\ -v_alphaSize + v_i.2 >= 0 /\ v_i.1 - 23 >= 0 /\ -v_minLen + v_i.0 >= 0 /\ v_i.3 >= 23 ]
		(23, 1)                         eval_BZ2_hbCreateDecodeTables_bb13_in(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) -> eval_BZ2_hbCreateDecodeTables_bb13_in(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4 + 1, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) [ v_i.0 - v_maxLen - 1 >= 0 /\ v_i.4 >= 0 /\ v_i.3 + v_i.4 - 23 >= 0 /\ v_i.2 + v_i.4 >= 0 /\ v_i.1 + v_i.4 - 23 >= 0 /\ v_i.3 - 23 >= 0 /\ v_i.2 + v_i.3 - 23 >= 0 /\ v_i.1 + v_i.3 - 46 >= 0 /\ v_i.2 >= 0 /\ v_i.1 + v_i.2 - 23 >= 0 /\ -v_alphaSize + v_i.2 >= 0 /\ v_i.1 - 23 >= 0 /\ -v_minLen + v_i.0 >= 0 /\ v_i.4 < 23 ]
		(6, 1)                          eval_BZ2_hbCreateDecodeTables_bb13_in(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) -> eval_BZ2_hbCreateDecodeTables_bb15_in(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_minLen, v_j.0, v_maxLen, v_minLen, v_minLen.sink) [ v_i.0 - v_maxLen - 1 >= 0 /\ v_i.4 >= 0 /\ v_i.3 + v_i.4 - 23 >= 0 /\ v_i.2 + v_i.4 >= 0 /\ v_i.1 + v_i.4 - 23 >= 0 /\ v_i.3 - 23 >= 0 /\ v_i.2 + v_i.3 - 23 >= 0 /\ v_i.1 + v_i.3 - 46 >= 0 /\ v_i.2 >= 0 /\ v_i.1 + v_i.2 - 23 >= 0 /\ -v_alphaSize + v_i.2 >= 0 /\ v_i.1 - 23 >= 0 /\ -v_minLen + v_i.0 >= 0 /\ v_i.4 >= 23 ]
		(v_maxLen + v_minLen + 1, 1)    eval_BZ2_hbCreateDecodeTables_bb15_in(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) -> eval_BZ2_hbCreateDecodeTables_bb15_in(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5 + 1, v_j.0, v_maxLen, v_minLen, v_minLen.sink) [ v_i.0 - v_maxLen - 1 >= 0 /\ v_i.0 - v_i.5 >= 0 /\ -v_minLen + v_i.5 >= 0 /\ v_i.4 - 23 >= 0 /\ v_i.3 + v_i.4 - 46 >= 0 /\ v_i.2 + v_i.4 - 23 >= 0 /\ v_i.1 + v_i.4 - 46 >= 0 /\ v_i.3 - 23 >= 0 /\ v_i.2 + v_i.3 - 23 >= 0 /\ v_i.1 + v_i.3 - 46 >= 0 /\ v_i.2 >= 0 /\ v_i.1 + v_i.2 - 23 >= 0 /\ -v_alphaSize + v_i.2 >= 0 /\ v_i.1 - 23 >= 0 /\ -v_minLen + v_i.0 >= 0 /\ v_i.5 <= v_maxLen ]
		(6, 1)                          eval_BZ2_hbCreateDecodeTables_bb15_in(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) -> eval_BZ2_hbCreateDecodeTables_bb17_in(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen) [ v_i.0 - v_maxLen - 1 >= 0 /\ v_i.0 - v_i.5 >= 0 /\ -v_minLen + v_i.5 >= 0 /\ v_i.4 - 23 >= 0 /\ v_i.3 + v_i.4 - 46 >= 0 /\ v_i.2 + v_i.4 - 23 >= 0 /\ v_i.1 + v_i.4 - 46 >= 0 /\ v_i.3 - 23 >= 0 /\ v_i.2 + v_i.3 - 23 >= 0 /\ v_i.1 + v_i.3 - 46 >= 0 /\ v_i.2 >= 0 /\ v_i.1 + v_i.2 - 23 >= 0 /\ -v_alphaSize + v_i.2 >= 0 /\ v_i.1 - 23 >= 0 /\ -v_minLen + v_i.0 >= 0 /\ v_i.5 > v_maxLen ]
		(v_maxLen + v_minLen, 1)        eval_BZ2_hbCreateDecodeTables_bb17_in(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) -> eval_BZ2_hbCreateDecodeTables_bb17_in(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink + 1) [ v_i.5 - v_maxLen - 1 >= 0 /\ v_i.0 - v_maxLen - 1 >= 0 /\ v_i.0 - v_i.5 >= 0 /\ -v_minLen.sink + v_i.5 >= 0 /\ -v_minLen + v_i.5 >= 0 /\ v_i.4 - 23 >= 0 /\ v_i.3 + v_i.4 - 46 >= 0 /\ v_i.2 + v_i.4 - 23 >= 0 /\ v_i.1 + v_i.4 - 46 >= 0 /\ v_i.3 - 23 >= 0 /\ v_i.2 + v_i.3 - 23 >= 0 /\ v_i.1 + v_i.3 - 46 >= 0 /\ v_i.2 >= 0 /\ v_i.1 + v_i.2 - 23 >= 0 /\ -v_alphaSize + v_i.2 >= 0 /\ v_i.1 - 23 >= 0 /\ -v_minLen.sink + v_i.0 >= 0 /\ -v_minLen + v_i.0 >= 0 /\ -v_minLen + v_minLen.sink >= 0 /\ v_minLen.sink + 1 <= v_maxLen ]
		(?, 1)                          eval_BZ2_hbCreateDecodeTables_bb1_in(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) -> inner_10000_in_sep(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, 0, v_maxLen, v_minLen, v_minLen.sink) [ -v_minLen + v_i.0 >= 0 /\ v_i.0 <= v_maxLen ]
		(?, 1)                          inner_10000_out_sep(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) -> eval_BZ2_hbCreateDecodeTables_bb1_in(v_alphaSize, v_i.0 + 1, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) [ -v_i.0 + v_maxLen >= 0 /\ -v_minLen + v_maxLen >= 0 /\ -v_minLen + v_i.0 >= 0 /\ v_j.0 >= v_alphaSize ]
		(?, 0)                          inner_10000_compl_sep(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) -> inner_10000_out_sep(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0_sep, v_maxLen, v_minLen, v_minLen.sink) [ -v_i.0 + v_maxLen >= 0 /\ -v_minLen + v_maxLen >= 0 /\ -v_j.0 >= 0 /\ v_j.0 >= 0 /\ -v_minLen + v_i.0 >= 0 /\ v_alphaSize < 0 /\ v_j.0_sep < 0 /\ -v_j.0_sep <= -v_alphaSize ]
		(?, 0)                          inner_10000_compl_sep(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) -> inner_10000_out_sep(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0_sep, v_maxLen, v_minLen, v_minLen.sink) [ -v_i.0 + v_maxLen >= 0 /\ -v_minLen + v_maxLen >= 0 /\ -v_j.0 >= 0 /\ v_j.0 >= 0 /\ -v_minLen + v_i.0 >= 0 /\ v_alphaSize < 0 /\ v_j.0_sep >= 0 /\ v_j.0_sep <= -v_alphaSize ]
		(?, 0)                          inner_10000_compl_sep(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) -> inner_10000_out_sep(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0_sep, v_maxLen, v_minLen, v_minLen.sink) [ -v_i.0 + v_maxLen >= 0 /\ -v_minLen + v_maxLen >= 0 /\ -v_j.0 >= 0 /\ v_j.0 >= 0 /\ -v_minLen + v_i.0 >= 0 /\ v_alphaSize >= 0 /\ v_j.0_sep < 0 /\ -v_j.0_sep <= v_alphaSize ]
		(?, 0)                          inner_10000_compl_sep(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) -> inner_10000_out_sep(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0_sep, v_maxLen, v_minLen, v_minLen.sink) [ -v_i.0 + v_maxLen >= 0 /\ -v_minLen + v_maxLen >= 0 /\ -v_j.0 >= 0 /\ v_j.0 >= 0 /\ -v_minLen + v_i.0 >= 0 /\ v_alphaSize >= 0 /\ v_j.0_sep >= 0 /\ v_j.0_sep <= v_alphaSize ]
		(?, 2*v_alphaSize)              inner_10000_in_sep(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) -> inner_10000_compl_sep(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) [ -v_i.0 + v_maxLen >= 0 /\ -v_minLen + v_maxLen >= 0 /\ -v_j.0 >= 0 /\ v_j.0 >= 0 /\ -v_minLen + v_i.0 >= 0 ]
		(?, 0)                          inner_10000_in_sep(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) -> inner_10000_out_sep(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) [ -v_i.0 + v_maxLen >= 0 /\ -v_minLen + v_maxLen >= 0 /\ -v_j.0 >= 0 /\ v_j.0 >= 0 /\ -v_minLen + v_i.0 >= 0 ]
	start location:	eval_BZ2_hbCreateDecodeTables_start
	leaf cost:	1

A polynomial rank function with
	Pol(eval_BZ2_hbCreateDecodeTables_start) = 4*V_9 - 4*V_10 + 4
	Pol(eval_BZ2_hbCreateDecodeTables_bb0_in) = 4*V_9 - 4*V_10 + 4
	Pol(eval_BZ2_hbCreateDecodeTables_bb1_in) = -4*V_2 + 4*V_9 + 4
	Pol(eval_BZ2_hbCreateDecodeTables_bb7_in) = -4*V_2 + 4*V_9
	Pol(eval_BZ2_hbCreateDecodeTables_bb9_in) = -4*V_2 + 4*V_9
	Pol(eval_BZ2_hbCreateDecodeTables_bb11_in) = -4*V_2 + 4*V_9
	Pol(eval_BZ2_hbCreateDecodeTables_bb13_in) = -4*V_2 + 4*V_9
	Pol(eval_BZ2_hbCreateDecodeTables_bb15_in) = -4*V_2 + 4*V_9
	Pol(eval_BZ2_hbCreateDecodeTables_bb17_in) = -4*V_2 + 4*V_9
	Pol(inner_10000_in_sep) = -4*V_2 + 4*V_9 + 3
	Pol(inner_10000_out_sep) = -4*V_2 + 4*V_9 + 1
	Pol(inner_10000_compl_sep) = -4*V_2 + 4*V_9 + 2
orients all transitions weakly and the transitions
	inner_10000_out_sep(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) -> eval_BZ2_hbCreateDecodeTables_bb1_in(v_alphaSize, v_i.0 + 1, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) [ -v_i.0 + v_maxLen >= 0 /\ -v_minLen + v_maxLen >= 0 /\ -v_minLen + v_i.0 >= 0 /\ v_j.0 >= v_alphaSize ]
	inner_10000_in_sep(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) -> inner_10000_out_sep(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) [ -v_i.0 + v_maxLen >= 0 /\ -v_minLen + v_maxLen >= 0 /\ -v_j.0 >= 0 /\ v_j.0 >= 0 /\ -v_minLen + v_i.0 >= 0 ]
	inner_10000_in_sep(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) -> inner_10000_compl_sep(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) [ -v_i.0 + v_maxLen >= 0 /\ -v_minLen + v_maxLen >= 0 /\ -v_j.0 >= 0 /\ v_j.0 >= 0 /\ -v_minLen + v_i.0 >= 0 ]
	inner_10000_compl_sep(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) -> inner_10000_out_sep(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0_sep, v_maxLen, v_minLen, v_minLen.sink) [ -v_i.0 + v_maxLen >= 0 /\ -v_minLen + v_maxLen >= 0 /\ -v_j.0 >= 0 /\ v_j.0 >= 0 /\ -v_minLen + v_i.0 >= 0 /\ v_alphaSize < 0 /\ v_j.0_sep < 0 /\ -v_j.0_sep <= -v_alphaSize ]
	inner_10000_compl_sep(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) -> inner_10000_out_sep(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0_sep, v_maxLen, v_minLen, v_minLen.sink) [ -v_i.0 + v_maxLen >= 0 /\ -v_minLen + v_maxLen >= 0 /\ -v_j.0 >= 0 /\ v_j.0 >= 0 /\ -v_minLen + v_i.0 >= 0 /\ v_alphaSize < 0 /\ v_j.0_sep >= 0 /\ v_j.0_sep <= -v_alphaSize ]
	inner_10000_compl_sep(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) -> inner_10000_out_sep(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0_sep, v_maxLen, v_minLen, v_minLen.sink) [ -v_i.0 + v_maxLen >= 0 /\ -v_minLen + v_maxLen >= 0 /\ -v_j.0 >= 0 /\ v_j.0 >= 0 /\ -v_minLen + v_i.0 >= 0 /\ v_alphaSize >= 0 /\ v_j.0_sep < 0 /\ -v_j.0_sep <= v_alphaSize ]
	inner_10000_compl_sep(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) -> inner_10000_out_sep(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0_sep, v_maxLen, v_minLen, v_minLen.sink) [ -v_i.0 + v_maxLen >= 0 /\ -v_minLen + v_maxLen >= 0 /\ -v_j.0 >= 0 /\ v_j.0 >= 0 /\ -v_minLen + v_i.0 >= 0 /\ v_alphaSize >= 0 /\ v_j.0_sep >= 0 /\ v_j.0_sep <= v_alphaSize ]
	eval_BZ2_hbCreateDecodeTables_bb1_in(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) -> inner_10000_in_sep(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, 0, v_maxLen, v_minLen, v_minLen.sink) [ -v_minLen + v_i.0 >= 0 /\ v_i.0 <= v_maxLen ]
strictly and produces the following problem:
13:	T:
		(1, 1)                                          eval_BZ2_hbCreateDecodeTables_start(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) -> eval_BZ2_hbCreateDecodeTables_bb0_in(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink)
		(1, 1)                                          eval_BZ2_hbCreateDecodeTables_bb0_in(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) -> eval_BZ2_hbCreateDecodeTables_bb1_in(v_alphaSize, v_minLen, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink)
		(6, 1)                                          eval_BZ2_hbCreateDecodeTables_bb1_in(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) -> eval_BZ2_hbCreateDecodeTables_bb7_in(v_alphaSize, v_i.0, 0, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) [ -v_minLen + v_i.0 >= 0 /\ v_i.0 > v_maxLen ]
		(23, 1)                                         eval_BZ2_hbCreateDecodeTables_bb7_in(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) -> eval_BZ2_hbCreateDecodeTables_bb7_in(v_alphaSize, v_i.0, v_i.1 + 1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) [ v_i.0 - v_maxLen - 1 >= 0 /\ v_i.1 >= 0 /\ -v_minLen + v_i.0 >= 0 /\ v_i.1 < 23 ]
		(6, 1)                                          eval_BZ2_hbCreateDecodeTables_bb7_in(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) -> eval_BZ2_hbCreateDecodeTables_bb9_in(v_alphaSize, v_i.0, v_i.1, 0, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) [ v_i.0 - v_maxLen - 1 >= 0 /\ v_i.1 >= 0 /\ -v_minLen + v_i.0 >= 0 /\ v_i.1 >= 23 ]
		(v_alphaSize, 1)                                eval_BZ2_hbCreateDecodeTables_bb9_in(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) -> eval_BZ2_hbCreateDecodeTables_bb9_in(v_alphaSize, v_i.0, v_i.1, v_i.2 + 1, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) [ v_i.0 - v_maxLen - 1 >= 0 /\ v_i.2 >= 0 /\ v_i.1 + v_i.2 - 23 >= 0 /\ v_i.1 - 23 >= 0 /\ -v_minLen + v_i.0 >= 0 /\ v_i.2 < v_alphaSize ]
		(6, 1)                                          eval_BZ2_hbCreateDecodeTables_bb9_in(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) -> eval_BZ2_hbCreateDecodeTables_bb11_in(v_alphaSize, v_i.0, v_i.1, v_i.2, 1, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) [ v_i.0 - v_maxLen - 1 >= 0 /\ v_i.2 >= 0 /\ v_i.1 + v_i.2 - 23 >= 0 /\ v_i.1 - 23 >= 0 /\ -v_minLen + v_i.0 >= 0 /\ v_i.2 >= v_alphaSize ]
		(22, 1)                                         eval_BZ2_hbCreateDecodeTables_bb11_in(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) -> eval_BZ2_hbCreateDecodeTables_bb11_in(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3 + 1, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) [ v_i.0 - v_maxLen - 1 >= 0 /\ v_i.3 - 1 >= 0 /\ v_i.2 + v_i.3 - 1 >= 0 /\ v_i.1 + v_i.3 - 24 >= 0 /\ v_i.2 >= 0 /\ v_i.1 + v_i.2 - 23 >= 0 /\ -v_alphaSize + v_i.2 >= 0 /\ v_i.1 - 23 >= 0 /\ -v_minLen + v_i.0 >= 0 /\ v_i.3 < 23 ]
		(6, 1)                                          eval_BZ2_hbCreateDecodeTables_bb11_in(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) -> eval_BZ2_hbCreateDecodeTables_bb13_in(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, 0, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) [ v_i.0 - v_maxLen - 1 >= 0 /\ v_i.3 - 1 >= 0 /\ v_i.2 + v_i.3 - 1 >= 0 /\ v_i.1 + v_i.3 - 24 >= 0 /\ v_i.2 >= 0 /\ v_i.1 + v_i.2 - 23 >= 0 /\ -v_alphaSize + v_i.2 >= 0 /\ v_i.1 - 23 >= 0 /\ -v_minLen + v_i.0 >= 0 /\ v_i.3 >= 23 ]
		(23, 1)                                         eval_BZ2_hbCreateDecodeTables_bb13_in(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) -> eval_BZ2_hbCreateDecodeTables_bb13_in(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4 + 1, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) [ v_i.0 - v_maxLen - 1 >= 0 /\ v_i.4 >= 0 /\ v_i.3 + v_i.4 - 23 >= 0 /\ v_i.2 + v_i.4 >= 0 /\ v_i.1 + v_i.4 - 23 >= 0 /\ v_i.3 - 23 >= 0 /\ v_i.2 + v_i.3 - 23 >= 0 /\ v_i.1 + v_i.3 - 46 >= 0 /\ v_i.2 >= 0 /\ v_i.1 + v_i.2 - 23 >= 0 /\ -v_alphaSize + v_i.2 >= 0 /\ v_i.1 - 23 >= 0 /\ -v_minLen + v_i.0 >= 0 /\ v_i.4 < 23 ]
		(6, 1)                                          eval_BZ2_hbCreateDecodeTables_bb13_in(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) -> eval_BZ2_hbCreateDecodeTables_bb15_in(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_minLen, v_j.0, v_maxLen, v_minLen, v_minLen.sink) [ v_i.0 - v_maxLen - 1 >= 0 /\ v_i.4 >= 0 /\ v_i.3 + v_i.4 - 23 >= 0 /\ v_i.2 + v_i.4 >= 0 /\ v_i.1 + v_i.4 - 23 >= 0 /\ v_i.3 - 23 >= 0 /\ v_i.2 + v_i.3 - 23 >= 0 /\ v_i.1 + v_i.3 - 46 >= 0 /\ v_i.2 >= 0 /\ v_i.1 + v_i.2 - 23 >= 0 /\ -v_alphaSize + v_i.2 >= 0 /\ v_i.1 - 23 >= 0 /\ -v_minLen + v_i.0 >= 0 /\ v_i.4 >= 23 ]
		(v_maxLen + v_minLen + 1, 1)                    eval_BZ2_hbCreateDecodeTables_bb15_in(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) -> eval_BZ2_hbCreateDecodeTables_bb15_in(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5 + 1, v_j.0, v_maxLen, v_minLen, v_minLen.sink) [ v_i.0 - v_maxLen - 1 >= 0 /\ v_i.0 - v_i.5 >= 0 /\ -v_minLen + v_i.5 >= 0 /\ v_i.4 - 23 >= 0 /\ v_i.3 + v_i.4 - 46 >= 0 /\ v_i.2 + v_i.4 - 23 >= 0 /\ v_i.1 + v_i.4 - 46 >= 0 /\ v_i.3 - 23 >= 0 /\ v_i.2 + v_i.3 - 23 >= 0 /\ v_i.1 + v_i.3 - 46 >= 0 /\ v_i.2 >= 0 /\ v_i.1 + v_i.2 - 23 >= 0 /\ -v_alphaSize + v_i.2 >= 0 /\ v_i.1 - 23 >= 0 /\ -v_minLen + v_i.0 >= 0 /\ v_i.5 <= v_maxLen ]
		(6, 1)                                          eval_BZ2_hbCreateDecodeTables_bb15_in(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) -> eval_BZ2_hbCreateDecodeTables_bb17_in(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen) [ v_i.0 - v_maxLen - 1 >= 0 /\ v_i.0 - v_i.5 >= 0 /\ -v_minLen + v_i.5 >= 0 /\ v_i.4 - 23 >= 0 /\ v_i.3 + v_i.4 - 46 >= 0 /\ v_i.2 + v_i.4 - 23 >= 0 /\ v_i.1 + v_i.4 - 46 >= 0 /\ v_i.3 - 23 >= 0 /\ v_i.2 + v_i.3 - 23 >= 0 /\ v_i.1 + v_i.3 - 46 >= 0 /\ v_i.2 >= 0 /\ v_i.1 + v_i.2 - 23 >= 0 /\ -v_alphaSize + v_i.2 >= 0 /\ v_i.1 - 23 >= 0 /\ -v_minLen + v_i.0 >= 0 /\ v_i.5 > v_maxLen ]
		(v_maxLen + v_minLen, 1)                        eval_BZ2_hbCreateDecodeTables_bb17_in(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) -> eval_BZ2_hbCreateDecodeTables_bb17_in(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink + 1) [ v_i.5 - v_maxLen - 1 >= 0 /\ v_i.0 - v_maxLen - 1 >= 0 /\ v_i.0 - v_i.5 >= 0 /\ -v_minLen.sink + v_i.5 >= 0 /\ -v_minLen + v_i.5 >= 0 /\ v_i.4 - 23 >= 0 /\ v_i.3 + v_i.4 - 46 >= 0 /\ v_i.2 + v_i.4 - 23 >= 0 /\ v_i.1 + v_i.4 - 46 >= 0 /\ v_i.3 - 23 >= 0 /\ v_i.2 + v_i.3 - 23 >= 0 /\ v_i.1 + v_i.3 - 46 >= 0 /\ v_i.2 >= 0 /\ v_i.1 + v_i.2 - 23 >= 0 /\ -v_alphaSize + v_i.2 >= 0 /\ v_i.1 - 23 >= 0 /\ -v_minLen.sink + v_i.0 >= 0 /\ -v_minLen + v_i.0 >= 0 /\ -v_minLen + v_minLen.sink >= 0 /\ v_minLen.sink + 1 <= v_maxLen ]
		(4*v_maxLen + 4*v_minLen + 4, 1)                eval_BZ2_hbCreateDecodeTables_bb1_in(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) -> inner_10000_in_sep(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, 0, v_maxLen, v_minLen, v_minLen.sink) [ -v_minLen + v_i.0 >= 0 /\ v_i.0 <= v_maxLen ]
		(4*v_maxLen + 4*v_minLen + 4, 1)                inner_10000_out_sep(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) -> eval_BZ2_hbCreateDecodeTables_bb1_in(v_alphaSize, v_i.0 + 1, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) [ -v_i.0 + v_maxLen >= 0 /\ -v_minLen + v_maxLen >= 0 /\ -v_minLen + v_i.0 >= 0 /\ v_j.0 >= v_alphaSize ]
		(4*v_maxLen + 4*v_minLen + 4, 0)                inner_10000_compl_sep(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) -> inner_10000_out_sep(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0_sep, v_maxLen, v_minLen, v_minLen.sink) [ -v_i.0 + v_maxLen >= 0 /\ -v_minLen + v_maxLen >= 0 /\ -v_j.0 >= 0 /\ v_j.0 >= 0 /\ -v_minLen + v_i.0 >= 0 /\ v_alphaSize < 0 /\ v_j.0_sep < 0 /\ -v_j.0_sep <= -v_alphaSize ]
		(4*v_maxLen + 4*v_minLen + 4, 0)                inner_10000_compl_sep(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) -> inner_10000_out_sep(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0_sep, v_maxLen, v_minLen, v_minLen.sink) [ -v_i.0 + v_maxLen >= 0 /\ -v_minLen + v_maxLen >= 0 /\ -v_j.0 >= 0 /\ v_j.0 >= 0 /\ -v_minLen + v_i.0 >= 0 /\ v_alphaSize < 0 /\ v_j.0_sep >= 0 /\ v_j.0_sep <= -v_alphaSize ]
		(4*v_maxLen + 4*v_minLen + 4, 0)                inner_10000_compl_sep(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) -> inner_10000_out_sep(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0_sep, v_maxLen, v_minLen, v_minLen.sink) [ -v_i.0 + v_maxLen >= 0 /\ -v_minLen + v_maxLen >= 0 /\ -v_j.0 >= 0 /\ v_j.0 >= 0 /\ -v_minLen + v_i.0 >= 0 /\ v_alphaSize >= 0 /\ v_j.0_sep < 0 /\ -v_j.0_sep <= v_alphaSize ]
		(4*v_maxLen + 4*v_minLen + 4, 0)                inner_10000_compl_sep(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) -> inner_10000_out_sep(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0_sep, v_maxLen, v_minLen, v_minLen.sink) [ -v_i.0 + v_maxLen >= 0 /\ -v_minLen + v_maxLen >= 0 /\ -v_j.0 >= 0 /\ v_j.0 >= 0 /\ -v_minLen + v_i.0 >= 0 /\ v_alphaSize >= 0 /\ v_j.0_sep >= 0 /\ v_j.0_sep <= v_alphaSize ]
		(4*v_maxLen + 4*v_minLen + 4, 2*v_alphaSize)    inner_10000_in_sep(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) -> inner_10000_compl_sep(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) [ -v_i.0 + v_maxLen >= 0 /\ -v_minLen + v_maxLen >= 0 /\ -v_j.0 >= 0 /\ v_j.0 >= 0 /\ -v_minLen + v_i.0 >= 0 ]
		(4*v_maxLen + 4*v_minLen + 4, 0)                inner_10000_in_sep(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) -> inner_10000_out_sep(v_alphaSize, v_i.0, v_i.1, v_i.2, v_i.3, v_i.4, v_i.5, v_j.0, v_maxLen, v_minLen, v_minLen.sink) [ -v_i.0 + v_maxLen >= 0 /\ -v_minLen + v_maxLen >= 0 /\ -v_j.0 >= 0 /\ v_j.0 >= 0 /\ -v_minLen + v_i.0 >= 0 ]
	start location:	eval_BZ2_hbCreateDecodeTables_start
	leaf cost:	1

Complexity upper bound 9*v_alphaSize + 10*v_maxLen + 10*v_minLen + 8*v_alphaSize*v_maxLen + 8*v_alphaSize*v_minLen + 116

Time: 1.406 sec (SMT: 0.689 sec)

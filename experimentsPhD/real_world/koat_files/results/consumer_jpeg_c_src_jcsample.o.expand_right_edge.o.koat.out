YES(?, 8*v_num_rows + 4*v_input_cols*v_num_rows + 4*v_num_rows*v_output_cols + 3*v_input_cols + 3*v_output_cols + 11)

Initial complexity problem:
1:	T:
		(1, 1)    eval_expand_right_edge_start(v_0, v_count.0, v_input_cols, v_num_rows, v_output_cols, v_row.0) -> eval_expand_right_edge_bb0_in(v_0, v_count.0, v_input_cols, v_num_rows, v_output_cols, v_row.0)
		(?, 1)    eval_expand_right_edge_bb0_in(v_0, v_count.0, v_input_cols, v_num_rows, v_output_cols, v_row.0) -> eval_expand_right_edge_bb2_in(v_output_cols - v_input_cols, v_count.0, v_input_cols, v_num_rows, v_output_cols, 0)
		(?, 1)    eval_expand_right_edge_bb0_in(v_0, v_count.0, v_input_cols, v_num_rows, v_output_cols, v_row.0) -> eval_expand_right_edge_bb7_in(v_0, v_count.0, v_input_cols, v_num_rows, v_output_cols, v_row.0)
		(?, 1)    eval_expand_right_edge_bb2_in(v_0, v_count.0, v_input_cols, v_num_rows, v_output_cols, v_row.0) -> eval_expand_right_edge_bb4_in(v_0, v_0, v_input_cols, v_num_rows, v_output_cols, v_row.0) [ v_row.0 < v_num_rows ]
		(?, 1)    eval_expand_right_edge_bb2_in(v_0, v_count.0, v_input_cols, v_num_rows, v_output_cols, v_row.0) -> eval_expand_right_edge_bb7_in(v_0, v_count.0, v_input_cols, v_num_rows, v_output_cols, v_row.0) [ v_row.0 >= v_num_rows ]
		(?, 1)    eval_expand_right_edge_bb4_in(v_0, v_count.0, v_input_cols, v_num_rows, v_output_cols, v_row.0) -> eval_expand_right_edge_bb4_in(v_0, v_count.0 - 1, v_input_cols, v_num_rows, v_output_cols, v_row.0) [ v_count.0 > 0 ]
		(?, 1)    eval_expand_right_edge_bb4_in(v_0, v_count.0, v_input_cols, v_num_rows, v_output_cols, v_row.0) -> eval_expand_right_edge_bb2_in(v_0, v_count.0, v_input_cols, v_num_rows, v_output_cols, v_row.0 + 1) [ v_count.0 <= 0 ]
		(?, 1)    eval_expand_right_edge_bb7_in(v_0, v_count.0, v_input_cols, v_num_rows, v_output_cols, v_row.0) -> eval_expand_right_edge_stop(v_0, v_count.0, v_input_cols, v_num_rows, v_output_cols, v_row.0)
	start location:	eval_expand_right_edge_start
	leaf cost:	0

Repeatedly removing leaves of the complexity graph in problem 1 produces the following problem:
2:	T:
		(1, 1)    eval_expand_right_edge_start(v_0, v_count.0, v_input_cols, v_num_rows, v_output_cols, v_row.0) -> eval_expand_right_edge_bb0_in(v_0, v_count.0, v_input_cols, v_num_rows, v_output_cols, v_row.0)
		(?, 1)    eval_expand_right_edge_bb0_in(v_0, v_count.0, v_input_cols, v_num_rows, v_output_cols, v_row.0) -> eval_expand_right_edge_bb2_in(v_output_cols - v_input_cols, v_count.0, v_input_cols, v_num_rows, v_output_cols, 0)
		(?, 1)    eval_expand_right_edge_bb2_in(v_0, v_count.0, v_input_cols, v_num_rows, v_output_cols, v_row.0) -> eval_expand_right_edge_bb4_in(v_0, v_0, v_input_cols, v_num_rows, v_output_cols, v_row.0) [ v_row.0 < v_num_rows ]
		(?, 1)    eval_expand_right_edge_bb4_in(v_0, v_count.0, v_input_cols, v_num_rows, v_output_cols, v_row.0) -> eval_expand_right_edge_bb4_in(v_0, v_count.0 - 1, v_input_cols, v_num_rows, v_output_cols, v_row.0) [ v_count.0 > 0 ]
		(?, 1)    eval_expand_right_edge_bb4_in(v_0, v_count.0, v_input_cols, v_num_rows, v_output_cols, v_row.0) -> eval_expand_right_edge_bb2_in(v_0, v_count.0, v_input_cols, v_num_rows, v_output_cols, v_row.0 + 1) [ v_count.0 <= 0 ]
	start location:	eval_expand_right_edge_start
	leaf cost:	3

Repeatedly propagating knowledge in problem 2 produces the following problem:
3:	T:
		(1, 1)    eval_expand_right_edge_start(v_0, v_count.0, v_input_cols, v_num_rows, v_output_cols, v_row.0) -> eval_expand_right_edge_bb0_in(v_0, v_count.0, v_input_cols, v_num_rows, v_output_cols, v_row.0)
		(1, 1)    eval_expand_right_edge_bb0_in(v_0, v_count.0, v_input_cols, v_num_rows, v_output_cols, v_row.0) -> eval_expand_right_edge_bb2_in(v_output_cols - v_input_cols, v_count.0, v_input_cols, v_num_rows, v_output_cols, 0)
		(?, 1)    eval_expand_right_edge_bb2_in(v_0, v_count.0, v_input_cols, v_num_rows, v_output_cols, v_row.0) -> eval_expand_right_edge_bb4_in(v_0, v_0, v_input_cols, v_num_rows, v_output_cols, v_row.0) [ v_row.0 < v_num_rows ]
		(?, 1)    eval_expand_right_edge_bb4_in(v_0, v_count.0, v_input_cols, v_num_rows, v_output_cols, v_row.0) -> eval_expand_right_edge_bb4_in(v_0, v_count.0 - 1, v_input_cols, v_num_rows, v_output_cols, v_row.0) [ v_count.0 > 0 ]
		(?, 1)    eval_expand_right_edge_bb4_in(v_0, v_count.0, v_input_cols, v_num_rows, v_output_cols, v_row.0) -> eval_expand_right_edge_bb2_in(v_0, v_count.0, v_input_cols, v_num_rows, v_output_cols, v_row.0 + 1) [ v_count.0 <= 0 ]
	start location:	eval_expand_right_edge_start
	leaf cost:	3

Separating problem 3 produces the isolated subproblem
10001:	T:
		(1, 0)    inner_10000_start_sep(v_0, v_count.0, v_input_cols, v_num_rows, v_output_cols, v_row.0) -> eval_expand_right_edge_bb4_in(v_0, v_0, v_input_cols, v_num_rows, v_output_cols, v_row.0)
		(?, 1)    eval_expand_right_edge_bb4_in(v_0, v_count.0, v_input_cols, v_num_rows, v_output_cols, v_row.0) -> eval_expand_right_edge_bb4_in(v_0, v_count.0 - 1, v_input_cols, v_num_rows, v_output_cols, v_row.0) [ v_count.0 > 0 ]
	start location:	inner_10000_start_sep
	leaf cost:	0

=== begin of proof for isolated subproblem 10001 ===
	Initial complexity problem:
	10001:	T:
			(1, 0)    inner_10000_start_sep(v_0, v_count.0, v_input_cols, v_num_rows, v_output_cols, v_row.0) -> eval_expand_right_edge_bb4_in(v_0, v_0, v_input_cols, v_num_rows, v_output_cols, v_row.0)
			(?, 1)    eval_expand_right_edge_bb4_in(v_0, v_count.0, v_input_cols, v_num_rows, v_output_cols, v_row.0) -> eval_expand_right_edge_bb4_in(v_0, v_count.0 - 1, v_input_cols, v_num_rows, v_output_cols, v_row.0) [ v_count.0 > 0 ]
		start location:	inner_10000_start_sep
		leaf cost:	0
	
	A polynomial rank function with
		Pol(inner_10000_start_sep) = V_1
		Pol(eval_expand_right_edge_bb4_in) = V_2
	orients all transitions weakly and the transition
		eval_expand_right_edge_bb4_in(v_0, v_count.0, v_input_cols, v_num_rows, v_output_cols, v_row.0) -> eval_expand_right_edge_bb4_in(v_0, v_count.0 - 1, v_input_cols, v_num_rows, v_output_cols, v_row.0) [ v_count.0 > 0 ]
	strictly and produces the following problem:
	10002:	T:
			(1, 0)      inner_10000_start_sep(v_0, v_count.0, v_input_cols, v_num_rows, v_output_cols, v_row.0) -> eval_expand_right_edge_bb4_in(v_0, v_0, v_input_cols, v_num_rows, v_output_cols, v_row.0)
			(v_0, 1)    eval_expand_right_edge_bb4_in(v_0, v_count.0, v_input_cols, v_num_rows, v_output_cols, v_row.0) -> eval_expand_right_edge_bb4_in(v_0, v_count.0 - 1, v_input_cols, v_num_rows, v_output_cols, v_row.0) [ v_count.0 > 0 ]
		start location:	inner_10000_start_sep
		leaf cost:	0
=== end of proof for isolated subproblem 10001 ===

Applying the information from the isolated subproblem 10001 to problem 3 produces the following problem:
4:	T:
		(?, 0)      inner_10000_in_sep(v_0, v_count.0, v_input_cols, v_num_rows, v_output_cols, v_row.0) -> inner_10000_out_sep(v_0, v_count.0, v_input_cols, v_num_rows, v_output_cols, v_row.0)
		(?, v_0)    inner_10000_in_sep(v_0, v_count.0, v_input_cols, v_num_rows, v_output_cols, v_row.0) -> inner_10000_compl_sep(v_0, v_count.0, v_input_cols, v_num_rows, v_output_cols, v_row.0)
		(?, 0)      inner_10000_compl_sep(v_0, v_count.0, v_input_cols, v_num_rows, v_output_cols, v_row.0) -> inner_10000_out_sep(v_0, v_count.0_sep, v_input_cols, v_num_rows, v_output_cols, v_row.0) [ v_0 >= 0 /\ v_count.0_sep >= 0 /\ v_count.0_sep <= v_0 ]
		(?, 0)      inner_10000_compl_sep(v_0, v_count.0, v_input_cols, v_num_rows, v_output_cols, v_row.0) -> inner_10000_out_sep(v_0, v_count.0_sep, v_input_cols, v_num_rows, v_output_cols, v_row.0) [ v_0 >= 0 /\ v_count.0_sep < 0 /\ -v_count.0_sep <= v_0 ]
		(?, 0)      inner_10000_compl_sep(v_0, v_count.0, v_input_cols, v_num_rows, v_output_cols, v_row.0) -> inner_10000_out_sep(v_0, v_count.0_sep, v_input_cols, v_num_rows, v_output_cols, v_row.0) [ v_0 < 0 /\ v_count.0_sep >= 0 /\ v_count.0_sep <= -v_0 ]
		(?, 0)      inner_10000_compl_sep(v_0, v_count.0, v_input_cols, v_num_rows, v_output_cols, v_row.0) -> inner_10000_out_sep(v_0, v_count.0_sep, v_input_cols, v_num_rows, v_output_cols, v_row.0) [ v_0 < 0 /\ v_count.0_sep < 0 /\ -v_count.0_sep <= -v_0 ]
		(?, 1)      inner_10000_out_sep(v_0, v_count.0, v_input_cols, v_num_rows, v_output_cols, v_row.0) -> eval_expand_right_edge_bb2_in(v_0, v_count.0, v_input_cols, v_num_rows, v_output_cols, v_row.0 + 1) [ v_count.0 <= 0 ]
		(?, 1)      eval_expand_right_edge_bb2_in(v_0, v_count.0, v_input_cols, v_num_rows, v_output_cols, v_row.0) -> inner_10000_in_sep(v_0, v_0, v_input_cols, v_num_rows, v_output_cols, v_row.0) [ v_row.0 < v_num_rows ]
		(1, 1)      eval_expand_right_edge_bb0_in(v_0, v_count.0, v_input_cols, v_num_rows, v_output_cols, v_row.0) -> eval_expand_right_edge_bb2_in(v_output_cols - v_input_cols, v_count.0, v_input_cols, v_num_rows, v_output_cols, 0)
		(1, 1)      eval_expand_right_edge_start(v_0, v_count.0, v_input_cols, v_num_rows, v_output_cols, v_row.0) -> eval_expand_right_edge_bb0_in(v_0, v_count.0, v_input_cols, v_num_rows, v_output_cols, v_row.0)
	start location:	eval_expand_right_edge_start
	leaf cost:	3

Applied AI with 'oct' on problem 4 to obtain the following invariants:
  For symbol eval_expand_right_edge_bb2_in: X_6 >= 0
  For symbol inner_10000_compl_sep: X_4 - X_6 - 1 >= 0 /\ X_6 >= 0 /\ X_4 + X_6 - 1 >= 0 /\ X_4 - 1 >= 0 /\ X_1 - X_2 >= 0 /\ -X_1 + X_2 >= 0
  For symbol inner_10000_in_sep: X_4 - X_6 - 1 >= 0 /\ X_6 >= 0 /\ X_4 + X_6 - 1 >= 0 /\ X_4 - 1 >= 0 /\ X_1 - X_2 >= 0 /\ -X_1 + X_2 >= 0
  For symbol inner_10000_out_sep: X_4 - X_6 - 1 >= 0 /\ X_6 >= 0 /\ X_4 + X_6 - 1 >= 0 /\ X_4 - 1 >= 0


This yielded the following problem:
5:	T:
		(1, 1)      eval_expand_right_edge_start(v_0, v_count.0, v_input_cols, v_num_rows, v_output_cols, v_row.0) -> eval_expand_right_edge_bb0_in(v_0, v_count.0, v_input_cols, v_num_rows, v_output_cols, v_row.0)
		(1, 1)      eval_expand_right_edge_bb0_in(v_0, v_count.0, v_input_cols, v_num_rows, v_output_cols, v_row.0) -> eval_expand_right_edge_bb2_in(v_output_cols - v_input_cols, v_count.0, v_input_cols, v_num_rows, v_output_cols, 0)
		(?, 1)      eval_expand_right_edge_bb2_in(v_0, v_count.0, v_input_cols, v_num_rows, v_output_cols, v_row.0) -> inner_10000_in_sep(v_0, v_0, v_input_cols, v_num_rows, v_output_cols, v_row.0) [ v_row.0 >= 0 /\ v_row.0 < v_num_rows ]
		(?, 1)      inner_10000_out_sep(v_0, v_count.0, v_input_cols, v_num_rows, v_output_cols, v_row.0) -> eval_expand_right_edge_bb2_in(v_0, v_count.0, v_input_cols, v_num_rows, v_output_cols, v_row.0 + 1) [ v_num_rows - v_row.0 - 1 >= 0 /\ v_row.0 >= 0 /\ v_num_rows + v_row.0 - 1 >= 0 /\ v_num_rows - 1 >= 0 /\ v_count.0 <= 0 ]
		(?, 0)      inner_10000_compl_sep(v_0, v_count.0, v_input_cols, v_num_rows, v_output_cols, v_row.0) -> inner_10000_out_sep(v_0, v_count.0_sep, v_input_cols, v_num_rows, v_output_cols, v_row.0) [ v_num_rows - v_row.0 - 1 >= 0 /\ v_row.0 >= 0 /\ v_num_rows + v_row.0 - 1 >= 0 /\ v_num_rows - 1 >= 0 /\ v_0 - v_count.0 >= 0 /\ -v_0 + v_count.0 >= 0 /\ v_0 < 0 /\ v_count.0_sep < 0 /\ -v_count.0_sep <= -v_0 ]
		(?, 0)      inner_10000_compl_sep(v_0, v_count.0, v_input_cols, v_num_rows, v_output_cols, v_row.0) -> inner_10000_out_sep(v_0, v_count.0_sep, v_input_cols, v_num_rows, v_output_cols, v_row.0) [ v_num_rows - v_row.0 - 1 >= 0 /\ v_row.0 >= 0 /\ v_num_rows + v_row.0 - 1 >= 0 /\ v_num_rows - 1 >= 0 /\ v_0 - v_count.0 >= 0 /\ -v_0 + v_count.0 >= 0 /\ v_0 < 0 /\ v_count.0_sep >= 0 /\ v_count.0_sep <= -v_0 ]
		(?, 0)      inner_10000_compl_sep(v_0, v_count.0, v_input_cols, v_num_rows, v_output_cols, v_row.0) -> inner_10000_out_sep(v_0, v_count.0_sep, v_input_cols, v_num_rows, v_output_cols, v_row.0) [ v_num_rows - v_row.0 - 1 >= 0 /\ v_row.0 >= 0 /\ v_num_rows + v_row.0 - 1 >= 0 /\ v_num_rows - 1 >= 0 /\ v_0 - v_count.0 >= 0 /\ -v_0 + v_count.0 >= 0 /\ v_0 >= 0 /\ v_count.0_sep < 0 /\ -v_count.0_sep <= v_0 ]
		(?, 0)      inner_10000_compl_sep(v_0, v_count.0, v_input_cols, v_num_rows, v_output_cols, v_row.0) -> inner_10000_out_sep(v_0, v_count.0_sep, v_input_cols, v_num_rows, v_output_cols, v_row.0) [ v_num_rows - v_row.0 - 1 >= 0 /\ v_row.0 >= 0 /\ v_num_rows + v_row.0 - 1 >= 0 /\ v_num_rows - 1 >= 0 /\ v_0 - v_count.0 >= 0 /\ -v_0 + v_count.0 >= 0 /\ v_0 >= 0 /\ v_count.0_sep >= 0 /\ v_count.0_sep <= v_0 ]
		(?, v_0)    inner_10000_in_sep(v_0, v_count.0, v_input_cols, v_num_rows, v_output_cols, v_row.0) -> inner_10000_compl_sep(v_0, v_count.0, v_input_cols, v_num_rows, v_output_cols, v_row.0) [ v_num_rows - v_row.0 - 1 >= 0 /\ v_row.0 >= 0 /\ v_num_rows + v_row.0 - 1 >= 0 /\ v_num_rows - 1 >= 0 /\ v_0 - v_count.0 >= 0 /\ -v_0 + v_count.0 >= 0 ]
		(?, 0)      inner_10000_in_sep(v_0, v_count.0, v_input_cols, v_num_rows, v_output_cols, v_row.0) -> inner_10000_out_sep(v_0, v_count.0, v_input_cols, v_num_rows, v_output_cols, v_row.0) [ v_num_rows - v_row.0 - 1 >= 0 /\ v_row.0 >= 0 /\ v_num_rows + v_row.0 - 1 >= 0 /\ v_num_rows - 1 >= 0 /\ v_0 - v_count.0 >= 0 /\ -v_0 + v_count.0 >= 0 ]
	start location:	eval_expand_right_edge_start
	leaf cost:	3

A polynomial rank function with
	Pol(eval_expand_right_edge_start) = 4*V_4 + 3
	Pol(eval_expand_right_edge_bb0_in) = 4*V_4 + 3
	Pol(eval_expand_right_edge_bb2_in) = 4*V_4 - 4*V_6 + 3
	Pol(inner_10000_in_sep) = 4*V_4 - 4*V_6 + 2
	Pol(inner_10000_out_sep) = 4*V_4 - 4*V_6
	Pol(inner_10000_compl_sep) = 4*V_4 - 4*V_6 + 1
orients all transitions weakly and the transitions
	inner_10000_out_sep(v_0, v_count.0, v_input_cols, v_num_rows, v_output_cols, v_row.0) -> eval_expand_right_edge_bb2_in(v_0, v_count.0, v_input_cols, v_num_rows, v_output_cols, v_row.0 + 1) [ v_num_rows - v_row.0 - 1 >= 0 /\ v_row.0 >= 0 /\ v_num_rows + v_row.0 - 1 >= 0 /\ v_num_rows - 1 >= 0 /\ v_count.0 <= 0 ]
	inner_10000_in_sep(v_0, v_count.0, v_input_cols, v_num_rows, v_output_cols, v_row.0) -> inner_10000_out_sep(v_0, v_count.0, v_input_cols, v_num_rows, v_output_cols, v_row.0) [ v_num_rows - v_row.0 - 1 >= 0 /\ v_row.0 >= 0 /\ v_num_rows + v_row.0 - 1 >= 0 /\ v_num_rows - 1 >= 0 /\ v_0 - v_count.0 >= 0 /\ -v_0 + v_count.0 >= 0 ]
	inner_10000_in_sep(v_0, v_count.0, v_input_cols, v_num_rows, v_output_cols, v_row.0) -> inner_10000_compl_sep(v_0, v_count.0, v_input_cols, v_num_rows, v_output_cols, v_row.0) [ v_num_rows - v_row.0 - 1 >= 0 /\ v_row.0 >= 0 /\ v_num_rows + v_row.0 - 1 >= 0 /\ v_num_rows - 1 >= 0 /\ v_0 - v_count.0 >= 0 /\ -v_0 + v_count.0 >= 0 ]
	inner_10000_compl_sep(v_0, v_count.0, v_input_cols, v_num_rows, v_output_cols, v_row.0) -> inner_10000_out_sep(v_0, v_count.0_sep, v_input_cols, v_num_rows, v_output_cols, v_row.0) [ v_num_rows - v_row.0 - 1 >= 0 /\ v_row.0 >= 0 /\ v_num_rows + v_row.0 - 1 >= 0 /\ v_num_rows - 1 >= 0 /\ v_0 - v_count.0 >= 0 /\ -v_0 + v_count.0 >= 0 /\ v_0 < 0 /\ v_count.0_sep < 0 /\ -v_count.0_sep <= -v_0 ]
	inner_10000_compl_sep(v_0, v_count.0, v_input_cols, v_num_rows, v_output_cols, v_row.0) -> inner_10000_out_sep(v_0, v_count.0_sep, v_input_cols, v_num_rows, v_output_cols, v_row.0) [ v_num_rows - v_row.0 - 1 >= 0 /\ v_row.0 >= 0 /\ v_num_rows + v_row.0 - 1 >= 0 /\ v_num_rows - 1 >= 0 /\ v_0 - v_count.0 >= 0 /\ -v_0 + v_count.0 >= 0 /\ v_0 < 0 /\ v_count.0_sep >= 0 /\ v_count.0_sep <= -v_0 ]
	inner_10000_compl_sep(v_0, v_count.0, v_input_cols, v_num_rows, v_output_cols, v_row.0) -> inner_10000_out_sep(v_0, v_count.0_sep, v_input_cols, v_num_rows, v_output_cols, v_row.0) [ v_num_rows - v_row.0 - 1 >= 0 /\ v_row.0 >= 0 /\ v_num_rows + v_row.0 - 1 >= 0 /\ v_num_rows - 1 >= 0 /\ v_0 - v_count.0 >= 0 /\ -v_0 + v_count.0 >= 0 /\ v_0 >= 0 /\ v_count.0_sep < 0 /\ -v_count.0_sep <= v_0 ]
	inner_10000_compl_sep(v_0, v_count.0, v_input_cols, v_num_rows, v_output_cols, v_row.0) -> inner_10000_out_sep(v_0, v_count.0_sep, v_input_cols, v_num_rows, v_output_cols, v_row.0) [ v_num_rows - v_row.0 - 1 >= 0 /\ v_row.0 >= 0 /\ v_num_rows + v_row.0 - 1 >= 0 /\ v_num_rows - 1 >= 0 /\ v_0 - v_count.0 >= 0 /\ -v_0 + v_count.0 >= 0 /\ v_0 >= 0 /\ v_count.0_sep >= 0 /\ v_count.0_sep <= v_0 ]
	eval_expand_right_edge_bb2_in(v_0, v_count.0, v_input_cols, v_num_rows, v_output_cols, v_row.0) -> inner_10000_in_sep(v_0, v_0, v_input_cols, v_num_rows, v_output_cols, v_row.0) [ v_row.0 >= 0 /\ v_row.0 < v_num_rows ]
strictly and produces the following problem:
6:	T:
		(1, 1)                     eval_expand_right_edge_start(v_0, v_count.0, v_input_cols, v_num_rows, v_output_cols, v_row.0) -> eval_expand_right_edge_bb0_in(v_0, v_count.0, v_input_cols, v_num_rows, v_output_cols, v_row.0)
		(1, 1)                     eval_expand_right_edge_bb0_in(v_0, v_count.0, v_input_cols, v_num_rows, v_output_cols, v_row.0) -> eval_expand_right_edge_bb2_in(v_output_cols - v_input_cols, v_count.0, v_input_cols, v_num_rows, v_output_cols, 0)
		(4*v_num_rows + 3, 1)      eval_expand_right_edge_bb2_in(v_0, v_count.0, v_input_cols, v_num_rows, v_output_cols, v_row.0) -> inner_10000_in_sep(v_0, v_0, v_input_cols, v_num_rows, v_output_cols, v_row.0) [ v_row.0 >= 0 /\ v_row.0 < v_num_rows ]
		(4*v_num_rows + 3, 1)      inner_10000_out_sep(v_0, v_count.0, v_input_cols, v_num_rows, v_output_cols, v_row.0) -> eval_expand_right_edge_bb2_in(v_0, v_count.0, v_input_cols, v_num_rows, v_output_cols, v_row.0 + 1) [ v_num_rows - v_row.0 - 1 >= 0 /\ v_row.0 >= 0 /\ v_num_rows + v_row.0 - 1 >= 0 /\ v_num_rows - 1 >= 0 /\ v_count.0 <= 0 ]
		(4*v_num_rows + 3, 0)      inner_10000_compl_sep(v_0, v_count.0, v_input_cols, v_num_rows, v_output_cols, v_row.0) -> inner_10000_out_sep(v_0, v_count.0_sep, v_input_cols, v_num_rows, v_output_cols, v_row.0) [ v_num_rows - v_row.0 - 1 >= 0 /\ v_row.0 >= 0 /\ v_num_rows + v_row.0 - 1 >= 0 /\ v_num_rows - 1 >= 0 /\ v_0 - v_count.0 >= 0 /\ -v_0 + v_count.0 >= 0 /\ v_0 < 0 /\ v_count.0_sep < 0 /\ -v_count.0_sep <= -v_0 ]
		(4*v_num_rows + 3, 0)      inner_10000_compl_sep(v_0, v_count.0, v_input_cols, v_num_rows, v_output_cols, v_row.0) -> inner_10000_out_sep(v_0, v_count.0_sep, v_input_cols, v_num_rows, v_output_cols, v_row.0) [ v_num_rows - v_row.0 - 1 >= 0 /\ v_row.0 >= 0 /\ v_num_rows + v_row.0 - 1 >= 0 /\ v_num_rows - 1 >= 0 /\ v_0 - v_count.0 >= 0 /\ -v_0 + v_count.0 >= 0 /\ v_0 < 0 /\ v_count.0_sep >= 0 /\ v_count.0_sep <= -v_0 ]
		(4*v_num_rows + 3, 0)      inner_10000_compl_sep(v_0, v_count.0, v_input_cols, v_num_rows, v_output_cols, v_row.0) -> inner_10000_out_sep(v_0, v_count.0_sep, v_input_cols, v_num_rows, v_output_cols, v_row.0) [ v_num_rows - v_row.0 - 1 >= 0 /\ v_row.0 >= 0 /\ v_num_rows + v_row.0 - 1 >= 0 /\ v_num_rows - 1 >= 0 /\ v_0 - v_count.0 >= 0 /\ -v_0 + v_count.0 >= 0 /\ v_0 >= 0 /\ v_count.0_sep < 0 /\ -v_count.0_sep <= v_0 ]
		(4*v_num_rows + 3, 0)      inner_10000_compl_sep(v_0, v_count.0, v_input_cols, v_num_rows, v_output_cols, v_row.0) -> inner_10000_out_sep(v_0, v_count.0_sep, v_input_cols, v_num_rows, v_output_cols, v_row.0) [ v_num_rows - v_row.0 - 1 >= 0 /\ v_row.0 >= 0 /\ v_num_rows + v_row.0 - 1 >= 0 /\ v_num_rows - 1 >= 0 /\ v_0 - v_count.0 >= 0 /\ -v_0 + v_count.0 >= 0 /\ v_0 >= 0 /\ v_count.0_sep >= 0 /\ v_count.0_sep <= v_0 ]
		(4*v_num_rows + 3, v_0)    inner_10000_in_sep(v_0, v_count.0, v_input_cols, v_num_rows, v_output_cols, v_row.0) -> inner_10000_compl_sep(v_0, v_count.0, v_input_cols, v_num_rows, v_output_cols, v_row.0) [ v_num_rows - v_row.0 - 1 >= 0 /\ v_row.0 >= 0 /\ v_num_rows + v_row.0 - 1 >= 0 /\ v_num_rows - 1 >= 0 /\ v_0 - v_count.0 >= 0 /\ -v_0 + v_count.0 >= 0 ]
		(4*v_num_rows + 3, 0)      inner_10000_in_sep(v_0, v_count.0, v_input_cols, v_num_rows, v_output_cols, v_row.0) -> inner_10000_out_sep(v_0, v_count.0, v_input_cols, v_num_rows, v_output_cols, v_row.0) [ v_num_rows - v_row.0 - 1 >= 0 /\ v_row.0 >= 0 /\ v_num_rows + v_row.0 - 1 >= 0 /\ v_num_rows - 1 >= 0 /\ v_0 - v_count.0 >= 0 /\ -v_0 + v_count.0 >= 0 ]
	start location:	eval_expand_right_edge_start
	leaf cost:	3

Complexity upper bound 8*v_num_rows + 4*v_input_cols*v_num_rows + 4*v_num_rows*v_output_cols + 3*v_input_cols + 3*v_output_cols + 11

Time: 0.561 sec (SMT: 0.454 sec)

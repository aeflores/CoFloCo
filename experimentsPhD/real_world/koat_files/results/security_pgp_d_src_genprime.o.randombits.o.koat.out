YES(?, 3*v_nbits + 63)

Initial complexity problem:
1:	T:
		(1, 1)    eval_randombits_start(v_.01, v_nbits) -> Com_1(eval_randombits_bb0_in(v_.01, v_nbits))
		(?, 1)    eval_randombits_bb0_in(v_.01, v_nbits) -> Com_1(eval_randombits_0(v_.01, v_nbits))
		(?, 1)    eval_randombits_0(v_.01, v_nbits) -> Com_2(eval_mp_init_start(v_.01, v_nbits), eval_randombits_1(v_.01, v_nbits))
		(?, 1)    eval_randombits_1(v_.01, v_nbits) -> Com_1(eval_randombits_bb1_in(v_nbits, v_nbits))
		(?, 1)    eval_randombits_bb1_in(v_.01, v_nbits) -> Com_1(eval_randombits_4(v_.01, v_nbits)) [ v_.01 >= 16 ]
		(?, 1)    eval_randombits_bb1_in(v_.01, v_nbits) -> Com_1(eval_randombits_10(v_.01, v_nbits)) [ v_.01 < 16 ]
		(?, 1)    eval_randombits_bb1_in(v_.01, v_nbits) -> Com_1(eval_randombits_bb5_in(v_.01, v_nbits)) [ v_.01 < 16 ]
		(?, 1)    eval_randombits_4(v_.01, v_nbits) -> Com_2(eval_randomunit_start(v_.01, v_nbits), eval_randombits_5(v_.01, v_nbits))
		(?, 1)    eval_randombits_5(v_.01, v_nbits) -> Com_1(eval_randombits_bb1_in(v_.01 - 16, v_nbits))
		(?, 1)    eval_randombits_10(v_.01, v_nbits) -> Com_2(eval_randomunit_start(v_.01, v_nbits), eval_randombits_11(v_.01, v_nbits))
		(?, 1)    eval_randombits_11(v_.01, v_nbits) -> Com_1(eval_randombits_bb5_in(v_.01, v_nbits))
		(?, 1)    eval_randombits_bb5_in(v_.01, v_nbits) -> Com_1(eval_randombits_stop(v_.01, v_nbits))
	start location:	eval_randombits_start
	leaf cost:	0

Repeatedly propagating knowledge in problem 1 produces the following problem:
2:	T:
		(1, 1)    eval_randombits_start(v_.01, v_nbits) -> Com_1(eval_randombits_bb0_in(v_.01, v_nbits))
		(1, 1)    eval_randombits_bb0_in(v_.01, v_nbits) -> Com_1(eval_randombits_0(v_.01, v_nbits))
		(1, 1)    eval_randombits_0(v_.01, v_nbits) -> Com_2(eval_mp_init_start(v_.01, v_nbits), eval_randombits_1(v_.01, v_nbits))
		(1, 1)    eval_randombits_1(v_.01, v_nbits) -> Com_1(eval_randombits_bb1_in(v_nbits, v_nbits))
		(?, 1)    eval_randombits_bb1_in(v_.01, v_nbits) -> Com_1(eval_randombits_4(v_.01, v_nbits)) [ v_.01 >= 16 ]
		(?, 1)    eval_randombits_bb1_in(v_.01, v_nbits) -> Com_1(eval_randombits_10(v_.01, v_nbits)) [ v_.01 < 16 ]
		(?, 1)    eval_randombits_bb1_in(v_.01, v_nbits) -> Com_1(eval_randombits_bb5_in(v_.01, v_nbits)) [ v_.01 < 16 ]
		(?, 1)    eval_randombits_4(v_.01, v_nbits) -> Com_2(eval_randomunit_start(v_.01, v_nbits), eval_randombits_5(v_.01, v_nbits))
		(?, 1)    eval_randombits_5(v_.01, v_nbits) -> Com_1(eval_randombits_bb1_in(v_.01 - 16, v_nbits))
		(?, 1)    eval_randombits_10(v_.01, v_nbits) -> Com_2(eval_randomunit_start(v_.01, v_nbits), eval_randombits_11(v_.01, v_nbits))
		(?, 1)    eval_randombits_11(v_.01, v_nbits) -> Com_1(eval_randombits_bb5_in(v_.01, v_nbits))
		(?, 1)    eval_randombits_bb5_in(v_.01, v_nbits) -> Com_1(eval_randombits_stop(v_.01, v_nbits))
	start location:	eval_randombits_start
	leaf cost:	0

A polynomial rank function with
	Pol(eval_randombits_start) = 4
	Pol(eval_randombits_bb0_in) = 4
	Pol(eval_randombits_0) = 4
	Pol(eval_mp_init_start) = 0
	Pol(eval_randombits_1) = 4
	Pol(eval_randombits_bb1_in) = 4
	Pol(eval_randombits_4) = 4
	Pol(eval_randombits_10) = 3
	Pol(eval_randombits_bb5_in) = 1
	Pol(eval_randomunit_start) = 0
	Pol(eval_randombits_5) = 4
	Pol(eval_randombits_11) = 2
	Pol(eval_randombits_stop) = 0
orients all transitions weakly and the transitions
	eval_randombits_bb5_in(v_.01, v_nbits) -> Com_1(eval_randombits_stop(v_.01, v_nbits))
	eval_randombits_bb1_in(v_.01, v_nbits) -> Com_1(eval_randombits_bb5_in(v_.01, v_nbits)) [ v_.01 < 16 ]
	eval_randombits_bb1_in(v_.01, v_nbits) -> Com_1(eval_randombits_10(v_.01, v_nbits)) [ v_.01 < 16 ]
	eval_randombits_11(v_.01, v_nbits) -> Com_1(eval_randombits_bb5_in(v_.01, v_nbits))
	eval_randombits_10(v_.01, v_nbits) -> Com_2(eval_randomunit_start(v_.01, v_nbits), eval_randombits_11(v_.01, v_nbits))
strictly and produces the following problem:
3:	T:
		(1, 1)    eval_randombits_start(v_.01, v_nbits) -> Com_1(eval_randombits_bb0_in(v_.01, v_nbits))
		(1, 1)    eval_randombits_bb0_in(v_.01, v_nbits) -> Com_1(eval_randombits_0(v_.01, v_nbits))
		(1, 1)    eval_randombits_0(v_.01, v_nbits) -> Com_2(eval_mp_init_start(v_.01, v_nbits), eval_randombits_1(v_.01, v_nbits))
		(1, 1)    eval_randombits_1(v_.01, v_nbits) -> Com_1(eval_randombits_bb1_in(v_nbits, v_nbits))
		(?, 1)    eval_randombits_bb1_in(v_.01, v_nbits) -> Com_1(eval_randombits_4(v_.01, v_nbits)) [ v_.01 >= 16 ]
		(4, 1)    eval_randombits_bb1_in(v_.01, v_nbits) -> Com_1(eval_randombits_10(v_.01, v_nbits)) [ v_.01 < 16 ]
		(4, 1)    eval_randombits_bb1_in(v_.01, v_nbits) -> Com_1(eval_randombits_bb5_in(v_.01, v_nbits)) [ v_.01 < 16 ]
		(?, 1)    eval_randombits_4(v_.01, v_nbits) -> Com_2(eval_randomunit_start(v_.01, v_nbits), eval_randombits_5(v_.01, v_nbits))
		(?, 1)    eval_randombits_5(v_.01, v_nbits) -> Com_1(eval_randombits_bb1_in(v_.01 - 16, v_nbits))
		(4, 1)    eval_randombits_10(v_.01, v_nbits) -> Com_2(eval_randomunit_start(v_.01, v_nbits), eval_randombits_11(v_.01, v_nbits))
		(4, 1)    eval_randombits_11(v_.01, v_nbits) -> Com_1(eval_randombits_bb5_in(v_.01, v_nbits))
		(4, 1)    eval_randombits_bb5_in(v_.01, v_nbits) -> Com_1(eval_randombits_stop(v_.01, v_nbits))
	start location:	eval_randombits_start
	leaf cost:	0

Applied AI with 'oct' on problem 3 to obtain the following invariants:
  For symbol eval_randombits_10: -X_1 + X_2 >= 0 /\ -X_1 + 15 >= 0
  For symbol eval_randombits_11: -X_1 + X_2 >= 0 /\ -X_1 + 15 >= 0
  For symbol eval_randombits_4: X_2 - 16 >= 0 /\ X_1 + X_2 - 32 >= 0 /\ -X_1 + X_2 >= 0 /\ X_1 - 16 >= 0
  For symbol eval_randombits_5: X_2 - 16 >= 0 /\ X_1 + X_2 - 32 >= 0 /\ -X_1 + X_2 >= 0 /\ X_1 - 16 >= 0
  For symbol eval_randombits_bb1_in: -X_1 + X_2 >= 0
  For symbol eval_randombits_bb5_in: -X_1 + X_2 >= 0 /\ -X_1 + 15 >= 0


This yielded the following problem:
4:	T:
		(4, 1)    eval_randombits_bb5_in(v_.01, v_nbits) -> Com_1(eval_randombits_stop(v_.01, v_nbits)) [ -v_.01 + v_nbits >= 0 /\ -v_.01 + 15 >= 0 ]
		(4, 1)    eval_randombits_11(v_.01, v_nbits) -> Com_1(eval_randombits_bb5_in(v_.01, v_nbits)) [ -v_.01 + v_nbits >= 0 /\ -v_.01 + 15 >= 0 ]
		(4, 1)    eval_randombits_10(v_.01, v_nbits) -> Com_2(eval_randomunit_start(v_.01, v_nbits), eval_randombits_11(v_.01, v_nbits)) [ -v_.01 + v_nbits >= 0 /\ -v_.01 + 15 >= 0 ]
		(?, 1)    eval_randombits_5(v_.01, v_nbits) -> Com_1(eval_randombits_bb1_in(v_.01 - 16, v_nbits)) [ v_nbits - 16 >= 0 /\ v_.01 + v_nbits - 32 >= 0 /\ -v_.01 + v_nbits >= 0 /\ v_.01 - 16 >= 0 ]
		(?, 1)    eval_randombits_4(v_.01, v_nbits) -> Com_2(eval_randomunit_start(v_.01, v_nbits), eval_randombits_5(v_.01, v_nbits)) [ v_nbits - 16 >= 0 /\ v_.01 + v_nbits - 32 >= 0 /\ -v_.01 + v_nbits >= 0 /\ v_.01 - 16 >= 0 ]
		(4, 1)    eval_randombits_bb1_in(v_.01, v_nbits) -> Com_1(eval_randombits_bb5_in(v_.01, v_nbits)) [ -v_.01 + v_nbits >= 0 /\ v_.01 < 16 ]
		(4, 1)    eval_randombits_bb1_in(v_.01, v_nbits) -> Com_1(eval_randombits_10(v_.01, v_nbits)) [ -v_.01 + v_nbits >= 0 /\ v_.01 < 16 ]
		(?, 1)    eval_randombits_bb1_in(v_.01, v_nbits) -> Com_1(eval_randombits_4(v_.01, v_nbits)) [ -v_.01 + v_nbits >= 0 /\ v_.01 >= 16 ]
		(1, 1)    eval_randombits_1(v_.01, v_nbits) -> Com_1(eval_randombits_bb1_in(v_nbits, v_nbits))
		(1, 1)    eval_randombits_0(v_.01, v_nbits) -> Com_2(eval_mp_init_start(v_.01, v_nbits), eval_randombits_1(v_.01, v_nbits))
		(1, 1)    eval_randombits_bb0_in(v_.01, v_nbits) -> Com_1(eval_randombits_0(v_.01, v_nbits))
		(1, 1)    eval_randombits_start(v_.01, v_nbits) -> Com_1(eval_randombits_bb0_in(v_.01, v_nbits))
	start location:	eval_randombits_start
	leaf cost:	0

A polynomial rank function with
	Pol(eval_randombits_bb1_in) = V_1 - 13
	Pol(eval_randombits_4) = V_1 - 14
	Pol(eval_randombits_5) = V_1 - 15
	Pol(eval_randomunit_start) = -V_2 + 16
and size complexities
	S("eval_randombits_start(v_.01, v_nbits) -> Com_1(eval_randombits_bb0_in(v_.01, v_nbits))", 0-0) = v_.01
	S("eval_randombits_start(v_.01, v_nbits) -> Com_1(eval_randombits_bb0_in(v_.01, v_nbits))", 0-1) = v_nbits
	S("eval_randombits_bb0_in(v_.01, v_nbits) -> Com_1(eval_randombits_0(v_.01, v_nbits))", 0-0) = v_.01
	S("eval_randombits_bb0_in(v_.01, v_nbits) -> Com_1(eval_randombits_0(v_.01, v_nbits))", 0-1) = v_nbits
	S("eval_randombits_0(v_.01, v_nbits) -> Com_2(eval_mp_init_start(v_.01, v_nbits), eval_randombits_1(v_.01, v_nbits))", 0-0) = v_.01
	S("eval_randombits_0(v_.01, v_nbits) -> Com_2(eval_mp_init_start(v_.01, v_nbits), eval_randombits_1(v_.01, v_nbits))", 0-1) = v_nbits
	S("eval_randombits_0(v_.01, v_nbits) -> Com_2(eval_mp_init_start(v_.01, v_nbits), eval_randombits_1(v_.01, v_nbits))", 1-0) = v_.01
	S("eval_randombits_0(v_.01, v_nbits) -> Com_2(eval_mp_init_start(v_.01, v_nbits), eval_randombits_1(v_.01, v_nbits))", 1-1) = v_nbits
	S("eval_randombits_1(v_.01, v_nbits) -> Com_1(eval_randombits_bb1_in(v_nbits, v_nbits))", 0-0) = v_nbits
	S("eval_randombits_1(v_.01, v_nbits) -> Com_1(eval_randombits_bb1_in(v_nbits, v_nbits))", 0-1) = v_nbits
	S("eval_randombits_bb1_in(v_.01, v_nbits) -> Com_1(eval_randombits_4(v_.01, v_nbits)) [ -v_.01 + v_nbits >= 0 /\\ v_.01 >= 16 ]", 0-0) = v_nbits
	S("eval_randombits_bb1_in(v_.01, v_nbits) -> Com_1(eval_randombits_4(v_.01, v_nbits)) [ -v_.01 + v_nbits >= 0 /\\ v_.01 >= 16 ]", 0-1) = v_nbits
	S("eval_randombits_bb1_in(v_.01, v_nbits) -> Com_1(eval_randombits_10(v_.01, v_nbits)) [ -v_.01 + v_nbits >= 0 /\\ v_.01 < 16 ]", 0-0) = v_nbits
	S("eval_randombits_bb1_in(v_.01, v_nbits) -> Com_1(eval_randombits_10(v_.01, v_nbits)) [ -v_.01 + v_nbits >= 0 /\\ v_.01 < 16 ]", 0-1) = v_nbits
	S("eval_randombits_bb1_in(v_.01, v_nbits) -> Com_1(eval_randombits_bb5_in(v_.01, v_nbits)) [ -v_.01 + v_nbits >= 0 /\\ v_.01 < 16 ]", 0-0) = v_nbits
	S("eval_randombits_bb1_in(v_.01, v_nbits) -> Com_1(eval_randombits_bb5_in(v_.01, v_nbits)) [ -v_.01 + v_nbits >= 0 /\\ v_.01 < 16 ]", 0-1) = v_nbits
	S("eval_randombits_4(v_.01, v_nbits) -> Com_2(eval_randomunit_start(v_.01, v_nbits), eval_randombits_5(v_.01, v_nbits)) [ v_nbits - 16 >= 0 /\\ v_.01 + v_nbits - 32 >= 0 /\\ -v_.01 + v_nbits >= 0 /\\ v_.01 - 16 >= 0 ]", 0-0) = v_nbits
	S("eval_randombits_4(v_.01, v_nbits) -> Com_2(eval_randomunit_start(v_.01, v_nbits), eval_randombits_5(v_.01, v_nbits)) [ v_nbits - 16 >= 0 /\\ v_.01 + v_nbits - 32 >= 0 /\\ -v_.01 + v_nbits >= 0 /\\ v_.01 - 16 >= 0 ]", 0-1) = v_nbits
	S("eval_randombits_4(v_.01, v_nbits) -> Com_2(eval_randomunit_start(v_.01, v_nbits), eval_randombits_5(v_.01, v_nbits)) [ v_nbits - 16 >= 0 /\\ v_.01 + v_nbits - 32 >= 0 /\\ -v_.01 + v_nbits >= 0 /\\ v_.01 - 16 >= 0 ]", 1-0) = v_nbits
	S("eval_randombits_4(v_.01, v_nbits) -> Com_2(eval_randomunit_start(v_.01, v_nbits), eval_randombits_5(v_.01, v_nbits)) [ v_nbits - 16 >= 0 /\\ v_.01 + v_nbits - 32 >= 0 /\\ -v_.01 + v_nbits >= 0 /\\ v_.01 - 16 >= 0 ]", 1-1) = v_nbits
	S("eval_randombits_5(v_.01, v_nbits) -> Com_1(eval_randombits_bb1_in(v_.01 - 16, v_nbits)) [ v_nbits - 16 >= 0 /\\ v_.01 + v_nbits - 32 >= 0 /\\ -v_.01 + v_nbits >= 0 /\\ v_.01 - 16 >= 0 ]", 0-0) = v_nbits
	S("eval_randombits_5(v_.01, v_nbits) -> Com_1(eval_randombits_bb1_in(v_.01 - 16, v_nbits)) [ v_nbits - 16 >= 0 /\\ v_.01 + v_nbits - 32 >= 0 /\\ -v_.01 + v_nbits >= 0 /\\ v_.01 - 16 >= 0 ]", 0-1) = v_nbits
	S("eval_randombits_10(v_.01, v_nbits) -> Com_2(eval_randomunit_start(v_.01, v_nbits), eval_randombits_11(v_.01, v_nbits)) [ -v_.01 + v_nbits >= 0 /\\ -v_.01 + 15 >= 0 ]", 0-0) = v_nbits
	S("eval_randombits_10(v_.01, v_nbits) -> Com_2(eval_randomunit_start(v_.01, v_nbits), eval_randombits_11(v_.01, v_nbits)) [ -v_.01 + v_nbits >= 0 /\\ -v_.01 + 15 >= 0 ]", 0-1) = v_nbits
	S("eval_randombits_10(v_.01, v_nbits) -> Com_2(eval_randomunit_start(v_.01, v_nbits), eval_randombits_11(v_.01, v_nbits)) [ -v_.01 + v_nbits >= 0 /\\ -v_.01 + 15 >= 0 ]", 1-0) = v_nbits
	S("eval_randombits_10(v_.01, v_nbits) -> Com_2(eval_randomunit_start(v_.01, v_nbits), eval_randombits_11(v_.01, v_nbits)) [ -v_.01 + v_nbits >= 0 /\\ -v_.01 + 15 >= 0 ]", 1-1) = v_nbits
	S("eval_randombits_11(v_.01, v_nbits) -> Com_1(eval_randombits_bb5_in(v_.01, v_nbits)) [ -v_.01 + v_nbits >= 0 /\\ -v_.01 + 15 >= 0 ]", 0-0) = v_nbits
	S("eval_randombits_11(v_.01, v_nbits) -> Com_1(eval_randombits_bb5_in(v_.01, v_nbits)) [ -v_.01 + v_nbits >= 0 /\\ -v_.01 + 15 >= 0 ]", 0-1) = v_nbits
	S("eval_randombits_bb5_in(v_.01, v_nbits) -> Com_1(eval_randombits_stop(v_.01, v_nbits)) [ -v_.01 + v_nbits >= 0 /\\ -v_.01 + 15 >= 0 ]", 0-0) = v_nbits
	S("eval_randombits_bb5_in(v_.01, v_nbits) -> Com_1(eval_randombits_stop(v_.01, v_nbits)) [ -v_.01 + v_nbits >= 0 /\\ -v_.01 + 15 >= 0 ]", 0-1) = v_nbits
orients the transitions
	eval_randombits_bb1_in(v_.01, v_nbits) -> Com_1(eval_randombits_4(v_.01, v_nbits)) [ -v_.01 + v_nbits >= 0 /\ v_.01 >= 16 ]
	eval_randombits_5(v_.01, v_nbits) -> Com_1(eval_randombits_bb1_in(v_.01 - 16, v_nbits)) [ v_nbits - 16 >= 0 /\ v_.01 + v_nbits - 32 >= 0 /\ -v_.01 + v_nbits >= 0 /\ v_.01 - 16 >= 0 ]
	eval_randombits_4(v_.01, v_nbits) -> Com_2(eval_randomunit_start(v_.01, v_nbits), eval_randombits_5(v_.01, v_nbits)) [ v_nbits - 16 >= 0 /\ v_.01 + v_nbits - 32 >= 0 /\ -v_.01 + v_nbits >= 0 /\ v_.01 - 16 >= 0 ]
weakly and the transitions
	eval_randombits_bb1_in(v_.01, v_nbits) -> Com_1(eval_randombits_4(v_.01, v_nbits)) [ -v_.01 + v_nbits >= 0 /\ v_.01 >= 16 ]
	eval_randombits_5(v_.01, v_nbits) -> Com_1(eval_randombits_bb1_in(v_.01 - 16, v_nbits)) [ v_nbits - 16 >= 0 /\ v_.01 + v_nbits - 32 >= 0 /\ -v_.01 + v_nbits >= 0 /\ v_.01 - 16 >= 0 ]
	eval_randombits_4(v_.01, v_nbits) -> Com_2(eval_randomunit_start(v_.01, v_nbits), eval_randombits_5(v_.01, v_nbits)) [ v_nbits - 16 >= 0 /\ v_.01 + v_nbits - 32 >= 0 /\ -v_.01 + v_nbits >= 0 /\ v_.01 - 16 >= 0 ]
strictly and produces the following problem:
5:	T:
		(4, 1)               eval_randombits_bb5_in(v_.01, v_nbits) -> Com_1(eval_randombits_stop(v_.01, v_nbits)) [ -v_.01 + v_nbits >= 0 /\ -v_.01 + 15 >= 0 ]
		(4, 1)               eval_randombits_11(v_.01, v_nbits) -> Com_1(eval_randombits_bb5_in(v_.01, v_nbits)) [ -v_.01 + v_nbits >= 0 /\ -v_.01 + 15 >= 0 ]
		(4, 1)               eval_randombits_10(v_.01, v_nbits) -> Com_2(eval_randomunit_start(v_.01, v_nbits), eval_randombits_11(v_.01, v_nbits)) [ -v_.01 + v_nbits >= 0 /\ -v_.01 + 15 >= 0 ]
		(v_nbits + 13, 1)    eval_randombits_5(v_.01, v_nbits) -> Com_1(eval_randombits_bb1_in(v_.01 - 16, v_nbits)) [ v_nbits - 16 >= 0 /\ v_.01 + v_nbits - 32 >= 0 /\ -v_.01 + v_nbits >= 0 /\ v_.01 - 16 >= 0 ]
		(v_nbits + 13, 1)    eval_randombits_4(v_.01, v_nbits) -> Com_2(eval_randomunit_start(v_.01, v_nbits), eval_randombits_5(v_.01, v_nbits)) [ v_nbits - 16 >= 0 /\ v_.01 + v_nbits - 32 >= 0 /\ -v_.01 + v_nbits >= 0 /\ v_.01 - 16 >= 0 ]
		(4, 1)               eval_randombits_bb1_in(v_.01, v_nbits) -> Com_1(eval_randombits_bb5_in(v_.01, v_nbits)) [ -v_.01 + v_nbits >= 0 /\ v_.01 < 16 ]
		(4, 1)               eval_randombits_bb1_in(v_.01, v_nbits) -> Com_1(eval_randombits_10(v_.01, v_nbits)) [ -v_.01 + v_nbits >= 0 /\ v_.01 < 16 ]
		(v_nbits + 13, 1)    eval_randombits_bb1_in(v_.01, v_nbits) -> Com_1(eval_randombits_4(v_.01, v_nbits)) [ -v_.01 + v_nbits >= 0 /\ v_.01 >= 16 ]
		(1, 1)               eval_randombits_1(v_.01, v_nbits) -> Com_1(eval_randombits_bb1_in(v_nbits, v_nbits))
		(1, 1)               eval_randombits_0(v_.01, v_nbits) -> Com_2(eval_mp_init_start(v_.01, v_nbits), eval_randombits_1(v_.01, v_nbits))
		(1, 1)               eval_randombits_bb0_in(v_.01, v_nbits) -> Com_1(eval_randombits_0(v_.01, v_nbits))
		(1, 1)               eval_randombits_start(v_.01, v_nbits) -> Com_1(eval_randombits_bb0_in(v_.01, v_nbits))
	start location:	eval_randombits_start
	leaf cost:	0

Complexity upper bound 3*v_nbits + 63

Time: 0.144 sec (SMT: 0.122 sec)

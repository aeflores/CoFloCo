MAYBE

Initial complexity problem:
1:	T:
		(1, 1)    eval_randPoolGetBytes_start(v_'randPoolGetPos, v_.01, v_12, v_18, v_3, v_9, v_len) -> Com_1(eval_randPoolGetBytes_bb0_in(v_'randPoolGetPos, v_.01, v_12, v_18, v_3, v_9, v_len))
		(?, 1)    eval_randPoolGetBytes_bb0_in(v_'randPoolGetPos, v_.01, v_12, v_18, v_3, v_9, v_len) -> Com_1(eval_randPoolGetBytes_bb1_in(v_'randPoolGetPos, v_len, v_12, v_18, v_3, v_9, v_len))
		(?, 1)    eval_randPoolGetBytes_bb1_in(v_'randPoolGetPos, v_.01, v_12, v_18, v_3, v_9, v_len) -> Com_1(eval_randPoolGetBytes_8(v_'randPoolGetPos, v_.01, v_12, v_18, -v_'randPoolGetPos + 768, -v_'randPoolGetPos + 768, v_len)) [ v_.01 > -v_'randPoolGetPos + 768 ]
		(?, 1)    eval_randPoolGetBytes_bb1_in(v_'randPoolGetPos, v_.01, v_12, v_18, v_3, v_9, v_len) -> Com_1(eval_randPoolGetBytes_16(v_'randPoolGetPos, v_.01, v_12, v_.01, v_3, v_9, v_len)) [ v_.01 <= -v_'randPoolGetPos + 768 ]
		(?, 1)    eval_randPoolGetBytes_bb1_in(v_'randPoolGetPos, v_.01, v_12, v_18, v_3, v_9, v_len) -> Com_1(eval_randPoolGetBytes_bb5_in(v_'randPoolGetPos, v_.01, v_12, v_18, v_3, v_9, v_len)) [ v_.01 <= -v_'randPoolGetPos + 768 ]
		(?, 1)    eval_randPoolGetBytes_8(v_'randPoolGetPos, v_.01, v_12, v_18, v_3, v_9, v_len) -> Com_2(eval_llvm.memcpy.p0i8.p0i8.i64_start(v_'randPoolGetPos, v_.01, v_12, v_18, v_3, v_9, v_len), eval_randPoolGetBytes_9(v_'randPoolGetPos, v_.01, v_12, v_18, v_3, v_9, v_len))
		(?, 1)    eval_randPoolGetBytes_9(v_'randPoolGetPos, v_.01, v_12, v_18, v_3, v_9, v_len) -> Com_1(eval_randPoolGetBytes_11(v_'randPoolGetPos, v_.01, v_.01 - v_3, v_18, v_3, v_9, v_len))
		(?, 1)    eval_randPoolGetBytes_11(v_'randPoolGetPos, v_.01, v_12, v_18, v_3, v_9, v_len) -> Com_2(eval_randPoolStir_start(v_'randPoolGetPos, v_.01, v_12, v_18, v_3, v_9, v_len), eval_randPoolGetBytes_12(v_'randPoolGetPos, v_.01, v_12, v_18, v_3, v_9, v_len))
		(?, 1)    eval_randPoolGetBytes_12(v_'randPoolGetPos, v_.01, v_12, v_18, v_3, v_9, v_len) -> Com_1(eval_randPoolGetBytes_bb1_in(v_'randPoolGetPos, v_12, v_12, v_18, v_3, v_9, v_len))
		(?, 1)    eval_randPoolGetBytes_16(v_'randPoolGetPos, v_.01, v_12, v_18, v_3, v_9, v_len) -> Com_2(eval_llvm.memcpy.p0i8.p0i8.i64_start(v_'randPoolGetPos, v_.01, v_12, v_18, v_3, v_9, v_len), eval_randPoolGetBytes_17(v_'randPoolGetPos, v_.01, v_12, v_18, v_3, v_9, v_len))
		(?, 1)    eval_randPoolGetBytes_17(v_'randPoolGetPos, v_.01, v_12, v_18, v_3, v_9, v_len) -> Com_1(eval_randPoolGetBytes_bb5_in(v_'randPoolGetPos, v_.01, v_12, v_18, v_3, v_9, v_len))
		(?, 1)    eval_randPoolGetBytes_bb5_in(v_'randPoolGetPos, v_.01, v_12, v_18, v_3, v_9, v_len) -> Com_1(eval_randPoolGetBytes_stop(v_'randPoolGetPos, v_.01, v_12, v_18, v_3, v_9, v_len))
	start location:	eval_randPoolGetBytes_start
	leaf cost:	0

Slicing away variables that do not contribute to conditions from problem 1 leaves variables [v_'randPoolGetPos, v_.01, v_12, v_3, v_len].
We thus obtain the following problem:
2:	T:
		(?, 1)    eval_randPoolGetBytes_bb5_in(v_'randPoolGetPos, v_.01, v_12, v_3, v_len) -> Com_1(eval_randPoolGetBytes_stop(v_'randPoolGetPos, v_.01, v_12, v_3, v_len))
		(?, 1)    eval_randPoolGetBytes_17(v_'randPoolGetPos, v_.01, v_12, v_3, v_len) -> Com_1(eval_randPoolGetBytes_bb5_in(v_'randPoolGetPos, v_.01, v_12, v_3, v_len))
		(?, 1)    eval_randPoolGetBytes_16(v_'randPoolGetPos, v_.01, v_12, v_3, v_len) -> Com_2(eval_llvm.memcpy.p0i8.p0i8.i64_start(v_'randPoolGetPos, v_.01, v_12, v_3, v_len), eval_randPoolGetBytes_17(v_'randPoolGetPos, v_.01, v_12, v_3, v_len))
		(?, 1)    eval_randPoolGetBytes_12(v_'randPoolGetPos, v_.01, v_12, v_3, v_len) -> Com_1(eval_randPoolGetBytes_bb1_in(v_'randPoolGetPos, v_12, v_12, v_3, v_len))
		(?, 1)    eval_randPoolGetBytes_11(v_'randPoolGetPos, v_.01, v_12, v_3, v_len) -> Com_2(eval_randPoolStir_start(v_'randPoolGetPos, v_.01, v_12, v_3, v_len), eval_randPoolGetBytes_12(v_'randPoolGetPos, v_.01, v_12, v_3, v_len))
		(?, 1)    eval_randPoolGetBytes_9(v_'randPoolGetPos, v_.01, v_12, v_3, v_len) -> Com_1(eval_randPoolGetBytes_11(v_'randPoolGetPos, v_.01, v_.01 - v_3, v_3, v_len))
		(?, 1)    eval_randPoolGetBytes_8(v_'randPoolGetPos, v_.01, v_12, v_3, v_len) -> Com_2(eval_llvm.memcpy.p0i8.p0i8.i64_start(v_'randPoolGetPos, v_.01, v_12, v_3, v_len), eval_randPoolGetBytes_9(v_'randPoolGetPos, v_.01, v_12, v_3, v_len))
		(?, 1)    eval_randPoolGetBytes_bb1_in(v_'randPoolGetPos, v_.01, v_12, v_3, v_len) -> Com_1(eval_randPoolGetBytes_bb5_in(v_'randPoolGetPos, v_.01, v_12, v_3, v_len)) [ v_.01 <= -v_'randPoolGetPos + 768 ]
		(?, 1)    eval_randPoolGetBytes_bb1_in(v_'randPoolGetPos, v_.01, v_12, v_3, v_len) -> Com_1(eval_randPoolGetBytes_16(v_'randPoolGetPos, v_.01, v_12, v_3, v_len)) [ v_.01 <= -v_'randPoolGetPos + 768 ]
		(?, 1)    eval_randPoolGetBytes_bb1_in(v_'randPoolGetPos, v_.01, v_12, v_3, v_len) -> Com_1(eval_randPoolGetBytes_8(v_'randPoolGetPos, v_.01, v_12, -v_'randPoolGetPos + 768, v_len)) [ v_.01 > -v_'randPoolGetPos + 768 ]
		(?, 1)    eval_randPoolGetBytes_bb0_in(v_'randPoolGetPos, v_.01, v_12, v_3, v_len) -> Com_1(eval_randPoolGetBytes_bb1_in(v_'randPoolGetPos, v_len, v_12, v_3, v_len))
		(1, 1)    eval_randPoolGetBytes_start(v_'randPoolGetPos, v_.01, v_12, v_3, v_len) -> Com_1(eval_randPoolGetBytes_bb0_in(v_'randPoolGetPos, v_.01, v_12, v_3, v_len))
	start location:	eval_randPoolGetBytes_start
	leaf cost:	0

Repeatedly propagating knowledge in problem 2 produces the following problem:
3:	T:
		(?, 1)    eval_randPoolGetBytes_bb5_in(v_'randPoolGetPos, v_.01, v_12, v_3, v_len) -> Com_1(eval_randPoolGetBytes_stop(v_'randPoolGetPos, v_.01, v_12, v_3, v_len))
		(?, 1)    eval_randPoolGetBytes_17(v_'randPoolGetPos, v_.01, v_12, v_3, v_len) -> Com_1(eval_randPoolGetBytes_bb5_in(v_'randPoolGetPos, v_.01, v_12, v_3, v_len))
		(?, 1)    eval_randPoolGetBytes_16(v_'randPoolGetPos, v_.01, v_12, v_3, v_len) -> Com_2(eval_llvm.memcpy.p0i8.p0i8.i64_start(v_'randPoolGetPos, v_.01, v_12, v_3, v_len), eval_randPoolGetBytes_17(v_'randPoolGetPos, v_.01, v_12, v_3, v_len))
		(?, 1)    eval_randPoolGetBytes_12(v_'randPoolGetPos, v_.01, v_12, v_3, v_len) -> Com_1(eval_randPoolGetBytes_bb1_in(v_'randPoolGetPos, v_12, v_12, v_3, v_len))
		(?, 1)    eval_randPoolGetBytes_11(v_'randPoolGetPos, v_.01, v_12, v_3, v_len) -> Com_2(eval_randPoolStir_start(v_'randPoolGetPos, v_.01, v_12, v_3, v_len), eval_randPoolGetBytes_12(v_'randPoolGetPos, v_.01, v_12, v_3, v_len))
		(?, 1)    eval_randPoolGetBytes_9(v_'randPoolGetPos, v_.01, v_12, v_3, v_len) -> Com_1(eval_randPoolGetBytes_11(v_'randPoolGetPos, v_.01, v_.01 - v_3, v_3, v_len))
		(?, 1)    eval_randPoolGetBytes_8(v_'randPoolGetPos, v_.01, v_12, v_3, v_len) -> Com_2(eval_llvm.memcpy.p0i8.p0i8.i64_start(v_'randPoolGetPos, v_.01, v_12, v_3, v_len), eval_randPoolGetBytes_9(v_'randPoolGetPos, v_.01, v_12, v_3, v_len))
		(?, 1)    eval_randPoolGetBytes_bb1_in(v_'randPoolGetPos, v_.01, v_12, v_3, v_len) -> Com_1(eval_randPoolGetBytes_bb5_in(v_'randPoolGetPos, v_.01, v_12, v_3, v_len)) [ v_.01 <= -v_'randPoolGetPos + 768 ]
		(?, 1)    eval_randPoolGetBytes_bb1_in(v_'randPoolGetPos, v_.01, v_12, v_3, v_len) -> Com_1(eval_randPoolGetBytes_16(v_'randPoolGetPos, v_.01, v_12, v_3, v_len)) [ v_.01 <= -v_'randPoolGetPos + 768 ]
		(?, 1)    eval_randPoolGetBytes_bb1_in(v_'randPoolGetPos, v_.01, v_12, v_3, v_len) -> Com_1(eval_randPoolGetBytes_8(v_'randPoolGetPos, v_.01, v_12, -v_'randPoolGetPos + 768, v_len)) [ v_.01 > -v_'randPoolGetPos + 768 ]
		(1, 1)    eval_randPoolGetBytes_bb0_in(v_'randPoolGetPos, v_.01, v_12, v_3, v_len) -> Com_1(eval_randPoolGetBytes_bb1_in(v_'randPoolGetPos, v_len, v_12, v_3, v_len))
		(1, 1)    eval_randPoolGetBytes_start(v_'randPoolGetPos, v_.01, v_12, v_3, v_len) -> Com_1(eval_randPoolGetBytes_bb0_in(v_'randPoolGetPos, v_.01, v_12, v_3, v_len))
	start location:	eval_randPoolGetBytes_start
	leaf cost:	0

A polynomial rank function with
	Pol(eval_randPoolGetBytes_bb5_in) = 1
	Pol(eval_randPoolGetBytes_stop) = 0
	Pol(eval_randPoolGetBytes_17) = 2
	Pol(eval_randPoolGetBytes_16) = 3
	Pol(eval_llvm.memcpy.p0i8.p0i8.i64_start) = 0
	Pol(eval_randPoolGetBytes_12) = 4
	Pol(eval_randPoolGetBytes_bb1_in) = 4
	Pol(eval_randPoolGetBytes_11) = 4
	Pol(eval_randPoolStir_start) = 0
	Pol(eval_randPoolGetBytes_9) = 4
	Pol(eval_randPoolGetBytes_8) = 4
	Pol(eval_randPoolGetBytes_bb0_in) = 4
	Pol(eval_randPoolGetBytes_start) = 4
orients all transitions weakly and the transitions
	eval_randPoolGetBytes_bb5_in(v_'randPoolGetPos, v_.01, v_12, v_3, v_len) -> Com_1(eval_randPoolGetBytes_stop(v_'randPoolGetPos, v_.01, v_12, v_3, v_len))
	eval_randPoolGetBytes_bb1_in(v_'randPoolGetPos, v_.01, v_12, v_3, v_len) -> Com_1(eval_randPoolGetBytes_bb5_in(v_'randPoolGetPos, v_.01, v_12, v_3, v_len)) [ v_.01 <= -v_'randPoolGetPos + 768 ]
	eval_randPoolGetBytes_bb1_in(v_'randPoolGetPos, v_.01, v_12, v_3, v_len) -> Com_1(eval_randPoolGetBytes_16(v_'randPoolGetPos, v_.01, v_12, v_3, v_len)) [ v_.01 <= -v_'randPoolGetPos + 768 ]
	eval_randPoolGetBytes_17(v_'randPoolGetPos, v_.01, v_12, v_3, v_len) -> Com_1(eval_randPoolGetBytes_bb5_in(v_'randPoolGetPos, v_.01, v_12, v_3, v_len))
	eval_randPoolGetBytes_16(v_'randPoolGetPos, v_.01, v_12, v_3, v_len) -> Com_2(eval_llvm.memcpy.p0i8.p0i8.i64_start(v_'randPoolGetPos, v_.01, v_12, v_3, v_len), eval_randPoolGetBytes_17(v_'randPoolGetPos, v_.01, v_12, v_3, v_len))
strictly and produces the following problem:
4:	T:
		(4, 1)    eval_randPoolGetBytes_bb5_in(v_'randPoolGetPos, v_.01, v_12, v_3, v_len) -> Com_1(eval_randPoolGetBytes_stop(v_'randPoolGetPos, v_.01, v_12, v_3, v_len))
		(4, 1)    eval_randPoolGetBytes_17(v_'randPoolGetPos, v_.01, v_12, v_3, v_len) -> Com_1(eval_randPoolGetBytes_bb5_in(v_'randPoolGetPos, v_.01, v_12, v_3, v_len))
		(4, 1)    eval_randPoolGetBytes_16(v_'randPoolGetPos, v_.01, v_12, v_3, v_len) -> Com_2(eval_llvm.memcpy.p0i8.p0i8.i64_start(v_'randPoolGetPos, v_.01, v_12, v_3, v_len), eval_randPoolGetBytes_17(v_'randPoolGetPos, v_.01, v_12, v_3, v_len))
		(?, 1)    eval_randPoolGetBytes_12(v_'randPoolGetPos, v_.01, v_12, v_3, v_len) -> Com_1(eval_randPoolGetBytes_bb1_in(v_'randPoolGetPos, v_12, v_12, v_3, v_len))
		(?, 1)    eval_randPoolGetBytes_11(v_'randPoolGetPos, v_.01, v_12, v_3, v_len) -> Com_2(eval_randPoolStir_start(v_'randPoolGetPos, v_.01, v_12, v_3, v_len), eval_randPoolGetBytes_12(v_'randPoolGetPos, v_.01, v_12, v_3, v_len))
		(?, 1)    eval_randPoolGetBytes_9(v_'randPoolGetPos, v_.01, v_12, v_3, v_len) -> Com_1(eval_randPoolGetBytes_11(v_'randPoolGetPos, v_.01, v_.01 - v_3, v_3, v_len))
		(?, 1)    eval_randPoolGetBytes_8(v_'randPoolGetPos, v_.01, v_12, v_3, v_len) -> Com_2(eval_llvm.memcpy.p0i8.p0i8.i64_start(v_'randPoolGetPos, v_.01, v_12, v_3, v_len), eval_randPoolGetBytes_9(v_'randPoolGetPos, v_.01, v_12, v_3, v_len))
		(4, 1)    eval_randPoolGetBytes_bb1_in(v_'randPoolGetPos, v_.01, v_12, v_3, v_len) -> Com_1(eval_randPoolGetBytes_bb5_in(v_'randPoolGetPos, v_.01, v_12, v_3, v_len)) [ v_.01 <= -v_'randPoolGetPos + 768 ]
		(4, 1)    eval_randPoolGetBytes_bb1_in(v_'randPoolGetPos, v_.01, v_12, v_3, v_len) -> Com_1(eval_randPoolGetBytes_16(v_'randPoolGetPos, v_.01, v_12, v_3, v_len)) [ v_.01 <= -v_'randPoolGetPos + 768 ]
		(?, 1)    eval_randPoolGetBytes_bb1_in(v_'randPoolGetPos, v_.01, v_12, v_3, v_len) -> Com_1(eval_randPoolGetBytes_8(v_'randPoolGetPos, v_.01, v_12, -v_'randPoolGetPos + 768, v_len)) [ v_.01 > -v_'randPoolGetPos + 768 ]
		(1, 1)    eval_randPoolGetBytes_bb0_in(v_'randPoolGetPos, v_.01, v_12, v_3, v_len) -> Com_1(eval_randPoolGetBytes_bb1_in(v_'randPoolGetPos, v_len, v_12, v_3, v_len))
		(1, 1)    eval_randPoolGetBytes_start(v_'randPoolGetPos, v_.01, v_12, v_3, v_len) -> Com_1(eval_randPoolGetBytes_bb0_in(v_'randPoolGetPos, v_.01, v_12, v_3, v_len))
	start location:	eval_randPoolGetBytes_start
	leaf cost:	0

Applied AI with 'oct' on problem 4 to obtain the following invariants:
  For symbol eval_randPoolGetBytes_11: X_2 - X_4 - 1 >= 0 /\ -X_1 - X_4 + 768 >= 0 /\ X_1 + X_4 - 768 >= 0 /\ X_1 + X_2 - 769 >= 0
  For symbol eval_randPoolGetBytes_12: X_2 - X_4 - 1 >= 0 /\ -X_1 - X_4 + 768 >= 0 /\ X_1 + X_4 - 768 >= 0 /\ X_1 + X_2 - 769 >= 0
  For symbol eval_randPoolGetBytes_16: -X_1 - X_2 + 768 >= 0
  For symbol eval_randPoolGetBytes_17: -X_1 - X_2 + 768 >= 0
  For symbol eval_randPoolGetBytes_8: X_2 - X_4 - 1 >= 0 /\ -X_1 - X_4 + 768 >= 0 /\ X_1 + X_4 - 768 >= 0 /\ X_1 + X_2 - 769 >= 0
  For symbol eval_randPoolGetBytes_9: X_2 - X_4 - 1 >= 0 /\ -X_1 - X_4 + 768 >= 0 /\ X_1 + X_4 - 768 >= 0 /\ X_1 + X_2 - 769 >= 0
  For symbol eval_randPoolGetBytes_bb5_in: -X_1 - X_2 + 768 >= 0


This yielded the following problem:
5:	T:
		(1, 1)    eval_randPoolGetBytes_start(v_'randPoolGetPos, v_.01, v_12, v_3, v_len) -> Com_1(eval_randPoolGetBytes_bb0_in(v_'randPoolGetPos, v_.01, v_12, v_3, v_len))
		(1, 1)    eval_randPoolGetBytes_bb0_in(v_'randPoolGetPos, v_.01, v_12, v_3, v_len) -> Com_1(eval_randPoolGetBytes_bb1_in(v_'randPoolGetPos, v_len, v_12, v_3, v_len))
		(?, 1)    eval_randPoolGetBytes_bb1_in(v_'randPoolGetPos, v_.01, v_12, v_3, v_len) -> Com_1(eval_randPoolGetBytes_8(v_'randPoolGetPos, v_.01, v_12, -v_'randPoolGetPos + 768, v_len)) [ v_.01 > -v_'randPoolGetPos + 768 ]
		(4, 1)    eval_randPoolGetBytes_bb1_in(v_'randPoolGetPos, v_.01, v_12, v_3, v_len) -> Com_1(eval_randPoolGetBytes_16(v_'randPoolGetPos, v_.01, v_12, v_3, v_len)) [ v_.01 <= -v_'randPoolGetPos + 768 ]
		(4, 1)    eval_randPoolGetBytes_bb1_in(v_'randPoolGetPos, v_.01, v_12, v_3, v_len) -> Com_1(eval_randPoolGetBytes_bb5_in(v_'randPoolGetPos, v_.01, v_12, v_3, v_len)) [ v_.01 <= -v_'randPoolGetPos + 768 ]
		(?, 1)    eval_randPoolGetBytes_8(v_'randPoolGetPos, v_.01, v_12, v_3, v_len) -> Com_2(eval_llvm.memcpy.p0i8.p0i8.i64_start(v_'randPoolGetPos, v_.01, v_12, v_3, v_len), eval_randPoolGetBytes_9(v_'randPoolGetPos, v_.01, v_12, v_3, v_len)) [ v_.01 - v_3 - 1 >= 0 /\ -v_'randPoolGetPos - v_3 + 768 >= 0 /\ v_'randPoolGetPos + v_3 - 768 >= 0 /\ v_'randPoolGetPos + v_.01 - 769 >= 0 ]
		(?, 1)    eval_randPoolGetBytes_9(v_'randPoolGetPos, v_.01, v_12, v_3, v_len) -> Com_1(eval_randPoolGetBytes_11(v_'randPoolGetPos, v_.01, v_.01 - v_3, v_3, v_len)) [ v_.01 - v_3 - 1 >= 0 /\ -v_'randPoolGetPos - v_3 + 768 >= 0 /\ v_'randPoolGetPos + v_3 - 768 >= 0 /\ v_'randPoolGetPos + v_.01 - 769 >= 0 ]
		(?, 1)    eval_randPoolGetBytes_11(v_'randPoolGetPos, v_.01, v_12, v_3, v_len) -> Com_2(eval_randPoolStir_start(v_'randPoolGetPos, v_.01, v_12, v_3, v_len), eval_randPoolGetBytes_12(v_'randPoolGetPos, v_.01, v_12, v_3, v_len)) [ v_.01 - v_3 - 1 >= 0 /\ -v_'randPoolGetPos - v_3 + 768 >= 0 /\ v_'randPoolGetPos + v_3 - 768 >= 0 /\ v_'randPoolGetPos + v_.01 - 769 >= 0 ]
		(?, 1)    eval_randPoolGetBytes_12(v_'randPoolGetPos, v_.01, v_12, v_3, v_len) -> Com_1(eval_randPoolGetBytes_bb1_in(v_'randPoolGetPos, v_12, v_12, v_3, v_len)) [ v_.01 - v_3 - 1 >= 0 /\ -v_'randPoolGetPos - v_3 + 768 >= 0 /\ v_'randPoolGetPos + v_3 - 768 >= 0 /\ v_'randPoolGetPos + v_.01 - 769 >= 0 ]
		(4, 1)    eval_randPoolGetBytes_16(v_'randPoolGetPos, v_.01, v_12, v_3, v_len) -> Com_2(eval_llvm.memcpy.p0i8.p0i8.i64_start(v_'randPoolGetPos, v_.01, v_12, v_3, v_len), eval_randPoolGetBytes_17(v_'randPoolGetPos, v_.01, v_12, v_3, v_len)) [ -v_'randPoolGetPos - v_.01 + 768 >= 0 ]
		(4, 1)    eval_randPoolGetBytes_17(v_'randPoolGetPos, v_.01, v_12, v_3, v_len) -> Com_1(eval_randPoolGetBytes_bb5_in(v_'randPoolGetPos, v_.01, v_12, v_3, v_len)) [ -v_'randPoolGetPos - v_.01 + 768 >= 0 ]
		(4, 1)    eval_randPoolGetBytes_bb5_in(v_'randPoolGetPos, v_.01, v_12, v_3, v_len) -> Com_1(eval_randPoolGetBytes_stop(v_'randPoolGetPos, v_.01, v_12, v_3, v_len)) [ -v_'randPoolGetPos - v_.01 + 768 >= 0 ]
	start location:	eval_randPoolGetBytes_start
	leaf cost:	0

By chaining the transition eval_randPoolGetBytes_start(v_'randPoolGetPos, v_.01, v_12, v_3, v_len) -> Com_1(eval_randPoolGetBytes_bb0_in(v_'randPoolGetPos, v_.01, v_12, v_3, v_len)) with all transitions in problem 5, the following new transition is obtained:
	eval_randPoolGetBytes_start(v_'randPoolGetPos, v_.01, v_12, v_3, v_len) -> Com_1(eval_randPoolGetBytes_bb1_in(v_'randPoolGetPos, v_len, v_12, v_3, v_len))
We thus obtain the following problem:
6:	T:
		(1, 2)    eval_randPoolGetBytes_start(v_'randPoolGetPos, v_.01, v_12, v_3, v_len) -> Com_1(eval_randPoolGetBytes_bb1_in(v_'randPoolGetPos, v_len, v_12, v_3, v_len))
		(1, 1)    eval_randPoolGetBytes_bb0_in(v_'randPoolGetPos, v_.01, v_12, v_3, v_len) -> Com_1(eval_randPoolGetBytes_bb1_in(v_'randPoolGetPos, v_len, v_12, v_3, v_len))
		(?, 1)    eval_randPoolGetBytes_bb1_in(v_'randPoolGetPos, v_.01, v_12, v_3, v_len) -> Com_1(eval_randPoolGetBytes_8(v_'randPoolGetPos, v_.01, v_12, -v_'randPoolGetPos + 768, v_len)) [ v_.01 > -v_'randPoolGetPos + 768 ]
		(4, 1)    eval_randPoolGetBytes_bb1_in(v_'randPoolGetPos, v_.01, v_12, v_3, v_len) -> Com_1(eval_randPoolGetBytes_16(v_'randPoolGetPos, v_.01, v_12, v_3, v_len)) [ v_.01 <= -v_'randPoolGetPos + 768 ]
		(4, 1)    eval_randPoolGetBytes_bb1_in(v_'randPoolGetPos, v_.01, v_12, v_3, v_len) -> Com_1(eval_randPoolGetBytes_bb5_in(v_'randPoolGetPos, v_.01, v_12, v_3, v_len)) [ v_.01 <= -v_'randPoolGetPos + 768 ]
		(?, 1)    eval_randPoolGetBytes_8(v_'randPoolGetPos, v_.01, v_12, v_3, v_len) -> Com_2(eval_llvm.memcpy.p0i8.p0i8.i64_start(v_'randPoolGetPos, v_.01, v_12, v_3, v_len), eval_randPoolGetBytes_9(v_'randPoolGetPos, v_.01, v_12, v_3, v_len)) [ v_.01 - v_3 - 1 >= 0 /\ -v_'randPoolGetPos - v_3 + 768 >= 0 /\ v_'randPoolGetPos + v_3 - 768 >= 0 /\ v_'randPoolGetPos + v_.01 - 769 >= 0 ]
		(?, 1)    eval_randPoolGetBytes_9(v_'randPoolGetPos, v_.01, v_12, v_3, v_len) -> Com_1(eval_randPoolGetBytes_11(v_'randPoolGetPos, v_.01, v_.01 - v_3, v_3, v_len)) [ v_.01 - v_3 - 1 >= 0 /\ -v_'randPoolGetPos - v_3 + 768 >= 0 /\ v_'randPoolGetPos + v_3 - 768 >= 0 /\ v_'randPoolGetPos + v_.01 - 769 >= 0 ]
		(?, 1)    eval_randPoolGetBytes_11(v_'randPoolGetPos, v_.01, v_12, v_3, v_len) -> Com_2(eval_randPoolStir_start(v_'randPoolGetPos, v_.01, v_12, v_3, v_len), eval_randPoolGetBytes_12(v_'randPoolGetPos, v_.01, v_12, v_3, v_len)) [ v_.01 - v_3 - 1 >= 0 /\ -v_'randPoolGetPos - v_3 + 768 >= 0 /\ v_'randPoolGetPos + v_3 - 768 >= 0 /\ v_'randPoolGetPos + v_.01 - 769 >= 0 ]
		(?, 1)    eval_randPoolGetBytes_12(v_'randPoolGetPos, v_.01, v_12, v_3, v_len) -> Com_1(eval_randPoolGetBytes_bb1_in(v_'randPoolGetPos, v_12, v_12, v_3, v_len)) [ v_.01 - v_3 - 1 >= 0 /\ -v_'randPoolGetPos - v_3 + 768 >= 0 /\ v_'randPoolGetPos + v_3 - 768 >= 0 /\ v_'randPoolGetPos + v_.01 - 769 >= 0 ]
		(4, 1)    eval_randPoolGetBytes_16(v_'randPoolGetPos, v_.01, v_12, v_3, v_len) -> Com_2(eval_llvm.memcpy.p0i8.p0i8.i64_start(v_'randPoolGetPos, v_.01, v_12, v_3, v_len), eval_randPoolGetBytes_17(v_'randPoolGetPos, v_.01, v_12, v_3, v_len)) [ -v_'randPoolGetPos - v_.01 + 768 >= 0 ]
		(4, 1)    eval_randPoolGetBytes_17(v_'randPoolGetPos, v_.01, v_12, v_3, v_len) -> Com_1(eval_randPoolGetBytes_bb5_in(v_'randPoolGetPos, v_.01, v_12, v_3, v_len)) [ -v_'randPoolGetPos - v_.01 + 768 >= 0 ]
		(4, 1)    eval_randPoolGetBytes_bb5_in(v_'randPoolGetPos, v_.01, v_12, v_3, v_len) -> Com_1(eval_randPoolGetBytes_stop(v_'randPoolGetPos, v_.01, v_12, v_3, v_len)) [ -v_'randPoolGetPos - v_.01 + 768 >= 0 ]
	start location:	eval_randPoolGetBytes_start
	leaf cost:	0

Testing for reachability in the complexity graph removes the following transition from problem 6:
	eval_randPoolGetBytes_bb0_in(v_'randPoolGetPos, v_.01, v_12, v_3, v_len) -> Com_1(eval_randPoolGetBytes_bb1_in(v_'randPoolGetPos, v_len, v_12, v_3, v_len))
We thus obtain the following problem:
7:	T:
		(?, 1)    eval_randPoolGetBytes_12(v_'randPoolGetPos, v_.01, v_12, v_3, v_len) -> Com_1(eval_randPoolGetBytes_bb1_in(v_'randPoolGetPos, v_12, v_12, v_3, v_len)) [ v_.01 - v_3 - 1 >= 0 /\ -v_'randPoolGetPos - v_3 + 768 >= 0 /\ v_'randPoolGetPos + v_3 - 768 >= 0 /\ v_'randPoolGetPos + v_.01 - 769 >= 0 ]
		(?, 1)    eval_randPoolGetBytes_11(v_'randPoolGetPos, v_.01, v_12, v_3, v_len) -> Com_2(eval_randPoolStir_start(v_'randPoolGetPos, v_.01, v_12, v_3, v_len), eval_randPoolGetBytes_12(v_'randPoolGetPos, v_.01, v_12, v_3, v_len)) [ v_.01 - v_3 - 1 >= 0 /\ -v_'randPoolGetPos - v_3 + 768 >= 0 /\ v_'randPoolGetPos + v_3 - 768 >= 0 /\ v_'randPoolGetPos + v_.01 - 769 >= 0 ]
		(4, 1)    eval_randPoolGetBytes_17(v_'randPoolGetPos, v_.01, v_12, v_3, v_len) -> Com_1(eval_randPoolGetBytes_bb5_in(v_'randPoolGetPos, v_.01, v_12, v_3, v_len)) [ -v_'randPoolGetPos - v_.01 + 768 >= 0 ]
		(?, 1)    eval_randPoolGetBytes_9(v_'randPoolGetPos, v_.01, v_12, v_3, v_len) -> Com_1(eval_randPoolGetBytes_11(v_'randPoolGetPos, v_.01, v_.01 - v_3, v_3, v_len)) [ v_.01 - v_3 - 1 >= 0 /\ -v_'randPoolGetPos - v_3 + 768 >= 0 /\ v_'randPoolGetPos + v_3 - 768 >= 0 /\ v_'randPoolGetPos + v_.01 - 769 >= 0 ]
		(4, 1)    eval_randPoolGetBytes_bb5_in(v_'randPoolGetPos, v_.01, v_12, v_3, v_len) -> Com_1(eval_randPoolGetBytes_stop(v_'randPoolGetPos, v_.01, v_12, v_3, v_len)) [ -v_'randPoolGetPos - v_.01 + 768 >= 0 ]
		(4, 1)    eval_randPoolGetBytes_16(v_'randPoolGetPos, v_.01, v_12, v_3, v_len) -> Com_2(eval_llvm.memcpy.p0i8.p0i8.i64_start(v_'randPoolGetPos, v_.01, v_12, v_3, v_len), eval_randPoolGetBytes_17(v_'randPoolGetPos, v_.01, v_12, v_3, v_len)) [ -v_'randPoolGetPos - v_.01 + 768 >= 0 ]
		(?, 1)    eval_randPoolGetBytes_8(v_'randPoolGetPos, v_.01, v_12, v_3, v_len) -> Com_2(eval_llvm.memcpy.p0i8.p0i8.i64_start(v_'randPoolGetPos, v_.01, v_12, v_3, v_len), eval_randPoolGetBytes_9(v_'randPoolGetPos, v_.01, v_12, v_3, v_len)) [ v_.01 - v_3 - 1 >= 0 /\ -v_'randPoolGetPos - v_3 + 768 >= 0 /\ v_'randPoolGetPos + v_3 - 768 >= 0 /\ v_'randPoolGetPos + v_.01 - 769 >= 0 ]
		(4, 1)    eval_randPoolGetBytes_bb1_in(v_'randPoolGetPos, v_.01, v_12, v_3, v_len) -> Com_1(eval_randPoolGetBytes_bb5_in(v_'randPoolGetPos, v_.01, v_12, v_3, v_len)) [ v_.01 <= -v_'randPoolGetPos + 768 ]
		(4, 1)    eval_randPoolGetBytes_bb1_in(v_'randPoolGetPos, v_.01, v_12, v_3, v_len) -> Com_1(eval_randPoolGetBytes_16(v_'randPoolGetPos, v_.01, v_12, v_3, v_len)) [ v_.01 <= -v_'randPoolGetPos + 768 ]
		(?, 1)    eval_randPoolGetBytes_bb1_in(v_'randPoolGetPos, v_.01, v_12, v_3, v_len) -> Com_1(eval_randPoolGetBytes_8(v_'randPoolGetPos, v_.01, v_12, -v_'randPoolGetPos + 768, v_len)) [ v_.01 > -v_'randPoolGetPos + 768 ]
		(1, 2)    eval_randPoolGetBytes_start(v_'randPoolGetPos, v_.01, v_12, v_3, v_len) -> Com_1(eval_randPoolGetBytes_bb1_in(v_'randPoolGetPos, v_len, v_12, v_3, v_len))
	start location:	eval_randPoolGetBytes_start
	leaf cost:	0

By chaining the transition eval_randPoolGetBytes_17(v_'randPoolGetPos, v_.01, v_12, v_3, v_len) -> Com_1(eval_randPoolGetBytes_bb5_in(v_'randPoolGetPos, v_.01, v_12, v_3, v_len)) [ -v_'randPoolGetPos - v_.01 + 768 >= 0 ] with all transitions in problem 7, the following new transition is obtained:
	eval_randPoolGetBytes_17(v_'randPoolGetPos, v_.01, v_12, v_3, v_len) -> Com_1(eval_randPoolGetBytes_stop(v_'randPoolGetPos, v_.01, v_12, v_3, v_len)) [ -v_'randPoolGetPos - v_.01 + 768 >= 0 ]
We thus obtain the following problem:
8:	T:
		(4, 2)    eval_randPoolGetBytes_17(v_'randPoolGetPos, v_.01, v_12, v_3, v_len) -> Com_1(eval_randPoolGetBytes_stop(v_'randPoolGetPos, v_.01, v_12, v_3, v_len)) [ -v_'randPoolGetPos - v_.01 + 768 >= 0 ]
		(?, 1)    eval_randPoolGetBytes_12(v_'randPoolGetPos, v_.01, v_12, v_3, v_len) -> Com_1(eval_randPoolGetBytes_bb1_in(v_'randPoolGetPos, v_12, v_12, v_3, v_len)) [ v_.01 - v_3 - 1 >= 0 /\ -v_'randPoolGetPos - v_3 + 768 >= 0 /\ v_'randPoolGetPos + v_3 - 768 >= 0 /\ v_'randPoolGetPos + v_.01 - 769 >= 0 ]
		(?, 1)    eval_randPoolGetBytes_11(v_'randPoolGetPos, v_.01, v_12, v_3, v_len) -> Com_2(eval_randPoolStir_start(v_'randPoolGetPos, v_.01, v_12, v_3, v_len), eval_randPoolGetBytes_12(v_'randPoolGetPos, v_.01, v_12, v_3, v_len)) [ v_.01 - v_3 - 1 >= 0 /\ -v_'randPoolGetPos - v_3 + 768 >= 0 /\ v_'randPoolGetPos + v_3 - 768 >= 0 /\ v_'randPoolGetPos + v_.01 - 769 >= 0 ]
		(?, 1)    eval_randPoolGetBytes_9(v_'randPoolGetPos, v_.01, v_12, v_3, v_len) -> Com_1(eval_randPoolGetBytes_11(v_'randPoolGetPos, v_.01, v_.01 - v_3, v_3, v_len)) [ v_.01 - v_3 - 1 >= 0 /\ -v_'randPoolGetPos - v_3 + 768 >= 0 /\ v_'randPoolGetPos + v_3 - 768 >= 0 /\ v_'randPoolGetPos + v_.01 - 769 >= 0 ]
		(4, 1)    eval_randPoolGetBytes_bb5_in(v_'randPoolGetPos, v_.01, v_12, v_3, v_len) -> Com_1(eval_randPoolGetBytes_stop(v_'randPoolGetPos, v_.01, v_12, v_3, v_len)) [ -v_'randPoolGetPos - v_.01 + 768 >= 0 ]
		(4, 1)    eval_randPoolGetBytes_16(v_'randPoolGetPos, v_.01, v_12, v_3, v_len) -> Com_2(eval_llvm.memcpy.p0i8.p0i8.i64_start(v_'randPoolGetPos, v_.01, v_12, v_3, v_len), eval_randPoolGetBytes_17(v_'randPoolGetPos, v_.01, v_12, v_3, v_len)) [ -v_'randPoolGetPos - v_.01 + 768 >= 0 ]
		(?, 1)    eval_randPoolGetBytes_8(v_'randPoolGetPos, v_.01, v_12, v_3, v_len) -> Com_2(eval_llvm.memcpy.p0i8.p0i8.i64_start(v_'randPoolGetPos, v_.01, v_12, v_3, v_len), eval_randPoolGetBytes_9(v_'randPoolGetPos, v_.01, v_12, v_3, v_len)) [ v_.01 - v_3 - 1 >= 0 /\ -v_'randPoolGetPos - v_3 + 768 >= 0 /\ v_'randPoolGetPos + v_3 - 768 >= 0 /\ v_'randPoolGetPos + v_.01 - 769 >= 0 ]
		(4, 1)    eval_randPoolGetBytes_bb1_in(v_'randPoolGetPos, v_.01, v_12, v_3, v_len) -> Com_1(eval_randPoolGetBytes_bb5_in(v_'randPoolGetPos, v_.01, v_12, v_3, v_len)) [ v_.01 <= -v_'randPoolGetPos + 768 ]
		(4, 1)    eval_randPoolGetBytes_bb1_in(v_'randPoolGetPos, v_.01, v_12, v_3, v_len) -> Com_1(eval_randPoolGetBytes_16(v_'randPoolGetPos, v_.01, v_12, v_3, v_len)) [ v_.01 <= -v_'randPoolGetPos + 768 ]
		(?, 1)    eval_randPoolGetBytes_bb1_in(v_'randPoolGetPos, v_.01, v_12, v_3, v_len) -> Com_1(eval_randPoolGetBytes_8(v_'randPoolGetPos, v_.01, v_12, -v_'randPoolGetPos + 768, v_len)) [ v_.01 > -v_'randPoolGetPos + 768 ]
		(1, 2)    eval_randPoolGetBytes_start(v_'randPoolGetPos, v_.01, v_12, v_3, v_len) -> Com_1(eval_randPoolGetBytes_bb1_in(v_'randPoolGetPos, v_len, v_12, v_3, v_len))
	start location:	eval_randPoolGetBytes_start
	leaf cost:	0

By chaining the transition eval_randPoolGetBytes_9(v_'randPoolGetPos, v_.01, v_12, v_3, v_len) -> Com_1(eval_randPoolGetBytes_11(v_'randPoolGetPos, v_.01, v_.01 - v_3, v_3, v_len)) [ v_.01 - v_3 - 1 >= 0 /\ -v_'randPoolGetPos - v_3 + 768 >= 0 /\ v_'randPoolGetPos + v_3 - 768 >= 0 /\ v_'randPoolGetPos + v_.01 - 769 >= 0 ] with all transitions in problem 8, the following new transition is obtained:
	eval_randPoolGetBytes_9(v_'randPoolGetPos, v_.01, v_12, v_3, v_len) -> Com_2(eval_randPoolStir_start(v_'randPoolGetPos, v_.01, v_.01 - v_3, v_3, v_len), eval_randPoolGetBytes_12(v_'randPoolGetPos, v_.01, v_.01 - v_3, v_3, v_len)) [ v_.01 - v_3 - 1 >= 0 /\ -v_'randPoolGetPos - v_3 + 768 >= 0 /\ v_'randPoolGetPos + v_3 - 768 >= 0 /\ v_'randPoolGetPos + v_.01 - 769 >= 0 ]
We thus obtain the following problem:
9:	T:
		(?, 2)    eval_randPoolGetBytes_9(v_'randPoolGetPos, v_.01, v_12, v_3, v_len) -> Com_2(eval_randPoolStir_start(v_'randPoolGetPos, v_.01, v_.01 - v_3, v_3, v_len), eval_randPoolGetBytes_12(v_'randPoolGetPos, v_.01, v_.01 - v_3, v_3, v_len)) [ v_.01 - v_3 - 1 >= 0 /\ -v_'randPoolGetPos - v_3 + 768 >= 0 /\ v_'randPoolGetPos + v_3 - 768 >= 0 /\ v_'randPoolGetPos + v_.01 - 769 >= 0 ]
		(4, 2)    eval_randPoolGetBytes_17(v_'randPoolGetPos, v_.01, v_12, v_3, v_len) -> Com_1(eval_randPoolGetBytes_stop(v_'randPoolGetPos, v_.01, v_12, v_3, v_len)) [ -v_'randPoolGetPos - v_.01 + 768 >= 0 ]
		(?, 1)    eval_randPoolGetBytes_12(v_'randPoolGetPos, v_.01, v_12, v_3, v_len) -> Com_1(eval_randPoolGetBytes_bb1_in(v_'randPoolGetPos, v_12, v_12, v_3, v_len)) [ v_.01 - v_3 - 1 >= 0 /\ -v_'randPoolGetPos - v_3 + 768 >= 0 /\ v_'randPoolGetPos + v_3 - 768 >= 0 /\ v_'randPoolGetPos + v_.01 - 769 >= 0 ]
		(?, 1)    eval_randPoolGetBytes_11(v_'randPoolGetPos, v_.01, v_12, v_3, v_len) -> Com_2(eval_randPoolStir_start(v_'randPoolGetPos, v_.01, v_12, v_3, v_len), eval_randPoolGetBytes_12(v_'randPoolGetPos, v_.01, v_12, v_3, v_len)) [ v_.01 - v_3 - 1 >= 0 /\ -v_'randPoolGetPos - v_3 + 768 >= 0 /\ v_'randPoolGetPos + v_3 - 768 >= 0 /\ v_'randPoolGetPos + v_.01 - 769 >= 0 ]
		(4, 1)    eval_randPoolGetBytes_bb5_in(v_'randPoolGetPos, v_.01, v_12, v_3, v_len) -> Com_1(eval_randPoolGetBytes_stop(v_'randPoolGetPos, v_.01, v_12, v_3, v_len)) [ -v_'randPoolGetPos - v_.01 + 768 >= 0 ]
		(4, 1)    eval_randPoolGetBytes_16(v_'randPoolGetPos, v_.01, v_12, v_3, v_len) -> Com_2(eval_llvm.memcpy.p0i8.p0i8.i64_start(v_'randPoolGetPos, v_.01, v_12, v_3, v_len), eval_randPoolGetBytes_17(v_'randPoolGetPos, v_.01, v_12, v_3, v_len)) [ -v_'randPoolGetPos - v_.01 + 768 >= 0 ]
		(?, 1)    eval_randPoolGetBytes_8(v_'randPoolGetPos, v_.01, v_12, v_3, v_len) -> Com_2(eval_llvm.memcpy.p0i8.p0i8.i64_start(v_'randPoolGetPos, v_.01, v_12, v_3, v_len), eval_randPoolGetBytes_9(v_'randPoolGetPos, v_.01, v_12, v_3, v_len)) [ v_.01 - v_3 - 1 >= 0 /\ -v_'randPoolGetPos - v_3 + 768 >= 0 /\ v_'randPoolGetPos + v_3 - 768 >= 0 /\ v_'randPoolGetPos + v_.01 - 769 >= 0 ]
		(4, 1)    eval_randPoolGetBytes_bb1_in(v_'randPoolGetPos, v_.01, v_12, v_3, v_len) -> Com_1(eval_randPoolGetBytes_bb5_in(v_'randPoolGetPos, v_.01, v_12, v_3, v_len)) [ v_.01 <= -v_'randPoolGetPos + 768 ]
		(4, 1)    eval_randPoolGetBytes_bb1_in(v_'randPoolGetPos, v_.01, v_12, v_3, v_len) -> Com_1(eval_randPoolGetBytes_16(v_'randPoolGetPos, v_.01, v_12, v_3, v_len)) [ v_.01 <= -v_'randPoolGetPos + 768 ]
		(?, 1)    eval_randPoolGetBytes_bb1_in(v_'randPoolGetPos, v_.01, v_12, v_3, v_len) -> Com_1(eval_randPoolGetBytes_8(v_'randPoolGetPos, v_.01, v_12, -v_'randPoolGetPos + 768, v_len)) [ v_.01 > -v_'randPoolGetPos + 768 ]
		(1, 2)    eval_randPoolGetBytes_start(v_'randPoolGetPos, v_.01, v_12, v_3, v_len) -> Com_1(eval_randPoolGetBytes_bb1_in(v_'randPoolGetPos, v_len, v_12, v_3, v_len))
	start location:	eval_randPoolGetBytes_start
	leaf cost:	0

Testing for reachability in the complexity graph removes the following transition from problem 9:
	eval_randPoolGetBytes_11(v_'randPoolGetPos, v_.01, v_12, v_3, v_len) -> Com_2(eval_randPoolStir_start(v_'randPoolGetPos, v_.01, v_12, v_3, v_len), eval_randPoolGetBytes_12(v_'randPoolGetPos, v_.01, v_12, v_3, v_len)) [ v_.01 - v_3 - 1 >= 0 /\ -v_'randPoolGetPos - v_3 + 768 >= 0 /\ v_'randPoolGetPos + v_3 - 768 >= 0 /\ v_'randPoolGetPos + v_.01 - 769 >= 0 ]
We thus obtain the following problem:
10:	T:
		(?, 1)    eval_randPoolGetBytes_12(v_'randPoolGetPos, v_.01, v_12, v_3, v_len) -> Com_1(eval_randPoolGetBytes_bb1_in(v_'randPoolGetPos, v_12, v_12, v_3, v_len)) [ v_.01 - v_3 - 1 >= 0 /\ -v_'randPoolGetPos - v_3 + 768 >= 0 /\ v_'randPoolGetPos + v_3 - 768 >= 0 /\ v_'randPoolGetPos + v_.01 - 769 >= 0 ]
		(4, 2)    eval_randPoolGetBytes_17(v_'randPoolGetPos, v_.01, v_12, v_3, v_len) -> Com_1(eval_randPoolGetBytes_stop(v_'randPoolGetPos, v_.01, v_12, v_3, v_len)) [ -v_'randPoolGetPos - v_.01 + 768 >= 0 ]
		(?, 2)    eval_randPoolGetBytes_9(v_'randPoolGetPos, v_.01, v_12, v_3, v_len) -> Com_2(eval_randPoolStir_start(v_'randPoolGetPos, v_.01, v_.01 - v_3, v_3, v_len), eval_randPoolGetBytes_12(v_'randPoolGetPos, v_.01, v_.01 - v_3, v_3, v_len)) [ v_.01 - v_3 - 1 >= 0 /\ -v_'randPoolGetPos - v_3 + 768 >= 0 /\ v_'randPoolGetPos + v_3 - 768 >= 0 /\ v_'randPoolGetPos + v_.01 - 769 >= 0 ]
		(4, 1)    eval_randPoolGetBytes_bb5_in(v_'randPoolGetPos, v_.01, v_12, v_3, v_len) -> Com_1(eval_randPoolGetBytes_stop(v_'randPoolGetPos, v_.01, v_12, v_3, v_len)) [ -v_'randPoolGetPos - v_.01 + 768 >= 0 ]
		(4, 1)    eval_randPoolGetBytes_16(v_'randPoolGetPos, v_.01, v_12, v_3, v_len) -> Com_2(eval_llvm.memcpy.p0i8.p0i8.i64_start(v_'randPoolGetPos, v_.01, v_12, v_3, v_len), eval_randPoolGetBytes_17(v_'randPoolGetPos, v_.01, v_12, v_3, v_len)) [ -v_'randPoolGetPos - v_.01 + 768 >= 0 ]
		(?, 1)    eval_randPoolGetBytes_8(v_'randPoolGetPos, v_.01, v_12, v_3, v_len) -> Com_2(eval_llvm.memcpy.p0i8.p0i8.i64_start(v_'randPoolGetPos, v_.01, v_12, v_3, v_len), eval_randPoolGetBytes_9(v_'randPoolGetPos, v_.01, v_12, v_3, v_len)) [ v_.01 - v_3 - 1 >= 0 /\ -v_'randPoolGetPos - v_3 + 768 >= 0 /\ v_'randPoolGetPos + v_3 - 768 >= 0 /\ v_'randPoolGetPos + v_.01 - 769 >= 0 ]
		(4, 1)    eval_randPoolGetBytes_bb1_in(v_'randPoolGetPos, v_.01, v_12, v_3, v_len) -> Com_1(eval_randPoolGetBytes_bb5_in(v_'randPoolGetPos, v_.01, v_12, v_3, v_len)) [ v_.01 <= -v_'randPoolGetPos + 768 ]
		(4, 1)    eval_randPoolGetBytes_bb1_in(v_'randPoolGetPos, v_.01, v_12, v_3, v_len) -> Com_1(eval_randPoolGetBytes_16(v_'randPoolGetPos, v_.01, v_12, v_3, v_len)) [ v_.01 <= -v_'randPoolGetPos + 768 ]
		(?, 1)    eval_randPoolGetBytes_bb1_in(v_'randPoolGetPos, v_.01, v_12, v_3, v_len) -> Com_1(eval_randPoolGetBytes_8(v_'randPoolGetPos, v_.01, v_12, -v_'randPoolGetPos + 768, v_len)) [ v_.01 > -v_'randPoolGetPos + 768 ]
		(1, 2)    eval_randPoolGetBytes_start(v_'randPoolGetPos, v_.01, v_12, v_3, v_len) -> Com_1(eval_randPoolGetBytes_bb1_in(v_'randPoolGetPos, v_len, v_12, v_3, v_len))
	start location:	eval_randPoolGetBytes_start
	leaf cost:	0

By chaining the transition eval_randPoolGetBytes_bb1_in(v_'randPoolGetPos, v_.01, v_12, v_3, v_len) -> Com_1(eval_randPoolGetBytes_bb5_in(v_'randPoolGetPos, v_.01, v_12, v_3, v_len)) [ v_.01 <= -v_'randPoolGetPos + 768 ] with all transitions in problem 10, the following new transition is obtained:
	eval_randPoolGetBytes_bb1_in(v_'randPoolGetPos, v_.01, v_12, v_3, v_len) -> Com_1(eval_randPoolGetBytes_stop(v_'randPoolGetPos, v_.01, v_12, v_3, v_len)) [ v_.01 <= -v_'randPoolGetPos + 768 /\ -v_'randPoolGetPos - v_.01 + 768 >= 0 ]
We thus obtain the following problem:
11:	T:
		(4, 2)    eval_randPoolGetBytes_bb1_in(v_'randPoolGetPos, v_.01, v_12, v_3, v_len) -> Com_1(eval_randPoolGetBytes_stop(v_'randPoolGetPos, v_.01, v_12, v_3, v_len)) [ v_.01 <= -v_'randPoolGetPos + 768 /\ -v_'randPoolGetPos - v_.01 + 768 >= 0 ]
		(?, 1)    eval_randPoolGetBytes_12(v_'randPoolGetPos, v_.01, v_12, v_3, v_len) -> Com_1(eval_randPoolGetBytes_bb1_in(v_'randPoolGetPos, v_12, v_12, v_3, v_len)) [ v_.01 - v_3 - 1 >= 0 /\ -v_'randPoolGetPos - v_3 + 768 >= 0 /\ v_'randPoolGetPos + v_3 - 768 >= 0 /\ v_'randPoolGetPos + v_.01 - 769 >= 0 ]
		(4, 2)    eval_randPoolGetBytes_17(v_'randPoolGetPos, v_.01, v_12, v_3, v_len) -> Com_1(eval_randPoolGetBytes_stop(v_'randPoolGetPos, v_.01, v_12, v_3, v_len)) [ -v_'randPoolGetPos - v_.01 + 768 >= 0 ]
		(?, 2)    eval_randPoolGetBytes_9(v_'randPoolGetPos, v_.01, v_12, v_3, v_len) -> Com_2(eval_randPoolStir_start(v_'randPoolGetPos, v_.01, v_.01 - v_3, v_3, v_len), eval_randPoolGetBytes_12(v_'randPoolGetPos, v_.01, v_.01 - v_3, v_3, v_len)) [ v_.01 - v_3 - 1 >= 0 /\ -v_'randPoolGetPos - v_3 + 768 >= 0 /\ v_'randPoolGetPos + v_3 - 768 >= 0 /\ v_'randPoolGetPos + v_.01 - 769 >= 0 ]
		(4, 1)    eval_randPoolGetBytes_bb5_in(v_'randPoolGetPos, v_.01, v_12, v_3, v_len) -> Com_1(eval_randPoolGetBytes_stop(v_'randPoolGetPos, v_.01, v_12, v_3, v_len)) [ -v_'randPoolGetPos - v_.01 + 768 >= 0 ]
		(4, 1)    eval_randPoolGetBytes_16(v_'randPoolGetPos, v_.01, v_12, v_3, v_len) -> Com_2(eval_llvm.memcpy.p0i8.p0i8.i64_start(v_'randPoolGetPos, v_.01, v_12, v_3, v_len), eval_randPoolGetBytes_17(v_'randPoolGetPos, v_.01, v_12, v_3, v_len)) [ -v_'randPoolGetPos - v_.01 + 768 >= 0 ]
		(?, 1)    eval_randPoolGetBytes_8(v_'randPoolGetPos, v_.01, v_12, v_3, v_len) -> Com_2(eval_llvm.memcpy.p0i8.p0i8.i64_start(v_'randPoolGetPos, v_.01, v_12, v_3, v_len), eval_randPoolGetBytes_9(v_'randPoolGetPos, v_.01, v_12, v_3, v_len)) [ v_.01 - v_3 - 1 >= 0 /\ -v_'randPoolGetPos - v_3 + 768 >= 0 /\ v_'randPoolGetPos + v_3 - 768 >= 0 /\ v_'randPoolGetPos + v_.01 - 769 >= 0 ]
		(4, 1)    eval_randPoolGetBytes_bb1_in(v_'randPoolGetPos, v_.01, v_12, v_3, v_len) -> Com_1(eval_randPoolGetBytes_16(v_'randPoolGetPos, v_.01, v_12, v_3, v_len)) [ v_.01 <= -v_'randPoolGetPos + 768 ]
		(?, 1)    eval_randPoolGetBytes_bb1_in(v_'randPoolGetPos, v_.01, v_12, v_3, v_len) -> Com_1(eval_randPoolGetBytes_8(v_'randPoolGetPos, v_.01, v_12, -v_'randPoolGetPos + 768, v_len)) [ v_.01 > -v_'randPoolGetPos + 768 ]
		(1, 2)    eval_randPoolGetBytes_start(v_'randPoolGetPos, v_.01, v_12, v_3, v_len) -> Com_1(eval_randPoolGetBytes_bb1_in(v_'randPoolGetPos, v_len, v_12, v_3, v_len))
	start location:	eval_randPoolGetBytes_start
	leaf cost:	0

Testing for reachability in the complexity graph removes the following transition from problem 11:
	eval_randPoolGetBytes_bb5_in(v_'randPoolGetPos, v_.01, v_12, v_3, v_len) -> Com_1(eval_randPoolGetBytes_stop(v_'randPoolGetPos, v_.01, v_12, v_3, v_len)) [ -v_'randPoolGetPos - v_.01 + 768 >= 0 ]
We thus obtain the following problem:
12:	T:
		(?, 1)    eval_randPoolGetBytes_12(v_'randPoolGetPos, v_.01, v_12, v_3, v_len) -> Com_1(eval_randPoolGetBytes_bb1_in(v_'randPoolGetPos, v_12, v_12, v_3, v_len)) [ v_.01 - v_3 - 1 >= 0 /\ -v_'randPoolGetPos - v_3 + 768 >= 0 /\ v_'randPoolGetPos + v_3 - 768 >= 0 /\ v_'randPoolGetPos + v_.01 - 769 >= 0 ]
		(4, 2)    eval_randPoolGetBytes_17(v_'randPoolGetPos, v_.01, v_12, v_3, v_len) -> Com_1(eval_randPoolGetBytes_stop(v_'randPoolGetPos, v_.01, v_12, v_3, v_len)) [ -v_'randPoolGetPos - v_.01 + 768 >= 0 ]
		(?, 2)    eval_randPoolGetBytes_9(v_'randPoolGetPos, v_.01, v_12, v_3, v_len) -> Com_2(eval_randPoolStir_start(v_'randPoolGetPos, v_.01, v_.01 - v_3, v_3, v_len), eval_randPoolGetBytes_12(v_'randPoolGetPos, v_.01, v_.01 - v_3, v_3, v_len)) [ v_.01 - v_3 - 1 >= 0 /\ -v_'randPoolGetPos - v_3 + 768 >= 0 /\ v_'randPoolGetPos + v_3 - 768 >= 0 /\ v_'randPoolGetPos + v_.01 - 769 >= 0 ]
		(4, 1)    eval_randPoolGetBytes_16(v_'randPoolGetPos, v_.01, v_12, v_3, v_len) -> Com_2(eval_llvm.memcpy.p0i8.p0i8.i64_start(v_'randPoolGetPos, v_.01, v_12, v_3, v_len), eval_randPoolGetBytes_17(v_'randPoolGetPos, v_.01, v_12, v_3, v_len)) [ -v_'randPoolGetPos - v_.01 + 768 >= 0 ]
		(?, 1)    eval_randPoolGetBytes_8(v_'randPoolGetPos, v_.01, v_12, v_3, v_len) -> Com_2(eval_llvm.memcpy.p0i8.p0i8.i64_start(v_'randPoolGetPos, v_.01, v_12, v_3, v_len), eval_randPoolGetBytes_9(v_'randPoolGetPos, v_.01, v_12, v_3, v_len)) [ v_.01 - v_3 - 1 >= 0 /\ -v_'randPoolGetPos - v_3 + 768 >= 0 /\ v_'randPoolGetPos + v_3 - 768 >= 0 /\ v_'randPoolGetPos + v_.01 - 769 >= 0 ]
		(4, 2)    eval_randPoolGetBytes_bb1_in(v_'randPoolGetPos, v_.01, v_12, v_3, v_len) -> Com_1(eval_randPoolGetBytes_stop(v_'randPoolGetPos, v_.01, v_12, v_3, v_len)) [ v_.01 <= -v_'randPoolGetPos + 768 /\ -v_'randPoolGetPos - v_.01 + 768 >= 0 ]
		(4, 1)    eval_randPoolGetBytes_bb1_in(v_'randPoolGetPos, v_.01, v_12, v_3, v_len) -> Com_1(eval_randPoolGetBytes_16(v_'randPoolGetPos, v_.01, v_12, v_3, v_len)) [ v_.01 <= -v_'randPoolGetPos + 768 ]
		(?, 1)    eval_randPoolGetBytes_bb1_in(v_'randPoolGetPos, v_.01, v_12, v_3, v_len) -> Com_1(eval_randPoolGetBytes_8(v_'randPoolGetPos, v_.01, v_12, -v_'randPoolGetPos + 768, v_len)) [ v_.01 > -v_'randPoolGetPos + 768 ]
		(1, 2)    eval_randPoolGetBytes_start(v_'randPoolGetPos, v_.01, v_12, v_3, v_len) -> Com_1(eval_randPoolGetBytes_bb1_in(v_'randPoolGetPos, v_len, v_12, v_3, v_len))
	start location:	eval_randPoolGetBytes_start
	leaf cost:	0

By chaining the transition eval_randPoolGetBytes_bb1_in(v_'randPoolGetPos, v_.01, v_12, v_3, v_len) -> Com_1(eval_randPoolGetBytes_16(v_'randPoolGetPos, v_.01, v_12, v_3, v_len)) [ v_.01 <= -v_'randPoolGetPos + 768 ] with all transitions in problem 12, the following new transition is obtained:
	eval_randPoolGetBytes_bb1_in(v_'randPoolGetPos, v_.01, v_12, v_3, v_len) -> Com_2(eval_llvm.memcpy.p0i8.p0i8.i64_start(v_'randPoolGetPos, v_.01, v_12, v_3, v_len), eval_randPoolGetBytes_17(v_'randPoolGetPos, v_.01, v_12, v_3, v_len)) [ v_.01 <= -v_'randPoolGetPos + 768 /\ -v_'randPoolGetPos - v_.01 + 768 >= 0 ]
We thus obtain the following problem:
13:	T:
		(4, 2)    eval_randPoolGetBytes_bb1_in(v_'randPoolGetPos, v_.01, v_12, v_3, v_len) -> Com_2(eval_llvm.memcpy.p0i8.p0i8.i64_start(v_'randPoolGetPos, v_.01, v_12, v_3, v_len), eval_randPoolGetBytes_17(v_'randPoolGetPos, v_.01, v_12, v_3, v_len)) [ v_.01 <= -v_'randPoolGetPos + 768 /\ -v_'randPoolGetPos - v_.01 + 768 >= 0 ]
		(?, 1)    eval_randPoolGetBytes_12(v_'randPoolGetPos, v_.01, v_12, v_3, v_len) -> Com_1(eval_randPoolGetBytes_bb1_in(v_'randPoolGetPos, v_12, v_12, v_3, v_len)) [ v_.01 - v_3 - 1 >= 0 /\ -v_'randPoolGetPos - v_3 + 768 >= 0 /\ v_'randPoolGetPos + v_3 - 768 >= 0 /\ v_'randPoolGetPos + v_.01 - 769 >= 0 ]
		(4, 2)    eval_randPoolGetBytes_17(v_'randPoolGetPos, v_.01, v_12, v_3, v_len) -> Com_1(eval_randPoolGetBytes_stop(v_'randPoolGetPos, v_.01, v_12, v_3, v_len)) [ -v_'randPoolGetPos - v_.01 + 768 >= 0 ]
		(?, 2)    eval_randPoolGetBytes_9(v_'randPoolGetPos, v_.01, v_12, v_3, v_len) -> Com_2(eval_randPoolStir_start(v_'randPoolGetPos, v_.01, v_.01 - v_3, v_3, v_len), eval_randPoolGetBytes_12(v_'randPoolGetPos, v_.01, v_.01 - v_3, v_3, v_len)) [ v_.01 - v_3 - 1 >= 0 /\ -v_'randPoolGetPos - v_3 + 768 >= 0 /\ v_'randPoolGetPos + v_3 - 768 >= 0 /\ v_'randPoolGetPos + v_.01 - 769 >= 0 ]
		(4, 1)    eval_randPoolGetBytes_16(v_'randPoolGetPos, v_.01, v_12, v_3, v_len) -> Com_2(eval_llvm.memcpy.p0i8.p0i8.i64_start(v_'randPoolGetPos, v_.01, v_12, v_3, v_len), eval_randPoolGetBytes_17(v_'randPoolGetPos, v_.01, v_12, v_3, v_len)) [ -v_'randPoolGetPos - v_.01 + 768 >= 0 ]
		(?, 1)    eval_randPoolGetBytes_8(v_'randPoolGetPos, v_.01, v_12, v_3, v_len) -> Com_2(eval_llvm.memcpy.p0i8.p0i8.i64_start(v_'randPoolGetPos, v_.01, v_12, v_3, v_len), eval_randPoolGetBytes_9(v_'randPoolGetPos, v_.01, v_12, v_3, v_len)) [ v_.01 - v_3 - 1 >= 0 /\ -v_'randPoolGetPos - v_3 + 768 >= 0 /\ v_'randPoolGetPos + v_3 - 768 >= 0 /\ v_'randPoolGetPos + v_.01 - 769 >= 0 ]
		(4, 2)    eval_randPoolGetBytes_bb1_in(v_'randPoolGetPos, v_.01, v_12, v_3, v_len) -> Com_1(eval_randPoolGetBytes_stop(v_'randPoolGetPos, v_.01, v_12, v_3, v_len)) [ v_.01 <= -v_'randPoolGetPos + 768 /\ -v_'randPoolGetPos - v_.01 + 768 >= 0 ]
		(?, 1)    eval_randPoolGetBytes_bb1_in(v_'randPoolGetPos, v_.01, v_12, v_3, v_len) -> Com_1(eval_randPoolGetBytes_8(v_'randPoolGetPos, v_.01, v_12, -v_'randPoolGetPos + 768, v_len)) [ v_.01 > -v_'randPoolGetPos + 768 ]
		(1, 2)    eval_randPoolGetBytes_start(v_'randPoolGetPos, v_.01, v_12, v_3, v_len) -> Com_1(eval_randPoolGetBytes_bb1_in(v_'randPoolGetPos, v_len, v_12, v_3, v_len))
	start location:	eval_randPoolGetBytes_start
	leaf cost:	0

Testing for reachability in the complexity graph removes the following transition from problem 13:
	eval_randPoolGetBytes_16(v_'randPoolGetPos, v_.01, v_12, v_3, v_len) -> Com_2(eval_llvm.memcpy.p0i8.p0i8.i64_start(v_'randPoolGetPos, v_.01, v_12, v_3, v_len), eval_randPoolGetBytes_17(v_'randPoolGetPos, v_.01, v_12, v_3, v_len)) [ -v_'randPoolGetPos - v_.01 + 768 >= 0 ]
We thus obtain the following problem:
14:	T:
		(?, 1)    eval_randPoolGetBytes_12(v_'randPoolGetPos, v_.01, v_12, v_3, v_len) -> Com_1(eval_randPoolGetBytes_bb1_in(v_'randPoolGetPos, v_12, v_12, v_3, v_len)) [ v_.01 - v_3 - 1 >= 0 /\ -v_'randPoolGetPos - v_3 + 768 >= 0 /\ v_'randPoolGetPos + v_3 - 768 >= 0 /\ v_'randPoolGetPos + v_.01 - 769 >= 0 ]
		(?, 2)    eval_randPoolGetBytes_9(v_'randPoolGetPos, v_.01, v_12, v_3, v_len) -> Com_2(eval_randPoolStir_start(v_'randPoolGetPos, v_.01, v_.01 - v_3, v_3, v_len), eval_randPoolGetBytes_12(v_'randPoolGetPos, v_.01, v_.01 - v_3, v_3, v_len)) [ v_.01 - v_3 - 1 >= 0 /\ -v_'randPoolGetPos - v_3 + 768 >= 0 /\ v_'randPoolGetPos + v_3 - 768 >= 0 /\ v_'randPoolGetPos + v_.01 - 769 >= 0 ]
		(4, 2)    eval_randPoolGetBytes_17(v_'randPoolGetPos, v_.01, v_12, v_3, v_len) -> Com_1(eval_randPoolGetBytes_stop(v_'randPoolGetPos, v_.01, v_12, v_3, v_len)) [ -v_'randPoolGetPos - v_.01 + 768 >= 0 ]
		(?, 1)    eval_randPoolGetBytes_8(v_'randPoolGetPos, v_.01, v_12, v_3, v_len) -> Com_2(eval_llvm.memcpy.p0i8.p0i8.i64_start(v_'randPoolGetPos, v_.01, v_12, v_3, v_len), eval_randPoolGetBytes_9(v_'randPoolGetPos, v_.01, v_12, v_3, v_len)) [ v_.01 - v_3 - 1 >= 0 /\ -v_'randPoolGetPos - v_3 + 768 >= 0 /\ v_'randPoolGetPos + v_3 - 768 >= 0 /\ v_'randPoolGetPos + v_.01 - 769 >= 0 ]
		(4, 2)    eval_randPoolGetBytes_bb1_in(v_'randPoolGetPos, v_.01, v_12, v_3, v_len) -> Com_2(eval_llvm.memcpy.p0i8.p0i8.i64_start(v_'randPoolGetPos, v_.01, v_12, v_3, v_len), eval_randPoolGetBytes_17(v_'randPoolGetPos, v_.01, v_12, v_3, v_len)) [ v_.01 <= -v_'randPoolGetPos + 768 /\ -v_'randPoolGetPos - v_.01 + 768 >= 0 ]
		(4, 2)    eval_randPoolGetBytes_bb1_in(v_'randPoolGetPos, v_.01, v_12, v_3, v_len) -> Com_1(eval_randPoolGetBytes_stop(v_'randPoolGetPos, v_.01, v_12, v_3, v_len)) [ v_.01 <= -v_'randPoolGetPos + 768 /\ -v_'randPoolGetPos - v_.01 + 768 >= 0 ]
		(?, 1)    eval_randPoolGetBytes_bb1_in(v_'randPoolGetPos, v_.01, v_12, v_3, v_len) -> Com_1(eval_randPoolGetBytes_8(v_'randPoolGetPos, v_.01, v_12, -v_'randPoolGetPos + 768, v_len)) [ v_.01 > -v_'randPoolGetPos + 768 ]
		(1, 2)    eval_randPoolGetBytes_start(v_'randPoolGetPos, v_.01, v_12, v_3, v_len) -> Com_1(eval_randPoolGetBytes_bb1_in(v_'randPoolGetPos, v_len, v_12, v_3, v_len))
	start location:	eval_randPoolGetBytes_start
	leaf cost:	0

By chaining the transition eval_randPoolGetBytes_bb1_in(v_'randPoolGetPos, v_.01, v_12, v_3, v_len) -> Com_1(eval_randPoolGetBytes_8(v_'randPoolGetPos, v_.01, v_12, -v_'randPoolGetPos + 768, v_len)) [ v_.01 > -v_'randPoolGetPos + 768 ] with all transitions in problem 14, the following new transition is obtained:
	eval_randPoolGetBytes_bb1_in(v_'randPoolGetPos, v_.01, v_12, v_3, v_len) -> Com_2(eval_llvm.memcpy.p0i8.p0i8.i64_start(v_'randPoolGetPos, v_.01, v_12, -v_'randPoolGetPos + 768, v_len), eval_randPoolGetBytes_9(v_'randPoolGetPos, v_.01, v_12, -v_'randPoolGetPos + 768, v_len)) [ v_.01 > -v_'randPoolGetPos + 768 /\ v_.01 + v_'randPoolGetPos - 769 >= 0 /\ 0 >= 0 /\ v_'randPoolGetPos + v_.01 - 769 >= 0 ]
We thus obtain the following problem:
15:	T:
		(?, 2)    eval_randPoolGetBytes_bb1_in(v_'randPoolGetPos, v_.01, v_12, v_3, v_len) -> Com_2(eval_llvm.memcpy.p0i8.p0i8.i64_start(v_'randPoolGetPos, v_.01, v_12, -v_'randPoolGetPos + 768, v_len), eval_randPoolGetBytes_9(v_'randPoolGetPos, v_.01, v_12, -v_'randPoolGetPos + 768, v_len)) [ v_.01 > -v_'randPoolGetPos + 768 /\ v_.01 + v_'randPoolGetPos - 769 >= 0 /\ 0 >= 0 /\ v_'randPoolGetPos + v_.01 - 769 >= 0 ]
		(?, 1)    eval_randPoolGetBytes_12(v_'randPoolGetPos, v_.01, v_12, v_3, v_len) -> Com_1(eval_randPoolGetBytes_bb1_in(v_'randPoolGetPos, v_12, v_12, v_3, v_len)) [ v_.01 - v_3 - 1 >= 0 /\ -v_'randPoolGetPos - v_3 + 768 >= 0 /\ v_'randPoolGetPos + v_3 - 768 >= 0 /\ v_'randPoolGetPos + v_.01 - 769 >= 0 ]
		(?, 2)    eval_randPoolGetBytes_9(v_'randPoolGetPos, v_.01, v_12, v_3, v_len) -> Com_2(eval_randPoolStir_start(v_'randPoolGetPos, v_.01, v_.01 - v_3, v_3, v_len), eval_randPoolGetBytes_12(v_'randPoolGetPos, v_.01, v_.01 - v_3, v_3, v_len)) [ v_.01 - v_3 - 1 >= 0 /\ -v_'randPoolGetPos - v_3 + 768 >= 0 /\ v_'randPoolGetPos + v_3 - 768 >= 0 /\ v_'randPoolGetPos + v_.01 - 769 >= 0 ]
		(4, 2)    eval_randPoolGetBytes_17(v_'randPoolGetPos, v_.01, v_12, v_3, v_len) -> Com_1(eval_randPoolGetBytes_stop(v_'randPoolGetPos, v_.01, v_12, v_3, v_len)) [ -v_'randPoolGetPos - v_.01 + 768 >= 0 ]
		(?, 1)    eval_randPoolGetBytes_8(v_'randPoolGetPos, v_.01, v_12, v_3, v_len) -> Com_2(eval_llvm.memcpy.p0i8.p0i8.i64_start(v_'randPoolGetPos, v_.01, v_12, v_3, v_len), eval_randPoolGetBytes_9(v_'randPoolGetPos, v_.01, v_12, v_3, v_len)) [ v_.01 - v_3 - 1 >= 0 /\ -v_'randPoolGetPos - v_3 + 768 >= 0 /\ v_'randPoolGetPos + v_3 - 768 >= 0 /\ v_'randPoolGetPos + v_.01 - 769 >= 0 ]
		(4, 2)    eval_randPoolGetBytes_bb1_in(v_'randPoolGetPos, v_.01, v_12, v_3, v_len) -> Com_2(eval_llvm.memcpy.p0i8.p0i8.i64_start(v_'randPoolGetPos, v_.01, v_12, v_3, v_len), eval_randPoolGetBytes_17(v_'randPoolGetPos, v_.01, v_12, v_3, v_len)) [ v_.01 <= -v_'randPoolGetPos + 768 /\ -v_'randPoolGetPos - v_.01 + 768 >= 0 ]
		(4, 2)    eval_randPoolGetBytes_bb1_in(v_'randPoolGetPos, v_.01, v_12, v_3, v_len) -> Com_1(eval_randPoolGetBytes_stop(v_'randPoolGetPos, v_.01, v_12, v_3, v_len)) [ v_.01 <= -v_'randPoolGetPos + 768 /\ -v_'randPoolGetPos - v_.01 + 768 >= 0 ]
		(1, 2)    eval_randPoolGetBytes_start(v_'randPoolGetPos, v_.01, v_12, v_3, v_len) -> Com_1(eval_randPoolGetBytes_bb1_in(v_'randPoolGetPos, v_len, v_12, v_3, v_len))
	start location:	eval_randPoolGetBytes_start
	leaf cost:	0

Testing for reachability in the complexity graph removes the following transition from problem 15:
	eval_randPoolGetBytes_8(v_'randPoolGetPos, v_.01, v_12, v_3, v_len) -> Com_2(eval_llvm.memcpy.p0i8.p0i8.i64_start(v_'randPoolGetPos, v_.01, v_12, v_3, v_len), eval_randPoolGetBytes_9(v_'randPoolGetPos, v_.01, v_12, v_3, v_len)) [ v_.01 - v_3 - 1 >= 0 /\ -v_'randPoolGetPos - v_3 + 768 >= 0 /\ v_'randPoolGetPos + v_3 - 768 >= 0 /\ v_'randPoolGetPos + v_.01 - 769 >= 0 ]
We thus obtain the following problem:
16:	T:
		(?, 1)    eval_randPoolGetBytes_12(v_'randPoolGetPos, v_.01, v_12, v_3, v_len) -> Com_1(eval_randPoolGetBytes_bb1_in(v_'randPoolGetPos, v_12, v_12, v_3, v_len)) [ v_.01 - v_3 - 1 >= 0 /\ -v_'randPoolGetPos - v_3 + 768 >= 0 /\ v_'randPoolGetPos + v_3 - 768 >= 0 /\ v_'randPoolGetPos + v_.01 - 769 >= 0 ]
		(?, 2)    eval_randPoolGetBytes_9(v_'randPoolGetPos, v_.01, v_12, v_3, v_len) -> Com_2(eval_randPoolStir_start(v_'randPoolGetPos, v_.01, v_.01 - v_3, v_3, v_len), eval_randPoolGetBytes_12(v_'randPoolGetPos, v_.01, v_.01 - v_3, v_3, v_len)) [ v_.01 - v_3 - 1 >= 0 /\ -v_'randPoolGetPos - v_3 + 768 >= 0 /\ v_'randPoolGetPos + v_3 - 768 >= 0 /\ v_'randPoolGetPos + v_.01 - 769 >= 0 ]
		(4, 2)    eval_randPoolGetBytes_17(v_'randPoolGetPos, v_.01, v_12, v_3, v_len) -> Com_1(eval_randPoolGetBytes_stop(v_'randPoolGetPos, v_.01, v_12, v_3, v_len)) [ -v_'randPoolGetPos - v_.01 + 768 >= 0 ]
		(?, 2)    eval_randPoolGetBytes_bb1_in(v_'randPoolGetPos, v_.01, v_12, v_3, v_len) -> Com_2(eval_llvm.memcpy.p0i8.p0i8.i64_start(v_'randPoolGetPos, v_.01, v_12, -v_'randPoolGetPos + 768, v_len), eval_randPoolGetBytes_9(v_'randPoolGetPos, v_.01, v_12, -v_'randPoolGetPos + 768, v_len)) [ v_.01 > -v_'randPoolGetPos + 768 /\ v_.01 + v_'randPoolGetPos - 769 >= 0 /\ 0 >= 0 /\ v_'randPoolGetPos + v_.01 - 769 >= 0 ]
		(4, 2)    eval_randPoolGetBytes_bb1_in(v_'randPoolGetPos, v_.01, v_12, v_3, v_len) -> Com_2(eval_llvm.memcpy.p0i8.p0i8.i64_start(v_'randPoolGetPos, v_.01, v_12, v_3, v_len), eval_randPoolGetBytes_17(v_'randPoolGetPos, v_.01, v_12, v_3, v_len)) [ v_.01 <= -v_'randPoolGetPos + 768 /\ -v_'randPoolGetPos - v_.01 + 768 >= 0 ]
		(4, 2)    eval_randPoolGetBytes_bb1_in(v_'randPoolGetPos, v_.01, v_12, v_3, v_len) -> Com_1(eval_randPoolGetBytes_stop(v_'randPoolGetPos, v_.01, v_12, v_3, v_len)) [ v_.01 <= -v_'randPoolGetPos + 768 /\ -v_'randPoolGetPos - v_.01 + 768 >= 0 ]
		(1, 2)    eval_randPoolGetBytes_start(v_'randPoolGetPos, v_.01, v_12, v_3, v_len) -> Com_1(eval_randPoolGetBytes_bb1_in(v_'randPoolGetPos, v_len, v_12, v_3, v_len))
	start location:	eval_randPoolGetBytes_start
	leaf cost:	0

Complexity upper bound ?

Time: 2.049 sec (SMT: 1.562 sec)

YES(?, 9*v_input_rows + 9*v_output_rows + 6)

Initial complexity problem:
1:	T:
		(1, 1)    eval_expand_bottom_edge_start(v_1, v_input_rows, v_num_cols, v_output_rows, v_row.0) -> Com_1(eval_expand_bottom_edge_bb0_in(v_1, v_input_rows, v_num_cols, v_output_rows, v_row.0))
		(?, 1)    eval_expand_bottom_edge_bb0_in(v_1, v_input_rows, v_num_cols, v_output_rows, v_row.0) -> Com_1(eval_expand_bottom_edge_bb1_in(v_1, v_input_rows, v_num_cols, v_output_rows, v_input_rows))
		(?, 1)    eval_expand_bottom_edge_bb1_in(v_1, v_input_rows, v_num_cols, v_output_rows, v_row.0) -> Com_1(eval_expand_bottom_edge_1(v_input_rows - 1, v_input_rows, v_num_cols, v_output_rows, v_row.0)) [ v_row.0 < v_output_rows ]
		(?, 1)    eval_expand_bottom_edge_bb1_in(v_1, v_input_rows, v_num_cols, v_output_rows, v_row.0) -> Com_1(eval_expand_bottom_edge_stop(v_1, v_input_rows, v_num_cols, v_output_rows, v_row.0)) [ v_row.0 >= v_output_rows ]
		(?, 1)    eval_expand_bottom_edge_1(v_1, v_input_rows, v_num_cols, v_output_rows, v_row.0) -> Com_2(eval_jcopy_sample_rows_start(v_1, v_input_rows, v_num_cols, v_output_rows, v_row.0), eval_expand_bottom_edge_2(v_1, v_input_rows, v_num_cols, v_output_rows, v_row.0))
		(?, 1)    eval_expand_bottom_edge_2(v_1, v_input_rows, v_num_cols, v_output_rows, v_row.0) -> Com_1(eval_expand_bottom_edge_bb1_in(v_1, v_input_rows, v_num_cols, v_output_rows, v_row.0 + 1))
	start location:	eval_expand_bottom_edge_start
	leaf cost:	0

Repeatedly propagating knowledge in problem 1 produces the following problem:
2:	T:
		(1, 1)    eval_expand_bottom_edge_start(v_1, v_input_rows, v_num_cols, v_output_rows, v_row.0) -> Com_1(eval_expand_bottom_edge_bb0_in(v_1, v_input_rows, v_num_cols, v_output_rows, v_row.0))
		(1, 1)    eval_expand_bottom_edge_bb0_in(v_1, v_input_rows, v_num_cols, v_output_rows, v_row.0) -> Com_1(eval_expand_bottom_edge_bb1_in(v_1, v_input_rows, v_num_cols, v_output_rows, v_input_rows))
		(?, 1)    eval_expand_bottom_edge_bb1_in(v_1, v_input_rows, v_num_cols, v_output_rows, v_row.0) -> Com_1(eval_expand_bottom_edge_1(v_input_rows - 1, v_input_rows, v_num_cols, v_output_rows, v_row.0)) [ v_row.0 < v_output_rows ]
		(?, 1)    eval_expand_bottom_edge_bb1_in(v_1, v_input_rows, v_num_cols, v_output_rows, v_row.0) -> Com_1(eval_expand_bottom_edge_stop(v_1, v_input_rows, v_num_cols, v_output_rows, v_row.0)) [ v_row.0 >= v_output_rows ]
		(?, 1)    eval_expand_bottom_edge_1(v_1, v_input_rows, v_num_cols, v_output_rows, v_row.0) -> Com_2(eval_jcopy_sample_rows_start(v_1, v_input_rows, v_num_cols, v_output_rows, v_row.0), eval_expand_bottom_edge_2(v_1, v_input_rows, v_num_cols, v_output_rows, v_row.0))
		(?, 1)    eval_expand_bottom_edge_2(v_1, v_input_rows, v_num_cols, v_output_rows, v_row.0) -> Com_1(eval_expand_bottom_edge_bb1_in(v_1, v_input_rows, v_num_cols, v_output_rows, v_row.0 + 1))
	start location:	eval_expand_bottom_edge_start
	leaf cost:	0

A polynomial rank function with
	Pol(eval_expand_bottom_edge_start) = 1
	Pol(eval_expand_bottom_edge_bb0_in) = 1
	Pol(eval_expand_bottom_edge_bb1_in) = 1
	Pol(eval_expand_bottom_edge_1) = 1
	Pol(eval_expand_bottom_edge_stop) = 0
	Pol(eval_jcopy_sample_rows_start) = 0
	Pol(eval_expand_bottom_edge_2) = 1
orients all transitions weakly and the transition
	eval_expand_bottom_edge_bb1_in(v_1, v_input_rows, v_num_cols, v_output_rows, v_row.0) -> Com_1(eval_expand_bottom_edge_stop(v_1, v_input_rows, v_num_cols, v_output_rows, v_row.0)) [ v_row.0 >= v_output_rows ]
strictly and produces the following problem:
3:	T:
		(1, 1)    eval_expand_bottom_edge_start(v_1, v_input_rows, v_num_cols, v_output_rows, v_row.0) -> Com_1(eval_expand_bottom_edge_bb0_in(v_1, v_input_rows, v_num_cols, v_output_rows, v_row.0))
		(1, 1)    eval_expand_bottom_edge_bb0_in(v_1, v_input_rows, v_num_cols, v_output_rows, v_row.0) -> Com_1(eval_expand_bottom_edge_bb1_in(v_1, v_input_rows, v_num_cols, v_output_rows, v_input_rows))
		(?, 1)    eval_expand_bottom_edge_bb1_in(v_1, v_input_rows, v_num_cols, v_output_rows, v_row.0) -> Com_1(eval_expand_bottom_edge_1(v_input_rows - 1, v_input_rows, v_num_cols, v_output_rows, v_row.0)) [ v_row.0 < v_output_rows ]
		(1, 1)    eval_expand_bottom_edge_bb1_in(v_1, v_input_rows, v_num_cols, v_output_rows, v_row.0) -> Com_1(eval_expand_bottom_edge_stop(v_1, v_input_rows, v_num_cols, v_output_rows, v_row.0)) [ v_row.0 >= v_output_rows ]
		(?, 1)    eval_expand_bottom_edge_1(v_1, v_input_rows, v_num_cols, v_output_rows, v_row.0) -> Com_2(eval_jcopy_sample_rows_start(v_1, v_input_rows, v_num_cols, v_output_rows, v_row.0), eval_expand_bottom_edge_2(v_1, v_input_rows, v_num_cols, v_output_rows, v_row.0))
		(?, 1)    eval_expand_bottom_edge_2(v_1, v_input_rows, v_num_cols, v_output_rows, v_row.0) -> Com_1(eval_expand_bottom_edge_bb1_in(v_1, v_input_rows, v_num_cols, v_output_rows, v_row.0 + 1))
	start location:	eval_expand_bottom_edge_start
	leaf cost:	0

Applied AI with 'oct' on problem 3 to obtain the following invariants:
  For symbol eval_expand_bottom_edge_1: X_4 - X_5 - 1 >= 0 /\ -X_2 + X_5 >= 0 /\ -X_1 + X_5 - 1 >= 0 /\ -X_2 + X_4 - 1 >= 0 /\ -X_1 + X_4 - 2 >= 0 /\ X_1 - X_2 + 1 >= 0 /\ -X_1 + X_2 - 1 >= 0
  For symbol eval_expand_bottom_edge_2: X_4 - X_5 - 1 >= 0 /\ -X_2 + X_5 >= 0 /\ -X_1 + X_5 - 1 >= 0 /\ -X_2 + X_4 - 1 >= 0 /\ -X_1 + X_4 - 2 >= 0 /\ X_1 - X_2 + 1 >= 0 /\ -X_1 + X_2 - 1 >= 0
  For symbol eval_expand_bottom_edge_bb1_in: -X_2 + X_5 >= 0


This yielded the following problem:
4:	T:
		(?, 1)    eval_expand_bottom_edge_2(v_1, v_input_rows, v_num_cols, v_output_rows, v_row.0) -> Com_1(eval_expand_bottom_edge_bb1_in(v_1, v_input_rows, v_num_cols, v_output_rows, v_row.0 + 1)) [ v_output_rows - v_row.0 - 1 >= 0 /\ -v_input_rows + v_row.0 >= 0 /\ -v_1 + v_row.0 - 1 >= 0 /\ -v_input_rows + v_output_rows - 1 >= 0 /\ -v_1 + v_output_rows - 2 >= 0 /\ v_1 - v_input_rows + 1 >= 0 /\ -v_1 + v_input_rows - 1 >= 0 ]
		(?, 1)    eval_expand_bottom_edge_1(v_1, v_input_rows, v_num_cols, v_output_rows, v_row.0) -> Com_2(eval_jcopy_sample_rows_start(v_1, v_input_rows, v_num_cols, v_output_rows, v_row.0), eval_expand_bottom_edge_2(v_1, v_input_rows, v_num_cols, v_output_rows, v_row.0)) [ v_output_rows - v_row.0 - 1 >= 0 /\ -v_input_rows + v_row.0 >= 0 /\ -v_1 + v_row.0 - 1 >= 0 /\ -v_input_rows + v_output_rows - 1 >= 0 /\ -v_1 + v_output_rows - 2 >= 0 /\ v_1 - v_input_rows + 1 >= 0 /\ -v_1 + v_input_rows - 1 >= 0 ]
		(1, 1)    eval_expand_bottom_edge_bb1_in(v_1, v_input_rows, v_num_cols, v_output_rows, v_row.0) -> Com_1(eval_expand_bottom_edge_stop(v_1, v_input_rows, v_num_cols, v_output_rows, v_row.0)) [ -v_input_rows + v_row.0 >= 0 /\ v_row.0 >= v_output_rows ]
		(?, 1)    eval_expand_bottom_edge_bb1_in(v_1, v_input_rows, v_num_cols, v_output_rows, v_row.0) -> Com_1(eval_expand_bottom_edge_1(v_input_rows - 1, v_input_rows, v_num_cols, v_output_rows, v_row.0)) [ -v_input_rows + v_row.0 >= 0 /\ v_row.0 < v_output_rows ]
		(1, 1)    eval_expand_bottom_edge_bb0_in(v_1, v_input_rows, v_num_cols, v_output_rows, v_row.0) -> Com_1(eval_expand_bottom_edge_bb1_in(v_1, v_input_rows, v_num_cols, v_output_rows, v_input_rows))
		(1, 1)    eval_expand_bottom_edge_start(v_1, v_input_rows, v_num_cols, v_output_rows, v_row.0) -> Com_1(eval_expand_bottom_edge_bb0_in(v_1, v_input_rows, v_num_cols, v_output_rows, v_row.0))
	start location:	eval_expand_bottom_edge_start
	leaf cost:	0

A polynomial rank function with
	Pol(eval_expand_bottom_edge_2) = 3*V_4 - 3*V_5 - 1
	Pol(eval_expand_bottom_edge_bb1_in) = 3*V_4 - 3*V_5 + 1
	Pol(eval_expand_bottom_edge_1) = 3*V_4 - 3*V_5
	Pol(eval_jcopy_sample_rows_start) = 3*V_2 - 3*V_5
	Pol(eval_expand_bottom_edge_stop) = 3*V_4 - 3*V_5
	Pol(eval_expand_bottom_edge_bb0_in) = -3*V_2 + 3*V_4 + 1
	Pol(eval_expand_bottom_edge_start) = -3*V_2 + 3*V_4 + 1
orients all transitions weakly and the transitions
	eval_expand_bottom_edge_bb1_in(v_1, v_input_rows, v_num_cols, v_output_rows, v_row.0) -> Com_1(eval_expand_bottom_edge_1(v_input_rows - 1, v_input_rows, v_num_cols, v_output_rows, v_row.0)) [ -v_input_rows + v_row.0 >= 0 /\ v_row.0 < v_output_rows ]
	eval_expand_bottom_edge_2(v_1, v_input_rows, v_num_cols, v_output_rows, v_row.0) -> Com_1(eval_expand_bottom_edge_bb1_in(v_1, v_input_rows, v_num_cols, v_output_rows, v_row.0 + 1)) [ v_output_rows - v_row.0 - 1 >= 0 /\ -v_input_rows + v_row.0 >= 0 /\ -v_1 + v_row.0 - 1 >= 0 /\ -v_input_rows + v_output_rows - 1 >= 0 /\ -v_1 + v_output_rows - 2 >= 0 /\ v_1 - v_input_rows + 1 >= 0 /\ -v_1 + v_input_rows - 1 >= 0 ]
	eval_expand_bottom_edge_1(v_1, v_input_rows, v_num_cols, v_output_rows, v_row.0) -> Com_2(eval_jcopy_sample_rows_start(v_1, v_input_rows, v_num_cols, v_output_rows, v_row.0), eval_expand_bottom_edge_2(v_1, v_input_rows, v_num_cols, v_output_rows, v_row.0)) [ v_output_rows - v_row.0 - 1 >= 0 /\ -v_input_rows + v_row.0 >= 0 /\ -v_1 + v_row.0 - 1 >= 0 /\ -v_input_rows + v_output_rows - 1 >= 0 /\ -v_1 + v_output_rows - 2 >= 0 /\ v_1 - v_input_rows + 1 >= 0 /\ -v_1 + v_input_rows - 1 >= 0 ]
strictly and produces the following problem:
5:	T:
		(3*v_input_rows + 3*v_output_rows + 1, 1)    eval_expand_bottom_edge_2(v_1, v_input_rows, v_num_cols, v_output_rows, v_row.0) -> Com_1(eval_expand_bottom_edge_bb1_in(v_1, v_input_rows, v_num_cols, v_output_rows, v_row.0 + 1)) [ v_output_rows - v_row.0 - 1 >= 0 /\ -v_input_rows + v_row.0 >= 0 /\ -v_1 + v_row.0 - 1 >= 0 /\ -v_input_rows + v_output_rows - 1 >= 0 /\ -v_1 + v_output_rows - 2 >= 0 /\ v_1 - v_input_rows + 1 >= 0 /\ -v_1 + v_input_rows - 1 >= 0 ]
		(3*v_input_rows + 3*v_output_rows + 1, 1)    eval_expand_bottom_edge_1(v_1, v_input_rows, v_num_cols, v_output_rows, v_row.0) -> Com_2(eval_jcopy_sample_rows_start(v_1, v_input_rows, v_num_cols, v_output_rows, v_row.0), eval_expand_bottom_edge_2(v_1, v_input_rows, v_num_cols, v_output_rows, v_row.0)) [ v_output_rows - v_row.0 - 1 >= 0 /\ -v_input_rows + v_row.0 >= 0 /\ -v_1 + v_row.0 - 1 >= 0 /\ -v_input_rows + v_output_rows - 1 >= 0 /\ -v_1 + v_output_rows - 2 >= 0 /\ v_1 - v_input_rows + 1 >= 0 /\ -v_1 + v_input_rows - 1 >= 0 ]
		(1, 1)                                       eval_expand_bottom_edge_bb1_in(v_1, v_input_rows, v_num_cols, v_output_rows, v_row.0) -> Com_1(eval_expand_bottom_edge_stop(v_1, v_input_rows, v_num_cols, v_output_rows, v_row.0)) [ -v_input_rows + v_row.0 >= 0 /\ v_row.0 >= v_output_rows ]
		(3*v_input_rows + 3*v_output_rows + 1, 1)    eval_expand_bottom_edge_bb1_in(v_1, v_input_rows, v_num_cols, v_output_rows, v_row.0) -> Com_1(eval_expand_bottom_edge_1(v_input_rows - 1, v_input_rows, v_num_cols, v_output_rows, v_row.0)) [ -v_input_rows + v_row.0 >= 0 /\ v_row.0 < v_output_rows ]
		(1, 1)                                       eval_expand_bottom_edge_bb0_in(v_1, v_input_rows, v_num_cols, v_output_rows, v_row.0) -> Com_1(eval_expand_bottom_edge_bb1_in(v_1, v_input_rows, v_num_cols, v_output_rows, v_input_rows))
		(1, 1)                                       eval_expand_bottom_edge_start(v_1, v_input_rows, v_num_cols, v_output_rows, v_row.0) -> Com_1(eval_expand_bottom_edge_bb0_in(v_1, v_input_rows, v_num_cols, v_output_rows, v_row.0))
	start location:	eval_expand_bottom_edge_start
	leaf cost:	0

Complexity upper bound 9*v_input_rows + 9*v_output_rows + 6

Time: 0.235 sec (SMT: 0.201 sec)

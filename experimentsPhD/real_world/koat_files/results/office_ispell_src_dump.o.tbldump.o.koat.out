YES(?, 9*v_numflags + 3)

Initial complexity problem:
1:	T:
		(1, 1)    eval_tbldump_start(v_.01, v_0, v_numflags) -> Com_1(eval_tbldump_bb0_in(v_.01, v_0, v_numflags))
		(?, 1)    eval_tbldump_bb0_in(v_.01, v_0, v_numflags) -> Com_1(eval_tbldump_bb1_in(v_numflags, v_0, v_numflags))
		(?, 1)    eval_tbldump_bb1_in(v_.01, v_0, v_numflags) -> Com_1(eval_tbldump_2(v_.01, v_.01 - 1, v_numflags)) [ v_.01 - 1 >= 0 ]
		(?, 1)    eval_tbldump_bb1_in(v_.01, v_0, v_numflags) -> Com_1(eval_tbldump_stop(v_.01, v_0, v_numflags)) [ v_.01 - 1 < 0 ]
		(?, 1)    eval_tbldump_2(v_.01, v_0, v_numflags) -> Com_2(eval_entdump_start(v_.01, v_0, v_numflags), eval_tbldump_3(v_.01, v_0, v_numflags))
		(?, 1)    eval_tbldump_3(v_.01, v_0, v_numflags) -> Com_1(eval_tbldump_bb1_in(v_0, v_0, v_numflags))
	start location:	eval_tbldump_start
	leaf cost:	0

Repeatedly propagating knowledge in problem 1 produces the following problem:
2:	T:
		(1, 1)    eval_tbldump_start(v_.01, v_0, v_numflags) -> Com_1(eval_tbldump_bb0_in(v_.01, v_0, v_numflags))
		(1, 1)    eval_tbldump_bb0_in(v_.01, v_0, v_numflags) -> Com_1(eval_tbldump_bb1_in(v_numflags, v_0, v_numflags))
		(?, 1)    eval_tbldump_bb1_in(v_.01, v_0, v_numflags) -> Com_1(eval_tbldump_2(v_.01, v_.01 - 1, v_numflags)) [ v_.01 - 1 >= 0 ]
		(?, 1)    eval_tbldump_bb1_in(v_.01, v_0, v_numflags) -> Com_1(eval_tbldump_stop(v_.01, v_0, v_numflags)) [ v_.01 - 1 < 0 ]
		(?, 1)    eval_tbldump_2(v_.01, v_0, v_numflags) -> Com_2(eval_entdump_start(v_.01, v_0, v_numflags), eval_tbldump_3(v_.01, v_0, v_numflags))
		(?, 1)    eval_tbldump_3(v_.01, v_0, v_numflags) -> Com_1(eval_tbldump_bb1_in(v_0, v_0, v_numflags))
	start location:	eval_tbldump_start
	leaf cost:	0

A polynomial rank function with
	Pol(eval_tbldump_start) = 1
	Pol(eval_tbldump_bb0_in) = 1
	Pol(eval_tbldump_bb1_in) = 1
	Pol(eval_tbldump_2) = 1
	Pol(eval_tbldump_stop) = 0
	Pol(eval_entdump_start) = 0
	Pol(eval_tbldump_3) = 1
orients all transitions weakly and the transition
	eval_tbldump_bb1_in(v_.01, v_0, v_numflags) -> Com_1(eval_tbldump_stop(v_.01, v_0, v_numflags)) [ v_.01 - 1 < 0 ]
strictly and produces the following problem:
3:	T:
		(1, 1)    eval_tbldump_start(v_.01, v_0, v_numflags) -> Com_1(eval_tbldump_bb0_in(v_.01, v_0, v_numflags))
		(1, 1)    eval_tbldump_bb0_in(v_.01, v_0, v_numflags) -> Com_1(eval_tbldump_bb1_in(v_numflags, v_0, v_numflags))
		(?, 1)    eval_tbldump_bb1_in(v_.01, v_0, v_numflags) -> Com_1(eval_tbldump_2(v_.01, v_.01 - 1, v_numflags)) [ v_.01 - 1 >= 0 ]
		(1, 1)    eval_tbldump_bb1_in(v_.01, v_0, v_numflags) -> Com_1(eval_tbldump_stop(v_.01, v_0, v_numflags)) [ v_.01 - 1 < 0 ]
		(?, 1)    eval_tbldump_2(v_.01, v_0, v_numflags) -> Com_2(eval_entdump_start(v_.01, v_0, v_numflags), eval_tbldump_3(v_.01, v_0, v_numflags))
		(?, 1)    eval_tbldump_3(v_.01, v_0, v_numflags) -> Com_1(eval_tbldump_bb1_in(v_0, v_0, v_numflags))
	start location:	eval_tbldump_start
	leaf cost:	0

Applied AI with 'oct' on problem 3 to obtain the following invariants:
  For symbol eval_tbldump_2: X_3 - 1 >= 0 /\ X_2 + X_3 - 1 >= 0 /\ -X_2 + X_3 - 1 >= 0 /\ X_1 + X_3 - 2 >= 0 /\ -X_1 + X_3 >= 0 /\ X_1 - X_2 - 1 >= 0 /\ X_2 >= 0 /\ X_1 + X_2 - 1 >= 0 /\ -X_1 + X_2 + 1 >= 0 /\ X_1 - 1 >= 0
  For symbol eval_tbldump_3: X_3 - 1 >= 0 /\ X_2 + X_3 - 1 >= 0 /\ -X_2 + X_3 - 1 >= 0 /\ X_1 + X_3 - 2 >= 0 /\ -X_1 + X_3 >= 0 /\ X_1 - X_2 - 1 >= 0 /\ X_2 >= 0 /\ X_1 + X_2 - 1 >= 0 /\ -X_1 + X_2 + 1 >= 0 /\ X_1 - 1 >= 0
  For symbol eval_tbldump_bb1_in: -X_1 + X_3 >= 0


This yielded the following problem:
4:	T:
		(?, 1)    eval_tbldump_3(v_.01, v_0, v_numflags) -> Com_1(eval_tbldump_bb1_in(v_0, v_0, v_numflags)) [ v_numflags - 1 >= 0 /\ v_0 + v_numflags - 1 >= 0 /\ -v_0 + v_numflags - 1 >= 0 /\ v_.01 + v_numflags - 2 >= 0 /\ -v_.01 + v_numflags >= 0 /\ v_.01 - v_0 - 1 >= 0 /\ v_0 >= 0 /\ v_.01 + v_0 - 1 >= 0 /\ -v_.01 + v_0 + 1 >= 0 /\ v_.01 - 1 >= 0 ]
		(?, 1)    eval_tbldump_2(v_.01, v_0, v_numflags) -> Com_2(eval_entdump_start(v_.01, v_0, v_numflags), eval_tbldump_3(v_.01, v_0, v_numflags)) [ v_numflags - 1 >= 0 /\ v_0 + v_numflags - 1 >= 0 /\ -v_0 + v_numflags - 1 >= 0 /\ v_.01 + v_numflags - 2 >= 0 /\ -v_.01 + v_numflags >= 0 /\ v_.01 - v_0 - 1 >= 0 /\ v_0 >= 0 /\ v_.01 + v_0 - 1 >= 0 /\ -v_.01 + v_0 + 1 >= 0 /\ v_.01 - 1 >= 0 ]
		(1, 1)    eval_tbldump_bb1_in(v_.01, v_0, v_numflags) -> Com_1(eval_tbldump_stop(v_.01, v_0, v_numflags)) [ -v_.01 + v_numflags >= 0 /\ v_.01 - 1 < 0 ]
		(?, 1)    eval_tbldump_bb1_in(v_.01, v_0, v_numflags) -> Com_1(eval_tbldump_2(v_.01, v_.01 - 1, v_numflags)) [ -v_.01 + v_numflags >= 0 /\ v_.01 - 1 >= 0 ]
		(1, 1)    eval_tbldump_bb0_in(v_.01, v_0, v_numflags) -> Com_1(eval_tbldump_bb1_in(v_numflags, v_0, v_numflags))
		(1, 1)    eval_tbldump_start(v_.01, v_0, v_numflags) -> Com_1(eval_tbldump_bb0_in(v_.01, v_0, v_numflags))
	start location:	eval_tbldump_start
	leaf cost:	0

A polynomial rank function with
	Pol(eval_tbldump_3) = 3*V_2 + 1
	Pol(eval_tbldump_bb1_in) = 3*V_1
	Pol(eval_tbldump_2) = 3*V_1 - 1
	Pol(eval_entdump_start) = 3*V_1 - 3*V_2 - 3
	Pol(eval_tbldump_stop) = 3*V_1
	Pol(eval_tbldump_bb0_in) = 3*V_3
	Pol(eval_tbldump_start) = 3*V_3
orients all transitions weakly and the transitions
	eval_tbldump_bb1_in(v_.01, v_0, v_numflags) -> Com_1(eval_tbldump_2(v_.01, v_.01 - 1, v_numflags)) [ -v_.01 + v_numflags >= 0 /\ v_.01 - 1 >= 0 ]
	eval_tbldump_3(v_.01, v_0, v_numflags) -> Com_1(eval_tbldump_bb1_in(v_0, v_0, v_numflags)) [ v_numflags - 1 >= 0 /\ v_0 + v_numflags - 1 >= 0 /\ -v_0 + v_numflags - 1 >= 0 /\ v_.01 + v_numflags - 2 >= 0 /\ -v_.01 + v_numflags >= 0 /\ v_.01 - v_0 - 1 >= 0 /\ v_0 >= 0 /\ v_.01 + v_0 - 1 >= 0 /\ -v_.01 + v_0 + 1 >= 0 /\ v_.01 - 1 >= 0 ]
	eval_tbldump_2(v_.01, v_0, v_numflags) -> Com_2(eval_entdump_start(v_.01, v_0, v_numflags), eval_tbldump_3(v_.01, v_0, v_numflags)) [ v_numflags - 1 >= 0 /\ v_0 + v_numflags - 1 >= 0 /\ -v_0 + v_numflags - 1 >= 0 /\ v_.01 + v_numflags - 2 >= 0 /\ -v_.01 + v_numflags >= 0 /\ v_.01 - v_0 - 1 >= 0 /\ v_0 >= 0 /\ v_.01 + v_0 - 1 >= 0 /\ -v_.01 + v_0 + 1 >= 0 /\ v_.01 - 1 >= 0 ]
strictly and produces the following problem:
5:	T:
		(3*v_numflags, 1)    eval_tbldump_3(v_.01, v_0, v_numflags) -> Com_1(eval_tbldump_bb1_in(v_0, v_0, v_numflags)) [ v_numflags - 1 >= 0 /\ v_0 + v_numflags - 1 >= 0 /\ -v_0 + v_numflags - 1 >= 0 /\ v_.01 + v_numflags - 2 >= 0 /\ -v_.01 + v_numflags >= 0 /\ v_.01 - v_0 - 1 >= 0 /\ v_0 >= 0 /\ v_.01 + v_0 - 1 >= 0 /\ -v_.01 + v_0 + 1 >= 0 /\ v_.01 - 1 >= 0 ]
		(3*v_numflags, 1)    eval_tbldump_2(v_.01, v_0, v_numflags) -> Com_2(eval_entdump_start(v_.01, v_0, v_numflags), eval_tbldump_3(v_.01, v_0, v_numflags)) [ v_numflags - 1 >= 0 /\ v_0 + v_numflags - 1 >= 0 /\ -v_0 + v_numflags - 1 >= 0 /\ v_.01 + v_numflags - 2 >= 0 /\ -v_.01 + v_numflags >= 0 /\ v_.01 - v_0 - 1 >= 0 /\ v_0 >= 0 /\ v_.01 + v_0 - 1 >= 0 /\ -v_.01 + v_0 + 1 >= 0 /\ v_.01 - 1 >= 0 ]
		(1, 1)               eval_tbldump_bb1_in(v_.01, v_0, v_numflags) -> Com_1(eval_tbldump_stop(v_.01, v_0, v_numflags)) [ -v_.01 + v_numflags >= 0 /\ v_.01 - 1 < 0 ]
		(3*v_numflags, 1)    eval_tbldump_bb1_in(v_.01, v_0, v_numflags) -> Com_1(eval_tbldump_2(v_.01, v_.01 - 1, v_numflags)) [ -v_.01 + v_numflags >= 0 /\ v_.01 - 1 >= 0 ]
		(1, 1)               eval_tbldump_bb0_in(v_.01, v_0, v_numflags) -> Com_1(eval_tbldump_bb1_in(v_numflags, v_0, v_numflags))
		(1, 1)               eval_tbldump_start(v_.01, v_0, v_numflags) -> Com_1(eval_tbldump_bb0_in(v_.01, v_0, v_numflags))
	start location:	eval_tbldump_start
	leaf cost:	0

Complexity upper bound 9*v_numflags + 3

Time: 0.249 sec (SMT: 0.220 sec)

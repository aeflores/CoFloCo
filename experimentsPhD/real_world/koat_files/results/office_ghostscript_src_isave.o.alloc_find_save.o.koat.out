MAYBE

Initial complexity problem:
1:	T:
		(1, 1)    eval_alloc_find_save_start(v_sid) -> eval_alloc_find_save_bb0_in(v_sid)
		(?, 1)    eval_alloc_find_save_bb0_in(v_sid) -> eval_alloc_find_save_bb4_in(v_sid)
		(?, 1)    eval_alloc_find_save_bb0_in(v_sid) -> eval_alloc_find_save_bb1_in(v_sid)
		(?, 1)    eval_alloc_find_save_bb1_in(v_sid) -> eval_alloc_find_save_bb4_in(v_sid)
		(?, 1)    eval_alloc_find_save_bb1_in(v_sid) -> eval_alloc_find_save_bb1_in(v_sid)
		(?, 1)    eval_alloc_find_save_bb4_in(v_sid) -> eval_alloc_find_save_stop(v_sid)
	start location:	eval_alloc_find_save_start
	leaf cost:	0

Repeatedly removing leaves of the complexity graph in problem 1 produces the following problem:
2:	T:
		(1, 1)    eval_alloc_find_save_start(v_sid) -> eval_alloc_find_save_bb0_in(v_sid)
		(?, 1)    eval_alloc_find_save_bb0_in(v_sid) -> eval_alloc_find_save_bb1_in(v_sid)
		(?, 1)    eval_alloc_find_save_bb1_in(v_sid) -> eval_alloc_find_save_bb1_in(v_sid)
	start location:	eval_alloc_find_save_start
	leaf cost:	3

Repeatedly propagating knowledge in problem 2 produces the following problem:
3:	T:
		(1, 1)    eval_alloc_find_save_start(v_sid) -> eval_alloc_find_save_bb0_in(v_sid)
		(1, 1)    eval_alloc_find_save_bb0_in(v_sid) -> eval_alloc_find_save_bb1_in(v_sid)
		(?, 1)    eval_alloc_find_save_bb1_in(v_sid) -> eval_alloc_find_save_bb1_in(v_sid)
	start location:	eval_alloc_find_save_start
	leaf cost:	3

By chaining the transition eval_alloc_find_save_start(v_sid) -> eval_alloc_find_save_bb0_in(v_sid) with all transitions in problem 3, the following new transition is obtained:
	eval_alloc_find_save_start(v_sid) -> eval_alloc_find_save_bb1_in(v_sid)
We thus obtain the following problem:
4:	T:
		(1, 2)    eval_alloc_find_save_start(v_sid) -> eval_alloc_find_save_bb1_in(v_sid)
		(1, 1)    eval_alloc_find_save_bb0_in(v_sid) -> eval_alloc_find_save_bb1_in(v_sid)
		(?, 1)    eval_alloc_find_save_bb1_in(v_sid) -> eval_alloc_find_save_bb1_in(v_sid)
	start location:	eval_alloc_find_save_start
	leaf cost:	3

Testing for reachability in the complexity graph removes the following transition from problem 4:
	eval_alloc_find_save_bb0_in(v_sid) -> eval_alloc_find_save_bb1_in(v_sid)
We thus obtain the following problem:
5:	T:
		(?, 1)    eval_alloc_find_save_bb1_in(v_sid) -> eval_alloc_find_save_bb1_in(v_sid)
		(1, 2)    eval_alloc_find_save_start(v_sid) -> eval_alloc_find_save_bb1_in(v_sid)
	start location:	eval_alloc_find_save_start
	leaf cost:	3

Complexity upper bound ?

Time: 0.074 sec (SMT: 0.064 sec)

YES(?, 12*v_h + 8*v_h*v_w + 6*v_w + 12)

Initial complexity problem:
1:	T:
		(1, 1)    eval_mapped8_copy01_start(v_.02, v_2, v_b0, v_b1, v_count.0, v_draster, v_first_bit, v_h, v_sraster, v_w) -> eval_mapped8_copy01_bb0_in(v_.02, v_2, v_b0, v_b1, v_count.0, v_draster, v_first_bit, v_h, v_sraster, v_w)
		(?, 1)    eval_mapped8_copy01_bb0_in(v_.02, v_2, v_b0, v_b1, v_count.0, v_draster, v_first_bit, v_h, v_sraster, v_w) -> eval_mapped8_copy01_bb1_in(v_h, v_2, v_b0, v_b1, v_count.0, v_draster, v_first_bit, v_h, v_sraster, v_w)
		(?, 1)    eval_mapped8_copy01_bb1_in(v_.02, v_2, v_b0, v_b1, v_count.0, v_draster, v_first_bit, v_h, v_sraster, v_w) -> eval_mapped8_copy01_bb3_in(v_.02, v_.02 - 1, v_b0, v_b1, v_w, v_draster, v_first_bit, v_h, v_sraster, v_w) [ v_.02 > 0 ]
		(?, 1)    eval_mapped8_copy01_bb1_in(v_.02, v_2, v_b0, v_b1, v_count.0, v_draster, v_first_bit, v_h, v_sraster, v_w) -> eval_mapped8_copy01_stop(v_.02, v_2, v_b0, v_b1, v_count.0, v_draster, v_first_bit, v_h, v_sraster, v_w) [ v_.02 <= 0 ]
		(?, 1)    eval_mapped8_copy01_bb3_in(v_.02, v_2, v_b0, v_b1, v_count.0, v_draster, v_first_bit, v_h, v_sraster, v_w) -> eval_mapped8_copy01_bb5_in(v_.02, v_2, v_b0, v_b1, v_count.0, v_draster, v_first_bit, v_h, v_sraster, v_w)
		(?, 1)    eval_mapped8_copy01_bb5_in(v_.02, v_2, v_b0, v_b1, v_count.0, v_draster, v_first_bit, v_h, v_sraster, v_w) -> eval_mapped8_copy01_bb3_in(v_.02, v_2, v_b0, v_b1, v_count.0 - 1, v_draster, v_first_bit, v_h, v_sraster, v_w) [ v_count.0 - 1 > 0 ]
		(?, 1)    eval_mapped8_copy01_bb5_in(v_.02, v_2, v_b0, v_b1, v_count.0, v_draster, v_first_bit, v_h, v_sraster, v_w) -> eval_mapped8_copy01_bb1_in(v_2, v_2, v_b0, v_b1, v_count.0, v_draster, v_first_bit, v_h, v_sraster, v_w) [ v_count.0 - 1 <= 0 ]
	start location:	eval_mapped8_copy01_start
	leaf cost:	0

Slicing away variables that do not contribute to conditions from problem 1 leaves variables [v_.02, v_2, v_count.0, v_h, v_w].
We thus obtain the following problem:
2:	T:
		(?, 1)    eval_mapped8_copy01_bb5_in(v_.02, v_2, v_count.0, v_h, v_w) -> eval_mapped8_copy01_bb1_in(v_2, v_2, v_count.0, v_h, v_w) [ v_count.0 - 1 <= 0 ]
		(?, 1)    eval_mapped8_copy01_bb5_in(v_.02, v_2, v_count.0, v_h, v_w) -> eval_mapped8_copy01_bb3_in(v_.02, v_2, v_count.0 - 1, v_h, v_w) [ v_count.0 - 1 > 0 ]
		(?, 1)    eval_mapped8_copy01_bb3_in(v_.02, v_2, v_count.0, v_h, v_w) -> eval_mapped8_copy01_bb5_in(v_.02, v_2, v_count.0, v_h, v_w)
		(?, 1)    eval_mapped8_copy01_bb1_in(v_.02, v_2, v_count.0, v_h, v_w) -> eval_mapped8_copy01_stop(v_.02, v_2, v_count.0, v_h, v_w) [ v_.02 <= 0 ]
		(?, 1)    eval_mapped8_copy01_bb1_in(v_.02, v_2, v_count.0, v_h, v_w) -> eval_mapped8_copy01_bb3_in(v_.02, v_.02 - 1, v_w, v_h, v_w) [ v_.02 > 0 ]
		(?, 1)    eval_mapped8_copy01_bb0_in(v_.02, v_2, v_count.0, v_h, v_w) -> eval_mapped8_copy01_bb1_in(v_h, v_2, v_count.0, v_h, v_w)
		(1, 1)    eval_mapped8_copy01_start(v_.02, v_2, v_count.0, v_h, v_w) -> eval_mapped8_copy01_bb0_in(v_.02, v_2, v_count.0, v_h, v_w)
	start location:	eval_mapped8_copy01_start
	leaf cost:	0

Repeatedly removing leaves of the complexity graph in problem 2 produces the following problem:
3:	T:
		(?, 1)    eval_mapped8_copy01_bb5_in(v_.02, v_2, v_count.0, v_h, v_w) -> eval_mapped8_copy01_bb1_in(v_2, v_2, v_count.0, v_h, v_w) [ v_count.0 - 1 <= 0 ]
		(?, 1)    eval_mapped8_copy01_bb5_in(v_.02, v_2, v_count.0, v_h, v_w) -> eval_mapped8_copy01_bb3_in(v_.02, v_2, v_count.0 - 1, v_h, v_w) [ v_count.0 - 1 > 0 ]
		(?, 1)    eval_mapped8_copy01_bb3_in(v_.02, v_2, v_count.0, v_h, v_w) -> eval_mapped8_copy01_bb5_in(v_.02, v_2, v_count.0, v_h, v_w)
		(?, 1)    eval_mapped8_copy01_bb1_in(v_.02, v_2, v_count.0, v_h, v_w) -> eval_mapped8_copy01_bb3_in(v_.02, v_.02 - 1, v_w, v_h, v_w) [ v_.02 > 0 ]
		(?, 1)    eval_mapped8_copy01_bb0_in(v_.02, v_2, v_count.0, v_h, v_w) -> eval_mapped8_copy01_bb1_in(v_h, v_2, v_count.0, v_h, v_w)
		(1, 1)    eval_mapped8_copy01_start(v_.02, v_2, v_count.0, v_h, v_w) -> eval_mapped8_copy01_bb0_in(v_.02, v_2, v_count.0, v_h, v_w)
	start location:	eval_mapped8_copy01_start
	leaf cost:	1

Repeatedly propagating knowledge in problem 3 produces the following problem:
4:	T:
		(?, 1)    eval_mapped8_copy01_bb5_in(v_.02, v_2, v_count.0, v_h, v_w) -> eval_mapped8_copy01_bb1_in(v_2, v_2, v_count.0, v_h, v_w) [ v_count.0 - 1 <= 0 ]
		(?, 1)    eval_mapped8_copy01_bb5_in(v_.02, v_2, v_count.0, v_h, v_w) -> eval_mapped8_copy01_bb3_in(v_.02, v_2, v_count.0 - 1, v_h, v_w) [ v_count.0 - 1 > 0 ]
		(?, 1)    eval_mapped8_copy01_bb3_in(v_.02, v_2, v_count.0, v_h, v_w) -> eval_mapped8_copy01_bb5_in(v_.02, v_2, v_count.0, v_h, v_w)
		(?, 1)    eval_mapped8_copy01_bb1_in(v_.02, v_2, v_count.0, v_h, v_w) -> eval_mapped8_copy01_bb3_in(v_.02, v_.02 - 1, v_w, v_h, v_w) [ v_.02 > 0 ]
		(1, 1)    eval_mapped8_copy01_bb0_in(v_.02, v_2, v_count.0, v_h, v_w) -> eval_mapped8_copy01_bb1_in(v_h, v_2, v_count.0, v_h, v_w)
		(1, 1)    eval_mapped8_copy01_start(v_.02, v_2, v_count.0, v_h, v_w) -> eval_mapped8_copy01_bb0_in(v_.02, v_2, v_count.0, v_h, v_w)
	start location:	eval_mapped8_copy01_start
	leaf cost:	1

Separating problem 4 produces the isolated subproblem
10001:	T:
		(1, 0)    inner_10000_start_sep(v_.02, v_2, v_count.0, v_h, v_w) -> eval_mapped8_copy01_bb3_in(v_.02, v_.02 - 1, v_w, v_h, v_w)
		(?, 1)    eval_mapped8_copy01_bb3_in(v_.02, v_2, v_count.0, v_h, v_w) -> eval_mapped8_copy01_bb5_in(v_.02, v_2, v_count.0, v_h, v_w)
		(?, 1)    eval_mapped8_copy01_bb5_in(v_.02, v_2, v_count.0, v_h, v_w) -> eval_mapped8_copy01_bb3_in(v_.02, v_2, v_count.0 - 1, v_h, v_w) [ v_count.0 - 1 > 0 ]
	start location:	inner_10000_start_sep
	leaf cost:	0

=== begin of proof for isolated subproblem 10001 ===
	Initial complexity problem:
	10001:	T:
			(1, 0)    inner_10000_start_sep(v_.02, v_2, v_count.0, v_h, v_w) -> eval_mapped8_copy01_bb3_in(v_.02, v_.02 - 1, v_w, v_h, v_w)
			(?, 1)    eval_mapped8_copy01_bb3_in(v_.02, v_2, v_count.0, v_h, v_w) -> eval_mapped8_copy01_bb5_in(v_.02, v_2, v_count.0, v_h, v_w)
			(?, 1)    eval_mapped8_copy01_bb5_in(v_.02, v_2, v_count.0, v_h, v_w) -> eval_mapped8_copy01_bb3_in(v_.02, v_2, v_count.0 - 1, v_h, v_w) [ v_count.0 - 1 > 0 ]
		start location:	inner_10000_start_sep
		leaf cost:	0
	
	A polynomial rank function with
		Pol(inner_10000_start_sep) = V_5
		Pol(eval_mapped8_copy01_bb3_in) = V_3
		Pol(eval_mapped8_copy01_bb5_in) = V_3
	orients all transitions weakly and the transition
		eval_mapped8_copy01_bb5_in(v_.02, v_2, v_count.0, v_h, v_w) -> eval_mapped8_copy01_bb3_in(v_.02, v_2, v_count.0 - 1, v_h, v_w) [ v_count.0 - 1 > 0 ]
	strictly and produces the following problem:
	10002:	T:
			(1, 0)      inner_10000_start_sep(v_.02, v_2, v_count.0, v_h, v_w) -> eval_mapped8_copy01_bb3_in(v_.02, v_.02 - 1, v_w, v_h, v_w)
			(?, 1)      eval_mapped8_copy01_bb3_in(v_.02, v_2, v_count.0, v_h, v_w) -> eval_mapped8_copy01_bb5_in(v_.02, v_2, v_count.0, v_h, v_w)
			(v_w, 1)    eval_mapped8_copy01_bb5_in(v_.02, v_2, v_count.0, v_h, v_w) -> eval_mapped8_copy01_bb3_in(v_.02, v_2, v_count.0 - 1, v_h, v_w) [ v_count.0 - 1 > 0 ]
		start location:	inner_10000_start_sep
		leaf cost:	0
	
	Repeatedly propagating knowledge in problem 10002 produces the following problem:
	10003:	T:
			(1, 0)          inner_10000_start_sep(v_.02, v_2, v_count.0, v_h, v_w) -> eval_mapped8_copy01_bb3_in(v_.02, v_.02 - 1, v_w, v_h, v_w)
			(v_w + 1, 1)    eval_mapped8_copy01_bb3_in(v_.02, v_2, v_count.0, v_h, v_w) -> eval_mapped8_copy01_bb5_in(v_.02, v_2, v_count.0, v_h, v_w)
			(v_w, 1)        eval_mapped8_copy01_bb5_in(v_.02, v_2, v_count.0, v_h, v_w) -> eval_mapped8_copy01_bb3_in(v_.02, v_2, v_count.0 - 1, v_h, v_w) [ v_count.0 - 1 > 0 ]
		start location:	inner_10000_start_sep
		leaf cost:	0
=== end of proof for isolated subproblem 10001 ===

Applying the information from the isolated subproblem 10001 to problem 4 produces the following problem:
5:	T:
		(?, 0)            inner_10000_in_sep(v_.02, v_2, v_count.0, v_h, v_w) -> inner_10000_out_sep(v_.02, v_2, v_count.0, v_h, v_w)
		(?, 2*v_w + 1)    inner_10000_in_sep(v_.02, v_2, v_count.0, v_h, v_w) -> inner_10000_compl_sep(v_.02, v_2, v_count.0, v_h, v_w)
		(?, 0)            inner_10000_compl_sep(v_.02, v_2, v_count.0, v_h, v_w) -> inner_10000_out_sep(v_.02, v_2, v_count.0_sep, v_h, v_w) [ v_w >= 0 /\ v_count.0_sep >= 0 /\ v_count.0_sep <= v_w ]
		(?, 0)            inner_10000_compl_sep(v_.02, v_2, v_count.0, v_h, v_w) -> inner_10000_out_sep(v_.02, v_2, v_count.0_sep, v_h, v_w) [ v_w >= 0 /\ v_count.0_sep < 0 /\ -v_count.0_sep <= v_w ]
		(?, 0)            inner_10000_compl_sep(v_.02, v_2, v_count.0, v_h, v_w) -> inner_10000_out_sep(v_.02, v_2, v_count.0_sep, v_h, v_w) [ v_w < 0 /\ v_count.0_sep >= 0 /\ v_count.0_sep <= -v_w ]
		(?, 0)            inner_10000_compl_sep(v_.02, v_2, v_count.0, v_h, v_w) -> inner_10000_out_sep(v_.02, v_2, v_count.0_sep, v_h, v_w) [ v_w < 0 /\ v_count.0_sep < 0 /\ -v_count.0_sep <= -v_w ]
		(?, 1)            inner_10000_out_sep(v_.02, v_2, v_count.0, v_h, v_w) -> eval_mapped8_copy01_bb1_in(v_2, v_2, v_count.0, v_h, v_w) [ v_count.0 - 1 <= 0 ]
		(?, 1)            eval_mapped8_copy01_bb1_in(v_.02, v_2, v_count.0, v_h, v_w) -> inner_10000_in_sep(v_.02, v_.02 - 1, v_w, v_h, v_w) [ v_.02 > 0 ]
		(1, 1)            eval_mapped8_copy01_start(v_.02, v_2, v_count.0, v_h, v_w) -> eval_mapped8_copy01_bb0_in(v_.02, v_2, v_count.0, v_h, v_w)
		(1, 1)            eval_mapped8_copy01_bb0_in(v_.02, v_2, v_count.0, v_h, v_w) -> eval_mapped8_copy01_bb1_in(v_h, v_2, v_count.0, v_h, v_w)
	start location:	eval_mapped8_copy01_start
	leaf cost:	1

Applied AI with 'oct' on problem 5 to obtain the following invariants:
  For symbol eval_mapped8_copy01_bb1_in: -X_1 + X_4 >= 0
  For symbol inner_10000_compl_sep: X_3 - X_5 >= 0 /\ -X_3 + X_5 >= 0 /\ X_4 - 1 >= 0 /\ X_2 + X_4 - 1 >= 0 /\ -X_2 + X_4 - 1 >= 0 /\ X_1 + X_4 - 2 >= 0 /\ -X_1 + X_4 >= 0 /\ X_1 - X_2 - 1 >= 0 /\ X_2 >= 0 /\ X_1 + X_2 - 1 >= 0 /\ -X_1 + X_2 + 1 >= 0 /\ X_1 - 1 >= 0
  For symbol inner_10000_in_sep: X_3 - X_5 >= 0 /\ -X_3 + X_5 >= 0 /\ X_4 - 1 >= 0 /\ X_2 + X_4 - 1 >= 0 /\ -X_2 + X_4 - 1 >= 0 /\ X_1 + X_4 - 2 >= 0 /\ -X_1 + X_4 >= 0 /\ X_1 - X_2 - 1 >= 0 /\ X_2 >= 0 /\ X_1 + X_2 - 1 >= 0 /\ -X_1 + X_2 + 1 >= 0 /\ X_1 - 1 >= 0
  For symbol inner_10000_out_sep: X_4 - 1 >= 0 /\ X_2 + X_4 - 1 >= 0 /\ -X_2 + X_4 - 1 >= 0 /\ X_1 + X_4 - 2 >= 0 /\ -X_1 + X_4 >= 0 /\ X_1 - X_2 - 1 >= 0 /\ X_2 >= 0 /\ X_1 + X_2 - 1 >= 0 /\ -X_1 + X_2 + 1 >= 0 /\ X_1 - 1 >= 0


This yielded the following problem:
6:	T:
		(1, 1)            eval_mapped8_copy01_bb0_in(v_.02, v_2, v_count.0, v_h, v_w) -> eval_mapped8_copy01_bb1_in(v_h, v_2, v_count.0, v_h, v_w)
		(1, 1)            eval_mapped8_copy01_start(v_.02, v_2, v_count.0, v_h, v_w) -> eval_mapped8_copy01_bb0_in(v_.02, v_2, v_count.0, v_h, v_w)
		(?, 1)            eval_mapped8_copy01_bb1_in(v_.02, v_2, v_count.0, v_h, v_w) -> inner_10000_in_sep(v_.02, v_.02 - 1, v_w, v_h, v_w) [ -v_.02 + v_h >= 0 /\ v_.02 > 0 ]
		(?, 1)            inner_10000_out_sep(v_.02, v_2, v_count.0, v_h, v_w) -> eval_mapped8_copy01_bb1_in(v_2, v_2, v_count.0, v_h, v_w) [ v_h - 1 >= 0 /\ v_2 + v_h - 1 >= 0 /\ -v_2 + v_h - 1 >= 0 /\ v_.02 + v_h - 2 >= 0 /\ -v_.02 + v_h >= 0 /\ v_.02 - v_2 - 1 >= 0 /\ v_2 >= 0 /\ v_.02 + v_2 - 1 >= 0 /\ -v_.02 + v_2 + 1 >= 0 /\ v_.02 - 1 >= 0 /\ v_count.0 - 1 <= 0 ]
		(?, 0)            inner_10000_compl_sep(v_.02, v_2, v_count.0, v_h, v_w) -> inner_10000_out_sep(v_.02, v_2, v_count.0_sep, v_h, v_w) [ v_count.0 - v_w >= 0 /\ -v_count.0 + v_w >= 0 /\ v_h - 1 >= 0 /\ v_2 + v_h - 1 >= 0 /\ -v_2 + v_h - 1 >= 0 /\ v_.02 + v_h - 2 >= 0 /\ -v_.02 + v_h >= 0 /\ v_.02 - v_2 - 1 >= 0 /\ v_2 >= 0 /\ v_.02 + v_2 - 1 >= 0 /\ -v_.02 + v_2 + 1 >= 0 /\ v_.02 - 1 >= 0 /\ v_w < 0 /\ v_count.0_sep < 0 /\ -v_count.0_sep <= -v_w ]
		(?, 0)            inner_10000_compl_sep(v_.02, v_2, v_count.0, v_h, v_w) -> inner_10000_out_sep(v_.02, v_2, v_count.0_sep, v_h, v_w) [ v_count.0 - v_w >= 0 /\ -v_count.0 + v_w >= 0 /\ v_h - 1 >= 0 /\ v_2 + v_h - 1 >= 0 /\ -v_2 + v_h - 1 >= 0 /\ v_.02 + v_h - 2 >= 0 /\ -v_.02 + v_h >= 0 /\ v_.02 - v_2 - 1 >= 0 /\ v_2 >= 0 /\ v_.02 + v_2 - 1 >= 0 /\ -v_.02 + v_2 + 1 >= 0 /\ v_.02 - 1 >= 0 /\ v_w < 0 /\ v_count.0_sep >= 0 /\ v_count.0_sep <= -v_w ]
		(?, 0)            inner_10000_compl_sep(v_.02, v_2, v_count.0, v_h, v_w) -> inner_10000_out_sep(v_.02, v_2, v_count.0_sep, v_h, v_w) [ v_count.0 - v_w >= 0 /\ -v_count.0 + v_w >= 0 /\ v_h - 1 >= 0 /\ v_2 + v_h - 1 >= 0 /\ -v_2 + v_h - 1 >= 0 /\ v_.02 + v_h - 2 >= 0 /\ -v_.02 + v_h >= 0 /\ v_.02 - v_2 - 1 >= 0 /\ v_2 >= 0 /\ v_.02 + v_2 - 1 >= 0 /\ -v_.02 + v_2 + 1 >= 0 /\ v_.02 - 1 >= 0 /\ v_w >= 0 /\ v_count.0_sep < 0 /\ -v_count.0_sep <= v_w ]
		(?, 0)            inner_10000_compl_sep(v_.02, v_2, v_count.0, v_h, v_w) -> inner_10000_out_sep(v_.02, v_2, v_count.0_sep, v_h, v_w) [ v_count.0 - v_w >= 0 /\ -v_count.0 + v_w >= 0 /\ v_h - 1 >= 0 /\ v_2 + v_h - 1 >= 0 /\ -v_2 + v_h - 1 >= 0 /\ v_.02 + v_h - 2 >= 0 /\ -v_.02 + v_h >= 0 /\ v_.02 - v_2 - 1 >= 0 /\ v_2 >= 0 /\ v_.02 + v_2 - 1 >= 0 /\ -v_.02 + v_2 + 1 >= 0 /\ v_.02 - 1 >= 0 /\ v_w >= 0 /\ v_count.0_sep >= 0 /\ v_count.0_sep <= v_w ]
		(?, 2*v_w + 1)    inner_10000_in_sep(v_.02, v_2, v_count.0, v_h, v_w) -> inner_10000_compl_sep(v_.02, v_2, v_count.0, v_h, v_w) [ v_count.0 - v_w >= 0 /\ -v_count.0 + v_w >= 0 /\ v_h - 1 >= 0 /\ v_2 + v_h - 1 >= 0 /\ -v_2 + v_h - 1 >= 0 /\ v_.02 + v_h - 2 >= 0 /\ -v_.02 + v_h >= 0 /\ v_.02 - v_2 - 1 >= 0 /\ v_2 >= 0 /\ v_.02 + v_2 - 1 >= 0 /\ -v_.02 + v_2 + 1 >= 0 /\ v_.02 - 1 >= 0 ]
		(?, 0)            inner_10000_in_sep(v_.02, v_2, v_count.0, v_h, v_w) -> inner_10000_out_sep(v_.02, v_2, v_count.0, v_h, v_w) [ v_count.0 - v_w >= 0 /\ -v_count.0 + v_w >= 0 /\ v_h - 1 >= 0 /\ v_2 + v_h - 1 >= 0 /\ -v_2 + v_h - 1 >= 0 /\ v_.02 + v_h - 2 >= 0 /\ -v_.02 + v_h >= 0 /\ v_.02 - v_2 - 1 >= 0 /\ v_2 >= 0 /\ v_.02 + v_2 - 1 >= 0 /\ -v_.02 + v_2 + 1 >= 0 /\ v_.02 - 1 >= 0 ]
	start location:	eval_mapped8_copy01_start
	leaf cost:	1

A polynomial rank function with
	Pol(eval_mapped8_copy01_bb0_in) = 4*V_4 + 3
	Pol(eval_mapped8_copy01_bb1_in) = 4*V_1 + 3
	Pol(eval_mapped8_copy01_start) = 4*V_4 + 3
	Pol(inner_10000_in_sep) = 4*V_2 + 6
	Pol(inner_10000_out_sep) = 4*V_1
	Pol(inner_10000_compl_sep) = 4*V_2 + 5
orients all transitions weakly and the transitions
	inner_10000_out_sep(v_.02, v_2, v_count.0, v_h, v_w) -> eval_mapped8_copy01_bb1_in(v_2, v_2, v_count.0, v_h, v_w) [ v_h - 1 >= 0 /\ v_2 + v_h - 1 >= 0 /\ -v_2 + v_h - 1 >= 0 /\ v_.02 + v_h - 2 >= 0 /\ -v_.02 + v_h >= 0 /\ v_.02 - v_2 - 1 >= 0 /\ v_2 >= 0 /\ v_.02 + v_2 - 1 >= 0 /\ -v_.02 + v_2 + 1 >= 0 /\ v_.02 - 1 >= 0 /\ v_count.0 - 1 <= 0 ]
	inner_10000_in_sep(v_.02, v_2, v_count.0, v_h, v_w) -> inner_10000_out_sep(v_.02, v_2, v_count.0, v_h, v_w) [ v_count.0 - v_w >= 0 /\ -v_count.0 + v_w >= 0 /\ v_h - 1 >= 0 /\ v_2 + v_h - 1 >= 0 /\ -v_2 + v_h - 1 >= 0 /\ v_.02 + v_h - 2 >= 0 /\ -v_.02 + v_h >= 0 /\ v_.02 - v_2 - 1 >= 0 /\ v_2 >= 0 /\ v_.02 + v_2 - 1 >= 0 /\ -v_.02 + v_2 + 1 >= 0 /\ v_.02 - 1 >= 0 ]
	inner_10000_in_sep(v_.02, v_2, v_count.0, v_h, v_w) -> inner_10000_compl_sep(v_.02, v_2, v_count.0, v_h, v_w) [ v_count.0 - v_w >= 0 /\ -v_count.0 + v_w >= 0 /\ v_h - 1 >= 0 /\ v_2 + v_h - 1 >= 0 /\ -v_2 + v_h - 1 >= 0 /\ v_.02 + v_h - 2 >= 0 /\ -v_.02 + v_h >= 0 /\ v_.02 - v_2 - 1 >= 0 /\ v_2 >= 0 /\ v_.02 + v_2 - 1 >= 0 /\ -v_.02 + v_2 + 1 >= 0 /\ v_.02 - 1 >= 0 ]
	inner_10000_compl_sep(v_.02, v_2, v_count.0, v_h, v_w) -> inner_10000_out_sep(v_.02, v_2, v_count.0_sep, v_h, v_w) [ v_count.0 - v_w >= 0 /\ -v_count.0 + v_w >= 0 /\ v_h - 1 >= 0 /\ v_2 + v_h - 1 >= 0 /\ -v_2 + v_h - 1 >= 0 /\ v_.02 + v_h - 2 >= 0 /\ -v_.02 + v_h >= 0 /\ v_.02 - v_2 - 1 >= 0 /\ v_2 >= 0 /\ v_.02 + v_2 - 1 >= 0 /\ -v_.02 + v_2 + 1 >= 0 /\ v_.02 - 1 >= 0 /\ v_w < 0 /\ v_count.0_sep < 0 /\ -v_count.0_sep <= -v_w ]
	inner_10000_compl_sep(v_.02, v_2, v_count.0, v_h, v_w) -> inner_10000_out_sep(v_.02, v_2, v_count.0_sep, v_h, v_w) [ v_count.0 - v_w >= 0 /\ -v_count.0 + v_w >= 0 /\ v_h - 1 >= 0 /\ v_2 + v_h - 1 >= 0 /\ -v_2 + v_h - 1 >= 0 /\ v_.02 + v_h - 2 >= 0 /\ -v_.02 + v_h >= 0 /\ v_.02 - v_2 - 1 >= 0 /\ v_2 >= 0 /\ v_.02 + v_2 - 1 >= 0 /\ -v_.02 + v_2 + 1 >= 0 /\ v_.02 - 1 >= 0 /\ v_w < 0 /\ v_count.0_sep >= 0 /\ v_count.0_sep <= -v_w ]
	inner_10000_compl_sep(v_.02, v_2, v_count.0, v_h, v_w) -> inner_10000_out_sep(v_.02, v_2, v_count.0_sep, v_h, v_w) [ v_count.0 - v_w >= 0 /\ -v_count.0 + v_w >= 0 /\ v_h - 1 >= 0 /\ v_2 + v_h - 1 >= 0 /\ -v_2 + v_h - 1 >= 0 /\ v_.02 + v_h - 2 >= 0 /\ -v_.02 + v_h >= 0 /\ v_.02 - v_2 - 1 >= 0 /\ v_2 >= 0 /\ v_.02 + v_2 - 1 >= 0 /\ -v_.02 + v_2 + 1 >= 0 /\ v_.02 - 1 >= 0 /\ v_w >= 0 /\ v_count.0_sep < 0 /\ -v_count.0_sep <= v_w ]
	inner_10000_compl_sep(v_.02, v_2, v_count.0, v_h, v_w) -> inner_10000_out_sep(v_.02, v_2, v_count.0_sep, v_h, v_w) [ v_count.0 - v_w >= 0 /\ -v_count.0 + v_w >= 0 /\ v_h - 1 >= 0 /\ v_2 + v_h - 1 >= 0 /\ -v_2 + v_h - 1 >= 0 /\ v_.02 + v_h - 2 >= 0 /\ -v_.02 + v_h >= 0 /\ v_.02 - v_2 - 1 >= 0 /\ v_2 >= 0 /\ v_.02 + v_2 - 1 >= 0 /\ -v_.02 + v_2 + 1 >= 0 /\ v_.02 - 1 >= 0 /\ v_w >= 0 /\ v_count.0_sep >= 0 /\ v_count.0_sep <= v_w ]
	eval_mapped8_copy01_bb1_in(v_.02, v_2, v_count.0, v_h, v_w) -> inner_10000_in_sep(v_.02, v_.02 - 1, v_w, v_h, v_w) [ -v_.02 + v_h >= 0 /\ v_.02 > 0 ]
strictly and produces the following problem:
7:	T:
		(1, 1)                    eval_mapped8_copy01_bb0_in(v_.02, v_2, v_count.0, v_h, v_w) -> eval_mapped8_copy01_bb1_in(v_h, v_2, v_count.0, v_h, v_w)
		(1, 1)                    eval_mapped8_copy01_start(v_.02, v_2, v_count.0, v_h, v_w) -> eval_mapped8_copy01_bb0_in(v_.02, v_2, v_count.0, v_h, v_w)
		(4*v_h + 3, 1)            eval_mapped8_copy01_bb1_in(v_.02, v_2, v_count.0, v_h, v_w) -> inner_10000_in_sep(v_.02, v_.02 - 1, v_w, v_h, v_w) [ -v_.02 + v_h >= 0 /\ v_.02 > 0 ]
		(4*v_h + 3, 1)            inner_10000_out_sep(v_.02, v_2, v_count.0, v_h, v_w) -> eval_mapped8_copy01_bb1_in(v_2, v_2, v_count.0, v_h, v_w) [ v_h - 1 >= 0 /\ v_2 + v_h - 1 >= 0 /\ -v_2 + v_h - 1 >= 0 /\ v_.02 + v_h - 2 >= 0 /\ -v_.02 + v_h >= 0 /\ v_.02 - v_2 - 1 >= 0 /\ v_2 >= 0 /\ v_.02 + v_2 - 1 >= 0 /\ -v_.02 + v_2 + 1 >= 0 /\ v_.02 - 1 >= 0 /\ v_count.0 - 1 <= 0 ]
		(4*v_h + 3, 0)            inner_10000_compl_sep(v_.02, v_2, v_count.0, v_h, v_w) -> inner_10000_out_sep(v_.02, v_2, v_count.0_sep, v_h, v_w) [ v_count.0 - v_w >= 0 /\ -v_count.0 + v_w >= 0 /\ v_h - 1 >= 0 /\ v_2 + v_h - 1 >= 0 /\ -v_2 + v_h - 1 >= 0 /\ v_.02 + v_h - 2 >= 0 /\ -v_.02 + v_h >= 0 /\ v_.02 - v_2 - 1 >= 0 /\ v_2 >= 0 /\ v_.02 + v_2 - 1 >= 0 /\ -v_.02 + v_2 + 1 >= 0 /\ v_.02 - 1 >= 0 /\ v_w < 0 /\ v_count.0_sep < 0 /\ -v_count.0_sep <= -v_w ]
		(4*v_h + 3, 0)            inner_10000_compl_sep(v_.02, v_2, v_count.0, v_h, v_w) -> inner_10000_out_sep(v_.02, v_2, v_count.0_sep, v_h, v_w) [ v_count.0 - v_w >= 0 /\ -v_count.0 + v_w >= 0 /\ v_h - 1 >= 0 /\ v_2 + v_h - 1 >= 0 /\ -v_2 + v_h - 1 >= 0 /\ v_.02 + v_h - 2 >= 0 /\ -v_.02 + v_h >= 0 /\ v_.02 - v_2 - 1 >= 0 /\ v_2 >= 0 /\ v_.02 + v_2 - 1 >= 0 /\ -v_.02 + v_2 + 1 >= 0 /\ v_.02 - 1 >= 0 /\ v_w < 0 /\ v_count.0_sep >= 0 /\ v_count.0_sep <= -v_w ]
		(4*v_h + 3, 0)            inner_10000_compl_sep(v_.02, v_2, v_count.0, v_h, v_w) -> inner_10000_out_sep(v_.02, v_2, v_count.0_sep, v_h, v_w) [ v_count.0 - v_w >= 0 /\ -v_count.0 + v_w >= 0 /\ v_h - 1 >= 0 /\ v_2 + v_h - 1 >= 0 /\ -v_2 + v_h - 1 >= 0 /\ v_.02 + v_h - 2 >= 0 /\ -v_.02 + v_h >= 0 /\ v_.02 - v_2 - 1 >= 0 /\ v_2 >= 0 /\ v_.02 + v_2 - 1 >= 0 /\ -v_.02 + v_2 + 1 >= 0 /\ v_.02 - 1 >= 0 /\ v_w >= 0 /\ v_count.0_sep < 0 /\ -v_count.0_sep <= v_w ]
		(4*v_h + 3, 0)            inner_10000_compl_sep(v_.02, v_2, v_count.0, v_h, v_w) -> inner_10000_out_sep(v_.02, v_2, v_count.0_sep, v_h, v_w) [ v_count.0 - v_w >= 0 /\ -v_count.0 + v_w >= 0 /\ v_h - 1 >= 0 /\ v_2 + v_h - 1 >= 0 /\ -v_2 + v_h - 1 >= 0 /\ v_.02 + v_h - 2 >= 0 /\ -v_.02 + v_h >= 0 /\ v_.02 - v_2 - 1 >= 0 /\ v_2 >= 0 /\ v_.02 + v_2 - 1 >= 0 /\ -v_.02 + v_2 + 1 >= 0 /\ v_.02 - 1 >= 0 /\ v_w >= 0 /\ v_count.0_sep >= 0 /\ v_count.0_sep <= v_w ]
		(4*v_h + 3, 2*v_w + 1)    inner_10000_in_sep(v_.02, v_2, v_count.0, v_h, v_w) -> inner_10000_compl_sep(v_.02, v_2, v_count.0, v_h, v_w) [ v_count.0 - v_w >= 0 /\ -v_count.0 + v_w >= 0 /\ v_h - 1 >= 0 /\ v_2 + v_h - 1 >= 0 /\ -v_2 + v_h - 1 >= 0 /\ v_.02 + v_h - 2 >= 0 /\ -v_.02 + v_h >= 0 /\ v_.02 - v_2 - 1 >= 0 /\ v_2 >= 0 /\ v_.02 + v_2 - 1 >= 0 /\ -v_.02 + v_2 + 1 >= 0 /\ v_.02 - 1 >= 0 ]
		(4*v_h + 3, 0)            inner_10000_in_sep(v_.02, v_2, v_count.0, v_h, v_w) -> inner_10000_out_sep(v_.02, v_2, v_count.0, v_h, v_w) [ v_count.0 - v_w >= 0 /\ -v_count.0 + v_w >= 0 /\ v_h - 1 >= 0 /\ v_2 + v_h - 1 >= 0 /\ -v_2 + v_h - 1 >= 0 /\ v_.02 + v_h - 2 >= 0 /\ -v_.02 + v_h >= 0 /\ v_.02 - v_2 - 1 >= 0 /\ v_2 >= 0 /\ v_.02 + v_2 - 1 >= 0 /\ -v_.02 + v_2 + 1 >= 0 /\ v_.02 - 1 >= 0 ]
	start location:	eval_mapped8_copy01_start
	leaf cost:	1

Complexity upper bound 12*v_h + 8*v_h*v_w + 6*v_w + 12

Time: 0.569 sec (SMT: 0.457 sec)

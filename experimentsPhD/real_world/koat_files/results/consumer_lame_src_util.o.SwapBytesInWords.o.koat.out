YES(?, v_words + 3)

Initial complexity problem:
1:	T:
		(1, 1)    eval_SwapBytesInWords_start(v_i.0, v_words) -> eval_SwapBytesInWords_bb0_in(v_i.0, v_words)
		(?, 1)    eval_SwapBytesInWords_bb0_in(v_i.0, v_words) -> eval_SwapBytesInWords_bb1_in(0, v_words)
		(?, 1)    eval_SwapBytesInWords_bb1_in(v_i.0, v_words) -> eval_SwapBytesInWords_bb1_in(v_i.0 + 1, v_words) [ v_i.0 < v_words ]
		(?, 1)    eval_SwapBytesInWords_bb1_in(v_i.0, v_words) -> eval_SwapBytesInWords_stop(v_i.0, v_words) [ v_i.0 >= v_words ]
	start location:	eval_SwapBytesInWords_start
	leaf cost:	0

Repeatedly removing leaves of the complexity graph in problem 1 produces the following problem:
2:	T:
		(1, 1)    eval_SwapBytesInWords_start(v_i.0, v_words) -> eval_SwapBytesInWords_bb0_in(v_i.0, v_words)
		(?, 1)    eval_SwapBytesInWords_bb0_in(v_i.0, v_words) -> eval_SwapBytesInWords_bb1_in(0, v_words)
		(?, 1)    eval_SwapBytesInWords_bb1_in(v_i.0, v_words) -> eval_SwapBytesInWords_bb1_in(v_i.0 + 1, v_words) [ v_i.0 < v_words ]
	start location:	eval_SwapBytesInWords_start
	leaf cost:	1

Repeatedly propagating knowledge in problem 2 produces the following problem:
3:	T:
		(1, 1)    eval_SwapBytesInWords_start(v_i.0, v_words) -> eval_SwapBytesInWords_bb0_in(v_i.0, v_words)
		(1, 1)    eval_SwapBytesInWords_bb0_in(v_i.0, v_words) -> eval_SwapBytesInWords_bb1_in(0, v_words)
		(?, 1)    eval_SwapBytesInWords_bb1_in(v_i.0, v_words) -> eval_SwapBytesInWords_bb1_in(v_i.0 + 1, v_words) [ v_i.0 < v_words ]
	start location:	eval_SwapBytesInWords_start
	leaf cost:	1

A polynomial rank function with
	Pol(eval_SwapBytesInWords_start) = V_2
	Pol(eval_SwapBytesInWords_bb0_in) = V_2
	Pol(eval_SwapBytesInWords_bb1_in) = -V_1 + V_2
orients all transitions weakly and the transition
	eval_SwapBytesInWords_bb1_in(v_i.0, v_words) -> eval_SwapBytesInWords_bb1_in(v_i.0 + 1, v_words) [ v_i.0 < v_words ]
strictly and produces the following problem:
4:	T:
		(1, 1)          eval_SwapBytesInWords_start(v_i.0, v_words) -> eval_SwapBytesInWords_bb0_in(v_i.0, v_words)
		(1, 1)          eval_SwapBytesInWords_bb0_in(v_i.0, v_words) -> eval_SwapBytesInWords_bb1_in(0, v_words)
		(v_words, 1)    eval_SwapBytesInWords_bb1_in(v_i.0, v_words) -> eval_SwapBytesInWords_bb1_in(v_i.0 + 1, v_words) [ v_i.0 < v_words ]
	start location:	eval_SwapBytesInWords_start
	leaf cost:	1

Complexity upper bound v_words + 3

Time: 0.016 sec (SMT: 0.015 sec)

YES(?, 9*v_count + 11)

Initial complexity problem:
1:	T:
		(1, 1)    eval_cie_prepare_caches_start(v_count, v_i.0) -> Com_1(eval_cie_prepare_caches_bb0_in(v_count, v_i.0))
		(?, 1)    eval_cie_prepare_caches_bb0_in(v_count, v_i.0) -> Com_1(eval_cie_prepare_caches_bb1_in(v_count, 0))
		(?, 1)    eval_cie_prepare_caches_bb1_in(v_count, v_i.0) -> Com_1(eval_cie_prepare_caches_3(v_count, v_i.0)) [ v_i.0 < v_count ]
		(?, 1)    eval_cie_prepare_caches_bb1_in(v_count, v_i.0) -> Com_1(eval_cie_prepare_caches_bb4_in(v_count, v_i.0)) [ v_i.0 >= v_count ]
		(?, 1)    eval_cie_prepare_caches_3(v_count, v_i.0) -> Com_2(eval_cie_prepare_cache_start(v_count, v_i.0), eval_cie_prepare_caches_4(v_count, v_i.0))
		(?, 1)    eval_cie_prepare_caches_4(v_count, v_i.0) -> Com_1(eval_cie_prepare_caches_bb4_in(v_count, v_i.0))
		(?, 1)    eval_cie_prepare_caches_4(v_count, v_i.0) -> Com_1(eval_cie_prepare_caches_bb1_in(v_count, v_i.0 + 1))
		(?, 1)    eval_cie_prepare_caches_bb4_in(v_count, v_i.0) -> Com_1(eval_cie_prepare_caches_stop(v_count, v_i.0))
	start location:	eval_cie_prepare_caches_start
	leaf cost:	0

Repeatedly propagating knowledge in problem 1 produces the following problem:
2:	T:
		(1, 1)    eval_cie_prepare_caches_start(v_count, v_i.0) -> Com_1(eval_cie_prepare_caches_bb0_in(v_count, v_i.0))
		(1, 1)    eval_cie_prepare_caches_bb0_in(v_count, v_i.0) -> Com_1(eval_cie_prepare_caches_bb1_in(v_count, 0))
		(?, 1)    eval_cie_prepare_caches_bb1_in(v_count, v_i.0) -> Com_1(eval_cie_prepare_caches_3(v_count, v_i.0)) [ v_i.0 < v_count ]
		(?, 1)    eval_cie_prepare_caches_bb1_in(v_count, v_i.0) -> Com_1(eval_cie_prepare_caches_bb4_in(v_count, v_i.0)) [ v_i.0 >= v_count ]
		(?, 1)    eval_cie_prepare_caches_3(v_count, v_i.0) -> Com_2(eval_cie_prepare_cache_start(v_count, v_i.0), eval_cie_prepare_caches_4(v_count, v_i.0))
		(?, 1)    eval_cie_prepare_caches_4(v_count, v_i.0) -> Com_1(eval_cie_prepare_caches_bb4_in(v_count, v_i.0))
		(?, 1)    eval_cie_prepare_caches_4(v_count, v_i.0) -> Com_1(eval_cie_prepare_caches_bb1_in(v_count, v_i.0 + 1))
		(?, 1)    eval_cie_prepare_caches_bb4_in(v_count, v_i.0) -> Com_1(eval_cie_prepare_caches_stop(v_count, v_i.0))
	start location:	eval_cie_prepare_caches_start
	leaf cost:	0

A polynomial rank function with
	Pol(eval_cie_prepare_caches_start) = 2
	Pol(eval_cie_prepare_caches_bb0_in) = 2
	Pol(eval_cie_prepare_caches_bb1_in) = 2
	Pol(eval_cie_prepare_caches_3) = 2
	Pol(eval_cie_prepare_caches_bb4_in) = 1
	Pol(eval_cie_prepare_cache_start) = 0
	Pol(eval_cie_prepare_caches_4) = 2
	Pol(eval_cie_prepare_caches_stop) = 0
orients all transitions weakly and the transitions
	eval_cie_prepare_caches_bb4_in(v_count, v_i.0) -> Com_1(eval_cie_prepare_caches_stop(v_count, v_i.0))
	eval_cie_prepare_caches_bb1_in(v_count, v_i.0) -> Com_1(eval_cie_prepare_caches_bb4_in(v_count, v_i.0)) [ v_i.0 >= v_count ]
	eval_cie_prepare_caches_4(v_count, v_i.0) -> Com_1(eval_cie_prepare_caches_bb4_in(v_count, v_i.0))
strictly and produces the following problem:
3:	T:
		(1, 1)    eval_cie_prepare_caches_start(v_count, v_i.0) -> Com_1(eval_cie_prepare_caches_bb0_in(v_count, v_i.0))
		(1, 1)    eval_cie_prepare_caches_bb0_in(v_count, v_i.0) -> Com_1(eval_cie_prepare_caches_bb1_in(v_count, 0))
		(?, 1)    eval_cie_prepare_caches_bb1_in(v_count, v_i.0) -> Com_1(eval_cie_prepare_caches_3(v_count, v_i.0)) [ v_i.0 < v_count ]
		(2, 1)    eval_cie_prepare_caches_bb1_in(v_count, v_i.0) -> Com_1(eval_cie_prepare_caches_bb4_in(v_count, v_i.0)) [ v_i.0 >= v_count ]
		(?, 1)    eval_cie_prepare_caches_3(v_count, v_i.0) -> Com_2(eval_cie_prepare_cache_start(v_count, v_i.0), eval_cie_prepare_caches_4(v_count, v_i.0))
		(2, 1)    eval_cie_prepare_caches_4(v_count, v_i.0) -> Com_1(eval_cie_prepare_caches_bb4_in(v_count, v_i.0))
		(?, 1)    eval_cie_prepare_caches_4(v_count, v_i.0) -> Com_1(eval_cie_prepare_caches_bb1_in(v_count, v_i.0 + 1))
		(2, 1)    eval_cie_prepare_caches_bb4_in(v_count, v_i.0) -> Com_1(eval_cie_prepare_caches_stop(v_count, v_i.0))
	start location:	eval_cie_prepare_caches_start
	leaf cost:	0

Applied AI with 'oct' on problem 3 to obtain the following invariants:
  For symbol eval_cie_prepare_caches_3: X_1 - X_2 - 1 >= 0 /\ X_2 >= 0 /\ X_1 + X_2 - 1 >= 0 /\ X_1 - 1 >= 0
  For symbol eval_cie_prepare_caches_4: X_1 - X_2 - 1 >= 0 /\ X_2 >= 0 /\ X_1 + X_2 - 1 >= 0 /\ X_1 - 1 >= 0
  For symbol eval_cie_prepare_caches_bb1_in: X_2 >= 0
  For symbol eval_cie_prepare_caches_bb4_in: X_2 >= 0


This yielded the following problem:
4:	T:
		(2, 1)    eval_cie_prepare_caches_bb4_in(v_count, v_i.0) -> Com_1(eval_cie_prepare_caches_stop(v_count, v_i.0)) [ v_i.0 >= 0 ]
		(?, 1)    eval_cie_prepare_caches_4(v_count, v_i.0) -> Com_1(eval_cie_prepare_caches_bb1_in(v_count, v_i.0 + 1)) [ v_count - v_i.0 - 1 >= 0 /\ v_i.0 >= 0 /\ v_count + v_i.0 - 1 >= 0 /\ v_count - 1 >= 0 ]
		(2, 1)    eval_cie_prepare_caches_4(v_count, v_i.0) -> Com_1(eval_cie_prepare_caches_bb4_in(v_count, v_i.0)) [ v_count - v_i.0 - 1 >= 0 /\ v_i.0 >= 0 /\ v_count + v_i.0 - 1 >= 0 /\ v_count - 1 >= 0 ]
		(?, 1)    eval_cie_prepare_caches_3(v_count, v_i.0) -> Com_2(eval_cie_prepare_cache_start(v_count, v_i.0), eval_cie_prepare_caches_4(v_count, v_i.0)) [ v_count - v_i.0 - 1 >= 0 /\ v_i.0 >= 0 /\ v_count + v_i.0 - 1 >= 0 /\ v_count - 1 >= 0 ]
		(2, 1)    eval_cie_prepare_caches_bb1_in(v_count, v_i.0) -> Com_1(eval_cie_prepare_caches_bb4_in(v_count, v_i.0)) [ v_i.0 >= 0 /\ v_i.0 >= v_count ]
		(?, 1)    eval_cie_prepare_caches_bb1_in(v_count, v_i.0) -> Com_1(eval_cie_prepare_caches_3(v_count, v_i.0)) [ v_i.0 >= 0 /\ v_i.0 < v_count ]
		(1, 1)    eval_cie_prepare_caches_bb0_in(v_count, v_i.0) -> Com_1(eval_cie_prepare_caches_bb1_in(v_count, 0))
		(1, 1)    eval_cie_prepare_caches_start(v_count, v_i.0) -> Com_1(eval_cie_prepare_caches_bb0_in(v_count, v_i.0))
	start location:	eval_cie_prepare_caches_start
	leaf cost:	0

A polynomial rank function with
	Pol(eval_cie_prepare_caches_bb4_in) = 3*V_1 - 3*V_2 - 1
	Pol(eval_cie_prepare_caches_stop) = 3*V_1 - 3*V_2 - 1
	Pol(eval_cie_prepare_caches_4) = 3*V_1 - 3*V_2 - 1
	Pol(eval_cie_prepare_caches_bb1_in) = 3*V_1 - 3*V_2 + 1
	Pol(eval_cie_prepare_caches_3) = 3*V_1 - 3*V_2
	Pol(eval_cie_prepare_cache_start) = -3*V_2
	Pol(eval_cie_prepare_caches_bb0_in) = 3*V_1 + 1
	Pol(eval_cie_prepare_caches_start) = 3*V_1 + 1
orients all transitions weakly and the transitions
	eval_cie_prepare_caches_bb1_in(v_count, v_i.0) -> Com_1(eval_cie_prepare_caches_3(v_count, v_i.0)) [ v_i.0 >= 0 /\ v_i.0 < v_count ]
	eval_cie_prepare_caches_4(v_count, v_i.0) -> Com_1(eval_cie_prepare_caches_bb1_in(v_count, v_i.0 + 1)) [ v_count - v_i.0 - 1 >= 0 /\ v_i.0 >= 0 /\ v_count + v_i.0 - 1 >= 0 /\ v_count - 1 >= 0 ]
	eval_cie_prepare_caches_3(v_count, v_i.0) -> Com_2(eval_cie_prepare_cache_start(v_count, v_i.0), eval_cie_prepare_caches_4(v_count, v_i.0)) [ v_count - v_i.0 - 1 >= 0 /\ v_i.0 >= 0 /\ v_count + v_i.0 - 1 >= 0 /\ v_count - 1 >= 0 ]
strictly and produces the following problem:
5:	T:
		(2, 1)                eval_cie_prepare_caches_bb4_in(v_count, v_i.0) -> Com_1(eval_cie_prepare_caches_stop(v_count, v_i.0)) [ v_i.0 >= 0 ]
		(3*v_count + 1, 1)    eval_cie_prepare_caches_4(v_count, v_i.0) -> Com_1(eval_cie_prepare_caches_bb1_in(v_count, v_i.0 + 1)) [ v_count - v_i.0 - 1 >= 0 /\ v_i.0 >= 0 /\ v_count + v_i.0 - 1 >= 0 /\ v_count - 1 >= 0 ]
		(2, 1)                eval_cie_prepare_caches_4(v_count, v_i.0) -> Com_1(eval_cie_prepare_caches_bb4_in(v_count, v_i.0)) [ v_count - v_i.0 - 1 >= 0 /\ v_i.0 >= 0 /\ v_count + v_i.0 - 1 >= 0 /\ v_count - 1 >= 0 ]
		(3*v_count + 1, 1)    eval_cie_prepare_caches_3(v_count, v_i.0) -> Com_2(eval_cie_prepare_cache_start(v_count, v_i.0), eval_cie_prepare_caches_4(v_count, v_i.0)) [ v_count - v_i.0 - 1 >= 0 /\ v_i.0 >= 0 /\ v_count + v_i.0 - 1 >= 0 /\ v_count - 1 >= 0 ]
		(2, 1)                eval_cie_prepare_caches_bb1_in(v_count, v_i.0) -> Com_1(eval_cie_prepare_caches_bb4_in(v_count, v_i.0)) [ v_i.0 >= 0 /\ v_i.0 >= v_count ]
		(3*v_count + 1, 1)    eval_cie_prepare_caches_bb1_in(v_count, v_i.0) -> Com_1(eval_cie_prepare_caches_3(v_count, v_i.0)) [ v_i.0 >= 0 /\ v_i.0 < v_count ]
		(1, 1)                eval_cie_prepare_caches_bb0_in(v_count, v_i.0) -> Com_1(eval_cie_prepare_caches_bb1_in(v_count, 0))
		(1, 1)                eval_cie_prepare_caches_start(v_count, v_i.0) -> Com_1(eval_cie_prepare_caches_bb0_in(v_count, v_i.0))
	start location:	eval_cie_prepare_caches_start
	leaf cost:	0

Complexity upper bound 9*v_count + 11

Time: 0.215 sec (SMT: 0.191 sec)

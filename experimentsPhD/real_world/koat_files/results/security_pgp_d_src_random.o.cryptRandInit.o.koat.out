YES(?, 290)

Initial complexity problem:
1:	T:
		(1, 1)    eval_cryptRandInit_start(v_'randSeedOpen, v_i.0) -> Com_1(eval_cryptRandInit_bb0_in(v_'randSeedOpen, v_i.0))
		(?, 1)    eval_cryptRandInit_bb0_in(v_'randSeedOpen, v_i.0) -> Com_1(eval_cryptRandInit_bb1_in(v_'randSeedOpen, 0))
		(?, 1)    eval_cryptRandInit_bb1_in(v_'randSeedOpen, v_i.0) -> Com_1(eval_cryptRandInit_2(v_'randSeedOpen, v_i.0)) [ v_i.0 < 24 ]
		(?, 1)    eval_cryptRandInit_bb1_in(v_'randSeedOpen, v_i.0) -> Com_1(eval_cryptRandInit_8(v_'randSeedOpen, v_i.0)) [ v_i.0 >= 24 ]
		(?, 1)    eval_cryptRandInit_bb1_in(v_'randSeedOpen, v_i.0) -> Com_1(eval_cryptRandInit_bb5_in(v_'randSeedOpen, v_i.0)) [ v_i.0 >= 24 ]
		(?, 1)    eval_cryptRandInit_2(v_'randSeedOpen, v_i.0) -> Com_2(eval_trueRandByte_start(v_'randSeedOpen, v_i.0), eval_cryptRandInit_3(v_'randSeedOpen, v_i.0))
		(?, 1)    eval_cryptRandInit_3(v_'randSeedOpen, v_i.0) -> Com_1(eval_cryptRandInit_bb1_in(v_'randSeedOpen, v_i.0 + 1))
		(?, 1)    eval_cryptRandInit_8(v_'randSeedOpen, v_i.0) -> Com_2(eval_ideaCfbEncrypt_start(v_'randSeedOpen, v_i.0), eval_cryptRandInit_9(v_'randSeedOpen, v_i.0))
		(?, 1)    eval_cryptRandInit_9(v_'randSeedOpen, v_i.0) -> Com_1(eval_cryptRandInit_bb5_in(v_'randSeedOpen, v_i.0))
		(?, 1)    eval_cryptRandInit_bb5_in(v_'randSeedOpen, v_i.0) -> Com_1(eval_cryptRandInit_10(v_'randSeedOpen, v_i.0))
		(?, 1)    eval_cryptRandInit_10(v_'randSeedOpen, v_i.0) -> Com_2(eval_ideaRandInit_start(v_'randSeedOpen, v_i.0), eval_cryptRandInit_11(v_'randSeedOpen, v_i.0))
		(?, 1)    eval_cryptRandInit_11(v_'randSeedOpen, v_i.0) -> Com_1(eval_cryptRandInit_12(1, v_i.0))
		(?, 1)    eval_cryptRandInit_12(v_'randSeedOpen, v_i.0) -> Com_2(eval_llvm.memset.p0i8.i64_start(v_'randSeedOpen, v_i.0), eval_cryptRandInit_13(v_'randSeedOpen, v_i.0))
		(?, 1)    eval_cryptRandInit_13(v_'randSeedOpen, v_i.0) -> Com_1(eval_cryptRandInit_stop(v_'randSeedOpen, v_i.0))
	start location:	eval_cryptRandInit_start
	leaf cost:	0

Repeatedly propagating knowledge in problem 1 produces the following problem:
2:	T:
		(1, 1)    eval_cryptRandInit_start(v_'randSeedOpen, v_i.0) -> Com_1(eval_cryptRandInit_bb0_in(v_'randSeedOpen, v_i.0))
		(1, 1)    eval_cryptRandInit_bb0_in(v_'randSeedOpen, v_i.0) -> Com_1(eval_cryptRandInit_bb1_in(v_'randSeedOpen, 0))
		(?, 1)    eval_cryptRandInit_bb1_in(v_'randSeedOpen, v_i.0) -> Com_1(eval_cryptRandInit_2(v_'randSeedOpen, v_i.0)) [ v_i.0 < 24 ]
		(?, 1)    eval_cryptRandInit_bb1_in(v_'randSeedOpen, v_i.0) -> Com_1(eval_cryptRandInit_8(v_'randSeedOpen, v_i.0)) [ v_i.0 >= 24 ]
		(?, 1)    eval_cryptRandInit_bb1_in(v_'randSeedOpen, v_i.0) -> Com_1(eval_cryptRandInit_bb5_in(v_'randSeedOpen, v_i.0)) [ v_i.0 >= 24 ]
		(?, 1)    eval_cryptRandInit_2(v_'randSeedOpen, v_i.0) -> Com_2(eval_trueRandByte_start(v_'randSeedOpen, v_i.0), eval_cryptRandInit_3(v_'randSeedOpen, v_i.0))
		(?, 1)    eval_cryptRandInit_3(v_'randSeedOpen, v_i.0) -> Com_1(eval_cryptRandInit_bb1_in(v_'randSeedOpen, v_i.0 + 1))
		(?, 1)    eval_cryptRandInit_8(v_'randSeedOpen, v_i.0) -> Com_2(eval_ideaCfbEncrypt_start(v_'randSeedOpen, v_i.0), eval_cryptRandInit_9(v_'randSeedOpen, v_i.0))
		(?, 1)    eval_cryptRandInit_9(v_'randSeedOpen, v_i.0) -> Com_1(eval_cryptRandInit_bb5_in(v_'randSeedOpen, v_i.0))
		(?, 1)    eval_cryptRandInit_bb5_in(v_'randSeedOpen, v_i.0) -> Com_1(eval_cryptRandInit_10(v_'randSeedOpen, v_i.0))
		(?, 1)    eval_cryptRandInit_10(v_'randSeedOpen, v_i.0) -> Com_2(eval_ideaRandInit_start(v_'randSeedOpen, v_i.0), eval_cryptRandInit_11(v_'randSeedOpen, v_i.0))
		(?, 1)    eval_cryptRandInit_11(v_'randSeedOpen, v_i.0) -> Com_1(eval_cryptRandInit_12(1, v_i.0))
		(?, 1)    eval_cryptRandInit_12(v_'randSeedOpen, v_i.0) -> Com_2(eval_llvm.memset.p0i8.i64_start(v_'randSeedOpen, v_i.0), eval_cryptRandInit_13(v_'randSeedOpen, v_i.0))
		(?, 1)    eval_cryptRandInit_13(v_'randSeedOpen, v_i.0) -> Com_1(eval_cryptRandInit_stop(v_'randSeedOpen, v_i.0))
	start location:	eval_cryptRandInit_start
	leaf cost:	0

A polynomial rank function with
	Pol(eval_cryptRandInit_start) = 8
	Pol(eval_cryptRandInit_bb0_in) = 8
	Pol(eval_cryptRandInit_bb1_in) = 8
	Pol(eval_cryptRandInit_2) = 8
	Pol(eval_cryptRandInit_8) = 7
	Pol(eval_cryptRandInit_bb5_in) = 5
	Pol(eval_trueRandByte_start) = 0
	Pol(eval_cryptRandInit_3) = 8
	Pol(eval_ideaCfbEncrypt_start) = 0
	Pol(eval_cryptRandInit_9) = 6
	Pol(eval_cryptRandInit_10) = 4
	Pol(eval_ideaRandInit_start) = 0
	Pol(eval_cryptRandInit_11) = 3
	Pol(eval_cryptRandInit_12) = 2
	Pol(eval_llvm.memset.p0i8.i64_start) = 0
	Pol(eval_cryptRandInit_13) = 1
	Pol(eval_cryptRandInit_stop) = 0
orients all transitions weakly and the transitions
	eval_cryptRandInit_bb5_in(v_'randSeedOpen, v_i.0) -> Com_1(eval_cryptRandInit_10(v_'randSeedOpen, v_i.0))
	eval_cryptRandInit_bb1_in(v_'randSeedOpen, v_i.0) -> Com_1(eval_cryptRandInit_bb5_in(v_'randSeedOpen, v_i.0)) [ v_i.0 >= 24 ]
	eval_cryptRandInit_bb1_in(v_'randSeedOpen, v_i.0) -> Com_1(eval_cryptRandInit_8(v_'randSeedOpen, v_i.0)) [ v_i.0 >= 24 ]
	eval_cryptRandInit_9(v_'randSeedOpen, v_i.0) -> Com_1(eval_cryptRandInit_bb5_in(v_'randSeedOpen, v_i.0))
	eval_cryptRandInit_8(v_'randSeedOpen, v_i.0) -> Com_2(eval_ideaCfbEncrypt_start(v_'randSeedOpen, v_i.0), eval_cryptRandInit_9(v_'randSeedOpen, v_i.0))
	eval_cryptRandInit_13(v_'randSeedOpen, v_i.0) -> Com_1(eval_cryptRandInit_stop(v_'randSeedOpen, v_i.0))
	eval_cryptRandInit_12(v_'randSeedOpen, v_i.0) -> Com_2(eval_llvm.memset.p0i8.i64_start(v_'randSeedOpen, v_i.0), eval_cryptRandInit_13(v_'randSeedOpen, v_i.0))
	eval_cryptRandInit_11(v_'randSeedOpen, v_i.0) -> Com_1(eval_cryptRandInit_12(1, v_i.0))
	eval_cryptRandInit_10(v_'randSeedOpen, v_i.0) -> Com_2(eval_ideaRandInit_start(v_'randSeedOpen, v_i.0), eval_cryptRandInit_11(v_'randSeedOpen, v_i.0))
strictly and produces the following problem:
3:	T:
		(1, 1)    eval_cryptRandInit_start(v_'randSeedOpen, v_i.0) -> Com_1(eval_cryptRandInit_bb0_in(v_'randSeedOpen, v_i.0))
		(1, 1)    eval_cryptRandInit_bb0_in(v_'randSeedOpen, v_i.0) -> Com_1(eval_cryptRandInit_bb1_in(v_'randSeedOpen, 0))
		(?, 1)    eval_cryptRandInit_bb1_in(v_'randSeedOpen, v_i.0) -> Com_1(eval_cryptRandInit_2(v_'randSeedOpen, v_i.0)) [ v_i.0 < 24 ]
		(8, 1)    eval_cryptRandInit_bb1_in(v_'randSeedOpen, v_i.0) -> Com_1(eval_cryptRandInit_8(v_'randSeedOpen, v_i.0)) [ v_i.0 >= 24 ]
		(8, 1)    eval_cryptRandInit_bb1_in(v_'randSeedOpen, v_i.0) -> Com_1(eval_cryptRandInit_bb5_in(v_'randSeedOpen, v_i.0)) [ v_i.0 >= 24 ]
		(?, 1)    eval_cryptRandInit_2(v_'randSeedOpen, v_i.0) -> Com_2(eval_trueRandByte_start(v_'randSeedOpen, v_i.0), eval_cryptRandInit_3(v_'randSeedOpen, v_i.0))
		(?, 1)    eval_cryptRandInit_3(v_'randSeedOpen, v_i.0) -> Com_1(eval_cryptRandInit_bb1_in(v_'randSeedOpen, v_i.0 + 1))
		(8, 1)    eval_cryptRandInit_8(v_'randSeedOpen, v_i.0) -> Com_2(eval_ideaCfbEncrypt_start(v_'randSeedOpen, v_i.0), eval_cryptRandInit_9(v_'randSeedOpen, v_i.0))
		(8, 1)    eval_cryptRandInit_9(v_'randSeedOpen, v_i.0) -> Com_1(eval_cryptRandInit_bb5_in(v_'randSeedOpen, v_i.0))
		(8, 1)    eval_cryptRandInit_bb5_in(v_'randSeedOpen, v_i.0) -> Com_1(eval_cryptRandInit_10(v_'randSeedOpen, v_i.0))
		(8, 1)    eval_cryptRandInit_10(v_'randSeedOpen, v_i.0) -> Com_2(eval_ideaRandInit_start(v_'randSeedOpen, v_i.0), eval_cryptRandInit_11(v_'randSeedOpen, v_i.0))
		(8, 1)    eval_cryptRandInit_11(v_'randSeedOpen, v_i.0) -> Com_1(eval_cryptRandInit_12(1, v_i.0))
		(8, 1)    eval_cryptRandInit_12(v_'randSeedOpen, v_i.0) -> Com_2(eval_llvm.memset.p0i8.i64_start(v_'randSeedOpen, v_i.0), eval_cryptRandInit_13(v_'randSeedOpen, v_i.0))
		(8, 1)    eval_cryptRandInit_13(v_'randSeedOpen, v_i.0) -> Com_1(eval_cryptRandInit_stop(v_'randSeedOpen, v_i.0))
	start location:	eval_cryptRandInit_start
	leaf cost:	0

Applied AI with 'oct' on problem 3 to obtain the following invariants:
  For symbol eval_cryptRandInit_10: X_2 - 24 >= 0
  For symbol eval_cryptRandInit_11: X_2 - 24 >= 0
  For symbol eval_cryptRandInit_12: X_2 - 24 >= 0 /\ X_1 + X_2 - 25 >= 0 /\ -X_1 + X_2 - 23 >= 0 /\ -X_1 + 1 >= 0 /\ X_1 - 1 >= 0
  For symbol eval_cryptRandInit_13: X_2 - 24 >= 0 /\ X_1 + X_2 - 25 >= 0 /\ -X_1 + X_2 - 23 >= 0 /\ -X_1 + 1 >= 0 /\ X_1 - 1 >= 0
  For symbol eval_cryptRandInit_2: -X_2 + 23 >= 0 /\ X_2 >= 0
  For symbol eval_cryptRandInit_3: -X_2 + 23 >= 0 /\ X_2 >= 0
  For symbol eval_cryptRandInit_8: X_2 - 24 >= 0
  For symbol eval_cryptRandInit_9: X_2 - 24 >= 0
  For symbol eval_cryptRandInit_bb1_in: X_2 >= 0
  For symbol eval_cryptRandInit_bb5_in: X_2 - 24 >= 0


This yielded the following problem:
4:	T:
		(8, 1)    eval_cryptRandInit_13(v_'randSeedOpen, v_i.0) -> Com_1(eval_cryptRandInit_stop(v_'randSeedOpen, v_i.0)) [ v_i.0 - 24 >= 0 /\ v_'randSeedOpen + v_i.0 - 25 >= 0 /\ -v_'randSeedOpen + v_i.0 - 23 >= 0 /\ -v_'randSeedOpen + 1 >= 0 /\ v_'randSeedOpen - 1 >= 0 ]
		(8, 1)    eval_cryptRandInit_12(v_'randSeedOpen, v_i.0) -> Com_2(eval_llvm.memset.p0i8.i64_start(v_'randSeedOpen, v_i.0), eval_cryptRandInit_13(v_'randSeedOpen, v_i.0)) [ v_i.0 - 24 >= 0 /\ v_'randSeedOpen + v_i.0 - 25 >= 0 /\ -v_'randSeedOpen + v_i.0 - 23 >= 0 /\ -v_'randSeedOpen + 1 >= 0 /\ v_'randSeedOpen - 1 >= 0 ]
		(8, 1)    eval_cryptRandInit_11(v_'randSeedOpen, v_i.0) -> Com_1(eval_cryptRandInit_12(1, v_i.0)) [ v_i.0 - 24 >= 0 ]
		(8, 1)    eval_cryptRandInit_10(v_'randSeedOpen, v_i.0) -> Com_2(eval_ideaRandInit_start(v_'randSeedOpen, v_i.0), eval_cryptRandInit_11(v_'randSeedOpen, v_i.0)) [ v_i.0 - 24 >= 0 ]
		(8, 1)    eval_cryptRandInit_bb5_in(v_'randSeedOpen, v_i.0) -> Com_1(eval_cryptRandInit_10(v_'randSeedOpen, v_i.0)) [ v_i.0 - 24 >= 0 ]
		(8, 1)    eval_cryptRandInit_9(v_'randSeedOpen, v_i.0) -> Com_1(eval_cryptRandInit_bb5_in(v_'randSeedOpen, v_i.0)) [ v_i.0 - 24 >= 0 ]
		(8, 1)    eval_cryptRandInit_8(v_'randSeedOpen, v_i.0) -> Com_2(eval_ideaCfbEncrypt_start(v_'randSeedOpen, v_i.0), eval_cryptRandInit_9(v_'randSeedOpen, v_i.0)) [ v_i.0 - 24 >= 0 ]
		(?, 1)    eval_cryptRandInit_3(v_'randSeedOpen, v_i.0) -> Com_1(eval_cryptRandInit_bb1_in(v_'randSeedOpen, v_i.0 + 1)) [ -v_i.0 + 23 >= 0 /\ v_i.0 >= 0 ]
		(?, 1)    eval_cryptRandInit_2(v_'randSeedOpen, v_i.0) -> Com_2(eval_trueRandByte_start(v_'randSeedOpen, v_i.0), eval_cryptRandInit_3(v_'randSeedOpen, v_i.0)) [ -v_i.0 + 23 >= 0 /\ v_i.0 >= 0 ]
		(8, 1)    eval_cryptRandInit_bb1_in(v_'randSeedOpen, v_i.0) -> Com_1(eval_cryptRandInit_bb5_in(v_'randSeedOpen, v_i.0)) [ v_i.0 >= 0 /\ v_i.0 >= 24 ]
		(8, 1)    eval_cryptRandInit_bb1_in(v_'randSeedOpen, v_i.0) -> Com_1(eval_cryptRandInit_8(v_'randSeedOpen, v_i.0)) [ v_i.0 >= 0 /\ v_i.0 >= 24 ]
		(?, 1)    eval_cryptRandInit_bb1_in(v_'randSeedOpen, v_i.0) -> Com_1(eval_cryptRandInit_2(v_'randSeedOpen, v_i.0)) [ v_i.0 >= 0 /\ v_i.0 < 24 ]
		(1, 1)    eval_cryptRandInit_bb0_in(v_'randSeedOpen, v_i.0) -> Com_1(eval_cryptRandInit_bb1_in(v_'randSeedOpen, 0))
		(1, 1)    eval_cryptRandInit_start(v_'randSeedOpen, v_i.0) -> Com_1(eval_cryptRandInit_bb0_in(v_'randSeedOpen, v_i.0))
	start location:	eval_cryptRandInit_start
	leaf cost:	0

A polynomial rank function with
	Pol(eval_cryptRandInit_bb1_in) = -3*V_2 + 72
	Pol(eval_cryptRandInit_2) = -3*V_2 + 71
	Pol(eval_cryptRandInit_3) = -3*V_2 + 70
	Pol(eval_trueRandByte_start) = -3*V_2
and size complexities
	S("eval_cryptRandInit_start(v_'randSeedOpen, v_i.0) -> Com_1(eval_cryptRandInit_bb0_in(v_'randSeedOpen, v_i.0))", 0-0) = v_'randSeedOpen
	S("eval_cryptRandInit_start(v_'randSeedOpen, v_i.0) -> Com_1(eval_cryptRandInit_bb0_in(v_'randSeedOpen, v_i.0))", 0-1) = v_i.0
	S("eval_cryptRandInit_bb0_in(v_'randSeedOpen, v_i.0) -> Com_1(eval_cryptRandInit_bb1_in(v_'randSeedOpen, 0))", 0-0) = v_'randSeedOpen
	S("eval_cryptRandInit_bb0_in(v_'randSeedOpen, v_i.0) -> Com_1(eval_cryptRandInit_bb1_in(v_'randSeedOpen, 0))", 0-1) = 0
	S("eval_cryptRandInit_bb1_in(v_'randSeedOpen, v_i.0) -> Com_1(eval_cryptRandInit_2(v_'randSeedOpen, v_i.0)) [ v_i.0 >= 0 /\\ v_i.0 < 24 ]", 0-0) = v_'randSeedOpen
	S("eval_cryptRandInit_bb1_in(v_'randSeedOpen, v_i.0) -> Com_1(eval_cryptRandInit_2(v_'randSeedOpen, v_i.0)) [ v_i.0 >= 0 /\\ v_i.0 < 24 ]", 0-1) = 23
	S("eval_cryptRandInit_bb1_in(v_'randSeedOpen, v_i.0) -> Com_1(eval_cryptRandInit_8(v_'randSeedOpen, v_i.0)) [ v_i.0 >= 0 /\\ v_i.0 >= 24 ]", 0-0) = v_'randSeedOpen
	S("eval_cryptRandInit_bb1_in(v_'randSeedOpen, v_i.0) -> Com_1(eval_cryptRandInit_8(v_'randSeedOpen, v_i.0)) [ v_i.0 >= 0 /\\ v_i.0 >= 24 ]", 0-1) = 24
	S("eval_cryptRandInit_bb1_in(v_'randSeedOpen, v_i.0) -> Com_1(eval_cryptRandInit_bb5_in(v_'randSeedOpen, v_i.0)) [ v_i.0 >= 0 /\\ v_i.0 >= 24 ]", 0-0) = v_'randSeedOpen
	S("eval_cryptRandInit_bb1_in(v_'randSeedOpen, v_i.0) -> Com_1(eval_cryptRandInit_bb5_in(v_'randSeedOpen, v_i.0)) [ v_i.0 >= 0 /\\ v_i.0 >= 24 ]", 0-1) = 24
	S("eval_cryptRandInit_2(v_'randSeedOpen, v_i.0) -> Com_2(eval_trueRandByte_start(v_'randSeedOpen, v_i.0), eval_cryptRandInit_3(v_'randSeedOpen, v_i.0)) [ -v_i.0 + 23 >= 0 /\\ v_i.0 >= 0 ]", 0-0) = v_'randSeedOpen
	S("eval_cryptRandInit_2(v_'randSeedOpen, v_i.0) -> Com_2(eval_trueRandByte_start(v_'randSeedOpen, v_i.0), eval_cryptRandInit_3(v_'randSeedOpen, v_i.0)) [ -v_i.0 + 23 >= 0 /\\ v_i.0 >= 0 ]", 0-1) = 23
	S("eval_cryptRandInit_2(v_'randSeedOpen, v_i.0) -> Com_2(eval_trueRandByte_start(v_'randSeedOpen, v_i.0), eval_cryptRandInit_3(v_'randSeedOpen, v_i.0)) [ -v_i.0 + 23 >= 0 /\\ v_i.0 >= 0 ]", 1-0) = v_'randSeedOpen
	S("eval_cryptRandInit_2(v_'randSeedOpen, v_i.0) -> Com_2(eval_trueRandByte_start(v_'randSeedOpen, v_i.0), eval_cryptRandInit_3(v_'randSeedOpen, v_i.0)) [ -v_i.0 + 23 >= 0 /\\ v_i.0 >= 0 ]", 1-1) = 23
	S("eval_cryptRandInit_3(v_'randSeedOpen, v_i.0) -> Com_1(eval_cryptRandInit_bb1_in(v_'randSeedOpen, v_i.0 + 1)) [ -v_i.0 + 23 >= 0 /\\ v_i.0 >= 0 ]", 0-0) = v_'randSeedOpen
	S("eval_cryptRandInit_3(v_'randSeedOpen, v_i.0) -> Com_1(eval_cryptRandInit_bb1_in(v_'randSeedOpen, v_i.0 + 1)) [ -v_i.0 + 23 >= 0 /\\ v_i.0 >= 0 ]", 0-1) = 24
	S("eval_cryptRandInit_8(v_'randSeedOpen, v_i.0) -> Com_2(eval_ideaCfbEncrypt_start(v_'randSeedOpen, v_i.0), eval_cryptRandInit_9(v_'randSeedOpen, v_i.0)) [ v_i.0 - 24 >= 0 ]", 0-0) = v_'randSeedOpen
	S("eval_cryptRandInit_8(v_'randSeedOpen, v_i.0) -> Com_2(eval_ideaCfbEncrypt_start(v_'randSeedOpen, v_i.0), eval_cryptRandInit_9(v_'randSeedOpen, v_i.0)) [ v_i.0 - 24 >= 0 ]", 0-1) = 24
	S("eval_cryptRandInit_8(v_'randSeedOpen, v_i.0) -> Com_2(eval_ideaCfbEncrypt_start(v_'randSeedOpen, v_i.0), eval_cryptRandInit_9(v_'randSeedOpen, v_i.0)) [ v_i.0 - 24 >= 0 ]", 1-0) = v_'randSeedOpen
	S("eval_cryptRandInit_8(v_'randSeedOpen, v_i.0) -> Com_2(eval_ideaCfbEncrypt_start(v_'randSeedOpen, v_i.0), eval_cryptRandInit_9(v_'randSeedOpen, v_i.0)) [ v_i.0 - 24 >= 0 ]", 1-1) = 24
	S("eval_cryptRandInit_9(v_'randSeedOpen, v_i.0) -> Com_1(eval_cryptRandInit_bb5_in(v_'randSeedOpen, v_i.0)) [ v_i.0 - 24 >= 0 ]", 0-0) = v_'randSeedOpen
	S("eval_cryptRandInit_9(v_'randSeedOpen, v_i.0) -> Com_1(eval_cryptRandInit_bb5_in(v_'randSeedOpen, v_i.0)) [ v_i.0 - 24 >= 0 ]", 0-1) = 24
	S("eval_cryptRandInit_bb5_in(v_'randSeedOpen, v_i.0) -> Com_1(eval_cryptRandInit_10(v_'randSeedOpen, v_i.0)) [ v_i.0 - 24 >= 0 ]", 0-0) = v_'randSeedOpen
	S("eval_cryptRandInit_bb5_in(v_'randSeedOpen, v_i.0) -> Com_1(eval_cryptRandInit_10(v_'randSeedOpen, v_i.0)) [ v_i.0 - 24 >= 0 ]", 0-1) = 24
	S("eval_cryptRandInit_10(v_'randSeedOpen, v_i.0) -> Com_2(eval_ideaRandInit_start(v_'randSeedOpen, v_i.0), eval_cryptRandInit_11(v_'randSeedOpen, v_i.0)) [ v_i.0 - 24 >= 0 ]", 0-0) = v_'randSeedOpen
	S("eval_cryptRandInit_10(v_'randSeedOpen, v_i.0) -> Com_2(eval_ideaRandInit_start(v_'randSeedOpen, v_i.0), eval_cryptRandInit_11(v_'randSeedOpen, v_i.0)) [ v_i.0 - 24 >= 0 ]", 0-1) = 24
	S("eval_cryptRandInit_10(v_'randSeedOpen, v_i.0) -> Com_2(eval_ideaRandInit_start(v_'randSeedOpen, v_i.0), eval_cryptRandInit_11(v_'randSeedOpen, v_i.0)) [ v_i.0 - 24 >= 0 ]", 1-0) = v_'randSeedOpen
	S("eval_cryptRandInit_10(v_'randSeedOpen, v_i.0) -> Com_2(eval_ideaRandInit_start(v_'randSeedOpen, v_i.0), eval_cryptRandInit_11(v_'randSeedOpen, v_i.0)) [ v_i.0 - 24 >= 0 ]", 1-1) = 24
	S("eval_cryptRandInit_11(v_'randSeedOpen, v_i.0) -> Com_1(eval_cryptRandInit_12(1, v_i.0)) [ v_i.0 - 24 >= 0 ]", 0-0) = 1
	S("eval_cryptRandInit_11(v_'randSeedOpen, v_i.0) -> Com_1(eval_cryptRandInit_12(1, v_i.0)) [ v_i.0 - 24 >= 0 ]", 0-1) = 24
	S("eval_cryptRandInit_12(v_'randSeedOpen, v_i.0) -> Com_2(eval_llvm.memset.p0i8.i64_start(v_'randSeedOpen, v_i.0), eval_cryptRandInit_13(v_'randSeedOpen, v_i.0)) [ v_i.0 - 24 >= 0 /\\ v_'randSeedOpen + v_i.0 - 25 >= 0 /\\ -v_'randSeedOpen + v_i.0 - 23 >= 0 /\\ -v_'randSeedOpen + 1 >= 0 /\\ v_'randSeedOpen - 1 >= 0 ]", 0-0) = 1
	S("eval_cryptRandInit_12(v_'randSeedOpen, v_i.0) -> Com_2(eval_llvm.memset.p0i8.i64_start(v_'randSeedOpen, v_i.0), eval_cryptRandInit_13(v_'randSeedOpen, v_i.0)) [ v_i.0 - 24 >= 0 /\\ v_'randSeedOpen + v_i.0 - 25 >= 0 /\\ -v_'randSeedOpen + v_i.0 - 23 >= 0 /\\ -v_'randSeedOpen + 1 >= 0 /\\ v_'randSeedOpen - 1 >= 0 ]", 0-1) = 24
	S("eval_cryptRandInit_12(v_'randSeedOpen, v_i.0) -> Com_2(eval_llvm.memset.p0i8.i64_start(v_'randSeedOpen, v_i.0), eval_cryptRandInit_13(v_'randSeedOpen, v_i.0)) [ v_i.0 - 24 >= 0 /\\ v_'randSeedOpen + v_i.0 - 25 >= 0 /\\ -v_'randSeedOpen + v_i.0 - 23 >= 0 /\\ -v_'randSeedOpen + 1 >= 0 /\\ v_'randSeedOpen - 1 >= 0 ]", 1-0) = 1
	S("eval_cryptRandInit_12(v_'randSeedOpen, v_i.0) -> Com_2(eval_llvm.memset.p0i8.i64_start(v_'randSeedOpen, v_i.0), eval_cryptRandInit_13(v_'randSeedOpen, v_i.0)) [ v_i.0 - 24 >= 0 /\\ v_'randSeedOpen + v_i.0 - 25 >= 0 /\\ -v_'randSeedOpen + v_i.0 - 23 >= 0 /\\ -v_'randSeedOpen + 1 >= 0 /\\ v_'randSeedOpen - 1 >= 0 ]", 1-1) = 24
	S("eval_cryptRandInit_13(v_'randSeedOpen, v_i.0) -> Com_1(eval_cryptRandInit_stop(v_'randSeedOpen, v_i.0)) [ v_i.0 - 24 >= 0 /\\ v_'randSeedOpen + v_i.0 - 25 >= 0 /\\ -v_'randSeedOpen + v_i.0 - 23 >= 0 /\\ -v_'randSeedOpen + 1 >= 0 /\\ v_'randSeedOpen - 1 >= 0 ]", 0-0) = 1
	S("eval_cryptRandInit_13(v_'randSeedOpen, v_i.0) -> Com_1(eval_cryptRandInit_stop(v_'randSeedOpen, v_i.0)) [ v_i.0 - 24 >= 0 /\\ v_'randSeedOpen + v_i.0 - 25 >= 0 /\\ -v_'randSeedOpen + v_i.0 - 23 >= 0 /\\ -v_'randSeedOpen + 1 >= 0 /\\ v_'randSeedOpen - 1 >= 0 ]", 0-1) = 24
orients the transitions
	eval_cryptRandInit_bb1_in(v_'randSeedOpen, v_i.0) -> Com_1(eval_cryptRandInit_2(v_'randSeedOpen, v_i.0)) [ v_i.0 >= 0 /\ v_i.0 < 24 ]
	eval_cryptRandInit_3(v_'randSeedOpen, v_i.0) -> Com_1(eval_cryptRandInit_bb1_in(v_'randSeedOpen, v_i.0 + 1)) [ -v_i.0 + 23 >= 0 /\ v_i.0 >= 0 ]
	eval_cryptRandInit_2(v_'randSeedOpen, v_i.0) -> Com_2(eval_trueRandByte_start(v_'randSeedOpen, v_i.0), eval_cryptRandInit_3(v_'randSeedOpen, v_i.0)) [ -v_i.0 + 23 >= 0 /\ v_i.0 >= 0 ]
weakly and the transitions
	eval_cryptRandInit_bb1_in(v_'randSeedOpen, v_i.0) -> Com_1(eval_cryptRandInit_2(v_'randSeedOpen, v_i.0)) [ v_i.0 >= 0 /\ v_i.0 < 24 ]
	eval_cryptRandInit_3(v_'randSeedOpen, v_i.0) -> Com_1(eval_cryptRandInit_bb1_in(v_'randSeedOpen, v_i.0 + 1)) [ -v_i.0 + 23 >= 0 /\ v_i.0 >= 0 ]
	eval_cryptRandInit_2(v_'randSeedOpen, v_i.0) -> Com_2(eval_trueRandByte_start(v_'randSeedOpen, v_i.0), eval_cryptRandInit_3(v_'randSeedOpen, v_i.0)) [ -v_i.0 + 23 >= 0 /\ v_i.0 >= 0 ]
strictly and produces the following problem:
5:	T:
		(8, 1)     eval_cryptRandInit_13(v_'randSeedOpen, v_i.0) -> Com_1(eval_cryptRandInit_stop(v_'randSeedOpen, v_i.0)) [ v_i.0 - 24 >= 0 /\ v_'randSeedOpen + v_i.0 - 25 >= 0 /\ -v_'randSeedOpen + v_i.0 - 23 >= 0 /\ -v_'randSeedOpen + 1 >= 0 /\ v_'randSeedOpen - 1 >= 0 ]
		(8, 1)     eval_cryptRandInit_12(v_'randSeedOpen, v_i.0) -> Com_2(eval_llvm.memset.p0i8.i64_start(v_'randSeedOpen, v_i.0), eval_cryptRandInit_13(v_'randSeedOpen, v_i.0)) [ v_i.0 - 24 >= 0 /\ v_'randSeedOpen + v_i.0 - 25 >= 0 /\ -v_'randSeedOpen + v_i.0 - 23 >= 0 /\ -v_'randSeedOpen + 1 >= 0 /\ v_'randSeedOpen - 1 >= 0 ]
		(8, 1)     eval_cryptRandInit_11(v_'randSeedOpen, v_i.0) -> Com_1(eval_cryptRandInit_12(1, v_i.0)) [ v_i.0 - 24 >= 0 ]
		(8, 1)     eval_cryptRandInit_10(v_'randSeedOpen, v_i.0) -> Com_2(eval_ideaRandInit_start(v_'randSeedOpen, v_i.0), eval_cryptRandInit_11(v_'randSeedOpen, v_i.0)) [ v_i.0 - 24 >= 0 ]
		(8, 1)     eval_cryptRandInit_bb5_in(v_'randSeedOpen, v_i.0) -> Com_1(eval_cryptRandInit_10(v_'randSeedOpen, v_i.0)) [ v_i.0 - 24 >= 0 ]
		(8, 1)     eval_cryptRandInit_9(v_'randSeedOpen, v_i.0) -> Com_1(eval_cryptRandInit_bb5_in(v_'randSeedOpen, v_i.0)) [ v_i.0 - 24 >= 0 ]
		(8, 1)     eval_cryptRandInit_8(v_'randSeedOpen, v_i.0) -> Com_2(eval_ideaCfbEncrypt_start(v_'randSeedOpen, v_i.0), eval_cryptRandInit_9(v_'randSeedOpen, v_i.0)) [ v_i.0 - 24 >= 0 ]
		(72, 1)    eval_cryptRandInit_3(v_'randSeedOpen, v_i.0) -> Com_1(eval_cryptRandInit_bb1_in(v_'randSeedOpen, v_i.0 + 1)) [ -v_i.0 + 23 >= 0 /\ v_i.0 >= 0 ]
		(72, 1)    eval_cryptRandInit_2(v_'randSeedOpen, v_i.0) -> Com_2(eval_trueRandByte_start(v_'randSeedOpen, v_i.0), eval_cryptRandInit_3(v_'randSeedOpen, v_i.0)) [ -v_i.0 + 23 >= 0 /\ v_i.0 >= 0 ]
		(8, 1)     eval_cryptRandInit_bb1_in(v_'randSeedOpen, v_i.0) -> Com_1(eval_cryptRandInit_bb5_in(v_'randSeedOpen, v_i.0)) [ v_i.0 >= 0 /\ v_i.0 >= 24 ]
		(8, 1)     eval_cryptRandInit_bb1_in(v_'randSeedOpen, v_i.0) -> Com_1(eval_cryptRandInit_8(v_'randSeedOpen, v_i.0)) [ v_i.0 >= 0 /\ v_i.0 >= 24 ]
		(72, 1)    eval_cryptRandInit_bb1_in(v_'randSeedOpen, v_i.0) -> Com_1(eval_cryptRandInit_2(v_'randSeedOpen, v_i.0)) [ v_i.0 >= 0 /\ v_i.0 < 24 ]
		(1, 1)     eval_cryptRandInit_bb0_in(v_'randSeedOpen, v_i.0) -> Com_1(eval_cryptRandInit_bb1_in(v_'randSeedOpen, 0))
		(1, 1)     eval_cryptRandInit_start(v_'randSeedOpen, v_i.0) -> Com_1(eval_cryptRandInit_bb0_in(v_'randSeedOpen, v_i.0))
	start location:	eval_cryptRandInit_start
	leaf cost:	0

Complexity upper bound 290

Time: 0.148 sec (SMT: 0.128 sec)

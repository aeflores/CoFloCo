YES(?, 72*v_count + 20)

Initial complexity problem:
1:	T:
		(1, 1)    eval_pop_estack_start(v_11, v_12, v_2, v_20, v_count, v_idx.0, v_popped.0, v_popped.1) -> Com_1(eval_pop_estack_bb0_in(v_11, v_12, v_2, v_20, v_count, v_idx.0, v_popped.0, v_popped.1))
		(?, 1)    eval_pop_estack_bb0_in(v_11, v_12, v_2, v_20, v_count, v_idx.0, v_popped.0, v_popped.1) -> Com_1(eval_pop_estack_bb1_in(v_11, v_12, v_2, v_20, v_count, 0, 0, v_popped.1))
		(?, 1)    eval_pop_estack_bb1_in(v_11, v_12, v_2, v_20, v_count, v_idx.0, v_popped.0, v_popped.1) -> Com_1(eval_pop_estack_4(v_11, v_12, v_idx.0 - v_popped.0, v_20, v_count, v_idx.0, v_popped.0, v_popped.1)) [ v_idx.0 < v_count ]
		(?, 1)    eval_pop_estack_bb1_in(v_11, v_12, v_2, v_20, v_count, v_idx.0, v_popped.0, v_popped.1) -> Com_1(eval_pop_estack_18(v_11, v_12, v_2, v_count - v_popped.0, v_count, v_idx.0, v_popped.0, v_popped.1)) [ v_idx.0 >= v_count ]
		(?, 1)    eval_pop_estack_4(v_11, v_12, v_2, v_20, v_count, v_idx.0, v_popped.0, v_popped.1) -> Com_2(eval_ref_stack_index_start(v_11, v_12, v_2, v_20, v_count, v_idx.0, v_popped.0, v_popped.1), eval_pop_estack_5(v_11, v_12, v_2, v_20, v_count, v_idx.0, v_popped.0, v_popped.1))
		(?, 1)    eval_pop_estack_5(v_11, v_12, v_2, v_20, v_count, v_idx.0, v_popped.0, v_popped.1) -> Com_1(eval_pop_estack_11(v_idx.0 - v_popped.0 + 1, v_12, v_2, v_20, v_count, v_idx.0, v_popped.0, v_popped.1))
		(?, 1)    eval_pop_estack_5(v_11, v_12, v_2, v_20, v_count, v_idx.0, v_popped.0, v_popped.1) -> Com_1(eval_pop_estack_bb4_in(v_11, v_12, v_2, v_20, v_count, v_idx.0, v_popped.0, v_popped.0))
		(?, 1)    eval_pop_estack_11(v_11, v_12, v_2, v_20, v_count, v_idx.0, v_popped.0, v_popped.1) -> Com_2(eval_ref_stack_pop_start(v_11, v_12, v_2, v_20, v_count, v_idx.0, v_popped.0, v_popped.1), eval_pop_estack_12(v_11, v_12, v_2, v_20, v_count, v_idx.0, v_popped.0, v_popped.1))
		(?, 1)    eval_pop_estack_12(v_11, v_12, v_2, v_20, v_count, v_idx.0, v_popped.0, v_popped.1) -> Com_1(eval_pop_estack_13(v_11, v_idx.0 + 1, v_2, v_20, v_count, v_idx.0, v_popped.0, v_popped.1))
		(?, 1)    eval_pop_estack_13(v_11, v_12, v_2, v_20, v_count, v_idx.0, v_popped.0, v_popped.1) -> Com_1(eval_pop_estack_14(v_11, v_12, v_2, v_20, v_count, v_idx.0, v_popped.0, v_popped.1))
		(?, 1)    eval_pop_estack_14(v_11, v_12, v_2, v_20, v_count, v_idx.0, v_popped.0, v_popped.1) -> Com_1(eval_pop_estack_bb4_in(v_11, v_12, v_2, v_20, v_count, v_idx.0, v_popped.0, v_12))
		(?, 1)    eval_pop_estack_bb4_in(v_11, v_12, v_2, v_20, v_count, v_idx.0, v_popped.0, v_popped.1) -> Com_1(eval_pop_estack_bb1_in(v_11, v_12, v_2, v_20, v_count, v_idx.0 + 1, v_popped.1, v_popped.1))
		(?, 1)    eval_pop_estack_18(v_11, v_12, v_2, v_20, v_count, v_idx.0, v_popped.0, v_popped.1) -> Com_2(eval_ref_stack_pop_start(v_11, v_12, v_2, v_20, v_count, v_idx.0, v_popped.0, v_popped.1), eval_pop_estack_19(v_11, v_12, v_2, v_20, v_count, v_idx.0, v_popped.0, v_popped.1))
		(?, 1)    eval_pop_estack_19(v_11, v_12, v_2, v_20, v_count, v_idx.0, v_popped.0, v_popped.1) -> Com_1(eval_pop_estack_stop(v_11, v_12, v_2, v_20, v_count, v_idx.0, v_popped.0, v_popped.1))
	start location:	eval_pop_estack_start
	leaf cost:	0

Slicing away variables that do not contribute to conditions from problem 1 leaves variables [v_count, v_idx.0].
We thus obtain the following problem:
2:	T:
		(?, 1)    eval_pop_estack_19(v_count, v_idx.0) -> Com_1(eval_pop_estack_stop(v_count, v_idx.0))
		(?, 1)    eval_pop_estack_18(v_count, v_idx.0) -> Com_2(eval_ref_stack_pop_start(v_count, v_idx.0), eval_pop_estack_19(v_count, v_idx.0))
		(?, 1)    eval_pop_estack_bb4_in(v_count, v_idx.0) -> Com_1(eval_pop_estack_bb1_in(v_count, v_idx.0 + 1))
		(?, 1)    eval_pop_estack_14(v_count, v_idx.0) -> Com_1(eval_pop_estack_bb4_in(v_count, v_idx.0))
		(?, 1)    eval_pop_estack_13(v_count, v_idx.0) -> Com_1(eval_pop_estack_14(v_count, v_idx.0))
		(?, 1)    eval_pop_estack_12(v_count, v_idx.0) -> Com_1(eval_pop_estack_13(v_count, v_idx.0))
		(?, 1)    eval_pop_estack_11(v_count, v_idx.0) -> Com_2(eval_ref_stack_pop_start(v_count, v_idx.0), eval_pop_estack_12(v_count, v_idx.0))
		(?, 1)    eval_pop_estack_5(v_count, v_idx.0) -> Com_1(eval_pop_estack_bb4_in(v_count, v_idx.0))
		(?, 1)    eval_pop_estack_5(v_count, v_idx.0) -> Com_1(eval_pop_estack_11(v_count, v_idx.0))
		(?, 1)    eval_pop_estack_4(v_count, v_idx.0) -> Com_2(eval_ref_stack_index_start(v_count, v_idx.0), eval_pop_estack_5(v_count, v_idx.0))
		(?, 1)    eval_pop_estack_bb1_in(v_count, v_idx.0) -> Com_1(eval_pop_estack_18(v_count, v_idx.0)) [ v_idx.0 >= v_count ]
		(?, 1)    eval_pop_estack_bb1_in(v_count, v_idx.0) -> Com_1(eval_pop_estack_4(v_count, v_idx.0)) [ v_idx.0 < v_count ]
		(?, 1)    eval_pop_estack_bb0_in(v_count, v_idx.0) -> Com_1(eval_pop_estack_bb1_in(v_count, 0))
		(1, 1)    eval_pop_estack_start(v_count, v_idx.0) -> Com_1(eval_pop_estack_bb0_in(v_count, v_idx.0))
	start location:	eval_pop_estack_start
	leaf cost:	0

Repeatedly propagating knowledge in problem 2 produces the following problem:
3:	T:
		(?, 1)    eval_pop_estack_19(v_count, v_idx.0) -> Com_1(eval_pop_estack_stop(v_count, v_idx.0))
		(?, 1)    eval_pop_estack_18(v_count, v_idx.0) -> Com_2(eval_ref_stack_pop_start(v_count, v_idx.0), eval_pop_estack_19(v_count, v_idx.0))
		(?, 1)    eval_pop_estack_bb4_in(v_count, v_idx.0) -> Com_1(eval_pop_estack_bb1_in(v_count, v_idx.0 + 1))
		(?, 1)    eval_pop_estack_14(v_count, v_idx.0) -> Com_1(eval_pop_estack_bb4_in(v_count, v_idx.0))
		(?, 1)    eval_pop_estack_13(v_count, v_idx.0) -> Com_1(eval_pop_estack_14(v_count, v_idx.0))
		(?, 1)    eval_pop_estack_12(v_count, v_idx.0) -> Com_1(eval_pop_estack_13(v_count, v_idx.0))
		(?, 1)    eval_pop_estack_11(v_count, v_idx.0) -> Com_2(eval_ref_stack_pop_start(v_count, v_idx.0), eval_pop_estack_12(v_count, v_idx.0))
		(?, 1)    eval_pop_estack_5(v_count, v_idx.0) -> Com_1(eval_pop_estack_bb4_in(v_count, v_idx.0))
		(?, 1)    eval_pop_estack_5(v_count, v_idx.0) -> Com_1(eval_pop_estack_11(v_count, v_idx.0))
		(?, 1)    eval_pop_estack_4(v_count, v_idx.0) -> Com_2(eval_ref_stack_index_start(v_count, v_idx.0), eval_pop_estack_5(v_count, v_idx.0))
		(?, 1)    eval_pop_estack_bb1_in(v_count, v_idx.0) -> Com_1(eval_pop_estack_18(v_count, v_idx.0)) [ v_idx.0 >= v_count ]
		(?, 1)    eval_pop_estack_bb1_in(v_count, v_idx.0) -> Com_1(eval_pop_estack_4(v_count, v_idx.0)) [ v_idx.0 < v_count ]
		(1, 1)    eval_pop_estack_bb0_in(v_count, v_idx.0) -> Com_1(eval_pop_estack_bb1_in(v_count, 0))
		(1, 1)    eval_pop_estack_start(v_count, v_idx.0) -> Com_1(eval_pop_estack_bb0_in(v_count, v_idx.0))
	start location:	eval_pop_estack_start
	leaf cost:	0

A polynomial rank function with
	Pol(eval_pop_estack_19) = 1
	Pol(eval_pop_estack_stop) = 0
	Pol(eval_pop_estack_18) = 2
	Pol(eval_ref_stack_pop_start) = 0
	Pol(eval_pop_estack_bb4_in) = 3
	Pol(eval_pop_estack_bb1_in) = 3
	Pol(eval_pop_estack_14) = 3
	Pol(eval_pop_estack_13) = 3
	Pol(eval_pop_estack_12) = 3
	Pol(eval_pop_estack_11) = 3
	Pol(eval_pop_estack_5) = 3
	Pol(eval_pop_estack_4) = 3
	Pol(eval_ref_stack_index_start) = 0
	Pol(eval_pop_estack_bb0_in) = 3
	Pol(eval_pop_estack_start) = 3
orients all transitions weakly and the transitions
	eval_pop_estack_bb1_in(v_count, v_idx.0) -> Com_1(eval_pop_estack_18(v_count, v_idx.0)) [ v_idx.0 >= v_count ]
	eval_pop_estack_19(v_count, v_idx.0) -> Com_1(eval_pop_estack_stop(v_count, v_idx.0))
	eval_pop_estack_18(v_count, v_idx.0) -> Com_2(eval_ref_stack_pop_start(v_count, v_idx.0), eval_pop_estack_19(v_count, v_idx.0))
strictly and produces the following problem:
4:	T:
		(3, 1)    eval_pop_estack_19(v_count, v_idx.0) -> Com_1(eval_pop_estack_stop(v_count, v_idx.0))
		(3, 1)    eval_pop_estack_18(v_count, v_idx.0) -> Com_2(eval_ref_stack_pop_start(v_count, v_idx.0), eval_pop_estack_19(v_count, v_idx.0))
		(?, 1)    eval_pop_estack_bb4_in(v_count, v_idx.0) -> Com_1(eval_pop_estack_bb1_in(v_count, v_idx.0 + 1))
		(?, 1)    eval_pop_estack_14(v_count, v_idx.0) -> Com_1(eval_pop_estack_bb4_in(v_count, v_idx.0))
		(?, 1)    eval_pop_estack_13(v_count, v_idx.0) -> Com_1(eval_pop_estack_14(v_count, v_idx.0))
		(?, 1)    eval_pop_estack_12(v_count, v_idx.0) -> Com_1(eval_pop_estack_13(v_count, v_idx.0))
		(?, 1)    eval_pop_estack_11(v_count, v_idx.0) -> Com_2(eval_ref_stack_pop_start(v_count, v_idx.0), eval_pop_estack_12(v_count, v_idx.0))
		(?, 1)    eval_pop_estack_5(v_count, v_idx.0) -> Com_1(eval_pop_estack_bb4_in(v_count, v_idx.0))
		(?, 1)    eval_pop_estack_5(v_count, v_idx.0) -> Com_1(eval_pop_estack_11(v_count, v_idx.0))
		(?, 1)    eval_pop_estack_4(v_count, v_idx.0) -> Com_2(eval_ref_stack_index_start(v_count, v_idx.0), eval_pop_estack_5(v_count, v_idx.0))
		(3, 1)    eval_pop_estack_bb1_in(v_count, v_idx.0) -> Com_1(eval_pop_estack_18(v_count, v_idx.0)) [ v_idx.0 >= v_count ]
		(?, 1)    eval_pop_estack_bb1_in(v_count, v_idx.0) -> Com_1(eval_pop_estack_4(v_count, v_idx.0)) [ v_idx.0 < v_count ]
		(1, 1)    eval_pop_estack_bb0_in(v_count, v_idx.0) -> Com_1(eval_pop_estack_bb1_in(v_count, 0))
		(1, 1)    eval_pop_estack_start(v_count, v_idx.0) -> Com_1(eval_pop_estack_bb0_in(v_count, v_idx.0))
	start location:	eval_pop_estack_start
	leaf cost:	0

Applied AI with 'oct' on problem 4 to obtain the following invariants:
  For symbol eval_pop_estack_11: X_1 - X_2 - 1 >= 0 /\ X_2 >= 0 /\ X_1 + X_2 - 1 >= 0 /\ X_1 - 1 >= 0
  For symbol eval_pop_estack_12: X_1 - X_2 - 1 >= 0 /\ X_2 >= 0 /\ X_1 + X_2 - 1 >= 0 /\ X_1 - 1 >= 0
  For symbol eval_pop_estack_13: X_1 - X_2 - 1 >= 0 /\ X_2 >= 0 /\ X_1 + X_2 - 1 >= 0 /\ X_1 - 1 >= 0
  For symbol eval_pop_estack_14: X_1 - X_2 - 1 >= 0 /\ X_2 >= 0 /\ X_1 + X_2 - 1 >= 0 /\ X_1 - 1 >= 0
  For symbol eval_pop_estack_18: X_2 >= 0 /\ -X_1 + X_2 >= 0
  For symbol eval_pop_estack_19: X_2 >= 0 /\ -X_1 + X_2 >= 0
  For symbol eval_pop_estack_4: X_1 - X_2 - 1 >= 0 /\ X_2 >= 0 /\ X_1 + X_2 - 1 >= 0 /\ X_1 - 1 >= 0
  For symbol eval_pop_estack_5: X_1 - X_2 - 1 >= 0 /\ X_2 >= 0 /\ X_1 + X_2 - 1 >= 0 /\ X_1 - 1 >= 0
  For symbol eval_pop_estack_bb1_in: X_2 >= 0
  For symbol eval_pop_estack_bb4_in: X_1 - X_2 - 1 >= 0 /\ X_2 >= 0 /\ X_1 + X_2 - 1 >= 0 /\ X_1 - 1 >= 0


This yielded the following problem:
5:	T:
		(1, 1)    eval_pop_estack_start(v_count, v_idx.0) -> Com_1(eval_pop_estack_bb0_in(v_count, v_idx.0))
		(1, 1)    eval_pop_estack_bb0_in(v_count, v_idx.0) -> Com_1(eval_pop_estack_bb1_in(v_count, 0))
		(?, 1)    eval_pop_estack_bb1_in(v_count, v_idx.0) -> Com_1(eval_pop_estack_4(v_count, v_idx.0)) [ v_idx.0 >= 0 /\ v_idx.0 < v_count ]
		(3, 1)    eval_pop_estack_bb1_in(v_count, v_idx.0) -> Com_1(eval_pop_estack_18(v_count, v_idx.0)) [ v_idx.0 >= 0 /\ v_idx.0 >= v_count ]
		(?, 1)    eval_pop_estack_4(v_count, v_idx.0) -> Com_2(eval_ref_stack_index_start(v_count, v_idx.0), eval_pop_estack_5(v_count, v_idx.0)) [ v_count - v_idx.0 - 1 >= 0 /\ v_idx.0 >= 0 /\ v_count + v_idx.0 - 1 >= 0 /\ v_count - 1 >= 0 ]
		(?, 1)    eval_pop_estack_5(v_count, v_idx.0) -> Com_1(eval_pop_estack_11(v_count, v_idx.0)) [ v_count - v_idx.0 - 1 >= 0 /\ v_idx.0 >= 0 /\ v_count + v_idx.0 - 1 >= 0 /\ v_count - 1 >= 0 ]
		(?, 1)    eval_pop_estack_5(v_count, v_idx.0) -> Com_1(eval_pop_estack_bb4_in(v_count, v_idx.0)) [ v_count - v_idx.0 - 1 >= 0 /\ v_idx.0 >= 0 /\ v_count + v_idx.0 - 1 >= 0 /\ v_count - 1 >= 0 ]
		(?, 1)    eval_pop_estack_11(v_count, v_idx.0) -> Com_2(eval_ref_stack_pop_start(v_count, v_idx.0), eval_pop_estack_12(v_count, v_idx.0)) [ v_count - v_idx.0 - 1 >= 0 /\ v_idx.0 >= 0 /\ v_count + v_idx.0 - 1 >= 0 /\ v_count - 1 >= 0 ]
		(?, 1)    eval_pop_estack_12(v_count, v_idx.0) -> Com_1(eval_pop_estack_13(v_count, v_idx.0)) [ v_count - v_idx.0 - 1 >= 0 /\ v_idx.0 >= 0 /\ v_count + v_idx.0 - 1 >= 0 /\ v_count - 1 >= 0 ]
		(?, 1)    eval_pop_estack_13(v_count, v_idx.0) -> Com_1(eval_pop_estack_14(v_count, v_idx.0)) [ v_count - v_idx.0 - 1 >= 0 /\ v_idx.0 >= 0 /\ v_count + v_idx.0 - 1 >= 0 /\ v_count - 1 >= 0 ]
		(?, 1)    eval_pop_estack_14(v_count, v_idx.0) -> Com_1(eval_pop_estack_bb4_in(v_count, v_idx.0)) [ v_count - v_idx.0 - 1 >= 0 /\ v_idx.0 >= 0 /\ v_count + v_idx.0 - 1 >= 0 /\ v_count - 1 >= 0 ]
		(?, 1)    eval_pop_estack_bb4_in(v_count, v_idx.0) -> Com_1(eval_pop_estack_bb1_in(v_count, v_idx.0 + 1)) [ v_count - v_idx.0 - 1 >= 0 /\ v_idx.0 >= 0 /\ v_count + v_idx.0 - 1 >= 0 /\ v_count - 1 >= 0 ]
		(3, 1)    eval_pop_estack_18(v_count, v_idx.0) -> Com_2(eval_ref_stack_pop_start(v_count, v_idx.0), eval_pop_estack_19(v_count, v_idx.0)) [ v_idx.0 >= 0 /\ -v_count + v_idx.0 >= 0 ]
		(3, 1)    eval_pop_estack_19(v_count, v_idx.0) -> Com_1(eval_pop_estack_stop(v_count, v_idx.0)) [ v_idx.0 >= 0 /\ -v_count + v_idx.0 >= 0 ]
	start location:	eval_pop_estack_start
	leaf cost:	0

A polynomial rank function with
	Pol(eval_pop_estack_bb4_in) = 8*V_1 - 8*V_2 - 6
	Pol(eval_pop_estack_bb1_in) = 8*V_1 - 8*V_2 + 1
	Pol(eval_pop_estack_4) = 8*V_1 - 8*V_2
	Pol(eval_pop_estack_5) = 8*V_1 - 8*V_2 - 1
	Pol(eval_pop_estack_11) = 8*V_1 - 8*V_2 - 2
	Pol(eval_ref_stack_index_start) = -8*V_2
	Pol(eval_pop_estack_14) = 8*V_1 - 8*V_2 - 5
	Pol(eval_pop_estack_13) = 8*V_1 - 8*V_2 - 4
	Pol(eval_pop_estack_12) = 8*V_1 - 8*V_2 - 3
	Pol(eval_ref_stack_pop_start) = -8*V_2
and size complexities
	S("eval_pop_estack_19(v_count, v_idx.0) -> Com_1(eval_pop_estack_stop(v_count, v_idx.0)) [ v_idx.0 >= 0 /\\ -v_count + v_idx.0 >= 0 ]", 0-0) = v_count
	S("eval_pop_estack_19(v_count, v_idx.0) -> Com_1(eval_pop_estack_stop(v_count, v_idx.0)) [ v_idx.0 >= 0 /\\ -v_count + v_idx.0 >= 0 ]", 0-1) = v_count
	S("eval_pop_estack_18(v_count, v_idx.0) -> Com_2(eval_ref_stack_pop_start(v_count, v_idx.0), eval_pop_estack_19(v_count, v_idx.0)) [ v_idx.0 >= 0 /\\ -v_count + v_idx.0 >= 0 ]", 0-0) = v_count
	S("eval_pop_estack_18(v_count, v_idx.0) -> Com_2(eval_ref_stack_pop_start(v_count, v_idx.0), eval_pop_estack_19(v_count, v_idx.0)) [ v_idx.0 >= 0 /\\ -v_count + v_idx.0 >= 0 ]", 0-1) = v_count
	S("eval_pop_estack_18(v_count, v_idx.0) -> Com_2(eval_ref_stack_pop_start(v_count, v_idx.0), eval_pop_estack_19(v_count, v_idx.0)) [ v_idx.0 >= 0 /\\ -v_count + v_idx.0 >= 0 ]", 1-0) = v_count
	S("eval_pop_estack_18(v_count, v_idx.0) -> Com_2(eval_ref_stack_pop_start(v_count, v_idx.0), eval_pop_estack_19(v_count, v_idx.0)) [ v_idx.0 >= 0 /\\ -v_count + v_idx.0 >= 0 ]", 1-1) = v_count
	S("eval_pop_estack_bb4_in(v_count, v_idx.0) -> Com_1(eval_pop_estack_bb1_in(v_count, v_idx.0 + 1)) [ v_count - v_idx.0 - 1 >= 0 /\\ v_idx.0 >= 0 /\\ v_count + v_idx.0 - 1 >= 0 /\\ v_count - 1 >= 0 ]", 0-0) = v_count
	S("eval_pop_estack_bb4_in(v_count, v_idx.0) -> Com_1(eval_pop_estack_bb1_in(v_count, v_idx.0 + 1)) [ v_count - v_idx.0 - 1 >= 0 /\\ v_idx.0 >= 0 /\\ v_count + v_idx.0 - 1 >= 0 /\\ v_count - 1 >= 0 ]", 0-1) = v_count
	S("eval_pop_estack_14(v_count, v_idx.0) -> Com_1(eval_pop_estack_bb4_in(v_count, v_idx.0)) [ v_count - v_idx.0 - 1 >= 0 /\\ v_idx.0 >= 0 /\\ v_count + v_idx.0 - 1 >= 0 /\\ v_count - 1 >= 0 ]", 0-0) = v_count
	S("eval_pop_estack_14(v_count, v_idx.0) -> Com_1(eval_pop_estack_bb4_in(v_count, v_idx.0)) [ v_count - v_idx.0 - 1 >= 0 /\\ v_idx.0 >= 0 /\\ v_count + v_idx.0 - 1 >= 0 /\\ v_count - 1 >= 0 ]", 0-1) = v_count
	S("eval_pop_estack_13(v_count, v_idx.0) -> Com_1(eval_pop_estack_14(v_count, v_idx.0)) [ v_count - v_idx.0 - 1 >= 0 /\\ v_idx.0 >= 0 /\\ v_count + v_idx.0 - 1 >= 0 /\\ v_count - 1 >= 0 ]", 0-0) = v_count
	S("eval_pop_estack_13(v_count, v_idx.0) -> Com_1(eval_pop_estack_14(v_count, v_idx.0)) [ v_count - v_idx.0 - 1 >= 0 /\\ v_idx.0 >= 0 /\\ v_count + v_idx.0 - 1 >= 0 /\\ v_count - 1 >= 0 ]", 0-1) = v_count
	S("eval_pop_estack_12(v_count, v_idx.0) -> Com_1(eval_pop_estack_13(v_count, v_idx.0)) [ v_count - v_idx.0 - 1 >= 0 /\\ v_idx.0 >= 0 /\\ v_count + v_idx.0 - 1 >= 0 /\\ v_count - 1 >= 0 ]", 0-0) = v_count
	S("eval_pop_estack_12(v_count, v_idx.0) -> Com_1(eval_pop_estack_13(v_count, v_idx.0)) [ v_count - v_idx.0 - 1 >= 0 /\\ v_idx.0 >= 0 /\\ v_count + v_idx.0 - 1 >= 0 /\\ v_count - 1 >= 0 ]", 0-1) = v_count
	S("eval_pop_estack_11(v_count, v_idx.0) -> Com_2(eval_ref_stack_pop_start(v_count, v_idx.0), eval_pop_estack_12(v_count, v_idx.0)) [ v_count - v_idx.0 - 1 >= 0 /\\ v_idx.0 >= 0 /\\ v_count + v_idx.0 - 1 >= 0 /\\ v_count - 1 >= 0 ]", 0-0) = v_count
	S("eval_pop_estack_11(v_count, v_idx.0) -> Com_2(eval_ref_stack_pop_start(v_count, v_idx.0), eval_pop_estack_12(v_count, v_idx.0)) [ v_count - v_idx.0 - 1 >= 0 /\\ v_idx.0 >= 0 /\\ v_count + v_idx.0 - 1 >= 0 /\\ v_count - 1 >= 0 ]", 0-1) = v_count
	S("eval_pop_estack_11(v_count, v_idx.0) -> Com_2(eval_ref_stack_pop_start(v_count, v_idx.0), eval_pop_estack_12(v_count, v_idx.0)) [ v_count - v_idx.0 - 1 >= 0 /\\ v_idx.0 >= 0 /\\ v_count + v_idx.0 - 1 >= 0 /\\ v_count - 1 >= 0 ]", 1-0) = v_count
	S("eval_pop_estack_11(v_count, v_idx.0) -> Com_2(eval_ref_stack_pop_start(v_count, v_idx.0), eval_pop_estack_12(v_count, v_idx.0)) [ v_count - v_idx.0 - 1 >= 0 /\\ v_idx.0 >= 0 /\\ v_count + v_idx.0 - 1 >= 0 /\\ v_count - 1 >= 0 ]", 1-1) = v_count
	S("eval_pop_estack_5(v_count, v_idx.0) -> Com_1(eval_pop_estack_bb4_in(v_count, v_idx.0)) [ v_count - v_idx.0 - 1 >= 0 /\\ v_idx.0 >= 0 /\\ v_count + v_idx.0 - 1 >= 0 /\\ v_count - 1 >= 0 ]", 0-0) = v_count
	S("eval_pop_estack_5(v_count, v_idx.0) -> Com_1(eval_pop_estack_bb4_in(v_count, v_idx.0)) [ v_count - v_idx.0 - 1 >= 0 /\\ v_idx.0 >= 0 /\\ v_count + v_idx.0 - 1 >= 0 /\\ v_count - 1 >= 0 ]", 0-1) = v_count
	S("eval_pop_estack_5(v_count, v_idx.0) -> Com_1(eval_pop_estack_11(v_count, v_idx.0)) [ v_count - v_idx.0 - 1 >= 0 /\\ v_idx.0 >= 0 /\\ v_count + v_idx.0 - 1 >= 0 /\\ v_count - 1 >= 0 ]", 0-0) = v_count
	S("eval_pop_estack_5(v_count, v_idx.0) -> Com_1(eval_pop_estack_11(v_count, v_idx.0)) [ v_count - v_idx.0 - 1 >= 0 /\\ v_idx.0 >= 0 /\\ v_count + v_idx.0 - 1 >= 0 /\\ v_count - 1 >= 0 ]", 0-1) = v_count
	S("eval_pop_estack_4(v_count, v_idx.0) -> Com_2(eval_ref_stack_index_start(v_count, v_idx.0), eval_pop_estack_5(v_count, v_idx.0)) [ v_count - v_idx.0 - 1 >= 0 /\\ v_idx.0 >= 0 /\\ v_count + v_idx.0 - 1 >= 0 /\\ v_count - 1 >= 0 ]", 0-0) = v_count
	S("eval_pop_estack_4(v_count, v_idx.0) -> Com_2(eval_ref_stack_index_start(v_count, v_idx.0), eval_pop_estack_5(v_count, v_idx.0)) [ v_count - v_idx.0 - 1 >= 0 /\\ v_idx.0 >= 0 /\\ v_count + v_idx.0 - 1 >= 0 /\\ v_count - 1 >= 0 ]", 0-1) = v_count
	S("eval_pop_estack_4(v_count, v_idx.0) -> Com_2(eval_ref_stack_index_start(v_count, v_idx.0), eval_pop_estack_5(v_count, v_idx.0)) [ v_count - v_idx.0 - 1 >= 0 /\\ v_idx.0 >= 0 /\\ v_count + v_idx.0 - 1 >= 0 /\\ v_count - 1 >= 0 ]", 1-0) = v_count
	S("eval_pop_estack_4(v_count, v_idx.0) -> Com_2(eval_ref_stack_index_start(v_count, v_idx.0), eval_pop_estack_5(v_count, v_idx.0)) [ v_count - v_idx.0 - 1 >= 0 /\\ v_idx.0 >= 0 /\\ v_count + v_idx.0 - 1 >= 0 /\\ v_count - 1 >= 0 ]", 1-1) = v_count
	S("eval_pop_estack_bb1_in(v_count, v_idx.0) -> Com_1(eval_pop_estack_18(v_count, v_idx.0)) [ v_idx.0 >= 0 /\\ v_idx.0 >= v_count ]", 0-0) = v_count
	S("eval_pop_estack_bb1_in(v_count, v_idx.0) -> Com_1(eval_pop_estack_18(v_count, v_idx.0)) [ v_idx.0 >= 0 /\\ v_idx.0 >= v_count ]", 0-1) = v_count
	S("eval_pop_estack_bb1_in(v_count, v_idx.0) -> Com_1(eval_pop_estack_4(v_count, v_idx.0)) [ v_idx.0 >= 0 /\\ v_idx.0 < v_count ]", 0-0) = v_count
	S("eval_pop_estack_bb1_in(v_count, v_idx.0) -> Com_1(eval_pop_estack_4(v_count, v_idx.0)) [ v_idx.0 >= 0 /\\ v_idx.0 < v_count ]", 0-1) = v_count
	S("eval_pop_estack_bb0_in(v_count, v_idx.0) -> Com_1(eval_pop_estack_bb1_in(v_count, 0))", 0-0) = v_count
	S("eval_pop_estack_bb0_in(v_count, v_idx.0) -> Com_1(eval_pop_estack_bb1_in(v_count, 0))", 0-1) = 0
	S("eval_pop_estack_start(v_count, v_idx.0) -> Com_1(eval_pop_estack_bb0_in(v_count, v_idx.0))", 0-0) = v_count
	S("eval_pop_estack_start(v_count, v_idx.0) -> Com_1(eval_pop_estack_bb0_in(v_count, v_idx.0))", 0-1) = v_idx.0
orients the transitions
	eval_pop_estack_bb4_in(v_count, v_idx.0) -> Com_1(eval_pop_estack_bb1_in(v_count, v_idx.0 + 1)) [ v_count - v_idx.0 - 1 >= 0 /\ v_idx.0 >= 0 /\ v_count + v_idx.0 - 1 >= 0 /\ v_count - 1 >= 0 ]
	eval_pop_estack_bb1_in(v_count, v_idx.0) -> Com_1(eval_pop_estack_4(v_count, v_idx.0)) [ v_idx.0 >= 0 /\ v_idx.0 < v_count ]
	eval_pop_estack_5(v_count, v_idx.0) -> Com_1(eval_pop_estack_bb4_in(v_count, v_idx.0)) [ v_count - v_idx.0 - 1 >= 0 /\ v_idx.0 >= 0 /\ v_count + v_idx.0 - 1 >= 0 /\ v_count - 1 >= 0 ]
	eval_pop_estack_5(v_count, v_idx.0) -> Com_1(eval_pop_estack_11(v_count, v_idx.0)) [ v_count - v_idx.0 - 1 >= 0 /\ v_idx.0 >= 0 /\ v_count + v_idx.0 - 1 >= 0 /\ v_count - 1 >= 0 ]
	eval_pop_estack_4(v_count, v_idx.0) -> Com_2(eval_ref_stack_index_start(v_count, v_idx.0), eval_pop_estack_5(v_count, v_idx.0)) [ v_count - v_idx.0 - 1 >= 0 /\ v_idx.0 >= 0 /\ v_count + v_idx.0 - 1 >= 0 /\ v_count - 1 >= 0 ]
	eval_pop_estack_14(v_count, v_idx.0) -> Com_1(eval_pop_estack_bb4_in(v_count, v_idx.0)) [ v_count - v_idx.0 - 1 >= 0 /\ v_idx.0 >= 0 /\ v_count + v_idx.0 - 1 >= 0 /\ v_count - 1 >= 0 ]
	eval_pop_estack_13(v_count, v_idx.0) -> Com_1(eval_pop_estack_14(v_count, v_idx.0)) [ v_count - v_idx.0 - 1 >= 0 /\ v_idx.0 >= 0 /\ v_count + v_idx.0 - 1 >= 0 /\ v_count - 1 >= 0 ]
	eval_pop_estack_12(v_count, v_idx.0) -> Com_1(eval_pop_estack_13(v_count, v_idx.0)) [ v_count - v_idx.0 - 1 >= 0 /\ v_idx.0 >= 0 /\ v_count + v_idx.0 - 1 >= 0 /\ v_count - 1 >= 0 ]
	eval_pop_estack_11(v_count, v_idx.0) -> Com_2(eval_ref_stack_pop_start(v_count, v_idx.0), eval_pop_estack_12(v_count, v_idx.0)) [ v_count - v_idx.0 - 1 >= 0 /\ v_idx.0 >= 0 /\ v_count + v_idx.0 - 1 >= 0 /\ v_count - 1 >= 0 ]
weakly and the transitions
	eval_pop_estack_bb4_in(v_count, v_idx.0) -> Com_1(eval_pop_estack_bb1_in(v_count, v_idx.0 + 1)) [ v_count - v_idx.0 - 1 >= 0 /\ v_idx.0 >= 0 /\ v_count + v_idx.0 - 1 >= 0 /\ v_count - 1 >= 0 ]
	eval_pop_estack_bb1_in(v_count, v_idx.0) -> Com_1(eval_pop_estack_4(v_count, v_idx.0)) [ v_idx.0 >= 0 /\ v_idx.0 < v_count ]
	eval_pop_estack_5(v_count, v_idx.0) -> Com_1(eval_pop_estack_bb4_in(v_count, v_idx.0)) [ v_count - v_idx.0 - 1 >= 0 /\ v_idx.0 >= 0 /\ v_count + v_idx.0 - 1 >= 0 /\ v_count - 1 >= 0 ]
	eval_pop_estack_5(v_count, v_idx.0) -> Com_1(eval_pop_estack_11(v_count, v_idx.0)) [ v_count - v_idx.0 - 1 >= 0 /\ v_idx.0 >= 0 /\ v_count + v_idx.0 - 1 >= 0 /\ v_count - 1 >= 0 ]
	eval_pop_estack_4(v_count, v_idx.0) -> Com_2(eval_ref_stack_index_start(v_count, v_idx.0), eval_pop_estack_5(v_count, v_idx.0)) [ v_count - v_idx.0 - 1 >= 0 /\ v_idx.0 >= 0 /\ v_count + v_idx.0 - 1 >= 0 /\ v_count - 1 >= 0 ]
	eval_pop_estack_14(v_count, v_idx.0) -> Com_1(eval_pop_estack_bb4_in(v_count, v_idx.0)) [ v_count - v_idx.0 - 1 >= 0 /\ v_idx.0 >= 0 /\ v_count + v_idx.0 - 1 >= 0 /\ v_count - 1 >= 0 ]
	eval_pop_estack_13(v_count, v_idx.0) -> Com_1(eval_pop_estack_14(v_count, v_idx.0)) [ v_count - v_idx.0 - 1 >= 0 /\ v_idx.0 >= 0 /\ v_count + v_idx.0 - 1 >= 0 /\ v_count - 1 >= 0 ]
	eval_pop_estack_12(v_count, v_idx.0) -> Com_1(eval_pop_estack_13(v_count, v_idx.0)) [ v_count - v_idx.0 - 1 >= 0 /\ v_idx.0 >= 0 /\ v_count + v_idx.0 - 1 >= 0 /\ v_count - 1 >= 0 ]
	eval_pop_estack_11(v_count, v_idx.0) -> Com_2(eval_ref_stack_pop_start(v_count, v_idx.0), eval_pop_estack_12(v_count, v_idx.0)) [ v_count - v_idx.0 - 1 >= 0 /\ v_idx.0 >= 0 /\ v_count + v_idx.0 - 1 >= 0 /\ v_count - 1 >= 0 ]
strictly and produces the following problem:
6:	T:
		(1, 1)                eval_pop_estack_start(v_count, v_idx.0) -> Com_1(eval_pop_estack_bb0_in(v_count, v_idx.0))
		(1, 1)                eval_pop_estack_bb0_in(v_count, v_idx.0) -> Com_1(eval_pop_estack_bb1_in(v_count, 0))
		(8*v_count + 1, 1)    eval_pop_estack_bb1_in(v_count, v_idx.0) -> Com_1(eval_pop_estack_4(v_count, v_idx.0)) [ v_idx.0 >= 0 /\ v_idx.0 < v_count ]
		(3, 1)                eval_pop_estack_bb1_in(v_count, v_idx.0) -> Com_1(eval_pop_estack_18(v_count, v_idx.0)) [ v_idx.0 >= 0 /\ v_idx.0 >= v_count ]
		(8*v_count + 1, 1)    eval_pop_estack_4(v_count, v_idx.0) -> Com_2(eval_ref_stack_index_start(v_count, v_idx.0), eval_pop_estack_5(v_count, v_idx.0)) [ v_count - v_idx.0 - 1 >= 0 /\ v_idx.0 >= 0 /\ v_count + v_idx.0 - 1 >= 0 /\ v_count - 1 >= 0 ]
		(8*v_count + 1, 1)    eval_pop_estack_5(v_count, v_idx.0) -> Com_1(eval_pop_estack_11(v_count, v_idx.0)) [ v_count - v_idx.0 - 1 >= 0 /\ v_idx.0 >= 0 /\ v_count + v_idx.0 - 1 >= 0 /\ v_count - 1 >= 0 ]
		(8*v_count + 1, 1)    eval_pop_estack_5(v_count, v_idx.0) -> Com_1(eval_pop_estack_bb4_in(v_count, v_idx.0)) [ v_count - v_idx.0 - 1 >= 0 /\ v_idx.0 >= 0 /\ v_count + v_idx.0 - 1 >= 0 /\ v_count - 1 >= 0 ]
		(8*v_count + 1, 1)    eval_pop_estack_11(v_count, v_idx.0) -> Com_2(eval_ref_stack_pop_start(v_count, v_idx.0), eval_pop_estack_12(v_count, v_idx.0)) [ v_count - v_idx.0 - 1 >= 0 /\ v_idx.0 >= 0 /\ v_count + v_idx.0 - 1 >= 0 /\ v_count - 1 >= 0 ]
		(8*v_count + 1, 1)    eval_pop_estack_12(v_count, v_idx.0) -> Com_1(eval_pop_estack_13(v_count, v_idx.0)) [ v_count - v_idx.0 - 1 >= 0 /\ v_idx.0 >= 0 /\ v_count + v_idx.0 - 1 >= 0 /\ v_count - 1 >= 0 ]
		(8*v_count + 1, 1)    eval_pop_estack_13(v_count, v_idx.0) -> Com_1(eval_pop_estack_14(v_count, v_idx.0)) [ v_count - v_idx.0 - 1 >= 0 /\ v_idx.0 >= 0 /\ v_count + v_idx.0 - 1 >= 0 /\ v_count - 1 >= 0 ]
		(8*v_count + 1, 1)    eval_pop_estack_14(v_count, v_idx.0) -> Com_1(eval_pop_estack_bb4_in(v_count, v_idx.0)) [ v_count - v_idx.0 - 1 >= 0 /\ v_idx.0 >= 0 /\ v_count + v_idx.0 - 1 >= 0 /\ v_count - 1 >= 0 ]
		(8*v_count + 1, 1)    eval_pop_estack_bb4_in(v_count, v_idx.0) -> Com_1(eval_pop_estack_bb1_in(v_count, v_idx.0 + 1)) [ v_count - v_idx.0 - 1 >= 0 /\ v_idx.0 >= 0 /\ v_count + v_idx.0 - 1 >= 0 /\ v_count - 1 >= 0 ]
		(3, 1)                eval_pop_estack_18(v_count, v_idx.0) -> Com_2(eval_ref_stack_pop_start(v_count, v_idx.0), eval_pop_estack_19(v_count, v_idx.0)) [ v_idx.0 >= 0 /\ -v_count + v_idx.0 >= 0 ]
		(3, 1)                eval_pop_estack_19(v_count, v_idx.0) -> Com_1(eval_pop_estack_stop(v_count, v_idx.0)) [ v_idx.0 >= 0 /\ -v_count + v_idx.0 >= 0 ]
	start location:	eval_pop_estack_start
	leaf cost:	0

Complexity upper bound 72*v_count + 20

Time: 0.393 sec (SMT: 0.330 sec)

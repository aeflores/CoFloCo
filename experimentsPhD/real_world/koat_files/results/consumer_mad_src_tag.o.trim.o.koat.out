MAYBE

Initial complexity problem:
1:	T:
		(1, 1)    eval_trim_start() -> Com_1(eval_trim_bb0_in())
		(?, 1)    eval_trim_bb0_in() -> Com_1(eval_trim_0())
		(?, 1)    eval_trim_0() -> Com_2(eval_strlen_start(), eval_trim_1())
		(?, 1)    eval_trim_1() -> Com_1(eval_trim_bb1_in())
		(?, 1)    eval_trim_bb1_in() -> Com_1(eval_trim_bb1_in())
		(?, 1)    eval_trim_bb1_in() -> Com_1(eval_trim_.critedge_in())
		(?, 1)    eval_trim_.critedge_in() -> Com_1(eval_trim_stop())
	start location:	eval_trim_start
	leaf cost:	0

Repeatedly propagating knowledge in problem 1 produces the following problem:
2:	T:
		(1, 1)    eval_trim_start() -> Com_1(eval_trim_bb0_in())
		(1, 1)    eval_trim_bb0_in() -> Com_1(eval_trim_0())
		(1, 1)    eval_trim_0() -> Com_2(eval_strlen_start(), eval_trim_1())
		(1, 1)    eval_trim_1() -> Com_1(eval_trim_bb1_in())
		(?, 1)    eval_trim_bb1_in() -> Com_1(eval_trim_bb1_in())
		(?, 1)    eval_trim_bb1_in() -> Com_1(eval_trim_.critedge_in())
		(?, 1)    eval_trim_.critedge_in() -> Com_1(eval_trim_stop())
	start location:	eval_trim_start
	leaf cost:	0

A polynomial rank function with
	Pol(eval_trim_start) = 2
	Pol(eval_trim_bb0_in) = 2
	Pol(eval_trim_0) = 2
	Pol(eval_strlen_start) = 0
	Pol(eval_trim_1) = 2
	Pol(eval_trim_bb1_in) = 2
	Pol(eval_trim_.critedge_in) = 1
	Pol(eval_trim_stop) = 0
orients all transitions weakly and the transitions
	eval_trim_bb1_in() -> Com_1(eval_trim_.critedge_in())
	eval_trim_.critedge_in() -> Com_1(eval_trim_stop())
strictly and produces the following problem:
3:	T:
		(1, 1)    eval_trim_start() -> Com_1(eval_trim_bb0_in())
		(1, 1)    eval_trim_bb0_in() -> Com_1(eval_trim_0())
		(1, 1)    eval_trim_0() -> Com_2(eval_strlen_start(), eval_trim_1())
		(1, 1)    eval_trim_1() -> Com_1(eval_trim_bb1_in())
		(?, 1)    eval_trim_bb1_in() -> Com_1(eval_trim_bb1_in())
		(2, 1)    eval_trim_bb1_in() -> Com_1(eval_trim_.critedge_in())
		(2, 1)    eval_trim_.critedge_in() -> Com_1(eval_trim_stop())
	start location:	eval_trim_start
	leaf cost:	0

By chaining the transition eval_trim_start() -> Com_1(eval_trim_bb0_in()) with all transitions in problem 3, the following new transition is obtained:
	eval_trim_start() -> Com_1(eval_trim_0())
We thus obtain the following problem:
4:	T:
		(1, 2)    eval_trim_start() -> Com_1(eval_trim_0())
		(1, 1)    eval_trim_bb0_in() -> Com_1(eval_trim_0())
		(1, 1)    eval_trim_0() -> Com_2(eval_strlen_start(), eval_trim_1())
		(1, 1)    eval_trim_1() -> Com_1(eval_trim_bb1_in())
		(?, 1)    eval_trim_bb1_in() -> Com_1(eval_trim_bb1_in())
		(2, 1)    eval_trim_bb1_in() -> Com_1(eval_trim_.critedge_in())
		(2, 1)    eval_trim_.critedge_in() -> Com_1(eval_trim_stop())
	start location:	eval_trim_start
	leaf cost:	0

Testing for reachability in the complexity graph removes the following transition from problem 4:
	eval_trim_bb0_in() -> Com_1(eval_trim_0())
We thus obtain the following problem:
5:	T:
		(2, 1)    eval_trim_.critedge_in() -> Com_1(eval_trim_stop())
		(2, 1)    eval_trim_bb1_in() -> Com_1(eval_trim_.critedge_in())
		(?, 1)    eval_trim_bb1_in() -> Com_1(eval_trim_bb1_in())
		(1, 1)    eval_trim_1() -> Com_1(eval_trim_bb1_in())
		(1, 1)    eval_trim_0() -> Com_2(eval_strlen_start(), eval_trim_1())
		(1, 2)    eval_trim_start() -> Com_1(eval_trim_0())
	start location:	eval_trim_start
	leaf cost:	0

By chaining the transition eval_trim_bb1_in() -> Com_1(eval_trim_.critedge_in()) with all transitions in problem 5, the following new transition is obtained:
	eval_trim_bb1_in() -> Com_1(eval_trim_stop())
We thus obtain the following problem:
6:	T:
		(2, 2)    eval_trim_bb1_in() -> Com_1(eval_trim_stop())
		(2, 1)    eval_trim_.critedge_in() -> Com_1(eval_trim_stop())
		(?, 1)    eval_trim_bb1_in() -> Com_1(eval_trim_bb1_in())
		(1, 1)    eval_trim_1() -> Com_1(eval_trim_bb1_in())
		(1, 1)    eval_trim_0() -> Com_2(eval_strlen_start(), eval_trim_1())
		(1, 2)    eval_trim_start() -> Com_1(eval_trim_0())
	start location:	eval_trim_start
	leaf cost:	0

Testing for reachability in the complexity graph removes the following transition from problem 6:
	eval_trim_.critedge_in() -> Com_1(eval_trim_stop())
We thus obtain the following problem:
7:	T:
		(2, 2)    eval_trim_bb1_in() -> Com_1(eval_trim_stop())
		(?, 1)    eval_trim_bb1_in() -> Com_1(eval_trim_bb1_in())
		(1, 1)    eval_trim_1() -> Com_1(eval_trim_bb1_in())
		(1, 1)    eval_trim_0() -> Com_2(eval_strlen_start(), eval_trim_1())
		(1, 2)    eval_trim_start() -> Com_1(eval_trim_0())
	start location:	eval_trim_start
	leaf cost:	0

By chaining the transition eval_trim_start() -> Com_1(eval_trim_0()) with all transitions in problem 7, the following new transition is obtained:
	eval_trim_start() -> Com_2(eval_strlen_start(), eval_trim_1())
We thus obtain the following problem:
8:	T:
		(1, 3)    eval_trim_start() -> Com_2(eval_strlen_start(), eval_trim_1())
		(2, 2)    eval_trim_bb1_in() -> Com_1(eval_trim_stop())
		(?, 1)    eval_trim_bb1_in() -> Com_1(eval_trim_bb1_in())
		(1, 1)    eval_trim_1() -> Com_1(eval_trim_bb1_in())
		(1, 1)    eval_trim_0() -> Com_2(eval_strlen_start(), eval_trim_1())
	start location:	eval_trim_start
	leaf cost:	0

Testing for reachability in the complexity graph removes the following transition from problem 8:
	eval_trim_0() -> Com_2(eval_strlen_start(), eval_trim_1())
We thus obtain the following problem:
9:	T:
		(2, 2)    eval_trim_bb1_in() -> Com_1(eval_trim_stop())
		(?, 1)    eval_trim_bb1_in() -> Com_1(eval_trim_bb1_in())
		(1, 1)    eval_trim_1() -> Com_1(eval_trim_bb1_in())
		(1, 3)    eval_trim_start() -> Com_2(eval_strlen_start(), eval_trim_1())
	start location:	eval_trim_start
	leaf cost:	0

Complexity upper bound ?

Time: 0.030 sec (SMT: 0.028 sec)

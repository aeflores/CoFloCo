YES(?, 127)

Initial complexity problem:
1:	T:
		(1, 1)    eval_ideaCipher_start(v_.sink2.sink, v_163, v_r.0, v_x1.0, v_x4.0) -> eval_ideaCipher_bb0_in(v_.sink2.sink, v_163, v_r.0, v_x1.0, v_x4.0)
		(?, 1)    eval_ideaCipher_bb0_in(v_.sink2.sink, v_163, v_r.0, v_x1.0, v_x4.0) -> eval_ideaCipher_bb1_in(v_.sink2.sink, v_163, 8, nondef.6, nondef.15)
		(?, 1)    eval_ideaCipher_bb1_in(v_.sink2.sink, v_163, v_r.0, v_x1.0, v_x4.0) -> eval_ideaCipher_bb6_in(v_.sink2.sink, v_163, v_r.0, v_x1.0, v_x4.0)
		(?, 1)    eval_ideaCipher_bb6_in(v_.sink2.sink, v_163, v_r.0, v_x1.0, v_x4.0) -> eval_ideaCipher_bb11_in(v_.sink2.sink, v_163, v_r.0, v_x1.0, v_x4.0)
		(?, 1)    eval_ideaCipher_bb11_in(v_.sink2.sink, v_163, v_r.0, v_x1.0, v_x4.0) -> eval_ideaCipher_bb16_in(nondef.22*nondef.23 - nondef.24, v_163, v_r.0, v_x1.0, v_x4.0) [ nondef.22*nondef.23 >= nondef.24 ]
		(?, 1)    eval_ideaCipher_bb11_in(v_.sink2.sink, v_163, v_r.0, v_x1.0, v_x4.0) -> eval_ideaCipher_bb16_in(nondef.22*nondef.23 - nondef.24 + 1, v_163, v_r.0, v_x1.0, v_x4.0) [ nondef.22*nondef.23 < nondef.24 ]
		(?, 1)    eval_ideaCipher_bb11_in(v_.sink2.sink, v_163, v_r.0, v_x1.0, v_x4.0) -> eval_ideaCipher_bb16_in(-nondef.23 + 1, v_163, v_r.0, v_x1.0, v_x4.0)
		(?, 1)    eval_ideaCipher_bb11_in(v_.sink2.sink, v_163, v_r.0, v_x1.0, v_x4.0) -> eval_ideaCipher_bb16_in(-nondef.22 + 1, v_163, v_r.0, v_x1.0, v_x4.0)
		(?, 1)    eval_ideaCipher_bb16_in(v_.sink2.sink, v_163, v_r.0, v_x1.0, v_x4.0) -> eval_ideaCipher_bb21_in(v_.sink2.sink, v_163, v_r.0, v_x1.0, v_x4.0)
		(?, 1)    eval_ideaCipher_bb21_in(v_.sink2.sink, v_163, v_r.0, v_x1.0, v_x4.0) -> eval_ideaCipher_bb1_in(v_.sink2.sink, v_163, v_r.0 - 1, nondef.28, nondef.29) [ v_r.0 - 1 < 0 ]
		(?, 1)    eval_ideaCipher_bb21_in(v_.sink2.sink, v_163, v_r.0, v_x1.0, v_x4.0) -> eval_ideaCipher_bb1_in(v_.sink2.sink, v_163, v_r.0 - 1, nondef.28, nondef.29) [ v_r.0 - 1 > 0 ]
		(?, 1)    eval_ideaCipher_bb21_in(v_.sink2.sink, v_163, v_r.0, v_x1.0, v_x4.0) -> eval_ideaCipher_bb27_in(v_.sink2.sink, nondef.29, v_r.0, v_x1.0, v_x4.0) [ v_r.0 - 1 = 0 ]
		(?, 1)    eval_ideaCipher_bb27_in(v_.sink2.sink, v_163, v_r.0, v_x1.0, v_x4.0) -> eval_ideaCipher_bb32_in(v_.sink2.sink, v_163, v_r.0, v_x1.0, v_x4.0)
		(?, 1)    eval_ideaCipher_bb32_in(v_.sink2.sink, v_163, v_r.0, v_x1.0, v_x4.0) -> eval_ideaCipher_stop(v_.sink2.sink, v_163, v_r.0, v_x1.0, v_x4.0)
	start location:	eval_ideaCipher_start
	leaf cost:	0

Slicing away variables that do not contribute to conditions from problem 1 leaves variables [v_r.0].
We thus obtain the following problem:
2:	T:
		(?, 1)    eval_ideaCipher_bb32_in(v_r.0) -> eval_ideaCipher_stop(v_r.0)
		(?, 1)    eval_ideaCipher_bb27_in(v_r.0) -> eval_ideaCipher_bb32_in(v_r.0)
		(?, 1)    eval_ideaCipher_bb21_in(v_r.0) -> eval_ideaCipher_bb27_in(v_r.0) [ v_r.0 - 1 = 0 ]
		(?, 1)    eval_ideaCipher_bb21_in(v_r.0) -> eval_ideaCipher_bb1_in(v_r.0 - 1) [ v_r.0 - 1 > 0 ]
		(?, 1)    eval_ideaCipher_bb21_in(v_r.0) -> eval_ideaCipher_bb1_in(v_r.0 - 1) [ v_r.0 - 1 < 0 ]
		(?, 1)    eval_ideaCipher_bb16_in(v_r.0) -> eval_ideaCipher_bb21_in(v_r.0)
		(?, 1)    eval_ideaCipher_bb11_in(v_r.0) -> eval_ideaCipher_bb16_in(v_r.0)
		(?, 1)    eval_ideaCipher_bb11_in(v_r.0) -> eval_ideaCipher_bb16_in(v_r.0)
		(?, 1)    eval_ideaCipher_bb11_in(v_r.0) -> eval_ideaCipher_bb16_in(v_r.0) [ nondef.22*nondef.23 < nondef.24 ]
		(?, 1)    eval_ideaCipher_bb11_in(v_r.0) -> eval_ideaCipher_bb16_in(v_r.0) [ nondef.22*nondef.23 >= nondef.24 ]
		(?, 1)    eval_ideaCipher_bb6_in(v_r.0) -> eval_ideaCipher_bb11_in(v_r.0)
		(?, 1)    eval_ideaCipher_bb1_in(v_r.0) -> eval_ideaCipher_bb6_in(v_r.0)
		(?, 1)    eval_ideaCipher_bb0_in(v_r.0) -> eval_ideaCipher_bb1_in(8)
		(1, 1)    eval_ideaCipher_start(v_r.0) -> eval_ideaCipher_bb0_in(v_r.0)
	start location:	eval_ideaCipher_start
	leaf cost:	0

Repeatedly removing leaves of the complexity graph in problem 2 produces the following problem:
3:	T:
		(?, 1)    eval_ideaCipher_bb21_in(v_r.0) -> eval_ideaCipher_bb1_in(v_r.0 - 1) [ v_r.0 - 1 > 0 ]
		(?, 1)    eval_ideaCipher_bb21_in(v_r.0) -> eval_ideaCipher_bb1_in(v_r.0 - 1) [ v_r.0 - 1 < 0 ]
		(?, 1)    eval_ideaCipher_bb16_in(v_r.0) -> eval_ideaCipher_bb21_in(v_r.0)
		(?, 1)    eval_ideaCipher_bb11_in(v_r.0) -> eval_ideaCipher_bb16_in(v_r.0)
		(?, 1)    eval_ideaCipher_bb11_in(v_r.0) -> eval_ideaCipher_bb16_in(v_r.0)
		(?, 1)    eval_ideaCipher_bb11_in(v_r.0) -> eval_ideaCipher_bb16_in(v_r.0) [ nondef.22*nondef.23 < nondef.24 ]
		(?, 1)    eval_ideaCipher_bb11_in(v_r.0) -> eval_ideaCipher_bb16_in(v_r.0) [ nondef.22*nondef.23 >= nondef.24 ]
		(?, 1)    eval_ideaCipher_bb6_in(v_r.0) -> eval_ideaCipher_bb11_in(v_r.0)
		(?, 1)    eval_ideaCipher_bb1_in(v_r.0) -> eval_ideaCipher_bb6_in(v_r.0)
		(?, 1)    eval_ideaCipher_bb0_in(v_r.0) -> eval_ideaCipher_bb1_in(8)
		(1, 1)    eval_ideaCipher_start(v_r.0) -> eval_ideaCipher_bb0_in(v_r.0)
	start location:	eval_ideaCipher_start
	leaf cost:	3

Repeatedly propagating knowledge in problem 3 produces the following problem:
4:	T:
		(?, 1)    eval_ideaCipher_bb21_in(v_r.0) -> eval_ideaCipher_bb1_in(v_r.0 - 1) [ v_r.0 - 1 > 0 ]
		(?, 1)    eval_ideaCipher_bb21_in(v_r.0) -> eval_ideaCipher_bb1_in(v_r.0 - 1) [ v_r.0 - 1 < 0 ]
		(?, 1)    eval_ideaCipher_bb16_in(v_r.0) -> eval_ideaCipher_bb21_in(v_r.0)
		(?, 1)    eval_ideaCipher_bb11_in(v_r.0) -> eval_ideaCipher_bb16_in(v_r.0)
		(?, 1)    eval_ideaCipher_bb11_in(v_r.0) -> eval_ideaCipher_bb16_in(v_r.0)
		(?, 1)    eval_ideaCipher_bb11_in(v_r.0) -> eval_ideaCipher_bb16_in(v_r.0) [ nondef.22*nondef.23 < nondef.24 ]
		(?, 1)    eval_ideaCipher_bb11_in(v_r.0) -> eval_ideaCipher_bb16_in(v_r.0) [ nondef.22*nondef.23 >= nondef.24 ]
		(?, 1)    eval_ideaCipher_bb6_in(v_r.0) -> eval_ideaCipher_bb11_in(v_r.0)
		(?, 1)    eval_ideaCipher_bb1_in(v_r.0) -> eval_ideaCipher_bb6_in(v_r.0)
		(1, 1)    eval_ideaCipher_bb0_in(v_r.0) -> eval_ideaCipher_bb1_in(8)
		(1, 1)    eval_ideaCipher_start(v_r.0) -> eval_ideaCipher_bb0_in(v_r.0)
	start location:	eval_ideaCipher_start
	leaf cost:	3

A polynomial rank function with
	Pol(eval_ideaCipher_bb21_in) = V_1
	Pol(eval_ideaCipher_bb1_in) = V_1
	Pol(eval_ideaCipher_bb16_in) = V_1
	Pol(eval_ideaCipher_bb11_in) = V_1
	Pol(eval_ideaCipher_bb6_in) = V_1
	Pol(eval_ideaCipher_bb0_in) = 8
	Pol(eval_ideaCipher_start) = 8
orients all transitions weakly and the transition
	eval_ideaCipher_bb21_in(v_r.0) -> eval_ideaCipher_bb1_in(v_r.0 - 1) [ v_r.0 - 1 > 0 ]
strictly and produces the following problem:
5:	T:
		(8, 1)    eval_ideaCipher_bb21_in(v_r.0) -> eval_ideaCipher_bb1_in(v_r.0 - 1) [ v_r.0 - 1 > 0 ]
		(?, 1)    eval_ideaCipher_bb21_in(v_r.0) -> eval_ideaCipher_bb1_in(v_r.0 - 1) [ v_r.0 - 1 < 0 ]
		(?, 1)    eval_ideaCipher_bb16_in(v_r.0) -> eval_ideaCipher_bb21_in(v_r.0)
		(?, 1)    eval_ideaCipher_bb11_in(v_r.0) -> eval_ideaCipher_bb16_in(v_r.0)
		(?, 1)    eval_ideaCipher_bb11_in(v_r.0) -> eval_ideaCipher_bb16_in(v_r.0)
		(?, 1)    eval_ideaCipher_bb11_in(v_r.0) -> eval_ideaCipher_bb16_in(v_r.0) [ nondef.22*nondef.23 < nondef.24 ]
		(?, 1)    eval_ideaCipher_bb11_in(v_r.0) -> eval_ideaCipher_bb16_in(v_r.0) [ nondef.22*nondef.23 >= nondef.24 ]
		(?, 1)    eval_ideaCipher_bb6_in(v_r.0) -> eval_ideaCipher_bb11_in(v_r.0)
		(?, 1)    eval_ideaCipher_bb1_in(v_r.0) -> eval_ideaCipher_bb6_in(v_r.0)
		(1, 1)    eval_ideaCipher_bb0_in(v_r.0) -> eval_ideaCipher_bb1_in(8)
		(1, 1)    eval_ideaCipher_start(v_r.0) -> eval_ideaCipher_bb0_in(v_r.0)
	start location:	eval_ideaCipher_start
	leaf cost:	3

Applied AI with 'oct' on problem 5 to obtain the following invariants:
  For symbol eval_ideaCipher_bb11_in: -X_1 + 8 >= 0
  For symbol eval_ideaCipher_bb16_in: -X_1 + 8 >= 0
  For symbol eval_ideaCipher_bb1_in: -X_1 + 8 >= 0
  For symbol eval_ideaCipher_bb21_in: -X_1 + 8 >= 0
  For symbol eval_ideaCipher_bb6_in: -X_1 + 8 >= 0


This yielded the following problem:
6:	T:
		(1, 1)    eval_ideaCipher_start(v_r.0) -> eval_ideaCipher_bb0_in(v_r.0)
		(1, 1)    eval_ideaCipher_bb0_in(v_r.0) -> eval_ideaCipher_bb1_in(8)
		(?, 1)    eval_ideaCipher_bb1_in(v_r.0) -> eval_ideaCipher_bb6_in(v_r.0) [ -v_r.0 + 8 >= 0 ]
		(?, 1)    eval_ideaCipher_bb6_in(v_r.0) -> eval_ideaCipher_bb11_in(v_r.0) [ -v_r.0 + 8 >= 0 ]
		(?, 1)    eval_ideaCipher_bb11_in(v_r.0) -> eval_ideaCipher_bb16_in(v_r.0) [ -v_r.0 + 8 >= 0 /\ nondef.22*nondef.23 >= nondef.24 ]
		(?, 1)    eval_ideaCipher_bb11_in(v_r.0) -> eval_ideaCipher_bb16_in(v_r.0) [ -v_r.0 + 8 >= 0 /\ nondef.22*nondef.23 < nondef.24 ]
		(?, 1)    eval_ideaCipher_bb11_in(v_r.0) -> eval_ideaCipher_bb16_in(v_r.0) [ -v_r.0 + 8 >= 0 ]
		(?, 1)    eval_ideaCipher_bb11_in(v_r.0) -> eval_ideaCipher_bb16_in(v_r.0) [ -v_r.0 + 8 >= 0 ]
		(?, 1)    eval_ideaCipher_bb16_in(v_r.0) -> eval_ideaCipher_bb21_in(v_r.0) [ -v_r.0 + 8 >= 0 ]
		(?, 1)    eval_ideaCipher_bb21_in(v_r.0) -> eval_ideaCipher_bb1_in(v_r.0 - 1) [ -v_r.0 + 8 >= 0 /\ v_r.0 - 1 < 0 ]
		(8, 1)    eval_ideaCipher_bb21_in(v_r.0) -> eval_ideaCipher_bb1_in(v_r.0 - 1) [ -v_r.0 + 8 >= 0 /\ v_r.0 - 1 > 0 ]
	start location:	eval_ideaCipher_start
	leaf cost:	3

By chaining the transition eval_ideaCipher_start(v_r.0) -> eval_ideaCipher_bb0_in(v_r.0) with all transitions in problem 6, the following new transition is obtained:
	eval_ideaCipher_start(v_r.0) -> eval_ideaCipher_bb1_in(8)
We thus obtain the following problem:
7:	T:
		(1, 2)    eval_ideaCipher_start(v_r.0) -> eval_ideaCipher_bb1_in(8)
		(1, 1)    eval_ideaCipher_bb0_in(v_r.0) -> eval_ideaCipher_bb1_in(8)
		(?, 1)    eval_ideaCipher_bb1_in(v_r.0) -> eval_ideaCipher_bb6_in(v_r.0) [ -v_r.0 + 8 >= 0 ]
		(?, 1)    eval_ideaCipher_bb6_in(v_r.0) -> eval_ideaCipher_bb11_in(v_r.0) [ -v_r.0 + 8 >= 0 ]
		(?, 1)    eval_ideaCipher_bb11_in(v_r.0) -> eval_ideaCipher_bb16_in(v_r.0) [ -v_r.0 + 8 >= 0 /\ nondef.22*nondef.23 >= nondef.24 ]
		(?, 1)    eval_ideaCipher_bb11_in(v_r.0) -> eval_ideaCipher_bb16_in(v_r.0) [ -v_r.0 + 8 >= 0 /\ nondef.22*nondef.23 < nondef.24 ]
		(?, 1)    eval_ideaCipher_bb11_in(v_r.0) -> eval_ideaCipher_bb16_in(v_r.0) [ -v_r.0 + 8 >= 0 ]
		(?, 1)    eval_ideaCipher_bb11_in(v_r.0) -> eval_ideaCipher_bb16_in(v_r.0) [ -v_r.0 + 8 >= 0 ]
		(?, 1)    eval_ideaCipher_bb16_in(v_r.0) -> eval_ideaCipher_bb21_in(v_r.0) [ -v_r.0 + 8 >= 0 ]
		(?, 1)    eval_ideaCipher_bb21_in(v_r.0) -> eval_ideaCipher_bb1_in(v_r.0 - 1) [ -v_r.0 + 8 >= 0 /\ v_r.0 - 1 < 0 ]
		(8, 1)    eval_ideaCipher_bb21_in(v_r.0) -> eval_ideaCipher_bb1_in(v_r.0 - 1) [ -v_r.0 + 8 >= 0 /\ v_r.0 - 1 > 0 ]
	start location:	eval_ideaCipher_start
	leaf cost:	3

Testing for reachability in the complexity graph removes the following transition from problem 7:
	eval_ideaCipher_bb0_in(v_r.0) -> eval_ideaCipher_bb1_in(8)
We thus obtain the following problem:
8:	T:
		(8, 1)    eval_ideaCipher_bb21_in(v_r.0) -> eval_ideaCipher_bb1_in(v_r.0 - 1) [ -v_r.0 + 8 >= 0 /\ v_r.0 - 1 > 0 ]
		(?, 1)    eval_ideaCipher_bb21_in(v_r.0) -> eval_ideaCipher_bb1_in(v_r.0 - 1) [ -v_r.0 + 8 >= 0 /\ v_r.0 - 1 < 0 ]
		(?, 1)    eval_ideaCipher_bb16_in(v_r.0) -> eval_ideaCipher_bb21_in(v_r.0) [ -v_r.0 + 8 >= 0 ]
		(?, 1)    eval_ideaCipher_bb11_in(v_r.0) -> eval_ideaCipher_bb16_in(v_r.0) [ -v_r.0 + 8 >= 0 ]
		(?, 1)    eval_ideaCipher_bb11_in(v_r.0) -> eval_ideaCipher_bb16_in(v_r.0) [ -v_r.0 + 8 >= 0 ]
		(?, 1)    eval_ideaCipher_bb11_in(v_r.0) -> eval_ideaCipher_bb16_in(v_r.0) [ -v_r.0 + 8 >= 0 /\ nondef.22*nondef.23 < nondef.24 ]
		(?, 1)    eval_ideaCipher_bb11_in(v_r.0) -> eval_ideaCipher_bb16_in(v_r.0) [ -v_r.0 + 8 >= 0 /\ nondef.22*nondef.23 >= nondef.24 ]
		(?, 1)    eval_ideaCipher_bb6_in(v_r.0) -> eval_ideaCipher_bb11_in(v_r.0) [ -v_r.0 + 8 >= 0 ]
		(?, 1)    eval_ideaCipher_bb1_in(v_r.0) -> eval_ideaCipher_bb6_in(v_r.0) [ -v_r.0 + 8 >= 0 ]
		(1, 2)    eval_ideaCipher_start(v_r.0) -> eval_ideaCipher_bb1_in(8)
	start location:	eval_ideaCipher_start
	leaf cost:	3

By chaining the transition eval_ideaCipher_bb21_in(v_r.0) -> eval_ideaCipher_bb1_in(v_r.0 - 1) [ -v_r.0 + 8 >= 0 /\ v_r.0 - 1 > 0 ] with all transitions in problem 8, the following new transition is obtained:
	eval_ideaCipher_bb21_in(v_r.0) -> eval_ideaCipher_bb6_in(v_r.0 - 1) [ -v_r.0 + 8 >= 0 /\ v_r.0 - 1 > 0 /\ -v_r.0 + 9 >= 0 ]
We thus obtain the following problem:
9:	T:
		(8, 2)    eval_ideaCipher_bb21_in(v_r.0) -> eval_ideaCipher_bb6_in(v_r.0 - 1) [ -v_r.0 + 8 >= 0 /\ v_r.0 - 1 > 0 /\ -v_r.0 + 9 >= 0 ]
		(?, 1)    eval_ideaCipher_bb21_in(v_r.0) -> eval_ideaCipher_bb1_in(v_r.0 - 1) [ -v_r.0 + 8 >= 0 /\ v_r.0 - 1 < 0 ]
		(?, 1)    eval_ideaCipher_bb16_in(v_r.0) -> eval_ideaCipher_bb21_in(v_r.0) [ -v_r.0 + 8 >= 0 ]
		(?, 1)    eval_ideaCipher_bb11_in(v_r.0) -> eval_ideaCipher_bb16_in(v_r.0) [ -v_r.0 + 8 >= 0 ]
		(?, 1)    eval_ideaCipher_bb11_in(v_r.0) -> eval_ideaCipher_bb16_in(v_r.0) [ -v_r.0 + 8 >= 0 ]
		(?, 1)    eval_ideaCipher_bb11_in(v_r.0) -> eval_ideaCipher_bb16_in(v_r.0) [ -v_r.0 + 8 >= 0 /\ nondef.22*nondef.23 < nondef.24 ]
		(?, 1)    eval_ideaCipher_bb11_in(v_r.0) -> eval_ideaCipher_bb16_in(v_r.0) [ -v_r.0 + 8 >= 0 /\ nondef.22*nondef.23 >= nondef.24 ]
		(?, 1)    eval_ideaCipher_bb6_in(v_r.0) -> eval_ideaCipher_bb11_in(v_r.0) [ -v_r.0 + 8 >= 0 ]
		(?, 1)    eval_ideaCipher_bb1_in(v_r.0) -> eval_ideaCipher_bb6_in(v_r.0) [ -v_r.0 + 8 >= 0 ]
		(1, 2)    eval_ideaCipher_start(v_r.0) -> eval_ideaCipher_bb1_in(8)
	start location:	eval_ideaCipher_start
	leaf cost:	3

By chaining the transition eval_ideaCipher_bb21_in(v_r.0) -> eval_ideaCipher_bb6_in(v_r.0 - 1) [ -v_r.0 + 8 >= 0 /\ v_r.0 - 1 > 0 /\ -v_r.0 + 9 >= 0 ] with all transitions in problem 9, the following new transition is obtained:
	eval_ideaCipher_bb21_in(v_r.0) -> eval_ideaCipher_bb11_in(v_r.0 - 1) [ -v_r.0 + 8 >= 0 /\ v_r.0 - 1 > 0 /\ -v_r.0 + 9 >= 0 ]
We thus obtain the following problem:
10:	T:
		(8, 3)    eval_ideaCipher_bb21_in(v_r.0) -> eval_ideaCipher_bb11_in(v_r.0 - 1) [ -v_r.0 + 8 >= 0 /\ v_r.0 - 1 > 0 /\ -v_r.0 + 9 >= 0 ]
		(?, 1)    eval_ideaCipher_bb21_in(v_r.0) -> eval_ideaCipher_bb1_in(v_r.0 - 1) [ -v_r.0 + 8 >= 0 /\ v_r.0 - 1 < 0 ]
		(?, 1)    eval_ideaCipher_bb16_in(v_r.0) -> eval_ideaCipher_bb21_in(v_r.0) [ -v_r.0 + 8 >= 0 ]
		(?, 1)    eval_ideaCipher_bb11_in(v_r.0) -> eval_ideaCipher_bb16_in(v_r.0) [ -v_r.0 + 8 >= 0 ]
		(?, 1)    eval_ideaCipher_bb11_in(v_r.0) -> eval_ideaCipher_bb16_in(v_r.0) [ -v_r.0 + 8 >= 0 ]
		(?, 1)    eval_ideaCipher_bb11_in(v_r.0) -> eval_ideaCipher_bb16_in(v_r.0) [ -v_r.0 + 8 >= 0 /\ nondef.22*nondef.23 < nondef.24 ]
		(?, 1)    eval_ideaCipher_bb11_in(v_r.0) -> eval_ideaCipher_bb16_in(v_r.0) [ -v_r.0 + 8 >= 0 /\ nondef.22*nondef.23 >= nondef.24 ]
		(?, 1)    eval_ideaCipher_bb6_in(v_r.0) -> eval_ideaCipher_bb11_in(v_r.0) [ -v_r.0 + 8 >= 0 ]
		(?, 1)    eval_ideaCipher_bb1_in(v_r.0) -> eval_ideaCipher_bb6_in(v_r.0) [ -v_r.0 + 8 >= 0 ]
		(1, 2)    eval_ideaCipher_start(v_r.0) -> eval_ideaCipher_bb1_in(8)
	start location:	eval_ideaCipher_start
	leaf cost:	3

By chaining the transition eval_ideaCipher_bb21_in(v_r.0) -> eval_ideaCipher_bb1_in(v_r.0 - 1) [ -v_r.0 + 8 >= 0 /\ v_r.0 - 1 < 0 ] with all transitions in problem 10, the following new transition is obtained:
	eval_ideaCipher_bb21_in(v_r.0) -> eval_ideaCipher_bb6_in(v_r.0 - 1) [ -v_r.0 + 8 >= 0 /\ v_r.0 - 1 < 0 /\ -v_r.0 + 9 >= 0 ]
We thus obtain the following problem:
11:	T:
		(?, 2)    eval_ideaCipher_bb21_in(v_r.0) -> eval_ideaCipher_bb6_in(v_r.0 - 1) [ -v_r.0 + 8 >= 0 /\ v_r.0 - 1 < 0 /\ -v_r.0 + 9 >= 0 ]
		(8, 3)    eval_ideaCipher_bb21_in(v_r.0) -> eval_ideaCipher_bb11_in(v_r.0 - 1) [ -v_r.0 + 8 >= 0 /\ v_r.0 - 1 > 0 /\ -v_r.0 + 9 >= 0 ]
		(?, 1)    eval_ideaCipher_bb16_in(v_r.0) -> eval_ideaCipher_bb21_in(v_r.0) [ -v_r.0 + 8 >= 0 ]
		(?, 1)    eval_ideaCipher_bb11_in(v_r.0) -> eval_ideaCipher_bb16_in(v_r.0) [ -v_r.0 + 8 >= 0 ]
		(?, 1)    eval_ideaCipher_bb11_in(v_r.0) -> eval_ideaCipher_bb16_in(v_r.0) [ -v_r.0 + 8 >= 0 ]
		(?, 1)    eval_ideaCipher_bb11_in(v_r.0) -> eval_ideaCipher_bb16_in(v_r.0) [ -v_r.0 + 8 >= 0 /\ nondef.22*nondef.23 < nondef.24 ]
		(?, 1)    eval_ideaCipher_bb11_in(v_r.0) -> eval_ideaCipher_bb16_in(v_r.0) [ -v_r.0 + 8 >= 0 /\ nondef.22*nondef.23 >= nondef.24 ]
		(?, 1)    eval_ideaCipher_bb6_in(v_r.0) -> eval_ideaCipher_bb11_in(v_r.0) [ -v_r.0 + 8 >= 0 ]
		(?, 1)    eval_ideaCipher_bb1_in(v_r.0) -> eval_ideaCipher_bb6_in(v_r.0) [ -v_r.0 + 8 >= 0 ]
		(1, 2)    eval_ideaCipher_start(v_r.0) -> eval_ideaCipher_bb1_in(8)
	start location:	eval_ideaCipher_start
	leaf cost:	3

Repeatedly propagating knowledge in problem 11 produces the following problem:
12:	T:
		(?, 2)    eval_ideaCipher_bb21_in(v_r.0) -> eval_ideaCipher_bb6_in(v_r.0 - 1) [ -v_r.0 + 8 >= 0 /\ v_r.0 - 1 < 0 /\ -v_r.0 + 9 >= 0 ]
		(8, 3)    eval_ideaCipher_bb21_in(v_r.0) -> eval_ideaCipher_bb11_in(v_r.0 - 1) [ -v_r.0 + 8 >= 0 /\ v_r.0 - 1 > 0 /\ -v_r.0 + 9 >= 0 ]
		(?, 1)    eval_ideaCipher_bb16_in(v_r.0) -> eval_ideaCipher_bb21_in(v_r.0) [ -v_r.0 + 8 >= 0 ]
		(?, 1)    eval_ideaCipher_bb11_in(v_r.0) -> eval_ideaCipher_bb16_in(v_r.0) [ -v_r.0 + 8 >= 0 ]
		(?, 1)    eval_ideaCipher_bb11_in(v_r.0) -> eval_ideaCipher_bb16_in(v_r.0) [ -v_r.0 + 8 >= 0 ]
		(?, 1)    eval_ideaCipher_bb11_in(v_r.0) -> eval_ideaCipher_bb16_in(v_r.0) [ -v_r.0 + 8 >= 0 /\ nondef.22*nondef.23 < nondef.24 ]
		(?, 1)    eval_ideaCipher_bb11_in(v_r.0) -> eval_ideaCipher_bb16_in(v_r.0) [ -v_r.0 + 8 >= 0 /\ nondef.22*nondef.23 >= nondef.24 ]
		(?, 1)    eval_ideaCipher_bb6_in(v_r.0) -> eval_ideaCipher_bb11_in(v_r.0) [ -v_r.0 + 8 >= 0 ]
		(1, 1)    eval_ideaCipher_bb1_in(v_r.0) -> eval_ideaCipher_bb6_in(v_r.0) [ -v_r.0 + 8 >= 0 ]
		(1, 2)    eval_ideaCipher_start(v_r.0) -> eval_ideaCipher_bb1_in(8)
	start location:	eval_ideaCipher_start
	leaf cost:	3

By chaining the transition eval_ideaCipher_bb21_in(v_r.0) -> eval_ideaCipher_bb6_in(v_r.0 - 1) [ -v_r.0 + 8 >= 0 /\ v_r.0 - 1 < 0 /\ -v_r.0 + 9 >= 0 ] with all transitions in problem 12, the following new transition is obtained:
	eval_ideaCipher_bb21_in(v_r.0) -> eval_ideaCipher_bb11_in(v_r.0 - 1) [ -v_r.0 + 8 >= 0 /\ v_r.0 - 1 < 0 /\ -v_r.0 + 9 >= 0 ]
We thus obtain the following problem:
13:	T:
		(?, 3)    eval_ideaCipher_bb21_in(v_r.0) -> eval_ideaCipher_bb11_in(v_r.0 - 1) [ -v_r.0 + 8 >= 0 /\ v_r.0 - 1 < 0 /\ -v_r.0 + 9 >= 0 ]
		(8, 3)    eval_ideaCipher_bb21_in(v_r.0) -> eval_ideaCipher_bb11_in(v_r.0 - 1) [ -v_r.0 + 8 >= 0 /\ v_r.0 - 1 > 0 /\ -v_r.0 + 9 >= 0 ]
		(?, 1)    eval_ideaCipher_bb16_in(v_r.0) -> eval_ideaCipher_bb21_in(v_r.0) [ -v_r.0 + 8 >= 0 ]
		(?, 1)    eval_ideaCipher_bb11_in(v_r.0) -> eval_ideaCipher_bb16_in(v_r.0) [ -v_r.0 + 8 >= 0 ]
		(?, 1)    eval_ideaCipher_bb11_in(v_r.0) -> eval_ideaCipher_bb16_in(v_r.0) [ -v_r.0 + 8 >= 0 ]
		(?, 1)    eval_ideaCipher_bb11_in(v_r.0) -> eval_ideaCipher_bb16_in(v_r.0) [ -v_r.0 + 8 >= 0 /\ nondef.22*nondef.23 < nondef.24 ]
		(?, 1)    eval_ideaCipher_bb11_in(v_r.0) -> eval_ideaCipher_bb16_in(v_r.0) [ -v_r.0 + 8 >= 0 /\ nondef.22*nondef.23 >= nondef.24 ]
		(?, 1)    eval_ideaCipher_bb6_in(v_r.0) -> eval_ideaCipher_bb11_in(v_r.0) [ -v_r.0 + 8 >= 0 ]
		(1, 1)    eval_ideaCipher_bb1_in(v_r.0) -> eval_ideaCipher_bb6_in(v_r.0) [ -v_r.0 + 8 >= 0 ]
		(1, 2)    eval_ideaCipher_start(v_r.0) -> eval_ideaCipher_bb1_in(8)
	start location:	eval_ideaCipher_start
	leaf cost:	3

Repeatedly propagating knowledge in problem 13 produces the following problem:
14:	T:
		(?, 3)    eval_ideaCipher_bb21_in(v_r.0) -> eval_ideaCipher_bb11_in(v_r.0 - 1) [ -v_r.0 + 8 >= 0 /\ v_r.0 - 1 < 0 /\ -v_r.0 + 9 >= 0 ]
		(8, 3)    eval_ideaCipher_bb21_in(v_r.0) -> eval_ideaCipher_bb11_in(v_r.0 - 1) [ -v_r.0 + 8 >= 0 /\ v_r.0 - 1 > 0 /\ -v_r.0 + 9 >= 0 ]
		(?, 1)    eval_ideaCipher_bb16_in(v_r.0) -> eval_ideaCipher_bb21_in(v_r.0) [ -v_r.0 + 8 >= 0 ]
		(?, 1)    eval_ideaCipher_bb11_in(v_r.0) -> eval_ideaCipher_bb16_in(v_r.0) [ -v_r.0 + 8 >= 0 ]
		(?, 1)    eval_ideaCipher_bb11_in(v_r.0) -> eval_ideaCipher_bb16_in(v_r.0) [ -v_r.0 + 8 >= 0 ]
		(?, 1)    eval_ideaCipher_bb11_in(v_r.0) -> eval_ideaCipher_bb16_in(v_r.0) [ -v_r.0 + 8 >= 0 /\ nondef.22*nondef.23 < nondef.24 ]
		(?, 1)    eval_ideaCipher_bb11_in(v_r.0) -> eval_ideaCipher_bb16_in(v_r.0) [ -v_r.0 + 8 >= 0 /\ nondef.22*nondef.23 >= nondef.24 ]
		(1, 1)    eval_ideaCipher_bb6_in(v_r.0) -> eval_ideaCipher_bb11_in(v_r.0) [ -v_r.0 + 8 >= 0 ]
		(1, 1)    eval_ideaCipher_bb1_in(v_r.0) -> eval_ideaCipher_bb6_in(v_r.0) [ -v_r.0 + 8 >= 0 ]
		(1, 2)    eval_ideaCipher_start(v_r.0) -> eval_ideaCipher_bb1_in(8)
	start location:	eval_ideaCipher_start
	leaf cost:	3

By chaining the transition eval_ideaCipher_bb11_in(v_r.0) -> eval_ideaCipher_bb16_in(v_r.0) [ -v_r.0 + 8 >= 0 ] with all transitions in problem 14, the following new transition is obtained:
	eval_ideaCipher_bb11_in(v_r.0) -> eval_ideaCipher_bb21_in(v_r.0) [ -v_r.0 + 8 >= 0 ]
We thus obtain the following problem:
15:	T:
		(?, 2)    eval_ideaCipher_bb11_in(v_r.0) -> eval_ideaCipher_bb21_in(v_r.0) [ -v_r.0 + 8 >= 0 ]
		(?, 3)    eval_ideaCipher_bb21_in(v_r.0) -> eval_ideaCipher_bb11_in(v_r.0 - 1) [ -v_r.0 + 8 >= 0 /\ v_r.0 - 1 < 0 /\ -v_r.0 + 9 >= 0 ]
		(8, 3)    eval_ideaCipher_bb21_in(v_r.0) -> eval_ideaCipher_bb11_in(v_r.0 - 1) [ -v_r.0 + 8 >= 0 /\ v_r.0 - 1 > 0 /\ -v_r.0 + 9 >= 0 ]
		(?, 1)    eval_ideaCipher_bb16_in(v_r.0) -> eval_ideaCipher_bb21_in(v_r.0) [ -v_r.0 + 8 >= 0 ]
		(?, 1)    eval_ideaCipher_bb11_in(v_r.0) -> eval_ideaCipher_bb16_in(v_r.0) [ -v_r.0 + 8 >= 0 /\ nondef.22*nondef.23 < nondef.24 ]
		(?, 1)    eval_ideaCipher_bb11_in(v_r.0) -> eval_ideaCipher_bb16_in(v_r.0) [ -v_r.0 + 8 >= 0 /\ nondef.22*nondef.23 >= nondef.24 ]
		(1, 1)    eval_ideaCipher_bb6_in(v_r.0) -> eval_ideaCipher_bb11_in(v_r.0) [ -v_r.0 + 8 >= 0 ]
		(1, 1)    eval_ideaCipher_bb1_in(v_r.0) -> eval_ideaCipher_bb6_in(v_r.0) [ -v_r.0 + 8 >= 0 ]
		(1, 2)    eval_ideaCipher_start(v_r.0) -> eval_ideaCipher_bb1_in(8)
	start location:	eval_ideaCipher_start
	leaf cost:	3

By chaining the transition eval_ideaCipher_bb11_in(v_r.0) -> eval_ideaCipher_bb16_in(v_r.0) [ -v_r.0 + 8 >= 0 /\ nondef.22*nondef.23 < nondef.24 ] with all transitions in problem 15, the following new transition is obtained:
	eval_ideaCipher_bb11_in(v_r.0) -> eval_ideaCipher_bb21_in(v_r.0) [ -v_r.0 + 8 >= 0 /\ nondef.22*nondef.23 < nondef.24 ]
We thus obtain the following problem:
16:	T:
		(?, 2)    eval_ideaCipher_bb11_in(v_r.0) -> eval_ideaCipher_bb21_in(v_r.0) [ -v_r.0 + 8 >= 0 /\ nondef.22*nondef.23 < nondef.24 ]
		(?, 2)    eval_ideaCipher_bb11_in(v_r.0) -> eval_ideaCipher_bb21_in(v_r.0) [ -v_r.0 + 8 >= 0 ]
		(?, 3)    eval_ideaCipher_bb21_in(v_r.0) -> eval_ideaCipher_bb11_in(v_r.0 - 1) [ -v_r.0 + 8 >= 0 /\ v_r.0 - 1 < 0 /\ -v_r.0 + 9 >= 0 ]
		(8, 3)    eval_ideaCipher_bb21_in(v_r.0) -> eval_ideaCipher_bb11_in(v_r.0 - 1) [ -v_r.0 + 8 >= 0 /\ v_r.0 - 1 > 0 /\ -v_r.0 + 9 >= 0 ]
		(?, 1)    eval_ideaCipher_bb16_in(v_r.0) -> eval_ideaCipher_bb21_in(v_r.0) [ -v_r.0 + 8 >= 0 ]
		(?, 1)    eval_ideaCipher_bb11_in(v_r.0) -> eval_ideaCipher_bb16_in(v_r.0) [ -v_r.0 + 8 >= 0 /\ nondef.22*nondef.23 >= nondef.24 ]
		(1, 1)    eval_ideaCipher_bb6_in(v_r.0) -> eval_ideaCipher_bb11_in(v_r.0) [ -v_r.0 + 8 >= 0 ]
		(1, 1)    eval_ideaCipher_bb1_in(v_r.0) -> eval_ideaCipher_bb6_in(v_r.0) [ -v_r.0 + 8 >= 0 ]
		(1, 2)    eval_ideaCipher_start(v_r.0) -> eval_ideaCipher_bb1_in(8)
	start location:	eval_ideaCipher_start
	leaf cost:	3

By chaining the transition eval_ideaCipher_bb11_in(v_r.0) -> eval_ideaCipher_bb16_in(v_r.0) [ -v_r.0 + 8 >= 0 /\ nondef.22*nondef.23 >= nondef.24 ] with all transitions in problem 16, the following new transition is obtained:
	eval_ideaCipher_bb11_in(v_r.0) -> eval_ideaCipher_bb21_in(v_r.0) [ -v_r.0 + 8 >= 0 /\ nondef.22*nondef.23 >= nondef.24 ]
We thus obtain the following problem:
17:	T:
		(?, 2)    eval_ideaCipher_bb11_in(v_r.0) -> eval_ideaCipher_bb21_in(v_r.0) [ -v_r.0 + 8 >= 0 /\ nondef.22*nondef.23 >= nondef.24 ]
		(?, 2)    eval_ideaCipher_bb11_in(v_r.0) -> eval_ideaCipher_bb21_in(v_r.0) [ -v_r.0 + 8 >= 0 /\ nondef.22*nondef.23 < nondef.24 ]
		(?, 2)    eval_ideaCipher_bb11_in(v_r.0) -> eval_ideaCipher_bb21_in(v_r.0) [ -v_r.0 + 8 >= 0 ]
		(?, 3)    eval_ideaCipher_bb21_in(v_r.0) -> eval_ideaCipher_bb11_in(v_r.0 - 1) [ -v_r.0 + 8 >= 0 /\ v_r.0 - 1 < 0 /\ -v_r.0 + 9 >= 0 ]
		(8, 3)    eval_ideaCipher_bb21_in(v_r.0) -> eval_ideaCipher_bb11_in(v_r.0 - 1) [ -v_r.0 + 8 >= 0 /\ v_r.0 - 1 > 0 /\ -v_r.0 + 9 >= 0 ]
		(?, 1)    eval_ideaCipher_bb16_in(v_r.0) -> eval_ideaCipher_bb21_in(v_r.0) [ -v_r.0 + 8 >= 0 ]
		(1, 1)    eval_ideaCipher_bb6_in(v_r.0) -> eval_ideaCipher_bb11_in(v_r.0) [ -v_r.0 + 8 >= 0 ]
		(1, 1)    eval_ideaCipher_bb1_in(v_r.0) -> eval_ideaCipher_bb6_in(v_r.0) [ -v_r.0 + 8 >= 0 ]
		(1, 2)    eval_ideaCipher_start(v_r.0) -> eval_ideaCipher_bb1_in(8)
	start location:	eval_ideaCipher_start
	leaf cost:	3

Testing for reachability in the complexity graph removes the following transition from problem 17:
	eval_ideaCipher_bb16_in(v_r.0) -> eval_ideaCipher_bb21_in(v_r.0) [ -v_r.0 + 8 >= 0 ]
We thus obtain the following problem:
18:	T:
		(?, 3)    eval_ideaCipher_bb21_in(v_r.0) -> eval_ideaCipher_bb11_in(v_r.0 - 1) [ -v_r.0 + 8 >= 0 /\ v_r.0 - 1 < 0 /\ -v_r.0 + 9 >= 0 ]
		(8, 3)    eval_ideaCipher_bb21_in(v_r.0) -> eval_ideaCipher_bb11_in(v_r.0 - 1) [ -v_r.0 + 8 >= 0 /\ v_r.0 - 1 > 0 /\ -v_r.0 + 9 >= 0 ]
		(?, 2)    eval_ideaCipher_bb11_in(v_r.0) -> eval_ideaCipher_bb21_in(v_r.0) [ -v_r.0 + 8 >= 0 /\ nondef.22*nondef.23 >= nondef.24 ]
		(?, 2)    eval_ideaCipher_bb11_in(v_r.0) -> eval_ideaCipher_bb21_in(v_r.0) [ -v_r.0 + 8 >= 0 /\ nondef.22*nondef.23 < nondef.24 ]
		(?, 2)    eval_ideaCipher_bb11_in(v_r.0) -> eval_ideaCipher_bb21_in(v_r.0) [ -v_r.0 + 8 >= 0 ]
		(1, 1)    eval_ideaCipher_bb6_in(v_r.0) -> eval_ideaCipher_bb11_in(v_r.0) [ -v_r.0 + 8 >= 0 ]
		(1, 1)    eval_ideaCipher_bb1_in(v_r.0) -> eval_ideaCipher_bb6_in(v_r.0) [ -v_r.0 + 8 >= 0 ]
		(1, 2)    eval_ideaCipher_start(v_r.0) -> eval_ideaCipher_bb1_in(8)
	start location:	eval_ideaCipher_start
	leaf cost:	3

By chaining the transition eval_ideaCipher_bb1_in(v_r.0) -> eval_ideaCipher_bb6_in(v_r.0) [ -v_r.0 + 8 >= 0 ] with all transitions in problem 18, the following new transition is obtained:
	eval_ideaCipher_bb1_in(v_r.0) -> eval_ideaCipher_bb11_in(v_r.0) [ -v_r.0 + 8 >= 0 ]
We thus obtain the following problem:
19:	T:
		(1, 2)    eval_ideaCipher_bb1_in(v_r.0) -> eval_ideaCipher_bb11_in(v_r.0) [ -v_r.0 + 8 >= 0 ]
		(?, 3)    eval_ideaCipher_bb21_in(v_r.0) -> eval_ideaCipher_bb11_in(v_r.0 - 1) [ -v_r.0 + 8 >= 0 /\ v_r.0 - 1 < 0 /\ -v_r.0 + 9 >= 0 ]
		(8, 3)    eval_ideaCipher_bb21_in(v_r.0) -> eval_ideaCipher_bb11_in(v_r.0 - 1) [ -v_r.0 + 8 >= 0 /\ v_r.0 - 1 > 0 /\ -v_r.0 + 9 >= 0 ]
		(?, 2)    eval_ideaCipher_bb11_in(v_r.0) -> eval_ideaCipher_bb21_in(v_r.0) [ -v_r.0 + 8 >= 0 /\ nondef.22*nondef.23 >= nondef.24 ]
		(?, 2)    eval_ideaCipher_bb11_in(v_r.0) -> eval_ideaCipher_bb21_in(v_r.0) [ -v_r.0 + 8 >= 0 /\ nondef.22*nondef.23 < nondef.24 ]
		(?, 2)    eval_ideaCipher_bb11_in(v_r.0) -> eval_ideaCipher_bb21_in(v_r.0) [ -v_r.0 + 8 >= 0 ]
		(1, 1)    eval_ideaCipher_bb6_in(v_r.0) -> eval_ideaCipher_bb11_in(v_r.0) [ -v_r.0 + 8 >= 0 ]
		(1, 2)    eval_ideaCipher_start(v_r.0) -> eval_ideaCipher_bb1_in(8)
	start location:	eval_ideaCipher_start
	leaf cost:	3

Testing for reachability in the complexity graph removes the following transition from problem 19:
	eval_ideaCipher_bb6_in(v_r.0) -> eval_ideaCipher_bb11_in(v_r.0) [ -v_r.0 + 8 >= 0 ]
We thus obtain the following problem:
20:	T:
		(?, 3)    eval_ideaCipher_bb21_in(v_r.0) -> eval_ideaCipher_bb11_in(v_r.0 - 1) [ -v_r.0 + 8 >= 0 /\ v_r.0 - 1 < 0 /\ -v_r.0 + 9 >= 0 ]
		(8, 3)    eval_ideaCipher_bb21_in(v_r.0) -> eval_ideaCipher_bb11_in(v_r.0 - 1) [ -v_r.0 + 8 >= 0 /\ v_r.0 - 1 > 0 /\ -v_r.0 + 9 >= 0 ]
		(?, 2)    eval_ideaCipher_bb11_in(v_r.0) -> eval_ideaCipher_bb21_in(v_r.0) [ -v_r.0 + 8 >= 0 /\ nondef.22*nondef.23 >= nondef.24 ]
		(?, 2)    eval_ideaCipher_bb11_in(v_r.0) -> eval_ideaCipher_bb21_in(v_r.0) [ -v_r.0 + 8 >= 0 /\ nondef.22*nondef.23 < nondef.24 ]
		(?, 2)    eval_ideaCipher_bb11_in(v_r.0) -> eval_ideaCipher_bb21_in(v_r.0) [ -v_r.0 + 8 >= 0 ]
		(1, 2)    eval_ideaCipher_bb1_in(v_r.0) -> eval_ideaCipher_bb11_in(v_r.0) [ -v_r.0 + 8 >= 0 ]
		(1, 2)    eval_ideaCipher_start(v_r.0) -> eval_ideaCipher_bb1_in(8)
	start location:	eval_ideaCipher_start
	leaf cost:	3

By chaining the transition eval_ideaCipher_start(v_r.0) -> eval_ideaCipher_bb1_in(8) with all transitions in problem 20, the following new transition is obtained:
	eval_ideaCipher_start(v_r.0) -> eval_ideaCipher_bb11_in(8) [ 0 >= 0 ]
We thus obtain the following problem:
21:	T:
		(1, 4)    eval_ideaCipher_start(v_r.0) -> eval_ideaCipher_bb11_in(8) [ 0 >= 0 ]
		(?, 3)    eval_ideaCipher_bb21_in(v_r.0) -> eval_ideaCipher_bb11_in(v_r.0 - 1) [ -v_r.0 + 8 >= 0 /\ v_r.0 - 1 < 0 /\ -v_r.0 + 9 >= 0 ]
		(8, 3)    eval_ideaCipher_bb21_in(v_r.0) -> eval_ideaCipher_bb11_in(v_r.0 - 1) [ -v_r.0 + 8 >= 0 /\ v_r.0 - 1 > 0 /\ -v_r.0 + 9 >= 0 ]
		(?, 2)    eval_ideaCipher_bb11_in(v_r.0) -> eval_ideaCipher_bb21_in(v_r.0) [ -v_r.0 + 8 >= 0 /\ nondef.22*nondef.23 >= nondef.24 ]
		(?, 2)    eval_ideaCipher_bb11_in(v_r.0) -> eval_ideaCipher_bb21_in(v_r.0) [ -v_r.0 + 8 >= 0 /\ nondef.22*nondef.23 < nondef.24 ]
		(?, 2)    eval_ideaCipher_bb11_in(v_r.0) -> eval_ideaCipher_bb21_in(v_r.0) [ -v_r.0 + 8 >= 0 ]
		(1, 2)    eval_ideaCipher_bb1_in(v_r.0) -> eval_ideaCipher_bb11_in(v_r.0) [ -v_r.0 + 8 >= 0 ]
	start location:	eval_ideaCipher_start
	leaf cost:	3

Testing for reachability in the complexity graph removes the following transition from problem 21:
	eval_ideaCipher_bb1_in(v_r.0) -> eval_ideaCipher_bb11_in(v_r.0) [ -v_r.0 + 8 >= 0 ]
We thus obtain the following problem:
22:	T:
		(?, 3)    eval_ideaCipher_bb21_in(v_r.0) -> eval_ideaCipher_bb11_in(v_r.0 - 1) [ -v_r.0 + 8 >= 0 /\ v_r.0 - 1 < 0 /\ -v_r.0 + 9 >= 0 ]
		(8, 3)    eval_ideaCipher_bb21_in(v_r.0) -> eval_ideaCipher_bb11_in(v_r.0 - 1) [ -v_r.0 + 8 >= 0 /\ v_r.0 - 1 > 0 /\ -v_r.0 + 9 >= 0 ]
		(?, 2)    eval_ideaCipher_bb11_in(v_r.0) -> eval_ideaCipher_bb21_in(v_r.0) [ -v_r.0 + 8 >= 0 /\ nondef.22*nondef.23 >= nondef.24 ]
		(?, 2)    eval_ideaCipher_bb11_in(v_r.0) -> eval_ideaCipher_bb21_in(v_r.0) [ -v_r.0 + 8 >= 0 /\ nondef.22*nondef.23 < nondef.24 ]
		(?, 2)    eval_ideaCipher_bb11_in(v_r.0) -> eval_ideaCipher_bb21_in(v_r.0) [ -v_r.0 + 8 >= 0 ]
		(1, 4)    eval_ideaCipher_start(v_r.0) -> eval_ideaCipher_bb11_in(8) [ 0 >= 0 ]
	start location:	eval_ideaCipher_start
	leaf cost:	3

By chaining the transition eval_ideaCipher_bb11_in(v_r.0) -> eval_ideaCipher_bb21_in(v_r.0) [ -v_r.0 + 8 >= 0 /\ nondef.22*nondef.23 >= nondef.24 ] with all transitions in problem 22, the following new transitions are obtained:
	eval_ideaCipher_bb11_in(v_r.0) -> eval_ideaCipher_bb11_in(v_r.0 - 1) [ -v_r.0 + 8 >= 0 /\ nondef.22*nondef.23 >= nondef.24 /\ v_r.0 - 1 < 0 /\ -v_r.0 + 9 >= 0 ]
	eval_ideaCipher_bb11_in(v_r.0) -> eval_ideaCipher_bb11_in(v_r.0 - 1) [ -v_r.0 + 8 >= 0 /\ nondef.22*nondef.23 >= nondef.24 /\ v_r.0 - 1 > 0 /\ -v_r.0 + 9 >= 0 ]
We thus obtain the following problem:
23:	T:
		(?, 5)    eval_ideaCipher_bb11_in(v_r.0) -> eval_ideaCipher_bb11_in(v_r.0 - 1) [ -v_r.0 + 8 >= 0 /\ nondef.22*nondef.23 >= nondef.24 /\ v_r.0 - 1 < 0 /\ -v_r.0 + 9 >= 0 ]
		(?, 5)    eval_ideaCipher_bb11_in(v_r.0) -> eval_ideaCipher_bb11_in(v_r.0 - 1) [ -v_r.0 + 8 >= 0 /\ nondef.22*nondef.23 >= nondef.24 /\ v_r.0 - 1 > 0 /\ -v_r.0 + 9 >= 0 ]
		(?, 3)    eval_ideaCipher_bb21_in(v_r.0) -> eval_ideaCipher_bb11_in(v_r.0 - 1) [ -v_r.0 + 8 >= 0 /\ v_r.0 - 1 < 0 /\ -v_r.0 + 9 >= 0 ]
		(8, 3)    eval_ideaCipher_bb21_in(v_r.0) -> eval_ideaCipher_bb11_in(v_r.0 - 1) [ -v_r.0 + 8 >= 0 /\ v_r.0 - 1 > 0 /\ -v_r.0 + 9 >= 0 ]
		(?, 2)    eval_ideaCipher_bb11_in(v_r.0) -> eval_ideaCipher_bb21_in(v_r.0) [ -v_r.0 + 8 >= 0 /\ nondef.22*nondef.23 < nondef.24 ]
		(?, 2)    eval_ideaCipher_bb11_in(v_r.0) -> eval_ideaCipher_bb21_in(v_r.0) [ -v_r.0 + 8 >= 0 ]
		(1, 4)    eval_ideaCipher_start(v_r.0) -> eval_ideaCipher_bb11_in(8) [ 0 >= 0 ]
	start location:	eval_ideaCipher_start
	leaf cost:	3

A polynomial rank function with
	Pol(eval_ideaCipher_bb11_in) = V_1
	Pol(eval_ideaCipher_bb21_in) = V_1
	Pol(eval_ideaCipher_start) = 8
orients all transitions weakly and the transition
	eval_ideaCipher_bb11_in(v_r.0) -> eval_ideaCipher_bb11_in(v_r.0 - 1) [ -v_r.0 + 8 >= 0 /\ nondef.22*nondef.23 >= nondef.24 /\ v_r.0 - 1 > 0 /\ -v_r.0 + 9 >= 0 ]
strictly and produces the following problem:
24:	T:
		(?, 5)    eval_ideaCipher_bb11_in(v_r.0) -> eval_ideaCipher_bb11_in(v_r.0 - 1) [ -v_r.0 + 8 >= 0 /\ nondef.22*nondef.23 >= nondef.24 /\ v_r.0 - 1 < 0 /\ -v_r.0 + 9 >= 0 ]
		(8, 5)    eval_ideaCipher_bb11_in(v_r.0) -> eval_ideaCipher_bb11_in(v_r.0 - 1) [ -v_r.0 + 8 >= 0 /\ nondef.22*nondef.23 >= nondef.24 /\ v_r.0 - 1 > 0 /\ -v_r.0 + 9 >= 0 ]
		(?, 3)    eval_ideaCipher_bb21_in(v_r.0) -> eval_ideaCipher_bb11_in(v_r.0 - 1) [ -v_r.0 + 8 >= 0 /\ v_r.0 - 1 < 0 /\ -v_r.0 + 9 >= 0 ]
		(8, 3)    eval_ideaCipher_bb21_in(v_r.0) -> eval_ideaCipher_bb11_in(v_r.0 - 1) [ -v_r.0 + 8 >= 0 /\ v_r.0 - 1 > 0 /\ -v_r.0 + 9 >= 0 ]
		(?, 2)    eval_ideaCipher_bb11_in(v_r.0) -> eval_ideaCipher_bb21_in(v_r.0) [ -v_r.0 + 8 >= 0 /\ nondef.22*nondef.23 < nondef.24 ]
		(?, 2)    eval_ideaCipher_bb11_in(v_r.0) -> eval_ideaCipher_bb21_in(v_r.0) [ -v_r.0 + 8 >= 0 ]
		(1, 4)    eval_ideaCipher_start(v_r.0) -> eval_ideaCipher_bb11_in(8) [ 0 >= 0 ]
	start location:	eval_ideaCipher_start
	leaf cost:	3

By chaining the transition eval_ideaCipher_bb11_in(v_r.0) -> eval_ideaCipher_bb21_in(v_r.0) [ -v_r.0 + 8 >= 0 /\ nondef.22*nondef.23 < nondef.24 ] with all transitions in problem 24, the following new transitions are obtained:
	eval_ideaCipher_bb11_in(v_r.0) -> eval_ideaCipher_bb11_in(v_r.0 - 1) [ -v_r.0 + 8 >= 0 /\ nondef.22*nondef.23 < nondef.24 /\ v_r.0 - 1 < 0 /\ -v_r.0 + 9 >= 0 ]
	eval_ideaCipher_bb11_in(v_r.0) -> eval_ideaCipher_bb11_in(v_r.0 - 1) [ -v_r.0 + 8 >= 0 /\ nondef.22*nondef.23 < nondef.24 /\ v_r.0 - 1 > 0 /\ -v_r.0 + 9 >= 0 ]
We thus obtain the following problem:
25:	T:
		(?, 5)    eval_ideaCipher_bb11_in(v_r.0) -> eval_ideaCipher_bb11_in(v_r.0 - 1) [ -v_r.0 + 8 >= 0 /\ nondef.22*nondef.23 < nondef.24 /\ v_r.0 - 1 < 0 /\ -v_r.0 + 9 >= 0 ]
		(?, 5)    eval_ideaCipher_bb11_in(v_r.0) -> eval_ideaCipher_bb11_in(v_r.0 - 1) [ -v_r.0 + 8 >= 0 /\ nondef.22*nondef.23 < nondef.24 /\ v_r.0 - 1 > 0 /\ -v_r.0 + 9 >= 0 ]
		(?, 5)    eval_ideaCipher_bb11_in(v_r.0) -> eval_ideaCipher_bb11_in(v_r.0 - 1) [ -v_r.0 + 8 >= 0 /\ nondef.22*nondef.23 >= nondef.24 /\ v_r.0 - 1 < 0 /\ -v_r.0 + 9 >= 0 ]
		(8, 5)    eval_ideaCipher_bb11_in(v_r.0) -> eval_ideaCipher_bb11_in(v_r.0 - 1) [ -v_r.0 + 8 >= 0 /\ nondef.22*nondef.23 >= nondef.24 /\ v_r.0 - 1 > 0 /\ -v_r.0 + 9 >= 0 ]
		(?, 3)    eval_ideaCipher_bb21_in(v_r.0) -> eval_ideaCipher_bb11_in(v_r.0 - 1) [ -v_r.0 + 8 >= 0 /\ v_r.0 - 1 < 0 /\ -v_r.0 + 9 >= 0 ]
		(8, 3)    eval_ideaCipher_bb21_in(v_r.0) -> eval_ideaCipher_bb11_in(v_r.0 - 1) [ -v_r.0 + 8 >= 0 /\ v_r.0 - 1 > 0 /\ -v_r.0 + 9 >= 0 ]
		(?, 2)    eval_ideaCipher_bb11_in(v_r.0) -> eval_ideaCipher_bb21_in(v_r.0) [ -v_r.0 + 8 >= 0 ]
		(1, 4)    eval_ideaCipher_start(v_r.0) -> eval_ideaCipher_bb11_in(8) [ 0 >= 0 ]
	start location:	eval_ideaCipher_start
	leaf cost:	3

A polynomial rank function with
	Pol(eval_ideaCipher_bb11_in) = V_1
	Pol(eval_ideaCipher_bb21_in) = V_1 - 1
	Pol(eval_ideaCipher_start) = 8
orients all transitions weakly and the transition
	eval_ideaCipher_bb11_in(v_r.0) -> eval_ideaCipher_bb11_in(v_r.0 - 1) [ -v_r.0 + 8 >= 0 /\ nondef.22*nondef.23 < nondef.24 /\ v_r.0 - 1 > 0 /\ -v_r.0 + 9 >= 0 ]
strictly and produces the following problem:
26:	T:
		(?, 5)    eval_ideaCipher_bb11_in(v_r.0) -> eval_ideaCipher_bb11_in(v_r.0 - 1) [ -v_r.0 + 8 >= 0 /\ nondef.22*nondef.23 < nondef.24 /\ v_r.0 - 1 < 0 /\ -v_r.0 + 9 >= 0 ]
		(8, 5)    eval_ideaCipher_bb11_in(v_r.0) -> eval_ideaCipher_bb11_in(v_r.0 - 1) [ -v_r.0 + 8 >= 0 /\ nondef.22*nondef.23 < nondef.24 /\ v_r.0 - 1 > 0 /\ -v_r.0 + 9 >= 0 ]
		(?, 5)    eval_ideaCipher_bb11_in(v_r.0) -> eval_ideaCipher_bb11_in(v_r.0 - 1) [ -v_r.0 + 8 >= 0 /\ nondef.22*nondef.23 >= nondef.24 /\ v_r.0 - 1 < 0 /\ -v_r.0 + 9 >= 0 ]
		(8, 5)    eval_ideaCipher_bb11_in(v_r.0) -> eval_ideaCipher_bb11_in(v_r.0 - 1) [ -v_r.0 + 8 >= 0 /\ nondef.22*nondef.23 >= nondef.24 /\ v_r.0 - 1 > 0 /\ -v_r.0 + 9 >= 0 ]
		(?, 3)    eval_ideaCipher_bb21_in(v_r.0) -> eval_ideaCipher_bb11_in(v_r.0 - 1) [ -v_r.0 + 8 >= 0 /\ v_r.0 - 1 < 0 /\ -v_r.0 + 9 >= 0 ]
		(8, 3)    eval_ideaCipher_bb21_in(v_r.0) -> eval_ideaCipher_bb11_in(v_r.0 - 1) [ -v_r.0 + 8 >= 0 /\ v_r.0 - 1 > 0 /\ -v_r.0 + 9 >= 0 ]
		(?, 2)    eval_ideaCipher_bb11_in(v_r.0) -> eval_ideaCipher_bb21_in(v_r.0) [ -v_r.0 + 8 >= 0 ]
		(1, 4)    eval_ideaCipher_start(v_r.0) -> eval_ideaCipher_bb11_in(8) [ 0 >= 0 ]
	start location:	eval_ideaCipher_start
	leaf cost:	3

By chaining the transition eval_ideaCipher_bb11_in(v_r.0) -> eval_ideaCipher_bb21_in(v_r.0) [ -v_r.0 + 8 >= 0 ] with all transitions in problem 26, the following new transitions are obtained:
	eval_ideaCipher_bb11_in(v_r.0) -> eval_ideaCipher_bb11_in(v_r.0 - 1) [ -v_r.0 + 8 >= 0 /\ v_r.0 - 1 < 0 /\ -v_r.0 + 9 >= 0 ]
	eval_ideaCipher_bb11_in(v_r.0) -> eval_ideaCipher_bb11_in(v_r.0 - 1) [ -v_r.0 + 8 >= 0 /\ v_r.0 - 1 > 0 /\ -v_r.0 + 9 >= 0 ]
We thus obtain the following problem:
27:	T:
		(?, 5)    eval_ideaCipher_bb11_in(v_r.0) -> eval_ideaCipher_bb11_in(v_r.0 - 1) [ -v_r.0 + 8 >= 0 /\ v_r.0 - 1 < 0 /\ -v_r.0 + 9 >= 0 ]
		(?, 5)    eval_ideaCipher_bb11_in(v_r.0) -> eval_ideaCipher_bb11_in(v_r.0 - 1) [ -v_r.0 + 8 >= 0 /\ v_r.0 - 1 > 0 /\ -v_r.0 + 9 >= 0 ]
		(?, 5)    eval_ideaCipher_bb11_in(v_r.0) -> eval_ideaCipher_bb11_in(v_r.0 - 1) [ -v_r.0 + 8 >= 0 /\ nondef.22*nondef.23 < nondef.24 /\ v_r.0 - 1 < 0 /\ -v_r.0 + 9 >= 0 ]
		(8, 5)    eval_ideaCipher_bb11_in(v_r.0) -> eval_ideaCipher_bb11_in(v_r.0 - 1) [ -v_r.0 + 8 >= 0 /\ nondef.22*nondef.23 < nondef.24 /\ v_r.0 - 1 > 0 /\ -v_r.0 + 9 >= 0 ]
		(?, 5)    eval_ideaCipher_bb11_in(v_r.0) -> eval_ideaCipher_bb11_in(v_r.0 - 1) [ -v_r.0 + 8 >= 0 /\ nondef.22*nondef.23 >= nondef.24 /\ v_r.0 - 1 < 0 /\ -v_r.0 + 9 >= 0 ]
		(8, 5)    eval_ideaCipher_bb11_in(v_r.0) -> eval_ideaCipher_bb11_in(v_r.0 - 1) [ -v_r.0 + 8 >= 0 /\ nondef.22*nondef.23 >= nondef.24 /\ v_r.0 - 1 > 0 /\ -v_r.0 + 9 >= 0 ]
		(?, 3)    eval_ideaCipher_bb21_in(v_r.0) -> eval_ideaCipher_bb11_in(v_r.0 - 1) [ -v_r.0 + 8 >= 0 /\ v_r.0 - 1 < 0 /\ -v_r.0 + 9 >= 0 ]
		(8, 3)    eval_ideaCipher_bb21_in(v_r.0) -> eval_ideaCipher_bb11_in(v_r.0 - 1) [ -v_r.0 + 8 >= 0 /\ v_r.0 - 1 > 0 /\ -v_r.0 + 9 >= 0 ]
		(1, 4)    eval_ideaCipher_start(v_r.0) -> eval_ideaCipher_bb11_in(8) [ 0 >= 0 ]
	start location:	eval_ideaCipher_start
	leaf cost:	3

Testing for reachability in the complexity graph removes the following transitions from problem 27:
	eval_ideaCipher_bb11_in(v_r.0) -> eval_ideaCipher_bb11_in(v_r.0 - 1) [ -v_r.0 + 8 >= 0 /\ v_r.0 - 1 < 0 /\ -v_r.0 + 9 >= 0 ]
	eval_ideaCipher_bb11_in(v_r.0) -> eval_ideaCipher_bb11_in(v_r.0 - 1) [ -v_r.0 + 8 >= 0 /\ nondef.22*nondef.23 < nondef.24 /\ v_r.0 - 1 < 0 /\ -v_r.0 + 9 >= 0 ]
	eval_ideaCipher_bb11_in(v_r.0) -> eval_ideaCipher_bb11_in(v_r.0 - 1) [ -v_r.0 + 8 >= 0 /\ nondef.22*nondef.23 >= nondef.24 /\ v_r.0 - 1 < 0 /\ -v_r.0 + 9 >= 0 ]
	eval_ideaCipher_bb21_in(v_r.0) -> eval_ideaCipher_bb11_in(v_r.0 - 1) [ -v_r.0 + 8 >= 0 /\ v_r.0 - 1 < 0 /\ -v_r.0 + 9 >= 0 ]
	eval_ideaCipher_bb21_in(v_r.0) -> eval_ideaCipher_bb11_in(v_r.0 - 1) [ -v_r.0 + 8 >= 0 /\ v_r.0 - 1 > 0 /\ -v_r.0 + 9 >= 0 ]
We thus obtain the following problem:
28:	T:
		(?, 5)    eval_ideaCipher_bb11_in(v_r.0) -> eval_ideaCipher_bb11_in(v_r.0 - 1) [ -v_r.0 + 8 >= 0 /\ v_r.0 - 1 > 0 /\ -v_r.0 + 9 >= 0 ]
		(8, 5)    eval_ideaCipher_bb11_in(v_r.0) -> eval_ideaCipher_bb11_in(v_r.0 - 1) [ -v_r.0 + 8 >= 0 /\ nondef.22*nondef.23 < nondef.24 /\ v_r.0 - 1 > 0 /\ -v_r.0 + 9 >= 0 ]
		(8, 5)    eval_ideaCipher_bb11_in(v_r.0) -> eval_ideaCipher_bb11_in(v_r.0 - 1) [ -v_r.0 + 8 >= 0 /\ nondef.22*nondef.23 >= nondef.24 /\ v_r.0 - 1 > 0 /\ -v_r.0 + 9 >= 0 ]
		(1, 4)    eval_ideaCipher_start(v_r.0) -> eval_ideaCipher_bb11_in(8) [ 0 >= 0 ]
	start location:	eval_ideaCipher_start
	leaf cost:	3

A polynomial rank function with
	Pol(eval_ideaCipher_bb11_in) = V_1
	Pol(eval_ideaCipher_start) = 8
orients all transitions weakly and the transition
	eval_ideaCipher_bb11_in(v_r.0) -> eval_ideaCipher_bb11_in(v_r.0 - 1) [ -v_r.0 + 8 >= 0 /\ v_r.0 - 1 > 0 /\ -v_r.0 + 9 >= 0 ]
strictly and produces the following problem:
29:	T:
		(8, 5)    eval_ideaCipher_bb11_in(v_r.0) -> eval_ideaCipher_bb11_in(v_r.0 - 1) [ -v_r.0 + 8 >= 0 /\ v_r.0 - 1 > 0 /\ -v_r.0 + 9 >= 0 ]
		(8, 5)    eval_ideaCipher_bb11_in(v_r.0) -> eval_ideaCipher_bb11_in(v_r.0 - 1) [ -v_r.0 + 8 >= 0 /\ nondef.22*nondef.23 < nondef.24 /\ v_r.0 - 1 > 0 /\ -v_r.0 + 9 >= 0 ]
		(8, 5)    eval_ideaCipher_bb11_in(v_r.0) -> eval_ideaCipher_bb11_in(v_r.0 - 1) [ -v_r.0 + 8 >= 0 /\ nondef.22*nondef.23 >= nondef.24 /\ v_r.0 - 1 > 0 /\ -v_r.0 + 9 >= 0 ]
		(1, 4)    eval_ideaCipher_start(v_r.0) -> eval_ideaCipher_bb11_in(8) [ 0 >= 0 ]
	start location:	eval_ideaCipher_start
	leaf cost:	3

Complexity upper bound 127

Time: 0.428 sec (SMT: 0.367 sec)

MAYBE

Initial complexity problem:
1:	T:
		(1, 1)    eval_code_map_decode_next_start(v_hi.0, v_lo.0) -> eval_code_map_decode_next_bb0_in(v_hi.0, v_lo.0)
		(?, 1)    eval_code_map_decode_next_bb0_in(v_hi.0, v_lo.0) -> eval_code_map_decode_next_bb1_in(v_hi.0, v_lo.0)
		(?, 1)    eval_code_map_decode_next_bb1_in(v_hi.0, v_lo.0) -> eval_code_map_decode_next_bb4_in(v_hi.0, v_lo.0)
		(?, 1)    eval_code_map_decode_next_bb1_in(v_hi.0, v_lo.0) -> eval_code_map_decode_next_NewDefault_in(v_hi.0, v_lo.0)
		(?, 1)    eval_code_map_decode_next_bb1_in(v_hi.0, v_lo.0) -> eval_code_map_decode_next_bb15_in(v_hi.0, v_lo.0)
		(?, 1)    eval_code_map_decode_next_bb1_in(v_hi.0, v_lo.0) -> eval_code_map_decode_next_bb11_in(nondef.19 + 1, 0)
		(?, 1)    eval_code_map_decode_next_bb1_in(v_hi.0, v_lo.0) -> eval_code_map_decode_next_bb14_in(v_hi.0, v_lo.0)
		(?, 1)    eval_code_map_decode_next_bb4_in(v_hi.0, v_lo.0) -> eval_code_map_decode_next_bb14_in(v_hi.0, v_lo.0)
		(?, 1)    eval_code_map_decode_next_bb4_in(v_hi.0, v_lo.0) -> eval_code_map_decode_next_bb7_in(v_hi.0, v_lo.0)
		(?, 1)    eval_code_map_decode_next_bb7_in(v_hi.0, v_lo.0) -> eval_code_map_decode_next_bb15_in(v_hi.0, v_lo.0)
		(?, 1)    eval_code_map_decode_next_bb11_in(v_hi.0, v_lo.0) -> eval_code_map_decode_next_bb11_in(v_hi.0, nondef.20) [ v_lo.0 + 1 < v_hi.0 ]
		(?, 1)    eval_code_map_decode_next_bb11_in(v_hi.0, v_lo.0) -> eval_code_map_decode_next_bb11_in(v_hi.0, v_lo.0) [ v_lo.0 + 1 < v_hi.0 ]
		(?, 1)    eval_code_map_decode_next_bb11_in(v_hi.0, v_lo.0) -> eval_code_map_decode_next_bb11_in(nondef.20, nondef.20) [ v_lo.0 + 1 < v_hi.0 ]
		(?, 1)    eval_code_map_decode_next_bb11_in(v_hi.0, v_lo.0) -> eval_code_map_decode_next_bb11_in(nondef.20, v_lo.0) [ v_lo.0 + 1 < v_hi.0 ]
		(?, 1)    eval_code_map_decode_next_bb11_in(v_hi.0, v_lo.0) -> eval_code_map_decode_next_bb1_in(v_hi.0, v_lo.0) [ v_lo.0 + 1 >= v_hi.0 ]
		(?, 1)    eval_code_map_decode_next_bb14_in(v_hi.0, v_lo.0) -> eval_code_map_decode_next_bb15_in(v_hi.0, v_lo.0)
		(?, 1)    eval_code_map_decode_next_NewDefault_in(v_hi.0, v_lo.0) -> eval_code_map_decode_next_bb15_in(v_hi.0, v_lo.0)
		(?, 1)    eval_code_map_decode_next_bb15_in(v_hi.0, v_lo.0) -> eval_code_map_decode_next_stop(v_hi.0, v_lo.0)
	start location:	eval_code_map_decode_next_start
	leaf cost:	0

Repeatedly removing leaves of the complexity graph in problem 1 produces the following problem:
2:	T:
		(1, 1)    eval_code_map_decode_next_start(v_hi.0, v_lo.0) -> eval_code_map_decode_next_bb0_in(v_hi.0, v_lo.0)
		(?, 1)    eval_code_map_decode_next_bb0_in(v_hi.0, v_lo.0) -> eval_code_map_decode_next_bb1_in(v_hi.0, v_lo.0)
		(?, 1)    eval_code_map_decode_next_bb1_in(v_hi.0, v_lo.0) -> eval_code_map_decode_next_bb11_in(nondef.19 + 1, 0)
		(?, 1)    eval_code_map_decode_next_bb11_in(v_hi.0, v_lo.0) -> eval_code_map_decode_next_bb11_in(v_hi.0, nondef.20) [ v_lo.0 + 1 < v_hi.0 ]
		(?, 1)    eval_code_map_decode_next_bb11_in(v_hi.0, v_lo.0) -> eval_code_map_decode_next_bb11_in(v_hi.0, v_lo.0) [ v_lo.0 + 1 < v_hi.0 ]
		(?, 1)    eval_code_map_decode_next_bb11_in(v_hi.0, v_lo.0) -> eval_code_map_decode_next_bb11_in(nondef.20, nondef.20) [ v_lo.0 + 1 < v_hi.0 ]
		(?, 1)    eval_code_map_decode_next_bb11_in(v_hi.0, v_lo.0) -> eval_code_map_decode_next_bb11_in(nondef.20, v_lo.0) [ v_lo.0 + 1 < v_hi.0 ]
		(?, 1)    eval_code_map_decode_next_bb11_in(v_hi.0, v_lo.0) -> eval_code_map_decode_next_bb1_in(v_hi.0, v_lo.0) [ v_lo.0 + 1 >= v_hi.0 ]
	start location:	eval_code_map_decode_next_start
	leaf cost:	10

Repeatedly propagating knowledge in problem 2 produces the following problem:
3:	T:
		(1, 1)    eval_code_map_decode_next_start(v_hi.0, v_lo.0) -> eval_code_map_decode_next_bb0_in(v_hi.0, v_lo.0)
		(1, 1)    eval_code_map_decode_next_bb0_in(v_hi.0, v_lo.0) -> eval_code_map_decode_next_bb1_in(v_hi.0, v_lo.0)
		(?, 1)    eval_code_map_decode_next_bb1_in(v_hi.0, v_lo.0) -> eval_code_map_decode_next_bb11_in(nondef.19 + 1, 0)
		(?, 1)    eval_code_map_decode_next_bb11_in(v_hi.0, v_lo.0) -> eval_code_map_decode_next_bb11_in(v_hi.0, nondef.20) [ v_lo.0 + 1 < v_hi.0 ]
		(?, 1)    eval_code_map_decode_next_bb11_in(v_hi.0, v_lo.0) -> eval_code_map_decode_next_bb11_in(v_hi.0, v_lo.0) [ v_lo.0 + 1 < v_hi.0 ]
		(?, 1)    eval_code_map_decode_next_bb11_in(v_hi.0, v_lo.0) -> eval_code_map_decode_next_bb11_in(nondef.20, nondef.20) [ v_lo.0 + 1 < v_hi.0 ]
		(?, 1)    eval_code_map_decode_next_bb11_in(v_hi.0, v_lo.0) -> eval_code_map_decode_next_bb11_in(nondef.20, v_lo.0) [ v_lo.0 + 1 < v_hi.0 ]
		(?, 1)    eval_code_map_decode_next_bb11_in(v_hi.0, v_lo.0) -> eval_code_map_decode_next_bb1_in(v_hi.0, v_lo.0) [ v_lo.0 + 1 >= v_hi.0 ]
	start location:	eval_code_map_decode_next_start
	leaf cost:	10

By chaining the transition eval_code_map_decode_next_start(v_hi.0, v_lo.0) -> eval_code_map_decode_next_bb0_in(v_hi.0, v_lo.0) with all transitions in problem 3, the following new transition is obtained:
	eval_code_map_decode_next_start(v_hi.0, v_lo.0) -> eval_code_map_decode_next_bb1_in(v_hi.0, v_lo.0)
We thus obtain the following problem:
4:	T:
		(1, 2)    eval_code_map_decode_next_start(v_hi.0, v_lo.0) -> eval_code_map_decode_next_bb1_in(v_hi.0, v_lo.0)
		(1, 1)    eval_code_map_decode_next_bb0_in(v_hi.0, v_lo.0) -> eval_code_map_decode_next_bb1_in(v_hi.0, v_lo.0)
		(?, 1)    eval_code_map_decode_next_bb1_in(v_hi.0, v_lo.0) -> eval_code_map_decode_next_bb11_in(nondef.19 + 1, 0)
		(?, 1)    eval_code_map_decode_next_bb11_in(v_hi.0, v_lo.0) -> eval_code_map_decode_next_bb11_in(v_hi.0, nondef.20) [ v_lo.0 + 1 < v_hi.0 ]
		(?, 1)    eval_code_map_decode_next_bb11_in(v_hi.0, v_lo.0) -> eval_code_map_decode_next_bb11_in(v_hi.0, v_lo.0) [ v_lo.0 + 1 < v_hi.0 ]
		(?, 1)    eval_code_map_decode_next_bb11_in(v_hi.0, v_lo.0) -> eval_code_map_decode_next_bb11_in(nondef.20, nondef.20) [ v_lo.0 + 1 < v_hi.0 ]
		(?, 1)    eval_code_map_decode_next_bb11_in(v_hi.0, v_lo.0) -> eval_code_map_decode_next_bb11_in(nondef.20, v_lo.0) [ v_lo.0 + 1 < v_hi.0 ]
		(?, 1)    eval_code_map_decode_next_bb11_in(v_hi.0, v_lo.0) -> eval_code_map_decode_next_bb1_in(v_hi.0, v_lo.0) [ v_lo.0 + 1 >= v_hi.0 ]
	start location:	eval_code_map_decode_next_start
	leaf cost:	10

Testing for reachability in the complexity graph removes the following transition from problem 4:
	eval_code_map_decode_next_bb0_in(v_hi.0, v_lo.0) -> eval_code_map_decode_next_bb1_in(v_hi.0, v_lo.0)
We thus obtain the following problem:
5:	T:
		(?, 1)    eval_code_map_decode_next_bb11_in(v_hi.0, v_lo.0) -> eval_code_map_decode_next_bb1_in(v_hi.0, v_lo.0) [ v_lo.0 + 1 >= v_hi.0 ]
		(?, 1)    eval_code_map_decode_next_bb11_in(v_hi.0, v_lo.0) -> eval_code_map_decode_next_bb11_in(nondef.20, v_lo.0) [ v_lo.0 + 1 < v_hi.0 ]
		(?, 1)    eval_code_map_decode_next_bb11_in(v_hi.0, v_lo.0) -> eval_code_map_decode_next_bb11_in(nondef.20, nondef.20) [ v_lo.0 + 1 < v_hi.0 ]
		(?, 1)    eval_code_map_decode_next_bb11_in(v_hi.0, v_lo.0) -> eval_code_map_decode_next_bb11_in(v_hi.0, v_lo.0) [ v_lo.0 + 1 < v_hi.0 ]
		(?, 1)    eval_code_map_decode_next_bb11_in(v_hi.0, v_lo.0) -> eval_code_map_decode_next_bb11_in(v_hi.0, nondef.20) [ v_lo.0 + 1 < v_hi.0 ]
		(?, 1)    eval_code_map_decode_next_bb1_in(v_hi.0, v_lo.0) -> eval_code_map_decode_next_bb11_in(nondef.19 + 1, 0)
		(1, 2)    eval_code_map_decode_next_start(v_hi.0, v_lo.0) -> eval_code_map_decode_next_bb1_in(v_hi.0, v_lo.0)
	start location:	eval_code_map_decode_next_start
	leaf cost:	10

By chaining the transition eval_code_map_decode_next_bb11_in(v_hi.0, v_lo.0) -> eval_code_map_decode_next_bb1_in(v_hi.0, v_lo.0) [ v_lo.0 + 1 >= v_hi.0 ] with all transitions in problem 5, the following new transition is obtained:
	eval_code_map_decode_next_bb11_in(v_hi.0, v_lo.0) -> eval_code_map_decode_next_bb11_in(nondef.19 + 1, 0) [ v_lo.0 + 1 >= v_hi.0 ]
We thus obtain the following problem:
6:	T:
		(?, 2)    eval_code_map_decode_next_bb11_in(v_hi.0, v_lo.0) -> eval_code_map_decode_next_bb11_in(nondef.19 + 1, 0) [ v_lo.0 + 1 >= v_hi.0 ]
		(?, 1)    eval_code_map_decode_next_bb11_in(v_hi.0, v_lo.0) -> eval_code_map_decode_next_bb11_in(nondef.20, v_lo.0) [ v_lo.0 + 1 < v_hi.0 ]
		(?, 1)    eval_code_map_decode_next_bb11_in(v_hi.0, v_lo.0) -> eval_code_map_decode_next_bb11_in(nondef.20, nondef.20) [ v_lo.0 + 1 < v_hi.0 ]
		(?, 1)    eval_code_map_decode_next_bb11_in(v_hi.0, v_lo.0) -> eval_code_map_decode_next_bb11_in(v_hi.0, v_lo.0) [ v_lo.0 + 1 < v_hi.0 ]
		(?, 1)    eval_code_map_decode_next_bb11_in(v_hi.0, v_lo.0) -> eval_code_map_decode_next_bb11_in(v_hi.0, nondef.20) [ v_lo.0 + 1 < v_hi.0 ]
		(?, 1)    eval_code_map_decode_next_bb1_in(v_hi.0, v_lo.0) -> eval_code_map_decode_next_bb11_in(nondef.19 + 1, 0)
		(1, 2)    eval_code_map_decode_next_start(v_hi.0, v_lo.0) -> eval_code_map_decode_next_bb1_in(v_hi.0, v_lo.0)
	start location:	eval_code_map_decode_next_start
	leaf cost:	10

Repeatedly propagating knowledge in problem 6 produces the following problem:
7:	T:
		(?, 2)    eval_code_map_decode_next_bb11_in(v_hi.0, v_lo.0) -> eval_code_map_decode_next_bb11_in(nondef.19 + 1, 0) [ v_lo.0 + 1 >= v_hi.0 ]
		(?, 1)    eval_code_map_decode_next_bb11_in(v_hi.0, v_lo.0) -> eval_code_map_decode_next_bb11_in(nondef.20, v_lo.0) [ v_lo.0 + 1 < v_hi.0 ]
		(?, 1)    eval_code_map_decode_next_bb11_in(v_hi.0, v_lo.0) -> eval_code_map_decode_next_bb11_in(nondef.20, nondef.20) [ v_lo.0 + 1 < v_hi.0 ]
		(?, 1)    eval_code_map_decode_next_bb11_in(v_hi.0, v_lo.0) -> eval_code_map_decode_next_bb11_in(v_hi.0, v_lo.0) [ v_lo.0 + 1 < v_hi.0 ]
		(?, 1)    eval_code_map_decode_next_bb11_in(v_hi.0, v_lo.0) -> eval_code_map_decode_next_bb11_in(v_hi.0, nondef.20) [ v_lo.0 + 1 < v_hi.0 ]
		(1, 1)    eval_code_map_decode_next_bb1_in(v_hi.0, v_lo.0) -> eval_code_map_decode_next_bb11_in(nondef.19 + 1, 0)
		(1, 2)    eval_code_map_decode_next_start(v_hi.0, v_lo.0) -> eval_code_map_decode_next_bb1_in(v_hi.0, v_lo.0)
	start location:	eval_code_map_decode_next_start
	leaf cost:	10

By chaining the transition eval_code_map_decode_next_bb11_in(v_hi.0, v_lo.0) -> eval_code_map_decode_next_bb11_in(nondef.20, nondef.20) [ v_lo.0 + 1 < v_hi.0 ] with all transitions in problem 7, the following new transition is obtained:
	eval_code_map_decode_next_bb11_in(v_hi.0, v_lo.0) -> eval_code_map_decode_next_bb11_in(nondef.19 + 1, 0) [ v_lo.0 + 1 < v_hi.0 /\ nondef.20 + 1 >= nondef.20 ]
We thus obtain the following problem:
8:	T:
		(?, 3)    eval_code_map_decode_next_bb11_in(v_hi.0, v_lo.0) -> eval_code_map_decode_next_bb11_in(nondef.19 + 1, 0) [ v_lo.0 + 1 < v_hi.0 /\ nondef.20 + 1 >= nondef.20 ]
		(?, 2)    eval_code_map_decode_next_bb11_in(v_hi.0, v_lo.0) -> eval_code_map_decode_next_bb11_in(nondef.19 + 1, 0) [ v_lo.0 + 1 >= v_hi.0 ]
		(?, 1)    eval_code_map_decode_next_bb11_in(v_hi.0, v_lo.0) -> eval_code_map_decode_next_bb11_in(nondef.20, v_lo.0) [ v_lo.0 + 1 < v_hi.0 ]
		(?, 1)    eval_code_map_decode_next_bb11_in(v_hi.0, v_lo.0) -> eval_code_map_decode_next_bb11_in(v_hi.0, v_lo.0) [ v_lo.0 + 1 < v_hi.0 ]
		(?, 1)    eval_code_map_decode_next_bb11_in(v_hi.0, v_lo.0) -> eval_code_map_decode_next_bb11_in(v_hi.0, nondef.20) [ v_lo.0 + 1 < v_hi.0 ]
		(1, 1)    eval_code_map_decode_next_bb1_in(v_hi.0, v_lo.0) -> eval_code_map_decode_next_bb11_in(nondef.19 + 1, 0)
		(1, 2)    eval_code_map_decode_next_start(v_hi.0, v_lo.0) -> eval_code_map_decode_next_bb1_in(v_hi.0, v_lo.0)
	start location:	eval_code_map_decode_next_start
	leaf cost:	10

By chaining the transition eval_code_map_decode_next_start(v_hi.0, v_lo.0) -> eval_code_map_decode_next_bb1_in(v_hi.0, v_lo.0) with all transitions in problem 8, the following new transition is obtained:
	eval_code_map_decode_next_start(v_hi.0, v_lo.0) -> eval_code_map_decode_next_bb11_in(nondef.19 + 1, 0)
We thus obtain the following problem:
9:	T:
		(1, 3)    eval_code_map_decode_next_start(v_hi.0, v_lo.0) -> eval_code_map_decode_next_bb11_in(nondef.19 + 1, 0)
		(?, 3)    eval_code_map_decode_next_bb11_in(v_hi.0, v_lo.0) -> eval_code_map_decode_next_bb11_in(nondef.19 + 1, 0) [ v_lo.0 + 1 < v_hi.0 /\ nondef.20 + 1 >= nondef.20 ]
		(?, 2)    eval_code_map_decode_next_bb11_in(v_hi.0, v_lo.0) -> eval_code_map_decode_next_bb11_in(nondef.19 + 1, 0) [ v_lo.0 + 1 >= v_hi.0 ]
		(?, 1)    eval_code_map_decode_next_bb11_in(v_hi.0, v_lo.0) -> eval_code_map_decode_next_bb11_in(nondef.20, v_lo.0) [ v_lo.0 + 1 < v_hi.0 ]
		(?, 1)    eval_code_map_decode_next_bb11_in(v_hi.0, v_lo.0) -> eval_code_map_decode_next_bb11_in(v_hi.0, v_lo.0) [ v_lo.0 + 1 < v_hi.0 ]
		(?, 1)    eval_code_map_decode_next_bb11_in(v_hi.0, v_lo.0) -> eval_code_map_decode_next_bb11_in(v_hi.0, nondef.20) [ v_lo.0 + 1 < v_hi.0 ]
		(1, 1)    eval_code_map_decode_next_bb1_in(v_hi.0, v_lo.0) -> eval_code_map_decode_next_bb11_in(nondef.19 + 1, 0)
	start location:	eval_code_map_decode_next_start
	leaf cost:	10

Testing for reachability in the complexity graph removes the following transition from problem 9:
	eval_code_map_decode_next_bb1_in(v_hi.0, v_lo.0) -> eval_code_map_decode_next_bb11_in(nondef.19 + 1, 0)
We thus obtain the following problem:
10:	T:
		(?, 3)    eval_code_map_decode_next_bb11_in(v_hi.0, v_lo.0) -> eval_code_map_decode_next_bb11_in(nondef.19 + 1, 0) [ v_lo.0 + 1 < v_hi.0 /\ nondef.20 + 1 >= nondef.20 ]
		(?, 2)    eval_code_map_decode_next_bb11_in(v_hi.0, v_lo.0) -> eval_code_map_decode_next_bb11_in(nondef.19 + 1, 0) [ v_lo.0 + 1 >= v_hi.0 ]
		(?, 1)    eval_code_map_decode_next_bb11_in(v_hi.0, v_lo.0) -> eval_code_map_decode_next_bb11_in(nondef.20, v_lo.0) [ v_lo.0 + 1 < v_hi.0 ]
		(?, 1)    eval_code_map_decode_next_bb11_in(v_hi.0, v_lo.0) -> eval_code_map_decode_next_bb11_in(v_hi.0, v_lo.0) [ v_lo.0 + 1 < v_hi.0 ]
		(?, 1)    eval_code_map_decode_next_bb11_in(v_hi.0, v_lo.0) -> eval_code_map_decode_next_bb11_in(v_hi.0, nondef.20) [ v_lo.0 + 1 < v_hi.0 ]
		(1, 3)    eval_code_map_decode_next_start(v_hi.0, v_lo.0) -> eval_code_map_decode_next_bb11_in(nondef.19 + 1, 0)
	start location:	eval_code_map_decode_next_start
	leaf cost:	10

Complexity upper bound ?

Time: 0.147 sec (SMT: 0.124 sec)

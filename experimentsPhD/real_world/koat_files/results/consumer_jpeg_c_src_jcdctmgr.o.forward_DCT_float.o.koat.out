YES(?, 539*v_num_blocks + 234)

Initial complexity problem:
1:	T:
		(1, 1)    eval_forward_DCT_float_start(v_bi.0, v_elemr.0, v_i.0, v_num_blocks, v_start_col, v_start_row) -> eval_forward_DCT_float_bb0_in(v_bi.0, v_elemr.0, v_i.0, v_num_blocks, v_start_col, v_start_row)
		(?, 1)    eval_forward_DCT_float_bb0_in(v_bi.0, v_elemr.0, v_i.0, v_num_blocks, v_start_col, v_start_row) -> eval_forward_DCT_float_bb1_in(0, v_elemr.0, v_i.0, v_num_blocks, v_start_col, v_start_row)
		(?, 1)    eval_forward_DCT_float_bb1_in(v_bi.0, v_elemr.0, v_i.0, v_num_blocks, v_start_col, v_start_row) -> eval_forward_DCT_float_bb3_in(v_bi.0, 0, v_i.0, v_num_blocks, v_start_col, v_start_row) [ v_bi.0 < v_num_blocks ]
		(?, 1)    eval_forward_DCT_float_bb1_in(v_bi.0, v_elemr.0, v_i.0, v_num_blocks, v_start_col, v_start_row) -> eval_forward_DCT_float_stop(v_bi.0, v_elemr.0, v_i.0, v_num_blocks, v_start_col, v_start_row) [ v_bi.0 >= v_num_blocks ]
		(?, 1)    eval_forward_DCT_float_bb3_in(v_bi.0, v_elemr.0, v_i.0, v_num_blocks, v_start_col, v_start_row) -> eval_forward_DCT_float_bb3_in(v_bi.0, v_elemr.0 + 1, v_i.0, v_num_blocks, v_start_col, v_start_row) [ v_elemr.0 < 8 ]
		(?, 1)    eval_forward_DCT_float_bb3_in(v_bi.0, v_elemr.0, v_i.0, v_num_blocks, v_start_col, v_start_row) -> eval_forward_DCT_float_41(v_bi.0, v_elemr.0, v_i.0, v_num_blocks, v_start_col, v_start_row) [ v_elemr.0 >= 8 ]
		(?, 1)    eval_forward_DCT_float_41(v_bi.0, v_elemr.0, v_i.0, v_num_blocks, v_start_col, v_start_row) -> eval_forward_DCT_float_42(v_bi.0, v_elemr.0, v_i.0, v_num_blocks, v_start_col, v_start_row)
		(?, 1)    eval_forward_DCT_float_42(v_bi.0, v_elemr.0, v_i.0, v_num_blocks, v_start_col, v_start_row) -> eval_forward_DCT_float_bb6_in(v_bi.0, v_elemr.0, 0, v_num_blocks, v_start_col, v_start_row)
		(?, 1)    eval_forward_DCT_float_bb6_in(v_bi.0, v_elemr.0, v_i.0, v_num_blocks, v_start_col, v_start_row) -> eval_forward_DCT_float_bb6_in(v_bi.0, v_elemr.0, v_i.0 + 1, v_num_blocks, v_start_col, v_start_row) [ v_i.0 < 64 ]
		(?, 1)    eval_forward_DCT_float_bb6_in(v_bi.0, v_elemr.0, v_i.0, v_num_blocks, v_start_col, v_start_row) -> eval_forward_DCT_float_bb1_in(v_bi.0 + 1, v_elemr.0, v_i.0, v_num_blocks, v_start_col, v_start_row) [ v_i.0 >= 64 ]
	start location:	eval_forward_DCT_float_start
	leaf cost:	0

Slicing away variables that do not contribute to conditions from problem 1 leaves variables [v_bi.0, v_elemr.0, v_i.0, v_num_blocks].
We thus obtain the following problem:
2:	T:
		(?, 1)    eval_forward_DCT_float_bb6_in(v_bi.0, v_elemr.0, v_i.0, v_num_blocks) -> eval_forward_DCT_float_bb1_in(v_bi.0 + 1, v_elemr.0, v_i.0, v_num_blocks) [ v_i.0 >= 64 ]
		(?, 1)    eval_forward_DCT_float_bb6_in(v_bi.0, v_elemr.0, v_i.0, v_num_blocks) -> eval_forward_DCT_float_bb6_in(v_bi.0, v_elemr.0, v_i.0 + 1, v_num_blocks) [ v_i.0 < 64 ]
		(?, 1)    eval_forward_DCT_float_42(v_bi.0, v_elemr.0, v_i.0, v_num_blocks) -> eval_forward_DCT_float_bb6_in(v_bi.0, v_elemr.0, 0, v_num_blocks)
		(?, 1)    eval_forward_DCT_float_41(v_bi.0, v_elemr.0, v_i.0, v_num_blocks) -> eval_forward_DCT_float_42(v_bi.0, v_elemr.0, v_i.0, v_num_blocks)
		(?, 1)    eval_forward_DCT_float_bb3_in(v_bi.0, v_elemr.0, v_i.0, v_num_blocks) -> eval_forward_DCT_float_41(v_bi.0, v_elemr.0, v_i.0, v_num_blocks) [ v_elemr.0 >= 8 ]
		(?, 1)    eval_forward_DCT_float_bb3_in(v_bi.0, v_elemr.0, v_i.0, v_num_blocks) -> eval_forward_DCT_float_bb3_in(v_bi.0, v_elemr.0 + 1, v_i.0, v_num_blocks) [ v_elemr.0 < 8 ]
		(?, 1)    eval_forward_DCT_float_bb1_in(v_bi.0, v_elemr.0, v_i.0, v_num_blocks) -> eval_forward_DCT_float_stop(v_bi.0, v_elemr.0, v_i.0, v_num_blocks) [ v_bi.0 >= v_num_blocks ]
		(?, 1)    eval_forward_DCT_float_bb1_in(v_bi.0, v_elemr.0, v_i.0, v_num_blocks) -> eval_forward_DCT_float_bb3_in(v_bi.0, 0, v_i.0, v_num_blocks) [ v_bi.0 < v_num_blocks ]
		(?, 1)    eval_forward_DCT_float_bb0_in(v_bi.0, v_elemr.0, v_i.0, v_num_blocks) -> eval_forward_DCT_float_bb1_in(0, v_elemr.0, v_i.0, v_num_blocks)
		(1, 1)    eval_forward_DCT_float_start(v_bi.0, v_elemr.0, v_i.0, v_num_blocks) -> eval_forward_DCT_float_bb0_in(v_bi.0, v_elemr.0, v_i.0, v_num_blocks)
	start location:	eval_forward_DCT_float_start
	leaf cost:	0

Repeatedly removing leaves of the complexity graph in problem 2 produces the following problem:
3:	T:
		(?, 1)    eval_forward_DCT_float_bb6_in(v_bi.0, v_elemr.0, v_i.0, v_num_blocks) -> eval_forward_DCT_float_bb1_in(v_bi.0 + 1, v_elemr.0, v_i.0, v_num_blocks) [ v_i.0 >= 64 ]
		(?, 1)    eval_forward_DCT_float_bb6_in(v_bi.0, v_elemr.0, v_i.0, v_num_blocks) -> eval_forward_DCT_float_bb6_in(v_bi.0, v_elemr.0, v_i.0 + 1, v_num_blocks) [ v_i.0 < 64 ]
		(?, 1)    eval_forward_DCT_float_42(v_bi.0, v_elemr.0, v_i.0, v_num_blocks) -> eval_forward_DCT_float_bb6_in(v_bi.0, v_elemr.0, 0, v_num_blocks)
		(?, 1)    eval_forward_DCT_float_41(v_bi.0, v_elemr.0, v_i.0, v_num_blocks) -> eval_forward_DCT_float_42(v_bi.0, v_elemr.0, v_i.0, v_num_blocks)
		(?, 1)    eval_forward_DCT_float_bb3_in(v_bi.0, v_elemr.0, v_i.0, v_num_blocks) -> eval_forward_DCT_float_41(v_bi.0, v_elemr.0, v_i.0, v_num_blocks) [ v_elemr.0 >= 8 ]
		(?, 1)    eval_forward_DCT_float_bb3_in(v_bi.0, v_elemr.0, v_i.0, v_num_blocks) -> eval_forward_DCT_float_bb3_in(v_bi.0, v_elemr.0 + 1, v_i.0, v_num_blocks) [ v_elemr.0 < 8 ]
		(?, 1)    eval_forward_DCT_float_bb1_in(v_bi.0, v_elemr.0, v_i.0, v_num_blocks) -> eval_forward_DCT_float_bb3_in(v_bi.0, 0, v_i.0, v_num_blocks) [ v_bi.0 < v_num_blocks ]
		(?, 1)    eval_forward_DCT_float_bb0_in(v_bi.0, v_elemr.0, v_i.0, v_num_blocks) -> eval_forward_DCT_float_bb1_in(0, v_elemr.0, v_i.0, v_num_blocks)
		(1, 1)    eval_forward_DCT_float_start(v_bi.0, v_elemr.0, v_i.0, v_num_blocks) -> eval_forward_DCT_float_bb0_in(v_bi.0, v_elemr.0, v_i.0, v_num_blocks)
	start location:	eval_forward_DCT_float_start
	leaf cost:	1

Repeatedly propagating knowledge in problem 3 produces the following problem:
4:	T:
		(?, 1)    eval_forward_DCT_float_bb6_in(v_bi.0, v_elemr.0, v_i.0, v_num_blocks) -> eval_forward_DCT_float_bb1_in(v_bi.0 + 1, v_elemr.0, v_i.0, v_num_blocks) [ v_i.0 >= 64 ]
		(?, 1)    eval_forward_DCT_float_bb6_in(v_bi.0, v_elemr.0, v_i.0, v_num_blocks) -> eval_forward_DCT_float_bb6_in(v_bi.0, v_elemr.0, v_i.0 + 1, v_num_blocks) [ v_i.0 < 64 ]
		(?, 1)    eval_forward_DCT_float_42(v_bi.0, v_elemr.0, v_i.0, v_num_blocks) -> eval_forward_DCT_float_bb6_in(v_bi.0, v_elemr.0, 0, v_num_blocks)
		(?, 1)    eval_forward_DCT_float_41(v_bi.0, v_elemr.0, v_i.0, v_num_blocks) -> eval_forward_DCT_float_42(v_bi.0, v_elemr.0, v_i.0, v_num_blocks)
		(?, 1)    eval_forward_DCT_float_bb3_in(v_bi.0, v_elemr.0, v_i.0, v_num_blocks) -> eval_forward_DCT_float_41(v_bi.0, v_elemr.0, v_i.0, v_num_blocks) [ v_elemr.0 >= 8 ]
		(?, 1)    eval_forward_DCT_float_bb3_in(v_bi.0, v_elemr.0, v_i.0, v_num_blocks) -> eval_forward_DCT_float_bb3_in(v_bi.0, v_elemr.0 + 1, v_i.0, v_num_blocks) [ v_elemr.0 < 8 ]
		(?, 1)    eval_forward_DCT_float_bb1_in(v_bi.0, v_elemr.0, v_i.0, v_num_blocks) -> eval_forward_DCT_float_bb3_in(v_bi.0, 0, v_i.0, v_num_blocks) [ v_bi.0 < v_num_blocks ]
		(1, 1)    eval_forward_DCT_float_bb0_in(v_bi.0, v_elemr.0, v_i.0, v_num_blocks) -> eval_forward_DCT_float_bb1_in(0, v_elemr.0, v_i.0, v_num_blocks)
		(1, 1)    eval_forward_DCT_float_start(v_bi.0, v_elemr.0, v_i.0, v_num_blocks) -> eval_forward_DCT_float_bb0_in(v_bi.0, v_elemr.0, v_i.0, v_num_blocks)
	start location:	eval_forward_DCT_float_start
	leaf cost:	1

Separating problem 4 produces the isolated subproblem
10001:	T:
		(1, 0)    inner_10000_start_sep(v_bi.0, v_elemr.0, v_i.0, v_num_blocks) -> eval_forward_DCT_float_bb3_in(v_bi.0, 0, v_i.0, v_num_blocks)
		(?, 1)    eval_forward_DCT_float_bb3_in(v_bi.0, v_elemr.0, v_i.0, v_num_blocks) -> eval_forward_DCT_float_bb3_in(v_bi.0, v_elemr.0 + 1, v_i.0, v_num_blocks) [ v_elemr.0 < 8 ]
	start location:	inner_10000_start_sep
	leaf cost:	0

=== begin of proof for isolated subproblem 10001 ===
	Initial complexity problem:
	10001:	T:
			(1, 0)    inner_10000_start_sep(v_bi.0, v_elemr.0, v_i.0, v_num_blocks) -> eval_forward_DCT_float_bb3_in(v_bi.0, 0, v_i.0, v_num_blocks)
			(?, 1)    eval_forward_DCT_float_bb3_in(v_bi.0, v_elemr.0, v_i.0, v_num_blocks) -> eval_forward_DCT_float_bb3_in(v_bi.0, v_elemr.0 + 1, v_i.0, v_num_blocks) [ v_elemr.0 < 8 ]
		start location:	inner_10000_start_sep
		leaf cost:	0
	
	A polynomial rank function with
		Pol(inner_10000_start_sep) = 8
		Pol(eval_forward_DCT_float_bb3_in) = -V_2 + 8
	orients all transitions weakly and the transition
		eval_forward_DCT_float_bb3_in(v_bi.0, v_elemr.0, v_i.0, v_num_blocks) -> eval_forward_DCT_float_bb3_in(v_bi.0, v_elemr.0 + 1, v_i.0, v_num_blocks) [ v_elemr.0 < 8 ]
	strictly and produces the following problem:
	10002:	T:
			(1, 0)    inner_10000_start_sep(v_bi.0, v_elemr.0, v_i.0, v_num_blocks) -> eval_forward_DCT_float_bb3_in(v_bi.0, 0, v_i.0, v_num_blocks)
			(8, 1)    eval_forward_DCT_float_bb3_in(v_bi.0, v_elemr.0, v_i.0, v_num_blocks) -> eval_forward_DCT_float_bb3_in(v_bi.0, v_elemr.0 + 1, v_i.0, v_num_blocks) [ v_elemr.0 < 8 ]
		start location:	inner_10000_start_sep
		leaf cost:	0
=== end of proof for isolated subproblem 10001 ===

Applying the information from the isolated subproblem 10001 to problem 4 produces the following problem:
5:	T:
		(?, 0)    inner_10000_in_sep(v_bi.0, v_elemr.0, v_i.0, v_num_blocks) -> inner_10000_out_sep(v_bi.0, v_elemr.0, v_i.0, v_num_blocks)
		(?, 8)    inner_10000_in_sep(v_bi.0, v_elemr.0, v_i.0, v_num_blocks) -> inner_10000_compl_sep(v_bi.0, v_elemr.0, v_i.0, v_num_blocks)
		(?, 0)    inner_10000_compl_sep(v_bi.0, v_elemr.0, v_i.0, v_num_blocks) -> inner_10000_out_sep(v_bi.0, v_elemr.0_sep, v_i.0, v_num_blocks) [ v_elemr.0_sep >= 0 /\ v_elemr.0_sep <= 8 ]
		(?, 0)    inner_10000_compl_sep(v_bi.0, v_elemr.0, v_i.0, v_num_blocks) -> inner_10000_out_sep(v_bi.0, v_elemr.0_sep, v_i.0, v_num_blocks) [ v_elemr.0_sep < 0 /\ -v_elemr.0_sep <= 8 ]
		(?, 1)    inner_10000_out_sep(v_bi.0, v_elemr.0, v_i.0, v_num_blocks) -> eval_forward_DCT_float_41(v_bi.0, v_elemr.0, v_i.0, v_num_blocks) [ v_elemr.0 >= 8 ]
		(?, 1)    eval_forward_DCT_float_bb1_in(v_bi.0, v_elemr.0, v_i.0, v_num_blocks) -> inner_10000_in_sep(v_bi.0, 0, v_i.0, v_num_blocks) [ v_bi.0 < v_num_blocks ]
		(1, 1)    eval_forward_DCT_float_start(v_bi.0, v_elemr.0, v_i.0, v_num_blocks) -> eval_forward_DCT_float_bb0_in(v_bi.0, v_elemr.0, v_i.0, v_num_blocks)
		(1, 1)    eval_forward_DCT_float_bb0_in(v_bi.0, v_elemr.0, v_i.0, v_num_blocks) -> eval_forward_DCT_float_bb1_in(0, v_elemr.0, v_i.0, v_num_blocks)
		(?, 1)    eval_forward_DCT_float_41(v_bi.0, v_elemr.0, v_i.0, v_num_blocks) -> eval_forward_DCT_float_42(v_bi.0, v_elemr.0, v_i.0, v_num_blocks)
		(?, 1)    eval_forward_DCT_float_42(v_bi.0, v_elemr.0, v_i.0, v_num_blocks) -> eval_forward_DCT_float_bb6_in(v_bi.0, v_elemr.0, 0, v_num_blocks)
		(?, 1)    eval_forward_DCT_float_bb6_in(v_bi.0, v_elemr.0, v_i.0, v_num_blocks) -> eval_forward_DCT_float_bb6_in(v_bi.0, v_elemr.0, v_i.0 + 1, v_num_blocks) [ v_i.0 < 64 ]
		(?, 1)    eval_forward_DCT_float_bb6_in(v_bi.0, v_elemr.0, v_i.0, v_num_blocks) -> eval_forward_DCT_float_bb1_in(v_bi.0 + 1, v_elemr.0, v_i.0, v_num_blocks) [ v_i.0 >= 64 ]
	start location:	eval_forward_DCT_float_start
	leaf cost:	1

Applied AI with 'oct' on problem 5 to obtain the following invariants:
  For symbol eval_forward_DCT_float_41: X_4 - 1 >= 0 /\ X_2 + X_4 - 9 >= 0 /\ -X_2 + X_4 + 7 >= 0 /\ X_1 + X_4 - 1 >= 0 /\ -X_1 + X_4 - 1 >= 0 /\ -X_2 + 8 >= 0 /\ X_1 - X_2 + 8 >= 0 /\ X_2 - 8 >= 0 /\ X_1 + X_2 - 8 >= 0 /\ X_1 >= 0
  For symbol eval_forward_DCT_float_42: X_4 - 1 >= 0 /\ X_2 + X_4 - 9 >= 0 /\ -X_2 + X_4 + 7 >= 0 /\ X_1 + X_4 - 1 >= 0 /\ -X_1 + X_4 - 1 >= 0 /\ -X_2 + 8 >= 0 /\ X_1 - X_2 + 8 >= 0 /\ X_2 - 8 >= 0 /\ X_1 + X_2 - 8 >= 0 /\ X_1 >= 0
  For symbol eval_forward_DCT_float_bb1_in: X_1 >= 0
  For symbol eval_forward_DCT_float_bb6_in: X_4 - 1 >= 0 /\ X_3 + X_4 - 1 >= 0 /\ X_2 + X_4 - 9 >= 0 /\ -X_2 + X_4 + 7 >= 0 /\ X_1 + X_4 - 1 >= 0 /\ -X_1 + X_4 - 1 >= 0 /\ X_3 >= 0 /\ X_2 + X_3 - 8 >= 0 /\ -X_2 + X_3 + 8 >= 0 /\ X_1 + X_3 >= 0 /\ -X_2 + 8 >= 0 /\ X_1 - X_2 + 8 >= 0 /\ X_2 - 8 >= 0 /\ X_1 + X_2 - 8 >= 0 /\ X_1 >= 0
  For symbol inner_10000_compl_sep: X_4 - 1 >= 0 /\ X_2 + X_4 - 1 >= 0 /\ -X_2 + X_4 - 1 >= 0 /\ X_1 + X_4 - 1 >= 0 /\ -X_1 + X_4 - 1 >= 0 /\ -X_2 >= 0 /\ X_1 - X_2 >= 0 /\ X_2 >= 0 /\ X_1 + X_2 >= 0 /\ X_1 >= 0
  For symbol inner_10000_in_sep: X_4 - 1 >= 0 /\ X_2 + X_4 - 1 >= 0 /\ -X_2 + X_4 - 1 >= 0 /\ X_1 + X_4 - 1 >= 0 /\ -X_1 + X_4 - 1 >= 0 /\ -X_2 >= 0 /\ X_1 - X_2 >= 0 /\ X_2 >= 0 /\ X_1 + X_2 >= 0 /\ X_1 >= 0
  For symbol inner_10000_out_sep: X_4 - 1 >= 0 /\ X_2 + X_4 + 7 >= 0 /\ -X_2 + X_4 + 7 >= 0 /\ X_1 + X_4 - 1 >= 0 /\ -X_1 + X_4 - 1 >= 0 /\ -X_2 + 8 >= 0 /\ X_1 - X_2 + 8 >= 0 /\ X_2 + 8 >= 0 /\ X_1 + X_2 + 8 >= 0 /\ X_1 >= 0


This yielded the following problem:
6:	T:
		(?, 1)    eval_forward_DCT_float_bb6_in(v_bi.0, v_elemr.0, v_i.0, v_num_blocks) -> eval_forward_DCT_float_bb1_in(v_bi.0 + 1, v_elemr.0, v_i.0, v_num_blocks) [ v_num_blocks - 1 >= 0 /\ v_i.0 + v_num_blocks - 1 >= 0 /\ v_elemr.0 + v_num_blocks - 9 >= 0 /\ -v_elemr.0 + v_num_blocks + 7 >= 0 /\ v_bi.0 + v_num_blocks - 1 >= 0 /\ -v_bi.0 + v_num_blocks - 1 >= 0 /\ v_i.0 >= 0 /\ v_elemr.0 + v_i.0 - 8 >= 0 /\ -v_elemr.0 + v_i.0 + 8 >= 0 /\ v_bi.0 + v_i.0 >= 0 /\ -v_elemr.0 + 8 >= 0 /\ v_bi.0 - v_elemr.0 + 8 >= 0 /\ v_elemr.0 - 8 >= 0 /\ v_bi.0 + v_elemr.0 - 8 >= 0 /\ v_bi.0 >= 0 /\ v_i.0 >= 64 ]
		(?, 1)    eval_forward_DCT_float_bb6_in(v_bi.0, v_elemr.0, v_i.0, v_num_blocks) -> eval_forward_DCT_float_bb6_in(v_bi.0, v_elemr.0, v_i.0 + 1, v_num_blocks) [ v_num_blocks - 1 >= 0 /\ v_i.0 + v_num_blocks - 1 >= 0 /\ v_elemr.0 + v_num_blocks - 9 >= 0 /\ -v_elemr.0 + v_num_blocks + 7 >= 0 /\ v_bi.0 + v_num_blocks - 1 >= 0 /\ -v_bi.0 + v_num_blocks - 1 >= 0 /\ v_i.0 >= 0 /\ v_elemr.0 + v_i.0 - 8 >= 0 /\ -v_elemr.0 + v_i.0 + 8 >= 0 /\ v_bi.0 + v_i.0 >= 0 /\ -v_elemr.0 + 8 >= 0 /\ v_bi.0 - v_elemr.0 + 8 >= 0 /\ v_elemr.0 - 8 >= 0 /\ v_bi.0 + v_elemr.0 - 8 >= 0 /\ v_bi.0 >= 0 /\ v_i.0 < 64 ]
		(?, 1)    eval_forward_DCT_float_42(v_bi.0, v_elemr.0, v_i.0, v_num_blocks) -> eval_forward_DCT_float_bb6_in(v_bi.0, v_elemr.0, 0, v_num_blocks) [ v_num_blocks - 1 >= 0 /\ v_elemr.0 + v_num_blocks - 9 >= 0 /\ -v_elemr.0 + v_num_blocks + 7 >= 0 /\ v_bi.0 + v_num_blocks - 1 >= 0 /\ -v_bi.0 + v_num_blocks - 1 >= 0 /\ -v_elemr.0 + 8 >= 0 /\ v_bi.0 - v_elemr.0 + 8 >= 0 /\ v_elemr.0 - 8 >= 0 /\ v_bi.0 + v_elemr.0 - 8 >= 0 /\ v_bi.0 >= 0 ]
		(?, 1)    eval_forward_DCT_float_41(v_bi.0, v_elemr.0, v_i.0, v_num_blocks) -> eval_forward_DCT_float_42(v_bi.0, v_elemr.0, v_i.0, v_num_blocks) [ v_num_blocks - 1 >= 0 /\ v_elemr.0 + v_num_blocks - 9 >= 0 /\ -v_elemr.0 + v_num_blocks + 7 >= 0 /\ v_bi.0 + v_num_blocks - 1 >= 0 /\ -v_bi.0 + v_num_blocks - 1 >= 0 /\ -v_elemr.0 + 8 >= 0 /\ v_bi.0 - v_elemr.0 + 8 >= 0 /\ v_elemr.0 - 8 >= 0 /\ v_bi.0 + v_elemr.0 - 8 >= 0 /\ v_bi.0 >= 0 ]
		(1, 1)    eval_forward_DCT_float_bb0_in(v_bi.0, v_elemr.0, v_i.0, v_num_blocks) -> eval_forward_DCT_float_bb1_in(0, v_elemr.0, v_i.0, v_num_blocks)
		(1, 1)    eval_forward_DCT_float_start(v_bi.0, v_elemr.0, v_i.0, v_num_blocks) -> eval_forward_DCT_float_bb0_in(v_bi.0, v_elemr.0, v_i.0, v_num_blocks)
		(?, 1)    eval_forward_DCT_float_bb1_in(v_bi.0, v_elemr.0, v_i.0, v_num_blocks) -> inner_10000_in_sep(v_bi.0, 0, v_i.0, v_num_blocks) [ v_bi.0 >= 0 /\ v_bi.0 < v_num_blocks ]
		(?, 1)    inner_10000_out_sep(v_bi.0, v_elemr.0, v_i.0, v_num_blocks) -> eval_forward_DCT_float_41(v_bi.0, v_elemr.0, v_i.0, v_num_blocks) [ v_num_blocks - 1 >= 0 /\ v_elemr.0 + v_num_blocks + 7 >= 0 /\ -v_elemr.0 + v_num_blocks + 7 >= 0 /\ v_bi.0 + v_num_blocks - 1 >= 0 /\ -v_bi.0 + v_num_blocks - 1 >= 0 /\ -v_elemr.0 + 8 >= 0 /\ v_bi.0 - v_elemr.0 + 8 >= 0 /\ v_elemr.0 + 8 >= 0 /\ v_bi.0 + v_elemr.0 + 8 >= 0 /\ v_bi.0 >= 0 /\ v_elemr.0 >= 8 ]
		(?, 0)    inner_10000_compl_sep(v_bi.0, v_elemr.0, v_i.0, v_num_blocks) -> inner_10000_out_sep(v_bi.0, v_elemr.0_sep, v_i.0, v_num_blocks) [ v_num_blocks - 1 >= 0 /\ v_elemr.0 + v_num_blocks - 1 >= 0 /\ -v_elemr.0 + v_num_blocks - 1 >= 0 /\ v_bi.0 + v_num_blocks - 1 >= 0 /\ -v_bi.0 + v_num_blocks - 1 >= 0 /\ -v_elemr.0 >= 0 /\ v_bi.0 - v_elemr.0 >= 0 /\ v_elemr.0 >= 0 /\ v_bi.0 + v_elemr.0 >= 0 /\ v_bi.0 >= 0 /\ v_elemr.0_sep < 0 /\ -v_elemr.0_sep <= 8 ]
		(?, 0)    inner_10000_compl_sep(v_bi.0, v_elemr.0, v_i.0, v_num_blocks) -> inner_10000_out_sep(v_bi.0, v_elemr.0_sep, v_i.0, v_num_blocks) [ v_num_blocks - 1 >= 0 /\ v_elemr.0 + v_num_blocks - 1 >= 0 /\ -v_elemr.0 + v_num_blocks - 1 >= 0 /\ v_bi.0 + v_num_blocks - 1 >= 0 /\ -v_bi.0 + v_num_blocks - 1 >= 0 /\ -v_elemr.0 >= 0 /\ v_bi.0 - v_elemr.0 >= 0 /\ v_elemr.0 >= 0 /\ v_bi.0 + v_elemr.0 >= 0 /\ v_bi.0 >= 0 /\ v_elemr.0_sep >= 0 /\ v_elemr.0_sep <= 8 ]
		(?, 8)    inner_10000_in_sep(v_bi.0, v_elemr.0, v_i.0, v_num_blocks) -> inner_10000_compl_sep(v_bi.0, v_elemr.0, v_i.0, v_num_blocks) [ v_num_blocks - 1 >= 0 /\ v_elemr.0 + v_num_blocks - 1 >= 0 /\ -v_elemr.0 + v_num_blocks - 1 >= 0 /\ v_bi.0 + v_num_blocks - 1 >= 0 /\ -v_bi.0 + v_num_blocks - 1 >= 0 /\ -v_elemr.0 >= 0 /\ v_bi.0 - v_elemr.0 >= 0 /\ v_elemr.0 >= 0 /\ v_bi.0 + v_elemr.0 >= 0 /\ v_bi.0 >= 0 ]
		(?, 0)    inner_10000_in_sep(v_bi.0, v_elemr.0, v_i.0, v_num_blocks) -> inner_10000_out_sep(v_bi.0, v_elemr.0, v_i.0, v_num_blocks) [ v_num_blocks - 1 >= 0 /\ v_elemr.0 + v_num_blocks - 1 >= 0 /\ -v_elemr.0 + v_num_blocks - 1 >= 0 /\ v_bi.0 + v_num_blocks - 1 >= 0 /\ -v_bi.0 + v_num_blocks - 1 >= 0 /\ -v_elemr.0 >= 0 /\ v_bi.0 - v_elemr.0 >= 0 /\ v_elemr.0 >= 0 /\ v_bi.0 + v_elemr.0 >= 0 /\ v_bi.0 >= 0 ]
	start location:	eval_forward_DCT_float_start
	leaf cost:	1

A polynomial rank function with
	Pol(eval_forward_DCT_float_bb6_in) = -7*V_1 + 7*V_4 - 3
	Pol(eval_forward_DCT_float_bb1_in) = -7*V_1 + 7*V_4 + 3
	Pol(eval_forward_DCT_float_42) = -7*V_1 + 7*V_4 - 2
	Pol(eval_forward_DCT_float_41) = -7*V_1 + 7*V_4 - 1
	Pol(eval_forward_DCT_float_bb0_in) = 7*V_4 + 3
	Pol(eval_forward_DCT_float_start) = 7*V_4 + 3
	Pol(inner_10000_in_sep) = -7*V_1 + 7*V_4 + 2
	Pol(inner_10000_out_sep) = -7*V_1 + 7*V_4
	Pol(inner_10000_compl_sep) = -7*V_1 + 7*V_4 + 1
orients all transitions weakly and the transitions
	inner_10000_out_sep(v_bi.0, v_elemr.0, v_i.0, v_num_blocks) -> eval_forward_DCT_float_41(v_bi.0, v_elemr.0, v_i.0, v_num_blocks) [ v_num_blocks - 1 >= 0 /\ v_elemr.0 + v_num_blocks + 7 >= 0 /\ -v_elemr.0 + v_num_blocks + 7 >= 0 /\ v_bi.0 + v_num_blocks - 1 >= 0 /\ -v_bi.0 + v_num_blocks - 1 >= 0 /\ -v_elemr.0 + 8 >= 0 /\ v_bi.0 - v_elemr.0 + 8 >= 0 /\ v_elemr.0 + 8 >= 0 /\ v_bi.0 + v_elemr.0 + 8 >= 0 /\ v_bi.0 >= 0 /\ v_elemr.0 >= 8 ]
	inner_10000_in_sep(v_bi.0, v_elemr.0, v_i.0, v_num_blocks) -> inner_10000_out_sep(v_bi.0, v_elemr.0, v_i.0, v_num_blocks) [ v_num_blocks - 1 >= 0 /\ v_elemr.0 + v_num_blocks - 1 >= 0 /\ -v_elemr.0 + v_num_blocks - 1 >= 0 /\ v_bi.0 + v_num_blocks - 1 >= 0 /\ -v_bi.0 + v_num_blocks - 1 >= 0 /\ -v_elemr.0 >= 0 /\ v_bi.0 - v_elemr.0 >= 0 /\ v_elemr.0 >= 0 /\ v_bi.0 + v_elemr.0 >= 0 /\ v_bi.0 >= 0 ]
	inner_10000_in_sep(v_bi.0, v_elemr.0, v_i.0, v_num_blocks) -> inner_10000_compl_sep(v_bi.0, v_elemr.0, v_i.0, v_num_blocks) [ v_num_blocks - 1 >= 0 /\ v_elemr.0 + v_num_blocks - 1 >= 0 /\ -v_elemr.0 + v_num_blocks - 1 >= 0 /\ v_bi.0 + v_num_blocks - 1 >= 0 /\ -v_bi.0 + v_num_blocks - 1 >= 0 /\ -v_elemr.0 >= 0 /\ v_bi.0 - v_elemr.0 >= 0 /\ v_elemr.0 >= 0 /\ v_bi.0 + v_elemr.0 >= 0 /\ v_bi.0 >= 0 ]
	inner_10000_compl_sep(v_bi.0, v_elemr.0, v_i.0, v_num_blocks) -> inner_10000_out_sep(v_bi.0, v_elemr.0_sep, v_i.0, v_num_blocks) [ v_num_blocks - 1 >= 0 /\ v_elemr.0 + v_num_blocks - 1 >= 0 /\ -v_elemr.0 + v_num_blocks - 1 >= 0 /\ v_bi.0 + v_num_blocks - 1 >= 0 /\ -v_bi.0 + v_num_blocks - 1 >= 0 /\ -v_elemr.0 >= 0 /\ v_bi.0 - v_elemr.0 >= 0 /\ v_elemr.0 >= 0 /\ v_bi.0 + v_elemr.0 >= 0 /\ v_bi.0 >= 0 /\ v_elemr.0_sep < 0 /\ -v_elemr.0_sep <= 8 ]
	inner_10000_compl_sep(v_bi.0, v_elemr.0, v_i.0, v_num_blocks) -> inner_10000_out_sep(v_bi.0, v_elemr.0_sep, v_i.0, v_num_blocks) [ v_num_blocks - 1 >= 0 /\ v_elemr.0 + v_num_blocks - 1 >= 0 /\ -v_elemr.0 + v_num_blocks - 1 >= 0 /\ v_bi.0 + v_num_blocks - 1 >= 0 /\ -v_bi.0 + v_num_blocks - 1 >= 0 /\ -v_elemr.0 >= 0 /\ v_bi.0 - v_elemr.0 >= 0 /\ v_elemr.0 >= 0 /\ v_bi.0 + v_elemr.0 >= 0 /\ v_bi.0 >= 0 /\ v_elemr.0_sep >= 0 /\ v_elemr.0_sep <= 8 ]
	eval_forward_DCT_float_bb6_in(v_bi.0, v_elemr.0, v_i.0, v_num_blocks) -> eval_forward_DCT_float_bb1_in(v_bi.0 + 1, v_elemr.0, v_i.0, v_num_blocks) [ v_num_blocks - 1 >= 0 /\ v_i.0 + v_num_blocks - 1 >= 0 /\ v_elemr.0 + v_num_blocks - 9 >= 0 /\ -v_elemr.0 + v_num_blocks + 7 >= 0 /\ v_bi.0 + v_num_blocks - 1 >= 0 /\ -v_bi.0 + v_num_blocks - 1 >= 0 /\ v_i.0 >= 0 /\ v_elemr.0 + v_i.0 - 8 >= 0 /\ -v_elemr.0 + v_i.0 + 8 >= 0 /\ v_bi.0 + v_i.0 >= 0 /\ -v_elemr.0 + 8 >= 0 /\ v_bi.0 - v_elemr.0 + 8 >= 0 /\ v_elemr.0 - 8 >= 0 /\ v_bi.0 + v_elemr.0 - 8 >= 0 /\ v_bi.0 >= 0 /\ v_i.0 >= 64 ]
	eval_forward_DCT_float_bb1_in(v_bi.0, v_elemr.0, v_i.0, v_num_blocks) -> inner_10000_in_sep(v_bi.0, 0, v_i.0, v_num_blocks) [ v_bi.0 >= 0 /\ v_bi.0 < v_num_blocks ]
	eval_forward_DCT_float_42(v_bi.0, v_elemr.0, v_i.0, v_num_blocks) -> eval_forward_DCT_float_bb6_in(v_bi.0, v_elemr.0, 0, v_num_blocks) [ v_num_blocks - 1 >= 0 /\ v_elemr.0 + v_num_blocks - 9 >= 0 /\ -v_elemr.0 + v_num_blocks + 7 >= 0 /\ v_bi.0 + v_num_blocks - 1 >= 0 /\ -v_bi.0 + v_num_blocks - 1 >= 0 /\ -v_elemr.0 + 8 >= 0 /\ v_bi.0 - v_elemr.0 + 8 >= 0 /\ v_elemr.0 - 8 >= 0 /\ v_bi.0 + v_elemr.0 - 8 >= 0 /\ v_bi.0 >= 0 ]
	eval_forward_DCT_float_41(v_bi.0, v_elemr.0, v_i.0, v_num_blocks) -> eval_forward_DCT_float_42(v_bi.0, v_elemr.0, v_i.0, v_num_blocks) [ v_num_blocks - 1 >= 0 /\ v_elemr.0 + v_num_blocks - 9 >= 0 /\ -v_elemr.0 + v_num_blocks + 7 >= 0 /\ v_bi.0 + v_num_blocks - 1 >= 0 /\ -v_bi.0 + v_num_blocks - 1 >= 0 /\ -v_elemr.0 + 8 >= 0 /\ v_bi.0 - v_elemr.0 + 8 >= 0 /\ v_elemr.0 - 8 >= 0 /\ v_bi.0 + v_elemr.0 - 8 >= 0 /\ v_bi.0 >= 0 ]
strictly and produces the following problem:
7:	T:
		(7*v_num_blocks + 3, 1)    eval_forward_DCT_float_bb6_in(v_bi.0, v_elemr.0, v_i.0, v_num_blocks) -> eval_forward_DCT_float_bb1_in(v_bi.0 + 1, v_elemr.0, v_i.0, v_num_blocks) [ v_num_blocks - 1 >= 0 /\ v_i.0 + v_num_blocks - 1 >= 0 /\ v_elemr.0 + v_num_blocks - 9 >= 0 /\ -v_elemr.0 + v_num_blocks + 7 >= 0 /\ v_bi.0 + v_num_blocks - 1 >= 0 /\ -v_bi.0 + v_num_blocks - 1 >= 0 /\ v_i.0 >= 0 /\ v_elemr.0 + v_i.0 - 8 >= 0 /\ -v_elemr.0 + v_i.0 + 8 >= 0 /\ v_bi.0 + v_i.0 >= 0 /\ -v_elemr.0 + 8 >= 0 /\ v_bi.0 - v_elemr.0 + 8 >= 0 /\ v_elemr.0 - 8 >= 0 /\ v_bi.0 + v_elemr.0 - 8 >= 0 /\ v_bi.0 >= 0 /\ v_i.0 >= 64 ]
		(?, 1)                     eval_forward_DCT_float_bb6_in(v_bi.0, v_elemr.0, v_i.0, v_num_blocks) -> eval_forward_DCT_float_bb6_in(v_bi.0, v_elemr.0, v_i.0 + 1, v_num_blocks) [ v_num_blocks - 1 >= 0 /\ v_i.0 + v_num_blocks - 1 >= 0 /\ v_elemr.0 + v_num_blocks - 9 >= 0 /\ -v_elemr.0 + v_num_blocks + 7 >= 0 /\ v_bi.0 + v_num_blocks - 1 >= 0 /\ -v_bi.0 + v_num_blocks - 1 >= 0 /\ v_i.0 >= 0 /\ v_elemr.0 + v_i.0 - 8 >= 0 /\ -v_elemr.0 + v_i.0 + 8 >= 0 /\ v_bi.0 + v_i.0 >= 0 /\ -v_elemr.0 + 8 >= 0 /\ v_bi.0 - v_elemr.0 + 8 >= 0 /\ v_elemr.0 - 8 >= 0 /\ v_bi.0 + v_elemr.0 - 8 >= 0 /\ v_bi.0 >= 0 /\ v_i.0 < 64 ]
		(7*v_num_blocks + 3, 1)    eval_forward_DCT_float_42(v_bi.0, v_elemr.0, v_i.0, v_num_blocks) -> eval_forward_DCT_float_bb6_in(v_bi.0, v_elemr.0, 0, v_num_blocks) [ v_num_blocks - 1 >= 0 /\ v_elemr.0 + v_num_blocks - 9 >= 0 /\ -v_elemr.0 + v_num_blocks + 7 >= 0 /\ v_bi.0 + v_num_blocks - 1 >= 0 /\ -v_bi.0 + v_num_blocks - 1 >= 0 /\ -v_elemr.0 + 8 >= 0 /\ v_bi.0 - v_elemr.0 + 8 >= 0 /\ v_elemr.0 - 8 >= 0 /\ v_bi.0 + v_elemr.0 - 8 >= 0 /\ v_bi.0 >= 0 ]
		(7*v_num_blocks + 3, 1)    eval_forward_DCT_float_41(v_bi.0, v_elemr.0, v_i.0, v_num_blocks) -> eval_forward_DCT_float_42(v_bi.0, v_elemr.0, v_i.0, v_num_blocks) [ v_num_blocks - 1 >= 0 /\ v_elemr.0 + v_num_blocks - 9 >= 0 /\ -v_elemr.0 + v_num_blocks + 7 >= 0 /\ v_bi.0 + v_num_blocks - 1 >= 0 /\ -v_bi.0 + v_num_blocks - 1 >= 0 /\ -v_elemr.0 + 8 >= 0 /\ v_bi.0 - v_elemr.0 + 8 >= 0 /\ v_elemr.0 - 8 >= 0 /\ v_bi.0 + v_elemr.0 - 8 >= 0 /\ v_bi.0 >= 0 ]
		(1, 1)                     eval_forward_DCT_float_bb0_in(v_bi.0, v_elemr.0, v_i.0, v_num_blocks) -> eval_forward_DCT_float_bb1_in(0, v_elemr.0, v_i.0, v_num_blocks)
		(1, 1)                     eval_forward_DCT_float_start(v_bi.0, v_elemr.0, v_i.0, v_num_blocks) -> eval_forward_DCT_float_bb0_in(v_bi.0, v_elemr.0, v_i.0, v_num_blocks)
		(7*v_num_blocks + 3, 1)    eval_forward_DCT_float_bb1_in(v_bi.0, v_elemr.0, v_i.0, v_num_blocks) -> inner_10000_in_sep(v_bi.0, 0, v_i.0, v_num_blocks) [ v_bi.0 >= 0 /\ v_bi.0 < v_num_blocks ]
		(7*v_num_blocks + 3, 1)    inner_10000_out_sep(v_bi.0, v_elemr.0, v_i.0, v_num_blocks) -> eval_forward_DCT_float_41(v_bi.0, v_elemr.0, v_i.0, v_num_blocks) [ v_num_blocks - 1 >= 0 /\ v_elemr.0 + v_num_blocks + 7 >= 0 /\ -v_elemr.0 + v_num_blocks + 7 >= 0 /\ v_bi.0 + v_num_blocks - 1 >= 0 /\ -v_bi.0 + v_num_blocks - 1 >= 0 /\ -v_elemr.0 + 8 >= 0 /\ v_bi.0 - v_elemr.0 + 8 >= 0 /\ v_elemr.0 + 8 >= 0 /\ v_bi.0 + v_elemr.0 + 8 >= 0 /\ v_bi.0 >= 0 /\ v_elemr.0 >= 8 ]
		(7*v_num_blocks + 3, 0)    inner_10000_compl_sep(v_bi.0, v_elemr.0, v_i.0, v_num_blocks) -> inner_10000_out_sep(v_bi.0, v_elemr.0_sep, v_i.0, v_num_blocks) [ v_num_blocks - 1 >= 0 /\ v_elemr.0 + v_num_blocks - 1 >= 0 /\ -v_elemr.0 + v_num_blocks - 1 >= 0 /\ v_bi.0 + v_num_blocks - 1 >= 0 /\ -v_bi.0 + v_num_blocks - 1 >= 0 /\ -v_elemr.0 >= 0 /\ v_bi.0 - v_elemr.0 >= 0 /\ v_elemr.0 >= 0 /\ v_bi.0 + v_elemr.0 >= 0 /\ v_bi.0 >= 0 /\ v_elemr.0_sep < 0 /\ -v_elemr.0_sep <= 8 ]
		(7*v_num_blocks + 3, 0)    inner_10000_compl_sep(v_bi.0, v_elemr.0, v_i.0, v_num_blocks) -> inner_10000_out_sep(v_bi.0, v_elemr.0_sep, v_i.0, v_num_blocks) [ v_num_blocks - 1 >= 0 /\ v_elemr.0 + v_num_blocks - 1 >= 0 /\ -v_elemr.0 + v_num_blocks - 1 >= 0 /\ v_bi.0 + v_num_blocks - 1 >= 0 /\ -v_bi.0 + v_num_blocks - 1 >= 0 /\ -v_elemr.0 >= 0 /\ v_bi.0 - v_elemr.0 >= 0 /\ v_elemr.0 >= 0 /\ v_bi.0 + v_elemr.0 >= 0 /\ v_bi.0 >= 0 /\ v_elemr.0_sep >= 0 /\ v_elemr.0_sep <= 8 ]
		(7*v_num_blocks + 3, 8)    inner_10000_in_sep(v_bi.0, v_elemr.0, v_i.0, v_num_blocks) -> inner_10000_compl_sep(v_bi.0, v_elemr.0, v_i.0, v_num_blocks) [ v_num_blocks - 1 >= 0 /\ v_elemr.0 + v_num_blocks - 1 >= 0 /\ -v_elemr.0 + v_num_blocks - 1 >= 0 /\ v_bi.0 + v_num_blocks - 1 >= 0 /\ -v_bi.0 + v_num_blocks - 1 >= 0 /\ -v_elemr.0 >= 0 /\ v_bi.0 - v_elemr.0 >= 0 /\ v_elemr.0 >= 0 /\ v_bi.0 + v_elemr.0 >= 0 /\ v_bi.0 >= 0 ]
		(7*v_num_blocks + 3, 0)    inner_10000_in_sep(v_bi.0, v_elemr.0, v_i.0, v_num_blocks) -> inner_10000_out_sep(v_bi.0, v_elemr.0, v_i.0, v_num_blocks) [ v_num_blocks - 1 >= 0 /\ v_elemr.0 + v_num_blocks - 1 >= 0 /\ -v_elemr.0 + v_num_blocks - 1 >= 0 /\ v_bi.0 + v_num_blocks - 1 >= 0 /\ -v_bi.0 + v_num_blocks - 1 >= 0 /\ -v_elemr.0 >= 0 /\ v_bi.0 - v_elemr.0 >= 0 /\ v_elemr.0 >= 0 /\ v_bi.0 + v_elemr.0 >= 0 /\ v_bi.0 >= 0 ]
	start location:	eval_forward_DCT_float_start
	leaf cost:	1

A polynomial rank function with
	Pol(eval_forward_DCT_float_bb6_in) = -V_3 + 64
and size complexities
	S("inner_10000_in_sep(v_bi.0, v_elemr.0, v_i.0, v_num_blocks) -> inner_10000_out_sep(v_bi.0, v_elemr.0, v_i.0, v_num_blocks) [ v_num_blocks - 1 >= 0 /\\ v_elemr.0 + v_num_blocks - 1 >= 0 /\\ -v_elemr.0 + v_num_blocks - 1 >= 0 /\\ v_bi.0 + v_num_blocks - 1 >= 0 /\\ -v_bi.0 + v_num_blocks - 1 >= 0 /\\ -v_elemr.0 >= 0 /\\ v_bi.0 - v_elemr.0 >= 0 /\\ v_elemr.0 >= 0 /\\ v_bi.0 + v_elemr.0 >= 0 /\\ v_bi.0 >= 0 ]", 0-0) = v_num_blocks
	S("inner_10000_in_sep(v_bi.0, v_elemr.0, v_i.0, v_num_blocks) -> inner_10000_out_sep(v_bi.0, v_elemr.0, v_i.0, v_num_blocks) [ v_num_blocks - 1 >= 0 /\\ v_elemr.0 + v_num_blocks - 1 >= 0 /\\ -v_elemr.0 + v_num_blocks - 1 >= 0 /\\ v_bi.0 + v_num_blocks - 1 >= 0 /\\ -v_bi.0 + v_num_blocks - 1 >= 0 /\\ -v_elemr.0 >= 0 /\\ v_bi.0 - v_elemr.0 >= 0 /\\ v_elemr.0 >= 0 /\\ v_bi.0 + v_elemr.0 >= 0 /\\ v_bi.0 >= 0 ]", 0-1) = 0
	S("inner_10000_in_sep(v_bi.0, v_elemr.0, v_i.0, v_num_blocks) -> inner_10000_out_sep(v_bi.0, v_elemr.0, v_i.0, v_num_blocks) [ v_num_blocks - 1 >= 0 /\\ v_elemr.0 + v_num_blocks - 1 >= 0 /\\ -v_elemr.0 + v_num_blocks - 1 >= 0 /\\ v_bi.0 + v_num_blocks - 1 >= 0 /\\ -v_bi.0 + v_num_blocks - 1 >= 0 /\\ -v_elemr.0 >= 0 /\\ v_bi.0 - v_elemr.0 >= 0 /\\ v_elemr.0 >= 0 /\\ v_bi.0 + v_elemr.0 >= 0 /\\ v_bi.0 >= 0 ]", 0-2) = v_i.0 + 64
	S("inner_10000_in_sep(v_bi.0, v_elemr.0, v_i.0, v_num_blocks) -> inner_10000_out_sep(v_bi.0, v_elemr.0, v_i.0, v_num_blocks) [ v_num_blocks - 1 >= 0 /\\ v_elemr.0 + v_num_blocks - 1 >= 0 /\\ -v_elemr.0 + v_num_blocks - 1 >= 0 /\\ v_bi.0 + v_num_blocks - 1 >= 0 /\\ -v_bi.0 + v_num_blocks - 1 >= 0 /\\ -v_elemr.0 >= 0 /\\ v_bi.0 - v_elemr.0 >= 0 /\\ v_elemr.0 >= 0 /\\ v_bi.0 + v_elemr.0 >= 0 /\\ v_bi.0 >= 0 ]", 0-3) = v_num_blocks
	S("inner_10000_in_sep(v_bi.0, v_elemr.0, v_i.0, v_num_blocks) -> inner_10000_compl_sep(v_bi.0, v_elemr.0, v_i.0, v_num_blocks) [ v_num_blocks - 1 >= 0 /\\ v_elemr.0 + v_num_blocks - 1 >= 0 /\\ -v_elemr.0 + v_num_blocks - 1 >= 0 /\\ v_bi.0 + v_num_blocks - 1 >= 0 /\\ -v_bi.0 + v_num_blocks - 1 >= 0 /\\ -v_elemr.0 >= 0 /\\ v_bi.0 - v_elemr.0 >= 0 /\\ v_elemr.0 >= 0 /\\ v_bi.0 + v_elemr.0 >= 0 /\\ v_bi.0 >= 0 ]", 0-0) = v_num_blocks
	S("inner_10000_in_sep(v_bi.0, v_elemr.0, v_i.0, v_num_blocks) -> inner_10000_compl_sep(v_bi.0, v_elemr.0, v_i.0, v_num_blocks) [ v_num_blocks - 1 >= 0 /\\ v_elemr.0 + v_num_blocks - 1 >= 0 /\\ -v_elemr.0 + v_num_blocks - 1 >= 0 /\\ v_bi.0 + v_num_blocks - 1 >= 0 /\\ -v_bi.0 + v_num_blocks - 1 >= 0 /\\ -v_elemr.0 >= 0 /\\ v_bi.0 - v_elemr.0 >= 0 /\\ v_elemr.0 >= 0 /\\ v_bi.0 + v_elemr.0 >= 0 /\\ v_bi.0 >= 0 ]", 0-1) = 0
	S("inner_10000_in_sep(v_bi.0, v_elemr.0, v_i.0, v_num_blocks) -> inner_10000_compl_sep(v_bi.0, v_elemr.0, v_i.0, v_num_blocks) [ v_num_blocks - 1 >= 0 /\\ v_elemr.0 + v_num_blocks - 1 >= 0 /\\ -v_elemr.0 + v_num_blocks - 1 >= 0 /\\ v_bi.0 + v_num_blocks - 1 >= 0 /\\ -v_bi.0 + v_num_blocks - 1 >= 0 /\\ -v_elemr.0 >= 0 /\\ v_bi.0 - v_elemr.0 >= 0 /\\ v_elemr.0 >= 0 /\\ v_bi.0 + v_elemr.0 >= 0 /\\ v_bi.0 >= 0 ]", 0-2) = v_i.0 + 64
	S("inner_10000_in_sep(v_bi.0, v_elemr.0, v_i.0, v_num_blocks) -> inner_10000_compl_sep(v_bi.0, v_elemr.0, v_i.0, v_num_blocks) [ v_num_blocks - 1 >= 0 /\\ v_elemr.0 + v_num_blocks - 1 >= 0 /\\ -v_elemr.0 + v_num_blocks - 1 >= 0 /\\ v_bi.0 + v_num_blocks - 1 >= 0 /\\ -v_bi.0 + v_num_blocks - 1 >= 0 /\\ -v_elemr.0 >= 0 /\\ v_bi.0 - v_elemr.0 >= 0 /\\ v_elemr.0 >= 0 /\\ v_bi.0 + v_elemr.0 >= 0 /\\ v_bi.0 >= 0 ]", 0-3) = v_num_blocks
	S("inner_10000_compl_sep(v_bi.0, v_elemr.0, v_i.0, v_num_blocks) -> inner_10000_out_sep(v_bi.0, v_elemr.0_sep, v_i.0, v_num_blocks) [ v_num_blocks - 1 >= 0 /\\ v_elemr.0 + v_num_blocks - 1 >= 0 /\\ -v_elemr.0 + v_num_blocks - 1 >= 0 /\\ v_bi.0 + v_num_blocks - 1 >= 0 /\\ -v_bi.0 + v_num_blocks - 1 >= 0 /\\ -v_elemr.0 >= 0 /\\ v_bi.0 - v_elemr.0 >= 0 /\\ v_elemr.0 >= 0 /\\ v_bi.0 + v_elemr.0 >= 0 /\\ v_bi.0 >= 0 /\\ v_elemr.0_sep >= 0 /\\ v_elemr.0_sep <= 8 ]", 0-0) = v_num_blocks
	S("inner_10000_compl_sep(v_bi.0, v_elemr.0, v_i.0, v_num_blocks) -> inner_10000_out_sep(v_bi.0, v_elemr.0_sep, v_i.0, v_num_blocks) [ v_num_blocks - 1 >= 0 /\\ v_elemr.0 + v_num_blocks - 1 >= 0 /\\ -v_elemr.0 + v_num_blocks - 1 >= 0 /\\ v_bi.0 + v_num_blocks - 1 >= 0 /\\ -v_bi.0 + v_num_blocks - 1 >= 0 /\\ -v_elemr.0 >= 0 /\\ v_bi.0 - v_elemr.0 >= 0 /\\ v_elemr.0 >= 0 /\\ v_bi.0 + v_elemr.0 >= 0 /\\ v_bi.0 >= 0 /\\ v_elemr.0_sep >= 0 /\\ v_elemr.0_sep <= 8 ]", 0-1) = 8
	S("inner_10000_compl_sep(v_bi.0, v_elemr.0, v_i.0, v_num_blocks) -> inner_10000_out_sep(v_bi.0, v_elemr.0_sep, v_i.0, v_num_blocks) [ v_num_blocks - 1 >= 0 /\\ v_elemr.0 + v_num_blocks - 1 >= 0 /\\ -v_elemr.0 + v_num_blocks - 1 >= 0 /\\ v_bi.0 + v_num_blocks - 1 >= 0 /\\ -v_bi.0 + v_num_blocks - 1 >= 0 /\\ -v_elemr.0 >= 0 /\\ v_bi.0 - v_elemr.0 >= 0 /\\ v_elemr.0 >= 0 /\\ v_bi.0 + v_elemr.0 >= 0 /\\ v_bi.0 >= 0 /\\ v_elemr.0_sep >= 0 /\\ v_elemr.0_sep <= 8 ]", 0-2) = v_i.0 + 64
	S("inner_10000_compl_sep(v_bi.0, v_elemr.0, v_i.0, v_num_blocks) -> inner_10000_out_sep(v_bi.0, v_elemr.0_sep, v_i.0, v_num_blocks) [ v_num_blocks - 1 >= 0 /\\ v_elemr.0 + v_num_blocks - 1 >= 0 /\\ -v_elemr.0 + v_num_blocks - 1 >= 0 /\\ v_bi.0 + v_num_blocks - 1 >= 0 /\\ -v_bi.0 + v_num_blocks - 1 >= 0 /\\ -v_elemr.0 >= 0 /\\ v_bi.0 - v_elemr.0 >= 0 /\\ v_elemr.0 >= 0 /\\ v_bi.0 + v_elemr.0 >= 0 /\\ v_bi.0 >= 0 /\\ v_elemr.0_sep >= 0 /\\ v_elemr.0_sep <= 8 ]", 0-3) = v_num_blocks
	S("inner_10000_compl_sep(v_bi.0, v_elemr.0, v_i.0, v_num_blocks) -> inner_10000_out_sep(v_bi.0, v_elemr.0_sep, v_i.0, v_num_blocks) [ v_num_blocks - 1 >= 0 /\\ v_elemr.0 + v_num_blocks - 1 >= 0 /\\ -v_elemr.0 + v_num_blocks - 1 >= 0 /\\ v_bi.0 + v_num_blocks - 1 >= 0 /\\ -v_bi.0 + v_num_blocks - 1 >= 0 /\\ -v_elemr.0 >= 0 /\\ v_bi.0 - v_elemr.0 >= 0 /\\ v_elemr.0 >= 0 /\\ v_bi.0 + v_elemr.0 >= 0 /\\ v_bi.0 >= 0 /\\ v_elemr.0_sep < 0 /\\ -v_elemr.0_sep <= 8 ]", 0-0) = v_num_blocks
	S("inner_10000_compl_sep(v_bi.0, v_elemr.0, v_i.0, v_num_blocks) -> inner_10000_out_sep(v_bi.0, v_elemr.0_sep, v_i.0, v_num_blocks) [ v_num_blocks - 1 >= 0 /\\ v_elemr.0 + v_num_blocks - 1 >= 0 /\\ -v_elemr.0 + v_num_blocks - 1 >= 0 /\\ v_bi.0 + v_num_blocks - 1 >= 0 /\\ -v_bi.0 + v_num_blocks - 1 >= 0 /\\ -v_elemr.0 >= 0 /\\ v_bi.0 - v_elemr.0 >= 0 /\\ v_elemr.0 >= 0 /\\ v_bi.0 + v_elemr.0 >= 0 /\\ v_bi.0 >= 0 /\\ v_elemr.0_sep < 0 /\\ -v_elemr.0_sep <= 8 ]", 0-1) = 8
	S("inner_10000_compl_sep(v_bi.0, v_elemr.0, v_i.0, v_num_blocks) -> inner_10000_out_sep(v_bi.0, v_elemr.0_sep, v_i.0, v_num_blocks) [ v_num_blocks - 1 >= 0 /\\ v_elemr.0 + v_num_blocks - 1 >= 0 /\\ -v_elemr.0 + v_num_blocks - 1 >= 0 /\\ v_bi.0 + v_num_blocks - 1 >= 0 /\\ -v_bi.0 + v_num_blocks - 1 >= 0 /\\ -v_elemr.0 >= 0 /\\ v_bi.0 - v_elemr.0 >= 0 /\\ v_elemr.0 >= 0 /\\ v_bi.0 + v_elemr.0 >= 0 /\\ v_bi.0 >= 0 /\\ v_elemr.0_sep < 0 /\\ -v_elemr.0_sep <= 8 ]", 0-2) = v_i.0 + 64
	S("inner_10000_compl_sep(v_bi.0, v_elemr.0, v_i.0, v_num_blocks) -> inner_10000_out_sep(v_bi.0, v_elemr.0_sep, v_i.0, v_num_blocks) [ v_num_blocks - 1 >= 0 /\\ v_elemr.0 + v_num_blocks - 1 >= 0 /\\ -v_elemr.0 + v_num_blocks - 1 >= 0 /\\ v_bi.0 + v_num_blocks - 1 >= 0 /\\ -v_bi.0 + v_num_blocks - 1 >= 0 /\\ -v_elemr.0 >= 0 /\\ v_bi.0 - v_elemr.0 >= 0 /\\ v_elemr.0 >= 0 /\\ v_bi.0 + v_elemr.0 >= 0 /\\ v_bi.0 >= 0 /\\ v_elemr.0_sep < 0 /\\ -v_elemr.0_sep <= 8 ]", 0-3) = v_num_blocks
	S("inner_10000_out_sep(v_bi.0, v_elemr.0, v_i.0, v_num_blocks) -> eval_forward_DCT_float_41(v_bi.0, v_elemr.0, v_i.0, v_num_blocks) [ v_num_blocks - 1 >= 0 /\\ v_elemr.0 + v_num_blocks + 7 >= 0 /\\ -v_elemr.0 + v_num_blocks + 7 >= 0 /\\ v_bi.0 + v_num_blocks - 1 >= 0 /\\ -v_bi.0 + v_num_blocks - 1 >= 0 /\\ -v_elemr.0 + 8 >= 0 /\\ v_bi.0 - v_elemr.0 + 8 >= 0 /\\ v_elemr.0 + 8 >= 0 /\\ v_bi.0 + v_elemr.0 + 8 >= 0 /\\ v_bi.0 >= 0 /\\ v_elemr.0 >= 8 ]", 0-0) = v_num_blocks
	S("inner_10000_out_sep(v_bi.0, v_elemr.0, v_i.0, v_num_blocks) -> eval_forward_DCT_float_41(v_bi.0, v_elemr.0, v_i.0, v_num_blocks) [ v_num_blocks - 1 >= 0 /\\ v_elemr.0 + v_num_blocks + 7 >= 0 /\\ -v_elemr.0 + v_num_blocks + 7 >= 0 /\\ v_bi.0 + v_num_blocks - 1 >= 0 /\\ -v_bi.0 + v_num_blocks - 1 >= 0 /\\ -v_elemr.0 + 8 >= 0 /\\ v_bi.0 - v_elemr.0 + 8 >= 0 /\\ v_elemr.0 + 8 >= 0 /\\ v_bi.0 + v_elemr.0 + 8 >= 0 /\\ v_bi.0 >= 0 /\\ v_elemr.0 >= 8 ]", 0-1) = 8
	S("inner_10000_out_sep(v_bi.0, v_elemr.0, v_i.0, v_num_blocks) -> eval_forward_DCT_float_41(v_bi.0, v_elemr.0, v_i.0, v_num_blocks) [ v_num_blocks - 1 >= 0 /\\ v_elemr.0 + v_num_blocks + 7 >= 0 /\\ -v_elemr.0 + v_num_blocks + 7 >= 0 /\\ v_bi.0 + v_num_blocks - 1 >= 0 /\\ -v_bi.0 + v_num_blocks - 1 >= 0 /\\ -v_elemr.0 + 8 >= 0 /\\ v_bi.0 - v_elemr.0 + 8 >= 0 /\\ v_elemr.0 + 8 >= 0 /\\ v_bi.0 + v_elemr.0 + 8 >= 0 /\\ v_bi.0 >= 0 /\\ v_elemr.0 >= 8 ]", 0-2) = v_i.0 + 64
	S("inner_10000_out_sep(v_bi.0, v_elemr.0, v_i.0, v_num_blocks) -> eval_forward_DCT_float_41(v_bi.0, v_elemr.0, v_i.0, v_num_blocks) [ v_num_blocks - 1 >= 0 /\\ v_elemr.0 + v_num_blocks + 7 >= 0 /\\ -v_elemr.0 + v_num_blocks + 7 >= 0 /\\ v_bi.0 + v_num_blocks - 1 >= 0 /\\ -v_bi.0 + v_num_blocks - 1 >= 0 /\\ -v_elemr.0 + 8 >= 0 /\\ v_bi.0 - v_elemr.0 + 8 >= 0 /\\ v_elemr.0 + 8 >= 0 /\\ v_bi.0 + v_elemr.0 + 8 >= 0 /\\ v_bi.0 >= 0 /\\ v_elemr.0 >= 8 ]", 0-3) = v_num_blocks
	S("eval_forward_DCT_float_bb1_in(v_bi.0, v_elemr.0, v_i.0, v_num_blocks) -> inner_10000_in_sep(v_bi.0, 0, v_i.0, v_num_blocks) [ v_bi.0 >= 0 /\\ v_bi.0 < v_num_blocks ]", 0-0) = v_num_blocks
	S("eval_forward_DCT_float_bb1_in(v_bi.0, v_elemr.0, v_i.0, v_num_blocks) -> inner_10000_in_sep(v_bi.0, 0, v_i.0, v_num_blocks) [ v_bi.0 >= 0 /\\ v_bi.0 < v_num_blocks ]", 0-1) = 0
	S("eval_forward_DCT_float_bb1_in(v_bi.0, v_elemr.0, v_i.0, v_num_blocks) -> inner_10000_in_sep(v_bi.0, 0, v_i.0, v_num_blocks) [ v_bi.0 >= 0 /\\ v_bi.0 < v_num_blocks ]", 0-2) = v_i.0 + 64
	S("eval_forward_DCT_float_bb1_in(v_bi.0, v_elemr.0, v_i.0, v_num_blocks) -> inner_10000_in_sep(v_bi.0, 0, v_i.0, v_num_blocks) [ v_bi.0 >= 0 /\\ v_bi.0 < v_num_blocks ]", 0-3) = v_num_blocks
	S("eval_forward_DCT_float_start(v_bi.0, v_elemr.0, v_i.0, v_num_blocks) -> eval_forward_DCT_float_bb0_in(v_bi.0, v_elemr.0, v_i.0, v_num_blocks)", 0-0) = v_bi.0
	S("eval_forward_DCT_float_start(v_bi.0, v_elemr.0, v_i.0, v_num_blocks) -> eval_forward_DCT_float_bb0_in(v_bi.0, v_elemr.0, v_i.0, v_num_blocks)", 0-1) = v_elemr.0
	S("eval_forward_DCT_float_start(v_bi.0, v_elemr.0, v_i.0, v_num_blocks) -> eval_forward_DCT_float_bb0_in(v_bi.0, v_elemr.0, v_i.0, v_num_blocks)", 0-2) = v_i.0
	S("eval_forward_DCT_float_start(v_bi.0, v_elemr.0, v_i.0, v_num_blocks) -> eval_forward_DCT_float_bb0_in(v_bi.0, v_elemr.0, v_i.0, v_num_blocks)", 0-3) = v_num_blocks
	S("eval_forward_DCT_float_bb0_in(v_bi.0, v_elemr.0, v_i.0, v_num_blocks) -> eval_forward_DCT_float_bb1_in(0, v_elemr.0, v_i.0, v_num_blocks)", 0-0) = 0
	S("eval_forward_DCT_float_bb0_in(v_bi.0, v_elemr.0, v_i.0, v_num_blocks) -> eval_forward_DCT_float_bb1_in(0, v_elemr.0, v_i.0, v_num_blocks)", 0-1) = v_elemr.0
	S("eval_forward_DCT_float_bb0_in(v_bi.0, v_elemr.0, v_i.0, v_num_blocks) -> eval_forward_DCT_float_bb1_in(0, v_elemr.0, v_i.0, v_num_blocks)", 0-2) = v_i.0
	S("eval_forward_DCT_float_bb0_in(v_bi.0, v_elemr.0, v_i.0, v_num_blocks) -> eval_forward_DCT_float_bb1_in(0, v_elemr.0, v_i.0, v_num_blocks)", 0-3) = v_num_blocks
	S("eval_forward_DCT_float_41(v_bi.0, v_elemr.0, v_i.0, v_num_blocks) -> eval_forward_DCT_float_42(v_bi.0, v_elemr.0, v_i.0, v_num_blocks) [ v_num_blocks - 1 >= 0 /\\ v_elemr.0 + v_num_blocks - 9 >= 0 /\\ -v_elemr.0 + v_num_blocks + 7 >= 0 /\\ v_bi.0 + v_num_blocks - 1 >= 0 /\\ -v_bi.0 + v_num_blocks - 1 >= 0 /\\ -v_elemr.0 + 8 >= 0 /\\ v_bi.0 - v_elemr.0 + 8 >= 0 /\\ v_elemr.0 - 8 >= 0 /\\ v_bi.0 + v_elemr.0 - 8 >= 0 /\\ v_bi.0 >= 0 ]", 0-0) = v_num_blocks
	S("eval_forward_DCT_float_41(v_bi.0, v_elemr.0, v_i.0, v_num_blocks) -> eval_forward_DCT_float_42(v_bi.0, v_elemr.0, v_i.0, v_num_blocks) [ v_num_blocks - 1 >= 0 /\\ v_elemr.0 + v_num_blocks - 9 >= 0 /\\ -v_elemr.0 + v_num_blocks + 7 >= 0 /\\ v_bi.0 + v_num_blocks - 1 >= 0 /\\ -v_bi.0 + v_num_blocks - 1 >= 0 /\\ -v_elemr.0 + 8 >= 0 /\\ v_bi.0 - v_elemr.0 + 8 >= 0 /\\ v_elemr.0 - 8 >= 0 /\\ v_bi.0 + v_elemr.0 - 8 >= 0 /\\ v_bi.0 >= 0 ]", 0-1) = 8
	S("eval_forward_DCT_float_41(v_bi.0, v_elemr.0, v_i.0, v_num_blocks) -> eval_forward_DCT_float_42(v_bi.0, v_elemr.0, v_i.0, v_num_blocks) [ v_num_blocks - 1 >= 0 /\\ v_elemr.0 + v_num_blocks - 9 >= 0 /\\ -v_elemr.0 + v_num_blocks + 7 >= 0 /\\ v_bi.0 + v_num_blocks - 1 >= 0 /\\ -v_bi.0 + v_num_blocks - 1 >= 0 /\\ -v_elemr.0 + 8 >= 0 /\\ v_bi.0 - v_elemr.0 + 8 >= 0 /\\ v_elemr.0 - 8 >= 0 /\\ v_bi.0 + v_elemr.0 - 8 >= 0 /\\ v_bi.0 >= 0 ]", 0-2) = v_i.0 + 64
	S("eval_forward_DCT_float_41(v_bi.0, v_elemr.0, v_i.0, v_num_blocks) -> eval_forward_DCT_float_42(v_bi.0, v_elemr.0, v_i.0, v_num_blocks) [ v_num_blocks - 1 >= 0 /\\ v_elemr.0 + v_num_blocks - 9 >= 0 /\\ -v_elemr.0 + v_num_blocks + 7 >= 0 /\\ v_bi.0 + v_num_blocks - 1 >= 0 /\\ -v_bi.0 + v_num_blocks - 1 >= 0 /\\ -v_elemr.0 + 8 >= 0 /\\ v_bi.0 - v_elemr.0 + 8 >= 0 /\\ v_elemr.0 - 8 >= 0 /\\ v_bi.0 + v_elemr.0 - 8 >= 0 /\\ v_bi.0 >= 0 ]", 0-3) = v_num_blocks
	S("eval_forward_DCT_float_42(v_bi.0, v_elemr.0, v_i.0, v_num_blocks) -> eval_forward_DCT_float_bb6_in(v_bi.0, v_elemr.0, 0, v_num_blocks) [ v_num_blocks - 1 >= 0 /\\ v_elemr.0 + v_num_blocks - 9 >= 0 /\\ -v_elemr.0 + v_num_blocks + 7 >= 0 /\\ v_bi.0 + v_num_blocks - 1 >= 0 /\\ -v_bi.0 + v_num_blocks - 1 >= 0 /\\ -v_elemr.0 + 8 >= 0 /\\ v_bi.0 - v_elemr.0 + 8 >= 0 /\\ v_elemr.0 - 8 >= 0 /\\ v_bi.0 + v_elemr.0 - 8 >= 0 /\\ v_bi.0 >= 0 ]", 0-0) = v_num_blocks
	S("eval_forward_DCT_float_42(v_bi.0, v_elemr.0, v_i.0, v_num_blocks) -> eval_forward_DCT_float_bb6_in(v_bi.0, v_elemr.0, 0, v_num_blocks) [ v_num_blocks - 1 >= 0 /\\ v_elemr.0 + v_num_blocks - 9 >= 0 /\\ -v_elemr.0 + v_num_blocks + 7 >= 0 /\\ v_bi.0 + v_num_blocks - 1 >= 0 /\\ -v_bi.0 + v_num_blocks - 1 >= 0 /\\ -v_elemr.0 + 8 >= 0 /\\ v_bi.0 - v_elemr.0 + 8 >= 0 /\\ v_elemr.0 - 8 >= 0 /\\ v_bi.0 + v_elemr.0 - 8 >= 0 /\\ v_bi.0 >= 0 ]", 0-1) = 8
	S("eval_forward_DCT_float_42(v_bi.0, v_elemr.0, v_i.0, v_num_blocks) -> eval_forward_DCT_float_bb6_in(v_bi.0, v_elemr.0, 0, v_num_blocks) [ v_num_blocks - 1 >= 0 /\\ v_elemr.0 + v_num_blocks - 9 >= 0 /\\ -v_elemr.0 + v_num_blocks + 7 >= 0 /\\ v_bi.0 + v_num_blocks - 1 >= 0 /\\ -v_bi.0 + v_num_blocks - 1 >= 0 /\\ -v_elemr.0 + 8 >= 0 /\\ v_bi.0 - v_elemr.0 + 8 >= 0 /\\ v_elemr.0 - 8 >= 0 /\\ v_bi.0 + v_elemr.0 - 8 >= 0 /\\ v_bi.0 >= 0 ]", 0-2) = 0
	S("eval_forward_DCT_float_42(v_bi.0, v_elemr.0, v_i.0, v_num_blocks) -> eval_forward_DCT_float_bb6_in(v_bi.0, v_elemr.0, 0, v_num_blocks) [ v_num_blocks - 1 >= 0 /\\ v_elemr.0 + v_num_blocks - 9 >= 0 /\\ -v_elemr.0 + v_num_blocks + 7 >= 0 /\\ v_bi.0 + v_num_blocks - 1 >= 0 /\\ -v_bi.0 + v_num_blocks - 1 >= 0 /\\ -v_elemr.0 + 8 >= 0 /\\ v_bi.0 - v_elemr.0 + 8 >= 0 /\\ v_elemr.0 - 8 >= 0 /\\ v_bi.0 + v_elemr.0 - 8 >= 0 /\\ v_bi.0 >= 0 ]", 0-3) = v_num_blocks
	S("eval_forward_DCT_float_bb6_in(v_bi.0, v_elemr.0, v_i.0, v_num_blocks) -> eval_forward_DCT_float_bb6_in(v_bi.0, v_elemr.0, v_i.0 + 1, v_num_blocks) [ v_num_blocks - 1 >= 0 /\\ v_i.0 + v_num_blocks - 1 >= 0 /\\ v_elemr.0 + v_num_blocks - 9 >= 0 /\\ -v_elemr.0 + v_num_blocks + 7 >= 0 /\\ v_bi.0 + v_num_blocks - 1 >= 0 /\\ -v_bi.0 + v_num_blocks - 1 >= 0 /\\ v_i.0 >= 0 /\\ v_elemr.0 + v_i.0 - 8 >= 0 /\\ -v_elemr.0 + v_i.0 + 8 >= 0 /\\ v_bi.0 + v_i.0 >= 0 /\\ -v_elemr.0 + 8 >= 0 /\\ v_bi.0 - v_elemr.0 + 8 >= 0 /\\ v_elemr.0 - 8 >= 0 /\\ v_bi.0 + v_elemr.0 - 8 >= 0 /\\ v_bi.0 >= 0 /\\ v_i.0 < 64 ]", 0-0) = v_num_blocks
	S("eval_forward_DCT_float_bb6_in(v_bi.0, v_elemr.0, v_i.0, v_num_blocks) -> eval_forward_DCT_float_bb6_in(v_bi.0, v_elemr.0, v_i.0 + 1, v_num_blocks) [ v_num_blocks - 1 >= 0 /\\ v_i.0 + v_num_blocks - 1 >= 0 /\\ v_elemr.0 + v_num_blocks - 9 >= 0 /\\ -v_elemr.0 + v_num_blocks + 7 >= 0 /\\ v_bi.0 + v_num_blocks - 1 >= 0 /\\ -v_bi.0 + v_num_blocks - 1 >= 0 /\\ v_i.0 >= 0 /\\ v_elemr.0 + v_i.0 - 8 >= 0 /\\ -v_elemr.0 + v_i.0 + 8 >= 0 /\\ v_bi.0 + v_i.0 >= 0 /\\ -v_elemr.0 + 8 >= 0 /\\ v_bi.0 - v_elemr.0 + 8 >= 0 /\\ v_elemr.0 - 8 >= 0 /\\ v_bi.0 + v_elemr.0 - 8 >= 0 /\\ v_bi.0 >= 0 /\\ v_i.0 < 64 ]", 0-1) = 8
	S("eval_forward_DCT_float_bb6_in(v_bi.0, v_elemr.0, v_i.0, v_num_blocks) -> eval_forward_DCT_float_bb6_in(v_bi.0, v_elemr.0, v_i.0 + 1, v_num_blocks) [ v_num_blocks - 1 >= 0 /\\ v_i.0 + v_num_blocks - 1 >= 0 /\\ v_elemr.0 + v_num_blocks - 9 >= 0 /\\ -v_elemr.0 + v_num_blocks + 7 >= 0 /\\ v_bi.0 + v_num_blocks - 1 >= 0 /\\ -v_bi.0 + v_num_blocks - 1 >= 0 /\\ v_i.0 >= 0 /\\ v_elemr.0 + v_i.0 - 8 >= 0 /\\ -v_elemr.0 + v_i.0 + 8 >= 0 /\\ v_bi.0 + v_i.0 >= 0 /\\ -v_elemr.0 + 8 >= 0 /\\ v_bi.0 - v_elemr.0 + 8 >= 0 /\\ v_elemr.0 - 8 >= 0 /\\ v_bi.0 + v_elemr.0 - 8 >= 0 /\\ v_bi.0 >= 0 /\\ v_i.0 < 64 ]", 0-2) = 64
	S("eval_forward_DCT_float_bb6_in(v_bi.0, v_elemr.0, v_i.0, v_num_blocks) -> eval_forward_DCT_float_bb6_in(v_bi.0, v_elemr.0, v_i.0 + 1, v_num_blocks) [ v_num_blocks - 1 >= 0 /\\ v_i.0 + v_num_blocks - 1 >= 0 /\\ v_elemr.0 + v_num_blocks - 9 >= 0 /\\ -v_elemr.0 + v_num_blocks + 7 >= 0 /\\ v_bi.0 + v_num_blocks - 1 >= 0 /\\ -v_bi.0 + v_num_blocks - 1 >= 0 /\\ v_i.0 >= 0 /\\ v_elemr.0 + v_i.0 - 8 >= 0 /\\ -v_elemr.0 + v_i.0 + 8 >= 0 /\\ v_bi.0 + v_i.0 >= 0 /\\ -v_elemr.0 + 8 >= 0 /\\ v_bi.0 - v_elemr.0 + 8 >= 0 /\\ v_elemr.0 - 8 >= 0 /\\ v_bi.0 + v_elemr.0 - 8 >= 0 /\\ v_bi.0 >= 0 /\\ v_i.0 < 64 ]", 0-3) = v_num_blocks
	S("eval_forward_DCT_float_bb6_in(v_bi.0, v_elemr.0, v_i.0, v_num_blocks) -> eval_forward_DCT_float_bb1_in(v_bi.0 + 1, v_elemr.0, v_i.0, v_num_blocks) [ v_num_blocks - 1 >= 0 /\\ v_i.0 + v_num_blocks - 1 >= 0 /\\ v_elemr.0 + v_num_blocks - 9 >= 0 /\\ -v_elemr.0 + v_num_blocks + 7 >= 0 /\\ v_bi.0 + v_num_blocks - 1 >= 0 /\\ -v_bi.0 + v_num_blocks - 1 >= 0 /\\ v_i.0 >= 0 /\\ v_elemr.0 + v_i.0 - 8 >= 0 /\\ -v_elemr.0 + v_i.0 + 8 >= 0 /\\ v_bi.0 + v_i.0 >= 0 /\\ -v_elemr.0 + 8 >= 0 /\\ v_bi.0 - v_elemr.0 + 8 >= 0 /\\ v_elemr.0 - 8 >= 0 /\\ v_bi.0 + v_elemr.0 - 8 >= 0 /\\ v_bi.0 >= 0 /\\ v_i.0 >= 64 ]", 0-0) = v_num_blocks
	S("eval_forward_DCT_float_bb6_in(v_bi.0, v_elemr.0, v_i.0, v_num_blocks) -> eval_forward_DCT_float_bb1_in(v_bi.0 + 1, v_elemr.0, v_i.0, v_num_blocks) [ v_num_blocks - 1 >= 0 /\\ v_i.0 + v_num_blocks - 1 >= 0 /\\ v_elemr.0 + v_num_blocks - 9 >= 0 /\\ -v_elemr.0 + v_num_blocks + 7 >= 0 /\\ v_bi.0 + v_num_blocks - 1 >= 0 /\\ -v_bi.0 + v_num_blocks - 1 >= 0 /\\ v_i.0 >= 0 /\\ v_elemr.0 + v_i.0 - 8 >= 0 /\\ -v_elemr.0 + v_i.0 + 8 >= 0 /\\ v_bi.0 + v_i.0 >= 0 /\\ -v_elemr.0 + 8 >= 0 /\\ v_bi.0 - v_elemr.0 + 8 >= 0 /\\ v_elemr.0 - 8 >= 0 /\\ v_bi.0 + v_elemr.0 - 8 >= 0 /\\ v_bi.0 >= 0 /\\ v_i.0 >= 64 ]", 0-1) = 8
	S("eval_forward_DCT_float_bb6_in(v_bi.0, v_elemr.0, v_i.0, v_num_blocks) -> eval_forward_DCT_float_bb1_in(v_bi.0 + 1, v_elemr.0, v_i.0, v_num_blocks) [ v_num_blocks - 1 >= 0 /\\ v_i.0 + v_num_blocks - 1 >= 0 /\\ v_elemr.0 + v_num_blocks - 9 >= 0 /\\ -v_elemr.0 + v_num_blocks + 7 >= 0 /\\ v_bi.0 + v_num_blocks - 1 >= 0 /\\ -v_bi.0 + v_num_blocks - 1 >= 0 /\\ v_i.0 >= 0 /\\ v_elemr.0 + v_i.0 - 8 >= 0 /\\ -v_elemr.0 + v_i.0 + 8 >= 0 /\\ v_bi.0 + v_i.0 >= 0 /\\ -v_elemr.0 + 8 >= 0 /\\ v_bi.0 - v_elemr.0 + 8 >= 0 /\\ v_elemr.0 - 8 >= 0 /\\ v_bi.0 + v_elemr.0 - 8 >= 0 /\\ v_bi.0 >= 0 /\\ v_i.0 >= 64 ]", 0-2) = 64
	S("eval_forward_DCT_float_bb6_in(v_bi.0, v_elemr.0, v_i.0, v_num_blocks) -> eval_forward_DCT_float_bb1_in(v_bi.0 + 1, v_elemr.0, v_i.0, v_num_blocks) [ v_num_blocks - 1 >= 0 /\\ v_i.0 + v_num_blocks - 1 >= 0 /\\ v_elemr.0 + v_num_blocks - 9 >= 0 /\\ -v_elemr.0 + v_num_blocks + 7 >= 0 /\\ v_bi.0 + v_num_blocks - 1 >= 0 /\\ -v_bi.0 + v_num_blocks - 1 >= 0 /\\ v_i.0 >= 0 /\\ v_elemr.0 + v_i.0 - 8 >= 0 /\\ -v_elemr.0 + v_i.0 + 8 >= 0 /\\ v_bi.0 + v_i.0 >= 0 /\\ -v_elemr.0 + 8 >= 0 /\\ v_bi.0 - v_elemr.0 + 8 >= 0 /\\ v_elemr.0 - 8 >= 0 /\\ v_bi.0 + v_elemr.0 - 8 >= 0 /\\ v_bi.0 >= 0 /\\ v_i.0 >= 64 ]", 0-3) = v_num_blocks
orients the transition
	eval_forward_DCT_float_bb6_in(v_bi.0, v_elemr.0, v_i.0, v_num_blocks) -> eval_forward_DCT_float_bb6_in(v_bi.0, v_elemr.0, v_i.0 + 1, v_num_blocks) [ v_num_blocks - 1 >= 0 /\ v_i.0 + v_num_blocks - 1 >= 0 /\ v_elemr.0 + v_num_blocks - 9 >= 0 /\ -v_elemr.0 + v_num_blocks + 7 >= 0 /\ v_bi.0 + v_num_blocks - 1 >= 0 /\ -v_bi.0 + v_num_blocks - 1 >= 0 /\ v_i.0 >= 0 /\ v_elemr.0 + v_i.0 - 8 >= 0 /\ -v_elemr.0 + v_i.0 + 8 >= 0 /\ v_bi.0 + v_i.0 >= 0 /\ -v_elemr.0 + 8 >= 0 /\ v_bi.0 - v_elemr.0 + 8 >= 0 /\ v_elemr.0 - 8 >= 0 /\ v_bi.0 + v_elemr.0 - 8 >= 0 /\ v_bi.0 >= 0 /\ v_i.0 < 64 ]
weakly and the transition
	eval_forward_DCT_float_bb6_in(v_bi.0, v_elemr.0, v_i.0, v_num_blocks) -> eval_forward_DCT_float_bb6_in(v_bi.0, v_elemr.0, v_i.0 + 1, v_num_blocks) [ v_num_blocks - 1 >= 0 /\ v_i.0 + v_num_blocks - 1 >= 0 /\ v_elemr.0 + v_num_blocks - 9 >= 0 /\ -v_elemr.0 + v_num_blocks + 7 >= 0 /\ v_bi.0 + v_num_blocks - 1 >= 0 /\ -v_bi.0 + v_num_blocks - 1 >= 0 /\ v_i.0 >= 0 /\ v_elemr.0 + v_i.0 - 8 >= 0 /\ -v_elemr.0 + v_i.0 + 8 >= 0 /\ v_bi.0 + v_i.0 >= 0 /\ -v_elemr.0 + 8 >= 0 /\ v_bi.0 - v_elemr.0 + 8 >= 0 /\ v_elemr.0 - 8 >= 0 /\ v_bi.0 + v_elemr.0 - 8 >= 0 /\ v_bi.0 >= 0 /\ v_i.0 < 64 ]
strictly and produces the following problem:
8:	T:
		(7*v_num_blocks + 3, 1)        eval_forward_DCT_float_bb6_in(v_bi.0, v_elemr.0, v_i.0, v_num_blocks) -> eval_forward_DCT_float_bb1_in(v_bi.0 + 1, v_elemr.0, v_i.0, v_num_blocks) [ v_num_blocks - 1 >= 0 /\ v_i.0 + v_num_blocks - 1 >= 0 /\ v_elemr.0 + v_num_blocks - 9 >= 0 /\ -v_elemr.0 + v_num_blocks + 7 >= 0 /\ v_bi.0 + v_num_blocks - 1 >= 0 /\ -v_bi.0 + v_num_blocks - 1 >= 0 /\ v_i.0 >= 0 /\ v_elemr.0 + v_i.0 - 8 >= 0 /\ -v_elemr.0 + v_i.0 + 8 >= 0 /\ v_bi.0 + v_i.0 >= 0 /\ -v_elemr.0 + 8 >= 0 /\ v_bi.0 - v_elemr.0 + 8 >= 0 /\ v_elemr.0 - 8 >= 0 /\ v_bi.0 + v_elemr.0 - 8 >= 0 /\ v_bi.0 >= 0 /\ v_i.0 >= 64 ]
		(448*v_num_blocks + 192, 1)    eval_forward_DCT_float_bb6_in(v_bi.0, v_elemr.0, v_i.0, v_num_blocks) -> eval_forward_DCT_float_bb6_in(v_bi.0, v_elemr.0, v_i.0 + 1, v_num_blocks) [ v_num_blocks - 1 >= 0 /\ v_i.0 + v_num_blocks - 1 >= 0 /\ v_elemr.0 + v_num_blocks - 9 >= 0 /\ -v_elemr.0 + v_num_blocks + 7 >= 0 /\ v_bi.0 + v_num_blocks - 1 >= 0 /\ -v_bi.0 + v_num_blocks - 1 >= 0 /\ v_i.0 >= 0 /\ v_elemr.0 + v_i.0 - 8 >= 0 /\ -v_elemr.0 + v_i.0 + 8 >= 0 /\ v_bi.0 + v_i.0 >= 0 /\ -v_elemr.0 + 8 >= 0 /\ v_bi.0 - v_elemr.0 + 8 >= 0 /\ v_elemr.0 - 8 >= 0 /\ v_bi.0 + v_elemr.0 - 8 >= 0 /\ v_bi.0 >= 0 /\ v_i.0 < 64 ]
		(7*v_num_blocks + 3, 1)        eval_forward_DCT_float_42(v_bi.0, v_elemr.0, v_i.0, v_num_blocks) -> eval_forward_DCT_float_bb6_in(v_bi.0, v_elemr.0, 0, v_num_blocks) [ v_num_blocks - 1 >= 0 /\ v_elemr.0 + v_num_blocks - 9 >= 0 /\ -v_elemr.0 + v_num_blocks + 7 >= 0 /\ v_bi.0 + v_num_blocks - 1 >= 0 /\ -v_bi.0 + v_num_blocks - 1 >= 0 /\ -v_elemr.0 + 8 >= 0 /\ v_bi.0 - v_elemr.0 + 8 >= 0 /\ v_elemr.0 - 8 >= 0 /\ v_bi.0 + v_elemr.0 - 8 >= 0 /\ v_bi.0 >= 0 ]
		(7*v_num_blocks + 3, 1)        eval_forward_DCT_float_41(v_bi.0, v_elemr.0, v_i.0, v_num_blocks) -> eval_forward_DCT_float_42(v_bi.0, v_elemr.0, v_i.0, v_num_blocks) [ v_num_blocks - 1 >= 0 /\ v_elemr.0 + v_num_blocks - 9 >= 0 /\ -v_elemr.0 + v_num_blocks + 7 >= 0 /\ v_bi.0 + v_num_blocks - 1 >= 0 /\ -v_bi.0 + v_num_blocks - 1 >= 0 /\ -v_elemr.0 + 8 >= 0 /\ v_bi.0 - v_elemr.0 + 8 >= 0 /\ v_elemr.0 - 8 >= 0 /\ v_bi.0 + v_elemr.0 - 8 >= 0 /\ v_bi.0 >= 0 ]
		(1, 1)                         eval_forward_DCT_float_bb0_in(v_bi.0, v_elemr.0, v_i.0, v_num_blocks) -> eval_forward_DCT_float_bb1_in(0, v_elemr.0, v_i.0, v_num_blocks)
		(1, 1)                         eval_forward_DCT_float_start(v_bi.0, v_elemr.0, v_i.0, v_num_blocks) -> eval_forward_DCT_float_bb0_in(v_bi.0, v_elemr.0, v_i.0, v_num_blocks)
		(7*v_num_blocks + 3, 1)        eval_forward_DCT_float_bb1_in(v_bi.0, v_elemr.0, v_i.0, v_num_blocks) -> inner_10000_in_sep(v_bi.0, 0, v_i.0, v_num_blocks) [ v_bi.0 >= 0 /\ v_bi.0 < v_num_blocks ]
		(7*v_num_blocks + 3, 1)        inner_10000_out_sep(v_bi.0, v_elemr.0, v_i.0, v_num_blocks) -> eval_forward_DCT_float_41(v_bi.0, v_elemr.0, v_i.0, v_num_blocks) [ v_num_blocks - 1 >= 0 /\ v_elemr.0 + v_num_blocks + 7 >= 0 /\ -v_elemr.0 + v_num_blocks + 7 >= 0 /\ v_bi.0 + v_num_blocks - 1 >= 0 /\ -v_bi.0 + v_num_blocks - 1 >= 0 /\ -v_elemr.0 + 8 >= 0 /\ v_bi.0 - v_elemr.0 + 8 >= 0 /\ v_elemr.0 + 8 >= 0 /\ v_bi.0 + v_elemr.0 + 8 >= 0 /\ v_bi.0 >= 0 /\ v_elemr.0 >= 8 ]
		(7*v_num_blocks + 3, 0)        inner_10000_compl_sep(v_bi.0, v_elemr.0, v_i.0, v_num_blocks) -> inner_10000_out_sep(v_bi.0, v_elemr.0_sep, v_i.0, v_num_blocks) [ v_num_blocks - 1 >= 0 /\ v_elemr.0 + v_num_blocks - 1 >= 0 /\ -v_elemr.0 + v_num_blocks - 1 >= 0 /\ v_bi.0 + v_num_blocks - 1 >= 0 /\ -v_bi.0 + v_num_blocks - 1 >= 0 /\ -v_elemr.0 >= 0 /\ v_bi.0 - v_elemr.0 >= 0 /\ v_elemr.0 >= 0 /\ v_bi.0 + v_elemr.0 >= 0 /\ v_bi.0 >= 0 /\ v_elemr.0_sep < 0 /\ -v_elemr.0_sep <= 8 ]
		(7*v_num_blocks + 3, 0)        inner_10000_compl_sep(v_bi.0, v_elemr.0, v_i.0, v_num_blocks) -> inner_10000_out_sep(v_bi.0, v_elemr.0_sep, v_i.0, v_num_blocks) [ v_num_blocks - 1 >= 0 /\ v_elemr.0 + v_num_blocks - 1 >= 0 /\ -v_elemr.0 + v_num_blocks - 1 >= 0 /\ v_bi.0 + v_num_blocks - 1 >= 0 /\ -v_bi.0 + v_num_blocks - 1 >= 0 /\ -v_elemr.0 >= 0 /\ v_bi.0 - v_elemr.0 >= 0 /\ v_elemr.0 >= 0 /\ v_bi.0 + v_elemr.0 >= 0 /\ v_bi.0 >= 0 /\ v_elemr.0_sep >= 0 /\ v_elemr.0_sep <= 8 ]
		(7*v_num_blocks + 3, 8)        inner_10000_in_sep(v_bi.0, v_elemr.0, v_i.0, v_num_blocks) -> inner_10000_compl_sep(v_bi.0, v_elemr.0, v_i.0, v_num_blocks) [ v_num_blocks - 1 >= 0 /\ v_elemr.0 + v_num_blocks - 1 >= 0 /\ -v_elemr.0 + v_num_blocks - 1 >= 0 /\ v_bi.0 + v_num_blocks - 1 >= 0 /\ -v_bi.0 + v_num_blocks - 1 >= 0 /\ -v_elemr.0 >= 0 /\ v_bi.0 - v_elemr.0 >= 0 /\ v_elemr.0 >= 0 /\ v_bi.0 + v_elemr.0 >= 0 /\ v_bi.0 >= 0 ]
		(7*v_num_blocks + 3, 0)        inner_10000_in_sep(v_bi.0, v_elemr.0, v_i.0, v_num_blocks) -> inner_10000_out_sep(v_bi.0, v_elemr.0, v_i.0, v_num_blocks) [ v_num_blocks - 1 >= 0 /\ v_elemr.0 + v_num_blocks - 1 >= 0 /\ -v_elemr.0 + v_num_blocks - 1 >= 0 /\ v_bi.0 + v_num_blocks - 1 >= 0 /\ -v_bi.0 + v_num_blocks - 1 >= 0 /\ -v_elemr.0 >= 0 /\ v_bi.0 - v_elemr.0 >= 0 /\ v_elemr.0 >= 0 /\ v_bi.0 + v_elemr.0 >= 0 /\ v_bi.0 >= 0 ]
	start location:	eval_forward_DCT_float_start
	leaf cost:	1

Complexity upper bound 539*v_num_blocks + 234

Time: 0.305 sec (SMT: 0.263 sec)

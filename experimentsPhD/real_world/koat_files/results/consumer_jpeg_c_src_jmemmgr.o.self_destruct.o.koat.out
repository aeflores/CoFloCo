YES(?, 45)

Initial complexity problem:
1:	T:
		(1, 1)    eval_self_destruct_start(v_pool.0) -> Com_1(eval_self_destruct_bb0_in(v_pool.0))
		(?, 1)    eval_self_destruct_bb0_in(v_pool.0) -> Com_1(eval_self_destruct_bb1_in(1))
		(?, 1)    eval_self_destruct_bb1_in(v_pool.0) -> Com_1(eval_self_destruct_0(v_pool.0)) [ v_pool.0 >= 0 ]
		(?, 1)    eval_self_destruct_bb1_in(v_pool.0) -> Com_1(eval_self_destruct_3(v_pool.0)) [ v_pool.0 < 0 ]
		(?, 1)    eval_self_destruct_0(v_pool.0) -> Com_2(eval_free_pool_start(v_pool.0), eval_self_destruct_1(v_pool.0))
		(?, 1)    eval_self_destruct_1(v_pool.0) -> Com_1(eval_self_destruct_bb1_in(v_pool.0 - 1))
		(?, 1)    eval_self_destruct_3(v_pool.0) -> Com_2(eval_jpeg_free_small_start(v_pool.0), eval_self_destruct_4(v_pool.0))
		(?, 1)    eval_self_destruct_4(v_pool.0) -> Com_1(eval_self_destruct_5(v_pool.0))
		(?, 1)    eval_self_destruct_5(v_pool.0) -> Com_2(eval_jpeg_mem_term_start(v_pool.0), eval_self_destruct_6(v_pool.0))
		(?, 1)    eval_self_destruct_6(v_pool.0) -> Com_1(eval_self_destruct_stop(v_pool.0))
	start location:	eval_self_destruct_start
	leaf cost:	0

Repeatedly propagating knowledge in problem 1 produces the following problem:
2:	T:
		(1, 1)    eval_self_destruct_start(v_pool.0) -> Com_1(eval_self_destruct_bb0_in(v_pool.0))
		(1, 1)    eval_self_destruct_bb0_in(v_pool.0) -> Com_1(eval_self_destruct_bb1_in(1))
		(?, 1)    eval_self_destruct_bb1_in(v_pool.0) -> Com_1(eval_self_destruct_0(v_pool.0)) [ v_pool.0 >= 0 ]
		(?, 1)    eval_self_destruct_bb1_in(v_pool.0) -> Com_1(eval_self_destruct_3(v_pool.0)) [ v_pool.0 < 0 ]
		(?, 1)    eval_self_destruct_0(v_pool.0) -> Com_2(eval_free_pool_start(v_pool.0), eval_self_destruct_1(v_pool.0))
		(?, 1)    eval_self_destruct_1(v_pool.0) -> Com_1(eval_self_destruct_bb1_in(v_pool.0 - 1))
		(?, 1)    eval_self_destruct_3(v_pool.0) -> Com_2(eval_jpeg_free_small_start(v_pool.0), eval_self_destruct_4(v_pool.0))
		(?, 1)    eval_self_destruct_4(v_pool.0) -> Com_1(eval_self_destruct_5(v_pool.0))
		(?, 1)    eval_self_destruct_5(v_pool.0) -> Com_2(eval_jpeg_mem_term_start(v_pool.0), eval_self_destruct_6(v_pool.0))
		(?, 1)    eval_self_destruct_6(v_pool.0) -> Com_1(eval_self_destruct_stop(v_pool.0))
	start location:	eval_self_destruct_start
	leaf cost:	0

A polynomial rank function with
	Pol(eval_self_destruct_start) = 5
	Pol(eval_self_destruct_bb0_in) = 5
	Pol(eval_self_destruct_bb1_in) = 5
	Pol(eval_self_destruct_0) = 5
	Pol(eval_self_destruct_3) = 4
	Pol(eval_free_pool_start) = 0
	Pol(eval_self_destruct_1) = 5
	Pol(eval_jpeg_free_small_start) = 0
	Pol(eval_self_destruct_4) = 3
	Pol(eval_self_destruct_5) = 2
	Pol(eval_jpeg_mem_term_start) = 0
	Pol(eval_self_destruct_6) = 1
	Pol(eval_self_destruct_stop) = 0
orients all transitions weakly and the transitions
	eval_self_destruct_bb1_in(v_pool.0) -> Com_1(eval_self_destruct_3(v_pool.0)) [ v_pool.0 < 0 ]
	eval_self_destruct_6(v_pool.0) -> Com_1(eval_self_destruct_stop(v_pool.0))
	eval_self_destruct_5(v_pool.0) -> Com_2(eval_jpeg_mem_term_start(v_pool.0), eval_self_destruct_6(v_pool.0))
	eval_self_destruct_4(v_pool.0) -> Com_1(eval_self_destruct_5(v_pool.0))
	eval_self_destruct_3(v_pool.0) -> Com_2(eval_jpeg_free_small_start(v_pool.0), eval_self_destruct_4(v_pool.0))
strictly and produces the following problem:
3:	T:
		(1, 1)    eval_self_destruct_start(v_pool.0) -> Com_1(eval_self_destruct_bb0_in(v_pool.0))
		(1, 1)    eval_self_destruct_bb0_in(v_pool.0) -> Com_1(eval_self_destruct_bb1_in(1))
		(?, 1)    eval_self_destruct_bb1_in(v_pool.0) -> Com_1(eval_self_destruct_0(v_pool.0)) [ v_pool.0 >= 0 ]
		(5, 1)    eval_self_destruct_bb1_in(v_pool.0) -> Com_1(eval_self_destruct_3(v_pool.0)) [ v_pool.0 < 0 ]
		(?, 1)    eval_self_destruct_0(v_pool.0) -> Com_2(eval_free_pool_start(v_pool.0), eval_self_destruct_1(v_pool.0))
		(?, 1)    eval_self_destruct_1(v_pool.0) -> Com_1(eval_self_destruct_bb1_in(v_pool.0 - 1))
		(5, 1)    eval_self_destruct_3(v_pool.0) -> Com_2(eval_jpeg_free_small_start(v_pool.0), eval_self_destruct_4(v_pool.0))
		(5, 1)    eval_self_destruct_4(v_pool.0) -> Com_1(eval_self_destruct_5(v_pool.0))
		(5, 1)    eval_self_destruct_5(v_pool.0) -> Com_2(eval_jpeg_mem_term_start(v_pool.0), eval_self_destruct_6(v_pool.0))
		(5, 1)    eval_self_destruct_6(v_pool.0) -> Com_1(eval_self_destruct_stop(v_pool.0))
	start location:	eval_self_destruct_start
	leaf cost:	0

Applied AI with 'oct' on problem 3 to obtain the following invariants:
  For symbol eval_self_destruct_0: -X_1 + 1 >= 0 /\ X_1 >= 0
  For symbol eval_self_destruct_1: -X_1 + 1 >= 0 /\ X_1 >= 0
  For symbol eval_self_destruct_3: -X_1 - 1 >= 0
  For symbol eval_self_destruct_4: -X_1 - 1 >= 0
  For symbol eval_self_destruct_5: -X_1 - 1 >= 0
  For symbol eval_self_destruct_6: -X_1 - 1 >= 0
  For symbol eval_self_destruct_bb1_in: -X_1 + 1 >= 0


This yielded the following problem:
4:	T:
		(5, 1)    eval_self_destruct_6(v_pool.0) -> Com_1(eval_self_destruct_stop(v_pool.0)) [ -v_pool.0 - 1 >= 0 ]
		(5, 1)    eval_self_destruct_5(v_pool.0) -> Com_2(eval_jpeg_mem_term_start(v_pool.0), eval_self_destruct_6(v_pool.0)) [ -v_pool.0 - 1 >= 0 ]
		(5, 1)    eval_self_destruct_4(v_pool.0) -> Com_1(eval_self_destruct_5(v_pool.0)) [ -v_pool.0 - 1 >= 0 ]
		(5, 1)    eval_self_destruct_3(v_pool.0) -> Com_2(eval_jpeg_free_small_start(v_pool.0), eval_self_destruct_4(v_pool.0)) [ -v_pool.0 - 1 >= 0 ]
		(?, 1)    eval_self_destruct_1(v_pool.0) -> Com_1(eval_self_destruct_bb1_in(v_pool.0 - 1)) [ -v_pool.0 + 1 >= 0 /\ v_pool.0 >= 0 ]
		(?, 1)    eval_self_destruct_0(v_pool.0) -> Com_2(eval_free_pool_start(v_pool.0), eval_self_destruct_1(v_pool.0)) [ -v_pool.0 + 1 >= 0 /\ v_pool.0 >= 0 ]
		(5, 1)    eval_self_destruct_bb1_in(v_pool.0) -> Com_1(eval_self_destruct_3(v_pool.0)) [ -v_pool.0 + 1 >= 0 /\ v_pool.0 < 0 ]
		(?, 1)    eval_self_destruct_bb1_in(v_pool.0) -> Com_1(eval_self_destruct_0(v_pool.0)) [ -v_pool.0 + 1 >= 0 /\ v_pool.0 >= 0 ]
		(1, 1)    eval_self_destruct_bb0_in(v_pool.0) -> Com_1(eval_self_destruct_bb1_in(1))
		(1, 1)    eval_self_destruct_start(v_pool.0) -> Com_1(eval_self_destruct_bb0_in(v_pool.0))
	start location:	eval_self_destruct_start
	leaf cost:	0

A polynomial rank function with
	Pol(eval_self_destruct_bb1_in) = 3*V_1 + 3
	Pol(eval_self_destruct_0) = 3*V_1 + 2
	Pol(eval_self_destruct_1) = 3*V_1 + 1
	Pol(eval_free_pool_start) = 0
and size complexities
	S("eval_self_destruct_start(v_pool.0) -> Com_1(eval_self_destruct_bb0_in(v_pool.0))", 0-0) = v_pool.0
	S("eval_self_destruct_bb0_in(v_pool.0) -> Com_1(eval_self_destruct_bb1_in(1))", 0-0) = 1
	S("eval_self_destruct_bb1_in(v_pool.0) -> Com_1(eval_self_destruct_0(v_pool.0)) [ -v_pool.0 + 1 >= 0 /\\ v_pool.0 >= 0 ]", 0-0) = 1
	S("eval_self_destruct_bb1_in(v_pool.0) -> Com_1(eval_self_destruct_3(v_pool.0)) [ -v_pool.0 + 1 >= 0 /\\ v_pool.0 < 0 ]", 0-0) = 1
	S("eval_self_destruct_0(v_pool.0) -> Com_2(eval_free_pool_start(v_pool.0), eval_self_destruct_1(v_pool.0)) [ -v_pool.0 + 1 >= 0 /\\ v_pool.0 >= 0 ]", 0-0) = 1
	S("eval_self_destruct_0(v_pool.0) -> Com_2(eval_free_pool_start(v_pool.0), eval_self_destruct_1(v_pool.0)) [ -v_pool.0 + 1 >= 0 /\\ v_pool.0 >= 0 ]", 1-0) = 1
	S("eval_self_destruct_1(v_pool.0) -> Com_1(eval_self_destruct_bb1_in(v_pool.0 - 1)) [ -v_pool.0 + 1 >= 0 /\\ v_pool.0 >= 0 ]", 0-0) = 1
	S("eval_self_destruct_3(v_pool.0) -> Com_2(eval_jpeg_free_small_start(v_pool.0), eval_self_destruct_4(v_pool.0)) [ -v_pool.0 - 1 >= 0 ]", 0-0) = 1
	S("eval_self_destruct_3(v_pool.0) -> Com_2(eval_jpeg_free_small_start(v_pool.0), eval_self_destruct_4(v_pool.0)) [ -v_pool.0 - 1 >= 0 ]", 1-0) = 1
	S("eval_self_destruct_4(v_pool.0) -> Com_1(eval_self_destruct_5(v_pool.0)) [ -v_pool.0 - 1 >= 0 ]", 0-0) = 1
	S("eval_self_destruct_5(v_pool.0) -> Com_2(eval_jpeg_mem_term_start(v_pool.0), eval_self_destruct_6(v_pool.0)) [ -v_pool.0 - 1 >= 0 ]", 0-0) = 1
	S("eval_self_destruct_5(v_pool.0) -> Com_2(eval_jpeg_mem_term_start(v_pool.0), eval_self_destruct_6(v_pool.0)) [ -v_pool.0 - 1 >= 0 ]", 1-0) = 1
	S("eval_self_destruct_6(v_pool.0) -> Com_1(eval_self_destruct_stop(v_pool.0)) [ -v_pool.0 - 1 >= 0 ]", 0-0) = 1
orients the transitions
	eval_self_destruct_bb1_in(v_pool.0) -> Com_1(eval_self_destruct_0(v_pool.0)) [ -v_pool.0 + 1 >= 0 /\ v_pool.0 >= 0 ]
	eval_self_destruct_1(v_pool.0) -> Com_1(eval_self_destruct_bb1_in(v_pool.0 - 1)) [ -v_pool.0 + 1 >= 0 /\ v_pool.0 >= 0 ]
	eval_self_destruct_0(v_pool.0) -> Com_2(eval_free_pool_start(v_pool.0), eval_self_destruct_1(v_pool.0)) [ -v_pool.0 + 1 >= 0 /\ v_pool.0 >= 0 ]
weakly and the transitions
	eval_self_destruct_bb1_in(v_pool.0) -> Com_1(eval_self_destruct_0(v_pool.0)) [ -v_pool.0 + 1 >= 0 /\ v_pool.0 >= 0 ]
	eval_self_destruct_1(v_pool.0) -> Com_1(eval_self_destruct_bb1_in(v_pool.0 - 1)) [ -v_pool.0 + 1 >= 0 /\ v_pool.0 >= 0 ]
	eval_self_destruct_0(v_pool.0) -> Com_2(eval_free_pool_start(v_pool.0), eval_self_destruct_1(v_pool.0)) [ -v_pool.0 + 1 >= 0 /\ v_pool.0 >= 0 ]
strictly and produces the following problem:
5:	T:
		(5, 1)    eval_self_destruct_6(v_pool.0) -> Com_1(eval_self_destruct_stop(v_pool.0)) [ -v_pool.0 - 1 >= 0 ]
		(5, 1)    eval_self_destruct_5(v_pool.0) -> Com_2(eval_jpeg_mem_term_start(v_pool.0), eval_self_destruct_6(v_pool.0)) [ -v_pool.0 - 1 >= 0 ]
		(5, 1)    eval_self_destruct_4(v_pool.0) -> Com_1(eval_self_destruct_5(v_pool.0)) [ -v_pool.0 - 1 >= 0 ]
		(5, 1)    eval_self_destruct_3(v_pool.0) -> Com_2(eval_jpeg_free_small_start(v_pool.0), eval_self_destruct_4(v_pool.0)) [ -v_pool.0 - 1 >= 0 ]
		(6, 1)    eval_self_destruct_1(v_pool.0) -> Com_1(eval_self_destruct_bb1_in(v_pool.0 - 1)) [ -v_pool.0 + 1 >= 0 /\ v_pool.0 >= 0 ]
		(6, 1)    eval_self_destruct_0(v_pool.0) -> Com_2(eval_free_pool_start(v_pool.0), eval_self_destruct_1(v_pool.0)) [ -v_pool.0 + 1 >= 0 /\ v_pool.0 >= 0 ]
		(5, 1)    eval_self_destruct_bb1_in(v_pool.0) -> Com_1(eval_self_destruct_3(v_pool.0)) [ -v_pool.0 + 1 >= 0 /\ v_pool.0 < 0 ]
		(6, 1)    eval_self_destruct_bb1_in(v_pool.0) -> Com_1(eval_self_destruct_0(v_pool.0)) [ -v_pool.0 + 1 >= 0 /\ v_pool.0 >= 0 ]
		(1, 1)    eval_self_destruct_bb0_in(v_pool.0) -> Com_1(eval_self_destruct_bb1_in(1))
		(1, 1)    eval_self_destruct_start(v_pool.0) -> Com_1(eval_self_destruct_bb0_in(v_pool.0))
	start location:	eval_self_destruct_start
	leaf cost:	0

Complexity upper bound 45

Time: 0.079 sec (SMT: 0.073 sec)

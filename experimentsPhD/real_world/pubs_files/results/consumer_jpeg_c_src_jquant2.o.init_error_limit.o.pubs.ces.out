This is PUBS, version 0.2.
Copyright (C) 2007, 2008, 2009 UPM, UCM.
This program comes with ABSOLUTELY NO WARRANTY.
This is free software, and you are welcome to
redistribute it under certain conditions.



CRS $pubs_aux_entry$ -- THE MAIN ENTRY

  * Non Asymptotic Upper Bound: 291 

  * LOOPS $pubs_aux_entry$ -> $pubs_aux_entry$

  * Ranking function: N/A

  * Invariants $pubs_aux_entry$ -> $pubs_aux_entry$

     entry  : []
     non-rec: []
     rec    : [0=1]
     inv    : []

CRS eval_init_error_limit_start

  * Non Asymptotic Upper Bound: 291 

  * LOOPS eval_init_error_limit_start -> eval_init_error_limit_start

  * Ranking function: N/A

  * Invariants eval_init_error_limit_start -> eval_init_error_limit_start

     entry  : []
     non-rec: []
     rec    : [0=1]
     inv    : []

CRS eval_init_error_limit_bb0_in

  * Non Asymptotic Upper Bound: 291 

  * LOOPS eval_init_error_limit_bb0_in -> eval_init_error_limit_bb0_in

  * Ranking function: N/A

  * Invariants eval_init_error_limit_bb0_in -> eval_init_error_limit_bb0_in

     entry  : []
     non-rec: []
     rec    : [0=1]
     inv    : []

CRS eval_init_error_limit_0

  * Non Asymptotic Upper Bound: 291 

  * LOOPS eval_init_error_limit_0 -> eval_init_error_limit_0

  * Ranking function: N/A

  * Invariants eval_init_error_limit_0 -> eval_init_error_limit_0

     entry  : []
     non-rec: []
     rec    : [0=1]
     inv    : []

CRS eval_init_error_limit_1

  * Non Asymptotic Upper Bound: 291 

  * LOOPS eval_init_error_limit_1 -> eval_init_error_limit_1

  * Ranking function: N/A

  * Invariants eval_init_error_limit_1 -> eval_init_error_limit_1

     entry  : []
     non-rec: []
     rec    : [0=1]
     inv    : []

CRS loop_cont_eval_init_error_limit_bb1_in(A,B,C)

  * Non Asymptotic Upper Bound: 2+nat(-B+48)+nat(-B+256) 

  * LOOPS loop_cont_eval_init_error_limit_bb1_in(D,E,F) -> loop_cont_eval_init_error_limit_bb1_in(G,H,I)

  * Ranking function: N/A

  * Invariants loop_cont_eval_init_error_limit_bb1_in(A,B,C) -> loop_cont_eval_init_error_limit_bb1_in(D,E,F)

     entry  : [B>=16,A=4]
     non-rec: [A=D,B=E,C=F,B>=16,A=4]
     rec    : [0=1]
     inv    : [B>=16,A=4,D=4,B=E,C=F]

CRS loop_cont_eval_init_error_limit_bb3_in(A,B,C)

  * Non Asymptotic Upper Bound: 1+nat(-B+256) 

  * LOOPS loop_cont_eval_init_error_limit_bb3_in(D,E,F) -> loop_cont_eval_init_error_limit_bb3_in(G,H,I)

  * Ranking function: N/A

  * Invariants loop_cont_eval_init_error_limit_bb3_in(A,B,C) -> loop_cont_eval_init_error_limit_bb3_in(D,E,F)

     entry  : [B>=48,A=3]
     non-rec: [A=D,B=E,C=F,B>=48,A=3]
     rec    : [0=1]
     inv    : [B>=48,A=3,D=3,B=E,C=F]

CRS loop_cont_eval_init_error_limit_bb5_in(A,B)

  * Non Asymptotic Upper Bound: 0 

  * LOOPS loop_cont_eval_init_error_limit_bb5_in(C,D) -> loop_cont_eval_init_error_limit_bb5_in(E,F)

  * Ranking function: N/A

  * Invariants loop_cont_eval_init_error_limit_bb5_in(A,B) -> loop_cont_eval_init_error_limit_bb5_in(C,D)

     entry  : [A=2]
     non-rec: [A=C,B=D,A=2]
     rec    : [0=1]
     inv    : [A=2,C=2,B=D]

CRS eval_init_error_limit_bb5_in(A)

  * Non Asymptotic Upper Bound: nat(-A+256) 

  * LOOPS eval_init_error_limit_bb5_in(B) -> eval_init_error_limit_bb5_in(C)
     - [B+1=C,255>=B]

  * Ranking function: nat(-B+256)

  * Invariants eval_init_error_limit_bb5_in(A) -> eval_init_error_limit_bb5_in(B)

     entry  : [A>=48]
     non-rec: [A=B,A>=48]
     rec    : [256>=B,A>=48,B>=A+1]
     inv    : [A+208>=B,B>=A,A>=48]

CRS eval_init_error_limit_bb3_in(A)

  * Non Asymptotic Upper Bound: nat(-A+48) 

  * LOOPS eval_init_error_limit_bb3_in(B) -> eval_init_error_limit_bb3_in(C)
     - [B+1=C,47>=B]

  * Ranking function: nat(-B+48)

  * Invariants eval_init_error_limit_bb3_in(A) -> eval_init_error_limit_bb3_in(B)

     entry  : [A>=16]
     non-rec: [A=B,A>=16]
     rec    : [48>=B,A>=16,B>=A+1]
     inv    : [A+32>=B,B>=A,A>=16]

CRS eval_init_error_limit_bb1_in(A)

  * Non Asymptotic Upper Bound: nat(-A+16) 

  * LOOPS eval_init_error_limit_bb1_in(B) -> eval_init_error_limit_bb1_in(C)
     - [B+1=C,15>=B]

  * Ranking function: nat(-B+16)

  * Invariants eval_init_error_limit_bb1_in(A) -> eval_init_error_limit_bb1_in(B)

     entry  : [A=0]
     non-rec: [A=B,A=0]
     rec    : [A=0,B>=1]
     inv    : [B>=0,A=0]



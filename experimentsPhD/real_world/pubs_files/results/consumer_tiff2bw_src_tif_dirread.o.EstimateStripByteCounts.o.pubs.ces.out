This is PUBS, version 0.2.
Copyright (C) 2007, 2008, 2009 UPM, UCM.
This program comes with ABSOLUTELY NO WARRANTY.
This is free software, and you are welcome to
redistribute it under certain conditions.



CRS $pubs_aux_entry$(A) -- THE MAIN ENTRY

  * Non Asymptotic Upper Bound: max([1+c(failed(schemes_failed,[scc=10,cr=eval_EstimateStripByteCounts_bb14_in/1])),2+2*nat(A)+c(failed(schemes_failed,[scc=1,cr=eval_EstimateStripByteCounts_bb9_in/1]))]) 

  * LOOPS $pubs_aux_entry$(B) -> $pubs_aux_entry$(C)

  * Ranking function: N/A

  * Invariants $pubs_aux_entry$(A) -> $pubs_aux_entry$(B)

     entry  : []
     non-rec: [A=B]
     rec    : [0=1]
     inv    : [A=B]

CRS eval_EstimateStripByteCounts_start(A)

  * Non Asymptotic Upper Bound: max([1+c(failed(schemes_failed,[scc=10,cr=eval_EstimateStripByteCounts_bb14_in/1])),2+2*nat(A)+c(failed(schemes_failed,[scc=1,cr=eval_EstimateStripByteCounts_bb9_in/1]))]) 

  * LOOPS eval_EstimateStripByteCounts_start(B) -> eval_EstimateStripByteCounts_start(C)

  * Ranking function: N/A

  * Invariants eval_EstimateStripByteCounts_start(A) -> eval_EstimateStripByteCounts_start(B)

     entry  : []
     non-rec: [A=B]
     rec    : [0=1]
     inv    : [A=B]

CRS eval_EstimateStripByteCounts_bb0_in(A)

  * Non Asymptotic Upper Bound: max([1+c(failed(schemes_failed,[scc=10,cr=eval_EstimateStripByteCounts_bb14_in/1])),2+2*nat(A)+c(failed(schemes_failed,[scc=1,cr=eval_EstimateStripByteCounts_bb9_in/1]))]) 

  * LOOPS eval_EstimateStripByteCounts_bb0_in(B) -> eval_EstimateStripByteCounts_bb0_in(C)

  * Ranking function: N/A

  * Invariants eval_EstimateStripByteCounts_bb0_in(A) -> eval_EstimateStripByteCounts_bb0_in(B)

     entry  : []
     non-rec: [A=B]
     rec    : [0=1]
     inv    : [A=B]

CRS eval_EstimateStripByteCounts_0(A)

  * Non Asymptotic Upper Bound: max([1+c(failed(schemes_failed,[scc=10,cr=eval_EstimateStripByteCounts_bb14_in/1])),2+2*nat(A)+c(failed(schemes_failed,[scc=1,cr=eval_EstimateStripByteCounts_bb9_in/1]))]) 

  * LOOPS eval_EstimateStripByteCounts_0(B) -> eval_EstimateStripByteCounts_0(C)

  * Ranking function: N/A

  * Invariants eval_EstimateStripByteCounts_0(A) -> eval_EstimateStripByteCounts_0(B)

     entry  : []
     non-rec: [A=B]
     rec    : [0=1]
     inv    : [A=B]

CRS eval_EstimateStripByteCounts_1(A)

  * Non Asymptotic Upper Bound: max([1+c(failed(schemes_failed,[scc=10,cr=eval_EstimateStripByteCounts_bb14_in/1])),2+2*nat(A)+c(failed(schemes_failed,[scc=1,cr=eval_EstimateStripByteCounts_bb9_in/1]))]) 

  * LOOPS eval_EstimateStripByteCounts_1(B) -> eval_EstimateStripByteCounts_1(C)

  * Ranking function: N/A

  * Invariants eval_EstimateStripByteCounts_1(A) -> eval_EstimateStripByteCounts_1(B)

     entry  : []
     non-rec: [A=B]
     rec    : [0=1]
     inv    : [A=B]

CRS eval_EstimateStripByteCounts_bb2_in(A)

  * Non Asymptotic Upper Bound: max([1+c(failed(schemes_failed,[scc=10,cr=eval_EstimateStripByteCounts_bb14_in/1])),2+2*nat(A)+c(failed(schemes_failed,[scc=1,cr=eval_EstimateStripByteCounts_bb9_in/1]))]) 

  * LOOPS eval_EstimateStripByteCounts_bb2_in(B) -> eval_EstimateStripByteCounts_bb2_in(C)

  * Ranking function: N/A

  * Invariants eval_EstimateStripByteCounts_bb2_in(A) -> eval_EstimateStripByteCounts_bb2_in(B)

     entry  : []
     non-rec: [A=B]
     rec    : [0=1]
     inv    : [A=B]

CRS eval_EstimateStripByteCounts_6(A,B)

  * Non Asymptotic Upper Bound: max([1+c(failed(schemes_failed,[scc=10,cr=eval_EstimateStripByteCounts_bb14_in/1])),2+2*nat(A)+c(failed(schemes_failed,[scc=1,cr=eval_EstimateStripByteCounts_bb9_in/1]))]) 

  * LOOPS eval_EstimateStripByteCounts_6(C,D) -> eval_EstimateStripByteCounts_6(E,F)

  * Ranking function: N/A

  * Invariants eval_EstimateStripByteCounts_6(A,B) -> eval_EstimateStripByteCounts_6(C,D)

     entry  : []
     non-rec: [A=C,B=D]
     rec    : [0=1]
     inv    : [A=C,B=D]

CRS eval_EstimateStripByteCounts_7(A)

  * Non Asymptotic Upper Bound: max([1+c(failed(schemes_failed,[scc=10,cr=eval_EstimateStripByteCounts_bb14_in/1])),2+2*nat(A)+c(failed(schemes_failed,[scc=1,cr=eval_EstimateStripByteCounts_bb9_in/1]))]) 

  * LOOPS eval_EstimateStripByteCounts_7(B) -> eval_EstimateStripByteCounts_7(C)

  * Ranking function: N/A

  * Invariants eval_EstimateStripByteCounts_7(A) -> eval_EstimateStripByteCounts_7(B)

     entry  : []
     non-rec: [A=B]
     rec    : [0=1]
     inv    : [A=B]

CRS eval_EstimateStripByteCounts_58

  * Non Asymptotic Upper Bound: 1+c(failed(schemes_failed,[scc=10,cr=eval_EstimateStripByteCounts_bb14_in/1])) 

  * LOOPS eval_EstimateStripByteCounts_58 -> eval_EstimateStripByteCounts_58

  * Ranking function: N/A

  * Invariants eval_EstimateStripByteCounts_58 -> eval_EstimateStripByteCounts_58

     entry  : []
     non-rec: []
     rec    : [0=1]
     inv    : []

CRS eval_EstimateStripByteCounts_59

  * Non Asymptotic Upper Bound: 1+c(failed(schemes_failed,[scc=10,cr=eval_EstimateStripByteCounts_bb14_in/1])) 

  * LOOPS eval_EstimateStripByteCounts_59 -> eval_EstimateStripByteCounts_59

  * Ranking function: N/A

  * Invariants eval_EstimateStripByteCounts_59 -> eval_EstimateStripByteCounts_59

     entry  : []
     non-rec: []
     rec    : [0=1]
     inv    : []

CRS loop_cont_eval_EstimateStripByteCounts_bb14_in(A,B)

  * Non Asymptotic Upper Bound: 0 

  * LOOPS loop_cont_eval_EstimateStripByteCounts_bb14_in(C,D) -> loop_cont_eval_EstimateStripByteCounts_bb14_in(E,F)

  * Ranking function: N/A

  * Invariants loop_cont_eval_EstimateStripByteCounts_bb14_in(A,B) -> loop_cont_eval_EstimateStripByteCounts_bb14_in(C,D)

     entry  : []
     non-rec: [A=C,B=D]
     rec    : [0=1]
     inv    : [A=C,B=D]

CRS eval_EstimateStripByteCounts_bb14_in(A)

  * Non Asymptotic Upper Bound: c(failed(schemes_failed,[scc=10,cr=eval_EstimateStripByteCounts_bb14_in/1])) 

  * LOOPS eval_EstimateStripByteCounts_bb14_in(B) -> eval_EstimateStripByteCounts_bb14_in(C)
     - [B+1=C]

  * Ranking function: c(failed(no_rf,[scc=10,cr=eval_EstimateStripByteCounts_bb14_in/1]))

  * Invariants eval_EstimateStripByteCounts_bb14_in(A) -> eval_EstimateStripByteCounts_bb14_in(B)

     entry  : [A=0]
     non-rec: [A=B,A=0]
     rec    : [A=0,B>=1]
     inv    : [B>=0,A=0]

CRS eval_EstimateStripByteCounts_16(A,B)

  * Non Asymptotic Upper Bound: 2+2*nat(B/12-7/6)+c(failed(schemes_failed,[scc=1,cr=eval_EstimateStripByteCounts_bb9_in/1])) 

  * LOOPS eval_EstimateStripByteCounts_16(C,D) -> eval_EstimateStripByteCounts_16(E,F)

  * Ranking function: N/A

  * Invariants eval_EstimateStripByteCounts_16(A,B) -> eval_EstimateStripByteCounts_16(C,D)

     entry  : [12*A+14=B]
     non-rec: [A=C,B=D,12*A+14=B]
     rec    : [0=1]
     inv    : [12*A+14=B,A=C,12*A+14=D]

CRS eval_EstimateStripByteCounts_17(A,B,C)

  * Non Asymptotic Upper Bound: 2+2*nat(B/12-7/6)+c(failed(schemes_failed,[scc=1,cr=eval_EstimateStripByteCounts_bb9_in/1])) 

  * LOOPS eval_EstimateStripByteCounts_17(D,E,F) -> eval_EstimateStripByteCounts_17(G,H,I)

  * Ranking function: N/A

  * Invariants eval_EstimateStripByteCounts_17(A,B,C) -> eval_EstimateStripByteCounts_17(D,E,F)

     entry  : [12*A+14=B]
     non-rec: [A=D,B=E,C=F,12*A+14=B]
     rec    : [0=1]
     inv    : [12*A+14=B,A=D,12*A+14=E,C=F]

CRS loop_cont_eval_EstimateStripByteCounts_bb4_in(A,B)

  * Non Asymptotic Upper Bound: 1+c(failed(schemes_failed,[scc=1,cr=eval_EstimateStripByteCounts_bb9_in/1])) 

  * LOOPS loop_cont_eval_EstimateStripByteCounts_bb4_in(C,D) -> loop_cont_eval_EstimateStripByteCounts_bb4_in(E,F)

  * Ranking function: N/A

  * Invariants loop_cont_eval_EstimateStripByteCounts_bb4_in(A,B) -> loop_cont_eval_EstimateStripByteCounts_bb4_in(C,D)

     entry  : []
     non-rec: [A=C,B=D]
     rec    : [0=1]
     inv    : [A=C,B=D]

CRS eval_EstimateStripByteCounts_bb8_in

  * Non Asymptotic Upper Bound: 1+c(failed(schemes_failed,[scc=1,cr=eval_EstimateStripByteCounts_bb9_in/1])) 

  * LOOPS eval_EstimateStripByteCounts_bb8_in -> eval_EstimateStripByteCounts_bb8_in

  * Ranking function: N/A

  * Invariants eval_EstimateStripByteCounts_bb8_in -> eval_EstimateStripByteCounts_bb8_in

     entry  : []
     non-rec: []
     rec    : [0=1]
     inv    : []

CRS loop_cont_eval_EstimateStripByteCounts_bb9_in(A,B)

  * Non Asymptotic Upper Bound: 0 

  * LOOPS loop_cont_eval_EstimateStripByteCounts_bb9_in(C,D) -> loop_cont_eval_EstimateStripByteCounts_bb9_in(E,F)

  * Ranking function: N/A

  * Invariants loop_cont_eval_EstimateStripByteCounts_bb9_in(A,B) -> loop_cont_eval_EstimateStripByteCounts_bb9_in(C,D)

     entry  : []
     non-rec: [A=C,B=D]
     rec    : [0=1]
     inv    : [A=C,B=D]

CRS eval_EstimateStripByteCounts_bb16_in

  * Non Asymptotic Upper Bound: 0 

  * LOOPS eval_EstimateStripByteCounts_bb16_in -> eval_EstimateStripByteCounts_bb16_in

  * Ranking function: N/A

  * Invariants eval_EstimateStripByteCounts_bb16_in -> eval_EstimateStripByteCounts_bb16_in

     entry  : []
     non-rec: []
     rec    : [0=1]
     inv    : []

CRS eval_EstimateStripByteCounts_bb18_in

  * Non Asymptotic Upper Bound: 0 

  * LOOPS eval_EstimateStripByteCounts_bb18_in -> eval_EstimateStripByteCounts_bb18_in

  * Ranking function: N/A

  * Invariants eval_EstimateStripByteCounts_bb18_in -> eval_EstimateStripByteCounts_bb18_in

     entry  : []
     non-rec: []
     rec    : [0=1]
     inv    : []

CRS eval_EstimateStripByteCounts_bb9_in(A)

  * Non Asymptotic Upper Bound: c(failed(schemes_failed,[scc=1,cr=eval_EstimateStripByteCounts_bb9_in/1])) 

  * LOOPS eval_EstimateStripByteCounts_bb9_in(B) -> eval_EstimateStripByteCounts_bb9_in(C)
     - [B+1=C]

  * Ranking function: c(failed(no_rf,[scc=1,cr=eval_EstimateStripByteCounts_bb9_in/1]))

  * Invariants eval_EstimateStripByteCounts_bb9_in(A) -> eval_EstimateStripByteCounts_bb9_in(B)

     entry  : [A=0]
     non-rec: [A=B,A=0]
     rec    : [A=0,B>=1]
     inv    : [B>=0,A=0]

CRS eval_EstimateStripByteCounts_bb4_in(A,B,C)

  * Non Asymptotic Upper Bound: 2*nat(B) 

  * LOOPS eval_EstimateStripByteCounts_bb4_in(D,E,F) -> eval_EstimateStripByteCounts_bb4_in(G,H,I)
     - [E=H+1,D=G,H>=0]
     - [D=G,F=I,E=H+1,H>=0]

  * Ranking function: nat(E)

  * Invariants eval_EstimateStripByteCounts_bb4_in(A,B,C) -> eval_EstimateStripByteCounts_bb4_in(D,E,F)

     entry  : [12*B+14=C]
     non-rec: [A=D,B=E,C=F,12*B+14=C]
     rec    : [A=D,12*B+14=C,E>=0,B>=E+1]
     inv    : [B>=E,A=D,12*B+14=C]



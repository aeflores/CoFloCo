This is PUBS, version 0.2.
Copyright (C) 2007, 2008, 2009 UPM, UCM.
This program comes with ABSOLUTELY NO WARRANTY.
This is free software, and you are welcome to
redistribute it under certain conditions.



CRS $pubs_aux_entry$ -- THE MAIN ENTRY

  * Non Asymptotic Upper Bound: 1+nat(c(maximize_failed))/2 

  * LOOPS $pubs_aux_entry$ -> $pubs_aux_entry$

  * Ranking function: N/A

  * Invariants $pubs_aux_entry$ -> $pubs_aux_entry$

     entry  : []
     non-rec: []
     rec    : [0=1]
     inv    : []

CRS eval_zdicttomark_start

  * Non Asymptotic Upper Bound: 1+nat(c(maximize_failed))/2 

  * LOOPS eval_zdicttomark_start -> eval_zdicttomark_start

  * Ranking function: N/A

  * Invariants eval_zdicttomark_start -> eval_zdicttomark_start

     entry  : []
     non-rec: []
     rec    : [0=1]
     inv    : []

CRS eval_zdicttomark_bb0_in

  * Non Asymptotic Upper Bound: 1+nat(c(maximize_failed))/2 

  * LOOPS eval_zdicttomark_bb0_in -> eval_zdicttomark_bb0_in

  * Ranking function: N/A

  * Invariants eval_zdicttomark_bb0_in -> eval_zdicttomark_bb0_in

     entry  : []
     non-rec: []
     rec    : [0=1]
     inv    : []

CRS eval_zdicttomark_0

  * Non Asymptotic Upper Bound: 1+nat(c(maximize_failed))/2 

  * LOOPS eval_zdicttomark_0 -> eval_zdicttomark_0

  * Ranking function: N/A

  * Invariants eval_zdicttomark_0 -> eval_zdicttomark_0

     entry  : []
     non-rec: []
     rec    : [0=1]
     inv    : []

CRS eval_zdicttomark_1(A)

  * Non Asymptotic Upper Bound: 1+nat(1*A)/2 

  * LOOPS eval_zdicttomark_1(B) -> eval_zdicttomark_1(C)

  * Ranking function: N/A

  * Invariants eval_zdicttomark_1(A) -> eval_zdicttomark_1(B)

     entry  : []
     non-rec: [A=B]
     rec    : [0=1]
     inv    : [A=B]

CRS eval_zdicttomark_6(A,B)

  * Non Asymptotic Upper Bound: 1+nat(1*A+1)/2 

  * LOOPS eval_zdicttomark_6(C,D) -> eval_zdicttomark_6(E,F)

  * Ranking function: N/A

  * Invariants eval_zdicttomark_6(A,B) -> eval_zdicttomark_6(C,D)

     entry  : []
     non-rec: [A=C,B=D]
     rec    : [0=1]
     inv    : [A=C,B=D]

CRS eval_zdicttomark_7(A)

  * Non Asymptotic Upper Bound: 1+nat(1*A+1)/2 

  * LOOPS eval_zdicttomark_7(B) -> eval_zdicttomark_7(C)

  * Ranking function: N/A

  * Invariants eval_zdicttomark_7(A) -> eval_zdicttomark_7(B)

     entry  : []
     non-rec: [A=B]
     rec    : [0=1]
     inv    : [A=B]

CRS loop_cont_eval_zdicttomark_bb3_in(A,B,C)

  * Non Asymptotic Upper Bound: 0 

  * LOOPS loop_cont_eval_zdicttomark_bb3_in(D,E,F) -> loop_cont_eval_zdicttomark_bb3_in(G,H,I)

  * Ranking function: N/A

  * Invariants loop_cont_eval_zdicttomark_bb3_in(A,B,C) -> loop_cont_eval_zdicttomark_bb3_in(D,E,F)

     entry  : [3>=A,A>=2]
     non-rec: [A=D,B=E,C=F,3>=A,A>=2]
     rec    : [0=1]
     inv    : [A>=2,3>=A,A=D,B=E,C=F]

CRS eval_zdicttomark_17(A)

  * Non Asymptotic Upper Bound: 0 

  * LOOPS eval_zdicttomark_17(B) -> eval_zdicttomark_17(C)

  * Ranking function: N/A

  * Invariants eval_zdicttomark_17(A) -> eval_zdicttomark_17(B)

     entry  : []
     non-rec: [A=B]
     rec    : [0=1]
     inv    : [A=B]

CRS eval_zdicttomark_18

  * Non Asymptotic Upper Bound: 0 

  * LOOPS eval_zdicttomark_18 -> eval_zdicttomark_18

  * Ranking function: N/A

  * Invariants eval_zdicttomark_18 -> eval_zdicttomark_18

     entry  : []
     non-rec: []
     rec    : [0=1]
     inv    : []

CRS eval_zdicttomark_19

  * Non Asymptotic Upper Bound: 0 

  * LOOPS eval_zdicttomark_19 -> eval_zdicttomark_19

  * Ranking function: N/A

  * Invariants eval_zdicttomark_19 -> eval_zdicttomark_19

     entry  : []
     non-rec: []
     rec    : [0=1]
     inv    : []

CRS eval_zdicttomark_bb7_in

  * Non Asymptotic Upper Bound: 0 

  * LOOPS eval_zdicttomark_bb7_in -> eval_zdicttomark_bb7_in

  * Ranking function: N/A

  * Invariants eval_zdicttomark_bb7_in -> eval_zdicttomark_bb7_in

     entry  : []
     non-rec: []
     rec    : [0=1]
     inv    : []

CRS eval_zdicttomark_bb3_in(A,B)

  * Non Asymptotic Upper Bound: nat(A-B+1)/2 

  * LOOPS eval_zdicttomark_bb3_in(C,D) -> eval_zdicttomark_bb3_in(E,F)
     - [D+2=F,C=E,C>=D+1]

  * Ranking function: nat(C/2-D/2+1/2)

  * Invariants eval_zdicttomark_bb3_in(A,B) -> eval_zdicttomark_bb3_in(C,D)

     entry  : [B=0]
     non-rec: [A=C,B=D,B=0]
     rec    : [A=C,B=0,A+1>=D,D>=2]
     inv    : [D>=0,A=C,B=0]



This is PUBS, version 0.2.
Copyright (C) 2007, 2008, 2009 UPM, UCM.
This program comes with ABSOLUTELY NO WARRANTY.
This is free software, and you are welcome to
redistribute it under certain conditions.



CRS $pubs_aux_entry$(A) -- THE MAIN ENTRY

  * Non Asymptotic Upper Bound: max([3+c(failed(schemes_failed,[scc=1,cr=eval_ideaCfbEncrypt_bb5_in/2]))+c(failed(schemes_failed,[scc=6,cr=eval_ideaCfbEncrypt_bb8_in/1]))+c(failed(schemes_failed,[scc=7,cr=eval_ideaCfbEncrypt_bb12_in/1])),1+c(failed(schemes_failed,[scc=0,cr=eval_ideaCfbEncrypt_bb2_in/1]))]) 

  * LOOPS $pubs_aux_entry$(B) -> $pubs_aux_entry$(C)

  * Ranking function: N/A

  * Invariants $pubs_aux_entry$(A) -> $pubs_aux_entry$(B)

     entry  : []
     non-rec: [A=B]
     rec    : [0=1]
     inv    : [A=B]

CRS eval_ideaCfbEncrypt_start(A)

  * Non Asymptotic Upper Bound: max([3+c(failed(schemes_failed,[scc=1,cr=eval_ideaCfbEncrypt_bb5_in/2]))+c(failed(schemes_failed,[scc=6,cr=eval_ideaCfbEncrypt_bb8_in/1]))+c(failed(schemes_failed,[scc=7,cr=eval_ideaCfbEncrypt_bb12_in/1])),1+c(failed(schemes_failed,[scc=0,cr=eval_ideaCfbEncrypt_bb2_in/1]))]) 

  * LOOPS eval_ideaCfbEncrypt_start(B) -> eval_ideaCfbEncrypt_start(C)

  * Ranking function: N/A

  * Invariants eval_ideaCfbEncrypt_start(A) -> eval_ideaCfbEncrypt_start(B)

     entry  : []
     non-rec: [A=B]
     rec    : [0=1]
     inv    : [A=B]

CRS eval_ideaCfbEncrypt_bb0_in(A)

  * Non Asymptotic Upper Bound: max([3+c(failed(schemes_failed,[scc=1,cr=eval_ideaCfbEncrypt_bb5_in/2]))+c(failed(schemes_failed,[scc=6,cr=eval_ideaCfbEncrypt_bb8_in/1]))+c(failed(schemes_failed,[scc=7,cr=eval_ideaCfbEncrypt_bb12_in/1])),1+c(failed(schemes_failed,[scc=0,cr=eval_ideaCfbEncrypt_bb2_in/1]))]) 

  * LOOPS eval_ideaCfbEncrypt_bb0_in(B) -> eval_ideaCfbEncrypt_bb0_in(C)

  * Ranking function: N/A

  * Invariants eval_ideaCfbEncrypt_bb0_in(A) -> eval_ideaCfbEncrypt_bb0_in(B)

     entry  : []
     non-rec: [A=B]
     rec    : [0=1]
     inv    : [A=B]

CRS loop_cont_eval_ideaCfbEncrypt_bb5_in(A,B,C)

  * Non Asymptotic Upper Bound: 2+c(failed(schemes_failed,[scc=6,cr=eval_ideaCfbEncrypt_bb8_in/1]))+c(failed(schemes_failed,[scc=7,cr=eval_ideaCfbEncrypt_bb12_in/1])) 

  * LOOPS loop_cont_eval_ideaCfbEncrypt_bb5_in(D,E,F) -> loop_cont_eval_ideaCfbEncrypt_bb5_in(G,H,I)

  * Ranking function: N/A

  * Invariants loop_cont_eval_ideaCfbEncrypt_bb5_in(A,B,C) -> loop_cont_eval_ideaCfbEncrypt_bb5_in(D,E,F)

     entry  : []
     non-rec: [A=D,B=E,C=F]
     rec    : [0=1]
     inv    : [A=D,B=E,C=F]

CRS loop_cont_eval_ideaCfbEncrypt_bb8_in(A,B,C)

  * Non Asymptotic Upper Bound: 1+c(failed(schemes_failed,[scc=7,cr=eval_ideaCfbEncrypt_bb12_in/1])) 

  * LOOPS loop_cont_eval_ideaCfbEncrypt_bb8_in(D,E,F) -> loop_cont_eval_ideaCfbEncrypt_bb8_in(G,H,I)

  * Ranking function: N/A

  * Invariants loop_cont_eval_ideaCfbEncrypt_bb8_in(A,B,C) -> loop_cont_eval_ideaCfbEncrypt_bb8_in(D,E,F)

     entry  : []
     non-rec: [A=D,B=E,C=F]
     rec    : [0=1]
     inv    : [A=D,B=E,C=F]

CRS eval_ideaCfbEncrypt_45(A)

  * Non Asymptotic Upper Bound: 1+c(failed(schemes_failed,[scc=7,cr=eval_ideaCfbEncrypt_bb12_in/1])) 

  * LOOPS eval_ideaCfbEncrypt_45(B) -> eval_ideaCfbEncrypt_45(C)

  * Ranking function: N/A

  * Invariants eval_ideaCfbEncrypt_45(A) -> eval_ideaCfbEncrypt_45(B)

     entry  : []
     non-rec: [A=B]
     rec    : [0=1]
     inv    : [A=B]

CRS eval_ideaCfbEncrypt_46(A)

  * Non Asymptotic Upper Bound: 1+c(failed(schemes_failed,[scc=7,cr=eval_ideaCfbEncrypt_bb12_in/1])) 

  * LOOPS eval_ideaCfbEncrypt_46(B) -> eval_ideaCfbEncrypt_46(C)

  * Ranking function: N/A

  * Invariants eval_ideaCfbEncrypt_46(A) -> eval_ideaCfbEncrypt_46(B)

     entry  : []
     non-rec: [A=B]
     rec    : [0=1]
     inv    : [A=B]

CRS eval_ideaCfbEncrypt_47(A)

  * Non Asymptotic Upper Bound: 1+c(failed(schemes_failed,[scc=7,cr=eval_ideaCfbEncrypt_bb12_in/1])) 

  * LOOPS eval_ideaCfbEncrypt_47(B) -> eval_ideaCfbEncrypt_47(C)

  * Ranking function: N/A

  * Invariants eval_ideaCfbEncrypt_47(A) -> eval_ideaCfbEncrypt_47(B)

     entry  : []
     non-rec: [A=B]
     rec    : [0=1]
     inv    : [A=B]

CRS loop_cont_eval_ideaCfbEncrypt_bb12_in(A,B)

  * Non Asymptotic Upper Bound: 0 

  * LOOPS loop_cont_eval_ideaCfbEncrypt_bb12_in(C,D) -> loop_cont_eval_ideaCfbEncrypt_bb12_in(E,F)

  * Ranking function: N/A

  * Invariants loop_cont_eval_ideaCfbEncrypt_bb12_in(A,B) -> loop_cont_eval_ideaCfbEncrypt_bb12_in(C,D)

     entry  : []
     non-rec: [A=C,B=D]
     rec    : [0=1]
     inv    : [A=C,B=D]

CRS eval_ideaCfbEncrypt_bb12_in(A)

  * Non Asymptotic Upper Bound: c(failed(schemes_failed,[scc=7,cr=eval_ideaCfbEncrypt_bb12_in/1])) 

  * LOOPS eval_ideaCfbEncrypt_bb12_in(B) -> eval_ideaCfbEncrypt_bb12_in(C)
     - [B=C+1,0>=B]
     - [B=C+1,B>=2]

  * Ranking function: c(failed(no_rf,[scc=7,cr=eval_ideaCfbEncrypt_bb12_in/1]))

  * Invariants eval_ideaCfbEncrypt_bb12_in(A) -> eval_ideaCfbEncrypt_bb12_in(B)

     entry  : []
     non-rec: [A=B]
     rec    : [A>=B+1]
     inv    : [A>=B]

CRS eval_ideaCfbEncrypt_bb8_in(A)

  * Non Asymptotic Upper Bound: c(failed(schemes_failed,[scc=6,cr=eval_ideaCfbEncrypt_bb8_in/1])) 

  * LOOPS eval_ideaCfbEncrypt_bb8_in(B) -> eval_ideaCfbEncrypt_bb8_in(C)
     - [B>=9]

  * Ranking function: c(failed(no_rf,[scc=6,cr=eval_ideaCfbEncrypt_bb8_in/1]))

  * Invariants eval_ideaCfbEncrypt_bb8_in(A) -> eval_ideaCfbEncrypt_bb8_in(B)

     entry  : []
     non-rec: [A=B]
     rec    : [A>=9]
     inv    : []

CRS eval_ideaCfbEncrypt_bb10_in(A,B,C)

  * Non Asymptotic Upper Bound: c(failed(schemes_failed,[scc=5,cr=eval_ideaCfbEncrypt_bb10_in/3])) 

  * LOOPS eval_ideaCfbEncrypt_bb10_in(D,E,F) -> eval_ideaCfbEncrypt_bb10_in(G,H,I)
     - [F=I+1,E=H,D=G,0>=I+1]
     - [F=I+1,E=H,D=G,I>=1]

  * Ranking function: c(failed(no_rf,[scc=5,cr=eval_ideaCfbEncrypt_bb10_in/3]))

  * Invariants eval_ideaCfbEncrypt_bb10_in(A,B,C) -> eval_ideaCfbEncrypt_bb10_in(D,E,F)

     entry  : [A>=9,C=8,A=B+8]
     non-rec: [A=D,B=E,C=F,A>=9,C=8,A=B+8]
     rec    : [A=E+8,A=D,C=8,A=B+8,A>=9,7>=F]
     inv    : [8>=F,A>=9,C=8,A=D,A=E+8,A=B+8]

CRS loop_cont_eval_ideaCfbEncrypt_bb2_in(A,B)

  * Non Asymptotic Upper Bound: 0 

  * LOOPS loop_cont_eval_ideaCfbEncrypt_bb2_in(C,D) -> loop_cont_eval_ideaCfbEncrypt_bb2_in(E,F)

  * Ranking function: N/A

  * Invariants loop_cont_eval_ideaCfbEncrypt_bb2_in(A,B) -> loop_cont_eval_ideaCfbEncrypt_bb2_in(C,D)

     entry  : []
     non-rec: [A=C,B=D]
     rec    : [0=1]
     inv    : [A=C,B=D]

CRS eval_ideaCfbEncrypt_bb13_in

  * Non Asymptotic Upper Bound: 0 

  * LOOPS eval_ideaCfbEncrypt_bb13_in -> eval_ideaCfbEncrypt_bb13_in

  * Ranking function: N/A

  * Invariants eval_ideaCfbEncrypt_bb13_in -> eval_ideaCfbEncrypt_bb13_in

     entry  : []
     non-rec: []
     rec    : [0=1]
     inv    : []

CRS eval_ideaCfbEncrypt_bb5_in(A,B)

  * Non Asymptotic Upper Bound: c(failed(schemes_failed,[scc=1,cr=eval_ideaCfbEncrypt_bb5_in/2])) 

  * LOOPS eval_ideaCfbEncrypt_bb5_in(C,D) -> eval_ideaCfbEncrypt_bb5_in(E,F)
     - [C=E,D=F+1,0>=F+2]
     - [C=E,D=F+1,F>=0]

  * Ranking function: c(failed(no_rf,[scc=1,cr=eval_ideaCfbEncrypt_bb5_in/2]))

  * Invariants eval_ideaCfbEncrypt_bb5_in(A,B) -> eval_ideaCfbEncrypt_bb5_in(C,D)

     entry  : []
     non-rec: [A=C,B=D]
     rec    : [A=C,B>=D+1]
     inv    : [B>=D,A=C]

CRS eval_ideaCfbEncrypt_bb2_in(A)

  * Non Asymptotic Upper Bound: c(failed(schemes_failed,[scc=0,cr=eval_ideaCfbEncrypt_bb2_in/1])) 

  * LOOPS eval_ideaCfbEncrypt_bb2_in(B) -> eval_ideaCfbEncrypt_bb2_in(C)
     - [B=C+1,0>=C+2]
     - [B=C+1,C>=0]

  * Ranking function: c(failed(no_rf,[scc=0,cr=eval_ideaCfbEncrypt_bb2_in/1]))

  * Invariants eval_ideaCfbEncrypt_bb2_in(A) -> eval_ideaCfbEncrypt_bb2_in(B)

     entry  : []
     non-rec: [A=B]
     rec    : [A>=B+1]
     inv    : [A>=B]



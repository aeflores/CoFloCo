This is PUBS, version 0.2.
Copyright (C) 2007, 2008, 2009 UPM, UCM.
This program comes with ABSOLUTELY NO WARRANTY.
This is free software, and you are welcome to
redistribute it under certain conditions.



CRS $pubs_aux_entry$(A,B,C,D) -- THE MAIN ENTRY

  * Non Asymptotic Upper Bound: 1+c(failed(schemes_failed,[scc=0,cr=eval_trueRandEvent_bb3_in/2])) 

  * LOOPS $pubs_aux_entry$(E,F,G,H) -> $pubs_aux_entry$(I,J,K,L)

  * Ranking function: N/A

  * Invariants $pubs_aux_entry$(A,B,C,D) -> $pubs_aux_entry$(E,F,G,H)

     entry  : []
     non-rec: [A=E,B=F,C=G,D=H]
     rec    : [0=1]
     inv    : [A=E,B=F,C=G,D=H]

CRS eval_trueRandEvent_start(A,B,C,D)

  * Non Asymptotic Upper Bound: 1+c(failed(schemes_failed,[scc=0,cr=eval_trueRandEvent_bb3_in/2])) 

  * LOOPS eval_trueRandEvent_start(E,F,G,H) -> eval_trueRandEvent_start(I,J,K,L)

  * Ranking function: N/A

  * Invariants eval_trueRandEvent_start(A,B,C,D) -> eval_trueRandEvent_start(E,F,G,H)

     entry  : []
     non-rec: [A=E,B=F,C=G,D=H]
     rec    : [0=1]
     inv    : [A=E,B=F,C=G,D=H]

CRS eval_trueRandEvent_bb0_in(A,B,C)

  * Non Asymptotic Upper Bound: 1+c(failed(schemes_failed,[scc=0,cr=eval_trueRandEvent_bb3_in/2])) 

  * LOOPS eval_trueRandEvent_bb0_in(D,E,F) -> eval_trueRandEvent_bb0_in(G,H,I)

  * Ranking function: N/A

  * Invariants eval_trueRandEvent_bb0_in(A,B,C) -> eval_trueRandEvent_bb0_in(D,E,F)

     entry  : []
     non-rec: [A=D,B=E,C=F]
     rec    : [0=1]
     inv    : [A=D,B=E,C=F]

CRS eval_trueRandEvent_1(A,B,C)

  * Non Asymptotic Upper Bound: 1+c(failed(schemes_failed,[scc=0,cr=eval_trueRandEvent_bb3_in/2])) 

  * LOOPS eval_trueRandEvent_1(D,E,F) -> eval_trueRandEvent_1(G,H,I)

  * Ranking function: N/A

  * Invariants eval_trueRandEvent_1(A,B,C) -> eval_trueRandEvent_1(D,E,F)

     entry  : []
     non-rec: [A=D,B=E,C=F]
     rec    : [0=1]
     inv    : [A=D,B=E,C=F]

CRS eval_trueRandEvent_2(A,B,C,D)

  * Non Asymptotic Upper Bound: 1+c(failed(schemes_failed,[scc=0,cr=eval_trueRandEvent_bb3_in/2])) 

  * LOOPS eval_trueRandEvent_2(E,F,G,H) -> eval_trueRandEvent_2(I,J,K,L)

  * Ranking function: N/A

  * Invariants eval_trueRandEvent_2(A,B,C,D) -> eval_trueRandEvent_2(E,F,G,H)

     entry  : []
     non-rec: [A=E,B=F,C=G,D=H]
     rec    : [0=1]
     inv    : [A=E,B=F,C=G,D=H]

CRS eval_trueRandEvent_3(A,B)

  * Non Asymptotic Upper Bound: 1+c(failed(schemes_failed,[scc=0,cr=eval_trueRandEvent_bb3_in/2])) 

  * LOOPS eval_trueRandEvent_3(C,D) -> eval_trueRandEvent_3(E,F)

  * Ranking function: N/A

  * Invariants eval_trueRandEvent_3(A,B) -> eval_trueRandEvent_3(C,D)

     entry  : []
     non-rec: [A=C,B=D]
     rec    : [0=1]
     inv    : [A=C,B=D]

CRS eval_trueRandEvent_bb2_in(A,B)

  * Non Asymptotic Upper Bound: 1+c(failed(schemes_failed,[scc=0,cr=eval_trueRandEvent_bb3_in/2])) 

  * LOOPS eval_trueRandEvent_bb2_in(C,D) -> eval_trueRandEvent_bb2_in(E,F)

  * Ranking function: N/A

  * Invariants eval_trueRandEvent_bb2_in(A,B) -> eval_trueRandEvent_bb2_in(C,D)

     entry  : []
     non-rec: [A=C,B=D]
     rec    : [0=1]
     inv    : [A=C,B=D]

CRS loop_cont_eval_trueRandEvent_bb3_in(A,B)

  * Non Asymptotic Upper Bound: 0 

  * LOOPS loop_cont_eval_trueRandEvent_bb3_in(C,D) -> loop_cont_eval_trueRandEvent_bb3_in(E,F)

  * Ranking function: N/A

  * Invariants loop_cont_eval_trueRandEvent_bb3_in(A,B) -> loop_cont_eval_trueRandEvent_bb3_in(C,D)

     entry  : []
     non-rec: [A=C,B=D]
     rec    : [0=1]
     inv    : [A=C,B=D]

CRS eval_trueRandEvent_bb6_in

  * Non Asymptotic Upper Bound: 0 

  * LOOPS eval_trueRandEvent_bb6_in -> eval_trueRandEvent_bb6_in

  * Ranking function: N/A

  * Invariants eval_trueRandEvent_bb6_in -> eval_trueRandEvent_bb6_in

     entry  : []
     non-rec: []
     rec    : [0=1]
     inv    : []

CRS eval_trueRandEvent_bb3_in(A,B)

  * Non Asymptotic Upper Bound: c(failed(schemes_failed,[scc=0,cr=eval_trueRandEvent_bb3_in/2])) 

  * LOOPS eval_trueRandEvent_bb3_in(C,D) -> eval_trueRandEvent_bb3_in(E,F)
     - [C+1=E,0>=D+1]
     - [C+1=E,D>=1]

  * Ranking function: c(failed(no_rf,[scc=0,cr=eval_trueRandEvent_bb3_in/2]))

  * Invariants eval_trueRandEvent_bb3_in(A,B) -> eval_trueRandEvent_bb3_in(C,D)

     entry  : [A=0]
     non-rec: [A=C,B=D,A=0]
     rec    : [A=0,C>=1]
     inv    : [C>=0,A=0]



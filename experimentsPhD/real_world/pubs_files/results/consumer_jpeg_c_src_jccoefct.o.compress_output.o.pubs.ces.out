This is PUBS, version 0.2.
Copyright (C) 2007, 2008, 2009 UPM, UCM.
This program comes with ABSOLUTELY NO WARRANTY.
This is free software, and you are welcome to
redistribute it under certain conditions.



CRS $pubs_aux_entry$ -- THE MAIN ENTRY

  * Non Asymptotic Upper Bound: 2+c(failed(schemes_failed,[scc=0,cr=eval_compress_output_bb1_in/1]))+c(failed(schemes_failed,[scc=5,cr=eval_compress_output_bb4_in/1])) 

  * LOOPS $pubs_aux_entry$ -> $pubs_aux_entry$

  * Ranking function: N/A

  * Invariants $pubs_aux_entry$ -> $pubs_aux_entry$

     entry  : []
     non-rec: []
     rec    : [0=1]
     inv    : []

CRS eval_compress_output_start

  * Non Asymptotic Upper Bound: 2+c(failed(schemes_failed,[scc=0,cr=eval_compress_output_bb1_in/1]))+c(failed(schemes_failed,[scc=5,cr=eval_compress_output_bb4_in/1])) 

  * LOOPS eval_compress_output_start -> eval_compress_output_start

  * Ranking function: N/A

  * Invariants eval_compress_output_start -> eval_compress_output_start

     entry  : []
     non-rec: []
     rec    : [0=1]
     inv    : []

CRS eval_compress_output_bb0_in

  * Non Asymptotic Upper Bound: 2+c(failed(schemes_failed,[scc=0,cr=eval_compress_output_bb1_in/1]))+c(failed(schemes_failed,[scc=5,cr=eval_compress_output_bb4_in/1])) 

  * LOOPS eval_compress_output_bb0_in -> eval_compress_output_bb0_in

  * Ranking function: N/A

  * Invariants eval_compress_output_bb0_in -> eval_compress_output_bb0_in

     entry  : []
     non-rec: []
     rec    : [0=1]
     inv    : []

CRS loop_cont_eval_compress_output_bb1_in(A,B,C)

  * Non Asymptotic Upper Bound: 1+c(failed(schemes_failed,[scc=5,cr=eval_compress_output_bb4_in/1])) 

  * LOOPS loop_cont_eval_compress_output_bb1_in(D,E,F) -> loop_cont_eval_compress_output_bb1_in(G,H,I)

  * Ranking function: N/A

  * Invariants loop_cont_eval_compress_output_bb1_in(A,B,C) -> loop_cont_eval_compress_output_bb1_in(D,E,F)

     entry  : []
     non-rec: [A=D,B=E,C=F]
     rec    : [0=1]
     inv    : [A=D,B=E,C=F]

CRS loop_cont_eval_compress_output_bb4_in(A,B)

  * Non Asymptotic Upper Bound: 0 

  * LOOPS loop_cont_eval_compress_output_bb4_in(C,D) -> loop_cont_eval_compress_output_bb4_in(E,F)

  * Ranking function: N/A

  * Invariants loop_cont_eval_compress_output_bb4_in(A,B) -> loop_cont_eval_compress_output_bb4_in(C,D)

     entry  : []
     non-rec: [A=C,B=D]
     rec    : [0=1]
     inv    : [A=C,B=D]

CRS eval_compress_output_59

  * Non Asymptotic Upper Bound: 0 

  * LOOPS eval_compress_output_59 -> eval_compress_output_59

  * Ranking function: N/A

  * Invariants eval_compress_output_59 -> eval_compress_output_59

     entry  : []
     non-rec: []
     rec    : [0=1]
     inv    : []

CRS eval_compress_output_60

  * Non Asymptotic Upper Bound: 0 

  * LOOPS eval_compress_output_60 -> eval_compress_output_60

  * Ranking function: N/A

  * Invariants eval_compress_output_60 -> eval_compress_output_60

     entry  : []
     non-rec: []
     rec    : [0=1]
     inv    : []

CRS eval_compress_output_bb20_in

  * Non Asymptotic Upper Bound: 0 

  * LOOPS eval_compress_output_bb20_in -> eval_compress_output_bb20_in

  * Ranking function: N/A

  * Invariants eval_compress_output_bb20_in -> eval_compress_output_bb20_in

     entry  : []
     non-rec: []
     rec    : [0=1]
     inv    : []

CRS eval_compress_output_bb4_in(A)

  * Non Asymptotic Upper Bound: c(failed(schemes_failed,[scc=5,cr=eval_compress_output_bb4_in/1])) 

  * LOOPS eval_compress_output_bb4_in(B) -> eval_compress_output_bb4_in(C)
     - []

  * Ranking function: c(failed(no_rf,[scc=5,cr=eval_compress_output_bb4_in/1]))

  * Invariants eval_compress_output_bb4_in(A) -> eval_compress_output_bb4_in(B)

     entry  : []
     non-rec: [A=B]
     rec    : []
     inv    : []

CRS eval_compress_output_bb6_in(A,B)

  * Non Asymptotic Upper Bound: c(failed(schemes_failed,[scc=4,cr=eval_compress_output_bb6_in/2])) 

  * LOOPS eval_compress_output_bb6_in(C,D) -> eval_compress_output_bb6_in(E,F)
     - []

  * Ranking function: c(failed(no_rf,[scc=4,cr=eval_compress_output_bb6_in/2]))

  * Invariants eval_compress_output_bb6_in(A,B) -> eval_compress_output_bb6_in(C,D)

     entry  : []
     non-rec: [A=C,B=D]
     rec    : []
     inv    : []

CRS eval_compress_output_bb7_in(A,B,C)

  * Non Asymptotic Upper Bound: c(failed(schemes_failed,[scc=3,cr=eval_compress_output_bb7_in/3])) 

  * LOOPS eval_compress_output_bb7_in(D,E,F) -> eval_compress_output_bb7_in(G,H,I)
     - []

  * Ranking function: c(failed(no_rf,[scc=3,cr=eval_compress_output_bb7_in/3]))

  * Invariants eval_compress_output_bb7_in(A,B,C) -> eval_compress_output_bb7_in(D,E,F)

     entry  : [C=0]
     non-rec: [A=D,B=E,C=F,C=0]
     rec    : [C=0]
     inv    : [C=0]

CRS eval_compress_output_bb9_in(A,B,C,D)

  * Non Asymptotic Upper Bound: c(failed(schemes_failed,[scc=2,cr=eval_compress_output_bb9_in/4])) 

  * LOOPS eval_compress_output_bb9_in(E,F,G,H) -> eval_compress_output_bb9_in(I,J,K,L)
     - []

  * Ranking function: c(failed(no_rf,[scc=2,cr=eval_compress_output_bb9_in/4]))

  * Invariants eval_compress_output_bb9_in(A,B,C,D) -> eval_compress_output_bb9_in(E,F,G,H)

     entry  : [D=0]
     non-rec: [A=E,B=F,C=G,D=H,D=0]
     rec    : [D=0]
     inv    : [D=0]

CRS eval_compress_output_bb11_in(A,B,C,D,E)

  * Non Asymptotic Upper Bound: c(failed(schemes_failed,[scc=1,cr=eval_compress_output_bb11_in/5])) 

  * LOOPS eval_compress_output_bb11_in(F,G,H,I,J) -> eval_compress_output_bb11_in(K,L,M,N,O)
     - [J+1=O,F=K,G=L,H=M,I=N]

  * Ranking function: c(failed(no_rf,[scc=1,cr=eval_compress_output_bb11_in/5]))

  * Invariants eval_compress_output_bb11_in(A,B,C,D,E) -> eval_compress_output_bb11_in(F,G,H,I,J)

     entry  : [E=0]
     non-rec: [A=F,B=G,C=H,D=I,E=J,E=0]
     rec    : [D=I,C=H,B=G,A=F,E=0,J>=1]
     inv    : [J>=0,A=F,B=G,C=H,D=I,E=0]

CRS eval_compress_output_bb1_in(A)

  * Non Asymptotic Upper Bound: c(failed(schemes_failed,[scc=0,cr=eval_compress_output_bb1_in/1])) 

  * LOOPS eval_compress_output_bb1_in(B) -> eval_compress_output_bb1_in(C)
     - [B+1=C]

  * Ranking function: c(failed(no_rf,[scc=0,cr=eval_compress_output_bb1_in/1]))

  * Invariants eval_compress_output_bb1_in(A) -> eval_compress_output_bb1_in(B)

     entry  : [A=0]
     non-rec: [A=B,A=0]
     rec    : [A=0,B>=1]
     inv    : [B>=0,A=0]



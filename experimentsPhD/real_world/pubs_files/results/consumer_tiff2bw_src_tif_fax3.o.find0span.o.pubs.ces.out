This is PUBS, version 0.2.
Copyright (C) 2007, 2008, 2009 UPM, UCM.
This program comes with ABSOLUTELY NO WARRANTY.
This is free software, and you are welcome to
redistribute it under certain conditions.



CRS $pubs_aux_entry$(A,B) -- THE MAIN ENTRY

  * Non Asymptotic Upper Bound: max([1+nat(-1*A+1*B)/8,3+c(failed(schemes_failed,[scc=3,cr=eval_find0span_bb5_in/1]))+nat(c(maximize_failed))/64+nat(c(maximize_failed))/8,1+nat(c(maximize_failed))/8,3+c(failed(schemes_failed,[scc=3,cr=eval_find0span_bb5_in/1]))+nat(c(maximize_failed))/64+nat(c(maximize_failed))/8,1+nat(c(maximize_failed))/8,3+c(failed(schemes_failed,[scc=3,cr=eval_find0span_bb5_in/1]))+nat(c(maximize_failed))/64+nat(c(maximize_failed))/8,3+c(failed(schemes_failed,[scc=3,cr=eval_find0span_bb5_in/1]))+nat(c(maximize_failed))/64+nat(c(maximize_failed))/8]) 

  * LOOPS $pubs_aux_entry$(C,D) -> $pubs_aux_entry$(E,F)

  * Ranking function: N/A

  * Invariants $pubs_aux_entry$(A,B) -> $pubs_aux_entry$(C,D)

     entry  : []
     non-rec: [A=C,B=D]
     rec    : [0=1]
     inv    : [A=C,B=D]

CRS eval_find0span_start(A,B)

  * Non Asymptotic Upper Bound: max([1+nat(-1*A+1*B)/8,3+c(failed(schemes_failed,[scc=3,cr=eval_find0span_bb5_in/1]))+nat(c(maximize_failed))/64+nat(c(maximize_failed))/8,1+nat(c(maximize_failed))/8,3+c(failed(schemes_failed,[scc=3,cr=eval_find0span_bb5_in/1]))+nat(c(maximize_failed))/64+nat(c(maximize_failed))/8,1+nat(c(maximize_failed))/8,3+c(failed(schemes_failed,[scc=3,cr=eval_find0span_bb5_in/1]))+nat(c(maximize_failed))/64+nat(c(maximize_failed))/8,3+c(failed(schemes_failed,[scc=3,cr=eval_find0span_bb5_in/1]))+nat(c(maximize_failed))/64+nat(c(maximize_failed))/8]) 

  * LOOPS eval_find0span_start(C,D) -> eval_find0span_start(E,F)

  * Ranking function: N/A

  * Invariants eval_find0span_start(A,B) -> eval_find0span_start(C,D)

     entry  : []
     non-rec: [A=C,B=D]
     rec    : [0=1]
     inv    : [A=C,B=D]

CRS eval_find0span_bb0_in(A,B)

  * Non Asymptotic Upper Bound: max([1+nat(-1*A+1*B)/8,3+c(failed(schemes_failed,[scc=3,cr=eval_find0span_bb5_in/1]))+nat(c(maximize_failed))/64+nat(c(maximize_failed))/8,1+nat(c(maximize_failed))/8,3+c(failed(schemes_failed,[scc=3,cr=eval_find0span_bb5_in/1]))+nat(c(maximize_failed))/64+nat(c(maximize_failed))/8,1+nat(c(maximize_failed))/8,3+c(failed(schemes_failed,[scc=3,cr=eval_find0span_bb5_in/1]))+nat(c(maximize_failed))/64+nat(c(maximize_failed))/8,3+c(failed(schemes_failed,[scc=3,cr=eval_find0span_bb5_in/1]))+nat(c(maximize_failed))/64+nat(c(maximize_failed))/8]) 

  * LOOPS eval_find0span_bb0_in(C,D) -> eval_find0span_bb0_in(E,F)

  * Ranking function: N/A

  * Invariants eval_find0span_bb0_in(A,B) -> eval_find0span_bb0_in(C,D)

     entry  : []
     non-rec: [A=C,B=D]
     rec    : [0=1]
     inv    : [A=C,B=D]

CRS eval_find0span_bb4_in(A)

  * Non Asymptotic Upper Bound: max([1+nat(1*A)/8,3+c(failed(schemes_failed,[scc=3,cr=eval_find0span_bb5_in/1]))+nat(c(maximize_failed))/64+nat(c(maximize_failed))/8]) 

  * LOOPS eval_find0span_bb4_in(B) -> eval_find0span_bb4_in(C)

  * Ranking function: N/A

  * Invariants eval_find0span_bb4_in(A) -> eval_find0span_bb4_in(B)

     entry  : []
     non-rec: [A=B]
     rec    : [0=1]
     inv    : [A=B]

CRS loop_cont_eval_find0span_bb5_in(A,B,C)

  * Non Asymptotic Upper Bound: 2+nat(1*B)/64+nat(c(maximize_failed))/8 

  * LOOPS loop_cont_eval_find0span_bb5_in(D,E,F) -> loop_cont_eval_find0span_bb5_in(G,H,I)

  * Ranking function: N/A

  * Invariants loop_cont_eval_find0span_bb5_in(A,B,C) -> loop_cont_eval_find0span_bb5_in(D,E,F)

     entry  : []
     non-rec: [A=D,B=E,C=F]
     rec    : [0=1]
     inv    : [A=D,B=E,C=F]

CRS loop_cont_eval_find0span_bb10_in(A,B,C)

  * Non Asymptotic Upper Bound: 1+nat(1*B)/8 

  * LOOPS loop_cont_eval_find0span_bb10_in(D,E,F) -> loop_cont_eval_find0span_bb10_in(G,H,I)

  * Ranking function: N/A

  * Invariants loop_cont_eval_find0span_bb10_in(A,B,C) -> loop_cont_eval_find0span_bb10_in(D,E,F)

     entry  : []
     non-rec: [A=D,B=E,C=F]
     rec    : [0=1]
     inv    : [A=D,B=E,C=F]

CRS eval_find0span__critedge_in(A)

  * Non Asymptotic Upper Bound: 1+nat(1*A)/8 

  * LOOPS eval_find0span__critedge_in(B) -> eval_find0span__critedge_in(C)

  * Ranking function: N/A

  * Invariants eval_find0span__critedge_in(A) -> eval_find0span__critedge_in(B)

     entry  : []
     non-rec: [A=B]
     rec    : [0=1]
     inv    : [A=B]

CRS eval_find0span_bb10_in(A)

  * Non Asymptotic Upper Bound: nat(A)/64 

  * LOOPS eval_find0span_bb10_in(B) -> eval_find0span_bb10_in(C)
     - [B=C+64,B>=64]

  * Ranking function: nat(B/64)

  * Invariants eval_find0span_bb10_in(A) -> eval_find0span_bb10_in(B)

     entry  : []
     non-rec: [A=B]
     rec    : [B>=0,A>=B+64]
     inv    : [A>=B]

CRS loop_cont_eval_find0span_bb13_in(A,B)

  * Non Asymptotic Upper Bound: 0 

  * LOOPS loop_cont_eval_find0span_bb13_in(C,D) -> loop_cont_eval_find0span_bb13_in(E,F)

  * Ranking function: N/A

  * Invariants loop_cont_eval_find0span_bb13_in(A,B) -> loop_cont_eval_find0span_bb13_in(C,D)

     entry  : []
     non-rec: [A=C,B=D]
     rec    : [0=1]
     inv    : [A=C,B=D]

CRS eval_find0span_bb5_in(A)

  * Non Asymptotic Upper Bound: c(failed(schemes_failed,[scc=3,cr=eval_find0span_bb5_in/1])) 

  * LOOPS eval_find0span_bb5_in(B) -> eval_find0span_bb5_in(C)
     - [B=C+8]

  * Ranking function: c(failed(no_rf,[scc=3,cr=eval_find0span_bb5_in/1]))

  * Invariants eval_find0span_bb5_in(A) -> eval_find0span_bb5_in(B)

     entry  : []
     non-rec: [A=B]
     rec    : [A>=B+8]
     inv    : [A>=B]

CRS eval_find0span_bb13_in(A)

  * Non Asymptotic Upper Bound: nat(A)/8 

  * LOOPS eval_find0span_bb13_in(B) -> eval_find0span_bb13_in(C)
     - [B=C+8,B>=8]

  * Ranking function: nat(B/8)

  * Invariants eval_find0span_bb13_in(A) -> eval_find0span_bb13_in(B)

     entry  : []
     non-rec: [A=B]
     rec    : [B>=0,A>=B+8]
     inv    : [A>=B]

CRS eval_find0span_bb19_in

  * Non Asymptotic Upper Bound: 0 

  * LOOPS eval_find0span_bb19_in -> eval_find0span_bb19_in

  * Ranking function: N/A

  * Invariants eval_find0span_bb19_in -> eval_find0span_bb19_in

     entry  : []
     non-rec: []
     rec    : [0=1]
     inv    : []



This is PUBS, version 0.2.
Copyright (C) 2007, 2008, 2009 UPM, UCM.
This program comes with ABSOLUTELY NO WARRANTY.
This is free software, and you are welcome to
redistribute it under certain conditions.



CRS $pubs_aux_entry$(A,B,C,D) -- THE MAIN ENTRY

  * Non Asymptotic Upper Bound: 1+c(failed(schemes_failed,[scc=0,cr=eval_gx_char_cache_alloc_bb1_in/1])) 

  * LOOPS $pubs_aux_entry$(E,F,G,H) -> $pubs_aux_entry$(I,J,K,L)

  * Ranking function: N/A

  * Invariants $pubs_aux_entry$(A,B,C,D) -> $pubs_aux_entry$(E,F,G,H)

     entry  : []
     non-rec: [A=E,B=F,C=G,D=H]
     rec    : [0=1]
     inv    : [A=E,B=F,C=G,D=H]

CRS eval_gx_char_cache_alloc_start(A,B,C,D)

  * Non Asymptotic Upper Bound: 1+c(failed(schemes_failed,[scc=0,cr=eval_gx_char_cache_alloc_bb1_in/1])) 

  * LOOPS eval_gx_char_cache_alloc_start(E,F,G,H) -> eval_gx_char_cache_alloc_start(I,J,K,L)

  * Ranking function: N/A

  * Invariants eval_gx_char_cache_alloc_start(A,B,C,D) -> eval_gx_char_cache_alloc_start(E,F,G,H)

     entry  : []
     non-rec: [A=E,B=F,C=G,D=H]
     rec    : [0=1]
     inv    : [A=E,B=F,C=G,D=H]

CRS eval_gx_char_cache_alloc_bb0_in(A)

  * Non Asymptotic Upper Bound: 1+c(failed(schemes_failed,[scc=0,cr=eval_gx_char_cache_alloc_bb1_in/1])) 

  * LOOPS eval_gx_char_cache_alloc_bb0_in(B) -> eval_gx_char_cache_alloc_bb0_in(C)

  * Ranking function: N/A

  * Invariants eval_gx_char_cache_alloc_bb0_in(A) -> eval_gx_char_cache_alloc_bb0_in(B)

     entry  : []
     non-rec: [A=B]
     rec    : [0=1]
     inv    : [A=B]

CRS loop_cont_eval_gx_char_cache_alloc_bb1_in(A,B,C)

  * Non Asymptotic Upper Bound: 0 

  * LOOPS loop_cont_eval_gx_char_cache_alloc_bb1_in(D,E,F) -> loop_cont_eval_gx_char_cache_alloc_bb1_in(G,H,I)

  * Ranking function: N/A

  * Invariants loop_cont_eval_gx_char_cache_alloc_bb1_in(A,B,C) -> loop_cont_eval_gx_char_cache_alloc_bb1_in(D,E,F)

     entry  : []
     non-rec: [A=D,B=E,C=F]
     rec    : [0=1]
     inv    : [A=D,B=E,C=F]

CRS eval_gx_char_cache_alloc_11(A)

  * Non Asymptotic Upper Bound: 0 

  * LOOPS eval_gx_char_cache_alloc_11(B) -> eval_gx_char_cache_alloc_11(C)

  * Ranking function: N/A

  * Invariants eval_gx_char_cache_alloc_11(A) -> eval_gx_char_cache_alloc_11(B)

     entry  : []
     non-rec: [A=B]
     rec    : [0=1]
     inv    : [A=B]

CRS eval_gx_char_cache_alloc_12(A)

  * Non Asymptotic Upper Bound: 0 

  * LOOPS eval_gx_char_cache_alloc_12(B) -> eval_gx_char_cache_alloc_12(C)

  * Ranking function: N/A

  * Invariants eval_gx_char_cache_alloc_12(A) -> eval_gx_char_cache_alloc_12(B)

     entry  : []
     non-rec: [A=B]
     rec    : [0=1]
     inv    : [A=B]

CRS eval_gx_char_cache_alloc_13(A)

  * Non Asymptotic Upper Bound: 0 

  * LOOPS eval_gx_char_cache_alloc_13(B) -> eval_gx_char_cache_alloc_13(C)

  * Ranking function: N/A

  * Invariants eval_gx_char_cache_alloc_13(A) -> eval_gx_char_cache_alloc_13(B)

     entry  : []
     non-rec: [A=B]
     rec    : [0=1]
     inv    : [A=B]

CRS eval_gx_char_cache_alloc_28

  * Non Asymptotic Upper Bound: 0 

  * LOOPS eval_gx_char_cache_alloc_28 -> eval_gx_char_cache_alloc_28

  * Ranking function: N/A

  * Invariants eval_gx_char_cache_alloc_28 -> eval_gx_char_cache_alloc_28

     entry  : []
     non-rec: []
     rec    : [0=1]
     inv    : []

CRS eval_gx_char_cache_alloc_29

  * Non Asymptotic Upper Bound: 0 

  * LOOPS eval_gx_char_cache_alloc_29 -> eval_gx_char_cache_alloc_29

  * Ranking function: N/A

  * Invariants eval_gx_char_cache_alloc_29 -> eval_gx_char_cache_alloc_29

     entry  : []
     non-rec: []
     rec    : [0=1]
     inv    : []

CRS eval_gx_char_cache_alloc_14

  * Non Asymptotic Upper Bound: 0 

  * LOOPS eval_gx_char_cache_alloc_14 -> eval_gx_char_cache_alloc_14

  * Ranking function: N/A

  * Invariants eval_gx_char_cache_alloc_14 -> eval_gx_char_cache_alloc_14

     entry  : []
     non-rec: []
     rec    : [0=1]
     inv    : []

CRS eval_gx_char_cache_alloc_15

  * Non Asymptotic Upper Bound: 0 

  * LOOPS eval_gx_char_cache_alloc_15 -> eval_gx_char_cache_alloc_15

  * Ranking function: N/A

  * Invariants eval_gx_char_cache_alloc_15 -> eval_gx_char_cache_alloc_15

     entry  : []
     non-rec: []
     rec    : [0=1]
     inv    : []

CRS eval_gx_char_cache_alloc_16

  * Non Asymptotic Upper Bound: 0 

  * LOOPS eval_gx_char_cache_alloc_16 -> eval_gx_char_cache_alloc_16

  * Ranking function: N/A

  * Invariants eval_gx_char_cache_alloc_16 -> eval_gx_char_cache_alloc_16

     entry  : []
     non-rec: []
     rec    : [0=1]
     inv    : []

CRS eval_gx_char_cache_alloc_bb6_in

  * Non Asymptotic Upper Bound: 0 

  * LOOPS eval_gx_char_cache_alloc_bb6_in -> eval_gx_char_cache_alloc_bb6_in

  * Ranking function: N/A

  * Invariants eval_gx_char_cache_alloc_bb6_in -> eval_gx_char_cache_alloc_bb6_in

     entry  : []
     non-rec: []
     rec    : [0=1]
     inv    : []

CRS eval_gx_char_cache_alloc_bb1_in(A)

  * Non Asymptotic Upper Bound: c(failed(schemes_failed,[scc=0,cr=eval_gx_char_cache_alloc_bb1_in/1])) 

  * LOOPS eval_gx_char_cache_alloc_bb1_in(B) -> eval_gx_char_cache_alloc_bb1_in(C)
     - [B=C]

  * Ranking function: c(failed(no_rf,[scc=0,cr=eval_gx_char_cache_alloc_bb1_in/1]))

  * Invariants eval_gx_char_cache_alloc_bb1_in(A) -> eval_gx_char_cache_alloc_bb1_in(B)

     entry  : []
     non-rec: [A=B]
     rec    : [A=B]
     inv    : [A=B]



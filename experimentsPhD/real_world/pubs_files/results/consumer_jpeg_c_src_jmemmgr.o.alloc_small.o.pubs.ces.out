This is PUBS, version 0.2.
Copyright (C) 2007, 2008, 2009 UPM, UCM.
This program comes with ABSOLUTELY NO WARRANTY.
This is free software, and you are welcome to
redistribute it under certain conditions.



CRS $pubs_aux_entry$(A,B) -- THE MAIN ENTRY

  * Non Asymptotic Upper Bound: 2+c(failed(schemes_failed,[scc=0,cr=eval_alloc_small_bb7_in/1]))+c(failed(schemes_failed,[scc=1,cr=eval_alloc_small_bb14_in/2])) 

  * LOOPS $pubs_aux_entry$(C,D) -> $pubs_aux_entry$(E,F)

  * Ranking function: N/A

  * Invariants $pubs_aux_entry$(A,B) -> $pubs_aux_entry$(C,D)

     entry  : []
     non-rec: [A=C,B=D]
     rec    : [0=1]
     inv    : [A=C,B=D]

CRS eval_alloc_small_start(A,B)

  * Non Asymptotic Upper Bound: 2+c(failed(schemes_failed,[scc=0,cr=eval_alloc_small_bb7_in/1]))+c(failed(schemes_failed,[scc=1,cr=eval_alloc_small_bb14_in/2])) 

  * LOOPS eval_alloc_small_start(C,D) -> eval_alloc_small_start(E,F)

  * Ranking function: N/A

  * Invariants eval_alloc_small_start(A,B) -> eval_alloc_small_start(C,D)

     entry  : []
     non-rec: [A=C,B=D]
     rec    : [0=1]
     inv    : [A=C,B=D]

CRS eval_alloc_small_bb0_in(A)

  * Non Asymptotic Upper Bound: 2+c(failed(schemes_failed,[scc=0,cr=eval_alloc_small_bb7_in/1]))+c(failed(schemes_failed,[scc=1,cr=eval_alloc_small_bb14_in/2])) 

  * LOOPS eval_alloc_small_bb0_in(B) -> eval_alloc_small_bb0_in(C)

  * Ranking function: N/A

  * Invariants eval_alloc_small_bb0_in(A) -> eval_alloc_small_bb0_in(B)

     entry  : []
     non-rec: [A=B]
     rec    : [0=1]
     inv    : [A=B]

CRS eval_alloc_small_0(A)

  * Non Asymptotic Upper Bound: 2+c(failed(schemes_failed,[scc=0,cr=eval_alloc_small_bb7_in/1]))+c(failed(schemes_failed,[scc=1,cr=eval_alloc_small_bb14_in/2])) 

  * LOOPS eval_alloc_small_0(B) -> eval_alloc_small_0(C)

  * Ranking function: N/A

  * Invariants eval_alloc_small_0(A) -> eval_alloc_small_0(B)

     entry  : []
     non-rec: [A=B]
     rec    : [0=1]
     inv    : [A=B]

CRS eval_alloc_small_1(A)

  * Non Asymptotic Upper Bound: 2+c(failed(schemes_failed,[scc=0,cr=eval_alloc_small_bb7_in/1]))+c(failed(schemes_failed,[scc=1,cr=eval_alloc_small_bb14_in/2])) 

  * LOOPS eval_alloc_small_1(B) -> eval_alloc_small_1(C)

  * Ranking function: N/A

  * Invariants eval_alloc_small_1(A) -> eval_alloc_small_1(B)

     entry  : []
     non-rec: [A=B]
     rec    : [0=1]
     inv    : [A=B]

CRS eval_alloc_small_bb2_in(A)

  * Non Asymptotic Upper Bound: 2+c(failed(schemes_failed,[scc=0,cr=eval_alloc_small_bb7_in/1]))+c(failed(schemes_failed,[scc=1,cr=eval_alloc_small_bb14_in/2])) 

  * LOOPS eval_alloc_small_bb2_in(B) -> eval_alloc_small_bb2_in(C)

  * Ranking function: N/A

  * Invariants eval_alloc_small_bb2_in(A) -> eval_alloc_small_bb2_in(B)

     entry  : []
     non-rec: [A=B]
     rec    : [0=1]
     inv    : [A=B]

CRS eval_alloc_small_bb4_in(A)

  * Non Asymptotic Upper Bound: 2+c(failed(schemes_failed,[scc=0,cr=eval_alloc_small_bb7_in/1]))+c(failed(schemes_failed,[scc=1,cr=eval_alloc_small_bb14_in/2])) 

  * LOOPS eval_alloc_small_bb4_in(B) -> eval_alloc_small_bb4_in(C)

  * Ranking function: N/A

  * Invariants eval_alloc_small_bb4_in(A) -> eval_alloc_small_bb4_in(B)

     entry  : []
     non-rec: [A=B]
     rec    : [0=1]
     inv    : [A=B]

CRS eval_alloc_small_9(A)

  * Non Asymptotic Upper Bound: 2+c(failed(schemes_failed,[scc=0,cr=eval_alloc_small_bb7_in/1]))+c(failed(schemes_failed,[scc=1,cr=eval_alloc_small_bb14_in/2])) 

  * LOOPS eval_alloc_small_9(B) -> eval_alloc_small_9(C)

  * Ranking function: N/A

  * Invariants eval_alloc_small_9(A) -> eval_alloc_small_9(B)

     entry  : []
     non-rec: [A=B]
     rec    : [0=1]
     inv    : [A=B]

CRS eval_alloc_small_10(A)

  * Non Asymptotic Upper Bound: 2+c(failed(schemes_failed,[scc=0,cr=eval_alloc_small_bb7_in/1]))+c(failed(schemes_failed,[scc=1,cr=eval_alloc_small_bb14_in/2])) 

  * LOOPS eval_alloc_small_10(B) -> eval_alloc_small_10(C)

  * Ranking function: N/A

  * Invariants eval_alloc_small_10(A) -> eval_alloc_small_10(B)

     entry  : []
     non-rec: [A=B]
     rec    : [0=1]
     inv    : [A=B]

CRS eval_alloc_small_bb6_in(A)

  * Non Asymptotic Upper Bound: 2+c(failed(schemes_failed,[scc=0,cr=eval_alloc_small_bb7_in/1]))+c(failed(schemes_failed,[scc=1,cr=eval_alloc_small_bb14_in/2])) 

  * LOOPS eval_alloc_small_bb6_in(B) -> eval_alloc_small_bb6_in(C)

  * Ranking function: N/A

  * Invariants eval_alloc_small_bb6_in(A) -> eval_alloc_small_bb6_in(B)

     entry  : []
     non-rec: [A=B]
     rec    : [0=1]
     inv    : [A=B]

CRS loop_cont_eval_alloc_small_bb7_in(A,B,C)

  * Non Asymptotic Upper Bound: 1+c(failed(schemes_failed,[scc=1,cr=eval_alloc_small_bb14_in/2])) 

  * LOOPS loop_cont_eval_alloc_small_bb7_in(D,E,F) -> loop_cont_eval_alloc_small_bb7_in(G,H,I)

  * Ranking function: N/A

  * Invariants loop_cont_eval_alloc_small_bb7_in(A,B,C) -> loop_cont_eval_alloc_small_bb7_in(D,E,F)

     entry  : []
     non-rec: [A=D,B=E,C=F]
     rec    : [0=1]
     inv    : [A=D,B=E,C=F]

CRS eval_alloc_small_bb10_in(A)

  * Non Asymptotic Upper Bound: 1+c(failed(schemes_failed,[scc=1,cr=eval_alloc_small_bb14_in/2])) 

  * LOOPS eval_alloc_small_bb10_in(B) -> eval_alloc_small_bb10_in(C)

  * Ranking function: N/A

  * Invariants eval_alloc_small_bb10_in(A) -> eval_alloc_small_bb10_in(B)

     entry  : []
     non-rec: [A=B]
     rec    : [0=1]
     inv    : [A=B]

CRS eval_alloc_small_bb13_in(A,B)

  * Non Asymptotic Upper Bound: 1+c(failed(schemes_failed,[scc=1,cr=eval_alloc_small_bb14_in/2])) 

  * LOOPS eval_alloc_small_bb13_in(C,D) -> eval_alloc_small_bb13_in(E,F)

  * Ranking function: N/A

  * Invariants eval_alloc_small_bb13_in(A,B) -> eval_alloc_small_bb13_in(C,D)

     entry  : []
     non-rec: [A=C,B=D]
     rec    : [0=1]
     inv    : [A=C,B=D]

CRS loop_cont_eval_alloc_small_bb14_in(A,B)

  * Non Asymptotic Upper Bound: 0 

  * LOOPS loop_cont_eval_alloc_small_bb14_in(C,D) -> loop_cont_eval_alloc_small_bb14_in(E,F)

  * Ranking function: N/A

  * Invariants loop_cont_eval_alloc_small_bb14_in(A,B) -> loop_cont_eval_alloc_small_bb14_in(C,D)

     entry  : []
     non-rec: [A=C,B=D]
     rec    : [0=1]
     inv    : [A=C,B=D]

CRS eval_alloc_small_bb20_in

  * Non Asymptotic Upper Bound: 0 

  * LOOPS eval_alloc_small_bb20_in -> eval_alloc_small_bb20_in

  * Ranking function: N/A

  * Invariants eval_alloc_small_bb20_in -> eval_alloc_small_bb20_in

     entry  : []
     non-rec: []
     rec    : [0=1]
     inv    : []

CRS eval_alloc_small_bb14_in(A,B)

  * Non Asymptotic Upper Bound: c(failed(schemes_failed,[scc=1,cr=eval_alloc_small_bb14_in/2])) 

  * LOOPS eval_alloc_small_bb14_in(C,D) -> eval_alloc_small_bb14_in(E,F)
     - [F=0,C=E,D=0]
     - [C=E,D>=2*F,2*F+1>=D,D>=1]
     - [C=E,D+1>=2*F,0>=D+1,2*F>=D]
     - [F=0,C=E,D=0]
     - [C=E,D>=2*F,2*F+1>=D,D>=1]
     - [C=E,D+1>=2*F,0>=D+1,2*F>=D]

  * Ranking function: c(failed(no_rf,[scc=1,cr=eval_alloc_small_bb14_in/2]))

  * Invariants eval_alloc_small_bb14_in(A,B) -> eval_alloc_small_bb14_in(C,D)

     entry  : []
     non-rec: [A=C,B=D]
     rec    : [A=C]
     inv    : [A=C]

CRS eval_alloc_small_bb7_in(A)

  * Non Asymptotic Upper Bound: c(failed(schemes_failed,[scc=0,cr=eval_alloc_small_bb7_in/1])) 

  * LOOPS eval_alloc_small_bb7_in(B) -> eval_alloc_small_bb7_in(C)
     - [B=C]

  * Ranking function: c(failed(no_rf,[scc=0,cr=eval_alloc_small_bb7_in/1]))

  * Invariants eval_alloc_small_bb7_in(A) -> eval_alloc_small_bb7_in(B)

     entry  : []
     non-rec: [A=B]
     rec    : [A=B]
     inv    : [A=B]



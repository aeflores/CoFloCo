This is PUBS, version 0.2.
Copyright (C) 2007, 2008, 2009 UPM, UCM.
This program comes with ABSOLUTELY NO WARRANTY.
This is free software, and you are welcome to
redistribute it under certain conditions.



CRS $pubs_aux_entry$(A) -- THE MAIN ENTRY

  * Non Asymptotic Upper Bound: 1+c(failed(schemes_failed,[scc=4,cr=eval_s_AXD_process_bb7_in/0])) 

  * LOOPS $pubs_aux_entry$(B) -> $pubs_aux_entry$(C)

  * Ranking function: N/A

  * Invariants $pubs_aux_entry$(A) -> $pubs_aux_entry$(B)

     entry  : []
     non-rec: [A=B]
     rec    : [0=1]
     inv    : [A=B]

CRS eval_s_AXD_process_start(A)

  * Non Asymptotic Upper Bound: 1+c(failed(schemes_failed,[scc=4,cr=eval_s_AXD_process_bb7_in/0])) 

  * LOOPS eval_s_AXD_process_start(B) -> eval_s_AXD_process_start(C)

  * Ranking function: N/A

  * Invariants eval_s_AXD_process_start(A) -> eval_s_AXD_process_start(B)

     entry  : []
     non-rec: [A=B]
     rec    : [0=1]
     inv    : [A=B]

CRS eval_s_AXD_process_bb0_in

  * Non Asymptotic Upper Bound: 1+c(failed(schemes_failed,[scc=4,cr=eval_s_AXD_process_bb7_in/0])) 

  * LOOPS eval_s_AXD_process_bb0_in -> eval_s_AXD_process_bb0_in

  * Ranking function: N/A

  * Invariants eval_s_AXD_process_bb0_in -> eval_s_AXD_process_bb0_in

     entry  : []
     non-rec: []
     rec    : [0=1]
     inv    : []

CRS eval_s_AXD_process_0

  * Non Asymptotic Upper Bound: 1+c(failed(schemes_failed,[scc=4,cr=eval_s_AXD_process_bb7_in/0])) 

  * LOOPS eval_s_AXD_process_0 -> eval_s_AXD_process_0

  * Ranking function: N/A

  * Invariants eval_s_AXD_process_0 -> eval_s_AXD_process_0

     entry  : []
     non-rec: []
     rec    : [0=1]
     inv    : []

CRS eval_s_AXD_process_1

  * Non Asymptotic Upper Bound: 1+c(failed(schemes_failed,[scc=4,cr=eval_s_AXD_process_bb7_in/0])) 

  * LOOPS eval_s_AXD_process_1 -> eval_s_AXD_process_1

  * Ranking function: N/A

  * Invariants eval_s_AXD_process_1 -> eval_s_AXD_process_1

     entry  : []
     non-rec: []
     rec    : [0=1]
     inv    : []

CRS eval_s_AXD_process_bb6_in

  * Non Asymptotic Upper Bound: 1+c(failed(schemes_failed,[scc=4,cr=eval_s_AXD_process_bb7_in/0])) 

  * LOOPS eval_s_AXD_process_bb6_in -> eval_s_AXD_process_bb6_in

  * Ranking function: N/A

  * Invariants eval_s_AXD_process_bb6_in -> eval_s_AXD_process_bb6_in

     entry  : []
     non-rec: []
     rec    : [0=1]
     inv    : []

CRS loop_cont_eval_s_AXD_process_bb7_in(A,B)

  * Non Asymptotic Upper Bound: 0 

  * LOOPS loop_cont_eval_s_AXD_process_bb7_in(C,D) -> loop_cont_eval_s_AXD_process_bb7_in(E,F)

  * Ranking function: N/A

  * Invariants loop_cont_eval_s_AXD_process_bb7_in(A,B) -> loop_cont_eval_s_AXD_process_bb7_in(C,D)

     entry  : []
     non-rec: [A=C,B=D]
     rec    : [0=1]
     inv    : [A=C,B=D]

CRS eval_s_AXD_process_bb7_in

  * Non Asymptotic Upper Bound: c(failed(schemes_failed,[scc=4,cr=eval_s_AXD_process_bb7_in/0])) 

  * LOOPS eval_s_AXD_process_bb7_in -> eval_s_AXD_process_bb7_in
     - []

  * Ranking function: c(failed(no_rf,[scc=4,cr=eval_s_AXD_process_bb7_in/0]))

  * Invariants eval_s_AXD_process_bb7_in -> eval_s_AXD_process_bb7_in

     entry  : []
     non-rec: []
     rec    : []
     inv    : []

CRS eval_s_AXD_process_bb11_in

  * Non Asymptotic Upper Bound: 0 

  * LOOPS eval_s_AXD_process_bb11_in -> eval_s_AXD_process_bb11_in

  * Ranking function: N/A

  * Invariants eval_s_AXD_process_bb11_in -> eval_s_AXD_process_bb11_in

     entry  : []
     non-rec: []
     rec    : [0=1]
     inv    : []

CRS eval_s_AXD_process_NewDefault_in

  * Non Asymptotic Upper Bound: 0 

  * LOOPS eval_s_AXD_process_NewDefault_in -> eval_s_AXD_process_NewDefault_in

  * Ranking function: N/A

  * Invariants eval_s_AXD_process_NewDefault_in -> eval_s_AXD_process_NewDefault_in

     entry  : []
     non-rec: []
     rec    : [0=1]
     inv    : []

CRS eval_s_AXD_process_bb15_in

  * Non Asymptotic Upper Bound: 0 

  * LOOPS eval_s_AXD_process_bb15_in -> eval_s_AXD_process_bb15_in

  * Ranking function: N/A

  * Invariants eval_s_AXD_process_bb15_in -> eval_s_AXD_process_bb15_in

     entry  : []
     non-rec: []
     rec    : [0=1]
     inv    : []



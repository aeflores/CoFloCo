This is PUBS, version 0.2.
Copyright (C) 2007, 2008, 2009 UPM, UCM.
This program comes with ABSOLUTELY NO WARRANTY.
This is free software, and you are welcome to
redistribute it under certain conditions.



CRS $pubs_aux_entry$ -- THE MAIN ENTRY

  * Non Asymptotic Upper Bound: max([1+c(failed(schemes_failed,[scc=1,cr=eval_unRLE_obuf_to_output_SMALL_bb32_in/0])),1+c(failed(schemes_failed,[scc=0,cr=eval_unRLE_obuf_to_output_SMALL_bb1_in/0]))]) 

  * LOOPS $pubs_aux_entry$ -> $pubs_aux_entry$

  * Ranking function: N/A

  * Invariants $pubs_aux_entry$ -> $pubs_aux_entry$

     entry  : []
     non-rec: []
     rec    : [0=1]
     inv    : []

CRS eval_unRLE_obuf_to_output_SMALL_start

  * Non Asymptotic Upper Bound: max([1+c(failed(schemes_failed,[scc=1,cr=eval_unRLE_obuf_to_output_SMALL_bb32_in/0])),1+c(failed(schemes_failed,[scc=0,cr=eval_unRLE_obuf_to_output_SMALL_bb1_in/0]))]) 

  * LOOPS eval_unRLE_obuf_to_output_SMALL_start -> eval_unRLE_obuf_to_output_SMALL_start

  * Ranking function: N/A

  * Invariants eval_unRLE_obuf_to_output_SMALL_start -> eval_unRLE_obuf_to_output_SMALL_start

     entry  : []
     non-rec: []
     rec    : [0=1]
     inv    : []

CRS eval_unRLE_obuf_to_output_SMALL_bb0_in

  * Non Asymptotic Upper Bound: max([1+c(failed(schemes_failed,[scc=1,cr=eval_unRLE_obuf_to_output_SMALL_bb32_in/0])),1+c(failed(schemes_failed,[scc=0,cr=eval_unRLE_obuf_to_output_SMALL_bb1_in/0]))]) 

  * LOOPS eval_unRLE_obuf_to_output_SMALL_bb0_in -> eval_unRLE_obuf_to_output_SMALL_bb0_in

  * Ranking function: N/A

  * Invariants eval_unRLE_obuf_to_output_SMALL_bb0_in -> eval_unRLE_obuf_to_output_SMALL_bb0_in

     entry  : []
     non-rec: []
     rec    : [0=1]
     inv    : []

CRS loop_cont_eval_unRLE_obuf_to_output_SMALL_bb32_in(A,B)

  * Non Asymptotic Upper Bound: 0 

  * LOOPS loop_cont_eval_unRLE_obuf_to_output_SMALL_bb32_in(C,D) -> loop_cont_eval_unRLE_obuf_to_output_SMALL_bb32_in(E,F)

  * Ranking function: N/A

  * Invariants loop_cont_eval_unRLE_obuf_to_output_SMALL_bb32_in(A,B) -> loop_cont_eval_unRLE_obuf_to_output_SMALL_bb32_in(C,D)

     entry  : []
     non-rec: [A=C,B=D]
     rec    : [0=1]
     inv    : [A=C,B=D]

CRS loop_cont_eval_unRLE_obuf_to_output_SMALL_bb1_in(A,B)

  * Non Asymptotic Upper Bound: 0 

  * LOOPS loop_cont_eval_unRLE_obuf_to_output_SMALL_bb1_in(C,D) -> loop_cont_eval_unRLE_obuf_to_output_SMALL_bb1_in(E,F)

  * Ranking function: N/A

  * Invariants loop_cont_eval_unRLE_obuf_to_output_SMALL_bb1_in(A,B) -> loop_cont_eval_unRLE_obuf_to_output_SMALL_bb1_in(C,D)

     entry  : []
     non-rec: [A=C,B=D]
     rec    : [0=1]
     inv    : [A=C,B=D]

CRS eval_unRLE_obuf_to_output_SMALL_bb36_in

  * Non Asymptotic Upper Bound: 0 

  * LOOPS eval_unRLE_obuf_to_output_SMALL_bb36_in -> eval_unRLE_obuf_to_output_SMALL_bb36_in

  * Ranking function: N/A

  * Invariants eval_unRLE_obuf_to_output_SMALL_bb36_in -> eval_unRLE_obuf_to_output_SMALL_bb36_in

     entry  : []
     non-rec: []
     rec    : [0=1]
     inv    : []

CRS eval_unRLE_obuf_to_output_SMALL_bb32_in

  * Non Asymptotic Upper Bound: c(failed(schemes_failed,[scc=1,cr=eval_unRLE_obuf_to_output_SMALL_bb32_in/0])) 

  * LOOPS eval_unRLE_obuf_to_output_SMALL_bb32_in -> eval_unRLE_obuf_to_output_SMALL_bb32_in
     - []
     - []
     - []
     - []
     - []

  * Ranking function: c(failed(no_rf,[scc=1,cr=eval_unRLE_obuf_to_output_SMALL_bb32_in/0]))

  * Invariants eval_unRLE_obuf_to_output_SMALL_bb32_in -> eval_unRLE_obuf_to_output_SMALL_bb32_in

     entry  : []
     non-rec: []
     rec    : []
     inv    : []

CRS eval_unRLE_obuf_to_output_SMALL_bb1_in

  * Non Asymptotic Upper Bound: c(failed(schemes_failed,[scc=0,cr=eval_unRLE_obuf_to_output_SMALL_bb1_in/0])) 

  * LOOPS eval_unRLE_obuf_to_output_SMALL_bb1_in -> eval_unRLE_obuf_to_output_SMALL_bb1_in
     - []
     - []
     - []
     - []
     - []

  * Ranking function: c(failed(no_rf,[scc=0,cr=eval_unRLE_obuf_to_output_SMALL_bb1_in/0]))

  * Invariants eval_unRLE_obuf_to_output_SMALL_bb1_in -> eval_unRLE_obuf_to_output_SMALL_bb1_in

     entry  : []
     non-rec: []
     rec    : []
     inv    : []



This is PUBS, version 0.2.
Copyright (C) 2007, 2008, 2009 UPM, UCM.
This program comes with ABSOLUTELY NO WARRANTY.
This is free software, and you are welcome to
redistribute it under certain conditions.



CRS $pubs_aux_entry$(A,B) -- THE MAIN ENTRY

  * Non Asymptotic Upper Bound: max([1+4*nat(-A+B)+2*nat(-A+B)*nat(-A+B),2+4*nat(-A+B-3)+nat(-1*A+1*B)*nat(-1*A+1*B+ -3)/2+4*nat(-A+B)+2*nat(-A+B)*nat(-A+B)]) 

  * LOOPS $pubs_aux_entry$(C,D) -> $pubs_aux_entry$(E,F)

  * Ranking function: N/A

  * Invariants $pubs_aux_entry$(A,B) -> $pubs_aux_entry$(C,D)

     entry  : []
     non-rec: [A=C,B=D]
     rec    : [0=1]
     inv    : [A=C,B=D]

CRS eval_fallbackSimpleSort_start(A,B)

  * Non Asymptotic Upper Bound: max([1+4*nat(-A+B)+2*nat(-A+B)*nat(-A+B),2+4*nat(-A+B-3)+nat(-1*A+1*B)*nat(-1*A+1*B+ -3)/2+4*nat(-A+B)+2*nat(-A+B)*nat(-A+B)]) 

  * LOOPS eval_fallbackSimpleSort_start(C,D) -> eval_fallbackSimpleSort_start(E,F)

  * Ranking function: N/A

  * Invariants eval_fallbackSimpleSort_start(A,B) -> eval_fallbackSimpleSort_start(C,D)

     entry  : []
     non-rec: [A=C,B=D]
     rec    : [0=1]
     inv    : [A=C,B=D]

CRS eval_fallbackSimpleSort_bb0_in(A,B)

  * Non Asymptotic Upper Bound: max([1+4*nat(-A+B)+2*nat(-A+B)*nat(-A+B),2+4*nat(-A+B-3)+nat(-1*A+1*B)*nat(-1*A+1*B+ -3)/2+4*nat(-A+B)+2*nat(-A+B)*nat(-A+B)]) 

  * LOOPS eval_fallbackSimpleSort_bb0_in(C,D) -> eval_fallbackSimpleSort_bb0_in(E,F)

  * Ranking function: N/A

  * Invariants eval_fallbackSimpleSort_bb0_in(A,B) -> eval_fallbackSimpleSort_bb0_in(C,D)

     entry  : []
     non-rec: [A=C,B=D]
     rec    : [0=1]
     inv    : [A=C,B=D]

CRS loop_cont_eval_fallbackSimpleSort_bb3_in(A,B,C,D)

  * Non Asymptotic Upper Bound: 1+4*nat(-B+C)+2*nat(-B+C)*nat(-B+C) 

  * LOOPS loop_cont_eval_fallbackSimpleSort_bb3_in(E,F,G,H) -> loop_cont_eval_fallbackSimpleSort_bb3_in(I,J,K,L)

  * Ranking function: N/A

  * Invariants loop_cont_eval_fallbackSimpleSort_bb3_in(A,B,C,D) -> loop_cont_eval_fallbackSimpleSort_bb3_in(E,F,G,H)

     entry  : [A=4]
     non-rec: [A=E,B=F,C=G,D=H,A=4]
     rec    : [0=1]
     inv    : [A=4,E=4,B=F,C=G,D=H]

CRS eval_fallbackSimpleSort_bb9_in(A,B)

  * Non Asymptotic Upper Bound: 1+4*nat(-A+B)+2*nat(-A+B)*nat(-A+B) 

  * LOOPS eval_fallbackSimpleSort_bb9_in(C,D) -> eval_fallbackSimpleSort_bb9_in(E,F)

  * Ranking function: N/A

  * Invariants eval_fallbackSimpleSort_bb9_in(A,B) -> eval_fallbackSimpleSort_bb9_in(C,D)

     entry  : []
     non-rec: [A=C,B=D]
     rec    : [0=1]
     inv    : [A=C,B=D]

CRS loop_cont_eval_fallbackSimpleSort_bb10_in(A,B)

  * Non Asymptotic Upper Bound: 0 

  * LOOPS loop_cont_eval_fallbackSimpleSort_bb10_in(C,D) -> loop_cont_eval_fallbackSimpleSort_bb10_in(E,F)

  * Ranking function: N/A

  * Invariants loop_cont_eval_fallbackSimpleSort_bb10_in(A,B) -> loop_cont_eval_fallbackSimpleSort_bb10_in(C,D)

     entry  : [A=5]
     non-rec: [A=C,B=D,A=5]
     rec    : [0=1]
     inv    : [A=5,C=5,B=D]

CRS eval_fallbackSimpleSort_bb10_in(A,B,C)

  * Non Asymptotic Upper Bound: 4*nat(-A+C+1)+2*nat(-A+B)*nat(-A+C+1) 

  * LOOPS eval_fallbackSimpleSort_bb10_in(D,E,F) -> eval_fallbackSimpleSort_bb10_in(G,H,I)
     - [I+1>=D,D=G,E=H,F=I+1]
     - [I+1>=D,D=G,E=H,F=I+1]

  * Ranking function: nat(-D+F+1)

  * Invariants eval_fallbackSimpleSort_bb10_in(A,B,C) -> eval_fallbackSimpleSort_bb10_in(D,E,F)

     entry  : [B=C+1]
     non-rec: [A=D,B=E,C=F,B=C+1]
     rec    : [B=E,A=D,B=C+1,F+1>=A,B>=F+2]
     inv    : [B>=F+1,A=D,B=E,B=C+1]

CRS eval_fallbackSimpleSort_bb12_in(A,B,C,D)

  * Non Asymptotic Upper Bound: nat(B-D) 

  * LOOPS eval_fallbackSimpleSort_bb12_in(E,F,G,H) -> eval_fallbackSimpleSort_bb12_in(I,J,K,L)
     - [H+1=L,F=J,G=K,E=I,F>=L]

  * Ranking function: nat(F-H)

  * Invariants eval_fallbackSimpleSort_bb12_in(A,B,C,D) -> eval_fallbackSimpleSort_bb12_in(E,F,G,H)

     entry  : [B>=C+1,C>=A,C=D]
     non-rec: [A=E,B=F,C=G,D=H,B>=C+1,C>=A,C=D]
     rec    : [C=G,B=F,A=E,C=D,C>=A,B>=H,H>=C+1]
     inv    : [B>=C+1,B>=H,H>=C,C>=A,A=E,B=F,C=G,C=D]

CRS eval_fallbackSimpleSort_bb3_in(A,B,C)

  * Non Asymptotic Upper Bound: 4*nat(-A+C+1)+nat(-A+B)*nat(-A+C+1)/2 

  * LOOPS eval_fallbackSimpleSort_bb3_in(D,E,F) -> eval_fallbackSimpleSort_bb3_in(G,H,I)
     - [I+1>=D,D=G,E=H,F=I+1]
     - [I+1>=D,D=G,E=H,F=I+1]

  * Ranking function: nat(-D+F+1)

  * Invariants eval_fallbackSimpleSort_bb3_in(A,B,C) -> eval_fallbackSimpleSort_bb3_in(D,E,F)

     entry  : [B=C+4]
     non-rec: [A=D,B=E,C=F,B=C+4]
     rec    : [B=E,A=D,B=C+4,F+1>=A,B>=F+5]
     inv    : [B>=F+4,A=D,B=E,B=C+4]

CRS eval_fallbackSimpleSort_bb5_in(A,B,C,D)

  * Non Asymptotic Upper Bound: nat(B-D)/4 

  * LOOPS eval_fallbackSimpleSort_bb5_in(E,F,G,H) -> eval_fallbackSimpleSort_bb5_in(I,J,K,L)
     - [H+4=L,F=J,G=K,E=I,F>=L]

  * Ranking function: nat(F/4-H/4)

  * Invariants eval_fallbackSimpleSort_bb5_in(A,B,C,D) -> eval_fallbackSimpleSort_bb5_in(E,F,G,H)

     entry  : [B>=D+4,D>=A,C=D]
     non-rec: [A=E,B=F,C=G,D=H,B>=D+4,D>=A,C=D]
     rec    : [C=G,B=F,A=E,C=D,C>=A,B>=H,H>=C+4]
     inv    : [B>=C+4,B>=H,H>=C,C>=A,A=E,B=F,C=G,C=D]

CRS eval_fallbackSimpleSort_bb16_in

  * Non Asymptotic Upper Bound: 0 

  * LOOPS eval_fallbackSimpleSort_bb16_in -> eval_fallbackSimpleSort_bb16_in

  * Ranking function: N/A

  * Invariants eval_fallbackSimpleSort_bb16_in -> eval_fallbackSimpleSort_bb16_in

     entry  : []
     non-rec: []
     rec    : [0=1]
     inv    : []



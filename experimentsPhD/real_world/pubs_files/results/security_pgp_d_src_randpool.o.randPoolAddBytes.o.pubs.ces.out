This is PUBS, version 0.2.
Copyright (C) 2007, 2008, 2009 UPM, UCM.
This program comes with ABSOLUTELY NO WARRANTY.
This is free software, and you are welcome to
redistribute it under certain conditions.



CRS $pubs_aux_entry$(A,B,C) -- THE MAIN ENTRY

  * Non Asymptotic Upper Bound: 1+c(failed(schemes_failed,[scc=0,cr=eval_randPoolAddBytes_bb1_in/3])) 

  * LOOPS $pubs_aux_entry$(D,E,F) -> $pubs_aux_entry$(G,H,I)

  * Ranking function: N/A

  * Invariants $pubs_aux_entry$(A,B,C) -> $pubs_aux_entry$(D,E,F)

     entry  : []
     non-rec: [A=D,B=E,C=F]
     rec    : [0=1]
     inv    : [A=D,B=E,C=F]

CRS eval_randPoolAddBytes_start(A,B,C)

  * Non Asymptotic Upper Bound: 1+c(failed(schemes_failed,[scc=0,cr=eval_randPoolAddBytes_bb1_in/3])) 

  * LOOPS eval_randPoolAddBytes_start(D,E,F) -> eval_randPoolAddBytes_start(G,H,I)

  * Ranking function: N/A

  * Invariants eval_randPoolAddBytes_start(A,B,C) -> eval_randPoolAddBytes_start(D,E,F)

     entry  : []
     non-rec: [A=D,B=E,C=F]
     rec    : [0=1]
     inv    : [A=D,B=E,C=F]

CRS eval_randPoolAddBytes_bb0_in(A,B,C)

  * Non Asymptotic Upper Bound: 1+c(failed(schemes_failed,[scc=0,cr=eval_randPoolAddBytes_bb1_in/3])) 

  * LOOPS eval_randPoolAddBytes_bb0_in(D,E,F) -> eval_randPoolAddBytes_bb0_in(G,H,I)

  * Ranking function: N/A

  * Invariants eval_randPoolAddBytes_bb0_in(A,B,C) -> eval_randPoolAddBytes_bb0_in(D,E,F)

     entry  : []
     non-rec: [A=D,B=E,C=F]
     rec    : [0=1]
     inv    : [A=D,B=E,C=F]

CRS loop_cont_eval_randPoolAddBytes_bb1_in(A,B,C,D,E)

  * Non Asymptotic Upper Bound: 0 

  * LOOPS loop_cont_eval_randPoolAddBytes_bb1_in(F,G,H,I,J) -> loop_cont_eval_randPoolAddBytes_bb1_in(K,L,M,N,O)

  * Ranking function: N/A

  * Invariants loop_cont_eval_randPoolAddBytes_bb1_in(A,B,C,D,E) -> loop_cont_eval_randPoolAddBytes_bb1_in(F,G,H,I,J)

     entry  : []
     non-rec: [A=F,B=G,C=H,D=I,E=J]
     rec    : [0=1]
     inv    : [A=F,B=G,C=H,D=I,E=J]

CRS eval_randPoolAddBytes_14(A,B,C)

  * Non Asymptotic Upper Bound: 0 

  * LOOPS eval_randPoolAddBytes_14(D,E,F) -> eval_randPoolAddBytes_14(G,H,I)

  * Ranking function: N/A

  * Invariants eval_randPoolAddBytes_14(A,B,C) -> eval_randPoolAddBytes_14(D,E,F)

     entry  : []
     non-rec: [A=D,B=E,C=F]
     rec    : [0=1]
     inv    : [A=D,B=E,C=F]

CRS eval_randPoolAddBytes_15(A,B)

  * Non Asymptotic Upper Bound: 0 

  * LOOPS eval_randPoolAddBytes_15(C,D) -> eval_randPoolAddBytes_15(E,F)

  * Ranking function: N/A

  * Invariants eval_randPoolAddBytes_15(A,B) -> eval_randPoolAddBytes_15(C,D)

     entry  : []
     non-rec: [A=C,B=D]
     rec    : [0=1]
     inv    : [A=C,B=D]

CRS eval_randPoolAddBytes_bb5_in

  * Non Asymptotic Upper Bound: 0 

  * LOOPS eval_randPoolAddBytes_bb5_in -> eval_randPoolAddBytes_bb5_in

  * Ranking function: N/A

  * Invariants eval_randPoolAddBytes_bb5_in -> eval_randPoolAddBytes_bb5_in

     entry  : []
     non-rec: []
     rec    : [0=1]
     inv    : []

CRS eval_randPoolAddBytes_bb1_in(A,B,C)

  * Non Asymptotic Upper Bound: c(failed(schemes_failed,[scc=0,cr=eval_randPoolAddBytes_bb1_in/3])) 

  * LOOPS eval_randPoolAddBytes_bb1_in(D,E,F) -> eval_randPoolAddBytes_bb1_in(G,H,I)
     - [D+F=I+768,D=G,E=H,D+F>=769]

  * Ranking function: c(failed(no_rf,[scc=0,cr=eval_randPoolAddBytes_bb1_in/3]))

  * Invariants eval_randPoolAddBytes_bb1_in(A,B,C) -> eval_randPoolAddBytes_bb1_in(D,E,F)

     entry  : []
     non-rec: [A=D,B=E,C=F]
     rec    : [F>=1,A+C>=769,B=E,A=D]
     inv    : [B=E,A=D]



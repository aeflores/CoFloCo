This is PUBS, version 0.2.
Copyright (C) 2007, 2008, 2009 UPM, UCM.
This program comes with ABSOLUTELY NO WARRANTY.
This is free software, and you are welcome to
redistribute it under certain conditions.



CRS $pubs_aux_entry$(A) -- THE MAIN ENTRY

  * Non Asymptotic Upper Bound: 1+c(failed(schemes_failed,[scc=0,cr=eval_BZ2_indexIntoF_bb1_in/2])) 

  * LOOPS $pubs_aux_entry$(B) -> $pubs_aux_entry$(C)

  * Ranking function: N/A

  * Invariants $pubs_aux_entry$(A) -> $pubs_aux_entry$(B)

     entry  : []
     non-rec: [A=B]
     rec    : [0=1]
     inv    : [A=B]

CRS eval_BZ2_indexIntoF_start(A)

  * Non Asymptotic Upper Bound: 1+c(failed(schemes_failed,[scc=0,cr=eval_BZ2_indexIntoF_bb1_in/2])) 

  * LOOPS eval_BZ2_indexIntoF_start(B) -> eval_BZ2_indexIntoF_start(C)

  * Ranking function: N/A

  * Invariants eval_BZ2_indexIntoF_start(A) -> eval_BZ2_indexIntoF_start(B)

     entry  : []
     non-rec: [A=B]
     rec    : [0=1]
     inv    : [A=B]

CRS eval_BZ2_indexIntoF_bb0_in

  * Non Asymptotic Upper Bound: 1+c(failed(schemes_failed,[scc=0,cr=eval_BZ2_indexIntoF_bb1_in/2])) 

  * LOOPS eval_BZ2_indexIntoF_bb0_in -> eval_BZ2_indexIntoF_bb0_in

  * Ranking function: N/A

  * Invariants eval_BZ2_indexIntoF_bb0_in -> eval_BZ2_indexIntoF_bb0_in

     entry  : []
     non-rec: []
     rec    : [0=1]
     inv    : []

CRS loop_cont_eval_BZ2_indexIntoF_bb1_in(A,B)

  * Non Asymptotic Upper Bound: 0 

  * LOOPS loop_cont_eval_BZ2_indexIntoF_bb1_in(C,D) -> loop_cont_eval_BZ2_indexIntoF_bb1_in(E,F)

  * Ranking function: N/A

  * Invariants loop_cont_eval_BZ2_indexIntoF_bb1_in(A,B) -> loop_cont_eval_BZ2_indexIntoF_bb1_in(C,D)

     entry  : []
     non-rec: [A=C,B=D]
     rec    : [0=1]
     inv    : [A=C,B=D]

CRS eval_BZ2_indexIntoF_bb1_in(A,B)

  * Non Asymptotic Upper Bound: c(failed(schemes_failed,[scc=0,cr=eval_BZ2_indexIntoF_bb1_in/2])) 

  * LOOPS eval_BZ2_indexIntoF_bb1_in(C,D) -> eval_BZ2_indexIntoF_bb1_in(E,F)
     - [C=E,F>=C]
     - [C=E,C>=F+2]
     - [C=E,D=F,F>=C]
     - [D=F,C=E,C>=F+2]
     - [E=F]
     - [D=F,D>=E]
     - [D=F,E>=D+2]

  * Ranking function: c(failed(no_rf,[scc=0,cr=eval_BZ2_indexIntoF_bb1_in/2]))

  * Invariants eval_BZ2_indexIntoF_bb1_in(A,B) -> eval_BZ2_indexIntoF_bb1_in(C,D)

     entry  : [B=0,A=256]
     non-rec: [A=C,B=D,B=0,A=256]
     rec    : [B=0,A=256]
     inv    : [B=0,A=256]



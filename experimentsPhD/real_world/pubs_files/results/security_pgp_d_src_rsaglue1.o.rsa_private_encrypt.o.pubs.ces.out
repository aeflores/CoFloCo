This is PUBS, version 0.2.
Copyright (C) 2007, 2008, 2009 UPM, UCM.
This program comes with ABSOLUTELY NO WARRANTY.
This is free software, and you are welcome to
redistribute it under certain conditions.



CRS $pubs_aux_entry$(A,B) -- THE MAIN ENTRY

  * Non Asymptotic Upper Bound: 1+nat(c(maximize_failed)) 

  * LOOPS $pubs_aux_entry$(C,D) -> $pubs_aux_entry$(E,F)

  * Ranking function: N/A

  * Invariants $pubs_aux_entry$(A,B) -> $pubs_aux_entry$(C,D)

     entry  : []
     non-rec: [A=C,B=D]
     rec    : [0=1]
     inv    : [A=C,B=D]

CRS eval_rsa_private_encrypt_start(A,B)

  * Non Asymptotic Upper Bound: 1+nat(c(maximize_failed)) 

  * LOOPS eval_rsa_private_encrypt_start(C,D) -> eval_rsa_private_encrypt_start(E,F)

  * Ranking function: N/A

  * Invariants eval_rsa_private_encrypt_start(A,B) -> eval_rsa_private_encrypt_start(C,D)

     entry  : []
     non-rec: [A=C,B=D]
     rec    : [0=1]
     inv    : [A=C,B=D]

CRS eval_rsa_private_encrypt_bb0_in(A,B)

  * Non Asymptotic Upper Bound: 1+nat(c(maximize_failed)) 

  * LOOPS eval_rsa_private_encrypt_bb0_in(C,D) -> eval_rsa_private_encrypt_bb0_in(E,F)

  * Ranking function: N/A

  * Invariants eval_rsa_private_encrypt_bb0_in(A,B) -> eval_rsa_private_encrypt_bb0_in(C,D)

     entry  : []
     non-rec: [A=C,B=D]
     rec    : [0=1]
     inv    : [A=C,B=D]

CRS eval_rsa_private_encrypt_4(A,B,C)

  * Non Asymptotic Upper Bound: 1+nat(c(maximize_failed)) 

  * LOOPS eval_rsa_private_encrypt_4(D,E,F) -> eval_rsa_private_encrypt_4(G,H,I)

  * Ranking function: N/A

  * Invariants eval_rsa_private_encrypt_4(A,B,C) -> eval_rsa_private_encrypt_4(D,E,F)

     entry  : []
     non-rec: [A=D,B=E,C=F]
     rec    : [0=1]
     inv    : [A=D,B=E,C=F]

CRS eval_rsa_private_encrypt_5(A,B)

  * Non Asymptotic Upper Bound: 1+nat(c(maximize_failed)) 

  * LOOPS eval_rsa_private_encrypt_5(C,D) -> eval_rsa_private_encrypt_5(E,F)

  * Ranking function: N/A

  * Invariants eval_rsa_private_encrypt_5(A,B) -> eval_rsa_private_encrypt_5(C,D)

     entry  : []
     non-rec: [A=C,B=D]
     rec    : [0=1]
     inv    : [A=C,B=D]

CRS eval_rsa_private_encrypt_6(A,B)

  * Non Asymptotic Upper Bound: 1+nat(c(maximize_failed)) 

  * LOOPS eval_rsa_private_encrypt_6(C,D) -> eval_rsa_private_encrypt_6(E,F)

  * Ranking function: N/A

  * Invariants eval_rsa_private_encrypt_6(A,B) -> eval_rsa_private_encrypt_6(C,D)

     entry  : []
     non-rec: [A=C,B=D]
     rec    : [0=1]
     inv    : [A=C,B=D]

CRS eval_rsa_private_encrypt_7(A,B)

  * Non Asymptotic Upper Bound: 1+nat(c(maximize_failed)) 

  * LOOPS eval_rsa_private_encrypt_7(C,D) -> eval_rsa_private_encrypt_7(E,F)

  * Ranking function: N/A

  * Invariants eval_rsa_private_encrypt_7(A,B) -> eval_rsa_private_encrypt_7(C,D)

     entry  : []
     non-rec: [A=C,B=D]
     rec    : [0=1]
     inv    : [A=C,B=D]

CRS eval_rsa_private_encrypt_11(A,B,C)

  * Non Asymptotic Upper Bound: 1+nat(c(maximize_failed)) 

  * LOOPS eval_rsa_private_encrypt_11(D,E,F) -> eval_rsa_private_encrypt_11(G,H,I)

  * Ranking function: N/A

  * Invariants eval_rsa_private_encrypt_11(A,B,C) -> eval_rsa_private_encrypt_11(D,E,F)

     entry  : []
     non-rec: [A=D,B=E,C=F]
     rec    : [0=1]
     inv    : [A=D,B=E,C=F]

CRS eval_rsa_private_encrypt_12(A,B)

  * Non Asymptotic Upper Bound: 1+nat(c(maximize_failed)) 

  * LOOPS eval_rsa_private_encrypt_12(C,D) -> eval_rsa_private_encrypt_12(E,F)

  * Ranking function: N/A

  * Invariants eval_rsa_private_encrypt_12(A,B) -> eval_rsa_private_encrypt_12(C,D)

     entry  : []
     non-rec: [A=C,B=D]
     rec    : [0=1]
     inv    : [A=C,B=D]

CRS eval_rsa_private_encrypt_13(A,B)

  * Non Asymptotic Upper Bound: 1+nat(c(maximize_failed)) 

  * LOOPS eval_rsa_private_encrypt_13(C,D) -> eval_rsa_private_encrypt_13(E,F)

  * Ranking function: N/A

  * Invariants eval_rsa_private_encrypt_13(A,B) -> eval_rsa_private_encrypt_13(C,D)

     entry  : []
     non-rec: [A=C,B=D]
     rec    : [0=1]
     inv    : [A=C,B=D]

CRS eval_rsa_private_encrypt_14(A,B)

  * Non Asymptotic Upper Bound: 1+nat(c(maximize_failed)) 

  * LOOPS eval_rsa_private_encrypt_14(C,D) -> eval_rsa_private_encrypt_14(E,F)

  * Ranking function: N/A

  * Invariants eval_rsa_private_encrypt_14(A,B) -> eval_rsa_private_encrypt_14(C,D)

     entry  : []
     non-rec: [A=C,B=D]
     rec    : [0=1]
     inv    : [A=C,B=D]

CRS eval_rsa_private_encrypt_15(A,B)

  * Non Asymptotic Upper Bound: 1+nat(c(maximize_failed)) 

  * LOOPS eval_rsa_private_encrypt_15(C,D) -> eval_rsa_private_encrypt_15(E,F)

  * Ranking function: N/A

  * Invariants eval_rsa_private_encrypt_15(A,B) -> eval_rsa_private_encrypt_15(C,D)

     entry  : []
     non-rec: [A=C,B=D]
     rec    : [0=1]
     inv    : [A=C,B=D]

CRS loop_cont_eval_rsa_private_encrypt_bb1_in(A,B,C,D,E)

  * Non Asymptotic Upper Bound: 0 

  * LOOPS loop_cont_eval_rsa_private_encrypt_bb1_in(F,G,H,I,J) -> loop_cont_eval_rsa_private_encrypt_bb1_in(K,L,M,N,O)

  * Ranking function: N/A

  * Invariants loop_cont_eval_rsa_private_encrypt_bb1_in(A,B,C,D,E) -> loop_cont_eval_rsa_private_encrypt_bb1_in(F,G,H,I,J)

     entry  : [3>=A,A>=2]
     non-rec: [A=F,B=G,C=H,D=I,E=J,3>=A,A>=2]
     rec    : [0=1]
     inv    : [A>=2,3>=A,A=F,B=G,C=H,D=I,E=J]

CRS eval_rsa_private_encrypt_35(A,B,C)

  * Non Asymptotic Upper Bound: 0 

  * LOOPS eval_rsa_private_encrypt_35(D,E,F) -> eval_rsa_private_encrypt_35(G,H,I)

  * Ranking function: N/A

  * Invariants eval_rsa_private_encrypt_35(A,B,C) -> eval_rsa_private_encrypt_35(D,E,F)

     entry  : []
     non-rec: [A=D,B=E,C=F]
     rec    : [0=1]
     inv    : [A=D,B=E,C=F]

CRS eval_rsa_private_encrypt_36(A,B)

  * Non Asymptotic Upper Bound: 0 

  * LOOPS eval_rsa_private_encrypt_36(C,D) -> eval_rsa_private_encrypt_36(E,F)

  * Ranking function: N/A

  * Invariants eval_rsa_private_encrypt_36(A,B) -> eval_rsa_private_encrypt_36(C,D)

     entry  : []
     non-rec: [A=C,B=D]
     rec    : [0=1]
     inv    : [A=C,B=D]

CRS eval_rsa_private_encrypt_38(A,B)

  * Non Asymptotic Upper Bound: 0 

  * LOOPS eval_rsa_private_encrypt_38(C,D) -> eval_rsa_private_encrypt_38(E,F)

  * Ranking function: N/A

  * Invariants eval_rsa_private_encrypt_38(A,B) -> eval_rsa_private_encrypt_38(C,D)

     entry  : []
     non-rec: [A=C,B=D]
     rec    : [0=1]
     inv    : [A=C,B=D]

CRS eval_rsa_private_encrypt_39(A,B)

  * Non Asymptotic Upper Bound: 0 

  * LOOPS eval_rsa_private_encrypt_39(C,D) -> eval_rsa_private_encrypt_39(E,F)

  * Ranking function: N/A

  * Invariants eval_rsa_private_encrypt_39(A,B) -> eval_rsa_private_encrypt_39(C,D)

     entry  : []
     non-rec: [A=C,B=D]
     rec    : [0=1]
     inv    : [A=C,B=D]

CRS eval_rsa_private_encrypt_40(A,B)

  * Non Asymptotic Upper Bound: 0 

  * LOOPS eval_rsa_private_encrypt_40(C,D) -> eval_rsa_private_encrypt_40(E,F)

  * Ranking function: N/A

  * Invariants eval_rsa_private_encrypt_40(A,B) -> eval_rsa_private_encrypt_40(C,D)

     entry  : []
     non-rec: [A=C,B=D]
     rec    : [0=1]
     inv    : [A=C,B=D]

CRS eval_rsa_private_encrypt_41(A)

  * Non Asymptotic Upper Bound: 0 

  * LOOPS eval_rsa_private_encrypt_41(B) -> eval_rsa_private_encrypt_41(C)

  * Ranking function: N/A

  * Invariants eval_rsa_private_encrypt_41(A) -> eval_rsa_private_encrypt_41(B)

     entry  : []
     non-rec: [A=B]
     rec    : [0=1]
     inv    : [A=B]

CRS eval_rsa_private_encrypt_45(A,B)

  * Non Asymptotic Upper Bound: 0 

  * LOOPS eval_rsa_private_encrypt_45(C,D) -> eval_rsa_private_encrypt_45(E,F)

  * Ranking function: N/A

  * Invariants eval_rsa_private_encrypt_45(A,B) -> eval_rsa_private_encrypt_45(C,D)

     entry  : []
     non-rec: [A=C,B=D]
     rec    : [0=1]
     inv    : [A=C,B=D]

CRS eval_rsa_private_encrypt_46(A)

  * Non Asymptotic Upper Bound: 0 

  * LOOPS eval_rsa_private_encrypt_46(B) -> eval_rsa_private_encrypt_46(C)

  * Ranking function: N/A

  * Invariants eval_rsa_private_encrypt_46(A) -> eval_rsa_private_encrypt_46(B)

     entry  : []
     non-rec: [A=B]
     rec    : [0=1]
     inv    : [A=B]

CRS eval_rsa_private_encrypt_47(A)

  * Non Asymptotic Upper Bound: 0 

  * LOOPS eval_rsa_private_encrypt_47(B) -> eval_rsa_private_encrypt_47(C)

  * Ranking function: N/A

  * Invariants eval_rsa_private_encrypt_47(A) -> eval_rsa_private_encrypt_47(B)

     entry  : []
     non-rec: [A=B]
     rec    : [0=1]
     inv    : [A=B]

CRS eval_rsa_private_encrypt_bb5_in(A)

  * Non Asymptotic Upper Bound: 0 

  * LOOPS eval_rsa_private_encrypt_bb5_in(B) -> eval_rsa_private_encrypt_bb5_in(C)

  * Ranking function: N/A

  * Invariants eval_rsa_private_encrypt_bb5_in(A) -> eval_rsa_private_encrypt_bb5_in(B)

     entry  : []
     non-rec: [A=B]
     rec    : [0=1]
     inv    : [A=B]

CRS eval_rsa_private_encrypt_49(A)

  * Non Asymptotic Upper Bound: 0 

  * LOOPS eval_rsa_private_encrypt_49(B) -> eval_rsa_private_encrypt_49(C)

  * Ranking function: N/A

  * Invariants eval_rsa_private_encrypt_49(A) -> eval_rsa_private_encrypt_49(B)

     entry  : []
     non-rec: [A=B]
     rec    : [0=1]
     inv    : [A=B]

CRS eval_rsa_private_encrypt_50

  * Non Asymptotic Upper Bound: 0 

  * LOOPS eval_rsa_private_encrypt_50 -> eval_rsa_private_encrypt_50

  * Ranking function: N/A

  * Invariants eval_rsa_private_encrypt_50 -> eval_rsa_private_encrypt_50

     entry  : []
     non-rec: []
     rec    : [0=1]
     inv    : []

CRS eval_rsa_private_encrypt_bb1_in(A,B,C,D)

  * Non Asymptotic Upper Bound: nat(D) 

  * LOOPS eval_rsa_private_encrypt_bb1_in(E,F,G,H) -> eval_rsa_private_encrypt_bb1_in(I,J,K,L)
     - [G=K,E=I,H=L+1,H>=1]

  * Ranking function: nat(H)

  * Invariants eval_rsa_private_encrypt_bb1_in(A,B,C,D) -> eval_rsa_private_encrypt_bb1_in(E,F,G,H)

     entry  : []
     non-rec: [A=E,B=F,C=G,D=H]
     rec    : [C=G,A=E,H>=0,D>=H+1]
     inv    : [D>=H,C=G,A=E]



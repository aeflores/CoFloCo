This is PUBS, version 0.2.
Copyright (C) 2007, 2008, 2009 UPM, UCM.
This program comes with ABSOLUTELY NO WARRANTY.
This is free software, and you are welcome to
redistribute it under certain conditions.



CRS $pubs_aux_entry$ -- THE MAIN ENTRY

  * Non Asymptotic Upper Bound: 2+nat(c(maximize_failed))+nat(c(maximize_failed)) 

  * LOOPS $pubs_aux_entry$ -> $pubs_aux_entry$

  * Ranking function: N/A

  * Invariants $pubs_aux_entry$ -> $pubs_aux_entry$

     entry  : []
     non-rec: []
     rec    : [0=1]
     inv    : []

CRS eval_getKeyHash_start

  * Non Asymptotic Upper Bound: 2+nat(c(maximize_failed))+nat(c(maximize_failed)) 

  * LOOPS eval_getKeyHash_start -> eval_getKeyHash_start

  * Ranking function: N/A

  * Invariants eval_getKeyHash_start -> eval_getKeyHash_start

     entry  : []
     non-rec: []
     rec    : [0=1]
     inv    : []

CRS eval_getKeyHash_bb0_in

  * Non Asymptotic Upper Bound: 2+nat(c(maximize_failed))+nat(c(maximize_failed)) 

  * LOOPS eval_getKeyHash_bb0_in -> eval_getKeyHash_bb0_in

  * Ranking function: N/A

  * Invariants eval_getKeyHash_bb0_in -> eval_getKeyHash_bb0_in

     entry  : []
     non-rec: []
     rec    : [0=1]
     inv    : []

CRS eval_getKeyHash_0

  * Non Asymptotic Upper Bound: 2+nat(c(maximize_failed))+nat(c(maximize_failed)) 

  * LOOPS eval_getKeyHash_0 -> eval_getKeyHash_0

  * Ranking function: N/A

  * Invariants eval_getKeyHash_0 -> eval_getKeyHash_0

     entry  : []
     non-rec: []
     rec    : [0=1]
     inv    : []

CRS eval_getKeyHash_1(A)

  * Non Asymptotic Upper Bound: 2+nat(A)+nat(c(maximize_failed)) 

  * LOOPS eval_getKeyHash_1(B) -> eval_getKeyHash_1(C)

  * Ranking function: N/A

  * Invariants eval_getKeyHash_1(A) -> eval_getKeyHash_1(B)

     entry  : []
     non-rec: [A=B]
     rec    : [0=1]
     inv    : [A=B]

CRS loop_cont_eval_getKeyHash_bb1_in(A,B,C)

  * Non Asymptotic Upper Bound: 1+nat(c(maximize_failed)) 

  * LOOPS loop_cont_eval_getKeyHash_bb1_in(D,E,F) -> loop_cont_eval_getKeyHash_bb1_in(G,H,I)

  * Ranking function: N/A

  * Invariants loop_cont_eval_getKeyHash_bb1_in(A,B,C) -> loop_cont_eval_getKeyHash_bb1_in(D,E,F)

     entry  : [B>=0,A=3]
     non-rec: [A=D,B=E,C=F,B>=0,A=3]
     rec    : [0=1]
     inv    : [B>=0,A=3,D=3,B=E,C=F]

CRS eval_getKeyHash_12(A)

  * Non Asymptotic Upper Bound: 1+nat(c(maximize_failed)) 

  * LOOPS eval_getKeyHash_12(B) -> eval_getKeyHash_12(C)

  * Ranking function: N/A

  * Invariants eval_getKeyHash_12(A) -> eval_getKeyHash_12(B)

     entry  : [A>=0]
     non-rec: [A=B,A>=0]
     rec    : [0=1]
     inv    : [A>=0,A=B]

CRS eval_getKeyHash_13(A,B)

  * Non Asymptotic Upper Bound: 1+nat(B) 

  * LOOPS eval_getKeyHash_13(C,D) -> eval_getKeyHash_13(E,F)

  * Ranking function: N/A

  * Invariants eval_getKeyHash_13(A,B) -> eval_getKeyHash_13(C,D)

     entry  : [A>=0]
     non-rec: [A=C,B=D,A>=0]
     rec    : [0=1]
     inv    : [A>=0,A=C,B=D]

CRS loop_cont_eval_getKeyHash_bb4_in(A,B,C)

  * Non Asymptotic Upper Bound: 0 

  * LOOPS loop_cont_eval_getKeyHash_bb4_in(D,E,F) -> loop_cont_eval_getKeyHash_bb4_in(G,H,I)

  * Ranking function: N/A

  * Invariants loop_cont_eval_getKeyHash_bb4_in(A,B,C) -> loop_cont_eval_getKeyHash_bb4_in(D,E,F)

     entry  : [B>=0,A=2]
     non-rec: [A=D,B=E,C=F,B>=0,A=2]
     rec    : [0=1]
     inv    : [B>=0,A=2,D=2,B=E,C=F]

CRS eval_getKeyHash_24(A)

  * Non Asymptotic Upper Bound: 0 

  * LOOPS eval_getKeyHash_24(B) -> eval_getKeyHash_24(C)

  * Ranking function: N/A

  * Invariants eval_getKeyHash_24(A) -> eval_getKeyHash_24(B)

     entry  : [A>=0]
     non-rec: [A=B,A>=0]
     rec    : [0=1]
     inv    : [A>=0,A=B]

CRS eval_getKeyHash_25(A)

  * Non Asymptotic Upper Bound: 0 

  * LOOPS eval_getKeyHash_25(B) -> eval_getKeyHash_25(C)

  * Ranking function: N/A

  * Invariants eval_getKeyHash_25(A) -> eval_getKeyHash_25(B)

     entry  : [A>=0]
     non-rec: [A=B,A>=0]
     rec    : [0=1]
     inv    : [A>=0,A=B]

CRS eval_getKeyHash_26

  * Non Asymptotic Upper Bound: 0 

  * LOOPS eval_getKeyHash_26 -> eval_getKeyHash_26

  * Ranking function: N/A

  * Invariants eval_getKeyHash_26 -> eval_getKeyHash_26

     entry  : []
     non-rec: []
     rec    : [0=1]
     inv    : []

CRS eval_getKeyHash_27

  * Non Asymptotic Upper Bound: 0 

  * LOOPS eval_getKeyHash_27 -> eval_getKeyHash_27

  * Ranking function: N/A

  * Invariants eval_getKeyHash_27 -> eval_getKeyHash_27

     entry  : []
     non-rec: []
     rec    : [0=1]
     inv    : []

CRS eval_getKeyHash_bb4_in(A,B,C)

  * Non Asymptotic Upper Bound: nat(A-C+2) 

  * LOOPS eval_getKeyHash_bb4_in(D,E,F) -> eval_getKeyHash_bb4_in(G,H,I)
     - [D=G,E+1=H,F+1=I,D+2>=I]

  * Ranking function: nat(D-F+2)

  * Invariants eval_getKeyHash_bb4_in(A,B,C) -> eval_getKeyHash_bb4_in(D,E,F)

     entry  : [B>=0,C=2]
     non-rec: [A=D,B=E,C=F,B>=0,C=2]
     rec    : [B+F=E+2,A=D,C=2,B>=0,A+B>=E,E>=B+1]
     inv    : [F>=2,B>=0,A=D,B+F=E+2,C=2]

CRS eval_getKeyHash_bb1_in(A,B,C)

  * Non Asymptotic Upper Bound: nat(A-B) 

  * LOOPS eval_getKeyHash_bb1_in(D,E,F) -> eval_getKeyHash_bb1_in(G,H,I)
     - [D=G,E+1=H,F+1=I,D+2>=I]

  * Ranking function: nat(D-F+2)

  * Invariants eval_getKeyHash_bb1_in(A,B,C) -> eval_getKeyHash_bb1_in(D,E,F)

     entry  : [C=2,B=0]
     non-rec: [A=D,B=E,C=F,C=2,B=0]
     rec    : [E+2=F,A=D,C=2,B=0,A>=E,E>=1]
     inv    : [F>=2,C=2,A=D,E+2=F,B=0]



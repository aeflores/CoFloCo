This is PUBS, version 0.2.
Copyright (C) 2007, 2008, 2009 UPM, UCM.
This program comes with ABSOLUTELY NO WARRANTY.
This is free software, and you are welcome to
redistribute it under certain conditions.



CRS $pubs_aux_entry$(A,B) -- THE MAIN ENTRY

  * Non Asymptotic Upper Bound: 1+c(failed(schemes_failed,[scc=0,cr=eval_randPoolGetBytes_bb1_in/2])) 

  * LOOPS $pubs_aux_entry$(C,D) -> $pubs_aux_entry$(E,F)

  * Ranking function: N/A

  * Invariants $pubs_aux_entry$(A,B) -> $pubs_aux_entry$(C,D)

     entry  : []
     non-rec: [A=C,B=D]
     rec    : [0=1]
     inv    : [A=C,B=D]

CRS eval_randPoolGetBytes_start(A,B)

  * Non Asymptotic Upper Bound: 1+c(failed(schemes_failed,[scc=0,cr=eval_randPoolGetBytes_bb1_in/2])) 

  * LOOPS eval_randPoolGetBytes_start(C,D) -> eval_randPoolGetBytes_start(E,F)

  * Ranking function: N/A

  * Invariants eval_randPoolGetBytes_start(A,B) -> eval_randPoolGetBytes_start(C,D)

     entry  : []
     non-rec: [A=C,B=D]
     rec    : [0=1]
     inv    : [A=C,B=D]

CRS eval_randPoolGetBytes_bb0_in(A,B)

  * Non Asymptotic Upper Bound: 1+c(failed(schemes_failed,[scc=0,cr=eval_randPoolGetBytes_bb1_in/2])) 

  * LOOPS eval_randPoolGetBytes_bb0_in(C,D) -> eval_randPoolGetBytes_bb0_in(E,F)

  * Ranking function: N/A

  * Invariants eval_randPoolGetBytes_bb0_in(A,B) -> eval_randPoolGetBytes_bb0_in(C,D)

     entry  : []
     non-rec: [A=C,B=D]
     rec    : [0=1]
     inv    : [A=C,B=D]

CRS loop_cont_eval_randPoolGetBytes_bb1_in(A,B,C,D,E)

  * Non Asymptotic Upper Bound: 0 

  * LOOPS loop_cont_eval_randPoolGetBytes_bb1_in(F,G,H,I,J) -> loop_cont_eval_randPoolGetBytes_bb1_in(K,L,M,N,O)

  * Ranking function: N/A

  * Invariants loop_cont_eval_randPoolGetBytes_bb1_in(A,B,C,D,E) -> loop_cont_eval_randPoolGetBytes_bb1_in(F,G,H,I,J)

     entry  : []
     non-rec: [A=F,B=G,C=H,D=I,E=J]
     rec    : [0=1]
     inv    : [A=F,B=G,C=H,D=I,E=J]

CRS eval_randPoolGetBytes_16(A,B,C)

  * Non Asymptotic Upper Bound: 0 

  * LOOPS eval_randPoolGetBytes_16(D,E,F) -> eval_randPoolGetBytes_16(G,H,I)

  * Ranking function: N/A

  * Invariants eval_randPoolGetBytes_16(A,B,C) -> eval_randPoolGetBytes_16(D,E,F)

     entry  : []
     non-rec: [A=D,B=E,C=F]
     rec    : [0=1]
     inv    : [A=D,B=E,C=F]

CRS eval_randPoolGetBytes_17(A,B)

  * Non Asymptotic Upper Bound: 0 

  * LOOPS eval_randPoolGetBytes_17(C,D) -> eval_randPoolGetBytes_17(E,F)

  * Ranking function: N/A

  * Invariants eval_randPoolGetBytes_17(A,B) -> eval_randPoolGetBytes_17(C,D)

     entry  : []
     non-rec: [A=C,B=D]
     rec    : [0=1]
     inv    : [A=C,B=D]

CRS eval_randPoolGetBytes_bb5_in

  * Non Asymptotic Upper Bound: 0 

  * LOOPS eval_randPoolGetBytes_bb5_in -> eval_randPoolGetBytes_bb5_in

  * Ranking function: N/A

  * Invariants eval_randPoolGetBytes_bb5_in -> eval_randPoolGetBytes_bb5_in

     entry  : []
     non-rec: []
     rec    : [0=1]
     inv    : []

CRS eval_randPoolGetBytes_bb1_in(A,B)

  * Non Asymptotic Upper Bound: c(failed(schemes_failed,[scc=0,cr=eval_randPoolGetBytes_bb1_in/2])) 

  * LOOPS eval_randPoolGetBytes_bb1_in(C,D) -> eval_randPoolGetBytes_bb1_in(E,F)
     - [C+D=F+768,C=E,C+D>=769]

  * Ranking function: c(failed(no_rf,[scc=0,cr=eval_randPoolGetBytes_bb1_in/2]))

  * Invariants eval_randPoolGetBytes_bb1_in(A,B) -> eval_randPoolGetBytes_bb1_in(C,D)

     entry  : []
     non-rec: [A=C,B=D]
     rec    : [D>=1,A+B>=769,A=C]
     inv    : [A=C]



This is PUBS, version 0.2.
Copyright (C) 2007, 2008, 2009 UPM, UCM.
This program comes with ABSOLUTELY NO WARRANTY.
This is free software, and you are welcome to
redistribute it under certain conditions.



CRS $pubs_aux_entry$(A,B) -- THE MAIN ENTRY

  * Non Asymptotic Upper Bound: 1+c(failed(schemes_failed,[scc=1,cr=eval_PackBitsDecode_bb1_in/2])) 

  * LOOPS $pubs_aux_entry$(C,D) -> $pubs_aux_entry$(E,F)

  * Ranking function: N/A

  * Invariants $pubs_aux_entry$(A,B) -> $pubs_aux_entry$(C,D)

     entry  : []
     non-rec: [A=C,B=D]
     rec    : [0=1]
     inv    : [A=C,B=D]

CRS eval_PackBitsDecode_start(A,B)

  * Non Asymptotic Upper Bound: 1+c(failed(schemes_failed,[scc=1,cr=eval_PackBitsDecode_bb1_in/2])) 

  * LOOPS eval_PackBitsDecode_start(C,D) -> eval_PackBitsDecode_start(E,F)

  * Ranking function: N/A

  * Invariants eval_PackBitsDecode_start(A,B) -> eval_PackBitsDecode_start(C,D)

     entry  : []
     non-rec: [A=C,B=D]
     rec    : [0=1]
     inv    : [A=C,B=D]

CRS eval_PackBitsDecode_bb0_in(A)

  * Non Asymptotic Upper Bound: 1+c(failed(schemes_failed,[scc=1,cr=eval_PackBitsDecode_bb1_in/2])) 

  * LOOPS eval_PackBitsDecode_bb0_in(B) -> eval_PackBitsDecode_bb0_in(C)

  * Ranking function: N/A

  * Invariants eval_PackBitsDecode_bb0_in(A) -> eval_PackBitsDecode_bb0_in(B)

     entry  : []
     non-rec: [A=B]
     rec    : [0=1]
     inv    : [A=B]

CRS loop_cont_eval_PackBitsDecode_bb1_in(A,B,C)

  * Non Asymptotic Upper Bound: 0 

  * LOOPS loop_cont_eval_PackBitsDecode_bb1_in(D,E,F) -> loop_cont_eval_PackBitsDecode_bb1_in(G,H,I)

  * Ranking function: N/A

  * Invariants loop_cont_eval_PackBitsDecode_bb1_in(A,B,C) -> loop_cont_eval_PackBitsDecode_bb1_in(D,E,F)

     entry  : []
     non-rec: [A=D,B=E,C=F]
     rec    : [0=1]
     inv    : [A=D,B=E,C=F]

CRS eval_PackBitsDecode_39(A)

  * Non Asymptotic Upper Bound: 0 

  * LOOPS eval_PackBitsDecode_39(B) -> eval_PackBitsDecode_39(C)

  * Ranking function: N/A

  * Invariants eval_PackBitsDecode_39(A) -> eval_PackBitsDecode_39(B)

     entry  : []
     non-rec: [A=B]
     rec    : [0=1]
     inv    : [A=B]

CRS eval_PackBitsDecode_40

  * Non Asymptotic Upper Bound: 0 

  * LOOPS eval_PackBitsDecode_40 -> eval_PackBitsDecode_40

  * Ranking function: N/A

  * Invariants eval_PackBitsDecode_40 -> eval_PackBitsDecode_40

     entry  : []
     non-rec: []
     rec    : [0=1]
     inv    : []

CRS eval_PackBitsDecode_bb9_in

  * Non Asymptotic Upper Bound: 0 

  * LOOPS eval_PackBitsDecode_bb9_in -> eval_PackBitsDecode_bb9_in

  * Ranking function: N/A

  * Invariants eval_PackBitsDecode_bb9_in -> eval_PackBitsDecode_bb9_in

     entry  : []
     non-rec: []
     rec    : [0=1]
     inv    : []

CRS eval_PackBitsDecode_bb1_in(A,B)

  * Non Asymptotic Upper Bound: c(failed(schemes_failed,[scc=1,cr=eval_PackBitsDecode_bb1_in/2])) 

  * LOOPS eval_PackBitsDecode_bb1_in(C,D) -> eval_PackBitsDecode_bb1_in(E,F)
     - [D=F,C=E+1,C>=1,D>=1]
     - [D>=1,C>=1]
     - [C+F=D+E+1,C>=1,D>=1]
     - [D>=1,C>=1]
     - [C+F=D+E+1,C>=1,D>=1]

  * Ranking function: c(failed(no_rf,[scc=1,cr=eval_PackBitsDecode_bb1_in/2]))

  * Invariants eval_PackBitsDecode_bb1_in(A,B) -> eval_PackBitsDecode_bb1_in(C,D)

     entry  : []
     non-rec: [A=C,B=D]
     rec    : [A>=1,B>=1]
     inv    : []

CRS eval_PackBitsDecode_bb5_in(A,B,C,D,E,F)

  * Non Asymptotic Upper Bound: nat(F) 

  * LOOPS eval_PackBitsDecode_bb5_in(G,H,I,J,K,L) -> eval_PackBitsDecode_bb5_in(M,N,O,P,Q,R)
     - [G=M,H=N,I=O,J=P,K=Q,L=R+1,R>=0]

  * Ranking function: nat(L)

  * Invariants eval_PackBitsDecode_bb5_in(A,B,C,D,E,F) -> eval_PackBitsDecode_bb5_in(G,H,I,J,K,L)

     entry  : [B>=1,A>=1,A=E+2,B=D+F,A=C+1]
     non-rec: [A=G,B=H,C=I,D=J,E=K,F=L,B>=1,A>=1,A=E+2,B=D+F,A=C+1]
     rec    : [A=K+2,D=J,A=I+1,B=H,A=G,B=D+F,A=E+2,A=C+1,A>=1,L>=0,B>=1,B>=D+L+1]
     inv    : [B>=D+L,B>=1,A>=1,A=E+2,B=D+F,A=G,B=H,A=I+1,D=J,A=K+2,A=C+1]



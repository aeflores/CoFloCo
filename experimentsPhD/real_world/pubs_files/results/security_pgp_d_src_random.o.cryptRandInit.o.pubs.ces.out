This is PUBS, version 0.2.
Copyright (C) 2007, 2008, 2009 UPM, UCM.
This program comes with ABSOLUTELY NO WARRANTY.
This is free software, and you are welcome to
redistribute it under certain conditions.



CRS $pubs_aux_entry$(A) -- THE MAIN ENTRY

  * Non Asymptotic Upper Bound: 25 

  * LOOPS $pubs_aux_entry$(B) -> $pubs_aux_entry$(C)

  * Ranking function: N/A

  * Invariants $pubs_aux_entry$(A) -> $pubs_aux_entry$(B)

     entry  : []
     non-rec: [A=B]
     rec    : [0=1]
     inv    : [A=B]

CRS eval_cryptRandInit_start(A)

  * Non Asymptotic Upper Bound: 25 

  * LOOPS eval_cryptRandInit_start(B) -> eval_cryptRandInit_start(C)

  * Ranking function: N/A

  * Invariants eval_cryptRandInit_start(A) -> eval_cryptRandInit_start(B)

     entry  : []
     non-rec: [A=B]
     rec    : [0=1]
     inv    : [A=B]

CRS eval_cryptRandInit_bb0_in(A)

  * Non Asymptotic Upper Bound: 25 

  * LOOPS eval_cryptRandInit_bb0_in(B) -> eval_cryptRandInit_bb0_in(C)

  * Ranking function: N/A

  * Invariants eval_cryptRandInit_bb0_in(A) -> eval_cryptRandInit_bb0_in(B)

     entry  : []
     non-rec: [A=B]
     rec    : [0=1]
     inv    : [A=B]

CRS loop_cont_eval_cryptRandInit_bb1_in(A,B,C)

  * Non Asymptotic Upper Bound: 0 

  * LOOPS loop_cont_eval_cryptRandInit_bb1_in(D,E,F) -> loop_cont_eval_cryptRandInit_bb1_in(G,H,I)

  * Ranking function: N/A

  * Invariants loop_cont_eval_cryptRandInit_bb1_in(A,B,C) -> loop_cont_eval_cryptRandInit_bb1_in(D,E,F)

     entry  : [3>=A,A>=2]
     non-rec: [A=D,B=E,C=F,3>=A,A>=2]
     rec    : [0=1]
     inv    : [A>=2,3>=A,A=D,B=E,C=F]

CRS eval_cryptRandInit_8(A)

  * Non Asymptotic Upper Bound: 0 

  * LOOPS eval_cryptRandInit_8(B) -> eval_cryptRandInit_8(C)

  * Ranking function: N/A

  * Invariants eval_cryptRandInit_8(A) -> eval_cryptRandInit_8(B)

     entry  : []
     non-rec: [A=B]
     rec    : [0=1]
     inv    : [A=B]

CRS eval_cryptRandInit_9(A)

  * Non Asymptotic Upper Bound: 0 

  * LOOPS eval_cryptRandInit_9(B) -> eval_cryptRandInit_9(C)

  * Ranking function: N/A

  * Invariants eval_cryptRandInit_9(A) -> eval_cryptRandInit_9(B)

     entry  : []
     non-rec: [A=B]
     rec    : [0=1]
     inv    : [A=B]

CRS eval_cryptRandInit_bb5_in(A)

  * Non Asymptotic Upper Bound: 0 

  * LOOPS eval_cryptRandInit_bb5_in(B) -> eval_cryptRandInit_bb5_in(C)

  * Ranking function: N/A

  * Invariants eval_cryptRandInit_bb5_in(A) -> eval_cryptRandInit_bb5_in(B)

     entry  : []
     non-rec: [A=B]
     rec    : [0=1]
     inv    : [A=B]

CRS eval_cryptRandInit_10(A)

  * Non Asymptotic Upper Bound: 0 

  * LOOPS eval_cryptRandInit_10(B) -> eval_cryptRandInit_10(C)

  * Ranking function: N/A

  * Invariants eval_cryptRandInit_10(A) -> eval_cryptRandInit_10(B)

     entry  : []
     non-rec: [A=B]
     rec    : [0=1]
     inv    : [A=B]

CRS eval_cryptRandInit_11(A)

  * Non Asymptotic Upper Bound: 0 

  * LOOPS eval_cryptRandInit_11(B) -> eval_cryptRandInit_11(C)

  * Ranking function: N/A

  * Invariants eval_cryptRandInit_11(A) -> eval_cryptRandInit_11(B)

     entry  : []
     non-rec: [A=B]
     rec    : [0=1]
     inv    : [A=B]

CRS eval_cryptRandInit_12(A)

  * Non Asymptotic Upper Bound: 0 

  * LOOPS eval_cryptRandInit_12(B) -> eval_cryptRandInit_12(C)

  * Ranking function: N/A

  * Invariants eval_cryptRandInit_12(A) -> eval_cryptRandInit_12(B)

     entry  : [A=1]
     non-rec: [A=B,A=1]
     rec    : [0=1]
     inv    : [A=1,B=1]

CRS eval_cryptRandInit_13

  * Non Asymptotic Upper Bound: 0 

  * LOOPS eval_cryptRandInit_13 -> eval_cryptRandInit_13

  * Ranking function: N/A

  * Invariants eval_cryptRandInit_13 -> eval_cryptRandInit_13

     entry  : []
     non-rec: []
     rec    : [0=1]
     inv    : []

CRS eval_cryptRandInit_bb1_in(A,B)

  * Non Asymptotic Upper Bound: nat(-B+24) 

  * LOOPS eval_cryptRandInit_bb1_in(C,D) -> eval_cryptRandInit_bb1_in(E,F)
     - [D+1=F,C=E,23>=D]

  * Ranking function: nat(-D+24)

  * Invariants eval_cryptRandInit_bb1_in(A,B) -> eval_cryptRandInit_bb1_in(C,D)

     entry  : [B=0]
     non-rec: [A=C,B=D,B=0]
     rec    : [A=C,B=0,D>=1]
     inv    : [D>=0,A=C,B=0]



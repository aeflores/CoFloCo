This is PUBS, version 0.2.
Copyright (C) 2007, 2008, 2009 UPM, UCM.
This program comes with ABSOLUTELY NO WARRANTY.
This is free software, and you are welcome to
redistribute it under certain conditions.



CRS $pubs_aux_entry$ -- THE MAIN ENTRY

  * Non Asymptotic Upper Bound: 1+nat(c(maximize_failed)) 

  * LOOPS $pubs_aux_entry$ -> $pubs_aux_entry$

  * Ranking function: N/A

  * Invariants $pubs_aux_entry$ -> $pubs_aux_entry$

     entry  : []
     non-rec: []
     rec    : [0=1]
     inv    : []

CRS eval_get_interlaced_row_start

  * Non Asymptotic Upper Bound: 1+nat(c(maximize_failed)) 

  * LOOPS eval_get_interlaced_row_start -> eval_get_interlaced_row_start

  * Ranking function: N/A

  * Invariants eval_get_interlaced_row_start -> eval_get_interlaced_row_start

     entry  : []
     non-rec: []
     rec    : [0=1]
     inv    : []

CRS eval_get_interlaced_row_bb0_in

  * Non Asymptotic Upper Bound: 1+nat(c(maximize_failed)) 

  * LOOPS eval_get_interlaced_row_bb0_in -> eval_get_interlaced_row_bb0_in

  * Ranking function: N/A

  * Invariants eval_get_interlaced_row_bb0_in -> eval_get_interlaced_row_bb0_in

     entry  : []
     non-rec: []
     rec    : [0=1]
     inv    : []

CRS eval_get_interlaced_row_bb3_in

  * Non Asymptotic Upper Bound: 1+nat(c(maximize_failed)) 

  * LOOPS eval_get_interlaced_row_bb3_in -> eval_get_interlaced_row_bb3_in

  * Ranking function: N/A

  * Invariants eval_get_interlaced_row_bb3_in -> eval_get_interlaced_row_bb3_in

     entry  : []
     non-rec: []
     rec    : [0=1]
     inv    : []

CRS eval_get_interlaced_row_NewDefault_in

  * Non Asymptotic Upper Bound: 1+nat(c(maximize_failed)) 

  * LOOPS eval_get_interlaced_row_NewDefault_in -> eval_get_interlaced_row_NewDefault_in

  * Ranking function: N/A

  * Invariants eval_get_interlaced_row_NewDefault_in -> eval_get_interlaced_row_NewDefault_in

     entry  : []
     non-rec: []
     rec    : [0=1]
     inv    : []

CRS eval_get_interlaced_row_bb5_in

  * Non Asymptotic Upper Bound: 1+nat(c(maximize_failed)) 

  * LOOPS eval_get_interlaced_row_bb5_in -> eval_get_interlaced_row_bb5_in

  * Ranking function: N/A

  * Invariants eval_get_interlaced_row_bb5_in -> eval_get_interlaced_row_bb5_in

     entry  : []
     non-rec: []
     rec    : [0=1]
     inv    : []

CRS eval_get_interlaced_row_21

  * Non Asymptotic Upper Bound: 1+nat(c(maximize_failed)) 

  * LOOPS eval_get_interlaced_row_21 -> eval_get_interlaced_row_21

  * Ranking function: N/A

  * Invariants eval_get_interlaced_row_21 -> eval_get_interlaced_row_21

     entry  : []
     non-rec: []
     rec    : [0=1]
     inv    : []

CRS eval_get_interlaced_row_22

  * Non Asymptotic Upper Bound: 1+nat(c(maximize_failed)) 

  * LOOPS eval_get_interlaced_row_22 -> eval_get_interlaced_row_22

  * Ranking function: N/A

  * Invariants eval_get_interlaced_row_22 -> eval_get_interlaced_row_22

     entry  : []
     non-rec: []
     rec    : [0=1]
     inv    : []

CRS loop_cont_eval_get_interlaced_row_bb6_in(A,B)

  * Non Asymptotic Upper Bound: 0 

  * LOOPS loop_cont_eval_get_interlaced_row_bb6_in(C,D) -> loop_cont_eval_get_interlaced_row_bb6_in(E,F)

  * Ranking function: N/A

  * Invariants loop_cont_eval_get_interlaced_row_bb6_in(A,B) -> loop_cont_eval_get_interlaced_row_bb6_in(C,D)

     entry  : [A=2]
     non-rec: [A=C,B=D,A=2]
     rec    : [0=1]
     inv    : [A=2,C=2,B=D]

CRS eval_get_interlaced_row_bb6_in(A)

  * Non Asymptotic Upper Bound: nat(A) 

  * LOOPS eval_get_interlaced_row_bb6_in(B) -> eval_get_interlaced_row_bb6_in(C)
     - [B=C+1,C>=0]

  * Ranking function: nat(B)

  * Invariants eval_get_interlaced_row_bb6_in(A) -> eval_get_interlaced_row_bb6_in(B)

     entry  : []
     non-rec: [A=B]
     rec    : [B>=0,A>=B+1]
     inv    : [A>=B]



This is PUBS, version 0.2.
Copyright (C) 2007, 2008, 2009 UPM, UCM.
This program comes with ABSOLUTELY NO WARRANTY.
This is free software, and you are welcome to
redistribute it under certain conditions.



CRS $pubs_aux_entry$(A) -- THE MAIN ENTRY

  * Non Asymptotic Upper Bound: 1+4*nat(A) 

  * LOOPS $pubs_aux_entry$(B) -> $pubs_aux_entry$(C)

  * Ranking function: N/A

  * Invariants $pubs_aux_entry$(A) -> $pubs_aux_entry$(B)

     entry  : []
     non-rec: [A=B]
     rec    : [0=1]
     inv    : [A=B]

CRS eval_save_cap_start(A)

  * Non Asymptotic Upper Bound: 1+4*nat(A) 

  * LOOPS eval_save_cap_start(B) -> eval_save_cap_start(C)

  * Ranking function: N/A

  * Invariants eval_save_cap_start(A) -> eval_save_cap_start(B)

     entry  : []
     non-rec: [A=B]
     rec    : [0=1]
     inv    : [A=B]

CRS eval_save_cap_bb0_in(A)

  * Non Asymptotic Upper Bound: 1+4*nat(A) 

  * LOOPS eval_save_cap_bb0_in(B) -> eval_save_cap_bb0_in(C)

  * Ranking function: N/A

  * Invariants eval_save_cap_bb0_in(A) -> eval_save_cap_bb0_in(B)

     entry  : []
     non-rec: [A=B]
     rec    : [0=1]
     inv    : [A=B]

CRS loop_cont_eval_save_cap_bb2_in(A,B)

  * Non Asymptotic Upper Bound: 0 

  * LOOPS loop_cont_eval_save_cap_bb2_in(C,D) -> loop_cont_eval_save_cap_bb2_in(E,F)

  * Ranking function: N/A

  * Invariants loop_cont_eval_save_cap_bb2_in(A,B) -> loop_cont_eval_save_cap_bb2_in(C,D)

     entry  : [A=2]
     non-rec: [A=C,B=D,A=2]
     rec    : [0=1]
     inv    : [A=2,C=2,B=D]

CRS eval_save_cap_bb9_in

  * Non Asymptotic Upper Bound: 0 

  * LOOPS eval_save_cap_bb9_in -> eval_save_cap_bb9_in

  * Ranking function: N/A

  * Invariants eval_save_cap_bb9_in -> eval_save_cap_bb9_in

     entry  : []
     non-rec: []
     rec    : [0=1]
     inv    : []

CRS eval_save_cap_bb2_in(A,B)

  * Non Asymptotic Upper Bound: 4*nat(B) 

  * LOOPS eval_save_cap_bb2_in(C,D) -> eval_save_cap_bb2_in(E,F)
     - [D=F+1,C=E,F>=0]
     - [D=F+1,C=E,F>=0]
     - [D=F+1,C=E,F>=0]
     - [D=F+1,C=E,F>=0]

  * Ranking function: nat(D)

  * Invariants eval_save_cap_bb2_in(A,B) -> eval_save_cap_bb2_in(C,D)

     entry  : [A=B]
     non-rec: [A=C,B=D,A=B]
     rec    : [A=C,A=B,D>=0,A>=D+1]
     inv    : [A>=D,A=C,A=B]



This is PUBS, version 0.2.
Copyright (C) 2007, 2008, 2009 UPM, UCM.
This program comes with ABSOLUTELY NO WARRANTY.
This is free software, and you are welcome to
redistribute it under certain conditions.



CRS $pubs_aux_entry$(A,B) -- THE MAIN ENTRY

  * Non Asymptotic Upper Bound: 1+c(failed(schemes_failed,[scc=1,cr=eval_receive_io_bb1_in/2])) 

  * LOOPS $pubs_aux_entry$(C,D) -> $pubs_aux_entry$(E,F)

  * Ranking function: N/A

  * Invariants $pubs_aux_entry$(A,B) -> $pubs_aux_entry$(C,D)

     entry  : []
     non-rec: [A=C,B=D]
     rec    : [0=1]
     inv    : [A=C,B=D]

CRS eval_receive_io_start(A,B)

  * Non Asymptotic Upper Bound: 1+c(failed(schemes_failed,[scc=1,cr=eval_receive_io_bb1_in/2])) 

  * LOOPS eval_receive_io_start(C,D) -> eval_receive_io_start(E,F)

  * Ranking function: N/A

  * Invariants eval_receive_io_start(A,B) -> eval_receive_io_start(C,D)

     entry  : []
     non-rec: [A=C,B=D]
     rec    : [0=1]
     inv    : [A=C,B=D]

CRS eval_receive_io_bb0_in(A,B)

  * Non Asymptotic Upper Bound: 1+c(failed(schemes_failed,[scc=1,cr=eval_receive_io_bb1_in/2])) 

  * LOOPS eval_receive_io_bb0_in(C,D) -> eval_receive_io_bb0_in(E,F)

  * Ranking function: N/A

  * Invariants eval_receive_io_bb0_in(A,B) -> eval_receive_io_bb0_in(C,D)

     entry  : []
     non-rec: [A=C,B=D]
     rec    : [0=1]
     inv    : [A=C,B=D]

CRS eval_receive_io_0(A,B)

  * Non Asymptotic Upper Bound: 1+c(failed(schemes_failed,[scc=1,cr=eval_receive_io_bb1_in/2])) 

  * LOOPS eval_receive_io_0(C,D) -> eval_receive_io_0(E,F)

  * Ranking function: N/A

  * Invariants eval_receive_io_0(A,B) -> eval_receive_io_0(C,D)

     entry  : []
     non-rec: [A=C,B=D]
     rec    : [0=1]
     inv    : [A=C,B=D]

CRS eval_receive_io_1(A,B)

  * Non Asymptotic Upper Bound: 1+c(failed(schemes_failed,[scc=1,cr=eval_receive_io_bb1_in/2])) 

  * LOOPS eval_receive_io_1(C,D) -> eval_receive_io_1(E,F)

  * Ranking function: N/A

  * Invariants eval_receive_io_1(A,B) -> eval_receive_io_1(C,D)

     entry  : []
     non-rec: [A=C,B=D]
     rec    : [0=1]
     inv    : [A=C,B=D]

CRS loop_cont_eval_receive_io_bb1_in(A,B)

  * Non Asymptotic Upper Bound: 0 

  * LOOPS loop_cont_eval_receive_io_bb1_in(C,D) -> loop_cont_eval_receive_io_bb1_in(E,F)

  * Ranking function: N/A

  * Invariants loop_cont_eval_receive_io_bb1_in(A,B) -> loop_cont_eval_receive_io_bb1_in(C,D)

     entry  : []
     non-rec: [A=C,B=D]
     rec    : [0=1]
     inv    : [A=C,B=D]

CRS eval_receive_io_6

  * Non Asymptotic Upper Bound: 0 

  * LOOPS eval_receive_io_6 -> eval_receive_io_6

  * Ranking function: N/A

  * Invariants eval_receive_io_6 -> eval_receive_io_6

     entry  : []
     non-rec: []
     rec    : [0=1]
     inv    : []

CRS eval_receive_io_7

  * Non Asymptotic Upper Bound: 0 

  * LOOPS eval_receive_io_7 -> eval_receive_io_7

  * Ranking function: N/A

  * Invariants eval_receive_io_7 -> eval_receive_io_7

     entry  : []
     non-rec: []
     rec    : [0=1]
     inv    : []

CRS eval_receive_io_bb6_in

  * Non Asymptotic Upper Bound: 0 

  * LOOPS eval_receive_io_bb6_in -> eval_receive_io_bb6_in

  * Ranking function: N/A

  * Invariants eval_receive_io_bb6_in -> eval_receive_io_bb6_in

     entry  : []
     non-rec: []
     rec    : [0=1]
     inv    : []

CRS eval_receive_io_bb1_in(A,B)

  * Non Asymptotic Upper Bound: c(failed(schemes_failed,[scc=1,cr=eval_receive_io_bb1_in/2])) 

  * LOOPS eval_receive_io_bb1_in(C,D) -> eval_receive_io_bb1_in(E,F)
     - [0>=D+1]
     - [0>=D+1]
     - [D>=1]
     - [D>=1]

  * Ranking function: c(failed(no_rf,[scc=1,cr=eval_receive_io_bb1_in/2]))

  * Invariants eval_receive_io_bb1_in(A,B) -> eval_receive_io_bb1_in(C,D)

     entry  : []
     non-rec: [A=C,B=D]
     rec    : []
     inv    : []

CRS eval_receive_io_bb2_in(A,B)

  * Non Asymptotic Upper Bound: c(failed(schemes_failed,[scc=0,cr=eval_receive_io_bb2_in/2])) 

  * LOOPS eval_receive_io_bb2_in(C,D) -> eval_receive_io_bb2_in(E,F)
     - [C=E,D=F]

  * Ranking function: c(failed(no_rf,[scc=0,cr=eval_receive_io_bb2_in/2]))

  * Invariants eval_receive_io_bb2_in(A,B) -> eval_receive_io_bb2_in(C,D)

     entry  : []
     non-rec: [A=C,B=D]
     rec    : [A=C,B=D]
     inv    : [A=C,B=D]



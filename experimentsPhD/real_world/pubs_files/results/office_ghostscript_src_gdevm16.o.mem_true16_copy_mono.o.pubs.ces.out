This is PUBS, version 0.2.
Copyright (C) 2007, 2008, 2009 UPM, UCM.
This program comes with ABSOLUTELY NO WARRANTY.
This is free software, and you are welcome to
redistribute it under certain conditions.



CRS $pubs_aux_entry$(A,B,C,D,E,F,G,H,I) -- THE MAIN ENTRY

  * Non Asymptotic Upper Bound: max([1+2*nat(G)+nat(G)*nat(F-1),1+2*nat(c(maximize_failed))+nat(c(maximize_failed))*nat(F-1),1+2*nat(G)+nat(G)*nat(c(maximize_failed)),1+2*nat(c(maximize_failed))+nat(c(maximize_failed))*nat(c(maximize_failed)),1+2*nat(E+G)+nat(E+G)*nat(F-1),1+2*nat(c(maximize_failed))+nat(c(maximize_failed))*nat(F-1),1+2*nat(E+G)+nat(E+G)*nat(c(maximize_failed)),1+2*nat(c(maximize_failed))+nat(c(maximize_failed))*nat(c(maximize_failed)),1+2*nat(G)+nat(G)*nat(D+F-1),1+2*nat(c(maximize_failed))+nat(c(maximize_failed))*nat(D+F-1),1+2*nat(G)+nat(G)*nat(c(maximize_failed)),1+2*nat(c(maximize_failed))+nat(c(maximize_failed))*nat(c(maximize_failed)),1+2*nat(E+G)+nat(E+G)*nat(D+F-1),1+2*nat(c(maximize_failed))+nat(c(maximize_failed))*nat(D+F-1),1+2*nat(E+G)+nat(E+G)*nat(c(maximize_failed)),1+2*nat(c(maximize_failed))+nat(c(maximize_failed))*nat(c(maximize_failed))]) 

  * LOOPS $pubs_aux_entry$(J,K,L,M,N,O,P,Q,R) -> $pubs_aux_entry$(S,T,U,V,W,X,Y,Z,A1)

  * Ranking function: N/A

  * Invariants $pubs_aux_entry$(A,B,C,D,E,F,G,H,I) -> $pubs_aux_entry$(J,K,L,M,N,O,P,Q,R)

     entry  : []
     non-rec: [A=J,B=K,C=L,D=M,E=N,F=O,G=P,H=Q,I=R]
     rec    : [0=1]
     inv    : [A=J,B=K,C=L,D=M,E=N,F=O,G=P,H=Q,I=R]

CRS eval_mem_true16_copy_mono_start(A,B,C,D,E,F,G,H,I)

  * Non Asymptotic Upper Bound: max([1+2*nat(G)+nat(G)*nat(F-1),1+2*nat(c(maximize_failed))+nat(c(maximize_failed))*nat(F-1),1+2*nat(G)+nat(G)*nat(c(maximize_failed)),1+2*nat(c(maximize_failed))+nat(c(maximize_failed))*nat(c(maximize_failed)),1+2*nat(E+G)+nat(E+G)*nat(F-1),1+2*nat(c(maximize_failed))+nat(c(maximize_failed))*nat(F-1),1+2*nat(E+G)+nat(E+G)*nat(c(maximize_failed)),1+2*nat(c(maximize_failed))+nat(c(maximize_failed))*nat(c(maximize_failed)),1+2*nat(G)+nat(G)*nat(D+F-1),1+2*nat(c(maximize_failed))+nat(c(maximize_failed))*nat(D+F-1),1+2*nat(G)+nat(G)*nat(c(maximize_failed)),1+2*nat(c(maximize_failed))+nat(c(maximize_failed))*nat(c(maximize_failed)),1+2*nat(E+G)+nat(E+G)*nat(D+F-1),1+2*nat(c(maximize_failed))+nat(c(maximize_failed))*nat(D+F-1),1+2*nat(E+G)+nat(E+G)*nat(c(maximize_failed)),1+2*nat(c(maximize_failed))+nat(c(maximize_failed))*nat(c(maximize_failed))]) 

  * LOOPS eval_mem_true16_copy_mono_start(J,K,L,M,N,O,P,Q,R) -> eval_mem_true16_copy_mono_start(S,T,U,V,W,X,Y,Z,A1)

  * Ranking function: N/A

  * Invariants eval_mem_true16_copy_mono_start(A,B,C,D,E,F,G,H,I) -> eval_mem_true16_copy_mono_start(J,K,L,M,N,O,P,Q,R)

     entry  : []
     non-rec: [A=J,B=K,C=L,D=M,E=N,F=O,G=P,H=Q,I=R]
     rec    : [0=1]
     inv    : [A=J,B=K,C=L,D=M,E=N,F=O,G=P,H=Q,I=R]

CRS eval_mem_true16_copy_mono_bb0_in(A,B,C,D)

  * Non Asymptotic Upper Bound: max([1+2*nat(D)+nat(D)*nat(C-1),1+2*nat(c(maximize_failed))+nat(c(maximize_failed))*nat(C-1),1+2*nat(D)+nat(D)*nat(c(maximize_failed)),1+2*nat(c(maximize_failed))+nat(c(maximize_failed))*nat(c(maximize_failed)),1+2*nat(B+D)+nat(B+D)*nat(C-1),1+2*nat(c(maximize_failed))+nat(c(maximize_failed))*nat(C-1),1+2*nat(B+D)+nat(B+D)*nat(c(maximize_failed)),1+2*nat(c(maximize_failed))+nat(c(maximize_failed))*nat(c(maximize_failed)),1+2*nat(D)+nat(D)*nat(A+C-1),1+2*nat(c(maximize_failed))+nat(c(maximize_failed))*nat(A+C-1),1+2*nat(D)+nat(D)*nat(c(maximize_failed)),1+2*nat(c(maximize_failed))+nat(c(maximize_failed))*nat(c(maximize_failed)),1+2*nat(B+D)+nat(B+D)*nat(A+C-1),1+2*nat(c(maximize_failed))+nat(c(maximize_failed))*nat(A+C-1),1+2*nat(B+D)+nat(B+D)*nat(c(maximize_failed)),1+2*nat(c(maximize_failed))+nat(c(maximize_failed))*nat(c(maximize_failed))]) 

  * LOOPS eval_mem_true16_copy_mono_bb0_in(E,F,G,H) -> eval_mem_true16_copy_mono_bb0_in(I,J,K,L)

  * Ranking function: N/A

  * Invariants eval_mem_true16_copy_mono_bb0_in(A,B,C,D) -> eval_mem_true16_copy_mono_bb0_in(E,F,G,H)

     entry  : []
     non-rec: [A=E,B=F,C=G,D=H]
     rec    : [0=1]
     inv    : [A=E,B=F,C=G,D=H]

CRS eval_mem_true16_copy_mono_bb3_in(A,B,C,D)

  * Non Asymptotic Upper Bound: max([1+2*nat(B)+nat(B)*nat(C-1),1+2*nat(c(maximize_failed))+nat(c(maximize_failed))*nat(C-1),1+2*nat(B)+nat(B)*nat(c(maximize_failed)),1+2*nat(c(maximize_failed))+nat(c(maximize_failed))*nat(c(maximize_failed)),1+2*nat(A+B)+nat(A+B)*nat(C-1),1+2*nat(c(maximize_failed))+nat(c(maximize_failed))*nat(C-1),1+2*nat(A+B)+nat(A+B)*nat(c(maximize_failed)),1+2*nat(c(maximize_failed))+nat(c(maximize_failed))*nat(c(maximize_failed))]) 

  * LOOPS eval_mem_true16_copy_mono_bb3_in(E,F,G,H) -> eval_mem_true16_copy_mono_bb3_in(I,J,K,L)

  * Ranking function: N/A

  * Invariants eval_mem_true16_copy_mono_bb3_in(A,B,C,D) -> eval_mem_true16_copy_mono_bb3_in(E,F,G,H)

     entry  : []
     non-rec: [A=E,B=F,C=G,D=H]
     rec    : [0=1]
     inv    : [A=E,B=F,C=G,D=H]

CRS eval_mem_true16_copy_mono_bb5_in(A,B,C,D)

  * Non Asymptotic Upper Bound: max([1+2*nat(A)+nat(A)*nat(B-1),1+2*nat(c(maximize_failed))+nat(c(maximize_failed))*nat(B-1),1+2*nat(A)+nat(A)*nat(c(maximize_failed)),1+2*nat(c(maximize_failed))+nat(c(maximize_failed))*nat(c(maximize_failed))]) 

  * LOOPS eval_mem_true16_copy_mono_bb5_in(E,F,G,H) -> eval_mem_true16_copy_mono_bb5_in(I,J,K,L)

  * Ranking function: N/A

  * Invariants eval_mem_true16_copy_mono_bb5_in(A,B,C,D) -> eval_mem_true16_copy_mono_bb5_in(E,F,G,H)

     entry  : []
     non-rec: [A=E,B=F,C=G,D=H]
     rec    : [0=1]
     inv    : [A=E,B=F,C=G,D=H]

CRS eval_mem_true16_copy_mono_bb7_in(A,B,C)

  * Non Asymptotic Upper Bound: max([1+2*nat(A)+nat(A)*nat(C-1),1+2*nat(c(maximize_failed))+nat(c(maximize_failed))*nat(C-1)]) 

  * LOOPS eval_mem_true16_copy_mono_bb7_in(D,E,F) -> eval_mem_true16_copy_mono_bb7_in(G,H,I)

  * Ranking function: N/A

  * Invariants eval_mem_true16_copy_mono_bb7_in(A,B,C) -> eval_mem_true16_copy_mono_bb7_in(D,E,F)

     entry  : []
     non-rec: [A=D,B=E,C=F]
     rec    : [0=1]
     inv    : [A=D,B=E,C=F]

CRS eval_mem_true16_copy_mono_bb9_in(A,B)

  * Non Asymptotic Upper Bound: 1+2*nat(B)+nat(B)*nat(A-1) 

  * LOOPS eval_mem_true16_copy_mono_bb9_in(C,D) -> eval_mem_true16_copy_mono_bb9_in(E,F)

  * Ranking function: N/A

  * Invariants eval_mem_true16_copy_mono_bb9_in(A,B) -> eval_mem_true16_copy_mono_bb9_in(C,D)

     entry  : []
     non-rec: [A=C,B=D]
     rec    : [0=1]
     inv    : [A=C,B=D]

CRS loop_cont_eval_mem_true16_copy_mono_bb11_in(A,B)

  * Non Asymptotic Upper Bound: 0 

  * LOOPS loop_cont_eval_mem_true16_copy_mono_bb11_in(C,D) -> loop_cont_eval_mem_true16_copy_mono_bb11_in(E,F)

  * Ranking function: N/A

  * Invariants loop_cont_eval_mem_true16_copy_mono_bb11_in(A,B) -> loop_cont_eval_mem_true16_copy_mono_bb11_in(C,D)

     entry  : [A=3]
     non-rec: [A=C,B=D,A=3]
     rec    : [0=1]
     inv    : [A=3,C=3,B=D]

CRS eval_mem_true16_copy_mono_bb22_in

  * Non Asymptotic Upper Bound: 0 

  * LOOPS eval_mem_true16_copy_mono_bb22_in -> eval_mem_true16_copy_mono_bb22_in

  * Ranking function: N/A

  * Invariants eval_mem_true16_copy_mono_bb22_in -> eval_mem_true16_copy_mono_bb22_in

     entry  : []
     non-rec: []
     rec    : [0=1]
     inv    : []

CRS eval_mem_true16_copy_mono_bb11_in(A,B)

  * Non Asymptotic Upper Bound: 2*nat(B)+nat(B)*nat(A-1) 

  * LOOPS eval_mem_true16_copy_mono_bb11_in(C,D) -> eval_mem_true16_copy_mono_bb11_in(E,F)
     - [F>=0,D=F+1,C=E]

  * Ranking function: nat(D)

  * Invariants eval_mem_true16_copy_mono_bb11_in(A,B) -> eval_mem_true16_copy_mono_bb11_in(C,D)

     entry  : []
     non-rec: [A=C,B=D]
     rec    : [A=C,D>=0,B>=D+1]
     inv    : [B>=D,A=C]

CRS eval_mem_true16_copy_mono_bb13_in(A,B,C,D)

  * Non Asymptotic Upper Bound: nat(-B+C+D) 

  * LOOPS eval_mem_true16_copy_mono_bb13_in(E,F,G,H) -> eval_mem_true16_copy_mono_bb13_in(I,J,K,L)
     - [H=L+1,E=I,F=J,G=K,H>=2]

  * Ranking function: nat(H-1)

  * Invariants eval_mem_true16_copy_mono_bb13_in(A,B,C,D) -> eval_mem_true16_copy_mono_bb13_in(E,F,G,H)

     entry  : [C>=0,A=D,B=C+1]
     non-rec: [A=E,B=F,C=G,D=H,C>=0,A=D,B=C+1]
     rec    : [B=G+1,B=F,A=E,A=D,B=C+1,B>=1,H>=1,A>=H+1]
     inv    : [A>=H,B>=1,A=D,A=E,B=F,B=G+1,B=C+1]



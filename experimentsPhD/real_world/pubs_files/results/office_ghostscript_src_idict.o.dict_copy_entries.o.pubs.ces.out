This is PUBS, version 0.2.
Copyright (C) 2007, 2008, 2009 UPM, UCM.
This program comes with ABSOLUTELY NO WARRANTY.
This is free software, and you are welcome to
redistribute it under certain conditions.



CRS $pubs_aux_entry$(A) -- THE MAIN ENTRY

  * Non Asymptotic Upper Bound: max([1+c(failed(schemes_failed,[scc=3,cr=eval_dict_copy_entries_bb8_in/2])),2+c(failed(schemes_failed,[scc=0,cr=eval_dict_copy_entries_bb2_in/1]))+c(failed(schemes_failed,[scc=3,cr=eval_dict_copy_entries_bb8_in/2]))]) 

  * LOOPS $pubs_aux_entry$(B) -> $pubs_aux_entry$(C)

  * Ranking function: N/A

  * Invariants $pubs_aux_entry$(A) -> $pubs_aux_entry$(B)

     entry  : []
     non-rec: [A=B]
     rec    : [0=1]
     inv    : [A=B]

CRS eval_dict_copy_entries_start(A)

  * Non Asymptotic Upper Bound: max([1+c(failed(schemes_failed,[scc=3,cr=eval_dict_copy_entries_bb8_in/2])),2+c(failed(schemes_failed,[scc=0,cr=eval_dict_copy_entries_bb2_in/1]))+c(failed(schemes_failed,[scc=3,cr=eval_dict_copy_entries_bb8_in/2]))]) 

  * LOOPS eval_dict_copy_entries_start(B) -> eval_dict_copy_entries_start(C)

  * Ranking function: N/A

  * Invariants eval_dict_copy_entries_start(A) -> eval_dict_copy_entries_start(B)

     entry  : []
     non-rec: [A=B]
     rec    : [0=1]
     inv    : [A=B]

CRS eval_dict_copy_entries_bb0_in

  * Non Asymptotic Upper Bound: max([1+c(failed(schemes_failed,[scc=3,cr=eval_dict_copy_entries_bb8_in/2])),2+c(failed(schemes_failed,[scc=0,cr=eval_dict_copy_entries_bb2_in/1]))+c(failed(schemes_failed,[scc=3,cr=eval_dict_copy_entries_bb8_in/2]))]) 

  * LOOPS eval_dict_copy_entries_bb0_in -> eval_dict_copy_entries_bb0_in

  * Ranking function: N/A

  * Invariants eval_dict_copy_entries_bb0_in -> eval_dict_copy_entries_bb0_in

     entry  : []
     non-rec: []
     rec    : [0=1]
     inv    : []

CRS eval_dict_copy_entries_4

  * Non Asymptotic Upper Bound: 2+c(failed(schemes_failed,[scc=0,cr=eval_dict_copy_entries_bb2_in/1]))+c(failed(schemes_failed,[scc=3,cr=eval_dict_copy_entries_bb8_in/2])) 

  * LOOPS eval_dict_copy_entries_4 -> eval_dict_copy_entries_4

  * Ranking function: N/A

  * Invariants eval_dict_copy_entries_4 -> eval_dict_copy_entries_4

     entry  : []
     non-rec: []
     rec    : [0=1]
     inv    : []

CRS eval_dict_copy_entries_5(A)

  * Non Asymptotic Upper Bound: 2+c(failed(schemes_failed,[scc=0,cr=eval_dict_copy_entries_bb2_in/1]))+c(failed(schemes_failed,[scc=3,cr=eval_dict_copy_entries_bb8_in/2])) 

  * LOOPS eval_dict_copy_entries_5(B) -> eval_dict_copy_entries_5(C)

  * Ranking function: N/A

  * Invariants eval_dict_copy_entries_5(A) -> eval_dict_copy_entries_5(B)

     entry  : []
     non-rec: [A=B]
     rec    : [0=1]
     inv    : [A=B]

CRS loop_cont_eval_dict_copy_entries_bb2_in(A,B)

  * Non Asymptotic Upper Bound: 1+c(failed(schemes_failed,[scc=3,cr=eval_dict_copy_entries_bb8_in/2])) 

  * LOOPS loop_cont_eval_dict_copy_entries_bb2_in(C,D) -> loop_cont_eval_dict_copy_entries_bb2_in(E,F)

  * Ranking function: N/A

  * Invariants loop_cont_eval_dict_copy_entries_bb2_in(A,B) -> loop_cont_eval_dict_copy_entries_bb2_in(C,D)

     entry  : []
     non-rec: [A=C,B=D]
     rec    : [0=1]
     inv    : [A=C,B=D]

CRS eval_dict_copy_entries_bb7_in

  * Non Asymptotic Upper Bound: 1+c(failed(schemes_failed,[scc=3,cr=eval_dict_copy_entries_bb8_in/2])) 

  * LOOPS eval_dict_copy_entries_bb7_in -> eval_dict_copy_entries_bb7_in

  * Ranking function: N/A

  * Invariants eval_dict_copy_entries_bb7_in -> eval_dict_copy_entries_bb7_in

     entry  : []
     non-rec: []
     rec    : [0=1]
     inv    : []

CRS eval_dict_copy_entries_18

  * Non Asymptotic Upper Bound: 1+c(failed(schemes_failed,[scc=3,cr=eval_dict_copy_entries_bb8_in/2])) 

  * LOOPS eval_dict_copy_entries_18 -> eval_dict_copy_entries_18

  * Ranking function: N/A

  * Invariants eval_dict_copy_entries_18 -> eval_dict_copy_entries_18

     entry  : []
     non-rec: []
     rec    : [0=1]
     inv    : []

CRS eval_dict_copy_entries_19(A)

  * Non Asymptotic Upper Bound: 1+c(failed(schemes_failed,[scc=3,cr=eval_dict_copy_entries_bb8_in/2])) 

  * LOOPS eval_dict_copy_entries_19(B) -> eval_dict_copy_entries_19(C)

  * Ranking function: N/A

  * Invariants eval_dict_copy_entries_19(A) -> eval_dict_copy_entries_19(B)

     entry  : []
     non-rec: [A=B]
     rec    : [0=1]
     inv    : [A=B]

CRS loop_cont_eval_dict_copy_entries_bb8_in(A,B)

  * Non Asymptotic Upper Bound: 0 

  * LOOPS loop_cont_eval_dict_copy_entries_bb8_in(C,D) -> loop_cont_eval_dict_copy_entries_bb8_in(E,F)

  * Ranking function: N/A

  * Invariants loop_cont_eval_dict_copy_entries_bb8_in(A,B) -> loop_cont_eval_dict_copy_entries_bb8_in(C,D)

     entry  : []
     non-rec: [A=C,B=D]
     rec    : [0=1]
     inv    : [A=C,B=D]

CRS eval_dict_copy_entries_bb8_in(A,B)

  * Non Asymptotic Upper Bound: c(failed(schemes_failed,[scc=3,cr=eval_dict_copy_entries_bb8_in/2])) 

  * LOOPS eval_dict_copy_entries_bb8_in(C,D) -> eval_dict_copy_entries_bb8_in(E,F)
     - [C=E,F>=0]
     - [C=E,F>=0]
     - [C=E,F>=0]

  * Ranking function: c(failed(no_rf,[scc=3,cr=eval_dict_copy_entries_bb8_in/2]))

  * Invariants eval_dict_copy_entries_bb8_in(A,B) -> eval_dict_copy_entries_bb8_in(C,D)

     entry  : [A=B]
     non-rec: [A=C,B=D,A=B]
     rec    : [D>=0,A=B,A=C]
     inv    : [A=C,A=B]

CRS eval_dict_copy_entries_bb12_in

  * Non Asymptotic Upper Bound: 0 

  * LOOPS eval_dict_copy_entries_bb12_in -> eval_dict_copy_entries_bb12_in

  * Ranking function: N/A

  * Invariants eval_dict_copy_entries_bb12_in -> eval_dict_copy_entries_bb12_in

     entry  : []
     non-rec: []
     rec    : [0=1]
     inv    : []

CRS eval_dict_copy_entries_bb2_in(A)

  * Non Asymptotic Upper Bound: c(failed(schemes_failed,[scc=0,cr=eval_dict_copy_entries_bb2_in/1])) 

  * LOOPS eval_dict_copy_entries_bb2_in(B) -> eval_dict_copy_entries_bb2_in(C)
     - [C>=0]
     - [C>=0]
     - [C>=0]

  * Ranking function: c(failed(no_rf,[scc=0,cr=eval_dict_copy_entries_bb2_in/1]))

  * Invariants eval_dict_copy_entries_bb2_in(A) -> eval_dict_copy_entries_bb2_in(B)

     entry  : []
     non-rec: [A=B]
     rec    : [B>=0]
     inv    : []



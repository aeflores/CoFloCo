This is PUBS, version 0.2.
Copyright (C) 2007, 2008, 2009 UPM, UCM.
This program comes with ABSOLUTELY NO WARRANTY.
This is free software, and you are welcome to
redistribute it under certain conditions.



CRS $pubs_aux_entry$(A,B) -- THE MAIN ENTRY

  * Non Asymptotic Upper Bound: 1+c(failed(schemes_failed,[scc=0,cr=eval_process_encode_bb2_in/2])) 

  * LOOPS $pubs_aux_entry$(C,D) -> $pubs_aux_entry$(E,F)

  * Ranking function: N/A

  * Invariants $pubs_aux_entry$(A,B) -> $pubs_aux_entry$(C,D)

     entry  : []
     non-rec: [A=C,B=D]
     rec    : [0=1]
     inv    : [A=C,B=D]

CRS eval_process_encode_start(A,B)

  * Non Asymptotic Upper Bound: 1+c(failed(schemes_failed,[scc=0,cr=eval_process_encode_bb2_in/2])) 

  * LOOPS eval_process_encode_start(C,D) -> eval_process_encode_start(E,F)

  * Ranking function: N/A

  * Invariants eval_process_encode_start(A,B) -> eval_process_encode_start(C,D)

     entry  : []
     non-rec: [A=C,B=D]
     rec    : [0=1]
     inv    : [A=C,B=D]

CRS eval_process_encode_bb0_in(A,B)

  * Non Asymptotic Upper Bound: 1+c(failed(schemes_failed,[scc=0,cr=eval_process_encode_bb2_in/2])) 

  * LOOPS eval_process_encode_bb0_in(C,D) -> eval_process_encode_bb0_in(E,F)

  * Ranking function: N/A

  * Invariants eval_process_encode_bb0_in(A,B) -> eval_process_encode_bb0_in(C,D)

     entry  : []
     non-rec: [A=C,B=D]
     rec    : [0=1]
     inv    : [A=C,B=D]

CRS eval_process_encode_0(A,B)

  * Non Asymptotic Upper Bound: 1+c(failed(schemes_failed,[scc=0,cr=eval_process_encode_bb2_in/2])) 

  * LOOPS eval_process_encode_0(C,D) -> eval_process_encode_0(E,F)

  * Ranking function: N/A

  * Invariants eval_process_encode_0(A,B) -> eval_process_encode_0(C,D)

     entry  : []
     non-rec: [A=C,B=D]
     rec    : [0=1]
     inv    : [A=C,B=D]

CRS eval_process_encode_1(A,B)

  * Non Asymptotic Upper Bound: 1+c(failed(schemes_failed,[scc=0,cr=eval_process_encode_bb2_in/2])) 

  * LOOPS eval_process_encode_1(C,D) -> eval_process_encode_1(E,F)

  * Ranking function: N/A

  * Invariants eval_process_encode_1(A,B) -> eval_process_encode_1(C,D)

     entry  : []
     non-rec: [A=C,B=D]
     rec    : [0=1]
     inv    : [A=C,B=D]

CRS eval_process_encode_28(A,B)

  * Non Asymptotic Upper Bound: 0 

  * LOOPS eval_process_encode_28(C,D) -> eval_process_encode_28(E,F)

  * Ranking function: N/A

  * Invariants eval_process_encode_28(A,B) -> eval_process_encode_28(C,D)

     entry  : []
     non-rec: [A=C,B=D]
     rec    : [0=1]
     inv    : [A=C,B=D]

CRS eval_process_encode_29

  * Non Asymptotic Upper Bound: 0 

  * LOOPS eval_process_encode_29 -> eval_process_encode_29

  * Ranking function: N/A

  * Invariants eval_process_encode_29 -> eval_process_encode_29

     entry  : []
     non-rec: []
     rec    : [0=1]
     inv    : []

CRS eval_process_encode_2(A,B)

  * Non Asymptotic Upper Bound: 1+c(failed(schemes_failed,[scc=0,cr=eval_process_encode_bb2_in/2])) 

  * LOOPS eval_process_encode_2(C,D) -> eval_process_encode_2(E,F)

  * Ranking function: N/A

  * Invariants eval_process_encode_2(A,B) -> eval_process_encode_2(C,D)

     entry  : []
     non-rec: [A=C,B=D]
     rec    : [0=1]
     inv    : [A=C,B=D]

CRS eval_process_encode_3(A,B)

  * Non Asymptotic Upper Bound: 1+c(failed(schemes_failed,[scc=0,cr=eval_process_encode_bb2_in/2])) 

  * LOOPS eval_process_encode_3(C,D) -> eval_process_encode_3(E,F)

  * Ranking function: N/A

  * Invariants eval_process_encode_3(A,B) -> eval_process_encode_3(C,D)

     entry  : []
     non-rec: [A=C,B=D]
     rec    : [0=1]
     inv    : [A=C,B=D]

CRS eval_process_encode_4(A,B)

  * Non Asymptotic Upper Bound: 1+c(failed(schemes_failed,[scc=0,cr=eval_process_encode_bb2_in/2])) 

  * LOOPS eval_process_encode_4(C,D) -> eval_process_encode_4(E,F)

  * Ranking function: N/A

  * Invariants eval_process_encode_4(A,B) -> eval_process_encode_4(C,D)

     entry  : []
     non-rec: [A=C,B=D]
     rec    : [0=1]
     inv    : [A=C,B=D]

CRS loop_cont_eval_process_encode_bb2_in(A,B,C,D)

  * Non Asymptotic Upper Bound: 0 

  * LOOPS loop_cont_eval_process_encode_bb2_in(E,F,G,H) -> loop_cont_eval_process_encode_bb2_in(I,J,K,L)

  * Ranking function: N/A

  * Invariants loop_cont_eval_process_encode_bb2_in(A,B,C,D) -> loop_cont_eval_process_encode_bb2_in(E,F,G,H)

     entry  : []
     non-rec: [A=E,B=F,C=G,D=H]
     rec    : [0=1]
     inv    : [A=E,B=F,C=G,D=H]

CRS eval_process_encode_26(A,B)

  * Non Asymptotic Upper Bound: 0 

  * LOOPS eval_process_encode_26(C,D) -> eval_process_encode_26(E,F)

  * Ranking function: N/A

  * Invariants eval_process_encode_26(A,B) -> eval_process_encode_26(C,D)

     entry  : []
     non-rec: [A=C,B=D]
     rec    : [0=1]
     inv    : [A=C,B=D]

CRS eval_process_encode_27

  * Non Asymptotic Upper Bound: 0 

  * LOOPS eval_process_encode_27 -> eval_process_encode_27

  * Ranking function: N/A

  * Invariants eval_process_encode_27 -> eval_process_encode_27

     entry  : []
     non-rec: []
     rec    : [0=1]
     inv    : []

CRS eval_process_encode_22(A,B)

  * Non Asymptotic Upper Bound: 0 

  * LOOPS eval_process_encode_22(C,D) -> eval_process_encode_22(E,F)

  * Ranking function: N/A

  * Invariants eval_process_encode_22(A,B) -> eval_process_encode_22(C,D)

     entry  : []
     non-rec: [A=C,B=D]
     rec    : [0=1]
     inv    : [A=C,B=D]

CRS eval_process_encode_23(A,B)

  * Non Asymptotic Upper Bound: 0 

  * LOOPS eval_process_encode_23(C,D) -> eval_process_encode_23(E,F)

  * Ranking function: N/A

  * Invariants eval_process_encode_23(A,B) -> eval_process_encode_23(C,D)

     entry  : []
     non-rec: [A=C,B=D]
     rec    : [0=1]
     inv    : [A=C,B=D]

CRS eval_process_encode_24(A,B)

  * Non Asymptotic Upper Bound: 0 

  * LOOPS eval_process_encode_24(C,D) -> eval_process_encode_24(E,F)

  * Ranking function: N/A

  * Invariants eval_process_encode_24(A,B) -> eval_process_encode_24(C,D)

     entry  : []
     non-rec: [A=C,B=D]
     rec    : [0=1]
     inv    : [A=C,B=D]

CRS eval_process_encode_25

  * Non Asymptotic Upper Bound: 0 

  * LOOPS eval_process_encode_25 -> eval_process_encode_25

  * Ranking function: N/A

  * Invariants eval_process_encode_25 -> eval_process_encode_25

     entry  : []
     non-rec: []
     rec    : [0=1]
     inv    : []

CRS eval_process_encode_18(A,B)

  * Non Asymptotic Upper Bound: 0 

  * LOOPS eval_process_encode_18(C,D) -> eval_process_encode_18(E,F)

  * Ranking function: N/A

  * Invariants eval_process_encode_18(A,B) -> eval_process_encode_18(C,D)

     entry  : []
     non-rec: [A=C,B=D]
     rec    : [0=1]
     inv    : [A=C,B=D]

CRS eval_process_encode_19(A,B)

  * Non Asymptotic Upper Bound: 0 

  * LOOPS eval_process_encode_19(C,D) -> eval_process_encode_19(E,F)

  * Ranking function: N/A

  * Invariants eval_process_encode_19(A,B) -> eval_process_encode_19(C,D)

     entry  : []
     non-rec: [A=C,B=D]
     rec    : [0=1]
     inv    : [A=C,B=D]

CRS eval_process_encode_20(A,B)

  * Non Asymptotic Upper Bound: 0 

  * LOOPS eval_process_encode_20(C,D) -> eval_process_encode_20(E,F)

  * Ranking function: N/A

  * Invariants eval_process_encode_20(A,B) -> eval_process_encode_20(C,D)

     entry  : []
     non-rec: [A=C,B=D]
     rec    : [0=1]
     inv    : [A=C,B=D]

CRS eval_process_encode_21

  * Non Asymptotic Upper Bound: 0 

  * LOOPS eval_process_encode_21 -> eval_process_encode_21

  * Ranking function: N/A

  * Invariants eval_process_encode_21 -> eval_process_encode_21

     entry  : []
     non-rec: []
     rec    : [0=1]
     inv    : []

CRS eval_process_encode_bb11_in

  * Non Asymptotic Upper Bound: 0 

  * LOOPS eval_process_encode_bb11_in -> eval_process_encode_bb11_in

  * Ranking function: N/A

  * Invariants eval_process_encode_bb11_in -> eval_process_encode_bb11_in

     entry  : []
     non-rec: []
     rec    : [0=1]
     inv    : []

CRS eval_process_encode_bb2_in(A,B)

  * Non Asymptotic Upper Bound: c(failed(schemes_failed,[scc=0,cr=eval_process_encode_bb2_in/2])) 

  * LOOPS eval_process_encode_bb2_in(C,D) -> eval_process_encode_bb2_in(E,F)
     - [C=E,D=F]
     - [C=E,D=F]

  * Ranking function: c(failed(no_rf,[scc=0,cr=eval_process_encode_bb2_in/2]))

  * Invariants eval_process_encode_bb2_in(A,B) -> eval_process_encode_bb2_in(C,D)

     entry  : []
     non-rec: [A=C,B=D]
     rec    : [A=C,B=D]
     inv    : [A=C,B=D]



This is PUBS, version 0.2.
Copyright (C) 2007, 2008, 2009 UPM, UCM.
This program comes with ABSOLUTELY NO WARRANTY.
This is free software, and you are welcome to
redistribute it under certain conditions.



CRS $pubs_aux_entry$(A,B) -- THE MAIN ENTRY

  * Non Asymptotic Upper Bound: 1+c(failed(schemes_failed,[scc=1,cr=eval_readstr_bb1_in/1])) 

  * LOOPS $pubs_aux_entry$(C,D) -> $pubs_aux_entry$(E,F)

  * Ranking function: N/A

  * Invariants $pubs_aux_entry$(A,B) -> $pubs_aux_entry$(C,D)

     entry  : []
     non-rec: [A=C,B=D]
     rec    : [0=1]
     inv    : [A=C,B=D]

CRS eval_readstr_start(A,B)

  * Non Asymptotic Upper Bound: 1+c(failed(schemes_failed,[scc=1,cr=eval_readstr_bb1_in/1])) 

  * LOOPS eval_readstr_start(C,D) -> eval_readstr_start(E,F)

  * Ranking function: N/A

  * Invariants eval_readstr_start(A,B) -> eval_readstr_start(C,D)

     entry  : []
     non-rec: [A=C,B=D]
     rec    : [0=1]
     inv    : [A=C,B=D]

CRS eval_readstr_bb0_in(A)

  * Non Asymptotic Upper Bound: 1+c(failed(schemes_failed,[scc=1,cr=eval_readstr_bb1_in/1])) 

  * LOOPS eval_readstr_bb0_in(B) -> eval_readstr_bb0_in(C)

  * Ranking function: N/A

  * Invariants eval_readstr_bb0_in(A) -> eval_readstr_bb0_in(B)

     entry  : []
     non-rec: [A=B]
     rec    : [0=1]
     inv    : [A=B]

CRS eval_readstr_0(A)

  * Non Asymptotic Upper Bound: 1+c(failed(schemes_failed,[scc=1,cr=eval_readstr_bb1_in/1])) 

  * LOOPS eval_readstr_0(B) -> eval_readstr_0(C)

  * Ranking function: N/A

  * Invariants eval_readstr_0(A) -> eval_readstr_0(B)

     entry  : []
     non-rec: [A=B]
     rec    : [0=1]
     inv    : [A=B]

CRS eval_readstr_1(A)

  * Non Asymptotic Upper Bound: 1+c(failed(schemes_failed,[scc=1,cr=eval_readstr_bb1_in/1])) 

  * LOOPS eval_readstr_1(B) -> eval_readstr_1(C)

  * Ranking function: N/A

  * Invariants eval_readstr_1(A) -> eval_readstr_1(B)

     entry  : []
     non-rec: [A=B]
     rec    : [0=1]
     inv    : [A=B]

CRS eval_readstr_2(A)

  * Non Asymptotic Upper Bound: 1+c(failed(schemes_failed,[scc=1,cr=eval_readstr_bb1_in/1])) 

  * LOOPS eval_readstr_2(B) -> eval_readstr_2(C)

  * Ranking function: N/A

  * Invariants eval_readstr_2(A) -> eval_readstr_2(B)

     entry  : []
     non-rec: [A=B]
     rec    : [0=1]
     inv    : [A=B]

CRS eval_readstr_3(A)

  * Non Asymptotic Upper Bound: 1+c(failed(schemes_failed,[scc=1,cr=eval_readstr_bb1_in/1])) 

  * LOOPS eval_readstr_3(B) -> eval_readstr_3(C)

  * Ranking function: N/A

  * Invariants eval_readstr_3(A) -> eval_readstr_3(B)

     entry  : []
     non-rec: [A=B]
     rec    : [0=1]
     inv    : [A=B]

CRS eval_readstr_4(A)

  * Non Asymptotic Upper Bound: 1+c(failed(schemes_failed,[scc=1,cr=eval_readstr_bb1_in/1])) 

  * LOOPS eval_readstr_4(B) -> eval_readstr_4(C)

  * Ranking function: N/A

  * Invariants eval_readstr_4(A) -> eval_readstr_4(B)

     entry  : []
     non-rec: [A=B]
     rec    : [0=1]
     inv    : [A=B]

CRS eval_readstr_5(A)

  * Non Asymptotic Upper Bound: 1+c(failed(schemes_failed,[scc=1,cr=eval_readstr_bb1_in/1])) 

  * LOOPS eval_readstr_5(B) -> eval_readstr_5(C)

  * Ranking function: N/A

  * Invariants eval_readstr_5(A) -> eval_readstr_5(B)

     entry  : []
     non-rec: [A=B]
     rec    : [0=1]
     inv    : [A=B]

CRS loop_cont_eval_readstr_bb1_in(A,B,C)

  * Non Asymptotic Upper Bound: 0 

  * LOOPS loop_cont_eval_readstr_bb1_in(D,E,F) -> loop_cont_eval_readstr_bb1_in(G,H,I)

  * Ranking function: N/A

  * Invariants loop_cont_eval_readstr_bb1_in(A,B,C) -> loop_cont_eval_readstr_bb1_in(D,E,F)

     entry  : []
     non-rec: [A=D,B=E,C=F]
     rec    : [0=1]
     inv    : [A=D,B=E,C=F]

CRS eval_readstr_8(A)

  * Non Asymptotic Upper Bound: 0 

  * LOOPS eval_readstr_8(B) -> eval_readstr_8(C)

  * Ranking function: N/A

  * Invariants eval_readstr_8(A) -> eval_readstr_8(B)

     entry  : []
     non-rec: [A=B]
     rec    : [0=1]
     inv    : [A=B]

CRS eval_readstr_9

  * Non Asymptotic Upper Bound: 0 

  * LOOPS eval_readstr_9 -> eval_readstr_9

  * Ranking function: N/A

  * Invariants eval_readstr_9 -> eval_readstr_9

     entry  : []
     non-rec: []
     rec    : [0=1]
     inv    : []

CRS eval_readstr_bb39_in

  * Non Asymptotic Upper Bound: 0 

  * LOOPS eval_readstr_bb39_in -> eval_readstr_bb39_in

  * Ranking function: N/A

  * Invariants eval_readstr_bb39_in -> eval_readstr_bb39_in

     entry  : []
     non-rec: []
     rec    : [0=1]
     inv    : []

CRS eval_readstr_bb1_in(A)

  * Non Asymptotic Upper Bound: c(failed(schemes_failed,[scc=1,cr=eval_readstr_bb1_in/1])) 

  * LOOPS eval_readstr_bb1_in(B) -> eval_readstr_bb1_in(C)
     - [B+1=C]
     - [B+1=C]
     - [B+1=C]
     - [B+1=C]
     - [B+1=C]
     - [B+1=C]
     - [B+1=C]
     - [B+1=C]
     - []
     - [B+1=C]
     - []
     - []
     - []
     - []
     - []
     - []
     - []
     - []
     - [B+1=C]
     - [B+1=C]
     - [B+1=C]
     - [B+1=C]
     - [B+1=C]
     - [B+1=C]
     - [B=C]
     - [B=C]
     - [B=C]
     - [B=C]
     - [B=C]
     - [B=C]
     - [B=C]
     - [B=C]
     - []
     - [B=C]
     - []
     - []
     - []
     - []
     - []
     - []
     - []
     - []
     - [B=C]
     - [B=C]
     - [B=C]
     - [B=C]
     - [B=C]
     - [B=C]
     - [B=C]

  * Ranking function: c(failed(no_rf,[scc=1,cr=eval_readstr_bb1_in/1]))

  * Invariants eval_readstr_bb1_in(A) -> eval_readstr_bb1_in(B)

     entry  : []
     non-rec: [A=B]
     rec    : []
     inv    : []

CRS eval_readstr_bb21_in(A,B)

  * Non Asymptotic Upper Bound: c(failed(schemes_failed,[scc=0,cr=eval_readstr_bb21_in/2])) 

  * LOOPS eval_readstr_bb21_in(C,D) -> eval_readstr_bb21_in(E,F)
     - [C=E,D=F]

  * Ranking function: c(failed(no_rf,[scc=0,cr=eval_readstr_bb21_in/2]))

  * Invariants eval_readstr_bb21_in(A,B) -> eval_readstr_bb21_in(C,D)

     entry  : []
     non-rec: [A=C,B=D]
     rec    : [A=C,B=D]
     inv    : [A=C,B=D]



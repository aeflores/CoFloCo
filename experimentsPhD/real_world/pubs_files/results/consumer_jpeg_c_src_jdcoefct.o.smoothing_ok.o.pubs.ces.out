This is PUBS, version 0.2.
Copyright (C) 2007, 2008, 2009 UPM, UCM.
This program comes with ABSOLUTELY NO WARRANTY.
This is free software, and you are welcome to
redistribute it under certain conditions.



CRS $pubs_aux_entry$ -- THE MAIN ENTRY

  * Non Asymptotic Upper Bound: 1+c(failed(schemes_failed,[scc=1,cr=eval_smoothing_ok_bb5_in/1])) 

  * LOOPS $pubs_aux_entry$ -> $pubs_aux_entry$

  * Ranking function: N/A

  * Invariants $pubs_aux_entry$ -> $pubs_aux_entry$

     entry  : []
     non-rec: []
     rec    : [0=1]
     inv    : []

CRS eval_smoothing_ok_start

  * Non Asymptotic Upper Bound: 1+c(failed(schemes_failed,[scc=1,cr=eval_smoothing_ok_bb5_in/1])) 

  * LOOPS eval_smoothing_ok_start -> eval_smoothing_ok_start

  * Ranking function: N/A

  * Invariants eval_smoothing_ok_start -> eval_smoothing_ok_start

     entry  : []
     non-rec: []
     rec    : [0=1]
     inv    : []

CRS eval_smoothing_ok_bb0_in

  * Non Asymptotic Upper Bound: 1+c(failed(schemes_failed,[scc=1,cr=eval_smoothing_ok_bb5_in/1])) 

  * LOOPS eval_smoothing_ok_bb0_in -> eval_smoothing_ok_bb0_in

  * Ranking function: N/A

  * Invariants eval_smoothing_ok_bb0_in -> eval_smoothing_ok_bb0_in

     entry  : []
     non-rec: []
     rec    : [0=1]
     inv    : []

CRS eval_smoothing_ok_5

  * Non Asymptotic Upper Bound: 1+c(failed(schemes_failed,[scc=1,cr=eval_smoothing_ok_bb5_in/1])) 

  * LOOPS eval_smoothing_ok_5 -> eval_smoothing_ok_5

  * Ranking function: N/A

  * Invariants eval_smoothing_ok_5 -> eval_smoothing_ok_5

     entry  : []
     non-rec: []
     rec    : [0=1]
     inv    : []

CRS eval_smoothing_ok_6

  * Non Asymptotic Upper Bound: 1+c(failed(schemes_failed,[scc=1,cr=eval_smoothing_ok_bb5_in/1])) 

  * LOOPS eval_smoothing_ok_6 -> eval_smoothing_ok_6

  * Ranking function: N/A

  * Invariants eval_smoothing_ok_6 -> eval_smoothing_ok_6

     entry  : []
     non-rec: []
     rec    : [0=1]
     inv    : []

CRS eval_smoothing_ok_bb4_in

  * Non Asymptotic Upper Bound: 1+c(failed(schemes_failed,[scc=1,cr=eval_smoothing_ok_bb5_in/1])) 

  * LOOPS eval_smoothing_ok_bb4_in -> eval_smoothing_ok_bb4_in

  * Ranking function: N/A

  * Invariants eval_smoothing_ok_bb4_in -> eval_smoothing_ok_bb4_in

     entry  : []
     non-rec: []
     rec    : [0=1]
     inv    : []

CRS loop_cont_eval_smoothing_ok_bb5_in(A,B)

  * Non Asymptotic Upper Bound: 0 

  * LOOPS loop_cont_eval_smoothing_ok_bb5_in(C,D) -> loop_cont_eval_smoothing_ok_bb5_in(E,F)

  * Ranking function: N/A

  * Invariants loop_cont_eval_smoothing_ok_bb5_in(A,B) -> loop_cont_eval_smoothing_ok_bb5_in(C,D)

     entry  : []
     non-rec: [A=C,B=D]
     rec    : [0=1]
     inv    : [A=C,B=D]

CRS eval_smoothing_ok_bb17_in

  * Non Asymptotic Upper Bound: 0 

  * LOOPS eval_smoothing_ok_bb17_in -> eval_smoothing_ok_bb17_in

  * Ranking function: N/A

  * Invariants eval_smoothing_ok_bb17_in -> eval_smoothing_ok_bb17_in

     entry  : []
     non-rec: []
     rec    : [0=1]
     inv    : []

CRS eval_smoothing_ok_bb5_in(A)

  * Non Asymptotic Upper Bound: c(failed(schemes_failed,[scc=1,cr=eval_smoothing_ok_bb5_in/1])) 

  * LOOPS eval_smoothing_ok_bb5_in(B) -> eval_smoothing_ok_bb5_in(C)
     - []

  * Ranking function: c(failed(no_rf,[scc=1,cr=eval_smoothing_ok_bb5_in/1]))

  * Invariants eval_smoothing_ok_bb5_in(A) -> eval_smoothing_ok_bb5_in(B)

     entry  : [A=0]
     non-rec: [A=B,A=0]
     rec    : [A=0]
     inv    : [A=0]

CRS eval_smoothing_ok_bb14_in(A,B)

  * Non Asymptotic Upper Bound: nat(-B+6) 

  * LOOPS eval_smoothing_ok_bb14_in(C,D) -> eval_smoothing_ok_bb14_in(E,F)
     - [D+1=F,C=E,6>=F]

  * Ranking function: nat(-D+6)

  * Invariants eval_smoothing_ok_bb14_in(A,B) -> eval_smoothing_ok_bb14_in(C,D)

     entry  : [B=1]
     non-rec: [A=C,B=D,B=1]
     rec    : [A=C,B=1,D>=2]
     inv    : [D>=1,A=C,B=1]



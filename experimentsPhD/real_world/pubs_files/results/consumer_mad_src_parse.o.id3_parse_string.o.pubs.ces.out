This is PUBS, version 0.2.
Copyright (C) 2007, 2008, 2009 UPM, UCM.
This program comes with ABSOLUTELY NO WARRANTY.
This is free software, and you are welcome to
redistribute it under certain conditions.



CRS $pubs_aux_entry$(A,B,C) -- THE MAIN ENTRY

  * Non Asymptotic Upper Bound: 1+c(failed(schemes_failed,[scc=2,cr=eval_id3_parse_string_bb6_in/0])) 

  * LOOPS $pubs_aux_entry$(D,E,F) -> $pubs_aux_entry$(G,H,I)

  * Ranking function: N/A

  * Invariants $pubs_aux_entry$(A,B,C) -> $pubs_aux_entry$(D,E,F)

     entry  : []
     non-rec: [A=D,B=E,C=F]
     rec    : [0=1]
     inv    : [A=D,B=E,C=F]

CRS eval_id3_parse_string_start(A,B,C)

  * Non Asymptotic Upper Bound: 1+c(failed(schemes_failed,[scc=2,cr=eval_id3_parse_string_bb6_in/0])) 

  * LOOPS eval_id3_parse_string_start(D,E,F) -> eval_id3_parse_string_start(G,H,I)

  * Ranking function: N/A

  * Invariants eval_id3_parse_string_start(A,B,C) -> eval_id3_parse_string_start(D,E,F)

     entry  : []
     non-rec: [A=D,B=E,C=F]
     rec    : [0=1]
     inv    : [A=D,B=E,C=F]

CRS eval_id3_parse_string_bb0_in(A)

  * Non Asymptotic Upper Bound: 1+c(failed(schemes_failed,[scc=2,cr=eval_id3_parse_string_bb6_in/0])) 

  * LOOPS eval_id3_parse_string_bb0_in(B) -> eval_id3_parse_string_bb0_in(C)

  * Ranking function: N/A

  * Invariants eval_id3_parse_string_bb0_in(A) -> eval_id3_parse_string_bb0_in(B)

     entry  : []
     non-rec: [A=B]
     rec    : [0=1]
     inv    : [A=B]

CRS eval_id3_parse_string_bb3_in(A,B)

  * Non Asymptotic Upper Bound: 1+c(failed(schemes_failed,[scc=2,cr=eval_id3_parse_string_bb6_in/0])) 

  * LOOPS eval_id3_parse_string_bb3_in(C,D) -> eval_id3_parse_string_bb3_in(E,F)

  * Ranking function: N/A

  * Invariants eval_id3_parse_string_bb3_in(A,B) -> eval_id3_parse_string_bb3_in(C,D)

     entry  : [B>=0,1>=B]
     non-rec: [A=C,B=D,B>=0,1>=B]
     rec    : [0=1]
     inv    : [B>=0,1>=B,A=C,B=D]

CRS eval_id3_parse_string_2(A,B)

  * Non Asymptotic Upper Bound: 1+c(failed(schemes_failed,[scc=2,cr=eval_id3_parse_string_bb6_in/0])) 

  * LOOPS eval_id3_parse_string_2(C,D) -> eval_id3_parse_string_2(E,F)

  * Ranking function: N/A

  * Invariants eval_id3_parse_string_2(A,B) -> eval_id3_parse_string_2(C,D)

     entry  : [1>=B,B>=0]
     non-rec: [A=C,B=D,1>=B,B>=0]
     rec    : [0=1]
     inv    : [B>=0,1>=B,A=C,B=D]

CRS eval_id3_parse_string_3

  * Non Asymptotic Upper Bound: 1+c(failed(schemes_failed,[scc=2,cr=eval_id3_parse_string_bb6_in/0])) 

  * LOOPS eval_id3_parse_string_3 -> eval_id3_parse_string_3

  * Ranking function: N/A

  * Invariants eval_id3_parse_string_3 -> eval_id3_parse_string_3

     entry  : []
     non-rec: []
     rec    : [0=1]
     inv    : []

CRS eval_id3_parse_string_NewDefault_in

  * Non Asymptotic Upper Bound: 1+c(failed(schemes_failed,[scc=2,cr=eval_id3_parse_string_bb6_in/0])) 

  * LOOPS eval_id3_parse_string_NewDefault_in -> eval_id3_parse_string_NewDefault_in

  * Ranking function: N/A

  * Invariants eval_id3_parse_string_NewDefault_in -> eval_id3_parse_string_NewDefault_in

     entry  : []
     non-rec: []
     rec    : [0=1]
     inv    : []

CRS eval_id3_parse_string_4(A)

  * Non Asymptotic Upper Bound: 1+c(failed(schemes_failed,[scc=2,cr=eval_id3_parse_string_bb6_in/0])) 

  * LOOPS eval_id3_parse_string_4(B) -> eval_id3_parse_string_4(C)

  * Ranking function: N/A

  * Invariants eval_id3_parse_string_4(A) -> eval_id3_parse_string_4(B)

     entry  : []
     non-rec: [A=B]
     rec    : [0=1]
     inv    : [A=B]

CRS eval_id3_parse_string_5

  * Non Asymptotic Upper Bound: 1+c(failed(schemes_failed,[scc=2,cr=eval_id3_parse_string_bb6_in/0])) 

  * LOOPS eval_id3_parse_string_5 -> eval_id3_parse_string_5

  * Ranking function: N/A

  * Invariants eval_id3_parse_string_5 -> eval_id3_parse_string_5

     entry  : []
     non-rec: []
     rec    : [0=1]
     inv    : []

CRS eval_id3_parse_string_0(A)

  * Non Asymptotic Upper Bound: 1+c(failed(schemes_failed,[scc=2,cr=eval_id3_parse_string_bb6_in/0])) 

  * LOOPS eval_id3_parse_string_0(B) -> eval_id3_parse_string_0(C)

  * Ranking function: N/A

  * Invariants eval_id3_parse_string_0(A) -> eval_id3_parse_string_0(B)

     entry  : []
     non-rec: [A=B]
     rec    : [0=1]
     inv    : [A=B]

CRS eval_id3_parse_string_1

  * Non Asymptotic Upper Bound: 1+c(failed(schemes_failed,[scc=2,cr=eval_id3_parse_string_bb6_in/0])) 

  * LOOPS eval_id3_parse_string_1 -> eval_id3_parse_string_1

  * Ranking function: N/A

  * Invariants eval_id3_parse_string_1 -> eval_id3_parse_string_1

     entry  : []
     non-rec: []
     rec    : [0=1]
     inv    : []

CRS eval_id3_parse_string_bb5_in

  * Non Asymptotic Upper Bound: 1+c(failed(schemes_failed,[scc=2,cr=eval_id3_parse_string_bb6_in/0])) 

  * LOOPS eval_id3_parse_string_bb5_in -> eval_id3_parse_string_bb5_in

  * Ranking function: N/A

  * Invariants eval_id3_parse_string_bb5_in -> eval_id3_parse_string_bb5_in

     entry  : []
     non-rec: []
     rec    : [0=1]
     inv    : []

CRS loop_cont_eval_id3_parse_string_bb6_in(A,B)

  * Non Asymptotic Upper Bound: 0 

  * LOOPS loop_cont_eval_id3_parse_string_bb6_in(C,D) -> loop_cont_eval_id3_parse_string_bb6_in(E,F)

  * Ranking function: N/A

  * Invariants loop_cont_eval_id3_parse_string_bb6_in(A,B) -> loop_cont_eval_id3_parse_string_bb6_in(C,D)

     entry  : []
     non-rec: [A=C,B=D]
     rec    : [0=1]
     inv    : [A=C,B=D]

CRS eval_id3_parse_string_bb6_in

  * Non Asymptotic Upper Bound: c(failed(schemes_failed,[scc=2,cr=eval_id3_parse_string_bb6_in/0])) 

  * LOOPS eval_id3_parse_string_bb6_in -> eval_id3_parse_string_bb6_in
     - []

  * Ranking function: c(failed(no_rf,[scc=2,cr=eval_id3_parse_string_bb6_in/0]))

  * Invariants eval_id3_parse_string_bb6_in -> eval_id3_parse_string_bb6_in

     entry  : []
     non-rec: []
     rec    : []
     inv    : []

CRS eval_id3_parse_string_bb10_in

  * Non Asymptotic Upper Bound: 0 

  * LOOPS eval_id3_parse_string_bb10_in -> eval_id3_parse_string_bb10_in

  * Ranking function: N/A

  * Invariants eval_id3_parse_string_bb10_in -> eval_id3_parse_string_bb10_in

     entry  : []
     non-rec: []
     rec    : [0=1]
     inv    : []



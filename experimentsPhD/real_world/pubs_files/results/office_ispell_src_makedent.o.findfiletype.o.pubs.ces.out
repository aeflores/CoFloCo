This is PUBS, version 0.2.
Copyright (C) 2007, 2008, 2009 UPM, UCM.
This program comes with ABSOLUTELY NO WARRANTY.
This is free software, and you are welcome to
redistribute it under certain conditions.



CRS $pubs_aux_entry$(A) -- THE MAIN ENTRY

  * Non Asymptotic Upper Bound: max([1+c(failed(schemes_failed,[scc=2,cr=eval_findfiletype_bb8_in/2])),2+nat(c(maximize_failed))+c(failed(schemes_failed,[scc=2,cr=eval_findfiletype_bb8_in/2]))]) 

  * LOOPS $pubs_aux_entry$(B) -> $pubs_aux_entry$(C)

  * Ranking function: N/A

  * Invariants $pubs_aux_entry$(A) -> $pubs_aux_entry$(B)

     entry  : []
     non-rec: [A=B]
     rec    : [0=1]
     inv    : [A=B]

CRS eval_findfiletype_start(A)

  * Non Asymptotic Upper Bound: max([1+c(failed(schemes_failed,[scc=2,cr=eval_findfiletype_bb8_in/2])),2+nat(c(maximize_failed))+c(failed(schemes_failed,[scc=2,cr=eval_findfiletype_bb8_in/2]))]) 

  * LOOPS eval_findfiletype_start(B) -> eval_findfiletype_start(C)

  * Ranking function: N/A

  * Invariants eval_findfiletype_start(A) -> eval_findfiletype_start(B)

     entry  : []
     non-rec: [A=B]
     rec    : [0=1]
     inv    : [A=B]

CRS eval_findfiletype_bb0_in

  * Non Asymptotic Upper Bound: max([1+c(failed(schemes_failed,[scc=2,cr=eval_findfiletype_bb8_in/2])),2+nat(c(maximize_failed))+c(failed(schemes_failed,[scc=2,cr=eval_findfiletype_bb8_in/2]))]) 

  * LOOPS eval_findfiletype_bb0_in -> eval_findfiletype_bb0_in

  * Ranking function: N/A

  * Invariants eval_findfiletype_bb0_in -> eval_findfiletype_bb0_in

     entry  : []
     non-rec: []
     rec    : [0=1]
     inv    : []

CRS eval_findfiletype_0

  * Non Asymptotic Upper Bound: max([1+c(failed(schemes_failed,[scc=2,cr=eval_findfiletype_bb8_in/2])),2+nat(c(maximize_failed))+c(failed(schemes_failed,[scc=2,cr=eval_findfiletype_bb8_in/2]))]) 

  * LOOPS eval_findfiletype_0 -> eval_findfiletype_0

  * Ranking function: N/A

  * Invariants eval_findfiletype_0 -> eval_findfiletype_0

     entry  : []
     non-rec: []
     rec    : [0=1]
     inv    : []

CRS eval_findfiletype_1

  * Non Asymptotic Upper Bound: max([1+c(failed(schemes_failed,[scc=2,cr=eval_findfiletype_bb8_in/2])),2+nat(c(maximize_failed))+c(failed(schemes_failed,[scc=2,cr=eval_findfiletype_bb8_in/2]))]) 

  * LOOPS eval_findfiletype_1 -> eval_findfiletype_1

  * Ranking function: N/A

  * Invariants eval_findfiletype_1 -> eval_findfiletype_1

     entry  : []
     non-rec: []
     rec    : [0=1]
     inv    : []

CRS loop_cont_eval_findfiletype_bb2_in(A,B)

  * Non Asymptotic Upper Bound: 1+c(failed(schemes_failed,[scc=2,cr=eval_findfiletype_bb8_in/2])) 

  * LOOPS loop_cont_eval_findfiletype_bb2_in(C,D) -> loop_cont_eval_findfiletype_bb2_in(E,F)

  * Ranking function: N/A

  * Invariants loop_cont_eval_findfiletype_bb2_in(A,B) -> loop_cont_eval_findfiletype_bb2_in(C,D)

     entry  : []
     non-rec: [A=C,B=D]
     rec    : [0=1]
     inv    : [A=C,B=D]

CRS eval_findfiletype_9

  * Non Asymptotic Upper Bound: 0 

  * LOOPS eval_findfiletype_9 -> eval_findfiletype_9

  * Ranking function: N/A

  * Invariants eval_findfiletype_9 -> eval_findfiletype_9

     entry  : []
     non-rec: []
     rec    : [0=1]
     inv    : []

CRS eval_findfiletype_10(A)

  * Non Asymptotic Upper Bound: 0 

  * LOOPS eval_findfiletype_10(B) -> eval_findfiletype_10(C)

  * Ranking function: N/A

  * Invariants eval_findfiletype_10(A) -> eval_findfiletype_10(B)

     entry  : []
     non-rec: [A=B]
     rec    : [0=1]
     inv    : [A=B]

CRS eval_findfiletype_bb7_in

  * Non Asymptotic Upper Bound: 1+c(failed(schemes_failed,[scc=2,cr=eval_findfiletype_bb8_in/2])) 

  * LOOPS eval_findfiletype_bb7_in -> eval_findfiletype_bb7_in

  * Ranking function: N/A

  * Invariants eval_findfiletype_bb7_in -> eval_findfiletype_bb7_in

     entry  : []
     non-rec: []
     rec    : [0=1]
     inv    : []

CRS loop_cont_eval_findfiletype_bb8_in(A,B)

  * Non Asymptotic Upper Bound: 0 

  * LOOPS loop_cont_eval_findfiletype_bb8_in(C,D) -> loop_cont_eval_findfiletype_bb8_in(E,F)

  * Ranking function: N/A

  * Invariants loop_cont_eval_findfiletype_bb8_in(A,B) -> loop_cont_eval_findfiletype_bb8_in(C,D)

     entry  : []
     non-rec: [A=C,B=D]
     rec    : [0=1]
     inv    : [A=C,B=D]

CRS eval_findfiletype_30

  * Non Asymptotic Upper Bound: 0 

  * LOOPS eval_findfiletype_30 -> eval_findfiletype_30

  * Ranking function: N/A

  * Invariants eval_findfiletype_30 -> eval_findfiletype_30

     entry  : []
     non-rec: []
     rec    : [0=1]
     inv    : []

CRS eval_findfiletype_31(A)

  * Non Asymptotic Upper Bound: 0 

  * LOOPS eval_findfiletype_31(B) -> eval_findfiletype_31(C)

  * Ranking function: N/A

  * Invariants eval_findfiletype_31(A) -> eval_findfiletype_31(B)

     entry  : []
     non-rec: [A=B]
     rec    : [0=1]
     inv    : [A=B]

CRS eval_findfiletype_bb17_in

  * Non Asymptotic Upper Bound: 0 

  * LOOPS eval_findfiletype_bb17_in -> eval_findfiletype_bb17_in

  * Ranking function: N/A

  * Invariants eval_findfiletype_bb17_in -> eval_findfiletype_bb17_in

     entry  : []
     non-rec: []
     rec    : [0=1]
     inv    : []

CRS eval_findfiletype_bb8_in(A,B)

  * Non Asymptotic Upper Bound: c(failed(schemes_failed,[scc=2,cr=eval_findfiletype_bb8_in/2])) 

  * LOOPS eval_findfiletype_bb8_in(C,D) -> eval_findfiletype_bb8_in(E,F)
     - [C>=D+1]

  * Ranking function: c(failed(no_rf,[scc=2,cr=eval_findfiletype_bb8_in/2]))

  * Invariants eval_findfiletype_bb8_in(A,B) -> eval_findfiletype_bb8_in(C,D)

     entry  : [B=0]
     non-rec: [A=C,B=D,B=0]
     rec    : [A>=1,B=0]
     inv    : [B=0]

CRS eval_findfiletype_bb10_in(A,B)

  * Non Asymptotic Upper Bound: c(failed(schemes_failed,[scc=1,cr=eval_findfiletype_bb10_in/2])) 

  * LOOPS eval_findfiletype_bb10_in(C,D) -> eval_findfiletype_bb10_in(E,F)
     - [C=E,D=F]
     - [C=E,D=F]

  * Ranking function: c(failed(no_rf,[scc=1,cr=eval_findfiletype_bb10_in/2]))

  * Invariants eval_findfiletype_bb10_in(A,B) -> eval_findfiletype_bb10_in(C,D)

     entry  : [A>=B+1]
     non-rec: [A=C,B=D,A>=B+1]
     rec    : [A>=B+1,A=C,B=D]
     inv    : [A>=B+1,A=C,B=D]

CRS eval_findfiletype_bb2_in(A,B)

  * Non Asymptotic Upper Bound: nat(A-B) 

  * LOOPS eval_findfiletype_bb2_in(C,D) -> eval_findfiletype_bb2_in(E,F)
     - [D+1=F,C=E,C>=D+1]

  * Ranking function: nat(C-D)

  * Invariants eval_findfiletype_bb2_in(A,B) -> eval_findfiletype_bb2_in(C,D)

     entry  : [B=0]
     non-rec: [A=C,B=D,B=0]
     rec    : [A=C,B=0,A>=D,D>=1]
     inv    : [D>=0,A=C,B=0]



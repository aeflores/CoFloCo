This is PUBS, version 0.2.
Copyright (C) 2007, 2008, 2009 UPM, UCM.
This program comes with ABSOLUTELY NO WARRANTY.
This is free software, and you are welcome to
redistribute it under certain conditions.



CRS $pubs_aux_entry$(A,B) -- THE MAIN ENTRY

  * Non Asymptotic Upper Bound: 1+c(failed(schemes_failed,[scc=3,cr=eval_PackBitsEncode_bb1_in/1])) 

  * LOOPS $pubs_aux_entry$(C,D) -> $pubs_aux_entry$(E,F)

  * Ranking function: N/A

  * Invariants $pubs_aux_entry$(A,B) -> $pubs_aux_entry$(C,D)

     entry  : []
     non-rec: [A=C,B=D]
     rec    : [0=1]
     inv    : [A=C,B=D]

CRS eval_PackBitsEncode_start(A,B)

  * Non Asymptotic Upper Bound: 1+c(failed(schemes_failed,[scc=3,cr=eval_PackBitsEncode_bb1_in/1])) 

  * LOOPS eval_PackBitsEncode_start(C,D) -> eval_PackBitsEncode_start(E,F)

  * Ranking function: N/A

  * Invariants eval_PackBitsEncode_start(A,B) -> eval_PackBitsEncode_start(C,D)

     entry  : []
     non-rec: [A=C,B=D]
     rec    : [0=1]
     inv    : [A=C,B=D]

CRS eval_PackBitsEncode_bb0_in(A)

  * Non Asymptotic Upper Bound: 1+c(failed(schemes_failed,[scc=3,cr=eval_PackBitsEncode_bb1_in/1])) 

  * LOOPS eval_PackBitsEncode_bb0_in(B) -> eval_PackBitsEncode_bb0_in(C)

  * Ranking function: N/A

  * Invariants eval_PackBitsEncode_bb0_in(A) -> eval_PackBitsEncode_bb0_in(B)

     entry  : []
     non-rec: [A=B]
     rec    : [0=1]
     inv    : [A=B]

CRS loop_cont_eval_PackBitsEncode_bb1_in(A,B)

  * Non Asymptotic Upper Bound: 0 

  * LOOPS loop_cont_eval_PackBitsEncode_bb1_in(C,D) -> loop_cont_eval_PackBitsEncode_bb1_in(E,F)

  * Ranking function: N/A

  * Invariants loop_cont_eval_PackBitsEncode_bb1_in(A,B) -> loop_cont_eval_PackBitsEncode_bb1_in(C,D)

     entry  : []
     non-rec: [A=C,B=D]
     rec    : [0=1]
     inv    : [A=C,B=D]

CRS eval_PackBitsEncode_bb37_in

  * Non Asymptotic Upper Bound: 0 

  * LOOPS eval_PackBitsEncode_bb37_in -> eval_PackBitsEncode_bb37_in

  * Ranking function: N/A

  * Invariants eval_PackBitsEncode_bb37_in -> eval_PackBitsEncode_bb37_in

     entry  : []
     non-rec: []
     rec    : [0=1]
     inv    : []

CRS eval_PackBitsEncode_bb1_in(A)

  * Non Asymptotic Upper Bound: c(failed(schemes_failed,[scc=3,cr=eval_PackBitsEncode_bb1_in/1])) 

  * LOOPS eval_PackBitsEncode_bb1_in(B) -> eval_PackBitsEncode_bb1_in(C)
     - [B>=1]
     - [B>=1]
     - [B>=1]
     - [B>=1]

  * Ranking function: c(failed(no_rf,[scc=3,cr=eval_PackBitsEncode_bb1_in/1]))

  * Invariants eval_PackBitsEncode_bb1_in(A) -> eval_PackBitsEncode_bb1_in(B)

     entry  : []
     non-rec: [A=B]
     rec    : [A>=1]
     inv    : []

CRS eval_PackBitsEncode_bb7_in(A,B)

  * Non Asymptotic Upper Bound: c(failed(schemes_failed,[scc=2,cr=eval_PackBitsEncode_bb7_in/2])) 

  * LOOPS eval_PackBitsEncode_bb7_in(C,D) -> eval_PackBitsEncode_bb7_in(E,F)
     - []
     - [C=E,D=F]
     - [C=E,D=F]

  * Ranking function: c(failed(no_rf,[scc=2,cr=eval_PackBitsEncode_bb7_in/2]))

  * Invariants eval_PackBitsEncode_bb7_in(A,B) -> eval_PackBitsEncode_bb7_in(C,D)

     entry  : []
     non-rec: [A=C,B=D]
     rec    : []
     inv    : []

CRS eval_PackBitsEncode_bb11_in(A,B,C,D)

  * Non Asymptotic Upper Bound: nat(D) 

  * LOOPS eval_PackBitsEncode_bb11_in(E,F,G,H) -> eval_PackBitsEncode_bb11_in(I,J,K,L)
     - [E=I,F=J,G=K,H=L+1,L>=0]

  * Ranking function: nat(H)

  * Invariants eval_PackBitsEncode_bb11_in(A,B,C,D) -> eval_PackBitsEncode_bb11_in(E,F,G,H)

     entry  : [C=D]
     non-rec: [A=E,B=F,C=G,D=H,C=D]
     rec    : [C=G,B=F,A=E,C=D,H>=0,C>=H+1]
     inv    : [C>=H,A=E,B=F,C=G,C=D]

CRS eval_PackBitsEncode_bb3_in(A,B)

  * Non Asymptotic Upper Bound: nat(B) 

  * LOOPS eval_PackBitsEncode_bb3_in(C,D) -> eval_PackBitsEncode_bb3_in(E,F)
     - [C=E,D=F+1,F>=0]

  * Ranking function: nat(D)

  * Invariants eval_PackBitsEncode_bb3_in(A,B) -> eval_PackBitsEncode_bb3_in(C,D)

     entry  : [B>=0,A=B+1]
     non-rec: [A=C,B=D,B>=0,A=B+1]
     rec    : [A=C,A=B+1,D>=0,A>=D+2]
     inv    : [A>=D+1,D>=0,A=C,A=B+1]



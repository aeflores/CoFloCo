This is PUBS, version 0.2.
Copyright (C) 2007, 2008, 2009 UPM, UCM.
This program comes with ABSOLUTELY NO WARRANTY.
This is free software, and you are welcome to
redistribute it under certain conditions.



CRS $pubs_aux_entry$ -- THE MAIN ENTRY

  * Non Asymptotic Upper Bound: 1+c(failed(schemes_failed,[scc=0,cr=eval_usage_bb1_in/0])) 

  * LOOPS $pubs_aux_entry$ -> $pubs_aux_entry$

  * Ranking function: N/A

  * Invariants $pubs_aux_entry$ -> $pubs_aux_entry$

     entry  : []
     non-rec: []
     rec    : [0=1]
     inv    : []

CRS eval_usage_start

  * Non Asymptotic Upper Bound: 1+c(failed(schemes_failed,[scc=0,cr=eval_usage_bb1_in/0])) 

  * LOOPS eval_usage_start -> eval_usage_start

  * Ranking function: N/A

  * Invariants eval_usage_start -> eval_usage_start

     entry  : []
     non-rec: []
     rec    : [0=1]
     inv    : []

CRS eval_usage_bb0_in

  * Non Asymptotic Upper Bound: 1+c(failed(schemes_failed,[scc=0,cr=eval_usage_bb1_in/0])) 

  * LOOPS eval_usage_bb0_in -> eval_usage_bb0_in

  * Ranking function: N/A

  * Invariants eval_usage_bb0_in -> eval_usage_bb0_in

     entry  : []
     non-rec: []
     rec    : [0=1]
     inv    : []

CRS loop_cont_eval_usage_bb1_in(A,B)

  * Non Asymptotic Upper Bound: 0 

  * LOOPS loop_cont_eval_usage_bb1_in(C,D) -> loop_cont_eval_usage_bb1_in(E,F)

  * Ranking function: N/A

  * Invariants loop_cont_eval_usage_bb1_in(A,B) -> loop_cont_eval_usage_bb1_in(C,D)

     entry  : []
     non-rec: [A=C,B=D]
     rec    : [0=1]
     inv    : [A=C,B=D]

CRS eval_usage_6

  * Non Asymptotic Upper Bound: 0 

  * LOOPS eval_usage_6 -> eval_usage_6

  * Ranking function: N/A

  * Invariants eval_usage_6 -> eval_usage_6

     entry  : []
     non-rec: []
     rec    : [0=1]
     inv    : []

CRS eval_usage_7

  * Non Asymptotic Upper Bound: 0 

  * LOOPS eval_usage_7 -> eval_usage_7

  * Ranking function: N/A

  * Invariants eval_usage_7 -> eval_usage_7

     entry  : []
     non-rec: []
     rec    : [0=1]
     inv    : []

CRS eval_usage_bb1_in

  * Non Asymptotic Upper Bound: c(failed(schemes_failed,[scc=0,cr=eval_usage_bb1_in/0])) 

  * LOOPS eval_usage_bb1_in -> eval_usage_bb1_in
     - []

  * Ranking function: c(failed(no_rf,[scc=0,cr=eval_usage_bb1_in/0]))

  * Invariants eval_usage_bb1_in -> eval_usage_bb1_in

     entry  : []
     non-rec: []
     rec    : []
     inv    : []



This is PUBS, version 0.2.
Copyright (C) 2007, 2008, 2009 UPM, UCM.
This program comes with ABSOLUTELY NO WARRANTY.
This is free software, and you are welcome to
redistribute it under certain conditions.



CRS $pubs_aux_entry$ -- THE MAIN ENTRY

  * Non Asymptotic Upper Bound: 1+nat(c(maximize_failed)) 

  * LOOPS $pubs_aux_entry$ -> $pubs_aux_entry$

  * Ranking function: N/A

  * Invariants $pubs_aux_entry$ -> $pubs_aux_entry$

     entry  : []
     non-rec: []
     rec    : [0=1]
     inv    : []

CRS eval_BZ2_blockSort_start

  * Non Asymptotic Upper Bound: 1+nat(c(maximize_failed)) 

  * LOOPS eval_BZ2_blockSort_start -> eval_BZ2_blockSort_start

  * Ranking function: N/A

  * Invariants eval_BZ2_blockSort_start -> eval_BZ2_blockSort_start

     entry  : []
     non-rec: []
     rec    : [0=1]
     inv    : []

CRS eval_BZ2_blockSort_bb0_in

  * Non Asymptotic Upper Bound: 1+nat(c(maximize_failed)) 

  * LOOPS eval_BZ2_blockSort_bb0_in -> eval_BZ2_blockSort_bb0_in

  * Ranking function: N/A

  * Invariants eval_BZ2_blockSort_bb0_in -> eval_BZ2_blockSort_bb0_in

     entry  : []
     non-rec: []
     rec    : [0=1]
     inv    : []

CRS eval_BZ2_blockSort_4(A,B)

  * Non Asymptotic Upper Bound: 1+nat(c(maximize_failed)) 

  * LOOPS eval_BZ2_blockSort_4(C,D) -> eval_BZ2_blockSort_4(E,F)

  * Ranking function: N/A

  * Invariants eval_BZ2_blockSort_4(A,B) -> eval_BZ2_blockSort_4(C,D)

     entry  : []
     non-rec: [A=C,B=D]
     rec    : [0=1]
     inv    : [A=C,B=D]

CRS eval_BZ2_blockSort_5

  * Non Asymptotic Upper Bound: 1+nat(c(maximize_failed)) 

  * LOOPS eval_BZ2_blockSort_5 -> eval_BZ2_blockSort_5

  * Ranking function: N/A

  * Invariants eval_BZ2_blockSort_5 -> eval_BZ2_blockSort_5

     entry  : []
     non-rec: []
     rec    : [0=1]
     inv    : []

CRS eval_BZ2_blockSort_17(A,B,C)

  * Non Asymptotic Upper Bound: 1+nat(c(maximize_failed)) 

  * LOOPS eval_BZ2_blockSort_17(D,E,F) -> eval_BZ2_blockSort_17(G,H,I)

  * Ranking function: N/A

  * Invariants eval_BZ2_blockSort_17(A,B,C) -> eval_BZ2_blockSort_17(D,E,F)

     entry  : []
     non-rec: [A=D,B=E,C=F]
     rec    : [0=1]
     inv    : [A=D,B=E,C=F]

CRS eval_BZ2_blockSort_18(A,B,C)

  * Non Asymptotic Upper Bound: 1+nat(c(maximize_failed)) 

  * LOOPS eval_BZ2_blockSort_18(D,E,F) -> eval_BZ2_blockSort_18(G,H,I)

  * Ranking function: N/A

  * Invariants eval_BZ2_blockSort_18(A,B,C) -> eval_BZ2_blockSort_18(D,E,F)

     entry  : []
     non-rec: [A=D,B=E,C=F]
     rec    : [0=1]
     inv    : [A=D,B=E,C=F]

CRS eval_BZ2_blockSort_24(A,B,C)

  * Non Asymptotic Upper Bound: 1+nat(c(maximize_failed)) 

  * LOOPS eval_BZ2_blockSort_24(D,E,F) -> eval_BZ2_blockSort_24(G,H,I)

  * Ranking function: N/A

  * Invariants eval_BZ2_blockSort_24(A,B,C) -> eval_BZ2_blockSort_24(D,E,F)

     entry  : []
     non-rec: [A=D,B=E,C=F]
     rec    : [0=1]
     inv    : [A=D,B=E,C=F]

CRS eval_BZ2_blockSort_25(A,B)

  * Non Asymptotic Upper Bound: 1+nat(c(maximize_failed)) 

  * LOOPS eval_BZ2_blockSort_25(C,D) -> eval_BZ2_blockSort_25(E,F)

  * Ranking function: N/A

  * Invariants eval_BZ2_blockSort_25(A,B) -> eval_BZ2_blockSort_25(C,D)

     entry  : []
     non-rec: [A=C,B=D]
     rec    : [0=1]
     inv    : [A=C,B=D]

CRS eval_BZ2_blockSort_bb4_in(A,B)

  * Non Asymptotic Upper Bound: 1+nat(c(maximize_failed)) 

  * LOOPS eval_BZ2_blockSort_bb4_in(C,D) -> eval_BZ2_blockSort_bb4_in(E,F)

  * Ranking function: N/A

  * Invariants eval_BZ2_blockSort_bb4_in(A,B) -> eval_BZ2_blockSort_bb4_in(C,D)

     entry  : []
     non-rec: [A=C,B=D]
     rec    : [0=1]
     inv    : [A=C,B=D]

CRS eval_BZ2_blockSort_28(A,B)

  * Non Asymptotic Upper Bound: 1+nat(c(maximize_failed)) 

  * LOOPS eval_BZ2_blockSort_28(C,D) -> eval_BZ2_blockSort_28(E,F)

  * Ranking function: N/A

  * Invariants eval_BZ2_blockSort_28(A,B) -> eval_BZ2_blockSort_28(C,D)

     entry  : []
     non-rec: [A=C,B=D]
     rec    : [0=1]
     inv    : [A=C,B=D]

CRS eval_BZ2_blockSort_29(A,B)

  * Non Asymptotic Upper Bound: 1+nat(c(maximize_failed)) 

  * LOOPS eval_BZ2_blockSort_29(C,D) -> eval_BZ2_blockSort_29(E,F)

  * Ranking function: N/A

  * Invariants eval_BZ2_blockSort_29(A,B) -> eval_BZ2_blockSort_29(C,D)

     entry  : []
     non-rec: [A=C,B=D]
     rec    : [0=1]
     inv    : [A=C,B=D]

CRS eval_BZ2_blockSort_bb7_in(A,B)

  * Non Asymptotic Upper Bound: 1+nat(c(maximize_failed)) 

  * LOOPS eval_BZ2_blockSort_bb7_in(C,D) -> eval_BZ2_blockSort_bb7_in(E,F)

  * Ranking function: N/A

  * Invariants eval_BZ2_blockSort_bb7_in(A,B) -> eval_BZ2_blockSort_bb7_in(C,D)

     entry  : []
     non-rec: [A=C,B=D]
     rec    : [0=1]
     inv    : [A=C,B=D]

CRS eval_BZ2_blockSort_30(A,B)

  * Non Asymptotic Upper Bound: 1+nat(c(maximize_failed)) 

  * LOOPS eval_BZ2_blockSort_30(C,D) -> eval_BZ2_blockSort_30(E,F)

  * Ranking function: N/A

  * Invariants eval_BZ2_blockSort_30(A,B) -> eval_BZ2_blockSort_30(C,D)

     entry  : []
     non-rec: [A=C,B=D]
     rec    : [0=1]
     inv    : [A=C,B=D]

CRS eval_BZ2_blockSort_31

  * Non Asymptotic Upper Bound: 1+nat(c(maximize_failed)) 

  * LOOPS eval_BZ2_blockSort_31 -> eval_BZ2_blockSort_31

  * Ranking function: N/A

  * Invariants eval_BZ2_blockSort_31 -> eval_BZ2_blockSort_31

     entry  : []
     non-rec: []
     rec    : [0=1]
     inv    : []

CRS eval_BZ2_blockSort_bb8_in

  * Non Asymptotic Upper Bound: 1+nat(c(maximize_failed)) 

  * LOOPS eval_BZ2_blockSort_bb8_in -> eval_BZ2_blockSort_bb8_in

  * Ranking function: N/A

  * Invariants eval_BZ2_blockSort_bb8_in -> eval_BZ2_blockSort_bb8_in

     entry  : []
     non-rec: []
     rec    : [0=1]
     inv    : []

CRS loop_cont_eval_BZ2_blockSort_bb9_in(A,B)

  * Non Asymptotic Upper Bound: 0 

  * LOOPS loop_cont_eval_BZ2_blockSort_bb9_in(C,D) -> loop_cont_eval_BZ2_blockSort_bb9_in(E,F)

  * Ranking function: N/A

  * Invariants loop_cont_eval_BZ2_blockSort_bb9_in(A,B) -> loop_cont_eval_BZ2_blockSort_bb9_in(C,D)

     entry  : [A=2]
     non-rec: [A=C,B=D,A=2]
     rec    : [0=1]
     inv    : [A=2,C=2,B=D]

CRS eval_BZ2_blockSort_bb13_in

  * Non Asymptotic Upper Bound: 0 

  * LOOPS eval_BZ2_blockSort_bb13_in -> eval_BZ2_blockSort_bb13_in

  * Ranking function: N/A

  * Invariants eval_BZ2_blockSort_bb13_in -> eval_BZ2_blockSort_bb13_in

     entry  : []
     non-rec: []
     rec    : [0=1]
     inv    : []

CRS eval_BZ2_blockSort_44

  * Non Asymptotic Upper Bound: 0 

  * LOOPS eval_BZ2_blockSort_44 -> eval_BZ2_blockSort_44

  * Ranking function: N/A

  * Invariants eval_BZ2_blockSort_44 -> eval_BZ2_blockSort_44

     entry  : []
     non-rec: []
     rec    : [0=1]
     inv    : []

CRS eval_BZ2_blockSort_45

  * Non Asymptotic Upper Bound: 0 

  * LOOPS eval_BZ2_blockSort_45 -> eval_BZ2_blockSort_45

  * Ranking function: N/A

  * Invariants eval_BZ2_blockSort_45 -> eval_BZ2_blockSort_45

     entry  : []
     non-rec: []
     rec    : [0=1]
     inv    : []

CRS eval_BZ2_blockSort_bb15_in

  * Non Asymptotic Upper Bound: 0 

  * LOOPS eval_BZ2_blockSort_bb15_in -> eval_BZ2_blockSort_bb15_in

  * Ranking function: N/A

  * Invariants eval_BZ2_blockSort_bb15_in -> eval_BZ2_blockSort_bb15_in

     entry  : []
     non-rec: []
     rec    : [0=1]
     inv    : []

CRS eval_BZ2_blockSort_bb9_in(A,B)

  * Non Asymptotic Upper Bound: nat(A-B) 

  * LOOPS eval_BZ2_blockSort_bb9_in(C,D) -> eval_BZ2_blockSort_bb9_in(E,F)
     - [D+1=F,C=E,C>=F]

  * Ranking function: nat(C-D)

  * Invariants eval_BZ2_blockSort_bb9_in(A,B) -> eval_BZ2_blockSort_bb9_in(C,D)

     entry  : [B=0]
     non-rec: [A=C,B=D,B=0]
     rec    : [A=C,B=0,A>=D,D>=1]
     inv    : [D>=0,A=C,B=0]



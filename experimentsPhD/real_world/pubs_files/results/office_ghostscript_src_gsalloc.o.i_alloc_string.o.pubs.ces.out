This is PUBS, version 0.2.
Copyright (C) 2007, 2008, 2009 UPM, UCM.
This program comes with ABSOLUTELY NO WARRANTY.
This is free software, and you are welcome to
redistribute it under certain conditions.



CRS $pubs_aux_entry$(A) -- THE MAIN ENTRY

  * Non Asymptotic Upper Bound: 1+c(failed(schemes_failed,[scc=0,cr=eval_i_alloc_string_bb1_in/2])) 

  * LOOPS $pubs_aux_entry$(B) -> $pubs_aux_entry$(C)

  * Ranking function: N/A

  * Invariants $pubs_aux_entry$(A) -> $pubs_aux_entry$(B)

     entry  : []
     non-rec: [A=B]
     rec    : [0=1]
     inv    : [A=B]

CRS eval_i_alloc_string_start(A)

  * Non Asymptotic Upper Bound: 1+c(failed(schemes_failed,[scc=0,cr=eval_i_alloc_string_bb1_in/2])) 

  * LOOPS eval_i_alloc_string_start(B) -> eval_i_alloc_string_start(C)

  * Ranking function: N/A

  * Invariants eval_i_alloc_string_start(A) -> eval_i_alloc_string_start(B)

     entry  : []
     non-rec: [A=B]
     rec    : [0=1]
     inv    : [A=B]

CRS eval_i_alloc_string_bb0_in(A)

  * Non Asymptotic Upper Bound: 1+c(failed(schemes_failed,[scc=0,cr=eval_i_alloc_string_bb1_in/2])) 

  * LOOPS eval_i_alloc_string_bb0_in(B) -> eval_i_alloc_string_bb0_in(C)

  * Ranking function: N/A

  * Invariants eval_i_alloc_string_bb0_in(A) -> eval_i_alloc_string_bb0_in(B)

     entry  : []
     non-rec: [A=B]
     rec    : [0=1]
     inv    : [A=B]

CRS loop_cont_eval_i_alloc_string_bb1_in(A,B,C)

  * Non Asymptotic Upper Bound: 0 

  * LOOPS loop_cont_eval_i_alloc_string_bb1_in(D,E,F) -> loop_cont_eval_i_alloc_string_bb1_in(G,H,I)

  * Ranking function: N/A

  * Invariants loop_cont_eval_i_alloc_string_bb1_in(A,B,C) -> loop_cont_eval_i_alloc_string_bb1_in(D,E,F)

     entry  : []
     non-rec: [A=D,B=E,C=F]
     rec    : [0=1]
     inv    : [A=D,B=E,C=F]

CRS eval_i_alloc_string_13(A)

  * Non Asymptotic Upper Bound: 0 

  * LOOPS eval_i_alloc_string_13(B) -> eval_i_alloc_string_13(C)

  * Ranking function: N/A

  * Invariants eval_i_alloc_string_13(A) -> eval_i_alloc_string_13(B)

     entry  : []
     non-rec: [A=B]
     rec    : [0=1]
     inv    : [A=B]

CRS eval_i_alloc_string_14

  * Non Asymptotic Upper Bound: 0 

  * LOOPS eval_i_alloc_string_14 -> eval_i_alloc_string_14

  * Ranking function: N/A

  * Invariants eval_i_alloc_string_14 -> eval_i_alloc_string_14

     entry  : []
     non-rec: []
     rec    : [0=1]
     inv    : []

CRS eval_i_alloc_string_bb7_in

  * Non Asymptotic Upper Bound: 0 

  * LOOPS eval_i_alloc_string_bb7_in -> eval_i_alloc_string_bb7_in

  * Ranking function: N/A

  * Invariants eval_i_alloc_string_bb7_in -> eval_i_alloc_string_bb7_in

     entry  : []
     non-rec: []
     rec    : [0=1]
     inv    : []

CRS eval_i_alloc_string_bb1_in(A,B)

  * Non Asymptotic Upper Bound: c(failed(schemes_failed,[scc=0,cr=eval_i_alloc_string_bb1_in/2])) 

  * LOOPS eval_i_alloc_string_bb1_in(C,D) -> eval_i_alloc_string_bb1_in(E,F)
     - [C=E,D=F]

  * Ranking function: c(failed(no_rf,[scc=0,cr=eval_i_alloc_string_bb1_in/2]))

  * Invariants eval_i_alloc_string_bb1_in(A,B) -> eval_i_alloc_string_bb1_in(C,D)

     entry  : [A=B]
     non-rec: [A=C,B=D,A=B]
     rec    : [A=B,A=D,A=C]
     inv    : [A=B,A=C,A=D]



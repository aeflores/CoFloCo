This is PUBS, version 0.2.
Copyright (C) 2007, 2008, 2009 UPM, UCM.
This program comes with ABSOLUTELY NO WARRANTY.
This is free software, and you are welcome to
redistribute it under certain conditions.



CRS $pubs_aux_entry$(A) -- THE MAIN ENTRY

  * Non Asymptotic Upper Bound: 1+c(failed(schemes_failed,[scc=0,cr=eval_spgetcc_bb3_in/1])) 

  * LOOPS $pubs_aux_entry$(B) -> $pubs_aux_entry$(C)

  * Ranking function: N/A

  * Invariants $pubs_aux_entry$(A) -> $pubs_aux_entry$(B)

     entry  : []
     non-rec: [A=B]
     rec    : [0=1]
     inv    : [A=B]

CRS eval_spgetcc_start(A)

  * Non Asymptotic Upper Bound: 1+c(failed(schemes_failed,[scc=0,cr=eval_spgetcc_bb3_in/1])) 

  * LOOPS eval_spgetcc_start(B) -> eval_spgetcc_start(C)

  * Ranking function: N/A

  * Invariants eval_spgetcc_start(A) -> eval_spgetcc_start(B)

     entry  : []
     non-rec: [A=B]
     rec    : [0=1]
     inv    : [A=B]

CRS eval_spgetcc_bb0_in

  * Non Asymptotic Upper Bound: 1+c(failed(schemes_failed,[scc=0,cr=eval_spgetcc_bb3_in/1])) 

  * LOOPS eval_spgetcc_bb0_in -> eval_spgetcc_bb0_in

  * Ranking function: N/A

  * Invariants eval_spgetcc_bb0_in -> eval_spgetcc_bb0_in

     entry  : []
     non-rec: []
     rec    : [0=1]
     inv    : []

CRS eval_spgetcc_bb2_in

  * Non Asymptotic Upper Bound: 1+c(failed(schemes_failed,[scc=0,cr=eval_spgetcc_bb3_in/1])) 

  * LOOPS eval_spgetcc_bb2_in -> eval_spgetcc_bb2_in

  * Ranking function: N/A

  * Invariants eval_spgetcc_bb2_in -> eval_spgetcc_bb2_in

     entry  : []
     non-rec: []
     rec    : [0=1]
     inv    : []

CRS loop_cont_eval_spgetcc_bb3_in(A,B)

  * Non Asymptotic Upper Bound: 0 

  * LOOPS loop_cont_eval_spgetcc_bb3_in(C,D) -> loop_cont_eval_spgetcc_bb3_in(E,F)

  * Ranking function: N/A

  * Invariants loop_cont_eval_spgetcc_bb3_in(A,B) -> loop_cont_eval_spgetcc_bb3_in(C,D)

     entry  : []
     non-rec: [A=C,B=D]
     rec    : [0=1]
     inv    : [A=C,B=D]

CRS eval_spgetcc_bb9_in

  * Non Asymptotic Upper Bound: 0 

  * LOOPS eval_spgetcc_bb9_in -> eval_spgetcc_bb9_in

  * Ranking function: N/A

  * Invariants eval_spgetcc_bb9_in -> eval_spgetcc_bb9_in

     entry  : []
     non-rec: []
     rec    : [0=1]
     inv    : []

CRS eval_spgetcc_16

  * Non Asymptotic Upper Bound: 0 

  * LOOPS eval_spgetcc_16 -> eval_spgetcc_16

  * Ranking function: N/A

  * Invariants eval_spgetcc_16 -> eval_spgetcc_16

     entry  : []
     non-rec: []
     rec    : [0=1]
     inv    : []

CRS eval_spgetcc_17

  * Non Asymptotic Upper Bound: 0 

  * LOOPS eval_spgetcc_17 -> eval_spgetcc_17

  * Ranking function: N/A

  * Invariants eval_spgetcc_17 -> eval_spgetcc_17

     entry  : []
     non-rec: []
     rec    : [0=1]
     inv    : []

CRS eval_spgetcc_18

  * Non Asymptotic Upper Bound: 0 

  * LOOPS eval_spgetcc_18 -> eval_spgetcc_18

  * Ranking function: N/A

  * Invariants eval_spgetcc_18 -> eval_spgetcc_18

     entry  : []
     non-rec: []
     rec    : [0=1]
     inv    : []

CRS eval_spgetcc_19

  * Non Asymptotic Upper Bound: 0 

  * LOOPS eval_spgetcc_19 -> eval_spgetcc_19

  * Ranking function: N/A

  * Invariants eval_spgetcc_19 -> eval_spgetcc_19

     entry  : []
     non-rec: []
     rec    : [0=1]
     inv    : []

CRS eval_spgetcc_bb10_in

  * Non Asymptotic Upper Bound: 0 

  * LOOPS eval_spgetcc_bb10_in -> eval_spgetcc_bb10_in

  * Ranking function: N/A

  * Invariants eval_spgetcc_bb10_in -> eval_spgetcc_bb10_in

     entry  : []
     non-rec: []
     rec    : [0=1]
     inv    : []

CRS eval_spgetcc_bb3_in(A)

  * Non Asymptotic Upper Bound: c(failed(schemes_failed,[scc=0,cr=eval_spgetcc_bb3_in/1])) 

  * LOOPS eval_spgetcc_bb3_in(B) -> eval_spgetcc_bb3_in(C)
     - [B=C]

  * Ranking function: c(failed(no_rf,[scc=0,cr=eval_spgetcc_bb3_in/1]))

  * Invariants eval_spgetcc_bb3_in(A) -> eval_spgetcc_bb3_in(B)

     entry  : [A>=0,1>=A]
     non-rec: [A=B,A>=0,1>=A]
     rec    : [1>=B,B>=0,A=B]
     inv    : [A>=0,1>=A,A=B]



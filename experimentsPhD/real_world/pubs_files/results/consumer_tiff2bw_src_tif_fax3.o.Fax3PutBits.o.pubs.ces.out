This is PUBS, version 0.2.
Copyright (C) 2007, 2008, 2009 UPM, UCM.
This program comes with ABSOLUTELY NO WARRANTY.
This is free software, and you are welcome to
redistribute it under certain conditions.



CRS $pubs_aux_entry$(A,B) -- THE MAIN ENTRY

  * Non Asymptotic Upper Bound: 1+nat(c(maximize_failed))/4 

  * LOOPS $pubs_aux_entry$(C,D) -> $pubs_aux_entry$(E,F)

  * Ranking function: N/A

  * Invariants $pubs_aux_entry$(A,B) -> $pubs_aux_entry$(C,D)

     entry  : []
     non-rec: [A=C,B=D]
     rec    : [0=1]
     inv    : [A=C,B=D]

CRS eval_Fax3PutBits_start(A,B)

  * Non Asymptotic Upper Bound: 1+nat(c(maximize_failed))/4 

  * LOOPS eval_Fax3PutBits_start(C,D) -> eval_Fax3PutBits_start(E,F)

  * Ranking function: N/A

  * Invariants eval_Fax3PutBits_start(A,B) -> eval_Fax3PutBits_start(C,D)

     entry  : []
     non-rec: [A=C,B=D]
     rec    : [0=1]
     inv    : [A=C,B=D]

CRS eval_Fax3PutBits_bb0_in(A)

  * Non Asymptotic Upper Bound: 1+nat(c(maximize_failed))/4 

  * LOOPS eval_Fax3PutBits_bb0_in(B) -> eval_Fax3PutBits_bb0_in(C)

  * Ranking function: N/A

  * Invariants eval_Fax3PutBits_bb0_in(A) -> eval_Fax3PutBits_bb0_in(B)

     entry  : []
     non-rec: [A=B]
     rec    : [0=1]
     inv    : [A=B]

CRS loop_cont_eval_Fax3PutBits_bb1_in(A,B)

  * Non Asymptotic Upper Bound: 0 

  * LOOPS loop_cont_eval_Fax3PutBits_bb1_in(C,D) -> loop_cont_eval_Fax3PutBits_bb1_in(E,F)

  * Ranking function: N/A

  * Invariants loop_cont_eval_Fax3PutBits_bb1_in(A,B) -> loop_cont_eval_Fax3PutBits_bb1_in(C,D)

     entry  : [4>=A,A>=2]
     non-rec: [A=C,B=D,4>=A,A>=2]
     rec    : [0=1]
     inv    : [A>=2,4>=A,A=C,B=D]

CRS eval_Fax3PutBits_30

  * Non Asymptotic Upper Bound: 0 

  * LOOPS eval_Fax3PutBits_30 -> eval_Fax3PutBits_30

  * Ranking function: N/A

  * Invariants eval_Fax3PutBits_30 -> eval_Fax3PutBits_30

     entry  : []
     non-rec: []
     rec    : [0=1]
     inv    : []

CRS eval_Fax3PutBits_31

  * Non Asymptotic Upper Bound: 0 

  * LOOPS eval_Fax3PutBits_31 -> eval_Fax3PutBits_31

  * Ranking function: N/A

  * Invariants eval_Fax3PutBits_31 -> eval_Fax3PutBits_31

     entry  : []
     non-rec: []
     rec    : [0=1]
     inv    : []

CRS eval_Fax3PutBits_bb8_in

  * Non Asymptotic Upper Bound: 0 

  * LOOPS eval_Fax3PutBits_bb8_in -> eval_Fax3PutBits_bb8_in

  * Ranking function: N/A

  * Invariants eval_Fax3PutBits_bb8_in -> eval_Fax3PutBits_bb8_in

     entry  : []
     non-rec: []
     rec    : [0=1]
     inv    : []

CRS eval_Fax3PutBits_bb9_in

  * Non Asymptotic Upper Bound: 0 

  * LOOPS eval_Fax3PutBits_bb9_in -> eval_Fax3PutBits_bb9_in

  * Ranking function: N/A

  * Invariants eval_Fax3PutBits_bb9_in -> eval_Fax3PutBits_bb9_in

     entry  : []
     non-rec: []
     rec    : [0=1]
     inv    : []

CRS eval_Fax3PutBits_bb1_in(A,B)

  * Non Asymptotic Upper Bound: nat(-A+B+7)/4 

  * LOOPS eval_Fax3PutBits_bb1_in(C,D) -> eval_Fax3PutBits_bb1_in(E,F)
     - [C+F=D,E=8,D>=C+1]
     - [C+F=D,E=8,D>=C+1]

  * Ranking function: nat(-C/8+D/8+7/8)

  * Invariants eval_Fax3PutBits_bb1_in(A,B) -> eval_Fax3PutBits_bb1_in(C,D)

     entry  : []
     non-rec: [A=C,B=D]
     rec    : [C=8,D>=1,B>=A+D]
     inv    : [B+C>=A+D]



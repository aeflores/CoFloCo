This is PUBS, version 0.2.
Copyright (C) 2007, 2008, 2009 UPM, UCM.
This program comes with ABSOLUTELY NO WARRANTY.
This is free software, and you are welcome to
redistribute it under certain conditions.



CRS $pubs_aux_entry$(A,B) -- THE MAIN ENTRY

  * Non Asymptotic Upper Bound: 2+c(failed(schemes_failed,[scc=0,cr=eval_exitPGP_bb3_in/2]))+c(failed(schemes_failed,[scc=1,cr=eval_exitPGP_bb6_in/2])) 

  * LOOPS $pubs_aux_entry$(C,D) -> $pubs_aux_entry$(E,F)

  * Ranking function: N/A

  * Invariants $pubs_aux_entry$(A,B) -> $pubs_aux_entry$(C,D)

     entry  : []
     non-rec: [A=C,B=D]
     rec    : [0=1]
     inv    : [A=C,B=D]

CRS eval_exitPGP_start(A,B)

  * Non Asymptotic Upper Bound: 2+c(failed(schemes_failed,[scc=0,cr=eval_exitPGP_bb3_in/2]))+c(failed(schemes_failed,[scc=1,cr=eval_exitPGP_bb6_in/2])) 

  * LOOPS eval_exitPGP_start(C,D) -> eval_exitPGP_start(E,F)

  * Ranking function: N/A

  * Invariants eval_exitPGP_start(A,B) -> eval_exitPGP_start(C,D)

     entry  : []
     non-rec: [A=C,B=D]
     rec    : [0=1]
     inv    : [A=C,B=D]

CRS eval_exitPGP_bb0_in(A,B)

  * Non Asymptotic Upper Bound: 2+c(failed(schemes_failed,[scc=0,cr=eval_exitPGP_bb3_in/2]))+c(failed(schemes_failed,[scc=1,cr=eval_exitPGP_bb6_in/2])) 

  * LOOPS eval_exitPGP_bb0_in(C,D) -> eval_exitPGP_bb0_in(E,F)

  * Ranking function: N/A

  * Invariants eval_exitPGP_bb0_in(A,B) -> eval_exitPGP_bb0_in(C,D)

     entry  : []
     non-rec: [A=C,B=D]
     rec    : [0=1]
     inv    : [A=C,B=D]

CRS eval_exitPGP_2(A,B)

  * Non Asymptotic Upper Bound: 2+c(failed(schemes_failed,[scc=0,cr=eval_exitPGP_bb3_in/2]))+c(failed(schemes_failed,[scc=1,cr=eval_exitPGP_bb6_in/2])) 

  * LOOPS eval_exitPGP_2(C,D) -> eval_exitPGP_2(E,F)

  * Ranking function: N/A

  * Invariants eval_exitPGP_2(A,B) -> eval_exitPGP_2(C,D)

     entry  : []
     non-rec: [A=C,B=D]
     rec    : [0=1]
     inv    : [A=C,B=D]

CRS eval_exitPGP_3(A,B)

  * Non Asymptotic Upper Bound: 2+c(failed(schemes_failed,[scc=0,cr=eval_exitPGP_bb3_in/2]))+c(failed(schemes_failed,[scc=1,cr=eval_exitPGP_bb6_in/2])) 

  * LOOPS eval_exitPGP_3(C,D) -> eval_exitPGP_3(E,F)

  * Ranking function: N/A

  * Invariants eval_exitPGP_3(A,B) -> eval_exitPGP_3(C,D)

     entry  : []
     non-rec: [A=C,B=D]
     rec    : [0=1]
     inv    : [A=C,B=D]

CRS eval_exitPGP_bb2_in(A,B)

  * Non Asymptotic Upper Bound: 2+c(failed(schemes_failed,[scc=0,cr=eval_exitPGP_bb3_in/2]))+c(failed(schemes_failed,[scc=1,cr=eval_exitPGP_bb6_in/2])) 

  * LOOPS eval_exitPGP_bb2_in(C,D) -> eval_exitPGP_bb2_in(E,F)

  * Ranking function: N/A

  * Invariants eval_exitPGP_bb2_in(A,B) -> eval_exitPGP_bb2_in(C,D)

     entry  : []
     non-rec: [A=C,B=D]
     rec    : [0=1]
     inv    : [A=C,B=D]

CRS loop_cont_eval_exitPGP_bb3_in(A,B,C,D)

  * Non Asymptotic Upper Bound: 1+c(failed(schemes_failed,[scc=1,cr=eval_exitPGP_bb6_in/2])) 

  * LOOPS loop_cont_eval_exitPGP_bb3_in(E,F,G,H) -> loop_cont_eval_exitPGP_bb3_in(I,J,K,L)

  * Ranking function: N/A

  * Invariants loop_cont_eval_exitPGP_bb3_in(A,B,C,D) -> loop_cont_eval_exitPGP_bb3_in(E,F,G,H)

     entry  : []
     non-rec: [A=E,B=F,C=G,D=H]
     rec    : [0=1]
     inv    : [A=E,B=F,C=G,D=H]

CRS loop_cont_eval_exitPGP_bb6_in(A,B,C,D)

  * Non Asymptotic Upper Bound: 0 

  * LOOPS loop_cont_eval_exitPGP_bb6_in(E,F,G,H) -> loop_cont_eval_exitPGP_bb6_in(I,J,K,L)

  * Ranking function: N/A

  * Invariants loop_cont_eval_exitPGP_bb6_in(A,B,C,D) -> loop_cont_eval_exitPGP_bb6_in(E,F,G,H)

     entry  : []
     non-rec: [A=E,B=F,C=G,D=H]
     rec    : [0=1]
     inv    : [A=E,B=F,C=G,D=H]

CRS eval_exitPGP_8(A,B)

  * Non Asymptotic Upper Bound: 0 

  * LOOPS eval_exitPGP_8(C,D) -> eval_exitPGP_8(E,F)

  * Ranking function: N/A

  * Invariants eval_exitPGP_8(A,B) -> eval_exitPGP_8(C,D)

     entry  : []
     non-rec: [A=C,B=D]
     rec    : [0=1]
     inv    : [A=C,B=D]

CRS eval_exitPGP_9(A,B)

  * Non Asymptotic Upper Bound: 0 

  * LOOPS eval_exitPGP_9(C,D) -> eval_exitPGP_9(E,F)

  * Ranking function: N/A

  * Invariants eval_exitPGP_9(A,B) -> eval_exitPGP_9(C,D)

     entry  : []
     non-rec: [A=C,B=D]
     rec    : [0=1]
     inv    : [A=C,B=D]

CRS eval_exitPGP_10(A,B)

  * Non Asymptotic Upper Bound: 0 

  * LOOPS eval_exitPGP_10(C,D) -> eval_exitPGP_10(E,F)

  * Ranking function: N/A

  * Invariants eval_exitPGP_10(A,B) -> eval_exitPGP_10(C,D)

     entry  : []
     non-rec: [A=C,B=D]
     rec    : [0=1]
     inv    : [A=C,B=D]

CRS eval_exitPGP_11(A,B)

  * Non Asymptotic Upper Bound: 0 

  * LOOPS eval_exitPGP_11(C,D) -> eval_exitPGP_11(E,F)

  * Ranking function: N/A

  * Invariants eval_exitPGP_11(A,B) -> eval_exitPGP_11(C,D)

     entry  : []
     non-rec: [A=C,B=D]
     rec    : [0=1]
     inv    : [A=C,B=D]

CRS eval_exitPGP_12(A,B)

  * Non Asymptotic Upper Bound: 0 

  * LOOPS eval_exitPGP_12(C,D) -> eval_exitPGP_12(E,F)

  * Ranking function: N/A

  * Invariants eval_exitPGP_12(A,B) -> eval_exitPGP_12(C,D)

     entry  : []
     non-rec: [A=C,B=D]
     rec    : [0=1]
     inv    : [A=C,B=D]

CRS eval_exitPGP_bb10_in(A,B)

  * Non Asymptotic Upper Bound: 0 

  * LOOPS eval_exitPGP_bb10_in(C,D) -> eval_exitPGP_bb10_in(E,F)

  * Ranking function: N/A

  * Invariants eval_exitPGP_bb10_in(A,B) -> eval_exitPGP_bb10_in(C,D)

     entry  : []
     non-rec: [A=C,B=D]
     rec    : [0=1]
     inv    : [A=C,B=D]

CRS eval_exitPGP_13(A,B)

  * Non Asymptotic Upper Bound: 0 

  * LOOPS eval_exitPGP_13(C,D) -> eval_exitPGP_13(E,F)

  * Ranking function: N/A

  * Invariants eval_exitPGP_13(A,B) -> eval_exitPGP_13(C,D)

     entry  : []
     non-rec: [A=C,B=D]
     rec    : [0=1]
     inv    : [A=C,B=D]

CRS eval_exitPGP_14(A,B)

  * Non Asymptotic Upper Bound: 0 

  * LOOPS eval_exitPGP_14(C,D) -> eval_exitPGP_14(E,F)

  * Ranking function: N/A

  * Invariants eval_exitPGP_14(A,B) -> eval_exitPGP_14(C,D)

     entry  : []
     non-rec: [A=C,B=D]
     rec    : [0=1]
     inv    : [A=C,B=D]

CRS eval_exitPGP_15

  * Non Asymptotic Upper Bound: 0 

  * LOOPS eval_exitPGP_15 -> eval_exitPGP_15

  * Ranking function: N/A

  * Invariants eval_exitPGP_15 -> eval_exitPGP_15

     entry  : []
     non-rec: []
     rec    : [0=1]
     inv    : []

CRS eval_exitPGP_bb6_in(A,B)

  * Non Asymptotic Upper Bound: c(failed(schemes_failed,[scc=1,cr=eval_exitPGP_bb6_in/2])) 

  * LOOPS eval_exitPGP_bb6_in(C,D) -> eval_exitPGP_bb6_in(E,F)
     - [C=E,D=F]

  * Ranking function: c(failed(no_rf,[scc=1,cr=eval_exitPGP_bb6_in/2]))

  * Invariants eval_exitPGP_bb6_in(A,B) -> eval_exitPGP_bb6_in(C,D)

     entry  : []
     non-rec: [A=C,B=D]
     rec    : [A=C,B=D]
     inv    : [A=C,B=D]

CRS eval_exitPGP_bb3_in(A,B)

  * Non Asymptotic Upper Bound: c(failed(schemes_failed,[scc=0,cr=eval_exitPGP_bb3_in/2])) 

  * LOOPS eval_exitPGP_bb3_in(C,D) -> eval_exitPGP_bb3_in(E,F)
     - [C=E,D=F]

  * Ranking function: c(failed(no_rf,[scc=0,cr=eval_exitPGP_bb3_in/2]))

  * Invariants eval_exitPGP_bb3_in(A,B) -> eval_exitPGP_bb3_in(C,D)

     entry  : []
     non-rec: [A=C,B=D]
     rec    : [A=C,B=D]
     inv    : [A=C,B=D]



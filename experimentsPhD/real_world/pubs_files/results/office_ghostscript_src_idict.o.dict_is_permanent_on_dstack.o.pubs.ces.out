This is PUBS, version 0.2.
Copyright (C) 2007, 2008, 2009 UPM, UCM.
This program comes with ABSOLUTELY NO WARRANTY.
This is free software, and you are welcome to
redistribute it under certain conditions.



CRS $pubs_aux_entry$(A) -- THE MAIN ENTRY

  * Non Asymptotic Upper Bound: 1+nat(A) 

  * LOOPS $pubs_aux_entry$(B) -> $pubs_aux_entry$(C)

  * Ranking function: N/A

  * Invariants $pubs_aux_entry$(A) -> $pubs_aux_entry$(B)

     entry  : []
     non-rec: [A=B]
     rec    : [0=1]
     inv    : [A=B]

CRS eval_dict_is_permanent_on_dstack_start(A)

  * Non Asymptotic Upper Bound: 1+nat(A) 

  * LOOPS eval_dict_is_permanent_on_dstack_start(B) -> eval_dict_is_permanent_on_dstack_start(C)

  * Ranking function: N/A

  * Invariants eval_dict_is_permanent_on_dstack_start(A) -> eval_dict_is_permanent_on_dstack_start(B)

     entry  : []
     non-rec: [A=B]
     rec    : [0=1]
     inv    : [A=B]

CRS eval_dict_is_permanent_on_dstack_bb0_in(A)

  * Non Asymptotic Upper Bound: 1+nat(A) 

  * LOOPS eval_dict_is_permanent_on_dstack_bb0_in(B) -> eval_dict_is_permanent_on_dstack_bb0_in(C)

  * Ranking function: N/A

  * Invariants eval_dict_is_permanent_on_dstack_bb0_in(A) -> eval_dict_is_permanent_on_dstack_bb0_in(B)

     entry  : []
     non-rec: [A=B]
     rec    : [0=1]
     inv    : [A=B]

CRS loop_cont_eval_dict_is_permanent_on_dstack_bb2_in(A,B)

  * Non Asymptotic Upper Bound: 0 

  * LOOPS loop_cont_eval_dict_is_permanent_on_dstack_bb2_in(C,D) -> loop_cont_eval_dict_is_permanent_on_dstack_bb2_in(E,F)

  * Ranking function: N/A

  * Invariants loop_cont_eval_dict_is_permanent_on_dstack_bb2_in(A,B) -> loop_cont_eval_dict_is_permanent_on_dstack_bb2_in(C,D)

     entry  : [A=2]
     non-rec: [A=C,B=D,A=2]
     rec    : [0=1]
     inv    : [A=2,C=2,B=D]

CRS eval_dict_is_permanent_on_dstack_bb2_in(A,B)

  * Non Asymptotic Upper Bound: nat(A-B) 

  * LOOPS eval_dict_is_permanent_on_dstack_bb2_in(C,D) -> eval_dict_is_permanent_on_dstack_bb2_in(E,F)
     - [D+1=F,C=E,C>=F]

  * Ranking function: nat(C-D)

  * Invariants eval_dict_is_permanent_on_dstack_bb2_in(A,B) -> eval_dict_is_permanent_on_dstack_bb2_in(C,D)

     entry  : [B=0]
     non-rec: [A=C,B=D,B=0]
     rec    : [A=C,B=0,A>=D,D>=1]
     inv    : [D>=0,A=C,B=0]

CRS eval_dict_is_permanent_on_dstack_8(A)

  * Non Asymptotic Upper Bound: 1+nat(A) 

  * LOOPS eval_dict_is_permanent_on_dstack_8(B) -> eval_dict_is_permanent_on_dstack_8(C)

  * Ranking function: N/A

  * Invariants eval_dict_is_permanent_on_dstack_8(A) -> eval_dict_is_permanent_on_dstack_8(B)

     entry  : []
     non-rec: [A=B]
     rec    : [0=1]
     inv    : [A=B]

CRS eval_dict_is_permanent_on_dstack_9(A,B)

  * Non Asymptotic Upper Bound: 1+nat(A) 

  * LOOPS eval_dict_is_permanent_on_dstack_9(C,D) -> eval_dict_is_permanent_on_dstack_9(E,F)

  * Ranking function: N/A

  * Invariants eval_dict_is_permanent_on_dstack_9(A,B) -> eval_dict_is_permanent_on_dstack_9(C,D)

     entry  : []
     non-rec: [A=C,B=D]
     rec    : [0=1]
     inv    : [A=C,B=D]

CRS loop_cont_eval_dict_is_permanent_on_dstack_bb6_in(A,B)

  * Non Asymptotic Upper Bound: 0 

  * LOOPS loop_cont_eval_dict_is_permanent_on_dstack_bb6_in(C,D) -> loop_cont_eval_dict_is_permanent_on_dstack_bb6_in(E,F)

  * Ranking function: N/A

  * Invariants loop_cont_eval_dict_is_permanent_on_dstack_bb6_in(A,B) -> loop_cont_eval_dict_is_permanent_on_dstack_bb6_in(C,D)

     entry  : [A=2]
     non-rec: [A=C,B=D,A=2]
     rec    : [0=1]
     inv    : [A=2,C=2,B=D]

CRS eval_dict_is_permanent_on_dstack_bb9_in

  * Non Asymptotic Upper Bound: 0 

  * LOOPS eval_dict_is_permanent_on_dstack_bb9_in -> eval_dict_is_permanent_on_dstack_bb9_in

  * Ranking function: N/A

  * Invariants eval_dict_is_permanent_on_dstack_bb9_in -> eval_dict_is_permanent_on_dstack_bb9_in

     entry  : []
     non-rec: []
     rec    : [0=1]
     inv    : []

CRS eval_dict_is_permanent_on_dstack_bb6_in(A,B,C)

  * Non Asymptotic Upper Bound: nat(B-C) 

  * LOOPS eval_dict_is_permanent_on_dstack_bb6_in(D,E,F) -> eval_dict_is_permanent_on_dstack_bb6_in(G,H,I)
     - [F+1=I,D=G,E=H,E>=F+1]

  * Ranking function: nat(E-F)

  * Invariants eval_dict_is_permanent_on_dstack_bb6_in(A,B,C) -> eval_dict_is_permanent_on_dstack_bb6_in(D,E,F)

     entry  : [A+C=B]
     non-rec: [A=D,B=E,C=F,A+C=B]
     rec    : [B=E,A=D,A+C=B,B>=F,A+F>=B+1]
     inv    : [A+F>=B,A=D,B=E,A+C=B]



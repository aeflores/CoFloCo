This is PUBS, version 0.2.
Copyright (C) 2007, 2008, 2009 UPM, UCM.
This program comes with ABSOLUTELY NO WARRANTY.
This is free software, and you are welcome to
redistribute it under certain conditions.



CRS $pubs_aux_entry$(A,B) -- THE MAIN ENTRY

  * Non Asymptotic Upper Bound: 1+c(failed(schemes_failed,[scc=5,cr=eval_qsortx_bb2_in/2])) 

  * LOOPS $pubs_aux_entry$(C,D) -> $pubs_aux_entry$(E,F)

  * Ranking function: N/A

  * Invariants $pubs_aux_entry$(A,B) -> $pubs_aux_entry$(C,D)

     entry  : []
     non-rec: [A=C,B=D]
     rec    : [0=1]
     inv    : [A=C,B=D]

CRS eval_qsortx_start(A,B)

  * Non Asymptotic Upper Bound: 1+c(failed(schemes_failed,[scc=5,cr=eval_qsortx_bb2_in/2])) 

  * LOOPS eval_qsortx_start(C,D) -> eval_qsortx_start(E,F)

  * Ranking function: N/A

  * Invariants eval_qsortx_start(A,B) -> eval_qsortx_start(C,D)

     entry  : []
     non-rec: [A=C,B=D]
     rec    : [0=1]
     inv    : [A=C,B=D]

CRS eval_qsortx_bb0_in(A)

  * Non Asymptotic Upper Bound: 1+c(failed(schemes_failed,[scc=5,cr=eval_qsortx_bb2_in/2])) 

  * LOOPS eval_qsortx_bb0_in(B) -> eval_qsortx_bb0_in(C)

  * Ranking function: N/A

  * Invariants eval_qsortx_bb0_in(A) -> eval_qsortx_bb0_in(B)

     entry  : []
     non-rec: [A=B]
     rec    : [0=1]
     inv    : [A=B]

CRS loop_cont_eval_qsortx_bb2_in(A,B)

  * Non Asymptotic Upper Bound: 0 

  * LOOPS loop_cont_eval_qsortx_bb2_in(C,D) -> loop_cont_eval_qsortx_bb2_in(E,F)

  * Ranking function: N/A

  * Invariants loop_cont_eval_qsortx_bb2_in(A,B) -> loop_cont_eval_qsortx_bb2_in(C,D)

     entry  : []
     non-rec: [A=C,B=D]
     rec    : [0=1]
     inv    : [A=C,B=D]

CRS eval_qsortx_bb2_in(A,B)

  * Non Asymptotic Upper Bound: c(failed(schemes_failed,[scc=5,cr=eval_qsortx_bb2_in/2])) 

  * LOOPS eval_qsortx_bb2_in(C,D) -> eval_qsortx_bb2_in(E,F)
     - [C=E,D=F]
     - [D=F,C=E,D>=1]
     - [D=F,C=E,0>=D+1]
     - [D=F,C=E,D>=1]
     - [D=F,C=E,0>=D+1]
     - []
     - []
     - []
     - []
     - [D>=1]
     - [D>=1]
     - [D>=1]
     - [D>=1]
     - [0>=D+1]
     - [0>=D+1]
     - [0>=D+1]
     - [0>=D+1]
     - [0>=D+1]
     - [0>=D+1]
     - [0>=D+1]
     - [0>=D+1]
     - [0>=D+1]
     - [0>=D+1]
     - [0>=D+1]
     - [0>=D+1]
     - [D>=1]
     - [D>=1]
     - [D>=1]
     - [D>=1]
     - [D>=1]
     - [D>=1]
     - [D>=1]
     - [D>=1]
     - [D>=1]
     - [D>=1]
     - [D>=1]
     - [D>=1]
     - [0>=D+1]
     - [0>=D+1]
     - [0>=D+1]
     - [0>=D+1]

  * Ranking function: c(failed(no_rf,[scc=5,cr=eval_qsortx_bb2_in/2]))

  * Invariants eval_qsortx_bb2_in(A,B) -> eval_qsortx_bb2_in(C,D)

     entry  : [A=B]
     non-rec: [A=C,B=D,A=B]
     rec    : [A=B]
     inv    : [A=B]

CRS eval_qsortx_bb5_in(A,B)

  * Non Asymptotic Upper Bound: c(failed(schemes_failed,[scc=4,cr=eval_qsortx_bb5_in/2])) 

  * LOOPS eval_qsortx_bb5_in(C,D) -> eval_qsortx_bb5_in(E,F)
     - []
     - []
     - []
     - []

  * Ranking function: c(failed(no_rf,[scc=4,cr=eval_qsortx_bb5_in/2]))

  * Invariants eval_qsortx_bb5_in(A,B) -> eval_qsortx_bb5_in(C,D)

     entry  : []
     non-rec: [A=C,B=D]
     rec    : []
     inv    : []

CRS eval_qsortx_bb8_in(A,B)

  * Non Asymptotic Upper Bound: c(failed(schemes_failed,[scc=3,cr=eval_qsortx_bb8_in/2])) 

  * LOOPS eval_qsortx_bb8_in(C,D) -> eval_qsortx_bb8_in(E,F)
     - [C=E,D=F]

  * Ranking function: c(failed(no_rf,[scc=3,cr=eval_qsortx_bb8_in/2]))

  * Invariants eval_qsortx_bb8_in(A,B) -> eval_qsortx_bb8_in(C,D)

     entry  : []
     non-rec: [A=C,B=D]
     rec    : [A=C,B=D]
     inv    : [A=C,B=D]

CRS eval_qsortx_bb6_in(A,B)

  * Non Asymptotic Upper Bound: c(failed(schemes_failed,[scc=2,cr=eval_qsortx_bb6_in/2])) 

  * LOOPS eval_qsortx_bb6_in(C,D) -> eval_qsortx_bb6_in(E,F)
     - [C=E,D=F]

  * Ranking function: c(failed(no_rf,[scc=2,cr=eval_qsortx_bb6_in/2]))

  * Invariants eval_qsortx_bb6_in(A,B) -> eval_qsortx_bb6_in(C,D)

     entry  : []
     non-rec: [A=C,B=D]
     rec    : [A=C,B=D]
     inv    : [A=C,B=D]

CRS eval_qsortx_bb20_in

  * Non Asymptotic Upper Bound: 0 

  * LOOPS eval_qsortx_bb20_in -> eval_qsortx_bb20_in

  * Ranking function: N/A

  * Invariants eval_qsortx_bb20_in -> eval_qsortx_bb20_in

     entry  : []
     non-rec: []
     rec    : [0=1]
     inv    : []



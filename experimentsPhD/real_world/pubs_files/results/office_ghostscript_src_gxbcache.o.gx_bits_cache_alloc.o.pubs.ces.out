This is PUBS, version 0.2.
Copyright (C) 2007, 2008, 2009 UPM, UCM.
This program comes with ABSOLUTELY NO WARRANTY.
This is free software, and you are welcome to
redistribute it under certain conditions.



CRS $pubs_aux_entry$(A) -- THE MAIN ENTRY

  * Non Asymptotic Upper Bound: 1+c(failed(schemes_failed,[scc=2,cr=eval_gx_bits_cache_alloc_bb3_in/3])) 

  * LOOPS $pubs_aux_entry$(B) -> $pubs_aux_entry$(C)

  * Ranking function: N/A

  * Invariants $pubs_aux_entry$(A) -> $pubs_aux_entry$(B)

     entry  : []
     non-rec: [A=B]
     rec    : [0=1]
     inv    : [A=B]

CRS eval_gx_bits_cache_alloc_start(A)

  * Non Asymptotic Upper Bound: 1+c(failed(schemes_failed,[scc=2,cr=eval_gx_bits_cache_alloc_bb3_in/3])) 

  * LOOPS eval_gx_bits_cache_alloc_start(B) -> eval_gx_bits_cache_alloc_start(C)

  * Ranking function: N/A

  * Invariants eval_gx_bits_cache_alloc_start(A) -> eval_gx_bits_cache_alloc_start(B)

     entry  : []
     non-rec: [A=B]
     rec    : [0=1]
     inv    : [A=B]

CRS eval_gx_bits_cache_alloc_bb0_in(A)

  * Non Asymptotic Upper Bound: 1+c(failed(schemes_failed,[scc=2,cr=eval_gx_bits_cache_alloc_bb3_in/3])) 

  * LOOPS eval_gx_bits_cache_alloc_bb0_in(B) -> eval_gx_bits_cache_alloc_bb0_in(C)

  * Ranking function: N/A

  * Invariants eval_gx_bits_cache_alloc_bb0_in(A) -> eval_gx_bits_cache_alloc_bb0_in(B)

     entry  : []
     non-rec: [A=B]
     rec    : [0=1]
     inv    : [A=B]

CRS loop_cont_eval_gx_bits_cache_alloc_bb3_in(A,B)

  * Non Asymptotic Upper Bound: 0 

  * LOOPS loop_cont_eval_gx_bits_cache_alloc_bb3_in(C,D) -> loop_cont_eval_gx_bits_cache_alloc_bb3_in(E,F)

  * Ranking function: N/A

  * Invariants loop_cont_eval_gx_bits_cache_alloc_bb3_in(A,B) -> loop_cont_eval_gx_bits_cache_alloc_bb3_in(C,D)

     entry  : []
     non-rec: [A=C,B=D]
     rec    : [0=1]
     inv    : [A=C,B=D]

CRS eval_gx_bits_cache_alloc_bb8_in

  * Non Asymptotic Upper Bound: 0 

  * LOOPS eval_gx_bits_cache_alloc_bb8_in -> eval_gx_bits_cache_alloc_bb8_in

  * Ranking function: N/A

  * Invariants eval_gx_bits_cache_alloc_bb8_in -> eval_gx_bits_cache_alloc_bb8_in

     entry  : []
     non-rec: []
     rec    : [0=1]
     inv    : []

CRS eval_gx_bits_cache_alloc_bb11_in

  * Non Asymptotic Upper Bound: 0 

  * LOOPS eval_gx_bits_cache_alloc_bb11_in -> eval_gx_bits_cache_alloc_bb11_in

  * Ranking function: N/A

  * Invariants eval_gx_bits_cache_alloc_bb11_in -> eval_gx_bits_cache_alloc_bb11_in

     entry  : []
     non-rec: []
     rec    : [0=1]
     inv    : []

CRS eval_gx_bits_cache_alloc_bb3_in(A,B,C)

  * Non Asymptotic Upper Bound: c(failed(schemes_failed,[scc=2,cr=eval_gx_bits_cache_alloc_bb3_in/3])) 

  * LOOPS eval_gx_bits_cache_alloc_bb3_in(D,E,F) -> eval_gx_bits_cache_alloc_bb3_in(G,H,I)
     - [E=H,D=G,D>=F+1,H>=F+1]
     - [E=H,D=G,D>=F+1,F>=H+1]

  * Ranking function: c(failed(no_rf,[scc=2,cr=eval_gx_bits_cache_alloc_bb3_in/3]))

  * Invariants eval_gx_bits_cache_alloc_bb3_in(A,B,C) -> eval_gx_bits_cache_alloc_bb3_in(D,E,F)

     entry  : [C=0,A=B+8]
     non-rec: [A=D,B=E,C=F,C=0,A=B+8]
     rec    : [A>=1,A=B+8,C=0,A=D,A=E+8]
     inv    : [C=0,A=D,A=E+8,A=B+8]

CRS eval_gx_bits_cache_alloc_bb12_in

  * Non Asymptotic Upper Bound: 0 

  * LOOPS eval_gx_bits_cache_alloc_bb12_in -> eval_gx_bits_cache_alloc_bb12_in

  * Ranking function: N/A

  * Invariants eval_gx_bits_cache_alloc_bb12_in -> eval_gx_bits_cache_alloc_bb12_in

     entry  : []
     non-rec: []
     rec    : [0=1]
     inv    : []



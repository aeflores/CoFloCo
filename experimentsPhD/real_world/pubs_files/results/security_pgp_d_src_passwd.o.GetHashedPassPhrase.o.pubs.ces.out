This is PUBS, version 0.2.
Copyright (C) 2007, 2008, 2009 UPM, UCM.
This program comes with ABSOLUTELY NO WARRANTY.
This is free software, and you are welcome to
redistribute it under certain conditions.



CRS $pubs_aux_entry$(A,B,C,D) -- THE MAIN ENTRY

  * Non Asymptotic Upper Bound: 1+c(failed(schemes_failed,[scc=0,cr=eval_GetHashedPassPhrase_bb1_in/5])) 

  * LOOPS $pubs_aux_entry$(E,F,G,H) -> $pubs_aux_entry$(I,J,K,L)

  * Ranking function: N/A

  * Invariants $pubs_aux_entry$(A,B,C,D) -> $pubs_aux_entry$(E,F,G,H)

     entry  : []
     non-rec: [A=E,B=F,C=G,D=H]
     rec    : [0=1]
     inv    : [A=E,B=F,C=G,D=H]

CRS eval_GetHashedPassPhrase_start(A,B,C,D)

  * Non Asymptotic Upper Bound: 1+c(failed(schemes_failed,[scc=0,cr=eval_GetHashedPassPhrase_bb1_in/5])) 

  * LOOPS eval_GetHashedPassPhrase_start(E,F,G,H) -> eval_GetHashedPassPhrase_start(I,J,K,L)

  * Ranking function: N/A

  * Invariants eval_GetHashedPassPhrase_start(A,B,C,D) -> eval_GetHashedPassPhrase_start(E,F,G,H)

     entry  : []
     non-rec: [A=E,B=F,C=G,D=H]
     rec    : [0=1]
     inv    : [A=E,B=F,C=G,D=H]

CRS eval_GetHashedPassPhrase_bb0_in(A,B,C,D)

  * Non Asymptotic Upper Bound: 1+c(failed(schemes_failed,[scc=0,cr=eval_GetHashedPassPhrase_bb1_in/5])) 

  * LOOPS eval_GetHashedPassPhrase_bb0_in(E,F,G,H) -> eval_GetHashedPassPhrase_bb0_in(I,J,K,L)

  * Ranking function: N/A

  * Invariants eval_GetHashedPassPhrase_bb0_in(A,B,C,D) -> eval_GetHashedPassPhrase_bb0_in(E,F,G,H)

     entry  : []
     non-rec: [A=E,B=F,C=G,D=H]
     rec    : [0=1]
     inv    : [A=E,B=F,C=G,D=H]

CRS loop_cont_eval_GetHashedPassPhrase_bb1_in(A,B,C,D,E)

  * Non Asymptotic Upper Bound: 0 

  * LOOPS loop_cont_eval_GetHashedPassPhrase_bb1_in(F,G,H,I,J) -> loop_cont_eval_GetHashedPassPhrase_bb1_in(K,L,M,N,O)

  * Ranking function: N/A

  * Invariants loop_cont_eval_GetHashedPassPhrase_bb1_in(A,B,C,D,E) -> loop_cont_eval_GetHashedPassPhrase_bb1_in(F,G,H,I,J)

     entry  : []
     non-rec: [A=F,B=G,C=H,D=I,E=J]
     rec    : [0=1]
     inv    : [A=F,B=G,C=H,D=I,E=J]

CRS eval_GetHashedPassPhrase_bb3_in(A,B,C)

  * Non Asymptotic Upper Bound: 0 

  * LOOPS eval_GetHashedPassPhrase_bb3_in(D,E,F) -> eval_GetHashedPassPhrase_bb3_in(G,H,I)

  * Ranking function: N/A

  * Invariants eval_GetHashedPassPhrase_bb3_in(A,B,C) -> eval_GetHashedPassPhrase_bb3_in(D,E,F)

     entry  : []
     non-rec: [A=D,B=E,C=F]
     rec    : [0=1]
     inv    : [A=D,B=E,C=F]

CRS eval_GetHashedPassPhrase_bb6_in(A,B,C)

  * Non Asymptotic Upper Bound: 0 

  * LOOPS eval_GetHashedPassPhrase_bb6_in(D,E,F) -> eval_GetHashedPassPhrase_bb6_in(G,H,I)

  * Ranking function: N/A

  * Invariants eval_GetHashedPassPhrase_bb6_in(A,B,C) -> eval_GetHashedPassPhrase_bb6_in(D,E,F)

     entry  : []
     non-rec: [A=D,B=E,C=F]
     rec    : [0=1]
     inv    : [A=D,B=E,C=F]

CRS eval_GetHashedPassPhrase_24(A,B,C)

  * Non Asymptotic Upper Bound: 0 

  * LOOPS eval_GetHashedPassPhrase_24(D,E,F) -> eval_GetHashedPassPhrase_24(G,H,I)

  * Ranking function: N/A

  * Invariants eval_GetHashedPassPhrase_24(A,B,C) -> eval_GetHashedPassPhrase_24(D,E,F)

     entry  : []
     non-rec: [A=D,B=E,C=F]
     rec    : [0=1]
     inv    : [A=D,B=E,C=F]

CRS eval_GetHashedPassPhrase_25(A,B,C)

  * Non Asymptotic Upper Bound: 0 

  * LOOPS eval_GetHashedPassPhrase_25(D,E,F) -> eval_GetHashedPassPhrase_25(G,H,I)

  * Ranking function: N/A

  * Invariants eval_GetHashedPassPhrase_25(A,B,C) -> eval_GetHashedPassPhrase_25(D,E,F)

     entry  : []
     non-rec: [A=D,B=E,C=F]
     rec    : [0=1]
     inv    : [A=D,B=E,C=F]

CRS eval_GetHashedPassPhrase_bb7_in(A,B,C)

  * Non Asymptotic Upper Bound: 0 

  * LOOPS eval_GetHashedPassPhrase_bb7_in(D,E,F) -> eval_GetHashedPassPhrase_bb7_in(G,H,I)

  * Ranking function: N/A

  * Invariants eval_GetHashedPassPhrase_bb7_in(A,B,C) -> eval_GetHashedPassPhrase_bb7_in(D,E,F)

     entry  : []
     non-rec: [A=D,B=E,C=F]
     rec    : [0=1]
     inv    : [A=D,B=E,C=F]

CRS eval_GetHashedPassPhrase_26(A,B,C)

  * Non Asymptotic Upper Bound: 0 

  * LOOPS eval_GetHashedPassPhrase_26(D,E,F) -> eval_GetHashedPassPhrase_26(G,H,I)

  * Ranking function: N/A

  * Invariants eval_GetHashedPassPhrase_26(A,B,C) -> eval_GetHashedPassPhrase_26(D,E,F)

     entry  : []
     non-rec: [A=D,B=E,C=F]
     rec    : [0=1]
     inv    : [A=D,B=E,C=F]

CRS eval_GetHashedPassPhrase_27(A,B,C)

  * Non Asymptotic Upper Bound: 0 

  * LOOPS eval_GetHashedPassPhrase_27(D,E,F) -> eval_GetHashedPassPhrase_27(G,H,I)

  * Ranking function: N/A

  * Invariants eval_GetHashedPassPhrase_27(A,B,C) -> eval_GetHashedPassPhrase_27(D,E,F)

     entry  : []
     non-rec: [A=D,B=E,C=F]
     rec    : [0=1]
     inv    : [A=D,B=E,C=F]

CRS eval_GetHashedPassPhrase_29(A,B,C)

  * Non Asymptotic Upper Bound: 0 

  * LOOPS eval_GetHashedPassPhrase_29(D,E,F) -> eval_GetHashedPassPhrase_29(G,H,I)

  * Ranking function: N/A

  * Invariants eval_GetHashedPassPhrase_29(A,B,C) -> eval_GetHashedPassPhrase_29(D,E,F)

     entry  : []
     non-rec: [A=D,B=E,C=F]
     rec    : [0=1]
     inv    : [A=D,B=E,C=F]

CRS eval_GetHashedPassPhrase_30(A,B,C,D)

  * Non Asymptotic Upper Bound: 0 

  * LOOPS eval_GetHashedPassPhrase_30(E,F,G,H) -> eval_GetHashedPassPhrase_30(I,J,K,L)

  * Ranking function: N/A

  * Invariants eval_GetHashedPassPhrase_30(A,B,C,D) -> eval_GetHashedPassPhrase_30(E,F,G,H)

     entry  : []
     non-rec: [A=E,B=F,C=G,D=H]
     rec    : [0=1]
     inv    : [A=E,B=F,C=G,D=H]

CRS eval_GetHashedPassPhrase_31(A,B,C,D)

  * Non Asymptotic Upper Bound: 0 

  * LOOPS eval_GetHashedPassPhrase_31(E,F,G,H) -> eval_GetHashedPassPhrase_31(I,J,K,L)

  * Ranking function: N/A

  * Invariants eval_GetHashedPassPhrase_31(A,B,C,D) -> eval_GetHashedPassPhrase_31(E,F,G,H)

     entry  : []
     non-rec: [A=E,B=F,C=G,D=H]
     rec    : [0=1]
     inv    : [A=E,B=F,C=G,D=H]

CRS eval_GetHashedPassPhrase_32(A,B,C)

  * Non Asymptotic Upper Bound: 0 

  * LOOPS eval_GetHashedPassPhrase_32(D,E,F) -> eval_GetHashedPassPhrase_32(G,H,I)

  * Ranking function: N/A

  * Invariants eval_GetHashedPassPhrase_32(A,B,C) -> eval_GetHashedPassPhrase_32(D,E,F)

     entry  : []
     non-rec: [A=D,B=E,C=F]
     rec    : [0=1]
     inv    : [A=D,B=E,C=F]

CRS eval_GetHashedPassPhrase_33(A,B,C)

  * Non Asymptotic Upper Bound: 0 

  * LOOPS eval_GetHashedPassPhrase_33(D,E,F) -> eval_GetHashedPassPhrase_33(G,H,I)

  * Ranking function: N/A

  * Invariants eval_GetHashedPassPhrase_33(A,B,C) -> eval_GetHashedPassPhrase_33(D,E,F)

     entry  : []
     non-rec: [A=D,B=E,C=F]
     rec    : [0=1]
     inv    : [A=D,B=E,C=F]

CRS eval_GetHashedPassPhrase_34

  * Non Asymptotic Upper Bound: 0 

  * LOOPS eval_GetHashedPassPhrase_34 -> eval_GetHashedPassPhrase_34

  * Ranking function: N/A

  * Invariants eval_GetHashedPassPhrase_34 -> eval_GetHashedPassPhrase_34

     entry  : []
     non-rec: []
     rec    : [0=1]
     inv    : []

CRS eval_GetHashedPassPhrase_bb9_in

  * Non Asymptotic Upper Bound: 0 

  * LOOPS eval_GetHashedPassPhrase_bb9_in -> eval_GetHashedPassPhrase_bb9_in

  * Ranking function: N/A

  * Invariants eval_GetHashedPassPhrase_bb9_in -> eval_GetHashedPassPhrase_bb9_in

     entry  : []
     non-rec: []
     rec    : [0=1]
     inv    : []

CRS eval_GetHashedPassPhrase_bb1_in(A,B,C,D,E)

  * Non Asymptotic Upper Bound: c(failed(schemes_failed,[scc=0,cr=eval_GetHashedPassPhrase_bb1_in/5])) 

  * LOOPS eval_GetHashedPassPhrase_bb1_in(F,G,H,I,J) -> eval_GetHashedPassPhrase_bb1_in(K,L,M,N,O)
     - [J=O,G=L,H=M,F=K,I=N,O>=2,0>=N+1]
     - [F=K,G=L,H=M,J=O,I=N,N>=1,J>=2]
     - [J=O,G=L,H=M,N=0,I=0,F=K,J>=2]

  * Ranking function: c(failed(no_rf,[scc=0,cr=eval_GetHashedPassPhrase_bb1_in/5]))

  * Invariants eval_GetHashedPassPhrase_bb1_in(A,B,C,D,E) -> eval_GetHashedPassPhrase_bb1_in(F,G,H,I,J)

     entry  : [D=E]
     non-rec: [A=F,B=G,C=H,D=I,E=J,D=E]
     rec    : [D=J,D=I,C=H,B=G,A=F,D=E,D>=2]
     inv    : [D=E,A=F,B=G,C=H,D=I,D=J]



This is PUBS, version 0.2.
Copyright (C) 2007, 2008, 2009 UPM, UCM.
This program comes with ABSOLUTELY NO WARRANTY.
This is free software, and you are welcome to
redistribute it under certain conditions.



CRS $pubs_aux_entry$(A,B,C) -- THE MAIN ENTRY

  * Non Asymptotic Upper Bound: 2+nat(1*B)/32+c(failed(schemes_failed,[scc=1,cr=eval_mad_bit_crc_bb7_in/1])) 

  * LOOPS $pubs_aux_entry$(D,E,F) -> $pubs_aux_entry$(G,H,I)

  * Ranking function: N/A

  * Invariants $pubs_aux_entry$(A,B,C) -> $pubs_aux_entry$(D,E,F)

     entry  : []
     non-rec: [A=D,B=E,C=F]
     rec    : [0=1]
     inv    : [A=D,B=E,C=F]

CRS eval_mad_bit_crc_start(A,B,C)

  * Non Asymptotic Upper Bound: 2+nat(1*B)/32+c(failed(schemes_failed,[scc=1,cr=eval_mad_bit_crc_bb7_in/1])) 

  * LOOPS eval_mad_bit_crc_start(D,E,F) -> eval_mad_bit_crc_start(G,H,I)

  * Ranking function: N/A

  * Invariants eval_mad_bit_crc_start(A,B,C) -> eval_mad_bit_crc_start(D,E,F)

     entry  : []
     non-rec: [A=D,B=E,C=F]
     rec    : [0=1]
     inv    : [A=D,B=E,C=F]

CRS eval_mad_bit_crc_bb0_in(A)

  * Non Asymptotic Upper Bound: 2+nat(1*A)/32+c(failed(schemes_failed,[scc=1,cr=eval_mad_bit_crc_bb7_in/1])) 

  * LOOPS eval_mad_bit_crc_bb0_in(B) -> eval_mad_bit_crc_bb0_in(C)

  * Ranking function: N/A

  * Invariants eval_mad_bit_crc_bb0_in(A) -> eval_mad_bit_crc_bb0_in(B)

     entry  : []
     non-rec: [A=B]
     rec    : [0=1]
     inv    : [A=B]

CRS loop_cont_eval_mad_bit_crc_bb1_in(A,B,C)

  * Non Asymptotic Upper Bound: 1+c(failed(schemes_failed,[scc=1,cr=eval_mad_bit_crc_bb7_in/1])) 

  * LOOPS loop_cont_eval_mad_bit_crc_bb1_in(D,E,F) -> loop_cont_eval_mad_bit_crc_bb1_in(G,H,I)

  * Ranking function: N/A

  * Invariants loop_cont_eval_mad_bit_crc_bb1_in(A,B,C) -> loop_cont_eval_mad_bit_crc_bb1_in(D,E,F)

     entry  : []
     non-rec: [A=D,B=E,C=F]
     rec    : [0=1]
     inv    : [A=D,B=E,C=F]

CRS eval_mad_bit_crc_NewDefault_in(A)

  * Non Asymptotic Upper Bound: 1+c(failed(schemes_failed,[scc=1,cr=eval_mad_bit_crc_bb7_in/1])) 

  * LOOPS eval_mad_bit_crc_NewDefault_in(B) -> eval_mad_bit_crc_NewDefault_in(C)

  * Ranking function: N/A

  * Invariants eval_mad_bit_crc_NewDefault_in(A) -> eval_mad_bit_crc_NewDefault_in(B)

     entry  : []
     non-rec: [A=B]
     rec    : [0=1]
     inv    : [A=B]

CRS eval_mad_bit_crc_48(A)

  * Non Asymptotic Upper Bound: 1+c(failed(schemes_failed,[scc=1,cr=eval_mad_bit_crc_bb7_in/1])) 

  * LOOPS eval_mad_bit_crc_48(B) -> eval_mad_bit_crc_48(C)

  * Ranking function: N/A

  * Invariants eval_mad_bit_crc_48(A) -> eval_mad_bit_crc_48(B)

     entry  : []
     non-rec: [A=B]
     rec    : [0=1]
     inv    : [A=B]

CRS eval_mad_bit_crc_49(A)

  * Non Asymptotic Upper Bound: 1+c(failed(schemes_failed,[scc=1,cr=eval_mad_bit_crc_bb7_in/1])) 

  * LOOPS eval_mad_bit_crc_49(B) -> eval_mad_bit_crc_49(C)

  * Ranking function: N/A

  * Invariants eval_mad_bit_crc_49(A) -> eval_mad_bit_crc_49(B)

     entry  : []
     non-rec: [A=B]
     rec    : [0=1]
     inv    : [A=B]

CRS eval_mad_bit_crc_bb5_in(A)

  * Non Asymptotic Upper Bound: 1+c(failed(schemes_failed,[scc=1,cr=eval_mad_bit_crc_bb7_in/1])) 

  * LOOPS eval_mad_bit_crc_bb5_in(B) -> eval_mad_bit_crc_bb5_in(C)

  * Ranking function: N/A

  * Invariants eval_mad_bit_crc_bb5_in(A) -> eval_mad_bit_crc_bb5_in(B)

     entry  : []
     non-rec: [A=B]
     rec    : [0=1]
     inv    : [A=B]

CRS eval_mad_bit_crc_58(A)

  * Non Asymptotic Upper Bound: 1+c(failed(schemes_failed,[scc=1,cr=eval_mad_bit_crc_bb7_in/1])) 

  * LOOPS eval_mad_bit_crc_58(B) -> eval_mad_bit_crc_58(C)

  * Ranking function: N/A

  * Invariants eval_mad_bit_crc_58(A) -> eval_mad_bit_crc_58(B)

     entry  : []
     non-rec: [A=B]
     rec    : [0=1]
     inv    : [A=B]

CRS eval_mad_bit_crc_59(A)

  * Non Asymptotic Upper Bound: 1+c(failed(schemes_failed,[scc=1,cr=eval_mad_bit_crc_bb7_in/1])) 

  * LOOPS eval_mad_bit_crc_59(B) -> eval_mad_bit_crc_59(C)

  * Ranking function: N/A

  * Invariants eval_mad_bit_crc_59(A) -> eval_mad_bit_crc_59(B)

     entry  : []
     non-rec: [A=B]
     rec    : [0=1]
     inv    : [A=B]

CRS eval_mad_bit_crc_bb6_in(A)

  * Non Asymptotic Upper Bound: 1+c(failed(schemes_failed,[scc=1,cr=eval_mad_bit_crc_bb7_in/1])) 

  * LOOPS eval_mad_bit_crc_bb6_in(B) -> eval_mad_bit_crc_bb6_in(C)

  * Ranking function: N/A

  * Invariants eval_mad_bit_crc_bb6_in(A) -> eval_mad_bit_crc_bb6_in(B)

     entry  : []
     non-rec: [A=B]
     rec    : [0=1]
     inv    : [A=B]

CRS eval_mad_bit_crc_68(A)

  * Non Asymptotic Upper Bound: 1+c(failed(schemes_failed,[scc=1,cr=eval_mad_bit_crc_bb7_in/1])) 

  * LOOPS eval_mad_bit_crc_68(B) -> eval_mad_bit_crc_68(C)

  * Ranking function: N/A

  * Invariants eval_mad_bit_crc_68(A) -> eval_mad_bit_crc_68(B)

     entry  : []
     non-rec: [A=B]
     rec    : [0=1]
     inv    : [A=B]

CRS eval_mad_bit_crc_69(A)

  * Non Asymptotic Upper Bound: 1+c(failed(schemes_failed,[scc=1,cr=eval_mad_bit_crc_bb7_in/1])) 

  * LOOPS eval_mad_bit_crc_69(B) -> eval_mad_bit_crc_69(C)

  * Ranking function: N/A

  * Invariants eval_mad_bit_crc_69(A) -> eval_mad_bit_crc_69(B)

     entry  : []
     non-rec: [A=B]
     rec    : [0=1]
     inv    : [A=B]

CRS loop_cont_eval_mad_bit_crc_bb7_in(A,B)

  * Non Asymptotic Upper Bound: 0 

  * LOOPS loop_cont_eval_mad_bit_crc_bb7_in(C,D) -> loop_cont_eval_mad_bit_crc_bb7_in(E,F)

  * Ranking function: N/A

  * Invariants loop_cont_eval_mad_bit_crc_bb7_in(A,B) -> loop_cont_eval_mad_bit_crc_bb7_in(C,D)

     entry  : []
     non-rec: [A=C,B=D]
     rec    : [0=1]
     inv    : [A=C,B=D]

CRS eval_mad_bit_crc_bb7_in(A)

  * Non Asymptotic Upper Bound: c(failed(schemes_failed,[scc=1,cr=eval_mad_bit_crc_bb7_in/1])) 

  * LOOPS eval_mad_bit_crc_bb7_in(B) -> eval_mad_bit_crc_bb7_in(C)
     - [B=C+1,0>=C+2]
     - [B=C+1,C>=0]

  * Ranking function: c(failed(no_rf,[scc=1,cr=eval_mad_bit_crc_bb7_in/1]))

  * Invariants eval_mad_bit_crc_bb7_in(A) -> eval_mad_bit_crc_bb7_in(B)

     entry  : []
     non-rec: [A=B]
     rec    : [A>=B+1]
     inv    : [A>=B]

CRS eval_mad_bit_crc_bb1_in(A)

  * Non Asymptotic Upper Bound: nat(A)/32 

  * LOOPS eval_mad_bit_crc_bb1_in(B) -> eval_mad_bit_crc_bb1_in(C)
     - [B=C+32,B>=32]

  * Ranking function: nat(B/32)

  * Invariants eval_mad_bit_crc_bb1_in(A) -> eval_mad_bit_crc_bb1_in(B)

     entry  : []
     non-rec: [A=B]
     rec    : [B>=0,A>=B+32]
     inv    : [A>=B]



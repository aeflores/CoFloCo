This is PUBS, version 0.2.
Copyright (C) 2007, 2008, 2009 UPM, UCM.
This program comes with ABSOLUTELY NO WARRANTY.
This is free software, and you are welcome to
redistribute it under certain conditions.



CRS $pubs_aux_entry$(A,B) -- THE MAIN ENTRY

  * Non Asymptotic Upper Bound: 1026+512*nat(c(maximize_failed))+nat(c(maximize_failed)) 

  * LOOPS $pubs_aux_entry$(C,D) -> $pubs_aux_entry$(E,F)

  * Ranking function: N/A

  * Invariants $pubs_aux_entry$(A,B) -> $pubs_aux_entry$(C,D)

     entry  : []
     non-rec: [A=C,B=D]
     rec    : [0=1]
     inv    : [A=C,B=D]

CRS eval_bmha_init_start(A,B)

  * Non Asymptotic Upper Bound: 1026+512*nat(c(maximize_failed))+nat(c(maximize_failed)) 

  * LOOPS eval_bmha_init_start(C,D) -> eval_bmha_init_start(E,F)

  * Ranking function: N/A

  * Invariants eval_bmha_init_start(A,B) -> eval_bmha_init_start(C,D)

     entry  : []
     non-rec: [A=C,B=D]
     rec    : [0=1]
     inv    : [A=C,B=D]

CRS eval_bmha_init_bb0_in(A,B)

  * Non Asymptotic Upper Bound: 1026+512*nat(c(maximize_failed))+nat(c(maximize_failed)) 

  * LOOPS eval_bmha_init_bb0_in(C,D) -> eval_bmha_init_bb0_in(E,F)

  * Ranking function: N/A

  * Invariants eval_bmha_init_bb0_in(A,B) -> eval_bmha_init_bb0_in(C,D)

     entry  : []
     non-rec: [A=C,B=D]
     rec    : [0=1]
     inv    : [A=C,B=D]

CRS eval_bmha_init_1(A,B)

  * Non Asymptotic Upper Bound: 1026+512*nat(c(maximize_failed))+nat(c(maximize_failed)) 

  * LOOPS eval_bmha_init_1(C,D) -> eval_bmha_init_1(E,F)

  * Ranking function: N/A

  * Invariants eval_bmha_init_1(A,B) -> eval_bmha_init_1(C,D)

     entry  : []
     non-rec: [A=C,B=D]
     rec    : [0=1]
     inv    : [A=C,B=D]

CRS eval_bmha_init_2(A,B)

  * Non Asymptotic Upper Bound: 1026+512*nat(B)+nat(B-1) 

  * LOOPS eval_bmha_init_2(C,D) -> eval_bmha_init_2(E,F)

  * Ranking function: N/A

  * Invariants eval_bmha_init_2(A,B) -> eval_bmha_init_2(C,D)

     entry  : []
     non-rec: [A=C,B=D]
     rec    : [0=1]
     inv    : [A=C,B=D]

CRS loop_cont_eval_bmha_init_bb1_in(A,B,C,D)

  * Non Asymptotic Upper Bound: 1+nat(B-1) 

  * LOOPS loop_cont_eval_bmha_init_bb1_in(E,F,G,H) -> loop_cont_eval_bmha_init_bb1_in(I,J,K,L)

  * Ranking function: N/A

  * Invariants loop_cont_eval_bmha_init_bb1_in(A,B,C,D) -> loop_cont_eval_bmha_init_bb1_in(E,F,G,H)

     entry  : [A=3,C=0]
     non-rec: [A=E,B=F,C=G,D=H,A=3,C=0]
     rec    : [0=1]
     inv    : [A=3,C=0,E=3,B=F,G=0,D=H]

CRS loop_cont_eval_bmha_init_bb12_in(A,B)

  * Non Asymptotic Upper Bound: 0 

  * LOOPS loop_cont_eval_bmha_init_bb12_in(C,D) -> loop_cont_eval_bmha_init_bb12_in(E,F)

  * Ranking function: N/A

  * Invariants loop_cont_eval_bmha_init_bb12_in(A,B) -> loop_cont_eval_bmha_init_bb12_in(C,D)

     entry  : [A=4]
     non-rec: [A=C,B=D,A=4]
     rec    : [0=1]
     inv    : [A=4,C=4,B=D]

CRS eval_bmha_init_bb12_in(A,B)

  * Non Asymptotic Upper Bound: nat(A-B-1) 

  * LOOPS eval_bmha_init_bb12_in(C,D) -> eval_bmha_init_bb12_in(E,F)
     - [D+1=F,C=E,C>=D+2]

  * Ranking function: nat(C-D-1)

  * Invariants eval_bmha_init_bb12_in(A,B) -> eval_bmha_init_bb12_in(C,D)

     entry  : [B=0]
     non-rec: [A=C,B=D,B=0]
     rec    : [A=C,B=0,A>=D+1,D>=1]
     inv    : [D>=0,A=C,B=0]

CRS eval_bmha_init_bb1_in(A,B)

  * Non Asymptotic Upper Bound: 4*nat(-B+256)+2*nat(A)*nat(-B+256) 

  * LOOPS eval_bmha_init_bb1_in(C,D) -> eval_bmha_init_bb1_in(E,F)
     - [256>=F,C=E,D+1=F]
     - [256>=F,C=E,D+1=F]

  * Ranking function: nat(-D+256)

  * Invariants eval_bmha_init_bb1_in(A,B) -> eval_bmha_init_bb1_in(C,D)

     entry  : [B=0]
     non-rec: [A=C,B=D,B=0]
     rec    : [A=C,B=0,D>=1]
     inv    : [D>=0,A=C,B=0]

CRS eval_bmha_init_bb3_in(A,B,C)

  * Non Asymptotic Upper Bound: nat(C+1) 

  * LOOPS eval_bmha_init_bb3_in(D,E,F) -> eval_bmha_init_bb3_in(G,H,I)
     - [D=G,E=H,F=I+1,I+1>=0]

  * Ranking function: nat(F+1)

  * Invariants eval_bmha_init_bb3_in(A,B,C) -> eval_bmha_init_bb3_in(D,E,F)

     entry  : [255>=B,B>=0,A=C+1]
     non-rec: [A=D,B=E,C=F,255>=B,B>=0,A=C+1]
     rec    : [B=E,A=D,A=C+1,F+1>=0,255>=B,B>=0,A>=F+2]
     inv    : [B>=0,A>=F+1,255>=B,A=D,B=E,A=C+1]



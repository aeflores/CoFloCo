This is PUBS, version 0.2.
Copyright (C) 2007, 2008, 2009 UPM, UCM.
This program comes with ABSOLUTELY NO WARRANTY.
This is free software, and you are welcome to
redistribute it under certain conditions.



CRS $pubs_aux_entry$(A,B) -- THE MAIN ENTRY

  * Non Asymptotic Upper Bound: 1+nat(c(maximize_failed))/2 

  * LOOPS $pubs_aux_entry$(C,D) -> $pubs_aux_entry$(E,F)

  * Ranking function: N/A

  * Invariants $pubs_aux_entry$(A,B) -> $pubs_aux_entry$(C,D)

     entry  : []
     non-rec: [A=C,B=D]
     rec    : [0=1]
     inv    : [A=C,B=D]

CRS eval_emit_bits_start(A,B)

  * Non Asymptotic Upper Bound: 1+nat(c(maximize_failed))/2 

  * LOOPS eval_emit_bits_start(C,D) -> eval_emit_bits_start(E,F)

  * Ranking function: N/A

  * Invariants eval_emit_bits_start(A,B) -> eval_emit_bits_start(C,D)

     entry  : []
     non-rec: [A=C,B=D]
     rec    : [0=1]
     inv    : [A=C,B=D]

CRS eval_emit_bits_bb0_in(A)

  * Non Asymptotic Upper Bound: 1+nat(c(maximize_failed))/2 

  * LOOPS eval_emit_bits_bb0_in(B) -> eval_emit_bits_bb0_in(C)

  * Ranking function: N/A

  * Invariants eval_emit_bits_bb0_in(A) -> eval_emit_bits_bb0_in(B)

     entry  : []
     non-rec: [A=B]
     rec    : [0=1]
     inv    : [A=B]

CRS eval_emit_bits_4(A,B)

  * Non Asymptotic Upper Bound: 1+nat(1*A+1*B)/2 

  * LOOPS eval_emit_bits_4(C,D) -> eval_emit_bits_4(E,F)

  * Ranking function: N/A

  * Invariants eval_emit_bits_4(A,B) -> eval_emit_bits_4(C,D)

     entry  : []
     non-rec: [A=C,B=D]
     rec    : [0=1]
     inv    : [A=C,B=D]

CRS eval_emit_bits_5(A,B)

  * Non Asymptotic Upper Bound: 1+nat(1*A+1*B)/2 

  * LOOPS eval_emit_bits_5(C,D) -> eval_emit_bits_5(E,F)

  * Ranking function: N/A

  * Invariants eval_emit_bits_5(A,B) -> eval_emit_bits_5(C,D)

     entry  : []
     non-rec: [A=C,B=D]
     rec    : [0=1]
     inv    : [A=C,B=D]

CRS eval_emit_bits_bb2_in(A,B)

  * Non Asymptotic Upper Bound: 1+nat(1*A+1*B)/2 

  * LOOPS eval_emit_bits_bb2_in(C,D) -> eval_emit_bits_bb2_in(E,F)

  * Ranking function: N/A

  * Invariants eval_emit_bits_bb2_in(A,B) -> eval_emit_bits_bb2_in(C,D)

     entry  : []
     non-rec: [A=C,B=D]
     rec    : [0=1]
     inv    : [A=C,B=D]

CRS loop_cont_eval_emit_bits_bb4_in(A,B)

  * Non Asymptotic Upper Bound: 0 

  * LOOPS loop_cont_eval_emit_bits_bb4_in(C,D) -> loop_cont_eval_emit_bits_bb4_in(E,F)

  * Ranking function: N/A

  * Invariants loop_cont_eval_emit_bits_bb4_in(A,B) -> loop_cont_eval_emit_bits_bb4_in(C,D)

     entry  : [A=2]
     non-rec: [A=C,B=D,A=2]
     rec    : [0=1]
     inv    : [A=2,C=2,B=D]

CRS eval_emit_bits_bb4_in(A)

  * Non Asymptotic Upper Bound: nat(A)/2 

  * LOOPS eval_emit_bits_bb4_in(B) -> eval_emit_bits_bb4_in(C)
     - [B=C+8,B>=8]
     - [B=C+8,B>=8]
     - [B=C+8,B>=8]
     - [B=C+8,B>=8]

  * Ranking function: nat(B/8)

  * Invariants eval_emit_bits_bb4_in(A) -> eval_emit_bits_bb4_in(B)

     entry  : []
     non-rec: [A=B]
     rec    : [B>=0,A>=B+8]
     inv    : [A>=B]

CRS eval_emit_bits_bb12_in

  * Non Asymptotic Upper Bound: 0 

  * LOOPS eval_emit_bits_bb12_in -> eval_emit_bits_bb12_in

  * Ranking function: N/A

  * Invariants eval_emit_bits_bb12_in -> eval_emit_bits_bb12_in

     entry  : []
     non-rec: []
     rec    : [0=1]
     inv    : []



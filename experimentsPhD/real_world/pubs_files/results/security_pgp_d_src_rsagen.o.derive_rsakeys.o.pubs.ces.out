This is PUBS, version 0.2.
Copyright (C) 2007, 2008, 2009 UPM, UCM.
This program comes with ABSOLUTELY NO WARRANTY.
This is free software, and you are welcome to
redistribute it under certain conditions.



CRS $pubs_aux_entry$(A,B) -- THE MAIN ENTRY

  * Non Asymptotic Upper Bound: 1+c(failed(schemes_failed,[scc=0,cr=eval_derive_rsakeys__critedge_in/1])) 

  * LOOPS $pubs_aux_entry$(C,D) -> $pubs_aux_entry$(E,F)

  * Ranking function: N/A

  * Invariants $pubs_aux_entry$(A,B) -> $pubs_aux_entry$(C,D)

     entry  : []
     non-rec: [A=C,B=D]
     rec    : [0=1]
     inv    : [A=C,B=D]

CRS eval_derive_rsakeys_start(A,B)

  * Non Asymptotic Upper Bound: 1+c(failed(schemes_failed,[scc=0,cr=eval_derive_rsakeys__critedge_in/1])) 

  * LOOPS eval_derive_rsakeys_start(C,D) -> eval_derive_rsakeys_start(E,F)

  * Ranking function: N/A

  * Invariants eval_derive_rsakeys_start(A,B) -> eval_derive_rsakeys_start(C,D)

     entry  : []
     non-rec: [A=C,B=D]
     rec    : [0=1]
     inv    : [A=C,B=D]

CRS eval_derive_rsakeys_bb0_in(A)

  * Non Asymptotic Upper Bound: 1+c(failed(schemes_failed,[scc=0,cr=eval_derive_rsakeys__critedge_in/1])) 

  * LOOPS eval_derive_rsakeys_bb0_in(B) -> eval_derive_rsakeys_bb0_in(C)

  * Ranking function: N/A

  * Invariants eval_derive_rsakeys_bb0_in(A) -> eval_derive_rsakeys_bb0_in(B)

     entry  : []
     non-rec: [A=B]
     rec    : [0=1]
     inv    : [A=B]

CRS eval_derive_rsakeys_0(A)

  * Non Asymptotic Upper Bound: 1+c(failed(schemes_failed,[scc=0,cr=eval_derive_rsakeys__critedge_in/1])) 

  * LOOPS eval_derive_rsakeys_0(B) -> eval_derive_rsakeys_0(C)

  * Ranking function: N/A

  * Invariants eval_derive_rsakeys_0(A) -> eval_derive_rsakeys_0(B)

     entry  : []
     non-rec: [A=B]
     rec    : [0=1]
     inv    : [A=B]

CRS eval_derive_rsakeys_1(A)

  * Non Asymptotic Upper Bound: 1+c(failed(schemes_failed,[scc=0,cr=eval_derive_rsakeys__critedge_in/1])) 

  * LOOPS eval_derive_rsakeys_1(B) -> eval_derive_rsakeys_1(C)

  * Ranking function: N/A

  * Invariants eval_derive_rsakeys_1(A) -> eval_derive_rsakeys_1(B)

     entry  : []
     non-rec: [A=B]
     rec    : [0=1]
     inv    : [A=B]

CRS eval_derive_rsakeys_6(A,B)

  * Non Asymptotic Upper Bound: 1+c(failed(schemes_failed,[scc=0,cr=eval_derive_rsakeys__critedge_in/1])) 

  * LOOPS eval_derive_rsakeys_6(C,D) -> eval_derive_rsakeys_6(E,F)

  * Ranking function: N/A

  * Invariants eval_derive_rsakeys_6(A,B) -> eval_derive_rsakeys_6(C,D)

     entry  : []
     non-rec: [A=C,B=D]
     rec    : [0=1]
     inv    : [A=C,B=D]

CRS eval_derive_rsakeys_7(A)

  * Non Asymptotic Upper Bound: 1+c(failed(schemes_failed,[scc=0,cr=eval_derive_rsakeys__critedge_in/1])) 

  * LOOPS eval_derive_rsakeys_7(B) -> eval_derive_rsakeys_7(C)

  * Ranking function: N/A

  * Invariants eval_derive_rsakeys_7(A) -> eval_derive_rsakeys_7(B)

     entry  : []
     non-rec: [A=B]
     rec    : [0=1]
     inv    : [A=B]

CRS eval_derive_rsakeys_11(A,B)

  * Non Asymptotic Upper Bound: 1+c(failed(schemes_failed,[scc=0,cr=eval_derive_rsakeys__critedge_in/1])) 

  * LOOPS eval_derive_rsakeys_11(C,D) -> eval_derive_rsakeys_11(E,F)

  * Ranking function: N/A

  * Invariants eval_derive_rsakeys_11(A,B) -> eval_derive_rsakeys_11(C,D)

     entry  : []
     non-rec: [A=C,B=D]
     rec    : [0=1]
     inv    : [A=C,B=D]

CRS eval_derive_rsakeys_12(A)

  * Non Asymptotic Upper Bound: 1+c(failed(schemes_failed,[scc=0,cr=eval_derive_rsakeys__critedge_in/1])) 

  * LOOPS eval_derive_rsakeys_12(B) -> eval_derive_rsakeys_12(C)

  * Ranking function: N/A

  * Invariants eval_derive_rsakeys_12(A) -> eval_derive_rsakeys_12(B)

     entry  : []
     non-rec: [A=B]
     rec    : [0=1]
     inv    : [A=B]

CRS eval_derive_rsakeys_13(A)

  * Non Asymptotic Upper Bound: 1+c(failed(schemes_failed,[scc=0,cr=eval_derive_rsakeys__critedge_in/1])) 

  * LOOPS eval_derive_rsakeys_13(B) -> eval_derive_rsakeys_13(C)

  * Ranking function: N/A

  * Invariants eval_derive_rsakeys_13(A) -> eval_derive_rsakeys_13(B)

     entry  : []
     non-rec: [A=B]
     rec    : [0=1]
     inv    : [A=B]

CRS eval_derive_rsakeys_14(A)

  * Non Asymptotic Upper Bound: 1+c(failed(schemes_failed,[scc=0,cr=eval_derive_rsakeys__critedge_in/1])) 

  * LOOPS eval_derive_rsakeys_14(B) -> eval_derive_rsakeys_14(C)

  * Ranking function: N/A

  * Invariants eval_derive_rsakeys_14(A) -> eval_derive_rsakeys_14(B)

     entry  : []
     non-rec: [A=B]
     rec    : [0=1]
     inv    : [A=B]

CRS eval_derive_rsakeys_15(A)

  * Non Asymptotic Upper Bound: 1+c(failed(schemes_failed,[scc=0,cr=eval_derive_rsakeys__critedge_in/1])) 

  * LOOPS eval_derive_rsakeys_15(B) -> eval_derive_rsakeys_15(C)

  * Ranking function: N/A

  * Invariants eval_derive_rsakeys_15(A) -> eval_derive_rsakeys_15(B)

     entry  : []
     non-rec: [A=B]
     rec    : [0=1]
     inv    : [A=B]

CRS eval_derive_rsakeys_16(A)

  * Non Asymptotic Upper Bound: 1+c(failed(schemes_failed,[scc=0,cr=eval_derive_rsakeys__critedge_in/1])) 

  * LOOPS eval_derive_rsakeys_16(B) -> eval_derive_rsakeys_16(C)

  * Ranking function: N/A

  * Invariants eval_derive_rsakeys_16(A) -> eval_derive_rsakeys_16(B)

     entry  : []
     non-rec: [A=B]
     rec    : [0=1]
     inv    : [A=B]

CRS eval_derive_rsakeys_17(A)

  * Non Asymptotic Upper Bound: 1+c(failed(schemes_failed,[scc=0,cr=eval_derive_rsakeys__critedge_in/1])) 

  * LOOPS eval_derive_rsakeys_17(B) -> eval_derive_rsakeys_17(C)

  * Ranking function: N/A

  * Invariants eval_derive_rsakeys_17(A) -> eval_derive_rsakeys_17(B)

     entry  : []
     non-rec: [A=B]
     rec    : [0=1]
     inv    : [A=B]

CRS eval_derive_rsakeys_21(A,B)

  * Non Asymptotic Upper Bound: 1+c(failed(schemes_failed,[scc=0,cr=eval_derive_rsakeys__critedge_in/1])) 

  * LOOPS eval_derive_rsakeys_21(C,D) -> eval_derive_rsakeys_21(E,F)

  * Ranking function: N/A

  * Invariants eval_derive_rsakeys_21(A,B) -> eval_derive_rsakeys_21(C,D)

     entry  : []
     non-rec: [A=C,B=D]
     rec    : [0=1]
     inv    : [A=C,B=D]

CRS eval_derive_rsakeys_22(A)

  * Non Asymptotic Upper Bound: 1+c(failed(schemes_failed,[scc=0,cr=eval_derive_rsakeys__critedge_in/1])) 

  * LOOPS eval_derive_rsakeys_22(B) -> eval_derive_rsakeys_22(C)

  * Ranking function: N/A

  * Invariants eval_derive_rsakeys_22(A) -> eval_derive_rsakeys_22(B)

     entry  : []
     non-rec: [A=B]
     rec    : [0=1]
     inv    : [A=B]

CRS eval_derive_rsakeys_23(A)

  * Non Asymptotic Upper Bound: 1+c(failed(schemes_failed,[scc=0,cr=eval_derive_rsakeys__critedge_in/1])) 

  * LOOPS eval_derive_rsakeys_23(B) -> eval_derive_rsakeys_23(C)

  * Ranking function: N/A

  * Invariants eval_derive_rsakeys_23(A) -> eval_derive_rsakeys_23(B)

     entry  : []
     non-rec: [A=B]
     rec    : [0=1]
     inv    : [A=B]

CRS eval_derive_rsakeys_24(A)

  * Non Asymptotic Upper Bound: 1+c(failed(schemes_failed,[scc=0,cr=eval_derive_rsakeys__critedge_in/1])) 

  * LOOPS eval_derive_rsakeys_24(B) -> eval_derive_rsakeys_24(C)

  * Ranking function: N/A

  * Invariants eval_derive_rsakeys_24(A) -> eval_derive_rsakeys_24(B)

     entry  : []
     non-rec: [A=B]
     rec    : [0=1]
     inv    : [A=B]

CRS eval_derive_rsakeys_28(A)

  * Non Asymptotic Upper Bound: 1+c(failed(schemes_failed,[scc=0,cr=eval_derive_rsakeys__critedge_in/1])) 

  * LOOPS eval_derive_rsakeys_28(B) -> eval_derive_rsakeys_28(C)

  * Ranking function: N/A

  * Invariants eval_derive_rsakeys_28(A) -> eval_derive_rsakeys_28(B)

     entry  : []
     non-rec: [A=B]
     rec    : [0=1]
     inv    : [A=B]

CRS eval_derive_rsakeys_29(A)

  * Non Asymptotic Upper Bound: 1+c(failed(schemes_failed,[scc=0,cr=eval_derive_rsakeys__critedge_in/1])) 

  * LOOPS eval_derive_rsakeys_29(B) -> eval_derive_rsakeys_29(C)

  * Ranking function: N/A

  * Invariants eval_derive_rsakeys_29(A) -> eval_derive_rsakeys_29(B)

     entry  : []
     non-rec: [A=B]
     rec    : [0=1]
     inv    : [A=B]

CRS eval_derive_rsakeys_bb3_in(A)

  * Non Asymptotic Upper Bound: 1+c(failed(schemes_failed,[scc=0,cr=eval_derive_rsakeys__critedge_in/1])) 

  * LOOPS eval_derive_rsakeys_bb3_in(B) -> eval_derive_rsakeys_bb3_in(C)

  * Ranking function: N/A

  * Invariants eval_derive_rsakeys_bb3_in(A) -> eval_derive_rsakeys_bb3_in(B)

     entry  : []
     non-rec: [A=B]
     rec    : [0=1]
     inv    : [A=B]

CRS eval_derive_rsakeys_38(A)

  * Non Asymptotic Upper Bound: 1+c(failed(schemes_failed,[scc=0,cr=eval_derive_rsakeys__critedge_in/1])) 

  * LOOPS eval_derive_rsakeys_38(B) -> eval_derive_rsakeys_38(C)

  * Ranking function: N/A

  * Invariants eval_derive_rsakeys_38(A) -> eval_derive_rsakeys_38(B)

     entry  : []
     non-rec: [A=B]
     rec    : [0=1]
     inv    : [A=B]

CRS eval_derive_rsakeys_39(A)

  * Non Asymptotic Upper Bound: 1+c(failed(schemes_failed,[scc=0,cr=eval_derive_rsakeys__critedge_in/1])) 

  * LOOPS eval_derive_rsakeys_39(B) -> eval_derive_rsakeys_39(C)

  * Ranking function: N/A

  * Invariants eval_derive_rsakeys_39(A) -> eval_derive_rsakeys_39(B)

     entry  : []
     non-rec: [A=B]
     rec    : [0=1]
     inv    : [A=B]

CRS eval_derive_rsakeys_60(A)

  * Non Asymptotic Upper Bound: 1+c(failed(schemes_failed,[scc=0,cr=eval_derive_rsakeys__critedge_in/1])) 

  * LOOPS eval_derive_rsakeys_60(B) -> eval_derive_rsakeys_60(C)

  * Ranking function: N/A

  * Invariants eval_derive_rsakeys_60(A) -> eval_derive_rsakeys_60(B)

     entry  : []
     non-rec: [A=B]
     rec    : [0=1]
     inv    : [A=B]

CRS eval_derive_rsakeys_61(A)

  * Non Asymptotic Upper Bound: 1+c(failed(schemes_failed,[scc=0,cr=eval_derive_rsakeys__critedge_in/1])) 

  * LOOPS eval_derive_rsakeys_61(B) -> eval_derive_rsakeys_61(C)

  * Ranking function: N/A

  * Invariants eval_derive_rsakeys_61(A) -> eval_derive_rsakeys_61(B)

     entry  : []
     non-rec: [A=B]
     rec    : [0=1]
     inv    : [A=B]

CRS eval_derive_rsakeys_62(A)

  * Non Asymptotic Upper Bound: 1+c(failed(schemes_failed,[scc=0,cr=eval_derive_rsakeys__critedge_in/1])) 

  * LOOPS eval_derive_rsakeys_62(B) -> eval_derive_rsakeys_62(C)

  * Ranking function: N/A

  * Invariants eval_derive_rsakeys_62(A) -> eval_derive_rsakeys_62(B)

     entry  : []
     non-rec: [A=B]
     rec    : [0=1]
     inv    : [A=B]

CRS loop_cont_eval_derive_rsakeys__critedge_in(A,B,C)

  * Non Asymptotic Upper Bound: 0 

  * LOOPS loop_cont_eval_derive_rsakeys__critedge_in(D,E,F) -> loop_cont_eval_derive_rsakeys__critedge_in(G,H,I)

  * Ranking function: N/A

  * Invariants loop_cont_eval_derive_rsakeys__critedge_in(A,B,C) -> loop_cont_eval_derive_rsakeys__critedge_in(D,E,F)

     entry  : []
     non-rec: [A=D,B=E,C=F]
     rec    : [0=1]
     inv    : [A=D,B=E,C=F]

CRS eval_derive_rsakeys_72(A)

  * Non Asymptotic Upper Bound: 0 

  * LOOPS eval_derive_rsakeys_72(B) -> eval_derive_rsakeys_72(C)

  * Ranking function: N/A

  * Invariants eval_derive_rsakeys_72(A) -> eval_derive_rsakeys_72(B)

     entry  : []
     non-rec: [A=B]
     rec    : [0=1]
     inv    : [A=B]

CRS eval_derive_rsakeys_73(A)

  * Non Asymptotic Upper Bound: 0 

  * LOOPS eval_derive_rsakeys_73(B) -> eval_derive_rsakeys_73(C)

  * Ranking function: N/A

  * Invariants eval_derive_rsakeys_73(A) -> eval_derive_rsakeys_73(B)

     entry  : []
     non-rec: [A=B]
     rec    : [0=1]
     inv    : [A=B]

CRS eval_derive_rsakeys_74(A)

  * Non Asymptotic Upper Bound: 0 

  * LOOPS eval_derive_rsakeys_74(B) -> eval_derive_rsakeys_74(C)

  * Ranking function: N/A

  * Invariants eval_derive_rsakeys_74(A) -> eval_derive_rsakeys_74(B)

     entry  : []
     non-rec: [A=B]
     rec    : [0=1]
     inv    : [A=B]

CRS eval_derive_rsakeys_75(A)

  * Non Asymptotic Upper Bound: 0 

  * LOOPS eval_derive_rsakeys_75(B) -> eval_derive_rsakeys_75(C)

  * Ranking function: N/A

  * Invariants eval_derive_rsakeys_75(A) -> eval_derive_rsakeys_75(B)

     entry  : []
     non-rec: [A=B]
     rec    : [0=1]
     inv    : [A=B]

CRS eval_derive_rsakeys_76

  * Non Asymptotic Upper Bound: 0 

  * LOOPS eval_derive_rsakeys_76 -> eval_derive_rsakeys_76

  * Ranking function: N/A

  * Invariants eval_derive_rsakeys_76 -> eval_derive_rsakeys_76

     entry  : []
     non-rec: []
     rec    : [0=1]
     inv    : []

CRS eval_derive_rsakeys__critedge_in(A)

  * Non Asymptotic Upper Bound: c(failed(schemes_failed,[scc=0,cr=eval_derive_rsakeys__critedge_in/1])) 

  * LOOPS eval_derive_rsakeys__critedge_in(B) -> eval_derive_rsakeys__critedge_in(C)
     - [B=C]
     - [B=C]

  * Ranking function: c(failed(no_rf,[scc=0,cr=eval_derive_rsakeys__critedge_in/1]))

  * Invariants eval_derive_rsakeys__critedge_in(A) -> eval_derive_rsakeys__critedge_in(B)

     entry  : []
     non-rec: [A=B]
     rec    : [A=B]
     inv    : [A=B]



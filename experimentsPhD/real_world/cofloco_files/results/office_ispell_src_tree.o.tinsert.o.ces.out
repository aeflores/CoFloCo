Warning: Ignored call to eval_tinsert_stop/1 in equation eval_tinsert_18/1 
Warning: Ignored call to eval_tinsert_stop/1 in equation eval_tinsert_bb11_in/1 

Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. recursive  : [eval_tinsert_bb3_in/5]
1. non_recursive  : [eval_tinsert_bb11_in/1]
2. non_recursive  : [eval_tinsert_20/1]
3. non_recursive  : [eval_tinsert_19/3]
4. non_recursive  : [eval_tinsert_bb9_in/3]
5. non_recursive  : [eval_tinsert_18/1]
6. non_recursive  : [eval_tinsert_17/3]
7. non_recursive  : [eval_tinsert_bb8_in/3]
8. non_recursive  : [eval_tinsert_16/3]
9. non_recursive  : [eval_tinsert_15/3]
10. non_recursive  : [eval_tinsert_12/3]
11. non_recursive  : [eval_tinsert_11/3]
12. non_recursive  : [loop_cont_eval_tinsert_bb3_in/4]
13. non_recursive  : [eval_tinsert_7/3]
14. non_recursive  : [eval_tinsert_6/4]
15. non_recursive  : [eval_tinsert_bb2_in/3]
16. non_recursive  : [eval_tinsert_4/3]
17. non_recursive  : [eval_tinsert_3/3]
18. non_recursive  : [eval_tinsert_1/3]
19. non_recursive  : [eval_tinsert_0/3]
20. non_recursive  : [eval_tinsert_bb0_in/3]
21. non_recursive  : [eval_tinsert_start/3]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into eval_tinsert_bb3_in/5
1. SCC is completely evaluated into other SCCs
2. SCC is completely evaluated into other SCCs
3. SCC is completely evaluated into other SCCs
4. SCC is completely evaluated into other SCCs
5. SCC is completely evaluated into other SCCs
6. SCC is completely evaluated into other SCCs
7. SCC is completely evaluated into other SCCs
8. SCC is completely evaluated into other SCCs
9. SCC is completely evaluated into other SCCs
10. SCC is partially evaluated into eval_tinsert_12/3
11. SCC is completely evaluated into other SCCs
12. SCC is completely evaluated into other SCCs
13. SCC is partially evaluated into eval_tinsert_7/3
14. SCC is completely evaluated into other SCCs
15. SCC is completely evaluated into other SCCs
16. SCC is completely evaluated into other SCCs
17. SCC is completely evaluated into other SCCs
18. SCC is partially evaluated into eval_tinsert_1/3
19. SCC is completely evaluated into other SCCs
20. SCC is completely evaluated into other SCCs
21. SCC is partially evaluated into eval_tinsert_start/3

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations eval_tinsert_bb3_in/5 
* CE 7 is refined into CE [9] 
* CE 6 is refined into CE [10] 


#### Refined cost equations eval_tinsert_bb3_in/5 
* CE 9: eval_tinsert_bb3_in(A,B,C,A,B) = 0
     [C=2] 
* CE 10: eval_tinsert_bb3_in(V__cbench_print,V__pershsize,B,C,D) = 1+ eval_tinsert_bb3_in(V__cbench_print,V__pershsize,E,C,D)
     [E=2,B=2] 

### Cost equations --> "Loop" of eval_tinsert_bb3_in/5 
* CEs [10] --> Loop 7 
* CEs [9] --> Loop 8 

#### Loops of eval_tinsert_bb3_in/5 
* Loop 7: eval_tinsert_bb3_in(V__cbench_print,V__pershsize,B,C,D)->  eval_tinsert_bb3_in(V__cbench_print,V__pershsize,B',C,D)
                  [B'=2,B=2] 
* Loop 8: eval_tinsert_bb3_in(A,B,C,A,B) [C=2] 

### Ranking functions of CR eval_tinsert_bb3_in(V__cbench_print,V__pershsize,B,C,D) 

#### Partial ranking functions of CR eval_tinsert_bb3_in(V__cbench_print,V__pershsize,B,C,D) 


### Resulting Chains:eval_tinsert_bb3_in(V__cbench_print,V__pershsize,B,C,D) 
* [[7]]...
* [[7],8]
* [8]


### Merging Chains  eval_tinsert_bb3_in/5 into  External patterns of execution 
* [[8],[8,[7]]] --> 1 
* [[[7]]] --> 2 


### Specialization of cost equations eval_tinsert_12/3 
* CE 8 is refined into CE [11] 


#### Refined cost equations eval_tinsert_12/3 
* CE 11: eval_tinsert_12(V__cbench_print,V__pershsize,B) = 0
     [] 

### Cost equations --> "Loop" of eval_tinsert_12/3 
* CEs [11] --> Loop 9 

#### Loops of eval_tinsert_12/3 
* Loop 9: eval_tinsert_12(V__cbench_print,V__pershsize,B) [] 

### Ranking functions of CR eval_tinsert_12(V__cbench_print,V__pershsize,B) 

#### Partial ranking functions of CR eval_tinsert_12(V__cbench_print,V__pershsize,B) 


### Resulting Chains:eval_tinsert_12(V__cbench_print,V__pershsize,B) 
* [9]


### Merging Chains  eval_tinsert_12/3 into  External patterns of execution 
* [[9]] --> 1 


### Specialization of cost equations eval_tinsert_7/3 
* CE 4 is refined into CE [12,13] 
* CE 5 is refined into CE [14] 


#### Refined cost equations eval_tinsert_7/3 
* CE 12: eval_tinsert_7(V__cbench_print,V__pershsize,B) = 1+ eval_tinsert_bb3_in(V__cbench_print,V__pershsize,C,V__cbench_print,V__pershsize):1+ eval_tinsert_12(V__cbench_print,V__pershsize,B):1
     [C=2] 
* CE 13: eval_tinsert_7(V__cbench_print,V__pershsize,B) = 1+ eval_tinsert_bb3_in(V__cbench_print,V__pershsize,C,D,E):2
     [C=2] 
* CE 14: eval_tinsert_7(V__cbench_print,V__pershsize,B) = 0
     [] 

### Cost equations --> "Loop" of eval_tinsert_7/3 
* CEs [12,14] --> Loop 10 
* CEs [13] --> Loop 11 

#### Loops of eval_tinsert_7/3 
* Loop 10: eval_tinsert_7(V__cbench_print,V__pershsize,B) [] 
* Loop 11: eval_tinsert_7(V__cbench_print,V__pershsize,B) [] 

### Ranking functions of CR eval_tinsert_7(V__cbench_print,V__pershsize,B) 

#### Partial ranking functions of CR eval_tinsert_7(V__cbench_print,V__pershsize,B) 


### Resulting Chains:eval_tinsert_7(V__cbench_print,V__pershsize,B) 
* [11]...
* [10]


### Merging Chains  eval_tinsert_7/3 into  External patterns of execution 
* [[10]] --> 1 
* [[11]] --> 2 


### Specialization of cost equations eval_tinsert_1/3 
* CE 3 is refined into CE [15,16] 


#### Refined cost equations eval_tinsert_1/3 
* CE 15: eval_tinsert_1(V__cbench_print,V__pershsize,B) = 0+ eval_tinsert_7(V__cbench_print,V__pershsize,B):1
     [] 
* CE 16: eval_tinsert_1(V__cbench_print,V__pershsize,B) = 0+ eval_tinsert_7(V__cbench_print,V__pershsize,B):2
     [] 

### Cost equations --> "Loop" of eval_tinsert_1/3 
* CEs [16] --> Loop 12 
* CEs [15] --> Loop 13 

#### Loops of eval_tinsert_1/3 
* Loop 12: eval_tinsert_1(V__cbench_print,V__pershsize,B) [] 
* Loop 13: eval_tinsert_1(V__cbench_print,V__pershsize,B) [] 

### Ranking functions of CR eval_tinsert_1(V__cbench_print,V__pershsize,B) 

#### Partial ranking functions of CR eval_tinsert_1(V__cbench_print,V__pershsize,B) 


### Resulting Chains:eval_tinsert_1(V__cbench_print,V__pershsize,B) 
* [13]
* [12]...


### Merging Chains  eval_tinsert_1/3 into  External patterns of execution 
* [[13]] --> 1 
* [[12]] --> 2 


### Specialization of cost equations eval_tinsert_start/3 
* CE 2 is refined into CE [17,18] 


#### Refined cost equations eval_tinsert_start/3 
* CE 17: eval_tinsert_start(V__cbench_print,V__pershsize,B) = 0+ eval_tinsert_1(V__cbench_print,V__pershsize,B):1
     [] 
* CE 18: eval_tinsert_start(V__cbench_print,V__pershsize,B) = 0+ eval_tinsert_1(V__cbench_print,V__pershsize,B):2
     [] 

### Cost equations --> "Loop" of eval_tinsert_start/3 
* CEs [18] --> Loop 14 
* CEs [17] --> Loop 15 

#### Loops of eval_tinsert_start/3 
* Loop 14: eval_tinsert_start(V__cbench_print,V__pershsize,B) [] 
* Loop 15: eval_tinsert_start(V__cbench_print,V__pershsize,B) [] 

### Ranking functions of CR eval_tinsert_start(V__cbench_print,V__pershsize,B) 

#### Partial ranking functions of CR eval_tinsert_start(V__cbench_print,V__pershsize,B) 


### Resulting Chains:eval_tinsert_start(V__cbench_print,V__pershsize,B) 
* [15]
* [14]...


### Merging Chains  eval_tinsert_start/3 into  External patterns of execution 
* [[15]] --> 1 
* [[14]] --> 2 


Computing Bounds
=====================================

#### Cost of loops [7] 

 * loop 7:eval_tinsert_bb3_in(V__cbench_print,V__pershsize,B,C,D) -> [eval_tinsert_bb3_in(V__cbench_print',V__pershsize',B',C',D')] 
1
#### Cost of phase [7]:eval_tinsert_bb3_in(V__cbench_print,V__pershsize,B,C,D) -> [eval_tinsert_bb3_in(V__cbench_print',V__pershsize',B',C',D')] 
1*it(7)+0
#### Cost of phase [7]:eval_tinsert_bb3_in(V__cbench_print,V__pershsize,B,C,D) -> [eval_tinsert_bb3_in(V__cbench_print',V__pershsize',B',C',D')] 
1*it(7)+0
#### Cost of chains of eval_tinsert_bb3_in(V__cbench_print,V__pershsize,B,C,D):
* Chain [[7]]...: 1*it(7)+0
  with precondition: [B=2] 

* Chain [[7],8]: 1*it(7)+0
  with precondition: [B=2,V__cbench_print=C,V__pershsize=D] 

* Chain [8]: 0
  with precondition: [B=2,C=V__cbench_print,D=V__pershsize] 


#### Cost of chains of eval_tinsert_12(V__cbench_print,V__pershsize,B):
* Chain [9]: 0
  with precondition: [] 


#### Cost of chains of eval_tinsert_7(V__cbench_print,V__pershsize,B):
* Chain [11]...: 1*s(2)+1
  with precondition: [] 

* Chain [10]: 1*aux(2)+0
  with precondition: [] 


#### Cost of chains of eval_tinsert_1(V__cbench_print,V__pershsize,B):
* Chain [13]: 1*s(4)+0
  with precondition: [] 

* Chain [12]...: 1*s(5)+1
  with precondition: [] 


#### Cost of chains of eval_tinsert_start(V__cbench_print,V__pershsize,B):
* Chain [15]: 1*s(6)+0
  with precondition: [] 

* Chain [14]...: 1*s(7)+1
  with precondition: [] 


Closed-form bounds of eval_tinsert_start(V__cbench_print,V__pershsize,B): 
-------------------------------------
* Chain [15] with precondition: [] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [14]... with precondition: [] 
    - Upper bound: inf 
    - Complexity: infinity 

### Maximum cost of eval_tinsert_start(V__cbench_print,V__pershsize,B): inf 
Asymptotic class: infinity 

Time statistics: 
-------------------------------------
* Partial evaluation computed in 13 ms.
* Invariants computed in 5 ms.
   - Backward Invariants 2 ms.
   - Transitive Invariants 1 ms.
* Refinement performed in 12 ms.
* Termination proved in 1 ms.
* Upper bounds computed in 9 ms.
   - Equation cost structures 5 ms.
   - Phase cost structures 2 ms.
   - Chain cost structures 2 ms.
   - Solving cost expressions 0 ms.
* Total analysis performed in 57 ms.


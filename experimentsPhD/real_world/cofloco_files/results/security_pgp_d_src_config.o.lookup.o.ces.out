Warning: Ignored call to eval_lookup_stop/1 in equation eval_lookup_bb12_in/1 

Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. recursive  : [eval_lookup_8/8,eval_lookup_9/8,eval_lookup_bb1_in/7]
1. recursive  : [eval_lookup_18/4,eval_lookup_19/4,eval_lookup_21/4,eval_lookup_22/4,eval_lookup_bb4_in/4,eval_lookup_bb8_in/4]
2. non_recursive  : [eval_lookup_bb12_in/1]
3. non_recursive  : [eval_lookup_28/1]
4. non_recursive  : [eval_lookup_27/1]
5. non_recursive  : [eval_lookup_30/1]
6. non_recursive  : [eval_lookup_29/1]
7. non_recursive  : [eval_lookup_NewDefault_in/1]
8. non_recursive  : [loop_cont_eval_lookup_bb4_in/2]
9. non_recursive  : [loop_cont_eval_lookup_bb1_in/5]
10. non_recursive  : [eval_lookup_2/3]
11. non_recursive  : [eval_lookup_1/4]
12. non_recursive  : [eval_lookup_bb0_in/3]
13. non_recursive  : [eval_lookup_start/3]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into eval_lookup_bb1_in/7
1. SCC is partially evaluated into eval_lookup_bb4_in/4
2. SCC is completely evaluated into other SCCs
3. SCC is completely evaluated into other SCCs
4. SCC is completely evaluated into other SCCs
5. SCC is completely evaluated into other SCCs
6. SCC is completely evaluated into other SCCs
7. SCC is completely evaluated into other SCCs
8. SCC is partially evaluated into loop_cont_eval_lookup_bb4_in/2
9. SCC is partially evaluated into loop_cont_eval_lookup_bb1_in/5
10. SCC is partially evaluated into eval_lookup_2/3
11. SCC is completely evaluated into other SCCs
12. SCC is completely evaluated into other SCCs
13. SCC is partially evaluated into eval_lookup_start/3

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations eval_lookup_bb1_in/7 
* CE 5 is refined into CE [15] 
* CE 4 is refined into CE [16] 


#### Refined cost equations eval_lookup_bb1_in/7 
* CE 15: eval_lookup_bb1_in(A,B,C,D,B,A,E) = 0
     [C>=A,C>=0,E=0,D=5] 
* CE 16: eval_lookup_bb1_in(V_keyLength,V_range,V_index_0,B,C,D,E) = 1+ eval_lookup_bb1_in(V_keyLength,V_range,F,B,C,D,E)
     [V_keyLength>=V_index_0+1,V_index_0>=0,V_index_0+1=F] 

### Cost equations --> "Loop" of eval_lookup_bb1_in/7 
* CEs [16] --> Loop 14 
* CEs [15] --> Loop 15 

#### Loops of eval_lookup_bb1_in/7 
* Loop 14: eval_lookup_bb1_in(V_keyLength,V_range,V_index_0,B,C,D,E)->  eval_lookup_bb1_in(V_keyLength,V_range,V_index_0',B,C,D,E)
                  [V_keyLength>=V_index_0+1,V_index_0>=0,V_index_0+1=V_index_0'] 
* Loop 15: eval_lookup_bb1_in(A,B,C,D,B,A,E) [C>=A,C>=0,E=0,D=5] 

### Ranking functions of CR eval_lookup_bb1_in(V_keyLength,V_range,V_index_0,B,C,D,E) 
* RF of phase [14]: [V_keyLength-V_index_0]

#### Partial ranking functions of CR eval_lookup_bb1_in(V_keyLength,V_range,V_index_0,B,C,D,E) 
* Partial RF of phase [14]:
  - RF of loop [14:1]:
    V_keyLength-V_index_0


### Resulting Chains:eval_lookup_bb1_in(V_keyLength,V_range,V_index_0,B,C,D,E) 
* [[14],15]
* [15]


### Merging Chains  eval_lookup_bb1_in/7 into  External patterns of execution 
* [[15]] --> 1 
* [[15,[14]]] --> 2 


### Specialization of cost equations eval_lookup_bb4_in/4 
* CE 10 is refined into CE [17] 
* CE 9 is refined into CE [18] 
* CE 8 is refined into CE [19] 
* CE 11 is refined into CE [20] 
* CE 7 is refined into CE [21] 


#### Refined cost equations eval_lookup_bb4_in/4 
* CE 17: eval_lookup_bb4_in(V_range,V_15,V_index_1,B) = 0
     [V_index_1>=V_range,B=4] 
* CE 18: eval_lookup_bb4_in(V_range,V_15,V_index_1,B) = 0
     [V_index_1>=V_range,B=3] 
* CE 19: eval_lookup_bb4_in(V_range,V_15,V_index_1,B) = 0
     [V_range>=V_index_1+1,B=2] 
* CE 20: eval_lookup_bb4_in(V_range,V_15,V_index_1,B) = 0
     [V_index_1>=V_range,B=2] 
* CE 21: eval_lookup_bb4_in(V_range,V_15,V_index_1,B) = 1+ eval_lookup_bb4_in(V_range,V_15,C,B)
     [V_range>=V_index_1+1,V_index_1+1=C] 

### Cost equations --> "Loop" of eval_lookup_bb4_in/4 
* CEs [21] --> Loop 16 
* CEs [17] --> Loop 17 
* CEs [18] --> Loop 18 
* CEs [19] --> Loop 19 
* CEs [20] --> Loop 20 

#### Loops of eval_lookup_bb4_in/4 
* Loop 16: eval_lookup_bb4_in(V_range,V_15,V_index_1,B)->  eval_lookup_bb4_in(V_range,V_15,V_index_1',B)
                  [V_range>=V_index_1+1,V_index_1+1=V_index_1'] 
* Loop 17: eval_lookup_bb4_in(V_range,V_15,V_index_1,B) [V_index_1>=V_range,B=4] 
* Loop 18: eval_lookup_bb4_in(V_range,V_15,V_index_1,B) [V_index_1>=V_range,B=3] 
* Loop 19: eval_lookup_bb4_in(V_range,V_15,V_index_1,B) [V_range>=V_index_1+1,B=2] 
* Loop 20: eval_lookup_bb4_in(V_range,V_15,V_index_1,B) [V_index_1>=V_range,B=2] 

### Ranking functions of CR eval_lookup_bb4_in(V_range,V_15,V_index_1,B) 
* RF of phase [16]: [V_range-V_index_1]

#### Partial ranking functions of CR eval_lookup_bb4_in(V_range,V_15,V_index_1,B) 
* Partial RF of phase [16]:
  - RF of loop [16:1]:
    V_range-V_index_1


### Resulting Chains:eval_lookup_bb4_in(V_range,V_15,V_index_1,B) 
* [[16],20]
* [[16],19]
* [[16],18]
* [[16],17]
* [20]
* [19]
* [18]
* [17]


### Merging Chains  eval_lookup_bb4_in/4 into  External patterns of execution 
* [[20]] --> 1 
* [[19],[19,[16]],[20,[16]]] --> 2 
* [[18]] --> 3 
* [[18,[16]]] --> 4 
* [[17]] --> 5 
* [[17,[16]]] --> 6 


### Specialization of cost equations loop_cont_eval_lookup_bb4_in/2 
* CE 14 is refined into CE [22] 
* CE 13 is refined into CE [23] 
* CE 12 is refined into CE [24] 


#### Refined cost equations loop_cont_eval_lookup_bb4_in/2 
* CE 22: loop_cont_eval_lookup_bb4_in(B,A) = 0
     [B=4] 
* CE 23: loop_cont_eval_lookup_bb4_in(B,A) = 0
     [B=3] 
* CE 24: loop_cont_eval_lookup_bb4_in(B,A) = 0
     [B=2] 

### Cost equations --> "Loop" of loop_cont_eval_lookup_bb4_in/2 
* CEs [22] --> Loop 21 
* CEs [23] --> Loop 22 
* CEs [24] --> Loop 23 

#### Loops of loop_cont_eval_lookup_bb4_in/2 
* Loop 21: loop_cont_eval_lookup_bb4_in(B,A) [B=4] 
* Loop 22: loop_cont_eval_lookup_bb4_in(B,A) [B=3] 
* Loop 23: loop_cont_eval_lookup_bb4_in(B,A) [B=2] 

### Ranking functions of CR loop_cont_eval_lookup_bb4_in(B,A) 

#### Partial ranking functions of CR loop_cont_eval_lookup_bb4_in(B,A) 


### Resulting Chains:loop_cont_eval_lookup_bb4_in(B,A) 
* [23]
* [22]
* [21]


### Merging Chains  loop_cont_eval_lookup_bb4_in/2 into  External patterns of execution 
* [[23]] --> 1 
* [[22]] --> 2 
* [[21]] --> 3 


### Specialization of cost equations loop_cont_eval_lookup_bb1_in/5 
* CE 6 is refined into CE [25,26,27,28,29,30] 


#### Refined cost equations loop_cont_eval_lookup_bb1_in/5 
* CE 25: loop_cont_eval_lookup_bb1_in(H,A,B,C,D) = 1+ eval_lookup_bb4_in(A,B,C,I):1+ loop_cont_eval_lookup_bb4_in(J,D):1
     [C>=A,J=2,I=2,H=5] 
* CE 26: loop_cont_eval_lookup_bb1_in(H,A,B,C,D) = 1+ eval_lookup_bb4_in(A,B,C,I):2+ loop_cont_eval_lookup_bb4_in(J,D):1
     [A>=C+1,J=2,I=2,H=5] 
* CE 27: loop_cont_eval_lookup_bb1_in(H,A,B,C,D) = 1+ eval_lookup_bb4_in(A,B,C,I):3+ loop_cont_eval_lookup_bb4_in(J,D):2
     [C>=A,J=3,I=3,H=5] 
* CE 28: loop_cont_eval_lookup_bb1_in(H,A,B,C,D) = 1+ eval_lookup_bb4_in(A,B,C,I):4+ loop_cont_eval_lookup_bb4_in(J,D):2
     [A>=C+1,J=3,I=3,H=5] 
* CE 29: loop_cont_eval_lookup_bb1_in(H,A,B,C,D) = 1+ eval_lookup_bb4_in(A,B,C,I):5+ loop_cont_eval_lookup_bb4_in(J,D):3
     [C>=A,J=4,I=4,H=5] 
* CE 30: loop_cont_eval_lookup_bb1_in(H,A,B,C,D) = 1+ eval_lookup_bb4_in(A,B,C,I):6+ loop_cont_eval_lookup_bb4_in(J,D):3
     [A>=C+1,J=4,I=4,H=5] 

### Cost equations --> "Loop" of loop_cont_eval_lookup_bb1_in/5 
* CEs [26,28,30] --> Loop 24 
* CEs [25,27,29] --> Loop 25 

#### Loops of loop_cont_eval_lookup_bb1_in/5 
* Loop 24: loop_cont_eval_lookup_bb1_in(H,A,B,C,D) [A>=C+1,H=5] 
* Loop 25: loop_cont_eval_lookup_bb1_in(H,A,B,C,D) [C>=A,H=5] 

### Ranking functions of CR loop_cont_eval_lookup_bb1_in(H,A,B,C,D) 

#### Partial ranking functions of CR loop_cont_eval_lookup_bb1_in(H,A,B,C,D) 


### Resulting Chains:loop_cont_eval_lookup_bb1_in(H,A,B,C,D) 
* [25]
* [24]


### Merging Chains  loop_cont_eval_lookup_bb1_in/5 into  External patterns of execution 
* [[25]] --> 1 
* [[24]] --> 2 


### Specialization of cost equations eval_lookup_2/3 
* CE 3 is refined into CE [31,32,33,34] 


#### Refined cost equations eval_lookup_2/3 
* CE 31: eval_lookup_2(V_keyLength,V_range,B) = 1+ eval_lookup_bb1_in(V_keyLength,V_range,C,D,V_range,V_keyLength,E):1+ loop_cont_eval_lookup_bb1_in(F,V_range,V_keyLength,G,B):1
     [0>=V_range,0>=V_keyLength,G=0,F=5,E=0,D=5,C=0] 
* CE 32: eval_lookup_2(V_keyLength,V_range,B) = 1+ eval_lookup_bb1_in(V_keyLength,V_range,C,D,V_range,V_keyLength,E):1+ loop_cont_eval_lookup_bb1_in(F,V_range,V_keyLength,G,B):2
     [V_range>=1,0>=V_keyLength,G=0,F=5,E=0,D=5,C=0] 
* CE 33: eval_lookup_2(V_keyLength,V_range,B) = 1+ eval_lookup_bb1_in(V_keyLength,V_range,C,D,V_range,V_keyLength,E):2+ loop_cont_eval_lookup_bb1_in(F,V_range,V_keyLength,G,B):1
     [V_keyLength>=1,0>=V_range,G=0,F=5,E=0,D=5,C=0] 
* CE 34: eval_lookup_2(V_keyLength,V_range,B) = 1+ eval_lookup_bb1_in(V_keyLength,V_range,C,D,V_range,V_keyLength,E):2+ loop_cont_eval_lookup_bb1_in(F,V_range,V_keyLength,G,B):2
     [V_range>=1,V_keyLength>=1,G=0,F=5,E=0,D=5,C=0] 

### Cost equations --> "Loop" of eval_lookup_2/3 
* CEs [34] --> Loop 26 
* CEs [33] --> Loop 27 
* CEs [32] --> Loop 28 
* CEs [31] --> Loop 29 

#### Loops of eval_lookup_2/3 
* Loop 26: eval_lookup_2(V_keyLength,V_range,B) [V_range>=1,V_keyLength>=1] 
* Loop 27: eval_lookup_2(V_keyLength,V_range,B) [V_keyLength>=1,0>=V_range] 
* Loop 28: eval_lookup_2(V_keyLength,V_range,B) [V_range>=1,0>=V_keyLength] 
* Loop 29: eval_lookup_2(V_keyLength,V_range,B) [0>=V_range,0>=V_keyLength] 

### Ranking functions of CR eval_lookup_2(V_keyLength,V_range,B) 

#### Partial ranking functions of CR eval_lookup_2(V_keyLength,V_range,B) 


### Resulting Chains:eval_lookup_2(V_keyLength,V_range,B) 
* [29]
* [28]
* [27]
* [26]


### Merging Chains  eval_lookup_2/3 into  External patterns of execution 
* [[29]] --> 1 
* [[28]] --> 2 
* [[27]] --> 3 
* [[26]] --> 4 


### Specialization of cost equations eval_lookup_start/3 
* CE 2 is refined into CE [35,36,37,38] 


#### Refined cost equations eval_lookup_start/3 
* CE 35: eval_lookup_start(V_keyLength,V_range,B) = 0+ eval_lookup_2(V_keyLength,V_range,B):1
     [0>=V_range,0>=V_keyLength] 
* CE 36: eval_lookup_start(V_keyLength,V_range,B) = 0+ eval_lookup_2(V_keyLength,V_range,B):2
     [V_range>=1,0>=V_keyLength] 
* CE 37: eval_lookup_start(V_keyLength,V_range,B) = 0+ eval_lookup_2(V_keyLength,V_range,B):3
     [V_keyLength>=1,0>=V_range] 
* CE 38: eval_lookup_start(V_keyLength,V_range,B) = 0+ eval_lookup_2(V_keyLength,V_range,B):4
     [V_range>=1,V_keyLength>=1] 

### Cost equations --> "Loop" of eval_lookup_start/3 
* CEs [38] --> Loop 30 
* CEs [37] --> Loop 31 
* CEs [36] --> Loop 32 
* CEs [35] --> Loop 33 

#### Loops of eval_lookup_start/3 
* Loop 30: eval_lookup_start(V_keyLength,V_range,B) [V_range>=1,V_keyLength>=1] 
* Loop 31: eval_lookup_start(V_keyLength,V_range,B) [V_keyLength>=1,0>=V_range] 
* Loop 32: eval_lookup_start(V_keyLength,V_range,B) [V_range>=1,0>=V_keyLength] 
* Loop 33: eval_lookup_start(V_keyLength,V_range,B) [0>=V_range,0>=V_keyLength] 

### Ranking functions of CR eval_lookup_start(V_keyLength,V_range,B) 

#### Partial ranking functions of CR eval_lookup_start(V_keyLength,V_range,B) 


### Resulting Chains:eval_lookup_start(V_keyLength,V_range,B) 
* [33]
* [32]
* [31]
* [30]


### Merging Chains  eval_lookup_start/3 into  External patterns of execution 
* [[33]] --> 1 
* [[32]] --> 2 
* [[31]] --> 3 
* [[30]] --> 4 


Computing Bounds
=====================================

#### Cost of loops [14] 

 * loop 14:eval_lookup_bb1_in(V_keyLength,V_range,V_index_0,B,C,D,E) -> [eval_lookup_bb1_in(V_keyLength',V_range',V_index_0',B',C',D',E')] 
1
#### Cost of phase [14]:eval_lookup_bb1_in(V_keyLength,V_range,V_index_0,B,C,D,E) -> [eval_lookup_bb1_in(V_keyLength',V_range',V_index_0',B',C',D',E')] 
1*it(14)+0
  Such that:it(14) =< V_keyLength-V_index_0
it(14) =< V_keyLength-V_index_0-V_keyLength'+V_index_0'

#### Cost of chains of eval_lookup_bb1_in(V_keyLength,V_range,V_index_0,B,C,D,E):
* Chain [[14],15]: 1*it(14)+0
  Such that:it(14) =< -V_index_0+D

  with precondition: [B=5,E=0,V_range=C,V_keyLength=D,V_index_0>=0,V_keyLength>=V_index_0+1] 

* Chain [15]: 0
  with precondition: [B=5,E=0,C=V_range,V_keyLength=D,V_index_0>=0,V_index_0>=V_keyLength] 


#### Cost of loops [16] 

 * loop 16:eval_lookup_bb4_in(V_range,V_15,V_index_1,B) -> [eval_lookup_bb4_in(V_range',V_15',V_index_1',B')] 
1
#### Cost of phase [16]:eval_lookup_bb4_in(V_range,V_15,V_index_1,B) -> [eval_lookup_bb4_in(V_range',V_15',V_index_1',B')] 
1*it(16)+0
  Such that:it(16) =< V_range-V_index_1
it(16) =< V_range-V_index_1-V_range'+V_index_1'

#### Cost of phase [16]:eval_lookup_bb4_in(V_range,V_15,V_index_1,B) -> [eval_lookup_bb4_in(V_range',V_15',V_index_1',B')] 
1*it(16)+0
  Such that:it(16) =< V_range-V_index_1
it(16) =< V_range-V_index_1-V_range'+V_index_1'

#### Cost of phase [16]:eval_lookup_bb4_in(V_range,V_15,V_index_1,B) -> [eval_lookup_bb4_in(V_range',V_15',V_index_1',B')] 
1*it(16)+0
  Such that:it(16) =< V_range-V_index_1
it(16) =< V_range-V_index_1-V_range'+V_index_1'

#### Cost of phase [16]:eval_lookup_bb4_in(V_range,V_15,V_index_1,B) -> [eval_lookup_bb4_in(V_range',V_15',V_index_1',B')] 
1*it(16)+0
  Such that:it(16) =< V_range-V_index_1
it(16) =< V_range-V_index_1-V_range'+V_index_1'

#### Cost of chains of eval_lookup_bb4_in(V_range,V_15,V_index_1,B):
* Chain [[16],20]: 1*it(16)+0
  Such that:it(16) =< V_range-V_index_1

  with precondition: [B=2,V_range>=V_index_1+1] 

* Chain [[16],19]: 1*it(16)+0
  Such that:it(16) =< V_range-V_index_1

  with precondition: [B=2,V_range>=V_index_1+2] 

* Chain [[16],18]: 1*it(16)+0
  Such that:it(16) =< V_range-V_index_1

  with precondition: [B=3,V_range>=V_index_1+1] 

* Chain [[16],17]: 1*it(16)+0
  Such that:it(16) =< V_range-V_index_1

  with precondition: [B=4,V_range>=V_index_1+1] 

* Chain [20]: 0
  with precondition: [B=2,V_index_1>=V_range] 

* Chain [19]: 0
  with precondition: [B=2,V_range>=V_index_1+1] 

* Chain [18]: 0
  with precondition: [B=3,V_index_1>=V_range] 

* Chain [17]: 0
  with precondition: [B=4,V_index_1>=V_range] 


#### Cost of chains of loop_cont_eval_lookup_bb4_in(B,A):
* Chain [23]: 0
  with precondition: [B=2] 

* Chain [22]: 0
  with precondition: [B=3] 

* Chain [21]: 0
  with precondition: [B=4] 


#### Cost of chains of loop_cont_eval_lookup_bb1_in(H,A,B,C,D):
* Chain [25]: 1
  with precondition: [H=5,C>=A] 

* Chain [24]: 4*s(4)+1
  Such that:aux(2) =< A-C
s(4) =< aux(2)

  with precondition: [H=5,A>=C+1] 


#### Cost of chains of eval_lookup_2(V_keyLength,V_range,B):
* Chain [29]: 2
  with precondition: [0>=V_keyLength,0>=V_range] 

* Chain [28]: 4*s(8)+2
  Such that:s(7) =< V_range
s(8) =< s(7)

  with precondition: [0>=V_keyLength,V_range>=1] 

* Chain [27]: 1*s(9)+2
  Such that:s(9) =< V_keyLength

  with precondition: [0>=V_range,V_keyLength>=1] 

* Chain [26]: 1*s(10)+4*s(12)+2
  Such that:s(10) =< V_keyLength
s(11) =< V_range
s(12) =< s(11)

  with precondition: [V_keyLength>=1,V_range>=1] 


#### Cost of chains of eval_lookup_start(V_keyLength,V_range,B):
* Chain [33]: 2
  with precondition: [0>=V_keyLength,0>=V_range] 

* Chain [32]: 4*s(14)+2
  Such that:s(13) =< V_range
s(14) =< s(13)

  with precondition: [0>=V_keyLength,V_range>=1] 

* Chain [31]: 1*s(15)+2
  Such that:s(15) =< V_keyLength

  with precondition: [0>=V_range,V_keyLength>=1] 

* Chain [30]: 1*s(16)+4*s(18)+2
  Such that:s(16) =< V_keyLength
s(17) =< V_range
s(18) =< s(17)

  with precondition: [V_keyLength>=1,V_range>=1] 


Closed-form bounds of eval_lookup_start(V_keyLength,V_range,B): 
-------------------------------------
* Chain [33] with precondition: [0>=V_keyLength,0>=V_range] 
    - Upper bound: 2 
    - Complexity: constant 
* Chain [32] with precondition: [0>=V_keyLength,V_range>=1] 
    - Upper bound: 4*V_range+2 
    - Complexity: n 
* Chain [31] with precondition: [0>=V_range,V_keyLength>=1] 
    - Upper bound: V_keyLength+2 
    - Complexity: n 
* Chain [30] with precondition: [V_keyLength>=1,V_range>=1] 
    - Upper bound: V_keyLength+4*V_range+2 
    - Complexity: n 

### Maximum cost of eval_lookup_start(V_keyLength,V_range,B): nat(V_range)*4+2+nat(V_keyLength) 
Asymptotic class: n 

Time statistics: 
-------------------------------------
* Partial evaluation computed in 57 ms.
* Invariants computed in 71 ms.
   - Backward Invariants 43 ms.
   - Transitive Invariants 12 ms.
* Refinement performed in 164 ms.
* Termination proved in 14 ms.
* Upper bounds computed in 126 ms.
   - Equation cost structures 57 ms.
   - Phase cost structures 19 ms.
   - Chain cost structures 39 ms.
   - Solving cost expressions 2 ms.
* Total analysis performed in 518 ms.


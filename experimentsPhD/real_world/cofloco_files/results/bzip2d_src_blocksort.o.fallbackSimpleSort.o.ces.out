Warning: Ignored call to eval_fallbackSimpleSort_stop/1 in equation eval_fallbackSimpleSort_bb16_in/1 

Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. non_recursive  : [eval_fallbackSimpleSort_bb16_in/1]
1. recursive  : [eval_fallbackSimpleSort_bb5_in/9]
2. recursive  : [eval_fallbackSimpleSort_bb3_in/6,eval_fallbackSimpleSort_bb8_in/7,loop_cont_eval_fallbackSimpleSort_bb5_in/8]
3. recursive  : [eval_fallbackSimpleSort_bb12_in/9]
4. recursive  : [eval_fallbackSimpleSort_bb10_in/4,eval_fallbackSimpleSort_bb15_in/5,loop_cont_eval_fallbackSimpleSort_bb12_in/6]
5. non_recursive  : [loop_cont_eval_fallbackSimpleSort_bb10_in/2]
6. non_recursive  : [eval_fallbackSimpleSort_bb9_in/3]
7. non_recursive  : [loop_cont_eval_fallbackSimpleSort_bb3_in/4]
8. non_recursive  : [eval_fallbackSimpleSort_bb0_in/3]
9. non_recursive  : [eval_fallbackSimpleSort_start/3]

#### Obtained direct recursion through partial evaluation 
0. SCC is completely evaluated into other SCCs
1. SCC is partially evaluated into eval_fallbackSimpleSort_bb5_in/9
2. SCC is partially evaluated into eval_fallbackSimpleSort_bb3_in/6
3. SCC is partially evaluated into eval_fallbackSimpleSort_bb12_in/9
4. SCC is partially evaluated into eval_fallbackSimpleSort_bb10_in/4
5. SCC is completely evaluated into other SCCs
6. SCC is partially evaluated into eval_fallbackSimpleSort_bb9_in/3
7. SCC is completely evaluated into other SCCs
8. SCC is partially evaluated into eval_fallbackSimpleSort_bb0_in/3
9. SCC is partially evaluated into eval_fallbackSimpleSort_start/3

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations eval_fallbackSimpleSort_bb5_in/9 
* CE 10 is refined into CE [17] 
* CE 11 is refined into CE [18] 
* CE 9 is refined into CE [19] 


#### Refined cost equations eval_fallbackSimpleSort_bb5_in/9 
* CE 17: eval_fallbackSimpleSort_bb5_in(A,B,C,D,E,A,B,C,D) = 0
     [B>=D+4,D>=C,C>=A,E=2] 
* CE 18: eval_fallbackSimpleSort_bb5_in(A,B,C,D,E,A,B,C,D) = 0
     [D>=C,D+3>=B,C>=A,E=2] 
* CE 19: eval_fallbackSimpleSort_bb5_in(V_lo,V_hi,V_i_0,V_i_0_sink,B,C,D,E,F) = 1+ eval_fallbackSimpleSort_bb5_in(V_lo,V_hi,V_i_0,G,H,C,D,E,F)
     [V_hi>=V_i_0_sink+4,V_i_0_sink>=V_i_0,V_i_0>=V_lo,V_i_0_sink+4=G,H=2,B=2] 

### Cost equations --> "Loop" of eval_fallbackSimpleSort_bb5_in/9 
* CEs [19] --> Loop 14 
* CEs [17] --> Loop 15 
* CEs [18] --> Loop 16 

#### Loops of eval_fallbackSimpleSort_bb5_in/9 
* Loop 14: eval_fallbackSimpleSort_bb5_in(V_lo,V_hi,V_i_0,V_i_0_sink,B,C,D,E,F)->  eval_fallbackSimpleSort_bb5_in(V_lo,V_hi,V_i_0,V_i_0_sink',B',C,D,E,F)
                  [V_hi>=V_i_0_sink+4,V_i_0_sink>=V_i_0,V_i_0>=V_lo,V_i_0_sink+4=V_i_0_sink',B'=2,B=2] 
* Loop 15: eval_fallbackSimpleSort_bb5_in(A,B,C,D,E,A,B,C,D) [B>=D+4,D>=C,C>=A,E=2] 
* Loop 16: eval_fallbackSimpleSort_bb5_in(A,B,C,D,E,A,B,C,D) [D>=C,D+3>=B,C>=A,E=2] 

### Ranking functions of CR eval_fallbackSimpleSort_bb5_in(V_lo,V_hi,V_i_0,V_i_0_sink,B,C,D,E,F) 
* RF of phase [14]: [V_hi-V_i_0_sink-3]

#### Partial ranking functions of CR eval_fallbackSimpleSort_bb5_in(V_lo,V_hi,V_i_0,V_i_0_sink,B,C,D,E,F) 
* Partial RF of phase [14]:
  - RF of loop [14:1]:
    V_hi-V_i_0_sink-3


### Resulting Chains:eval_fallbackSimpleSort_bb5_in(V_lo,V_hi,V_i_0,V_i_0_sink,B,C,D,E,F) 
* [[14],16]
* [[14],15]
* [16]
* [15]


### Merging Chains  eval_fallbackSimpleSort_bb5_in/9 into  External patterns of execution 
* [[16]] --> 1 
* [[15]] --> 2 
* [[16,[14]]] --> 3 
* [[15,[14]]] --> 4 


### Specialization of cost equations eval_fallbackSimpleSort_bb3_in/6 
* CE 7 is refined into CE [20] 
* CE 6 is refined into CE [21,22,23,24] 


#### Refined cost equations eval_fallbackSimpleSort_bb3_in/6 
* CE 20: eval_fallbackSimpleSort_bb3_in(A,B,C,D,A,B) = 0
     [A>=C+1,D=4] 
* CE 21: eval_fallbackSimpleSort_bb3_in(V_lo,V_hi,V_i_0,B,C,D) = 2+ eval_fallbackSimpleSort_bb5_in(V_lo,V_hi,V_i_0,V_i_0,E,V_lo,V_hi,V_i_0,V_i_0):1+ eval_fallbackSimpleSort_bb3_in(V_lo,V_hi,F,G,C,D)
     [V_i_0+3>=V_hi,V_i_0>=V_lo,V_i_0=F+1,G=4,E=2,B=4] 
* CE 22: eval_fallbackSimpleSort_bb3_in(V_lo,V_hi,V_i_0,B,C,D) = 2+ eval_fallbackSimpleSort_bb5_in(V_lo,V_hi,V_i_0,V_i_0,E,V_lo,V_hi,V_i_0,V_i_0):2+ eval_fallbackSimpleSort_bb3_in(V_lo,V_hi,F,G,C,D)
     [V_hi>=V_i_0+4,V_i_0>=V_lo,V_i_0=F+1,G=4,E=2,B=4] 
* CE 23: eval_fallbackSimpleSort_bb3_in(V_lo,V_hi,V_i_0,B,C,D) = 2+ eval_fallbackSimpleSort_bb5_in(V_lo,V_hi,V_i_0,V_i_0,E,V_lo,V_hi,V_i_0,F):3+ eval_fallbackSimpleSort_bb3_in(V_lo,V_hi,G,H,C,D)
     [V_hi>=F,F>=V_i_0+4,F+3>=V_hi,V_i_0>=V_lo,V_i_0=G+1,H=4,E=2,B=4] 
* CE 24: eval_fallbackSimpleSort_bb3_in(V_lo,V_hi,V_i_0,B,C,D) = 2+ eval_fallbackSimpleSort_bb5_in(V_lo,V_hi,V_i_0,V_i_0,E,V_lo,V_hi,V_i_0,F):4+ eval_fallbackSimpleSort_bb3_in(V_lo,V_hi,G,H,C,D)
     [V_hi>=F+4,F>=V_i_0+4,V_i_0>=V_lo,V_i_0=G+1,H=4,E=2,B=4] 

### Cost equations --> "Loop" of eval_fallbackSimpleSort_bb3_in/6 
* CEs [21] --> Loop 17 
* CEs [22,23,24] --> Loop 18 
* CEs [20] --> Loop 19 

#### Loops of eval_fallbackSimpleSort_bb3_in/6 
* Loop 17: eval_fallbackSimpleSort_bb3_in(V_lo,V_hi,V_i_0,B,C,D)->  eval_fallbackSimpleSort_bb3_in(V_lo,V_hi,V_i_0',B',C,D)
                  [V_i_0+3>=V_hi,V_i_0>=V_lo,V_i_0=V_i_0'+1,B'=4,B=4] 
* Loop 18: eval_fallbackSimpleSort_bb3_in(V_lo,V_hi,V_i_0,B,C,D)->  eval_fallbackSimpleSort_bb3_in(V_lo,V_hi,V_i_0',B',C,D)
                  [V_hi>=V_i_0+4,V_i_0>=V_lo,V_i_0=V_i_0'+1,B'=4,B=4] 
* Loop 19: eval_fallbackSimpleSort_bb3_in(A,B,C,D,A,B) [A>=C+1,D=4] 

### Ranking functions of CR eval_fallbackSimpleSort_bb3_in(V_lo,V_hi,V_i_0,B,C,D) 
* RF of phase [18]: [-V_lo+V_i_0+1]

#### Partial ranking functions of CR eval_fallbackSimpleSort_bb3_in(V_lo,V_hi,V_i_0,B,C,D) 
* Partial RF of phase [18]:
  - RF of loop [18:1]:
    -V_lo+V_i_0+1


### Resulting Chains:eval_fallbackSimpleSort_bb3_in(V_lo,V_hi,V_i_0,B,C,D) 
* [[18],19]
* [19]


### Merging Chains  eval_fallbackSimpleSort_bb3_in/6 into  External patterns of execution 
* [[19,[18]]] --> 1 
* [[19]] --> 2 


### Specialization of cost equations eval_fallbackSimpleSort_bb12_in/9 
* CE 15 is refined into CE [25] 
* CE 16 is refined into CE [26] 
* CE 14 is refined into CE [27] 


#### Refined cost equations eval_fallbackSimpleSort_bb12_in/9 
* CE 25: eval_fallbackSimpleSort_bb12_in(A,B,C,D,E,A,B,C,D) = 0
     [B>=D+1,D>=C,C>=A,E=3] 
* CE 26: eval_fallbackSimpleSort_bb12_in(A,B,C,D,E,A,B,C,D) = 0
     [D>=C,D>=B,C>=A,E=3] 
* CE 27: eval_fallbackSimpleSort_bb12_in(V_lo,V_hi,V_i_1,V_i_1_sink,B,C,D,E,F) = 1+ eval_fallbackSimpleSort_bb12_in(V_lo,V_hi,V_i_1,G,H,C,D,E,F)
     [V_hi>=V_i_1_sink+1,V_i_1_sink>=V_i_1,V_i_1>=V_lo,V_i_1_sink+1=G,H=3,B=3] 

### Cost equations --> "Loop" of eval_fallbackSimpleSort_bb12_in/9 
* CEs [27] --> Loop 20 
* CEs [25] --> Loop 21 
* CEs [26] --> Loop 22 

#### Loops of eval_fallbackSimpleSort_bb12_in/9 
* Loop 20: eval_fallbackSimpleSort_bb12_in(V_lo,V_hi,V_i_1,V_i_1_sink,B,C,D,E,F)->  eval_fallbackSimpleSort_bb12_in(V_lo,V_hi,V_i_1,V_i_1_sink',B',C,D,E,F)
                  [V_hi>=V_i_1_sink+1,V_i_1_sink>=V_i_1,V_i_1>=V_lo,V_i_1_sink+1=V_i_1_sink',B'=3,B=3] 
* Loop 21: eval_fallbackSimpleSort_bb12_in(A,B,C,D,E,A,B,C,D) [B>=D+1,D>=C,C>=A,E=3] 
* Loop 22: eval_fallbackSimpleSort_bb12_in(A,B,C,D,E,A,B,C,D) [D>=C,D>=B,C>=A,E=3] 

### Ranking functions of CR eval_fallbackSimpleSort_bb12_in(V_lo,V_hi,V_i_1,V_i_1_sink,B,C,D,E,F) 
* RF of phase [20]: [V_hi-V_i_1_sink]

#### Partial ranking functions of CR eval_fallbackSimpleSort_bb12_in(V_lo,V_hi,V_i_1,V_i_1_sink,B,C,D,E,F) 
* Partial RF of phase [20]:
  - RF of loop [20:1]:
    V_hi-V_i_1_sink


### Resulting Chains:eval_fallbackSimpleSort_bb12_in(V_lo,V_hi,V_i_1,V_i_1_sink,B,C,D,E,F) 
* [[20],22]
* [[20],21]
* [22]
* [21]


### Merging Chains  eval_fallbackSimpleSort_bb12_in/9 into  External patterns of execution 
* [[22,[20]]] --> 1 
* [[22]] --> 2 
* [[21]] --> 3 
* [[21,[20]]] --> 4 


### Specialization of cost equations eval_fallbackSimpleSort_bb10_in/4 
* CE 13 is refined into CE [28] 
* CE 12 is refined into CE [29,30,31,32] 


#### Refined cost equations eval_fallbackSimpleSort_bb10_in/4 
* CE 28: eval_fallbackSimpleSort_bb10_in(V_lo,V_hi,V_i_1,B) = 0
     [V_lo>=V_i_1+1,B=5] 
* CE 29: eval_fallbackSimpleSort_bb10_in(V_lo,V_hi,V_i_1,B) = 2+ eval_fallbackSimpleSort_bb12_in(V_lo,V_hi,V_i_1,V_i_1,C,V_lo,V_hi,V_i_1,V_hi):1+ eval_fallbackSimpleSort_bb10_in(V_lo,V_hi,D,E)
     [V_hi>=V_i_1+1,V_i_1>=V_lo,V_i_1=D+1,E=5,C=3,B=5] 
* CE 30: eval_fallbackSimpleSort_bb10_in(V_lo,V_hi,V_i_1,B) = 2+ eval_fallbackSimpleSort_bb12_in(V_lo,V_hi,V_i_1,V_i_1,C,V_lo,V_hi,V_i_1,V_i_1):2+ eval_fallbackSimpleSort_bb10_in(V_lo,V_hi,D,E)
     [V_i_1>=V_hi,V_i_1>=V_lo,V_i_1=D+1,E=5,C=3,B=5] 
* CE 31: eval_fallbackSimpleSort_bb10_in(V_lo,V_hi,V_i_1,B) = 2+ eval_fallbackSimpleSort_bb12_in(V_lo,V_hi,V_i_1,V_i_1,C,V_lo,V_hi,V_i_1,V_i_1):3+ eval_fallbackSimpleSort_bb10_in(V_lo,V_hi,D,E)
     [V_hi>=V_i_1+1,V_i_1>=V_lo,V_i_1=D+1,E=5,C=3,B=5] 
* CE 32: eval_fallbackSimpleSort_bb10_in(V_lo,V_hi,V_i_1,B) = 2+ eval_fallbackSimpleSort_bb12_in(V_lo,V_hi,V_i_1,V_i_1,C,V_lo,V_hi,V_i_1,D):4+ eval_fallbackSimpleSort_bb10_in(V_lo,V_hi,E,F)
     [V_hi>=D+1,D>=V_i_1+1,V_i_1>=V_lo,V_i_1=E+1,F=5,C=3,B=5] 

### Cost equations --> "Loop" of eval_fallbackSimpleSort_bb10_in/4 
* CEs [30] --> Loop 23 
* CEs [29,31,32] --> Loop 24 
* CEs [28] --> Loop 25 

#### Loops of eval_fallbackSimpleSort_bb10_in/4 
* Loop 23: eval_fallbackSimpleSort_bb10_in(V_lo,V_hi,V_i_1,B)->  eval_fallbackSimpleSort_bb10_in(V_lo,V_hi,V_i_1',B')
                  [V_i_1>=V_hi,V_i_1>=V_lo,V_i_1=V_i_1'+1,B'=5,B=5] 
* Loop 24: eval_fallbackSimpleSort_bb10_in(V_lo,V_hi,V_i_1,B)->  eval_fallbackSimpleSort_bb10_in(V_lo,V_hi,V_i_1',B')
                  [V_hi>=V_i_1+1,V_i_1>=V_lo,V_i_1=V_i_1'+1,B'=5,B=5] 
* Loop 25: eval_fallbackSimpleSort_bb10_in(V_lo,V_hi,V_i_1,B) [V_lo>=V_i_1+1,B=5] 

### Ranking functions of CR eval_fallbackSimpleSort_bb10_in(V_lo,V_hi,V_i_1,B) 
* RF of phase [24]: [-V_lo+V_i_1+1]

#### Partial ranking functions of CR eval_fallbackSimpleSort_bb10_in(V_lo,V_hi,V_i_1,B) 
* Partial RF of phase [24]:
  - RF of loop [24:1]:
    -V_lo+V_i_1+1


### Resulting Chains:eval_fallbackSimpleSort_bb10_in(V_lo,V_hi,V_i_1,B) 
* [[24],25]
* [25]


### Merging Chains  eval_fallbackSimpleSort_bb10_in/4 into  External patterns of execution 
* [[25,[24]]] --> 1 
* [[25]] --> 2 


### Specialization of cost equations eval_fallbackSimpleSort_bb9_in/3 
* CE 8 is refined into CE [33,34] 


#### Refined cost equations eval_fallbackSimpleSort_bb9_in/3 
* CE 33: eval_fallbackSimpleSort_bb9_in(V_lo,V_hi,B) = 1+ eval_fallbackSimpleSort_bb10_in(V_lo,C,D,E):1
     [D>=V_lo,D+1=C,D+1=V_hi,E=5] 
* CE 34: eval_fallbackSimpleSort_bb9_in(V_lo,V_hi,B) = 1+ eval_fallbackSimpleSort_bb10_in(V_lo,C,D,E):2
     [V_lo>=D+1,D+1=C,D+1=V_hi,E=5] 

### Cost equations --> "Loop" of eval_fallbackSimpleSort_bb9_in/3 
* CEs [34] --> Loop 26 
* CEs [33] --> Loop 27 

#### Loops of eval_fallbackSimpleSort_bb9_in/3 
* Loop 26: eval_fallbackSimpleSort_bb9_in(V_lo,V_hi,B) [V_lo>=V_hi] 
* Loop 27: eval_fallbackSimpleSort_bb9_in(V_lo,V_hi,B) [V_hi>=V_lo+1] 

### Ranking functions of CR eval_fallbackSimpleSort_bb9_in(V_lo,V_hi,B) 

#### Partial ranking functions of CR eval_fallbackSimpleSort_bb9_in(V_lo,V_hi,B) 


### Resulting Chains:eval_fallbackSimpleSort_bb9_in(V_lo,V_hi,B) 
* [27]
* [26]


### Merging Chains  eval_fallbackSimpleSort_bb9_in/3 into  External patterns of execution 
* [[27]] --> 1 
* [[26]] --> 2 


### Specialization of cost equations eval_fallbackSimpleSort_bb0_in/3 
* CE 3 is refined into CE [35] 
* CE 4 is refined into CE [36,37,38] 
* CE 5 is refined into CE [39,40] 


#### Refined cost equations eval_fallbackSimpleSort_bb0_in/3 
* CE 35: eval_fallbackSimpleSort_bb0_in(V_lo,V_hi,B) = 0
     [] 
* CE 36: eval_fallbackSimpleSort_bb0_in(V_lo,V_hi,B) = 1+ eval_fallbackSimpleSort_bb3_in(V_lo,V_hi,C,D,V_lo,V_hi):1+ eval_fallbackSimpleSort_bb9_in(V_lo,V_hi,B):1
     [V_hi>=V_lo+4,V_hi=C+4,D=4] 
* CE 37: eval_fallbackSimpleSort_bb0_in(V_lo,V_hi,B) = 1+ eval_fallbackSimpleSort_bb3_in(V_lo,V_hi,C,D,V_lo,V_hi):2+ eval_fallbackSimpleSort_bb9_in(V_lo,V_hi,B):1
     [V_lo+3>=V_hi,V_hi>=V_lo+1,V_hi=C+4,D=4] 
* CE 38: eval_fallbackSimpleSort_bb0_in(V_lo,V_hi,B) = 1+ eval_fallbackSimpleSort_bb3_in(V_lo,V_hi,C,D,V_lo,V_hi):2+ eval_fallbackSimpleSort_bb9_in(V_lo,V_hi,B):2
     [V_lo>=V_hi,V_hi=C+4,D=4] 
* CE 39: eval_fallbackSimpleSort_bb0_in(V_lo,V_hi,B) = 0+ eval_fallbackSimpleSort_bb9_in(V_lo,V_hi,B):1
     [V_hi>=V_lo+1] 
* CE 40: eval_fallbackSimpleSort_bb0_in(V_lo,V_hi,B) = 0+ eval_fallbackSimpleSort_bb9_in(V_lo,V_hi,B):2
     [V_lo>=V_hi] 

### Cost equations --> "Loop" of eval_fallbackSimpleSort_bb0_in/3 
* CEs [35,36,37,38,39,40] --> Loop 28 

#### Loops of eval_fallbackSimpleSort_bb0_in/3 
* Loop 28: eval_fallbackSimpleSort_bb0_in(V_lo,V_hi,B) [] 

### Ranking functions of CR eval_fallbackSimpleSort_bb0_in(V_lo,V_hi,B) 

#### Partial ranking functions of CR eval_fallbackSimpleSort_bb0_in(V_lo,V_hi,B) 


### Resulting Chains:eval_fallbackSimpleSort_bb0_in(V_lo,V_hi,B) 
* [28]


### Merging Chains  eval_fallbackSimpleSort_bb0_in/3 into  External patterns of execution 
* [[28]] --> 1 


### Specialization of cost equations eval_fallbackSimpleSort_start/3 
* CE 2 is refined into CE [41] 


#### Refined cost equations eval_fallbackSimpleSort_start/3 
* CE 41: eval_fallbackSimpleSort_start(V_lo,V_hi,B) = 0+ eval_fallbackSimpleSort_bb0_in(V_lo,V_hi,B):1
     [] 

### Cost equations --> "Loop" of eval_fallbackSimpleSort_start/3 
* CEs [41] --> Loop 29 

#### Loops of eval_fallbackSimpleSort_start/3 
* Loop 29: eval_fallbackSimpleSort_start(V_lo,V_hi,B) [] 

### Ranking functions of CR eval_fallbackSimpleSort_start(V_lo,V_hi,B) 

#### Partial ranking functions of CR eval_fallbackSimpleSort_start(V_lo,V_hi,B) 


### Resulting Chains:eval_fallbackSimpleSort_start(V_lo,V_hi,B) 
* [29]


### Merging Chains  eval_fallbackSimpleSort_start/3 into  External patterns of execution 
* [[29]] --> 1 


Computing Bounds
=====================================

#### Cost of loops [14] 

 * loop 14:eval_fallbackSimpleSort_bb5_in(V_lo,V_hi,V_i_0,V_i_0_sink,B,C,D,E,F) -> [eval_fallbackSimpleSort_bb5_in(V_lo',V_hi',V_i_0',V_i_0_sink',B',C',D',E',F')] 
1
#### Cost of phase [14]:eval_fallbackSimpleSort_bb5_in(V_lo,V_hi,V_i_0,V_i_0_sink,B,C,D,E,F) -> [eval_fallbackSimpleSort_bb5_in(V_lo',V_hi',V_i_0',V_i_0_sink',B',C',D',E',F')] 
1*it(14)+0
  Such that:it(14) =< V_hi-V_i_0_sink
it(14) =< V_hi-V_i_0_sink-V_hi'+V_i_0_sink'

#### Cost of phase [14]:eval_fallbackSimpleSort_bb5_in(V_lo,V_hi,V_i_0,V_i_0_sink,B,C,D,E,F) -> [eval_fallbackSimpleSort_bb5_in(V_lo',V_hi',V_i_0',V_i_0_sink',B',C',D',E',F')] 
1*it(14)+0
  Such that:it(14) =< V_hi-V_i_0_sink
it(14) =< V_hi-V_i_0_sink-V_hi'+V_i_0_sink'

#### Cost of chains of eval_fallbackSimpleSort_bb5_in(V_lo,V_hi,V_i_0,V_i_0_sink,B,C,D,E,F):
* Chain [[14],16]: 1*it(14)+0
  Such that:it(14) =< -V_i_0_sink+F

  with precondition: [B=2,V_lo=C,V_hi=D,V_i_0=E,V_i_0>=V_lo,F+3>=V_hi,V_i_0_sink>=V_i_0,F>=V_i_0_sink+4,V_hi>=F] 

* Chain [[14],15]: 1*it(14)+0
  Such that:it(14) =< -V_i_0_sink+F

  with precondition: [B=2,V_lo=C,V_hi=D,V_i_0=E,V_i_0>=V_lo,V_i_0_sink>=V_i_0,F>=V_i_0_sink+4,V_hi>=F+4] 

* Chain [16]: 0
  with precondition: [B=2,V_lo=C,V_hi=D,V_i_0=E,V_i_0_sink=F,V_i_0>=V_lo,V_i_0_sink+3>=V_hi,V_i_0_sink>=V_i_0] 

* Chain [15]: 0
  with precondition: [B=2,V_lo=C,V_hi=D,V_i_0=E,V_i_0_sink=F,V_i_0>=V_lo,V_i_0_sink>=V_i_0,V_hi>=V_i_0_sink+4] 


#### Cost of loops [18] 

 * loop 18:eval_fallbackSimpleSort_bb3_in(V_lo,V_hi,V_i_0,B,C,D) -> [eval_fallbackSimpleSort_bb3_in(V_lo',V_hi',V_i_0',B',C',D')] 
2*s(4)+2
  Such that:s(3) =< V_hi'-V_i_0'
s(4) =< s(3)

#### Cost of phase [18]:eval_fallbackSimpleSort_bb3_in(V_lo,V_hi,V_i_0,B,C,D) -> [eval_fallbackSimpleSort_bb3_in(V_lo',V_hi',V_i_0',B',C',D')] 
2*it(18)+2*s(5)+0
  Such that:aux(2) =< -V_lo+V_hi+1
it(18) =< -V_lo+V_i_0+1
it(18) =< -V_lo+V_i_0+V_lo'-V_i_0'
s(6) =< it(18)*aux(2)
s(5) =< s(6)

#### Cost of chains of eval_fallbackSimpleSort_bb3_in(V_lo,V_hi,V_i_0,B,C,D):
* Chain [[18],19]: 2*it(18)+2*s(5)+0
  Such that:it(18) =< -V_lo+V_i_0+1
aux(2) =< -V_lo+D+1
s(6) =< it(18)*aux(2)
s(5) =< s(6)

  with precondition: [B=4,V_lo=C,V_hi=D,V_i_0>=V_lo,V_hi>=V_i_0+4] 

* Chain [19]: 0
  with precondition: [B=4,V_lo=C,V_hi=D,V_lo>=V_i_0+1,V_hi>=V_i_0+4] 


#### Cost of loops [20] 

 * loop 20:eval_fallbackSimpleSort_bb12_in(V_lo,V_hi,V_i_1,V_i_1_sink,B,C,D,E,F) -> [eval_fallbackSimpleSort_bb12_in(V_lo',V_hi',V_i_1',V_i_1_sink',B',C',D',E',F')] 
1
#### Cost of phase [20]:eval_fallbackSimpleSort_bb12_in(V_lo,V_hi,V_i_1,V_i_1_sink,B,C,D,E,F) -> [eval_fallbackSimpleSort_bb12_in(V_lo',V_hi',V_i_1',V_i_1_sink',B',C',D',E',F')] 
1*it(20)+0
  Such that:it(20) =< V_hi-V_i_1_sink
it(20) =< V_hi-V_i_1_sink-V_hi'+V_i_1_sink'

#### Cost of phase [20]:eval_fallbackSimpleSort_bb12_in(V_lo,V_hi,V_i_1,V_i_1_sink,B,C,D,E,F) -> [eval_fallbackSimpleSort_bb12_in(V_lo',V_hi',V_i_1',V_i_1_sink',B',C',D',E',F')] 
1*it(20)+0
  Such that:it(20) =< V_hi-V_i_1_sink
it(20) =< V_hi-V_i_1_sink-V_hi'+V_i_1_sink'

#### Cost of chains of eval_fallbackSimpleSort_bb12_in(V_lo,V_hi,V_i_1,V_i_1_sink,B,C,D,E,F):
* Chain [[20],22]: 1*it(20)+0
  Such that:it(20) =< -V_i_1_sink+F

  with precondition: [B=3,V_lo=C,V_hi=D,V_i_1=E,V_hi=F,V_i_1>=V_lo,V_i_1_sink>=V_i_1,V_hi>=V_i_1_sink+1] 

* Chain [[20],21]: 1*it(20)+0
  Such that:it(20) =< -V_i_1_sink+F

  with precondition: [B=3,V_lo=C,V_hi=D,V_i_1=E,V_i_1>=V_lo,V_i_1_sink>=V_i_1,F>=V_i_1_sink+1,V_hi>=F+1] 

* Chain [22]: 0
  with precondition: [B=3,V_lo=C,V_hi=D,V_i_1=E,V_i_1_sink=F,V_i_1>=V_lo,V_i_1_sink>=V_hi,V_i_1_sink>=V_i_1] 

* Chain [21]: 0
  with precondition: [B=3,V_lo=C,V_hi=D,V_i_1=E,V_i_1_sink=F,V_i_1>=V_lo,V_i_1_sink>=V_i_1,V_hi>=V_i_1_sink+1] 


#### Cost of loops [24] 

 * loop 24:eval_fallbackSimpleSort_bb10_in(V_lo,V_hi,V_i_1,B) -> [eval_fallbackSimpleSort_bb10_in(V_lo',V_hi',V_i_1',B')] 
1*s(9)+1*s(10)+2
  Such that:s(9) =< -V_i_1+V_hi'
s(10) =< V_hi'-V_i_1'

#### Cost of phase [24]:eval_fallbackSimpleSort_bb10_in(V_lo,V_hi,V_i_1,B) -> [eval_fallbackSimpleSort_bb10_in(V_lo',V_hi',V_i_1',B')] 
2*it(24)+1*s(11)+1*s(12)+0
  Such that:aux(3) =< -V_lo+V_hi
it(24) =< -V_lo+V_i_1+1
it(24) =< -V_lo+V_i_1+V_lo'-V_i_1'
aux(4) =< aux(3)+1
s(11) =< it(24)*aux(3)
s(12) =< it(24)*aux(4)

#### Cost of chains of eval_fallbackSimpleSort_bb10_in(V_lo,V_hi,V_i_1,B):
* Chain [[24],25]: 2*it(24)+1*s(11)+1*s(12)+0
  Such that:aux(3) =< -V_lo+V_hi
it(24) =< -V_lo+V_i_1+1
aux(4) =< aux(3)+1
s(11) =< it(24)*aux(3)
s(12) =< it(24)*aux(4)

  with precondition: [B=5,V_i_1>=V_lo,V_hi>=V_i_1+1] 

* Chain [25]: 0
  with precondition: [B=5,V_lo>=V_i_1+1,V_hi>=V_i_1+1] 


#### Cost of chains of eval_fallbackSimpleSort_bb9_in(V_lo,V_hi,B):
* Chain [27]: 2*s(14)+1*s(16)+1*s(17)+1
  Such that:aux(5) =< -V_lo+V_hi
s(14) =< aux(5)
s(15) =< aux(5)+1
s(16) =< s(14)*aux(5)
s(17) =< s(14)*s(15)

  with precondition: [V_hi>=V_lo+1] 

* Chain [26]: 1
  with precondition: [V_lo>=V_hi] 


#### Cost of chains of eval_fallbackSimpleSort_bb0_in(V_lo,V_hi,B):
* Chain [28]: 8*s(18)+2*s(21)+3*s(25)+3*s(26)+2
  Such that:s(19) =< -V_lo+V_hi+1
aux(7) =< -V_lo+V_hi
s(18) =< aux(7)
s(24) =< aux(7)+1
s(25) =< s(18)*aux(7)
s(26) =< s(18)*s(24)
s(20) =< s(18)*s(19)
s(21) =< s(20)

  with precondition: [] 


#### Cost of chains of eval_fallbackSimpleSort_start(V_lo,V_hi,B):
* Chain [29]: 8*s(39)+3*s(41)+3*s(42)+2*s(44)+2
  Such that:s(38) =< -V_lo+V_hi
s(37) =< -V_lo+V_hi+1
s(39) =< s(38)
s(40) =< s(38)+1
s(41) =< s(39)*s(38)
s(42) =< s(39)*s(40)
s(43) =< s(39)*s(37)
s(44) =< s(43)

  with precondition: [] 


Closed-form bounds of eval_fallbackSimpleSort_start(V_lo,V_hi,B): 
-------------------------------------
* Chain [29] with precondition: [] 
    - Upper bound: nat(-V_lo+V_hi)*11+2+nat(-V_lo+V_hi)*6*nat(-V_lo+V_hi)+nat(-V_lo+V_hi+1)*2*nat(-V_lo+V_hi) 
    - Complexity: n^2 

### Maximum cost of eval_fallbackSimpleSort_start(V_lo,V_hi,B): nat(-V_lo+V_hi)*11+2+nat(-V_lo+V_hi)*6*nat(-V_lo+V_hi)+nat(-V_lo+V_hi+1)*2*nat(-V_lo+V_hi) 
Asymptotic class: n^2 

Time statistics: 
-------------------------------------
* Partial evaluation computed in 68 ms.
* Invariants computed in 196 ms.
   - Backward Invariants 98 ms.
   - Transitive Invariants 45 ms.
* Refinement performed in 289 ms.
* Termination proved in 33 ms.
* Upper bounds computed in 106 ms.
   - Equation cost structures 34 ms.
   - Phase cost structures 49 ms.
   - Chain cost structures 32 ms.
   - Solving cost expressions 1 ms.
* Total analysis performed in 829 ms.


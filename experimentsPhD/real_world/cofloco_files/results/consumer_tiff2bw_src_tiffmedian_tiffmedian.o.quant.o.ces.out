Warning: Ignored call to eval_quant_stop/1 in equation eval_quant_34/1 

Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. recursive  : [eval_quant_bb3_in/9]
1. recursive  : [eval_quant_28/7,eval_quant_29/7,eval_quant_7/6,eval_quant_8/6,eval_quant_bb1_in/6,loop_cont_eval_quant_bb3_in/8]
2. non_recursive  : [eval_quant_34/1]
3. non_recursive  : [eval_quant_33/3]
4. non_recursive  : [eval_quant_32/3]
5. non_recursive  : [eval_quant_bb7_in/3]
6. non_recursive  : [loop_cont_eval_quant_bb1_in/4]
7. non_recursive  : [eval_quant_4/3]
8. non_recursive  : [eval_quant_3/4]
9. non_recursive  : [eval_quant_2/3]
10. non_recursive  : [eval_quant_1/4]
11. non_recursive  : [eval_quant_0/3]
12. non_recursive  : [eval_quant_bb0_in/3]
13. non_recursive  : [eval_quant_start/3]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into eval_quant_bb3_in/9
1. SCC is partially evaluated into eval_quant_bb1_in/6
2. SCC is completely evaluated into other SCCs
3. SCC is completely evaluated into other SCCs
4. SCC is completely evaluated into other SCCs
5. SCC is completely evaluated into other SCCs
6. SCC is completely evaluated into other SCCs
7. SCC is partially evaluated into eval_quant_4/3
8. SCC is completely evaluated into other SCCs
9. SCC is completely evaluated into other SCCs
10. SCC is completely evaluated into other SCCs
11. SCC is completely evaluated into other SCCs
12. SCC is completely evaluated into other SCCs
13. SCC is partially evaluated into eval_quant_start/3

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations eval_quant_bb3_in/9 
* CE 9 is refined into CE [10] 
* CE 8 is refined into CE [11] 


#### Refined cost equations eval_quant_bb3_in/9 
* CE 10: eval_quant_bb3_in(A,B,C,D,E,A,B,C,D) = 0
     [D>=A,D>=0,E=2] 
* CE 11: eval_quant_bb3_in(V__imagewidth,V__imagelength,V_i_0,V_j_0,B,C,D,E,F) = 1+ eval_quant_bb3_in(G,H,V_i_0,I,J,C,D,E,F)
     [V__imagewidth>=V_j_0+1,V_j_0>=0,V_j_0+1=I,J=2,B=2] 

### Cost equations --> "Loop" of eval_quant_bb3_in/9 
* CEs [11] --> Loop 8 
* CEs [10] --> Loop 9 

#### Loops of eval_quant_bb3_in/9 
* Loop 8: eval_quant_bb3_in(V__imagewidth,V__imagelength,V_i_0,V_j_0,B,C,D,E,F)->  eval_quant_bb3_in(V__imagewidth',V__imagelength',V_i_0,V_j_0',B',C,D,E,F)
                  [V__imagewidth>=V_j_0+1,V_j_0>=0,V_j_0+1=V_j_0',B'=2,B=2] 
* Loop 9: eval_quant_bb3_in(A,B,C,D,E,A,B,C,D) [D>=A,D>=0,E=2] 

### Ranking functions of CR eval_quant_bb3_in(V__imagewidth,V__imagelength,V_i_0,V_j_0,B,C,D,E,F) 

#### Partial ranking functions of CR eval_quant_bb3_in(V__imagewidth,V__imagelength,V_i_0,V_j_0,B,C,D,E,F) 


### Resulting Chains:eval_quant_bb3_in(V__imagewidth,V__imagelength,V_i_0,V_j_0,B,C,D,E,F) 
* [[8]]...
* [[8],9]
* [9]


### Merging Chains  eval_quant_bb3_in/9 into  External patterns of execution 
* [[9]] --> 1 
* [[9,[8]]] --> 2 
* [[[8]]] --> 3 


### Specialization of cost equations eval_quant_bb1_in/6 
* CE 5 is refined into CE [12,13,14] 
* CE 6 is refined into CE [15] 
* CE 7 is refined into CE [16] 
* CE 4 is refined into CE [17,18,19] 


#### Refined cost equations eval_quant_bb1_in/6 
* CE 12: eval_quant_bb1_in(A,B,C,D,A,B) = 1+ eval_quant_bb3_in(A,B,C,E,F,A,B,C,G):1
     [B>=C+1,0>=A,G=0,F=2,E=0,D=3] 
* CE 13: eval_quant_bb1_in(V__imagewidth,V__imagelength,V_i_0,B,C,D) = 1+ eval_quant_bb3_in(V__imagewidth,V__imagelength,V_i_0,E,F,C,D,V_i_0,G):2
     [V__imagelength>=V_i_0+1,G>=C,G>=1,V__imagewidth>=1,F=2,E=0,B=3] 
* CE 14: eval_quant_bb1_in(V__imagewidth,V__imagelength,V_i_0,B,C,D) = 1+ eval_quant_bb3_in(V__imagewidth,V__imagelength,V_i_0,E,F,C,D,G,H):3
     [V__imagelength>=V_i_0+1,V__imagewidth>=1,F=2,E=0,B=3] 
* CE 15: eval_quant_bb1_in(A,B,C,D,A,B) = 0
     [B>=C+1,D=3] 
* CE 16: eval_quant_bb1_in(A,B,C,D,A,B) = 0
     [C>=B,D=3] 
* CE 17: eval_quant_bb1_in(V__imagewidth,V__imagelength,V_i_0,B,C,D) = 2+ eval_quant_bb3_in(V__imagewidth,V__imagelength,V_i_0,E,F,V__imagewidth,V__imagelength,V_i_0,G):1+ eval_quant_bb1_in(V__imagewidth,V__imagelength,H,I,C,D)
     [V__imagelength>=V_i_0+1,0>=V__imagewidth,V_i_0+1=H,I=3,G=0,F=2,E=0,B=3] 
* CE 18: eval_quant_bb1_in(V__imagewidth,V__imagelength,V_i_0,B,C,D) = 2+ eval_quant_bb3_in(V__imagewidth,V__imagelength,V_i_0,E,F,G,H,V_i_0,I):2+ eval_quant_bb1_in(G,H,J,K,C,D)
     [V__imagelength>=V_i_0+1,I>=G,I>=1,V__imagewidth>=1,V_i_0+1=J,K=3,F=2,E=0,B=3] 
* CE 19: eval_quant_bb1_in(V__imagewidth,V__imagelength,V_i_0,B,C,D) = 2+ eval_quant_bb3_in(V__imagewidth,V__imagelength,V_i_0,E,F,G,H,I,J):3
     [V__imagelength>=V_i_0+1,V__imagewidth>=1,K=I+1,L=3,F=2,E=0,B=3] 

### Cost equations --> "Loop" of eval_quant_bb1_in/6 
* CEs [14,19] --> Loop 10 
* CEs [18] --> Loop 11 
* CEs [17] --> Loop 12 
* CEs [13] --> Loop 13 
* CEs [16] --> Loop 14 
* CEs [12,15] --> Loop 15 

#### Loops of eval_quant_bb1_in/6 
* Loop 10: eval_quant_bb1_in(V__imagewidth,V__imagelength,V_i_0,B,C,D) [V__imagelength>=V_i_0+1,V__imagewidth>=1,B=3] 
* Loop 11: eval_quant_bb1_in(V__imagewidth,V__imagelength,V_i_0,B,C,D)->  eval_quant_bb1_in(V__imagewidth',V__imagelength',V_i_0',B',C,D)
                  [V__imagelength>=V_i_0+1,V__imagewidth>=1,V_i_0+1=V_i_0',B'=3,B=3] 
* Loop 12: eval_quant_bb1_in(V__imagewidth,V__imagelength,V_i_0,B,C,D)->  eval_quant_bb1_in(V__imagewidth,V__imagelength,V_i_0',B',C,D)
                  [V__imagelength>=V_i_0+1,0>=V__imagewidth,V_i_0+1=V_i_0',B'=3,B=3] 
* Loop 13: eval_quant_bb1_in(V__imagewidth,V__imagelength,V_i_0,B,C,D) [V__imagelength>=V_i_0+1,V__imagewidth>=1,B=3] 
* Loop 14: eval_quant_bb1_in(A,B,C,D,A,B) [C>=B,D=3] 
* Loop 15: eval_quant_bb1_in(A,B,C,D,A,B) [B>=C+1,D=3] 

### Ranking functions of CR eval_quant_bb1_in(V__imagewidth,V__imagelength,V_i_0,B,C,D) 
* RF of phase [12]: [V__imagelength-V_i_0]

#### Partial ranking functions of CR eval_quant_bb1_in(V__imagewidth,V__imagelength,V_i_0,B,C,D) 
* Partial RF of phase [12]:
  - RF of loop [12:1]:
    V__imagelength-V_i_0


### Resulting Chains:eval_quant_bb1_in(V__imagewidth,V__imagelength,V_i_0,B,C,D) 
* [[12],15]
* [[12],14]
* [[11]]...
* [[11],[12],15]
* [[11],[12],14]
* [[11],15]
* [[11],14]
* [[11],13]
* [[11],10]...
* [15]
* [14]
* [13]
* [10]...


### Merging Chains  eval_quant_bb1_in/6 into  External patterns of execution 
* [[14]] --> 1 
* [[15],[14,[12]],[15,[12]]] --> 2 
* [[13],[13,[11]],[14,[11]],[15,[11]],[14,[12],[11]],[15,[12],[11]]] --> 3 
* [[10],[10,[11]]] --> 4 
* [[[11]]] --> 5 


### Specialization of cost equations eval_quant_4/3 
* CE 3 is refined into CE [20,21,22,23,24] 


#### Refined cost equations eval_quant_4/3 
* CE 20: eval_quant_4(V__imagewidth,V__imagelength,B) = 1+ eval_quant_bb1_in(V__imagewidth,V__imagelength,C,D,V__imagewidth,V__imagelength):1
     [0>=V__imagelength,D=3,C=0] 
* CE 21: eval_quant_4(V__imagewidth,V__imagelength,B) = 1+ eval_quant_bb1_in(V__imagewidth,V__imagelength,C,D,V__imagewidth,V__imagelength):2
     [V__imagelength>=1,D=3,C=0] 
* CE 22: eval_quant_4(V__imagewidth,V__imagelength,B) = 1+ eval_quant_bb1_in(V__imagewidth,V__imagelength,C,D,E,F):3
     [V__imagelength>=1,V__imagewidth>=1,D=3,C=0] 
* CE 23: eval_quant_4(V__imagewidth,V__imagelength,B) = 1+ eval_quant_bb1_in(V__imagewidth,V__imagelength,C,D,E,F):4
     [V__imagelength>=1,V__imagewidth>=1,D=3,C=0] 
* CE 24: eval_quant_4(V__imagewidth,V__imagelength,B) = 1+ eval_quant_bb1_in(V__imagewidth,V__imagelength,C,D,E,F):5
     [V__imagelength>=1,V__imagewidth>=1,D=3,C=0] 

### Cost equations --> "Loop" of eval_quant_4/3 
* CEs [23,24] --> Loop 16 
* CEs [21,22] --> Loop 17 
* CEs [20] --> Loop 18 

#### Loops of eval_quant_4/3 
* Loop 16: eval_quant_4(V__imagewidth,V__imagelength,B) [V__imagelength>=1,V__imagewidth>=1] 
* Loop 17: eval_quant_4(V__imagewidth,V__imagelength,B) [V__imagelength>=1] 
* Loop 18: eval_quant_4(V__imagewidth,V__imagelength,B) [0>=V__imagelength] 

### Ranking functions of CR eval_quant_4(V__imagewidth,V__imagelength,B) 

#### Partial ranking functions of CR eval_quant_4(V__imagewidth,V__imagelength,B) 


### Resulting Chains:eval_quant_4(V__imagewidth,V__imagelength,B) 
* [18]
* [17]
* [16]...


### Merging Chains  eval_quant_4/3 into  External patterns of execution 
* [[18]] --> 1 
* [[17]] --> 2 
* [[16]] --> 3 


### Specialization of cost equations eval_quant_start/3 
* CE 2 is refined into CE [25,26,27] 


#### Refined cost equations eval_quant_start/3 
* CE 25: eval_quant_start(V__imagewidth,V__imagelength,B) = 0+ eval_quant_4(V__imagewidth,V__imagelength,B):1
     [0>=V__imagelength] 
* CE 26: eval_quant_start(V__imagewidth,V__imagelength,B) = 0+ eval_quant_4(V__imagewidth,V__imagelength,B):2
     [V__imagelength>=1] 
* CE 27: eval_quant_start(V__imagewidth,V__imagelength,B) = 0+ eval_quant_4(V__imagewidth,V__imagelength,B):3
     [V__imagelength>=1,V__imagewidth>=1] 

### Cost equations --> "Loop" of eval_quant_start/3 
* CEs [27] --> Loop 19 
* CEs [26] --> Loop 20 
* CEs [25] --> Loop 21 

#### Loops of eval_quant_start/3 
* Loop 19: eval_quant_start(V__imagewidth,V__imagelength,B) [V__imagelength>=1,V__imagewidth>=1] 
* Loop 20: eval_quant_start(V__imagewidth,V__imagelength,B) [V__imagelength>=1] 
* Loop 21: eval_quant_start(V__imagewidth,V__imagelength,B) [0>=V__imagelength] 

### Ranking functions of CR eval_quant_start(V__imagewidth,V__imagelength,B) 

#### Partial ranking functions of CR eval_quant_start(V__imagewidth,V__imagelength,B) 


### Resulting Chains:eval_quant_start(V__imagewidth,V__imagelength,B) 
* [21]
* [20]
* [19]...


### Merging Chains  eval_quant_start/3 into  External patterns of execution 
* [[21]] --> 1 
* [[20]] --> 2 
* [[19]] --> 3 


Computing Bounds
=====================================

#### Cost of loops [8] 

 * loop 8:eval_quant_bb3_in(V__imagewidth,V__imagelength,V_i_0,V_j_0,B,C,D,E,F) -> [eval_quant_bb3_in(V__imagewidth',V__imagelength',V_i_0',V_j_0',B',C',D',E',F')] 
1
#### Cost of phase [8]:eval_quant_bb3_in(V__imagewidth,V__imagelength,V_i_0,V_j_0,B,C,D,E,F) -> [eval_quant_bb3_in(V__imagewidth',V__imagelength',V_i_0',V_j_0',B',C',D',E',F')] 
1*it(8)+0
#### Cost of phase [8]:eval_quant_bb3_in(V__imagewidth,V__imagelength,V_i_0,V_j_0,B,C,D,E,F) -> [eval_quant_bb3_in(V__imagewidth',V__imagelength',V_i_0',V_j_0',B',C',D',E',F')] 
1*it(8)+0
#### Cost of chains of eval_quant_bb3_in(V__imagewidth,V__imagelength,V_i_0,V_j_0,B,C,D,E,F):
* Chain [[8]]...: 1*it(8)+0
  with precondition: [V__imagewidth>=V_j_0+1,V_j_0>=0,B=2] 

* Chain [[8],9]: 1*it(8)+0
  with precondition: [B=2,V_i_0=E,V_j_0>=0,V__imagewidth>=V_j_0+1,F>=V_j_0+1,F>=C] 

* Chain [9]: 0
  with precondition: [B=2,D=V__imagelength,E=V_i_0,V__imagewidth=C,V_j_0=F,V_j_0>=0,V_j_0>=V__imagewidth] 


#### Cost of loops [12] 

 * loop 12:eval_quant_bb1_in(V__imagewidth,V__imagelength,V_i_0,B,C,D) -> [eval_quant_bb1_in(V__imagewidth',V__imagelength',V_i_0',B',C',D')] 
2
#### Cost of phase [12]:eval_quant_bb1_in(V__imagewidth,V__imagelength,V_i_0,B,C,D) -> [eval_quant_bb1_in(V__imagewidth',V__imagelength',V_i_0',B',C',D')] 
2*it(12)+0
  Such that:it(12) =< V__imagelength-V_i_0
it(12) =< V__imagelength-V_i_0-V__imagelength'+V_i_0'

#### Cost of phase [12]:eval_quant_bb1_in(V__imagewidth,V__imagelength,V_i_0,B,C,D) -> [eval_quant_bb1_in(V__imagewidth',V__imagelength',V_i_0',B',C',D')] 
2*it(12)+0
  Such that:it(12) =< V__imagelength-V_i_0
it(12) =< V__imagelength-V_i_0-V__imagelength'+V_i_0'

#### Cost of loops [11] 

 * loop 11:eval_quant_bb1_in(V__imagewidth,V__imagelength,V_i_0,B,C,D) -> [eval_quant_bb1_in(V__imagewidth',V__imagelength',V_i_0',B',C',D')] 
1*s(2)+2
#### Cost of phase [11]:eval_quant_bb1_in(V__imagewidth,V__imagelength,V_i_0,B,C,D) -> [eval_quant_bb1_in(V__imagewidth',V__imagelength',V_i_0',B',C',D')] 
3*it(11)+0
#### Cost of phase [11]:eval_quant_bb1_in(V__imagewidth,V__imagelength,V_i_0,B,C,D) -> [eval_quant_bb1_in(V__imagewidth',V__imagelength',V_i_0',B',C',D')] 
3*it(11)+0
#### Cost of phase [11]:eval_quant_bb1_in(V__imagewidth,V__imagelength,V_i_0,B,C,D) -> [eval_quant_bb1_in(V__imagewidth',V__imagelength',V_i_0',B',C',D')] 
3*it(11)+0
#### Cost of phase [11]:eval_quant_bb1_in(V__imagewidth,V__imagelength,V_i_0,B,C,D) -> [eval_quant_bb1_in(V__imagewidth',V__imagelength',V_i_0',B',C',D')] 
3*it(11)+0
#### Cost of phase [11]:eval_quant_bb1_in(V__imagewidth,V__imagelength,V_i_0,B,C,D) -> [eval_quant_bb1_in(V__imagewidth',V__imagelength',V_i_0',B',C',D')] 
3*it(11)+0
#### Cost of phase [11]:eval_quant_bb1_in(V__imagewidth,V__imagelength,V_i_0,B,C,D) -> [eval_quant_bb1_in(V__imagewidth',V__imagelength',V_i_0',B',C',D')] 
3*it(11)+0
#### Cost of phase [11]:eval_quant_bb1_in(V__imagewidth,V__imagelength,V_i_0,B,C,D) -> [eval_quant_bb1_in(V__imagewidth',V__imagelength',V_i_0',B',C',D')] 
3*it(11)+0
#### Cost of chains of eval_quant_bb1_in(V__imagewidth,V__imagelength,V_i_0,B,C,D):
* Chain [[12],15]: 2*it(12)+1
  Such that:it(12) =< -V_i_0+D

  with precondition: [B=3,V__imagewidth=C,V__imagelength=D,0>=V__imagewidth,V_i_0>=0,V__imagelength>=V_i_0+2] 

* Chain [[12],14]: 2*it(12)+0
  Such that:it(12) =< -V_i_0+D

  with precondition: [B=3,V__imagewidth=C,V__imagelength=D,0>=V__imagewidth,V_i_0>=0,V__imagelength>=V_i_0+1] 

* Chain [[11]]...: 3*it(11)+0
  with precondition: [V__imagewidth>=1,V__imagelength>=V_i_0+1,B=3] 

* Chain [[11],[12],15]: 3*it(11)+2*it(12)+1
  Such that:it(12) =< -V_i_0+D

  with precondition: [B=3,0>=C,V__imagewidth>=1,V_i_0>=0,V__imagelength>=V_i_0+1,D>=V_i_0+3] 

* Chain [[11],[12],14]: 3*it(11)+2*it(12)+0
  Such that:it(12) =< -V_i_0+D

  with precondition: [B=3,0>=C,V__imagewidth>=1,V_i_0>=0,V__imagelength>=V_i_0+1,D>=V_i_0+2] 

* Chain [[11],15]: 3*it(11)+1
  with precondition: [B=3,V__imagewidth>=1,V_i_0>=0,V__imagelength>=V_i_0+1,D>=V_i_0+2] 

* Chain [[11],14]: 3*it(11)+0
  with precondition: [B=3,V__imagewidth>=1,V_i_0>=0,V__imagelength>=V_i_0+1] 

* Chain [[11],13]: 4*it(11)+1
  with precondition: [B=3,V__imagewidth>=1,V_i_0>=0,V__imagelength>=V_i_0+1] 

* Chain [[11],10]...: 4*aux(1)+0
  with precondition: [B=3,V__imagewidth>=1,V_i_0>=0,V__imagelength>=V_i_0+1] 

* Chain [15]: 1
  with precondition: [B=3,C=V__imagewidth,V__imagelength=D,V_i_0>=0,V__imagelength>=V_i_0+1] 

* Chain [14]: 0
  with precondition: [B=3,C=V__imagewidth,V__imagelength=D,V_i_0>=0,V_i_0>=V__imagelength] 

* Chain [13]: 1*s(4)+1
  with precondition: [B=3,V__imagewidth>=1,V_i_0>=0,V__imagelength>=V_i_0+1] 

* Chain [10]...: 1*aux(1)+0
  with precondition: [B=3,V__imagewidth>=1,V_i_0>=0,V__imagelength>=V_i_0+1] 


#### Cost of chains of eval_quant_4(V__imagewidth,V__imagelength,B):
* Chain [18]: 1
  with precondition: [0>=V__imagelength] 

* Chain [17]: 4*s(20)+21*s(22)+2
  Such that:s(19) =< V__imagelength
s(20) =< s(19)

  with precondition: [V__imagelength>=1] 

* Chain [16]...: 1*aux(5)+0
  with precondition: [V__imagewidth>=1,V__imagelength>=1] 


#### Cost of chains of eval_quant_start(V__imagewidth,V__imagelength,B):
* Chain [21]: 1
  with precondition: [0>=V__imagelength] 

* Chain [20]: 4*s(27)+21*s(28)+2
  Such that:s(26) =< V__imagelength
s(27) =< s(26)

  with precondition: [V__imagelength>=1] 

* Chain [19]...: 1*s(29)+0
  with precondition: [V__imagewidth>=1,V__imagelength>=1] 


Closed-form bounds of eval_quant_start(V__imagewidth,V__imagelength,B): 
-------------------------------------
* Chain [21] with precondition: [0>=V__imagelength] 
    - Upper bound: 1 
    - Complexity: constant 
* Chain [20] with precondition: [V__imagelength>=1] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [19]... with precondition: [V__imagewidth>=1,V__imagelength>=1] 
    - Upper bound: inf 
    - Complexity: infinity 

### Maximum cost of eval_quant_start(V__imagewidth,V__imagelength,B): inf 
Asymptotic class: infinity 

Time statistics: 
-------------------------------------
* Partial evaluation computed in 22 ms.
* Invariants computed in 45 ms.
   - Backward Invariants 27 ms.
   - Transitive Invariants 7 ms.
* Refinement performed in 53 ms.
* Termination proved in 6 ms.
* Upper bounds computed in 54 ms.
   - Equation cost structures 15 ms.
   - Phase cost structures 11 ms.
   - Chain cost structures 27 ms.
   - Solving cost expressions 0 ms.
* Total analysis performed in 211 ms.


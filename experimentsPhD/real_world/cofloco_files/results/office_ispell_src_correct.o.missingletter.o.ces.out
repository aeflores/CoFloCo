Warning: Ignored call to eval_missingletter_stop/1 in equation eval_missingletter_bb14_in/1 

Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. recursive  : [eval_missingletter_16/4,eval_missingletter_17/4,eval_missingletter_18/4,eval_missingletter_19/4,eval_missingletter_bb2_in/4,eval_missingletter_bb6_in/4]
1. recursive  : [eval_missingletter_bb1_in/4,loop_cont_eval_missingletter_bb2_in/5]
2. non_recursive  : [eval_missingletter_bb14_in/1]
3. recursive  : [eval_missingletter_35/3,eval_missingletter_36/3,eval_missingletter_37/3,eval_missingletter_38/3,eval_missingletter_bb13_in/3,eval_missingletter_bb9_in/3]
4. non_recursive  : [loop_cont_eval_missingletter_bb9_in/2]
5. non_recursive  : [loop_cont_eval_missingletter_bb1_in/4]
6. non_recursive  : [eval_missingletter_1/2]
7. non_recursive  : [eval_missingletter_0/2]
8. non_recursive  : [eval_missingletter_bb0_in/2]
9. non_recursive  : [eval_missingletter_start/2]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into eval_missingletter_bb2_in/4
1. SCC is partially evaluated into eval_missingletter_bb1_in/4
2. SCC is completely evaluated into other SCCs
3. SCC is partially evaluated into eval_missingletter_bb9_in/3
4. SCC is completely evaluated into other SCCs
5. SCC is partially evaluated into loop_cont_eval_missingletter_bb1_in/4
6. SCC is partially evaluated into eval_missingletter_1/2
7. SCC is completely evaluated into other SCCs
8. SCC is completely evaluated into other SCCs
9. SCC is partially evaluated into eval_missingletter_start/2

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations eval_missingletter_bb2_in/4 
* CE 11 is refined into CE [15] 
* CE 10 is refined into CE [16] 
* CE 9 is refined into CE [17] 


#### Refined cost equations eval_missingletter_bb2_in/4 
* CE 15: eval_missingletter_bb2_in(V__Trynum,V_i_0,B,C) = 0
     [V_i_0>=V__Trynum,V_i_0>=0,B=3] 
* CE 16: eval_missingletter_bb2_in(V__Trynum,V_i_0,B,C) = 0
     [V__Trynum>=V_i_0+1,V_i_0>=0,B=2] 
* CE 17: eval_missingletter_bb2_in(V__Trynum,V_i_0,B,C) = 1+ eval_missingletter_bb2_in(D,E,B,C)
     [V__Trynum>=V_i_0+1,B>=2,V_i_0>=0,3>=B,V_i_0+1=E] 

### Cost equations --> "Loop" of eval_missingletter_bb2_in/4 
* CEs [17] --> Loop 14 
* CEs [15] --> Loop 15 
* CEs [16] --> Loop 16 

#### Loops of eval_missingletter_bb2_in/4 
* Loop 14: eval_missingletter_bb2_in(V__Trynum,V_i_0,B,C)->  eval_missingletter_bb2_in(V__Trynum',V_i_0',B,C)
                  [V__Trynum>=V_i_0+1,B>=2,V_i_0>=0,3>=B,V_i_0+1=V_i_0'] 
* Loop 15: eval_missingletter_bb2_in(V__Trynum,V_i_0,B,C) [V_i_0>=V__Trynum,V_i_0>=0,B=3] 
* Loop 16: eval_missingletter_bb2_in(V__Trynum,V_i_0,B,C) [V__Trynum>=V_i_0+1,V_i_0>=0,B=2] 

### Ranking functions of CR eval_missingletter_bb2_in(V__Trynum,V_i_0,B,C) 

#### Partial ranking functions of CR eval_missingletter_bb2_in(V__Trynum,V_i_0,B,C) 


### Resulting Chains:eval_missingletter_bb2_in(V__Trynum,V_i_0,B,C) 
* [[14]]...
* [[14],16]
* [[14],15]
* [16]
* [15]


### Merging Chains  eval_missingletter_bb2_in/4 into  External patterns of execution 
* [[16],[16,[14]]] --> 1 
* [[15]] --> 2 
* [[15,[14]]] --> 3 
* [[[14]]] --> 4 


### Specialization of cost equations eval_missingletter_bb1_in/4 
* CE 6 is refined into CE [18] 
* CE 5 is refined into CE [19,20] 
* CE 4 is refined into CE [21,22,23] 


#### Refined cost equations eval_missingletter_bb1_in/4 
* CE 18: eval_missingletter_bb1_in(A,B,A,C) = 0
     [C=0,B=4] 
* CE 19: eval_missingletter_bb1_in(V__Trynum,B,C,D) = 1+ eval_missingletter_bb2_in(V__Trynum,E,F,G):1
     [V__Trynum>=1,F=2,E=0,B=2] 
* CE 20: eval_missingletter_bb1_in(V__Trynum,B,C,D) = 1+ eval_missingletter_bb2_in(V__Trynum,E,F,G):4
     [V__Trynum>=1,F=2,E=0,B=2] 
* CE 21: eval_missingletter_bb1_in(V__Trynum,B,C,D) = 2+ eval_missingletter_bb2_in(V__Trynum,E,F,G):2+ eval_missingletter_bb1_in(G,B,C,D)
     [0>=V__Trynum,F=3,E=0] 
* CE 22: eval_missingletter_bb1_in(V__Trynum,B,C,D) = 2+ eval_missingletter_bb2_in(V__Trynum,E,F,G):3+ eval_missingletter_bb1_in(G,B,C,D)
     [V__Trynum>=1,F=3,E=0] 
* CE 23: eval_missingletter_bb1_in(V__Trynum,B,C,D) = 2+ eval_missingletter_bb2_in(V__Trynum,E,F,G):4
     [V__Trynum>=1,F=3,E=0] 

### Cost equations --> "Loop" of eval_missingletter_bb1_in/4 
* CEs [20,23] --> Loop 17 
* CEs [22] --> Loop 18 
* CEs [21] --> Loop 19 
* CEs [18] --> Loop 20 
* CEs [19] --> Loop 21 

#### Loops of eval_missingletter_bb1_in/4 
* Loop 17: eval_missingletter_bb1_in(V__Trynum,B,C,D) [V__Trynum>=1] 
* Loop 18: eval_missingletter_bb1_in(V__Trynum,B,C,D)->  eval_missingletter_bb1_in(V__Trynum',B,C,D)
                  [V__Trynum>=1] 
* Loop 19: eval_missingletter_bb1_in(V__Trynum,B,C,D)->  eval_missingletter_bb1_in(V__Trynum',B,C,D)
                  [0>=V__Trynum] 
* Loop 20: eval_missingletter_bb1_in(A,B,A,C) [C=0,B=4] 
* Loop 21: eval_missingletter_bb1_in(V__Trynum,B,C,D) [V__Trynum>=1,B=2] 

### Ranking functions of CR eval_missingletter_bb1_in(V__Trynum,B,C,D) 

#### Partial ranking functions of CR eval_missingletter_bb1_in(V__Trynum,B,C,D) 


### Resulting Chains:eval_missingletter_bb1_in(V__Trynum,B,C,D) 
* [[18,19]]...
* [[18,19],21]
* [[18,19],20]
* [[18,19],17]...
* [21]
* [20]
* [17]...


### Merging Chains  eval_missingletter_bb1_in/4 into  External patterns of execution 
* [[21],[21,[18,19]]] --> 1 
* [[20],[20,[18,19]]] --> 2 
* [[[18,19]],[17,[18,19]]] --> 3 
* [[17]] --> 4 


### Specialization of cost equations eval_missingletter_bb9_in/3 
* CE 13 is refined into CE [24] 
* CE 14 is refined into CE [25] 
* CE 12 is refined into CE [26] 


#### Refined cost equations eval_missingletter_bb9_in/3 
* CE 24: eval_missingletter_bb9_in(V__Trynum,V_i_1,B) = 0
     [V__Trynum>=V_i_1+1,B=2] 
* CE 25: eval_missingletter_bb9_in(V__Trynum,V_i_1,B) = 0
     [V_i_1>=V__Trynum,B=2] 
* CE 26: eval_missingletter_bb9_in(V__Trynum,V_i_1,B) = 1+ eval_missingletter_bb9_in(C,D,E)
     [V__Trynum>=V_i_1+1,V_i_1+1=D,E=2,B=2] 

### Cost equations --> "Loop" of eval_missingletter_bb9_in/3 
* CEs [26] --> Loop 22 
* CEs [24] --> Loop 23 
* CEs [25] --> Loop 24 

#### Loops of eval_missingletter_bb9_in/3 
* Loop 22: eval_missingletter_bb9_in(V__Trynum,V_i_1,B)->  eval_missingletter_bb9_in(V__Trynum',V_i_1',B')
                  [V__Trynum>=V_i_1+1,V_i_1+1=V_i_1',B'=2,B=2] 
* Loop 23: eval_missingletter_bb9_in(V__Trynum,V_i_1,B) [V__Trynum>=V_i_1+1,B=2] 
* Loop 24: eval_missingletter_bb9_in(V__Trynum,V_i_1,B) [V_i_1>=V__Trynum,B=2] 

### Ranking functions of CR eval_missingletter_bb9_in(V__Trynum,V_i_1,B) 

#### Partial ranking functions of CR eval_missingletter_bb9_in(V__Trynum,V_i_1,B) 


### Resulting Chains:eval_missingletter_bb9_in(V__Trynum,V_i_1,B) 
* [[22]]...
* [[22],24]
* [[22],23]
* [24]
* [23]


### Merging Chains  eval_missingletter_bb9_in/3 into  External patterns of execution 
* [[24]] --> 1 
* [[23],[23,[22]],[24,[22]]] --> 2 
* [[[22]]] --> 3 


### Specialization of cost equations loop_cont_eval_missingletter_bb1_in/4 
* CE 7 is refined into CE [27,28,29] 
* CE 8 is refined into CE [30] 


#### Refined cost equations loop_cont_eval_missingletter_bb1_in/4 
* CE 27: loop_cont_eval_missingletter_bb1_in(E,A,B,C) = 1+ eval_missingletter_bb9_in(A,B,F):1
     [B>=A,F=2,E=4] 
* CE 28: loop_cont_eval_missingletter_bb1_in(E,A,B,C) = 1+ eval_missingletter_bb9_in(A,B,F):2
     [A>=B+1,F=2,E=4] 
* CE 29: loop_cont_eval_missingletter_bb1_in(E,A,B,C) = 1+ eval_missingletter_bb9_in(A,B,F):3
     [A>=B+1,F=2,E=4] 
* CE 30: loop_cont_eval_missingletter_bb1_in(E,A,B,C) = 0
     [E=2] 

### Cost equations --> "Loop" of loop_cont_eval_missingletter_bb1_in/4 
* CEs [28] --> Loop 25 
* CEs [27] --> Loop 26 
* CEs [30] --> Loop 27 
* CEs [29] --> Loop 28 

#### Loops of loop_cont_eval_missingletter_bb1_in/4 
* Loop 25: loop_cont_eval_missingletter_bb1_in(E,A,B,C) [A>=B+1,E=4] 
* Loop 26: loop_cont_eval_missingletter_bb1_in(E,A,B,C) [B>=A,E=4] 
* Loop 27: loop_cont_eval_missingletter_bb1_in(E,A,B,C) [E=2] 
* Loop 28: loop_cont_eval_missingletter_bb1_in(E,A,B,C) [A>=B+1,E=4] 

### Ranking functions of CR loop_cont_eval_missingletter_bb1_in(E,A,B,C) 

#### Partial ranking functions of CR loop_cont_eval_missingletter_bb1_in(E,A,B,C) 


### Resulting Chains:loop_cont_eval_missingletter_bb1_in(E,A,B,C) 
* [28]...
* [27]
* [26]
* [25]


### Merging Chains  loop_cont_eval_missingletter_bb1_in/4 into  External patterns of execution 
* [[27]] --> 1 
* [[26]] --> 2 
* [[25]] --> 3 
* [[28]] --> 4 


### Specialization of cost equations eval_missingletter_1/2 
* CE 3 is refined into CE [31,32,33,34,35,36] 


#### Refined cost equations eval_missingletter_1/2 
* CE 31: eval_missingletter_1(V__Trynum,B) = 1+ eval_missingletter_bb1_in(V__Trynum,C,D,E):1+ loop_cont_eval_missingletter_bb1_in(F,D,E,B):1
     [F=2,C=2] 
* CE 32: eval_missingletter_1(V__Trynum,B) = 1+ eval_missingletter_bb1_in(V__Trynum,C,D,E):2+ loop_cont_eval_missingletter_bb1_in(F,D,G,B):2
     [0>=D,G=0,F=4,E=0,C=4] 
* CE 33: eval_missingletter_1(V__Trynum,B) = 1+ eval_missingletter_bb1_in(V__Trynum,C,D,E):2+ loop_cont_eval_missingletter_bb1_in(F,D,G,B):3
     [D>=1,G=0,F=4,E=0,C=4] 
* CE 34: eval_missingletter_1(V__Trynum,B) = 1+ eval_missingletter_bb1_in(V__Trynum,C,D,E):2+ loop_cont_eval_missingletter_bb1_in(F,D,G,B):4
     [D>=1,G=0,F=4,E=0,C=4] 
* CE 35: eval_missingletter_1(V__Trynum,B) = 1+ eval_missingletter_bb1_in(V__Trynum,C,D,E):3
     [] 
* CE 36: eval_missingletter_1(V__Trynum,B) = 1+ eval_missingletter_bb1_in(V__Trynum,C,D,E):4
     [V__Trynum>=1] 

### Cost equations --> "Loop" of eval_missingletter_1/2 
* CEs [34,35,36] --> Loop 29 
* CEs [31,32,33] --> Loop 30 

#### Loops of eval_missingletter_1/2 
* Loop 29: eval_missingletter_1(V__Trynum,B) [] 
* Loop 30: eval_missingletter_1(V__Trynum,B) [] 

### Ranking functions of CR eval_missingletter_1(V__Trynum,B) 

#### Partial ranking functions of CR eval_missingletter_1(V__Trynum,B) 


### Resulting Chains:eval_missingletter_1(V__Trynum,B) 
* [30]
* [29]...


### Merging Chains  eval_missingletter_1/2 into  External patterns of execution 
* [[30]] --> 1 
* [[29]] --> 2 


### Specialization of cost equations eval_missingletter_start/2 
* CE 2 is refined into CE [37,38] 


#### Refined cost equations eval_missingletter_start/2 
* CE 37: eval_missingletter_start(V__Trynum,B) = 0+ eval_missingletter_1(V__Trynum,B):1
     [] 
* CE 38: eval_missingletter_start(V__Trynum,B) = 0+ eval_missingletter_1(V__Trynum,B):2
     [] 

### Cost equations --> "Loop" of eval_missingletter_start/2 
* CEs [38] --> Loop 31 
* CEs [37] --> Loop 32 

#### Loops of eval_missingletter_start/2 
* Loop 31: eval_missingletter_start(V__Trynum,B) [] 
* Loop 32: eval_missingletter_start(V__Trynum,B) [] 

### Ranking functions of CR eval_missingletter_start(V__Trynum,B) 

#### Partial ranking functions of CR eval_missingletter_start(V__Trynum,B) 


### Resulting Chains:eval_missingletter_start(V__Trynum,B) 
* [32]
* [31]...


### Merging Chains  eval_missingletter_start/2 into  External patterns of execution 
* [[32]] --> 1 
* [[31]] --> 2 


Computing Bounds
=====================================

#### Cost of loops [14] 

 * loop 14:eval_missingletter_bb2_in(V__Trynum,V_i_0,B,C) -> [eval_missingletter_bb2_in(V__Trynum',V_i_0',B',C')] 
1
#### Cost of phase [14]:eval_missingletter_bb2_in(V__Trynum,V_i_0,B,C) -> [eval_missingletter_bb2_in(V__Trynum',V_i_0',B',C')] 
1*it(14)+0
#### Cost of phase [14]:eval_missingletter_bb2_in(V__Trynum,V_i_0,B,C) -> [eval_missingletter_bb2_in(V__Trynum',V_i_0',B',C')] 
1*it(14)+0
#### Cost of phase [14]:eval_missingletter_bb2_in(V__Trynum,V_i_0,B,C) -> [eval_missingletter_bb2_in(V__Trynum',V_i_0',B',C')] 
1*it(14)+0
#### Cost of chains of eval_missingletter_bb2_in(V__Trynum,V_i_0,B,C):
* Chain [[14]]...: 1*it(14)+0
  with precondition: [V__Trynum>=V_i_0+1,V_i_0>=0,B>=2,3>=B] 

* Chain [[14],16]: 1*it(14)+0
  with precondition: [B=2,V_i_0>=0,V__Trynum>=V_i_0+1] 

* Chain [[14],15]: 1*it(14)+0
  with precondition: [B=3,V_i_0>=0,V__Trynum>=V_i_0+1] 

* Chain [16]: 0
  with precondition: [B=2,V_i_0>=0,V__Trynum>=V_i_0+1] 

* Chain [15]: 0
  with precondition: [B=3,V_i_0>=0,V_i_0>=V__Trynum] 


#### Cost of loops [18,19] 

 * loop 18:eval_missingletter_bb1_in(V__Trynum,B,C,D) -> [eval_missingletter_bb1_in(V__Trynum',B',C',D')] 
1*s(3)+2
 * loop 19:eval_missingletter_bb1_in(V__Trynum,B,C,D) -> [eval_missingletter_bb1_in(V__Trynum',B',C',D')] 
2
#### Cost of phase [18,19]:eval_missingletter_bb1_in(V__Trynum,B,C,D) -> [eval_missingletter_bb1_in(V__Trynum',B',C',D')] 
5*it(18)+0
#### Cost of phase [18,19]:eval_missingletter_bb1_in(V__Trynum,B,C,D) -> [eval_missingletter_bb1_in(V__Trynum',B',C',D')] 
5*it(18)+0
#### Cost of phase [18,19]:eval_missingletter_bb1_in(V__Trynum,B,C,D) -> [eval_missingletter_bb1_in(V__Trynum',B',C',D')] 
5*it(18)+0
#### Cost of phase [18,19]:eval_missingletter_bb1_in(V__Trynum,B,C,D) -> [eval_missingletter_bb1_in(V__Trynum',B',C',D')] 
5*it(18)+0
#### Cost of chains of eval_missingletter_bb1_in(V__Trynum,B,C,D):
* Chain [[18,19]]...: 5*it(18)+0
  with precondition: [] 

* Chain [[18,19],21]: 6*it(18)+1
  with precondition: [B=2] 

* Chain [[18,19],20]: 5*it(18)+0
  with precondition: [B=4,D=0] 

* Chain [[18,19],17]...: 6*aux(2)+0
  with precondition: [] 

* Chain [21]: 1*s(5)+1
  with precondition: [B=2,V__Trynum>=1] 

* Chain [20]: 0
  with precondition: [B=4,D=0,C=V__Trynum] 

* Chain [17]...: 1*aux(2)+0
  with precondition: [V__Trynum>=1] 


#### Cost of loops [22] 

 * loop 22:eval_missingletter_bb9_in(V__Trynum,V_i_1,B) -> [eval_missingletter_bb9_in(V__Trynum',V_i_1',B')] 
1
#### Cost of phase [22]:eval_missingletter_bb9_in(V__Trynum,V_i_1,B) -> [eval_missingletter_bb9_in(V__Trynum',V_i_1',B')] 
1*it(22)+0
#### Cost of phase [22]:eval_missingletter_bb9_in(V__Trynum,V_i_1,B) -> [eval_missingletter_bb9_in(V__Trynum',V_i_1',B')] 
1*it(22)+0
#### Cost of phase [22]:eval_missingletter_bb9_in(V__Trynum,V_i_1,B) -> [eval_missingletter_bb9_in(V__Trynum',V_i_1',B')] 
1*it(22)+0
#### Cost of chains of eval_missingletter_bb9_in(V__Trynum,V_i_1,B):
* Chain [[22]]...: 1*it(22)+0
  with precondition: [V__Trynum>=V_i_1+1,B=2] 

* Chain [[22],24]: 1*it(22)+0
  with precondition: [B=2,V__Trynum>=V_i_1+1] 

* Chain [[22],23]: 1*it(22)+0
  with precondition: [B=2,V__Trynum>=V_i_1+1] 

* Chain [24]: 0
  with precondition: [B=2,V_i_1>=V__Trynum] 

* Chain [23]: 0
  with precondition: [B=2,V__Trynum>=V_i_1+1] 


#### Cost of chains of loop_cont_eval_missingletter_bb1_in(E,A,B,C):
* Chain [28]...: 1*s(15)+1
  with precondition: [E=4,A>=B+1] 

* Chain [27]: 0
  with precondition: [E=2] 

* Chain [26]: 1
  with precondition: [E=4,B>=A] 

* Chain [25]: 1*s(16)+1
  with precondition: [E=4,A>=B+1] 


#### Cost of chains of eval_missingletter_1(V__Trynum,B):
* Chain [30]: 1*aux(7)+0
  with precondition: [] 

* Chain [29]...: 1*aux(8)+0
  with precondition: [] 


#### Cost of chains of eval_missingletter_start(V__Trynum,B):
* Chain [32]: 1*s(25)+0
  with precondition: [] 

* Chain [31]...: 1*s(26)+0
  with precondition: [] 


Closed-form bounds of eval_missingletter_start(V__Trynum,B): 
-------------------------------------
* Chain [32] with precondition: [] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [31]... with precondition: [] 
    - Upper bound: inf 
    - Complexity: infinity 

### Maximum cost of eval_missingletter_start(V__Trynum,B): inf 
Asymptotic class: infinity 

Time statistics: 
-------------------------------------
* Partial evaluation computed in 67 ms.
* Invariants computed in 79 ms.
   - Backward Invariants 44 ms.
   - Transitive Invariants 12 ms.
* Refinement performed in 138 ms.
* Termination proved in 9 ms.
* Upper bounds computed in 100 ms.
   - Equation cost structures 38 ms.
   - Phase cost structures 21 ms.
   - Chain cost structures 39 ms.
   - Solving cost expressions 1 ms.
* Total analysis performed in 478 ms.


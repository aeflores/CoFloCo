Warning: Ignored call to eval_alloc_forget_save_stop/1 in equation eval_alloc_forget_save_bb14_in/1 

Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. recursive  : [eval_alloc_forget_save_bb6_in/1]
1. recursive  : [eval_alloc_forget_save_14/1,eval_alloc_forget_save_15/1,eval_alloc_forget_save_16/1,eval_alloc_forget_save_8/1,eval_alloc_forget_save_9/1,eval_alloc_forget_save_bb1_in/1,eval_alloc_forget_save_bb3_in/1,eval_alloc_forget_save_bb9_in/1,loop_cont_eval_alloc_forget_save_bb6_in/2]
2. non_recursive  : [eval_alloc_forget_save_bb14_in/1]
3. non_recursive  : [eval_alloc_forget_save_bb13_in/1]
4. non_recursive  : [eval_alloc_forget_save_25/1]
5. non_recursive  : [eval_alloc_forget_save_24/1]
6. non_recursive  : [eval_alloc_forget_save_23/1]
7. non_recursive  : [eval_alloc_forget_save_22/1]
8. non_recursive  : [eval_alloc_forget_save_21/1]
9. non_recursive  : [eval_alloc_forget_save_20/1]
10. non_recursive  : [eval_alloc_forget_save_19/1]
11. non_recursive  : [eval_alloc_forget_save_18/1]
12. non_recursive  : [eval_alloc_forget_save_17/1]
13. non_recursive  : [loop_cont_eval_alloc_forget_save_bb1_in/2]
14. non_recursive  : [eval_alloc_forget_save_bb0_in/1]
15. non_recursive  : [eval_alloc_forget_save_start/1]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into eval_alloc_forget_save_bb6_in/1
1. SCC is partially evaluated into eval_alloc_forget_save_bb1_in/1
2. SCC is completely evaluated into other SCCs
3. SCC is completely evaluated into other SCCs
4. SCC is completely evaluated into other SCCs
5. SCC is completely evaluated into other SCCs
6. SCC is completely evaluated into other SCCs
7. SCC is completely evaluated into other SCCs
8. SCC is partially evaluated into eval_alloc_forget_save_21/1
9. SCC is completely evaluated into other SCCs
10. SCC is completely evaluated into other SCCs
11. SCC is completely evaluated into other SCCs
12. SCC is completely evaluated into other SCCs
13. SCC is partially evaluated into loop_cont_eval_alloc_forget_save_bb1_in/2
14. SCC is partially evaluated into eval_alloc_forget_save_bb0_in/1
15. SCC is partially evaluated into eval_alloc_forget_save_start/1

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations eval_alloc_forget_save_bb6_in/1 
* CE 12 is refined into CE [14] 
* CE 11 is refined into CE [15] 


#### Refined cost equations eval_alloc_forget_save_bb6_in/1 
* CE 14: eval_alloc_forget_save_bb6_in(B) = 0
     [B=2] 
* CE 15: eval_alloc_forget_save_bb6_in(B) = 1+ eval_alloc_forget_save_bb6_in(C)
     [C=2,B=2] 

### Cost equations --> "Loop" of eval_alloc_forget_save_bb6_in/1 
* CEs [15] --> Loop 11 
* CEs [14] --> Loop 12 

#### Loops of eval_alloc_forget_save_bb6_in/1 
* Loop 11: eval_alloc_forget_save_bb6_in(B)->  eval_alloc_forget_save_bb6_in(B')
                  [B'=2,B=2] 
* Loop 12: eval_alloc_forget_save_bb6_in(B) [B=2] 

### Ranking functions of CR eval_alloc_forget_save_bb6_in(B) 

#### Partial ranking functions of CR eval_alloc_forget_save_bb6_in(B) 


### Resulting Chains:eval_alloc_forget_save_bb6_in(B) 
* [[11]]...
* [[11],12]
* [12]


### Merging Chains  eval_alloc_forget_save_bb6_in/1 into  External patterns of execution 
* [[12],[12,[11]]] --> 1 
* [[[11]]] --> 2 


### Specialization of cost equations eval_alloc_forget_save_bb1_in/1 
* CE 8 is refined into CE [16] 
* CE 4 is refined into CE [17] 
* CE 5 is refined into CE [18,19] 
* CE 6 is refined into CE [20] 
* CE 7 is refined into CE [21,22] 


#### Refined cost equations eval_alloc_forget_save_bb1_in/1 
* CE 16: eval_alloc_forget_save_bb1_in(B) = 0
     [B=4] 
* CE 17: eval_alloc_forget_save_bb1_in(B) = 0
     [B=3] 
* CE 18: eval_alloc_forget_save_bb1_in(B) = 1+ eval_alloc_forget_save_bb6_in(C):1
     [C=2,B=3] 
* CE 19: eval_alloc_forget_save_bb1_in(B) = 1+ eval_alloc_forget_save_bb6_in(C):2
     [C=2,B=3] 
* CE 20: eval_alloc_forget_save_bb1_in(B) = 1+ eval_alloc_forget_save_bb1_in(B)
     [] 
* CE 21: eval_alloc_forget_save_bb1_in(B) = 2+ eval_alloc_forget_save_bb6_in(C):1+ eval_alloc_forget_save_bb1_in(B)
     [C=2] 
* CE 22: eval_alloc_forget_save_bb1_in(B) = 2+ eval_alloc_forget_save_bb6_in(C):2
     [C=2] 

### Cost equations --> "Loop" of eval_alloc_forget_save_bb1_in/1 
* CEs [19,22] --> Loop 13 
* CEs [20,21] --> Loop 14 
* CEs [16] --> Loop 15 
* CEs [17,18] --> Loop 16 

#### Loops of eval_alloc_forget_save_bb1_in/1 
* Loop 13: eval_alloc_forget_save_bb1_in(B) [] 
* Loop 14: eval_alloc_forget_save_bb1_in(B)->  eval_alloc_forget_save_bb1_in(B)
                  [] 
* Loop 15: eval_alloc_forget_save_bb1_in(B) [B=4] 
* Loop 16: eval_alloc_forget_save_bb1_in(B) [B=3] 

### Ranking functions of CR eval_alloc_forget_save_bb1_in(B) 

#### Partial ranking functions of CR eval_alloc_forget_save_bb1_in(B) 


### Resulting Chains:eval_alloc_forget_save_bb1_in(B) 
* [[14]]...
* [[14],16]
* [[14],15]
* [[14],13]...
* [16]
* [15]
* [13]...


### Merging Chains  eval_alloc_forget_save_bb1_in/1 into  External patterns of execution 
* [[16],[16,[14]]] --> 1 
* [[15],[15,[14]]] --> 2 
* [[13],[[14]],[13,[14]]] --> 3 


### Specialization of cost equations eval_alloc_forget_save_21/1 
* CE 13 is refined into CE [23] 


#### Refined cost equations eval_alloc_forget_save_21/1 
* CE 23: eval_alloc_forget_save_21(B) = 0
     [] 

### Cost equations --> "Loop" of eval_alloc_forget_save_21/1 
* CEs [23] --> Loop 17 

#### Loops of eval_alloc_forget_save_21/1 
* Loop 17: eval_alloc_forget_save_21(B) [] 

### Ranking functions of CR eval_alloc_forget_save_21(B) 

#### Partial ranking functions of CR eval_alloc_forget_save_21(B) 


### Resulting Chains:eval_alloc_forget_save_21(B) 
* [17]


### Merging Chains  eval_alloc_forget_save_21/1 into  External patterns of execution 
* [[17]] --> 1 


### Specialization of cost equations loop_cont_eval_alloc_forget_save_bb1_in/2 
* CE 10 is refined into CE [24] 
* CE 9 is refined into CE [25] 


#### Refined cost equations loop_cont_eval_alloc_forget_save_bb1_in/2 
* CE 24: loop_cont_eval_alloc_forget_save_bb1_in(B,A) = 0+ eval_alloc_forget_save_21(A):1
     [B=4] 
* CE 25: loop_cont_eval_alloc_forget_save_bb1_in(B,A) = 0
     [B=3] 

### Cost equations --> "Loop" of loop_cont_eval_alloc_forget_save_bb1_in/2 
* CEs [24] --> Loop 18 
* CEs [25] --> Loop 19 

#### Loops of loop_cont_eval_alloc_forget_save_bb1_in/2 
* Loop 18: loop_cont_eval_alloc_forget_save_bb1_in(B,A) [B=4] 
* Loop 19: loop_cont_eval_alloc_forget_save_bb1_in(B,A) [B=3] 

### Ranking functions of CR loop_cont_eval_alloc_forget_save_bb1_in(B,A) 

#### Partial ranking functions of CR loop_cont_eval_alloc_forget_save_bb1_in(B,A) 


### Resulting Chains:loop_cont_eval_alloc_forget_save_bb1_in(B,A) 
* [19]
* [18]


### Merging Chains  loop_cont_eval_alloc_forget_save_bb1_in/2 into  External patterns of execution 
* [[19]] --> 1 
* [[18]] --> 2 


### Specialization of cost equations eval_alloc_forget_save_bb0_in/1 
* CE 3 is refined into CE [26,27,28] 


#### Refined cost equations eval_alloc_forget_save_bb0_in/1 
* CE 26: eval_alloc_forget_save_bb0_in(B) = 1+ eval_alloc_forget_save_bb1_in(C):1+ loop_cont_eval_alloc_forget_save_bb1_in(D,B):1
     [D=3,C=3] 
* CE 27: eval_alloc_forget_save_bb0_in(B) = 1+ eval_alloc_forget_save_bb1_in(C):2+ loop_cont_eval_alloc_forget_save_bb1_in(D,B):2
     [D=4,C=4] 
* CE 28: eval_alloc_forget_save_bb0_in(B) = 1+ eval_alloc_forget_save_bb1_in(C):3
     [] 

### Cost equations --> "Loop" of eval_alloc_forget_save_bb0_in/1 
* CEs [28] --> Loop 20 
* CEs [26,27] --> Loop 21 

#### Loops of eval_alloc_forget_save_bb0_in/1 
* Loop 20: eval_alloc_forget_save_bb0_in(B) [] 
* Loop 21: eval_alloc_forget_save_bb0_in(B) [] 

### Ranking functions of CR eval_alloc_forget_save_bb0_in(B) 

#### Partial ranking functions of CR eval_alloc_forget_save_bb0_in(B) 


### Resulting Chains:eval_alloc_forget_save_bb0_in(B) 
* [21]
* [20]...


### Merging Chains  eval_alloc_forget_save_bb0_in/1 into  External patterns of execution 
* [[21]] --> 1 
* [[20]] --> 2 


### Specialization of cost equations eval_alloc_forget_save_start/1 
* CE 2 is refined into CE [29,30] 


#### Refined cost equations eval_alloc_forget_save_start/1 
* CE 29: eval_alloc_forget_save_start(B) = 0+ eval_alloc_forget_save_bb0_in(B):1
     [] 
* CE 30: eval_alloc_forget_save_start(B) = 0+ eval_alloc_forget_save_bb0_in(B):2
     [] 

### Cost equations --> "Loop" of eval_alloc_forget_save_start/1 
* CEs [30] --> Loop 22 
* CEs [29] --> Loop 23 

#### Loops of eval_alloc_forget_save_start/1 
* Loop 22: eval_alloc_forget_save_start(B) [] 
* Loop 23: eval_alloc_forget_save_start(B) [] 

### Ranking functions of CR eval_alloc_forget_save_start(B) 

#### Partial ranking functions of CR eval_alloc_forget_save_start(B) 


### Resulting Chains:eval_alloc_forget_save_start(B) 
* [23]
* [22]...


### Merging Chains  eval_alloc_forget_save_start/1 into  External patterns of execution 
* [[23]] --> 1 
* [[22]] --> 2 


Computing Bounds
=====================================

#### Cost of loops [11] 

 * loop 11:eval_alloc_forget_save_bb6_in(B) -> [eval_alloc_forget_save_bb6_in(B')] 
1
#### Cost of phase [11]:eval_alloc_forget_save_bb6_in(B) -> [eval_alloc_forget_save_bb6_in(B')] 
1*it(11)+0
#### Cost of phase [11]:eval_alloc_forget_save_bb6_in(B) -> [eval_alloc_forget_save_bb6_in(B')] 
1*it(11)+0
#### Cost of chains of eval_alloc_forget_save_bb6_in(B):
* Chain [[11]]...: 1*it(11)+0
  with precondition: [B=2] 

* Chain [[11],12]: 1*it(11)+0
  with precondition: [B=2] 

* Chain [12]: 0
  with precondition: [B=2] 


#### Cost of loops [14] 

 * loop 14:eval_alloc_forget_save_bb1_in(B) -> [eval_alloc_forget_save_bb1_in(B')] 
1*s(3)+0
#### Cost of phase [14]:eval_alloc_forget_save_bb1_in(B) -> [eval_alloc_forget_save_bb1_in(B')] 
1*s(4)+0
#### Cost of phase [14]:eval_alloc_forget_save_bb1_in(B) -> [eval_alloc_forget_save_bb1_in(B')] 
1*s(4)+0
#### Cost of phase [14]:eval_alloc_forget_save_bb1_in(B) -> [eval_alloc_forget_save_bb1_in(B')] 
1*s(4)+0
#### Cost of phase [14]:eval_alloc_forget_save_bb1_in(B) -> [eval_alloc_forget_save_bb1_in(B')] 
1*s(4)+0
#### Cost of chains of eval_alloc_forget_save_bb1_in(B):
* Chain [[14]]...: 1*s(4)+0
  with precondition: [] 

* Chain [[14],16]: 2*aux(3)+0
  with precondition: [B=3] 

* Chain [[14],15]: 1*s(4)+0
  with precondition: [B=4] 

* Chain [[14],13]...: 2*aux(4)+0
  with precondition: [] 

* Chain [16]: 1*aux(3)+0
  with precondition: [B=3] 

* Chain [15]: 0
  with precondition: [B=4] 

* Chain [13]...: 1*aux(4)+0
  with precondition: [] 


#### Cost of chains of eval_alloc_forget_save_21(B):
* Chain [17]: 0
  with precondition: [] 


#### Cost of chains of loop_cont_eval_alloc_forget_save_bb1_in(B,A):
* Chain [19]: 0
  with precondition: [B=3] 

* Chain [18]: 0
  with precondition: [B=4] 


#### Cost of chains of eval_alloc_forget_save_bb0_in(B):
* Chain [21]: 1*aux(8)+0
  with precondition: [] 

* Chain [20]...: 1*s(16)+1
  with precondition: [] 


#### Cost of chains of eval_alloc_forget_save_start(B):
* Chain [23]: 1*s(17)+0
  with precondition: [] 

* Chain [22]...: 1*s(18)+1
  with precondition: [] 


Closed-form bounds of eval_alloc_forget_save_start(B): 
-------------------------------------
* Chain [23] with precondition: [] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [22]... with precondition: [] 
    - Upper bound: inf 
    - Complexity: infinity 

### Maximum cost of eval_alloc_forget_save_start(B): inf 
Asymptotic class: infinity 

Time statistics: 
-------------------------------------
* Partial evaluation computed in 8 ms.
* Invariants computed in 3 ms.
   - Backward Invariants 2 ms.
   - Transitive Invariants 0 ms.
* Refinement performed in 13 ms.
* Termination proved in 1 ms.
* Upper bounds computed in 10 ms.
   - Equation cost structures 6 ms.
   - Phase cost structures 2 ms.
   - Chain cost structures 2 ms.
   - Solving cost expressions 0 ms.
* Total analysis performed in 48 ms.


WARNING: Excluded non-linear constraints:[A-D*C>=0,A-D*C+1=<D]
WARNING: Excluded non-linear constraints:[A-D*C>=0,A-D*C+1=< -D]
WARNING: Excluded non-linear constraints:[-A+D*C>=0,-A+D*C+1=<D]
WARNING: Excluded non-linear constraints:[-A+D*C>=0,-A+D*C+1=< -D]
WARNING: Excluded non-linear constraints:[A-C*D>=0,A-C*D+1=<C]
WARNING: Excluded non-linear constraints:[A-C*D>=0,A-C*D+1=< -C]
WARNING: Excluded non-linear constraints:[-A+C*D>=0,-A+C*D+1=<C]
WARNING: Excluded non-linear constraints:[-A+C*D>=0,-A+C*D+1=< -C]
Warning: Ignored call to eval_LogLuvDecode32_stop/1 in equation eval_LogLuvDecode32_60/1 
Warning: Ignored call to eval_LogLuvDecode32_stop/1 in equation eval_LogLuvDecode32_62/1 
Warning: Ignored call to eval_LogLuvDecode32_stop/1 in equation eval_LogLuvDecode32_64/1 
Warning: Ignored call to eval_LogLuvDecode32_stop/1 in equation eval_LogLuvDecode32_bb18_in/1 

Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. non_recursive  : [eval_LogLuvDecode32_60/1]
1. non_recursive  : [eval_LogLuvDecode32_59/1]
2. non_recursive  : [eval_LogLuvDecode32_62/1]
3. non_recursive  : [eval_LogLuvDecode32_61/1]
4. non_recursive  : [eval_LogLuvDecode32_64/1]
5. non_recursive  : [eval_LogLuvDecode32_63/1]
6. recursive  : [eval_LogLuvDecode32_bb11_in/16]
7. recursive  : [eval_LogLuvDecode32_bb13_in/16]
8. recursive  : [eval_LogLuvDecode32_bb8_in/10,loop_cont_eval_LogLuvDecode32_bb11_in/11,loop_cont_eval_LogLuvDecode32_bb13_in/11]
9. recursive  : [eval_LogLuvDecode32_bb7_in/6,loop_cont_eval_LogLuvDecode32_bb8_in/7]
10. non_recursive  : [eval_LogLuvDecode32_bb18_in/1]
11. non_recursive  : [eval_LogLuvDecode32_52/1]
12. non_recursive  : [eval_LogLuvDecode32_51/3]
13. non_recursive  : [eval_LogLuvDecode32_56/1]
14. non_recursive  : [eval_LogLuvDecode32_55/1]
15. non_recursive  : [loop_cont_eval_LogLuvDecode32_bb7_in/4]
16. non_recursive  : [eval_LogLuvDecode32_13/2]
17. non_recursive  : [eval_LogLuvDecode32_12/3]
18. non_recursive  : [eval_LogLuvDecode32_bb6_in/2]
19. non_recursive  : [eval_LogLuvDecode32_bb0_in/2]
20. non_recursive  : [eval_LogLuvDecode32_start/3]

#### Obtained direct recursion through partial evaluation 
0. SCC is completely evaluated into other SCCs
1. SCC is completely evaluated into other SCCs
2. SCC is completely evaluated into other SCCs
3. SCC is completely evaluated into other SCCs
4. SCC is completely evaluated into other SCCs
5. SCC is completely evaluated into other SCCs
6. SCC is partially evaluated into eval_LogLuvDecode32_bb11_in/16
7. SCC is partially evaluated into eval_LogLuvDecode32_bb13_in/16
8. SCC is partially evaluated into eval_LogLuvDecode32_bb8_in/10
9. SCC is partially evaluated into eval_LogLuvDecode32_bb7_in/6
10. SCC is completely evaluated into other SCCs
11. SCC is completely evaluated into other SCCs
12. SCC is completely evaluated into other SCCs
13. SCC is completely evaluated into other SCCs
14. SCC is completely evaluated into other SCCs
15. SCC is partially evaluated into loop_cont_eval_LogLuvDecode32_bb7_in/4
16. SCC is partially evaluated into eval_LogLuvDecode32_13/2
17. SCC is completely evaluated into other SCCs
18. SCC is completely evaluated into other SCCs
19. SCC is partially evaluated into eval_LogLuvDecode32_bb0_in/2
20. SCC is partially evaluated into eval_LogLuvDecode32_start/3

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations eval_LogLuvDecode32_bb11_in/16 
* CE 34 is refined into CE [35] 
* CE 33 is refined into CE [36] 
* CE 32 is refined into CE [37] 


#### Refined cost equations eval_LogLuvDecode32_bb11_in/16 
* CE 35: eval_LogLuvDecode32_bb11_in(A,B,C,D,E,F,G,H,I,J,A,B,C,D,G,H) = 0
     [H>=F,A>=F+1,G+1>=0,G+2=E,J=2,I=0] 
* CE 36: eval_LogLuvDecode32_bb11_in(V_8,V_cc_0,V_shft_0,V_28,V_cc_1,V_i_0,V_43,V_i_1,V_rc_0,B,C,D,E,F,G,H) = 1+ eval_LogLuvDecode32_bb11_in(V_8,V_cc_0,V_shft_0,V_28,I,V_i_0,V_43,J,K,L,C,D,E,F,G,H)
     [V_i_1>=V_i_0,V_8>=V_i_0+1,V_rc_0>=1,V_43+1>=0,V_rc_0=K+1,V_i_1+1=J,V_43+2=I,V_43+2=V_cc_1,L=2,B=2] 
* CE 37: eval_LogLuvDecode32_bb11_in(V_8,V_cc_0,V_shft_0,V_28,V_cc_1,V_i_0,V_43,V_i_1,V_rc_0,B,C,D,E,F,G,H) = 1+ eval_LogLuvDecode32_bb11_in(V_8,V_cc_0,V_shft_0,V_28,I,V_i_0,V_43,J,K,L,C,D,E,F,G,H)
     [V_i_1>=V_i_0,V_8>=V_i_0+1,V_43+1>=0,0>=V_rc_0+1,V_rc_0=K+1,V_i_1+1=J,V_43+2=I,V_43+2=V_cc_1,L=2,B=2] 

### Cost equations --> "Loop" of eval_LogLuvDecode32_bb11_in/16 
* CEs [36] --> Loop 26 
* CEs [37] --> Loop 27 
* CEs [35] --> Loop 28 

#### Loops of eval_LogLuvDecode32_bb11_in/16 
* Loop 26: eval_LogLuvDecode32_bb11_in(V_8,V_cc_0,V_shft_0,V_28,V_cc_1,V_i_0,V_43,V_i_1,V_rc_0,B,C,D,E,F,G,H)->  eval_LogLuvDecode32_bb11_in(V_8,V_cc_0,V_shft_0,V_28,V_cc_1,V_i_0,V_43',V_i_1',V_rc_0',B',C,D,E,F,G,H)
                  [V_i_1>=V_i_0,V_8>=V_i_0+1,V_rc_0>=1,V_cc_1>=1,V_rc_0=V_rc_0'+1,V_i_1+1=V_i_1',V_cc_1=V_43'+2,V_cc_1=V_43+2,B'=2,B=2] 
* Loop 27: eval_LogLuvDecode32_bb11_in(V_8,V_cc_0,V_shft_0,V_28,V_cc_1,V_i_0,V_43,V_i_1,V_rc_0,B,C,D,E,F,G,H)->  eval_LogLuvDecode32_bb11_in(V_8,V_cc_0,V_shft_0,V_28,V_cc_1,V_i_0,V_43',V_i_1',V_rc_0',B',C,D,E,F,G,H)
                  [V_i_1>=V_i_0,V_8>=V_i_0+1,V_cc_1>=1,0>=V_rc_0+1,V_rc_0=V_rc_0'+1,V_i_1+1=V_i_1',V_cc_1=V_43'+2,V_cc_1=V_43+2,B'=2,B=2] 
* Loop 28: eval_LogLuvDecode32_bb11_in(A,B,C,D,E,F,G,H,I,J,A,B,C,D,G,H) [H>=F,A>=F+1,G+1>=0,G+2=E,J=2,I=0] 

### Ranking functions of CR eval_LogLuvDecode32_bb11_in(V_8,V_cc_0,V_shft_0,V_28,V_cc_1,V_i_0,V_43,V_i_1,V_rc_0,B,C,D,E,F,G,H) 
* RF of phase [26]: [V_rc_0]

#### Partial ranking functions of CR eval_LogLuvDecode32_bb11_in(V_8,V_cc_0,V_shft_0,V_28,V_cc_1,V_i_0,V_43,V_i_1,V_rc_0,B,C,D,E,F,G,H) 
* Partial RF of phase [26]:
  - RF of loop [26:1]:
    V_rc_0


### Resulting Chains:eval_LogLuvDecode32_bb11_in(V_8,V_cc_0,V_shft_0,V_28,V_cc_1,V_i_0,V_43,V_i_1,V_rc_0,B,C,D,E,F,G,H) 
* [[27]]...
* [[26],28]
* [28]


### Merging Chains  eval_LogLuvDecode32_bb11_in/16 into  External patterns of execution 
* [[28]] --> 1 
* [[28,[26]]] --> 2 
* [[[27]]] --> 3 


### Specialization of cost equations eval_LogLuvDecode32_bb13_in/16 
* CE 25 is refined into CE [38] 
* CE 24 is refined into CE [39] 
* CE 23 is discarded (unfeasible) 
* CE 22 is discarded (unfeasible) 
* CE 31 is refined into CE [40] 
* CE 30 is refined into CE [41] 
* CE 29 is discarded (unfeasible) 
* CE 28 is discarded (unfeasible) 
* CE 27 is refined into CE [42] 
* CE 26 is refined into CE [43] 


#### Refined cost equations eval_LogLuvDecode32_bb13_in/16 
* CE 38: eval_LogLuvDecode32_bb13_in(V_8,V_cc_0,V_shft_0,V_28,V_cc_1,V_i_0,V_cc_2,V_i_2,V_rc_1,B,C,D,E,F,G,H) = 1+ eval_LogLuvDecode32_bb13_in(V_8,V_cc_0,V_shft_0,V_28,I,V_i_0,J,K,L,M,C,D,E,F,G,H)
     [V_i_2>=V_i_0,V_8>=V_i_0+1,V_rc_1>=1,V_cc_2>=2,V_cc_2+V_i_2=V_i_0+I,V_cc_2+V_i_2=V_cc_1+V_i_0,V_rc_1=L+1,V_i_2+1=K,V_cc_2=J+1,M=2,B=2] 
* CE 39: eval_LogLuvDecode32_bb13_in(V_8,V_cc_0,V_shft_0,V_28,V_cc_1,V_i_0,V_cc_2,V_i_2,V_rc_1,B,C,D,E,F,G,H) = 1+ eval_LogLuvDecode32_bb13_in(V_8,V_cc_0,V_shft_0,V_28,I,V_i_0,J,K,L,M,C,D,E,F,G,H)
     [V_i_2>=V_i_0,V_8>=V_i_0+1,V_cc_2>=2,0>=V_rc_1+1,V_cc_2+V_i_2=V_i_0+I,V_cc_2+V_i_2=V_cc_1+V_i_0,V_rc_1=L+1,V_i_2+1=K,V_cc_2=J+1,M=2,B=2] 
* CE 40: eval_LogLuvDecode32_bb13_in(V_8,V_cc_0,V_shft_0,V_28,V_cc_1,V_i_0,V_cc_2,V_i_2,V_rc_1,B,C,D,E,F,G,H) = 1+ eval_LogLuvDecode32_bb13_in(V_8,V_cc_0,V_shft_0,V_28,I,V_i_0,J,K,V_rc_1,L,C,D,E,F,G,H)
     [V_i_2>=V_i_0,V_8>=V_i_0+1,V_rc_1>=1,V_cc_2>=2,V_cc_2+V_i_2=V_i_0+I,V_cc_2+V_i_2=V_cc_1+V_i_0,V_i_2+1=K,V_cc_2=J+1,L=2,B=2] 
* CE 41: eval_LogLuvDecode32_bb13_in(V_8,V_cc_0,V_shft_0,V_28,V_cc_1,V_i_0,V_cc_2,V_i_2,V_rc_1,B,C,D,E,F,G,H) = 1+ eval_LogLuvDecode32_bb13_in(V_8,V_cc_0,V_shft_0,V_28,I,V_i_0,J,K,V_rc_1,L,C,D,E,F,G,H)
     [V_i_2>=V_i_0,V_8>=V_i_0+1,V_cc_2>=2,0>=V_rc_1+1,V_cc_2+V_i_2=V_i_0+I,V_cc_2+V_i_2=V_cc_1+V_i_0,V_i_2+1=K,V_cc_2=J+1,L=2,B=2] 
* CE 42: eval_LogLuvDecode32_bb13_in(A,B,C,D,E,F,G,H,I,J,A,B,C,D,K,H) = 0
     [H>=F,A>=F+1,G>=1,G+H=E+F,G=K+1,J=2,I=0] 
* CE 43: eval_LogLuvDecode32_bb13_in(A,B,C,D,E,F,G,H,I,J,A,B,C,D,K,H) = 0
     [H>=F,A>=F+1,H+1=E+F,K=0,J=2,G=1] 

### Cost equations --> "Loop" of eval_LogLuvDecode32_bb13_in/16 
* CEs [42] --> Loop 29 
* CEs [43] --> Loop 30 
* CEs [38] --> Loop 31 
* CEs [39] --> Loop 32 
* CEs [40] --> Loop 33 
* CEs [41] --> Loop 34 

#### Loops of eval_LogLuvDecode32_bb13_in/16 
* Loop 29: eval_LogLuvDecode32_bb13_in(A,B,C,D,E,F,G,H,I,J,A,B,C,D,K,L) [E>=G,A>=F+1,G>=1,E+F=G+L,E+F=G+H,G=K+1,J=2,I=0] 
* Loop 30: eval_LogLuvDecode32_bb13_in(A,B,C,D,E,F,G,H,I,J,A,B,C,D,K,L) [A>=F+1,E>=1,E+F=L+1,E+F=H+1,K=0,J=2,G=1] 
* Loop 31: eval_LogLuvDecode32_bb13_in(V_8,V_cc_0,V_shft_0,V_28,V_cc_1,V_i_0,V_cc_2,V_i_2,V_rc_1,B,C,D,E,F,G,H)->  eval_LogLuvDecode32_bb13_in(V_8,V_cc_0,V_shft_0,V_28,V_cc_1,V_i_0,V_cc_2',V_i_2',V_rc_1',B',C,D,E,F,G,H)
                  [V_cc_1>=V_cc_2,V_8>=V_i_0+1,V_rc_1>=1,V_cc_2>=2,V_cc_1+V_i_0+1=V_cc_2+V_i_2',V_cc_1+V_i_0=V_cc_2+V_i_2,V_rc_1=V_rc_1'+1,V_cc_2=V_cc_2'+1,B'=2,B=2] 
* Loop 32: eval_LogLuvDecode32_bb13_in(V_8,V_cc_0,V_shft_0,V_28,V_cc_1,V_i_0,V_cc_2,V_i_2,V_rc_1,B,C,D,E,F,G,H)->  eval_LogLuvDecode32_bb13_in(V_8,V_cc_0,V_shft_0,V_28,V_cc_1,V_i_0,V_cc_2',V_i_2',V_rc_1',B',C,D,E,F,G,H)
                  [V_cc_1>=V_cc_2,V_8>=V_i_0+1,V_cc_2>=2,0>=V_rc_1+1,V_cc_1+V_i_0+1=V_cc_2+V_i_2',V_cc_1+V_i_0=V_cc_2+V_i_2,V_rc_1=V_rc_1'+1,V_cc_2=V_cc_2'+1,B'=2,B=2] 
* Loop 33: eval_LogLuvDecode32_bb13_in(V_8,V_cc_0,V_shft_0,V_28,V_cc_1,V_i_0,V_cc_2,V_i_2,V_rc_1,B,C,D,E,F,G,H)->  eval_LogLuvDecode32_bb13_in(V_8,V_cc_0,V_shft_0,V_28,V_cc_1,V_i_0,V_cc_2',V_i_2',V_rc_1,B',C,D,E,F,G,H)
                  [V_cc_1>=V_cc_2,V_8>=V_i_0+1,V_rc_1>=1,V_cc_2>=2,V_cc_1+V_i_0+1=V_cc_2+V_i_2',V_cc_1+V_i_0=V_cc_2+V_i_2,V_cc_2=V_cc_2'+1,B'=2,B=2] 
* Loop 34: eval_LogLuvDecode32_bb13_in(V_8,V_cc_0,V_shft_0,V_28,V_cc_1,V_i_0,V_cc_2,V_i_2,V_rc_1,B,C,D,E,F,G,H)->  eval_LogLuvDecode32_bb13_in(V_8,V_cc_0,V_shft_0,V_28,V_cc_1,V_i_0,V_cc_2',V_i_2',V_rc_1,B',C,D,E,F,G,H)
                  [V_cc_1>=V_cc_2,V_8>=V_i_0+1,V_cc_2>=2,0>=V_rc_1+1,V_cc_1+V_i_0+1=V_cc_2+V_i_2',V_cc_1+V_i_0=V_cc_2+V_i_2,V_cc_2=V_cc_2'+1,B'=2,B=2] 

### Ranking functions of CR eval_LogLuvDecode32_bb13_in(V_8,V_cc_0,V_shft_0,V_28,V_cc_1,V_i_0,V_cc_2,V_i_2,V_rc_1,B,C,D,E,F,G,H) 
* RF of phase [31,33]: [V_8+V_cc_1-V_i_2-2,V_cc_1+V_i_0-V_i_2-1,V_cc_2-1]
* RF of phase [32,34]: [V_8+V_cc_1-V_i_2-2,V_cc_1+V_i_0-V_i_2-1,V_cc_2-1]

#### Partial ranking functions of CR eval_LogLuvDecode32_bb13_in(V_8,V_cc_0,V_shft_0,V_28,V_cc_1,V_i_0,V_cc_2,V_i_2,V_rc_1,B,C,D,E,F,G,H) 
* Partial RF of phase [31,33]:
  - RF of loop [31:1]:
    V_rc_1
  - RF of loop [31:1,33:1]:
    V_8+V_cc_1-V_i_2-2
    V_cc_1+V_i_0-V_i_2-1
    V_cc_2-1
* Partial RF of phase [32,34]:
  - RF of loop [32:1,34:1]:
    V_8+V_cc_1-V_i_2-2
    V_cc_1+V_i_0-V_i_2-1
    V_cc_2-1


### Resulting Chains:eval_LogLuvDecode32_bb13_in(V_8,V_cc_0,V_shft_0,V_28,V_cc_1,V_i_0,V_cc_2,V_i_2,V_rc_1,B,C,D,E,F,G,H) 
* [[32,34],30]
* [[31,33],30]
* [[31,33],29]
* [30]
* [29]


### Merging Chains  eval_LogLuvDecode32_bb13_in/16 into  External patterns of execution 
* [[30]] --> 1 
* [[29]] --> 2 
* [[30,[32,34]]] --> 3 
* [[30,[31,33]]] --> 4 
* [[29,[31,33]]] --> 5 


### Specialization of cost equations eval_LogLuvDecode32_bb8_in/10 
* CE 21 is refined into CE [44] 
* CE 19 is refined into CE [45] 
* CE 20 is refined into CE [46] 
* CE 17 is refined into CE [47,48,49,50,51] 
* CE 18 is refined into CE [52,53,54] 


#### Refined cost equations eval_LogLuvDecode32_bb8_in/10 
* CE 44: eval_LogLuvDecode32_bb8_in(A,B,C,D,E,A,F,A,E,D) = 0
     [F=4] 
* CE 45: eval_LogLuvDecode32_bb8_in(V_8,V_cc_0,V_shft_0,V_28,V_cc_1,V_i_0,B,C,D,E) = 0
     [V_i_0>=V_8+1,V_i_0+D=V_8,B=3] 
* CE 46: eval_LogLuvDecode32_bb8_in(V_8,V_cc_0,V_shft_0,V_28,V_cc_1,V_i_0,B,C,D,E) = 0
     [V_8>=V_i_0+1,0>=V_cc_1,V_i_0+D=V_8,B=3] 
* CE 47: eval_LogLuvDecode32_bb8_in(V_8,V_cc_0,V_shft_0,V_28,V_cc_1,V_i_0,B,C,D,E) = 2+ eval_LogLuvDecode32_bb13_in(V_8,V_cc_0,V_shft_0,V_28,F,V_i_0,G,V_i_0,H,I,V_8,V_cc_0,V_shft_0,V_28,J,V_i_0):1+ eval_LogLuvDecode32_bb8_in(V_8,V_cc_0,V_shft_0,V_28,K,V_i_0,B,C,D,E)
     [V_8>=V_i_0+1,B>=3,4>=B,K=0,J=0,I=2,G=1,F=1,V_cc_1=1] 
* CE 48: eval_LogLuvDecode32_bb8_in(V_8,V_cc_0,V_shft_0,V_28,V_cc_1,V_i_0,B,C,D,E) = 2+ eval_LogLuvDecode32_bb13_in(V_8,V_cc_0,V_shft_0,V_28,F,V_i_0,G,V_i_0,H,I,V_8,V_cc_0,V_shft_0,V_28,J,V_i_0):2+ eval_LogLuvDecode32_bb8_in(V_8,V_cc_0,V_shft_0,V_28,J,V_i_0,B,C,D,E)
     [V_8>=V_i_0+1,J>=0,B>=3,4>=B,J+1=G,J+1=F,J+1=V_cc_1,I=2,H=0] 
* CE 49: eval_LogLuvDecode32_bb8_in(V_8,V_cc_0,V_shft_0,V_28,V_cc_1,V_i_0,B,C,D,E) = 2+ eval_LogLuvDecode32_bb13_in(V_8,V_cc_0,V_shft_0,V_28,V_cc_1,F,V_cc_1,G,H,I,V_8,V_cc_0,V_shft_0,V_28,J,K):3+ eval_LogLuvDecode32_bb8_in(V_8,V_cc_0,V_shft_0,V_28,L,K,B,C,D,E)
     [V_8+V_cc_1>=K+2,V_cc_1>=2,B>=3,0>=H+1,4>=B,K+1=V_cc_1+G,K+1=V_cc_1+F,K+1=V_cc_1+V_i_0,L=0,J=0,I=2] 
* CE 50: eval_LogLuvDecode32_bb8_in(V_8,V_cc_0,V_shft_0,V_28,V_cc_1,V_i_0,B,C,D,E) = 2+ eval_LogLuvDecode32_bb13_in(V_8,V_cc_0,V_shft_0,V_28,V_cc_1,F,V_cc_1,G,H,I,V_8,V_cc_0,V_shft_0,V_28,J,K):4+ eval_LogLuvDecode32_bb8_in(V_8,V_cc_0,V_shft_0,V_28,L,K,B,C,D,E)
     [V_8+V_cc_1>=K+2,H>=1,V_cc_1>=2,B>=3,4>=B,K+1=V_cc_1+G,K+1=V_cc_1+F,K+1=V_cc_1+V_i_0,L=0,J=0,I=2] 
* CE 51: eval_LogLuvDecode32_bb8_in(V_8,V_cc_0,V_shft_0,V_28,V_cc_1,V_i_0,B,C,D,E) = 2+ eval_LogLuvDecode32_bb13_in(V_8,V_cc_0,V_shft_0,V_28,V_cc_1,V_i_0,V_cc_1,V_i_0,F,G,V_8,V_cc_0,V_shft_0,V_28,H,I):5+ eval_LogLuvDecode32_bb8_in(V_8,V_cc_0,V_shft_0,V_28,H,J,B,C,D,E)
     [V_cc_1>=F+H+1,V_8>=V_i_0+1,H>=0,F>=1,B>=3,4>=B,V_cc_1+V_i_0=H+J+1,V_cc_1+V_i_0=H+I+1,G=2] 
* CE 52: eval_LogLuvDecode32_bb8_in(V_8,V_cc_0,V_shft_0,V_28,V_cc_1,V_i_0,B,C,D,E) = 2+ eval_LogLuvDecode32_bb11_in(V_8,V_cc_0,V_shft_0,V_28,F,V_i_0,G,V_i_0,H,I,V_8,V_cc_0,V_shft_0,V_28,G,V_i_0):1+ eval_LogLuvDecode32_bb8_in(V_8,V_cc_0,V_shft_0,V_28,G,V_i_0,B,C,D,E)
     [V_8>=V_i_0+1,G+1>=0,B>=3,4>=B,G+2=F,G+2=V_cc_1,I=2,H=0] 
* CE 53: eval_LogLuvDecode32_bb8_in(V_8,V_cc_0,V_shft_0,V_28,V_cc_1,V_i_0,B,C,D,E) = 2+ eval_LogLuvDecode32_bb11_in(V_8,V_cc_0,V_shft_0,V_28,F,V_i_0,G,V_i_0,H,I,V_8,V_cc_0,V_shft_0,V_28,G,J):2+ eval_LogLuvDecode32_bb8_in(V_8,V_cc_0,V_shft_0,V_28,G,J,B,C,D,E)
     [J>=V_i_0+1,V_8>=V_i_0+1,G+1>=0,B>=3,4>=B,J=V_i_0+H,G+2=F,G+2=V_cc_1,I=2] 
* CE 54: eval_LogLuvDecode32_bb8_in(V_8,V_cc_0,V_shft_0,V_28,V_cc_1,V_i_0,B,C,D,E) = 2+ eval_LogLuvDecode32_bb11_in(V_8,V_cc_0,V_shft_0,V_28,F,V_i_0,G,V_i_0,H,I,J,K,L,M,N,O):3
     [V_8>=V_i_0+1,G+1>=0,B>=3,0>=H+1,4>=B,G+2=F,G+2=V_cc_1,I=2] 

### Cost equations --> "Loop" of eval_LogLuvDecode32_bb8_in/10 
* CEs [54] --> Loop 35 
* CEs [53] --> Loop 36 
* CEs [52] --> Loop 37 
* CEs [49,50,51] --> Loop 38 
* CEs [47,48] --> Loop 39 
* CEs [44] --> Loop 40 
* CEs [45] --> Loop 41 
* CEs [46] --> Loop 42 

#### Loops of eval_LogLuvDecode32_bb8_in/10 
* Loop 35: eval_LogLuvDecode32_bb8_in(V_8,V_cc_0,V_shft_0,V_28,V_cc_1,V_i_0,B,C,D,E) [V_8>=V_i_0+1,B>=3,V_cc_1>=1,4>=B] 
* Loop 36: eval_LogLuvDecode32_bb8_in(V_8,V_cc_0,V_shft_0,V_28,V_cc_1,V_i_0,B,C,D,E)->  eval_LogLuvDecode32_bb8_in(V_8,V_cc_0,V_shft_0,V_28,V_cc_1',V_i_0',B,C,D,E)
                  [V_i_0'>=V_i_0+1,V_8>=V_i_0+1,B>=3,V_cc_1>=1,4>=B,V_cc_1=V_cc_1'+2] 
* Loop 37: eval_LogLuvDecode32_bb8_in(V_8,V_cc_0,V_shft_0,V_28,V_cc_1,V_i_0,B,C,D,E)->  eval_LogLuvDecode32_bb8_in(V_8,V_cc_0,V_shft_0,V_28,V_cc_1',V_i_0,B,C,D,E)
                  [V_8>=V_i_0+1,B>=3,V_cc_1>=1,4>=B,V_cc_1=V_cc_1'+2] 
* Loop 38: eval_LogLuvDecode32_bb8_in(V_8,V_cc_0,V_shft_0,V_28,V_cc_1,V_i_0,B,C,D,E)->  eval_LogLuvDecode32_bb8_in(V_8,V_cc_0,V_shft_0,V_28,V_cc_1',V_i_0',B,C,D,E)
                  [V_cc_1>=V_cc_1'+2,V_8>=V_i_0+1,V_cc_1'>=0,B>=3,4>=B,V_cc_1+V_i_0=V_cc_1'+V_i_0'+1] 
* Loop 39: eval_LogLuvDecode32_bb8_in(V_8,V_cc_0,V_shft_0,V_28,V_cc_1,V_i_0,B,C,D,E)->  eval_LogLuvDecode32_bb8_in(V_8,V_cc_0,V_shft_0,V_28,V_cc_1',V_i_0,B,C,D,E)
                  [V_8>=V_i_0+1,B>=3,V_cc_1>=1,4>=B,V_cc_1=V_cc_1'+1] 
* Loop 40: eval_LogLuvDecode32_bb8_in(A,B,C,D,E,A,F,A,E,D) [F=4] 
* Loop 41: eval_LogLuvDecode32_bb8_in(V_8,V_cc_0,V_shft_0,V_28,V_cc_1,V_i_0,B,C,D,E) [V_i_0>=V_8+1,V_8=V_i_0+D,B=3] 
* Loop 42: eval_LogLuvDecode32_bb8_in(V_8,V_cc_0,V_shft_0,V_28,V_cc_1,V_i_0,B,C,D,E) [V_8>=V_i_0+1,0>=V_cc_1,V_8=V_i_0+D,B=3] 

### Ranking functions of CR eval_LogLuvDecode32_bb8_in(V_8,V_cc_0,V_shft_0,V_28,V_cc_1,V_i_0,B,C,D,E) 
* RF of phase [36,37,38,39]: [V_cc_1]

#### Partial ranking functions of CR eval_LogLuvDecode32_bb8_in(V_8,V_cc_0,V_shft_0,V_28,V_cc_1,V_i_0,B,C,D,E) 
* Partial RF of phase [36,37,38,39]:
  - RF of loop [36:1,37:1]:
    V_cc_1/2
  - RF of loop [36:1,38:1]:
    V_8-V_i_0
  - RF of loop [38:1]:
    V_cc_1+V_i_0-1 depends on loops [36:1] 
    V_cc_1/2-1/2
  - RF of loop [39:1]:
    V_cc_1


### Resulting Chains:eval_LogLuvDecode32_bb8_in(V_8,V_cc_0,V_shft_0,V_28,V_cc_1,V_i_0,B,C,D,E) 
* [[36,37,38,39],42]
* [[36,37,38,39],41]
* [[36,37,38,39],40]
* [[36,37,38,39],35]...
* [42]
* [41]
* [40]
* [35]...


### Merging Chains  eval_LogLuvDecode32_bb8_in/10 into  External patterns of execution 
* [[42]] --> 1 
* [[41]] --> 2 
* [[41,[36,37,38,39]]] --> 3 
* [[42,[36,37,38,39]]] --> 4 
* [[40]] --> 5 
* [[40,[36,37,38,39]]] --> 6 
* [[35]] --> 7 
* [[35,[36,37,38,39]]] --> 8 


### Specialization of cost equations eval_LogLuvDecode32_bb7_in/6 
* CE 14 is refined into CE [55] 
* CE 13 is refined into CE [56,57,58,59,60,61] 
* CE 12 is refined into CE [62,63,64,65] 


#### Refined cost equations eval_LogLuvDecode32_bb7_in/6 
* CE 55: eval_LogLuvDecode32_bb7_in(V_8,V_cc_0,V_shft_0,B,C,D) = 0
     [7>=V_shft_0,B=5] 
* CE 56: eval_LogLuvDecode32_bb7_in(A,B,C,D,E,A) = 1+ eval_LogLuvDecode32_bb8_in(A,B,F,G,B,H,I,E,A,J):1
     [A>=1,G>=0,0>=B,G+8=F,G+8=C,I=3,H=0,D=3] 
* CE 57: eval_LogLuvDecode32_bb7_in(A,B,C,D,E,A) = 1+ eval_LogLuvDecode32_bb8_in(A,B,F,G,B,H,I,E,A,J):2
     [G>=0,0>=A+1,G+8=F,G+8=C,I=3,H=0,D=3] 
* CE 58: eval_LogLuvDecode32_bb7_in(V_8,V_cc_0,V_shft_0,B,C,D) = 1+ eval_LogLuvDecode32_bb8_in(V_8,V_cc_0,E,F,V_cc_0,G,H,C,D,I):3
     [V_cc_0>=1,F>=0,V_8>=1,0>=D+1,F+8=E,F+8=V_shft_0,H=3,G=0,B=3] 
* CE 59: eval_LogLuvDecode32_bb7_in(V_8,V_cc_0,V_shft_0,B,C,D) = 1+ eval_LogLuvDecode32_bb8_in(V_8,V_cc_0,E,F,V_cc_0,G,H,C,D,I):4
     [V_8>=D,D>=1,V_cc_0>=1,F>=0,F+8=E,F+8=V_shft_0,H=3,G=0,B=3] 
* CE 60: eval_LogLuvDecode32_bb7_in(V_8,V_cc_0,V_shft_0,B,C,D) = 1+ eval_LogLuvDecode32_bb8_in(V_8,V_cc_0,E,F,V_cc_0,G,H,C,D,I):7
     [V_cc_0>=1,F>=0,V_8>=1,F+8=E,F+8=V_shft_0,H=3,G=0,B=3] 
* CE 61: eval_LogLuvDecode32_bb7_in(V_8,V_cc_0,V_shft_0,B,C,D) = 1+ eval_LogLuvDecode32_bb8_in(V_8,V_cc_0,E,F,V_cc_0,G,H,C,D,I):8
     [V_cc_0>=2,F>=0,V_8>=1,F+8=E,F+8=V_shft_0,H=3,G=0,B=3] 
* CE 62: eval_LogLuvDecode32_bb7_in(V_8,V_cc_0,V_shft_0,B,C,D) = 2+ eval_LogLuvDecode32_bb8_in(E,V_cc_0,F,G,V_cc_0,H,I,J,V_cc_0,G):5+ eval_LogLuvDecode32_bb7_in(K,V_cc_0,G,B,C,D)
     [G>=0,G+8=F,G+8=V_shft_0,K=0,J=0,I=4,H=0,E=0,V_8=0] 
* CE 63: eval_LogLuvDecode32_bb7_in(V_8,V_cc_0,V_shft_0,B,C,D) = 2+ eval_LogLuvDecode32_bb8_in(V_8,V_cc_0,E,F,V_cc_0,G,H,V_8,I,F):6+ eval_LogLuvDecode32_bb7_in(V_8,I,F,B,C,D)
     [V_cc_0>=I+2,I+1>=0,V_8>=1,F>=0,F+8=E,F+8=V_shft_0,H=4,G=0] 
* CE 64: eval_LogLuvDecode32_bb7_in(V_8,V_cc_0,V_shft_0,B,C,D) = 2+ eval_LogLuvDecode32_bb8_in(V_8,V_cc_0,E,F,V_cc_0,G,H,I,J,K):7
     [V_cc_0>=1,F>=0,V_8>=1,F+8=E,F+8=V_shft_0,H=4,G=0] 
* CE 65: eval_LogLuvDecode32_bb7_in(V_8,V_cc_0,V_shft_0,B,C,D) = 2+ eval_LogLuvDecode32_bb8_in(V_8,V_cc_0,E,F,V_cc_0,G,H,I,J,K):8
     [V_cc_0>=2,F>=0,V_8>=1,F+8=E,F+8=V_shft_0,H=4,G=0] 

### Cost equations --> "Loop" of eval_LogLuvDecode32_bb7_in/6 
* CEs [60,61,64,65] --> Loop 43 
* CEs [63] --> Loop 44 
* CEs [62] --> Loop 45 
* CEs [55] --> Loop 46 
* CEs [59] --> Loop 47 
* CEs [58] --> Loop 48 
* CEs [56] --> Loop 49 
* CEs [57] --> Loop 50 

#### Loops of eval_LogLuvDecode32_bb7_in/6 
* Loop 43: eval_LogLuvDecode32_bb7_in(V_8,V_cc_0,V_shft_0,B,C,D) [V_shft_0>=8,V_cc_0>=1,V_8>=1] 
* Loop 44: eval_LogLuvDecode32_bb7_in(V_8,V_cc_0,V_shft_0,B,C,D)->  eval_LogLuvDecode32_bb7_in(V_8,V_cc_0',V_shft_0',B,C,D)
                  [V_cc_0>=V_cc_0'+2,V_cc_0'+1>=0,V_shft_0>=8,V_8>=1,V_shft_0=V_shft_0'+8] 
* Loop 45: eval_LogLuvDecode32_bb7_in(V_8,V_cc_0,V_shft_0,B,C,D)->  eval_LogLuvDecode32_bb7_in(V_8',V_cc_0,V_shft_0',B,C,D)
                  [V_shft_0>=8,V_shft_0=V_shft_0'+8,V_8'=0,V_8=0] 
* Loop 46: eval_LogLuvDecode32_bb7_in(V_8,V_cc_0,V_shft_0,B,C,D) [7>=V_shft_0,B=5] 
* Loop 47: eval_LogLuvDecode32_bb7_in(V_8,V_cc_0,V_shft_0,B,C,D) [V_8>=D,D>=1,V_shft_0>=8,V_cc_0>=1,B=3] 
* Loop 48: eval_LogLuvDecode32_bb7_in(V_8,V_cc_0,V_shft_0,B,C,D) [V_shft_0>=8,V_cc_0>=1,V_8>=1,0>=D+1,B=3] 
* Loop 49: eval_LogLuvDecode32_bb7_in(A,B,C,D,E,A) [C>=8,A>=1,0>=B,D=3] 
* Loop 50: eval_LogLuvDecode32_bb7_in(A,B,C,D,E,A) [C>=8,0>=A+1,D=3] 

### Ranking functions of CR eval_LogLuvDecode32_bb7_in(V_8,V_cc_0,V_shft_0,B,C,D) 
* RF of phase [44]: [V_cc_0/2,V_shft_0/8-7/8]
* RF of phase [45]: [V_shft_0-7]

#### Partial ranking functions of CR eval_LogLuvDecode32_bb7_in(V_8,V_cc_0,V_shft_0,B,C,D) 
* Partial RF of phase [44]:
  - RF of loop [44:1]:
    V_cc_0/2
    V_shft_0/8-7/8
* Partial RF of phase [45]:
  - RF of loop [45:1]:
    V_shft_0-7


### Resulting Chains:eval_LogLuvDecode32_bb7_in(V_8,V_cc_0,V_shft_0,B,C,D) 
* [[45],46]
* [[44],49]
* [[44],48]
* [[44],47]
* [[44],46]
* [[44],43]...
* [50]
* [49]
* [48]
* [47]
* [43]...


### Merging Chains  eval_LogLuvDecode32_bb7_in/6 into  External patterns of execution 
* [[46,[45]]] --> 1 
* [[50]] --> 2 
* [[49]] --> 3 
* [[47],[47,[44]],[49,[44]]] --> 4 
* [[48],[48,[44]]] --> 5 
* [[46,[44]]] --> 6 
* [[43]] --> 7 
* [[43,[44]]] --> 8 


### Specialization of cost equations loop_cont_eval_LogLuvDecode32_bb7_in/4 
* CE 15 is refined into CE [66] 
* CE 16 is refined into CE [67] 


#### Refined cost equations loop_cont_eval_LogLuvDecode32_bb7_in/4 
* CE 66: loop_cont_eval_LogLuvDecode32_bb7_in(E,A,B,C) = 0
     [E=5] 
* CE 67: loop_cont_eval_LogLuvDecode32_bb7_in(E,A,B,C) = 0
     [E=3] 

### Cost equations --> "Loop" of loop_cont_eval_LogLuvDecode32_bb7_in/4 
* CEs [66] --> Loop 51 
* CEs [67] --> Loop 52 

#### Loops of loop_cont_eval_LogLuvDecode32_bb7_in/4 
* Loop 51: loop_cont_eval_LogLuvDecode32_bb7_in(E,A,B,C) [E=5] 
* Loop 52: loop_cont_eval_LogLuvDecode32_bb7_in(E,A,B,C) [E=3] 

### Ranking functions of CR loop_cont_eval_LogLuvDecode32_bb7_in(E,A,B,C) 

#### Partial ranking functions of CR loop_cont_eval_LogLuvDecode32_bb7_in(E,A,B,C) 


### Resulting Chains:loop_cont_eval_LogLuvDecode32_bb7_in(E,A,B,C) 
* [52]
* [51]


### Merging Chains  loop_cont_eval_LogLuvDecode32_bb7_in/4 into  External patterns of execution 
* [[52]] --> 1 
* [[51]] --> 2 


### Specialization of cost equations eval_LogLuvDecode32_13/2 
* CE 11 is refined into CE [68,69,70,71,72,73,74,75] 


#### Refined cost equations eval_LogLuvDecode32_13/2 
* CE 68: eval_LogLuvDecode32_13(V_8,B) = 1+ eval_LogLuvDecode32_bb7_in(C,D,E,F,G,H):1+ loop_cont_eval_LogLuvDecode32_bb7_in(I,G,H,B):2
     [I=5,F=5,E=32,C=0,V_8=0] 
* CE 69: eval_LogLuvDecode32_13(V_8,B) = 1+ eval_LogLuvDecode32_bb7_in(V_8,C,D,E,F,V_8):2+ loop_cont_eval_LogLuvDecode32_bb7_in(G,F,V_8,B):1
     [0>=V_8+1,G=3,E=3,D=32] 
* CE 70: eval_LogLuvDecode32_13(V_8,B) = 1+ eval_LogLuvDecode32_bb7_in(V_8,C,D,E,F,V_8):3+ loop_cont_eval_LogLuvDecode32_bb7_in(G,F,V_8,B):1
     [V_8>=1,0>=C,G=3,E=3,D=32] 
* CE 71: eval_LogLuvDecode32_13(V_8,B) = 1+ eval_LogLuvDecode32_bb7_in(V_8,C,D,E,F,G):4+ loop_cont_eval_LogLuvDecode32_bb7_in(H,F,G,B):1
     [V_8>=G,G>=1,C>=1,H=3,E=3,D=32] 
* CE 72: eval_LogLuvDecode32_13(V_8,B) = 1+ eval_LogLuvDecode32_bb7_in(V_8,C,D,E,F,G):5+ loop_cont_eval_LogLuvDecode32_bb7_in(H,F,G,B):1
     [C>=1,V_8>=1,0>=G+1,H=3,E=3,D=32] 
* CE 73: eval_LogLuvDecode32_13(V_8,B) = 1+ eval_LogLuvDecode32_bb7_in(V_8,C,D,E,F,G):6+ loop_cont_eval_LogLuvDecode32_bb7_in(H,F,G,B):2
     [4*C>=21,V_8>=1,H=5,E=5,D=32] 
* CE 74: eval_LogLuvDecode32_13(V_8,B) = 1+ eval_LogLuvDecode32_bb7_in(V_8,C,D,E,F,G):7
     [C>=1,V_8>=1,D=32] 
* CE 75: eval_LogLuvDecode32_13(V_8,B) = 1+ eval_LogLuvDecode32_bb7_in(V_8,C,D,E,F,G):8
     [C>=3,V_8>=1,D=32] 

### Cost equations --> "Loop" of eval_LogLuvDecode32_13/2 
* CEs [74,75] --> Loop 53 
* CEs [70,71,72,73] --> Loop 54 
* CEs [69] --> Loop 55 
* CEs [68] --> Loop 56 

#### Loops of eval_LogLuvDecode32_13/2 
* Loop 53: eval_LogLuvDecode32_13(V_8,B) [V_8>=1] 
* Loop 54: eval_LogLuvDecode32_13(V_8,B) [V_8>=1] 
* Loop 55: eval_LogLuvDecode32_13(V_8,B) [0>=V_8+1] 
* Loop 56: eval_LogLuvDecode32_13(V_8,B) [V_8=0] 

### Ranking functions of CR eval_LogLuvDecode32_13(V_8,B) 

#### Partial ranking functions of CR eval_LogLuvDecode32_13(V_8,B) 


### Resulting Chains:eval_LogLuvDecode32_13(V_8,B) 
* [56]
* [55]
* [54]
* [53]...


### Merging Chains  eval_LogLuvDecode32_13/2 into  External patterns of execution 
* [[56]] --> 1 
* [[55]] --> 2 
* [[54]] --> 3 
* [[53]] --> 4 


### Specialization of cost equations eval_LogLuvDecode32_bb0_in/2 
* CE 3 is refined into CE [76] 
* CE 4 is refined into CE [77,78,79] 
* CE 5 is refined into CE [80,81] 
* CE 6 is refined into CE [82,83] 
* CE 7 is refined into CE [84,85,86] 
* CE 8 is refined into CE [87] 
* CE 9 is refined into CE [88] 
* CE 10 is refined into CE [89] 


#### Refined cost equations eval_LogLuvDecode32_bb0_in/2 
* CE 76: eval_LogLuvDecode32_bb0_in(V_occ,B) = 0+ eval_LogLuvDecode32_13(C,B):1
     [C=0,V_occ=0] 
* CE 77: eval_LogLuvDecode32_bb0_in(V_occ,B) = 0+ eval_LogLuvDecode32_13(C,B):1
     [V_occ>=1,C=0] 
* CE 78: eval_LogLuvDecode32_bb0_in(V_occ,B) = 0+ eval_LogLuvDecode32_13(C,B):3
     [C>=1,V_occ>=1] 
* CE 79: eval_LogLuvDecode32_bb0_in(V_occ,B) = 0+ eval_LogLuvDecode32_13(C,B):4
     [C>=1,V_occ>=1] 
* CE 80: eval_LogLuvDecode32_bb0_in(V_occ,B) = 0+ eval_LogLuvDecode32_13(C,B):1
     [V_occ>=1,C=0] 
* CE 81: eval_LogLuvDecode32_bb0_in(V_occ,B) = 0+ eval_LogLuvDecode32_13(C,B):2
     [V_occ>=1,0>=C+1] 
* CE 82: eval_LogLuvDecode32_bb0_in(V_occ,B) = 0+ eval_LogLuvDecode32_13(C,B):1
     [0>=V_occ+1,C=0] 
* CE 83: eval_LogLuvDecode32_bb0_in(V_occ,B) = 0+ eval_LogLuvDecode32_13(C,B):2
     [0>=C+1,0>=V_occ+1] 
* CE 84: eval_LogLuvDecode32_bb0_in(V_occ,B) = 0+ eval_LogLuvDecode32_13(C,B):1
     [0>=V_occ+1,C=0] 
* CE 85: eval_LogLuvDecode32_bb0_in(V_occ,B) = 0+ eval_LogLuvDecode32_13(C,B):3
     [C>=1,0>=V_occ+1] 
* CE 86: eval_LogLuvDecode32_bb0_in(V_occ,B) = 0+ eval_LogLuvDecode32_13(C,B):4
     [C>=1,0>=V_occ+1] 
* CE 87: eval_LogLuvDecode32_bb0_in(V_occ,B) = 0
     [] 
* CE 88: eval_LogLuvDecode32_bb0_in(V_occ,B) = 0
     [] 
* CE 89: eval_LogLuvDecode32_bb0_in(V_occ,B) = 0
     [0>=V_occ+1] 

### Cost equations --> "Loop" of eval_LogLuvDecode32_bb0_in/2 
* CEs [76,77,78,80,81,82,83,84,85,87,88,89] --> Loop 57 
* CEs [79] --> Loop 58 
* CEs [86] --> Loop 59 

#### Loops of eval_LogLuvDecode32_bb0_in/2 
* Loop 57: eval_LogLuvDecode32_bb0_in(V_occ,B) [] 
* Loop 58: eval_LogLuvDecode32_bb0_in(V_occ,B) [V_occ>=1] 
* Loop 59: eval_LogLuvDecode32_bb0_in(V_occ,B) [0>=V_occ+1] 

### Ranking functions of CR eval_LogLuvDecode32_bb0_in(V_occ,B) 

#### Partial ranking functions of CR eval_LogLuvDecode32_bb0_in(V_occ,B) 


### Resulting Chains:eval_LogLuvDecode32_bb0_in(V_occ,B) 
* [59]...
* [58]...
* [57]


### Merging Chains  eval_LogLuvDecode32_bb0_in/2 into  External patterns of execution 
* [[57]] --> 1 
* [[59]] --> 2 
* [[58]] --> 3 


### Specialization of cost equations eval_LogLuvDecode32_start/3 
* CE 2 is refined into CE [90,91,92] 


#### Refined cost equations eval_LogLuvDecode32_start/3 
* CE 90: eval_LogLuvDecode32_start(V_occ,V_s,B) = 0+ eval_LogLuvDecode32_bb0_in(V_occ,B):1
     [] 
* CE 91: eval_LogLuvDecode32_start(V_occ,V_s,B) = 0+ eval_LogLuvDecode32_bb0_in(V_occ,B):2
     [0>=V_occ+1] 
* CE 92: eval_LogLuvDecode32_start(V_occ,V_s,B) = 0+ eval_LogLuvDecode32_bb0_in(V_occ,B):3
     [V_occ>=1] 

### Cost equations --> "Loop" of eval_LogLuvDecode32_start/3 
* CEs [92] --> Loop 60 
* CEs [91] --> Loop 61 
* CEs [90] --> Loop 62 

#### Loops of eval_LogLuvDecode32_start/3 
* Loop 60: eval_LogLuvDecode32_start(V_occ,V_s,B) [V_occ>=1] 
* Loop 61: eval_LogLuvDecode32_start(V_occ,V_s,B) [0>=V_occ+1] 
* Loop 62: eval_LogLuvDecode32_start(V_occ,V_s,B) [] 

### Ranking functions of CR eval_LogLuvDecode32_start(V_occ,V_s,B) 

#### Partial ranking functions of CR eval_LogLuvDecode32_start(V_occ,V_s,B) 


### Resulting Chains:eval_LogLuvDecode32_start(V_occ,V_s,B) 
* [62]
* [61]...
* [60]...


### Merging Chains  eval_LogLuvDecode32_start/3 into  External patterns of execution 
* [[62]] --> 1 
* [[61]] --> 2 
* [[60]] --> 3 


Computing Bounds
=====================================

#### Cost of loops [27] 

 * loop 27:eval_LogLuvDecode32_bb11_in(V_8,V_cc_0,V_shft_0,V_28,V_cc_1,V_i_0,V_43,V_i_1,V_rc_0,B,C,D,E,F,G,H) -> [eval_LogLuvDecode32_bb11_in(V_8',V_cc_0',V_shft_0',V_28',V_cc_1',V_i_0',V_43',V_i_1',V_rc_0',B',C',D',E',F',G',H')] 
1
#### Cost of phase [27]:eval_LogLuvDecode32_bb11_in(V_8,V_cc_0,V_shft_0,V_28,V_cc_1,V_i_0,V_43,V_i_1,V_rc_0,B,C,D,E,F,G,H) -> [eval_LogLuvDecode32_bb11_in(V_8',V_cc_0',V_shft_0',V_28',V_cc_1',V_i_0',V_43',V_i_1',V_rc_0',B',C',D',E',F',G',H')] 
1*it(27)+0
#### Cost of loops [26] 

 * loop 26:eval_LogLuvDecode32_bb11_in(V_8,V_cc_0,V_shft_0,V_28,V_cc_1,V_i_0,V_43,V_i_1,V_rc_0,B,C,D,E,F,G,H) -> [eval_LogLuvDecode32_bb11_in(V_8',V_cc_0',V_shft_0',V_28',V_cc_1',V_i_0',V_43',V_i_1',V_rc_0',B',C',D',E',F',G',H')] 
1
#### Cost of phase [26]:eval_LogLuvDecode32_bb11_in(V_8,V_cc_0,V_shft_0,V_28,V_cc_1,V_i_0,V_43,V_i_1,V_rc_0,B,C,D,E,F,G,H) -> [eval_LogLuvDecode32_bb11_in(V_8',V_cc_0',V_shft_0',V_28',V_cc_1',V_i_0',V_43',V_i_1',V_rc_0',B',C',D',E',F',G',H')] 
1*it(26)+0
  Such that:it(26) =< V_rc_0
it(26) =< V_rc_0-V_rc_0'

#### Cost of chains of eval_LogLuvDecode32_bb11_in(V_8,V_cc_0,V_shft_0,V_28,V_cc_1,V_i_0,V_43,V_i_1,V_rc_0,B,C,D,E,F,G,H):
* Chain [[27]]...: 1*it(27)+0
  with precondition: [V_8>=V_i_0+1,V_i_1>=V_i_0,V_43+1>=0,V_cc_1=V_43+2,0>=V_rc_0+1,B=2] 

* Chain [[26],28]: 1*it(26)+0
  Such that:it(26) =< V_rc_0

  with precondition: [B=2,V_cc_1=V_43+2,V_8=C,V_cc_0=D,V_shft_0=E,V_28=F,V_cc_1=G+2,V_i_1+V_rc_0=H,V_cc_1>=1,V_rc_0>=1,V_8>=V_i_0+1,V_i_1>=V_i_0] 

* Chain [28]: 0
  with precondition: [V_rc_0=0,B=2,D=V_cc_0,E=V_shft_0,F=V_28,V_cc_1=V_43+2,V_8=C,V_cc_1=G+2,V_i_1=H,V_cc_1>=1,V_8>=V_i_0+1,V_i_1>=V_i_0] 


#### Cost of loops [32,34] 

 * loop 32:eval_LogLuvDecode32_bb13_in(V_8,V_cc_0,V_shft_0,V_28,V_cc_1,V_i_0,V_cc_2,V_i_2,V_rc_1,B,C,D,E,F,G,H) -> [eval_LogLuvDecode32_bb13_in(V_8',V_cc_0',V_shft_0',V_28',V_cc_1',V_i_0',V_cc_2',V_i_2',V_rc_1',B',C',D',E',F',G',H')] 
1
 * loop 34:eval_LogLuvDecode32_bb13_in(V_8,V_cc_0,V_shft_0,V_28,V_cc_1,V_i_0,V_cc_2,V_i_2,V_rc_1,B,C,D,E,F,G,H) -> [eval_LogLuvDecode32_bb13_in(V_8',V_cc_0',V_shft_0',V_28',V_cc_1',V_i_0',V_cc_2',V_i_2',V_rc_1',B',C',D',E',F',G',H')] 
1
#### Cost of phase [32,34]:eval_LogLuvDecode32_bb13_in(V_8,V_cc_0,V_shft_0,V_28,V_cc_1,V_i_0,V_cc_2,V_i_2,V_rc_1,B,C,D,E,F,G,H) -> [eval_LogLuvDecode32_bb13_in(V_8',V_cc_0',V_shft_0',V_28',V_cc_1',V_i_0',V_cc_2',V_i_2',V_rc_1',B',C',D',E',F',G',H')] 
2*it(32)+0
  Such that:aux(1) =< V_8+V_cc_1-V_i_2
aux(2) =< V_8+V_cc_1-V_i_2-V_8'-V_cc_1'+V_i_2'
aux(3) =< V_cc_1+V_i_0-V_i_2
aux(4) =< V_cc_1+V_i_0-V_i_2-V_cc_1'-V_i_0'+V_i_2'
aux(5) =< V_cc_2
aux(6) =< V_cc_2-V_cc_2'
it(32) =< aux(1)
it(32) =< aux(2)
it(32) =< aux(3)
it(32) =< aux(4)
it(32) =< aux(5)
it(32) =< aux(6)

#### Cost of loops [31,33] 

 * loop 31:eval_LogLuvDecode32_bb13_in(V_8,V_cc_0,V_shft_0,V_28,V_cc_1,V_i_0,V_cc_2,V_i_2,V_rc_1,B,C,D,E,F,G,H) -> [eval_LogLuvDecode32_bb13_in(V_8',V_cc_0',V_shft_0',V_28',V_cc_1',V_i_0',V_cc_2',V_i_2',V_rc_1',B',C',D',E',F',G',H')] 
1
 * loop 33:eval_LogLuvDecode32_bb13_in(V_8,V_cc_0,V_shft_0,V_28,V_cc_1,V_i_0,V_cc_2,V_i_2,V_rc_1,B,C,D,E,F,G,H) -> [eval_LogLuvDecode32_bb13_in(V_8',V_cc_0',V_shft_0',V_28',V_cc_1',V_i_0',V_cc_2',V_i_2',V_rc_1',B',C',D',E',F',G',H')] 
1
#### Cost of phase [31,33]:eval_LogLuvDecode32_bb13_in(V_8,V_cc_0,V_shft_0,V_28,V_cc_1,V_i_0,V_cc_2,V_i_2,V_rc_1,B,C,D,E,F,G,H) -> [eval_LogLuvDecode32_bb13_in(V_8',V_cc_0',V_shft_0',V_28',V_cc_1',V_i_0',V_cc_2',V_i_2',V_rc_1',B',C',D',E',F',G',H')] 
1*it(31)+1*it(33)+0
  Such that:it(31) =< V_rc_1
it(31) =< V_rc_1-V_rc_1'
aux(9) =< V_8+V_cc_1-V_i_2
aux(10) =< V_8+V_cc_1-V_i_2-V_8'-V_cc_1'+V_i_2'
aux(11) =< V_cc_1+V_i_0-V_i_2
aux(12) =< V_cc_1+V_i_0-V_i_2-V_cc_1'-V_i_0'+V_i_2'
aux(13) =< V_cc_2
aux(14) =< V_cc_2-V_cc_2'
it(31) =< aux(9)
it(33) =< aux(9)
it(31) =< aux(10)
it(33) =< aux(10)
it(31) =< aux(11)
it(33) =< aux(11)
it(31) =< aux(12)
it(33) =< aux(12)
it(31) =< aux(13)
it(33) =< aux(13)
it(31) =< aux(14)
it(33) =< aux(14)

#### Cost of phase [31,33]:eval_LogLuvDecode32_bb13_in(V_8,V_cc_0,V_shft_0,V_28,V_cc_1,V_i_0,V_cc_2,V_i_2,V_rc_1,B,C,D,E,F,G,H) -> [eval_LogLuvDecode32_bb13_in(V_8',V_cc_0',V_shft_0',V_28',V_cc_1',V_i_0',V_cc_2',V_i_2',V_rc_1',B',C',D',E',F',G',H')] 
1*it(31)+1*it(33)+0
  Such that:it(31) =< V_rc_1
it(31) =< V_rc_1-V_rc_1'
aux(9) =< V_8+V_cc_1-V_i_2
aux(10) =< V_8+V_cc_1-V_i_2-V_8'-V_cc_1'+V_i_2'
aux(11) =< V_cc_1+V_i_0-V_i_2
aux(12) =< V_cc_1+V_i_0-V_i_2-V_cc_1'-V_i_0'+V_i_2'
aux(13) =< V_cc_2
aux(14) =< V_cc_2-V_cc_2'
it(31) =< aux(9)
it(33) =< aux(9)
it(31) =< aux(10)
it(33) =< aux(10)
it(31) =< aux(11)
it(33) =< aux(11)
it(31) =< aux(12)
it(33) =< aux(12)
it(31) =< aux(13)
it(33) =< aux(13)
it(31) =< aux(14)
it(33) =< aux(14)

#### Cost of chains of eval_LogLuvDecode32_bb13_in(V_8,V_cc_0,V_shft_0,V_28,V_cc_1,V_i_0,V_cc_2,V_i_2,V_rc_1,B,C,D,E,F,G,H):
* Chain [[32,34],30]: 2*it(32)+0
  Such that:aux(1) =< V_8-V_i_0-V_i_2+H+1
aux(7) =< -V_i_2+H
aux(8) =< -V_i_2+H+1
it(32) =< aux(1)
it(32) =< aux(7)
it(32) =< aux(8)

  with precondition: [B=2,G=0,V_8=C,V_cc_0=D,V_shft_0=E,V_28=F,V_cc_1+V_i_0=H+1,V_cc_1+V_i_0=V_cc_2+V_i_2,0>=V_rc_1+1,V_cc_2>=2,V_8>=V_i_0+1,V_cc_1>=V_cc_2] 

* Chain [[31,33],30]: 1*it(31)+1*it(33)+0
  Such that:aux(9) =< V_8+V_cc_1-V_i_2
it(31) =< V_rc_1
aux(15) =< -V_i_2+H
aux(16) =< -V_i_2+H+1
it(31) =< aux(9)
it(33) =< aux(9)
it(31) =< aux(15)
it(33) =< aux(15)
it(31) =< aux(16)
it(33) =< aux(16)

  with precondition: [B=2,G=0,V_8=C,V_cc_0=D,V_shft_0=E,V_28=F,V_cc_1+V_i_0=H+1,V_cc_1+V_i_0=V_cc_2+V_i_2,V_cc_2>=2,V_rc_1>=1,V_8>=V_i_0+1,V_cc_1>=V_cc_2] 

* Chain [[31,33],29]: 1*it(31)+1*it(33)+0
  Such that:aux(9) =< V_8+V_cc_1-V_i_2
it(31) =< V_rc_1
aux(17) =< V_cc_2
aux(18) =< -V_i_2+H
it(31) =< aux(9)
it(33) =< aux(9)
it(31) =< aux(18)
it(33) =< aux(18)
it(31) =< aux(17)
it(33) =< aux(17)

  with precondition: [B=2,V_8=C,V_cc_0=D,V_shft_0=E,V_28=F,V_cc_1+V_i_0=V_cc_2+V_i_2,V_cc_1+V_i_0=G+H+1,V_rc_1>=1,G>=0,V_8>=V_i_0+1,V_cc_1>=V_cc_2,V_cc_2>=V_rc_1+G+1] 

* Chain [30]: 0
  with precondition: [V_cc_2=1,B=2,G=0,D=V_cc_0,E=V_shft_0,F=V_28,V_8=C,V_i_2=H,V_i_2+1=V_cc_1+V_i_0,V_cc_1>=1,V_8+V_cc_1>=V_i_2+2] 

* Chain [29]: 0
  with precondition: [V_rc_1=0,B=2,D=V_cc_0,E=V_shft_0,F=V_28,V_8=C,V_cc_2=G+1,V_i_2=H,V_cc_2+V_i_2=V_cc_1+V_i_0,V_cc_2>=1,V_cc_1>=V_cc_2,V_8+V_cc_1>=V_cc_2+V_i_2+1] 


#### Cost of loops [36,37,38,39] 

 * loop 36:eval_LogLuvDecode32_bb8_in(V_8,V_cc_0,V_shft_0,V_28,V_cc_1,V_i_0,B,C,D,E) -> [eval_LogLuvDecode32_bb8_in(V_8',V_cc_0',V_shft_0',V_28',V_cc_1',V_i_0',B',C',D',E')] 
1*s(2)+2
  Such that:s(2) =< -V_i_0+V_i_0'

 * loop 37:eval_LogLuvDecode32_bb8_in(V_8,V_cc_0,V_shft_0,V_28,V_cc_1,V_i_0,B,C,D,E) -> [eval_LogLuvDecode32_bb8_in(V_8',V_cc_0',V_shft_0',V_28',V_cc_1',V_i_0',B',C',D',E')] 
2
 * loop 38:eval_LogLuvDecode32_bb8_in(V_8,V_cc_0,V_shft_0,V_28,V_cc_1,V_i_0,B,C,D,E) -> [eval_LogLuvDecode32_bb8_in(V_8',V_cc_0',V_shft_0',V_28',V_cc_1',V_i_0',B',C',D',E')] 
4*s(23)+2*s(22)+2
  Such that:s(17) =< -2*V_i_0+V_8'+V_cc_1'+V_i_0'+1
s(18) =< -V_i_0+V_cc_1'+V_i_0'+1
s(19) =< -2*V_i_0+V_8'+V_i_0'+1
s(20) =< -V_i_0+V_i_0'
s(21) =< -V_i_0+V_i_0'+1
s(22) =< s(20)
s(22) =< s(17)
s(22) =< s(18)
s(23) =< s(19)
s(23) =< s(20)
s(23) =< s(21)

 * loop 39:eval_LogLuvDecode32_bb8_in(V_8,V_cc_0,V_shft_0,V_28,V_cc_1,V_i_0,B,C,D,E) -> [eval_LogLuvDecode32_bb8_in(V_8',V_cc_0',V_shft_0',V_28',V_cc_1',V_i_0',B',C',D',E')] 
2
#### Cost of phase [36,37,38,39]:eval_LogLuvDecode32_bb8_in(V_8,V_cc_0,V_shft_0,V_28,V_cc_1,V_i_0,B,C,D,E) -> [eval_LogLuvDecode32_bb8_in(V_8',V_cc_0',V_shft_0',V_28',V_cc_1',V_i_0',B',C',D',E')] 
4*it(36)+2*it(37)+2*it(39)+1*s(24)+4*s(25)+2*s(26)+0
  Such that:aux(27) =< V_8+V_cc_1-V_i_0
aux(28) =< V_8+V_cc_1-V_i_0-V_8'-V_cc_1'+V_i_0'
aux(29) =< V_8-V_i_0
aux(30) =< V_8-V_i_0-V_8'+V_i_0'
aux(31) =< V_cc_1
aux(32) =< V_cc_1-V_cc_1'
aux(33) =< V_cc_1/2
aux(34) =< V_cc_1/2-V_cc_1'/2
it(39) =< aux(27)
s(27) =< aux(27)
it(39) =< aux(28)
s(27) =< aux(28)
it(36) =< aux(29)
it(36) =< aux(30)
it(36) =< aux(31)
it(37) =< aux(31)
it(39) =< aux(31)
it(36) =< aux(32)
it(37) =< aux(32)
it(39) =< aux(32)
it(36) =< aux(33)
it(37) =< aux(33)
it(36) =< aux(34)
it(37) =< aux(34)
aux(25) =< aux(27)
s(30) =< it(36)*aux(31)
s(31) =< it(36)*aux(27)
s(29) =< it(36)*aux(25)
s(26) =< s(27)
s(26) =< s(31)
s(26) =< s(30)
s(25) =< s(29)
s(25) =< s(27)

#### Cost of phase [36,37,38,39]:eval_LogLuvDecode32_bb8_in(V_8,V_cc_0,V_shft_0,V_28,V_cc_1,V_i_0,B,C,D,E) -> [eval_LogLuvDecode32_bb8_in(V_8',V_cc_0',V_shft_0',V_28',V_cc_1',V_i_0',B',C',D',E')] 
4*it(36)+2*it(37)+2*it(39)+1*s(24)+4*s(25)+2*s(26)+0
  Such that:aux(27) =< V_8+V_cc_1-V_i_0
aux(28) =< V_8+V_cc_1-V_i_0-V_8'-V_cc_1'+V_i_0'
aux(29) =< V_8-V_i_0
aux(30) =< V_8-V_i_0-V_8'+V_i_0'
aux(31) =< V_cc_1
aux(32) =< V_cc_1-V_cc_1'
aux(33) =< V_cc_1/2
aux(34) =< V_cc_1/2-V_cc_1'/2
it(39) =< aux(27)
s(27) =< aux(27)
it(39) =< aux(28)
s(27) =< aux(28)
it(36) =< aux(29)
it(36) =< aux(30)
it(36) =< aux(31)
it(37) =< aux(31)
it(39) =< aux(31)
it(36) =< aux(32)
it(37) =< aux(32)
it(39) =< aux(32)
it(36) =< aux(33)
it(37) =< aux(33)
it(36) =< aux(34)
it(37) =< aux(34)
aux(25) =< aux(27)
s(30) =< it(36)*aux(31)
s(31) =< it(36)*aux(27)
s(29) =< it(36)*aux(25)
s(26) =< s(27)
s(26) =< s(31)
s(26) =< s(30)
s(25) =< s(29)
s(25) =< s(27)

#### Cost of phase [36,37,38,39]:eval_LogLuvDecode32_bb8_in(V_8,V_cc_0,V_shft_0,V_28,V_cc_1,V_i_0,B,C,D,E) -> [eval_LogLuvDecode32_bb8_in(V_8',V_cc_0',V_shft_0',V_28',V_cc_1',V_i_0',B',C',D',E')] 
4*it(36)+2*it(37)+2*it(39)+1*s(24)+4*s(25)+2*s(26)+0
  Such that:aux(27) =< V_8+V_cc_1-V_i_0
aux(28) =< V_8+V_cc_1-V_i_0-V_8'-V_cc_1'+V_i_0'
aux(29) =< V_8-V_i_0
aux(30) =< V_8-V_i_0-V_8'+V_i_0'
aux(31) =< V_cc_1
aux(32) =< V_cc_1-V_cc_1'
aux(33) =< V_cc_1/2
aux(34) =< V_cc_1/2-V_cc_1'/2
it(39) =< aux(27)
s(27) =< aux(27)
it(39) =< aux(28)
s(27) =< aux(28)
it(36) =< aux(29)
it(36) =< aux(30)
it(36) =< aux(31)
it(37) =< aux(31)
it(39) =< aux(31)
it(36) =< aux(32)
it(37) =< aux(32)
it(39) =< aux(32)
it(36) =< aux(33)
it(37) =< aux(33)
it(36) =< aux(34)
it(37) =< aux(34)
aux(25) =< aux(27)
s(30) =< it(36)*aux(31)
s(31) =< it(36)*aux(27)
s(29) =< it(36)*aux(25)
s(26) =< s(27)
s(26) =< s(31)
s(26) =< s(30)
s(25) =< s(29)
s(25) =< s(27)

#### Cost of phase [36,37,38,39]:eval_LogLuvDecode32_bb8_in(V_8,V_cc_0,V_shft_0,V_28,V_cc_1,V_i_0,B,C,D,E) -> [eval_LogLuvDecode32_bb8_in(V_8',V_cc_0',V_shft_0',V_28',V_cc_1',V_i_0',B',C',D',E')] 
4*it(36)+2*it(37)+2*it(39)+1*s(24)+4*s(25)+2*s(26)+0
  Such that:aux(27) =< V_8+V_cc_1-V_i_0
aux(28) =< V_8+V_cc_1-V_i_0-V_8'-V_cc_1'+V_i_0'
aux(29) =< V_8-V_i_0
aux(30) =< V_8-V_i_0-V_8'+V_i_0'
aux(31) =< V_cc_1
aux(32) =< V_cc_1-V_cc_1'
aux(33) =< V_cc_1/2
aux(34) =< V_cc_1/2-V_cc_1'/2
it(39) =< aux(27)
s(27) =< aux(27)
it(39) =< aux(28)
s(27) =< aux(28)
it(36) =< aux(29)
it(36) =< aux(30)
it(36) =< aux(31)
it(37) =< aux(31)
it(39) =< aux(31)
it(36) =< aux(32)
it(37) =< aux(32)
it(39) =< aux(32)
it(36) =< aux(33)
it(37) =< aux(33)
it(36) =< aux(34)
it(37) =< aux(34)
aux(25) =< aux(27)
s(30) =< it(36)*aux(31)
s(31) =< it(36)*aux(27)
s(29) =< it(36)*aux(25)
s(26) =< s(27)
s(26) =< s(31)
s(26) =< s(30)
s(25) =< s(29)
s(25) =< s(27)

#### Cost of chains of eval_LogLuvDecode32_bb8_in(V_8,V_cc_0,V_shft_0,V_28,V_cc_1,V_i_0,B,C,D,E):
* Chain [[36,37,38,39],42]: 4*it(36)+2*it(37)+2*it(39)+1*s(24)+4*s(25)+2*s(26)+0
  Such that:aux(27) =< V_8+V_cc_1-V_i_0
aux(28) =< V_8+V_cc_1-V_i_0-D+1
aux(29) =< V_8-V_i_0
aux(30) =< V_8-V_i_0-D
aux(31) =< V_cc_1
aux(32) =< V_cc_1+1
aux(33) =< V_cc_1/2
aux(34) =< V_cc_1/2+1/2
it(39) =< aux(27)
s(27) =< aux(27)
it(39) =< aux(28)
s(27) =< aux(28)
it(36) =< aux(29)
it(36) =< aux(30)
it(36) =< aux(31)
it(37) =< aux(31)
it(39) =< aux(31)
it(36) =< aux(32)
it(37) =< aux(32)
it(39) =< aux(32)
it(36) =< aux(33)
it(37) =< aux(33)
it(36) =< aux(34)
it(37) =< aux(34)
aux(25) =< aux(27)
s(30) =< it(36)*aux(31)
s(31) =< it(36)*aux(27)
s(29) =< it(36)*aux(25)
s(26) =< s(27)
s(26) =< s(31)
s(26) =< s(30)
s(25) =< s(29)
s(25) =< s(27)

  with precondition: [B=3,V_shft_0=V_28+8,V_shft_0>=8,V_cc_1>=1,V_i_0>=0,D>=1,V_cc_0>=V_cc_1,V_8>=V_i_0+D] 

* Chain [[36,37,38,39],41]: 4*it(36)+2*it(37)+2*it(39)+1*s(24)+4*s(25)+2*s(26)+0
  Such that:aux(27) =< V_8+V_cc_1-V_i_0
aux(28) =< V_8+V_cc_1-V_i_0-D+1
aux(29) =< V_8-V_i_0
aux(30) =< V_8-V_i_0-D
aux(31) =< V_cc_1
aux(32) =< V_cc_1+1
aux(33) =< V_cc_1/2
aux(34) =< V_cc_1/2+1/2
it(39) =< aux(27)
s(27) =< aux(27)
it(39) =< aux(28)
s(27) =< aux(28)
it(36) =< aux(29)
it(36) =< aux(30)
it(36) =< aux(31)
it(37) =< aux(31)
it(39) =< aux(31)
it(36) =< aux(32)
it(37) =< aux(32)
it(39) =< aux(32)
it(36) =< aux(33)
it(37) =< aux(33)
it(36) =< aux(34)
it(37) =< aux(34)
aux(25) =< aux(27)
s(30) =< it(36)*aux(31)
s(31) =< it(36)*aux(27)
s(29) =< it(36)*aux(25)
s(26) =< s(27)
s(26) =< s(31)
s(26) =< s(30)
s(25) =< s(29)
s(25) =< s(27)

  with precondition: [B=3,V_shft_0=V_28+8,0>=D+1,V_shft_0>=8,V_cc_1>=1,V_i_0>=0,V_cc_0>=V_cc_1,V_8>=V_i_0+1] 

* Chain [[36,37,38,39],40]: 4*it(36)+2*it(37)+2*it(39)+1*s(24)+4*s(25)+2*s(26)+0
  Such that:aux(27) =< V_8+V_cc_1-V_i_0
aux(28) =< V_8+V_cc_1-V_i_0-D
aux(31) =< V_cc_1
aux(32) =< V_cc_1-D
aux(33) =< V_cc_1/2
aux(34) =< V_cc_1/2-D/2
aux(35) =< V_8-V_i_0
it(39) =< aux(27)
s(27) =< aux(27)
it(39) =< aux(28)
s(27) =< aux(28)
it(36) =< aux(35)
it(36) =< aux(31)
it(37) =< aux(31)
it(39) =< aux(31)
it(36) =< aux(32)
it(37) =< aux(32)
it(39) =< aux(32)
it(36) =< aux(33)
it(37) =< aux(33)
it(36) =< aux(34)
it(37) =< aux(34)
aux(25) =< aux(27)
s(30) =< it(36)*aux(31)
s(31) =< it(36)*aux(27)
s(29) =< it(36)*aux(25)
s(26) =< s(27)
s(26) =< s(31)
s(26) =< s(30)
s(25) =< s(29)
s(25) =< s(27)

  with precondition: [B=4,V_shft_0=V_28+8,V_8=C,V_shft_0=E+8,V_shft_0>=8,V_i_0>=0,D+1>=0,V_cc_0>=V_cc_1,V_8>=V_i_0+1,V_cc_1>=D+2] 

* Chain [[36,37,38,39],35]...: 4*it(36)+2*it(37)+2*it(39)+2*s(24)+4*s(25)+2*s(26)+2
  Such that:aux(36) =< V_8+V_cc_1-V_i_0
aux(37) =< V_8-V_i_0
aux(38) =< V_cc_1
aux(39) =< V_cc_1/2
it(39) =< aux(36)
it(36) =< aux(37)
it(36) =< aux(38)
it(37) =< aux(38)
it(39) =< aux(38)
it(36) =< aux(39)
it(37) =< aux(39)
aux(25) =< aux(36)
s(30) =< it(36)*aux(38)
s(31) =< it(36)*aux(36)
s(29) =< it(36)*aux(25)
s(26) =< aux(36)
s(26) =< s(31)
s(26) =< s(30)
s(25) =< s(29)
s(25) =< aux(36)

  with precondition: [V_shft_0=V_28+8,4>=B,V_shft_0>=8,V_cc_1>=2,V_i_0>=0,B>=3,V_cc_0>=V_cc_1,V_8>=V_i_0+1] 

* Chain [42]: 0
  with precondition: [B=3,V_shft_0=V_28+8,V_i_0+D=V_8,0>=V_cc_1,V_shft_0>=8,V_i_0>=0,V_cc_0>=V_cc_1,V_8>=V_i_0+1] 

* Chain [41]: 0
  with precondition: [B=3,V_shft_0=V_28+8,V_i_0+D=V_8,V_shft_0>=8,V_i_0>=0,V_i_0>=V_8+1,V_cc_0>=V_cc_1] 

* Chain [40]: 0
  with precondition: [B=4,V_i_0=V_8,V_28+8=V_shft_0,V_i_0=C,V_cc_1=D,V_28=E,V_28>=0,V_i_0>=0,V_cc_0>=V_cc_1] 

* Chain [35]...: 1*s(32)+2
  with precondition: [V_shft_0=V_28+8,4>=B,V_shft_0>=8,V_cc_1>=1,V_i_0>=0,B>=3,V_cc_0>=V_cc_1,V_8>=V_i_0+1] 


#### Cost of loops [45] 

 * loop 45:eval_LogLuvDecode32_bb7_in(V_8,V_cc_0,V_shft_0,B,C,D) -> [eval_LogLuvDecode32_bb7_in(V_8',V_cc_0',V_shft_0',B',C',D')] 
2
#### Cost of phase [45]:eval_LogLuvDecode32_bb7_in(V_8,V_cc_0,V_shft_0,B,C,D) -> [eval_LogLuvDecode32_bb7_in(V_8',V_cc_0',V_shft_0',B',C',D')] 
2*it(45)+0
  Such that:it(45) =< V_shft_0
it(45) =< V_shft_0-V_shft_0'

#### Cost of loops [44] 

 * loop 44:eval_LogLuvDecode32_bb7_in(V_8,V_cc_0,V_shft_0,B,C,D) -> [eval_LogLuvDecode32_bb7_in(V_8',V_cc_0',V_shft_0',B',C',D')] 
2*s(58)+4*s(60)+2*s(61)+2*s(66)+4*s(67)+1*s(68)+2
  Such that:s(51) =< V_cc_0
s(52) =< V_cc_0+V_8'
s(53) =< V_cc_0+V_8'-V_cc_0'
s(54) =< V_cc_0-V_cc_0'
s(55) =< V_cc_0/2
s(56) =< V_cc_0/2-V_cc_0'/2
s(57) =< V_8'
s(58) =< s(52)
s(59) =< s(52)
s(58) =< s(53)
s(59) =< s(53)
s(60) =< s(57)
s(60) =< s(51)
s(61) =< s(51)
s(58) =< s(51)
s(60) =< s(54)
s(61) =< s(54)
s(58) =< s(54)
s(60) =< s(55)
s(61) =< s(55)
s(60) =< s(56)
s(61) =< s(56)
s(62) =< s(52)
s(63) =< s(60)*s(51)
s(64) =< s(60)*s(52)
s(65) =< s(60)*s(62)
s(66) =< s(59)
s(66) =< s(64)
s(66) =< s(63)
s(67) =< s(65)
s(67) =< s(59)

#### Cost of phase [44]:eval_LogLuvDecode32_bb7_in(V_8,V_cc_0,V_shft_0,B,C,D) -> [eval_LogLuvDecode32_bb7_in(V_8',V_cc_0',V_shft_0',B',C',D')] 
2*it(44)+2*s(69)+4*s(70)+2*s(71)+2*s(72)+4*s(73)+1*s(74)+0
  Such that:aux(45) =< V_8
s(52) =< V_8+V_cc_0
s(51) =< V_cc_0
it(44) =< V_cc_0/2
it(44) =< V_cc_0/2-V_cc_0'/2
it(44) =< V_shft_0/8
it(44) =< V_shft_0/8-V_shft_0'/8
aux(46) =< V_cc_0+1
aux(47) =< V_cc_0-V_cc_0'
aux(44) =< aux(46)
aux(44) =< aux(47)
aux(42) =< s(52)+1
aux(41) =< s(52)
aux(40) =< s(51)
s(83) =< it(44)*aux(45)
s(79) =< aux(44)* (1/2)
aux(43) =< it(44)*aux(40)
s(84) =< it(44)*aux(42)
s(85) =< it(44)*aux(41)
s(80) =< aux(43)* (1/2)
s(69) =< s(85)
s(75) =< s(85)
s(69) =< s(84)
s(75) =< s(84)
s(70) =< s(83)
s(70) =< aux(43)
s(71) =< aux(43)
s(69) =< aux(43)
s(70) =< aux(44)
s(71) =< aux(44)
s(69) =< aux(44)
s(70) =< s(80)
s(71) =< s(80)
s(70) =< s(79)
s(71) =< s(79)
s(77) =< s(70)*s(51)
s(78) =< s(70)*s(52)
s(76) =< s(70)*aux(41)
s(72) =< s(75)
s(72) =< s(78)
s(72) =< s(77)
s(73) =< s(76)
s(73) =< s(75)

#### Cost of phase [44]:eval_LogLuvDecode32_bb7_in(V_8,V_cc_0,V_shft_0,B,C,D) -> [eval_LogLuvDecode32_bb7_in(V_8',V_cc_0',V_shft_0',B',C',D')] 
2*it(44)+2*s(69)+4*s(70)+2*s(71)+2*s(72)+4*s(73)+1*s(74)+0
  Such that:aux(45) =< V_8
s(52) =< V_8+V_cc_0
s(51) =< V_cc_0
it(44) =< V_cc_0/2
it(44) =< V_cc_0/2-V_cc_0'/2
it(44) =< V_shft_0/8
it(44) =< V_shft_0/8-V_shft_0'/8
aux(46) =< V_cc_0+1
aux(47) =< V_cc_0-V_cc_0'
aux(44) =< aux(46)
aux(44) =< aux(47)
aux(42) =< s(52)+1
aux(41) =< s(52)
aux(40) =< s(51)
s(83) =< it(44)*aux(45)
s(79) =< aux(44)* (1/2)
aux(43) =< it(44)*aux(40)
s(84) =< it(44)*aux(42)
s(85) =< it(44)*aux(41)
s(80) =< aux(43)* (1/2)
s(69) =< s(85)
s(75) =< s(85)
s(69) =< s(84)
s(75) =< s(84)
s(70) =< s(83)
s(70) =< aux(43)
s(71) =< aux(43)
s(69) =< aux(43)
s(70) =< aux(44)
s(71) =< aux(44)
s(69) =< aux(44)
s(70) =< s(80)
s(71) =< s(80)
s(70) =< s(79)
s(71) =< s(79)
s(77) =< s(70)*s(51)
s(78) =< s(70)*s(52)
s(76) =< s(70)*aux(41)
s(72) =< s(75)
s(72) =< s(78)
s(72) =< s(77)
s(73) =< s(76)
s(73) =< s(75)

#### Cost of phase [44]:eval_LogLuvDecode32_bb7_in(V_8,V_cc_0,V_shft_0,B,C,D) -> [eval_LogLuvDecode32_bb7_in(V_8',V_cc_0',V_shft_0',B',C',D')] 
2*it(44)+2*s(69)+4*s(70)+2*s(71)+2*s(72)+4*s(73)+1*s(74)+0
  Such that:aux(45) =< V_8
s(52) =< V_8+V_cc_0
s(51) =< V_cc_0
it(44) =< V_cc_0/2
it(44) =< V_cc_0/2-V_cc_0'/2
it(44) =< V_shft_0/8
it(44) =< V_shft_0/8-V_shft_0'/8
aux(46) =< V_cc_0+1
aux(47) =< V_cc_0-V_cc_0'
aux(44) =< aux(46)
aux(44) =< aux(47)
aux(42) =< s(52)+1
aux(41) =< s(52)
aux(40) =< s(51)
s(83) =< it(44)*aux(45)
s(79) =< aux(44)* (1/2)
aux(43) =< it(44)*aux(40)
s(84) =< it(44)*aux(42)
s(85) =< it(44)*aux(41)
s(80) =< aux(43)* (1/2)
s(69) =< s(85)
s(75) =< s(85)
s(69) =< s(84)
s(75) =< s(84)
s(70) =< s(83)
s(70) =< aux(43)
s(71) =< aux(43)
s(69) =< aux(43)
s(70) =< aux(44)
s(71) =< aux(44)
s(69) =< aux(44)
s(70) =< s(80)
s(71) =< s(80)
s(70) =< s(79)
s(71) =< s(79)
s(77) =< s(70)*s(51)
s(78) =< s(70)*s(52)
s(76) =< s(70)*aux(41)
s(72) =< s(75)
s(72) =< s(78)
s(72) =< s(77)
s(73) =< s(76)
s(73) =< s(75)

#### Cost of phase [44]:eval_LogLuvDecode32_bb7_in(V_8,V_cc_0,V_shft_0,B,C,D) -> [eval_LogLuvDecode32_bb7_in(V_8',V_cc_0',V_shft_0',B',C',D')] 
2*it(44)+2*s(69)+4*s(70)+2*s(71)+2*s(72)+4*s(73)+1*s(74)+0
  Such that:aux(45) =< V_8
s(52) =< V_8+V_cc_0
s(51) =< V_cc_0
it(44) =< V_cc_0/2
it(44) =< V_cc_0/2-V_cc_0'/2
it(44) =< V_shft_0/8
it(44) =< V_shft_0/8-V_shft_0'/8
aux(46) =< V_cc_0+1
aux(47) =< V_cc_0-V_cc_0'
aux(44) =< aux(46)
aux(44) =< aux(47)
aux(42) =< s(52)+1
aux(41) =< s(52)
aux(40) =< s(51)
s(83) =< it(44)*aux(45)
s(79) =< aux(44)* (1/2)
aux(43) =< it(44)*aux(40)
s(84) =< it(44)*aux(42)
s(85) =< it(44)*aux(41)
s(80) =< aux(43)* (1/2)
s(69) =< s(85)
s(75) =< s(85)
s(69) =< s(84)
s(75) =< s(84)
s(70) =< s(83)
s(70) =< aux(43)
s(71) =< aux(43)
s(69) =< aux(43)
s(70) =< aux(44)
s(71) =< aux(44)
s(69) =< aux(44)
s(70) =< s(80)
s(71) =< s(80)
s(70) =< s(79)
s(71) =< s(79)
s(77) =< s(70)*s(51)
s(78) =< s(70)*s(52)
s(76) =< s(70)*aux(41)
s(72) =< s(75)
s(72) =< s(78)
s(72) =< s(77)
s(73) =< s(76)
s(73) =< s(75)

#### Cost of phase [44]:eval_LogLuvDecode32_bb7_in(V_8,V_cc_0,V_shft_0,B,C,D) -> [eval_LogLuvDecode32_bb7_in(V_8',V_cc_0',V_shft_0',B',C',D')] 
2*it(44)+2*s(69)+4*s(70)+2*s(71)+2*s(72)+4*s(73)+1*s(74)+0
  Such that:aux(45) =< V_8
s(52) =< V_8+V_cc_0
s(51) =< V_cc_0
it(44) =< V_cc_0/2
it(44) =< V_cc_0/2-V_cc_0'/2
it(44) =< V_shft_0/8
it(44) =< V_shft_0/8-V_shft_0'/8
aux(46) =< V_cc_0+1
aux(47) =< V_cc_0-V_cc_0'
aux(44) =< aux(46)
aux(44) =< aux(47)
aux(42) =< s(52)+1
aux(41) =< s(52)
aux(40) =< s(51)
s(83) =< it(44)*aux(45)
s(79) =< aux(44)* (1/2)
aux(43) =< it(44)*aux(40)
s(84) =< it(44)*aux(42)
s(85) =< it(44)*aux(41)
s(80) =< aux(43)* (1/2)
s(69) =< s(85)
s(75) =< s(85)
s(69) =< s(84)
s(75) =< s(84)
s(70) =< s(83)
s(70) =< aux(43)
s(71) =< aux(43)
s(69) =< aux(43)
s(70) =< aux(44)
s(71) =< aux(44)
s(69) =< aux(44)
s(70) =< s(80)
s(71) =< s(80)
s(70) =< s(79)
s(71) =< s(79)
s(77) =< s(70)*s(51)
s(78) =< s(70)*s(52)
s(76) =< s(70)*aux(41)
s(72) =< s(75)
s(72) =< s(78)
s(72) =< s(77)
s(73) =< s(76)
s(73) =< s(75)

#### Cost of chains of eval_LogLuvDecode32_bb7_in(V_8,V_cc_0,V_shft_0,B,C,D):
* Chain [[45],46]: 2*it(45)+0
  Such that:it(45) =< V_shft_0

  with precondition: [V_8=0,B=5,V_shft_0>=8] 

* Chain [[44],49]: 2*it(44)+2*s(69)+4*s(70)+2*s(71)+2*s(72)+4*s(73)+1*s(74)+1
  Such that:s(51) =< V_cc_0
s(52) =< V_cc_0+D
it(44) =< V_cc_0/2
aux(45) =< D
aux(48) =< V_cc_0+1
aux(42) =< s(52)+1
aux(41) =< s(52)
aux(40) =< s(51)
s(83) =< it(44)*aux(45)
s(79) =< aux(48)* (1/2)
aux(43) =< it(44)*aux(40)
s(84) =< it(44)*aux(42)
s(85) =< it(44)*aux(41)
s(80) =< aux(43)* (1/2)
s(69) =< s(85)
s(75) =< s(85)
s(69) =< s(84)
s(75) =< s(84)
s(70) =< s(83)
s(70) =< aux(43)
s(71) =< aux(43)
s(69) =< aux(43)
s(70) =< aux(48)
s(71) =< aux(48)
s(69) =< aux(48)
s(70) =< s(80)
s(71) =< s(80)
s(70) =< s(79)
s(71) =< s(79)
s(77) =< s(70)*s(51)
s(78) =< s(70)*s(52)
s(76) =< s(70)*aux(41)
s(72) =< s(75)
s(72) =< s(78)
s(72) =< s(77)
s(73) =< s(76)
s(73) =< s(75)

  with precondition: [B=3,V_8=D,32>=V_shft_0,V_8>=1,V_cc_0>=1,V_shft_0>=16] 

* Chain [[44],48]: 2*it(44)+2*s(69)+4*s(70)+2*s(71)+2*s(72)+4*s(73)+2*s(74)+2*s(94)+4*s(96)+2*s(97)+2*s(102)+4*s(103)+1
  Such that:it(44) =< V_cc_0/2
aux(49) =< V_8
aux(50) =< V_8+V_cc_0
aux(51) =< V_cc_0
aux(52) =< V_cc_0+1
s(94) =< aux(50)
s(96) =< aux(49)
s(96) =< aux(51)
s(97) =< aux(51)
s(94) =< aux(51)
s(96) =< aux(52)
s(97) =< aux(52)
s(94) =< aux(52)
aux(41) =< aux(50)
s(99) =< s(96)*aux(51)
s(100) =< s(96)*aux(50)
s(101) =< s(96)*aux(41)
s(102) =< aux(50)
s(102) =< s(100)
s(102) =< s(99)
s(103) =< s(101)
s(103) =< aux(50)
aux(42) =< aux(50)+1
aux(40) =< aux(51)
s(83) =< it(44)*aux(49)
s(79) =< aux(52)* (1/2)
aux(43) =< it(44)*aux(40)
s(84) =< it(44)*aux(42)
s(85) =< it(44)*aux(41)
s(80) =< aux(43)* (1/2)
s(69) =< s(85)
s(75) =< s(85)
s(69) =< s(84)
s(75) =< s(84)
s(70) =< s(83)
s(70) =< aux(43)
s(71) =< aux(43)
s(69) =< aux(43)
s(70) =< aux(52)
s(71) =< aux(52)
s(69) =< aux(52)
s(70) =< s(80)
s(71) =< s(80)
s(70) =< s(79)
s(71) =< s(79)
s(77) =< s(70)*aux(51)
s(78) =< s(70)*aux(50)
s(76) =< s(70)*aux(41)
s(72) =< s(75)
s(72) =< s(78)
s(72) =< s(77)
s(73) =< s(76)
s(73) =< s(75)

  with precondition: [B=3,32>=V_shft_0,0>=D+1,V_8>=1,V_cc_0>=3,V_shft_0>=16] 

* Chain [[44],47]: 2*it(44)+2*s(69)+4*s(70)+2*s(71)+2*s(72)+4*s(73)+2*s(74)+2*s(113)+4*s(115)+2*s(116)+2*s(121)+4*s(122)+1
  Such that:it(44) =< V_cc_0/2
aux(55) =< V_8
aux(56) =< V_8+V_cc_0
aux(57) =< V_cc_0
aux(58) =< V_cc_0+1
s(113) =< aux(56)
s(115) =< aux(55)
s(115) =< aux(57)
s(116) =< aux(57)
s(113) =< aux(57)
s(115) =< aux(58)
s(116) =< aux(58)
s(113) =< aux(58)
aux(41) =< aux(56)
s(118) =< s(115)*aux(57)
s(119) =< s(115)*aux(56)
s(120) =< s(115)*aux(41)
s(121) =< aux(56)
s(121) =< s(119)
s(121) =< s(118)
s(122) =< s(120)
s(122) =< aux(56)
aux(42) =< aux(56)+1
aux(40) =< aux(57)
s(83) =< it(44)*aux(55)
s(79) =< aux(58)* (1/2)
aux(43) =< it(44)*aux(40)
s(84) =< it(44)*aux(42)
s(85) =< it(44)*aux(41)
s(80) =< aux(43)* (1/2)
s(69) =< s(85)
s(75) =< s(85)
s(69) =< s(84)
s(75) =< s(84)
s(70) =< s(83)
s(70) =< aux(43)
s(71) =< aux(43)
s(69) =< aux(43)
s(70) =< aux(58)
s(71) =< aux(58)
s(69) =< aux(58)
s(70) =< s(80)
s(71) =< s(80)
s(70) =< s(79)
s(71) =< s(79)
s(77) =< s(70)*aux(57)
s(78) =< s(70)*aux(56)
s(76) =< s(70)*aux(41)
s(72) =< s(75)
s(72) =< s(78)
s(72) =< s(77)
s(73) =< s(76)
s(73) =< s(75)

  with precondition: [B=3,32>=V_shft_0,V_cc_0>=3,V_shft_0>=16,D>=1,V_8>=D] 

* Chain [[44],46]: 2*it(44)+2*s(69)+4*s(70)+2*s(71)+2*s(72)+4*s(73)+1*s(74)+0
  Such that:aux(45) =< V_8
s(52) =< V_8+V_cc_0
s(51) =< V_cc_0
it(44) =< V_cc_0/2
aux(59) =< V_cc_0+1
aux(42) =< s(52)+1
aux(41) =< s(52)
aux(40) =< s(51)
s(83) =< it(44)*aux(45)
s(79) =< aux(59)* (1/2)
aux(43) =< it(44)*aux(40)
s(84) =< it(44)*aux(42)
s(85) =< it(44)*aux(41)
s(80) =< aux(43)* (1/2)
s(69) =< s(85)
s(75) =< s(85)
s(69) =< s(84)
s(75) =< s(84)
s(70) =< s(83)
s(70) =< aux(43)
s(71) =< aux(43)
s(69) =< aux(43)
s(70) =< aux(59)
s(71) =< aux(59)
s(69) =< aux(59)
s(70) =< s(80)
s(71) =< s(80)
s(70) =< s(79)
s(71) =< s(79)
s(77) =< s(70)*s(51)
s(78) =< s(70)*s(52)
s(76) =< s(70)*aux(41)
s(72) =< s(75)
s(72) =< s(78)
s(72) =< s(77)
s(73) =< s(76)
s(73) =< s(75)

  with precondition: [B=5,V_8>=1,V_cc_0>=1,V_shft_0>=8,4*V_cc_0+11>=V_shft_0] 

* Chain [[44],43]...: 2*it(44)+2*s(69)+4*s(70)+2*s(71)+2*s(72)+4*s(73)+7*s(74)+4*s(129)+8*s(130)+4*s(131)+4*s(136)+8*s(137)+4
  Such that:aux(46) =< V_cc_0+1
aux(64) =< V_8
aux(65) =< V_8+V_cc_0
aux(66) =< V_cc_0
aux(67) =< V_cc_0/2
aux(63) =< aux(66)
aux(63) =< aux(67)
it(44) =< aux(67)
s(129) =< aux(65)
s(130) =< aux(64)
s(130) =< aux(66)
s(131) =< aux(66)
s(129) =< aux(66)
s(130) =< aux(63)
s(131) =< aux(63)
aux(41) =< aux(65)
s(133) =< s(130)*aux(66)
s(134) =< s(130)*aux(65)
s(135) =< s(130)*aux(41)
s(136) =< aux(65)
s(136) =< s(134)
s(136) =< s(133)
s(137) =< s(135)
s(137) =< aux(65)
aux(44) =< aux(46)
aux(44) =< aux(66)
aux(42) =< aux(65)+1
aux(40) =< aux(66)
s(83) =< it(44)*aux(64)
s(79) =< aux(44)* (1/2)
aux(43) =< it(44)*aux(40)
s(84) =< it(44)*aux(42)
s(85) =< it(44)*aux(41)
s(80) =< aux(43)* (1/2)
s(69) =< s(85)
s(75) =< s(85)
s(69) =< s(84)
s(75) =< s(84)
s(70) =< s(83)
s(70) =< aux(43)
s(71) =< aux(43)
s(69) =< aux(43)
s(70) =< aux(44)
s(71) =< aux(44)
s(69) =< aux(44)
s(70) =< s(80)
s(71) =< s(80)
s(70) =< s(79)
s(71) =< s(79)
s(77) =< s(70)*aux(66)
s(78) =< s(70)*aux(65)
s(76) =< s(70)*aux(41)
s(72) =< s(75)
s(72) =< s(78)
s(72) =< s(77)
s(73) =< s(76)
s(73) =< s(75)

  with precondition: [32>=V_shft_0,V_8>=1,V_cc_0>=3,V_shft_0>=16] 

* Chain [50]: 1
  with precondition: [V_shft_0=32,B=3,V_8=D,0>=V_8+1] 

* Chain [49]: 1
  with precondition: [B=3,V_8=D,0>=V_cc_0,32>=V_shft_0,V_8>=1,V_shft_0>=8] 

* Chain [48]: 2*s(94)+4*s(96)+2*s(97)+2*s(102)+4*s(103)+1*s(104)+1
  Such that:s(88) =< V_8
s(86) =< V_8+V_cc_0
s(90) =< V_cc_0
s(91) =< V_cc_0+1
s(92) =< V_cc_0/2
s(93) =< V_cc_0/2+1/2
s(94) =< s(86)
s(95) =< s(86)
s(96) =< s(88)
s(96) =< s(90)
s(97) =< s(90)
s(94) =< s(90)
s(96) =< s(91)
s(97) =< s(91)
s(94) =< s(91)
s(96) =< s(92)
s(97) =< s(92)
s(96) =< s(93)
s(97) =< s(93)
s(98) =< s(86)
s(99) =< s(96)*s(90)
s(100) =< s(96)*s(86)
s(101) =< s(96)*s(98)
s(102) =< s(95)
s(102) =< s(100)
s(102) =< s(99)
s(103) =< s(101)
s(103) =< s(95)

  with precondition: [B=3,32>=V_shft_0,0>=D+1,V_8>=1,V_cc_0>=1,V_shft_0>=8] 

* Chain [47]: 2*s(113)+4*s(115)+2*s(116)+2*s(121)+4*s(122)+1*s(123)+1
  Such that:s(109) =< V_cc_0
s(110) =< V_cc_0+1
s(111) =< V_cc_0/2
s(112) =< V_cc_0/2+1/2
aux(53) =< V_8
aux(54) =< V_8+V_cc_0
s(113) =< aux(54)
s(115) =< aux(53)
s(115) =< s(109)
s(116) =< s(109)
s(113) =< s(109)
s(115) =< s(110)
s(116) =< s(110)
s(113) =< s(110)
s(115) =< s(111)
s(116) =< s(111)
s(115) =< s(112)
s(116) =< s(112)
s(117) =< aux(54)
s(118) =< s(115)*s(109)
s(119) =< s(115)*aux(54)
s(120) =< s(115)*s(117)
s(121) =< aux(54)
s(121) =< s(119)
s(121) =< s(118)
s(122) =< s(120)
s(122) =< aux(54)

  with precondition: [B=3,32>=V_shft_0,V_cc_0>=1,V_shft_0>=8,D>=1,V_8>=D] 

* Chain [43]...: 6*s(124)+4*s(129)+8*s(130)+4*s(131)+4*s(136)+8*s(137)+4
  Such that:aux(60) =< V_8
aux(61) =< V_8+V_cc_0
aux(62) =< V_cc_0
aux(63) =< V_cc_0/2
s(129) =< aux(61)
s(130) =< aux(60)
s(130) =< aux(62)
s(131) =< aux(62)
s(129) =< aux(62)
s(130) =< aux(63)
s(131) =< aux(63)
s(132) =< aux(61)
s(133) =< s(130)*aux(62)
s(134) =< s(130)*aux(61)
s(135) =< s(130)*s(132)
s(136) =< aux(61)
s(136) =< s(134)
s(136) =< s(133)
s(137) =< s(135)
s(137) =< aux(61)

  with precondition: [32>=V_shft_0,V_8>=1,V_cc_0>=1,V_shft_0>=8] 


#### Cost of chains of loop_cont_eval_LogLuvDecode32_bb7_in(E,A,B,C):
* Chain [52]: 0
  with precondition: [E=3] 

* Chain [51]: 0
  with precondition: [E=5] 


#### Cost of chains of eval_LogLuvDecode32_13(V_8,B):
* Chain [56]: 2*s(275)+1
  Such that:s(275) =< 32

  with precondition: [V_8=0] 

* Chain [55]: 2
  with precondition: [0>=V_8+1] 

* Chain [54]: 112*s(284)+16*s(286)+2
  Such that:aux(79) =< V_8
s(286) =< aux(79)

  with precondition: [V_8>=1] 

* Chain [53]...: 69*s(401)+16*s(402)+5
  Such that:aux(80) =< V_8
s(402) =< aux(80)

  with precondition: [V_8>=1] 


#### Cost of chains of eval_LogLuvDecode32_bb0_in(V_occ,B):
* Chain [59]...: 16*s(447)+69*s(448)+5
  with precondition: [0>=V_occ+1] 

* Chain [58]...: 16*s(450)+69*s(451)+5
  with precondition: [V_occ>=1] 

* Chain [57]: 1*aux(82)+0
  with precondition: [] 


#### Cost of chains of eval_LogLuvDecode32_start(V_occ,V_s,B):
* Chain [62]: 1*s(463)+0
  with precondition: [] 

* Chain [61]...: 85*s(464)+5
  with precondition: [0>=V_occ+1] 

* Chain [60]...: 85*s(466)+5
  with precondition: [V_occ>=1] 


Closed-form bounds of eval_LogLuvDecode32_start(V_occ,V_s,B): 
-------------------------------------
* Chain [62] with precondition: [] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [61]... with precondition: [0>=V_occ+1] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [60]... with precondition: [V_occ>=1] 
    - Upper bound: inf 
    - Complexity: infinity 

### Maximum cost of eval_LogLuvDecode32_start(V_occ,V_s,B): inf 
Asymptotic class: infinity 

Time statistics: 
-------------------------------------
* Partial evaluation computed in 97 ms.
* Invariants computed in 213 ms.
   - Backward Invariants 107 ms.
   - Transitive Invariants 46 ms.
* Refinement performed in 401 ms.
* Termination proved in 65 ms.
* Upper bounds computed in 652 ms.
   - Equation cost structures 151 ms.
   - Phase cost structures 300 ms.
   - Chain cost structures 210 ms.
   - Solving cost expressions 0 ms.
* Total analysis performed in 1557 ms.


Warning: Ignored call to eval_best_huffman_divide_stop/1 in equation eval_best_huffman_divide_bb17_in/1 

Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. recursive  : [eval_best_huffman_divide_15/3,eval_best_huffman_divide_16/3,eval_best_huffman_divide_bb1_in/3]
1. recursive  : [eval_best_huffman_divide_bb4_in/3]
2. recursive  : [eval_best_huffman_divide_53/4,eval_best_huffman_divide_54/4,eval_best_huffman_divide_64/4,eval_best_huffman_divide_65/4,eval_best_huffman_divide_bb11_in/4,eval_best_huffman_divide_bb15_in/4]
3. recursive  : [eval_best_huffman_divide_31/2,eval_best_huffman_divide_32/2,eval_best_huffman_divide_bb7_in/2,loop_cont_eval_best_huffman_divide_bb11_in/3]
4. non_recursive  : [eval_best_huffman_divide_bb17_in/1]
5. non_recursive  : [loop_cont_eval_best_huffman_divide_bb7_in/2]
6. non_recursive  : [loop_cont_eval_best_huffman_divide_bb4_in/3]
7. non_recursive  : [loop_cont_eval_best_huffman_divide_bb1_in/3]
8. non_recursive  : [eval_best_huffman_divide_1/1]
9. non_recursive  : [eval_best_huffman_divide_0/1]
10. non_recursive  : [eval_best_huffman_divide_bb0_in/1]
11. non_recursive  : [eval_best_huffman_divide_start/3]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into eval_best_huffman_divide_bb1_in/3
1. SCC is partially evaluated into eval_best_huffman_divide_bb4_in/3
2. SCC is partially evaluated into eval_best_huffman_divide_bb11_in/4
3. SCC is partially evaluated into eval_best_huffman_divide_bb7_in/2
4. SCC is completely evaluated into other SCCs
5. SCC is completely evaluated into other SCCs
6. SCC is partially evaluated into loop_cont_eval_best_huffman_divide_bb4_in/3
7. SCC is partially evaluated into loop_cont_eval_best_huffman_divide_bb1_in/3
8. SCC is partially evaluated into eval_best_huffman_divide_1/1
9. SCC is completely evaluated into other SCCs
10. SCC is completely evaluated into other SCCs
11. SCC is partially evaluated into eval_best_huffman_divide_start/3

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations eval_best_huffman_divide_bb1_in/3 
* CE 6 is refined into CE [16] 
* CE 5 is refined into CE [17] 
* CE 4 is refined into CE [18] 


#### Refined cost equations eval_best_huffman_divide_bb1_in/3 
* CE 16: eval_best_huffman_divide_bb1_in(A,B,A) = 0
     [A>=23,B=4] 
* CE 17: eval_best_huffman_divide_bb1_in(A,B,A) = 0
     [A>=2,22>=A,B=4] 
* CE 18: eval_best_huffman_divide_bb1_in(V_r0_0,B,C) = 1+ eval_best_huffman_divide_bb1_in(D,B,C)
     [V_r0_0>=2,22>=V_r0_0,V_r0_0+1=D] 

### Cost equations --> "Loop" of eval_best_huffman_divide_bb1_in/3 
* CEs [18] --> Loop 15 
* CEs [16] --> Loop 16 
* CEs [17] --> Loop 17 

#### Loops of eval_best_huffman_divide_bb1_in/3 
* Loop 15: eval_best_huffman_divide_bb1_in(V_r0_0,B,C)->  eval_best_huffman_divide_bb1_in(V_r0_0',B,C)
                  [V_r0_0>=2,22>=V_r0_0,V_r0_0+1=V_r0_0'] 
* Loop 16: eval_best_huffman_divide_bb1_in(A,B,A) [A>=23,B=4] 
* Loop 17: eval_best_huffman_divide_bb1_in(A,B,A) [A>=2,22>=A,B=4] 

### Ranking functions of CR eval_best_huffman_divide_bb1_in(V_r0_0,B,C) 
* RF of phase [15]: [-V_r0_0+23]

#### Partial ranking functions of CR eval_best_huffman_divide_bb1_in(V_r0_0,B,C) 
* Partial RF of phase [15]:
  - RF of loop [15:1]:
    -V_r0_0+23


### Resulting Chains:eval_best_huffman_divide_bb1_in(V_r0_0,B,C) 
* [[15],17]
* [[15],16]
* [17]


### Merging Chains  eval_best_huffman_divide_bb1_in/3 into  External patterns of execution 
* [[16,[15]]] --> 1 
* [[17]] --> 2 
* [[17,[15]]] --> 3 


### Specialization of cost equations eval_best_huffman_divide_bb4_in/3 
* CE 9 is refined into CE [19] 
* CE 8 is refined into CE [20] 


#### Refined cost equations eval_best_huffman_divide_bb4_in/3 
* CE 19: eval_best_huffman_divide_bb4_in(V_r0_1,B,C) = 0
     [V_r0_1>=25,C=0,B=2] 
* CE 20: eval_best_huffman_divide_bb4_in(V_r0_1,B,C) = 1+ eval_best_huffman_divide_bb4_in(D,B,C)
     [24>=V_r0_1,V_r0_1+1=D] 

### Cost equations --> "Loop" of eval_best_huffman_divide_bb4_in/3 
* CEs [20] --> Loop 18 
* CEs [19] --> Loop 19 

#### Loops of eval_best_huffman_divide_bb4_in/3 
* Loop 18: eval_best_huffman_divide_bb4_in(V_r0_1,B,C)->  eval_best_huffman_divide_bb4_in(V_r0_1',B,C)
                  [24>=V_r0_1,V_r0_1+1=V_r0_1'] 
* Loop 19: eval_best_huffman_divide_bb4_in(V_r0_1,B,C) [V_r0_1>=25,C=0,B=2] 

### Ranking functions of CR eval_best_huffman_divide_bb4_in(V_r0_1,B,C) 
* RF of phase [18]: [-V_r0_1+25]

#### Partial ranking functions of CR eval_best_huffman_divide_bb4_in(V_r0_1,B,C) 
* Partial RF of phase [18]:
  - RF of loop [18:1]:
    -V_r0_1+25


### Resulting Chains:eval_best_huffman_divide_bb4_in(V_r0_1,B,C) 
* [[18],19]
* [19]


### Merging Chains  eval_best_huffman_divide_bb4_in/3 into  External patterns of execution 
* [[19,[18]]] --> 1 
* [[19]] --> 2 


### Specialization of cost equations eval_best_huffman_divide_bb11_in/4 
* CE 15 is refined into CE [21] 
* CE 14 is refined into CE [22] 


#### Refined cost equations eval_best_huffman_divide_bb11_in/4 
* CE 21: eval_best_huffman_divide_bb11_in(V_r0_2,V_r1_0,B,C) = 0
     [V_r1_0>=8,15>=V_r0_2,V_r0_2+1=C,B=2] 
* CE 22: eval_best_huffman_divide_bb11_in(V_r0_2,V_r1_0,B,C) = 1+ eval_best_huffman_divide_bb11_in(V_r0_2,D,E,C)
     [V_r1_0>=0,7>=V_r1_0,15>=V_r0_2,V_r1_0+1=D,E=2,B=2] 

### Cost equations --> "Loop" of eval_best_huffman_divide_bb11_in/4 
* CEs [22] --> Loop 20 
* CEs [21] --> Loop 21 

#### Loops of eval_best_huffman_divide_bb11_in/4 
* Loop 20: eval_best_huffman_divide_bb11_in(V_r0_2,V_r1_0,B,C)->  eval_best_huffman_divide_bb11_in(V_r0_2,V_r1_0',B',C)
                  [V_r1_0>=0,7>=V_r1_0,15>=V_r0_2,V_r1_0+1=V_r1_0',B'=2,B=2] 
* Loop 21: eval_best_huffman_divide_bb11_in(V_r0_2,V_r1_0,B,C) [V_r1_0>=8,15>=V_r0_2,V_r0_2+1=C,B=2] 

### Ranking functions of CR eval_best_huffman_divide_bb11_in(V_r0_2,V_r1_0,B,C) 
* RF of phase [20]: [-V_r1_0+8]

#### Partial ranking functions of CR eval_best_huffman_divide_bb11_in(V_r0_2,V_r1_0,B,C) 
* Partial RF of phase [20]:
  - RF of loop [20:1]:
    -V_r1_0+8


### Resulting Chains:eval_best_huffman_divide_bb11_in(V_r0_2,V_r1_0,B,C) 
* [[20],21]


### Merging Chains  eval_best_huffman_divide_bb11_in/4 into  External patterns of execution 
* [[21,[20]]] --> 1 


### Specialization of cost equations eval_best_huffman_divide_bb7_in/2 
* CE 13 is refined into CE [23] 
* CE 11 is refined into CE [24] 
* CE 12 is refined into CE [25] 


#### Refined cost equations eval_best_huffman_divide_bb7_in/2 
* CE 23: eval_best_huffman_divide_bb7_in(V_r0_2,B) = 0
     [V_r0_2>=16,B=3] 
* CE 24: eval_best_huffman_divide_bb7_in(V_r0_2,B) = 0
     [15>=V_r0_2,B=3] 
* CE 25: eval_best_huffman_divide_bb7_in(V_r0_2,B) = 2+ eval_best_huffman_divide_bb11_in(C,D,E,F):1+ eval_best_huffman_divide_bb7_in(F,G)
     [16>=F,F=C+1,F=V_r0_2+1,G=3,E=2,D=0,B=3] 

### Cost equations --> "Loop" of eval_best_huffman_divide_bb7_in/2 
* CEs [25] --> Loop 22 
* CEs [23] --> Loop 23 
* CEs [24] --> Loop 24 

#### Loops of eval_best_huffman_divide_bb7_in/2 
* Loop 22: eval_best_huffman_divide_bb7_in(V_r0_2,B)->  eval_best_huffman_divide_bb7_in(V_r0_2',B')
                  [15>=V_r0_2,V_r0_2+1=V_r0_2',B'=3,B=3] 
* Loop 23: eval_best_huffman_divide_bb7_in(V_r0_2,B) [V_r0_2>=16,B=3] 
* Loop 24: eval_best_huffman_divide_bb7_in(V_r0_2,B) [15>=V_r0_2,B=3] 

### Ranking functions of CR eval_best_huffman_divide_bb7_in(V_r0_2,B) 
* RF of phase [22]: [-V_r0_2+16]

#### Partial ranking functions of CR eval_best_huffman_divide_bb7_in(V_r0_2,B) 
* Partial RF of phase [22]:
  - RF of loop [22:1]:
    -V_r0_2+16


### Resulting Chains:eval_best_huffman_divide_bb7_in(V_r0_2,B) 
* [[22],24]
* [[22],23]
* [24]
* [23]


### Merging Chains  eval_best_huffman_divide_bb7_in/2 into  External patterns of execution 
* [[24],[23,[22]],[24,[22]]] --> 1 
* [[23]] --> 2 


### Specialization of cost equations loop_cont_eval_best_huffman_divide_bb4_in/3 
* CE 10 is refined into CE [26,27] 


#### Refined cost equations loop_cont_eval_best_huffman_divide_bb4_in/3 
* CE 26: loop_cont_eval_best_huffman_divide_bb4_in(E,A,B) = 1+ eval_best_huffman_divide_bb7_in(A,F):1
     [15>=A,F=3,E=2] 
* CE 27: loop_cont_eval_best_huffman_divide_bb4_in(E,A,B) = 1+ eval_best_huffman_divide_bb7_in(A,F):2
     [A>=16,F=3,E=2] 

### Cost equations --> "Loop" of loop_cont_eval_best_huffman_divide_bb4_in/3 
* CEs [27] --> Loop 25 
* CEs [26] --> Loop 26 

#### Loops of loop_cont_eval_best_huffman_divide_bb4_in/3 
* Loop 25: loop_cont_eval_best_huffman_divide_bb4_in(E,A,B) [A>=16,E=2] 
* Loop 26: loop_cont_eval_best_huffman_divide_bb4_in(E,A,B) [15>=A,E=2] 

### Ranking functions of CR loop_cont_eval_best_huffman_divide_bb4_in(E,A,B) 

#### Partial ranking functions of CR loop_cont_eval_best_huffman_divide_bb4_in(E,A,B) 


### Resulting Chains:loop_cont_eval_best_huffman_divide_bb4_in(E,A,B) 
* [26]
* [25]


### Merging Chains  loop_cont_eval_best_huffman_divide_bb4_in/3 into  External patterns of execution 
* [[26]] --> 1 
* [[25]] --> 2 


### Specialization of cost equations loop_cont_eval_best_huffman_divide_bb1_in/3 
* CE 7 is refined into CE [28,29] 


#### Refined cost equations loop_cont_eval_best_huffman_divide_bb1_in/3 
* CE 28: loop_cont_eval_best_huffman_divide_bb1_in(F,A,B) = 1+ eval_best_huffman_divide_bb4_in(A,G,H):1+ loop_cont_eval_best_huffman_divide_bb4_in(I,J,B):1
     [24>=A,J=0,I=2,H=0,G=2,F=4] 
* CE 29: loop_cont_eval_best_huffman_divide_bb1_in(F,A,B) = 1+ eval_best_huffman_divide_bb4_in(A,G,H):2+ loop_cont_eval_best_huffman_divide_bb4_in(I,J,B):1
     [A>=25,J=0,I=2,H=0,G=2,F=4] 

### Cost equations --> "Loop" of loop_cont_eval_best_huffman_divide_bb1_in/3 
* CEs [29] --> Loop 27 
* CEs [28] --> Loop 28 

#### Loops of loop_cont_eval_best_huffman_divide_bb1_in/3 
* Loop 27: loop_cont_eval_best_huffman_divide_bb1_in(F,A,B) [A>=25,F=4] 
* Loop 28: loop_cont_eval_best_huffman_divide_bb1_in(F,A,B) [24>=A,F=4] 

### Ranking functions of CR loop_cont_eval_best_huffman_divide_bb1_in(F,A,B) 

#### Partial ranking functions of CR loop_cont_eval_best_huffman_divide_bb1_in(F,A,B) 


### Resulting Chains:loop_cont_eval_best_huffman_divide_bb1_in(F,A,B) 
* [28]
* [27]


### Merging Chains  loop_cont_eval_best_huffman_divide_bb1_in/3 into  External patterns of execution 
* [[28]] --> 1 
* [[27]] --> 2 


### Specialization of cost equations eval_best_huffman_divide_1/1 
* CE 3 is refined into CE [30,31,32] 


#### Refined cost equations eval_best_huffman_divide_1/1 
* CE 30: eval_best_huffman_divide_1(B) = 1+ eval_best_huffman_divide_bb1_in(C,D,E):1+ loop_cont_eval_best_huffman_divide_bb1_in(F,G,B):1
     [G=23,F=4,E=23,D=4,C=2] 
* CE 31: eval_best_huffman_divide_1(B) = 1+ eval_best_huffman_divide_bb1_in(C,D,E):2+ loop_cont_eval_best_huffman_divide_bb1_in(F,G,B):1
     [G=2,F=4,E=2,D=4,C=2] 
* CE 32: eval_best_huffman_divide_1(B) = 1+ eval_best_huffman_divide_bb1_in(C,D,E):3+ loop_cont_eval_best_huffman_divide_bb1_in(F,E,B):1
     [E>=3,22>=E,F=4,D=4,C=2] 

### Cost equations --> "Loop" of eval_best_huffman_divide_1/1 
* CEs [30,31,32] --> Loop 29 

#### Loops of eval_best_huffman_divide_1/1 
* Loop 29: eval_best_huffman_divide_1(B) [] 

### Ranking functions of CR eval_best_huffman_divide_1(B) 

#### Partial ranking functions of CR eval_best_huffman_divide_1(B) 


### Resulting Chains:eval_best_huffman_divide_1(B) 
* [29]


### Merging Chains  eval_best_huffman_divide_1/1 into  External patterns of execution 
* [[29]] --> 1 


### Specialization of cost equations eval_best_huffman_divide_start/3 
* CE 2 is refined into CE [33] 


#### Refined cost equations eval_best_huffman_divide_start/3 
* CE 33: eval_best_huffman_divide_start(V_gr,V_ch,B) = 0+ eval_best_huffman_divide_1(B):1
     [] 

### Cost equations --> "Loop" of eval_best_huffman_divide_start/3 
* CEs [33] --> Loop 30 

#### Loops of eval_best_huffman_divide_start/3 
* Loop 30: eval_best_huffman_divide_start(V_gr,V_ch,B) [] 

### Ranking functions of CR eval_best_huffman_divide_start(V_gr,V_ch,B) 

#### Partial ranking functions of CR eval_best_huffman_divide_start(V_gr,V_ch,B) 


### Resulting Chains:eval_best_huffman_divide_start(V_gr,V_ch,B) 
* [30]


### Merging Chains  eval_best_huffman_divide_start/3 into  External patterns of execution 
* [[30]] --> 1 


Computing Bounds
=====================================

#### Cost of loops [15] 

 * loop 15:eval_best_huffman_divide_bb1_in(V_r0_0,B,C) -> [eval_best_huffman_divide_bb1_in(V_r0_0',B',C')] 
1
#### Cost of phase [15]:eval_best_huffman_divide_bb1_in(V_r0_0,B,C) -> [eval_best_huffman_divide_bb1_in(V_r0_0',B',C')] 
1*it(15)+0
  Such that:it(15) =< -V_r0_0+23
it(15) =< -V_r0_0+V_r0_0'

#### Cost of phase [15]:eval_best_huffman_divide_bb1_in(V_r0_0,B,C) -> [eval_best_huffman_divide_bb1_in(V_r0_0',B',C')] 
1*it(15)+0
  Such that:it(15) =< -V_r0_0+23
it(15) =< -V_r0_0+V_r0_0'

#### Cost of chains of eval_best_huffman_divide_bb1_in(V_r0_0,B,C):
* Chain [[15],17]: 1*it(15)+0
  Such that:it(15) =< -V_r0_0+C

  with precondition: [B=4,22>=C,V_r0_0>=2,C>=V_r0_0+1] 

* Chain [[15],16]: 1*it(15)+0
  Such that:it(15) =< -V_r0_0+23

  with precondition: [B=4,C=23,22>=V_r0_0,V_r0_0>=2] 

* Chain [17]: 0
  with precondition: [B=4,V_r0_0=C,22>=V_r0_0,V_r0_0>=2] 


#### Cost of loops [18] 

 * loop 18:eval_best_huffman_divide_bb4_in(V_r0_1,B,C) -> [eval_best_huffman_divide_bb4_in(V_r0_1',B',C')] 
1
#### Cost of phase [18]:eval_best_huffman_divide_bb4_in(V_r0_1,B,C) -> [eval_best_huffman_divide_bb4_in(V_r0_1',B',C')] 
1*it(18)+0
  Such that:it(18) =< -V_r0_1+25
it(18) =< -V_r0_1+V_r0_1'

#### Cost of chains of eval_best_huffman_divide_bb4_in(V_r0_1,B,C):
* Chain [[18],19]: 1*it(18)+0
  Such that:it(18) =< -V_r0_1+25

  with precondition: [B=2,C=0,24>=V_r0_1] 

* Chain [19]: 0
  with precondition: [B=2,C=0,V_r0_1>=25] 


#### Cost of loops [20] 

 * loop 20:eval_best_huffman_divide_bb11_in(V_r0_2,V_r1_0,B,C) -> [eval_best_huffman_divide_bb11_in(V_r0_2',V_r1_0',B',C')] 
1
#### Cost of phase [20]:eval_best_huffman_divide_bb11_in(V_r0_2,V_r1_0,B,C) -> [eval_best_huffman_divide_bb11_in(V_r0_2',V_r1_0',B',C')] 
1*it(20)+0
  Such that:it(20) =< -V_r1_0+8
it(20) =< -V_r1_0+V_r1_0'

#### Cost of chains of eval_best_huffman_divide_bb11_in(V_r0_2,V_r1_0,B,C):
* Chain [[20],21]: 1*it(20)+0
  Such that:it(20) =< -V_r1_0+8

  with precondition: [B=2,V_r0_2+1=C,15>=V_r0_2,7>=V_r1_0,V_r1_0>=0] 


#### Cost of loops [22] 

 * loop 22:eval_best_huffman_divide_bb7_in(V_r0_2,B) -> [eval_best_huffman_divide_bb7_in(V_r0_2',B')] 
1*s(2)+2
  Such that:s(2) =< 8

#### Cost of phase [22]:eval_best_huffman_divide_bb7_in(V_r0_2,B) -> [eval_best_huffman_divide_bb7_in(V_r0_2',B')] 
2*it(22)+1*s(3)+0
  Such that:aux(2) =< -V_r0_2+16
aux(3) =< -V_r0_2+V_r0_2'
aux(1) =< aux(2)
it(22) =< aux(2)
aux(1) =< aux(3)
it(22) =< aux(3)
s(3) =< aux(1)*8

#### Cost of phase [22]:eval_best_huffman_divide_bb7_in(V_r0_2,B) -> [eval_best_huffman_divide_bb7_in(V_r0_2',B')] 
2*it(22)+1*s(3)+0
  Such that:aux(2) =< -V_r0_2+16
aux(3) =< -V_r0_2+V_r0_2'
aux(1) =< aux(2)
it(22) =< aux(2)
aux(1) =< aux(3)
it(22) =< aux(3)
s(3) =< aux(1)*8

#### Cost of chains of eval_best_huffman_divide_bb7_in(V_r0_2,B):
* Chain [[22],24]: 2*it(22)+1*s(3)+0
  Such that:aux(3) =< -V_r0_2+15
aux(2) =< -V_r0_2+16
aux(1) =< aux(2)
it(22) =< aux(2)
aux(1) =< aux(3)
it(22) =< aux(3)
s(3) =< aux(1)*8

  with precondition: [B=3,14>=V_r0_2] 

* Chain [[22],23]: 2*it(22)+1*s(3)+0
  Such that:aux(4) =< -V_r0_2+16
it(22) =< aux(4)
s(3) =< aux(4)*8

  with precondition: [B=3,15>=V_r0_2] 

* Chain [24]: 0
  with precondition: [B=3,15>=V_r0_2] 

* Chain [23]: 0
  with precondition: [B=3,V_r0_2>=16] 


#### Cost of chains of loop_cont_eval_best_huffman_divide_bb4_in(E,A,B):
* Chain [26]: 2*s(15)+1*s(16)+2*s(17)+1*s(18)+1
  Such that:s(12) =< -A+15
s(13) =< -A+16
s(14) =< s(13)
s(15) =< s(13)
s(14) =< s(12)
s(15) =< s(12)
s(16) =< s(14)*8
s(17) =< s(13)
s(18) =< s(13)*8

  with precondition: [E=2,15>=A] 

* Chain [25]: 1
  with precondition: [E=2,A>=16] 


#### Cost of chains of loop_cont_eval_best_huffman_divide_bb1_in(F,A,B):
* Chain [28]: 1*s(19)+2*s(23)+1*s(24)+2*s(25)+1*s(26)+2
  Such that:s(20) =< 15
s(21) =< 16
s(19) =< -A+25
s(22) =< s(21)
s(23) =< s(21)
s(22) =< s(20)
s(23) =< s(20)
s(24) =< s(22)*8
s(25) =< s(21)
s(26) =< s(21)*8

  with precondition: [F=4,24>=A] 

* Chain [27]: 2*s(30)+1*s(31)+2*s(32)+1*s(33)+2
  Such that:s(27) =< 15
s(28) =< 16
s(29) =< s(28)
s(30) =< s(28)
s(29) =< s(27)
s(30) =< s(27)
s(31) =< s(29)*8
s(32) =< s(28)
s(33) =< s(28)*8

  with precondition: [F=4,A>=25] 


#### Cost of chains of eval_best_huffman_divide_1(B):
* Chain [29]: 1051
  with precondition: [] 


#### Cost of chains of eval_best_huffman_divide_start(V_gr,V_ch,B):
* Chain [30]: 1051
  with precondition: [] 


Closed-form bounds of eval_best_huffman_divide_start(V_gr,V_ch,B): 
-------------------------------------
* Chain [30] with precondition: [] 
    - Upper bound: 1051 
    - Complexity: constant 

### Maximum cost of eval_best_huffman_divide_start(V_gr,V_ch,B): 1051 
Asymptotic class: constant 

Time statistics: 
-------------------------------------
* Partial evaluation computed in 52 ms.
* Invariants computed in 74 ms.
   - Backward Invariants 38 ms.
   - Transitive Invariants 17 ms.
* Refinement performed in 125 ms.
* Termination proved in 21 ms.
* Upper bounds computed in 123 ms.
   - Equation cost structures 56 ms.
   - Phase cost structures 29 ms.
   - Chain cost structures 41 ms.
   - Solving cost expressions 0 ms.
* Total analysis performed in 481 ms.


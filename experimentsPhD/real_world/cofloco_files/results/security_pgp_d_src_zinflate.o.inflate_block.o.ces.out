Warning: Ignored call to eval_inflate_block_stop/1 in equation eval_inflate_block_bb14_in/1 

Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. recursive  : [eval_inflate_block_7/9,eval_inflate_block_8/9,eval_inflate_block_bb1_in/9,eval_inflate_block_bb4_in/9]
1. non_recursive  : [eval_inflate_block_bb14_in/1]
2. recursive  : [eval_inflate_block_27/8,eval_inflate_block_28/8,eval_inflate_block_bb6_in/8,eval_inflate_block_bb9_in/8]
3. non_recursive  : [eval_inflate_block_45/1]
4. non_recursive  : [eval_inflate_block_44/4]
5. non_recursive  : [eval_inflate_block_47/1]
6. non_recursive  : [eval_inflate_block_46/4]
7. non_recursive  : [eval_inflate_block_49/1]
8. non_recursive  : [eval_inflate_block_48/4]
9. non_recursive  : [eval_inflate_block_NewDefault_in/1]
10. non_recursive  : [loop_cont_eval_inflate_block_bb6_in/5]
11. non_recursive  : [loop_cont_eval_inflate_block_bb1_in/6]
12. non_recursive  : [eval_inflate_block_bb0_in/4]
13. non_recursive  : [eval_inflate_block_start/4]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into eval_inflate_block_bb1_in/9
1. SCC is completely evaluated into other SCCs
2. SCC is partially evaluated into eval_inflate_block_bb6_in/8
3. SCC is completely evaluated into other SCCs
4. SCC is completely evaluated into other SCCs
5. SCC is completely evaluated into other SCCs
6. SCC is completely evaluated into other SCCs
7. SCC is completely evaluated into other SCCs
8. SCC is completely evaluated into other SCCs
9. SCC is completely evaluated into other SCCs
10. SCC is partially evaluated into loop_cont_eval_inflate_block_bb6_in/5
11. SCC is partially evaluated into loop_cont_eval_inflate_block_bb1_in/6
12. SCC is partially evaluated into eval_inflate_block_bb0_in/4
13. SCC is partially evaluated into eval_inflate_block_start/4

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations eval_inflate_block_bb1_in/9 
* CE 6 is refined into CE [20] 
* CE 4 is refined into CE [21] 
* CE 5 is refined into CE [22] 


#### Refined cost equations eval_inflate_block_bb1_in/9 
* CE 20: eval_inflate_block_bb1_in(V__bb,V__bk,V__incnt,V_k_0,B,C,D,E,F) = 0
     [V_k_0>=V__bk,V_k_0>=1,V_k_0=F+1,B=7] 
* CE 21: eval_inflate_block_bb1_in(V__bb,V__bk,V__incnt,V_k_0,B,C,D,E,F) = 0
     [V_k_0>=V__bk,0>=V_k_0,B=2] 
* CE 22: eval_inflate_block_bb1_in(V__bb,V__bk,V__incnt,V_k_0,B,C,D,E,F) = 1+ eval_inflate_block_bb1_in(V__bb,V__bk,G,H,B,C,D,E,F)
     [V_k_0>=V__bk,0>=V_k_0,V_k_0+8=H,G+1=V__incnt] 

### Cost equations --> "Loop" of eval_inflate_block_bb1_in/9 
* CEs [22] --> Loop 19 
* CEs [20] --> Loop 20 
* CEs [21] --> Loop 21 

#### Loops of eval_inflate_block_bb1_in/9 
* Loop 19: eval_inflate_block_bb1_in(V__bb,V__bk,V__incnt,V_k_0,B,C,D,E,F)->  eval_inflate_block_bb1_in(V__bb,V__bk,V__incnt',V_k_0',B,C,D,E,F)
                  [V_k_0>=V__bk,0>=V_k_0,V_k_0+8=V_k_0',V__incnt=V__incnt'+1] 
* Loop 20: eval_inflate_block_bb1_in(V__bb,V__bk,V__incnt,V_k_0,B,C,D,E,F) [V_k_0>=V__bk,V_k_0>=1,V_k_0=F+1,B=7] 
* Loop 21: eval_inflate_block_bb1_in(V__bb,V__bk,V__incnt,V_k_0,B,C,D,E,F) [V_k_0>=V__bk,0>=V_k_0,B=2] 

### Ranking functions of CR eval_inflate_block_bb1_in(V__bb,V__bk,V__incnt,V_k_0,B,C,D,E,F) 
* RF of phase [19]: [-V_k_0/8+1/8]

#### Partial ranking functions of CR eval_inflate_block_bb1_in(V__bb,V__bk,V__incnt,V_k_0,B,C,D,E,F) 
* Partial RF of phase [19]:
  - RF of loop [19:1]:
    -V_k_0/8+1/8


### Resulting Chains:eval_inflate_block_bb1_in(V__bb,V__bk,V__incnt,V_k_0,B,C,D,E,F) 
* [[19],21]
* [[19],20]
* [21]
* [20]


### Merging Chains  eval_inflate_block_bb1_in/9 into  External patterns of execution 
* [[21],[21,[19]]] --> 1 
* [[20]] --> 2 
* [[20,[19]]] --> 3 


### Specialization of cost equations eval_inflate_block_bb6_in/8 
* CE 14 is refined into CE [23] 
* CE 13 is refined into CE [24] 
* CE 12 is refined into CE [25] 
* CE 11 is refined into CE [26] 
* CE 9 is refined into CE [27] 
* CE 10 is refined into CE [28] 


#### Refined cost equations eval_inflate_block_bb6_in/8 
* CE 23: eval_inflate_block_bb6_in(A,B,C,D,E,F,G,C) = 0
     [D>=2,D=G+2,E=6] 
* CE 24: eval_inflate_block_bb6_in(A,B,C,D,E,F,G,C) = 0
     [D>=2,D=G+2,E=5] 
* CE 25: eval_inflate_block_bb6_in(V__bb,V__bk,V__incnt,V_k_1,B,C,D,E) = 0
     [V_k_1>=2,B=4] 
* CE 26: eval_inflate_block_bb6_in(A,B,C,D,E,F,G,C) = 0
     [D>=2,D=G+2,E=3] 
* CE 27: eval_inflate_block_bb6_in(V__bb,V__bk,V__incnt,V_k_1,B,C,D,E) = 0
     [1>=V_k_1,B=2] 
* CE 28: eval_inflate_block_bb6_in(V__bb,V__bk,V__incnt,V_k_1,B,C,D,E) = 1+ eval_inflate_block_bb6_in(V__bb,V__bk,F,G,B,C,D,E)
     [1>=V_k_1,V_k_1+8=G,F+1=V__incnt] 

### Cost equations --> "Loop" of eval_inflate_block_bb6_in/8 
* CEs [28] --> Loop 22 
* CEs [23] --> Loop 23 
* CEs [24] --> Loop 24 
* CEs [25] --> Loop 25 
* CEs [26] --> Loop 26 
* CEs [27] --> Loop 27 

#### Loops of eval_inflate_block_bb6_in/8 
* Loop 22: eval_inflate_block_bb6_in(V__bb,V__bk,V__incnt,V_k_1,B,C,D,E)->  eval_inflate_block_bb6_in(V__bb,V__bk,V__incnt',V_k_1',B,C,D,E)
                  [1>=V_k_1,V_k_1+8=V_k_1',V__incnt=V__incnt'+1] 
* Loop 23: eval_inflate_block_bb6_in(A,B,C,D,E,F,G,C) [D>=2,D=G+2,E=6] 
* Loop 24: eval_inflate_block_bb6_in(A,B,C,D,E,F,G,C) [D>=2,D=G+2,E=5] 
* Loop 25: eval_inflate_block_bb6_in(V__bb,V__bk,V__incnt,V_k_1,B,C,D,E) [V_k_1>=2,B=4] 
* Loop 26: eval_inflate_block_bb6_in(A,B,C,D,E,F,G,C) [D>=2,D=G+2,E=3] 
* Loop 27: eval_inflate_block_bb6_in(V__bb,V__bk,V__incnt,V_k_1,B,C,D,E) [1>=V_k_1,B=2] 

### Ranking functions of CR eval_inflate_block_bb6_in(V__bb,V__bk,V__incnt,V_k_1,B,C,D,E) 
* RF of phase [22]: [-V_k_1/8+1/4]

#### Partial ranking functions of CR eval_inflate_block_bb6_in(V__bb,V__bk,V__incnt,V_k_1,B,C,D,E) 
* Partial RF of phase [22]:
  - RF of loop [22:1]:
    -V_k_1/8+1/4


### Resulting Chains:eval_inflate_block_bb6_in(V__bb,V__bk,V__incnt,V_k_1,B,C,D,E) 
* [[22],27]
* [[22],26]
* [[22],25]
* [[22],24]
* [[22],23]
* [27]
* [26]
* [25]
* [24]
* [23]


### Merging Chains  eval_inflate_block_bb6_in/8 into  External patterns of execution 
* [[27],[27,[22]]] --> 1 
* [[26]] --> 2 
* [[26,[22]]] --> 3 
* [[25,[22]]] --> 4 
* [[25]] --> 5 
* [[24]] --> 6 
* [[24,[22]]] --> 7 
* [[23]] --> 8 
* [[23,[22]]] --> 9 


### Specialization of cost equations loop_cont_eval_inflate_block_bb6_in/5 
* CE 19 is refined into CE [29] 
* CE 18 is refined into CE [30] 
* CE 17 is refined into CE [31] 
* CE 16 is refined into CE [32] 
* CE 15 is refined into CE [33] 


#### Refined cost equations loop_cont_eval_inflate_block_bb6_in/5 
* CE 29: loop_cont_eval_inflate_block_bb6_in(E,A,B,C,D) = 0
     [E=6] 
* CE 30: loop_cont_eval_inflate_block_bb6_in(E,A,B,C,D) = 0
     [E=5] 
* CE 31: loop_cont_eval_inflate_block_bb6_in(E,A,B,C,D) = 0
     [E=4] 
* CE 32: loop_cont_eval_inflate_block_bb6_in(E,A,B,C,D) = 0
     [E=3] 
* CE 33: loop_cont_eval_inflate_block_bb6_in(E,A,B,C,D) = 0
     [E=2] 

### Cost equations --> "Loop" of loop_cont_eval_inflate_block_bb6_in/5 
* CEs [29] --> Loop 28 
* CEs [30] --> Loop 29 
* CEs [31] --> Loop 30 
* CEs [32] --> Loop 31 
* CEs [33] --> Loop 32 

#### Loops of loop_cont_eval_inflate_block_bb6_in/5 
* Loop 28: loop_cont_eval_inflate_block_bb6_in(E,A,B,C,D) [E=6] 
* Loop 29: loop_cont_eval_inflate_block_bb6_in(E,A,B,C,D) [E=5] 
* Loop 30: loop_cont_eval_inflate_block_bb6_in(E,A,B,C,D) [E=4] 
* Loop 31: loop_cont_eval_inflate_block_bb6_in(E,A,B,C,D) [E=3] 
* Loop 32: loop_cont_eval_inflate_block_bb6_in(E,A,B,C,D) [E=2] 

### Ranking functions of CR loop_cont_eval_inflate_block_bb6_in(E,A,B,C,D) 

#### Partial ranking functions of CR loop_cont_eval_inflate_block_bb6_in(E,A,B,C,D) 


### Resulting Chains:loop_cont_eval_inflate_block_bb6_in(E,A,B,C,D) 
* [32]
* [31]
* [30]
* [29]
* [28]


### Merging Chains  loop_cont_eval_inflate_block_bb6_in/5 into  External patterns of execution 
* [[32]] --> 1 
* [[31]] --> 2 
* [[30]] --> 3 
* [[29]] --> 4 
* [[28]] --> 5 


### Specialization of cost equations loop_cont_eval_inflate_block_bb1_in/6 
* CE 8 is refined into CE [34,35,36,37,38,39,40,41,42] 
* CE 7 is refined into CE [43] 


#### Refined cost equations loop_cont_eval_inflate_block_bb1_in/6 
* CE 34: loop_cont_eval_inflate_block_bb1_in(F,A,B,C,D,E) = 1+ eval_inflate_block_bb6_in(A,B,C,D,G,H,I,J):1+ loop_cont_eval_inflate_block_bb6_in(K,H,I,J,E):1
     [1>=D,K=2,G=2,F=7] 
* CE 35: loop_cont_eval_inflate_block_bb1_in(F,A,B,C,D,E) = 1+ eval_inflate_block_bb6_in(A,B,C,G,H,I,J,C):2+ loop_cont_eval_inflate_block_bb6_in(K,I,J,C,E):2
     [J>=0,J+2=G,J+2=D,K=3,H=3,F=7] 
* CE 36: loop_cont_eval_inflate_block_bb1_in(F,A,B,C,D,E) = 1+ eval_inflate_block_bb6_in(A,B,C,D,G,H,I,J):3+ loop_cont_eval_inflate_block_bb6_in(K,H,I,L,E):2
     [I>=D+6,I>=0,7>=I,D+8*C=8*L+I+2,D+8*C=8*J+I+2,K=3,G=3,F=7] 
* CE 37: loop_cont_eval_inflate_block_bb1_in(F,A,B,C,D,E) = 1+ eval_inflate_block_bb6_in(A,B,C,D,G,H,I,J):4+ loop_cont_eval_inflate_block_bb6_in(K,H,I,J,E):3
     [1>=D,K=4,G=4,F=7] 
* CE 38: loop_cont_eval_inflate_block_bb1_in(F,A,B,C,D,E) = 1+ eval_inflate_block_bb6_in(A,B,C,D,G,H,I,J):5+ loop_cont_eval_inflate_block_bb6_in(K,H,I,J,E):3
     [D>=2,K=4,G=4,F=7] 
* CE 39: loop_cont_eval_inflate_block_bb1_in(F,A,B,C,D,E) = 1+ eval_inflate_block_bb6_in(A,B,C,G,H,I,J,C):6+ loop_cont_eval_inflate_block_bb6_in(K,I,J,C,E):4
     [J>=0,J+2=G,J+2=D,K=5,H=5,F=7] 
* CE 40: loop_cont_eval_inflate_block_bb1_in(F,A,B,C,D,E) = 1+ eval_inflate_block_bb6_in(A,B,C,D,G,H,I,J):7+ loop_cont_eval_inflate_block_bb6_in(K,H,I,L,E):4
     [I>=D+6,I>=0,7>=I,D+8*C=8*L+I+2,D+8*C=8*J+I+2,K=5,G=5,F=7] 
* CE 41: loop_cont_eval_inflate_block_bb1_in(F,A,B,C,D,E) = 1+ eval_inflate_block_bb6_in(A,B,C,G,H,I,J,C):8+ loop_cont_eval_inflate_block_bb6_in(K,I,J,C,E):5
     [J>=0,J+2=G,J+2=D,K=6,H=6,F=7] 
* CE 42: loop_cont_eval_inflate_block_bb1_in(F,A,B,C,D,E) = 1+ eval_inflate_block_bb6_in(A,B,C,D,G,H,I,J):9+ loop_cont_eval_inflate_block_bb6_in(K,H,I,L,E):5
     [I>=D+6,I>=0,7>=I,D+8*C=8*L+I+2,D+8*C=8*J+I+2,K=6,G=6,F=7] 
* CE 43: loop_cont_eval_inflate_block_bb1_in(F,A,B,C,D,E) = 0
     [F=2] 

### Cost equations --> "Loop" of loop_cont_eval_inflate_block_bb1_in/6 
* CEs [35,38,39,41] --> Loop 33 
* CEs [34,36,37,40,42] --> Loop 34 
* CEs [43] --> Loop 35 

#### Loops of loop_cont_eval_inflate_block_bb1_in/6 
* Loop 33: loop_cont_eval_inflate_block_bb1_in(F,A,B,C,D,E) [D>=2,F=7] 
* Loop 34: loop_cont_eval_inflate_block_bb1_in(F,A,B,C,D,E) [1>=D,F=7] 
* Loop 35: loop_cont_eval_inflate_block_bb1_in(F,A,B,C,D,E) [F=2] 

### Ranking functions of CR loop_cont_eval_inflate_block_bb1_in(F,A,B,C,D,E) 

#### Partial ranking functions of CR loop_cont_eval_inflate_block_bb1_in(F,A,B,C,D,E) 


### Resulting Chains:loop_cont_eval_inflate_block_bb1_in(F,A,B,C,D,E) 
* [35]
* [34]
* [33]


### Merging Chains  loop_cont_eval_inflate_block_bb1_in/6 into  External patterns of execution 
* [[35]] --> 1 
* [[34]] --> 2 
* [[33]] --> 3 


### Specialization of cost equations eval_inflate_block_bb0_in/4 
* CE 3 is refined into CE [44,45,46,47,48] 


#### Refined cost equations eval_inflate_block_bb0_in/4 
* CE 44: eval_inflate_block_bb0_in(V__bb,V__bk,V__incnt,B) = 1+ eval_inflate_block_bb1_in(V__bb,V__bk,V__incnt,V__bk,C,D,E,F,G):1+ loop_cont_eval_inflate_block_bb1_in(H,D,E,F,G,B):1
     [0>=V__bk,H=2,C=2] 
* CE 45: eval_inflate_block_bb0_in(V__bb,V__bk,V__incnt,B) = 1+ eval_inflate_block_bb1_in(V__bb,C,V__incnt,D,E,F,G,H,I):2+ loop_cont_eval_inflate_block_bb1_in(J,F,G,H,I,B):2
     [I>=0,1>=I,I+1=D,I+1=C,I+1=V__bk,J=7,E=7] 
* CE 46: eval_inflate_block_bb0_in(V__bb,V__bk,V__incnt,B) = 1+ eval_inflate_block_bb1_in(V__bb,C,V__incnt,D,E,F,G,H,I):2+ loop_cont_eval_inflate_block_bb1_in(J,F,G,H,I,B):3
     [I>=2,I+1=D,I+1=C,I+1=V__bk,J=7,E=7] 
* CE 47: eval_inflate_block_bb0_in(V__bb,V__bk,V__incnt,B) = 1+ eval_inflate_block_bb1_in(V__bb,V__bk,V__incnt,V__bk,C,D,E,F,G):3+ loop_cont_eval_inflate_block_bb1_in(H,D,E,F,G,B):2
     [G>=V__bk+7,G>=0,1>=G,H=7,C=7] 
* CE 48: eval_inflate_block_bb0_in(V__bb,V__bk,V__incnt,B) = 1+ eval_inflate_block_bb1_in(V__bb,V__bk,V__incnt,V__bk,C,D,E,F,G):3+ loop_cont_eval_inflate_block_bb1_in(H,D,E,F,G,B):3
     [G>=V__bk+7,G>=2,7>=G,H=7,C=7] 

### Cost equations --> "Loop" of eval_inflate_block_bb0_in/4 
* CEs [46] --> Loop 36 
* CEs [44,47,48] --> Loop 37 
* CEs [45] --> Loop 38 

#### Loops of eval_inflate_block_bb0_in/4 
* Loop 36: eval_inflate_block_bb0_in(V__bb,V__bk,V__incnt,B) [V__bk>=3] 
* Loop 37: eval_inflate_block_bb0_in(V__bb,V__bk,V__incnt,B) [0>=V__bk] 
* Loop 38: eval_inflate_block_bb0_in(V__bb,V__bk,V__incnt,B) [V__bk>=1,2>=V__bk] 

### Ranking functions of CR eval_inflate_block_bb0_in(V__bb,V__bk,V__incnt,B) 

#### Partial ranking functions of CR eval_inflate_block_bb0_in(V__bb,V__bk,V__incnt,B) 


### Resulting Chains:eval_inflate_block_bb0_in(V__bb,V__bk,V__incnt,B) 
* [38]
* [37]
* [36]


### Merging Chains  eval_inflate_block_bb0_in/4 into  External patterns of execution 
* [[38]] --> 1 
* [[37]] --> 2 
* [[36]] --> 3 


### Specialization of cost equations eval_inflate_block_start/4 
* CE 2 is refined into CE [49,50,51] 


#### Refined cost equations eval_inflate_block_start/4 
* CE 49: eval_inflate_block_start(V__bb,V__bk,V__incnt,B) = 0+ eval_inflate_block_bb0_in(V__bb,V__bk,V__incnt,B):1
     [V__bk>=1,2>=V__bk] 
* CE 50: eval_inflate_block_start(V__bb,V__bk,V__incnt,B) = 0+ eval_inflate_block_bb0_in(V__bb,V__bk,V__incnt,B):2
     [0>=V__bk] 
* CE 51: eval_inflate_block_start(V__bb,V__bk,V__incnt,B) = 0+ eval_inflate_block_bb0_in(V__bb,V__bk,V__incnt,B):3
     [V__bk>=3] 

### Cost equations --> "Loop" of eval_inflate_block_start/4 
* CEs [51] --> Loop 39 
* CEs [50] --> Loop 40 
* CEs [49] --> Loop 41 

#### Loops of eval_inflate_block_start/4 
* Loop 39: eval_inflate_block_start(V__bb,V__bk,V__incnt,B) [V__bk>=3] 
* Loop 40: eval_inflate_block_start(V__bb,V__bk,V__incnt,B) [0>=V__bk] 
* Loop 41: eval_inflate_block_start(V__bb,V__bk,V__incnt,B) [V__bk>=1,2>=V__bk] 

### Ranking functions of CR eval_inflate_block_start(V__bb,V__bk,V__incnt,B) 

#### Partial ranking functions of CR eval_inflate_block_start(V__bb,V__bk,V__incnt,B) 


### Resulting Chains:eval_inflate_block_start(V__bb,V__bk,V__incnt,B) 
* [41]
* [40]
* [39]


### Merging Chains  eval_inflate_block_start/4 into  External patterns of execution 
* [[41]] --> 1 
* [[40]] --> 2 
* [[39]] --> 3 


Computing Bounds
=====================================

#### Cost of loops [19] 

 * loop 19:eval_inflate_block_bb1_in(V__bb,V__bk,V__incnt,V_k_0,B,C,D,E,F) -> [eval_inflate_block_bb1_in(V__bb',V__bk',V__incnt',V_k_0',B',C',D',E',F')] 
1
#### Cost of phase [19]:eval_inflate_block_bb1_in(V__bb,V__bk,V__incnt,V_k_0,B,C,D,E,F) -> [eval_inflate_block_bb1_in(V__bb',V__bk',V__incnt',V_k_0',B',C',D',E',F')] 
1*it(19)+0
  Such that:it(19) =< -V_k_0/8+1/8
it(19) =< -V_k_0/8+V_k_0'/8

#### Cost of phase [19]:eval_inflate_block_bb1_in(V__bb,V__bk,V__incnt,V_k_0,B,C,D,E,F) -> [eval_inflate_block_bb1_in(V__bb',V__bk',V__incnt',V_k_0',B',C',D',E',F')] 
1*it(19)+0
  Such that:it(19) =< -V_k_0/8+1/8
it(19) =< -V_k_0/8+V_k_0'/8

#### Cost of chains of eval_inflate_block_bb1_in(V__bb,V__bk,V__incnt,V_k_0,B,C,D,E,F):
* Chain [[19],21]: 1*it(19)+0
  Such that:it(19) =< -V_k_0/8

  with precondition: [B=2,0>=V_k_0+8,V_k_0>=V__bk] 

* Chain [[19],20]: 1*it(19)+0
  Such that:it(19) =< -V_k_0/8+1/8

  with precondition: [B=7,7>=F,F>=0,V_k_0>=V__bk,F>=V_k_0+7] 

* Chain [21]: 0
  with precondition: [B=2,0>=V_k_0,V_k_0>=V__bk] 

* Chain [20]: 0
  with precondition: [B=7,V_k_0=F+1,V_k_0>=1,V_k_0>=V__bk] 


#### Cost of loops [22] 

 * loop 22:eval_inflate_block_bb6_in(V__bb,V__bk,V__incnt,V_k_1,B,C,D,E) -> [eval_inflate_block_bb6_in(V__bb',V__bk',V__incnt',V_k_1',B',C',D',E')] 
1
#### Cost of phase [22]:eval_inflate_block_bb6_in(V__bb,V__bk,V__incnt,V_k_1,B,C,D,E) -> [eval_inflate_block_bb6_in(V__bb',V__bk',V__incnt',V_k_1',B',C',D',E')] 
1*it(22)+0
  Such that:it(22) =< -V_k_1/8+1/4
it(22) =< -V_k_1/8+V_k_1'/8

#### Cost of phase [22]:eval_inflate_block_bb6_in(V__bb,V__bk,V__incnt,V_k_1,B,C,D,E) -> [eval_inflate_block_bb6_in(V__bb',V__bk',V__incnt',V_k_1',B',C',D',E')] 
1*it(22)+0
  Such that:it(22) =< -V_k_1/8+1/4
it(22) =< -V_k_1/8+V_k_1'/8

#### Cost of phase [22]:eval_inflate_block_bb6_in(V__bb,V__bk,V__incnt,V_k_1,B,C,D,E) -> [eval_inflate_block_bb6_in(V__bb',V__bk',V__incnt',V_k_1',B',C',D',E')] 
1*it(22)+0
  Such that:it(22) =< -V_k_1/8+1/4
it(22) =< -V_k_1/8+V_k_1'/8

#### Cost of phase [22]:eval_inflate_block_bb6_in(V__bb,V__bk,V__incnt,V_k_1,B,C,D,E) -> [eval_inflate_block_bb6_in(V__bb',V__bk',V__incnt',V_k_1',B',C',D',E')] 
1*it(22)+0
  Such that:it(22) =< -V_k_1/8+1/4
it(22) =< -V_k_1/8+V_k_1'/8

#### Cost of phase [22]:eval_inflate_block_bb6_in(V__bb,V__bk,V__incnt,V_k_1,B,C,D,E) -> [eval_inflate_block_bb6_in(V__bb',V__bk',V__incnt',V_k_1',B',C',D',E')] 
1*it(22)+0
  Such that:it(22) =< -V_k_1/8+1/4
it(22) =< -V_k_1/8+V_k_1'/8

#### Cost of chains of eval_inflate_block_bb6_in(V__bb,V__bk,V__incnt,V_k_1,B,C,D,E):
* Chain [[22],27]: 1*it(22)+0
  Such that:it(22) =< -V_k_1/8+1/8

  with precondition: [B=2,0>=V_k_1+7] 

* Chain [[22],26]: 1*it(22)+0
  Such that:it(22) =< -V_k_1/8+1/4

  with precondition: [B=3,V_k_1+8*V__incnt=8*E+D+2,7>=D,D>=0,D>=V_k_1+6] 

* Chain [[22],25]: 1*it(22)+0
  Such that:it(22) =< -V_k_1/8+1/4

  with precondition: [B=4,1>=V_k_1] 

* Chain [[22],24]: 1*it(22)+0
  Such that:it(22) =< -V_k_1/8+1/4

  with precondition: [B=5,V_k_1+8*V__incnt=8*E+D+2,7>=D,D>=0,D>=V_k_1+6] 

* Chain [[22],23]: 1*it(22)+0
  Such that:it(22) =< -V_k_1/8+1/4

  with precondition: [B=6,V_k_1+8*V__incnt=8*E+D+2,7>=D,D>=0,D>=V_k_1+6] 

* Chain [27]: 0
  with precondition: [B=2,1>=V_k_1] 

* Chain [26]: 0
  with precondition: [B=3,E=V__incnt,V_k_1=D+2,V_k_1>=2] 

* Chain [25]: 0
  with precondition: [B=4,V_k_1>=2] 

* Chain [24]: 0
  with precondition: [B=5,E=V__incnt,V_k_1=D+2,V_k_1>=2] 

* Chain [23]: 0
  with precondition: [B=6,E=V__incnt,V_k_1=D+2,V_k_1>=2] 


#### Cost of chains of loop_cont_eval_inflate_block_bb6_in(E,A,B,C,D):
* Chain [32]: 0
  with precondition: [E=2] 

* Chain [31]: 0
  with precondition: [E=3] 

* Chain [30]: 0
  with precondition: [E=4] 

* Chain [29]: 0
  with precondition: [E=5] 

* Chain [28]: 0
  with precondition: [E=6] 


#### Cost of chains of loop_cont_eval_inflate_block_bb1_in(F,A,B,C,D,E):
* Chain [35]: 0
  with precondition: [F=2] 

* Chain [34]: 1*s(3)+4*s(4)+1
  Such that:s(3) =< -D/8+1/8
aux(1) =< -D/8+1/4
s(4) =< aux(1)

  with precondition: [F=7,1>=D] 

* Chain [33]: 1
  with precondition: [F=7,D>=2] 


#### Cost of chains of eval_inflate_block_bb0_in(V__bb,V__bk,V__incnt,B):
* Chain [38]: 1*s(8)+4*s(10)+2
  Such that:s(8) =< -V__bk/8+1/4
s(9) =< -V__bk/8+3/8
s(10) =< s(9)

  with precondition: [2>=V__bk,V__bk>=1] 

* Chain [37]: 6*s(11)+2*s(12)+2
  Such that:aux(3) =< -V__bk/8
aux(4) =< -V__bk/8+1/8
s(11) =< aux(3)
s(12) =< aux(4)

  with precondition: [0>=V__bk] 

* Chain [36]: 2
  with precondition: [V__bk>=3] 


#### Cost of chains of eval_inflate_block_start(V__bb,V__bk,V__incnt,B):
* Chain [41]: 1*s(17)+4*s(19)+2
  Such that:s(17) =< -V__bk/8+1/4
s(18) =< -V__bk/8+3/8
s(19) =< s(18)

  with precondition: [2>=V__bk,V__bk>=1] 

* Chain [40]: 6*s(22)+2*s(23)+2
  Such that:s(20) =< -V__bk/8
s(21) =< -V__bk/8+1/8
s(22) =< s(20)
s(23) =< s(21)

  with precondition: [0>=V__bk] 

* Chain [39]: 2
  with precondition: [V__bk>=3] 


Closed-form bounds of eval_inflate_block_start(V__bb,V__bk,V__incnt,B): 
-------------------------------------
* Chain [41] with precondition: [2>=V__bk,V__bk>=1] 
    - Upper bound: -5/8*V__bk+15/4 
    - Complexity: n 
* Chain [40] with precondition: [0>=V__bk] 
    - Upper bound: -V__bk+9/4 
    - Complexity: n 
* Chain [39] with precondition: [V__bk>=3] 
    - Upper bound: 2 
    - Complexity: constant 

### Maximum cost of eval_inflate_block_start(V__bb,V__bk,V__incnt,B): max([nat(-V__bk/8+3/8)*4+nat(-V__bk/8+1/4),nat(-V__bk/8)*6+nat(-V__bk/8+1/8)*2])+2 
Asymptotic class: n 

Time statistics: 
-------------------------------------
* Partial evaluation computed in 32 ms.
* Invariants computed in 37 ms.
   - Backward Invariants 26 ms.
   - Transitive Invariants 5 ms.
* Refinement performed in 87 ms.
* Termination proved in 5 ms.
* Upper bounds computed in 68 ms.
   - Equation cost structures 32 ms.
   - Phase cost structures 7 ms.
   - Chain cost structures 25 ms.
   - Solving cost expressions 1 ms.
* Total analysis performed in 264 ms.


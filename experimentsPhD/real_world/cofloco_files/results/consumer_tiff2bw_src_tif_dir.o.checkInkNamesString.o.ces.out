Warning: Ignored call to eval_checkInkNamesString_stop/1 in equation eval_checkInkNamesString_bb9_in/1 

Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. recursive  : [eval_checkInkNamesString_bb3_in/3]
1. recursive  : [eval_checkInkNamesString_bb2_in/3,loop_cont_eval_checkInkNamesString_bb3_in/4]
2. non_recursive  : [eval_checkInkNamesString_bb9_in/1]
3. non_recursive  : [eval_checkInkNamesString_21/1]
4. non_recursive  : [eval_checkInkNamesString_20/3]
5. non_recursive  : [eval_checkInkNamesString_bb8_in/2]
6. non_recursive  : [loop_cont_eval_checkInkNamesString_bb2_in/3]
7. non_recursive  : [eval_checkInkNamesString_bb0_in/1]
8. non_recursive  : [eval_checkInkNamesString_start/2]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into eval_checkInkNamesString_bb3_in/3
1. SCC is partially evaluated into eval_checkInkNamesString_bb2_in/3
2. SCC is completely evaluated into other SCCs
3. SCC is completely evaluated into other SCCs
4. SCC is completely evaluated into other SCCs
5. SCC is completely evaluated into other SCCs
6. SCC is partially evaluated into loop_cont_eval_checkInkNamesString_bb2_in/3
7. SCC is partially evaluated into eval_checkInkNamesString_bb0_in/1
8. SCC is partially evaluated into eval_checkInkNamesString_start/2

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations eval_checkInkNamesString_bb3_in/3 
* CE 12 is refined into CE [13] 
* CE 10 is refined into CE [14] 
* CE 11 is refined into CE [15] 


#### Refined cost equations eval_checkInkNamesString_bb3_in/3 
* CE 13: eval_checkInkNamesString_bb3_in(V_i_0,B,C) = 0
     [V_i_0>=1,V_i_0=C+1,B=3] 
* CE 14: eval_checkInkNamesString_bb3_in(A,B,A) = 0
     [A>=1,B=2] 
* CE 15: eval_checkInkNamesString_bb3_in(V_i_0,B,C) = 1+ eval_checkInkNamesString_bb3_in(V_i_0,B,C)
     [B>=2,V_i_0>=1,3>=B] 

### Cost equations --> "Loop" of eval_checkInkNamesString_bb3_in/3 
* CEs [15] --> Loop 11 
* CEs [13] --> Loop 12 
* CEs [14] --> Loop 13 

#### Loops of eval_checkInkNamesString_bb3_in/3 
* Loop 11: eval_checkInkNamesString_bb3_in(V_i_0,B,C)->  eval_checkInkNamesString_bb3_in(V_i_0,B,C)
                  [B>=2,V_i_0>=1,3>=B] 
* Loop 12: eval_checkInkNamesString_bb3_in(V_i_0,B,C) [V_i_0>=1,V_i_0=C+1,B=3] 
* Loop 13: eval_checkInkNamesString_bb3_in(A,B,A) [A>=1,B=2] 

### Ranking functions of CR eval_checkInkNamesString_bb3_in(V_i_0,B,C) 

#### Partial ranking functions of CR eval_checkInkNamesString_bb3_in(V_i_0,B,C) 


### Resulting Chains:eval_checkInkNamesString_bb3_in(V_i_0,B,C) 
* [[11]]...
* [[11],13]
* [[11],12]
* [13]
* [12]


### Merging Chains  eval_checkInkNamesString_bb3_in/3 into  External patterns of execution 
* [[13],[13,[11]]] --> 1 
* [[12],[12,[11]]] --> 2 
* [[[11]]] --> 3 


### Specialization of cost equations eval_checkInkNamesString_bb2_in/3 
* CE 7 is refined into CE [16] 
* CE 6 is refined into CE [17,18] 
* CE 5 is refined into CE [19,20] 


#### Refined cost equations eval_checkInkNamesString_bb2_in/3 
* CE 16: eval_checkInkNamesString_bb2_in(V_i_0,B,C) = 0
     [0>=V_i_0,B=4] 
* CE 17: eval_checkInkNamesString_bb2_in(A,B,A) = 1+ eval_checkInkNamesString_bb3_in(A,C,A):1
     [A>=1,C=2,B=2] 
* CE 18: eval_checkInkNamesString_bb2_in(V_i_0,B,C) = 1+ eval_checkInkNamesString_bb3_in(V_i_0,D,C):3
     [V_i_0>=1,D=2,B=2] 
* CE 19: eval_checkInkNamesString_bb2_in(V_i_0,B,C) = 2+ eval_checkInkNamesString_bb3_in(D,E,F):2+ eval_checkInkNamesString_bb2_in(F,B,C)
     [F>=0,F+1=D,F+1=V_i_0,E=3] 
* CE 20: eval_checkInkNamesString_bb2_in(V_i_0,B,C) = 2+ eval_checkInkNamesString_bb3_in(V_i_0,D,E):3
     [V_i_0>=1,D=3] 

### Cost equations --> "Loop" of eval_checkInkNamesString_bb2_in/3 
* CEs [18,20] --> Loop 14 
* CEs [19] --> Loop 15 
* CEs [16] --> Loop 16 
* CEs [17] --> Loop 17 

#### Loops of eval_checkInkNamesString_bb2_in/3 
* Loop 14: eval_checkInkNamesString_bb2_in(V_i_0,B,C) [V_i_0>=1] 
* Loop 15: eval_checkInkNamesString_bb2_in(V_i_0,B,C)->  eval_checkInkNamesString_bb2_in(V_i_0',B,C)
                  [V_i_0'>=0,V_i_0'+1=V_i_0] 
* Loop 16: eval_checkInkNamesString_bb2_in(V_i_0,B,C) [0>=V_i_0,B=4] 
* Loop 17: eval_checkInkNamesString_bb2_in(A,B,A) [A>=1,B=2] 

### Ranking functions of CR eval_checkInkNamesString_bb2_in(V_i_0,B,C) 
* RF of phase [15]: [V_i_0]

#### Partial ranking functions of CR eval_checkInkNamesString_bb2_in(V_i_0,B,C) 
* Partial RF of phase [15]:
  - RF of loop [15:1]:
    V_i_0


### Resulting Chains:eval_checkInkNamesString_bb2_in(V_i_0,B,C) 
* [[15],17]
* [[15],16]
* [[15],14]...
* [17]
* [16]
* [14]...


### Merging Chains  eval_checkInkNamesString_bb2_in/3 into  External patterns of execution 
* [[17]] --> 1 
* [[17,[15]]] --> 2 
* [[16]] --> 3 
* [[16,[15]]] --> 4 
* [[14]] --> 5 
* [[14,[15]]] --> 6 


### Specialization of cost equations loop_cont_eval_checkInkNamesString_bb2_in/3 
* CE 8 is refined into CE [21] 
* CE 9 is refined into CE [22] 


#### Refined cost equations loop_cont_eval_checkInkNamesString_bb2_in/3 
* CE 21: loop_cont_eval_checkInkNamesString_bb2_in(D,A,B) = 0
     [D=4] 
* CE 22: loop_cont_eval_checkInkNamesString_bb2_in(D,A,B) = 0
     [D=2] 

### Cost equations --> "Loop" of loop_cont_eval_checkInkNamesString_bb2_in/3 
* CEs [21] --> Loop 18 
* CEs [22] --> Loop 19 

#### Loops of loop_cont_eval_checkInkNamesString_bb2_in/3 
* Loop 18: loop_cont_eval_checkInkNamesString_bb2_in(D,A,B) [D=4] 
* Loop 19: loop_cont_eval_checkInkNamesString_bb2_in(D,A,B) [D=2] 

### Ranking functions of CR loop_cont_eval_checkInkNamesString_bb2_in(D,A,B) 

#### Partial ranking functions of CR loop_cont_eval_checkInkNamesString_bb2_in(D,A,B) 


### Resulting Chains:loop_cont_eval_checkInkNamesString_bb2_in(D,A,B) 
* [19]
* [18]


### Merging Chains  loop_cont_eval_checkInkNamesString_bb2_in/3 into  External patterns of execution 
* [[19]] --> 1 
* [[18]] --> 2 


### Specialization of cost equations eval_checkInkNamesString_bb0_in/1 
* CE 3 is refined into CE [23,24,25,26,27,28] 
* CE 4 is refined into CE [29] 


#### Refined cost equations eval_checkInkNamesString_bb0_in/1 
* CE 23: eval_checkInkNamesString_bb0_in(B) = 1+ eval_checkInkNamesString_bb2_in(C,D,C):1+ loop_cont_eval_checkInkNamesString_bb2_in(E,C,B):1
     [C>=1,E=2,D=2] 
* CE 24: eval_checkInkNamesString_bb0_in(B) = 1+ eval_checkInkNamesString_bb2_in(C,D,E):2+ loop_cont_eval_checkInkNamesString_bb2_in(F,E,B):1
     [C>=E+1,E>=1,F=2,D=2] 
* CE 25: eval_checkInkNamesString_bb0_in(B) = 1+ eval_checkInkNamesString_bb2_in(C,D,E):3+ loop_cont_eval_checkInkNamesString_bb2_in(F,E,B):2
     [0>=C,F=4,D=4] 
* CE 26: eval_checkInkNamesString_bb0_in(B) = 1+ eval_checkInkNamesString_bb2_in(C,D,E):4+ loop_cont_eval_checkInkNamesString_bb2_in(F,E,B):2
     [C>=1,F=4,D=4] 
* CE 27: eval_checkInkNamesString_bb0_in(B) = 1+ eval_checkInkNamesString_bb2_in(C,D,E):5
     [C>=1] 
* CE 28: eval_checkInkNamesString_bb0_in(B) = 1+ eval_checkInkNamesString_bb2_in(C,D,E):6
     [C>=2] 
* CE 29: eval_checkInkNamesString_bb0_in(B) = 0
     [] 

### Cost equations --> "Loop" of eval_checkInkNamesString_bb0_in/1 
* CEs [23,24,25,26,29] --> Loop 20 
* CEs [27,28] --> Loop 21 

#### Loops of eval_checkInkNamesString_bb0_in/1 
* Loop 20: eval_checkInkNamesString_bb0_in(B) [] 
* Loop 21: eval_checkInkNamesString_bb0_in(B) [] 

### Ranking functions of CR eval_checkInkNamesString_bb0_in(B) 

#### Partial ranking functions of CR eval_checkInkNamesString_bb0_in(B) 


### Resulting Chains:eval_checkInkNamesString_bb0_in(B) 
* [21]...
* [20]


### Merging Chains  eval_checkInkNamesString_bb0_in/1 into  External patterns of execution 
* [[20]] --> 1 
* [[21]] --> 2 


### Specialization of cost equations eval_checkInkNamesString_start/2 
* CE 2 is refined into CE [30,31] 


#### Refined cost equations eval_checkInkNamesString_start/2 
* CE 30: eval_checkInkNamesString_start(V_slen,B) = 0+ eval_checkInkNamesString_bb0_in(B):1
     [] 
* CE 31: eval_checkInkNamesString_start(V_slen,B) = 0+ eval_checkInkNamesString_bb0_in(B):2
     [] 

### Cost equations --> "Loop" of eval_checkInkNamesString_start/2 
* CEs [31] --> Loop 22 
* CEs [30] --> Loop 23 

#### Loops of eval_checkInkNamesString_start/2 
* Loop 22: eval_checkInkNamesString_start(V_slen,B) [] 
* Loop 23: eval_checkInkNamesString_start(V_slen,B) [] 

### Ranking functions of CR eval_checkInkNamesString_start(V_slen,B) 

#### Partial ranking functions of CR eval_checkInkNamesString_start(V_slen,B) 


### Resulting Chains:eval_checkInkNamesString_start(V_slen,B) 
* [23]
* [22]...


### Merging Chains  eval_checkInkNamesString_start/2 into  External patterns of execution 
* [[23]] --> 1 
* [[22]] --> 2 


Computing Bounds
=====================================

#### Cost of loops [11] 

 * loop 11:eval_checkInkNamesString_bb3_in(V_i_0,B,C) -> [eval_checkInkNamesString_bb3_in(V_i_0',B',C')] 
1
#### Cost of phase [11]:eval_checkInkNamesString_bb3_in(V_i_0,B,C) -> [eval_checkInkNamesString_bb3_in(V_i_0',B',C')] 
1*it(11)+0
#### Cost of phase [11]:eval_checkInkNamesString_bb3_in(V_i_0,B,C) -> [eval_checkInkNamesString_bb3_in(V_i_0',B',C')] 
1*it(11)+0
#### Cost of phase [11]:eval_checkInkNamesString_bb3_in(V_i_0,B,C) -> [eval_checkInkNamesString_bb3_in(V_i_0',B',C')] 
1*it(11)+0
#### Cost of chains of eval_checkInkNamesString_bb3_in(V_i_0,B,C):
* Chain [[11]]...: 1*it(11)+0
  with precondition: [V_i_0>=1,B>=2,3>=B] 

* Chain [[11],13]: 1*it(11)+0
  with precondition: [B=2,V_i_0=C,V_i_0>=1] 

* Chain [[11],12]: 1*it(11)+0
  with precondition: [B=3,V_i_0=C+1,V_i_0>=1] 

* Chain [13]: 0
  with precondition: [B=2,V_i_0=C,V_i_0>=1] 

* Chain [12]: 0
  with precondition: [B=3,V_i_0=C+1,V_i_0>=1] 


#### Cost of loops [15] 

 * loop 15:eval_checkInkNamesString_bb2_in(V_i_0,B,C) -> [eval_checkInkNamesString_bb2_in(V_i_0',B',C')] 
1*s(5)+2
#### Cost of phase [15]:eval_checkInkNamesString_bb2_in(V_i_0,B,C) -> [eval_checkInkNamesString_bb2_in(V_i_0',B',C')] 
2*it(15)+1*s(6)+0
  Such that:it(15) =< V_i_0
it(15) =< V_i_0-V_i_0'

#### Cost of phase [15]:eval_checkInkNamesString_bb2_in(V_i_0,B,C) -> [eval_checkInkNamesString_bb2_in(V_i_0',B',C')] 
2*it(15)+1*s(6)+0
  Such that:it(15) =< V_i_0
it(15) =< V_i_0-V_i_0'

#### Cost of phase [15]:eval_checkInkNamesString_bb2_in(V_i_0,B,C) -> [eval_checkInkNamesString_bb2_in(V_i_0',B',C')] 
2*it(15)+1*s(6)+0
  Such that:it(15) =< V_i_0
it(15) =< V_i_0-V_i_0'

#### Cost of chains of eval_checkInkNamesString_bb2_in(V_i_0,B,C):
* Chain [[15],17]: 2*it(15)+2*s(3)+1
  Such that:it(15) =< V_i_0-C

  with precondition: [B=2,C>=1,V_i_0>=C+1] 

* Chain [[15],16]: 2*it(15)+1*s(6)+0
  Such that:it(15) =< V_i_0

  with precondition: [B=4,V_i_0>=1] 

* Chain [[15],14]...: 2*aux(3)+2*it(15)+0
  Such that:it(15) =< V_i_0

  with precondition: [V_i_0>=2] 

* Chain [17]: 1*s(3)+1
  with precondition: [B=2,V_i_0=C,V_i_0>=1] 

* Chain [16]: 0
  with precondition: [B=4,0>=V_i_0] 

* Chain [14]...: 1*aux(3)+0
  with precondition: [V_i_0>=1] 


#### Cost of chains of loop_cont_eval_checkInkNamesString_bb2_in(D,A,B):
* Chain [19]: 0
  with precondition: [D=2] 

* Chain [18]: 0
  with precondition: [D=4] 


#### Cost of chains of eval_checkInkNamesString_bb0_in(B):
* Chain [21]...: 1*aux(4)+0
  with precondition: [] 

* Chain [20]: 1*aux(5)+0
  with precondition: [] 


#### Cost of chains of eval_checkInkNamesString_start(V_slen,B):
* Chain [23]: 1*s(17)+0
  with precondition: [] 

* Chain [22]...: 1*s(18)+0
  with precondition: [] 


Closed-form bounds of eval_checkInkNamesString_start(V_slen,B): 
-------------------------------------
* Chain [23] with precondition: [] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [22]... with precondition: [] 
    - Upper bound: inf 
    - Complexity: infinity 

### Maximum cost of eval_checkInkNamesString_start(V_slen,B): inf 
Asymptotic class: infinity 

Time statistics: 
-------------------------------------
* Partial evaluation computed in 26 ms.
* Invariants computed in 47 ms.
   - Backward Invariants 31 ms.
   - Transitive Invariants 6 ms.
* Refinement performed in 84 ms.
* Termination proved in 8 ms.
* Upper bounds computed in 70 ms.
   - Equation cost structures 24 ms.
   - Phase cost structures 13 ms.
   - Chain cost structures 31 ms.
   - Solving cost expressions 0 ms.
* Total analysis performed in 281 ms.


Warning: Ignored call to eval_alloc_add_chunk_stop/1 in equation eval_alloc_add_chunk_bb9_in/1 

Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. recursive  : [eval_alloc_add_chunk_bb4_in/4]
1. non_recursive  : [eval_alloc_add_chunk_bb9_in/1]
2. non_recursive  : [eval_alloc_add_chunk_27/1]
3. non_recursive  : [eval_alloc_add_chunk_26/1]
4. non_recursive  : [eval_alloc_add_chunk_25/1]
5. non_recursive  : [eval_alloc_add_chunk_33/1]
6. non_recursive  : [eval_alloc_add_chunk_32/1]
7. non_recursive  : [eval_alloc_add_chunk_31/1]
8. non_recursive  : [eval_alloc_add_chunk_30/1]
9. non_recursive  : [eval_alloc_add_chunk_29/2]
10. non_recursive  : [eval_alloc_add_chunk_24/2]
11. non_recursive  : [eval_alloc_add_chunk_23/2]
12. non_recursive  : [loop_cont_eval_alloc_add_chunk_bb4_in/3]
13. non_recursive  : [eval_alloc_add_chunk_1/3]
14. non_recursive  : [eval_alloc_add_chunk_0/3]
15. non_recursive  : [eval_alloc_add_chunk_bb0_in/3]
16. non_recursive  : [eval_alloc_add_chunk_start/3]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into eval_alloc_add_chunk_bb4_in/4
1. SCC is completely evaluated into other SCCs
2. SCC is completely evaluated into other SCCs
3. SCC is completely evaluated into other SCCs
4. SCC is completely evaluated into other SCCs
5. SCC is completely evaluated into other SCCs
6. SCC is completely evaluated into other SCCs
7. SCC is completely evaluated into other SCCs
8. SCC is completely evaluated into other SCCs
9. SCC is completely evaluated into other SCCs
10. SCC is partially evaluated into eval_alloc_add_chunk_24/2
11. SCC is completely evaluated into other SCCs
12. SCC is completely evaluated into other SCCs
13. SCC is partially evaluated into eval_alloc_add_chunk_1/3
14. SCC is completely evaluated into other SCCs
15. SCC is completely evaluated into other SCCs
16. SCC is partially evaluated into eval_alloc_add_chunk_start/3

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations eval_alloc_add_chunk_bb4_in/4 
* CE 5 is refined into CE [7] 


#### Refined cost equations eval_alloc_add_chunk_bb4_in/4 
* CE 7: eval_alloc_add_chunk_bb4_in(A,B,C,A) = 0
     [C=2] 

### Cost equations --> "Loop" of eval_alloc_add_chunk_bb4_in/4 
* CEs [7] --> Loop 5 

#### Loops of eval_alloc_add_chunk_bb4_in/4 
* Loop 5: eval_alloc_add_chunk_bb4_in(A,B,C,A) [C=2] 

### Ranking functions of CR eval_alloc_add_chunk_bb4_in(V_has_strings,V_elt_size_0,B,C) 

#### Partial ranking functions of CR eval_alloc_add_chunk_bb4_in(V_has_strings,V_elt_size_0,B,C) 


### Resulting Chains:eval_alloc_add_chunk_bb4_in(V_has_strings,V_elt_size_0,B,C) 
* [5]


### Merging Chains  eval_alloc_add_chunk_bb4_in/4 into  External patterns of execution 
* [[5]] --> 1 


### Specialization of cost equations eval_alloc_add_chunk_24/2 
* CE 6 is refined into CE [8] 


#### Refined cost equations eval_alloc_add_chunk_24/2 
* CE 8: eval_alloc_add_chunk_24(V_has_strings,B) = 0
     [] 

### Cost equations --> "Loop" of eval_alloc_add_chunk_24/2 
* CEs [8] --> Loop 6 

#### Loops of eval_alloc_add_chunk_24/2 
* Loop 6: eval_alloc_add_chunk_24(V_has_strings,B) [] 

### Ranking functions of CR eval_alloc_add_chunk_24(V_has_strings,B) 

#### Partial ranking functions of CR eval_alloc_add_chunk_24(V_has_strings,B) 


### Resulting Chains:eval_alloc_add_chunk_24(V_has_strings,B) 
* [6]


### Merging Chains  eval_alloc_add_chunk_24/2 into  External patterns of execution 
* [[6]] --> 1 


### Specialization of cost equations eval_alloc_add_chunk_1/3 
* CE 3 is refined into CE [9] 
* CE 4 is refined into CE [10] 


#### Refined cost equations eval_alloc_add_chunk_1/3 
* CE 9: eval_alloc_add_chunk_1(V_csize,V_has_strings,B) = 0
     [] 
* CE 10: eval_alloc_add_chunk_1(V_csize,V_has_strings,B) = 1+ eval_alloc_add_chunk_bb4_in(V_has_strings,V_csize,C,V_has_strings):1+ eval_alloc_add_chunk_24(V_has_strings,B):1
     [C=2] 

### Cost equations --> "Loop" of eval_alloc_add_chunk_1/3 
* CEs [9,10] --> Loop 7 

#### Loops of eval_alloc_add_chunk_1/3 
* Loop 7: eval_alloc_add_chunk_1(V_csize,V_has_strings,B) [] 

### Ranking functions of CR eval_alloc_add_chunk_1(V_csize,V_has_strings,B) 

#### Partial ranking functions of CR eval_alloc_add_chunk_1(V_csize,V_has_strings,B) 


### Resulting Chains:eval_alloc_add_chunk_1(V_csize,V_has_strings,B) 
* [7]


### Merging Chains  eval_alloc_add_chunk_1/3 into  External patterns of execution 
* [[7]] --> 1 


### Specialization of cost equations eval_alloc_add_chunk_start/3 
* CE 2 is refined into CE [11] 


#### Refined cost equations eval_alloc_add_chunk_start/3 
* CE 11: eval_alloc_add_chunk_start(V_csize,V_has_strings,B) = 0+ eval_alloc_add_chunk_1(V_csize,V_has_strings,B):1
     [] 

### Cost equations --> "Loop" of eval_alloc_add_chunk_start/3 
* CEs [11] --> Loop 8 

#### Loops of eval_alloc_add_chunk_start/3 
* Loop 8: eval_alloc_add_chunk_start(V_csize,V_has_strings,B) [] 

### Ranking functions of CR eval_alloc_add_chunk_start(V_csize,V_has_strings,B) 

#### Partial ranking functions of CR eval_alloc_add_chunk_start(V_csize,V_has_strings,B) 


### Resulting Chains:eval_alloc_add_chunk_start(V_csize,V_has_strings,B) 
* [8]


### Merging Chains  eval_alloc_add_chunk_start/3 into  External patterns of execution 
* [[8]] --> 1 


Computing Bounds
=====================================

#### Cost of chains of eval_alloc_add_chunk_bb4_in(V_has_strings,V_elt_size_0,B,C):
* Chain [5]: 0
  with precondition: [B=2,C=V_has_strings] 


#### Cost of chains of eval_alloc_add_chunk_24(V_has_strings,B):
* Chain [6]: 0
  with precondition: [] 


#### Cost of chains of eval_alloc_add_chunk_1(V_csize,V_has_strings,B):
* Chain [7]: 1
  with precondition: [] 


#### Cost of chains of eval_alloc_add_chunk_start(V_csize,V_has_strings,B):
* Chain [8]: 1
  with precondition: [] 


Closed-form bounds of eval_alloc_add_chunk_start(V_csize,V_has_strings,B): 
-------------------------------------
* Chain [8] with precondition: [] 
    - Upper bound: 1 
    - Complexity: constant 

### Maximum cost of eval_alloc_add_chunk_start(V_csize,V_has_strings,B): 1 
Asymptotic class: constant 

Time statistics: 
-------------------------------------
* Partial evaluation computed in 5 ms.
* Invariants computed in 1 ms.
   - Backward Invariants 0 ms.
   - Transitive Invariants 0 ms.
* Refinement performed in 3 ms.
* Termination proved in 1 ms.
* Upper bounds computed in 2 ms.
   - Equation cost structures 0 ms.
   - Phase cost structures 0 ms.
   - Chain cost structures 0 ms.
   - Solving cost expressions 0 ms.
* Total analysis performed in 22 ms.


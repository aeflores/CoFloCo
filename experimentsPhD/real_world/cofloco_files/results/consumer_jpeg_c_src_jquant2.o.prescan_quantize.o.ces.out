Warning: Ignored call to eval_prescan_quantize_stop/1 in equation loop_cont_eval_prescan_quantize_bb1_in/2 

Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. recursive  : [eval_prescan_quantize_bb3_in/8,eval_prescan_quantize_bb6_in/8]
1. recursive  : [eval_prescan_quantize_bb1_in/4,loop_cont_eval_prescan_quantize_bb3_in/5]
2. non_recursive  : [loop_cont_eval_prescan_quantize_bb1_in/2]
3. non_recursive  : [eval_prescan_quantize_bb0_in/2]
4. non_recursive  : [eval_prescan_quantize_start/2]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into eval_prescan_quantize_bb3_in/8
1. SCC is partially evaluated into eval_prescan_quantize_bb1_in/4
2. SCC is completely evaluated into other SCCs
3. SCC is partially evaluated into eval_prescan_quantize_bb0_in/2
4. SCC is partially evaluated into eval_prescan_quantize_start/2

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations eval_prescan_quantize_bb3_in/8 
* CE 7 is refined into CE [8] 
* CE 6 is refined into CE [9] 


#### Refined cost equations eval_prescan_quantize_bb3_in/8 
* CE 8: eval_prescan_quantize_bb3_in(A,B,C,D,E,A,B,F) = 0
     [B>=D,A>=C+1,0>=D,C+1=F,E=2] 
* CE 9: eval_prescan_quantize_bb3_in(V_num_rows,V_6,V_row_0,V_col_0,B,C,D,E) = 1+ eval_prescan_quantize_bb3_in(V_num_rows,V_6,V_row_0,F,G,C,D,E)
     [V_6>=V_col_0,V_num_rows>=V_row_0+1,V_col_0>=1,V_col_0=F+1,G=2,B=2] 

### Cost equations --> "Loop" of eval_prescan_quantize_bb3_in/8 
* CEs [9] --> Loop 7 
* CEs [8] --> Loop 8 

#### Loops of eval_prescan_quantize_bb3_in/8 
* Loop 7: eval_prescan_quantize_bb3_in(V_num_rows,V_6,V_row_0,V_col_0,B,C,D,E)->  eval_prescan_quantize_bb3_in(V_num_rows,V_6,V_row_0,V_col_0',B',C,D,E)
                  [V_6>=V_col_0,V_num_rows>=V_row_0+1,V_col_0>=1,V_col_0=V_col_0'+1,B'=2,B=2] 
* Loop 8: eval_prescan_quantize_bb3_in(A,B,C,D,E,A,B,F) [B>=D,A>=C+1,0>=D,C+1=F,E=2] 

### Ranking functions of CR eval_prescan_quantize_bb3_in(V_num_rows,V_6,V_row_0,V_col_0,B,C,D,E) 
* RF of phase [7]: [V_col_0]

#### Partial ranking functions of CR eval_prescan_quantize_bb3_in(V_num_rows,V_6,V_row_0,V_col_0,B,C,D,E) 
* Partial RF of phase [7]:
  - RF of loop [7:1]:
    V_col_0


### Resulting Chains:eval_prescan_quantize_bb3_in(V_num_rows,V_6,V_row_0,V_col_0,B,C,D,E) 
* [[7],8]
* [8]


### Merging Chains  eval_prescan_quantize_bb3_in/8 into  External patterns of execution 
* [[8]] --> 1 
* [[8,[7]]] --> 2 


### Specialization of cost equations eval_prescan_quantize_bb1_in/4 
* CE 5 is refined into CE [10] 
* CE 4 is refined into CE [11,12] 


#### Refined cost equations eval_prescan_quantize_bb1_in/4 
* CE 10: eval_prescan_quantize_bb1_in(V_num_rows,V_6,V_row_0,B) = 0
     [V_row_0>=V_num_rows,B=3] 
* CE 11: eval_prescan_quantize_bb1_in(V_num_rows,V_6,V_row_0,B) = 2+ eval_prescan_quantize_bb3_in(V_num_rows,V_6,C,V_6,D,V_num_rows,V_6,E):1+ eval_prescan_quantize_bb1_in(V_num_rows,V_6,E,F)
     [V_num_rows>=E,0>=V_6,E=C+1,E=V_row_0+1,F=3,D=2,B=3] 
* CE 12: eval_prescan_quantize_bb1_in(V_num_rows,V_6,V_row_0,B) = 2+ eval_prescan_quantize_bb3_in(V_num_rows,V_6,C,V_6,D,V_num_rows,V_6,E):2+ eval_prescan_quantize_bb1_in(V_num_rows,V_6,E,F)
     [V_num_rows>=E,V_6>=1,E=C+1,E=V_row_0+1,F=3,D=2,B=3] 

### Cost equations --> "Loop" of eval_prescan_quantize_bb1_in/4 
* CEs [12] --> Loop 9 
* CEs [11] --> Loop 10 
* CEs [10] --> Loop 11 

#### Loops of eval_prescan_quantize_bb1_in/4 
* Loop 9: eval_prescan_quantize_bb1_in(V_num_rows,V_6,V_row_0,B)->  eval_prescan_quantize_bb1_in(V_num_rows,V_6,V_row_0',B')
                  [V_num_rows>=V_row_0+1,V_6>=1,V_row_0+1=V_row_0',B'=3,B=3] 
* Loop 10: eval_prescan_quantize_bb1_in(V_num_rows,V_6,V_row_0,B)->  eval_prescan_quantize_bb1_in(V_num_rows,V_6,V_row_0',B')
                  [V_num_rows>=V_row_0+1,0>=V_6,V_row_0+1=V_row_0',B'=3,B=3] 
* Loop 11: eval_prescan_quantize_bb1_in(V_num_rows,V_6,V_row_0,B) [V_row_0>=V_num_rows,B=3] 

### Ranking functions of CR eval_prescan_quantize_bb1_in(V_num_rows,V_6,V_row_0,B) 
* RF of phase [9]: [V_num_rows-V_row_0]
* RF of phase [10]: [V_num_rows-V_row_0]

#### Partial ranking functions of CR eval_prescan_quantize_bb1_in(V_num_rows,V_6,V_row_0,B) 
* Partial RF of phase [9]:
  - RF of loop [9:1]:
    V_num_rows-V_row_0
* Partial RF of phase [10]:
  - RF of loop [10:1]:
    V_num_rows-V_row_0


### Resulting Chains:eval_prescan_quantize_bb1_in(V_num_rows,V_6,V_row_0,B) 
* [[10],11]
* [[9],11]
* [11]


### Merging Chains  eval_prescan_quantize_bb1_in/4 into  External patterns of execution 
* [[11,[10]]] --> 1 
* [[11,[9]]] --> 2 
* [[11]] --> 3 


### Specialization of cost equations eval_prescan_quantize_bb0_in/2 
* CE 3 is refined into CE [13,14,15] 


#### Refined cost equations eval_prescan_quantize_bb0_in/2 
* CE 13: eval_prescan_quantize_bb0_in(V_num_rows,B) = 1+ eval_prescan_quantize_bb1_in(V_num_rows,C,D,E):1
     [V_num_rows>=1,0>=C,E=3,D=0] 
* CE 14: eval_prescan_quantize_bb0_in(V_num_rows,B) = 1+ eval_prescan_quantize_bb1_in(V_num_rows,C,D,E):2
     [C>=1,V_num_rows>=1,E=3,D=0] 
* CE 15: eval_prescan_quantize_bb0_in(V_num_rows,B) = 1+ eval_prescan_quantize_bb1_in(V_num_rows,C,D,E):3
     [0>=V_num_rows,E=3,D=0] 

### Cost equations --> "Loop" of eval_prescan_quantize_bb0_in/2 
* CEs [13,14] --> Loop 12 
* CEs [15] --> Loop 13 

#### Loops of eval_prescan_quantize_bb0_in/2 
* Loop 12: eval_prescan_quantize_bb0_in(V_num_rows,B) [V_num_rows>=1] 
* Loop 13: eval_prescan_quantize_bb0_in(V_num_rows,B) [0>=V_num_rows] 

### Ranking functions of CR eval_prescan_quantize_bb0_in(V_num_rows,B) 

#### Partial ranking functions of CR eval_prescan_quantize_bb0_in(V_num_rows,B) 


### Resulting Chains:eval_prescan_quantize_bb0_in(V_num_rows,B) 
* [13]
* [12]


### Merging Chains  eval_prescan_quantize_bb0_in/2 into  External patterns of execution 
* [[13]] --> 1 
* [[12]] --> 2 


### Specialization of cost equations eval_prescan_quantize_start/2 
* CE 2 is refined into CE [16,17] 


#### Refined cost equations eval_prescan_quantize_start/2 
* CE 16: eval_prescan_quantize_start(V_num_rows,B) = 0+ eval_prescan_quantize_bb0_in(V_num_rows,B):1
     [0>=V_num_rows] 
* CE 17: eval_prescan_quantize_start(V_num_rows,B) = 0+ eval_prescan_quantize_bb0_in(V_num_rows,B):2
     [V_num_rows>=1] 

### Cost equations --> "Loop" of eval_prescan_quantize_start/2 
* CEs [17] --> Loop 14 
* CEs [16] --> Loop 15 

#### Loops of eval_prescan_quantize_start/2 
* Loop 14: eval_prescan_quantize_start(V_num_rows,B) [V_num_rows>=1] 
* Loop 15: eval_prescan_quantize_start(V_num_rows,B) [0>=V_num_rows] 

### Ranking functions of CR eval_prescan_quantize_start(V_num_rows,B) 

#### Partial ranking functions of CR eval_prescan_quantize_start(V_num_rows,B) 


### Resulting Chains:eval_prescan_quantize_start(V_num_rows,B) 
* [15]
* [14]


### Merging Chains  eval_prescan_quantize_start/2 into  External patterns of execution 
* [[15]] --> 1 
* [[14]] --> 2 


Computing Bounds
=====================================

#### Cost of loops [7] 

 * loop 7:eval_prescan_quantize_bb3_in(V_num_rows,V_6,V_row_0,V_col_0,B,C,D,E) -> [eval_prescan_quantize_bb3_in(V_num_rows',V_6',V_row_0',V_col_0',B',C',D',E')] 
1
#### Cost of phase [7]:eval_prescan_quantize_bb3_in(V_num_rows,V_6,V_row_0,V_col_0,B,C,D,E) -> [eval_prescan_quantize_bb3_in(V_num_rows',V_6',V_row_0',V_col_0',B',C',D',E')] 
1*it(7)+0
  Such that:it(7) =< V_col_0
it(7) =< V_col_0-V_col_0'

#### Cost of chains of eval_prescan_quantize_bb3_in(V_num_rows,V_6,V_row_0,V_col_0,B,C,D,E):
* Chain [[7],8]: 1*it(7)+0
  Such that:it(7) =< V_col_0

  with precondition: [B=2,V_num_rows=C,V_6=D,V_row_0+1=E,V_col_0>=1,V_num_rows>=V_row_0+1,V_6>=V_col_0] 

* Chain [8]: 0
  with precondition: [B=2,V_num_rows=C,V_6=D,V_row_0+1=E,0>=V_col_0,V_num_rows>=V_row_0+1,V_6>=V_col_0] 


#### Cost of loops [10] 

 * loop 10:eval_prescan_quantize_bb1_in(V_num_rows,V_6,V_row_0,B) -> [eval_prescan_quantize_bb1_in(V_num_rows',V_6',V_row_0',B')] 
2
#### Cost of phase [10]:eval_prescan_quantize_bb1_in(V_num_rows,V_6,V_row_0,B) -> [eval_prescan_quantize_bb1_in(V_num_rows',V_6',V_row_0',B')] 
2*it(10)+0
  Such that:it(10) =< V_num_rows-V_row_0
it(10) =< V_num_rows-V_row_0-V_num_rows'+V_row_0'

#### Cost of loops [9] 

 * loop 9:eval_prescan_quantize_bb1_in(V_num_rows,V_6,V_row_0,B) -> [eval_prescan_quantize_bb1_in(V_num_rows',V_6',V_row_0',B')] 
1*s(2)+2
  Such that:s(2) =< V_6'

#### Cost of phase [9]:eval_prescan_quantize_bb1_in(V_num_rows,V_6,V_row_0,B) -> [eval_prescan_quantize_bb1_in(V_num_rows',V_6',V_row_0',B')] 
2*it(9)+1*s(3)+0
  Such that:it(9) =< V_num_rows-V_row_0
it(9) =< V_num_rows-V_row_0-V_num_rows'+V_row_0'
aux(1) =< V_6
s(3) =< it(9)*aux(1)

#### Cost of chains of eval_prescan_quantize_bb1_in(V_num_rows,V_6,V_row_0,B):
* Chain [[10],11]: 2*it(10)+0
  Such that:it(10) =< V_num_rows-V_row_0

  with precondition: [B=3,0>=V_6,V_row_0>=0,V_num_rows>=V_row_0+1] 

* Chain [[9],11]: 2*it(9)+1*s(3)+0
  Such that:it(9) =< V_num_rows-V_row_0
aux(1) =< V_6
s(3) =< it(9)*aux(1)

  with precondition: [B=3,V_6>=1,V_row_0>=0,V_num_rows>=V_row_0+1] 

* Chain [11]: 0
  with precondition: [B=3,V_row_0>=0,V_row_0>=V_num_rows] 


#### Cost of chains of eval_prescan_quantize_bb0_in(V_num_rows,B):
* Chain [13]: 1
  with precondition: [0>=V_num_rows] 

* Chain [12]: 4*s(4)+1*s(7)+1
  Such that:aux(2) =< V_num_rows
s(4) =< aux(2)

  with precondition: [V_num_rows>=1] 


#### Cost of chains of eval_prescan_quantize_start(V_num_rows,B):
* Chain [15]: 1
  with precondition: [0>=V_num_rows] 

* Chain [14]: 4*s(9)+1*s(10)+1
  Such that:s(8) =< V_num_rows
s(9) =< s(8)

  with precondition: [V_num_rows>=1] 


Closed-form bounds of eval_prescan_quantize_start(V_num_rows,B): 
-------------------------------------
* Chain [15] with precondition: [0>=V_num_rows] 
    - Upper bound: 1 
    - Complexity: constant 
* Chain [14] with precondition: [V_num_rows>=1] 
    - Upper bound: inf 
    - Complexity: infinity 

### Maximum cost of eval_prescan_quantize_start(V_num_rows,B): inf 
Asymptotic class: infinity 

Time statistics: 
-------------------------------------
* Partial evaluation computed in 8 ms.
* Invariants computed in 42 ms.
   - Backward Invariants 21 ms.
   - Transitive Invariants 13 ms.
* Refinement performed in 42 ms.
* Termination proved in 12 ms.
* Upper bounds computed in 108 ms.
   - Equation cost structures 33 ms.
   - Phase cost structures 55 ms.
   - Chain cost structures 33 ms.
   - Solving cost expressions 1 ms.
* Total analysis performed in 243 ms.


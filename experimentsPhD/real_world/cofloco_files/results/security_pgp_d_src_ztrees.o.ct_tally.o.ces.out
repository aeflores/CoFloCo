Warning: Ignored call to eval_ct_tally_stop/1 in equation eval_ct_tally_bb17_in/1 

Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. recursive  : [eval_ct_tally_bb11_in/4]
1. non_recursive  : [eval_ct_tally_bb17_in/1]
2. non_recursive  : [eval_ct_tally_bb16_in/1]
3. non_recursive  : [eval_ct_tally_bb14_in/1]
4. non_recursive  : [loop_cont_eval_ct_tally_bb11_in/2]
5. non_recursive  : [eval_ct_tally_bb8_in/4]
6. non_recursive  : [eval_ct_tally_bb6_in/5]
7. non_recursive  : [eval_ct_tally_bb5_in/6]
8. non_recursive  : [eval_ct_tally_bb0_in/6]
9. non_recursive  : [eval_ct_tally_start/11]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into eval_ct_tally_bb11_in/4
1. SCC is completely evaluated into other SCCs
2. SCC is completely evaluated into other SCCs
3. SCC is completely evaluated into other SCCs
4. SCC is partially evaluated into loop_cont_eval_ct_tally_bb11_in/2
5. SCC is partially evaluated into eval_ct_tally_bb8_in/4
6. SCC is completely evaluated into other SCCs
7. SCC is completely evaluated into other SCCs
8. SCC is partially evaluated into eval_ct_tally_bb0_in/6
9. SCC is partially evaluated into eval_ct_tally_start/11

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations eval_ct_tally_bb11_in/4 
* CE 20 is refined into CE [27] 
* CE 21 is refined into CE [28] 
* CE 23 is refined into CE [29] 
* CE 24 is refined into CE [30] 
* CE 11 is refined into CE [31] 
* CE 12 is refined into CE [32] 
* CE 14 is refined into CE [33] 
* CE 15 is refined into CE [34] 
* CE 19 is refined into CE [35] 
* CE 22 is refined into CE [36] 
* CE 10 is refined into CE [37] 
* CE 13 is refined into CE [38] 
* CE 17 is refined into CE [39] 
* CE 18 is refined into CE [40] 
* CE 8 is refined into CE [41] 
* CE 9 is refined into CE [42] 
* CE 16 is refined into CE [43] 
* CE 7 is refined into CE [44] 
* CE 6 is refined into CE [45] 


#### Refined cost equations eval_ct_tally_bb11_in/4 
* CE 27: eval_ct_tally_bb11_in(V__last_lit,V_75,V_dcode_0,B) = 0
     [V_dcode_0>=30,V_75>=1,V__last_lit>=1,B=3] 
* CE 28: eval_ct_tally_bb11_in(V__last_lit,V_75,V_dcode_0,B) = 0
     [V_dcode_0>=30,V__last_lit>=1,0>=V_75+1,B=3] 
* CE 29: eval_ct_tally_bb11_in(V__last_lit,V_75,V_dcode_0,B) = 0
     [V_dcode_0>=30,V_75>=1,0>=V__last_lit+1,B=3] 
* CE 30: eval_ct_tally_bb11_in(V__last_lit,V_75,V_dcode_0,B) = 0
     [V_dcode_0>=30,0>=V_75+1,0>=V__last_lit+1,B=3] 
* CE 31: eval_ct_tally_bb11_in(V__last_lit,V_75,V_dcode_0,B) = 0
     [V_dcode_0>=30,V_75>=1,V__last_lit>=1,B=2] 
* CE 32: eval_ct_tally_bb11_in(V__last_lit,V_75,V_dcode_0,B) = 0
     [V_dcode_0>=30,V__last_lit>=1,0>=V_75+1,B=2] 
* CE 33: eval_ct_tally_bb11_in(V__last_lit,V_75,V_dcode_0,B) = 0
     [V_dcode_0>=30,V_75>=1,0>=V__last_lit+1,B=2] 
* CE 34: eval_ct_tally_bb11_in(V__last_lit,V_75,V_dcode_0,B) = 0
     [V_dcode_0>=30,0>=V_75+1,0>=V__last_lit+1,B=2] 
* CE 35: eval_ct_tally_bb11_in(V__last_lit,V_75,V_dcode_0,B) = 0
     [V_dcode_0>=30,V__last_lit>=1,B=3,V_75=0] 
* CE 36: eval_ct_tally_bb11_in(V__last_lit,V_75,V_dcode_0,B) = 0
     [V_dcode_0>=30,0>=V__last_lit+1,B=3,V_75=0] 
* CE 37: eval_ct_tally_bb11_in(V__last_lit,V_75,V_dcode_0,B) = 0
     [V_dcode_0>=30,V__last_lit>=1,B=2,V_75=0] 
* CE 38: eval_ct_tally_bb11_in(V__last_lit,V_75,V_dcode_0,B) = 0
     [V_dcode_0>=30,0>=V__last_lit+1,B=2,V_75=0] 
* CE 39: eval_ct_tally_bb11_in(V__last_lit,V_75,V_dcode_0,B) = 0
     [V_dcode_0>=30,V_75>=1,B=3,V__last_lit=0] 
* CE 40: eval_ct_tally_bb11_in(V__last_lit,V_75,V_dcode_0,B) = 0
     [V_dcode_0>=30,0>=V_75+1,B=3,V__last_lit=0] 
* CE 41: eval_ct_tally_bb11_in(V__last_lit,V_75,V_dcode_0,B) = 0
     [V_dcode_0>=30,V_75>=1,B=2,V__last_lit=0] 
* CE 42: eval_ct_tally_bb11_in(V__last_lit,V_75,V_dcode_0,B) = 0
     [V_dcode_0>=30,0>=V_75+1,B=2,V__last_lit=0] 
* CE 43: eval_ct_tally_bb11_in(V__last_lit,V_75,V_dcode_0,B) = 0
     [V_dcode_0>=30,B=3,V_75=0,V__last_lit=0] 
* CE 44: eval_ct_tally_bb11_in(V__last_lit,V_75,V_dcode_0,B) = 0
     [V_dcode_0>=30,B=2,V_75=0,V__last_lit=0] 
* CE 45: eval_ct_tally_bb11_in(V__last_lit,V_75,V_dcode_0,B) = 1+ eval_ct_tally_bb11_in(V__last_lit,V_75,C,B)
     [V_dcode_0>=0,29>=V_dcode_0,V_dcode_0+1=C] 

### Cost equations --> "Loop" of eval_ct_tally_bb11_in/4 
* CEs [45] --> Loop 25 
* CEs [27] --> Loop 26 
* CEs [28] --> Loop 27 
* CEs [29] --> Loop 28 
* CEs [30] --> Loop 29 
* CEs [31] --> Loop 30 
* CEs [32] --> Loop 31 
* CEs [33] --> Loop 32 
* CEs [34] --> Loop 33 
* CEs [35] --> Loop 34 
* CEs [36] --> Loop 35 
* CEs [37] --> Loop 36 
* CEs [38] --> Loop 37 
* CEs [39] --> Loop 38 
* CEs [40] --> Loop 39 
* CEs [41] --> Loop 40 
* CEs [42] --> Loop 41 
* CEs [43] --> Loop 42 
* CEs [44] --> Loop 43 

#### Loops of eval_ct_tally_bb11_in/4 
* Loop 25: eval_ct_tally_bb11_in(V__last_lit,V_75,V_dcode_0,B)->  eval_ct_tally_bb11_in(V__last_lit,V_75,V_dcode_0',B)
                  [V_dcode_0>=0,29>=V_dcode_0,V_dcode_0+1=V_dcode_0'] 
* Loop 26: eval_ct_tally_bb11_in(V__last_lit,V_75,V_dcode_0,B) [V_dcode_0>=30,V_75>=1,V__last_lit>=1,B=3] 
* Loop 27: eval_ct_tally_bb11_in(V__last_lit,V_75,V_dcode_0,B) [V_dcode_0>=30,V__last_lit>=1,0>=V_75+1,B=3] 
* Loop 28: eval_ct_tally_bb11_in(V__last_lit,V_75,V_dcode_0,B) [V_dcode_0>=30,V_75>=1,0>=V__last_lit+1,B=3] 
* Loop 29: eval_ct_tally_bb11_in(V__last_lit,V_75,V_dcode_0,B) [V_dcode_0>=30,0>=V_75+1,0>=V__last_lit+1,B=3] 
* Loop 30: eval_ct_tally_bb11_in(V__last_lit,V_75,V_dcode_0,B) [V_dcode_0>=30,V_75>=1,V__last_lit>=1,B=2] 
* Loop 31: eval_ct_tally_bb11_in(V__last_lit,V_75,V_dcode_0,B) [V_dcode_0>=30,V__last_lit>=1,0>=V_75+1,B=2] 
* Loop 32: eval_ct_tally_bb11_in(V__last_lit,V_75,V_dcode_0,B) [V_dcode_0>=30,V_75>=1,0>=V__last_lit+1,B=2] 
* Loop 33: eval_ct_tally_bb11_in(V__last_lit,V_75,V_dcode_0,B) [V_dcode_0>=30,0>=V_75+1,0>=V__last_lit+1,B=2] 
* Loop 34: eval_ct_tally_bb11_in(V__last_lit,V_75,V_dcode_0,B) [V_dcode_0>=30,V__last_lit>=1,B=3,V_75=0] 
* Loop 35: eval_ct_tally_bb11_in(V__last_lit,V_75,V_dcode_0,B) [V_dcode_0>=30,0>=V__last_lit+1,B=3,V_75=0] 
* Loop 36: eval_ct_tally_bb11_in(V__last_lit,V_75,V_dcode_0,B) [V_dcode_0>=30,V__last_lit>=1,B=2,V_75=0] 
* Loop 37: eval_ct_tally_bb11_in(V__last_lit,V_75,V_dcode_0,B) [V_dcode_0>=30,0>=V__last_lit+1,B=2,V_75=0] 
* Loop 38: eval_ct_tally_bb11_in(V__last_lit,V_75,V_dcode_0,B) [V_dcode_0>=30,V_75>=1,B=3,V__last_lit=0] 
* Loop 39: eval_ct_tally_bb11_in(V__last_lit,V_75,V_dcode_0,B) [V_dcode_0>=30,0>=V_75+1,B=3,V__last_lit=0] 
* Loop 40: eval_ct_tally_bb11_in(V__last_lit,V_75,V_dcode_0,B) [V_dcode_0>=30,V_75>=1,B=2,V__last_lit=0] 
* Loop 41: eval_ct_tally_bb11_in(V__last_lit,V_75,V_dcode_0,B) [V_dcode_0>=30,0>=V_75+1,B=2,V__last_lit=0] 
* Loop 42: eval_ct_tally_bb11_in(V__last_lit,V_75,V_dcode_0,B) [V_dcode_0>=30,B=3,V_75=0,V__last_lit=0] 
* Loop 43: eval_ct_tally_bb11_in(V__last_lit,V_75,V_dcode_0,B) [V_dcode_0>=30,B=2,V_75=0,V__last_lit=0] 

### Ranking functions of CR eval_ct_tally_bb11_in(V__last_lit,V_75,V_dcode_0,B) 
* RF of phase [25]: [-V_dcode_0+30]

#### Partial ranking functions of CR eval_ct_tally_bb11_in(V__last_lit,V_75,V_dcode_0,B) 
* Partial RF of phase [25]:
  - RF of loop [25:1]:
    -V_dcode_0+30


### Resulting Chains:eval_ct_tally_bb11_in(V__last_lit,V_75,V_dcode_0,B) 
* [[25],43]
* [[25],42]
* [[25],41]
* [[25],40]
* [[25],39]
* [[25],38]
* [[25],37]
* [[25],36]
* [[25],35]
* [[25],34]
* [[25],33]
* [[25],32]
* [[25],31]
* [[25],30]
* [[25],29]
* [[25],28]
* [[25],27]
* [[25],26]


### Merging Chains  eval_ct_tally_bb11_in/4 into  External patterns of execution 
* [[43,[25]]] --> 1 
* [[42,[25]]] --> 2 
* [[41,[25]]] --> 3 
* [[40,[25]]] --> 4 
* [[39,[25]]] --> 5 
* [[38,[25]]] --> 6 
* [[37,[25]]] --> 7 
* [[36,[25]]] --> 8 
* [[35,[25]]] --> 9 
* [[34,[25]]] --> 10 
* [[33,[25]]] --> 11 
* [[32,[25]]] --> 12 
* [[31,[25]]] --> 13 
* [[30,[25]]] --> 14 
* [[29,[25]]] --> 15 
* [[28,[25]]] --> 16 
* [[27,[25]]] --> 17 
* [[26,[25]]] --> 18 


### Specialization of cost equations loop_cont_eval_ct_tally_bb11_in/2 
* CE 26 is refined into CE [46] 
* CE 25 is refined into CE [47] 


#### Refined cost equations loop_cont_eval_ct_tally_bb11_in/2 
* CE 46: loop_cont_eval_ct_tally_bb11_in(E,A) = 0
     [E=3] 
* CE 47: loop_cont_eval_ct_tally_bb11_in(E,A) = 0
     [E=2] 

### Cost equations --> "Loop" of loop_cont_eval_ct_tally_bb11_in/2 
* CEs [46] --> Loop 44 
* CEs [47] --> Loop 45 

#### Loops of loop_cont_eval_ct_tally_bb11_in/2 
* Loop 44: loop_cont_eval_ct_tally_bb11_in(E,A) [E=3] 
* Loop 45: loop_cont_eval_ct_tally_bb11_in(E,A) [E=2] 

### Ranking functions of CR loop_cont_eval_ct_tally_bb11_in(E,A) 

#### Partial ranking functions of CR loop_cont_eval_ct_tally_bb11_in(E,A) 


### Resulting Chains:loop_cont_eval_ct_tally_bb11_in(E,A) 
* [45]
* [44]


### Merging Chains  loop_cont_eval_ct_tally_bb11_in/2 into  External patterns of execution 
* [[45]] --> 1 
* [[44]] --> 2 


### Specialization of cost equations eval_ct_tally_bb8_in/4 
* CE 4 is refined into CE [48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65] 
* CE 5 is refined into CE [66] 


#### Refined cost equations eval_ct_tally_bb8_in/4 
* CE 48: eval_ct_tally_bb8_in(A,B,B,C) = 1+ eval_ct_tally_bb11_in(D,E,F,G):1+ loop_cont_eval_ct_tally_bb11_in(H,C):1
     [H=2,G=2,F=0,E=0,D=0,A=0] 
* CE 49: eval_ct_tally_bb8_in(A,B,B,C) = 1+ eval_ct_tally_bb11_in(D,E,F,G):2+ loop_cont_eval_ct_tally_bb11_in(H,C):2
     [H=3,G=3,F=0,E=0,D=0,A=0] 
* CE 50: eval_ct_tally_bb8_in(V__last_lit,V__strstart,V__block_start,B) = 1+ eval_ct_tally_bb11_in(C,D,E,F):3+ loop_cont_eval_ct_tally_bb11_in(G,B):1
     [0>=D+1,V__block_start+D=V__strstart,G=2,F=2,E=0,C=0,V__last_lit=0] 
* CE 51: eval_ct_tally_bb8_in(V__last_lit,V__strstart,V__block_start,B) = 1+ eval_ct_tally_bb11_in(C,D,E,F):4+ loop_cont_eval_ct_tally_bb11_in(G,B):1
     [D>=1,V__block_start+D=V__strstart,G=2,F=2,E=0,C=0,V__last_lit=0] 
* CE 52: eval_ct_tally_bb8_in(V__last_lit,V__strstart,V__block_start,B) = 1+ eval_ct_tally_bb11_in(C,D,E,F):5+ loop_cont_eval_ct_tally_bb11_in(G,B):2
     [0>=D+1,V__block_start+D=V__strstart,G=3,F=3,E=0,C=0,V__last_lit=0] 
* CE 53: eval_ct_tally_bb8_in(V__last_lit,V__strstart,V__block_start,B) = 1+ eval_ct_tally_bb11_in(C,D,E,F):6+ loop_cont_eval_ct_tally_bb11_in(G,B):2
     [D>=1,V__block_start+D=V__strstart,G=3,F=3,E=0,C=0,V__last_lit=0] 
* CE 54: eval_ct_tally_bb8_in(A,B,B,C) = 1+ eval_ct_tally_bb11_in(A,D,E,F):7+ loop_cont_eval_ct_tally_bb11_in(G,C):1
     [0>=A+1,G=2,F=2,E=0,D=0] 
* CE 55: eval_ct_tally_bb8_in(A,B,B,C) = 1+ eval_ct_tally_bb11_in(A,D,E,F):8+ loop_cont_eval_ct_tally_bb11_in(G,C):1
     [A>=1,G=2,F=2,E=0,D=0] 
* CE 56: eval_ct_tally_bb8_in(A,B,B,C) = 1+ eval_ct_tally_bb11_in(A,D,E,F):9+ loop_cont_eval_ct_tally_bb11_in(G,C):2
     [0>=A+1,G=3,F=3,E=0,D=0] 
* CE 57: eval_ct_tally_bb8_in(A,B,B,C) = 1+ eval_ct_tally_bb11_in(A,D,E,F):10+ loop_cont_eval_ct_tally_bb11_in(G,C):2
     [A>=1,G=3,F=3,E=0,D=0] 
* CE 58: eval_ct_tally_bb8_in(V__last_lit,V__strstart,V__block_start,B) = 1+ eval_ct_tally_bb11_in(V__last_lit,C,D,E):11+ loop_cont_eval_ct_tally_bb11_in(F,B):1
     [0>=C+1,0>=V__last_lit+1,V__block_start+C=V__strstart,F=2,E=2,D=0] 
* CE 59: eval_ct_tally_bb8_in(V__last_lit,V__strstart,V__block_start,B) = 1+ eval_ct_tally_bb11_in(V__last_lit,C,D,E):12+ loop_cont_eval_ct_tally_bb11_in(F,B):1
     [C>=1,0>=V__last_lit+1,V__block_start+C=V__strstart,F=2,E=2,D=0] 
* CE 60: eval_ct_tally_bb8_in(V__last_lit,V__strstart,V__block_start,B) = 1+ eval_ct_tally_bb11_in(V__last_lit,C,D,E):13+ loop_cont_eval_ct_tally_bb11_in(F,B):1
     [V__last_lit>=1,0>=C+1,V__block_start+C=V__strstart,F=2,E=2,D=0] 
* CE 61: eval_ct_tally_bb8_in(V__last_lit,V__strstart,V__block_start,B) = 1+ eval_ct_tally_bb11_in(V__last_lit,C,D,E):14+ loop_cont_eval_ct_tally_bb11_in(F,B):1
     [C>=1,V__last_lit>=1,V__block_start+C=V__strstart,F=2,E=2,D=0] 
* CE 62: eval_ct_tally_bb8_in(V__last_lit,V__strstart,V__block_start,B) = 1+ eval_ct_tally_bb11_in(V__last_lit,C,D,E):15+ loop_cont_eval_ct_tally_bb11_in(F,B):2
     [0>=C+1,0>=V__last_lit+1,V__block_start+C=V__strstart,F=3,E=3,D=0] 
* CE 63: eval_ct_tally_bb8_in(V__last_lit,V__strstart,V__block_start,B) = 1+ eval_ct_tally_bb11_in(V__last_lit,C,D,E):16+ loop_cont_eval_ct_tally_bb11_in(F,B):2
     [C>=1,0>=V__last_lit+1,V__block_start+C=V__strstart,F=3,E=3,D=0] 
* CE 64: eval_ct_tally_bb8_in(V__last_lit,V__strstart,V__block_start,B) = 1+ eval_ct_tally_bb11_in(V__last_lit,C,D,E):17+ loop_cont_eval_ct_tally_bb11_in(F,B):2
     [V__last_lit>=1,0>=C+1,V__block_start+C=V__strstart,F=3,E=3,D=0] 
* CE 65: eval_ct_tally_bb8_in(V__last_lit,V__strstart,V__block_start,B) = 1+ eval_ct_tally_bb11_in(V__last_lit,C,D,E):18+ loop_cont_eval_ct_tally_bb11_in(F,B):2
     [C>=1,V__last_lit>=1,V__block_start+C=V__strstart,F=3,E=3,D=0] 
* CE 66: eval_ct_tally_bb8_in(V__last_lit,V__strstart,V__block_start,B) = 0
     [] 

### Cost equations --> "Loop" of eval_ct_tally_bb8_in/4 
* CEs [48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66] --> Loop 46 

#### Loops of eval_ct_tally_bb8_in/4 
* Loop 46: eval_ct_tally_bb8_in(V__last_lit,V__strstart,V__block_start,B) [] 

### Ranking functions of CR eval_ct_tally_bb8_in(V__last_lit,V__strstart,V__block_start,B) 

#### Partial ranking functions of CR eval_ct_tally_bb8_in(V__last_lit,V__strstart,V__block_start,B) 


### Resulting Chains:eval_ct_tally_bb8_in(V__last_lit,V__strstart,V__block_start,B) 
* [46]


### Merging Chains  eval_ct_tally_bb8_in/4 into  External patterns of execution 
* [[46]] --> 1 


### Specialization of cost equations eval_ct_tally_bb0_in/6 
* CE 3 is refined into CE [67] 


#### Refined cost equations eval_ct_tally_bb0_in/6 
* CE 67: eval_ct_tally_bb0_in(V__last_flags,V__last_lit,V__last_dist,V__strstart,V__block_start,B) = 0+ eval_ct_tally_bb8_in(C,V__strstart,V__block_start,B):1
     [C=V__last_lit+1] 

### Cost equations --> "Loop" of eval_ct_tally_bb0_in/6 
* CEs [67] --> Loop 47 

#### Loops of eval_ct_tally_bb0_in/6 
* Loop 47: eval_ct_tally_bb0_in(V__last_flags,V__last_lit,V__last_dist,V__strstart,V__block_start,B) [] 

### Ranking functions of CR eval_ct_tally_bb0_in(V__last_flags,V__last_lit,V__last_dist,V__strstart,V__block_start,B) 

#### Partial ranking functions of CR eval_ct_tally_bb0_in(V__last_flags,V__last_lit,V__last_dist,V__strstart,V__block_start,B) 


### Resulting Chains:eval_ct_tally_bb0_in(V__last_flags,V__last_lit,V__last_dist,V__strstart,V__block_start,B) 
* [47]


### Merging Chains  eval_ct_tally_bb0_in/6 into  External patterns of execution 
* [[47]] --> 1 


### Specialization of cost equations eval_ct_tally_start/11 
* CE 2 is refined into CE [68] 


#### Refined cost equations eval_ct_tally_start/11 
* CE 68: eval_ct_tally_start(V_dist,V_lc,V__flags,V__last_flags,V__last_lit,V__last_dist,V__flag_bit,V__level,V__strstart,V__block_start,B) = 0+ eval_ct_tally_bb0_in(V__last_flags,V__last_lit,V__last_dist,V__strstart,V__block_start,B):1
     [] 

### Cost equations --> "Loop" of eval_ct_tally_start/11 
* CEs [68] --> Loop 48 

#### Loops of eval_ct_tally_start/11 
* Loop 48: eval_ct_tally_start(V_dist,V_lc,V__flags,V__last_flags,V__last_lit,V__last_dist,V__flag_bit,V__level,V__strstart,V__block_start,B) [] 

### Ranking functions of CR eval_ct_tally_start(V_dist,V_lc,V__flags,V__last_flags,V__last_lit,V__last_dist,V__flag_bit,V__level,V__strstart,V__block_start,B) 

#### Partial ranking functions of CR eval_ct_tally_start(V_dist,V_lc,V__flags,V__last_flags,V__last_lit,V__last_dist,V__flag_bit,V__level,V__strstart,V__block_start,B) 


### Resulting Chains:eval_ct_tally_start(V_dist,V_lc,V__flags,V__last_flags,V__last_lit,V__last_dist,V__flag_bit,V__level,V__strstart,V__block_start,B) 
* [48]


### Merging Chains  eval_ct_tally_start/11 into  External patterns of execution 
* [[48]] --> 1 


Computing Bounds
=====================================

#### Cost of loops [25] 

 * loop 25:eval_ct_tally_bb11_in(V__last_lit,V_75,V_dcode_0,B) -> [eval_ct_tally_bb11_in(V__last_lit',V_75',V_dcode_0',B')] 
1
#### Cost of phase [25]:eval_ct_tally_bb11_in(V__last_lit,V_75,V_dcode_0,B) -> [eval_ct_tally_bb11_in(V__last_lit',V_75',V_dcode_0',B')] 
1*it(25)+0
  Such that:it(25) =< -V_dcode_0+30
it(25) =< -V_dcode_0+V_dcode_0'

#### Cost of phase [25]:eval_ct_tally_bb11_in(V__last_lit,V_75,V_dcode_0,B) -> [eval_ct_tally_bb11_in(V__last_lit',V_75',V_dcode_0',B')] 
1*it(25)+0
  Such that:it(25) =< -V_dcode_0+30
it(25) =< -V_dcode_0+V_dcode_0'

#### Cost of phase [25]:eval_ct_tally_bb11_in(V__last_lit,V_75,V_dcode_0,B) -> [eval_ct_tally_bb11_in(V__last_lit',V_75',V_dcode_0',B')] 
1*it(25)+0
  Such that:it(25) =< -V_dcode_0+30
it(25) =< -V_dcode_0+V_dcode_0'

#### Cost of phase [25]:eval_ct_tally_bb11_in(V__last_lit,V_75,V_dcode_0,B) -> [eval_ct_tally_bb11_in(V__last_lit',V_75',V_dcode_0',B')] 
1*it(25)+0
  Such that:it(25) =< -V_dcode_0+30
it(25) =< -V_dcode_0+V_dcode_0'

#### Cost of phase [25]:eval_ct_tally_bb11_in(V__last_lit,V_75,V_dcode_0,B) -> [eval_ct_tally_bb11_in(V__last_lit',V_75',V_dcode_0',B')] 
1*it(25)+0
  Such that:it(25) =< -V_dcode_0+30
it(25) =< -V_dcode_0+V_dcode_0'

#### Cost of phase [25]:eval_ct_tally_bb11_in(V__last_lit,V_75,V_dcode_0,B) -> [eval_ct_tally_bb11_in(V__last_lit',V_75',V_dcode_0',B')] 
1*it(25)+0
  Such that:it(25) =< -V_dcode_0+30
it(25) =< -V_dcode_0+V_dcode_0'

#### Cost of phase [25]:eval_ct_tally_bb11_in(V__last_lit,V_75,V_dcode_0,B) -> [eval_ct_tally_bb11_in(V__last_lit',V_75',V_dcode_0',B')] 
1*it(25)+0
  Such that:it(25) =< -V_dcode_0+30
it(25) =< -V_dcode_0+V_dcode_0'

#### Cost of phase [25]:eval_ct_tally_bb11_in(V__last_lit,V_75,V_dcode_0,B) -> [eval_ct_tally_bb11_in(V__last_lit',V_75',V_dcode_0',B')] 
1*it(25)+0
  Such that:it(25) =< -V_dcode_0+30
it(25) =< -V_dcode_0+V_dcode_0'

#### Cost of phase [25]:eval_ct_tally_bb11_in(V__last_lit,V_75,V_dcode_0,B) -> [eval_ct_tally_bb11_in(V__last_lit',V_75',V_dcode_0',B')] 
1*it(25)+0
  Such that:it(25) =< -V_dcode_0+30
it(25) =< -V_dcode_0+V_dcode_0'

#### Cost of phase [25]:eval_ct_tally_bb11_in(V__last_lit,V_75,V_dcode_0,B) -> [eval_ct_tally_bb11_in(V__last_lit',V_75',V_dcode_0',B')] 
1*it(25)+0
  Such that:it(25) =< -V_dcode_0+30
it(25) =< -V_dcode_0+V_dcode_0'

#### Cost of phase [25]:eval_ct_tally_bb11_in(V__last_lit,V_75,V_dcode_0,B) -> [eval_ct_tally_bb11_in(V__last_lit',V_75',V_dcode_0',B')] 
1*it(25)+0
  Such that:it(25) =< -V_dcode_0+30
it(25) =< -V_dcode_0+V_dcode_0'

#### Cost of phase [25]:eval_ct_tally_bb11_in(V__last_lit,V_75,V_dcode_0,B) -> [eval_ct_tally_bb11_in(V__last_lit',V_75',V_dcode_0',B')] 
1*it(25)+0
  Such that:it(25) =< -V_dcode_0+30
it(25) =< -V_dcode_0+V_dcode_0'

#### Cost of phase [25]:eval_ct_tally_bb11_in(V__last_lit,V_75,V_dcode_0,B) -> [eval_ct_tally_bb11_in(V__last_lit',V_75',V_dcode_0',B')] 
1*it(25)+0
  Such that:it(25) =< -V_dcode_0+30
it(25) =< -V_dcode_0+V_dcode_0'

#### Cost of phase [25]:eval_ct_tally_bb11_in(V__last_lit,V_75,V_dcode_0,B) -> [eval_ct_tally_bb11_in(V__last_lit',V_75',V_dcode_0',B')] 
1*it(25)+0
  Such that:it(25) =< -V_dcode_0+30
it(25) =< -V_dcode_0+V_dcode_0'

#### Cost of phase [25]:eval_ct_tally_bb11_in(V__last_lit,V_75,V_dcode_0,B) -> [eval_ct_tally_bb11_in(V__last_lit',V_75',V_dcode_0',B')] 
1*it(25)+0
  Such that:it(25) =< -V_dcode_0+30
it(25) =< -V_dcode_0+V_dcode_0'

#### Cost of phase [25]:eval_ct_tally_bb11_in(V__last_lit,V_75,V_dcode_0,B) -> [eval_ct_tally_bb11_in(V__last_lit',V_75',V_dcode_0',B')] 
1*it(25)+0
  Such that:it(25) =< -V_dcode_0+30
it(25) =< -V_dcode_0+V_dcode_0'

#### Cost of phase [25]:eval_ct_tally_bb11_in(V__last_lit,V_75,V_dcode_0,B) -> [eval_ct_tally_bb11_in(V__last_lit',V_75',V_dcode_0',B')] 
1*it(25)+0
  Such that:it(25) =< -V_dcode_0+30
it(25) =< -V_dcode_0+V_dcode_0'

#### Cost of phase [25]:eval_ct_tally_bb11_in(V__last_lit,V_75,V_dcode_0,B) -> [eval_ct_tally_bb11_in(V__last_lit',V_75',V_dcode_0',B')] 
1*it(25)+0
  Such that:it(25) =< -V_dcode_0+30
it(25) =< -V_dcode_0+V_dcode_0'

#### Cost of chains of eval_ct_tally_bb11_in(V__last_lit,V_75,V_dcode_0,B):
* Chain [[25],43]: 1*it(25)+0
  Such that:it(25) =< -V_dcode_0+30

  with precondition: [V__last_lit=0,V_75=0,B=2,29>=V_dcode_0,V_dcode_0>=0] 

* Chain [[25],42]: 1*it(25)+0
  Such that:it(25) =< -V_dcode_0+30

  with precondition: [V__last_lit=0,V_75=0,B=3,29>=V_dcode_0,V_dcode_0>=0] 

* Chain [[25],41]: 1*it(25)+0
  Such that:it(25) =< -V_dcode_0+30

  with precondition: [V__last_lit=0,B=2,0>=V_75+1,29>=V_dcode_0,V_dcode_0>=0] 

* Chain [[25],40]: 1*it(25)+0
  Such that:it(25) =< -V_dcode_0+30

  with precondition: [V__last_lit=0,B=2,29>=V_dcode_0,V_75>=1,V_dcode_0>=0] 

* Chain [[25],39]: 1*it(25)+0
  Such that:it(25) =< -V_dcode_0+30

  with precondition: [V__last_lit=0,B=3,0>=V_75+1,29>=V_dcode_0,V_dcode_0>=0] 

* Chain [[25],38]: 1*it(25)+0
  Such that:it(25) =< -V_dcode_0+30

  with precondition: [V__last_lit=0,B=3,29>=V_dcode_0,V_75>=1,V_dcode_0>=0] 

* Chain [[25],37]: 1*it(25)+0
  Such that:it(25) =< -V_dcode_0+30

  with precondition: [V_75=0,B=2,0>=V__last_lit+1,29>=V_dcode_0,V_dcode_0>=0] 

* Chain [[25],36]: 1*it(25)+0
  Such that:it(25) =< -V_dcode_0+30

  with precondition: [V_75=0,B=2,29>=V_dcode_0,V__last_lit>=1,V_dcode_0>=0] 

* Chain [[25],35]: 1*it(25)+0
  Such that:it(25) =< -V_dcode_0+30

  with precondition: [V_75=0,B=3,0>=V__last_lit+1,29>=V_dcode_0,V_dcode_0>=0] 

* Chain [[25],34]: 1*it(25)+0
  Such that:it(25) =< -V_dcode_0+30

  with precondition: [V_75=0,B=3,29>=V_dcode_0,V__last_lit>=1,V_dcode_0>=0] 

* Chain [[25],33]: 1*it(25)+0
  Such that:it(25) =< -V_dcode_0+30

  with precondition: [B=2,0>=V__last_lit+1,0>=V_75+1,29>=V_dcode_0,V_dcode_0>=0] 

* Chain [[25],32]: 1*it(25)+0
  Such that:it(25) =< -V_dcode_0+30

  with precondition: [B=2,0>=V__last_lit+1,29>=V_dcode_0,V_75>=1,V_dcode_0>=0] 

* Chain [[25],31]: 1*it(25)+0
  Such that:it(25) =< -V_dcode_0+30

  with precondition: [B=2,0>=V_75+1,29>=V_dcode_0,V__last_lit>=1,V_dcode_0>=0] 

* Chain [[25],30]: 1*it(25)+0
  Such that:it(25) =< -V_dcode_0+30

  with precondition: [B=2,29>=V_dcode_0,V__last_lit>=1,V_75>=1,V_dcode_0>=0] 

* Chain [[25],29]: 1*it(25)+0
  Such that:it(25) =< -V_dcode_0+30

  with precondition: [B=3,0>=V__last_lit+1,0>=V_75+1,29>=V_dcode_0,V_dcode_0>=0] 

* Chain [[25],28]: 1*it(25)+0
  Such that:it(25) =< -V_dcode_0+30

  with precondition: [B=3,0>=V__last_lit+1,29>=V_dcode_0,V_75>=1,V_dcode_0>=0] 

* Chain [[25],27]: 1*it(25)+0
  Such that:it(25) =< -V_dcode_0+30

  with precondition: [B=3,0>=V_75+1,29>=V_dcode_0,V__last_lit>=1,V_dcode_0>=0] 

* Chain [[25],26]: 1*it(25)+0
  Such that:it(25) =< -V_dcode_0+30

  with precondition: [B=3,29>=V_dcode_0,V__last_lit>=1,V_75>=1,V_dcode_0>=0] 


#### Cost of chains of loop_cont_eval_ct_tally_bb11_in(E,A):
* Chain [45]: 0
  with precondition: [E=2] 

* Chain [44]: 0
  with precondition: [E=3] 


#### Cost of chains of eval_ct_tally_bb8_in(V__last_lit,V__strstart,V__block_start,B):
* Chain [46]: 541
  with precondition: [] 


#### Cost of chains of eval_ct_tally_bb0_in(V__last_flags,V__last_lit,V__last_dist,V__strstart,V__block_start,B):
* Chain [47]: 541
  with precondition: [] 


#### Cost of chains of eval_ct_tally_start(V_dist,V_lc,V__flags,V__last_flags,V__last_lit,V__last_dist,V__flag_bit,V__level,V__strstart,V__block_start,B):
* Chain [48]: 541
  with precondition: [] 


Closed-form bounds of eval_ct_tally_start(V_dist,V_lc,V__flags,V__last_flags,V__last_lit,V__last_dist,V__flag_bit,V__level,V__strstart,V__block_start,B): 
-------------------------------------
* Chain [48] with precondition: [] 
    - Upper bound: 541 
    - Complexity: constant 

### Maximum cost of eval_ct_tally_start(V_dist,V_lc,V__flags,V__last_flags,V__last_lit,V__last_dist,V__flag_bit,V__level,V__strstart,V__block_start,B): 541 
Asymptotic class: constant 

Time statistics: 
-------------------------------------
* Partial evaluation computed in 125 ms.
* Invariants computed in 149 ms.
   - Backward Invariants 121 ms.
   - Transitive Invariants 5 ms.
* Refinement performed in 260 ms.
* Termination proved in 8 ms.
* Upper bounds computed in 244 ms.
   - Equation cost structures 87 ms.
   - Phase cost structures 16 ms.
   - Chain cost structures 132 ms.
   - Solving cost expressions 0 ms.
* Total analysis performed in 944 ms.


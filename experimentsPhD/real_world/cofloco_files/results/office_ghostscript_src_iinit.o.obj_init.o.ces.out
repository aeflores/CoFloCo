Warning: Ignored call to eval_obj_init_stop/1 in equation eval_obj_init_79/1 

Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. recursive  : [eval_obj_init_24/3,eval_obj_init_25/3,eval_obj_init_bb6_in/3,eval_obj_init_bb9_in/3]
1. recursive  : [eval_obj_init_22/4,eval_obj_init_23/4,eval_obj_init_bb4_in/4,loop_cont_eval_obj_init_bb6_in/5]
2. recursive  : [eval_obj_init_30/4,eval_obj_init_31/4,eval_obj_init_32/4,eval_obj_init_bb12_in/4]
3. recursive  : [eval_obj_init_52/4,eval_obj_init_53/4,eval_obj_init_bb15_in/4,eval_obj_init_bb18_in/4]
4. recursive  : [eval_obj_init_75/4,eval_obj_init_76/4,eval_obj_init_bb20_in/4]
5. non_recursive  : [eval_obj_init_79/1]
6. non_recursive  : [eval_obj_init_78/2]
7. non_recursive  : [loop_cont_eval_obj_init_bb20_in/3]
8. non_recursive  : [eval_obj_init_72/2]
9. non_recursive  : [eval_obj_init_71/2]
10. non_recursive  : [eval_obj_init_70/2]
11. non_recursive  : [eval_obj_init_68/2]
12. non_recursive  : [eval_obj_init_67/2]
13. non_recursive  : [eval_obj_init_65/2]
14. non_recursive  : [eval_obj_init_64/2]
15. non_recursive  : [eval_obj_init_63/2]
16. non_recursive  : [eval_obj_init_62/2]
17. non_recursive  : [loop_cont_eval_obj_init_bb15_in/3]
18. non_recursive  : [eval_obj_init_35/2]
19. non_recursive  : [eval_obj_init_34/2]
20. non_recursive  : [loop_cont_eval_obj_init_bb12_in/3]
21. non_recursive  : [loop_cont_eval_obj_init_bb4_in/4]
22. non_recursive  : [eval_obj_init_21/2]
23. non_recursive  : [eval_obj_init_20/3]
24. non_recursive  : [eval_obj_init_19/3]
25. non_recursive  : [eval_obj_init_bb3_in/3]
26. non_recursive  : [eval_obj_init_12/3]
27. non_recursive  : [eval_obj_init_11/3]
28. non_recursive  : [eval_obj_init_10/3]
29. non_recursive  : [eval_obj_init_18/3]
30. non_recursive  : [eval_obj_init_17/3]
31. non_recursive  : [eval_obj_init_8/3]
32. non_recursive  : [eval_obj_init_7/3]
33. non_recursive  : [eval_obj_init_6/3]
34. non_recursive  : [eval_obj_init_5/3]
35. non_recursive  : [eval_obj_init_4/3]
36. non_recursive  : [eval_obj_init_2/3]
37. non_recursive  : [eval_obj_init_1/3]
38. non_recursive  : [eval_obj_init_bb0_in/2]
39. non_recursive  : [eval_obj_init_start/2]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into eval_obj_init_bb6_in/3
1. SCC is partially evaluated into eval_obj_init_bb4_in/4
2. SCC is partially evaluated into eval_obj_init_bb12_in/4
3. SCC is partially evaluated into eval_obj_init_bb15_in/4
4. SCC is partially evaluated into eval_obj_init_bb20_in/4
5. SCC is completely evaluated into other SCCs
6. SCC is completely evaluated into other SCCs
7. SCC is completely evaluated into other SCCs
8. SCC is partially evaluated into eval_obj_init_72/2
9. SCC is completely evaluated into other SCCs
10. SCC is completely evaluated into other SCCs
11. SCC is completely evaluated into other SCCs
12. SCC is completely evaluated into other SCCs
13. SCC is completely evaluated into other SCCs
14. SCC is completely evaluated into other SCCs
15. SCC is completely evaluated into other SCCs
16. SCC is completely evaluated into other SCCs
17. SCC is completely evaluated into other SCCs
18. SCC is partially evaluated into eval_obj_init_35/2
19. SCC is completely evaluated into other SCCs
20. SCC is completely evaluated into other SCCs
21. SCC is partially evaluated into loop_cont_eval_obj_init_bb4_in/4
22. SCC is partially evaluated into eval_obj_init_21/2
23. SCC is completely evaluated into other SCCs
24. SCC is completely evaluated into other SCCs
25. SCC is completely evaluated into other SCCs
26. SCC is completely evaluated into other SCCs
27. SCC is completely evaluated into other SCCs
28. SCC is completely evaluated into other SCCs
29. SCC is completely evaluated into other SCCs
30. SCC is completely evaluated into other SCCs
31. SCC is partially evaluated into eval_obj_init_8/3
32. SCC is completely evaluated into other SCCs
33. SCC is completely evaluated into other SCCs
34. SCC is completely evaluated into other SCCs
35. SCC is completely evaluated into other SCCs
36. SCC is completely evaluated into other SCCs
37. SCC is completely evaluated into other SCCs
38. SCC is completely evaluated into other SCCs
39. SCC is partially evaluated into eval_obj_init_start/2

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations eval_obj_init_bb6_in/3 
* CE 10 is refined into CE [19] 
* CE 9 is refined into CE [20] 


#### Refined cost equations eval_obj_init_bb6_in/3 
* CE 19: eval_obj_init_bb6_in(A,B,A) = 0
     [B=2] 
* CE 20: eval_obj_init_bb6_in(V__min_dstack_size,B,C) = 1+ eval_obj_init_bb6_in(V__min_dstack_size,D,C)
     [D=2,B=2] 

### Cost equations --> "Loop" of eval_obj_init_bb6_in/3 
* CEs [20] --> Loop 17 
* CEs [19] --> Loop 18 

#### Loops of eval_obj_init_bb6_in/3 
* Loop 17: eval_obj_init_bb6_in(V__min_dstack_size,B,C)->  eval_obj_init_bb6_in(V__min_dstack_size,B',C)
                  [B'=2,B=2] 
* Loop 18: eval_obj_init_bb6_in(A,B,A) [B=2] 

### Ranking functions of CR eval_obj_init_bb6_in(V__min_dstack_size,B,C) 

#### Partial ranking functions of CR eval_obj_init_bb6_in(V__min_dstack_size,B,C) 


### Resulting Chains:eval_obj_init_bb6_in(V__min_dstack_size,B,C) 
* [[17]]...
* [[17],18]
* [18]


### Merging Chains  eval_obj_init_bb6_in/3 into  External patterns of execution 
* [[18],[18,[17]]] --> 1 
* [[[17]]] --> 2 


### Specialization of cost equations eval_obj_init_bb4_in/4 
* CE 7 is refined into CE [21] 
* CE 6 is refined into CE [22,23] 


#### Refined cost equations eval_obj_init_bb4_in/4 
* CE 21: eval_obj_init_bb4_in(A,B,A,C) = 0
     [C=0,B=3] 
* CE 22: eval_obj_init_bb4_in(V__min_dstack_size,B,C,D) = 2+ eval_obj_init_bb6_in(V__min_dstack_size,E,V__min_dstack_size):1+ eval_obj_init_bb4_in(V__min_dstack_size,B,C,D)
     [E=2] 
* CE 23: eval_obj_init_bb4_in(V__min_dstack_size,B,C,D) = 2+ eval_obj_init_bb6_in(V__min_dstack_size,E,F):2
     [E=2] 

### Cost equations --> "Loop" of eval_obj_init_bb4_in/4 
* CEs [23] --> Loop 19 
* CEs [22] --> Loop 20 
* CEs [21] --> Loop 21 

#### Loops of eval_obj_init_bb4_in/4 
* Loop 19: eval_obj_init_bb4_in(V__min_dstack_size,B,C,D) [] 
* Loop 20: eval_obj_init_bb4_in(V__min_dstack_size,B,C,D)->  eval_obj_init_bb4_in(V__min_dstack_size,B,C,D)
                  [] 
* Loop 21: eval_obj_init_bb4_in(A,B,A,C) [C=0,B=3] 

### Ranking functions of CR eval_obj_init_bb4_in(V__min_dstack_size,B,C,D) 

#### Partial ranking functions of CR eval_obj_init_bb4_in(V__min_dstack_size,B,C,D) 


### Resulting Chains:eval_obj_init_bb4_in(V__min_dstack_size,B,C,D) 
* [[20]]...
* [[20],21]
* [[20],19]...
* [21]
* [19]...


### Merging Chains  eval_obj_init_bb4_in/4 into  External patterns of execution 
* [[21],[21,[20]]] --> 1 
* [[[20]]] --> 2 
* [[19],[19,[20]]] --> 3 


### Specialization of cost equations eval_obj_init_bb12_in/4 
* CE 12 is refined into CE [24] 
* CE 11 is refined into CE [25] 


#### Refined cost equations eval_obj_init_bb12_in/4 
* CE 24: eval_obj_init_bb12_in(A,B,C,A) = 0
     [B>=1,C=6] 
* CE 25: eval_obj_init_bb12_in(V__min_dstack_size,V_i_0,B,C) = 1+ eval_obj_init_bb12_in(V__min_dstack_size,D,E,C)
     [0>=V_i_0,V_i_0+1=D,E=6,B=6] 

### Cost equations --> "Loop" of eval_obj_init_bb12_in/4 
* CEs [25] --> Loop 22 
* CEs [24] --> Loop 23 

#### Loops of eval_obj_init_bb12_in/4 
* Loop 22: eval_obj_init_bb12_in(V__min_dstack_size,V_i_0,B,C)->  eval_obj_init_bb12_in(V__min_dstack_size,V_i_0',B',C)
                  [0>=V_i_0,V_i_0+1=V_i_0',B'=6,B=6] 
* Loop 23: eval_obj_init_bb12_in(A,B,C,A) [B>=1,C=6] 

### Ranking functions of CR eval_obj_init_bb12_in(V__min_dstack_size,V_i_0,B,C) 
* RF of phase [22]: [-V_i_0+1]

#### Partial ranking functions of CR eval_obj_init_bb12_in(V__min_dstack_size,V_i_0,B,C) 
* Partial RF of phase [22]:
  - RF of loop [22:1]:
    -V_i_0+1


### Resulting Chains:eval_obj_init_bb12_in(V__min_dstack_size,V_i_0,B,C) 
* [[22],23]
* [23]


### Merging Chains  eval_obj_init_bb12_in/4 into  External patterns of execution 
* [[23]] --> 1 
* [[23,[22]]] --> 2 


### Specialization of cost equations eval_obj_init_bb15_in/4 
* CE 15 is refined into CE [26] 
* CE 14 is refined into CE [27] 


#### Refined cost equations eval_obj_init_bb15_in/4 
* CE 26: eval_obj_init_bb15_in(A,B,C,A) = 0
     [B>=5,C=5] 
* CE 27: eval_obj_init_bb15_in(V__min_dstack_size,V_i_1,B,C) = 1+ eval_obj_init_bb15_in(V__min_dstack_size,D,E,C)
     [V_i_1>=0,4>=V_i_1,V_i_1+1=D,E=5,B=5] 

### Cost equations --> "Loop" of eval_obj_init_bb15_in/4 
* CEs [27] --> Loop 24 
* CEs [26] --> Loop 25 

#### Loops of eval_obj_init_bb15_in/4 
* Loop 24: eval_obj_init_bb15_in(V__min_dstack_size,V_i_1,B,C)->  eval_obj_init_bb15_in(V__min_dstack_size,V_i_1',B',C)
                  [V_i_1>=0,4>=V_i_1,V_i_1+1=V_i_1',B'=5,B=5] 
* Loop 25: eval_obj_init_bb15_in(A,B,C,A) [B>=5,C=5] 

### Ranking functions of CR eval_obj_init_bb15_in(V__min_dstack_size,V_i_1,B,C) 
* RF of phase [24]: [-V_i_1+5]

#### Partial ranking functions of CR eval_obj_init_bb15_in(V__min_dstack_size,V_i_1,B,C) 
* Partial RF of phase [24]:
  - RF of loop [24:1]:
    -V_i_1+5


### Resulting Chains:eval_obj_init_bb15_in(V__min_dstack_size,V_i_1,B,C) 
* [[24],25]


### Merging Chains  eval_obj_init_bb15_in/4 into  External patterns of execution 
* [[25,[24]]] --> 1 


### Specialization of cost equations eval_obj_init_bb20_in/4 
* CE 18 is refined into CE [28] 
* CE 17 is refined into CE [29] 


#### Refined cost equations eval_obj_init_bb20_in/4 
* CE 28: eval_obj_init_bb20_in(A,B,C,A) = 0
     [B>=30,C=4] 
* CE 29: eval_obj_init_bb20_in(V__min_dstack_size,V_i1_0,B,C) = 1+ eval_obj_init_bb20_in(V__min_dstack_size,D,E,C)
     [V_i1_0>=0,29>=V_i1_0,V_i1_0+1=D,E=4,B=4] 

### Cost equations --> "Loop" of eval_obj_init_bb20_in/4 
* CEs [29] --> Loop 26 
* CEs [28] --> Loop 27 

#### Loops of eval_obj_init_bb20_in/4 
* Loop 26: eval_obj_init_bb20_in(V__min_dstack_size,V_i1_0,B,C)->  eval_obj_init_bb20_in(V__min_dstack_size,V_i1_0',B',C)
                  [V_i1_0>=0,29>=V_i1_0,V_i1_0+1=V_i1_0',B'=4,B=4] 
* Loop 27: eval_obj_init_bb20_in(A,B,C,A) [B>=30,C=4] 

### Ranking functions of CR eval_obj_init_bb20_in(V__min_dstack_size,V_i1_0,B,C) 
* RF of phase [26]: [-V_i1_0+30]

#### Partial ranking functions of CR eval_obj_init_bb20_in(V__min_dstack_size,V_i1_0,B,C) 
* Partial RF of phase [26]:
  - RF of loop [26:1]:
    -V_i1_0+30


### Resulting Chains:eval_obj_init_bb20_in(V__min_dstack_size,V_i1_0,B,C) 
* [[26],27]


### Merging Chains  eval_obj_init_bb20_in/4 into  External patterns of execution 
* [[27,[26]]] --> 1 


### Specialization of cost equations eval_obj_init_72/2 
* CE 16 is refined into CE [30] 


#### Refined cost equations eval_obj_init_72/2 
* CE 30: eval_obj_init_72(V__min_dstack_size,B) = 1+ eval_obj_init_bb20_in(V__min_dstack_size,C,D,V__min_dstack_size):1
     [D=4,C=0] 

### Cost equations --> "Loop" of eval_obj_init_72/2 
* CEs [30] --> Loop 28 

#### Loops of eval_obj_init_72/2 
* Loop 28: eval_obj_init_72(V__min_dstack_size,B) [] 

### Ranking functions of CR eval_obj_init_72(V__min_dstack_size,B) 

#### Partial ranking functions of CR eval_obj_init_72(V__min_dstack_size,B) 


### Resulting Chains:eval_obj_init_72(V__min_dstack_size,B) 
* [28]


### Merging Chains  eval_obj_init_72/2 into  External patterns of execution 
* [[28]] --> 1 


### Specialization of cost equations eval_obj_init_35/2 
* CE 13 is refined into CE [31] 


#### Refined cost equations eval_obj_init_35/2 
* CE 31: eval_obj_init_35(V__min_dstack_size,B) = 1+ eval_obj_init_bb15_in(V__min_dstack_size,C,D,V__min_dstack_size):1+ eval_obj_init_72(V__min_dstack_size,B):1
     [D=5,C=0] 

### Cost equations --> "Loop" of eval_obj_init_35/2 
* CEs [31] --> Loop 29 

#### Loops of eval_obj_init_35/2 
* Loop 29: eval_obj_init_35(V__min_dstack_size,B) [] 

### Ranking functions of CR eval_obj_init_35(V__min_dstack_size,B) 

#### Partial ranking functions of CR eval_obj_init_35(V__min_dstack_size,B) 


### Resulting Chains:eval_obj_init_35(V__min_dstack_size,B) 
* [29]


### Merging Chains  eval_obj_init_35/2 into  External patterns of execution 
* [[29]] --> 1 


### Specialization of cost equations loop_cont_eval_obj_init_bb4_in/4 
* CE 8 is refined into CE [32,33] 


#### Refined cost equations loop_cont_eval_obj_init_bb4_in/4 
* CE 32: loop_cont_eval_obj_init_bb4_in(F,A,B,C) = 1+ eval_obj_init_bb12_in(A,B,G,A):1+ eval_obj_init_35(A,C):1
     [B>=1,G=6,F=3] 
* CE 33: loop_cont_eval_obj_init_bb4_in(F,A,B,C) = 1+ eval_obj_init_bb12_in(A,B,G,A):2+ eval_obj_init_35(A,C):1
     [0>=B,G=6,F=3] 

### Cost equations --> "Loop" of loop_cont_eval_obj_init_bb4_in/4 
* CEs [32] --> Loop 30 
* CEs [33] --> Loop 31 

#### Loops of loop_cont_eval_obj_init_bb4_in/4 
* Loop 30: loop_cont_eval_obj_init_bb4_in(F,A,B,C) [B>=1,F=3] 
* Loop 31: loop_cont_eval_obj_init_bb4_in(F,A,B,C) [0>=B,F=3] 

### Ranking functions of CR loop_cont_eval_obj_init_bb4_in(F,A,B,C) 

#### Partial ranking functions of CR loop_cont_eval_obj_init_bb4_in(F,A,B,C) 


### Resulting Chains:loop_cont_eval_obj_init_bb4_in(F,A,B,C) 
* [31]
* [30]


### Merging Chains  loop_cont_eval_obj_init_bb4_in/4 into  External patterns of execution 
* [[31]] --> 1 
* [[30]] --> 2 


### Specialization of cost equations eval_obj_init_21/2 
* CE 5 is refined into CE [34,35,36] 


#### Refined cost equations eval_obj_init_21/2 
* CE 34: eval_obj_init_21(V__min_dstack_size,B) = 1+ eval_obj_init_bb4_in(V__min_dstack_size,C,V__min_dstack_size,D):1+ loop_cont_eval_obj_init_bb4_in(E,V__min_dstack_size,F,B):1
     [V__min_dstack_size>=2,3>=V__min_dstack_size,F=0,E=3,D=0,C=3] 
* CE 35: eval_obj_init_21(V__min_dstack_size,B) = 1+ eval_obj_init_bb4_in(V__min_dstack_size,C,D,E):2
     [V__min_dstack_size>=2,3>=V__min_dstack_size] 
* CE 36: eval_obj_init_21(V__min_dstack_size,B) = 1+ eval_obj_init_bb4_in(V__min_dstack_size,C,D,E):3
     [V__min_dstack_size>=2,3>=V__min_dstack_size] 

### Cost equations --> "Loop" of eval_obj_init_21/2 
* CEs [35,36] --> Loop 32 
* CEs [34] --> Loop 33 

#### Loops of eval_obj_init_21/2 
* Loop 32: eval_obj_init_21(V__min_dstack_size,B) [V__min_dstack_size>=2,3>=V__min_dstack_size] 
* Loop 33: eval_obj_init_21(V__min_dstack_size,B) [V__min_dstack_size>=2,3>=V__min_dstack_size] 

### Ranking functions of CR eval_obj_init_21(V__min_dstack_size,B) 

#### Partial ranking functions of CR eval_obj_init_21(V__min_dstack_size,B) 


### Resulting Chains:eval_obj_init_21(V__min_dstack_size,B) 
* [33]
* [32]...


### Merging Chains  eval_obj_init_21/2 into  External patterns of execution 
* [[33]] --> 1 
* [[32]] --> 2 


### Specialization of cost equations eval_obj_init_8/3 
* CE 3 is refined into CE [37,38] 
* CE 4 is refined into CE [39,40] 


#### Refined cost equations eval_obj_init_8/3 
* CE 37: eval_obj_init_8(V__min_dstack_size,V_1,B) = 0+ eval_obj_init_21(C,B):1
     [C=3,V__min_dstack_size=2] 
* CE 38: eval_obj_init_8(V__min_dstack_size,V_1,B) = 0+ eval_obj_init_21(C,B):2
     [C=3,V__min_dstack_size=2] 
* CE 39: eval_obj_init_8(V__min_dstack_size,V_1,B) = 0+ eval_obj_init_21(C,B):1
     [C=2,V__min_dstack_size=2] 
* CE 40: eval_obj_init_8(V__min_dstack_size,V_1,B) = 0+ eval_obj_init_21(C,B):2
     [C=2,V__min_dstack_size=2] 

### Cost equations --> "Loop" of eval_obj_init_8/3 
* CEs [38,40] --> Loop 34 
* CEs [37,39] --> Loop 35 

#### Loops of eval_obj_init_8/3 
* Loop 34: eval_obj_init_8(V__min_dstack_size,V_1,B) [V__min_dstack_size=2] 
* Loop 35: eval_obj_init_8(V__min_dstack_size,V_1,B) [V__min_dstack_size=2] 

### Ranking functions of CR eval_obj_init_8(V__min_dstack_size,V_1,B) 

#### Partial ranking functions of CR eval_obj_init_8(V__min_dstack_size,V_1,B) 


### Resulting Chains:eval_obj_init_8(V__min_dstack_size,V_1,B) 
* [35]
* [34]...


### Merging Chains  eval_obj_init_8/3 into  External patterns of execution 
* [[35]] --> 1 
* [[34]] --> 2 


### Specialization of cost equations eval_obj_init_start/2 
* CE 2 is refined into CE [41,42] 


#### Refined cost equations eval_obj_init_start/2 
* CE 41: eval_obj_init_start(V__min_dstack_size,B) = 0+ eval_obj_init_8(C,D,B):1
     [C=2] 
* CE 42: eval_obj_init_start(V__min_dstack_size,B) = 0+ eval_obj_init_8(C,D,B):2
     [C=2] 

### Cost equations --> "Loop" of eval_obj_init_start/2 
* CEs [42] --> Loop 36 
* CEs [41] --> Loop 37 

#### Loops of eval_obj_init_start/2 
* Loop 36: eval_obj_init_start(V__min_dstack_size,B) [] 
* Loop 37: eval_obj_init_start(V__min_dstack_size,B) [] 

### Ranking functions of CR eval_obj_init_start(V__min_dstack_size,B) 

#### Partial ranking functions of CR eval_obj_init_start(V__min_dstack_size,B) 


### Resulting Chains:eval_obj_init_start(V__min_dstack_size,B) 
* [37]
* [36]...


### Merging Chains  eval_obj_init_start/2 into  External patterns of execution 
* [[37]] --> 1 
* [[36]] --> 2 


Computing Bounds
=====================================

#### Cost of loops [17] 

 * loop 17:eval_obj_init_bb6_in(V__min_dstack_size,B,C) -> [eval_obj_init_bb6_in(V__min_dstack_size',B',C')] 
1
#### Cost of phase [17]:eval_obj_init_bb6_in(V__min_dstack_size,B,C) -> [eval_obj_init_bb6_in(V__min_dstack_size',B',C')] 
1*it(17)+0
#### Cost of phase [17]:eval_obj_init_bb6_in(V__min_dstack_size,B,C) -> [eval_obj_init_bb6_in(V__min_dstack_size',B',C')] 
1*it(17)+0
#### Cost of chains of eval_obj_init_bb6_in(V__min_dstack_size,B,C):
* Chain [[17]]...: 1*it(17)+0
  with precondition: [B=2] 

* Chain [[17],18]: 1*it(17)+0
  with precondition: [B=2,V__min_dstack_size=C] 

* Chain [18]: 0
  with precondition: [B=2,C=V__min_dstack_size] 


#### Cost of loops [20] 

 * loop 20:eval_obj_init_bb4_in(V__min_dstack_size,B,C,D) -> [eval_obj_init_bb4_in(V__min_dstack_size',B',C',D')] 
1*s(3)+2
#### Cost of phase [20]:eval_obj_init_bb4_in(V__min_dstack_size,B,C,D) -> [eval_obj_init_bb4_in(V__min_dstack_size',B',C',D')] 
3*it(20)+0
#### Cost of phase [20]:eval_obj_init_bb4_in(V__min_dstack_size,B,C,D) -> [eval_obj_init_bb4_in(V__min_dstack_size',B',C',D')] 
3*it(20)+0
#### Cost of phase [20]:eval_obj_init_bb4_in(V__min_dstack_size,B,C,D) -> [eval_obj_init_bb4_in(V__min_dstack_size',B',C',D')] 
3*it(20)+0
#### Cost of chains of eval_obj_init_bb4_in(V__min_dstack_size,B,C,D):
* Chain [[20]]...: 3*it(20)+0
  with precondition: [] 

* Chain [[20],21]: 3*it(20)+0
  with precondition: [B=3,D=0,V__min_dstack_size=C,3>=V__min_dstack_size,V__min_dstack_size>=2] 

* Chain [[20],19]...: 4*it(20)+2
  with precondition: [3>=V__min_dstack_size,V__min_dstack_size>=2] 

* Chain [21]: 0
  with precondition: [B=3,D=0,V__min_dstack_size=C,3>=V__min_dstack_size,V__min_dstack_size>=2] 

* Chain [19]...: 1*s(5)+2
  with precondition: [3>=V__min_dstack_size,V__min_dstack_size>=2] 


#### Cost of loops [22] 

 * loop 22:eval_obj_init_bb12_in(V__min_dstack_size,V_i_0,B,C) -> [eval_obj_init_bb12_in(V__min_dstack_size',V_i_0',B',C')] 
1
#### Cost of phase [22]:eval_obj_init_bb12_in(V__min_dstack_size,V_i_0,B,C) -> [eval_obj_init_bb12_in(V__min_dstack_size',V_i_0',B',C')] 
1*it(22)+0
  Such that:it(22) =< -V_i_0+1
it(22) =< -V_i_0+V_i_0'

#### Cost of chains of eval_obj_init_bb12_in(V__min_dstack_size,V_i_0,B,C):
* Chain [[22],23]: 1*it(22)+0
  Such that:it(22) =< -V_i_0+1

  with precondition: [B=6,V__min_dstack_size=C,0>=V_i_0] 

* Chain [23]: 0
  with precondition: [B=6,C=V__min_dstack_size,V_i_0>=1] 


#### Cost of loops [24] 

 * loop 24:eval_obj_init_bb15_in(V__min_dstack_size,V_i_1,B,C) -> [eval_obj_init_bb15_in(V__min_dstack_size',V_i_1',B',C')] 
1
#### Cost of phase [24]:eval_obj_init_bb15_in(V__min_dstack_size,V_i_1,B,C) -> [eval_obj_init_bb15_in(V__min_dstack_size',V_i_1',B',C')] 
1*it(24)+0
  Such that:it(24) =< -V_i_1+5
it(24) =< -V_i_1+V_i_1'

#### Cost of chains of eval_obj_init_bb15_in(V__min_dstack_size,V_i_1,B,C):
* Chain [[24],25]: 1*it(24)+0
  Such that:it(24) =< -V_i_1+5

  with precondition: [B=5,V__min_dstack_size=C,4>=V_i_1,V_i_1>=0] 


#### Cost of loops [26] 

 * loop 26:eval_obj_init_bb20_in(V__min_dstack_size,V_i1_0,B,C) -> [eval_obj_init_bb20_in(V__min_dstack_size',V_i1_0',B',C')] 
1
#### Cost of phase [26]:eval_obj_init_bb20_in(V__min_dstack_size,V_i1_0,B,C) -> [eval_obj_init_bb20_in(V__min_dstack_size',V_i1_0',B',C')] 
1*it(26)+0
  Such that:it(26) =< -V_i1_0+30
it(26) =< -V_i1_0+V_i1_0'

#### Cost of chains of eval_obj_init_bb20_in(V__min_dstack_size,V_i1_0,B,C):
* Chain [[26],27]: 1*it(26)+0
  Such that:it(26) =< -V_i1_0+30

  with precondition: [B=4,V__min_dstack_size=C,29>=V_i1_0,V_i1_0>=0] 


#### Cost of chains of eval_obj_init_72(V__min_dstack_size,B):
* Chain [28]: 1*s(9)+1
  Such that:s(9) =< 30

  with precondition: [] 


#### Cost of chains of eval_obj_init_35(V__min_dstack_size,B):
* Chain [29]: 1*s(10)+1*s(11)+2
  Such that:s(10) =< 5
s(11) =< 30

  with precondition: [] 


#### Cost of chains of loop_cont_eval_obj_init_bb4_in(F,A,B,C):
* Chain [31]: 1*s(12)+1*s(13)+1*s(14)+3
  Such that:s(13) =< 5
s(14) =< 30
s(12) =< -B+1

  with precondition: [F=3,0>=B] 

* Chain [30]: 1*s(15)+1*s(16)+3
  Such that:s(15) =< 5
s(16) =< 30

  with precondition: [F=3,B>=1] 


#### Cost of chains of eval_obj_init_21(V__min_dstack_size,B):
* Chain [33]: 1*s(17)+1*s(18)+1*s(19)+1*s(20)+4
  Such that:s(20) =< 1
s(18) =< 5
s(19) =< 30

  with precondition: [3>=V__min_dstack_size,V__min_dstack_size>=2] 

* Chain [32]...: 1*aux(4)+0
  with precondition: [3>=V__min_dstack_size,V__min_dstack_size>=2] 


#### Cost of chains of eval_obj_init_8(V__min_dstack_size,V_1,B):
* Chain [35]: 1*aux(8)+0
  with precondition: [V__min_dstack_size=2] 

* Chain [34]...: 1*aux(9)+0
  with precondition: [V__min_dstack_size=2] 


#### Cost of chains of eval_obj_init_start(V__min_dstack_size,B):
* Chain [37]: 1*s(33)+0
  with precondition: [] 

* Chain [36]...: 1*s(34)+0
  with precondition: [] 


Closed-form bounds of eval_obj_init_start(V__min_dstack_size,B): 
-------------------------------------
* Chain [37] with precondition: [] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [36]... with precondition: [] 
    - Upper bound: inf 
    - Complexity: infinity 

### Maximum cost of eval_obj_init_start(V__min_dstack_size,B): inf 
Asymptotic class: infinity 

Time statistics: 
-------------------------------------
* Partial evaluation computed in 103 ms.
* Invariants computed in 92 ms.
   - Backward Invariants 44 ms.
   - Transitive Invariants 19 ms.
* Refinement performed in 151 ms.
* Termination proved in 20 ms.
* Upper bounds computed in 122 ms.
   - Equation cost structures 52 ms.
   - Phase cost structures 33 ms.
   - Chain cost structures 40 ms.
   - Solving cost expressions 0 ms.
* Total analysis performed in 635 ms.


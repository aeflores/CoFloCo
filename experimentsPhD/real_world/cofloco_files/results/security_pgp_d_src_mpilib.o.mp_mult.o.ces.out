Warning: Ignored call to eval_mp_mult_stop/1 in equation eval_mp_mult_bb10_in/1 

Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. non_recursive  : [eval_mp_mult_bb10_in/1]
1. recursive  : [eval_mp_mult_bb4_in/3]
2. recursive  : [eval_mp_mult_26/3,eval_mp_mult_27/3,eval_mp_mult_32/3,eval_mp_mult_33/3,eval_mp_mult_bb6_in/2,eval_mp_mult_bb9_in/3]
3. non_recursive  : [loop_cont_eval_mp_mult_bb6_in/2]
4. non_recursive  : [loop_cont_eval_mp_mult_bb4_in/3]
5. non_recursive  : [eval_mp_mult_8/1]
6. non_recursive  : [eval_mp_mult_7/1]
7. non_recursive  : [eval_mp_mult_bb2_in/1]
8. non_recursive  : [eval_mp_mult_5/1]
9. non_recursive  : [eval_mp_mult_4/1]
10. non_recursive  : [eval_mp_mult_1/1]
11. non_recursive  : [eval_mp_mult_0/1]
12. non_recursive  : [eval_mp_mult_bb0_in/1]
13. non_recursive  : [eval_mp_mult_start/1]

#### Obtained direct recursion through partial evaluation 
0. SCC is completely evaluated into other SCCs
1. SCC is partially evaluated into eval_mp_mult_bb4_in/3
2. SCC is partially evaluated into eval_mp_mult_bb6_in/2
3. SCC is completely evaluated into other SCCs
4. SCC is partially evaluated into loop_cont_eval_mp_mult_bb4_in/3
5. SCC is partially evaluated into eval_mp_mult_8/1
6. SCC is completely evaluated into other SCCs
7. SCC is completely evaluated into other SCCs
8. SCC is partially evaluated into eval_mp_mult_5/1
9. SCC is completely evaluated into other SCCs
10. SCC is partially evaluated into eval_mp_mult_1/1
11. SCC is completely evaluated into other SCCs
12. SCC is completely evaluated into other SCCs
13. SCC is partially evaluated into eval_mp_mult_start/1

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations eval_mp_mult_bb4_in/3 
* CE 10 is refined into CE [15] 
* CE 9 is refined into CE [16] 


#### Refined cost equations eval_mp_mult_bb4_in/3 
* CE 15: eval_mp_mult_bb4_in(A,B,A) = 0
     [B=3] 
* CE 16: eval_mp_mult_bb4_in(V_bits_0,B,C) = 1+ eval_mp_mult_bb4_in(D,B,C)
     [D+1=V_bits_0] 

### Cost equations --> "Loop" of eval_mp_mult_bb4_in/3 
* CEs [16] --> Loop 11 
* CEs [15] --> Loop 12 

#### Loops of eval_mp_mult_bb4_in/3 
* Loop 11: eval_mp_mult_bb4_in(V_bits_0,B,C)->  eval_mp_mult_bb4_in(V_bits_0',B,C)
                  [V_bits_0=V_bits_0'+1] 
* Loop 12: eval_mp_mult_bb4_in(A,B,A) [B=3] 

### Ranking functions of CR eval_mp_mult_bb4_in(V_bits_0,B,C) 

#### Partial ranking functions of CR eval_mp_mult_bb4_in(V_bits_0,B,C) 


### Resulting Chains:eval_mp_mult_bb4_in(V_bits_0,B,C) 
* [[11]]...
* [[11],12]
* [12]


### Merging Chains  eval_mp_mult_bb4_in/3 into  External patterns of execution 
* [[12]] --> 1 
* [[12,[11]]] --> 2 
* [[[11]]] --> 3 


### Specialization of cost equations eval_mp_mult_bb6_in/2 
* CE 14 is refined into CE [17] 
* CE 12 is refined into CE [18] 
* CE 13 is refined into CE [19] 


#### Refined cost equations eval_mp_mult_bb6_in/2 
* CE 17: eval_mp_mult_bb6_in(V_bits_1,B) = 0
     [B=2,V_bits_1=0] 
* CE 18: eval_mp_mult_bb6_in(V_bits_1,B) = 1+ eval_mp_mult_bb6_in(C,D)
     [V_bits_1>=1,V_bits_1=C+1,D=2,B=2] 
* CE 19: eval_mp_mult_bb6_in(V_bits_1,B) = 1+ eval_mp_mult_bb6_in(C,D)
     [0>=V_bits_1+1,V_bits_1=C+1,D=2,B=2] 

### Cost equations --> "Loop" of eval_mp_mult_bb6_in/2 
* CEs [18] --> Loop 13 
* CEs [19] --> Loop 14 
* CEs [17] --> Loop 15 

#### Loops of eval_mp_mult_bb6_in/2 
* Loop 13: eval_mp_mult_bb6_in(V_bits_1,B)->  eval_mp_mult_bb6_in(V_bits_1',B')
                  [V_bits_1>=1,V_bits_1=V_bits_1'+1,B'=2,B=2] 
* Loop 14: eval_mp_mult_bb6_in(V_bits_1,B)->  eval_mp_mult_bb6_in(V_bits_1',B')
                  [0>=V_bits_1+1,V_bits_1=V_bits_1'+1,B'=2,B=2] 
* Loop 15: eval_mp_mult_bb6_in(V_bits_1,B) [B=2,V_bits_1=0] 

### Ranking functions of CR eval_mp_mult_bb6_in(V_bits_1,B) 
* RF of phase [13]: [V_bits_1]

#### Partial ranking functions of CR eval_mp_mult_bb6_in(V_bits_1,B) 
* Partial RF of phase [13]:
  - RF of loop [13:1]:
    V_bits_1


### Resulting Chains:eval_mp_mult_bb6_in(V_bits_1,B) 
* [[14]]...
* [[13],15]
* [15]


### Merging Chains  eval_mp_mult_bb6_in/2 into  External patterns of execution 
* [[15]] --> 1 
* [[15,[13]]] --> 2 
* [[[14]]] --> 3 


### Specialization of cost equations loop_cont_eval_mp_mult_bb4_in/3 
* CE 11 is refined into CE [20,21,22] 


#### Refined cost equations loop_cont_eval_mp_mult_bb4_in/3 
* CE 20: loop_cont_eval_mp_mult_bb4_in(D,A,B) = 1+ eval_mp_mult_bb6_in(E,F):1
     [F=2,E=0,A=0,D=3] 
* CE 21: loop_cont_eval_mp_mult_bb4_in(D,A,B) = 1+ eval_mp_mult_bb6_in(A,E):2
     [A>=1,E=2,D=3] 
* CE 22: loop_cont_eval_mp_mult_bb4_in(D,A,B) = 1+ eval_mp_mult_bb6_in(A,E):3
     [0>=A+1,E=2,D=3] 

### Cost equations --> "Loop" of loop_cont_eval_mp_mult_bb4_in/3 
* CEs [22] --> Loop 16 
* CEs [21] --> Loop 17 
* CEs [20] --> Loop 18 

#### Loops of loop_cont_eval_mp_mult_bb4_in/3 
* Loop 16: loop_cont_eval_mp_mult_bb4_in(D,A,B) [0>=A+1,D=3] 
* Loop 17: loop_cont_eval_mp_mult_bb4_in(D,A,B) [A>=1,D=3] 
* Loop 18: loop_cont_eval_mp_mult_bb4_in(D,A,B) [A=0,D=3] 

### Ranking functions of CR loop_cont_eval_mp_mult_bb4_in(D,A,B) 

#### Partial ranking functions of CR loop_cont_eval_mp_mult_bb4_in(D,A,B) 


### Resulting Chains:loop_cont_eval_mp_mult_bb4_in(D,A,B) 
* [18]
* [17]
* [16]...


### Merging Chains  loop_cont_eval_mp_mult_bb4_in/3 into  External patterns of execution 
* [[18]] --> 1 
* [[17]] --> 2 
* [[16]] --> 3 


### Specialization of cost equations eval_mp_mult_8/1 
* CE 7 is refined into CE [23,24,25,26,27,28,29] 
* CE 8 is refined into CE [30] 


#### Refined cost equations eval_mp_mult_8/1 
* CE 23: eval_mp_mult_8(B) = 1+ eval_mp_mult_bb4_in(C,D,E):1+ loop_cont_eval_mp_mult_bb4_in(F,G,B):1
     [G=0,F=3,E=0,D=3,C=0] 
* CE 24: eval_mp_mult_8(B) = 1+ eval_mp_mult_bb4_in(C,D,C):1+ loop_cont_eval_mp_mult_bb4_in(E,C,B):2
     [C>=1,E=3,D=3] 
* CE 25: eval_mp_mult_8(B) = 1+ eval_mp_mult_bb4_in(C,D,C):1+ loop_cont_eval_mp_mult_bb4_in(E,C,B):3
     [0>=C+1,E=3,D=3] 
* CE 26: eval_mp_mult_8(B) = 1+ eval_mp_mult_bb4_in(C,D,E):2+ loop_cont_eval_mp_mult_bb4_in(F,G,B):1
     [C>=1,G=0,F=3,E=0,D=3] 
* CE 27: eval_mp_mult_8(B) = 1+ eval_mp_mult_bb4_in(C,D,E):2+ loop_cont_eval_mp_mult_bb4_in(F,E,B):2
     [C>=E+1,E>=1,F=3,D=3] 
* CE 28: eval_mp_mult_8(B) = 1+ eval_mp_mult_bb4_in(C,D,E):2+ loop_cont_eval_mp_mult_bb4_in(F,E,B):3
     [C>=E+1,0>=E+1,F=3,D=3] 
* CE 29: eval_mp_mult_8(B) = 1+ eval_mp_mult_bb4_in(C,D,E):3
     [] 
* CE 30: eval_mp_mult_8(B) = 0
     [] 

### Cost equations --> "Loop" of eval_mp_mult_8/1 
* CEs [23,24,26,27,30] --> Loop 19 
* CEs [25,28,29] --> Loop 20 

#### Loops of eval_mp_mult_8/1 
* Loop 19: eval_mp_mult_8(B) [] 
* Loop 20: eval_mp_mult_8(B) [] 

### Ranking functions of CR eval_mp_mult_8(B) 

#### Partial ranking functions of CR eval_mp_mult_8(B) 


### Resulting Chains:eval_mp_mult_8(B) 
* [20]...
* [19]


### Merging Chains  eval_mp_mult_8/1 into  External patterns of execution 
* [[19]] --> 1 
* [[20]] --> 2 


### Specialization of cost equations eval_mp_mult_5/1 
* CE 5 is refined into CE [31] 
* CE 6 is refined into CE [32,33] 


#### Refined cost equations eval_mp_mult_5/1 
* CE 31: eval_mp_mult_5(B) = 0
     [] 
* CE 32: eval_mp_mult_5(B) = 0+ eval_mp_mult_8(B):1
     [] 
* CE 33: eval_mp_mult_5(B) = 0+ eval_mp_mult_8(B):2
     [] 

### Cost equations --> "Loop" of eval_mp_mult_5/1 
* CEs [33] --> Loop 21 
* CEs [31,32] --> Loop 22 

#### Loops of eval_mp_mult_5/1 
* Loop 21: eval_mp_mult_5(B) [] 
* Loop 22: eval_mp_mult_5(B) [] 

### Ranking functions of CR eval_mp_mult_5(B) 

#### Partial ranking functions of CR eval_mp_mult_5(B) 


### Resulting Chains:eval_mp_mult_5(B) 
* [22]
* [21]...


### Merging Chains  eval_mp_mult_5/1 into  External patterns of execution 
* [[22]] --> 1 
* [[21]] --> 2 


### Specialization of cost equations eval_mp_mult_1/1 
* CE 3 is refined into CE [34,35] 
* CE 4 is refined into CE [36,37] 


#### Refined cost equations eval_mp_mult_1/1 
* CE 34: eval_mp_mult_1(B) = 0+ eval_mp_mult_5(B):1
     [] 
* CE 35: eval_mp_mult_1(B) = 0+ eval_mp_mult_5(B):2
     [] 
* CE 36: eval_mp_mult_1(B) = 0+ eval_mp_mult_8(B):1
     [] 
* CE 37: eval_mp_mult_1(B) = 0+ eval_mp_mult_8(B):2
     [] 

### Cost equations --> "Loop" of eval_mp_mult_1/1 
* CEs [35,37] --> Loop 23 
* CEs [34,36] --> Loop 24 

#### Loops of eval_mp_mult_1/1 
* Loop 23: eval_mp_mult_1(B) [] 
* Loop 24: eval_mp_mult_1(B) [] 

### Ranking functions of CR eval_mp_mult_1(B) 

#### Partial ranking functions of CR eval_mp_mult_1(B) 


### Resulting Chains:eval_mp_mult_1(B) 
* [24]
* [23]...


### Merging Chains  eval_mp_mult_1/1 into  External patterns of execution 
* [[24]] --> 1 
* [[23]] --> 2 


### Specialization of cost equations eval_mp_mult_start/1 
* CE 2 is refined into CE [38,39] 


#### Refined cost equations eval_mp_mult_start/1 
* CE 38: eval_mp_mult_start(B) = 0+ eval_mp_mult_1(B):1
     [] 
* CE 39: eval_mp_mult_start(B) = 0+ eval_mp_mult_1(B):2
     [] 

### Cost equations --> "Loop" of eval_mp_mult_start/1 
* CEs [39] --> Loop 25 
* CEs [38] --> Loop 26 

#### Loops of eval_mp_mult_start/1 
* Loop 25: eval_mp_mult_start(B) [] 
* Loop 26: eval_mp_mult_start(B) [] 

### Ranking functions of CR eval_mp_mult_start(B) 

#### Partial ranking functions of CR eval_mp_mult_start(B) 


### Resulting Chains:eval_mp_mult_start(B) 
* [26]
* [25]...


### Merging Chains  eval_mp_mult_start/1 into  External patterns of execution 
* [[26]] --> 1 
* [[25]] --> 2 


Computing Bounds
=====================================

#### Cost of loops [11] 

 * loop 11:eval_mp_mult_bb4_in(V_bits_0,B,C) -> [eval_mp_mult_bb4_in(V_bits_0',B',C')] 
1
#### Cost of phase [11]:eval_mp_mult_bb4_in(V_bits_0,B,C) -> [eval_mp_mult_bb4_in(V_bits_0',B',C')] 
1*it(11)+0
#### Cost of phase [11]:eval_mp_mult_bb4_in(V_bits_0,B,C) -> [eval_mp_mult_bb4_in(V_bits_0',B',C')] 
1*it(11)+0
#### Cost of chains of eval_mp_mult_bb4_in(V_bits_0,B,C):
* Chain [[11]]...: 1*it(11)+0
  with precondition: [] 

* Chain [[11],12]: 1*it(11)+0
  with precondition: [B=3,V_bits_0>=C+1] 

* Chain [12]: 0
  with precondition: [B=3,C=V_bits_0] 


#### Cost of loops [14] 

 * loop 14:eval_mp_mult_bb6_in(V_bits_1,B) -> [eval_mp_mult_bb6_in(V_bits_1',B')] 
1
#### Cost of phase [14]:eval_mp_mult_bb6_in(V_bits_1,B) -> [eval_mp_mult_bb6_in(V_bits_1',B')] 
1*it(14)+0
#### Cost of loops [13] 

 * loop 13:eval_mp_mult_bb6_in(V_bits_1,B) -> [eval_mp_mult_bb6_in(V_bits_1',B')] 
1
#### Cost of phase [13]:eval_mp_mult_bb6_in(V_bits_1,B) -> [eval_mp_mult_bb6_in(V_bits_1',B')] 
1*it(13)+0
  Such that:it(13) =< V_bits_1
it(13) =< V_bits_1-V_bits_1'

#### Cost of chains of eval_mp_mult_bb6_in(V_bits_1,B):
* Chain [[14]]...: 1*it(14)+0
  with precondition: [0>=V_bits_1+1,B=2] 

* Chain [[13],15]: 1*it(13)+0
  Such that:it(13) =< V_bits_1

  with precondition: [B=2,V_bits_1>=1] 

* Chain [15]: 0
  with precondition: [V_bits_1=0,B=2] 


#### Cost of chains of loop_cont_eval_mp_mult_bb4_in(D,A,B):
* Chain [18]: 1
  with precondition: [D=3,A=0] 

* Chain [17]: 1*s(1)+1
  Such that:s(1) =< A

  with precondition: [D=3,A>=1] 

* Chain [16]...: 1*s(2)+1
  with precondition: [D=3,0>=A+1] 


#### Cost of chains of eval_mp_mult_8(B):
* Chain [20]...: 1*aux(1)+0
  with precondition: [] 

* Chain [19]: 1*aux(2)+0
  with precondition: [] 


#### Cost of chains of eval_mp_mult_5(B):
* Chain [22]: 1*aux(3)+0
  with precondition: [] 

* Chain [21]...: 1*s(12)+0
  with precondition: [] 


#### Cost of chains of eval_mp_mult_1(B):
* Chain [24]: 1*aux(4)+0
  with precondition: [] 

* Chain [23]...: 1*aux(5)+0
  with precondition: [] 


#### Cost of chains of eval_mp_mult_start(B):
* Chain [26]: 1*s(17)+0
  with precondition: [] 

* Chain [25]...: 1*s(18)+0
  with precondition: [] 


Closed-form bounds of eval_mp_mult_start(B): 
-------------------------------------
* Chain [26] with precondition: [] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [25]... with precondition: [] 
    - Upper bound: inf 
    - Complexity: infinity 

### Maximum cost of eval_mp_mult_start(B): inf 
Asymptotic class: infinity 

Time statistics: 
-------------------------------------
* Partial evaluation computed in 10 ms.
* Invariants computed in 11 ms.
   - Backward Invariants 4 ms.
   - Transitive Invariants 3 ms.
* Refinement performed in 25 ms.
* Termination proved in 2 ms.
* Upper bounds computed in 18 ms.
   - Equation cost structures 10 ms.
   - Phase cost structures 4 ms.
   - Chain cost structures 5 ms.
   - Solving cost expressions 1 ms.
* Total analysis performed in 82 ms.


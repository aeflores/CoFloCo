Warning: Ignored call to eval_BF_cbc_encrypt_stop/1 in equation eval_BF_cbc_encrypt_bb28_in/1 

Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. recursive  : [eval_BF_cbc_encrypt_235/3,eval_BF_cbc_encrypt_236/3,eval_BF_cbc_encrypt_bb15_in/3]
1. recursive  : [eval_BF_cbc_encrypt_62/2,eval_BF_cbc_encrypt_63/2,eval_BF_cbc_encrypt_bb1_in/2]
2. non_recursive  : [eval_BF_cbc_encrypt_bb28_in/1]
3. non_recursive  : [eval_BF_cbc_encrypt_bb27_in/2]
4. non_recursive  : [eval_BF_cbc_encrypt_NewDefault36_in/2]
5. non_recursive  : [eval_BF_cbc_encrypt_bb26_in/2]
6. non_recursive  : [eval_BF_cbc_encrypt_bb25_in/2]
7. non_recursive  : [eval_BF_cbc_encrypt_bb24_in/2]
8. non_recursive  : [eval_BF_cbc_encrypt_bb23_in/2]
9. non_recursive  : [eval_BF_cbc_encrypt_bb22_in/2]
10. non_recursive  : [eval_BF_cbc_encrypt_bb21_in/2]
11. non_recursive  : [eval_BF_cbc_encrypt_bb20_in/2]
12. non_recursive  : [eval_BF_cbc_encrypt_303/2]
13. non_recursive  : [eval_BF_cbc_encrypt_302/2]
14. non_recursive  : [loop_cont_eval_BF_cbc_encrypt_bb15_in/3]
15. non_recursive  : [eval_BF_cbc_encrypt_bb14_in/1]
16. non_recursive  : [eval_BF_cbc_encrypt_141/1]
17. non_recursive  : [eval_BF_cbc_encrypt_140/1]
18. non_recursive  : [eval_BF_cbc_encrypt_bb13_in/1]
19. non_recursive  : [eval_BF_cbc_encrypt_NewDefault_in/1]
20. non_recursive  : [eval_BF_cbc_encrypt_bb12_in/1]
21. non_recursive  : [eval_BF_cbc_encrypt_bb11_in/1]
22. non_recursive  : [eval_BF_cbc_encrypt_bb10_in/1]
23. non_recursive  : [eval_BF_cbc_encrypt_bb9_in/1]
24. non_recursive  : [eval_BF_cbc_encrypt_bb8_in/1]
25. non_recursive  : [eval_BF_cbc_encrypt_bb7_in/1]
26. non_recursive  : [eval_BF_cbc_encrypt_bb6_in/1]
27. non_recursive  : [loop_cont_eval_BF_cbc_encrypt_bb1_in/2]
28. non_recursive  : [eval_BF_cbc_encrypt_bb0_in/2]
29. non_recursive  : [eval_BF_cbc_encrypt_start/3]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into eval_BF_cbc_encrypt_bb15_in/3
1. SCC is partially evaluated into eval_BF_cbc_encrypt_bb1_in/2
2. SCC is completely evaluated into other SCCs
3. SCC is completely evaluated into other SCCs
4. SCC is completely evaluated into other SCCs
5. SCC is completely evaluated into other SCCs
6. SCC is completely evaluated into other SCCs
7. SCC is completely evaluated into other SCCs
8. SCC is completely evaluated into other SCCs
9. SCC is completely evaluated into other SCCs
10. SCC is completely evaluated into other SCCs
11. SCC is completely evaluated into other SCCs
12. SCC is partially evaluated into eval_BF_cbc_encrypt_303/2
13. SCC is completely evaluated into other SCCs
14. SCC is partially evaluated into loop_cont_eval_BF_cbc_encrypt_bb15_in/3
15. SCC is completely evaluated into other SCCs
16. SCC is completely evaluated into other SCCs
17. SCC is completely evaluated into other SCCs
18. SCC is completely evaluated into other SCCs
19. SCC is completely evaluated into other SCCs
20. SCC is completely evaluated into other SCCs
21. SCC is completely evaluated into other SCCs
22. SCC is completely evaluated into other SCCs
23. SCC is completely evaluated into other SCCs
24. SCC is completely evaluated into other SCCs
25. SCC is completely evaluated into other SCCs
26. SCC is completely evaluated into other SCCs
27. SCC is partially evaluated into loop_cont_eval_BF_cbc_encrypt_bb1_in/2
28. SCC is partially evaluated into eval_BF_cbc_encrypt_bb0_in/2
29. SCC is partially evaluated into eval_BF_cbc_encrypt_start/3

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations eval_BF_cbc_encrypt_bb15_in/3 
* CE 26 is refined into CE [30] 
* CE 25 is refined into CE [31] 
* CE 24 is refined into CE [32] 


#### Refined cost equations eval_BF_cbc_encrypt_bb15_in/3 
* CE 30: eval_BF_cbc_encrypt_bb15_in(A,B,A) = 0
     [0>=A+1,B=12] 
* CE 31: eval_BF_cbc_encrypt_bb15_in(A,B,A) = 0
     [0>=A+1,B=11] 
* CE 32: eval_BF_cbc_encrypt_bb15_in(V_l_1,B,C) = 1+ eval_BF_cbc_encrypt_bb15_in(D,B,C)
     [V_l_1>=0,V_l_1=D+8] 

### Cost equations --> "Loop" of eval_BF_cbc_encrypt_bb15_in/3 
* CEs [32] --> Loop 28 
* CEs [30] --> Loop 29 
* CEs [31] --> Loop 30 

#### Loops of eval_BF_cbc_encrypt_bb15_in/3 
* Loop 28: eval_BF_cbc_encrypt_bb15_in(V_l_1,B,C)->  eval_BF_cbc_encrypt_bb15_in(V_l_1',B,C)
                  [V_l_1>=0,V_l_1=V_l_1'+8] 
* Loop 29: eval_BF_cbc_encrypt_bb15_in(A,B,A) [0>=A+1,B=12] 
* Loop 30: eval_BF_cbc_encrypt_bb15_in(A,B,A) [0>=A+1,B=11] 

### Ranking functions of CR eval_BF_cbc_encrypt_bb15_in(V_l_1,B,C) 
* RF of phase [28]: [V_l_1+1]

#### Partial ranking functions of CR eval_BF_cbc_encrypt_bb15_in(V_l_1,B,C) 
* Partial RF of phase [28]:
  - RF of loop [28:1]:
    V_l_1+1


### Resulting Chains:eval_BF_cbc_encrypt_bb15_in(V_l_1,B,C) 
* [[28],30]
* [[28],29]
* [30]
* [29]


### Merging Chains  eval_BF_cbc_encrypt_bb15_in/3 into  External patterns of execution 
* [[30]] --> 1 
* [[30,[28]]] --> 2 
* [[29]] --> 3 
* [[29,[28]]] --> 4 


### Specialization of cost equations eval_BF_cbc_encrypt_bb1_in/2 
* CE 14 is refined into CE [33] 
* CE 13 is refined into CE [34] 
* CE 12 is refined into CE [35] 
* CE 11 is refined into CE [36] 
* CE 10 is refined into CE [37] 
* CE 9 is refined into CE [38] 
* CE 8 is refined into CE [39] 
* CE 7 is refined into CE [40] 
* CE 6 is refined into CE [41] 
* CE 5 is refined into CE [42] 


#### Refined cost equations eval_BF_cbc_encrypt_bb1_in/2 
* CE 33: eval_BF_cbc_encrypt_bb1_in(V_l_0,B) = 0
     [0>=V_l_0+1,B=10] 
* CE 34: eval_BF_cbc_encrypt_bb1_in(V_l_0,B) = 0
     [0>=V_l_0+1,B=9] 
* CE 35: eval_BF_cbc_encrypt_bb1_in(V_l_0,B) = 0
     [0>=V_l_0+1,B=8] 
* CE 36: eval_BF_cbc_encrypt_bb1_in(V_l_0,B) = 0
     [0>=V_l_0+1,B=7] 
* CE 37: eval_BF_cbc_encrypt_bb1_in(V_l_0,B) = 0
     [0>=V_l_0+1,B=6] 
* CE 38: eval_BF_cbc_encrypt_bb1_in(V_l_0,B) = 0
     [0>=V_l_0+1,B=5] 
* CE 39: eval_BF_cbc_encrypt_bb1_in(V_l_0,B) = 0
     [0>=V_l_0+1,B=4] 
* CE 40: eval_BF_cbc_encrypt_bb1_in(V_l_0,B) = 0
     [0>=V_l_0+1,B=3] 
* CE 41: eval_BF_cbc_encrypt_bb1_in(V_l_0,B) = 0
     [0>=V_l_0+1,B=2] 
* CE 42: eval_BF_cbc_encrypt_bb1_in(V_l_0,B) = 1+ eval_BF_cbc_encrypt_bb1_in(C,B)
     [V_l_0>=0,V_l_0=C+8] 

### Cost equations --> "Loop" of eval_BF_cbc_encrypt_bb1_in/2 
* CEs [42] --> Loop 31 
* CEs [33] --> Loop 32 
* CEs [34] --> Loop 33 
* CEs [35] --> Loop 34 
* CEs [36] --> Loop 35 
* CEs [37] --> Loop 36 
* CEs [38] --> Loop 37 
* CEs [39] --> Loop 38 
* CEs [40] --> Loop 39 
* CEs [41] --> Loop 40 

#### Loops of eval_BF_cbc_encrypt_bb1_in/2 
* Loop 31: eval_BF_cbc_encrypt_bb1_in(V_l_0,B)->  eval_BF_cbc_encrypt_bb1_in(V_l_0',B)
                  [V_l_0>=0,V_l_0=V_l_0'+8] 
* Loop 32: eval_BF_cbc_encrypt_bb1_in(V_l_0,B) [0>=V_l_0+1,B=10] 
* Loop 33: eval_BF_cbc_encrypt_bb1_in(V_l_0,B) [0>=V_l_0+1,B=9] 
* Loop 34: eval_BF_cbc_encrypt_bb1_in(V_l_0,B) [0>=V_l_0+1,B=8] 
* Loop 35: eval_BF_cbc_encrypt_bb1_in(V_l_0,B) [0>=V_l_0+1,B=7] 
* Loop 36: eval_BF_cbc_encrypt_bb1_in(V_l_0,B) [0>=V_l_0+1,B=6] 
* Loop 37: eval_BF_cbc_encrypt_bb1_in(V_l_0,B) [0>=V_l_0+1,B=5] 
* Loop 38: eval_BF_cbc_encrypt_bb1_in(V_l_0,B) [0>=V_l_0+1,B=4] 
* Loop 39: eval_BF_cbc_encrypt_bb1_in(V_l_0,B) [0>=V_l_0+1,B=3] 
* Loop 40: eval_BF_cbc_encrypt_bb1_in(V_l_0,B) [0>=V_l_0+1,B=2] 

### Ranking functions of CR eval_BF_cbc_encrypt_bb1_in(V_l_0,B) 
* RF of phase [31]: [V_l_0+1]

#### Partial ranking functions of CR eval_BF_cbc_encrypt_bb1_in(V_l_0,B) 
* Partial RF of phase [31]:
  - RF of loop [31:1]:
    V_l_0+1


### Resulting Chains:eval_BF_cbc_encrypt_bb1_in(V_l_0,B) 
* [[31],40]
* [[31],39]
* [[31],38]
* [[31],37]
* [[31],36]
* [[31],35]
* [[31],34]
* [[31],33]
* [[31],32]
* [40]
* [39]
* [38]
* [37]
* [36]
* [35]
* [34]
* [33]
* [32]


### Merging Chains  eval_BF_cbc_encrypt_bb1_in/2 into  External patterns of execution 
* [[40]] --> 1 
* [[40,[31]]] --> 2 
* [[39]] --> 3 
* [[39,[31]]] --> 4 
* [[38]] --> 5 
* [[38,[31]]] --> 6 
* [[37]] --> 7 
* [[37,[31]]] --> 8 
* [[36]] --> 9 
* [[36,[31]]] --> 10 
* [[35]] --> 11 
* [[35,[31]]] --> 12 
* [[34]] --> 13 
* [[34,[31]]] --> 14 
* [[33]] --> 15 
* [[33,[31]]] --> 16 
* [[32]] --> 17 
* [[32,[31]]] --> 18 


### Specialization of cost equations eval_BF_cbc_encrypt_303/2 
* CE 29 is refined into CE [43] 


#### Refined cost equations eval_BF_cbc_encrypt_303/2 
* CE 43: eval_BF_cbc_encrypt_303(V_l_1,B) = 0
     [] 

### Cost equations --> "Loop" of eval_BF_cbc_encrypt_303/2 
* CEs [43] --> Loop 41 

#### Loops of eval_BF_cbc_encrypt_303/2 
* Loop 41: eval_BF_cbc_encrypt_303(V_l_1,B) [] 

### Ranking functions of CR eval_BF_cbc_encrypt_303(V_l_1,B) 

#### Partial ranking functions of CR eval_BF_cbc_encrypt_303(V_l_1,B) 


### Resulting Chains:eval_BF_cbc_encrypt_303(V_l_1,B) 
* [41]


### Merging Chains  eval_BF_cbc_encrypt_303/2 into  External patterns of execution 
* [[41]] --> 1 


### Specialization of cost equations loop_cont_eval_BF_cbc_encrypt_bb15_in/3 
* CE 28 is refined into CE [44] 
* CE 27 is refined into CE [45] 


#### Refined cost equations loop_cont_eval_BF_cbc_encrypt_bb15_in/3 
* CE 44: loop_cont_eval_BF_cbc_encrypt_bb15_in(D,A,B) = 0
     [D=12] 
* CE 45: loop_cont_eval_BF_cbc_encrypt_bb15_in(D,A,B) = 0+ eval_BF_cbc_encrypt_303(A,B):1
     [D=11] 

### Cost equations --> "Loop" of loop_cont_eval_BF_cbc_encrypt_bb15_in/3 
* CEs [44] --> Loop 42 
* CEs [45] --> Loop 43 

#### Loops of loop_cont_eval_BF_cbc_encrypt_bb15_in/3 
* Loop 42: loop_cont_eval_BF_cbc_encrypt_bb15_in(D,A,B) [D=12] 
* Loop 43: loop_cont_eval_BF_cbc_encrypt_bb15_in(D,A,B) [D=11] 

### Ranking functions of CR loop_cont_eval_BF_cbc_encrypt_bb15_in(D,A,B) 

#### Partial ranking functions of CR loop_cont_eval_BF_cbc_encrypt_bb15_in(D,A,B) 


### Resulting Chains:loop_cont_eval_BF_cbc_encrypt_bb15_in(D,A,B) 
* [43]
* [42]


### Merging Chains  loop_cont_eval_BF_cbc_encrypt_bb15_in/3 into  External patterns of execution 
* [[43]] --> 1 
* [[42]] --> 2 


### Specialization of cost equations loop_cont_eval_BF_cbc_encrypt_bb1_in/2 
* CE 23 is refined into CE [46] 
* CE 22 is refined into CE [47] 
* CE 21 is refined into CE [48] 
* CE 20 is refined into CE [49] 
* CE 19 is refined into CE [50] 
* CE 18 is refined into CE [51] 
* CE 17 is refined into CE [52] 
* CE 16 is refined into CE [53] 
* CE 15 is refined into CE [54] 


#### Refined cost equations loop_cont_eval_BF_cbc_encrypt_bb1_in/2 
* CE 46: loop_cont_eval_BF_cbc_encrypt_bb1_in(C,A) = 0
     [C=10] 
* CE 47: loop_cont_eval_BF_cbc_encrypt_bb1_in(C,A) = 0
     [C=9] 
* CE 48: loop_cont_eval_BF_cbc_encrypt_bb1_in(C,A) = 0
     [C=8] 
* CE 49: loop_cont_eval_BF_cbc_encrypt_bb1_in(C,A) = 0
     [C=7] 
* CE 50: loop_cont_eval_BF_cbc_encrypt_bb1_in(C,A) = 0
     [C=6] 
* CE 51: loop_cont_eval_BF_cbc_encrypt_bb1_in(C,A) = 0
     [C=5] 
* CE 52: loop_cont_eval_BF_cbc_encrypt_bb1_in(C,A) = 0
     [C=4] 
* CE 53: loop_cont_eval_BF_cbc_encrypt_bb1_in(C,A) = 0
     [C=3] 
* CE 54: loop_cont_eval_BF_cbc_encrypt_bb1_in(C,A) = 0
     [C=2] 

### Cost equations --> "Loop" of loop_cont_eval_BF_cbc_encrypt_bb1_in/2 
* CEs [46] --> Loop 44 
* CEs [47] --> Loop 45 
* CEs [48] --> Loop 46 
* CEs [49] --> Loop 47 
* CEs [50] --> Loop 48 
* CEs [51] --> Loop 49 
* CEs [52] --> Loop 50 
* CEs [53] --> Loop 51 
* CEs [54] --> Loop 52 

#### Loops of loop_cont_eval_BF_cbc_encrypt_bb1_in/2 
* Loop 44: loop_cont_eval_BF_cbc_encrypt_bb1_in(C,A) [C=10] 
* Loop 45: loop_cont_eval_BF_cbc_encrypt_bb1_in(C,A) [C=9] 
* Loop 46: loop_cont_eval_BF_cbc_encrypt_bb1_in(C,A) [C=8] 
* Loop 47: loop_cont_eval_BF_cbc_encrypt_bb1_in(C,A) [C=7] 
* Loop 48: loop_cont_eval_BF_cbc_encrypt_bb1_in(C,A) [C=6] 
* Loop 49: loop_cont_eval_BF_cbc_encrypt_bb1_in(C,A) [C=5] 
* Loop 50: loop_cont_eval_BF_cbc_encrypt_bb1_in(C,A) [C=4] 
* Loop 51: loop_cont_eval_BF_cbc_encrypt_bb1_in(C,A) [C=3] 
* Loop 52: loop_cont_eval_BF_cbc_encrypt_bb1_in(C,A) [C=2] 

### Ranking functions of CR loop_cont_eval_BF_cbc_encrypt_bb1_in(C,A) 

#### Partial ranking functions of CR loop_cont_eval_BF_cbc_encrypt_bb1_in(C,A) 


### Resulting Chains:loop_cont_eval_BF_cbc_encrypt_bb1_in(C,A) 
* [52]
* [51]
* [50]
* [49]
* [48]
* [47]
* [46]
* [45]
* [44]


### Merging Chains  loop_cont_eval_BF_cbc_encrypt_bb1_in/2 into  External patterns of execution 
* [[52]] --> 1 
* [[51]] --> 2 
* [[50]] --> 3 
* [[49]] --> 4 
* [[48]] --> 5 
* [[47]] --> 6 
* [[46]] --> 7 
* [[45]] --> 8 
* [[44]] --> 9 


### Specialization of cost equations eval_BF_cbc_encrypt_bb0_in/2 
* CE 3 is refined into CE [55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72] 
* CE 4 is refined into CE [73,74,75,76] 


#### Refined cost equations eval_BF_cbc_encrypt_bb0_in/2 
* CE 55: eval_BF_cbc_encrypt_bb0_in(V_length,B) = 1+ eval_BF_cbc_encrypt_bb1_in(C,D):1+ loop_cont_eval_BF_cbc_encrypt_bb1_in(E,B):1
     [0>=C+1,C+8=V_length,E=2,D=2] 
* CE 56: eval_BF_cbc_encrypt_bb0_in(V_length,B) = 1+ eval_BF_cbc_encrypt_bb1_in(C,D):2+ loop_cont_eval_BF_cbc_encrypt_bb1_in(E,B):1
     [C>=0,C+8=V_length,E=2,D=2] 
* CE 57: eval_BF_cbc_encrypt_bb0_in(V_length,B) = 1+ eval_BF_cbc_encrypt_bb1_in(C,D):3+ loop_cont_eval_BF_cbc_encrypt_bb1_in(E,B):2
     [0>=C+1,C+8=V_length,E=3,D=3] 
* CE 58: eval_BF_cbc_encrypt_bb0_in(V_length,B) = 1+ eval_BF_cbc_encrypt_bb1_in(C,D):4+ loop_cont_eval_BF_cbc_encrypt_bb1_in(E,B):2
     [C>=0,C+8=V_length,E=3,D=3] 
* CE 59: eval_BF_cbc_encrypt_bb0_in(V_length,B) = 1+ eval_BF_cbc_encrypt_bb1_in(C,D):5+ loop_cont_eval_BF_cbc_encrypt_bb1_in(E,B):3
     [0>=C+1,C+8=V_length,E=4,D=4] 
* CE 60: eval_BF_cbc_encrypt_bb0_in(V_length,B) = 1+ eval_BF_cbc_encrypt_bb1_in(C,D):6+ loop_cont_eval_BF_cbc_encrypt_bb1_in(E,B):3
     [C>=0,C+8=V_length,E=4,D=4] 
* CE 61: eval_BF_cbc_encrypt_bb0_in(V_length,B) = 1+ eval_BF_cbc_encrypt_bb1_in(C,D):7+ loop_cont_eval_BF_cbc_encrypt_bb1_in(E,B):4
     [0>=C+1,C+8=V_length,E=5,D=5] 
* CE 62: eval_BF_cbc_encrypt_bb0_in(V_length,B) = 1+ eval_BF_cbc_encrypt_bb1_in(C,D):8+ loop_cont_eval_BF_cbc_encrypt_bb1_in(E,B):4
     [C>=0,C+8=V_length,E=5,D=5] 
* CE 63: eval_BF_cbc_encrypt_bb0_in(V_length,B) = 1+ eval_BF_cbc_encrypt_bb1_in(C,D):9+ loop_cont_eval_BF_cbc_encrypt_bb1_in(E,B):5
     [0>=C+1,C+8=V_length,E=6,D=6] 
* CE 64: eval_BF_cbc_encrypt_bb0_in(V_length,B) = 1+ eval_BF_cbc_encrypt_bb1_in(C,D):10+ loop_cont_eval_BF_cbc_encrypt_bb1_in(E,B):5
     [C>=0,C+8=V_length,E=6,D=6] 
* CE 65: eval_BF_cbc_encrypt_bb0_in(V_length,B) = 1+ eval_BF_cbc_encrypt_bb1_in(C,D):11+ loop_cont_eval_BF_cbc_encrypt_bb1_in(E,B):6
     [0>=C+1,C+8=V_length,E=7,D=7] 
* CE 66: eval_BF_cbc_encrypt_bb0_in(V_length,B) = 1+ eval_BF_cbc_encrypt_bb1_in(C,D):12+ loop_cont_eval_BF_cbc_encrypt_bb1_in(E,B):6
     [C>=0,C+8=V_length,E=7,D=7] 
* CE 67: eval_BF_cbc_encrypt_bb0_in(V_length,B) = 1+ eval_BF_cbc_encrypt_bb1_in(C,D):13+ loop_cont_eval_BF_cbc_encrypt_bb1_in(E,B):7
     [0>=C+1,C+8=V_length,E=8,D=8] 
* CE 68: eval_BF_cbc_encrypt_bb0_in(V_length,B) = 1+ eval_BF_cbc_encrypt_bb1_in(C,D):14+ loop_cont_eval_BF_cbc_encrypt_bb1_in(E,B):7
     [C>=0,C+8=V_length,E=8,D=8] 
* CE 69: eval_BF_cbc_encrypt_bb0_in(V_length,B) = 1+ eval_BF_cbc_encrypt_bb1_in(C,D):15+ loop_cont_eval_BF_cbc_encrypt_bb1_in(E,B):8
     [0>=C+1,C+8=V_length,E=9,D=9] 
* CE 70: eval_BF_cbc_encrypt_bb0_in(V_length,B) = 1+ eval_BF_cbc_encrypt_bb1_in(C,D):16+ loop_cont_eval_BF_cbc_encrypt_bb1_in(E,B):8
     [C>=0,C+8=V_length,E=9,D=9] 
* CE 71: eval_BF_cbc_encrypt_bb0_in(V_length,B) = 1+ eval_BF_cbc_encrypt_bb1_in(C,D):17+ loop_cont_eval_BF_cbc_encrypt_bb1_in(E,B):9
     [0>=C+1,C+8=V_length,E=10,D=10] 
* CE 72: eval_BF_cbc_encrypt_bb0_in(V_length,B) = 1+ eval_BF_cbc_encrypt_bb1_in(C,D):18+ loop_cont_eval_BF_cbc_encrypt_bb1_in(E,B):9
     [C>=0,C+8=V_length,E=10,D=10] 
* CE 73: eval_BF_cbc_encrypt_bb0_in(V_length,B) = 1+ eval_BF_cbc_encrypt_bb15_in(C,D,C):1+ loop_cont_eval_BF_cbc_encrypt_bb15_in(E,C,B):1
     [0>=C+1,C+8=V_length,E=11,D=11] 
* CE 74: eval_BF_cbc_encrypt_bb0_in(V_length,B) = 1+ eval_BF_cbc_encrypt_bb15_in(C,D,E):2+ loop_cont_eval_BF_cbc_encrypt_bb15_in(F,E,B):1
     [C>=E+8,E+8>=0,0>=E+1,C+8=V_length,F=11,D=11] 
* CE 75: eval_BF_cbc_encrypt_bb0_in(V_length,B) = 1+ eval_BF_cbc_encrypt_bb15_in(C,D,C):3+ loop_cont_eval_BF_cbc_encrypt_bb15_in(E,C,B):2
     [0>=C+1,C+8=V_length,E=12,D=12] 
* CE 76: eval_BF_cbc_encrypt_bb0_in(V_length,B) = 1+ eval_BF_cbc_encrypt_bb15_in(C,D,E):4+ loop_cont_eval_BF_cbc_encrypt_bb15_in(F,E,B):2
     [C>=E+8,E+8>=0,0>=E+1,C+8=V_length,F=12,D=12] 

### Cost equations --> "Loop" of eval_BF_cbc_encrypt_bb0_in/2 
* CEs [56,58,60,62,64,66,68,70,72,74,76] --> Loop 53 
* CEs [55,57,59,61,63,65,67,69,71,73,75] --> Loop 54 

#### Loops of eval_BF_cbc_encrypt_bb0_in/2 
* Loop 53: eval_BF_cbc_encrypt_bb0_in(V_length,B) [V_length>=8] 
* Loop 54: eval_BF_cbc_encrypt_bb0_in(V_length,B) [7>=V_length] 

### Ranking functions of CR eval_BF_cbc_encrypt_bb0_in(V_length,B) 

#### Partial ranking functions of CR eval_BF_cbc_encrypt_bb0_in(V_length,B) 


### Resulting Chains:eval_BF_cbc_encrypt_bb0_in(V_length,B) 
* [54]
* [53]


### Merging Chains  eval_BF_cbc_encrypt_bb0_in/2 into  External patterns of execution 
* [[54]] --> 1 
* [[53]] --> 2 


### Specialization of cost equations eval_BF_cbc_encrypt_start/3 
* CE 2 is refined into CE [77,78] 


#### Refined cost equations eval_BF_cbc_encrypt_start/3 
* CE 77: eval_BF_cbc_encrypt_start(V_length,V_encrypt,B) = 0+ eval_BF_cbc_encrypt_bb0_in(V_length,B):1
     [7>=V_length] 
* CE 78: eval_BF_cbc_encrypt_start(V_length,V_encrypt,B) = 0+ eval_BF_cbc_encrypt_bb0_in(V_length,B):2
     [V_length>=8] 

### Cost equations --> "Loop" of eval_BF_cbc_encrypt_start/3 
* CEs [78] --> Loop 55 
* CEs [77] --> Loop 56 

#### Loops of eval_BF_cbc_encrypt_start/3 
* Loop 55: eval_BF_cbc_encrypt_start(V_length,V_encrypt,B) [V_length>=8] 
* Loop 56: eval_BF_cbc_encrypt_start(V_length,V_encrypt,B) [7>=V_length] 

### Ranking functions of CR eval_BF_cbc_encrypt_start(V_length,V_encrypt,B) 

#### Partial ranking functions of CR eval_BF_cbc_encrypt_start(V_length,V_encrypt,B) 


### Resulting Chains:eval_BF_cbc_encrypt_start(V_length,V_encrypt,B) 
* [56]
* [55]


### Merging Chains  eval_BF_cbc_encrypt_start/3 into  External patterns of execution 
* [[56]] --> 1 
* [[55]] --> 2 


Computing Bounds
=====================================

#### Cost of loops [28] 

 * loop 28:eval_BF_cbc_encrypt_bb15_in(V_l_1,B,C) -> [eval_BF_cbc_encrypt_bb15_in(V_l_1',B',C')] 
1
#### Cost of phase [28]:eval_BF_cbc_encrypt_bb15_in(V_l_1,B,C) -> [eval_BF_cbc_encrypt_bb15_in(V_l_1',B',C')] 
1*it(28)+0
  Such that:it(28) =< V_l_1+1
it(28) =< V_l_1-V_l_1'

#### Cost of phase [28]:eval_BF_cbc_encrypt_bb15_in(V_l_1,B,C) -> [eval_BF_cbc_encrypt_bb15_in(V_l_1',B',C')] 
1*it(28)+0
  Such that:it(28) =< V_l_1+1
it(28) =< V_l_1-V_l_1'

#### Cost of chains of eval_BF_cbc_encrypt_bb15_in(V_l_1,B,C):
* Chain [[28],30]: 1*it(28)+0
  Such that:it(28) =< V_l_1+1

  with precondition: [B=11,0>=C+1,C+8>=0,V_l_1>=C+8] 

* Chain [[28],29]: 1*it(28)+0
  Such that:it(28) =< V_l_1+1

  with precondition: [B=12,0>=C+1,C+8>=0,V_l_1>=C+8] 

* Chain [30]: 0
  with precondition: [B=11,V_l_1=C,0>=V_l_1+1] 

* Chain [29]: 0
  with precondition: [B=12,V_l_1=C,0>=V_l_1+1] 


#### Cost of loops [31] 

 * loop 31:eval_BF_cbc_encrypt_bb1_in(V_l_0,B) -> [eval_BF_cbc_encrypt_bb1_in(V_l_0',B')] 
1
#### Cost of phase [31]:eval_BF_cbc_encrypt_bb1_in(V_l_0,B) -> [eval_BF_cbc_encrypt_bb1_in(V_l_0',B')] 
1*it(31)+0
  Such that:it(31) =< V_l_0+1
it(31) =< V_l_0-V_l_0'

#### Cost of phase [31]:eval_BF_cbc_encrypt_bb1_in(V_l_0,B) -> [eval_BF_cbc_encrypt_bb1_in(V_l_0',B')] 
1*it(31)+0
  Such that:it(31) =< V_l_0+1
it(31) =< V_l_0-V_l_0'

#### Cost of phase [31]:eval_BF_cbc_encrypt_bb1_in(V_l_0,B) -> [eval_BF_cbc_encrypt_bb1_in(V_l_0',B')] 
1*it(31)+0
  Such that:it(31) =< V_l_0+1
it(31) =< V_l_0-V_l_0'

#### Cost of phase [31]:eval_BF_cbc_encrypt_bb1_in(V_l_0,B) -> [eval_BF_cbc_encrypt_bb1_in(V_l_0',B')] 
1*it(31)+0
  Such that:it(31) =< V_l_0+1
it(31) =< V_l_0-V_l_0'

#### Cost of phase [31]:eval_BF_cbc_encrypt_bb1_in(V_l_0,B) -> [eval_BF_cbc_encrypt_bb1_in(V_l_0',B')] 
1*it(31)+0
  Such that:it(31) =< V_l_0+1
it(31) =< V_l_0-V_l_0'

#### Cost of phase [31]:eval_BF_cbc_encrypt_bb1_in(V_l_0,B) -> [eval_BF_cbc_encrypt_bb1_in(V_l_0',B')] 
1*it(31)+0
  Such that:it(31) =< V_l_0+1
it(31) =< V_l_0-V_l_0'

#### Cost of phase [31]:eval_BF_cbc_encrypt_bb1_in(V_l_0,B) -> [eval_BF_cbc_encrypt_bb1_in(V_l_0',B')] 
1*it(31)+0
  Such that:it(31) =< V_l_0+1
it(31) =< V_l_0-V_l_0'

#### Cost of phase [31]:eval_BF_cbc_encrypt_bb1_in(V_l_0,B) -> [eval_BF_cbc_encrypt_bb1_in(V_l_0',B')] 
1*it(31)+0
  Such that:it(31) =< V_l_0+1
it(31) =< V_l_0-V_l_0'

#### Cost of phase [31]:eval_BF_cbc_encrypt_bb1_in(V_l_0,B) -> [eval_BF_cbc_encrypt_bb1_in(V_l_0',B')] 
1*it(31)+0
  Such that:it(31) =< V_l_0+1
it(31) =< V_l_0-V_l_0'

#### Cost of chains of eval_BF_cbc_encrypt_bb1_in(V_l_0,B):
* Chain [[31],40]: 1*it(31)+0
  Such that:it(31) =< V_l_0+1

  with precondition: [B=2,V_l_0>=0] 

* Chain [[31],39]: 1*it(31)+0
  Such that:it(31) =< V_l_0+1

  with precondition: [B=3,V_l_0>=0] 

* Chain [[31],38]: 1*it(31)+0
  Such that:it(31) =< V_l_0+1

  with precondition: [B=4,V_l_0>=0] 

* Chain [[31],37]: 1*it(31)+0
  Such that:it(31) =< V_l_0+1

  with precondition: [B=5,V_l_0>=0] 

* Chain [[31],36]: 1*it(31)+0
  Such that:it(31) =< V_l_0+1

  with precondition: [B=6,V_l_0>=0] 

* Chain [[31],35]: 1*it(31)+0
  Such that:it(31) =< V_l_0+1

  with precondition: [B=7,V_l_0>=0] 

* Chain [[31],34]: 1*it(31)+0
  Such that:it(31) =< V_l_0+1

  with precondition: [B=8,V_l_0>=0] 

* Chain [[31],33]: 1*it(31)+0
  Such that:it(31) =< V_l_0+1

  with precondition: [B=9,V_l_0>=0] 

* Chain [[31],32]: 1*it(31)+0
  Such that:it(31) =< V_l_0+1

  with precondition: [B=10,V_l_0>=0] 

* Chain [40]: 0
  with precondition: [B=2,0>=V_l_0+1] 

* Chain [39]: 0
  with precondition: [B=3,0>=V_l_0+1] 

* Chain [38]: 0
  with precondition: [B=4,0>=V_l_0+1] 

* Chain [37]: 0
  with precondition: [B=5,0>=V_l_0+1] 

* Chain [36]: 0
  with precondition: [B=6,0>=V_l_0+1] 

* Chain [35]: 0
  with precondition: [B=7,0>=V_l_0+1] 

* Chain [34]: 0
  with precondition: [B=8,0>=V_l_0+1] 

* Chain [33]: 0
  with precondition: [B=9,0>=V_l_0+1] 

* Chain [32]: 0
  with precondition: [B=10,0>=V_l_0+1] 


#### Cost of chains of eval_BF_cbc_encrypt_303(V_l_1,B):
* Chain [41]: 0
  with precondition: [] 


#### Cost of chains of loop_cont_eval_BF_cbc_encrypt_bb15_in(D,A,B):
* Chain [43]: 0
  with precondition: [D=11] 

* Chain [42]: 0
  with precondition: [D=12] 


#### Cost of chains of loop_cont_eval_BF_cbc_encrypt_bb1_in(C,A):
* Chain [52]: 0
  with precondition: [C=2] 

* Chain [51]: 0
  with precondition: [C=3] 

* Chain [50]: 0
  with precondition: [C=4] 

* Chain [49]: 0
  with precondition: [C=5] 

* Chain [48]: 0
  with precondition: [C=6] 

* Chain [47]: 0
  with precondition: [C=7] 

* Chain [46]: 0
  with precondition: [C=8] 

* Chain [45]: 0
  with precondition: [C=9] 

* Chain [44]: 0
  with precondition: [C=10] 


#### Cost of chains of eval_BF_cbc_encrypt_bb0_in(V_length,B):
* Chain [54]: 1
  with precondition: [7>=V_length] 

* Chain [53]: 11*s(1)+1
  Such that:aux(1) =< V_length
s(1) =< aux(1)

  with precondition: [V_length>=8] 


#### Cost of chains of eval_BF_cbc_encrypt_start(V_length,V_encrypt,B):
* Chain [56]: 1
  with precondition: [7>=V_length] 

* Chain [55]: 11*s(13)+1
  Such that:s(12) =< V_length
s(13) =< s(12)

  with precondition: [V_length>=8] 


Closed-form bounds of eval_BF_cbc_encrypt_start(V_length,V_encrypt,B): 
-------------------------------------
* Chain [56] with precondition: [7>=V_length] 
    - Upper bound: 1 
    - Complexity: constant 
* Chain [55] with precondition: [V_length>=8] 
    - Upper bound: 11*V_length+1 
    - Complexity: n 

### Maximum cost of eval_BF_cbc_encrypt_start(V_length,V_encrypt,B): nat(V_length)*11+1 
Asymptotic class: n 

Time statistics: 
-------------------------------------
* Partial evaluation computed in 39 ms.
* Invariants computed in 23 ms.
   - Backward Invariants 18 ms.
   - Transitive Invariants 2 ms.
* Refinement performed in 66 ms.
* Termination proved in 4 ms.
* Upper bounds computed in 44 ms.
   - Equation cost structures 23 ms.
   - Phase cost structures 4 ms.
   - Chain cost structures 16 ms.
   - Solving cost expressions 0 ms.
* Total analysis performed in 212 ms.


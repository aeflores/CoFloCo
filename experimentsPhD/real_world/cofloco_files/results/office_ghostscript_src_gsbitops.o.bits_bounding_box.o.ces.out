WARNING: Excluded non-linear constraints:[D-E-A*C>=0,D-E-A*C+1=<A]
WARNING: Excluded non-linear constraints:[D-E-A*C>=0,D-E-A*C+1=< -A]
WARNING: Excluded non-linear constraints:[-D+E+A*C>=0,-D+E+A*C+1=<A]
WARNING: Excluded non-linear constraints:[-D+E+A*C>=0,-D+E+A*C+1=< -A]
WARNING: Excluded non-linear constraints:[C-D-A*E>=0,C-D-A*E+1=<A]
WARNING: Excluded non-linear constraints:[C-D-A*E>=0,C-D-A*E+1=< -A]
WARNING: Excluded non-linear constraints:[-C+D+A*E>=0,-C+D+A*E+1=<A]
WARNING: Excluded non-linear constraints:[-C+D+A*E>=0,-C+D+A*E+1=< -A]
WARNING: Excluded non-linear constraints:[F-G-A*C-1>=0,F-G-A*C-1+1=<A]
WARNING: Excluded non-linear constraints:[F-G-A*C-1>=0,F-G-A*C-1+1=< -A]
WARNING: Excluded non-linear constraints:[-F+G+A*C+1>=0,-F+G+A*C+1+1=<A]
WARNING: Excluded non-linear constraints:[-F+G+A*C+1>=0,-F+G+A*C+1+1=< -A]
WARNING: Excluded non-linear constraints:[D-E-C*F>=0,D-E-C*F+1=<C]
WARNING: Excluded non-linear constraints:[D-E-C*F>=0,D-E-C*F+1=< -C]
WARNING: Excluded non-linear constraints:[-D+E+C*F>=0,-D+E+C*F+1=<C]
WARNING: Excluded non-linear constraints:[-D+E+C*F>=0,-D+E+C*F+1=< -C]
WARNING: Excluded non-linear constraints:[D-E-C*F>=0,D-E-C*F+1=<C]
WARNING: Excluded non-linear constraints:[D-E-C*F>=0,D-E-C*F+1=< -C]
WARNING: Excluded non-linear constraints:[-D+E+C*F>=0,-D+E+C*F+1=<C]
WARNING: Excluded non-linear constraints:[-D+E+C*F>=0,-D+E+C*F+1=< -C]
Warning: Ignored call to eval_bits_bounding_box_stop/1 in equation eval_bits_bounding_box_bb28_in/1 

Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. recursive  : [eval_bits_bounding_box_bb1_in/3]
1. non_recursive  : [eval_bits_bounding_box_bb28_in/1]
2. recursive  : [eval_bits_bounding_box_bb6_in/4]
3. recursive  : [eval_bits_bounding_box_bb13_in/13]
4. recursive  : [eval_bits_bounding_box_bb17_in/17]
5. recursive  : [eval_bits_bounding_box_bb11_in/5,eval_bits_bounding_box_bb16_in/7,eval_bits_bounding_box_bb20_in/9,loop_cont_eval_bits_bounding_box_bb13_in/8,loop_cont_eval_bits_bounding_box_bb17_in/10]
6. non_recursive  : [eval_bits_bounding_box_bb27_in/1]
7. non_recursive  : [eval_bits_bounding_box_bb24_in/1]
8. non_recursive  : [loop_cont_eval_bits_bounding_box_bb11_in/2]
9. non_recursive  : [eval_bits_bounding_box_bb10_in/2]
10. non_recursive  : [loop_cont_eval_bits_bounding_box_bb6_in/3]
11. non_recursive  : [eval_bits_bounding_box__critedge_in/2]
12. non_recursive  : [loop_cont_eval_bits_bounding_box_bb1_in/3]
13. non_recursive  : [eval_bits_bounding_box_bb0_in/2]
14. non_recursive  : [eval_bits_bounding_box_start/3]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into eval_bits_bounding_box_bb1_in/3
1. SCC is completely evaluated into other SCCs
2. SCC is partially evaluated into eval_bits_bounding_box_bb6_in/4
3. SCC is partially evaluated into eval_bits_bounding_box_bb13_in/13
4. SCC is partially evaluated into eval_bits_bounding_box_bb17_in/17
5. SCC is partially evaluated into eval_bits_bounding_box_bb11_in/5
6. SCC is completely evaluated into other SCCs
7. SCC is completely evaluated into other SCCs
8. SCC is completely evaluated into other SCCs
9. SCC is partially evaluated into eval_bits_bounding_box_bb10_in/2
10. SCC is completely evaluated into other SCCs
11. SCC is partially evaluated into eval_bits_bounding_box__critedge_in/2
12. SCC is completely evaluated into other SCCs
13. SCC is partially evaluated into eval_bits_bounding_box_bb0_in/2
14. SCC is partially evaluated into eval_bits_bounding_box_start/3

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations eval_bits_bounding_box_bb1_in/3 
* CE 5 is refined into CE [30] 
* CE 4 is refined into CE [31] 


#### Refined cost equations eval_bits_bounding_box_bb1_in/3 
* CE 30: eval_bits_bounding_box_bb1_in(A,B,A) = 0
     [B=5] 
* CE 31: eval_bits_bounding_box_bb1_in(V_raster,B,C) = 1+ eval_bits_bounding_box_bb1_in(V_raster,D,C)
     [D=5,B=5] 

### Cost equations --> "Loop" of eval_bits_bounding_box_bb1_in/3 
* CEs [31] --> Loop 21 
* CEs [30] --> Loop 22 

#### Loops of eval_bits_bounding_box_bb1_in/3 
* Loop 21: eval_bits_bounding_box_bb1_in(V_raster,B,C)->  eval_bits_bounding_box_bb1_in(V_raster,B',C)
                  [B'=5,B=5] 
* Loop 22: eval_bits_bounding_box_bb1_in(A,B,A) [B=5] 

### Ranking functions of CR eval_bits_bounding_box_bb1_in(V_raster,B,C) 

#### Partial ranking functions of CR eval_bits_bounding_box_bb1_in(V_raster,B,C) 


### Resulting Chains:eval_bits_bounding_box_bb1_in(V_raster,B,C) 
* [[21]]...
* [[21],22]
* [22]


### Merging Chains  eval_bits_bounding_box_bb1_in/3 into  External patterns of execution 
* [[22],[22,[21]]] --> 1 
* [[[21]]] --> 2 


### Specialization of cost equations eval_bits_bounding_box_bb6_in/4 
* CE 14 is refined into CE [32] 
* CE 16 is refined into CE [33] 
* CE 17 is refined into CE [34] 
* CE 15 is refined into CE [35] 
* CE 13 is refined into CE [36] 
* CE 12 is refined into CE [37] 


#### Refined cost equations eval_bits_bounding_box_bb6_in/4 
* CE 32: eval_bits_bounding_box_bb6_in(V_raster,V_30,B,C) = 0
     [V_30>=C,V_raster>=1,B=4] 
* CE 33: eval_bits_bounding_box_bb6_in(V_raster,V_30,B,C) = 0
     [C>=V_30,V_raster>=1,B=4] 
* CE 34: eval_bits_bounding_box_bb6_in(V_raster,V_30,B,C) = 0
     [V_30>=C,0>=V_raster+1,B=4] 
* CE 35: eval_bits_bounding_box_bb6_in(V_raster,V_30,B,C) = 0
     [C>=V_30,0>=V_raster+1,B=4] 
* CE 36: eval_bits_bounding_box_bb6_in(A,B,C,B) = 0
     [C=4] 
* CE 37: eval_bits_bounding_box_bb6_in(V_raster,V_30,B,C) = 1+ eval_bits_bounding_box_bb6_in(V_raster,V_30,D,C)
     [D=4,B=4] 

### Cost equations --> "Loop" of eval_bits_bounding_box_bb6_in/4 
* CEs [37] --> Loop 23 
* CEs [32] --> Loop 24 
* CEs [33] --> Loop 25 
* CEs [34] --> Loop 26 
* CEs [35] --> Loop 27 
* CEs [36] --> Loop 28 

#### Loops of eval_bits_bounding_box_bb6_in/4 
* Loop 23: eval_bits_bounding_box_bb6_in(V_raster,V_30,B,C)->  eval_bits_bounding_box_bb6_in(V_raster,V_30,B',C)
                  [B'=4,B=4] 
* Loop 24: eval_bits_bounding_box_bb6_in(V_raster,V_30,B,C) [V_30>=C,V_raster>=1,B=4] 
* Loop 25: eval_bits_bounding_box_bb6_in(V_raster,V_30,B,C) [C>=V_30,V_raster>=1,B=4] 
* Loop 26: eval_bits_bounding_box_bb6_in(V_raster,V_30,B,C) [V_30>=C,0>=V_raster+1,B=4] 
* Loop 27: eval_bits_bounding_box_bb6_in(V_raster,V_30,B,C) [C>=V_30,0>=V_raster+1,B=4] 
* Loop 28: eval_bits_bounding_box_bb6_in(A,B,C,B) [C=4] 

### Ranking functions of CR eval_bits_bounding_box_bb6_in(V_raster,V_30,B,C) 

#### Partial ranking functions of CR eval_bits_bounding_box_bb6_in(V_raster,V_30,B,C) 


### Resulting Chains:eval_bits_bounding_box_bb6_in(V_raster,V_30,B,C) 
* [[23]]...
* [[23],28]
* [[23],27]
* [[23],26]
* [[23],25]
* [[23],24]
* [28]
* [27]
* [26]
* [25]
* [24]


### Merging Chains  eval_bits_bounding_box_bb6_in/4 into  External patterns of execution 
* [[28],[28,[23]]] --> 1 
* [[27],[27,[23]]] --> 2 
* [[26],[26,[23]]] --> 3 
* [[25],[25,[23]]] --> 4 
* [[24],[24,[23]]] --> 5 
* [[[23]]] --> 6 


### Specialization of cost equations eval_bits_bounding_box_bb13_in/13 
* CE 24 is refined into CE [38] 
* CE 26 is refined into CE [39] 
* CE 25 is refined into CE [40] 


#### Refined cost equations eval_bits_bounding_box_bb13_in/13 
* CE 38: eval_bits_bounding_box_bb13_in(A,B,C,D,E,F,G,A,H,C,D,E,F) = 0
     [D>=F+1,F>=0,E>=0,E+1=H,E+1=B,G=2] 
* CE 39: eval_bits_bounding_box_bb13_in(A,B,C,D,E,F,G,A,H,C,D,E,F) = 0
     [F>=D,F>=0,E>=0,E+1=H,E+1=B,G=2] 
* CE 40: eval_bits_bounding_box_bb13_in(V_52,V_h_0,V_right_0,V_left_0,V_54,V_n1_0,B,C,D,E,F,G,H) = 1+ eval_bits_bounding_box_bb13_in(V_52,I,V_right_0,V_left_0,V_54,J,K,C,D,E,F,G,H)
     [V_left_0>=V_n1_0+1,V_n1_0>=0,V_54>=0,V_n1_0+1=J,V_54+1=I,V_54+1=V_h_0,K=2,B=2] 

### Cost equations --> "Loop" of eval_bits_bounding_box_bb13_in/13 
* CEs [40] --> Loop 29 
* CEs [38] --> Loop 30 
* CEs [39] --> Loop 31 

#### Loops of eval_bits_bounding_box_bb13_in/13 
* Loop 29: eval_bits_bounding_box_bb13_in(V_52,V_h_0,V_right_0,V_left_0,V_54,V_n1_0,B,C,D,E,F,G,H)->  eval_bits_bounding_box_bb13_in(V_52,V_h_0',V_right_0,V_left_0,V_54,V_n1_0',B',C,D,E,F,G,H)
                  [V_left_0>=V_n1_0+1,V_n1_0>=0,V_54>=0,V_n1_0+1=V_n1_0',V_54+1=V_h_0',V_54+1=V_h_0,B'=2,B=2] 
* Loop 30: eval_bits_bounding_box_bb13_in(A,B,C,D,E,F,G,A,B,C,D,H,F) [D>=F+1,F>=0,B>=1,B=H+1,B=E+1,G=2] 
* Loop 31: eval_bits_bounding_box_bb13_in(A,B,C,D,E,F,G,A,B,C,D,H,F) [F>=D,F>=0,B>=1,B=H+1,B=E+1,G=2] 

### Ranking functions of CR eval_bits_bounding_box_bb13_in(V_52,V_h_0,V_right_0,V_left_0,V_54,V_n1_0,B,C,D,E,F,G,H) 
* RF of phase [29]: [V_left_0-V_n1_0]

#### Partial ranking functions of CR eval_bits_bounding_box_bb13_in(V_52,V_h_0,V_right_0,V_left_0,V_54,V_n1_0,B,C,D,E,F,G,H) 
* Partial RF of phase [29]:
  - RF of loop [29:1]:
    V_left_0-V_n1_0


### Resulting Chains:eval_bits_bounding_box_bb13_in(V_52,V_h_0,V_right_0,V_left_0,V_54,V_n1_0,B,C,D,E,F,G,H) 
* [[29],31]
* [[29],30]
* [31]
* [30]


### Merging Chains  eval_bits_bounding_box_bb13_in/13 into  External patterns of execution 
* [[31]] --> 1 
* [[30]] --> 2 
* [[31,[29]]] --> 3 
* [[30,[29]]] --> 4 


### Specialization of cost equations eval_bits_bounding_box_bb17_in/17 
* CE 29 is refined into CE [41] 
* CE 27 is refined into CE [42] 
* CE 28 is refined into CE [43] 


#### Refined cost equations eval_bits_bounding_box_bb17_in/17 
* CE 41: eval_bits_bounding_box_bb17_in(A,B,C,D,E,F,G,H,I,A,B,C,D,E,F,G,H) = 0
     [C>=H,A>=H+1,I=3] 
* CE 42: eval_bits_bounding_box_bb17_in(A,B,C,D,E,F,G,H,I,A,B,C,D,E,F,G,H) = 0
     [A>=H+1,H>=C+1,I=3] 
* CE 43: eval_bits_bounding_box_bb17_in(V_52,V_h_0,V_right_0,V_left_0,V_54,V_n1_0,V_left_1,V_n1_1,B,C,D,E,F,G,H,I,J) = 1+ eval_bits_bounding_box_bb17_in(V_52,V_h_0,V_right_0,V_left_0,V_54,V_n1_0,V_left_1,K,L,C,D,E,F,G,H,I,J)
     [V_52>=V_n1_1+1,V_n1_1>=V_right_0+1,V_n1_1=K+1,L=3,B=3] 

### Cost equations --> "Loop" of eval_bits_bounding_box_bb17_in/17 
* CEs [43] --> Loop 32 
* CEs [41] --> Loop 33 
* CEs [42] --> Loop 34 

#### Loops of eval_bits_bounding_box_bb17_in/17 
* Loop 32: eval_bits_bounding_box_bb17_in(V_52,V_h_0,V_right_0,V_left_0,V_54,V_n1_0,V_left_1,V_n1_1,B,C,D,E,F,G,H,I,J)->  eval_bits_bounding_box_bb17_in(V_52,V_h_0,V_right_0,V_left_0,V_54,V_n1_0,V_left_1,V_n1_1',B',C,D,E,F,G,H,I,J)
                  [V_52>=V_n1_1+1,V_n1_1>=V_right_0+1,V_n1_1=V_n1_1'+1,B'=3,B=3] 
* Loop 33: eval_bits_bounding_box_bb17_in(A,B,C,D,E,F,G,H,I,A,B,C,D,E,F,G,H) [C>=H,A>=H+1,I=3] 
* Loop 34: eval_bits_bounding_box_bb17_in(A,B,C,D,E,F,G,H,I,A,B,C,D,E,F,G,H) [A>=H+1,H>=C+1,I=3] 

### Ranking functions of CR eval_bits_bounding_box_bb17_in(V_52,V_h_0,V_right_0,V_left_0,V_54,V_n1_0,V_left_1,V_n1_1,B,C,D,E,F,G,H,I,J) 
* RF of phase [32]: [-V_right_0+V_n1_1]

#### Partial ranking functions of CR eval_bits_bounding_box_bb17_in(V_52,V_h_0,V_right_0,V_left_0,V_54,V_n1_0,V_left_1,V_n1_1,B,C,D,E,F,G,H,I,J) 
* Partial RF of phase [32]:
  - RF of loop [32:1]:
    -V_right_0+V_n1_1


### Resulting Chains:eval_bits_bounding_box_bb17_in(V_52,V_h_0,V_right_0,V_left_0,V_54,V_n1_0,V_left_1,V_n1_1,B,C,D,E,F,G,H,I,J) 
* [[32],34]
* [[32],33]
* [34]
* [33]


### Merging Chains  eval_bits_bounding_box_bb17_in/17 into  External patterns of execution 
* [[34]] --> 1 
* [[33]] --> 2 
* [[33,[32]]] --> 3 
* [[34,[32]]] --> 4 


### Specialization of cost equations eval_bits_bounding_box_bb11_in/5 
* CE 23 is refined into CE [44] 
* CE 19 is refined into CE [45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60] 
* CE 20 is refined into CE [61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76] 
* CE 21 is refined into CE [77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92] 
* CE 22 is refined into CE [93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108] 


#### Refined cost equations eval_bits_bounding_box_bb11_in/5 
* CE 44: eval_bits_bounding_box_bb11_in(V_52,V_h_0,V_right_0,V_left_0,B) = 0
     [0>=V_h_0,B=6] 
* CE 45: eval_bits_bounding_box_bb11_in(V_52,V_h_0,V_right_0,V_left_0,B) = 3+ eval_bits_bounding_box_bb13_in(V_52,V_h_0,V_right_0,V_left_0,C,D,E,V_52,V_h_0,V_right_0,V_left_0,F,G):1+ eval_bits_bounding_box_bb17_in(V_52,V_h_0,V_right_0,V_left_0,H,I,J,K,L,V_52,V_h_0,V_right_0,V_left_0,M,N,O,P):1+ eval_bits_bounding_box_bb11_in(V_52,Q,R,S,T)
     [V_52>=V_right_0+2,V_h_0>=1,0>=V_left_0,V_52=R+1,V_h_0=Q+1,V_52=P+1,V_h_0=M+1,V_52=K+1,V_h_0=H+1,V_h_0=F+1,V_h_0=C+1,T=6,S=0,O=0,N=0,L=3,J=0,I=0,G=0,E=2,D=0,B=6] 
* CE 46: eval_bits_bounding_box_bb11_in(V_52,V_h_0,V_right_0,V_left_0,B) = 3+ eval_bits_bounding_box_bb13_in(V_52,V_h_0,V_right_0,V_left_0,C,D,E,V_52,V_h_0,V_right_0,V_left_0,F,G):1+ eval_bits_bounding_box_bb17_in(V_52,V_h_0,V_right_0,V_left_0,H,I,J,K,L,V_52,V_h_0,V_right_0,V_left_0,M,N,O,P):2+ eval_bits_bounding_box_bb11_in(V_52,Q,R,S,T)
     [V_right_0+1>=V_52,V_h_0>=1,0>=V_left_0,V_52=R+1,V_h_0=Q+1,V_52=P+1,V_h_0=M+1,V_52=K+1,V_h_0=H+1,V_h_0=F+1,V_h_0=C+1,T=6,S=0,O=0,N=0,L=3,J=0,I=0,G=0,E=2,D=0,B=6] 
* CE 47: eval_bits_bounding_box_bb11_in(V_52,V_h_0,V_right_0,V_left_0,B) = 3+ eval_bits_bounding_box_bb13_in(V_52,V_h_0,V_right_0,V_left_0,C,D,E,V_52,V_h_0,V_right_0,V_left_0,F,G):1+ eval_bits_bounding_box_bb17_in(V_52,V_h_0,V_right_0,V_left_0,H,I,J,K,L,V_52,V_h_0,V_right_0,V_left_0,M,N,O,V_right_0):3+ eval_bits_bounding_box_bb11_in(V_52,P,V_right_0,Q,R)
     [V_52>=V_right_0+2,V_h_0>=1,0>=V_left_0,V_h_0=P+1,V_h_0=M+1,V_52=K+1,V_h_0=H+1,V_h_0=F+1,V_h_0=C+1,R=6,Q=0,O=0,N=0,L=3,J=0,I=0,G=0,E=2,D=0,B=6] 
* CE 48: eval_bits_bounding_box_bb11_in(V_52,V_h_0,V_right_0,V_left_0,B) = 3+ eval_bits_bounding_box_bb13_in(V_52,V_h_0,V_right_0,V_left_0,C,D,E,V_52,V_h_0,V_right_0,V_left_0,F,G):1+ eval_bits_bounding_box_bb17_in(V_52,V_h_0,V_right_0,V_left_0,H,I,J,K,L,V_52,V_h_0,V_right_0,V_left_0,M,N,O,P):4+ eval_bits_bounding_box_bb11_in(V_52,Q,P,R,S)
     [V_52>=P+2,P>=V_right_0+1,V_h_0>=1,0>=V_left_0,V_h_0=Q+1,V_h_0=M+1,V_52=K+1,V_h_0=H+1,V_h_0=F+1,V_h_0=C+1,S=6,R=0,O=0,N=0,L=3,J=0,I=0,G=0,E=2,D=0,B=6] 
* CE 49: eval_bits_bounding_box_bb11_in(V_52,V_h_0,V_right_0,V_left_0,B) = 3+ eval_bits_bounding_box_bb13_in(V_52,V_h_0,V_right_0,V_left_0,C,D,E,V_52,V_h_0,V_right_0,V_left_0,F,G):2+ eval_bits_bounding_box_bb17_in(V_52,V_h_0,V_right_0,V_left_0,H,I,J,K,L,V_52,V_h_0,V_right_0,V_left_0,M,N,O,P):1+ eval_bits_bounding_box_bb11_in(V_52,Q,R,S,T)
     [V_52>=V_right_0+2,V_left_0>=1,V_h_0>=1,V_52=R+1,V_h_0=Q+1,V_52=P+1,V_h_0=M+1,V_52=K+1,V_h_0=H+1,V_h_0=F+1,V_h_0=C+1,T=6,S=0,O=0,N=0,L=3,J=0,I=0,G=0,E=2,D=0,B=6] 
* CE 50: eval_bits_bounding_box_bb11_in(V_52,V_h_0,V_right_0,V_left_0,B) = 3+ eval_bits_bounding_box_bb13_in(V_52,V_h_0,V_right_0,V_left_0,C,D,E,V_52,V_h_0,V_right_0,V_left_0,F,G):2+ eval_bits_bounding_box_bb17_in(V_52,V_h_0,V_right_0,V_left_0,H,I,J,K,L,V_52,V_h_0,V_right_0,V_left_0,M,N,O,P):2+ eval_bits_bounding_box_bb11_in(V_52,Q,R,S,T)
     [V_right_0+1>=V_52,V_left_0>=1,V_h_0>=1,V_52=R+1,V_h_0=Q+1,V_52=P+1,V_h_0=M+1,V_52=K+1,V_h_0=H+1,V_h_0=F+1,V_h_0=C+1,T=6,S=0,O=0,N=0,L=3,J=0,I=0,G=0,E=2,D=0,B=6] 
* CE 51: eval_bits_bounding_box_bb11_in(V_52,V_h_0,V_right_0,V_left_0,B) = 3+ eval_bits_bounding_box_bb13_in(V_52,V_h_0,V_right_0,V_left_0,C,D,E,V_52,V_h_0,V_right_0,V_left_0,F,G):2+ eval_bits_bounding_box_bb17_in(V_52,V_h_0,V_right_0,V_left_0,H,I,J,K,L,V_52,V_h_0,V_right_0,V_left_0,M,N,O,V_right_0):3+ eval_bits_bounding_box_bb11_in(V_52,P,V_right_0,Q,R)
     [V_52>=V_right_0+2,V_left_0>=1,V_h_0>=1,V_h_0=P+1,V_h_0=M+1,V_52=K+1,V_h_0=H+1,V_h_0=F+1,V_h_0=C+1,R=6,Q=0,O=0,N=0,L=3,J=0,I=0,G=0,E=2,D=0,B=6] 
* CE 52: eval_bits_bounding_box_bb11_in(V_52,V_h_0,V_right_0,V_left_0,B) = 3+ eval_bits_bounding_box_bb13_in(V_52,V_h_0,V_right_0,V_left_0,C,D,E,V_52,V_h_0,V_right_0,V_left_0,F,G):2+ eval_bits_bounding_box_bb17_in(V_52,V_h_0,V_right_0,V_left_0,H,I,J,K,L,V_52,V_h_0,V_right_0,V_left_0,M,N,O,P):4+ eval_bits_bounding_box_bb11_in(V_52,Q,P,R,S)
     [V_52>=P+2,P>=V_right_0+1,V_left_0>=1,V_h_0>=1,V_h_0=Q+1,V_h_0=M+1,V_52=K+1,V_h_0=H+1,V_h_0=F+1,V_h_0=C+1,S=6,R=0,O=0,N=0,L=3,J=0,I=0,G=0,E=2,D=0,B=6] 
* CE 53: eval_bits_bounding_box_bb11_in(V_52,V_h_0,V_right_0,V_left_0,B) = 3+ eval_bits_bounding_box_bb13_in(V_52,V_h_0,V_right_0,V_left_0,C,D,E,V_52,V_h_0,V_right_0,V_left_0,F,V_left_0):3+ eval_bits_bounding_box_bb17_in(V_52,V_h_0,V_right_0,V_left_0,G,V_left_0,V_left_0,H,I,V_52,V_h_0,V_right_0,V_left_0,J,V_left_0,V_left_0,K):1+ eval_bits_bounding_box_bb11_in(V_52,L,M,V_left_0,N)
     [V_52>=V_right_0+2,V_left_0>=1,V_h_0>=1,V_52=M+1,V_h_0=L+1,V_52=K+1,V_h_0=J+1,V_52=H+1,V_h_0=G+1,V_h_0=F+1,V_h_0=C+1,N=6,I=3,E=2,D=0,B=6] 
* CE 54: eval_bits_bounding_box_bb11_in(V_52,V_h_0,V_right_0,V_left_0,B) = 3+ eval_bits_bounding_box_bb13_in(V_52,V_h_0,V_right_0,V_left_0,C,D,E,V_52,V_h_0,V_right_0,V_left_0,F,V_left_0):3+ eval_bits_bounding_box_bb17_in(V_52,V_h_0,V_right_0,V_left_0,G,V_left_0,V_left_0,H,I,V_52,V_h_0,V_right_0,V_left_0,J,V_left_0,V_left_0,K):2+ eval_bits_bounding_box_bb11_in(V_52,L,M,V_left_0,N)
     [V_right_0+1>=V_52,V_left_0>=1,V_h_0>=1,V_52=M+1,V_h_0=L+1,V_52=K+1,V_h_0=J+1,V_52=H+1,V_h_0=G+1,V_h_0=F+1,V_h_0=C+1,N=6,I=3,E=2,D=0,B=6] 
* CE 55: eval_bits_bounding_box_bb11_in(V_52,V_h_0,V_right_0,V_left_0,B) = 3+ eval_bits_bounding_box_bb13_in(V_52,V_h_0,V_right_0,V_left_0,C,D,E,V_52,V_h_0,V_right_0,V_left_0,F,V_left_0):3+ eval_bits_bounding_box_bb17_in(V_52,V_h_0,V_right_0,V_left_0,G,V_left_0,V_left_0,H,I,V_52,V_h_0,V_right_0,V_left_0,J,V_left_0,V_left_0,V_right_0):3+ eval_bits_bounding_box_bb11_in(V_52,K,V_right_0,V_left_0,L)
     [V_52>=V_right_0+2,V_left_0>=1,V_h_0>=1,V_h_0=K+1,V_h_0=J+1,V_52=H+1,V_h_0=G+1,V_h_0=F+1,V_h_0=C+1,L=6,I=3,E=2,D=0,B=6] 
* CE 56: eval_bits_bounding_box_bb11_in(V_52,V_h_0,V_right_0,V_left_0,B) = 3+ eval_bits_bounding_box_bb13_in(V_52,V_h_0,V_right_0,V_left_0,C,D,E,V_52,V_h_0,V_right_0,V_left_0,F,V_left_0):3+ eval_bits_bounding_box_bb17_in(V_52,V_h_0,V_right_0,V_left_0,G,V_left_0,V_left_0,H,I,V_52,V_h_0,V_right_0,V_left_0,J,V_left_0,V_left_0,K):4+ eval_bits_bounding_box_bb11_in(V_52,L,K,V_left_0,M)
     [V_52>=K+2,K>=V_right_0+1,V_left_0>=1,V_h_0>=1,V_h_0=L+1,V_h_0=J+1,V_52=H+1,V_h_0=G+1,V_h_0=F+1,V_h_0=C+1,M=6,I=3,E=2,D=0,B=6] 
* CE 57: eval_bits_bounding_box_bb11_in(V_52,V_h_0,V_right_0,V_left_0,B) = 3+ eval_bits_bounding_box_bb13_in(V_52,V_h_0,V_right_0,V_left_0,C,D,E,V_52,V_h_0,V_right_0,V_left_0,F,G):4+ eval_bits_bounding_box_bb17_in(V_52,V_h_0,V_right_0,V_left_0,H,G,G,I,J,V_52,V_h_0,V_right_0,V_left_0,K,G,G,L):1+ eval_bits_bounding_box_bb11_in(V_52,M,N,G,O)
     [V_left_0>=G+1,V_52>=V_right_0+2,G>=1,V_h_0>=1,V_52=N+1,V_h_0=M+1,V_52=L+1,V_h_0=K+1,V_52=I+1,V_h_0=H+1,V_h_0=F+1,V_h_0=C+1,O=6,J=3,E=2,D=0,B=6] 
* CE 58: eval_bits_bounding_box_bb11_in(V_52,V_h_0,V_right_0,V_left_0,B) = 3+ eval_bits_bounding_box_bb13_in(V_52,V_h_0,V_right_0,V_left_0,C,D,E,V_52,V_h_0,V_right_0,V_left_0,F,G):4+ eval_bits_bounding_box_bb17_in(V_52,V_h_0,V_right_0,V_left_0,H,G,G,I,J,V_52,V_h_0,V_right_0,V_left_0,K,G,G,L):2+ eval_bits_bounding_box_bb11_in(V_52,M,N,G,O)
     [V_left_0>=G+1,V_right_0+1>=V_52,G>=1,V_h_0>=1,V_52=N+1,V_h_0=M+1,V_52=L+1,V_h_0=K+1,V_52=I+1,V_h_0=H+1,V_h_0=F+1,V_h_0=C+1,O=6,J=3,E=2,D=0,B=6] 
* CE 59: eval_bits_bounding_box_bb11_in(V_52,V_h_0,V_right_0,V_left_0,B) = 3+ eval_bits_bounding_box_bb13_in(V_52,V_h_0,V_right_0,V_left_0,C,D,E,V_52,V_h_0,V_right_0,V_left_0,F,G):4+ eval_bits_bounding_box_bb17_in(V_52,V_h_0,V_right_0,V_left_0,H,G,G,I,J,V_52,V_h_0,V_right_0,V_left_0,K,G,G,V_right_0):3+ eval_bits_bounding_box_bb11_in(V_52,L,V_right_0,G,M)
     [V_left_0>=G+1,V_52>=V_right_0+2,G>=1,V_h_0>=1,V_h_0=L+1,V_h_0=K+1,V_52=I+1,V_h_0=H+1,V_h_0=F+1,V_h_0=C+1,M=6,J=3,E=2,D=0,B=6] 
* CE 60: eval_bits_bounding_box_bb11_in(V_52,V_h_0,V_right_0,V_left_0,B) = 3+ eval_bits_bounding_box_bb13_in(V_52,V_h_0,V_right_0,V_left_0,C,D,E,V_52,V_h_0,V_right_0,V_left_0,F,G):4+ eval_bits_bounding_box_bb17_in(V_52,V_h_0,V_right_0,V_left_0,H,G,G,I,J,V_52,V_h_0,V_right_0,V_left_0,K,G,G,L):4+ eval_bits_bounding_box_bb11_in(V_52,M,L,G,N)
     [V_52>=L+2,V_left_0>=G+1,L>=V_right_0+1,G>=1,V_h_0>=1,V_h_0=M+1,V_h_0=K+1,V_52=I+1,V_h_0=H+1,V_h_0=F+1,V_h_0=C+1,N=6,J=3,E=2,D=0,B=6] 
* CE 61: eval_bits_bounding_box_bb11_in(V_52,V_h_0,V_right_0,V_left_0,B) = 3+ eval_bits_bounding_box_bb13_in(V_52,V_h_0,V_right_0,V_left_0,C,D,E,V_52,V_h_0,V_right_0,V_left_0,F,G):1+ eval_bits_bounding_box_bb17_in(V_52,V_h_0,V_right_0,V_left_0,H,I,V_left_0,J,K,V_52,V_h_0,V_right_0,V_left_0,L,M,V_left_0,N):1+ eval_bits_bounding_box_bb11_in(V_52,O,P,V_left_0,Q)
     [V_52>=V_right_0+2,V_h_0>=1,0>=V_left_0,V_52=P+1,V_h_0=O+1,V_52=N+1,V_h_0=L+1,V_52=J+1,V_h_0=H+1,V_h_0=F+1,V_h_0=C+1,Q=6,M=0,K=3,I=0,G=0,E=2,D=0,B=6] 
* CE 62: eval_bits_bounding_box_bb11_in(V_52,V_h_0,V_right_0,V_left_0,B) = 3+ eval_bits_bounding_box_bb13_in(V_52,V_h_0,V_right_0,V_left_0,C,D,E,V_52,V_h_0,V_right_0,V_left_0,F,G):1+ eval_bits_bounding_box_bb17_in(V_52,V_h_0,V_right_0,V_left_0,H,I,V_left_0,J,K,V_52,V_h_0,V_right_0,V_left_0,L,M,V_left_0,N):2+ eval_bits_bounding_box_bb11_in(V_52,O,P,V_left_0,Q)
     [V_right_0+1>=V_52,V_h_0>=1,0>=V_left_0,V_52=P+1,V_h_0=O+1,V_52=N+1,V_h_0=L+1,V_52=J+1,V_h_0=H+1,V_h_0=F+1,V_h_0=C+1,Q=6,M=0,K=3,I=0,G=0,E=2,D=0,B=6] 
* CE 63: eval_bits_bounding_box_bb11_in(V_52,V_h_0,V_right_0,V_left_0,B) = 3+ eval_bits_bounding_box_bb13_in(V_52,V_h_0,V_right_0,V_left_0,C,D,E,V_52,V_h_0,V_right_0,V_left_0,F,G):1+ eval_bits_bounding_box_bb17_in(V_52,V_h_0,V_right_0,V_left_0,H,I,V_left_0,J,K,V_52,V_h_0,V_right_0,V_left_0,L,M,V_left_0,V_right_0):3+ eval_bits_bounding_box_bb11_in(V_52,N,V_right_0,V_left_0,O)
     [V_52>=V_right_0+2,V_h_0>=1,0>=V_left_0,V_h_0=N+1,V_h_0=L+1,V_52=J+1,V_h_0=H+1,V_h_0=F+1,V_h_0=C+1,O=6,M=0,K=3,I=0,G=0,E=2,D=0,B=6] 
* CE 64: eval_bits_bounding_box_bb11_in(V_52,V_h_0,V_right_0,V_left_0,B) = 3+ eval_bits_bounding_box_bb13_in(V_52,V_h_0,V_right_0,V_left_0,C,D,E,V_52,V_h_0,V_right_0,V_left_0,F,G):1+ eval_bits_bounding_box_bb17_in(V_52,V_h_0,V_right_0,V_left_0,H,I,V_left_0,J,K,V_52,V_h_0,V_right_0,V_left_0,L,M,V_left_0,N):4+ eval_bits_bounding_box_bb11_in(V_52,O,N,V_left_0,P)
     [V_52>=N+2,N>=V_right_0+1,V_h_0>=1,0>=V_left_0,V_h_0=O+1,V_h_0=L+1,V_52=J+1,V_h_0=H+1,V_h_0=F+1,V_h_0=C+1,P=6,M=0,K=3,I=0,G=0,E=2,D=0,B=6] 
* CE 65: eval_bits_bounding_box_bb11_in(V_52,V_h_0,V_right_0,V_left_0,B) = 3+ eval_bits_bounding_box_bb13_in(V_52,V_h_0,V_right_0,V_left_0,C,D,E,V_52,V_h_0,V_right_0,V_left_0,F,G):2+ eval_bits_bounding_box_bb17_in(V_52,V_h_0,V_right_0,V_left_0,H,I,V_left_0,J,K,V_52,V_h_0,V_right_0,V_left_0,L,M,V_left_0,N):1+ eval_bits_bounding_box_bb11_in(V_52,O,P,V_left_0,Q)
     [V_52>=V_right_0+2,V_left_0>=1,V_h_0>=1,V_52=P+1,V_h_0=O+1,V_52=N+1,V_h_0=L+1,V_52=J+1,V_h_0=H+1,V_h_0=F+1,V_h_0=C+1,Q=6,M=0,K=3,I=0,G=0,E=2,D=0,B=6] 
* CE 66: eval_bits_bounding_box_bb11_in(V_52,V_h_0,V_right_0,V_left_0,B) = 3+ eval_bits_bounding_box_bb13_in(V_52,V_h_0,V_right_0,V_left_0,C,D,E,V_52,V_h_0,V_right_0,V_left_0,F,G):2+ eval_bits_bounding_box_bb17_in(V_52,V_h_0,V_right_0,V_left_0,H,I,V_left_0,J,K,V_52,V_h_0,V_right_0,V_left_0,L,M,V_left_0,N):2+ eval_bits_bounding_box_bb11_in(V_52,O,P,V_left_0,Q)
     [V_right_0+1>=V_52,V_left_0>=1,V_h_0>=1,V_52=P+1,V_h_0=O+1,V_52=N+1,V_h_0=L+1,V_52=J+1,V_h_0=H+1,V_h_0=F+1,V_h_0=C+1,Q=6,M=0,K=3,I=0,G=0,E=2,D=0,B=6] 
* CE 67: eval_bits_bounding_box_bb11_in(V_52,V_h_0,V_right_0,V_left_0,B) = 3+ eval_bits_bounding_box_bb13_in(V_52,V_h_0,V_right_0,V_left_0,C,D,E,V_52,V_h_0,V_right_0,V_left_0,F,G):2+ eval_bits_bounding_box_bb17_in(V_52,V_h_0,V_right_0,V_left_0,H,I,V_left_0,J,K,V_52,V_h_0,V_right_0,V_left_0,L,M,V_left_0,V_right_0):3+ eval_bits_bounding_box_bb11_in(V_52,N,V_right_0,V_left_0,O)
     [V_52>=V_right_0+2,V_left_0>=1,V_h_0>=1,V_h_0=N+1,V_h_0=L+1,V_52=J+1,V_h_0=H+1,V_h_0=F+1,V_h_0=C+1,O=6,M=0,K=3,I=0,G=0,E=2,D=0,B=6] 
* CE 68: eval_bits_bounding_box_bb11_in(V_52,V_h_0,V_right_0,V_left_0,B) = 3+ eval_bits_bounding_box_bb13_in(V_52,V_h_0,V_right_0,V_left_0,C,D,E,V_52,V_h_0,V_right_0,V_left_0,F,G):2+ eval_bits_bounding_box_bb17_in(V_52,V_h_0,V_right_0,V_left_0,H,I,V_left_0,J,K,V_52,V_h_0,V_right_0,V_left_0,L,M,V_left_0,N):4+ eval_bits_bounding_box_bb11_in(V_52,O,N,V_left_0,P)
     [V_52>=N+2,N>=V_right_0+1,V_left_0>=1,V_h_0>=1,V_h_0=O+1,V_h_0=L+1,V_52=J+1,V_h_0=H+1,V_h_0=F+1,V_h_0=C+1,P=6,M=0,K=3,I=0,G=0,E=2,D=0,B=6] 
* CE 69: eval_bits_bounding_box_bb11_in(V_52,V_h_0,V_right_0,V_left_0,B) = 3+ eval_bits_bounding_box_bb13_in(V_52,V_h_0,V_right_0,V_left_0,C,D,E,V_52,V_h_0,V_right_0,V_left_0,F,V_left_0):3+ eval_bits_bounding_box_bb17_in(V_52,V_h_0,V_right_0,V_left_0,G,V_left_0,V_left_0,H,I,V_52,V_h_0,V_right_0,V_left_0,J,V_left_0,V_left_0,K):1+ eval_bits_bounding_box_bb11_in(V_52,L,M,V_left_0,N)
     [V_52>=V_right_0+2,V_left_0>=1,V_h_0>=1,V_52=M+1,V_h_0=L+1,V_52=K+1,V_h_0=J+1,V_52=H+1,V_h_0=G+1,V_h_0=F+1,V_h_0=C+1,N=6,I=3,E=2,D=0,B=6] 
* CE 70: eval_bits_bounding_box_bb11_in(V_52,V_h_0,V_right_0,V_left_0,B) = 3+ eval_bits_bounding_box_bb13_in(V_52,V_h_0,V_right_0,V_left_0,C,D,E,V_52,V_h_0,V_right_0,V_left_0,F,V_left_0):3+ eval_bits_bounding_box_bb17_in(V_52,V_h_0,V_right_0,V_left_0,G,V_left_0,V_left_0,H,I,V_52,V_h_0,V_right_0,V_left_0,J,V_left_0,V_left_0,K):2+ eval_bits_bounding_box_bb11_in(V_52,L,M,V_left_0,N)
     [V_right_0+1>=V_52,V_left_0>=1,V_h_0>=1,V_52=M+1,V_h_0=L+1,V_52=K+1,V_h_0=J+1,V_52=H+1,V_h_0=G+1,V_h_0=F+1,V_h_0=C+1,N=6,I=3,E=2,D=0,B=6] 
* CE 71: eval_bits_bounding_box_bb11_in(V_52,V_h_0,V_right_0,V_left_0,B) = 3+ eval_bits_bounding_box_bb13_in(V_52,V_h_0,V_right_0,V_left_0,C,D,E,V_52,V_h_0,V_right_0,V_left_0,F,V_left_0):3+ eval_bits_bounding_box_bb17_in(V_52,V_h_0,V_right_0,V_left_0,G,V_left_0,V_left_0,H,I,V_52,V_h_0,V_right_0,V_left_0,J,V_left_0,V_left_0,V_right_0):3+ eval_bits_bounding_box_bb11_in(V_52,K,V_right_0,V_left_0,L)
     [V_52>=V_right_0+2,V_left_0>=1,V_h_0>=1,V_h_0=K+1,V_h_0=J+1,V_52=H+1,V_h_0=G+1,V_h_0=F+1,V_h_0=C+1,L=6,I=3,E=2,D=0,B=6] 
* CE 72: eval_bits_bounding_box_bb11_in(V_52,V_h_0,V_right_0,V_left_0,B) = 3+ eval_bits_bounding_box_bb13_in(V_52,V_h_0,V_right_0,V_left_0,C,D,E,V_52,V_h_0,V_right_0,V_left_0,F,V_left_0):3+ eval_bits_bounding_box_bb17_in(V_52,V_h_0,V_right_0,V_left_0,G,V_left_0,V_left_0,H,I,V_52,V_h_0,V_right_0,V_left_0,J,V_left_0,V_left_0,K):4+ eval_bits_bounding_box_bb11_in(V_52,L,K,V_left_0,M)
     [V_52>=K+2,K>=V_right_0+1,V_left_0>=1,V_h_0>=1,V_h_0=L+1,V_h_0=J+1,V_52=H+1,V_h_0=G+1,V_h_0=F+1,V_h_0=C+1,M=6,I=3,E=2,D=0,B=6] 
* CE 73: eval_bits_bounding_box_bb11_in(V_52,V_h_0,V_right_0,V_left_0,B) = 3+ eval_bits_bounding_box_bb13_in(V_52,V_h_0,V_right_0,V_left_0,C,D,E,V_52,V_h_0,V_right_0,V_left_0,F,G):4+ eval_bits_bounding_box_bb17_in(V_52,V_h_0,V_right_0,V_left_0,H,G,V_left_0,I,J,V_52,V_h_0,V_right_0,V_left_0,K,G,V_left_0,L):1+ eval_bits_bounding_box_bb11_in(V_52,M,N,V_left_0,O)
     [V_left_0>=G+1,V_52>=V_right_0+2,G>=1,V_h_0>=1,V_52=N+1,V_h_0=M+1,V_52=L+1,V_h_0=K+1,V_52=I+1,V_h_0=H+1,V_h_0=F+1,V_h_0=C+1,O=6,J=3,E=2,D=0,B=6] 
* CE 74: eval_bits_bounding_box_bb11_in(V_52,V_h_0,V_right_0,V_left_0,B) = 3+ eval_bits_bounding_box_bb13_in(V_52,V_h_0,V_right_0,V_left_0,C,D,E,V_52,V_h_0,V_right_0,V_left_0,F,G):4+ eval_bits_bounding_box_bb17_in(V_52,V_h_0,V_right_0,V_left_0,H,G,V_left_0,I,J,V_52,V_h_0,V_right_0,V_left_0,K,G,V_left_0,L):2+ eval_bits_bounding_box_bb11_in(V_52,M,N,V_left_0,O)
     [V_left_0>=G+1,V_right_0+1>=V_52,G>=1,V_h_0>=1,V_52=N+1,V_h_0=M+1,V_52=L+1,V_h_0=K+1,V_52=I+1,V_h_0=H+1,V_h_0=F+1,V_h_0=C+1,O=6,J=3,E=2,D=0,B=6] 
* CE 75: eval_bits_bounding_box_bb11_in(V_52,V_h_0,V_right_0,V_left_0,B) = 3+ eval_bits_bounding_box_bb13_in(V_52,V_h_0,V_right_0,V_left_0,C,D,E,V_52,V_h_0,V_right_0,V_left_0,F,G):4+ eval_bits_bounding_box_bb17_in(V_52,V_h_0,V_right_0,V_left_0,H,G,V_left_0,I,J,V_52,V_h_0,V_right_0,V_left_0,K,G,V_left_0,V_right_0):3+ eval_bits_bounding_box_bb11_in(V_52,L,V_right_0,V_left_0,M)
     [V_left_0>=G+1,V_52>=V_right_0+2,G>=1,V_h_0>=1,V_h_0=L+1,V_h_0=K+1,V_52=I+1,V_h_0=H+1,V_h_0=F+1,V_h_0=C+1,M=6,J=3,E=2,D=0,B=6] 
* CE 76: eval_bits_bounding_box_bb11_in(V_52,V_h_0,V_right_0,V_left_0,B) = 3+ eval_bits_bounding_box_bb13_in(V_52,V_h_0,V_right_0,V_left_0,C,D,E,V_52,V_h_0,V_right_0,V_left_0,F,G):4+ eval_bits_bounding_box_bb17_in(V_52,V_h_0,V_right_0,V_left_0,H,G,V_left_0,I,J,V_52,V_h_0,V_right_0,V_left_0,K,G,V_left_0,L):4+ eval_bits_bounding_box_bb11_in(V_52,M,L,V_left_0,N)
     [V_52>=L+2,V_left_0>=G+1,L>=V_right_0+1,G>=1,V_h_0>=1,V_h_0=M+1,V_h_0=K+1,V_52=I+1,V_h_0=H+1,V_h_0=F+1,V_h_0=C+1,N=6,J=3,E=2,D=0,B=6] 
* CE 77: eval_bits_bounding_box_bb11_in(V_52,V_h_0,V_right_0,V_left_0,B) = 3+ eval_bits_bounding_box_bb13_in(V_52,V_h_0,V_right_0,V_left_0,C,D,E,V_52,V_h_0,V_right_0,V_left_0,F,G):1+ eval_bits_bounding_box_bb17_in(V_52,V_h_0,V_right_0,V_left_0,H,I,J,K,L,V_52,V_h_0,V_right_0,V_left_0,M,N,O,P):1+ eval_bits_bounding_box_bb11_in(V_52,Q,V_right_0,R,S)
     [V_52>=V_right_0+2,V_h_0>=1,0>=V_left_0,V_h_0=Q+1,V_52=P+1,V_h_0=M+1,V_52=K+1,V_h_0=H+1,V_h_0=F+1,V_h_0=C+1,S=6,R=0,O=0,N=0,L=3,J=0,I=0,G=0,E=2,D=0,B=6] 
* CE 78: eval_bits_bounding_box_bb11_in(V_52,V_h_0,V_right_0,V_left_0,B) = 3+ eval_bits_bounding_box_bb13_in(V_52,V_h_0,V_right_0,V_left_0,C,D,E,V_52,V_h_0,V_right_0,V_left_0,F,G):1+ eval_bits_bounding_box_bb17_in(V_52,V_h_0,V_right_0,V_left_0,H,I,J,K,L,V_52,V_h_0,V_right_0,V_left_0,M,N,O,P):2+ eval_bits_bounding_box_bb11_in(V_52,Q,V_right_0,R,S)
     [V_right_0+1>=V_52,V_h_0>=1,0>=V_left_0,V_h_0=Q+1,V_52=P+1,V_h_0=M+1,V_52=K+1,V_h_0=H+1,V_h_0=F+1,V_h_0=C+1,S=6,R=0,O=0,N=0,L=3,J=0,I=0,G=0,E=2,D=0,B=6] 
* CE 79: eval_bits_bounding_box_bb11_in(V_52,V_h_0,V_right_0,V_left_0,B) = 3+ eval_bits_bounding_box_bb13_in(V_52,V_h_0,V_right_0,V_left_0,C,D,E,V_52,V_h_0,V_right_0,V_left_0,F,G):1+ eval_bits_bounding_box_bb17_in(V_52,V_h_0,V_right_0,V_left_0,H,I,J,K,L,V_52,V_h_0,V_right_0,V_left_0,M,N,O,V_right_0):3+ eval_bits_bounding_box_bb11_in(V_52,P,V_right_0,Q,R)
     [V_52>=V_right_0+2,V_h_0>=1,0>=V_left_0,V_h_0=P+1,V_h_0=M+1,V_52=K+1,V_h_0=H+1,V_h_0=F+1,V_h_0=C+1,R=6,Q=0,O=0,N=0,L=3,J=0,I=0,G=0,E=2,D=0,B=6] 
* CE 80: eval_bits_bounding_box_bb11_in(V_52,V_h_0,V_right_0,V_left_0,B) = 3+ eval_bits_bounding_box_bb13_in(V_52,V_h_0,V_right_0,V_left_0,C,D,E,V_52,V_h_0,V_right_0,V_left_0,F,G):1+ eval_bits_bounding_box_bb17_in(V_52,V_h_0,V_right_0,V_left_0,H,I,J,K,L,V_52,V_h_0,V_right_0,V_left_0,M,N,O,P):4+ eval_bits_bounding_box_bb11_in(V_52,Q,V_right_0,R,S)
     [V_52>=P+2,P>=V_right_0+1,V_h_0>=1,0>=V_left_0,V_h_0=Q+1,V_h_0=M+1,V_52=K+1,V_h_0=H+1,V_h_0=F+1,V_h_0=C+1,S=6,R=0,O=0,N=0,L=3,J=0,I=0,G=0,E=2,D=0,B=6] 
* CE 81: eval_bits_bounding_box_bb11_in(V_52,V_h_0,V_right_0,V_left_0,B) = 3+ eval_bits_bounding_box_bb13_in(V_52,V_h_0,V_right_0,V_left_0,C,D,E,V_52,V_h_0,V_right_0,V_left_0,F,G):2+ eval_bits_bounding_box_bb17_in(V_52,V_h_0,V_right_0,V_left_0,H,I,J,K,L,V_52,V_h_0,V_right_0,V_left_0,M,N,O,P):1+ eval_bits_bounding_box_bb11_in(V_52,Q,V_right_0,R,S)
     [V_52>=V_right_0+2,V_left_0>=1,V_h_0>=1,V_h_0=Q+1,V_52=P+1,V_h_0=M+1,V_52=K+1,V_h_0=H+1,V_h_0=F+1,V_h_0=C+1,S=6,R=0,O=0,N=0,L=3,J=0,I=0,G=0,E=2,D=0,B=6] 
* CE 82: eval_bits_bounding_box_bb11_in(V_52,V_h_0,V_right_0,V_left_0,B) = 3+ eval_bits_bounding_box_bb13_in(V_52,V_h_0,V_right_0,V_left_0,C,D,E,V_52,V_h_0,V_right_0,V_left_0,F,G):2+ eval_bits_bounding_box_bb17_in(V_52,V_h_0,V_right_0,V_left_0,H,I,J,K,L,V_52,V_h_0,V_right_0,V_left_0,M,N,O,P):2+ eval_bits_bounding_box_bb11_in(V_52,Q,V_right_0,R,S)
     [V_right_0+1>=V_52,V_left_0>=1,V_h_0>=1,V_h_0=Q+1,V_52=P+1,V_h_0=M+1,V_52=K+1,V_h_0=H+1,V_h_0=F+1,V_h_0=C+1,S=6,R=0,O=0,N=0,L=3,J=0,I=0,G=0,E=2,D=0,B=6] 
* CE 83: eval_bits_bounding_box_bb11_in(V_52,V_h_0,V_right_0,V_left_0,B) = 3+ eval_bits_bounding_box_bb13_in(V_52,V_h_0,V_right_0,V_left_0,C,D,E,V_52,V_h_0,V_right_0,V_left_0,F,G):2+ eval_bits_bounding_box_bb17_in(V_52,V_h_0,V_right_0,V_left_0,H,I,J,K,L,V_52,V_h_0,V_right_0,V_left_0,M,N,O,V_right_0):3+ eval_bits_bounding_box_bb11_in(V_52,P,V_right_0,Q,R)
     [V_52>=V_right_0+2,V_left_0>=1,V_h_0>=1,V_h_0=P+1,V_h_0=M+1,V_52=K+1,V_h_0=H+1,V_h_0=F+1,V_h_0=C+1,R=6,Q=0,O=0,N=0,L=3,J=0,I=0,G=0,E=2,D=0,B=6] 
* CE 84: eval_bits_bounding_box_bb11_in(V_52,V_h_0,V_right_0,V_left_0,B) = 3+ eval_bits_bounding_box_bb13_in(V_52,V_h_0,V_right_0,V_left_0,C,D,E,V_52,V_h_0,V_right_0,V_left_0,F,G):2+ eval_bits_bounding_box_bb17_in(V_52,V_h_0,V_right_0,V_left_0,H,I,J,K,L,V_52,V_h_0,V_right_0,V_left_0,M,N,O,P):4+ eval_bits_bounding_box_bb11_in(V_52,Q,V_right_0,R,S)
     [V_52>=P+2,P>=V_right_0+1,V_left_0>=1,V_h_0>=1,V_h_0=Q+1,V_h_0=M+1,V_52=K+1,V_h_0=H+1,V_h_0=F+1,V_h_0=C+1,S=6,R=0,O=0,N=0,L=3,J=0,I=0,G=0,E=2,D=0,B=6] 
* CE 85: eval_bits_bounding_box_bb11_in(V_52,V_h_0,V_right_0,V_left_0,B) = 3+ eval_bits_bounding_box_bb13_in(V_52,V_h_0,V_right_0,V_left_0,C,D,E,V_52,V_h_0,V_right_0,V_left_0,F,V_left_0):3+ eval_bits_bounding_box_bb17_in(V_52,V_h_0,V_right_0,V_left_0,G,V_left_0,V_left_0,H,I,V_52,V_h_0,V_right_0,V_left_0,J,V_left_0,V_left_0,K):1+ eval_bits_bounding_box_bb11_in(V_52,L,V_right_0,V_left_0,M)
     [V_52>=V_right_0+2,V_left_0>=1,V_h_0>=1,V_h_0=L+1,V_52=K+1,V_h_0=J+1,V_52=H+1,V_h_0=G+1,V_h_0=F+1,V_h_0=C+1,M=6,I=3,E=2,D=0,B=6] 
* CE 86: eval_bits_bounding_box_bb11_in(V_52,V_h_0,V_right_0,V_left_0,B) = 3+ eval_bits_bounding_box_bb13_in(V_52,V_h_0,V_right_0,V_left_0,C,D,E,V_52,V_h_0,V_right_0,V_left_0,F,V_left_0):3+ eval_bits_bounding_box_bb17_in(V_52,V_h_0,V_right_0,V_left_0,G,V_left_0,V_left_0,H,I,V_52,V_h_0,V_right_0,V_left_0,J,V_left_0,V_left_0,K):2+ eval_bits_bounding_box_bb11_in(V_52,L,V_right_0,V_left_0,M)
     [V_right_0+1>=V_52,V_left_0>=1,V_h_0>=1,V_h_0=L+1,V_52=K+1,V_h_0=J+1,V_52=H+1,V_h_0=G+1,V_h_0=F+1,V_h_0=C+1,M=6,I=3,E=2,D=0,B=6] 
* CE 87: eval_bits_bounding_box_bb11_in(V_52,V_h_0,V_right_0,V_left_0,B) = 3+ eval_bits_bounding_box_bb13_in(V_52,V_h_0,V_right_0,V_left_0,C,D,E,V_52,V_h_0,V_right_0,V_left_0,F,V_left_0):3+ eval_bits_bounding_box_bb17_in(V_52,V_h_0,V_right_0,V_left_0,G,V_left_0,V_left_0,H,I,V_52,V_h_0,V_right_0,V_left_0,J,V_left_0,V_left_0,V_right_0):3+ eval_bits_bounding_box_bb11_in(V_52,K,V_right_0,V_left_0,L)
     [V_52>=V_right_0+2,V_left_0>=1,V_h_0>=1,V_h_0=K+1,V_h_0=J+1,V_52=H+1,V_h_0=G+1,V_h_0=F+1,V_h_0=C+1,L=6,I=3,E=2,D=0,B=6] 
* CE 88: eval_bits_bounding_box_bb11_in(V_52,V_h_0,V_right_0,V_left_0,B) = 3+ eval_bits_bounding_box_bb13_in(V_52,V_h_0,V_right_0,V_left_0,C,D,E,V_52,V_h_0,V_right_0,V_left_0,F,V_left_0):3+ eval_bits_bounding_box_bb17_in(V_52,V_h_0,V_right_0,V_left_0,G,V_left_0,V_left_0,H,I,V_52,V_h_0,V_right_0,V_left_0,J,V_left_0,V_left_0,K):4+ eval_bits_bounding_box_bb11_in(V_52,L,V_right_0,V_left_0,M)
     [V_52>=K+2,K>=V_right_0+1,V_left_0>=1,V_h_0>=1,V_h_0=L+1,V_h_0=J+1,V_52=H+1,V_h_0=G+1,V_h_0=F+1,V_h_0=C+1,M=6,I=3,E=2,D=0,B=6] 
* CE 89: eval_bits_bounding_box_bb11_in(V_52,V_h_0,V_right_0,V_left_0,B) = 3+ eval_bits_bounding_box_bb13_in(V_52,V_h_0,V_right_0,V_left_0,C,D,E,V_52,V_h_0,V_right_0,V_left_0,F,G):4+ eval_bits_bounding_box_bb17_in(V_52,V_h_0,V_right_0,V_left_0,H,G,G,I,J,V_52,V_h_0,V_right_0,V_left_0,K,G,G,L):1+ eval_bits_bounding_box_bb11_in(V_52,M,V_right_0,G,N)
     [V_left_0>=G+1,V_52>=V_right_0+2,G>=1,V_h_0>=1,V_h_0=M+1,V_52=L+1,V_h_0=K+1,V_52=I+1,V_h_0=H+1,V_h_0=F+1,V_h_0=C+1,N=6,J=3,E=2,D=0,B=6] 
* CE 90: eval_bits_bounding_box_bb11_in(V_52,V_h_0,V_right_0,V_left_0,B) = 3+ eval_bits_bounding_box_bb13_in(V_52,V_h_0,V_right_0,V_left_0,C,D,E,V_52,V_h_0,V_right_0,V_left_0,F,G):4+ eval_bits_bounding_box_bb17_in(V_52,V_h_0,V_right_0,V_left_0,H,G,G,I,J,V_52,V_h_0,V_right_0,V_left_0,K,G,G,L):2+ eval_bits_bounding_box_bb11_in(V_52,M,V_right_0,G,N)
     [V_left_0>=G+1,V_right_0+1>=V_52,G>=1,V_h_0>=1,V_h_0=M+1,V_52=L+1,V_h_0=K+1,V_52=I+1,V_h_0=H+1,V_h_0=F+1,V_h_0=C+1,N=6,J=3,E=2,D=0,B=6] 
* CE 91: eval_bits_bounding_box_bb11_in(V_52,V_h_0,V_right_0,V_left_0,B) = 3+ eval_bits_bounding_box_bb13_in(V_52,V_h_0,V_right_0,V_left_0,C,D,E,V_52,V_h_0,V_right_0,V_left_0,F,G):4+ eval_bits_bounding_box_bb17_in(V_52,V_h_0,V_right_0,V_left_0,H,G,G,I,J,V_52,V_h_0,V_right_0,V_left_0,K,G,G,V_right_0):3+ eval_bits_bounding_box_bb11_in(V_52,L,V_right_0,G,M)
     [V_left_0>=G+1,V_52>=V_right_0+2,G>=1,V_h_0>=1,V_h_0=L+1,V_h_0=K+1,V_52=I+1,V_h_0=H+1,V_h_0=F+1,V_h_0=C+1,M=6,J=3,E=2,D=0,B=6] 
* CE 92: eval_bits_bounding_box_bb11_in(V_52,V_h_0,V_right_0,V_left_0,B) = 3+ eval_bits_bounding_box_bb13_in(V_52,V_h_0,V_right_0,V_left_0,C,D,E,V_52,V_h_0,V_right_0,V_left_0,F,G):4+ eval_bits_bounding_box_bb17_in(V_52,V_h_0,V_right_0,V_left_0,H,G,G,I,J,V_52,V_h_0,V_right_0,V_left_0,K,G,G,L):4+ eval_bits_bounding_box_bb11_in(V_52,M,V_right_0,G,N)
     [V_52>=L+2,V_left_0>=G+1,L>=V_right_0+1,G>=1,V_h_0>=1,V_h_0=M+1,V_h_0=K+1,V_52=I+1,V_h_0=H+1,V_h_0=F+1,V_h_0=C+1,N=6,J=3,E=2,D=0,B=6] 
* CE 93: eval_bits_bounding_box_bb11_in(V_52,V_h_0,V_right_0,V_left_0,B) = 3+ eval_bits_bounding_box_bb13_in(V_52,V_h_0,V_right_0,V_left_0,C,D,E,V_52,V_h_0,V_right_0,V_left_0,F,G):1+ eval_bits_bounding_box_bb17_in(V_52,V_h_0,V_right_0,V_left_0,H,I,V_left_0,J,K,V_52,V_h_0,V_right_0,V_left_0,L,M,V_left_0,N):1+ eval_bits_bounding_box_bb11_in(V_52,O,V_right_0,V_left_0,P)
     [V_52>=V_right_0+2,V_h_0>=1,0>=V_left_0,V_h_0=O+1,V_52=N+1,V_h_0=L+1,V_52=J+1,V_h_0=H+1,V_h_0=F+1,V_h_0=C+1,P=6,M=0,K=3,I=0,G=0,E=2,D=0,B=6] 
* CE 94: eval_bits_bounding_box_bb11_in(V_52,V_h_0,V_right_0,V_left_0,B) = 3+ eval_bits_bounding_box_bb13_in(V_52,V_h_0,V_right_0,V_left_0,C,D,E,V_52,V_h_0,V_right_0,V_left_0,F,G):1+ eval_bits_bounding_box_bb17_in(V_52,V_h_0,V_right_0,V_left_0,H,I,V_left_0,J,K,V_52,V_h_0,V_right_0,V_left_0,L,M,V_left_0,N):2+ eval_bits_bounding_box_bb11_in(V_52,O,V_right_0,V_left_0,P)
     [V_right_0+1>=V_52,V_h_0>=1,0>=V_left_0,V_h_0=O+1,V_52=N+1,V_h_0=L+1,V_52=J+1,V_h_0=H+1,V_h_0=F+1,V_h_0=C+1,P=6,M=0,K=3,I=0,G=0,E=2,D=0,B=6] 
* CE 95: eval_bits_bounding_box_bb11_in(V_52,V_h_0,V_right_0,V_left_0,B) = 3+ eval_bits_bounding_box_bb13_in(V_52,V_h_0,V_right_0,V_left_0,C,D,E,V_52,V_h_0,V_right_0,V_left_0,F,G):1+ eval_bits_bounding_box_bb17_in(V_52,V_h_0,V_right_0,V_left_0,H,I,V_left_0,J,K,V_52,V_h_0,V_right_0,V_left_0,L,M,V_left_0,V_right_0):3+ eval_bits_bounding_box_bb11_in(V_52,N,V_right_0,V_left_0,O)
     [V_52>=V_right_0+2,V_h_0>=1,0>=V_left_0,V_h_0=N+1,V_h_0=L+1,V_52=J+1,V_h_0=H+1,V_h_0=F+1,V_h_0=C+1,O=6,M=0,K=3,I=0,G=0,E=2,D=0,B=6] 
* CE 96: eval_bits_bounding_box_bb11_in(V_52,V_h_0,V_right_0,V_left_0,B) = 3+ eval_bits_bounding_box_bb13_in(V_52,V_h_0,V_right_0,V_left_0,C,D,E,V_52,V_h_0,V_right_0,V_left_0,F,G):1+ eval_bits_bounding_box_bb17_in(V_52,V_h_0,V_right_0,V_left_0,H,I,V_left_0,J,K,V_52,V_h_0,V_right_0,V_left_0,L,M,V_left_0,N):4+ eval_bits_bounding_box_bb11_in(V_52,O,V_right_0,V_left_0,P)
     [V_52>=N+2,N>=V_right_0+1,V_h_0>=1,0>=V_left_0,V_h_0=O+1,V_h_0=L+1,V_52=J+1,V_h_0=H+1,V_h_0=F+1,V_h_0=C+1,P=6,M=0,K=3,I=0,G=0,E=2,D=0,B=6] 
* CE 97: eval_bits_bounding_box_bb11_in(V_52,V_h_0,V_right_0,V_left_0,B) = 3+ eval_bits_bounding_box_bb13_in(V_52,V_h_0,V_right_0,V_left_0,C,D,E,V_52,V_h_0,V_right_0,V_left_0,F,G):2+ eval_bits_bounding_box_bb17_in(V_52,V_h_0,V_right_0,V_left_0,H,I,V_left_0,J,K,V_52,V_h_0,V_right_0,V_left_0,L,M,V_left_0,N):1+ eval_bits_bounding_box_bb11_in(V_52,O,V_right_0,V_left_0,P)
     [V_52>=V_right_0+2,V_left_0>=1,V_h_0>=1,V_h_0=O+1,V_52=N+1,V_h_0=L+1,V_52=J+1,V_h_0=H+1,V_h_0=F+1,V_h_0=C+1,P=6,M=0,K=3,I=0,G=0,E=2,D=0,B=6] 
* CE 98: eval_bits_bounding_box_bb11_in(V_52,V_h_0,V_right_0,V_left_0,B) = 3+ eval_bits_bounding_box_bb13_in(V_52,V_h_0,V_right_0,V_left_0,C,D,E,V_52,V_h_0,V_right_0,V_left_0,F,G):2+ eval_bits_bounding_box_bb17_in(V_52,V_h_0,V_right_0,V_left_0,H,I,V_left_0,J,K,V_52,V_h_0,V_right_0,V_left_0,L,M,V_left_0,N):2+ eval_bits_bounding_box_bb11_in(V_52,O,V_right_0,V_left_0,P)
     [V_right_0+1>=V_52,V_left_0>=1,V_h_0>=1,V_h_0=O+1,V_52=N+1,V_h_0=L+1,V_52=J+1,V_h_0=H+1,V_h_0=F+1,V_h_0=C+1,P=6,M=0,K=3,I=0,G=0,E=2,D=0,B=6] 
* CE 99: eval_bits_bounding_box_bb11_in(V_52,V_h_0,V_right_0,V_left_0,B) = 3+ eval_bits_bounding_box_bb13_in(V_52,V_h_0,V_right_0,V_left_0,C,D,E,V_52,V_h_0,V_right_0,V_left_0,F,G):2+ eval_bits_bounding_box_bb17_in(V_52,V_h_0,V_right_0,V_left_0,H,I,V_left_0,J,K,V_52,V_h_0,V_right_0,V_left_0,L,M,V_left_0,V_right_0):3+ eval_bits_bounding_box_bb11_in(V_52,N,V_right_0,V_left_0,O)
     [V_52>=V_right_0+2,V_left_0>=1,V_h_0>=1,V_h_0=N+1,V_h_0=L+1,V_52=J+1,V_h_0=H+1,V_h_0=F+1,V_h_0=C+1,O=6,M=0,K=3,I=0,G=0,E=2,D=0,B=6] 
* CE 100: eval_bits_bounding_box_bb11_in(V_52,V_h_0,V_right_0,V_left_0,B) = 3+ eval_bits_bounding_box_bb13_in(V_52,V_h_0,V_right_0,V_left_0,C,D,E,V_52,V_h_0,V_right_0,V_left_0,F,G):2+ eval_bits_bounding_box_bb17_in(V_52,V_h_0,V_right_0,V_left_0,H,I,V_left_0,J,K,V_52,V_h_0,V_right_0,V_left_0,L,M,V_left_0,N):4+ eval_bits_bounding_box_bb11_in(V_52,O,V_right_0,V_left_0,P)
     [V_52>=N+2,N>=V_right_0+1,V_left_0>=1,V_h_0>=1,V_h_0=O+1,V_h_0=L+1,V_52=J+1,V_h_0=H+1,V_h_0=F+1,V_h_0=C+1,P=6,M=0,K=3,I=0,G=0,E=2,D=0,B=6] 
* CE 101: eval_bits_bounding_box_bb11_in(V_52,V_h_0,V_right_0,V_left_0,B) = 3+ eval_bits_bounding_box_bb13_in(V_52,V_h_0,V_right_0,V_left_0,C,D,E,V_52,V_h_0,V_right_0,V_left_0,F,V_left_0):3+ eval_bits_bounding_box_bb17_in(V_52,V_h_0,V_right_0,V_left_0,G,V_left_0,V_left_0,H,I,V_52,V_h_0,V_right_0,V_left_0,J,V_left_0,V_left_0,K):1+ eval_bits_bounding_box_bb11_in(V_52,L,V_right_0,V_left_0,M)
     [V_52>=V_right_0+2,V_left_0>=1,V_h_0>=1,V_h_0=L+1,V_52=K+1,V_h_0=J+1,V_52=H+1,V_h_0=G+1,V_h_0=F+1,V_h_0=C+1,M=6,I=3,E=2,D=0,B=6] 
* CE 102: eval_bits_bounding_box_bb11_in(V_52,V_h_0,V_right_0,V_left_0,B) = 3+ eval_bits_bounding_box_bb13_in(V_52,V_h_0,V_right_0,V_left_0,C,D,E,V_52,V_h_0,V_right_0,V_left_0,F,V_left_0):3+ eval_bits_bounding_box_bb17_in(V_52,V_h_0,V_right_0,V_left_0,G,V_left_0,V_left_0,H,I,V_52,V_h_0,V_right_0,V_left_0,J,V_left_0,V_left_0,K):2+ eval_bits_bounding_box_bb11_in(V_52,L,V_right_0,V_left_0,M)
     [V_right_0+1>=V_52,V_left_0>=1,V_h_0>=1,V_h_0=L+1,V_52=K+1,V_h_0=J+1,V_52=H+1,V_h_0=G+1,V_h_0=F+1,V_h_0=C+1,M=6,I=3,E=2,D=0,B=6] 
* CE 103: eval_bits_bounding_box_bb11_in(V_52,V_h_0,V_right_0,V_left_0,B) = 3+ eval_bits_bounding_box_bb13_in(V_52,V_h_0,V_right_0,V_left_0,C,D,E,V_52,V_h_0,V_right_0,V_left_0,F,V_left_0):3+ eval_bits_bounding_box_bb17_in(V_52,V_h_0,V_right_0,V_left_0,G,V_left_0,V_left_0,H,I,V_52,V_h_0,V_right_0,V_left_0,J,V_left_0,V_left_0,V_right_0):3+ eval_bits_bounding_box_bb11_in(V_52,K,V_right_0,V_left_0,L)
     [V_52>=V_right_0+2,V_left_0>=1,V_h_0>=1,V_h_0=K+1,V_h_0=J+1,V_52=H+1,V_h_0=G+1,V_h_0=F+1,V_h_0=C+1,L=6,I=3,E=2,D=0,B=6] 
* CE 104: eval_bits_bounding_box_bb11_in(V_52,V_h_0,V_right_0,V_left_0,B) = 3+ eval_bits_bounding_box_bb13_in(V_52,V_h_0,V_right_0,V_left_0,C,D,E,V_52,V_h_0,V_right_0,V_left_0,F,V_left_0):3+ eval_bits_bounding_box_bb17_in(V_52,V_h_0,V_right_0,V_left_0,G,V_left_0,V_left_0,H,I,V_52,V_h_0,V_right_0,V_left_0,J,V_left_0,V_left_0,K):4+ eval_bits_bounding_box_bb11_in(V_52,L,V_right_0,V_left_0,M)
     [V_52>=K+2,K>=V_right_0+1,V_left_0>=1,V_h_0>=1,V_h_0=L+1,V_h_0=J+1,V_52=H+1,V_h_0=G+1,V_h_0=F+1,V_h_0=C+1,M=6,I=3,E=2,D=0,B=6] 
* CE 105: eval_bits_bounding_box_bb11_in(V_52,V_h_0,V_right_0,V_left_0,B) = 3+ eval_bits_bounding_box_bb13_in(V_52,V_h_0,V_right_0,V_left_0,C,D,E,V_52,V_h_0,V_right_0,V_left_0,F,G):4+ eval_bits_bounding_box_bb17_in(V_52,V_h_0,V_right_0,V_left_0,H,G,V_left_0,I,J,V_52,V_h_0,V_right_0,V_left_0,K,G,V_left_0,L):1+ eval_bits_bounding_box_bb11_in(V_52,M,V_right_0,V_left_0,N)
     [V_left_0>=G+1,V_52>=V_right_0+2,G>=1,V_h_0>=1,V_h_0=M+1,V_52=L+1,V_h_0=K+1,V_52=I+1,V_h_0=H+1,V_h_0=F+1,V_h_0=C+1,N=6,J=3,E=2,D=0,B=6] 
* CE 106: eval_bits_bounding_box_bb11_in(V_52,V_h_0,V_right_0,V_left_0,B) = 3+ eval_bits_bounding_box_bb13_in(V_52,V_h_0,V_right_0,V_left_0,C,D,E,V_52,V_h_0,V_right_0,V_left_0,F,G):4+ eval_bits_bounding_box_bb17_in(V_52,V_h_0,V_right_0,V_left_0,H,G,V_left_0,I,J,V_52,V_h_0,V_right_0,V_left_0,K,G,V_left_0,L):2+ eval_bits_bounding_box_bb11_in(V_52,M,V_right_0,V_left_0,N)
     [V_left_0>=G+1,V_right_0+1>=V_52,G>=1,V_h_0>=1,V_h_0=M+1,V_52=L+1,V_h_0=K+1,V_52=I+1,V_h_0=H+1,V_h_0=F+1,V_h_0=C+1,N=6,J=3,E=2,D=0,B=6] 
* CE 107: eval_bits_bounding_box_bb11_in(V_52,V_h_0,V_right_0,V_left_0,B) = 3+ eval_bits_bounding_box_bb13_in(V_52,V_h_0,V_right_0,V_left_0,C,D,E,V_52,V_h_0,V_right_0,V_left_0,F,G):4+ eval_bits_bounding_box_bb17_in(V_52,V_h_0,V_right_0,V_left_0,H,G,V_left_0,I,J,V_52,V_h_0,V_right_0,V_left_0,K,G,V_left_0,V_right_0):3+ eval_bits_bounding_box_bb11_in(V_52,L,V_right_0,V_left_0,M)
     [V_left_0>=G+1,V_52>=V_right_0+2,G>=1,V_h_0>=1,V_h_0=L+1,V_h_0=K+1,V_52=I+1,V_h_0=H+1,V_h_0=F+1,V_h_0=C+1,M=6,J=3,E=2,D=0,B=6] 
* CE 108: eval_bits_bounding_box_bb11_in(V_52,V_h_0,V_right_0,V_left_0,B) = 3+ eval_bits_bounding_box_bb13_in(V_52,V_h_0,V_right_0,V_left_0,C,D,E,V_52,V_h_0,V_right_0,V_left_0,F,G):4+ eval_bits_bounding_box_bb17_in(V_52,V_h_0,V_right_0,V_left_0,H,G,V_left_0,I,J,V_52,V_h_0,V_right_0,V_left_0,K,G,V_left_0,L):4+ eval_bits_bounding_box_bb11_in(V_52,M,V_right_0,V_left_0,N)
     [V_52>=L+2,V_left_0>=G+1,L>=V_right_0+1,G>=1,V_h_0>=1,V_h_0=M+1,V_h_0=K+1,V_52=I+1,V_h_0=H+1,V_h_0=F+1,V_h_0=C+1,N=6,J=3,E=2,D=0,B=6] 

### Cost equations --> "Loop" of eval_bits_bounding_box_bb11_in/5 
* CEs [60] --> Loop 35 
* CEs [56,68,72,76] --> Loop 36 
* CEs [64] --> Loop 37 
* CEs [59,89,91,92] --> Loop 38 
* CEs [90] --> Loop 39 
* CEs [55,67,71,75,85,87,88,97,99,100,101,103,104,105,107,108] --> Loop 40 
* CEs [86,98,102,106] --> Loop 41 
* CEs [63,93,95,96] --> Loop 42 
* CEs [94] --> Loop 43 
* CEs [57] --> Loop 44 
* CEs [58] --> Loop 45 
* CEs [53,65,69,73] --> Loop 46 
* CEs [54,66,70,74] --> Loop 47 
* CEs [61] --> Loop 48 
* CEs [62] --> Loop 49 
* CEs [52] --> Loop 50 
* CEs [48] --> Loop 51 
* CEs [51,81,83,84] --> Loop 52 
* CEs [82] --> Loop 53 
* CEs [47,77,79,80] --> Loop 54 
* CEs [78] --> Loop 55 
* CEs [49] --> Loop 56 
* CEs [50] --> Loop 57 
* CEs [45] --> Loop 58 
* CEs [46] --> Loop 59 
* CEs [44] --> Loop 60 

#### Loops of eval_bits_bounding_box_bb11_in/5 
* Loop 35: eval_bits_bounding_box_bb11_in(V_52,V_h_0,V_right_0,V_left_0,B)->  eval_bits_bounding_box_bb11_in(V_52,V_h_0',V_right_0',V_left_0',B')
                  [V_left_0>=V_left_0'+1,V_52>=V_right_0'+2,V_right_0'>=V_right_0+1,V_left_0'>=1,V_h_0>=1,V_h_0=V_h_0'+1,B'=6,B=6] 
* Loop 36: eval_bits_bounding_box_bb11_in(V_52,V_h_0,V_right_0,V_left_0,B)->  eval_bits_bounding_box_bb11_in(V_52,V_h_0',V_right_0',V_left_0,B')
                  [V_52>=V_right_0'+2,V_right_0'>=V_right_0+1,V_left_0>=1,V_h_0>=1,V_h_0=V_h_0'+1,B'=6,B=6] 
* Loop 37: eval_bits_bounding_box_bb11_in(V_52,V_h_0,V_right_0,V_left_0,B)->  eval_bits_bounding_box_bb11_in(V_52,V_h_0',V_right_0',V_left_0,B')
                  [V_52>=V_right_0'+2,V_right_0'>=V_right_0+1,V_h_0>=1,0>=V_left_0,V_h_0=V_h_0'+1,B'=6,B=6] 
* Loop 38: eval_bits_bounding_box_bb11_in(V_52,V_h_0,V_right_0,V_left_0,B)->  eval_bits_bounding_box_bb11_in(V_52,V_h_0',V_right_0,V_left_0',B')
                  [V_left_0>=V_left_0'+1,V_52>=V_right_0+2,V_left_0'>=1,V_h_0>=1,V_h_0=V_h_0'+1,B'=6,B=6] 
* Loop 39: eval_bits_bounding_box_bb11_in(V_52,V_h_0,V_right_0,V_left_0,B)->  eval_bits_bounding_box_bb11_in(V_52,V_h_0',V_right_0,V_left_0',B')
                  [V_left_0>=V_left_0'+1,V_right_0+1>=V_52,V_left_0'>=1,V_h_0>=1,V_h_0=V_h_0'+1,B'=6,B=6] 
* Loop 40: eval_bits_bounding_box_bb11_in(V_52,V_h_0,V_right_0,V_left_0,B)->  eval_bits_bounding_box_bb11_in(V_52,V_h_0',V_right_0,V_left_0,B')
                  [V_52>=V_right_0+2,V_left_0>=1,V_h_0>=1,V_h_0=V_h_0'+1,B'=6,B=6] 
* Loop 41: eval_bits_bounding_box_bb11_in(V_52,V_h_0,V_right_0,V_left_0,B)->  eval_bits_bounding_box_bb11_in(V_52,V_h_0',V_right_0,V_left_0,B')
                  [V_right_0+1>=V_52,V_left_0>=1,V_h_0>=1,V_h_0=V_h_0'+1,B'=6,B=6] 
* Loop 42: eval_bits_bounding_box_bb11_in(V_52,V_h_0,V_right_0,V_left_0,B)->  eval_bits_bounding_box_bb11_in(V_52,V_h_0',V_right_0,V_left_0,B')
                  [V_52>=V_right_0+2,V_h_0>=1,0>=V_left_0,V_h_0=V_h_0'+1,B'=6,B=6] 
* Loop 43: eval_bits_bounding_box_bb11_in(V_52,V_h_0,V_right_0,V_left_0,B)->  eval_bits_bounding_box_bb11_in(V_52,V_h_0',V_right_0,V_left_0,B')
                  [V_right_0+1>=V_52,V_h_0>=1,0>=V_left_0,V_h_0=V_h_0'+1,B'=6,B=6] 
* Loop 44: eval_bits_bounding_box_bb11_in(V_52,V_h_0,V_right_0,V_left_0,B)->  eval_bits_bounding_box_bb11_in(V_52,V_h_0',V_right_0',V_left_0',B')
                  [V_left_0>=V_left_0'+1,V_52>=V_right_0+2,V_left_0'>=1,V_h_0>=1,V_52=V_right_0'+1,V_h_0=V_h_0'+1,B'=6,B=6] 
* Loop 45: eval_bits_bounding_box_bb11_in(V_52,V_h_0,V_right_0,V_left_0,B)->  eval_bits_bounding_box_bb11_in(V_52,V_h_0',V_right_0',V_left_0',B')
                  [V_left_0>=V_left_0'+1,V_right_0+1>=V_52,V_left_0'>=1,V_h_0>=1,V_52=V_right_0'+1,V_h_0=V_h_0'+1,B'=6,B=6] 
* Loop 46: eval_bits_bounding_box_bb11_in(V_52,V_h_0,V_right_0,V_left_0,B)->  eval_bits_bounding_box_bb11_in(V_52,V_h_0',V_right_0',V_left_0,B')
                  [V_52>=V_right_0+2,V_left_0>=1,V_h_0>=1,V_52=V_right_0'+1,V_h_0=V_h_0'+1,B'=6,B=6] 
* Loop 47: eval_bits_bounding_box_bb11_in(V_52,V_h_0,V_right_0,V_left_0,B)->  eval_bits_bounding_box_bb11_in(V_52,V_h_0',V_right_0',V_left_0,B')
                  [V_right_0+1>=V_52,V_left_0>=1,V_h_0>=1,V_52=V_right_0'+1,V_h_0=V_h_0'+1,B'=6,B=6] 
* Loop 48: eval_bits_bounding_box_bb11_in(V_52,V_h_0,V_right_0,V_left_0,B)->  eval_bits_bounding_box_bb11_in(V_52,V_h_0',V_right_0',V_left_0,B')
                  [V_52>=V_right_0+2,V_h_0>=1,0>=V_left_0,V_52=V_right_0'+1,V_h_0=V_h_0'+1,B'=6,B=6] 
* Loop 49: eval_bits_bounding_box_bb11_in(V_52,V_h_0,V_right_0,V_left_0,B)->  eval_bits_bounding_box_bb11_in(V_52,V_h_0',V_right_0',V_left_0,B')
                  [V_right_0+1>=V_52,V_h_0>=1,0>=V_left_0,V_52=V_right_0'+1,V_h_0=V_h_0'+1,B'=6,B=6] 
* Loop 50: eval_bits_bounding_box_bb11_in(V_52,V_h_0,V_right_0,V_left_0,B)->  eval_bits_bounding_box_bb11_in(V_52,V_h_0',V_right_0',V_left_0',B')
                  [V_52>=V_right_0'+2,V_right_0'>=V_right_0+1,V_left_0>=1,V_h_0>=1,V_h_0=V_h_0'+1,B'=6,V_left_0'=0,B=6] 
* Loop 51: eval_bits_bounding_box_bb11_in(V_52,V_h_0,V_right_0,V_left_0,B)->  eval_bits_bounding_box_bb11_in(V_52,V_h_0',V_right_0',V_left_0',B')
                  [V_52>=V_right_0'+2,V_right_0'>=V_right_0+1,V_h_0>=1,0>=V_left_0,V_h_0=V_h_0'+1,B'=6,V_left_0'=0,B=6] 
* Loop 52: eval_bits_bounding_box_bb11_in(V_52,V_h_0,V_right_0,V_left_0,B)->  eval_bits_bounding_box_bb11_in(V_52,V_h_0',V_right_0,V_left_0',B')
                  [V_52>=V_right_0+2,V_left_0>=1,V_h_0>=1,V_h_0=V_h_0'+1,B'=6,V_left_0'=0,B=6] 
* Loop 53: eval_bits_bounding_box_bb11_in(V_52,V_h_0,V_right_0,V_left_0,B)->  eval_bits_bounding_box_bb11_in(V_52,V_h_0',V_right_0,V_left_0',B')
                  [V_right_0+1>=V_52,V_left_0>=1,V_h_0>=1,V_h_0=V_h_0'+1,B'=6,V_left_0'=0,B=6] 
* Loop 54: eval_bits_bounding_box_bb11_in(V_52,V_h_0,V_right_0,V_left_0,B)->  eval_bits_bounding_box_bb11_in(V_52,V_h_0',V_right_0,V_left_0',B')
                  [V_52>=V_right_0+2,V_h_0>=1,0>=V_left_0,V_h_0=V_h_0'+1,B'=6,V_left_0'=0,B=6] 
* Loop 55: eval_bits_bounding_box_bb11_in(V_52,V_h_0,V_right_0,V_left_0,B)->  eval_bits_bounding_box_bb11_in(V_52,V_h_0',V_right_0,V_left_0',B')
                  [V_right_0+1>=V_52,V_h_0>=1,0>=V_left_0,V_h_0=V_h_0'+1,B'=6,V_left_0'=0,B=6] 
* Loop 56: eval_bits_bounding_box_bb11_in(V_52,V_h_0,V_right_0,V_left_0,B)->  eval_bits_bounding_box_bb11_in(V_52,V_h_0',V_right_0',V_left_0',B')
                  [V_52>=V_right_0+2,V_left_0>=1,V_h_0>=1,V_52=V_right_0'+1,V_h_0=V_h_0'+1,B'=6,V_left_0'=0,B=6] 
* Loop 57: eval_bits_bounding_box_bb11_in(V_52,V_h_0,V_right_0,V_left_0,B)->  eval_bits_bounding_box_bb11_in(V_52,V_h_0',V_right_0',V_left_0',B')
                  [V_right_0+1>=V_52,V_left_0>=1,V_h_0>=1,V_52=V_right_0'+1,V_h_0=V_h_0'+1,B'=6,V_left_0'=0,B=6] 
* Loop 58: eval_bits_bounding_box_bb11_in(V_52,V_h_0,V_right_0,V_left_0,B)->  eval_bits_bounding_box_bb11_in(V_52,V_h_0',V_right_0',V_left_0',B')
                  [V_52>=V_right_0+2,V_h_0>=1,0>=V_left_0,V_52=V_right_0'+1,V_h_0=V_h_0'+1,B'=6,V_left_0'=0,B=6] 
* Loop 59: eval_bits_bounding_box_bb11_in(V_52,V_h_0,V_right_0,V_left_0,B)->  eval_bits_bounding_box_bb11_in(V_52,V_h_0',V_right_0',V_left_0',B')
                  [V_right_0+1>=V_52,V_h_0>=1,0>=V_left_0,V_52=V_right_0'+1,V_h_0=V_h_0'+1,B'=6,V_left_0'=0,B=6] 
* Loop 60: eval_bits_bounding_box_bb11_in(V_52,V_h_0,V_right_0,V_left_0,B) [0>=V_h_0,B=6] 

### Ranking functions of CR eval_bits_bounding_box_bb11_in(V_52,V_h_0,V_right_0,V_left_0,B) 
* RF of phase [35,36,38,40]: [V_h_0]
* RF of phase [37,42,51,54]: [V_h_0]
* RF of phase [39,41,45,47]: [V_h_0]
* RF of phase [43,49,55,59]: [V_h_0]

#### Partial ranking functions of CR eval_bits_bounding_box_bb11_in(V_52,V_h_0,V_right_0,V_left_0,B) 
* Partial RF of phase [35,36,38,40]:
  - RF of loop [35:1,36:1]:
    V_52-V_right_0-2
  - RF of loop [35:1,36:1,38:1,40:1]:
    V_h_0
  - RF of loop [35:1,38:1]:
    V_left_0-1
* Partial RF of phase [37,42,51,54]:
  - RF of loop [37:1,42:1,51:1,54:1]:
    V_h_0
  - RF of loop [37:1,51:1]:
    V_52-V_right_0-2
* Partial RF of phase [39,41,45,47]:
  - RF of loop [39:1,41:1,45:1,47:1]:
    V_h_0
  - RF of loop [39:1,45:1]:
    V_left_0-1
* Partial RF of phase [43,49,55,59]:
  - RF of loop [43:1,49:1,55:1,59:1]:
    V_h_0


### Resulting Chains:eval_bits_bounding_box_bb11_in(V_52,V_h_0,V_right_0,V_left_0,B) 
* [[43,49,55,59],60]
* [[35,36,38,40],60]
* [[35,36,38,40],56,[43,49,55,59],60]
* [[35,36,38,40],56,60]
* [[35,36,38,40],52,[37,42,51,54],60]
* [[35,36,38,40],52,[37,42,51,54],58,[43,49,55,59],60]
* [[35,36,38,40],52,[37,42,51,54],58,60]
* [[35,36,38,40],52,[37,42,51,54],48,[43,49,55,59],60]
* [[35,36,38,40],52,[37,42,51,54],48,60]
* [[35,36,38,40],52,60]
* [[35,36,38,40],52,58,[43,49,55,59],60]
* [[35,36,38,40],52,58,60]
* [[35,36,38,40],52,48,[43,49,55,59],60]
* [[35,36,38,40],52,48,60]
* [[35,36,38,40],50,[37,42,51,54],60]
* [[35,36,38,40],50,[37,42,51,54],58,[43,49,55,59],60]
* [[35,36,38,40],50,[37,42,51,54],58,60]
* [[35,36,38,40],50,[37,42,51,54],48,[43,49,55,59],60]
* [[35,36,38,40],50,[37,42,51,54],48,60]
* [[35,36,38,40],50,60]
* [[35,36,38,40],50,58,[43,49,55,59],60]
* [[35,36,38,40],50,58,60]
* [[35,36,38,40],50,48,[43,49,55,59],60]
* [[35,36,38,40],50,48,60]
* [[35,36,38,40],46,[39,41,45,47],60]
* [[35,36,38,40],46,[39,41,45,47],57,[43,49,55,59],60]
* [[35,36,38,40],46,[39,41,45,47],57,60]
* [[35,36,38,40],46,[39,41,45,47],53,[43,49,55,59],60]
* [[35,36,38,40],46,[39,41,45,47],53,60]
* [[35,36,38,40],46,60]
* [[35,36,38,40],46,57,[43,49,55,59],60]
* [[35,36,38,40],46,57,60]
* [[35,36,38,40],46,53,[43,49,55,59],60]
* [[35,36,38,40],46,53,60]
* [[35,36,38,40],44,[39,41,45,47],60]
* [[35,36,38,40],44,[39,41,45,47],57,[43,49,55,59],60]
* [[35,36,38,40],44,[39,41,45,47],57,60]
* [[35,36,38,40],44,[39,41,45,47],53,[43,49,55,59],60]
* [[35,36,38,40],44,[39,41,45,47],53,60]
* [[35,36,38,40],44,60]
* [[35,36,38,40],44,57,[43,49,55,59],60]
* [[35,36,38,40],44,57,60]
* [[35,36,38,40],44,53,[43,49,55,59],60]
* [[35,36,38,40],44,53,60]
* [60]
* [56,[43,49,55,59],60]
* [56,60]
* [52,[37,42,51,54],60]
* [52,[37,42,51,54],58,[43,49,55,59],60]
* [52,[37,42,51,54],58,60]
* [52,[37,42,51,54],48,[43,49,55,59],60]
* [52,[37,42,51,54],48,60]
* [52,60]
* [52,58,[43,49,55,59],60]
* [52,58,60]
* [52,48,[43,49,55,59],60]
* [52,48,60]
* [50,[37,42,51,54],60]
* [50,[37,42,51,54],58,[43,49,55,59],60]
* [50,[37,42,51,54],58,60]
* [50,[37,42,51,54],48,[43,49,55,59],60]
* [50,[37,42,51,54],48,60]
* [50,60]
* [50,58,[43,49,55,59],60]
* [50,58,60]
* [50,48,[43,49,55,59],60]
* [50,48,60]
* [46,[39,41,45,47],60]
* [46,[39,41,45,47],57,[43,49,55,59],60]
* [46,[39,41,45,47],57,60]
* [46,[39,41,45,47],53,[43,49,55,59],60]
* [46,[39,41,45,47],53,60]
* [46,60]
* [46,57,[43,49,55,59],60]
* [46,57,60]
* [46,53,[43,49,55,59],60]
* [46,53,60]
* [44,[39,41,45,47],60]
* [44,[39,41,45,47],57,[43,49,55,59],60]
* [44,[39,41,45,47],57,60]
* [44,[39,41,45,47],53,[43,49,55,59],60]
* [44,[39,41,45,47],53,60]
* [44,60]
* [44,57,[43,49,55,59],60]
* [44,57,60]
* [44,53,[43,49,55,59],60]
* [44,53,60]


### Merging Chains  eval_bits_bounding_box_bb11_in/5 into  External patterns of execution 
* [[60,[43,49,55,59],53,44],[60,[43,49,55,59],57,44],[60,44],[60,53,[39,41,45,47],44],[60,[43,49,55,59],53,[39,41,45,47],44],[60,57,[39,41,45,47],44],[60,[43,49,55,59],57,[39,41,45,47],44],[60,[39,41,45,47],44],[60,[43,49,55,59],53,46],[60,[43,49,55,59],57,46],[60,46],[60,53,[39,41,45,47],46],[60,[43,49,55,59],53,[39,41,45,47],46],[60,57,[39,41,45,47],46],[60,[43,49,55,59],57,[39,41,45,47],46],[60,[39,41,45,47],46],[60,[43,49,55,59],48,50],[60,[43,49,55,59],58,50],[60,50],[60,48,[37,42,51,54],50],[60,[43,49,55,59],48,[37,42,51,54],50],[60,58,[37,42,51,54],50],[60,[43,49,55,59],58,[37,42,51,54],50],[60,[37,42,51,54],50],[60,[43,49,55,59],48,52],[60,[43,49,55,59],58,52],[60,52],[60,48,[37,42,51,54],52],[60,[43,49,55,59],48,[37,42,51,54],52],[60,58,[37,42,51,54],52],[60,[43,49,55,59],58,[37,42,51,54],52],[60,[37,42,51,54],52],[60,56],[60,[43,49,55,59],56],[60,53,44,[35,36,38,40]],[60,[43,49,55,59],53,44,[35,36,38,40]],[60,57,44,[35,36,38,40]],[60,[43,49,55,59],57,44,[35,36,38,40]],[60,44,[35,36,38,40]],[60,53,[39,41,45,47],44,[35,36,38,40]],[60,[43,49,55,59],53,[39,41,45,47],44,[35,36,38,40]],[60,57,[39,41,45,47],44,[35,36,38,40]],[60,[43,49,55,59],57,[39,41,45,47],44,[35,36,38,40]],[60,[39,41,45,47],44,[35,36,38,40]],[60,53,46,[35,36,38,40]],[60,[43,49,55,59],53,46,[35,36,38,40]],[60,57,46,[35,36,38,40]],[60,[43,49,55,59],57,46,[35,36,38,40]],[60,46,[35,36,38,40]],[60,53,[39,41,45,47],46,[35,36,38,40]],[60,[43,49,55,59],53,[39,41,45,47],46,[35,36,38,40]],[60,57,[39,41,45,47],46,[35,36,38,40]],[60,[43,49,55,59],57,[39,41,45,47],46,[35,36,38,40]],[60,[39,41,45,47],46,[35,36,38,40]],[60,48,50,[35,36,38,40]],[60,[43,49,55,59],48,50,[35,36,38,40]],[60,58,50,[35,36,38,40]],[60,[43,49,55,59],58,50,[35,36,38,40]],[60,50,[35,36,38,40]],[60,48,[37,42,51,54],50,[35,36,38,40]],[60,[43,49,55,59],48,[37,42,51,54],50,[35,36,38,40]],[60,58,[37,42,51,54],50,[35,36,38,40]],[60,[43,49,55,59],58,[37,42,51,54],50,[35,36,38,40]],[60,[37,42,51,54],50,[35,36,38,40]],[60,48,52,[35,36,38,40]],[60,[43,49,55,59],48,52,[35,36,38,40]],[60,58,52,[35,36,38,40]],[60,[43,49,55,59],58,52,[35,36,38,40]],[60,52,[35,36,38,40]],[60,48,[37,42,51,54],52,[35,36,38,40]],[60,[43,49,55,59],48,[37,42,51,54],52,[35,36,38,40]],[60,58,[37,42,51,54],52,[35,36,38,40]],[60,[43,49,55,59],58,[37,42,51,54],52,[35,36,38,40]],[60,[37,42,51,54],52,[35,36,38,40]],[60,56,[35,36,38,40]],[60,[43,49,55,59],56,[35,36,38,40]],[60,[35,36,38,40]]] --> 1 
* [[60,53,44],[60,57,44],[60,53,46],[60,57,46],[60,48,50],[60,58,50],[60,48,52],[60,58,52]] --> 2 
* [[60]] --> 3 
* [[60,[43,49,55,59]]] --> 4 


### Specialization of cost equations eval_bits_bounding_box_bb10_in/2 
* CE 18 is refined into CE [109,110,111,112] 


#### Refined cost equations eval_bits_bounding_box_bb10_in/2 
* CE 109: eval_bits_bounding_box_bb10_in(V__01,B) = 1+ eval_bits_bounding_box_bb11_in(C,V__01,D,E,F):1
     [E>=1,V__01>=1,E+1=C,F=6,D=0] 
* CE 110: eval_bits_bounding_box_bb10_in(V__01,B) = 1+ eval_bits_bounding_box_bb11_in(C,D,E,F,G):2
     [F>=1,F+1=C,G=6,E=0,D=2,V__01=2] 
* CE 111: eval_bits_bounding_box_bb10_in(V__01,B) = 1+ eval_bits_bounding_box_bb11_in(C,V__01,D,E,F):3
     [0>=V__01,E+1=C,F=6,D=0] 
* CE 112: eval_bits_bounding_box_bb10_in(V__01,B) = 1+ eval_bits_bounding_box_bb11_in(C,V__01,D,E,F):4
     [V__01>=1,0>=E,E+1=C,F=6,D=0] 

### Cost equations --> "Loop" of eval_bits_bounding_box_bb10_in/2 
* CEs [111] --> Loop 61 
* CEs [109,110,112] --> Loop 62 

#### Loops of eval_bits_bounding_box_bb10_in/2 
* Loop 61: eval_bits_bounding_box_bb10_in(V__01,B) [0>=V__01] 
* Loop 62: eval_bits_bounding_box_bb10_in(V__01,B) [V__01>=1] 

### Ranking functions of CR eval_bits_bounding_box_bb10_in(V__01,B) 

#### Partial ranking functions of CR eval_bits_bounding_box_bb10_in(V__01,B) 


### Resulting Chains:eval_bits_bounding_box_bb10_in(V__01,B) 
* [62]
* [61]


### Merging Chains  eval_bits_bounding_box_bb10_in/2 into  External patterns of execution 
* [[61]] --> 1 
* [[62]] --> 2 


### Specialization of cost equations eval_bits_bounding_box__critedge_in/2 
* CE 6 is refined into CE [113] 
* CE 7 is refined into CE [114,115,116,117,118,119,120,121] 
* CE 8 is refined into CE [122,123,124,125,126,127,128] 
* CE 9 is refined into CE [129,130,131,132,133] 
* CE 10 is refined into CE [134,135,136,137,138] 
* CE 11 is refined into CE [139,140,141,142,143,144,145] 


#### Refined cost equations eval_bits_bounding_box__critedge_in/2 
* CE 113: eval_bits_bounding_box__critedge_in(V_raster,B) = 0
     [] 
* CE 114: eval_bits_bounding_box__critedge_in(V_raster,B) = 1+ eval_bits_bounding_box_bb6_in(V_raster,C,D,E):1+ eval_bits_bounding_box_bb10_in(F,B):1
     [F=0,E=0,D=4,C=0] 
* CE 115: eval_bits_bounding_box__critedge_in(V_raster,B) = 1+ eval_bits_bounding_box_bb6_in(V_raster,C,D,E):2+ eval_bits_bounding_box_bb10_in(F,B):1
     [0>=V_raster+1,F=0,E=0,D=4,C=0] 
* CE 116: eval_bits_bounding_box__critedge_in(V_raster,B) = 1+ eval_bits_bounding_box_bb6_in(V_raster,C,D,E):2+ eval_bits_bounding_box_bb10_in(E,B):2
     [E>=1,0>=V_raster+1,D=4,C=0] 
* CE 117: eval_bits_bounding_box__critedge_in(V_raster,B) = 1+ eval_bits_bounding_box_bb6_in(V_raster,C,D,E):3+ eval_bits_bounding_box_bb10_in(E,B):1
     [0>=E,0>=V_raster+1,D=4,C=0] 
* CE 118: eval_bits_bounding_box__critedge_in(V_raster,B) = 1+ eval_bits_bounding_box_bb6_in(V_raster,C,D,E):4+ eval_bits_bounding_box_bb10_in(F,B):1
     [V_raster>=1,F=0,E=0,D=4,C=0] 
* CE 119: eval_bits_bounding_box__critedge_in(V_raster,B) = 1+ eval_bits_bounding_box_bb6_in(V_raster,C,D,E):4+ eval_bits_bounding_box_bb10_in(E,B):2
     [E>=1,V_raster>=1,D=4,C=0] 
* CE 120: eval_bits_bounding_box__critedge_in(V_raster,B) = 1+ eval_bits_bounding_box_bb6_in(V_raster,C,D,E):5+ eval_bits_bounding_box_bb10_in(E,B):1
     [V_raster>=1,0>=E,D=4,C=0] 
* CE 121: eval_bits_bounding_box__critedge_in(V_raster,B) = 1+ eval_bits_bounding_box_bb6_in(V_raster,C,D,E):6
     [D=4,C=0] 
* CE 122: eval_bits_bounding_box__critedge_in(V_raster,B) = 1+ eval_bits_bounding_box_bb6_in(V_raster,C,D,E):1+ eval_bits_bounding_box_bb10_in(F,B):1
     [V_raster>=1,F=0,E=0,D=4,C=0] 
* CE 123: eval_bits_bounding_box__critedge_in(V_raster,B) = 1+ eval_bits_bounding_box_bb6_in(V_raster,C,D,C):1+ eval_bits_bounding_box_bb10_in(C,B):2
     [C>=1,V_raster>=1,D=4] 
* CE 124: eval_bits_bounding_box__critedge_in(V_raster,B) = 1+ eval_bits_bounding_box_bb6_in(V_raster,C,D,E):4+ eval_bits_bounding_box_bb10_in(F,B):1
     [V_raster>=1,F=0,E=0,D=4,C=0] 
* CE 125: eval_bits_bounding_box__critedge_in(V_raster,B) = 1+ eval_bits_bounding_box_bb6_in(V_raster,C,D,E):4+ eval_bits_bounding_box_bb10_in(E,B):2
     [E>=C,E>=1,C>=0,V_raster>=1,D=4] 
* CE 126: eval_bits_bounding_box__critedge_in(V_raster,B) = 1+ eval_bits_bounding_box_bb6_in(V_raster,C,D,E):5+ eval_bits_bounding_box_bb10_in(E,B):1
     [C>=0,V_raster>=1,0>=E,D=4] 
* CE 127: eval_bits_bounding_box__critedge_in(V_raster,B) = 1+ eval_bits_bounding_box_bb6_in(V_raster,C,D,E):5+ eval_bits_bounding_box_bb10_in(E,B):2
     [C>=E,E>=1,V_raster>=1,D=4] 
* CE 128: eval_bits_bounding_box__critedge_in(V_raster,B) = 1+ eval_bits_bounding_box_bb6_in(V_raster,C,D,E):6
     [C>=0,V_raster>=1,D=4] 
* CE 129: eval_bits_bounding_box__critedge_in(V_raster,B) = 1+ eval_bits_bounding_box_bb6_in(V_raster,C,D,C):1+ eval_bits_bounding_box_bb10_in(C,B):1
     [0>=C,0>=V_raster+1,D=4] 
* CE 130: eval_bits_bounding_box__critedge_in(V_raster,B) = 1+ eval_bits_bounding_box_bb6_in(V_raster,C,D,E):2+ eval_bits_bounding_box_bb10_in(E,B):1
     [E>=C,0>=E,0>=V_raster+1,D=4] 
* CE 131: eval_bits_bounding_box__critedge_in(V_raster,B) = 1+ eval_bits_bounding_box_bb6_in(V_raster,C,D,E):2+ eval_bits_bounding_box_bb10_in(E,B):2
     [E>=1,0>=C,0>=V_raster+1,D=4] 
* CE 132: eval_bits_bounding_box__critedge_in(V_raster,B) = 1+ eval_bits_bounding_box_bb6_in(V_raster,C,D,E):3+ eval_bits_bounding_box_bb10_in(E,B):1
     [C>=E,0>=C,0>=V_raster+1,D=4] 
* CE 133: eval_bits_bounding_box__critedge_in(V_raster,B) = 1+ eval_bits_bounding_box_bb6_in(V_raster,C,D,E):6
     [0>=C,0>=V_raster+1,D=4] 
* CE 134: eval_bits_bounding_box__critedge_in(V_raster,B) = 1+ eval_bits_bounding_box_bb6_in(V_raster,C,D,C):1+ eval_bits_bounding_box_bb10_in(C,B):1
     [V_raster>=1,0>=C,D=4] 
* CE 135: eval_bits_bounding_box__critedge_in(V_raster,B) = 1+ eval_bits_bounding_box_bb6_in(V_raster,C,D,E):4+ eval_bits_bounding_box_bb10_in(E,B):1
     [E>=C,V_raster>=1,0>=E,D=4] 
* CE 136: eval_bits_bounding_box__critedge_in(V_raster,B) = 1+ eval_bits_bounding_box_bb6_in(V_raster,C,D,E):4+ eval_bits_bounding_box_bb10_in(E,B):2
     [E>=1,V_raster>=1,0>=C,D=4] 
* CE 137: eval_bits_bounding_box__critedge_in(V_raster,B) = 1+ eval_bits_bounding_box_bb6_in(V_raster,C,D,E):5+ eval_bits_bounding_box_bb10_in(E,B):1
     [C>=E,V_raster>=1,0>=C,D=4] 
* CE 138: eval_bits_bounding_box__critedge_in(V_raster,B) = 1+ eval_bits_bounding_box_bb6_in(V_raster,C,D,E):6
     [V_raster>=1,0>=C,D=4] 
* CE 139: eval_bits_bounding_box__critedge_in(V_raster,B) = 1+ eval_bits_bounding_box_bb6_in(V_raster,C,D,E):1+ eval_bits_bounding_box_bb10_in(F,B):1
     [0>=V_raster+1,F=0,E=0,D=4,C=0] 
* CE 140: eval_bits_bounding_box__critedge_in(V_raster,B) = 1+ eval_bits_bounding_box_bb6_in(V_raster,C,D,C):1+ eval_bits_bounding_box_bb10_in(C,B):2
     [C>=1,0>=V_raster+1,D=4] 
* CE 141: eval_bits_bounding_box__critedge_in(V_raster,B) = 1+ eval_bits_bounding_box_bb6_in(V_raster,C,D,E):2+ eval_bits_bounding_box_bb10_in(F,B):1
     [0>=V_raster+1,F=0,E=0,D=4,C=0] 
* CE 142: eval_bits_bounding_box__critedge_in(V_raster,B) = 1+ eval_bits_bounding_box_bb6_in(V_raster,C,D,E):2+ eval_bits_bounding_box_bb10_in(E,B):2
     [E>=C,E>=1,C>=0,0>=V_raster+1,D=4] 
* CE 143: eval_bits_bounding_box__critedge_in(V_raster,B) = 1+ eval_bits_bounding_box_bb6_in(V_raster,C,D,E):3+ eval_bits_bounding_box_bb10_in(E,B):1
     [C>=0,0>=E,0>=V_raster+1,D=4] 
* CE 144: eval_bits_bounding_box__critedge_in(V_raster,B) = 1+ eval_bits_bounding_box_bb6_in(V_raster,C,D,E):3+ eval_bits_bounding_box_bb10_in(E,B):2
     [C>=E,E>=1,0>=V_raster+1,D=4] 
* CE 145: eval_bits_bounding_box__critedge_in(V_raster,B) = 1+ eval_bits_bounding_box_bb6_in(V_raster,C,D,E):6
     [C>=0,0>=V_raster+1,D=4] 

### Cost equations --> "Loop" of eval_bits_bounding_box__critedge_in/2 
* CEs [121,128,133,138,145] --> Loop 63 
* CEs [113,114,115,116,117,118,119,120,122,123,124,125,126,127,129,130,131,132,134,135,136,137,139,140,141,142,143,144] --> Loop 64 

#### Loops of eval_bits_bounding_box__critedge_in/2 
* Loop 63: eval_bits_bounding_box__critedge_in(V_raster,B) [] 
* Loop 64: eval_bits_bounding_box__critedge_in(V_raster,B) [] 

### Ranking functions of CR eval_bits_bounding_box__critedge_in(V_raster,B) 

#### Partial ranking functions of CR eval_bits_bounding_box__critedge_in(V_raster,B) 


### Resulting Chains:eval_bits_bounding_box__critedge_in(V_raster,B) 
* [64]
* [63]...


### Merging Chains  eval_bits_bounding_box__critedge_in/2 into  External patterns of execution 
* [[64]] --> 1 
* [[63]] --> 2 


### Specialization of cost equations eval_bits_bounding_box_bb0_in/2 
* CE 3 is refined into CE [146,147,148] 


#### Refined cost equations eval_bits_bounding_box_bb0_in/2 
* CE 146: eval_bits_bounding_box_bb0_in(V_raster,B) = 1+ eval_bits_bounding_box_bb1_in(V_raster,C,V_raster):1+ eval_bits_bounding_box__critedge_in(V_raster,B):1
     [C=5] 
* CE 147: eval_bits_bounding_box_bb0_in(V_raster,B) = 1+ eval_bits_bounding_box_bb1_in(V_raster,C,V_raster):1+ eval_bits_bounding_box__critedge_in(V_raster,B):2
     [C=5] 
* CE 148: eval_bits_bounding_box_bb0_in(V_raster,B) = 1+ eval_bits_bounding_box_bb1_in(V_raster,C,D):2
     [C=5] 

### Cost equations --> "Loop" of eval_bits_bounding_box_bb0_in/2 
* CEs [147,148] --> Loop 65 
* CEs [146] --> Loop 66 

#### Loops of eval_bits_bounding_box_bb0_in/2 
* Loop 65: eval_bits_bounding_box_bb0_in(V_raster,B) [] 
* Loop 66: eval_bits_bounding_box_bb0_in(V_raster,B) [] 

### Ranking functions of CR eval_bits_bounding_box_bb0_in(V_raster,B) 

#### Partial ranking functions of CR eval_bits_bounding_box_bb0_in(V_raster,B) 


### Resulting Chains:eval_bits_bounding_box_bb0_in(V_raster,B) 
* [66]
* [65]...


### Merging Chains  eval_bits_bounding_box_bb0_in/2 into  External patterns of execution 
* [[66]] --> 1 
* [[65]] --> 2 


### Specialization of cost equations eval_bits_bounding_box_start/3 
* CE 2 is refined into CE [149,150] 


#### Refined cost equations eval_bits_bounding_box_start/3 
* CE 149: eval_bits_bounding_box_start(V_height,V_raster,B) = 0+ eval_bits_bounding_box_bb0_in(V_raster,B):1
     [] 
* CE 150: eval_bits_bounding_box_start(V_height,V_raster,B) = 0+ eval_bits_bounding_box_bb0_in(V_raster,B):2
     [] 

### Cost equations --> "Loop" of eval_bits_bounding_box_start/3 
* CEs [150] --> Loop 67 
* CEs [149] --> Loop 68 

#### Loops of eval_bits_bounding_box_start/3 
* Loop 67: eval_bits_bounding_box_start(V_height,V_raster,B) [] 
* Loop 68: eval_bits_bounding_box_start(V_height,V_raster,B) [] 

### Ranking functions of CR eval_bits_bounding_box_start(V_height,V_raster,B) 

#### Partial ranking functions of CR eval_bits_bounding_box_start(V_height,V_raster,B) 


### Resulting Chains:eval_bits_bounding_box_start(V_height,V_raster,B) 
* [68]
* [67]...


### Merging Chains  eval_bits_bounding_box_start/3 into  External patterns of execution 
* [[68]] --> 1 
* [[67]] --> 2 


Computing Bounds
=====================================

#### Cost of loops [21] 

 * loop 21:eval_bits_bounding_box_bb1_in(V_raster,B,C) -> [eval_bits_bounding_box_bb1_in(V_raster',B',C')] 
1
#### Cost of phase [21]:eval_bits_bounding_box_bb1_in(V_raster,B,C) -> [eval_bits_bounding_box_bb1_in(V_raster',B',C')] 
1*it(21)+0
#### Cost of phase [21]:eval_bits_bounding_box_bb1_in(V_raster,B,C) -> [eval_bits_bounding_box_bb1_in(V_raster',B',C')] 
1*it(21)+0
#### Cost of chains of eval_bits_bounding_box_bb1_in(V_raster,B,C):
* Chain [[21]]...: 1*it(21)+0
  with precondition: [B=5] 

* Chain [[21],22]: 1*it(21)+0
  with precondition: [B=5,V_raster=C] 

* Chain [22]: 0
  with precondition: [B=5,C=V_raster] 


#### Cost of loops [23] 

 * loop 23:eval_bits_bounding_box_bb6_in(V_raster,V_30,B,C) -> [eval_bits_bounding_box_bb6_in(V_raster',V_30',B',C')] 
1
#### Cost of phase [23]:eval_bits_bounding_box_bb6_in(V_raster,V_30,B,C) -> [eval_bits_bounding_box_bb6_in(V_raster',V_30',B',C')] 
1*it(23)+0
#### Cost of phase [23]:eval_bits_bounding_box_bb6_in(V_raster,V_30,B,C) -> [eval_bits_bounding_box_bb6_in(V_raster',V_30',B',C')] 
1*it(23)+0
#### Cost of phase [23]:eval_bits_bounding_box_bb6_in(V_raster,V_30,B,C) -> [eval_bits_bounding_box_bb6_in(V_raster',V_30',B',C')] 
1*it(23)+0
#### Cost of phase [23]:eval_bits_bounding_box_bb6_in(V_raster,V_30,B,C) -> [eval_bits_bounding_box_bb6_in(V_raster',V_30',B',C')] 
1*it(23)+0
#### Cost of phase [23]:eval_bits_bounding_box_bb6_in(V_raster,V_30,B,C) -> [eval_bits_bounding_box_bb6_in(V_raster',V_30',B',C')] 
1*it(23)+0
#### Cost of phase [23]:eval_bits_bounding_box_bb6_in(V_raster,V_30,B,C) -> [eval_bits_bounding_box_bb6_in(V_raster',V_30',B',C')] 
1*it(23)+0
#### Cost of chains of eval_bits_bounding_box_bb6_in(V_raster,V_30,B,C):
* Chain [[23]]...: 1*it(23)+0
  with precondition: [B=4] 

* Chain [[23],28]: 1*it(23)+0
  with precondition: [B=4,V_30=C] 

* Chain [[23],27]: 1*it(23)+0
  with precondition: [B=4,0>=V_raster+1,C>=V_30] 

* Chain [[23],26]: 1*it(23)+0
  with precondition: [B=4,0>=V_raster+1,V_30>=C] 

* Chain [[23],25]: 1*it(23)+0
  with precondition: [B=4,V_raster>=1,C>=V_30] 

* Chain [[23],24]: 1*it(23)+0
  with precondition: [B=4,V_raster>=1,V_30>=C] 

* Chain [28]: 0
  with precondition: [B=4,C=V_30] 

* Chain [27]: 0
  with precondition: [B=4,0>=V_raster+1,C>=V_30] 

* Chain [26]: 0
  with precondition: [B=4,0>=V_raster+1,V_30>=C] 

* Chain [25]: 0
  with precondition: [B=4,V_raster>=1,C>=V_30] 

* Chain [24]: 0
  with precondition: [B=4,V_raster>=1,V_30>=C] 


#### Cost of loops [29] 

 * loop 29:eval_bits_bounding_box_bb13_in(V_52,V_h_0,V_right_0,V_left_0,V_54,V_n1_0,B,C,D,E,F,G,H) -> [eval_bits_bounding_box_bb13_in(V_52',V_h_0',V_right_0',V_left_0',V_54',V_n1_0',B',C',D',E',F',G',H')] 
1
#### Cost of phase [29]:eval_bits_bounding_box_bb13_in(V_52,V_h_0,V_right_0,V_left_0,V_54,V_n1_0,B,C,D,E,F,G,H) -> [eval_bits_bounding_box_bb13_in(V_52',V_h_0',V_right_0',V_left_0',V_54',V_n1_0',B',C',D',E',F',G',H')] 
1*it(29)+0
  Such that:it(29) =< V_left_0-V_n1_0
it(29) =< V_left_0-V_n1_0-V_left_0'+V_n1_0'

#### Cost of phase [29]:eval_bits_bounding_box_bb13_in(V_52,V_h_0,V_right_0,V_left_0,V_54,V_n1_0,B,C,D,E,F,G,H) -> [eval_bits_bounding_box_bb13_in(V_52',V_h_0',V_right_0',V_left_0',V_54',V_n1_0',B',C',D',E',F',G',H')] 
1*it(29)+0
  Such that:it(29) =< V_left_0-V_n1_0
it(29) =< V_left_0-V_n1_0-V_left_0'+V_n1_0'

#### Cost of chains of eval_bits_bounding_box_bb13_in(V_52,V_h_0,V_right_0,V_left_0,V_54,V_n1_0,B,C,D,E,F,G,H):
* Chain [[29],31]: 1*it(29)+0
  Such that:it(29) =< -V_n1_0+F

  with precondition: [B=2,V_h_0=V_54+1,V_52=C,V_h_0=D,V_right_0=E,V_left_0=F,V_h_0=G+1,V_left_0=H,V_h_0>=1,V_n1_0>=0,V_left_0>=V_n1_0+1] 

* Chain [[29],30]: 1*it(29)+0
  Such that:it(29) =< -V_n1_0+H

  with precondition: [B=2,V_h_0=V_54+1,V_52=C,V_h_0=D,V_right_0=E,V_left_0=F,V_h_0=G+1,V_h_0>=1,V_n1_0>=0,H>=V_n1_0+1,V_left_0>=H+1] 

* Chain [31]: 0
  with precondition: [B=2,C=V_52,V_54+1=V_h_0,E=V_right_0,V_54+1=D,V_left_0=F,V_54=G,V_n1_0=H,V_54>=0,V_n1_0>=0,V_n1_0>=V_left_0] 

* Chain [30]: 0
  with precondition: [B=2,C=V_52,V_54+1=V_h_0,E=V_right_0,V_54+1=D,V_left_0=F,V_54=G,V_n1_0=H,V_54>=0,V_n1_0>=0,V_left_0>=V_n1_0+1] 


#### Cost of loops [32] 

 * loop 32:eval_bits_bounding_box_bb17_in(V_52,V_h_0,V_right_0,V_left_0,V_54,V_n1_0,V_left_1,V_n1_1,B,C,D,E,F,G,H,I,J) -> [eval_bits_bounding_box_bb17_in(V_52',V_h_0',V_right_0',V_left_0',V_54',V_n1_0',V_left_1',V_n1_1',B',C',D',E',F',G',H',I',J')] 
1
#### Cost of phase [32]:eval_bits_bounding_box_bb17_in(V_52,V_h_0,V_right_0,V_left_0,V_54,V_n1_0,V_left_1,V_n1_1,B,C,D,E,F,G,H,I,J) -> [eval_bits_bounding_box_bb17_in(V_52',V_h_0',V_right_0',V_left_0',V_54',V_n1_0',V_left_1',V_n1_1',B',C',D',E',F',G',H',I',J')] 
1*it(32)+0
  Such that:it(32) =< -V_right_0+V_n1_1
it(32) =< -V_right_0+V_n1_1+V_right_0'-V_n1_1'

#### Cost of phase [32]:eval_bits_bounding_box_bb17_in(V_52,V_h_0,V_right_0,V_left_0,V_54,V_n1_0,V_left_1,V_n1_1,B,C,D,E,F,G,H,I,J) -> [eval_bits_bounding_box_bb17_in(V_52',V_h_0',V_right_0',V_left_0',V_54',V_n1_0',V_left_1',V_n1_1',B',C',D',E',F',G',H',I',J')] 
1*it(32)+0
  Such that:it(32) =< -V_right_0+V_n1_1
it(32) =< -V_right_0+V_n1_1+V_right_0'-V_n1_1'

#### Cost of chains of eval_bits_bounding_box_bb17_in(V_52,V_h_0,V_right_0,V_left_0,V_54,V_n1_0,V_left_1,V_n1_1,B,C,D,E,F,G,H,I,J):
* Chain [[32],34]: 1*it(32)+0
  Such that:it(32) =< V_n1_1-J

  with precondition: [B=3,V_52=C,V_h_0=D,V_right_0=E,V_left_0=F,V_54=G,V_n1_0=H,V_left_1=I,J>=V_right_0+1,V_52>=V_n1_1+1,V_n1_1>=J+1] 

* Chain [[32],33]: 1*it(32)+0
  Such that:it(32) =< V_n1_1-E

  with precondition: [B=3,V_52=C,V_h_0=D,V_right_0=E,V_left_0=F,V_54=G,V_n1_0=H,V_left_1=I,V_right_0=J,V_n1_1>=V_right_0+1,V_52>=V_n1_1+1] 

* Chain [34]: 0
  with precondition: [B=3,D=V_h_0,F=V_left_0,G=V_54,H=V_n1_0,I=V_left_1,V_52=C,V_right_0=E,V_n1_1=J,V_n1_1>=V_right_0+1,V_52>=V_n1_1+1] 

* Chain [33]: 0
  with precondition: [B=3,D=V_h_0,F=V_left_0,G=V_54,H=V_n1_0,I=V_left_1,V_52=C,V_right_0=E,V_n1_1=J,V_52>=V_n1_1+1,V_right_0>=V_n1_1] 


#### Cost of loops [43,49,55,59] 

 * loop 43:eval_bits_bounding_box_bb11_in(V_52,V_h_0,V_right_0,V_left_0,B) -> [eval_bits_bounding_box_bb11_in(V_52',V_h_0',V_right_0',V_left_0',B')] 
3
 * loop 49:eval_bits_bounding_box_bb11_in(V_52,V_h_0,V_right_0,V_left_0,B) -> [eval_bits_bounding_box_bb11_in(V_52',V_h_0',V_right_0',V_left_0',B')] 
3
 * loop 55:eval_bits_bounding_box_bb11_in(V_52,V_h_0,V_right_0,V_left_0,B) -> [eval_bits_bounding_box_bb11_in(V_52',V_h_0',V_right_0',V_left_0',B')] 
3
 * loop 59:eval_bits_bounding_box_bb11_in(V_52,V_h_0,V_right_0,V_left_0,B) -> [eval_bits_bounding_box_bb11_in(V_52',V_h_0',V_right_0',V_left_0',B')] 
3
#### Cost of phase [43,49,55,59]:eval_bits_bounding_box_bb11_in(V_52,V_h_0,V_right_0,V_left_0,B) -> [eval_bits_bounding_box_bb11_in(V_52',V_h_0',V_right_0',V_left_0',B')] 
12*it(43)+0
  Such that:aux(7) =< V_h_0
aux(8) =< V_h_0-V_h_0'
it(43) =< aux(7)
it(43) =< aux(8)

#### Cost of loops [35,36,38,40] 

 * loop 35:eval_bits_bounding_box_bb11_in(V_52,V_h_0,V_right_0,V_left_0,B) -> [eval_bits_bounding_box_bb11_in(V_52',V_h_0',V_right_0',V_left_0',B')] 
1*s(10)+1*s(9)+3
  Such that:s(9) =< V_52'-V_right_0'
s(10) =< V_left_0'

 * loop 36:eval_bits_bounding_box_bb11_in(V_52,V_h_0,V_right_0,V_left_0,B) -> [eval_bits_bounding_box_bb11_in(V_52',V_h_0',V_right_0',V_left_0',B')] 
3*s(22)+3*s(21)+1*s(18)+3
  Such that:s(18) =< V_52-V_right_0'
s(19) =< V_52'-V_right_0'
s(20) =< V_left_0'
s(21) =< s(19)
s(22) =< s(20)

 * loop 38:eval_bits_bounding_box_bb11_in(V_52,V_h_0,V_right_0,V_left_0,B) -> [eval_bits_bounding_box_bb11_in(V_52',V_h_0',V_right_0',V_left_0',B')] 
4*s(34)+2*s(33)+1*s(30)+3
  Such that:s(30) =< V_52-V_right_0'
s(31) =< V_52'-V_right_0'
s(32) =< V_left_0'
s(33) =< s(31)
s(34) =< s(32)

 * loop 40:eval_bits_bounding_box_bb11_in(V_52,V_h_0,V_right_0,V_left_0,B) -> [eval_bits_bounding_box_bb11_in(V_52',V_h_0',V_right_0',V_left_0',B')] 
12*s(64)+6*s(63)+6*s(62)+3
  Such that:s(59) =< V_52-V_right_0'
s(60) =< V_52'-V_right_0'
s(61) =< V_left_0'
s(62) =< s(59)
s(63) =< s(60)
s(64) =< s(61)

#### Cost of phase [35,36,38,40]:eval_bits_bounding_box_bb11_in(V_52,V_h_0,V_right_0,V_left_0,B) -> [eval_bits_bounding_box_bb11_in(V_52',V_h_0',V_right_0',V_left_0',B')] 
3*it(35)+3*it(36)+3*it(38)+3*it(40)+1*s(65)+1*s(66)+3*s(67)+3*s(68)+1*s(69)+4*s(72)+2*s(73)+1*s(74)+12*s(77)+12*s(78)+0
  Such that:aux(28) =< V_52-V_right_0
aux(29) =< V_52-V_right_0-V_52'+V_right_0'
aux(30) =< V_h_0
aux(31) =< V_h_0-V_h_0'
aux(32) =< V_left_0
aux(33) =< V_left_0-V_left_0'
it(35) =< aux(28)
it(36) =< aux(28)
it(35) =< aux(29)
it(36) =< aux(29)
it(35) =< aux(30)
it(36) =< aux(30)
it(38) =< aux(30)
it(40) =< aux(30)
it(35) =< aux(31)
it(36) =< aux(31)
it(38) =< aux(31)
it(40) =< aux(31)
it(35) =< aux(32)
it(38) =< aux(32)
it(35) =< aux(33)
it(38) =< aux(33)
aux(21) =< aux(32)+1
aux(22) =< aux(28)+1
aux(24) =< aux(32)
aux(19) =< aux(28)
s(65) =< it(35)*aux(32)
s(66) =< it(35)*aux(28)
s(80) =< it(40)*aux(21)
s(81) =< it(40)*aux(22)
s(75) =< it(38)*aux(24)
s(76) =< it(38)*aux(22)
s(74) =< it(38)*aux(22)
s(70) =< it(36)*aux(21)
s(71) =< it(36)*aux(19)
s(69) =< it(36)*aux(19)
s(78) =< s(81)
s(77) =< s(80)
s(73) =< s(76)
s(72) =< s(75)
s(68) =< s(71)
s(67) =< s(70)

#### Cost of phase [35,36,38,40]:eval_bits_bounding_box_bb11_in(V_52,V_h_0,V_right_0,V_left_0,B) -> [eval_bits_bounding_box_bb11_in(V_52',V_h_0',V_right_0',V_left_0',B')] 
3*it(35)+3*it(36)+3*it(38)+3*it(40)+1*s(65)+1*s(66)+3*s(67)+3*s(68)+1*s(69)+4*s(72)+2*s(73)+1*s(74)+12*s(77)+12*s(78)+0
  Such that:aux(28) =< V_52-V_right_0
aux(29) =< V_52-V_right_0-V_52'+V_right_0'
aux(30) =< V_h_0
aux(31) =< V_h_0-V_h_0'
aux(32) =< V_left_0
aux(33) =< V_left_0-V_left_0'
it(35) =< aux(28)
it(36) =< aux(28)
it(35) =< aux(29)
it(36) =< aux(29)
it(35) =< aux(30)
it(36) =< aux(30)
it(38) =< aux(30)
it(40) =< aux(30)
it(35) =< aux(31)
it(36) =< aux(31)
it(38) =< aux(31)
it(40) =< aux(31)
it(35) =< aux(32)
it(38) =< aux(32)
it(35) =< aux(33)
it(38) =< aux(33)
aux(21) =< aux(32)+1
aux(22) =< aux(28)+1
aux(24) =< aux(32)
aux(19) =< aux(28)
s(65) =< it(35)*aux(32)
s(66) =< it(35)*aux(28)
s(80) =< it(40)*aux(21)
s(81) =< it(40)*aux(22)
s(75) =< it(38)*aux(24)
s(76) =< it(38)*aux(22)
s(74) =< it(38)*aux(22)
s(70) =< it(36)*aux(21)
s(71) =< it(36)*aux(19)
s(69) =< it(36)*aux(19)
s(78) =< s(81)
s(77) =< s(80)
s(73) =< s(76)
s(72) =< s(75)
s(68) =< s(71)
s(67) =< s(70)

#### Cost of phase [35,36,38,40]:eval_bits_bounding_box_bb11_in(V_52,V_h_0,V_right_0,V_left_0,B) -> [eval_bits_bounding_box_bb11_in(V_52',V_h_0',V_right_0',V_left_0',B')] 
3*it(35)+3*it(36)+3*it(38)+3*it(40)+1*s(65)+1*s(66)+3*s(67)+3*s(68)+1*s(69)+4*s(72)+2*s(73)+1*s(74)+12*s(77)+12*s(78)+0
  Such that:aux(28) =< V_52-V_right_0
aux(29) =< V_52-V_right_0-V_52'+V_right_0'
aux(30) =< V_h_0
aux(31) =< V_h_0-V_h_0'
aux(32) =< V_left_0
aux(33) =< V_left_0-V_left_0'
it(35) =< aux(28)
it(36) =< aux(28)
it(35) =< aux(29)
it(36) =< aux(29)
it(35) =< aux(30)
it(36) =< aux(30)
it(38) =< aux(30)
it(40) =< aux(30)
it(35) =< aux(31)
it(36) =< aux(31)
it(38) =< aux(31)
it(40) =< aux(31)
it(35) =< aux(32)
it(38) =< aux(32)
it(35) =< aux(33)
it(38) =< aux(33)
aux(21) =< aux(32)+1
aux(22) =< aux(28)+1
aux(24) =< aux(32)
aux(19) =< aux(28)
s(65) =< it(35)*aux(32)
s(66) =< it(35)*aux(28)
s(80) =< it(40)*aux(21)
s(81) =< it(40)*aux(22)
s(75) =< it(38)*aux(24)
s(76) =< it(38)*aux(22)
s(74) =< it(38)*aux(22)
s(70) =< it(36)*aux(21)
s(71) =< it(36)*aux(19)
s(69) =< it(36)*aux(19)
s(78) =< s(81)
s(77) =< s(80)
s(73) =< s(76)
s(72) =< s(75)
s(68) =< s(71)
s(67) =< s(70)

#### Cost of loops [37,42,51,54] 

 * loop 37:eval_bits_bounding_box_bb11_in(V_52,V_h_0,V_right_0,V_left_0,B) -> [eval_bits_bounding_box_bb11_in(V_52',V_h_0',V_right_0',V_left_0',B')] 
1*s(84)+3
  Such that:s(84) =< V_52-V_right_0'

 * loop 42:eval_bits_bounding_box_bb11_in(V_52,V_h_0,V_right_0,V_left_0,B) -> [eval_bits_bounding_box_bb11_in(V_52',V_h_0',V_right_0',V_left_0',B')] 
3*s(89)+3
  Such that:s(88) =< V_52-V_right_0'
s(89) =< s(88)

 * loop 51:eval_bits_bounding_box_bb11_in(V_52,V_h_0,V_right_0,V_left_0,B) -> [eval_bits_bounding_box_bb11_in(V_52',V_h_0',V_right_0',V_left_0',B')] 
1*s(91)+3
  Such that:s(91) =< V_52-V_right_0'

 * loop 54:eval_bits_bounding_box_bb11_in(V_52,V_h_0,V_right_0,V_left_0,B) -> [eval_bits_bounding_box_bb11_in(V_52',V_h_0',V_right_0',V_left_0',B')] 
3*s(96)+3
  Such that:s(95) =< V_52-V_right_0'
s(96) =< s(95)

#### Cost of phase [37,42,51,54]:eval_bits_bounding_box_bb11_in(V_52,V_h_0,V_right_0,V_left_0,B) -> [eval_bits_bounding_box_bb11_in(V_52',V_h_0',V_right_0',V_left_0',B')] 
6*it(37)+6*it(42)+1*s(97)+6*s(98)+1*s(100)+0
  Such that:aux(49) =< V_52-V_right_0
aux(50) =< V_52-V_right_0-V_52'+V_right_0'
aux(51) =< V_h_0
aux(52) =< V_h_0-V_h_0'
it(37) =< aux(49)
it(37) =< aux(50)
it(37) =< aux(51)
it(42) =< aux(51)
it(37) =< aux(52)
it(42) =< aux(52)
aux(46) =< aux(49)+1
aux(47) =< aux(49)
s(97) =< it(37)*aux(49)
s(99) =< it(42)*aux(46)
s(100) =< it(37)*aux(47)
s(98) =< s(99)

#### Cost of phase [35,36,38,40]:eval_bits_bounding_box_bb11_in(V_52,V_h_0,V_right_0,V_left_0,B) -> [eval_bits_bounding_box_bb11_in(V_52',V_h_0',V_right_0',V_left_0',B')] 
3*it(35)+3*it(36)+3*it(38)+3*it(40)+1*s(65)+1*s(66)+3*s(67)+3*s(68)+1*s(69)+4*s(72)+2*s(73)+1*s(74)+12*s(77)+12*s(78)+0
  Such that:aux(28) =< V_52-V_right_0
aux(29) =< V_52-V_right_0-V_52'+V_right_0'
aux(30) =< V_h_0
aux(31) =< V_h_0-V_h_0'
aux(32) =< V_left_0
aux(33) =< V_left_0-V_left_0'
it(35) =< aux(28)
it(36) =< aux(28)
it(35) =< aux(29)
it(36) =< aux(29)
it(35) =< aux(30)
it(36) =< aux(30)
it(38) =< aux(30)
it(40) =< aux(30)
it(35) =< aux(31)
it(36) =< aux(31)
it(38) =< aux(31)
it(40) =< aux(31)
it(35) =< aux(32)
it(38) =< aux(32)
it(35) =< aux(33)
it(38) =< aux(33)
aux(21) =< aux(32)+1
aux(22) =< aux(28)+1
aux(24) =< aux(32)
aux(19) =< aux(28)
s(65) =< it(35)*aux(32)
s(66) =< it(35)*aux(28)
s(80) =< it(40)*aux(21)
s(81) =< it(40)*aux(22)
s(75) =< it(38)*aux(24)
s(76) =< it(38)*aux(22)
s(74) =< it(38)*aux(22)
s(70) =< it(36)*aux(21)
s(71) =< it(36)*aux(19)
s(69) =< it(36)*aux(19)
s(78) =< s(81)
s(77) =< s(80)
s(73) =< s(76)
s(72) =< s(75)
s(68) =< s(71)
s(67) =< s(70)

#### Cost of phase [37,42,51,54]:eval_bits_bounding_box_bb11_in(V_52,V_h_0,V_right_0,V_left_0,B) -> [eval_bits_bounding_box_bb11_in(V_52',V_h_0',V_right_0',V_left_0',B')] 
6*it(37)+6*it(42)+1*s(97)+6*s(98)+1*s(100)+0
  Such that:aux(49) =< V_52-V_right_0
aux(50) =< V_52-V_right_0-V_52'+V_right_0'
aux(51) =< V_h_0
aux(52) =< V_h_0-V_h_0'
it(37) =< aux(49)
it(37) =< aux(50)
it(37) =< aux(51)
it(42) =< aux(51)
it(37) =< aux(52)
it(42) =< aux(52)
aux(46) =< aux(49)+1
aux(47) =< aux(49)
s(97) =< it(37)*aux(49)
s(99) =< it(42)*aux(46)
s(100) =< it(37)*aux(47)
s(98) =< s(99)

#### Cost of phase [35,36,38,40]:eval_bits_bounding_box_bb11_in(V_52,V_h_0,V_right_0,V_left_0,B) -> [eval_bits_bounding_box_bb11_in(V_52',V_h_0',V_right_0',V_left_0',B')] 
3*it(35)+3*it(36)+3*it(38)+3*it(40)+1*s(65)+1*s(66)+3*s(67)+3*s(68)+1*s(69)+4*s(72)+2*s(73)+1*s(74)+12*s(77)+12*s(78)+0
  Such that:aux(28) =< V_52-V_right_0
aux(29) =< V_52-V_right_0-V_52'+V_right_0'
aux(30) =< V_h_0
aux(31) =< V_h_0-V_h_0'
aux(32) =< V_left_0
aux(33) =< V_left_0-V_left_0'
it(35) =< aux(28)
it(36) =< aux(28)
it(35) =< aux(29)
it(36) =< aux(29)
it(35) =< aux(30)
it(36) =< aux(30)
it(38) =< aux(30)
it(40) =< aux(30)
it(35) =< aux(31)
it(36) =< aux(31)
it(38) =< aux(31)
it(40) =< aux(31)
it(35) =< aux(32)
it(38) =< aux(32)
it(35) =< aux(33)
it(38) =< aux(33)
aux(21) =< aux(32)+1
aux(22) =< aux(28)+1
aux(24) =< aux(32)
aux(19) =< aux(28)
s(65) =< it(35)*aux(32)
s(66) =< it(35)*aux(28)
s(80) =< it(40)*aux(21)
s(81) =< it(40)*aux(22)
s(75) =< it(38)*aux(24)
s(76) =< it(38)*aux(22)
s(74) =< it(38)*aux(22)
s(70) =< it(36)*aux(21)
s(71) =< it(36)*aux(19)
s(69) =< it(36)*aux(19)
s(78) =< s(81)
s(77) =< s(80)
s(73) =< s(76)
s(72) =< s(75)
s(68) =< s(71)
s(67) =< s(70)

#### Cost of phase [37,42,51,54]:eval_bits_bounding_box_bb11_in(V_52,V_h_0,V_right_0,V_left_0,B) -> [eval_bits_bounding_box_bb11_in(V_52',V_h_0',V_right_0',V_left_0',B')] 
6*it(37)+6*it(42)+1*s(97)+6*s(98)+1*s(100)+0
  Such that:aux(49) =< V_52-V_right_0
aux(50) =< V_52-V_right_0-V_52'+V_right_0'
aux(51) =< V_h_0
aux(52) =< V_h_0-V_h_0'
it(37) =< aux(49)
it(37) =< aux(50)
it(37) =< aux(51)
it(42) =< aux(51)
it(37) =< aux(52)
it(42) =< aux(52)
aux(46) =< aux(49)+1
aux(47) =< aux(49)
s(97) =< it(37)*aux(49)
s(99) =< it(42)*aux(46)
s(100) =< it(37)*aux(47)
s(98) =< s(99)

#### Cost of phase [35,36,38,40]:eval_bits_bounding_box_bb11_in(V_52,V_h_0,V_right_0,V_left_0,B) -> [eval_bits_bounding_box_bb11_in(V_52',V_h_0',V_right_0',V_left_0',B')] 
3*it(35)+3*it(36)+3*it(38)+3*it(40)+1*s(65)+1*s(66)+3*s(67)+3*s(68)+1*s(69)+4*s(72)+2*s(73)+1*s(74)+12*s(77)+12*s(78)+0
  Such that:aux(28) =< V_52-V_right_0
aux(29) =< V_52-V_right_0-V_52'+V_right_0'
aux(30) =< V_h_0
aux(31) =< V_h_0-V_h_0'
aux(32) =< V_left_0
aux(33) =< V_left_0-V_left_0'
it(35) =< aux(28)
it(36) =< aux(28)
it(35) =< aux(29)
it(36) =< aux(29)
it(35) =< aux(30)
it(36) =< aux(30)
it(38) =< aux(30)
it(40) =< aux(30)
it(35) =< aux(31)
it(36) =< aux(31)
it(38) =< aux(31)
it(40) =< aux(31)
it(35) =< aux(32)
it(38) =< aux(32)
it(35) =< aux(33)
it(38) =< aux(33)
aux(21) =< aux(32)+1
aux(22) =< aux(28)+1
aux(24) =< aux(32)
aux(19) =< aux(28)
s(65) =< it(35)*aux(32)
s(66) =< it(35)*aux(28)
s(80) =< it(40)*aux(21)
s(81) =< it(40)*aux(22)
s(75) =< it(38)*aux(24)
s(76) =< it(38)*aux(22)
s(74) =< it(38)*aux(22)
s(70) =< it(36)*aux(21)
s(71) =< it(36)*aux(19)
s(69) =< it(36)*aux(19)
s(78) =< s(81)
s(77) =< s(80)
s(73) =< s(76)
s(72) =< s(75)
s(68) =< s(71)
s(67) =< s(70)

#### Cost of phase [37,42,51,54]:eval_bits_bounding_box_bb11_in(V_52,V_h_0,V_right_0,V_left_0,B) -> [eval_bits_bounding_box_bb11_in(V_52',V_h_0',V_right_0',V_left_0',B')] 
6*it(37)+6*it(42)+1*s(97)+6*s(98)+1*s(100)+0
  Such that:aux(49) =< V_52-V_right_0
aux(50) =< V_52-V_right_0-V_52'+V_right_0'
aux(51) =< V_h_0
aux(52) =< V_h_0-V_h_0'
it(37) =< aux(49)
it(37) =< aux(50)
it(37) =< aux(51)
it(42) =< aux(51)
it(37) =< aux(52)
it(42) =< aux(52)
aux(46) =< aux(49)+1
aux(47) =< aux(49)
s(97) =< it(37)*aux(49)
s(99) =< it(42)*aux(46)
s(100) =< it(37)*aux(47)
s(98) =< s(99)

#### Cost of phase [35,36,38,40]:eval_bits_bounding_box_bb11_in(V_52,V_h_0,V_right_0,V_left_0,B) -> [eval_bits_bounding_box_bb11_in(V_52',V_h_0',V_right_0',V_left_0',B')] 
3*it(35)+3*it(36)+3*it(38)+3*it(40)+1*s(65)+1*s(66)+3*s(67)+3*s(68)+1*s(69)+4*s(72)+2*s(73)+1*s(74)+12*s(77)+12*s(78)+0
  Such that:aux(28) =< V_52-V_right_0
aux(29) =< V_52-V_right_0-V_52'+V_right_0'
aux(30) =< V_h_0
aux(31) =< V_h_0-V_h_0'
aux(32) =< V_left_0
aux(33) =< V_left_0-V_left_0'
it(35) =< aux(28)
it(36) =< aux(28)
it(35) =< aux(29)
it(36) =< aux(29)
it(35) =< aux(30)
it(36) =< aux(30)
it(38) =< aux(30)
it(40) =< aux(30)
it(35) =< aux(31)
it(36) =< aux(31)
it(38) =< aux(31)
it(40) =< aux(31)
it(35) =< aux(32)
it(38) =< aux(32)
it(35) =< aux(33)
it(38) =< aux(33)
aux(21) =< aux(32)+1
aux(22) =< aux(28)+1
aux(24) =< aux(32)
aux(19) =< aux(28)
s(65) =< it(35)*aux(32)
s(66) =< it(35)*aux(28)
s(80) =< it(40)*aux(21)
s(81) =< it(40)*aux(22)
s(75) =< it(38)*aux(24)
s(76) =< it(38)*aux(22)
s(74) =< it(38)*aux(22)
s(70) =< it(36)*aux(21)
s(71) =< it(36)*aux(19)
s(69) =< it(36)*aux(19)
s(78) =< s(81)
s(77) =< s(80)
s(73) =< s(76)
s(72) =< s(75)
s(68) =< s(71)
s(67) =< s(70)

#### Cost of phase [37,42,51,54]:eval_bits_bounding_box_bb11_in(V_52,V_h_0,V_right_0,V_left_0,B) -> [eval_bits_bounding_box_bb11_in(V_52',V_h_0',V_right_0',V_left_0',B')] 
6*it(37)+6*it(42)+1*s(97)+6*s(98)+1*s(100)+0
  Such that:aux(49) =< V_52-V_right_0
aux(50) =< V_52-V_right_0-V_52'+V_right_0'
aux(51) =< V_h_0
aux(52) =< V_h_0-V_h_0'
it(37) =< aux(49)
it(37) =< aux(50)
it(37) =< aux(51)
it(42) =< aux(51)
it(37) =< aux(52)
it(42) =< aux(52)
aux(46) =< aux(49)+1
aux(47) =< aux(49)
s(97) =< it(37)*aux(49)
s(99) =< it(42)*aux(46)
s(100) =< it(37)*aux(47)
s(98) =< s(99)

#### Cost of phase [35,36,38,40]:eval_bits_bounding_box_bb11_in(V_52,V_h_0,V_right_0,V_left_0,B) -> [eval_bits_bounding_box_bb11_in(V_52',V_h_0',V_right_0',V_left_0',B')] 
3*it(35)+3*it(36)+3*it(38)+3*it(40)+1*s(65)+1*s(66)+3*s(67)+3*s(68)+1*s(69)+4*s(72)+2*s(73)+1*s(74)+12*s(77)+12*s(78)+0
  Such that:aux(28) =< V_52-V_right_0
aux(29) =< V_52-V_right_0-V_52'+V_right_0'
aux(30) =< V_h_0
aux(31) =< V_h_0-V_h_0'
aux(32) =< V_left_0
aux(33) =< V_left_0-V_left_0'
it(35) =< aux(28)
it(36) =< aux(28)
it(35) =< aux(29)
it(36) =< aux(29)
it(35) =< aux(30)
it(36) =< aux(30)
it(38) =< aux(30)
it(40) =< aux(30)
it(35) =< aux(31)
it(36) =< aux(31)
it(38) =< aux(31)
it(40) =< aux(31)
it(35) =< aux(32)
it(38) =< aux(32)
it(35) =< aux(33)
it(38) =< aux(33)
aux(21) =< aux(32)+1
aux(22) =< aux(28)+1
aux(24) =< aux(32)
aux(19) =< aux(28)
s(65) =< it(35)*aux(32)
s(66) =< it(35)*aux(28)
s(80) =< it(40)*aux(21)
s(81) =< it(40)*aux(22)
s(75) =< it(38)*aux(24)
s(76) =< it(38)*aux(22)
s(74) =< it(38)*aux(22)
s(70) =< it(36)*aux(21)
s(71) =< it(36)*aux(19)
s(69) =< it(36)*aux(19)
s(78) =< s(81)
s(77) =< s(80)
s(73) =< s(76)
s(72) =< s(75)
s(68) =< s(71)
s(67) =< s(70)

#### Cost of phase [35,36,38,40]:eval_bits_bounding_box_bb11_in(V_52,V_h_0,V_right_0,V_left_0,B) -> [eval_bits_bounding_box_bb11_in(V_52',V_h_0',V_right_0',V_left_0',B')] 
3*it(35)+3*it(36)+3*it(38)+3*it(40)+1*s(65)+1*s(66)+3*s(67)+3*s(68)+1*s(69)+4*s(72)+2*s(73)+1*s(74)+12*s(77)+12*s(78)+0
  Such that:aux(28) =< V_52-V_right_0
aux(29) =< V_52-V_right_0-V_52'+V_right_0'
aux(30) =< V_h_0
aux(31) =< V_h_0-V_h_0'
aux(32) =< V_left_0
aux(33) =< V_left_0-V_left_0'
it(35) =< aux(28)
it(36) =< aux(28)
it(35) =< aux(29)
it(36) =< aux(29)
it(35) =< aux(30)
it(36) =< aux(30)
it(38) =< aux(30)
it(40) =< aux(30)
it(35) =< aux(31)
it(36) =< aux(31)
it(38) =< aux(31)
it(40) =< aux(31)
it(35) =< aux(32)
it(38) =< aux(32)
it(35) =< aux(33)
it(38) =< aux(33)
aux(21) =< aux(32)+1
aux(22) =< aux(28)+1
aux(24) =< aux(32)
aux(19) =< aux(28)
s(65) =< it(35)*aux(32)
s(66) =< it(35)*aux(28)
s(80) =< it(40)*aux(21)
s(81) =< it(40)*aux(22)
s(75) =< it(38)*aux(24)
s(76) =< it(38)*aux(22)
s(74) =< it(38)*aux(22)
s(70) =< it(36)*aux(21)
s(71) =< it(36)*aux(19)
s(69) =< it(36)*aux(19)
s(78) =< s(81)
s(77) =< s(80)
s(73) =< s(76)
s(72) =< s(75)
s(68) =< s(71)
s(67) =< s(70)

#### Cost of phase [35,36,38,40]:eval_bits_bounding_box_bb11_in(V_52,V_h_0,V_right_0,V_left_0,B) -> [eval_bits_bounding_box_bb11_in(V_52',V_h_0',V_right_0',V_left_0',B')] 
3*it(35)+3*it(36)+3*it(38)+3*it(40)+1*s(65)+1*s(66)+3*s(67)+3*s(68)+1*s(69)+4*s(72)+2*s(73)+1*s(74)+12*s(77)+12*s(78)+0
  Such that:aux(28) =< V_52-V_right_0
aux(29) =< V_52-V_right_0-V_52'+V_right_0'
aux(30) =< V_h_0
aux(31) =< V_h_0-V_h_0'
aux(32) =< V_left_0
aux(33) =< V_left_0-V_left_0'
it(35) =< aux(28)
it(36) =< aux(28)
it(35) =< aux(29)
it(36) =< aux(29)
it(35) =< aux(30)
it(36) =< aux(30)
it(38) =< aux(30)
it(40) =< aux(30)
it(35) =< aux(31)
it(36) =< aux(31)
it(38) =< aux(31)
it(40) =< aux(31)
it(35) =< aux(32)
it(38) =< aux(32)
it(35) =< aux(33)
it(38) =< aux(33)
aux(21) =< aux(32)+1
aux(22) =< aux(28)+1
aux(24) =< aux(32)
aux(19) =< aux(28)
s(65) =< it(35)*aux(32)
s(66) =< it(35)*aux(28)
s(80) =< it(40)*aux(21)
s(81) =< it(40)*aux(22)
s(75) =< it(38)*aux(24)
s(76) =< it(38)*aux(22)
s(74) =< it(38)*aux(22)
s(70) =< it(36)*aux(21)
s(71) =< it(36)*aux(19)
s(69) =< it(36)*aux(19)
s(78) =< s(81)
s(77) =< s(80)
s(73) =< s(76)
s(72) =< s(75)
s(68) =< s(71)
s(67) =< s(70)

#### Cost of phase [35,36,38,40]:eval_bits_bounding_box_bb11_in(V_52,V_h_0,V_right_0,V_left_0,B) -> [eval_bits_bounding_box_bb11_in(V_52',V_h_0',V_right_0',V_left_0',B')] 
3*it(35)+3*it(36)+3*it(38)+3*it(40)+1*s(65)+1*s(66)+3*s(67)+3*s(68)+1*s(69)+4*s(72)+2*s(73)+1*s(74)+12*s(77)+12*s(78)+0
  Such that:aux(28) =< V_52-V_right_0
aux(29) =< V_52-V_right_0-V_52'+V_right_0'
aux(30) =< V_h_0
aux(31) =< V_h_0-V_h_0'
aux(32) =< V_left_0
aux(33) =< V_left_0-V_left_0'
it(35) =< aux(28)
it(36) =< aux(28)
it(35) =< aux(29)
it(36) =< aux(29)
it(35) =< aux(30)
it(36) =< aux(30)
it(38) =< aux(30)
it(40) =< aux(30)
it(35) =< aux(31)
it(36) =< aux(31)
it(38) =< aux(31)
it(40) =< aux(31)
it(35) =< aux(32)
it(38) =< aux(32)
it(35) =< aux(33)
it(38) =< aux(33)
aux(21) =< aux(32)+1
aux(22) =< aux(28)+1
aux(24) =< aux(32)
aux(19) =< aux(28)
s(65) =< it(35)*aux(32)
s(66) =< it(35)*aux(28)
s(80) =< it(40)*aux(21)
s(81) =< it(40)*aux(22)
s(75) =< it(38)*aux(24)
s(76) =< it(38)*aux(22)
s(74) =< it(38)*aux(22)
s(70) =< it(36)*aux(21)
s(71) =< it(36)*aux(19)
s(69) =< it(36)*aux(19)
s(78) =< s(81)
s(77) =< s(80)
s(73) =< s(76)
s(72) =< s(75)
s(68) =< s(71)
s(67) =< s(70)

#### Cost of phase [35,36,38,40]:eval_bits_bounding_box_bb11_in(V_52,V_h_0,V_right_0,V_left_0,B) -> [eval_bits_bounding_box_bb11_in(V_52',V_h_0',V_right_0',V_left_0',B')] 
3*it(35)+3*it(36)+3*it(38)+3*it(40)+1*s(65)+1*s(66)+3*s(67)+3*s(68)+1*s(69)+4*s(72)+2*s(73)+1*s(74)+12*s(77)+12*s(78)+0
  Such that:aux(28) =< V_52-V_right_0
aux(29) =< V_52-V_right_0-V_52'+V_right_0'
aux(30) =< V_h_0
aux(31) =< V_h_0-V_h_0'
aux(32) =< V_left_0
aux(33) =< V_left_0-V_left_0'
it(35) =< aux(28)
it(36) =< aux(28)
it(35) =< aux(29)
it(36) =< aux(29)
it(35) =< aux(30)
it(36) =< aux(30)
it(38) =< aux(30)
it(40) =< aux(30)
it(35) =< aux(31)
it(36) =< aux(31)
it(38) =< aux(31)
it(40) =< aux(31)
it(35) =< aux(32)
it(38) =< aux(32)
it(35) =< aux(33)
it(38) =< aux(33)
aux(21) =< aux(32)+1
aux(22) =< aux(28)+1
aux(24) =< aux(32)
aux(19) =< aux(28)
s(65) =< it(35)*aux(32)
s(66) =< it(35)*aux(28)
s(80) =< it(40)*aux(21)
s(81) =< it(40)*aux(22)
s(75) =< it(38)*aux(24)
s(76) =< it(38)*aux(22)
s(74) =< it(38)*aux(22)
s(70) =< it(36)*aux(21)
s(71) =< it(36)*aux(19)
s(69) =< it(36)*aux(19)
s(78) =< s(81)
s(77) =< s(80)
s(73) =< s(76)
s(72) =< s(75)
s(68) =< s(71)
s(67) =< s(70)

#### Cost of phase [35,36,38,40]:eval_bits_bounding_box_bb11_in(V_52,V_h_0,V_right_0,V_left_0,B) -> [eval_bits_bounding_box_bb11_in(V_52',V_h_0',V_right_0',V_left_0',B')] 
3*it(35)+3*it(36)+3*it(38)+3*it(40)+1*s(65)+1*s(66)+3*s(67)+3*s(68)+1*s(69)+4*s(72)+2*s(73)+1*s(74)+12*s(77)+12*s(78)+0
  Such that:aux(28) =< V_52-V_right_0
aux(29) =< V_52-V_right_0-V_52'+V_right_0'
aux(30) =< V_h_0
aux(31) =< V_h_0-V_h_0'
aux(32) =< V_left_0
aux(33) =< V_left_0-V_left_0'
it(35) =< aux(28)
it(36) =< aux(28)
it(35) =< aux(29)
it(36) =< aux(29)
it(35) =< aux(30)
it(36) =< aux(30)
it(38) =< aux(30)
it(40) =< aux(30)
it(35) =< aux(31)
it(36) =< aux(31)
it(38) =< aux(31)
it(40) =< aux(31)
it(35) =< aux(32)
it(38) =< aux(32)
it(35) =< aux(33)
it(38) =< aux(33)
aux(21) =< aux(32)+1
aux(22) =< aux(28)+1
aux(24) =< aux(32)
aux(19) =< aux(28)
s(65) =< it(35)*aux(32)
s(66) =< it(35)*aux(28)
s(80) =< it(40)*aux(21)
s(81) =< it(40)*aux(22)
s(75) =< it(38)*aux(24)
s(76) =< it(38)*aux(22)
s(74) =< it(38)*aux(22)
s(70) =< it(36)*aux(21)
s(71) =< it(36)*aux(19)
s(69) =< it(36)*aux(19)
s(78) =< s(81)
s(77) =< s(80)
s(73) =< s(76)
s(72) =< s(75)
s(68) =< s(71)
s(67) =< s(70)

#### Cost of phase [35,36,38,40]:eval_bits_bounding_box_bb11_in(V_52,V_h_0,V_right_0,V_left_0,B) -> [eval_bits_bounding_box_bb11_in(V_52',V_h_0',V_right_0',V_left_0',B')] 
3*it(35)+3*it(36)+3*it(38)+3*it(40)+1*s(65)+1*s(66)+3*s(67)+3*s(68)+1*s(69)+4*s(72)+2*s(73)+1*s(74)+12*s(77)+12*s(78)+0
  Such that:aux(28) =< V_52-V_right_0
aux(29) =< V_52-V_right_0-V_52'+V_right_0'
aux(30) =< V_h_0
aux(31) =< V_h_0-V_h_0'
aux(32) =< V_left_0
aux(33) =< V_left_0-V_left_0'
it(35) =< aux(28)
it(36) =< aux(28)
it(35) =< aux(29)
it(36) =< aux(29)
it(35) =< aux(30)
it(36) =< aux(30)
it(38) =< aux(30)
it(40) =< aux(30)
it(35) =< aux(31)
it(36) =< aux(31)
it(38) =< aux(31)
it(40) =< aux(31)
it(35) =< aux(32)
it(38) =< aux(32)
it(35) =< aux(33)
it(38) =< aux(33)
aux(21) =< aux(32)+1
aux(22) =< aux(28)+1
aux(24) =< aux(32)
aux(19) =< aux(28)
s(65) =< it(35)*aux(32)
s(66) =< it(35)*aux(28)
s(80) =< it(40)*aux(21)
s(81) =< it(40)*aux(22)
s(75) =< it(38)*aux(24)
s(76) =< it(38)*aux(22)
s(74) =< it(38)*aux(22)
s(70) =< it(36)*aux(21)
s(71) =< it(36)*aux(19)
s(69) =< it(36)*aux(19)
s(78) =< s(81)
s(77) =< s(80)
s(73) =< s(76)
s(72) =< s(75)
s(68) =< s(71)
s(67) =< s(70)

#### Cost of phase [35,36,38,40]:eval_bits_bounding_box_bb11_in(V_52,V_h_0,V_right_0,V_left_0,B) -> [eval_bits_bounding_box_bb11_in(V_52',V_h_0',V_right_0',V_left_0',B')] 
3*it(35)+3*it(36)+3*it(38)+3*it(40)+1*s(65)+1*s(66)+3*s(67)+3*s(68)+1*s(69)+4*s(72)+2*s(73)+1*s(74)+12*s(77)+12*s(78)+0
  Such that:aux(28) =< V_52-V_right_0
aux(29) =< V_52-V_right_0-V_52'+V_right_0'
aux(30) =< V_h_0
aux(31) =< V_h_0-V_h_0'
aux(32) =< V_left_0
aux(33) =< V_left_0-V_left_0'
it(35) =< aux(28)
it(36) =< aux(28)
it(35) =< aux(29)
it(36) =< aux(29)
it(35) =< aux(30)
it(36) =< aux(30)
it(38) =< aux(30)
it(40) =< aux(30)
it(35) =< aux(31)
it(36) =< aux(31)
it(38) =< aux(31)
it(40) =< aux(31)
it(35) =< aux(32)
it(38) =< aux(32)
it(35) =< aux(33)
it(38) =< aux(33)
aux(21) =< aux(32)+1
aux(22) =< aux(28)+1
aux(24) =< aux(32)
aux(19) =< aux(28)
s(65) =< it(35)*aux(32)
s(66) =< it(35)*aux(28)
s(80) =< it(40)*aux(21)
s(81) =< it(40)*aux(22)
s(75) =< it(38)*aux(24)
s(76) =< it(38)*aux(22)
s(74) =< it(38)*aux(22)
s(70) =< it(36)*aux(21)
s(71) =< it(36)*aux(19)
s(69) =< it(36)*aux(19)
s(78) =< s(81)
s(77) =< s(80)
s(73) =< s(76)
s(72) =< s(75)
s(68) =< s(71)
s(67) =< s(70)

#### Cost of phase [35,36,38,40]:eval_bits_bounding_box_bb11_in(V_52,V_h_0,V_right_0,V_left_0,B) -> [eval_bits_bounding_box_bb11_in(V_52',V_h_0',V_right_0',V_left_0',B')] 
3*it(35)+3*it(36)+3*it(38)+3*it(40)+1*s(65)+1*s(66)+3*s(67)+3*s(68)+1*s(69)+4*s(72)+2*s(73)+1*s(74)+12*s(77)+12*s(78)+0
  Such that:aux(28) =< V_52-V_right_0
aux(29) =< V_52-V_right_0-V_52'+V_right_0'
aux(30) =< V_h_0
aux(31) =< V_h_0-V_h_0'
aux(32) =< V_left_0
aux(33) =< V_left_0-V_left_0'
it(35) =< aux(28)
it(36) =< aux(28)
it(35) =< aux(29)
it(36) =< aux(29)
it(35) =< aux(30)
it(36) =< aux(30)
it(38) =< aux(30)
it(40) =< aux(30)
it(35) =< aux(31)
it(36) =< aux(31)
it(38) =< aux(31)
it(40) =< aux(31)
it(35) =< aux(32)
it(38) =< aux(32)
it(35) =< aux(33)
it(38) =< aux(33)
aux(21) =< aux(32)+1
aux(22) =< aux(28)+1
aux(24) =< aux(32)
aux(19) =< aux(28)
s(65) =< it(35)*aux(32)
s(66) =< it(35)*aux(28)
s(80) =< it(40)*aux(21)
s(81) =< it(40)*aux(22)
s(75) =< it(38)*aux(24)
s(76) =< it(38)*aux(22)
s(74) =< it(38)*aux(22)
s(70) =< it(36)*aux(21)
s(71) =< it(36)*aux(19)
s(69) =< it(36)*aux(19)
s(78) =< s(81)
s(77) =< s(80)
s(73) =< s(76)
s(72) =< s(75)
s(68) =< s(71)
s(67) =< s(70)

#### Cost of phase [35,36,38,40]:eval_bits_bounding_box_bb11_in(V_52,V_h_0,V_right_0,V_left_0,B) -> [eval_bits_bounding_box_bb11_in(V_52',V_h_0',V_right_0',V_left_0',B')] 
3*it(35)+3*it(36)+3*it(38)+3*it(40)+1*s(65)+1*s(66)+3*s(67)+3*s(68)+1*s(69)+4*s(72)+2*s(73)+1*s(74)+12*s(77)+12*s(78)+0
  Such that:aux(28) =< V_52-V_right_0
aux(29) =< V_52-V_right_0-V_52'+V_right_0'
aux(30) =< V_h_0
aux(31) =< V_h_0-V_h_0'
aux(32) =< V_left_0
aux(33) =< V_left_0-V_left_0'
it(35) =< aux(28)
it(36) =< aux(28)
it(35) =< aux(29)
it(36) =< aux(29)
it(35) =< aux(30)
it(36) =< aux(30)
it(38) =< aux(30)
it(40) =< aux(30)
it(35) =< aux(31)
it(36) =< aux(31)
it(38) =< aux(31)
it(40) =< aux(31)
it(35) =< aux(32)
it(38) =< aux(32)
it(35) =< aux(33)
it(38) =< aux(33)
aux(21) =< aux(32)+1
aux(22) =< aux(28)+1
aux(24) =< aux(32)
aux(19) =< aux(28)
s(65) =< it(35)*aux(32)
s(66) =< it(35)*aux(28)
s(80) =< it(40)*aux(21)
s(81) =< it(40)*aux(22)
s(75) =< it(38)*aux(24)
s(76) =< it(38)*aux(22)
s(74) =< it(38)*aux(22)
s(70) =< it(36)*aux(21)
s(71) =< it(36)*aux(19)
s(69) =< it(36)*aux(19)
s(78) =< s(81)
s(77) =< s(80)
s(73) =< s(76)
s(72) =< s(75)
s(68) =< s(71)
s(67) =< s(70)

#### Cost of phase [35,36,38,40]:eval_bits_bounding_box_bb11_in(V_52,V_h_0,V_right_0,V_left_0,B) -> [eval_bits_bounding_box_bb11_in(V_52',V_h_0',V_right_0',V_left_0',B')] 
3*it(35)+3*it(36)+3*it(38)+3*it(40)+1*s(65)+1*s(66)+3*s(67)+3*s(68)+1*s(69)+4*s(72)+2*s(73)+1*s(74)+12*s(77)+12*s(78)+0
  Such that:aux(28) =< V_52-V_right_0
aux(29) =< V_52-V_right_0-V_52'+V_right_0'
aux(30) =< V_h_0
aux(31) =< V_h_0-V_h_0'
aux(32) =< V_left_0
aux(33) =< V_left_0-V_left_0'
it(35) =< aux(28)
it(36) =< aux(28)
it(35) =< aux(29)
it(36) =< aux(29)
it(35) =< aux(30)
it(36) =< aux(30)
it(38) =< aux(30)
it(40) =< aux(30)
it(35) =< aux(31)
it(36) =< aux(31)
it(38) =< aux(31)
it(40) =< aux(31)
it(35) =< aux(32)
it(38) =< aux(32)
it(35) =< aux(33)
it(38) =< aux(33)
aux(21) =< aux(32)+1
aux(22) =< aux(28)+1
aux(24) =< aux(32)
aux(19) =< aux(28)
s(65) =< it(35)*aux(32)
s(66) =< it(35)*aux(28)
s(80) =< it(40)*aux(21)
s(81) =< it(40)*aux(22)
s(75) =< it(38)*aux(24)
s(76) =< it(38)*aux(22)
s(74) =< it(38)*aux(22)
s(70) =< it(36)*aux(21)
s(71) =< it(36)*aux(19)
s(69) =< it(36)*aux(19)
s(78) =< s(81)
s(77) =< s(80)
s(73) =< s(76)
s(72) =< s(75)
s(68) =< s(71)
s(67) =< s(70)

#### Cost of phase [35,36,38,40]:eval_bits_bounding_box_bb11_in(V_52,V_h_0,V_right_0,V_left_0,B) -> [eval_bits_bounding_box_bb11_in(V_52',V_h_0',V_right_0',V_left_0',B')] 
3*it(35)+3*it(36)+3*it(38)+3*it(40)+1*s(65)+1*s(66)+3*s(67)+3*s(68)+1*s(69)+4*s(72)+2*s(73)+1*s(74)+12*s(77)+12*s(78)+0
  Such that:aux(28) =< V_52-V_right_0
aux(29) =< V_52-V_right_0-V_52'+V_right_0'
aux(30) =< V_h_0
aux(31) =< V_h_0-V_h_0'
aux(32) =< V_left_0
aux(33) =< V_left_0-V_left_0'
it(35) =< aux(28)
it(36) =< aux(28)
it(35) =< aux(29)
it(36) =< aux(29)
it(35) =< aux(30)
it(36) =< aux(30)
it(38) =< aux(30)
it(40) =< aux(30)
it(35) =< aux(31)
it(36) =< aux(31)
it(38) =< aux(31)
it(40) =< aux(31)
it(35) =< aux(32)
it(38) =< aux(32)
it(35) =< aux(33)
it(38) =< aux(33)
aux(21) =< aux(32)+1
aux(22) =< aux(28)+1
aux(24) =< aux(32)
aux(19) =< aux(28)
s(65) =< it(35)*aux(32)
s(66) =< it(35)*aux(28)
s(80) =< it(40)*aux(21)
s(81) =< it(40)*aux(22)
s(75) =< it(38)*aux(24)
s(76) =< it(38)*aux(22)
s(74) =< it(38)*aux(22)
s(70) =< it(36)*aux(21)
s(71) =< it(36)*aux(19)
s(69) =< it(36)*aux(19)
s(78) =< s(81)
s(77) =< s(80)
s(73) =< s(76)
s(72) =< s(75)
s(68) =< s(71)
s(67) =< s(70)

#### Cost of phase [35,36,38,40]:eval_bits_bounding_box_bb11_in(V_52,V_h_0,V_right_0,V_left_0,B) -> [eval_bits_bounding_box_bb11_in(V_52',V_h_0',V_right_0',V_left_0',B')] 
3*it(35)+3*it(36)+3*it(38)+3*it(40)+1*s(65)+1*s(66)+3*s(67)+3*s(68)+1*s(69)+4*s(72)+2*s(73)+1*s(74)+12*s(77)+12*s(78)+0
  Such that:aux(28) =< V_52-V_right_0
aux(29) =< V_52-V_right_0-V_52'+V_right_0'
aux(30) =< V_h_0
aux(31) =< V_h_0-V_h_0'
aux(32) =< V_left_0
aux(33) =< V_left_0-V_left_0'
it(35) =< aux(28)
it(36) =< aux(28)
it(35) =< aux(29)
it(36) =< aux(29)
it(35) =< aux(30)
it(36) =< aux(30)
it(38) =< aux(30)
it(40) =< aux(30)
it(35) =< aux(31)
it(36) =< aux(31)
it(38) =< aux(31)
it(40) =< aux(31)
it(35) =< aux(32)
it(38) =< aux(32)
it(35) =< aux(33)
it(38) =< aux(33)
aux(21) =< aux(32)+1
aux(22) =< aux(28)+1
aux(24) =< aux(32)
aux(19) =< aux(28)
s(65) =< it(35)*aux(32)
s(66) =< it(35)*aux(28)
s(80) =< it(40)*aux(21)
s(81) =< it(40)*aux(22)
s(75) =< it(38)*aux(24)
s(76) =< it(38)*aux(22)
s(74) =< it(38)*aux(22)
s(70) =< it(36)*aux(21)
s(71) =< it(36)*aux(19)
s(69) =< it(36)*aux(19)
s(78) =< s(81)
s(77) =< s(80)
s(73) =< s(76)
s(72) =< s(75)
s(68) =< s(71)
s(67) =< s(70)

#### Cost of phase [35,36,38,40]:eval_bits_bounding_box_bb11_in(V_52,V_h_0,V_right_0,V_left_0,B) -> [eval_bits_bounding_box_bb11_in(V_52',V_h_0',V_right_0',V_left_0',B')] 
3*it(35)+3*it(36)+3*it(38)+3*it(40)+1*s(65)+1*s(66)+3*s(67)+3*s(68)+1*s(69)+4*s(72)+2*s(73)+1*s(74)+12*s(77)+12*s(78)+0
  Such that:aux(28) =< V_52-V_right_0
aux(29) =< V_52-V_right_0-V_52'+V_right_0'
aux(30) =< V_h_0
aux(31) =< V_h_0-V_h_0'
aux(32) =< V_left_0
aux(33) =< V_left_0-V_left_0'
it(35) =< aux(28)
it(36) =< aux(28)
it(35) =< aux(29)
it(36) =< aux(29)
it(35) =< aux(30)
it(36) =< aux(30)
it(38) =< aux(30)
it(40) =< aux(30)
it(35) =< aux(31)
it(36) =< aux(31)
it(38) =< aux(31)
it(40) =< aux(31)
it(35) =< aux(32)
it(38) =< aux(32)
it(35) =< aux(33)
it(38) =< aux(33)
aux(21) =< aux(32)+1
aux(22) =< aux(28)+1
aux(24) =< aux(32)
aux(19) =< aux(28)
s(65) =< it(35)*aux(32)
s(66) =< it(35)*aux(28)
s(80) =< it(40)*aux(21)
s(81) =< it(40)*aux(22)
s(75) =< it(38)*aux(24)
s(76) =< it(38)*aux(22)
s(74) =< it(38)*aux(22)
s(70) =< it(36)*aux(21)
s(71) =< it(36)*aux(19)
s(69) =< it(36)*aux(19)
s(78) =< s(81)
s(77) =< s(80)
s(73) =< s(76)
s(72) =< s(75)
s(68) =< s(71)
s(67) =< s(70)

#### Cost of phase [35,36,38,40]:eval_bits_bounding_box_bb11_in(V_52,V_h_0,V_right_0,V_left_0,B) -> [eval_bits_bounding_box_bb11_in(V_52',V_h_0',V_right_0',V_left_0',B')] 
3*it(35)+3*it(36)+3*it(38)+3*it(40)+1*s(65)+1*s(66)+3*s(67)+3*s(68)+1*s(69)+4*s(72)+2*s(73)+1*s(74)+12*s(77)+12*s(78)+0
  Such that:aux(28) =< V_52-V_right_0
aux(29) =< V_52-V_right_0-V_52'+V_right_0'
aux(30) =< V_h_0
aux(31) =< V_h_0-V_h_0'
aux(32) =< V_left_0
aux(33) =< V_left_0-V_left_0'
it(35) =< aux(28)
it(36) =< aux(28)
it(35) =< aux(29)
it(36) =< aux(29)
it(35) =< aux(30)
it(36) =< aux(30)
it(38) =< aux(30)
it(40) =< aux(30)
it(35) =< aux(31)
it(36) =< aux(31)
it(38) =< aux(31)
it(40) =< aux(31)
it(35) =< aux(32)
it(38) =< aux(32)
it(35) =< aux(33)
it(38) =< aux(33)
aux(21) =< aux(32)+1
aux(22) =< aux(28)+1
aux(24) =< aux(32)
aux(19) =< aux(28)
s(65) =< it(35)*aux(32)
s(66) =< it(35)*aux(28)
s(80) =< it(40)*aux(21)
s(81) =< it(40)*aux(22)
s(75) =< it(38)*aux(24)
s(76) =< it(38)*aux(22)
s(74) =< it(38)*aux(22)
s(70) =< it(36)*aux(21)
s(71) =< it(36)*aux(19)
s(69) =< it(36)*aux(19)
s(78) =< s(81)
s(77) =< s(80)
s(73) =< s(76)
s(72) =< s(75)
s(68) =< s(71)
s(67) =< s(70)

#### Cost of phase [35,36,38,40]:eval_bits_bounding_box_bb11_in(V_52,V_h_0,V_right_0,V_left_0,B) -> [eval_bits_bounding_box_bb11_in(V_52',V_h_0',V_right_0',V_left_0',B')] 
3*it(35)+3*it(36)+3*it(38)+3*it(40)+1*s(65)+1*s(66)+3*s(67)+3*s(68)+1*s(69)+4*s(72)+2*s(73)+1*s(74)+12*s(77)+12*s(78)+0
  Such that:aux(28) =< V_52-V_right_0
aux(29) =< V_52-V_right_0-V_52'+V_right_0'
aux(30) =< V_h_0
aux(31) =< V_h_0-V_h_0'
aux(32) =< V_left_0
aux(33) =< V_left_0-V_left_0'
it(35) =< aux(28)
it(36) =< aux(28)
it(35) =< aux(29)
it(36) =< aux(29)
it(35) =< aux(30)
it(36) =< aux(30)
it(38) =< aux(30)
it(40) =< aux(30)
it(35) =< aux(31)
it(36) =< aux(31)
it(38) =< aux(31)
it(40) =< aux(31)
it(35) =< aux(32)
it(38) =< aux(32)
it(35) =< aux(33)
it(38) =< aux(33)
aux(21) =< aux(32)+1
aux(22) =< aux(28)+1
aux(24) =< aux(32)
aux(19) =< aux(28)
s(65) =< it(35)*aux(32)
s(66) =< it(35)*aux(28)
s(80) =< it(40)*aux(21)
s(81) =< it(40)*aux(22)
s(75) =< it(38)*aux(24)
s(76) =< it(38)*aux(22)
s(74) =< it(38)*aux(22)
s(70) =< it(36)*aux(21)
s(71) =< it(36)*aux(19)
s(69) =< it(36)*aux(19)
s(78) =< s(81)
s(77) =< s(80)
s(73) =< s(76)
s(72) =< s(75)
s(68) =< s(71)
s(67) =< s(70)

#### Cost of loops [39,41,45,47] 

 * loop 39:eval_bits_bounding_box_bb11_in(V_52,V_h_0,V_right_0,V_left_0,B) -> [eval_bits_bounding_box_bb11_in(V_52',V_h_0',V_right_0',V_left_0',B')] 
1*s(108)+3
  Such that:s(108) =< V_left_0'

 * loop 41:eval_bits_bounding_box_bb11_in(V_52,V_h_0,V_right_0,V_left_0,B) -> [eval_bits_bounding_box_bb11_in(V_52',V_h_0',V_right_0',V_left_0',B')] 
3*s(113)+3
  Such that:s(112) =< V_left_0'
s(113) =< s(112)

 * loop 45:eval_bits_bounding_box_bb11_in(V_52,V_h_0,V_right_0,V_left_0,B) -> [eval_bits_bounding_box_bb11_in(V_52',V_h_0',V_right_0',V_left_0',B')] 
1*s(115)+3
  Such that:s(115) =< V_left_0'

 * loop 47:eval_bits_bounding_box_bb11_in(V_52,V_h_0,V_right_0,V_left_0,B) -> [eval_bits_bounding_box_bb11_in(V_52',V_h_0',V_right_0',V_left_0',B')] 
3*s(120)+3
  Such that:s(119) =< V_left_0'
s(120) =< s(119)

#### Cost of phase [39,41,45,47]:eval_bits_bounding_box_bb11_in(V_52,V_h_0,V_right_0,V_left_0,B) -> [eval_bits_bounding_box_bb11_in(V_52',V_h_0',V_right_0',V_left_0',B')] 
6*it(39)+6*it(41)+1*s(121)+6*s(122)+1*s(124)+0
  Such that:aux(140) =< V_h_0
aux(141) =< V_h_0-V_h_0'
aux(142) =< V_left_0
aux(143) =< V_left_0-V_left_0'
it(39) =< aux(140)
it(41) =< aux(140)
it(39) =< aux(141)
it(41) =< aux(141)
it(39) =< aux(142)
it(39) =< aux(143)
aux(137) =< aux(142)+1
aux(138) =< aux(142)
s(121) =< it(39)*aux(142)
s(123) =< it(41)*aux(137)
s(124) =< it(39)*aux(138)
s(122) =< s(123)

#### Cost of phase [35,36,38,40]:eval_bits_bounding_box_bb11_in(V_52,V_h_0,V_right_0,V_left_0,B) -> [eval_bits_bounding_box_bb11_in(V_52',V_h_0',V_right_0',V_left_0',B')] 
3*it(35)+3*it(36)+3*it(38)+3*it(40)+1*s(65)+1*s(66)+3*s(67)+3*s(68)+1*s(69)+4*s(72)+2*s(73)+1*s(74)+12*s(77)+12*s(78)+0
  Such that:aux(28) =< V_52-V_right_0
aux(29) =< V_52-V_right_0-V_52'+V_right_0'
aux(30) =< V_h_0
aux(31) =< V_h_0-V_h_0'
aux(32) =< V_left_0
aux(33) =< V_left_0-V_left_0'
it(35) =< aux(28)
it(36) =< aux(28)
it(35) =< aux(29)
it(36) =< aux(29)
it(35) =< aux(30)
it(36) =< aux(30)
it(38) =< aux(30)
it(40) =< aux(30)
it(35) =< aux(31)
it(36) =< aux(31)
it(38) =< aux(31)
it(40) =< aux(31)
it(35) =< aux(32)
it(38) =< aux(32)
it(35) =< aux(33)
it(38) =< aux(33)
aux(21) =< aux(32)+1
aux(22) =< aux(28)+1
aux(24) =< aux(32)
aux(19) =< aux(28)
s(65) =< it(35)*aux(32)
s(66) =< it(35)*aux(28)
s(80) =< it(40)*aux(21)
s(81) =< it(40)*aux(22)
s(75) =< it(38)*aux(24)
s(76) =< it(38)*aux(22)
s(74) =< it(38)*aux(22)
s(70) =< it(36)*aux(21)
s(71) =< it(36)*aux(19)
s(69) =< it(36)*aux(19)
s(78) =< s(81)
s(77) =< s(80)
s(73) =< s(76)
s(72) =< s(75)
s(68) =< s(71)
s(67) =< s(70)

#### Cost of phase [39,41,45,47]:eval_bits_bounding_box_bb11_in(V_52,V_h_0,V_right_0,V_left_0,B) -> [eval_bits_bounding_box_bb11_in(V_52',V_h_0',V_right_0',V_left_0',B')] 
6*it(39)+6*it(41)+1*s(121)+6*s(122)+1*s(124)+0
  Such that:aux(140) =< V_h_0
aux(141) =< V_h_0-V_h_0'
aux(142) =< V_left_0
aux(143) =< V_left_0-V_left_0'
it(39) =< aux(140)
it(41) =< aux(140)
it(39) =< aux(141)
it(41) =< aux(141)
it(39) =< aux(142)
it(39) =< aux(143)
aux(137) =< aux(142)+1
aux(138) =< aux(142)
s(121) =< it(39)*aux(142)
s(123) =< it(41)*aux(137)
s(124) =< it(39)*aux(138)
s(122) =< s(123)

#### Cost of phase [35,36,38,40]:eval_bits_bounding_box_bb11_in(V_52,V_h_0,V_right_0,V_left_0,B) -> [eval_bits_bounding_box_bb11_in(V_52',V_h_0',V_right_0',V_left_0',B')] 
3*it(35)+3*it(36)+3*it(38)+3*it(40)+1*s(65)+1*s(66)+3*s(67)+3*s(68)+1*s(69)+4*s(72)+2*s(73)+1*s(74)+12*s(77)+12*s(78)+0
  Such that:aux(28) =< V_52-V_right_0
aux(29) =< V_52-V_right_0-V_52'+V_right_0'
aux(30) =< V_h_0
aux(31) =< V_h_0-V_h_0'
aux(32) =< V_left_0
aux(33) =< V_left_0-V_left_0'
it(35) =< aux(28)
it(36) =< aux(28)
it(35) =< aux(29)
it(36) =< aux(29)
it(35) =< aux(30)
it(36) =< aux(30)
it(38) =< aux(30)
it(40) =< aux(30)
it(35) =< aux(31)
it(36) =< aux(31)
it(38) =< aux(31)
it(40) =< aux(31)
it(35) =< aux(32)
it(38) =< aux(32)
it(35) =< aux(33)
it(38) =< aux(33)
aux(21) =< aux(32)+1
aux(22) =< aux(28)+1
aux(24) =< aux(32)
aux(19) =< aux(28)
s(65) =< it(35)*aux(32)
s(66) =< it(35)*aux(28)
s(80) =< it(40)*aux(21)
s(81) =< it(40)*aux(22)
s(75) =< it(38)*aux(24)
s(76) =< it(38)*aux(22)
s(74) =< it(38)*aux(22)
s(70) =< it(36)*aux(21)
s(71) =< it(36)*aux(19)
s(69) =< it(36)*aux(19)
s(78) =< s(81)
s(77) =< s(80)
s(73) =< s(76)
s(72) =< s(75)
s(68) =< s(71)
s(67) =< s(70)

#### Cost of phase [39,41,45,47]:eval_bits_bounding_box_bb11_in(V_52,V_h_0,V_right_0,V_left_0,B) -> [eval_bits_bounding_box_bb11_in(V_52',V_h_0',V_right_0',V_left_0',B')] 
6*it(39)+6*it(41)+1*s(121)+6*s(122)+1*s(124)+0
  Such that:aux(140) =< V_h_0
aux(141) =< V_h_0-V_h_0'
aux(142) =< V_left_0
aux(143) =< V_left_0-V_left_0'
it(39) =< aux(140)
it(41) =< aux(140)
it(39) =< aux(141)
it(41) =< aux(141)
it(39) =< aux(142)
it(39) =< aux(143)
aux(137) =< aux(142)+1
aux(138) =< aux(142)
s(121) =< it(39)*aux(142)
s(123) =< it(41)*aux(137)
s(124) =< it(39)*aux(138)
s(122) =< s(123)

#### Cost of phase [35,36,38,40]:eval_bits_bounding_box_bb11_in(V_52,V_h_0,V_right_0,V_left_0,B) -> [eval_bits_bounding_box_bb11_in(V_52',V_h_0',V_right_0',V_left_0',B')] 
3*it(35)+3*it(36)+3*it(38)+3*it(40)+1*s(65)+1*s(66)+3*s(67)+3*s(68)+1*s(69)+4*s(72)+2*s(73)+1*s(74)+12*s(77)+12*s(78)+0
  Such that:aux(28) =< V_52-V_right_0
aux(29) =< V_52-V_right_0-V_52'+V_right_0'
aux(30) =< V_h_0
aux(31) =< V_h_0-V_h_0'
aux(32) =< V_left_0
aux(33) =< V_left_0-V_left_0'
it(35) =< aux(28)
it(36) =< aux(28)
it(35) =< aux(29)
it(36) =< aux(29)
it(35) =< aux(30)
it(36) =< aux(30)
it(38) =< aux(30)
it(40) =< aux(30)
it(35) =< aux(31)
it(36) =< aux(31)
it(38) =< aux(31)
it(40) =< aux(31)
it(35) =< aux(32)
it(38) =< aux(32)
it(35) =< aux(33)
it(38) =< aux(33)
aux(21) =< aux(32)+1
aux(22) =< aux(28)+1
aux(24) =< aux(32)
aux(19) =< aux(28)
s(65) =< it(35)*aux(32)
s(66) =< it(35)*aux(28)
s(80) =< it(40)*aux(21)
s(81) =< it(40)*aux(22)
s(75) =< it(38)*aux(24)
s(76) =< it(38)*aux(22)
s(74) =< it(38)*aux(22)
s(70) =< it(36)*aux(21)
s(71) =< it(36)*aux(19)
s(69) =< it(36)*aux(19)
s(78) =< s(81)
s(77) =< s(80)
s(73) =< s(76)
s(72) =< s(75)
s(68) =< s(71)
s(67) =< s(70)

#### Cost of phase [39,41,45,47]:eval_bits_bounding_box_bb11_in(V_52,V_h_0,V_right_0,V_left_0,B) -> [eval_bits_bounding_box_bb11_in(V_52',V_h_0',V_right_0',V_left_0',B')] 
6*it(39)+6*it(41)+1*s(121)+6*s(122)+1*s(124)+0
  Such that:aux(140) =< V_h_0
aux(141) =< V_h_0-V_h_0'
aux(142) =< V_left_0
aux(143) =< V_left_0-V_left_0'
it(39) =< aux(140)
it(41) =< aux(140)
it(39) =< aux(141)
it(41) =< aux(141)
it(39) =< aux(142)
it(39) =< aux(143)
aux(137) =< aux(142)+1
aux(138) =< aux(142)
s(121) =< it(39)*aux(142)
s(123) =< it(41)*aux(137)
s(124) =< it(39)*aux(138)
s(122) =< s(123)

#### Cost of phase [35,36,38,40]:eval_bits_bounding_box_bb11_in(V_52,V_h_0,V_right_0,V_left_0,B) -> [eval_bits_bounding_box_bb11_in(V_52',V_h_0',V_right_0',V_left_0',B')] 
3*it(35)+3*it(36)+3*it(38)+3*it(40)+1*s(65)+1*s(66)+3*s(67)+3*s(68)+1*s(69)+4*s(72)+2*s(73)+1*s(74)+12*s(77)+12*s(78)+0
  Such that:aux(28) =< V_52-V_right_0
aux(29) =< V_52-V_right_0-V_52'+V_right_0'
aux(30) =< V_h_0
aux(31) =< V_h_0-V_h_0'
aux(32) =< V_left_0
aux(33) =< V_left_0-V_left_0'
it(35) =< aux(28)
it(36) =< aux(28)
it(35) =< aux(29)
it(36) =< aux(29)
it(35) =< aux(30)
it(36) =< aux(30)
it(38) =< aux(30)
it(40) =< aux(30)
it(35) =< aux(31)
it(36) =< aux(31)
it(38) =< aux(31)
it(40) =< aux(31)
it(35) =< aux(32)
it(38) =< aux(32)
it(35) =< aux(33)
it(38) =< aux(33)
aux(21) =< aux(32)+1
aux(22) =< aux(28)+1
aux(24) =< aux(32)
aux(19) =< aux(28)
s(65) =< it(35)*aux(32)
s(66) =< it(35)*aux(28)
s(80) =< it(40)*aux(21)
s(81) =< it(40)*aux(22)
s(75) =< it(38)*aux(24)
s(76) =< it(38)*aux(22)
s(74) =< it(38)*aux(22)
s(70) =< it(36)*aux(21)
s(71) =< it(36)*aux(19)
s(69) =< it(36)*aux(19)
s(78) =< s(81)
s(77) =< s(80)
s(73) =< s(76)
s(72) =< s(75)
s(68) =< s(71)
s(67) =< s(70)

#### Cost of phase [39,41,45,47]:eval_bits_bounding_box_bb11_in(V_52,V_h_0,V_right_0,V_left_0,B) -> [eval_bits_bounding_box_bb11_in(V_52',V_h_0',V_right_0',V_left_0',B')] 
6*it(39)+6*it(41)+1*s(121)+6*s(122)+1*s(124)+0
  Such that:aux(140) =< V_h_0
aux(141) =< V_h_0-V_h_0'
aux(142) =< V_left_0
aux(143) =< V_left_0-V_left_0'
it(39) =< aux(140)
it(41) =< aux(140)
it(39) =< aux(141)
it(41) =< aux(141)
it(39) =< aux(142)
it(39) =< aux(143)
aux(137) =< aux(142)+1
aux(138) =< aux(142)
s(121) =< it(39)*aux(142)
s(123) =< it(41)*aux(137)
s(124) =< it(39)*aux(138)
s(122) =< s(123)

#### Cost of phase [35,36,38,40]:eval_bits_bounding_box_bb11_in(V_52,V_h_0,V_right_0,V_left_0,B) -> [eval_bits_bounding_box_bb11_in(V_52',V_h_0',V_right_0',V_left_0',B')] 
3*it(35)+3*it(36)+3*it(38)+3*it(40)+1*s(65)+1*s(66)+3*s(67)+3*s(68)+1*s(69)+4*s(72)+2*s(73)+1*s(74)+12*s(77)+12*s(78)+0
  Such that:aux(28) =< V_52-V_right_0
aux(29) =< V_52-V_right_0-V_52'+V_right_0'
aux(30) =< V_h_0
aux(31) =< V_h_0-V_h_0'
aux(32) =< V_left_0
aux(33) =< V_left_0-V_left_0'
it(35) =< aux(28)
it(36) =< aux(28)
it(35) =< aux(29)
it(36) =< aux(29)
it(35) =< aux(30)
it(36) =< aux(30)
it(38) =< aux(30)
it(40) =< aux(30)
it(35) =< aux(31)
it(36) =< aux(31)
it(38) =< aux(31)
it(40) =< aux(31)
it(35) =< aux(32)
it(38) =< aux(32)
it(35) =< aux(33)
it(38) =< aux(33)
aux(21) =< aux(32)+1
aux(22) =< aux(28)+1
aux(24) =< aux(32)
aux(19) =< aux(28)
s(65) =< it(35)*aux(32)
s(66) =< it(35)*aux(28)
s(80) =< it(40)*aux(21)
s(81) =< it(40)*aux(22)
s(75) =< it(38)*aux(24)
s(76) =< it(38)*aux(22)
s(74) =< it(38)*aux(22)
s(70) =< it(36)*aux(21)
s(71) =< it(36)*aux(19)
s(69) =< it(36)*aux(19)
s(78) =< s(81)
s(77) =< s(80)
s(73) =< s(76)
s(72) =< s(75)
s(68) =< s(71)
s(67) =< s(70)

#### Cost of phase [35,36,38,40]:eval_bits_bounding_box_bb11_in(V_52,V_h_0,V_right_0,V_left_0,B) -> [eval_bits_bounding_box_bb11_in(V_52',V_h_0',V_right_0',V_left_0',B')] 
3*it(35)+3*it(36)+3*it(38)+3*it(40)+1*s(65)+1*s(66)+3*s(67)+3*s(68)+1*s(69)+4*s(72)+2*s(73)+1*s(74)+12*s(77)+12*s(78)+0
  Such that:aux(28) =< V_52-V_right_0
aux(29) =< V_52-V_right_0-V_52'+V_right_0'
aux(30) =< V_h_0
aux(31) =< V_h_0-V_h_0'
aux(32) =< V_left_0
aux(33) =< V_left_0-V_left_0'
it(35) =< aux(28)
it(36) =< aux(28)
it(35) =< aux(29)
it(36) =< aux(29)
it(35) =< aux(30)
it(36) =< aux(30)
it(38) =< aux(30)
it(40) =< aux(30)
it(35) =< aux(31)
it(36) =< aux(31)
it(38) =< aux(31)
it(40) =< aux(31)
it(35) =< aux(32)
it(38) =< aux(32)
it(35) =< aux(33)
it(38) =< aux(33)
aux(21) =< aux(32)+1
aux(22) =< aux(28)+1
aux(24) =< aux(32)
aux(19) =< aux(28)
s(65) =< it(35)*aux(32)
s(66) =< it(35)*aux(28)
s(80) =< it(40)*aux(21)
s(81) =< it(40)*aux(22)
s(75) =< it(38)*aux(24)
s(76) =< it(38)*aux(22)
s(74) =< it(38)*aux(22)
s(70) =< it(36)*aux(21)
s(71) =< it(36)*aux(19)
s(69) =< it(36)*aux(19)
s(78) =< s(81)
s(77) =< s(80)
s(73) =< s(76)
s(72) =< s(75)
s(68) =< s(71)
s(67) =< s(70)

#### Cost of phase [35,36,38,40]:eval_bits_bounding_box_bb11_in(V_52,V_h_0,V_right_0,V_left_0,B) -> [eval_bits_bounding_box_bb11_in(V_52',V_h_0',V_right_0',V_left_0',B')] 
3*it(35)+3*it(36)+3*it(38)+3*it(40)+1*s(65)+1*s(66)+3*s(67)+3*s(68)+1*s(69)+4*s(72)+2*s(73)+1*s(74)+12*s(77)+12*s(78)+0
  Such that:aux(28) =< V_52-V_right_0
aux(29) =< V_52-V_right_0-V_52'+V_right_0'
aux(30) =< V_h_0
aux(31) =< V_h_0-V_h_0'
aux(32) =< V_left_0
aux(33) =< V_left_0-V_left_0'
it(35) =< aux(28)
it(36) =< aux(28)
it(35) =< aux(29)
it(36) =< aux(29)
it(35) =< aux(30)
it(36) =< aux(30)
it(38) =< aux(30)
it(40) =< aux(30)
it(35) =< aux(31)
it(36) =< aux(31)
it(38) =< aux(31)
it(40) =< aux(31)
it(35) =< aux(32)
it(38) =< aux(32)
it(35) =< aux(33)
it(38) =< aux(33)
aux(21) =< aux(32)+1
aux(22) =< aux(28)+1
aux(24) =< aux(32)
aux(19) =< aux(28)
s(65) =< it(35)*aux(32)
s(66) =< it(35)*aux(28)
s(80) =< it(40)*aux(21)
s(81) =< it(40)*aux(22)
s(75) =< it(38)*aux(24)
s(76) =< it(38)*aux(22)
s(74) =< it(38)*aux(22)
s(70) =< it(36)*aux(21)
s(71) =< it(36)*aux(19)
s(69) =< it(36)*aux(19)
s(78) =< s(81)
s(77) =< s(80)
s(73) =< s(76)
s(72) =< s(75)
s(68) =< s(71)
s(67) =< s(70)

#### Cost of phase [35,36,38,40]:eval_bits_bounding_box_bb11_in(V_52,V_h_0,V_right_0,V_left_0,B) -> [eval_bits_bounding_box_bb11_in(V_52',V_h_0',V_right_0',V_left_0',B')] 
3*it(35)+3*it(36)+3*it(38)+3*it(40)+1*s(65)+1*s(66)+3*s(67)+3*s(68)+1*s(69)+4*s(72)+2*s(73)+1*s(74)+12*s(77)+12*s(78)+0
  Such that:aux(28) =< V_52-V_right_0
aux(29) =< V_52-V_right_0-V_52'+V_right_0'
aux(30) =< V_h_0
aux(31) =< V_h_0-V_h_0'
aux(32) =< V_left_0
aux(33) =< V_left_0-V_left_0'
it(35) =< aux(28)
it(36) =< aux(28)
it(35) =< aux(29)
it(36) =< aux(29)
it(35) =< aux(30)
it(36) =< aux(30)
it(38) =< aux(30)
it(40) =< aux(30)
it(35) =< aux(31)
it(36) =< aux(31)
it(38) =< aux(31)
it(40) =< aux(31)
it(35) =< aux(32)
it(38) =< aux(32)
it(35) =< aux(33)
it(38) =< aux(33)
aux(21) =< aux(32)+1
aux(22) =< aux(28)+1
aux(24) =< aux(32)
aux(19) =< aux(28)
s(65) =< it(35)*aux(32)
s(66) =< it(35)*aux(28)
s(80) =< it(40)*aux(21)
s(81) =< it(40)*aux(22)
s(75) =< it(38)*aux(24)
s(76) =< it(38)*aux(22)
s(74) =< it(38)*aux(22)
s(70) =< it(36)*aux(21)
s(71) =< it(36)*aux(19)
s(69) =< it(36)*aux(19)
s(78) =< s(81)
s(77) =< s(80)
s(73) =< s(76)
s(72) =< s(75)
s(68) =< s(71)
s(67) =< s(70)

#### Cost of phase [35,36,38,40]:eval_bits_bounding_box_bb11_in(V_52,V_h_0,V_right_0,V_left_0,B) -> [eval_bits_bounding_box_bb11_in(V_52',V_h_0',V_right_0',V_left_0',B')] 
3*it(35)+3*it(36)+3*it(38)+3*it(40)+1*s(65)+1*s(66)+3*s(67)+3*s(68)+1*s(69)+4*s(72)+2*s(73)+1*s(74)+12*s(77)+12*s(78)+0
  Such that:aux(28) =< V_52-V_right_0
aux(29) =< V_52-V_right_0-V_52'+V_right_0'
aux(30) =< V_h_0
aux(31) =< V_h_0-V_h_0'
aux(32) =< V_left_0
aux(33) =< V_left_0-V_left_0'
it(35) =< aux(28)
it(36) =< aux(28)
it(35) =< aux(29)
it(36) =< aux(29)
it(35) =< aux(30)
it(36) =< aux(30)
it(38) =< aux(30)
it(40) =< aux(30)
it(35) =< aux(31)
it(36) =< aux(31)
it(38) =< aux(31)
it(40) =< aux(31)
it(35) =< aux(32)
it(38) =< aux(32)
it(35) =< aux(33)
it(38) =< aux(33)
aux(21) =< aux(32)+1
aux(22) =< aux(28)+1
aux(24) =< aux(32)
aux(19) =< aux(28)
s(65) =< it(35)*aux(32)
s(66) =< it(35)*aux(28)
s(80) =< it(40)*aux(21)
s(81) =< it(40)*aux(22)
s(75) =< it(38)*aux(24)
s(76) =< it(38)*aux(22)
s(74) =< it(38)*aux(22)
s(70) =< it(36)*aux(21)
s(71) =< it(36)*aux(19)
s(69) =< it(36)*aux(19)
s(78) =< s(81)
s(77) =< s(80)
s(73) =< s(76)
s(72) =< s(75)
s(68) =< s(71)
s(67) =< s(70)

#### Cost of phase [35,36,38,40]:eval_bits_bounding_box_bb11_in(V_52,V_h_0,V_right_0,V_left_0,B) -> [eval_bits_bounding_box_bb11_in(V_52',V_h_0',V_right_0',V_left_0',B')] 
3*it(35)+3*it(36)+3*it(38)+3*it(40)+1*s(65)+1*s(66)+3*s(67)+3*s(68)+1*s(69)+4*s(72)+2*s(73)+1*s(74)+12*s(77)+12*s(78)+0
  Such that:aux(28) =< V_52-V_right_0
aux(29) =< V_52-V_right_0-V_52'+V_right_0'
aux(30) =< V_h_0
aux(31) =< V_h_0-V_h_0'
aux(32) =< V_left_0
aux(33) =< V_left_0-V_left_0'
it(35) =< aux(28)
it(36) =< aux(28)
it(35) =< aux(29)
it(36) =< aux(29)
it(35) =< aux(30)
it(36) =< aux(30)
it(38) =< aux(30)
it(40) =< aux(30)
it(35) =< aux(31)
it(36) =< aux(31)
it(38) =< aux(31)
it(40) =< aux(31)
it(35) =< aux(32)
it(38) =< aux(32)
it(35) =< aux(33)
it(38) =< aux(33)
aux(21) =< aux(32)+1
aux(22) =< aux(28)+1
aux(24) =< aux(32)
aux(19) =< aux(28)
s(65) =< it(35)*aux(32)
s(66) =< it(35)*aux(28)
s(80) =< it(40)*aux(21)
s(81) =< it(40)*aux(22)
s(75) =< it(38)*aux(24)
s(76) =< it(38)*aux(22)
s(74) =< it(38)*aux(22)
s(70) =< it(36)*aux(21)
s(71) =< it(36)*aux(19)
s(69) =< it(36)*aux(19)
s(78) =< s(81)
s(77) =< s(80)
s(73) =< s(76)
s(72) =< s(75)
s(68) =< s(71)
s(67) =< s(70)

#### Cost of phase [35,36,38,40]:eval_bits_bounding_box_bb11_in(V_52,V_h_0,V_right_0,V_left_0,B) -> [eval_bits_bounding_box_bb11_in(V_52',V_h_0',V_right_0',V_left_0',B')] 
3*it(35)+3*it(36)+3*it(38)+3*it(40)+1*s(65)+1*s(66)+3*s(67)+3*s(68)+1*s(69)+4*s(72)+2*s(73)+1*s(74)+12*s(77)+12*s(78)+0
  Such that:aux(28) =< V_52-V_right_0
aux(29) =< V_52-V_right_0-V_52'+V_right_0'
aux(30) =< V_h_0
aux(31) =< V_h_0-V_h_0'
aux(32) =< V_left_0
aux(33) =< V_left_0-V_left_0'
it(35) =< aux(28)
it(36) =< aux(28)
it(35) =< aux(29)
it(36) =< aux(29)
it(35) =< aux(30)
it(36) =< aux(30)
it(38) =< aux(30)
it(40) =< aux(30)
it(35) =< aux(31)
it(36) =< aux(31)
it(38) =< aux(31)
it(40) =< aux(31)
it(35) =< aux(32)
it(38) =< aux(32)
it(35) =< aux(33)
it(38) =< aux(33)
aux(21) =< aux(32)+1
aux(22) =< aux(28)+1
aux(24) =< aux(32)
aux(19) =< aux(28)
s(65) =< it(35)*aux(32)
s(66) =< it(35)*aux(28)
s(80) =< it(40)*aux(21)
s(81) =< it(40)*aux(22)
s(75) =< it(38)*aux(24)
s(76) =< it(38)*aux(22)
s(74) =< it(38)*aux(22)
s(70) =< it(36)*aux(21)
s(71) =< it(36)*aux(19)
s(69) =< it(36)*aux(19)
s(78) =< s(81)
s(77) =< s(80)
s(73) =< s(76)
s(72) =< s(75)
s(68) =< s(71)
s(67) =< s(70)

#### Cost of phase [35,36,38,40]:eval_bits_bounding_box_bb11_in(V_52,V_h_0,V_right_0,V_left_0,B) -> [eval_bits_bounding_box_bb11_in(V_52',V_h_0',V_right_0',V_left_0',B')] 
3*it(35)+3*it(36)+3*it(38)+3*it(40)+1*s(65)+1*s(66)+3*s(67)+3*s(68)+1*s(69)+4*s(72)+2*s(73)+1*s(74)+12*s(77)+12*s(78)+0
  Such that:aux(28) =< V_52-V_right_0
aux(29) =< V_52-V_right_0-V_52'+V_right_0'
aux(30) =< V_h_0
aux(31) =< V_h_0-V_h_0'
aux(32) =< V_left_0
aux(33) =< V_left_0-V_left_0'
it(35) =< aux(28)
it(36) =< aux(28)
it(35) =< aux(29)
it(36) =< aux(29)
it(35) =< aux(30)
it(36) =< aux(30)
it(38) =< aux(30)
it(40) =< aux(30)
it(35) =< aux(31)
it(36) =< aux(31)
it(38) =< aux(31)
it(40) =< aux(31)
it(35) =< aux(32)
it(38) =< aux(32)
it(35) =< aux(33)
it(38) =< aux(33)
aux(21) =< aux(32)+1
aux(22) =< aux(28)+1
aux(24) =< aux(32)
aux(19) =< aux(28)
s(65) =< it(35)*aux(32)
s(66) =< it(35)*aux(28)
s(80) =< it(40)*aux(21)
s(81) =< it(40)*aux(22)
s(75) =< it(38)*aux(24)
s(76) =< it(38)*aux(22)
s(74) =< it(38)*aux(22)
s(70) =< it(36)*aux(21)
s(71) =< it(36)*aux(19)
s(69) =< it(36)*aux(19)
s(78) =< s(81)
s(77) =< s(80)
s(73) =< s(76)
s(72) =< s(75)
s(68) =< s(71)
s(67) =< s(70)

#### Cost of phase [35,36,38,40]:eval_bits_bounding_box_bb11_in(V_52,V_h_0,V_right_0,V_left_0,B) -> [eval_bits_bounding_box_bb11_in(V_52',V_h_0',V_right_0',V_left_0',B')] 
3*it(35)+3*it(36)+3*it(38)+3*it(40)+1*s(65)+1*s(66)+3*s(67)+3*s(68)+1*s(69)+4*s(72)+2*s(73)+1*s(74)+12*s(77)+12*s(78)+0
  Such that:aux(28) =< V_52-V_right_0
aux(29) =< V_52-V_right_0-V_52'+V_right_0'
aux(30) =< V_h_0
aux(31) =< V_h_0-V_h_0'
aux(32) =< V_left_0
aux(33) =< V_left_0-V_left_0'
it(35) =< aux(28)
it(36) =< aux(28)
it(35) =< aux(29)
it(36) =< aux(29)
it(35) =< aux(30)
it(36) =< aux(30)
it(38) =< aux(30)
it(40) =< aux(30)
it(35) =< aux(31)
it(36) =< aux(31)
it(38) =< aux(31)
it(40) =< aux(31)
it(35) =< aux(32)
it(38) =< aux(32)
it(35) =< aux(33)
it(38) =< aux(33)
aux(21) =< aux(32)+1
aux(22) =< aux(28)+1
aux(24) =< aux(32)
aux(19) =< aux(28)
s(65) =< it(35)*aux(32)
s(66) =< it(35)*aux(28)
s(80) =< it(40)*aux(21)
s(81) =< it(40)*aux(22)
s(75) =< it(38)*aux(24)
s(76) =< it(38)*aux(22)
s(74) =< it(38)*aux(22)
s(70) =< it(36)*aux(21)
s(71) =< it(36)*aux(19)
s(69) =< it(36)*aux(19)
s(78) =< s(81)
s(77) =< s(80)
s(73) =< s(76)
s(72) =< s(75)
s(68) =< s(71)
s(67) =< s(70)

#### Cost of phase [35,36,38,40]:eval_bits_bounding_box_bb11_in(V_52,V_h_0,V_right_0,V_left_0,B) -> [eval_bits_bounding_box_bb11_in(V_52',V_h_0',V_right_0',V_left_0',B')] 
3*it(35)+3*it(36)+3*it(38)+3*it(40)+1*s(65)+1*s(66)+3*s(67)+3*s(68)+1*s(69)+4*s(72)+2*s(73)+1*s(74)+12*s(77)+12*s(78)+0
  Such that:aux(28) =< V_52-V_right_0
aux(29) =< V_52-V_right_0-V_52'+V_right_0'
aux(30) =< V_h_0
aux(31) =< V_h_0-V_h_0'
aux(32) =< V_left_0
aux(33) =< V_left_0-V_left_0'
it(35) =< aux(28)
it(36) =< aux(28)
it(35) =< aux(29)
it(36) =< aux(29)
it(35) =< aux(30)
it(36) =< aux(30)
it(38) =< aux(30)
it(40) =< aux(30)
it(35) =< aux(31)
it(36) =< aux(31)
it(38) =< aux(31)
it(40) =< aux(31)
it(35) =< aux(32)
it(38) =< aux(32)
it(35) =< aux(33)
it(38) =< aux(33)
aux(21) =< aux(32)+1
aux(22) =< aux(28)+1
aux(24) =< aux(32)
aux(19) =< aux(28)
s(65) =< it(35)*aux(32)
s(66) =< it(35)*aux(28)
s(80) =< it(40)*aux(21)
s(81) =< it(40)*aux(22)
s(75) =< it(38)*aux(24)
s(76) =< it(38)*aux(22)
s(74) =< it(38)*aux(22)
s(70) =< it(36)*aux(21)
s(71) =< it(36)*aux(19)
s(69) =< it(36)*aux(19)
s(78) =< s(81)
s(77) =< s(80)
s(73) =< s(76)
s(72) =< s(75)
s(68) =< s(71)
s(67) =< s(70)

#### Cost of phase [35,36,38,40]:eval_bits_bounding_box_bb11_in(V_52,V_h_0,V_right_0,V_left_0,B) -> [eval_bits_bounding_box_bb11_in(V_52',V_h_0',V_right_0',V_left_0',B')] 
3*it(35)+3*it(36)+3*it(38)+3*it(40)+1*s(65)+1*s(66)+3*s(67)+3*s(68)+1*s(69)+4*s(72)+2*s(73)+1*s(74)+12*s(77)+12*s(78)+0
  Such that:aux(28) =< V_52-V_right_0
aux(29) =< V_52-V_right_0-V_52'+V_right_0'
aux(30) =< V_h_0
aux(31) =< V_h_0-V_h_0'
aux(32) =< V_left_0
aux(33) =< V_left_0-V_left_0'
it(35) =< aux(28)
it(36) =< aux(28)
it(35) =< aux(29)
it(36) =< aux(29)
it(35) =< aux(30)
it(36) =< aux(30)
it(38) =< aux(30)
it(40) =< aux(30)
it(35) =< aux(31)
it(36) =< aux(31)
it(38) =< aux(31)
it(40) =< aux(31)
it(35) =< aux(32)
it(38) =< aux(32)
it(35) =< aux(33)
it(38) =< aux(33)
aux(21) =< aux(32)+1
aux(22) =< aux(28)+1
aux(24) =< aux(32)
aux(19) =< aux(28)
s(65) =< it(35)*aux(32)
s(66) =< it(35)*aux(28)
s(80) =< it(40)*aux(21)
s(81) =< it(40)*aux(22)
s(75) =< it(38)*aux(24)
s(76) =< it(38)*aux(22)
s(74) =< it(38)*aux(22)
s(70) =< it(36)*aux(21)
s(71) =< it(36)*aux(19)
s(69) =< it(36)*aux(19)
s(78) =< s(81)
s(77) =< s(80)
s(73) =< s(76)
s(72) =< s(75)
s(68) =< s(71)
s(67) =< s(70)

#### Cost of phase [35,36,38,40]:eval_bits_bounding_box_bb11_in(V_52,V_h_0,V_right_0,V_left_0,B) -> [eval_bits_bounding_box_bb11_in(V_52',V_h_0',V_right_0',V_left_0',B')] 
3*it(35)+3*it(36)+3*it(38)+3*it(40)+1*s(65)+1*s(66)+3*s(67)+3*s(68)+1*s(69)+4*s(72)+2*s(73)+1*s(74)+12*s(77)+12*s(78)+0
  Such that:aux(28) =< V_52-V_right_0
aux(29) =< V_52-V_right_0-V_52'+V_right_0'
aux(30) =< V_h_0
aux(31) =< V_h_0-V_h_0'
aux(32) =< V_left_0
aux(33) =< V_left_0-V_left_0'
it(35) =< aux(28)
it(36) =< aux(28)
it(35) =< aux(29)
it(36) =< aux(29)
it(35) =< aux(30)
it(36) =< aux(30)
it(38) =< aux(30)
it(40) =< aux(30)
it(35) =< aux(31)
it(36) =< aux(31)
it(38) =< aux(31)
it(40) =< aux(31)
it(35) =< aux(32)
it(38) =< aux(32)
it(35) =< aux(33)
it(38) =< aux(33)
aux(21) =< aux(32)+1
aux(22) =< aux(28)+1
aux(24) =< aux(32)
aux(19) =< aux(28)
s(65) =< it(35)*aux(32)
s(66) =< it(35)*aux(28)
s(80) =< it(40)*aux(21)
s(81) =< it(40)*aux(22)
s(75) =< it(38)*aux(24)
s(76) =< it(38)*aux(22)
s(74) =< it(38)*aux(22)
s(70) =< it(36)*aux(21)
s(71) =< it(36)*aux(19)
s(69) =< it(36)*aux(19)
s(78) =< s(81)
s(77) =< s(80)
s(73) =< s(76)
s(72) =< s(75)
s(68) =< s(71)
s(67) =< s(70)

#### Cost of phase [35,36,38,40]:eval_bits_bounding_box_bb11_in(V_52,V_h_0,V_right_0,V_left_0,B) -> [eval_bits_bounding_box_bb11_in(V_52',V_h_0',V_right_0',V_left_0',B')] 
3*it(35)+3*it(36)+3*it(38)+3*it(40)+1*s(65)+1*s(66)+3*s(67)+3*s(68)+1*s(69)+4*s(72)+2*s(73)+1*s(74)+12*s(77)+12*s(78)+0
  Such that:aux(28) =< V_52-V_right_0
aux(29) =< V_52-V_right_0-V_52'+V_right_0'
aux(30) =< V_h_0
aux(31) =< V_h_0-V_h_0'
aux(32) =< V_left_0
aux(33) =< V_left_0-V_left_0'
it(35) =< aux(28)
it(36) =< aux(28)
it(35) =< aux(29)
it(36) =< aux(29)
it(35) =< aux(30)
it(36) =< aux(30)
it(38) =< aux(30)
it(40) =< aux(30)
it(35) =< aux(31)
it(36) =< aux(31)
it(38) =< aux(31)
it(40) =< aux(31)
it(35) =< aux(32)
it(38) =< aux(32)
it(35) =< aux(33)
it(38) =< aux(33)
aux(21) =< aux(32)+1
aux(22) =< aux(28)+1
aux(24) =< aux(32)
aux(19) =< aux(28)
s(65) =< it(35)*aux(32)
s(66) =< it(35)*aux(28)
s(80) =< it(40)*aux(21)
s(81) =< it(40)*aux(22)
s(75) =< it(38)*aux(24)
s(76) =< it(38)*aux(22)
s(74) =< it(38)*aux(22)
s(70) =< it(36)*aux(21)
s(71) =< it(36)*aux(19)
s(69) =< it(36)*aux(19)
s(78) =< s(81)
s(77) =< s(80)
s(73) =< s(76)
s(72) =< s(75)
s(68) =< s(71)
s(67) =< s(70)

#### Cost of phase [35,36,38,40]:eval_bits_bounding_box_bb11_in(V_52,V_h_0,V_right_0,V_left_0,B) -> [eval_bits_bounding_box_bb11_in(V_52',V_h_0',V_right_0',V_left_0',B')] 
3*it(35)+3*it(36)+3*it(38)+3*it(40)+1*s(65)+1*s(66)+3*s(67)+3*s(68)+1*s(69)+4*s(72)+2*s(73)+1*s(74)+12*s(77)+12*s(78)+0
  Such that:aux(28) =< V_52-V_right_0
aux(29) =< V_52-V_right_0-V_52'+V_right_0'
aux(30) =< V_h_0
aux(31) =< V_h_0-V_h_0'
aux(32) =< V_left_0
aux(33) =< V_left_0-V_left_0'
it(35) =< aux(28)
it(36) =< aux(28)
it(35) =< aux(29)
it(36) =< aux(29)
it(35) =< aux(30)
it(36) =< aux(30)
it(38) =< aux(30)
it(40) =< aux(30)
it(35) =< aux(31)
it(36) =< aux(31)
it(38) =< aux(31)
it(40) =< aux(31)
it(35) =< aux(32)
it(38) =< aux(32)
it(35) =< aux(33)
it(38) =< aux(33)
aux(21) =< aux(32)+1
aux(22) =< aux(28)+1
aux(24) =< aux(32)
aux(19) =< aux(28)
s(65) =< it(35)*aux(32)
s(66) =< it(35)*aux(28)
s(80) =< it(40)*aux(21)
s(81) =< it(40)*aux(22)
s(75) =< it(38)*aux(24)
s(76) =< it(38)*aux(22)
s(74) =< it(38)*aux(22)
s(70) =< it(36)*aux(21)
s(71) =< it(36)*aux(19)
s(69) =< it(36)*aux(19)
s(78) =< s(81)
s(77) =< s(80)
s(73) =< s(76)
s(72) =< s(75)
s(68) =< s(71)
s(67) =< s(70)

#### Cost of phase [35,36,38,40]:eval_bits_bounding_box_bb11_in(V_52,V_h_0,V_right_0,V_left_0,B) -> [eval_bits_bounding_box_bb11_in(V_52',V_h_0',V_right_0',V_left_0',B')] 
3*it(35)+3*it(36)+3*it(38)+3*it(40)+1*s(65)+1*s(66)+3*s(67)+3*s(68)+1*s(69)+4*s(72)+2*s(73)+1*s(74)+12*s(77)+12*s(78)+0
  Such that:aux(28) =< V_52-V_right_0
aux(29) =< V_52-V_right_0-V_52'+V_right_0'
aux(30) =< V_h_0
aux(31) =< V_h_0-V_h_0'
aux(32) =< V_left_0
aux(33) =< V_left_0-V_left_0'
it(35) =< aux(28)
it(36) =< aux(28)
it(35) =< aux(29)
it(36) =< aux(29)
it(35) =< aux(30)
it(36) =< aux(30)
it(38) =< aux(30)
it(40) =< aux(30)
it(35) =< aux(31)
it(36) =< aux(31)
it(38) =< aux(31)
it(40) =< aux(31)
it(35) =< aux(32)
it(38) =< aux(32)
it(35) =< aux(33)
it(38) =< aux(33)
aux(21) =< aux(32)+1
aux(22) =< aux(28)+1
aux(24) =< aux(32)
aux(19) =< aux(28)
s(65) =< it(35)*aux(32)
s(66) =< it(35)*aux(28)
s(80) =< it(40)*aux(21)
s(81) =< it(40)*aux(22)
s(75) =< it(38)*aux(24)
s(76) =< it(38)*aux(22)
s(74) =< it(38)*aux(22)
s(70) =< it(36)*aux(21)
s(71) =< it(36)*aux(19)
s(69) =< it(36)*aux(19)
s(78) =< s(81)
s(77) =< s(80)
s(73) =< s(76)
s(72) =< s(75)
s(68) =< s(71)
s(67) =< s(70)

#### Cost of phase [35,36,38,40]:eval_bits_bounding_box_bb11_in(V_52,V_h_0,V_right_0,V_left_0,B) -> [eval_bits_bounding_box_bb11_in(V_52',V_h_0',V_right_0',V_left_0',B')] 
3*it(35)+3*it(36)+3*it(38)+3*it(40)+1*s(65)+1*s(66)+3*s(67)+3*s(68)+1*s(69)+4*s(72)+2*s(73)+1*s(74)+12*s(77)+12*s(78)+0
  Such that:aux(28) =< V_52-V_right_0
aux(29) =< V_52-V_right_0-V_52'+V_right_0'
aux(30) =< V_h_0
aux(31) =< V_h_0-V_h_0'
aux(32) =< V_left_0
aux(33) =< V_left_0-V_left_0'
it(35) =< aux(28)
it(36) =< aux(28)
it(35) =< aux(29)
it(36) =< aux(29)
it(35) =< aux(30)
it(36) =< aux(30)
it(38) =< aux(30)
it(40) =< aux(30)
it(35) =< aux(31)
it(36) =< aux(31)
it(38) =< aux(31)
it(40) =< aux(31)
it(35) =< aux(32)
it(38) =< aux(32)
it(35) =< aux(33)
it(38) =< aux(33)
aux(21) =< aux(32)+1
aux(22) =< aux(28)+1
aux(24) =< aux(32)
aux(19) =< aux(28)
s(65) =< it(35)*aux(32)
s(66) =< it(35)*aux(28)
s(80) =< it(40)*aux(21)
s(81) =< it(40)*aux(22)
s(75) =< it(38)*aux(24)
s(76) =< it(38)*aux(22)
s(74) =< it(38)*aux(22)
s(70) =< it(36)*aux(21)
s(71) =< it(36)*aux(19)
s(69) =< it(36)*aux(19)
s(78) =< s(81)
s(77) =< s(80)
s(73) =< s(76)
s(72) =< s(75)
s(68) =< s(71)
s(67) =< s(70)

#### Cost of chains of eval_bits_bounding_box_bb11_in(V_52,V_h_0,V_right_0,V_left_0,B):
* Chain [[43,49,55,59],60]: 12*it(43)+0
  Such that:aux(9) =< V_h_0
it(43) =< aux(9)

  with precondition: [B=6,0>=V_left_0,V_h_0>=1,V_right_0+1>=V_52] 

* Chain [[35,36,38,40],60]: 3*it(35)+3*it(36)+3*it(38)+3*it(40)+1*s(65)+1*s(66)+3*s(67)+3*s(68)+1*s(69)+4*s(72)+2*s(73)+1*s(74)+12*s(77)+12*s(78)+0
  Such that:aux(34) =< V_52-V_right_0
aux(35) =< V_h_0
aux(36) =< V_left_0
it(35) =< aux(34)
it(36) =< aux(34)
it(35) =< aux(35)
it(36) =< aux(35)
it(38) =< aux(35)
it(40) =< aux(35)
it(35) =< aux(36)
it(38) =< aux(36)
aux(21) =< aux(36)+1
aux(22) =< aux(34)+1
aux(24) =< aux(36)
aux(19) =< aux(34)
s(65) =< it(35)*aux(36)
s(66) =< it(35)*aux(34)
s(80) =< it(40)*aux(21)
s(81) =< it(40)*aux(22)
s(75) =< it(38)*aux(24)
s(76) =< it(38)*aux(22)
s(74) =< it(38)*aux(22)
s(70) =< it(36)*aux(21)
s(71) =< it(36)*aux(19)
s(69) =< it(36)*aux(19)
s(78) =< s(81)
s(77) =< s(80)
s(73) =< s(76)
s(72) =< s(75)
s(68) =< s(71)
s(67) =< s(70)

  with precondition: [B=6,V_h_0>=1,V_right_0>=0,V_left_0>=1,V_52>=V_right_0+2,V_52>=V_left_0+1] 

* Chain [[35,36,38,40],56,[43,49,55,59],60]: 3*it(35)+3*it(36)+3*it(38)+15*it(40)+1*s(65)+1*s(66)+3*s(67)+3*s(68)+1*s(69)+4*s(72)+2*s(73)+1*s(74)+12*s(77)+12*s(78)+3
  Such that:aux(37) =< V_52-V_right_0
aux(38) =< V_h_0
aux(39) =< V_left_0
it(40) =< aux(38)
it(35) =< aux(37)
it(36) =< aux(37)
it(35) =< aux(38)
it(36) =< aux(38)
it(38) =< aux(38)
it(35) =< aux(39)
it(38) =< aux(39)
aux(21) =< aux(39)+1
aux(22) =< aux(37)+1
aux(24) =< aux(39)
aux(19) =< aux(37)
s(65) =< it(35)*aux(39)
s(66) =< it(35)*aux(37)
s(80) =< it(40)*aux(21)
s(81) =< it(40)*aux(22)
s(75) =< it(38)*aux(24)
s(76) =< it(38)*aux(22)
s(74) =< it(38)*aux(22)
s(70) =< it(36)*aux(21)
s(71) =< it(36)*aux(19)
s(69) =< it(36)*aux(19)
s(78) =< s(81)
s(77) =< s(80)
s(73) =< s(76)
s(72) =< s(75)
s(68) =< s(71)
s(67) =< s(70)

  with precondition: [B=6,V_h_0>=3,V_right_0>=0,V_left_0>=1,V_52>=V_right_0+2,V_52>=V_left_0+1] 

* Chain [[35,36,38,40],56,60]: 3*it(35)+3*it(36)+3*it(38)+3*it(40)+1*s(65)+1*s(66)+3*s(67)+3*s(68)+1*s(69)+4*s(72)+2*s(73)+1*s(74)+12*s(77)+12*s(78)+3
  Such that:aux(40) =< V_52-V_right_0
aux(41) =< V_h_0
aux(42) =< V_left_0
it(35) =< aux(40)
it(36) =< aux(40)
it(35) =< aux(41)
it(36) =< aux(41)
it(38) =< aux(41)
it(40) =< aux(41)
it(35) =< aux(42)
it(38) =< aux(42)
aux(21) =< aux(42)+1
aux(22) =< aux(40)+1
aux(24) =< aux(42)
aux(19) =< aux(40)
s(65) =< it(35)*aux(42)
s(66) =< it(35)*aux(40)
s(80) =< it(40)*aux(21)
s(81) =< it(40)*aux(22)
s(75) =< it(38)*aux(24)
s(76) =< it(38)*aux(22)
s(74) =< it(38)*aux(22)
s(70) =< it(36)*aux(21)
s(71) =< it(36)*aux(19)
s(69) =< it(36)*aux(19)
s(78) =< s(81)
s(77) =< s(80)
s(73) =< s(76)
s(72) =< s(75)
s(68) =< s(71)
s(67) =< s(70)

  with precondition: [B=6,V_h_0>=2,V_right_0>=0,V_left_0>=1,V_52>=V_right_0+2,V_52>=V_left_0+1] 

* Chain [[35,36,38,40],52,[37,42,51,54],60]: 3*it(35)+9*it(36)+3*it(38)+9*it(40)+1*s(65)+1*s(66)+3*s(67)+3*s(68)+2*s(69)+4*s(72)+2*s(73)+1*s(74)+12*s(77)+18*s(78)+1*s(97)+3*s(103)+3
  Such that:aux(57) =< V_52-V_right_0
aux(58) =< V_h_0
aux(59) =< V_left_0
it(36) =< aux(57)
it(36) =< aux(58)
it(40) =< aux(58)
aux(22) =< aux(57)+1
aux(19) =< aux(57)
s(97) =< it(36)*aux(57)
s(81) =< it(40)*aux(22)
s(69) =< it(36)*aux(19)
s(78) =< s(81)
s(103) =< aux(57)
it(35) =< aux(57)
it(35) =< aux(58)
it(38) =< aux(58)
it(35) =< aux(59)
it(38) =< aux(59)
aux(21) =< aux(59)+1
aux(24) =< aux(59)
s(65) =< it(35)*aux(59)
s(66) =< it(35)*aux(57)
s(80) =< it(40)*aux(21)
s(75) =< it(38)*aux(24)
s(76) =< it(38)*aux(22)
s(74) =< it(38)*aux(22)
s(70) =< it(36)*aux(21)
s(71) =< it(36)*aux(19)
s(77) =< s(80)
s(73) =< s(76)
s(72) =< s(75)
s(68) =< s(71)
s(67) =< s(70)

  with precondition: [B=6,V_h_0>=3,V_right_0>=0,V_left_0>=1,V_52>=V_right_0+2,V_52>=V_left_0+1] 

* Chain [[35,36,38,40],52,[37,42,51,54],58,[43,49,55,59],60]: 3*it(35)+9*it(36)+3*it(38)+21*it(40)+1*s(65)+1*s(66)+3*s(67)+3*s(68)+2*s(69)+4*s(72)+2*s(73)+1*s(74)+12*s(77)+18*s(78)+1*s(97)+3*s(103)+6
  Such that:aux(63) =< V_52-V_right_0
aux(64) =< V_h_0
aux(65) =< V_left_0
it(40) =< aux(64)
it(36) =< aux(63)
it(36) =< aux(64)
aux(22) =< aux(63)+1
aux(19) =< aux(63)
s(97) =< it(36)*aux(63)
s(81) =< it(40)*aux(22)
s(69) =< it(36)*aux(19)
s(78) =< s(81)
s(103) =< aux(63)
it(35) =< aux(63)
it(35) =< aux(64)
it(38) =< aux(64)
it(35) =< aux(65)
it(38) =< aux(65)
aux(21) =< aux(65)+1
aux(24) =< aux(65)
s(65) =< it(35)*aux(65)
s(66) =< it(35)*aux(63)
s(80) =< it(40)*aux(21)
s(75) =< it(38)*aux(24)
s(76) =< it(38)*aux(22)
s(74) =< it(38)*aux(22)
s(70) =< it(36)*aux(21)
s(71) =< it(36)*aux(19)
s(77) =< s(80)
s(73) =< s(76)
s(72) =< s(75)
s(68) =< s(71)
s(67) =< s(70)

  with precondition: [B=6,V_h_0>=5,V_right_0>=0,V_left_0>=1,V_52>=V_right_0+2,V_52>=V_left_0+1] 

* Chain [[35,36,38,40],52,[37,42,51,54],58,60]: 3*it(35)+9*it(36)+3*it(38)+9*it(40)+1*s(65)+1*s(66)+3*s(67)+3*s(68)+2*s(69)+4*s(72)+2*s(73)+1*s(74)+12*s(77)+18*s(78)+1*s(97)+3*s(103)+6
  Such that:aux(69) =< V_52-V_right_0
aux(70) =< V_h_0
aux(71) =< V_left_0
it(36) =< aux(69)
it(36) =< aux(70)
it(40) =< aux(70)
aux(22) =< aux(69)+1
aux(19) =< aux(69)
s(97) =< it(36)*aux(69)
s(81) =< it(40)*aux(22)
s(69) =< it(36)*aux(19)
s(78) =< s(81)
s(103) =< aux(69)
it(35) =< aux(69)
it(35) =< aux(70)
it(38) =< aux(70)
it(35) =< aux(71)
it(38) =< aux(71)
aux(21) =< aux(71)+1
aux(24) =< aux(71)
s(65) =< it(35)*aux(71)
s(66) =< it(35)*aux(69)
s(80) =< it(40)*aux(21)
s(75) =< it(38)*aux(24)
s(76) =< it(38)*aux(22)
s(74) =< it(38)*aux(22)
s(70) =< it(36)*aux(21)
s(71) =< it(36)*aux(19)
s(77) =< s(80)
s(73) =< s(76)
s(72) =< s(75)
s(68) =< s(71)
s(67) =< s(70)

  with precondition: [B=6,V_h_0>=4,V_right_0>=0,V_left_0>=1,V_52>=V_right_0+2,V_52>=V_left_0+1] 

* Chain [[35,36,38,40],52,[37,42,51,54],48,[43,49,55,59],60]: 3*it(35)+9*it(36)+3*it(38)+21*it(40)+1*s(65)+1*s(66)+3*s(67)+3*s(68)+2*s(69)+4*s(72)+2*s(73)+1*s(74)+12*s(77)+18*s(78)+1*s(97)+3*s(103)+6
  Such that:aux(75) =< V_52-V_right_0
aux(76) =< V_h_0
aux(77) =< V_left_0
it(40) =< aux(76)
it(36) =< aux(75)
it(36) =< aux(76)
aux(22) =< aux(75)+1
aux(19) =< aux(75)
s(97) =< it(36)*aux(75)
s(81) =< it(40)*aux(22)
s(69) =< it(36)*aux(19)
s(78) =< s(81)
s(103) =< aux(75)
it(35) =< aux(75)
it(35) =< aux(76)
it(38) =< aux(76)
it(35) =< aux(77)
it(38) =< aux(77)
aux(21) =< aux(77)+1
aux(24) =< aux(77)
s(65) =< it(35)*aux(77)
s(66) =< it(35)*aux(75)
s(80) =< it(40)*aux(21)
s(75) =< it(38)*aux(24)
s(76) =< it(38)*aux(22)
s(74) =< it(38)*aux(22)
s(70) =< it(36)*aux(21)
s(71) =< it(36)*aux(19)
s(77) =< s(80)
s(73) =< s(76)
s(72) =< s(75)
s(68) =< s(71)
s(67) =< s(70)

  with precondition: [B=6,V_h_0>=5,V_right_0>=0,V_left_0>=1,V_52>=V_right_0+2,V_52>=V_left_0+1] 

* Chain [[35,36,38,40],52,[37,42,51,54],48,60]: 3*it(35)+9*it(36)+3*it(38)+9*it(40)+1*s(65)+1*s(66)+3*s(67)+3*s(68)+2*s(69)+4*s(72)+2*s(73)+1*s(74)+12*s(77)+18*s(78)+1*s(97)+3*s(103)+6
  Such that:aux(81) =< V_52-V_right_0
aux(82) =< V_h_0
aux(83) =< V_left_0
it(36) =< aux(81)
it(36) =< aux(82)
it(40) =< aux(82)
aux(22) =< aux(81)+1
aux(19) =< aux(81)
s(97) =< it(36)*aux(81)
s(81) =< it(40)*aux(22)
s(69) =< it(36)*aux(19)
s(78) =< s(81)
s(103) =< aux(81)
it(35) =< aux(81)
it(35) =< aux(82)
it(38) =< aux(82)
it(35) =< aux(83)
it(38) =< aux(83)
aux(21) =< aux(83)+1
aux(24) =< aux(83)
s(65) =< it(35)*aux(83)
s(66) =< it(35)*aux(81)
s(80) =< it(40)*aux(21)
s(75) =< it(38)*aux(24)
s(76) =< it(38)*aux(22)
s(74) =< it(38)*aux(22)
s(70) =< it(36)*aux(21)
s(71) =< it(36)*aux(19)
s(77) =< s(80)
s(73) =< s(76)
s(72) =< s(75)
s(68) =< s(71)
s(67) =< s(70)

  with precondition: [B=6,V_h_0>=4,V_right_0>=0,V_left_0>=1,V_52>=V_right_0+2,V_52>=V_left_0+1] 

* Chain [[35,36,38,40],52,60]: 3*it(35)+3*it(36)+3*it(38)+3*it(40)+1*s(65)+1*s(66)+3*s(67)+3*s(68)+1*s(69)+4*s(72)+2*s(73)+1*s(74)+12*s(77)+12*s(78)+3*s(103)+3
  Such that:aux(84) =< V_52-V_right_0
aux(85) =< V_h_0
aux(86) =< V_left_0
s(103) =< aux(84)
it(35) =< aux(84)
it(36) =< aux(84)
it(35) =< aux(85)
it(36) =< aux(85)
it(38) =< aux(85)
it(40) =< aux(85)
it(35) =< aux(86)
it(38) =< aux(86)
aux(21) =< aux(86)+1
aux(22) =< aux(84)+1
aux(24) =< aux(86)
aux(19) =< aux(84)
s(65) =< it(35)*aux(86)
s(66) =< it(35)*aux(84)
s(80) =< it(40)*aux(21)
s(81) =< it(40)*aux(22)
s(75) =< it(38)*aux(24)
s(76) =< it(38)*aux(22)
s(74) =< it(38)*aux(22)
s(70) =< it(36)*aux(21)
s(71) =< it(36)*aux(19)
s(69) =< it(36)*aux(19)
s(78) =< s(81)
s(77) =< s(80)
s(73) =< s(76)
s(72) =< s(75)
s(68) =< s(71)
s(67) =< s(70)

  with precondition: [B=6,V_h_0>=2,V_right_0>=0,V_left_0>=1,V_52>=V_right_0+2,V_52>=V_left_0+1] 

* Chain [[35,36,38,40],52,58,[43,49,55,59],60]: 3*it(35)+3*it(36)+3*it(38)+15*it(40)+1*s(65)+1*s(66)+3*s(67)+3*s(68)+1*s(69)+4*s(72)+2*s(73)+1*s(74)+12*s(77)+12*s(78)+3*s(103)+6
  Such that:aux(87) =< V_52-V_right_0
aux(88) =< V_h_0
aux(89) =< V_left_0
it(40) =< aux(88)
s(103) =< aux(87)
it(35) =< aux(87)
it(36) =< aux(87)
it(35) =< aux(88)
it(36) =< aux(88)
it(38) =< aux(88)
it(35) =< aux(89)
it(38) =< aux(89)
aux(21) =< aux(89)+1
aux(22) =< aux(87)+1
aux(24) =< aux(89)
aux(19) =< aux(87)
s(65) =< it(35)*aux(89)
s(66) =< it(35)*aux(87)
s(80) =< it(40)*aux(21)
s(81) =< it(40)*aux(22)
s(75) =< it(38)*aux(24)
s(76) =< it(38)*aux(22)
s(74) =< it(38)*aux(22)
s(70) =< it(36)*aux(21)
s(71) =< it(36)*aux(19)
s(69) =< it(36)*aux(19)
s(78) =< s(81)
s(77) =< s(80)
s(73) =< s(76)
s(72) =< s(75)
s(68) =< s(71)
s(67) =< s(70)

  with precondition: [B=6,V_h_0>=4,V_right_0>=0,V_left_0>=1,V_52>=V_right_0+2,V_52>=V_left_0+1] 

* Chain [[35,36,38,40],52,58,60]: 3*it(35)+3*it(36)+3*it(38)+3*it(40)+1*s(65)+1*s(66)+3*s(67)+3*s(68)+1*s(69)+4*s(72)+2*s(73)+1*s(74)+12*s(77)+12*s(78)+3*s(103)+6
  Such that:aux(90) =< V_52-V_right_0
aux(91) =< V_h_0
aux(92) =< V_left_0
s(103) =< aux(90)
it(35) =< aux(90)
it(36) =< aux(90)
it(35) =< aux(91)
it(36) =< aux(91)
it(38) =< aux(91)
it(40) =< aux(91)
it(35) =< aux(92)
it(38) =< aux(92)
aux(21) =< aux(92)+1
aux(22) =< aux(90)+1
aux(24) =< aux(92)
aux(19) =< aux(90)
s(65) =< it(35)*aux(92)
s(66) =< it(35)*aux(90)
s(80) =< it(40)*aux(21)
s(81) =< it(40)*aux(22)
s(75) =< it(38)*aux(24)
s(76) =< it(38)*aux(22)
s(74) =< it(38)*aux(22)
s(70) =< it(36)*aux(21)
s(71) =< it(36)*aux(19)
s(69) =< it(36)*aux(19)
s(78) =< s(81)
s(77) =< s(80)
s(73) =< s(76)
s(72) =< s(75)
s(68) =< s(71)
s(67) =< s(70)

  with precondition: [B=6,V_h_0>=3,V_right_0>=0,V_left_0>=1,V_52>=V_right_0+2,V_52>=V_left_0+1] 

* Chain [[35,36,38,40],52,48,[43,49,55,59],60]: 3*it(35)+3*it(36)+3*it(38)+15*it(40)+1*s(65)+1*s(66)+3*s(67)+3*s(68)+1*s(69)+4*s(72)+2*s(73)+1*s(74)+12*s(77)+12*s(78)+3*s(103)+6
  Such that:aux(93) =< V_52-V_right_0
aux(94) =< V_h_0
aux(95) =< V_left_0
it(40) =< aux(94)
s(103) =< aux(93)
it(35) =< aux(93)
it(36) =< aux(93)
it(35) =< aux(94)
it(36) =< aux(94)
it(38) =< aux(94)
it(35) =< aux(95)
it(38) =< aux(95)
aux(21) =< aux(95)+1
aux(22) =< aux(93)+1
aux(24) =< aux(95)
aux(19) =< aux(93)
s(65) =< it(35)*aux(95)
s(66) =< it(35)*aux(93)
s(80) =< it(40)*aux(21)
s(81) =< it(40)*aux(22)
s(75) =< it(38)*aux(24)
s(76) =< it(38)*aux(22)
s(74) =< it(38)*aux(22)
s(70) =< it(36)*aux(21)
s(71) =< it(36)*aux(19)
s(69) =< it(36)*aux(19)
s(78) =< s(81)
s(77) =< s(80)
s(73) =< s(76)
s(72) =< s(75)
s(68) =< s(71)
s(67) =< s(70)

  with precondition: [B=6,V_h_0>=4,V_right_0>=0,V_left_0>=1,V_52>=V_right_0+2,V_52>=V_left_0+1] 

* Chain [[35,36,38,40],52,48,60]: 3*it(35)+3*it(36)+3*it(38)+3*it(40)+1*s(65)+1*s(66)+3*s(67)+3*s(68)+1*s(69)+4*s(72)+2*s(73)+1*s(74)+12*s(77)+12*s(78)+3*s(103)+6
  Such that:aux(96) =< V_52-V_right_0
aux(97) =< V_h_0
aux(98) =< V_left_0
s(103) =< aux(96)
it(35) =< aux(96)
it(36) =< aux(96)
it(35) =< aux(97)
it(36) =< aux(97)
it(38) =< aux(97)
it(40) =< aux(97)
it(35) =< aux(98)
it(38) =< aux(98)
aux(21) =< aux(98)+1
aux(22) =< aux(96)+1
aux(24) =< aux(98)
aux(19) =< aux(96)
s(65) =< it(35)*aux(98)
s(66) =< it(35)*aux(96)
s(80) =< it(40)*aux(21)
s(81) =< it(40)*aux(22)
s(75) =< it(38)*aux(24)
s(76) =< it(38)*aux(22)
s(74) =< it(38)*aux(22)
s(70) =< it(36)*aux(21)
s(71) =< it(36)*aux(19)
s(69) =< it(36)*aux(19)
s(78) =< s(81)
s(77) =< s(80)
s(73) =< s(76)
s(72) =< s(75)
s(68) =< s(71)
s(67) =< s(70)

  with precondition: [B=6,V_h_0>=3,V_right_0>=0,V_left_0>=1,V_52>=V_right_0+2,V_52>=V_left_0+1] 

* Chain [[35,36,38,40],50,[37,42,51,54],60]: 3*it(35)+9*it(36)+3*it(38)+9*it(40)+1*s(65)+1*s(66)+3*s(67)+3*s(68)+2*s(69)+4*s(72)+2*s(73)+1*s(74)+12*s(77)+18*s(78)+1*s(97)+1*s(106)+3
  Such that:aux(100) =< V_52-V_right_0
aux(101) =< V_h_0
aux(102) =< V_left_0
s(106) =< aux(100)
it(36) =< aux(100)
it(36) =< aux(101)
it(40) =< aux(101)
aux(22) =< aux(100)+1
aux(19) =< aux(100)
s(97) =< it(36)*aux(100)
s(81) =< it(40)*aux(22)
s(69) =< it(36)*aux(19)
s(78) =< s(81)
it(35) =< aux(100)
it(35) =< aux(101)
it(38) =< aux(101)
it(35) =< aux(102)
it(38) =< aux(102)
aux(21) =< aux(102)+1
aux(24) =< aux(102)
s(65) =< it(35)*aux(102)
s(66) =< it(35)*aux(100)
s(80) =< it(40)*aux(21)
s(75) =< it(38)*aux(24)
s(76) =< it(38)*aux(22)
s(74) =< it(38)*aux(22)
s(70) =< it(36)*aux(21)
s(71) =< it(36)*aux(19)
s(77) =< s(80)
s(73) =< s(76)
s(72) =< s(75)
s(68) =< s(71)
s(67) =< s(70)

  with precondition: [B=6,V_h_0>=3,V_right_0>=0,V_left_0>=1,V_52>=V_right_0+3,V_52>=V_left_0+1] 

* Chain [[35,36,38,40],50,[37,42,51,54],58,[43,49,55,59],60]: 3*it(35)+9*it(36)+3*it(38)+21*it(40)+1*s(65)+1*s(66)+3*s(67)+3*s(68)+2*s(69)+4*s(72)+2*s(73)+1*s(74)+12*s(77)+18*s(78)+1*s(97)+1*s(106)+6
  Such that:aux(104) =< V_52-V_right_0
aux(105) =< V_h_0
aux(106) =< V_left_0
s(106) =< aux(104)
it(40) =< aux(105)
it(36) =< aux(104)
it(36) =< aux(105)
aux(22) =< aux(104)+1
aux(19) =< aux(104)
s(97) =< it(36)*aux(104)
s(81) =< it(40)*aux(22)
s(69) =< it(36)*aux(19)
s(78) =< s(81)
it(35) =< aux(104)
it(35) =< aux(105)
it(38) =< aux(105)
it(35) =< aux(106)
it(38) =< aux(106)
aux(21) =< aux(106)+1
aux(24) =< aux(106)
s(65) =< it(35)*aux(106)
s(66) =< it(35)*aux(104)
s(80) =< it(40)*aux(21)
s(75) =< it(38)*aux(24)
s(76) =< it(38)*aux(22)
s(74) =< it(38)*aux(22)
s(70) =< it(36)*aux(21)
s(71) =< it(36)*aux(19)
s(77) =< s(80)
s(73) =< s(76)
s(72) =< s(75)
s(68) =< s(71)
s(67) =< s(70)

  with precondition: [B=6,V_h_0>=5,V_right_0>=0,V_left_0>=1,V_52>=V_right_0+3,V_52>=V_left_0+1] 

* Chain [[35,36,38,40],50,[37,42,51,54],58,60]: 3*it(35)+9*it(36)+3*it(38)+9*it(40)+1*s(65)+1*s(66)+3*s(67)+3*s(68)+2*s(69)+4*s(72)+2*s(73)+1*s(74)+12*s(77)+18*s(78)+1*s(97)+1*s(106)+6
  Such that:aux(108) =< V_52-V_right_0
aux(109) =< V_h_0
aux(110) =< V_left_0
s(106) =< aux(108)
it(36) =< aux(108)
it(36) =< aux(109)
it(40) =< aux(109)
aux(22) =< aux(108)+1
aux(19) =< aux(108)
s(97) =< it(36)*aux(108)
s(81) =< it(40)*aux(22)
s(69) =< it(36)*aux(19)
s(78) =< s(81)
it(35) =< aux(108)
it(35) =< aux(109)
it(38) =< aux(109)
it(35) =< aux(110)
it(38) =< aux(110)
aux(21) =< aux(110)+1
aux(24) =< aux(110)
s(65) =< it(35)*aux(110)
s(66) =< it(35)*aux(108)
s(80) =< it(40)*aux(21)
s(75) =< it(38)*aux(24)
s(76) =< it(38)*aux(22)
s(74) =< it(38)*aux(22)
s(70) =< it(36)*aux(21)
s(71) =< it(36)*aux(19)
s(77) =< s(80)
s(73) =< s(76)
s(72) =< s(75)
s(68) =< s(71)
s(67) =< s(70)

  with precondition: [B=6,V_h_0>=4,V_right_0>=0,V_left_0>=1,V_52>=V_right_0+3,V_52>=V_left_0+1] 

* Chain [[35,36,38,40],50,[37,42,51,54],48,[43,49,55,59],60]: 3*it(35)+9*it(36)+3*it(38)+21*it(40)+1*s(65)+1*s(66)+3*s(67)+3*s(68)+2*s(69)+4*s(72)+2*s(73)+1*s(74)+12*s(77)+18*s(78)+1*s(97)+1*s(106)+6
  Such that:aux(112) =< V_52-V_right_0
aux(113) =< V_h_0
aux(114) =< V_left_0
s(106) =< aux(112)
it(40) =< aux(113)
it(36) =< aux(112)
it(36) =< aux(113)
aux(22) =< aux(112)+1
aux(19) =< aux(112)
s(97) =< it(36)*aux(112)
s(81) =< it(40)*aux(22)
s(69) =< it(36)*aux(19)
s(78) =< s(81)
it(35) =< aux(112)
it(35) =< aux(113)
it(38) =< aux(113)
it(35) =< aux(114)
it(38) =< aux(114)
aux(21) =< aux(114)+1
aux(24) =< aux(114)
s(65) =< it(35)*aux(114)
s(66) =< it(35)*aux(112)
s(80) =< it(40)*aux(21)
s(75) =< it(38)*aux(24)
s(76) =< it(38)*aux(22)
s(74) =< it(38)*aux(22)
s(70) =< it(36)*aux(21)
s(71) =< it(36)*aux(19)
s(77) =< s(80)
s(73) =< s(76)
s(72) =< s(75)
s(68) =< s(71)
s(67) =< s(70)

  with precondition: [B=6,V_h_0>=5,V_right_0>=0,V_left_0>=1,V_52>=V_right_0+3,V_52>=V_left_0+1] 

* Chain [[35,36,38,40],50,[37,42,51,54],48,60]: 3*it(35)+9*it(36)+3*it(38)+9*it(40)+1*s(65)+1*s(66)+3*s(67)+3*s(68)+2*s(69)+4*s(72)+2*s(73)+1*s(74)+12*s(77)+18*s(78)+1*s(97)+1*s(106)+6
  Such that:aux(116) =< V_52-V_right_0
aux(117) =< V_h_0
aux(118) =< V_left_0
s(106) =< aux(116)
it(36) =< aux(116)
it(36) =< aux(117)
it(40) =< aux(117)
aux(22) =< aux(116)+1
aux(19) =< aux(116)
s(97) =< it(36)*aux(116)
s(81) =< it(40)*aux(22)
s(69) =< it(36)*aux(19)
s(78) =< s(81)
it(35) =< aux(116)
it(35) =< aux(117)
it(38) =< aux(117)
it(35) =< aux(118)
it(38) =< aux(118)
aux(21) =< aux(118)+1
aux(24) =< aux(118)
s(65) =< it(35)*aux(118)
s(66) =< it(35)*aux(116)
s(80) =< it(40)*aux(21)
s(75) =< it(38)*aux(24)
s(76) =< it(38)*aux(22)
s(74) =< it(38)*aux(22)
s(70) =< it(36)*aux(21)
s(71) =< it(36)*aux(19)
s(77) =< s(80)
s(73) =< s(76)
s(72) =< s(75)
s(68) =< s(71)
s(67) =< s(70)

  with precondition: [B=6,V_h_0>=4,V_right_0>=0,V_left_0>=1,V_52>=V_right_0+3,V_52>=V_left_0+1] 

* Chain [[35,36,38,40],50,60]: 3*it(35)+3*it(36)+3*it(38)+3*it(40)+1*s(65)+1*s(66)+3*s(67)+3*s(68)+1*s(69)+4*s(72)+2*s(73)+1*s(74)+12*s(77)+12*s(78)+1*s(106)+3
  Such that:aux(119) =< V_52-V_right_0
aux(120) =< V_h_0
aux(121) =< V_left_0
s(106) =< aux(119)
it(35) =< aux(119)
it(36) =< aux(119)
it(35) =< aux(120)
it(36) =< aux(120)
it(38) =< aux(120)
it(40) =< aux(120)
it(35) =< aux(121)
it(38) =< aux(121)
aux(21) =< aux(121)+1
aux(22) =< aux(119)+1
aux(24) =< aux(121)
aux(19) =< aux(119)
s(65) =< it(35)*aux(121)
s(66) =< it(35)*aux(119)
s(80) =< it(40)*aux(21)
s(81) =< it(40)*aux(22)
s(75) =< it(38)*aux(24)
s(76) =< it(38)*aux(22)
s(74) =< it(38)*aux(22)
s(70) =< it(36)*aux(21)
s(71) =< it(36)*aux(19)
s(69) =< it(36)*aux(19)
s(78) =< s(81)
s(77) =< s(80)
s(73) =< s(76)
s(72) =< s(75)
s(68) =< s(71)
s(67) =< s(70)

  with precondition: [B=6,V_h_0>=2,V_right_0>=0,V_left_0>=1,V_52>=V_right_0+3,V_52>=V_left_0+1] 

* Chain [[35,36,38,40],50,58,[43,49,55,59],60]: 3*it(35)+3*it(36)+3*it(38)+15*it(40)+1*s(65)+1*s(66)+3*s(67)+3*s(68)+1*s(69)+4*s(72)+2*s(73)+1*s(74)+12*s(77)+12*s(78)+1*s(106)+6
  Such that:aux(122) =< V_52-V_right_0
aux(123) =< V_h_0
aux(124) =< V_left_0
s(106) =< aux(122)
it(40) =< aux(123)
it(35) =< aux(122)
it(36) =< aux(122)
it(35) =< aux(123)
it(36) =< aux(123)
it(38) =< aux(123)
it(35) =< aux(124)
it(38) =< aux(124)
aux(21) =< aux(124)+1
aux(22) =< aux(122)+1
aux(24) =< aux(124)
aux(19) =< aux(122)
s(65) =< it(35)*aux(124)
s(66) =< it(35)*aux(122)
s(80) =< it(40)*aux(21)
s(81) =< it(40)*aux(22)
s(75) =< it(38)*aux(24)
s(76) =< it(38)*aux(22)
s(74) =< it(38)*aux(22)
s(70) =< it(36)*aux(21)
s(71) =< it(36)*aux(19)
s(69) =< it(36)*aux(19)
s(78) =< s(81)
s(77) =< s(80)
s(73) =< s(76)
s(72) =< s(75)
s(68) =< s(71)
s(67) =< s(70)

  with precondition: [B=6,V_h_0>=4,V_right_0>=0,V_left_0>=1,V_52>=V_right_0+3,V_52>=V_left_0+1] 

* Chain [[35,36,38,40],50,58,60]: 3*it(35)+3*it(36)+3*it(38)+3*it(40)+1*s(65)+1*s(66)+3*s(67)+3*s(68)+1*s(69)+4*s(72)+2*s(73)+1*s(74)+12*s(77)+12*s(78)+1*s(106)+6
  Such that:aux(125) =< V_52-V_right_0
aux(126) =< V_h_0
aux(127) =< V_left_0
s(106) =< aux(125)
it(35) =< aux(125)
it(36) =< aux(125)
it(35) =< aux(126)
it(36) =< aux(126)
it(38) =< aux(126)
it(40) =< aux(126)
it(35) =< aux(127)
it(38) =< aux(127)
aux(21) =< aux(127)+1
aux(22) =< aux(125)+1
aux(24) =< aux(127)
aux(19) =< aux(125)
s(65) =< it(35)*aux(127)
s(66) =< it(35)*aux(125)
s(80) =< it(40)*aux(21)
s(81) =< it(40)*aux(22)
s(75) =< it(38)*aux(24)
s(76) =< it(38)*aux(22)
s(74) =< it(38)*aux(22)
s(70) =< it(36)*aux(21)
s(71) =< it(36)*aux(19)
s(69) =< it(36)*aux(19)
s(78) =< s(81)
s(77) =< s(80)
s(73) =< s(76)
s(72) =< s(75)
s(68) =< s(71)
s(67) =< s(70)

  with precondition: [B=6,V_h_0>=3,V_right_0>=0,V_left_0>=1,V_52>=V_right_0+3,V_52>=V_left_0+1] 

* Chain [[35,36,38,40],50,48,[43,49,55,59],60]: 3*it(35)+3*it(36)+3*it(38)+15*it(40)+1*s(65)+1*s(66)+3*s(67)+3*s(68)+1*s(69)+4*s(72)+2*s(73)+1*s(74)+12*s(77)+12*s(78)+1*s(106)+6
  Such that:aux(128) =< V_52-V_right_0
aux(129) =< V_h_0
aux(130) =< V_left_0
s(106) =< aux(128)
it(40) =< aux(129)
it(35) =< aux(128)
it(36) =< aux(128)
it(35) =< aux(129)
it(36) =< aux(129)
it(38) =< aux(129)
it(35) =< aux(130)
it(38) =< aux(130)
aux(21) =< aux(130)+1
aux(22) =< aux(128)+1
aux(24) =< aux(130)
aux(19) =< aux(128)
s(65) =< it(35)*aux(130)
s(66) =< it(35)*aux(128)
s(80) =< it(40)*aux(21)
s(81) =< it(40)*aux(22)
s(75) =< it(38)*aux(24)
s(76) =< it(38)*aux(22)
s(74) =< it(38)*aux(22)
s(70) =< it(36)*aux(21)
s(71) =< it(36)*aux(19)
s(69) =< it(36)*aux(19)
s(78) =< s(81)
s(77) =< s(80)
s(73) =< s(76)
s(72) =< s(75)
s(68) =< s(71)
s(67) =< s(70)

  with precondition: [B=6,V_h_0>=4,V_right_0>=0,V_left_0>=1,V_52>=V_right_0+3,V_52>=V_left_0+1] 

* Chain [[35,36,38,40],50,48,60]: 3*it(35)+3*it(36)+3*it(38)+3*it(40)+1*s(65)+1*s(66)+3*s(67)+3*s(68)+1*s(69)+4*s(72)+2*s(73)+1*s(74)+12*s(77)+12*s(78)+1*s(106)+6
  Such that:aux(131) =< V_52-V_right_0
aux(132) =< V_h_0
aux(133) =< V_left_0
s(106) =< aux(131)
it(35) =< aux(131)
it(36) =< aux(131)
it(35) =< aux(132)
it(36) =< aux(132)
it(38) =< aux(132)
it(40) =< aux(132)
it(35) =< aux(133)
it(38) =< aux(133)
aux(21) =< aux(133)+1
aux(22) =< aux(131)+1
aux(24) =< aux(133)
aux(19) =< aux(131)
s(65) =< it(35)*aux(133)
s(66) =< it(35)*aux(131)
s(80) =< it(40)*aux(21)
s(81) =< it(40)*aux(22)
s(75) =< it(38)*aux(24)
s(76) =< it(38)*aux(22)
s(74) =< it(38)*aux(22)
s(70) =< it(36)*aux(21)
s(71) =< it(36)*aux(19)
s(69) =< it(36)*aux(19)
s(78) =< s(81)
s(77) =< s(80)
s(73) =< s(76)
s(72) =< s(75)
s(68) =< s(71)
s(67) =< s(70)

  with precondition: [B=6,V_h_0>=3,V_right_0>=0,V_left_0>=1,V_52>=V_right_0+3,V_52>=V_left_0+1] 

* Chain [[35,36,38,40],46,[39,41,45,47],60]: 3*it(35)+3*it(36)+9*it(38)+9*it(40)+1*s(65)+1*s(66)+3*s(67)+3*s(68)+1*s(69)+4*s(72)+2*s(73)+1*s(74)+18*s(77)+12*s(78)+1*s(121)+1*s(124)+3*s(127)+3
  Such that:aux(148) =< V_52-V_right_0
aux(149) =< V_h_0
aux(150) =< V_left_0
it(38) =< aux(149)
it(40) =< aux(149)
it(38) =< aux(150)
aux(21) =< aux(150)+1
aux(24) =< aux(150)
s(121) =< it(38)*aux(150)
s(80) =< it(40)*aux(21)
s(124) =< it(38)*aux(24)
s(77) =< s(80)
s(127) =< aux(150)
it(35) =< aux(148)
it(36) =< aux(148)
it(35) =< aux(149)
it(36) =< aux(149)
it(35) =< aux(150)
aux(22) =< aux(148)+1
aux(19) =< aux(148)
s(65) =< it(35)*aux(150)
s(66) =< it(35)*aux(148)
s(81) =< it(40)*aux(22)
s(75) =< it(38)*aux(24)
s(76) =< it(38)*aux(22)
s(74) =< it(38)*aux(22)
s(70) =< it(36)*aux(21)
s(71) =< it(36)*aux(19)
s(69) =< it(36)*aux(19)
s(78) =< s(81)
s(73) =< s(76)
s(72) =< s(75)
s(68) =< s(71)
s(67) =< s(70)

  with precondition: [B=6,V_h_0>=3,V_right_0>=0,V_left_0>=1,V_52>=V_right_0+2,V_52>=V_left_0+1] 

* Chain [[35,36,38,40],46,[39,41,45,47],57,[43,49,55,59],60]: 3*it(35)+3*it(36)+9*it(38)+21*it(40)+1*s(65)+1*s(66)+3*s(67)+3*s(68)+1*s(69)+4*s(72)+2*s(73)+1*s(74)+18*s(77)+12*s(78)+1*s(121)+1*s(124)+3*s(127)+6
  Such that:aux(154) =< V_52-V_right_0
aux(155) =< V_h_0
aux(156) =< V_left_0
it(40) =< aux(155)
it(38) =< aux(155)
it(38) =< aux(156)
aux(21) =< aux(156)+1
aux(24) =< aux(156)
s(121) =< it(38)*aux(156)
s(80) =< it(40)*aux(21)
s(124) =< it(38)*aux(24)
s(77) =< s(80)
s(127) =< aux(156)
it(35) =< aux(154)
it(36) =< aux(154)
it(35) =< aux(155)
it(36) =< aux(155)
it(35) =< aux(156)
aux(22) =< aux(154)+1
aux(19) =< aux(154)
s(65) =< it(35)*aux(156)
s(66) =< it(35)*aux(154)
s(81) =< it(40)*aux(22)
s(75) =< it(38)*aux(24)
s(76) =< it(38)*aux(22)
s(74) =< it(38)*aux(22)
s(70) =< it(36)*aux(21)
s(71) =< it(36)*aux(19)
s(69) =< it(36)*aux(19)
s(78) =< s(81)
s(73) =< s(76)
s(72) =< s(75)
s(68) =< s(71)
s(67) =< s(70)

  with precondition: [B=6,V_h_0>=5,V_right_0>=0,V_left_0>=1,V_52>=V_right_0+2,V_52>=V_left_0+1] 

* Chain [[35,36,38,40],46,[39,41,45,47],57,60]: 3*it(35)+3*it(36)+9*it(38)+9*it(40)+1*s(65)+1*s(66)+3*s(67)+3*s(68)+1*s(69)+4*s(72)+2*s(73)+1*s(74)+18*s(77)+12*s(78)+1*s(121)+1*s(124)+3*s(127)+6
  Such that:aux(160) =< V_52-V_right_0
aux(161) =< V_h_0
aux(162) =< V_left_0
it(38) =< aux(161)
it(40) =< aux(161)
it(38) =< aux(162)
aux(21) =< aux(162)+1
aux(24) =< aux(162)
s(121) =< it(38)*aux(162)
s(80) =< it(40)*aux(21)
s(124) =< it(38)*aux(24)
s(77) =< s(80)
s(127) =< aux(162)
it(35) =< aux(160)
it(36) =< aux(160)
it(35) =< aux(161)
it(36) =< aux(161)
it(35) =< aux(162)
aux(22) =< aux(160)+1
aux(19) =< aux(160)
s(65) =< it(35)*aux(162)
s(66) =< it(35)*aux(160)
s(81) =< it(40)*aux(22)
s(75) =< it(38)*aux(24)
s(76) =< it(38)*aux(22)
s(74) =< it(38)*aux(22)
s(70) =< it(36)*aux(21)
s(71) =< it(36)*aux(19)
s(69) =< it(36)*aux(19)
s(78) =< s(81)
s(73) =< s(76)
s(72) =< s(75)
s(68) =< s(71)
s(67) =< s(70)

  with precondition: [B=6,V_h_0>=4,V_right_0>=0,V_left_0>=1,V_52>=V_right_0+2,V_52>=V_left_0+1] 

* Chain [[35,36,38,40],46,[39,41,45,47],53,[43,49,55,59],60]: 3*it(35)+3*it(36)+9*it(38)+21*it(40)+1*s(65)+1*s(66)+3*s(67)+3*s(68)+1*s(69)+4*s(72)+2*s(73)+1*s(74)+18*s(77)+12*s(78)+1*s(121)+1*s(124)+3*s(127)+6
  Such that:aux(166) =< V_52-V_right_0
aux(167) =< V_h_0
aux(168) =< V_left_0
it(40) =< aux(167)
it(38) =< aux(167)
it(38) =< aux(168)
aux(21) =< aux(168)+1
aux(24) =< aux(168)
s(121) =< it(38)*aux(168)
s(80) =< it(40)*aux(21)
s(124) =< it(38)*aux(24)
s(77) =< s(80)
s(127) =< aux(168)
it(35) =< aux(166)
it(36) =< aux(166)
it(35) =< aux(167)
it(36) =< aux(167)
it(35) =< aux(168)
aux(22) =< aux(166)+1
aux(19) =< aux(166)
s(65) =< it(35)*aux(168)
s(66) =< it(35)*aux(166)
s(81) =< it(40)*aux(22)
s(75) =< it(38)*aux(24)
s(76) =< it(38)*aux(22)
s(74) =< it(38)*aux(22)
s(70) =< it(36)*aux(21)
s(71) =< it(36)*aux(19)
s(69) =< it(36)*aux(19)
s(78) =< s(81)
s(73) =< s(76)
s(72) =< s(75)
s(68) =< s(71)
s(67) =< s(70)

  with precondition: [B=6,V_h_0>=5,V_right_0>=0,V_left_0>=1,V_52>=V_right_0+2,V_52>=V_left_0+1] 

* Chain [[35,36,38,40],46,[39,41,45,47],53,60]: 3*it(35)+3*it(36)+9*it(38)+9*it(40)+1*s(65)+1*s(66)+3*s(67)+3*s(68)+1*s(69)+4*s(72)+2*s(73)+1*s(74)+18*s(77)+12*s(78)+1*s(121)+1*s(124)+3*s(127)+6
  Such that:aux(172) =< V_52-V_right_0
aux(173) =< V_h_0
aux(174) =< V_left_0
it(38) =< aux(173)
it(40) =< aux(173)
it(38) =< aux(174)
aux(21) =< aux(174)+1
aux(24) =< aux(174)
s(121) =< it(38)*aux(174)
s(80) =< it(40)*aux(21)
s(124) =< it(38)*aux(24)
s(77) =< s(80)
s(127) =< aux(174)
it(35) =< aux(172)
it(36) =< aux(172)
it(35) =< aux(173)
it(36) =< aux(173)
it(35) =< aux(174)
aux(22) =< aux(172)+1
aux(19) =< aux(172)
s(65) =< it(35)*aux(174)
s(66) =< it(35)*aux(172)
s(81) =< it(40)*aux(22)
s(75) =< it(38)*aux(24)
s(76) =< it(38)*aux(22)
s(74) =< it(38)*aux(22)
s(70) =< it(36)*aux(21)
s(71) =< it(36)*aux(19)
s(69) =< it(36)*aux(19)
s(78) =< s(81)
s(73) =< s(76)
s(72) =< s(75)
s(68) =< s(71)
s(67) =< s(70)

  with precondition: [B=6,V_h_0>=4,V_right_0>=0,V_left_0>=1,V_52>=V_right_0+2,V_52>=V_left_0+1] 

* Chain [[35,36,38,40],46,60]: 3*it(35)+3*it(36)+3*it(38)+3*it(40)+1*s(65)+1*s(66)+3*s(67)+3*s(68)+1*s(69)+4*s(72)+2*s(73)+1*s(74)+12*s(77)+12*s(78)+3*s(127)+3
  Such that:aux(175) =< V_52-V_right_0
aux(176) =< V_h_0
aux(177) =< V_left_0
s(127) =< aux(177)
it(35) =< aux(175)
it(36) =< aux(175)
it(35) =< aux(176)
it(36) =< aux(176)
it(38) =< aux(176)
it(40) =< aux(176)
it(35) =< aux(177)
it(38) =< aux(177)
aux(21) =< aux(177)+1
aux(22) =< aux(175)+1
aux(24) =< aux(177)
aux(19) =< aux(175)
s(65) =< it(35)*aux(177)
s(66) =< it(35)*aux(175)
s(80) =< it(40)*aux(21)
s(81) =< it(40)*aux(22)
s(75) =< it(38)*aux(24)
s(76) =< it(38)*aux(22)
s(74) =< it(38)*aux(22)
s(70) =< it(36)*aux(21)
s(71) =< it(36)*aux(19)
s(69) =< it(36)*aux(19)
s(78) =< s(81)
s(77) =< s(80)
s(73) =< s(76)
s(72) =< s(75)
s(68) =< s(71)
s(67) =< s(70)

  with precondition: [B=6,V_h_0>=2,V_right_0>=0,V_left_0>=1,V_52>=V_right_0+2,V_52>=V_left_0+1] 

* Chain [[35,36,38,40],46,57,[43,49,55,59],60]: 3*it(35)+3*it(36)+3*it(38)+15*it(40)+1*s(65)+1*s(66)+3*s(67)+3*s(68)+1*s(69)+4*s(72)+2*s(73)+1*s(74)+12*s(77)+12*s(78)+3*s(127)+6
  Such that:aux(178) =< V_52-V_right_0
aux(179) =< V_h_0
aux(180) =< V_left_0
it(40) =< aux(179)
s(127) =< aux(180)
it(35) =< aux(178)
it(36) =< aux(178)
it(35) =< aux(179)
it(36) =< aux(179)
it(38) =< aux(179)
it(35) =< aux(180)
it(38) =< aux(180)
aux(21) =< aux(180)+1
aux(22) =< aux(178)+1
aux(24) =< aux(180)
aux(19) =< aux(178)
s(65) =< it(35)*aux(180)
s(66) =< it(35)*aux(178)
s(80) =< it(40)*aux(21)
s(81) =< it(40)*aux(22)
s(75) =< it(38)*aux(24)
s(76) =< it(38)*aux(22)
s(74) =< it(38)*aux(22)
s(70) =< it(36)*aux(21)
s(71) =< it(36)*aux(19)
s(69) =< it(36)*aux(19)
s(78) =< s(81)
s(77) =< s(80)
s(73) =< s(76)
s(72) =< s(75)
s(68) =< s(71)
s(67) =< s(70)

  with precondition: [B=6,V_h_0>=4,V_right_0>=0,V_left_0>=1,V_52>=V_right_0+2,V_52>=V_left_0+1] 

* Chain [[35,36,38,40],46,57,60]: 3*it(35)+3*it(36)+3*it(38)+3*it(40)+1*s(65)+1*s(66)+3*s(67)+3*s(68)+1*s(69)+4*s(72)+2*s(73)+1*s(74)+12*s(77)+12*s(78)+3*s(127)+6
  Such that:aux(181) =< V_52-V_right_0
aux(182) =< V_h_0
aux(183) =< V_left_0
s(127) =< aux(183)
it(35) =< aux(181)
it(36) =< aux(181)
it(35) =< aux(182)
it(36) =< aux(182)
it(38) =< aux(182)
it(40) =< aux(182)
it(35) =< aux(183)
it(38) =< aux(183)
aux(21) =< aux(183)+1
aux(22) =< aux(181)+1
aux(24) =< aux(183)
aux(19) =< aux(181)
s(65) =< it(35)*aux(183)
s(66) =< it(35)*aux(181)
s(80) =< it(40)*aux(21)
s(81) =< it(40)*aux(22)
s(75) =< it(38)*aux(24)
s(76) =< it(38)*aux(22)
s(74) =< it(38)*aux(22)
s(70) =< it(36)*aux(21)
s(71) =< it(36)*aux(19)
s(69) =< it(36)*aux(19)
s(78) =< s(81)
s(77) =< s(80)
s(73) =< s(76)
s(72) =< s(75)
s(68) =< s(71)
s(67) =< s(70)

  with precondition: [B=6,V_h_0>=3,V_right_0>=0,V_left_0>=1,V_52>=V_right_0+2,V_52>=V_left_0+1] 

* Chain [[35,36,38,40],46,53,[43,49,55,59],60]: 3*it(35)+3*it(36)+3*it(38)+15*it(40)+1*s(65)+1*s(66)+3*s(67)+3*s(68)+1*s(69)+4*s(72)+2*s(73)+1*s(74)+12*s(77)+12*s(78)+3*s(127)+6
  Such that:aux(184) =< V_52-V_right_0
aux(185) =< V_h_0
aux(186) =< V_left_0
it(40) =< aux(185)
s(127) =< aux(186)
it(35) =< aux(184)
it(36) =< aux(184)
it(35) =< aux(185)
it(36) =< aux(185)
it(38) =< aux(185)
it(35) =< aux(186)
it(38) =< aux(186)
aux(21) =< aux(186)+1
aux(22) =< aux(184)+1
aux(24) =< aux(186)
aux(19) =< aux(184)
s(65) =< it(35)*aux(186)
s(66) =< it(35)*aux(184)
s(80) =< it(40)*aux(21)
s(81) =< it(40)*aux(22)
s(75) =< it(38)*aux(24)
s(76) =< it(38)*aux(22)
s(74) =< it(38)*aux(22)
s(70) =< it(36)*aux(21)
s(71) =< it(36)*aux(19)
s(69) =< it(36)*aux(19)
s(78) =< s(81)
s(77) =< s(80)
s(73) =< s(76)
s(72) =< s(75)
s(68) =< s(71)
s(67) =< s(70)

  with precondition: [B=6,V_h_0>=4,V_right_0>=0,V_left_0>=1,V_52>=V_right_0+2,V_52>=V_left_0+1] 

* Chain [[35,36,38,40],46,53,60]: 3*it(35)+3*it(36)+3*it(38)+3*it(40)+1*s(65)+1*s(66)+3*s(67)+3*s(68)+1*s(69)+4*s(72)+2*s(73)+1*s(74)+12*s(77)+12*s(78)+3*s(127)+6
  Such that:aux(187) =< V_52-V_right_0
aux(188) =< V_h_0
aux(189) =< V_left_0
s(127) =< aux(189)
it(35) =< aux(187)
it(36) =< aux(187)
it(35) =< aux(188)
it(36) =< aux(188)
it(38) =< aux(188)
it(40) =< aux(188)
it(35) =< aux(189)
it(38) =< aux(189)
aux(21) =< aux(189)+1
aux(22) =< aux(187)+1
aux(24) =< aux(189)
aux(19) =< aux(187)
s(65) =< it(35)*aux(189)
s(66) =< it(35)*aux(187)
s(80) =< it(40)*aux(21)
s(81) =< it(40)*aux(22)
s(75) =< it(38)*aux(24)
s(76) =< it(38)*aux(22)
s(74) =< it(38)*aux(22)
s(70) =< it(36)*aux(21)
s(71) =< it(36)*aux(19)
s(69) =< it(36)*aux(19)
s(78) =< s(81)
s(77) =< s(80)
s(73) =< s(76)
s(72) =< s(75)
s(68) =< s(71)
s(67) =< s(70)

  with precondition: [B=6,V_h_0>=3,V_right_0>=0,V_left_0>=1,V_52>=V_right_0+2,V_52>=V_left_0+1] 

* Chain [[35,36,38,40],44,[39,41,45,47],60]: 3*it(35)+3*it(36)+9*it(38)+9*it(40)+1*s(65)+1*s(66)+3*s(67)+3*s(68)+1*s(69)+4*s(72)+2*s(73)+1*s(74)+18*s(77)+12*s(78)+1*s(121)+1*s(124)+1*s(130)+3
  Such that:aux(191) =< V_52-V_right_0
aux(192) =< V_h_0
aux(193) =< V_left_0
s(130) =< aux(193)
it(38) =< aux(192)
it(40) =< aux(192)
it(38) =< aux(193)
aux(21) =< aux(193)+1
aux(24) =< aux(193)
s(121) =< it(38)*aux(193)
s(80) =< it(40)*aux(21)
s(124) =< it(38)*aux(24)
s(77) =< s(80)
it(35) =< aux(191)
it(36) =< aux(191)
it(35) =< aux(192)
it(36) =< aux(192)
it(35) =< aux(193)
aux(22) =< aux(191)+1
aux(19) =< aux(191)
s(65) =< it(35)*aux(193)
s(66) =< it(35)*aux(191)
s(81) =< it(40)*aux(22)
s(75) =< it(38)*aux(24)
s(76) =< it(38)*aux(22)
s(74) =< it(38)*aux(22)
s(70) =< it(36)*aux(21)
s(71) =< it(36)*aux(19)
s(69) =< it(36)*aux(19)
s(78) =< s(81)
s(73) =< s(76)
s(72) =< s(75)
s(68) =< s(71)
s(67) =< s(70)

  with precondition: [B=6,V_h_0>=3,V_right_0>=0,V_left_0>=2,V_52>=V_right_0+2,V_52>=V_left_0+1] 

* Chain [[35,36,38,40],44,[39,41,45,47],57,[43,49,55,59],60]: 3*it(35)+3*it(36)+9*it(38)+21*it(40)+1*s(65)+1*s(66)+3*s(67)+3*s(68)+1*s(69)+4*s(72)+2*s(73)+1*s(74)+18*s(77)+12*s(78)+1*s(121)+1*s(124)+1*s(130)+6
  Such that:aux(195) =< V_52-V_right_0
aux(196) =< V_h_0
aux(197) =< V_left_0
s(130) =< aux(197)
it(40) =< aux(196)
it(38) =< aux(196)
it(38) =< aux(197)
aux(21) =< aux(197)+1
aux(24) =< aux(197)
s(121) =< it(38)*aux(197)
s(80) =< it(40)*aux(21)
s(124) =< it(38)*aux(24)
s(77) =< s(80)
it(35) =< aux(195)
it(36) =< aux(195)
it(35) =< aux(196)
it(36) =< aux(196)
it(35) =< aux(197)
aux(22) =< aux(195)+1
aux(19) =< aux(195)
s(65) =< it(35)*aux(197)
s(66) =< it(35)*aux(195)
s(81) =< it(40)*aux(22)
s(75) =< it(38)*aux(24)
s(76) =< it(38)*aux(22)
s(74) =< it(38)*aux(22)
s(70) =< it(36)*aux(21)
s(71) =< it(36)*aux(19)
s(69) =< it(36)*aux(19)
s(78) =< s(81)
s(73) =< s(76)
s(72) =< s(75)
s(68) =< s(71)
s(67) =< s(70)

  with precondition: [B=6,V_h_0>=5,V_right_0>=0,V_left_0>=2,V_52>=V_right_0+2,V_52>=V_left_0+1] 

* Chain [[35,36,38,40],44,[39,41,45,47],57,60]: 3*it(35)+3*it(36)+9*it(38)+9*it(40)+1*s(65)+1*s(66)+3*s(67)+3*s(68)+1*s(69)+4*s(72)+2*s(73)+1*s(74)+18*s(77)+12*s(78)+1*s(121)+1*s(124)+1*s(130)+6
  Such that:aux(199) =< V_52-V_right_0
aux(200) =< V_h_0
aux(201) =< V_left_0
s(130) =< aux(201)
it(38) =< aux(200)
it(40) =< aux(200)
it(38) =< aux(201)
aux(21) =< aux(201)+1
aux(24) =< aux(201)
s(121) =< it(38)*aux(201)
s(80) =< it(40)*aux(21)
s(124) =< it(38)*aux(24)
s(77) =< s(80)
it(35) =< aux(199)
it(36) =< aux(199)
it(35) =< aux(200)
it(36) =< aux(200)
it(35) =< aux(201)
aux(22) =< aux(199)+1
aux(19) =< aux(199)
s(65) =< it(35)*aux(201)
s(66) =< it(35)*aux(199)
s(81) =< it(40)*aux(22)
s(75) =< it(38)*aux(24)
s(76) =< it(38)*aux(22)
s(74) =< it(38)*aux(22)
s(70) =< it(36)*aux(21)
s(71) =< it(36)*aux(19)
s(69) =< it(36)*aux(19)
s(78) =< s(81)
s(73) =< s(76)
s(72) =< s(75)
s(68) =< s(71)
s(67) =< s(70)

  with precondition: [B=6,V_h_0>=4,V_right_0>=0,V_left_0>=2,V_52>=V_right_0+2,V_52>=V_left_0+1] 

* Chain [[35,36,38,40],44,[39,41,45,47],53,[43,49,55,59],60]: 3*it(35)+3*it(36)+9*it(38)+21*it(40)+1*s(65)+1*s(66)+3*s(67)+3*s(68)+1*s(69)+4*s(72)+2*s(73)+1*s(74)+18*s(77)+12*s(78)+1*s(121)+1*s(124)+1*s(130)+6
  Such that:aux(203) =< V_52-V_right_0
aux(204) =< V_h_0
aux(205) =< V_left_0
s(130) =< aux(205)
it(40) =< aux(204)
it(38) =< aux(204)
it(38) =< aux(205)
aux(21) =< aux(205)+1
aux(24) =< aux(205)
s(121) =< it(38)*aux(205)
s(80) =< it(40)*aux(21)
s(124) =< it(38)*aux(24)
s(77) =< s(80)
it(35) =< aux(203)
it(36) =< aux(203)
it(35) =< aux(204)
it(36) =< aux(204)
it(35) =< aux(205)
aux(22) =< aux(203)+1
aux(19) =< aux(203)
s(65) =< it(35)*aux(205)
s(66) =< it(35)*aux(203)
s(81) =< it(40)*aux(22)
s(75) =< it(38)*aux(24)
s(76) =< it(38)*aux(22)
s(74) =< it(38)*aux(22)
s(70) =< it(36)*aux(21)
s(71) =< it(36)*aux(19)
s(69) =< it(36)*aux(19)
s(78) =< s(81)
s(73) =< s(76)
s(72) =< s(75)
s(68) =< s(71)
s(67) =< s(70)

  with precondition: [B=6,V_h_0>=5,V_right_0>=0,V_left_0>=2,V_52>=V_right_0+2,V_52>=V_left_0+1] 

* Chain [[35,36,38,40],44,[39,41,45,47],53,60]: 3*it(35)+3*it(36)+9*it(38)+9*it(40)+1*s(65)+1*s(66)+3*s(67)+3*s(68)+1*s(69)+4*s(72)+2*s(73)+1*s(74)+18*s(77)+12*s(78)+1*s(121)+1*s(124)+1*s(130)+6
  Such that:aux(207) =< V_52-V_right_0
aux(208) =< V_h_0
aux(209) =< V_left_0
s(130) =< aux(209)
it(38) =< aux(208)
it(40) =< aux(208)
it(38) =< aux(209)
aux(21) =< aux(209)+1
aux(24) =< aux(209)
s(121) =< it(38)*aux(209)
s(80) =< it(40)*aux(21)
s(124) =< it(38)*aux(24)
s(77) =< s(80)
it(35) =< aux(207)
it(36) =< aux(207)
it(35) =< aux(208)
it(36) =< aux(208)
it(35) =< aux(209)
aux(22) =< aux(207)+1
aux(19) =< aux(207)
s(65) =< it(35)*aux(209)
s(66) =< it(35)*aux(207)
s(81) =< it(40)*aux(22)
s(75) =< it(38)*aux(24)
s(76) =< it(38)*aux(22)
s(74) =< it(38)*aux(22)
s(70) =< it(36)*aux(21)
s(71) =< it(36)*aux(19)
s(69) =< it(36)*aux(19)
s(78) =< s(81)
s(73) =< s(76)
s(72) =< s(75)
s(68) =< s(71)
s(67) =< s(70)

  with precondition: [B=6,V_h_0>=4,V_right_0>=0,V_left_0>=2,V_52>=V_right_0+2,V_52>=V_left_0+1] 

* Chain [[35,36,38,40],44,60]: 3*it(35)+3*it(36)+3*it(38)+3*it(40)+1*s(65)+1*s(66)+3*s(67)+3*s(68)+1*s(69)+4*s(72)+2*s(73)+1*s(74)+12*s(77)+12*s(78)+1*s(130)+3
  Such that:aux(210) =< V_52-V_right_0
aux(211) =< V_h_0
aux(212) =< V_left_0
s(130) =< aux(212)
it(35) =< aux(210)
it(36) =< aux(210)
it(35) =< aux(211)
it(36) =< aux(211)
it(38) =< aux(211)
it(40) =< aux(211)
it(35) =< aux(212)
it(38) =< aux(212)
aux(21) =< aux(212)+1
aux(22) =< aux(210)+1
aux(24) =< aux(212)
aux(19) =< aux(210)
s(65) =< it(35)*aux(212)
s(66) =< it(35)*aux(210)
s(80) =< it(40)*aux(21)
s(81) =< it(40)*aux(22)
s(75) =< it(38)*aux(24)
s(76) =< it(38)*aux(22)
s(74) =< it(38)*aux(22)
s(70) =< it(36)*aux(21)
s(71) =< it(36)*aux(19)
s(69) =< it(36)*aux(19)
s(78) =< s(81)
s(77) =< s(80)
s(73) =< s(76)
s(72) =< s(75)
s(68) =< s(71)
s(67) =< s(70)

  with precondition: [B=6,V_h_0>=2,V_right_0>=0,V_left_0>=2,V_52>=V_right_0+2,V_52>=V_left_0+1] 

* Chain [[35,36,38,40],44,57,[43,49,55,59],60]: 3*it(35)+3*it(36)+3*it(38)+15*it(40)+1*s(65)+1*s(66)+3*s(67)+3*s(68)+1*s(69)+4*s(72)+2*s(73)+1*s(74)+12*s(77)+12*s(78)+1*s(130)+6
  Such that:aux(213) =< V_52-V_right_0
aux(214) =< V_h_0
aux(215) =< V_left_0
s(130) =< aux(215)
it(40) =< aux(214)
it(35) =< aux(213)
it(36) =< aux(213)
it(35) =< aux(214)
it(36) =< aux(214)
it(38) =< aux(214)
it(35) =< aux(215)
it(38) =< aux(215)
aux(21) =< aux(215)+1
aux(22) =< aux(213)+1
aux(24) =< aux(215)
aux(19) =< aux(213)
s(65) =< it(35)*aux(215)
s(66) =< it(35)*aux(213)
s(80) =< it(40)*aux(21)
s(81) =< it(40)*aux(22)
s(75) =< it(38)*aux(24)
s(76) =< it(38)*aux(22)
s(74) =< it(38)*aux(22)
s(70) =< it(36)*aux(21)
s(71) =< it(36)*aux(19)
s(69) =< it(36)*aux(19)
s(78) =< s(81)
s(77) =< s(80)
s(73) =< s(76)
s(72) =< s(75)
s(68) =< s(71)
s(67) =< s(70)

  with precondition: [B=6,V_h_0>=4,V_right_0>=0,V_left_0>=2,V_52>=V_right_0+2,V_52>=V_left_0+1] 

* Chain [[35,36,38,40],44,57,60]: 3*it(35)+3*it(36)+3*it(38)+3*it(40)+1*s(65)+1*s(66)+3*s(67)+3*s(68)+1*s(69)+4*s(72)+2*s(73)+1*s(74)+12*s(77)+12*s(78)+1*s(130)+6
  Such that:aux(216) =< V_52-V_right_0
aux(217) =< V_h_0
aux(218) =< V_left_0
s(130) =< aux(218)
it(35) =< aux(216)
it(36) =< aux(216)
it(35) =< aux(217)
it(36) =< aux(217)
it(38) =< aux(217)
it(40) =< aux(217)
it(35) =< aux(218)
it(38) =< aux(218)
aux(21) =< aux(218)+1
aux(22) =< aux(216)+1
aux(24) =< aux(218)
aux(19) =< aux(216)
s(65) =< it(35)*aux(218)
s(66) =< it(35)*aux(216)
s(80) =< it(40)*aux(21)
s(81) =< it(40)*aux(22)
s(75) =< it(38)*aux(24)
s(76) =< it(38)*aux(22)
s(74) =< it(38)*aux(22)
s(70) =< it(36)*aux(21)
s(71) =< it(36)*aux(19)
s(69) =< it(36)*aux(19)
s(78) =< s(81)
s(77) =< s(80)
s(73) =< s(76)
s(72) =< s(75)
s(68) =< s(71)
s(67) =< s(70)

  with precondition: [B=6,V_h_0>=3,V_right_0>=0,V_left_0>=2,V_52>=V_right_0+2,V_52>=V_left_0+1] 

* Chain [[35,36,38,40],44,53,[43,49,55,59],60]: 3*it(35)+3*it(36)+3*it(38)+15*it(40)+1*s(65)+1*s(66)+3*s(67)+3*s(68)+1*s(69)+4*s(72)+2*s(73)+1*s(74)+12*s(77)+12*s(78)+1*s(130)+6
  Such that:aux(219) =< V_52-V_right_0
aux(220) =< V_h_0
aux(221) =< V_left_0
s(130) =< aux(221)
it(40) =< aux(220)
it(35) =< aux(219)
it(36) =< aux(219)
it(35) =< aux(220)
it(36) =< aux(220)
it(38) =< aux(220)
it(35) =< aux(221)
it(38) =< aux(221)
aux(21) =< aux(221)+1
aux(22) =< aux(219)+1
aux(24) =< aux(221)
aux(19) =< aux(219)
s(65) =< it(35)*aux(221)
s(66) =< it(35)*aux(219)
s(80) =< it(40)*aux(21)
s(81) =< it(40)*aux(22)
s(75) =< it(38)*aux(24)
s(76) =< it(38)*aux(22)
s(74) =< it(38)*aux(22)
s(70) =< it(36)*aux(21)
s(71) =< it(36)*aux(19)
s(69) =< it(36)*aux(19)
s(78) =< s(81)
s(77) =< s(80)
s(73) =< s(76)
s(72) =< s(75)
s(68) =< s(71)
s(67) =< s(70)

  with precondition: [B=6,V_h_0>=4,V_right_0>=0,V_left_0>=2,V_52>=V_right_0+2,V_52>=V_left_0+1] 

* Chain [[35,36,38,40],44,53,60]: 3*it(35)+3*it(36)+3*it(38)+3*it(40)+1*s(65)+1*s(66)+3*s(67)+3*s(68)+1*s(69)+4*s(72)+2*s(73)+1*s(74)+12*s(77)+12*s(78)+1*s(130)+6
  Such that:aux(222) =< V_52-V_right_0
aux(223) =< V_h_0
aux(224) =< V_left_0
s(130) =< aux(224)
it(35) =< aux(222)
it(36) =< aux(222)
it(35) =< aux(223)
it(36) =< aux(223)
it(38) =< aux(223)
it(40) =< aux(223)
it(35) =< aux(224)
it(38) =< aux(224)
aux(21) =< aux(224)+1
aux(22) =< aux(222)+1
aux(24) =< aux(224)
aux(19) =< aux(222)
s(65) =< it(35)*aux(224)
s(66) =< it(35)*aux(222)
s(80) =< it(40)*aux(21)
s(81) =< it(40)*aux(22)
s(75) =< it(38)*aux(24)
s(76) =< it(38)*aux(22)
s(74) =< it(38)*aux(22)
s(70) =< it(36)*aux(21)
s(71) =< it(36)*aux(19)
s(69) =< it(36)*aux(19)
s(78) =< s(81)
s(77) =< s(80)
s(73) =< s(76)
s(72) =< s(75)
s(68) =< s(71)
s(67) =< s(70)

  with precondition: [B=6,V_h_0>=3,V_right_0>=0,V_left_0>=2,V_52>=V_right_0+2,V_52>=V_left_0+1] 

* Chain [60]: 0
  with precondition: [B=6,0>=V_h_0] 

* Chain [56,[43,49,55,59],60]: 12*it(43)+3
  Such that:aux(9) =< V_h_0
it(43) =< aux(9)

  with precondition: [B=6,V_h_0>=2,V_right_0>=0,V_left_0>=1,V_52>=V_right_0+2,V_52>=V_left_0+1] 

* Chain [56,60]: 3
  with precondition: [V_h_0=1,B=6,V_right_0>=0,V_left_0>=1,V_52>=V_right_0+2,V_52>=V_left_0+1] 

* Chain [52,[37,42,51,54],60]: 6*it(37)+6*it(42)+1*s(97)+6*s(98)+1*s(100)+3*s(103)+3
  Such that:aux(54) =< V_h_0
aux(56) =< V_52-V_right_0
it(37) =< aux(56)
it(37) =< aux(54)
it(42) =< aux(54)
aux(46) =< aux(56)+1
aux(47) =< aux(56)
s(97) =< it(37)*aux(56)
s(99) =< it(42)*aux(46)
s(100) =< it(37)*aux(47)
s(98) =< s(99)
s(103) =< aux(56)

  with precondition: [B=6,V_h_0>=2,V_right_0>=0,V_left_0>=1,V_52>=V_right_0+2,V_52>=V_left_0+1] 

* Chain [52,[37,42,51,54],58,[43,49,55,59],60]: 6*it(37)+18*it(42)+1*s(97)+6*s(98)+1*s(100)+3*s(103)+6
  Such that:aux(61) =< V_h_0
aux(62) =< V_52-V_right_0
it(42) =< aux(61)
it(37) =< aux(62)
it(37) =< aux(61)
aux(46) =< aux(62)+1
aux(47) =< aux(62)
s(97) =< it(37)*aux(62)
s(99) =< it(42)*aux(46)
s(100) =< it(37)*aux(47)
s(98) =< s(99)
s(103) =< aux(62)

  with precondition: [B=6,V_h_0>=4,V_right_0>=0,V_left_0>=1,V_52>=V_right_0+2,V_52>=V_left_0+1] 

* Chain [52,[37,42,51,54],58,60]: 6*it(37)+6*it(42)+1*s(97)+6*s(98)+1*s(100)+3*s(103)+6
  Such that:aux(67) =< V_h_0
aux(68) =< V_52-V_right_0
it(37) =< aux(68)
it(37) =< aux(67)
it(42) =< aux(67)
aux(46) =< aux(68)+1
aux(47) =< aux(68)
s(97) =< it(37)*aux(68)
s(99) =< it(42)*aux(46)
s(100) =< it(37)*aux(47)
s(98) =< s(99)
s(103) =< aux(68)

  with precondition: [B=6,V_h_0>=3,V_right_0>=0,V_left_0>=1,V_52>=V_right_0+2,V_52>=V_left_0+1] 

* Chain [52,[37,42,51,54],48,[43,49,55,59],60]: 6*it(37)+18*it(42)+1*s(97)+6*s(98)+1*s(100)+3*s(103)+6
  Such that:aux(73) =< V_h_0
aux(74) =< V_52-V_right_0
it(42) =< aux(73)
it(37) =< aux(74)
it(37) =< aux(73)
aux(46) =< aux(74)+1
aux(47) =< aux(74)
s(97) =< it(37)*aux(74)
s(99) =< it(42)*aux(46)
s(100) =< it(37)*aux(47)
s(98) =< s(99)
s(103) =< aux(74)

  with precondition: [B=6,V_h_0>=4,V_right_0>=0,V_left_0>=1,V_52>=V_right_0+2,V_52>=V_left_0+1] 

* Chain [52,[37,42,51,54],48,60]: 6*it(37)+6*it(42)+1*s(97)+6*s(98)+1*s(100)+3*s(103)+6
  Such that:aux(79) =< V_h_0
aux(80) =< V_52-V_right_0
it(37) =< aux(80)
it(37) =< aux(79)
it(42) =< aux(79)
aux(46) =< aux(80)+1
aux(47) =< aux(80)
s(97) =< it(37)*aux(80)
s(99) =< it(42)*aux(46)
s(100) =< it(37)*aux(47)
s(98) =< s(99)
s(103) =< aux(80)

  with precondition: [B=6,V_h_0>=3,V_right_0>=0,V_left_0>=1,V_52>=V_right_0+2,V_52>=V_left_0+1] 

* Chain [52,60]: 3*s(103)+3
  Such that:aux(55) =< V_52-V_right_0
s(103) =< aux(55)

  with precondition: [V_h_0=1,B=6,V_right_0>=0,V_left_0>=1,V_52>=V_right_0+2,V_52>=V_left_0+1] 

* Chain [52,58,[43,49,55,59],60]: 12*it(43)+3*s(103)+6
  Such that:aux(55) =< V_52-V_right_0
aux(9) =< V_h_0
it(43) =< aux(9)
s(103) =< aux(55)

  with precondition: [B=6,V_h_0>=3,V_right_0>=0,V_left_0>=1,V_52>=V_right_0+2,V_52>=V_left_0+1] 

* Chain [52,58,60]: 3*s(103)+6
  Such that:aux(55) =< V_52-V_right_0
s(103) =< aux(55)

  with precondition: [V_h_0=2,B=6,V_right_0>=0,V_left_0>=1,V_52>=V_right_0+2,V_52>=V_left_0+1] 

* Chain [52,48,[43,49,55,59],60]: 12*it(43)+3*s(103)+6
  Such that:aux(55) =< V_52-V_right_0
aux(9) =< V_h_0
it(43) =< aux(9)
s(103) =< aux(55)

  with precondition: [B=6,V_h_0>=3,V_right_0>=0,V_left_0>=1,V_52>=V_right_0+2,V_52>=V_left_0+1] 

* Chain [52,48,60]: 3*s(103)+6
  Such that:aux(55) =< V_52-V_right_0
s(103) =< aux(55)

  with precondition: [V_h_0=2,B=6,V_right_0>=0,V_left_0>=1,V_52>=V_right_0+2,V_52>=V_left_0+1] 

* Chain [50,[37,42,51,54],60]: 6*it(37)+6*it(42)+1*s(97)+6*s(98)+1*s(100)+1*s(106)+3
  Such that:aux(54) =< V_h_0
aux(99) =< V_52-V_right_0
s(106) =< aux(99)
it(37) =< aux(99)
it(37) =< aux(54)
it(42) =< aux(54)
aux(46) =< aux(99)+1
aux(47) =< aux(99)
s(97) =< it(37)*aux(99)
s(99) =< it(42)*aux(46)
s(100) =< it(37)*aux(47)
s(98) =< s(99)

  with precondition: [B=6,V_h_0>=2,V_right_0>=0,V_left_0>=1,V_52>=V_right_0+3,V_52>=V_left_0+1] 

* Chain [50,[37,42,51,54],58,[43,49,55,59],60]: 6*it(37)+18*it(42)+1*s(97)+6*s(98)+1*s(100)+1*s(106)+6
  Such that:aux(61) =< V_h_0
aux(103) =< V_52-V_right_0
s(106) =< aux(103)
it(42) =< aux(61)
it(37) =< aux(103)
it(37) =< aux(61)
aux(46) =< aux(103)+1
aux(47) =< aux(103)
s(97) =< it(37)*aux(103)
s(99) =< it(42)*aux(46)
s(100) =< it(37)*aux(47)
s(98) =< s(99)

  with precondition: [B=6,V_h_0>=4,V_right_0>=0,V_left_0>=1,V_52>=V_right_0+3,V_52>=V_left_0+1] 

* Chain [50,[37,42,51,54],58,60]: 6*it(37)+6*it(42)+1*s(97)+6*s(98)+1*s(100)+1*s(106)+6
  Such that:aux(67) =< V_h_0
aux(107) =< V_52-V_right_0
s(106) =< aux(107)
it(37) =< aux(107)
it(37) =< aux(67)
it(42) =< aux(67)
aux(46) =< aux(107)+1
aux(47) =< aux(107)
s(97) =< it(37)*aux(107)
s(99) =< it(42)*aux(46)
s(100) =< it(37)*aux(47)
s(98) =< s(99)

  with precondition: [B=6,V_h_0>=3,V_right_0>=0,V_left_0>=1,V_52>=V_right_0+3,V_52>=V_left_0+1] 

* Chain [50,[37,42,51,54],48,[43,49,55,59],60]: 6*it(37)+18*it(42)+1*s(97)+6*s(98)+1*s(100)+1*s(106)+6
  Such that:aux(73) =< V_h_0
aux(111) =< V_52-V_right_0
s(106) =< aux(111)
it(42) =< aux(73)
it(37) =< aux(111)
it(37) =< aux(73)
aux(46) =< aux(111)+1
aux(47) =< aux(111)
s(97) =< it(37)*aux(111)
s(99) =< it(42)*aux(46)
s(100) =< it(37)*aux(47)
s(98) =< s(99)

  with precondition: [B=6,V_h_0>=4,V_right_0>=0,V_left_0>=1,V_52>=V_right_0+3,V_52>=V_left_0+1] 

* Chain [50,[37,42,51,54],48,60]: 6*it(37)+6*it(42)+1*s(97)+6*s(98)+1*s(100)+1*s(106)+6
  Such that:aux(79) =< V_h_0
aux(115) =< V_52-V_right_0
s(106) =< aux(115)
it(37) =< aux(115)
it(37) =< aux(79)
it(42) =< aux(79)
aux(46) =< aux(115)+1
aux(47) =< aux(115)
s(97) =< it(37)*aux(115)
s(99) =< it(42)*aux(46)
s(100) =< it(37)*aux(47)
s(98) =< s(99)

  with precondition: [B=6,V_h_0>=3,V_right_0>=0,V_left_0>=1,V_52>=V_right_0+3,V_52>=V_left_0+1] 

* Chain [50,60]: 1*s(106)+3
  Such that:s(106) =< V_52-V_right_0

  with precondition: [V_h_0=1,B=6,V_right_0>=0,V_left_0>=1,V_52>=V_right_0+3,V_52>=V_left_0+1] 

* Chain [50,58,[43,49,55,59],60]: 12*it(43)+1*s(106)+6
  Such that:s(106) =< V_52-V_right_0
aux(9) =< V_h_0
it(43) =< aux(9)

  with precondition: [B=6,V_h_0>=3,V_right_0>=0,V_left_0>=1,V_52>=V_right_0+3,V_52>=V_left_0+1] 

* Chain [50,58,60]: 1*s(106)+6
  Such that:s(106) =< V_52-V_right_0

  with precondition: [V_h_0=2,B=6,V_right_0>=0,V_left_0>=1,V_52>=V_right_0+3,V_52>=V_left_0+1] 

* Chain [50,48,[43,49,55,59],60]: 12*it(43)+1*s(106)+6
  Such that:s(106) =< V_52-V_right_0
aux(9) =< V_h_0
it(43) =< aux(9)

  with precondition: [B=6,V_h_0>=3,V_right_0>=0,V_left_0>=1,V_52>=V_right_0+3,V_52>=V_left_0+1] 

* Chain [50,48,60]: 1*s(106)+6
  Such that:s(106) =< V_52-V_right_0

  with precondition: [V_h_0=2,B=6,V_right_0>=0,V_left_0>=1,V_52>=V_right_0+3,V_52>=V_left_0+1] 

* Chain [46,[39,41,45,47],60]: 6*it(39)+6*it(41)+1*s(121)+6*s(122)+1*s(124)+3*s(127)+3
  Such that:aux(144) =< V_h_0
aux(147) =< V_left_0
it(39) =< aux(144)
it(41) =< aux(144)
it(39) =< aux(147)
aux(137) =< aux(147)+1
aux(138) =< aux(147)
s(121) =< it(39)*aux(147)
s(123) =< it(41)*aux(137)
s(124) =< it(39)*aux(138)
s(122) =< s(123)
s(127) =< aux(147)

  with precondition: [B=6,V_h_0>=2,V_right_0>=0,V_left_0>=1,V_52>=V_right_0+2,V_52>=V_left_0+1] 

* Chain [46,[39,41,45,47],57,[43,49,55,59],60]: 6*it(39)+18*it(41)+1*s(121)+6*s(122)+1*s(124)+3*s(127)+6
  Such that:aux(151) =< V_h_0
aux(153) =< V_left_0
it(41) =< aux(151)
it(39) =< aux(151)
it(39) =< aux(153)
aux(137) =< aux(153)+1
aux(138) =< aux(153)
s(121) =< it(39)*aux(153)
s(123) =< it(41)*aux(137)
s(124) =< it(39)*aux(138)
s(122) =< s(123)
s(127) =< aux(153)

  with precondition: [B=6,V_h_0>=4,V_right_0>=0,V_left_0>=1,V_52>=V_right_0+2,V_52>=V_left_0+1] 

* Chain [46,[39,41,45,47],57,60]: 6*it(39)+6*it(41)+1*s(121)+6*s(122)+1*s(124)+3*s(127)+6
  Such that:aux(157) =< V_h_0
aux(159) =< V_left_0
it(39) =< aux(157)
it(41) =< aux(157)
it(39) =< aux(159)
aux(137) =< aux(159)+1
aux(138) =< aux(159)
s(121) =< it(39)*aux(159)
s(123) =< it(41)*aux(137)
s(124) =< it(39)*aux(138)
s(122) =< s(123)
s(127) =< aux(159)

  with precondition: [B=6,V_h_0>=3,V_right_0>=0,V_left_0>=1,V_52>=V_right_0+2,V_52>=V_left_0+1] 

* Chain [46,[39,41,45,47],53,[43,49,55,59],60]: 6*it(39)+18*it(41)+1*s(121)+6*s(122)+1*s(124)+3*s(127)+6
  Such that:aux(163) =< V_h_0
aux(165) =< V_left_0
it(41) =< aux(163)
it(39) =< aux(163)
it(39) =< aux(165)
aux(137) =< aux(165)+1
aux(138) =< aux(165)
s(121) =< it(39)*aux(165)
s(123) =< it(41)*aux(137)
s(124) =< it(39)*aux(138)
s(122) =< s(123)
s(127) =< aux(165)

  with precondition: [B=6,V_h_0>=4,V_right_0>=0,V_left_0>=1,V_52>=V_right_0+2,V_52>=V_left_0+1] 

* Chain [46,[39,41,45,47],53,60]: 6*it(39)+6*it(41)+1*s(121)+6*s(122)+1*s(124)+3*s(127)+6
  Such that:aux(169) =< V_h_0
aux(171) =< V_left_0
it(39) =< aux(169)
it(41) =< aux(169)
it(39) =< aux(171)
aux(137) =< aux(171)+1
aux(138) =< aux(171)
s(121) =< it(39)*aux(171)
s(123) =< it(41)*aux(137)
s(124) =< it(39)*aux(138)
s(122) =< s(123)
s(127) =< aux(171)

  with precondition: [B=6,V_h_0>=3,V_right_0>=0,V_left_0>=1,V_52>=V_right_0+2,V_52>=V_left_0+1] 

* Chain [46,60]: 3*s(127)+3
  Such that:aux(146) =< V_left_0
s(127) =< aux(146)

  with precondition: [V_h_0=1,B=6,V_right_0>=0,V_left_0>=1,V_52>=V_right_0+2,V_52>=V_left_0+1] 

* Chain [46,57,[43,49,55,59],60]: 12*it(43)+3*s(127)+6
  Such that:aux(9) =< V_h_0
aux(146) =< V_left_0
it(43) =< aux(9)
s(127) =< aux(146)

  with precondition: [B=6,V_h_0>=3,V_right_0>=0,V_left_0>=1,V_52>=V_right_0+2,V_52>=V_left_0+1] 

* Chain [46,57,60]: 3*s(127)+6
  Such that:aux(146) =< V_left_0
s(127) =< aux(146)

  with precondition: [V_h_0=2,B=6,V_right_0>=0,V_left_0>=1,V_52>=V_right_0+2,V_52>=V_left_0+1] 

* Chain [46,53,[43,49,55,59],60]: 12*it(43)+3*s(127)+6
  Such that:aux(9) =< V_h_0
aux(146) =< V_left_0
it(43) =< aux(9)
s(127) =< aux(146)

  with precondition: [B=6,V_h_0>=3,V_right_0>=0,V_left_0>=1,V_52>=V_right_0+2,V_52>=V_left_0+1] 

* Chain [46,53,60]: 3*s(127)+6
  Such that:aux(146) =< V_left_0
s(127) =< aux(146)

  with precondition: [V_h_0=2,B=6,V_right_0>=0,V_left_0>=1,V_52>=V_right_0+2,V_52>=V_left_0+1] 

* Chain [44,[39,41,45,47],60]: 6*it(39)+6*it(41)+1*s(121)+6*s(122)+1*s(124)+1*s(130)+3
  Such that:aux(144) =< V_h_0
aux(190) =< V_left_0
s(130) =< aux(190)
it(39) =< aux(144)
it(41) =< aux(144)
it(39) =< aux(190)
aux(137) =< aux(190)+1
aux(138) =< aux(190)
s(121) =< it(39)*aux(190)
s(123) =< it(41)*aux(137)
s(124) =< it(39)*aux(138)
s(122) =< s(123)

  with precondition: [B=6,V_h_0>=2,V_right_0>=0,V_left_0>=2,V_52>=V_right_0+2,V_52>=V_left_0+1] 

* Chain [44,[39,41,45,47],57,[43,49,55,59],60]: 6*it(39)+18*it(41)+1*s(121)+6*s(122)+1*s(124)+1*s(130)+6
  Such that:aux(151) =< V_h_0
aux(194) =< V_left_0
s(130) =< aux(194)
it(41) =< aux(151)
it(39) =< aux(151)
it(39) =< aux(194)
aux(137) =< aux(194)+1
aux(138) =< aux(194)
s(121) =< it(39)*aux(194)
s(123) =< it(41)*aux(137)
s(124) =< it(39)*aux(138)
s(122) =< s(123)

  with precondition: [B=6,V_h_0>=4,V_right_0>=0,V_left_0>=2,V_52>=V_right_0+2,V_52>=V_left_0+1] 

* Chain [44,[39,41,45,47],57,60]: 6*it(39)+6*it(41)+1*s(121)+6*s(122)+1*s(124)+1*s(130)+6
  Such that:aux(157) =< V_h_0
aux(198) =< V_left_0
s(130) =< aux(198)
it(39) =< aux(157)
it(41) =< aux(157)
it(39) =< aux(198)
aux(137) =< aux(198)+1
aux(138) =< aux(198)
s(121) =< it(39)*aux(198)
s(123) =< it(41)*aux(137)
s(124) =< it(39)*aux(138)
s(122) =< s(123)

  with precondition: [B=6,V_h_0>=3,V_right_0>=0,V_left_0>=2,V_52>=V_right_0+2,V_52>=V_left_0+1] 

* Chain [44,[39,41,45,47],53,[43,49,55,59],60]: 6*it(39)+18*it(41)+1*s(121)+6*s(122)+1*s(124)+1*s(130)+6
  Such that:aux(163) =< V_h_0
aux(202) =< V_left_0
s(130) =< aux(202)
it(41) =< aux(163)
it(39) =< aux(163)
it(39) =< aux(202)
aux(137) =< aux(202)+1
aux(138) =< aux(202)
s(121) =< it(39)*aux(202)
s(123) =< it(41)*aux(137)
s(124) =< it(39)*aux(138)
s(122) =< s(123)

  with precondition: [B=6,V_h_0>=4,V_right_0>=0,V_left_0>=2,V_52>=V_right_0+2,V_52>=V_left_0+1] 

* Chain [44,[39,41,45,47],53,60]: 6*it(39)+6*it(41)+1*s(121)+6*s(122)+1*s(124)+1*s(130)+6
  Such that:aux(169) =< V_h_0
aux(206) =< V_left_0
s(130) =< aux(206)
it(39) =< aux(169)
it(41) =< aux(169)
it(39) =< aux(206)
aux(137) =< aux(206)+1
aux(138) =< aux(206)
s(121) =< it(39)*aux(206)
s(123) =< it(41)*aux(137)
s(124) =< it(39)*aux(138)
s(122) =< s(123)

  with precondition: [B=6,V_h_0>=3,V_right_0>=0,V_left_0>=2,V_52>=V_right_0+2,V_52>=V_left_0+1] 

* Chain [44,60]: 1*s(130)+3
  Such that:s(130) =< V_left_0

  with precondition: [V_h_0=1,B=6,V_right_0>=0,V_left_0>=2,V_52>=V_right_0+2,V_52>=V_left_0+1] 

* Chain [44,57,[43,49,55,59],60]: 12*it(43)+1*s(130)+6
  Such that:aux(9) =< V_h_0
s(130) =< V_left_0
it(43) =< aux(9)

  with precondition: [B=6,V_h_0>=3,V_right_0>=0,V_left_0>=2,V_52>=V_right_0+2,V_52>=V_left_0+1] 

* Chain [44,57,60]: 1*s(130)+6
  Such that:s(130) =< V_left_0

  with precondition: [V_h_0=2,B=6,V_right_0>=0,V_left_0>=2,V_52>=V_right_0+2,V_52>=V_left_0+1] 

* Chain [44,53,[43,49,55,59],60]: 12*it(43)+1*s(130)+6
  Such that:aux(9) =< V_h_0
s(130) =< V_left_0
it(43) =< aux(9)

  with precondition: [B=6,V_h_0>=3,V_right_0>=0,V_left_0>=2,V_52>=V_right_0+2,V_52>=V_left_0+1] 

* Chain [44,53,60]: 1*s(130)+6
  Such that:s(130) =< V_left_0

  with precondition: [V_h_0=2,B=6,V_right_0>=0,V_left_0>=2,V_52>=V_right_0+2,V_52>=V_left_0+1] 


#### Cost of chains of eval_bits_bounding_box_bb10_in(V__01,B):
* Chain [62]: 2200*s(1633)+1416*s(1635)+7
  Such that:aux(230) =< V__01
s(1635) =< aux(230)

  with precondition: [V__01>=1] 

* Chain [61]: 1
  with precondition: [0>=V__01] 


#### Cost of chains of eval_bits_bounding_box__critedge_in(V_raster,B):
* Chain [64]: 1*aux(231)+0
  with precondition: [] 

* Chain [63]...: 1*aux(232)+0
  with precondition: [] 


#### Cost of chains of eval_bits_bounding_box_bb0_in(V_raster,B):
* Chain [66]: 2*s(1730)+1
  with precondition: [] 

* Chain [65]...: 1*aux(233)+0
  with precondition: [] 


#### Cost of chains of eval_bits_bounding_box_start(V_height,V_raster,B):
* Chain [68]: 2*s(1735)+1
  with precondition: [] 

* Chain [67]...: 1*s(1736)+0
  with precondition: [] 


Closed-form bounds of eval_bits_bounding_box_start(V_height,V_raster,B): 
-------------------------------------
* Chain [68] with precondition: [] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [67]... with precondition: [] 
    - Upper bound: inf 
    - Complexity: infinity 

### Maximum cost of eval_bits_bounding_box_start(V_height,V_raster,B): inf 
Asymptotic class: infinity 

Time statistics: 
-------------------------------------
* Partial evaluation computed in 254 ms.
* Invariants computed in 1155 ms.
   - Backward Invariants 513 ms.
   - Transitive Invariants 58 ms.
* Refinement performed in 3022 ms.
* Termination proved in 70 ms.
* Upper bounds computed in 7538 ms.
   - Equation cost structures 656 ms.
   - Phase cost structures 1264 ms.
   - Chain cost structures 1459 ms.
   - Solving cost expressions 0 ms.
* Total analysis performed in 12314 ms.


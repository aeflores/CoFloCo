Warning: Ignored call to eval_dijkstra_stop/1 in equation eval_dijkstra_bb14_in/1 

Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. recursive  : [eval_dijkstra_bb1_in/17]
1. non_recursive  : [eval_dijkstra_bb14_in/1]
2. non_recursive  : [eval_dijkstra_16/1]
3. non_recursive  : [eval_dijkstra_15/8]
4. recursive  : [eval_dijkstra_66/19,eval_dijkstra_67/19,eval_dijkstra_bb12_in/16,eval_dijkstra_bb13_in/16,eval_dijkstra_bb8_in/16]
5. recursive  : [eval_dijkstra_23/8,eval_dijkstra_24/9,eval_dijkstra_25/9,eval_dijkstra_26/9,eval_dijkstra_bb6_in/8,loop_cont_eval_dijkstra_bb8_in/9]
6. non_recursive  : [loop_cont_eval_dijkstra_bb6_in/2]
7. non_recursive  : [eval_dijkstra_22/8]
8. non_recursive  : [eval_dijkstra_21/9]
9. non_recursive  : [loop_cont_eval_dijkstra_bb1_in/10]
10. non_recursive  : [eval_dijkstra_bb0_in/9]
11. non_recursive  : [eval_dijkstra_start/10]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into eval_dijkstra_bb1_in/17
1. SCC is completely evaluated into other SCCs
2. SCC is completely evaluated into other SCCs
3. SCC is completely evaluated into other SCCs
4. SCC is partially evaluated into eval_dijkstra_bb8_in/16
5. SCC is partially evaluated into eval_dijkstra_bb6_in/8
6. SCC is completely evaluated into other SCCs
7. SCC is partially evaluated into eval_dijkstra_22/8
8. SCC is completely evaluated into other SCCs
9. SCC is partially evaluated into loop_cont_eval_dijkstra_bb1_in/10
10. SCC is partially evaluated into eval_dijkstra_bb0_in/9
11. SCC is partially evaluated into eval_dijkstra_start/10

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations eval_dijkstra_bb1_in/17 
* CE 6 is refined into CE [14] 
* CE 5 is refined into CE [15] 
* CE 4 is refined into CE [16] 


#### Refined cost equations eval_dijkstra_bb1_in/17 
* CE 14: eval_dijkstra_bb1_in(A,B,C,D,E,F,G,H,I,A,J,K,L,M,N,O,P) = 0
     [C>=B,I=5] 
* CE 15: eval_dijkstra_bb1_in(A,B,C,D,E,F,G,H,I,B,C,D,E,F,G,H,J) = 0
     [C>=B,I=4] 
* CE 16: eval_dijkstra_bb1_in(V_chStart,V__NUM_NODES,V__ch,V__iNode,V__iDist,V__iPrev,V__i,V__iCost,B,C,D,E,F,G,H,I,J) = 1+ eval_dijkstra_bb1_in(V_chStart,K,L,M,N,O,P,Q,B,C,D,E,F,G,H,I,J)
     [V__NUM_NODES>=V__ch+1] 

### Cost equations --> "Loop" of eval_dijkstra_bb1_in/17 
* CEs [16] --> Loop 13 
* CEs [14] --> Loop 14 
* CEs [15] --> Loop 15 

#### Loops of eval_dijkstra_bb1_in/17 
* Loop 13: eval_dijkstra_bb1_in(V_chStart,V__NUM_NODES,V__ch,V__iNode,V__iDist,V__iPrev,V__i,V__iCost,B,C,D,E,F,G,H,I,J)->  eval_dijkstra_bb1_in(V_chStart,V__NUM_NODES',V__ch',V__iNode',V__iDist',V__iPrev',V__i',V__iCost',B,C,D,E,F,G,H,I,J)
                  [V__NUM_NODES>=V__ch+1] 
* Loop 14: eval_dijkstra_bb1_in(A,B,C,D,E,F,G,H,I,A,J,K,L,M,N,O,P) [C>=B,I=5] 
* Loop 15: eval_dijkstra_bb1_in(A,B,C,D,E,F,G,H,I,B,C,D,E,F,G,H,J) [C>=B,I=4] 

### Ranking functions of CR eval_dijkstra_bb1_in(V_chStart,V__NUM_NODES,V__ch,V__iNode,V__iDist,V__iPrev,V__i,V__iCost,B,C,D,E,F,G,H,I,J) 

#### Partial ranking functions of CR eval_dijkstra_bb1_in(V_chStart,V__NUM_NODES,V__ch,V__iNode,V__iDist,V__iPrev,V__i,V__iCost,B,C,D,E,F,G,H,I,J) 


### Resulting Chains:eval_dijkstra_bb1_in(V_chStart,V__NUM_NODES,V__ch,V__iNode,V__iDist,V__iPrev,V__i,V__iCost,B,C,D,E,F,G,H,I,J) 
* [[13]]...
* [[13],15]
* [[13],14]
* [15]
* [14]


### Merging Chains  eval_dijkstra_bb1_in/17 into  External patterns of execution 
* [[15]] --> 1 
* [[15,[13]]] --> 2 
* [[14]] --> 3 
* [[14,[13]]] --> 4 
* [[[13]]] --> 5 


### Specialization of cost equations eval_dijkstra_bb8_in/16 
* CE 13 is refined into CE [17] 
* CE 12 is refined into CE [18] 


#### Refined cost equations eval_dijkstra_bb8_in/16 
* CE 17: eval_dijkstra_bb8_in(A,B,C,D,E,F,G,H,I,A,B,C,D,E,F,G) = 0
     [F>=A,H>=1,I=2] 
* CE 18: eval_dijkstra_bb8_in(V__NUM_NODES,V__ch,V__iNode,V__iDist,V__iPrev,V__i,V__iCost,V_26,B,C,D,E,F,G,H,I) = 1+ eval_dijkstra_bb8_in(J,K,L,M,N,O,P,V_26,Q,C,D,E,F,G,H,I)
     [V__NUM_NODES>=V__i+1,V_26>=1,Q=2,B=2] 

### Cost equations --> "Loop" of eval_dijkstra_bb8_in/16 
* CEs [18] --> Loop 16 
* CEs [17] --> Loop 17 

#### Loops of eval_dijkstra_bb8_in/16 
* Loop 16: eval_dijkstra_bb8_in(V__NUM_NODES,V__ch,V__iNode,V__iDist,V__iPrev,V__i,V__iCost,V_26,B,C,D,E,F,G,H,I)->  eval_dijkstra_bb8_in(V__NUM_NODES',V__ch',V__iNode',V__iDist',V__iPrev',V__i',V__iCost',V_26,B',C,D,E,F,G,H,I)
                  [V__NUM_NODES>=V__i+1,V_26>=1,B'=2,B=2] 
* Loop 17: eval_dijkstra_bb8_in(A,B,C,D,E,F,G,H,I,A,B,C,D,E,F,G) [F>=A,H>=1,I=2] 

### Ranking functions of CR eval_dijkstra_bb8_in(V__NUM_NODES,V__ch,V__iNode,V__iDist,V__iPrev,V__i,V__iCost,V_26,B,C,D,E,F,G,H,I) 

#### Partial ranking functions of CR eval_dijkstra_bb8_in(V__NUM_NODES,V__ch,V__iNode,V__iDist,V__iPrev,V__i,V__iCost,V_26,B,C,D,E,F,G,H,I) 


### Resulting Chains:eval_dijkstra_bb8_in(V__NUM_NODES,V__ch,V__iNode,V__iDist,V__iPrev,V__i,V__iCost,V_26,B,C,D,E,F,G,H,I) 
* [[16]]...
* [[16],17]
* [17]


### Merging Chains  eval_dijkstra_bb8_in/16 into  External patterns of execution 
* [[17]] --> 1 
* [[17,[16]]] --> 2 
* [[[16]]] --> 3 


### Specialization of cost equations eval_dijkstra_bb6_in/8 
* CE 11 is refined into CE [19,20,21] 
* CE 10 is refined into CE [22] 


#### Refined cost equations eval_dijkstra_bb6_in/8 
* CE 19: eval_dijkstra_bb6_in(V__NUM_NODES,V__ch,V__iNode,V__iDist,V__iPrev,V__i,V__iCost,B) = 2+ eval_dijkstra_bb8_in(V__NUM_NODES,V__ch,V__iNode,V__iDist,V__iPrev,C,V__iCost,D,E,V__NUM_NODES,V__ch,V__iNode,V__iDist,V__iPrev,F,V__iCost):1+ eval_dijkstra_bb6_in(V__NUM_NODES,V__ch,V__iNode,V__iDist,V__iPrev,G,V__iCost,H)
     [D>=1,0>=V__NUM_NODES,H=3,G=0,F=0,E=2,C=0,B=3] 
* CE 20: eval_dijkstra_bb6_in(V__NUM_NODES,V__ch,V__iNode,V__iDist,V__iPrev,V__i,V__iCost,B) = 2+ eval_dijkstra_bb8_in(V__NUM_NODES,V__ch,V__iNode,V__iDist,V__iPrev,C,V__iCost,D,E,F,G,H,I,J,K,L):2+ eval_dijkstra_bb6_in(F,G,H,I,J,K,L,M)
     [K>=F,D>=1,V__NUM_NODES>=1,M=3,E=2,C=0,B=3] 
* CE 21: eval_dijkstra_bb6_in(V__NUM_NODES,V__ch,V__iNode,V__iDist,V__iPrev,V__i,V__iCost,B) = 2+ eval_dijkstra_bb8_in(V__NUM_NODES,V__ch,V__iNode,V__iDist,V__iPrev,C,V__iCost,D,E,F,G,H,I,J,K,L):3
     [D>=1,V__NUM_NODES>=1,M=3,E=2,C=0,B=3] 
* CE 22: eval_dijkstra_bb6_in(V__NUM_NODES,V__ch,V__iNode,V__iDist,V__iPrev,V__i,V__iCost,B) = 0
     [B=3] 

### Cost equations --> "Loop" of eval_dijkstra_bb6_in/8 
* CEs [22] --> Loop 18 
* CEs [21] --> Loop 19 
* CEs [20] --> Loop 20 
* CEs [19] --> Loop 21 

#### Loops of eval_dijkstra_bb6_in/8 
* Loop 18: eval_dijkstra_bb6_in(V__NUM_NODES,V__ch,V__iNode,V__iDist,V__iPrev,V__i,V__iCost,B) [B=3] 
* Loop 19: eval_dijkstra_bb6_in(V__NUM_NODES,V__ch,V__iNode,V__iDist,V__iPrev,V__i,V__iCost,B) [V__NUM_NODES>=1,B=3] 
* Loop 20: eval_dijkstra_bb6_in(V__NUM_NODES,V__ch,V__iNode,V__iDist,V__iPrev,V__i,V__iCost,B)->  eval_dijkstra_bb6_in(V__NUM_NODES',V__ch',V__iNode',V__iDist',V__iPrev',V__i',V__iCost',B')
                  [V__i'>=V__NUM_NODES',V__NUM_NODES>=1,B'=3,B=3] 
* Loop 21: eval_dijkstra_bb6_in(V__NUM_NODES,V__ch,V__iNode,V__iDist,V__iPrev,V__i,V__iCost,B)->  eval_dijkstra_bb6_in(V__NUM_NODES,V__ch,V__iNode,V__iDist,V__iPrev,V__i',V__iCost,B')
                  [0>=V__NUM_NODES,B'=3,V__i'=0,B=3] 

### Ranking functions of CR eval_dijkstra_bb6_in(V__NUM_NODES,V__ch,V__iNode,V__iDist,V__iPrev,V__i,V__iCost,B) 

#### Partial ranking functions of CR eval_dijkstra_bb6_in(V__NUM_NODES,V__ch,V__iNode,V__iDist,V__iPrev,V__i,V__iCost,B) 


### Resulting Chains:eval_dijkstra_bb6_in(V__NUM_NODES,V__ch,V__iNode,V__iDist,V__iPrev,V__i,V__iCost,B) 
* [[21]]...
* [[21],18]
* [[20]]...
* [[20],[21]]...
* [[20],[21],18]
* [[20],19]...
* [[20],18]
* [19]...
* [18]


### Merging Chains  eval_dijkstra_bb6_in/8 into  External patterns of execution 
* [[18],[18,[20]],[18,[21],[20]],[18,[21]]] --> 1 
* [[19],[19,[20]],[[21],[20]]] --> 2 
* [[[21]]] --> 3 
* [[[20]]] --> 4 


### Specialization of cost equations eval_dijkstra_22/8 
* CE 9 is refined into CE [23,24,25,26] 


#### Refined cost equations eval_dijkstra_22/8 
* CE 23: eval_dijkstra_22(V__NUM_NODES,V__ch,V__iNode,V__iDist,V__iPrev,V__i,V__iCost,B) = 1+ eval_dijkstra_bb6_in(V__NUM_NODES,V__ch,V__iNode,V__iDist,V__iPrev,V__i,V__iCost,C):1
     [C=3] 
* CE 24: eval_dijkstra_22(V__NUM_NODES,V__ch,V__iNode,V__iDist,V__iPrev,V__i,V__iCost,B) = 1+ eval_dijkstra_bb6_in(V__NUM_NODES,V__ch,V__iNode,V__iDist,V__iPrev,V__i,V__iCost,C):2
     [V__NUM_NODES>=1,C=3] 
* CE 25: eval_dijkstra_22(V__NUM_NODES,V__ch,V__iNode,V__iDist,V__iPrev,V__i,V__iCost,B) = 1+ eval_dijkstra_bb6_in(V__NUM_NODES,V__ch,V__iNode,V__iDist,V__iPrev,V__i,V__iCost,C):3
     [0>=V__NUM_NODES,C=3] 
* CE 26: eval_dijkstra_22(V__NUM_NODES,V__ch,V__iNode,V__iDist,V__iPrev,V__i,V__iCost,B) = 1+ eval_dijkstra_bb6_in(V__NUM_NODES,V__ch,V__iNode,V__iDist,V__iPrev,V__i,V__iCost,C):4
     [V__NUM_NODES>=1,C=3] 

### Cost equations --> "Loop" of eval_dijkstra_22/8 
* CEs [24,26] --> Loop 22 
* CEs [25] --> Loop 23 
* CEs [23] --> Loop 24 

#### Loops of eval_dijkstra_22/8 
* Loop 22: eval_dijkstra_22(V__NUM_NODES,V__ch,V__iNode,V__iDist,V__iPrev,V__i,V__iCost,B) [V__NUM_NODES>=1] 
* Loop 23: eval_dijkstra_22(V__NUM_NODES,V__ch,V__iNode,V__iDist,V__iPrev,V__i,V__iCost,B) [0>=V__NUM_NODES] 
* Loop 24: eval_dijkstra_22(V__NUM_NODES,V__ch,V__iNode,V__iDist,V__iPrev,V__i,V__iCost,B) [] 

### Ranking functions of CR eval_dijkstra_22(V__NUM_NODES,V__ch,V__iNode,V__iDist,V__iPrev,V__i,V__iCost,B) 

#### Partial ranking functions of CR eval_dijkstra_22(V__NUM_NODES,V__ch,V__iNode,V__iDist,V__iPrev,V__i,V__iCost,B) 


### Resulting Chains:eval_dijkstra_22(V__NUM_NODES,V__ch,V__iNode,V__iDist,V__iPrev,V__i,V__iCost,B) 
* [24]
* [23]...
* [22]...


### Merging Chains  eval_dijkstra_22/8 into  External patterns of execution 
* [[24]] --> 1 
* [[23]] --> 2 
* [[22]] --> 3 


### Specialization of cost equations loop_cont_eval_dijkstra_bb1_in/10 
* CE 8 is refined into CE [27,28,29] 
* CE 7 is refined into CE [30] 


#### Refined cost equations loop_cont_eval_dijkstra_bb1_in/10 
* CE 27: loop_cont_eval_dijkstra_bb1_in(L,A,B,C,D,E,F,G,H,I) = 0+ eval_dijkstra_22(B,C,D,E,F,G,H,I):1
     [L=5] 
* CE 28: loop_cont_eval_dijkstra_bb1_in(L,A,B,C,D,E,F,G,H,I) = 0+ eval_dijkstra_22(B,C,D,E,F,G,H,I):2
     [0>=B,L=5] 
* CE 29: loop_cont_eval_dijkstra_bb1_in(L,A,B,C,D,E,F,G,H,I) = 0+ eval_dijkstra_22(B,C,D,E,F,G,H,I):3
     [B>=1,L=5] 
* CE 30: loop_cont_eval_dijkstra_bb1_in(L,A,B,C,D,E,F,G,H,I) = 0
     [L=4] 

### Cost equations --> "Loop" of loop_cont_eval_dijkstra_bb1_in/10 
* CEs [27] --> Loop 25 
* CEs [30] --> Loop 26 
* CEs [29] --> Loop 27 
* CEs [28] --> Loop 28 

#### Loops of loop_cont_eval_dijkstra_bb1_in/10 
* Loop 25: loop_cont_eval_dijkstra_bb1_in(L,A,B,C,D,E,F,G,H,I) [L=5] 
* Loop 26: loop_cont_eval_dijkstra_bb1_in(L,A,B,C,D,E,F,G,H,I) [L=4] 
* Loop 27: loop_cont_eval_dijkstra_bb1_in(L,A,B,C,D,E,F,G,H,I) [B>=1,L=5] 
* Loop 28: loop_cont_eval_dijkstra_bb1_in(L,A,B,C,D,E,F,G,H,I) [0>=B,L=5] 

### Ranking functions of CR loop_cont_eval_dijkstra_bb1_in(L,A,B,C,D,E,F,G,H,I) 

#### Partial ranking functions of CR loop_cont_eval_dijkstra_bb1_in(L,A,B,C,D,E,F,G,H,I) 


### Resulting Chains:loop_cont_eval_dijkstra_bb1_in(L,A,B,C,D,E,F,G,H,I) 
* [28]...
* [27]...
* [26]
* [25]


### Merging Chains  loop_cont_eval_dijkstra_bb1_in/10 into  External patterns of execution 
* [[26]] --> 1 
* [[25]] --> 2 
* [[28]] --> 3 
* [[27]] --> 4 


### Specialization of cost equations eval_dijkstra_bb0_in/9 
* CE 3 is refined into CE [31,32,33,34,35,36,37,38,39] 


#### Refined cost equations eval_dijkstra_bb0_in/9 
* CE 31: eval_dijkstra_bb0_in(V_chStart,V__NUM_NODES,V__ch,V__iNode,V__iDist,V__iPrev,V__i,V__iCost,B) = 1+ eval_dijkstra_bb1_in(V_chStart,V__NUM_NODES,C,V__iNode,V__iDist,V__iPrev,V__i,V__iCost,D,V__NUM_NODES,E,V__iNode,V__iDist,V__iPrev,V__i,V__iCost,F):1+ loop_cont_eval_dijkstra_bb1_in(G,V__NUM_NODES,H,V__iNode,V__iDist,V__iPrev,V__i,V__iCost,F,B):1
     [0>=V__NUM_NODES,H=0,G=4,E=0,D=4,C=0] 
* CE 32: eval_dijkstra_bb0_in(V_chStart,V__NUM_NODES,V__ch,V__iNode,V__iDist,V__iPrev,V__i,V__iCost,B) = 1+ eval_dijkstra_bb1_in(V_chStart,V__NUM_NODES,C,V__iNode,V__iDist,V__iPrev,V__i,V__iCost,D,E,F,G,H,I,J,K,L):2+ loop_cont_eval_dijkstra_bb1_in(M,E,F,G,H,I,J,K,L,B):1
     [F>=E,V__NUM_NODES>=1,M=4,D=4,C=0] 
* CE 33: eval_dijkstra_bb0_in(V_chStart,V__NUM_NODES,V__ch,V__iNode,V__iDist,V__iPrev,V__i,V__iCost,B) = 1+ eval_dijkstra_bb1_in(V_chStart,V__NUM_NODES,C,V__iNode,V__iDist,V__iPrev,V__i,V__iCost,D,V_chStart,E,F,G,H,I,J,K):3+ loop_cont_eval_dijkstra_bb1_in(L,V_chStart,E,F,G,H,I,J,K,B):2
     [0>=V__NUM_NODES,L=5,D=5,C=0] 
* CE 34: eval_dijkstra_bb0_in(V_chStart,V__NUM_NODES,V__ch,V__iNode,V__iDist,V__iPrev,V__i,V__iCost,B) = 1+ eval_dijkstra_bb1_in(V_chStart,V__NUM_NODES,C,V__iNode,V__iDist,V__iPrev,V__i,V__iCost,D,V_chStart,E,F,G,H,I,J,K):3+ loop_cont_eval_dijkstra_bb1_in(L,V_chStart,E,F,G,H,I,J,K,B):3
     [0>=E,0>=V__NUM_NODES,L=5,D=5,C=0] 
* CE 35: eval_dijkstra_bb0_in(V_chStart,V__NUM_NODES,V__ch,V__iNode,V__iDist,V__iPrev,V__i,V__iCost,B) = 1+ eval_dijkstra_bb1_in(V_chStart,V__NUM_NODES,C,V__iNode,V__iDist,V__iPrev,V__i,V__iCost,D,V_chStart,E,F,G,H,I,J,K):3+ loop_cont_eval_dijkstra_bb1_in(L,V_chStart,E,F,G,H,I,J,K,B):4
     [E>=1,0>=V__NUM_NODES,L=5,D=5,C=0] 
* CE 36: eval_dijkstra_bb0_in(V_chStart,V__NUM_NODES,V__ch,V__iNode,V__iDist,V__iPrev,V__i,V__iCost,B) = 1+ eval_dijkstra_bb1_in(V_chStart,V__NUM_NODES,C,V__iNode,V__iDist,V__iPrev,V__i,V__iCost,D,V_chStart,E,F,G,H,I,J,K):4+ loop_cont_eval_dijkstra_bb1_in(L,V_chStart,E,F,G,H,I,J,K,B):2
     [V__NUM_NODES>=1,L=5,D=5,C=0] 
* CE 37: eval_dijkstra_bb0_in(V_chStart,V__NUM_NODES,V__ch,V__iNode,V__iDist,V__iPrev,V__i,V__iCost,B) = 1+ eval_dijkstra_bb1_in(V_chStart,V__NUM_NODES,C,V__iNode,V__iDist,V__iPrev,V__i,V__iCost,D,V_chStart,E,F,G,H,I,J,K):4+ loop_cont_eval_dijkstra_bb1_in(L,V_chStart,E,F,G,H,I,J,K,B):3
     [V__NUM_NODES>=1,0>=E,L=5,D=5,C=0] 
* CE 38: eval_dijkstra_bb0_in(V_chStart,V__NUM_NODES,V__ch,V__iNode,V__iDist,V__iPrev,V__i,V__iCost,B) = 1+ eval_dijkstra_bb1_in(V_chStart,V__NUM_NODES,C,V__iNode,V__iDist,V__iPrev,V__i,V__iCost,D,V_chStart,E,F,G,H,I,J,K):4+ loop_cont_eval_dijkstra_bb1_in(L,V_chStart,E,F,G,H,I,J,K,B):4
     [E>=1,V__NUM_NODES>=1,L=5,D=5,C=0] 
* CE 39: eval_dijkstra_bb0_in(V_chStart,V__NUM_NODES,V__ch,V__iNode,V__iDist,V__iPrev,V__i,V__iCost,B) = 1+ eval_dijkstra_bb1_in(V_chStart,V__NUM_NODES,C,V__iNode,V__iDist,V__iPrev,V__i,V__iCost,D,E,F,G,H,I,J,K,L):5
     [V__NUM_NODES>=1,C=0] 

### Cost equations --> "Loop" of eval_dijkstra_bb0_in/9 
* CEs [37,38,39] --> Loop 29 
* CEs [34,35] --> Loop 30 
* CEs [32,36] --> Loop 31 
* CEs [31,33] --> Loop 32 

#### Loops of eval_dijkstra_bb0_in/9 
* Loop 29: eval_dijkstra_bb0_in(V_chStart,V__NUM_NODES,V__ch,V__iNode,V__iDist,V__iPrev,V__i,V__iCost,B) [V__NUM_NODES>=1] 
* Loop 30: eval_dijkstra_bb0_in(V_chStart,V__NUM_NODES,V__ch,V__iNode,V__iDist,V__iPrev,V__i,V__iCost,B) [0>=V__NUM_NODES] 
* Loop 31: eval_dijkstra_bb0_in(V_chStart,V__NUM_NODES,V__ch,V__iNode,V__iDist,V__iPrev,V__i,V__iCost,B) [V__NUM_NODES>=1] 
* Loop 32: eval_dijkstra_bb0_in(V_chStart,V__NUM_NODES,V__ch,V__iNode,V__iDist,V__iPrev,V__i,V__iCost,B) [0>=V__NUM_NODES] 

### Ranking functions of CR eval_dijkstra_bb0_in(V_chStart,V__NUM_NODES,V__ch,V__iNode,V__iDist,V__iPrev,V__i,V__iCost,B) 

#### Partial ranking functions of CR eval_dijkstra_bb0_in(V_chStart,V__NUM_NODES,V__ch,V__iNode,V__iDist,V__iPrev,V__i,V__iCost,B) 


### Resulting Chains:eval_dijkstra_bb0_in(V_chStart,V__NUM_NODES,V__ch,V__iNode,V__iDist,V__iPrev,V__i,V__iCost,B) 
* [32]
* [31]
* [30]...
* [29]...


### Merging Chains  eval_dijkstra_bb0_in/9 into  External patterns of execution 
* [[32]] --> 1 
* [[31]] --> 2 
* [[30]] --> 3 
* [[29]] --> 4 


### Specialization of cost equations eval_dijkstra_start/10 
* CE 2 is refined into CE [40,41,42,43] 


#### Refined cost equations eval_dijkstra_start/10 
* CE 40: eval_dijkstra_start(V_chStart,V_chEnd,V__NUM_NODES,V__ch,V__iNode,V__iDist,V__iPrev,V__i,V__iCost,B) = 0+ eval_dijkstra_bb0_in(V_chStart,V__NUM_NODES,V__ch,V__iNode,V__iDist,V__iPrev,V__i,V__iCost,B):1
     [0>=V__NUM_NODES] 
* CE 41: eval_dijkstra_start(V_chStart,V_chEnd,V__NUM_NODES,V__ch,V__iNode,V__iDist,V__iPrev,V__i,V__iCost,B) = 0+ eval_dijkstra_bb0_in(V_chStart,V__NUM_NODES,V__ch,V__iNode,V__iDist,V__iPrev,V__i,V__iCost,B):2
     [V__NUM_NODES>=1] 
* CE 42: eval_dijkstra_start(V_chStart,V_chEnd,V__NUM_NODES,V__ch,V__iNode,V__iDist,V__iPrev,V__i,V__iCost,B) = 0+ eval_dijkstra_bb0_in(V_chStart,V__NUM_NODES,V__ch,V__iNode,V__iDist,V__iPrev,V__i,V__iCost,B):3
     [0>=V__NUM_NODES] 
* CE 43: eval_dijkstra_start(V_chStart,V_chEnd,V__NUM_NODES,V__ch,V__iNode,V__iDist,V__iPrev,V__i,V__iCost,B) = 0+ eval_dijkstra_bb0_in(V_chStart,V__NUM_NODES,V__ch,V__iNode,V__iDist,V__iPrev,V__i,V__iCost,B):4
     [V__NUM_NODES>=1] 

### Cost equations --> "Loop" of eval_dijkstra_start/10 
* CEs [43] --> Loop 33 
* CEs [42] --> Loop 34 
* CEs [41] --> Loop 35 
* CEs [40] --> Loop 36 

#### Loops of eval_dijkstra_start/10 
* Loop 33: eval_dijkstra_start(V_chStart,V_chEnd,V__NUM_NODES,V__ch,V__iNode,V__iDist,V__iPrev,V__i,V__iCost,B) [V__NUM_NODES>=1] 
* Loop 34: eval_dijkstra_start(V_chStart,V_chEnd,V__NUM_NODES,V__ch,V__iNode,V__iDist,V__iPrev,V__i,V__iCost,B) [0>=V__NUM_NODES] 
* Loop 35: eval_dijkstra_start(V_chStart,V_chEnd,V__NUM_NODES,V__ch,V__iNode,V__iDist,V__iPrev,V__i,V__iCost,B) [V__NUM_NODES>=1] 
* Loop 36: eval_dijkstra_start(V_chStart,V_chEnd,V__NUM_NODES,V__ch,V__iNode,V__iDist,V__iPrev,V__i,V__iCost,B) [0>=V__NUM_NODES] 

### Ranking functions of CR eval_dijkstra_start(V_chStart,V_chEnd,V__NUM_NODES,V__ch,V__iNode,V__iDist,V__iPrev,V__i,V__iCost,B) 

#### Partial ranking functions of CR eval_dijkstra_start(V_chStart,V_chEnd,V__NUM_NODES,V__ch,V__iNode,V__iDist,V__iPrev,V__i,V__iCost,B) 


### Resulting Chains:eval_dijkstra_start(V_chStart,V_chEnd,V__NUM_NODES,V__ch,V__iNode,V__iDist,V__iPrev,V__i,V__iCost,B) 
* [36]
* [35]
* [34]...
* [33]...


### Merging Chains  eval_dijkstra_start/10 into  External patterns of execution 
* [[36]] --> 1 
* [[35]] --> 2 
* [[34]] --> 3 
* [[33]] --> 4 


Computing Bounds
=====================================

#### Cost of loops [13] 

 * loop 13:eval_dijkstra_bb1_in(V_chStart,V__NUM_NODES,V__ch,V__iNode,V__iDist,V__iPrev,V__i,V__iCost,B,C,D,E,F,G,H,I,J) -> [eval_dijkstra_bb1_in(V_chStart',V__NUM_NODES',V__ch',V__iNode',V__iDist',V__iPrev',V__i',V__iCost',B',C',D',E',F',G',H',I',J')] 
1
#### Cost of phase [13]:eval_dijkstra_bb1_in(V_chStart,V__NUM_NODES,V__ch,V__iNode,V__iDist,V__iPrev,V__i,V__iCost,B,C,D,E,F,G,H,I,J) -> [eval_dijkstra_bb1_in(V_chStart',V__NUM_NODES',V__ch',V__iNode',V__iDist',V__iPrev',V__i',V__iCost',B',C',D',E',F',G',H',I',J')] 
1*it(13)+0
#### Cost of phase [13]:eval_dijkstra_bb1_in(V_chStart,V__NUM_NODES,V__ch,V__iNode,V__iDist,V__iPrev,V__i,V__iCost,B,C,D,E,F,G,H,I,J) -> [eval_dijkstra_bb1_in(V_chStart',V__NUM_NODES',V__ch',V__iNode',V__iDist',V__iPrev',V__i',V__iCost',B',C',D',E',F',G',H',I',J')] 
1*it(13)+0
#### Cost of phase [13]:eval_dijkstra_bb1_in(V_chStart,V__NUM_NODES,V__ch,V__iNode,V__iDist,V__iPrev,V__i,V__iCost,B,C,D,E,F,G,H,I,J) -> [eval_dijkstra_bb1_in(V_chStart',V__NUM_NODES',V__ch',V__iNode',V__iDist',V__iPrev',V__i',V__iCost',B',C',D',E',F',G',H',I',J')] 
1*it(13)+0
#### Cost of chains of eval_dijkstra_bb1_in(V_chStart,V__NUM_NODES,V__ch,V__iNode,V__iDist,V__iPrev,V__i,V__iCost,B,C,D,E,F,G,H,I,J):
* Chain [[13]]...: 1*it(13)+0
  with precondition: [V__NUM_NODES>=V__ch+1] 

* Chain [[13],15]: 1*it(13)+0
  with precondition: [B=4,V__NUM_NODES>=V__ch+1,D>=C] 

* Chain [[13],14]: 1*it(13)+0
  with precondition: [B=5,V_chStart=C,V__NUM_NODES>=V__ch+1] 

* Chain [15]: 0
  with precondition: [B=4,E=V__iNode,F=V__iDist,G=V__iPrev,H=V__i,I=V__iCost,V__NUM_NODES=C,V__ch=D,V__ch>=V__NUM_NODES] 

* Chain [14]: 0
  with precondition: [B=5,C=V_chStart,V__ch>=V__NUM_NODES] 


#### Cost of loops [16] 

 * loop 16:eval_dijkstra_bb8_in(V__NUM_NODES,V__ch,V__iNode,V__iDist,V__iPrev,V__i,V__iCost,V_26,B,C,D,E,F,G,H,I) -> [eval_dijkstra_bb8_in(V__NUM_NODES',V__ch',V__iNode',V__iDist',V__iPrev',V__i',V__iCost',V_26',B',C',D',E',F',G',H',I')] 
1
#### Cost of phase [16]:eval_dijkstra_bb8_in(V__NUM_NODES,V__ch,V__iNode,V__iDist,V__iPrev,V__i,V__iCost,V_26,B,C,D,E,F,G,H,I) -> [eval_dijkstra_bb8_in(V__NUM_NODES',V__ch',V__iNode',V__iDist',V__iPrev',V__i',V__iCost',V_26',B',C',D',E',F',G',H',I')] 
1*it(16)+0
#### Cost of phase [16]:eval_dijkstra_bb8_in(V__NUM_NODES,V__ch,V__iNode,V__iDist,V__iPrev,V__i,V__iCost,V_26,B,C,D,E,F,G,H,I) -> [eval_dijkstra_bb8_in(V__NUM_NODES',V__ch',V__iNode',V__iDist',V__iPrev',V__i',V__iCost',V_26',B',C',D',E',F',G',H',I')] 
1*it(16)+0
#### Cost of chains of eval_dijkstra_bb8_in(V__NUM_NODES,V__ch,V__iNode,V__iDist,V__iPrev,V__i,V__iCost,V_26,B,C,D,E,F,G,H,I):
* Chain [[16]]...: 1*it(16)+0
  with precondition: [V__NUM_NODES>=V__i+1,V_26>=1,B=2] 

* Chain [[16],17]: 1*it(16)+0
  with precondition: [B=2,V_26>=1,V__NUM_NODES>=V__i+1,H>=C] 

* Chain [17]: 0
  with precondition: [B=2,D=V__ch,E=V__iNode,F=V__iDist,G=V__iPrev,I=V__iCost,V__NUM_NODES=C,V__i=H,V_26>=1,V__i>=V__NUM_NODES] 


#### Cost of loops [21] 

 * loop 21:eval_dijkstra_bb6_in(V__NUM_NODES,V__ch,V__iNode,V__iDist,V__iPrev,V__i,V__iCost,B) -> [eval_dijkstra_bb6_in(V__NUM_NODES',V__ch',V__iNode',V__iDist',V__iPrev',V__i',V__iCost',B')] 
2
#### Cost of phase [21]:eval_dijkstra_bb6_in(V__NUM_NODES,V__ch,V__iNode,V__iDist,V__iPrev,V__i,V__iCost,B) -> [eval_dijkstra_bb6_in(V__NUM_NODES',V__ch',V__iNode',V__iDist',V__iPrev',V__i',V__iCost',B')] 
2*it(21)+0
#### Cost of phase [21]:eval_dijkstra_bb6_in(V__NUM_NODES,V__ch,V__iNode,V__iDist,V__iPrev,V__i,V__iCost,B) -> [eval_dijkstra_bb6_in(V__NUM_NODES',V__ch',V__iNode',V__iDist',V__iPrev',V__i',V__iCost',B')] 
2*it(21)+0
#### Cost of loops [20] 

 * loop 20:eval_dijkstra_bb6_in(V__NUM_NODES,V__ch,V__iNode,V__iDist,V__iPrev,V__i,V__iCost,B) -> [eval_dijkstra_bb6_in(V__NUM_NODES',V__ch',V__iNode',V__iDist',V__iPrev',V__i',V__iCost',B')] 
1*s(2)+2
#### Cost of phase [20]:eval_dijkstra_bb6_in(V__NUM_NODES,V__ch,V__iNode,V__iDist,V__iPrev,V__i,V__iCost,B) -> [eval_dijkstra_bb6_in(V__NUM_NODES',V__ch',V__iNode',V__iDist',V__iPrev',V__i',V__iCost',B')] 
3*it(20)+0
#### Cost of phase [20]:eval_dijkstra_bb6_in(V__NUM_NODES,V__ch,V__iNode,V__iDist,V__iPrev,V__i,V__iCost,B) -> [eval_dijkstra_bb6_in(V__NUM_NODES',V__ch',V__iNode',V__iDist',V__iPrev',V__i',V__iCost',B')] 
3*it(20)+0
#### Cost of phase [20]:eval_dijkstra_bb6_in(V__NUM_NODES,V__ch,V__iNode,V__iDist,V__iPrev,V__i,V__iCost,B) -> [eval_dijkstra_bb6_in(V__NUM_NODES',V__ch',V__iNode',V__iDist',V__iPrev',V__i',V__iCost',B')] 
3*it(20)+0
#### Cost of phase [20]:eval_dijkstra_bb6_in(V__NUM_NODES,V__ch,V__iNode,V__iDist,V__iPrev,V__i,V__iCost,B) -> [eval_dijkstra_bb6_in(V__NUM_NODES',V__ch',V__iNode',V__iDist',V__iPrev',V__i',V__iCost',B')] 
3*it(20)+0
#### Cost of phase [20]:eval_dijkstra_bb6_in(V__NUM_NODES,V__ch,V__iNode,V__iDist,V__iPrev,V__i,V__iCost,B) -> [eval_dijkstra_bb6_in(V__NUM_NODES',V__ch',V__iNode',V__iDist',V__iPrev',V__i',V__iCost',B')] 
3*it(20)+0
#### Cost of chains of eval_dijkstra_bb6_in(V__NUM_NODES,V__ch,V__iNode,V__iDist,V__iPrev,V__i,V__iCost,B):
* Chain [[21]]...: 2*it(21)+0
  with precondition: [0>=V__NUM_NODES,B=3] 

* Chain [[21],18]: 2*it(21)+0
  with precondition: [B=3,0>=V__NUM_NODES] 

* Chain [[20]]...: 3*it(20)+0
  with precondition: [V__NUM_NODES>=1,B=3] 

* Chain [[20],[21]]...: 5*it(20)+0
  with precondition: [B=3,V__NUM_NODES>=1] 

* Chain [[20],[21],18]: 5*it(20)+0
  with precondition: [B=3,V__NUM_NODES>=1] 

* Chain [[20],19]...: 4*it(20)+2
  with precondition: [B=3,V__NUM_NODES>=1] 

* Chain [[20],18]: 3*it(20)+0
  with precondition: [B=3,V__NUM_NODES>=1] 

* Chain [19]...: 1*s(4)+2
  with precondition: [B=3,V__NUM_NODES>=1] 

* Chain [18]: 0
  with precondition: [B=3] 


#### Cost of chains of eval_dijkstra_22(V__NUM_NODES,V__ch,V__iNode,V__iDist,V__iPrev,V__i,V__iCost,B):
* Chain [24]: 1*s(11)+1
  with precondition: [] 

* Chain [23]...: 2*s(12)+1
  with precondition: [0>=V__NUM_NODES] 

* Chain [22]...: 1*aux(3)+0
  with precondition: [V__NUM_NODES>=1] 


#### Cost of chains of loop_cont_eval_dijkstra_bb1_in(L,A,B,C,D,E,F,G,H,I):
* Chain [28]...: 2*s(15)+1
  with precondition: [L=5,0>=B] 

* Chain [27]...: 1*s(16)+0
  with precondition: [L=5,B>=1] 

* Chain [26]: 0
  with precondition: [L=4] 

* Chain [25]: 1*s(17)+1
  with precondition: [L=5] 


#### Cost of chains of eval_dijkstra_bb0_in(V_chStart,V__NUM_NODES,V__ch,V__iNode,V__iDist,V__iPrev,V__i,V__iCost,B):
* Chain [32]: 1*aux(4)+0
  with precondition: [0>=V__NUM_NODES] 

* Chain [31]: 1*aux(5)+0
  with precondition: [V__NUM_NODES>=1] 

* Chain [30]...: 1*aux(6)+0
  with precondition: [0>=V__NUM_NODES] 

* Chain [29]...: 1*aux(7)+0
  with precondition: [V__NUM_NODES>=1] 


#### Cost of chains of eval_dijkstra_start(V_chStart,V_chEnd,V__NUM_NODES,V__ch,V__iNode,V__iDist,V__iPrev,V__i,V__iCost,B):
* Chain [36]: 1*s(29)+0
  with precondition: [0>=V__NUM_NODES] 

* Chain [35]: 1*s(30)+0
  with precondition: [V__NUM_NODES>=1] 

* Chain [34]...: 1*s(31)+0
  with precondition: [0>=V__NUM_NODES] 

* Chain [33]...: 1*s(32)+0
  with precondition: [V__NUM_NODES>=1] 


Closed-form bounds of eval_dijkstra_start(V_chStart,V_chEnd,V__NUM_NODES,V__ch,V__iNode,V__iDist,V__iPrev,V__i,V__iCost,B): 
-------------------------------------
* Chain [36] with precondition: [0>=V__NUM_NODES] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [35] with precondition: [V__NUM_NODES>=1] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [34]... with precondition: [0>=V__NUM_NODES] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [33]... with precondition: [V__NUM_NODES>=1] 
    - Upper bound: inf 
    - Complexity: infinity 

### Maximum cost of eval_dijkstra_start(V_chStart,V_chEnd,V__NUM_NODES,V__ch,V__iNode,V__iDist,V__iPrev,V__i,V__iCost,B): inf 
Asymptotic class: infinity 

Time statistics: 
-------------------------------------
* Partial evaluation computed in 52 ms.
* Invariants computed in 111 ms.
   - Backward Invariants 59 ms.
   - Transitive Invariants 22 ms.
* Refinement performed in 260 ms.
* Termination proved in 17 ms.
* Upper bounds computed in 222 ms.
   - Equation cost structures 106 ms.
   - Phase cost structures 40 ms.
   - Chain cost structures 78 ms.
   - Solving cost expressions 0 ms.
* Total analysis performed in 728 ms.


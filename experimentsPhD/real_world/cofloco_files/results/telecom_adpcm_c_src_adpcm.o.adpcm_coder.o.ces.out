Warning: Ignored call to eval_adpcm_coder_stop/1 in equation eval_adpcm_coder_bb16_in/1 

Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. recursive  : [eval_adpcm_coder_bb10_in/3,eval_adpcm_coder_bb13_in/3,eval_adpcm_coder_bb1_in/3,eval_adpcm_coder_bb4_in/3,eval_adpcm_coder_bb6_in/3,eval_adpcm_coder_bb8_in/3]
1. non_recursive  : [eval_adpcm_coder_bb16_in/1]
2. non_recursive  : [loop_cont_eval_adpcm_coder_bb1_in/2]
3. non_recursive  : [eval_adpcm_coder_bb0_in/2]
4. non_recursive  : [eval_adpcm_coder_start/2]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into eval_adpcm_coder_bb1_in/3
1. SCC is completely evaluated into other SCCs
2. SCC is completely evaluated into other SCCs
3. SCC is partially evaluated into eval_adpcm_coder_bb0_in/2
4. SCC is partially evaluated into eval_adpcm_coder_start/2

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations eval_adpcm_coder_bb1_in/3 
* CE 7 is refined into CE [8] 
* CE 5 is refined into CE [9] 
* CE 6 is discarded (unfeasible) 
* CE 4 is refined into CE [10] 


#### Refined cost equations eval_adpcm_coder_bb1_in/3 
* CE 8: eval_adpcm_coder_bb1_in(V__0,V_bufferstep_0,B) = 0
     [V_bufferstep_0>=0,1>=V_bufferstep_0,0>=V__0,B=2] 
* CE 9: eval_adpcm_coder_bb1_in(V__0,V_bufferstep_0,B) = 1+ eval_adpcm_coder_bb1_in(C,D,E)
     [V__0>=1,V__0=C+1,E=2,D=0,B=2,V_bufferstep_0=1] 
* CE 10: eval_adpcm_coder_bb1_in(V__0,V_bufferstep_0,B) = 1+ eval_adpcm_coder_bb1_in(C,D,E)
     [V__0>=1,V__0=C+1,E=2,D=1,B=2,V_bufferstep_0=0] 

### Cost equations --> "Loop" of eval_adpcm_coder_bb1_in/3 
* CEs [9] --> Loop 7 
* CEs [10] --> Loop 8 
* CEs [8] --> Loop 9 

#### Loops of eval_adpcm_coder_bb1_in/3 
* Loop 7: eval_adpcm_coder_bb1_in(V__0,V_bufferstep_0,B)->  eval_adpcm_coder_bb1_in(V__0',V_bufferstep_0',B')
                  [V__0>=1,V__0=V__0'+1,B'=2,V_bufferstep_0'=0,B=2,V_bufferstep_0=1] 
* Loop 8: eval_adpcm_coder_bb1_in(V__0,V_bufferstep_0,B)->  eval_adpcm_coder_bb1_in(V__0',V_bufferstep_0',B')
                  [V__0>=1,V__0=V__0'+1,B'=2,V_bufferstep_0'=1,B=2,V_bufferstep_0=0] 
* Loop 9: eval_adpcm_coder_bb1_in(V__0,V_bufferstep_0,B) [V_bufferstep_0>=0,1>=V_bufferstep_0,0>=V__0,B=2] 

### Ranking functions of CR eval_adpcm_coder_bb1_in(V__0,V_bufferstep_0,B) 
* RF of phase [7,8]: [V__0]

#### Partial ranking functions of CR eval_adpcm_coder_bb1_in(V__0,V_bufferstep_0,B) 
* Partial RF of phase [7,8]:
  - RF of loop [7:1]:
    V_bufferstep_0 depends on loops [8:1] 
  - RF of loop [7:1,8:1]:
    V__0
  - RF of loop [8:1]:
    -V_bufferstep_0+1 depends on loops [7:1] 


### Resulting Chains:eval_adpcm_coder_bb1_in(V__0,V_bufferstep_0,B) 
* [[7,8],9]
* [9]


### Merging Chains  eval_adpcm_coder_bb1_in/3 into  External patterns of execution 
* [[9]] --> 1 
* [[9,[7,8]]] --> 2 


### Specialization of cost equations eval_adpcm_coder_bb0_in/2 
* CE 3 is refined into CE [11,12] 


#### Refined cost equations eval_adpcm_coder_bb0_in/2 
* CE 11: eval_adpcm_coder_bb0_in(V_len,B) = 1+ eval_adpcm_coder_bb1_in(V_len,C,D):1
     [0>=V_len,D=2,C=1] 
* CE 12: eval_adpcm_coder_bb0_in(V_len,B) = 1+ eval_adpcm_coder_bb1_in(V_len,C,D):2
     [V_len>=1,D=2,C=1] 

### Cost equations --> "Loop" of eval_adpcm_coder_bb0_in/2 
* CEs [12] --> Loop 10 
* CEs [11] --> Loop 11 

#### Loops of eval_adpcm_coder_bb0_in/2 
* Loop 10: eval_adpcm_coder_bb0_in(V_len,B) [V_len>=1] 
* Loop 11: eval_adpcm_coder_bb0_in(V_len,B) [0>=V_len] 

### Ranking functions of CR eval_adpcm_coder_bb0_in(V_len,B) 

#### Partial ranking functions of CR eval_adpcm_coder_bb0_in(V_len,B) 


### Resulting Chains:eval_adpcm_coder_bb0_in(V_len,B) 
* [11]
* [10]


### Merging Chains  eval_adpcm_coder_bb0_in/2 into  External patterns of execution 
* [[11]] --> 1 
* [[10]] --> 2 


### Specialization of cost equations eval_adpcm_coder_start/2 
* CE 2 is refined into CE [13,14] 


#### Refined cost equations eval_adpcm_coder_start/2 
* CE 13: eval_adpcm_coder_start(V_len,B) = 0+ eval_adpcm_coder_bb0_in(V_len,B):1
     [0>=V_len] 
* CE 14: eval_adpcm_coder_start(V_len,B) = 0+ eval_adpcm_coder_bb0_in(V_len,B):2
     [V_len>=1] 

### Cost equations --> "Loop" of eval_adpcm_coder_start/2 
* CEs [14] --> Loop 12 
* CEs [13] --> Loop 13 

#### Loops of eval_adpcm_coder_start/2 
* Loop 12: eval_adpcm_coder_start(V_len,B) [V_len>=1] 
* Loop 13: eval_adpcm_coder_start(V_len,B) [0>=V_len] 

### Ranking functions of CR eval_adpcm_coder_start(V_len,B) 

#### Partial ranking functions of CR eval_adpcm_coder_start(V_len,B) 


### Resulting Chains:eval_adpcm_coder_start(V_len,B) 
* [13]
* [12]


### Merging Chains  eval_adpcm_coder_start/2 into  External patterns of execution 
* [[13]] --> 1 
* [[12]] --> 2 


Computing Bounds
=====================================

#### Cost of loops [7,8] 

 * loop 7:eval_adpcm_coder_bb1_in(V__0,V_bufferstep_0,B) -> [eval_adpcm_coder_bb1_in(V__0',V_bufferstep_0',B')] 
1
 * loop 8:eval_adpcm_coder_bb1_in(V__0,V_bufferstep_0,B) -> [eval_adpcm_coder_bb1_in(V__0',V_bufferstep_0',B')] 
1
#### Cost of phase [7,8]:eval_adpcm_coder_bb1_in(V__0,V_bufferstep_0,B) -> [eval_adpcm_coder_bb1_in(V__0',V_bufferstep_0',B')] 
2*it(7)+0
  Such that:aux(5) =< V__0
aux(6) =< V__0-V__0'
it(7) =< aux(5)
it(7) =< aux(6)

#### Cost of chains of eval_adpcm_coder_bb1_in(V__0,V_bufferstep_0,B):
* Chain [[7,8],9]: 2*it(7)+0
  Such that:aux(7) =< V__0
it(7) =< aux(7)

  with precondition: [B=2,1>=V_bufferstep_0,V__0>=1,V_bufferstep_0>=0] 

* Chain [9]: 0
  with precondition: [B=2,0>=V__0,1>=V_bufferstep_0,V_bufferstep_0>=0] 


#### Cost of chains of eval_adpcm_coder_bb0_in(V_len,B):
* Chain [11]: 1
  with precondition: [0>=V_len] 

* Chain [10]: 2*s(2)+1
  Such that:s(1) =< V_len
s(2) =< s(1)

  with precondition: [V_len>=1] 


#### Cost of chains of eval_adpcm_coder_start(V_len,B):
* Chain [13]: 1
  with precondition: [0>=V_len] 

* Chain [12]: 2*s(4)+1
  Such that:s(3) =< V_len
s(4) =< s(3)

  with precondition: [V_len>=1] 


Closed-form bounds of eval_adpcm_coder_start(V_len,B): 
-------------------------------------
* Chain [13] with precondition: [0>=V_len] 
    - Upper bound: 1 
    - Complexity: constant 
* Chain [12] with precondition: [V_len>=1] 
    - Upper bound: 2*V_len+1 
    - Complexity: n 

### Maximum cost of eval_adpcm_coder_start(V_len,B): nat(V_len)*2+1 
Asymptotic class: n 

Time statistics: 
-------------------------------------
* Partial evaluation computed in 8 ms.
* Invariants computed in 9 ms.
   - Backward Invariants 4 ms.
   - Transitive Invariants 2 ms.
* Refinement performed in 17 ms.
* Termination proved in 3 ms.
* Upper bounds computed in 14 ms.
   - Equation cost structures 4 ms.
   - Phase cost structures 6 ms.
   - Chain cost structures 3 ms.
   - Solving cost expressions 0 ms.
* Total analysis performed in 64 ms.


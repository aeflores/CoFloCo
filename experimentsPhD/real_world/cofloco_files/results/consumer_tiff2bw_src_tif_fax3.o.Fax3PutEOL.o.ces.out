Warning: Ignored call to eval_Fax3PutEOL_stop/1 in equation eval_Fax3PutEOL_bb25_in/1 

Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. recursive  : [eval_Fax3PutEOL_67/4,eval_Fax3PutEOL_68/4,eval_Fax3PutEOL_bb17_in/3,eval_Fax3PutEOL_bb20_in/4]
1. non_recursive  : [eval_Fax3PutEOL_bb25_in/1]
2. non_recursive  : [eval_Fax3PutEOL_bb24_in/1]
3. non_recursive  : [eval_Fax3PutEOL_88/1]
4. non_recursive  : [eval_Fax3PutEOL_87/1]
5. non_recursive  : [loop_cont_eval_Fax3PutEOL_bb17_in/2]
6. non_recursive  : [eval_Fax3PutEOL_bb16_in/3]
7. non_recursive  : [eval_Fax3PutEOL_bb14_in/2]
8. recursive  : [eval_Fax3PutEOL_22/5,eval_Fax3PutEOL_23/5,eval_Fax3PutEOL_bb6_in/4,eval_Fax3PutEOL_bb9_in/5]
9. non_recursive  : [eval_Fax3PutEOL_bb13_in/1]
10. non_recursive  : [eval_Fax3PutEOL_43/1]
11. non_recursive  : [eval_Fax3PutEOL_42/1]
12. non_recursive  : [loop_cont_eval_Fax3PutEOL_bb6_in/3]
13. non_recursive  : [eval_Fax3PutEOL_bb5_in/3]
14. non_recursive  : [eval_Fax3PutEOL_bb0_in/1]
15. non_recursive  : [eval_Fax3PutEOL_start/1]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into eval_Fax3PutEOL_bb17_in/3
1. SCC is completely evaluated into other SCCs
2. SCC is completely evaluated into other SCCs
3. SCC is completely evaluated into other SCCs
4. SCC is completely evaluated into other SCCs
5. SCC is partially evaluated into loop_cont_eval_Fax3PutEOL_bb17_in/2
6. SCC is partially evaluated into eval_Fax3PutEOL_bb16_in/3
7. SCC is partially evaluated into eval_Fax3PutEOL_bb14_in/2
8. SCC is partially evaluated into eval_Fax3PutEOL_bb6_in/4
9. SCC is completely evaluated into other SCCs
10. SCC is completely evaluated into other SCCs
11. SCC is completely evaluated into other SCCs
12. SCC is partially evaluated into loop_cont_eval_Fax3PutEOL_bb6_in/3
13. SCC is partially evaluated into eval_Fax3PutEOL_bb5_in/3
14. SCC is partially evaluated into eval_Fax3PutEOL_bb0_in/1
15. SCC is partially evaluated into eval_Fax3PutEOL_start/1

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations eval_Fax3PutEOL_bb17_in/3 
* CE 19 is refined into CE [23] 
* CE 18 is refined into CE [24] 
* CE 17 is refined into CE [25] 
* CE 16 is refined into CE [26] 


#### Refined cost equations eval_Fax3PutEOL_bb17_in/3 
* CE 23: eval_Fax3PutEOL_bb17_in(V_length_1,V_bit_4,B) = 0
     [V_bit_4>=V_length_1,V_length_1>=1,B=7] 
* CE 24: eval_Fax3PutEOL_bb17_in(V_length_1,V_bit_4,B) = 0
     [V_bit_4>=V_length_1,V_length_1>=1,B=6] 
* CE 25: eval_Fax3PutEOL_bb17_in(V_length_1,V_bit_4,B) = 0
     [V_bit_4>=V_length_1,V_length_1>=1,B=5] 
* CE 26: eval_Fax3PutEOL_bb17_in(V_length_1,V_bit_4,B) = 1+ eval_Fax3PutEOL_bb17_in(C,D,B)
     [V_length_1>=V_bit_4+1,V_length_1>=1,V_length_1=V_bit_4+C,D=8] 

### Cost equations --> "Loop" of eval_Fax3PutEOL_bb17_in/3 
* CEs [26] --> Loop 20 
* CEs [23] --> Loop 21 
* CEs [24] --> Loop 22 
* CEs [25] --> Loop 23 

#### Loops of eval_Fax3PutEOL_bb17_in/3 
* Loop 20: eval_Fax3PutEOL_bb17_in(V_length_1,V_bit_4,B)->  eval_Fax3PutEOL_bb17_in(V_length_1',V_bit_4',B)
                  [V_length_1>=V_bit_4+1,V_length_1>=1,V_length_1=V_bit_4+V_length_1',V_bit_4'=8] 
* Loop 21: eval_Fax3PutEOL_bb17_in(V_length_1,V_bit_4,B) [V_bit_4>=V_length_1,V_length_1>=1,B=7] 
* Loop 22: eval_Fax3PutEOL_bb17_in(V_length_1,V_bit_4,B) [V_bit_4>=V_length_1,V_length_1>=1,B=6] 
* Loop 23: eval_Fax3PutEOL_bb17_in(V_length_1,V_bit_4,B) [V_bit_4>=V_length_1,V_length_1>=1,B=5] 

### Ranking functions of CR eval_Fax3PutEOL_bb17_in(V_length_1,V_bit_4,B) 
* RF of phase [20]: [V_length_1/8-V_bit_4/8]

#### Partial ranking functions of CR eval_Fax3PutEOL_bb17_in(V_length_1,V_bit_4,B) 
* Partial RF of phase [20]:
  - RF of loop [20:1]:
    V_length_1/8-V_bit_4/8


### Resulting Chains:eval_Fax3PutEOL_bb17_in(V_length_1,V_bit_4,B) 
* [[20],23]
* [[20],22]
* [[20],21]
* [23]
* [22]
* [21]


### Merging Chains  eval_Fax3PutEOL_bb17_in/3 into  External patterns of execution 
* [[23]] --> 1 
* [[23,[20]]] --> 2 
* [[22]] --> 3 
* [[22,[20]]] --> 4 
* [[21]] --> 5 
* [[21,[20]]] --> 6 


### Specialization of cost equations loop_cont_eval_Fax3PutEOL_bb17_in/2 
* CE 22 is refined into CE [27] 
* CE 21 is refined into CE [28] 
* CE 20 is refined into CE [29] 


#### Refined cost equations loop_cont_eval_Fax3PutEOL_bb17_in/2 
* CE 27: loop_cont_eval_Fax3PutEOL_bb17_in(D,A) = 0
     [D=7] 
* CE 28: loop_cont_eval_Fax3PutEOL_bb17_in(D,A) = 0
     [D=6] 
* CE 29: loop_cont_eval_Fax3PutEOL_bb17_in(D,A) = 0
     [D=5] 

### Cost equations --> "Loop" of loop_cont_eval_Fax3PutEOL_bb17_in/2 
* CEs [27] --> Loop 24 
* CEs [28] --> Loop 25 
* CEs [29] --> Loop 26 

#### Loops of loop_cont_eval_Fax3PutEOL_bb17_in/2 
* Loop 24: loop_cont_eval_Fax3PutEOL_bb17_in(D,A) [D=7] 
* Loop 25: loop_cont_eval_Fax3PutEOL_bb17_in(D,A) [D=6] 
* Loop 26: loop_cont_eval_Fax3PutEOL_bb17_in(D,A) [D=5] 

### Ranking functions of CR loop_cont_eval_Fax3PutEOL_bb17_in(D,A) 

#### Partial ranking functions of CR loop_cont_eval_Fax3PutEOL_bb17_in(D,A) 


### Resulting Chains:loop_cont_eval_Fax3PutEOL_bb17_in(D,A) 
* [26]
* [25]
* [24]


### Merging Chains  loop_cont_eval_Fax3PutEOL_bb17_in/2 into  External patterns of execution 
* [[26]] --> 1 
* [[25]] --> 2 
* [[24]] --> 3 


### Specialization of cost equations eval_Fax3PutEOL_bb16_in/3 
* CE 15 is refined into CE [30,31,32,33,34,35] 


#### Refined cost equations eval_Fax3PutEOL_bb16_in/3 
* CE 30: eval_Fax3PutEOL_bb16_in(V_bit_3,V_length_0,B) = 1+ eval_Fax3PutEOL_bb17_in(V_length_0,V_bit_3,C):1+ loop_cont_eval_Fax3PutEOL_bb17_in(D,B):1
     [V_bit_3>=V_length_0,V_length_0>=12,13>=V_length_0,D=5,C=5] 
* CE 31: eval_Fax3PutEOL_bb16_in(V_bit_3,V_length_0,B) = 1+ eval_Fax3PutEOL_bb17_in(V_length_0,V_bit_3,C):2+ loop_cont_eval_Fax3PutEOL_bb17_in(D,B):1
     [V_length_0>=V_bit_3+1,V_length_0>=12,13>=V_length_0,D=5,C=5] 
* CE 32: eval_Fax3PutEOL_bb16_in(V_bit_3,V_length_0,B) = 1+ eval_Fax3PutEOL_bb17_in(V_length_0,V_bit_3,C):3+ loop_cont_eval_Fax3PutEOL_bb17_in(D,B):2
     [V_bit_3>=V_length_0,V_length_0>=12,13>=V_length_0,D=6,C=6] 
* CE 33: eval_Fax3PutEOL_bb16_in(V_bit_3,V_length_0,B) = 1+ eval_Fax3PutEOL_bb17_in(V_length_0,V_bit_3,C):4+ loop_cont_eval_Fax3PutEOL_bb17_in(D,B):2
     [V_length_0>=V_bit_3+1,V_length_0>=12,13>=V_length_0,D=6,C=6] 
* CE 34: eval_Fax3PutEOL_bb16_in(V_bit_3,V_length_0,B) = 1+ eval_Fax3PutEOL_bb17_in(V_length_0,V_bit_3,C):5+ loop_cont_eval_Fax3PutEOL_bb17_in(D,B):3
     [V_bit_3>=V_length_0,V_length_0>=12,13>=V_length_0,D=7,C=7] 
* CE 35: eval_Fax3PutEOL_bb16_in(V_bit_3,V_length_0,B) = 1+ eval_Fax3PutEOL_bb17_in(V_length_0,V_bit_3,C):6+ loop_cont_eval_Fax3PutEOL_bb17_in(D,B):3
     [V_length_0>=V_bit_3+1,V_length_0>=12,13>=V_length_0,D=7,C=7] 

### Cost equations --> "Loop" of eval_Fax3PutEOL_bb16_in/3 
* CEs [30,32,34] --> Loop 27 
* CEs [31,33,35] --> Loop 28 

#### Loops of eval_Fax3PutEOL_bb16_in/3 
* Loop 27: eval_Fax3PutEOL_bb16_in(V_bit_3,V_length_0,B) [V_bit_3>=V_length_0,V_length_0>=12,13>=V_length_0] 
* Loop 28: eval_Fax3PutEOL_bb16_in(V_bit_3,V_length_0,B) [V_length_0>=V_bit_3+1,V_length_0>=12,13>=V_length_0] 

### Ranking functions of CR eval_Fax3PutEOL_bb16_in(V_bit_3,V_length_0,B) 

#### Partial ranking functions of CR eval_Fax3PutEOL_bb16_in(V_bit_3,V_length_0,B) 


### Resulting Chains:eval_Fax3PutEOL_bb16_in(V_bit_3,V_length_0,B) 
* [28]
* [27]


### Merging Chains  eval_Fax3PutEOL_bb16_in/3 into  External patterns of execution 
* [[28]] --> 1 
* [[27]] --> 2 


### Specialization of cost equations eval_Fax3PutEOL_bb14_in/2 
* CE 6 is refined into CE [36,37] 
* CE 7 is refined into CE [38,39] 


#### Refined cost equations eval_Fax3PutEOL_bb14_in/2 
* CE 36: eval_Fax3PutEOL_bb14_in(V_bit_3,B) = 0+ eval_Fax3PutEOL_bb16_in(V_bit_3,C,B):1
     [12>=V_bit_3,C=13] 
* CE 37: eval_Fax3PutEOL_bb14_in(V_bit_3,B) = 0+ eval_Fax3PutEOL_bb16_in(V_bit_3,C,B):2
     [V_bit_3>=13,C=13] 
* CE 38: eval_Fax3PutEOL_bb14_in(V_bit_3,B) = 0+ eval_Fax3PutEOL_bb16_in(V_bit_3,C,B):1
     [11>=V_bit_3,C=12] 
* CE 39: eval_Fax3PutEOL_bb14_in(V_bit_3,B) = 0+ eval_Fax3PutEOL_bb16_in(V_bit_3,C,B):2
     [V_bit_3>=12,C=12] 

### Cost equations --> "Loop" of eval_Fax3PutEOL_bb14_in/2 
* CEs [37,39] --> Loop 29 
* CEs [36,38] --> Loop 30 

#### Loops of eval_Fax3PutEOL_bb14_in/2 
* Loop 29: eval_Fax3PutEOL_bb14_in(V_bit_3,B) [V_bit_3>=12] 
* Loop 30: eval_Fax3PutEOL_bb14_in(V_bit_3,B) [12>=V_bit_3] 

### Ranking functions of CR eval_Fax3PutEOL_bb14_in(V_bit_3,B) 

#### Partial ranking functions of CR eval_Fax3PutEOL_bb14_in(V_bit_3,B) 


### Resulting Chains:eval_Fax3PutEOL_bb14_in(V_bit_3,B) 
* [30]
* [29]


### Merging Chains  eval_Fax3PutEOL_bb14_in/2 into  External patterns of execution 
* [[30]] --> 1 
* [[29]] --> 2 


### Specialization of cost equations eval_Fax3PutEOL_bb6_in/4 
* CE 11 is refined into CE [40] 
* CE 10 is refined into CE [41] 
* CE 9 is refined into CE [42] 
* CE 8 is refined into CE [43] 


#### Refined cost equations eval_Fax3PutEOL_bb6_in/4 
* CE 40: eval_Fax3PutEOL_bb6_in(V_tparm_0,V_bit_0,B,C) = 0
     [V_bit_0>=V_tparm_0,V_bit_0=V_tparm_0+C,B=4] 
* CE 41: eval_Fax3PutEOL_bb6_in(V_tparm_0,V_bit_0,B,C) = 0
     [V_bit_0>=V_tparm_0,B=3] 
* CE 42: eval_Fax3PutEOL_bb6_in(V_tparm_0,V_bit_0,B,C) = 0
     [V_bit_0>=V_tparm_0,B=2] 
* CE 43: eval_Fax3PutEOL_bb6_in(V_tparm_0,V_bit_0,B,C) = 1+ eval_Fax3PutEOL_bb6_in(D,E,B,C)
     [V_tparm_0>=V_bit_0+1,V_bit_0+D=V_tparm_0,E=8] 

### Cost equations --> "Loop" of eval_Fax3PutEOL_bb6_in/4 
* CEs [43] --> Loop 31 
* CEs [40] --> Loop 32 
* CEs [41] --> Loop 33 
* CEs [42] --> Loop 34 

#### Loops of eval_Fax3PutEOL_bb6_in/4 
* Loop 31: eval_Fax3PutEOL_bb6_in(V_tparm_0,V_bit_0,B,C)->  eval_Fax3PutEOL_bb6_in(V_tparm_0',V_bit_0',B,C)
                  [V_tparm_0>=V_bit_0+1,V_tparm_0=V_bit_0+V_tparm_0',V_bit_0'=8] 
* Loop 32: eval_Fax3PutEOL_bb6_in(V_tparm_0,V_bit_0,B,C) [V_bit_0>=V_tparm_0,V_tparm_0+C=V_bit_0,B=4] 
* Loop 33: eval_Fax3PutEOL_bb6_in(V_tparm_0,V_bit_0,B,C) [V_bit_0>=V_tparm_0,B=3] 
* Loop 34: eval_Fax3PutEOL_bb6_in(V_tparm_0,V_bit_0,B,C) [V_bit_0>=V_tparm_0,B=2] 

### Ranking functions of CR eval_Fax3PutEOL_bb6_in(V_tparm_0,V_bit_0,B,C) 
* RF of phase [31]: [V_tparm_0/8-V_bit_0/8]

#### Partial ranking functions of CR eval_Fax3PutEOL_bb6_in(V_tparm_0,V_bit_0,B,C) 
* Partial RF of phase [31]:
  - RF of loop [31:1]:
    V_tparm_0/8-V_bit_0/8


### Resulting Chains:eval_Fax3PutEOL_bb6_in(V_tparm_0,V_bit_0,B,C) 
* [[31],34]
* [[31],33]
* [[31],32]
* [34]
* [33]
* [32]


### Merging Chains  eval_Fax3PutEOL_bb6_in/4 into  External patterns of execution 
* [[34]] --> 1 
* [[34,[31]]] --> 2 
* [[33]] --> 3 
* [[33,[31]]] --> 4 
* [[32]] --> 5 
* [[32,[31]]] --> 6 


### Specialization of cost equations loop_cont_eval_Fax3PutEOL_bb6_in/3 
* CE 14 is refined into CE [44,45] 
* CE 13 is refined into CE [46] 
* CE 12 is refined into CE [47] 


#### Refined cost equations loop_cont_eval_Fax3PutEOL_bb6_in/3 
* CE 44: loop_cont_eval_Fax3PutEOL_bb6_in(E,A,B) = 0+ eval_Fax3PutEOL_bb14_in(A,B):1
     [12>=A,E=4] 
* CE 45: loop_cont_eval_Fax3PutEOL_bb6_in(E,A,B) = 0+ eval_Fax3PutEOL_bb14_in(A,B):2
     [A>=12,E=4] 
* CE 46: loop_cont_eval_Fax3PutEOL_bb6_in(E,A,B) = 0+ eval_Fax3PutEOL_bb14_in(F,B):1
     [F=8,E=3] 
* CE 47: loop_cont_eval_Fax3PutEOL_bb6_in(E,A,B) = 0+ eval_Fax3PutEOL_bb14_in(F,B):1
     [F=8,E=2] 

### Cost equations --> "Loop" of loop_cont_eval_Fax3PutEOL_bb6_in/3 
* CEs [45] --> Loop 35 
* CEs [44] --> Loop 36 
* CEs [46] --> Loop 37 
* CEs [47] --> Loop 38 

#### Loops of loop_cont_eval_Fax3PutEOL_bb6_in/3 
* Loop 35: loop_cont_eval_Fax3PutEOL_bb6_in(E,A,B) [A>=12,E=4] 
* Loop 36: loop_cont_eval_Fax3PutEOL_bb6_in(E,A,B) [12>=A,E=4] 
* Loop 37: loop_cont_eval_Fax3PutEOL_bb6_in(E,A,B) [E=3] 
* Loop 38: loop_cont_eval_Fax3PutEOL_bb6_in(E,A,B) [E=2] 

### Ranking functions of CR loop_cont_eval_Fax3PutEOL_bb6_in(E,A,B) 

#### Partial ranking functions of CR loop_cont_eval_Fax3PutEOL_bb6_in(E,A,B) 


### Resulting Chains:loop_cont_eval_Fax3PutEOL_bb6_in(E,A,B) 
* [38]
* [37]
* [36]
* [35]


### Merging Chains  loop_cont_eval_Fax3PutEOL_bb6_in/3 into  External patterns of execution 
* [[38]] --> 1 
* [[37]] --> 2 
* [[36]] --> 3 
* [[35]] --> 4 


### Specialization of cost equations eval_Fax3PutEOL_bb5_in/3 
* CE 5 is refined into CE [48,49,50,51,52,53,54] 


#### Refined cost equations eval_Fax3PutEOL_bb5_in/3 
* CE 48: eval_Fax3PutEOL_bb5_in(V_5,V_align_0,B) = 1+ eval_Fax3PutEOL_bb6_in(V_align_0,V_5,C,D):1+ loop_cont_eval_Fax3PutEOL_bb6_in(E,D,B):1
     [V_5>=V_align_0,E=2,C=2] 
* CE 49: eval_Fax3PutEOL_bb5_in(V_5,V_align_0,B) = 1+ eval_Fax3PutEOL_bb6_in(V_align_0,V_5,C,D):2+ loop_cont_eval_Fax3PutEOL_bb6_in(E,D,B):1
     [V_align_0>=V_5+1,E=2,C=2] 
* CE 50: eval_Fax3PutEOL_bb5_in(V_5,V_align_0,B) = 1+ eval_Fax3PutEOL_bb6_in(V_align_0,V_5,C,D):3+ loop_cont_eval_Fax3PutEOL_bb6_in(E,D,B):2
     [V_5>=V_align_0,E=3,C=3] 
* CE 51: eval_Fax3PutEOL_bb5_in(V_5,V_align_0,B) = 1+ eval_Fax3PutEOL_bb6_in(V_align_0,V_5,C,D):4+ loop_cont_eval_Fax3PutEOL_bb6_in(E,D,B):2
     [V_align_0>=V_5+1,E=3,C=3] 
* CE 52: eval_Fax3PutEOL_bb5_in(V_5,V_align_0,B) = 1+ eval_Fax3PutEOL_bb6_in(C,V_5,D,E):5+ loop_cont_eval_Fax3PutEOL_bb6_in(F,E,B):3
     [E>=0,12>=E,C+E=V_5,V_align_0+E=V_5,F=4,D=4] 
* CE 53: eval_Fax3PutEOL_bb5_in(V_5,V_align_0,B) = 1+ eval_Fax3PutEOL_bb6_in(C,V_5,D,E):5+ loop_cont_eval_Fax3PutEOL_bb6_in(F,E,B):4
     [E>=12,C+E=V_5,V_align_0+E=V_5,F=4,D=4] 
* CE 54: eval_Fax3PutEOL_bb5_in(V_5,V_align_0,B) = 1+ eval_Fax3PutEOL_bb6_in(V_align_0,V_5,C,D):6+ loop_cont_eval_Fax3PutEOL_bb6_in(E,D,B):3
     [V_align_0+D>=V_5+8,D>=0,7>=D,E=4,C=4] 

### Cost equations --> "Loop" of eval_Fax3PutEOL_bb5_in/3 
* CEs [49,51,54] --> Loop 39 
* CEs [48,50,52,53] --> Loop 40 

#### Loops of eval_Fax3PutEOL_bb5_in/3 
* Loop 39: eval_Fax3PutEOL_bb5_in(V_5,V_align_0,B) [V_align_0>=V_5+1] 
* Loop 40: eval_Fax3PutEOL_bb5_in(V_5,V_align_0,B) [V_5>=V_align_0] 

### Ranking functions of CR eval_Fax3PutEOL_bb5_in(V_5,V_align_0,B) 

#### Partial ranking functions of CR eval_Fax3PutEOL_bb5_in(V_5,V_align_0,B) 


### Resulting Chains:eval_Fax3PutEOL_bb5_in(V_5,V_align_0,B) 
* [40]
* [39]


### Merging Chains  eval_Fax3PutEOL_bb5_in/3 into  External patterns of execution 
* [[39]] --> 1 
* [[40]] --> 2 


### Specialization of cost equations eval_Fax3PutEOL_bb0_in/1 
* CE 3 is refined into CE [55,56] 
* CE 4 is refined into CE [57,58] 


#### Refined cost equations eval_Fax3PutEOL_bb0_in/1 
* CE 55: eval_Fax3PutEOL_bb0_in(B) = 0+ eval_Fax3PutEOL_bb5_in(C,D,B):1
     [D>=C+1] 
* CE 56: eval_Fax3PutEOL_bb0_in(B) = 0+ eval_Fax3PutEOL_bb5_in(C,D,B):2
     [C>=D] 
* CE 57: eval_Fax3PutEOL_bb0_in(B) = 0+ eval_Fax3PutEOL_bb14_in(C,B):1
     [12>=C] 
* CE 58: eval_Fax3PutEOL_bb0_in(B) = 0+ eval_Fax3PutEOL_bb14_in(C,B):2
     [C>=12] 

### Cost equations --> "Loop" of eval_Fax3PutEOL_bb0_in/1 
* CEs [55,56,57,58] --> Loop 41 

#### Loops of eval_Fax3PutEOL_bb0_in/1 
* Loop 41: eval_Fax3PutEOL_bb0_in(B) [] 

### Ranking functions of CR eval_Fax3PutEOL_bb0_in(B) 

#### Partial ranking functions of CR eval_Fax3PutEOL_bb0_in(B) 


### Resulting Chains:eval_Fax3PutEOL_bb0_in(B) 
* [41]


### Merging Chains  eval_Fax3PutEOL_bb0_in/1 into  External patterns of execution 
* [[41]] --> 1 


### Specialization of cost equations eval_Fax3PutEOL_start/1 
* CE 2 is refined into CE [59] 


#### Refined cost equations eval_Fax3PutEOL_start/1 
* CE 59: eval_Fax3PutEOL_start(B) = 0+ eval_Fax3PutEOL_bb0_in(B):1
     [] 

### Cost equations --> "Loop" of eval_Fax3PutEOL_start/1 
* CEs [59] --> Loop 42 

#### Loops of eval_Fax3PutEOL_start/1 
* Loop 42: eval_Fax3PutEOL_start(B) [] 

### Ranking functions of CR eval_Fax3PutEOL_start(B) 

#### Partial ranking functions of CR eval_Fax3PutEOL_start(B) 


### Resulting Chains:eval_Fax3PutEOL_start(B) 
* [42]


### Merging Chains  eval_Fax3PutEOL_start/1 into  External patterns of execution 
* [[42]] --> 1 


Computing Bounds
=====================================

#### Cost of loops [20] 

 * loop 20:eval_Fax3PutEOL_bb17_in(V_length_1,V_bit_4,B) -> [eval_Fax3PutEOL_bb17_in(V_length_1',V_bit_4',B')] 
1
#### Cost of phase [20]:eval_Fax3PutEOL_bb17_in(V_length_1,V_bit_4,B) -> [eval_Fax3PutEOL_bb17_in(V_length_1',V_bit_4',B')] 
1*it(20)+0
  Such that:it(20) =< V_length_1/8-V_bit_4/8
it(20) =< V_length_1/8-V_bit_4/8-V_length_1'/8+V_bit_4'/8

#### Cost of phase [20]:eval_Fax3PutEOL_bb17_in(V_length_1,V_bit_4,B) -> [eval_Fax3PutEOL_bb17_in(V_length_1',V_bit_4',B')] 
1*it(20)+0
  Such that:it(20) =< V_length_1/8-V_bit_4/8
it(20) =< V_length_1/8-V_bit_4/8-V_length_1'/8+V_bit_4'/8

#### Cost of phase [20]:eval_Fax3PutEOL_bb17_in(V_length_1,V_bit_4,B) -> [eval_Fax3PutEOL_bb17_in(V_length_1',V_bit_4',B')] 
1*it(20)+0
  Such that:it(20) =< V_length_1/8-V_bit_4/8
it(20) =< V_length_1/8-V_bit_4/8-V_length_1'/8+V_bit_4'/8

#### Cost of chains of eval_Fax3PutEOL_bb17_in(V_length_1,V_bit_4,B):
* Chain [[20],23]: 1*it(20)+0
  Such that:it(20) =< V_length_1/8-V_bit_4/8

  with precondition: [B=5,V_length_1>=1,V_length_1>=V_bit_4+1] 

* Chain [[20],22]: 1*it(20)+0
  Such that:it(20) =< V_length_1/8-V_bit_4/8

  with precondition: [B=6,V_length_1>=1,V_length_1>=V_bit_4+1] 

* Chain [[20],21]: 1*it(20)+0
  Such that:it(20) =< V_length_1/8-V_bit_4/8

  with precondition: [B=7,V_length_1>=1,V_length_1>=V_bit_4+1] 

* Chain [23]: 0
  with precondition: [B=5,V_length_1>=1,V_bit_4>=V_length_1] 

* Chain [22]: 0
  with precondition: [B=6,V_length_1>=1,V_bit_4>=V_length_1] 

* Chain [21]: 0
  with precondition: [B=7,V_length_1>=1,V_bit_4>=V_length_1] 


#### Cost of chains of loop_cont_eval_Fax3PutEOL_bb17_in(D,A):
* Chain [26]: 0
  with precondition: [D=5] 

* Chain [25]: 0
  with precondition: [D=6] 

* Chain [24]: 0
  with precondition: [D=7] 


#### Cost of chains of eval_Fax3PutEOL_bb16_in(V_bit_3,V_length_0,B):
* Chain [28]: 3*s(1)+1
  Such that:aux(1) =< -V_bit_3/8+V_length_0/8
s(1) =< aux(1)

  with precondition: [13>=V_length_0,V_length_0>=12,V_length_0>=V_bit_3+1] 

* Chain [27]: 1
  with precondition: [13>=V_length_0,V_length_0>=12,V_bit_3>=V_length_0] 


#### Cost of chains of eval_Fax3PutEOL_bb14_in(V_bit_3,B):
* Chain [30]: 3*s(5)+3*s(7)+1
  Such that:s(6) =< -V_bit_3/8+3/2
s(4) =< -V_bit_3/8+13/8
s(7) =< s(6)
s(5) =< s(4)

  with precondition: [12>=V_bit_3] 

* Chain [29]: 1
  with precondition: [V_bit_3>=12] 


#### Cost of loops [31] 

 * loop 31:eval_Fax3PutEOL_bb6_in(V_tparm_0,V_bit_0,B,C) -> [eval_Fax3PutEOL_bb6_in(V_tparm_0',V_bit_0',B',C')] 
1
#### Cost of phase [31]:eval_Fax3PutEOL_bb6_in(V_tparm_0,V_bit_0,B,C) -> [eval_Fax3PutEOL_bb6_in(V_tparm_0',V_bit_0',B',C')] 
1*it(31)+0
  Such that:it(31) =< V_tparm_0/8-V_bit_0/8
it(31) =< V_tparm_0/8-V_bit_0/8-V_tparm_0'/8+V_bit_0'/8

#### Cost of phase [31]:eval_Fax3PutEOL_bb6_in(V_tparm_0,V_bit_0,B,C) -> [eval_Fax3PutEOL_bb6_in(V_tparm_0',V_bit_0',B',C')] 
1*it(31)+0
  Such that:it(31) =< V_tparm_0/8-V_bit_0/8
it(31) =< V_tparm_0/8-V_bit_0/8-V_tparm_0'/8+V_bit_0'/8

#### Cost of phase [31]:eval_Fax3PutEOL_bb6_in(V_tparm_0,V_bit_0,B,C) -> [eval_Fax3PutEOL_bb6_in(V_tparm_0',V_bit_0',B',C')] 
1*it(31)+0
  Such that:it(31) =< V_tparm_0/8-V_bit_0/8
it(31) =< V_tparm_0/8-V_bit_0/8-V_tparm_0'/8+V_bit_0'/8

#### Cost of chains of eval_Fax3PutEOL_bb6_in(V_tparm_0,V_bit_0,B,C):
* Chain [[31],34]: 1*it(31)+0
  Such that:it(31) =< V_tparm_0/8-V_bit_0/8

  with precondition: [B=2,V_tparm_0>=V_bit_0+1] 

* Chain [[31],33]: 1*it(31)+0
  Such that:it(31) =< V_tparm_0/8-V_bit_0/8

  with precondition: [B=3,V_tparm_0>=V_bit_0+1] 

* Chain [[31],32]: 1*it(31)+0
  Such that:it(31) =< V_tparm_0/8-V_bit_0/8

  with precondition: [B=4,7>=C,C>=0,V_tparm_0+C>=V_bit_0+8] 

* Chain [34]: 0
  with precondition: [B=2,V_bit_0>=V_tparm_0] 

* Chain [33]: 0
  with precondition: [B=3,V_bit_0>=V_tparm_0] 

* Chain [32]: 0
  with precondition: [B=4,V_bit_0=V_tparm_0+C,V_bit_0>=V_tparm_0] 


#### Cost of chains of loop_cont_eval_Fax3PutEOL_bb6_in(E,A,B):
* Chain [38]: 3*s(10)+3*s(11)+1
  Such that:s(8) =< 1/2
s(9) =< 5/8
s(10) =< s(8)
s(11) =< s(9)

  with precondition: [E=2] 

* Chain [37]: 3*s(14)+3*s(15)+1
  Such that:s(12) =< 1/2
s(13) =< 5/8
s(14) =< s(12)
s(15) =< s(13)

  with precondition: [E=3] 

* Chain [36]: 3*s(18)+3*s(19)+1
  Such that:s(16) =< -A/8+3/2
s(17) =< -A/8+13/8
s(18) =< s(16)
s(19) =< s(17)

  with precondition: [E=4,12>=A] 

* Chain [35]: 1
  with precondition: [E=4,A>=12] 


#### Cost of chains of eval_Fax3PutEOL_bb5_in(V_5,V_align_0,B):
* Chain [40]: 6*s(22)+6*s(23)+3*s(30)+3*s(31)+2
  Such that:s(28) =< -V_5/8+V_align_0/8+3/2
s(29) =< -V_5/8+V_align_0/8+13/8
aux(2) =< 1/2
aux(3) =< 5/8
s(22) =< aux(2)
s(23) =< aux(3)
s(30) =< s(28)
s(31) =< s(29)

  with precondition: [V_5>=V_align_0] 

* Chain [39]: 3*s(32)+6*s(35)+6*s(36)+3*s(45)+3*s(46)+2
  Such that:s(43) =< -V_5/8+V_align_0/8+1/2
s(44) =< -V_5/8+V_align_0/8+5/8
aux(4) =< 1/2
aux(5) =< 5/8
aux(6) =< -V_5/8+V_align_0/8
s(32) =< aux(6)
s(35) =< aux(4)
s(36) =< aux(5)
s(45) =< s(43)
s(46) =< s(44)

  with precondition: [V_align_0>=V_5+1] 


#### Cost of chains of eval_Fax3PutEOL_bb0_in(B):
* Chain [41]: 1*aux(9)+0
  with precondition: [] 


#### Cost of chains of eval_Fax3PutEOL_start(B):
* Chain [42]: 1*s(69)+0
  with precondition: [] 


Closed-form bounds of eval_Fax3PutEOL_start(B): 
-------------------------------------
* Chain [42] with precondition: [] 
    - Upper bound: inf 
    - Complexity: infinity 

### Maximum cost of eval_Fax3PutEOL_start(B): inf 
Asymptotic class: infinity 

Time statistics: 
-------------------------------------
* Partial evaluation computed in 20 ms.
* Invariants computed in 23 ms.
   - Backward Invariants 17 ms.
   - Transitive Invariants 2 ms.
* Refinement performed in 62 ms.
* Termination proved in 4 ms.
* Upper bounds computed in 51 ms.
   - Equation cost structures 29 ms.
   - Phase cost structures 4 ms.
   - Chain cost structures 14 ms.
   - Solving cost expressions 0 ms.
* Total analysis performed in 187 ms.


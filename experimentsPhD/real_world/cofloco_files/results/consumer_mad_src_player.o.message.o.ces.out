Warning: Ignored call to eval_message_stop/1 in equation eval_message_bb10_in/1 

Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. recursive  : [eval_message_24/7,eval_message_25/7,eval_message_bb6_in/6]
1. non_recursive  : [eval_message_bb10_in/1]
2. non_recursive  : [eval_message_31/1]
3. non_recursive  : [eval_message_30/2]
4. non_recursive  : [eval_message_29/2]
5. non_recursive  : [eval_message_bb8_in/3]
6. non_recursive  : [loop_cont_eval_message_bb6_in/4]
7. non_recursive  : [eval_message_16/3]
8. non_recursive  : [eval_message_15/3]
9. non_recursive  : [eval_message_14/2]
10. non_recursive  : [eval_message_13/2]
11. non_recursive  : [eval_message_bb4_in/2]
12. non_recursive  : [eval_message_12/2]
13. non_recursive  : [eval_message_11/2]
14. non_recursive  : [eval_message_bb2_in/2]
15. non_recursive  : [eval_message_1/2]
16. non_recursive  : [eval_message_0/2]
17. non_recursive  : [eval_message_bb0_in/2]
18. non_recursive  : [eval_message_start/2]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into eval_message_bb6_in/6
1. SCC is completely evaluated into other SCCs
2. SCC is completely evaluated into other SCCs
3. SCC is completely evaluated into other SCCs
4. SCC is completely evaluated into other SCCs
5. SCC is partially evaluated into eval_message_bb8_in/3
6. SCC is completely evaluated into other SCCs
7. SCC is partially evaluated into eval_message_16/3
8. SCC is completely evaluated into other SCCs
9. SCC is completely evaluated into other SCCs
10. SCC is completely evaluated into other SCCs
11. SCC is completely evaluated into other SCCs
12. SCC is completely evaluated into other SCCs
13. SCC is completely evaluated into other SCCs
14. SCC is partially evaluated into eval_message_bb2_in/2
15. SCC is completely evaluated into other SCCs
16. SCC is completely evaluated into other SCCs
17. SCC is completely evaluated into other SCCs
18. SCC is partially evaluated into eval_message_start/2

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations eval_message_bb6_in/6 
* CE 8 is refined into CE [10] 
* CE 6 is refined into CE [11] 
* CE 7 is refined into CE [12] 


#### Refined cost equations eval_message_bb6_in/6 
* CE 10: eval_message_bb6_in(A,B,C,D,A,B) = 0
     [A>=B,D=2,C=0] 
* CE 11: eval_message_bb6_in(V__on_same_line,V_21,V_i_0,B,C,D) = 1+ eval_message_bb6_in(V__on_same_line,V_21,E,F,C,D)
     [V__on_same_line>=V_21+V_i_0,V_i_0>=1,V_i_0=E+1,F=2,B=2] 
* CE 12: eval_message_bb6_in(V__on_same_line,V_21,V_i_0,B,C,D) = 1+ eval_message_bb6_in(V__on_same_line,V_21,E,F,C,D)
     [V__on_same_line>=V_21+V_i_0,0>=V_i_0+1,V_i_0=E+1,F=2,B=2] 

### Cost equations --> "Loop" of eval_message_bb6_in/6 
* CEs [11] --> Loop 8 
* CEs [12] --> Loop 9 
* CEs [10] --> Loop 10 

#### Loops of eval_message_bb6_in/6 
* Loop 8: eval_message_bb6_in(V__on_same_line,V_21,V_i_0,B,C,D)->  eval_message_bb6_in(V__on_same_line,V_21,V_i_0',B',C,D)
                  [V__on_same_line>=V_21+V_i_0,V_i_0>=1,V_i_0=V_i_0'+1,B'=2,B=2] 
* Loop 9: eval_message_bb6_in(V__on_same_line,V_21,V_i_0,B,C,D)->  eval_message_bb6_in(V__on_same_line,V_21,V_i_0',B',C,D)
                  [V__on_same_line>=V_21+V_i_0,0>=V_i_0+1,V_i_0=V_i_0'+1,B'=2,B=2] 
* Loop 10: eval_message_bb6_in(A,B,C,D,A,B) [A>=B,D=2,C=0] 

### Ranking functions of CR eval_message_bb6_in(V__on_same_line,V_21,V_i_0,B,C,D) 
* RF of phase [8]: [V_i_0]

#### Partial ranking functions of CR eval_message_bb6_in(V__on_same_line,V_21,V_i_0,B,C,D) 
* Partial RF of phase [8]:
  - RF of loop [8:1]:
    V_i_0


### Resulting Chains:eval_message_bb6_in(V__on_same_line,V_21,V_i_0,B,C,D) 
* [[9]]...
* [[8],10]
* [10]


### Merging Chains  eval_message_bb6_in/6 into  External patterns of execution 
* [[10]] --> 1 
* [[10,[8]]] --> 2 
* [[[9]]] --> 3 


### Specialization of cost equations eval_message_bb8_in/3 
* CE 9 is refined into CE [13] 


#### Refined cost equations eval_message_bb8_in/3 
* CE 13: eval_message_bb8_in(V__on_same_line,V_21,B) = 0
     [] 

### Cost equations --> "Loop" of eval_message_bb8_in/3 
* CEs [13] --> Loop 11 

#### Loops of eval_message_bb8_in/3 
* Loop 11: eval_message_bb8_in(V__on_same_line,V_21,B) [] 

### Ranking functions of CR eval_message_bb8_in(V__on_same_line,V_21,B) 

#### Partial ranking functions of CR eval_message_bb8_in(V__on_same_line,V_21,B) 


### Resulting Chains:eval_message_bb8_in(V__on_same_line,V_21,B) 
* [11]


### Merging Chains  eval_message_bb8_in/3 into  External patterns of execution 
* [[11]] --> 1 


### Specialization of cost equations eval_message_16/3 
* CE 4 is refined into CE [14,15,16] 
* CE 5 is refined into CE [17] 


#### Refined cost equations eval_message_16/3 
* CE 14: eval_message_16(A,A,B) = 1+ eval_message_bb6_in(A,A,C,D,A,A):1+ eval_message_bb8_in(A,A,B):1
     [D=2,C=0] 
* CE 15: eval_message_16(V__on_same_line,V_21,B) = 1+ eval_message_bb6_in(V__on_same_line,V_21,C,D,V__on_same_line,V_21):2+ eval_message_bb8_in(V__on_same_line,V_21,B):1
     [V__on_same_line>=V_21+1,V__on_same_line=V_21+C,D=2] 
* CE 16: eval_message_16(V__on_same_line,V_21,B) = 1+ eval_message_bb6_in(V__on_same_line,V_21,C,D,E,F):3
     [V_21>=V__on_same_line+1,V__on_same_line=V_21+C,D=2] 
* CE 17: eval_message_16(V__on_same_line,V_21,B) = 0+ eval_message_bb8_in(V__on_same_line,V_21,B):1
     [] 

### Cost equations --> "Loop" of eval_message_16/3 
* CEs [14,15,17] --> Loop 12 
* CEs [16] --> Loop 13 

#### Loops of eval_message_16/3 
* Loop 12: eval_message_16(V__on_same_line,V_21,B) [] 
* Loop 13: eval_message_16(V__on_same_line,V_21,B) [V_21>=V__on_same_line+1] 

### Ranking functions of CR eval_message_16(V__on_same_line,V_21,B) 

#### Partial ranking functions of CR eval_message_16(V__on_same_line,V_21,B) 


### Resulting Chains:eval_message_16(V__on_same_line,V_21,B) 
* [13]...
* [12]


### Merging Chains  eval_message_16/3 into  External patterns of execution 
* [[12]] --> 1 
* [[13]] --> 2 


### Specialization of cost equations eval_message_bb2_in/2 
* CE 3 is refined into CE [18,19] 


#### Refined cost equations eval_message_bb2_in/2 
* CE 18: eval_message_bb2_in(V__on_same_line,B) = 0+ eval_message_16(V__on_same_line,C,B):1
     [] 
* CE 19: eval_message_bb2_in(V__on_same_line,B) = 0+ eval_message_16(V__on_same_line,C,B):2
     [C>=V__on_same_line+1] 

### Cost equations --> "Loop" of eval_message_bb2_in/2 
* CEs [19] --> Loop 14 
* CEs [18] --> Loop 15 

#### Loops of eval_message_bb2_in/2 
* Loop 14: eval_message_bb2_in(V__on_same_line,B) [] 
* Loop 15: eval_message_bb2_in(V__on_same_line,B) [] 

### Ranking functions of CR eval_message_bb2_in(V__on_same_line,B) 

#### Partial ranking functions of CR eval_message_bb2_in(V__on_same_line,B) 


### Resulting Chains:eval_message_bb2_in(V__on_same_line,B) 
* [15]
* [14]...


### Merging Chains  eval_message_bb2_in/2 into  External patterns of execution 
* [[15]] --> 1 
* [[14]] --> 2 


### Specialization of cost equations eval_message_start/2 
* CE 2 is refined into CE [20,21] 


#### Refined cost equations eval_message_start/2 
* CE 20: eval_message_start(V__on_same_line,B) = 0+ eval_message_bb2_in(V__on_same_line,B):1
     [] 
* CE 21: eval_message_start(V__on_same_line,B) = 0+ eval_message_bb2_in(V__on_same_line,B):2
     [] 

### Cost equations --> "Loop" of eval_message_start/2 
* CEs [21] --> Loop 16 
* CEs [20] --> Loop 17 

#### Loops of eval_message_start/2 
* Loop 16: eval_message_start(V__on_same_line,B) [] 
* Loop 17: eval_message_start(V__on_same_line,B) [] 

### Ranking functions of CR eval_message_start(V__on_same_line,B) 

#### Partial ranking functions of CR eval_message_start(V__on_same_line,B) 


### Resulting Chains:eval_message_start(V__on_same_line,B) 
* [17]
* [16]...


### Merging Chains  eval_message_start/2 into  External patterns of execution 
* [[17]] --> 1 
* [[16]] --> 2 


Computing Bounds
=====================================

#### Cost of loops [9] 

 * loop 9:eval_message_bb6_in(V__on_same_line,V_21,V_i_0,B,C,D) -> [eval_message_bb6_in(V__on_same_line',V_21',V_i_0',B',C',D')] 
1
#### Cost of phase [9]:eval_message_bb6_in(V__on_same_line,V_21,V_i_0,B,C,D) -> [eval_message_bb6_in(V__on_same_line',V_21',V_i_0',B',C',D')] 
1*it(9)+0
#### Cost of loops [8] 

 * loop 8:eval_message_bb6_in(V__on_same_line,V_21,V_i_0,B,C,D) -> [eval_message_bb6_in(V__on_same_line',V_21',V_i_0',B',C',D')] 
1
#### Cost of phase [8]:eval_message_bb6_in(V__on_same_line,V_21,V_i_0,B,C,D) -> [eval_message_bb6_in(V__on_same_line',V_21',V_i_0',B',C',D')] 
1*it(8)+0
  Such that:it(8) =< V_i_0
it(8) =< V_i_0-V_i_0'

#### Cost of chains of eval_message_bb6_in(V__on_same_line,V_21,V_i_0,B,C,D):
* Chain [[9]]...: 1*it(9)+0
  with precondition: [V__on_same_line>=V_21+V_i_0,0>=V_i_0+1,B=2] 

* Chain [[8],10]: 1*it(8)+0
  Such that:it(8) =< V_i_0

  with precondition: [B=2,V__on_same_line=C,V_21=D,V_i_0>=1,V__on_same_line>=V_21+V_i_0] 

* Chain [10]: 0
  with precondition: [V_i_0=0,B=2,V__on_same_line=C,V_21=D,V__on_same_line>=V_21] 


#### Cost of chains of eval_message_bb8_in(V__on_same_line,V_21,B):
* Chain [11]: 0
  with precondition: [] 


#### Cost of chains of eval_message_16(V__on_same_line,V_21,B):
* Chain [13]...: 1*s(1)+1
  with precondition: [V_21>=V__on_same_line+1] 

* Chain [12]: 1*s(2)+1
  Such that:s(2) =< V__on_same_line-V_21

  with precondition: [] 


#### Cost of chains of eval_message_bb2_in(V__on_same_line,B):
* Chain [15]: 1*s(3)+1
  with precondition: [] 

* Chain [14]...: 1*s(4)+1
  with precondition: [] 


#### Cost of chains of eval_message_start(V__on_same_line,B):
* Chain [17]: 1*s(5)+1
  with precondition: [] 

* Chain [16]...: 1*s(6)+1
  with precondition: [] 


Closed-form bounds of eval_message_start(V__on_same_line,B): 
-------------------------------------
* Chain [17] with precondition: [] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [16]... with precondition: [] 
    - Upper bound: inf 
    - Complexity: infinity 

### Maximum cost of eval_message_start(V__on_same_line,B): inf 
Asymptotic class: infinity 

Time statistics: 
-------------------------------------
* Partial evaluation computed in 51 ms.
* Invariants computed in 15 ms.
   - Backward Invariants 5 ms.
   - Transitive Invariants 4 ms.
* Refinement performed in 32 ms.
* Termination proved in 4 ms.
* Upper bounds computed in 19 ms.
   - Equation cost structures 10 ms.
   - Phase cost structures 6 ms.
   - Chain cost structures 6 ms.
   - Solving cost expressions 0 ms.
* Total analysis performed in 177 ms.


Warning: Ignored call to eval_PackBitsEncode_stop/1 in equation eval_PackBitsEncode_bb37_in/1 

Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. recursive  : [eval_PackBitsEncode_bb3_in/5]
1. recursive  : [eval_PackBitsEncode_bb11_in/7]
2. recursive  : [eval_PackBitsEncode_28/6,eval_PackBitsEncode_29/6,eval_PackBitsEncode_43/5,eval_PackBitsEncode_44/5,eval_PackBitsEncode_NewDefault_in/5,eval_PackBitsEncode_bb16_in/5,eval_PackBitsEncode_bb7_in/5,eval_PackBitsEncode_bb9_in/5,loop_cont_eval_PackBitsEncode_bb11_in/6]
3. recursive  : [eval_PackBitsEncode_NewDefault4_in/3,eval_PackBitsEncode_bb1_in/2,eval_PackBitsEncode_bb6_in/3,loop_cont_eval_PackBitsEncode_bb3_in/4,loop_cont_eval_PackBitsEncode_bb7_in/4]
4. non_recursive  : [eval_PackBitsEncode_bb37_in/1]
5. non_recursive  : [loop_cont_eval_PackBitsEncode_bb1_in/2]
6. non_recursive  : [eval_PackBitsEncode_bb0_in/2]
7. non_recursive  : [eval_PackBitsEncode_start/3]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into eval_PackBitsEncode_bb3_in/5
1. SCC is partially evaluated into eval_PackBitsEncode_bb11_in/7
2. SCC is partially evaluated into eval_PackBitsEncode_bb7_in/5
3. SCC is partially evaluated into eval_PackBitsEncode_bb1_in/2
4. SCC is completely evaluated into other SCCs
5. SCC is completely evaluated into other SCCs
6. SCC is partially evaluated into eval_PackBitsEncode_bb0_in/2
7. SCC is partially evaluated into eval_PackBitsEncode_start/3

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations eval_PackBitsEncode_bb3_in/5 
* CE 9 is refined into CE [20] 
* CE 10 is refined into CE [21] 
* CE 8 is refined into CE [22] 


#### Refined cost equations eval_PackBitsEncode_bb3_in/5 
* CE 20: eval_PackBitsEncode_bb3_in(A,B,C,A,B) = 0
     [A>=B+1,B>=1,C=3] 
* CE 21: eval_PackBitsEncode_bb3_in(A,B,C,A,D) = 0
     [A>=1,D=0,C=3,B=0] 
* CE 22: eval_PackBitsEncode_bb3_in(V__01,V__1,B,C,D) = 1+ eval_PackBitsEncode_bb3_in(V__01,E,F,C,D)
     [V__01>=V__1+1,V__1>=1,V__1=E+1,F=3,B=3] 

### Cost equations --> "Loop" of eval_PackBitsEncode_bb3_in/5 
* CEs [22] --> Loop 15 
* CEs [20] --> Loop 16 
* CEs [21] --> Loop 17 

#### Loops of eval_PackBitsEncode_bb3_in/5 
* Loop 15: eval_PackBitsEncode_bb3_in(V__01,V__1,B,C,D)->  eval_PackBitsEncode_bb3_in(V__01,V__1',B',C,D)
                  [V__01>=V__1+1,V__1>=1,V__1=V__1'+1,B'=3,B=3] 
* Loop 16: eval_PackBitsEncode_bb3_in(A,B,C,A,B) [A>=B+1,B>=1,C=3] 
* Loop 17: eval_PackBitsEncode_bb3_in(A,B,C,A,D) [A>=1,D=0,C=3,B=0] 

### Ranking functions of CR eval_PackBitsEncode_bb3_in(V__01,V__1,B,C,D) 
* RF of phase [15]: [V__1]

#### Partial ranking functions of CR eval_PackBitsEncode_bb3_in(V__01,V__1,B,C,D) 
* Partial RF of phase [15]:
  - RF of loop [15:1]:
    V__1


### Resulting Chains:eval_PackBitsEncode_bb3_in(V__01,V__1,B,C,D) 
* [[15],17]
* [[15],16]
* [17]
* [16]


### Merging Chains  eval_PackBitsEncode_bb3_in/5 into  External patterns of execution 
* [[17]] --> 1 
* [[17,[15]]] --> 2 
* [[16]] --> 3 
* [[16,[15]]] --> 4 


### Specialization of cost equations eval_PackBitsEncode_bb11_in/7 
* CE 19 is refined into CE [23] 
* CE 18 is refined into CE [24] 


#### Refined cost equations eval_PackBitsEncode_bb11_in/7 
* CE 23: eval_PackBitsEncode_bb11_in(A,B,C,D,E,A,B) = 0
     [C>=D,0>=D,E=2] 
* CE 24: eval_PackBitsEncode_bb11_in(V__01,V__1,V_33,V_slop_0,B,C,D) = 1+ eval_PackBitsEncode_bb11_in(V__01,V__1,V_33,E,F,C,D)
     [V_33>=V_slop_0,V_slop_0>=1,V_slop_0=E+1,F=2,B=2] 

### Cost equations --> "Loop" of eval_PackBitsEncode_bb11_in/7 
* CEs [24] --> Loop 18 
* CEs [23] --> Loop 19 

#### Loops of eval_PackBitsEncode_bb11_in/7 
* Loop 18: eval_PackBitsEncode_bb11_in(V__01,V__1,V_33,V_slop_0,B,C,D)->  eval_PackBitsEncode_bb11_in(V__01,V__1,V_33,V_slop_0',B',C,D)
                  [V_33>=V_slop_0,V_slop_0>=1,V_slop_0=V_slop_0'+1,B'=2,B=2] 
* Loop 19: eval_PackBitsEncode_bb11_in(A,B,C,D,E,A,B) [C>=D,0>=D,E=2] 

### Ranking functions of CR eval_PackBitsEncode_bb11_in(V__01,V__1,V_33,V_slop_0,B,C,D) 
* RF of phase [18]: [V_slop_0]

#### Partial ranking functions of CR eval_PackBitsEncode_bb11_in(V__01,V__1,V_33,V_slop_0,B,C,D) 
* Partial RF of phase [18]:
  - RF of loop [18:1]:
    V_slop_0


### Resulting Chains:eval_PackBitsEncode_bb11_in(V__01,V__1,V_33,V_slop_0,B,C,D) 
* [[18],19]
* [19]


### Merging Chains  eval_PackBitsEncode_bb11_in/7 into  External patterns of execution 
* [[19]] --> 1 
* [[19,[18]]] --> 2 


### Specialization of cost equations eval_PackBitsEncode_bb7_in/5 
* CE 11 is refined into CE [25,26] 
* CE 12 is refined into CE [27] 
* CE 13 is refined into CE [28,29] 
* CE 14 is refined into CE [30] 
* CE 17 is refined into CE [31] 
* CE 15 is refined into CE [32,33] 
* CE 16 is refined into CE [34] 


#### Refined cost equations eval_PackBitsEncode_bb7_in/5 
* CE 25: eval_PackBitsEncode_bb7_in(A,B,C,A,B) = 1+ eval_PackBitsEncode_bb11_in(A,B,D,D,E,A,B):1
     [0>=D,E=2,C=6] 
* CE 26: eval_PackBitsEncode_bb7_in(A,B,C,A,B) = 1+ eval_PackBitsEncode_bb11_in(A,B,D,D,E,A,B):2
     [D>=1,E=2,C=6] 
* CE 27: eval_PackBitsEncode_bb7_in(A,B,C,A,B) = 0
     [C=6] 
* CE 28: eval_PackBitsEncode_bb7_in(A,B,C,B,D) = 1+ eval_PackBitsEncode_bb11_in(A,B,E,E,F,A,B):1
     [0>=E,F=2,C=5] 
* CE 29: eval_PackBitsEncode_bb7_in(A,B,C,B,D) = 1+ eval_PackBitsEncode_bb11_in(A,B,E,E,F,A,B):2
     [E>=1,F=2,C=5] 
* CE 30: eval_PackBitsEncode_bb7_in(A,B,C,B,D) = 0
     [C=5] 
* CE 31: eval_PackBitsEncode_bb7_in(V__01,V__1,B,C,D) = 0
     [B=4] 
* CE 32: eval_PackBitsEncode_bb7_in(V__01,V__1,B,C,D) = 2+ eval_PackBitsEncode_bb11_in(V__01,V__1,E,E,F,V__01,V__1):1+ eval_PackBitsEncode_bb7_in(V__01,V__1,B,C,D)
     [B>=4,0>=E,6>=B,F=2] 
* CE 33: eval_PackBitsEncode_bb7_in(V__01,V__1,B,C,D) = 2+ eval_PackBitsEncode_bb11_in(V__01,V__1,E,E,F,V__01,V__1):2+ eval_PackBitsEncode_bb7_in(V__01,V__1,B,C,D)
     [E>=1,B>=4,6>=B,F=2] 
* CE 34: eval_PackBitsEncode_bb7_in(V__01,V__1,B,C,D) = 1+ eval_PackBitsEncode_bb7_in(V__01,V__1,B,C,D)
     [B>=4,6>=B] 

### Cost equations --> "Loop" of eval_PackBitsEncode_bb7_in/5 
* CEs [32,33,34] --> Loop 20 
* CEs [25,26,27] --> Loop 21 
* CEs [28,29,30] --> Loop 22 
* CEs [31] --> Loop 23 

#### Loops of eval_PackBitsEncode_bb7_in/5 
* Loop 20: eval_PackBitsEncode_bb7_in(V__01,V__1,B,C,D)->  eval_PackBitsEncode_bb7_in(V__01,V__1,B,C,D)
                  [B>=4,6>=B] 
* Loop 21: eval_PackBitsEncode_bb7_in(A,B,C,A,B) [C=6] 
* Loop 22: eval_PackBitsEncode_bb7_in(A,B,C,B,D) [C=5] 
* Loop 23: eval_PackBitsEncode_bb7_in(V__01,V__1,B,C,D) [B=4] 

### Ranking functions of CR eval_PackBitsEncode_bb7_in(V__01,V__1,B,C,D) 

#### Partial ranking functions of CR eval_PackBitsEncode_bb7_in(V__01,V__1,B,C,D) 


### Resulting Chains:eval_PackBitsEncode_bb7_in(V__01,V__1,B,C,D) 
* [[20]]...
* [[20],23]
* [[20],22]
* [[20],21]
* [23]
* [22]
* [21]


### Merging Chains  eval_PackBitsEncode_bb7_in/5 into  External patterns of execution 
* [[23],[23,[20]]] --> 1 
* [[22],[22,[20]]] --> 2 
* [[21],[21,[20]]] --> 3 
* [[[20]]] --> 4 


### Specialization of cost equations eval_PackBitsEncode_bb1_in/2 
* CE 5 is refined into CE [35,36,37,38,39,40,41,42] 
* CE 7 is refined into CE [43] 
* CE 4 is refined into CE [44,45,46,47,48,49,50,51] 
* CE 6 is refined into CE [52,53,54,55,56,57,58,59] 


#### Refined cost equations eval_PackBitsEncode_bb1_in/2 
* CE 35: eval_PackBitsEncode_bb1_in(V__01,B) = 2+ eval_PackBitsEncode_bb3_in(C,D,E,F,G):1+ eval_PackBitsEncode_bb7_in(H,I,J,K,L):1
     [J=4,I=0,H=1,G=0,F=1,E=3,D=0,C=1,B=4,V__01=1] 
* CE 36: eval_PackBitsEncode_bb1_in(V__01,B) = 2+ eval_PackBitsEncode_bb3_in(C,D,E,F,G):1+ eval_PackBitsEncode_bb7_in(H,I,J,K,L):4
     [J=4,I=0,H=1,G=0,F=1,E=3,D=0,C=1,B=4,V__01=1] 
* CE 37: eval_PackBitsEncode_bb1_in(V__01,B) = 2+ eval_PackBitsEncode_bb3_in(V__01,C,D,V__01,E):2+ eval_PackBitsEncode_bb7_in(V__01,F,G,H,I):1
     [V__01>=2,V__01=C+1,G=4,F=0,E=0,D=3,B=4] 
* CE 38: eval_PackBitsEncode_bb1_in(V__01,B) = 2+ eval_PackBitsEncode_bb3_in(V__01,C,D,V__01,E):2+ eval_PackBitsEncode_bb7_in(V__01,F,G,H,I):4
     [V__01>=2,V__01=C+1,G=4,F=0,E=0,D=3,B=4] 
* CE 39: eval_PackBitsEncode_bb1_in(V__01,B) = 2+ eval_PackBitsEncode_bb3_in(V__01,C,D,V__01,E):3+ eval_PackBitsEncode_bb7_in(V__01,F,G,H,I):1
     [V__01>=2,V__01=F+1,V__01=E+1,V__01=C+1,G=4,D=3,B=4] 
* CE 40: eval_PackBitsEncode_bb1_in(V__01,B) = 2+ eval_PackBitsEncode_bb3_in(V__01,C,D,V__01,E):3+ eval_PackBitsEncode_bb7_in(V__01,F,G,H,I):4
     [V__01>=2,V__01=F+1,V__01=E+1,V__01=C+1,G=4,D=3,B=4] 
* CE 41: eval_PackBitsEncode_bb1_in(V__01,B) = 2+ eval_PackBitsEncode_bb3_in(V__01,C,D,V__01,E):4+ eval_PackBitsEncode_bb7_in(V__01,E,F,G,H):1
     [V__01>=E+2,E>=1,V__01=C+1,F=4,D=3,B=4] 
* CE 42: eval_PackBitsEncode_bb1_in(V__01,B) = 2+ eval_PackBitsEncode_bb3_in(V__01,C,D,V__01,E):4+ eval_PackBitsEncode_bb7_in(V__01,E,F,G,H):4
     [V__01>=E+2,E>=1,V__01=C+1,F=4,D=3,B=4] 
* CE 43: eval_PackBitsEncode_bb1_in(V__01,B) = 0
     [0>=V__01,B=4] 
* CE 44: eval_PackBitsEncode_bb1_in(V__01,B) = 3+ eval_PackBitsEncode_bb3_in(C,D,E,F,G):1+ eval_PackBitsEncode_bb7_in(H,I,J,K,L):2+ eval_PackBitsEncode_bb1_in(M,N)
     [N=4,M=0,K=0,J=5,I=0,H=1,G=0,F=1,E=3,D=0,C=1,B=4,V__01=1] 
* CE 45: eval_PackBitsEncode_bb1_in(V__01,B) = 3+ eval_PackBitsEncode_bb3_in(C,D,E,F,G):1+ eval_PackBitsEncode_bb7_in(H,I,J,K,L):4
     [M=4,J=5,I=0,H=1,G=0,F=1,E=3,D=0,C=1,B=4,V__01=1] 
* CE 46: eval_PackBitsEncode_bb1_in(V__01,B) = 3+ eval_PackBitsEncode_bb3_in(V__01,C,D,V__01,E):2+ eval_PackBitsEncode_bb7_in(V__01,F,G,H,I):2+ eval_PackBitsEncode_bb1_in(J,K)
     [V__01>=2,V__01=C+1,K=4,J=0,H=0,G=5,F=0,E=0,D=3,B=4] 
* CE 47: eval_PackBitsEncode_bb1_in(V__01,B) = 3+ eval_PackBitsEncode_bb3_in(V__01,C,D,V__01,E):2+ eval_PackBitsEncode_bb7_in(V__01,F,G,H,I):4
     [V__01>=2,V__01=C+1,J=4,G=5,F=0,E=0,D=3,B=4] 
* CE 48: eval_PackBitsEncode_bb1_in(V__01,B) = 3+ eval_PackBitsEncode_bb3_in(C,D,E,F,D):3+ eval_PackBitsEncode_bb7_in(G,D,H,D,I):2+ eval_PackBitsEncode_bb1_in(D,J)
     [D>=1,D+1=G,D+1=F,D+1=C,D+1=V__01,J=4,H=5,E=3,B=4] 
* CE 49: eval_PackBitsEncode_bb1_in(V__01,B) = 3+ eval_PackBitsEncode_bb3_in(V__01,C,D,V__01,E):3+ eval_PackBitsEncode_bb7_in(V__01,F,G,H,I):4
     [V__01>=2,V__01=F+1,V__01=E+1,V__01=C+1,J=4,G=5,D=3,B=4] 
* CE 50: eval_PackBitsEncode_bb1_in(V__01,B) = 3+ eval_PackBitsEncode_bb3_in(V__01,C,D,V__01,E):4+ eval_PackBitsEncode_bb7_in(V__01,E,F,E,G):2+ eval_PackBitsEncode_bb1_in(E,H)
     [V__01>=E+2,E>=1,V__01=C+1,H=4,F=5,D=3,B=4] 
* CE 51: eval_PackBitsEncode_bb1_in(V__01,B) = 3+ eval_PackBitsEncode_bb3_in(V__01,C,D,V__01,E):4+ eval_PackBitsEncode_bb7_in(V__01,E,F,G,H):4
     [V__01>=E+2,E>=1,V__01=C+1,I=4,F=5,D=3,B=4] 
* CE 52: eval_PackBitsEncode_bb1_in(V__01,B) = 3+ eval_PackBitsEncode_bb3_in(C,D,E,F,G):1+ eval_PackBitsEncode_bb7_in(H,I,J,K,L):3+ eval_PackBitsEncode_bb1_in(M,N)
     [N=4,M=0,L=0,K=1,J=6,I=0,H=1,G=0,F=1,E=3,D=0,C=1,B=4,V__01=1] 
* CE 53: eval_PackBitsEncode_bb1_in(V__01,B) = 3+ eval_PackBitsEncode_bb3_in(C,D,E,F,G):1+ eval_PackBitsEncode_bb7_in(H,I,J,K,L):4
     [M=4,J=6,I=0,H=1,G=0,F=1,E=3,D=0,C=1,B=4,V__01=1] 
* CE 54: eval_PackBitsEncode_bb1_in(V__01,B) = 3+ eval_PackBitsEncode_bb3_in(V__01,C,D,V__01,E):2+ eval_PackBitsEncode_bb7_in(V__01,F,G,V__01,H):3+ eval_PackBitsEncode_bb1_in(I,J)
     [V__01>=2,V__01=C+1,J=4,I=0,H=0,G=6,F=0,E=0,D=3,B=4] 
* CE 55: eval_PackBitsEncode_bb1_in(V__01,B) = 3+ eval_PackBitsEncode_bb3_in(V__01,C,D,V__01,E):2+ eval_PackBitsEncode_bb7_in(V__01,F,G,H,I):4
     [V__01>=2,V__01=C+1,J=4,G=6,F=0,E=0,D=3,B=4] 
* CE 56: eval_PackBitsEncode_bb1_in(V__01,B) = 3+ eval_PackBitsEncode_bb3_in(V__01,C,D,V__01,E):3+ eval_PackBitsEncode_bb7_in(V__01,F,G,V__01,H):3+ eval_PackBitsEncode_bb1_in(I,J)
     [V__01>=2,V__01=I+1,V__01=H+1,V__01=F+1,V__01=E+1,V__01=C+1,J=4,G=6,D=3,B=4] 
* CE 57: eval_PackBitsEncode_bb1_in(V__01,B) = 3+ eval_PackBitsEncode_bb3_in(V__01,C,D,V__01,E):3+ eval_PackBitsEncode_bb7_in(V__01,F,G,H,I):4
     [V__01>=2,V__01=F+1,V__01=E+1,V__01=C+1,J=4,G=6,D=3,B=4] 
* CE 58: eval_PackBitsEncode_bb1_in(V__01,B) = 3+ eval_PackBitsEncode_bb3_in(V__01,C,D,V__01,E):4+ eval_PackBitsEncode_bb7_in(V__01,E,F,V__01,E):3+ eval_PackBitsEncode_bb1_in(E,G)
     [V__01>=E+2,E>=1,V__01=C+1,G=4,F=6,D=3,B=4] 
* CE 59: eval_PackBitsEncode_bb1_in(V__01,B) = 3+ eval_PackBitsEncode_bb3_in(V__01,C,D,V__01,E):4+ eval_PackBitsEncode_bb7_in(V__01,E,F,G,H):4
     [V__01>=E+2,E>=1,V__01=C+1,I=4,F=6,D=3,B=4] 

### Cost equations --> "Loop" of eval_PackBitsEncode_bb1_in/2 
* CEs [38,40,42,47,49,51,55,57,59] --> Loop 24 
* CEs [36,45,53] --> Loop 25 
* CEs [50,58] --> Loop 26 
* CEs [48,56] --> Loop 27 
* CEs [46,54] --> Loop 28 
* CEs [44,52] --> Loop 29 
* CEs [37,39,41] --> Loop 30 
* CEs [43] --> Loop 31 
* CEs [35] --> Loop 32 

#### Loops of eval_PackBitsEncode_bb1_in/2 
* Loop 24: eval_PackBitsEncode_bb1_in(V__01,B) [V__01>=2,B=4] 
* Loop 25: eval_PackBitsEncode_bb1_in(V__01,B) [B=4,V__01=1] 
* Loop 26: eval_PackBitsEncode_bb1_in(V__01,B)->  eval_PackBitsEncode_bb1_in(V__01',B')
                  [V__01>=V__01'+2,V__01'>=1,B'=4,B=4] 
* Loop 27: eval_PackBitsEncode_bb1_in(V__01,B)->  eval_PackBitsEncode_bb1_in(V__01',B')
                  [V__01>=2,V__01=V__01'+1,B'=4,B=4] 
* Loop 28: eval_PackBitsEncode_bb1_in(V__01,B)->  eval_PackBitsEncode_bb1_in(V__01',B')
                  [V__01>=2,B'=4,V__01'=0,B=4] 
* Loop 29: eval_PackBitsEncode_bb1_in(V__01,B)->  eval_PackBitsEncode_bb1_in(V__01',B')
                  [B'=4,V__01'=0,B=4,V__01=1] 
* Loop 30: eval_PackBitsEncode_bb1_in(V__01,B) [V__01>=2,B=4] 
* Loop 31: eval_PackBitsEncode_bb1_in(V__01,B) [0>=V__01,B=4] 
* Loop 32: eval_PackBitsEncode_bb1_in(V__01,B) [B=4,V__01=1] 

### Ranking functions of CR eval_PackBitsEncode_bb1_in(V__01,B) 
* RF of phase [26,27]: [V__01-1]

#### Partial ranking functions of CR eval_PackBitsEncode_bb1_in(V__01,B) 
* Partial RF of phase [26,27]:
  - RF of loop [26:1]:
    V__01/2-1
  - RF of loop [27:1]:
    V__01-1


### Resulting Chains:eval_PackBitsEncode_bb1_in(V__01,B) 
* [[26,27],32]
* [[26,27],30]
* [[26,27],29,31]
* [[26,27],28,31]
* [[26,27],25]...
* [[26,27],24]...
* [32]
* [31]
* [30]
* [29,31]
* [28,31]
* [25]...
* [24]...


### Merging Chains  eval_PackBitsEncode_bb1_in/2 into  External patterns of execution 
* [[31,29],[32]] --> 1 
* [[31]] --> 2 
* [[31,28],[30],[31,28,[26,27]],[31,29,[26,27]],[30,[26,27]],[32,[26,27]]] --> 3 
* [[25]] --> 4 
* [[24],[25,[26,27]]] --> 5 
* [[24,[26,27]]] --> 6 


### Specialization of cost equations eval_PackBitsEncode_bb0_in/2 
* CE 3 is refined into CE [60,61,62,63,64,65] 


#### Refined cost equations eval_PackBitsEncode_bb0_in/2 
* CE 60: eval_PackBitsEncode_bb0_in(V_cc,B) = 1+ eval_PackBitsEncode_bb1_in(C,D):1
     [D=4,C=1,V_cc=1] 
* CE 61: eval_PackBitsEncode_bb0_in(V_cc,B) = 1+ eval_PackBitsEncode_bb1_in(V_cc,C):2
     [0>=V_cc,C=4] 
* CE 62: eval_PackBitsEncode_bb0_in(V_cc,B) = 1+ eval_PackBitsEncode_bb1_in(V_cc,C):3
     [V_cc>=2,C=4] 
* CE 63: eval_PackBitsEncode_bb0_in(V_cc,B) = 1+ eval_PackBitsEncode_bb1_in(C,D):4
     [D=4,C=1,V_cc=1] 
* CE 64: eval_PackBitsEncode_bb0_in(V_cc,B) = 1+ eval_PackBitsEncode_bb1_in(V_cc,C):5
     [V_cc>=2,C=4] 
* CE 65: eval_PackBitsEncode_bb0_in(V_cc,B) = 1+ eval_PackBitsEncode_bb1_in(V_cc,C):6
     [V_cc>=3,C=4] 

### Cost equations --> "Loop" of eval_PackBitsEncode_bb0_in/2 
* CEs [64,65] --> Loop 33 
* CEs [63] --> Loop 34 
* CEs [62] --> Loop 35 
* CEs [61] --> Loop 36 
* CEs [60] --> Loop 37 

#### Loops of eval_PackBitsEncode_bb0_in/2 
* Loop 33: eval_PackBitsEncode_bb0_in(V_cc,B) [V_cc>=2] 
* Loop 34: eval_PackBitsEncode_bb0_in(V_cc,B) [V_cc=1] 
* Loop 35: eval_PackBitsEncode_bb0_in(V_cc,B) [V_cc>=2] 
* Loop 36: eval_PackBitsEncode_bb0_in(V_cc,B) [0>=V_cc] 
* Loop 37: eval_PackBitsEncode_bb0_in(V_cc,B) [V_cc=1] 

### Ranking functions of CR eval_PackBitsEncode_bb0_in(V_cc,B) 

#### Partial ranking functions of CR eval_PackBitsEncode_bb0_in(V_cc,B) 


### Resulting Chains:eval_PackBitsEncode_bb0_in(V_cc,B) 
* [37]
* [36]
* [35]
* [34]...
* [33]...


### Merging Chains  eval_PackBitsEncode_bb0_in/2 into  External patterns of execution 
* [[37]] --> 1 
* [[36]] --> 2 
* [[35]] --> 3 
* [[34]] --> 4 
* [[33]] --> 5 


### Specialization of cost equations eval_PackBitsEncode_start/3 
* CE 2 is refined into CE [66,67,68,69,70] 


#### Refined cost equations eval_PackBitsEncode_start/3 
* CE 66: eval_PackBitsEncode_start(V_cc,V_s,B) = 0+ eval_PackBitsEncode_bb0_in(C,B):1
     [C=1,V_cc=1] 
* CE 67: eval_PackBitsEncode_start(V_cc,V_s,B) = 0+ eval_PackBitsEncode_bb0_in(V_cc,B):2
     [0>=V_cc] 
* CE 68: eval_PackBitsEncode_start(V_cc,V_s,B) = 0+ eval_PackBitsEncode_bb0_in(V_cc,B):3
     [V_cc>=2] 
* CE 69: eval_PackBitsEncode_start(V_cc,V_s,B) = 0+ eval_PackBitsEncode_bb0_in(C,B):4
     [C=1,V_cc=1] 
* CE 70: eval_PackBitsEncode_start(V_cc,V_s,B) = 0+ eval_PackBitsEncode_bb0_in(V_cc,B):5
     [V_cc>=2] 

### Cost equations --> "Loop" of eval_PackBitsEncode_start/3 
* CEs [70] --> Loop 38 
* CEs [69] --> Loop 39 
* CEs [68] --> Loop 40 
* CEs [67] --> Loop 41 
* CEs [66] --> Loop 42 

#### Loops of eval_PackBitsEncode_start/3 
* Loop 38: eval_PackBitsEncode_start(V_cc,V_s,B) [V_cc>=2] 
* Loop 39: eval_PackBitsEncode_start(V_cc,V_s,B) [V_cc=1] 
* Loop 40: eval_PackBitsEncode_start(V_cc,V_s,B) [V_cc>=2] 
* Loop 41: eval_PackBitsEncode_start(V_cc,V_s,B) [0>=V_cc] 
* Loop 42: eval_PackBitsEncode_start(V_cc,V_s,B) [V_cc=1] 

### Ranking functions of CR eval_PackBitsEncode_start(V_cc,V_s,B) 

#### Partial ranking functions of CR eval_PackBitsEncode_start(V_cc,V_s,B) 


### Resulting Chains:eval_PackBitsEncode_start(V_cc,V_s,B) 
* [42]
* [41]
* [40]
* [39]...
* [38]...


### Merging Chains  eval_PackBitsEncode_start/3 into  External patterns of execution 
* [[42]] --> 1 
* [[41]] --> 2 
* [[40]] --> 3 
* [[39]] --> 4 
* [[38]] --> 5 


Computing Bounds
=====================================

#### Cost of loops [15] 

 * loop 15:eval_PackBitsEncode_bb3_in(V__01,V__1,B,C,D) -> [eval_PackBitsEncode_bb3_in(V__01',V__1',B',C',D')] 
1
#### Cost of phase [15]:eval_PackBitsEncode_bb3_in(V__01,V__1,B,C,D) -> [eval_PackBitsEncode_bb3_in(V__01',V__1',B',C',D')] 
1*it(15)+0
  Such that:it(15) =< V__1
it(15) =< V__1-V__1'

#### Cost of phase [15]:eval_PackBitsEncode_bb3_in(V__01,V__1,B,C,D) -> [eval_PackBitsEncode_bb3_in(V__01',V__1',B',C',D')] 
1*it(15)+0
  Such that:it(15) =< V__1
it(15) =< V__1-V__1'

#### Cost of chains of eval_PackBitsEncode_bb3_in(V__01,V__1,B,C,D):
* Chain [[15],17]: 1*it(15)+0
  Such that:it(15) =< V__1

  with precondition: [B=3,D=0,V__01=C,V__1>=1,V__01>=V__1+1] 

* Chain [[15],16]: 1*it(15)+0
  Such that:it(15) =< V__1-D

  with precondition: [B=3,V__01=C,D>=1,V__01>=V__1+1,V__1>=D+1] 

* Chain [17]: 0
  with precondition: [V__1=0,B=3,D=0,V__01=C,V__01>=1] 

* Chain [16]: 0
  with precondition: [B=3,V__01=C,V__1=D,V__1>=1,V__01>=V__1+1] 


#### Cost of loops [18] 

 * loop 18:eval_PackBitsEncode_bb11_in(V__01,V__1,V_33,V_slop_0,B,C,D) -> [eval_PackBitsEncode_bb11_in(V__01',V__1',V_33',V_slop_0',B',C',D')] 
1
#### Cost of phase [18]:eval_PackBitsEncode_bb11_in(V__01,V__1,V_33,V_slop_0,B,C,D) -> [eval_PackBitsEncode_bb11_in(V__01',V__1',V_33',V_slop_0',B',C',D')] 
1*it(18)+0
  Such that:it(18) =< V_slop_0
it(18) =< V_slop_0-V_slop_0'

#### Cost of chains of eval_PackBitsEncode_bb11_in(V__01,V__1,V_33,V_slop_0,B,C,D):
* Chain [[18],19]: 1*it(18)+0
  Such that:it(18) =< V_slop_0

  with precondition: [B=2,V__01=C,V__1=D,V_slop_0>=1,V_33>=V_slop_0] 

* Chain [19]: 0
  with precondition: [B=2,C=V__01,D=V__1,0>=V_slop_0,V_33>=V_slop_0] 


#### Cost of loops [20] 

 * loop 20:eval_PackBitsEncode_bb7_in(V__01,V__1,B,C,D) -> [eval_PackBitsEncode_bb7_in(V__01',V__1',B',C',D')] 
1*s(2)+0
#### Cost of phase [20]:eval_PackBitsEncode_bb7_in(V__01,V__1,B,C,D) -> [eval_PackBitsEncode_bb7_in(V__01',V__1',B',C',D')] 
1*s(3)+0
#### Cost of phase [20]:eval_PackBitsEncode_bb7_in(V__01,V__1,B,C,D) -> [eval_PackBitsEncode_bb7_in(V__01',V__1',B',C',D')] 
1*s(3)+0
#### Cost of phase [20]:eval_PackBitsEncode_bb7_in(V__01,V__1,B,C,D) -> [eval_PackBitsEncode_bb7_in(V__01',V__1',B',C',D')] 
1*s(3)+0
#### Cost of phase [20]:eval_PackBitsEncode_bb7_in(V__01,V__1,B,C,D) -> [eval_PackBitsEncode_bb7_in(V__01',V__1',B',C',D')] 
1*s(3)+0
#### Cost of chains of eval_PackBitsEncode_bb7_in(V__01,V__1,B,C,D):
* Chain [[20]]...: 1*s(3)+0
  with precondition: [B>=4,6>=B] 

* Chain [[20],23]: 1*s(3)+0
  with precondition: [B=4] 

* Chain [[20],22]: 2*aux(2)+0
  with precondition: [B=5,V__1=C] 

* Chain [[20],21]: 2*aux(3)+0
  with precondition: [B=6,V__01=C,V__1=D] 

* Chain [23]: 0
  with precondition: [B=4] 

* Chain [22]: 1*aux(2)+0
  with precondition: [B=5,C=V__1] 

* Chain [21]: 1*aux(3)+0
  with precondition: [B=6,C=V__01,D=V__1] 


#### Cost of loops [26,27] 

 * loop 26:eval_PackBitsEncode_bb1_in(V__01,B) -> [eval_PackBitsEncode_bb1_in(V__01',B')] 
2*s(17)+2*s(18)+3
  Such that:s(16) =< V__01-V__01'
s(17) =< s(16)

 * loop 27:eval_PackBitsEncode_bb1_in(V__01,B) -> [eval_PackBitsEncode_bb1_in(V__01',B')] 
1*s(21)+0
#### Cost of phase [26,27]:eval_PackBitsEncode_bb1_in(V__01,B) -> [eval_PackBitsEncode_bb1_in(V__01',B')] 
3*it(26)+2*s(22)+3*s(23)+0
  Such that:it(26) =< V__01/2
it(26) =< V__01/2-V__01'/2
aux(9) =< V__01
aux(10) =< V__01-V__01'
it(26) =< aux(9)
s(24) =< aux(9)
it(26) =< aux(10)
s(24) =< aux(10)
s(22) =< s(24)

#### Cost of phase [26,27]:eval_PackBitsEncode_bb1_in(V__01,B) -> [eval_PackBitsEncode_bb1_in(V__01',B')] 
3*it(26)+2*s(22)+3*s(23)+0
  Such that:it(26) =< V__01/2
it(26) =< V__01/2-V__01'/2
aux(9) =< V__01
aux(10) =< V__01-V__01'
it(26) =< aux(9)
s(24) =< aux(9)
it(26) =< aux(10)
s(24) =< aux(10)
s(22) =< s(24)

#### Cost of phase [26,27]:eval_PackBitsEncode_bb1_in(V__01,B) -> [eval_PackBitsEncode_bb1_in(V__01',B')] 
3*it(26)+2*s(22)+3*s(23)+0
  Such that:it(26) =< V__01/2
it(26) =< V__01/2-V__01'/2
aux(9) =< V__01
aux(10) =< V__01-V__01'
it(26) =< aux(9)
s(24) =< aux(9)
it(26) =< aux(10)
s(24) =< aux(10)
s(22) =< s(24)

#### Cost of phase [26,27]:eval_PackBitsEncode_bb1_in(V__01,B) -> [eval_PackBitsEncode_bb1_in(V__01',B')] 
3*it(26)+2*s(22)+3*s(23)+0
  Such that:it(26) =< V__01/2
it(26) =< V__01/2-V__01'/2
aux(9) =< V__01
aux(10) =< V__01-V__01'
it(26) =< aux(9)
s(24) =< aux(9)
it(26) =< aux(10)
s(24) =< aux(10)
s(22) =< s(24)

#### Cost of phase [26,27]:eval_PackBitsEncode_bb1_in(V__01,B) -> [eval_PackBitsEncode_bb1_in(V__01',B')] 
3*it(26)+2*s(22)+3*s(23)+0
  Such that:it(26) =< V__01/2
it(26) =< V__01/2-V__01'/2
aux(9) =< V__01
aux(10) =< V__01-V__01'
it(26) =< aux(9)
s(24) =< aux(9)
it(26) =< aux(10)
s(24) =< aux(10)
s(22) =< s(24)

#### Cost of phase [26,27]:eval_PackBitsEncode_bb1_in(V__01,B) -> [eval_PackBitsEncode_bb1_in(V__01',B')] 
3*it(26)+2*s(22)+3*s(23)+0
  Such that:it(26) =< V__01/2
it(26) =< V__01/2-V__01'/2
aux(9) =< V__01
aux(10) =< V__01-V__01'
it(26) =< aux(9)
s(24) =< aux(9)
it(26) =< aux(10)
s(24) =< aux(10)
s(22) =< s(24)

#### Cost of chains of eval_PackBitsEncode_bb1_in(V__01,B):
* Chain [[26,27],32]: 3*it(26)+4*s(11)+2*s(22)+2
  Such that:it(26) =< V__01/2
aux(11) =< V__01
it(26) =< aux(11)
s(22) =< aux(11)

  with precondition: [B=4,V__01>=2] 

* Chain [[26,27],30]: 7*it(26)+6*s(23)+2
  Such that:aux(13) =< V__01
it(26) =< aux(13)

  with precondition: [B=4,V__01>=3] 

* Chain [[26,27],29,31]: 4*aux(14)+3*it(26)+2*s(22)+0
  Such that:it(26) =< V__01/2
aux(15) =< V__01
it(26) =< aux(15)
s(22) =< aux(15)

  with precondition: [B=4,V__01>=2] 

* Chain [[26,27],28,31]: 7*it(26)+5*s(23)+3
  Such that:aux(17) =< V__01
it(26) =< aux(17)

  with precondition: [B=4,V__01>=3] 

* Chain [[26,27],25]...: 4*aux(18)+3*it(26)+2*s(22)+0
  Such that:it(26) =< V__01/2
aux(19) =< V__01
it(26) =< aux(19)
s(22) =< aux(19)

  with precondition: [B=4,V__01>=2] 

* Chain [[26,27],24]...: 11*it(26)+12*s(23)+3
  Such that:aux(21) =< V__01
it(26) =< aux(21)

  with precondition: [B=4,V__01>=3] 

* Chain [32]: 1*s(11)+2
  with precondition: [V__01=1,B=4] 

* Chain [31]: 0
  with precondition: [B=4,0>=V__01] 

* Chain [30]: 2*s(26)+3*s(27)+2
  Such that:aux(12) =< V__01
s(26) =< aux(12)

  with precondition: [B=4,V__01>=2] 

* Chain [29,31]: 1*aux(14)+0
  with precondition: [V__01=1,B=4] 

* Chain [28,31]: 2*s(33)+2*s(34)+3
  Such that:aux(16) =< V__01
s(33) =< aux(16)

  with precondition: [B=4,V__01>=2] 

* Chain [25]...: 1*aux(18)+0
  with precondition: [V__01=1,B=4] 

* Chain [24]...: 6*s(40)+9*s(41)+3
  Such that:aux(20) =< V__01
s(40) =< aux(20)

  with precondition: [B=4,V__01>=2] 


#### Cost of chains of eval_PackBitsEncode_bb0_in(V_cc,B):
* Chain [37]: 1*s(84)+1
  with precondition: [V_cc=1] 

* Chain [36]: 1
  with precondition: [0>=V_cc] 

* Chain [35]: 6*s(87)+22*s(88)+24*s(89)+4
  Such that:s(85) =< V_cc
s(86) =< V_cc/2
s(87) =< s(86)
s(88) =< s(85)
s(87) =< s(85)

  with precondition: [V_cc>=2] 

* Chain [34]...: 1*s(90)+1
  with precondition: [V_cc=1] 

* Chain [33]...: 3*s(91)+19*s(93)+25*s(94)+4
  Such that:s(91) =< V_cc/2
aux(26) =< V_cc
s(93) =< aux(26)
s(91) =< aux(26)

  with precondition: [V_cc>=2] 


#### Cost of chains of eval_PackBitsEncode_start(V_cc,V_s,B):
* Chain [42]: 1*s(98)+1
  with precondition: [V_cc=1] 

* Chain [41]: 1
  with precondition: [0>=V_cc] 

* Chain [40]: 6*s(101)+22*s(102)+24*s(103)+4
  Such that:s(99) =< V_cc
s(100) =< V_cc/2
s(101) =< s(100)
s(102) =< s(99)
s(101) =< s(99)

  with precondition: [V_cc>=2] 

* Chain [39]...: 1*s(104)+1
  with precondition: [V_cc=1] 

* Chain [38]...: 3*s(105)+19*s(107)+25*s(108)+4
  Such that:s(106) =< V_cc
s(105) =< V_cc/2
s(107) =< s(106)
s(105) =< s(106)

  with precondition: [V_cc>=2] 


Closed-form bounds of eval_PackBitsEncode_start(V_cc,V_s,B): 
-------------------------------------
* Chain [42] with precondition: [V_cc=1] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [41] with precondition: [0>=V_cc] 
    - Upper bound: 1 
    - Complexity: constant 
* Chain [40] with precondition: [V_cc>=2] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [39]... with precondition: [V_cc=1] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [38]... with precondition: [V_cc>=2] 
    - Upper bound: inf 
    - Complexity: infinity 

### Maximum cost of eval_PackBitsEncode_start(V_cc,V_s,B): inf 
Asymptotic class: infinity 

Time statistics: 
-------------------------------------
* Partial evaluation computed in 34 ms.
* Invariants computed in 53 ms.
   - Backward Invariants 30 ms.
   - Transitive Invariants 7 ms.
* Refinement performed in 114 ms.
* Termination proved in 7 ms.
* Upper bounds computed in 98 ms.
   - Equation cost structures 39 ms.
   - Phase cost structures 26 ms.
   - Chain cost structures 30 ms.
   - Solving cost expressions 1 ms.
* Total analysis performed in 346 ms.


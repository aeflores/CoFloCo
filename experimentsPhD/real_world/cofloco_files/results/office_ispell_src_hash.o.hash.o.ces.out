Warning: Ignored call to eval_hash_stop/1 in equation loop_cont_eval_hash_bb4_in/2 

Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. recursive  : [eval_hash_bb1_in/6]
1. recursive  : [eval_hash_bb4_in/3]
2. non_recursive  : [loop_cont_eval_hash_bb4_in/2]
3. non_recursive  : [loop_cont_eval_hash_bb1_in/4]
4. non_recursive  : [eval_hash_bb0_in/2]
5. non_recursive  : [eval_hash_start/2]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into eval_hash_bb1_in/6
1. SCC is partially evaluated into eval_hash_bb4_in/3
2. SCC is completely evaluated into other SCCs
3. SCC is partially evaluated into loop_cont_eval_hash_bb1_in/4
4. SCC is partially evaluated into eval_hash_bb0_in/2
5. SCC is partially evaluated into eval_hash_start/2

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations eval_hash_bb1_in/6 
* CE 7 is refined into CE [18] 
* CE 6 is discarded (unfeasible) 
* CE 8 is refined into CE [19] 
* CE 5 is refined into CE [20] 
* CE 4 is discarded (unfeasible) 


#### Refined cost equations eval_hash_bb1_in/6 
* CE 18: eval_hash_bb1_in(A,B,C,D,A,C) = 0
     [B>=1,4>=B,D=3] 
* CE 19: eval_hash_bb1_in(A,B,C,D,A,C) = 0
     [D=3,B=0] 
* CE 20: eval_hash_bb1_in(V_hashtblsize,V_i_0,V_h_0,B,C,D) = 1+ eval_hash_bb1_in(V_hashtblsize,E,F,B,C,D)
     [V_i_0>=1,4>=V_i_0,V_i_0=E+1] 

### Cost equations --> "Loop" of eval_hash_bb1_in/6 
* CEs [20] --> Loop 17 
* CEs [18] --> Loop 18 
* CEs [19] --> Loop 19 

#### Loops of eval_hash_bb1_in/6 
* Loop 17: eval_hash_bb1_in(V_hashtblsize,V_i_0,V_h_0,B,C,D)->  eval_hash_bb1_in(V_hashtblsize,V_i_0',V_h_0',B,C,D)
                  [V_i_0>=1,4>=V_i_0,V_i_0=V_i_0'+1] 
* Loop 18: eval_hash_bb1_in(A,B,C,D,A,C) [B>=1,4>=B,D=3] 
* Loop 19: eval_hash_bb1_in(A,B,C,D,A,C) [D=3,B=0] 

### Ranking functions of CR eval_hash_bb1_in(V_hashtblsize,V_i_0,V_h_0,B,C,D) 
* RF of phase [17]: [V_i_0]

#### Partial ranking functions of CR eval_hash_bb1_in(V_hashtblsize,V_i_0,V_h_0,B,C,D) 
* Partial RF of phase [17]:
  - RF of loop [17:1]:
    V_i_0


### Resulting Chains:eval_hash_bb1_in(V_hashtblsize,V_i_0,V_h_0,B,C,D) 
* [[17],19]
* [[17],18]
* [18]


### Merging Chains  eval_hash_bb1_in/6 into  External patterns of execution 
* [[18],[18,[17]],[19,[17]]] --> 1 


### Specialization of cost equations eval_hash_bb4_in/3 
* CE 14 is refined into CE [21] 
* CE 15 is refined into CE [22] 
* CE 16 is refined into CE [23] 
* CE 17 is refined into CE [24] 
* CE 11 is refined into CE [25] 
* CE 12 is refined into CE [26] 
* CE 13 is refined into CE [27] 
* CE 10 is refined into CE [28] 


#### Refined cost equations eval_hash_bb4_in/3 
* CE 21: eval_hash_bb4_in(V_hashtblsize,V_h_1,B) = 0
     [V_h_1>=1,V_hashtblsize>=2,B=2] 
* CE 22: eval_hash_bb4_in(V_hashtblsize,V_h_1,B) = 0
     [V_hashtblsize>=2,0>=V_h_1+1,B=2] 
* CE 23: eval_hash_bb4_in(V_hashtblsize,V_h_1,B) = 0
     [V_h_1>=1,0>=V_hashtblsize+2,B=2] 
* CE 24: eval_hash_bb4_in(V_hashtblsize,V_h_1,B) = 0
     [0>=V_h_1+1,0>=V_hashtblsize+2,B=2] 
* CE 25: eval_hash_bb4_in(V_hashtblsize,V_h_1,B) = 0
     [B=2,V_h_1=0] 
* CE 26: eval_hash_bb4_in(V_hashtblsize,V_h_1,B) = 0
     [B=2,V_hashtblsize=1] 
* CE 27: eval_hash_bb4_in(V_hashtblsize,V_h_1,B) = 0
     [B=2,V_hashtblsize+1=0] 
* CE 28: eval_hash_bb4_in(V_hashtblsize,V_h_1,B) = 1+ eval_hash_bb4_in(V_hashtblsize,C,D)
     [D=2,B=2] 

### Cost equations --> "Loop" of eval_hash_bb4_in/3 
* CEs [28] --> Loop 20 
* CEs [21] --> Loop 21 
* CEs [22] --> Loop 22 
* CEs [23] --> Loop 23 
* CEs [24] --> Loop 24 
* CEs [25] --> Loop 25 
* CEs [26] --> Loop 26 
* CEs [27] --> Loop 27 

#### Loops of eval_hash_bb4_in/3 
* Loop 20: eval_hash_bb4_in(V_hashtblsize,V_h_1,B)->  eval_hash_bb4_in(V_hashtblsize,V_h_1',B')
                  [B'=2,B=2] 
* Loop 21: eval_hash_bb4_in(V_hashtblsize,V_h_1,B) [V_h_1>=1,V_hashtblsize>=2,B=2] 
* Loop 22: eval_hash_bb4_in(V_hashtblsize,V_h_1,B) [V_hashtblsize>=2,0>=V_h_1+1,B=2] 
* Loop 23: eval_hash_bb4_in(V_hashtblsize,V_h_1,B) [V_h_1>=1,0>=V_hashtblsize+2,B=2] 
* Loop 24: eval_hash_bb4_in(V_hashtblsize,V_h_1,B) [0>=V_h_1+1,0>=V_hashtblsize+2,B=2] 
* Loop 25: eval_hash_bb4_in(V_hashtblsize,V_h_1,B) [B=2,V_h_1=0] 
* Loop 26: eval_hash_bb4_in(V_hashtblsize,V_h_1,B) [B=2,V_hashtblsize=1] 
* Loop 27: eval_hash_bb4_in(V_hashtblsize,V_h_1,B) [B=2,V_hashtblsize+1=0] 

### Ranking functions of CR eval_hash_bb4_in(V_hashtblsize,V_h_1,B) 

#### Partial ranking functions of CR eval_hash_bb4_in(V_hashtblsize,V_h_1,B) 


### Resulting Chains:eval_hash_bb4_in(V_hashtblsize,V_h_1,B) 
* [[20]]...
* [[20],27]
* [[20],26]
* [[20],25]
* [[20],24]
* [[20],23]
* [[20],22]
* [[20],21]
* [27]
* [26]
* [25]
* [24]
* [23]
* [22]
* [21]


### Merging Chains  eval_hash_bb4_in/3 into  External patterns of execution 
* [[21],[22],[23],[24],[27],[21,[20]],[22,[20]],[23,[20]],[24,[20]],[25,[20]],[27,[20]]] --> 1 
* [[26],[26,[20]]] --> 2 
* [[25]] --> 3 
* [[[20]]] --> 4 


### Specialization of cost equations loop_cont_eval_hash_bb1_in/4 
* CE 9 is refined into CE [29,30,31,32] 


#### Refined cost equations loop_cont_eval_hash_bb1_in/4 
* CE 29: loop_cont_eval_hash_bb1_in(F,A,B,C) = 1+ eval_hash_bb4_in(A,B,G):1
     [G=2,F=3] 
* CE 30: loop_cont_eval_hash_bb1_in(F,A,B,C) = 1+ eval_hash_bb4_in(G,B,H):2
     [H=2,G=1,A=1,F=3] 
* CE 31: loop_cont_eval_hash_bb1_in(F,A,B,C) = 1+ eval_hash_bb4_in(A,G,H):3
     [H=2,G=0,B=0,F=3] 
* CE 32: loop_cont_eval_hash_bb1_in(F,A,B,C) = 1+ eval_hash_bb4_in(A,B,G):4
     [G=2,F=3] 

### Cost equations --> "Loop" of loop_cont_eval_hash_bb1_in/4 
* CEs [32] --> Loop 28 
* CEs [29,30,31] --> Loop 29 

#### Loops of loop_cont_eval_hash_bb1_in/4 
* Loop 28: loop_cont_eval_hash_bb1_in(F,A,B,C) [F=3] 
* Loop 29: loop_cont_eval_hash_bb1_in(F,A,B,C) [F=3] 

### Ranking functions of CR loop_cont_eval_hash_bb1_in(F,A,B,C) 

#### Partial ranking functions of CR loop_cont_eval_hash_bb1_in(F,A,B,C) 


### Resulting Chains:loop_cont_eval_hash_bb1_in(F,A,B,C) 
* [29]
* [28]...


### Merging Chains  loop_cont_eval_hash_bb1_in/4 into  External patterns of execution 
* [[29]] --> 1 
* [[28]] --> 2 


### Specialization of cost equations eval_hash_bb0_in/2 
* CE 3 is refined into CE [33,34] 


#### Refined cost equations eval_hash_bb0_in/2 
* CE 33: eval_hash_bb0_in(V_hashtblsize,B) = 1+ eval_hash_bb1_in(V_hashtblsize,C,D,E,V_hashtblsize,F):1+ loop_cont_eval_hash_bb1_in(G,V_hashtblsize,F,B):1
     [G=3,E=3,D=0,C=4] 
* CE 34: eval_hash_bb0_in(V_hashtblsize,B) = 1+ eval_hash_bb1_in(V_hashtblsize,C,D,E,V_hashtblsize,F):1+ loop_cont_eval_hash_bb1_in(G,V_hashtblsize,F,B):2
     [G=3,E=3,D=0,C=4] 

### Cost equations --> "Loop" of eval_hash_bb0_in/2 
* CEs [34] --> Loop 30 
* CEs [33] --> Loop 31 

#### Loops of eval_hash_bb0_in/2 
* Loop 30: eval_hash_bb0_in(V_hashtblsize,B) [] 
* Loop 31: eval_hash_bb0_in(V_hashtblsize,B) [] 

### Ranking functions of CR eval_hash_bb0_in(V_hashtblsize,B) 

#### Partial ranking functions of CR eval_hash_bb0_in(V_hashtblsize,B) 


### Resulting Chains:eval_hash_bb0_in(V_hashtblsize,B) 
* [31]
* [30]...


### Merging Chains  eval_hash_bb0_in/2 into  External patterns of execution 
* [[31]] --> 1 
* [[30]] --> 2 


### Specialization of cost equations eval_hash_start/2 
* CE 2 is refined into CE [35,36] 


#### Refined cost equations eval_hash_start/2 
* CE 35: eval_hash_start(V_hashtblsize,B) = 0+ eval_hash_bb0_in(V_hashtblsize,B):1
     [] 
* CE 36: eval_hash_start(V_hashtblsize,B) = 0+ eval_hash_bb0_in(V_hashtblsize,B):2
     [] 

### Cost equations --> "Loop" of eval_hash_start/2 
* CEs [36] --> Loop 32 
* CEs [35] --> Loop 33 

#### Loops of eval_hash_start/2 
* Loop 32: eval_hash_start(V_hashtblsize,B) [] 
* Loop 33: eval_hash_start(V_hashtblsize,B) [] 

### Ranking functions of CR eval_hash_start(V_hashtblsize,B) 

#### Partial ranking functions of CR eval_hash_start(V_hashtblsize,B) 


### Resulting Chains:eval_hash_start(V_hashtblsize,B) 
* [33]
* [32]...


### Merging Chains  eval_hash_start/2 into  External patterns of execution 
* [[33]] --> 1 
* [[32]] --> 2 


Computing Bounds
=====================================

#### Cost of loops [17] 

 * loop 17:eval_hash_bb1_in(V_hashtblsize,V_i_0,V_h_0,B,C,D) -> [eval_hash_bb1_in(V_hashtblsize',V_i_0',V_h_0',B',C',D')] 
1
#### Cost of phase [17]:eval_hash_bb1_in(V_hashtblsize,V_i_0,V_h_0,B,C,D) -> [eval_hash_bb1_in(V_hashtblsize',V_i_0',V_h_0',B',C',D')] 
1*it(17)+0
  Such that:it(17) =< V_i_0
it(17) =< V_i_0-V_i_0'

#### Cost of phase [17]:eval_hash_bb1_in(V_hashtblsize,V_i_0,V_h_0,B,C,D) -> [eval_hash_bb1_in(V_hashtblsize',V_i_0',V_h_0',B',C',D')] 
1*it(17)+0
  Such that:it(17) =< V_i_0
it(17) =< V_i_0-V_i_0'

#### Cost of chains of eval_hash_bb1_in(V_hashtblsize,V_i_0,V_h_0,B,C,D):
* Chain [[17],19]: 1*it(17)+0
  Such that:it(17) =< V_i_0

  with precondition: [B=3,V_hashtblsize=C,4>=V_i_0,V_i_0>=1] 

* Chain [[17],18]: 1*it(17)+0
  Such that:it(17) =< V_i_0

  with precondition: [B=3,V_hashtblsize=C,4>=V_i_0,V_i_0>=2] 

* Chain [18]: 0
  with precondition: [B=3,C=V_hashtblsize,D=V_h_0,4>=V_i_0,V_i_0>=1] 


#### Cost of loops [20] 

 * loop 20:eval_hash_bb4_in(V_hashtblsize,V_h_1,B) -> [eval_hash_bb4_in(V_hashtblsize',V_h_1',B')] 
1
#### Cost of phase [20]:eval_hash_bb4_in(V_hashtblsize,V_h_1,B) -> [eval_hash_bb4_in(V_hashtblsize',V_h_1',B')] 
1*it(20)+0
#### Cost of phase [20]:eval_hash_bb4_in(V_hashtblsize,V_h_1,B) -> [eval_hash_bb4_in(V_hashtblsize',V_h_1',B')] 
1*it(20)+0
#### Cost of phase [20]:eval_hash_bb4_in(V_hashtblsize,V_h_1,B) -> [eval_hash_bb4_in(V_hashtblsize',V_h_1',B')] 
1*it(20)+0
#### Cost of phase [20]:eval_hash_bb4_in(V_hashtblsize,V_h_1,B) -> [eval_hash_bb4_in(V_hashtblsize',V_h_1',B')] 
1*it(20)+0
#### Cost of phase [20]:eval_hash_bb4_in(V_hashtblsize,V_h_1,B) -> [eval_hash_bb4_in(V_hashtblsize',V_h_1',B')] 
1*it(20)+0
#### Cost of phase [20]:eval_hash_bb4_in(V_hashtblsize,V_h_1,B) -> [eval_hash_bb4_in(V_hashtblsize',V_h_1',B')] 
1*it(20)+0
#### Cost of phase [20]:eval_hash_bb4_in(V_hashtblsize,V_h_1,B) -> [eval_hash_bb4_in(V_hashtblsize',V_h_1',B')] 
1*it(20)+0
#### Cost of phase [20]:eval_hash_bb4_in(V_hashtblsize,V_h_1,B) -> [eval_hash_bb4_in(V_hashtblsize',V_h_1',B')] 
1*it(20)+0
#### Cost of chains of eval_hash_bb4_in(V_hashtblsize,V_h_1,B):
* Chain [[20]]...: 1*it(20)+0
  with precondition: [B=2] 

* Chain [[20],27]: 1*it(20)+0
  with precondition: [V_hashtblsize+1=0,B=2] 

* Chain [[20],26]: 1*it(20)+0
  with precondition: [V_hashtblsize=1,B=2] 

* Chain [[20],25]: 1*it(20)+0
  with precondition: [B=2] 

* Chain [[20],24]: 1*it(20)+0
  with precondition: [B=2,0>=V_hashtblsize+2] 

* Chain [[20],23]: 1*it(20)+0
  with precondition: [B=2,0>=V_hashtblsize+2] 

* Chain [[20],22]: 1*it(20)+0
  with precondition: [B=2,V_hashtblsize>=2] 

* Chain [[20],21]: 1*it(20)+0
  with precondition: [B=2,V_hashtblsize>=2] 

* Chain [27]: 0
  with precondition: [V_hashtblsize+1=0,B=2] 

* Chain [26]: 0
  with precondition: [V_hashtblsize=1,B=2] 

* Chain [25]: 0
  with precondition: [V_h_1=0,B=2] 

* Chain [24]: 0
  with precondition: [B=2,0>=V_hashtblsize+2,0>=V_h_1+1] 

* Chain [23]: 0
  with precondition: [B=2,0>=V_hashtblsize+2,V_h_1>=1] 

* Chain [22]: 0
  with precondition: [B=2,0>=V_h_1+1,V_hashtblsize>=2] 

* Chain [21]: 0
  with precondition: [B=2,V_hashtblsize>=2,V_h_1>=1] 


#### Cost of chains of loop_cont_eval_hash_bb1_in(F,A,B,C):
* Chain [29]: 1*aux(4)+0
  with precondition: [F=3] 

* Chain [28]...: 1*s(12)+1
  with precondition: [F=3] 


#### Cost of chains of eval_hash_bb0_in(V_hashtblsize,B):
* Chain [31]: 2*s(14)+1*s(15)+1
  Such that:s(13) =< 4
s(14) =< s(13)

  with precondition: [] 

* Chain [30]...: 2*s(17)+1*s(18)+2
  Such that:s(16) =< 4
s(17) =< s(16)

  with precondition: [] 


#### Cost of chains of eval_hash_start(V_hashtblsize,B):
* Chain [33]: 2*s(20)+1*s(21)+1
  Such that:s(19) =< 4
s(20) =< s(19)

  with precondition: [] 

* Chain [32]...: 2*s(23)+1*s(24)+2
  Such that:s(22) =< 4
s(23) =< s(22)

  with precondition: [] 


Closed-form bounds of eval_hash_start(V_hashtblsize,B): 
-------------------------------------
* Chain [33] with precondition: [] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [32]... with precondition: [] 
    - Upper bound: inf 
    - Complexity: infinity 

### Maximum cost of eval_hash_start(V_hashtblsize,B): inf 
Asymptotic class: infinity 

Time statistics: 
-------------------------------------
* Partial evaluation computed in 13 ms.
* Invariants computed in 22 ms.
   - Backward Invariants 15 ms.
   - Transitive Invariants 2 ms.
* Refinement performed in 35 ms.
* Termination proved in 3 ms.
* Upper bounds computed in 28 ms.
   - Equation cost structures 10 ms.
   - Phase cost structures 5 ms.
   - Chain cost structures 11 ms.
   - Solving cost expressions 0 ms.
* Total analysis performed in 127 ms.


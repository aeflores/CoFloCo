Warning: Ignored call to eval_debug_dump_stack_stop/1 in equation loop_cont_eval_debug_dump_stack_bb1_in/2 

Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. recursive  : [eval_debug_dump_stack_12/7,eval_debug_dump_stack_13/7,eval_debug_dump_stack_14/7,eval_debug_dump_stack_15/7,eval_debug_dump_stack_5/5,eval_debug_dump_stack_6/5,eval_debug_dump_stack_7/5,eval_debug_dump_stack_8/5,eval_debug_dump_stack_bb1_in/3,eval_debug_dump_stack_bb4_in/5]
1. non_recursive  : [loop_cont_eval_debug_dump_stack_bb1_in/2]
2. non_recursive  : [eval_debug_dump_stack_1/2]
3. non_recursive  : [eval_debug_dump_stack_0/1]
4. non_recursive  : [eval_debug_dump_stack_bb0_in/1]
5. non_recursive  : [eval_debug_dump_stack_start/1]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into eval_debug_dump_stack_bb1_in/3
1. SCC is completely evaluated into other SCCs
2. SCC is partially evaluated into eval_debug_dump_stack_1/2
3. SCC is completely evaluated into other SCCs
4. SCC is completely evaluated into other SCCs
5. SCC is partially evaluated into eval_debug_dump_stack_start/1

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations eval_debug_dump_stack_bb1_in/3 
* CE 6 is refined into CE [7] 
* CE 4 is refined into CE [8] 
* CE 5 is refined into CE [9] 


#### Refined cost equations eval_debug_dump_stack_bb1_in/3 
* CE 7: eval_debug_dump_stack_bb1_in(V_1,V_i_0,B) = 0
     [B=2,V_i_0=0] 
* CE 8: eval_debug_dump_stack_bb1_in(V_1,V_i_0,B) = 1+ eval_debug_dump_stack_bb1_in(V_1,C,D)
     [C>=0,C+1=V_i_0,D=2,B=2] 
* CE 9: eval_debug_dump_stack_bb1_in(V_1,V_i_0,B) = 1+ eval_debug_dump_stack_bb1_in(V_1,C,D)
     [0>=C+2,C+1=V_i_0,D=2,B=2] 

### Cost equations --> "Loop" of eval_debug_dump_stack_bb1_in/3 
* CEs [8] --> Loop 6 
* CEs [9] --> Loop 7 
* CEs [7] --> Loop 8 

#### Loops of eval_debug_dump_stack_bb1_in/3 
* Loop 6: eval_debug_dump_stack_bb1_in(V_1,V_i_0,B)->  eval_debug_dump_stack_bb1_in(V_1,V_i_0',B')
                  [V_i_0>=1,V_i_0=V_i_0'+1,B'=2,B=2] 
* Loop 7: eval_debug_dump_stack_bb1_in(V_1,V_i_0,B)->  eval_debug_dump_stack_bb1_in(V_1,V_i_0',B')
                  [0>=V_i_0+1,V_i_0=V_i_0'+1,B'=2,B=2] 
* Loop 8: eval_debug_dump_stack_bb1_in(V_1,V_i_0,B) [B=2,V_i_0=0] 

### Ranking functions of CR eval_debug_dump_stack_bb1_in(V_1,V_i_0,B) 
* RF of phase [6]: [V_i_0]

#### Partial ranking functions of CR eval_debug_dump_stack_bb1_in(V_1,V_i_0,B) 
* Partial RF of phase [6]:
  - RF of loop [6:1]:
    V_i_0


### Resulting Chains:eval_debug_dump_stack_bb1_in(V_1,V_i_0,B) 
* [[7]]...
* [[6],8]
* [8]


### Merging Chains  eval_debug_dump_stack_bb1_in/3 into  External patterns of execution 
* [[8]] --> 1 
* [[8,[6]]] --> 2 
* [[[7]]] --> 3 


### Specialization of cost equations eval_debug_dump_stack_1/2 
* CE 3 is refined into CE [10,11,12] 


#### Refined cost equations eval_debug_dump_stack_1/2 
* CE 10: eval_debug_dump_stack_1(V_0,B) = 1+ eval_debug_dump_stack_bb1_in(C,D,E):1
     [E=2,D=0,V_0=0] 
* CE 11: eval_debug_dump_stack_1(V_0,B) = 1+ eval_debug_dump_stack_bb1_in(C,V_0,D):2
     [V_0>=1,D=2] 
* CE 12: eval_debug_dump_stack_1(V_0,B) = 1+ eval_debug_dump_stack_bb1_in(C,V_0,D):3
     [0>=V_0+1,D=2] 

### Cost equations --> "Loop" of eval_debug_dump_stack_1/2 
* CEs [12] --> Loop 9 
* CEs [11] --> Loop 10 
* CEs [10] --> Loop 11 

#### Loops of eval_debug_dump_stack_1/2 
* Loop 9: eval_debug_dump_stack_1(V_0,B) [0>=V_0+1] 
* Loop 10: eval_debug_dump_stack_1(V_0,B) [V_0>=1] 
* Loop 11: eval_debug_dump_stack_1(V_0,B) [V_0=0] 

### Ranking functions of CR eval_debug_dump_stack_1(V_0,B) 

#### Partial ranking functions of CR eval_debug_dump_stack_1(V_0,B) 


### Resulting Chains:eval_debug_dump_stack_1(V_0,B) 
* [11]
* [10]
* [9]...


### Merging Chains  eval_debug_dump_stack_1/2 into  External patterns of execution 
* [[11]] --> 1 
* [[10]] --> 2 
* [[9]] --> 3 


### Specialization of cost equations eval_debug_dump_stack_start/1 
* CE 2 is refined into CE [13,14,15] 


#### Refined cost equations eval_debug_dump_stack_start/1 
* CE 13: eval_debug_dump_stack_start(B) = 0+ eval_debug_dump_stack_1(C,B):1
     [C=0] 
* CE 14: eval_debug_dump_stack_start(B) = 0+ eval_debug_dump_stack_1(C,B):2
     [C>=1] 
* CE 15: eval_debug_dump_stack_start(B) = 0+ eval_debug_dump_stack_1(C,B):3
     [0>=C+1] 

### Cost equations --> "Loop" of eval_debug_dump_stack_start/1 
* CEs [15] --> Loop 12 
* CEs [13,14] --> Loop 13 

#### Loops of eval_debug_dump_stack_start/1 
* Loop 12: eval_debug_dump_stack_start(B) [] 
* Loop 13: eval_debug_dump_stack_start(B) [] 

### Ranking functions of CR eval_debug_dump_stack_start(B) 

#### Partial ranking functions of CR eval_debug_dump_stack_start(B) 


### Resulting Chains:eval_debug_dump_stack_start(B) 
* [13]
* [12]...


### Merging Chains  eval_debug_dump_stack_start/1 into  External patterns of execution 
* [[13]] --> 1 
* [[12]] --> 2 


Computing Bounds
=====================================

#### Cost of loops [7] 

 * loop 7:eval_debug_dump_stack_bb1_in(V_1,V_i_0,B) -> [eval_debug_dump_stack_bb1_in(V_1',V_i_0',B')] 
1
#### Cost of phase [7]:eval_debug_dump_stack_bb1_in(V_1,V_i_0,B) -> [eval_debug_dump_stack_bb1_in(V_1',V_i_0',B')] 
1*it(7)+0
#### Cost of loops [6] 

 * loop 6:eval_debug_dump_stack_bb1_in(V_1,V_i_0,B) -> [eval_debug_dump_stack_bb1_in(V_1',V_i_0',B')] 
1
#### Cost of phase [6]:eval_debug_dump_stack_bb1_in(V_1,V_i_0,B) -> [eval_debug_dump_stack_bb1_in(V_1',V_i_0',B')] 
1*it(6)+0
  Such that:it(6) =< V_i_0
it(6) =< V_i_0-V_i_0'

#### Cost of chains of eval_debug_dump_stack_bb1_in(V_1,V_i_0,B):
* Chain [[7]]...: 1*it(7)+0
  with precondition: [0>=V_i_0+1,B=2] 

* Chain [[6],8]: 1*it(6)+0
  Such that:it(6) =< V_i_0

  with precondition: [B=2,V_i_0>=1] 

* Chain [8]: 0
  with precondition: [V_i_0=0,B=2] 


#### Cost of chains of eval_debug_dump_stack_1(V_0,B):
* Chain [11]: 1
  with precondition: [V_0=0] 

* Chain [10]: 1*s(1)+1
  Such that:s(1) =< V_0

  with precondition: [V_0>=1] 

* Chain [9]...: 1*s(2)+1
  with precondition: [0>=V_0+1] 


#### Cost of chains of eval_debug_dump_stack_start(B):
* Chain [13]: 1*aux(1)+0
  with precondition: [] 

* Chain [12]...: 1*s(4)+1
  with precondition: [] 


Closed-form bounds of eval_debug_dump_stack_start(B): 
-------------------------------------
* Chain [13] with precondition: [] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [12]... with precondition: [] 
    - Upper bound: inf 
    - Complexity: infinity 

### Maximum cost of eval_debug_dump_stack_start(B): inf 
Asymptotic class: infinity 

Time statistics: 
-------------------------------------
* Partial evaluation computed in 12 ms.
* Invariants computed in 7 ms.
   - Backward Invariants 3 ms.
   - Transitive Invariants 2 ms.
* Refinement performed in 15 ms.
* Termination proved in 3 ms.
* Upper bounds computed in 10 ms.
   - Equation cost structures 3 ms.
   - Phase cost structures 4 ms.
   - Chain cost structures 3 ms.
   - Solving cost expressions 1 ms.
* Total analysis performed in 61 ms.


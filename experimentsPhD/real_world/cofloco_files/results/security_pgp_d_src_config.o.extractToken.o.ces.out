Warning: Ignored call to eval_extractToken_stop/1 in equation eval_extractToken__critedge_in/1 

Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. recursive  : [eval_extractToken_bb1_in/4]
1. recursive  : [eval_extractToken_bb4_in/2]
2. non_recursive  : [eval_extractToken__critedge_in/1]
3. non_recursive  : [loop_cont_eval_extractToken_bb4_in/2]
4. non_recursive  : [loop_cont_eval_extractToken_bb1_in/3]
5. non_recursive  : [eval_extractToken_bb0_in/1]
6. non_recursive  : [eval_extractToken_start/1]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into eval_extractToken_bb1_in/4
1. SCC is partially evaluated into eval_extractToken_bb4_in/2
2. SCC is completely evaluated into other SCCs
3. SCC is completely evaluated into other SCCs
4. SCC is partially evaluated into loop_cont_eval_extractToken_bb1_in/3
5. SCC is partially evaluated into eval_extractToken_bb0_in/1
6. SCC is partially evaluated into eval_extractToken_start/1

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations eval_extractToken_bb1_in/4 
* CE 7 is refined into CE [13] 
* CE 6 is refined into CE [14] 
* CE 8 is refined into CE [15] 
* CE 5 is refined into CE [16] 
* CE 4 is refined into CE [17] 


#### Refined cost equations eval_extractToken_bb1_in/4 
* CE 13: eval_extractToken_bb1_in(A,B,C,B) = 0
     [B>=0,A>=1,C=3] 
* CE 14: eval_extractToken_bb1_in(A,B,C,B) = 0
     [B>=0,0>=A+1,C=3] 
* CE 15: eval_extractToken_bb1_in(A,B,C,B) = 0
     [B>=0,C=3,A=0] 
* CE 16: eval_extractToken_bb1_in(V_ch_0,V_index_0,B,C) = 1+ eval_extractToken_bb1_in(D,E,B,C)
     [V_index_0>=0,V_ch_0>=1,V_index_0+1=E] 
* CE 17: eval_extractToken_bb1_in(V_ch_0,V_index_0,B,C) = 1+ eval_extractToken_bb1_in(D,E,B,C)
     [V_index_0>=0,0>=V_ch_0+1,V_index_0+1=E] 

### Cost equations --> "Loop" of eval_extractToken_bb1_in/4 
* CEs [16] --> Loop 12 
* CEs [17] --> Loop 13 
* CEs [13] --> Loop 14 
* CEs [14] --> Loop 15 
* CEs [15] --> Loop 16 

#### Loops of eval_extractToken_bb1_in/4 
* Loop 12: eval_extractToken_bb1_in(V_ch_0,V_index_0,B,C)->  eval_extractToken_bb1_in(V_ch_0',V_index_0',B,C)
                  [V_index_0>=0,V_ch_0>=1,V_index_0+1=V_index_0'] 
* Loop 13: eval_extractToken_bb1_in(V_ch_0,V_index_0,B,C)->  eval_extractToken_bb1_in(V_ch_0',V_index_0',B,C)
                  [V_index_0>=0,0>=V_ch_0+1,V_index_0+1=V_index_0'] 
* Loop 14: eval_extractToken_bb1_in(A,B,C,B) [B>=0,A>=1,C=3] 
* Loop 15: eval_extractToken_bb1_in(A,B,C,B) [B>=0,0>=A+1,C=3] 
* Loop 16: eval_extractToken_bb1_in(A,B,C,B) [B>=0,C=3,A=0] 

### Ranking functions of CR eval_extractToken_bb1_in(V_ch_0,V_index_0,B,C) 

#### Partial ranking functions of CR eval_extractToken_bb1_in(V_ch_0,V_index_0,B,C) 


### Resulting Chains:eval_extractToken_bb1_in(V_ch_0,V_index_0,B,C) 
* [[12,13]]...
* [[12,13],16]
* [[12,13],15]
* [[12,13],14]
* [16]
* [15]
* [14]


### Merging Chains  eval_extractToken_bb1_in/4 into  External patterns of execution 
* [[16]] --> 1 
* [[15]] --> 2 
* [[14]] --> 3 
* [[14,[12,13]],[15,[12,13]],[16,[12,13]]] --> 4 
* [[[12,13]]] --> 5 


### Specialization of cost equations eval_extractToken_bb4_in/2 
* CE 12 is refined into CE [18] 
* CE 11 is refined into CE [19] 
* CE 10 is refined into CE [20] 


#### Refined cost equations eval_extractToken_bb4_in/2 
* CE 18: eval_extractToken_bb4_in(V_index_1,B) = 0
     [V_index_1>=100,B=2] 
* CE 19: eval_extractToken_bb4_in(V_index_1,B) = 0
     [99>=V_index_1,B=2] 
* CE 20: eval_extractToken_bb4_in(V_index_1,B) = 1+ eval_extractToken_bb4_in(C,D)
     [99>=V_index_1,V_index_1+1=C,D=2,B=2] 

### Cost equations --> "Loop" of eval_extractToken_bb4_in/2 
* CEs [20] --> Loop 17 
* CEs [18] --> Loop 18 
* CEs [19] --> Loop 19 

#### Loops of eval_extractToken_bb4_in/2 
* Loop 17: eval_extractToken_bb4_in(V_index_1,B)->  eval_extractToken_bb4_in(V_index_1',B')
                  [99>=V_index_1,V_index_1+1=V_index_1',B'=2,B=2] 
* Loop 18: eval_extractToken_bb4_in(V_index_1,B) [V_index_1>=100,B=2] 
* Loop 19: eval_extractToken_bb4_in(V_index_1,B) [99>=V_index_1,B=2] 

### Ranking functions of CR eval_extractToken_bb4_in(V_index_1,B) 
* RF of phase [17]: [-V_index_1+100]

#### Partial ranking functions of CR eval_extractToken_bb4_in(V_index_1,B) 
* Partial RF of phase [17]:
  - RF of loop [17:1]:
    -V_index_1+100


### Resulting Chains:eval_extractToken_bb4_in(V_index_1,B) 
* [[17],19]
* [[17],18]
* [19]
* [18]


### Merging Chains  eval_extractToken_bb4_in/2 into  External patterns of execution 
* [[19],[18,[17]],[19,[17]]] --> 1 
* [[18]] --> 2 


### Specialization of cost equations loop_cont_eval_extractToken_bb1_in/3 
* CE 9 is refined into CE [21,22] 


#### Refined cost equations loop_cont_eval_extractToken_bb1_in/3 
* CE 21: loop_cont_eval_extractToken_bb1_in(E,A,B) = 1+ eval_extractToken_bb4_in(A,F):1
     [99>=A,F=2,E=3] 
* CE 22: loop_cont_eval_extractToken_bb1_in(E,A,B) = 1+ eval_extractToken_bb4_in(A,F):2
     [A>=100,F=2,E=3] 

### Cost equations --> "Loop" of loop_cont_eval_extractToken_bb1_in/3 
* CEs [22] --> Loop 20 
* CEs [21] --> Loop 21 

#### Loops of loop_cont_eval_extractToken_bb1_in/3 
* Loop 20: loop_cont_eval_extractToken_bb1_in(E,A,B) [A>=100,E=3] 
* Loop 21: loop_cont_eval_extractToken_bb1_in(E,A,B) [99>=A,E=3] 

### Ranking functions of CR loop_cont_eval_extractToken_bb1_in(E,A,B) 

#### Partial ranking functions of CR loop_cont_eval_extractToken_bb1_in(E,A,B) 


### Resulting Chains:loop_cont_eval_extractToken_bb1_in(E,A,B) 
* [21]
* [20]


### Merging Chains  loop_cont_eval_extractToken_bb1_in/3 into  External patterns of execution 
* [[21]] --> 1 
* [[20]] --> 2 


### Specialization of cost equations eval_extractToken_bb0_in/1 
* CE 3 is refined into CE [23,24,25,26,27,28] 


#### Refined cost equations eval_extractToken_bb0_in/1 
* CE 23: eval_extractToken_bb0_in(B) = 1+ eval_extractToken_bb1_in(C,D,E,F):1+ loop_cont_eval_extractToken_bb1_in(G,H,B):1
     [H=0,G=3,F=0,E=3,D=0,C=0] 
* CE 24: eval_extractToken_bb0_in(B) = 1+ eval_extractToken_bb1_in(C,D,E,F):2+ loop_cont_eval_extractToken_bb1_in(G,H,B):1
     [0>=C+1,H=0,G=3,F=0,E=3,D=0] 
* CE 25: eval_extractToken_bb0_in(B) = 1+ eval_extractToken_bb1_in(C,D,E,F):3+ loop_cont_eval_extractToken_bb1_in(G,H,B):1
     [C>=1,H=0,G=3,F=0,E=3,D=0] 
* CE 26: eval_extractToken_bb0_in(B) = 1+ eval_extractToken_bb1_in(C,D,E,F):4+ loop_cont_eval_extractToken_bb1_in(G,F,B):1
     [F>=1,99>=F,G=3,E=3,D=0] 
* CE 27: eval_extractToken_bb0_in(B) = 1+ eval_extractToken_bb1_in(C,D,E,F):4+ loop_cont_eval_extractToken_bb1_in(G,F,B):2
     [F>=100,G=3,E=3,D=0] 
* CE 28: eval_extractToken_bb0_in(B) = 1+ eval_extractToken_bb1_in(C,D,E,F):5
     [D=0] 

### Cost equations --> "Loop" of eval_extractToken_bb0_in/1 
* CEs [28] --> Loop 22 
* CEs [23,24,25,26,27] --> Loop 23 

#### Loops of eval_extractToken_bb0_in/1 
* Loop 22: eval_extractToken_bb0_in(B) [] 
* Loop 23: eval_extractToken_bb0_in(B) [] 

### Ranking functions of CR eval_extractToken_bb0_in(B) 

#### Partial ranking functions of CR eval_extractToken_bb0_in(B) 


### Resulting Chains:eval_extractToken_bb0_in(B) 
* [23]
* [22]...


### Merging Chains  eval_extractToken_bb0_in/1 into  External patterns of execution 
* [[23]] --> 1 
* [[22]] --> 2 


### Specialization of cost equations eval_extractToken_start/1 
* CE 2 is refined into CE [29,30] 


#### Refined cost equations eval_extractToken_start/1 
* CE 29: eval_extractToken_start(B) = 0+ eval_extractToken_bb0_in(B):1
     [] 
* CE 30: eval_extractToken_start(B) = 0+ eval_extractToken_bb0_in(B):2
     [] 

### Cost equations --> "Loop" of eval_extractToken_start/1 
* CEs [30] --> Loop 24 
* CEs [29] --> Loop 25 

#### Loops of eval_extractToken_start/1 
* Loop 24: eval_extractToken_start(B) [] 
* Loop 25: eval_extractToken_start(B) [] 

### Ranking functions of CR eval_extractToken_start(B) 

#### Partial ranking functions of CR eval_extractToken_start(B) 


### Resulting Chains:eval_extractToken_start(B) 
* [25]
* [24]...


### Merging Chains  eval_extractToken_start/1 into  External patterns of execution 
* [[25]] --> 1 
* [[24]] --> 2 


Computing Bounds
=====================================

#### Cost of loops [12,13] 

 * loop 12:eval_extractToken_bb1_in(V_ch_0,V_index_0,B,C) -> [eval_extractToken_bb1_in(V_ch_0',V_index_0',B',C')] 
1
 * loop 13:eval_extractToken_bb1_in(V_ch_0,V_index_0,B,C) -> [eval_extractToken_bb1_in(V_ch_0',V_index_0',B',C')] 
1
#### Cost of phase [12,13]:eval_extractToken_bb1_in(V_ch_0,V_index_0,B,C) -> [eval_extractToken_bb1_in(V_ch_0',V_index_0',B',C')] 
2*it(12)+0
#### Cost of phase [12,13]:eval_extractToken_bb1_in(V_ch_0,V_index_0,B,C) -> [eval_extractToken_bb1_in(V_ch_0',V_index_0',B',C')] 
2*it(12)+0
#### Cost of phase [12,13]:eval_extractToken_bb1_in(V_ch_0,V_index_0,B,C) -> [eval_extractToken_bb1_in(V_ch_0',V_index_0',B',C')] 
2*it(12)+0
#### Cost of phase [12,13]:eval_extractToken_bb1_in(V_ch_0,V_index_0,B,C) -> [eval_extractToken_bb1_in(V_ch_0',V_index_0',B',C')] 
2*it(12)+0
#### Cost of chains of eval_extractToken_bb1_in(V_ch_0,V_index_0,B,C):
* Chain [[12,13]]...: 2*it(12)+0
  with precondition: [V_index_0>=0] 

* Chain [[12,13],16]: 2*it(12)+0
  with precondition: [B=3,V_index_0>=0,C>=V_index_0+1] 

* Chain [[12,13],15]: 2*it(12)+0
  with precondition: [B=3,V_index_0>=0,C>=V_index_0+1] 

* Chain [[12,13],14]: 2*it(12)+0
  with precondition: [B=3,V_index_0>=0,C>=V_index_0+1] 

* Chain [16]: 0
  with precondition: [V_ch_0=0,B=3,V_index_0=C,V_index_0>=0] 

* Chain [15]: 0
  with precondition: [B=3,V_index_0=C,0>=V_ch_0+1,V_index_0>=0] 

* Chain [14]: 0
  with precondition: [B=3,V_index_0=C,V_ch_0>=1,V_index_0>=0] 


#### Cost of loops [17] 

 * loop 17:eval_extractToken_bb4_in(V_index_1,B) -> [eval_extractToken_bb4_in(V_index_1',B')] 
1
#### Cost of phase [17]:eval_extractToken_bb4_in(V_index_1,B) -> [eval_extractToken_bb4_in(V_index_1',B')] 
1*it(17)+0
  Such that:it(17) =< -V_index_1+100
it(17) =< -V_index_1+V_index_1'

#### Cost of phase [17]:eval_extractToken_bb4_in(V_index_1,B) -> [eval_extractToken_bb4_in(V_index_1',B')] 
1*it(17)+0
  Such that:it(17) =< -V_index_1+100
it(17) =< -V_index_1+V_index_1'

#### Cost of chains of eval_extractToken_bb4_in(V_index_1,B):
* Chain [[17],19]: 1*it(17)+0
  Such that:it(17) =< -V_index_1+99

  with precondition: [B=2,98>=V_index_1] 

* Chain [[17],18]: 1*it(17)+0
  Such that:it(17) =< -V_index_1+100

  with precondition: [B=2,99>=V_index_1] 

* Chain [19]: 0
  with precondition: [B=2,99>=V_index_1] 

* Chain [18]: 0
  with precondition: [B=2,V_index_1>=100] 


#### Cost of chains of loop_cont_eval_extractToken_bb1_in(E,A,B):
* Chain [21]: 1*s(6)+1*s(7)+1
  Such that:s(6) =< -A+99
s(7) =< -A+100

  with precondition: [E=3,99>=A] 

* Chain [20]: 1
  with precondition: [E=3,A>=100] 


#### Cost of chains of eval_extractToken_bb0_in(B):
* Chain [23]: 1*aux(4)+0
  with precondition: [] 

* Chain [22]...: 2*s(18)+1
  with precondition: [] 


#### Cost of chains of eval_extractToken_start(B):
* Chain [25]: 1*s(19)+0
  with precondition: [] 

* Chain [24]...: 2*s(20)+1
  with precondition: [] 


Closed-form bounds of eval_extractToken_start(B): 
-------------------------------------
* Chain [25] with precondition: [] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [24]... with precondition: [] 
    - Upper bound: inf 
    - Complexity: infinity 

### Maximum cost of eval_extractToken_start(B): inf 
Asymptotic class: infinity 

Time statistics: 
-------------------------------------
* Partial evaluation computed in 21 ms.
* Invariants computed in 68 ms.
   - Backward Invariants 41 ms.
   - Transitive Invariants 9 ms.
* Refinement performed in 97 ms.
* Termination proved in 8 ms.
* Upper bounds computed in 78 ms.
   - Equation cost structures 33 ms.
   - Phase cost structures 18 ms.
   - Chain cost structures 26 ms.
   - Solving cost expressions 0 ms.
* Total analysis performed in 327 ms.


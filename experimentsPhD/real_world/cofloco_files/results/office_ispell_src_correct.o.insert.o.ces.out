Warning: Ignored call to eval_insert_stop/1 in equation eval_insert_bb7_in/1 

Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. recursive  : [eval_insert_4/7,eval_insert_5/7,eval_insert_bb1_in/7]
1. non_recursive  : [eval_insert_bb7_in/1]
2. non_recursive  : [eval_insert_bb6_in/1]
3. non_recursive  : [eval_insert_14/2]
4. non_recursive  : [eval_insert_13/3]
5. non_recursive  : [eval_insert_12/3]
6. non_recursive  : [loop_cont_eval_insert_bb1_in/4]
7. non_recursive  : [eval_insert_1/3]
8. non_recursive  : [eval_insert_0/3]
9. non_recursive  : [eval_insert_bb0_in/3]
10. non_recursive  : [eval_insert_start/3]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into eval_insert_bb1_in/7
1. SCC is completely evaluated into other SCCs
2. SCC is completely evaluated into other SCCs
3. SCC is completely evaluated into other SCCs
4. SCC is completely evaluated into other SCCs
5. SCC is completely evaluated into other SCCs
6. SCC is partially evaluated into loop_cont_eval_insert_bb1_in/4
7. SCC is partially evaluated into eval_insert_1/3
8. SCC is completely evaluated into other SCCs
9. SCC is completely evaluated into other SCCs
10. SCC is partially evaluated into eval_insert_start/3

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations eval_insert_bb1_in/7 
* CE 6 is refined into CE [9] 
* CE 5 is refined into CE [10] 
* CE 4 is refined into CE [11] 


#### Refined cost equations eval_insert_bb1_in/7 
* CE 9: eval_insert_bb1_in(A,B,B,C,D,A,E) = 0
     [C>=B,C>=0,B+1=E,D=3] 
* CE 10: eval_insert_bb1_in(A,B,B,C,D,E,F) = 0
     [B>=C+1,C>=0,D=2] 
* CE 11: eval_insert_bb1_in(A,B,B,C,D,E,F) = 1+ eval_insert_bb1_in(A,B,B,G,D,E,F)
     [B>=C+1,C>=0,C+1=G] 

### Cost equations --> "Loop" of eval_insert_bb1_in/7 
* CEs [11] --> Loop 8 
* CEs [9] --> Loop 9 
* CEs [10] --> Loop 10 

#### Loops of eval_insert_bb1_in/7 
* Loop 8: eval_insert_bb1_in(A,B,B,C,D,E,F)->  eval_insert_bb1_in(A,B,B,A',D,E,F)
                  [B>=C+1,C>=0,C+1=A'] 
* Loop 9: eval_insert_bb1_in(A,B,B,C,D,A,E) [C>=B,C>=0,B+1=E,D=3] 
* Loop 10: eval_insert_bb1_in(A,B,B,C,D,E,F) [B>=C+1,C>=0,D=2] 

### Ranking functions of CR eval_insert_bb1_in(V__maxposslen,V__pcount,V_1,V_i_0,B,C,D) 
* RF of phase [8]: [V_1-V_i_0,V__pcount-V_i_0]

#### Partial ranking functions of CR eval_insert_bb1_in(V__maxposslen,V__pcount,V_1,V_i_0,B,C,D) 
* Partial RF of phase [8]:
  - RF of loop [8:1]:
    V_1-V_i_0
    V__pcount-V_i_0


### Resulting Chains:eval_insert_bb1_in(V__maxposslen,V__pcount,V_1,V_i_0,B,C,D) 
* [[8],10]
* [[8],9]
* [10]
* [9]


### Merging Chains  eval_insert_bb1_in/7 into  External patterns of execution 
* [[10],[10,[8]]] --> 1 
* [[9]] --> 2 
* [[9,[8]]] --> 3 


### Specialization of cost equations loop_cont_eval_insert_bb1_in/4 
* CE 8 is refined into CE [12] 
* CE 7 is refined into CE [13] 


#### Refined cost equations loop_cont_eval_insert_bb1_in/4 
* CE 12: loop_cont_eval_insert_bb1_in(D,A,B,C) = 0
     [D=3] 
* CE 13: loop_cont_eval_insert_bb1_in(D,A,B,C) = 0
     [D=2] 

### Cost equations --> "Loop" of loop_cont_eval_insert_bb1_in/4 
* CEs [12] --> Loop 11 
* CEs [13] --> Loop 12 

#### Loops of loop_cont_eval_insert_bb1_in/4 
* Loop 11: loop_cont_eval_insert_bb1_in(D,A,B,C) [D=3] 
* Loop 12: loop_cont_eval_insert_bb1_in(D,A,B,C) [D=2] 

### Ranking functions of CR loop_cont_eval_insert_bb1_in(D,A,B,C) 

#### Partial ranking functions of CR loop_cont_eval_insert_bb1_in(D,A,B,C) 


### Resulting Chains:loop_cont_eval_insert_bb1_in(D,A,B,C) 
* [12]
* [11]


### Merging Chains  loop_cont_eval_insert_bb1_in/4 into  External patterns of execution 
* [[12]] --> 1 
* [[11]] --> 2 


### Specialization of cost equations eval_insert_1/3 
* CE 3 is refined into CE [14,15,16] 


#### Refined cost equations eval_insert_1/3 
* CE 14: eval_insert_1(V__maxposslen,V__pcount,B) = 1+ eval_insert_bb1_in(V__maxposslen,V__pcount,V__pcount,C,D,E,F):1+ loop_cont_eval_insert_bb1_in(G,E,F,B):1
     [V__pcount>=1,G=2,D=2,C=0] 
* CE 15: eval_insert_1(V__maxposslen,V__pcount,B) = 1+ eval_insert_bb1_in(V__maxposslen,V__pcount,V__pcount,C,D,V__maxposslen,E):2+ loop_cont_eval_insert_bb1_in(F,V__maxposslen,G,B):2
     [0>=V__pcount,V__pcount+1=G,V__pcount+1=E,F=3,D=3,C=0] 
* CE 16: eval_insert_1(V__maxposslen,V__pcount,B) = 1+ eval_insert_bb1_in(V__maxposslen,V__pcount,V__pcount,C,D,V__maxposslen,E):3+ loop_cont_eval_insert_bb1_in(F,V__maxposslen,G,B):2
     [V__pcount>=1,V__pcount+1=G,V__pcount+1=E,F=3,D=3,C=0] 

### Cost equations --> "Loop" of eval_insert_1/3 
* CEs [14,16] --> Loop 13 
* CEs [15] --> Loop 14 

#### Loops of eval_insert_1/3 
* Loop 13: eval_insert_1(V__maxposslen,V__pcount,B) [V__pcount>=1] 
* Loop 14: eval_insert_1(V__maxposslen,V__pcount,B) [0>=V__pcount] 

### Ranking functions of CR eval_insert_1(V__maxposslen,V__pcount,B) 

#### Partial ranking functions of CR eval_insert_1(V__maxposslen,V__pcount,B) 


### Resulting Chains:eval_insert_1(V__maxposslen,V__pcount,B) 
* [14]
* [13]


### Merging Chains  eval_insert_1/3 into  External patterns of execution 
* [[14]] --> 1 
* [[13]] --> 2 


### Specialization of cost equations eval_insert_start/3 
* CE 2 is refined into CE [17,18] 


#### Refined cost equations eval_insert_start/3 
* CE 17: eval_insert_start(V__maxposslen,V__pcount,B) = 0+ eval_insert_1(V__maxposslen,V__pcount,B):1
     [0>=V__pcount] 
* CE 18: eval_insert_start(V__maxposslen,V__pcount,B) = 0+ eval_insert_1(V__maxposslen,V__pcount,B):2
     [V__pcount>=1] 

### Cost equations --> "Loop" of eval_insert_start/3 
* CEs [18] --> Loop 15 
* CEs [17] --> Loop 16 

#### Loops of eval_insert_start/3 
* Loop 15: eval_insert_start(V__maxposslen,V__pcount,B) [V__pcount>=1] 
* Loop 16: eval_insert_start(V__maxposslen,V__pcount,B) [0>=V__pcount] 

### Ranking functions of CR eval_insert_start(V__maxposslen,V__pcount,B) 

#### Partial ranking functions of CR eval_insert_start(V__maxposslen,V__pcount,B) 


### Resulting Chains:eval_insert_start(V__maxposslen,V__pcount,B) 
* [16]
* [15]


### Merging Chains  eval_insert_start/3 into  External patterns of execution 
* [[16]] --> 1 
* [[15]] --> 2 


Computing Bounds
=====================================

#### Cost of loops [8] 

 * loop 8:eval_insert_bb1_in(V__maxposslen,V__pcount,V_1,V_i_0,B,C,D) -> [eval_insert_bb1_in(V__maxposslen',V__pcount',V_1',V_i_0',B',C',D')] 
1
#### Cost of phase [8]:eval_insert_bb1_in(V__maxposslen,V__pcount,V_1,V_i_0,B,C,D) -> [eval_insert_bb1_in(V__maxposslen',V__pcount',V_1',V_i_0',B',C',D')] 
1*it(8)+0
  Such that:it(8) =< V__pcount-V_i_0
it(8) =< V__pcount-V_i_0-V__pcount'+V_i_0'
it(8) =< V_1-V_i_0
it(8) =< V_1-V_i_0-V_1'+V_i_0'

#### Cost of phase [8]:eval_insert_bb1_in(V__maxposslen,V__pcount,V_1,V_i_0,B,C,D) -> [eval_insert_bb1_in(V__maxposslen',V__pcount',V_1',V_i_0',B',C',D')] 
1*it(8)+0
  Such that:it(8) =< V__pcount-V_i_0
it(8) =< V__pcount-V_i_0-V__pcount'+V_i_0'
it(8) =< V_1-V_i_0
it(8) =< V_1-V_i_0-V_1'+V_i_0'

#### Cost of chains of eval_insert_bb1_in(V__maxposslen,V__pcount,V_1,V_i_0,B,C,D):
* Chain [[8],10]: 1*it(8)+0
  Such that:it(8) =< V__pcount-V_i_0

  with precondition: [B=2,V__pcount=V_1,V_i_0>=0,V__pcount>=V_i_0+2] 

* Chain [[8],9]: 1*it(8)+0
  Such that:it(8) =< -V_i_0+D

  with precondition: [B=3,V__pcount=V_1,V__maxposslen=C,V__pcount+1=D,V_i_0>=0,V__pcount>=V_i_0+1] 

* Chain [10]: 0
  with precondition: [B=2,V_1=V__pcount,V_i_0>=0,V_1>=V_i_0+1] 

* Chain [9]: 0
  with precondition: [B=3,C=V__maxposslen,V_1=V__pcount,V_1+1=D,V_i_0>=0,V_i_0>=V_1] 


#### Cost of chains of loop_cont_eval_insert_bb1_in(D,A,B,C):
* Chain [12]: 0
  with precondition: [D=2] 

* Chain [11]: 0
  with precondition: [D=3] 


#### Cost of chains of eval_insert_1(V__maxposslen,V__pcount,B):
* Chain [14]: 1
  with precondition: [0>=V__pcount] 

* Chain [13]: 1*s(2)+1*s(3)+1
  Such that:s(2) =< V__pcount
s(3) =< V__pcount+1

  with precondition: [V__pcount>=1] 


#### Cost of chains of eval_insert_start(V__maxposslen,V__pcount,B):
* Chain [16]: 1
  with precondition: [0>=V__pcount] 

* Chain [15]: 1*s(4)+1*s(5)+1
  Such that:s(4) =< V__pcount
s(5) =< V__pcount+1

  with precondition: [V__pcount>=1] 


Closed-form bounds of eval_insert_start(V__maxposslen,V__pcount,B): 
-------------------------------------
* Chain [16] with precondition: [0>=V__pcount] 
    - Upper bound: 1 
    - Complexity: constant 
* Chain [15] with precondition: [V__pcount>=1] 
    - Upper bound: 2*V__pcount+2 
    - Complexity: n 

### Maximum cost of eval_insert_start(V__maxposslen,V__pcount,B): nat(V__pcount+1)+nat(V__pcount)+1 
Asymptotic class: n 

Time statistics: 
-------------------------------------
* Partial evaluation computed in 10 ms.
* Invariants computed in 15 ms.
   - Backward Invariants 9 ms.
   - Transitive Invariants 3 ms.
* Refinement performed in 24 ms.
* Termination proved in 3 ms.
* Upper bounds computed in 23 ms.
   - Equation cost structures 8 ms.
   - Phase cost structures 5 ms.
   - Chain cost structures 9 ms.
   - Solving cost expressions 0 ms.
* Total analysis performed in 93 ms.


Warning: Ignored call to eval_casecmp_stop/1 in equation eval_casecmp_bb20_in/1 

Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. recursive  : [eval_casecmp_bb12_in/1,eval_casecmp_bb1_in/1]
1. non_recursive  : [eval_casecmp_bb20_in/1]
2. non_recursive  : [eval_casecmp_bb11_in/1]
3. recursive  : [eval_casecmp_bb16_in/1]
4. non_recursive  : [eval_casecmp_bb8_in/1]
5. non_recursive  : [loop_cont_eval_casecmp_bb16_in/2]
6. non_recursive  : [loop_cont_eval_casecmp_bb1_in/2]
7. non_recursive  : [eval_casecmp_2/1]
8. non_recursive  : [eval_casecmp_1/2]
9. non_recursive  : [eval_casecmp_0/2]
10. non_recursive  : [eval_casecmp_bb0_in/2]
11. non_recursive  : [eval_casecmp_start/2]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into eval_casecmp_bb1_in/1
1. SCC is completely evaluated into other SCCs
2. SCC is completely evaluated into other SCCs
3. SCC is partially evaluated into eval_casecmp_bb16_in/1
4. SCC is completely evaluated into other SCCs
5. SCC is completely evaluated into other SCCs
6. SCC is partially evaluated into loop_cont_eval_casecmp_bb1_in/2
7. SCC is partially evaluated into eval_casecmp_2/1
8. SCC is completely evaluated into other SCCs
9. SCC is completely evaluated into other SCCs
10. SCC is completely evaluated into other SCCs
11. SCC is partially evaluated into eval_casecmp_start/2

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations eval_casecmp_bb1_in/1 
* CE 8 is refined into CE [15] 
* CE 7 is refined into CE [16] 
* CE 6 is refined into CE [17] 
* CE 5 is refined into CE [18] 
* CE 4 is refined into CE [19] 


#### Refined cost equations eval_casecmp_bb1_in/1 
* CE 15: eval_casecmp_bb1_in(B) = 0
     [B=5] 
* CE 16: eval_casecmp_bb1_in(B) = 0
     [B=4] 
* CE 17: eval_casecmp_bb1_in(B) = 0
     [B=3] 
* CE 18: eval_casecmp_bb1_in(B) = 0
     [B=2] 
* CE 19: eval_casecmp_bb1_in(B) = 1+ eval_casecmp_bb1_in(B)
     [] 

### Cost equations --> "Loop" of eval_casecmp_bb1_in/1 
* CEs [19] --> Loop 14 
* CEs [15] --> Loop 15 
* CEs [16] --> Loop 16 
* CEs [17] --> Loop 17 
* CEs [18] --> Loop 18 

#### Loops of eval_casecmp_bb1_in/1 
* Loop 14: eval_casecmp_bb1_in(B)->  eval_casecmp_bb1_in(B)
                  [] 
* Loop 15: eval_casecmp_bb1_in(B) [B=5] 
* Loop 16: eval_casecmp_bb1_in(B) [B=4] 
* Loop 17: eval_casecmp_bb1_in(B) [B=3] 
* Loop 18: eval_casecmp_bb1_in(B) [B=2] 

### Ranking functions of CR eval_casecmp_bb1_in(B) 

#### Partial ranking functions of CR eval_casecmp_bb1_in(B) 


### Resulting Chains:eval_casecmp_bb1_in(B) 
* [[14]]...
* [[14],18]
* [[14],17]
* [[14],16]
* [[14],15]
* [18]
* [17]
* [16]
* [15]


### Merging Chains  eval_casecmp_bb1_in/1 into  External patterns of execution 
* [[18],[18,[14]]] --> 1 
* [[17],[17,[14]]] --> 2 
* [[16],[16,[14]]] --> 3 
* [[15],[15,[14]]] --> 4 
* [[[14]]] --> 5 


### Specialization of cost equations eval_casecmp_bb16_in/1 
* CE 14 is refined into CE [20] 
* CE 13 is refined into CE [21] 


#### Refined cost equations eval_casecmp_bb16_in/1 
* CE 20: eval_casecmp_bb16_in(B) = 1+ eval_casecmp_bb16_in(C)
     [C=2,B=2] 
* CE 21: eval_casecmp_bb16_in(B) = 0
     [B=2] 

### Cost equations --> "Loop" of eval_casecmp_bb16_in/1 
* CEs [21] --> Loop 19 
* CEs [20] --> Loop 20 

#### Loops of eval_casecmp_bb16_in/1 
* Loop 19: eval_casecmp_bb16_in(B) [B=2] 
* Loop 20: eval_casecmp_bb16_in(B)->  eval_casecmp_bb16_in(B')
                  [B'=2,B=2] 

### Ranking functions of CR eval_casecmp_bb16_in(B) 

#### Partial ranking functions of CR eval_casecmp_bb16_in(B) 


### Resulting Chains:eval_casecmp_bb16_in(B) 
* [[20]]...
* [[20],19]
* [19]


### Merging Chains  eval_casecmp_bb16_in/1 into  External patterns of execution 
* [[19],[19,[20]]] --> 1 
* [[[20]]] --> 2 


### Specialization of cost equations loop_cont_eval_casecmp_bb1_in/2 
* CE 12 is refined into CE [22,23] 
* CE 11 is refined into CE [24] 
* CE 10 is refined into CE [25] 
* CE 9 is refined into CE [26] 


#### Refined cost equations loop_cont_eval_casecmp_bb1_in/2 
* CE 22: loop_cont_eval_casecmp_bb1_in(B,A) = 1+ eval_casecmp_bb16_in(C):1
     [C=2,B=5] 
* CE 23: loop_cont_eval_casecmp_bb1_in(B,A) = 1+ eval_casecmp_bb16_in(C):2
     [C=2,B=5] 
* CE 24: loop_cont_eval_casecmp_bb1_in(B,A) = 0
     [B=4] 
* CE 25: loop_cont_eval_casecmp_bb1_in(B,A) = 0
     [B=3] 
* CE 26: loop_cont_eval_casecmp_bb1_in(B,A) = 0
     [B=2] 

### Cost equations --> "Loop" of loop_cont_eval_casecmp_bb1_in/2 
* CEs [22] --> Loop 21 
* CEs [24] --> Loop 22 
* CEs [25] --> Loop 23 
* CEs [26] --> Loop 24 
* CEs [23] --> Loop 25 

#### Loops of loop_cont_eval_casecmp_bb1_in/2 
* Loop 21: loop_cont_eval_casecmp_bb1_in(B,A) [B=5] 
* Loop 22: loop_cont_eval_casecmp_bb1_in(B,A) [B=4] 
* Loop 23: loop_cont_eval_casecmp_bb1_in(B,A) [B=3] 
* Loop 24: loop_cont_eval_casecmp_bb1_in(B,A) [B=2] 
* Loop 25: loop_cont_eval_casecmp_bb1_in(B,A) [B=5] 

### Ranking functions of CR loop_cont_eval_casecmp_bb1_in(B,A) 

#### Partial ranking functions of CR loop_cont_eval_casecmp_bb1_in(B,A) 


### Resulting Chains:loop_cont_eval_casecmp_bb1_in(B,A) 
* [25]...
* [24]
* [23]
* [22]
* [21]


### Merging Chains  loop_cont_eval_casecmp_bb1_in/2 into  External patterns of execution 
* [[24]] --> 1 
* [[23]] --> 2 
* [[22]] --> 3 
* [[21]] --> 4 
* [[25]] --> 5 


### Specialization of cost equations eval_casecmp_2/1 
* CE 3 is refined into CE [27,28,29,30,31,32] 


#### Refined cost equations eval_casecmp_2/1 
* CE 27: eval_casecmp_2(B) = 1+ eval_casecmp_bb1_in(C):1+ loop_cont_eval_casecmp_bb1_in(D,B):1
     [D=2,C=2] 
* CE 28: eval_casecmp_2(B) = 1+ eval_casecmp_bb1_in(C):2+ loop_cont_eval_casecmp_bb1_in(D,B):2
     [D=3,C=3] 
* CE 29: eval_casecmp_2(B) = 1+ eval_casecmp_bb1_in(C):3+ loop_cont_eval_casecmp_bb1_in(D,B):3
     [D=4,C=4] 
* CE 30: eval_casecmp_2(B) = 1+ eval_casecmp_bb1_in(C):4+ loop_cont_eval_casecmp_bb1_in(D,B):4
     [D=5,C=5] 
* CE 31: eval_casecmp_2(B) = 1+ eval_casecmp_bb1_in(C):4+ loop_cont_eval_casecmp_bb1_in(D,B):5
     [D=5,C=5] 
* CE 32: eval_casecmp_2(B) = 1+ eval_casecmp_bb1_in(C):5
     [] 

### Cost equations --> "Loop" of eval_casecmp_2/1 
* CEs [31,32] --> Loop 26 
* CEs [27,28,29,30] --> Loop 27 

#### Loops of eval_casecmp_2/1 
* Loop 26: eval_casecmp_2(B) [] 
* Loop 27: eval_casecmp_2(B) [] 

### Ranking functions of CR eval_casecmp_2(B) 

#### Partial ranking functions of CR eval_casecmp_2(B) 


### Resulting Chains:eval_casecmp_2(B) 
* [27]
* [26]...


### Merging Chains  eval_casecmp_2/1 into  External patterns of execution 
* [[27]] --> 1 
* [[26]] --> 2 


### Specialization of cost equations eval_casecmp_start/2 
* CE 2 is refined into CE [33,34] 


#### Refined cost equations eval_casecmp_start/2 
* CE 33: eval_casecmp_start(V_canonical,B) = 0+ eval_casecmp_2(B):1
     [] 
* CE 34: eval_casecmp_start(V_canonical,B) = 0+ eval_casecmp_2(B):2
     [] 

### Cost equations --> "Loop" of eval_casecmp_start/2 
* CEs [34] --> Loop 28 
* CEs [33] --> Loop 29 

#### Loops of eval_casecmp_start/2 
* Loop 28: eval_casecmp_start(V_canonical,B) [] 
* Loop 29: eval_casecmp_start(V_canonical,B) [] 

### Ranking functions of CR eval_casecmp_start(V_canonical,B) 

#### Partial ranking functions of CR eval_casecmp_start(V_canonical,B) 


### Resulting Chains:eval_casecmp_start(V_canonical,B) 
* [29]
* [28]...


### Merging Chains  eval_casecmp_start/2 into  External patterns of execution 
* [[29]] --> 1 
* [[28]] --> 2 


Computing Bounds
=====================================

#### Cost of loops [14] 

 * loop 14:eval_casecmp_bb1_in(B) -> [eval_casecmp_bb1_in(B')] 
1
#### Cost of phase [14]:eval_casecmp_bb1_in(B) -> [eval_casecmp_bb1_in(B')] 
1*it(14)+0
#### Cost of phase [14]:eval_casecmp_bb1_in(B) -> [eval_casecmp_bb1_in(B')] 
1*it(14)+0
#### Cost of phase [14]:eval_casecmp_bb1_in(B) -> [eval_casecmp_bb1_in(B')] 
1*it(14)+0
#### Cost of phase [14]:eval_casecmp_bb1_in(B) -> [eval_casecmp_bb1_in(B')] 
1*it(14)+0
#### Cost of phase [14]:eval_casecmp_bb1_in(B) -> [eval_casecmp_bb1_in(B')] 
1*it(14)+0
#### Cost of chains of eval_casecmp_bb1_in(B):
* Chain [[14]]...: 1*it(14)+0
  with precondition: [] 

* Chain [[14],18]: 1*it(14)+0
  with precondition: [B=2] 

* Chain [[14],17]: 1*it(14)+0
  with precondition: [B=3] 

* Chain [[14],16]: 1*it(14)+0
  with precondition: [B=4] 

* Chain [[14],15]: 1*it(14)+0
  with precondition: [B=5] 

* Chain [18]: 0
  with precondition: [B=2] 

* Chain [17]: 0
  with precondition: [B=3] 

* Chain [16]: 0
  with precondition: [B=4] 

* Chain [15]: 0
  with precondition: [B=5] 


#### Cost of loops [20] 

 * loop 20:eval_casecmp_bb16_in(B) -> [eval_casecmp_bb16_in(B')] 
1
#### Cost of phase [20]:eval_casecmp_bb16_in(B) -> [eval_casecmp_bb16_in(B')] 
1*it(20)+0
#### Cost of phase [20]:eval_casecmp_bb16_in(B) -> [eval_casecmp_bb16_in(B')] 
1*it(20)+0
#### Cost of chains of eval_casecmp_bb16_in(B):
* Chain [[20]]...: 1*it(20)+0
  with precondition: [B=2] 

* Chain [[20],19]: 1*it(20)+0
  with precondition: [B=2] 

* Chain [19]: 0
  with precondition: [B=2] 


#### Cost of chains of loop_cont_eval_casecmp_bb1_in(B,A):
* Chain [25]...: 1*s(6)+1
  with precondition: [B=5] 

* Chain [24]: 0
  with precondition: [B=2] 

* Chain [23]: 0
  with precondition: [B=3] 

* Chain [22]: 0
  with precondition: [B=4] 

* Chain [21]: 1*s(7)+1
  with precondition: [B=5] 


#### Cost of chains of eval_casecmp_2(B):
* Chain [27]: 1*aux(6)+0
  with precondition: [] 

* Chain [26]...: 1*aux(7)+0
  with precondition: [] 


#### Cost of chains of eval_casecmp_start(V_canonical,B):
* Chain [29]: 1*s(16)+0
  with precondition: [] 

* Chain [28]...: 1*s(17)+0
  with precondition: [] 


Closed-form bounds of eval_casecmp_start(V_canonical,B): 
-------------------------------------
* Chain [29] with precondition: [] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [28]... with precondition: [] 
    - Upper bound: inf 
    - Complexity: infinity 

### Maximum cost of eval_casecmp_start(V_canonical,B): inf 
Asymptotic class: infinity 

Time statistics: 
-------------------------------------
* Partial evaluation computed in 19 ms.
* Invariants computed in 21 ms.
   - Backward Invariants 13 ms.
   - Transitive Invariants 3 ms.
* Refinement performed in 48 ms.
* Termination proved in 2 ms.
* Upper bounds computed in 37 ms.
   - Equation cost structures 15 ms.
   - Phase cost structures 5 ms.
   - Chain cost structures 9 ms.
   - Solving cost expressions 0 ms.
* Total analysis performed in 168 ms.


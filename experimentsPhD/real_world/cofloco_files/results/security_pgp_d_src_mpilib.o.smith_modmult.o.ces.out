Warning: Ignored call to eval_smith_modmult_stop/1 in equation eval_smith_modmult_68/1 

Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. recursive  : [eval_smith_modmult_41/9,eval_smith_modmult_42/10,eval_smith_modmult_44/10,eval_smith_modmult_45/10,eval_smith_modmult_49/10,eval_smith_modmult_50/10,eval_smith_modmult_bb2_in/9,eval_smith_modmult_bb7_in/10]
1. non_recursive  : [eval_smith_modmult_68/1]
2. non_recursive  : [eval_smith_modmult_67/5]
3. non_recursive  : [eval_smith_modmult_bb10_in/4]
4. non_recursive  : [eval_smith_modmult_60/4]
5. non_recursive  : [eval_smith_modmult_59/4]
6. non_recursive  : [eval_smith_modmult_58/4]
7. non_recursive  : [loop_cont_eval_smith_modmult_bb2_in/5]
8. non_recursive  : [eval_smith_modmult_21/6]
9. non_recursive  : [eval_smith_modmult_20/6]
10. non_recursive  : [eval_smith_modmult_19/6]
11. non_recursive  : [eval_smith_modmult_12/6]
12. non_recursive  : [eval_smith_modmult_11/5]
13. non_recursive  : [eval_smith_modmult_2/5]
14. non_recursive  : [eval_smith_modmult_1/5]
15. non_recursive  : [eval_smith_modmult_bb0_in/4]
16. non_recursive  : [eval_smith_modmult_start/4]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into eval_smith_modmult_bb2_in/9
1. SCC is completely evaluated into other SCCs
2. SCC is completely evaluated into other SCCs
3. SCC is completely evaluated into other SCCs
4. SCC is completely evaluated into other SCCs
5. SCC is completely evaluated into other SCCs
6. SCC is completely evaluated into other SCCs
7. SCC is completely evaluated into other SCCs
8. SCC is partially evaluated into eval_smith_modmult_21/6
9. SCC is completely evaluated into other SCCs
10. SCC is completely evaluated into other SCCs
11. SCC is partially evaluated into eval_smith_modmult_12/6
12. SCC is completely evaluated into other SCCs
13. SCC is completely evaluated into other SCCs
14. SCC is completely evaluated into other SCCs
15. SCC is completely evaluated into other SCCs
16. SCC is partially evaluated into eval_smith_modmult_start/4

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations eval_smith_modmult_bb2_in/9 
* CE 10 is refined into CE [11] 
* CE 8 is refined into CE [12] 
* CE 9 is refined into CE [13] 


#### Refined cost equations eval_smith_modmult_bb2_in/9 
* CE 11: eval_smith_modmult_bb2_in(A,B,C,D,E,F,D,B,C) = 0
     [F=2,E=0] 
* CE 12: eval_smith_modmult_bb2_in(V__global_precision,V__munit_prec,V__modlenMULTUNITS,V_0,V_nqd_0,B,C,D,E) = 1+ eval_smith_modmult_bb2_in(F,G,H,V_0,I,J,C,D,E)
     [V_nqd_0>=1,V_nqd_0=I+1,J=2,B=2] 
* CE 13: eval_smith_modmult_bb2_in(V__global_precision,V__munit_prec,V__modlenMULTUNITS,V_0,V_nqd_0,B,C,D,E) = 1+ eval_smith_modmult_bb2_in(F,G,H,V_0,I,J,C,D,E)
     [0>=V_nqd_0+1,V_nqd_0=I+1,J=2,B=2] 

### Cost equations --> "Loop" of eval_smith_modmult_bb2_in/9 
* CEs [12] --> Loop 9 
* CEs [13] --> Loop 10 
* CEs [11] --> Loop 11 

#### Loops of eval_smith_modmult_bb2_in/9 
* Loop 9: eval_smith_modmult_bb2_in(V__global_precision,V__munit_prec,V__modlenMULTUNITS,V_0,V_nqd_0,B,C,D,E)->  eval_smith_modmult_bb2_in(V__global_precision',V__munit_prec',V__modlenMULTUNITS',V_0,V_nqd_0',B',C,D,E)
                  [V_nqd_0>=1,V_nqd_0=V_nqd_0'+1,B'=2,B=2] 
* Loop 10: eval_smith_modmult_bb2_in(V__global_precision,V__munit_prec,V__modlenMULTUNITS,V_0,V_nqd_0,B,C,D,E)->  eval_smith_modmult_bb2_in(V__global_precision',V__munit_prec',V__modlenMULTUNITS',V_0,V_nqd_0',B',C,D,E)
                  [0>=V_nqd_0+1,V_nqd_0=V_nqd_0'+1,B'=2,B=2] 
* Loop 11: eval_smith_modmult_bb2_in(A,B,C,D,E,F,D,B,C) [F=2,E=0] 

### Ranking functions of CR eval_smith_modmult_bb2_in(V__global_precision,V__munit_prec,V__modlenMULTUNITS,V_0,V_nqd_0,B,C,D,E) 
* RF of phase [9]: [V_nqd_0]

#### Partial ranking functions of CR eval_smith_modmult_bb2_in(V__global_precision,V__munit_prec,V__modlenMULTUNITS,V_0,V_nqd_0,B,C,D,E) 
* Partial RF of phase [9]:
  - RF of loop [9:1]:
    V_nqd_0


### Resulting Chains:eval_smith_modmult_bb2_in(V__global_precision,V__munit_prec,V__modlenMULTUNITS,V_0,V_nqd_0,B,C,D,E) 
* [[10]]...
* [[9],11]
* [11]


### Merging Chains  eval_smith_modmult_bb2_in/9 into  External patterns of execution 
* [[11]] --> 1 
* [[11,[9]]] --> 2 
* [[[10]]] --> 3 


### Specialization of cost equations eval_smith_modmult_21/6 
* CE 6 is refined into CE [14,15,16] 
* CE 7 is refined into CE [17,18,19] 
* CE 5 is refined into CE [20,21,22] 


#### Refined cost equations eval_smith_modmult_21/6 
* CE 14: eval_smith_modmult_21(V__global_precision,V__munit_prec,V__modlenMULTUNITS,V_0,V_16,B) = 1+ eval_smith_modmult_bb2_in(V_0,C,V__modlenMULTUNITS,V_0,D,E,V_0,C,V__modlenMULTUNITS):1
     [V_0>=C,16*C+15>=16*V_0,16*V_0>=1,C>=0,V__modlenMULTUNITS=V_16+1,2*V_0+1=V__global_precision,E=2,D=0] 
* CE 15: eval_smith_modmult_21(V__global_precision,V__munit_prec,V__modlenMULTUNITS,V_0,V_16,B) = 1+ eval_smith_modmult_bb2_in(V_0,C,V__modlenMULTUNITS,V_0,D,E,V_0,F,G):2
     [V_0>=C,16*C+15>=16*V_0,16*V_0>=1,D>=1,C>=0,V__modlenMULTUNITS+D=V_16+1,2*V_0+1=V__global_precision,E=2] 
* CE 16: eval_smith_modmult_21(V__global_precision,V__munit_prec,V__modlenMULTUNITS,V_0,V_16,B) = 1+ eval_smith_modmult_bb2_in(V_0,C,V__modlenMULTUNITS,V_0,D,E,F,G,H):3
     [V_0>=C,16*C+15>=16*V_0,16*V_0>=1,C>=0,0>=D+1,V__modlenMULTUNITS+D=V_16+1,2*V_0+1=V__global_precision,E=2] 
* CE 17: eval_smith_modmult_21(V__global_precision,V__munit_prec,V__modlenMULTUNITS,V_0,V_16,B) = 1+ eval_smith_modmult_bb2_in(V_0,C,V__modlenMULTUNITS,V_0,D,E,V_0,C,V__modlenMULTUNITS):1
     [C>=V_0,16*V_0+15>=16*C,0>=C,0>=16*V_0+1,V__modlenMULTUNITS=V_16+1,2*V_0+1=V__global_precision,E=2,D=0] 
* CE 18: eval_smith_modmult_21(V__global_precision,V__munit_prec,V__modlenMULTUNITS,V_0,V_16,B) = 1+ eval_smith_modmult_bb2_in(V_0,C,V__modlenMULTUNITS,V_0,D,E,V_0,F,G):2
     [C>=V_0,16*V_0+15>=16*C,D>=1,0>=C,0>=16*V_0+1,V__modlenMULTUNITS+D=V_16+1,2*V_0+1=V__global_precision,E=2] 
* CE 19: eval_smith_modmult_21(V__global_precision,V__munit_prec,V__modlenMULTUNITS,V_0,V_16,B) = 1+ eval_smith_modmult_bb2_in(V_0,C,V__modlenMULTUNITS,V_0,D,E,F,G,H):3
     [C>=V_0,16*V_0+15>=16*C,0>=D+1,0>=C,0>=16*V_0+1,V__modlenMULTUNITS+D=V_16+1,2*V_0+1=V__global_precision,E=2] 
* CE 20: eval_smith_modmult_21(V__global_precision,V__munit_prec,V__modlenMULTUNITS,V_0,V_16,B) = 1+ eval_smith_modmult_bb2_in(C,D,V__modlenMULTUNITS,E,F,G,H,I,V__modlenMULTUNITS):1
     [V__modlenMULTUNITS=V_16+1,I=0,H=0,G=2,F=0,E=0,D=0,C=0,V_0=0,V__global_precision=1] 
* CE 21: eval_smith_modmult_21(V__global_precision,V__munit_prec,V__modlenMULTUNITS,V_0,V_16,B) = 1+ eval_smith_modmult_bb2_in(C,D,V__modlenMULTUNITS,E,F,G,H,I,J):2
     [F>=1,V__modlenMULTUNITS+F=V_16+1,H=0,G=2,E=0,D=0,C=0,V_0=0,V__global_precision=1] 
* CE 22: eval_smith_modmult_21(V__global_precision,V__munit_prec,V__modlenMULTUNITS,V_0,V_16,B) = 1+ eval_smith_modmult_bb2_in(C,D,V__modlenMULTUNITS,E,F,G,H,I,J):3
     [0>=F+1,V__modlenMULTUNITS+F=V_16+1,G=2,E=0,D=0,C=0,V_0=0,V__global_precision=1] 

### Cost equations --> "Loop" of eval_smith_modmult_21/6 
* CEs [19] --> Loop 12 
* CEs [16] --> Loop 13 
* CEs [22] --> Loop 14 
* CEs [18] --> Loop 15 
* CEs [17] --> Loop 16 
* CEs [15] --> Loop 17 
* CEs [14] --> Loop 18 
* CEs [21] --> Loop 19 
* CEs [20] --> Loop 20 

#### Loops of eval_smith_modmult_21/6 
* Loop 12: eval_smith_modmult_21(V__global_precision,V__munit_prec,V__modlenMULTUNITS,V_0,V_16,B) [V__modlenMULTUNITS>=V_16+2,7>=8*V__global_precision,V__global_precision=2*V_0+1] 
* Loop 13: eval_smith_modmult_21(V__global_precision,V__munit_prec,V__modlenMULTUNITS,V_0,V_16,B) [V__modlenMULTUNITS>=V_16+2,8*V__global_precision>=9,V__global_precision=2*V_0+1] 
* Loop 14: eval_smith_modmult_21(V__global_precision,V__munit_prec,V__modlenMULTUNITS,V_0,V_16,B) [V__modlenMULTUNITS>=V_16+2,V_0=0,V__global_precision=1] 
* Loop 15: eval_smith_modmult_21(V__global_precision,V__munit_prec,V__modlenMULTUNITS,V_0,V_16,B) [V_16>=V__modlenMULTUNITS,7>=8*V__global_precision,V__global_precision=2*V_0+1] 
* Loop 16: eval_smith_modmult_21(V__global_precision,V__munit_prec,V__modlenMULTUNITS,V_0,V_16,B) [7>=8*V__global_precision,V__modlenMULTUNITS=V_16+1,V__global_precision=2*V_0+1] 
* Loop 17: eval_smith_modmult_21(V__global_precision,V__munit_prec,V__modlenMULTUNITS,V_0,V_16,B) [V_16>=V__modlenMULTUNITS,8*V__global_precision>=9,V__global_precision=2*V_0+1] 
* Loop 18: eval_smith_modmult_21(V__global_precision,V__munit_prec,V__modlenMULTUNITS,V_0,V_16,B) [8*V__global_precision>=9,V__modlenMULTUNITS=V_16+1,V__global_precision=2*V_0+1] 
* Loop 19: eval_smith_modmult_21(V__global_precision,V__munit_prec,V__modlenMULTUNITS,V_0,V_16,B) [V_16>=V__modlenMULTUNITS,V_0=0,V__global_precision=1] 
* Loop 20: eval_smith_modmult_21(V__global_precision,V__munit_prec,V__modlenMULTUNITS,V_0,V_16,B) [V__modlenMULTUNITS=V_16+1,V_0=0,V__global_precision=1] 

### Ranking functions of CR eval_smith_modmult_21(V__global_precision,V__munit_prec,V__modlenMULTUNITS,V_0,V_16,B) 

#### Partial ranking functions of CR eval_smith_modmult_21(V__global_precision,V__munit_prec,V__modlenMULTUNITS,V_0,V_16,B) 


### Resulting Chains:eval_smith_modmult_21(V__global_precision,V__munit_prec,V__modlenMULTUNITS,V_0,V_16,B) 
* [20]
* [19]
* [18]
* [17]
* [16]
* [15]
* [14]...
* [13]...
* [12]...


### Merging Chains  eval_smith_modmult_21/6 into  External patterns of execution 
* [[20]] --> 1 
* [[19]] --> 2 
* [[16]] --> 3 
* [[18]] --> 4 
* [[15]] --> 5 
* [[17]] --> 6 
* [[14]] --> 7 
* [[12]] --> 8 
* [[13]] --> 9 


### Specialization of cost equations eval_smith_modmult_12/6 
* CE 3 is refined into CE [23,24,25,26,27,28,29,30,31] 
* CE 4 is refined into CE [32] 


#### Refined cost equations eval_smith_modmult_12/6 
* CE 23: eval_smith_modmult_12(V__global_precision,V__munit_prec,V__modlenMULTUNITS,V_0,V_13,B) = 0+ eval_smith_modmult_21(C,V__munit_prec,D,E,V_13,B):1
     [V_13+1=D,V_13+1=V__modlenMULTUNITS,E=0,C=1,V_0=0,V__global_precision=1] 
* CE 24: eval_smith_modmult_12(V__global_precision,V__munit_prec,V__modlenMULTUNITS,V_0,V_13,B) = 0+ eval_smith_modmult_21(C,V__munit_prec,V__modlenMULTUNITS,D,V_13,B):2
     [V_13>=V__modlenMULTUNITS,D=0,C=1,V_0=0,V__global_precision=1] 
* CE 25: eval_smith_modmult_12(V__global_precision,V__munit_prec,V__modlenMULTUNITS,V_0,V_13,B) = 0+ eval_smith_modmult_21(C,V__munit_prec,D,V_0,V_13,B):3
     [0>=16*V_0+1,V_13+1=D,2*V_0+1=C,V_13+1=V__modlenMULTUNITS,2*V_0+1=V__global_precision] 
* CE 26: eval_smith_modmult_12(V__global_precision,V__munit_prec,V__modlenMULTUNITS,V_0,V_13,B) = 0+ eval_smith_modmult_21(C,V__munit_prec,D,V_0,V_13,B):4
     [16*V_0>=1,V_13+1=D,2*V_0+1=C,V_13+1=V__modlenMULTUNITS,2*V_0+1=V__global_precision] 
* CE 27: eval_smith_modmult_12(V__global_precision,V__munit_prec,V__modlenMULTUNITS,V_0,V_13,B) = 0+ eval_smith_modmult_21(C,V__munit_prec,V__modlenMULTUNITS,V_0,V_13,B):5
     [V_13>=V__modlenMULTUNITS,0>=16*V_0+1,2*V_0+1=C,2*V_0+1=V__global_precision] 
* CE 28: eval_smith_modmult_12(V__global_precision,V__munit_prec,V__modlenMULTUNITS,V_0,V_13,B) = 0+ eval_smith_modmult_21(C,V__munit_prec,V__modlenMULTUNITS,V_0,V_13,B):6
     [V_13>=V__modlenMULTUNITS,16*V_0>=1,2*V_0+1=C,2*V_0+1=V__global_precision] 
* CE 29: eval_smith_modmult_12(V__global_precision,V__munit_prec,V__modlenMULTUNITS,V_0,V_13,B) = 0+ eval_smith_modmult_21(C,V__munit_prec,V__modlenMULTUNITS,D,V_13,B):7
     [V__modlenMULTUNITS>=V_13+2,D=0,C=1,V_0=0,V__global_precision=1] 
* CE 30: eval_smith_modmult_12(V__global_precision,V__munit_prec,V__modlenMULTUNITS,V_0,V_13,B) = 0+ eval_smith_modmult_21(V__global_precision,V__munit_prec,V__modlenMULTUNITS,C,V_13,B):8
     [V__modlenMULTUNITS>=V_13+2,7>=8*V__global_precision,V__global_precision=2*C+1,V__global_precision=2*V_0+1] 
* CE 31: eval_smith_modmult_12(V__global_precision,V__munit_prec,V__modlenMULTUNITS,V_0,V_13,B) = 0+ eval_smith_modmult_21(V__global_precision,V__munit_prec,V__modlenMULTUNITS,C,V_13,B):9
     [V__modlenMULTUNITS>=V_13+2,8*V__global_precision>=9,V__global_precision=2*C+1,V__global_precision=2*V_0+1] 
* CE 32: eval_smith_modmult_12(V__global_precision,V__munit_prec,V__modlenMULTUNITS,V_0,V_13,B) = 0
     [2*V_0+1=V__global_precision] 

### Cost equations --> "Loop" of eval_smith_modmult_12/6 
* CEs [24] --> Loop 21 
* CEs [23,25,26,27,28,32] --> Loop 22 
* CEs [31] --> Loop 23 
* CEs [30] --> Loop 24 
* CEs [29] --> Loop 25 

#### Loops of eval_smith_modmult_12/6 
* Loop 21: eval_smith_modmult_12(V__global_precision,V__munit_prec,V__modlenMULTUNITS,V_0,V_13,B) [V_13>=V__modlenMULTUNITS,V_0=0,V__global_precision=1] 
* Loop 22: eval_smith_modmult_12(V__global_precision,V__munit_prec,V__modlenMULTUNITS,V_0,V_13,B) [V__global_precision=2*V_0+1] 
* Loop 23: eval_smith_modmult_12(V__global_precision,V__munit_prec,V__modlenMULTUNITS,V_0,V_13,B) [V__modlenMULTUNITS>=V_13+2,8*V__global_precision>=9,V__global_precision=2*V_0+1] 
* Loop 24: eval_smith_modmult_12(V__global_precision,V__munit_prec,V__modlenMULTUNITS,V_0,V_13,B) [V__modlenMULTUNITS>=V_13+2,7>=8*V__global_precision,V__global_precision=2*V_0+1] 
* Loop 25: eval_smith_modmult_12(V__global_precision,V__munit_prec,V__modlenMULTUNITS,V_0,V_13,B) [V__modlenMULTUNITS>=V_13+2,V_0=0,V__global_precision=1] 

### Ranking functions of CR eval_smith_modmult_12(V__global_precision,V__munit_prec,V__modlenMULTUNITS,V_0,V_13,B) 

#### Partial ranking functions of CR eval_smith_modmult_12(V__global_precision,V__munit_prec,V__modlenMULTUNITS,V_0,V_13,B) 


### Resulting Chains:eval_smith_modmult_12(V__global_precision,V__munit_prec,V__modlenMULTUNITS,V_0,V_13,B) 
* [25]...
* [24]...
* [23]...
* [22]
* [21]


### Merging Chains  eval_smith_modmult_12/6 into  External patterns of execution 
* [[21],[22]] --> 1 
* [[25]] --> 2 
* [[24]] --> 3 
* [[23]] --> 4 


### Specialization of cost equations eval_smith_modmult_start/4 
* CE 2 is refined into CE [33,34,35,36] 


#### Refined cost equations eval_smith_modmult_start/4 
* CE 33: eval_smith_modmult_start(V__global_precision,V__munit_prec,V__modlenMULTUNITS,B) = 0+ eval_smith_modmult_12(C,V__munit_prec,V__modlenMULTUNITS,V__global_precision,D,B):1
     [2*V__global_precision+1=C] 
* CE 34: eval_smith_modmult_start(V__global_precision,V__munit_prec,V__modlenMULTUNITS,B) = 0+ eval_smith_modmult_12(C,V__munit_prec,V__modlenMULTUNITS,D,E,B):2
     [V__modlenMULTUNITS>=E+2,D=0,C=1,V__global_precision=0] 
* CE 35: eval_smith_modmult_start(V__global_precision,V__munit_prec,V__modlenMULTUNITS,B) = 0+ eval_smith_modmult_12(C,V__munit_prec,V__modlenMULTUNITS,D,E,B):3
     [V__modlenMULTUNITS>=E+2,7>=8*C,C=2*D+1,C=2*V__global_precision+1] 
* CE 36: eval_smith_modmult_start(V__global_precision,V__munit_prec,V__modlenMULTUNITS,B) = 0+ eval_smith_modmult_12(C,V__munit_prec,V__modlenMULTUNITS,D,E,B):4
     [V__modlenMULTUNITS>=E+2,8*C>=9,C=2*D+1,C=2*V__global_precision+1] 

### Cost equations --> "Loop" of eval_smith_modmult_start/4 
* CEs [36] --> Loop 26 
* CEs [35] --> Loop 27 
* CEs [34] --> Loop 28 
* CEs [33] --> Loop 29 

#### Loops of eval_smith_modmult_start/4 
* Loop 26: eval_smith_modmult_start(V__global_precision,V__munit_prec,V__modlenMULTUNITS,B) [16*V__global_precision>=1] 
* Loop 27: eval_smith_modmult_start(V__global_precision,V__munit_prec,V__modlenMULTUNITS,B) [0>=16*V__global_precision+1] 
* Loop 28: eval_smith_modmult_start(V__global_precision,V__munit_prec,V__modlenMULTUNITS,B) [V__global_precision=0] 
* Loop 29: eval_smith_modmult_start(V__global_precision,V__munit_prec,V__modlenMULTUNITS,B) [] 

### Ranking functions of CR eval_smith_modmult_start(V__global_precision,V__munit_prec,V__modlenMULTUNITS,B) 

#### Partial ranking functions of CR eval_smith_modmult_start(V__global_precision,V__munit_prec,V__modlenMULTUNITS,B) 


### Resulting Chains:eval_smith_modmult_start(V__global_precision,V__munit_prec,V__modlenMULTUNITS,B) 
* [29]
* [28]...
* [27]...
* [26]...


### Merging Chains  eval_smith_modmult_start/4 into  External patterns of execution 
* [[29]] --> 1 
* [[28]] --> 2 
* [[27]] --> 3 
* [[26]] --> 4 


Computing Bounds
=====================================

#### Cost of loops [10] 

 * loop 10:eval_smith_modmult_bb2_in(V__global_precision,V__munit_prec,V__modlenMULTUNITS,V_0,V_nqd_0,B,C,D,E) -> [eval_smith_modmult_bb2_in(V__global_precision',V__munit_prec',V__modlenMULTUNITS',V_0',V_nqd_0',B',C',D',E')] 
1
#### Cost of phase [10]:eval_smith_modmult_bb2_in(V__global_precision,V__munit_prec,V__modlenMULTUNITS,V_0,V_nqd_0,B,C,D,E) -> [eval_smith_modmult_bb2_in(V__global_precision',V__munit_prec',V__modlenMULTUNITS',V_0',V_nqd_0',B',C',D',E')] 
1*it(10)+0
#### Cost of loops [9] 

 * loop 9:eval_smith_modmult_bb2_in(V__global_precision,V__munit_prec,V__modlenMULTUNITS,V_0,V_nqd_0,B,C,D,E) -> [eval_smith_modmult_bb2_in(V__global_precision',V__munit_prec',V__modlenMULTUNITS',V_0',V_nqd_0',B',C',D',E')] 
1
#### Cost of phase [9]:eval_smith_modmult_bb2_in(V__global_precision,V__munit_prec,V__modlenMULTUNITS,V_0,V_nqd_0,B,C,D,E) -> [eval_smith_modmult_bb2_in(V__global_precision',V__munit_prec',V__modlenMULTUNITS',V_0',V_nqd_0',B',C',D',E')] 
1*it(9)+0
  Such that:it(9) =< V_nqd_0
it(9) =< V_nqd_0-V_nqd_0'

#### Cost of chains of eval_smith_modmult_bb2_in(V__global_precision,V__munit_prec,V__modlenMULTUNITS,V_0,V_nqd_0,B,C,D,E):
* Chain [[10]]...: 1*it(10)+0
  with precondition: [0>=V_nqd_0+1,B=2] 

* Chain [[9],11]: 1*it(9)+0
  Such that:it(9) =< V_nqd_0

  with precondition: [B=2,V_0=C,V_nqd_0>=1] 

* Chain [11]: 0
  with precondition: [V_nqd_0=0,B=2,D=V__munit_prec,E=V__modlenMULTUNITS,C=V_0] 


#### Cost of chains of eval_smith_modmult_21(V__global_precision,V__munit_prec,V__modlenMULTUNITS,V_0,V_16,B):
* Chain [20]: 1
  with precondition: [V__global_precision=1,V_0=0,V_16+1=V__modlenMULTUNITS] 

* Chain [19]: 1*s(1)+1
  Such that:s(1) =< -V__modlenMULTUNITS+V_16+1

  with precondition: [V__global_precision=1,V_0=0,V_16>=V__modlenMULTUNITS] 

* Chain [18]: 1
  with precondition: [2*V_0+1=V__global_precision,V_16+1=V__modlenMULTUNITS,16*V_0>=1] 

* Chain [17]: 1*s(2)+1
  Such that:s(2) =< -V__modlenMULTUNITS+V_16+1

  with precondition: [2*V_0+1=V__global_precision,16*V_0>=1,V_16>=V__modlenMULTUNITS] 

* Chain [16]: 1
  with precondition: [2*V_0+1=V__global_precision,V_16+1=V__modlenMULTUNITS,0>=16*V_0+1] 

* Chain [15]: 1*s(3)+1
  Such that:s(3) =< -V__modlenMULTUNITS+V_16+1

  with precondition: [2*V_0+1=V__global_precision,0>=16*V_0+1,V_16>=V__modlenMULTUNITS] 

* Chain [14]...: 1*s(4)+1
  with precondition: [V__global_precision=1,V_0=0,V__modlenMULTUNITS>=V_16+2] 

* Chain [13]...: 1*s(5)+1
  with precondition: [2*V_0+1=V__global_precision,16*V_0>=1,V__modlenMULTUNITS>=V_16+2] 

* Chain [12]...: 1*s(6)+1
  with precondition: [2*V_0+1=V__global_precision,0>=16*V_0+1,V__modlenMULTUNITS>=V_16+2] 


#### Cost of chains of eval_smith_modmult_12(V__global_precision,V__munit_prec,V__modlenMULTUNITS,V_0,V_13,B):
* Chain [25]...: 1*s(7)+1
  with precondition: [V__global_precision=1,V_0=0,V__modlenMULTUNITS>=V_13+2] 

* Chain [24]...: 1*s(8)+1
  with precondition: [2*V_0+1=V__global_precision,0>=16*V_0+1,V__modlenMULTUNITS>=V_13+2] 

* Chain [23]...: 1*s(9)+1
  with precondition: [2*V_0+1=V__global_precision,16*V_0>=1,V__modlenMULTUNITS>=V_13+2] 

* Chain [22]: 2*s(10)+1
  Such that:aux(1) =< -V__modlenMULTUNITS+V_13+1
s(10) =< aux(1)

  with precondition: [2*V_0+1=V__global_precision] 

* Chain [21]: 1*s(12)+1
  Such that:s(12) =< -V__modlenMULTUNITS+V_13+1

  with precondition: [V__global_precision=1,V_0=0,V_13>=V__modlenMULTUNITS] 


#### Cost of chains of eval_smith_modmult_start(V__global_precision,V__munit_prec,V__modlenMULTUNITS,B):
* Chain [29]: 3*s(17)+1
  with precondition: [] 

* Chain [28]...: 1*s(18)+1
  with precondition: [V__global_precision=0] 

* Chain [27]...: 1*s(19)+1
  with precondition: [0>=16*V__global_precision+1] 

* Chain [26]...: 1*s(20)+1
  with precondition: [16*V__global_precision>=1] 


Closed-form bounds of eval_smith_modmult_start(V__global_precision,V__munit_prec,V__modlenMULTUNITS,B): 
-------------------------------------
* Chain [29] with precondition: [] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [28]... with precondition: [V__global_precision=0] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [27]... with precondition: [0>=16*V__global_precision+1] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [26]... with precondition: [16*V__global_precision>=1] 
    - Upper bound: inf 
    - Complexity: infinity 

### Maximum cost of eval_smith_modmult_start(V__global_precision,V__munit_prec,V__modlenMULTUNITS,B): inf 
Asymptotic class: infinity 

Time statistics: 
-------------------------------------
* Partial evaluation computed in 209 ms.
* Invariants computed in 70 ms.
   - Backward Invariants 32 ms.
   - Transitive Invariants 14 ms.
* Refinement performed in 229 ms.
* Termination proved in 10 ms.
* Upper bounds computed in 120 ms.
   - Equation cost structures 85 ms.
   - Phase cost structures 16 ms.
   - Chain cost structures 14 ms.
   - Solving cost expressions 0 ms.
* Total analysis performed in 768 ms.


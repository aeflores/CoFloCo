Warning: Ignored call to eval_compress_alpha_bits_stop/1 in equation eval_compress_alpha_bits_bb11_in/1 

Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. non_recursive  : [eval_compress_alpha_bits_bb11_in/1]
1. recursive  : [eval_compress_alpha_bits_bb2_in/10,eval_compress_alpha_bits_bb5_in/10]
2. recursive  : [eval_compress_alpha_bits_bb8_in/9]
3. recursive  : [eval_compress_alpha_bits_bb1_in/4,loop_cont_eval_compress_alpha_bits_bb2_in/7,loop_cont_eval_compress_alpha_bits_bb8_in/5]
4. non_recursive  : [loop_cont_eval_compress_alpha_bits_bb1_in/2]
5. non_recursive  : [eval_compress_alpha_bits_20/4]
6. non_recursive  : [eval_compress_alpha_bits_19/4]
7. non_recursive  : [eval_compress_alpha_bits_bb0_in/1]
8. non_recursive  : [eval_compress_alpha_bits_start/1]

#### Obtained direct recursion through partial evaluation 
0. SCC is completely evaluated into other SCCs
1. SCC is partially evaluated into eval_compress_alpha_bits_bb2_in/10
2. SCC is partially evaluated into eval_compress_alpha_bits_bb8_in/9
3. SCC is partially evaluated into eval_compress_alpha_bits_bb1_in/4
4. SCC is completely evaluated into other SCCs
5. SCC is partially evaluated into eval_compress_alpha_bits_20/4
6. SCC is completely evaluated into other SCCs
7. SCC is completely evaluated into other SCCs
8. SCC is partially evaluated into eval_compress_alpha_bits_start/1

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations eval_compress_alpha_bits_bb2_in/10 
* CE 10 is refined into CE [14] 
* CE 8 is refined into CE [15] 
* CE 9 is refined into CE [16] 


#### Refined cost equations eval_compress_alpha_bits_bb2_in/10 
* CE 14: eval_compress_alpha_bits_bb2_in(A,B,C,D,E,A,B,C,F,B) = 0
     [A>=0,F=0,E=2,D=0] 
* CE 15: eval_compress_alpha_bits_bb2_in(V_4,V_24,V_h_0,V_w_0,B,C,D,E,F,G) = 1+ eval_compress_alpha_bits_bb2_in(V_4,V_24,V_h_0,H,I,C,D,E,F,G)
     [V_4>=V_w_0,V_w_0>=1,V_w_0=H+1,I=2,B=2] 
* CE 16: eval_compress_alpha_bits_bb2_in(V_4,V_24,V_h_0,V_w_0,B,C,D,E,F,G) = 1+ eval_compress_alpha_bits_bb2_in(V_4,V_24,V_h_0,H,I,C,D,E,F,G)
     [V_4>=V_w_0,0>=V_w_0+1,V_w_0=H+1,I=2,B=2] 

### Cost equations --> "Loop" of eval_compress_alpha_bits_bb2_in/10 
* CEs [15] --> Loop 12 
* CEs [16] --> Loop 13 
* CEs [14] --> Loop 14 

#### Loops of eval_compress_alpha_bits_bb2_in/10 
* Loop 12: eval_compress_alpha_bits_bb2_in(V_4,V_24,V_h_0,V_w_0,B,C,D,E,F,G)->  eval_compress_alpha_bits_bb2_in(V_4,V_24,V_h_0,V_w_0',B',C,D,E,F,G)
                  [V_4>=V_w_0,V_w_0>=1,V_w_0=V_w_0'+1,B'=2,B=2] 
* Loop 13: eval_compress_alpha_bits_bb2_in(V_4,V_24,V_h_0,V_w_0,B,C,D,E,F,G)->  eval_compress_alpha_bits_bb2_in(V_4,V_24,V_h_0,V_w_0',B',C,D,E,F,G)
                  [V_4>=V_w_0,0>=V_w_0+1,V_w_0=V_w_0'+1,B'=2,B=2] 
* Loop 14: eval_compress_alpha_bits_bb2_in(A,B,C,D,E,A,B,C,F,B) [A>=0,F=0,E=2,D=0] 

### Ranking functions of CR eval_compress_alpha_bits_bb2_in(V_4,V_24,V_h_0,V_w_0,B,C,D,E,F,G) 
* RF of phase [12]: [V_w_0]

#### Partial ranking functions of CR eval_compress_alpha_bits_bb2_in(V_4,V_24,V_h_0,V_w_0,B,C,D,E,F,G) 
* Partial RF of phase [12]:
  - RF of loop [12:1]:
    V_w_0


### Resulting Chains:eval_compress_alpha_bits_bb2_in(V_4,V_24,V_h_0,V_w_0,B,C,D,E,F,G) 
* [[13]]...
* [[12],14]
* [14]


### Merging Chains  eval_compress_alpha_bits_bb2_in/10 into  External patterns of execution 
* [[14]] --> 1 
* [[14,[12]]] --> 2 
* [[[13]]] --> 3 


### Specialization of cost equations eval_compress_alpha_bits_bb8_in/9 
* CE 13 is refined into CE [17] 
* CE 12 is refined into CE [18] 
* CE 11 is refined into CE [19] 


#### Refined cost equations eval_compress_alpha_bits_bb8_in/9 
* CE 17: eval_compress_alpha_bits_bb8_in(A,B,C,D,E,F,A,B,G) = 0
     [G+1=C,F=3,E=0] 
* CE 18: eval_compress_alpha_bits_bb8_in(V_4,V_24,V_h_0,V_w_0,V_w_1,B,C,D,E) = 1+ eval_compress_alpha_bits_bb8_in(V_4,V_24,V_h_0,V_w_0,F,G,C,D,E)
     [V_w_1>=1,V_w_1=F+1,G=3,B=3] 
* CE 19: eval_compress_alpha_bits_bb8_in(V_4,V_24,V_h_0,V_w_0,V_w_1,B,C,D,E) = 1+ eval_compress_alpha_bits_bb8_in(V_4,V_24,V_h_0,V_w_0,F,G,C,D,E)
     [0>=V_w_1+1,V_w_1=F+1,G=3,B=3] 

### Cost equations --> "Loop" of eval_compress_alpha_bits_bb8_in/9 
* CEs [18] --> Loop 15 
* CEs [19] --> Loop 16 
* CEs [17] --> Loop 17 

#### Loops of eval_compress_alpha_bits_bb8_in/9 
* Loop 15: eval_compress_alpha_bits_bb8_in(V_4,V_24,V_h_0,V_w_0,V_w_1,B,C,D,E)->  eval_compress_alpha_bits_bb8_in(V_4,V_24,V_h_0,V_w_0,V_w_1',B',C,D,E)
                  [V_w_1>=1,V_w_1=V_w_1'+1,B'=3,B=3] 
* Loop 16: eval_compress_alpha_bits_bb8_in(V_4,V_24,V_h_0,V_w_0,V_w_1,B,C,D,E)->  eval_compress_alpha_bits_bb8_in(V_4,V_24,V_h_0,V_w_0,V_w_1',B',C,D,E)
                  [0>=V_w_1+1,V_w_1=V_w_1'+1,B'=3,B=3] 
* Loop 17: eval_compress_alpha_bits_bb8_in(A,B,C,D,E,F,A,B,G) [C=G+1,F=3,E=0] 

### Ranking functions of CR eval_compress_alpha_bits_bb8_in(V_4,V_24,V_h_0,V_w_0,V_w_1,B,C,D,E) 
* RF of phase [15]: [V_w_1]

#### Partial ranking functions of CR eval_compress_alpha_bits_bb8_in(V_4,V_24,V_h_0,V_w_0,V_w_1,B,C,D,E) 
* Partial RF of phase [15]:
  - RF of loop [15:1]:
    V_w_1


### Resulting Chains:eval_compress_alpha_bits_bb8_in(V_4,V_24,V_h_0,V_w_0,V_w_1,B,C,D,E) 
* [[16]]...
* [[15],17]
* [17]


### Merging Chains  eval_compress_alpha_bits_bb8_in/9 into  External patterns of execution 
* [[17]] --> 1 
* [[17,[15]]] --> 2 
* [[[16]]] --> 3 


### Specialization of cost equations eval_compress_alpha_bits_bb1_in/4 
* CE 7 is refined into CE [20] 
* CE 5 is refined into CE [21,22,23,24,25,26,27] 
* CE 6 is refined into CE [28,29,30,31,32,33,34] 


#### Refined cost equations eval_compress_alpha_bits_bb1_in/4 
* CE 20: eval_compress_alpha_bits_bb1_in(V_4,V_24,V_h_0,B) = 0
     [B=4,V_h_0=0] 
* CE 21: eval_compress_alpha_bits_bb1_in(V_4,V_24,V_h_0,B) = 3+ eval_compress_alpha_bits_bb2_in(C,D,E,F,G,H,I,J,K,L):1+ eval_compress_alpha_bits_bb8_in(M,N,O,P,Q,R,S,T,U):1+ eval_compress_alpha_bits_bb1_in(V,W,U,X)
     [U>=0,U+1=O,U+1=J,U+1=E,U+1=V_h_0,X=4,W=0,V=0,T=0,S=0,R=3,Q=0,P=0,N=0,M=0,L=0,K=0,I=0,H=0,G=2,F=0,D=0,C=0,B=4,V_24=0,V_4=0] 
* CE 22: eval_compress_alpha_bits_bb1_in(V_4,V_24,V_h_0,B) = 3+ eval_compress_alpha_bits_bb2_in(C,V_24,D,E,F,G,V_24,H,I,V_24):1+ eval_compress_alpha_bits_bb8_in(J,V_24,K,L,V_24,M,N,V_24,O):2+ eval_compress_alpha_bits_bb1_in(P,V_24,O,Q)
     [O>=0,V_24>=1,O+1=K,O+1=H,O+1=D,O+1=V_h_0,Q=4,P=0,N=0,M=3,L=0,J=0,I=0,G=0,F=2,E=0,C=0,B=4,V_4=0] 
* CE 23: eval_compress_alpha_bits_bb1_in(V_4,V_24,V_h_0,B) = 3+ eval_compress_alpha_bits_bb2_in(C,V_24,V_h_0,D,E,F,V_24,V_h_0,G,V_24):1+ eval_compress_alpha_bits_bb8_in(H,V_24,V_h_0,I,V_24,J,K,L,M):3
     [V_h_0>=1,0>=V_24+1,N=4,J=3,I=0,H=0,G=0,F=0,E=2,D=0,C=0,B=4,V_4=0] 
* CE 24: eval_compress_alpha_bits_bb1_in(V_4,V_24,V_h_0,B) = 3+ eval_compress_alpha_bits_bb2_in(V_4,C,D,V_4,E,V_4,F,G,H,I):2+ eval_compress_alpha_bits_bb8_in(V_4,J,K,L,M,N,V_4,O,P):1+ eval_compress_alpha_bits_bb1_in(V_4,Q,P,R)
     [P>=0,V_4>=1,P+1=K,P+1=G,P+1=D,P+1=V_h_0,R=4,Q=0,O=0,N=3,M=0,L=0,J=0,I=0,H=0,F=0,E=2,C=0,B=4,V_24=0] 
* CE 25: eval_compress_alpha_bits_bb1_in(V_4,V_24,V_h_0,B) = 3+ eval_compress_alpha_bits_bb2_in(V_4,V_24,C,V_4,D,V_4,V_24,E,F,V_24):2+ eval_compress_alpha_bits_bb8_in(V_4,V_24,G,H,V_24,I,V_4,V_24,J):2+ eval_compress_alpha_bits_bb1_in(V_4,V_24,J,K)
     [J>=0,V_24>=1,V_4>=1,J+1=G,J+1=E,J+1=C,J+1=V_h_0,K=4,I=3,H=0,F=0,D=2,B=4] 
* CE 26: eval_compress_alpha_bits_bb1_in(V_4,V_24,V_h_0,B) = 3+ eval_compress_alpha_bits_bb2_in(V_4,V_24,V_h_0,V_4,C,V_4,V_24,V_h_0,D,V_24):2+ eval_compress_alpha_bits_bb8_in(V_4,V_24,V_h_0,E,V_24,F,G,H,I):3
     [V_h_0>=1,V_4>=1,0>=V_24+1,J=4,F=3,E=0,D=0,C=2,B=4] 
* CE 27: eval_compress_alpha_bits_bb1_in(V_4,V_24,V_h_0,B) = 3+ eval_compress_alpha_bits_bb2_in(V_4,V_24,V_h_0,V_4,C,D,E,F,G,H):3
     [V_h_0>=1,0>=V_4+1,I=4,J=3,C=2,B=4] 
* CE 28: eval_compress_alpha_bits_bb1_in(V_4,V_24,V_h_0,B) = 3+ eval_compress_alpha_bits_bb2_in(C,D,E,F,G,H,I,J,K,L):1+ eval_compress_alpha_bits_bb8_in(M,N,O,P,Q,R,S,T,U):1+ eval_compress_alpha_bits_bb1_in(V,W,U,X)
     [0>=U+2,U+1=O,U+1=J,U+1=E,U+1=V_h_0,X=4,W=0,V=0,T=0,S=0,R=3,Q=0,P=0,N=0,M=0,L=0,K=0,I=0,H=0,G=2,F=0,D=0,C=0,B=4,V_24=0,V_4=0] 
* CE 29: eval_compress_alpha_bits_bb1_in(V_4,V_24,V_h_0,B) = 3+ eval_compress_alpha_bits_bb2_in(C,V_24,D,E,F,G,V_24,H,I,V_24):1+ eval_compress_alpha_bits_bb8_in(J,V_24,K,L,V_24,M,N,V_24,O):2+ eval_compress_alpha_bits_bb1_in(P,V_24,O,Q)
     [V_24>=1,0>=O+2,O+1=K,O+1=H,O+1=D,O+1=V_h_0,Q=4,P=0,N=0,M=3,L=0,J=0,I=0,G=0,F=2,E=0,C=0,B=4,V_4=0] 
* CE 30: eval_compress_alpha_bits_bb1_in(V_4,V_24,V_h_0,B) = 3+ eval_compress_alpha_bits_bb2_in(C,V_24,V_h_0,D,E,F,V_24,V_h_0,G,V_24):1+ eval_compress_alpha_bits_bb8_in(H,V_24,V_h_0,I,V_24,J,K,L,M):3
     [0>=V_24+1,0>=V_h_0+1,N=4,J=3,I=0,H=0,G=0,F=0,E=2,D=0,C=0,B=4,V_4=0] 
* CE 31: eval_compress_alpha_bits_bb1_in(V_4,V_24,V_h_0,B) = 3+ eval_compress_alpha_bits_bb2_in(V_4,C,D,V_4,E,V_4,F,G,H,I):2+ eval_compress_alpha_bits_bb8_in(V_4,J,K,L,M,N,V_4,O,P):1+ eval_compress_alpha_bits_bb1_in(V_4,Q,P,R)
     [V_4>=1,0>=P+2,P+1=K,P+1=G,P+1=D,P+1=V_h_0,R=4,Q=0,O=0,N=3,M=0,L=0,J=0,I=0,H=0,F=0,E=2,C=0,B=4,V_24=0] 
* CE 32: eval_compress_alpha_bits_bb1_in(V_4,V_24,V_h_0,B) = 3+ eval_compress_alpha_bits_bb2_in(V_4,V_24,C,V_4,D,V_4,V_24,E,F,V_24):2+ eval_compress_alpha_bits_bb8_in(V_4,V_24,G,H,V_24,I,V_4,V_24,J):2+ eval_compress_alpha_bits_bb1_in(V_4,V_24,J,K)
     [V_24>=1,V_4>=1,0>=J+2,J+1=G,J+1=E,J+1=C,J+1=V_h_0,K=4,I=3,H=0,F=0,D=2,B=4] 
* CE 33: eval_compress_alpha_bits_bb1_in(V_4,V_24,V_h_0,B) = 3+ eval_compress_alpha_bits_bb2_in(V_4,V_24,V_h_0,V_4,C,V_4,V_24,V_h_0,D,V_24):2+ eval_compress_alpha_bits_bb8_in(V_4,V_24,V_h_0,E,V_24,F,G,H,I):3
     [V_4>=1,0>=V_24+1,0>=V_h_0+1,J=4,F=3,E=0,D=0,C=2,B=4] 
* CE 34: eval_compress_alpha_bits_bb1_in(V_4,V_24,V_h_0,B) = 3+ eval_compress_alpha_bits_bb2_in(V_4,V_24,V_h_0,V_4,C,D,E,F,G,H):3
     [0>=V_4+1,0>=V_h_0+1,I=4,J=3,C=2,B=4] 

### Cost equations --> "Loop" of eval_compress_alpha_bits_bb1_in/4 
* CEs [26] --> Loop 18 
* CEs [33] --> Loop 19 
* CEs [27] --> Loop 20 
* CEs [34] --> Loop 21 
* CEs [23] --> Loop 22 
* CEs [30] --> Loop 23 
* CEs [25] --> Loop 24 
* CEs [32] --> Loop 25 
* CEs [24] --> Loop 26 
* CEs [31] --> Loop 27 
* CEs [22] --> Loop 28 
* CEs [29] --> Loop 29 
* CEs [21] --> Loop 30 
* CEs [28] --> Loop 31 
* CEs [20] --> Loop 32 

#### Loops of eval_compress_alpha_bits_bb1_in/4 
* Loop 18: eval_compress_alpha_bits_bb1_in(V_4,V_24,V_h_0,B) [V_h_0>=1,V_4>=1,0>=V_24+1,B=4] 
* Loop 19: eval_compress_alpha_bits_bb1_in(V_4,V_24,V_h_0,B) [V_4>=1,0>=V_h_0+1,0>=V_24+1,B=4] 
* Loop 20: eval_compress_alpha_bits_bb1_in(V_4,V_24,V_h_0,B) [V_h_0>=1,0>=V_4+1,B=4] 
* Loop 21: eval_compress_alpha_bits_bb1_in(V_4,V_24,V_h_0,B) [0>=V_h_0+1,0>=V_4+1,B=4] 
* Loop 22: eval_compress_alpha_bits_bb1_in(V_4,V_24,V_h_0,B) [V_h_0>=1,0>=V_24+1,B=4,V_4=0] 
* Loop 23: eval_compress_alpha_bits_bb1_in(V_4,V_24,V_h_0,B) [0>=V_h_0+1,0>=V_24+1,B=4,V_4=0] 
* Loop 24: eval_compress_alpha_bits_bb1_in(V_4,V_24,V_h_0,B)->  eval_compress_alpha_bits_bb1_in(V_4,V_24,V_h_0',B')
                  [V_h_0>=1,V_24>=1,V_4>=1,V_h_0=V_h_0'+1,B'=4,B=4] 
* Loop 25: eval_compress_alpha_bits_bb1_in(V_4,V_24,V_h_0,B)->  eval_compress_alpha_bits_bb1_in(V_4,V_24,V_h_0',B')
                  [V_24>=1,V_4>=1,0>=V_h_0+1,V_h_0=V_h_0'+1,B'=4,B=4] 
* Loop 26: eval_compress_alpha_bits_bb1_in(V_4,V_24,V_h_0,B)->  eval_compress_alpha_bits_bb1_in(V_4,V_24',V_h_0',B')
                  [V_h_0>=1,V_4>=1,V_h_0=V_h_0'+1,B'=4,V_24'=0,B=4,V_24=0] 
* Loop 27: eval_compress_alpha_bits_bb1_in(V_4,V_24,V_h_0,B)->  eval_compress_alpha_bits_bb1_in(V_4,V_24',V_h_0',B')
                  [V_4>=1,0>=V_h_0+1,V_h_0=V_h_0'+1,B'=4,V_24'=0,B=4,V_24=0] 
* Loop 28: eval_compress_alpha_bits_bb1_in(V_4,V_24,V_h_0,B)->  eval_compress_alpha_bits_bb1_in(V_4',V_24,V_h_0',B')
                  [V_h_0>=1,V_24>=1,V_h_0=V_h_0'+1,B'=4,V_4'=0,B=4,V_4=0] 
* Loop 29: eval_compress_alpha_bits_bb1_in(V_4,V_24,V_h_0,B)->  eval_compress_alpha_bits_bb1_in(V_4',V_24,V_h_0',B')
                  [V_24>=1,0>=V_h_0+1,V_h_0=V_h_0'+1,B'=4,V_4'=0,B=4,V_4=0] 
* Loop 30: eval_compress_alpha_bits_bb1_in(V_4,V_24,V_h_0,B)->  eval_compress_alpha_bits_bb1_in(V_4',V_24',V_h_0',B')
                  [V_h_0>=1,V_h_0=V_h_0'+1,B'=4,V_24'=0,V_4'=0,B=4,V_24=0,V_4=0] 
* Loop 31: eval_compress_alpha_bits_bb1_in(V_4,V_24,V_h_0,B)->  eval_compress_alpha_bits_bb1_in(V_4',V_24',V_h_0',B')
                  [0>=V_h_0+1,V_h_0=V_h_0'+1,B'=4,V_24'=0,V_4'=0,B=4,V_24=0,V_4=0] 
* Loop 32: eval_compress_alpha_bits_bb1_in(V_4,V_24,V_h_0,B) [B=4,V_h_0=0] 

### Ranking functions of CR eval_compress_alpha_bits_bb1_in(V_4,V_24,V_h_0,B) 
* RF of phase [24]: [V_h_0]
* RF of phase [26]: [V_h_0]
* RF of phase [28]: [V_h_0]
* RF of phase [30]: [V_h_0]

#### Partial ranking functions of CR eval_compress_alpha_bits_bb1_in(V_4,V_24,V_h_0,B) 
* Partial RF of phase [24]:
  - RF of loop [24:1]:
    V_h_0
* Partial RF of phase [26]:
  - RF of loop [26:1]:
    V_h_0
* Partial RF of phase [28]:
  - RF of loop [28:1]:
    V_h_0
* Partial RF of phase [30]:
  - RF of loop [30:1]:
    V_h_0


### Resulting Chains:eval_compress_alpha_bits_bb1_in(V_4,V_24,V_h_0,B) 
* [[31]]...
* [[30],32]
* [[29]]...
* [[28],32]
* [[27]]...
* [[26],32]
* [[25]]...
* [[24],32]
* [32]
* [23]...
* [22]...
* [21]...
* [20]...
* [19]...
* [18]...


### Merging Chains  eval_compress_alpha_bits_bb1_in/4 into  External patterns of execution 
* [[32,[30]]] --> 1 
* [[32,[28]]] --> 2 
* [[32,[26]]] --> 3 
* [[32]] --> 4 
* [[32,[24]]] --> 5 
* [[[31]]] --> 6 
* [[23]] --> 7 
* [[22]] --> 8 
* [[[29]]] --> 9 
* [[21]] --> 10 
* [[20]] --> 11 
* [[19]] --> 12 
* [[18]] --> 13 
* [[[27]]] --> 14 
* [[[25]]] --> 15 


### Specialization of cost equations eval_compress_alpha_bits_20/4 
* CE 3 is refined into CE [35] 
* CE 4 is refined into CE [36,37,38,39,40,41,42,43,44,45,46,47,48,49,50] 


#### Refined cost equations eval_compress_alpha_bits_20/4 
* CE 35: eval_compress_alpha_bits_20(V_4,V_7,V_24,B) = 0
     [] 
* CE 36: eval_compress_alpha_bits_20(V_4,V_7,V_24,B) = 1+ eval_compress_alpha_bits_bb1_in(C,D,V_7,E):1
     [V_7>=1,E=4,D=0,C=0,V_24=0,V_4=0] 
* CE 37: eval_compress_alpha_bits_20(V_4,V_7,V_24,B) = 1+ eval_compress_alpha_bits_bb1_in(C,V_24,V_7,D):2
     [V_7>=1,V_24>=1,D=4,C=0,V_4=0] 
* CE 38: eval_compress_alpha_bits_20(V_4,V_7,V_24,B) = 1+ eval_compress_alpha_bits_bb1_in(V_4,C,V_7,D):3
     [V_7>=1,V_4>=1,D=4,C=0,V_24=0] 
* CE 39: eval_compress_alpha_bits_20(V_4,V_7,V_24,B) = 1+ eval_compress_alpha_bits_bb1_in(V_4,V_24,C,D):4
     [D=4,C=0,V_7=0] 
* CE 40: eval_compress_alpha_bits_20(V_4,V_7,V_24,B) = 1+ eval_compress_alpha_bits_bb1_in(V_4,V_24,V_7,C):5
     [V_7>=1,V_24>=1,V_4>=1,C=4] 
* CE 41: eval_compress_alpha_bits_20(V_4,V_7,V_24,B) = 1+ eval_compress_alpha_bits_bb1_in(C,D,V_7,E):6
     [0>=V_7+1,E=4,D=0,C=0,V_24=0,V_4=0] 
* CE 42: eval_compress_alpha_bits_20(V_4,V_7,V_24,B) = 1+ eval_compress_alpha_bits_bb1_in(C,V_24,V_7,D):7
     [0>=V_7+1,0>=V_24+1,D=4,C=0,V_4=0] 
* CE 43: eval_compress_alpha_bits_20(V_4,V_7,V_24,B) = 1+ eval_compress_alpha_bits_bb1_in(C,V_24,V_7,D):8
     [V_7>=1,0>=V_24+1,D=4,C=0,V_4=0] 
* CE 44: eval_compress_alpha_bits_20(V_4,V_7,V_24,B) = 1+ eval_compress_alpha_bits_bb1_in(C,V_24,V_7,D):9
     [V_24>=1,0>=V_7+1,D=4,C=0,V_4=0] 
* CE 45: eval_compress_alpha_bits_20(V_4,V_7,V_24,B) = 1+ eval_compress_alpha_bits_bb1_in(V_4,V_24,V_7,C):10
     [0>=V_7+1,0>=V_4+1,C=4] 
* CE 46: eval_compress_alpha_bits_20(V_4,V_7,V_24,B) = 1+ eval_compress_alpha_bits_bb1_in(V_4,V_24,V_7,C):11
     [V_7>=1,0>=V_4+1,C=4] 
* CE 47: eval_compress_alpha_bits_20(V_4,V_7,V_24,B) = 1+ eval_compress_alpha_bits_bb1_in(V_4,V_24,V_7,C):12
     [V_4>=1,0>=V_7+1,0>=V_24+1,C=4] 
* CE 48: eval_compress_alpha_bits_20(V_4,V_7,V_24,B) = 1+ eval_compress_alpha_bits_bb1_in(V_4,V_24,V_7,C):13
     [V_7>=1,V_4>=1,0>=V_24+1,C=4] 
* CE 49: eval_compress_alpha_bits_20(V_4,V_7,V_24,B) = 1+ eval_compress_alpha_bits_bb1_in(V_4,C,V_7,D):14
     [V_4>=1,0>=V_7+1,D=4,C=0,V_24=0] 
* CE 50: eval_compress_alpha_bits_20(V_4,V_7,V_24,B) = 1+ eval_compress_alpha_bits_bb1_in(V_4,V_24,V_7,C):15
     [V_24>=1,V_4>=1,0>=V_7+1,C=4] 

### Cost equations --> "Loop" of eval_compress_alpha_bits_20/4 
* CEs [48] --> Loop 33 
* CEs [50] --> Loop 34 
* CEs [47] --> Loop 35 
* CEs [46] --> Loop 36 
* CEs [45] --> Loop 37 
* CEs [49] --> Loop 38 
* CEs [43] --> Loop 39 
* CEs [44] --> Loop 40 
* CEs [42] --> Loop 41 
* CEs [41] --> Loop 42 
* CEs [35,36,37,38,39,40] --> Loop 43 

#### Loops of eval_compress_alpha_bits_20/4 
* Loop 33: eval_compress_alpha_bits_20(V_4,V_7,V_24,B) [V_7>=1,V_4>=1,0>=V_24+1] 
* Loop 34: eval_compress_alpha_bits_20(V_4,V_7,V_24,B) [V_24>=1,V_4>=1,0>=V_7+1] 
* Loop 35: eval_compress_alpha_bits_20(V_4,V_7,V_24,B) [V_4>=1,0>=V_24+1,0>=V_7+1] 
* Loop 36: eval_compress_alpha_bits_20(V_4,V_7,V_24,B) [V_7>=1,0>=V_4+1] 
* Loop 37: eval_compress_alpha_bits_20(V_4,V_7,V_24,B) [0>=V_7+1,0>=V_4+1] 
* Loop 38: eval_compress_alpha_bits_20(V_4,V_7,V_24,B) [V_4>=1,0>=V_7+1,V_24=0] 
* Loop 39: eval_compress_alpha_bits_20(V_4,V_7,V_24,B) [V_7>=1,0>=V_24+1,V_4=0] 
* Loop 40: eval_compress_alpha_bits_20(V_4,V_7,V_24,B) [V_24>=1,0>=V_7+1,V_4=0] 
* Loop 41: eval_compress_alpha_bits_20(V_4,V_7,V_24,B) [0>=V_24+1,0>=V_7+1,V_4=0] 
* Loop 42: eval_compress_alpha_bits_20(V_4,V_7,V_24,B) [0>=V_7+1,V_24=0,V_4=0] 
* Loop 43: eval_compress_alpha_bits_20(V_4,V_7,V_24,B) [] 

### Ranking functions of CR eval_compress_alpha_bits_20(V_4,V_7,V_24,B) 

#### Partial ranking functions of CR eval_compress_alpha_bits_20(V_4,V_7,V_24,B) 


### Resulting Chains:eval_compress_alpha_bits_20(V_4,V_7,V_24,B) 
* [43]
* [42]...
* [41]...
* [40]...
* [39]...
* [38]...
* [37]...
* [36]...
* [35]...
* [34]...
* [33]...


### Merging Chains  eval_compress_alpha_bits_20/4 into  External patterns of execution 
* [[43]] --> 1 
* [[42]] --> 2 
* [[41]] --> 3 
* [[40]] --> 4 
* [[39]] --> 5 
* [[38]] --> 6 
* [[37]] --> 7 
* [[36]] --> 8 
* [[35]] --> 9 
* [[34]] --> 10 
* [[33]] --> 11 


### Specialization of cost equations eval_compress_alpha_bits_start/1 
* CE 2 is refined into CE [51,52,53,54,55,56,57,58,59,60,61] 


#### Refined cost equations eval_compress_alpha_bits_start/1 
* CE 51: eval_compress_alpha_bits_start(B) = 0+ eval_compress_alpha_bits_20(C,D,E,B):1
     [] 
* CE 52: eval_compress_alpha_bits_start(B) = 0+ eval_compress_alpha_bits_20(C,D,E,B):2
     [0>=D+1,E=0,C=0] 
* CE 53: eval_compress_alpha_bits_start(B) = 0+ eval_compress_alpha_bits_20(C,D,E,B):3
     [0>=E+1,0>=D+1,C=0] 
* CE 54: eval_compress_alpha_bits_start(B) = 0+ eval_compress_alpha_bits_20(C,D,E,B):4
     [E>=1,0>=D+1,C=0] 
* CE 55: eval_compress_alpha_bits_start(B) = 0+ eval_compress_alpha_bits_20(C,D,E,B):5
     [D>=1,0>=E+1,C=0] 
* CE 56: eval_compress_alpha_bits_start(B) = 0+ eval_compress_alpha_bits_20(C,D,E,B):6
     [C>=1,0>=D+1,E=0] 
* CE 57: eval_compress_alpha_bits_start(B) = 0+ eval_compress_alpha_bits_20(C,D,E,B):7
     [0>=D+1,0>=C+1] 
* CE 58: eval_compress_alpha_bits_start(B) = 0+ eval_compress_alpha_bits_20(C,D,E,B):8
     [D>=1,0>=C+1] 
* CE 59: eval_compress_alpha_bits_start(B) = 0+ eval_compress_alpha_bits_20(C,D,E,B):9
     [C>=1,0>=E+1,0>=D+1] 
* CE 60: eval_compress_alpha_bits_start(B) = 0+ eval_compress_alpha_bits_20(C,D,E,B):10
     [E>=1,C>=1,0>=D+1] 
* CE 61: eval_compress_alpha_bits_start(B) = 0+ eval_compress_alpha_bits_20(C,D,E,B):11
     [D>=1,C>=1,0>=E+1] 

### Cost equations --> "Loop" of eval_compress_alpha_bits_start/1 
* CEs [52,53,54,55,56,57,58,59,60,61] --> Loop 44 
* CEs [51] --> Loop 45 

#### Loops of eval_compress_alpha_bits_start/1 
* Loop 44: eval_compress_alpha_bits_start(B) [] 
* Loop 45: eval_compress_alpha_bits_start(B) [] 

### Ranking functions of CR eval_compress_alpha_bits_start(B) 

#### Partial ranking functions of CR eval_compress_alpha_bits_start(B) 


### Resulting Chains:eval_compress_alpha_bits_start(B) 
* [45]
* [44]...


### Merging Chains  eval_compress_alpha_bits_start/1 into  External patterns of execution 
* [[45]] --> 1 
* [[44]] --> 2 


Computing Bounds
=====================================

#### Cost of loops [13] 

 * loop 13:eval_compress_alpha_bits_bb2_in(V_4,V_24,V_h_0,V_w_0,B,C,D,E,F,G) -> [eval_compress_alpha_bits_bb2_in(V_4',V_24',V_h_0',V_w_0',B',C',D',E',F',G')] 
1
#### Cost of phase [13]:eval_compress_alpha_bits_bb2_in(V_4,V_24,V_h_0,V_w_0,B,C,D,E,F,G) -> [eval_compress_alpha_bits_bb2_in(V_4',V_24',V_h_0',V_w_0',B',C',D',E',F',G')] 
1*it(13)+0
#### Cost of loops [12] 

 * loop 12:eval_compress_alpha_bits_bb2_in(V_4,V_24,V_h_0,V_w_0,B,C,D,E,F,G) -> [eval_compress_alpha_bits_bb2_in(V_4',V_24',V_h_0',V_w_0',B',C',D',E',F',G')] 
1
#### Cost of phase [12]:eval_compress_alpha_bits_bb2_in(V_4,V_24,V_h_0,V_w_0,B,C,D,E,F,G) -> [eval_compress_alpha_bits_bb2_in(V_4',V_24',V_h_0',V_w_0',B',C',D',E',F',G')] 
1*it(12)+0
  Such that:it(12) =< V_w_0
it(12) =< V_w_0-V_w_0'

#### Cost of chains of eval_compress_alpha_bits_bb2_in(V_4,V_24,V_h_0,V_w_0,B,C,D,E,F,G):
* Chain [[13]]...: 1*it(13)+0
  with precondition: [0>=V_w_0+1,V_4>=V_w_0,B=2] 

* Chain [[12],14]: 1*it(12)+0
  Such that:it(12) =< V_w_0

  with precondition: [B=2,F=0,V_4=C,V_24=D,V_h_0=E,V_24=G,V_w_0>=1,V_4>=V_w_0] 

* Chain [14]: 0
  with precondition: [V_w_0=0,B=2,F=0,E=V_h_0,V_4=C,V_24=D,V_24=G,V_4>=0] 


#### Cost of loops [16] 

 * loop 16:eval_compress_alpha_bits_bb8_in(V_4,V_24,V_h_0,V_w_0,V_w_1,B,C,D,E) -> [eval_compress_alpha_bits_bb8_in(V_4',V_24',V_h_0',V_w_0',V_w_1',B',C',D',E')] 
1
#### Cost of phase [16]:eval_compress_alpha_bits_bb8_in(V_4,V_24,V_h_0,V_w_0,V_w_1,B,C,D,E) -> [eval_compress_alpha_bits_bb8_in(V_4',V_24',V_h_0',V_w_0',V_w_1',B',C',D',E')] 
1*it(16)+0
#### Cost of loops [15] 

 * loop 15:eval_compress_alpha_bits_bb8_in(V_4,V_24,V_h_0,V_w_0,V_w_1,B,C,D,E) -> [eval_compress_alpha_bits_bb8_in(V_4',V_24',V_h_0',V_w_0',V_w_1',B',C',D',E')] 
1
#### Cost of phase [15]:eval_compress_alpha_bits_bb8_in(V_4,V_24,V_h_0,V_w_0,V_w_1,B,C,D,E) -> [eval_compress_alpha_bits_bb8_in(V_4',V_24',V_h_0',V_w_0',V_w_1',B',C',D',E')] 
1*it(15)+0
  Such that:it(15) =< V_w_1
it(15) =< V_w_1-V_w_1'

#### Cost of chains of eval_compress_alpha_bits_bb8_in(V_4,V_24,V_h_0,V_w_0,V_w_1,B,C,D,E):
* Chain [[16]]...: 1*it(16)+0
  with precondition: [0>=V_w_1+1,B=3] 

* Chain [[15],17]: 1*it(15)+0
  Such that:it(15) =< V_w_1

  with precondition: [B=3,V_4=C,V_24=D,V_h_0=E+1,V_w_1>=1] 

* Chain [17]: 0
  with precondition: [V_w_1=0,B=3,C=V_4,D=V_24,E+1=V_h_0] 


#### Cost of loops [31] 

 * loop 31:eval_compress_alpha_bits_bb1_in(V_4,V_24,V_h_0,B) -> [eval_compress_alpha_bits_bb1_in(V_4',V_24',V_h_0',B')] 
3
#### Cost of phase [31]:eval_compress_alpha_bits_bb1_in(V_4,V_24,V_h_0,B) -> [eval_compress_alpha_bits_bb1_in(V_4',V_24',V_h_0',B')] 
3*it(31)+0
#### Cost of loops [30] 

 * loop 30:eval_compress_alpha_bits_bb1_in(V_4,V_24,V_h_0,B) -> [eval_compress_alpha_bits_bb1_in(V_4',V_24',V_h_0',B')] 
3
#### Cost of phase [30]:eval_compress_alpha_bits_bb1_in(V_4,V_24,V_h_0,B) -> [eval_compress_alpha_bits_bb1_in(V_4',V_24',V_h_0',B')] 
3*it(30)+0
  Such that:it(30) =< V_h_0
it(30) =< V_h_0-V_h_0'

#### Cost of loops [29] 

 * loop 29:eval_compress_alpha_bits_bb1_in(V_4,V_24,V_h_0,B) -> [eval_compress_alpha_bits_bb1_in(V_4',V_24',V_h_0',B')] 
1*s(2)+3
  Such that:s(2) =< V_24'

#### Cost of phase [29]:eval_compress_alpha_bits_bb1_in(V_4,V_24,V_h_0,B) -> [eval_compress_alpha_bits_bb1_in(V_4',V_24',V_h_0',B')] 
3*it(29)+1*s(3)+0
#### Cost of loops [28] 

 * loop 28:eval_compress_alpha_bits_bb1_in(V_4,V_24,V_h_0,B) -> [eval_compress_alpha_bits_bb1_in(V_4',V_24',V_h_0',B')] 
1*s(5)+3
  Such that:s(5) =< V_24'

#### Cost of phase [28]:eval_compress_alpha_bits_bb1_in(V_4,V_24,V_h_0,B) -> [eval_compress_alpha_bits_bb1_in(V_4',V_24',V_h_0',B')] 
3*it(28)+1*s(6)+0
  Such that:aux(2) =< V_24
it(28) =< V_h_0
it(28) =< V_h_0-V_h_0'
s(6) =< it(28)*aux(2)

#### Cost of loops [27] 

 * loop 27:eval_compress_alpha_bits_bb1_in(V_4,V_24,V_h_0,B) -> [eval_compress_alpha_bits_bb1_in(V_4',V_24',V_h_0',B')] 
1*s(8)+3
  Such that:s(8) =< V_4'

#### Cost of phase [27]:eval_compress_alpha_bits_bb1_in(V_4,V_24,V_h_0,B) -> [eval_compress_alpha_bits_bb1_in(V_4',V_24',V_h_0',B')] 
3*it(27)+1*s(9)+0
#### Cost of loops [26] 

 * loop 26:eval_compress_alpha_bits_bb1_in(V_4,V_24,V_h_0,B) -> [eval_compress_alpha_bits_bb1_in(V_4',V_24',V_h_0',B')] 
1*s(11)+3
  Such that:s(11) =< V_4

#### Cost of phase [26]:eval_compress_alpha_bits_bb1_in(V_4,V_24,V_h_0,B) -> [eval_compress_alpha_bits_bb1_in(V_4',V_24',V_h_0',B')] 
3*it(26)+1*s(12)+0
  Such that:aux(4) =< V_4
it(26) =< V_h_0
it(26) =< V_h_0-V_h_0'
s(12) =< it(26)*aux(4)

#### Cost of loops [25] 

 * loop 25:eval_compress_alpha_bits_bb1_in(V_4,V_24,V_h_0,B) -> [eval_compress_alpha_bits_bb1_in(V_4',V_24',V_h_0',B')] 
1*s(15)+1*s(16)+3
  Such that:s(15) =< V_4'
s(16) =< V_24'

#### Cost of phase [25]:eval_compress_alpha_bits_bb1_in(V_4,V_24,V_h_0,B) -> [eval_compress_alpha_bits_bb1_in(V_4',V_24',V_h_0',B')] 
3*it(25)+1*s(17)+1*s(18)+0
#### Cost of loops [24] 

 * loop 24:eval_compress_alpha_bits_bb1_in(V_4,V_24,V_h_0,B) -> [eval_compress_alpha_bits_bb1_in(V_4',V_24',V_h_0',B')] 
1*s(21)+1*s(22)+3
  Such that:s(21) =< V_4'
s(22) =< V_24'

#### Cost of phase [24]:eval_compress_alpha_bits_bb1_in(V_4,V_24,V_h_0,B) -> [eval_compress_alpha_bits_bb1_in(V_4',V_24',V_h_0',B')] 
3*it(24)+1*s(23)+1*s(24)+0
  Such that:aux(7) =< V_4
aux(8) =< V_24
it(24) =< V_h_0
it(24) =< V_h_0-V_h_0'
s(24) =< it(24)*aux(8)
s(23) =< it(24)*aux(7)

#### Cost of chains of eval_compress_alpha_bits_bb1_in(V_4,V_24,V_h_0,B):
* Chain [[31]]...: 3*it(31)+0
  with precondition: [V_4=0,V_24=0,0>=V_h_0+1,B=4] 

* Chain [[30],32]: 3*it(30)+0
  Such that:it(30) =< V_h_0

  with precondition: [V_4=0,V_24=0,B=4,V_h_0>=1] 

* Chain [[29]]...: 4*it(29)+0
  with precondition: [V_4=0,V_24>=1,0>=V_h_0+1,B=4] 

* Chain [[28],32]: 3*it(28)+1*s(6)+0
  Such that:aux(2) =< V_24
it(28) =< V_h_0
s(6) =< it(28)*aux(2)

  with precondition: [V_4=0,B=4,V_24>=1,V_h_0>=1] 

* Chain [[27]]...: 4*it(27)+0
  with precondition: [V_4>=1,V_24=0,0>=V_h_0+1,B=4] 

* Chain [[26],32]: 3*it(26)+1*s(12)+0
  Such that:aux(4) =< V_4
it(26) =< V_h_0
s(12) =< it(26)*aux(4)

  with precondition: [V_24=0,B=4,V_4>=1,V_h_0>=1] 

* Chain [[25]]...: 5*it(25)+0
  with precondition: [V_4>=1,V_24>=1,0>=V_h_0+1,B=4] 

* Chain [[24],32]: 3*it(24)+1*s(23)+1*s(24)+0
  Such that:aux(7) =< V_4
aux(8) =< V_24
it(24) =< V_h_0
s(24) =< it(24)*aux(8)
s(23) =< it(24)*aux(7)

  with precondition: [B=4,V_4>=1,V_24>=1,V_h_0>=1] 

* Chain [32]: 0
  with precondition: [V_h_0=0,B=4] 

* Chain [23]...: 1*s(25)+3
  with precondition: [V_4=0,B=4,0>=V_24+1,0>=V_h_0+1] 

* Chain [22]...: 1*s(26)+3
  with precondition: [V_4=0,B=4,0>=V_24+1,V_h_0>=1] 

* Chain [21]...: 1*s(27)+3
  with precondition: [B=4,0>=V_4+1,0>=V_h_0+1] 

* Chain [20]...: 1*s(28)+3
  with precondition: [B=4,0>=V_4+1,V_h_0>=1] 

* Chain [19]...: 1*s(29)+1*s(30)+3
  Such that:s(29) =< V_4

  with precondition: [B=4,0>=V_24+1,0>=V_h_0+1,V_4>=1] 

* Chain [18]...: 1*s(31)+1*s(32)+3
  Such that:s(31) =< V_4

  with precondition: [B=4,0>=V_24+1,V_4>=1,V_h_0>=1] 


#### Cost of chains of eval_compress_alpha_bits_20(V_4,V_7,V_24,B):
* Chain [43]: 12*s(33)+2*s(36)+2*s(39)+1
  Such that:aux(9) =< V_4
aux(10) =< V_7
aux(11) =< V_24
s(33) =< aux(10)
s(39) =< s(33)*aux(9)
s(36) =< s(33)*aux(11)

  with precondition: [] 

* Chain [42]...: 3*s(45)+1
  with precondition: [V_4=0,V_24=0,0>=V_7+1] 

* Chain [41]...: 1*s(46)+4
  with precondition: [V_4=0,0>=V_7+1,0>=V_24+1] 

* Chain [40]...: 4*s(47)+1
  with precondition: [V_4=0,0>=V_7+1,V_24>=1] 

* Chain [39]...: 1*s(48)+4
  with precondition: [V_4=0,0>=V_24+1,V_7>=1] 

* Chain [38]...: 4*s(49)+1
  with precondition: [V_24=0,0>=V_7+1,V_4>=1] 

* Chain [37]...: 1*s(50)+4
  with precondition: [0>=V_4+1,0>=V_7+1] 

* Chain [36]...: 1*s(51)+4
  with precondition: [0>=V_4+1,V_7>=1] 

* Chain [35]...: 1*s(52)+1*s(53)+4
  Such that:s(52) =< V_4

  with precondition: [0>=V_7+1,0>=V_24+1,V_4>=1] 

* Chain [34]...: 5*s(54)+1
  with precondition: [0>=V_7+1,V_4>=1,V_24>=1] 

* Chain [33]...: 1*s(55)+1*s(56)+4
  Such that:s(55) =< V_4

  with precondition: [0>=V_24+1,V_4>=1,V_7>=1] 


#### Cost of chains of eval_compress_alpha_bits_start(B):
* Chain [45]: 12*s(60)+2*s(61)+2*s(62)+1
  with precondition: [] 

* Chain [44]...: 1*aux(12)+0
  with precondition: [] 


Closed-form bounds of eval_compress_alpha_bits_start(B): 
-------------------------------------
* Chain [45] with precondition: [] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [44]... with precondition: [] 
    - Upper bound: inf 
    - Complexity: infinity 

### Maximum cost of eval_compress_alpha_bits_start(B): inf 
Asymptotic class: infinity 

Time statistics: 
-------------------------------------
* Partial evaluation computed in 93 ms.
* Invariants computed in 231 ms.
   - Backward Invariants 79 ms.
   - Transitive Invariants 75 ms.
* Refinement performed in 549 ms.
* Termination proved in 68 ms.
* Upper bounds computed in 486 ms.
   - Equation cost structures 174 ms.
   - Phase cost structures 289 ms.
   - Chain cost structures 89 ms.
   - Solving cost expressions 0 ms.
* Total analysis performed in 1545 ms.


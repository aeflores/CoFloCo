Warning: Ignored call to eval_cryptRandOpen_stop/1 in equation eval_cryptRandOpen_bb12_in/1 

Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. non_recursive  : [eval_cryptRandOpen_bb12_in/1]
1. non_recursive  : [eval_cryptRandOpen_13/1]
2. non_recursive  : [eval_cryptRandOpen_12/2]
3. recursive  : [eval_cryptRandOpen_14/3,eval_cryptRandOpen_15/4,eval_cryptRandOpen_20/5,eval_cryptRandOpen_21/5,eval_cryptRandOpen_22/5,eval_cryptRandOpen_23/5,eval_cryptRandOpen_bb11_in/5,eval_cryptRandOpen_bb7_in/3]
4. non_recursive  : [eval_cryptRandOpen_19/1]
5. non_recursive  : [eval_cryptRandOpen_18/2]
6. non_recursive  : [eval_cryptRandOpen_17/2]
7. non_recursive  : [loop_cont_eval_cryptRandOpen_bb7_in/3]
8. non_recursive  : [eval_cryptRandOpen_10/2]
9. non_recursive  : [eval_cryptRandOpen_9/2]
10. non_recursive  : [eval_cryptRandOpen_bb4_in/2]
11. non_recursive  : [eval_cryptRandOpen_8/2]
12. non_recursive  : [eval_cryptRandOpen_7/2]
13. non_recursive  : [eval_cryptRandOpen_5/2]
14. non_recursive  : [eval_cryptRandOpen_4/2]
15. non_recursive  : [eval_cryptRandOpen_3/2]
16. non_recursive  : [eval_cryptRandOpen_2/2]
17. non_recursive  : [eval_cryptRandOpen_bb0_in/2]
18. non_recursive  : [eval_cryptRandOpen_start/2]

#### Obtained direct recursion through partial evaluation 
0. SCC is completely evaluated into other SCCs
1. SCC is completely evaluated into other SCCs
2. SCC is completely evaluated into other SCCs
3. SCC is partially evaluated into eval_cryptRandOpen_bb7_in/3
4. SCC is completely evaluated into other SCCs
5. SCC is completely evaluated into other SCCs
6. SCC is completely evaluated into other SCCs
7. SCC is completely evaluated into other SCCs
8. SCC is partially evaluated into eval_cryptRandOpen_10/2
9. SCC is completely evaluated into other SCCs
10. SCC is completely evaluated into other SCCs
11. SCC is completely evaluated into other SCCs
12. SCC is completely evaluated into other SCCs
13. SCC is partially evaluated into eval_cryptRandOpen_5/2
14. SCC is completely evaluated into other SCCs
15. SCC is partially evaluated into eval_cryptRandOpen_3/2
16. SCC is completely evaluated into other SCCs
17. SCC is partially evaluated into eval_cryptRandOpen_bb0_in/2
18. SCC is partially evaluated into eval_cryptRandOpen_start/2

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations eval_cryptRandOpen_bb7_in/3 
* CE 11 is refined into CE [12] 
* CE 10 is refined into CE [13] 


#### Refined cost equations eval_cryptRandOpen_bb7_in/3 
* CE 12: eval_cryptRandOpen_bb7_in(V__randSeedOpen,B,C) = 1+ eval_cryptRandOpen_bb7_in(D,E,C)
     [E=2,D=1,B=2,V__randSeedOpen=1] 
* CE 13: eval_cryptRandOpen_bb7_in(V__randSeedOpen,B,C) = 0
     [C=1,B=2,V__randSeedOpen=1] 

### Cost equations --> "Loop" of eval_cryptRandOpen_bb7_in/3 
* CEs [13] --> Loop 8 
* CEs [12] --> Loop 9 

#### Loops of eval_cryptRandOpen_bb7_in/3 
* Loop 8: eval_cryptRandOpen_bb7_in(V__randSeedOpen,B,C) [C=1,B=2,V__randSeedOpen=1] 
* Loop 9: eval_cryptRandOpen_bb7_in(V__randSeedOpen,B,C)->  eval_cryptRandOpen_bb7_in(V__randSeedOpen',B',C)
                  [B'=2,V__randSeedOpen'=1,B=2,V__randSeedOpen=1] 

### Ranking functions of CR eval_cryptRandOpen_bb7_in(V__randSeedOpen,B,C) 

#### Partial ranking functions of CR eval_cryptRandOpen_bb7_in(V__randSeedOpen,B,C) 


### Resulting Chains:eval_cryptRandOpen_bb7_in(V__randSeedOpen,B,C) 
* [[9]]...
* [[9],8]
* [8]


### Merging Chains  eval_cryptRandOpen_bb7_in/3 into  External patterns of execution 
* [[8],[8,[9]]] --> 1 
* [[[9]]] --> 2 


### Specialization of cost equations eval_cryptRandOpen_10/2 
* CE 8 is refined into CE [14] 
* CE 9 is refined into CE [15,16] 


#### Refined cost equations eval_cryptRandOpen_10/2 
* CE 14: eval_cryptRandOpen_10(V__randSeedOpen,B) = 0
     [] 
* CE 15: eval_cryptRandOpen_10(V__randSeedOpen,B) = 1+ eval_cryptRandOpen_bb7_in(C,D,E):1
     [E=1,D=2,C=1] 
* CE 16: eval_cryptRandOpen_10(V__randSeedOpen,B) = 1+ eval_cryptRandOpen_bb7_in(C,D,E):2
     [D=2,C=1] 

### Cost equations --> "Loop" of eval_cryptRandOpen_10/2 
* CEs [16] --> Loop 10 
* CEs [14,15] --> Loop 11 

#### Loops of eval_cryptRandOpen_10/2 
* Loop 10: eval_cryptRandOpen_10(V__randSeedOpen,B) [] 
* Loop 11: eval_cryptRandOpen_10(V__randSeedOpen,B) [] 

### Ranking functions of CR eval_cryptRandOpen_10(V__randSeedOpen,B) 

#### Partial ranking functions of CR eval_cryptRandOpen_10(V__randSeedOpen,B) 


### Resulting Chains:eval_cryptRandOpen_10(V__randSeedOpen,B) 
* [11]
* [10]...


### Merging Chains  eval_cryptRandOpen_10/2 into  External patterns of execution 
* [[11]] --> 1 
* [[10]] --> 2 


### Specialization of cost equations eval_cryptRandOpen_5/2 
* CE 7 is refined into CE [17,18] 


#### Refined cost equations eval_cryptRandOpen_5/2 
* CE 17: eval_cryptRandOpen_5(V__randSeedOpen,B) = 0+ eval_cryptRandOpen_10(V__randSeedOpen,B):1
     [] 
* CE 18: eval_cryptRandOpen_5(V__randSeedOpen,B) = 0+ eval_cryptRandOpen_10(V__randSeedOpen,B):2
     [] 

### Cost equations --> "Loop" of eval_cryptRandOpen_5/2 
* CEs [18] --> Loop 12 
* CEs [17] --> Loop 13 

#### Loops of eval_cryptRandOpen_5/2 
* Loop 12: eval_cryptRandOpen_5(V__randSeedOpen,B) [] 
* Loop 13: eval_cryptRandOpen_5(V__randSeedOpen,B) [] 

### Ranking functions of CR eval_cryptRandOpen_5(V__randSeedOpen,B) 

#### Partial ranking functions of CR eval_cryptRandOpen_5(V__randSeedOpen,B) 


### Resulting Chains:eval_cryptRandOpen_5(V__randSeedOpen,B) 
* [13]
* [12]...


### Merging Chains  eval_cryptRandOpen_5/2 into  External patterns of execution 
* [[13]] --> 1 
* [[12]] --> 2 


### Specialization of cost equations eval_cryptRandOpen_3/2 
* CE 5 is refined into CE [19,20] 
* CE 6 is refined into CE [21] 


#### Refined cost equations eval_cryptRandOpen_3/2 
* CE 19: eval_cryptRandOpen_3(V__randSeedOpen,B) = 0+ eval_cryptRandOpen_5(V__randSeedOpen,B):1
     [] 
* CE 20: eval_cryptRandOpen_3(V__randSeedOpen,B) = 0+ eval_cryptRandOpen_5(V__randSeedOpen,B):2
     [] 
* CE 21: eval_cryptRandOpen_3(V__randSeedOpen,B) = 0
     [] 

### Cost equations --> "Loop" of eval_cryptRandOpen_3/2 
* CEs [19,21] --> Loop 14 
* CEs [20] --> Loop 15 

#### Loops of eval_cryptRandOpen_3/2 
* Loop 14: eval_cryptRandOpen_3(V__randSeedOpen,B) [] 
* Loop 15: eval_cryptRandOpen_3(V__randSeedOpen,B) [] 

### Ranking functions of CR eval_cryptRandOpen_3(V__randSeedOpen,B) 

#### Partial ranking functions of CR eval_cryptRandOpen_3(V__randSeedOpen,B) 


### Resulting Chains:eval_cryptRandOpen_3(V__randSeedOpen,B) 
* [15]...
* [14]


### Merging Chains  eval_cryptRandOpen_3/2 into  External patterns of execution 
* [[14]] --> 1 
* [[15]] --> 2 


### Specialization of cost equations eval_cryptRandOpen_bb0_in/2 
* CE 3 is refined into CE [22] 
* CE 4 is refined into CE [23,24] 


#### Refined cost equations eval_cryptRandOpen_bb0_in/2 
* CE 22: eval_cryptRandOpen_bb0_in(V__randSeedOpen,B) = 0
     [] 
* CE 23: eval_cryptRandOpen_bb0_in(V__randSeedOpen,B) = 0+ eval_cryptRandOpen_3(V__randSeedOpen,B):1
     [] 
* CE 24: eval_cryptRandOpen_bb0_in(V__randSeedOpen,B) = 0+ eval_cryptRandOpen_3(V__randSeedOpen,B):2
     [] 

### Cost equations --> "Loop" of eval_cryptRandOpen_bb0_in/2 
* CEs [24] --> Loop 16 
* CEs [22,23] --> Loop 17 

#### Loops of eval_cryptRandOpen_bb0_in/2 
* Loop 16: eval_cryptRandOpen_bb0_in(V__randSeedOpen,B) [] 
* Loop 17: eval_cryptRandOpen_bb0_in(V__randSeedOpen,B) [] 

### Ranking functions of CR eval_cryptRandOpen_bb0_in(V__randSeedOpen,B) 

#### Partial ranking functions of CR eval_cryptRandOpen_bb0_in(V__randSeedOpen,B) 


### Resulting Chains:eval_cryptRandOpen_bb0_in(V__randSeedOpen,B) 
* [17]
* [16]...


### Merging Chains  eval_cryptRandOpen_bb0_in/2 into  External patterns of execution 
* [[17]] --> 1 
* [[16]] --> 2 


### Specialization of cost equations eval_cryptRandOpen_start/2 
* CE 2 is refined into CE [25,26] 


#### Refined cost equations eval_cryptRandOpen_start/2 
* CE 25: eval_cryptRandOpen_start(V__randSeedOpen,B) = 0+ eval_cryptRandOpen_bb0_in(V__randSeedOpen,B):1
     [] 
* CE 26: eval_cryptRandOpen_start(V__randSeedOpen,B) = 0+ eval_cryptRandOpen_bb0_in(V__randSeedOpen,B):2
     [] 

### Cost equations --> "Loop" of eval_cryptRandOpen_start/2 
* CEs [26] --> Loop 18 
* CEs [25] --> Loop 19 

#### Loops of eval_cryptRandOpen_start/2 
* Loop 18: eval_cryptRandOpen_start(V__randSeedOpen,B) [] 
* Loop 19: eval_cryptRandOpen_start(V__randSeedOpen,B) [] 

### Ranking functions of CR eval_cryptRandOpen_start(V__randSeedOpen,B) 

#### Partial ranking functions of CR eval_cryptRandOpen_start(V__randSeedOpen,B) 


### Resulting Chains:eval_cryptRandOpen_start(V__randSeedOpen,B) 
* [19]
* [18]...


### Merging Chains  eval_cryptRandOpen_start/2 into  External patterns of execution 
* [[19]] --> 1 
* [[18]] --> 2 


Computing Bounds
=====================================

#### Cost of loops [9] 

 * loop 9:eval_cryptRandOpen_bb7_in(V__randSeedOpen,B,C) -> [eval_cryptRandOpen_bb7_in(V__randSeedOpen',B',C')] 
1
#### Cost of phase [9]:eval_cryptRandOpen_bb7_in(V__randSeedOpen,B,C) -> [eval_cryptRandOpen_bb7_in(V__randSeedOpen',B',C')] 
1*it(9)+0
#### Cost of phase [9]:eval_cryptRandOpen_bb7_in(V__randSeedOpen,B,C) -> [eval_cryptRandOpen_bb7_in(V__randSeedOpen',B',C')] 
1*it(9)+0
#### Cost of chains of eval_cryptRandOpen_bb7_in(V__randSeedOpen,B,C):
* Chain [[9]]...: 1*it(9)+0
  with precondition: [V__randSeedOpen=1,B=2] 

* Chain [[9],8]: 1*it(9)+0
  with precondition: [V__randSeedOpen=1,B=2,C=1] 

* Chain [8]: 0
  with precondition: [V__randSeedOpen=1,B=2,C=1] 


#### Cost of chains of eval_cryptRandOpen_10(V__randSeedOpen,B):
* Chain [11]: 1*aux(2)+0
  with precondition: [] 

* Chain [10]...: 1*s(3)+1
  with precondition: [] 


#### Cost of chains of eval_cryptRandOpen_5(V__randSeedOpen,B):
* Chain [13]: 1*s(4)+0
  with precondition: [] 

* Chain [12]...: 1*s(5)+1
  with precondition: [] 


#### Cost of chains of eval_cryptRandOpen_3(V__randSeedOpen,B):
* Chain [15]...: 1*s(6)+1
  with precondition: [] 

* Chain [14]: 1*aux(3)+0
  with precondition: [] 


#### Cost of chains of eval_cryptRandOpen_bb0_in(V__randSeedOpen,B):
* Chain [17]: 1*aux(4)+0
  with precondition: [] 

* Chain [16]...: 1*s(9)+1
  with precondition: [] 


#### Cost of chains of eval_cryptRandOpen_start(V__randSeedOpen,B):
* Chain [19]: 1*s(10)+0
  with precondition: [] 

* Chain [18]...: 1*s(11)+1
  with precondition: [] 


Closed-form bounds of eval_cryptRandOpen_start(V__randSeedOpen,B): 
-------------------------------------
* Chain [19] with precondition: [] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [18]... with precondition: [] 
    - Upper bound: inf 
    - Complexity: infinity 

### Maximum cost of eval_cryptRandOpen_start(V__randSeedOpen,B): inf 
Asymptotic class: infinity 

Time statistics: 
-------------------------------------
* Partial evaluation computed in 13 ms.
* Invariants computed in 5 ms.
   - Backward Invariants 3 ms.
   - Transitive Invariants 1 ms.
* Refinement performed in 12 ms.
* Termination proved in 1 ms.
* Upper bounds computed in 9 ms.
   - Equation cost structures 3 ms.
   - Phase cost structures 2 ms.
   - Chain cost structures 2 ms.
   - Solving cost expressions 1 ms.
* Total analysis performed in 56 ms.


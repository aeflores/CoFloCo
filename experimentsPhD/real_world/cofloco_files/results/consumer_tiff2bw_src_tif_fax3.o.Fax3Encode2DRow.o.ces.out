Warning: Ignored call to eval_Fax3Encode2DRow_stop/1 in equation loop_cont_eval_Fax3Encode2DRow_bb5_in/2 

Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. recursive  : [eval_Fax3Encode2DRow_100/13,eval_Fax3Encode2DRow_101/14,eval_Fax3Encode2DRow_102/13,eval_Fax3Encode2DRow_103/14,eval_Fax3Encode2DRow_114/17,eval_Fax3Encode2DRow_115/18,eval_Fax3Encode2DRow_116/17,eval_Fax3Encode2DRow_117/18,eval_Fax3Encode2DRow_128/21,eval_Fax3Encode2DRow_129/22,eval_Fax3Encode2DRow_130/21,eval_Fax3Encode2DRow_131/22,eval_Fax3Encode2DRow_34/9,eval_Fax3Encode2DRow_35/10,eval_Fax3Encode2DRow_36/9,eval_Fax3Encode2DRow_37/10,eval_Fax3Encode2DRow_50/12,eval_Fax3Encode2DRow_51/12,eval_Fax3Encode2DRow_61/10,eval_Fax3Encode2DRow_62/11,eval_Fax3Encode2DRow_63/10,eval_Fax3Encode2DRow_64/11,eval_Fax3Encode2DRow_67/11,eval_Fax3Encode2DRow_68/11,eval_Fax3Encode2DRow_80/12,eval_Fax3Encode2DRow_81/12,eval_Fax3Encode2DRow_82/13,eval_Fax3Encode2DRow_83/13,eval_Fax3Encode2DRow_85/12,eval_Fax3Encode2DRow_86/12,eval_Fax3Encode2DRow_87/13,eval_Fax3Encode2DRow_88/13,eval_Fax3Encode2DRow_89/10,eval_Fax3Encode2DRow_90/10,eval_Fax3Encode2DRow_bb10_in/10,eval_Fax3Encode2DRow_bb17_in/13,eval_Fax3Encode2DRow_bb18_in/11,eval_Fax3Encode2DRow_bb20_in/11,eval_Fax3Encode2DRow_bb23_in/13,eval_Fax3Encode2DRow_bb28_in/16,eval_Fax3Encode2DRow_bb31_in/20,eval_Fax3Encode2DRow_bb34_in/24,eval_Fax3Encode2DRow_bb5_in/9,eval_Fax3Encode2DRow_bb9_in/12]
1. non_recursive  : [loop_cont_eval_Fax3Encode2DRow_bb5_in/2]
2. non_recursive  : [eval_Fax3Encode2DRow_bb4_in/4]
3. non_recursive  : [eval_Fax3Encode2DRow_14/3]
4. non_recursive  : [eval_Fax3Encode2DRow_13/3]
5. non_recursive  : [eval_Fax3Encode2DRow_bb2_in/3]
6. non_recursive  : [eval_Fax3Encode2DRow_6/2]
7. non_recursive  : [eval_Fax3Encode2DRow_5/2]
8. non_recursive  : [eval_Fax3Encode2DRow_bb0_in/2]
9. non_recursive  : [eval_Fax3Encode2DRow_start/2]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into eval_Fax3Encode2DRow_bb5_in/9
1. SCC is completely evaluated into other SCCs
2. SCC is partially evaluated into eval_Fax3Encode2DRow_bb4_in/4
3. SCC is completely evaluated into other SCCs
4. SCC is completely evaluated into other SCCs
5. SCC is partially evaluated into eval_Fax3Encode2DRow_bb2_in/3
6. SCC is completely evaluated into other SCCs
7. SCC is completely evaluated into other SCCs
8. SCC is partially evaluated into eval_Fax3Encode2DRow_bb0_in/2
9. SCC is partially evaluated into eval_Fax3Encode2DRow_start/2

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations eval_Fax3Encode2DRow_bb5_in/9 
* CE 7 is refined into CE [8] 
* CE 6 is refined into CE [9] 


#### Refined cost equations eval_Fax3Encode2DRow_bb5_in/9 
* CE 8: eval_Fax3Encode2DRow_bb5_in(V_bits,V_20,V_23,V_26,V_29,V_b1_0,V_a1_0,V_a0_0,B) = 0
     [B=2] 
* CE 9: eval_Fax3Encode2DRow_bb5_in(V_bits,V_20,V_23,V_26,V_29,V_b1_0,V_a1_0,V_a0_0,B) = 1+ eval_Fax3Encode2DRow_bb5_in(V_bits,V_20,V_23,V_26,V_29,C,D,E,F)
     [F=2,B=2] 

### Cost equations --> "Loop" of eval_Fax3Encode2DRow_bb5_in/9 
* CEs [9] --> Loop 7 
* CEs [8] --> Loop 8 

#### Loops of eval_Fax3Encode2DRow_bb5_in/9 
* Loop 7: eval_Fax3Encode2DRow_bb5_in(V_bits,V_20,V_23,V_26,V_29,V_b1_0,V_a1_0,V_a0_0,B)->  eval_Fax3Encode2DRow_bb5_in(V_bits,V_20,V_23,V_26,V_29,V_b1_0',V_a1_0',V_a0_0',B')
                  [B'=2,B=2] 
* Loop 8: eval_Fax3Encode2DRow_bb5_in(V_bits,V_20,V_23,V_26,V_29,V_b1_0,V_a1_0,V_a0_0,B) [B=2] 

### Ranking functions of CR eval_Fax3Encode2DRow_bb5_in(V_bits,V_20,V_23,V_26,V_29,V_b1_0,V_a1_0,V_a0_0,B) 

#### Partial ranking functions of CR eval_Fax3Encode2DRow_bb5_in(V_bits,V_20,V_23,V_26,V_29,V_b1_0,V_a1_0,V_a0_0,B) 


### Resulting Chains:eval_Fax3Encode2DRow_bb5_in(V_bits,V_20,V_23,V_26,V_29,V_b1_0,V_a1_0,V_a0_0,B) 
* [[7]]...
* [[7],8]
* [8]


### Merging Chains  eval_Fax3Encode2DRow_bb5_in/9 into  External patterns of execution 
* [[8],[8,[7]]] --> 1 
* [[[7]]] --> 2 


### Specialization of cost equations eval_Fax3Encode2DRow_bb4_in/4 
* CE 5 is refined into CE [10,11] 


#### Refined cost equations eval_Fax3Encode2DRow_bb4_in/4 
* CE 10: eval_Fax3Encode2DRow_bb4_in(V_bits,V_8,V_17,B) = 1+ eval_Fax3Encode2DRow_bb5_in(V_bits,C,D,E,F,V_17,V_8,G,H):1
     [H=2,G=0] 
* CE 11: eval_Fax3Encode2DRow_bb4_in(V_bits,V_8,V_17,B) = 1+ eval_Fax3Encode2DRow_bb5_in(V_bits,C,D,E,F,V_17,V_8,G,H):2
     [H=2,G=0] 

### Cost equations --> "Loop" of eval_Fax3Encode2DRow_bb4_in/4 
* CEs [11] --> Loop 9 
* CEs [10] --> Loop 10 

#### Loops of eval_Fax3Encode2DRow_bb4_in/4 
* Loop 9: eval_Fax3Encode2DRow_bb4_in(V_bits,V_8,V_17,B) [] 
* Loop 10: eval_Fax3Encode2DRow_bb4_in(V_bits,V_8,V_17,B) [] 

### Ranking functions of CR eval_Fax3Encode2DRow_bb4_in(V_bits,V_8,V_17,B) 

#### Partial ranking functions of CR eval_Fax3Encode2DRow_bb4_in(V_bits,V_8,V_17,B) 


### Resulting Chains:eval_Fax3Encode2DRow_bb4_in(V_bits,V_8,V_17,B) 
* [10]
* [9]...


### Merging Chains  eval_Fax3Encode2DRow_bb4_in/4 into  External patterns of execution 
* [[10]] --> 1 
* [[9]] --> 2 


### Specialization of cost equations eval_Fax3Encode2DRow_bb2_in/3 
* CE 4 is refined into CE [12,13] 


#### Refined cost equations eval_Fax3Encode2DRow_bb2_in/3 
* CE 12: eval_Fax3Encode2DRow_bb2_in(V_bits,V_8,B) = 0+ eval_Fax3Encode2DRow_bb4_in(V_bits,V_8,C,B):1
     [] 
* CE 13: eval_Fax3Encode2DRow_bb2_in(V_bits,V_8,B) = 0+ eval_Fax3Encode2DRow_bb4_in(V_bits,V_8,C,B):2
     [] 

### Cost equations --> "Loop" of eval_Fax3Encode2DRow_bb2_in/3 
* CEs [13] --> Loop 11 
* CEs [12] --> Loop 12 

#### Loops of eval_Fax3Encode2DRow_bb2_in/3 
* Loop 11: eval_Fax3Encode2DRow_bb2_in(V_bits,V_8,B) [] 
* Loop 12: eval_Fax3Encode2DRow_bb2_in(V_bits,V_8,B) [] 

### Ranking functions of CR eval_Fax3Encode2DRow_bb2_in(V_bits,V_8,B) 

#### Partial ranking functions of CR eval_Fax3Encode2DRow_bb2_in(V_bits,V_8,B) 


### Resulting Chains:eval_Fax3Encode2DRow_bb2_in(V_bits,V_8,B) 
* [12]
* [11]...


### Merging Chains  eval_Fax3Encode2DRow_bb2_in/3 into  External patterns of execution 
* [[12]] --> 1 
* [[11]] --> 2 


### Specialization of cost equations eval_Fax3Encode2DRow_bb0_in/2 
* CE 3 is refined into CE [14,15] 


#### Refined cost equations eval_Fax3Encode2DRow_bb0_in/2 
* CE 14: eval_Fax3Encode2DRow_bb0_in(V_bits,B) = 0+ eval_Fax3Encode2DRow_bb2_in(V_bits,C,B):1
     [] 
* CE 15: eval_Fax3Encode2DRow_bb0_in(V_bits,B) = 0+ eval_Fax3Encode2DRow_bb2_in(V_bits,C,B):2
     [] 

### Cost equations --> "Loop" of eval_Fax3Encode2DRow_bb0_in/2 
* CEs [15] --> Loop 13 
* CEs [14] --> Loop 14 

#### Loops of eval_Fax3Encode2DRow_bb0_in/2 
* Loop 13: eval_Fax3Encode2DRow_bb0_in(V_bits,B) [] 
* Loop 14: eval_Fax3Encode2DRow_bb0_in(V_bits,B) [] 

### Ranking functions of CR eval_Fax3Encode2DRow_bb0_in(V_bits,B) 

#### Partial ranking functions of CR eval_Fax3Encode2DRow_bb0_in(V_bits,B) 


### Resulting Chains:eval_Fax3Encode2DRow_bb0_in(V_bits,B) 
* [14]
* [13]...


### Merging Chains  eval_Fax3Encode2DRow_bb0_in/2 into  External patterns of execution 
* [[14]] --> 1 
* [[13]] --> 2 


### Specialization of cost equations eval_Fax3Encode2DRow_start/2 
* CE 2 is refined into CE [16,17] 


#### Refined cost equations eval_Fax3Encode2DRow_start/2 
* CE 16: eval_Fax3Encode2DRow_start(V_bits,B) = 0+ eval_Fax3Encode2DRow_bb0_in(V_bits,B):1
     [] 
* CE 17: eval_Fax3Encode2DRow_start(V_bits,B) = 0+ eval_Fax3Encode2DRow_bb0_in(V_bits,B):2
     [] 

### Cost equations --> "Loop" of eval_Fax3Encode2DRow_start/2 
* CEs [17] --> Loop 15 
* CEs [16] --> Loop 16 

#### Loops of eval_Fax3Encode2DRow_start/2 
* Loop 15: eval_Fax3Encode2DRow_start(V_bits,B) [] 
* Loop 16: eval_Fax3Encode2DRow_start(V_bits,B) [] 

### Ranking functions of CR eval_Fax3Encode2DRow_start(V_bits,B) 

#### Partial ranking functions of CR eval_Fax3Encode2DRow_start(V_bits,B) 


### Resulting Chains:eval_Fax3Encode2DRow_start(V_bits,B) 
* [16]
* [15]...


### Merging Chains  eval_Fax3Encode2DRow_start/2 into  External patterns of execution 
* [[16]] --> 1 
* [[15]] --> 2 


Computing Bounds
=====================================

#### Cost of loops [7] 

 * loop 7:eval_Fax3Encode2DRow_bb5_in(V_bits,V_20,V_23,V_26,V_29,V_b1_0,V_a1_0,V_a0_0,B) -> [eval_Fax3Encode2DRow_bb5_in(V_bits',V_20',V_23',V_26',V_29',V_b1_0',V_a1_0',V_a0_0',B')] 
1
#### Cost of phase [7]:eval_Fax3Encode2DRow_bb5_in(V_bits,V_20,V_23,V_26,V_29,V_b1_0,V_a1_0,V_a0_0,B) -> [eval_Fax3Encode2DRow_bb5_in(V_bits',V_20',V_23',V_26',V_29',V_b1_0',V_a1_0',V_a0_0',B')] 
1*it(7)+0
#### Cost of phase [7]:eval_Fax3Encode2DRow_bb5_in(V_bits,V_20,V_23,V_26,V_29,V_b1_0,V_a1_0,V_a0_0,B) -> [eval_Fax3Encode2DRow_bb5_in(V_bits',V_20',V_23',V_26',V_29',V_b1_0',V_a1_0',V_a0_0',B')] 
1*it(7)+0
#### Cost of chains of eval_Fax3Encode2DRow_bb5_in(V_bits,V_20,V_23,V_26,V_29,V_b1_0,V_a1_0,V_a0_0,B):
* Chain [[7]]...: 1*it(7)+0
  with precondition: [B=2] 

* Chain [[7],8]: 1*it(7)+0
  with precondition: [B=2] 

* Chain [8]: 0
  with precondition: [B=2] 


#### Cost of chains of eval_Fax3Encode2DRow_bb4_in(V_bits,V_8,V_17,B):
* Chain [10]: 1*s(2)+1
  with precondition: [] 

* Chain [9]...: 1*s(3)+1
  with precondition: [] 


#### Cost of chains of eval_Fax3Encode2DRow_bb2_in(V_bits,V_8,B):
* Chain [12]: 1*s(4)+1
  with precondition: [] 

* Chain [11]...: 1*s(5)+1
  with precondition: [] 


#### Cost of chains of eval_Fax3Encode2DRow_bb0_in(V_bits,B):
* Chain [14]: 1*s(6)+1
  with precondition: [] 

* Chain [13]...: 1*s(7)+1
  with precondition: [] 


#### Cost of chains of eval_Fax3Encode2DRow_start(V_bits,B):
* Chain [16]: 1*s(8)+1
  with precondition: [] 

* Chain [15]...: 1*s(9)+1
  with precondition: [] 


Closed-form bounds of eval_Fax3Encode2DRow_start(V_bits,B): 
-------------------------------------
* Chain [16] with precondition: [] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [15]... with precondition: [] 
    - Upper bound: inf 
    - Complexity: infinity 

### Maximum cost of eval_Fax3Encode2DRow_start(V_bits,B): inf 
Asymptotic class: infinity 

Time statistics: 
-------------------------------------
* Partial evaluation computed in 444 ms.
* Invariants computed in 18 ms.
   - Backward Invariants 7 ms.
   - Transitive Invariants 5 ms.
* Refinement performed in 38 ms.
* Termination proved in 7 ms.
* Upper bounds computed in 31 ms.
   - Equation cost structures 11 ms.
   - Phase cost structures 8 ms.
   - Chain cost structures 10 ms.
   - Solving cost expressions 0 ms.
* Total analysis performed in 845 ms.


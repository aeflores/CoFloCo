Warning: Ignored call to eval_makedent_stop/1 in equation eval_makedent__critedge_in/1 

Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. non_recursive  : [eval_makedent__critedge_in/1]
1. non_recursive  : [eval_makedent_32/1]
2. non_recursive  : [eval_makedent_31/2]
3. non_recursive  : [eval_makedent_bb6_in/2]
4. recursive  : [eval_makedent_bb15_in/3,eval_makedent_bb9_in/3]
5. non_recursive  : [eval_makedent_61/1]
6. non_recursive  : [eval_makedent_60/2]
7. non_recursive  : [eval_makedent_69/1]
8. non_recursive  : [eval_makedent_68/2]
9. recursive  : [eval_makedent_96/3,eval_makedent_97/3,eval_makedent_bb26_in/2,eval_makedent_bb32_in/2]
10. non_recursive  : [loop_cont_eval_makedent_bb26_in/2]
11. non_recursive  : [eval_makedent_bb24_in/2]
12. non_recursive  : [eval_makedent_75/2]
13. non_recursive  : [eval_makedent_74/2]
14. non_recursive  : [eval_makedent_71/2]
15. non_recursive  : [eval_makedent_70/2]
16. non_recursive  : [eval_makedent_64/2]
17. non_recursive  : [eval_makedent_63/3]
18. non_recursive  : [eval_makedent_54/3]
19. non_recursive  : [eval_makedent_53/3]
20. non_recursive  : [eval_makedent_52/3]
21. non_recursive  : [eval_makedent_51/2]
22. non_recursive  : [eval_makedent_50/1]
23. non_recursive  : [eval_makedent_49/2]
24. non_recursive  : [eval_makedent_bb13_in/2]
25. non_recursive  : [loop_cont_eval_makedent_bb9_in/3]
26. non_recursive  : [eval_makedent_28/2]
27. non_recursive  : [eval_makedent_27/3]
28. non_recursive  : [eval_makedent_26/3]
29. non_recursive  : [eval_makedent_25/3]
30. non_recursive  : [eval_makedent_bb4_in/3]
31. non_recursive  : [eval_makedent_22/3]
32. non_recursive  : [eval_makedent_21/4]
33. non_recursive  : [eval_makedent_13/3]
34. non_recursive  : [eval_makedent_12/3]
35. non_recursive  : [eval_makedent_bb2_in/3]
36. non_recursive  : [eval_makedent_1/3]
37. non_recursive  : [eval_makedent_0/3]
38. non_recursive  : [eval_makedent_bb0_in/3]
39. non_recursive  : [eval_makedent_start/3]

#### Obtained direct recursion through partial evaluation 
0. SCC is completely evaluated into other SCCs
1. SCC is completely evaluated into other SCCs
2. SCC is completely evaluated into other SCCs
3. SCC is partially evaluated into eval_makedent_bb6_in/2
4. SCC is partially evaluated into eval_makedent_bb9_in/3
5. SCC is completely evaluated into other SCCs
6. SCC is completely evaluated into other SCCs
7. SCC is completely evaluated into other SCCs
8. SCC is completely evaluated into other SCCs
9. SCC is partially evaluated into eval_makedent_bb26_in/2
10. SCC is completely evaluated into other SCCs
11. SCC is partially evaluated into eval_makedent_bb24_in/2
12. SCC is completely evaluated into other SCCs
13. SCC is completely evaluated into other SCCs
14. SCC is partially evaluated into eval_makedent_71/2
15. SCC is completely evaluated into other SCCs
16. SCC is partially evaluated into eval_makedent_64/2
17. SCC is completely evaluated into other SCCs
18. SCC is partially evaluated into eval_makedent_54/3
19. SCC is completely evaluated into other SCCs
20. SCC is completely evaluated into other SCCs
21. SCC is completely evaluated into other SCCs
22. SCC is completely evaluated into other SCCs
23. SCC is completely evaluated into other SCCs
24. SCC is partially evaluated into eval_makedent_bb13_in/2
25. SCC is partially evaluated into loop_cont_eval_makedent_bb9_in/3
26. SCC is partially evaluated into eval_makedent_28/2
27. SCC is completely evaluated into other SCCs
28. SCC is partially evaluated into eval_makedent_26/3
29. SCC is completely evaluated into other SCCs
30. SCC is completely evaluated into other SCCs
31. SCC is partially evaluated into eval_makedent_22/3
32. SCC is completely evaluated into other SCCs
33. SCC is completely evaluated into other SCCs
34. SCC is completely evaluated into other SCCs
35. SCC is completely evaluated into other SCCs
36. SCC is partially evaluated into eval_makedent_1/3
37. SCC is completely evaluated into other SCCs
38. SCC is completely evaluated into other SCCs
39. SCC is partially evaluated into eval_makedent_start/3

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations eval_makedent_bb6_in/2 
* CE 7 is refined into CE [25] 


#### Refined cost equations eval_makedent_bb6_in/2 
* CE 25: eval_makedent_bb6_in(V__cbench_print,B) = 0
     [] 

### Cost equations --> "Loop" of eval_makedent_bb6_in/2 
* CEs [25] --> Loop 19 

#### Loops of eval_makedent_bb6_in/2 
* Loop 19: eval_makedent_bb6_in(V__cbench_print,B) [] 

### Ranking functions of CR eval_makedent_bb6_in(V__cbench_print,B) 

#### Partial ranking functions of CR eval_makedent_bb6_in(V__cbench_print,B) 


### Resulting Chains:eval_makedent_bb6_in(V__cbench_print,B) 
* [19]


### Merging Chains  eval_makedent_bb6_in/2 into  External patterns of execution 
* [[19]] --> 1 


### Specialization of cost equations eval_makedent_bb9_in/3 
* CE 12 is refined into CE [26] 
* CE 11 is refined into CE [27] 
* CE 10 is refined into CE [28] 


#### Refined cost equations eval_makedent_bb9_in/3 
* CE 26: eval_makedent_bb9_in(A,B,A) = 0
     [B=3] 
* CE 27: eval_makedent_bb9_in(A,B,A) = 0
     [B=2] 
* CE 28: eval_makedent_bb9_in(V__cbench_print,B,C) = 1+ eval_makedent_bb9_in(V__cbench_print,B,C)
     [] 

### Cost equations --> "Loop" of eval_makedent_bb9_in/3 
* CEs [28] --> Loop 20 
* CEs [26] --> Loop 21 
* CEs [27] --> Loop 22 

#### Loops of eval_makedent_bb9_in/3 
* Loop 20: eval_makedent_bb9_in(V__cbench_print,B,C)->  eval_makedent_bb9_in(V__cbench_print,B,C)
                  [] 
* Loop 21: eval_makedent_bb9_in(A,B,A) [B=3] 
* Loop 22: eval_makedent_bb9_in(A,B,A) [B=2] 

### Ranking functions of CR eval_makedent_bb9_in(V__cbench_print,B,C) 

#### Partial ranking functions of CR eval_makedent_bb9_in(V__cbench_print,B,C) 


### Resulting Chains:eval_makedent_bb9_in(V__cbench_print,B,C) 
* [[20]]...
* [[20],22]
* [[20],21]
* [22]
* [21]


### Merging Chains  eval_makedent_bb9_in/3 into  External patterns of execution 
* [[22],[22,[20]]] --> 1 
* [[21],[21,[20]]] --> 2 
* [[[20]]] --> 3 


### Specialization of cost equations eval_makedent_bb26_in/2 
* CE 24 is refined into CE [29] 
* CE 23 is refined into CE [30] 


#### Refined cost equations eval_makedent_bb26_in/2 
* CE 29: eval_makedent_bb26_in(V__cbench_print,B) = 0
     [B=4] 
* CE 30: eval_makedent_bb26_in(V__cbench_print,B) = 1+ eval_makedent_bb26_in(C,D)
     [D=4,B=4] 

### Cost equations --> "Loop" of eval_makedent_bb26_in/2 
* CEs [30] --> Loop 23 
* CEs [29] --> Loop 24 

#### Loops of eval_makedent_bb26_in/2 
* Loop 23: eval_makedent_bb26_in(V__cbench_print,B)->  eval_makedent_bb26_in(V__cbench_print',B')
                  [B'=4,B=4] 
* Loop 24: eval_makedent_bb26_in(V__cbench_print,B) [B=4] 

### Ranking functions of CR eval_makedent_bb26_in(V__cbench_print,B) 

#### Partial ranking functions of CR eval_makedent_bb26_in(V__cbench_print,B) 


### Resulting Chains:eval_makedent_bb26_in(V__cbench_print,B) 
* [[23]]...
* [[23],24]
* [24]


### Merging Chains  eval_makedent_bb26_in/2 into  External patterns of execution 
* [[24],[24,[23]]] --> 1 
* [[[23]]] --> 2 


### Specialization of cost equations eval_makedent_bb24_in/2 
* CE 21 is refined into CE [31] 
* CE 22 is refined into CE [32,33] 


#### Refined cost equations eval_makedent_bb24_in/2 
* CE 31: eval_makedent_bb24_in(V__cbench_print,B) = 0
     [] 
* CE 32: eval_makedent_bb24_in(V__cbench_print,B) = 1+ eval_makedent_bb26_in(V__cbench_print,C):1
     [C=4] 
* CE 33: eval_makedent_bb24_in(V__cbench_print,B) = 1+ eval_makedent_bb26_in(V__cbench_print,C):2
     [C=4] 

### Cost equations --> "Loop" of eval_makedent_bb24_in/2 
* CEs [33] --> Loop 25 
* CEs [31,32] --> Loop 26 

#### Loops of eval_makedent_bb24_in/2 
* Loop 25: eval_makedent_bb24_in(V__cbench_print,B) [] 
* Loop 26: eval_makedent_bb24_in(V__cbench_print,B) [] 

### Ranking functions of CR eval_makedent_bb24_in(V__cbench_print,B) 

#### Partial ranking functions of CR eval_makedent_bb24_in(V__cbench_print,B) 


### Resulting Chains:eval_makedent_bb24_in(V__cbench_print,B) 
* [26]
* [25]...


### Merging Chains  eval_makedent_bb24_in/2 into  External patterns of execution 
* [[26]] --> 1 
* [[25]] --> 2 


### Specialization of cost equations eval_makedent_71/2 
* CE 20 is refined into CE [34,35] 


#### Refined cost equations eval_makedent_71/2 
* CE 34: eval_makedent_71(V__cbench_print,B) = 0+ eval_makedent_bb24_in(V__cbench_print,B):1
     [] 
* CE 35: eval_makedent_71(V__cbench_print,B) = 0+ eval_makedent_bb24_in(V__cbench_print,B):2
     [] 

### Cost equations --> "Loop" of eval_makedent_71/2 
* CEs [35] --> Loop 27 
* CEs [34] --> Loop 28 

#### Loops of eval_makedent_71/2 
* Loop 27: eval_makedent_71(V__cbench_print,B) [] 
* Loop 28: eval_makedent_71(V__cbench_print,B) [] 

### Ranking functions of CR eval_makedent_71(V__cbench_print,B) 

#### Partial ranking functions of CR eval_makedent_71(V__cbench_print,B) 


### Resulting Chains:eval_makedent_71(V__cbench_print,B) 
* [28]
* [27]...


### Merging Chains  eval_makedent_71/2 into  External patterns of execution 
* [[28]] --> 1 
* [[27]] --> 2 


### Specialization of cost equations eval_makedent_64/2 
* CE 18 is refined into CE [36] 
* CE 19 is refined into CE [37,38] 


#### Refined cost equations eval_makedent_64/2 
* CE 36: eval_makedent_64(V__cbench_print,B) = 0
     [] 
* CE 37: eval_makedent_64(V__cbench_print,B) = 0+ eval_makedent_71(C,B):1
     [] 
* CE 38: eval_makedent_64(V__cbench_print,B) = 0+ eval_makedent_71(C,B):2
     [] 

### Cost equations --> "Loop" of eval_makedent_64/2 
* CEs [38] --> Loop 29 
* CEs [36,37] --> Loop 30 

#### Loops of eval_makedent_64/2 
* Loop 29: eval_makedent_64(V__cbench_print,B) [] 
* Loop 30: eval_makedent_64(V__cbench_print,B) [] 

### Ranking functions of CR eval_makedent_64(V__cbench_print,B) 

#### Partial ranking functions of CR eval_makedent_64(V__cbench_print,B) 


### Resulting Chains:eval_makedent_64(V__cbench_print,B) 
* [30]
* [29]...


### Merging Chains  eval_makedent_64/2 into  External patterns of execution 
* [[30]] --> 1 
* [[29]] --> 2 


### Specialization of cost equations eval_makedent_54/3 
* CE 16 is refined into CE [39] 
* CE 17 is refined into CE [40,41] 


#### Refined cost equations eval_makedent_54/3 
* CE 39: eval_makedent_54(V__cbench_print,V_70,B) = 0
     [] 
* CE 40: eval_makedent_54(V__cbench_print,V_70,B) = 0+ eval_makedent_64(C,B):1
     [] 
* CE 41: eval_makedent_54(V__cbench_print,V_70,B) = 0+ eval_makedent_64(C,B):2
     [] 

### Cost equations --> "Loop" of eval_makedent_54/3 
* CEs [41] --> Loop 31 
* CEs [39,40] --> Loop 32 

#### Loops of eval_makedent_54/3 
* Loop 31: eval_makedent_54(V__cbench_print,V_70,B) [] 
* Loop 32: eval_makedent_54(V__cbench_print,V_70,B) [] 

### Ranking functions of CR eval_makedent_54(V__cbench_print,V_70,B) 

#### Partial ranking functions of CR eval_makedent_54(V__cbench_print,V_70,B) 


### Resulting Chains:eval_makedent_54(V__cbench_print,V_70,B) 
* [32]
* [31]...


### Merging Chains  eval_makedent_54/3 into  External patterns of execution 
* [[32]] --> 1 
* [[31]] --> 2 


### Specialization of cost equations eval_makedent_bb13_in/2 
* CE 15 is refined into CE [42] 


#### Refined cost equations eval_makedent_bb13_in/2 
* CE 42: eval_makedent_bb13_in(V__cbench_print,B) = 0
     [] 

### Cost equations --> "Loop" of eval_makedent_bb13_in/2 
* CEs [42] --> Loop 33 

#### Loops of eval_makedent_bb13_in/2 
* Loop 33: eval_makedent_bb13_in(V__cbench_print,B) [] 

### Ranking functions of CR eval_makedent_bb13_in(V__cbench_print,B) 

#### Partial ranking functions of CR eval_makedent_bb13_in(V__cbench_print,B) 


### Resulting Chains:eval_makedent_bb13_in(V__cbench_print,B) 
* [33]


### Merging Chains  eval_makedent_bb13_in/2 into  External patterns of execution 
* [[33]] --> 1 


### Specialization of cost equations loop_cont_eval_makedent_bb9_in/3 
* CE 14 is refined into CE [43,44] 
* CE 13 is refined into CE [45] 


#### Refined cost equations loop_cont_eval_makedent_bb9_in/3 
* CE 43: loop_cont_eval_makedent_bb9_in(C,A,B) = 0+ eval_makedent_54(A,D,B):1
     [C=3] 
* CE 44: loop_cont_eval_makedent_bb9_in(C,A,B) = 0+ eval_makedent_54(A,D,B):2
     [C=3] 
* CE 45: loop_cont_eval_makedent_bb9_in(C,A,B) = 0+ eval_makedent_bb13_in(A,B):1
     [C=2] 

### Cost equations --> "Loop" of loop_cont_eval_makedent_bb9_in/3 
* CEs [43] --> Loop 34 
* CEs [45] --> Loop 35 
* CEs [44] --> Loop 36 

#### Loops of loop_cont_eval_makedent_bb9_in/3 
* Loop 34: loop_cont_eval_makedent_bb9_in(C,A,B) [C=3] 
* Loop 35: loop_cont_eval_makedent_bb9_in(C,A,B) [C=2] 
* Loop 36: loop_cont_eval_makedent_bb9_in(C,A,B) [C=3] 

### Ranking functions of CR loop_cont_eval_makedent_bb9_in(C,A,B) 

#### Partial ranking functions of CR loop_cont_eval_makedent_bb9_in(C,A,B) 


### Resulting Chains:loop_cont_eval_makedent_bb9_in(C,A,B) 
* [36]...
* [35]
* [34]


### Merging Chains  loop_cont_eval_makedent_bb9_in/3 into  External patterns of execution 
* [[35]] --> 1 
* [[34]] --> 2 
* [[36]] --> 3 


### Specialization of cost equations eval_makedent_28/2 
* CE 8 is refined into CE [46] 
* CE 9 is refined into CE [47,48,49,50] 


#### Refined cost equations eval_makedent_28/2 
* CE 46: eval_makedent_28(V__cbench_print,B) = 0+ eval_makedent_bb6_in(V__cbench_print,B):1
     [] 
* CE 47: eval_makedent_28(V__cbench_print,B) = 1+ eval_makedent_bb9_in(V__cbench_print,C,V__cbench_print):1+ loop_cont_eval_makedent_bb9_in(D,V__cbench_print,B):1
     [D=2,C=2] 
* CE 48: eval_makedent_28(V__cbench_print,B) = 1+ eval_makedent_bb9_in(V__cbench_print,C,V__cbench_print):2+ loop_cont_eval_makedent_bb9_in(D,V__cbench_print,B):2
     [D=3,C=3] 
* CE 49: eval_makedent_28(V__cbench_print,B) = 1+ eval_makedent_bb9_in(V__cbench_print,C,V__cbench_print):2+ loop_cont_eval_makedent_bb9_in(D,V__cbench_print,B):3
     [D=3,C=3] 
* CE 50: eval_makedent_28(V__cbench_print,B) = 1+ eval_makedent_bb9_in(V__cbench_print,C,D):3
     [] 

### Cost equations --> "Loop" of eval_makedent_28/2 
* CEs [49,50] --> Loop 37 
* CEs [46,47,48] --> Loop 38 

#### Loops of eval_makedent_28/2 
* Loop 37: eval_makedent_28(V__cbench_print,B) [] 
* Loop 38: eval_makedent_28(V__cbench_print,B) [] 

### Ranking functions of CR eval_makedent_28(V__cbench_print,B) 

#### Partial ranking functions of CR eval_makedent_28(V__cbench_print,B) 


### Resulting Chains:eval_makedent_28(V__cbench_print,B) 
* [38]
* [37]...


### Merging Chains  eval_makedent_28/2 into  External patterns of execution 
* [[38]] --> 1 
* [[37]] --> 2 


### Specialization of cost equations eval_makedent_26/3 
* CE 5 is refined into CE [51] 
* CE 6 is refined into CE [52,53] 


#### Refined cost equations eval_makedent_26/3 
* CE 51: eval_makedent_26(V_lbuflen,V__cbench_print,B) = 0+ eval_makedent_bb6_in(V__cbench_print,B):1
     [] 
* CE 52: eval_makedent_26(V_lbuflen,V__cbench_print,B) = 0+ eval_makedent_28(V__cbench_print,B):1
     [] 
* CE 53: eval_makedent_26(V_lbuflen,V__cbench_print,B) = 0+ eval_makedent_28(V__cbench_print,B):2
     [] 

### Cost equations --> "Loop" of eval_makedent_26/3 
* CEs [53] --> Loop 39 
* CEs [51,52] --> Loop 40 

#### Loops of eval_makedent_26/3 
* Loop 39: eval_makedent_26(V_lbuflen,V__cbench_print,B) [] 
* Loop 40: eval_makedent_26(V_lbuflen,V__cbench_print,B) [] 

### Ranking functions of CR eval_makedent_26(V_lbuflen,V__cbench_print,B) 

#### Partial ranking functions of CR eval_makedent_26(V_lbuflen,V__cbench_print,B) 


### Resulting Chains:eval_makedent_26(V_lbuflen,V__cbench_print,B) 
* [40]
* [39]...


### Merging Chains  eval_makedent_26/3 into  External patterns of execution 
* [[40]] --> 1 
* [[39]] --> 2 


### Specialization of cost equations eval_makedent_22/3 
* CE 4 is refined into CE [54,55] 


#### Refined cost equations eval_makedent_22/3 
* CE 54: eval_makedent_22(V_lbuflen,V__cbench_print,B) = 0+ eval_makedent_26(V_lbuflen,C,B):1
     [] 
* CE 55: eval_makedent_22(V_lbuflen,V__cbench_print,B) = 0+ eval_makedent_26(V_lbuflen,C,B):2
     [] 

### Cost equations --> "Loop" of eval_makedent_22/3 
* CEs [55] --> Loop 41 
* CEs [54] --> Loop 42 

#### Loops of eval_makedent_22/3 
* Loop 41: eval_makedent_22(V_lbuflen,V__cbench_print,B) [] 
* Loop 42: eval_makedent_22(V_lbuflen,V__cbench_print,B) [] 

### Ranking functions of CR eval_makedent_22(V_lbuflen,V__cbench_print,B) 

#### Partial ranking functions of CR eval_makedent_22(V_lbuflen,V__cbench_print,B) 


### Resulting Chains:eval_makedent_22(V_lbuflen,V__cbench_print,B) 
* [42]
* [41]...


### Merging Chains  eval_makedent_22/3 into  External patterns of execution 
* [[42]] --> 1 
* [[41]] --> 2 


### Specialization of cost equations eval_makedent_1/3 
* CE 3 is refined into CE [56,57] 


#### Refined cost equations eval_makedent_1/3 
* CE 56: eval_makedent_1(V_lbuflen,V__cbench_print,B) = 0+ eval_makedent_22(V_lbuflen,C,B):1
     [] 
* CE 57: eval_makedent_1(V_lbuflen,V__cbench_print,B) = 0+ eval_makedent_22(V_lbuflen,C,B):2
     [] 

### Cost equations --> "Loop" of eval_makedent_1/3 
* CEs [57] --> Loop 43 
* CEs [56] --> Loop 44 

#### Loops of eval_makedent_1/3 
* Loop 43: eval_makedent_1(V_lbuflen,V__cbench_print,B) [] 
* Loop 44: eval_makedent_1(V_lbuflen,V__cbench_print,B) [] 

### Ranking functions of CR eval_makedent_1(V_lbuflen,V__cbench_print,B) 

#### Partial ranking functions of CR eval_makedent_1(V_lbuflen,V__cbench_print,B) 


### Resulting Chains:eval_makedent_1(V_lbuflen,V__cbench_print,B) 
* [44]
* [43]...


### Merging Chains  eval_makedent_1/3 into  External patterns of execution 
* [[44]] --> 1 
* [[43]] --> 2 


### Specialization of cost equations eval_makedent_start/3 
* CE 2 is refined into CE [58,59] 


#### Refined cost equations eval_makedent_start/3 
* CE 58: eval_makedent_start(V_lbuflen,V__cbench_print,B) = 0+ eval_makedent_1(V_lbuflen,V__cbench_print,B):1
     [] 
* CE 59: eval_makedent_start(V_lbuflen,V__cbench_print,B) = 0+ eval_makedent_1(V_lbuflen,V__cbench_print,B):2
     [] 

### Cost equations --> "Loop" of eval_makedent_start/3 
* CEs [59] --> Loop 45 
* CEs [58] --> Loop 46 

#### Loops of eval_makedent_start/3 
* Loop 45: eval_makedent_start(V_lbuflen,V__cbench_print,B) [] 
* Loop 46: eval_makedent_start(V_lbuflen,V__cbench_print,B) [] 

### Ranking functions of CR eval_makedent_start(V_lbuflen,V__cbench_print,B) 

#### Partial ranking functions of CR eval_makedent_start(V_lbuflen,V__cbench_print,B) 


### Resulting Chains:eval_makedent_start(V_lbuflen,V__cbench_print,B) 
* [46]
* [45]...


### Merging Chains  eval_makedent_start/3 into  External patterns of execution 
* [[46]] --> 1 
* [[45]] --> 2 


Computing Bounds
=====================================

#### Cost of chains of eval_makedent_bb6_in(V__cbench_print,B):
* Chain [19]: 0
  with precondition: [] 


#### Cost of loops [20] 

 * loop 20:eval_makedent_bb9_in(V__cbench_print,B,C) -> [eval_makedent_bb9_in(V__cbench_print',B',C')] 
1
#### Cost of phase [20]:eval_makedent_bb9_in(V__cbench_print,B,C) -> [eval_makedent_bb9_in(V__cbench_print',B',C')] 
1*it(20)+0
#### Cost of phase [20]:eval_makedent_bb9_in(V__cbench_print,B,C) -> [eval_makedent_bb9_in(V__cbench_print',B',C')] 
1*it(20)+0
#### Cost of phase [20]:eval_makedent_bb9_in(V__cbench_print,B,C) -> [eval_makedent_bb9_in(V__cbench_print',B',C')] 
1*it(20)+0
#### Cost of chains of eval_makedent_bb9_in(V__cbench_print,B,C):
* Chain [[20]]...: 1*it(20)+0
  with precondition: [] 

* Chain [[20],22]: 1*it(20)+0
  with precondition: [B=2,V__cbench_print=C] 

* Chain [[20],21]: 1*it(20)+0
  with precondition: [B=3,V__cbench_print=C] 

* Chain [22]: 0
  with precondition: [B=2,C=V__cbench_print] 

* Chain [21]: 0
  with precondition: [B=3,C=V__cbench_print] 


#### Cost of loops [23] 

 * loop 23:eval_makedent_bb26_in(V__cbench_print,B) -> [eval_makedent_bb26_in(V__cbench_print',B')] 
1
#### Cost of phase [23]:eval_makedent_bb26_in(V__cbench_print,B) -> [eval_makedent_bb26_in(V__cbench_print',B')] 
1*it(23)+0
#### Cost of phase [23]:eval_makedent_bb26_in(V__cbench_print,B) -> [eval_makedent_bb26_in(V__cbench_print',B')] 
1*it(23)+0
#### Cost of chains of eval_makedent_bb26_in(V__cbench_print,B):
* Chain [[23]]...: 1*it(23)+0
  with precondition: [B=4] 

* Chain [[23],24]: 1*it(23)+0
  with precondition: [B=4] 

* Chain [24]: 0
  with precondition: [B=4] 


#### Cost of chains of eval_makedent_bb24_in(V__cbench_print,B):
* Chain [26]: 1*aux(4)+0
  with precondition: [] 

* Chain [25]...: 1*s(5)+1
  with precondition: [] 


#### Cost of chains of eval_makedent_71(V__cbench_print,B):
* Chain [28]: 1*s(6)+0
  with precondition: [] 

* Chain [27]...: 1*s(7)+1
  with precondition: [] 


#### Cost of chains of eval_makedent_64(V__cbench_print,B):
* Chain [30]: 1*aux(5)+0
  with precondition: [] 

* Chain [29]...: 1*s(9)+1
  with precondition: [] 


#### Cost of chains of eval_makedent_54(V__cbench_print,V_70,B):
* Chain [32]: 1*aux(6)+0
  with precondition: [] 

* Chain [31]...: 1*s(11)+1
  with precondition: [] 


#### Cost of chains of eval_makedent_bb13_in(V__cbench_print,B):
* Chain [33]: 0
  with precondition: [] 


#### Cost of chains of loop_cont_eval_makedent_bb9_in(C,A,B):
* Chain [36]...: 1*s(12)+1
  with precondition: [C=3] 

* Chain [35]: 0
  with precondition: [C=2] 

* Chain [34]: 1*s(13)+0
  with precondition: [C=3] 


#### Cost of chains of eval_makedent_28(V__cbench_print,B):
* Chain [38]: 1*aux(7)+0
  with precondition: [] 

* Chain [37]...: 1*aux(8)+0
  with precondition: [] 


#### Cost of chains of eval_makedent_26(V_lbuflen,V__cbench_print,B):
* Chain [40]: 1*aux(9)+0
  with precondition: [] 

* Chain [39]...: 1*s(21)+0
  with precondition: [] 


#### Cost of chains of eval_makedent_22(V_lbuflen,V__cbench_print,B):
* Chain [42]: 1*s(22)+0
  with precondition: [] 

* Chain [41]...: 1*s(23)+0
  with precondition: [] 


#### Cost of chains of eval_makedent_1(V_lbuflen,V__cbench_print,B):
* Chain [44]: 1*s(24)+0
  with precondition: [] 

* Chain [43]...: 1*s(25)+0
  with precondition: [] 


#### Cost of chains of eval_makedent_start(V_lbuflen,V__cbench_print,B):
* Chain [46]: 1*s(26)+0
  with precondition: [] 

* Chain [45]...: 1*s(27)+0
  with precondition: [] 


Closed-form bounds of eval_makedent_start(V_lbuflen,V__cbench_print,B): 
-------------------------------------
* Chain [46] with precondition: [] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [45]... with precondition: [] 
    - Upper bound: inf 
    - Complexity: infinity 

### Maximum cost of eval_makedent_start(V_lbuflen,V__cbench_print,B): inf 
Asymptotic class: infinity 

Time statistics: 
-------------------------------------
* Partial evaluation computed in 21 ms.
* Invariants computed in 12 ms.
   - Backward Invariants 7 ms.
   - Transitive Invariants 2 ms.
* Refinement performed in 23 ms.
* Termination proved in 2 ms.
* Upper bounds computed in 18 ms.
   - Equation cost structures 11 ms.
   - Phase cost structures 2 ms.
   - Chain cost structures 3 ms.
   - Solving cost expressions 1 ms.
* Total analysis performed in 103 ms.


Warning: Ignored call to eval_mpi2reg_stop/1 in equation eval_mpi2reg_bb5_in/1 

Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. recursive  : [eval_mpi2reg_bb2_in/5]
1. non_recursive  : [eval_mpi2reg_bb5_in/1]
2. non_recursive  : [eval_mpi2reg_40/1]
3. non_recursive  : [eval_mpi2reg_39/2]
4. non_recursive  : [eval_mpi2reg_38/3]
5. non_recursive  : [eval_mpi2reg_34/2]
6. non_recursive  : [eval_mpi2reg_33/3]
7. non_recursive  : [loop_cont_eval_mpi2reg_bb2_in/4]
8. non_recursive  : [eval_mpi2reg_21/3]
9. non_recursive  : [eval_mpi2reg_20/4]
10. non_recursive  : [eval_mpi2reg_1/2]
11. non_recursive  : [eval_mpi2reg_0/2]
12. non_recursive  : [eval_mpi2reg_bb0_in/2]
13. non_recursive  : [eval_mpi2reg_start/2]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into eval_mpi2reg_bb2_in/5
1. SCC is completely evaluated into other SCCs
2. SCC is completely evaluated into other SCCs
3. SCC is completely evaluated into other SCCs
4. SCC is completely evaluated into other SCCs
5. SCC is completely evaluated into other SCCs
6. SCC is completely evaluated into other SCCs
7. SCC is completely evaluated into other SCCs
8. SCC is partially evaluated into eval_mpi2reg_21/3
9. SCC is completely evaluated into other SCCs
10. SCC is partially evaluated into eval_mpi2reg_1/2
11. SCC is completely evaluated into other SCCs
12. SCC is completely evaluated into other SCCs
13. SCC is partially evaluated into eval_mpi2reg_start/2

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations eval_mpi2reg_bb2_in/5 
* CE 8 is refined into CE [9] 
* CE 7 is refined into CE [10] 
* CE 6 is refined into CE [11] 


#### Refined cost equations eval_mpi2reg_bb2_in/5 
* CE 9: eval_mpi2reg_bb2_in(A,B,C,A,D) = 0
     [C=2,B=0] 
* CE 10: eval_mpi2reg_bb2_in(V__global_precision,V_bytecount_0,B,C,D) = 1+ eval_mpi2reg_bb2_in(V__global_precision,E,F,C,D)
     [V_bytecount_0>=1,V_bytecount_0=E+1,F=2,B=2] 
* CE 11: eval_mpi2reg_bb2_in(V__global_precision,V_bytecount_0,B,C,D) = 1+ eval_mpi2reg_bb2_in(V__global_precision,E,F,C,D)
     [0>=V_bytecount_0+1,V_bytecount_0=E+1,F=2,B=2] 

### Cost equations --> "Loop" of eval_mpi2reg_bb2_in/5 
* CEs [10] --> Loop 7 
* CEs [11] --> Loop 8 
* CEs [9] --> Loop 9 

#### Loops of eval_mpi2reg_bb2_in/5 
* Loop 7: eval_mpi2reg_bb2_in(V__global_precision,V_bytecount_0,B,C,D)->  eval_mpi2reg_bb2_in(V__global_precision,V_bytecount_0',B',C,D)
                  [V_bytecount_0>=1,V_bytecount_0=V_bytecount_0'+1,B'=2,B=2] 
* Loop 8: eval_mpi2reg_bb2_in(V__global_precision,V_bytecount_0,B,C,D)->  eval_mpi2reg_bb2_in(V__global_precision,V_bytecount_0',B',C,D)
                  [0>=V_bytecount_0+1,V_bytecount_0=V_bytecount_0'+1,B'=2,B=2] 
* Loop 9: eval_mpi2reg_bb2_in(A,B,C,A,D) [C=2,B=0] 

### Ranking functions of CR eval_mpi2reg_bb2_in(V__global_precision,V_bytecount_0,B,C,D) 
* RF of phase [7]: [V_bytecount_0]

#### Partial ranking functions of CR eval_mpi2reg_bb2_in(V__global_precision,V_bytecount_0,B,C,D) 
* Partial RF of phase [7]:
  - RF of loop [7:1]:
    V_bytecount_0


### Resulting Chains:eval_mpi2reg_bb2_in(V__global_precision,V_bytecount_0,B,C,D) 
* [[8]]...
* [[7],9]
* [9]


### Merging Chains  eval_mpi2reg_bb2_in/5 into  External patterns of execution 
* [[9]] --> 1 
* [[9,[7]]] --> 2 
* [[[8]]] --> 3 


### Specialization of cost equations eval_mpi2reg_21/3 
* CE 5 is refined into CE [12,13,14] 


#### Refined cost equations eval_mpi2reg_21/3 
* CE 12: eval_mpi2reg_21(V__global_precision,V_5,B) = 1+ eval_mpi2reg_bb2_in(V__global_precision,C,D,V__global_precision,E):1
     [D=2,C=0,V_5=0] 
* CE 13: eval_mpi2reg_21(V__global_precision,V_5,B) = 1+ eval_mpi2reg_bb2_in(V__global_precision,V_5,C,V__global_precision,D):2
     [V_5>=1,C=2] 
* CE 14: eval_mpi2reg_21(V__global_precision,V_5,B) = 1+ eval_mpi2reg_bb2_in(V__global_precision,V_5,C,D,E):3
     [0>=V_5+1,C=2] 

### Cost equations --> "Loop" of eval_mpi2reg_21/3 
* CEs [14] --> Loop 10 
* CEs [13] --> Loop 11 
* CEs [12] --> Loop 12 

#### Loops of eval_mpi2reg_21/3 
* Loop 10: eval_mpi2reg_21(V__global_precision,V_5,B) [0>=V_5+1] 
* Loop 11: eval_mpi2reg_21(V__global_precision,V_5,B) [V_5>=1] 
* Loop 12: eval_mpi2reg_21(V__global_precision,V_5,B) [V_5=0] 

### Ranking functions of CR eval_mpi2reg_21(V__global_precision,V_5,B) 

#### Partial ranking functions of CR eval_mpi2reg_21(V__global_precision,V_5,B) 


### Resulting Chains:eval_mpi2reg_21(V__global_precision,V_5,B) 
* [12]
* [11]
* [10]...


### Merging Chains  eval_mpi2reg_21/3 into  External patterns of execution 
* [[12]] --> 1 
* [[11]] --> 2 
* [[10]] --> 3 


### Specialization of cost equations eval_mpi2reg_1/2 
* CE 3 is refined into CE [15] 
* CE 4 is refined into CE [16,17,18] 


#### Refined cost equations eval_mpi2reg_1/2 
* CE 15: eval_mpi2reg_1(V__global_precision,B) = 0
     [] 
* CE 16: eval_mpi2reg_1(V__global_precision,B) = 0+ eval_mpi2reg_21(V__global_precision,C,B):1
     [C=0] 
* CE 17: eval_mpi2reg_1(V__global_precision,B) = 0+ eval_mpi2reg_21(V__global_precision,C,B):2
     [C>=1] 
* CE 18: eval_mpi2reg_1(V__global_precision,B) = 0+ eval_mpi2reg_21(V__global_precision,C,B):3
     [0>=C+1] 

### Cost equations --> "Loop" of eval_mpi2reg_1/2 
* CEs [18] --> Loop 13 
* CEs [15,16,17] --> Loop 14 

#### Loops of eval_mpi2reg_1/2 
* Loop 13: eval_mpi2reg_1(V__global_precision,B) [] 
* Loop 14: eval_mpi2reg_1(V__global_precision,B) [] 

### Ranking functions of CR eval_mpi2reg_1(V__global_precision,B) 

#### Partial ranking functions of CR eval_mpi2reg_1(V__global_precision,B) 


### Resulting Chains:eval_mpi2reg_1(V__global_precision,B) 
* [14]
* [13]...


### Merging Chains  eval_mpi2reg_1/2 into  External patterns of execution 
* [[14]] --> 1 
* [[13]] --> 2 


### Specialization of cost equations eval_mpi2reg_start/2 
* CE 2 is refined into CE [19,20] 


#### Refined cost equations eval_mpi2reg_start/2 
* CE 19: eval_mpi2reg_start(V__global_precision,B) = 0+ eval_mpi2reg_1(V__global_precision,B):1
     [] 
* CE 20: eval_mpi2reg_start(V__global_precision,B) = 0+ eval_mpi2reg_1(V__global_precision,B):2
     [] 

### Cost equations --> "Loop" of eval_mpi2reg_start/2 
* CEs [20] --> Loop 15 
* CEs [19] --> Loop 16 

#### Loops of eval_mpi2reg_start/2 
* Loop 15: eval_mpi2reg_start(V__global_precision,B) [] 
* Loop 16: eval_mpi2reg_start(V__global_precision,B) [] 

### Ranking functions of CR eval_mpi2reg_start(V__global_precision,B) 

#### Partial ranking functions of CR eval_mpi2reg_start(V__global_precision,B) 


### Resulting Chains:eval_mpi2reg_start(V__global_precision,B) 
* [16]
* [15]...


### Merging Chains  eval_mpi2reg_start/2 into  External patterns of execution 
* [[16]] --> 1 
* [[15]] --> 2 


Computing Bounds
=====================================

#### Cost of loops [8] 

 * loop 8:eval_mpi2reg_bb2_in(V__global_precision,V_bytecount_0,B,C,D) -> [eval_mpi2reg_bb2_in(V__global_precision',V_bytecount_0',B',C',D')] 
1
#### Cost of phase [8]:eval_mpi2reg_bb2_in(V__global_precision,V_bytecount_0,B,C,D) -> [eval_mpi2reg_bb2_in(V__global_precision',V_bytecount_0',B',C',D')] 
1*it(8)+0
#### Cost of loops [7] 

 * loop 7:eval_mpi2reg_bb2_in(V__global_precision,V_bytecount_0,B,C,D) -> [eval_mpi2reg_bb2_in(V__global_precision',V_bytecount_0',B',C',D')] 
1
#### Cost of phase [7]:eval_mpi2reg_bb2_in(V__global_precision,V_bytecount_0,B,C,D) -> [eval_mpi2reg_bb2_in(V__global_precision',V_bytecount_0',B',C',D')] 
1*it(7)+0
  Such that:it(7) =< V_bytecount_0
it(7) =< V_bytecount_0-V_bytecount_0'

#### Cost of chains of eval_mpi2reg_bb2_in(V__global_precision,V_bytecount_0,B,C,D):
* Chain [[8]]...: 1*it(8)+0
  with precondition: [0>=V_bytecount_0+1,B=2] 

* Chain [[7],9]: 1*it(7)+0
  Such that:it(7) =< V_bytecount_0

  with precondition: [B=2,V__global_precision=C,V_bytecount_0>=1] 

* Chain [9]: 0
  with precondition: [V_bytecount_0=0,B=2,C=V__global_precision] 


#### Cost of chains of eval_mpi2reg_21(V__global_precision,V_5,B):
* Chain [12]: 1
  with precondition: [V_5=0] 

* Chain [11]: 1*s(1)+1
  Such that:s(1) =< V_5

  with precondition: [V_5>=1] 

* Chain [10]...: 1*s(2)+1
  with precondition: [0>=V_5+1] 


#### Cost of chains of eval_mpi2reg_1(V__global_precision,B):
* Chain [14]: 1*aux(1)+0
  with precondition: [] 

* Chain [13]...: 1*s(4)+1
  with precondition: [] 


#### Cost of chains of eval_mpi2reg_start(V__global_precision,B):
* Chain [16]: 1*s(5)+0
  with precondition: [] 

* Chain [15]...: 1*s(6)+1
  with precondition: [] 


Closed-form bounds of eval_mpi2reg_start(V__global_precision,B): 
-------------------------------------
* Chain [16] with precondition: [] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [15]... with precondition: [] 
    - Upper bound: inf 
    - Complexity: infinity 

### Maximum cost of eval_mpi2reg_start(V__global_precision,B): inf 
Asymptotic class: infinity 

Time statistics: 
-------------------------------------
* Partial evaluation computed in 9 ms.
* Invariants computed in 10 ms.
   - Backward Invariants 4 ms.
   - Transitive Invariants 3 ms.
* Refinement performed in 20 ms.
* Termination proved in 3 ms.
* Upper bounds computed in 13 ms.
   - Equation cost structures 5 ms.
   - Phase cost structures 5 ms.
   - Chain cost structures 4 ms.
   - Solving cost expressions 0 ms.
* Total analysis performed in 68 ms.


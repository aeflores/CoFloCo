Warning: Ignored call to eval_zwritehexstring_at_stop/1 in equation eval_zwritehexstring_at_bb16_in/1 

Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. non_recursive  : [eval_zwritehexstring_at_bb16_in/1]
1. non_recursive  : [eval_zwritehexstring_at_78/1]
2. non_recursive  : [eval_zwritehexstring_at_77/1]
3. non_recursive  : [eval_zwritehexstring_at_73/1]
4. non_recursive  : [eval_zwritehexstring_at_72/1]
5. recursive  : [eval_zwritehexstring_at_bb7_in/5]
6. recursive  : [eval_zwritehexstring_at_42/4,eval_zwritehexstring_at_43/5,eval_zwritehexstring_at_bb5_in/3,loop_cont_eval_zwritehexstring_at_bb7_in/5]
7. non_recursive  : [eval_zwritehexstring_at_64/1]
8. non_recursive  : [eval_zwritehexstring_at_63/2]
9. non_recursive  : [eval_zwritehexstring_at_NewDefault_in/1]
10. non_recursive  : [loop_cont_eval_zwritehexstring_at_bb5_in/3]
11. non_recursive  : [eval_zwritehexstring_at_bb3_in/1]
12. non_recursive  : [eval_zwritehexstring_at_10/1]
13. non_recursive  : [eval_zwritehexstring_at_9/1]
14. non_recursive  : [eval_zwritehexstring_at_bb0_in/1]
15. non_recursive  : [eval_zwritehexstring_at_start/2]

#### Obtained direct recursion through partial evaluation 
0. SCC is completely evaluated into other SCCs
1. SCC is completely evaluated into other SCCs
2. SCC is completely evaluated into other SCCs
3. SCC is completely evaluated into other SCCs
4. SCC is completely evaluated into other SCCs
5. SCC is partially evaluated into eval_zwritehexstring_at_bb7_in/5
6. SCC is partially evaluated into eval_zwritehexstring_at_bb5_in/3
7. SCC is completely evaluated into other SCCs
8. SCC is completely evaluated into other SCCs
9. SCC is completely evaluated into other SCCs
10. SCC is partially evaluated into loop_cont_eval_zwritehexstring_at_bb5_in/3
11. SCC is partially evaluated into eval_zwritehexstring_at_bb3_in/1
12. SCC is partially evaluated into eval_zwritehexstring_at_10/1
13. SCC is completely evaluated into other SCCs
14. SCC is partially evaluated into eval_zwritehexstring_at_bb0_in/1
15. SCC is partially evaluated into eval_zwritehexstring_at_start/2

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations eval_zwritehexstring_at_bb7_in/5 
* CE 27 is refined into CE [28] 
* CE 26 is refined into CE [29] 


#### Refined cost equations eval_zwritehexstring_at_bb7_in/5 
* CE 28: eval_zwritehexstring_at_bb7_in(A,B,C,A,B) = 0
     [C=2] 
* CE 29: eval_zwritehexstring_at_bb7_in(V_len_0,V_len_0_,B,C,D) = 1+ eval_zwritehexstring_at_bb7_in(V_len_0,V_len_0_,E,C,D)
     [E=2,B=2] 

### Cost equations --> "Loop" of eval_zwritehexstring_at_bb7_in/5 
* CEs [29] --> Loop 17 
* CEs [28] --> Loop 18 

#### Loops of eval_zwritehexstring_at_bb7_in/5 
* Loop 17: eval_zwritehexstring_at_bb7_in(V_len_0,V_len_0_,B,C,D)->  eval_zwritehexstring_at_bb7_in(V_len_0,V_len_0_,B',C,D)
                  [B'=2,B=2] 
* Loop 18: eval_zwritehexstring_at_bb7_in(A,B,C,A,B) [C=2] 

### Ranking functions of CR eval_zwritehexstring_at_bb7_in(V_len_0,V_len_0_,B,C,D) 

#### Partial ranking functions of CR eval_zwritehexstring_at_bb7_in(V_len_0,V_len_0_,B,C,D) 


### Resulting Chains:eval_zwritehexstring_at_bb7_in(V_len_0,V_len_0_,B,C,D) 
* [[17]]...
* [[17],18]
* [18]


### Merging Chains  eval_zwritehexstring_at_bb7_in/5 into  External patterns of execution 
* [[18],[18,[17]]] --> 1 
* [[[17]]] --> 2 


### Specialization of cost equations eval_zwritehexstring_at_bb5_in/3 
* CE 14 is refined into CE [30,31] 
* CE 16 is refined into CE [32,33] 
* CE 15 is refined into CE [34,35] 
* CE 17 is refined into CE [36,37] 
* CE 18 is refined into CE [38,39] 
* CE 20 is refined into CE [40,41] 
* CE 19 is refined into CE [42,43] 
* CE 21 is refined into CE [44,45] 
* CE 22 is refined into CE [46] 
* CE 10 is refined into CE [47,48] 
* CE 12 is refined into CE [49,50] 
* CE 11 is refined into CE [51,52] 
* CE 13 is refined into CE [53,54] 


#### Refined cost equations eval_zwritehexstring_at_bb5_in/3 
* CE 30: eval_zwritehexstring_at_bb5_in(V_len_0,B,C) = 1+ eval_zwritehexstring_at_bb7_in(V_len_0,D,E,V_len_0,F):1
     [V_len_0>=1,F=64,E=2,D=64,B=4] 
* CE 31: eval_zwritehexstring_at_bb5_in(V_len_0,B,C) = 1+ eval_zwritehexstring_at_bb7_in(V_len_0,D,E,F,G):2
     [V_len_0>=1,E=2,D=64,B=4] 
* CE 32: eval_zwritehexstring_at_bb5_in(V_len_0,B,C) = 1+ eval_zwritehexstring_at_bb7_in(V_len_0,V_len_0,D,V_len_0,V_len_0):1
     [V_len_0>=1,D=2,B=4] 
* CE 33: eval_zwritehexstring_at_bb5_in(V_len_0,B,C) = 1+ eval_zwritehexstring_at_bb7_in(V_len_0,V_len_0,D,E,F):2
     [V_len_0>=1,D=2,B=4] 
* CE 34: eval_zwritehexstring_at_bb5_in(V_len_0,B,C) = 1+ eval_zwritehexstring_at_bb7_in(V_len_0,D,E,V_len_0,F):1
     [0>=V_len_0+1,F=64,E=2,D=64,B=4] 
* CE 35: eval_zwritehexstring_at_bb5_in(V_len_0,B,C) = 1+ eval_zwritehexstring_at_bb7_in(V_len_0,D,E,F,G):2
     [0>=V_len_0+1,E=2,D=64,B=4] 
* CE 36: eval_zwritehexstring_at_bb5_in(V_len_0,B,C) = 1+ eval_zwritehexstring_at_bb7_in(V_len_0,V_len_0,D,V_len_0,V_len_0):1
     [0>=V_len_0+1,D=2,B=4] 
* CE 37: eval_zwritehexstring_at_bb5_in(V_len_0,B,C) = 1+ eval_zwritehexstring_at_bb7_in(V_len_0,V_len_0,D,E,F):2
     [0>=V_len_0+1,D=2,B=4] 
* CE 38: eval_zwritehexstring_at_bb5_in(V_len_0,B,C) = 1+ eval_zwritehexstring_at_bb7_in(V_len_0,D,E,V_len_0,F):1
     [V_len_0>=1,F=64,E=2,D=64,B=3] 
* CE 39: eval_zwritehexstring_at_bb5_in(V_len_0,B,C) = 1+ eval_zwritehexstring_at_bb7_in(V_len_0,D,E,F,G):2
     [V_len_0>=1,E=2,D=64,B=3] 
* CE 40: eval_zwritehexstring_at_bb5_in(V_len_0,B,C) = 1+ eval_zwritehexstring_at_bb7_in(V_len_0,V_len_0,D,V_len_0,V_len_0):1
     [V_len_0>=1,D=2,B=3] 
* CE 41: eval_zwritehexstring_at_bb5_in(V_len_0,B,C) = 1+ eval_zwritehexstring_at_bb7_in(V_len_0,V_len_0,D,E,F):2
     [V_len_0>=1,D=2,B=3] 
* CE 42: eval_zwritehexstring_at_bb5_in(V_len_0,B,C) = 1+ eval_zwritehexstring_at_bb7_in(V_len_0,D,E,V_len_0,F):1
     [0>=V_len_0+1,F=64,E=2,D=64,B=3] 
* CE 43: eval_zwritehexstring_at_bb5_in(V_len_0,B,C) = 1+ eval_zwritehexstring_at_bb7_in(V_len_0,D,E,F,G):2
     [0>=V_len_0+1,E=2,D=64,B=3] 
* CE 44: eval_zwritehexstring_at_bb5_in(V_len_0,B,C) = 1+ eval_zwritehexstring_at_bb7_in(V_len_0,V_len_0,D,V_len_0,V_len_0):1
     [0>=V_len_0+1,D=2,B=3] 
* CE 45: eval_zwritehexstring_at_bb5_in(V_len_0,B,C) = 1+ eval_zwritehexstring_at_bb7_in(V_len_0,V_len_0,D,E,F):2
     [0>=V_len_0+1,D=2,B=3] 
* CE 46: eval_zwritehexstring_at_bb5_in(V_len_0,B,C) = 0
     [B=5,V_len_0=0] 
* CE 47: eval_zwritehexstring_at_bb5_in(V_len_0,B,C) = 2+ eval_zwritehexstring_at_bb7_in(V_len_0,D,E,V_len_0,F):1+ eval_zwritehexstring_at_bb5_in(G,B,C)
     [V_len_0>=1,V_len_0=G+64,F=64,E=2,D=64] 
* CE 48: eval_zwritehexstring_at_bb5_in(V_len_0,B,C) = 2+ eval_zwritehexstring_at_bb7_in(V_len_0,D,E,F,G):2
     [V_len_0>=1,G+H=F,E=2,D=64] 
* CE 49: eval_zwritehexstring_at_bb5_in(V_len_0,B,C) = 2+ eval_zwritehexstring_at_bb7_in(V_len_0,V_len_0,D,V_len_0,V_len_0):1+ eval_zwritehexstring_at_bb5_in(E,B,C)
     [V_len_0>=1,E=0,D=2] 
* CE 50: eval_zwritehexstring_at_bb5_in(V_len_0,B,C) = 2+ eval_zwritehexstring_at_bb7_in(V_len_0,V_len_0,D,E,F):2
     [V_len_0>=1,F+G=E,D=2] 
* CE 51: eval_zwritehexstring_at_bb5_in(V_len_0,B,C) = 2+ eval_zwritehexstring_at_bb7_in(V_len_0,D,E,V_len_0,F):1+ eval_zwritehexstring_at_bb5_in(G,B,C)
     [0>=V_len_0+1,V_len_0=G+64,F=64,E=2,D=64] 
* CE 52: eval_zwritehexstring_at_bb5_in(V_len_0,B,C) = 2+ eval_zwritehexstring_at_bb7_in(V_len_0,D,E,F,G):2
     [0>=V_len_0+1,G+H=F,E=2,D=64] 
* CE 53: eval_zwritehexstring_at_bb5_in(V_len_0,B,C) = 2+ eval_zwritehexstring_at_bb7_in(V_len_0,V_len_0,D,V_len_0,V_len_0):1+ eval_zwritehexstring_at_bb5_in(E,B,C)
     [0>=V_len_0+1,E=0,D=2] 
* CE 54: eval_zwritehexstring_at_bb5_in(V_len_0,B,C) = 2+ eval_zwritehexstring_at_bb7_in(V_len_0,V_len_0,D,E,F):2
     [0>=V_len_0+1,F+G=E,D=2] 

### Cost equations --> "Loop" of eval_zwritehexstring_at_bb5_in/3 
* CEs [31,33] --> Loop 19 
* CEs [35,37] --> Loop 20 
* CEs [39,41,48,50] --> Loop 21 
* CEs [43,45,52,54] --> Loop 22 
* CEs [47] --> Loop 23 
* CEs [51] --> Loop 24 
* CEs [49] --> Loop 25 
* CEs [53] --> Loop 26 
* CEs [30,32] --> Loop 27 
* CEs [34,36] --> Loop 28 
* CEs [38,40] --> Loop 29 
* CEs [42,44] --> Loop 30 
* CEs [46] --> Loop 31 

#### Loops of eval_zwritehexstring_at_bb5_in/3 
* Loop 19: eval_zwritehexstring_at_bb5_in(V_len_0,B,C) [V_len_0>=1,B=4] 
* Loop 20: eval_zwritehexstring_at_bb5_in(V_len_0,B,C) [0>=V_len_0+1,B=4] 
* Loop 21: eval_zwritehexstring_at_bb5_in(V_len_0,B,C) [V_len_0>=1] 
* Loop 22: eval_zwritehexstring_at_bb5_in(V_len_0,B,C) [0>=V_len_0+1] 
* Loop 23: eval_zwritehexstring_at_bb5_in(V_len_0,B,C)->  eval_zwritehexstring_at_bb5_in(V_len_0',B,C)
                  [V_len_0>=1,V_len_0=V_len_0'+64] 
* Loop 24: eval_zwritehexstring_at_bb5_in(V_len_0,B,C)->  eval_zwritehexstring_at_bb5_in(V_len_0',B,C)
                  [0>=V_len_0+1,V_len_0=V_len_0'+64] 
* Loop 25: eval_zwritehexstring_at_bb5_in(V_len_0,B,C)->  eval_zwritehexstring_at_bb5_in(V_len_0',B,C)
                  [V_len_0>=1,V_len_0'=0] 
* Loop 26: eval_zwritehexstring_at_bb5_in(V_len_0,B,C)->  eval_zwritehexstring_at_bb5_in(V_len_0',B,C)
                  [0>=V_len_0+1,V_len_0'=0] 
* Loop 27: eval_zwritehexstring_at_bb5_in(V_len_0,B,C) [V_len_0>=1,B=4] 
* Loop 28: eval_zwritehexstring_at_bb5_in(V_len_0,B,C) [0>=V_len_0+1,B=4] 
* Loop 29: eval_zwritehexstring_at_bb5_in(V_len_0,B,C) [V_len_0>=1,B=3] 
* Loop 30: eval_zwritehexstring_at_bb5_in(V_len_0,B,C) [0>=V_len_0+1,B=3] 
* Loop 31: eval_zwritehexstring_at_bb5_in(V_len_0,B,C) [B=5,V_len_0=0] 

### Ranking functions of CR eval_zwritehexstring_at_bb5_in(V_len_0,B,C) 
* RF of phase [23]: [V_len_0/64]

#### Partial ranking functions of CR eval_zwritehexstring_at_bb5_in(V_len_0,B,C) 
* Partial RF of phase [23]:
  - RF of loop [23:1]:
    V_len_0/64


### Resulting Chains:eval_zwritehexstring_at_bb5_in(V_len_0,B,C) 
* [[24]]...
* [[24],30]
* [[24],28]
* [[24],26,31]
* [[24],22]...
* [[24],20]...
* [[23],[24]]...
* [[23],[24],30]
* [[23],[24],28]
* [[23],[24],26,31]
* [[23],[24],22]...
* [[23],[24],20]...
* [[23],31]
* [[23],30]
* [[23],29]
* [[23],28]
* [[23],27]
* [[23],26,31]
* [[23],25,31]
* [[23],22]...
* [[23],21]...
* [[23],20]...
* [[23],19]...
* [31]
* [30]
* [29]
* [28]
* [27]
* [26,31]
* [25,31]
* [22]...
* [21]...
* [20]...
* [19]...


### Merging Chains  eval_zwritehexstring_at_bb5_in/3 into  External patterns of execution 
* [[31]] --> 1 
* [[30],[30,[24]]] --> 2 
* [[29],[29,[23]],[30,[23]],[30,[24],[23]]] --> 3 
* [[28],[28,[24]]] --> 4 
* [[27],[27,[23]],[28,[23]],[28,[24],[23]]] --> 5 
* [[31,26],[31,26,[24]]] --> 6 
* [[31,25],[31,25,[23]],[31,26,[23]],[31,[23]],[31,26,[24],[23]]] --> 7 
* [[20],[20,[24]]] --> 8 
* [[19],[20,[23]],[20,[24],[23]]] --> 9 
* [[19,[23]]] --> 10 
* [[22],[[24]],[22,[24]]] --> 11 
* [[21],[22,[23]],[[24],[23]],[22,[24],[23]]] --> 12 
* [[21,[23]]] --> 13 


### Specialization of cost equations loop_cont_eval_zwritehexstring_at_bb5_in/3 
* CE 25 is refined into CE [55] 
* CE 24 is refined into CE [56] 
* CE 23 is refined into CE [57] 


#### Refined cost equations loop_cont_eval_zwritehexstring_at_bb5_in/3 
* CE 55: loop_cont_eval_zwritehexstring_at_bb5_in(C,A,B) = 0
     [C=5] 
* CE 56: loop_cont_eval_zwritehexstring_at_bb5_in(C,A,B) = 0
     [C=4] 
* CE 57: loop_cont_eval_zwritehexstring_at_bb5_in(C,A,B) = 0
     [C=3] 

### Cost equations --> "Loop" of loop_cont_eval_zwritehexstring_at_bb5_in/3 
* CEs [55] --> Loop 32 
* CEs [56] --> Loop 33 
* CEs [57] --> Loop 34 

#### Loops of loop_cont_eval_zwritehexstring_at_bb5_in/3 
* Loop 32: loop_cont_eval_zwritehexstring_at_bb5_in(C,A,B) [C=5] 
* Loop 33: loop_cont_eval_zwritehexstring_at_bb5_in(C,A,B) [C=4] 
* Loop 34: loop_cont_eval_zwritehexstring_at_bb5_in(C,A,B) [C=3] 

### Ranking functions of CR loop_cont_eval_zwritehexstring_at_bb5_in(C,A,B) 

#### Partial ranking functions of CR loop_cont_eval_zwritehexstring_at_bb5_in(C,A,B) 


### Resulting Chains:loop_cont_eval_zwritehexstring_at_bb5_in(C,A,B) 
* [34]
* [33]
* [32]


### Merging Chains  loop_cont_eval_zwritehexstring_at_bb5_in/3 into  External patterns of execution 
* [[34]] --> 1 
* [[33]] --> 2 
* [[32]] --> 3 


### Specialization of cost equations eval_zwritehexstring_at_bb3_in/1 
* CE 8 is refined into CE [58,59,60,61,62,63,64,65,66,67,68,69,70] 
* CE 9 is refined into CE [71] 


#### Refined cost equations eval_zwritehexstring_at_bb3_in/1 
* CE 58: eval_zwritehexstring_at_bb3_in(B) = 1+ eval_zwritehexstring_at_bb5_in(C,D,E):1+ loop_cont_eval_zwritehexstring_at_bb5_in(F,E,B):3
     [F=5,D=5,C=0] 
* CE 59: eval_zwritehexstring_at_bb3_in(B) = 1+ eval_zwritehexstring_at_bb5_in(C,D,E):2+ loop_cont_eval_zwritehexstring_at_bb5_in(F,E,B):1
     [0>=C+1,F=3,D=3] 
* CE 60: eval_zwritehexstring_at_bb3_in(B) = 1+ eval_zwritehexstring_at_bb5_in(C,D,E):3+ loop_cont_eval_zwritehexstring_at_bb5_in(F,E,B):1
     [C>=1,F=3,D=3] 
* CE 61: eval_zwritehexstring_at_bb3_in(B) = 1+ eval_zwritehexstring_at_bb5_in(C,D,E):4+ loop_cont_eval_zwritehexstring_at_bb5_in(F,E,B):2
     [0>=C+1,F=4,D=4] 
* CE 62: eval_zwritehexstring_at_bb3_in(B) = 1+ eval_zwritehexstring_at_bb5_in(C,D,E):5+ loop_cont_eval_zwritehexstring_at_bb5_in(F,E,B):2
     [C>=1,F=4,D=4] 
* CE 63: eval_zwritehexstring_at_bb3_in(B) = 1+ eval_zwritehexstring_at_bb5_in(C,D,E):6+ loop_cont_eval_zwritehexstring_at_bb5_in(F,E,B):3
     [0>=C+1,F=5,D=5] 
* CE 64: eval_zwritehexstring_at_bb3_in(B) = 1+ eval_zwritehexstring_at_bb5_in(C,D,E):7+ loop_cont_eval_zwritehexstring_at_bb5_in(F,E,B):3
     [C>=1,F=5,D=5] 
* CE 65: eval_zwritehexstring_at_bb3_in(B) = 1+ eval_zwritehexstring_at_bb5_in(C,D,E):8
     [0>=C+1,F=4,D=4] 
* CE 66: eval_zwritehexstring_at_bb3_in(B) = 1+ eval_zwritehexstring_at_bb5_in(C,D,E):9
     [C>=1,F=4,D=4] 
* CE 67: eval_zwritehexstring_at_bb3_in(B) = 1+ eval_zwritehexstring_at_bb5_in(C,D,E):10
     [C>=65,F=4,D=4] 
* CE 68: eval_zwritehexstring_at_bb3_in(B) = 1+ eval_zwritehexstring_at_bb5_in(C,D,E):11
     [0>=C+1] 
* CE 69: eval_zwritehexstring_at_bb3_in(B) = 1+ eval_zwritehexstring_at_bb5_in(C,D,E):12
     [C>=1] 
* CE 70: eval_zwritehexstring_at_bb3_in(B) = 1+ eval_zwritehexstring_at_bb5_in(C,D,E):13
     [C>=65] 
* CE 71: eval_zwritehexstring_at_bb3_in(B) = 0
     [] 

### Cost equations --> "Loop" of eval_zwritehexstring_at_bb3_in/1 
* CEs [58,59,60,61,62,63,64,71] --> Loop 35 
* CEs [65,66,67,68,69,70] --> Loop 36 

#### Loops of eval_zwritehexstring_at_bb3_in/1 
* Loop 35: eval_zwritehexstring_at_bb3_in(B) [] 
* Loop 36: eval_zwritehexstring_at_bb3_in(B) [] 

### Ranking functions of CR eval_zwritehexstring_at_bb3_in(B) 

#### Partial ranking functions of CR eval_zwritehexstring_at_bb3_in(B) 


### Resulting Chains:eval_zwritehexstring_at_bb3_in(B) 
* [36]...
* [35]


### Merging Chains  eval_zwritehexstring_at_bb3_in/1 into  External patterns of execution 
* [[35]] --> 1 
* [[36]] --> 2 


### Specialization of cost equations eval_zwritehexstring_at_10/1 
* CE 6 is refined into CE [72] 
* CE 7 is refined into CE [73,74] 


#### Refined cost equations eval_zwritehexstring_at_10/1 
* CE 72: eval_zwritehexstring_at_10(B) = 0
     [] 
* CE 73: eval_zwritehexstring_at_10(B) = 0+ eval_zwritehexstring_at_bb3_in(B):1
     [] 
* CE 74: eval_zwritehexstring_at_10(B) = 0+ eval_zwritehexstring_at_bb3_in(B):2
     [] 

### Cost equations --> "Loop" of eval_zwritehexstring_at_10/1 
* CEs [74] --> Loop 37 
* CEs [72,73] --> Loop 38 

#### Loops of eval_zwritehexstring_at_10/1 
* Loop 37: eval_zwritehexstring_at_10(B) [] 
* Loop 38: eval_zwritehexstring_at_10(B) [] 

### Ranking functions of CR eval_zwritehexstring_at_10(B) 

#### Partial ranking functions of CR eval_zwritehexstring_at_10(B) 


### Resulting Chains:eval_zwritehexstring_at_10(B) 
* [38]
* [37]...


### Merging Chains  eval_zwritehexstring_at_10/1 into  External patterns of execution 
* [[38]] --> 1 
* [[37]] --> 2 


### Specialization of cost equations eval_zwritehexstring_at_bb0_in/1 
* CE 3 is refined into CE [75,76] 
* CE 4 is refined into CE [77,78] 
* CE 5 is refined into CE [79] 


#### Refined cost equations eval_zwritehexstring_at_bb0_in/1 
* CE 75: eval_zwritehexstring_at_bb0_in(B) = 0+ eval_zwritehexstring_at_10(B):1
     [] 
* CE 76: eval_zwritehexstring_at_bb0_in(B) = 0+ eval_zwritehexstring_at_10(B):2
     [] 
* CE 77: eval_zwritehexstring_at_bb0_in(B) = 0+ eval_zwritehexstring_at_bb3_in(B):1
     [] 
* CE 78: eval_zwritehexstring_at_bb0_in(B) = 0+ eval_zwritehexstring_at_bb3_in(B):2
     [] 
* CE 79: eval_zwritehexstring_at_bb0_in(B) = 0
     [] 

### Cost equations --> "Loop" of eval_zwritehexstring_at_bb0_in/1 
* CEs [75,77,79] --> Loop 39 
* CEs [76,78] --> Loop 40 

#### Loops of eval_zwritehexstring_at_bb0_in/1 
* Loop 39: eval_zwritehexstring_at_bb0_in(B) [] 
* Loop 40: eval_zwritehexstring_at_bb0_in(B) [] 

### Ranking functions of CR eval_zwritehexstring_at_bb0_in(B) 

#### Partial ranking functions of CR eval_zwritehexstring_at_bb0_in(B) 


### Resulting Chains:eval_zwritehexstring_at_bb0_in(B) 
* [40]...
* [39]


### Merging Chains  eval_zwritehexstring_at_bb0_in/1 into  External patterns of execution 
* [[39]] --> 1 
* [[40]] --> 2 


### Specialization of cost equations eval_zwritehexstring_at_start/2 
* CE 2 is refined into CE [80,81] 


#### Refined cost equations eval_zwritehexstring_at_start/2 
* CE 80: eval_zwritehexstring_at_start(V_odd,B) = 0+ eval_zwritehexstring_at_bb0_in(B):1
     [] 
* CE 81: eval_zwritehexstring_at_start(V_odd,B) = 0+ eval_zwritehexstring_at_bb0_in(B):2
     [] 

### Cost equations --> "Loop" of eval_zwritehexstring_at_start/2 
* CEs [81] --> Loop 41 
* CEs [80] --> Loop 42 

#### Loops of eval_zwritehexstring_at_start/2 
* Loop 41: eval_zwritehexstring_at_start(V_odd,B) [] 
* Loop 42: eval_zwritehexstring_at_start(V_odd,B) [] 

### Ranking functions of CR eval_zwritehexstring_at_start(V_odd,B) 

#### Partial ranking functions of CR eval_zwritehexstring_at_start(V_odd,B) 


### Resulting Chains:eval_zwritehexstring_at_start(V_odd,B) 
* [42]
* [41]...


### Merging Chains  eval_zwritehexstring_at_start/2 into  External patterns of execution 
* [[42]] --> 1 
* [[41]] --> 2 


Computing Bounds
=====================================

#### Cost of loops [17] 

 * loop 17:eval_zwritehexstring_at_bb7_in(V_len_0,V_len_0_,B,C,D) -> [eval_zwritehexstring_at_bb7_in(V_len_0',V_len_0_',B',C',D')] 
1
#### Cost of phase [17]:eval_zwritehexstring_at_bb7_in(V_len_0,V_len_0_,B,C,D) -> [eval_zwritehexstring_at_bb7_in(V_len_0',V_len_0_',B',C',D')] 
1*it(17)+0
#### Cost of phase [17]:eval_zwritehexstring_at_bb7_in(V_len_0,V_len_0_,B,C,D) -> [eval_zwritehexstring_at_bb7_in(V_len_0',V_len_0_',B',C',D')] 
1*it(17)+0
#### Cost of chains of eval_zwritehexstring_at_bb7_in(V_len_0,V_len_0_,B,C,D):
* Chain [[17]]...: 1*it(17)+0
  with precondition: [B=2] 

* Chain [[17],18]: 1*it(17)+0
  with precondition: [B=2,V_len_0=C,V_len_0_=D] 

* Chain [18]: 0
  with precondition: [B=2,C=V_len_0,D=V_len_0_] 


#### Cost of loops [24] 

 * loop 24:eval_zwritehexstring_at_bb5_in(V_len_0,B,C) -> [eval_zwritehexstring_at_bb5_in(V_len_0',B',C')] 
1*s(3)+2
#### Cost of phase [24]:eval_zwritehexstring_at_bb5_in(V_len_0,B,C) -> [eval_zwritehexstring_at_bb5_in(V_len_0',B',C')] 
3*it(24)+0
#### Cost of phase [24]:eval_zwritehexstring_at_bb5_in(V_len_0,B,C) -> [eval_zwritehexstring_at_bb5_in(V_len_0',B',C')] 
3*it(24)+0
#### Cost of phase [24]:eval_zwritehexstring_at_bb5_in(V_len_0,B,C) -> [eval_zwritehexstring_at_bb5_in(V_len_0',B',C')] 
3*it(24)+0
#### Cost of phase [24]:eval_zwritehexstring_at_bb5_in(V_len_0,B,C) -> [eval_zwritehexstring_at_bb5_in(V_len_0',B',C')] 
3*it(24)+0
#### Cost of phase [24]:eval_zwritehexstring_at_bb5_in(V_len_0,B,C) -> [eval_zwritehexstring_at_bb5_in(V_len_0',B',C')] 
3*it(24)+0
#### Cost of phase [24]:eval_zwritehexstring_at_bb5_in(V_len_0,B,C) -> [eval_zwritehexstring_at_bb5_in(V_len_0',B',C')] 
3*it(24)+0
#### Cost of loops [23] 

 * loop 23:eval_zwritehexstring_at_bb5_in(V_len_0,B,C) -> [eval_zwritehexstring_at_bb5_in(V_len_0',B',C')] 
1*s(17)+2
#### Cost of phase [23]:eval_zwritehexstring_at_bb5_in(V_len_0,B,C) -> [eval_zwritehexstring_at_bb5_in(V_len_0',B',C')] 
2*it(23)+1*s(18)+0
  Such that:it(23) =< V_len_0/64
it(23) =< V_len_0/64-V_len_0'/64

#### Cost of phase [23]:eval_zwritehexstring_at_bb5_in(V_len_0,B,C) -> [eval_zwritehexstring_at_bb5_in(V_len_0',B',C')] 
2*it(23)+1*s(18)+0
  Such that:it(23) =< V_len_0/64
it(23) =< V_len_0/64-V_len_0'/64

#### Cost of phase [23]:eval_zwritehexstring_at_bb5_in(V_len_0,B,C) -> [eval_zwritehexstring_at_bb5_in(V_len_0',B',C')] 
2*it(23)+1*s(18)+0
  Such that:it(23) =< V_len_0/64
it(23) =< V_len_0/64-V_len_0'/64

#### Cost of phase [23]:eval_zwritehexstring_at_bb5_in(V_len_0,B,C) -> [eval_zwritehexstring_at_bb5_in(V_len_0',B',C')] 
2*it(23)+1*s(18)+0
  Such that:it(23) =< V_len_0/64
it(23) =< V_len_0/64-V_len_0'/64

#### Cost of phase [23]:eval_zwritehexstring_at_bb5_in(V_len_0,B,C) -> [eval_zwritehexstring_at_bb5_in(V_len_0',B',C')] 
2*it(23)+1*s(18)+0
  Such that:it(23) =< V_len_0/64
it(23) =< V_len_0/64-V_len_0'/64

#### Cost of phase [23]:eval_zwritehexstring_at_bb5_in(V_len_0,B,C) -> [eval_zwritehexstring_at_bb5_in(V_len_0',B',C')] 
2*it(23)+1*s(18)+0
  Such that:it(23) =< V_len_0/64
it(23) =< V_len_0/64-V_len_0'/64

#### Cost of phase [23]:eval_zwritehexstring_at_bb5_in(V_len_0,B,C) -> [eval_zwritehexstring_at_bb5_in(V_len_0',B',C')] 
2*it(23)+1*s(18)+0
  Such that:it(23) =< V_len_0/64
it(23) =< V_len_0/64-V_len_0'/64

#### Cost of phase [23]:eval_zwritehexstring_at_bb5_in(V_len_0,B,C) -> [eval_zwritehexstring_at_bb5_in(V_len_0',B',C')] 
2*it(23)+1*s(18)+0
  Such that:it(23) =< V_len_0/64
it(23) =< V_len_0/64-V_len_0'/64

#### Cost of phase [23]:eval_zwritehexstring_at_bb5_in(V_len_0,B,C) -> [eval_zwritehexstring_at_bb5_in(V_len_0',B',C')] 
2*it(23)+1*s(18)+0
  Such that:it(23) =< V_len_0/64
it(23) =< V_len_0/64-V_len_0'/64

#### Cost of phase [23]:eval_zwritehexstring_at_bb5_in(V_len_0,B,C) -> [eval_zwritehexstring_at_bb5_in(V_len_0',B',C')] 
2*it(23)+1*s(18)+0
  Such that:it(23) =< V_len_0/64
it(23) =< V_len_0/64-V_len_0'/64

#### Cost of phase [23]:eval_zwritehexstring_at_bb5_in(V_len_0,B,C) -> [eval_zwritehexstring_at_bb5_in(V_len_0',B',C')] 
2*it(23)+1*s(18)+0
  Such that:it(23) =< V_len_0/64
it(23) =< V_len_0/64-V_len_0'/64

#### Cost of phase [23]:eval_zwritehexstring_at_bb5_in(V_len_0,B,C) -> [eval_zwritehexstring_at_bb5_in(V_len_0',B',C')] 
2*it(23)+1*s(18)+0
  Such that:it(23) =< V_len_0/64
it(23) =< V_len_0/64-V_len_0'/64

#### Cost of phase [23]:eval_zwritehexstring_at_bb5_in(V_len_0,B,C) -> [eval_zwritehexstring_at_bb5_in(V_len_0',B',C')] 
2*it(23)+1*s(18)+0
  Such that:it(23) =< V_len_0/64
it(23) =< V_len_0/64-V_len_0'/64

#### Cost of phase [23]:eval_zwritehexstring_at_bb5_in(V_len_0,B,C) -> [eval_zwritehexstring_at_bb5_in(V_len_0',B',C')] 
2*it(23)+1*s(18)+0
  Such that:it(23) =< V_len_0/64
it(23) =< V_len_0/64-V_len_0'/64

#### Cost of phase [23]:eval_zwritehexstring_at_bb5_in(V_len_0,B,C) -> [eval_zwritehexstring_at_bb5_in(V_len_0',B',C')] 
2*it(23)+1*s(18)+0
  Such that:it(23) =< V_len_0/64
it(23) =< V_len_0/64-V_len_0'/64

#### Cost of phase [23]:eval_zwritehexstring_at_bb5_in(V_len_0,B,C) -> [eval_zwritehexstring_at_bb5_in(V_len_0',B',C')] 
2*it(23)+1*s(18)+0
  Such that:it(23) =< V_len_0/64
it(23) =< V_len_0/64-V_len_0'/64

#### Cost of phase [23]:eval_zwritehexstring_at_bb5_in(V_len_0,B,C) -> [eval_zwritehexstring_at_bb5_in(V_len_0',B',C')] 
2*it(23)+1*s(18)+0
  Such that:it(23) =< V_len_0/64
it(23) =< V_len_0/64-V_len_0'/64

#### Cost of chains of eval_zwritehexstring_at_bb5_in(V_len_0,B,C):
* Chain [[24]]...: 3*it(24)+0
  with precondition: [0>=V_len_0+1] 

* Chain [[24],30]: 4*aux(2)+0
  with precondition: [B=3,0>=V_len_0+1] 

* Chain [[24],28]: 4*aux(3)+0
  with precondition: [B=4,0>=V_len_0+1] 

* Chain [[24],26,31]: 4*it(24)+2
  with precondition: [B=5,0>=V_len_0+1] 

* Chain [[24],22]...: 4*aux(4)+0
  with precondition: [0>=V_len_0+1] 

* Chain [[24],20]...: 4*aux(5)+0
  with precondition: [B=4,0>=V_len_0+1] 

* Chain [[23],[24]]...: 2*it(23)+4*it(24)+0
  Such that:it(23) =< V_len_0/64

  with precondition: [V_len_0>=1] 

* Chain [[23],[24],30]: 5*aux(2)+2*it(23)+0
  Such that:it(23) =< V_len_0/64

  with precondition: [B=3,V_len_0>=1] 

* Chain [[23],[24],28]: 5*aux(3)+2*it(23)+0
  Such that:it(23) =< V_len_0/64

  with precondition: [B=4,V_len_0>=1] 

* Chain [[23],[24],26,31]: 2*it(23)+5*it(24)+2
  Such that:it(23) =< V_len_0/64

  with precondition: [B=5,V_len_0>=1] 

* Chain [[23],[24],22]...: 5*aux(4)+2*it(23)+0
  Such that:it(23) =< V_len_0/64

  with precondition: [V_len_0>=1] 

* Chain [[23],[24],20]...: 5*aux(5)+2*it(23)+0
  Such that:it(23) =< V_len_0/64

  with precondition: [B=4,V_len_0>=1] 

* Chain [[23],31]: 2*it(23)+1*s(18)+0
  Such that:it(23) =< V_len_0/64

  with precondition: [B=5,V_len_0>=64] 

* Chain [[23],30]: 2*aux(2)+2*it(23)+0
  Such that:it(23) =< V_len_0/64

  with precondition: [B=3,V_len_0>=1] 

* Chain [[23],29]: 2*aux(6)+2*it(23)+0
  Such that:it(23) =< V_len_0/64

  with precondition: [B=3,V_len_0>=65] 

* Chain [[23],28]: 2*aux(3)+2*it(23)+0
  Such that:it(23) =< V_len_0/64

  with precondition: [B=4,V_len_0>=1] 

* Chain [[23],27]: 2*aux(7)+2*it(23)+0
  Such that:it(23) =< V_len_0/64

  with precondition: [B=4,V_len_0>=65] 

* Chain [[23],26,31]: 2*it(23)+2*s(9)+2
  Such that:it(23) =< V_len_0/64

  with precondition: [B=5,V_len_0>=1] 

* Chain [[23],25,31]: 2*it(23)+2*s(18)+2
  Such that:it(23) =< V_len_0/64

  with precondition: [B=5,V_len_0>=65] 

* Chain [[23],22]...: 2*aux(4)+2*it(23)+0
  Such that:it(23) =< V_len_0/64

  with precondition: [V_len_0>=1] 

* Chain [[23],21]...: 2*aux(8)+2*it(23)+0
  Such that:it(23) =< V_len_0/64

  with precondition: [V_len_0>=65] 

* Chain [[23],20]...: 2*aux(5)+2*it(23)+0
  Such that:it(23) =< V_len_0/64

  with precondition: [B=4,V_len_0>=1] 

* Chain [[23],19]...: 2*aux(9)+2*it(23)+0
  Such that:it(23) =< V_len_0/64

  with precondition: [B=4,V_len_0>=65] 

* Chain [31]: 0
  with precondition: [V_len_0=0,B=5] 

* Chain [30]: 1*aux(2)+0
  with precondition: [B=3,0>=V_len_0+1] 

* Chain [29]: 1*aux(6)+0
  with precondition: [B=3,V_len_0>=1] 

* Chain [28]: 1*aux(3)+0
  with precondition: [B=4,0>=V_len_0+1] 

* Chain [27]: 1*aux(7)+0
  with precondition: [B=4,V_len_0>=1] 

* Chain [26,31]: 1*s(9)+2
  with precondition: [B=5,0>=V_len_0+1] 

* Chain [25,31]: 1*s(23)+2
  with precondition: [B=5,V_len_0>=1] 

* Chain [22]...: 1*aux(4)+0
  with precondition: [0>=V_len_0+1] 

* Chain [21]...: 1*aux(8)+0
  with precondition: [V_len_0>=1] 

* Chain [20]...: 1*aux(5)+0
  with precondition: [B=4,0>=V_len_0+1] 

* Chain [19]...: 1*aux(9)+0
  with precondition: [B=4,V_len_0>=1] 


#### Cost of chains of loop_cont_eval_zwritehexstring_at_bb5_in(C,A,B):
* Chain [34]: 0
  with precondition: [C=3] 

* Chain [33]: 0
  with precondition: [C=4] 

* Chain [32]: 0
  with precondition: [C=5] 


#### Cost of chains of eval_zwritehexstring_at_bb3_in(B):
* Chain [36]...: 1*aux(20)+0
  with precondition: [] 

* Chain [35]: 1*aux(21)+0
  with precondition: [] 


#### Cost of chains of eval_zwritehexstring_at_10(B):
* Chain [38]: 1*aux(22)+0
  with precondition: [] 

* Chain [37]...: 1*s(101)+0
  with precondition: [] 


#### Cost of chains of eval_zwritehexstring_at_bb0_in(B):
* Chain [40]...: 1*aux(23)+0
  with precondition: [] 

* Chain [39]: 1*aux(24)+0
  with precondition: [] 


#### Cost of chains of eval_zwritehexstring_at_start(V_odd,B):
* Chain [42]: 1*s(106)+0
  with precondition: [] 

* Chain [41]...: 1*s(107)+0
  with precondition: [] 


Closed-form bounds of eval_zwritehexstring_at_start(V_odd,B): 
-------------------------------------
* Chain [42] with precondition: [] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [41]... with precondition: [] 
    - Upper bound: inf 
    - Complexity: infinity 

### Maximum cost of eval_zwritehexstring_at_start(V_odd,B): inf 
Asymptotic class: infinity 

Time statistics: 
-------------------------------------
* Partial evaluation computed in 36 ms.
* Invariants computed in 44 ms.
   - Backward Invariants 29 ms.
   - Transitive Invariants 3 ms.
* Refinement performed in 69 ms.
* Termination proved in 4 ms.
* Upper bounds computed in 71 ms.
   - Equation cost structures 21 ms.
   - Phase cost structures 8 ms.
   - Chain cost structures 35 ms.
   - Solving cost expressions 0 ms.
* Total analysis performed in 251 ms.


WARNING: Excluded non-linear constraints:[O=A+K*L+K*M,P=B+K*N+K*M]
WARNING: Excluded non-linear constraints:[N=A+K*L+K*M]
Warning: Ignored call to eval_gen_bitlen_stop/1 in equation eval_gen_bitlen_bb23_in/1 

Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. recursive  : [eval_gen_bitlen_bb1_in/10]
1. recursive  : [eval_gen_bitlen_bb4_in/8,eval_gen_bitlen_bb8_in/10]
2. recursive  : [eval_gen_bitlen_bb12_in/5]
3. recursive  : [eval_gen_bitlen_bb11_in/4,loop_cont_eval_gen_bitlen_bb12_in/5]
4. non_recursive  : [eval_gen_bitlen_bb23_in/1]
5. recursive  : [eval_gen_bitlen_bb17_in/4,eval_gen_bitlen_bb21_in/4]
6. recursive  : [eval_gen_bitlen_bb15_in/2,loop_cont_eval_gen_bitlen_bb17_in/3]
7. non_recursive  : [loop_cont_eval_gen_bitlen_bb15_in/2]
8. non_recursive  : [loop_cont_eval_gen_bitlen_bb11_in/3]
9. non_recursive  : [loop_cont_eval_gen_bitlen_bb4_in/4]
10. non_recursive  : [loop_cont_eval_gen_bitlen_bb1_in/7]
11. non_recursive  : [eval_gen_bitlen_bb0_in/3]
12. non_recursive  : [eval_gen_bitlen_start/4]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into eval_gen_bitlen_bb1_in/10
1. SCC is partially evaluated into eval_gen_bitlen_bb4_in/8
2. SCC is partially evaluated into eval_gen_bitlen_bb12_in/5
3. SCC is partially evaluated into eval_gen_bitlen_bb11_in/4
4. SCC is completely evaluated into other SCCs
5. SCC is partially evaluated into eval_gen_bitlen_bb17_in/4
6. SCC is partially evaluated into eval_gen_bitlen_bb15_in/2
7. SCC is completely evaluated into other SCCs
8. SCC is partially evaluated into loop_cont_eval_gen_bitlen_bb11_in/3
9. SCC is partially evaluated into loop_cont_eval_gen_bitlen_bb4_in/4
10. SCC is partially evaluated into loop_cont_eval_gen_bitlen_bb1_in/7
11. SCC is partially evaluated into eval_gen_bitlen_bb0_in/3
12. SCC is partially evaluated into eval_gen_bitlen_start/4

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations eval_gen_bitlen_bb1_in/10 
* CE 5 is refined into CE [27] 
* CE 4 is refined into CE [28] 


#### Refined cost equations eval_gen_bitlen_bb1_in/10 
* CE 27: eval_gen_bitlen_bb1_in(A,B,C,D,E,F,G,C,H,I) = 0
     [D>=16,I=0,E=5] 
* CE 28: eval_gen_bitlen_bb1_in(V__opt_len,V__static_len,V_9,V_bits_0,B,C,D,E,F,G) = 1+ eval_gen_bitlen_bb1_in(V__opt_len,V__static_len,V_9,H,B,C,D,E,F,G)
     [V_bits_0>=0,15>=V_bits_0,V_bits_0+1=H] 

### Cost equations --> "Loop" of eval_gen_bitlen_bb1_in/10 
* CEs [28] --> Loop 26 
* CEs [27] --> Loop 27 

#### Loops of eval_gen_bitlen_bb1_in/10 
* Loop 26: eval_gen_bitlen_bb1_in(V__opt_len,V__static_len,V_9,V_bits_0,B,C,D,E,F,G)->  eval_gen_bitlen_bb1_in(V__opt_len,V__static_len,V_9,V_bits_0',B,C,D,E,F,G)
                  [V_bits_0>=0,15>=V_bits_0,V_bits_0+1=V_bits_0'] 
* Loop 27: eval_gen_bitlen_bb1_in(A,B,C,D,E,F,G,C,H,I) [D>=16,I=0,E=5] 

### Ranking functions of CR eval_gen_bitlen_bb1_in(V__opt_len,V__static_len,V_9,V_bits_0,B,C,D,E,F,G) 
* RF of phase [26]: [-V_bits_0+16]

#### Partial ranking functions of CR eval_gen_bitlen_bb1_in(V__opt_len,V__static_len,V_9,V_bits_0,B,C,D,E,F,G) 
* Partial RF of phase [26]:
  - RF of loop [26:1]:
    -V_bits_0+16


### Resulting Chains:eval_gen_bitlen_bb1_in(V__opt_len,V__static_len,V_9,V_bits_0,B,C,D,E,F,G) 
* [[26],27]


### Merging Chains  eval_gen_bitlen_bb1_in/10 into  External patterns of execution 
* [[27,[26]]] --> 1 


### Specialization of cost equations eval_gen_bitlen_bb4_in/8 
* CE 9 is refined into CE [29] 
* CE 10 is refined into CE [30] 
* CE 7 is refined into CE [31] 
* CE 8 is refined into CE [32] 


#### Refined cost equations eval_gen_bitlen_bb4_in/8 
* CE 29: eval_gen_bitlen_bb4_in(V__opt_len,V__static_len,V_9,V__sink,V_overflow_0,B,C,D) = 0
     [V__sink>=572,B=4] 
* CE 30: eval_gen_bitlen_bb4_in(A,B,C,D,E,F,C,E) = 0
     [D>=572,F=3] 
* CE 31: eval_gen_bitlen_bb4_in(V__opt_len,V__static_len,V_9,V__sink,V_overflow_0,B,C,D) = 1+ eval_gen_bitlen_bb4_in(E,F,V_9,G,V_overflow_0,B,C,D)
     [571>=V__sink,V__sink+1=G] 
* CE 32: eval_gen_bitlen_bb4_in(V__opt_len,V__static_len,V_9,V__sink,V_overflow_0,B,C,D) = 1+ eval_gen_bitlen_bb4_in(E,F,V_9,G,H,B,C,D)
     [571>=V__sink,V__sink+1=G,H=V_overflow_0+1] 

### Cost equations --> "Loop" of eval_gen_bitlen_bb4_in/8 
* CEs [31] --> Loop 28 
* CEs [32] --> Loop 29 
* CEs [29] --> Loop 30 
* CEs [30] --> Loop 31 

#### Loops of eval_gen_bitlen_bb4_in/8 
* Loop 28: eval_gen_bitlen_bb4_in(V__opt_len,V__static_len,V_9,V__sink,V_overflow_0,B,C,D)->  eval_gen_bitlen_bb4_in(V__opt_len',V__static_len',V_9,V__sink',V_overflow_0,B,C,D)
                  [571>=V__sink,V__sink+1=V__sink'] 
* Loop 29: eval_gen_bitlen_bb4_in(V__opt_len,V__static_len,V_9,V__sink,V_overflow_0,B,C,D)->  eval_gen_bitlen_bb4_in(V__opt_len',V__static_len',V_9,V__sink',V_overflow_0',B,C,D)
                  [571>=V__sink,V_overflow_0+1=V_overflow_0',V__sink+1=V__sink'] 
* Loop 30: eval_gen_bitlen_bb4_in(V__opt_len,V__static_len,V_9,V__sink,V_overflow_0,B,C,D) [V__sink>=572,B=4] 
* Loop 31: eval_gen_bitlen_bb4_in(A,B,C,D,E,F,C,E) [D>=572,F=3] 

### Ranking functions of CR eval_gen_bitlen_bb4_in(V__opt_len,V__static_len,V_9,V__sink,V_overflow_0,B,C,D) 
* RF of phase [28,29]: [-V__sink+572]

#### Partial ranking functions of CR eval_gen_bitlen_bb4_in(V__opt_len,V__static_len,V_9,V__sink,V_overflow_0,B,C,D) 
* Partial RF of phase [28,29]:
  - RF of loop [28:1,29:1]:
    -V__sink+572


### Resulting Chains:eval_gen_bitlen_bb4_in(V__opt_len,V__static_len,V_9,V__sink,V_overflow_0,B,C,D) 
* [[28,29],31]
* [[28,29],30]
* [31]
* [30]


### Merging Chains  eval_gen_bitlen_bb4_in/8 into  External patterns of execution 
* [[31]] --> 1 
* [[31,[28,29]]] --> 2 
* [[30,[28,29]]] --> 3 
* [[30]] --> 4 


### Specialization of cost equations eval_gen_bitlen_bb12_in/5 
* CE 17 is refined into CE [33] 
* CE 18 is refined into CE [34] 
* CE 16 is refined into CE [35] 


#### Refined cost equations eval_gen_bitlen_bb12_in/5 
* CE 33: eval_gen_bitlen_bb12_in(A,B,C,A,D) = 0
     [B>=3,B=D+2,C=3] 
* CE 34: eval_gen_bitlen_bb12_in(A,B,C,A,D) = 0
     [2>=B,C=2] 
* CE 35: eval_gen_bitlen_bb12_in(V_9,V_overflow_2,B,C,D) = 1+ eval_gen_bitlen_bb12_in(V_9,V_overflow_2,B,C,D)
     [B>=2,3>=B] 

### Cost equations --> "Loop" of eval_gen_bitlen_bb12_in/5 
* CEs [35] --> Loop 32 
* CEs [33] --> Loop 33 
* CEs [34] --> Loop 34 

#### Loops of eval_gen_bitlen_bb12_in/5 
* Loop 32: eval_gen_bitlen_bb12_in(V_9,V_overflow_2,B,C,D)->  eval_gen_bitlen_bb12_in(V_9,V_overflow_2,B,C,D)
                  [B>=2,3>=B] 
* Loop 33: eval_gen_bitlen_bb12_in(A,B,C,A,D) [B>=3,B=D+2,C=3] 
* Loop 34: eval_gen_bitlen_bb12_in(A,B,C,A,D) [2>=B,C=2] 

### Ranking functions of CR eval_gen_bitlen_bb12_in(V_9,V_overflow_2,B,C,D) 

#### Partial ranking functions of CR eval_gen_bitlen_bb12_in(V_9,V_overflow_2,B,C,D) 


### Resulting Chains:eval_gen_bitlen_bb12_in(V_9,V_overflow_2,B,C,D) 
* [[32]]...
* [[32],34]
* [[32],33]
* [34]
* [33]


### Merging Chains  eval_gen_bitlen_bb12_in/5 into  External patterns of execution 
* [[34],[34,[32]]] --> 1 
* [[33],[33,[32]]] --> 2 
* [[[32]]] --> 3 


### Specialization of cost equations eval_gen_bitlen_bb11_in/4 
* CE 14 is refined into CE [36,37] 
* CE 13 is refined into CE [38,39] 


#### Refined cost equations eval_gen_bitlen_bb11_in/4 
* CE 36: eval_gen_bitlen_bb11_in(V_9,V_overflow_2,B,C) = 2+ eval_gen_bitlen_bb12_in(V_9,D,E,V_9,F):2+ eval_gen_bitlen_bb11_in(V_9,F,B,C)
     [F>=1,F+2=D,F+2=V_overflow_2,E=3] 
* CE 37: eval_gen_bitlen_bb11_in(V_9,V_overflow_2,B,C) = 2+ eval_gen_bitlen_bb12_in(V_9,V_overflow_2,D,E,F):3
     [D=3] 
* CE 38: eval_gen_bitlen_bb11_in(A,B,C,A) = 1+ eval_gen_bitlen_bb12_in(A,B,D,A,E):1
     [2>=B,D=2,C=2] 
* CE 39: eval_gen_bitlen_bb11_in(V_9,V_overflow_2,B,C) = 1+ eval_gen_bitlen_bb12_in(V_9,V_overflow_2,D,C,E):3
     [D=2,B=2] 

### Cost equations --> "Loop" of eval_gen_bitlen_bb11_in/4 
* CEs [37,39] --> Loop 35 
* CEs [38] --> Loop 36 
* CEs [36] --> Loop 37 

#### Loops of eval_gen_bitlen_bb11_in/4 
* Loop 35: eval_gen_bitlen_bb11_in(V_9,V_overflow_2,B,C) [] 
* Loop 36: eval_gen_bitlen_bb11_in(A,B,C,A) [2>=B,C=2] 
* Loop 37: eval_gen_bitlen_bb11_in(V_9,V_overflow_2,B,C)->  eval_gen_bitlen_bb11_in(V_9,V_overflow_2',B,C)
                  [V_overflow_2>=3,V_overflow_2=V_overflow_2'+2] 

### Ranking functions of CR eval_gen_bitlen_bb11_in(V_9,V_overflow_2,B,C) 
* RF of phase [37]: [V_overflow_2/2-1]

#### Partial ranking functions of CR eval_gen_bitlen_bb11_in(V_9,V_overflow_2,B,C) 
* Partial RF of phase [37]:
  - RF of loop [37:1]:
    V_overflow_2/2-1


### Resulting Chains:eval_gen_bitlen_bb11_in(V_9,V_overflow_2,B,C) 
* [[37],36]
* [[37],35]...
* [36]
* [35]...


### Merging Chains  eval_gen_bitlen_bb11_in/4 into  External patterns of execution 
* [[36]] --> 1 
* [[36,[37]]] --> 2 
* [[35]] --> 3 
* [[35,[37]]] --> 4 


### Specialization of cost equations eval_gen_bitlen_bb17_in/4 
* CE 26 is refined into CE [40] 
* CE 22 is refined into CE [41] 
* CE 23 is refined into CE [42] 
* CE 25 is refined into CE [43] 
* CE 24 is refined into CE [44] 


#### Refined cost equations eval_gen_bitlen_bb17_in/4 
* CE 40: eval_gen_bitlen_bb17_in(V_bits_3,V_n_0,B,C) = 0
     [C+1=V_bits_3,B=2,V_n_0=0] 
* CE 41: eval_gen_bitlen_bb17_in(V_bits_3,V_n_0,B,C) = 1+ eval_gen_bitlen_bb17_in(V_bits_3,D,E,C)
     [V_n_0>=1,V_n_0=D+1,E=2,B=2] 
* CE 42: eval_gen_bitlen_bb17_in(V_bits_3,V_n_0,B,C) = 1+ eval_gen_bitlen_bb17_in(V_bits_3,D,E,C)
     [0>=V_n_0+1,V_n_0=D+1,E=2,B=2] 
* CE 43: eval_gen_bitlen_bb17_in(V_bits_3,V_n_0,B,C) = 1+ eval_gen_bitlen_bb17_in(V_bits_3,V_n_0,D,C)
     [V_n_0>=1,D=2,B=2] 
* CE 44: eval_gen_bitlen_bb17_in(V_bits_3,V_n_0,B,C) = 1+ eval_gen_bitlen_bb17_in(V_bits_3,V_n_0,D,C)
     [0>=V_n_0+1,D=2,B=2] 

### Cost equations --> "Loop" of eval_gen_bitlen_bb17_in/4 
* CEs [41] --> Loop 38 
* CEs [42] --> Loop 39 
* CEs [43] --> Loop 40 
* CEs [44] --> Loop 41 
* CEs [40] --> Loop 42 

#### Loops of eval_gen_bitlen_bb17_in/4 
* Loop 38: eval_gen_bitlen_bb17_in(V_bits_3,V_n_0,B,C)->  eval_gen_bitlen_bb17_in(V_bits_3,V_n_0',B',C)
                  [V_n_0>=1,V_n_0=V_n_0'+1,B'=2,B=2] 
* Loop 39: eval_gen_bitlen_bb17_in(V_bits_3,V_n_0,B,C)->  eval_gen_bitlen_bb17_in(V_bits_3,V_n_0',B',C)
                  [0>=V_n_0+1,V_n_0=V_n_0'+1,B'=2,B=2] 
* Loop 40: eval_gen_bitlen_bb17_in(V_bits_3,V_n_0,B,C)->  eval_gen_bitlen_bb17_in(V_bits_3,V_n_0,B',C)
                  [V_n_0>=1,B'=2,B=2] 
* Loop 41: eval_gen_bitlen_bb17_in(V_bits_3,V_n_0,B,C)->  eval_gen_bitlen_bb17_in(V_bits_3,V_n_0,B',C)
                  [0>=V_n_0+1,B'=2,B=2] 
* Loop 42: eval_gen_bitlen_bb17_in(V_bits_3,V_n_0,B,C) [V_bits_3=C+1,B=2,V_n_0=0] 

### Ranking functions of CR eval_gen_bitlen_bb17_in(V_bits_3,V_n_0,B,C) 

#### Partial ranking functions of CR eval_gen_bitlen_bb17_in(V_bits_3,V_n_0,B,C) 
* Partial RF of phase [38,40]:
  - RF of loop [38:1]:
    V_n_0


### Resulting Chains:eval_gen_bitlen_bb17_in(V_bits_3,V_n_0,B,C) 
* [[39,41]]...
* [[38,40]]...
* [[38,40],42]
* [42]


### Merging Chains  eval_gen_bitlen_bb17_in/4 into  External patterns of execution 
* [[42]] --> 1 
* [[42,[38,40]]] --> 2 
* [[[39,41]]] --> 3 
* [[[38,40]]] --> 4 


### Specialization of cost equations eval_gen_bitlen_bb15_in/2 
* CE 21 is refined into CE [45] 
* CE 19 is refined into CE [46,47,48,49] 
* CE 20 is refined into CE [50,51,52,53] 


#### Refined cost equations eval_gen_bitlen_bb15_in/2 
* CE 45: eval_gen_bitlen_bb15_in(V_bits_3,B) = 0
     [B=4,V_bits_3=0] 
* CE 46: eval_gen_bitlen_bb15_in(V_bits_3,B) = 2+ eval_gen_bitlen_bb17_in(C,D,E,F):1+ eval_gen_bitlen_bb15_in(F,G)
     [F>=0,F+1=C,F+1=V_bits_3,G=4,E=2,D=0,B=4] 
* CE 47: eval_gen_bitlen_bb15_in(V_bits_3,B) = 2+ eval_gen_bitlen_bb17_in(C,D,E,F):2+ eval_gen_bitlen_bb15_in(F,G)
     [F>=0,D>=1,F+1=C,F+1=V_bits_3,G=4,E=2,B=4] 
* CE 48: eval_gen_bitlen_bb15_in(V_bits_3,B) = 2+ eval_gen_bitlen_bb17_in(V_bits_3,C,D,E):3
     [V_bits_3>=1,0>=C+1,F=4,D=2,B=4] 
* CE 49: eval_gen_bitlen_bb15_in(V_bits_3,B) = 2+ eval_gen_bitlen_bb17_in(V_bits_3,C,D,E):4
     [C>=1,V_bits_3>=1,F=4,D=2,B=4] 
* CE 50: eval_gen_bitlen_bb15_in(V_bits_3,B) = 2+ eval_gen_bitlen_bb17_in(C,D,E,F):1+ eval_gen_bitlen_bb15_in(F,G)
     [0>=F+2,F+1=C,F+1=V_bits_3,G=4,E=2,D=0,B=4] 
* CE 51: eval_gen_bitlen_bb15_in(V_bits_3,B) = 2+ eval_gen_bitlen_bb17_in(C,D,E,F):2+ eval_gen_bitlen_bb15_in(F,G)
     [D>=1,0>=F+2,F+1=C,F+1=V_bits_3,G=4,E=2,B=4] 
* CE 52: eval_gen_bitlen_bb15_in(V_bits_3,B) = 2+ eval_gen_bitlen_bb17_in(V_bits_3,C,D,E):3
     [0>=C+1,0>=V_bits_3+1,F=4,D=2,B=4] 
* CE 53: eval_gen_bitlen_bb15_in(V_bits_3,B) = 2+ eval_gen_bitlen_bb17_in(V_bits_3,C,D,E):4
     [C>=1,0>=V_bits_3+1,F=4,D=2,B=4] 

### Cost equations --> "Loop" of eval_gen_bitlen_bb15_in/2 
* CEs [48,49] --> Loop 43 
* CEs [52,53] --> Loop 44 
* CEs [46,47] --> Loop 45 
* CEs [50,51] --> Loop 46 
* CEs [45] --> Loop 47 

#### Loops of eval_gen_bitlen_bb15_in/2 
* Loop 43: eval_gen_bitlen_bb15_in(V_bits_3,B) [V_bits_3>=1,B=4] 
* Loop 44: eval_gen_bitlen_bb15_in(V_bits_3,B) [0>=V_bits_3+1,B=4] 
* Loop 45: eval_gen_bitlen_bb15_in(V_bits_3,B)->  eval_gen_bitlen_bb15_in(V_bits_3',B')
                  [V_bits_3>=1,V_bits_3=V_bits_3'+1,B'=4,B=4] 
* Loop 46: eval_gen_bitlen_bb15_in(V_bits_3,B)->  eval_gen_bitlen_bb15_in(V_bits_3',B')
                  [0>=V_bits_3+1,V_bits_3=V_bits_3'+1,B'=4,B=4] 
* Loop 47: eval_gen_bitlen_bb15_in(V_bits_3,B) [B=4,V_bits_3=0] 

### Ranking functions of CR eval_gen_bitlen_bb15_in(V_bits_3,B) 
* RF of phase [45]: [V_bits_3]

#### Partial ranking functions of CR eval_gen_bitlen_bb15_in(V_bits_3,B) 
* Partial RF of phase [45]:
  - RF of loop [45:1]:
    V_bits_3


### Resulting Chains:eval_gen_bitlen_bb15_in(V_bits_3,B) 
* [[46]]...
* [[46],44]...
* [[45],47]
* [[45],43]...
* [47]
* [44]...
* [43]...


### Merging Chains  eval_gen_bitlen_bb15_in/2 into  External patterns of execution 
* [[47]] --> 1 
* [[47,[45]]] --> 2 
* [[44],[44,[46]]] --> 3 
* [[43]] --> 4 
* [[43,[45]]] --> 5 
* [[[46]]] --> 6 


### Specialization of cost equations loop_cont_eval_gen_bitlen_bb11_in/3 
* CE 15 is refined into CE [54,55,56,57,58,59] 


#### Refined cost equations loop_cont_eval_gen_bitlen_bb11_in/3 
* CE 54: loop_cont_eval_gen_bitlen_bb11_in(E,A,B) = 1+ eval_gen_bitlen_bb15_in(F,G):1
     [G=4,F=0,A=0,E=2] 
* CE 55: loop_cont_eval_gen_bitlen_bb11_in(E,A,B) = 1+ eval_gen_bitlen_bb15_in(A,F):2
     [A>=1,F=4,E=2] 
* CE 56: loop_cont_eval_gen_bitlen_bb11_in(E,A,B) = 1+ eval_gen_bitlen_bb15_in(A,F):3
     [0>=A+1,F=4,E=2] 
* CE 57: loop_cont_eval_gen_bitlen_bb11_in(E,A,B) = 1+ eval_gen_bitlen_bb15_in(A,F):4
     [A>=1,F=4,E=2] 
* CE 58: loop_cont_eval_gen_bitlen_bb11_in(E,A,B) = 1+ eval_gen_bitlen_bb15_in(A,F):5
     [A>=2,F=4,E=2] 
* CE 59: loop_cont_eval_gen_bitlen_bb11_in(E,A,B) = 1+ eval_gen_bitlen_bb15_in(A,F):6
     [0>=A+1,F=4,E=2] 

### Cost equations --> "Loop" of loop_cont_eval_gen_bitlen_bb11_in/3 
* CEs [57,58] --> Loop 48 
* CEs [56,59] --> Loop 49 
* CEs [55] --> Loop 50 
* CEs [54] --> Loop 51 

#### Loops of loop_cont_eval_gen_bitlen_bb11_in/3 
* Loop 48: loop_cont_eval_gen_bitlen_bb11_in(E,A,B) [A>=1,E=2] 
* Loop 49: loop_cont_eval_gen_bitlen_bb11_in(E,A,B) [0>=A+1,E=2] 
* Loop 50: loop_cont_eval_gen_bitlen_bb11_in(E,A,B) [A>=1,E=2] 
* Loop 51: loop_cont_eval_gen_bitlen_bb11_in(E,A,B) [A=0,E=2] 

### Ranking functions of CR loop_cont_eval_gen_bitlen_bb11_in(E,A,B) 

#### Partial ranking functions of CR loop_cont_eval_gen_bitlen_bb11_in(E,A,B) 


### Resulting Chains:loop_cont_eval_gen_bitlen_bb11_in(E,A,B) 
* [51]
* [50]
* [49]...
* [48]...


### Merging Chains  loop_cont_eval_gen_bitlen_bb11_in/3 into  External patterns of execution 
* [[51]] --> 1 
* [[50]] --> 2 
* [[49]] --> 3 
* [[48]] --> 4 


### Specialization of cost equations loop_cont_eval_gen_bitlen_bb4_in/4 
* CE 11 is refined into CE [60] 
* CE 12 is refined into CE [61,62,63,64,65,66,67,68,69,70] 


#### Refined cost equations loop_cont_eval_gen_bitlen_bb4_in/4 
* CE 60: loop_cont_eval_gen_bitlen_bb4_in(E,A,B,C) = 0
     [E=4] 
* CE 61: loop_cont_eval_gen_bitlen_bb4_in(E,A,B,C) = 1+ eval_gen_bitlen_bb11_in(F,B,G,H):1+ loop_cont_eval_gen_bitlen_bb11_in(I,J,C):1
     [2>=B,J=0,I=2,H=0,G=2,F=0,A=0,E=3] 
* CE 62: loop_cont_eval_gen_bitlen_bb4_in(E,A,B,C) = 1+ eval_gen_bitlen_bb11_in(A,B,F,A):1+ loop_cont_eval_gen_bitlen_bb11_in(G,A,C):2
     [A>=1,2>=B,G=2,F=2,E=3] 
* CE 63: loop_cont_eval_gen_bitlen_bb4_in(E,A,B,C) = 1+ eval_gen_bitlen_bb11_in(A,B,F,A):1+ loop_cont_eval_gen_bitlen_bb11_in(G,A,C):3
     [0>=A+1,2>=B,G=2,F=2,E=3] 
* CE 64: loop_cont_eval_gen_bitlen_bb4_in(E,A,B,C) = 1+ eval_gen_bitlen_bb11_in(A,B,F,A):1+ loop_cont_eval_gen_bitlen_bb11_in(G,A,C):4
     [A>=1,2>=B,G=2,F=2,E=3] 
* CE 65: loop_cont_eval_gen_bitlen_bb4_in(E,A,B,C) = 1+ eval_gen_bitlen_bb11_in(F,B,G,H):2+ loop_cont_eval_gen_bitlen_bb11_in(I,J,C):1
     [B>=3,J=0,I=2,H=0,G=2,F=0,A=0,E=3] 
* CE 66: loop_cont_eval_gen_bitlen_bb4_in(E,A,B,C) = 1+ eval_gen_bitlen_bb11_in(A,B,F,A):2+ loop_cont_eval_gen_bitlen_bb11_in(G,A,C):2
     [A>=1,B>=3,G=2,F=2,E=3] 
* CE 67: loop_cont_eval_gen_bitlen_bb4_in(E,A,B,C) = 1+ eval_gen_bitlen_bb11_in(A,B,F,A):2+ loop_cont_eval_gen_bitlen_bb11_in(G,A,C):3
     [B>=3,0>=A+1,G=2,F=2,E=3] 
* CE 68: loop_cont_eval_gen_bitlen_bb4_in(E,A,B,C) = 1+ eval_gen_bitlen_bb11_in(A,B,F,A):2+ loop_cont_eval_gen_bitlen_bb11_in(G,A,C):4
     [A>=1,B>=3,G=2,F=2,E=3] 
* CE 69: loop_cont_eval_gen_bitlen_bb4_in(E,A,B,C) = 1+ eval_gen_bitlen_bb11_in(A,B,F,G):3
     [E=3] 
* CE 70: loop_cont_eval_gen_bitlen_bb4_in(E,A,B,C) = 1+ eval_gen_bitlen_bb11_in(A,B,F,G):4
     [B>=3,E=3] 

### Cost equations --> "Loop" of loop_cont_eval_gen_bitlen_bb4_in/4 
* CEs [63,64,67,68,69,70] --> Loop 52 
* CEs [60] --> Loop 53 
* CEs [66] --> Loop 54 
* CEs [62] --> Loop 55 
* CEs [65] --> Loop 56 
* CEs [61] --> Loop 57 

#### Loops of loop_cont_eval_gen_bitlen_bb4_in/4 
* Loop 52: loop_cont_eval_gen_bitlen_bb4_in(E,A,B,C) [E=3] 
* Loop 53: loop_cont_eval_gen_bitlen_bb4_in(E,A,B,C) [E=4] 
* Loop 54: loop_cont_eval_gen_bitlen_bb4_in(E,A,B,C) [B>=3,A>=1,E=3] 
* Loop 55: loop_cont_eval_gen_bitlen_bb4_in(E,A,B,C) [A>=1,2>=B,E=3] 
* Loop 56: loop_cont_eval_gen_bitlen_bb4_in(E,A,B,C) [B>=3,A=0,E=3] 
* Loop 57: loop_cont_eval_gen_bitlen_bb4_in(E,A,B,C) [2>=B,A=0,E=3] 

### Ranking functions of CR loop_cont_eval_gen_bitlen_bb4_in(E,A,B,C) 

#### Partial ranking functions of CR loop_cont_eval_gen_bitlen_bb4_in(E,A,B,C) 


### Resulting Chains:loop_cont_eval_gen_bitlen_bb4_in(E,A,B,C) 
* [57]
* [56]
* [55]
* [54]
* [53]
* [52]...


### Merging Chains  loop_cont_eval_gen_bitlen_bb4_in/4 into  External patterns of execution 
* [[57]] --> 1 
* [[56]] --> 2 
* [[55]] --> 3 
* [[54]] --> 4 
* [[53]] --> 5 
* [[52]] --> 6 


### Specialization of cost equations loop_cont_eval_gen_bitlen_bb1_in/7 
* CE 6 is refined into CE [71,72,73,74,75,76,77,78,79,80,81,82] 


#### Refined cost equations loop_cont_eval_gen_bitlen_bb1_in/7 
* CE 71: loop_cont_eval_gen_bitlen_bb1_in(K,A,B,C,D,E,F) = 1+ eval_gen_bitlen_bb4_in(A,B,L,D,E,M,N,E):1+ loop_cont_eval_gen_bitlen_bb4_in(O,P,E,F):1
     [D>=572,2>=E,P=0,O=3,N=0,M=3,L=0,C=0,K=5] 
* CE 72: loop_cont_eval_gen_bitlen_bb1_in(K,A,B,C,D,E,F) = 1+ eval_gen_bitlen_bb4_in(A,B,L,D,E,M,N,E):1+ loop_cont_eval_gen_bitlen_bb4_in(O,P,E,F):2
     [E>=3,D>=572,P=0,O=3,N=0,M=3,L=0,C=0,K=5] 
* CE 73: loop_cont_eval_gen_bitlen_bb1_in(K,A,B,C,D,E,F) = 1+ eval_gen_bitlen_bb4_in(A,B,C,D,E,L,C,E):1+ loop_cont_eval_gen_bitlen_bb4_in(M,C,E,F):3
     [C>=1,D>=572,2>=E,M=3,L=3,K=5] 
* CE 74: loop_cont_eval_gen_bitlen_bb1_in(K,A,B,C,D,E,F) = 1+ eval_gen_bitlen_bb4_in(A,B,C,D,E,L,C,E):1+ loop_cont_eval_gen_bitlen_bb4_in(M,C,E,F):4
     [E>=3,C>=1,D>=572,M=3,L=3,K=5] 
* CE 75: loop_cont_eval_gen_bitlen_bb1_in(K,A,B,C,D,E,F) = 1+ eval_gen_bitlen_bb4_in(A,B,C,D,E,L,C,E):1+ loop_cont_eval_gen_bitlen_bb4_in(M,C,E,F):6
     [D>=572,M=3,L=3,K=5] 
* CE 76: loop_cont_eval_gen_bitlen_bb1_in(K,A,B,C,D,E,F) = 1+ eval_gen_bitlen_bb4_in(A,B,L,D,E,M,N,O):2+ loop_cont_eval_gen_bitlen_bb4_in(P,Q,O,F):1
     [E+572>=D+O,O>=E,2>=O,571>=D,Q=0,P=3,N=0,M=3,L=0,C=0,K=5] 
* CE 77: loop_cont_eval_gen_bitlen_bb1_in(K,A,B,C,D,E,F) = 1+ eval_gen_bitlen_bb4_in(A,B,L,D,E,M,N,O):2+ loop_cont_eval_gen_bitlen_bb4_in(P,Q,O,F):2
     [E+572>=D+O,O>=E,O>=3,571>=D,Q=0,P=3,N=0,M=3,L=0,C=0,K=5] 
* CE 78: loop_cont_eval_gen_bitlen_bb1_in(K,A,B,C,D,E,F) = 1+ eval_gen_bitlen_bb4_in(A,B,C,D,E,L,C,M):2+ loop_cont_eval_gen_bitlen_bb4_in(N,C,M,F):3
     [E+572>=D+M,M>=E,C>=1,2>=M,571>=D,N=3,L=3,K=5] 
* CE 79: loop_cont_eval_gen_bitlen_bb1_in(K,A,B,C,D,E,F) = 1+ eval_gen_bitlen_bb4_in(A,B,C,D,E,L,C,M):2+ loop_cont_eval_gen_bitlen_bb4_in(N,C,M,F):4
     [E+572>=D+M,M>=E,M>=3,C>=1,571>=D,N=3,L=3,K=5] 
* CE 80: loop_cont_eval_gen_bitlen_bb1_in(K,A,B,C,D,E,F) = 1+ eval_gen_bitlen_bb4_in(A,B,C,D,E,L,C,M):2+ loop_cont_eval_gen_bitlen_bb4_in(N,C,M,F):6
     [E+572>=D+M,M>=E,571>=D,N=3,L=3,K=5] 
* CE 81: loop_cont_eval_gen_bitlen_bb1_in(K,A,B,C,D,E,F) = 1+ eval_gen_bitlen_bb4_in(A,B,C,D,E,L,M,N):3+ loop_cont_eval_gen_bitlen_bb4_in(O,M,N,F):5
     [571>=D,O=4,L=4,K=5] 
* CE 82: loop_cont_eval_gen_bitlen_bb1_in(K,A,B,C,D,E,F) = 1+ eval_gen_bitlen_bb4_in(A,B,C,D,E,L,M,N):4+ loop_cont_eval_gen_bitlen_bb4_in(O,M,N,F):5
     [D>=572,O=4,L=4,K=5] 

### Cost equations --> "Loop" of loop_cont_eval_gen_bitlen_bb1_in/7 
* CEs [74] --> Loop 58 
* CEs [73] --> Loop 59 
* CEs [72] --> Loop 60 
* CEs [71,82] --> Loop 61 
* CEs [77] --> Loop 62 
* CEs [76,78,79,81] --> Loop 63 
* CEs [75] --> Loop 64 
* CEs [80] --> Loop 65 

#### Loops of loop_cont_eval_gen_bitlen_bb1_in/7 
* Loop 58: loop_cont_eval_gen_bitlen_bb1_in(K,A,B,C,D,E,F) [E>=3,D>=572,C>=1,K=5] 
* Loop 59: loop_cont_eval_gen_bitlen_bb1_in(K,A,B,C,D,E,F) [D>=572,C>=1,2>=E,K=5] 
* Loop 60: loop_cont_eval_gen_bitlen_bb1_in(K,A,B,C,D,E,F) [E>=3,D>=572,C=0,K=5] 
* Loop 61: loop_cont_eval_gen_bitlen_bb1_in(K,A,B,C,D,E,F) [D>=572,K=5] 
* Loop 62: loop_cont_eval_gen_bitlen_bb1_in(K,A,B,C,D,E,F) [E+569>=D,571>=D,C=0,K=5] 
* Loop 63: loop_cont_eval_gen_bitlen_bb1_in(K,A,B,C,D,E,F) [571>=D,K=5] 
* Loop 64: loop_cont_eval_gen_bitlen_bb1_in(K,A,B,C,D,E,F) [D>=572,K=5] 
* Loop 65: loop_cont_eval_gen_bitlen_bb1_in(K,A,B,C,D,E,F) [571>=D,K=5] 

### Ranking functions of CR loop_cont_eval_gen_bitlen_bb1_in(K,A,B,C,D,E,F) 

#### Partial ranking functions of CR loop_cont_eval_gen_bitlen_bb1_in(K,A,B,C,D,E,F) 


### Resulting Chains:loop_cont_eval_gen_bitlen_bb1_in(K,A,B,C,D,E,F) 
* [65]...
* [64]...
* [63]
* [62]
* [61]
* [60]
* [59]
* [58]


### Merging Chains  loop_cont_eval_gen_bitlen_bb1_in/7 into  External patterns of execution 
* [[62],[63]] --> 1 
* [[60],[61]] --> 2 
* [[59]] --> 3 
* [[58]] --> 4 
* [[65]] --> 5 
* [[64]] --> 6 


### Specialization of cost equations eval_gen_bitlen_bb0_in/3 
* CE 3 is refined into CE [83,84,85,86,87] 


#### Refined cost equations eval_gen_bitlen_bb0_in/3 
* CE 83: eval_gen_bitlen_bb0_in(V__opt_len,V__static_len,B) = 1+ eval_gen_bitlen_bb1_in(V__opt_len,V__static_len,C,D,E,F,G,C,H,I):1+ loop_cont_eval_gen_bitlen_bb1_in(J,F,G,C,H,K,B):1
     [571>=H,K=0,J=5,I=0,E=5,D=0] 
* CE 84: eval_gen_bitlen_bb0_in(V__opt_len,V__static_len,B) = 1+ eval_gen_bitlen_bb1_in(V__opt_len,V__static_len,C,D,E,F,G,C,H,I):1+ loop_cont_eval_gen_bitlen_bb1_in(J,F,G,C,H,K,B):2
     [H>=572,K=0,J=5,I=0,E=5,D=0] 
* CE 85: eval_gen_bitlen_bb0_in(V__opt_len,V__static_len,B) = 1+ eval_gen_bitlen_bb1_in(V__opt_len,V__static_len,C,D,E,F,G,C,H,I):1+ loop_cont_eval_gen_bitlen_bb1_in(J,F,G,C,H,K,B):3
     [H>=572,C>=1,K=0,J=5,I=0,E=5,D=0] 
* CE 86: eval_gen_bitlen_bb0_in(V__opt_len,V__static_len,B) = 1+ eval_gen_bitlen_bb1_in(V__opt_len,V__static_len,C,D,E,F,G,C,H,I):1+ loop_cont_eval_gen_bitlen_bb1_in(J,F,G,C,H,K,B):5
     [571>=H,K=0,J=5,I=0,E=5,D=0] 
* CE 87: eval_gen_bitlen_bb0_in(V__opt_len,V__static_len,B) = 1+ eval_gen_bitlen_bb1_in(V__opt_len,V__static_len,C,D,E,F,G,C,H,I):1+ loop_cont_eval_gen_bitlen_bb1_in(J,F,G,C,H,K,B):6
     [H>=572,K=0,J=5,I=0,E=5,D=0] 

### Cost equations --> "Loop" of eval_gen_bitlen_bb0_in/3 
* CEs [86,87] --> Loop 66 
* CEs [83,84,85] --> Loop 67 

#### Loops of eval_gen_bitlen_bb0_in/3 
* Loop 66: eval_gen_bitlen_bb0_in(V__opt_len,V__static_len,B) [] 
* Loop 67: eval_gen_bitlen_bb0_in(V__opt_len,V__static_len,B) [] 

### Ranking functions of CR eval_gen_bitlen_bb0_in(V__opt_len,V__static_len,B) 

#### Partial ranking functions of CR eval_gen_bitlen_bb0_in(V__opt_len,V__static_len,B) 


### Resulting Chains:eval_gen_bitlen_bb0_in(V__opt_len,V__static_len,B) 
* [67]
* [66]...


### Merging Chains  eval_gen_bitlen_bb0_in/3 into  External patterns of execution 
* [[67]] --> 1 
* [[66]] --> 2 


### Specialization of cost equations eval_gen_bitlen_start/4 
* CE 2 is refined into CE [88,89] 


#### Refined cost equations eval_gen_bitlen_start/4 
* CE 88: eval_gen_bitlen_start(V__opt_len,V__static_len,V__heap_max,B) = 0+ eval_gen_bitlen_bb0_in(V__opt_len,V__static_len,B):1
     [] 
* CE 89: eval_gen_bitlen_start(V__opt_len,V__static_len,V__heap_max,B) = 0+ eval_gen_bitlen_bb0_in(V__opt_len,V__static_len,B):2
     [] 

### Cost equations --> "Loop" of eval_gen_bitlen_start/4 
* CEs [89] --> Loop 68 
* CEs [88] --> Loop 69 

#### Loops of eval_gen_bitlen_start/4 
* Loop 68: eval_gen_bitlen_start(V__opt_len,V__static_len,V__heap_max,B) [] 
* Loop 69: eval_gen_bitlen_start(V__opt_len,V__static_len,V__heap_max,B) [] 

### Ranking functions of CR eval_gen_bitlen_start(V__opt_len,V__static_len,V__heap_max,B) 

#### Partial ranking functions of CR eval_gen_bitlen_start(V__opt_len,V__static_len,V__heap_max,B) 


### Resulting Chains:eval_gen_bitlen_start(V__opt_len,V__static_len,V__heap_max,B) 
* [69]
* [68]...


### Merging Chains  eval_gen_bitlen_start/4 into  External patterns of execution 
* [[69]] --> 1 
* [[68]] --> 2 


Computing Bounds
=====================================

#### Cost of loops [26] 

 * loop 26:eval_gen_bitlen_bb1_in(V__opt_len,V__static_len,V_9,V_bits_0,B,C,D,E,F,G) -> [eval_gen_bitlen_bb1_in(V__opt_len',V__static_len',V_9',V_bits_0',B',C',D',E',F',G')] 
1
#### Cost of phase [26]:eval_gen_bitlen_bb1_in(V__opt_len,V__static_len,V_9,V_bits_0,B,C,D,E,F,G) -> [eval_gen_bitlen_bb1_in(V__opt_len',V__static_len',V_9',V_bits_0',B',C',D',E',F',G')] 
1*it(26)+0
  Such that:it(26) =< -V_bits_0+16
it(26) =< -V_bits_0+V_bits_0'

#### Cost of chains of eval_gen_bitlen_bb1_in(V__opt_len,V__static_len,V_9,V_bits_0,B,C,D,E,F,G):
* Chain [[26],27]: 1*it(26)+0
  Such that:it(26) =< -V_bits_0+16

  with precondition: [B=5,G=0,V_9=E,15>=V_bits_0,V_bits_0>=0] 


#### Cost of loops [28,29] 

 * loop 28:eval_gen_bitlen_bb4_in(V__opt_len,V__static_len,V_9,V__sink,V_overflow_0,B,C,D) -> [eval_gen_bitlen_bb4_in(V__opt_len',V__static_len',V_9',V__sink',V_overflow_0',B',C',D')] 
1
 * loop 29:eval_gen_bitlen_bb4_in(V__opt_len,V__static_len,V_9,V__sink,V_overflow_0,B,C,D) -> [eval_gen_bitlen_bb4_in(V__opt_len',V__static_len',V_9',V__sink',V_overflow_0',B',C',D')] 
1
#### Cost of phase [28,29]:eval_gen_bitlen_bb4_in(V__opt_len,V__static_len,V_9,V__sink,V_overflow_0,B,C,D) -> [eval_gen_bitlen_bb4_in(V__opt_len',V__static_len',V_9',V__sink',V_overflow_0',B',C',D')] 
2*it(28)+0
  Such that:aux(1) =< -V__sink+572
aux(2) =< -V__sink+V__sink'
it(28) =< aux(1)
it(28) =< aux(2)

#### Cost of phase [28,29]:eval_gen_bitlen_bb4_in(V__opt_len,V__static_len,V_9,V__sink,V_overflow_0,B,C,D) -> [eval_gen_bitlen_bb4_in(V__opt_len',V__static_len',V_9',V__sink',V_overflow_0',B',C',D')] 
2*it(28)+0
  Such that:aux(1) =< -V__sink+572
aux(2) =< -V__sink+V__sink'
it(28) =< aux(1)
it(28) =< aux(2)

#### Cost of chains of eval_gen_bitlen_bb4_in(V__opt_len,V__static_len,V_9,V__sink,V_overflow_0,B,C,D):
* Chain [[28,29],31]: 2*it(28)+0
  Such that:aux(3) =< -V__sink+572
it(28) =< aux(3)

  with precondition: [B=3,V_9=C,571>=V__sink,D>=V_overflow_0,V_overflow_0+572>=V__sink+D] 

* Chain [[28,29],30]: 2*it(28)+0
  Such that:aux(4) =< -V__sink+572
it(28) =< aux(4)

  with precondition: [B=4,571>=V__sink] 

* Chain [31]: 0
  with precondition: [B=3,C=V_9,D=V_overflow_0,V__sink>=572] 

* Chain [30]: 0
  with precondition: [B=4,V__sink>=572] 


#### Cost of loops [32] 

 * loop 32:eval_gen_bitlen_bb12_in(V_9,V_overflow_2,B,C,D) -> [eval_gen_bitlen_bb12_in(V_9',V_overflow_2',B',C',D')] 
1
#### Cost of phase [32]:eval_gen_bitlen_bb12_in(V_9,V_overflow_2,B,C,D) -> [eval_gen_bitlen_bb12_in(V_9',V_overflow_2',B',C',D')] 
1*it(32)+0
#### Cost of phase [32]:eval_gen_bitlen_bb12_in(V_9,V_overflow_2,B,C,D) -> [eval_gen_bitlen_bb12_in(V_9',V_overflow_2',B',C',D')] 
1*it(32)+0
#### Cost of phase [32]:eval_gen_bitlen_bb12_in(V_9,V_overflow_2,B,C,D) -> [eval_gen_bitlen_bb12_in(V_9',V_overflow_2',B',C',D')] 
1*it(32)+0
#### Cost of chains of eval_gen_bitlen_bb12_in(V_9,V_overflow_2,B,C,D):
* Chain [[32]]...: 1*it(32)+0
  with precondition: [B>=2,3>=B] 

* Chain [[32],34]: 1*it(32)+0
  with precondition: [B=2,V_9=C,2>=V_overflow_2] 

* Chain [[32],33]: 1*it(32)+0
  with precondition: [B=3,D+2=V_overflow_2,V_9=C,D>=1] 

* Chain [34]: 0
  with precondition: [B=2,C=V_9,2>=V_overflow_2] 

* Chain [33]: 0
  with precondition: [B=3,C=V_9,V_overflow_2=D+2,V_overflow_2>=3] 


#### Cost of loops [37] 

 * loop 37:eval_gen_bitlen_bb11_in(V_9,V_overflow_2,B,C) -> [eval_gen_bitlen_bb11_in(V_9',V_overflow_2',B',C')] 
1*s(5)+2
#### Cost of phase [37]:eval_gen_bitlen_bb11_in(V_9,V_overflow_2,B,C) -> [eval_gen_bitlen_bb11_in(V_9',V_overflow_2',B',C')] 
2*it(37)+1*s(6)+0
  Such that:it(37) =< V_overflow_2/2
it(37) =< V_overflow_2/2-V_overflow_2'/2

#### Cost of phase [37]:eval_gen_bitlen_bb11_in(V_9,V_overflow_2,B,C) -> [eval_gen_bitlen_bb11_in(V_9',V_overflow_2',B',C')] 
2*it(37)+1*s(6)+0
  Such that:it(37) =< V_overflow_2/2
it(37) =< V_overflow_2/2-V_overflow_2'/2

#### Cost of chains of eval_gen_bitlen_bb11_in(V_9,V_overflow_2,B,C):
* Chain [[37],36]: 2*it(37)+2*s(3)+1
  Such that:it(37) =< V_overflow_2/2

  with precondition: [B=2,V_9=C,V_overflow_2>=3] 

* Chain [[37],35]...: 2*aux(7)+2*it(37)+0
  Such that:it(37) =< V_overflow_2/2

  with precondition: [V_overflow_2>=3] 

* Chain [36]: 1*s(3)+1
  with precondition: [B=2,C=V_9,2>=V_overflow_2] 

* Chain [35]...: 1*aux(7)+0
  with precondition: [] 


#### Cost of loops [39,41] 

 * loop 39:eval_gen_bitlen_bb17_in(V_bits_3,V_n_0,B,C) -> [eval_gen_bitlen_bb17_in(V_bits_3',V_n_0',B',C')] 
1
 * loop 41:eval_gen_bitlen_bb17_in(V_bits_3,V_n_0,B,C) -> [eval_gen_bitlen_bb17_in(V_bits_3',V_n_0',B',C')] 
1
#### Cost of phase [39,41]:eval_gen_bitlen_bb17_in(V_bits_3,V_n_0,B,C) -> [eval_gen_bitlen_bb17_in(V_bits_3',V_n_0',B',C')] 
2*it(39)+0
#### Cost of loops [38,40] 

 * loop 38:eval_gen_bitlen_bb17_in(V_bits_3,V_n_0,B,C) -> [eval_gen_bitlen_bb17_in(V_bits_3',V_n_0',B',C')] 
1
 * loop 40:eval_gen_bitlen_bb17_in(V_bits_3,V_n_0,B,C) -> [eval_gen_bitlen_bb17_in(V_bits_3',V_n_0',B',C')] 
1
#### Cost of phase [38,40]:eval_gen_bitlen_bb17_in(V_bits_3,V_n_0,B,C) -> [eval_gen_bitlen_bb17_in(V_bits_3',V_n_0',B',C')] 
1*it(38)+1*it(40)+0
  Such that:it(38) =< V_n_0
it(38) =< V_n_0-V_n_0'

#### Cost of phase [38,40]:eval_gen_bitlen_bb17_in(V_bits_3,V_n_0,B,C) -> [eval_gen_bitlen_bb17_in(V_bits_3',V_n_0',B',C')] 
1*it(38)+1*it(40)+0
  Such that:it(38) =< V_n_0
it(38) =< V_n_0-V_n_0'

#### Cost of chains of eval_gen_bitlen_bb17_in(V_bits_3,V_n_0,B,C):
* Chain [[39,41]]...: 2*it(39)+0
  with precondition: [0>=V_n_0+1,B=2] 

* Chain [[38,40]]...: 1*it(38)+1*it(40)+0
  Such that:it(38) =< V_n_0

  with precondition: [V_n_0>=1,B=2] 

* Chain [[38,40],42]: 1*it(38)+1*it(40)+0
  Such that:it(38) =< V_n_0

  with precondition: [B=2,V_bits_3=C+1,V_n_0>=1] 

* Chain [42]: 0
  with precondition: [V_n_0=0,B=2,C+1=V_bits_3] 


#### Cost of loops [46] 

 * loop 46:eval_gen_bitlen_bb15_in(V_bits_3,B) -> [eval_gen_bitlen_bb15_in(V_bits_3',B')] 
1*s(11)+0
#### Cost of phase [46]:eval_gen_bitlen_bb15_in(V_bits_3,B) -> [eval_gen_bitlen_bb15_in(V_bits_3',B')] 
1*s(12)+0
#### Cost of phase [46]:eval_gen_bitlen_bb15_in(V_bits_3,B) -> [eval_gen_bitlen_bb15_in(V_bits_3',B')] 
1*s(12)+0
#### Cost of loops [45] 

 * loop 45:eval_gen_bitlen_bb15_in(V_bits_3,B) -> [eval_gen_bitlen_bb15_in(V_bits_3',B')] 
1*s(18)+0
#### Cost of phase [45]:eval_gen_bitlen_bb15_in(V_bits_3,B) -> [eval_gen_bitlen_bb15_in(V_bits_3',B')] 
1*s(19)+0
#### Cost of phase [45]:eval_gen_bitlen_bb15_in(V_bits_3,B) -> [eval_gen_bitlen_bb15_in(V_bits_3',B')] 
1*s(19)+0
#### Cost of chains of eval_gen_bitlen_bb15_in(V_bits_3,B):
* Chain [[46]]...: 1*s(12)+0
  with precondition: [0>=V_bits_3+1,B=4] 

* Chain [[46],44]...: 2*aux(9)+0
  with precondition: [B=4,0>=V_bits_3+1] 

* Chain [[45],47]: 1*s(19)+0
  with precondition: [B=4,V_bits_3>=1] 

* Chain [[45],43]...: 2*aux(11)+0
  with precondition: [B=4,V_bits_3>=2] 

* Chain [47]: 0
  with precondition: [V_bits_3=0,B=4] 

* Chain [44]...: 1*aux(9)+0
  with precondition: [B=4,0>=V_bits_3+1] 

* Chain [43]...: 1*aux(11)+0
  with precondition: [B=4,V_bits_3>=1] 


#### Cost of chains of loop_cont_eval_gen_bitlen_bb11_in(E,A,B):
* Chain [51]: 1
  with precondition: [E=2,A=0] 

* Chain [50]: 1*s(25)+1
  with precondition: [E=2,A>=1] 

* Chain [49]...: 1*aux(13)+0
  with precondition: [E=2,0>=A+1] 

* Chain [48]...: 1*aux(14)+0
  with precondition: [E=2,A>=1] 


#### Cost of chains of loop_cont_eval_gen_bitlen_bb4_in(E,A,B,C):
* Chain [57]: 1*s(30)+3
  with precondition: [E=3,A=0,2>=B] 

* Chain [56]: 2*s(31)+2*s(32)+3
  Such that:s(31) =< B/2

  with precondition: [E=3,A=0,B>=3] 

* Chain [55]: 2*s(33)+3
  with precondition: [E=3,2>=B,A>=1] 

* Chain [54]: 2*s(35)+3*s(36)+3
  Such that:s(35) =< B/2

  with precondition: [E=3,A>=1,B>=3] 

* Chain [53]: 0
  with precondition: [E=4] 

* Chain [52]...: 13*s(38)+6*s(42)+2
  Such that:aux(15) =< B/2
s(42) =< aux(15)

  with precondition: [E=3] 


#### Cost of chains of loop_cont_eval_gen_bitlen_bb1_in(K,A,B,C,D,E,F):
* Chain [65]...: 2*s(52)+6*s(54)+13*s(55)+3
  Such that:s(51) =< -D+572
s(53) =< -D/2+E/2+286
s(54) =< s(53)
s(52) =< s(51)

  with precondition: [K=5,571>=D] 

* Chain [64]...: 6*s(57)+13*s(58)+3
  Such that:s(56) =< E/2
s(57) =< s(56)

  with precondition: [K=5,D>=572] 

* Chain [63]: 8*s(60)+6*s(61)+2*s(67)+4
  Such that:s(67) =< -D/2+E/2+286
aux(16) =< -D+572
s(60) =< aux(16)

  with precondition: [K=5,571>=D] 

* Chain [62]: 2*s(72)+2*s(73)+2*s(74)+4
  Such that:s(71) =< -D+572
s(73) =< -D/2+E/2+286
s(72) =< s(71)

  with precondition: [K=5,C=0,571>=D,E+569>=D] 

* Chain [61]: 1*aux(17)+0
  with precondition: [K=5,D>=572] 

* Chain [60]: 2*s(76)+2*s(77)+4
  Such that:s(76) =< E/2

  with precondition: [K=5,C=0,D>=572,E>=3] 

* Chain [59]: 2*s(78)+4
  with precondition: [K=5,2>=E,C>=1,D>=572] 

* Chain [58]: 2*s(79)+3*s(80)+4
  Such that:s(79) =< E/2

  with precondition: [K=5,C>=1,D>=572,E>=3] 


#### Cost of chains of eval_gen_bitlen_bb0_in(V__opt_len,V__static_len,B):
* Chain [67]: 1*aux(21)+0
  with precondition: [] 

* Chain [66]...: 1*aux(23)+0
  with precondition: [] 


#### Cost of chains of eval_gen_bitlen_start(V__opt_len,V__static_len,V__heap_max,B):
* Chain [69]: 1*s(113)+0
  with precondition: [] 

* Chain [68]...: 1*s(114)+0
  with precondition: [] 


Closed-form bounds of eval_gen_bitlen_start(V__opt_len,V__static_len,V__heap_max,B): 
-------------------------------------
* Chain [69] with precondition: [] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [68]... with precondition: [] 
    - Upper bound: inf 
    - Complexity: infinity 

### Maximum cost of eval_gen_bitlen_start(V__opt_len,V__static_len,V__heap_max,B): inf 
Asymptotic class: infinity 

Time statistics: 
-------------------------------------
* Partial evaluation computed in 113 ms.
* Invariants computed in 206 ms.
   - Backward Invariants 100 ms.
   - Transitive Invariants 48 ms.
* Refinement performed in 526 ms.
* Termination proved in 42 ms.
* Upper bounds computed in 247 ms.
   - Equation cost structures 98 ms.
   - Phase cost structures 82 ms.
   - Chain cost structures 92 ms.
   - Solving cost expressions 0 ms.
* Total analysis performed in 1298 ms.


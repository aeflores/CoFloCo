WARNING: Excluded non-linear constraints:[A-D*C>=0,A-D*C+1=<D]
WARNING: Excluded non-linear constraints:[A-D*C>=0,A-D*C+1=< -D]
WARNING: Excluded non-linear constraints:[-A+D*C>=0,-A+D*C+1=<D]
WARNING: Excluded non-linear constraints:[-A+D*C>=0,-A+D*C+1=< -D]
WARNING: Excluded non-linear constraints:[A-D*C>=0,A-D*C+1=<D]
WARNING: Excluded non-linear constraints:[A-D*C>=0,A-D*C+1=< -D]
WARNING: Excluded non-linear constraints:[-A+D*C>=0,-A+D*C+1=<D]
WARNING: Excluded non-linear constraints:[-A+D*C>=0,-A+D*C+1=< -D]
WARNING: Excluded non-linear constraints:[A-C*D>=0,A-C*D+1=<C]
WARNING: Excluded non-linear constraints:[A-C*D>=0,A-C*D+1=< -C]
WARNING: Excluded non-linear constraints:[-A+C*D>=0,-A+C*D+1=<C]
WARNING: Excluded non-linear constraints:[-A+C*D>=0,-A+C*D+1=< -C]
Warning: Ignored call to eval_LogLuvEncode24_stop/1 in equation eval_LogLuvEncode24_48/1 
Warning: Ignored call to eval_LogLuvEncode24_stop/1 in equation eval_LogLuvEncode24_50/1 
Warning: Ignored call to eval_LogLuvEncode24_stop/1 in equation eval_LogLuvEncode24_52/1 
Warning: Ignored call to eval_LogLuvEncode24_stop/1 in equation eval_LogLuvEncode24_bb13_in/1 

Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. non_recursive  : [eval_LogLuvEncode24_48/1]
1. non_recursive  : [eval_LogLuvEncode24_47/1]
2. non_recursive  : [eval_LogLuvEncode24_50/1]
3. non_recursive  : [eval_LogLuvEncode24_49/1]
4. non_recursive  : [eval_LogLuvEncode24_52/1]
5. non_recursive  : [eval_LogLuvEncode24_51/1]
6. recursive  : [eval_LogLuvEncode24_21/3,eval_LogLuvEncode24_22/3,eval_LogLuvEncode24_bb11_in/3,eval_LogLuvEncode24_bb7_in/2]
7. non_recursive  : [eval_LogLuvEncode24_bb13_in/1]
8. non_recursive  : [loop_cont_eval_LogLuvEncode24_bb7_in/2]
9. non_recursive  : [eval_LogLuvEncode24_bb6_in/2]
10. non_recursive  : [eval_LogLuvEncode24_10/2]
11. non_recursive  : [eval_LogLuvEncode24_9/2]
12. non_recursive  : [eval_LogLuvEncode24_bb0_in/2]
13. non_recursive  : [eval_LogLuvEncode24_start/3]

#### Obtained direct recursion through partial evaluation 
0. SCC is completely evaluated into other SCCs
1. SCC is completely evaluated into other SCCs
2. SCC is completely evaluated into other SCCs
3. SCC is completely evaluated into other SCCs
4. SCC is completely evaluated into other SCCs
5. SCC is completely evaluated into other SCCs
6. SCC is partially evaluated into eval_LogLuvEncode24_bb7_in/2
7. SCC is completely evaluated into other SCCs
8. SCC is completely evaluated into other SCCs
9. SCC is partially evaluated into eval_LogLuvEncode24_bb6_in/2
10. SCC is completely evaluated into other SCCs
11. SCC is completely evaluated into other SCCs
12. SCC is partially evaluated into eval_LogLuvEncode24_bb0_in/2
13. SCC is partially evaluated into eval_LogLuvEncode24_start/3

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations eval_LogLuvEncode24_bb7_in/2 
* CE 12 is refined into CE [17] 
* CE 13 is refined into CE [18] 
* CE 16 is refined into CE [19] 
* CE 14 is refined into CE [20] 
* CE 15 is refined into CE [21] 


#### Refined cost equations eval_LogLuvEncode24_bb7_in/2 
* CE 17: eval_LogLuvEncode24_bb7_in(V_i_0,B) = 0
     [V_i_0>=1,B=2] 
* CE 18: eval_LogLuvEncode24_bb7_in(V_i_0,B) = 0
     [0>=V_i_0+1,B=2] 
* CE 19: eval_LogLuvEncode24_bb7_in(V_i_0,B) = 0
     [B=2,V_i_0=0] 
* CE 20: eval_LogLuvEncode24_bb7_in(V_i_0,B) = 1+ eval_LogLuvEncode24_bb7_in(C,D)
     [V_i_0>=1,V_i_0=C+1,D=2,B=2] 
* CE 21: eval_LogLuvEncode24_bb7_in(V_i_0,B) = 1+ eval_LogLuvEncode24_bb7_in(C,D)
     [0>=V_i_0+1,V_i_0=C+1,D=2,B=2] 

### Cost equations --> "Loop" of eval_LogLuvEncode24_bb7_in/2 
* CEs [20] --> Loop 9 
* CEs [21] --> Loop 10 
* CEs [17] --> Loop 11 
* CEs [18] --> Loop 12 
* CEs [19] --> Loop 13 

#### Loops of eval_LogLuvEncode24_bb7_in/2 
* Loop 9: eval_LogLuvEncode24_bb7_in(V_i_0,B)->  eval_LogLuvEncode24_bb7_in(V_i_0',B')
                  [V_i_0>=1,V_i_0=V_i_0'+1,B'=2,B=2] 
* Loop 10: eval_LogLuvEncode24_bb7_in(V_i_0,B)->  eval_LogLuvEncode24_bb7_in(V_i_0',B')
                  [0>=V_i_0+1,V_i_0=V_i_0'+1,B'=2,B=2] 
* Loop 11: eval_LogLuvEncode24_bb7_in(V_i_0,B) [V_i_0>=1,B=2] 
* Loop 12: eval_LogLuvEncode24_bb7_in(V_i_0,B) [0>=V_i_0+1,B=2] 
* Loop 13: eval_LogLuvEncode24_bb7_in(V_i_0,B) [B=2,V_i_0=0] 

### Ranking functions of CR eval_LogLuvEncode24_bb7_in(V_i_0,B) 
* RF of phase [9]: [V_i_0]

#### Partial ranking functions of CR eval_LogLuvEncode24_bb7_in(V_i_0,B) 
* Partial RF of phase [9]:
  - RF of loop [9:1]:
    V_i_0


### Resulting Chains:eval_LogLuvEncode24_bb7_in(V_i_0,B) 
* [[10]]...
* [[10],12]
* [[9],13]
* [[9],11]
* [13]
* [12]
* [11]


### Merging Chains  eval_LogLuvEncode24_bb7_in/2 into  External patterns of execution 
* [[13]] --> 1 
* [[12],[12,[10]]] --> 2 
* [[11],[11,[9]],[13,[9]]] --> 3 
* [[[10]]] --> 4 


### Specialization of cost equations eval_LogLuvEncode24_bb6_in/2 
* CE 11 is refined into CE [22,23,24,25] 


#### Refined cost equations eval_LogLuvEncode24_bb6_in/2 
* CE 22: eval_LogLuvEncode24_bb6_in(V_8,B) = 1+ eval_LogLuvEncode24_bb7_in(C,D):1
     [D=2,C=0,V_8=0] 
* CE 23: eval_LogLuvEncode24_bb6_in(V_8,B) = 1+ eval_LogLuvEncode24_bb7_in(V_8,C):2
     [0>=V_8+1,C=2] 
* CE 24: eval_LogLuvEncode24_bb6_in(V_8,B) = 1+ eval_LogLuvEncode24_bb7_in(V_8,C):3
     [V_8>=1,C=2] 
* CE 25: eval_LogLuvEncode24_bb6_in(V_8,B) = 1+ eval_LogLuvEncode24_bb7_in(V_8,C):4
     [0>=V_8+1,C=2] 

### Cost equations --> "Loop" of eval_LogLuvEncode24_bb6_in/2 
* CEs [25] --> Loop 14 
* CEs [24] --> Loop 15 
* CEs [23] --> Loop 16 
* CEs [22] --> Loop 17 

#### Loops of eval_LogLuvEncode24_bb6_in/2 
* Loop 14: eval_LogLuvEncode24_bb6_in(V_8,B) [0>=V_8+1] 
* Loop 15: eval_LogLuvEncode24_bb6_in(V_8,B) [V_8>=1] 
* Loop 16: eval_LogLuvEncode24_bb6_in(V_8,B) [0>=V_8+1] 
* Loop 17: eval_LogLuvEncode24_bb6_in(V_8,B) [V_8=0] 

### Ranking functions of CR eval_LogLuvEncode24_bb6_in(V_8,B) 

#### Partial ranking functions of CR eval_LogLuvEncode24_bb6_in(V_8,B) 


### Resulting Chains:eval_LogLuvEncode24_bb6_in(V_8,B) 
* [17]
* [16]
* [15]
* [14]...


### Merging Chains  eval_LogLuvEncode24_bb6_in/2 into  External patterns of execution 
* [[17]] --> 1 
* [[16]] --> 2 
* [[15]] --> 3 
* [[14]] --> 4 


### Specialization of cost equations eval_LogLuvEncode24_bb0_in/2 
* CE 3 is refined into CE [26] 
* CE 4 is refined into CE [27,28] 
* CE 5 is refined into CE [29,30,31] 
* CE 6 is refined into CE [32,33,34] 
* CE 7 is refined into CE [35,36] 
* CE 8 is refined into CE [37] 
* CE 9 is refined into CE [38] 
* CE 10 is refined into CE [39] 


#### Refined cost equations eval_LogLuvEncode24_bb0_in/2 
* CE 26: eval_LogLuvEncode24_bb0_in(V_cc,B) = 0+ eval_LogLuvEncode24_bb6_in(C,B):1
     [C=0,V_cc=0] 
* CE 27: eval_LogLuvEncode24_bb0_in(V_cc,B) = 0+ eval_LogLuvEncode24_bb6_in(C,B):1
     [V_cc>=1,C=0] 
* CE 28: eval_LogLuvEncode24_bb0_in(V_cc,B) = 0+ eval_LogLuvEncode24_bb6_in(C,B):3
     [C>=1,V_cc>=1] 
* CE 29: eval_LogLuvEncode24_bb0_in(V_cc,B) = 0+ eval_LogLuvEncode24_bb6_in(C,B):1
     [V_cc>=1,C=0] 
* CE 30: eval_LogLuvEncode24_bb0_in(V_cc,B) = 0+ eval_LogLuvEncode24_bb6_in(C,B):2
     [V_cc>=1,0>=C+1] 
* CE 31: eval_LogLuvEncode24_bb0_in(V_cc,B) = 0+ eval_LogLuvEncode24_bb6_in(C,B):4
     [V_cc>=1,0>=C+1] 
* CE 32: eval_LogLuvEncode24_bb0_in(V_cc,B) = 0+ eval_LogLuvEncode24_bb6_in(C,B):1
     [0>=V_cc+1,C=0] 
* CE 33: eval_LogLuvEncode24_bb0_in(V_cc,B) = 0+ eval_LogLuvEncode24_bb6_in(C,B):2
     [0>=C+1,0>=V_cc+1] 
* CE 34: eval_LogLuvEncode24_bb0_in(V_cc,B) = 0+ eval_LogLuvEncode24_bb6_in(C,B):4
     [0>=C+1,0>=V_cc+1] 
* CE 35: eval_LogLuvEncode24_bb0_in(V_cc,B) = 0+ eval_LogLuvEncode24_bb6_in(C,B):1
     [0>=V_cc+1,C=0] 
* CE 36: eval_LogLuvEncode24_bb0_in(V_cc,B) = 0+ eval_LogLuvEncode24_bb6_in(C,B):3
     [C>=1,0>=V_cc+1] 
* CE 37: eval_LogLuvEncode24_bb0_in(V_cc,B) = 0
     [] 
* CE 38: eval_LogLuvEncode24_bb0_in(V_cc,B) = 0
     [] 
* CE 39: eval_LogLuvEncode24_bb0_in(V_cc,B) = 0
     [0>=V_cc+1] 

### Cost equations --> "Loop" of eval_LogLuvEncode24_bb0_in/2 
* CEs [26,27,28,29,30,32,33,35,36,37,38,39] --> Loop 18 
* CEs [31] --> Loop 19 
* CEs [34] --> Loop 20 

#### Loops of eval_LogLuvEncode24_bb0_in/2 
* Loop 18: eval_LogLuvEncode24_bb0_in(V_cc,B) [] 
* Loop 19: eval_LogLuvEncode24_bb0_in(V_cc,B) [V_cc>=1] 
* Loop 20: eval_LogLuvEncode24_bb0_in(V_cc,B) [0>=V_cc+1] 

### Ranking functions of CR eval_LogLuvEncode24_bb0_in(V_cc,B) 

#### Partial ranking functions of CR eval_LogLuvEncode24_bb0_in(V_cc,B) 


### Resulting Chains:eval_LogLuvEncode24_bb0_in(V_cc,B) 
* [20]...
* [19]...
* [18]


### Merging Chains  eval_LogLuvEncode24_bb0_in/2 into  External patterns of execution 
* [[18]] --> 1 
* [[20]] --> 2 
* [[19]] --> 3 


### Specialization of cost equations eval_LogLuvEncode24_start/3 
* CE 2 is refined into CE [40,41,42] 


#### Refined cost equations eval_LogLuvEncode24_start/3 
* CE 40: eval_LogLuvEncode24_start(V_cc,V_s,B) = 0+ eval_LogLuvEncode24_bb0_in(V_cc,B):1
     [] 
* CE 41: eval_LogLuvEncode24_start(V_cc,V_s,B) = 0+ eval_LogLuvEncode24_bb0_in(V_cc,B):2
     [0>=V_cc+1] 
* CE 42: eval_LogLuvEncode24_start(V_cc,V_s,B) = 0+ eval_LogLuvEncode24_bb0_in(V_cc,B):3
     [V_cc>=1] 

### Cost equations --> "Loop" of eval_LogLuvEncode24_start/3 
* CEs [42] --> Loop 21 
* CEs [41] --> Loop 22 
* CEs [40] --> Loop 23 

#### Loops of eval_LogLuvEncode24_start/3 
* Loop 21: eval_LogLuvEncode24_start(V_cc,V_s,B) [V_cc>=1] 
* Loop 22: eval_LogLuvEncode24_start(V_cc,V_s,B) [0>=V_cc+1] 
* Loop 23: eval_LogLuvEncode24_start(V_cc,V_s,B) [] 

### Ranking functions of CR eval_LogLuvEncode24_start(V_cc,V_s,B) 

#### Partial ranking functions of CR eval_LogLuvEncode24_start(V_cc,V_s,B) 


### Resulting Chains:eval_LogLuvEncode24_start(V_cc,V_s,B) 
* [23]
* [22]...
* [21]...


### Merging Chains  eval_LogLuvEncode24_start/3 into  External patterns of execution 
* [[23]] --> 1 
* [[22]] --> 2 
* [[21]] --> 3 


Computing Bounds
=====================================

#### Cost of loops [10] 

 * loop 10:eval_LogLuvEncode24_bb7_in(V_i_0,B) -> [eval_LogLuvEncode24_bb7_in(V_i_0',B')] 
1
#### Cost of phase [10]:eval_LogLuvEncode24_bb7_in(V_i_0,B) -> [eval_LogLuvEncode24_bb7_in(V_i_0',B')] 
1*it(10)+0
#### Cost of phase [10]:eval_LogLuvEncode24_bb7_in(V_i_0,B) -> [eval_LogLuvEncode24_bb7_in(V_i_0',B')] 
1*it(10)+0
#### Cost of loops [9] 

 * loop 9:eval_LogLuvEncode24_bb7_in(V_i_0,B) -> [eval_LogLuvEncode24_bb7_in(V_i_0',B')] 
1
#### Cost of phase [9]:eval_LogLuvEncode24_bb7_in(V_i_0,B) -> [eval_LogLuvEncode24_bb7_in(V_i_0',B')] 
1*it(9)+0
  Such that:it(9) =< V_i_0
it(9) =< V_i_0-V_i_0'

#### Cost of phase [9]:eval_LogLuvEncode24_bb7_in(V_i_0,B) -> [eval_LogLuvEncode24_bb7_in(V_i_0',B')] 
1*it(9)+0
  Such that:it(9) =< V_i_0
it(9) =< V_i_0-V_i_0'

#### Cost of chains of eval_LogLuvEncode24_bb7_in(V_i_0,B):
* Chain [[10]]...: 1*it(10)+0
  with precondition: [0>=V_i_0+1,B=2] 

* Chain [[10],12]: 1*it(10)+0
  with precondition: [B=2,0>=V_i_0+1] 

* Chain [[9],13]: 1*it(9)+0
  Such that:it(9) =< V_i_0

  with precondition: [B=2,V_i_0>=1] 

* Chain [[9],11]: 1*it(9)+0
  Such that:it(9) =< V_i_0

  with precondition: [B=2,V_i_0>=2] 

* Chain [13]: 0
  with precondition: [V_i_0=0,B=2] 

* Chain [12]: 0
  with precondition: [B=2,0>=V_i_0+1] 

* Chain [11]: 0
  with precondition: [B=2,V_i_0>=1] 


#### Cost of chains of eval_LogLuvEncode24_bb6_in(V_8,B):
* Chain [17]: 1
  with precondition: [V_8=0] 

* Chain [16]: 1*s(4)+1
  with precondition: [0>=V_8+1] 

* Chain [15]: 2*s(6)+1
  Such that:s(5) =< V_8
s(6) =< s(5)

  with precondition: [V_8>=1] 

* Chain [14]...: 1*s(7)+1
  with precondition: [0>=V_8+1] 


#### Cost of chains of eval_LogLuvEncode24_bb0_in(V_cc,B):
* Chain [20]...: 1*s(8)+1
  with precondition: [0>=V_cc+1] 

* Chain [19]...: 1*s(9)+1
  with precondition: [V_cc>=1] 

* Chain [18]: 1*aux(3)+0
  with precondition: [] 


#### Cost of chains of eval_LogLuvEncode24_start(V_cc,V_s,B):
* Chain [23]: 1*s(16)+0
  with precondition: [] 

* Chain [22]...: 1*s(17)+1
  with precondition: [0>=V_cc+1] 

* Chain [21]...: 1*s(18)+1
  with precondition: [V_cc>=1] 


Closed-form bounds of eval_LogLuvEncode24_start(V_cc,V_s,B): 
-------------------------------------
* Chain [23] with precondition: [] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [22]... with precondition: [0>=V_cc+1] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [21]... with precondition: [V_cc>=1] 
    - Upper bound: inf 
    - Complexity: infinity 

### Maximum cost of eval_LogLuvEncode24_start(V_cc,V_s,B): inf 
Asymptotic class: infinity 

Time statistics: 
-------------------------------------
* Partial evaluation computed in 65 ms.
* Invariants computed in 35 ms.
   - Backward Invariants 18 ms.
   - Transitive Invariants 6 ms.
* Refinement performed in 78 ms.
* Termination proved in 7 ms.
* Upper bounds computed in 58 ms.
   - Equation cost structures 29 ms.
   - Phase cost structures 11 ms.
   - Chain cost structures 15 ms.
   - Solving cost expressions 1 ms.
* Total analysis performed in 310 ms.


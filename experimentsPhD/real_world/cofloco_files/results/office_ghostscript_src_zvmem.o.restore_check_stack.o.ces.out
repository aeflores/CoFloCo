Warning: Ignored call to eval_restore_check_stack_stop/1 in equation eval_restore_check_stack_bb20_in/1 

Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. recursive  : [eval_restore_check_stack_25/4,eval_restore_check_stack_26/4,eval_restore_check_stack_34/4,eval_restore_check_stack_35/4,eval_restore_check_stack_NewDefault_in/4,eval_restore_check_stack_bb15_in/4,eval_restore_check_stack_bb17_in/4,eval_restore_check_stack_bb18_in/4,eval_restore_check_stack_bb2_in/4,eval_restore_check_stack_bb8_in/4]
1. recursive  : [eval_restore_check_stack_bb1_in/2,loop_cont_eval_restore_check_stack_bb2_in/3]
2. non_recursive  : [eval_restore_check_stack_bb20_in/1]
3. non_recursive  : [loop_cont_eval_restore_check_stack_bb1_in/2]
4. non_recursive  : [eval_restore_check_stack_bb0_in/1]
5. non_recursive  : [eval_restore_check_stack_start/2]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into eval_restore_check_stack_bb2_in/4
1. SCC is partially evaluated into eval_restore_check_stack_bb1_in/2
2. SCC is completely evaluated into other SCCs
3. SCC is completely evaluated into other SCCs
4. SCC is partially evaluated into eval_restore_check_stack_bb0_in/1
5. SCC is partially evaluated into eval_restore_check_stack_start/2

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations eval_restore_check_stack_bb2_in/4 
* CE 7 is refined into CE [13] 
* CE 8 is refined into CE [14] 
* CE 12 is refined into CE [15] 
* CE 11 is refined into CE [16] 
* CE 9 is refined into CE [17] 
* CE 10 is refined into CE [18] 


#### Refined cost equations eval_restore_check_stack_bb2_in/4 
* CE 13: eval_restore_check_stack_bb2_in(V_size_0,V_size_1,B,C) = 0
     [V_size_0>=V_size_1,V_size_1>=1,B=2] 
* CE 14: eval_restore_check_stack_bb2_in(V_size_0,V_size_1,B,C) = 0
     [V_size_0>=V_size_1,0>=V_size_1+1,B=2] 
* CE 15: eval_restore_check_stack_bb2_in(V_size_0,V_size_1,B,C) = 0
     [V_size_0>=0,B=3,V_size_1=0] 
* CE 16: eval_restore_check_stack_bb2_in(V_size_0,V_size_1,B,C) = 0
     [V_size_0>=0,B=2,V_size_1=0] 
* CE 17: eval_restore_check_stack_bb2_in(V_size_0,V_size_1,B,C) = 1+ eval_restore_check_stack_bb2_in(V_size_0,D,B,C)
     [V_size_0>=V_size_1,B>=2,V_size_1>=1,3>=B,V_size_1=D+1] 
* CE 18: eval_restore_check_stack_bb2_in(V_size_0,V_size_1,B,C) = 1+ eval_restore_check_stack_bb2_in(V_size_0,D,B,C)
     [V_size_0>=V_size_1,B>=2,3>=B,0>=V_size_1+1,V_size_1=D+1] 

### Cost equations --> "Loop" of eval_restore_check_stack_bb2_in/4 
* CEs [17] --> Loop 11 
* CEs [18] --> Loop 12 
* CEs [13] --> Loop 13 
* CEs [14] --> Loop 14 
* CEs [15] --> Loop 15 
* CEs [16] --> Loop 16 

#### Loops of eval_restore_check_stack_bb2_in/4 
* Loop 11: eval_restore_check_stack_bb2_in(V_size_0,V_size_1,B,C)->  eval_restore_check_stack_bb2_in(V_size_0,V_size_1',B,C)
                  [V_size_0>=V_size_1,B>=2,V_size_1>=1,3>=B,V_size_1=V_size_1'+1] 
* Loop 12: eval_restore_check_stack_bb2_in(V_size_0,V_size_1,B,C)->  eval_restore_check_stack_bb2_in(V_size_0,V_size_1',B,C)
                  [V_size_0>=V_size_1,B>=2,3>=B,0>=V_size_1+1,V_size_1=V_size_1'+1] 
* Loop 13: eval_restore_check_stack_bb2_in(V_size_0,V_size_1,B,C) [V_size_0>=V_size_1,V_size_1>=1,B=2] 
* Loop 14: eval_restore_check_stack_bb2_in(V_size_0,V_size_1,B,C) [V_size_0>=V_size_1,0>=V_size_1+1,B=2] 
* Loop 15: eval_restore_check_stack_bb2_in(V_size_0,V_size_1,B,C) [V_size_0>=0,B=3,V_size_1=0] 
* Loop 16: eval_restore_check_stack_bb2_in(V_size_0,V_size_1,B,C) [V_size_0>=0,B=2,V_size_1=0] 

### Ranking functions of CR eval_restore_check_stack_bb2_in(V_size_0,V_size_1,B,C) 
* RF of phase [11]: [V_size_1]

#### Partial ranking functions of CR eval_restore_check_stack_bb2_in(V_size_0,V_size_1,B,C) 
* Partial RF of phase [11]:
  - RF of loop [11:1]:
    V_size_1


### Resulting Chains:eval_restore_check_stack_bb2_in(V_size_0,V_size_1,B,C) 
* [[12]]...
* [[12],14]
* [[11],16]
* [[11],15]
* [[11],13]
* [16]
* [15]
* [14]
* [13]


### Merging Chains  eval_restore_check_stack_bb2_in/4 into  External patterns of execution 
* [[16]] --> 1 
* [[15]] --> 2 
* [[14],[14,[12]]] --> 3 
* [[13],[13,[11]],[16,[11]]] --> 4 
* [[15,[11]]] --> 5 
* [[[12]]] --> 6 


### Specialization of cost equations eval_restore_check_stack_bb1_in/2 
* CE 6 is refined into CE [19,20,21,22] 
* CE 5 is refined into CE [23,24,25] 


#### Refined cost equations eval_restore_check_stack_bb1_in/2 
* CE 19: eval_restore_check_stack_bb1_in(V_size_0,B) = 1+ eval_restore_check_stack_bb2_in(C,D,E,F):1
     [E=2,D=0,C=0,B=2,V_size_0=0] 
* CE 20: eval_restore_check_stack_bb1_in(V_size_0,B) = 1+ eval_restore_check_stack_bb2_in(V_size_0,V_size_0,C,D):3
     [0>=V_size_0+1,C=2,B=2] 
* CE 21: eval_restore_check_stack_bb1_in(V_size_0,B) = 1+ eval_restore_check_stack_bb2_in(V_size_0,V_size_0,C,D):4
     [V_size_0>=1,C=2,B=2] 
* CE 22: eval_restore_check_stack_bb1_in(V_size_0,B) = 1+ eval_restore_check_stack_bb2_in(V_size_0,V_size_0,C,D):6
     [0>=V_size_0+1,C=2,B=2] 
* CE 23: eval_restore_check_stack_bb1_in(V_size_0,B) = 2+ eval_restore_check_stack_bb2_in(C,D,E,F):2+ eval_restore_check_stack_bb1_in(F,G)
     [G=2,E=3,D=0,C=0,B=2,V_size_0=0] 
* CE 24: eval_restore_check_stack_bb1_in(V_size_0,B) = 2+ eval_restore_check_stack_bb2_in(V_size_0,V_size_0,C,D):5+ eval_restore_check_stack_bb1_in(D,E)
     [V_size_0>=1,E=2,C=3,B=2] 
* CE 25: eval_restore_check_stack_bb1_in(V_size_0,B) = 2+ eval_restore_check_stack_bb2_in(V_size_0,V_size_0,C,D):6
     [0>=V_size_0+1,E=2,C=3,B=2] 

### Cost equations --> "Loop" of eval_restore_check_stack_bb1_in/2 
* CEs [22,25] --> Loop 17 
* CEs [24] --> Loop 18 
* CEs [23] --> Loop 19 
* CEs [21] --> Loop 20 
* CEs [20] --> Loop 21 
* CEs [19] --> Loop 22 

#### Loops of eval_restore_check_stack_bb1_in/2 
* Loop 17: eval_restore_check_stack_bb1_in(V_size_0,B) [0>=V_size_0+1,B=2] 
* Loop 18: eval_restore_check_stack_bb1_in(V_size_0,B)->  eval_restore_check_stack_bb1_in(V_size_0',B')
                  [V_size_0>=1,B'=2,B=2] 
* Loop 19: eval_restore_check_stack_bb1_in(V_size_0,B)->  eval_restore_check_stack_bb1_in(V_size_0',B')
                  [B'=2,B=2,V_size_0=0] 
* Loop 20: eval_restore_check_stack_bb1_in(V_size_0,B) [V_size_0>=1,B=2] 
* Loop 21: eval_restore_check_stack_bb1_in(V_size_0,B) [0>=V_size_0+1,B=2] 
* Loop 22: eval_restore_check_stack_bb1_in(V_size_0,B) [B=2,V_size_0=0] 

### Ranking functions of CR eval_restore_check_stack_bb1_in(V_size_0,B) 

#### Partial ranking functions of CR eval_restore_check_stack_bb1_in(V_size_0,B) 


### Resulting Chains:eval_restore_check_stack_bb1_in(V_size_0,B) 
* [[18,19]]...
* [[18,19],22]
* [[18,19],21]
* [[18,19],20]
* [[18,19],17]...
* [22]
* [21]
* [20]
* [17]...


### Merging Chains  eval_restore_check_stack_bb1_in/2 into  External patterns of execution 
* [[20],[22],[20,[18,19]],[21,[18,19]],[22,[18,19]]] --> 1 
* [[21]] --> 2 
* [[17]] --> 3 
* [[17,[18,19]]] --> 4 
* [[[18,19]]] --> 5 


### Specialization of cost equations eval_restore_check_stack_bb0_in/1 
* CE 3 is refined into CE [26,27,28] 
* CE 4 is refined into CE [29,30,31,32,33] 


#### Refined cost equations eval_restore_check_stack_bb0_in/1 
* CE 26: eval_restore_check_stack_bb0_in(B) = 1+ eval_restore_check_stack_bb1_in(C,D):1
     [C>=0,D=2] 
* CE 27: eval_restore_check_stack_bb0_in(B) = 1+ eval_restore_check_stack_bb1_in(C,D):4
     [C>=0,D=2] 
* CE 28: eval_restore_check_stack_bb0_in(B) = 1+ eval_restore_check_stack_bb1_in(C,D):5
     [C>=0,D=2] 
* CE 29: eval_restore_check_stack_bb0_in(B) = 1+ eval_restore_check_stack_bb1_in(C,D):1
     [D=2,C=0] 
* CE 30: eval_restore_check_stack_bb0_in(B) = 1+ eval_restore_check_stack_bb1_in(C,D):2
     [0>=C+1,D=2] 
* CE 31: eval_restore_check_stack_bb0_in(B) = 1+ eval_restore_check_stack_bb1_in(C,D):3
     [0>=C+1,D=2] 
* CE 32: eval_restore_check_stack_bb0_in(B) = 1+ eval_restore_check_stack_bb1_in(C,D):4
     [D=2,C=0] 
* CE 33: eval_restore_check_stack_bb0_in(B) = 1+ eval_restore_check_stack_bb1_in(C,D):5
     [D=2,C=0] 

### Cost equations --> "Loop" of eval_restore_check_stack_bb0_in/1 
* CEs [27,28,31,32,33] --> Loop 23 
* CEs [26,29,30] --> Loop 24 

#### Loops of eval_restore_check_stack_bb0_in/1 
* Loop 23: eval_restore_check_stack_bb0_in(B) [] 
* Loop 24: eval_restore_check_stack_bb0_in(B) [] 

### Ranking functions of CR eval_restore_check_stack_bb0_in(B) 

#### Partial ranking functions of CR eval_restore_check_stack_bb0_in(B) 


### Resulting Chains:eval_restore_check_stack_bb0_in(B) 
* [24]
* [23]...


### Merging Chains  eval_restore_check_stack_bb0_in/1 into  External patterns of execution 
* [[24]] --> 1 
* [[23]] --> 2 


### Specialization of cost equations eval_restore_check_stack_start/2 
* CE 2 is refined into CE [34,35] 


#### Refined cost equations eval_restore_check_stack_start/2 
* CE 34: eval_restore_check_stack_start(V_is_estack,B) = 0+ eval_restore_check_stack_bb0_in(B):1
     [] 
* CE 35: eval_restore_check_stack_start(V_is_estack,B) = 0+ eval_restore_check_stack_bb0_in(B):2
     [] 

### Cost equations --> "Loop" of eval_restore_check_stack_start/2 
* CEs [35] --> Loop 25 
* CEs [34] --> Loop 26 

#### Loops of eval_restore_check_stack_start/2 
* Loop 25: eval_restore_check_stack_start(V_is_estack,B) [] 
* Loop 26: eval_restore_check_stack_start(V_is_estack,B) [] 

### Ranking functions of CR eval_restore_check_stack_start(V_is_estack,B) 

#### Partial ranking functions of CR eval_restore_check_stack_start(V_is_estack,B) 


### Resulting Chains:eval_restore_check_stack_start(V_is_estack,B) 
* [26]
* [25]...


### Merging Chains  eval_restore_check_stack_start/2 into  External patterns of execution 
* [[26]] --> 1 
* [[25]] --> 2 


Computing Bounds
=====================================

#### Cost of loops [12] 

 * loop 12:eval_restore_check_stack_bb2_in(V_size_0,V_size_1,B,C) -> [eval_restore_check_stack_bb2_in(V_size_0',V_size_1',B',C')] 
1
#### Cost of phase [12]:eval_restore_check_stack_bb2_in(V_size_0,V_size_1,B,C) -> [eval_restore_check_stack_bb2_in(V_size_0',V_size_1',B',C')] 
1*it(12)+0
#### Cost of phase [12]:eval_restore_check_stack_bb2_in(V_size_0,V_size_1,B,C) -> [eval_restore_check_stack_bb2_in(V_size_0',V_size_1',B',C')] 
1*it(12)+0
#### Cost of loops [11] 

 * loop 11:eval_restore_check_stack_bb2_in(V_size_0,V_size_1,B,C) -> [eval_restore_check_stack_bb2_in(V_size_0',V_size_1',B',C')] 
1
#### Cost of phase [11]:eval_restore_check_stack_bb2_in(V_size_0,V_size_1,B,C) -> [eval_restore_check_stack_bb2_in(V_size_0',V_size_1',B',C')] 
1*it(11)+0
  Such that:it(11) =< V_size_1
it(11) =< V_size_1-V_size_1'

#### Cost of phase [11]:eval_restore_check_stack_bb2_in(V_size_0,V_size_1,B,C) -> [eval_restore_check_stack_bb2_in(V_size_0',V_size_1',B',C')] 
1*it(11)+0
  Such that:it(11) =< V_size_1
it(11) =< V_size_1-V_size_1'

#### Cost of phase [11]:eval_restore_check_stack_bb2_in(V_size_0,V_size_1,B,C) -> [eval_restore_check_stack_bb2_in(V_size_0',V_size_1',B',C')] 
1*it(11)+0
  Such that:it(11) =< V_size_1
it(11) =< V_size_1-V_size_1'

#### Cost of chains of eval_restore_check_stack_bb2_in(V_size_0,V_size_1,B,C):
* Chain [[12]]...: 1*it(12)+0
  with precondition: [0>=V_size_1+1,V_size_0>=V_size_1,B>=2,3>=B] 

* Chain [[12],14]: 1*it(12)+0
  with precondition: [B=2,0>=V_size_1+1,V_size_0>=V_size_1] 

* Chain [[11],16]: 1*it(11)+0
  Such that:it(11) =< V_size_1

  with precondition: [B=2,V_size_1>=1,V_size_0>=V_size_1] 

* Chain [[11],15]: 1*it(11)+0
  Such that:it(11) =< V_size_1

  with precondition: [B=3,V_size_1>=1,V_size_0>=V_size_1] 

* Chain [[11],13]: 1*it(11)+0
  Such that:it(11) =< V_size_1

  with precondition: [B=2,V_size_1>=2,V_size_0>=V_size_1] 

* Chain [16]: 0
  with precondition: [V_size_1=0,B=2,V_size_0>=0] 

* Chain [15]: 0
  with precondition: [V_size_1=0,B=3,V_size_0>=0] 

* Chain [14]: 0
  with precondition: [B=2,0>=V_size_1+1,V_size_0>=V_size_1] 

* Chain [13]: 0
  with precondition: [B=2,V_size_1>=1,V_size_0>=V_size_1] 


#### Cost of loops [18,19] 

 * loop 18:eval_restore_check_stack_bb1_in(V_size_0,B) -> [eval_restore_check_stack_bb1_in(V_size_0',B')] 
1*s(5)+2
  Such that:s(5) =< V_size_0

 * loop 19:eval_restore_check_stack_bb1_in(V_size_0,B) -> [eval_restore_check_stack_bb1_in(V_size_0',B')] 
2
#### Cost of phase [18,19]:eval_restore_check_stack_bb1_in(V_size_0,B) -> [eval_restore_check_stack_bb1_in(V_size_0',B')] 
4*it(18)+1*s(6)+0
#### Cost of phase [18,19]:eval_restore_check_stack_bb1_in(V_size_0,B) -> [eval_restore_check_stack_bb1_in(V_size_0',B')] 
4*it(18)+1*s(6)+0
#### Cost of phase [18,19]:eval_restore_check_stack_bb1_in(V_size_0,B) -> [eval_restore_check_stack_bb1_in(V_size_0',B')] 
4*it(18)+1*s(6)+0
#### Cost of phase [18,19]:eval_restore_check_stack_bb1_in(V_size_0,B) -> [eval_restore_check_stack_bb1_in(V_size_0',B')] 
4*it(18)+1*s(6)+0
#### Cost of loops [18,19] 

 * loop 18:eval_restore_check_stack_bb1_in(V_size_0,B) -> [eval_restore_check_stack_bb1_in(V_size_0',B')] 
1*s(5)+2
  Such that:s(5) =< V_size_0

 * loop 19:eval_restore_check_stack_bb1_in(V_size_0,B) -> [eval_restore_check_stack_bb1_in(V_size_0',B')] 
2
#### Cost of phase [18,19]:eval_restore_check_stack_bb1_in(V_size_0,B) -> [] 
4*it(18)+1*it([20])+1*s(6)+2*s(10)+0
  Such that:it([20]) =< 1

#### Cost of phase [18,19]:eval_restore_check_stack_bb1_in(V_size_0,B) -> [eval_restore_check_stack_bb1_in(V_size_0',B')] 
4*it(18)+1*s(6)+0
#### Cost of chains of eval_restore_check_stack_bb1_in(V_size_0,B):
* Chain [[18,19]]...: 5*it(18)+0
  with precondition: [V_size_0>=0,B=2] 

* Chain [[18,19],22]: 5*it(18)+1
  with precondition: [B=2,V_size_0>=0] 

* Chain [[18,19],21]: 6*it(18)+1
  with precondition: [B=2,V_size_0>=0] 

* Chain [[18,19],20]: 4*it(18)+1*it([20])+1*s(6)+2*s(10)+0
  Such that:it([20]) =< 1

  with precondition: [B=2,V_size_0>=0] 

* Chain [[18,19],17]...: 6*aux(16)+0
  with precondition: [B=2,V_size_0>=0] 

* Chain [22]: 1
  with precondition: [V_size_0=0,B=2] 

* Chain [21]: 1*s(7)+1
  with precondition: [B=2,0>=V_size_0+1] 

* Chain [20]: 2*s(9)+1
  Such that:s(8) =< V_size_0
s(9) =< s(8)

  with precondition: [B=2,V_size_0>=1] 

* Chain [17]...: 1*aux(16)+0
  with precondition: [B=2,0>=V_size_0+1] 


#### Cost of chains of eval_restore_check_stack_bb0_in(B):
* Chain [24]: 1*aux(18)+0
  with precondition: [] 

* Chain [23]...: 1*aux(19)+0
  with precondition: [] 


#### Cost of chains of eval_restore_check_stack_start(V_is_estack,B):
* Chain [26]: 1*s(36)+0
  with precondition: [] 

* Chain [25]...: 1*s(37)+0
  with precondition: [] 


Closed-form bounds of eval_restore_check_stack_start(V_is_estack,B): 
-------------------------------------
* Chain [26] with precondition: [] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [25]... with precondition: [] 
    - Upper bound: inf 
    - Complexity: infinity 

### Maximum cost of eval_restore_check_stack_start(V_is_estack,B): inf 
Asymptotic class: infinity 

Time statistics: 
-------------------------------------
* Partial evaluation computed in 89 ms.
* Invariants computed in 94 ms.
   - Backward Invariants 53 ms.
   - Transitive Invariants 15 ms.
* Refinement performed in 115 ms.
* Termination proved in 13 ms.
* Upper bounds computed in 194 ms.
   - Equation cost structures 39 ms.
   - Phase cost structures 109 ms.
   - Chain cost structures 49 ms.
   - Solving cost expressions 0 ms.
* Total analysis performed in 598 ms.


Warning: Ignored call to eval_ideaCfbDecrypt_stop/1 in equation eval_ideaCfbDecrypt_bb13_in/1 

Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. recursive  : [eval_ideaCfbDecrypt_bb2_in/2]
1. recursive  : [eval_ideaCfbDecrypt_bb5_in/4]
2. non_recursive  : [eval_ideaCfbDecrypt_bb13_in/1]
3. non_recursive  : [loop_cont_eval_ideaCfbDecrypt_bb2_in/2]
4. recursive  : [eval_ideaCfbDecrypt_bb10_in/5]
5. recursive  : [eval_ideaCfbDecrypt_35/3,eval_ideaCfbDecrypt_36/3,eval_ideaCfbDecrypt_37/3,eval_ideaCfbDecrypt_bb8_in/3,loop_cont_eval_ideaCfbDecrypt_bb10_in/4]
6. recursive  : [eval_ideaCfbDecrypt_bb12_in/2]
7. non_recursive  : [loop_cont_eval_ideaCfbDecrypt_bb12_in/2]
8. non_recursive  : [eval_ideaCfbDecrypt_53/2]
9. non_recursive  : [eval_ideaCfbDecrypt_52/2]
10. non_recursive  : [eval_ideaCfbDecrypt_51/2]
11. non_recursive  : [loop_cont_eval_ideaCfbDecrypt_bb8_in/3]
12. non_recursive  : [loop_cont_eval_ideaCfbDecrypt_bb5_in/3]
13. non_recursive  : [eval_ideaCfbDecrypt_bb0_in/2]
14. non_recursive  : [eval_ideaCfbDecrypt_start/2]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into eval_ideaCfbDecrypt_bb2_in/2
1. SCC is partially evaluated into eval_ideaCfbDecrypt_bb5_in/4
2. SCC is completely evaluated into other SCCs
3. SCC is completely evaluated into other SCCs
4. SCC is partially evaluated into eval_ideaCfbDecrypt_bb10_in/5
5. SCC is partially evaluated into eval_ideaCfbDecrypt_bb8_in/3
6. SCC is partially evaluated into eval_ideaCfbDecrypt_bb12_in/2
7. SCC is completely evaluated into other SCCs
8. SCC is partially evaluated into eval_ideaCfbDecrypt_53/2
9. SCC is completely evaluated into other SCCs
10. SCC is completely evaluated into other SCCs
11. SCC is completely evaluated into other SCCs
12. SCC is partially evaluated into loop_cont_eval_ideaCfbDecrypt_bb5_in/3
13. SCC is partially evaluated into eval_ideaCfbDecrypt_bb0_in/2
14. SCC is partially evaluated into eval_ideaCfbDecrypt_start/2

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations eval_ideaCfbDecrypt_bb2_in/2 
* CE 7 is refined into CE [21] 
* CE 6 is refined into CE [22] 
* CE 5 is refined into CE [23] 


#### Refined cost equations eval_ideaCfbDecrypt_bb2_in/2 
* CE 21: eval_ideaCfbDecrypt_bb2_in(V__06,B) = 0
     [B=4,V__06=0] 
* CE 22: eval_ideaCfbDecrypt_bb2_in(V__06,B) = 1+ eval_ideaCfbDecrypt_bb2_in(C,D)
     [V__06>=1,V__06=C+1,D=4,B=4] 
* CE 23: eval_ideaCfbDecrypt_bb2_in(V__06,B) = 1+ eval_ideaCfbDecrypt_bb2_in(C,D)
     [0>=V__06+1,V__06=C+1,D=4,B=4] 

### Cost equations --> "Loop" of eval_ideaCfbDecrypt_bb2_in/2 
* CEs [22] --> Loop 19 
* CEs [23] --> Loop 20 
* CEs [21] --> Loop 21 

#### Loops of eval_ideaCfbDecrypt_bb2_in/2 
* Loop 19: eval_ideaCfbDecrypt_bb2_in(V__06,B)->  eval_ideaCfbDecrypt_bb2_in(V__06',B')
                  [V__06>=1,V__06=V__06'+1,B'=4,B=4] 
* Loop 20: eval_ideaCfbDecrypt_bb2_in(V__06,B)->  eval_ideaCfbDecrypt_bb2_in(V__06',B')
                  [0>=V__06+1,V__06=V__06'+1,B'=4,B=4] 
* Loop 21: eval_ideaCfbDecrypt_bb2_in(V__06,B) [B=4,V__06=0] 

### Ranking functions of CR eval_ideaCfbDecrypt_bb2_in(V__06,B) 
* RF of phase [19]: [V__06]

#### Partial ranking functions of CR eval_ideaCfbDecrypt_bb2_in(V__06,B) 
* Partial RF of phase [19]:
  - RF of loop [19:1]:
    V__06


### Resulting Chains:eval_ideaCfbDecrypt_bb2_in(V__06,B) 
* [[20]]...
* [[19],21]
* [21]


### Merging Chains  eval_ideaCfbDecrypt_bb2_in/2 into  External patterns of execution 
* [[21]] --> 1 
* [[21,[19]]] --> 2 
* [[[20]]] --> 3 


### Specialization of cost equations eval_ideaCfbDecrypt_bb5_in/4 
* CE 10 is refined into CE [24] 
* CE 9 is refined into CE [25] 
* CE 8 is refined into CE [26] 


#### Refined cost equations eval_ideaCfbDecrypt_bb5_in/4 
* CE 24: eval_ideaCfbDecrypt_bb5_in(A,B,C,A) = 0
     [C=2,B=0] 
* CE 25: eval_ideaCfbDecrypt_bb5_in(V_23,V_bufleft_0,B,C) = 1+ eval_ideaCfbDecrypt_bb5_in(V_23,D,B,C)
     [V_bufleft_0>=1,V_bufleft_0=D+1] 
* CE 26: eval_ideaCfbDecrypt_bb5_in(V_23,V_bufleft_0,B,C) = 1+ eval_ideaCfbDecrypt_bb5_in(V_23,D,B,C)
     [0>=V_bufleft_0+1,V_bufleft_0=D+1] 

### Cost equations --> "Loop" of eval_ideaCfbDecrypt_bb5_in/4 
* CEs [25] --> Loop 22 
* CEs [26] --> Loop 23 
* CEs [24] --> Loop 24 

#### Loops of eval_ideaCfbDecrypt_bb5_in/4 
* Loop 22: eval_ideaCfbDecrypt_bb5_in(V_23,V_bufleft_0,B,C)->  eval_ideaCfbDecrypt_bb5_in(V_23,V_bufleft_0',B,C)
                  [V_bufleft_0>=1,V_bufleft_0=V_bufleft_0'+1] 
* Loop 23: eval_ideaCfbDecrypt_bb5_in(V_23,V_bufleft_0,B,C)->  eval_ideaCfbDecrypt_bb5_in(V_23,V_bufleft_0',B,C)
                  [0>=V_bufleft_0+1,V_bufleft_0=V_bufleft_0'+1] 
* Loop 24: eval_ideaCfbDecrypt_bb5_in(A,B,C,A) [C=2,B=0] 

### Ranking functions of CR eval_ideaCfbDecrypt_bb5_in(V_23,V_bufleft_0,B,C) 
* RF of phase [22]: [V_bufleft_0]

#### Partial ranking functions of CR eval_ideaCfbDecrypt_bb5_in(V_23,V_bufleft_0,B,C) 
* Partial RF of phase [22]:
  - RF of loop [22:1]:
    V_bufleft_0


### Resulting Chains:eval_ideaCfbDecrypt_bb5_in(V_23,V_bufleft_0,B,C) 
* [[23]]...
* [[22],24]
* [24]


### Merging Chains  eval_ideaCfbDecrypt_bb5_in/4 into  External patterns of execution 
* [[24]] --> 1 
* [[24,[22]]] --> 2 
* [[[23]]] --> 3 


### Specialization of cost equations eval_ideaCfbDecrypt_bb10_in/5 
* CE 17 is refined into CE [27] 
* CE 16 is refined into CE [28] 
* CE 15 is discarded (unfeasible) 


#### Refined cost equations eval_ideaCfbDecrypt_bb10_in/5 
* CE 27: eval_ideaCfbDecrypt_bb10_in(A,B,C,D,B) = 0
     [B>=1,B+8=A,D=2,C=1] 
* CE 28: eval_ideaCfbDecrypt_bb10_in(V__17,V_47,V_bufleft_1,B,C) = 1+ eval_ideaCfbDecrypt_bb10_in(D,V_47,E,F,C)
     [V_bufleft_1>=2,V_47>=1,8>=V_bufleft_1,V_bufleft_1=E+1,V_47+8=D,V_47+8=V__17,F=2,B=2] 

### Cost equations --> "Loop" of eval_ideaCfbDecrypt_bb10_in/5 
* CEs [28] --> Loop 25 
* CEs [27] --> Loop 26 

#### Loops of eval_ideaCfbDecrypt_bb10_in/5 
* Loop 25: eval_ideaCfbDecrypt_bb10_in(V__17,V_47,V_bufleft_1,B,C)->  eval_ideaCfbDecrypt_bb10_in(V__17',V_47,V_bufleft_1',B',C)
                  [V_bufleft_1>=2,V_47>=1,8>=V_bufleft_1,V_bufleft_1=V_bufleft_1'+1,V_47+8=V__17',V_47+8=V__17,B'=2,B=2] 
* Loop 26: eval_ideaCfbDecrypt_bb10_in(A,B,C,D,B) [B>=1,B+8=A,D=2,C=1] 

### Ranking functions of CR eval_ideaCfbDecrypt_bb10_in(V__17,V_47,V_bufleft_1,B,C) 
* RF of phase [25]: [V_bufleft_1-1]

#### Partial ranking functions of CR eval_ideaCfbDecrypt_bb10_in(V__17,V_47,V_bufleft_1,B,C) 
* Partial RF of phase [25]:
  - RF of loop [25:1]:
    V_bufleft_1-1


### Resulting Chains:eval_ideaCfbDecrypt_bb10_in(V__17,V_47,V_bufleft_1,B,C) 
* [[25],26]


### Merging Chains  eval_ideaCfbDecrypt_bb10_in/5 into  External patterns of execution 
* [[26,[25]]] --> 1 


### Specialization of cost equations eval_ideaCfbDecrypt_bb8_in/3 
* CE 13 is refined into CE [29] 
* CE 12 is refined into CE [30] 


#### Refined cost equations eval_ideaCfbDecrypt_bb8_in/3 
* CE 29: eval_ideaCfbDecrypt_bb8_in(A,B,A) = 0
     [8>=A,B=3] 
* CE 30: eval_ideaCfbDecrypt_bb8_in(V__17,B,C) = 2+ eval_ideaCfbDecrypt_bb10_in(D,E,F,G,E):1+ eval_ideaCfbDecrypt_bb8_in(E,H,C)
     [E>=1,E+8=D,E+8=V__17,H=3,G=2,F=8,B=3] 

### Cost equations --> "Loop" of eval_ideaCfbDecrypt_bb8_in/3 
* CEs [30] --> Loop 27 
* CEs [29] --> Loop 28 

#### Loops of eval_ideaCfbDecrypt_bb8_in/3 
* Loop 27: eval_ideaCfbDecrypt_bb8_in(V__17,B,C)->  eval_ideaCfbDecrypt_bb8_in(V__17',B',C)
                  [V__17>=9,V__17=V__17'+8,B'=3,B=3] 
* Loop 28: eval_ideaCfbDecrypt_bb8_in(A,B,A) [8>=A,B=3] 

### Ranking functions of CR eval_ideaCfbDecrypt_bb8_in(V__17,B,C) 
* RF of phase [27]: [V__17/8-1]

#### Partial ranking functions of CR eval_ideaCfbDecrypt_bb8_in(V__17,B,C) 
* Partial RF of phase [27]:
  - RF of loop [27:1]:
    V__17/8-1


### Resulting Chains:eval_ideaCfbDecrypt_bb8_in(V__17,B,C) 
* [[27],28]
* [28]


### Merging Chains  eval_ideaCfbDecrypt_bb8_in/3 into  External patterns of execution 
* [[28]] --> 1 
* [[28,[27]]] --> 2 


### Specialization of cost equations eval_ideaCfbDecrypt_bb12_in/2 
* CE 20 is refined into CE [31] 
* CE 19 is refined into CE [32] 
* CE 18 is refined into CE [33] 


#### Refined cost equations eval_ideaCfbDecrypt_bb12_in/2 
* CE 31: eval_ideaCfbDecrypt_bb12_in(V__28,B) = 0
     [B=4,V__28=1] 
* CE 32: eval_ideaCfbDecrypt_bb12_in(V__28,B) = 1+ eval_ideaCfbDecrypt_bb12_in(C,D)
     [V__28>=2,V__28=C+1,D=4,B=4] 
* CE 33: eval_ideaCfbDecrypt_bb12_in(V__28,B) = 1+ eval_ideaCfbDecrypt_bb12_in(C,D)
     [0>=V__28,V__28=C+1,D=4,B=4] 

### Cost equations --> "Loop" of eval_ideaCfbDecrypt_bb12_in/2 
* CEs [32] --> Loop 29 
* CEs [33] --> Loop 30 
* CEs [31] --> Loop 31 

#### Loops of eval_ideaCfbDecrypt_bb12_in/2 
* Loop 29: eval_ideaCfbDecrypt_bb12_in(V__28,B)->  eval_ideaCfbDecrypt_bb12_in(V__28',B')
                  [V__28>=2,V__28=V__28'+1,B'=4,B=4] 
* Loop 30: eval_ideaCfbDecrypt_bb12_in(V__28,B)->  eval_ideaCfbDecrypt_bb12_in(V__28',B')
                  [0>=V__28,V__28=V__28'+1,B'=4,B=4] 
* Loop 31: eval_ideaCfbDecrypt_bb12_in(V__28,B) [B=4,V__28=1] 

### Ranking functions of CR eval_ideaCfbDecrypt_bb12_in(V__28,B) 
* RF of phase [29]: [V__28-1]

#### Partial ranking functions of CR eval_ideaCfbDecrypt_bb12_in(V__28,B) 
* Partial RF of phase [29]:
  - RF of loop [29:1]:
    V__28-1


### Resulting Chains:eval_ideaCfbDecrypt_bb12_in(V__28,B) 
* [[30]]...
* [[29],31]
* [31]


### Merging Chains  eval_ideaCfbDecrypt_bb12_in/2 into  External patterns of execution 
* [[31]] --> 1 
* [[31,[29]]] --> 2 
* [[[30]]] --> 3 


### Specialization of cost equations eval_ideaCfbDecrypt_53/2 
* CE 14 is refined into CE [34,35,36] 


#### Refined cost equations eval_ideaCfbDecrypt_53/2 
* CE 34: eval_ideaCfbDecrypt_53(V__17,B) = 1+ eval_ideaCfbDecrypt_bb12_in(C,D):1
     [D=4,C=1,V__17=1] 
* CE 35: eval_ideaCfbDecrypt_53(V__17,B) = 1+ eval_ideaCfbDecrypt_bb12_in(V__17,C):2
     [V__17>=2,C=4] 
* CE 36: eval_ideaCfbDecrypt_53(V__17,B) = 1+ eval_ideaCfbDecrypt_bb12_in(V__17,C):3
     [0>=V__17,C=4] 

### Cost equations --> "Loop" of eval_ideaCfbDecrypt_53/2 
* CEs [36] --> Loop 32 
* CEs [35] --> Loop 33 
* CEs [34] --> Loop 34 

#### Loops of eval_ideaCfbDecrypt_53/2 
* Loop 32: eval_ideaCfbDecrypt_53(V__17,B) [0>=V__17] 
* Loop 33: eval_ideaCfbDecrypt_53(V__17,B) [V__17>=2] 
* Loop 34: eval_ideaCfbDecrypt_53(V__17,B) [V__17=1] 

### Ranking functions of CR eval_ideaCfbDecrypt_53(V__17,B) 

#### Partial ranking functions of CR eval_ideaCfbDecrypt_53(V__17,B) 


### Resulting Chains:eval_ideaCfbDecrypt_53(V__17,B) 
* [34]
* [33]
* [32]...


### Merging Chains  eval_ideaCfbDecrypt_53/2 into  External patterns of execution 
* [[34]] --> 1 
* [[33]] --> 2 
* [[32]] --> 3 


### Specialization of cost equations loop_cont_eval_ideaCfbDecrypt_bb5_in/3 
* CE 11 is refined into CE [37,38,39,40,41] 


#### Refined cost equations loop_cont_eval_ideaCfbDecrypt_bb5_in/3 
* CE 37: loop_cont_eval_ideaCfbDecrypt_bb5_in(F,A,B) = 1+ eval_ideaCfbDecrypt_bb8_in(G,H,I):1+ eval_ideaCfbDecrypt_53(J,B):1
     [J=1,I=1,H=3,G=1,A=1,F=2] 
* CE 38: loop_cont_eval_ideaCfbDecrypt_bb5_in(F,A,B) = 1+ eval_ideaCfbDecrypt_bb8_in(A,G,A):1+ eval_ideaCfbDecrypt_53(A,B):2
     [A>=2,8>=A,G=3,F=2] 
* CE 39: loop_cont_eval_ideaCfbDecrypt_bb5_in(F,A,B) = 1+ eval_ideaCfbDecrypt_bb8_in(A,G,A):1+ eval_ideaCfbDecrypt_53(A,B):3
     [0>=A,G=3,F=2] 
* CE 40: loop_cont_eval_ideaCfbDecrypt_bb5_in(F,A,B) = 1+ eval_ideaCfbDecrypt_bb8_in(A,G,H):2+ eval_ideaCfbDecrypt_53(I,B):1
     [A>=9,I=1,H=1,G=3,F=2] 
* CE 41: loop_cont_eval_ideaCfbDecrypt_bb5_in(F,A,B) = 1+ eval_ideaCfbDecrypt_bb8_in(A,G,H):2+ eval_ideaCfbDecrypt_53(H,B):2
     [A>=H+8,H>=2,8>=H,G=3,F=2] 

### Cost equations --> "Loop" of loop_cont_eval_ideaCfbDecrypt_bb5_in/3 
* CEs [40,41] --> Loop 35 
* CEs [38] --> Loop 36 
* CEs [37] --> Loop 37 
* CEs [39] --> Loop 38 

#### Loops of loop_cont_eval_ideaCfbDecrypt_bb5_in/3 
* Loop 35: loop_cont_eval_ideaCfbDecrypt_bb5_in(F,A,B) [A>=9,F=2] 
* Loop 36: loop_cont_eval_ideaCfbDecrypt_bb5_in(F,A,B) [A>=2,8>=A,F=2] 
* Loop 37: loop_cont_eval_ideaCfbDecrypt_bb5_in(F,A,B) [A=1,F=2] 
* Loop 38: loop_cont_eval_ideaCfbDecrypt_bb5_in(F,A,B) [0>=A,F=2] 

### Ranking functions of CR loop_cont_eval_ideaCfbDecrypt_bb5_in(F,A,B) 

#### Partial ranking functions of CR loop_cont_eval_ideaCfbDecrypt_bb5_in(F,A,B) 


### Resulting Chains:loop_cont_eval_ideaCfbDecrypt_bb5_in(F,A,B) 
* [38]...
* [37]
* [36]
* [35]


### Merging Chains  loop_cont_eval_ideaCfbDecrypt_bb5_in/3 into  External patterns of execution 
* [[37]] --> 1 
* [[36]] --> 2 
* [[35]] --> 3 
* [[38]] --> 4 


### Specialization of cost equations eval_ideaCfbDecrypt_bb0_in/2 
* CE 3 is refined into CE [42,43,44] 
* CE 4 is refined into CE [45,46,47,48,49,50,51,52,53] 


#### Refined cost equations eval_ideaCfbDecrypt_bb0_in/2 
* CE 42: eval_ideaCfbDecrypt_bb0_in(V_count,B) = 1+ eval_ideaCfbDecrypt_bb2_in(C,D):1
     [D=4,C=0,V_count=0] 
* CE 43: eval_ideaCfbDecrypt_bb0_in(V_count,B) = 1+ eval_ideaCfbDecrypt_bb2_in(V_count,C):2
     [V_count>=1,C=4] 
* CE 44: eval_ideaCfbDecrypt_bb0_in(V_count,B) = 1+ eval_ideaCfbDecrypt_bb2_in(V_count,C):3
     [0>=V_count+1,C=4] 
* CE 45: eval_ideaCfbDecrypt_bb0_in(V_count,B) = 1+ eval_ideaCfbDecrypt_bb5_in(C,D,E,F):1+ loop_cont_eval_ideaCfbDecrypt_bb5_in(G,H,B):1
     [H=1,G=2,F=1,E=2,D=0,C=1,V_count=1] 
* CE 46: eval_ideaCfbDecrypt_bb0_in(V_count,B) = 1+ eval_ideaCfbDecrypt_bb5_in(V_count,C,D,V_count):1+ loop_cont_eval_ideaCfbDecrypt_bb5_in(E,V_count,B):2
     [V_count>=2,8>=V_count,E=2,D=2,C=0] 
* CE 47: eval_ideaCfbDecrypt_bb0_in(V_count,B) = 1+ eval_ideaCfbDecrypt_bb5_in(V_count,C,D,V_count):1+ loop_cont_eval_ideaCfbDecrypt_bb5_in(E,V_count,B):3
     [V_count>=9,E=2,D=2,C=0] 
* CE 48: eval_ideaCfbDecrypt_bb0_in(V_count,B) = 1+ eval_ideaCfbDecrypt_bb5_in(V_count,C,D,V_count):1+ loop_cont_eval_ideaCfbDecrypt_bb5_in(E,V_count,B):4
     [0>=V_count,E=2,D=2,C=0] 
* CE 49: eval_ideaCfbDecrypt_bb0_in(V_count,B) = 1+ eval_ideaCfbDecrypt_bb5_in(C,D,E,F):2+ loop_cont_eval_ideaCfbDecrypt_bb5_in(G,H,B):1
     [D>=1,D+1=V_count,H=1,G=2,F=1,E=2,C=1] 
* CE 50: eval_ideaCfbDecrypt_bb0_in(V_count,B) = 1+ eval_ideaCfbDecrypt_bb5_in(C,D,E,C):2+ loop_cont_eval_ideaCfbDecrypt_bb5_in(F,C,B):2
     [C>=2,D>=1,8>=C,C+D=V_count,F=2,E=2] 
* CE 51: eval_ideaCfbDecrypt_bb0_in(V_count,B) = 1+ eval_ideaCfbDecrypt_bb5_in(C,D,E,C):2+ loop_cont_eval_ideaCfbDecrypt_bb5_in(F,C,B):3
     [C>=9,D>=1,C+D=V_count,F=2,E=2] 
* CE 52: eval_ideaCfbDecrypt_bb0_in(V_count,B) = 1+ eval_ideaCfbDecrypt_bb5_in(C,D,E,C):2+ loop_cont_eval_ideaCfbDecrypt_bb5_in(F,C,B):4
     [D>=1,0>=C,C+D=V_count,F=2,E=2] 
* CE 53: eval_ideaCfbDecrypt_bb0_in(V_count,B) = 1+ eval_ideaCfbDecrypt_bb5_in(C,D,E,F):3
     [0>=D+1,C+D=V_count] 

### Cost equations --> "Loop" of eval_ideaCfbDecrypt_bb0_in/2 
* CEs [44,48,52,53] --> Loop 39 
* CEs [46] --> Loop 40 
* CEs [43,45,47,49,50,51] --> Loop 41 
* CEs [42] --> Loop 42 

#### Loops of eval_ideaCfbDecrypt_bb0_in/2 
* Loop 39: eval_ideaCfbDecrypt_bb0_in(V_count,B) [] 
* Loop 40: eval_ideaCfbDecrypt_bb0_in(V_count,B) [V_count>=2,8>=V_count] 
* Loop 41: eval_ideaCfbDecrypt_bb0_in(V_count,B) [V_count>=1] 
* Loop 42: eval_ideaCfbDecrypt_bb0_in(V_count,B) [V_count=0] 

### Ranking functions of CR eval_ideaCfbDecrypt_bb0_in(V_count,B) 

#### Partial ranking functions of CR eval_ideaCfbDecrypt_bb0_in(V_count,B) 


### Resulting Chains:eval_ideaCfbDecrypt_bb0_in(V_count,B) 
* [42]
* [41]
* [40]
* [39]...


### Merging Chains  eval_ideaCfbDecrypt_bb0_in/2 into  External patterns of execution 
* [[42]] --> 1 
* [[40],[41]] --> 2 
* [[39]] --> 3 


### Specialization of cost equations eval_ideaCfbDecrypt_start/2 
* CE 2 is refined into CE [54,55,56] 


#### Refined cost equations eval_ideaCfbDecrypt_start/2 
* CE 54: eval_ideaCfbDecrypt_start(V_count,B) = 0+ eval_ideaCfbDecrypt_bb0_in(C,B):1
     [C=0,V_count=0] 
* CE 55: eval_ideaCfbDecrypt_start(V_count,B) = 0+ eval_ideaCfbDecrypt_bb0_in(V_count,B):2
     [V_count>=1] 
* CE 56: eval_ideaCfbDecrypt_start(V_count,B) = 0+ eval_ideaCfbDecrypt_bb0_in(V_count,B):3
     [] 

### Cost equations --> "Loop" of eval_ideaCfbDecrypt_start/2 
* CEs [56] --> Loop 43 
* CEs [55] --> Loop 44 
* CEs [54] --> Loop 45 

#### Loops of eval_ideaCfbDecrypt_start/2 
* Loop 43: eval_ideaCfbDecrypt_start(V_count,B) [] 
* Loop 44: eval_ideaCfbDecrypt_start(V_count,B) [V_count>=1] 
* Loop 45: eval_ideaCfbDecrypt_start(V_count,B) [V_count=0] 

### Ranking functions of CR eval_ideaCfbDecrypt_start(V_count,B) 

#### Partial ranking functions of CR eval_ideaCfbDecrypt_start(V_count,B) 


### Resulting Chains:eval_ideaCfbDecrypt_start(V_count,B) 
* [45]
* [44]
* [43]...


### Merging Chains  eval_ideaCfbDecrypt_start/2 into  External patterns of execution 
* [[45]] --> 1 
* [[44]] --> 2 
* [[43]] --> 3 


Computing Bounds
=====================================

#### Cost of loops [20] 

 * loop 20:eval_ideaCfbDecrypt_bb2_in(V__06,B) -> [eval_ideaCfbDecrypt_bb2_in(V__06',B')] 
1
#### Cost of phase [20]:eval_ideaCfbDecrypt_bb2_in(V__06,B) -> [eval_ideaCfbDecrypt_bb2_in(V__06',B')] 
1*it(20)+0
#### Cost of loops [19] 

 * loop 19:eval_ideaCfbDecrypt_bb2_in(V__06,B) -> [eval_ideaCfbDecrypt_bb2_in(V__06',B')] 
1
#### Cost of phase [19]:eval_ideaCfbDecrypt_bb2_in(V__06,B) -> [eval_ideaCfbDecrypt_bb2_in(V__06',B')] 
1*it(19)+0
  Such that:it(19) =< V__06
it(19) =< V__06-V__06'

#### Cost of chains of eval_ideaCfbDecrypt_bb2_in(V__06,B):
* Chain [[20]]...: 1*it(20)+0
  with precondition: [0>=V__06+1,B=4] 

* Chain [[19],21]: 1*it(19)+0
  Such that:it(19) =< V__06

  with precondition: [B=4,V__06>=1] 

* Chain [21]: 0
  with precondition: [V__06=0,B=4] 


#### Cost of loops [23] 

 * loop 23:eval_ideaCfbDecrypt_bb5_in(V_23,V_bufleft_0,B,C) -> [eval_ideaCfbDecrypt_bb5_in(V_23',V_bufleft_0',B',C')] 
1
#### Cost of phase [23]:eval_ideaCfbDecrypt_bb5_in(V_23,V_bufleft_0,B,C) -> [eval_ideaCfbDecrypt_bb5_in(V_23',V_bufleft_0',B',C')] 
1*it(23)+0
#### Cost of loops [22] 

 * loop 22:eval_ideaCfbDecrypt_bb5_in(V_23,V_bufleft_0,B,C) -> [eval_ideaCfbDecrypt_bb5_in(V_23',V_bufleft_0',B',C')] 
1
#### Cost of phase [22]:eval_ideaCfbDecrypt_bb5_in(V_23,V_bufleft_0,B,C) -> [eval_ideaCfbDecrypt_bb5_in(V_23',V_bufleft_0',B',C')] 
1*it(22)+0
  Such that:it(22) =< V_bufleft_0
it(22) =< V_bufleft_0-V_bufleft_0'

#### Cost of chains of eval_ideaCfbDecrypt_bb5_in(V_23,V_bufleft_0,B,C):
* Chain [[23]]...: 1*it(23)+0
  with precondition: [0>=V_bufleft_0+1] 

* Chain [[22],24]: 1*it(22)+0
  Such that:it(22) =< V_bufleft_0

  with precondition: [B=2,V_23=C,V_bufleft_0>=1] 

* Chain [24]: 0
  with precondition: [V_bufleft_0=0,B=2,C=V_23] 


#### Cost of loops [25] 

 * loop 25:eval_ideaCfbDecrypt_bb10_in(V__17,V_47,V_bufleft_1,B,C) -> [eval_ideaCfbDecrypt_bb10_in(V__17',V_47',V_bufleft_1',B',C')] 
1
#### Cost of phase [25]:eval_ideaCfbDecrypt_bb10_in(V__17,V_47,V_bufleft_1,B,C) -> [eval_ideaCfbDecrypt_bb10_in(V__17',V_47',V_bufleft_1',B',C')] 
1*it(25)+0
  Such that:it(25) =< V_bufleft_1
it(25) =< V_bufleft_1-V_bufleft_1'

#### Cost of chains of eval_ideaCfbDecrypt_bb10_in(V__17,V_47,V_bufleft_1,B,C):
* Chain [[25],26]: 1*it(25)+0
  Such that:it(25) =< V_bufleft_1

  with precondition: [B=2,V__17=V_47+8,V__17=C+8,8>=V_bufleft_1,V__17>=9,V_bufleft_1>=2] 


#### Cost of loops [27] 

 * loop 27:eval_ideaCfbDecrypt_bb8_in(V__17,B,C) -> [eval_ideaCfbDecrypt_bb8_in(V__17',B',C')] 
1*s(2)+2
  Such that:s(2) =< 8

#### Cost of phase [27]:eval_ideaCfbDecrypt_bb8_in(V__17,B,C) -> [eval_ideaCfbDecrypt_bb8_in(V__17',B',C')] 
2*it(27)+1*s(3)+0
  Such that:aux(2) =< V__17/8
aux(3) =< V__17/8-V__17'/8
aux(1) =< aux(2)
it(27) =< aux(2)
aux(1) =< aux(3)
it(27) =< aux(3)
s(3) =< aux(1)*8

#### Cost of chains of eval_ideaCfbDecrypt_bb8_in(V__17,B,C):
* Chain [[27],28]: 2*it(27)+1*s(3)+0
  Such that:aux(2) =< V__17/8
aux(3) =< V__17/8-C/8
aux(1) =< aux(2)
it(27) =< aux(2)
aux(1) =< aux(3)
it(27) =< aux(3)
s(3) =< aux(1)*8

  with precondition: [B=3,8>=C,C>=1,V__17>=C+8] 

* Chain [28]: 0
  with precondition: [B=3,V__17=C,8>=V__17] 


#### Cost of loops [30] 

 * loop 30:eval_ideaCfbDecrypt_bb12_in(V__28,B) -> [eval_ideaCfbDecrypt_bb12_in(V__28',B')] 
1
#### Cost of phase [30]:eval_ideaCfbDecrypt_bb12_in(V__28,B) -> [eval_ideaCfbDecrypt_bb12_in(V__28',B')] 
1*it(30)+0
#### Cost of loops [29] 

 * loop 29:eval_ideaCfbDecrypt_bb12_in(V__28,B) -> [eval_ideaCfbDecrypt_bb12_in(V__28',B')] 
1
#### Cost of phase [29]:eval_ideaCfbDecrypt_bb12_in(V__28,B) -> [eval_ideaCfbDecrypt_bb12_in(V__28',B')] 
1*it(29)+0
  Such that:it(29) =< V__28
it(29) =< V__28-V__28'

#### Cost of chains of eval_ideaCfbDecrypt_bb12_in(V__28,B):
* Chain [[30]]...: 1*it(30)+0
  with precondition: [0>=V__28,B=4] 

* Chain [[29],31]: 1*it(29)+0
  Such that:it(29) =< V__28

  with precondition: [B=4,V__28>=2] 

* Chain [31]: 0
  with precondition: [V__28=1,B=4] 


#### Cost of chains of eval_ideaCfbDecrypt_53(V__17,B):
* Chain [34]: 1
  with precondition: [V__17=1] 

* Chain [33]: 1*s(4)+1
  Such that:s(4) =< V__17

  with precondition: [V__17>=2] 

* Chain [32]...: 1*s(5)+1
  with precondition: [0>=V__17] 


#### Cost of chains of loop_cont_eval_ideaCfbDecrypt_bb5_in(F,A,B):
* Chain [38]...: 1*s(6)+2
  with precondition: [F=2,0>=A] 

* Chain [37]: 2
  with precondition: [F=2,A=1] 

* Chain [36]: 1*s(7)+2
  Such that:s(7) =< A

  with precondition: [F=2,8>=A,A>=2] 

* Chain [35]: 2*s(11)+1*s(12)+2*s(16)+1*s(17)+1*s(18)+2
  Such that:s(18) =< 8
s(14) =< A
aux(5) =< A/8
s(15) =< aux(5)
s(16) =< aux(5)
s(15) =< s(14)
s(16) =< s(14)
s(17) =< s(15)*8
s(11) =< aux(5)
s(12) =< aux(5)*8

  with precondition: [F=2,A>=9] 


#### Cost of chains of eval_ideaCfbDecrypt_bb0_in(V_count,B):
* Chain [42]: 1
  with precondition: [V_count=0] 

* Chain [41]: 9*s(19)+2*s(20)+2*s(24)+1*s(25)+2*s(26)+1*s(27)+2*s(37)+3
  Such that:s(22) =< V_count/8
aux(8) =< 8
aux(9) =< V_count
s(20) =< aux(8)
s(19) =< aux(9)
s(23) =< s(22)
s(24) =< s(22)
s(23) =< aux(9)
s(24) =< aux(9)
s(25) =< s(23)*8
s(26) =< s(22)
s(27) =< s(22)*8
s(37) =< aux(9)*8

  with precondition: [V_count>=1] 

* Chain [40]: 1*s(40)+3
  Such that:s(40) =< V_count

  with precondition: [8>=V_count,V_count>=2] 

* Chain [39]...: 1*aux(10)+0
  with precondition: [] 


#### Cost of chains of eval_ideaCfbDecrypt_start(V_count,B):
* Chain [45]: 1
  with precondition: [V_count=0] 

* Chain [44]: 10*s(61)+2*s(62)+2*s(64)+1*s(65)+2*s(66)+1*s(67)+2*s(68)+3
  Such that:s(58) =< 8
s(60) =< V_count
s(59) =< V_count/8
s(61) =< s(60)
s(62) =< s(58)
s(63) =< s(59)
s(64) =< s(59)
s(63) =< s(60)
s(64) =< s(60)
s(65) =< s(63)*8
s(66) =< s(59)
s(67) =< s(59)*8
s(68) =< s(60)*8

  with precondition: [V_count>=1] 

* Chain [43]...: 1*s(69)+0
  with precondition: [] 


Closed-form bounds of eval_ideaCfbDecrypt_start(V_count,B): 
-------------------------------------
* Chain [45] with precondition: [V_count=0] 
    - Upper bound: 1 
    - Complexity: constant 
* Chain [44] with precondition: [V_count>=1] 
    - Upper bound: 57/2*V_count+19 
    - Complexity: n 
* Chain [43]... with precondition: [] 
    - Upper bound: inf 
    - Complexity: infinity 

### Maximum cost of eval_ideaCfbDecrypt_start(V_count,B): inf 
Asymptotic class: infinity 

Time statistics: 
-------------------------------------
* Partial evaluation computed in 17 ms.
* Invariants computed in 37 ms.
   - Backward Invariants 15 ms.
   - Transitive Invariants 10 ms.
* Refinement performed in 73 ms.
* Termination proved in 10 ms.
* Upper bounds computed in 58 ms.
   - Equation cost structures 29 ms.
   - Phase cost structures 16 ms.
   - Chain cost structures 14 ms.
   - Solving cost expressions 1 ms.
* Total analysis performed in 235 ms.


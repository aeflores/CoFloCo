Warning: Ignored call to eval_treelookup_stop/1 in equation eval_treelookup_bb8_in/1 

Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. recursive  : [eval_treelookup_bb5_in/3]
1. recursive  : [eval_treelookup_12/2,eval_treelookup_13/2,eval_treelookup_bb2_in/2,loop_cont_eval_treelookup_bb5_in/3]
2. non_recursive  : [eval_treelookup_bb8_in/1]
3. non_recursive  : [eval_treelookup_bb7_in/1]
4. non_recursive  : [eval_treelookup__critedge_in/1]
5. non_recursive  : [loop_cont_eval_treelookup_bb2_in/2]
6. non_recursive  : [eval_treelookup_5/2]
7. non_recursive  : [eval_treelookup_4/3]
8. non_recursive  : [eval_treelookup_3/2]
9. non_recursive  : [eval_treelookup_2/2]
10. non_recursive  : [eval_treelookup_bb0_in/2]
11. non_recursive  : [eval_treelookup_start/2]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into eval_treelookup_bb5_in/3
1. SCC is partially evaluated into eval_treelookup_bb2_in/2
2. SCC is completely evaluated into other SCCs
3. SCC is completely evaluated into other SCCs
4. SCC is partially evaluated into eval_treelookup__critedge_in/1
5. SCC is partially evaluated into loop_cont_eval_treelookup_bb2_in/2
6. SCC is partially evaluated into eval_treelookup_5/2
7. SCC is completely evaluated into other SCCs
8. SCC is completely evaluated into other SCCs
9. SCC is completely evaluated into other SCCs
10. SCC is partially evaluated into eval_treelookup_bb0_in/2
11. SCC is partially evaluated into eval_treelookup_start/2

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations eval_treelookup_bb5_in/3 
* CE 12 is refined into CE [14] 
* CE 11 is refined into CE [15] 


#### Refined cost equations eval_treelookup_bb5_in/3 
* CE 14: eval_treelookup_bb5_in(A,B,A) = 0
     [B=2] 
* CE 15: eval_treelookup_bb5_in(V__pershsize,B,C) = 1+ eval_treelookup_bb5_in(V__pershsize,D,C)
     [D=2,B=2] 

### Cost equations --> "Loop" of eval_treelookup_bb5_in/3 
* CEs [15] --> Loop 12 
* CEs [14] --> Loop 13 

#### Loops of eval_treelookup_bb5_in/3 
* Loop 12: eval_treelookup_bb5_in(V__pershsize,B,C)->  eval_treelookup_bb5_in(V__pershsize,B',C)
                  [B'=2,B=2] 
* Loop 13: eval_treelookup_bb5_in(A,B,A) [B=2] 

### Ranking functions of CR eval_treelookup_bb5_in(V__pershsize,B,C) 

#### Partial ranking functions of CR eval_treelookup_bb5_in(V__pershsize,B,C) 


### Resulting Chains:eval_treelookup_bb5_in(V__pershsize,B,C) 
* [[12]]...
* [[12],13]
* [13]


### Merging Chains  eval_treelookup_bb5_in/3 into  External patterns of execution 
* [[13],[13,[12]]] --> 1 
* [[[12]]] --> 2 


### Specialization of cost equations eval_treelookup_bb2_in/2 
* CE 8 is refined into CE [16] 
* CE 6 is refined into CE [17] 
* CE 7 is refined into CE [18,19] 


#### Refined cost equations eval_treelookup_bb2_in/2 
* CE 16: eval_treelookup_bb2_in(V__pershsize,B) = 0
     [B=4] 
* CE 17: eval_treelookup_bb2_in(V__pershsize,B) = 0
     [B=3] 
* CE 18: eval_treelookup_bb2_in(V__pershsize,B) = 2+ eval_treelookup_bb5_in(V__pershsize,C,V__pershsize):1+ eval_treelookup_bb2_in(V__pershsize,B)
     [C=2] 
* CE 19: eval_treelookup_bb2_in(V__pershsize,B) = 2+ eval_treelookup_bb5_in(V__pershsize,C,D):2
     [C=2] 

### Cost equations --> "Loop" of eval_treelookup_bb2_in/2 
* CEs [19] --> Loop 14 
* CEs [18] --> Loop 15 
* CEs [16] --> Loop 16 
* CEs [17] --> Loop 17 

#### Loops of eval_treelookup_bb2_in/2 
* Loop 14: eval_treelookup_bb2_in(V__pershsize,B) [] 
* Loop 15: eval_treelookup_bb2_in(V__pershsize,B)->  eval_treelookup_bb2_in(V__pershsize,B)
                  [] 
* Loop 16: eval_treelookup_bb2_in(V__pershsize,B) [B=4] 
* Loop 17: eval_treelookup_bb2_in(V__pershsize,B) [B=3] 

### Ranking functions of CR eval_treelookup_bb2_in(V__pershsize,B) 

#### Partial ranking functions of CR eval_treelookup_bb2_in(V__pershsize,B) 


### Resulting Chains:eval_treelookup_bb2_in(V__pershsize,B) 
* [[15]]...
* [[15],17]
* [[15],16]
* [[15],14]...
* [17]
* [16]
* [14]...


### Merging Chains  eval_treelookup_bb2_in/2 into  External patterns of execution 
* [[17],[17,[15]]] --> 1 
* [[16],[16,[15]]] --> 2 
* [[14],[[15]],[14,[15]]] --> 3 


### Specialization of cost equations eval_treelookup__critedge_in/1 
* CE 13 is refined into CE [20] 


#### Refined cost equations eval_treelookup__critedge_in/1 
* CE 20: eval_treelookup__critedge_in(B) = 0
     [] 

### Cost equations --> "Loop" of eval_treelookup__critedge_in/1 
* CEs [20] --> Loop 18 

#### Loops of eval_treelookup__critedge_in/1 
* Loop 18: eval_treelookup__critedge_in(B) [] 

### Ranking functions of CR eval_treelookup__critedge_in(B) 

#### Partial ranking functions of CR eval_treelookup__critedge_in(B) 


### Resulting Chains:eval_treelookup__critedge_in(B) 
* [18]


### Merging Chains  eval_treelookup__critedge_in/1 into  External patterns of execution 
* [[18]] --> 1 


### Specialization of cost equations loop_cont_eval_treelookup_bb2_in/2 
* CE 10 is refined into CE [21] 
* CE 9 is refined into CE [22] 


#### Refined cost equations loop_cont_eval_treelookup_bb2_in/2 
* CE 21: loop_cont_eval_treelookup_bb2_in(B,A) = 0
     [B=4] 
* CE 22: loop_cont_eval_treelookup_bb2_in(B,A) = 0+ eval_treelookup__critedge_in(A):1
     [B=3] 

### Cost equations --> "Loop" of loop_cont_eval_treelookup_bb2_in/2 
* CEs [21] --> Loop 19 
* CEs [22] --> Loop 20 

#### Loops of loop_cont_eval_treelookup_bb2_in/2 
* Loop 19: loop_cont_eval_treelookup_bb2_in(B,A) [B=4] 
* Loop 20: loop_cont_eval_treelookup_bb2_in(B,A) [B=3] 

### Ranking functions of CR loop_cont_eval_treelookup_bb2_in(B,A) 

#### Partial ranking functions of CR loop_cont_eval_treelookup_bb2_in(B,A) 


### Resulting Chains:loop_cont_eval_treelookup_bb2_in(B,A) 
* [20]
* [19]


### Merging Chains  loop_cont_eval_treelookup_bb2_in/2 into  External patterns of execution 
* [[20]] --> 1 
* [[19]] --> 2 


### Specialization of cost equations eval_treelookup_5/2 
* CE 5 is refined into CE [23,24,25] 


#### Refined cost equations eval_treelookup_5/2 
* CE 23: eval_treelookup_5(V__pershsize,B) = 1+ eval_treelookup_bb2_in(V__pershsize,C):1+ loop_cont_eval_treelookup_bb2_in(D,B):1
     [D=3,C=3] 
* CE 24: eval_treelookup_5(V__pershsize,B) = 1+ eval_treelookup_bb2_in(V__pershsize,C):2+ loop_cont_eval_treelookup_bb2_in(D,B):2
     [D=4,C=4] 
* CE 25: eval_treelookup_5(V__pershsize,B) = 1+ eval_treelookup_bb2_in(V__pershsize,C):3
     [] 

### Cost equations --> "Loop" of eval_treelookup_5/2 
* CEs [25] --> Loop 21 
* CEs [23,24] --> Loop 22 

#### Loops of eval_treelookup_5/2 
* Loop 21: eval_treelookup_5(V__pershsize,B) [] 
* Loop 22: eval_treelookup_5(V__pershsize,B) [] 

### Ranking functions of CR eval_treelookup_5(V__pershsize,B) 

#### Partial ranking functions of CR eval_treelookup_5(V__pershsize,B) 


### Resulting Chains:eval_treelookup_5(V__pershsize,B) 
* [22]
* [21]...


### Merging Chains  eval_treelookup_5/2 into  External patterns of execution 
* [[22]] --> 1 
* [[21]] --> 2 


### Specialization of cost equations eval_treelookup_bb0_in/2 
* CE 3 is refined into CE [26] 
* CE 4 is refined into CE [27,28] 


#### Refined cost equations eval_treelookup_bb0_in/2 
* CE 26: eval_treelookup_bb0_in(V__pershsize,B) = 0
     [] 
* CE 27: eval_treelookup_bb0_in(V__pershsize,B) = 0+ eval_treelookup_5(V__pershsize,B):1
     [] 
* CE 28: eval_treelookup_bb0_in(V__pershsize,B) = 0+ eval_treelookup_5(V__pershsize,B):2
     [] 

### Cost equations --> "Loop" of eval_treelookup_bb0_in/2 
* CEs [28] --> Loop 23 
* CEs [26,27] --> Loop 24 

#### Loops of eval_treelookup_bb0_in/2 
* Loop 23: eval_treelookup_bb0_in(V__pershsize,B) [] 
* Loop 24: eval_treelookup_bb0_in(V__pershsize,B) [] 

### Ranking functions of CR eval_treelookup_bb0_in(V__pershsize,B) 

#### Partial ranking functions of CR eval_treelookup_bb0_in(V__pershsize,B) 


### Resulting Chains:eval_treelookup_bb0_in(V__pershsize,B) 
* [24]
* [23]...


### Merging Chains  eval_treelookup_bb0_in/2 into  External patterns of execution 
* [[24]] --> 1 
* [[23]] --> 2 


### Specialization of cost equations eval_treelookup_start/2 
* CE 2 is refined into CE [29,30] 


#### Refined cost equations eval_treelookup_start/2 
* CE 29: eval_treelookup_start(V__pershsize,B) = 0+ eval_treelookup_bb0_in(V__pershsize,B):1
     [] 
* CE 30: eval_treelookup_start(V__pershsize,B) = 0+ eval_treelookup_bb0_in(V__pershsize,B):2
     [] 

### Cost equations --> "Loop" of eval_treelookup_start/2 
* CEs [30] --> Loop 25 
* CEs [29] --> Loop 26 

#### Loops of eval_treelookup_start/2 
* Loop 25: eval_treelookup_start(V__pershsize,B) [] 
* Loop 26: eval_treelookup_start(V__pershsize,B) [] 

### Ranking functions of CR eval_treelookup_start(V__pershsize,B) 

#### Partial ranking functions of CR eval_treelookup_start(V__pershsize,B) 


### Resulting Chains:eval_treelookup_start(V__pershsize,B) 
* [26]
* [25]...


### Merging Chains  eval_treelookup_start/2 into  External patterns of execution 
* [[26]] --> 1 
* [[25]] --> 2 


Computing Bounds
=====================================

#### Cost of loops [12] 

 * loop 12:eval_treelookup_bb5_in(V__pershsize,B,C) -> [eval_treelookup_bb5_in(V__pershsize',B',C')] 
1
#### Cost of phase [12]:eval_treelookup_bb5_in(V__pershsize,B,C) -> [eval_treelookup_bb5_in(V__pershsize',B',C')] 
1*it(12)+0
#### Cost of phase [12]:eval_treelookup_bb5_in(V__pershsize,B,C) -> [eval_treelookup_bb5_in(V__pershsize',B',C')] 
1*it(12)+0
#### Cost of chains of eval_treelookup_bb5_in(V__pershsize,B,C):
* Chain [[12]]...: 1*it(12)+0
  with precondition: [B=2] 

* Chain [[12],13]: 1*it(12)+0
  with precondition: [B=2,V__pershsize=C] 

* Chain [13]: 0
  with precondition: [B=2,C=V__pershsize] 


#### Cost of loops [15] 

 * loop 15:eval_treelookup_bb2_in(V__pershsize,B) -> [eval_treelookup_bb2_in(V__pershsize',B')] 
1*s(3)+2
#### Cost of phase [15]:eval_treelookup_bb2_in(V__pershsize,B) -> [eval_treelookup_bb2_in(V__pershsize',B')] 
3*it(15)+0
#### Cost of phase [15]:eval_treelookup_bb2_in(V__pershsize,B) -> [eval_treelookup_bb2_in(V__pershsize',B')] 
3*it(15)+0
#### Cost of phase [15]:eval_treelookup_bb2_in(V__pershsize,B) -> [eval_treelookup_bb2_in(V__pershsize',B')] 
3*it(15)+0
#### Cost of phase [15]:eval_treelookup_bb2_in(V__pershsize,B) -> [eval_treelookup_bb2_in(V__pershsize',B')] 
3*it(15)+0
#### Cost of chains of eval_treelookup_bb2_in(V__pershsize,B):
* Chain [[15]]...: 3*it(15)+0
  with precondition: [] 

* Chain [[15],17]: 3*it(15)+0
  with precondition: [B=3] 

* Chain [[15],16]: 3*it(15)+0
  with precondition: [B=4] 

* Chain [[15],14]...: 4*it(15)+2
  with precondition: [] 

* Chain [17]: 0
  with precondition: [B=3] 

* Chain [16]: 0
  with precondition: [B=4] 

* Chain [14]...: 1*s(5)+2
  with precondition: [] 


#### Cost of chains of eval_treelookup__critedge_in(B):
* Chain [18]: 0
  with precondition: [] 


#### Cost of chains of loop_cont_eval_treelookup_bb2_in(B,A):
* Chain [20]: 0
  with precondition: [B=3] 

* Chain [19]: 0
  with precondition: [B=4] 


#### Cost of chains of eval_treelookup_5(V__pershsize,B):
* Chain [22]: 1*aux(5)+0
  with precondition: [] 

* Chain [21]...: 1*s(13)+1
  with precondition: [] 


#### Cost of chains of eval_treelookup_bb0_in(V__pershsize,B):
* Chain [24]: 1*aux(6)+0
  with precondition: [] 

* Chain [23]...: 1*s(15)+1
  with precondition: [] 


#### Cost of chains of eval_treelookup_start(V__pershsize,B):
* Chain [26]: 1*s(16)+0
  with precondition: [] 

* Chain [25]...: 1*s(17)+1
  with precondition: [] 


Closed-form bounds of eval_treelookup_start(V__pershsize,B): 
-------------------------------------
* Chain [26] with precondition: [] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [25]... with precondition: [] 
    - Upper bound: inf 
    - Complexity: infinity 

### Maximum cost of eval_treelookup_start(V__pershsize,B): inf 
Asymptotic class: infinity 

Time statistics: 
-------------------------------------
* Partial evaluation computed in 8 ms.
* Invariants computed in 8 ms.
   - Backward Invariants 6 ms.
   - Transitive Invariants 1 ms.
* Refinement performed in 17 ms.
* Termination proved in 1 ms.
* Upper bounds computed in 13 ms.
   - Equation cost structures 5 ms.
   - Phase cost structures 3 ms.
   - Chain cost structures 5 ms.
   - Solving cost expressions 0 ms.
* Total analysis performed in 58 ms.


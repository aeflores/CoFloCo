Warning: Ignored call to eval_ref_stack_push_stop/1 in equation eval_ref_stack_push_bb6_in/1 

Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. recursive  : [eval_ref_stack_push_14/6,eval_ref_stack_push_15/6,eval_ref_stack_push_bb1_in/4]
1. non_recursive  : [eval_ref_stack_push_bb6_in/1]
2. non_recursive  : [eval_ref_stack_push_18/1]
3. non_recursive  : [eval_ref_stack_push_17/2]
4. non_recursive  : [loop_cont_eval_ref_stack_push_bb1_in/3]
5. non_recursive  : [eval_ref_stack_push_bb0_in/2]
6. non_recursive  : [eval_ref_stack_push_start/2]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into eval_ref_stack_push_bb1_in/4
1. SCC is completely evaluated into other SCCs
2. SCC is completely evaluated into other SCCs
3. SCC is completely evaluated into other SCCs
4. SCC is partially evaluated into loop_cont_eval_ref_stack_push_bb1_in/3
5. SCC is partially evaluated into eval_ref_stack_push_bb0_in/2
6. SCC is partially evaluated into eval_ref_stack_push_start/2

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations eval_ref_stack_push_bb1_in/4 
* CE 7 is refined into CE [10] 
* CE 6 is refined into CE [11] 
* CE 5 is refined into CE [12] 
* CE 4 is refined into CE [13] 


#### Refined cost equations eval_ref_stack_push_bb1_in/4 
* CE 10: eval_ref_stack_push_bb1_in(V_count,V_needed_0,B,C) = 0
     [B=3] 
* CE 11: eval_ref_stack_push_bb1_in(V_count,V_needed_0,B,C) = 0
     [V_needed_0+C=V_count,B=2] 
* CE 12: eval_ref_stack_push_bb1_in(V_count,V_needed_0,B,C) = 1+ eval_ref_stack_push_bb1_in(V_count,D,B,C)
     [V_needed_0>=D,D>=1] 
* CE 13: eval_ref_stack_push_bb1_in(V_count,V_needed_0,B,C) = 1+ eval_ref_stack_push_bb1_in(V_count,D,B,C)
     [D>=V_needed_0,D>=1] 

### Cost equations --> "Loop" of eval_ref_stack_push_bb1_in/4 
* CEs [12] --> Loop 9 
* CEs [13] --> Loop 10 
* CEs [10] --> Loop 11 
* CEs [11] --> Loop 12 

#### Loops of eval_ref_stack_push_bb1_in/4 
* Loop 9: eval_ref_stack_push_bb1_in(V_count,V_needed_0,B,C)->  eval_ref_stack_push_bb1_in(V_count,V_needed_0',B,C)
                  [V_needed_0>=V_needed_0',V_needed_0'>=1] 
* Loop 10: eval_ref_stack_push_bb1_in(V_count,V_needed_0,B,C)->  eval_ref_stack_push_bb1_in(V_count,V_needed_0',B,C)
                  [V_needed_0'>=V_needed_0,V_needed_0'>=1] 
* Loop 11: eval_ref_stack_push_bb1_in(V_count,V_needed_0,B,C) [B=3] 
* Loop 12: eval_ref_stack_push_bb1_in(V_count,V_needed_0,B,C) [V_count=V_needed_0+C,B=2] 

### Ranking functions of CR eval_ref_stack_push_bb1_in(V_count,V_needed_0,B,C) 

#### Partial ranking functions of CR eval_ref_stack_push_bb1_in(V_count,V_needed_0,B,C) 


### Resulting Chains:eval_ref_stack_push_bb1_in(V_count,V_needed_0,B,C) 
* [[9,10]]...
* [[9,10],12]
* [[9,10],11]
* [12]
* [11]


### Merging Chains  eval_ref_stack_push_bb1_in/4 into  External patterns of execution 
* [[12]] --> 1 
* [[12,[9,10]]] --> 2 
* [[11],[11,[9,10]]] --> 3 
* [[[9,10]]] --> 4 


### Specialization of cost equations loop_cont_eval_ref_stack_push_bb1_in/3 
* CE 9 is refined into CE [14] 
* CE 8 is refined into CE [15] 


#### Refined cost equations loop_cont_eval_ref_stack_push_bb1_in/3 
* CE 14: loop_cont_eval_ref_stack_push_bb1_in(C,A,B) = 0
     [C=3] 
* CE 15: loop_cont_eval_ref_stack_push_bb1_in(C,A,B) = 0
     [C=2] 

### Cost equations --> "Loop" of loop_cont_eval_ref_stack_push_bb1_in/3 
* CEs [14] --> Loop 13 
* CEs [15] --> Loop 14 

#### Loops of loop_cont_eval_ref_stack_push_bb1_in/3 
* Loop 13: loop_cont_eval_ref_stack_push_bb1_in(C,A,B) [C=3] 
* Loop 14: loop_cont_eval_ref_stack_push_bb1_in(C,A,B) [C=2] 

### Ranking functions of CR loop_cont_eval_ref_stack_push_bb1_in(C,A,B) 

#### Partial ranking functions of CR loop_cont_eval_ref_stack_push_bb1_in(C,A,B) 


### Resulting Chains:loop_cont_eval_ref_stack_push_bb1_in(C,A,B) 
* [14]
* [13]


### Merging Chains  loop_cont_eval_ref_stack_push_bb1_in/3 into  External patterns of execution 
* [[14]] --> 1 
* [[13]] --> 2 


### Specialization of cost equations eval_ref_stack_push_bb0_in/2 
* CE 3 is refined into CE [16,17,18,19] 


#### Refined cost equations eval_ref_stack_push_bb0_in/2 
* CE 16: eval_ref_stack_push_bb0_in(V_count,B) = 1+ eval_ref_stack_push_bb1_in(V_count,V_count,C,D):1+ loop_cont_eval_ref_stack_push_bb1_in(E,F,B):1
     [F=0,E=2,D=0,C=2] 
* CE 17: eval_ref_stack_push_bb0_in(V_count,B) = 1+ eval_ref_stack_push_bb1_in(V_count,V_count,C,D):2+ loop_cont_eval_ref_stack_push_bb1_in(E,D,B):1
     [V_count>=D+1,E=2,C=2] 
* CE 18: eval_ref_stack_push_bb0_in(V_count,B) = 1+ eval_ref_stack_push_bb1_in(V_count,V_count,C,D):3+ loop_cont_eval_ref_stack_push_bb1_in(E,D,B):2
     [E=3,C=3] 
* CE 19: eval_ref_stack_push_bb0_in(V_count,B) = 1+ eval_ref_stack_push_bb1_in(V_count,V_count,C,D):4
     [] 

### Cost equations --> "Loop" of eval_ref_stack_push_bb0_in/2 
* CEs [19] --> Loop 15 
* CEs [16,17,18] --> Loop 16 

#### Loops of eval_ref_stack_push_bb0_in/2 
* Loop 15: eval_ref_stack_push_bb0_in(V_count,B) [] 
* Loop 16: eval_ref_stack_push_bb0_in(V_count,B) [] 

### Ranking functions of CR eval_ref_stack_push_bb0_in(V_count,B) 

#### Partial ranking functions of CR eval_ref_stack_push_bb0_in(V_count,B) 


### Resulting Chains:eval_ref_stack_push_bb0_in(V_count,B) 
* [16]
* [15]...


### Merging Chains  eval_ref_stack_push_bb0_in/2 into  External patterns of execution 
* [[16]] --> 1 
* [[15]] --> 2 


### Specialization of cost equations eval_ref_stack_push_start/2 
* CE 2 is refined into CE [20,21] 


#### Refined cost equations eval_ref_stack_push_start/2 
* CE 20: eval_ref_stack_push_start(V_count,B) = 0+ eval_ref_stack_push_bb0_in(V_count,B):1
     [] 
* CE 21: eval_ref_stack_push_start(V_count,B) = 0+ eval_ref_stack_push_bb0_in(V_count,B):2
     [] 

### Cost equations --> "Loop" of eval_ref_stack_push_start/2 
* CEs [21] --> Loop 17 
* CEs [20] --> Loop 18 

#### Loops of eval_ref_stack_push_start/2 
* Loop 17: eval_ref_stack_push_start(V_count,B) [] 
* Loop 18: eval_ref_stack_push_start(V_count,B) [] 

### Ranking functions of CR eval_ref_stack_push_start(V_count,B) 

#### Partial ranking functions of CR eval_ref_stack_push_start(V_count,B) 


### Resulting Chains:eval_ref_stack_push_start(V_count,B) 
* [18]
* [17]...


### Merging Chains  eval_ref_stack_push_start/2 into  External patterns of execution 
* [[18]] --> 1 
* [[17]] --> 2 


Computing Bounds
=====================================

#### Cost of loops [9,10] 

 * loop 9:eval_ref_stack_push_bb1_in(V_count,V_needed_0,B,C) -> [eval_ref_stack_push_bb1_in(V_count',V_needed_0',B',C')] 
1
 * loop 10:eval_ref_stack_push_bb1_in(V_count,V_needed_0,B,C) -> [eval_ref_stack_push_bb1_in(V_count',V_needed_0',B',C')] 
1
#### Cost of phase [9,10]:eval_ref_stack_push_bb1_in(V_count,V_needed_0,B,C) -> [eval_ref_stack_push_bb1_in(V_count',V_needed_0',B',C')] 
2*it(9)+0
#### Cost of phase [9,10]:eval_ref_stack_push_bb1_in(V_count,V_needed_0,B,C) -> [eval_ref_stack_push_bb1_in(V_count',V_needed_0',B',C')] 
2*it(9)+0
#### Cost of phase [9,10]:eval_ref_stack_push_bb1_in(V_count,V_needed_0,B,C) -> [eval_ref_stack_push_bb1_in(V_count',V_needed_0',B',C')] 
2*it(9)+0
#### Cost of chains of eval_ref_stack_push_bb1_in(V_count,V_needed_0,B,C):
* Chain [[9,10]]...: 2*it(9)+0
  with precondition: [] 

* Chain [[9,10],12]: 2*it(9)+0
  with precondition: [B=2,V_count>=C+1] 

* Chain [[9,10],11]: 2*it(9)+0
  with precondition: [B=3] 

* Chain [12]: 0
  with precondition: [B=2,V_needed_0+C=V_count] 

* Chain [11]: 0
  with precondition: [B=3] 


#### Cost of chains of loop_cont_eval_ref_stack_push_bb1_in(C,A,B):
* Chain [14]: 0
  with precondition: [C=2] 

* Chain [13]: 0
  with precondition: [C=3] 


#### Cost of chains of eval_ref_stack_push_bb0_in(V_count,B):
* Chain [16]: 1*aux(2)+0
  with precondition: [] 

* Chain [15]...: 2*s(4)+1
  with precondition: [] 


#### Cost of chains of eval_ref_stack_push_start(V_count,B):
* Chain [18]: 1*s(5)+0
  with precondition: [] 

* Chain [17]...: 2*s(6)+1
  with precondition: [] 


Closed-form bounds of eval_ref_stack_push_start(V_count,B): 
-------------------------------------
* Chain [18] with precondition: [] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [17]... with precondition: [] 
    - Upper bound: inf 
    - Complexity: infinity 

### Maximum cost of eval_ref_stack_push_start(V_count,B): inf 
Asymptotic class: infinity 

Time statistics: 
-------------------------------------
* Partial evaluation computed in 47 ms.
* Invariants computed in 8 ms.
   - Backward Invariants 4 ms.
   - Transitive Invariants 1 ms.
* Refinement performed in 19 ms.
* Termination proved in 1 ms.
* Upper bounds computed in 10 ms.
   - Equation cost structures 4 ms.
   - Phase cost structures 3 ms.
   - Chain cost structures 2 ms.
   - Solving cost expressions 0 ms.
* Total analysis performed in 132 ms.


Warning: Ignored call to eval_Fax3Close_stop/1 in equation eval_Fax3Close_bb9_in/1 

Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. recursive  : [eval_Fax3Close_12/4,eval_Fax3Close_13/4,eval_Fax3Close_bb4_in/4]
1. non_recursive  : [eval_Fax3Close_bb9_in/1]
2. non_recursive  : [eval_Fax3Close_bb8_in/1]
3. non_recursive  : [eval_Fax3Close_19/1]
4. non_recursive  : [eval_Fax3Close_18/1]
5. non_recursive  : [loop_cont_eval_Fax3Close_bb4_in/2]
6. non_recursive  : [eval_Fax3Close_bb3_in/3]
7. non_recursive  : [eval_Fax3Close_bb0_in/1]
8. non_recursive  : [eval_Fax3Close_start/1]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into eval_Fax3Close_bb4_in/4
1. SCC is completely evaluated into other SCCs
2. SCC is completely evaluated into other SCCs
3. SCC is completely evaluated into other SCCs
4. SCC is completely evaluated into other SCCs
5. SCC is partially evaluated into loop_cont_eval_Fax3Close_bb4_in/2
6. SCC is partially evaluated into eval_Fax3Close_bb3_in/3
7. SCC is partially evaluated into eval_Fax3Close_bb0_in/1
8. SCC is partially evaluated into eval_Fax3Close_start/1

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations eval_Fax3Close_bb4_in/4 
* CE 9 is refined into CE [12] 
* CE 8 is refined into CE [13] 
* CE 7 is refined into CE [14] 


#### Refined cost equations eval_Fax3Close_bb4_in/4 
* CE 12: eval_Fax3Close_bb4_in(V_length_0,V_code_0,V_i_0,B) = 0
     [V_i_0>=6,V_length_0>=12,13>=V_length_0,B=3] 
* CE 13: eval_Fax3Close_bb4_in(V_length_0,V_code_0,V_i_0,B) = 0
     [V_i_0>=6,V_length_0>=12,13>=V_length_0,B=2] 
* CE 14: eval_Fax3Close_bb4_in(V_length_0,V_code_0,V_i_0,B) = 1+ eval_Fax3Close_bb4_in(V_length_0,V_code_0,C,B)
     [V_i_0>=0,V_length_0>=12,5>=V_i_0,13>=V_length_0,V_i_0+1=C] 

### Cost equations --> "Loop" of eval_Fax3Close_bb4_in/4 
* CEs [14] --> Loop 9 
* CEs [12] --> Loop 10 
* CEs [13] --> Loop 11 

#### Loops of eval_Fax3Close_bb4_in/4 
* Loop 9: eval_Fax3Close_bb4_in(V_length_0,V_code_0,V_i_0,B)->  eval_Fax3Close_bb4_in(V_length_0,V_code_0,V_i_0',B)
                  [V_i_0>=0,V_length_0>=12,5>=V_i_0,13>=V_length_0,V_i_0+1=V_i_0'] 
* Loop 10: eval_Fax3Close_bb4_in(V_length_0,V_code_0,V_i_0,B) [V_i_0>=6,V_length_0>=12,13>=V_length_0,B=3] 
* Loop 11: eval_Fax3Close_bb4_in(V_length_0,V_code_0,V_i_0,B) [V_i_0>=6,V_length_0>=12,13>=V_length_0,B=2] 

### Ranking functions of CR eval_Fax3Close_bb4_in(V_length_0,V_code_0,V_i_0,B) 
* RF of phase [9]: [-V_i_0+6]

#### Partial ranking functions of CR eval_Fax3Close_bb4_in(V_length_0,V_code_0,V_i_0,B) 
* Partial RF of phase [9]:
  - RF of loop [9:1]:
    -V_i_0+6


### Resulting Chains:eval_Fax3Close_bb4_in(V_length_0,V_code_0,V_i_0,B) 
* [[9],11]
* [[9],10]


### Merging Chains  eval_Fax3Close_bb4_in/4 into  External patterns of execution 
* [[11,[9]]] --> 1 
* [[10,[9]]] --> 2 


### Specialization of cost equations loop_cont_eval_Fax3Close_bb4_in/2 
* CE 11 is refined into CE [15] 
* CE 10 is refined into CE [16] 


#### Refined cost equations loop_cont_eval_Fax3Close_bb4_in/2 
* CE 15: loop_cont_eval_Fax3Close_bb4_in(C,A) = 0
     [C=3] 
* CE 16: loop_cont_eval_Fax3Close_bb4_in(C,A) = 0
     [C=2] 

### Cost equations --> "Loop" of loop_cont_eval_Fax3Close_bb4_in/2 
* CEs [15] --> Loop 12 
* CEs [16] --> Loop 13 

#### Loops of loop_cont_eval_Fax3Close_bb4_in/2 
* Loop 12: loop_cont_eval_Fax3Close_bb4_in(C,A) [C=3] 
* Loop 13: loop_cont_eval_Fax3Close_bb4_in(C,A) [C=2] 

### Ranking functions of CR loop_cont_eval_Fax3Close_bb4_in(C,A) 

#### Partial ranking functions of CR loop_cont_eval_Fax3Close_bb4_in(C,A) 


### Resulting Chains:loop_cont_eval_Fax3Close_bb4_in(C,A) 
* [13]
* [12]


### Merging Chains  loop_cont_eval_Fax3Close_bb4_in/2 into  External patterns of execution 
* [[13]] --> 1 
* [[12]] --> 2 


### Specialization of cost equations eval_Fax3Close_bb3_in/3 
* CE 6 is refined into CE [17,18] 


#### Refined cost equations eval_Fax3Close_bb3_in/3 
* CE 17: eval_Fax3Close_bb3_in(V_length_0,V_code_0,B) = 1+ eval_Fax3Close_bb4_in(V_length_0,V_code_0,C,D):1+ loop_cont_eval_Fax3Close_bb4_in(E,B):1
     [V_length_0>=12,13>=V_length_0,E=2,D=2,C=0] 
* CE 18: eval_Fax3Close_bb3_in(V_length_0,V_code_0,B) = 1+ eval_Fax3Close_bb4_in(V_length_0,V_code_0,C,D):2+ loop_cont_eval_Fax3Close_bb4_in(E,B):2
     [V_length_0>=12,13>=V_length_0,E=3,D=3,C=0] 

### Cost equations --> "Loop" of eval_Fax3Close_bb3_in/3 
* CEs [17,18] --> Loop 14 

#### Loops of eval_Fax3Close_bb3_in/3 
* Loop 14: eval_Fax3Close_bb3_in(V_length_0,V_code_0,B) [V_length_0>=12,13>=V_length_0] 

### Ranking functions of CR eval_Fax3Close_bb3_in(V_length_0,V_code_0,B) 

#### Partial ranking functions of CR eval_Fax3Close_bb3_in(V_length_0,V_code_0,B) 


### Resulting Chains:eval_Fax3Close_bb3_in(V_length_0,V_code_0,B) 
* [14]


### Merging Chains  eval_Fax3Close_bb3_in/3 into  External patterns of execution 
* [[14]] --> 1 


### Specialization of cost equations eval_Fax3Close_bb0_in/1 
* CE 3 is refined into CE [19] 
* CE 4 is refined into CE [20] 
* CE 5 is refined into CE [21] 


#### Refined cost equations eval_Fax3Close_bb0_in/1 
* CE 19: eval_Fax3Close_bb0_in(B) = 0+ eval_Fax3Close_bb3_in(C,D,B):1
     [C=13] 
* CE 20: eval_Fax3Close_bb0_in(B) = 0+ eval_Fax3Close_bb3_in(C,D,B):1
     [D=1,C=12] 
* CE 21: eval_Fax3Close_bb0_in(B) = 0
     [] 

### Cost equations --> "Loop" of eval_Fax3Close_bb0_in/1 
* CEs [19,20,21] --> Loop 15 

#### Loops of eval_Fax3Close_bb0_in/1 
* Loop 15: eval_Fax3Close_bb0_in(B) [] 

### Ranking functions of CR eval_Fax3Close_bb0_in(B) 

#### Partial ranking functions of CR eval_Fax3Close_bb0_in(B) 


### Resulting Chains:eval_Fax3Close_bb0_in(B) 
* [15]


### Merging Chains  eval_Fax3Close_bb0_in/1 into  External patterns of execution 
* [[15]] --> 1 


### Specialization of cost equations eval_Fax3Close_start/1 
* CE 2 is refined into CE [22] 


#### Refined cost equations eval_Fax3Close_start/1 
* CE 22: eval_Fax3Close_start(B) = 0+ eval_Fax3Close_bb0_in(B):1
     [] 

### Cost equations --> "Loop" of eval_Fax3Close_start/1 
* CEs [22] --> Loop 16 

#### Loops of eval_Fax3Close_start/1 
* Loop 16: eval_Fax3Close_start(B) [] 

### Ranking functions of CR eval_Fax3Close_start(B) 

#### Partial ranking functions of CR eval_Fax3Close_start(B) 


### Resulting Chains:eval_Fax3Close_start(B) 
* [16]


### Merging Chains  eval_Fax3Close_start/1 into  External patterns of execution 
* [[16]] --> 1 


Computing Bounds
=====================================

#### Cost of loops [9] 

 * loop 9:eval_Fax3Close_bb4_in(V_length_0,V_code_0,V_i_0,B) -> [eval_Fax3Close_bb4_in(V_length_0',V_code_0',V_i_0',B')] 
1
#### Cost of phase [9]:eval_Fax3Close_bb4_in(V_length_0,V_code_0,V_i_0,B) -> [eval_Fax3Close_bb4_in(V_length_0',V_code_0',V_i_0',B')] 
1*it(9)+0
  Such that:it(9) =< -V_i_0+6
it(9) =< -V_i_0+V_i_0'

#### Cost of phase [9]:eval_Fax3Close_bb4_in(V_length_0,V_code_0,V_i_0,B) -> [eval_Fax3Close_bb4_in(V_length_0',V_code_0',V_i_0',B')] 
1*it(9)+0
  Such that:it(9) =< -V_i_0+6
it(9) =< -V_i_0+V_i_0'

#### Cost of chains of eval_Fax3Close_bb4_in(V_length_0,V_code_0,V_i_0,B):
* Chain [[9],11]: 1*it(9)+0
  Such that:it(9) =< -V_i_0+6

  with precondition: [B=2,13>=V_length_0,5>=V_i_0,V_length_0>=12,V_i_0>=0] 

* Chain [[9],10]: 1*it(9)+0
  Such that:it(9) =< -V_i_0+6

  with precondition: [B=3,13>=V_length_0,5>=V_i_0,V_length_0>=12,V_i_0>=0] 


#### Cost of chains of loop_cont_eval_Fax3Close_bb4_in(C,A):
* Chain [13]: 0
  with precondition: [C=2] 

* Chain [12]: 0
  with precondition: [C=3] 


#### Cost of chains of eval_Fax3Close_bb3_in(V_length_0,V_code_0,B):
* Chain [14]: 13
  with precondition: [13>=V_length_0,V_length_0>=12] 


#### Cost of chains of eval_Fax3Close_bb0_in(B):
* Chain [15]: 13
  with precondition: [] 


#### Cost of chains of eval_Fax3Close_start(B):
* Chain [16]: 13
  with precondition: [] 


Closed-form bounds of eval_Fax3Close_start(B): 
-------------------------------------
* Chain [16] with precondition: [] 
    - Upper bound: 13 
    - Complexity: constant 

### Maximum cost of eval_Fax3Close_start(B): 13 
Asymptotic class: constant 

Time statistics: 
-------------------------------------
* Partial evaluation computed in 22 ms.
* Invariants computed in 34 ms.
   - Backward Invariants 19 ms.
   - Transitive Invariants 6 ms.
* Refinement performed in 51 ms.
* Termination proved in 8 ms.
* Upper bounds computed in 46 ms.
   - Equation cost structures 18 ms.
   - Phase cost structures 12 ms.
   - Chain cost structures 17 ms.
   - Solving cost expressions 0 ms.
* Total analysis performed in 205 ms.


Warning: Ignored call to eval_alloc_is_since_save_stop/1 in equation eval_alloc_is_since_save_bb14_in/1 

Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. non_recursive  : [eval_alloc_is_since_save_bb14_in/1]
1. recursive  : [eval_alloc_is_since_save_bb2_in/1,eval_alloc_is_since_save_bb5_in/1]
2. recursive  : [eval_alloc_is_since_save_bb1_in/1,loop_cont_eval_alloc_is_since_save_bb2_in/2]
3. recursive  : [eval_alloc_is_since_save_bb10_in/1,eval_alloc_is_since_save_bb13_in/1]
4. non_recursive  : [loop_cont_eval_alloc_is_since_save_bb10_in/2]
5. non_recursive  : [loop_cont_eval_alloc_is_since_save_bb1_in/2]
6. non_recursive  : [eval_alloc_is_since_save_bb0_in/1]
7. non_recursive  : [eval_alloc_is_since_save_start/1]

#### Obtained direct recursion through partial evaluation 
0. SCC is completely evaluated into other SCCs
1. SCC is partially evaluated into eval_alloc_is_since_save_bb2_in/1
2. SCC is partially evaluated into eval_alloc_is_since_save_bb1_in/1
3. SCC is partially evaluated into eval_alloc_is_since_save_bb10_in/1
4. SCC is completely evaluated into other SCCs
5. SCC is partially evaluated into loop_cont_eval_alloc_is_since_save_bb1_in/2
6. SCC is partially evaluated into eval_alloc_is_since_save_bb0_in/1
7. SCC is partially evaluated into eval_alloc_is_since_save_start/1

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations eval_alloc_is_since_save_bb2_in/1 
* CE 13 is refined into CE [16] 
* CE 12 is refined into CE [17] 
* CE 11 is refined into CE [18] 
* CE 10 is refined into CE [19] 


#### Refined cost equations eval_alloc_is_since_save_bb2_in/1 
* CE 16: eval_alloc_is_since_save_bb2_in(B) = 0
     [B=4] 
* CE 17: eval_alloc_is_since_save_bb2_in(B) = 0
     [B=3] 
* CE 18: eval_alloc_is_since_save_bb2_in(B) = 0
     [B=2] 
* CE 19: eval_alloc_is_since_save_bb2_in(B) = 1+ eval_alloc_is_since_save_bb2_in(B)
     [B>=2,4>=B] 

### Cost equations --> "Loop" of eval_alloc_is_since_save_bb2_in/1 
* CEs [19] --> Loop 14 
* CEs [16] --> Loop 15 
* CEs [17] --> Loop 16 
* CEs [18] --> Loop 17 

#### Loops of eval_alloc_is_since_save_bb2_in/1 
* Loop 14: eval_alloc_is_since_save_bb2_in(B)->  eval_alloc_is_since_save_bb2_in(B)
                  [B>=2,4>=B] 
* Loop 15: eval_alloc_is_since_save_bb2_in(B) [B=4] 
* Loop 16: eval_alloc_is_since_save_bb2_in(B) [B=3] 
* Loop 17: eval_alloc_is_since_save_bb2_in(B) [B=2] 

### Ranking functions of CR eval_alloc_is_since_save_bb2_in(B) 

#### Partial ranking functions of CR eval_alloc_is_since_save_bb2_in(B) 


### Resulting Chains:eval_alloc_is_since_save_bb2_in(B) 
* [[14]]...
* [[14],17]
* [[14],16]
* [[14],15]
* [17]
* [16]
* [15]


### Merging Chains  eval_alloc_is_since_save_bb2_in/1 into  External patterns of execution 
* [[17],[17,[14]]] --> 1 
* [[16],[16,[14]]] --> 2 
* [[15],[15,[14]]] --> 3 
* [[[14]]] --> 4 


### Specialization of cost equations eval_alloc_is_since_save_bb1_in/1 
* CE 6 is refined into CE [20,21] 
* CE 7 is refined into CE [22,23] 
* CE 5 is refined into CE [24,25] 


#### Refined cost equations eval_alloc_is_since_save_bb1_in/1 
* CE 20: eval_alloc_is_since_save_bb1_in(B) = 1+ eval_alloc_is_since_save_bb2_in(C):2
     [C=3,B=3] 
* CE 21: eval_alloc_is_since_save_bb1_in(B) = 1+ eval_alloc_is_since_save_bb2_in(C):4
     [C=3,B=3] 
* CE 22: eval_alloc_is_since_save_bb1_in(B) = 1+ eval_alloc_is_since_save_bb2_in(C):1
     [C=2,B=2] 
* CE 23: eval_alloc_is_since_save_bb1_in(B) = 1+ eval_alloc_is_since_save_bb2_in(C):4
     [C=2,B=2] 
* CE 24: eval_alloc_is_since_save_bb1_in(B) = 2+ eval_alloc_is_since_save_bb2_in(C):3+ eval_alloc_is_since_save_bb1_in(B)
     [C=4] 
* CE 25: eval_alloc_is_since_save_bb1_in(B) = 2+ eval_alloc_is_since_save_bb2_in(C):4
     [C=4] 

### Cost equations --> "Loop" of eval_alloc_is_since_save_bb1_in/1 
* CEs [21,23,25] --> Loop 18 
* CEs [24] --> Loop 19 
* CEs [20] --> Loop 20 
* CEs [22] --> Loop 21 

#### Loops of eval_alloc_is_since_save_bb1_in/1 
* Loop 18: eval_alloc_is_since_save_bb1_in(B) [] 
* Loop 19: eval_alloc_is_since_save_bb1_in(B)->  eval_alloc_is_since_save_bb1_in(B)
                  [] 
* Loop 20: eval_alloc_is_since_save_bb1_in(B) [B=3] 
* Loop 21: eval_alloc_is_since_save_bb1_in(B) [B=2] 

### Ranking functions of CR eval_alloc_is_since_save_bb1_in(B) 

#### Partial ranking functions of CR eval_alloc_is_since_save_bb1_in(B) 


### Resulting Chains:eval_alloc_is_since_save_bb1_in(B) 
* [[19]]...
* [[19],21]
* [[19],20]
* [[19],18]...
* [21]
* [20]
* [18]...


### Merging Chains  eval_alloc_is_since_save_bb1_in/1 into  External patterns of execution 
* [[21],[21,[19]]] --> 1 
* [[20],[20,[19]]] --> 2 
* [[18],[[19]],[18,[19]]] --> 3 


### Specialization of cost equations eval_alloc_is_since_save_bb10_in/1 
* CE 15 is refined into CE [26] 
* CE 14 is refined into CE [27] 


#### Refined cost equations eval_alloc_is_since_save_bb10_in/1 
* CE 26: eval_alloc_is_since_save_bb10_in(B) = 0
     [B=2] 
* CE 27: eval_alloc_is_since_save_bb10_in(B) = 1+ eval_alloc_is_since_save_bb10_in(C)
     [C=2,B=2] 

### Cost equations --> "Loop" of eval_alloc_is_since_save_bb10_in/1 
* CEs [27] --> Loop 22 
* CEs [26] --> Loop 23 

#### Loops of eval_alloc_is_since_save_bb10_in/1 
* Loop 22: eval_alloc_is_since_save_bb10_in(B)->  eval_alloc_is_since_save_bb10_in(B')
                  [B'=2,B=2] 
* Loop 23: eval_alloc_is_since_save_bb10_in(B) [B=2] 

### Ranking functions of CR eval_alloc_is_since_save_bb10_in(B) 

#### Partial ranking functions of CR eval_alloc_is_since_save_bb10_in(B) 


### Resulting Chains:eval_alloc_is_since_save_bb10_in(B) 
* [[22]]...
* [[22],23]
* [23]


### Merging Chains  eval_alloc_is_since_save_bb10_in/1 into  External patterns of execution 
* [[23],[23,[22]]] --> 1 
* [[[22]]] --> 2 


### Specialization of cost equations loop_cont_eval_alloc_is_since_save_bb1_in/2 
* CE 9 is refined into CE [28,29] 
* CE 8 is refined into CE [30] 


#### Refined cost equations loop_cont_eval_alloc_is_since_save_bb1_in/2 
* CE 28: loop_cont_eval_alloc_is_since_save_bb1_in(B,A) = 1+ eval_alloc_is_since_save_bb10_in(C):1
     [C=2,B=3] 
* CE 29: loop_cont_eval_alloc_is_since_save_bb1_in(B,A) = 1+ eval_alloc_is_since_save_bb10_in(C):2
     [C=2,B=3] 
* CE 30: loop_cont_eval_alloc_is_since_save_bb1_in(B,A) = 0
     [B=2] 

### Cost equations --> "Loop" of loop_cont_eval_alloc_is_since_save_bb1_in/2 
* CEs [28] --> Loop 24 
* CEs [30] --> Loop 25 
* CEs [29] --> Loop 26 

#### Loops of loop_cont_eval_alloc_is_since_save_bb1_in/2 
* Loop 24: loop_cont_eval_alloc_is_since_save_bb1_in(B,A) [B=3] 
* Loop 25: loop_cont_eval_alloc_is_since_save_bb1_in(B,A) [B=2] 
* Loop 26: loop_cont_eval_alloc_is_since_save_bb1_in(B,A) [B=3] 

### Ranking functions of CR loop_cont_eval_alloc_is_since_save_bb1_in(B,A) 

#### Partial ranking functions of CR loop_cont_eval_alloc_is_since_save_bb1_in(B,A) 


### Resulting Chains:loop_cont_eval_alloc_is_since_save_bb1_in(B,A) 
* [26]...
* [25]
* [24]


### Merging Chains  loop_cont_eval_alloc_is_since_save_bb1_in/2 into  External patterns of execution 
* [[25]] --> 1 
* [[24]] --> 2 
* [[26]] --> 3 


### Specialization of cost equations eval_alloc_is_since_save_bb0_in/1 
* CE 3 is refined into CE [31] 
* CE 4 is refined into CE [32,33,34,35] 


#### Refined cost equations eval_alloc_is_since_save_bb0_in/1 
* CE 31: eval_alloc_is_since_save_bb0_in(B) = 0
     [] 
* CE 32: eval_alloc_is_since_save_bb0_in(B) = 1+ eval_alloc_is_since_save_bb1_in(C):1+ loop_cont_eval_alloc_is_since_save_bb1_in(D,B):1
     [D=2,C=2] 
* CE 33: eval_alloc_is_since_save_bb0_in(B) = 1+ eval_alloc_is_since_save_bb1_in(C):2+ loop_cont_eval_alloc_is_since_save_bb1_in(D,B):2
     [D=3,C=3] 
* CE 34: eval_alloc_is_since_save_bb0_in(B) = 1+ eval_alloc_is_since_save_bb1_in(C):2+ loop_cont_eval_alloc_is_since_save_bb1_in(D,B):3
     [D=3,C=3] 
* CE 35: eval_alloc_is_since_save_bb0_in(B) = 1+ eval_alloc_is_since_save_bb1_in(C):3
     [] 

### Cost equations --> "Loop" of eval_alloc_is_since_save_bb0_in/1 
* CEs [34,35] --> Loop 27 
* CEs [31,32,33] --> Loop 28 

#### Loops of eval_alloc_is_since_save_bb0_in/1 
* Loop 27: eval_alloc_is_since_save_bb0_in(B) [] 
* Loop 28: eval_alloc_is_since_save_bb0_in(B) [] 

### Ranking functions of CR eval_alloc_is_since_save_bb0_in(B) 

#### Partial ranking functions of CR eval_alloc_is_since_save_bb0_in(B) 


### Resulting Chains:eval_alloc_is_since_save_bb0_in(B) 
* [28]
* [27]...


### Merging Chains  eval_alloc_is_since_save_bb0_in/1 into  External patterns of execution 
* [[28]] --> 1 
* [[27]] --> 2 


### Specialization of cost equations eval_alloc_is_since_save_start/1 
* CE 2 is refined into CE [36,37] 


#### Refined cost equations eval_alloc_is_since_save_start/1 
* CE 36: eval_alloc_is_since_save_start(B) = 0+ eval_alloc_is_since_save_bb0_in(B):1
     [] 
* CE 37: eval_alloc_is_since_save_start(B) = 0+ eval_alloc_is_since_save_bb0_in(B):2
     [] 

### Cost equations --> "Loop" of eval_alloc_is_since_save_start/1 
* CEs [37] --> Loop 29 
* CEs [36] --> Loop 30 

#### Loops of eval_alloc_is_since_save_start/1 
* Loop 29: eval_alloc_is_since_save_start(B) [] 
* Loop 30: eval_alloc_is_since_save_start(B) [] 

### Ranking functions of CR eval_alloc_is_since_save_start(B) 

#### Partial ranking functions of CR eval_alloc_is_since_save_start(B) 


### Resulting Chains:eval_alloc_is_since_save_start(B) 
* [30]
* [29]...


### Merging Chains  eval_alloc_is_since_save_start/1 into  External patterns of execution 
* [[30]] --> 1 
* [[29]] --> 2 


Computing Bounds
=====================================

#### Cost of loops [14] 

 * loop 14:eval_alloc_is_since_save_bb2_in(B) -> [eval_alloc_is_since_save_bb2_in(B')] 
1
#### Cost of phase [14]:eval_alloc_is_since_save_bb2_in(B) -> [eval_alloc_is_since_save_bb2_in(B')] 
1*it(14)+0
#### Cost of phase [14]:eval_alloc_is_since_save_bb2_in(B) -> [eval_alloc_is_since_save_bb2_in(B')] 
1*it(14)+0
#### Cost of phase [14]:eval_alloc_is_since_save_bb2_in(B) -> [eval_alloc_is_since_save_bb2_in(B')] 
1*it(14)+0
#### Cost of phase [14]:eval_alloc_is_since_save_bb2_in(B) -> [eval_alloc_is_since_save_bb2_in(B')] 
1*it(14)+0
#### Cost of chains of eval_alloc_is_since_save_bb2_in(B):
* Chain [[14]]...: 1*it(14)+0
  with precondition: [B>=2,4>=B] 

* Chain [[14],17]: 1*it(14)+0
  with precondition: [B=2] 

* Chain [[14],16]: 1*it(14)+0
  with precondition: [B=3] 

* Chain [[14],15]: 1*it(14)+0
  with precondition: [B=4] 

* Chain [17]: 0
  with precondition: [B=2] 

* Chain [16]: 0
  with precondition: [B=3] 

* Chain [15]: 0
  with precondition: [B=4] 


#### Cost of loops [19] 

 * loop 19:eval_alloc_is_since_save_bb1_in(B) -> [eval_alloc_is_since_save_bb1_in(B')] 
1*s(5)+2
#### Cost of phase [19]:eval_alloc_is_since_save_bb1_in(B) -> [eval_alloc_is_since_save_bb1_in(B')] 
3*it(19)+0
#### Cost of phase [19]:eval_alloc_is_since_save_bb1_in(B) -> [eval_alloc_is_since_save_bb1_in(B')] 
3*it(19)+0
#### Cost of phase [19]:eval_alloc_is_since_save_bb1_in(B) -> [eval_alloc_is_since_save_bb1_in(B')] 
3*it(19)+0
#### Cost of phase [19]:eval_alloc_is_since_save_bb1_in(B) -> [eval_alloc_is_since_save_bb1_in(B')] 
3*it(19)+0
#### Cost of chains of eval_alloc_is_since_save_bb1_in(B):
* Chain [[19]]...: 3*it(19)+0
  with precondition: [] 

* Chain [[19],21]: 4*it(19)+1
  with precondition: [B=2] 

* Chain [[19],20]: 4*it(19)+1
  with precondition: [B=3] 

* Chain [[19],18]...: 4*aux(4)+0
  with precondition: [] 

* Chain [21]: 1*s(7)+1
  with precondition: [B=2] 

* Chain [20]: 1*s(8)+1
  with precondition: [B=3] 

* Chain [18]...: 1*aux(4)+0
  with precondition: [] 


#### Cost of loops [22] 

 * loop 22:eval_alloc_is_since_save_bb10_in(B) -> [eval_alloc_is_since_save_bb10_in(B')] 
1
#### Cost of phase [22]:eval_alloc_is_since_save_bb10_in(B) -> [eval_alloc_is_since_save_bb10_in(B')] 
1*it(22)+0
#### Cost of phase [22]:eval_alloc_is_since_save_bb10_in(B) -> [eval_alloc_is_since_save_bb10_in(B')] 
1*it(22)+0
#### Cost of chains of eval_alloc_is_since_save_bb10_in(B):
* Chain [[22]]...: 1*it(22)+0
  with precondition: [B=2] 

* Chain [[22],23]: 1*it(22)+0
  with precondition: [B=2] 

* Chain [23]: 0
  with precondition: [B=2] 


#### Cost of chains of loop_cont_eval_alloc_is_since_save_bb1_in(B,A):
* Chain [26]...: 1*s(20)+1
  with precondition: [B=3] 

* Chain [25]: 0
  with precondition: [B=2] 

* Chain [24]: 1*s(21)+1
  with precondition: [B=3] 


#### Cost of chains of eval_alloc_is_since_save_bb0_in(B):
* Chain [28]: 1*aux(9)+0
  with precondition: [] 

* Chain [27]...: 1*aux(10)+0
  with precondition: [] 


#### Cost of chains of eval_alloc_is_since_save_start(B):
* Chain [30]: 1*s(28)+0
  with precondition: [] 

* Chain [29]...: 1*s(29)+0
  with precondition: [] 


Closed-form bounds of eval_alloc_is_since_save_start(B): 
-------------------------------------
* Chain [30] with precondition: [] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [29]... with precondition: [] 
    - Upper bound: inf 
    - Complexity: infinity 

### Maximum cost of eval_alloc_is_since_save_start(B): inf 
Asymptotic class: infinity 

Time statistics: 
-------------------------------------
* Partial evaluation computed in 6 ms.
* Invariants computed in 10 ms.
   - Backward Invariants 7 ms.
   - Transitive Invariants 1 ms.
* Refinement performed in 18 ms.
* Termination proved in 2 ms.
* Upper bounds computed in 16 ms.
   - Equation cost structures 3 ms.
   - Phase cost structures 3 ms.
   - Chain cost structures 6 ms.
   - Solving cost expressions 1 ms.
* Total analysis performed in 65 ms.


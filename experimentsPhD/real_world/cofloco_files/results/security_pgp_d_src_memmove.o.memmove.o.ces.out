Warning: Ignored call to eval_memmove_stop/1 in equation eval_memmove_bb18_in/1 

Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. recursive  : [eval_memmove_bb13_in/4]
1. recursive  : [eval_memmove_bb15_in/2]
2. recursive  : [eval_memmove_bb17_in/2]
3. non_recursive  : [eval_memmove_bb18_in/1]
4. non_recursive  : [loop_cont_eval_memmove_bb17_in/2]
5. non_recursive  : [eval_memmove_bb16_in/1]
6. non_recursive  : [loop_cont_eval_memmove_bb15_in/2]
7. non_recursive  : [eval_memmove_bb14_in/2]
8. recursive  : [eval_memmove_bb6_in/4]
9. recursive  : [eval_memmove_bb8_in/2]
10. recursive  : [eval_memmove_bb10_in/2]
11. non_recursive  : [loop_cont_eval_memmove_bb10_in/2]
12. non_recursive  : [eval_memmove_bb9_in/1]
13. non_recursive  : [loop_cont_eval_memmove_bb8_in/2]
14. non_recursive  : [eval_memmove_bb7_in/2]
15. non_recursive  : [loop_cont_eval_memmove_bb6_in/3]
16. non_recursive  : [eval_memmove_bb5_in/3]
17. non_recursive  : [loop_cont_eval_memmove_bb13_in/3]
18. non_recursive  : [eval_memmove_bb0_in/2]
19. non_recursive  : [eval_memmove_start/2]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into eval_memmove_bb13_in/4
1. SCC is partially evaluated into eval_memmove_bb15_in/2
2. SCC is partially evaluated into eval_memmove_bb17_in/2
3. SCC is completely evaluated into other SCCs
4. SCC is completely evaluated into other SCCs
5. SCC is partially evaluated into eval_memmove_bb16_in/1
6. SCC is completely evaluated into other SCCs
7. SCC is partially evaluated into eval_memmove_bb14_in/2
8. SCC is partially evaluated into eval_memmove_bb6_in/4
9. SCC is partially evaluated into eval_memmove_bb8_in/2
10. SCC is partially evaluated into eval_memmove_bb10_in/2
11. SCC is completely evaluated into other SCCs
12. SCC is partially evaluated into eval_memmove_bb9_in/1
13. SCC is completely evaluated into other SCCs
14. SCC is partially evaluated into eval_memmove_bb7_in/2
15. SCC is completely evaluated into other SCCs
16. SCC is partially evaluated into eval_memmove_bb5_in/3
17. SCC is completely evaluated into other SCCs
18. SCC is partially evaluated into eval_memmove_bb0_in/2
19. SCC is partially evaluated into eval_memmove_start/2

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations eval_memmove_bb13_in/4 
* CE 17 is refined into CE [43] 
* CE 16 is refined into CE [44] 
* CE 15 is refined into CE [45] 


#### Refined cost equations eval_memmove_bb13_in/4 
* CE 43: eval_memmove_bb13_in(A,B,C,A) = 0
     [C=6,B=1] 
* CE 44: eval_memmove_bb13_in(V_58,V_t_5,B,C) = 1+ eval_memmove_bb13_in(V_58,D,E,C)
     [V_t_5>=2,V_t_5=D+1,E=6,B=6] 
* CE 45: eval_memmove_bb13_in(V_58,V_t_5,B,C) = 1+ eval_memmove_bb13_in(V_58,D,E,C)
     [0>=V_t_5,V_t_5=D+1,E=6,B=6] 

### Cost equations --> "Loop" of eval_memmove_bb13_in/4 
* CEs [44] --> Loop 30 
* CEs [45] --> Loop 31 
* CEs [43] --> Loop 32 

#### Loops of eval_memmove_bb13_in/4 
* Loop 30: eval_memmove_bb13_in(V_58,V_t_5,B,C)->  eval_memmove_bb13_in(V_58,V_t_5',B',C)
                  [V_t_5>=2,V_t_5=V_t_5'+1,B'=6,B=6] 
* Loop 31: eval_memmove_bb13_in(V_58,V_t_5,B,C)->  eval_memmove_bb13_in(V_58,V_t_5',B',C)
                  [0>=V_t_5,V_t_5=V_t_5'+1,B'=6,B=6] 
* Loop 32: eval_memmove_bb13_in(A,B,C,A) [C=6,B=1] 

### Ranking functions of CR eval_memmove_bb13_in(V_58,V_t_5,B,C) 
* RF of phase [30]: [V_t_5-1]

#### Partial ranking functions of CR eval_memmove_bb13_in(V_58,V_t_5,B,C) 
* Partial RF of phase [30]:
  - RF of loop [30:1]:
    V_t_5-1


### Resulting Chains:eval_memmove_bb13_in(V_58,V_t_5,B,C) 
* [[31]]...
* [[30],32]
* [32]


### Merging Chains  eval_memmove_bb13_in/4 into  External patterns of execution 
* [[32]] --> 1 
* [[32,[30]]] --> 2 
* [[[31]]] --> 3 


### Specialization of cost equations eval_memmove_bb15_in/2 
* CE 34 is refined into CE [46] 
* CE 33 is refined into CE [47] 
* CE 32 is refined into CE [48] 


#### Refined cost equations eval_memmove_bb15_in/2 
* CE 46: eval_memmove_bb15_in(V_t_6,B) = 0
     [B=5,V_t_6=1] 
* CE 47: eval_memmove_bb15_in(V_t_6,B) = 1+ eval_memmove_bb15_in(C,D)
     [V_t_6>=2,V_t_6=C+1,D=5,B=5] 
* CE 48: eval_memmove_bb15_in(V_t_6,B) = 1+ eval_memmove_bb15_in(C,D)
     [0>=V_t_6,V_t_6=C+1,D=5,B=5] 

### Cost equations --> "Loop" of eval_memmove_bb15_in/2 
* CEs [47] --> Loop 33 
* CEs [48] --> Loop 34 
* CEs [46] --> Loop 35 

#### Loops of eval_memmove_bb15_in/2 
* Loop 33: eval_memmove_bb15_in(V_t_6,B)->  eval_memmove_bb15_in(V_t_6',B')
                  [V_t_6>=2,V_t_6=V_t_6'+1,B'=5,B=5] 
* Loop 34: eval_memmove_bb15_in(V_t_6,B)->  eval_memmove_bb15_in(V_t_6',B')
                  [0>=V_t_6,V_t_6=V_t_6'+1,B'=5,B=5] 
* Loop 35: eval_memmove_bb15_in(V_t_6,B) [B=5,V_t_6=1] 

### Ranking functions of CR eval_memmove_bb15_in(V_t_6,B) 
* RF of phase [33]: [V_t_6-1]

#### Partial ranking functions of CR eval_memmove_bb15_in(V_t_6,B) 
* Partial RF of phase [33]:
  - RF of loop [33:1]:
    V_t_6-1


### Resulting Chains:eval_memmove_bb15_in(V_t_6,B) 
* [[34]]...
* [[33],35]
* [35]


### Merging Chains  eval_memmove_bb15_in/2 into  External patterns of execution 
* [[35]] --> 1 
* [[35,[33]]] --> 2 
* [[[34]]] --> 3 


### Specialization of cost equations eval_memmove_bb17_in/2 
* CE 42 is refined into CE [49] 
* CE 41 is refined into CE [50] 
* CE 40 is refined into CE [51] 


#### Refined cost equations eval_memmove_bb17_in/2 
* CE 49: eval_memmove_bb17_in(V_t_7,B) = 0
     [B=4,V_t_7=1] 
* CE 50: eval_memmove_bb17_in(V_t_7,B) = 1+ eval_memmove_bb17_in(C,D)
     [V_t_7>=2,V_t_7=C+1,D=4,B=4] 
* CE 51: eval_memmove_bb17_in(V_t_7,B) = 1+ eval_memmove_bb17_in(C,D)
     [0>=V_t_7,V_t_7=C+1,D=4,B=4] 

### Cost equations --> "Loop" of eval_memmove_bb17_in/2 
* CEs [50] --> Loop 36 
* CEs [51] --> Loop 37 
* CEs [49] --> Loop 38 

#### Loops of eval_memmove_bb17_in/2 
* Loop 36: eval_memmove_bb17_in(V_t_7,B)->  eval_memmove_bb17_in(V_t_7',B')
                  [V_t_7>=2,V_t_7=V_t_7'+1,B'=4,B=4] 
* Loop 37: eval_memmove_bb17_in(V_t_7,B)->  eval_memmove_bb17_in(V_t_7',B')
                  [0>=V_t_7,V_t_7=V_t_7'+1,B'=4,B=4] 
* Loop 38: eval_memmove_bb17_in(V_t_7,B) [B=4,V_t_7=1] 

### Ranking functions of CR eval_memmove_bb17_in(V_t_7,B) 
* RF of phase [36]: [V_t_7-1]

#### Partial ranking functions of CR eval_memmove_bb17_in(V_t_7,B) 
* Partial RF of phase [36]:
  - RF of loop [36:1]:
    V_t_7-1


### Resulting Chains:eval_memmove_bb17_in(V_t_7,B) 
* [[37]]...
* [[36],38]
* [38]


### Merging Chains  eval_memmove_bb17_in/2 into  External patterns of execution 
* [[38]] --> 1 
* [[38,[36]]] --> 2 
* [[[37]]] --> 3 


### Specialization of cost equations eval_memmove_bb16_in/1 
* CE 35 is refined into CE [52,53,54] 
* CE 36 is refined into CE [55] 


#### Refined cost equations eval_memmove_bb16_in/1 
* CE 52: eval_memmove_bb16_in(B) = 1+ eval_memmove_bb17_in(C,D):1
     [D=4,C=1] 
* CE 53: eval_memmove_bb16_in(B) = 1+ eval_memmove_bb17_in(C,D):2
     [C>=2,D=4] 
* CE 54: eval_memmove_bb16_in(B) = 1+ eval_memmove_bb17_in(C,D):3
     [0>=C,D=4] 
* CE 55: eval_memmove_bb16_in(B) = 0
     [] 

### Cost equations --> "Loop" of eval_memmove_bb16_in/1 
* CEs [52,53,55] --> Loop 39 
* CEs [54] --> Loop 40 

#### Loops of eval_memmove_bb16_in/1 
* Loop 39: eval_memmove_bb16_in(B) [] 
* Loop 40: eval_memmove_bb16_in(B) [] 

### Ranking functions of CR eval_memmove_bb16_in(B) 

#### Partial ranking functions of CR eval_memmove_bb16_in(B) 


### Resulting Chains:eval_memmove_bb16_in(B) 
* [40]...
* [39]


### Merging Chains  eval_memmove_bb16_in/1 into  External patterns of execution 
* [[39]] --> 1 
* [[40]] --> 2 


### Specialization of cost equations eval_memmove_bb14_in/2 
* CE 19 is refined into CE [56,57,58,59,60] 
* CE 22 is refined into CE [61,62] 
* CE 20 is refined into CE [63] 
* CE 23 is refined into CE [64,65] 
* CE 18 is refined into CE [66] 
* CE 21 is refined into CE [67,68] 


#### Refined cost equations eval_memmove_bb14_in/2 
* CE 56: eval_memmove_bb14_in(V__1,B) = 1+ eval_memmove_bb15_in(C,D):1+ eval_memmove_bb16_in(B):1
     [V__1>=4,7>=V__1,D=5,C=1] 
* CE 57: eval_memmove_bb14_in(V__1,B) = 1+ eval_memmove_bb15_in(C,D):1+ eval_memmove_bb16_in(B):2
     [V__1>=4,7>=V__1,D=5,C=1] 
* CE 58: eval_memmove_bb14_in(V__1,B) = 1+ eval_memmove_bb15_in(C,D):2+ eval_memmove_bb16_in(B):1
     [4*C+3>=V__1,V__1>=4*C,C>=2,D=5] 
* CE 59: eval_memmove_bb14_in(V__1,B) = 1+ eval_memmove_bb15_in(C,D):2+ eval_memmove_bb16_in(B):2
     [4*C+3>=V__1,V__1>=4*C,C>=2,D=5] 
* CE 60: eval_memmove_bb14_in(V__1,B) = 1+ eval_memmove_bb15_in(C,D):3
     [V__1>=1,3>=V__1,D=5,C=0] 
* CE 61: eval_memmove_bb14_in(V__1,B) = 0+ eval_memmove_bb16_in(B):1
     [V__1>=1] 
* CE 62: eval_memmove_bb14_in(V__1,B) = 0+ eval_memmove_bb16_in(B):2
     [V__1>=1] 
* CE 63: eval_memmove_bb14_in(V__1,B) = 1+ eval_memmove_bb15_in(C,D):3
     [4*C>=V__1,V__1+3>=4*C,0>=C,0>=V__1+1,D=5] 
* CE 64: eval_memmove_bb14_in(V__1,B) = 0+ eval_memmove_bb16_in(B):1
     [0>=V__1+1] 
* CE 65: eval_memmove_bb14_in(V__1,B) = 0+ eval_memmove_bb16_in(B):2
     [0>=V__1+1] 
* CE 66: eval_memmove_bb14_in(V__1,B) = 1+ eval_memmove_bb15_in(C,D):3
     [D=5,C=0,V__1=0] 
* CE 67: eval_memmove_bb14_in(V__1,B) = 0+ eval_memmove_bb16_in(B):1
     [V__1=0] 
* CE 68: eval_memmove_bb14_in(V__1,B) = 0+ eval_memmove_bb16_in(B):2
     [V__1=0] 

### Cost equations --> "Loop" of eval_memmove_bb14_in/2 
* CEs [63,65] --> Loop 41 
* CEs [60] --> Loop 42 
* CEs [57,59,62] --> Loop 43 
* CEs [66,68] --> Loop 44 
* CEs [64] --> Loop 45 
* CEs [56,58,61] --> Loop 46 
* CEs [67] --> Loop 47 

#### Loops of eval_memmove_bb14_in/2 
* Loop 41: eval_memmove_bb14_in(V__1,B) [0>=V__1+1] 
* Loop 42: eval_memmove_bb14_in(V__1,B) [V__1>=1,3>=V__1] 
* Loop 43: eval_memmove_bb14_in(V__1,B) [V__1>=1] 
* Loop 44: eval_memmove_bb14_in(V__1,B) [V__1=0] 
* Loop 45: eval_memmove_bb14_in(V__1,B) [0>=V__1+1] 
* Loop 46: eval_memmove_bb14_in(V__1,B) [V__1>=1] 
* Loop 47: eval_memmove_bb14_in(V__1,B) [V__1=0] 

### Ranking functions of CR eval_memmove_bb14_in(V__1,B) 

#### Partial ranking functions of CR eval_memmove_bb14_in(V__1,B) 


### Resulting Chains:eval_memmove_bb14_in(V__1,B) 
* [47]
* [46]
* [45]
* [44]...
* [43]...
* [42]...
* [41]...


### Merging Chains  eval_memmove_bb14_in/2 into  External patterns of execution 
* [[47]] --> 1 
* [[45]] --> 2 
* [[46]] --> 3 
* [[44]] --> 4 
* [[42]] --> 5 
* [[41]] --> 6 
* [[43]] --> 7 


### Specialization of cost equations eval_memmove_bb6_in/4 
* CE 26 is refined into CE [69] 
* CE 25 is refined into CE [70] 
* CE 24 is refined into CE [71] 


#### Refined cost equations eval_memmove_bb6_in/4 
* CE 69: eval_memmove_bb6_in(A,B,C,A) = 0
     [C=3,B=1] 
* CE 70: eval_memmove_bb6_in(V_20,V_t_1,B,C) = 1+ eval_memmove_bb6_in(V_20,D,E,C)
     [V_t_1>=2,V_t_1=D+1,E=3,B=3] 
* CE 71: eval_memmove_bb6_in(V_20,V_t_1,B,C) = 1+ eval_memmove_bb6_in(V_20,D,E,C)
     [0>=V_t_1,V_t_1=D+1,E=3,B=3] 

### Cost equations --> "Loop" of eval_memmove_bb6_in/4 
* CEs [70] --> Loop 48 
* CEs [71] --> Loop 49 
* CEs [69] --> Loop 50 

#### Loops of eval_memmove_bb6_in/4 
* Loop 48: eval_memmove_bb6_in(V_20,V_t_1,B,C)->  eval_memmove_bb6_in(V_20,V_t_1',B',C)
                  [V_t_1>=2,V_t_1=V_t_1'+1,B'=3,B=3] 
* Loop 49: eval_memmove_bb6_in(V_20,V_t_1,B,C)->  eval_memmove_bb6_in(V_20,V_t_1',B',C)
                  [0>=V_t_1,V_t_1=V_t_1'+1,B'=3,B=3] 
* Loop 50: eval_memmove_bb6_in(A,B,C,A) [C=3,B=1] 

### Ranking functions of CR eval_memmove_bb6_in(V_20,V_t_1,B,C) 
* RF of phase [48]: [V_t_1-1]

#### Partial ranking functions of CR eval_memmove_bb6_in(V_20,V_t_1,B,C) 
* Partial RF of phase [48]:
  - RF of loop [48:1]:
    V_t_1-1


### Resulting Chains:eval_memmove_bb6_in(V_20,V_t_1,B,C) 
* [[49]]...
* [[48],50]
* [50]


### Merging Chains  eval_memmove_bb6_in/4 into  External patterns of execution 
* [[50]] --> 1 
* [[50,[48]]] --> 2 
* [[[49]]] --> 3 


### Specialization of cost equations eval_memmove_bb8_in/2 
* CE 29 is refined into CE [72] 
* CE 28 is refined into CE [73] 
* CE 27 is refined into CE [74] 


#### Refined cost equations eval_memmove_bb8_in/2 
* CE 72: eval_memmove_bb8_in(V_t_2,B) = 0
     [B=2,V_t_2=1] 
* CE 73: eval_memmove_bb8_in(V_t_2,B) = 1+ eval_memmove_bb8_in(C,D)
     [V_t_2>=2,V_t_2=C+1,D=2,B=2] 
* CE 74: eval_memmove_bb8_in(V_t_2,B) = 1+ eval_memmove_bb8_in(C,D)
     [0>=V_t_2,V_t_2=C+1,D=2,B=2] 

### Cost equations --> "Loop" of eval_memmove_bb8_in/2 
* CEs [73] --> Loop 51 
* CEs [74] --> Loop 52 
* CEs [72] --> Loop 53 

#### Loops of eval_memmove_bb8_in/2 
* Loop 51: eval_memmove_bb8_in(V_t_2,B)->  eval_memmove_bb8_in(V_t_2',B')
                  [V_t_2>=2,V_t_2=V_t_2'+1,B'=2,B=2] 
* Loop 52: eval_memmove_bb8_in(V_t_2,B)->  eval_memmove_bb8_in(V_t_2',B')
                  [0>=V_t_2,V_t_2=V_t_2'+1,B'=2,B=2] 
* Loop 53: eval_memmove_bb8_in(V_t_2,B) [B=2,V_t_2=1] 

### Ranking functions of CR eval_memmove_bb8_in(V_t_2,B) 
* RF of phase [51]: [V_t_2-1]

#### Partial ranking functions of CR eval_memmove_bb8_in(V_t_2,B) 
* Partial RF of phase [51]:
  - RF of loop [51:1]:
    V_t_2-1


### Resulting Chains:eval_memmove_bb8_in(V_t_2,B) 
* [[52]]...
* [[51],53]
* [53]


### Merging Chains  eval_memmove_bb8_in/2 into  External patterns of execution 
* [[53]] --> 1 
* [[53,[51]]] --> 2 
* [[[52]]] --> 3 


### Specialization of cost equations eval_memmove_bb10_in/2 
* CE 39 is refined into CE [75] 
* CE 38 is refined into CE [76] 
* CE 37 is refined into CE [77] 


#### Refined cost equations eval_memmove_bb10_in/2 
* CE 75: eval_memmove_bb10_in(V_t_3,B) = 0
     [B=4,V_t_3=1] 
* CE 76: eval_memmove_bb10_in(V_t_3,B) = 1+ eval_memmove_bb10_in(C,D)
     [V_t_3>=2,V_t_3=C+1,D=4,B=4] 
* CE 77: eval_memmove_bb10_in(V_t_3,B) = 1+ eval_memmove_bb10_in(C,D)
     [0>=V_t_3,V_t_3=C+1,D=4,B=4] 

### Cost equations --> "Loop" of eval_memmove_bb10_in/2 
* CEs [76] --> Loop 54 
* CEs [77] --> Loop 55 
* CEs [75] --> Loop 56 

#### Loops of eval_memmove_bb10_in/2 
* Loop 54: eval_memmove_bb10_in(V_t_3,B)->  eval_memmove_bb10_in(V_t_3',B')
                  [V_t_3>=2,V_t_3=V_t_3'+1,B'=4,B=4] 
* Loop 55: eval_memmove_bb10_in(V_t_3,B)->  eval_memmove_bb10_in(V_t_3',B')
                  [0>=V_t_3,V_t_3=V_t_3'+1,B'=4,B=4] 
* Loop 56: eval_memmove_bb10_in(V_t_3,B) [B=4,V_t_3=1] 

### Ranking functions of CR eval_memmove_bb10_in(V_t_3,B) 
* RF of phase [54]: [V_t_3-1]

#### Partial ranking functions of CR eval_memmove_bb10_in(V_t_3,B) 
* Partial RF of phase [54]:
  - RF of loop [54:1]:
    V_t_3-1


### Resulting Chains:eval_memmove_bb10_in(V_t_3,B) 
* [[55]]...
* [[54],56]
* [56]


### Merging Chains  eval_memmove_bb10_in/2 into  External patterns of execution 
* [[56]] --> 1 
* [[56,[54]]] --> 2 
* [[[55]]] --> 3 


### Specialization of cost equations eval_memmove_bb9_in/1 
* CE 30 is refined into CE [78,79,80] 
* CE 31 is refined into CE [81] 


#### Refined cost equations eval_memmove_bb9_in/1 
* CE 78: eval_memmove_bb9_in(B) = 1+ eval_memmove_bb10_in(C,D):1
     [D=4,C=1] 
* CE 79: eval_memmove_bb9_in(B) = 1+ eval_memmove_bb10_in(C,D):2
     [C>=2,D=4] 
* CE 80: eval_memmove_bb9_in(B) = 1+ eval_memmove_bb10_in(C,D):3
     [0>=C,D=4] 
* CE 81: eval_memmove_bb9_in(B) = 0
     [] 

### Cost equations --> "Loop" of eval_memmove_bb9_in/1 
* CEs [78,79,81] --> Loop 57 
* CEs [80] --> Loop 58 

#### Loops of eval_memmove_bb9_in/1 
* Loop 57: eval_memmove_bb9_in(B) [] 
* Loop 58: eval_memmove_bb9_in(B) [] 

### Ranking functions of CR eval_memmove_bb9_in(B) 

#### Partial ranking functions of CR eval_memmove_bb9_in(B) 


### Resulting Chains:eval_memmove_bb9_in(B) 
* [58]...
* [57]


### Merging Chains  eval_memmove_bb9_in/1 into  External patterns of execution 
* [[57]] --> 1 
* [[58]] --> 2 


### Specialization of cost equations eval_memmove_bb7_in/2 
* CE 10 is refined into CE [82,83,84,85,86] 
* CE 13 is refined into CE [87,88] 
* CE 11 is refined into CE [89] 
* CE 14 is refined into CE [90,91] 
* CE 9 is refined into CE [92] 
* CE 12 is refined into CE [93,94] 


#### Refined cost equations eval_memmove_bb7_in/2 
* CE 82: eval_memmove_bb7_in(V__0,B) = 1+ eval_memmove_bb8_in(C,D):1+ eval_memmove_bb9_in(B):1
     [V__0>=4,7>=V__0,D=2,C=1] 
* CE 83: eval_memmove_bb7_in(V__0,B) = 1+ eval_memmove_bb8_in(C,D):1+ eval_memmove_bb9_in(B):2
     [V__0>=4,7>=V__0,D=2,C=1] 
* CE 84: eval_memmove_bb7_in(V__0,B) = 1+ eval_memmove_bb8_in(C,D):2+ eval_memmove_bb9_in(B):1
     [4*C+3>=V__0,V__0>=4*C,C>=2,D=2] 
* CE 85: eval_memmove_bb7_in(V__0,B) = 1+ eval_memmove_bb8_in(C,D):2+ eval_memmove_bb9_in(B):2
     [4*C+3>=V__0,V__0>=4*C,C>=2,D=2] 
* CE 86: eval_memmove_bb7_in(V__0,B) = 1+ eval_memmove_bb8_in(C,D):3
     [V__0>=1,3>=V__0,D=2,C=0] 
* CE 87: eval_memmove_bb7_in(V__0,B) = 0+ eval_memmove_bb9_in(B):1
     [V__0>=1] 
* CE 88: eval_memmove_bb7_in(V__0,B) = 0+ eval_memmove_bb9_in(B):2
     [V__0>=1] 
* CE 89: eval_memmove_bb7_in(V__0,B) = 1+ eval_memmove_bb8_in(C,D):3
     [4*C>=V__0,V__0+3>=4*C,0>=C,0>=V__0+1,D=2] 
* CE 90: eval_memmove_bb7_in(V__0,B) = 0+ eval_memmove_bb9_in(B):1
     [0>=V__0+1] 
* CE 91: eval_memmove_bb7_in(V__0,B) = 0+ eval_memmove_bb9_in(B):2
     [0>=V__0+1] 
* CE 92: eval_memmove_bb7_in(V__0,B) = 1+ eval_memmove_bb8_in(C,D):3
     [D=2,C=0,V__0=0] 
* CE 93: eval_memmove_bb7_in(V__0,B) = 0+ eval_memmove_bb9_in(B):1
     [V__0=0] 
* CE 94: eval_memmove_bb7_in(V__0,B) = 0+ eval_memmove_bb9_in(B):2
     [V__0=0] 

### Cost equations --> "Loop" of eval_memmove_bb7_in/2 
* CEs [89,91] --> Loop 59 
* CEs [86] --> Loop 60 
* CEs [83,85,88] --> Loop 61 
* CEs [92,94] --> Loop 62 
* CEs [90] --> Loop 63 
* CEs [82,84,87] --> Loop 64 
* CEs [93] --> Loop 65 

#### Loops of eval_memmove_bb7_in/2 
* Loop 59: eval_memmove_bb7_in(V__0,B) [0>=V__0+1] 
* Loop 60: eval_memmove_bb7_in(V__0,B) [V__0>=1,3>=V__0] 
* Loop 61: eval_memmove_bb7_in(V__0,B) [V__0>=1] 
* Loop 62: eval_memmove_bb7_in(V__0,B) [V__0=0] 
* Loop 63: eval_memmove_bb7_in(V__0,B) [0>=V__0+1] 
* Loop 64: eval_memmove_bb7_in(V__0,B) [V__0>=1] 
* Loop 65: eval_memmove_bb7_in(V__0,B) [V__0=0] 

### Ranking functions of CR eval_memmove_bb7_in(V__0,B) 

#### Partial ranking functions of CR eval_memmove_bb7_in(V__0,B) 


### Resulting Chains:eval_memmove_bb7_in(V__0,B) 
* [65]
* [64]
* [63]
* [62]...
* [61]...
* [60]...
* [59]...


### Merging Chains  eval_memmove_bb7_in/2 into  External patterns of execution 
* [[65]] --> 1 
* [[63]] --> 2 
* [[64]] --> 3 
* [[62]] --> 4 
* [[60]] --> 5 
* [[59]] --> 6 
* [[61]] --> 7 


### Specialization of cost equations eval_memmove_bb5_in/3 
* CE 8 is refined into CE [95,96,97,98,99,100,101,102,103,104,105,106,107,108,109] 


#### Refined cost equations eval_memmove_bb5_in/3 
* CE 95: eval_memmove_bb5_in(V_length,V_t_0,B) = 1+ eval_memmove_bb6_in(C,D,E,F):1+ eval_memmove_bb7_in(G,B):1
     [G=0,F=0,E=3,D=1,C=0,V_t_0=1,V_length=1] 
* CE 96: eval_memmove_bb5_in(V_length,V_t_0,B) = 1+ eval_memmove_bb6_in(C,D,E,C):1+ eval_memmove_bb7_in(C,B):2
     [0>=C+1,C+1=V_length,E=3,D=1,V_t_0=1] 
* CE 97: eval_memmove_bb5_in(V_length,V_t_0,B) = 1+ eval_memmove_bb6_in(C,D,E,C):1+ eval_memmove_bb7_in(C,B):3
     [C>=1,C+1=V_length,E=3,D=1,V_t_0=1] 
* CE 98: eval_memmove_bb5_in(V_length,V_t_0,B) = 1+ eval_memmove_bb6_in(C,D,E,F):1+ eval_memmove_bb7_in(G,B):4
     [G=0,F=0,E=3,D=1,C=0,V_t_0=1,V_length=1] 
* CE 99: eval_memmove_bb5_in(V_length,V_t_0,B) = 1+ eval_memmove_bb6_in(C,D,E,C):1+ eval_memmove_bb7_in(C,B):5
     [C>=1,3>=C,C+1=V_length,E=3,D=1,V_t_0=1] 
* CE 100: eval_memmove_bb5_in(V_length,V_t_0,B) = 1+ eval_memmove_bb6_in(C,D,E,C):1+ eval_memmove_bb7_in(C,B):6
     [0>=C+1,C+1=V_length,E=3,D=1,V_t_0=1] 
* CE 101: eval_memmove_bb5_in(V_length,V_t_0,B) = 1+ eval_memmove_bb6_in(C,D,E,C):1+ eval_memmove_bb7_in(C,B):7
     [C>=1,C+1=V_length,E=3,D=1,V_t_0=1] 
* CE 102: eval_memmove_bb5_in(A,A,B) = 1+ eval_memmove_bb6_in(C,A,D,E):2+ eval_memmove_bb7_in(F,B):1
     [A>=2,F=0,E=0,D=3,C=0] 
* CE 103: eval_memmove_bb5_in(V_length,V_t_0,B) = 1+ eval_memmove_bb6_in(C,V_t_0,D,C):2+ eval_memmove_bb7_in(C,B):2
     [V_t_0>=2,0>=C+1,V_t_0+C=V_length,D=3] 
* CE 104: eval_memmove_bb5_in(V_length,V_t_0,B) = 1+ eval_memmove_bb6_in(C,V_t_0,D,C):2+ eval_memmove_bb7_in(C,B):3
     [C>=1,V_t_0>=2,V_t_0+C=V_length,D=3] 
* CE 105: eval_memmove_bb5_in(A,A,B) = 1+ eval_memmove_bb6_in(C,A,D,E):2+ eval_memmove_bb7_in(F,B):4
     [A>=2,F=0,E=0,D=3,C=0] 
* CE 106: eval_memmove_bb5_in(V_length,V_t_0,B) = 1+ eval_memmove_bb6_in(C,V_t_0,D,C):2+ eval_memmove_bb7_in(C,B):5
     [C>=1,V_t_0>=2,3>=C,V_t_0+C=V_length,D=3] 
* CE 107: eval_memmove_bb5_in(V_length,V_t_0,B) = 1+ eval_memmove_bb6_in(C,V_t_0,D,C):2+ eval_memmove_bb7_in(C,B):6
     [V_t_0>=2,0>=C+1,V_t_0+C=V_length,D=3] 
* CE 108: eval_memmove_bb5_in(V_length,V_t_0,B) = 1+ eval_memmove_bb6_in(C,V_t_0,D,C):2+ eval_memmove_bb7_in(C,B):7
     [C>=1,V_t_0>=2,V_t_0+C=V_length,D=3] 
* CE 109: eval_memmove_bb5_in(V_length,V_t_0,B) = 1+ eval_memmove_bb6_in(C,V_t_0,D,E):3
     [0>=V_t_0,V_t_0+C=V_length,D=3] 

### Cost equations --> "Loop" of eval_memmove_bb5_in/3 
* CEs [107] --> Loop 66 
* CEs [106,108] --> Loop 67 
* CEs [109] --> Loop 68 
* CEs [105] --> Loop 69 
* CEs [100] --> Loop 70 
* CEs [99,101] --> Loop 71 
* CEs [98] --> Loop 72 
* CEs [104] --> Loop 73 
* CEs [103] --> Loop 74 
* CEs [102] --> Loop 75 
* CEs [97] --> Loop 76 
* CEs [96] --> Loop 77 
* CEs [95] --> Loop 78 

#### Loops of eval_memmove_bb5_in/3 
* Loop 66: eval_memmove_bb5_in(V_length,V_t_0,B) [V_t_0>=V_length+1,V_t_0>=2] 
* Loop 67: eval_memmove_bb5_in(V_length,V_t_0,B) [V_length>=V_t_0+1,V_t_0>=2] 
* Loop 68: eval_memmove_bb5_in(V_length,V_t_0,B) [0>=V_t_0] 
* Loop 69: eval_memmove_bb5_in(A,A,B) [A>=2] 
* Loop 70: eval_memmove_bb5_in(V_length,V_t_0,B) [0>=V_length,V_t_0=1] 
* Loop 71: eval_memmove_bb5_in(V_length,V_t_0,B) [V_length>=2,V_t_0=1] 
* Loop 72: eval_memmove_bb5_in(V_length,V_t_0,B) [V_t_0=1,V_length=1] 
* Loop 73: eval_memmove_bb5_in(V_length,V_t_0,B) [V_length>=V_t_0+1,V_t_0>=2] 
* Loop 74: eval_memmove_bb5_in(V_length,V_t_0,B) [V_t_0>=V_length+1,V_t_0>=2] 
* Loop 75: eval_memmove_bb5_in(A,A,B) [A>=2] 
* Loop 76: eval_memmove_bb5_in(V_length,V_t_0,B) [V_length>=2,V_t_0=1] 
* Loop 77: eval_memmove_bb5_in(V_length,V_t_0,B) [0>=V_length,V_t_0=1] 
* Loop 78: eval_memmove_bb5_in(V_length,V_t_0,B) [V_t_0=1,V_length=1] 

### Ranking functions of CR eval_memmove_bb5_in(V_length,V_t_0,B) 

#### Partial ranking functions of CR eval_memmove_bb5_in(V_length,V_t_0,B) 


### Resulting Chains:eval_memmove_bb5_in(V_length,V_t_0,B) 
* [78]
* [77]
* [76]
* [75]
* [74]
* [73]
* [72]...
* [71]...
* [70]...
* [69]...
* [68]...
* [67]...
* [66]...


### Merging Chains  eval_memmove_bb5_in/3 into  External patterns of execution 
* [[78]] --> 1 
* [[77]] --> 2 
* [[76]] --> 3 
* [[75]] --> 4 
* [[74]] --> 5 
* [[73]] --> 6 
* [[72]] --> 7 
* [[70]] --> 8 
* [[71]] --> 9 
* [[69]] --> 10 
* [[68]] --> 11 
* [[66]] --> 12 
* [[67]] --> 13 


### Specialization of cost equations eval_memmove_bb0_in/2 
* CE 3 is refined into CE [110] 
* CE 4 is refined into CE [111,112,113,114,115,116,117,118,119,120,121,122,123] 
* CE 5 is refined into CE [124,125,126,127,128,129,130] 
* CE 6 is refined into CE [131,132,133,134,135,136,137,138,139,140,141,142,143,144,145] 
* CE 7 is refined into CE [146,147,148,149,150,151,152] 


#### Refined cost equations eval_memmove_bb0_in/2 
* CE 110: eval_memmove_bb0_in(V_length,B) = 0
     [] 
* CE 111: eval_memmove_bb0_in(V_length,B) = 0+ eval_memmove_bb5_in(C,D,B):1
     [D=1,C=1,V_length=1] 
* CE 112: eval_memmove_bb0_in(V_length,B) = 0+ eval_memmove_bb5_in(V_length,C,B):2
     [0>=V_length,C=1] 
* CE 113: eval_memmove_bb0_in(V_length,B) = 0+ eval_memmove_bb5_in(V_length,C,B):3
     [V_length>=2,C=1] 
* CE 114: eval_memmove_bb0_in(V_length,B) = 0+ eval_memmove_bb5_in(V_length,V_length,B):4
     [V_length>=2] 
* CE 115: eval_memmove_bb0_in(V_length,B) = 0+ eval_memmove_bb5_in(V_length,C,B):5
     [C>=V_length+1,C>=2] 
* CE 116: eval_memmove_bb0_in(V_length,B) = 0+ eval_memmove_bb5_in(V_length,C,B):6
     [V_length>=C+1,C>=2] 
* CE 117: eval_memmove_bb0_in(V_length,B) = 0+ eval_memmove_bb5_in(C,D,B):7
     [D=1,C=1,V_length=1] 
* CE 118: eval_memmove_bb0_in(V_length,B) = 0+ eval_memmove_bb5_in(V_length,C,B):8
     [0>=V_length,C=1] 
* CE 119: eval_memmove_bb0_in(V_length,B) = 0+ eval_memmove_bb5_in(V_length,C,B):9
     [V_length>=2,C=1] 
* CE 120: eval_memmove_bb0_in(V_length,B) = 0+ eval_memmove_bb5_in(V_length,V_length,B):10
     [V_length>=2] 
* CE 121: eval_memmove_bb0_in(V_length,B) = 0+ eval_memmove_bb5_in(V_length,C,B):11
     [0>=C] 
* CE 122: eval_memmove_bb0_in(V_length,B) = 0+ eval_memmove_bb5_in(V_length,C,B):12
     [C>=V_length+1,C>=2] 
* CE 123: eval_memmove_bb0_in(V_length,B) = 0+ eval_memmove_bb5_in(V_length,C,B):13
     [V_length>=C+1,C>=2] 
* CE 124: eval_memmove_bb0_in(V_length,B) = 0+ eval_memmove_bb7_in(C,B):1
     [C=0,V_length=0] 
* CE 125: eval_memmove_bb0_in(V_length,B) = 0+ eval_memmove_bb7_in(V_length,B):2
     [0>=V_length+1] 
* CE 126: eval_memmove_bb0_in(V_length,B) = 0+ eval_memmove_bb7_in(V_length,B):3
     [V_length>=1] 
* CE 127: eval_memmove_bb0_in(V_length,B) = 0+ eval_memmove_bb7_in(C,B):4
     [C=0,V_length=0] 
* CE 128: eval_memmove_bb0_in(V_length,B) = 0+ eval_memmove_bb7_in(V_length,B):5
     [V_length>=1,3>=V_length] 
* CE 129: eval_memmove_bb0_in(V_length,B) = 0+ eval_memmove_bb7_in(V_length,B):6
     [0>=V_length+1] 
* CE 130: eval_memmove_bb0_in(V_length,B) = 0+ eval_memmove_bb7_in(V_length,B):7
     [V_length>=1] 
* CE 131: eval_memmove_bb0_in(V_length,B) = 1+ eval_memmove_bb13_in(C,D,E,F):1+ eval_memmove_bb14_in(G,B):1
     [G=0,F=0,E=6,D=1,C=0,V_length=1] 
* CE 132: eval_memmove_bb0_in(V_length,B) = 1+ eval_memmove_bb13_in(C,D,E,C):1+ eval_memmove_bb14_in(C,B):2
     [0>=C+1,C+1=V_length,E=6,D=1] 
* CE 133: eval_memmove_bb0_in(V_length,B) = 1+ eval_memmove_bb13_in(C,D,E,C):1+ eval_memmove_bb14_in(C,B):3
     [C>=1,C+1=V_length,E=6,D=1] 
* CE 134: eval_memmove_bb0_in(V_length,B) = 1+ eval_memmove_bb13_in(C,D,E,F):1+ eval_memmove_bb14_in(G,B):4
     [G=0,F=0,E=6,D=1,C=0,V_length=1] 
* CE 135: eval_memmove_bb0_in(V_length,B) = 1+ eval_memmove_bb13_in(C,D,E,C):1+ eval_memmove_bb14_in(C,B):5
     [C>=1,3>=C,C+1=V_length,E=6,D=1] 
* CE 136: eval_memmove_bb0_in(V_length,B) = 1+ eval_memmove_bb13_in(C,D,E,C):1+ eval_memmove_bb14_in(C,B):6
     [0>=C+1,C+1=V_length,E=6,D=1] 
* CE 137: eval_memmove_bb0_in(V_length,B) = 1+ eval_memmove_bb13_in(C,D,E,C):1+ eval_memmove_bb14_in(C,B):7
     [C>=1,C+1=V_length,E=6,D=1] 
* CE 138: eval_memmove_bb0_in(V_length,B) = 1+ eval_memmove_bb13_in(C,V_length,D,E):2+ eval_memmove_bb14_in(F,B):1
     [V_length>=2,F=0,E=0,D=6,C=0] 
* CE 139: eval_memmove_bb0_in(V_length,B) = 1+ eval_memmove_bb13_in(C,D,E,C):2+ eval_memmove_bb14_in(C,B):2
     [D>=2,0>=C+1,C+D=V_length,E=6] 
* CE 140: eval_memmove_bb0_in(V_length,B) = 1+ eval_memmove_bb13_in(C,D,E,C):2+ eval_memmove_bb14_in(C,B):3
     [C>=1,D>=2,C+D=V_length,E=6] 
* CE 141: eval_memmove_bb0_in(V_length,B) = 1+ eval_memmove_bb13_in(C,V_length,D,E):2+ eval_memmove_bb14_in(F,B):4
     [V_length>=2,F=0,E=0,D=6,C=0] 
* CE 142: eval_memmove_bb0_in(V_length,B) = 1+ eval_memmove_bb13_in(C,D,E,C):2+ eval_memmove_bb14_in(C,B):5
     [C>=1,D>=2,3>=C,C+D=V_length,E=6] 
* CE 143: eval_memmove_bb0_in(V_length,B) = 1+ eval_memmove_bb13_in(C,D,E,C):2+ eval_memmove_bb14_in(C,B):6
     [D>=2,0>=C+1,C+D=V_length,E=6] 
* CE 144: eval_memmove_bb0_in(V_length,B) = 1+ eval_memmove_bb13_in(C,D,E,C):2+ eval_memmove_bb14_in(C,B):7
     [C>=1,D>=2,C+D=V_length,E=6] 
* CE 145: eval_memmove_bb0_in(V_length,B) = 1+ eval_memmove_bb13_in(C,D,E,F):3
     [0>=D,C+D=V_length,E=6] 
* CE 146: eval_memmove_bb0_in(V_length,B) = 0+ eval_memmove_bb14_in(C,B):1
     [C=0,V_length=0] 
* CE 147: eval_memmove_bb0_in(V_length,B) = 0+ eval_memmove_bb14_in(V_length,B):2
     [0>=V_length+1] 
* CE 148: eval_memmove_bb0_in(V_length,B) = 0+ eval_memmove_bb14_in(V_length,B):3
     [V_length>=1] 
* CE 149: eval_memmove_bb0_in(V_length,B) = 0+ eval_memmove_bb14_in(C,B):4
     [C=0,V_length=0] 
* CE 150: eval_memmove_bb0_in(V_length,B) = 0+ eval_memmove_bb14_in(V_length,B):5
     [V_length>=1,3>=V_length] 
* CE 151: eval_memmove_bb0_in(V_length,B) = 0+ eval_memmove_bb14_in(V_length,B):6
     [0>=V_length+1] 
* CE 152: eval_memmove_bb0_in(V_length,B) = 0+ eval_memmove_bb14_in(V_length,B):7
     [V_length>=1] 

### Cost equations --> "Loop" of eval_memmove_bb0_in/2 
* CEs [117,118,119,120,121,122,123,127,128,129,130,134,135,136,137,141,142,143,144,145,149,150,151,152] --> Loop 79 
* CEs [110,111,112,113,114,115,116,124,125,126,131,132,133,138,139,140,146,147,148] --> Loop 80 

#### Loops of eval_memmove_bb0_in/2 
* Loop 79: eval_memmove_bb0_in(V_length,B) [] 
* Loop 80: eval_memmove_bb0_in(V_length,B) [] 

### Ranking functions of CR eval_memmove_bb0_in(V_length,B) 

#### Partial ranking functions of CR eval_memmove_bb0_in(V_length,B) 


### Resulting Chains:eval_memmove_bb0_in(V_length,B) 
* [80]
* [79]...


### Merging Chains  eval_memmove_bb0_in/2 into  External patterns of execution 
* [[80]] --> 1 
* [[79]] --> 2 


### Specialization of cost equations eval_memmove_start/2 
* CE 2 is refined into CE [153,154] 


#### Refined cost equations eval_memmove_start/2 
* CE 153: eval_memmove_start(V_length,B) = 0+ eval_memmove_bb0_in(V_length,B):1
     [] 
* CE 154: eval_memmove_start(V_length,B) = 0+ eval_memmove_bb0_in(V_length,B):2
     [] 

### Cost equations --> "Loop" of eval_memmove_start/2 
* CEs [154] --> Loop 81 
* CEs [153] --> Loop 82 

#### Loops of eval_memmove_start/2 
* Loop 81: eval_memmove_start(V_length,B) [] 
* Loop 82: eval_memmove_start(V_length,B) [] 

### Ranking functions of CR eval_memmove_start(V_length,B) 

#### Partial ranking functions of CR eval_memmove_start(V_length,B) 


### Resulting Chains:eval_memmove_start(V_length,B) 
* [82]
* [81]...


### Merging Chains  eval_memmove_start/2 into  External patterns of execution 
* [[82]] --> 1 
* [[81]] --> 2 


Computing Bounds
=====================================

#### Cost of loops [31] 

 * loop 31:eval_memmove_bb13_in(V_58,V_t_5,B,C) -> [eval_memmove_bb13_in(V_58',V_t_5',B',C')] 
1
#### Cost of phase [31]:eval_memmove_bb13_in(V_58,V_t_5,B,C) -> [eval_memmove_bb13_in(V_58',V_t_5',B',C')] 
1*it(31)+0
#### Cost of loops [30] 

 * loop 30:eval_memmove_bb13_in(V_58,V_t_5,B,C) -> [eval_memmove_bb13_in(V_58',V_t_5',B',C')] 
1
#### Cost of phase [30]:eval_memmove_bb13_in(V_58,V_t_5,B,C) -> [eval_memmove_bb13_in(V_58',V_t_5',B',C')] 
1*it(30)+0
  Such that:it(30) =< V_t_5
it(30) =< V_t_5-V_t_5'

#### Cost of chains of eval_memmove_bb13_in(V_58,V_t_5,B,C):
* Chain [[31]]...: 1*it(31)+0
  with precondition: [0>=V_t_5,B=6] 

* Chain [[30],32]: 1*it(30)+0
  Such that:it(30) =< V_t_5

  with precondition: [B=6,V_58=C,V_t_5>=2] 

* Chain [32]: 0
  with precondition: [V_t_5=1,B=6,C=V_58] 


#### Cost of loops [34] 

 * loop 34:eval_memmove_bb15_in(V_t_6,B) -> [eval_memmove_bb15_in(V_t_6',B')] 
1
#### Cost of phase [34]:eval_memmove_bb15_in(V_t_6,B) -> [eval_memmove_bb15_in(V_t_6',B')] 
1*it(34)+0
#### Cost of loops [33] 

 * loop 33:eval_memmove_bb15_in(V_t_6,B) -> [eval_memmove_bb15_in(V_t_6',B')] 
1
#### Cost of phase [33]:eval_memmove_bb15_in(V_t_6,B) -> [eval_memmove_bb15_in(V_t_6',B')] 
1*it(33)+0
  Such that:it(33) =< V_t_6
it(33) =< V_t_6-V_t_6'

#### Cost of chains of eval_memmove_bb15_in(V_t_6,B):
* Chain [[34]]...: 1*it(34)+0
  with precondition: [0>=V_t_6,B=5] 

* Chain [[33],35]: 1*it(33)+0
  Such that:it(33) =< V_t_6

  with precondition: [B=5,V_t_6>=2] 

* Chain [35]: 0
  with precondition: [V_t_6=1,B=5] 


#### Cost of loops [37] 

 * loop 37:eval_memmove_bb17_in(V_t_7,B) -> [eval_memmove_bb17_in(V_t_7',B')] 
1
#### Cost of phase [37]:eval_memmove_bb17_in(V_t_7,B) -> [eval_memmove_bb17_in(V_t_7',B')] 
1*it(37)+0
#### Cost of loops [36] 

 * loop 36:eval_memmove_bb17_in(V_t_7,B) -> [eval_memmove_bb17_in(V_t_7',B')] 
1
#### Cost of phase [36]:eval_memmove_bb17_in(V_t_7,B) -> [eval_memmove_bb17_in(V_t_7',B')] 
1*it(36)+0
  Such that:it(36) =< V_t_7
it(36) =< V_t_7-V_t_7'

#### Cost of chains of eval_memmove_bb17_in(V_t_7,B):
* Chain [[37]]...: 1*it(37)+0
  with precondition: [0>=V_t_7,B=4] 

* Chain [[36],38]: 1*it(36)+0
  Such that:it(36) =< V_t_7

  with precondition: [B=4,V_t_7>=2] 

* Chain [38]: 0
  with precondition: [V_t_7=1,B=4] 


#### Cost of chains of eval_memmove_bb16_in(B):
* Chain [40]...: 1*s(1)+1
  with precondition: [] 

* Chain [39]: 1*aux(1)+0
  with precondition: [] 


#### Cost of chains of eval_memmove_bb14_in(V__1,B):
* Chain [47]: 1*s(3)+0
  with precondition: [V__1=0] 

* Chain [46]: 3*s(4)+1*s(5)+1
  Such that:s(5) =< V__1/4

  with precondition: [V__1>=1] 

* Chain [45]: 1*s(8)+0
  with precondition: [0>=V__1+1] 

* Chain [44]...: 1*aux(2)+0
  with precondition: [V__1=0] 

* Chain [43]...: 3*s(11)+1*s(12)+2
  Such that:s(12) =< V__1/4

  with precondition: [V__1>=1] 

* Chain [42]...: 1*s(15)+1
  with precondition: [3>=V__1,V__1>=1] 

* Chain [41]...: 1*aux(3)+0
  with precondition: [0>=V__1+1] 


#### Cost of loops [49] 

 * loop 49:eval_memmove_bb6_in(V_20,V_t_1,B,C) -> [eval_memmove_bb6_in(V_20',V_t_1',B',C')] 
1
#### Cost of phase [49]:eval_memmove_bb6_in(V_20,V_t_1,B,C) -> [eval_memmove_bb6_in(V_20',V_t_1',B',C')] 
1*it(49)+0
#### Cost of loops [48] 

 * loop 48:eval_memmove_bb6_in(V_20,V_t_1,B,C) -> [eval_memmove_bb6_in(V_20',V_t_1',B',C')] 
1
#### Cost of phase [48]:eval_memmove_bb6_in(V_20,V_t_1,B,C) -> [eval_memmove_bb6_in(V_20',V_t_1',B',C')] 
1*it(48)+0
  Such that:it(48) =< V_t_1
it(48) =< V_t_1-V_t_1'

#### Cost of chains of eval_memmove_bb6_in(V_20,V_t_1,B,C):
* Chain [[49]]...: 1*it(49)+0
  with precondition: [0>=V_t_1,B=3] 

* Chain [[48],50]: 1*it(48)+0
  Such that:it(48) =< V_t_1

  with precondition: [B=3,V_20=C,V_t_1>=2] 

* Chain [50]: 0
  with precondition: [V_t_1=1,B=3,C=V_20] 


#### Cost of loops [52] 

 * loop 52:eval_memmove_bb8_in(V_t_2,B) -> [eval_memmove_bb8_in(V_t_2',B')] 
1
#### Cost of phase [52]:eval_memmove_bb8_in(V_t_2,B) -> [eval_memmove_bb8_in(V_t_2',B')] 
1*it(52)+0
#### Cost of loops [51] 

 * loop 51:eval_memmove_bb8_in(V_t_2,B) -> [eval_memmove_bb8_in(V_t_2',B')] 
1
#### Cost of phase [51]:eval_memmove_bb8_in(V_t_2,B) -> [eval_memmove_bb8_in(V_t_2',B')] 
1*it(51)+0
  Such that:it(51) =< V_t_2
it(51) =< V_t_2-V_t_2'

#### Cost of chains of eval_memmove_bb8_in(V_t_2,B):
* Chain [[52]]...: 1*it(52)+0
  with precondition: [0>=V_t_2,B=2] 

* Chain [[51],53]: 1*it(51)+0
  Such that:it(51) =< V_t_2

  with precondition: [B=2,V_t_2>=2] 

* Chain [53]: 0
  with precondition: [V_t_2=1,B=2] 


#### Cost of loops [55] 

 * loop 55:eval_memmove_bb10_in(V_t_3,B) -> [eval_memmove_bb10_in(V_t_3',B')] 
1
#### Cost of phase [55]:eval_memmove_bb10_in(V_t_3,B) -> [eval_memmove_bb10_in(V_t_3',B')] 
1*it(55)+0
#### Cost of loops [54] 

 * loop 54:eval_memmove_bb10_in(V_t_3,B) -> [eval_memmove_bb10_in(V_t_3',B')] 
1
#### Cost of phase [54]:eval_memmove_bb10_in(V_t_3,B) -> [eval_memmove_bb10_in(V_t_3',B')] 
1*it(54)+0
  Such that:it(54) =< V_t_3
it(54) =< V_t_3-V_t_3'

#### Cost of chains of eval_memmove_bb10_in(V_t_3,B):
* Chain [[55]]...: 1*it(55)+0
  with precondition: [0>=V_t_3,B=4] 

* Chain [[54],56]: 1*it(54)+0
  Such that:it(54) =< V_t_3

  with precondition: [B=4,V_t_3>=2] 

* Chain [56]: 0
  with precondition: [V_t_3=1,B=4] 


#### Cost of chains of eval_memmove_bb9_in(B):
* Chain [58]...: 1*s(18)+1
  with precondition: [] 

* Chain [57]: 1*aux(4)+0
  with precondition: [] 


#### Cost of chains of eval_memmove_bb7_in(V__0,B):
* Chain [65]: 1*s(20)+0
  with precondition: [V__0=0] 

* Chain [64]: 3*s(21)+1*s(22)+1
  Such that:s(22) =< V__0/4

  with precondition: [V__0>=1] 

* Chain [63]: 1*s(25)+0
  with precondition: [0>=V__0+1] 

* Chain [62]...: 1*aux(5)+0
  with precondition: [V__0=0] 

* Chain [61]...: 3*s(28)+1*s(29)+2
  Such that:s(29) =< V__0/4

  with precondition: [V__0>=1] 

* Chain [60]...: 1*s(32)+1
  with precondition: [3>=V__0,V__0>=1] 

* Chain [59]...: 1*aux(6)+0
  with precondition: [0>=V__0+1] 


#### Cost of chains of eval_memmove_bb5_in(V_length,V_t_0,B):
* Chain [78]: 1*s(35)+1
  with precondition: [V_length=1,V_t_0=1] 

* Chain [77]: 1*s(36)+1
  with precondition: [V_t_0=1,0>=V_length] 

* Chain [76]: 1*s(37)+3*s(38)+2
  Such that:s(37) =< V_length/4

  with precondition: [V_t_0=1,V_length>=2] 

* Chain [75]: 1*s(39)+1*s(40)+1
  Such that:s(39) =< V_t_0

  with precondition: [V_length=V_t_0,V_length>=2] 

* Chain [74]: 1*s(41)+1*s(42)+1
  Such that:s(41) =< V_t_0

  with precondition: [V_t_0>=2,V_t_0>=V_length+1] 

* Chain [73]: 1*s(43)+1*s(44)+3*s(45)+2
  Such that:s(44) =< V_length/4-V_t_0/4
s(43) =< V_t_0

  with precondition: [V_t_0>=2,V_length>=V_t_0+1] 

* Chain [72]...: 1*s(46)+1
  with precondition: [V_length=1,V_t_0=1] 

* Chain [71]...: 4*s(47)+1*s(48)+3
  Such that:s(48) =< V_length/4

  with precondition: [V_t_0=1,V_length>=2] 

* Chain [70]...: 1*s(50)+1
  with precondition: [V_t_0=1,0>=V_length] 

* Chain [69]...: 1*s(51)+1*s(52)+1
  Such that:s(51) =< V_t_0

  with precondition: [V_length=V_t_0,V_length>=2] 

* Chain [68]...: 1*s(53)+1
  with precondition: [0>=V_t_0] 

* Chain [67]...: 2*s(54)+4*s(55)+1*s(57)+3
  Such that:s(57) =< V_length/4-V_t_0/4
aux(7) =< V_t_0
s(54) =< aux(7)

  with precondition: [V_t_0>=2,V_length>=V_t_0+1] 

* Chain [66]...: 1*s(59)+1*s(60)+1
  Such that:s(59) =< V_t_0

  with precondition: [V_t_0>=2,V_t_0>=V_length+1] 


#### Cost of chains of eval_memmove_bb0_in(V_length,B):
* Chain [80]: 32*s(61)+4*s(63)+5*s(65)+1*s(69)+2
  Such that:aux(10) =< V_length
aux(11) =< V_length/4
s(65) =< aux(10)
s(63) =< aux(11)
s(69) =< aux(11)
s(69) =< aux(10)

  with precondition: [] 

* Chain [79]...: 40*s(91)+4*s(93)+7*s(95)+1*s(100)+3
  Such that:aux(14) =< V_length
aux(15) =< V_length/4
s(95) =< aux(14)
s(93) =< aux(15)
s(100) =< aux(15)
s(100) =< aux(14)

  with precondition: [] 


#### Cost of chains of eval_memmove_start(V_length,B):
* Chain [82]: 5*s(131)+4*s(132)+1*s(133)+32*s(134)+2
  Such that:s(129) =< V_length
s(130) =< V_length/4
s(131) =< s(129)
s(132) =< s(130)
s(133) =< s(130)
s(133) =< s(129)

  with precondition: [] 

* Chain [81]...: 7*s(137)+4*s(138)+1*s(139)+40*s(140)+3
  Such that:s(135) =< V_length
s(136) =< V_length/4
s(137) =< s(135)
s(138) =< s(136)
s(139) =< s(136)
s(139) =< s(135)

  with precondition: [] 


Closed-form bounds of eval_memmove_start(V_length,B): 
-------------------------------------
* Chain [82] with precondition: [] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [81]... with precondition: [] 
    - Upper bound: inf 
    - Complexity: infinity 

### Maximum cost of eval_memmove_start(V_length,B): inf 
Asymptotic class: infinity 

Time statistics: 
-------------------------------------
* Partial evaluation computed in 96 ms.
* Invariants computed in 150 ms.
   - Backward Invariants 57 ms.
   - Transitive Invariants 42 ms.
* Refinement performed in 469 ms.
* Termination proved in 39 ms.
* Upper bounds computed in 319 ms.
   - Equation cost structures 211 ms.
   - Phase cost structures 59 ms.
   - Chain cost structures 52 ms.
   - Solving cost expressions 2 ms.
* Total analysis performed in 1223 ms.


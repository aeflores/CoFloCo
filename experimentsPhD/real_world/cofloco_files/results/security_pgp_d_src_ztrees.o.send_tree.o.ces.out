Warning: Ignored call to eval_send_tree_stop/1 in equation loop_cont_eval_send_tree_bb1_in/2 

Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. recursive  : [eval_send_tree_18/15,eval_send_tree_19/15,eval_send_tree_bb5_in/13]
1. recursive  : [eval_send_tree_27/7,eval_send_tree_28/7,eval_send_tree_34/8,eval_send_tree_35/8,eval_send_tree_36/9,eval_send_tree_37/9,eval_send_tree_42/7,eval_send_tree_43/7,eval_send_tree_44/8,eval_send_tree_45/8,eval_send_tree_50/7,eval_send_tree_51/7,eval_send_tree_52/8,eval_send_tree_53/8,eval_send_tree_bb13_in/8,eval_send_tree_bb15_in/6,eval_send_tree_bb1_in/4,eval_send_tree_bb9_in/6,loop_cont_eval_send_tree_bb5_in/9]
2. non_recursive  : [loop_cont_eval_send_tree_bb1_in/2]
3. non_recursive  : [eval_send_tree_bb0_in/2]
4. non_recursive  : [eval_send_tree_start/2]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into eval_send_tree_bb5_in/13
1. SCC is partially evaluated into eval_send_tree_bb1_in/4
2. SCC is completely evaluated into other SCCs
3. SCC is partially evaluated into eval_send_tree_bb0_in/2
4. SCC is partially evaluated into eval_send_tree_start/2

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations eval_send_tree_bb5_in/13 
* CE 9 is refined into CE [11] 
* CE 10 is discarded (unfeasible) 
* CE 8 is refined into CE [12] 


#### Refined cost equations eval_send_tree_bb5_in/13 
* CE 11: eval_send_tree_bb5_in(V_max_code,V_count_0,V_n_0,V_14,V_count_1,B,C,D,E,F,G,H,I) = 1+ eval_send_tree_bb5_in(V_max_code,J,V_n_0,V_14,K,L,C,D,E,F,G,H,I)
     [V_14>=V_count_1,V_max_code>=V_n_0,V_count_1>=2,V_count_1=K+1,V_14=J+1,V_14=V_count_0+1,L=2,B=2] 
* CE 12: eval_send_tree_bb5_in(A,B,C,D,E,F,A,G,C,D,H,I,J) = 0
     [A>=C,D>=1,D=G+1,D=B+1,H=1,F=2,E=1] 

### Cost equations --> "Loop" of eval_send_tree_bb5_in/13 
* CEs [12] --> Loop 9 
* CEs [11] --> Loop 10 

#### Loops of eval_send_tree_bb5_in/13 
* Loop 9: eval_send_tree_bb5_in(A,B,C,D,E,F,A,G,C,D,H,I,J) [A>=C,D>=1,D=G+1,D=B+1,H=1,F=2,E=1] 
* Loop 10: eval_send_tree_bb5_in(V_max_code,V_count_0,V_n_0,V_14,V_count_1,B,C,D,E,F,G,H,I)->  eval_send_tree_bb5_in(V_max_code,V_count_0',V_n_0,V_14,V_count_1',B',C,D,E,F,G,H,I)
                  [V_14>=V_count_1,V_max_code>=V_n_0,V_count_1>=2,V_count_1=V_count_1'+1,V_14=V_count_0'+1,V_14=V_count_0+1,B'=2,B=2] 

### Ranking functions of CR eval_send_tree_bb5_in(V_max_code,V_count_0,V_n_0,V_14,V_count_1,B,C,D,E,F,G,H,I) 
* RF of phase [10]: [V_count_1-1]

#### Partial ranking functions of CR eval_send_tree_bb5_in(V_max_code,V_count_0,V_n_0,V_14,V_count_1,B,C,D,E,F,G,H,I) 
* Partial RF of phase [10]:
  - RF of loop [10:1]:
    V_count_1-1


### Resulting Chains:eval_send_tree_bb5_in(V_max_code,V_count_0,V_n_0,V_14,V_count_1,B,C,D,E,F,G,H,I) 
* [[10],9]
* [9]


### Merging Chains  eval_send_tree_bb5_in/13 into  External patterns of execution 
* [[9]] --> 1 
* [[9,[10]]] --> 2 


### Specialization of cost equations eval_send_tree_bb1_in/4 
* CE 7 is refined into CE [13] 
* CE 6 is refined into CE [14] 
* CE 4 is refined into CE [15,16] 
* CE 5 is refined into CE [17] 


#### Refined cost equations eval_send_tree_bb1_in/4 
* CE 13: eval_send_tree_bb1_in(V_max_code,V_count_0,V_n_0,B) = 0
     [V_n_0>=V_max_code+1,V_count_0>=0,B=3] 
* CE 14: eval_send_tree_bb1_in(V_max_code,V_count_0,V_n_0,B) = 1+ eval_send_tree_bb1_in(V_max_code,C,D,E)
     [V_max_code>=V_n_0,V_count_0>=0,V_n_0+1=D,V_count_0+1=C,E=3,B=3] 
* CE 15: eval_send_tree_bb1_in(V_max_code,V_count_0,V_n_0,B) = 2+ eval_send_tree_bb5_in(V_max_code,C,V_n_0,D,E,F,V_max_code,G,V_n_0,H,I,J,K):1+ eval_send_tree_bb1_in(V_max_code,L,M,N)
     [V_max_code>=V_n_0,V_n_0+1=M,N=3,L=0,I=1,H=1,G=0,F=2,E=1,D=1,C=0,B=3,V_count_0=0] 
* CE 16: eval_send_tree_bb1_in(V_max_code,V_count_0,V_n_0,B) = 2+ eval_send_tree_bb5_in(V_max_code,C,V_n_0,D,D,E,V_max_code,F,V_n_0,D,G,H,I):2+ eval_send_tree_bb1_in(V_max_code,J,K,L)
     [V_max_code>=V_n_0,D>=2,V_n_0+1=K,D=F+1,D=C+1,D=V_count_0+1,L=3,J=0,G=1,E=2,B=3] 
* CE 17: eval_send_tree_bb1_in(V_max_code,V_count_0,V_n_0,B) = 1+ eval_send_tree_bb1_in(V_max_code,C,D,E)
     [V_max_code>=V_n_0,V_count_0>=0,V_n_0+1=D,E=3,C=0,B=3] 

### Cost equations --> "Loop" of eval_send_tree_bb1_in/4 
* CEs [14] --> Loop 11 
* CEs [15,16,17] --> Loop 12 
* CEs [13] --> Loop 13 

#### Loops of eval_send_tree_bb1_in/4 
* Loop 11: eval_send_tree_bb1_in(V_max_code,V_count_0,V_n_0,B)->  eval_send_tree_bb1_in(V_max_code,V_count_0',V_n_0',B')
                  [V_max_code>=V_n_0,V_count_0>=0,V_n_0+1=V_n_0',V_count_0+1=V_count_0',B'=3,B=3] 
* Loop 12: eval_send_tree_bb1_in(V_max_code,V_count_0,V_n_0,B)->  eval_send_tree_bb1_in(V_max_code,V_count_0',V_n_0',B')
                  [V_max_code>=V_n_0,V_count_0>=0,V_n_0+1=V_n_0',B'=3,V_count_0'=0,B=3] 
* Loop 13: eval_send_tree_bb1_in(V_max_code,V_count_0,V_n_0,B) [V_n_0>=V_max_code+1,V_count_0>=0,B=3] 

### Ranking functions of CR eval_send_tree_bb1_in(V_max_code,V_count_0,V_n_0,B) 
* RF of phase [11,12]: [V_max_code-V_n_0+1]

#### Partial ranking functions of CR eval_send_tree_bb1_in(V_max_code,V_count_0,V_n_0,B) 
* Partial RF of phase [11,12]:
  - RF of loop [11:1]:
    V_max_code-V_count_0+1 depends on loops [12:1] 
  - RF of loop [11:1,12:1]:
    V_max_code-V_n_0+1


### Resulting Chains:eval_send_tree_bb1_in(V_max_code,V_count_0,V_n_0,B) 
* [[11,12],13]
* [13]


### Merging Chains  eval_send_tree_bb1_in/4 into  External patterns of execution 
* [[13]] --> 1 
* [[13,[11,12]]] --> 2 


### Specialization of cost equations eval_send_tree_bb0_in/2 
* CE 3 is refined into CE [18,19] 


#### Refined cost equations eval_send_tree_bb0_in/2 
* CE 18: eval_send_tree_bb0_in(V_max_code,B) = 1+ eval_send_tree_bb1_in(V_max_code,C,D,E):1
     [0>=V_max_code+1,E=3,D=0,C=0] 
* CE 19: eval_send_tree_bb0_in(V_max_code,B) = 1+ eval_send_tree_bb1_in(V_max_code,C,D,E):2
     [V_max_code>=0,E=3,D=0,C=0] 

### Cost equations --> "Loop" of eval_send_tree_bb0_in/2 
* CEs [19] --> Loop 14 
* CEs [18] --> Loop 15 

#### Loops of eval_send_tree_bb0_in/2 
* Loop 14: eval_send_tree_bb0_in(V_max_code,B) [V_max_code>=0] 
* Loop 15: eval_send_tree_bb0_in(V_max_code,B) [0>=V_max_code+1] 

### Ranking functions of CR eval_send_tree_bb0_in(V_max_code,B) 

#### Partial ranking functions of CR eval_send_tree_bb0_in(V_max_code,B) 


### Resulting Chains:eval_send_tree_bb0_in(V_max_code,B) 
* [15]
* [14]


### Merging Chains  eval_send_tree_bb0_in/2 into  External patterns of execution 
* [[15]] --> 1 
* [[14]] --> 2 


### Specialization of cost equations eval_send_tree_start/2 
* CE 2 is refined into CE [20,21] 


#### Refined cost equations eval_send_tree_start/2 
* CE 20: eval_send_tree_start(V_max_code,B) = 0+ eval_send_tree_bb0_in(V_max_code,B):1
     [0>=V_max_code+1] 
* CE 21: eval_send_tree_start(V_max_code,B) = 0+ eval_send_tree_bb0_in(V_max_code,B):2
     [V_max_code>=0] 

### Cost equations --> "Loop" of eval_send_tree_start/2 
* CEs [21] --> Loop 16 
* CEs [20] --> Loop 17 

#### Loops of eval_send_tree_start/2 
* Loop 16: eval_send_tree_start(V_max_code,B) [V_max_code>=0] 
* Loop 17: eval_send_tree_start(V_max_code,B) [0>=V_max_code+1] 

### Ranking functions of CR eval_send_tree_start(V_max_code,B) 

#### Partial ranking functions of CR eval_send_tree_start(V_max_code,B) 


### Resulting Chains:eval_send_tree_start(V_max_code,B) 
* [17]
* [16]


### Merging Chains  eval_send_tree_start/2 into  External patterns of execution 
* [[17]] --> 1 
* [[16]] --> 2 


Computing Bounds
=====================================

#### Cost of loops [10] 

 * loop 10:eval_send_tree_bb5_in(V_max_code,V_count_0,V_n_0,V_14,V_count_1,B,C,D,E,F,G,H,I) -> [eval_send_tree_bb5_in(V_max_code',V_count_0',V_n_0',V_14',V_count_1',B',C',D',E',F',G',H',I')] 
1
#### Cost of phase [10]:eval_send_tree_bb5_in(V_max_code,V_count_0,V_n_0,V_14,V_count_1,B,C,D,E,F,G,H,I) -> [eval_send_tree_bb5_in(V_max_code',V_count_0',V_n_0',V_14',V_count_1',B',C',D',E',F',G',H',I')] 
1*it(10)+0
  Such that:it(10) =< V_count_1
it(10) =< V_count_1-V_count_1'

#### Cost of chains of eval_send_tree_bb5_in(V_max_code,V_count_0,V_n_0,V_14,V_count_1,B,C,D,E,F,G,H,I):
* Chain [[10],9]: 1*it(10)+0
  Such that:it(10) =< V_count_1

  with precondition: [B=2,G=1,V_count_0+1=V_14,V_max_code=C,V_count_0=D,V_n_0=E,V_count_0+1=F,V_count_1>=2,V_max_code>=V_n_0,V_count_0+1>=V_count_1] 

* Chain [9]: 0
  with precondition: [V_count_1=1,B=2,G=1,V_count_0+1=V_14,V_max_code=C,V_count_0=D,V_n_0=E,V_count_0+1=F,V_count_0>=0,V_max_code>=V_n_0] 


#### Cost of loops [11,12] 

 * loop 11:eval_send_tree_bb1_in(V_max_code,V_count_0,V_n_0,B) -> [eval_send_tree_bb1_in(V_max_code',V_count_0',V_n_0',B')] 
1
 * loop 12:eval_send_tree_bb1_in(V_max_code,V_count_0,V_n_0,B) -> [eval_send_tree_bb1_in(V_max_code',V_count_0',V_n_0',B')] 
1*s(2)+2
  Such that:s(2) =< V_count_0+1

#### Cost of phase [11,12]:eval_send_tree_bb1_in(V_max_code,V_count_0,V_n_0,B) -> [eval_send_tree_bb1_in(V_max_code',V_count_0',V_n_0',B')] 
1*it(11)+2*it(12)+1*s(3)+0
  Such that:aux(5) =< V_max_code
aux(2) =< V_max_code-V_count_0+1
aux(4) =< V_max_code-V_count_0-V_max_code'+V_count_0'
s(3) =< V_max_code+V_count_0-V_n_0+1
s(3) =< V_max_code+V_count_0-V_n_0-V_max_code'-V_count_0'+V_n_0'
aux(7) =< V_max_code-V_n_0+1
aux(8) =< V_max_code-V_n_0-V_max_code'+V_n_0'
it(11) =< aux(7)
it(12) =< aux(7)
it(11) =< aux(8)
it(12) =< aux(8)
aux(1) =< it(12)*aux(5)
it(11) =< aux(1)+aux(2)
it(11) =< aux(1)+aux(4)

#### Cost of chains of eval_send_tree_bb1_in(V_max_code,V_count_0,V_n_0,B):
* Chain [[11,12],13]: 1*it(11)+2*it(12)+1*s(3)+0
  Such that:aux(5) =< V_max_code
aux(2) =< V_max_code-V_count_0+1
s(3) =< V_max_code+V_count_0-V_n_0+1
aux(9) =< V_max_code-V_n_0+1
it(11) =< aux(9)
it(12) =< aux(9)
aux(1) =< it(12)*aux(5)
it(11) =< aux(1)+aux(2)
it(11) =< aux(1)+aux(9)

  with precondition: [B=3,V_count_0>=0,V_n_0>=V_count_0,V_max_code>=V_n_0] 

* Chain [13]: 0
  with precondition: [B=3,V_count_0>=0,V_n_0>=V_max_code+1,V_n_0>=V_count_0] 


#### Cost of chains of eval_send_tree_bb0_in(V_max_code,B):
* Chain [15]: 1
  with precondition: [0>=V_max_code+1] 

* Chain [14]: 3*s(6)+1*s(8)+1
  Such that:s(4) =< V_max_code
aux(10) =< V_max_code+1
s(6) =< aux(10)
s(8) =< aux(10)
s(10) =< s(6)*s(4)
s(8) =< s(10)+aux(10)

  with precondition: [V_max_code>=0] 


#### Cost of chains of eval_send_tree_start(V_max_code,B):
* Chain [17]: 1
  with precondition: [0>=V_max_code+1] 

* Chain [16]: 3*s(13)+1*s(14)+1
  Such that:s(11) =< V_max_code
s(12) =< V_max_code+1
s(13) =< s(12)
s(14) =< s(12)
s(15) =< s(13)*s(11)
s(14) =< s(15)+s(12)

  with precondition: [V_max_code>=0] 


Closed-form bounds of eval_send_tree_start(V_max_code,B): 
-------------------------------------
* Chain [17] with precondition: [0>=V_max_code+1] 
    - Upper bound: 1 
    - Complexity: constant 
* Chain [16] with precondition: [V_max_code>=0] 
    - Upper bound: 4*V_max_code+5 
    - Complexity: n 

### Maximum cost of eval_send_tree_start(V_max_code,B): nat(V_max_code+1)*4+1 
Asymptotic class: n 

Time statistics: 
-------------------------------------
* Partial evaluation computed in 46 ms.
* Invariants computed in 29 ms.
   - Backward Invariants 13 ms.
   - Transitive Invariants 7 ms.
* Refinement performed in 48 ms.
* Termination proved in 8 ms.
* Upper bounds computed in 66 ms.
   - Equation cost structures 15 ms.
   - Phase cost structures 37 ms.
   - Chain cost structures 21 ms.
   - Solving cost expressions 1 ms.
* Total analysis performed in 246 ms.


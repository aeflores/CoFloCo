Warning: Ignored call to eval_drain_into_ancillary_data_stop/1 in equation eval_drain_into_ancillary_data_bb5_in/1 

Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. recursive  : [eval_drain_into_ancillary_data_4/5,eval_drain_into_ancillary_data_5/5,eval_drain_into_ancillary_data_bb1_in/5]
1. non_recursive  : [eval_drain_into_ancillary_data_bb5_in/1]
2. non_recursive  : [eval_drain_into_ancillary_data_9/1]
3. non_recursive  : [eval_drain_into_ancillary_data_8/2]
4. non_recursive  : [loop_cont_eval_drain_into_ancillary_data_bb1_in/3]
5. non_recursive  : [eval_drain_into_ancillary_data_bb0_in/2]
6. non_recursive  : [eval_drain_into_ancillary_data_start/2]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into eval_drain_into_ancillary_data_bb1_in/5
1. SCC is completely evaluated into other SCCs
2. SCC is completely evaluated into other SCCs
3. SCC is completely evaluated into other SCCs
4. SCC is partially evaluated into loop_cont_eval_drain_into_ancillary_data_bb1_in/3
5. SCC is partially evaluated into eval_drain_into_ancillary_data_bb0_in/2
6. SCC is partially evaluated into eval_drain_into_ancillary_data_start/2

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations eval_drain_into_ancillary_data_bb1_in/5 
* CE 8 is refined into CE [11] 
* CE 7 is refined into CE [12] 
* CE 6 is refined into CE [13] 


#### Refined cost equations eval_drain_into_ancillary_data_bb1_in/5 
* CE 11: eval_drain_into_ancillary_data_bb1_in(V_0,V_1,V_i_0,B,C) = 0
     [V_i_0>=V_0,V_i_0>=0,V_1+31>=0,31>=V_1,B=3] 
* CE 12: eval_drain_into_ancillary_data_bb1_in(A,B,C,D,B) = 0
     [C>=A,C>=0,B+31>=0,31>=B,D=2] 
* CE 13: eval_drain_into_ancillary_data_bb1_in(V_0,V_1,V_i_0,B,C) = 1+ eval_drain_into_ancillary_data_bb1_in(V_0,V_1,D,B,C)
     [V_0>=V_i_0+1,V_i_0>=0,V_1+31>=0,31>=V_1,V_i_0+1=D] 

### Cost equations --> "Loop" of eval_drain_into_ancillary_data_bb1_in/5 
* CEs [13] --> Loop 10 
* CEs [11] --> Loop 11 
* CEs [12] --> Loop 12 

#### Loops of eval_drain_into_ancillary_data_bb1_in/5 
* Loop 10: eval_drain_into_ancillary_data_bb1_in(V_0,V_1,V_i_0,B,C)->  eval_drain_into_ancillary_data_bb1_in(V_0,V_1,V_i_0',B,C)
                  [V_0>=V_i_0+1,V_i_0>=0,V_1+31>=0,31>=V_1,V_i_0+1=V_i_0'] 
* Loop 11: eval_drain_into_ancillary_data_bb1_in(V_0,V_1,V_i_0,B,C) [V_i_0>=V_0,V_i_0>=0,V_1+31>=0,31>=V_1,B=3] 
* Loop 12: eval_drain_into_ancillary_data_bb1_in(A,B,C,D,B) [C>=A,C>=0,B+31>=0,31>=B,D=2] 

### Ranking functions of CR eval_drain_into_ancillary_data_bb1_in(V_0,V_1,V_i_0,B,C) 
* RF of phase [10]: [V_0-V_i_0]

#### Partial ranking functions of CR eval_drain_into_ancillary_data_bb1_in(V_0,V_1,V_i_0,B,C) 
* Partial RF of phase [10]:
  - RF of loop [10:1]:
    V_0-V_i_0


### Resulting Chains:eval_drain_into_ancillary_data_bb1_in(V_0,V_1,V_i_0,B,C) 
* [[10],12]
* [[10],11]
* [12]
* [11]


### Merging Chains  eval_drain_into_ancillary_data_bb1_in/5 into  External patterns of execution 
* [[12]] --> 1 
* [[12,[10]]] --> 2 
* [[11]] --> 3 
* [[11,[10]]] --> 4 


### Specialization of cost equations loop_cont_eval_drain_into_ancillary_data_bb1_in/3 
* CE 10 is refined into CE [14] 
* CE 9 is refined into CE [15] 


#### Refined cost equations loop_cont_eval_drain_into_ancillary_data_bb1_in/3 
* CE 14: loop_cont_eval_drain_into_ancillary_data_bb1_in(E,A,B) = 0
     [E=3] 
* CE 15: loop_cont_eval_drain_into_ancillary_data_bb1_in(E,A,B) = 0
     [E=2] 

### Cost equations --> "Loop" of loop_cont_eval_drain_into_ancillary_data_bb1_in/3 
* CEs [14] --> Loop 13 
* CEs [15] --> Loop 14 

#### Loops of loop_cont_eval_drain_into_ancillary_data_bb1_in/3 
* Loop 13: loop_cont_eval_drain_into_ancillary_data_bb1_in(E,A,B) [E=3] 
* Loop 14: loop_cont_eval_drain_into_ancillary_data_bb1_in(E,A,B) [E=2] 

### Ranking functions of CR loop_cont_eval_drain_into_ancillary_data_bb1_in(E,A,B) 

#### Partial ranking functions of CR loop_cont_eval_drain_into_ancillary_data_bb1_in(E,A,B) 


### Resulting Chains:loop_cont_eval_drain_into_ancillary_data_bb1_in(E,A,B) 
* [14]
* [13]


### Merging Chains  loop_cont_eval_drain_into_ancillary_data_bb1_in/3 into  External patterns of execution 
* [[14]] --> 1 
* [[13]] --> 2 


### Specialization of cost equations eval_drain_into_ancillary_data_bb0_in/2 
* CE 4 is refined into CE [16,17,18,19] 
* CE 5 is refined into CE [20,21] 
* CE 3 is refined into CE [22,23] 


#### Refined cost equations eval_drain_into_ancillary_data_bb0_in/2 
* CE 16: eval_drain_into_ancillary_data_bb0_in(V_lengthInBits,B) = 1+ eval_drain_into_ancillary_data_bb1_in(C,D,E,F,D):1+ loop_cont_eval_drain_into_ancillary_data_bb1_in(G,D,B):1
     [D>=0,V_lengthInBits>=1,31>=D,31>=V_lengthInBits,G=2,F=2,E=0,C=0] 
* CE 17: eval_drain_into_ancillary_data_bb0_in(V_lengthInBits,B) = 1+ eval_drain_into_ancillary_data_bb1_in(C,D,E,F,D):2+ loop_cont_eval_drain_into_ancillary_data_bb1_in(G,D,B):1
     [32*C+31>=V_lengthInBits,V_lengthInBits>=32*C,D>=0,C>=1,31>=D,G=2,F=2,E=0] 
* CE 18: eval_drain_into_ancillary_data_bb0_in(V_lengthInBits,B) = 1+ eval_drain_into_ancillary_data_bb1_in(C,D,E,F,G):3+ loop_cont_eval_drain_into_ancillary_data_bb1_in(H,G,B):2
     [D>=0,V_lengthInBits>=1,31>=D,31>=V_lengthInBits,H=3,F=3,E=0,C=0] 
* CE 19: eval_drain_into_ancillary_data_bb0_in(V_lengthInBits,B) = 1+ eval_drain_into_ancillary_data_bb1_in(C,D,E,F,G):4+ loop_cont_eval_drain_into_ancillary_data_bb1_in(H,G,B):2
     [32*C+31>=V_lengthInBits,V_lengthInBits>=32*C,D>=0,C>=1,31>=D,H=3,F=3,E=0] 
* CE 20: eval_drain_into_ancillary_data_bb0_in(V_lengthInBits,B) = 1+ eval_drain_into_ancillary_data_bb1_in(C,D,E,F,D):1+ loop_cont_eval_drain_into_ancillary_data_bb1_in(G,D,B):1
     [32*C>=V_lengthInBits,V_lengthInBits+31>=32*C,D+31>=0,0>=D,0>=C,0>=V_lengthInBits+1,G=2,F=2,E=0] 
* CE 21: eval_drain_into_ancillary_data_bb0_in(V_lengthInBits,B) = 1+ eval_drain_into_ancillary_data_bb1_in(C,D,E,F,G):3+ loop_cont_eval_drain_into_ancillary_data_bb1_in(H,G,B):2
     [32*C>=V_lengthInBits,V_lengthInBits+31>=32*C,D+31>=0,0>=D,0>=C,0>=V_lengthInBits+1,H=3,F=3,E=0] 
* CE 22: eval_drain_into_ancillary_data_bb0_in(V_lengthInBits,B) = 1+ eval_drain_into_ancillary_data_bb1_in(C,D,E,F,G):1+ loop_cont_eval_drain_into_ancillary_data_bb1_in(H,I,B):1
     [I=0,H=2,G=0,F=2,E=0,D=0,C=0,V_lengthInBits=0] 
* CE 23: eval_drain_into_ancillary_data_bb0_in(V_lengthInBits,B) = 1+ eval_drain_into_ancillary_data_bb1_in(C,D,E,F,G):3+ loop_cont_eval_drain_into_ancillary_data_bb1_in(H,G,B):2
     [H=3,F=3,E=0,D=0,C=0,V_lengthInBits=0] 

### Cost equations --> "Loop" of eval_drain_into_ancillary_data_bb0_in/2 
* CEs [17,19] --> Loop 15 
* CEs [20,21] --> Loop 16 
* CEs [16,18] --> Loop 17 
* CEs [22,23] --> Loop 18 

#### Loops of eval_drain_into_ancillary_data_bb0_in/2 
* Loop 15: eval_drain_into_ancillary_data_bb0_in(V_lengthInBits,B) [V_lengthInBits>=32] 
* Loop 16: eval_drain_into_ancillary_data_bb0_in(V_lengthInBits,B) [0>=V_lengthInBits+1] 
* Loop 17: eval_drain_into_ancillary_data_bb0_in(V_lengthInBits,B) [V_lengthInBits>=1,31>=V_lengthInBits] 
* Loop 18: eval_drain_into_ancillary_data_bb0_in(V_lengthInBits,B) [V_lengthInBits=0] 

### Ranking functions of CR eval_drain_into_ancillary_data_bb0_in(V_lengthInBits,B) 

#### Partial ranking functions of CR eval_drain_into_ancillary_data_bb0_in(V_lengthInBits,B) 


### Resulting Chains:eval_drain_into_ancillary_data_bb0_in(V_lengthInBits,B) 
* [18]
* [17]
* [16]
* [15]


### Merging Chains  eval_drain_into_ancillary_data_bb0_in/2 into  External patterns of execution 
* [[18]] --> 1 
* [[17]] --> 2 
* [[16]] --> 3 
* [[15]] --> 4 


### Specialization of cost equations eval_drain_into_ancillary_data_start/2 
* CE 2 is refined into CE [24,25,26,27] 


#### Refined cost equations eval_drain_into_ancillary_data_start/2 
* CE 24: eval_drain_into_ancillary_data_start(V_lengthInBits,B) = 0+ eval_drain_into_ancillary_data_bb0_in(C,B):1
     [C=0,V_lengthInBits=0] 
* CE 25: eval_drain_into_ancillary_data_start(V_lengthInBits,B) = 0+ eval_drain_into_ancillary_data_bb0_in(V_lengthInBits,B):2
     [V_lengthInBits>=1,31>=V_lengthInBits] 
* CE 26: eval_drain_into_ancillary_data_start(V_lengthInBits,B) = 0+ eval_drain_into_ancillary_data_bb0_in(V_lengthInBits,B):3
     [0>=V_lengthInBits+1] 
* CE 27: eval_drain_into_ancillary_data_start(V_lengthInBits,B) = 0+ eval_drain_into_ancillary_data_bb0_in(V_lengthInBits,B):4
     [V_lengthInBits>=32] 

### Cost equations --> "Loop" of eval_drain_into_ancillary_data_start/2 
* CEs [27] --> Loop 19 
* CEs [26] --> Loop 20 
* CEs [25] --> Loop 21 
* CEs [24] --> Loop 22 

#### Loops of eval_drain_into_ancillary_data_start/2 
* Loop 19: eval_drain_into_ancillary_data_start(V_lengthInBits,B) [V_lengthInBits>=32] 
* Loop 20: eval_drain_into_ancillary_data_start(V_lengthInBits,B) [0>=V_lengthInBits+1] 
* Loop 21: eval_drain_into_ancillary_data_start(V_lengthInBits,B) [V_lengthInBits>=1,31>=V_lengthInBits] 
* Loop 22: eval_drain_into_ancillary_data_start(V_lengthInBits,B) [V_lengthInBits=0] 

### Ranking functions of CR eval_drain_into_ancillary_data_start(V_lengthInBits,B) 

#### Partial ranking functions of CR eval_drain_into_ancillary_data_start(V_lengthInBits,B) 


### Resulting Chains:eval_drain_into_ancillary_data_start(V_lengthInBits,B) 
* [22]
* [21]
* [20]
* [19]


### Merging Chains  eval_drain_into_ancillary_data_start/2 into  External patterns of execution 
* [[22]] --> 1 
* [[21]] --> 2 
* [[20]] --> 3 
* [[19]] --> 4 


Computing Bounds
=====================================

#### Cost of loops [10] 

 * loop 10:eval_drain_into_ancillary_data_bb1_in(V_0,V_1,V_i_0,B,C) -> [eval_drain_into_ancillary_data_bb1_in(V_0',V_1',V_i_0',B',C')] 
1
#### Cost of phase [10]:eval_drain_into_ancillary_data_bb1_in(V_0,V_1,V_i_0,B,C) -> [eval_drain_into_ancillary_data_bb1_in(V_0',V_1',V_i_0',B',C')] 
1*it(10)+0
  Such that:it(10) =< V_0-V_i_0
it(10) =< V_0-V_i_0-V_0'+V_i_0'

#### Cost of phase [10]:eval_drain_into_ancillary_data_bb1_in(V_0,V_1,V_i_0,B,C) -> [eval_drain_into_ancillary_data_bb1_in(V_0',V_1',V_i_0',B',C')] 
1*it(10)+0
  Such that:it(10) =< V_0-V_i_0
it(10) =< V_0-V_i_0-V_0'+V_i_0'

#### Cost of chains of eval_drain_into_ancillary_data_bb1_in(V_0,V_1,V_i_0,B,C):
* Chain [[10],12]: 1*it(10)+0
  Such that:it(10) =< V_0-V_i_0

  with precondition: [B=2,V_1=C,31>=V_1,V_1+31>=0,V_i_0>=0,V_0>=V_i_0+1] 

* Chain [[10],11]: 1*it(10)+0
  Such that:it(10) =< V_0-V_i_0

  with precondition: [B=3,31>=V_1,V_1+31>=0,V_i_0>=0,V_0>=V_i_0+1] 

* Chain [12]: 0
  with precondition: [B=2,V_1=C,31>=V_1,V_1+31>=0,V_i_0>=0,V_i_0>=V_0] 

* Chain [11]: 0
  with precondition: [B=3,31>=V_1,V_1+31>=0,V_i_0>=0,V_i_0>=V_0] 


#### Cost of chains of loop_cont_eval_drain_into_ancillary_data_bb1_in(E,A,B):
* Chain [14]: 0
  with precondition: [E=2] 

* Chain [13]: 0
  with precondition: [E=3] 


#### Cost of chains of eval_drain_into_ancillary_data_bb0_in(V_lengthInBits,B):
* Chain [18]: 1
  with precondition: [V_lengthInBits=0] 

* Chain [17]: 1
  with precondition: [31>=V_lengthInBits,V_lengthInBits>=1] 

* Chain [16]: 1
  with precondition: [0>=V_lengthInBits+1] 

* Chain [15]: 2*s(1)+1
  Such that:aux(1) =< V_lengthInBits/32
s(1) =< aux(1)

  with precondition: [V_lengthInBits>=32] 


#### Cost of chains of eval_drain_into_ancillary_data_start(V_lengthInBits,B):
* Chain [22]: 1
  with precondition: [V_lengthInBits=0] 

* Chain [21]: 1
  with precondition: [31>=V_lengthInBits,V_lengthInBits>=1] 

* Chain [20]: 1
  with precondition: [0>=V_lengthInBits+1] 

* Chain [19]: 2*s(4)+1
  Such that:s(3) =< V_lengthInBits/32
s(4) =< s(3)

  with precondition: [V_lengthInBits>=32] 


Closed-form bounds of eval_drain_into_ancillary_data_start(V_lengthInBits,B): 
-------------------------------------
* Chain [22] with precondition: [V_lengthInBits=0] 
    - Upper bound: 1 
    - Complexity: constant 
* Chain [21] with precondition: [31>=V_lengthInBits,V_lengthInBits>=1] 
    - Upper bound: 1 
    - Complexity: constant 
* Chain [20] with precondition: [0>=V_lengthInBits+1] 
    - Upper bound: 1 
    - Complexity: constant 
* Chain [19] with precondition: [V_lengthInBits>=32] 
    - Upper bound: V_lengthInBits/16+1 
    - Complexity: n 

### Maximum cost of eval_drain_into_ancillary_data_start(V_lengthInBits,B): nat(V_lengthInBits/32)*2+1 
Asymptotic class: n 

Time statistics: 
-------------------------------------
* Partial evaluation computed in 10 ms.
* Invariants computed in 18 ms.
   - Backward Invariants 11 ms.
   - Transitive Invariants 2 ms.
* Refinement performed in 42 ms.
* Termination proved in 4 ms.
* Upper bounds computed in 23 ms.
   - Equation cost structures 11 ms.
   - Phase cost structures 3 ms.
   - Chain cost structures 8 ms.
   - Solving cost expressions 0 ms.
* Total analysis performed in 120 ms.


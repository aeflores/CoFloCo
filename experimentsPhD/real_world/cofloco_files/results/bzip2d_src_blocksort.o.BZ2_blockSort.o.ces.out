WARNING: Excluded non-linear constraints:[E=B*D]
WARNING: Excluded non-linear constraints:[E=B*D]
WARNING: Excluded non-linear constraints:[F=B*D]
WARNING: Excluded non-linear constraints:[F=B*D]
WARNING: Excluded non-linear constraints:[F=B*D]
Warning: Ignored call to eval_BZ2_blockSort_stop/1 in equation eval_BZ2_blockSort_bb15_in/1 

Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. recursive  : [eval_BZ2_blockSort_bb9_in/3]
1. non_recursive  : [eval_BZ2_blockSort_bb15_in/1]
2. non_recursive  : [eval_BZ2_blockSort_45/1]
3. non_recursive  : [eval_BZ2_blockSort_44/1]
4. non_recursive  : [eval_BZ2_blockSort_bb13_in/1]
5. non_recursive  : [loop_cont_eval_BZ2_blockSort_bb9_in/2]
6. non_recursive  : [eval_BZ2_blockSort_bb8_in/1]
7. non_recursive  : [eval_BZ2_blockSort_31/1]
8. non_recursive  : [eval_BZ2_blockSort_30/3]
9. non_recursive  : [eval_BZ2_blockSort_bb7_in/3]
10. non_recursive  : [eval_BZ2_blockSort_29/3]
11. non_recursive  : [eval_BZ2_blockSort_28/3]
12. non_recursive  : [eval_BZ2_blockSort_bb4_in/3]
13. non_recursive  : [eval_BZ2_blockSort_25/3]
14. non_recursive  : [eval_BZ2_blockSort_24/4]
15. non_recursive  : [eval_BZ2_blockSort_18/4]
16. non_recursive  : [eval_BZ2_blockSort_17/4]
17. non_recursive  : [eval_BZ2_blockSort_5/1]
18. non_recursive  : [eval_BZ2_blockSort_4/3]
19. non_recursive  : [eval_BZ2_blockSort_bb0_in/1]
20. non_recursive  : [eval_BZ2_blockSort_start/1]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into eval_BZ2_blockSort_bb9_in/3
1. SCC is completely evaluated into other SCCs
2. SCC is completely evaluated into other SCCs
3. SCC is completely evaluated into other SCCs
4. SCC is partially evaluated into eval_BZ2_blockSort_bb13_in/1
5. SCC is completely evaluated into other SCCs
6. SCC is partially evaluated into eval_BZ2_blockSort_bb8_in/1
7. SCC is completely evaluated into other SCCs
8. SCC is completely evaluated into other SCCs
9. SCC is completely evaluated into other SCCs
10. SCC is completely evaluated into other SCCs
11. SCC is completely evaluated into other SCCs
12. SCC is partially evaluated into eval_BZ2_blockSort_bb4_in/3
13. SCC is completely evaluated into other SCCs
14. SCC is completely evaluated into other SCCs
15. SCC is partially evaluated into eval_BZ2_blockSort_18/4
16. SCC is completely evaluated into other SCCs
17. SCC is completely evaluated into other SCCs
18. SCC is completely evaluated into other SCCs
19. SCC is partially evaluated into eval_BZ2_blockSort_bb0_in/1
20. SCC is partially evaluated into eval_BZ2_blockSort_start/1

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations eval_BZ2_blockSort_bb9_in/3 
* CE 7 is refined into CE [12] 
* CE 9 is refined into CE [13] 
* CE 8 is refined into CE [14] 


#### Refined cost equations eval_BZ2_blockSort_bb9_in/3 
* CE 12: eval_BZ2_blockSort_bb9_in(V_54,V_i_1,B) = 0
     [V_54>=V_i_1+1,V_i_1>=0,B=2] 
* CE 13: eval_BZ2_blockSort_bb9_in(V_54,V_i_1,B) = 0
     [V_i_1>=V_54,V_i_1>=0,B=2] 
* CE 14: eval_BZ2_blockSort_bb9_in(V_54,V_i_1,B) = 1+ eval_BZ2_blockSort_bb9_in(V_54,C,D)
     [V_54>=V_i_1+1,V_i_1>=0,V_i_1+1=C,D=2,B=2] 

### Cost equations --> "Loop" of eval_BZ2_blockSort_bb9_in/3 
* CEs [14] --> Loop 10 
* CEs [12] --> Loop 11 
* CEs [13] --> Loop 12 

#### Loops of eval_BZ2_blockSort_bb9_in/3 
* Loop 10: eval_BZ2_blockSort_bb9_in(V_54,V_i_1,B)->  eval_BZ2_blockSort_bb9_in(V_54,V_i_1',B')
                  [V_54>=V_i_1+1,V_i_1>=0,V_i_1+1=V_i_1',B'=2,B=2] 
* Loop 11: eval_BZ2_blockSort_bb9_in(V_54,V_i_1,B) [V_54>=V_i_1+1,V_i_1>=0,B=2] 
* Loop 12: eval_BZ2_blockSort_bb9_in(V_54,V_i_1,B) [V_i_1>=V_54,V_i_1>=0,B=2] 

### Ranking functions of CR eval_BZ2_blockSort_bb9_in(V_54,V_i_1,B) 
* RF of phase [10]: [V_54-V_i_1]

#### Partial ranking functions of CR eval_BZ2_blockSort_bb9_in(V_54,V_i_1,B) 
* Partial RF of phase [10]:
  - RF of loop [10:1]:
    V_54-V_i_1


### Resulting Chains:eval_BZ2_blockSort_bb9_in(V_54,V_i_1,B) 
* [[10],12]
* [[10],11]
* [12]
* [11]


### Merging Chains  eval_BZ2_blockSort_bb9_in/3 into  External patterns of execution 
* [[12]] --> 1 
* [[11],[11,[10]],[12,[10]]] --> 2 


### Specialization of cost equations eval_BZ2_blockSort_bb13_in/1 
* CE 10 is refined into CE [15] 


#### Refined cost equations eval_BZ2_blockSort_bb13_in/1 
* CE 15: eval_BZ2_blockSort_bb13_in(B) = 0
     [] 

### Cost equations --> "Loop" of eval_BZ2_blockSort_bb13_in/1 
* CEs [15] --> Loop 13 

#### Loops of eval_BZ2_blockSort_bb13_in/1 
* Loop 13: eval_BZ2_blockSort_bb13_in(B) [] 

### Ranking functions of CR eval_BZ2_blockSort_bb13_in(B) 

#### Partial ranking functions of CR eval_BZ2_blockSort_bb13_in(B) 


### Resulting Chains:eval_BZ2_blockSort_bb13_in(B) 
* [13]


### Merging Chains  eval_BZ2_blockSort_bb13_in/1 into  External patterns of execution 
* [[13]] --> 1 


### Specialization of cost equations eval_BZ2_blockSort_bb8_in/1 
* CE 5 is refined into CE [16,17] 


#### Refined cost equations eval_BZ2_blockSort_bb8_in/1 
* CE 16: eval_BZ2_blockSort_bb8_in(B) = 1+ eval_BZ2_blockSort_bb9_in(C,D,E):1+ eval_BZ2_blockSort_bb13_in(B):1
     [0>=C,E=2,D=0] 
* CE 17: eval_BZ2_blockSort_bb8_in(B) = 1+ eval_BZ2_blockSort_bb9_in(C,D,E):2+ eval_BZ2_blockSort_bb13_in(B):1
     [C>=1,E=2,D=0] 

### Cost equations --> "Loop" of eval_BZ2_blockSort_bb8_in/1 
* CEs [16,17] --> Loop 14 

#### Loops of eval_BZ2_blockSort_bb8_in/1 
* Loop 14: eval_BZ2_blockSort_bb8_in(B) [] 

### Ranking functions of CR eval_BZ2_blockSort_bb8_in(B) 

#### Partial ranking functions of CR eval_BZ2_blockSort_bb8_in(B) 


### Resulting Chains:eval_BZ2_blockSort_bb8_in(B) 
* [14]


### Merging Chains  eval_BZ2_blockSort_bb8_in/1 into  External patterns of execution 
* [[14]] --> 1 


### Specialization of cost equations eval_BZ2_blockSort_bb4_in/3 
* CE 11 is refined into CE [18] 


#### Refined cost equations eval_BZ2_blockSort_bb4_in/3 
* CE 18: eval_BZ2_blockSort_bb4_in(V_7,V_9,B) = 0+ eval_BZ2_blockSort_bb8_in(B):1
     [] 

### Cost equations --> "Loop" of eval_BZ2_blockSort_bb4_in/3 
* CEs [18] --> Loop 15 

#### Loops of eval_BZ2_blockSort_bb4_in/3 
* Loop 15: eval_BZ2_blockSort_bb4_in(V_7,V_9,B) [] 

### Ranking functions of CR eval_BZ2_blockSort_bb4_in(V_7,V_9,B) 

#### Partial ranking functions of CR eval_BZ2_blockSort_bb4_in(V_7,V_9,B) 


### Resulting Chains:eval_BZ2_blockSort_bb4_in(V_7,V_9,B) 
* [15]


### Merging Chains  eval_BZ2_blockSort_bb4_in/3 into  External patterns of execution 
* [[15]] --> 1 


### Specialization of cost equations eval_BZ2_blockSort_18/4 
* CE 6 is refined into CE [19] 


#### Refined cost equations eval_BZ2_blockSort_18/4 
* CE 19: eval_BZ2_blockSort_18(V_7,V_9,V_28,B) = 0+ eval_BZ2_blockSort_bb4_in(V_7,V_9,B):1
     [] 

### Cost equations --> "Loop" of eval_BZ2_blockSort_18/4 
* CEs [19] --> Loop 16 

#### Loops of eval_BZ2_blockSort_18/4 
* Loop 16: eval_BZ2_blockSort_18(V_7,V_9,V_28,B) [] 

### Ranking functions of CR eval_BZ2_blockSort_18(V_7,V_9,V_28,B) 

#### Partial ranking functions of CR eval_BZ2_blockSort_18(V_7,V_9,V_28,B) 


### Resulting Chains:eval_BZ2_blockSort_18(V_7,V_9,V_28,B) 
* [16]


### Merging Chains  eval_BZ2_blockSort_18/4 into  External patterns of execution 
* [[16]] --> 1 


### Specialization of cost equations eval_BZ2_blockSort_bb0_in/1 
* CE 3 is refined into CE [20] 
* CE 4 is refined into CE [21] 


#### Refined cost equations eval_BZ2_blockSort_bb0_in/1 
* CE 20: eval_BZ2_blockSort_bb0_in(B) = 0+ eval_BZ2_blockSort_bb8_in(B):1
     [] 
* CE 21: eval_BZ2_blockSort_bb0_in(B) = 0+ eval_BZ2_blockSort_18(C,D,E,B):1
     [] 

### Cost equations --> "Loop" of eval_BZ2_blockSort_bb0_in/1 
* CEs [20,21] --> Loop 17 

#### Loops of eval_BZ2_blockSort_bb0_in/1 
* Loop 17: eval_BZ2_blockSort_bb0_in(B) [] 

### Ranking functions of CR eval_BZ2_blockSort_bb0_in(B) 

#### Partial ranking functions of CR eval_BZ2_blockSort_bb0_in(B) 


### Resulting Chains:eval_BZ2_blockSort_bb0_in(B) 
* [17]


### Merging Chains  eval_BZ2_blockSort_bb0_in/1 into  External patterns of execution 
* [[17]] --> 1 


### Specialization of cost equations eval_BZ2_blockSort_start/1 
* CE 2 is refined into CE [22] 


#### Refined cost equations eval_BZ2_blockSort_start/1 
* CE 22: eval_BZ2_blockSort_start(B) = 0+ eval_BZ2_blockSort_bb0_in(B):1
     [] 

### Cost equations --> "Loop" of eval_BZ2_blockSort_start/1 
* CEs [22] --> Loop 18 

#### Loops of eval_BZ2_blockSort_start/1 
* Loop 18: eval_BZ2_blockSort_start(B) [] 

### Ranking functions of CR eval_BZ2_blockSort_start(B) 

#### Partial ranking functions of CR eval_BZ2_blockSort_start(B) 


### Resulting Chains:eval_BZ2_blockSort_start(B) 
* [18]


### Merging Chains  eval_BZ2_blockSort_start/1 into  External patterns of execution 
* [[18]] --> 1 


Computing Bounds
=====================================

#### Cost of loops [10] 

 * loop 10:eval_BZ2_blockSort_bb9_in(V_54,V_i_1,B) -> [eval_BZ2_blockSort_bb9_in(V_54',V_i_1',B')] 
1
#### Cost of phase [10]:eval_BZ2_blockSort_bb9_in(V_54,V_i_1,B) -> [eval_BZ2_blockSort_bb9_in(V_54',V_i_1',B')] 
1*it(10)+0
  Such that:it(10) =< V_54-V_i_1
it(10) =< V_54-V_i_1-V_54'+V_i_1'

#### Cost of phase [10]:eval_BZ2_blockSort_bb9_in(V_54,V_i_1,B) -> [eval_BZ2_blockSort_bb9_in(V_54',V_i_1',B')] 
1*it(10)+0
  Such that:it(10) =< V_54-V_i_1
it(10) =< V_54-V_i_1-V_54'+V_i_1'

#### Cost of chains of eval_BZ2_blockSort_bb9_in(V_54,V_i_1,B):
* Chain [[10],12]: 1*it(10)+0
  Such that:it(10) =< V_54-V_i_1

  with precondition: [B=2,V_i_1>=0,V_54>=V_i_1+1] 

* Chain [[10],11]: 1*it(10)+0
  Such that:it(10) =< V_54-V_i_1

  with precondition: [B=2,V_i_1>=0,V_54>=V_i_1+2] 

* Chain [12]: 0
  with precondition: [B=2,V_i_1>=0,V_i_1>=V_54] 

* Chain [11]: 0
  with precondition: [B=2,V_i_1>=0,V_54>=V_i_1+1] 


#### Cost of chains of eval_BZ2_blockSort_bb13_in(B):
* Chain [13]: 0
  with precondition: [] 


#### Cost of chains of eval_BZ2_blockSort_bb8_in(B):
* Chain [14]: 1*aux(2)+0
  with precondition: [] 


#### Cost of chains of eval_BZ2_blockSort_bb4_in(V_7,V_9,B):
* Chain [15]: 1*s(5)+0
  with precondition: [] 


#### Cost of chains of eval_BZ2_blockSort_18(V_7,V_9,V_28,B):
* Chain [16]: 1*s(6)+0
  with precondition: [] 


#### Cost of chains of eval_BZ2_blockSort_bb0_in(B):
* Chain [17]: 1*aux(3)+0
  with precondition: [] 


#### Cost of chains of eval_BZ2_blockSort_start(B):
* Chain [18]: 1*s(9)+0
  with precondition: [] 


Closed-form bounds of eval_BZ2_blockSort_start(B): 
-------------------------------------
* Chain [18] with precondition: [] 
    - Upper bound: inf 
    - Complexity: infinity 

### Maximum cost of eval_BZ2_blockSort_start(B): inf 
Asymptotic class: infinity 

Time statistics: 
-------------------------------------
* Partial evaluation computed in 9 ms.
* Invariants computed in 7 ms.
   - Backward Invariants 4 ms.
   - Transitive Invariants 1 ms.
* Refinement performed in 13 ms.
* Termination proved in 3 ms.
* Upper bounds computed in 12 ms.
   - Equation cost structures 4 ms.
   - Phase cost structures 2 ms.
   - Chain cost structures 4 ms.
   - Solving cost expressions 0 ms.
* Total analysis performed in 62 ms.


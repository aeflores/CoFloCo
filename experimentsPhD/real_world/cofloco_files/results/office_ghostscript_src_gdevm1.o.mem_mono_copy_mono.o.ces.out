Warning: Ignored call to eval_mem_mono_copy_mono_stop/1 in equation eval_mem_mono_copy_mono_bb205_in/1 

Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. non_recursive  : [eval_mem_mono_copy_mono_bb205_in/1]
1. non_recursive  : [eval_mem_mono_copy_mono_1218/1]
2. non_recursive  : [eval_mem_mono_copy_mono_1217/6]
3. non_recursive  : [eval_mem_mono_copy_mono_bb203_in/6]
4. non_recursive  : [eval_mem_mono_copy_mono_NewDefault23_in/6]
5. non_recursive  : [eval_mem_mono_copy_mono_NewDefault34_in/6]
6. non_recursive  : [eval_mem_mono_copy_mono_NewDefault45_in/6]
7. non_recursive  : [eval_mem_mono_copy_mono_NewDefault56_in/6]
8. non_recursive  : [eval_mem_mono_copy_mono_NewDefault67_in/6]
9. non_recursive  : [eval_mem_mono_copy_mono_NewDefault_in/6]
10. recursive  : [eval_mem_mono_copy_mono_bb102_in/1,eval_mem_mono_copy_mono_bb105_in/1,eval_mem_mono_copy_mono_bb108_in/1]
11. recursive  : [eval_mem_mono_copy_mono_bb113_in/5]
12. recursive  : [eval_mem_mono_copy_mono_bb112_in/2,eval_mem_mono_copy_mono_bb117_in/3,loop_cont_eval_mem_mono_copy_mono_bb113_in/4]
13. recursive  : [eval_mem_mono_copy_mono_bb120_in/5]
14. recursive  : [eval_mem_mono_copy_mono_bb119_in/2,eval_mem_mono_copy_mono_bb124_in/3,loop_cont_eval_mem_mono_copy_mono_bb120_in/4]
15. recursive  : [eval_mem_mono_copy_mono_bb127_in/5]
16. recursive  : [eval_mem_mono_copy_mono_bb126_in/2,eval_mem_mono_copy_mono_bb131_in/3,loop_cont_eval_mem_mono_copy_mono_bb127_in/4]
17. recursive  : [eval_mem_mono_copy_mono_bb148_in/17,eval_mem_mono_copy_mono_bb152_in/17]
18. recursive  : [eval_mem_mono_copy_mono_bb167_in/17,eval_mem_mono_copy_mono_bb171_in/17]
19. recursive  : [eval_mem_mono_copy_mono_bb186_in/17,eval_mem_mono_copy_mono_bb190_in/17]
20. recursive  : [eval_mem_mono_copy_mono_bb134_in/11,eval_mem_mono_copy_mono_bb147_in/11,eval_mem_mono_copy_mono_bb157_in/12,eval_mem_mono_copy_mono_bb161_in/12,eval_mem_mono_copy_mono_bb162_in/12,eval_mem_mono_copy_mono_bb166_in/11,eval_mem_mono_copy_mono_bb176_in/12,eval_mem_mono_copy_mono_bb180_in/12,eval_mem_mono_copy_mono_bb181_in/12,eval_mem_mono_copy_mono_bb185_in/11,eval_mem_mono_copy_mono_bb195_in/12,eval_mem_mono_copy_mono_bb199_in/12,eval_mem_mono_copy_mono_bb200_in/12,eval_mem_mono_copy_mono_bb201_in/14,loop_cont_eval_mem_mono_copy_mono_bb148_in/15,loop_cont_eval_mem_mono_copy_mono_bb167_in/15,loop_cont_eval_mem_mono_copy_mono_bb186_in/15]
21. recursive  : [eval_mem_mono_copy_mono_bb15_in/2]
22. recursive  : [eval_mem_mono_copy_mono_bb18_in/2]
23. recursive  : [eval_mem_mono_copy_mono_bb21_in/2]
24. recursive  : [eval_mem_mono_copy_mono_bb25_in/1,eval_mem_mono_copy_mono_bb28_in/1]
25. recursive  : [eval_mem_mono_copy_mono_bb31_in/1,eval_mem_mono_copy_mono_bb34_in/1]
26. recursive  : [eval_mem_mono_copy_mono_bb37_in/1,eval_mem_mono_copy_mono_bb40_in/1]
27. recursive  : [eval_mem_mono_copy_mono_bb45_in/1,eval_mem_mono_copy_mono_bb48_in/1]
28. recursive  : [eval_mem_mono_copy_mono_bb51_in/1,eval_mem_mono_copy_mono_bb54_in/1]
29. recursive  : [eval_mem_mono_copy_mono_bb57_in/1,eval_mem_mono_copy_mono_bb60_in/1]
30. recursive  : [eval_mem_mono_copy_mono_bb64_in/1,eval_mem_mono_copy_mono_bb67_in/1]
31. recursive  : [eval_mem_mono_copy_mono_bb70_in/1,eval_mem_mono_copy_mono_bb73_in/1]
32. recursive  : [eval_mem_mono_copy_mono_bb76_in/1,eval_mem_mono_copy_mono_bb79_in/1]
33. recursive  : [eval_mem_mono_copy_mono_bb84_in/1,eval_mem_mono_copy_mono_bb87_in/1,eval_mem_mono_copy_mono_bb90_in/1]
34. recursive  : [eval_mem_mono_copy_mono_bb93_in/1,eval_mem_mono_copy_mono_bb96_in/1,eval_mem_mono_copy_mono_bb99_in/1]
35. non_recursive  : [loop_cont_eval_mem_mono_copy_mono_bb102_in/2]
36. non_recursive  : [loop_cont_eval_mem_mono_copy_mono_bb112_in/2]
37. non_recursive  : [loop_cont_eval_mem_mono_copy_mono_bb119_in/2]
38. non_recursive  : [loop_cont_eval_mem_mono_copy_mono_bb126_in/2]
39. non_recursive  : [eval_mem_mono_copy_mono_NewDefault78_in/5]
40. non_recursive  : [loop_cont_eval_mem_mono_copy_mono_bb134_in/6]
41. non_recursive  : [loop_cont_eval_mem_mono_copy_mono_bb15_in/2]
42. non_recursive  : [loop_cont_eval_mem_mono_copy_mono_bb18_in/2]
43. non_recursive  : [loop_cont_eval_mem_mono_copy_mono_bb21_in/2]
44. non_recursive  : [loop_cont_eval_mem_mono_copy_mono_bb25_in/2]
45. non_recursive  : [loop_cont_eval_mem_mono_copy_mono_bb31_in/2]
46. non_recursive  : [loop_cont_eval_mem_mono_copy_mono_bb37_in/2]
47. non_recursive  : [loop_cont_eval_mem_mono_copy_mono_bb45_in/2]
48. non_recursive  : [loop_cont_eval_mem_mono_copy_mono_bb51_in/2]
49. non_recursive  : [loop_cont_eval_mem_mono_copy_mono_bb57_in/2]
50. non_recursive  : [loop_cont_eval_mem_mono_copy_mono_bb64_in/2]
51. non_recursive  : [loop_cont_eval_mem_mono_copy_mono_bb70_in/2]
52. non_recursive  : [loop_cont_eval_mem_mono_copy_mono_bb76_in/2]
53. non_recursive  : [loop_cont_eval_mem_mono_copy_mono_bb84_in/2]
54. non_recursive  : [loop_cont_eval_mem_mono_copy_mono_bb93_in/2]
55. non_recursive  : [eval_mem_mono_copy_mono_32/6]
56. non_recursive  : [eval_mem_mono_copy_mono_31/6]
57. non_recursive  : [eval_mem_mono_copy_mono_bb9_in/6]
58. non_recursive  : [eval_mem_mono_copy_mono_bb7_in/6]
59. non_recursive  : [eval_mem_mono_copy_mono_bb5_in/6]
60. non_recursive  : [eval_mem_mono_copy_mono_bb3_in/6]
61. non_recursive  : [eval_mem_mono_copy_mono_bb0_in/6]
62. non_recursive  : [eval_mem_mono_copy_mono_start/10]

#### Obtained direct recursion through partial evaluation 
0. SCC is completely evaluated into other SCCs
1. SCC is completely evaluated into other SCCs
2. SCC is completely evaluated into other SCCs
3. SCC is partially evaluated into eval_mem_mono_copy_mono_bb203_in/6
4. SCC is completely evaluated into other SCCs
5. SCC is completely evaluated into other SCCs
6. SCC is completely evaluated into other SCCs
7. SCC is completely evaluated into other SCCs
8. SCC is completely evaluated into other SCCs
9. SCC is completely evaluated into other SCCs
10. SCC is partially evaluated into eval_mem_mono_copy_mono_bb102_in/1
11. SCC is partially evaluated into eval_mem_mono_copy_mono_bb113_in/5
12. SCC is partially evaluated into eval_mem_mono_copy_mono_bb112_in/2
13. SCC is partially evaluated into eval_mem_mono_copy_mono_bb120_in/5
14. SCC is partially evaluated into eval_mem_mono_copy_mono_bb119_in/2
15. SCC is partially evaluated into eval_mem_mono_copy_mono_bb127_in/5
16. SCC is partially evaluated into eval_mem_mono_copy_mono_bb126_in/2
17. SCC is partially evaluated into eval_mem_mono_copy_mono_bb148_in/17
18. SCC is partially evaluated into eval_mem_mono_copy_mono_bb167_in/17
19. SCC is partially evaluated into eval_mem_mono_copy_mono_bb186_in/17
20. SCC is partially evaluated into eval_mem_mono_copy_mono_bb134_in/11
21. SCC is partially evaluated into eval_mem_mono_copy_mono_bb15_in/2
22. SCC is partially evaluated into eval_mem_mono_copy_mono_bb18_in/2
23. SCC is partially evaluated into eval_mem_mono_copy_mono_bb21_in/2
24. SCC is partially evaluated into eval_mem_mono_copy_mono_bb25_in/1
25. SCC is partially evaluated into eval_mem_mono_copy_mono_bb31_in/1
26. SCC is partially evaluated into eval_mem_mono_copy_mono_bb37_in/1
27. SCC is partially evaluated into eval_mem_mono_copy_mono_bb45_in/1
28. SCC is partially evaluated into eval_mem_mono_copy_mono_bb51_in/1
29. SCC is partially evaluated into eval_mem_mono_copy_mono_bb57_in/1
30. SCC is partially evaluated into eval_mem_mono_copy_mono_bb64_in/1
31. SCC is partially evaluated into eval_mem_mono_copy_mono_bb70_in/1
32. SCC is partially evaluated into eval_mem_mono_copy_mono_bb76_in/1
33. SCC is partially evaluated into eval_mem_mono_copy_mono_bb84_in/1
34. SCC is partially evaluated into eval_mem_mono_copy_mono_bb93_in/1
35. SCC is completely evaluated into other SCCs
36. SCC is completely evaluated into other SCCs
37. SCC is completely evaluated into other SCCs
38. SCC is completely evaluated into other SCCs
39. SCC is completely evaluated into other SCCs
40. SCC is partially evaluated into loop_cont_eval_mem_mono_copy_mono_bb134_in/6
41. SCC is completely evaluated into other SCCs
42. SCC is completely evaluated into other SCCs
43. SCC is completely evaluated into other SCCs
44. SCC is completely evaluated into other SCCs
45. SCC is completely evaluated into other SCCs
46. SCC is completely evaluated into other SCCs
47. SCC is completely evaluated into other SCCs
48. SCC is completely evaluated into other SCCs
49. SCC is completely evaluated into other SCCs
50. SCC is completely evaluated into other SCCs
51. SCC is completely evaluated into other SCCs
52. SCC is completely evaluated into other SCCs
53. SCC is completely evaluated into other SCCs
54. SCC is completely evaluated into other SCCs
55. SCC is partially evaluated into eval_mem_mono_copy_mono_32/6
56. SCC is completely evaluated into other SCCs
57. SCC is partially evaluated into eval_mem_mono_copy_mono_bb9_in/6
58. SCC is partially evaluated into eval_mem_mono_copy_mono_bb7_in/6
59. SCC is partially evaluated into eval_mem_mono_copy_mono_bb5_in/6
60. SCC is partially evaluated into eval_mem_mono_copy_mono_bb3_in/6
61. SCC is partially evaluated into eval_mem_mono_copy_mono_bb0_in/6
62. SCC is partially evaluated into eval_mem_mono_copy_mono_start/10

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations eval_mem_mono_copy_mono_bb203_in/6 
* CE 35 is refined into CE [102] 


#### Refined cost equations eval_mem_mono_copy_mono_bb203_in/6 
* CE 102: eval_mem_mono_copy_mono_bb203_in(V_zero,V__17,V__15,V__2,V__22,B) = 0
     [] 

### Cost equations --> "Loop" of eval_mem_mono_copy_mono_bb203_in/6 
* CEs [102] --> Loop 68 

#### Loops of eval_mem_mono_copy_mono_bb203_in/6 
* Loop 68: eval_mem_mono_copy_mono_bb203_in(V_zero,V__17,V__15,V__2,V__22,B) [] 

### Ranking functions of CR eval_mem_mono_copy_mono_bb203_in(V_zero,V__17,V__15,V__2,V__22,B) 

#### Partial ranking functions of CR eval_mem_mono_copy_mono_bb203_in(V_zero,V__17,V__15,V__2,V__22,B) 


### Resulting Chains:eval_mem_mono_copy_mono_bb203_in(V_zero,V__17,V__15,V__2,V__22,B) 
* [68]


### Merging Chains  eval_mem_mono_copy_mono_bb203_in/6 into  External patterns of execution 
* [[68]] --> 1 


### Specialization of cost equations eval_mem_mono_copy_mono_bb102_in/1 
* CE 65 is refined into CE [103] 
* CE 64 is refined into CE [104] 


#### Refined cost equations eval_mem_mono_copy_mono_bb102_in/1 
* CE 103: eval_mem_mono_copy_mono_bb102_in(B) = 0
     [B=9] 
* CE 104: eval_mem_mono_copy_mono_bb102_in(B) = 1+ eval_mem_mono_copy_mono_bb102_in(C)
     [C=9,B=9] 

### Cost equations --> "Loop" of eval_mem_mono_copy_mono_bb102_in/1 
* CEs [104] --> Loop 69 
* CEs [103] --> Loop 70 

#### Loops of eval_mem_mono_copy_mono_bb102_in/1 
* Loop 69: eval_mem_mono_copy_mono_bb102_in(B)->  eval_mem_mono_copy_mono_bb102_in(B')
                  [B'=9,B=9] 
* Loop 70: eval_mem_mono_copy_mono_bb102_in(B) [B=9] 

### Ranking functions of CR eval_mem_mono_copy_mono_bb102_in(B) 

#### Partial ranking functions of CR eval_mem_mono_copy_mono_bb102_in(B) 


### Resulting Chains:eval_mem_mono_copy_mono_bb102_in(B) 
* [[69]]...
* [[69],70]
* [70]


### Merging Chains  eval_mem_mono_copy_mono_bb102_in/1 into  External patterns of execution 
* [[70],[70,[69]]] --> 1 
* [[[69]]] --> 2 


### Specialization of cost equations eval_mem_mono_copy_mono_bb113_in/5 
* CE 88 is refined into CE [105] 
* CE 87 is refined into CE [106] 


#### Refined cost equations eval_mem_mono_copy_mono_bb113_in/5 
* CE 105: eval_mem_mono_copy_mono_bb113_in(A,B,C,A,B) = 0
     [A>=B,15>=B,C=8] 
* CE 106: eval_mem_mono_copy_mono_bb113_in(V_63,V_count_0,B,C,D) = 1+ eval_mem_mono_copy_mono_bb113_in(V_63,E,F,C,D)
     [V_63>=V_count_0,V_count_0>=16,V_count_0=E+16,F=8,B=8] 

### Cost equations --> "Loop" of eval_mem_mono_copy_mono_bb113_in/5 
* CEs [106] --> Loop 71 
* CEs [105] --> Loop 72 

#### Loops of eval_mem_mono_copy_mono_bb113_in/5 
* Loop 71: eval_mem_mono_copy_mono_bb113_in(V_63,V_count_0,B,C,D)->  eval_mem_mono_copy_mono_bb113_in(V_63,V_count_0',B',C,D)
                  [V_63>=V_count_0,V_count_0>=16,V_count_0=V_count_0'+16,B'=8,B=8] 
* Loop 72: eval_mem_mono_copy_mono_bb113_in(A,B,C,A,B) [A>=B,15>=B,C=8] 

### Ranking functions of CR eval_mem_mono_copy_mono_bb113_in(V_63,V_count_0,B,C,D) 
* RF of phase [71]: [V_count_0-15]

#### Partial ranking functions of CR eval_mem_mono_copy_mono_bb113_in(V_63,V_count_0,B,C,D) 
* Partial RF of phase [71]:
  - RF of loop [71:1]:
    V_count_0-15


### Resulting Chains:eval_mem_mono_copy_mono_bb113_in(V_63,V_count_0,B,C,D) 
* [[71],72]
* [72]


### Merging Chains  eval_mem_mono_copy_mono_bb113_in/5 into  External patterns of execution 
* [[72]] --> 1 
* [[72,[71]]] --> 2 


### Specialization of cost equations eval_mem_mono_copy_mono_bb112_in/2 
* CE 67 is refined into CE [107,108] 
* CE 66 is refined into CE [109,110] 


#### Refined cost equations eval_mem_mono_copy_mono_bb112_in/2 
* CE 107: eval_mem_mono_copy_mono_bb112_in(V_63,B) = 1+ eval_mem_mono_copy_mono_bb113_in(V_63,V_63,C,V_63,V_63):1
     [15>=V_63,C=8,B=9] 
* CE 108: eval_mem_mono_copy_mono_bb112_in(V_63,B) = 1+ eval_mem_mono_copy_mono_bb113_in(V_63,V_63,C,V_63,D):2
     [V_63>=D+16,D>=0,15>=D,C=8,B=9] 
* CE 109: eval_mem_mono_copy_mono_bb112_in(V_63,B) = 2+ eval_mem_mono_copy_mono_bb113_in(V_63,V_63,C,V_63,V_63):1+ eval_mem_mono_copy_mono_bb112_in(V_63,D)
     [15>=V_63,D=9,C=8,B=9] 
* CE 110: eval_mem_mono_copy_mono_bb112_in(V_63,B) = 2+ eval_mem_mono_copy_mono_bb113_in(V_63,V_63,C,V_63,D):2+ eval_mem_mono_copy_mono_bb112_in(V_63,E)
     [V_63>=D+16,D>=0,15>=D,E=9,C=8,B=9] 

### Cost equations --> "Loop" of eval_mem_mono_copy_mono_bb112_in/2 
* CEs [110] --> Loop 73 
* CEs [109] --> Loop 74 
* CEs [108] --> Loop 75 
* CEs [107] --> Loop 76 

#### Loops of eval_mem_mono_copy_mono_bb112_in/2 
* Loop 73: eval_mem_mono_copy_mono_bb112_in(V_63,B)->  eval_mem_mono_copy_mono_bb112_in(V_63,B')
                  [V_63>=16,B'=9,B=9] 
* Loop 74: eval_mem_mono_copy_mono_bb112_in(V_63,B)->  eval_mem_mono_copy_mono_bb112_in(V_63,B')
                  [15>=V_63,B'=9,B=9] 
* Loop 75: eval_mem_mono_copy_mono_bb112_in(V_63,B) [V_63>=16,B=9] 
* Loop 76: eval_mem_mono_copy_mono_bb112_in(V_63,B) [15>=V_63,B=9] 

### Ranking functions of CR eval_mem_mono_copy_mono_bb112_in(V_63,B) 

#### Partial ranking functions of CR eval_mem_mono_copy_mono_bb112_in(V_63,B) 


### Resulting Chains:eval_mem_mono_copy_mono_bb112_in(V_63,B) 
* [[74]]...
* [[74],76]
* [[73]]...
* [[73],75]
* [76]
* [75]


### Merging Chains  eval_mem_mono_copy_mono_bb112_in/2 into  External patterns of execution 
* [[76],[76,[74]]] --> 1 
* [[75],[75,[73]]] --> 2 
* [[[74]]] --> 3 
* [[[73]]] --> 4 


### Specialization of cost equations eval_mem_mono_copy_mono_bb120_in/5 
* CE 90 is refined into CE [111] 
* CE 89 is refined into CE [112] 


#### Refined cost equations eval_mem_mono_copy_mono_bb120_in/5 
* CE 111: eval_mem_mono_copy_mono_bb120_in(A,B,C,A,B) = 0
     [A>=B,15>=B,C=7] 
* CE 112: eval_mem_mono_copy_mono_bb120_in(V_63,V_count5_0,B,C,D) = 1+ eval_mem_mono_copy_mono_bb120_in(V_63,E,F,C,D)
     [V_63>=V_count5_0,V_count5_0>=16,V_count5_0=E+16,F=7,B=7] 

### Cost equations --> "Loop" of eval_mem_mono_copy_mono_bb120_in/5 
* CEs [112] --> Loop 77 
* CEs [111] --> Loop 78 

#### Loops of eval_mem_mono_copy_mono_bb120_in/5 
* Loop 77: eval_mem_mono_copy_mono_bb120_in(V_63,V_count5_0,B,C,D)->  eval_mem_mono_copy_mono_bb120_in(V_63,V_count5_0',B',C,D)
                  [V_63>=V_count5_0,V_count5_0>=16,V_count5_0=V_count5_0'+16,B'=7,B=7] 
* Loop 78: eval_mem_mono_copy_mono_bb120_in(A,B,C,A,B) [A>=B,15>=B,C=7] 

### Ranking functions of CR eval_mem_mono_copy_mono_bb120_in(V_63,V_count5_0,B,C,D) 
* RF of phase [77]: [V_count5_0-15]

#### Partial ranking functions of CR eval_mem_mono_copy_mono_bb120_in(V_63,V_count5_0,B,C,D) 
* Partial RF of phase [77]:
  - RF of loop [77:1]:
    V_count5_0-15


### Resulting Chains:eval_mem_mono_copy_mono_bb120_in(V_63,V_count5_0,B,C,D) 
* [[77],78]
* [78]


### Merging Chains  eval_mem_mono_copy_mono_bb120_in/5 into  External patterns of execution 
* [[78]] --> 1 
* [[78,[77]]] --> 2 


### Specialization of cost equations eval_mem_mono_copy_mono_bb119_in/2 
* CE 69 is refined into CE [113,114] 
* CE 68 is refined into CE [115,116] 


#### Refined cost equations eval_mem_mono_copy_mono_bb119_in/2 
* CE 113: eval_mem_mono_copy_mono_bb119_in(V_63,B) = 1+ eval_mem_mono_copy_mono_bb120_in(V_63,V_63,C,V_63,V_63):1
     [15>=V_63,C=7,B=9] 
* CE 114: eval_mem_mono_copy_mono_bb119_in(V_63,B) = 1+ eval_mem_mono_copy_mono_bb120_in(V_63,V_63,C,V_63,D):2
     [V_63>=D+16,D>=0,15>=D,C=7,B=9] 
* CE 115: eval_mem_mono_copy_mono_bb119_in(V_63,B) = 2+ eval_mem_mono_copy_mono_bb120_in(V_63,V_63,C,V_63,V_63):1+ eval_mem_mono_copy_mono_bb119_in(V_63,D)
     [15>=V_63,D=9,C=7,B=9] 
* CE 116: eval_mem_mono_copy_mono_bb119_in(V_63,B) = 2+ eval_mem_mono_copy_mono_bb120_in(V_63,V_63,C,V_63,D):2+ eval_mem_mono_copy_mono_bb119_in(V_63,E)
     [V_63>=D+16,D>=0,15>=D,E=9,C=7,B=9] 

### Cost equations --> "Loop" of eval_mem_mono_copy_mono_bb119_in/2 
* CEs [116] --> Loop 79 
* CEs [115] --> Loop 80 
* CEs [114] --> Loop 81 
* CEs [113] --> Loop 82 

#### Loops of eval_mem_mono_copy_mono_bb119_in/2 
* Loop 79: eval_mem_mono_copy_mono_bb119_in(V_63,B)->  eval_mem_mono_copy_mono_bb119_in(V_63,B')
                  [V_63>=16,B'=9,B=9] 
* Loop 80: eval_mem_mono_copy_mono_bb119_in(V_63,B)->  eval_mem_mono_copy_mono_bb119_in(V_63,B')
                  [15>=V_63,B'=9,B=9] 
* Loop 81: eval_mem_mono_copy_mono_bb119_in(V_63,B) [V_63>=16,B=9] 
* Loop 82: eval_mem_mono_copy_mono_bb119_in(V_63,B) [15>=V_63,B=9] 

### Ranking functions of CR eval_mem_mono_copy_mono_bb119_in(V_63,B) 

#### Partial ranking functions of CR eval_mem_mono_copy_mono_bb119_in(V_63,B) 


### Resulting Chains:eval_mem_mono_copy_mono_bb119_in(V_63,B) 
* [[80]]...
* [[80],82]
* [[79]]...
* [[79],81]
* [82]
* [81]


### Merging Chains  eval_mem_mono_copy_mono_bb119_in/2 into  External patterns of execution 
* [[82],[82,[80]]] --> 1 
* [[81],[81,[79]]] --> 2 
* [[[80]]] --> 3 
* [[[79]]] --> 4 


### Specialization of cost equations eval_mem_mono_copy_mono_bb127_in/5 
* CE 92 is refined into CE [117] 
* CE 91 is refined into CE [118] 


#### Refined cost equations eval_mem_mono_copy_mono_bb127_in/5 
* CE 117: eval_mem_mono_copy_mono_bb127_in(A,B,C,A,B) = 0
     [A>=B,15>=B,C=6] 
* CE 118: eval_mem_mono_copy_mono_bb127_in(V_63,V_count6_0,B,C,D) = 1+ eval_mem_mono_copy_mono_bb127_in(V_63,E,F,C,D)
     [V_63>=V_count6_0,V_count6_0>=16,V_count6_0=E+16,F=6,B=6] 

### Cost equations --> "Loop" of eval_mem_mono_copy_mono_bb127_in/5 
* CEs [118] --> Loop 83 
* CEs [117] --> Loop 84 

#### Loops of eval_mem_mono_copy_mono_bb127_in/5 
* Loop 83: eval_mem_mono_copy_mono_bb127_in(V_63,V_count6_0,B,C,D)->  eval_mem_mono_copy_mono_bb127_in(V_63,V_count6_0',B',C,D)
                  [V_63>=V_count6_0,V_count6_0>=16,V_count6_0=V_count6_0'+16,B'=6,B=6] 
* Loop 84: eval_mem_mono_copy_mono_bb127_in(A,B,C,A,B) [A>=B,15>=B,C=6] 

### Ranking functions of CR eval_mem_mono_copy_mono_bb127_in(V_63,V_count6_0,B,C,D) 
* RF of phase [83]: [V_count6_0-15]

#### Partial ranking functions of CR eval_mem_mono_copy_mono_bb127_in(V_63,V_count6_0,B,C,D) 
* Partial RF of phase [83]:
  - RF of loop [83:1]:
    V_count6_0-15


### Resulting Chains:eval_mem_mono_copy_mono_bb127_in(V_63,V_count6_0,B,C,D) 
* [[83],84]
* [84]


### Merging Chains  eval_mem_mono_copy_mono_bb127_in/5 into  External patterns of execution 
* [[84]] --> 1 
* [[84,[83]]] --> 2 


### Specialization of cost equations eval_mem_mono_copy_mono_bb126_in/2 
* CE 71 is refined into CE [119,120] 
* CE 70 is refined into CE [121,122] 


#### Refined cost equations eval_mem_mono_copy_mono_bb126_in/2 
* CE 119: eval_mem_mono_copy_mono_bb126_in(V_63,B) = 1+ eval_mem_mono_copy_mono_bb127_in(V_63,V_63,C,V_63,V_63):1
     [15>=V_63,C=6,B=9] 
* CE 120: eval_mem_mono_copy_mono_bb126_in(V_63,B) = 1+ eval_mem_mono_copy_mono_bb127_in(V_63,V_63,C,V_63,D):2
     [V_63>=D+16,D>=0,15>=D,C=6,B=9] 
* CE 121: eval_mem_mono_copy_mono_bb126_in(V_63,B) = 2+ eval_mem_mono_copy_mono_bb127_in(V_63,V_63,C,V_63,V_63):1+ eval_mem_mono_copy_mono_bb126_in(V_63,D)
     [15>=V_63,D=9,C=6,B=9] 
* CE 122: eval_mem_mono_copy_mono_bb126_in(V_63,B) = 2+ eval_mem_mono_copy_mono_bb127_in(V_63,V_63,C,V_63,D):2+ eval_mem_mono_copy_mono_bb126_in(V_63,E)
     [V_63>=D+16,D>=0,15>=D,E=9,C=6,B=9] 

### Cost equations --> "Loop" of eval_mem_mono_copy_mono_bb126_in/2 
* CEs [122] --> Loop 85 
* CEs [121] --> Loop 86 
* CEs [120] --> Loop 87 
* CEs [119] --> Loop 88 

#### Loops of eval_mem_mono_copy_mono_bb126_in/2 
* Loop 85: eval_mem_mono_copy_mono_bb126_in(V_63,B)->  eval_mem_mono_copy_mono_bb126_in(V_63,B')
                  [V_63>=16,B'=9,B=9] 
* Loop 86: eval_mem_mono_copy_mono_bb126_in(V_63,B)->  eval_mem_mono_copy_mono_bb126_in(V_63,B')
                  [15>=V_63,B'=9,B=9] 
* Loop 87: eval_mem_mono_copy_mono_bb126_in(V_63,B) [V_63>=16,B=9] 
* Loop 88: eval_mem_mono_copy_mono_bb126_in(V_63,B) [15>=V_63,B=9] 

### Ranking functions of CR eval_mem_mono_copy_mono_bb126_in(V_63,B) 

#### Partial ranking functions of CR eval_mem_mono_copy_mono_bb126_in(V_63,B) 


### Resulting Chains:eval_mem_mono_copy_mono_bb126_in(V_63,B) 
* [[86]]...
* [[86],88]
* [[85]]...
* [[85],87]
* [88]
* [87]


### Merging Chains  eval_mem_mono_copy_mono_bb126_in/2 into  External patterns of execution 
* [[88],[88,[86]]] --> 1 
* [[87],[87,[85]]] --> 2 
* [[[86]]] --> 3 
* [[[85]]] --> 4 


### Specialization of cost equations eval_mem_mono_copy_mono_bb148_in/17 
* CE 94 is refined into CE [123] 
* CE 95 is refined into CE [124] 
* CE 93 is refined into CE [125] 


#### Refined cost equations eval_mem_mono_copy_mono_bb148_in/17 
* CE 123: eval_mem_mono_copy_mono_bb148_in(A,B,C,D,E,F,G,H,A,B,C,D,E,F,G,I,J) = 0
     [E>=G,15>=G,H=5] 
* CE 124: eval_mem_mono_copy_mono_bb148_in(A,B,C,D,E,F,G,H,A,B,C,D,E,F,G,I,J) = 0
     [E>=G,15>=G,H=3] 
* CE 125: eval_mem_mono_copy_mono_bb148_in(V_zero,V__17,V__15,V__2,V_63,V__21,V_count8_0,B,C,D,E,F,G,H,I,J,K) = 1+ eval_mem_mono_copy_mono_bb148_in(V_zero,V__17,V__15,V__2,V_63,V__21,L,B,C,D,E,F,G,H,I,J,K)
     [V_63>=V_count8_0,B>=3,V_count8_0>=16,5>=B,V_count8_0=L+16] 

### Cost equations --> "Loop" of eval_mem_mono_copy_mono_bb148_in/17 
* CEs [125] --> Loop 89 
* CEs [123] --> Loop 90 
* CEs [124] --> Loop 91 

#### Loops of eval_mem_mono_copy_mono_bb148_in/17 
* Loop 89: eval_mem_mono_copy_mono_bb148_in(V_zero,V__17,V__15,V__2,V_63,V__21,V_count8_0,B,C,D,E,F,G,H,I,J,K)->  eval_mem_mono_copy_mono_bb148_in(V_zero,V__17,V__15,V__2,V_63,V__21,V_count8_0',B,C,D,E,F,G,H,I,J,K)
                  [V_63>=V_count8_0,B>=3,V_count8_0>=16,5>=B,V_count8_0=V_count8_0'+16] 
* Loop 90: eval_mem_mono_copy_mono_bb148_in(A,B,C,D,E,F,G,H,A,B,C,D,E,F,G,I,J) [E>=G,15>=G,H=5] 
* Loop 91: eval_mem_mono_copy_mono_bb148_in(A,B,C,D,E,F,G,H,A,B,C,D,E,F,G,I,J) [E>=G,15>=G,H=3] 

### Ranking functions of CR eval_mem_mono_copy_mono_bb148_in(V_zero,V__17,V__15,V__2,V_63,V__21,V_count8_0,B,C,D,E,F,G,H,I,J,K) 
* RF of phase [89]: [V_count8_0-15]

#### Partial ranking functions of CR eval_mem_mono_copy_mono_bb148_in(V_zero,V__17,V__15,V__2,V_63,V__21,V_count8_0,B,C,D,E,F,G,H,I,J,K) 
* Partial RF of phase [89]:
  - RF of loop [89:1]:
    V_count8_0-15


### Resulting Chains:eval_mem_mono_copy_mono_bb148_in(V_zero,V__17,V__15,V__2,V_63,V__21,V_count8_0,B,C,D,E,F,G,H,I,J,K) 
* [[89],91]
* [[89],90]
* [91]
* [90]


### Merging Chains  eval_mem_mono_copy_mono_bb148_in/17 into  External patterns of execution 
* [[91]] --> 1 
* [[91,[89]]] --> 2 
* [[90]] --> 3 
* [[90,[89]]] --> 4 


### Specialization of cost equations eval_mem_mono_copy_mono_bb167_in/17 
* CE 97 is refined into CE [126] 
* CE 98 is refined into CE [127] 
* CE 96 is refined into CE [128] 


#### Refined cost equations eval_mem_mono_copy_mono_bb167_in/17 
* CE 126: eval_mem_mono_copy_mono_bb167_in(A,B,C,D,E,F,G,H,A,B,C,D,E,F,G,I,J) = 0
     [E>=G,15>=G,H=4] 
* CE 127: eval_mem_mono_copy_mono_bb167_in(A,B,C,D,E,F,G,H,A,B,C,D,E,F,I,G,J) = 0
     [E>=G,15>=G,H=3] 
* CE 128: eval_mem_mono_copy_mono_bb167_in(V_zero,V__17,V__15,V__2,V_63,V__21,V_count8_1,B,C,D,E,F,G,H,I,J,K) = 1+ eval_mem_mono_copy_mono_bb167_in(V_zero,V__17,V__15,V__2,V_63,V__21,L,B,C,D,E,F,G,H,I,J,K)
     [V_63>=V_count8_1,B>=3,V_count8_1>=16,4>=B,V_count8_1=L+16] 

### Cost equations --> "Loop" of eval_mem_mono_copy_mono_bb167_in/17 
* CEs [128] --> Loop 92 
* CEs [126] --> Loop 93 
* CEs [127] --> Loop 94 

#### Loops of eval_mem_mono_copy_mono_bb167_in/17 
* Loop 92: eval_mem_mono_copy_mono_bb167_in(V_zero,V__17,V__15,V__2,V_63,V__21,V_count8_1,B,C,D,E,F,G,H,I,J,K)->  eval_mem_mono_copy_mono_bb167_in(V_zero,V__17,V__15,V__2,V_63,V__21,V_count8_1',B,C,D,E,F,G,H,I,J,K)
                  [V_63>=V_count8_1,B>=3,V_count8_1>=16,4>=B,V_count8_1=V_count8_1'+16] 
* Loop 93: eval_mem_mono_copy_mono_bb167_in(A,B,C,D,E,F,G,H,A,B,C,D,E,F,G,I,J) [E>=G,15>=G,H=4] 
* Loop 94: eval_mem_mono_copy_mono_bb167_in(A,B,C,D,E,F,G,H,A,B,C,D,E,F,I,G,J) [E>=G,15>=G,H=3] 

### Ranking functions of CR eval_mem_mono_copy_mono_bb167_in(V_zero,V__17,V__15,V__2,V_63,V__21,V_count8_1,B,C,D,E,F,G,H,I,J,K) 
* RF of phase [92]: [V_count8_1-15]

#### Partial ranking functions of CR eval_mem_mono_copy_mono_bb167_in(V_zero,V__17,V__15,V__2,V_63,V__21,V_count8_1,B,C,D,E,F,G,H,I,J,K) 
* Partial RF of phase [92]:
  - RF of loop [92:1]:
    V_count8_1-15


### Resulting Chains:eval_mem_mono_copy_mono_bb167_in(V_zero,V__17,V__15,V__2,V_63,V__21,V_count8_1,B,C,D,E,F,G,H,I,J,K) 
* [[92],94]
* [[92],93]
* [94]
* [93]


### Merging Chains  eval_mem_mono_copy_mono_bb167_in/17 into  External patterns of execution 
* [[94]] --> 1 
* [[94,[92]]] --> 2 
* [[93]] --> 3 
* [[93,[92]]] --> 4 


### Specialization of cost equations eval_mem_mono_copy_mono_bb186_in/17 
* CE 101 is refined into CE [129] 
* CE 100 is refined into CE [130] 
* CE 99 is refined into CE [131] 


#### Refined cost equations eval_mem_mono_copy_mono_bb186_in/17 
* CE 129: eval_mem_mono_copy_mono_bb186_in(A,B,C,D,E,F,G,H,A,B,C,D,E,F,I,J,G) = 0
     [E>=G,15>=G,H=3] 
* CE 130: eval_mem_mono_copy_mono_bb186_in(A,B,C,D,E,F,G,H,A,B,C,D,E,F,G,I,J) = 0
     [E>=G,15>=G,H=2] 
* CE 131: eval_mem_mono_copy_mono_bb186_in(V_zero,V__17,V__15,V__2,V_63,V__21,V_count8_2,B,C,D,E,F,G,H,I,J,K) = 1+ eval_mem_mono_copy_mono_bb186_in(V_zero,V__17,V__15,V__2,V_63,V__21,L,B,C,D,E,F,G,H,I,J,K)
     [V_63>=V_count8_2,B>=2,V_count8_2>=16,3>=B,V_count8_2=L+16] 

### Cost equations --> "Loop" of eval_mem_mono_copy_mono_bb186_in/17 
* CEs [131] --> Loop 95 
* CEs [129] --> Loop 96 
* CEs [130] --> Loop 97 

#### Loops of eval_mem_mono_copy_mono_bb186_in/17 
* Loop 95: eval_mem_mono_copy_mono_bb186_in(V_zero,V__17,V__15,V__2,V_63,V__21,V_count8_2,B,C,D,E,F,G,H,I,J,K)->  eval_mem_mono_copy_mono_bb186_in(V_zero,V__17,V__15,V__2,V_63,V__21,V_count8_2',B,C,D,E,F,G,H,I,J,K)
                  [V_63>=V_count8_2,B>=2,V_count8_2>=16,3>=B,V_count8_2=V_count8_2'+16] 
* Loop 96: eval_mem_mono_copy_mono_bb186_in(A,B,C,D,E,F,G,H,A,B,C,D,E,F,I,J,G) [E>=G,15>=G,H=3] 
* Loop 97: eval_mem_mono_copy_mono_bb186_in(A,B,C,D,E,F,G,H,A,B,C,D,E,F,G,I,J) [E>=G,15>=G,H=2] 

### Ranking functions of CR eval_mem_mono_copy_mono_bb186_in(V_zero,V__17,V__15,V__2,V_63,V__21,V_count8_2,B,C,D,E,F,G,H,I,J,K) 
* RF of phase [95]: [V_count8_2-15]

#### Partial ranking functions of CR eval_mem_mono_copy_mono_bb186_in(V_zero,V__17,V__15,V__2,V_63,V__21,V_count8_2,B,C,D,E,F,G,H,I,J,K) 
* Partial RF of phase [95]:
  - RF of loop [95:1]:
    V_count8_2-15


### Resulting Chains:eval_mem_mono_copy_mono_bb186_in(V_zero,V__17,V__15,V__2,V_63,V__21,V_count8_2,B,C,D,E,F,G,H,I,J,K) 
* [[95],97]
* [[95],96]
* [97]
* [96]


### Merging Chains  eval_mem_mono_copy_mono_bb186_in/17 into  External patterns of execution 
* [[97]] --> 1 
* [[97,[95]]] --> 2 
* [[96]] --> 3 
* [[96,[95]]] --> 4 


### Specialization of cost equations eval_mem_mono_copy_mono_bb134_in/11 
* CE 84 is refined into CE [132] 
* CE 72 is refined into CE [133,134] 
* CE 74 is refined into CE [135,136] 
* CE 76 is refined into CE [137,138] 
* CE 81 is refined into CE [139,140] 
* CE 82 is refined into CE [141,142] 
* CE 83 is refined into CE [143,144] 
* CE 73 is refined into CE [145,146] 
* CE 75 is refined into CE [147,148] 
* CE 77 is refined into CE [149,150] 
* CE 78 is refined into CE [151,152] 
* CE 79 is refined into CE [153,154] 
* CE 80 is refined into CE [155,156] 


#### Refined cost equations eval_mem_mono_copy_mono_bb134_in/11 
* CE 132: eval_mem_mono_copy_mono_bb134_in(A,B,C,D,E,F,G,A,B,C,D) = 0
     [G=10] 
* CE 133: eval_mem_mono_copy_mono_bb134_in(V_zero,V__17,V__15,V__2,V_63,V__21,B,C,D,E,F) = 1+ eval_mem_mono_copy_mono_bb148_in(V_zero,V__17,V__15,V__2,V_63,V__21,V_63,G,V_zero,V__17,V__15,V__2,V_63,V__21,V_63,H,I):3
     [15>=V_63,G=5,B=9] 
* CE 134: eval_mem_mono_copy_mono_bb134_in(V_zero,V__17,V__15,V__2,V_63,V__21,B,C,D,E,F) = 1+ eval_mem_mono_copy_mono_bb148_in(V_zero,V__17,V__15,V__2,V_63,V__21,V_63,G,V_zero,V__17,V__15,V__2,V_63,V__21,H,I,J):4
     [V_63>=H+16,H>=0,15>=H,G=5,B=9] 
* CE 135: eval_mem_mono_copy_mono_bb134_in(V_zero,V__17,V__15,V__2,V_63,V__21,B,C,D,E,F) = 1+ eval_mem_mono_copy_mono_bb167_in(V_zero,V__17,V__15,V__2,V_63,V__21,V_63,G,V_zero,V__17,V__15,V__2,V_63,V__21,V_63,H,I):3
     [15>=V_63,G=4,B=9] 
* CE 136: eval_mem_mono_copy_mono_bb134_in(V_zero,V__17,V__15,V__2,V_63,V__21,B,C,D,E,F) = 1+ eval_mem_mono_copy_mono_bb167_in(V_zero,V__17,V__15,V__2,V_63,V__21,V_63,G,V_zero,V__17,V__15,V__2,V_63,V__21,H,I,J):4
     [V_63>=H+16,H>=0,15>=H,G=4,B=9] 
* CE 137: eval_mem_mono_copy_mono_bb134_in(V_zero,V__17,V__15,V__2,V_63,V__21,B,C,D,E,F) = 1+ eval_mem_mono_copy_mono_bb186_in(V_zero,V__17,V__15,V__2,V_63,V__21,V_63,G,V_zero,V__17,V__15,V__2,V_63,V__21,V_63,H,I):1
     [15>=V_63,G=2,B=9] 
* CE 138: eval_mem_mono_copy_mono_bb134_in(V_zero,V__17,V__15,V__2,V_63,V__21,B,C,D,E,F) = 1+ eval_mem_mono_copy_mono_bb186_in(V_zero,V__17,V__15,V__2,V_63,V__21,V_63,G,V_zero,V__17,V__15,V__2,V_63,V__21,H,I,J):2
     [V_63>=H+16,H>=0,15>=H,G=2,B=9] 
* CE 139: eval_mem_mono_copy_mono_bb134_in(V_zero,V__17,V__15,V__2,V_63,V__21,B,C,D,E,F) = 1+ eval_mem_mono_copy_mono_bb148_in(V_zero,V__17,V__15,V__2,V_63,V__21,V_63,G,V_zero,V__17,V__15,V__2,V_63,V__21,V_63,H,I):1
     [15>=V_63,G=3,B=9] 
* CE 140: eval_mem_mono_copy_mono_bb134_in(V_zero,V__17,V__15,V__2,V_63,V__21,B,C,D,E,F) = 1+ eval_mem_mono_copy_mono_bb148_in(V_zero,V__17,V__15,V__2,V_63,V__21,V_63,G,V_zero,V__17,V__15,V__2,V_63,V__21,H,I,J):2
     [V_63>=H+16,H>=0,15>=H,G=3,B=9] 
* CE 141: eval_mem_mono_copy_mono_bb134_in(V_zero,V__17,V__15,V__2,V_63,V__21,B,C,D,E,F) = 1+ eval_mem_mono_copy_mono_bb167_in(V_zero,V__17,V__15,V__2,V_63,V__21,V_63,G,V_zero,V__17,V__15,V__2,V_63,V__21,H,V_63,I):1
     [15>=V_63,G=3,B=9] 
* CE 142: eval_mem_mono_copy_mono_bb134_in(V_zero,V__17,V__15,V__2,V_63,V__21,B,C,D,E,F) = 1+ eval_mem_mono_copy_mono_bb167_in(V_zero,V__17,V__15,V__2,V_63,V__21,V_63,G,V_zero,V__17,V__15,V__2,V_63,V__21,H,I,J):2
     [V_63>=I+16,I>=0,15>=I,G=3,B=9] 
* CE 143: eval_mem_mono_copy_mono_bb134_in(V_zero,V__17,V__15,V__2,V_63,V__21,B,C,D,E,F) = 1+ eval_mem_mono_copy_mono_bb186_in(V_zero,V__17,V__15,V__2,V_63,V__21,V_63,G,V_zero,V__17,V__15,V__2,V_63,V__21,H,I,V_63):3
     [15>=V_63,G=3,B=9] 
* CE 144: eval_mem_mono_copy_mono_bb134_in(V_zero,V__17,V__15,V__2,V_63,V__21,B,C,D,E,F) = 1+ eval_mem_mono_copy_mono_bb186_in(V_zero,V__17,V__15,V__2,V_63,V__21,V_63,G,V_zero,V__17,V__15,V__2,V_63,V__21,H,I,J):4
     [V_63>=J+16,J>=0,15>=J,G=3,B=9] 
* CE 145: eval_mem_mono_copy_mono_bb134_in(V_zero,V__17,V__15,V__2,V_63,V__21,B,C,D,E,F) = 2+ eval_mem_mono_copy_mono_bb148_in(V_zero,V__17,V__15,V__2,V_63,V__21,V_63,G,V_zero,V__17,V__15,V__2,V_63,V__21,V_63,H,I):3+ eval_mem_mono_copy_mono_bb134_in(V_zero,V__17,V__15,V__2,V_63,J,B,C,D,E,F)
     [15>=V_63,V__21=J+1,G=5] 
* CE 146: eval_mem_mono_copy_mono_bb134_in(V_zero,V__17,V__15,V__2,V_63,V__21,B,C,D,E,F) = 2+ eval_mem_mono_copy_mono_bb148_in(V_zero,V__17,V__15,V__2,V_63,V__21,V_63,G,V_zero,V__17,V__15,V__2,V_63,V__21,H,I,J):4+ eval_mem_mono_copy_mono_bb134_in(V_zero,V__17,V__15,V__2,V_63,K,B,C,D,E,F)
     [V_63>=H+16,H>=0,15>=H,V__21=K+1,G=5] 
* CE 147: eval_mem_mono_copy_mono_bb134_in(V_zero,V__17,V__15,V__2,V_63,V__21,B,C,D,E,F) = 2+ eval_mem_mono_copy_mono_bb167_in(V_zero,V__17,V__15,V__2,V_63,V__21,V_63,G,V_zero,V__17,V__15,V__2,V_63,V__21,V_63,H,I):3+ eval_mem_mono_copy_mono_bb134_in(V_zero,V__17,V__15,V__2,V_63,J,B,C,D,E,F)
     [15>=V_63,V__21=J+1,G=4] 
* CE 148: eval_mem_mono_copy_mono_bb134_in(V_zero,V__17,V__15,V__2,V_63,V__21,B,C,D,E,F) = 2+ eval_mem_mono_copy_mono_bb167_in(V_zero,V__17,V__15,V__2,V_63,V__21,V_63,G,V_zero,V__17,V__15,V__2,V_63,V__21,H,I,J):4+ eval_mem_mono_copy_mono_bb134_in(V_zero,V__17,V__15,V__2,V_63,K,B,C,D,E,F)
     [V_63>=H+16,H>=0,15>=H,V__21=K+1,G=4] 
* CE 149: eval_mem_mono_copy_mono_bb134_in(V_zero,V__17,V__15,V__2,V_63,V__21,B,C,D,E,F) = 2+ eval_mem_mono_copy_mono_bb186_in(V_zero,V__17,V__15,V__2,V_63,V__21,V_63,G,V_zero,V__17,V__15,V__2,V_63,V__21,V_63,H,I):1+ eval_mem_mono_copy_mono_bb134_in(V_zero,V__17,V__15,V__2,V_63,J,B,C,D,E,F)
     [15>=V_63,V__21=J+1,G=2] 
* CE 150: eval_mem_mono_copy_mono_bb134_in(V_zero,V__17,V__15,V__2,V_63,V__21,B,C,D,E,F) = 2+ eval_mem_mono_copy_mono_bb186_in(V_zero,V__17,V__15,V__2,V_63,V__21,V_63,G,V_zero,V__17,V__15,V__2,V_63,V__21,H,I,J):2+ eval_mem_mono_copy_mono_bb134_in(V_zero,V__17,V__15,V__2,V_63,K,B,C,D,E,F)
     [V_63>=H+16,H>=0,15>=H,V__21=K+1,G=2] 
* CE 151: eval_mem_mono_copy_mono_bb134_in(V_zero,V__17,V__15,V__2,V_63,V__21,B,C,D,E,F) = 2+ eval_mem_mono_copy_mono_bb148_in(V_zero,V__17,V__15,V__2,V_63,V__21,V_63,G,V_zero,V__17,V__15,V__2,V_63,V__21,V_63,H,I):1+ eval_mem_mono_copy_mono_bb134_in(V_zero,V__17,V__15,V__2,V_63,J,B,C,D,E,F)
     [15>=V_63,V__21=J+1,G=3] 
* CE 152: eval_mem_mono_copy_mono_bb134_in(V_zero,V__17,V__15,V__2,V_63,V__21,B,C,D,E,F) = 2+ eval_mem_mono_copy_mono_bb148_in(V_zero,V__17,V__15,V__2,V_63,V__21,V_63,G,V_zero,V__17,V__15,V__2,V_63,V__21,H,I,J):2+ eval_mem_mono_copy_mono_bb134_in(V_zero,V__17,V__15,V__2,V_63,K,B,C,D,E,F)
     [V_63>=H+16,H>=0,15>=H,V__21=K+1,G=3] 
* CE 153: eval_mem_mono_copy_mono_bb134_in(V_zero,V__17,V__15,V__2,V_63,V__21,B,C,D,E,F) = 2+ eval_mem_mono_copy_mono_bb167_in(V_zero,V__17,V__15,V__2,V_63,V__21,V_63,G,V_zero,V__17,V__15,V__2,V_63,V__21,H,V_63,I):1+ eval_mem_mono_copy_mono_bb134_in(V_zero,V__17,V__15,V__2,V_63,J,B,C,D,E,F)
     [15>=V_63,V__21=J+1,G=3] 
* CE 154: eval_mem_mono_copy_mono_bb134_in(V_zero,V__17,V__15,V__2,V_63,V__21,B,C,D,E,F) = 2+ eval_mem_mono_copy_mono_bb167_in(V_zero,V__17,V__15,V__2,V_63,V__21,V_63,G,V_zero,V__17,V__15,V__2,V_63,V__21,H,I,J):2+ eval_mem_mono_copy_mono_bb134_in(V_zero,V__17,V__15,V__2,V_63,K,B,C,D,E,F)
     [V_63>=I+16,I>=0,15>=I,V__21=K+1,G=3] 
* CE 155: eval_mem_mono_copy_mono_bb134_in(V_zero,V__17,V__15,V__2,V_63,V__21,B,C,D,E,F) = 2+ eval_mem_mono_copy_mono_bb186_in(V_zero,V__17,V__15,V__2,V_63,V__21,V_63,G,V_zero,V__17,V__15,V__2,V_63,V__21,H,I,V_63):3+ eval_mem_mono_copy_mono_bb134_in(V_zero,V__17,V__15,V__2,V_63,J,B,C,D,E,F)
     [15>=V_63,V__21=J+1,G=3] 
* CE 156: eval_mem_mono_copy_mono_bb134_in(V_zero,V__17,V__15,V__2,V_63,V__21,B,C,D,E,F) = 2+ eval_mem_mono_copy_mono_bb186_in(V_zero,V__17,V__15,V__2,V_63,V__21,V_63,G,V_zero,V__17,V__15,V__2,V_63,V__21,H,I,J):4+ eval_mem_mono_copy_mono_bb134_in(V_zero,V__17,V__15,V__2,V_63,K,B,C,D,E,F)
     [V_63>=J+16,J>=0,15>=J,V__21=K+1,G=3] 

### Cost equations --> "Loop" of eval_mem_mono_copy_mono_bb134_in/11 
* CEs [146,148,150,152,154,156] --> Loop 98 
* CEs [145,147,149,151,153,155] --> Loop 99 
* CEs [132] --> Loop 100 
* CEs [134,136,138,140,142,144] --> Loop 101 
* CEs [133,135,137,139,141,143] --> Loop 102 

#### Loops of eval_mem_mono_copy_mono_bb134_in/11 
* Loop 98: eval_mem_mono_copy_mono_bb134_in(V_zero,V__17,V__15,V__2,V_63,V__21,B,C,D,E,F)->  eval_mem_mono_copy_mono_bb134_in(V_zero,V__17,V__15,V__2,V_63,V__21',B,C,D,E,F)
                  [V_63>=16,V__21=V__21'+1] 
* Loop 99: eval_mem_mono_copy_mono_bb134_in(V_zero,V__17,V__15,V__2,V_63,V__21,B,C,D,E,F)->  eval_mem_mono_copy_mono_bb134_in(V_zero,V__17,V__15,V__2,V_63,V__21',B,C,D,E,F)
                  [15>=V_63,V__21=V__21'+1] 
* Loop 100: eval_mem_mono_copy_mono_bb134_in(A,B,C,D,E,F,G,A,B,C,D) [G=10] 
* Loop 101: eval_mem_mono_copy_mono_bb134_in(V_zero,V__17,V__15,V__2,V_63,V__21,B,C,D,E,F) [V_63>=16,B=9] 
* Loop 102: eval_mem_mono_copy_mono_bb134_in(V_zero,V__17,V__15,V__2,V_63,V__21,B,C,D,E,F) [15>=V_63,B=9] 

### Ranking functions of CR eval_mem_mono_copy_mono_bb134_in(V_zero,V__17,V__15,V__2,V_63,V__21,B,C,D,E,F) 

#### Partial ranking functions of CR eval_mem_mono_copy_mono_bb134_in(V_zero,V__17,V__15,V__2,V_63,V__21,B,C,D,E,F) 


### Resulting Chains:eval_mem_mono_copy_mono_bb134_in(V_zero,V__17,V__15,V__2,V_63,V__21,B,C,D,E,F) 
* [[99]]...
* [[99],102]
* [[99],100]
* [[98]]...
* [[98],101]
* [[98],100]
* [102]
* [101]
* [100]


### Merging Chains  eval_mem_mono_copy_mono_bb134_in/11 into  External patterns of execution 
* [[102],[102,[99]]] --> 1 
* [[101],[101,[98]]] --> 2 
* [[100],[100,[98]],[100,[99]]] --> 3 
* [[[99]]] --> 4 
* [[[98]]] --> 5 


### Specialization of cost equations eval_mem_mono_copy_mono_bb15_in/2 
* CE 34 is refined into CE [157] 
* CE 33 is refined into CE [158] 
* CE 32 is refined into CE [159] 


#### Refined cost equations eval_mem_mono_copy_mono_bb15_in/2 
* CE 157: eval_mem_mono_copy_mono_bb15_in(V__3,B) = 1+ eval_mem_mono_copy_mono_bb15_in(C,D)
     [V__3>=2,V__3=C+1,D=9,B=9] 
* CE 158: eval_mem_mono_copy_mono_bb15_in(V__3,B) = 1+ eval_mem_mono_copy_mono_bb15_in(C,D)
     [0>=V__3,V__3=C+1,D=9,B=9] 
* CE 159: eval_mem_mono_copy_mono_bb15_in(V__3,B) = 0
     [B=9,V__3=1] 

### Cost equations --> "Loop" of eval_mem_mono_copy_mono_bb15_in/2 
* CEs [159] --> Loop 103 
* CEs [157] --> Loop 104 
* CEs [158] --> Loop 105 

#### Loops of eval_mem_mono_copy_mono_bb15_in/2 
* Loop 103: eval_mem_mono_copy_mono_bb15_in(V__3,B) [B=9,V__3=1] 
* Loop 104: eval_mem_mono_copy_mono_bb15_in(V__3,B)->  eval_mem_mono_copy_mono_bb15_in(V__3',B')
                  [V__3>=2,V__3=V__3'+1,B'=9,B=9] 
* Loop 105: eval_mem_mono_copy_mono_bb15_in(V__3,B)->  eval_mem_mono_copy_mono_bb15_in(V__3',B')
                  [0>=V__3,V__3=V__3'+1,B'=9,B=9] 

### Ranking functions of CR eval_mem_mono_copy_mono_bb15_in(V__3,B) 
* RF of phase [104]: [V__3-1]

#### Partial ranking functions of CR eval_mem_mono_copy_mono_bb15_in(V__3,B) 
* Partial RF of phase [104]:
  - RF of loop [104:1]:
    V__3-1


### Resulting Chains:eval_mem_mono_copy_mono_bb15_in(V__3,B) 
* [[105]]...
* [[104],103]
* [103]


### Merging Chains  eval_mem_mono_copy_mono_bb15_in/2 into  External patterns of execution 
* [[103]] --> 1 
* [[103,[104]]] --> 2 
* [[[105]]] --> 3 


### Specialization of cost equations eval_mem_mono_copy_mono_bb18_in/2 
* CE 38 is refined into CE [160] 
* CE 37 is refined into CE [161] 
* CE 36 is refined into CE [162] 


#### Refined cost equations eval_mem_mono_copy_mono_bb18_in/2 
* CE 160: eval_mem_mono_copy_mono_bb18_in(V__4,B) = 1+ eval_mem_mono_copy_mono_bb18_in(C,D)
     [V__4>=2,V__4=C+1,D=9,B=9] 
* CE 161: eval_mem_mono_copy_mono_bb18_in(V__4,B) = 1+ eval_mem_mono_copy_mono_bb18_in(C,D)
     [0>=V__4,V__4=C+1,D=9,B=9] 
* CE 162: eval_mem_mono_copy_mono_bb18_in(V__4,B) = 0
     [B=9,V__4=1] 

### Cost equations --> "Loop" of eval_mem_mono_copy_mono_bb18_in/2 
* CEs [162] --> Loop 106 
* CEs [160] --> Loop 107 
* CEs [161] --> Loop 108 

#### Loops of eval_mem_mono_copy_mono_bb18_in/2 
* Loop 106: eval_mem_mono_copy_mono_bb18_in(V__4,B) [B=9,V__4=1] 
* Loop 107: eval_mem_mono_copy_mono_bb18_in(V__4,B)->  eval_mem_mono_copy_mono_bb18_in(V__4',B')
                  [V__4>=2,V__4=V__4'+1,B'=9,B=9] 
* Loop 108: eval_mem_mono_copy_mono_bb18_in(V__4,B)->  eval_mem_mono_copy_mono_bb18_in(V__4',B')
                  [0>=V__4,V__4=V__4'+1,B'=9,B=9] 

### Ranking functions of CR eval_mem_mono_copy_mono_bb18_in(V__4,B) 
* RF of phase [107]: [V__4-1]

#### Partial ranking functions of CR eval_mem_mono_copy_mono_bb18_in(V__4,B) 
* Partial RF of phase [107]:
  - RF of loop [107:1]:
    V__4-1


### Resulting Chains:eval_mem_mono_copy_mono_bb18_in(V__4,B) 
* [[108]]...
* [[107],106]
* [106]


### Merging Chains  eval_mem_mono_copy_mono_bb18_in/2 into  External patterns of execution 
* [[106]] --> 1 
* [[106,[107]]] --> 2 
* [[[108]]] --> 3 


### Specialization of cost equations eval_mem_mono_copy_mono_bb21_in/2 
* CE 41 is refined into CE [163] 
* CE 40 is refined into CE [164] 
* CE 39 is refined into CE [165] 


#### Refined cost equations eval_mem_mono_copy_mono_bb21_in/2 
* CE 163: eval_mem_mono_copy_mono_bb21_in(V__5,B) = 1+ eval_mem_mono_copy_mono_bb21_in(C,D)
     [V__5>=2,V__5=C+1,D=9,B=9] 
* CE 164: eval_mem_mono_copy_mono_bb21_in(V__5,B) = 1+ eval_mem_mono_copy_mono_bb21_in(C,D)
     [0>=V__5,V__5=C+1,D=9,B=9] 
* CE 165: eval_mem_mono_copy_mono_bb21_in(V__5,B) = 0
     [B=9,V__5=1] 

### Cost equations --> "Loop" of eval_mem_mono_copy_mono_bb21_in/2 
* CEs [165] --> Loop 109 
* CEs [163] --> Loop 110 
* CEs [164] --> Loop 111 

#### Loops of eval_mem_mono_copy_mono_bb21_in/2 
* Loop 109: eval_mem_mono_copy_mono_bb21_in(V__5,B) [B=9,V__5=1] 
* Loop 110: eval_mem_mono_copy_mono_bb21_in(V__5,B)->  eval_mem_mono_copy_mono_bb21_in(V__5',B')
                  [V__5>=2,V__5=V__5'+1,B'=9,B=9] 
* Loop 111: eval_mem_mono_copy_mono_bb21_in(V__5,B)->  eval_mem_mono_copy_mono_bb21_in(V__5',B')
                  [0>=V__5,V__5=V__5'+1,B'=9,B=9] 

### Ranking functions of CR eval_mem_mono_copy_mono_bb21_in(V__5,B) 
* RF of phase [110]: [V__5-1]

#### Partial ranking functions of CR eval_mem_mono_copy_mono_bb21_in(V__5,B) 
* Partial RF of phase [110]:
  - RF of loop [110:1]:
    V__5-1


### Resulting Chains:eval_mem_mono_copy_mono_bb21_in(V__5,B) 
* [[111]]...
* [[110],109]
* [109]


### Merging Chains  eval_mem_mono_copy_mono_bb21_in/2 into  External patterns of execution 
* [[109]] --> 1 
* [[109,[110]]] --> 2 
* [[[111]]] --> 3 


### Specialization of cost equations eval_mem_mono_copy_mono_bb25_in/1 
* CE 43 is refined into CE [166] 
* CE 42 is refined into CE [167] 


#### Refined cost equations eval_mem_mono_copy_mono_bb25_in/1 
* CE 166: eval_mem_mono_copy_mono_bb25_in(B) = 0
     [B=9] 
* CE 167: eval_mem_mono_copy_mono_bb25_in(B) = 1+ eval_mem_mono_copy_mono_bb25_in(C)
     [C=9,B=9] 

### Cost equations --> "Loop" of eval_mem_mono_copy_mono_bb25_in/1 
* CEs [167] --> Loop 112 
* CEs [166] --> Loop 113 

#### Loops of eval_mem_mono_copy_mono_bb25_in/1 
* Loop 112: eval_mem_mono_copy_mono_bb25_in(B)->  eval_mem_mono_copy_mono_bb25_in(B')
                  [B'=9,B=9] 
* Loop 113: eval_mem_mono_copy_mono_bb25_in(B) [B=9] 

### Ranking functions of CR eval_mem_mono_copy_mono_bb25_in(B) 

#### Partial ranking functions of CR eval_mem_mono_copy_mono_bb25_in(B) 


### Resulting Chains:eval_mem_mono_copy_mono_bb25_in(B) 
* [[112]]...
* [[112],113]
* [113]


### Merging Chains  eval_mem_mono_copy_mono_bb25_in/1 into  External patterns of execution 
* [[113],[113,[112]]] --> 1 
* [[[112]]] --> 2 


### Specialization of cost equations eval_mem_mono_copy_mono_bb31_in/1 
* CE 45 is refined into CE [168] 
* CE 44 is refined into CE [169] 


#### Refined cost equations eval_mem_mono_copy_mono_bb31_in/1 
* CE 168: eval_mem_mono_copy_mono_bb31_in(B) = 0
     [B=9] 
* CE 169: eval_mem_mono_copy_mono_bb31_in(B) = 1+ eval_mem_mono_copy_mono_bb31_in(C)
     [C=9,B=9] 

### Cost equations --> "Loop" of eval_mem_mono_copy_mono_bb31_in/1 
* CEs [169] --> Loop 114 
* CEs [168] --> Loop 115 

#### Loops of eval_mem_mono_copy_mono_bb31_in/1 
* Loop 114: eval_mem_mono_copy_mono_bb31_in(B)->  eval_mem_mono_copy_mono_bb31_in(B')
                  [B'=9,B=9] 
* Loop 115: eval_mem_mono_copy_mono_bb31_in(B) [B=9] 

### Ranking functions of CR eval_mem_mono_copy_mono_bb31_in(B) 

#### Partial ranking functions of CR eval_mem_mono_copy_mono_bb31_in(B) 


### Resulting Chains:eval_mem_mono_copy_mono_bb31_in(B) 
* [[114]]...
* [[114],115]
* [115]


### Merging Chains  eval_mem_mono_copy_mono_bb31_in/1 into  External patterns of execution 
* [[115],[115,[114]]] --> 1 
* [[[114]]] --> 2 


### Specialization of cost equations eval_mem_mono_copy_mono_bb37_in/1 
* CE 47 is refined into CE [170] 
* CE 46 is refined into CE [171] 


#### Refined cost equations eval_mem_mono_copy_mono_bb37_in/1 
* CE 170: eval_mem_mono_copy_mono_bb37_in(B) = 0
     [B=9] 
* CE 171: eval_mem_mono_copy_mono_bb37_in(B) = 1+ eval_mem_mono_copy_mono_bb37_in(C)
     [C=9,B=9] 

### Cost equations --> "Loop" of eval_mem_mono_copy_mono_bb37_in/1 
* CEs [171] --> Loop 116 
* CEs [170] --> Loop 117 

#### Loops of eval_mem_mono_copy_mono_bb37_in/1 
* Loop 116: eval_mem_mono_copy_mono_bb37_in(B)->  eval_mem_mono_copy_mono_bb37_in(B')
                  [B'=9,B=9] 
* Loop 117: eval_mem_mono_copy_mono_bb37_in(B) [B=9] 

### Ranking functions of CR eval_mem_mono_copy_mono_bb37_in(B) 

#### Partial ranking functions of CR eval_mem_mono_copy_mono_bb37_in(B) 


### Resulting Chains:eval_mem_mono_copy_mono_bb37_in(B) 
* [[116]]...
* [[116],117]
* [117]


### Merging Chains  eval_mem_mono_copy_mono_bb37_in/1 into  External patterns of execution 
* [[117],[117,[116]]] --> 1 
* [[[116]]] --> 2 


### Specialization of cost equations eval_mem_mono_copy_mono_bb45_in/1 
* CE 49 is refined into CE [172] 
* CE 48 is refined into CE [173] 


#### Refined cost equations eval_mem_mono_copy_mono_bb45_in/1 
* CE 172: eval_mem_mono_copy_mono_bb45_in(B) = 0
     [B=9] 
* CE 173: eval_mem_mono_copy_mono_bb45_in(B) = 1+ eval_mem_mono_copy_mono_bb45_in(C)
     [C=9,B=9] 

### Cost equations --> "Loop" of eval_mem_mono_copy_mono_bb45_in/1 
* CEs [173] --> Loop 118 
* CEs [172] --> Loop 119 

#### Loops of eval_mem_mono_copy_mono_bb45_in/1 
* Loop 118: eval_mem_mono_copy_mono_bb45_in(B)->  eval_mem_mono_copy_mono_bb45_in(B')
                  [B'=9,B=9] 
* Loop 119: eval_mem_mono_copy_mono_bb45_in(B) [B=9] 

### Ranking functions of CR eval_mem_mono_copy_mono_bb45_in(B) 

#### Partial ranking functions of CR eval_mem_mono_copy_mono_bb45_in(B) 


### Resulting Chains:eval_mem_mono_copy_mono_bb45_in(B) 
* [[118]]...
* [[118],119]
* [119]


### Merging Chains  eval_mem_mono_copy_mono_bb45_in/1 into  External patterns of execution 
* [[119],[119,[118]]] --> 1 
* [[[118]]] --> 2 


### Specialization of cost equations eval_mem_mono_copy_mono_bb51_in/1 
* CE 51 is refined into CE [174] 
* CE 50 is refined into CE [175] 


#### Refined cost equations eval_mem_mono_copy_mono_bb51_in/1 
* CE 174: eval_mem_mono_copy_mono_bb51_in(B) = 0
     [B=9] 
* CE 175: eval_mem_mono_copy_mono_bb51_in(B) = 1+ eval_mem_mono_copy_mono_bb51_in(C)
     [C=9,B=9] 

### Cost equations --> "Loop" of eval_mem_mono_copy_mono_bb51_in/1 
* CEs [175] --> Loop 120 
* CEs [174] --> Loop 121 

#### Loops of eval_mem_mono_copy_mono_bb51_in/1 
* Loop 120: eval_mem_mono_copy_mono_bb51_in(B)->  eval_mem_mono_copy_mono_bb51_in(B')
                  [B'=9,B=9] 
* Loop 121: eval_mem_mono_copy_mono_bb51_in(B) [B=9] 

### Ranking functions of CR eval_mem_mono_copy_mono_bb51_in(B) 

#### Partial ranking functions of CR eval_mem_mono_copy_mono_bb51_in(B) 


### Resulting Chains:eval_mem_mono_copy_mono_bb51_in(B) 
* [[120]]...
* [[120],121]
* [121]


### Merging Chains  eval_mem_mono_copy_mono_bb51_in/1 into  External patterns of execution 
* [[121],[121,[120]]] --> 1 
* [[[120]]] --> 2 


### Specialization of cost equations eval_mem_mono_copy_mono_bb57_in/1 
* CE 53 is refined into CE [176] 
* CE 52 is refined into CE [177] 


#### Refined cost equations eval_mem_mono_copy_mono_bb57_in/1 
* CE 176: eval_mem_mono_copy_mono_bb57_in(B) = 0
     [B=9] 
* CE 177: eval_mem_mono_copy_mono_bb57_in(B) = 1+ eval_mem_mono_copy_mono_bb57_in(C)
     [C=9,B=9] 

### Cost equations --> "Loop" of eval_mem_mono_copy_mono_bb57_in/1 
* CEs [177] --> Loop 122 
* CEs [176] --> Loop 123 

#### Loops of eval_mem_mono_copy_mono_bb57_in/1 
* Loop 122: eval_mem_mono_copy_mono_bb57_in(B)->  eval_mem_mono_copy_mono_bb57_in(B')
                  [B'=9,B=9] 
* Loop 123: eval_mem_mono_copy_mono_bb57_in(B) [B=9] 

### Ranking functions of CR eval_mem_mono_copy_mono_bb57_in(B) 

#### Partial ranking functions of CR eval_mem_mono_copy_mono_bb57_in(B) 


### Resulting Chains:eval_mem_mono_copy_mono_bb57_in(B) 
* [[122]]...
* [[122],123]
* [123]


### Merging Chains  eval_mem_mono_copy_mono_bb57_in/1 into  External patterns of execution 
* [[123],[123,[122]]] --> 1 
* [[[122]]] --> 2 


### Specialization of cost equations eval_mem_mono_copy_mono_bb64_in/1 
* CE 55 is refined into CE [178] 
* CE 54 is refined into CE [179] 


#### Refined cost equations eval_mem_mono_copy_mono_bb64_in/1 
* CE 178: eval_mem_mono_copy_mono_bb64_in(B) = 0
     [B=9] 
* CE 179: eval_mem_mono_copy_mono_bb64_in(B) = 1+ eval_mem_mono_copy_mono_bb64_in(C)
     [C=9,B=9] 

### Cost equations --> "Loop" of eval_mem_mono_copy_mono_bb64_in/1 
* CEs [179] --> Loop 124 
* CEs [178] --> Loop 125 

#### Loops of eval_mem_mono_copy_mono_bb64_in/1 
* Loop 124: eval_mem_mono_copy_mono_bb64_in(B)->  eval_mem_mono_copy_mono_bb64_in(B')
                  [B'=9,B=9] 
* Loop 125: eval_mem_mono_copy_mono_bb64_in(B) [B=9] 

### Ranking functions of CR eval_mem_mono_copy_mono_bb64_in(B) 

#### Partial ranking functions of CR eval_mem_mono_copy_mono_bb64_in(B) 


### Resulting Chains:eval_mem_mono_copy_mono_bb64_in(B) 
* [[124]]...
* [[124],125]
* [125]


### Merging Chains  eval_mem_mono_copy_mono_bb64_in/1 into  External patterns of execution 
* [[125],[125,[124]]] --> 1 
* [[[124]]] --> 2 


### Specialization of cost equations eval_mem_mono_copy_mono_bb70_in/1 
* CE 57 is refined into CE [180] 
* CE 56 is refined into CE [181] 


#### Refined cost equations eval_mem_mono_copy_mono_bb70_in/1 
* CE 180: eval_mem_mono_copy_mono_bb70_in(B) = 0
     [B=9] 
* CE 181: eval_mem_mono_copy_mono_bb70_in(B) = 1+ eval_mem_mono_copy_mono_bb70_in(C)
     [C=9,B=9] 

### Cost equations --> "Loop" of eval_mem_mono_copy_mono_bb70_in/1 
* CEs [181] --> Loop 126 
* CEs [180] --> Loop 127 

#### Loops of eval_mem_mono_copy_mono_bb70_in/1 
* Loop 126: eval_mem_mono_copy_mono_bb70_in(B)->  eval_mem_mono_copy_mono_bb70_in(B')
                  [B'=9,B=9] 
* Loop 127: eval_mem_mono_copy_mono_bb70_in(B) [B=9] 

### Ranking functions of CR eval_mem_mono_copy_mono_bb70_in(B) 

#### Partial ranking functions of CR eval_mem_mono_copy_mono_bb70_in(B) 


### Resulting Chains:eval_mem_mono_copy_mono_bb70_in(B) 
* [[126]]...
* [[126],127]
* [127]


### Merging Chains  eval_mem_mono_copy_mono_bb70_in/1 into  External patterns of execution 
* [[127],[127,[126]]] --> 1 
* [[[126]]] --> 2 


### Specialization of cost equations eval_mem_mono_copy_mono_bb76_in/1 
* CE 59 is refined into CE [182] 
* CE 58 is refined into CE [183] 


#### Refined cost equations eval_mem_mono_copy_mono_bb76_in/1 
* CE 182: eval_mem_mono_copy_mono_bb76_in(B) = 0
     [B=9] 
* CE 183: eval_mem_mono_copy_mono_bb76_in(B) = 1+ eval_mem_mono_copy_mono_bb76_in(C)
     [C=9,B=9] 

### Cost equations --> "Loop" of eval_mem_mono_copy_mono_bb76_in/1 
* CEs [183] --> Loop 128 
* CEs [182] --> Loop 129 

#### Loops of eval_mem_mono_copy_mono_bb76_in/1 
* Loop 128: eval_mem_mono_copy_mono_bb76_in(B)->  eval_mem_mono_copy_mono_bb76_in(B')
                  [B'=9,B=9] 
* Loop 129: eval_mem_mono_copy_mono_bb76_in(B) [B=9] 

### Ranking functions of CR eval_mem_mono_copy_mono_bb76_in(B) 

#### Partial ranking functions of CR eval_mem_mono_copy_mono_bb76_in(B) 


### Resulting Chains:eval_mem_mono_copy_mono_bb76_in(B) 
* [[128]]...
* [[128],129]
* [129]


### Merging Chains  eval_mem_mono_copy_mono_bb76_in/1 into  External patterns of execution 
* [[129],[129,[128]]] --> 1 
* [[[128]]] --> 2 


### Specialization of cost equations eval_mem_mono_copy_mono_bb84_in/1 
* CE 61 is refined into CE [184] 
* CE 60 is refined into CE [185] 


#### Refined cost equations eval_mem_mono_copy_mono_bb84_in/1 
* CE 184: eval_mem_mono_copy_mono_bb84_in(B) = 0
     [B=9] 
* CE 185: eval_mem_mono_copy_mono_bb84_in(B) = 1+ eval_mem_mono_copy_mono_bb84_in(C)
     [C=9,B=9] 

### Cost equations --> "Loop" of eval_mem_mono_copy_mono_bb84_in/1 
* CEs [185] --> Loop 130 
* CEs [184] --> Loop 131 

#### Loops of eval_mem_mono_copy_mono_bb84_in/1 
* Loop 130: eval_mem_mono_copy_mono_bb84_in(B)->  eval_mem_mono_copy_mono_bb84_in(B')
                  [B'=9,B=9] 
* Loop 131: eval_mem_mono_copy_mono_bb84_in(B) [B=9] 

### Ranking functions of CR eval_mem_mono_copy_mono_bb84_in(B) 

#### Partial ranking functions of CR eval_mem_mono_copy_mono_bb84_in(B) 


### Resulting Chains:eval_mem_mono_copy_mono_bb84_in(B) 
* [[130]]...
* [[130],131]
* [131]


### Merging Chains  eval_mem_mono_copy_mono_bb84_in/1 into  External patterns of execution 
* [[131],[131,[130]]] --> 1 
* [[[130]]] --> 2 


### Specialization of cost equations eval_mem_mono_copy_mono_bb93_in/1 
* CE 63 is refined into CE [186] 
* CE 62 is refined into CE [187] 


#### Refined cost equations eval_mem_mono_copy_mono_bb93_in/1 
* CE 186: eval_mem_mono_copy_mono_bb93_in(B) = 0
     [B=9] 
* CE 187: eval_mem_mono_copy_mono_bb93_in(B) = 1+ eval_mem_mono_copy_mono_bb93_in(C)
     [C=9,B=9] 

### Cost equations --> "Loop" of eval_mem_mono_copy_mono_bb93_in/1 
* CEs [187] --> Loop 132 
* CEs [186] --> Loop 133 

#### Loops of eval_mem_mono_copy_mono_bb93_in/1 
* Loop 132: eval_mem_mono_copy_mono_bb93_in(B)->  eval_mem_mono_copy_mono_bb93_in(B')
                  [B'=9,B=9] 
* Loop 133: eval_mem_mono_copy_mono_bb93_in(B) [B=9] 

### Ranking functions of CR eval_mem_mono_copy_mono_bb93_in(B) 

#### Partial ranking functions of CR eval_mem_mono_copy_mono_bb93_in(B) 


### Resulting Chains:eval_mem_mono_copy_mono_bb93_in(B) 
* [[132]]...
* [[132],133]
* [133]


### Merging Chains  eval_mem_mono_copy_mono_bb93_in/1 into  External patterns of execution 
* [[133],[133,[132]]] --> 1 
* [[[132]]] --> 2 


### Specialization of cost equations loop_cont_eval_mem_mono_copy_mono_bb134_in/6 
* CE 85 is refined into CE [188] 
* CE 86 is refined into CE [189] 


#### Refined cost equations loop_cont_eval_mem_mono_copy_mono_bb134_in/6 
* CE 188: loop_cont_eval_mem_mono_copy_mono_bb134_in(F,A,B,C,D,E) = 0+ eval_mem_mono_copy_mono_bb203_in(A,B,C,D,G,E):1
     [F=10] 
* CE 189: loop_cont_eval_mem_mono_copy_mono_bb134_in(F,A,B,C,D,E) = 0
     [F=9] 

### Cost equations --> "Loop" of loop_cont_eval_mem_mono_copy_mono_bb134_in/6 
* CEs [188] --> Loop 134 
* CEs [189] --> Loop 135 

#### Loops of loop_cont_eval_mem_mono_copy_mono_bb134_in/6 
* Loop 134: loop_cont_eval_mem_mono_copy_mono_bb134_in(F,A,B,C,D,E) [F=10] 
* Loop 135: loop_cont_eval_mem_mono_copy_mono_bb134_in(F,A,B,C,D,E) [F=9] 

### Ranking functions of CR loop_cont_eval_mem_mono_copy_mono_bb134_in(F,A,B,C,D,E) 

#### Partial ranking functions of CR loop_cont_eval_mem_mono_copy_mono_bb134_in(F,A,B,C,D,E) 


### Resulting Chains:loop_cont_eval_mem_mono_copy_mono_bb134_in(F,A,B,C,D,E) 
* [135]
* [134]


### Merging Chains  loop_cont_eval_mem_mono_copy_mono_bb134_in/6 into  External patterns of execution 
* [[135]] --> 1 
* [[134]] --> 2 


### Specialization of cost equations eval_mem_mono_copy_mono_32/6 
* CE 12 is refined into CE [190,191,192] 
* CE 13 is refined into CE [193] 
* CE 14 is refined into CE [194,195,196] 
* CE 15 is refined into CE [197,198,199] 
* CE 16 is refined into CE [200,201] 
* CE 17 is refined into CE [202,203] 
* CE 18 is refined into CE [204,205] 
* CE 19 is refined into CE [206,207] 
* CE 20 is refined into CE [208,209] 
* CE 21 is refined into CE [210,211] 
* CE 22 is refined into CE [212,213] 
* CE 23 is refined into CE [214,215] 
* CE 24 is refined into CE [216,217] 
* CE 25 is refined into CE [218,219] 
* CE 26 is refined into CE [220,221] 
* CE 27 is refined into CE [222,223] 
* CE 28 is refined into CE [224,225,226,227] 
* CE 29 is refined into CE [228,229,230,231] 
* CE 30 is refined into CE [232,233,234,235] 
* CE 31 is refined into CE [236,237,238,239,240] 


#### Refined cost equations eval_mem_mono_copy_mono_32/6 
* CE 190: eval_mem_mono_copy_mono_32(V_zero,V__17,V__15,V__2,V__212,B) = 1+ eval_mem_mono_copy_mono_bb15_in(C,D):1
     [D=9,C=1,V__212=1] 
* CE 191: eval_mem_mono_copy_mono_32(V_zero,V__17,V__15,V__2,V__212,B) = 1+ eval_mem_mono_copy_mono_bb15_in(V__212,C):2
     [V__212>=2,C=9] 
* CE 192: eval_mem_mono_copy_mono_32(V_zero,V__17,V__15,V__2,V__212,B) = 1+ eval_mem_mono_copy_mono_bb15_in(V__212,C):3
     [0>=V__212,C=9] 
* CE 193: eval_mem_mono_copy_mono_32(V_zero,V__17,V__15,V__2,V__212,B) = 0+ eval_mem_mono_copy_mono_bb203_in(V_zero,V__17,V__15,V__2,V__212,B):1
     [] 
* CE 194: eval_mem_mono_copy_mono_32(V_zero,V__17,V__15,V__2,V__212,B) = 1+ eval_mem_mono_copy_mono_bb18_in(C,D):1
     [D=9,C=1,V__212=1] 
* CE 195: eval_mem_mono_copy_mono_32(V_zero,V__17,V__15,V__2,V__212,B) = 1+ eval_mem_mono_copy_mono_bb18_in(V__212,C):2
     [V__212>=2,C=9] 
* CE 196: eval_mem_mono_copy_mono_32(V_zero,V__17,V__15,V__2,V__212,B) = 1+ eval_mem_mono_copy_mono_bb18_in(V__212,C):3
     [0>=V__212,C=9] 
* CE 197: eval_mem_mono_copy_mono_32(V_zero,V__17,V__15,V__2,V__212,B) = 1+ eval_mem_mono_copy_mono_bb21_in(C,D):1
     [D=9,C=1,V__212=1] 
* CE 198: eval_mem_mono_copy_mono_32(V_zero,V__17,V__15,V__2,V__212,B) = 1+ eval_mem_mono_copy_mono_bb21_in(V__212,C):2
     [V__212>=2,C=9] 
* CE 199: eval_mem_mono_copy_mono_32(V_zero,V__17,V__15,V__2,V__212,B) = 1+ eval_mem_mono_copy_mono_bb21_in(V__212,C):3
     [0>=V__212,C=9] 
* CE 200: eval_mem_mono_copy_mono_32(V_zero,V__17,V__15,V__2,V__212,B) = 1+ eval_mem_mono_copy_mono_bb25_in(C):1
     [C=9] 
* CE 201: eval_mem_mono_copy_mono_32(V_zero,V__17,V__15,V__2,V__212,B) = 1+ eval_mem_mono_copy_mono_bb25_in(C):2
     [C=9] 
* CE 202: eval_mem_mono_copy_mono_32(V_zero,V__17,V__15,V__2,V__212,B) = 1+ eval_mem_mono_copy_mono_bb31_in(C):1
     [C=9] 
* CE 203: eval_mem_mono_copy_mono_32(V_zero,V__17,V__15,V__2,V__212,B) = 1+ eval_mem_mono_copy_mono_bb31_in(C):2
     [C=9] 
* CE 204: eval_mem_mono_copy_mono_32(V_zero,V__17,V__15,V__2,V__212,B) = 1+ eval_mem_mono_copy_mono_bb37_in(C):1
     [C=9] 
* CE 205: eval_mem_mono_copy_mono_32(V_zero,V__17,V__15,V__2,V__212,B) = 1+ eval_mem_mono_copy_mono_bb37_in(C):2
     [C=9] 
* CE 206: eval_mem_mono_copy_mono_32(V_zero,V__17,V__15,V__2,V__212,B) = 1+ eval_mem_mono_copy_mono_bb45_in(C):1
     [C=9] 
* CE 207: eval_mem_mono_copy_mono_32(V_zero,V__17,V__15,V__2,V__212,B) = 1+ eval_mem_mono_copy_mono_bb45_in(C):2
     [C=9] 
* CE 208: eval_mem_mono_copy_mono_32(V_zero,V__17,V__15,V__2,V__212,B) = 1+ eval_mem_mono_copy_mono_bb51_in(C):1
     [C=9] 
* CE 209: eval_mem_mono_copy_mono_32(V_zero,V__17,V__15,V__2,V__212,B) = 1+ eval_mem_mono_copy_mono_bb51_in(C):2
     [C=9] 
* CE 210: eval_mem_mono_copy_mono_32(V_zero,V__17,V__15,V__2,V__212,B) = 1+ eval_mem_mono_copy_mono_bb57_in(C):1
     [C=9] 
* CE 211: eval_mem_mono_copy_mono_32(V_zero,V__17,V__15,V__2,V__212,B) = 1+ eval_mem_mono_copy_mono_bb57_in(C):2
     [C=9] 
* CE 212: eval_mem_mono_copy_mono_32(V_zero,V__17,V__15,V__2,V__212,B) = 1+ eval_mem_mono_copy_mono_bb64_in(C):1
     [C=9] 
* CE 213: eval_mem_mono_copy_mono_32(V_zero,V__17,V__15,V__2,V__212,B) = 1+ eval_mem_mono_copy_mono_bb64_in(C):2
     [C=9] 
* CE 214: eval_mem_mono_copy_mono_32(V_zero,V__17,V__15,V__2,V__212,B) = 1+ eval_mem_mono_copy_mono_bb70_in(C):1
     [C=9] 
* CE 215: eval_mem_mono_copy_mono_32(V_zero,V__17,V__15,V__2,V__212,B) = 1+ eval_mem_mono_copy_mono_bb70_in(C):2
     [C=9] 
* CE 216: eval_mem_mono_copy_mono_32(V_zero,V__17,V__15,V__2,V__212,B) = 1+ eval_mem_mono_copy_mono_bb76_in(C):1
     [C=9] 
* CE 217: eval_mem_mono_copy_mono_32(V_zero,V__17,V__15,V__2,V__212,B) = 1+ eval_mem_mono_copy_mono_bb76_in(C):2
     [C=9] 
* CE 218: eval_mem_mono_copy_mono_32(V_zero,V__17,V__15,V__2,V__212,B) = 1+ eval_mem_mono_copy_mono_bb84_in(C):1
     [C=9] 
* CE 219: eval_mem_mono_copy_mono_32(V_zero,V__17,V__15,V__2,V__212,B) = 1+ eval_mem_mono_copy_mono_bb84_in(C):2
     [C=9] 
* CE 220: eval_mem_mono_copy_mono_32(V_zero,V__17,V__15,V__2,V__212,B) = 1+ eval_mem_mono_copy_mono_bb93_in(C):1
     [C=9] 
* CE 221: eval_mem_mono_copy_mono_32(V_zero,V__17,V__15,V__2,V__212,B) = 1+ eval_mem_mono_copy_mono_bb93_in(C):2
     [C=9] 
* CE 222: eval_mem_mono_copy_mono_32(V_zero,V__17,V__15,V__2,V__212,B) = 1+ eval_mem_mono_copy_mono_bb102_in(C):1
     [C=9] 
* CE 223: eval_mem_mono_copy_mono_32(V_zero,V__17,V__15,V__2,V__212,B) = 1+ eval_mem_mono_copy_mono_bb102_in(C):2
     [C=9] 
* CE 224: eval_mem_mono_copy_mono_32(V_zero,V__17,V__15,V__2,V__212,B) = 1+ eval_mem_mono_copy_mono_bb112_in(C,D):1
     [15>=C,D=9] 
* CE 225: eval_mem_mono_copy_mono_32(V_zero,V__17,V__15,V__2,V__212,B) = 1+ eval_mem_mono_copy_mono_bb112_in(C,D):2
     [C>=16,D=9] 
* CE 226: eval_mem_mono_copy_mono_32(V_zero,V__17,V__15,V__2,V__212,B) = 1+ eval_mem_mono_copy_mono_bb112_in(C,D):3
     [15>=C,D=9] 
* CE 227: eval_mem_mono_copy_mono_32(V_zero,V__17,V__15,V__2,V__212,B) = 1+ eval_mem_mono_copy_mono_bb112_in(C,D):4
     [C>=16,D=9] 
* CE 228: eval_mem_mono_copy_mono_32(V_zero,V__17,V__15,V__2,V__212,B) = 1+ eval_mem_mono_copy_mono_bb119_in(C,D):1
     [15>=C,D=9] 
* CE 229: eval_mem_mono_copy_mono_32(V_zero,V__17,V__15,V__2,V__212,B) = 1+ eval_mem_mono_copy_mono_bb119_in(C,D):2
     [C>=16,D=9] 
* CE 230: eval_mem_mono_copy_mono_32(V_zero,V__17,V__15,V__2,V__212,B) = 1+ eval_mem_mono_copy_mono_bb119_in(C,D):3
     [15>=C,D=9] 
* CE 231: eval_mem_mono_copy_mono_32(V_zero,V__17,V__15,V__2,V__212,B) = 1+ eval_mem_mono_copy_mono_bb119_in(C,D):4
     [C>=16,D=9] 
* CE 232: eval_mem_mono_copy_mono_32(V_zero,V__17,V__15,V__2,V__212,B) = 1+ eval_mem_mono_copy_mono_bb126_in(C,D):1
     [15>=C,D=9] 
* CE 233: eval_mem_mono_copy_mono_32(V_zero,V__17,V__15,V__2,V__212,B) = 1+ eval_mem_mono_copy_mono_bb126_in(C,D):2
     [C>=16,D=9] 
* CE 234: eval_mem_mono_copy_mono_32(V_zero,V__17,V__15,V__2,V__212,B) = 1+ eval_mem_mono_copy_mono_bb126_in(C,D):3
     [15>=C,D=9] 
* CE 235: eval_mem_mono_copy_mono_32(V_zero,V__17,V__15,V__2,V__212,B) = 1+ eval_mem_mono_copy_mono_bb126_in(C,D):4
     [C>=16,D=9] 
* CE 236: eval_mem_mono_copy_mono_32(V_zero,V__17,V__15,V__2,V__212,B) = 1+ eval_mem_mono_copy_mono_bb134_in(V_zero,V__17,V__15,V__2,C,V__212,D,E,F,G,H):1+ loop_cont_eval_mem_mono_copy_mono_bb134_in(I,E,F,G,H,B):1
     [15>=C,I=9,D=9] 
* CE 237: eval_mem_mono_copy_mono_32(V_zero,V__17,V__15,V__2,V__212,B) = 1+ eval_mem_mono_copy_mono_bb134_in(V_zero,V__17,V__15,V__2,C,V__212,D,E,F,G,H):2+ loop_cont_eval_mem_mono_copy_mono_bb134_in(I,E,F,G,H,B):1
     [C>=16,I=9,D=9] 
* CE 238: eval_mem_mono_copy_mono_32(V_zero,V__17,V__15,V__2,V__212,B) = 1+ eval_mem_mono_copy_mono_bb134_in(V_zero,V__17,V__15,V__2,C,V__212,D,V_zero,V__17,V__15,V__2):3+ loop_cont_eval_mem_mono_copy_mono_bb134_in(E,V_zero,V__17,V__15,V__2,B):2
     [E=10,D=10] 
* CE 239: eval_mem_mono_copy_mono_32(V_zero,V__17,V__15,V__2,V__212,B) = 1+ eval_mem_mono_copy_mono_bb134_in(V_zero,V__17,V__15,V__2,C,V__212,D,E,F,G,H):4
     [15>=C] 
* CE 240: eval_mem_mono_copy_mono_32(V_zero,V__17,V__15,V__2,V__212,B) = 1+ eval_mem_mono_copy_mono_bb134_in(V_zero,V__17,V__15,V__2,C,V__212,D,E,F,G,H):5
     [C>=16] 

### Cost equations --> "Loop" of eval_mem_mono_copy_mono_32/6 
* CEs [192,196,199,201,203,205,207,209,211,213,215,217,219,221,223,226,227,230,231,234,235,239,240] --> Loop 136 
* CEs [190,191,193,194,195,197,198,200,202,204,206,208,210,212,214,216,218,220,222,224,225,228,229,232,233,236,237,238] --> Loop 137 

#### Loops of eval_mem_mono_copy_mono_32/6 
* Loop 136: eval_mem_mono_copy_mono_32(V_zero,V__17,V__15,V__2,V__212,B) [] 
* Loop 137: eval_mem_mono_copy_mono_32(V_zero,V__17,V__15,V__2,V__212,B) [] 

### Ranking functions of CR eval_mem_mono_copy_mono_32(V_zero,V__17,V__15,V__2,V__212,B) 

#### Partial ranking functions of CR eval_mem_mono_copy_mono_32(V_zero,V__17,V__15,V__2,V__212,B) 


### Resulting Chains:eval_mem_mono_copy_mono_32(V_zero,V__17,V__15,V__2,V__212,B) 
* [137]
* [136]...


### Merging Chains  eval_mem_mono_copy_mono_32/6 into  External patterns of execution 
* [[137]] --> 1 
* [[136]] --> 2 


### Specialization of cost equations eval_mem_mono_copy_mono_bb9_in/6 
* CE 10 is refined into CE [241] 
* CE 11 is refined into CE [242,243] 


#### Refined cost equations eval_mem_mono_copy_mono_bb9_in/6 
* CE 241: eval_mem_mono_copy_mono_bb9_in(V_zero,V__17,V__15,V__2,V__212,B) = 0
     [] 
* CE 242: eval_mem_mono_copy_mono_bb9_in(V_zero,V__17,V__15,V__2,V__212,B) = 0+ eval_mem_mono_copy_mono_32(V_zero,V__17,V__15,V__2,V__212,B):1
     [] 
* CE 243: eval_mem_mono_copy_mono_bb9_in(V_zero,V__17,V__15,V__2,V__212,B) = 0+ eval_mem_mono_copy_mono_32(V_zero,V__17,V__15,V__2,V__212,B):2
     [] 

### Cost equations --> "Loop" of eval_mem_mono_copy_mono_bb9_in/6 
* CEs [243] --> Loop 138 
* CEs [241,242] --> Loop 139 

#### Loops of eval_mem_mono_copy_mono_bb9_in/6 
* Loop 138: eval_mem_mono_copy_mono_bb9_in(V_zero,V__17,V__15,V__2,V__212,B) [] 
* Loop 139: eval_mem_mono_copy_mono_bb9_in(V_zero,V__17,V__15,V__2,V__212,B) [] 

### Ranking functions of CR eval_mem_mono_copy_mono_bb9_in(V_zero,V__17,V__15,V__2,V__212,B) 

#### Partial ranking functions of CR eval_mem_mono_copy_mono_bb9_in(V_zero,V__17,V__15,V__2,V__212,B) 


### Resulting Chains:eval_mem_mono_copy_mono_bb9_in(V_zero,V__17,V__15,V__2,V__212,B) 
* [139]
* [138]...


### Merging Chains  eval_mem_mono_copy_mono_bb9_in/6 into  External patterns of execution 
* [[139]] --> 1 
* [[138]] --> 2 


### Specialization of cost equations eval_mem_mono_copy_mono_bb7_in/6 
* CE 9 is refined into CE [244,245] 


#### Refined cost equations eval_mem_mono_copy_mono_bb7_in/6 
* CE 244: eval_mem_mono_copy_mono_bb7_in(V_zero,V__111,V__17,V__15,V__2,B) = 0+ eval_mem_mono_copy_mono_bb9_in(V_zero,V__17,V__15,V__2,C,B):1
     [] 
* CE 245: eval_mem_mono_copy_mono_bb7_in(V_zero,V__111,V__17,V__15,V__2,B) = 0+ eval_mem_mono_copy_mono_bb9_in(V_zero,V__17,V__15,V__2,C,B):2
     [] 

### Cost equations --> "Loop" of eval_mem_mono_copy_mono_bb7_in/6 
* CEs [245] --> Loop 140 
* CEs [244] --> Loop 141 

#### Loops of eval_mem_mono_copy_mono_bb7_in/6 
* Loop 140: eval_mem_mono_copy_mono_bb7_in(V_zero,V__111,V__17,V__15,V__2,B) [] 
* Loop 141: eval_mem_mono_copy_mono_bb7_in(V_zero,V__111,V__17,V__15,V__2,B) [] 

### Ranking functions of CR eval_mem_mono_copy_mono_bb7_in(V_zero,V__111,V__17,V__15,V__2,B) 

#### Partial ranking functions of CR eval_mem_mono_copy_mono_bb7_in(V_zero,V__111,V__17,V__15,V__2,B) 


### Resulting Chains:eval_mem_mono_copy_mono_bb7_in(V_zero,V__111,V__17,V__15,V__2,B) 
* [141]
* [140]...


### Merging Chains  eval_mem_mono_copy_mono_bb7_in/6 into  External patterns of execution 
* [[141]] --> 1 
* [[140]] --> 2 


### Specialization of cost equations eval_mem_mono_copy_mono_bb5_in/6 
* CE 8 is refined into CE [246,247] 


#### Refined cost equations eval_mem_mono_copy_mono_bb5_in/6 
* CE 246: eval_mem_mono_copy_mono_bb5_in(V_zero,V__111,V__19,V__17,V__15,B) = 0+ eval_mem_mono_copy_mono_bb7_in(V_zero,V__111,V__17,V__15,C,B):1
     [] 
* CE 247: eval_mem_mono_copy_mono_bb5_in(V_zero,V__111,V__19,V__17,V__15,B) = 0+ eval_mem_mono_copy_mono_bb7_in(V_zero,V__111,V__17,V__15,C,B):2
     [] 

### Cost equations --> "Loop" of eval_mem_mono_copy_mono_bb5_in/6 
* CEs [247] --> Loop 142 
* CEs [246] --> Loop 143 

#### Loops of eval_mem_mono_copy_mono_bb5_in/6 
* Loop 142: eval_mem_mono_copy_mono_bb5_in(V_zero,V__111,V__19,V__17,V__15,B) [] 
* Loop 143: eval_mem_mono_copy_mono_bb5_in(V_zero,V__111,V__19,V__17,V__15,B) [] 

### Ranking functions of CR eval_mem_mono_copy_mono_bb5_in(V_zero,V__111,V__19,V__17,V__15,B) 

#### Partial ranking functions of CR eval_mem_mono_copy_mono_bb5_in(V_zero,V__111,V__19,V__17,V__15,B) 


### Resulting Chains:eval_mem_mono_copy_mono_bb5_in(V_zero,V__111,V__19,V__17,V__15,B) 
* [143]
* [142]...


### Merging Chains  eval_mem_mono_copy_mono_bb5_in/6 into  External patterns of execution 
* [[143]] --> 1 
* [[142]] --> 2 


### Specialization of cost equations eval_mem_mono_copy_mono_bb3_in/6 
* CE 6 is refined into CE [248,249] 
* CE 7 is refined into CE [250,251] 


#### Refined cost equations eval_mem_mono_copy_mono_bb3_in/6 
* CE 248: eval_mem_mono_copy_mono_bb3_in(V_y,V_h,V_zero,V__08,V__04,B) = 0+ eval_mem_mono_copy_mono_bb5_in(V_zero,C,V__08,D,V__04,B):1
     [C=V_y+V_h,D=0] 
* CE 249: eval_mem_mono_copy_mono_bb3_in(V_y,V_h,V_zero,V__08,V__04,B) = 0+ eval_mem_mono_copy_mono_bb5_in(V_zero,C,V__08,D,V__04,B):2
     [C=V_y+V_h,D=0] 
* CE 250: eval_mem_mono_copy_mono_bb3_in(V_y,V_h,V_zero,V__08,V__04,B) = 0+ eval_mem_mono_copy_mono_bb5_in(V_zero,V_h,V__08,V_y,V__04,B):1
     [] 
* CE 251: eval_mem_mono_copy_mono_bb3_in(V_y,V_h,V_zero,V__08,V__04,B) = 0+ eval_mem_mono_copy_mono_bb5_in(V_zero,V_h,V__08,V_y,V__04,B):2
     [] 

### Cost equations --> "Loop" of eval_mem_mono_copy_mono_bb3_in/6 
* CEs [249,251] --> Loop 144 
* CEs [248,250] --> Loop 145 

#### Loops of eval_mem_mono_copy_mono_bb3_in/6 
* Loop 144: eval_mem_mono_copy_mono_bb3_in(V_y,V_h,V_zero,V__08,V__04,B) [] 
* Loop 145: eval_mem_mono_copy_mono_bb3_in(V_y,V_h,V_zero,V__08,V__04,B) [] 

### Ranking functions of CR eval_mem_mono_copy_mono_bb3_in(V_y,V_h,V_zero,V__08,V__04,B) 

#### Partial ranking functions of CR eval_mem_mono_copy_mono_bb3_in(V_y,V_h,V_zero,V__08,V__04,B) 


### Resulting Chains:eval_mem_mono_copy_mono_bb3_in(V_y,V_h,V_zero,V__08,V__04,B) 
* [145]
* [144]...


### Merging Chains  eval_mem_mono_copy_mono_bb3_in/6 into  External patterns of execution 
* [[145]] --> 1 
* [[144]] --> 2 


### Specialization of cost equations eval_mem_mono_copy_mono_bb0_in/6 
* CE 3 is refined into CE [252,253] 
* CE 4 is refined into CE [254,255] 
* CE 5 is refined into CE [256,257] 


#### Refined cost equations eval_mem_mono_copy_mono_bb0_in/6 
* CE 252: eval_mem_mono_copy_mono_bb0_in(V_x,V_y,V_w,V_h,V_zero,B) = 0+ eval_mem_mono_copy_mono_bb3_in(V_y,V_h,V_zero,C,D,B):1
     [C=V_x+V_w,D=0] 
* CE 253: eval_mem_mono_copy_mono_bb0_in(V_x,V_y,V_w,V_h,V_zero,B) = 0+ eval_mem_mono_copy_mono_bb3_in(V_y,V_h,V_zero,C,D,B):2
     [C=V_x+V_w,D=0] 
* CE 254: eval_mem_mono_copy_mono_bb0_in(V_x,V_y,V_w,V_h,V_zero,B) = 0+ eval_mem_mono_copy_mono_bb3_in(V_y,V_h,V_zero,V_w,V_x,B):1
     [] 
* CE 255: eval_mem_mono_copy_mono_bb0_in(V_x,V_y,V_w,V_h,V_zero,B) = 0+ eval_mem_mono_copy_mono_bb3_in(V_y,V_h,V_zero,V_w,V_x,B):2
     [] 
* CE 256: eval_mem_mono_copy_mono_bb0_in(V_x,V_y,V_w,V_h,V_zero,B) = 0+ eval_mem_mono_copy_mono_bb5_in(V_zero,V_h,V_w,V_y,V_x,B):1
     [] 
* CE 257: eval_mem_mono_copy_mono_bb0_in(V_x,V_y,V_w,V_h,V_zero,B) = 0+ eval_mem_mono_copy_mono_bb5_in(V_zero,V_h,V_w,V_y,V_x,B):2
     [] 

### Cost equations --> "Loop" of eval_mem_mono_copy_mono_bb0_in/6 
* CEs [253,255,257] --> Loop 146 
* CEs [252,254,256] --> Loop 147 

#### Loops of eval_mem_mono_copy_mono_bb0_in/6 
* Loop 146: eval_mem_mono_copy_mono_bb0_in(V_x,V_y,V_w,V_h,V_zero,B) [] 
* Loop 147: eval_mem_mono_copy_mono_bb0_in(V_x,V_y,V_w,V_h,V_zero,B) [] 

### Ranking functions of CR eval_mem_mono_copy_mono_bb0_in(V_x,V_y,V_w,V_h,V_zero,B) 

#### Partial ranking functions of CR eval_mem_mono_copy_mono_bb0_in(V_x,V_y,V_w,V_h,V_zero,B) 


### Resulting Chains:eval_mem_mono_copy_mono_bb0_in(V_x,V_y,V_w,V_h,V_zero,B) 
* [147]
* [146]...


### Merging Chains  eval_mem_mono_copy_mono_bb0_in/6 into  External patterns of execution 
* [[147]] --> 1 
* [[146]] --> 2 


### Specialization of cost equations eval_mem_mono_copy_mono_start/10 
* CE 2 is refined into CE [258,259] 


#### Refined cost equations eval_mem_mono_copy_mono_start/10 
* CE 258: eval_mem_mono_copy_mono_start(V_sourcex,V_sraster,V_id,V_x,V_y,V_w,V_h,V_zero,V_one,B) = 0+ eval_mem_mono_copy_mono_bb0_in(V_x,V_y,V_w,V_h,V_zero,B):1
     [] 
* CE 259: eval_mem_mono_copy_mono_start(V_sourcex,V_sraster,V_id,V_x,V_y,V_w,V_h,V_zero,V_one,B) = 0+ eval_mem_mono_copy_mono_bb0_in(V_x,V_y,V_w,V_h,V_zero,B):2
     [] 

### Cost equations --> "Loop" of eval_mem_mono_copy_mono_start/10 
* CEs [259] --> Loop 148 
* CEs [258] --> Loop 149 

#### Loops of eval_mem_mono_copy_mono_start/10 
* Loop 148: eval_mem_mono_copy_mono_start(V_sourcex,V_sraster,V_id,V_x,V_y,V_w,V_h,V_zero,V_one,B) [] 
* Loop 149: eval_mem_mono_copy_mono_start(V_sourcex,V_sraster,V_id,V_x,V_y,V_w,V_h,V_zero,V_one,B) [] 

### Ranking functions of CR eval_mem_mono_copy_mono_start(V_sourcex,V_sraster,V_id,V_x,V_y,V_w,V_h,V_zero,V_one,B) 

#### Partial ranking functions of CR eval_mem_mono_copy_mono_start(V_sourcex,V_sraster,V_id,V_x,V_y,V_w,V_h,V_zero,V_one,B) 


### Resulting Chains:eval_mem_mono_copy_mono_start(V_sourcex,V_sraster,V_id,V_x,V_y,V_w,V_h,V_zero,V_one,B) 
* [149]
* [148]...


### Merging Chains  eval_mem_mono_copy_mono_start/10 into  External patterns of execution 
* [[149]] --> 1 
* [[148]] --> 2 


Computing Bounds
=====================================

#### Cost of chains of eval_mem_mono_copy_mono_bb203_in(V_zero,V__17,V__15,V__2,V__22,B):
* Chain [68]: 0
  with precondition: [] 


#### Cost of loops [69] 

 * loop 69:eval_mem_mono_copy_mono_bb102_in(B) -> [eval_mem_mono_copy_mono_bb102_in(B')] 
1
#### Cost of phase [69]:eval_mem_mono_copy_mono_bb102_in(B) -> [eval_mem_mono_copy_mono_bb102_in(B')] 
1*it(69)+0
#### Cost of phase [69]:eval_mem_mono_copy_mono_bb102_in(B) -> [eval_mem_mono_copy_mono_bb102_in(B')] 
1*it(69)+0
#### Cost of chains of eval_mem_mono_copy_mono_bb102_in(B):
* Chain [[69]]...: 1*it(69)+0
  with precondition: [B=9] 

* Chain [[69],70]: 1*it(69)+0
  with precondition: [B=9] 

* Chain [70]: 0
  with precondition: [B=9] 


#### Cost of loops [71] 

 * loop 71:eval_mem_mono_copy_mono_bb113_in(V_63,V_count_0,B,C,D) -> [eval_mem_mono_copy_mono_bb113_in(V_63',V_count_0',B',C',D')] 
1
#### Cost of phase [71]:eval_mem_mono_copy_mono_bb113_in(V_63,V_count_0,B,C,D) -> [eval_mem_mono_copy_mono_bb113_in(V_63',V_count_0',B',C',D')] 
1*it(71)+0
  Such that:it(71) =< V_count_0
it(71) =< V_count_0-V_count_0'

#### Cost of chains of eval_mem_mono_copy_mono_bb113_in(V_63,V_count_0,B,C,D):
* Chain [[71],72]: 1*it(71)+0
  Such that:it(71) =< V_count_0-D

  with precondition: [B=8,V_63=C,15>=D,D>=0,V_63>=V_count_0,V_count_0>=D+16] 

* Chain [72]: 0
  with precondition: [B=8,V_63=C,V_count_0=D,15>=V_count_0,V_63>=V_count_0] 


#### Cost of loops [74] 

 * loop 74:eval_mem_mono_copy_mono_bb112_in(V_63,B) -> [eval_mem_mono_copy_mono_bb112_in(V_63',B')] 
2
#### Cost of phase [74]:eval_mem_mono_copy_mono_bb112_in(V_63,B) -> [eval_mem_mono_copy_mono_bb112_in(V_63',B')] 
2*it(74)+0
#### Cost of phase [74]:eval_mem_mono_copy_mono_bb112_in(V_63,B) -> [eval_mem_mono_copy_mono_bb112_in(V_63',B')] 
2*it(74)+0
#### Cost of loops [73] 

 * loop 73:eval_mem_mono_copy_mono_bb112_in(V_63,B) -> [eval_mem_mono_copy_mono_bb112_in(V_63',B')] 
1*s(3)+2
  Such that:s(3) =< V_63'

#### Cost of phase [73]:eval_mem_mono_copy_mono_bb112_in(V_63,B) -> [eval_mem_mono_copy_mono_bb112_in(V_63',B')] 
2*it(73)+1*s(4)+0
#### Cost of phase [73]:eval_mem_mono_copy_mono_bb112_in(V_63,B) -> [eval_mem_mono_copy_mono_bb112_in(V_63',B')] 
2*it(73)+1*s(4)+0
#### Cost of chains of eval_mem_mono_copy_mono_bb112_in(V_63,B):
* Chain [[74]]...: 2*it(74)+0
  with precondition: [15>=V_63,B=9] 

* Chain [[74],76]: 2*it(74)+1
  with precondition: [B=9,15>=V_63] 

* Chain [[73]]...: 3*it(73)+0
  with precondition: [V_63>=16,B=9] 

* Chain [[73],75]: 3*it(73)+1*s(5)+1
  Such that:s(5) =< V_63

  with precondition: [B=9,V_63>=16] 

* Chain [76]: 1
  with precondition: [B=9,15>=V_63] 

* Chain [75]: 1*s(5)+1
  Such that:s(5) =< V_63

  with precondition: [B=9,V_63>=16] 


#### Cost of loops [77] 

 * loop 77:eval_mem_mono_copy_mono_bb120_in(V_63,V_count5_0,B,C,D) -> [eval_mem_mono_copy_mono_bb120_in(V_63',V_count5_0',B',C',D')] 
1
#### Cost of phase [77]:eval_mem_mono_copy_mono_bb120_in(V_63,V_count5_0,B,C,D) -> [eval_mem_mono_copy_mono_bb120_in(V_63',V_count5_0',B',C',D')] 
1*it(77)+0
  Such that:it(77) =< V_count5_0
it(77) =< V_count5_0-V_count5_0'

#### Cost of chains of eval_mem_mono_copy_mono_bb120_in(V_63,V_count5_0,B,C,D):
* Chain [[77],78]: 1*it(77)+0
  Such that:it(77) =< V_count5_0-D

  with precondition: [B=7,V_63=C,15>=D,D>=0,V_63>=V_count5_0,V_count5_0>=D+16] 

* Chain [78]: 0
  with precondition: [B=7,V_63=C,V_count5_0=D,15>=V_count5_0,V_63>=V_count5_0] 


#### Cost of loops [80] 

 * loop 80:eval_mem_mono_copy_mono_bb119_in(V_63,B) -> [eval_mem_mono_copy_mono_bb119_in(V_63',B')] 
2
#### Cost of phase [80]:eval_mem_mono_copy_mono_bb119_in(V_63,B) -> [eval_mem_mono_copy_mono_bb119_in(V_63',B')] 
2*it(80)+0
#### Cost of phase [80]:eval_mem_mono_copy_mono_bb119_in(V_63,B) -> [eval_mem_mono_copy_mono_bb119_in(V_63',B')] 
2*it(80)+0
#### Cost of loops [79] 

 * loop 79:eval_mem_mono_copy_mono_bb119_in(V_63,B) -> [eval_mem_mono_copy_mono_bb119_in(V_63',B')] 
1*s(11)+2
  Such that:s(11) =< V_63'

#### Cost of phase [79]:eval_mem_mono_copy_mono_bb119_in(V_63,B) -> [eval_mem_mono_copy_mono_bb119_in(V_63',B')] 
2*it(79)+1*s(12)+0
#### Cost of phase [79]:eval_mem_mono_copy_mono_bb119_in(V_63,B) -> [eval_mem_mono_copy_mono_bb119_in(V_63',B')] 
2*it(79)+1*s(12)+0
#### Cost of chains of eval_mem_mono_copy_mono_bb119_in(V_63,B):
* Chain [[80]]...: 2*it(80)+0
  with precondition: [15>=V_63,B=9] 

* Chain [[80],82]: 2*it(80)+1
  with precondition: [B=9,15>=V_63] 

* Chain [[79]]...: 3*it(79)+0
  with precondition: [V_63>=16,B=9] 

* Chain [[79],81]: 3*it(79)+1*s(13)+1
  Such that:s(13) =< V_63

  with precondition: [B=9,V_63>=16] 

* Chain [82]: 1
  with precondition: [B=9,15>=V_63] 

* Chain [81]: 1*s(13)+1
  Such that:s(13) =< V_63

  with precondition: [B=9,V_63>=16] 


#### Cost of loops [83] 

 * loop 83:eval_mem_mono_copy_mono_bb127_in(V_63,V_count6_0,B,C,D) -> [eval_mem_mono_copy_mono_bb127_in(V_63',V_count6_0',B',C',D')] 
1
#### Cost of phase [83]:eval_mem_mono_copy_mono_bb127_in(V_63,V_count6_0,B,C,D) -> [eval_mem_mono_copy_mono_bb127_in(V_63',V_count6_0',B',C',D')] 
1*it(83)+0
  Such that:it(83) =< V_count6_0
it(83) =< V_count6_0-V_count6_0'

#### Cost of chains of eval_mem_mono_copy_mono_bb127_in(V_63,V_count6_0,B,C,D):
* Chain [[83],84]: 1*it(83)+0
  Such that:it(83) =< V_count6_0-D

  with precondition: [B=6,V_63=C,15>=D,D>=0,V_63>=V_count6_0,V_count6_0>=D+16] 

* Chain [84]: 0
  with precondition: [B=6,V_63=C,V_count6_0=D,15>=V_count6_0,V_63>=V_count6_0] 


#### Cost of loops [86] 

 * loop 86:eval_mem_mono_copy_mono_bb126_in(V_63,B) -> [eval_mem_mono_copy_mono_bb126_in(V_63',B')] 
2
#### Cost of phase [86]:eval_mem_mono_copy_mono_bb126_in(V_63,B) -> [eval_mem_mono_copy_mono_bb126_in(V_63',B')] 
2*it(86)+0
#### Cost of phase [86]:eval_mem_mono_copy_mono_bb126_in(V_63,B) -> [eval_mem_mono_copy_mono_bb126_in(V_63',B')] 
2*it(86)+0
#### Cost of loops [85] 

 * loop 85:eval_mem_mono_copy_mono_bb126_in(V_63,B) -> [eval_mem_mono_copy_mono_bb126_in(V_63',B')] 
1*s(19)+2
  Such that:s(19) =< V_63'

#### Cost of phase [85]:eval_mem_mono_copy_mono_bb126_in(V_63,B) -> [eval_mem_mono_copy_mono_bb126_in(V_63',B')] 
2*it(85)+1*s(20)+0
#### Cost of phase [85]:eval_mem_mono_copy_mono_bb126_in(V_63,B) -> [eval_mem_mono_copy_mono_bb126_in(V_63',B')] 
2*it(85)+1*s(20)+0
#### Cost of chains of eval_mem_mono_copy_mono_bb126_in(V_63,B):
* Chain [[86]]...: 2*it(86)+0
  with precondition: [15>=V_63,B=9] 

* Chain [[86],88]: 2*it(86)+1
  with precondition: [B=9,15>=V_63] 

* Chain [[85]]...: 3*it(85)+0
  with precondition: [V_63>=16,B=9] 

* Chain [[85],87]: 3*it(85)+1*s(21)+1
  Such that:s(21) =< V_63

  with precondition: [B=9,V_63>=16] 

* Chain [88]: 1
  with precondition: [B=9,15>=V_63] 

* Chain [87]: 1*s(21)+1
  Such that:s(21) =< V_63

  with precondition: [B=9,V_63>=16] 


#### Cost of loops [89] 

 * loop 89:eval_mem_mono_copy_mono_bb148_in(V_zero,V__17,V__15,V__2,V_63,V__21,V_count8_0,B,C,D,E,F,G,H,I,J,K) -> [eval_mem_mono_copy_mono_bb148_in(V_zero',V__17',V__15',V__2',V_63',V__21',V_count8_0',B',C',D',E',F',G',H',I',J',K')] 
1
#### Cost of phase [89]:eval_mem_mono_copy_mono_bb148_in(V_zero,V__17,V__15,V__2,V_63,V__21,V_count8_0,B,C,D,E,F,G,H,I,J,K) -> [eval_mem_mono_copy_mono_bb148_in(V_zero',V__17',V__15',V__2',V_63',V__21',V_count8_0',B',C',D',E',F',G',H',I',J',K')] 
1*it(89)+0
  Such that:it(89) =< V_count8_0
it(89) =< V_count8_0-V_count8_0'

#### Cost of phase [89]:eval_mem_mono_copy_mono_bb148_in(V_zero,V__17,V__15,V__2,V_63,V__21,V_count8_0,B,C,D,E,F,G,H,I,J,K) -> [eval_mem_mono_copy_mono_bb148_in(V_zero',V__17',V__15',V__2',V_63',V__21',V_count8_0',B',C',D',E',F',G',H',I',J',K')] 
1*it(89)+0
  Such that:it(89) =< V_count8_0
it(89) =< V_count8_0-V_count8_0'

#### Cost of chains of eval_mem_mono_copy_mono_bb148_in(V_zero,V__17,V__15,V__2,V_63,V__21,V_count8_0,B,C,D,E,F,G,H,I,J,K):
* Chain [[89],91]: 1*it(89)+0
  Such that:it(89) =< V_count8_0-I

  with precondition: [B=3,V_zero=C,V__17=D,V__15=E,V__2=F,V_63=G,V__21=H,15>=I,I>=0,V_63>=V_count8_0,V_count8_0>=I+16] 

* Chain [[89],90]: 1*it(89)+0
  Such that:it(89) =< V_count8_0-I

  with precondition: [B=5,V_zero=C,V__17=D,V__15=E,V__2=F,V_63=G,V__21=H,15>=I,I>=0,V_63>=V_count8_0,V_count8_0>=I+16] 

* Chain [91]: 0
  with precondition: [B=3,C=V_zero,D=V__17,E=V__15,F=V__2,H=V__21,V_63=G,V_count8_0=I,15>=V_count8_0,V_63>=V_count8_0] 

* Chain [90]: 0
  with precondition: [B=5,C=V_zero,D=V__17,E=V__15,F=V__2,H=V__21,V_63=G,V_count8_0=I,15>=V_count8_0,V_63>=V_count8_0] 


#### Cost of loops [92] 

 * loop 92:eval_mem_mono_copy_mono_bb167_in(V_zero,V__17,V__15,V__2,V_63,V__21,V_count8_1,B,C,D,E,F,G,H,I,J,K) -> [eval_mem_mono_copy_mono_bb167_in(V_zero',V__17',V__15',V__2',V_63',V__21',V_count8_1',B',C',D',E',F',G',H',I',J',K')] 
1
#### Cost of phase [92]:eval_mem_mono_copy_mono_bb167_in(V_zero,V__17,V__15,V__2,V_63,V__21,V_count8_1,B,C,D,E,F,G,H,I,J,K) -> [eval_mem_mono_copy_mono_bb167_in(V_zero',V__17',V__15',V__2',V_63',V__21',V_count8_1',B',C',D',E',F',G',H',I',J',K')] 
1*it(92)+0
  Such that:it(92) =< V_count8_1
it(92) =< V_count8_1-V_count8_1'

#### Cost of phase [92]:eval_mem_mono_copy_mono_bb167_in(V_zero,V__17,V__15,V__2,V_63,V__21,V_count8_1,B,C,D,E,F,G,H,I,J,K) -> [eval_mem_mono_copy_mono_bb167_in(V_zero',V__17',V__15',V__2',V_63',V__21',V_count8_1',B',C',D',E',F',G',H',I',J',K')] 
1*it(92)+0
  Such that:it(92) =< V_count8_1
it(92) =< V_count8_1-V_count8_1'

#### Cost of chains of eval_mem_mono_copy_mono_bb167_in(V_zero,V__17,V__15,V__2,V_63,V__21,V_count8_1,B,C,D,E,F,G,H,I,J,K):
* Chain [[92],94]: 1*it(92)+0
  Such that:it(92) =< V_count8_1-J

  with precondition: [B=3,V_zero=C,V__17=D,V__15=E,V__2=F,V_63=G,V__21=H,15>=J,J>=0,V_63>=V_count8_1,V_count8_1>=J+16] 

* Chain [[92],93]: 1*it(92)+0
  Such that:it(92) =< V_count8_1-I

  with precondition: [B=4,V_zero=C,V__17=D,V__15=E,V__2=F,V_63=G,V__21=H,15>=I,I>=0,V_63>=V_count8_1,V_count8_1>=I+16] 

* Chain [94]: 0
  with precondition: [B=3,C=V_zero,D=V__17,E=V__15,F=V__2,H=V__21,V_63=G,V_count8_1=J,15>=V_count8_1,V_63>=V_count8_1] 

* Chain [93]: 0
  with precondition: [B=4,C=V_zero,D=V__17,E=V__15,F=V__2,H=V__21,V_63=G,V_count8_1=I,15>=V_count8_1,V_63>=V_count8_1] 


#### Cost of loops [95] 

 * loop 95:eval_mem_mono_copy_mono_bb186_in(V_zero,V__17,V__15,V__2,V_63,V__21,V_count8_2,B,C,D,E,F,G,H,I,J,K) -> [eval_mem_mono_copy_mono_bb186_in(V_zero',V__17',V__15',V__2',V_63',V__21',V_count8_2',B',C',D',E',F',G',H',I',J',K')] 
1
#### Cost of phase [95]:eval_mem_mono_copy_mono_bb186_in(V_zero,V__17,V__15,V__2,V_63,V__21,V_count8_2,B,C,D,E,F,G,H,I,J,K) -> [eval_mem_mono_copy_mono_bb186_in(V_zero',V__17',V__15',V__2',V_63',V__21',V_count8_2',B',C',D',E',F',G',H',I',J',K')] 
1*it(95)+0
  Such that:it(95) =< V_count8_2
it(95) =< V_count8_2-V_count8_2'

#### Cost of phase [95]:eval_mem_mono_copy_mono_bb186_in(V_zero,V__17,V__15,V__2,V_63,V__21,V_count8_2,B,C,D,E,F,G,H,I,J,K) -> [eval_mem_mono_copy_mono_bb186_in(V_zero',V__17',V__15',V__2',V_63',V__21',V_count8_2',B',C',D',E',F',G',H',I',J',K')] 
1*it(95)+0
  Such that:it(95) =< V_count8_2
it(95) =< V_count8_2-V_count8_2'

#### Cost of chains of eval_mem_mono_copy_mono_bb186_in(V_zero,V__17,V__15,V__2,V_63,V__21,V_count8_2,B,C,D,E,F,G,H,I,J,K):
* Chain [[95],97]: 1*it(95)+0
  Such that:it(95) =< V_count8_2-I

  with precondition: [B=2,V_zero=C,V__17=D,V__15=E,V__2=F,V_63=G,V__21=H,15>=I,I>=0,V_63>=V_count8_2,V_count8_2>=I+16] 

* Chain [[95],96]: 1*it(95)+0
  Such that:it(95) =< V_count8_2-K

  with precondition: [B=3,V_zero=C,V__17=D,V__15=E,V__2=F,V_63=G,V__21=H,15>=K,K>=0,V_63>=V_count8_2,V_count8_2>=K+16] 

* Chain [97]: 0
  with precondition: [B=2,C=V_zero,D=V__17,E=V__15,F=V__2,H=V__21,V_63=G,V_count8_2=I,15>=V_count8_2,V_63>=V_count8_2] 

* Chain [96]: 0
  with precondition: [B=3,C=V_zero,D=V__17,E=V__15,F=V__2,H=V__21,V_63=G,V_count8_2=K,15>=V_count8_2,V_63>=V_count8_2] 


#### Cost of loops [99] 

 * loop 99:eval_mem_mono_copy_mono_bb134_in(V_zero,V__17,V__15,V__2,V_63,V__21,B,C,D,E,F) -> [eval_mem_mono_copy_mono_bb134_in(V_zero',V__17',V__15',V__2',V_63',V__21',B',C',D',E',F')] 
2
#### Cost of phase [99]:eval_mem_mono_copy_mono_bb134_in(V_zero,V__17,V__15,V__2,V_63,V__21,B,C,D,E,F) -> [eval_mem_mono_copy_mono_bb134_in(V_zero',V__17',V__15',V__2',V_63',V__21',B',C',D',E',F')] 
2*it(99)+0
#### Cost of phase [99]:eval_mem_mono_copy_mono_bb134_in(V_zero,V__17,V__15,V__2,V_63,V__21,B,C,D,E,F) -> [eval_mem_mono_copy_mono_bb134_in(V_zero',V__17',V__15',V__2',V_63',V__21',B',C',D',E',F')] 
2*it(99)+0
#### Cost of phase [99]:eval_mem_mono_copy_mono_bb134_in(V_zero,V__17,V__15,V__2,V_63,V__21,B,C,D,E,F) -> [eval_mem_mono_copy_mono_bb134_in(V_zero',V__17',V__15',V__2',V_63',V__21',B',C',D',E',F')] 
2*it(99)+0
#### Cost of loops [98] 

 * loop 98:eval_mem_mono_copy_mono_bb134_in(V_zero,V__17,V__15,V__2,V_63,V__21,B,C,D,E,F) -> [eval_mem_mono_copy_mono_bb134_in(V_zero',V__17',V__15',V__2',V_63',V__21',B',C',D',E',F')] 
6*s(33)+2
  Such that:s(32) =< V_63'
s(33) =< s(32)

#### Cost of phase [98]:eval_mem_mono_copy_mono_bb134_in(V_zero,V__17,V__15,V__2,V_63,V__21,B,C,D,E,F) -> [eval_mem_mono_copy_mono_bb134_in(V_zero',V__17',V__15',V__2',V_63',V__21',B',C',D',E',F')] 
2*it(98)+6*s(34)+0
#### Cost of phase [98]:eval_mem_mono_copy_mono_bb134_in(V_zero,V__17,V__15,V__2,V_63,V__21,B,C,D,E,F) -> [eval_mem_mono_copy_mono_bb134_in(V_zero',V__17',V__15',V__2',V_63',V__21',B',C',D',E',F')] 
2*it(98)+6*s(34)+0
#### Cost of phase [98]:eval_mem_mono_copy_mono_bb134_in(V_zero,V__17,V__15,V__2,V_63,V__21,B,C,D,E,F) -> [eval_mem_mono_copy_mono_bb134_in(V_zero',V__17',V__15',V__2',V_63',V__21',B',C',D',E',F')] 
2*it(98)+6*s(34)+0
#### Cost of chains of eval_mem_mono_copy_mono_bb134_in(V_zero,V__17,V__15,V__2,V_63,V__21,B,C,D,E,F):
* Chain [[99]]...: 2*it(99)+0
  with precondition: [15>=V_63] 

* Chain [[99],102]: 2*it(99)+1
  with precondition: [B=9,15>=V_63] 

* Chain [[99],100]: 2*it(99)+0
  with precondition: [B=10,V_zero=C,V__17=D,V__15=E,V__2=F,15>=V_63] 

* Chain [[98]]...: 8*it(98)+0
  with precondition: [V_63>=16] 

* Chain [[98],101]: 8*it(98)+6*s(36)+1
  Such that:aux(13) =< V_63
s(36) =< aux(13)

  with precondition: [B=9,V_63>=16] 

* Chain [[98],100]: 8*it(98)+0
  with precondition: [B=10,V_zero=C,V__17=D,V__15=E,V__2=F,V_63>=16] 

* Chain [102]: 1
  with precondition: [B=9,15>=V_63] 

* Chain [101]: 6*s(36)+1
  Such that:aux(13) =< V_63
s(36) =< aux(13)

  with precondition: [B=9,V_63>=16] 

* Chain [100]: 0
  with precondition: [B=10,C=V_zero,D=V__17,E=V__15,F=V__2] 


#### Cost of loops [105] 

 * loop 105:eval_mem_mono_copy_mono_bb15_in(V__3,B) -> [eval_mem_mono_copy_mono_bb15_in(V__3',B')] 
1
#### Cost of phase [105]:eval_mem_mono_copy_mono_bb15_in(V__3,B) -> [eval_mem_mono_copy_mono_bb15_in(V__3',B')] 
1*it(105)+0
#### Cost of loops [104] 

 * loop 104:eval_mem_mono_copy_mono_bb15_in(V__3,B) -> [eval_mem_mono_copy_mono_bb15_in(V__3',B')] 
1
#### Cost of phase [104]:eval_mem_mono_copy_mono_bb15_in(V__3,B) -> [eval_mem_mono_copy_mono_bb15_in(V__3',B')] 
1*it(104)+0
  Such that:it(104) =< V__3
it(104) =< V__3-V__3'

#### Cost of chains of eval_mem_mono_copy_mono_bb15_in(V__3,B):
* Chain [[105]]...: 1*it(105)+0
  with precondition: [0>=V__3,B=9] 

* Chain [[104],103]: 1*it(104)+0
  Such that:it(104) =< V__3

  with precondition: [B=9,V__3>=2] 

* Chain [103]: 0
  with precondition: [V__3=1,B=9] 


#### Cost of loops [108] 

 * loop 108:eval_mem_mono_copy_mono_bb18_in(V__4,B) -> [eval_mem_mono_copy_mono_bb18_in(V__4',B')] 
1
#### Cost of phase [108]:eval_mem_mono_copy_mono_bb18_in(V__4,B) -> [eval_mem_mono_copy_mono_bb18_in(V__4',B')] 
1*it(108)+0
#### Cost of loops [107] 

 * loop 107:eval_mem_mono_copy_mono_bb18_in(V__4,B) -> [eval_mem_mono_copy_mono_bb18_in(V__4',B')] 
1
#### Cost of phase [107]:eval_mem_mono_copy_mono_bb18_in(V__4,B) -> [eval_mem_mono_copy_mono_bb18_in(V__4',B')] 
1*it(107)+0
  Such that:it(107) =< V__4
it(107) =< V__4-V__4'

#### Cost of chains of eval_mem_mono_copy_mono_bb18_in(V__4,B):
* Chain [[108]]...: 1*it(108)+0
  with precondition: [0>=V__4,B=9] 

* Chain [[107],106]: 1*it(107)+0
  Such that:it(107) =< V__4

  with precondition: [B=9,V__4>=2] 

* Chain [106]: 0
  with precondition: [V__4=1,B=9] 


#### Cost of loops [111] 

 * loop 111:eval_mem_mono_copy_mono_bb21_in(V__5,B) -> [eval_mem_mono_copy_mono_bb21_in(V__5',B')] 
1
#### Cost of phase [111]:eval_mem_mono_copy_mono_bb21_in(V__5,B) -> [eval_mem_mono_copy_mono_bb21_in(V__5',B')] 
1*it(111)+0
#### Cost of loops [110] 

 * loop 110:eval_mem_mono_copy_mono_bb21_in(V__5,B) -> [eval_mem_mono_copy_mono_bb21_in(V__5',B')] 
1
#### Cost of phase [110]:eval_mem_mono_copy_mono_bb21_in(V__5,B) -> [eval_mem_mono_copy_mono_bb21_in(V__5',B')] 
1*it(110)+0
  Such that:it(110) =< V__5
it(110) =< V__5-V__5'

#### Cost of chains of eval_mem_mono_copy_mono_bb21_in(V__5,B):
* Chain [[111]]...: 1*it(111)+0
  with precondition: [0>=V__5,B=9] 

* Chain [[110],109]: 1*it(110)+0
  Such that:it(110) =< V__5

  with precondition: [B=9,V__5>=2] 

* Chain [109]: 0
  with precondition: [V__5=1,B=9] 


#### Cost of loops [112] 

 * loop 112:eval_mem_mono_copy_mono_bb25_in(B) -> [eval_mem_mono_copy_mono_bb25_in(B')] 
1
#### Cost of phase [112]:eval_mem_mono_copy_mono_bb25_in(B) -> [eval_mem_mono_copy_mono_bb25_in(B')] 
1*it(112)+0
#### Cost of phase [112]:eval_mem_mono_copy_mono_bb25_in(B) -> [eval_mem_mono_copy_mono_bb25_in(B')] 
1*it(112)+0
#### Cost of chains of eval_mem_mono_copy_mono_bb25_in(B):
* Chain [[112]]...: 1*it(112)+0
  with precondition: [B=9] 

* Chain [[112],113]: 1*it(112)+0
  with precondition: [B=9] 

* Chain [113]: 0
  with precondition: [B=9] 


#### Cost of loops [114] 

 * loop 114:eval_mem_mono_copy_mono_bb31_in(B) -> [eval_mem_mono_copy_mono_bb31_in(B')] 
1
#### Cost of phase [114]:eval_mem_mono_copy_mono_bb31_in(B) -> [eval_mem_mono_copy_mono_bb31_in(B')] 
1*it(114)+0
#### Cost of phase [114]:eval_mem_mono_copy_mono_bb31_in(B) -> [eval_mem_mono_copy_mono_bb31_in(B')] 
1*it(114)+0
#### Cost of chains of eval_mem_mono_copy_mono_bb31_in(B):
* Chain [[114]]...: 1*it(114)+0
  with precondition: [B=9] 

* Chain [[114],115]: 1*it(114)+0
  with precondition: [B=9] 

* Chain [115]: 0
  with precondition: [B=9] 


#### Cost of loops [116] 

 * loop 116:eval_mem_mono_copy_mono_bb37_in(B) -> [eval_mem_mono_copy_mono_bb37_in(B')] 
1
#### Cost of phase [116]:eval_mem_mono_copy_mono_bb37_in(B) -> [eval_mem_mono_copy_mono_bb37_in(B')] 
1*it(116)+0
#### Cost of phase [116]:eval_mem_mono_copy_mono_bb37_in(B) -> [eval_mem_mono_copy_mono_bb37_in(B')] 
1*it(116)+0
#### Cost of chains of eval_mem_mono_copy_mono_bb37_in(B):
* Chain [[116]]...: 1*it(116)+0
  with precondition: [B=9] 

* Chain [[116],117]: 1*it(116)+0
  with precondition: [B=9] 

* Chain [117]: 0
  with precondition: [B=9] 


#### Cost of loops [118] 

 * loop 118:eval_mem_mono_copy_mono_bb45_in(B) -> [eval_mem_mono_copy_mono_bb45_in(B')] 
1
#### Cost of phase [118]:eval_mem_mono_copy_mono_bb45_in(B) -> [eval_mem_mono_copy_mono_bb45_in(B')] 
1*it(118)+0
#### Cost of phase [118]:eval_mem_mono_copy_mono_bb45_in(B) -> [eval_mem_mono_copy_mono_bb45_in(B')] 
1*it(118)+0
#### Cost of chains of eval_mem_mono_copy_mono_bb45_in(B):
* Chain [[118]]...: 1*it(118)+0
  with precondition: [B=9] 

* Chain [[118],119]: 1*it(118)+0
  with precondition: [B=9] 

* Chain [119]: 0
  with precondition: [B=9] 


#### Cost of loops [120] 

 * loop 120:eval_mem_mono_copy_mono_bb51_in(B) -> [eval_mem_mono_copy_mono_bb51_in(B')] 
1
#### Cost of phase [120]:eval_mem_mono_copy_mono_bb51_in(B) -> [eval_mem_mono_copy_mono_bb51_in(B')] 
1*it(120)+0
#### Cost of phase [120]:eval_mem_mono_copy_mono_bb51_in(B) -> [eval_mem_mono_copy_mono_bb51_in(B')] 
1*it(120)+0
#### Cost of chains of eval_mem_mono_copy_mono_bb51_in(B):
* Chain [[120]]...: 1*it(120)+0
  with precondition: [B=9] 

* Chain [[120],121]: 1*it(120)+0
  with precondition: [B=9] 

* Chain [121]: 0
  with precondition: [B=9] 


#### Cost of loops [122] 

 * loop 122:eval_mem_mono_copy_mono_bb57_in(B) -> [eval_mem_mono_copy_mono_bb57_in(B')] 
1
#### Cost of phase [122]:eval_mem_mono_copy_mono_bb57_in(B) -> [eval_mem_mono_copy_mono_bb57_in(B')] 
1*it(122)+0
#### Cost of phase [122]:eval_mem_mono_copy_mono_bb57_in(B) -> [eval_mem_mono_copy_mono_bb57_in(B')] 
1*it(122)+0
#### Cost of chains of eval_mem_mono_copy_mono_bb57_in(B):
* Chain [[122]]...: 1*it(122)+0
  with precondition: [B=9] 

* Chain [[122],123]: 1*it(122)+0
  with precondition: [B=9] 

* Chain [123]: 0
  with precondition: [B=9] 


#### Cost of loops [124] 

 * loop 124:eval_mem_mono_copy_mono_bb64_in(B) -> [eval_mem_mono_copy_mono_bb64_in(B')] 
1
#### Cost of phase [124]:eval_mem_mono_copy_mono_bb64_in(B) -> [eval_mem_mono_copy_mono_bb64_in(B')] 
1*it(124)+0
#### Cost of phase [124]:eval_mem_mono_copy_mono_bb64_in(B) -> [eval_mem_mono_copy_mono_bb64_in(B')] 
1*it(124)+0
#### Cost of chains of eval_mem_mono_copy_mono_bb64_in(B):
* Chain [[124]]...: 1*it(124)+0
  with precondition: [B=9] 

* Chain [[124],125]: 1*it(124)+0
  with precondition: [B=9] 

* Chain [125]: 0
  with precondition: [B=9] 


#### Cost of loops [126] 

 * loop 126:eval_mem_mono_copy_mono_bb70_in(B) -> [eval_mem_mono_copy_mono_bb70_in(B')] 
1
#### Cost of phase [126]:eval_mem_mono_copy_mono_bb70_in(B) -> [eval_mem_mono_copy_mono_bb70_in(B')] 
1*it(126)+0
#### Cost of phase [126]:eval_mem_mono_copy_mono_bb70_in(B) -> [eval_mem_mono_copy_mono_bb70_in(B')] 
1*it(126)+0
#### Cost of chains of eval_mem_mono_copy_mono_bb70_in(B):
* Chain [[126]]...: 1*it(126)+0
  with precondition: [B=9] 

* Chain [[126],127]: 1*it(126)+0
  with precondition: [B=9] 

* Chain [127]: 0
  with precondition: [B=9] 


#### Cost of loops [128] 

 * loop 128:eval_mem_mono_copy_mono_bb76_in(B) -> [eval_mem_mono_copy_mono_bb76_in(B')] 
1
#### Cost of phase [128]:eval_mem_mono_copy_mono_bb76_in(B) -> [eval_mem_mono_copy_mono_bb76_in(B')] 
1*it(128)+0
#### Cost of phase [128]:eval_mem_mono_copy_mono_bb76_in(B) -> [eval_mem_mono_copy_mono_bb76_in(B')] 
1*it(128)+0
#### Cost of chains of eval_mem_mono_copy_mono_bb76_in(B):
* Chain [[128]]...: 1*it(128)+0
  with precondition: [B=9] 

* Chain [[128],129]: 1*it(128)+0
  with precondition: [B=9] 

* Chain [129]: 0
  with precondition: [B=9] 


#### Cost of loops [130] 

 * loop 130:eval_mem_mono_copy_mono_bb84_in(B) -> [eval_mem_mono_copy_mono_bb84_in(B')] 
1
#### Cost of phase [130]:eval_mem_mono_copy_mono_bb84_in(B) -> [eval_mem_mono_copy_mono_bb84_in(B')] 
1*it(130)+0
#### Cost of phase [130]:eval_mem_mono_copy_mono_bb84_in(B) -> [eval_mem_mono_copy_mono_bb84_in(B')] 
1*it(130)+0
#### Cost of chains of eval_mem_mono_copy_mono_bb84_in(B):
* Chain [[130]]...: 1*it(130)+0
  with precondition: [B=9] 

* Chain [[130],131]: 1*it(130)+0
  with precondition: [B=9] 

* Chain [131]: 0
  with precondition: [B=9] 


#### Cost of loops [132] 

 * loop 132:eval_mem_mono_copy_mono_bb93_in(B) -> [eval_mem_mono_copy_mono_bb93_in(B')] 
1
#### Cost of phase [132]:eval_mem_mono_copy_mono_bb93_in(B) -> [eval_mem_mono_copy_mono_bb93_in(B')] 
1*it(132)+0
#### Cost of phase [132]:eval_mem_mono_copy_mono_bb93_in(B) -> [eval_mem_mono_copy_mono_bb93_in(B')] 
1*it(132)+0
#### Cost of chains of eval_mem_mono_copy_mono_bb93_in(B):
* Chain [[132]]...: 1*it(132)+0
  with precondition: [B=9] 

* Chain [[132],133]: 1*it(132)+0
  with precondition: [B=9] 

* Chain [133]: 0
  with precondition: [B=9] 


#### Cost of chains of loop_cont_eval_mem_mono_copy_mono_bb134_in(F,A,B,C,D,E):
* Chain [135]: 0
  with precondition: [F=9] 

* Chain [134]: 0
  with precondition: [F=10] 


#### Cost of chains of eval_mem_mono_copy_mono_32(V_zero,V__17,V__15,V__2,V__212,B):
* Chain [137]: 3*s(61)+52*s(64)+2
  Such that:aux(28) =< V__212
s(61) =< aux(28)

  with precondition: [] 

* Chain [136]...: 1*aux(29)+0
  with precondition: [] 


#### Cost of chains of eval_mem_mono_copy_mono_bb9_in(V_zero,V__17,V__15,V__2,V__212,B):
* Chain [139]: 3*s(117)+52*s(118)+2
  Such that:s(116) =< V__212
s(117) =< s(116)

  with precondition: [] 

* Chain [138]...: 1*s(119)+0
  with precondition: [] 


#### Cost of chains of eval_mem_mono_copy_mono_bb7_in(V_zero,V__111,V__17,V__15,V__2,B):
* Chain [141]: 3*s(121)+52*s(122)+2
  with precondition: [] 

* Chain [140]...: 1*s(123)+0
  with precondition: [] 


#### Cost of chains of eval_mem_mono_copy_mono_bb5_in(V_zero,V__111,V__19,V__17,V__15,B):
* Chain [143]: 55*s(124)+2
  with precondition: [] 

* Chain [142]...: 1*s(126)+0
  with precondition: [] 


#### Cost of chains of eval_mem_mono_copy_mono_bb3_in(V_y,V_h,V_zero,V__08,V__04,B):
* Chain [145]: 1*aux(30)+0
  with precondition: [] 

* Chain [144]...: 1*aux(31)+0
  with precondition: [] 


#### Cost of chains of eval_mem_mono_copy_mono_bb0_in(V_x,V_y,V_w,V_h,V_zero,B):
* Chain [147]: 1*aux(32)+0
  with precondition: [] 

* Chain [146]...: 1*aux(33)+0
  with precondition: [] 


#### Cost of chains of eval_mem_mono_copy_mono_start(V_sourcex,V_sraster,V_id,V_x,V_y,V_w,V_h,V_zero,V_one,B):
* Chain [149]: 1*s(137)+0
  with precondition: [] 

* Chain [148]...: 1*s(138)+0
  with precondition: [] 


Closed-form bounds of eval_mem_mono_copy_mono_start(V_sourcex,V_sraster,V_id,V_x,V_y,V_w,V_h,V_zero,V_one,B): 
-------------------------------------
* Chain [149] with precondition: [] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [148]... with precondition: [] 
    - Upper bound: inf 
    - Complexity: infinity 

### Maximum cost of eval_mem_mono_copy_mono_start(V_sourcex,V_sraster,V_id,V_x,V_y,V_w,V_h,V_zero,V_one,B): inf 
Asymptotic class: infinity 

Time statistics: 
-------------------------------------
* Partial evaluation computed in 228 ms.
* Invariants computed in 193 ms.
   - Backward Invariants 100 ms.
   - Transitive Invariants 40 ms.
* Refinement performed in 417 ms.
* Termination proved in 36 ms.
* Upper bounds computed in 305 ms.
   - Equation cost structures 121 ms.
   - Phase cost structures 115 ms.
   - Chain cost structures 108 ms.
   - Solving cost expressions 0 ms.
* Total analysis performed in 1383 ms.


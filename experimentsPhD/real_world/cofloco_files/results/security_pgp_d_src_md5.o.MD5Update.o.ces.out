Warning: Ignored call to eval_MD5Update_stop/1 in equation eval_MD5Update_bb10_in/1 

Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. non_recursive  : [eval_MD5Update_bb10_in/1]
1. non_recursive  : [eval_MD5Update_23/1]
2. non_recursive  : [eval_MD5Update_22/2]
3. recursive  : [eval_MD5Update_30/3,eval_MD5Update_31/3,eval_MD5Update_32/3,eval_MD5Update_bb7_in/3]
4. non_recursive  : [eval_MD5Update_36/1]
5. non_recursive  : [eval_MD5Update_35/2]
6. non_recursive  : [loop_cont_eval_MD5Update_bb7_in/3]
7. non_recursive  : [eval_MD5Update_bb6_in/2]
8. non_recursive  : [eval_MD5Update_26/3]
9. non_recursive  : [eval_MD5Update_25/3]
10. non_recursive  : [eval_MD5Update_24/3]
11. non_recursive  : [eval_MD5Update_bb2_in/2]
12. non_recursive  : [eval_MD5Update_bb0_in/2]
13. non_recursive  : [eval_MD5Update_start/2]

#### Obtained direct recursion through partial evaluation 
0. SCC is completely evaluated into other SCCs
1. SCC is completely evaluated into other SCCs
2. SCC is completely evaluated into other SCCs
3. SCC is partially evaluated into eval_MD5Update_bb7_in/3
4. SCC is completely evaluated into other SCCs
5. SCC is completely evaluated into other SCCs
6. SCC is completely evaluated into other SCCs
7. SCC is partially evaluated into eval_MD5Update_bb6_in/2
8. SCC is completely evaluated into other SCCs
9. SCC is completely evaluated into other SCCs
10. SCC is completely evaluated into other SCCs
11. SCC is partially evaluated into eval_MD5Update_bb2_in/2
12. SCC is completely evaluated into other SCCs
13. SCC is partially evaluated into eval_MD5Update_start/2

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations eval_MD5Update_bb7_in/3 
* CE 7 is refined into CE [8] 
* CE 6 is refined into CE [9] 


#### Refined cost equations eval_MD5Update_bb7_in/3 
* CE 8: eval_MD5Update_bb7_in(A,B,A) = 0
     [63>=A,B=2] 
* CE 9: eval_MD5Update_bb7_in(V__12,B,C) = 1+ eval_MD5Update_bb7_in(D,E,C)
     [V__12>=64,V__12=D+64,E=2,B=2] 

### Cost equations --> "Loop" of eval_MD5Update_bb7_in/3 
* CEs [9] --> Loop 6 
* CEs [8] --> Loop 7 

#### Loops of eval_MD5Update_bb7_in/3 
* Loop 6: eval_MD5Update_bb7_in(V__12,B,C)->  eval_MD5Update_bb7_in(V__12',B',C)
                  [V__12>=64,V__12=V__12'+64,B'=2,B=2] 
* Loop 7: eval_MD5Update_bb7_in(A,B,A) [63>=A,B=2] 

### Ranking functions of CR eval_MD5Update_bb7_in(V__12,B,C) 
* RF of phase [6]: [V__12-63]

#### Partial ranking functions of CR eval_MD5Update_bb7_in(V__12,B,C) 
* Partial RF of phase [6]:
  - RF of loop [6:1]:
    V__12-63


### Resulting Chains:eval_MD5Update_bb7_in(V__12,B,C) 
* [[6],7]
* [7]


### Merging Chains  eval_MD5Update_bb7_in/3 into  External patterns of execution 
* [[7]] --> 1 
* [[7,[6]]] --> 2 


### Specialization of cost equations eval_MD5Update_bb6_in/2 
* CE 5 is refined into CE [10,11] 


#### Refined cost equations eval_MD5Update_bb6_in/2 
* CE 10: eval_MD5Update_bb6_in(V__01,B) = 1+ eval_MD5Update_bb7_in(V__01,C,V__01):1
     [63>=V__01,C=2] 
* CE 11: eval_MD5Update_bb6_in(V__01,B) = 1+ eval_MD5Update_bb7_in(V__01,C,D):2
     [V__01>=D+64,D>=0,63>=D,C=2] 

### Cost equations --> "Loop" of eval_MD5Update_bb6_in/2 
* CEs [11] --> Loop 8 
* CEs [10] --> Loop 9 

#### Loops of eval_MD5Update_bb6_in/2 
* Loop 8: eval_MD5Update_bb6_in(V__01,B) [V__01>=64] 
* Loop 9: eval_MD5Update_bb6_in(V__01,B) [63>=V__01] 

### Ranking functions of CR eval_MD5Update_bb6_in(V__01,B) 

#### Partial ranking functions of CR eval_MD5Update_bb6_in(V__01,B) 


### Resulting Chains:eval_MD5Update_bb6_in(V__01,B) 
* [9]
* [8]


### Merging Chains  eval_MD5Update_bb6_in/2 into  External patterns of execution 
* [[9]] --> 1 
* [[8]] --> 2 


### Specialization of cost equations eval_MD5Update_bb2_in/2 
* CE 3 is refined into CE [12] 
* CE 4 is refined into CE [13,14] 


#### Refined cost equations eval_MD5Update_bb2_in/2 
* CE 12: eval_MD5Update_bb2_in(V_len,B) = 0
     [] 
* CE 13: eval_MD5Update_bb2_in(V_len,B) = 0+ eval_MD5Update_bb6_in(C,B):1
     [63>=C] 
* CE 14: eval_MD5Update_bb2_in(V_len,B) = 0+ eval_MD5Update_bb6_in(C,B):2
     [C>=64] 

### Cost equations --> "Loop" of eval_MD5Update_bb2_in/2 
* CEs [12,13,14] --> Loop 10 

#### Loops of eval_MD5Update_bb2_in/2 
* Loop 10: eval_MD5Update_bb2_in(V_len,B) [] 

### Ranking functions of CR eval_MD5Update_bb2_in(V_len,B) 

#### Partial ranking functions of CR eval_MD5Update_bb2_in(V_len,B) 


### Resulting Chains:eval_MD5Update_bb2_in(V_len,B) 
* [10]


### Merging Chains  eval_MD5Update_bb2_in/2 into  External patterns of execution 
* [[10]] --> 1 


### Specialization of cost equations eval_MD5Update_start/2 
* CE 2 is refined into CE [15] 


#### Refined cost equations eval_MD5Update_start/2 
* CE 15: eval_MD5Update_start(V_len,B) = 0+ eval_MD5Update_bb2_in(V_len,B):1
     [] 

### Cost equations --> "Loop" of eval_MD5Update_start/2 
* CEs [15] --> Loop 11 

#### Loops of eval_MD5Update_start/2 
* Loop 11: eval_MD5Update_start(V_len,B) [] 

### Ranking functions of CR eval_MD5Update_start(V_len,B) 

#### Partial ranking functions of CR eval_MD5Update_start(V_len,B) 


### Resulting Chains:eval_MD5Update_start(V_len,B) 
* [11]


### Merging Chains  eval_MD5Update_start/2 into  External patterns of execution 
* [[11]] --> 1 


Computing Bounds
=====================================

#### Cost of loops [6] 

 * loop 6:eval_MD5Update_bb7_in(V__12,B,C) -> [eval_MD5Update_bb7_in(V__12',B',C')] 
1
#### Cost of phase [6]:eval_MD5Update_bb7_in(V__12,B,C) -> [eval_MD5Update_bb7_in(V__12',B',C')] 
1*it(6)+0
  Such that:it(6) =< V__12
it(6) =< V__12-V__12'

#### Cost of chains of eval_MD5Update_bb7_in(V__12,B,C):
* Chain [[6],7]: 1*it(6)+0
  Such that:it(6) =< V__12-C

  with precondition: [B=2,63>=C,C>=0,V__12>=C+64] 

* Chain [7]: 0
  with precondition: [B=2,V__12=C,63>=V__12] 


#### Cost of chains of eval_MD5Update_bb6_in(V__01,B):
* Chain [9]: 1
  with precondition: [63>=V__01] 

* Chain [8]: 1*s(1)+1
  Such that:s(1) =< V__01

  with precondition: [V__01>=64] 


#### Cost of chains of eval_MD5Update_bb2_in(V_len,B):
* Chain [10]: 1*aux(1)+0
  with precondition: [] 


#### Cost of chains of eval_MD5Update_start(V_len,B):
* Chain [11]: 1*s(3)+0
  with precondition: [] 


Closed-form bounds of eval_MD5Update_start(V_len,B): 
-------------------------------------
* Chain [11] with precondition: [] 
    - Upper bound: inf 
    - Complexity: infinity 

### Maximum cost of eval_MD5Update_start(V_len,B): inf 
Asymptotic class: infinity 

Time statistics: 
-------------------------------------
* Partial evaluation computed in 26 ms.
* Invariants computed in 19 ms.
   - Backward Invariants 10 ms.
   - Transitive Invariants 3 ms.
* Refinement performed in 32 ms.
* Termination proved in 4 ms.
* Upper bounds computed in 25 ms.
   - Equation cost structures 13 ms.
   - Phase cost structures 7 ms.
   - Chain cost structures 7 ms.
   - Solving cost expressions 0 ms.
* Total analysis performed in 143 ms.


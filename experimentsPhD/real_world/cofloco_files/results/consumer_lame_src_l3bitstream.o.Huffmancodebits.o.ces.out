Warning: Ignored call to eval_Huffmancodebits_stop/1 in equation eval_Huffmancodebits_137/1 
Warning: Ignored call to eval_Huffmancodebits_stop/1 in equation eval_Huffmancodebits_139/1 
Warning: Ignored call to eval_Huffmancodebits_stop/1 in equation eval_Huffmancodebits_141/1 
Warning: Ignored call to eval_Huffmancodebits_stop/1 in equation eval_Huffmancodebits_42/1 
Warning: Ignored call to eval_Huffmancodebits_stop/1 in equation eval_Huffmancodebits_83/1 
Warning: Ignored call to eval_Huffmancodebits_stop/1 in equation eval_Huffmancodebits_85/1 
Warning: Ignored call to eval_Huffmancodebits_stop/1 in equation eval_Huffmancodebits_87/1 
Warning: Ignored call to eval_Huffmancodebits_stop/1 in equation eval_Huffmancodebits_bb46_in/1 

Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. non_recursive  : [eval_Huffmancodebits_85/1]
1. non_recursive  : [eval_Huffmancodebits_84/1]
2. non_recursive  : [eval_Huffmancodebits_87/1]
3. non_recursive  : [eval_Huffmancodebits_86/1]
4. recursive  : [eval_Huffmancodebits_69/9,eval_Huffmancodebits_70/10,eval_Huffmancodebits_72/12,eval_Huffmancodebits_73/12,eval_Huffmancodebits_76/14,eval_Huffmancodebits_77/14,eval_Huffmancodebits_bb21_in/6,eval_Huffmancodebits_bb27_in/7,eval_Huffmancodebits_bb30_in/10]
5. non_recursive  : [eval_Huffmancodebits_83/1]
6. non_recursive  : [eval_Huffmancodebits_82/1]
7. non_recursive  : [eval_Huffmancodebits_139/1]
8. non_recursive  : [eval_Huffmancodebits_138/1]
9. non_recursive  : [eval_Huffmancodebits_141/1]
10. non_recursive  : [eval_Huffmancodebits_140/1]
11. recursive  : [eval_Huffmancodebits_108/11,eval_Huffmancodebits_109/12,eval_Huffmancodebits_bb37_in/7]
12. recursive  : [eval_Huffmancodebits_124/5,eval_Huffmancodebits_125/5,eval_Huffmancodebits_bb41_in/4]
13. non_recursive  : [eval_Huffmancodebits_137/1]
14. non_recursive  : [eval_Huffmancodebits_136/1]
15. non_recursive  : [eval_Huffmancodebits_bb46_in/1]
16. non_recursive  : [eval_Huffmancodebits_bb45_in/1]
17. non_recursive  : [eval_Huffmancodebits_128/1]
18. non_recursive  : [eval_Huffmancodebits_127/2]
19. non_recursive  : [loop_cont_eval_Huffmancodebits_bb41_in/3]
20. non_recursive  : [eval_Huffmancodebits_121/3]
21. non_recursive  : [eval_Huffmancodebits_120/3]
22. non_recursive  : [eval_Huffmancodebits_119/4]
23. non_recursive  : [loop_cont_eval_Huffmancodebits_bb37_in/5]
24. non_recursive  : [eval_Huffmancodebits_bb34_in/3]
25. non_recursive  : [loop_cont_eval_Huffmancodebits_bb21_in/4]
26. non_recursive  : [eval_Huffmancodebits_bb20_in/2]
27. non_recursive  : [eval_Huffmancodebits_bb16_in/2]
28. recursive  : [eval_Huffmancodebits_25/21,eval_Huffmancodebits_26/22,eval_Huffmancodebits_28/24,eval_Huffmancodebits_29/24,eval_Huffmancodebits_32/26,eval_Huffmancodebits_33/26,eval_Huffmancodebits_bb11_in/19]
29. recursive  : [eval_Huffmancodebits_bb9_in/12,loop_cont_eval_Huffmancodebits_bb11_in/13]
30. recursive  : [eval_Huffmancodebits_bb4_in/6,eval_Huffmancodebits_bb8_in/9,loop_cont_eval_Huffmancodebits_bb9_in/7]
31. non_recursive  : [eval_Huffmancodebits_42/1]
32. non_recursive  : [eval_Huffmancodebits_41/1]
33. non_recursive  : [loop_cont_eval_Huffmancodebits_bb4_in/4]
34. non_recursive  : [eval_Huffmancodebits_bb0_in/1]
35. non_recursive  : [eval_Huffmancodebits_start/1]

#### Obtained direct recursion through partial evaluation 
0. SCC is completely evaluated into other SCCs
1. SCC is completely evaluated into other SCCs
2. SCC is completely evaluated into other SCCs
3. SCC is completely evaluated into other SCCs
4. SCC is partially evaluated into eval_Huffmancodebits_bb21_in/6
5. SCC is completely evaluated into other SCCs
6. SCC is completely evaluated into other SCCs
7. SCC is completely evaluated into other SCCs
8. SCC is completely evaluated into other SCCs
9. SCC is completely evaluated into other SCCs
10. SCC is completely evaluated into other SCCs
11. SCC is partially evaluated into eval_Huffmancodebits_bb37_in/7
12. SCC is partially evaluated into eval_Huffmancodebits_bb41_in/4
13. SCC is completely evaluated into other SCCs
14. SCC is completely evaluated into other SCCs
15. SCC is partially evaluated into eval_Huffmancodebits_bb46_in/1
16. SCC is completely evaluated into other SCCs
17. SCC is completely evaluated into other SCCs
18. SCC is completely evaluated into other SCCs
19. SCC is partially evaluated into loop_cont_eval_Huffmancodebits_bb41_in/3
20. SCC is partially evaluated into eval_Huffmancodebits_121/3
21. SCC is completely evaluated into other SCCs
22. SCC is completely evaluated into other SCCs
23. SCC is partially evaluated into loop_cont_eval_Huffmancodebits_bb37_in/5
24. SCC is partially evaluated into eval_Huffmancodebits_bb34_in/3
25. SCC is partially evaluated into loop_cont_eval_Huffmancodebits_bb21_in/4
26. SCC is partially evaluated into eval_Huffmancodebits_bb20_in/2
27. SCC is partially evaluated into eval_Huffmancodebits_bb16_in/2
28. SCC is partially evaluated into eval_Huffmancodebits_bb11_in/19
29. SCC is partially evaluated into eval_Huffmancodebits_bb9_in/12
30. SCC is partially evaluated into eval_Huffmancodebits_bb4_in/6
31. SCC is completely evaluated into other SCCs
32. SCC is completely evaluated into other SCCs
33. SCC is partially evaluated into loop_cont_eval_Huffmancodebits_bb4_in/4
34. SCC is partially evaluated into eval_Huffmancodebits_bb0_in/1
35. SCC is partially evaluated into eval_Huffmancodebits_start/1

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations eval_Huffmancodebits_bb21_in/6 
* CE 25 is refined into CE [40] 
* CE 27 is refined into CE [41] 
* CE 26 is refined into CE [42] 


#### Refined cost equations eval_Huffmancodebits_bb21_in/6 
* CE 40: eval_Huffmancodebits_bb21_in(V_2,V_bitsWritten_3,V_i_0,B,C,D) = 0
     [V_2>=V_i_0+1,V_i_0>=0,B=10] 
* CE 41: eval_Huffmancodebits_bb21_in(A,B,C,D,A,B) = 0
     [C>=A,C>=0,D=4] 
* CE 42: eval_Huffmancodebits_bb21_in(V_2,V_bitsWritten_3,V_i_0,B,C,D) = 1+ eval_Huffmancodebits_bb21_in(V_2,E,F,B,C,D)
     [V_2>=V_i_0+1,V_i_0>=0,V_i_0+2=F] 

### Cost equations --> "Loop" of eval_Huffmancodebits_bb21_in/6 
* CEs [42] --> Loop 35 
* CEs [40] --> Loop 36 
* CEs [41] --> Loop 37 

#### Loops of eval_Huffmancodebits_bb21_in/6 
* Loop 35: eval_Huffmancodebits_bb21_in(V_2,V_bitsWritten_3,V_i_0,B,C,D)->  eval_Huffmancodebits_bb21_in(V_2,V_bitsWritten_3',V_i_0',B,C,D)
                  [V_2>=V_i_0+1,V_i_0>=0,V_i_0+2=V_i_0'] 
* Loop 36: eval_Huffmancodebits_bb21_in(V_2,V_bitsWritten_3,V_i_0,B,C,D) [V_2>=V_i_0+1,V_i_0>=0,B=10] 
* Loop 37: eval_Huffmancodebits_bb21_in(A,B,C,D,A,B) [C>=A,C>=0,D=4] 

### Ranking functions of CR eval_Huffmancodebits_bb21_in(V_2,V_bitsWritten_3,V_i_0,B,C,D) 
* RF of phase [35]: [V_2/2-V_i_0/2]

#### Partial ranking functions of CR eval_Huffmancodebits_bb21_in(V_2,V_bitsWritten_3,V_i_0,B,C,D) 
* Partial RF of phase [35]:
  - RF of loop [35:1]:
    V_2/2-V_i_0/2


### Resulting Chains:eval_Huffmancodebits_bb21_in(V_2,V_bitsWritten_3,V_i_0,B,C,D) 
* [[35],37]
* [[35],36]
* [37]
* [36]


### Merging Chains  eval_Huffmancodebits_bb21_in/6 into  External patterns of execution 
* [[37]] --> 1 
* [[37,[35]]] --> 2 
* [[36],[36,[35]]] --> 3 


### Specialization of cost equations eval_Huffmancodebits_bb37_in/7 
* CE 22 is refined into CE [43] 
* CE 20 is refined into CE [44] 
* CE 21 is refined into CE [45] 
* CE 19 is refined into CE [46] 
* CE 18 is refined into CE [47] 


#### Refined cost equations eval_Huffmancodebits_bb37_in/7 
* CE 43: eval_Huffmancodebits_bb37_in(V_125,V_bitsWritten_7,V_i_1,B,C,D,E) = 0
     [V_i_1>=V_125,B=9] 
* CE 44: eval_Huffmancodebits_bb37_in(V_125,V_bitsWritten_7,V_i_1,B,C,D,E) = 0
     [32*D+31>=C,V_i_1>=V_125,C>=32*D,E>=0,D>=0,C>=1,31>=E,B=8] 
* CE 45: eval_Huffmancodebits_bb37_in(V_125,V_bitsWritten_7,V_i_1,B,C,D,E) = 0
     [32*D>=C,V_i_1>=V_125,C+31>=32*D,E+31>=0,0>=E,0>=D,0>=C+1,B=8] 
* CE 46: eval_Huffmancodebits_bb37_in(V_125,V_bitsWritten_7,V_i_1,B,C,D,E) = 0
     [V_i_1>=V_125,E=0,D=0,C=0,B=8] 
* CE 47: eval_Huffmancodebits_bb37_in(V_125,V_bitsWritten_7,V_i_1,B,C,D,E) = 1+ eval_Huffmancodebits_bb37_in(V_125,F,G,B,C,D,E)
     [V_125>=V_i_1+1,V_i_1+4=G] 

### Cost equations --> "Loop" of eval_Huffmancodebits_bb37_in/7 
* CEs [47] --> Loop 38 
* CEs [43] --> Loop 39 
* CEs [44] --> Loop 40 
* CEs [45] --> Loop 41 
* CEs [46] --> Loop 42 

#### Loops of eval_Huffmancodebits_bb37_in/7 
* Loop 38: eval_Huffmancodebits_bb37_in(V_125,V_bitsWritten_7,V_i_1,B,C,D,E)->  eval_Huffmancodebits_bb37_in(V_125,V_bitsWritten_7',V_i_1',B,C,D,E)
                  [V_125>=V_i_1+1,V_i_1+4=V_i_1'] 
* Loop 39: eval_Huffmancodebits_bb37_in(V_125,V_bitsWritten_7,V_i_1,B,C,D,E) [V_i_1>=V_125,B=9] 
* Loop 40: eval_Huffmancodebits_bb37_in(V_125,V_bitsWritten_7,V_i_1,B,C,D,E) [32*D+31>=C,V_i_1>=V_125,C>=32*D,E>=0,D>=0,C>=1,31>=E,B=8] 
* Loop 41: eval_Huffmancodebits_bb37_in(V_125,V_bitsWritten_7,V_i_1,B,C,D,E) [32*D>=C,V_i_1>=V_125,C+31>=32*D,E+31>=0,0>=E,0>=D,0>=C+1,B=8] 
* Loop 42: eval_Huffmancodebits_bb37_in(V_125,V_bitsWritten_7,V_i_1,B,C,D,E) [V_i_1>=V_125,E=0,D=0,C=0,B=8] 

### Ranking functions of CR eval_Huffmancodebits_bb37_in(V_125,V_bitsWritten_7,V_i_1,B,C,D,E) 
* RF of phase [38]: [V_125/4-V_i_1/4]

#### Partial ranking functions of CR eval_Huffmancodebits_bb37_in(V_125,V_bitsWritten_7,V_i_1,B,C,D,E) 
* Partial RF of phase [38]:
  - RF of loop [38:1]:
    V_125/4-V_i_1/4


### Resulting Chains:eval_Huffmancodebits_bb37_in(V_125,V_bitsWritten_7,V_i_1,B,C,D,E) 
* [[38],42]
* [[38],41]
* [[38],40]
* [[38],39]
* [42]
* [41]
* [40]
* [39]


### Merging Chains  eval_Huffmancodebits_bb37_in/7 into  External patterns of execution 
* [[42]] --> 1 
* [[42,[38]]] --> 2 
* [[41]] --> 3 
* [[41,[38]]] --> 4 
* [[40]] --> 5 
* [[40,[38]]] --> 6 
* [[39]] --> 7 
* [[39,[38]]] --> 8 


### Specialization of cost equations eval_Huffmancodebits_bb41_in/4 
* CE 37 is refined into CE [48] 
* CE 36 is refined into CE [49] 
* CE 34 is refined into CE [50] 
* CE 35 is refined into CE [51] 


#### Refined cost equations eval_Huffmancodebits_bb41_in/4 
* CE 48: eval_Huffmancodebits_bb41_in(V_159,V_stuffingWords_0,B,C) = 0
     [B=7,V_stuffingWords_0=0] 
* CE 49: eval_Huffmancodebits_bb41_in(A,B,C,A) = 0
     [C=6,B=0] 
* CE 50: eval_Huffmancodebits_bb41_in(V_159,V_stuffingWords_0,B,C) = 1+ eval_Huffmancodebits_bb41_in(V_159,D,B,C)
     [V_stuffingWords_0>=1,V_stuffingWords_0=D+1] 
* CE 51: eval_Huffmancodebits_bb41_in(V_159,V_stuffingWords_0,B,C) = 1+ eval_Huffmancodebits_bb41_in(V_159,D,B,C)
     [0>=V_stuffingWords_0+1,V_stuffingWords_0=D+1] 

### Cost equations --> "Loop" of eval_Huffmancodebits_bb41_in/4 
* CEs [50] --> Loop 43 
* CEs [51] --> Loop 44 
* CEs [48] --> Loop 45 
* CEs [49] --> Loop 46 

#### Loops of eval_Huffmancodebits_bb41_in/4 
* Loop 43: eval_Huffmancodebits_bb41_in(V_159,V_stuffingWords_0,B,C)->  eval_Huffmancodebits_bb41_in(V_159,V_stuffingWords_0',B,C)
                  [V_stuffingWords_0>=1,V_stuffingWords_0=V_stuffingWords_0'+1] 
* Loop 44: eval_Huffmancodebits_bb41_in(V_159,V_stuffingWords_0,B,C)->  eval_Huffmancodebits_bb41_in(V_159,V_stuffingWords_0',B,C)
                  [0>=V_stuffingWords_0+1,V_stuffingWords_0=V_stuffingWords_0'+1] 
* Loop 45: eval_Huffmancodebits_bb41_in(V_159,V_stuffingWords_0,B,C) [B=7,V_stuffingWords_0=0] 
* Loop 46: eval_Huffmancodebits_bb41_in(A,B,C,A) [C=6,B=0] 

### Ranking functions of CR eval_Huffmancodebits_bb41_in(V_159,V_stuffingWords_0,B,C) 
* RF of phase [43]: [V_stuffingWords_0]

#### Partial ranking functions of CR eval_Huffmancodebits_bb41_in(V_159,V_stuffingWords_0,B,C) 
* Partial RF of phase [43]:
  - RF of loop [43:1]:
    V_stuffingWords_0


### Resulting Chains:eval_Huffmancodebits_bb41_in(V_159,V_stuffingWords_0,B,C) 
* [[44]]...
* [[43],46]
* [[43],45]
* [46]
* [45]


### Merging Chains  eval_Huffmancodebits_bb41_in/4 into  External patterns of execution 
* [[46]] --> 1 
* [[45]] --> 2 
* [[46,[43]]] --> 3 
* [[45,[43]]] --> 4 
* [[[44]]] --> 5 


### Specialization of cost equations eval_Huffmancodebits_bb46_in/1 
* CE 33 is refined into CE [52] 


#### Refined cost equations eval_Huffmancodebits_bb46_in/1 
* CE 52: eval_Huffmancodebits_bb46_in(B) = 0
     [] 

### Cost equations --> "Loop" of eval_Huffmancodebits_bb46_in/1 
* CEs [52] --> Loop 47 

#### Loops of eval_Huffmancodebits_bb46_in/1 
* Loop 47: eval_Huffmancodebits_bb46_in(B) [] 

### Ranking functions of CR eval_Huffmancodebits_bb46_in(B) 

#### Partial ranking functions of CR eval_Huffmancodebits_bb46_in(B) 


### Resulting Chains:eval_Huffmancodebits_bb46_in(B) 
* [47]


### Merging Chains  eval_Huffmancodebits_bb46_in/1 into  External patterns of execution 
* [[47]] --> 1 


### Specialization of cost equations loop_cont_eval_Huffmancodebits_bb41_in/3 
* CE 39 is refined into CE [53] 
* CE 38 is refined into CE [54] 


#### Refined cost equations loop_cont_eval_Huffmancodebits_bb41_in/3 
* CE 53: loop_cont_eval_Huffmancodebits_bb41_in(D,A,B) = 0+ eval_Huffmancodebits_bb46_in(B):1
     [D=7] 
* CE 54: loop_cont_eval_Huffmancodebits_bb41_in(D,A,B) = 0+ eval_Huffmancodebits_bb46_in(B):1
     [D=6] 

### Cost equations --> "Loop" of loop_cont_eval_Huffmancodebits_bb41_in/3 
* CEs [53] --> Loop 48 
* CEs [54] --> Loop 49 

#### Loops of loop_cont_eval_Huffmancodebits_bb41_in/3 
* Loop 48: loop_cont_eval_Huffmancodebits_bb41_in(D,A,B) [D=7] 
* Loop 49: loop_cont_eval_Huffmancodebits_bb41_in(D,A,B) [D=6] 

### Ranking functions of CR loop_cont_eval_Huffmancodebits_bb41_in(D,A,B) 

#### Partial ranking functions of CR loop_cont_eval_Huffmancodebits_bb41_in(D,A,B) 


### Resulting Chains:loop_cont_eval_Huffmancodebits_bb41_in(D,A,B) 
* [49]
* [48]


### Merging Chains  loop_cont_eval_Huffmancodebits_bb41_in/3 into  External patterns of execution 
* [[49]] --> 1 
* [[48]] --> 2 


### Specialization of cost equations eval_Huffmancodebits_121/3 
* CE 32 is refined into CE [55,56,57,58,59] 


#### Refined cost equations eval_Huffmancodebits_121/3 
* CE 55: eval_Huffmancodebits_121(V_158,V_159,B) = 1+ eval_Huffmancodebits_bb41_in(V_159,C,D,V_159):1+ loop_cont_eval_Huffmancodebits_bb41_in(E,V_159,B):1
     [E=6,D=6,C=0,V_158=0] 
* CE 56: eval_Huffmancodebits_121(V_158,V_159,B) = 1+ eval_Huffmancodebits_bb41_in(V_159,C,D,E):2+ loop_cont_eval_Huffmancodebits_bb41_in(F,E,B):2
     [F=7,D=7,C=0,V_158=0] 
* CE 57: eval_Huffmancodebits_121(V_158,V_159,B) = 1+ eval_Huffmancodebits_bb41_in(V_159,V_158,C,V_159):3+ loop_cont_eval_Huffmancodebits_bb41_in(D,V_159,B):1
     [V_158>=1,D=6,C=6] 
* CE 58: eval_Huffmancodebits_121(V_158,V_159,B) = 1+ eval_Huffmancodebits_bb41_in(V_159,V_158,C,D):4+ loop_cont_eval_Huffmancodebits_bb41_in(E,D,B):2
     [V_158>=1,E=7,C=7] 
* CE 59: eval_Huffmancodebits_121(V_158,V_159,B) = 1+ eval_Huffmancodebits_bb41_in(V_159,V_158,C,D):5
     [0>=V_158+1] 

### Cost equations --> "Loop" of eval_Huffmancodebits_121/3 
* CEs [59] --> Loop 50 
* CEs [57,58] --> Loop 51 
* CEs [55,56] --> Loop 52 

#### Loops of eval_Huffmancodebits_121/3 
* Loop 50: eval_Huffmancodebits_121(V_158,V_159,B) [0>=V_158+1] 
* Loop 51: eval_Huffmancodebits_121(V_158,V_159,B) [V_158>=1] 
* Loop 52: eval_Huffmancodebits_121(V_158,V_159,B) [V_158=0] 

### Ranking functions of CR eval_Huffmancodebits_121(V_158,V_159,B) 

#### Partial ranking functions of CR eval_Huffmancodebits_121(V_158,V_159,B) 


### Resulting Chains:eval_Huffmancodebits_121(V_158,V_159,B) 
* [52]
* [51]
* [50]...


### Merging Chains  eval_Huffmancodebits_121/3 into  External patterns of execution 
* [[52]] --> 1 
* [[51]] --> 2 
* [[50]] --> 3 


### Specialization of cost equations loop_cont_eval_Huffmancodebits_bb37_in/5 
* CE 24 is refined into CE [60] 
* CE 23 is refined into CE [61,62,63] 


#### Refined cost equations loop_cont_eval_Huffmancodebits_bb37_in/5 
* CE 60: loop_cont_eval_Huffmancodebits_bb37_in(L,A,B,C,D) = 0+ eval_Huffmancodebits_bb46_in(D):1
     [L=9] 
* CE 61: loop_cont_eval_Huffmancodebits_bb37_in(L,A,B,C,D) = 0+ eval_Huffmancodebits_121(M,C,D):1
     [M=0,B=0,L=8] 
* CE 62: loop_cont_eval_Huffmancodebits_bb37_in(L,A,B,C,D) = 0+ eval_Huffmancodebits_121(B,C,D):2
     [B>=1,L=8] 
* CE 63: loop_cont_eval_Huffmancodebits_bb37_in(L,A,B,C,D) = 0+ eval_Huffmancodebits_121(B,C,D):3
     [0>=B+1,L=8] 

### Cost equations --> "Loop" of loop_cont_eval_Huffmancodebits_bb37_in/5 
* CEs [63] --> Loop 53 
* CEs [60] --> Loop 54 
* CEs [62] --> Loop 55 
* CEs [61] --> Loop 56 

#### Loops of loop_cont_eval_Huffmancodebits_bb37_in/5 
* Loop 53: loop_cont_eval_Huffmancodebits_bb37_in(L,A,B,C,D) [0>=B+1,L=8] 
* Loop 54: loop_cont_eval_Huffmancodebits_bb37_in(L,A,B,C,D) [L=9] 
* Loop 55: loop_cont_eval_Huffmancodebits_bb37_in(L,A,B,C,D) [B>=1,L=8] 
* Loop 56: loop_cont_eval_Huffmancodebits_bb37_in(L,A,B,C,D) [B=0,L=8] 

### Ranking functions of CR loop_cont_eval_Huffmancodebits_bb37_in(L,A,B,C,D) 

#### Partial ranking functions of CR loop_cont_eval_Huffmancodebits_bb37_in(L,A,B,C,D) 


### Resulting Chains:loop_cont_eval_Huffmancodebits_bb37_in(L,A,B,C,D) 
* [56]
* [55]
* [54]
* [53]...


### Merging Chains  loop_cont_eval_Huffmancodebits_bb37_in/5 into  External patterns of execution 
* [[56]] --> 1 
* [[55]] --> 2 
* [[54]] --> 3 
* [[53]] --> 4 


### Specialization of cost equations eval_Huffmancodebits_bb34_in/3 
* CE 13 is refined into CE [64,65,66,67,68,69,70,71,72,73,74,75] 
* CE 14 is refined into CE [76] 


#### Refined cost equations eval_Huffmancodebits_bb34_in/3 
* CE 64: eval_Huffmancodebits_bb34_in(V_2,V_bitsWritten_6,B) = 1+ eval_Huffmancodebits_bb37_in(C,V_bitsWritten_6,V_2,D,E,F,G):1+ loop_cont_eval_Huffmancodebits_bb37_in(H,I,J,K,B):1
     [V_2>=C,K=0,J=0,I=0,H=8,G=0,F=0,E=0,D=8] 
* CE 65: eval_Huffmancodebits_bb34_in(V_2,V_bitsWritten_6,B) = 1+ eval_Huffmancodebits_bb37_in(C,V_bitsWritten_6,V_2,D,E,F,G):2+ loop_cont_eval_Huffmancodebits_bb37_in(H,I,J,K,B):1
     [C>=V_2+1,K=0,J=0,I=0,H=8,G=0,F=0,E=0,D=8] 
* CE 66: eval_Huffmancodebits_bb34_in(V_2,V_bitsWritten_6,B) = 1+ eval_Huffmancodebits_bb37_in(C,V_bitsWritten_6,V_2,D,E,F,G):3+ loop_cont_eval_Huffmancodebits_bb37_in(H,E,I,G,B):1
     [V_2>=C,G+31>=0,E+31>=0,0>=G,0>=E+1,I=0,H=8,F=0,D=8] 
* CE 67: eval_Huffmancodebits_bb34_in(V_2,V_bitsWritten_6,B) = 1+ eval_Huffmancodebits_bb37_in(C,V_bitsWritten_6,V_2,D,E,F,G):3+ loop_cont_eval_Huffmancodebits_bb37_in(H,E,F,G,B):4
     [32*F>=E,V_2>=C,E+31>=32*F,G+31>=0,0>=F+1,0>=G,H=8,D=8] 
* CE 68: eval_Huffmancodebits_bb34_in(V_2,V_bitsWritten_6,B) = 1+ eval_Huffmancodebits_bb37_in(C,V_bitsWritten_6,V_2,D,E,F,G):4+ loop_cont_eval_Huffmancodebits_bb37_in(H,E,I,G,B):1
     [C>=V_2+1,G+31>=0,E+31>=0,0>=G,0>=E+1,I=0,H=8,F=0,D=8] 
* CE 69: eval_Huffmancodebits_bb34_in(V_2,V_bitsWritten_6,B) = 1+ eval_Huffmancodebits_bb37_in(C,V_bitsWritten_6,V_2,D,E,F,G):4+ loop_cont_eval_Huffmancodebits_bb37_in(H,E,F,G,B):4
     [32*F>=E,C>=V_2+1,E+31>=32*F,G+31>=0,0>=F+1,0>=G,H=8,D=8] 
* CE 70: eval_Huffmancodebits_bb34_in(V_2,V_bitsWritten_6,B) = 1+ eval_Huffmancodebits_bb37_in(C,V_bitsWritten_6,V_2,D,E,F,G):5+ loop_cont_eval_Huffmancodebits_bb37_in(H,E,I,G,B):1
     [V_2>=C,G>=0,E>=1,31>=G,31>=E,I=0,H=8,F=0,D=8] 
* CE 71: eval_Huffmancodebits_bb34_in(V_2,V_bitsWritten_6,B) = 1+ eval_Huffmancodebits_bb37_in(C,V_bitsWritten_6,V_2,D,E,F,G):5+ loop_cont_eval_Huffmancodebits_bb37_in(H,E,F,G,B):2
     [32*F+31>=E,V_2>=C,E>=32*F,F>=1,G>=0,31>=G,H=8,D=8] 
* CE 72: eval_Huffmancodebits_bb34_in(V_2,V_bitsWritten_6,B) = 1+ eval_Huffmancodebits_bb37_in(C,V_bitsWritten_6,V_2,D,E,F,G):6+ loop_cont_eval_Huffmancodebits_bb37_in(H,E,I,G,B):1
     [C>=V_2+1,G>=0,E>=1,31>=G,31>=E,I=0,H=8,F=0,D=8] 
* CE 73: eval_Huffmancodebits_bb34_in(V_2,V_bitsWritten_6,B) = 1+ eval_Huffmancodebits_bb37_in(C,V_bitsWritten_6,V_2,D,E,F,G):6+ loop_cont_eval_Huffmancodebits_bb37_in(H,E,F,G,B):2
     [32*F+31>=E,C>=V_2+1,E>=32*F,F>=1,G>=0,31>=G,H=8,D=8] 
* CE 74: eval_Huffmancodebits_bb34_in(V_2,V_bitsWritten_6,B) = 1+ eval_Huffmancodebits_bb37_in(C,V_bitsWritten_6,V_2,D,E,F,G):7+ loop_cont_eval_Huffmancodebits_bb37_in(H,E,F,G,B):3
     [V_2>=C,H=9,D=9] 
* CE 75: eval_Huffmancodebits_bb34_in(V_2,V_bitsWritten_6,B) = 1+ eval_Huffmancodebits_bb37_in(C,V_bitsWritten_6,V_2,D,E,F,G):8+ loop_cont_eval_Huffmancodebits_bb37_in(H,E,F,G,B):3
     [C>=V_2+1,H=9,D=9] 
* CE 76: eval_Huffmancodebits_bb34_in(V_2,V_bitsWritten_6,B) = 0
     [] 

### Cost equations --> "Loop" of eval_Huffmancodebits_bb34_in/3 
* CEs [64,65,66,68,70,71,72,73,74,75,76] --> Loop 57 
* CEs [67,69] --> Loop 58 

#### Loops of eval_Huffmancodebits_bb34_in/3 
* Loop 57: eval_Huffmancodebits_bb34_in(V_2,V_bitsWritten_6,B) [] 
* Loop 58: eval_Huffmancodebits_bb34_in(V_2,V_bitsWritten_6,B) [] 

### Ranking functions of CR eval_Huffmancodebits_bb34_in(V_2,V_bitsWritten_6,B) 

#### Partial ranking functions of CR eval_Huffmancodebits_bb34_in(V_2,V_bitsWritten_6,B) 


### Resulting Chains:eval_Huffmancodebits_bb34_in(V_2,V_bitsWritten_6,B) 
* [58]...
* [57]


### Merging Chains  eval_Huffmancodebits_bb34_in/3 into  External patterns of execution 
* [[57]] --> 1 
* [[58]] --> 2 


### Specialization of cost equations loop_cont_eval_Huffmancodebits_bb21_in/4 
* CE 29 is refined into CE [77] 
* CE 28 is refined into CE [78,79] 


#### Refined cost equations loop_cont_eval_Huffmancodebits_bb21_in/4 
* CE 77: loop_cont_eval_Huffmancodebits_bb21_in(F,A,B,C) = 0
     [F=10] 
* CE 78: loop_cont_eval_Huffmancodebits_bb21_in(F,A,B,C) = 0+ eval_Huffmancodebits_bb34_in(A,B,C):1
     [F=4] 
* CE 79: loop_cont_eval_Huffmancodebits_bb21_in(F,A,B,C) = 0+ eval_Huffmancodebits_bb34_in(A,B,C):2
     [F=4] 

### Cost equations --> "Loop" of loop_cont_eval_Huffmancodebits_bb21_in/4 
* CEs [79] --> Loop 59 
* CEs [77] --> Loop 60 
* CEs [78] --> Loop 61 

#### Loops of loop_cont_eval_Huffmancodebits_bb21_in/4 
* Loop 59: loop_cont_eval_Huffmancodebits_bb21_in(F,A,B,C) [F=4] 
* Loop 60: loop_cont_eval_Huffmancodebits_bb21_in(F,A,B,C) [F=10] 
* Loop 61: loop_cont_eval_Huffmancodebits_bb21_in(F,A,B,C) [F=4] 

### Ranking functions of CR loop_cont_eval_Huffmancodebits_bb21_in(F,A,B,C) 

#### Partial ranking functions of CR loop_cont_eval_Huffmancodebits_bb21_in(F,A,B,C) 


### Resulting Chains:loop_cont_eval_Huffmancodebits_bb21_in(F,A,B,C) 
* [61]
* [60]
* [59]...


### Merging Chains  loop_cont_eval_Huffmancodebits_bb21_in/4 into  External patterns of execution 
* [[61]] --> 1 
* [[60]] --> 2 
* [[59]] --> 3 


### Specialization of cost equations eval_Huffmancodebits_bb20_in/2 
* CE 15 is refined into CE [80,81,82,83,84] 


#### Refined cost equations eval_Huffmancodebits_bb20_in/2 
* CE 80: eval_Huffmancodebits_bb20_in(V_2,B) = 1+ eval_Huffmancodebits_bb21_in(V_2,C,D,E,V_2,F):1+ loop_cont_eval_Huffmancodebits_bb21_in(G,V_2,H,B):1
     [0>=V_2,H=0,G=4,F=0,E=4,D=0,C=0] 
* CE 81: eval_Huffmancodebits_bb20_in(V_2,B) = 1+ eval_Huffmancodebits_bb21_in(V_2,C,D,E,V_2,F):1+ loop_cont_eval_Huffmancodebits_bb21_in(G,V_2,H,B):3
     [0>=V_2,H=0,G=4,F=0,E=4,D=0,C=0] 
* CE 82: eval_Huffmancodebits_bb20_in(V_2,B) = 1+ eval_Huffmancodebits_bb21_in(V_2,C,D,E,V_2,F):2+ loop_cont_eval_Huffmancodebits_bb21_in(G,V_2,F,B):1
     [V_2>=1,G=4,E=4,D=0,C=0] 
* CE 83: eval_Huffmancodebits_bb20_in(V_2,B) = 1+ eval_Huffmancodebits_bb21_in(V_2,C,D,E,V_2,F):2+ loop_cont_eval_Huffmancodebits_bb21_in(G,V_2,F,B):3
     [V_2>=1,G=4,E=4,D=0,C=0] 
* CE 84: eval_Huffmancodebits_bb20_in(V_2,B) = 1+ eval_Huffmancodebits_bb21_in(V_2,C,D,E,F,G):3+ loop_cont_eval_Huffmancodebits_bb21_in(H,F,G,B):2
     [V_2>=1,H=10,E=10,D=0,C=0] 

### Cost equations --> "Loop" of eval_Huffmancodebits_bb20_in/2 
* CEs [82,84] --> Loop 62 
* CEs [80] --> Loop 63 
* CEs [83] --> Loop 64 
* CEs [81] --> Loop 65 

#### Loops of eval_Huffmancodebits_bb20_in/2 
* Loop 62: eval_Huffmancodebits_bb20_in(V_2,B) [V_2>=1] 
* Loop 63: eval_Huffmancodebits_bb20_in(V_2,B) [0>=V_2] 
* Loop 64: eval_Huffmancodebits_bb20_in(V_2,B) [V_2>=1] 
* Loop 65: eval_Huffmancodebits_bb20_in(V_2,B) [0>=V_2] 

### Ranking functions of CR eval_Huffmancodebits_bb20_in(V_2,B) 

#### Partial ranking functions of CR eval_Huffmancodebits_bb20_in(V_2,B) 


### Resulting Chains:eval_Huffmancodebits_bb20_in(V_2,B) 
* [65]...
* [64]...
* [63]
* [62]


### Merging Chains  eval_Huffmancodebits_bb20_in/2 into  External patterns of execution 
* [[63]] --> 1 
* [[62]] --> 2 
* [[65]] --> 3 
* [[64]] --> 4 


### Specialization of cost equations eval_Huffmancodebits_bb16_in/2 
* CE 6 is refined into CE [85,86,87,88] 
* CE 7 is refined into CE [89] 


#### Refined cost equations eval_Huffmancodebits_bb16_in/2 
* CE 85: eval_Huffmancodebits_bb16_in(V_2,B) = 0+ eval_Huffmancodebits_bb20_in(V_2,B):1
     [0>=V_2] 
* CE 86: eval_Huffmancodebits_bb16_in(V_2,B) = 0+ eval_Huffmancodebits_bb20_in(V_2,B):2
     [V_2>=1] 
* CE 87: eval_Huffmancodebits_bb16_in(V_2,B) = 0+ eval_Huffmancodebits_bb20_in(V_2,B):3
     [0>=V_2] 
* CE 88: eval_Huffmancodebits_bb16_in(V_2,B) = 0+ eval_Huffmancodebits_bb20_in(V_2,B):4
     [V_2>=1] 
* CE 89: eval_Huffmancodebits_bb16_in(V_2,B) = 0
     [] 

### Cost equations --> "Loop" of eval_Huffmancodebits_bb16_in/2 
* CEs [85,86,89] --> Loop 66 
* CEs [88] --> Loop 67 
* CEs [87] --> Loop 68 

#### Loops of eval_Huffmancodebits_bb16_in/2 
* Loop 66: eval_Huffmancodebits_bb16_in(V_2,B) [] 
* Loop 67: eval_Huffmancodebits_bb16_in(V_2,B) [V_2>=1] 
* Loop 68: eval_Huffmancodebits_bb16_in(V_2,B) [0>=V_2] 

### Ranking functions of CR eval_Huffmancodebits_bb16_in(V_2,B) 

#### Partial ranking functions of CR eval_Huffmancodebits_bb16_in(V_2,B) 


### Resulting Chains:eval_Huffmancodebits_bb16_in(V_2,B) 
* [68]...
* [67]...
* [66]


### Merging Chains  eval_Huffmancodebits_bb16_in/2 into  External patterns of execution 
* [[66]] --> 1 
* [[68]] --> 2 
* [[67]] --> 3 


### Specialization of cost equations eval_Huffmancodebits_bb11_in/19 
* CE 31 is refined into CE [90] 
* CE 30 is refined into CE [91] 


#### Refined cost equations eval_Huffmancodebits_bb11_in/19 
* CE 90: eval_Huffmancodebits_bb11_in(A,B,C,D,E,F,G,H,I,J,K,A,B,C,D,E,F,L,J) = 0
     [I>=E,I>=D,2>=G,G+1=L,K=2] 
* CE 91: eval_Huffmancodebits_bb11_in(V_2,V_sfb_0,V_bitsWritten_0,V_19,V_24,V_tableindex_0,V_window_0,V_bitsWritten_1,V_line_0,V_bitsWritten_2,B,C,D,E,F,G,H,I,J) = 1+ eval_Huffmancodebits_bb11_in(V_2,V_sfb_0,V_bitsWritten_0,V_19,V_24,V_tableindex_0,V_window_0,V_bitsWritten_1,K,L,M,C,D,E,F,G,H,I,J)
     [V_24>=V_line_0+1,V_line_0>=V_19,2>=V_window_0,V_line_0+2=K,M=2,B=2] 

### Cost equations --> "Loop" of eval_Huffmancodebits_bb11_in/19 
* CEs [91] --> Loop 69 
* CEs [90] --> Loop 70 

#### Loops of eval_Huffmancodebits_bb11_in/19 
* Loop 69: eval_Huffmancodebits_bb11_in(V_2,V_sfb_0,V_bitsWritten_0,V_19,V_24,V_tableindex_0,V_window_0,V_bitsWritten_1,V_line_0,V_bitsWritten_2,B,C,D,E,F,G,H,I,J)->  eval_Huffmancodebits_bb11_in(V_2,V_sfb_0,V_bitsWritten_0,V_19,V_24,V_tableindex_0,V_window_0,V_bitsWritten_1,V_line_0',V_bitsWritten_2',B',C,D,E,F,G,H,I,J)
                  [V_24>=V_line_0+1,V_line_0>=V_19,2>=V_window_0,V_line_0+2=V_line_0',B'=2,B=2] 
* Loop 70: eval_Huffmancodebits_bb11_in(A,B,C,D,E,F,G,H,I,J,K,A,B,C,D,E,F,L,J) [I>=E,I>=D,2>=G,G+1=L,K=2] 

### Ranking functions of CR eval_Huffmancodebits_bb11_in(V_2,V_sfb_0,V_bitsWritten_0,V_19,V_24,V_tableindex_0,V_window_0,V_bitsWritten_1,V_line_0,V_bitsWritten_2,B,C,D,E,F,G,H,I,J) 
* RF of phase [69]: [V_24/2-V_line_0/2]

#### Partial ranking functions of CR eval_Huffmancodebits_bb11_in(V_2,V_sfb_0,V_bitsWritten_0,V_19,V_24,V_tableindex_0,V_window_0,V_bitsWritten_1,V_line_0,V_bitsWritten_2,B,C,D,E,F,G,H,I,J) 
* Partial RF of phase [69]:
  - RF of loop [69:1]:
    V_24/2-V_line_0/2


### Resulting Chains:eval_Huffmancodebits_bb11_in(V_2,V_sfb_0,V_bitsWritten_0,V_19,V_24,V_tableindex_0,V_window_0,V_bitsWritten_1,V_line_0,V_bitsWritten_2,B,C,D,E,F,G,H,I,J) 
* [[69],70]
* [70]


### Merging Chains  eval_Huffmancodebits_bb11_in/19 into  External patterns of execution 
* [[70]] --> 1 
* [[70,[69]]] --> 2 


### Specialization of cost equations eval_Huffmancodebits_bb9_in/12 
* CE 17 is refined into CE [92] 
* CE 16 is refined into CE [93,94] 


#### Refined cost equations eval_Huffmancodebits_bb9_in/12 
* CE 92: eval_Huffmancodebits_bb9_in(A,B,C,D,E,F,G,H,I,A,J,H) = 0
     [G>=3,J=B+1,I=3] 
* CE 93: eval_Huffmancodebits_bb9_in(V_2,V_sfb_0,V_bitsWritten_0,V_19,V_24,V_tableindex_0,V_window_0,V_bitsWritten_1,B,C,D,E) = 2+ eval_Huffmancodebits_bb11_in(V_2,V_sfb_0,V_bitsWritten_0,V_19,V_24,V_tableindex_0,F,V_bitsWritten_1,V_19,V_bitsWritten_1,G,V_2,V_sfb_0,V_bitsWritten_0,V_19,V_24,V_tableindex_0,H,V_bitsWritten_1):1+ eval_Huffmancodebits_bb9_in(V_2,V_sfb_0,V_bitsWritten_0,V_19,V_24,V_tableindex_0,H,V_bitsWritten_1,I,C,D,E)
     [V_19>=V_24,3>=H,H=F+1,H=V_window_0+1,I=3,G=2,B=3] 
* CE 94: eval_Huffmancodebits_bb9_in(V_2,V_sfb_0,V_bitsWritten_0,V_19,V_24,V_tableindex_0,V_window_0,V_bitsWritten_1,B,C,D,E) = 2+ eval_Huffmancodebits_bb11_in(V_2,V_sfb_0,V_bitsWritten_0,V_19,V_24,V_tableindex_0,F,V_bitsWritten_1,V_19,V_bitsWritten_1,G,V_2,V_sfb_0,V_bitsWritten_0,V_19,V_24,V_tableindex_0,H,I):2+ eval_Huffmancodebits_bb9_in(V_2,V_sfb_0,V_bitsWritten_0,V_19,V_24,V_tableindex_0,H,I,J,C,D,E)
     [V_24>=V_19+1,3>=H,H=F+1,H=V_window_0+1,J=3,G=2,B=3] 

### Cost equations --> "Loop" of eval_Huffmancodebits_bb9_in/12 
* CEs [94] --> Loop 71 
* CEs [93] --> Loop 72 
* CEs [92] --> Loop 73 

#### Loops of eval_Huffmancodebits_bb9_in/12 
* Loop 71: eval_Huffmancodebits_bb9_in(V_2,V_sfb_0,V_bitsWritten_0,V_19,V_24,V_tableindex_0,V_window_0,V_bitsWritten_1,B,C,D,E)->  eval_Huffmancodebits_bb9_in(V_2,V_sfb_0,V_bitsWritten_0,V_19,V_24,V_tableindex_0,V_window_0',V_bitsWritten_1',B',C,D,E)
                  [V_24>=V_19+1,2>=V_window_0,V_window_0+1=V_window_0',B'=3,B=3] 
* Loop 72: eval_Huffmancodebits_bb9_in(V_2,V_sfb_0,V_bitsWritten_0,V_19,V_24,V_tableindex_0,V_window_0,V_bitsWritten_1,B,C,D,E)->  eval_Huffmancodebits_bb9_in(V_2,V_sfb_0,V_bitsWritten_0,V_19,V_24,V_tableindex_0,V_window_0',V_bitsWritten_1,B',C,D,E)
                  [V_19>=V_24,2>=V_window_0,V_window_0+1=V_window_0',B'=3,B=3] 
* Loop 73: eval_Huffmancodebits_bb9_in(A,B,C,D,E,F,G,H,I,A,J,H) [G>=3,B+1=J,I=3] 

### Ranking functions of CR eval_Huffmancodebits_bb9_in(V_2,V_sfb_0,V_bitsWritten_0,V_19,V_24,V_tableindex_0,V_window_0,V_bitsWritten_1,B,C,D,E) 
* RF of phase [71]: [-V_window_0+3]
* RF of phase [72]: [-V_window_0+3]

#### Partial ranking functions of CR eval_Huffmancodebits_bb9_in(V_2,V_sfb_0,V_bitsWritten_0,V_19,V_24,V_tableindex_0,V_window_0,V_bitsWritten_1,B,C,D,E) 
* Partial RF of phase [71]:
  - RF of loop [71:1]:
    -V_window_0+3
* Partial RF of phase [72]:
  - RF of loop [72:1]:
    -V_window_0+3


### Resulting Chains:eval_Huffmancodebits_bb9_in(V_2,V_sfb_0,V_bitsWritten_0,V_19,V_24,V_tableindex_0,V_window_0,V_bitsWritten_1,B,C,D,E) 
* [[72],73]
* [[71],73]


### Merging Chains  eval_Huffmancodebits_bb9_in/12 into  External patterns of execution 
* [[73,[72]]] --> 1 
* [[73,[71]]] --> 2 


### Specialization of cost equations eval_Huffmancodebits_bb4_in/6 
* CE 8 is refined into CE [95] 
* CE 10 is refined into CE [96] 
* CE 9 is refined into CE [97,98] 


#### Refined cost equations eval_Huffmancodebits_bb4_in/6 
* CE 95: eval_Huffmancodebits_bb4_in(V_2,V_sfb_0,V_bitsWritten_0,B,C,D) = 0
     [12>=V_sfb_0,B=5] 
* CE 96: eval_Huffmancodebits_bb4_in(A,B,C,D,A,C) = 0
     [B>=13,D=4] 
* CE 97: eval_Huffmancodebits_bb4_in(V_2,V_sfb_0,V_bitsWritten_0,B,C,D) = 2+ eval_Huffmancodebits_bb9_in(V_2,E,V_bitsWritten_0,F,G,H,I,V_bitsWritten_0,J,V_2,K,V_bitsWritten_0):1+ eval_Huffmancodebits_bb4_in(V_2,K,V_bitsWritten_0,B,C,D)
     [F>=G,13>=K,K=E+1,K=V_sfb_0+1,J=3,I=0] 
* CE 98: eval_Huffmancodebits_bb4_in(V_2,V_sfb_0,V_bitsWritten_0,B,C,D) = 2+ eval_Huffmancodebits_bb9_in(V_2,E,V_bitsWritten_0,F,G,H,I,V_bitsWritten_0,J,V_2,K,L):2+ eval_Huffmancodebits_bb4_in(V_2,K,L,B,C,D)
     [G>=F+1,13>=K,K=E+1,K=V_sfb_0+1,J=3,I=0] 

### Cost equations --> "Loop" of eval_Huffmancodebits_bb4_in/6 
* CEs [97,98] --> Loop 74 
* CEs [95] --> Loop 75 
* CEs [96] --> Loop 76 

#### Loops of eval_Huffmancodebits_bb4_in/6 
* Loop 74: eval_Huffmancodebits_bb4_in(V_2,V_sfb_0,V_bitsWritten_0,B,C,D)->  eval_Huffmancodebits_bb4_in(V_2,V_sfb_0',V_bitsWritten_0',B,C,D)
                  [12>=V_sfb_0,V_sfb_0+1=V_sfb_0'] 
* Loop 75: eval_Huffmancodebits_bb4_in(V_2,V_sfb_0,V_bitsWritten_0,B,C,D) [12>=V_sfb_0,B=5] 
* Loop 76: eval_Huffmancodebits_bb4_in(A,B,C,D,A,C) [B>=13,D=4] 

### Ranking functions of CR eval_Huffmancodebits_bb4_in(V_2,V_sfb_0,V_bitsWritten_0,B,C,D) 
* RF of phase [74]: [-V_sfb_0+13]

#### Partial ranking functions of CR eval_Huffmancodebits_bb4_in(V_2,V_sfb_0,V_bitsWritten_0,B,C,D) 
* Partial RF of phase [74]:
  - RF of loop [74:1]:
    -V_sfb_0+13


### Resulting Chains:eval_Huffmancodebits_bb4_in(V_2,V_sfb_0,V_bitsWritten_0,B,C,D) 
* [[74],76]
* [[74],75]
* [75]


### Merging Chains  eval_Huffmancodebits_bb4_in/6 into  External patterns of execution 
* [[76,[74]]] --> 1 
* [[75],[75,[74]]] --> 2 


### Specialization of cost equations loop_cont_eval_Huffmancodebits_bb4_in/4 
* CE 12 is refined into CE [99] 
* CE 11 is refined into CE [100,101] 


#### Refined cost equations loop_cont_eval_Huffmancodebits_bb4_in/4 
* CE 99: loop_cont_eval_Huffmancodebits_bb4_in(E,A,B,C) = 0
     [E=5] 
* CE 100: loop_cont_eval_Huffmancodebits_bb4_in(E,A,B,C) = 0+ eval_Huffmancodebits_bb34_in(A,B,C):1
     [E=4] 
* CE 101: loop_cont_eval_Huffmancodebits_bb4_in(E,A,B,C) = 0+ eval_Huffmancodebits_bb34_in(A,B,C):2
     [E=4] 

### Cost equations --> "Loop" of loop_cont_eval_Huffmancodebits_bb4_in/4 
* CEs [101] --> Loop 77 
* CEs [99] --> Loop 78 
* CEs [100] --> Loop 79 

#### Loops of loop_cont_eval_Huffmancodebits_bb4_in/4 
* Loop 77: loop_cont_eval_Huffmancodebits_bb4_in(E,A,B,C) [E=4] 
* Loop 78: loop_cont_eval_Huffmancodebits_bb4_in(E,A,B,C) [E=5] 
* Loop 79: loop_cont_eval_Huffmancodebits_bb4_in(E,A,B,C) [E=4] 

### Ranking functions of CR loop_cont_eval_Huffmancodebits_bb4_in(E,A,B,C) 

#### Partial ranking functions of CR loop_cont_eval_Huffmancodebits_bb4_in(E,A,B,C) 


### Resulting Chains:loop_cont_eval_Huffmancodebits_bb4_in(E,A,B,C) 
* [79]
* [78]
* [77]...


### Merging Chains  loop_cont_eval_Huffmancodebits_bb4_in/4 into  External patterns of execution 
* [[79]] --> 1 
* [[78]] --> 2 
* [[77]] --> 3 


### Specialization of cost equations eval_Huffmancodebits_bb0_in/1 
* CE 3 is refined into CE [102,103,104] 
* CE 4 is refined into CE [105,106,107] 
* CE 5 is refined into CE [108,109] 


#### Refined cost equations eval_Huffmancodebits_bb0_in/1 
* CE 102: eval_Huffmancodebits_bb0_in(B) = 0+ eval_Huffmancodebits_bb16_in(C,B):1
     [] 
* CE 103: eval_Huffmancodebits_bb0_in(B) = 0+ eval_Huffmancodebits_bb16_in(C,B):2
     [0>=C] 
* CE 104: eval_Huffmancodebits_bb0_in(B) = 0+ eval_Huffmancodebits_bb16_in(C,B):3
     [C>=1] 
* CE 105: eval_Huffmancodebits_bb0_in(B) = 1+ eval_Huffmancodebits_bb4_in(C,D,E,F,C,G):1+ loop_cont_eval_Huffmancodebits_bb4_in(H,C,G,B):1
     [H=4,F=4,E=0,D=0] 
* CE 106: eval_Huffmancodebits_bb0_in(B) = 1+ eval_Huffmancodebits_bb4_in(C,D,E,F,C,G):1+ loop_cont_eval_Huffmancodebits_bb4_in(H,C,G,B):3
     [H=4,F=4,E=0,D=0] 
* CE 107: eval_Huffmancodebits_bb0_in(B) = 1+ eval_Huffmancodebits_bb4_in(C,D,E,F,G,H):2+ loop_cont_eval_Huffmancodebits_bb4_in(I,G,H,B):2
     [I=5,F=5,E=0,D=0] 
* CE 108: eval_Huffmancodebits_bb0_in(B) = 0+ eval_Huffmancodebits_bb34_in(C,D,B):1
     [D=0] 
* CE 109: eval_Huffmancodebits_bb0_in(B) = 0+ eval_Huffmancodebits_bb34_in(C,D,B):2
     [D=0] 

### Cost equations --> "Loop" of eval_Huffmancodebits_bb0_in/1 
* CEs [103,104,106,109] --> Loop 80 
* CEs [102,105,107,108] --> Loop 81 

#### Loops of eval_Huffmancodebits_bb0_in/1 
* Loop 80: eval_Huffmancodebits_bb0_in(B) [] 
* Loop 81: eval_Huffmancodebits_bb0_in(B) [] 

### Ranking functions of CR eval_Huffmancodebits_bb0_in(B) 

#### Partial ranking functions of CR eval_Huffmancodebits_bb0_in(B) 


### Resulting Chains:eval_Huffmancodebits_bb0_in(B) 
* [81]
* [80]...


### Merging Chains  eval_Huffmancodebits_bb0_in/1 into  External patterns of execution 
* [[81]] --> 1 
* [[80]] --> 2 


### Specialization of cost equations eval_Huffmancodebits_start/1 
* CE 2 is refined into CE [110,111] 


#### Refined cost equations eval_Huffmancodebits_start/1 
* CE 110: eval_Huffmancodebits_start(B) = 0+ eval_Huffmancodebits_bb0_in(B):1
     [] 
* CE 111: eval_Huffmancodebits_start(B) = 0+ eval_Huffmancodebits_bb0_in(B):2
     [] 

### Cost equations --> "Loop" of eval_Huffmancodebits_start/1 
* CEs [111] --> Loop 82 
* CEs [110] --> Loop 83 

#### Loops of eval_Huffmancodebits_start/1 
* Loop 82: eval_Huffmancodebits_start(B) [] 
* Loop 83: eval_Huffmancodebits_start(B) [] 

### Ranking functions of CR eval_Huffmancodebits_start(B) 

#### Partial ranking functions of CR eval_Huffmancodebits_start(B) 


### Resulting Chains:eval_Huffmancodebits_start(B) 
* [83]
* [82]...


### Merging Chains  eval_Huffmancodebits_start/1 into  External patterns of execution 
* [[83]] --> 1 
* [[82]] --> 2 


Computing Bounds
=====================================

#### Cost of loops [35] 

 * loop 35:eval_Huffmancodebits_bb21_in(V_2,V_bitsWritten_3,V_i_0,B,C,D) -> [eval_Huffmancodebits_bb21_in(V_2',V_bitsWritten_3',V_i_0',B',C',D')] 
1
#### Cost of phase [35]:eval_Huffmancodebits_bb21_in(V_2,V_bitsWritten_3,V_i_0,B,C,D) -> [eval_Huffmancodebits_bb21_in(V_2',V_bitsWritten_3',V_i_0',B',C',D')] 
1*it(35)+0
  Such that:it(35) =< V_2/2-V_i_0/2
it(35) =< V_2/2-V_i_0/2-V_2'/2+V_i_0'/2

#### Cost of phase [35]:eval_Huffmancodebits_bb21_in(V_2,V_bitsWritten_3,V_i_0,B,C,D) -> [eval_Huffmancodebits_bb21_in(V_2',V_bitsWritten_3',V_i_0',B',C',D')] 
1*it(35)+0
  Such that:it(35) =< V_2/2-V_i_0/2
it(35) =< V_2/2-V_i_0/2-V_2'/2+V_i_0'/2

#### Cost of chains of eval_Huffmancodebits_bb21_in(V_2,V_bitsWritten_3,V_i_0,B,C,D):
* Chain [[35],37]: 1*it(35)+0
  Such that:it(35) =< V_2/2-V_i_0/2

  with precondition: [B=4,V_2=C,V_i_0>=0,V_2>=V_i_0+1] 

* Chain [[35],36]: 1*it(35)+0
  Such that:it(35) =< V_2/2-V_i_0/2

  with precondition: [B=10,V_i_0>=0,V_2>=V_i_0+3] 

* Chain [37]: 0
  with precondition: [B=4,D=V_bitsWritten_3,V_2=C,V_i_0>=0,V_i_0>=V_2] 

* Chain [36]: 0
  with precondition: [B=10,V_i_0>=0,V_2>=V_i_0+1] 


#### Cost of loops [38] 

 * loop 38:eval_Huffmancodebits_bb37_in(V_125,V_bitsWritten_7,V_i_1,B,C,D,E) -> [eval_Huffmancodebits_bb37_in(V_125',V_bitsWritten_7',V_i_1',B',C',D',E')] 
1
#### Cost of phase [38]:eval_Huffmancodebits_bb37_in(V_125,V_bitsWritten_7,V_i_1,B,C,D,E) -> [eval_Huffmancodebits_bb37_in(V_125',V_bitsWritten_7',V_i_1',B',C',D',E')] 
1*it(38)+0
  Such that:it(38) =< V_125/4-V_i_1/4
it(38) =< V_125/4-V_i_1/4-V_125'/4+V_i_1'/4

#### Cost of phase [38]:eval_Huffmancodebits_bb37_in(V_125,V_bitsWritten_7,V_i_1,B,C,D,E) -> [eval_Huffmancodebits_bb37_in(V_125',V_bitsWritten_7',V_i_1',B',C',D',E')] 
1*it(38)+0
  Such that:it(38) =< V_125/4-V_i_1/4
it(38) =< V_125/4-V_i_1/4-V_125'/4+V_i_1'/4

#### Cost of phase [38]:eval_Huffmancodebits_bb37_in(V_125,V_bitsWritten_7,V_i_1,B,C,D,E) -> [eval_Huffmancodebits_bb37_in(V_125',V_bitsWritten_7',V_i_1',B',C',D',E')] 
1*it(38)+0
  Such that:it(38) =< V_125/4-V_i_1/4
it(38) =< V_125/4-V_i_1/4-V_125'/4+V_i_1'/4

#### Cost of phase [38]:eval_Huffmancodebits_bb37_in(V_125,V_bitsWritten_7,V_i_1,B,C,D,E) -> [eval_Huffmancodebits_bb37_in(V_125',V_bitsWritten_7',V_i_1',B',C',D',E')] 
1*it(38)+0
  Such that:it(38) =< V_125/4-V_i_1/4
it(38) =< V_125/4-V_i_1/4-V_125'/4+V_i_1'/4

#### Cost of chains of eval_Huffmancodebits_bb37_in(V_125,V_bitsWritten_7,V_i_1,B,C,D,E):
* Chain [[38],42]: 1*it(38)+0
  Such that:it(38) =< V_125/4-V_i_1/4

  with precondition: [B=8,C=0,D=0,E=0,V_125>=V_i_1+1] 

* Chain [[38],41]: 1*it(38)+0
  Such that:it(38) =< V_125/4-V_i_1/4

  with precondition: [B=8,0>=C+1,0>=D,0>=E,E+31>=0,C+31>=32*D,V_125>=V_i_1+1,32*D>=C] 

* Chain [[38],40]: 1*it(38)+0
  Such that:it(38) =< V_125/4-V_i_1/4

  with precondition: [B=8,31>=E,C>=1,D>=0,E>=0,C>=32*D,V_125>=V_i_1+1,32*D+31>=C] 

* Chain [[38],39]: 1*it(38)+0
  Such that:it(38) =< V_125/4-V_i_1/4

  with precondition: [B=9,V_125>=V_i_1+1] 

* Chain [42]: 0
  with precondition: [B=8,C=0,D=0,E=0,V_i_1>=V_125] 

* Chain [41]: 0
  with precondition: [B=8,0>=C+1,0>=D,0>=E,E+31>=0,C+31>=32*D,V_i_1>=V_125,32*D>=C] 

* Chain [40]: 0
  with precondition: [B=8,31>=E,C>=1,D>=0,E>=0,C>=32*D,V_i_1>=V_125,32*D+31>=C] 

* Chain [39]: 0
  with precondition: [B=9,V_i_1>=V_125] 


#### Cost of loops [44] 

 * loop 44:eval_Huffmancodebits_bb41_in(V_159,V_stuffingWords_0,B,C) -> [eval_Huffmancodebits_bb41_in(V_159',V_stuffingWords_0',B',C')] 
1
#### Cost of phase [44]:eval_Huffmancodebits_bb41_in(V_159,V_stuffingWords_0,B,C) -> [eval_Huffmancodebits_bb41_in(V_159',V_stuffingWords_0',B',C')] 
1*it(44)+0
#### Cost of loops [43] 

 * loop 43:eval_Huffmancodebits_bb41_in(V_159,V_stuffingWords_0,B,C) -> [eval_Huffmancodebits_bb41_in(V_159',V_stuffingWords_0',B',C')] 
1
#### Cost of phase [43]:eval_Huffmancodebits_bb41_in(V_159,V_stuffingWords_0,B,C) -> [eval_Huffmancodebits_bb41_in(V_159',V_stuffingWords_0',B',C')] 
1*it(43)+0
  Such that:it(43) =< V_stuffingWords_0
it(43) =< V_stuffingWords_0-V_stuffingWords_0'

#### Cost of phase [43]:eval_Huffmancodebits_bb41_in(V_159,V_stuffingWords_0,B,C) -> [eval_Huffmancodebits_bb41_in(V_159',V_stuffingWords_0',B',C')] 
1*it(43)+0
  Such that:it(43) =< V_stuffingWords_0
it(43) =< V_stuffingWords_0-V_stuffingWords_0'

#### Cost of chains of eval_Huffmancodebits_bb41_in(V_159,V_stuffingWords_0,B,C):
* Chain [[44]]...: 1*it(44)+0
  with precondition: [0>=V_stuffingWords_0+1] 

* Chain [[43],46]: 1*it(43)+0
  Such that:it(43) =< V_stuffingWords_0

  with precondition: [B=6,V_159=C,V_stuffingWords_0>=1] 

* Chain [[43],45]: 1*it(43)+0
  Such that:it(43) =< V_stuffingWords_0

  with precondition: [B=7,V_stuffingWords_0>=1] 

* Chain [46]: 0
  with precondition: [V_stuffingWords_0=0,B=6,C=V_159] 

* Chain [45]: 0
  with precondition: [V_stuffingWords_0=0,B=7] 


#### Cost of chains of eval_Huffmancodebits_bb46_in(B):
* Chain [47]: 0
  with precondition: [] 


#### Cost of chains of loop_cont_eval_Huffmancodebits_bb41_in(D,A,B):
* Chain [49]: 0
  with precondition: [D=6] 

* Chain [48]: 0
  with precondition: [D=7] 


#### Cost of chains of eval_Huffmancodebits_121(V_158,V_159,B):
* Chain [52]: 1
  with precondition: [V_158=0] 

* Chain [51]: 2*s(2)+1
  Such that:aux(1) =< V_158
s(2) =< aux(1)

  with precondition: [V_158>=1] 

* Chain [50]...: 1*s(4)+1
  with precondition: [0>=V_158+1] 


#### Cost of chains of loop_cont_eval_Huffmancodebits_bb37_in(L,A,B,C,D):
* Chain [56]: 1
  with precondition: [L=8,B=0] 

* Chain [55]: 2*s(6)+1
  Such that:s(5) =< B
s(6) =< s(5)

  with precondition: [L=8,B>=1] 

* Chain [54]: 0
  with precondition: [L=9] 

* Chain [53]...: 1*s(7)+1
  with precondition: [L=8,0>=B+1] 


#### Cost of chains of eval_Huffmancodebits_bb34_in(V_2,V_bitsWritten_6,B):
* Chain [58]...: 1*aux(2)+0
  with precondition: [] 

* Chain [57]: 1*aux(3)+0
  with precondition: [] 


#### Cost of chains of loop_cont_eval_Huffmancodebits_bb21_in(F,A,B,C):
* Chain [61]: 1*s(20)+0
  with precondition: [F=4] 

* Chain [60]: 0
  with precondition: [F=10] 

* Chain [59]...: 1*s(21)+0
  with precondition: [F=4] 


#### Cost of chains of eval_Huffmancodebits_bb20_in(V_2,B):
* Chain [65]...: 1*s(22)+1
  with precondition: [0>=V_2] 

* Chain [64]...: 1*s(23)+1*s(24)+1
  Such that:s(23) =< V_2/2

  with precondition: [V_2>=1] 

* Chain [63]: 1*s(25)+1
  with precondition: [0>=V_2] 

* Chain [62]: 2*s(26)+1*s(27)+1
  Such that:aux(4) =< V_2/2
s(26) =< aux(4)

  with precondition: [V_2>=1] 


#### Cost of chains of eval_Huffmancodebits_bb16_in(V_2,B):
* Chain [68]...: 1*s(29)+1
  with precondition: [0>=V_2] 

* Chain [67]...: 1*s(30)+1*s(31)+1
  Such that:s(30) =< V_2/2

  with precondition: [V_2>=1] 

* Chain [66]: 2*s(32)+2*s(34)+1
  Such that:s(33) =< V_2/2
s(34) =< s(33)

  with precondition: [] 


#### Cost of loops [69] 

 * loop 69:eval_Huffmancodebits_bb11_in(V_2,V_sfb_0,V_bitsWritten_0,V_19,V_24,V_tableindex_0,V_window_0,V_bitsWritten_1,V_line_0,V_bitsWritten_2,B,C,D,E,F,G,H,I,J) -> [eval_Huffmancodebits_bb11_in(V_2',V_sfb_0',V_bitsWritten_0',V_19',V_24',V_tableindex_0',V_window_0',V_bitsWritten_1',V_line_0',V_bitsWritten_2',B',C',D',E',F',G',H',I',J')] 
1
#### Cost of phase [69]:eval_Huffmancodebits_bb11_in(V_2,V_sfb_0,V_bitsWritten_0,V_19,V_24,V_tableindex_0,V_window_0,V_bitsWritten_1,V_line_0,V_bitsWritten_2,B,C,D,E,F,G,H,I,J) -> [eval_Huffmancodebits_bb11_in(V_2',V_sfb_0',V_bitsWritten_0',V_19',V_24',V_tableindex_0',V_window_0',V_bitsWritten_1',V_line_0',V_bitsWritten_2',B',C',D',E',F',G',H',I',J')] 
1*it(69)+0
  Such that:it(69) =< V_24/2-V_line_0/2
it(69) =< V_24/2-V_line_0/2-V_24'/2+V_line_0'/2

#### Cost of chains of eval_Huffmancodebits_bb11_in(V_2,V_sfb_0,V_bitsWritten_0,V_19,V_24,V_tableindex_0,V_window_0,V_bitsWritten_1,V_line_0,V_bitsWritten_2,B,C,D,E,F,G,H,I,J):
* Chain [[69],70]: 1*it(69)+0
  Such that:it(69) =< V_24/2-V_line_0/2

  with precondition: [B=2,V_2=C,V_sfb_0=D,V_bitsWritten_0=E,V_19=F,V_24=G,V_tableindex_0=H,V_window_0+1=I,2>=V_window_0,V_line_0>=V_19,V_24>=V_line_0+1] 

* Chain [70]: 0
  with precondition: [B=2,C=V_2,D=V_sfb_0,E=V_bitsWritten_0,H=V_tableindex_0,J=V_bitsWritten_2,V_19=F,V_24=G,V_window_0+1=I,2>=V_window_0,V_line_0>=V_19,V_line_0>=V_24] 


#### Cost of loops [72] 

 * loop 72:eval_Huffmancodebits_bb9_in(V_2,V_sfb_0,V_bitsWritten_0,V_19,V_24,V_tableindex_0,V_window_0,V_bitsWritten_1,B,C,D,E) -> [eval_Huffmancodebits_bb9_in(V_2',V_sfb_0',V_bitsWritten_0',V_19',V_24',V_tableindex_0',V_window_0',V_bitsWritten_1',B',C',D',E')] 
2
#### Cost of phase [72]:eval_Huffmancodebits_bb9_in(V_2,V_sfb_0,V_bitsWritten_0,V_19,V_24,V_tableindex_0,V_window_0,V_bitsWritten_1,B,C,D,E) -> [eval_Huffmancodebits_bb9_in(V_2',V_sfb_0',V_bitsWritten_0',V_19',V_24',V_tableindex_0',V_window_0',V_bitsWritten_1',B',C',D',E')] 
2*it(72)+0
  Such that:it(72) =< -V_window_0+3
it(72) =< -V_window_0+V_window_0'

#### Cost of loops [71] 

 * loop 71:eval_Huffmancodebits_bb9_in(V_2,V_sfb_0,V_bitsWritten_0,V_19,V_24,V_tableindex_0,V_window_0,V_bitsWritten_1,B,C,D,E) -> [eval_Huffmancodebits_bb9_in(V_2',V_sfb_0',V_bitsWritten_0',V_19',V_24',V_tableindex_0',V_window_0',V_bitsWritten_1',B',C',D',E')] 
1*s(37)+2
  Such that:s(37) =< -V_19/2+V_24'/2

#### Cost of phase [71]:eval_Huffmancodebits_bb9_in(V_2,V_sfb_0,V_bitsWritten_0,V_19,V_24,V_tableindex_0,V_window_0,V_bitsWritten_1,B,C,D,E) -> [eval_Huffmancodebits_bb9_in(V_2',V_sfb_0',V_bitsWritten_0',V_19',V_24',V_tableindex_0',V_window_0',V_bitsWritten_1',B',C',D',E')] 
2*it(71)+1*s(38)+0
  Such that:aux(5) =< -V_19/2+V_24/2
it(71) =< -V_window_0+3
it(71) =< -V_window_0+V_window_0'
s(38) =< it(71)*aux(5)

#### Cost of chains of eval_Huffmancodebits_bb9_in(V_2,V_sfb_0,V_bitsWritten_0,V_19,V_24,V_tableindex_0,V_window_0,V_bitsWritten_1,B,C,D,E):
* Chain [[72],73]: 2*it(72)+0
  Such that:it(72) =< -V_window_0+3

  with precondition: [B=3,V_bitsWritten_0=V_bitsWritten_1,V_2=C,V_sfb_0+1=D,V_bitsWritten_0=E,12>=V_sfb_0,2>=V_window_0,V_19>=V_24] 

* Chain [[71],73]: 2*it(71)+1*s(38)+0
  Such that:aux(5) =< -V_19/2+V_24/2
it(71) =< -V_window_0+3
s(38) =< it(71)*aux(5)

  with precondition: [B=3,V_2=C,V_sfb_0+1=D,12>=V_sfb_0,2>=V_window_0,V_24>=V_19+1] 


#### Cost of loops [74] 

 * loop 74:eval_Huffmancodebits_bb4_in(V_2,V_sfb_0,V_bitsWritten_0,B,C,D) -> [eval_Huffmancodebits_bb4_in(V_2',V_sfb_0',V_bitsWritten_0',B',C',D')] 
1*s(43)+0
#### Cost of phase [74]:eval_Huffmancodebits_bb4_in(V_2,V_sfb_0,V_bitsWritten_0,B,C,D) -> [eval_Huffmancodebits_bb4_in(V_2',V_sfb_0',V_bitsWritten_0',B',C',D')] 
1*s(44)+0
#### Cost of phase [74]:eval_Huffmancodebits_bb4_in(V_2,V_sfb_0,V_bitsWritten_0,B,C,D) -> [eval_Huffmancodebits_bb4_in(V_2',V_sfb_0',V_bitsWritten_0',B',C',D')] 
1*s(44)+0
#### Cost of chains of eval_Huffmancodebits_bb4_in(V_2,V_sfb_0,V_bitsWritten_0,B,C,D):
* Chain [[74],76]: 1*s(44)+0
  with precondition: [B=4,V_2=C,12>=V_sfb_0] 

* Chain [[74],75]: 1*s(44)+0
  with precondition: [B=5,11>=V_sfb_0,V_sfb_0>=0] 

* Chain [75]: 0
  with precondition: [B=5,12>=V_sfb_0,V_sfb_0>=0] 


#### Cost of chains of loop_cont_eval_Huffmancodebits_bb4_in(E,A,B,C):
* Chain [79]: 1*s(46)+0
  with precondition: [E=4] 

* Chain [78]: 0
  with precondition: [E=5] 

* Chain [77]...: 1*s(47)+0
  with precondition: [E=4] 


#### Cost of chains of eval_Huffmancodebits_bb0_in(B):
* Chain [81]: 1*aux(9)+0
  with precondition: [] 

* Chain [80]...: 1*aux(10)+0
  with precondition: [] 


#### Cost of chains of eval_Huffmancodebits_start(B):
* Chain [83]: 1*s(61)+0
  with precondition: [] 

* Chain [82]...: 1*s(62)+0
  with precondition: [] 


Closed-form bounds of eval_Huffmancodebits_start(B): 
-------------------------------------
* Chain [83] with precondition: [] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [82]... with precondition: [] 
    - Upper bound: inf 
    - Complexity: infinity 

### Maximum cost of eval_Huffmancodebits_start(B): inf 
Asymptotic class: infinity 

Time statistics: 
-------------------------------------
* Partial evaluation computed in 95 ms.
* Invariants computed in 95 ms.
   - Backward Invariants 51 ms.
   - Transitive Invariants 20 ms.
* Refinement performed in 191 ms.
* Termination proved in 25 ms.
* Upper bounds computed in 146 ms.
   - Equation cost structures 51 ms.
   - Phase cost structures 55 ms.
   - Chain cost structures 47 ms.
   - Solving cost expressions 1 ms.
* Total analysis performed in 663 ms.


Warning: Ignored call to eval_gx_add_cached_char_stop/1 in equation loop_cont_eval_gx_add_cached_char_bb3_in/2 

Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. recursive  : [eval_gx_add_cached_char_bb3_in/1]
1. non_recursive  : [loop_cont_eval_gx_add_cached_char_bb3_in/2]
2. non_recursive  : [eval_gx_add_cached_char_bb2_in/1]
3. non_recursive  : [eval_gx_add_cached_char_3/1]
4. non_recursive  : [eval_gx_add_cached_char_2/1]
5. non_recursive  : [eval_gx_add_cached_char_1/1]
6. non_recursive  : [eval_gx_add_cached_char_0/1]
7. non_recursive  : [eval_gx_add_cached_char_bb0_in/1]
8. non_recursive  : [eval_gx_add_cached_char_start/1]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into eval_gx_add_cached_char_bb3_in/1
1. SCC is completely evaluated into other SCCs
2. SCC is partially evaluated into eval_gx_add_cached_char_bb2_in/1
3. SCC is completely evaluated into other SCCs
4. SCC is completely evaluated into other SCCs
5. SCC is completely evaluated into other SCCs
6. SCC is completely evaluated into other SCCs
7. SCC is partially evaluated into eval_gx_add_cached_char_bb0_in/1
8. SCC is partially evaluated into eval_gx_add_cached_char_start/1

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations eval_gx_add_cached_char_bb3_in/1 
* CE 6 is refined into CE [7] 
* CE 5 is refined into CE [8] 


#### Refined cost equations eval_gx_add_cached_char_bb3_in/1 
* CE 7: eval_gx_add_cached_char_bb3_in(B) = 0
     [B=2] 
* CE 8: eval_gx_add_cached_char_bb3_in(B) = 1+ eval_gx_add_cached_char_bb3_in(C)
     [C=2,B=2] 

### Cost equations --> "Loop" of eval_gx_add_cached_char_bb3_in/1 
* CEs [8] --> Loop 6 
* CEs [7] --> Loop 7 

#### Loops of eval_gx_add_cached_char_bb3_in/1 
* Loop 6: eval_gx_add_cached_char_bb3_in(B)->  eval_gx_add_cached_char_bb3_in(B')
                  [B'=2,B=2] 
* Loop 7: eval_gx_add_cached_char_bb3_in(B) [B=2] 

### Ranking functions of CR eval_gx_add_cached_char_bb3_in(B) 

#### Partial ranking functions of CR eval_gx_add_cached_char_bb3_in(B) 


### Resulting Chains:eval_gx_add_cached_char_bb3_in(B) 
* [[6]]...
* [[6],7]
* [7]


### Merging Chains  eval_gx_add_cached_char_bb3_in/1 into  External patterns of execution 
* [[7],[7,[6]]] --> 1 
* [[[6]]] --> 2 


### Specialization of cost equations eval_gx_add_cached_char_bb2_in/1 
* CE 4 is refined into CE [9,10] 


#### Refined cost equations eval_gx_add_cached_char_bb2_in/1 
* CE 9: eval_gx_add_cached_char_bb2_in(B) = 1+ eval_gx_add_cached_char_bb3_in(C):1
     [C=2] 
* CE 10: eval_gx_add_cached_char_bb2_in(B) = 1+ eval_gx_add_cached_char_bb3_in(C):2
     [C=2] 

### Cost equations --> "Loop" of eval_gx_add_cached_char_bb2_in/1 
* CEs [10] --> Loop 8 
* CEs [9] --> Loop 9 

#### Loops of eval_gx_add_cached_char_bb2_in/1 
* Loop 8: eval_gx_add_cached_char_bb2_in(B) [] 
* Loop 9: eval_gx_add_cached_char_bb2_in(B) [] 

### Ranking functions of CR eval_gx_add_cached_char_bb2_in(B) 

#### Partial ranking functions of CR eval_gx_add_cached_char_bb2_in(B) 


### Resulting Chains:eval_gx_add_cached_char_bb2_in(B) 
* [9]
* [8]...


### Merging Chains  eval_gx_add_cached_char_bb2_in/1 into  External patterns of execution 
* [[9]] --> 1 
* [[8]] --> 2 


### Specialization of cost equations eval_gx_add_cached_char_bb0_in/1 
* CE 3 is refined into CE [11,12] 


#### Refined cost equations eval_gx_add_cached_char_bb0_in/1 
* CE 11: eval_gx_add_cached_char_bb0_in(B) = 0+ eval_gx_add_cached_char_bb2_in(B):1
     [] 
* CE 12: eval_gx_add_cached_char_bb0_in(B) = 0+ eval_gx_add_cached_char_bb2_in(B):2
     [] 

### Cost equations --> "Loop" of eval_gx_add_cached_char_bb0_in/1 
* CEs [12] --> Loop 10 
* CEs [11] --> Loop 11 

#### Loops of eval_gx_add_cached_char_bb0_in/1 
* Loop 10: eval_gx_add_cached_char_bb0_in(B) [] 
* Loop 11: eval_gx_add_cached_char_bb0_in(B) [] 

### Ranking functions of CR eval_gx_add_cached_char_bb0_in(B) 

#### Partial ranking functions of CR eval_gx_add_cached_char_bb0_in(B) 


### Resulting Chains:eval_gx_add_cached_char_bb0_in(B) 
* [11]
* [10]...


### Merging Chains  eval_gx_add_cached_char_bb0_in/1 into  External patterns of execution 
* [[11]] --> 1 
* [[10]] --> 2 


### Specialization of cost equations eval_gx_add_cached_char_start/1 
* CE 2 is refined into CE [13,14] 


#### Refined cost equations eval_gx_add_cached_char_start/1 
* CE 13: eval_gx_add_cached_char_start(B) = 0+ eval_gx_add_cached_char_bb0_in(B):1
     [] 
* CE 14: eval_gx_add_cached_char_start(B) = 0+ eval_gx_add_cached_char_bb0_in(B):2
     [] 

### Cost equations --> "Loop" of eval_gx_add_cached_char_start/1 
* CEs [14] --> Loop 12 
* CEs [13] --> Loop 13 

#### Loops of eval_gx_add_cached_char_start/1 
* Loop 12: eval_gx_add_cached_char_start(B) [] 
* Loop 13: eval_gx_add_cached_char_start(B) [] 

### Ranking functions of CR eval_gx_add_cached_char_start(B) 

#### Partial ranking functions of CR eval_gx_add_cached_char_start(B) 


### Resulting Chains:eval_gx_add_cached_char_start(B) 
* [13]
* [12]...


### Merging Chains  eval_gx_add_cached_char_start/1 into  External patterns of execution 
* [[13]] --> 1 
* [[12]] --> 2 


Computing Bounds
=====================================

#### Cost of loops [6] 

 * loop 6:eval_gx_add_cached_char_bb3_in(B) -> [eval_gx_add_cached_char_bb3_in(B')] 
1
#### Cost of phase [6]:eval_gx_add_cached_char_bb3_in(B) -> [eval_gx_add_cached_char_bb3_in(B')] 
1*it(6)+0
#### Cost of phase [6]:eval_gx_add_cached_char_bb3_in(B) -> [eval_gx_add_cached_char_bb3_in(B')] 
1*it(6)+0
#### Cost of chains of eval_gx_add_cached_char_bb3_in(B):
* Chain [[6]]...: 1*it(6)+0
  with precondition: [B=2] 

* Chain [[6],7]: 1*it(6)+0
  with precondition: [B=2] 

* Chain [7]: 0
  with precondition: [B=2] 


#### Cost of chains of eval_gx_add_cached_char_bb2_in(B):
* Chain [9]: 1*s(2)+1
  with precondition: [] 

* Chain [8]...: 1*s(3)+1
  with precondition: [] 


#### Cost of chains of eval_gx_add_cached_char_bb0_in(B):
* Chain [11]: 1*s(4)+1
  with precondition: [] 

* Chain [10]...: 1*s(5)+1
  with precondition: [] 


#### Cost of chains of eval_gx_add_cached_char_start(B):
* Chain [13]: 1*s(6)+1
  with precondition: [] 

* Chain [12]...: 1*s(7)+1
  with precondition: [] 


Closed-form bounds of eval_gx_add_cached_char_start(B): 
-------------------------------------
* Chain [13] with precondition: [] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [12]... with precondition: [] 
    - Upper bound: inf 
    - Complexity: infinity 

### Maximum cost of eval_gx_add_cached_char_start(B): inf 
Asymptotic class: infinity 

Time statistics: 
-------------------------------------
* Partial evaluation computed in 3 ms.
* Invariants computed in 1 ms.
   - Backward Invariants 1 ms.
   - Transitive Invariants 0 ms.
* Refinement performed in 3 ms.
* Termination proved in 0 ms.
* Upper bounds computed in 5 ms.
   - Equation cost structures 2 ms.
   - Phase cost structures 1 ms.
   - Chain cost structures 2 ms.
   - Solving cost expressions 0 ms.
* Total analysis performed in 22 ms.


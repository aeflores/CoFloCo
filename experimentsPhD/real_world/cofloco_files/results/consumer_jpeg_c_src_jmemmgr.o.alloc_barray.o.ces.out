WARNING: Excluded non-linear constraints:[G=128*E*C]
WARNING: Excluded non-linear constraints:[G=128*B*C-128*D*C]
WARNING: Excluded non-linear constraints:[-128*B*E+999999976>=0,-128*B*E+999999976+1=<128*B]
WARNING: Excluded non-linear constraints:[-128*B*E+999999976>=0,-128*B*E+999999976+1=< -128*B]
WARNING: Excluded non-linear constraints:[-128*B*E+999999976>=0,-128*B*E+999999976+1=<128*B]
WARNING: Excluded non-linear constraints:[-128*B*E+999999976>=0,-128*B*E+999999976+1=< -128*B]
Warning: Ignored call to eval_alloc_barray_stop/1 in equation loop_cont_eval_alloc_barray_bb3_in/2 

Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. recursive  : [eval_alloc_barray_bb5_in/15]
1. recursive  : [eval_alloc_barray_22/8,eval_alloc_barray_23/8,eval_alloc_barray_bb3_in/6,loop_cont_eval_alloc_barray_bb5_in/7]
2. non_recursive  : [loop_cont_eval_alloc_barray_bb3_in/2]
3. non_recursive  : [eval_alloc_barray_14/5]
4. non_recursive  : [eval_alloc_barray_13/6]
5. non_recursive  : [eval_alloc_barray_bb2_in/5]
6. non_recursive  : [eval_alloc_barray_6/5]
7. non_recursive  : [eval_alloc_barray_5/5]
8. non_recursive  : [eval_alloc_barray_bb0_in/4]
9. non_recursive  : [eval_alloc_barray_start/4]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into eval_alloc_barray_bb5_in/15
1. SCC is partially evaluated into eval_alloc_barray_bb3_in/6
2. SCC is completely evaluated into other SCCs
3. SCC is partially evaluated into eval_alloc_barray_14/5
4. SCC is completely evaluated into other SCCs
5. SCC is partially evaluated into eval_alloc_barray_bb2_in/5
6. SCC is completely evaluated into other SCCs
7. SCC is completely evaluated into other SCCs
8. SCC is partially evaluated into eval_alloc_barray_bb0_in/4
9. SCC is partially evaluated into eval_alloc_barray_start/4

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations eval_alloc_barray_bb5_in/15 
* CE 12 is refined into CE [13] 
* CE 11 is refined into CE [14] 


#### Refined cost equations eval_alloc_barray_bb5_in/15 
* CE 13: eval_alloc_barray_bb5_in(A,B,C,D,E,F,G,H,I,J,A,B,C,I,F) = 0
     [B+F>=H+I+1,F>=H,0>=H,H+I=D+F,J=2] 
* CE 14: eval_alloc_barray_bb5_in(V_pool_id,V_numrows,V_23,V_currow_0,V_rowsperchunk_1,V_28,V_31,V_i_0,V_currow_1,B,C,D,E,F,G) = 1+ eval_alloc_barray_bb5_in(V_pool_id,V_numrows,V_23,H,V_rowsperchunk_1,V_28,V_31,I,J,K,C,D,E,F,G)
     [V_numrows+V_28>=V_i_0+V_currow_1+1,V_28>=V_i_0,V_i_0>=1,V_i_0+V_currow_1=V_28+H,V_i_0+V_currow_1=V_currow_0+V_28,V_currow_1+1=J,V_i_0=I+1,K=2,B=2] 

### Cost equations --> "Loop" of eval_alloc_barray_bb5_in/15 
* CEs [14] --> Loop 10 
* CEs [13] --> Loop 11 

#### Loops of eval_alloc_barray_bb5_in/15 
* Loop 10: eval_alloc_barray_bb5_in(V_pool_id,V_numrows,V_23,V_currow_0,V_rowsperchunk_1,V_28,V_31,V_i_0,V_currow_1,B,C,D,E,F,G)->  eval_alloc_barray_bb5_in(V_pool_id,V_numrows,V_23,V_currow_0',V_rowsperchunk_1,V_28,V_31,V_i_0',V_currow_1',B',C,D,E,F,G)
                  [V_numrows+V_28>=V_i_0+V_currow_1+1,V_28>=V_i_0,V_i_0>=1,V_28+V_currow_0'=V_i_0+V_currow_1,V_currow_0+V_28=V_i_0+V_currow_1,V_currow_1+1=V_currow_1',V_i_0=V_i_0'+1,B'=2,B=2] 
* Loop 11: eval_alloc_barray_bb5_in(A,B,C,D,E,F,G,H,I,J,A,B,C,I,F) [B+F>=H+I+1,F>=H,0>=H,D+F=H+I,J=2] 

### Ranking functions of CR eval_alloc_barray_bb5_in(V_pool_id,V_numrows,V_23,V_currow_0,V_rowsperchunk_1,V_28,V_31,V_i_0,V_currow_1,B,C,D,E,F,G) 
* RF of phase [10]: [V_currow_0+V_28-V_currow_1,V_i_0,V_numrows+V_28-V_currow_1-1]

#### Partial ranking functions of CR eval_alloc_barray_bb5_in(V_pool_id,V_numrows,V_23,V_currow_0,V_rowsperchunk_1,V_28,V_31,V_i_0,V_currow_1,B,C,D,E,F,G) 
* Partial RF of phase [10]:
  - RF of loop [10:1]:
    V_currow_0+V_28-V_currow_1
    V_i_0
    V_numrows+V_28-V_currow_1-1


### Resulting Chains:eval_alloc_barray_bb5_in(V_pool_id,V_numrows,V_23,V_currow_0,V_rowsperchunk_1,V_28,V_31,V_i_0,V_currow_1,B,C,D,E,F,G) 
* [[10],11]
* [11]


### Merging Chains  eval_alloc_barray_bb5_in/15 into  External patterns of execution 
* [[11]] --> 1 
* [[11,[10]]] --> 2 


### Specialization of cost equations eval_alloc_barray_bb3_in/6 
* CE 10 is refined into CE [15] 
* CE 8 is refined into CE [16] 
* CE 9 is refined into CE [17,18] 


#### Refined cost equations eval_alloc_barray_bb3_in/6 
* CE 15: eval_alloc_barray_bb3_in(V_pool_id,V_numrows,V_23,V_currow_0,V_rowsperchunk_1,B) = 0
     [V_currow_0>=V_numrows,B=3] 
* CE 16: eval_alloc_barray_bb3_in(V_pool_id,V_numrows,V_23,V_currow_0,V_rowsperchunk_1,B) = 2+ eval_alloc_barray_bb5_in(V_pool_id,V_numrows,V_23,C,V_rowsperchunk_1,D,E,D,F,G,V_pool_id,V_numrows,V_23,V_numrows,D):2+ eval_alloc_barray_bb3_in(V_pool_id,V_numrows,V_23,V_numrows,D,H)
     [D>=1,V_numrows=D+F,V_numrows=C+D,V_numrows=V_currow_0+D,H=3,G=2,B=3] 
* CE 17: eval_alloc_barray_bb3_in(V_pool_id,V_numrows,V_23,V_currow_0,V_rowsperchunk_1,B) = 2+ eval_alloc_barray_bb5_in(V_pool_id,V_numrows,V_23,V_currow_0,V_rowsperchunk_1,V_rowsperchunk_1,C,V_rowsperchunk_1,V_currow_0,D,V_pool_id,V_numrows,V_23,V_currow_0,V_rowsperchunk_1):1+ eval_alloc_barray_bb3_in(V_pool_id,V_numrows,V_23,V_currow_0,V_rowsperchunk_1,E)
     [V_numrows>=V_currow_0+1,0>=V_rowsperchunk_1,E=3,D=2,B=3] 
* CE 18: eval_alloc_barray_bb3_in(V_pool_id,V_numrows,V_23,V_currow_0,V_rowsperchunk_1,B) = 2+ eval_alloc_barray_bb5_in(V_pool_id,V_numrows,V_23,C,V_rowsperchunk_1,V_rowsperchunk_1,D,V_rowsperchunk_1,E,F,V_pool_id,V_numrows,V_23,G,V_rowsperchunk_1):2+ eval_alloc_barray_bb3_in(V_pool_id,V_numrows,V_23,G,V_rowsperchunk_1,H)
     [V_numrows+V_rowsperchunk_1>=G+1,V_rowsperchunk_1>=1,V_rowsperchunk_1+E=G,V_rowsperchunk_1+C=G,V_currow_0+V_rowsperchunk_1=G,H=3,F=2,B=3] 

### Cost equations --> "Loop" of eval_alloc_barray_bb3_in/6 
* CEs [18] --> Loop 12 
* CEs [17] --> Loop 13 
* CEs [16] --> Loop 14 
* CEs [15] --> Loop 15 

#### Loops of eval_alloc_barray_bb3_in/6 
* Loop 12: eval_alloc_barray_bb3_in(V_pool_id,V_numrows,V_23,V_currow_0,V_rowsperchunk_1,B)->  eval_alloc_barray_bb3_in(V_pool_id,V_numrows,V_23,V_currow_0',V_rowsperchunk_1,B')
                  [V_numrows>=V_currow_0+1,V_rowsperchunk_1>=1,V_currow_0+V_rowsperchunk_1=V_currow_0',B'=3,B=3] 
* Loop 13: eval_alloc_barray_bb3_in(V_pool_id,V_numrows,V_23,V_currow_0,V_rowsperchunk_1,B)->  eval_alloc_barray_bb3_in(V_pool_id,V_numrows,V_23,V_currow_0,V_rowsperchunk_1,B')
                  [V_numrows>=V_currow_0+1,0>=V_rowsperchunk_1,B'=3,B=3] 
* Loop 14: eval_alloc_barray_bb3_in(V_pool_id,V_numrows,V_23,V_currow_0,V_rowsperchunk_1,B)->  eval_alloc_barray_bb3_in(V_pool_id,V_numrows,V_23,V_numrows,A',B')
                  [V_numrows>=V_currow_0+1,V_numrows=V_currow_0+A',B'=3,B=3] 
* Loop 15: eval_alloc_barray_bb3_in(V_pool_id,V_numrows,V_23,V_currow_0,V_rowsperchunk_1,B) [V_currow_0>=V_numrows,B=3] 

### Ranking functions of CR eval_alloc_barray_bb3_in(V_pool_id,V_numrows,V_23,V_currow_0,V_rowsperchunk_1,B) 
* RF of phase [12]: [V_numrows-V_currow_0]

#### Partial ranking functions of CR eval_alloc_barray_bb3_in(V_pool_id,V_numrows,V_23,V_currow_0,V_rowsperchunk_1,B) 
* Partial RF of phase [12]:
  - RF of loop [12:1]:
    V_numrows-V_currow_0


### Resulting Chains:eval_alloc_barray_bb3_in(V_pool_id,V_numrows,V_23,V_currow_0,V_rowsperchunk_1,B) 
* [[13]]...
* [[13],14,15]
* [[12],15]
* [[12],14,15]
* [15]
* [14,15]


### Merging Chains  eval_alloc_barray_bb3_in/6 into  External patterns of execution 
* [[15,14],[15,14,[13]]] --> 1 
* [[15,14,[12]],[15,[12]]] --> 2 
* [[15]] --> 3 
* [[[13]]] --> 4 


### Specialization of cost equations eval_alloc_barray_14/5 
* CE 7 is refined into CE [19,20,21,22] 


#### Refined cost equations eval_alloc_barray_14/5 
* CE 19: eval_alloc_barray_14(V_pool_id,V_blocksperrow,V_numrows,V_rowsperchunk_0,B) = 1+ eval_alloc_barray_bb3_in(V_pool_id,V_numrows,V_blocksperrow,C,V_rowsperchunk_0,D):1
     [V_numrows>=1,D=3,C=0] 
* CE 20: eval_alloc_barray_14(V_pool_id,V_blocksperrow,V_numrows,V_rowsperchunk_0,B) = 1+ eval_alloc_barray_bb3_in(V_pool_id,V_numrows,V_blocksperrow,C,V_rowsperchunk_0,D):2
     [V_rowsperchunk_0>=1,V_numrows>=1,D=3,C=0] 
* CE 21: eval_alloc_barray_14(V_pool_id,V_blocksperrow,V_numrows,V_rowsperchunk_0,B) = 1+ eval_alloc_barray_bb3_in(V_pool_id,V_numrows,V_blocksperrow,C,V_rowsperchunk_0,D):3
     [0>=V_numrows,D=3,C=0] 
* CE 22: eval_alloc_barray_14(V_pool_id,V_blocksperrow,V_numrows,V_rowsperchunk_0,B) = 1+ eval_alloc_barray_bb3_in(V_pool_id,V_numrows,V_blocksperrow,C,V_rowsperchunk_0,D):4
     [V_numrows>=1,0>=V_rowsperchunk_0,D=3,C=0] 

### Cost equations --> "Loop" of eval_alloc_barray_14/5 
* CEs [22] --> Loop 16 
* CEs [19,20] --> Loop 17 
* CEs [21] --> Loop 18 

#### Loops of eval_alloc_barray_14/5 
* Loop 16: eval_alloc_barray_14(V_pool_id,V_blocksperrow,V_numrows,V_rowsperchunk_0,B) [V_numrows>=1,0>=V_rowsperchunk_0] 
* Loop 17: eval_alloc_barray_14(V_pool_id,V_blocksperrow,V_numrows,V_rowsperchunk_0,B) [V_numrows>=1] 
* Loop 18: eval_alloc_barray_14(V_pool_id,V_blocksperrow,V_numrows,V_rowsperchunk_0,B) [0>=V_numrows] 

### Ranking functions of CR eval_alloc_barray_14(V_pool_id,V_blocksperrow,V_numrows,V_rowsperchunk_0,B) 

#### Partial ranking functions of CR eval_alloc_barray_14(V_pool_id,V_blocksperrow,V_numrows,V_rowsperchunk_0,B) 


### Resulting Chains:eval_alloc_barray_14(V_pool_id,V_blocksperrow,V_numrows,V_rowsperchunk_0,B) 
* [18]
* [17]
* [16]...


### Merging Chains  eval_alloc_barray_14/5 into  External patterns of execution 
* [[18]] --> 1 
* [[17]] --> 2 
* [[16]] --> 3 


### Specialization of cost equations eval_alloc_barray_bb2_in/5 
* CE 5 is refined into CE [23,24,25] 
* CE 6 is refined into CE [26,27] 


#### Refined cost equations eval_alloc_barray_bb2_in/5 
* CE 23: eval_alloc_barray_bb2_in(V_pool_id,V_blocksperrow,V_numrows,V_5,B) = 0+ eval_alloc_barray_14(V_pool_id,V_blocksperrow,V_numrows,V_5,B):1
     [0>=V_numrows] 
* CE 24: eval_alloc_barray_bb2_in(V_pool_id,V_blocksperrow,V_numrows,V_5,B) = 0+ eval_alloc_barray_14(V_pool_id,V_blocksperrow,V_numrows,V_5,B):2
     [V_numrows>=1] 
* CE 25: eval_alloc_barray_bb2_in(V_pool_id,V_blocksperrow,V_numrows,V_5,B) = 0+ eval_alloc_barray_14(V_pool_id,V_blocksperrow,V_numrows,V_5,B):3
     [V_numrows>=1,0>=V_5] 
* CE 26: eval_alloc_barray_bb2_in(V_pool_id,V_blocksperrow,V_numrows,V_5,B) = 0+ eval_alloc_barray_14(V_pool_id,V_blocksperrow,V_numrows,V_numrows,B):1
     [0>=V_numrows] 
* CE 27: eval_alloc_barray_bb2_in(V_pool_id,V_blocksperrow,V_numrows,V_5,B) = 0+ eval_alloc_barray_14(V_pool_id,V_blocksperrow,V_numrows,V_numrows,B):2
     [V_numrows>=1] 

### Cost equations --> "Loop" of eval_alloc_barray_bb2_in/5 
* CEs [24,27] --> Loop 19 
* CEs [23,26] --> Loop 20 
* CEs [25] --> Loop 21 

#### Loops of eval_alloc_barray_bb2_in/5 
* Loop 19: eval_alloc_barray_bb2_in(V_pool_id,V_blocksperrow,V_numrows,V_5,B) [V_numrows>=1] 
* Loop 20: eval_alloc_barray_bb2_in(V_pool_id,V_blocksperrow,V_numrows,V_5,B) [0>=V_numrows] 
* Loop 21: eval_alloc_barray_bb2_in(V_pool_id,V_blocksperrow,V_numrows,V_5,B) [V_numrows>=1,0>=V_5] 

### Ranking functions of CR eval_alloc_barray_bb2_in(V_pool_id,V_blocksperrow,V_numrows,V_5,B) 

#### Partial ranking functions of CR eval_alloc_barray_bb2_in(V_pool_id,V_blocksperrow,V_numrows,V_5,B) 


### Resulting Chains:eval_alloc_barray_bb2_in(V_pool_id,V_blocksperrow,V_numrows,V_5,B) 
* [21]...
* [20]
* [19]


### Merging Chains  eval_alloc_barray_bb2_in/5 into  External patterns of execution 
* [[20]] --> 1 
* [[19]] --> 2 
* [[21]] --> 3 


### Specialization of cost equations eval_alloc_barray_bb0_in/4 
* CE 3 is refined into CE [28,29,30] 
* CE 4 is refined into CE [31,32,33] 


#### Refined cost equations eval_alloc_barray_bb0_in/4 
* CE 28: eval_alloc_barray_bb0_in(V_pool_id,V_blocksperrow,V_numrows,B) = 0+ eval_alloc_barray_bb2_in(V_pool_id,V_blocksperrow,V_numrows,C,B):1
     [128*V_blocksperrow>=1,C>=0,0>=V_numrows] 
* CE 29: eval_alloc_barray_bb0_in(V_pool_id,V_blocksperrow,V_numrows,B) = 0+ eval_alloc_barray_bb2_in(V_pool_id,V_blocksperrow,V_numrows,C,B):2
     [128*V_blocksperrow>=1,C>=0,V_numrows>=1] 
* CE 30: eval_alloc_barray_bb0_in(V_pool_id,V_blocksperrow,V_numrows,B) = 0+ eval_alloc_barray_bb2_in(V_pool_id,V_blocksperrow,V_numrows,C,B):3
     [128*V_blocksperrow>=1,V_numrows>=1,C=0] 
* CE 31: eval_alloc_barray_bb0_in(V_pool_id,V_blocksperrow,V_numrows,B) = 0+ eval_alloc_barray_bb2_in(V_pool_id,V_blocksperrow,V_numrows,C,B):1
     [0>=C,0>=V_numrows,0>=128*V_blocksperrow+1] 
* CE 32: eval_alloc_barray_bb0_in(V_pool_id,V_blocksperrow,V_numrows,B) = 0+ eval_alloc_barray_bb2_in(V_pool_id,V_blocksperrow,V_numrows,C,B):2
     [V_numrows>=1,0>=C,0>=128*V_blocksperrow+1] 
* CE 33: eval_alloc_barray_bb0_in(V_pool_id,V_blocksperrow,V_numrows,B) = 0+ eval_alloc_barray_bb2_in(V_pool_id,V_blocksperrow,V_numrows,C,B):3
     [V_numrows>=1,0>=C,0>=128*V_blocksperrow+1] 

### Cost equations --> "Loop" of eval_alloc_barray_bb0_in/4 
* CEs [30] --> Loop 22 
* CEs [33] --> Loop 23 
* CEs [29] --> Loop 24 
* CEs [28] --> Loop 25 
* CEs [32] --> Loop 26 
* CEs [31] --> Loop 27 

#### Loops of eval_alloc_barray_bb0_in/4 
* Loop 22: eval_alloc_barray_bb0_in(V_pool_id,V_blocksperrow,V_numrows,B) [128*V_blocksperrow>=1,V_numrows>=1] 
* Loop 23: eval_alloc_barray_bb0_in(V_pool_id,V_blocksperrow,V_numrows,B) [V_numrows>=1,0>=128*V_blocksperrow+1] 
* Loop 24: eval_alloc_barray_bb0_in(V_pool_id,V_blocksperrow,V_numrows,B) [128*V_blocksperrow>=1,V_numrows>=1] 
* Loop 25: eval_alloc_barray_bb0_in(V_pool_id,V_blocksperrow,V_numrows,B) [128*V_blocksperrow>=1,0>=V_numrows] 
* Loop 26: eval_alloc_barray_bb0_in(V_pool_id,V_blocksperrow,V_numrows,B) [V_numrows>=1,0>=128*V_blocksperrow+1] 
* Loop 27: eval_alloc_barray_bb0_in(V_pool_id,V_blocksperrow,V_numrows,B) [0>=V_numrows,0>=128*V_blocksperrow+1] 

### Ranking functions of CR eval_alloc_barray_bb0_in(V_pool_id,V_blocksperrow,V_numrows,B) 

#### Partial ranking functions of CR eval_alloc_barray_bb0_in(V_pool_id,V_blocksperrow,V_numrows,B) 


### Resulting Chains:eval_alloc_barray_bb0_in(V_pool_id,V_blocksperrow,V_numrows,B) 
* [27]
* [26]
* [25]
* [24]
* [23]...
* [22]...


### Merging Chains  eval_alloc_barray_bb0_in/4 into  External patterns of execution 
* [[27]] --> 1 
* [[26]] --> 2 
* [[25]] --> 3 
* [[24]] --> 4 
* [[23]] --> 5 
* [[22]] --> 6 


### Specialization of cost equations eval_alloc_barray_start/4 
* CE 2 is refined into CE [34,35,36,37,38,39] 


#### Refined cost equations eval_alloc_barray_start/4 
* CE 34: eval_alloc_barray_start(V_pool_id,V_blocksperrow,V_numrows,B) = 0+ eval_alloc_barray_bb0_in(V_pool_id,V_blocksperrow,V_numrows,B):1
     [0>=V_numrows,0>=128*V_blocksperrow+1] 
* CE 35: eval_alloc_barray_start(V_pool_id,V_blocksperrow,V_numrows,B) = 0+ eval_alloc_barray_bb0_in(V_pool_id,V_blocksperrow,V_numrows,B):2
     [V_numrows>=1,0>=128*V_blocksperrow+1] 
* CE 36: eval_alloc_barray_start(V_pool_id,V_blocksperrow,V_numrows,B) = 0+ eval_alloc_barray_bb0_in(V_pool_id,V_blocksperrow,V_numrows,B):3
     [128*V_blocksperrow>=1,0>=V_numrows] 
* CE 37: eval_alloc_barray_start(V_pool_id,V_blocksperrow,V_numrows,B) = 0+ eval_alloc_barray_bb0_in(V_pool_id,V_blocksperrow,V_numrows,B):4
     [128*V_blocksperrow>=1,V_numrows>=1] 
* CE 38: eval_alloc_barray_start(V_pool_id,V_blocksperrow,V_numrows,B) = 0+ eval_alloc_barray_bb0_in(V_pool_id,V_blocksperrow,V_numrows,B):5
     [V_numrows>=1,0>=128*V_blocksperrow+1] 
* CE 39: eval_alloc_barray_start(V_pool_id,V_blocksperrow,V_numrows,B) = 0+ eval_alloc_barray_bb0_in(V_pool_id,V_blocksperrow,V_numrows,B):6
     [128*V_blocksperrow>=1,V_numrows>=1] 

### Cost equations --> "Loop" of eval_alloc_barray_start/4 
* CEs [39] --> Loop 28 
* CEs [38] --> Loop 29 
* CEs [37] --> Loop 30 
* CEs [36] --> Loop 31 
* CEs [35] --> Loop 32 
* CEs [34] --> Loop 33 

#### Loops of eval_alloc_barray_start/4 
* Loop 28: eval_alloc_barray_start(V_pool_id,V_blocksperrow,V_numrows,B) [128*V_blocksperrow>=1,V_numrows>=1] 
* Loop 29: eval_alloc_barray_start(V_pool_id,V_blocksperrow,V_numrows,B) [V_numrows>=1,0>=128*V_blocksperrow+1] 
* Loop 30: eval_alloc_barray_start(V_pool_id,V_blocksperrow,V_numrows,B) [128*V_blocksperrow>=1,V_numrows>=1] 
* Loop 31: eval_alloc_barray_start(V_pool_id,V_blocksperrow,V_numrows,B) [128*V_blocksperrow>=1,0>=V_numrows] 
* Loop 32: eval_alloc_barray_start(V_pool_id,V_blocksperrow,V_numrows,B) [V_numrows>=1,0>=128*V_blocksperrow+1] 
* Loop 33: eval_alloc_barray_start(V_pool_id,V_blocksperrow,V_numrows,B) [0>=V_numrows,0>=128*V_blocksperrow+1] 

### Ranking functions of CR eval_alloc_barray_start(V_pool_id,V_blocksperrow,V_numrows,B) 

#### Partial ranking functions of CR eval_alloc_barray_start(V_pool_id,V_blocksperrow,V_numrows,B) 


### Resulting Chains:eval_alloc_barray_start(V_pool_id,V_blocksperrow,V_numrows,B) 
* [33]
* [32]
* [31]
* [30]
* [29]...
* [28]...


### Merging Chains  eval_alloc_barray_start/4 into  External patterns of execution 
* [[33]] --> 1 
* [[32]] --> 2 
* [[31]] --> 3 
* [[30]] --> 4 
* [[29]] --> 5 
* [[28]] --> 6 


Computing Bounds
=====================================

#### Cost of loops [10] 

 * loop 10:eval_alloc_barray_bb5_in(V_pool_id,V_numrows,V_23,V_currow_0,V_rowsperchunk_1,V_28,V_31,V_i_0,V_currow_1,B,C,D,E,F,G) -> [eval_alloc_barray_bb5_in(V_pool_id',V_numrows',V_23',V_currow_0',V_rowsperchunk_1',V_28',V_31',V_i_0',V_currow_1',B',C',D',E',F',G')] 
1
#### Cost of phase [10]:eval_alloc_barray_bb5_in(V_pool_id,V_numrows,V_23,V_currow_0,V_rowsperchunk_1,V_28,V_31,V_i_0,V_currow_1,B,C,D,E,F,G) -> [eval_alloc_barray_bb5_in(V_pool_id',V_numrows',V_23',V_currow_0',V_rowsperchunk_1',V_28',V_31',V_i_0',V_currow_1',B',C',D',E',F',G')] 
1*it(10)+0
  Such that:it(10) =< V_numrows+V_28-V_currow_1
it(10) =< V_numrows+V_28-V_currow_1-V_numrows'-V_28'+V_currow_1'
it(10) =< V_currow_0+V_28-V_currow_1
it(10) =< V_currow_0+V_28-V_currow_1-V_currow_0'-V_28'+V_currow_1'
it(10) =< V_i_0
it(10) =< V_i_0-V_i_0'

#### Cost of chains of eval_alloc_barray_bb5_in(V_pool_id,V_numrows,V_23,V_currow_0,V_rowsperchunk_1,V_28,V_31,V_i_0,V_currow_1,B,C,D,E,F,G):
* Chain [[10],11]: 1*it(10)+0
  Such that:it(10) =< V_i_0

  with precondition: [B=2,V_pool_id=C,V_numrows=D,V_23=E,V_28=G,V_28+V_currow_0=F,V_28+V_currow_0=V_currow_1+V_i_0,V_numrows>=V_currow_0+1,V_currow_1>=V_currow_0,V_28+V_currow_0>=V_currow_1+1] 

* Chain [11]: 0
  with precondition: [B=2,C=V_pool_id,E=V_23,V_numrows=D,V_currow_1=F,V_28=G,V_currow_1+V_i_0=V_28+V_currow_0,0>=V_i_0,V_28>=V_i_0,V_28+V_numrows>=V_currow_1+V_i_0+1] 


#### Cost of loops [13] 

 * loop 13:eval_alloc_barray_bb3_in(V_pool_id,V_numrows,V_23,V_currow_0,V_rowsperchunk_1,B) -> [eval_alloc_barray_bb3_in(V_pool_id',V_numrows',V_23',V_currow_0',V_rowsperchunk_1',B')] 
2
#### Cost of phase [13]:eval_alloc_barray_bb3_in(V_pool_id,V_numrows,V_23,V_currow_0,V_rowsperchunk_1,B) -> [eval_alloc_barray_bb3_in(V_pool_id',V_numrows',V_23',V_currow_0',V_rowsperchunk_1',B')] 
2*it(13)+0
#### Cost of phase [13]:eval_alloc_barray_bb3_in(V_pool_id,V_numrows,V_23,V_currow_0,V_rowsperchunk_1,B) -> [eval_alloc_barray_bb3_in(V_pool_id',V_numrows',V_23',V_currow_0',V_rowsperchunk_1',B')] 
2*it(13)+0
#### Cost of loops [12] 

 * loop 12:eval_alloc_barray_bb3_in(V_pool_id,V_numrows,V_23,V_currow_0,V_rowsperchunk_1,B) -> [eval_alloc_barray_bb3_in(V_pool_id',V_numrows',V_23',V_currow_0',V_rowsperchunk_1',B')] 
1*s(3)+2
  Such that:s(3) =< V_rowsperchunk_1'

#### Cost of phase [12]:eval_alloc_barray_bb3_in(V_pool_id,V_numrows,V_23,V_currow_0,V_rowsperchunk_1,B) -> [eval_alloc_barray_bb3_in(V_pool_id',V_numrows',V_23',V_currow_0',V_rowsperchunk_1',B')] 
2*it(12)+1*s(4)+0
  Such that:it(12) =< V_numrows-V_currow_0
s(4) =< V_numrows-V_currow_0+V_rowsperchunk_1
s(4) =< V_numrows-V_currow_0+V_rowsperchunk_1-V_numrows'+V_currow_0'-V_rowsperchunk_1'
it(12) =< V_numrows-V_currow_0-V_numrows'+V_currow_0'

#### Cost of phase [12]:eval_alloc_barray_bb3_in(V_pool_id,V_numrows,V_23,V_currow_0,V_rowsperchunk_1,B) -> [eval_alloc_barray_bb3_in(V_pool_id',V_numrows',V_23',V_currow_0',V_rowsperchunk_1',B')] 
2*it(12)+1*s(4)+0
  Such that:it(12) =< V_numrows-V_currow_0
s(4) =< V_numrows-V_currow_0+V_rowsperchunk_1
s(4) =< V_numrows-V_currow_0+V_rowsperchunk_1-V_numrows'+V_currow_0'-V_rowsperchunk_1'
it(12) =< V_numrows-V_currow_0-V_numrows'+V_currow_0'

#### Cost of chains of eval_alloc_barray_bb3_in(V_pool_id,V_numrows,V_23,V_currow_0,V_rowsperchunk_1,B):
* Chain [[13]]...: 2*it(13)+0
  with precondition: [V_numrows>=V_currow_0+1,0>=V_rowsperchunk_1,B=3] 

* Chain [[13],14,15]: 2*it(13)+1*s(1)+2
  Such that:s(1) =< V_numrows

  with precondition: [V_currow_0=0,B=3,0>=V_rowsperchunk_1,V_numrows>=1] 

* Chain [[12],15]: 2*it(12)+1*s(4)+0
  Such that:it(12) =< V_numrows-V_currow_0
s(4) =< V_numrows-V_currow_0+V_rowsperchunk_1

  with precondition: [B=3,V_currow_0>=0,V_rowsperchunk_1>=1,V_numrows>=V_currow_0+1] 

* Chain [[12],14,15]: 4*it(12)+2
  Such that:aux(1) =< V_numrows-V_currow_0
it(12) =< aux(1)

  with precondition: [B=3,V_currow_0>=0,V_rowsperchunk_1>=1,V_numrows>=V_currow_0+V_rowsperchunk_1+1] 

* Chain [15]: 0
  with precondition: [B=3,V_currow_0>=0,V_currow_0>=V_numrows] 

* Chain [14,15]: 1*s(1)+2
  Such that:s(1) =< V_numrows-V_currow_0

  with precondition: [B=3,V_currow_0>=0,V_numrows>=V_currow_0+1] 


#### Cost of chains of eval_alloc_barray_14(V_pool_id,V_blocksperrow,V_numrows,V_rowsperchunk_0,B):
* Chain [18]: 1
  with precondition: [0>=V_numrows] 

* Chain [17]: 8*s(12)+2*s(14)+1*s(15)+3
  Such that:s(15) =< V_numrows+V_rowsperchunk_0
aux(4) =< V_numrows
s(12) =< aux(4)

  with precondition: [V_numrows>=1] 

* Chain [16]...: 2*s(18)+1
  with precondition: [0>=V_rowsperchunk_0,V_numrows>=1] 


#### Cost of chains of eval_alloc_barray_bb2_in(V_pool_id,V_blocksperrow,V_numrows,V_5,B):
* Chain [21]...: 2*s(19)+1
  with precondition: [0>=V_5,V_numrows>=1] 

* Chain [20]: 1
  with precondition: [0>=V_numrows] 

* Chain [19]: 1*s(20)+16*s(22)+4*s(23)+1*s(24)+3
  Such that:s(20) =< V_numrows+V_5
s(24) =< 2*V_numrows
aux(5) =< V_numrows
s(22) =< aux(5)

  with precondition: [V_numrows>=1] 


#### Cost of chains of eval_alloc_barray_bb0_in(V_pool_id,V_blocksperrow,V_numrows,B):
* Chain [27]: 1
  with precondition: [0>=128*V_blocksperrow+1,0>=V_numrows] 

* Chain [26]: 17*s(28)+1*s(29)+4*s(32)+3
  Such that:s(29) =< 2*V_numrows
aux(6) =< V_numrows
s(28) =< aux(6)

  with precondition: [0>=128*V_blocksperrow+1,V_numrows>=1] 

* Chain [25]: 1
  with precondition: [0>=V_numrows,128*V_blocksperrow>=1] 

* Chain [24]: 5*s(33)+1*s(34)+16*s(36)+3
  Such that:s(35) =< V_numrows
s(34) =< 2*V_numrows
s(36) =< s(35)

  with precondition: [V_numrows>=1,128*V_blocksperrow>=1] 

* Chain [23]...: 2*s(38)+1
  with precondition: [0>=128*V_blocksperrow+1,V_numrows>=1] 

* Chain [22]...: 2*s(39)+1
  with precondition: [V_numrows>=1,128*V_blocksperrow>=1] 


#### Cost of chains of eval_alloc_barray_start(V_pool_id,V_blocksperrow,V_numrows,B):
* Chain [33]: 1
  with precondition: [0>=128*V_blocksperrow+1,0>=V_numrows] 

* Chain [32]: 1*s(40)+17*s(42)+4*s(43)+3
  Such that:s(41) =< V_numrows
s(40) =< 2*V_numrows
s(42) =< s(41)

  with precondition: [0>=128*V_blocksperrow+1,V_numrows>=1] 

* Chain [31]: 1
  with precondition: [0>=V_numrows,128*V_blocksperrow>=1] 

* Chain [30]: 1*s(45)+16*s(46)+5*s(47)+3
  Such that:s(44) =< V_numrows
s(45) =< 2*V_numrows
s(46) =< s(44)

  with precondition: [V_numrows>=1,128*V_blocksperrow>=1] 

* Chain [29]...: 2*s(48)+1
  with precondition: [0>=128*V_blocksperrow+1,V_numrows>=1] 

* Chain [28]...: 2*s(49)+1
  with precondition: [V_numrows>=1,128*V_blocksperrow>=1] 


Closed-form bounds of eval_alloc_barray_start(V_pool_id,V_blocksperrow,V_numrows,B): 
-------------------------------------
* Chain [33] with precondition: [0>=128*V_blocksperrow+1,0>=V_numrows] 
    - Upper bound: 1 
    - Complexity: constant 
* Chain [32] with precondition: [0>=128*V_blocksperrow+1,V_numrows>=1] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [31] with precondition: [0>=V_numrows,128*V_blocksperrow>=1] 
    - Upper bound: 1 
    - Complexity: constant 
* Chain [30] with precondition: [V_numrows>=1,128*V_blocksperrow>=1] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [29]... with precondition: [0>=128*V_blocksperrow+1,V_numrows>=1] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [28]... with precondition: [V_numrows>=1,128*V_blocksperrow>=1] 
    - Upper bound: inf 
    - Complexity: infinity 

### Maximum cost of eval_alloc_barray_start(V_pool_id,V_blocksperrow,V_numrows,B): inf 
Asymptotic class: infinity 

Time statistics: 
-------------------------------------
* Partial evaluation computed in 32 ms.
* Invariants computed in 48 ms.
   - Backward Invariants 24 ms.
   - Transitive Invariants 8 ms.
* Refinement performed in 83 ms.
* Termination proved in 12 ms.
* Upper bounds computed in 85 ms.
   - Equation cost structures 30 ms.
   - Phase cost structures 26 ms.
   - Chain cost structures 28 ms.
   - Solving cost expressions 1 ms.
* Total analysis performed in 294 ms.


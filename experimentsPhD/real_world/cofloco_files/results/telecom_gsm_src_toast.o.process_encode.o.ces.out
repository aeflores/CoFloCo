Warning: Ignored call to eval_process_encode_stop/1 in equation eval_process_encode_bb11_in/1 

Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. recursive  : [eval_process_encode_13/7,eval_process_encode_14/7,eval_process_encode_15/6,eval_process_encode_16/6,eval_process_encode_17/7,eval_process_encode_5/5,eval_process_encode_6/6,eval_process_encode_bb2_in/5,eval_process_encode_bb5_in/6]
1. non_recursive  : [eval_process_encode_bb11_in/1]
2. non_recursive  : [eval_process_encode_21/1]
3. non_recursive  : [eval_process_encode_20/3]
4. non_recursive  : [eval_process_encode_19/3]
5. non_recursive  : [eval_process_encode_18/3]
6. non_recursive  : [eval_process_encode_25/1]
7. non_recursive  : [eval_process_encode_24/3]
8. non_recursive  : [eval_process_encode_23/3]
9. non_recursive  : [eval_process_encode_22/3]
10. non_recursive  : [eval_process_encode_27/1]
11. non_recursive  : [eval_process_encode_26/3]
12. non_recursive  : [loop_cont_eval_process_encode_bb2_in/4]
13. non_recursive  : [eval_process_encode_4/3]
14. non_recursive  : [eval_process_encode_3/3]
15. non_recursive  : [eval_process_encode_2/3]
16. non_recursive  : [eval_process_encode_29/1]
17. non_recursive  : [eval_process_encode_28/3]
18. non_recursive  : [eval_process_encode_1/3]
19. non_recursive  : [eval_process_encode_0/3]
20. non_recursive  : [eval_process_encode_bb0_in/3]
21. non_recursive  : [eval_process_encode_start/3]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into eval_process_encode_bb2_in/5
1. SCC is completely evaluated into other SCCs
2. SCC is completely evaluated into other SCCs
3. SCC is completely evaluated into other SCCs
4. SCC is completely evaluated into other SCCs
5. SCC is completely evaluated into other SCCs
6. SCC is completely evaluated into other SCCs
7. SCC is completely evaluated into other SCCs
8. SCC is completely evaluated into other SCCs
9. SCC is completely evaluated into other SCCs
10. SCC is completely evaluated into other SCCs
11. SCC is completely evaluated into other SCCs
12. SCC is partially evaluated into loop_cont_eval_process_encode_bb2_in/4
13. SCC is partially evaluated into eval_process_encode_4/3
14. SCC is completely evaluated into other SCCs
15. SCC is completely evaluated into other SCCs
16. SCC is completely evaluated into other SCCs
17. SCC is completely evaluated into other SCCs
18. SCC is partially evaluated into eval_process_encode_1/3
19. SCC is completely evaluated into other SCCs
20. SCC is completely evaluated into other SCCs
21. SCC is partially evaluated into eval_process_encode_start/3

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations eval_process_encode_bb2_in/5 
* CE 9 is refined into CE [13] 
* CE 6 is refined into CE [14] 
* CE 7 is refined into CE [15] 
* CE 8 is refined into CE [16] 


#### Refined cost equations eval_process_encode_bb2_in/5 
* CE 13: eval_process_encode_bb2_in(V__f_fast,V__f_verbose,B,C,D) = 1+ eval_process_encode_bb2_in(V__f_fast,V__f_verbose,B,C,D)
     [] 
* CE 14: eval_process_encode_bb2_in(A,B,C,A,B) = 0
     [C=4] 
* CE 15: eval_process_encode_bb2_in(A,B,C,A,B) = 0
     [C=3] 
* CE 16: eval_process_encode_bb2_in(A,B,C,A,B) = 0
     [C=2] 

### Cost equations --> "Loop" of eval_process_encode_bb2_in/5 
* CEs [14] --> Loop 11 
* CEs [15] --> Loop 12 
* CEs [16] --> Loop 13 
* CEs [13] --> Loop 14 

#### Loops of eval_process_encode_bb2_in/5 
* Loop 11: eval_process_encode_bb2_in(A,B,C,A,B) [C=4] 
* Loop 12: eval_process_encode_bb2_in(A,B,C,A,B) [C=3] 
* Loop 13: eval_process_encode_bb2_in(A,B,C,A,B) [C=2] 
* Loop 14: eval_process_encode_bb2_in(V__f_fast,V__f_verbose,B,C,D)->  eval_process_encode_bb2_in(V__f_fast,V__f_verbose,B,C,D)
                  [] 

### Ranking functions of CR eval_process_encode_bb2_in(V__f_fast,V__f_verbose,B,C,D) 

#### Partial ranking functions of CR eval_process_encode_bb2_in(V__f_fast,V__f_verbose,B,C,D) 


### Resulting Chains:eval_process_encode_bb2_in(V__f_fast,V__f_verbose,B,C,D) 
* [[14]]...
* [[14],13]
* [[14],12]
* [[14],11]
* [13]
* [12]
* [11]


### Merging Chains  eval_process_encode_bb2_in/5 into  External patterns of execution 
* [[13],[13,[14]]] --> 1 
* [[12],[12,[14]]] --> 2 
* [[11],[11,[14]]] --> 3 
* [[[14]]] --> 4 


### Specialization of cost equations loop_cont_eval_process_encode_bb2_in/4 
* CE 12 is refined into CE [17] 
* CE 11 is refined into CE [18] 
* CE 10 is refined into CE [19] 


#### Refined cost equations loop_cont_eval_process_encode_bb2_in/4 
* CE 17: loop_cont_eval_process_encode_bb2_in(E,A,B,C) = 0
     [E=4] 
* CE 18: loop_cont_eval_process_encode_bb2_in(E,A,B,C) = 0
     [E=3] 
* CE 19: loop_cont_eval_process_encode_bb2_in(E,A,B,C) = 0
     [E=2] 

### Cost equations --> "Loop" of loop_cont_eval_process_encode_bb2_in/4 
* CEs [17] --> Loop 15 
* CEs [18] --> Loop 16 
* CEs [19] --> Loop 17 

#### Loops of loop_cont_eval_process_encode_bb2_in/4 
* Loop 15: loop_cont_eval_process_encode_bb2_in(E,A,B,C) [E=4] 
* Loop 16: loop_cont_eval_process_encode_bb2_in(E,A,B,C) [E=3] 
* Loop 17: loop_cont_eval_process_encode_bb2_in(E,A,B,C) [E=2] 

### Ranking functions of CR loop_cont_eval_process_encode_bb2_in(E,A,B,C) 

#### Partial ranking functions of CR loop_cont_eval_process_encode_bb2_in(E,A,B,C) 


### Resulting Chains:loop_cont_eval_process_encode_bb2_in(E,A,B,C) 
* [17]
* [16]
* [15]


### Merging Chains  loop_cont_eval_process_encode_bb2_in/4 into  External patterns of execution 
* [[17]] --> 1 
* [[16]] --> 2 
* [[15]] --> 3 


### Specialization of cost equations eval_process_encode_4/3 
* CE 5 is refined into CE [20,21,22,23] 


#### Refined cost equations eval_process_encode_4/3 
* CE 20: eval_process_encode_4(V__f_fast,V__f_verbose,B) = 1+ eval_process_encode_bb2_in(V__f_fast,V__f_verbose,C,V__f_fast,V__f_verbose):1+ loop_cont_eval_process_encode_bb2_in(D,V__f_fast,V__f_verbose,B):1
     [D=2,C=2] 
* CE 21: eval_process_encode_4(V__f_fast,V__f_verbose,B) = 1+ eval_process_encode_bb2_in(V__f_fast,V__f_verbose,C,V__f_fast,V__f_verbose):2+ loop_cont_eval_process_encode_bb2_in(D,V__f_fast,V__f_verbose,B):2
     [D=3,C=3] 
* CE 22: eval_process_encode_4(V__f_fast,V__f_verbose,B) = 1+ eval_process_encode_bb2_in(V__f_fast,V__f_verbose,C,V__f_fast,V__f_verbose):3+ loop_cont_eval_process_encode_bb2_in(D,V__f_fast,V__f_verbose,B):3
     [D=4,C=4] 
* CE 23: eval_process_encode_4(V__f_fast,V__f_verbose,B) = 1+ eval_process_encode_bb2_in(V__f_fast,V__f_verbose,C,D,E):4
     [] 

### Cost equations --> "Loop" of eval_process_encode_4/3 
* CEs [23] --> Loop 18 
* CEs [20,21,22] --> Loop 19 

#### Loops of eval_process_encode_4/3 
* Loop 18: eval_process_encode_4(V__f_fast,V__f_verbose,B) [] 
* Loop 19: eval_process_encode_4(V__f_fast,V__f_verbose,B) [] 

### Ranking functions of CR eval_process_encode_4(V__f_fast,V__f_verbose,B) 

#### Partial ranking functions of CR eval_process_encode_4(V__f_fast,V__f_verbose,B) 


### Resulting Chains:eval_process_encode_4(V__f_fast,V__f_verbose,B) 
* [19]
* [18]...


### Merging Chains  eval_process_encode_4/3 into  External patterns of execution 
* [[19]] --> 1 
* [[18]] --> 2 


### Specialization of cost equations eval_process_encode_1/3 
* CE 3 is refined into CE [24,25] 
* CE 4 is refined into CE [26] 


#### Refined cost equations eval_process_encode_1/3 
* CE 24: eval_process_encode_1(V__f_fast,V__f_verbose,B) = 0+ eval_process_encode_4(V__f_fast,V__f_verbose,B):1
     [] 
* CE 25: eval_process_encode_1(V__f_fast,V__f_verbose,B) = 0+ eval_process_encode_4(V__f_fast,V__f_verbose,B):2
     [] 
* CE 26: eval_process_encode_1(V__f_fast,V__f_verbose,B) = 0
     [] 

### Cost equations --> "Loop" of eval_process_encode_1/3 
* CEs [24,26] --> Loop 20 
* CEs [25] --> Loop 21 

#### Loops of eval_process_encode_1/3 
* Loop 20: eval_process_encode_1(V__f_fast,V__f_verbose,B) [] 
* Loop 21: eval_process_encode_1(V__f_fast,V__f_verbose,B) [] 

### Ranking functions of CR eval_process_encode_1(V__f_fast,V__f_verbose,B) 

#### Partial ranking functions of CR eval_process_encode_1(V__f_fast,V__f_verbose,B) 


### Resulting Chains:eval_process_encode_1(V__f_fast,V__f_verbose,B) 
* [21]...
* [20]


### Merging Chains  eval_process_encode_1/3 into  External patterns of execution 
* [[20]] --> 1 
* [[21]] --> 2 


### Specialization of cost equations eval_process_encode_start/3 
* CE 2 is refined into CE [27,28] 


#### Refined cost equations eval_process_encode_start/3 
* CE 27: eval_process_encode_start(V__f_fast,V__f_verbose,B) = 0+ eval_process_encode_1(V__f_fast,V__f_verbose,B):1
     [] 
* CE 28: eval_process_encode_start(V__f_fast,V__f_verbose,B) = 0+ eval_process_encode_1(V__f_fast,V__f_verbose,B):2
     [] 

### Cost equations --> "Loop" of eval_process_encode_start/3 
* CEs [28] --> Loop 22 
* CEs [27] --> Loop 23 

#### Loops of eval_process_encode_start/3 
* Loop 22: eval_process_encode_start(V__f_fast,V__f_verbose,B) [] 
* Loop 23: eval_process_encode_start(V__f_fast,V__f_verbose,B) [] 

### Ranking functions of CR eval_process_encode_start(V__f_fast,V__f_verbose,B) 

#### Partial ranking functions of CR eval_process_encode_start(V__f_fast,V__f_verbose,B) 


### Resulting Chains:eval_process_encode_start(V__f_fast,V__f_verbose,B) 
* [23]
* [22]...


### Merging Chains  eval_process_encode_start/3 into  External patterns of execution 
* [[23]] --> 1 
* [[22]] --> 2 


Computing Bounds
=====================================

#### Cost of loops [14] 

 * loop 14:eval_process_encode_bb2_in(V__f_fast,V__f_verbose,B,C,D) -> [eval_process_encode_bb2_in(V__f_fast',V__f_verbose',B',C',D')] 
1
#### Cost of phase [14]:eval_process_encode_bb2_in(V__f_fast,V__f_verbose,B,C,D) -> [eval_process_encode_bb2_in(V__f_fast',V__f_verbose',B',C',D')] 
1*it(14)+0
#### Cost of phase [14]:eval_process_encode_bb2_in(V__f_fast,V__f_verbose,B,C,D) -> [eval_process_encode_bb2_in(V__f_fast',V__f_verbose',B',C',D')] 
1*it(14)+0
#### Cost of phase [14]:eval_process_encode_bb2_in(V__f_fast,V__f_verbose,B,C,D) -> [eval_process_encode_bb2_in(V__f_fast',V__f_verbose',B',C',D')] 
1*it(14)+0
#### Cost of phase [14]:eval_process_encode_bb2_in(V__f_fast,V__f_verbose,B,C,D) -> [eval_process_encode_bb2_in(V__f_fast',V__f_verbose',B',C',D')] 
1*it(14)+0
#### Cost of chains of eval_process_encode_bb2_in(V__f_fast,V__f_verbose,B,C,D):
* Chain [[14]]...: 1*it(14)+0
  with precondition: [] 

* Chain [[14],13]: 1*it(14)+0
  with precondition: [B=2,V__f_fast=C,V__f_verbose=D] 

* Chain [[14],12]: 1*it(14)+0
  with precondition: [B=3,V__f_fast=C,V__f_verbose=D] 

* Chain [[14],11]: 1*it(14)+0
  with precondition: [B=4,V__f_fast=C,V__f_verbose=D] 

* Chain [13]: 0
  with precondition: [B=2,C=V__f_fast,D=V__f_verbose] 

* Chain [12]: 0
  with precondition: [B=3,C=V__f_fast,D=V__f_verbose] 

* Chain [11]: 0
  with precondition: [B=4,C=V__f_fast,D=V__f_verbose] 


#### Cost of chains of loop_cont_eval_process_encode_bb2_in(E,A,B,C):
* Chain [17]: 0
  with precondition: [E=2] 

* Chain [16]: 0
  with precondition: [E=3] 

* Chain [15]: 0
  with precondition: [E=4] 


#### Cost of chains of eval_process_encode_4(V__f_fast,V__f_verbose,B):
* Chain [19]: 1*aux(4)+0
  with precondition: [] 

* Chain [18]...: 1*s(7)+1
  with precondition: [] 


#### Cost of chains of eval_process_encode_1(V__f_fast,V__f_verbose,B):
* Chain [21]...: 1*s(8)+1
  with precondition: [] 

* Chain [20]: 1*aux(5)+0
  with precondition: [] 


#### Cost of chains of eval_process_encode_start(V__f_fast,V__f_verbose,B):
* Chain [23]: 1*s(10)+0
  with precondition: [] 

* Chain [22]...: 1*s(11)+1
  with precondition: [] 


Closed-form bounds of eval_process_encode_start(V__f_fast,V__f_verbose,B): 
-------------------------------------
* Chain [23] with precondition: [] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [22]... with precondition: [] 
    - Upper bound: inf 
    - Complexity: infinity 

### Maximum cost of eval_process_encode_start(V__f_fast,V__f_verbose,B): inf 
Asymptotic class: infinity 

Time statistics: 
-------------------------------------
* Partial evaluation computed in 74 ms.
* Invariants computed in 28 ms.
   - Backward Invariants 20 ms.
   - Transitive Invariants 3 ms.
* Refinement performed in 69 ms.
* Termination proved in 4 ms.
* Upper bounds computed in 48 ms.
   - Equation cost structures 21 ms.
   - Phase cost structures 7 ms.
   - Chain cost structures 16 ms.
   - Solving cost expressions 0 ms.
* Total analysis performed in 309 ms.


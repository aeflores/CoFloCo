Warning: Ignored call to eval_getKeyHash_stop/1 in equation eval_getKeyHash_27/1 

Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. recursive  : [eval_getKeyHash_bb1_in/5]
1. recursive  : [eval_getKeyHash_bb4_in/5]
2. non_recursive  : [eval_getKeyHash_27/1]
3. non_recursive  : [eval_getKeyHash_26/1]
4. non_recursive  : [eval_getKeyHash_25/2]
5. non_recursive  : [eval_getKeyHash_24/2]
6. non_recursive  : [loop_cont_eval_getKeyHash_bb4_in/3]
7. non_recursive  : [eval_getKeyHash_13/3]
8. non_recursive  : [eval_getKeyHash_12/2]
9. non_recursive  : [loop_cont_eval_getKeyHash_bb1_in/3]
10. non_recursive  : [eval_getKeyHash_1/2]
11. non_recursive  : [eval_getKeyHash_0/1]
12. non_recursive  : [eval_getKeyHash_bb0_in/1]
13. non_recursive  : [eval_getKeyHash_start/1]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into eval_getKeyHash_bb1_in/5
1. SCC is partially evaluated into eval_getKeyHash_bb4_in/5
2. SCC is completely evaluated into other SCCs
3. SCC is completely evaluated into other SCCs
4. SCC is completely evaluated into other SCCs
5. SCC is completely evaluated into other SCCs
6. SCC is completely evaluated into other SCCs
7. SCC is partially evaluated into eval_getKeyHash_13/3
8. SCC is completely evaluated into other SCCs
9. SCC is completely evaluated into other SCCs
10. SCC is partially evaluated into eval_getKeyHash_1/2
11. SCC is completely evaluated into other SCCs
12. SCC is completely evaluated into other SCCs
13. SCC is partially evaluated into eval_getKeyHash_start/1

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations eval_getKeyHash_bb1_in/5 
* CE 5 is refined into CE [9] 
* CE 4 is refined into CE [10] 


#### Refined cost equations eval_getKeyHash_bb1_in/5 
* CE 9: eval_getKeyHash_bb1_in(V_2,V_mdIndex_0,V_bufIndex_0,B,C) = 0
     [V_bufIndex_0>=V_2+2,V_bufIndex_0>=2,V_bufIndex_0=C+2,V_bufIndex_0=V_mdIndex_0+2,B=3] 
* CE 10: eval_getKeyHash_bb1_in(V_2,V_mdIndex_0,V_bufIndex_0,B,C) = 1+ eval_getKeyHash_bb1_in(V_2,D,E,F,C)
     [V_2+1>=V_bufIndex_0,V_bufIndex_0>=2,V_bufIndex_0+1=E,V_bufIndex_0=D+1,V_bufIndex_0=V_mdIndex_0+2,F=3,B=3] 

### Cost equations --> "Loop" of eval_getKeyHash_bb1_in/5 
* CEs [10] --> Loop 8 
* CEs [9] --> Loop 9 

#### Loops of eval_getKeyHash_bb1_in/5 
* Loop 8: eval_getKeyHash_bb1_in(V_2,V_mdIndex_0,V_bufIndex_0,B,C)->  eval_getKeyHash_bb1_in(V_2,V_mdIndex_0',V_bufIndex_0',B',C)
                  [V_2+1>=V_bufIndex_0,V_bufIndex_0>=2,V_bufIndex_0+1=V_bufIndex_0',V_bufIndex_0=V_mdIndex_0'+1,V_bufIndex_0=V_mdIndex_0+2,B'=3,B=3] 
* Loop 9: eval_getKeyHash_bb1_in(V_2,V_mdIndex_0,V_bufIndex_0,B,C) [V_bufIndex_0>=V_2+2,V_bufIndex_0>=2,V_bufIndex_0=C+2,V_bufIndex_0=V_mdIndex_0+2,B=3] 

### Ranking functions of CR eval_getKeyHash_bb1_in(V_2,V_mdIndex_0,V_bufIndex_0,B,C) 
* RF of phase [8]: [V_2-V_bufIndex_0+2,V_2-V_mdIndex_0]

#### Partial ranking functions of CR eval_getKeyHash_bb1_in(V_2,V_mdIndex_0,V_bufIndex_0,B,C) 
* Partial RF of phase [8]:
  - RF of loop [8:1]:
    V_2-V_bufIndex_0+2
    V_2-V_mdIndex_0


### Resulting Chains:eval_getKeyHash_bb1_in(V_2,V_mdIndex_0,V_bufIndex_0,B,C) 
* [[8],9]
* [9]


### Merging Chains  eval_getKeyHash_bb1_in/5 into  External patterns of execution 
* [[9,[8]]] --> 1 
* [[9]] --> 2 


### Specialization of cost equations eval_getKeyHash_bb4_in/5 
* CE 8 is refined into CE [11] 
* CE 7 is refined into CE [12] 


#### Refined cost equations eval_getKeyHash_bb4_in/5 
* CE 11: eval_getKeyHash_bb4_in(A,B,C,D,B) = 0
     [C>=A+2,C>=2,D=2] 
* CE 12: eval_getKeyHash_bb4_in(V_14,V_mdIndex_1,V_bufIndex_1,B,C) = 1+ eval_getKeyHash_bb4_in(V_14,D,E,F,C)
     [V_14+1>=V_bufIndex_1,V_bufIndex_1>=2,V_bufIndex_1+1=E,D=V_mdIndex_1+1,F=2,B=2] 

### Cost equations --> "Loop" of eval_getKeyHash_bb4_in/5 
* CEs [12] --> Loop 10 
* CEs [11] --> Loop 11 

#### Loops of eval_getKeyHash_bb4_in/5 
* Loop 10: eval_getKeyHash_bb4_in(V_14,V_mdIndex_1,V_bufIndex_1,B,C)->  eval_getKeyHash_bb4_in(V_14,V_mdIndex_1',V_bufIndex_1',B',C)
                  [V_14+1>=V_bufIndex_1,V_bufIndex_1>=2,V_bufIndex_1+1=V_bufIndex_1',V_mdIndex_1+1=V_mdIndex_1',B'=2,B=2] 
* Loop 11: eval_getKeyHash_bb4_in(A,B,C,D,B) [C>=A+2,C>=2,D=2] 

### Ranking functions of CR eval_getKeyHash_bb4_in(V_14,V_mdIndex_1,V_bufIndex_1,B,C) 
* RF of phase [10]: [V_14-V_bufIndex_1+2]

#### Partial ranking functions of CR eval_getKeyHash_bb4_in(V_14,V_mdIndex_1,V_bufIndex_1,B,C) 
* Partial RF of phase [10]:
  - RF of loop [10:1]:
    V_14-V_bufIndex_1+2


### Resulting Chains:eval_getKeyHash_bb4_in(V_14,V_mdIndex_1,V_bufIndex_1,B,C) 
* [[10],11]
* [11]


### Merging Chains  eval_getKeyHash_bb4_in/5 into  External patterns of execution 
* [[11]] --> 1 
* [[11,[10]]] --> 2 


### Specialization of cost equations eval_getKeyHash_13/3 
* CE 6 is refined into CE [13,14] 


#### Refined cost equations eval_getKeyHash_13/3 
* CE 13: eval_getKeyHash_13(V_mdIndex_0,V_13,B) = 1+ eval_getKeyHash_bb4_in(V_13,V_mdIndex_0,C,D,V_mdIndex_0):1
     [0>=V_13,D=2,C=2] 
* CE 14: eval_getKeyHash_13(V_mdIndex_0,V_13,B) = 1+ eval_getKeyHash_bb4_in(V_13,C,D,E,F):2
     [V_13>=1,F=V_13+C,F=V_mdIndex_0+V_13,E=2,D=2] 

### Cost equations --> "Loop" of eval_getKeyHash_13/3 
* CEs [14] --> Loop 12 
* CEs [13] --> Loop 13 

#### Loops of eval_getKeyHash_13/3 
* Loop 12: eval_getKeyHash_13(V_mdIndex_0,V_13,B) [V_13>=1] 
* Loop 13: eval_getKeyHash_13(V_mdIndex_0,V_13,B) [0>=V_13] 

### Ranking functions of CR eval_getKeyHash_13(V_mdIndex_0,V_13,B) 

#### Partial ranking functions of CR eval_getKeyHash_13(V_mdIndex_0,V_13,B) 


### Resulting Chains:eval_getKeyHash_13(V_mdIndex_0,V_13,B) 
* [13]
* [12]


### Merging Chains  eval_getKeyHash_13/3 into  External patterns of execution 
* [[13]] --> 1 
* [[12]] --> 2 


### Specialization of cost equations eval_getKeyHash_1/2 
* CE 3 is refined into CE [15,16,17,18] 


#### Refined cost equations eval_getKeyHash_1/2 
* CE 15: eval_getKeyHash_1(V_1,B) = 1+ eval_getKeyHash_bb1_in(V_1,C,D,E,V_1):1+ eval_getKeyHash_13(V_1,F,B):1
     [V_1>=1,0>=F,E=3,D=2,C=0] 
* CE 16: eval_getKeyHash_1(V_1,B) = 1+ eval_getKeyHash_bb1_in(V_1,C,D,E,V_1):1+ eval_getKeyHash_13(V_1,F,B):2
     [F>=1,V_1>=1,E=3,D=2,C=0] 
* CE 17: eval_getKeyHash_1(V_1,B) = 1+ eval_getKeyHash_bb1_in(V_1,C,D,E,F):2+ eval_getKeyHash_13(G,H,B):1
     [0>=H,0>=V_1,G=0,F=0,E=3,D=2,C=0] 
* CE 18: eval_getKeyHash_1(V_1,B) = 1+ eval_getKeyHash_bb1_in(V_1,C,D,E,F):2+ eval_getKeyHash_13(G,H,B):2
     [H>=1,0>=V_1,G=0,F=0,E=3,D=2,C=0] 

### Cost equations --> "Loop" of eval_getKeyHash_1/2 
* CEs [15,16] --> Loop 14 
* CEs [17,18] --> Loop 15 

#### Loops of eval_getKeyHash_1/2 
* Loop 14: eval_getKeyHash_1(V_1,B) [V_1>=1] 
* Loop 15: eval_getKeyHash_1(V_1,B) [0>=V_1] 

### Ranking functions of CR eval_getKeyHash_1(V_1,B) 

#### Partial ranking functions of CR eval_getKeyHash_1(V_1,B) 


### Resulting Chains:eval_getKeyHash_1(V_1,B) 
* [15]
* [14]


### Merging Chains  eval_getKeyHash_1/2 into  External patterns of execution 
* [[15]] --> 1 
* [[14]] --> 2 


### Specialization of cost equations eval_getKeyHash_start/1 
* CE 2 is refined into CE [19,20] 


#### Refined cost equations eval_getKeyHash_start/1 
* CE 19: eval_getKeyHash_start(B) = 0+ eval_getKeyHash_1(C,B):1
     [0>=C] 
* CE 20: eval_getKeyHash_start(B) = 0+ eval_getKeyHash_1(C,B):2
     [C>=1] 

### Cost equations --> "Loop" of eval_getKeyHash_start/1 
* CEs [19,20] --> Loop 16 

#### Loops of eval_getKeyHash_start/1 
* Loop 16: eval_getKeyHash_start(B) [] 

### Ranking functions of CR eval_getKeyHash_start(B) 

#### Partial ranking functions of CR eval_getKeyHash_start(B) 


### Resulting Chains:eval_getKeyHash_start(B) 
* [16]


### Merging Chains  eval_getKeyHash_start/1 into  External patterns of execution 
* [[16]] --> 1 


Computing Bounds
=====================================

#### Cost of loops [8] 

 * loop 8:eval_getKeyHash_bb1_in(V_2,V_mdIndex_0,V_bufIndex_0,B,C) -> [eval_getKeyHash_bb1_in(V_2',V_mdIndex_0',V_bufIndex_0',B',C')] 
1
#### Cost of phase [8]:eval_getKeyHash_bb1_in(V_2,V_mdIndex_0,V_bufIndex_0,B,C) -> [eval_getKeyHash_bb1_in(V_2',V_mdIndex_0',V_bufIndex_0',B',C')] 
1*it(8)+0
  Such that:it(8) =< V_2-V_mdIndex_0
it(8) =< V_2-V_mdIndex_0-V_2'+V_mdIndex_0'
it(8) =< V_2-V_bufIndex_0+2
it(8) =< V_2-V_bufIndex_0-V_2'+V_bufIndex_0'

#### Cost of chains of eval_getKeyHash_bb1_in(V_2,V_mdIndex_0,V_bufIndex_0,B,C):
* Chain [[8],9]: 1*it(8)+0
  Such that:it(8) =< -V_mdIndex_0+C

  with precondition: [B=3,V_mdIndex_0+2=V_bufIndex_0,V_2=C,V_mdIndex_0>=0,V_2>=V_mdIndex_0+1] 

* Chain [9]: 0
  with precondition: [B=3,V_mdIndex_0+2=V_bufIndex_0,V_mdIndex_0=C,V_mdIndex_0>=0,V_mdIndex_0>=V_2] 


#### Cost of loops [10] 

 * loop 10:eval_getKeyHash_bb4_in(V_14,V_mdIndex_1,V_bufIndex_1,B,C) -> [eval_getKeyHash_bb4_in(V_14',V_mdIndex_1',V_bufIndex_1',B',C')] 
1
#### Cost of phase [10]:eval_getKeyHash_bb4_in(V_14,V_mdIndex_1,V_bufIndex_1,B,C) -> [eval_getKeyHash_bb4_in(V_14',V_mdIndex_1',V_bufIndex_1',B',C')] 
1*it(10)+0
  Such that:it(10) =< V_14-V_bufIndex_1+2
it(10) =< V_14-V_bufIndex_1-V_14'+V_bufIndex_1'

#### Cost of chains of eval_getKeyHash_bb4_in(V_14,V_mdIndex_1,V_bufIndex_1,B,C):
* Chain [[10],11]: 1*it(10)+0
  Such that:it(10) =< V_14-V_bufIndex_1+2

  with precondition: [B=2,V_14+V_mdIndex_1+2=V_bufIndex_1+C,V_bufIndex_1>=2,V_14+1>=V_bufIndex_1] 

* Chain [11]: 0
  with precondition: [B=2,C=V_mdIndex_1,V_bufIndex_1>=2,V_bufIndex_1>=V_14+2] 


#### Cost of chains of eval_getKeyHash_13(V_mdIndex_0,V_13,B):
* Chain [13]: 1
  with precondition: [0>=V_13] 

* Chain [12]: 1*s(1)+1
  Such that:s(1) =< V_13

  with precondition: [V_13>=1] 


#### Cost of chains of eval_getKeyHash_1(V_1,B):
* Chain [15]: 1*aux(1)+0
  with precondition: [0>=V_1] 

* Chain [14]: 2*s(3)+1*s(5)+2
  Such that:aux(2) =< V_1
s(3) =< aux(2)

  with precondition: [V_1>=1] 


#### Cost of chains of eval_getKeyHash_start(B):
* Chain [16]: 1*aux(3)+0
  with precondition: [] 


Closed-form bounds of eval_getKeyHash_start(B): 
-------------------------------------
* Chain [16] with precondition: [] 
    - Upper bound: inf 
    - Complexity: infinity 

### Maximum cost of eval_getKeyHash_start(B): inf 
Asymptotic class: infinity 

Time statistics: 
-------------------------------------
* Partial evaluation computed in 9 ms.
* Invariants computed in 17 ms.
   - Backward Invariants 8 ms.
   - Transitive Invariants 4 ms.
* Refinement performed in 29 ms.
* Termination proved in 5 ms.
* Upper bounds computed in 24 ms.
   - Equation cost structures 11 ms.
   - Phase cost structures 7 ms.
   - Chain cost structures 8 ms.
   - Solving cost expressions 0 ms.
* Total analysis performed in 102 ms.


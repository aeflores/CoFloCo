Warning: Ignored call to eval_zrestore_stop/1 in equation eval_zrestore_bb8_in/1 

Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. recursive  : [eval_zrestore_15/2,eval_zrestore_16/2,eval_zrestore_17/2,eval_zrestore_18/2,eval_zrestore_19/2,eval_zrestore_20/2,eval_zrestore_21/2,eval_zrestore_22/2,eval_zrestore_23/2,eval_zrestore_24/3,eval_zrestore_bb6_in/2]
1. non_recursive  : [eval_zrestore_bb8_in/1]
2. non_recursive  : [eval_zrestore_30/1]
3. non_recursive  : [eval_zrestore_29/1]
4. non_recursive  : [eval_zrestore_28/2]
5. non_recursive  : [eval_zrestore_27/2]
6. non_recursive  : [eval_zrestore_26/2]
7. non_recursive  : [loop_cont_eval_zrestore_bb6_in/3]
8. non_recursive  : [eval_zrestore_14/1]
9. non_recursive  : [eval_zrestore_13/1]
10. non_recursive  : [eval_zrestore_12/1]
11. non_recursive  : [eval_zrestore_11/1]
12. non_recursive  : [eval_zrestore_bb4_in/1]
13. non_recursive  : [eval_zrestore_8/1]
14. non_recursive  : [eval_zrestore_7/1]
15. non_recursive  : [eval_zrestore_6/1]
16. non_recursive  : [eval_zrestore_5/1]
17. non_recursive  : [eval_zrestore_4/1]
18. non_recursive  : [eval_zrestore_3/1]
19. non_recursive  : [eval_zrestore_1/1]
20. non_recursive  : [eval_zrestore_0/1]
21. non_recursive  : [eval_zrestore_bb0_in/1]
22. non_recursive  : [eval_zrestore_start/1]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into eval_zrestore_bb6_in/2
1. SCC is completely evaluated into other SCCs
2. SCC is completely evaluated into other SCCs
3. SCC is completely evaluated into other SCCs
4. SCC is completely evaluated into other SCCs
5. SCC is completely evaluated into other SCCs
6. SCC is completely evaluated into other SCCs
7. SCC is completely evaluated into other SCCs
8. SCC is partially evaluated into eval_zrestore_14/1
9. SCC is completely evaluated into other SCCs
10. SCC is completely evaluated into other SCCs
11. SCC is completely evaluated into other SCCs
12. SCC is completely evaluated into other SCCs
13. SCC is partially evaluated into eval_zrestore_8/1
14. SCC is completely evaluated into other SCCs
15. SCC is partially evaluated into eval_zrestore_6/1
16. SCC is completely evaluated into other SCCs
17. SCC is partially evaluated into eval_zrestore_4/1
18. SCC is completely evaluated into other SCCs
19. SCC is partially evaluated into eval_zrestore_1/1
20. SCC is completely evaluated into other SCCs
21. SCC is completely evaluated into other SCCs
22. SCC is partially evaluated into eval_zrestore_start/1

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations eval_zrestore_bb6_in/2 
* CE 13 is refined into CE [14] 
* CE 12 is refined into CE [15] 


#### Refined cost equations eval_zrestore_bb6_in/2 
* CE 14: eval_zrestore_bb6_in(B,C) = 1+ eval_zrestore_bb6_in(D,C)
     [D=2,B=2] 
* CE 15: eval_zrestore_bb6_in(B,C) = 0
     [B=2] 

### Cost equations --> "Loop" of eval_zrestore_bb6_in/2 
* CEs [15] --> Loop 9 
* CEs [14] --> Loop 10 

#### Loops of eval_zrestore_bb6_in/2 
* Loop 9: eval_zrestore_bb6_in(B,C) [B=2] 
* Loop 10: eval_zrestore_bb6_in(B,C)->  eval_zrestore_bb6_in(B',C)
                  [B'=2,B=2] 

### Ranking functions of CR eval_zrestore_bb6_in(B,C) 

#### Partial ranking functions of CR eval_zrestore_bb6_in(B,C) 


### Resulting Chains:eval_zrestore_bb6_in(B,C) 
* [[10]]...
* [[10],9]
* [9]


### Merging Chains  eval_zrestore_bb6_in/2 into  External patterns of execution 
* [[9],[9,[10]]] --> 1 
* [[[10]]] --> 2 


### Specialization of cost equations eval_zrestore_14/1 
* CE 11 is refined into CE [16,17] 


#### Refined cost equations eval_zrestore_14/1 
* CE 16: eval_zrestore_14(B) = 1+ eval_zrestore_bb6_in(C,D):1
     [C=2] 
* CE 17: eval_zrestore_14(B) = 1+ eval_zrestore_bb6_in(C,D):2
     [C=2] 

### Cost equations --> "Loop" of eval_zrestore_14/1 
* CEs [17] --> Loop 11 
* CEs [16] --> Loop 12 

#### Loops of eval_zrestore_14/1 
* Loop 11: eval_zrestore_14(B) [] 
* Loop 12: eval_zrestore_14(B) [] 

### Ranking functions of CR eval_zrestore_14(B) 

#### Partial ranking functions of CR eval_zrestore_14(B) 


### Resulting Chains:eval_zrestore_14(B) 
* [12]
* [11]...


### Merging Chains  eval_zrestore_14/1 into  External patterns of execution 
* [[12]] --> 1 
* [[11]] --> 2 


### Specialization of cost equations eval_zrestore_8/1 
* CE 9 is refined into CE [18] 
* CE 10 is refined into CE [19,20] 


#### Refined cost equations eval_zrestore_8/1 
* CE 18: eval_zrestore_8(B) = 0
     [] 
* CE 19: eval_zrestore_8(B) = 0+ eval_zrestore_14(B):1
     [] 
* CE 20: eval_zrestore_8(B) = 0+ eval_zrestore_14(B):2
     [] 

### Cost equations --> "Loop" of eval_zrestore_8/1 
* CEs [20] --> Loop 13 
* CEs [18,19] --> Loop 14 

#### Loops of eval_zrestore_8/1 
* Loop 13: eval_zrestore_8(B) [] 
* Loop 14: eval_zrestore_8(B) [] 

### Ranking functions of CR eval_zrestore_8(B) 

#### Partial ranking functions of CR eval_zrestore_8(B) 


### Resulting Chains:eval_zrestore_8(B) 
* [14]
* [13]...


### Merging Chains  eval_zrestore_8/1 into  External patterns of execution 
* [[14]] --> 1 
* [[13]] --> 2 


### Specialization of cost equations eval_zrestore_6/1 
* CE 7 is refined into CE [21] 
* CE 8 is refined into CE [22,23] 


#### Refined cost equations eval_zrestore_6/1 
* CE 21: eval_zrestore_6(B) = 0
     [] 
* CE 22: eval_zrestore_6(B) = 0+ eval_zrestore_8(B):1
     [] 
* CE 23: eval_zrestore_6(B) = 0+ eval_zrestore_8(B):2
     [] 

### Cost equations --> "Loop" of eval_zrestore_6/1 
* CEs [23] --> Loop 15 
* CEs [21,22] --> Loop 16 

#### Loops of eval_zrestore_6/1 
* Loop 15: eval_zrestore_6(B) [] 
* Loop 16: eval_zrestore_6(B) [] 

### Ranking functions of CR eval_zrestore_6(B) 

#### Partial ranking functions of CR eval_zrestore_6(B) 


### Resulting Chains:eval_zrestore_6(B) 
* [16]
* [15]...


### Merging Chains  eval_zrestore_6/1 into  External patterns of execution 
* [[16]] --> 1 
* [[15]] --> 2 


### Specialization of cost equations eval_zrestore_4/1 
* CE 5 is refined into CE [24] 
* CE 6 is refined into CE [25,26] 


#### Refined cost equations eval_zrestore_4/1 
* CE 24: eval_zrestore_4(B) = 0
     [] 
* CE 25: eval_zrestore_4(B) = 0+ eval_zrestore_6(B):1
     [] 
* CE 26: eval_zrestore_4(B) = 0+ eval_zrestore_6(B):2
     [] 

### Cost equations --> "Loop" of eval_zrestore_4/1 
* CEs [26] --> Loop 17 
* CEs [24,25] --> Loop 18 

#### Loops of eval_zrestore_4/1 
* Loop 17: eval_zrestore_4(B) [] 
* Loop 18: eval_zrestore_4(B) [] 

### Ranking functions of CR eval_zrestore_4(B) 

#### Partial ranking functions of CR eval_zrestore_4(B) 


### Resulting Chains:eval_zrestore_4(B) 
* [18]
* [17]...


### Merging Chains  eval_zrestore_4/1 into  External patterns of execution 
* [[18]] --> 1 
* [[17]] --> 2 


### Specialization of cost equations eval_zrestore_1/1 
* CE 3 is refined into CE [27] 
* CE 4 is refined into CE [28,29] 


#### Refined cost equations eval_zrestore_1/1 
* CE 27: eval_zrestore_1(B) = 0
     [] 
* CE 28: eval_zrestore_1(B) = 0+ eval_zrestore_4(B):1
     [] 
* CE 29: eval_zrestore_1(B) = 0+ eval_zrestore_4(B):2
     [] 

### Cost equations --> "Loop" of eval_zrestore_1/1 
* CEs [29] --> Loop 19 
* CEs [27,28] --> Loop 20 

#### Loops of eval_zrestore_1/1 
* Loop 19: eval_zrestore_1(B) [] 
* Loop 20: eval_zrestore_1(B) [] 

### Ranking functions of CR eval_zrestore_1(B) 

#### Partial ranking functions of CR eval_zrestore_1(B) 


### Resulting Chains:eval_zrestore_1(B) 
* [20]
* [19]...


### Merging Chains  eval_zrestore_1/1 into  External patterns of execution 
* [[20]] --> 1 
* [[19]] --> 2 


### Specialization of cost equations eval_zrestore_start/1 
* CE 2 is refined into CE [30,31] 


#### Refined cost equations eval_zrestore_start/1 
* CE 30: eval_zrestore_start(B) = 0+ eval_zrestore_1(B):1
     [] 
* CE 31: eval_zrestore_start(B) = 0+ eval_zrestore_1(B):2
     [] 

### Cost equations --> "Loop" of eval_zrestore_start/1 
* CEs [31] --> Loop 21 
* CEs [30] --> Loop 22 

#### Loops of eval_zrestore_start/1 
* Loop 21: eval_zrestore_start(B) [] 
* Loop 22: eval_zrestore_start(B) [] 

### Ranking functions of CR eval_zrestore_start(B) 

#### Partial ranking functions of CR eval_zrestore_start(B) 


### Resulting Chains:eval_zrestore_start(B) 
* [22]
* [21]...


### Merging Chains  eval_zrestore_start/1 into  External patterns of execution 
* [[22]] --> 1 
* [[21]] --> 2 


Computing Bounds
=====================================

#### Cost of loops [10] 

 * loop 10:eval_zrestore_bb6_in(B,C) -> [eval_zrestore_bb6_in(B',C')] 
1
#### Cost of phase [10]:eval_zrestore_bb6_in(B,C) -> [eval_zrestore_bb6_in(B',C')] 
1*it(10)+0
#### Cost of phase [10]:eval_zrestore_bb6_in(B,C) -> [eval_zrestore_bb6_in(B',C')] 
1*it(10)+0
#### Cost of chains of eval_zrestore_bb6_in(B,C):
* Chain [[10]]...: 1*it(10)+0
  with precondition: [B=2] 

* Chain [[10],9]: 1*it(10)+0
  with precondition: [B=2] 

* Chain [9]: 0
  with precondition: [B=2] 


#### Cost of chains of eval_zrestore_14(B):
* Chain [12]: 1*s(2)+1
  with precondition: [] 

* Chain [11]...: 1*s(3)+1
  with precondition: [] 


#### Cost of chains of eval_zrestore_8(B):
* Chain [14]: 1*aux(2)+0
  with precondition: [] 

* Chain [13]...: 1*s(5)+1
  with precondition: [] 


#### Cost of chains of eval_zrestore_6(B):
* Chain [16]: 1*aux(3)+0
  with precondition: [] 

* Chain [15]...: 1*s(7)+1
  with precondition: [] 


#### Cost of chains of eval_zrestore_4(B):
* Chain [18]: 1*aux(4)+0
  with precondition: [] 

* Chain [17]...: 1*s(9)+1
  with precondition: [] 


#### Cost of chains of eval_zrestore_1(B):
* Chain [20]: 1*aux(5)+0
  with precondition: [] 

* Chain [19]...: 1*s(11)+1
  with precondition: [] 


#### Cost of chains of eval_zrestore_start(B):
* Chain [22]: 1*s(12)+0
  with precondition: [] 

* Chain [21]...: 1*s(13)+1
  with precondition: [] 


Closed-form bounds of eval_zrestore_start(B): 
-------------------------------------
* Chain [22] with precondition: [] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [21]... with precondition: [] 
    - Upper bound: inf 
    - Complexity: infinity 

### Maximum cost of eval_zrestore_start(B): inf 
Asymptotic class: infinity 

Time statistics: 
-------------------------------------
* Partial evaluation computed in 30 ms.
* Invariants computed in 10 ms.
   - Backward Invariants 5 ms.
   - Transitive Invariants 1 ms.
* Refinement performed in 24 ms.
* Termination proved in 2 ms.
* Upper bounds computed in 22 ms.
   - Equation cost structures 11 ms.
   - Phase cost structures 4 ms.
   - Chain cost structures 4 ms.
   - Solving cost expressions 1 ms.
* Total analysis performed in 141 ms.


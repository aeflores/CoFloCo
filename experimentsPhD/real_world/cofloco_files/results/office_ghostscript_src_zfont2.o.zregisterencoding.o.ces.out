Warning: Ignored call to eval_zregisterencoding_stop/1 in equation eval_zregisterencoding_bb13_in/1 

Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. non_recursive  : [eval_zregisterencoding_bb13_in/1]
1. non_recursive  : [eval_zregisterencoding_39/1]
2. non_recursive  : [eval_zregisterencoding_38/1]
3. non_recursive  : [eval_zregisterencoding_41/1]
4. non_recursive  : [eval_zregisterencoding_40/1]
5. recursive  : [eval_zregisterencoding_15/3,eval_zregisterencoding_16/3,eval_zregisterencoding_bb4_in/2]
6. non_recursive  : [eval_zregisterencoding_bb10_in/1]
7. non_recursive  : [eval_zregisterencoding_29/1]
8. non_recursive  : [eval_zregisterencoding_28/1]
9. non_recursive  : [eval_zregisterencoding_bb9_in/1]
10. non_recursive  : [eval_zregisterencoding_27/1]
11. non_recursive  : [eval_zregisterencoding_26/1]
12. non_recursive  : [loop_cont_eval_zregisterencoding_bb4_in/2]
13. non_recursive  : [eval_zregisterencoding_bb0_in/1]
14. non_recursive  : [eval_zregisterencoding_start/1]

#### Obtained direct recursion through partial evaluation 
0. SCC is completely evaluated into other SCCs
1. SCC is completely evaluated into other SCCs
2. SCC is completely evaluated into other SCCs
3. SCC is completely evaluated into other SCCs
4. SCC is completely evaluated into other SCCs
5. SCC is partially evaluated into eval_zregisterencoding_bb4_in/2
6. SCC is completely evaluated into other SCCs
7. SCC is completely evaluated into other SCCs
8. SCC is completely evaluated into other SCCs
9. SCC is completely evaluated into other SCCs
10. SCC is completely evaluated into other SCCs
11. SCC is completely evaluated into other SCCs
12. SCC is partially evaluated into loop_cont_eval_zregisterencoding_bb4_in/2
13. SCC is partially evaluated into eval_zregisterencoding_bb0_in/1
14. SCC is partially evaluated into eval_zregisterencoding_start/1

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations eval_zregisterencoding_bb4_in/2 
* CE 9 is refined into CE [14] 
* CE 8 is refined into CE [15] 
* CE 7 is refined into CE [16] 
* CE 5 is refined into CE [17] 
* CE 6 is refined into CE [18] 


#### Refined cost equations eval_zregisterencoding_bb4_in/2 
* CE 14: eval_zregisterencoding_bb4_in(V_i_0,B) = 0
     [0>=V_i_0,B=5] 
* CE 15: eval_zregisterencoding_bb4_in(V_i_0,B) = 0
     [0>=V_i_0,B=4] 
* CE 16: eval_zregisterencoding_bb4_in(V_i_0,B) = 0
     [0>=V_i_0,B=3] 
* CE 17: eval_zregisterencoding_bb4_in(V_i_0,B) = 0
     [V_i_0>=1,B=2] 
* CE 18: eval_zregisterencoding_bb4_in(V_i_0,B) = 1+ eval_zregisterencoding_bb4_in(C,B)
     [V_i_0>=1,V_i_0=C+1] 

### Cost equations --> "Loop" of eval_zregisterencoding_bb4_in/2 
* CEs [18] --> Loop 12 
* CEs [14] --> Loop 13 
* CEs [15] --> Loop 14 
* CEs [16] --> Loop 15 
* CEs [17] --> Loop 16 

#### Loops of eval_zregisterencoding_bb4_in/2 
* Loop 12: eval_zregisterencoding_bb4_in(V_i_0,B)->  eval_zregisterencoding_bb4_in(V_i_0',B)
                  [V_i_0>=1,V_i_0=V_i_0'+1] 
* Loop 13: eval_zregisterencoding_bb4_in(V_i_0,B) [0>=V_i_0,B=5] 
* Loop 14: eval_zregisterencoding_bb4_in(V_i_0,B) [0>=V_i_0,B=4] 
* Loop 15: eval_zregisterencoding_bb4_in(V_i_0,B) [0>=V_i_0,B=3] 
* Loop 16: eval_zregisterencoding_bb4_in(V_i_0,B) [V_i_0>=1,B=2] 

### Ranking functions of CR eval_zregisterencoding_bb4_in(V_i_0,B) 
* RF of phase [12]: [V_i_0]

#### Partial ranking functions of CR eval_zregisterencoding_bb4_in(V_i_0,B) 
* Partial RF of phase [12]:
  - RF of loop [12:1]:
    V_i_0


### Resulting Chains:eval_zregisterencoding_bb4_in(V_i_0,B) 
* [[12],16]
* [[12],15]
* [[12],14]
* [[12],13]
* [16]
* [15]
* [14]
* [13]


### Merging Chains  eval_zregisterencoding_bb4_in/2 into  External patterns of execution 
* [[16],[16,[12]]] --> 1 
* [[15]] --> 2 
* [[15,[12]]] --> 3 
* [[14]] --> 4 
* [[14,[12]]] --> 5 
* [[13]] --> 6 
* [[13,[12]]] --> 7 


### Specialization of cost equations loop_cont_eval_zregisterencoding_bb4_in/2 
* CE 13 is refined into CE [19] 
* CE 12 is refined into CE [20] 
* CE 11 is refined into CE [21] 
* CE 10 is refined into CE [22] 


#### Refined cost equations loop_cont_eval_zregisterencoding_bb4_in/2 
* CE 19: loop_cont_eval_zregisterencoding_bb4_in(B,A) = 0
     [B=5] 
* CE 20: loop_cont_eval_zregisterencoding_bb4_in(B,A) = 0
     [B=4] 
* CE 21: loop_cont_eval_zregisterencoding_bb4_in(B,A) = 0
     [B=3] 
* CE 22: loop_cont_eval_zregisterencoding_bb4_in(B,A) = 0
     [B=2] 

### Cost equations --> "Loop" of loop_cont_eval_zregisterencoding_bb4_in/2 
* CEs [19] --> Loop 17 
* CEs [20] --> Loop 18 
* CEs [21] --> Loop 19 
* CEs [22] --> Loop 20 

#### Loops of loop_cont_eval_zregisterencoding_bb4_in/2 
* Loop 17: loop_cont_eval_zregisterencoding_bb4_in(B,A) [B=5] 
* Loop 18: loop_cont_eval_zregisterencoding_bb4_in(B,A) [B=4] 
* Loop 19: loop_cont_eval_zregisterencoding_bb4_in(B,A) [B=3] 
* Loop 20: loop_cont_eval_zregisterencoding_bb4_in(B,A) [B=2] 

### Ranking functions of CR loop_cont_eval_zregisterencoding_bb4_in(B,A) 

#### Partial ranking functions of CR loop_cont_eval_zregisterencoding_bb4_in(B,A) 


### Resulting Chains:loop_cont_eval_zregisterencoding_bb4_in(B,A) 
* [20]
* [19]
* [18]
* [17]


### Merging Chains  loop_cont_eval_zregisterencoding_bb4_in/2 into  External patterns of execution 
* [[20]] --> 1 
* [[19]] --> 2 
* [[18]] --> 3 
* [[17]] --> 4 


### Specialization of cost equations eval_zregisterencoding_bb0_in/1 
* CE 3 is refined into CE [23,24,25,26,27,28,29] 
* CE 4 is refined into CE [30] 


#### Refined cost equations eval_zregisterencoding_bb0_in/1 
* CE 23: eval_zregisterencoding_bb0_in(B) = 1+ eval_zregisterencoding_bb4_in(C,D):1+ loop_cont_eval_zregisterencoding_bb4_in(E,B):1
     [C>=1,E=2,D=2] 
* CE 24: eval_zregisterencoding_bb0_in(B) = 1+ eval_zregisterencoding_bb4_in(C,D):2+ loop_cont_eval_zregisterencoding_bb4_in(E,B):2
     [0>=C,E=3,D=3] 
* CE 25: eval_zregisterencoding_bb0_in(B) = 1+ eval_zregisterencoding_bb4_in(C,D):3+ loop_cont_eval_zregisterencoding_bb4_in(E,B):2
     [C>=1,E=3,D=3] 
* CE 26: eval_zregisterencoding_bb0_in(B) = 1+ eval_zregisterencoding_bb4_in(C,D):4+ loop_cont_eval_zregisterencoding_bb4_in(E,B):3
     [0>=C,E=4,D=4] 
* CE 27: eval_zregisterencoding_bb0_in(B) = 1+ eval_zregisterencoding_bb4_in(C,D):5+ loop_cont_eval_zregisterencoding_bb4_in(E,B):3
     [C>=1,E=4,D=4] 
* CE 28: eval_zregisterencoding_bb0_in(B) = 1+ eval_zregisterencoding_bb4_in(C,D):6+ loop_cont_eval_zregisterencoding_bb4_in(E,B):4
     [0>=C,E=5,D=5] 
* CE 29: eval_zregisterencoding_bb0_in(B) = 1+ eval_zregisterencoding_bb4_in(C,D):7+ loop_cont_eval_zregisterencoding_bb4_in(E,B):4
     [C>=1,E=5,D=5] 
* CE 30: eval_zregisterencoding_bb0_in(B) = 0
     [] 

### Cost equations --> "Loop" of eval_zregisterencoding_bb0_in/1 
* CEs [23,24,25,26,27,28,29,30] --> Loop 21 

#### Loops of eval_zregisterencoding_bb0_in/1 
* Loop 21: eval_zregisterencoding_bb0_in(B) [] 

### Ranking functions of CR eval_zregisterencoding_bb0_in(B) 

#### Partial ranking functions of CR eval_zregisterencoding_bb0_in(B) 


### Resulting Chains:eval_zregisterencoding_bb0_in(B) 
* [21]


### Merging Chains  eval_zregisterencoding_bb0_in/1 into  External patterns of execution 
* [[21]] --> 1 


### Specialization of cost equations eval_zregisterencoding_start/1 
* CE 2 is refined into CE [31] 


#### Refined cost equations eval_zregisterencoding_start/1 
* CE 31: eval_zregisterencoding_start(B) = 0+ eval_zregisterencoding_bb0_in(B):1
     [] 

### Cost equations --> "Loop" of eval_zregisterencoding_start/1 
* CEs [31] --> Loop 22 

#### Loops of eval_zregisterencoding_start/1 
* Loop 22: eval_zregisterencoding_start(B) [] 

### Ranking functions of CR eval_zregisterencoding_start(B) 

#### Partial ranking functions of CR eval_zregisterencoding_start(B) 


### Resulting Chains:eval_zregisterencoding_start(B) 
* [22]


### Merging Chains  eval_zregisterencoding_start/1 into  External patterns of execution 
* [[22]] --> 1 


Computing Bounds
=====================================

#### Cost of loops [12] 

 * loop 12:eval_zregisterencoding_bb4_in(V_i_0,B) -> [eval_zregisterencoding_bb4_in(V_i_0',B')] 
1
#### Cost of phase [12]:eval_zregisterencoding_bb4_in(V_i_0,B) -> [eval_zregisterencoding_bb4_in(V_i_0',B')] 
1*it(12)+0
  Such that:it(12) =< V_i_0
it(12) =< V_i_0-V_i_0'

#### Cost of phase [12]:eval_zregisterencoding_bb4_in(V_i_0,B) -> [eval_zregisterencoding_bb4_in(V_i_0',B')] 
1*it(12)+0
  Such that:it(12) =< V_i_0
it(12) =< V_i_0-V_i_0'

#### Cost of phase [12]:eval_zregisterencoding_bb4_in(V_i_0,B) -> [eval_zregisterencoding_bb4_in(V_i_0',B')] 
1*it(12)+0
  Such that:it(12) =< V_i_0
it(12) =< V_i_0-V_i_0'

#### Cost of phase [12]:eval_zregisterencoding_bb4_in(V_i_0,B) -> [eval_zregisterencoding_bb4_in(V_i_0',B')] 
1*it(12)+0
  Such that:it(12) =< V_i_0
it(12) =< V_i_0-V_i_0'

#### Cost of chains of eval_zregisterencoding_bb4_in(V_i_0,B):
* Chain [[12],16]: 1*it(12)+0
  Such that:it(12) =< V_i_0

  with precondition: [B=2,V_i_0>=2] 

* Chain [[12],15]: 1*it(12)+0
  Such that:it(12) =< V_i_0

  with precondition: [B=3,V_i_0>=1] 

* Chain [[12],14]: 1*it(12)+0
  Such that:it(12) =< V_i_0

  with precondition: [B=4,V_i_0>=1] 

* Chain [[12],13]: 1*it(12)+0
  Such that:it(12) =< V_i_0

  with precondition: [B=5,V_i_0>=1] 

* Chain [16]: 0
  with precondition: [B=2,V_i_0>=1] 

* Chain [15]: 0
  with precondition: [B=3,0>=V_i_0] 

* Chain [14]: 0
  with precondition: [B=4,0>=V_i_0] 

* Chain [13]: 0
  with precondition: [B=5,0>=V_i_0] 


#### Cost of chains of loop_cont_eval_zregisterencoding_bb4_in(B,A):
* Chain [20]: 0
  with precondition: [B=2] 

* Chain [19]: 0
  with precondition: [B=3] 

* Chain [18]: 0
  with precondition: [B=4] 

* Chain [17]: 0
  with precondition: [B=5] 


#### Cost of chains of eval_zregisterencoding_bb0_in(B):
* Chain [21]: 1*aux(1)+0
  with precondition: [] 


#### Cost of chains of eval_zregisterencoding_start(B):
* Chain [22]: 1*s(6)+0
  with precondition: [] 


Closed-form bounds of eval_zregisterencoding_start(B): 
-------------------------------------
* Chain [22] with precondition: [] 
    - Upper bound: inf 
    - Complexity: infinity 

### Maximum cost of eval_zregisterencoding_start(B): inf 
Asymptotic class: infinity 

Time statistics: 
-------------------------------------
* Partial evaluation computed in 10 ms.
* Invariants computed in 9 ms.
   - Backward Invariants 6 ms.
   - Transitive Invariants 1 ms.
* Refinement performed in 19 ms.
* Termination proved in 1 ms.
* Upper bounds computed in 14 ms.
   - Equation cost structures 6 ms.
   - Phase cost structures 2 ms.
   - Chain cost structures 6 ms.
   - Solving cost expressions 1 ms.
* Total analysis performed in 64 ms.


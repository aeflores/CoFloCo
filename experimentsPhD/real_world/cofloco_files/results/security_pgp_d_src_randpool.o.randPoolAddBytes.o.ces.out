Warning: Ignored call to eval_randPoolAddBytes_stop/1 in equation eval_randPoolAddBytes_bb5_in/1 

Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. recursive  : [eval_randPoolAddBytes_10/9,eval_randPoolAddBytes_11/9,eval_randPoolAddBytes_7/8,eval_randPoolAddBytes_8/8,eval_randPoolAddBytes_bb1_in/7]
1. non_recursive  : [eval_randPoolAddBytes_bb5_in/1]
2. non_recursive  : [eval_randPoolAddBytes_15/3]
3. non_recursive  : [eval_randPoolAddBytes_14/4]
4. non_recursive  : [loop_cont_eval_randPoolAddBytes_bb1_in/5]
5. non_recursive  : [eval_randPoolAddBytes_bb0_in/4]
6. non_recursive  : [eval_randPoolAddBytes_start/4]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into eval_randPoolAddBytes_bb1_in/7
1. SCC is completely evaluated into other SCCs
2. SCC is completely evaluated into other SCCs
3. SCC is completely evaluated into other SCCs
4. SCC is partially evaluated into loop_cont_eval_randPoolAddBytes_bb1_in/5
5. SCC is partially evaluated into eval_randPoolAddBytes_bb0_in/4
6. SCC is partially evaluated into eval_randPoolAddBytes_start/4

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations eval_randPoolAddBytes_bb1_in/7 
* CE 6 is refined into CE [9] 
* CE 5 is refined into CE [10] 
* CE 4 is refined into CE [11] 


#### Refined cost equations eval_randPoolAddBytes_bb1_in/7 
* CE 9: eval_randPoolAddBytes_bb1_in(V__randPoolAddPos,V__randPoolGetPos,V__01,B,C,D,E) = 0
     [768>=V__randPoolAddPos+V__01,B=3] 
* CE 10: eval_randPoolAddBytes_bb1_in(A,B,C,D,A,B,C) = 0
     [768>=A+C,D=2] 
* CE 11: eval_randPoolAddBytes_bb1_in(V__randPoolAddPos,V__randPoolGetPos,V__01,B,C,D,E) = 1+ eval_randPoolAddBytes_bb1_in(V__randPoolAddPos,V__randPoolGetPos,F,B,C,D,E)
     [F>=1,F+768=V__randPoolAddPos+V__01] 

### Cost equations --> "Loop" of eval_randPoolAddBytes_bb1_in/7 
* CEs [11] --> Loop 8 
* CEs [9] --> Loop 9 
* CEs [10] --> Loop 10 

#### Loops of eval_randPoolAddBytes_bb1_in/7 
* Loop 8: eval_randPoolAddBytes_bb1_in(V__randPoolAddPos,V__randPoolGetPos,V__01,B,C,D,E)->  eval_randPoolAddBytes_bb1_in(V__randPoolAddPos,V__randPoolGetPos,V__01',B,C,D,E)
                  [V__01'>=1,V__01'+768=V__randPoolAddPos+V__01] 
* Loop 9: eval_randPoolAddBytes_bb1_in(V__randPoolAddPos,V__randPoolGetPos,V__01,B,C,D,E) [768>=V__randPoolAddPos+V__01,B=3] 
* Loop 10: eval_randPoolAddBytes_bb1_in(A,B,C,D,A,B,C) [768>=A+C,D=2] 

### Ranking functions of CR eval_randPoolAddBytes_bb1_in(V__randPoolAddPos,V__randPoolGetPos,V__01,B,C,D,E) 

#### Partial ranking functions of CR eval_randPoolAddBytes_bb1_in(V__randPoolAddPos,V__randPoolGetPos,V__01,B,C,D,E) 


### Resulting Chains:eval_randPoolAddBytes_bb1_in(V__randPoolAddPos,V__randPoolGetPos,V__01,B,C,D,E) 
* [[8]]...
* [[8],10]
* [[8],9]
* [10]
* [9]


### Merging Chains  eval_randPoolAddBytes_bb1_in/7 into  External patterns of execution 
* [[10]] --> 1 
* [[10,[8]]] --> 2 
* [[9,[8]]] --> 3 
* [[9]] --> 4 
* [[[8]]] --> 5 


### Specialization of cost equations loop_cont_eval_randPoolAddBytes_bb1_in/5 
* CE 8 is refined into CE [12] 
* CE 7 is refined into CE [13] 


#### Refined cost equations loop_cont_eval_randPoolAddBytes_bb1_in/5 
* CE 12: loop_cont_eval_randPoolAddBytes_bb1_in(G,A,B,C,D) = 0
     [G=3] 
* CE 13: loop_cont_eval_randPoolAddBytes_bb1_in(G,A,B,C,D) = 0
     [G=2] 

### Cost equations --> "Loop" of loop_cont_eval_randPoolAddBytes_bb1_in/5 
* CEs [12] --> Loop 11 
* CEs [13] --> Loop 12 

#### Loops of loop_cont_eval_randPoolAddBytes_bb1_in/5 
* Loop 11: loop_cont_eval_randPoolAddBytes_bb1_in(G,A,B,C,D) [G=3] 
* Loop 12: loop_cont_eval_randPoolAddBytes_bb1_in(G,A,B,C,D) [G=2] 

### Ranking functions of CR loop_cont_eval_randPoolAddBytes_bb1_in(G,A,B,C,D) 

#### Partial ranking functions of CR loop_cont_eval_randPoolAddBytes_bb1_in(G,A,B,C,D) 


### Resulting Chains:loop_cont_eval_randPoolAddBytes_bb1_in(G,A,B,C,D) 
* [12]
* [11]


### Merging Chains  loop_cont_eval_randPoolAddBytes_bb1_in/5 into  External patterns of execution 
* [[12]] --> 1 
* [[11]] --> 2 


### Specialization of cost equations eval_randPoolAddBytes_bb0_in/4 
* CE 3 is refined into CE [14,15,16,17,18] 


#### Refined cost equations eval_randPoolAddBytes_bb0_in/4 
* CE 14: eval_randPoolAddBytes_bb0_in(V_len,V__randPoolAddPos,V__randPoolGetPos,B) = 1+ eval_randPoolAddBytes_bb1_in(V__randPoolAddPos,V__randPoolGetPos,V_len,C,V__randPoolAddPos,V__randPoolGetPos,V_len):1+ loop_cont_eval_randPoolAddBytes_bb1_in(D,V__randPoolAddPos,V__randPoolGetPos,V_len,B):1
     [768>=V_len+V__randPoolAddPos,D=2,C=2] 
* CE 15: eval_randPoolAddBytes_bb0_in(V_len,V__randPoolAddPos,V__randPoolGetPos,B) = 1+ eval_randPoolAddBytes_bb1_in(V__randPoolAddPos,V__randPoolGetPos,V_len,C,V__randPoolAddPos,V__randPoolGetPos,D):2+ loop_cont_eval_randPoolAddBytes_bb1_in(E,V__randPoolAddPos,V__randPoolGetPos,D,B):1
     [V_len+V__randPoolAddPos>=D+768,768>=V__randPoolAddPos+D,D>=1,E=2,C=2] 
* CE 16: eval_randPoolAddBytes_bb0_in(V_len,V__randPoolAddPos,V__randPoolGetPos,B) = 1+ eval_randPoolAddBytes_bb1_in(V__randPoolAddPos,V__randPoolGetPos,V_len,C,D,E,F):3+ loop_cont_eval_randPoolAddBytes_bb1_in(G,D,E,F,B):2
     [V_len+V__randPoolAddPos>=769,767>=V__randPoolAddPos,G=3,C=3] 
* CE 17: eval_randPoolAddBytes_bb0_in(V_len,V__randPoolAddPos,V__randPoolGetPos,B) = 1+ eval_randPoolAddBytes_bb1_in(V__randPoolAddPos,V__randPoolGetPos,V_len,C,D,E,F):4+ loop_cont_eval_randPoolAddBytes_bb1_in(G,D,E,F,B):2
     [768>=V_len+V__randPoolAddPos,G=3,C=3] 
* CE 18: eval_randPoolAddBytes_bb0_in(V_len,V__randPoolAddPos,V__randPoolGetPos,B) = 1+ eval_randPoolAddBytes_bb1_in(V__randPoolAddPos,V__randPoolGetPos,V_len,C,D,E,F):5
     [V_len+V__randPoolAddPos>=769] 

### Cost equations --> "Loop" of eval_randPoolAddBytes_bb0_in/4 
* CEs [18] --> Loop 13 
* CEs [14,17] --> Loop 14 
* CEs [15,16] --> Loop 15 

#### Loops of eval_randPoolAddBytes_bb0_in/4 
* Loop 13: eval_randPoolAddBytes_bb0_in(V_len,V__randPoolAddPos,V__randPoolGetPos,B) [V_len+V__randPoolAddPos>=769] 
* Loop 14: eval_randPoolAddBytes_bb0_in(V_len,V__randPoolAddPos,V__randPoolGetPos,B) [768>=V_len+V__randPoolAddPos] 
* Loop 15: eval_randPoolAddBytes_bb0_in(V_len,V__randPoolAddPos,V__randPoolGetPos,B) [V_len+V__randPoolAddPos>=769,767>=V__randPoolAddPos] 

### Ranking functions of CR eval_randPoolAddBytes_bb0_in(V_len,V__randPoolAddPos,V__randPoolGetPos,B) 

#### Partial ranking functions of CR eval_randPoolAddBytes_bb0_in(V_len,V__randPoolAddPos,V__randPoolGetPos,B) 


### Resulting Chains:eval_randPoolAddBytes_bb0_in(V_len,V__randPoolAddPos,V__randPoolGetPos,B) 
* [15]
* [14]
* [13]...


### Merging Chains  eval_randPoolAddBytes_bb0_in/4 into  External patterns of execution 
* [[15]] --> 1 
* [[14]] --> 2 
* [[13]] --> 3 


### Specialization of cost equations eval_randPoolAddBytes_start/4 
* CE 2 is refined into CE [19,20,21] 


#### Refined cost equations eval_randPoolAddBytes_start/4 
* CE 19: eval_randPoolAddBytes_start(V_len,V__randPoolAddPos,V__randPoolGetPos,B) = 0+ eval_randPoolAddBytes_bb0_in(V_len,V__randPoolAddPos,V__randPoolGetPos,B):1
     [V_len+V__randPoolAddPos>=769,767>=V__randPoolAddPos] 
* CE 20: eval_randPoolAddBytes_start(V_len,V__randPoolAddPos,V__randPoolGetPos,B) = 0+ eval_randPoolAddBytes_bb0_in(V_len,V__randPoolAddPos,V__randPoolGetPos,B):2
     [768>=V_len+V__randPoolAddPos] 
* CE 21: eval_randPoolAddBytes_start(V_len,V__randPoolAddPos,V__randPoolGetPos,B) = 0+ eval_randPoolAddBytes_bb0_in(V_len,V__randPoolAddPos,V__randPoolGetPos,B):3
     [V_len+V__randPoolAddPos>=769] 

### Cost equations --> "Loop" of eval_randPoolAddBytes_start/4 
* CEs [21] --> Loop 16 
* CEs [20] --> Loop 17 
* CEs [19] --> Loop 18 

#### Loops of eval_randPoolAddBytes_start/4 
* Loop 16: eval_randPoolAddBytes_start(V_len,V__randPoolAddPos,V__randPoolGetPos,B) [V_len+V__randPoolAddPos>=769] 
* Loop 17: eval_randPoolAddBytes_start(V_len,V__randPoolAddPos,V__randPoolGetPos,B) [768>=V_len+V__randPoolAddPos] 
* Loop 18: eval_randPoolAddBytes_start(V_len,V__randPoolAddPos,V__randPoolGetPos,B) [V_len+V__randPoolAddPos>=769,767>=V__randPoolAddPos] 

### Ranking functions of CR eval_randPoolAddBytes_start(V_len,V__randPoolAddPos,V__randPoolGetPos,B) 

#### Partial ranking functions of CR eval_randPoolAddBytes_start(V_len,V__randPoolAddPos,V__randPoolGetPos,B) 


### Resulting Chains:eval_randPoolAddBytes_start(V_len,V__randPoolAddPos,V__randPoolGetPos,B) 
* [18]
* [17]
* [16]...


### Merging Chains  eval_randPoolAddBytes_start/4 into  External patterns of execution 
* [[18]] --> 1 
* [[17]] --> 2 
* [[16]] --> 3 


Computing Bounds
=====================================

#### Cost of loops [8] 

 * loop 8:eval_randPoolAddBytes_bb1_in(V__randPoolAddPos,V__randPoolGetPos,V__01,B,C,D,E) -> [eval_randPoolAddBytes_bb1_in(V__randPoolAddPos',V__randPoolGetPos',V__01',B',C',D',E')] 
1
#### Cost of phase [8]:eval_randPoolAddBytes_bb1_in(V__randPoolAddPos,V__randPoolGetPos,V__01,B,C,D,E) -> [eval_randPoolAddBytes_bb1_in(V__randPoolAddPos',V__randPoolGetPos',V__01',B',C',D',E')] 
1*it(8)+0
#### Cost of phase [8]:eval_randPoolAddBytes_bb1_in(V__randPoolAddPos,V__randPoolGetPos,V__01,B,C,D,E) -> [eval_randPoolAddBytes_bb1_in(V__randPoolAddPos',V__randPoolGetPos',V__01',B',C',D',E')] 
1*it(8)+0
#### Cost of phase [8]:eval_randPoolAddBytes_bb1_in(V__randPoolAddPos,V__randPoolGetPos,V__01,B,C,D,E) -> [eval_randPoolAddBytes_bb1_in(V__randPoolAddPos',V__randPoolGetPos',V__01',B',C',D',E')] 
1*it(8)+0
#### Cost of chains of eval_randPoolAddBytes_bb1_in(V__randPoolAddPos,V__randPoolGetPos,V__01,B,C,D,E):
* Chain [[8]]...: 1*it(8)+0
  with precondition: [V__01+V__randPoolAddPos>=769] 

* Chain [[8],10]: 1*it(8)+0
  with precondition: [B=2,V__randPoolAddPos=C,V__randPoolGetPos=D,E>=1,768>=V__randPoolAddPos+E,V__01+V__randPoolAddPos>=E+768] 

* Chain [[8],9]: 1*it(8)+0
  with precondition: [B=3,767>=V__randPoolAddPos,V__01+V__randPoolAddPos>=769] 

* Chain [10]: 0
  with precondition: [B=2,D=V__randPoolGetPos,V__randPoolAddPos=C,V__01=E,768>=V__01+V__randPoolAddPos] 

* Chain [9]: 0
  with precondition: [B=3,768>=V__01+V__randPoolAddPos] 


#### Cost of chains of loop_cont_eval_randPoolAddBytes_bb1_in(G,A,B,C,D):
* Chain [12]: 0
  with precondition: [G=2] 

* Chain [11]: 0
  with precondition: [G=3] 


#### Cost of chains of eval_randPoolAddBytes_bb0_in(V_len,V__randPoolAddPos,V__randPoolGetPos,B):
* Chain [15]: 1*aux(1)+0
  with precondition: [767>=V__randPoolAddPos,V__randPoolAddPos+V_len>=769] 

* Chain [14]: 1
  with precondition: [768>=V__randPoolAddPos+V_len] 

* Chain [13]...: 1*s(3)+1
  with precondition: [V__randPoolAddPos+V_len>=769] 


#### Cost of chains of eval_randPoolAddBytes_start(V_len,V__randPoolAddPos,V__randPoolGetPos,B):
* Chain [18]: 1*s(4)+0
  with precondition: [767>=V__randPoolAddPos,V__randPoolAddPos+V_len>=769] 

* Chain [17]: 1
  with precondition: [768>=V__randPoolAddPos+V_len] 

* Chain [16]...: 1*s(5)+1
  with precondition: [V__randPoolAddPos+V_len>=769] 


Closed-form bounds of eval_randPoolAddBytes_start(V_len,V__randPoolAddPos,V__randPoolGetPos,B): 
-------------------------------------
* Chain [18] with precondition: [767>=V__randPoolAddPos,V_len+V__randPoolAddPos>=769] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [17] with precondition: [768>=V_len+V__randPoolAddPos] 
    - Upper bound: 1 
    - Complexity: constant 
* Chain [16]... with precondition: [V_len+V__randPoolAddPos>=769] 
    - Upper bound: inf 
    - Complexity: infinity 

### Maximum cost of eval_randPoolAddBytes_start(V_len,V__randPoolAddPos,V__randPoolGetPos,B): inf 
Asymptotic class: infinity 

Time statistics: 
-------------------------------------
* Partial evaluation computed in 11 ms.
* Invariants computed in 12 ms.
   - Backward Invariants 8 ms.
   - Transitive Invariants 2 ms.
* Refinement performed in 31 ms.
* Termination proved in 1 ms.
* Upper bounds computed in 19 ms.
   - Equation cost structures 9 ms.
   - Phase cost structures 3 ms.
   - Chain cost structures 7 ms.
   - Solving cost expressions 1 ms.
* Total analysis performed in 93 ms.


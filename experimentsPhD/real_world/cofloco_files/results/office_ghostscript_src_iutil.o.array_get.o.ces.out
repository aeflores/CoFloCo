Warning: Ignored call to eval_array_get_stop/1 in equation eval_array_get_bb8_in/1 

Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. non_recursive  : [eval_array_get_bb8_in/1]
1. non_recursive  : [eval_array_get_22/1]
2. non_recursive  : [eval_array_get_21/1]
3. non_recursive  : [eval_array_get_9/1]
4. non_recursive  : [eval_array_get_8/1]
5. non_recursive  : [eval_array_get_NewDefault_in/1]
6. recursive  : [eval_array_get_bb4_in/2]
7. non_recursive  : [eval_array_get_18/1]
8. non_recursive  : [eval_array_get_17/1]
9. non_recursive  : [loop_cont_eval_array_get_bb4_in/2]
10. non_recursive  : [eval_array_get_bb0_in/2]
11. non_recursive  : [eval_array_get_start/2]

#### Obtained direct recursion through partial evaluation 
0. SCC is completely evaluated into other SCCs
1. SCC is completely evaluated into other SCCs
2. SCC is completely evaluated into other SCCs
3. SCC is completely evaluated into other SCCs
4. SCC is completely evaluated into other SCCs
5. SCC is completely evaluated into other SCCs
6. SCC is partially evaluated into eval_array_get_bb4_in/2
7. SCC is completely evaluated into other SCCs
8. SCC is completely evaluated into other SCCs
9. SCC is completely evaluated into other SCCs
10. SCC is partially evaluated into eval_array_get_bb0_in/2
11. SCC is partially evaluated into eval_array_get_start/2

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations eval_array_get_bb4_in/2 
* CE 7 is refined into CE [8] 
* CE 6 is refined into CE [9] 
* CE 5 is refined into CE [10] 


#### Refined cost equations eval_array_get_bb4_in/2 
* CE 8: eval_array_get_bb4_in(V_index_0,B) = 0
     [B=2,V_index_0=0] 
* CE 9: eval_array_get_bb4_in(V_index_0,B) = 1+ eval_array_get_bb4_in(C,D)
     [V_index_0>=1,V_index_0=C+1,D=2,B=2] 
* CE 10: eval_array_get_bb4_in(V_index_0,B) = 1+ eval_array_get_bb4_in(C,D)
     [0>=V_index_0+1,V_index_0=C+1,D=2,B=2] 

### Cost equations --> "Loop" of eval_array_get_bb4_in/2 
* CEs [9] --> Loop 6 
* CEs [10] --> Loop 7 
* CEs [8] --> Loop 8 

#### Loops of eval_array_get_bb4_in/2 
* Loop 6: eval_array_get_bb4_in(V_index_0,B)->  eval_array_get_bb4_in(V_index_0',B')
                  [V_index_0>=1,V_index_0=V_index_0'+1,B'=2,B=2] 
* Loop 7: eval_array_get_bb4_in(V_index_0,B)->  eval_array_get_bb4_in(V_index_0',B')
                  [0>=V_index_0+1,V_index_0=V_index_0'+1,B'=2,B=2] 
* Loop 8: eval_array_get_bb4_in(V_index_0,B) [B=2,V_index_0=0] 

### Ranking functions of CR eval_array_get_bb4_in(V_index_0,B) 
* RF of phase [6]: [V_index_0]

#### Partial ranking functions of CR eval_array_get_bb4_in(V_index_0,B) 
* Partial RF of phase [6]:
  - RF of loop [6:1]:
    V_index_0


### Resulting Chains:eval_array_get_bb4_in(V_index_0,B) 
* [[7]]...
* [[6],8]
* [8]


### Merging Chains  eval_array_get_bb4_in/2 into  External patterns of execution 
* [[8]] --> 1 
* [[8,[6]]] --> 2 
* [[[7]]] --> 3 


### Specialization of cost equations eval_array_get_bb0_in/2 
* CE 3 is refined into CE [11] 
* CE 4 is refined into CE [12,13,14] 


#### Refined cost equations eval_array_get_bb0_in/2 
* CE 11: eval_array_get_bb0_in(V_index_long,B) = 0
     [] 
* CE 12: eval_array_get_bb0_in(V_index_long,B) = 1+ eval_array_get_bb4_in(C,D):1
     [D=2,C=0,V_index_long=0] 
* CE 13: eval_array_get_bb0_in(V_index_long,B) = 1+ eval_array_get_bb4_in(V_index_long,C):2
     [V_index_long>=1,C=2] 
* CE 14: eval_array_get_bb0_in(V_index_long,B) = 1+ eval_array_get_bb4_in(V_index_long,C):3
     [0>=V_index_long+1,C=2] 

### Cost equations --> "Loop" of eval_array_get_bb0_in/2 
* CEs [14] --> Loop 9 
* CEs [11,12,13] --> Loop 10 

#### Loops of eval_array_get_bb0_in/2 
* Loop 9: eval_array_get_bb0_in(V_index_long,B) [0>=V_index_long+1] 
* Loop 10: eval_array_get_bb0_in(V_index_long,B) [] 

### Ranking functions of CR eval_array_get_bb0_in(V_index_long,B) 

#### Partial ranking functions of CR eval_array_get_bb0_in(V_index_long,B) 


### Resulting Chains:eval_array_get_bb0_in(V_index_long,B) 
* [10]
* [9]...


### Merging Chains  eval_array_get_bb0_in/2 into  External patterns of execution 
* [[10]] --> 1 
* [[9]] --> 2 


### Specialization of cost equations eval_array_get_start/2 
* CE 2 is refined into CE [15,16] 


#### Refined cost equations eval_array_get_start/2 
* CE 15: eval_array_get_start(V_index_long,B) = 0+ eval_array_get_bb0_in(V_index_long,B):1
     [] 
* CE 16: eval_array_get_start(V_index_long,B) = 0+ eval_array_get_bb0_in(V_index_long,B):2
     [0>=V_index_long+1] 

### Cost equations --> "Loop" of eval_array_get_start/2 
* CEs [16] --> Loop 11 
* CEs [15] --> Loop 12 

#### Loops of eval_array_get_start/2 
* Loop 11: eval_array_get_start(V_index_long,B) [0>=V_index_long+1] 
* Loop 12: eval_array_get_start(V_index_long,B) [] 

### Ranking functions of CR eval_array_get_start(V_index_long,B) 

#### Partial ranking functions of CR eval_array_get_start(V_index_long,B) 


### Resulting Chains:eval_array_get_start(V_index_long,B) 
* [12]
* [11]...


### Merging Chains  eval_array_get_start/2 into  External patterns of execution 
* [[12]] --> 1 
* [[11]] --> 2 


Computing Bounds
=====================================

#### Cost of loops [7] 

 * loop 7:eval_array_get_bb4_in(V_index_0,B) -> [eval_array_get_bb4_in(V_index_0',B')] 
1
#### Cost of phase [7]:eval_array_get_bb4_in(V_index_0,B) -> [eval_array_get_bb4_in(V_index_0',B')] 
1*it(7)+0
#### Cost of loops [6] 

 * loop 6:eval_array_get_bb4_in(V_index_0,B) -> [eval_array_get_bb4_in(V_index_0',B')] 
1
#### Cost of phase [6]:eval_array_get_bb4_in(V_index_0,B) -> [eval_array_get_bb4_in(V_index_0',B')] 
1*it(6)+0
  Such that:it(6) =< V_index_0
it(6) =< V_index_0-V_index_0'

#### Cost of chains of eval_array_get_bb4_in(V_index_0,B):
* Chain [[7]]...: 1*it(7)+0
  with precondition: [0>=V_index_0+1,B=2] 

* Chain [[6],8]: 1*it(6)+0
  Such that:it(6) =< V_index_0

  with precondition: [B=2,V_index_0>=1] 

* Chain [8]: 0
  with precondition: [V_index_0=0,B=2] 


#### Cost of chains of eval_array_get_bb0_in(V_index_long,B):
* Chain [10]: 1*s(1)+1
  Such that:s(1) =< V_index_long

  with precondition: [] 

* Chain [9]...: 1*s(2)+1
  with precondition: [0>=V_index_long+1] 


#### Cost of chains of eval_array_get_start(V_index_long,B):
* Chain [12]: 1*s(3)+1
  Such that:s(3) =< V_index_long

  with precondition: [] 

* Chain [11]...: 1*s(4)+1
  with precondition: [0>=V_index_long+1] 


Closed-form bounds of eval_array_get_start(V_index_long,B): 
-------------------------------------
* Chain [12] with precondition: [] 
    - Upper bound: nat(V_index_long)+1 
    - Complexity: n 
* Chain [11]... with precondition: [0>=V_index_long+1] 
    - Upper bound: inf 
    - Complexity: infinity 

### Maximum cost of eval_array_get_start(V_index_long,B): inf 
Asymptotic class: infinity 

Time statistics: 
-------------------------------------
* Partial evaluation computed in 16 ms.
* Invariants computed in 21 ms.
   - Backward Invariants 7 ms.
   - Transitive Invariants 6 ms.
* Refinement performed in 36 ms.
* Termination proved in 6 ms.
* Upper bounds computed in 30 ms.
   - Equation cost structures 12 ms.
   - Phase cost structures 10 ms.
   - Chain cost structures 7 ms.
   - Solving cost expressions 1 ms.
* Total analysis performed in 141 ms.


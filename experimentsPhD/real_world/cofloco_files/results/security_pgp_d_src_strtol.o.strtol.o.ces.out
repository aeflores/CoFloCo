WARNING: Excluded non-linear constraints:[-A*C+2147483648>=0,-A*C+2147483648+1=<A]
WARNING: Excluded non-linear constraints:[-A*C+2147483648>=0,-A*C+2147483648+1=< -A]
WARNING: Excluded non-linear constraints:[-A*C+2147483648>=0,-A*C+2147483648+1=<A]
WARNING: Excluded non-linear constraints:[-A*C+2147483648>=0,-A*C+2147483648+1=< -A]
WARNING: Excluded non-linear constraints:[-A*D+2147483648>=0,-A*D+2147483648+1=<A]
WARNING: Excluded non-linear constraints:[-A*D+2147483648>=0,-A*D+2147483648+1=< -A]
WARNING: Excluded non-linear constraints:[-A*D+2147483648>=0,-A*D+2147483648+1=<A]
WARNING: Excluded non-linear constraints:[-A*D+2147483648>=0,-A*D+2147483648+1=< -A]
WARNING: Excluded non-linear constraints:[-A*C+2147483647>=0,-A*C+2147483647+1=<A]
WARNING: Excluded non-linear constraints:[-A*C+2147483647>=0,-A*C+2147483647+1=< -A]
WARNING: Excluded non-linear constraints:[-A*C+2147483647>=0,-A*C+2147483647+1=<A]
WARNING: Excluded non-linear constraints:[-A*C+2147483647>=0,-A*C+2147483647+1=< -A]
WARNING: Excluded non-linear constraints:[-A*D+2147483647>=0,-A*D+2147483647+1=<A]
WARNING: Excluded non-linear constraints:[-A*D+2147483647>=0,-A*D+2147483647+1=< -A]
WARNING: Excluded non-linear constraints:[-A*D+2147483647>=0,-A*D+2147483647+1=<A]
WARNING: Excluded non-linear constraints:[-A*D+2147483647>=0,-A*D+2147483647+1=< -A]
Warning: Ignored call to eval_strtol_stop/1 in equation eval_strtol_bb27_in/1 

Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. recursive  : [eval_strtol_bb1_in/3]
1. recursive  : [eval_strtol_bb13_in/1,eval_strtol_bb17_in/1,eval_strtol_bb21_in/1]
2. non_recursive  : [eval_strtol_bb27_in/1]
3. non_recursive  : [eval_strtol_bb25_in/1]
4. non_recursive  : [eval_strtol_65/1]
5. non_recursive  : [eval_strtol_64/1]
6. non_recursive  : [eval_strtol_bb22_in/1]
7. non_recursive  : [loop_cont_eval_strtol_bb13_in/2]
8. non_recursive  : [eval_strtol_36/1]
9. non_recursive  : [eval_strtol_35/1]
10. non_recursive  : [eval_strtol_34/1]
11. non_recursive  : [eval_strtol_33/1]
12. non_recursive  : [eval_strtol_32/1]
13. non_recursive  : [eval_strtol_bb12_in/2]
14. non_recursive  : [eval_strtol_bb10_in/2]
15. non_recursive  : [eval_strtol_NewDefault4_in/2]
16. non_recursive  : [eval_strtol_bb9_in/1]
17. non_recursive  : [eval_strtol_bb6_in/2]
18. non_recursive  : [eval_strtol_bb5_in/2]
19. non_recursive  : [eval_strtol_NewDefault_in/2]
20. non_recursive  : [loop_cont_eval_strtol_bb1_in/3]
21. non_recursive  : [eval_strtol_1/2]
22. non_recursive  : [eval_strtol_0/2]
23. non_recursive  : [eval_strtol_bb0_in/2]
24. non_recursive  : [eval_strtol_start/2]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into eval_strtol_bb1_in/3
1. SCC is partially evaluated into eval_strtol_bb13_in/1
2. SCC is completely evaluated into other SCCs
3. SCC is completely evaluated into other SCCs
4. SCC is completely evaluated into other SCCs
5. SCC is completely evaluated into other SCCs
6. SCC is partially evaluated into eval_strtol_bb22_in/1
7. SCC is completely evaluated into other SCCs
8. SCC is partially evaluated into eval_strtol_36/1
9. SCC is completely evaluated into other SCCs
10. SCC is completely evaluated into other SCCs
11. SCC is completely evaluated into other SCCs
12. SCC is completely evaluated into other SCCs
13. SCC is partially evaluated into eval_strtol_bb12_in/2
14. SCC is partially evaluated into eval_strtol_bb10_in/2
15. SCC is completely evaluated into other SCCs
16. SCC is completely evaluated into other SCCs
17. SCC is partially evaluated into eval_strtol_bb6_in/2
18. SCC is partially evaluated into eval_strtol_bb5_in/2
19. SCC is completely evaluated into other SCCs
20. SCC is partially evaluated into loop_cont_eval_strtol_bb1_in/3
21. SCC is partially evaluated into eval_strtol_1/2
22. SCC is completely evaluated into other SCCs
23. SCC is completely evaluated into other SCCs
24. SCC is partially evaluated into eval_strtol_start/2

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations eval_strtol_bb1_in/3 
* CE 6 is refined into CE [24] 
* CE 5 is refined into CE [25] 
* CE 4 is refined into CE [26] 


#### Refined cost equations eval_strtol_bb1_in/3 
* CE 24: eval_strtol_bb1_in(A,B,A) = 0
     [B=3] 
* CE 25: eval_strtol_bb1_in(A,B,A) = 0
     [B=2] 
* CE 26: eval_strtol_bb1_in(V_base,B,C) = 1+ eval_strtol_bb1_in(V_base,B,C)
     [] 

### Cost equations --> "Loop" of eval_strtol_bb1_in/3 
* CEs [26] --> Loop 19 
* CEs [24] --> Loop 20 
* CEs [25] --> Loop 21 

#### Loops of eval_strtol_bb1_in/3 
* Loop 19: eval_strtol_bb1_in(V_base,B,C)->  eval_strtol_bb1_in(V_base,B,C)
                  [] 
* Loop 20: eval_strtol_bb1_in(A,B,A) [B=3] 
* Loop 21: eval_strtol_bb1_in(A,B,A) [B=2] 

### Ranking functions of CR eval_strtol_bb1_in(V_base,B,C) 

#### Partial ranking functions of CR eval_strtol_bb1_in(V_base,B,C) 


### Resulting Chains:eval_strtol_bb1_in(V_base,B,C) 
* [[19]]...
* [[19],21]
* [[19],20]
* [21]
* [20]


### Merging Chains  eval_strtol_bb1_in/3 into  External patterns of execution 
* [[21],[21,[19]]] --> 1 
* [[20],[20,[19]]] --> 2 
* [[[19]]] --> 3 


### Specialization of cost equations eval_strtol_bb13_in/1 
* CE 22 is refined into CE [27] 
* CE 21 is refined into CE [28] 


#### Refined cost equations eval_strtol_bb13_in/1 
* CE 27: eval_strtol_bb13_in(B) = 1+ eval_strtol_bb13_in(C)
     [C=4,B=4] 
* CE 28: eval_strtol_bb13_in(B) = 0
     [B=4] 

### Cost equations --> "Loop" of eval_strtol_bb13_in/1 
* CEs [28] --> Loop 22 
* CEs [27] --> Loop 23 

#### Loops of eval_strtol_bb13_in/1 
* Loop 22: eval_strtol_bb13_in(B) [B=4] 
* Loop 23: eval_strtol_bb13_in(B)->  eval_strtol_bb13_in(B')
                  [B'=4,B=4] 

### Ranking functions of CR eval_strtol_bb13_in(B) 

#### Partial ranking functions of CR eval_strtol_bb13_in(B) 


### Resulting Chains:eval_strtol_bb13_in(B) 
* [[23]]...
* [[23],22]
* [22]


### Merging Chains  eval_strtol_bb13_in/1 into  External patterns of execution 
* [[22],[22,[23]]] --> 1 
* [[[23]]] --> 2 


### Specialization of cost equations eval_strtol_bb22_in/1 
* CE 23 is refined into CE [29] 


#### Refined cost equations eval_strtol_bb22_in/1 
* CE 29: eval_strtol_bb22_in(B) = 0
     [] 

### Cost equations --> "Loop" of eval_strtol_bb22_in/1 
* CEs [29] --> Loop 24 

#### Loops of eval_strtol_bb22_in/1 
* Loop 24: eval_strtol_bb22_in(B) [] 

### Ranking functions of CR eval_strtol_bb22_in(B) 

#### Partial ranking functions of CR eval_strtol_bb22_in(B) 


### Resulting Chains:eval_strtol_bb22_in(B) 
* [24]


### Merging Chains  eval_strtol_bb22_in/1 into  External patterns of execution 
* [[24]] --> 1 


### Specialization of cost equations eval_strtol_36/1 
* CE 20 is refined into CE [30,31] 


#### Refined cost equations eval_strtol_36/1 
* CE 30: eval_strtol_36(B) = 1+ eval_strtol_bb13_in(C):1+ eval_strtol_bb22_in(B):1
     [C=4] 
* CE 31: eval_strtol_36(B) = 1+ eval_strtol_bb13_in(C):2
     [C=4] 

### Cost equations --> "Loop" of eval_strtol_36/1 
* CEs [31] --> Loop 25 
* CEs [30] --> Loop 26 

#### Loops of eval_strtol_36/1 
* Loop 25: eval_strtol_36(B) [] 
* Loop 26: eval_strtol_36(B) [] 

### Ranking functions of CR eval_strtol_36(B) 

#### Partial ranking functions of CR eval_strtol_36(B) 


### Resulting Chains:eval_strtol_36(B) 
* [26]
* [25]...


### Merging Chains  eval_strtol_36/1 into  External patterns of execution 
* [[26]] --> 1 
* [[25]] --> 2 


### Specialization of cost equations eval_strtol_bb12_in/2 
* CE 18 is refined into CE [32,33] 
* CE 19 is refined into CE [34,35] 
* CE 16 is refined into CE [36,37] 
* CE 17 is refined into CE [38,39] 


#### Refined cost equations eval_strtol_bb12_in/2 
* CE 32: eval_strtol_bb12_in(V__1,B) = 0+ eval_strtol_36(B):1
     [V__1>=2] 
* CE 33: eval_strtol_bb12_in(V__1,B) = 0+ eval_strtol_36(B):2
     [V__1>=2] 
* CE 34: eval_strtol_bb12_in(V__1,B) = 0+ eval_strtol_36(B):1
     [0>=V__1+2] 
* CE 35: eval_strtol_bb12_in(V__1,B) = 0+ eval_strtol_36(B):2
     [0>=V__1+2] 
* CE 36: eval_strtol_bb12_in(V__1,B) = 0+ eval_strtol_36(B):1
     [V__1=1] 
* CE 37: eval_strtol_bb12_in(V__1,B) = 0+ eval_strtol_36(B):2
     [V__1=1] 
* CE 38: eval_strtol_bb12_in(V__1,B) = 0+ eval_strtol_36(B):1
     [V__1+1=0] 
* CE 39: eval_strtol_bb12_in(V__1,B) = 0+ eval_strtol_36(B):2
     [V__1+1=0] 

### Cost equations --> "Loop" of eval_strtol_bb12_in/2 
* CEs [33] --> Loop 27 
* CEs [35] --> Loop 28 
* CEs [37] --> Loop 29 
* CEs [39] --> Loop 30 
* CEs [32] --> Loop 31 
* CEs [34] --> Loop 32 
* CEs [36] --> Loop 33 
* CEs [38] --> Loop 34 

#### Loops of eval_strtol_bb12_in/2 
* Loop 27: eval_strtol_bb12_in(V__1,B) [V__1>=2] 
* Loop 28: eval_strtol_bb12_in(V__1,B) [0>=V__1+2] 
* Loop 29: eval_strtol_bb12_in(V__1,B) [V__1=1] 
* Loop 30: eval_strtol_bb12_in(V__1,B) [V__1+1=0] 
* Loop 31: eval_strtol_bb12_in(V__1,B) [V__1>=2] 
* Loop 32: eval_strtol_bb12_in(V__1,B) [0>=V__1+2] 
* Loop 33: eval_strtol_bb12_in(V__1,B) [V__1=1] 
* Loop 34: eval_strtol_bb12_in(V__1,B) [V__1+1=0] 

### Ranking functions of CR eval_strtol_bb12_in(V__1,B) 

#### Partial ranking functions of CR eval_strtol_bb12_in(V__1,B) 


### Resulting Chains:eval_strtol_bb12_in(V__1,B) 
* [34]
* [33]
* [32]
* [31]
* [30]...
* [29]...
* [28]...
* [27]...


### Merging Chains  eval_strtol_bb12_in/2 into  External patterns of execution 
* [[34]] --> 1 
* [[33]] --> 2 
* [[32]] --> 3 
* [[31]] --> 4 
* [[30]] --> 5 
* [[29]] --> 6 
* [[28]] --> 7 
* [[27]] --> 8 


### Specialization of cost equations eval_strtol_bb10_in/2 
* CE 13 is refined into CE [40,41] 
* CE 14 is refined into CE [42,43] 
* CE 15 is refined into CE [44,45,46,47,48,49,50,51] 


#### Refined cost equations eval_strtol_bb10_in/2 
* CE 40: eval_strtol_bb10_in(V__0,B) = 0+ eval_strtol_bb12_in(C,B):4
     [C=8] 
* CE 41: eval_strtol_bb10_in(V__0,B) = 0+ eval_strtol_bb12_in(C,B):8
     [C=8] 
* CE 42: eval_strtol_bb10_in(V__0,B) = 0+ eval_strtol_bb12_in(C,B):4
     [C=10] 
* CE 43: eval_strtol_bb10_in(V__0,B) = 0+ eval_strtol_bb12_in(C,B):8
     [C=10] 
* CE 44: eval_strtol_bb10_in(V__0,B) = 0+ eval_strtol_bb12_in(C,B):1
     [C+1=0,V__0+1=0] 
* CE 45: eval_strtol_bb10_in(V__0,B) = 0+ eval_strtol_bb12_in(C,B):2
     [C=1,V__0=1] 
* CE 46: eval_strtol_bb10_in(V__0,B) = 0+ eval_strtol_bb12_in(V__0,B):3
     [0>=V__0+2] 
* CE 47: eval_strtol_bb10_in(V__0,B) = 0+ eval_strtol_bb12_in(V__0,B):4
     [V__0>=2] 
* CE 48: eval_strtol_bb10_in(V__0,B) = 0+ eval_strtol_bb12_in(C,B):5
     [C+1=0,V__0+1=0] 
* CE 49: eval_strtol_bb10_in(V__0,B) = 0+ eval_strtol_bb12_in(C,B):6
     [C=1,V__0=1] 
* CE 50: eval_strtol_bb10_in(V__0,B) = 0+ eval_strtol_bb12_in(V__0,B):7
     [0>=V__0+2] 
* CE 51: eval_strtol_bb10_in(V__0,B) = 0+ eval_strtol_bb12_in(V__0,B):8
     [V__0>=2] 

### Cost equations --> "Loop" of eval_strtol_bb10_in/2 
* CEs [41,43,48,49,50,51] --> Loop 35 
* CEs [40,42,44,45,46,47] --> Loop 36 

#### Loops of eval_strtol_bb10_in/2 
* Loop 35: eval_strtol_bb10_in(V__0,B) [] 
* Loop 36: eval_strtol_bb10_in(V__0,B) [] 

### Ranking functions of CR eval_strtol_bb10_in(V__0,B) 

#### Partial ranking functions of CR eval_strtol_bb10_in(V__0,B) 


### Resulting Chains:eval_strtol_bb10_in(V__0,B) 
* [36]
* [35]...


### Merging Chains  eval_strtol_bb10_in/2 into  External patterns of execution 
* [[36]] --> 1 
* [[35]] --> 2 


### Specialization of cost equations eval_strtol_bb6_in/2 
* CE 11 is refined into CE [52,53] 
* CE 12 is refined into CE [54,55] 


#### Refined cost equations eval_strtol_bb6_in/2 
* CE 52: eval_strtol_bb6_in(V_base,B) = 0+ eval_strtol_bb10_in(C,B):1
     [C=16] 
* CE 53: eval_strtol_bb6_in(V_base,B) = 0+ eval_strtol_bb10_in(C,B):2
     [C=16] 
* CE 54: eval_strtol_bb6_in(V_base,B) = 0+ eval_strtol_bb10_in(V_base,B):1
     [] 
* CE 55: eval_strtol_bb6_in(V_base,B) = 0+ eval_strtol_bb10_in(V_base,B):2
     [] 

### Cost equations --> "Loop" of eval_strtol_bb6_in/2 
* CEs [53,55] --> Loop 37 
* CEs [52,54] --> Loop 38 

#### Loops of eval_strtol_bb6_in/2 
* Loop 37: eval_strtol_bb6_in(V_base,B) [] 
* Loop 38: eval_strtol_bb6_in(V_base,B) [] 

### Ranking functions of CR eval_strtol_bb6_in(V_base,B) 

#### Partial ranking functions of CR eval_strtol_bb6_in(V_base,B) 


### Resulting Chains:eval_strtol_bb6_in(V_base,B) 
* [38]
* [37]...


### Merging Chains  eval_strtol_bb6_in/2 into  External patterns of execution 
* [[38]] --> 1 
* [[37]] --> 2 


### Specialization of cost equations eval_strtol_bb5_in/2 
* CE 9 is refined into CE [56,57] 
* CE 10 is refined into CE [58,59] 


#### Refined cost equations eval_strtol_bb5_in/2 
* CE 56: eval_strtol_bb5_in(V_base,B) = 0+ eval_strtol_bb6_in(V_base,B):1
     [] 
* CE 57: eval_strtol_bb5_in(V_base,B) = 0+ eval_strtol_bb6_in(V_base,B):2
     [] 
* CE 58: eval_strtol_bb5_in(V_base,B) = 0+ eval_strtol_bb10_in(V_base,B):1
     [] 
* CE 59: eval_strtol_bb5_in(V_base,B) = 0+ eval_strtol_bb10_in(V_base,B):2
     [] 

### Cost equations --> "Loop" of eval_strtol_bb5_in/2 
* CEs [57,59] --> Loop 39 
* CEs [56,58] --> Loop 40 

#### Loops of eval_strtol_bb5_in/2 
* Loop 39: eval_strtol_bb5_in(V_base,B) [] 
* Loop 40: eval_strtol_bb5_in(V_base,B) [] 

### Ranking functions of CR eval_strtol_bb5_in(V_base,B) 

#### Partial ranking functions of CR eval_strtol_bb5_in(V_base,B) 


### Resulting Chains:eval_strtol_bb5_in(V_base,B) 
* [40]
* [39]...


### Merging Chains  eval_strtol_bb5_in/2 into  External patterns of execution 
* [[40]] --> 1 
* [[39]] --> 2 


### Specialization of cost equations loop_cont_eval_strtol_bb1_in/3 
* CE 8 is refined into CE [60,61] 
* CE 7 is refined into CE [62,63] 


#### Refined cost equations loop_cont_eval_strtol_bb1_in/3 
* CE 60: loop_cont_eval_strtol_bb1_in(C,A,B) = 0+ eval_strtol_bb5_in(A,B):1
     [C=3] 
* CE 61: loop_cont_eval_strtol_bb1_in(C,A,B) = 0+ eval_strtol_bb5_in(A,B):2
     [C=3] 
* CE 62: loop_cont_eval_strtol_bb1_in(C,A,B) = 0+ eval_strtol_bb5_in(A,B):1
     [C=2] 
* CE 63: loop_cont_eval_strtol_bb1_in(C,A,B) = 0+ eval_strtol_bb5_in(A,B):2
     [C=2] 

### Cost equations --> "Loop" of loop_cont_eval_strtol_bb1_in/3 
* CEs [61] --> Loop 41 
* CEs [63] --> Loop 42 
* CEs [60] --> Loop 43 
* CEs [62] --> Loop 44 

#### Loops of loop_cont_eval_strtol_bb1_in/3 
* Loop 41: loop_cont_eval_strtol_bb1_in(C,A,B) [C=3] 
* Loop 42: loop_cont_eval_strtol_bb1_in(C,A,B) [C=2] 
* Loop 43: loop_cont_eval_strtol_bb1_in(C,A,B) [C=3] 
* Loop 44: loop_cont_eval_strtol_bb1_in(C,A,B) [C=2] 

### Ranking functions of CR loop_cont_eval_strtol_bb1_in(C,A,B) 

#### Partial ranking functions of CR loop_cont_eval_strtol_bb1_in(C,A,B) 


### Resulting Chains:loop_cont_eval_strtol_bb1_in(C,A,B) 
* [44]
* [43]
* [42]...
* [41]...


### Merging Chains  loop_cont_eval_strtol_bb1_in/3 into  External patterns of execution 
* [[44]] --> 1 
* [[43]] --> 2 
* [[42]] --> 3 
* [[41]] --> 4 


### Specialization of cost equations eval_strtol_1/2 
* CE 3 is refined into CE [64,65,66,67,68] 


#### Refined cost equations eval_strtol_1/2 
* CE 64: eval_strtol_1(V_base,B) = 1+ eval_strtol_bb1_in(V_base,C,V_base):1+ loop_cont_eval_strtol_bb1_in(D,V_base,B):1
     [D=2,C=2] 
* CE 65: eval_strtol_1(V_base,B) = 1+ eval_strtol_bb1_in(V_base,C,V_base):1+ loop_cont_eval_strtol_bb1_in(D,V_base,B):3
     [D=2,C=2] 
* CE 66: eval_strtol_1(V_base,B) = 1+ eval_strtol_bb1_in(V_base,C,V_base):2+ loop_cont_eval_strtol_bb1_in(D,V_base,B):2
     [D=3,C=3] 
* CE 67: eval_strtol_1(V_base,B) = 1+ eval_strtol_bb1_in(V_base,C,V_base):2+ loop_cont_eval_strtol_bb1_in(D,V_base,B):4
     [D=3,C=3] 
* CE 68: eval_strtol_1(V_base,B) = 1+ eval_strtol_bb1_in(V_base,C,D):3
     [] 

### Cost equations --> "Loop" of eval_strtol_1/2 
* CEs [65,67,68] --> Loop 45 
* CEs [64,66] --> Loop 46 

#### Loops of eval_strtol_1/2 
* Loop 45: eval_strtol_1(V_base,B) [] 
* Loop 46: eval_strtol_1(V_base,B) [] 

### Ranking functions of CR eval_strtol_1(V_base,B) 

#### Partial ranking functions of CR eval_strtol_1(V_base,B) 


### Resulting Chains:eval_strtol_1(V_base,B) 
* [46]
* [45]...


### Merging Chains  eval_strtol_1/2 into  External patterns of execution 
* [[46]] --> 1 
* [[45]] --> 2 


### Specialization of cost equations eval_strtol_start/2 
* CE 2 is refined into CE [69,70] 


#### Refined cost equations eval_strtol_start/2 
* CE 69: eval_strtol_start(V_base,B) = 0+ eval_strtol_1(V_base,B):1
     [] 
* CE 70: eval_strtol_start(V_base,B) = 0+ eval_strtol_1(V_base,B):2
     [] 

### Cost equations --> "Loop" of eval_strtol_start/2 
* CEs [70] --> Loop 47 
* CEs [69] --> Loop 48 

#### Loops of eval_strtol_start/2 
* Loop 47: eval_strtol_start(V_base,B) [] 
* Loop 48: eval_strtol_start(V_base,B) [] 

### Ranking functions of CR eval_strtol_start(V_base,B) 

#### Partial ranking functions of CR eval_strtol_start(V_base,B) 


### Resulting Chains:eval_strtol_start(V_base,B) 
* [48]
* [47]...


### Merging Chains  eval_strtol_start/2 into  External patterns of execution 
* [[48]] --> 1 
* [[47]] --> 2 


Computing Bounds
=====================================

#### Cost of loops [19] 

 * loop 19:eval_strtol_bb1_in(V_base,B,C) -> [eval_strtol_bb1_in(V_base',B',C')] 
1
#### Cost of phase [19]:eval_strtol_bb1_in(V_base,B,C) -> [eval_strtol_bb1_in(V_base',B',C')] 
1*it(19)+0
#### Cost of phase [19]:eval_strtol_bb1_in(V_base,B,C) -> [eval_strtol_bb1_in(V_base',B',C')] 
1*it(19)+0
#### Cost of phase [19]:eval_strtol_bb1_in(V_base,B,C) -> [eval_strtol_bb1_in(V_base',B',C')] 
1*it(19)+0
#### Cost of chains of eval_strtol_bb1_in(V_base,B,C):
* Chain [[19]]...: 1*it(19)+0
  with precondition: [] 

* Chain [[19],21]: 1*it(19)+0
  with precondition: [B=2,V_base=C] 

* Chain [[19],20]: 1*it(19)+0
  with precondition: [B=3,V_base=C] 

* Chain [21]: 0
  with precondition: [B=2,C=V_base] 

* Chain [20]: 0
  with precondition: [B=3,C=V_base] 


#### Cost of loops [23] 

 * loop 23:eval_strtol_bb13_in(B) -> [eval_strtol_bb13_in(B')] 
1
#### Cost of phase [23]:eval_strtol_bb13_in(B) -> [eval_strtol_bb13_in(B')] 
1*it(23)+0
#### Cost of phase [23]:eval_strtol_bb13_in(B) -> [eval_strtol_bb13_in(B')] 
1*it(23)+0
#### Cost of chains of eval_strtol_bb13_in(B):
* Chain [[23]]...: 1*it(23)+0
  with precondition: [B=4] 

* Chain [[23],22]: 1*it(23)+0
  with precondition: [B=4] 

* Chain [22]: 0
  with precondition: [B=4] 


#### Cost of chains of eval_strtol_bb22_in(B):
* Chain [24]: 0
  with precondition: [] 


#### Cost of chains of eval_strtol_36(B):
* Chain [26]: 1*s(4)+1
  with precondition: [] 

* Chain [25]...: 1*s(5)+1
  with precondition: [] 


#### Cost of chains of eval_strtol_bb12_in(V__1,B):
* Chain [34]: 1*s(6)+1
  with precondition: [V__1+1=0] 

* Chain [33]: 1*s(7)+1
  with precondition: [V__1=1] 

* Chain [32]: 1*s(8)+1
  with precondition: [0>=V__1+2] 

* Chain [31]: 1*s(9)+1
  with precondition: [V__1>=2] 

* Chain [30]...: 1*s(10)+1
  with precondition: [V__1+1=0] 

* Chain [29]...: 1*s(11)+1
  with precondition: [V__1=1] 

* Chain [28]...: 1*s(12)+1
  with precondition: [0>=V__1+2] 

* Chain [27]...: 1*s(13)+1
  with precondition: [V__1>=2] 


#### Cost of chains of eval_strtol_bb10_in(V__0,B):
* Chain [36]: 1*aux(4)+0
  with precondition: [] 

* Chain [35]...: 1*aux(5)+0
  with precondition: [] 


#### Cost of chains of eval_strtol_bb6_in(V_base,B):
* Chain [38]: 1*aux(6)+0
  with precondition: [] 

* Chain [37]...: 1*aux(7)+0
  with precondition: [] 


#### Cost of chains of eval_strtol_bb5_in(V_base,B):
* Chain [40]: 1*aux(8)+0
  with precondition: [] 

* Chain [39]...: 1*aux(9)+0
  with precondition: [] 


#### Cost of chains of loop_cont_eval_strtol_bb1_in(C,A,B):
* Chain [44]: 1*s(34)+0
  with precondition: [C=2] 

* Chain [43]: 1*s(35)+0
  with precondition: [C=3] 

* Chain [42]...: 1*s(36)+0
  with precondition: [C=2] 

* Chain [41]...: 1*s(37)+0
  with precondition: [C=3] 


#### Cost of chains of eval_strtol_1(V_base,B):
* Chain [46]: 1*aux(10)+0
  with precondition: [] 

* Chain [45]...: 1*aux(11)+0
  with precondition: [] 


#### Cost of chains of eval_strtol_start(V_base,B):
* Chain [48]: 1*s(47)+0
  with precondition: [] 

* Chain [47]...: 1*s(48)+0
  with precondition: [] 


Closed-form bounds of eval_strtol_start(V_base,B): 
-------------------------------------
* Chain [48] with precondition: [] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [47]... with precondition: [] 
    - Upper bound: inf 
    - Complexity: infinity 

### Maximum cost of eval_strtol_start(V_base,B): inf 
Asymptotic class: infinity 

Time statistics: 
-------------------------------------
* Partial evaluation computed in 19 ms.
* Invariants computed in 8 ms.
   - Backward Invariants 4 ms.
   - Transitive Invariants 1 ms.
* Refinement performed in 35 ms.
* Termination proved in 1 ms.
* Upper bounds computed in 23 ms.
   - Equation cost structures 14 ms.
   - Phase cost structures 2 ms.
   - Chain cost structures 4 ms.
   - Solving cost expressions 0 ms.
* Total analysis performed in 116 ms.


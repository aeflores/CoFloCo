Warning: Ignored call to eval_encode_one_block_stop/1 in equation eval_encode_one_block_bb26_in/1 

Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. recursive  : [eval_encode_one_block_bb3_in/8]
1. non_recursive  : [eval_encode_one_block_bb26_in/1]
2. recursive  : [eval_encode_one_block_30/12,eval_encode_one_block_31/12,eval_encode_one_block_bb12_in/10]
3. recursive  : [eval_encode_one_block_bb18_in/15]
4. recursive  : [eval_encode_one_block_48/11,eval_encode_one_block_49/11,eval_encode_one_block_50/11,eval_encode_one_block_51/11,eval_encode_one_block_bb17_in/8,eval_encode_one_block_bb22_in/7,eval_encode_one_block_bb9_in/5,loop_cont_eval_encode_one_block_bb12_in/9,loop_cont_eval_encode_one_block_bb18_in/12]
5. non_recursive  : [eval_encode_one_block_bb25_in/1]
6. non_recursive  : [eval_encode_one_block_58/1]
7. non_recursive  : [eval_encode_one_block_57/3]
8. non_recursive  : [loop_cont_eval_encode_one_block_bb9_in/4]
9. non_recursive  : [eval_encode_one_block_bb8_in/1]
10. non_recursive  : [eval_encode_one_block_18/1]
11. non_recursive  : [eval_encode_one_block_17/3]
12. non_recursive  : [eval_encode_one_block_16/3]
13. non_recursive  : [eval_encode_one_block_15/5]
14. non_recursive  : [loop_cont_eval_encode_one_block_bb3_in/6]
15. non_recursive  : [eval_encode_one_block_bb2_in/3]
16. non_recursive  : [eval_encode_one_block_bb0_in/2]
17. non_recursive  : [eval_encode_one_block_start/2]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into eval_encode_one_block_bb3_in/8
1. SCC is completely evaluated into other SCCs
2. SCC is partially evaluated into eval_encode_one_block_bb12_in/10
3. SCC is partially evaluated into eval_encode_one_block_bb18_in/15
4. SCC is partially evaluated into eval_encode_one_block_bb9_in/5
5. SCC is completely evaluated into other SCCs
6. SCC is partially evaluated into eval_encode_one_block_58/1
7. SCC is completely evaluated into other SCCs
8. SCC is partially evaluated into loop_cont_eval_encode_one_block_bb9_in/4
9. SCC is partially evaluated into eval_encode_one_block_bb8_in/1
10. SCC is partially evaluated into eval_encode_one_block_18/1
11. SCC is completely evaluated into other SCCs
12. SCC is partially evaluated into eval_encode_one_block_16/3
13. SCC is completely evaluated into other SCCs
14. SCC is completely evaluated into other SCCs
15. SCC is partially evaluated into eval_encode_one_block_bb2_in/3
16. SCC is partially evaluated into eval_encode_one_block_bb0_in/2
17. SCC is partially evaluated into eval_encode_one_block_start/2

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations eval_encode_one_block_bb3_in/8 
* CE 8 is refined into CE [31] 
* CE 7 is refined into CE [32] 
* CE 6 is refined into CE [33] 


#### Refined cost equations eval_encode_one_block_bb3_in/8 
* CE 31: eval_encode_one_block_bb3_in(A,B,C,D,A,B,E,F) = 0
     [B>=0,D=7,C=0] 
* CE 32: eval_encode_one_block_bb3_in(V_temp2_0,V_nbits_0,V_temp_1,B,C,D,E,F) = 1+ eval_encode_one_block_bb3_in(V_temp2_0,G,H,I,C,D,E,F)
     [V_temp_1>=1,V_nbits_0>=0,V_nbits_0+1=G,I=7,B=7] 
* CE 33: eval_encode_one_block_bb3_in(V_temp2_0,V_nbits_0,V_temp_1,B,C,D,E,F) = 1+ eval_encode_one_block_bb3_in(V_temp2_0,G,H,I,C,D,E,F)
     [V_nbits_0>=0,0>=V_temp_1+1,V_nbits_0+1=G,I=7,B=7] 

### Cost equations --> "Loop" of eval_encode_one_block_bb3_in/8 
* CEs [32] --> Loop 25 
* CEs [33] --> Loop 26 
* CEs [31] --> Loop 27 

#### Loops of eval_encode_one_block_bb3_in/8 
* Loop 25: eval_encode_one_block_bb3_in(V_temp2_0,V_nbits_0,V_temp_1,B,C,D,E,F)->  eval_encode_one_block_bb3_in(V_temp2_0,V_nbits_0',V_temp_1',B',C,D,E,F)
                  [V_temp_1>=1,V_nbits_0>=0,V_nbits_0+1=V_nbits_0',B'=7,B=7] 
* Loop 26: eval_encode_one_block_bb3_in(V_temp2_0,V_nbits_0,V_temp_1,B,C,D,E,F)->  eval_encode_one_block_bb3_in(V_temp2_0,V_nbits_0',V_temp_1',B',C,D,E,F)
                  [V_nbits_0>=0,0>=V_temp_1+1,V_nbits_0+1=V_nbits_0',B'=7,B=7] 
* Loop 27: eval_encode_one_block_bb3_in(A,B,C,D,A,B,E,F) [B>=0,D=7,C=0] 

### Ranking functions of CR eval_encode_one_block_bb3_in(V_temp2_0,V_nbits_0,V_temp_1,B,C,D,E,F) 

#### Partial ranking functions of CR eval_encode_one_block_bb3_in(V_temp2_0,V_nbits_0,V_temp_1,B,C,D,E,F) 


### Resulting Chains:eval_encode_one_block_bb3_in(V_temp2_0,V_nbits_0,V_temp_1,B,C,D,E,F) 
* [[25,26]]...
* [[25,26],27]
* [27]


### Merging Chains  eval_encode_one_block_bb3_in/8 into  External patterns of execution 
* [[27]] --> 1 
* [[27,[25,26]]] --> 2 
* [[[25,26]]] --> 3 


### Specialization of cost equations eval_encode_one_block_bb12_in/10 
* CE 26 is refined into CE [34] 
* CE 27 is refined into CE [35] 
* CE 24 is refined into CE [36] 
* CE 25 is refined into CE [37] 


#### Refined cost equations eval_encode_one_block_bb12_in/10 
* CE 34: eval_encode_one_block_bb12_in(A,B,C,D,E,A,B,C,D,F) = 0
     [A>=D,D>=0,15>=D,63>=B,C=F+1,E=3] 
* CE 35: eval_encode_one_block_bb12_in(A,B,C,D,E,A,B,C,D,C) = 0
     [A>=D,D>=0,15>=D,63>=B,E=3] 
* CE 36: eval_encode_one_block_bb12_in(V_r_0,V_k_0,V_35,V_r_1,B,C,D,E,F,G) = 0
     [V_r_0>=V_r_1,V_r_1>=16,63>=V_k_0,B=2] 
* CE 37: eval_encode_one_block_bb12_in(V_r_0,V_k_0,V_35,V_r_1,B,C,D,E,F,G) = 1+ eval_encode_one_block_bb12_in(V_r_0,V_k_0,V_35,H,B,C,D,E,F,G)
     [V_r_0>=V_r_1,B>=2,V_r_1>=16,3>=B,63>=V_k_0,V_r_1=H+16] 

### Cost equations --> "Loop" of eval_encode_one_block_bb12_in/10 
* CEs [37] --> Loop 28 
* CEs [34] --> Loop 29 
* CEs [35] --> Loop 30 
* CEs [36] --> Loop 31 

#### Loops of eval_encode_one_block_bb12_in/10 
* Loop 28: eval_encode_one_block_bb12_in(V_r_0,V_k_0,V_35,V_r_1,B,C,D,E,F,G)->  eval_encode_one_block_bb12_in(V_r_0,V_k_0,V_35,V_r_1',B,C,D,E,F,G)
                  [V_r_0>=V_r_1,B>=2,V_r_1>=16,3>=B,63>=V_k_0,V_r_1=V_r_1'+16] 
* Loop 29: eval_encode_one_block_bb12_in(A,B,C,D,E,A,B,C,D,F) [A>=D,D>=0,15>=D,63>=B,C=F+1,E=3] 
* Loop 30: eval_encode_one_block_bb12_in(A,B,C,D,E,A,B,C,D,C) [A>=D,D>=0,15>=D,63>=B,E=3] 
* Loop 31: eval_encode_one_block_bb12_in(V_r_0,V_k_0,V_35,V_r_1,B,C,D,E,F,G) [V_r_0>=V_r_1,V_r_1>=16,63>=V_k_0,B=2] 

### Ranking functions of CR eval_encode_one_block_bb12_in(V_r_0,V_k_0,V_35,V_r_1,B,C,D,E,F,G) 
* RF of phase [28]: [V_r_1/16-15/16]

#### Partial ranking functions of CR eval_encode_one_block_bb12_in(V_r_0,V_k_0,V_35,V_r_1,B,C,D,E,F,G) 
* Partial RF of phase [28]:
  - RF of loop [28:1]:
    V_r_1/16-15/16


### Resulting Chains:eval_encode_one_block_bb12_in(V_r_0,V_k_0,V_35,V_r_1,B,C,D,E,F,G) 
* [[28],31]
* [[28],30]
* [[28],29]
* [31]
* [30]
* [29]


### Merging Chains  eval_encode_one_block_bb12_in/10 into  External patterns of execution 
* [[31],[31,[28]]] --> 1 
* [[30]] --> 2 
* [[29]] --> 3 
* [[30,[28]]] --> 4 
* [[29,[28]]] --> 5 


### Specialization of cost equations eval_encode_one_block_bb18_in/15 
* CE 29 is refined into CE [38] 
* CE 28 is refined into CE [39] 


#### Refined cost equations eval_encode_one_block_bb18_in/15 
* CE 38: eval_encode_one_block_bb18_in(A,B,C,D,E,F,G,A,B,C,D,E,F,H,I) = 0
     [F>=1,G=4] 
* CE 39: eval_encode_one_block_bb18_in(V_r_0,V_k_0,V_35,V_r_1,V_temp2_1,V_nbits_1,B,C,D,E,F,G,H,I,J) = 1+ eval_encode_one_block_bb18_in(V_r_0,V_k_0,V_35,V_r_1,V_temp2_1,K,L,C,D,E,F,G,H,I,J)
     [V_nbits_1>=1,V_nbits_1+1=K,L=4,B=4] 

### Cost equations --> "Loop" of eval_encode_one_block_bb18_in/15 
* CEs [39] --> Loop 32 
* CEs [38] --> Loop 33 

#### Loops of eval_encode_one_block_bb18_in/15 
* Loop 32: eval_encode_one_block_bb18_in(V_r_0,V_k_0,V_35,V_r_1,V_temp2_1,V_nbits_1,B,C,D,E,F,G,H,I,J)->  eval_encode_one_block_bb18_in(V_r_0,V_k_0,V_35,V_r_1,V_temp2_1,V_nbits_1',B',C,D,E,F,G,H,I,J)
                  [V_nbits_1>=1,V_nbits_1+1=V_nbits_1',B'=4,B=4] 
* Loop 33: eval_encode_one_block_bb18_in(A,B,C,D,E,F,G,A,B,C,D,E,F,H,I) [F>=1,G=4] 

### Ranking functions of CR eval_encode_one_block_bb18_in(V_r_0,V_k_0,V_35,V_r_1,V_temp2_1,V_nbits_1,B,C,D,E,F,G,H,I,J) 

#### Partial ranking functions of CR eval_encode_one_block_bb18_in(V_r_0,V_k_0,V_35,V_r_1,V_temp2_1,V_nbits_1,B,C,D,E,F,G,H,I,J) 


### Resulting Chains:eval_encode_one_block_bb18_in(V_r_0,V_k_0,V_35,V_r_1,V_temp2_1,V_nbits_1,B,C,D,E,F,G,H,I,J) 
* [[32]]...
* [[32],33]
* [33]


### Merging Chains  eval_encode_one_block_bb18_in/15 into  External patterns of execution 
* [[33]] --> 1 
* [[33,[32]]] --> 2 
* [[[32]]] --> 3 


### Specialization of cost equations eval_encode_one_block_bb9_in/5 
* CE 20 is refined into CE [40] 
* CE 19 is refined into CE [41] 
* CE 15 is refined into CE [42,43,44,45,46,47,48,49,50,51,52,53] 
* CE 17 is refined into CE [54] 
* CE 18 is refined into CE [55] 
* CE 16 is refined into CE [56,57,58,59,60,61,62,63,64,65,66,67] 


#### Refined cost equations eval_encode_one_block_bb9_in/5 
* CE 40: eval_encode_one_block_bb9_in(V_r_0,V_k_0,B,C,D) = 0
     [V_k_0>=64,V_r_0>=0,B=6] 
* CE 41: eval_encode_one_block_bb9_in(V_r_0,V_k_0,B,C,D) = 0
     [V_k_0>=64,V_r_0>=0,B=5] 
* CE 42: eval_encode_one_block_bb9_in(V_r_0,V_k_0,B,C,D) = 2+ eval_encode_one_block_bb12_in(V_r_0,V_k_0,E,V_r_0,F,V_r_0,V_k_0,E,V_r_0,E):2+ eval_encode_one_block_bb18_in(V_r_0,V_k_0,E,V_r_0,E,G,H,V_r_0,V_k_0,E,V_r_0,E,I,J,K):1
     [V_r_0>=0,63>=V_k_0,15>=V_r_0,I=1,H=4,G=1,F=3,B=2] 
* CE 43: eval_encode_one_block_bb9_in(V_r_0,V_k_0,B,C,D) = 2+ eval_encode_one_block_bb12_in(V_r_0,V_k_0,E,V_r_0,F,V_r_0,V_k_0,E,V_r_0,E):2+ eval_encode_one_block_bb18_in(V_r_0,V_k_0,E,V_r_0,E,G,H,V_r_0,V_k_0,E,V_r_0,E,I,J,K):2
     [I>=2,V_r_0>=0,63>=V_k_0,15>=V_r_0,H=4,G=1,F=3,B=2] 
* CE 44: eval_encode_one_block_bb9_in(V_r_0,V_k_0,B,C,D) = 2+ eval_encode_one_block_bb12_in(V_r_0,V_k_0,E,V_r_0,F,V_r_0,V_k_0,E,V_r_0,E):2+ eval_encode_one_block_bb18_in(V_r_0,V_k_0,E,V_r_0,E,G,H,I,J,K,L,M,N,O,P):3
     [V_r_0>=0,63>=V_k_0,15>=V_r_0,H=4,G=1,F=3,B=2] 
* CE 45: eval_encode_one_block_bb9_in(V_r_0,V_k_0,B,C,D) = 2+ eval_encode_one_block_bb12_in(V_r_0,V_k_0,E,V_r_0,F,V_r_0,V_k_0,E,V_r_0,G):3+ eval_encode_one_block_bb18_in(V_r_0,V_k_0,E,V_r_0,H,I,J,V_r_0,V_k_0,E,V_r_0,K,L,M,N):1
     [V_r_0>=0,63>=V_k_0,15>=V_r_0,E=K+1,E=H+1,E=G+1,L=1,J=4,I=1,F=3,B=2] 
* CE 46: eval_encode_one_block_bb9_in(V_r_0,V_k_0,B,C,D) = 2+ eval_encode_one_block_bb12_in(V_r_0,V_k_0,E,V_r_0,F,V_r_0,V_k_0,E,V_r_0,G):3+ eval_encode_one_block_bb18_in(V_r_0,V_k_0,E,V_r_0,H,I,J,V_r_0,V_k_0,E,V_r_0,K,L,M,N):2
     [L>=2,V_r_0>=0,63>=V_k_0,15>=V_r_0,E=K+1,E=H+1,E=G+1,J=4,I=1,F=3,B=2] 
* CE 47: eval_encode_one_block_bb9_in(V_r_0,V_k_0,B,C,D) = 2+ eval_encode_one_block_bb12_in(V_r_0,V_k_0,E,V_r_0,F,V_r_0,V_k_0,E,V_r_0,G):3+ eval_encode_one_block_bb18_in(V_r_0,V_k_0,E,V_r_0,H,I,J,K,L,M,N,O,P,Q,R):3
     [V_r_0>=0,63>=V_k_0,15>=V_r_0,E=H+1,E=G+1,J=4,I=1,F=3,B=2] 
* CE 48: eval_encode_one_block_bb9_in(V_r_0,V_k_0,B,C,D) = 2+ eval_encode_one_block_bb12_in(V_r_0,V_k_0,E,V_r_0,F,V_r_0,V_k_0,E,G,E):4+ eval_encode_one_block_bb18_in(V_r_0,V_k_0,E,G,E,H,I,V_r_0,V_k_0,E,G,E,J,K,L):1
     [V_r_0>=G+16,G>=0,15>=G,63>=V_k_0,J=1,I=4,H=1,F=3,B=2] 
* CE 49: eval_encode_one_block_bb9_in(V_r_0,V_k_0,B,C,D) = 2+ eval_encode_one_block_bb12_in(V_r_0,V_k_0,E,V_r_0,F,V_r_0,V_k_0,E,G,E):4+ eval_encode_one_block_bb18_in(V_r_0,V_k_0,E,G,E,H,I,V_r_0,V_k_0,E,G,E,J,K,L):2
     [V_r_0>=G+16,J>=2,G>=0,15>=G,63>=V_k_0,I=4,H=1,F=3,B=2] 
* CE 50: eval_encode_one_block_bb9_in(V_r_0,V_k_0,B,C,D) = 2+ eval_encode_one_block_bb12_in(V_r_0,V_k_0,E,V_r_0,F,V_r_0,V_k_0,E,G,E):4+ eval_encode_one_block_bb18_in(V_r_0,V_k_0,E,G,E,H,I,J,K,L,M,N,O,P,Q):3
     [V_r_0>=G+16,G>=0,15>=G,63>=V_k_0,I=4,H=1,F=3,B=2] 
* CE 51: eval_encode_one_block_bb9_in(V_r_0,V_k_0,B,C,D) = 2+ eval_encode_one_block_bb12_in(V_r_0,V_k_0,E,V_r_0,F,V_r_0,V_k_0,E,G,H):5+ eval_encode_one_block_bb18_in(V_r_0,V_k_0,E,G,I,J,K,V_r_0,V_k_0,E,G,L,M,N,O):1
     [V_r_0>=G+16,G>=0,15>=G,63>=V_k_0,E=L+1,E=I+1,E=H+1,M=1,K=4,J=1,F=3,B=2] 
* CE 52: eval_encode_one_block_bb9_in(V_r_0,V_k_0,B,C,D) = 2+ eval_encode_one_block_bb12_in(V_r_0,V_k_0,E,V_r_0,F,V_r_0,V_k_0,E,G,H):5+ eval_encode_one_block_bb18_in(V_r_0,V_k_0,E,G,I,J,K,V_r_0,V_k_0,E,G,L,M,N,O):2
     [V_r_0>=G+16,M>=2,G>=0,15>=G,63>=V_k_0,E=L+1,E=I+1,E=H+1,K=4,J=1,F=3,B=2] 
* CE 53: eval_encode_one_block_bb9_in(V_r_0,V_k_0,B,C,D) = 2+ eval_encode_one_block_bb12_in(V_r_0,V_k_0,E,V_r_0,F,V_r_0,V_k_0,E,G,H):5+ eval_encode_one_block_bb18_in(V_r_0,V_k_0,E,G,I,J,K,L,M,N,O,P,Q,R,S):3
     [V_r_0>=G+16,G>=0,15>=G,63>=V_k_0,E=I+1,E=H+1,K=4,J=1,F=3,B=2] 
* CE 54: eval_encode_one_block_bb9_in(V_r_0,V_k_0,B,C,D) = 1+ eval_encode_one_block_bb12_in(V_r_0,V_k_0,E,V_r_0,F,G,H,I,J,K):1
     [V_r_0>=16,63>=V_k_0,F=2,B=2] 
* CE 55: eval_encode_one_block_bb9_in(V_r_0,V_k_0,B,C,D) = 1+ eval_encode_one_block_bb9_in(E,F,B,C,D)
     [V_r_0>=0,63>=V_k_0,V_k_0+1=F,V_r_0+1=E] 
* CE 56: eval_encode_one_block_bb9_in(V_r_0,V_k_0,B,C,D) = 3+ eval_encode_one_block_bb12_in(V_r_0,V_k_0,E,V_r_0,F,V_r_0,V_k_0,E,V_r_0,E):2+ eval_encode_one_block_bb18_in(V_r_0,V_k_0,E,V_r_0,E,G,H,V_r_0,V_k_0,E,V_r_0,E,I,J,K):1+ eval_encode_one_block_bb9_in(L,M,B,C,D)
     [V_r_0>=0,63>=V_k_0,15>=V_r_0,V_k_0+1=M,L=0,I=1,H=4,G=1,F=3] 
* CE 57: eval_encode_one_block_bb9_in(V_r_0,V_k_0,B,C,D) = 3+ eval_encode_one_block_bb12_in(V_r_0,V_k_0,E,V_r_0,F,V_r_0,V_k_0,E,V_r_0,E):2+ eval_encode_one_block_bb18_in(V_r_0,V_k_0,E,V_r_0,E,G,H,V_r_0,V_k_0,E,V_r_0,E,I,J,K):2+ eval_encode_one_block_bb9_in(L,M,B,C,D)
     [I>=2,V_r_0>=0,63>=V_k_0,15>=V_r_0,V_k_0+1=M,L=0,H=4,G=1,F=3] 
* CE 58: eval_encode_one_block_bb9_in(V_r_0,V_k_0,B,C,D) = 3+ eval_encode_one_block_bb12_in(V_r_0,V_k_0,E,V_r_0,F,V_r_0,V_k_0,E,V_r_0,E):2+ eval_encode_one_block_bb18_in(V_r_0,V_k_0,E,V_r_0,E,G,H,I,J,K,L,M,N,O,P):3
     [V_r_0>=0,63>=V_k_0,15>=V_r_0,Q=J+1,R=0,H=4,G=1,F=3] 
* CE 59: eval_encode_one_block_bb9_in(V_r_0,V_k_0,B,C,D) = 3+ eval_encode_one_block_bb12_in(V_r_0,V_k_0,E,V_r_0,F,V_r_0,V_k_0,E,V_r_0,G):3+ eval_encode_one_block_bb18_in(V_r_0,V_k_0,E,V_r_0,H,I,J,V_r_0,V_k_0,E,V_r_0,K,L,M,N):1+ eval_encode_one_block_bb9_in(O,P,B,C,D)
     [V_r_0>=0,63>=V_k_0,15>=V_r_0,V_k_0+1=P,E=K+1,E=H+1,E=G+1,O=0,L=1,J=4,I=1,F=3] 
* CE 60: eval_encode_one_block_bb9_in(V_r_0,V_k_0,B,C,D) = 3+ eval_encode_one_block_bb12_in(V_r_0,V_k_0,E,V_r_0,F,V_r_0,V_k_0,E,V_r_0,G):3+ eval_encode_one_block_bb18_in(V_r_0,V_k_0,E,V_r_0,H,I,J,V_r_0,V_k_0,E,V_r_0,K,L,M,N):2+ eval_encode_one_block_bb9_in(O,P,B,C,D)
     [L>=2,V_r_0>=0,63>=V_k_0,15>=V_r_0,V_k_0+1=P,E=K+1,E=H+1,E=G+1,O=0,J=4,I=1,F=3] 
* CE 61: eval_encode_one_block_bb9_in(V_r_0,V_k_0,B,C,D) = 3+ eval_encode_one_block_bb12_in(V_r_0,V_k_0,E,V_r_0,F,V_r_0,V_k_0,E,V_r_0,G):3+ eval_encode_one_block_bb18_in(V_r_0,V_k_0,E,V_r_0,H,I,J,K,L,M,N,O,P,Q,R):3
     [V_r_0>=0,63>=V_k_0,15>=V_r_0,S=L+1,E=H+1,E=G+1,T=0,J=4,I=1,F=3] 
* CE 62: eval_encode_one_block_bb9_in(V_r_0,V_k_0,B,C,D) = 3+ eval_encode_one_block_bb12_in(V_r_0,V_k_0,E,V_r_0,F,V_r_0,V_k_0,E,G,E):4+ eval_encode_one_block_bb18_in(V_r_0,V_k_0,E,G,E,H,I,V_r_0,V_k_0,E,G,E,J,K,L):1+ eval_encode_one_block_bb9_in(M,N,B,C,D)
     [V_r_0>=G+16,G>=0,15>=G,63>=V_k_0,V_k_0+1=N,M=0,J=1,I=4,H=1,F=3] 
* CE 63: eval_encode_one_block_bb9_in(V_r_0,V_k_0,B,C,D) = 3+ eval_encode_one_block_bb12_in(V_r_0,V_k_0,E,V_r_0,F,V_r_0,V_k_0,E,G,E):4+ eval_encode_one_block_bb18_in(V_r_0,V_k_0,E,G,E,H,I,V_r_0,V_k_0,E,G,E,J,K,L):2+ eval_encode_one_block_bb9_in(M,N,B,C,D)
     [V_r_0>=G+16,J>=2,G>=0,15>=G,63>=V_k_0,V_k_0+1=N,M=0,I=4,H=1,F=3] 
* CE 64: eval_encode_one_block_bb9_in(V_r_0,V_k_0,B,C,D) = 3+ eval_encode_one_block_bb12_in(V_r_0,V_k_0,E,V_r_0,F,V_r_0,V_k_0,E,G,E):4+ eval_encode_one_block_bb18_in(V_r_0,V_k_0,E,G,E,H,I,J,K,L,M,N,O,P,Q):3
     [V_r_0>=G+16,G>=0,15>=G,63>=V_k_0,R=K+1,S=0,I=4,H=1,F=3] 
* CE 65: eval_encode_one_block_bb9_in(V_r_0,V_k_0,B,C,D) = 3+ eval_encode_one_block_bb12_in(V_r_0,V_k_0,E,V_r_0,F,V_r_0,V_k_0,E,G,H):5+ eval_encode_one_block_bb18_in(V_r_0,V_k_0,E,G,I,J,K,V_r_0,V_k_0,E,G,L,M,N,O):1+ eval_encode_one_block_bb9_in(P,Q,B,C,D)
     [V_r_0>=G+16,G>=0,15>=G,63>=V_k_0,V_k_0+1=Q,E=L+1,E=I+1,E=H+1,P=0,M=1,K=4,J=1,F=3] 
* CE 66: eval_encode_one_block_bb9_in(V_r_0,V_k_0,B,C,D) = 3+ eval_encode_one_block_bb12_in(V_r_0,V_k_0,E,V_r_0,F,V_r_0,V_k_0,E,G,H):5+ eval_encode_one_block_bb18_in(V_r_0,V_k_0,E,G,I,J,K,V_r_0,V_k_0,E,G,L,M,N,O):2+ eval_encode_one_block_bb9_in(P,Q,B,C,D)
     [V_r_0>=G+16,M>=2,G>=0,15>=G,63>=V_k_0,V_k_0+1=Q,E=L+1,E=I+1,E=H+1,P=0,K=4,J=1,F=3] 
* CE 67: eval_encode_one_block_bb9_in(V_r_0,V_k_0,B,C,D) = 3+ eval_encode_one_block_bb12_in(V_r_0,V_k_0,E,V_r_0,F,V_r_0,V_k_0,E,G,H):5+ eval_encode_one_block_bb18_in(V_r_0,V_k_0,E,G,I,J,K,L,M,N,O,P,Q,R,S):3
     [V_r_0>=G+16,G>=0,15>=G,63>=V_k_0,T=M+1,E=I+1,E=H+1,U=0,K=4,J=1,F=3] 

### Cost equations --> "Loop" of eval_encode_one_block_bb9_in/5 
* CEs [50,53,64,67] --> Loop 34 
* CEs [44,47,58,61] --> Loop 35 
* CEs [55] --> Loop 36 
* CEs [62,63,65,66] --> Loop 37 
* CEs [56,57,59,60] --> Loop 38 
* CEs [40] --> Loop 39 
* CEs [41] --> Loop 40 
* CEs [48,49,51,52,54] --> Loop 41 
* CEs [42,43,45,46] --> Loop 42 

#### Loops of eval_encode_one_block_bb9_in/5 
* Loop 34: eval_encode_one_block_bb9_in(V_r_0,V_k_0,B,C,D) [V_r_0>=16,63>=V_k_0] 
* Loop 35: eval_encode_one_block_bb9_in(V_r_0,V_k_0,B,C,D) [V_r_0>=0,63>=V_k_0,15>=V_r_0] 
* Loop 36: eval_encode_one_block_bb9_in(V_r_0,V_k_0,B,C,D)->  eval_encode_one_block_bb9_in(V_r_0',V_k_0',B,C,D)
                  [V_r_0>=0,63>=V_k_0,V_k_0+1=V_k_0',V_r_0+1=V_r_0'] 
* Loop 37: eval_encode_one_block_bb9_in(V_r_0,V_k_0,B,C,D)->  eval_encode_one_block_bb9_in(V_r_0',V_k_0',B,C,D)
                  [V_r_0>=16,63>=V_k_0,V_k_0+1=V_k_0',V_r_0'=0] 
* Loop 38: eval_encode_one_block_bb9_in(V_r_0,V_k_0,B,C,D)->  eval_encode_one_block_bb9_in(V_r_0',V_k_0',B,C,D)
                  [V_r_0>=0,63>=V_k_0,15>=V_r_0,V_k_0+1=V_k_0',V_r_0'=0] 
* Loop 39: eval_encode_one_block_bb9_in(V_r_0,V_k_0,B,C,D) [V_k_0>=64,V_r_0>=0,B=6] 
* Loop 40: eval_encode_one_block_bb9_in(V_r_0,V_k_0,B,C,D) [V_k_0>=64,V_r_0>=0,B=5] 
* Loop 41: eval_encode_one_block_bb9_in(V_r_0,V_k_0,B,C,D) [V_r_0>=16,63>=V_k_0,B=2] 
* Loop 42: eval_encode_one_block_bb9_in(V_r_0,V_k_0,B,C,D) [V_r_0>=0,63>=V_k_0,15>=V_r_0,B=2] 

### Ranking functions of CR eval_encode_one_block_bb9_in(V_r_0,V_k_0,B,C,D) 
* RF of phase [36,37,38]: [-V_k_0+64]

#### Partial ranking functions of CR eval_encode_one_block_bb9_in(V_r_0,V_k_0,B,C,D) 
* Partial RF of phase [36,37,38]:
  - RF of loop [36:1]:
    -V_r_0+63 depends on loops [37:1,38:1] 
  - RF of loop [36:1,37:1,38:1]:
    -V_k_0+64
  - RF of loop [37:1]:
    V_r_0/16-15/16 depends on loops [36:1] 


### Resulting Chains:eval_encode_one_block_bb9_in(V_r_0,V_k_0,B,C,D) 
* [[36,37,38],42]
* [[36,37,38],41]
* [[36,37,38],40]
* [[36,37,38],39]
* [[36,37,38],35]...
* [[36,37,38],34]...
* [42]
* [35]...


### Merging Chains  eval_encode_one_block_bb9_in/5 into  External patterns of execution 
* [[42]] --> 1 
* [[41,[36,37,38]],[42,[36,37,38]]] --> 2 
* [[40,[36,37,38]]] --> 3 
* [[39,[36,37,38]]] --> 4 
* [[35]] --> 5 
* [[35,[36,37,38]]] --> 6 
* [[34,[36,37,38]]] --> 7 


### Specialization of cost equations eval_encode_one_block_58/1 
* CE 30 is refined into CE [68] 


#### Refined cost equations eval_encode_one_block_58/1 
* CE 68: eval_encode_one_block_58(B) = 0
     [] 

### Cost equations --> "Loop" of eval_encode_one_block_58/1 
* CEs [68] --> Loop 43 

#### Loops of eval_encode_one_block_58/1 
* Loop 43: eval_encode_one_block_58(B) [] 

### Ranking functions of CR eval_encode_one_block_58(B) 

#### Partial ranking functions of CR eval_encode_one_block_58(B) 


### Resulting Chains:eval_encode_one_block_58(B) 
* [43]


### Merging Chains  eval_encode_one_block_58/1 into  External patterns of execution 
* [[43]] --> 1 


### Specialization of cost equations loop_cont_eval_encode_one_block_bb9_in/4 
* CE 23 is refined into CE [69] 
* CE 22 is refined into CE [70] 
* CE 21 is refined into CE [71] 


#### Refined cost equations loop_cont_eval_encode_one_block_bb9_in/4 
* CE 69: loop_cont_eval_encode_one_block_bb9_in(D,A,B,C) = 0
     [D=6] 
* CE 70: loop_cont_eval_encode_one_block_bb9_in(D,A,B,C) = 0+ eval_encode_one_block_58(C):1
     [D=5] 
* CE 71: loop_cont_eval_encode_one_block_bb9_in(D,A,B,C) = 0
     [D=2] 

### Cost equations --> "Loop" of loop_cont_eval_encode_one_block_bb9_in/4 
* CEs [69] --> Loop 44 
* CEs [70] --> Loop 45 
* CEs [71] --> Loop 46 

#### Loops of loop_cont_eval_encode_one_block_bb9_in/4 
* Loop 44: loop_cont_eval_encode_one_block_bb9_in(D,A,B,C) [D=6] 
* Loop 45: loop_cont_eval_encode_one_block_bb9_in(D,A,B,C) [D=5] 
* Loop 46: loop_cont_eval_encode_one_block_bb9_in(D,A,B,C) [D=2] 

### Ranking functions of CR loop_cont_eval_encode_one_block_bb9_in(D,A,B,C) 

#### Partial ranking functions of CR loop_cont_eval_encode_one_block_bb9_in(D,A,B,C) 


### Resulting Chains:loop_cont_eval_encode_one_block_bb9_in(D,A,B,C) 
* [46]
* [45]
* [44]


### Merging Chains  loop_cont_eval_encode_one_block_bb9_in/4 into  External patterns of execution 
* [[46]] --> 1 
* [[45]] --> 2 
* [[44]] --> 3 


### Specialization of cost equations eval_encode_one_block_bb8_in/1 
* CE 14 is refined into CE [72,73,74,75,76,77,78] 


#### Refined cost equations eval_encode_one_block_bb8_in/1 
* CE 72: eval_encode_one_block_bb8_in(B) = 1+ eval_encode_one_block_bb9_in(C,D,E,F,G):1+ loop_cont_eval_encode_one_block_bb9_in(H,F,G,B):1
     [H=2,E=2,D=1,C=0] 
* CE 73: eval_encode_one_block_bb8_in(B) = 1+ eval_encode_one_block_bb9_in(C,D,E,F,G):2+ loop_cont_eval_encode_one_block_bb9_in(H,F,G,B):1
     [H=2,E=2,D=1,C=0] 
* CE 74: eval_encode_one_block_bb8_in(B) = 1+ eval_encode_one_block_bb9_in(C,D,E,F,G):3+ loop_cont_eval_encode_one_block_bb9_in(H,F,G,B):2
     [H=5,E=5,D=1,C=0] 
* CE 75: eval_encode_one_block_bb8_in(B) = 1+ eval_encode_one_block_bb9_in(C,D,E,F,G):4+ loop_cont_eval_encode_one_block_bb9_in(H,F,G,B):3
     [H=6,E=6,D=1,C=0] 
* CE 76: eval_encode_one_block_bb8_in(B) = 1+ eval_encode_one_block_bb9_in(C,D,E,F,G):5
     [D=1,C=0] 
* CE 77: eval_encode_one_block_bb8_in(B) = 1+ eval_encode_one_block_bb9_in(C,D,E,F,G):6
     [D=1,C=0] 
* CE 78: eval_encode_one_block_bb8_in(B) = 1+ eval_encode_one_block_bb9_in(C,D,E,F,G):7
     [D=1,C=0] 

### Cost equations --> "Loop" of eval_encode_one_block_bb8_in/1 
* CEs [76,77,78] --> Loop 47 
* CEs [72,73,74,75] --> Loop 48 

#### Loops of eval_encode_one_block_bb8_in/1 
* Loop 47: eval_encode_one_block_bb8_in(B) [] 
* Loop 48: eval_encode_one_block_bb8_in(B) [] 

### Ranking functions of CR eval_encode_one_block_bb8_in(B) 

#### Partial ranking functions of CR eval_encode_one_block_bb8_in(B) 


### Resulting Chains:eval_encode_one_block_bb8_in(B) 
* [48]
* [47]...


### Merging Chains  eval_encode_one_block_bb8_in/1 into  External patterns of execution 
* [[48]] --> 1 
* [[47]] --> 2 


### Specialization of cost equations eval_encode_one_block_18/1 
* CE 12 is refined into CE [79,80] 
* CE 13 is refined into CE [81] 


#### Refined cost equations eval_encode_one_block_18/1 
* CE 79: eval_encode_one_block_18(B) = 0+ eval_encode_one_block_bb8_in(B):1
     [] 
* CE 80: eval_encode_one_block_18(B) = 0+ eval_encode_one_block_bb8_in(B):2
     [] 
* CE 81: eval_encode_one_block_18(B) = 0
     [] 

### Cost equations --> "Loop" of eval_encode_one_block_18/1 
* CEs [79,81] --> Loop 49 
* CEs [80] --> Loop 50 

#### Loops of eval_encode_one_block_18/1 
* Loop 49: eval_encode_one_block_18(B) [] 
* Loop 50: eval_encode_one_block_18(B) [] 

### Ranking functions of CR eval_encode_one_block_18(B) 

#### Partial ranking functions of CR eval_encode_one_block_18(B) 


### Resulting Chains:eval_encode_one_block_18(B) 
* [50]...
* [49]


### Merging Chains  eval_encode_one_block_18/1 into  External patterns of execution 
* [[49]] --> 1 
* [[50]] --> 2 


### Specialization of cost equations eval_encode_one_block_16/3 
* CE 9 is refined into CE [82,83] 
* CE 10 is refined into CE [84,85] 
* CE 11 is refined into CE [86] 


#### Refined cost equations eval_encode_one_block_16/3 
* CE 82: eval_encode_one_block_16(V_temp2_0,V_nbits_0,B) = 0+ eval_encode_one_block_18(B):1
     [] 
* CE 83: eval_encode_one_block_16(V_temp2_0,V_nbits_0,B) = 0+ eval_encode_one_block_18(B):2
     [] 
* CE 84: eval_encode_one_block_16(V_temp2_0,V_nbits_0,B) = 0+ eval_encode_one_block_bb8_in(B):1
     [] 
* CE 85: eval_encode_one_block_16(V_temp2_0,V_nbits_0,B) = 0+ eval_encode_one_block_bb8_in(B):2
     [] 
* CE 86: eval_encode_one_block_16(V_temp2_0,V_nbits_0,B) = 0
     [] 

### Cost equations --> "Loop" of eval_encode_one_block_16/3 
* CEs [82,84,86] --> Loop 51 
* CEs [83,85] --> Loop 52 

#### Loops of eval_encode_one_block_16/3 
* Loop 51: eval_encode_one_block_16(V_temp2_0,V_nbits_0,B) [] 
* Loop 52: eval_encode_one_block_16(V_temp2_0,V_nbits_0,B) [] 

### Ranking functions of CR eval_encode_one_block_16(V_temp2_0,V_nbits_0,B) 

#### Partial ranking functions of CR eval_encode_one_block_16(V_temp2_0,V_nbits_0,B) 


### Resulting Chains:eval_encode_one_block_16(V_temp2_0,V_nbits_0,B) 
* [52]...
* [51]


### Merging Chains  eval_encode_one_block_16/3 into  External patterns of execution 
* [[51]] --> 1 
* [[52]] --> 2 


### Specialization of cost equations eval_encode_one_block_bb2_in/3 
* CE 5 is refined into CE [87,88,89,90,91] 


#### Refined cost equations eval_encode_one_block_bb2_in/3 
* CE 87: eval_encode_one_block_bb2_in(V_temp2_0,V_temp_0,B) = 1+ eval_encode_one_block_bb3_in(V_temp2_0,C,D,E,V_temp2_0,F,G,H):1+ eval_encode_one_block_16(V_temp2_0,I,B):1
     [I=0,F=0,E=7,D=0,C=0,V_temp_0=0] 
* CE 88: eval_encode_one_block_bb2_in(V_temp2_0,V_temp_0,B) = 1+ eval_encode_one_block_bb3_in(V_temp2_0,C,D,E,V_temp2_0,F,G,H):1+ eval_encode_one_block_16(V_temp2_0,I,B):2
     [I=0,F=0,E=7,D=0,C=0,V_temp_0=0] 
* CE 89: eval_encode_one_block_bb2_in(V_temp2_0,V_temp_0,B) = 1+ eval_encode_one_block_bb3_in(V_temp2_0,C,V_temp_0,D,V_temp2_0,E,F,G):2+ eval_encode_one_block_16(V_temp2_0,E,B):1
     [E>=1,D=7,C=0] 
* CE 90: eval_encode_one_block_bb2_in(V_temp2_0,V_temp_0,B) = 1+ eval_encode_one_block_bb3_in(V_temp2_0,C,V_temp_0,D,V_temp2_0,E,F,G):2+ eval_encode_one_block_16(V_temp2_0,E,B):2
     [E>=1,D=7,C=0] 
* CE 91: eval_encode_one_block_bb2_in(V_temp2_0,V_temp_0,B) = 1+ eval_encode_one_block_bb3_in(V_temp2_0,C,V_temp_0,D,E,F,G,H):3
     [D=7,C=0] 

### Cost equations --> "Loop" of eval_encode_one_block_bb2_in/3 
* CEs [88,90,91] --> Loop 53 
* CEs [87,89] --> Loop 54 

#### Loops of eval_encode_one_block_bb2_in/3 
* Loop 53: eval_encode_one_block_bb2_in(V_temp2_0,V_temp_0,B) [] 
* Loop 54: eval_encode_one_block_bb2_in(V_temp2_0,V_temp_0,B) [] 

### Ranking functions of CR eval_encode_one_block_bb2_in(V_temp2_0,V_temp_0,B) 

#### Partial ranking functions of CR eval_encode_one_block_bb2_in(V_temp2_0,V_temp_0,B) 


### Resulting Chains:eval_encode_one_block_bb2_in(V_temp2_0,V_temp_0,B) 
* [54]
* [53]...


### Merging Chains  eval_encode_one_block_bb2_in/3 into  External patterns of execution 
* [[54]] --> 1 
* [[53]] --> 2 


### Specialization of cost equations eval_encode_one_block_bb0_in/2 
* CE 3 is refined into CE [92,93] 
* CE 4 is refined into CE [94,95] 


#### Refined cost equations eval_encode_one_block_bb0_in/2 
* CE 92: eval_encode_one_block_bb0_in(V_last_dc_val,B) = 0+ eval_encode_one_block_bb2_in(C,D,B):1
     [C+D+1=0] 
* CE 93: eval_encode_one_block_bb0_in(V_last_dc_val,B) = 0+ eval_encode_one_block_bb2_in(C,D,B):2
     [C+D+1=0] 
* CE 94: eval_encode_one_block_bb0_in(V_last_dc_val,B) = 0+ eval_encode_one_block_bb2_in(C,C,B):1
     [] 
* CE 95: eval_encode_one_block_bb0_in(V_last_dc_val,B) = 0+ eval_encode_one_block_bb2_in(C,C,B):2
     [] 

### Cost equations --> "Loop" of eval_encode_one_block_bb0_in/2 
* CEs [93,95] --> Loop 55 
* CEs [92,94] --> Loop 56 

#### Loops of eval_encode_one_block_bb0_in/2 
* Loop 55: eval_encode_one_block_bb0_in(V_last_dc_val,B) [] 
* Loop 56: eval_encode_one_block_bb0_in(V_last_dc_val,B) [] 

### Ranking functions of CR eval_encode_one_block_bb0_in(V_last_dc_val,B) 

#### Partial ranking functions of CR eval_encode_one_block_bb0_in(V_last_dc_val,B) 


### Resulting Chains:eval_encode_one_block_bb0_in(V_last_dc_val,B) 
* [56]
* [55]...


### Merging Chains  eval_encode_one_block_bb0_in/2 into  External patterns of execution 
* [[56]] --> 1 
* [[55]] --> 2 


### Specialization of cost equations eval_encode_one_block_start/2 
* CE 2 is refined into CE [96,97] 


#### Refined cost equations eval_encode_one_block_start/2 
* CE 96: eval_encode_one_block_start(V_last_dc_val,B) = 0+ eval_encode_one_block_bb0_in(V_last_dc_val,B):1
     [] 
* CE 97: eval_encode_one_block_start(V_last_dc_val,B) = 0+ eval_encode_one_block_bb0_in(V_last_dc_val,B):2
     [] 

### Cost equations --> "Loop" of eval_encode_one_block_start/2 
* CEs [97] --> Loop 57 
* CEs [96] --> Loop 58 

#### Loops of eval_encode_one_block_start/2 
* Loop 57: eval_encode_one_block_start(V_last_dc_val,B) [] 
* Loop 58: eval_encode_one_block_start(V_last_dc_val,B) [] 

### Ranking functions of CR eval_encode_one_block_start(V_last_dc_val,B) 

#### Partial ranking functions of CR eval_encode_one_block_start(V_last_dc_val,B) 


### Resulting Chains:eval_encode_one_block_start(V_last_dc_val,B) 
* [58]
* [57]...


### Merging Chains  eval_encode_one_block_start/2 into  External patterns of execution 
* [[58]] --> 1 
* [[57]] --> 2 


Computing Bounds
=====================================

#### Cost of loops [25,26] 

 * loop 25:eval_encode_one_block_bb3_in(V_temp2_0,V_nbits_0,V_temp_1,B,C,D,E,F) -> [eval_encode_one_block_bb3_in(V_temp2_0',V_nbits_0',V_temp_1',B',C',D',E',F')] 
1
 * loop 26:eval_encode_one_block_bb3_in(V_temp2_0,V_nbits_0,V_temp_1,B,C,D,E,F) -> [eval_encode_one_block_bb3_in(V_temp2_0',V_nbits_0',V_temp_1',B',C',D',E',F')] 
1
#### Cost of phase [25,26]:eval_encode_one_block_bb3_in(V_temp2_0,V_nbits_0,V_temp_1,B,C,D,E,F) -> [eval_encode_one_block_bb3_in(V_temp2_0',V_nbits_0',V_temp_1',B',C',D',E',F')] 
2*it(25)+0
#### Cost of phase [25,26]:eval_encode_one_block_bb3_in(V_temp2_0,V_nbits_0,V_temp_1,B,C,D,E,F) -> [eval_encode_one_block_bb3_in(V_temp2_0',V_nbits_0',V_temp_1',B',C',D',E',F')] 
2*it(25)+0
#### Cost of chains of eval_encode_one_block_bb3_in(V_temp2_0,V_nbits_0,V_temp_1,B,C,D,E,F):
* Chain [[25,26]]...: 2*it(25)+0
  with precondition: [V_nbits_0>=0,B=7] 

* Chain [[25,26],27]: 2*it(25)+0
  with precondition: [B=7,V_temp2_0=C,V_nbits_0>=0,D>=V_nbits_0+1] 

* Chain [27]: 0
  with precondition: [V_temp_1=0,B=7,C=V_temp2_0,V_nbits_0=D,V_nbits_0>=0] 


#### Cost of loops [28] 

 * loop 28:eval_encode_one_block_bb12_in(V_r_0,V_k_0,V_35,V_r_1,B,C,D,E,F,G) -> [eval_encode_one_block_bb12_in(V_r_0',V_k_0',V_35',V_r_1',B',C',D',E',F',G')] 
1
#### Cost of phase [28]:eval_encode_one_block_bb12_in(V_r_0,V_k_0,V_35,V_r_1,B,C,D,E,F,G) -> [eval_encode_one_block_bb12_in(V_r_0',V_k_0',V_35',V_r_1',B',C',D',E',F',G')] 
1*it(28)+0
  Such that:it(28) =< V_r_1/16
it(28) =< V_r_1/16-V_r_1'/16

#### Cost of phase [28]:eval_encode_one_block_bb12_in(V_r_0,V_k_0,V_35,V_r_1,B,C,D,E,F,G) -> [eval_encode_one_block_bb12_in(V_r_0',V_k_0',V_35',V_r_1',B',C',D',E',F',G')] 
1*it(28)+0
  Such that:it(28) =< V_r_1/16
it(28) =< V_r_1/16-V_r_1'/16

#### Cost of phase [28]:eval_encode_one_block_bb12_in(V_r_0,V_k_0,V_35,V_r_1,B,C,D,E,F,G) -> [eval_encode_one_block_bb12_in(V_r_0',V_k_0',V_35',V_r_1',B',C',D',E',F',G')] 
1*it(28)+0
  Such that:it(28) =< V_r_1/16
it(28) =< V_r_1/16-V_r_1'/16

#### Cost of chains of eval_encode_one_block_bb12_in(V_r_0,V_k_0,V_35,V_r_1,B,C,D,E,F,G):
* Chain [[28],31]: 1*it(28)+0
  Such that:it(28) =< V_r_1/16

  with precondition: [B=2,63>=V_k_0,V_r_1>=32,V_r_0>=V_r_1] 

* Chain [[28],30]: 1*it(28)+0
  Such that:it(28) =< V_r_1/16-F/16

  with precondition: [B=3,V_r_0=C,V_k_0=D,V_35=E,V_35=G,63>=V_k_0,15>=F,F>=0,V_r_0>=V_r_1,V_r_1>=F+16] 

* Chain [[28],29]: 1*it(28)+0
  Such that:it(28) =< V_r_1/16-F/16

  with precondition: [B=3,V_r_0=C,V_k_0=D,V_35=E,V_35=G+1,63>=V_k_0,15>=F,F>=0,V_r_0>=V_r_1,V_r_1>=F+16] 

* Chain [31]: 0
  with precondition: [B=2,63>=V_k_0,V_r_1>=16,V_r_0>=V_r_1] 

* Chain [30]: 0
  with precondition: [B=3,V_r_0=C,V_k_0=D,V_35=E,V_r_1=F,V_35=G,63>=V_k_0,15>=V_r_1,V_r_1>=0,V_r_0>=V_r_1] 

* Chain [29]: 0
  with precondition: [B=3,V_r_0=C,V_k_0=D,V_35=E,V_r_1=F,V_35=G+1,63>=V_k_0,15>=V_r_1,V_r_1>=0,V_r_0>=V_r_1] 


#### Cost of loops [32] 

 * loop 32:eval_encode_one_block_bb18_in(V_r_0,V_k_0,V_35,V_r_1,V_temp2_1,V_nbits_1,B,C,D,E,F,G,H,I,J) -> [eval_encode_one_block_bb18_in(V_r_0',V_k_0',V_35',V_r_1',V_temp2_1',V_nbits_1',B',C',D',E',F',G',H',I',J')] 
1
#### Cost of phase [32]:eval_encode_one_block_bb18_in(V_r_0,V_k_0,V_35,V_r_1,V_temp2_1,V_nbits_1,B,C,D,E,F,G,H,I,J) -> [eval_encode_one_block_bb18_in(V_r_0',V_k_0',V_35',V_r_1',V_temp2_1',V_nbits_1',B',C',D',E',F',G',H',I',J')] 
1*it(32)+0
#### Cost of phase [32]:eval_encode_one_block_bb18_in(V_r_0,V_k_0,V_35,V_r_1,V_temp2_1,V_nbits_1,B,C,D,E,F,G,H,I,J) -> [eval_encode_one_block_bb18_in(V_r_0',V_k_0',V_35',V_r_1',V_temp2_1',V_nbits_1',B',C',D',E',F',G',H',I',J')] 
1*it(32)+0
#### Cost of chains of eval_encode_one_block_bb18_in(V_r_0,V_k_0,V_35,V_r_1,V_temp2_1,V_nbits_1,B,C,D,E,F,G,H,I,J):
* Chain [[32]]...: 1*it(32)+0
  with precondition: [V_nbits_1>=1,B=4] 

* Chain [[32],33]: 1*it(32)+0
  with precondition: [B=4,V_r_0=C,V_k_0=D,V_35=E,V_r_1=F,V_temp2_1=G,V_nbits_1>=1,H>=V_nbits_1+1] 

* Chain [33]: 0
  with precondition: [B=4,C=V_r_0,D=V_k_0,E=V_35,F=V_r_1,G=V_temp2_1,V_nbits_1=H,V_nbits_1>=1] 


#### Cost of loops [36,37,38] 

 * loop 36:eval_encode_one_block_bb9_in(V_r_0,V_k_0,B,C,D) -> [eval_encode_one_block_bb9_in(V_r_0',V_k_0',B',C',D')] 
1
 * loop 37:eval_encode_one_block_bb9_in(V_r_0,V_k_0,B,C,D) -> [eval_encode_one_block_bb9_in(V_r_0',V_k_0',B',C',D')] 
4*s(11)+2*s(12)+3
  Such that:s(10) =< V_r_0/16
s(11) =< s(10)

 * loop 38:eval_encode_one_block_bb9_in(V_r_0,V_k_0,B,C,D) -> [eval_encode_one_block_bb9_in(V_r_0',V_k_0',B',C',D')] 
1*s(15)+0
#### Cost of phase [36,37,38]:eval_encode_one_block_bb9_in(V_r_0,V_k_0,B,C,D) -> [eval_encode_one_block_bb9_in(V_r_0',V_k_0',B',C',D')] 
4*it(36)+4*s(16)+3*s(17)+0
  Such that:s(18) =< -31/8*V_k_0+248
aux(8) =< -V_k_0+64
aux(9) =< -V_k_0+V_k_0'
aux(10) =< -31/8*V_k_0+31/8*V_k_0'
it(36) =< aux(8)
it(36) =< aux(9)
s(18) =< aux(10)
s(16) =< s(18)

#### Cost of phase [36,37,38]:eval_encode_one_block_bb9_in(V_r_0,V_k_0,B,C,D) -> [eval_encode_one_block_bb9_in(V_r_0',V_k_0',B',C',D')] 
4*it(36)+4*s(16)+3*s(17)+0
  Such that:s(18) =< -31/8*V_k_0+248
aux(8) =< -V_k_0+64
aux(9) =< -V_k_0+V_k_0'
aux(10) =< -31/8*V_k_0+31/8*V_k_0'
it(36) =< aux(8)
it(36) =< aux(9)
s(18) =< aux(10)
s(16) =< s(18)

#### Cost of phase [36,37,38]:eval_encode_one_block_bb9_in(V_r_0,V_k_0,B,C,D) -> [eval_encode_one_block_bb9_in(V_r_0',V_k_0',B',C',D')] 
4*it(36)+4*s(16)+3*s(17)+0
  Such that:s(18) =< -31/8*V_k_0+248
aux(8) =< -V_k_0+64
aux(9) =< -V_k_0+V_k_0'
aux(10) =< -31/8*V_k_0+31/8*V_k_0'
it(36) =< aux(8)
it(36) =< aux(9)
s(18) =< aux(10)
s(16) =< s(18)

#### Cost of phase [36,37,38]:eval_encode_one_block_bb9_in(V_r_0,V_k_0,B,C,D) -> [eval_encode_one_block_bb9_in(V_r_0',V_k_0',B',C',D')] 
4*it(36)+4*s(16)+3*s(17)+0
  Such that:s(18) =< -31/8*V_k_0+248
aux(8) =< -V_k_0+64
aux(9) =< -V_k_0+V_k_0'
aux(10) =< -31/8*V_k_0+31/8*V_k_0'
it(36) =< aux(8)
it(36) =< aux(9)
s(18) =< aux(10)
s(16) =< s(18)

#### Cost of phase [36,37,38]:eval_encode_one_block_bb9_in(V_r_0,V_k_0,B,C,D) -> [eval_encode_one_block_bb9_in(V_r_0',V_k_0',B',C',D')] 
4*it(36)+4*s(16)+3*s(17)+0
  Such that:s(18) =< -31/8*V_k_0+248
aux(8) =< -V_k_0+64
aux(9) =< -V_k_0+V_k_0'
aux(10) =< -31/8*V_k_0+31/8*V_k_0'
it(36) =< aux(8)
it(36) =< aux(9)
s(18) =< aux(10)
s(16) =< s(18)

#### Cost of phase [36,37,38]:eval_encode_one_block_bb9_in(V_r_0,V_k_0,B,C,D) -> [eval_encode_one_block_bb9_in(V_r_0',V_k_0',B',C',D')] 
4*it(36)+4*s(16)+3*s(17)+0
  Such that:s(18) =< -31/8*V_k_0+248
aux(8) =< -V_k_0+64
aux(9) =< -V_k_0+V_k_0'
aux(10) =< -31/8*V_k_0+31/8*V_k_0'
it(36) =< aux(8)
it(36) =< aux(9)
s(18) =< aux(10)
s(16) =< s(18)

#### Cost of chains of eval_encode_one_block_bb9_in(V_r_0,V_k_0,B,C,D):
* Chain [[36,37,38],42]: 4*aux(1)+4*it(36)+4*s(16)+0
  Such that:aux(9) =< -V_k_0+63
aux(8) =< -V_k_0+64
s(18) =< -31/8*V_k_0+248
aux(10) =< -31/8*V_k_0+1953/8
it(36) =< aux(8)
it(36) =< aux(9)
s(18) =< aux(10)
s(16) =< s(18)

  with precondition: [B=2,62>=V_k_0,V_r_0>=0,V_k_0>=V_r_0+1] 

* Chain [[36,37,38],41]: 4*it(36)+4*s(16)+5*s(17)+5*s(20)+2
  Such that:aux(11) =< V_r_0/16-V_k_0/16+63/16
aux(9) =< -V_k_0+63
aux(8) =< -V_k_0+64
s(18) =< -31/8*V_k_0+248
aux(10) =< -31/8*V_k_0+1953/8
s(20) =< aux(11)
it(36) =< aux(8)
it(36) =< aux(9)
s(18) =< aux(10)
s(16) =< s(18)

  with precondition: [B=2,62>=V_k_0,V_r_0>=0,V_k_0>=V_r_0+1,V_r_0+47>=V_k_0] 

* Chain [[36,37,38],40]: 4*it(36)+4*s(16)+3*s(17)+0
  Such that:aux(12) =< -V_k_0+64
aux(13) =< -31/8*V_k_0+248
it(36) =< aux(12)
s(16) =< aux(13)

  with precondition: [B=5,63>=V_k_0,V_r_0>=0,V_k_0>=V_r_0+1] 

* Chain [[36,37,38],39]: 4*it(36)+4*s(16)+3*s(17)+0
  Such that:aux(14) =< -V_k_0+64
aux(15) =< -31/8*V_k_0+248
it(36) =< aux(14)
s(16) =< aux(15)

  with precondition: [B=6,63>=V_k_0,V_r_0>=0,V_k_0>=V_r_0+1] 

* Chain [[36,37,38],35]...: 4*aux(16)+4*it(36)+4*s(16)+0
  Such that:aux(9) =< -V_k_0+63
aux(8) =< -V_k_0+64
s(18) =< -31/8*V_k_0+248
aux(10) =< -31/8*V_k_0+1953/8
it(36) =< aux(8)
it(36) =< aux(9)
s(18) =< aux(10)
s(16) =< s(18)

  with precondition: [62>=V_k_0,V_r_0>=0,V_k_0>=V_r_0+1] 

* Chain [[36,37,38],34]...: 4*it(36)+4*s(16)+7*s(17)+4*s(31)+3
  Such that:aux(17) =< V_r_0/16-V_k_0/16+63/16
aux(9) =< -V_k_0+63
aux(8) =< -V_k_0+64
s(18) =< -31/8*V_k_0+248
aux(10) =< -31/8*V_k_0+1953/8
s(31) =< aux(17)
it(36) =< aux(8)
it(36) =< aux(9)
s(18) =< aux(10)
s(16) =< s(18)

  with precondition: [62>=V_k_0,V_r_0>=0,V_k_0>=V_r_0+1,V_r_0+47>=V_k_0] 

* Chain [42]: 1*aux(1)+0
  with precondition: [B=2,15>=V_r_0,63>=V_k_0,V_r_0>=0,V_k_0>=V_r_0+1] 

* Chain [35]...: 1*aux(16)+0
  with precondition: [15>=V_r_0,63>=V_k_0,V_r_0>=0,V_k_0>=V_r_0+1] 


#### Cost of chains of eval_encode_one_block_58(B):
* Chain [43]: 0
  with precondition: [] 


#### Cost of chains of loop_cont_eval_encode_one_block_bb9_in(D,A,B,C):
* Chain [46]: 0
  with precondition: [D=2] 

* Chain [45]: 0
  with precondition: [D=5] 

* Chain [44]: 0
  with precondition: [D=6] 


#### Cost of chains of eval_encode_one_block_bb8_in(B):
* Chain [48]: 1*aux(24)+0
  with precondition: [] 

* Chain [47]...: 1*aux(29)+0
  with precondition: [] 


#### Cost of chains of eval_encode_one_block_18(B):
* Chain [50]...: 1*s(93)+0
  with precondition: [] 

* Chain [49]: 1*aux(30)+0
  with precondition: [] 


#### Cost of chains of eval_encode_one_block_16(V_temp2_0,V_nbits_0,B):
* Chain [52]...: 1*aux(31)+0
  with precondition: [] 

* Chain [51]: 1*aux(32)+0
  with precondition: [] 


#### Cost of chains of eval_encode_one_block_bb2_in(V_temp2_0,V_temp_0,B):
* Chain [54]: 1*aux(33)+0
  with precondition: [] 

* Chain [53]...: 1*aux(34)+0
  with precondition: [] 


#### Cost of chains of eval_encode_one_block_bb0_in(V_last_dc_val,B):
* Chain [56]: 1*aux(35)+0
  with precondition: [] 

* Chain [55]...: 1*aux(36)+0
  with precondition: [] 


#### Cost of chains of eval_encode_one_block_start(V_last_dc_val,B):
* Chain [58]: 1*s(110)+0
  with precondition: [] 

* Chain [57]...: 1*s(111)+0
  with precondition: [] 


Closed-form bounds of eval_encode_one_block_start(V_last_dc_val,B): 
-------------------------------------
* Chain [58] with precondition: [] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [57]... with precondition: [] 
    - Upper bound: inf 
    - Complexity: infinity 

### Maximum cost of eval_encode_one_block_start(V_last_dc_val,B): inf 
Asymptotic class: infinity 

Time statistics: 
-------------------------------------
* Partial evaluation computed in 60 ms.
* Invariants computed in 89 ms.
   - Backward Invariants 53 ms.
   - Transitive Invariants 15 ms.
* Refinement performed in 224 ms.
* Termination proved in 14 ms.
* Upper bounds computed in 194 ms.
   - Equation cost structures 97 ms.
   - Phase cost structures 61 ms.
   - Chain cost structures 60 ms.
   - Solving cost expressions 0 ms.
* Total analysis performed in 661 ms.


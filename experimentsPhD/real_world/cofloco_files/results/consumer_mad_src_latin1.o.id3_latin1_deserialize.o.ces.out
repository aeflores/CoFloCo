Warning: Ignored call to eval_id3_latin1_deserialize_stop/1 in equation eval_id3_latin1_deserialize_bb7_in/1 

Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. recursive  : [eval_id3_latin1_deserialize_10/2,eval_id3_latin1_deserialize_9/2,eval_id3_latin1_deserialize_bb2_in/2]
1. non_recursive  : [eval_id3_latin1_deserialize_bb7_in/1]
2. non_recursive  : [eval_id3_latin1_deserialize_22/1]
3. non_recursive  : [eval_id3_latin1_deserialize_21/1]
4. non_recursive  : [eval_id3_latin1_deserialize_bb6_in/1]
5. non_recursive  : [eval_id3_latin1_deserialize_20/1]
6. non_recursive  : [eval_id3_latin1_deserialize_19/1]
7. non_recursive  : [eval_id3_latin1_deserialize_18/1]
8. non_recursive  : [eval_id3_latin1_deserialize_17/2]
9. non_recursive  : [eval_id3_latin1_deserialize_15/2]
10. non_recursive  : [eval_id3_latin1_deserialize_14/1]
11. non_recursive  : [eval_id3_latin1_deserialize__critedge_in/1]
12. non_recursive  : [loop_cont_eval_id3_latin1_deserialize_bb2_in/2]
13. non_recursive  : [eval_id3_latin1_deserialize_3/1]
14. non_recursive  : [eval_id3_latin1_deserialize_2/2]
15. non_recursive  : [eval_id3_latin1_deserialize_bb0_in/2]
16. non_recursive  : [eval_id3_latin1_deserialize_start/2]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into eval_id3_latin1_deserialize_bb2_in/2
1. SCC is completely evaluated into other SCCs
2. SCC is completely evaluated into other SCCs
3. SCC is completely evaluated into other SCCs
4. SCC is completely evaluated into other SCCs
5. SCC is completely evaluated into other SCCs
6. SCC is completely evaluated into other SCCs
7. SCC is partially evaluated into eval_id3_latin1_deserialize_18/1
8. SCC is completely evaluated into other SCCs
9. SCC is completely evaluated into other SCCs
10. SCC is completely evaluated into other SCCs
11. SCC is completely evaluated into other SCCs
12. SCC is completely evaluated into other SCCs
13. SCC is partially evaluated into eval_id3_latin1_deserialize_3/1
14. SCC is completely evaluated into other SCCs
15. SCC is completely evaluated into other SCCs
16. SCC is partially evaluated into eval_id3_latin1_deserialize_start/2

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations eval_id3_latin1_deserialize_bb2_in/2 
* CE 6 is refined into CE [8] 
* CE 5 is refined into CE [9] 


#### Refined cost equations eval_id3_latin1_deserialize_bb2_in/2 
* CE 8: eval_id3_latin1_deserialize_bb2_in(V_6,B) = 1+ eval_id3_latin1_deserialize_bb2_in(V_6,C)
     [C=2,B=2] 
* CE 9: eval_id3_latin1_deserialize_bb2_in(V_6,B) = 0
     [B=2] 

### Cost equations --> "Loop" of eval_id3_latin1_deserialize_bb2_in/2 
* CEs [9] --> Loop 6 
* CEs [8] --> Loop 7 

#### Loops of eval_id3_latin1_deserialize_bb2_in/2 
* Loop 6: eval_id3_latin1_deserialize_bb2_in(V_6,B) [B=2] 
* Loop 7: eval_id3_latin1_deserialize_bb2_in(V_6,B)->  eval_id3_latin1_deserialize_bb2_in(V_6,B')
                  [B'=2,B=2] 

### Ranking functions of CR eval_id3_latin1_deserialize_bb2_in(V_6,B) 

#### Partial ranking functions of CR eval_id3_latin1_deserialize_bb2_in(V_6,B) 


### Resulting Chains:eval_id3_latin1_deserialize_bb2_in(V_6,B) 
* [[7]]...
* [[7],6]
* [6]


### Merging Chains  eval_id3_latin1_deserialize_bb2_in/2 into  External patterns of execution 
* [[6],[6,[7]]] --> 1 
* [[[7]]] --> 2 


### Specialization of cost equations eval_id3_latin1_deserialize_18/1 
* CE 7 is refined into CE [10] 


#### Refined cost equations eval_id3_latin1_deserialize_18/1 
* CE 10: eval_id3_latin1_deserialize_18(B) = 0
     [] 

### Cost equations --> "Loop" of eval_id3_latin1_deserialize_18/1 
* CEs [10] --> Loop 8 

#### Loops of eval_id3_latin1_deserialize_18/1 
* Loop 8: eval_id3_latin1_deserialize_18(B) [] 

### Ranking functions of CR eval_id3_latin1_deserialize_18(B) 

#### Partial ranking functions of CR eval_id3_latin1_deserialize_18(B) 


### Resulting Chains:eval_id3_latin1_deserialize_18(B) 
* [8]


### Merging Chains  eval_id3_latin1_deserialize_18/1 into  External patterns of execution 
* [[8]] --> 1 


### Specialization of cost equations eval_id3_latin1_deserialize_3/1 
* CE 3 is refined into CE [11] 
* CE 4 is refined into CE [12,13] 


#### Refined cost equations eval_id3_latin1_deserialize_3/1 
* CE 11: eval_id3_latin1_deserialize_3(B) = 0
     [] 
* CE 12: eval_id3_latin1_deserialize_3(B) = 1+ eval_id3_latin1_deserialize_bb2_in(C,D):1+ eval_id3_latin1_deserialize_18(B):1
     [D=2] 
* CE 13: eval_id3_latin1_deserialize_3(B) = 1+ eval_id3_latin1_deserialize_bb2_in(C,D):2
     [D=2] 

### Cost equations --> "Loop" of eval_id3_latin1_deserialize_3/1 
* CEs [13] --> Loop 9 
* CEs [11,12] --> Loop 10 

#### Loops of eval_id3_latin1_deserialize_3/1 
* Loop 9: eval_id3_latin1_deserialize_3(B) [] 
* Loop 10: eval_id3_latin1_deserialize_3(B) [] 

### Ranking functions of CR eval_id3_latin1_deserialize_3(B) 

#### Partial ranking functions of CR eval_id3_latin1_deserialize_3(B) 


### Resulting Chains:eval_id3_latin1_deserialize_3(B) 
* [10]
* [9]...


### Merging Chains  eval_id3_latin1_deserialize_3/1 into  External patterns of execution 
* [[10]] --> 1 
* [[9]] --> 2 


### Specialization of cost equations eval_id3_latin1_deserialize_start/2 
* CE 2 is refined into CE [14,15] 


#### Refined cost equations eval_id3_latin1_deserialize_start/2 
* CE 14: eval_id3_latin1_deserialize_start(V_length,B) = 0+ eval_id3_latin1_deserialize_3(B):1
     [] 
* CE 15: eval_id3_latin1_deserialize_start(V_length,B) = 0+ eval_id3_latin1_deserialize_3(B):2
     [] 

### Cost equations --> "Loop" of eval_id3_latin1_deserialize_start/2 
* CEs [15] --> Loop 11 
* CEs [14] --> Loop 12 

#### Loops of eval_id3_latin1_deserialize_start/2 
* Loop 11: eval_id3_latin1_deserialize_start(V_length,B) [] 
* Loop 12: eval_id3_latin1_deserialize_start(V_length,B) [] 

### Ranking functions of CR eval_id3_latin1_deserialize_start(V_length,B) 

#### Partial ranking functions of CR eval_id3_latin1_deserialize_start(V_length,B) 


### Resulting Chains:eval_id3_latin1_deserialize_start(V_length,B) 
* [12]
* [11]...


### Merging Chains  eval_id3_latin1_deserialize_start/2 into  External patterns of execution 
* [[12]] --> 1 
* [[11]] --> 2 


Computing Bounds
=====================================

#### Cost of loops [7] 

 * loop 7:eval_id3_latin1_deserialize_bb2_in(V_6,B) -> [eval_id3_latin1_deserialize_bb2_in(V_6',B')] 
1
#### Cost of phase [7]:eval_id3_latin1_deserialize_bb2_in(V_6,B) -> [eval_id3_latin1_deserialize_bb2_in(V_6',B')] 
1*it(7)+0
#### Cost of phase [7]:eval_id3_latin1_deserialize_bb2_in(V_6,B) -> [eval_id3_latin1_deserialize_bb2_in(V_6',B')] 
1*it(7)+0
#### Cost of chains of eval_id3_latin1_deserialize_bb2_in(V_6,B):
* Chain [[7]]...: 1*it(7)+0
  with precondition: [B=2] 

* Chain [[7],6]: 1*it(7)+0
  with precondition: [B=2] 

* Chain [6]: 0
  with precondition: [B=2] 


#### Cost of chains of eval_id3_latin1_deserialize_18(B):
* Chain [8]: 0
  with precondition: [] 


#### Cost of chains of eval_id3_latin1_deserialize_3(B):
* Chain [10]: 1*aux(2)+0
  with precondition: [] 

* Chain [9]...: 1*s(3)+1
  with precondition: [] 


#### Cost of chains of eval_id3_latin1_deserialize_start(V_length,B):
* Chain [12]: 1*s(4)+0
  with precondition: [] 

* Chain [11]...: 1*s(5)+1
  with precondition: [] 


Closed-form bounds of eval_id3_latin1_deserialize_start(V_length,B): 
-------------------------------------
* Chain [12] with precondition: [] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [11]... with precondition: [] 
    - Upper bound: inf 
    - Complexity: infinity 

### Maximum cost of eval_id3_latin1_deserialize_start(V_length,B): inf 
Asymptotic class: infinity 

Time statistics: 
-------------------------------------
* Partial evaluation computed in 20 ms.
* Invariants computed in 7 ms.
   - Backward Invariants 3 ms.
   - Transitive Invariants 2 ms.
* Refinement performed in 17 ms.
* Termination proved in 3 ms.
* Upper bounds computed in 16 ms.
   - Equation cost structures 7 ms.
   - Phase cost structures 4 ms.
   - Chain cost structures 4 ms.
   - Solving cost expressions 0 ms.
* Total analysis performed in 98 ms.


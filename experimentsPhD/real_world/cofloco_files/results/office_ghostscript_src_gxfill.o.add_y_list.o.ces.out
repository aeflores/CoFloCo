Warning: Ignored call to eval_add_y_list_stop/1 in equation eval_add_y_list_bb26_in/1 

Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. recursive  : [eval_add_y_list_40/6,eval_add_y_list_41/6,eval_add_y_list_42/7,eval_add_y_list_43/7,eval_add_y_list_44/7,eval_add_y_list_45/7,eval_add_y_list_48/8,eval_add_y_list_49/8,eval_add_y_list_50/8,eval_add_y_list_51/8,eval_add_y_list_bb12_in/6,eval_add_y_list_bb15_in/7,eval_add_y_list_bb18_in/7,eval_add_y_list_bb21_in/8,eval_add_y_list_bb24_in/8,eval_add_y_list_bb6_in/5]
1. recursive  : [eval_add_y_list_14/2,eval_add_y_list_15/2,eval_add_y_list__critedge_in/2,eval_add_y_list_bb4_in/2,eval_add_y_list_bb5_in/2,loop_cont_eval_add_y_list_bb6_in/3]
2. non_recursive  : [eval_add_y_list_bb26_in/1]
3. non_recursive  : [loop_cont_eval_add_y_list__critedge_in/2]
4. non_recursive  : [eval_add_y_list_bb0_in/1]
5. non_recursive  : [eval_add_y_list_start/3]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into eval_add_y_list_bb6_in/5
1. SCC is partially evaluated into eval_add_y_list__critedge_in/2
2. SCC is completely evaluated into other SCCs
3. SCC is completely evaluated into other SCCs
4. SCC is partially evaluated into eval_add_y_list_bb0_in/1
5. SCC is partially evaluated into eval_add_y_list_start/3

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations eval_add_y_list_bb6_in/5 
* CE 16 is refined into CE [17] 
* CE 15 is refined into CE [18] 
* CE 7 is refined into CE [19] 
* CE 9 is refined into CE [20] 
* CE 10 is refined into CE [21] 
* CE 8 is refined into CE [22] 
* CE 11 is refined into CE [23] 
* CE 13 is refined into CE [24] 
* CE 14 is refined into CE [25] 
* CE 12 is refined into CE [26] 


#### Refined cost equations eval_add_y_list_bb6_in/5 
* CE 17: eval_add_y_list_bb6_in(A,B,C,D,B) = 0
     [C+1>=0,2>=C,D=3] 
* CE 18: eval_add_y_list_bb6_in(V_first_dir_0,V_first_dir_1,V_dir_0,B,C) = 0
     [V_dir_0+1>=0,2>=V_dir_0,B=2] 
* CE 19: eval_add_y_list_bb6_in(V_first_dir_0,V_first_dir_1,V_dir_0,B,C) = 1+ eval_add_y_list_bb6_in(V_first_dir_0,V_first_dir_1,D,B,C)
     [B>=2,V_dir_0+1>=0,3>=B,2>=V_dir_0,D=2] 
* CE 20: eval_add_y_list_bb6_in(V_first_dir_0,V_first_dir_1,V_dir_0,B,C) = 1+ eval_add_y_list_bb6_in(V_first_dir_0,V_first_dir_1,D,B,C)
     [B>=2,V_dir_0+1>=0,3>=B,2>=V_dir_0,D=1] 
* CE 21: eval_add_y_list_bb6_in(V_first_dir_0,V_first_dir_1,V_dir_0,B,C) = 1+ eval_add_y_list_bb6_in(V_first_dir_0,V_first_dir_1,D,B,C)
     [B>=2,V_dir_0+1>=0,3>=B,2>=V_dir_0,D=0] 
* CE 22: eval_add_y_list_bb6_in(V_first_dir_0,V_first_dir_1,V_dir_0,B,C) = 1+ eval_add_y_list_bb6_in(V_first_dir_0,V_first_dir_1,D,B,C)
     [B>=2,V_dir_0+1>=0,3>=B,2>=V_dir_0,D+1=0] 
* CE 23: eval_add_y_list_bb6_in(V_first_dir_0,V_first_dir_1,V_dir_0,B,C) = 1+ eval_add_y_list_bb6_in(V_first_dir_0,D,E,B,C)
     [B>=2,V_dir_0+1>=0,3>=B,2>=V_dir_0,E=2,D=2] 
* CE 24: eval_add_y_list_bb6_in(V_first_dir_0,V_first_dir_1,V_dir_0,B,C) = 1+ eval_add_y_list_bb6_in(V_first_dir_0,D,E,B,C)
     [B>=2,V_dir_0+1>=0,3>=B,2>=V_dir_0,E=1,D=1] 
* CE 25: eval_add_y_list_bb6_in(V_first_dir_0,V_first_dir_1,V_dir_0,B,C) = 1+ eval_add_y_list_bb6_in(V_first_dir_0,D,E,B,C)
     [B>=2,V_dir_0+1>=0,3>=B,2>=V_dir_0,E=0,D=0] 
* CE 26: eval_add_y_list_bb6_in(V_first_dir_0,V_first_dir_1,V_dir_0,B,C) = 1+ eval_add_y_list_bb6_in(V_first_dir_0,D,E,B,C)
     [B>=2,V_dir_0+1>=0,3>=B,2>=V_dir_0,E+1=0,D+1=0] 

### Cost equations --> "Loop" of eval_add_y_list_bb6_in/5 
* CEs [19] --> Loop 15 
* CEs [20] --> Loop 16 
* CEs [21] --> Loop 17 
* CEs [22] --> Loop 18 
* CEs [23] --> Loop 19 
* CEs [24] --> Loop 20 
* CEs [25] --> Loop 21 
* CEs [26] --> Loop 22 
* CEs [17] --> Loop 23 
* CEs [18] --> Loop 24 

#### Loops of eval_add_y_list_bb6_in/5 
* Loop 15: eval_add_y_list_bb6_in(V_first_dir_0,V_first_dir_1,V_dir_0,B,C)->  eval_add_y_list_bb6_in(V_first_dir_0,V_first_dir_1,V_dir_0',B,C)
                  [B>=2,V_dir_0+1>=0,3>=B,2>=V_dir_0,V_dir_0'=2] 
* Loop 16: eval_add_y_list_bb6_in(V_first_dir_0,V_first_dir_1,V_dir_0,B,C)->  eval_add_y_list_bb6_in(V_first_dir_0,V_first_dir_1,V_dir_0',B,C)
                  [B>=2,V_dir_0+1>=0,3>=B,2>=V_dir_0,V_dir_0'=1] 
* Loop 17: eval_add_y_list_bb6_in(V_first_dir_0,V_first_dir_1,V_dir_0,B,C)->  eval_add_y_list_bb6_in(V_first_dir_0,V_first_dir_1,V_dir_0',B,C)
                  [B>=2,V_dir_0+1>=0,3>=B,2>=V_dir_0,V_dir_0'=0] 
* Loop 18: eval_add_y_list_bb6_in(V_first_dir_0,V_first_dir_1,V_dir_0,B,C)->  eval_add_y_list_bb6_in(V_first_dir_0,V_first_dir_1,V_dir_0',B,C)
                  [B>=2,V_dir_0+1>=0,3>=B,2>=V_dir_0,V_dir_0'+1=0] 
* Loop 19: eval_add_y_list_bb6_in(V_first_dir_0,V_first_dir_1,V_dir_0,B,C)->  eval_add_y_list_bb6_in(V_first_dir_0,V_first_dir_1',V_dir_0',B,C)
                  [B>=2,V_dir_0+1>=0,3>=B,2>=V_dir_0,V_dir_0'=2,V_first_dir_1'=2] 
* Loop 20: eval_add_y_list_bb6_in(V_first_dir_0,V_first_dir_1,V_dir_0,B,C)->  eval_add_y_list_bb6_in(V_first_dir_0,V_first_dir_1',V_dir_0',B,C)
                  [B>=2,V_dir_0+1>=0,3>=B,2>=V_dir_0,V_dir_0'=1,V_first_dir_1'=1] 
* Loop 21: eval_add_y_list_bb6_in(V_first_dir_0,V_first_dir_1,V_dir_0,B,C)->  eval_add_y_list_bb6_in(V_first_dir_0,V_first_dir_1',V_dir_0',B,C)
                  [B>=2,V_dir_0+1>=0,3>=B,2>=V_dir_0,V_dir_0'=0,V_first_dir_1'=0] 
* Loop 22: eval_add_y_list_bb6_in(V_first_dir_0,V_first_dir_1,V_dir_0,B,C)->  eval_add_y_list_bb6_in(V_first_dir_0,V_first_dir_1',V_dir_0',B,C)
                  [B>=2,V_dir_0+1>=0,3>=B,2>=V_dir_0,V_dir_0'+1=0,V_first_dir_1'+1=0] 
* Loop 23: eval_add_y_list_bb6_in(A,B,C,D,B) [C+1>=0,2>=C,D=3] 
* Loop 24: eval_add_y_list_bb6_in(V_first_dir_0,V_first_dir_1,V_dir_0,B,C) [V_dir_0+1>=0,2>=V_dir_0,B=2] 

### Ranking functions of CR eval_add_y_list_bb6_in(V_first_dir_0,V_first_dir_1,V_dir_0,B,C) 

#### Partial ranking functions of CR eval_add_y_list_bb6_in(V_first_dir_0,V_first_dir_1,V_dir_0,B,C) 


### Resulting Chains:eval_add_y_list_bb6_in(V_first_dir_0,V_first_dir_1,V_dir_0,B,C) 
* [[15,16,17,18,19,20,21,22]]...
* [[15,16,17,18,19,20,21,22],24]
* [[15,16,17,18,19,20,21,22],23]
* [24]
* [23]


### Merging Chains  eval_add_y_list_bb6_in/5 into  External patterns of execution 
* [[24],[24,[15,16,17,18,19,20,21,22]]] --> 1 
* [[23],[23,[15,16,17,18,19,20,21,22]]] --> 2 
* [[[15,16,17,18,19,20,21,22]]] --> 3 


### Specialization of cost equations eval_add_y_list__critedge_in/2 
* CE 5 is refined into CE [27,28] 
* CE 6 is refined into CE [29] 
* CE 4 is refined into CE [30,31] 


#### Refined cost equations eval_add_y_list__critedge_in/2 
* CE 27: eval_add_y_list__critedge_in(V_first_dir_0,B) = 1+ eval_add_y_list_bb6_in(V_first_dir_0,V_first_dir_0,C,D,E):1
     [D=2,C=2,B=2] 
* CE 28: eval_add_y_list__critedge_in(V_first_dir_0,B) = 1+ eval_add_y_list_bb6_in(V_first_dir_0,V_first_dir_0,C,D,E):3
     [D=2,C=2,B=2] 
* CE 29: eval_add_y_list__critedge_in(V_first_dir_0,B) = 0
     [B=2] 
* CE 30: eval_add_y_list__critedge_in(V_first_dir_0,B) = 2+ eval_add_y_list_bb6_in(V_first_dir_0,V_first_dir_0,C,D,E):2+ eval_add_y_list__critedge_in(E,F)
     [F=2,D=3,C=2,B=2] 
* CE 31: eval_add_y_list__critedge_in(V_first_dir_0,B) = 2+ eval_add_y_list_bb6_in(V_first_dir_0,V_first_dir_0,C,D,E):3
     [F=2,D=3,C=2,B=2] 

### Cost equations --> "Loop" of eval_add_y_list__critedge_in/2 
* CEs [28,31] --> Loop 25 
* CEs [30] --> Loop 26 
* CEs [27,29] --> Loop 27 

#### Loops of eval_add_y_list__critedge_in/2 
* Loop 25: eval_add_y_list__critedge_in(V_first_dir_0,B) [B=2] 
* Loop 26: eval_add_y_list__critedge_in(V_first_dir_0,B)->  eval_add_y_list__critedge_in(V_first_dir_0',B')
                  [B'=2,B=2] 
* Loop 27: eval_add_y_list__critedge_in(V_first_dir_0,B) [B=2] 

### Ranking functions of CR eval_add_y_list__critedge_in(V_first_dir_0,B) 

#### Partial ranking functions of CR eval_add_y_list__critedge_in(V_first_dir_0,B) 


### Resulting Chains:eval_add_y_list__critedge_in(V_first_dir_0,B) 
* [[26]]...
* [[26],27]
* [[26],25]...
* [27]
* [25]...


### Merging Chains  eval_add_y_list__critedge_in/2 into  External patterns of execution 
* [[27],[27,[26]]] --> 1 
* [[25],[[26]],[25,[26]]] --> 2 


### Specialization of cost equations eval_add_y_list_bb0_in/1 
* CE 3 is refined into CE [32,33] 


#### Refined cost equations eval_add_y_list_bb0_in/1 
* CE 32: eval_add_y_list_bb0_in(B) = 1+ eval_add_y_list__critedge_in(C,D):1
     [D=2] 
* CE 33: eval_add_y_list_bb0_in(B) = 1+ eval_add_y_list__critedge_in(C,D):2
     [D=2] 

### Cost equations --> "Loop" of eval_add_y_list_bb0_in/1 
* CEs [33] --> Loop 28 
* CEs [32] --> Loop 29 

#### Loops of eval_add_y_list_bb0_in/1 
* Loop 28: eval_add_y_list_bb0_in(B) [] 
* Loop 29: eval_add_y_list_bb0_in(B) [] 

### Ranking functions of CR eval_add_y_list_bb0_in(B) 

#### Partial ranking functions of CR eval_add_y_list_bb0_in(B) 


### Resulting Chains:eval_add_y_list_bb0_in(B) 
* [29]
* [28]...


### Merging Chains  eval_add_y_list_bb0_in/1 into  External patterns of execution 
* [[29]] --> 1 
* [[28]] --> 2 


### Specialization of cost equations eval_add_y_list_start/3 
* CE 2 is refined into CE [34,35] 


#### Refined cost equations eval_add_y_list_start/3 
* CE 34: eval_add_y_list_start(V_adjust_below,V_adjust_above,B) = 0+ eval_add_y_list_bb0_in(B):1
     [] 
* CE 35: eval_add_y_list_start(V_adjust_below,V_adjust_above,B) = 0+ eval_add_y_list_bb0_in(B):2
     [] 

### Cost equations --> "Loop" of eval_add_y_list_start/3 
* CEs [35] --> Loop 30 
* CEs [34] --> Loop 31 

#### Loops of eval_add_y_list_start/3 
* Loop 30: eval_add_y_list_start(V_adjust_below,V_adjust_above,B) [] 
* Loop 31: eval_add_y_list_start(V_adjust_below,V_adjust_above,B) [] 

### Ranking functions of CR eval_add_y_list_start(V_adjust_below,V_adjust_above,B) 

#### Partial ranking functions of CR eval_add_y_list_start(V_adjust_below,V_adjust_above,B) 


### Resulting Chains:eval_add_y_list_start(V_adjust_below,V_adjust_above,B) 
* [31]
* [30]...


### Merging Chains  eval_add_y_list_start/3 into  External patterns of execution 
* [[31]] --> 1 
* [[30]] --> 2 


Computing Bounds
=====================================

#### Cost of loops [15,16,17,18,19,20,21,22] 

 * loop 15:eval_add_y_list_bb6_in(V_first_dir_0,V_first_dir_1,V_dir_0,B,C) -> [eval_add_y_list_bb6_in(V_first_dir_0',V_first_dir_1',V_dir_0',B',C')] 
1
 * loop 16:eval_add_y_list_bb6_in(V_first_dir_0,V_first_dir_1,V_dir_0,B,C) -> [eval_add_y_list_bb6_in(V_first_dir_0',V_first_dir_1',V_dir_0',B',C')] 
1
 * loop 17:eval_add_y_list_bb6_in(V_first_dir_0,V_first_dir_1,V_dir_0,B,C) -> [eval_add_y_list_bb6_in(V_first_dir_0',V_first_dir_1',V_dir_0',B',C')] 
1
 * loop 18:eval_add_y_list_bb6_in(V_first_dir_0,V_first_dir_1,V_dir_0,B,C) -> [eval_add_y_list_bb6_in(V_first_dir_0',V_first_dir_1',V_dir_0',B',C')] 
1
 * loop 19:eval_add_y_list_bb6_in(V_first_dir_0,V_first_dir_1,V_dir_0,B,C) -> [eval_add_y_list_bb6_in(V_first_dir_0',V_first_dir_1',V_dir_0',B',C')] 
1
 * loop 20:eval_add_y_list_bb6_in(V_first_dir_0,V_first_dir_1,V_dir_0,B,C) -> [eval_add_y_list_bb6_in(V_first_dir_0',V_first_dir_1',V_dir_0',B',C')] 
1
 * loop 21:eval_add_y_list_bb6_in(V_first_dir_0,V_first_dir_1,V_dir_0,B,C) -> [eval_add_y_list_bb6_in(V_first_dir_0',V_first_dir_1',V_dir_0',B',C')] 
1
 * loop 22:eval_add_y_list_bb6_in(V_first_dir_0,V_first_dir_1,V_dir_0,B,C) -> [eval_add_y_list_bb6_in(V_first_dir_0',V_first_dir_1',V_dir_0',B',C')] 
1
#### Cost of phase [15,16,17,18,19,20,21,22]:eval_add_y_list_bb6_in(V_first_dir_0,V_first_dir_1,V_dir_0,B,C) -> [eval_add_y_list_bb6_in(V_first_dir_0',V_first_dir_1',V_dir_0',B',C')] 
8*it(15)+0
#### Cost of phase [15,16,17,18,19,20,21,22]:eval_add_y_list_bb6_in(V_first_dir_0,V_first_dir_1,V_dir_0,B,C) -> [eval_add_y_list_bb6_in(V_first_dir_0',V_first_dir_1',V_dir_0',B',C')] 
8*it(15)+0
#### Cost of phase [15,16,17,18,19,20,21,22]:eval_add_y_list_bb6_in(V_first_dir_0,V_first_dir_1,V_dir_0,B,C) -> [eval_add_y_list_bb6_in(V_first_dir_0',V_first_dir_1',V_dir_0',B',C')] 
8*it(15)+0
#### Cost of chains of eval_add_y_list_bb6_in(V_first_dir_0,V_first_dir_1,V_dir_0,B,C):
* Chain [[15,16,17,18,19,20,21,22]]...: 8*it(15)+0
  with precondition: [V_dir_0+1>=0,2>=V_dir_0,B>=2,3>=B] 

* Chain [[15,16,17,18,19,20,21,22],24]: 8*it(15)+0
  with precondition: [B=2,2>=V_dir_0,V_dir_0+1>=0] 

* Chain [[15,16,17,18,19,20,21,22],23]: 8*it(15)+0
  with precondition: [B=3,2>=V_dir_0,V_dir_0+1>=0] 

* Chain [24]: 0
  with precondition: [B=2,2>=V_dir_0,V_dir_0+1>=0] 

* Chain [23]: 0
  with precondition: [B=3,C=V_first_dir_1,2>=V_dir_0,V_dir_0+1>=0] 


#### Cost of loops [26] 

 * loop 26:eval_add_y_list__critedge_in(V_first_dir_0,B) -> [eval_add_y_list__critedge_in(V_first_dir_0',B')] 
1*s(4)+2
#### Cost of phase [26]:eval_add_y_list__critedge_in(V_first_dir_0,B) -> [eval_add_y_list__critedge_in(V_first_dir_0',B')] 
3*it(26)+0
#### Cost of phase [26]:eval_add_y_list__critedge_in(V_first_dir_0,B) -> [eval_add_y_list__critedge_in(V_first_dir_0',B')] 
3*it(26)+0
#### Cost of phase [26]:eval_add_y_list__critedge_in(V_first_dir_0,B) -> [eval_add_y_list__critedge_in(V_first_dir_0',B')] 
3*it(26)+0
#### Cost of chains of eval_add_y_list__critedge_in(V_first_dir_0,B):
* Chain [[26]]...: 3*it(26)+0
  with precondition: [B=2] 

* Chain [[26],27]: 4*aux(3)+0
  with precondition: [B=2] 

* Chain [[26],25]...: 4*aux(4)+0
  with precondition: [B=2] 

* Chain [27]: 1*aux(3)+0
  with precondition: [B=2] 

* Chain [25]...: 1*aux(4)+0
  with precondition: [B=2] 


#### Cost of chains of eval_add_y_list_bb0_in(B):
* Chain [29]: 1*s(14)+1
  with precondition: [] 

* Chain [28]...: 1*s(15)+1
  with precondition: [] 


#### Cost of chains of eval_add_y_list_start(V_adjust_below,V_adjust_above,B):
* Chain [31]: 1*s(16)+1
  with precondition: [] 

* Chain [30]...: 1*s(17)+1
  with precondition: [] 


Closed-form bounds of eval_add_y_list_start(V_adjust_below,V_adjust_above,B): 
-------------------------------------
* Chain [31] with precondition: [] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [30]... with precondition: [] 
    - Upper bound: inf 
    - Complexity: infinity 

### Maximum cost of eval_add_y_list_start(V_adjust_below,V_adjust_above,B): inf 
Asymptotic class: infinity 

Time statistics: 
-------------------------------------
* Partial evaluation computed in 239 ms.
* Invariants computed in 120 ms.
   - Backward Invariants 49 ms.
   - Transitive Invariants 24 ms.
* Refinement performed in 194 ms.
* Termination proved in 20 ms.
* Upper bounds computed in 100 ms.
   - Equation cost structures 42 ms.
   - Phase cost structures 58 ms.
   - Chain cost structures 24 ms.
   - Solving cost expressions 0 ms.
* Total analysis performed in 827 ms.


Warning: Ignored call to eval_lame_parse_args_stop/1 in equation eval_lame_parse_args_140/1 
Warning: Ignored call to eval_lame_parse_args_stop/1 in equation eval_lame_parse_args_150/1 
Warning: Ignored call to eval_lame_parse_args_stop/1 in equation eval_lame_parse_args_160/1 
Warning: Ignored call to eval_lame_parse_args_stop/1 in equation eval_lame_parse_args_170/1 
Warning: Ignored call to eval_lame_parse_args_stop/1 in equation eval_lame_parse_args_178/1 
Warning: Ignored call to eval_lame_parse_args_stop/1 in equation eval_lame_parse_args_291/1 
Warning: Ignored call to eval_lame_parse_args_stop/1 in equation eval_lame_parse_args_45/1 
Warning: Ignored call to eval_lame_parse_args_stop/1 in equation eval_lame_parse_args_bb178_in/1 

Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. recursive  : [eval_lame_parse_args_117/15,eval_lame_parse_args_118/15,eval_lame_parse_args_bb42_in/15]
1. recursive  : [eval_lame_parse_args_304/12,eval_lame_parse_args_305/12,eval_lame_parse_args_306/12,eval_lame_parse_args_307/12,eval_lame_parse_args_312/12,eval_lame_parse_args_313/12,eval_lame_parse_args_358/12,eval_lame_parse_args_359/12,eval_lame_parse_args_367/12,eval_lame_parse_args_368/12,eval_lame_parse_args_391/12,eval_lame_parse_args_392/12,eval_lame_parse_args_395/12,eval_lame_parse_args_396/12,eval_lame_parse_args_429/12,eval_lame_parse_args_430/12,eval_lame_parse_args_435/12,eval_lame_parse_args_436/12,eval_lame_parse_args_441/12,eval_lame_parse_args_442/12,eval_lame_parse_args_453/13,eval_lame_parse_args_454/13,eval_lame_parse_args_NewDefault_in/12,eval_lame_parse_args_bb146_in/12,eval_lame_parse_args_bb147_in/13,eval_lame_parse_args_bb86_in/12,eval_lame_parse_args_bb93_in/12]
2. recursive  : [eval_lame_parse_args_100/7,eval_lame_parse_args_101/7,eval_lame_parse_args_103/7,eval_lame_parse_args_104/7,eval_lame_parse_args_109/7,eval_lame_parse_args_110/7,eval_lame_parse_args_111/7,eval_lame_parse_args_112/7,eval_lame_parse_args_123/9,eval_lame_parse_args_124/9,eval_lame_parse_args_129/9,eval_lame_parse_args_130/9,eval_lame_parse_args_131/7,eval_lame_parse_args_132/7,eval_lame_parse_args_133/7,eval_lame_parse_args_134/7,eval_lame_parse_args_141/7,eval_lame_parse_args_142/7,eval_lame_parse_args_143/7,eval_lame_parse_args_144/7,eval_lame_parse_args_151/7,eval_lame_parse_args_152/7,eval_lame_parse_args_153/7,eval_lame_parse_args_154/7,eval_lame_parse_args_161/7,eval_lame_parse_args_162/7,eval_lame_parse_args_163/7,eval_lame_parse_args_164/7,eval_lame_parse_args_171/7,eval_lame_parse_args_172/7,eval_lame_parse_args_173/7,eval_lame_parse_args_174/7,eval_lame_parse_args_179/7,eval_lame_parse_args_180/7,eval_lame_parse_args_181/7,eval_lame_parse_args_182/7,eval_lame_parse_args_183/7,eval_lame_parse_args_184/7,eval_lame_parse_args_185/7,eval_lame_parse_args_186/7,eval_lame_parse_args_187/7,eval_lame_parse_args_188/7,eval_lame_parse_args_203/7,eval_lame_parse_args_204/7,eval_lame_parse_args_219/7,eval_lame_parse_args_220/7,eval_lame_parse_args_233/7,eval_lame_parse_args_234/7,eval_lame_parse_args_247/7,eval_lame_parse_args_248/7,eval_lame_parse_args_25/7,eval_lame_parse_args_26/7,eval_lame_parse_args_261/7,eval_lame_parse_args_262/7,eval_lame_parse_args_273/7,eval_lame_parse_args_274/7,eval_lame_parse_args_285/7,eval_lame_parse_args_286/7,eval_lame_parse_args_287/7,eval_lame_parse_args_288/7,eval_lame_parse_args_292/7,eval_lame_parse_args_293/7,eval_lame_parse_args_31/7,eval_lame_parse_args_32/7,eval_lame_parse_args_37/7,eval_lame_parse_args_38/7,eval_lame_parse_args_39/7,eval_lame_parse_args_40/7,eval_lame_parse_args_46/7,eval_lame_parse_args_463/7,eval_lame_parse_args_464/7,eval_lame_parse_args_469/7,eval_lame_parse_args_47/7,eval_lame_parse_args_470/7,eval_lame_parse_args_472/7,eval_lame_parse_args_473/7,eval_lame_parse_args_50/7,eval_lame_parse_args_51/7,eval_lame_parse_args_56/7,eval_lame_parse_args_57/7,eval_lame_parse_args_60/7,eval_lame_parse_args_61/7,eval_lame_parse_args_64/7,eval_lame_parse_args_65/7,eval_lame_parse_args_69/7,eval_lame_parse_args_70/7,eval_lame_parse_args_73/7,eval_lame_parse_args_74/7,eval_lame_parse_args_75/7,eval_lame_parse_args_76/7,eval_lame_parse_args_78/7,eval_lame_parse_args_79/7,eval_lame_parse_args_80/7,eval_lame_parse_args_81/7,eval_lame_parse_args_83/7,eval_lame_parse_args_84/7,eval_lame_parse_args_85/7,eval_lame_parse_args_86/7,eval_lame_parse_args_88/7,eval_lame_parse_args_89/7,eval_lame_parse_args_90/7,eval_lame_parse_args_91/7,eval_lame_parse_args_93/7,eval_lame_parse_args_94/7,eval_lame_parse_args_95/7,eval_lame_parse_args_96/7,eval_lame_parse_args_98/7,eval_lame_parse_args_99/7,eval_lame_parse_args_bb10_in/7,eval_lame_parse_args_bb1_in/6,eval_lame_parse_args_bb45_in/9,eval_lame_parse_args_bb47_in/9,eval_lame_parse_args_bb5_in/7,eval_lame_parse_args_bb65_in/7,eval_lame_parse_args_bb85_in/8,loop_cont_eval_lame_parse_args_bb42_in/10,loop_cont_eval_lame_parse_args_bb86_in/7]
3. non_recursive  : [eval_lame_parse_args_140/1]
4. non_recursive  : [eval_lame_parse_args_139/2]
5. non_recursive  : [eval_lame_parse_args_138/2]
6. non_recursive  : [eval_lame_parse_args_150/1]
7. non_recursive  : [eval_lame_parse_args_149/2]
8. non_recursive  : [eval_lame_parse_args_148/2]
9. non_recursive  : [eval_lame_parse_args_160/1]
10. non_recursive  : [eval_lame_parse_args_159/2]
11. non_recursive  : [eval_lame_parse_args_158/2]
12. non_recursive  : [eval_lame_parse_args_170/1]
13. non_recursive  : [eval_lame_parse_args_169/2]
14. non_recursive  : [eval_lame_parse_args_168/2]
15. non_recursive  : [eval_lame_parse_args_178/1]
16. non_recursive  : [eval_lame_parse_args_177/2]
17. non_recursive  : [eval_lame_parse_args_176/2]
18. non_recursive  : [eval_lame_parse_args_291/1]
19. non_recursive  : [eval_lame_parse_args_290/2]
20. non_recursive  : [eval_lame_parse_args_289/2]
21. non_recursive  : [eval_lame_parse_args_45/1]
22. non_recursive  : [eval_lame_parse_args_44/2]
23. non_recursive  : [eval_lame_parse_args_43/2]
24. non_recursive  : [eval_lame_parse_args_bb178_in/1]
25. non_recursive  : [eval_lame_parse_args_bb176_in/1]
26. non_recursive  : [eval_lame_parse_args_bb171_in/1]
27. non_recursive  : [eval_lame_parse_args_509/1]
28. non_recursive  : [eval_lame_parse_args_508/2]
29. non_recursive  : [eval_lame_parse_args_507/2]
30. non_recursive  : [eval_lame_parse_args_506/2]
31. non_recursive  : [eval_lame_parse_args_bb168_in/2]
32. non_recursive  : [eval_lame_parse_args_503/2]
33. non_recursive  : [eval_lame_parse_args_502/2]
34. non_recursive  : [eval_lame_parse_args_bb165_in/2]
35. non_recursive  : [eval_lame_parse_args_491/2]
36. non_recursive  : [eval_lame_parse_args_490/2]
37. non_recursive  : [eval_lame_parse_args_494/2]
38. non_recursive  : [eval_lame_parse_args_493/2]
39. non_recursive  : [eval_lame_parse_args_492/2]
40. non_recursive  : [eval_lame_parse_args_bb161_in/2]
41. non_recursive  : [eval_lame_parse_args_bb159_in/2]
42. non_recursive  : [eval_lame_parse_args_478/2]
43. non_recursive  : [eval_lame_parse_args_477/2]
44. non_recursive  : [eval_lame_parse_args_bb158_in/2]
45. non_recursive  : [loop_cont_eval_lame_parse_args_bb1_in/3]
46. non_recursive  : [eval_lame_parse_args_5/3]
47. non_recursive  : [eval_lame_parse_args_4/3]
48. non_recursive  : [eval_lame_parse_args_bb0_in/3]
49. non_recursive  : [eval_lame_parse_args_start/3]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into eval_lame_parse_args_bb42_in/15
1. SCC is partially evaluated into eval_lame_parse_args_bb86_in/12
2. SCC is partially evaluated into eval_lame_parse_args_bb1_in/6
3. SCC is completely evaluated into other SCCs
4. SCC is completely evaluated into other SCCs
5. SCC is completely evaluated into other SCCs
6. SCC is completely evaluated into other SCCs
7. SCC is completely evaluated into other SCCs
8. SCC is completely evaluated into other SCCs
9. SCC is completely evaluated into other SCCs
10. SCC is completely evaluated into other SCCs
11. SCC is completely evaluated into other SCCs
12. SCC is completely evaluated into other SCCs
13. SCC is completely evaluated into other SCCs
14. SCC is completely evaluated into other SCCs
15. SCC is completely evaluated into other SCCs
16. SCC is completely evaluated into other SCCs
17. SCC is completely evaluated into other SCCs
18. SCC is completely evaluated into other SCCs
19. SCC is completely evaluated into other SCCs
20. SCC is completely evaluated into other SCCs
21. SCC is completely evaluated into other SCCs
22. SCC is completely evaluated into other SCCs
23. SCC is completely evaluated into other SCCs
24. SCC is completely evaluated into other SCCs
25. SCC is completely evaluated into other SCCs
26. SCC is completely evaluated into other SCCs
27. SCC is completely evaluated into other SCCs
28. SCC is completely evaluated into other SCCs
29. SCC is completely evaluated into other SCCs
30. SCC is completely evaluated into other SCCs
31. SCC is partially evaluated into eval_lame_parse_args_bb168_in/2
32. SCC is completely evaluated into other SCCs
33. SCC is completely evaluated into other SCCs
34. SCC is partially evaluated into eval_lame_parse_args_bb165_in/2
35. SCC is completely evaluated into other SCCs
36. SCC is completely evaluated into other SCCs
37. SCC is completely evaluated into other SCCs
38. SCC is completely evaluated into other SCCs
39. SCC is completely evaluated into other SCCs
40. SCC is partially evaluated into eval_lame_parse_args_bb161_in/2
41. SCC is partially evaluated into eval_lame_parse_args_bb159_in/2
42. SCC is completely evaluated into other SCCs
43. SCC is completely evaluated into other SCCs
44. SCC is completely evaluated into other SCCs
45. SCC is partially evaluated into loop_cont_eval_lame_parse_args_bb1_in/3
46. SCC is partially evaluated into eval_lame_parse_args_5/3
47. SCC is completely evaluated into other SCCs
48. SCC is completely evaluated into other SCCs
49. SCC is partially evaluated into eval_lame_parse_args_start/3

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations eval_lame_parse_args_bb42_in/15 
* CE 31 is refined into CE [43] 
* CE 33 is refined into CE [44] 
* CE 32 is refined into CE [45] 


#### Refined cost equations eval_lame_parse_args_bb42_in/15 
* CE 43: eval_lame_parse_args_bb42_in(A,B,C,D,E,B,F,G,A,B,H,I,E,B,F) = 0
     [B>=F,A>=E+1,F>=0,E=H+1,E=C+1,I=0,G=3,D=0] 
* CE 44: eval_lame_parse_args_bb42_in(A,B,C,D,E,B,F,G,A,B,H,I,E,B,F) = 0
     [F>=B+1,A>=E+1,F>=0,E=H+1,E=C+1,I=0,G=3,D=0] 
* CE 45: eval_lame_parse_args_bb42_in(A,B,C,D,E,B,F,G,H,I,J,K,L,M,N) = 1+ eval_lame_parse_args_bb42_in(A,B,O,P,E,B,Q,R,H,I,J,K,L,M,N)
     [B>=F,A>=E+1,F>=0,F+1=Q,E=O+1,E=C+1,R=3,P=0,G=3,D=0] 

### Cost equations --> "Loop" of eval_lame_parse_args_bb42_in/15 
* CEs [45] --> Loop 40 
* CEs [43] --> Loop 41 
* CEs [44] --> Loop 42 

#### Loops of eval_lame_parse_args_bb42_in/15 
* Loop 40: eval_lame_parse_args_bb42_in(A,B,C,D,E,B,F,G,H,I,J,K,L,M,N)->  eval_lame_parse_args_bb42_in(A,B,A',B',E,B,C',D',H,I,J,K,L,M,N)
                  [B>=F,A>=E+1,F>=0,F+1=C',E=A'+1,E=C+1,D'=3,B'=0,G=3,D=0] 
* Loop 41: eval_lame_parse_args_bb42_in(A,B,C,D,E,B,F,G,A,B,C,H,I,B,F) [B>=F,A>=C+2,F>=0,C+1=I,C+1=E,H=0,G=3,D=0] 
* Loop 42: eval_lame_parse_args_bb42_in(A,B,C,D,E,B,F,G,A,B,C,H,I,B,F) [A>=C+2,F>=B+1,F>=0,C+1=I,C+1=E,H=0,G=3,D=0] 

### Ranking functions of CR eval_lame_parse_args_bb42_in(V_argc,V__genre_last,V_i_0,V_err_0,V_152,V_291,V_argUsed_0,B,C,D,E,F,G,H,I) 
* RF of phase [40]: [V_291-V_argUsed_0+1,V__genre_last-V_argUsed_0+1]

#### Partial ranking functions of CR eval_lame_parse_args_bb42_in(V_argc,V__genre_last,V_i_0,V_err_0,V_152,V_291,V_argUsed_0,B,C,D,E,F,G,H,I) 
* Partial RF of phase [40]:
  - RF of loop [40:1]:
    V_291-V_argUsed_0+1
    V__genre_last-V_argUsed_0+1


### Resulting Chains:eval_lame_parse_args_bb42_in(V_argc,V__genre_last,V_i_0,V_err_0,V_152,V_291,V_argUsed_0,B,C,D,E,F,G,H,I) 
* [[40],42]
* [[40],41]
* [42]
* [41]


### Merging Chains  eval_lame_parse_args_bb42_in/15 into  External patterns of execution 
* [[42]] --> 1 
* [[41]] --> 2 
* [[42,[40]]] --> 3 
* [[41,[40]]] --> 4 


### Specialization of cost equations eval_lame_parse_args_bb86_in/12 
* CE 38 is refined into CE [46] 
* CE 36 is refined into CE [47] 
* CE 34 is refined into CE [48] 
* CE 37 is refined into CE [49] 
* CE 35 is refined into CE [50] 


#### Refined cost equations eval_lame_parse_args_bb86_in/12 
* CE 46: eval_lame_parse_args_bb86_in(A,B,C,D,E,F,G,H,A,B,F,G) = 0
     [F>=C+1,A>=C+2,G>=0,1>=G,C+1=E,H=2,D=0] 
* CE 47: eval_lame_parse_args_bb86_in(V_argc,V__genre_last,V_i_0,V_err_0,V_152,V_i_1,V_err_1,B,C,D,E,F) = 1+ eval_lame_parse_args_bb86_in(V_argc,G,H,I,V_152,V_i_1,V_err_1,J,C,D,E,F)
     [V_i_1>=V_152,V_argc>=V_152+1,V_err_1>=0,1>=V_err_1,V_152=H+1,V_152=V_i_0+1,J=2,I=0,B=2,V_err_0=0] 
* CE 48: eval_lame_parse_args_bb86_in(V_argc,V__genre_last,V_i_0,V_err_0,V_152,V_i_1,V_err_1,B,C,D,E,F) = 1+ eval_lame_parse_args_bb86_in(V_argc,G,H,I,V_152,J,V_err_1,K,C,D,E,F)
     [V_i_1>=V_152,V_argc>=V_152+1,V_err_1>=0,1>=V_err_1,V_i_1+1=J,V_152=H+1,V_152=V_i_0+1,K=2,I=0,B=2,V_err_0=0] 
* CE 49: eval_lame_parse_args_bb86_in(V_argc,V__genre_last,V_i_0,V_err_0,V_152,V_i_1,V_err_1,B,C,D,E,F) = 1+ eval_lame_parse_args_bb86_in(V_argc,G,H,I,V_152,V_i_1,J,K,C,D,E,F)
     [V_i_1>=V_152,V_argc>=V_152+1,V_err_1>=0,1>=V_err_1,V_152=H+1,V_152=V_i_0+1,K=2,J=1,I=0,B=2,V_err_0=0] 
* CE 50: eval_lame_parse_args_bb86_in(V_argc,V__genre_last,V_i_0,V_err_0,V_152,V_i_1,V_err_1,B,C,D,E,F) = 1+ eval_lame_parse_args_bb86_in(V_argc,G,H,I,V_152,J,K,L,C,D,E,F)
     [V_i_1>=V_152,V_argc>=V_152+1,V_err_1>=0,1>=V_err_1,V_i_1+1=J,V_152=H+1,V_152=V_i_0+1,L=2,K=1,I=0,B=2,V_err_0=0] 

### Cost equations --> "Loop" of eval_lame_parse_args_bb86_in/12 
* CEs [47] --> Loop 43 
* CEs [48] --> Loop 44 
* CEs [49] --> Loop 45 
* CEs [50] --> Loop 46 
* CEs [46] --> Loop 47 

#### Loops of eval_lame_parse_args_bb86_in/12 
* Loop 43: eval_lame_parse_args_bb86_in(V_argc,V__genre_last,V_i_0,V_err_0,V_152,V_i_1,V_err_1,B,C,D,E,F)->  eval_lame_parse_args_bb86_in(V_argc,V__genre_last',V_i_0,V_err_0',V_152',V_i_1,V_err_1,B',C,D,E,F)
                  [V_i_1>=V_i_0+1,V_argc>=V_i_0+2,V_err_1>=0,1>=V_err_1,V_i_0+1=V_152',V_i_0+1=V_152,B'=2,V_err_0'=0,B=2,V_err_0=0] 
* Loop 44: eval_lame_parse_args_bb86_in(V_argc,V__genre_last,V_i_0,V_err_0,V_152,V_i_1,V_err_1,B,C,D,E,F)->  eval_lame_parse_args_bb86_in(V_argc,V__genre_last',V_i_0,V_err_0',V_152',V_i_1',V_err_1,B',C,D,E,F)
                  [V_i_1>=V_i_0+1,V_argc>=V_i_0+2,V_err_1>=0,1>=V_err_1,V_i_1+1=V_i_1',V_i_0+1=V_152',V_i_0+1=V_152,B'=2,V_err_0'=0,B=2,V_err_0=0] 
* Loop 45: eval_lame_parse_args_bb86_in(V_argc,V__genre_last,V_i_0,V_err_0,V_152,V_i_1,V_err_1,B,C,D,E,F)->  eval_lame_parse_args_bb86_in(V_argc,V__genre_last',V_i_0,V_err_0',V_152',V_i_1,V_err_1',B',C,D,E,F)
                  [V_i_1>=V_i_0+1,V_argc>=V_i_0+2,V_err_1>=0,1>=V_err_1,V_i_0+1=V_152',V_i_0+1=V_152,B'=2,V_err_1'=1,V_err_0'=0,B=2,V_err_0=0] 
* Loop 46: eval_lame_parse_args_bb86_in(V_argc,V__genre_last,V_i_0,V_err_0,V_152,V_i_1,V_err_1,B,C,D,E,F)->  eval_lame_parse_args_bb86_in(V_argc,V__genre_last',V_i_0,V_err_0',V_152',V_i_1',V_err_1',B',C,D,E,F)
                  [V_i_1>=V_i_0+1,V_argc>=V_i_0+2,V_err_1>=0,1>=V_err_1,V_i_1+1=V_i_1',V_i_0+1=V_152',V_i_0+1=V_152,B'=2,V_err_1'=1,V_err_0'=0,B=2,V_err_0=0] 
* Loop 47: eval_lame_parse_args_bb86_in(A,B,C,D,E,F,G,H,A,B,F,G) [F>=C+1,A>=C+2,G>=0,1>=G,C+1=E,H=2,D=0] 

### Ranking functions of CR eval_lame_parse_args_bb86_in(V_argc,V__genre_last,V_i_0,V_err_0,V_152,V_i_1,V_err_1,B,C,D,E,F) 

#### Partial ranking functions of CR eval_lame_parse_args_bb86_in(V_argc,V__genre_last,V_i_0,V_err_0,V_152,V_i_1,V_err_1,B,C,D,E,F) 


### Resulting Chains:eval_lame_parse_args_bb86_in(V_argc,V__genre_last,V_i_0,V_err_0,V_152,V_i_1,V_err_1,B,C,D,E,F) 
* [[43,44,45,46]]...
* [[43,44,45,46],47]
* [47]


### Merging Chains  eval_lame_parse_args_bb86_in/12 into  External patterns of execution 
* [[47],[47,[43,44,45,46]]] --> 1 
* [[[43,44,45,46]]] --> 2 


### Specialization of cost equations eval_lame_parse_args_bb1_in/6 
* CE 19 is refined into CE [51] 
* CE 21 is refined into CE [52] 
* CE 20 is refined into CE [53] 
* CE 16 is refined into CE [54] 
* CE 18 is refined into CE [55] 
* CE 17 is refined into CE [56] 
* CE 13 is refined into CE [57] 
* CE 6 is refined into CE [58] 
* CE 7 is refined into CE [59] 
* CE 8 is refined into CE [60] 
* CE 9 is refined into CE [61] 
* CE 10 is refined into CE [62] 
* CE 11 is refined into CE [63] 
* CE 15 is refined into CE [64] 
* CE 4 is refined into CE [65] 
* CE 5 is refined into CE [66] 
* CE 12 is refined into CE [67,68,69,70] 
* CE 14 is refined into CE [71,72] 


#### Refined cost equations eval_lame_parse_args_bb1_in/6 
* CE 51: eval_lame_parse_args_bb1_in(A,B,C,D,E,B) = 0
     [C+1>=A,E=12] 
* CE 52: eval_lame_parse_args_bb1_in(A,B,C,D,E,B) = 0
     [D>=1,E=12] 
* CE 53: eval_lame_parse_args_bb1_in(A,B,C,D,E,B) = 0
     [0>=D+1,E=12] 
* CE 54: eval_lame_parse_args_bb1_in(A,B,C,D,E,B) = 0
     [C+1>=A,E=11] 
* CE 55: eval_lame_parse_args_bb1_in(A,B,C,D,E,B) = 0
     [D>=1,E=11] 
* CE 56: eval_lame_parse_args_bb1_in(A,B,C,D,E,B) = 0
     [0>=D+1,E=11] 
* CE 57: eval_lame_parse_args_bb1_in(V_argc,V__genre_last,V_i_0,V_err_0,B,C) = 0
     [V_argc>=V_i_0+2,B=10,V_err_0=0] 
* CE 58: eval_lame_parse_args_bb1_in(A,B,C,D,E,B) = 0
     [A>=C+2,E=9,D=0] 
* CE 59: eval_lame_parse_args_bb1_in(V_argc,V__genre_last,V_i_0,V_err_0,B,C) = 0
     [V_argc>=V_i_0+2,B=8,V_err_0=0] 
* CE 60: eval_lame_parse_args_bb1_in(V_argc,V__genre_last,V_i_0,V_err_0,B,C) = 0
     [V_argc>=V_i_0+2,B=7,V_err_0=0] 
* CE 61: eval_lame_parse_args_bb1_in(V_argc,V__genre_last,V_i_0,V_err_0,B,C) = 0
     [V_argc>=V_i_0+2,B=6,V_err_0=0] 
* CE 62: eval_lame_parse_args_bb1_in(V_argc,V__genre_last,V_i_0,V_err_0,B,C) = 0
     [V_argc>=V_i_0+2,B=5,V_err_0=0] 
* CE 63: eval_lame_parse_args_bb1_in(V_argc,V__genre_last,V_i_0,V_err_0,B,C) = 0
     [V_argc>=V_i_0+2,B=4,V_err_0=0] 
* CE 64: eval_lame_parse_args_bb1_in(V_argc,V__genre_last,V_i_0,V_err_0,B,C) = 1+ eval_lame_parse_args_bb1_in(V_argc,V__genre_last,D,E,B,C)
     [V_argc>=V_i_0+2,V_i_0+1=D,E=1,V_err_0=0] 
* CE 65: eval_lame_parse_args_bb1_in(V_argc,V__genre_last,V_i_0,V_err_0,B,C) = 1+ eval_lame_parse_args_bb1_in(V_argc,D,E,F,B,C)
     [V_argc>=V_i_0+2,V_i_0+1=E,F=0,V_err_0=0] 
* CE 66: eval_lame_parse_args_bb1_in(V_argc,V__genre_last,V_i_0,V_err_0,B,C) = 1+ eval_lame_parse_args_bb1_in(V_argc,D,E,F,B,C)
     [V_argc>=V_i_0+2,V_i_0+2=E,F=0,V_err_0=0] 
* CE 67: eval_lame_parse_args_bb1_in(V_argc,V__genre_last,V_i_0,V_err_0,B,C) = 2+ eval_lame_parse_args_bb42_in(V_argc,V__genre_last,D,E,F,V__genre_last,G,H,V_argc,V__genre_last,I,J,F,V__genre_last,K):1+ eval_lame_parse_args_bb1_in(V_argc,V__genre_last,L,M,B,C)
     [V_argc>=F+1,0>=V__genre_last+1,F+1=L,F=I+1,F=D+1,F=V_i_0+1,M=0,K=0,J=0,H=3,G=0,E=0,V_err_0=0] 
* CE 68: eval_lame_parse_args_bb1_in(V_argc,V__genre_last,V_i_0,V_err_0,B,C) = 2+ eval_lame_parse_args_bb42_in(V_argc,V__genre_last,D,E,F,V__genre_last,G,H,V_argc,V__genre_last,I,J,F,V__genre_last,K):2+ eval_lame_parse_args_bb1_in(V_argc,V__genre_last,L,M,B,C)
     [V_argc>=F+1,V__genre_last>=0,F+1=L,F=I+1,F=D+1,F=V_i_0+1,M=0,K=0,J=0,H=3,G=0,E=0,V_err_0=0] 
* CE 69: eval_lame_parse_args_bb1_in(V_argc,V__genre_last,V_i_0,V_err_0,B,C) = 2+ eval_lame_parse_args_bb42_in(V_argc,V__genre_last,D,E,F,V__genre_last,G,H,V_argc,V__genre_last,I,J,F,V__genre_last,K):3+ eval_lame_parse_args_bb1_in(V_argc,V__genre_last,L,M,B,C)
     [V_argc>=F+1,V__genre_last>=0,F+1=L,V__genre_last+1=K,F=I+1,F=D+1,F=V_i_0+1,M=0,J=0,H=3,G=0,E=0,V_err_0=0] 
* CE 70: eval_lame_parse_args_bb1_in(V_argc,V__genre_last,V_i_0,V_err_0,B,C) = 2+ eval_lame_parse_args_bb42_in(V_argc,V__genre_last,D,E,F,V__genre_last,G,H,V_argc,V__genre_last,I,J,F,V__genre_last,K):4+ eval_lame_parse_args_bb1_in(V_argc,V__genre_last,L,M,B,C)
     [V__genre_last>=K,V_argc>=F+1,K>=1,F+1=L,F=I+1,F=D+1,F=V_i_0+1,M=0,J=0,H=3,G=0,E=0,V_err_0=0] 
* CE 71: eval_lame_parse_args_bb1_in(V_argc,V__genre_last,V_i_0,V_err_0,B,C) = 2+ eval_lame_parse_args_bb86_in(V_argc,V__genre_last,V_i_0,D,E,F,G,H,V_argc,I,J,K):1+ eval_lame_parse_args_bb1_in(V_argc,I,J,K,B,C)
     [J>=V_i_0+1,V_argc>=V_i_0+2,K>=0,1>=K,V_i_0+1=F,V_i_0+1=E,H=2,G=0,D=0,V_err_0=0] 
* CE 72: eval_lame_parse_args_bb1_in(V_argc,V__genre_last,V_i_0,V_err_0,B,C) = 2+ eval_lame_parse_args_bb86_in(V_argc,V__genre_last,D,E,F,F,G,H,I,J,K,L):2
     [V_argc>=F+1,F=D+1,F=V_i_0+1,H=2,G=0,E=0,V_err_0=0] 

### Cost equations --> "Loop" of eval_lame_parse_args_bb1_in/6 
* CEs [72] --> Loop 48 
* CEs [64] --> Loop 49 
* CEs [65] --> Loop 50 
* CEs [68,69,70] --> Loop 51 
* CEs [66,67,71] --> Loop 52 
* CEs [51] --> Loop 53 
* CEs [52] --> Loop 54 
* CEs [53] --> Loop 55 
* CEs [54] --> Loop 56 
* CEs [55] --> Loop 57 
* CEs [56] --> Loop 58 
* CEs [57] --> Loop 59 
* CEs [58] --> Loop 60 
* CEs [59] --> Loop 61 
* CEs [60] --> Loop 62 
* CEs [61] --> Loop 63 
* CEs [62] --> Loop 64 
* CEs [63] --> Loop 65 

#### Loops of eval_lame_parse_args_bb1_in/6 
* Loop 48: eval_lame_parse_args_bb1_in(V_argc,V__genre_last,V_i_0,V_err_0,B,C) [V_argc>=V_i_0+2,V_err_0=0] 
* Loop 49: eval_lame_parse_args_bb1_in(V_argc,V__genre_last,V_i_0,V_err_0,B,C)->  eval_lame_parse_args_bb1_in(V_argc,V__genre_last,V_i_0',V_err_0',B,C)
                  [V_argc>=V_i_0+2,V_i_0+1=V_i_0',V_err_0'=1,V_err_0=0] 
* Loop 50: eval_lame_parse_args_bb1_in(V_argc,V__genre_last,V_i_0,V_err_0,B,C)->  eval_lame_parse_args_bb1_in(V_argc,V__genre_last',V_i_0',V_err_0',B,C)
                  [V_argc>=V_i_0+2,V_i_0+1=V_i_0',V_err_0'=0,V_err_0=0] 
* Loop 51: eval_lame_parse_args_bb1_in(V_argc,V__genre_last,V_i_0,V_err_0,B,C)->  eval_lame_parse_args_bb1_in(V_argc,V__genre_last,V_i_0',V_err_0',B,C)
                  [V_argc>=V_i_0+2,V__genre_last>=0,V_i_0+2=V_i_0',V_err_0'=0,V_err_0=0] 
* Loop 52: eval_lame_parse_args_bb1_in(V_argc,V__genre_last,V_i_0,V_err_0,B,C)->  eval_lame_parse_args_bb1_in(V_argc,V__genre_last',V_i_0',V_err_0',B,C)
                  [V_i_0'>=V_i_0+1,V_argc>=V_i_0+2,V_err_0'>=0,1>=V_err_0',V_err_0=0] 
* Loop 53: eval_lame_parse_args_bb1_in(A,B,C,D,E,B) [C+1>=A,E=12] 
* Loop 54: eval_lame_parse_args_bb1_in(A,B,C,D,E,B) [D>=1,E=12] 
* Loop 55: eval_lame_parse_args_bb1_in(A,B,C,D,E,B) [0>=D+1,E=12] 
* Loop 56: eval_lame_parse_args_bb1_in(A,B,C,D,E,B) [C+1>=A,E=11] 
* Loop 57: eval_lame_parse_args_bb1_in(A,B,C,D,E,B) [D>=1,E=11] 
* Loop 58: eval_lame_parse_args_bb1_in(A,B,C,D,E,B) [0>=D+1,E=11] 
* Loop 59: eval_lame_parse_args_bb1_in(V_argc,V__genre_last,V_i_0,V_err_0,B,C) [V_argc>=V_i_0+2,B=10,V_err_0=0] 
* Loop 60: eval_lame_parse_args_bb1_in(A,B,C,D,E,B) [A>=C+2,E=9,D=0] 
* Loop 61: eval_lame_parse_args_bb1_in(V_argc,V__genre_last,V_i_0,V_err_0,B,C) [V_argc>=V_i_0+2,B=8,V_err_0=0] 
* Loop 62: eval_lame_parse_args_bb1_in(V_argc,V__genre_last,V_i_0,V_err_0,B,C) [V_argc>=V_i_0+2,B=7,V_err_0=0] 
* Loop 63: eval_lame_parse_args_bb1_in(V_argc,V__genre_last,V_i_0,V_err_0,B,C) [V_argc>=V_i_0+2,B=6,V_err_0=0] 
* Loop 64: eval_lame_parse_args_bb1_in(V_argc,V__genre_last,V_i_0,V_err_0,B,C) [V_argc>=V_i_0+2,B=5,V_err_0=0] 
* Loop 65: eval_lame_parse_args_bb1_in(V_argc,V__genre_last,V_i_0,V_err_0,B,C) [V_argc>=V_i_0+2,B=4,V_err_0=0] 

### Ranking functions of CR eval_lame_parse_args_bb1_in(V_argc,V__genre_last,V_i_0,V_err_0,B,C) 
* RF of phase [50,51,52]: [V_argc-V_i_0-1]

#### Partial ranking functions of CR eval_lame_parse_args_bb1_in(V_argc,V__genre_last,V_i_0,V_err_0,B,C) 
* Partial RF of phase [50,51,52]:
  - RF of loop [50:1,51:1,52:1]:
    V_argc-V_i_0-1


### Resulting Chains:eval_lame_parse_args_bb1_in(V_argc,V__genre_last,V_i_0,V_err_0,B,C) 
* [[50,51,52],65]
* [[50,51,52],64]
* [[50,51,52],63]
* [[50,51,52],62]
* [[50,51,52],61]
* [[50,51,52],60]
* [[50,51,52],59]
* [[50,51,52],57]
* [[50,51,52],56]
* [[50,51,52],54]
* [[50,51,52],53]
* [[50,51,52],49,57]
* [[50,51,52],49,56]
* [[50,51,52],49,54]
* [[50,51,52],49,53]
* [[50,51,52],48]...
* [65]
* [64]
* [63]
* [62]
* [61]
* [60]
* [59]
* [56]
* [53]
* [49,57]
* [49,56]
* [49,54]
* [49,53]
* [48]...


### Merging Chains  eval_lame_parse_args_bb1_in/6 into  External patterns of execution 
* [[65],[65,[50,51,52]]] --> 1 
* [[64],[64,[50,51,52]]] --> 2 
* [[63],[63,[50,51,52]]] --> 3 
* [[62],[62,[50,51,52]]] --> 4 
* [[61],[61,[50,51,52]]] --> 5 
* [[60]] --> 6 
* [[60,[50,51,52]]] --> 7 
* [[59],[59,[50,51,52]]] --> 8 
* [[56,49],[57,49],[56,49,[50,51,52]],[57,49,[50,51,52]],[56,[50,51,52]],[57,[50,51,52]]] --> 9 
* [[53,49],[54,49],[53,49,[50,51,52]],[54,49,[50,51,52]],[53,[50,51,52]],[54,[50,51,52]]] --> 10 
* [[56]] --> 11 
* [[53]] --> 12 
* [[48]] --> 13 
* [[48,[50,51,52]]] --> 14 


### Specialization of cost equations eval_lame_parse_args_bb168_in/2 
* CE 42 is refined into CE [73] 


#### Refined cost equations eval_lame_parse_args_bb168_in/2 
* CE 73: eval_lame_parse_args_bb168_in(V__genre_last,B) = 0
     [] 

### Cost equations --> "Loop" of eval_lame_parse_args_bb168_in/2 
* CEs [73] --> Loop 66 

#### Loops of eval_lame_parse_args_bb168_in/2 
* Loop 66: eval_lame_parse_args_bb168_in(V__genre_last,B) [] 

### Ranking functions of CR eval_lame_parse_args_bb168_in(V__genre_last,B) 

#### Partial ranking functions of CR eval_lame_parse_args_bb168_in(V__genre_last,B) 


### Resulting Chains:eval_lame_parse_args_bb168_in(V__genre_last,B) 
* [66]


### Merging Chains  eval_lame_parse_args_bb168_in/2 into  External patterns of execution 
* [[66]] --> 1 


### Specialization of cost equations eval_lame_parse_args_bb165_in/2 
* CE 41 is refined into CE [74] 


#### Refined cost equations eval_lame_parse_args_bb165_in/2 
* CE 74: eval_lame_parse_args_bb165_in(V__genre_last,B) = 0+ eval_lame_parse_args_bb168_in(C,B):1
     [] 

### Cost equations --> "Loop" of eval_lame_parse_args_bb165_in/2 
* CEs [74] --> Loop 67 

#### Loops of eval_lame_parse_args_bb165_in/2 
* Loop 67: eval_lame_parse_args_bb165_in(V__genre_last,B) [] 

### Ranking functions of CR eval_lame_parse_args_bb165_in(V__genre_last,B) 

#### Partial ranking functions of CR eval_lame_parse_args_bb165_in(V__genre_last,B) 


### Resulting Chains:eval_lame_parse_args_bb165_in(V__genre_last,B) 
* [67]


### Merging Chains  eval_lame_parse_args_bb165_in/2 into  External patterns of execution 
* [[67]] --> 1 


### Specialization of cost equations eval_lame_parse_args_bb161_in/2 
* CE 40 is refined into CE [75] 


#### Refined cost equations eval_lame_parse_args_bb161_in/2 
* CE 75: eval_lame_parse_args_bb161_in(V__genre_last,B) = 0+ eval_lame_parse_args_bb165_in(V__genre_last,B):1
     [] 

### Cost equations --> "Loop" of eval_lame_parse_args_bb161_in/2 
* CEs [75] --> Loop 68 

#### Loops of eval_lame_parse_args_bb161_in/2 
* Loop 68: eval_lame_parse_args_bb161_in(V__genre_last,B) [] 

### Ranking functions of CR eval_lame_parse_args_bb161_in(V__genre_last,B) 

#### Partial ranking functions of CR eval_lame_parse_args_bb161_in(V__genre_last,B) 


### Resulting Chains:eval_lame_parse_args_bb161_in(V__genre_last,B) 
* [68]


### Merging Chains  eval_lame_parse_args_bb161_in/2 into  External patterns of execution 
* [[68]] --> 1 


### Specialization of cost equations eval_lame_parse_args_bb159_in/2 
* CE 39 is refined into CE [76] 


#### Refined cost equations eval_lame_parse_args_bb159_in/2 
* CE 76: eval_lame_parse_args_bb159_in(V__genre_last,B) = 0+ eval_lame_parse_args_bb161_in(C,B):1
     [] 

### Cost equations --> "Loop" of eval_lame_parse_args_bb159_in/2 
* CEs [76] --> Loop 69 

#### Loops of eval_lame_parse_args_bb159_in/2 
* Loop 69: eval_lame_parse_args_bb159_in(V__genre_last,B) [] 

### Ranking functions of CR eval_lame_parse_args_bb159_in(V__genre_last,B) 

#### Partial ranking functions of CR eval_lame_parse_args_bb159_in(V__genre_last,B) 


### Resulting Chains:eval_lame_parse_args_bb159_in(V__genre_last,B) 
* [69]


### Merging Chains  eval_lame_parse_args_bb159_in/2 into  External patterns of execution 
* [[69]] --> 1 


### Specialization of cost equations loop_cont_eval_lame_parse_args_bb1_in/3 
* CE 30 is refined into CE [77] 
* CE 29 is refined into CE [78] 
* CE 28 is refined into CE [79] 
* CE 27 is refined into CE [80] 
* CE 26 is refined into CE [81] 
* CE 25 is refined into CE [82] 
* CE 24 is refined into CE [83] 
* CE 23 is refined into CE [84] 
* CE 22 is refined into CE [85] 


#### Refined cost equations loop_cont_eval_lame_parse_args_bb1_in/3 
* CE 77: loop_cont_eval_lame_parse_args_bb1_in(C,A,B) = 0+ eval_lame_parse_args_bb159_in(A,B):1
     [C=12] 
* CE 78: loop_cont_eval_lame_parse_args_bb1_in(C,A,B) = 0+ eval_lame_parse_args_bb159_in(A,B):1
     [C=11] 
* CE 79: loop_cont_eval_lame_parse_args_bb1_in(C,A,B) = 0
     [C=10] 
* CE 80: loop_cont_eval_lame_parse_args_bb1_in(C,A,B) = 0
     [C=9] 
* CE 81: loop_cont_eval_lame_parse_args_bb1_in(C,A,B) = 0
     [C=8] 
* CE 82: loop_cont_eval_lame_parse_args_bb1_in(C,A,B) = 0
     [C=7] 
* CE 83: loop_cont_eval_lame_parse_args_bb1_in(C,A,B) = 0
     [C=6] 
* CE 84: loop_cont_eval_lame_parse_args_bb1_in(C,A,B) = 0
     [C=5] 
* CE 85: loop_cont_eval_lame_parse_args_bb1_in(C,A,B) = 0
     [C=4] 

### Cost equations --> "Loop" of loop_cont_eval_lame_parse_args_bb1_in/3 
* CEs [77] --> Loop 70 
* CEs [78] --> Loop 71 
* CEs [79] --> Loop 72 
* CEs [80] --> Loop 73 
* CEs [81] --> Loop 74 
* CEs [82] --> Loop 75 
* CEs [83] --> Loop 76 
* CEs [84] --> Loop 77 
* CEs [85] --> Loop 78 

#### Loops of loop_cont_eval_lame_parse_args_bb1_in/3 
* Loop 70: loop_cont_eval_lame_parse_args_bb1_in(C,A,B) [C=12] 
* Loop 71: loop_cont_eval_lame_parse_args_bb1_in(C,A,B) [C=11] 
* Loop 72: loop_cont_eval_lame_parse_args_bb1_in(C,A,B) [C=10] 
* Loop 73: loop_cont_eval_lame_parse_args_bb1_in(C,A,B) [C=9] 
* Loop 74: loop_cont_eval_lame_parse_args_bb1_in(C,A,B) [C=8] 
* Loop 75: loop_cont_eval_lame_parse_args_bb1_in(C,A,B) [C=7] 
* Loop 76: loop_cont_eval_lame_parse_args_bb1_in(C,A,B) [C=6] 
* Loop 77: loop_cont_eval_lame_parse_args_bb1_in(C,A,B) [C=5] 
* Loop 78: loop_cont_eval_lame_parse_args_bb1_in(C,A,B) [C=4] 

### Ranking functions of CR loop_cont_eval_lame_parse_args_bb1_in(C,A,B) 

#### Partial ranking functions of CR loop_cont_eval_lame_parse_args_bb1_in(C,A,B) 


### Resulting Chains:loop_cont_eval_lame_parse_args_bb1_in(C,A,B) 
* [78]
* [77]
* [76]
* [75]
* [74]
* [73]
* [72]
* [71]
* [70]


### Merging Chains  loop_cont_eval_lame_parse_args_bb1_in/3 into  External patterns of execution 
* [[78]] --> 1 
* [[77]] --> 2 
* [[76]] --> 3 
* [[75]] --> 4 
* [[74]] --> 5 
* [[73]] --> 6 
* [[72]] --> 7 
* [[71]] --> 8 
* [[70]] --> 9 


### Specialization of cost equations eval_lame_parse_args_5/3 
* CE 3 is refined into CE [86,87,88,89,90,91,92,93,94,95,96,97,98,99] 


#### Refined cost equations eval_lame_parse_args_5/3 
* CE 86: eval_lame_parse_args_5(V_argc,V__genre_last,B) = 1+ eval_lame_parse_args_bb1_in(V_argc,V__genre_last,C,D,E,F):1+ loop_cont_eval_lame_parse_args_bb1_in(G,F,B):1
     [V_argc>=2,G=4,E=4,D=0,C=0] 
* CE 87: eval_lame_parse_args_5(V_argc,V__genre_last,B) = 1+ eval_lame_parse_args_bb1_in(V_argc,V__genre_last,C,D,E,F):2+ loop_cont_eval_lame_parse_args_bb1_in(G,F,B):2
     [V_argc>=2,G=5,E=5,D=0,C=0] 
* CE 88: eval_lame_parse_args_5(V_argc,V__genre_last,B) = 1+ eval_lame_parse_args_bb1_in(V_argc,V__genre_last,C,D,E,F):3+ loop_cont_eval_lame_parse_args_bb1_in(G,F,B):3
     [V_argc>=2,G=6,E=6,D=0,C=0] 
* CE 89: eval_lame_parse_args_5(V_argc,V__genre_last,B) = 1+ eval_lame_parse_args_bb1_in(V_argc,V__genre_last,C,D,E,F):4+ loop_cont_eval_lame_parse_args_bb1_in(G,F,B):4
     [V_argc>=2,G=7,E=7,D=0,C=0] 
* CE 90: eval_lame_parse_args_5(V_argc,V__genre_last,B) = 1+ eval_lame_parse_args_bb1_in(V_argc,V__genre_last,C,D,E,F):5+ loop_cont_eval_lame_parse_args_bb1_in(G,F,B):5
     [V_argc>=2,G=8,E=8,D=0,C=0] 
* CE 91: eval_lame_parse_args_5(V_argc,V__genre_last,B) = 1+ eval_lame_parse_args_bb1_in(V_argc,V__genre_last,C,D,E,V__genre_last):6+ loop_cont_eval_lame_parse_args_bb1_in(F,V__genre_last,B):6
     [V_argc>=2,F=9,E=9,D=0,C=0] 
* CE 92: eval_lame_parse_args_5(V_argc,V__genre_last,B) = 1+ eval_lame_parse_args_bb1_in(V_argc,V__genre_last,C,D,E,F):7+ loop_cont_eval_lame_parse_args_bb1_in(G,F,B):6
     [V_argc>=3,G=9,E=9,D=0,C=0] 
* CE 93: eval_lame_parse_args_5(V_argc,V__genre_last,B) = 1+ eval_lame_parse_args_bb1_in(V_argc,V__genre_last,C,D,E,F):8+ loop_cont_eval_lame_parse_args_bb1_in(G,F,B):7
     [V_argc>=2,G=10,E=10,D=0,C=0] 
* CE 94: eval_lame_parse_args_5(V_argc,V__genre_last,B) = 1+ eval_lame_parse_args_bb1_in(V_argc,V__genre_last,C,D,E,F):9+ loop_cont_eval_lame_parse_args_bb1_in(G,F,B):8
     [V_argc>=2,G=11,E=11,D=0,C=0] 
* CE 95: eval_lame_parse_args_5(V_argc,V__genre_last,B) = 1+ eval_lame_parse_args_bb1_in(V_argc,V__genre_last,C,D,E,F):10+ loop_cont_eval_lame_parse_args_bb1_in(G,F,B):9
     [V_argc>=2,G=12,E=12,D=0,C=0] 
* CE 96: eval_lame_parse_args_5(V_argc,V__genre_last,B) = 1+ eval_lame_parse_args_bb1_in(V_argc,V__genre_last,C,D,E,V__genre_last):11+ loop_cont_eval_lame_parse_args_bb1_in(F,V__genre_last,B):8
     [1>=V_argc,F=11,E=11,D=0,C=0] 
* CE 97: eval_lame_parse_args_5(V_argc,V__genre_last,B) = 1+ eval_lame_parse_args_bb1_in(V_argc,V__genre_last,C,D,E,V__genre_last):12+ loop_cont_eval_lame_parse_args_bb1_in(F,V__genre_last,B):9
     [1>=V_argc,F=12,E=12,D=0,C=0] 
* CE 98: eval_lame_parse_args_5(V_argc,V__genre_last,B) = 1+ eval_lame_parse_args_bb1_in(V_argc,V__genre_last,C,D,E,F):13
     [V_argc>=2,D=0,C=0] 
* CE 99: eval_lame_parse_args_5(V_argc,V__genre_last,B) = 1+ eval_lame_parse_args_bb1_in(V_argc,V__genre_last,C,D,E,F):14
     [V_argc>=3,D=0,C=0] 

### Cost equations --> "Loop" of eval_lame_parse_args_5/3 
* CEs [98,99] --> Loop 79 
* CEs [86,87,88,89,90,91,92,93,94,95] --> Loop 80 
* CEs [96,97] --> Loop 81 

#### Loops of eval_lame_parse_args_5/3 
* Loop 79: eval_lame_parse_args_5(V_argc,V__genre_last,B) [V_argc>=2] 
* Loop 80: eval_lame_parse_args_5(V_argc,V__genre_last,B) [V_argc>=2] 
* Loop 81: eval_lame_parse_args_5(V_argc,V__genre_last,B) [1>=V_argc] 

### Ranking functions of CR eval_lame_parse_args_5(V_argc,V__genre_last,B) 

#### Partial ranking functions of CR eval_lame_parse_args_5(V_argc,V__genre_last,B) 


### Resulting Chains:eval_lame_parse_args_5(V_argc,V__genre_last,B) 
* [81]
* [80]
* [79]...


### Merging Chains  eval_lame_parse_args_5/3 into  External patterns of execution 
* [[81]] --> 1 
* [[80]] --> 2 
* [[79]] --> 3 


### Specialization of cost equations eval_lame_parse_args_start/3 
* CE 2 is refined into CE [100,101,102] 


#### Refined cost equations eval_lame_parse_args_start/3 
* CE 100: eval_lame_parse_args_start(V_argc,V__genre_last,B) = 0+ eval_lame_parse_args_5(V_argc,C,B):1
     [1>=V_argc] 
* CE 101: eval_lame_parse_args_start(V_argc,V__genre_last,B) = 0+ eval_lame_parse_args_5(V_argc,C,B):2
     [V_argc>=2] 
* CE 102: eval_lame_parse_args_start(V_argc,V__genre_last,B) = 0+ eval_lame_parse_args_5(V_argc,C,B):3
     [V_argc>=2] 

### Cost equations --> "Loop" of eval_lame_parse_args_start/3 
* CEs [102] --> Loop 82 
* CEs [101] --> Loop 83 
* CEs [100] --> Loop 84 

#### Loops of eval_lame_parse_args_start/3 
* Loop 82: eval_lame_parse_args_start(V_argc,V__genre_last,B) [V_argc>=2] 
* Loop 83: eval_lame_parse_args_start(V_argc,V__genre_last,B) [V_argc>=2] 
* Loop 84: eval_lame_parse_args_start(V_argc,V__genre_last,B) [1>=V_argc] 

### Ranking functions of CR eval_lame_parse_args_start(V_argc,V__genre_last,B) 

#### Partial ranking functions of CR eval_lame_parse_args_start(V_argc,V__genre_last,B) 


### Resulting Chains:eval_lame_parse_args_start(V_argc,V__genre_last,B) 
* [84]
* [83]
* [82]...


### Merging Chains  eval_lame_parse_args_start/3 into  External patterns of execution 
* [[84]] --> 1 
* [[83]] --> 2 
* [[82]] --> 3 


Computing Bounds
=====================================

#### Cost of loops [40] 

 * loop 40:eval_lame_parse_args_bb42_in(V_argc,V__genre_last,V_i_0,V_err_0,V_152,V_291,V_argUsed_0,B,C,D,E,F,G,H,I) -> [eval_lame_parse_args_bb42_in(V_argc',V__genre_last',V_i_0',V_err_0',V_152',V_291',V_argUsed_0',B',C',D',E',F',G',H',I')] 
1
#### Cost of phase [40]:eval_lame_parse_args_bb42_in(V_argc,V__genre_last,V_i_0,V_err_0,V_152,V_291,V_argUsed_0,B,C,D,E,F,G,H,I) -> [eval_lame_parse_args_bb42_in(V_argc',V__genre_last',V_i_0',V_err_0',V_152',V_291',V_argUsed_0',B',C',D',E',F',G',H',I')] 
1*it(40)+0
  Such that:it(40) =< V__genre_last-V_argUsed_0+1
it(40) =< V__genre_last-V_argUsed_0-V__genre_last'+V_argUsed_0'
it(40) =< V_291-V_argUsed_0+1
it(40) =< V_291-V_argUsed_0-V_291'+V_argUsed_0'

#### Cost of phase [40]:eval_lame_parse_args_bb42_in(V_argc,V__genre_last,V_i_0,V_err_0,V_152,V_291,V_argUsed_0,B,C,D,E,F,G,H,I) -> [eval_lame_parse_args_bb42_in(V_argc',V__genre_last',V_i_0',V_err_0',V_152',V_291',V_argUsed_0',B',C',D',E',F',G',H',I')] 
1*it(40)+0
  Such that:it(40) =< V__genre_last-V_argUsed_0+1
it(40) =< V__genre_last-V_argUsed_0-V__genre_last'+V_argUsed_0'
it(40) =< V_291-V_argUsed_0+1
it(40) =< V_291-V_argUsed_0-V_291'+V_argUsed_0'

#### Cost of chains of eval_lame_parse_args_bb42_in(V_argc,V__genre_last,V_i_0,V_err_0,V_152,V_291,V_argUsed_0,B,C,D,E,F,G,H,I):
* Chain [[40],42]: 1*it(40)+0
  Such that:it(40) =< -V_argUsed_0+H+1

  with precondition: [V_err_0=0,B=3,F=0,V_i_0+1=V_152,V__genre_last=V_291,V_argc=C,V__genre_last=D,V_i_0=E,V_i_0+1=G,V__genre_last=H,V__genre_last+1=I,V_argUsed_0>=0,V_argc>=V_i_0+2,V__genre_last>=V_argUsed_0] 

* Chain [[40],41]: 1*it(40)+0
  Such that:it(40) =< -V_argUsed_0+I

  with precondition: [V_err_0=0,B=3,F=0,V_i_0+1=V_152,V__genre_last=V_291,V_argc=C,V__genre_last=D,V_i_0=E,V_i_0+1=G,V__genre_last=H,V_argUsed_0>=0,V_argc>=V_i_0+2,I>=V_argUsed_0+1,V__genre_last>=I] 

* Chain [42]: 0
  with precondition: [V_err_0=0,B=3,F=0,V_291=V__genre_last,V_152=V_i_0+1,V_argc=C,V_291=D,V_152=E+1,V_152=G,V_291=H,V_argUsed_0=I,V_argUsed_0>=0,V_argc>=V_152+1,V_argUsed_0>=V_291+1] 

* Chain [41]: 0
  with precondition: [V_err_0=0,B=3,F=0,V_291=V__genre_last,V_152=V_i_0+1,V_argc=C,V_291=D,V_152=E+1,V_152=G,V_291=H,V_argUsed_0=I,V_argUsed_0>=0,V_argc>=V_152+1,V_291>=V_argUsed_0] 


#### Cost of loops [43,44,45,46] 

 * loop 43:eval_lame_parse_args_bb86_in(V_argc,V__genre_last,V_i_0,V_err_0,V_152,V_i_1,V_err_1,B,C,D,E,F) -> [eval_lame_parse_args_bb86_in(V_argc',V__genre_last',V_i_0',V_err_0',V_152',V_i_1',V_err_1',B',C',D',E',F')] 
1
 * loop 44:eval_lame_parse_args_bb86_in(V_argc,V__genre_last,V_i_0,V_err_0,V_152,V_i_1,V_err_1,B,C,D,E,F) -> [eval_lame_parse_args_bb86_in(V_argc',V__genre_last',V_i_0',V_err_0',V_152',V_i_1',V_err_1',B',C',D',E',F')] 
1
 * loop 45:eval_lame_parse_args_bb86_in(V_argc,V__genre_last,V_i_0,V_err_0,V_152,V_i_1,V_err_1,B,C,D,E,F) -> [eval_lame_parse_args_bb86_in(V_argc',V__genre_last',V_i_0',V_err_0',V_152',V_i_1',V_err_1',B',C',D',E',F')] 
1
 * loop 46:eval_lame_parse_args_bb86_in(V_argc,V__genre_last,V_i_0,V_err_0,V_152,V_i_1,V_err_1,B,C,D,E,F) -> [eval_lame_parse_args_bb86_in(V_argc',V__genre_last',V_i_0',V_err_0',V_152',V_i_1',V_err_1',B',C',D',E',F')] 
1
#### Cost of phase [43,44,45,46]:eval_lame_parse_args_bb86_in(V_argc,V__genre_last,V_i_0,V_err_0,V_152,V_i_1,V_err_1,B,C,D,E,F) -> [eval_lame_parse_args_bb86_in(V_argc',V__genre_last',V_i_0',V_err_0',V_152',V_i_1',V_err_1',B',C',D',E',F')] 
4*it(43)+0
#### Cost of phase [43,44,45,46]:eval_lame_parse_args_bb86_in(V_argc,V__genre_last,V_i_0,V_err_0,V_152,V_i_1,V_err_1,B,C,D,E,F) -> [eval_lame_parse_args_bb86_in(V_argc',V__genre_last',V_i_0',V_err_0',V_152',V_i_1',V_err_1',B',C',D',E',F')] 
4*it(43)+0
#### Cost of chains of eval_lame_parse_args_bb86_in(V_argc,V__genre_last,V_i_0,V_err_0,V_152,V_i_1,V_err_1,B,C,D,E,F):
* Chain [[43,44,45,46]]...: 4*it(43)+0
  with precondition: [V_argc>=V_152+1,V_i_1>=V_152,V_i_0+1=V_152,V_err_0=0,1>=V_err_1,V_err_1>=0,B=2] 

* Chain [[43,44,45,46],47]: 4*it(43)+0
  with precondition: [V_err_0=0,B=2,V_152=V_i_0+1,V_argc=C,1>=F,V_err_1>=0,V_argc>=V_152+1,V_i_1>=V_152,E>=V_i_1,F>=V_err_1] 

* Chain [47]: 0
  with precondition: [V_err_0=0,B=2,D=V__genre_last,V_152=V_i_0+1,V_argc=C,V_i_1=E,V_err_1=F,1>=V_err_1,V_err_1>=0,V_argc>=V_152+1,V_i_1>=V_152] 


#### Cost of loops [50,51,52] 

 * loop 50:eval_lame_parse_args_bb1_in(V_argc,V__genre_last,V_i_0,V_err_0,B,C) -> [eval_lame_parse_args_bb1_in(V_argc',V__genre_last',V_i_0',V_err_0',B',C')] 
1
 * loop 51:eval_lame_parse_args_bb1_in(V_argc,V__genre_last,V_i_0,V_err_0,B,C) -> [eval_lame_parse_args_bb1_in(V_argc',V__genre_last',V_i_0',V_err_0',B',C')] 
1*s(5)+1*s(4)+2
  Such that:s(4) =< V__genre_last
s(5) =< V__genre_last'+1

 * loop 52:eval_lame_parse_args_bb1_in(V_argc,V__genre_last,V_i_0,V_err_0,B,C) -> [eval_lame_parse_args_bb1_in(V_argc',V__genre_last',V_i_0',V_err_0',B',C')] 
1*s(7)+0
#### Cost of phase [50,51,52]:eval_lame_parse_args_bb1_in(V_argc,V__genre_last,V_i_0,V_err_0,B,C) -> [eval_lame_parse_args_bb1_in(V_argc',V__genre_last',V_i_0',V_err_0',B',C')] 
3*it(50)+1*s(8)+1*s(9)+1*s(10)+0
  Such that:aux(6) =< V_argc-V_i_0
aux(7) =< V_argc-V_i_0-V_argc'+V_i_0'
it(50) =< aux(6)
it(50) =< aux(7)

#### Cost of phase [50,51,52]:eval_lame_parse_args_bb1_in(V_argc,V__genre_last,V_i_0,V_err_0,B,C) -> [eval_lame_parse_args_bb1_in(V_argc',V__genre_last',V_i_0',V_err_0',B',C')] 
3*it(50)+1*s(8)+1*s(9)+1*s(10)+0
  Such that:aux(6) =< V_argc-V_i_0
aux(7) =< V_argc-V_i_0-V_argc'+V_i_0'
it(50) =< aux(6)
it(50) =< aux(7)

#### Cost of phase [50,51,52]:eval_lame_parse_args_bb1_in(V_argc,V__genre_last,V_i_0,V_err_0,B,C) -> [eval_lame_parse_args_bb1_in(V_argc',V__genre_last',V_i_0',V_err_0',B',C')] 
3*it(50)+1*s(8)+1*s(9)+1*s(10)+0
  Such that:aux(6) =< V_argc-V_i_0
aux(7) =< V_argc-V_i_0-V_argc'+V_i_0'
it(50) =< aux(6)
it(50) =< aux(7)

#### Cost of phase [50,51,52]:eval_lame_parse_args_bb1_in(V_argc,V__genre_last,V_i_0,V_err_0,B,C) -> [eval_lame_parse_args_bb1_in(V_argc',V__genre_last',V_i_0',V_err_0',B',C')] 
3*it(50)+1*s(8)+1*s(9)+1*s(10)+0
  Such that:aux(6) =< V_argc-V_i_0
aux(7) =< V_argc-V_i_0-V_argc'+V_i_0'
it(50) =< aux(6)
it(50) =< aux(7)

#### Cost of phase [50,51,52]:eval_lame_parse_args_bb1_in(V_argc,V__genre_last,V_i_0,V_err_0,B,C) -> [eval_lame_parse_args_bb1_in(V_argc',V__genre_last',V_i_0',V_err_0',B',C')] 
3*it(50)+1*s(8)+1*s(9)+1*s(10)+0
  Such that:aux(6) =< V_argc-V_i_0
aux(7) =< V_argc-V_i_0-V_argc'+V_i_0'
it(50) =< aux(6)
it(50) =< aux(7)

#### Cost of phase [50,51,52]:eval_lame_parse_args_bb1_in(V_argc,V__genre_last,V_i_0,V_err_0,B,C) -> [eval_lame_parse_args_bb1_in(V_argc',V__genre_last',V_i_0',V_err_0',B',C')] 
3*it(50)+1*s(8)+1*s(9)+1*s(10)+0
  Such that:aux(6) =< V_argc-V_i_0
aux(7) =< V_argc-V_i_0-V_argc'+V_i_0'
it(50) =< aux(6)
it(50) =< aux(7)

#### Cost of phase [50,51,52]:eval_lame_parse_args_bb1_in(V_argc,V__genre_last,V_i_0,V_err_0,B,C) -> [eval_lame_parse_args_bb1_in(V_argc',V__genre_last',V_i_0',V_err_0',B',C')] 
3*it(50)+1*s(8)+1*s(9)+1*s(10)+0
  Such that:aux(6) =< V_argc-V_i_0
aux(7) =< V_argc-V_i_0-V_argc'+V_i_0'
it(50) =< aux(6)
it(50) =< aux(7)

#### Cost of phase [50,51,52]:eval_lame_parse_args_bb1_in(V_argc,V__genre_last,V_i_0,V_err_0,B,C) -> [eval_lame_parse_args_bb1_in(V_argc',V__genre_last',V_i_0',V_err_0',B',C')] 
3*it(50)+1*s(8)+1*s(9)+1*s(10)+0
  Such that:aux(6) =< V_argc-V_i_0
aux(7) =< V_argc-V_i_0-V_argc'+V_i_0'
it(50) =< aux(6)
it(50) =< aux(7)

#### Cost of phase [50,51,52]:eval_lame_parse_args_bb1_in(V_argc,V__genre_last,V_i_0,V_err_0,B,C) -> [eval_lame_parse_args_bb1_in(V_argc',V__genre_last',V_i_0',V_err_0',B',C')] 
3*it(50)+1*s(8)+1*s(9)+1*s(10)+0
  Such that:aux(6) =< V_argc-V_i_0
aux(7) =< V_argc-V_i_0-V_argc'+V_i_0'
it(50) =< aux(6)
it(50) =< aux(7)

#### Cost of phase [50,51,52]:eval_lame_parse_args_bb1_in(V_argc,V__genre_last,V_i_0,V_err_0,B,C) -> [eval_lame_parse_args_bb1_in(V_argc',V__genre_last',V_i_0',V_err_0',B',C')] 
3*it(50)+1*s(8)+1*s(9)+1*s(10)+0
  Such that:aux(6) =< V_argc-V_i_0
aux(7) =< V_argc-V_i_0-V_argc'+V_i_0'
it(50) =< aux(6)
it(50) =< aux(7)

#### Cost of phase [50,51,52]:eval_lame_parse_args_bb1_in(V_argc,V__genre_last,V_i_0,V_err_0,B,C) -> [eval_lame_parse_args_bb1_in(V_argc',V__genre_last',V_i_0',V_err_0',B',C')] 
3*it(50)+1*s(8)+1*s(9)+1*s(10)+0
  Such that:aux(6) =< V_argc-V_i_0
aux(7) =< V_argc-V_i_0-V_argc'+V_i_0'
it(50) =< aux(6)
it(50) =< aux(7)

#### Cost of phase [50,51,52]:eval_lame_parse_args_bb1_in(V_argc,V__genre_last,V_i_0,V_err_0,B,C) -> [eval_lame_parse_args_bb1_in(V_argc',V__genre_last',V_i_0',V_err_0',B',C')] 
3*it(50)+1*s(8)+1*s(9)+1*s(10)+0
  Such that:aux(6) =< V_argc-V_i_0
aux(7) =< V_argc-V_i_0-V_argc'+V_i_0'
it(50) =< aux(6)
it(50) =< aux(7)

#### Cost of phase [50,51,52]:eval_lame_parse_args_bb1_in(V_argc,V__genre_last,V_i_0,V_err_0,B,C) -> [eval_lame_parse_args_bb1_in(V_argc',V__genre_last',V_i_0',V_err_0',B',C')] 
3*it(50)+1*s(8)+1*s(9)+1*s(10)+0
  Such that:aux(6) =< V_argc-V_i_0
aux(7) =< V_argc-V_i_0-V_argc'+V_i_0'
it(50) =< aux(6)
it(50) =< aux(7)

#### Cost of phase [50,51,52]:eval_lame_parse_args_bb1_in(V_argc,V__genre_last,V_i_0,V_err_0,B,C) -> [eval_lame_parse_args_bb1_in(V_argc',V__genre_last',V_i_0',V_err_0',B',C')] 
3*it(50)+1*s(8)+1*s(9)+1*s(10)+0
  Such that:aux(6) =< V_argc-V_i_0
aux(7) =< V_argc-V_i_0-V_argc'+V_i_0'
it(50) =< aux(6)
it(50) =< aux(7)

#### Cost of phase [50,51,52]:eval_lame_parse_args_bb1_in(V_argc,V__genre_last,V_i_0,V_err_0,B,C) -> [eval_lame_parse_args_bb1_in(V_argc',V__genre_last',V_i_0',V_err_0',B',C')] 
3*it(50)+1*s(8)+1*s(9)+1*s(10)+0
  Such that:aux(6) =< V_argc-V_i_0
aux(7) =< V_argc-V_i_0-V_argc'+V_i_0'
it(50) =< aux(6)
it(50) =< aux(7)

#### Cost of phase [50,51,52]:eval_lame_parse_args_bb1_in(V_argc,V__genre_last,V_i_0,V_err_0,B,C) -> [eval_lame_parse_args_bb1_in(V_argc',V__genre_last',V_i_0',V_err_0',B',C')] 
3*it(50)+1*s(8)+1*s(9)+1*s(10)+0
  Such that:aux(6) =< V_argc-V_i_0
aux(7) =< V_argc-V_i_0-V_argc'+V_i_0'
it(50) =< aux(6)
it(50) =< aux(7)

#### Cost of chains of eval_lame_parse_args_bb1_in(V_argc,V__genre_last,V_i_0,V_err_0,B,C):
* Chain [[50,51,52],65]: 3*it(50)+3*s(8)+0
  Such that:aux(8) =< V_argc-V_i_0
it(50) =< aux(8)

  with precondition: [V_err_0=0,B=4,V_i_0>=0,V_argc>=V_i_0+3] 

* Chain [[50,51,52],64]: 3*it(50)+3*s(8)+0
  Such that:aux(9) =< V_argc-V_i_0
it(50) =< aux(9)

  with precondition: [V_err_0=0,B=5,V_i_0>=0,V_argc>=V_i_0+3] 

* Chain [[50,51,52],63]: 3*it(50)+3*s(8)+0
  Such that:aux(10) =< V_argc-V_i_0
it(50) =< aux(10)

  with precondition: [V_err_0=0,B=6,V_i_0>=0,V_argc>=V_i_0+3] 

* Chain [[50,51,52],62]: 3*it(50)+3*s(8)+0
  Such that:aux(11) =< V_argc-V_i_0
it(50) =< aux(11)

  with precondition: [V_err_0=0,B=7,V_i_0>=0,V_argc>=V_i_0+3] 

* Chain [[50,51,52],61]: 3*it(50)+3*s(8)+0
  Such that:aux(12) =< V_argc-V_i_0
it(50) =< aux(12)

  with precondition: [V_err_0=0,B=8,V_i_0>=0,V_argc>=V_i_0+3] 

* Chain [[50,51,52],60]: 3*it(50)+3*s(8)+0
  Such that:aux(13) =< V_argc-V_i_0
it(50) =< aux(13)

  with precondition: [V_err_0=0,B=9,V_i_0>=0,V_argc>=V_i_0+3] 

* Chain [[50,51,52],59]: 3*it(50)+3*s(8)+0
  Such that:aux(14) =< V_argc-V_i_0
it(50) =< aux(14)

  with precondition: [V_err_0=0,B=10,V_i_0>=0,V_argc>=V_i_0+3] 

* Chain [[50,51,52],57]: 3*it(50)+3*s(8)+0
  Such that:aux(6) =< V_argc-V_i_0
it(50) =< aux(6)

  with precondition: [V_err_0=0,B=11,V_i_0>=0,V_argc>=V_i_0+2] 

* Chain [[50,51,52],56]: 3*it(50)+3*s(8)+0
  Such that:aux(6) =< V_argc-V_i_0
it(50) =< aux(6)

  with precondition: [V_err_0=0,B=11,V_i_0>=0,V_argc>=V_i_0+2] 

* Chain [[50,51,52],54]: 3*it(50)+3*s(8)+0
  Such that:aux(6) =< V_argc-V_i_0
it(50) =< aux(6)

  with precondition: [V_err_0=0,B=12,V_i_0>=0,V_argc>=V_i_0+2] 

* Chain [[50,51,52],53]: 3*it(50)+3*s(8)+0
  Such that:aux(6) =< V_argc-V_i_0
it(50) =< aux(6)

  with precondition: [V_err_0=0,B=12,V_i_0>=0,V_argc>=V_i_0+2] 

* Chain [[50,51,52],49,57]: 3*it(50)+3*s(8)+1
  Such that:aux(15) =< V_argc-V_i_0
it(50) =< aux(15)

  with precondition: [V_err_0=0,B=11,V_i_0>=0,V_argc>=V_i_0+3] 

* Chain [[50,51,52],49,56]: 3*it(50)+3*s(8)+1
  Such that:aux(16) =< V_argc-V_i_0
it(50) =< aux(16)

  with precondition: [V_err_0=0,B=11,V_i_0>=0,V_argc>=V_i_0+3] 

* Chain [[50,51,52],49,54]: 3*it(50)+3*s(8)+1
  Such that:aux(17) =< V_argc-V_i_0
it(50) =< aux(17)

  with precondition: [V_err_0=0,B=12,V_i_0>=0,V_argc>=V_i_0+3] 

* Chain [[50,51,52],49,53]: 3*it(50)+3*s(8)+1
  Such that:aux(18) =< V_argc-V_i_0
it(50) =< aux(18)

  with precondition: [V_err_0=0,B=12,V_i_0>=0,V_argc>=V_i_0+3] 

* Chain [[50,51,52],48]...: 3*it(50)+7*s(8)+2
  Such that:aux(19) =< V_argc-V_i_0
it(50) =< aux(19)

  with precondition: [V_err_0=0,V_i_0>=0,V_argc>=V_i_0+3] 

* Chain [65]: 0
  with precondition: [V_err_0=0,B=4,V_i_0>=0,V_argc>=V_i_0+2] 

* Chain [64]: 0
  with precondition: [V_err_0=0,B=5,V_i_0>=0,V_argc>=V_i_0+2] 

* Chain [63]: 0
  with precondition: [V_err_0=0,B=6,V_i_0>=0,V_argc>=V_i_0+2] 

* Chain [62]: 0
  with precondition: [V_err_0=0,B=7,V_i_0>=0,V_argc>=V_i_0+2] 

* Chain [61]: 0
  with precondition: [V_err_0=0,B=8,V_i_0>=0,V_argc>=V_i_0+2] 

* Chain [60]: 0
  with precondition: [V_err_0=0,B=9,C=V__genre_last,V_i_0>=0,V_argc>=V_i_0+2] 

* Chain [59]: 0
  with precondition: [V_err_0=0,B=10,V_i_0>=0,V_argc>=V_i_0+2] 

* Chain [56]: 0
  with precondition: [B=11,C=V__genre_last,1>=V_err_0,V_err_0>=0,V_i_0+1>=V_argc,V_i_0>=V_err_0] 

* Chain [53]: 0
  with precondition: [B=12,C=V__genre_last,1>=V_err_0,V_err_0>=0,V_i_0+1>=V_argc,V_i_0>=V_err_0] 

* Chain [49,57]: 1
  with precondition: [V_err_0=0,B=11,V__genre_last=C,V_i_0>=0,V_argc>=V_i_0+2] 

* Chain [49,56]: 1
  with precondition: [V_err_0=0,B=11,V_argc=V_i_0+2,V__genre_last=C,V_argc>=2] 

* Chain [49,54]: 1
  with precondition: [V_err_0=0,B=12,V__genre_last=C,V_i_0>=0,V_argc>=V_i_0+2] 

* Chain [49,53]: 1
  with precondition: [V_err_0=0,B=12,V_argc=V_i_0+2,V__genre_last=C,V_argc>=2] 

* Chain [48]...: 4*s(11)+2
  with precondition: [V_err_0=0,V_i_0>=0,V_argc>=V_i_0+2] 


#### Cost of chains of eval_lame_parse_args_bb168_in(V__genre_last,B):
* Chain [66]: 0
  with precondition: [] 


#### Cost of chains of eval_lame_parse_args_bb165_in(V__genre_last,B):
* Chain [67]: 0
  with precondition: [] 


#### Cost of chains of eval_lame_parse_args_bb161_in(V__genre_last,B):
* Chain [68]: 0
  with precondition: [] 


#### Cost of chains of eval_lame_parse_args_bb159_in(V__genre_last,B):
* Chain [69]: 0
  with precondition: [] 


#### Cost of chains of loop_cont_eval_lame_parse_args_bb1_in(C,A,B):
* Chain [78]: 0
  with precondition: [C=4] 

* Chain [77]: 0
  with precondition: [C=5] 

* Chain [76]: 0
  with precondition: [C=6] 

* Chain [75]: 0
  with precondition: [C=7] 

* Chain [74]: 0
  with precondition: [C=8] 

* Chain [73]: 0
  with precondition: [C=9] 

* Chain [72]: 0
  with precondition: [C=10] 

* Chain [71]: 0
  with precondition: [C=11] 

* Chain [70]: 0
  with precondition: [C=12] 


#### Cost of chains of eval_lame_parse_args_5(V_argc,V__genre_last,B):
* Chain [81]: 1
  with precondition: [1>=V_argc] 

* Chain [80]: 45*s(55)+45*s(56)+2
  Such that:aux(22) =< V_argc
s(55) =< aux(22)

  with precondition: [V_argc>=2] 

* Chain [79]...: 11*s(81)+3*s(83)+3
  Such that:s(82) =< V_argc
s(83) =< s(82)

  with precondition: [V_argc>=2] 


#### Cost of chains of eval_lame_parse_args_start(V_argc,V__genre_last,B):
* Chain [84]: 1
  with precondition: [1>=V_argc] 

* Chain [83]: 45*s(86)+45*s(87)+2
  Such that:s(85) =< V_argc
s(86) =< s(85)

  with precondition: [V_argc>=2] 

* Chain [82]...: 3*s(89)+11*s(90)+3
  Such that:s(88) =< V_argc
s(89) =< s(88)

  with precondition: [V_argc>=2] 


Closed-form bounds of eval_lame_parse_args_start(V_argc,V__genre_last,B): 
-------------------------------------
* Chain [84] with precondition: [1>=V_argc] 
    - Upper bound: 1 
    - Complexity: constant 
* Chain [83] with precondition: [V_argc>=2] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [82]... with precondition: [V_argc>=2] 
    - Upper bound: inf 
    - Complexity: infinity 

### Maximum cost of eval_lame_parse_args_start(V_argc,V__genre_last,B): inf 
Asymptotic class: infinity 

Time statistics: 
-------------------------------------
* Partial evaluation computed in 1245 ms.
* Invariants computed in 564 ms.
   - Backward Invariants 338 ms.
   - Transitive Invariants 69 ms.
* Refinement performed in 715 ms.
* Termination proved in 70 ms.
* Upper bounds computed in 372 ms.
   - Equation cost structures 105 ms.
   - Phase cost structures 141 ms.
   - Chain cost structures 157 ms.
   - Solving cost expressions 0 ms.
* Total analysis performed in 4001 ms.


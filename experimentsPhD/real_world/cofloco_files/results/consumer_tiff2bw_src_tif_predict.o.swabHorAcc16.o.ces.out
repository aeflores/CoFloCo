Warning: Ignored call to eval_swabHorAcc16_stop/1 in equation eval_swabHorAcc16_bb11_in/1 

Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. recursive  : [eval_swabHorAcc16_bb4_in/6]
1. recursive  : [eval_swabHorAcc16_NewDefault_in/3,eval_swabHorAcc16_bb10_in/3,eval_swabHorAcc16_bb2_in/3,eval_swabHorAcc16_bb6_in/3,eval_swabHorAcc16_bb7_in/3,eval_swabHorAcc16_bb8_in/3,eval_swabHorAcc16_bb9_in/3,loop_cont_eval_swabHorAcc16_bb4_in/4]
2. non_recursive  : [eval_swabHorAcc16_bb11_in/1]
3. non_recursive  : [loop_cont_eval_swabHorAcc16_bb2_in/2]
4. non_recursive  : [eval_swabHorAcc16_5/3]
5. non_recursive  : [eval_swabHorAcc16_4/4]
6. non_recursive  : [eval_swabHorAcc16_bb0_in/2]
7. non_recursive  : [eval_swabHorAcc16_start/2]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into eval_swabHorAcc16_bb4_in/6
1. SCC is partially evaluated into eval_swabHorAcc16_bb2_in/3
2. SCC is completely evaluated into other SCCs
3. SCC is completely evaluated into other SCCs
4. SCC is partially evaluated into eval_swabHorAcc16_5/3
5. SCC is completely evaluated into other SCCs
6. SCC is partially evaluated into eval_swabHorAcc16_bb0_in/2
7. SCC is partially evaluated into eval_swabHorAcc16_start/2

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations eval_swabHorAcc16_bb4_in/6 
* CE 15 is refined into CE [16] 
* CE 14 is refined into CE [17] 


#### Refined cost equations eval_swabHorAcc16_bb4_in/6 
* CE 16: eval_swabHorAcc16_bb4_in(A,B,C,D,A,B) = 0
     [A>=C+4,0>=C,D=2] 
* CE 17: eval_swabHorAcc16_bb4_in(V_4,V_wc_0,V_i_0,B,C,D) = 1+ eval_swabHorAcc16_bb4_in(V_4,V_wc_0,E,F,C,D)
     [V_4>=V_i_0+4,V_i_0>=1,V_i_0=E+1,F=2,B=2] 

### Cost equations --> "Loop" of eval_swabHorAcc16_bb4_in/6 
* CEs [17] --> Loop 10 
* CEs [16] --> Loop 11 

#### Loops of eval_swabHorAcc16_bb4_in/6 
* Loop 10: eval_swabHorAcc16_bb4_in(V_4,V_wc_0,V_i_0,B,C,D)->  eval_swabHorAcc16_bb4_in(V_4,V_wc_0,V_i_0',B',C,D)
                  [V_4>=V_i_0+4,V_i_0>=1,V_i_0=V_i_0'+1,B'=2,B=2] 
* Loop 11: eval_swabHorAcc16_bb4_in(A,B,C,D,A,B) [A>=C+4,0>=C,D=2] 

### Ranking functions of CR eval_swabHorAcc16_bb4_in(V_4,V_wc_0,V_i_0,B,C,D) 
* RF of phase [10]: [V_i_0]

#### Partial ranking functions of CR eval_swabHorAcc16_bb4_in(V_4,V_wc_0,V_i_0,B,C,D) 
* Partial RF of phase [10]:
  - RF of loop [10:1]:
    V_i_0


### Resulting Chains:eval_swabHorAcc16_bb4_in(V_4,V_wc_0,V_i_0,B,C,D) 
* [[10],11]
* [11]


### Merging Chains  eval_swabHorAcc16_bb4_in/6 into  External patterns of execution 
* [[11]] --> 1 
* [[11,[10]]] --> 2 


### Specialization of cost equations eval_swabHorAcc16_bb2_in/3 
* CE 12 is refined into CE [18,19] 
* CE 13 is refined into CE [20] 
* CE 10 is refined into CE [21,22] 
* CE 11 is refined into CE [23] 


#### Refined cost equations eval_swabHorAcc16_bb2_in/3 
* CE 18: eval_swabHorAcc16_bb2_in(V_4,V_wc_0,B) = 2+ eval_swabHorAcc16_bb4_in(V_4,V_wc_0,C,D,V_4,V_wc_0):1+ eval_swabHorAcc16_bb2_in(V_4,E,F)
     [V_wc_0>=V_4+1,4>=V_4,V_4+E=V_wc_0,V_4=C+4,F=3,D=2,B=3] 
* CE 19: eval_swabHorAcc16_bb2_in(V_4,V_wc_0,B) = 2+ eval_swabHorAcc16_bb4_in(V_4,V_wc_0,C,D,V_4,V_wc_0):2+ eval_swabHorAcc16_bb2_in(V_4,E,F)
     [V_wc_0>=V_4+1,V_4>=5,V_4+E=V_wc_0,V_4=C+4,F=3,D=2,B=3] 
* CE 20: eval_swabHorAcc16_bb2_in(V_4,V_wc_0,B) = 1+ eval_swabHorAcc16_bb2_in(V_4,C,D)
     [V_wc_0>=V_4+1,V_4+C=V_wc_0,D=3,B=3] 
* CE 21: eval_swabHorAcc16_bb2_in(V_4,V_wc_0,B) = 1+ eval_swabHorAcc16_bb4_in(V_4,V_wc_0,C,D,V_4,V_wc_0):1
     [V_4>=V_wc_0,4>=V_4,V_4=C+4,D=2,B=3] 
* CE 22: eval_swabHorAcc16_bb2_in(V_4,V_wc_0,B) = 1+ eval_swabHorAcc16_bb4_in(V_4,V_wc_0,C,D,V_4,V_wc_0):2
     [V_4>=V_wc_0,V_4>=5,V_4=C+4,D=2,B=3] 
* CE 23: eval_swabHorAcc16_bb2_in(V_4,V_wc_0,B) = 0
     [V_4>=V_wc_0,B=3] 

### Cost equations --> "Loop" of eval_swabHorAcc16_bb2_in/3 
* CEs [22] --> Loop 12 
* CEs [21,23] --> Loop 13 
* CEs [19] --> Loop 14 
* CEs [18,20] --> Loop 15 

#### Loops of eval_swabHorAcc16_bb2_in/3 
* Loop 12: eval_swabHorAcc16_bb2_in(V_4,V_wc_0,B) [V_4>=V_wc_0,V_4>=5,B=3] 
* Loop 13: eval_swabHorAcc16_bb2_in(V_4,V_wc_0,B) [V_4>=V_wc_0,B=3] 
* Loop 14: eval_swabHorAcc16_bb2_in(V_4,V_wc_0,B)->  eval_swabHorAcc16_bb2_in(V_4,V_wc_0',B')
                  [V_wc_0>=V_4+1,V_4>=5,V_4+V_wc_0'=V_wc_0,B'=3,B=3] 
* Loop 15: eval_swabHorAcc16_bb2_in(V_4,V_wc_0,B)->  eval_swabHorAcc16_bb2_in(V_4,V_wc_0',B')
                  [V_wc_0>=V_4+1,V_4+V_wc_0'=V_wc_0,B'=3,B=3] 

### Ranking functions of CR eval_swabHorAcc16_bb2_in(V_4,V_wc_0,B) 

#### Partial ranking functions of CR eval_swabHorAcc16_bb2_in(V_4,V_wc_0,B) 
* Partial RF of phase [14,15]:
  - RF of loop [14:1]:
    -V_4/5+V_wc_0/5 depends on loops [15:1] 
    V_wc_0/5-1 depends on loops [15:1] 


### Resulting Chains:eval_swabHorAcc16_bb2_in(V_4,V_wc_0,B) 
* [[14,15]]...
* [[14,15],13]
* [[14,15],12]
* [13]
* [12]


### Merging Chains  eval_swabHorAcc16_bb2_in/3 into  External patterns of execution 
* [[12,[14,15]],[13,[14,15]]] --> 1 
* [[12],[13]] --> 2 
* [[[14,15]]] --> 3 


### Specialization of cost equations eval_swabHorAcc16_5/3 
* CE 9 is refined into CE [24,25,26] 


#### Refined cost equations eval_swabHorAcc16_5/3 
* CE 24: eval_swabHorAcc16_5(V_4,V_6,B) = 1+ eval_swabHorAcc16_bb2_in(V_4,C,D):1
     [C>=V_4+1,V_4>=1,V_4+C=V_6,D=3] 
* CE 25: eval_swabHorAcc16_5(V_4,V_6,B) = 1+ eval_swabHorAcc16_bb2_in(V_4,C,D):2
     [V_4>=C,V_4+C=V_6,D=3] 
* CE 26: eval_swabHorAcc16_5(V_4,V_6,B) = 1+ eval_swabHorAcc16_bb2_in(V_4,C,D):3
     [C>=V_4+1,V_4+C=V_6,D=3] 

### Cost equations --> "Loop" of eval_swabHorAcc16_5/3 
* CEs [26] --> Loop 16 
* CEs [25] --> Loop 17 
* CEs [24] --> Loop 18 

#### Loops of eval_swabHorAcc16_5/3 
* Loop 16: eval_swabHorAcc16_5(V_4,V_6,B) [V_6>=2*V_4+1] 
* Loop 17: eval_swabHorAcc16_5(V_4,V_6,B) [2*V_4>=V_6] 
* Loop 18: eval_swabHorAcc16_5(V_4,V_6,B) [V_6>=2*V_4+1,V_4>=1] 

### Ranking functions of CR eval_swabHorAcc16_5(V_4,V_6,B) 

#### Partial ranking functions of CR eval_swabHorAcc16_5(V_4,V_6,B) 


### Resulting Chains:eval_swabHorAcc16_5(V_4,V_6,B) 
* [18]
* [17]
* [16]...


### Merging Chains  eval_swabHorAcc16_5/3 into  External patterns of execution 
* [[18]] --> 1 
* [[17]] --> 2 
* [[16]] --> 3 


### Specialization of cost equations eval_swabHorAcc16_bb0_in/2 
* CE 4 is refined into CE [27,28,29] 
* CE 7 is refined into CE [30] 
* CE 5 is refined into CE [31,32] 
* CE 8 is refined into CE [33] 
* CE 3 is refined into CE [34,35] 
* CE 6 is refined into CE [36] 


#### Refined cost equations eval_swabHorAcc16_bb0_in/2 
* CE 27: eval_swabHorAcc16_bb0_in(V_cc,B) = 0+ eval_swabHorAcc16_5(C,D,B):1
     [2*D+1>=V_cc,V_cc>=2*D,D>=2*C+1,C>=1] 
* CE 28: eval_swabHorAcc16_bb0_in(V_cc,B) = 0+ eval_swabHorAcc16_5(C,D,B):2
     [2*C>=D,2*D+1>=V_cc,V_cc>=2*D,V_cc>=1] 
* CE 29: eval_swabHorAcc16_bb0_in(V_cc,B) = 0+ eval_swabHorAcc16_5(C,D,B):3
     [2*D+1>=V_cc,V_cc>=2*D,D>=2*C+1,V_cc>=1] 
* CE 30: eval_swabHorAcc16_bb0_in(V_cc,B) = 0
     [V_cc>=1] 
* CE 31: eval_swabHorAcc16_bb0_in(V_cc,B) = 0+ eval_swabHorAcc16_5(C,D,B):2
     [2*C>=D,2*D>=V_cc,V_cc+1>=2*D,0>=V_cc+1] 
* CE 32: eval_swabHorAcc16_bb0_in(V_cc,B) = 0+ eval_swabHorAcc16_5(C,D,B):3
     [2*D>=V_cc,V_cc+1>=2*D,D>=2*C+1,0>=V_cc+1] 
* CE 33: eval_swabHorAcc16_bb0_in(V_cc,B) = 0
     [0>=V_cc+1] 
* CE 34: eval_swabHorAcc16_bb0_in(V_cc,B) = 0+ eval_swabHorAcc16_5(C,D,B):2
     [C>=0,D=0,V_cc=0] 
* CE 35: eval_swabHorAcc16_bb0_in(V_cc,B) = 0+ eval_swabHorAcc16_5(C,D,B):3
     [0>=2*C+1,D=0,V_cc=0] 
* CE 36: eval_swabHorAcc16_bb0_in(V_cc,B) = 0
     [V_cc=0] 

### Cost equations --> "Loop" of eval_swabHorAcc16_bb0_in/2 
* CEs [27,28,30] --> Loop 19 
* CEs [31,33] --> Loop 20 
* CEs [34,36] --> Loop 21 
* CEs [29] --> Loop 22 
* CEs [32] --> Loop 23 
* CEs [35] --> Loop 24 

#### Loops of eval_swabHorAcc16_bb0_in/2 
* Loop 19: eval_swabHorAcc16_bb0_in(V_cc,B) [V_cc>=1] 
* Loop 20: eval_swabHorAcc16_bb0_in(V_cc,B) [0>=V_cc+1] 
* Loop 21: eval_swabHorAcc16_bb0_in(V_cc,B) [V_cc=0] 
* Loop 22: eval_swabHorAcc16_bb0_in(V_cc,B) [V_cc>=1] 
* Loop 23: eval_swabHorAcc16_bb0_in(V_cc,B) [0>=V_cc+1] 
* Loop 24: eval_swabHorAcc16_bb0_in(V_cc,B) [V_cc=0] 

### Ranking functions of CR eval_swabHorAcc16_bb0_in(V_cc,B) 

#### Partial ranking functions of CR eval_swabHorAcc16_bb0_in(V_cc,B) 


### Resulting Chains:eval_swabHorAcc16_bb0_in(V_cc,B) 
* [24]...
* [23]...
* [22]...
* [21]
* [20]
* [19]


### Merging Chains  eval_swabHorAcc16_bb0_in/2 into  External patterns of execution 
* [[21]] --> 1 
* [[20]] --> 2 
* [[19]] --> 3 
* [[24]] --> 4 
* [[23]] --> 5 
* [[22]] --> 6 


### Specialization of cost equations eval_swabHorAcc16_start/2 
* CE 2 is refined into CE [37,38,39,40,41,42] 


#### Refined cost equations eval_swabHorAcc16_start/2 
* CE 37: eval_swabHorAcc16_start(V_cc,B) = 0+ eval_swabHorAcc16_bb0_in(C,B):1
     [C=0,V_cc=0] 
* CE 38: eval_swabHorAcc16_start(V_cc,B) = 0+ eval_swabHorAcc16_bb0_in(V_cc,B):2
     [0>=V_cc+1] 
* CE 39: eval_swabHorAcc16_start(V_cc,B) = 0+ eval_swabHorAcc16_bb0_in(V_cc,B):3
     [V_cc>=1] 
* CE 40: eval_swabHorAcc16_start(V_cc,B) = 0+ eval_swabHorAcc16_bb0_in(C,B):4
     [C=0,V_cc=0] 
* CE 41: eval_swabHorAcc16_start(V_cc,B) = 0+ eval_swabHorAcc16_bb0_in(V_cc,B):5
     [0>=V_cc+1] 
* CE 42: eval_swabHorAcc16_start(V_cc,B) = 0+ eval_swabHorAcc16_bb0_in(V_cc,B):6
     [V_cc>=1] 

### Cost equations --> "Loop" of eval_swabHorAcc16_start/2 
* CEs [42] --> Loop 25 
* CEs [41] --> Loop 26 
* CEs [40] --> Loop 27 
* CEs [39] --> Loop 28 
* CEs [38] --> Loop 29 
* CEs [37] --> Loop 30 

#### Loops of eval_swabHorAcc16_start/2 
* Loop 25: eval_swabHorAcc16_start(V_cc,B) [V_cc>=1] 
* Loop 26: eval_swabHorAcc16_start(V_cc,B) [0>=V_cc+1] 
* Loop 27: eval_swabHorAcc16_start(V_cc,B) [V_cc=0] 
* Loop 28: eval_swabHorAcc16_start(V_cc,B) [V_cc>=1] 
* Loop 29: eval_swabHorAcc16_start(V_cc,B) [0>=V_cc+1] 
* Loop 30: eval_swabHorAcc16_start(V_cc,B) [V_cc=0] 

### Ranking functions of CR eval_swabHorAcc16_start(V_cc,B) 

#### Partial ranking functions of CR eval_swabHorAcc16_start(V_cc,B) 


### Resulting Chains:eval_swabHorAcc16_start(V_cc,B) 
* [30]
* [29]
* [28]
* [27]...
* [26]...
* [25]...


### Merging Chains  eval_swabHorAcc16_start/2 into  External patterns of execution 
* [[30]] --> 1 
* [[29]] --> 2 
* [[28]] --> 3 
* [[27]] --> 4 
* [[26]] --> 5 
* [[25]] --> 6 


Computing Bounds
=====================================

#### Cost of loops [10] 

 * loop 10:eval_swabHorAcc16_bb4_in(V_4,V_wc_0,V_i_0,B,C,D) -> [eval_swabHorAcc16_bb4_in(V_4',V_wc_0',V_i_0',B',C',D')] 
1
#### Cost of phase [10]:eval_swabHorAcc16_bb4_in(V_4,V_wc_0,V_i_0,B,C,D) -> [eval_swabHorAcc16_bb4_in(V_4',V_wc_0',V_i_0',B',C',D')] 
1*it(10)+0
  Such that:it(10) =< V_i_0
it(10) =< V_i_0-V_i_0'

#### Cost of chains of eval_swabHorAcc16_bb4_in(V_4,V_wc_0,V_i_0,B,C,D):
* Chain [[10],11]: 1*it(10)+0
  Such that:it(10) =< V_i_0

  with precondition: [B=2,V_4=C,V_wc_0=D,V_i_0>=1,V_4>=V_i_0+4] 

* Chain [11]: 0
  with precondition: [B=2,D=V_wc_0,V_4=C,0>=V_i_0,V_4>=V_i_0+4] 


#### Cost of loops [14,15] 

 * loop 14:eval_swabHorAcc16_bb2_in(V_4,V_wc_0,B) -> [eval_swabHorAcc16_bb2_in(V_4',V_wc_0',B')] 
1*s(2)+2
  Such that:s(2) =< V_4'

 * loop 15:eval_swabHorAcc16_bb2_in(V_4,V_wc_0,B) -> [eval_swabHorAcc16_bb2_in(V_4',V_wc_0',B')] 
2
#### Cost of phase [14,15]:eval_swabHorAcc16_bb2_in(V_4,V_wc_0,B) -> [eval_swabHorAcc16_bb2_in(V_4',V_wc_0',B')] 
2*it(14)+2*it(15)+1*s(3)+0
#### Cost of phase [14,15]:eval_swabHorAcc16_bb2_in(V_4,V_wc_0,B) -> [eval_swabHorAcc16_bb2_in(V_4',V_wc_0',B')] 
2*it(14)+2*it(15)+1*s(3)+0
#### Cost of phase [14,15]:eval_swabHorAcc16_bb2_in(V_4,V_wc_0,B) -> [eval_swabHorAcc16_bb2_in(V_4',V_wc_0',B')] 
2*it(14)+2*it(15)+1*s(3)+0
#### Cost of chains of eval_swabHorAcc16_bb2_in(V_4,V_wc_0,B):
* Chain [[14,15]]...: 5*it(14)+0
  with precondition: [V_wc_0>=V_4+1,B=3] 

* Chain [[14,15],13]: 5*it(14)+1
  with precondition: [B=3,V_4>=1,V_wc_0>=V_4+1] 

* Chain [[14,15],12]: 5*it(14)+1*s(4)+1
  Such that:s(4) =< V_4

  with precondition: [B=3,V_4>=5,V_wc_0>=V_4+1] 

* Chain [13]: 1
  with precondition: [B=3,V_4>=V_wc_0] 

* Chain [12]: 1*s(4)+1
  Such that:s(4) =< V_4

  with precondition: [B=3,V_4>=5,V_4>=V_wc_0] 


#### Cost of chains of eval_swabHorAcc16_5(V_4,V_6,B):
* Chain [18]: 1*s(9)+10*s(10)+2
  Such that:s(9) =< V_4

  with precondition: [V_4>=1,V_6>=2*V_4+1] 

* Chain [17]: 1*s(11)+2
  Such that:s(11) =< V_4

  with precondition: [2*V_4>=V_6] 

* Chain [16]...: 5*s(12)+1
  with precondition: [V_6>=2*V_4+1] 


#### Cost of chains of eval_swabHorAcc16_bb0_in(V_cc,B):
* Chain [24]...: 5*s(13)+1
  with precondition: [V_cc=0] 

* Chain [23]...: 5*s(14)+1
  with precondition: [0>=V_cc+1] 

* Chain [22]...: 5*s(15)+1
  with precondition: [V_cc>=1] 

* Chain [21]: 1*aux(20)+0
  with precondition: [V_cc=0] 

* Chain [20]: 1*aux(21)+0
  with precondition: [0>=V_cc+1] 

* Chain [19]: 1*s(18)+11*s(19)+2
  Such that:s(18) =< V_cc/4

  with precondition: [V_cc>=1] 


#### Cost of chains of eval_swabHorAcc16_start(V_cc,B):
* Chain [30]: 1*s(21)+0
  with precondition: [V_cc=0] 

* Chain [29]: 1*s(22)+0
  with precondition: [0>=V_cc+1] 

* Chain [28]: 1*s(23)+11*s(24)+2
  Such that:s(23) =< V_cc/4

  with precondition: [V_cc>=1] 

* Chain [27]...: 5*s(25)+1
  with precondition: [V_cc=0] 

* Chain [26]...: 5*s(26)+1
  with precondition: [0>=V_cc+1] 

* Chain [25]...: 5*s(27)+1
  with precondition: [V_cc>=1] 


Closed-form bounds of eval_swabHorAcc16_start(V_cc,B): 
-------------------------------------
* Chain [30] with precondition: [V_cc=0] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [29] with precondition: [0>=V_cc+1] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [28] with precondition: [V_cc>=1] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [27]... with precondition: [V_cc=0] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [26]... with precondition: [0>=V_cc+1] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [25]... with precondition: [V_cc>=1] 
    - Upper bound: inf 
    - Complexity: infinity 

### Maximum cost of eval_swabHorAcc16_start(V_cc,B): inf 
Asymptotic class: infinity 

Time statistics: 
-------------------------------------
* Partial evaluation computed in 74 ms.
* Invariants computed in 69 ms.
   - Backward Invariants 37 ms.
   - Transitive Invariants 12 ms.
* Refinement performed in 147 ms.
* Termination proved in 17 ms.
* Upper bounds computed in 196 ms.
   - Equation cost structures 58 ms.
   - Phase cost structures 118 ms.
   - Chain cost structures 25 ms.
   - Solving cost expressions 1 ms.
* Total analysis performed in 585 ms.


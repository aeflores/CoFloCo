Warning: Ignored call to eval_build_tree_stop/1 in equation eval_build_tree_118/1 

Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. recursive  : [eval_build_tree_bb1_in/13,eval_build_tree_bb5_in/14]
1. recursive  : [eval_build_tree_bb6_in/12]
2. recursive  : [eval_build_tree_50/12,eval_build_tree_51/12,eval_build_tree_bb10_in/12]
3. recursive  : [eval_build_tree_107/11,eval_build_tree_108/11,eval_build_tree_60/11,eval_build_tree_61/11,eval_build_tree_bb12_in/11,eval_build_tree_bb15_in/11]
4. non_recursive  : [eval_build_tree_118/1]
5. non_recursive  : [eval_build_tree_117/6]
6. non_recursive  : [eval_build_tree_116/6]
7. non_recursive  : [loop_cont_eval_build_tree_bb12_in/7]
8. non_recursive  : [loop_cont_eval_build_tree_bb10_in/7]
9. non_recursive  : [loop_cont_eval_build_tree_bb6_in/8]
10. non_recursive  : [loop_cont_eval_build_tree_bb1_in/7]
11. non_recursive  : [eval_build_tree_bb0_in/5]
12. non_recursive  : [eval_build_tree_start/5]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into eval_build_tree_bb1_in/13
1. SCC is partially evaluated into eval_build_tree_bb6_in/12
2. SCC is partially evaluated into eval_build_tree_bb10_in/12
3. SCC is partially evaluated into eval_build_tree_bb12_in/11
4. SCC is completely evaluated into other SCCs
5. SCC is completely evaluated into other SCCs
6. SCC is completely evaluated into other SCCs
7. SCC is completely evaluated into other SCCs
8. SCC is partially evaluated into loop_cont_eval_build_tree_bb10_in/7
9. SCC is partially evaluated into loop_cont_eval_build_tree_bb6_in/8
10. SCC is partially evaluated into loop_cont_eval_build_tree_bb1_in/7
11. SCC is partially evaluated into eval_build_tree_bb0_in/5
12. SCC is partially evaluated into eval_build_tree_start/5

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations eval_build_tree_bb1_in/13 
* CE 6 is refined into CE [19] 
* CE 4 is refined into CE [20] 
* CE 5 is refined into CE [21] 


#### Refined cost equations eval_build_tree_bb1_in/13 
* CE 19: eval_build_tree_bb1_in(A,B,C,D,E,F,G,H,A,B,C,D,F) = 0
     [G>=F+1,G>=E,F+1>=0,H=3] 
* CE 20: eval_build_tree_bb1_in(V__opt_len,V__static_len,V__heap_len,V__heap_max,V_5,V_max_code_0,V_n_0,B,C,D,E,F,G) = 1+ eval_build_tree_bb1_in(H,I,J,K,V_5,V_max_code_0,L,B,C,D,E,F,G)
     [V_5>=V_n_0+1,V_n_0>=V_max_code_0+1,V_max_code_0+1>=0,V_n_0+1=L] 
* CE 21: eval_build_tree_bb1_in(V__opt_len,V__static_len,V__heap_len,V__heap_max,V_5,V_max_code_0,V_n_0,B,C,D,E,F,G) = 1+ eval_build_tree_bb1_in(V__opt_len,V__static_len,H,V__heap_max,V_5,V_n_0,I,B,C,D,E,F,G)
     [V_5>=V_n_0+1,V_n_0>=V_max_code_0+1,V_max_code_0+1>=0,V_n_0+1=I,H=V__heap_len+1] 

### Cost equations --> "Loop" of eval_build_tree_bb1_in/13 
* CEs [20] --> Loop 18 
* CEs [21] --> Loop 19 
* CEs [19] --> Loop 20 

#### Loops of eval_build_tree_bb1_in/13 
* Loop 18: eval_build_tree_bb1_in(V__opt_len,V__static_len,V__heap_len,V__heap_max,V_5,V_max_code_0,V_n_0,B,C,D,E,F,G)->  eval_build_tree_bb1_in(V__opt_len',V__static_len',V__heap_len',V__heap_max',V_5,V_max_code_0,V_n_0',B,C,D,E,F,G)
                  [V_5>=V_n_0+1,V_n_0>=V_max_code_0+1,V_max_code_0+1>=0,V_n_0+1=V_n_0'] 
* Loop 19: eval_build_tree_bb1_in(V__opt_len,V__static_len,V__heap_len,V__heap_max,V_5,V_max_code_0,V_n_0,B,C,D,E,F,G)->  eval_build_tree_bb1_in(V__opt_len,V__static_len,A',V__heap_max,V_5,V_n_0,B',B,C,D,E,F,G)
                  [V_5>=V_n_0+1,V_n_0>=V_max_code_0+1,V_max_code_0+1>=0,V_n_0+1=B',V__heap_len+1=A'] 
* Loop 20: eval_build_tree_bb1_in(A,B,C,D,E,F,G,H,A,B,C,D,F) [G>=F+1,G>=E,F+1>=0,H=3] 

### Ranking functions of CR eval_build_tree_bb1_in(V__opt_len,V__static_len,V__heap_len,V__heap_max,V_5,V_max_code_0,V_n_0,B,C,D,E,F,G) 
* RF of phase [18,19]: [V_5-V_n_0]

#### Partial ranking functions of CR eval_build_tree_bb1_in(V__opt_len,V__static_len,V__heap_len,V__heap_max,V_5,V_max_code_0,V_n_0,B,C,D,E,F,G) 
* Partial RF of phase [18,19]:
  - RF of loop [18:1,19:1]:
    V_5-V_n_0
  - RF of loop [19:1]:
    V_5-V_max_code_0-1


### Resulting Chains:eval_build_tree_bb1_in(V__opt_len,V__static_len,V__heap_len,V__heap_max,V_5,V_max_code_0,V_n_0,B,C,D,E,F,G) 
* [[18,19],20]
* [20]


### Merging Chains  eval_build_tree_bb1_in/13 into  External patterns of execution 
* [[20]] --> 1 
* [[20,[18,19]]] --> 2 


### Specialization of cost equations eval_build_tree_bb6_in/12 
* CE 11 is refined into CE [22] 
* CE 12 is refined into CE [23] 
* CE 10 is refined into CE [24] 
* CE 9 is refined into CE [25] 
* CE 8 is refined into CE [26] 


#### Refined cost equations eval_build_tree_bb6_in/12 
* CE 22: eval_build_tree_bb6_in(A,B,C,D,E,F,G,H,I,J,E,K) = 0
     [2*K+1>=I,I>=2*K,I>=1,C>=2,F=2] 
* CE 23: eval_build_tree_bb6_in(A,B,C,D,E,F,G,H,I,J,E,K) = 0
     [2*K>=I,I+1>=2*K,C>=2,0>=I+1,F=2] 
* CE 24: eval_build_tree_bb6_in(A,B,C,D,E,F,G,H,I,J,E,K) = 0
     [C>=2,K=0,I=0,F=2] 
* CE 25: eval_build_tree_bb6_in(V__opt_len,V__static_len,V__heap_len,V__heap_max,V_max_code_2,B,C,D,E,F,G,H) = 1+ eval_build_tree_bb6_in(I,J,K,L,V_max_code_2,B,C,D,E,F,G,H)
     [1>=V__heap_len] 
* CE 26: eval_build_tree_bb6_in(V__opt_len,V__static_len,V__heap_len,V__heap_max,V_max_code_2,B,C,D,E,F,G,H) = 1+ eval_build_tree_bb6_in(I,J,K,L,M,B,C,D,E,F,G,H)
     [1>=V__heap_len,M=V_max_code_2+1] 

### Cost equations --> "Loop" of eval_build_tree_bb6_in/12 
* CEs [25] --> Loop 21 
* CEs [26] --> Loop 22 
* CEs [22] --> Loop 23 
* CEs [23] --> Loop 24 
* CEs [24] --> Loop 25 

#### Loops of eval_build_tree_bb6_in/12 
* Loop 21: eval_build_tree_bb6_in(V__opt_len,V__static_len,V__heap_len,V__heap_max,V_max_code_2,B,C,D,E,F,G,H)->  eval_build_tree_bb6_in(V__opt_len',V__static_len',V__heap_len',V__heap_max',V_max_code_2,B,C,D,E,F,G,H)
                  [1>=V__heap_len] 
* Loop 22: eval_build_tree_bb6_in(V__opt_len,V__static_len,V__heap_len,V__heap_max,V_max_code_2,B,C,D,E,F,G,H)->  eval_build_tree_bb6_in(V__opt_len',V__static_len',V__heap_len',V__heap_max',V_max_code_2',B,C,D,E,F,G,H)
                  [1>=V__heap_len,V_max_code_2+1=V_max_code_2'] 
* Loop 23: eval_build_tree_bb6_in(A,B,C,D,E,F,G,H,I,J,E,K) [2*K+1>=I,I>=2*K,I>=1,C>=2,F=2] 
* Loop 24: eval_build_tree_bb6_in(A,B,C,D,E,F,G,H,I,J,E,K) [2*K>=I,I+1>=2*K,C>=2,0>=I+1,F=2] 
* Loop 25: eval_build_tree_bb6_in(A,B,C,D,E,F,G,H,I,J,E,K) [C>=2,K=0,I=0,F=2] 

### Ranking functions of CR eval_build_tree_bb6_in(V__opt_len,V__static_len,V__heap_len,V__heap_max,V_max_code_2,B,C,D,E,F,G,H) 

#### Partial ranking functions of CR eval_build_tree_bb6_in(V__opt_len,V__static_len,V__heap_len,V__heap_max,V_max_code_2,B,C,D,E,F,G,H) 


### Resulting Chains:eval_build_tree_bb6_in(V__opt_len,V__static_len,V__heap_len,V__heap_max,V_max_code_2,B,C,D,E,F,G,H) 
* [[21,22]]...
* [[21,22],25]
* [[21,22],24]
* [[21,22],23]
* [25]
* [24]
* [23]


### Merging Chains  eval_build_tree_bb6_in/12 into  External patterns of execution 
* [[25]] --> 1 
* [[25,[21,22]]] --> 2 
* [[24]] --> 3 
* [[23]] --> 4 
* [[24,[21,22]]] --> 5 
* [[23,[21,22]]] --> 6 
* [[[21,22]]] --> 7 


### Specialization of cost equations eval_build_tree_bb10_in/12 
* CE 15 is refined into CE [27] 
* CE 14 is refined into CE [28] 


#### Refined cost equations eval_build_tree_bb10_in/12 
* CE 27: eval_build_tree_bb10_in(A,B,C,D,E,F,G,A,B,C,D,E) = 0
     [0>=F,G=5] 
* CE 28: eval_build_tree_bb10_in(V__opt_len,V__static_len,V__heap_len,V__heap_max,V_max_code_2,V_n_1,B,C,D,E,F,G) = 1+ eval_build_tree_bb10_in(V__opt_len,V__static_len,V__heap_len,V__heap_max,V_max_code_2,H,B,C,D,E,F,G)
     [V_n_1>=1,V_n_1=H+1] 

### Cost equations --> "Loop" of eval_build_tree_bb10_in/12 
* CEs [28] --> Loop 26 
* CEs [27] --> Loop 27 

#### Loops of eval_build_tree_bb10_in/12 
* Loop 26: eval_build_tree_bb10_in(V__opt_len,V__static_len,V__heap_len,V__heap_max,V_max_code_2,V_n_1,B,C,D,E,F,G)->  eval_build_tree_bb10_in(V__opt_len,V__static_len,V__heap_len,V__heap_max,V_max_code_2,V_n_1',B,C,D,E,F,G)
                  [V_n_1>=1,V_n_1=V_n_1'+1] 
* Loop 27: eval_build_tree_bb10_in(A,B,C,D,E,F,G,A,B,C,D,E) [0>=F,G=5] 

### Ranking functions of CR eval_build_tree_bb10_in(V__opt_len,V__static_len,V__heap_len,V__heap_max,V_max_code_2,V_n_1,B,C,D,E,F,G) 
* RF of phase [26]: [V_n_1]

#### Partial ranking functions of CR eval_build_tree_bb10_in(V__opt_len,V__static_len,V__heap_len,V__heap_max,V_max_code_2,V_n_1,B,C,D,E,F,G) 
* Partial RF of phase [26]:
  - RF of loop [26:1]:
    V_n_1


### Resulting Chains:eval_build_tree_bb10_in(V__opt_len,V__static_len,V__heap_len,V__heap_max,V_max_code_2,V_n_1,B,C,D,E,F,G) 
* [[26],27]
* [27]


### Merging Chains  eval_build_tree_bb10_in/12 into  External patterns of execution 
* [[27]] --> 1 
* [[27,[26]]] --> 2 


### Specialization of cost equations eval_build_tree_bb12_in/11 
* CE 18 is refined into CE [29] 
* CE 17 is refined into CE [30] 


#### Refined cost equations eval_build_tree_bb12_in/11 
* CE 29: eval_build_tree_bb12_in(V__opt_len,V__static_len,V__heap_len,V__heap_max,V_max_code_2,B,C,D,E,F,G) = 1+ eval_build_tree_bb12_in(H,I,J,K,V_max_code_2,L,C,D,E,F,G)
     [J>=2,L=4,B=4] 
* CE 30: eval_build_tree_bb12_in(A,B,C,D,E,F,G,H,I,J,E) = 0
     [1>=I,F=4] 

### Cost equations --> "Loop" of eval_build_tree_bb12_in/11 
* CEs [30] --> Loop 28 
* CEs [29] --> Loop 29 

#### Loops of eval_build_tree_bb12_in/11 
* Loop 28: eval_build_tree_bb12_in(A,B,C,D,E,F,G,H,I,J,E) [1>=I,F=4] 
* Loop 29: eval_build_tree_bb12_in(V__opt_len,V__static_len,V__heap_len,V__heap_max,V_max_code_2,B,C,D,E,F,G)->  eval_build_tree_bb12_in(V__opt_len',V__static_len',V__heap_len',V__heap_max',V_max_code_2,B',C,D,E,F,G)
                  [V__heap_len'>=2,B'=4,B=4] 

### Ranking functions of CR eval_build_tree_bb12_in(V__opt_len,V__static_len,V__heap_len,V__heap_max,V_max_code_2,B,C,D,E,F,G) 

#### Partial ranking functions of CR eval_build_tree_bb12_in(V__opt_len,V__static_len,V__heap_len,V__heap_max,V_max_code_2,B,C,D,E,F,G) 


### Resulting Chains:eval_build_tree_bb12_in(V__opt_len,V__static_len,V__heap_len,V__heap_max,V_max_code_2,B,C,D,E,F,G) 
* [[29]]...
* [[29],28]
* [28]


### Merging Chains  eval_build_tree_bb12_in/11 into  External patterns of execution 
* [[28],[28,[29]]] --> 1 
* [[[29]]] --> 2 


### Specialization of cost equations loop_cont_eval_build_tree_bb10_in/7 
* CE 16 is refined into CE [31,32] 


#### Refined cost equations loop_cont_eval_build_tree_bb10_in/7 
* CE 31: loop_cont_eval_build_tree_bb10_in(N,A,B,C,D,E,F) = 1+ eval_build_tree_bb12_in(A,B,C,D,E,O,P,Q,R,S,E):1
     [1>=R,O=4,N=5] 
* CE 32: loop_cont_eval_build_tree_bb10_in(N,A,B,C,D,E,F) = 1+ eval_build_tree_bb12_in(A,B,C,D,E,O,P,Q,R,S,T):2
     [O=4,N=5] 

### Cost equations --> "Loop" of loop_cont_eval_build_tree_bb10_in/7 
* CEs [32] --> Loop 30 
* CEs [31] --> Loop 31 

#### Loops of loop_cont_eval_build_tree_bb10_in/7 
* Loop 30: loop_cont_eval_build_tree_bb10_in(N,A,B,C,D,E,F) [N=5] 
* Loop 31: loop_cont_eval_build_tree_bb10_in(N,A,B,C,D,E,F) [N=5] 

### Ranking functions of CR loop_cont_eval_build_tree_bb10_in(N,A,B,C,D,E,F) 

#### Partial ranking functions of CR loop_cont_eval_build_tree_bb10_in(N,A,B,C,D,E,F) 


### Resulting Chains:loop_cont_eval_build_tree_bb10_in(N,A,B,C,D,E,F) 
* [31]
* [30]...


### Merging Chains  loop_cont_eval_build_tree_bb10_in/7 into  External patterns of execution 
* [[31]] --> 1 
* [[30]] --> 2 


### Specialization of cost equations loop_cont_eval_build_tree_bb6_in/8 
* CE 13 is refined into CE [33,34,35,36] 


#### Refined cost equations loop_cont_eval_build_tree_bb6_in/8 
* CE 33: loop_cont_eval_build_tree_bb6_in(Q,A,B,C,D,E,F,G) = 1+ eval_build_tree_bb10_in(A,B,C,D,E,F,R,A,B,C,D,E):1+ loop_cont_eval_build_tree_bb10_in(S,A,B,C,D,E,G):1
     [0>=F,S=5,R=5,Q=2] 
* CE 34: loop_cont_eval_build_tree_bb6_in(Q,A,B,C,D,E,F,G) = 1+ eval_build_tree_bb10_in(A,B,C,D,E,F,R,A,B,C,D,E):1+ loop_cont_eval_build_tree_bb10_in(S,A,B,C,D,E,G):2
     [0>=F,S=5,R=5,Q=2] 
* CE 35: loop_cont_eval_build_tree_bb6_in(Q,A,B,C,D,E,F,G) = 1+ eval_build_tree_bb10_in(A,B,C,D,E,F,R,A,B,C,D,E):2+ loop_cont_eval_build_tree_bb10_in(S,A,B,C,D,E,G):1
     [F>=1,S=5,R=5,Q=2] 
* CE 36: loop_cont_eval_build_tree_bb6_in(Q,A,B,C,D,E,F,G) = 1+ eval_build_tree_bb10_in(A,B,C,D,E,F,R,A,B,C,D,E):2+ loop_cont_eval_build_tree_bb10_in(S,A,B,C,D,E,G):2
     [F>=1,S=5,R=5,Q=2] 

### Cost equations --> "Loop" of loop_cont_eval_build_tree_bb6_in/8 
* CEs [36] --> Loop 32 
* CEs [34] --> Loop 33 
* CEs [35] --> Loop 34 
* CEs [33] --> Loop 35 

#### Loops of loop_cont_eval_build_tree_bb6_in/8 
* Loop 32: loop_cont_eval_build_tree_bb6_in(Q,A,B,C,D,E,F,G) [F>=1,Q=2] 
* Loop 33: loop_cont_eval_build_tree_bb6_in(Q,A,B,C,D,E,F,G) [0>=F,Q=2] 
* Loop 34: loop_cont_eval_build_tree_bb6_in(Q,A,B,C,D,E,F,G) [F>=1,Q=2] 
* Loop 35: loop_cont_eval_build_tree_bb6_in(Q,A,B,C,D,E,F,G) [0>=F,Q=2] 

### Ranking functions of CR loop_cont_eval_build_tree_bb6_in(Q,A,B,C,D,E,F,G) 

#### Partial ranking functions of CR loop_cont_eval_build_tree_bb6_in(Q,A,B,C,D,E,F,G) 


### Resulting Chains:loop_cont_eval_build_tree_bb6_in(Q,A,B,C,D,E,F,G) 
* [35]
* [34]
* [33]...
* [32]...


### Merging Chains  loop_cont_eval_build_tree_bb6_in/8 into  External patterns of execution 
* [[35]] --> 1 
* [[34]] --> 2 
* [[33]] --> 3 
* [[32]] --> 4 


### Specialization of cost equations loop_cont_eval_build_tree_bb1_in/7 
* CE 7 is refined into CE [37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53] 


#### Refined cost equations loop_cont_eval_build_tree_bb1_in/7 
* CE 37: loop_cont_eval_build_tree_bb1_in(P,A,B,C,D,E,F) = 1+ eval_build_tree_bb6_in(A,B,C,D,E,Q,R,S,T,U,E,V):1+ loop_cont_eval_build_tree_bb6_in(W,R,S,X,U,E,Y,F):1
     [C>=2,Y=0,X=0,W=2,V=0,T=0,Q=2,P=3] 
* CE 38: loop_cont_eval_build_tree_bb1_in(P,A,B,C,D,E,F) = 1+ eval_build_tree_bb6_in(A,B,C,D,E,Q,R,S,T,U,E,V):1+ loop_cont_eval_build_tree_bb6_in(W,R,S,X,U,E,Y,F):3
     [C>=2,Y=0,X=0,W=2,V=0,T=0,Q=2,P=3] 
* CE 39: loop_cont_eval_build_tree_bb1_in(P,A,B,C,D,E,F) = 1+ eval_build_tree_bb6_in(A,B,C,D,E,Q,R,S,T,U,V,W):2+ loop_cont_eval_build_tree_bb6_in(X,R,S,Y,U,V,Z,F):1
     [V>=E,1>=C,Z=0,Y=0,X=2,W=0,T=0,Q=2,P=3] 
* CE 40: loop_cont_eval_build_tree_bb1_in(P,A,B,C,D,E,F) = 1+ eval_build_tree_bb6_in(A,B,C,D,E,Q,R,S,T,U,V,W):2+ loop_cont_eval_build_tree_bb6_in(X,R,S,Y,U,V,Z,F):3
     [V>=E,1>=C,Z=0,Y=0,X=2,W=0,T=0,Q=2,P=3] 
* CE 41: loop_cont_eval_build_tree_bb1_in(P,A,B,C,D,E,F) = 1+ eval_build_tree_bb6_in(A,B,C,D,E,Q,R,S,T,U,E,V):3+ loop_cont_eval_build_tree_bb6_in(W,R,S,T,U,E,V,F):1
     [2*V>=T,T+1>=2*V,C>=2,0>=T+1,W=2,Q=2,P=3] 
* CE 42: loop_cont_eval_build_tree_bb1_in(P,A,B,C,D,E,F) = 1+ eval_build_tree_bb6_in(A,B,C,D,E,Q,R,S,T,U,E,V):3+ loop_cont_eval_build_tree_bb6_in(W,R,S,T,U,E,V,F):3
     [2*V>=T,T+1>=2*V,C>=2,0>=T+1,W=2,Q=2,P=3] 
* CE 43: loop_cont_eval_build_tree_bb1_in(P,A,B,C,D,E,F) = 1+ eval_build_tree_bb6_in(A,B,C,D,E,Q,R,S,T,U,E,V):4+ loop_cont_eval_build_tree_bb6_in(W,R,S,X,U,E,Y,F):1
     [C>=2,Y=0,X=1,W=2,V=0,T=1,Q=2,P=3] 
* CE 44: loop_cont_eval_build_tree_bb1_in(P,A,B,C,D,E,F) = 1+ eval_build_tree_bb6_in(A,B,C,D,E,Q,R,S,T,U,E,V):4+ loop_cont_eval_build_tree_bb6_in(W,R,S,T,U,E,V,F):2
     [2*V+1>=T,T>=2*V,V>=1,C>=2,W=2,Q=2,P=3] 
* CE 45: loop_cont_eval_build_tree_bb1_in(P,A,B,C,D,E,F) = 1+ eval_build_tree_bb6_in(A,B,C,D,E,Q,R,S,T,U,E,V):4+ loop_cont_eval_build_tree_bb6_in(W,R,S,X,U,E,Y,F):3
     [C>=2,Y=0,X=1,W=2,V=0,T=1,Q=2,P=3] 
* CE 46: loop_cont_eval_build_tree_bb1_in(P,A,B,C,D,E,F) = 1+ eval_build_tree_bb6_in(A,B,C,D,E,Q,R,S,T,U,E,V):4+ loop_cont_eval_build_tree_bb6_in(W,R,S,T,U,E,V,F):4
     [2*V+1>=T,T>=2*V,V>=1,C>=2,W=2,Q=2,P=3] 
* CE 47: loop_cont_eval_build_tree_bb1_in(P,A,B,C,D,E,F) = 1+ eval_build_tree_bb6_in(A,B,C,D,E,Q,R,S,T,U,V,W):5+ loop_cont_eval_build_tree_bb6_in(X,R,S,T,U,V,W,F):1
     [2*W>=T,V>=E,T+1>=2*W,0>=T+1,1>=C,X=2,Q=2,P=3] 
* CE 48: loop_cont_eval_build_tree_bb1_in(P,A,B,C,D,E,F) = 1+ eval_build_tree_bb6_in(A,B,C,D,E,Q,R,S,T,U,V,W):5+ loop_cont_eval_build_tree_bb6_in(X,R,S,T,U,V,W,F):3
     [2*W>=T,V>=E,T+1>=2*W,0>=T+1,1>=C,X=2,Q=2,P=3] 
* CE 49: loop_cont_eval_build_tree_bb1_in(P,A,B,C,D,E,F) = 1+ eval_build_tree_bb6_in(A,B,C,D,E,Q,R,S,T,U,V,W):6+ loop_cont_eval_build_tree_bb6_in(X,R,S,Y,U,V,Z,F):1
     [V>=E,1>=C,Z=0,Y=1,X=2,W=0,T=1,Q=2,P=3] 
* CE 50: loop_cont_eval_build_tree_bb1_in(P,A,B,C,D,E,F) = 1+ eval_build_tree_bb6_in(A,B,C,D,E,Q,R,S,T,U,V,W):6+ loop_cont_eval_build_tree_bb6_in(X,R,S,T,U,V,W,F):2
     [2*W+1>=T,V>=E,T>=2*W,W>=1,1>=C,X=2,Q=2,P=3] 
* CE 51: loop_cont_eval_build_tree_bb1_in(P,A,B,C,D,E,F) = 1+ eval_build_tree_bb6_in(A,B,C,D,E,Q,R,S,T,U,V,W):6+ loop_cont_eval_build_tree_bb6_in(X,R,S,Y,U,V,Z,F):3
     [V>=E,1>=C,Z=0,Y=1,X=2,W=0,T=1,Q=2,P=3] 
* CE 52: loop_cont_eval_build_tree_bb1_in(P,A,B,C,D,E,F) = 1+ eval_build_tree_bb6_in(A,B,C,D,E,Q,R,S,T,U,V,W):6+ loop_cont_eval_build_tree_bb6_in(X,R,S,T,U,V,W,F):4
     [2*W+1>=T,V>=E,T>=2*W,W>=1,1>=C,X=2,Q=2,P=3] 
* CE 53: loop_cont_eval_build_tree_bb1_in(P,A,B,C,D,E,F) = 1+ eval_build_tree_bb6_in(A,B,C,D,E,Q,R,S,T,U,V,W):7
     [1>=C,P=3] 

### Cost equations --> "Loop" of loop_cont_eval_build_tree_bb1_in/7 
* CEs [38,42,45,46] --> Loop 36 
* CEs [40,48,51,52,53] --> Loop 37 
* CEs [37,41,43,44] --> Loop 38 
* CEs [39,47,49,50] --> Loop 39 

#### Loops of loop_cont_eval_build_tree_bb1_in/7 
* Loop 36: loop_cont_eval_build_tree_bb1_in(P,A,B,C,D,E,F) [C>=2,P=3] 
* Loop 37: loop_cont_eval_build_tree_bb1_in(P,A,B,C,D,E,F) [1>=C,P=3] 
* Loop 38: loop_cont_eval_build_tree_bb1_in(P,A,B,C,D,E,F) [C>=2,P=3] 
* Loop 39: loop_cont_eval_build_tree_bb1_in(P,A,B,C,D,E,F) [1>=C,P=3] 

### Ranking functions of CR loop_cont_eval_build_tree_bb1_in(P,A,B,C,D,E,F) 

#### Partial ranking functions of CR loop_cont_eval_build_tree_bb1_in(P,A,B,C,D,E,F) 


### Resulting Chains:loop_cont_eval_build_tree_bb1_in(P,A,B,C,D,E,F) 
* [39]
* [38]
* [37]...
* [36]...


### Merging Chains  loop_cont_eval_build_tree_bb1_in/7 into  External patterns of execution 
* [[39]] --> 1 
* [[38]] --> 2 
* [[37]] --> 3 
* [[36]] --> 4 


### Specialization of cost equations eval_build_tree_bb0_in/5 
* CE 3 is refined into CE [54,55,56,57,58,59] 


#### Refined cost equations eval_build_tree_bb0_in/5 
* CE 54: eval_build_tree_bb0_in(V__opt_len,V__static_len,V__heap_len,V__heap_max,B) = 1+ eval_build_tree_bb1_in(V__opt_len,V__static_len,C,D,E,F,G,H,V__opt_len,V__static_len,I,J,K):1+ loop_cont_eval_build_tree_bb1_in(L,V__opt_len,V__static_len,M,N,O,B):1
     [0>=E,O+1=0,N=573,M=0,L=3,K+1=0,J=573,I=0,H=3,G=0,F+1=0,D=573,C=0] 
* CE 55: eval_build_tree_bb0_in(V__opt_len,V__static_len,V__heap_len,V__heap_max,B) = 1+ eval_build_tree_bb1_in(V__opt_len,V__static_len,C,D,E,F,G,H,V__opt_len,V__static_len,I,J,K):1+ loop_cont_eval_build_tree_bb1_in(L,V__opt_len,V__static_len,M,N,O,B):3
     [0>=E,O+1=0,N=573,M=0,L=3,K+1=0,J=573,I=0,H=3,G=0,F+1=0,D=573,C=0] 
* CE 56: eval_build_tree_bb0_in(V__opt_len,V__static_len,V__heap_len,V__heap_max,B) = 1+ eval_build_tree_bb1_in(V__opt_len,V__static_len,C,D,E,F,G,H,I,J,K,L,M):2+ loop_cont_eval_build_tree_bb1_in(N,I,J,K,L,M,B):1
     [E>=M+1,M+1>=0,E>=1,1>=K,N=3,H=3,G=0,F+1=0,D=573,C=0] 
* CE 57: eval_build_tree_bb0_in(V__opt_len,V__static_len,V__heap_len,V__heap_max,B) = 1+ eval_build_tree_bb1_in(V__opt_len,V__static_len,C,D,E,F,G,H,I,J,K,L,M):2+ loop_cont_eval_build_tree_bb1_in(N,I,J,K,L,M,B):2
     [E>=M+1,K>=2,M+1>=0,E>=1,N=3,H=3,G=0,F+1=0,D=573,C=0] 
* CE 58: eval_build_tree_bb0_in(V__opt_len,V__static_len,V__heap_len,V__heap_max,B) = 1+ eval_build_tree_bb1_in(V__opt_len,V__static_len,C,D,E,F,G,H,I,J,K,L,M):2+ loop_cont_eval_build_tree_bb1_in(N,I,J,K,L,M,B):3
     [E>=M+1,M+1>=0,E>=1,1>=K,N=3,H=3,G=0,F+1=0,D=573,C=0] 
* CE 59: eval_build_tree_bb0_in(V__opt_len,V__static_len,V__heap_len,V__heap_max,B) = 1+ eval_build_tree_bb1_in(V__opt_len,V__static_len,C,D,E,F,G,H,I,J,K,L,M):2+ loop_cont_eval_build_tree_bb1_in(N,I,J,K,L,M,B):4
     [E>=M+1,K>=2,M+1>=0,E>=1,N=3,H=3,G=0,F+1=0,D=573,C=0] 

### Cost equations --> "Loop" of eval_build_tree_bb0_in/5 
* CEs [55,58,59] --> Loop 40 
* CEs [54,56,57] --> Loop 41 

#### Loops of eval_build_tree_bb0_in/5 
* Loop 40: eval_build_tree_bb0_in(V__opt_len,V__static_len,V__heap_len,V__heap_max,B) [] 
* Loop 41: eval_build_tree_bb0_in(V__opt_len,V__static_len,V__heap_len,V__heap_max,B) [] 

### Ranking functions of CR eval_build_tree_bb0_in(V__opt_len,V__static_len,V__heap_len,V__heap_max,B) 

#### Partial ranking functions of CR eval_build_tree_bb0_in(V__opt_len,V__static_len,V__heap_len,V__heap_max,B) 


### Resulting Chains:eval_build_tree_bb0_in(V__opt_len,V__static_len,V__heap_len,V__heap_max,B) 
* [41]
* [40]...


### Merging Chains  eval_build_tree_bb0_in/5 into  External patterns of execution 
* [[41]] --> 1 
* [[40]] --> 2 


### Specialization of cost equations eval_build_tree_start/5 
* CE 2 is refined into CE [60,61] 


#### Refined cost equations eval_build_tree_start/5 
* CE 60: eval_build_tree_start(V__opt_len,V__static_len,V__heap_len,V__heap_max,B) = 0+ eval_build_tree_bb0_in(V__opt_len,V__static_len,V__heap_len,V__heap_max,B):1
     [] 
* CE 61: eval_build_tree_start(V__opt_len,V__static_len,V__heap_len,V__heap_max,B) = 0+ eval_build_tree_bb0_in(V__opt_len,V__static_len,V__heap_len,V__heap_max,B):2
     [] 

### Cost equations --> "Loop" of eval_build_tree_start/5 
* CEs [61] --> Loop 42 
* CEs [60] --> Loop 43 

#### Loops of eval_build_tree_start/5 
* Loop 42: eval_build_tree_start(V__opt_len,V__static_len,V__heap_len,V__heap_max,B) [] 
* Loop 43: eval_build_tree_start(V__opt_len,V__static_len,V__heap_len,V__heap_max,B) [] 

### Ranking functions of CR eval_build_tree_start(V__opt_len,V__static_len,V__heap_len,V__heap_max,B) 

#### Partial ranking functions of CR eval_build_tree_start(V__opt_len,V__static_len,V__heap_len,V__heap_max,B) 


### Resulting Chains:eval_build_tree_start(V__opt_len,V__static_len,V__heap_len,V__heap_max,B) 
* [43]
* [42]...


### Merging Chains  eval_build_tree_start/5 into  External patterns of execution 
* [[43]] --> 1 
* [[42]] --> 2 


Computing Bounds
=====================================

#### Cost of loops [18,19] 

 * loop 18:eval_build_tree_bb1_in(V__opt_len,V__static_len,V__heap_len,V__heap_max,V_5,V_max_code_0,V_n_0,B,C,D,E,F,G) -> [eval_build_tree_bb1_in(V__opt_len',V__static_len',V__heap_len',V__heap_max',V_5',V_max_code_0',V_n_0',B',C',D',E',F',G')] 
1
 * loop 19:eval_build_tree_bb1_in(V__opt_len,V__static_len,V__heap_len,V__heap_max,V_5,V_max_code_0,V_n_0,B,C,D,E,F,G) -> [eval_build_tree_bb1_in(V__opt_len',V__static_len',V__heap_len',V__heap_max',V_5',V_max_code_0',V_n_0',B',C',D',E',F',G')] 
1
#### Cost of phase [18,19]:eval_build_tree_bb1_in(V__opt_len,V__static_len,V__heap_len,V__heap_max,V_5,V_max_code_0,V_n_0,B,C,D,E,F,G) -> [eval_build_tree_bb1_in(V__opt_len',V__static_len',V__heap_len',V__heap_max',V_5',V_max_code_0',V_n_0',B',C',D',E',F',G')] 
1*it(18)+1*it(19)+0
  Such that:it(19) =< V_5-V_max_code_0
it(19) =< V_5-V_max_code_0-V_5'+V_max_code_0'
aux(1) =< V_5-V_n_0
aux(2) =< V_5-V_n_0-V_5'+V_n_0'
it(18) =< aux(1)
it(19) =< aux(1)
it(18) =< aux(2)
it(19) =< aux(2)

#### Cost of chains of eval_build_tree_bb1_in(V__opt_len,V__static_len,V__heap_len,V__heap_max,V_5,V_max_code_0,V_n_0,B,C,D,E,F,G):
* Chain [[18,19],20]: 1*it(18)+1*it(19)+0
  Such that:it(19) =< -V_max_code_0+G
aux(3) =< V_5-V_n_0
it(18) =< aux(3)
it(19) =< aux(3)

  with precondition: [B=3,V_max_code_0+1>=0,V_n_0>=V_max_code_0+1,G>=V_max_code_0,V_5>=V_n_0+1,V_5>=G+1] 

* Chain [20]: 0
  with precondition: [B=3,C=V__opt_len,D=V__static_len,E=V__heap_len,F=V__heap_max,V_max_code_0=G,V_max_code_0+1>=0,V_n_0>=V_5,V_n_0>=V_max_code_0+1] 


#### Cost of loops [21,22] 

 * loop 21:eval_build_tree_bb6_in(V__opt_len,V__static_len,V__heap_len,V__heap_max,V_max_code_2,B,C,D,E,F,G,H) -> [eval_build_tree_bb6_in(V__opt_len',V__static_len',V__heap_len',V__heap_max',V_max_code_2',B',C',D',E',F',G',H')] 
1
 * loop 22:eval_build_tree_bb6_in(V__opt_len,V__static_len,V__heap_len,V__heap_max,V_max_code_2,B,C,D,E,F,G,H) -> [eval_build_tree_bb6_in(V__opt_len',V__static_len',V__heap_len',V__heap_max',V_max_code_2',B',C',D',E',F',G',H')] 
1
#### Cost of phase [21,22]:eval_build_tree_bb6_in(V__opt_len,V__static_len,V__heap_len,V__heap_max,V_max_code_2,B,C,D,E,F,G,H) -> [eval_build_tree_bb6_in(V__opt_len',V__static_len',V__heap_len',V__heap_max',V_max_code_2',B',C',D',E',F',G',H')] 
2*it(21)+0
#### Cost of phase [21,22]:eval_build_tree_bb6_in(V__opt_len,V__static_len,V__heap_len,V__heap_max,V_max_code_2,B,C,D,E,F,G,H) -> [eval_build_tree_bb6_in(V__opt_len',V__static_len',V__heap_len',V__heap_max',V_max_code_2',B',C',D',E',F',G',H')] 
2*it(21)+0
#### Cost of phase [21,22]:eval_build_tree_bb6_in(V__opt_len,V__static_len,V__heap_len,V__heap_max,V_max_code_2,B,C,D,E,F,G,H) -> [eval_build_tree_bb6_in(V__opt_len',V__static_len',V__heap_len',V__heap_max',V_max_code_2',B',C',D',E',F',G',H')] 
2*it(21)+0
#### Cost of phase [21,22]:eval_build_tree_bb6_in(V__opt_len,V__static_len,V__heap_len,V__heap_max,V_max_code_2,B,C,D,E,F,G,H) -> [eval_build_tree_bb6_in(V__opt_len',V__static_len',V__heap_len',V__heap_max',V_max_code_2',B',C',D',E',F',G',H')] 
2*it(21)+0
#### Cost of chains of eval_build_tree_bb6_in(V__opt_len,V__static_len,V__heap_len,V__heap_max,V_max_code_2,B,C,D,E,F,G,H):
* Chain [[21,22]]...: 2*it(21)+0
  with precondition: [1>=V__heap_len] 

* Chain [[21,22],25]: 2*it(21)+0
  with precondition: [B=2,E=0,H=0,1>=V__heap_len,G>=V_max_code_2] 

* Chain [[21,22],24]: 2*it(21)+0
  with precondition: [B=2,1>=V__heap_len,0>=E+1,E+1>=2*H,G>=V_max_code_2,2*H>=E] 

* Chain [[21,22],23]: 2*it(21)+0
  with precondition: [B=2,1>=V__heap_len,E>=1,E>=2*H,G>=V_max_code_2,2*H+1>=E] 

* Chain [25]: 0
  with precondition: [B=2,E=0,H=0,G=V_max_code_2,V__heap_len>=2] 

* Chain [24]: 0
  with precondition: [B=2,G=V_max_code_2,0>=E+1,V__heap_len>=2,E+1>=2*H,2*H>=E] 

* Chain [23]: 0
  with precondition: [B=2,G=V_max_code_2,V__heap_len>=2,E>=1,E>=2*H,2*H+1>=E] 


#### Cost of loops [26] 

 * loop 26:eval_build_tree_bb10_in(V__opt_len,V__static_len,V__heap_len,V__heap_max,V_max_code_2,V_n_1,B,C,D,E,F,G) -> [eval_build_tree_bb10_in(V__opt_len',V__static_len',V__heap_len',V__heap_max',V_max_code_2',V_n_1',B',C',D',E',F',G')] 
1
#### Cost of phase [26]:eval_build_tree_bb10_in(V__opt_len,V__static_len,V__heap_len,V__heap_max,V_max_code_2,V_n_1,B,C,D,E,F,G) -> [eval_build_tree_bb10_in(V__opt_len',V__static_len',V__heap_len',V__heap_max',V_max_code_2',V_n_1',B',C',D',E',F',G')] 
1*it(26)+0
  Such that:it(26) =< V_n_1
it(26) =< V_n_1-V_n_1'

#### Cost of chains of eval_build_tree_bb10_in(V__opt_len,V__static_len,V__heap_len,V__heap_max,V_max_code_2,V_n_1,B,C,D,E,F,G):
* Chain [[26],27]: 1*it(26)+0
  Such that:it(26) =< V_n_1

  with precondition: [B=5,V__opt_len=C,V__static_len=D,V__heap_len=E,V__heap_max=F,V_max_code_2=G,V_n_1>=1] 

* Chain [27]: 0
  with precondition: [B=5,C=V__opt_len,D=V__static_len,E=V__heap_len,F=V__heap_max,G=V_max_code_2,0>=V_n_1] 


#### Cost of loops [29] 

 * loop 29:eval_build_tree_bb12_in(V__opt_len,V__static_len,V__heap_len,V__heap_max,V_max_code_2,B,C,D,E,F,G) -> [eval_build_tree_bb12_in(V__opt_len',V__static_len',V__heap_len',V__heap_max',V_max_code_2',B',C',D',E',F',G')] 
1
#### Cost of phase [29]:eval_build_tree_bb12_in(V__opt_len,V__static_len,V__heap_len,V__heap_max,V_max_code_2,B,C,D,E,F,G) -> [eval_build_tree_bb12_in(V__opt_len',V__static_len',V__heap_len',V__heap_max',V_max_code_2',B',C',D',E',F',G')] 
1*it(29)+0
#### Cost of phase [29]:eval_build_tree_bb12_in(V__opt_len,V__static_len,V__heap_len,V__heap_max,V_max_code_2,B,C,D,E,F,G) -> [eval_build_tree_bb12_in(V__opt_len',V__static_len',V__heap_len',V__heap_max',V_max_code_2',B',C',D',E',F',G')] 
1*it(29)+0
#### Cost of chains of eval_build_tree_bb12_in(V__opt_len,V__static_len,V__heap_len,V__heap_max,V_max_code_2,B,C,D,E,F,G):
* Chain [[29]]...: 1*it(29)+0
  with precondition: [B=4] 

* Chain [[29],28]: 1*it(29)+0
  with precondition: [B=4,V_max_code_2=G,1>=E] 

* Chain [28]: 0
  with precondition: [B=4,G=V_max_code_2,1>=E] 


#### Cost of chains of loop_cont_eval_build_tree_bb10_in(N,A,B,C,D,E,F):
* Chain [31]: 1*s(2)+1
  with precondition: [N=5] 

* Chain [30]...: 1*s(3)+1
  with precondition: [N=5] 


#### Cost of chains of loop_cont_eval_build_tree_bb6_in(Q,A,B,C,D,E,F,G):
* Chain [35]: 1*s(4)+2
  with precondition: [Q=2,0>=F] 

* Chain [34]: 1*s(5)+1*s(6)+2
  Such that:s(5) =< F

  with precondition: [Q=2,F>=1] 

* Chain [33]...: 1*s(7)+2
  with precondition: [Q=2,0>=F] 

* Chain [32]...: 1*s(8)+1*s(9)+2
  Such that:s(8) =< F

  with precondition: [Q=2,F>=1] 


#### Cost of chains of loop_cont_eval_build_tree_bb1_in(P,A,B,C,D,E,F):
* Chain [39]: 1*aux(5)+0
  with precondition: [P=3,1>=C] 

* Chain [38]: 1*aux(6)+0
  with precondition: [P=3,C>=2] 

* Chain [37]...: 1*aux(7)+0
  with precondition: [P=3,1>=C] 

* Chain [36]...: 1*aux(8)+0
  with precondition: [P=3,C>=2] 


#### Cost of chains of eval_build_tree_bb0_in(V__opt_len,V__static_len,V__heap_len,V__heap_max,B):
* Chain [41]: 1*aux(9)+0
  with precondition: [] 

* Chain [40]...: 1*aux(10)+0
  with precondition: [] 


#### Cost of chains of eval_build_tree_start(V__opt_len,V__static_len,V__heap_len,V__heap_max,B):
* Chain [43]: 1*s(57)+0
  with precondition: [] 

* Chain [42]...: 1*s(58)+0
  with precondition: [] 


Closed-form bounds of eval_build_tree_start(V__opt_len,V__static_len,V__heap_len,V__heap_max,B): 
-------------------------------------
* Chain [43] with precondition: [] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [42]... with precondition: [] 
    - Upper bound: inf 
    - Complexity: infinity 

### Maximum cost of eval_build_tree_start(V__opt_len,V__static_len,V__heap_len,V__heap_max,B): inf 
Asymptotic class: infinity 

Time statistics: 
-------------------------------------
* Partial evaluation computed in 173 ms.
* Invariants computed in 228 ms.
   - Backward Invariants 117 ms.
   - Transitive Invariants 54 ms.
* Refinement performed in 578 ms.
* Termination proved in 36 ms.
* Upper bounds computed in 331 ms.
   - Equation cost structures 186 ms.
   - Phase cost structures 76 ms.
   - Chain cost structures 87 ms.
   - Solving cost expressions 0 ms.
* Total analysis performed in 1569 ms.


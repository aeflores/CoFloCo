Warning: Ignored call to eval_reg2mpi_stop/1 in equation eval_reg2mpi_30/1 

Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. recursive  : [eval_reg2mpi_bb1_in/4]
1. non_recursive  : [eval_reg2mpi_30/1]
2. non_recursive  : [eval_reg2mpi_29/2]
3. non_recursive  : [loop_cont_eval_reg2mpi_bb1_in/3]
4. non_recursive  : [eval_reg2mpi_23/3]
5. non_recursive  : [eval_reg2mpi_22/4]
6. non_recursive  : [eval_reg2mpi_16/4]
7. non_recursive  : [eval_reg2mpi_15/5]
8. non_recursive  : [eval_reg2mpi_11/4]
9. non_recursive  : [eval_reg2mpi_10/5]
10. non_recursive  : [eval_reg2mpi_1/3]
11. non_recursive  : [eval_reg2mpi_0/2]
12. non_recursive  : [eval_reg2mpi_bb0_in/2]
13. non_recursive  : [eval_reg2mpi_start/2]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into eval_reg2mpi_bb1_in/4
1. SCC is completely evaluated into other SCCs
2. SCC is completely evaluated into other SCCs
3. SCC is completely evaluated into other SCCs
4. SCC is partially evaluated into eval_reg2mpi_23/3
5. SCC is completely evaluated into other SCCs
6. SCC is completely evaluated into other SCCs
7. SCC is completely evaluated into other SCCs
8. SCC is completely evaluated into other SCCs
9. SCC is completely evaluated into other SCCs
10. SCC is completely evaluated into other SCCs
11. SCC is completely evaluated into other SCCs
12. SCC is completely evaluated into other SCCs
13. SCC is partially evaluated into eval_reg2mpi_start/2

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations eval_reg2mpi_bb1_in/4 
* CE 6 is refined into CE [7] 
* CE 5 is refined into CE [8] 
* CE 4 is refined into CE [9] 


#### Refined cost equations eval_reg2mpi_bb1_in/4 
* CE 7: eval_reg2mpi_bb1_in(A,B,C,A) = 0
     [C=2,B=0] 
* CE 8: eval_reg2mpi_bb1_in(V__global_precision,V_bytecount_0,B,C) = 1+ eval_reg2mpi_bb1_in(D,E,F,C)
     [V_bytecount_0>=1,V_bytecount_0=E+1,F=2,B=2] 
* CE 9: eval_reg2mpi_bb1_in(V__global_precision,V_bytecount_0,B,C) = 1+ eval_reg2mpi_bb1_in(D,E,F,C)
     [0>=V_bytecount_0+1,V_bytecount_0=E+1,F=2,B=2] 

### Cost equations --> "Loop" of eval_reg2mpi_bb1_in/4 
* CEs [8] --> Loop 6 
* CEs [9] --> Loop 7 
* CEs [7] --> Loop 8 

#### Loops of eval_reg2mpi_bb1_in/4 
* Loop 6: eval_reg2mpi_bb1_in(V__global_precision,V_bytecount_0,B,C)->  eval_reg2mpi_bb1_in(V__global_precision',V_bytecount_0',B',C)
                  [V_bytecount_0>=1,V_bytecount_0=V_bytecount_0'+1,B'=2,B=2] 
* Loop 7: eval_reg2mpi_bb1_in(V__global_precision,V_bytecount_0,B,C)->  eval_reg2mpi_bb1_in(V__global_precision',V_bytecount_0',B',C)
                  [0>=V_bytecount_0+1,V_bytecount_0=V_bytecount_0'+1,B'=2,B=2] 
* Loop 8: eval_reg2mpi_bb1_in(A,B,C,A) [C=2,B=0] 

### Ranking functions of CR eval_reg2mpi_bb1_in(V__global_precision,V_bytecount_0,B,C) 
* RF of phase [6]: [V_bytecount_0]

#### Partial ranking functions of CR eval_reg2mpi_bb1_in(V__global_precision,V_bytecount_0,B,C) 
* Partial RF of phase [6]:
  - RF of loop [6:1]:
    V_bytecount_0


### Resulting Chains:eval_reg2mpi_bb1_in(V__global_precision,V_bytecount_0,B,C) 
* [[7]]...
* [[6],8]
* [8]


### Merging Chains  eval_reg2mpi_bb1_in/4 into  External patterns of execution 
* [[8]] --> 1 
* [[8,[6]]] --> 2 
* [[[7]]] --> 3 


### Specialization of cost equations eval_reg2mpi_23/3 
* CE 3 is refined into CE [10,11,12] 


#### Refined cost equations eval_reg2mpi_23/3 
* CE 10: eval_reg2mpi_23(V__global_precision,V_5,B) = 1+ eval_reg2mpi_bb1_in(V__global_precision,C,D,V__global_precision):1
     [D=2,C=0,V_5=0] 
* CE 11: eval_reg2mpi_23(V__global_precision,V_5,B) = 1+ eval_reg2mpi_bb1_in(V__global_precision,V_5,C,D):2
     [V_5>=1,C=2] 
* CE 12: eval_reg2mpi_23(V__global_precision,V_5,B) = 1+ eval_reg2mpi_bb1_in(V__global_precision,V_5,C,D):3
     [0>=V_5+1,C=2] 

### Cost equations --> "Loop" of eval_reg2mpi_23/3 
* CEs [12] --> Loop 9 
* CEs [11] --> Loop 10 
* CEs [10] --> Loop 11 

#### Loops of eval_reg2mpi_23/3 
* Loop 9: eval_reg2mpi_23(V__global_precision,V_5,B) [0>=V_5+1] 
* Loop 10: eval_reg2mpi_23(V__global_precision,V_5,B) [V_5>=1] 
* Loop 11: eval_reg2mpi_23(V__global_precision,V_5,B) [V_5=0] 

### Ranking functions of CR eval_reg2mpi_23(V__global_precision,V_5,B) 

#### Partial ranking functions of CR eval_reg2mpi_23(V__global_precision,V_5,B) 


### Resulting Chains:eval_reg2mpi_23(V__global_precision,V_5,B) 
* [11]
* [10]
* [9]...


### Merging Chains  eval_reg2mpi_23/3 into  External patterns of execution 
* [[11]] --> 1 
* [[10]] --> 2 
* [[9]] --> 3 


### Specialization of cost equations eval_reg2mpi_start/2 
* CE 2 is refined into CE [13,14,15] 


#### Refined cost equations eval_reg2mpi_start/2 
* CE 13: eval_reg2mpi_start(V__global_precision,B) = 0+ eval_reg2mpi_23(V__global_precision,C,B):1
     [C=0] 
* CE 14: eval_reg2mpi_start(V__global_precision,B) = 0+ eval_reg2mpi_23(V__global_precision,C,B):2
     [C>=1] 
* CE 15: eval_reg2mpi_start(V__global_precision,B) = 0+ eval_reg2mpi_23(V__global_precision,C,B):3
     [0>=C+1] 

### Cost equations --> "Loop" of eval_reg2mpi_start/2 
* CEs [15] --> Loop 12 
* CEs [13,14] --> Loop 13 

#### Loops of eval_reg2mpi_start/2 
* Loop 12: eval_reg2mpi_start(V__global_precision,B) [] 
* Loop 13: eval_reg2mpi_start(V__global_precision,B) [] 

### Ranking functions of CR eval_reg2mpi_start(V__global_precision,B) 

#### Partial ranking functions of CR eval_reg2mpi_start(V__global_precision,B) 


### Resulting Chains:eval_reg2mpi_start(V__global_precision,B) 
* [13]
* [12]...


### Merging Chains  eval_reg2mpi_start/2 into  External patterns of execution 
* [[13]] --> 1 
* [[12]] --> 2 


Computing Bounds
=====================================

#### Cost of loops [7] 

 * loop 7:eval_reg2mpi_bb1_in(V__global_precision,V_bytecount_0,B,C) -> [eval_reg2mpi_bb1_in(V__global_precision',V_bytecount_0',B',C')] 
1
#### Cost of phase [7]:eval_reg2mpi_bb1_in(V__global_precision,V_bytecount_0,B,C) -> [eval_reg2mpi_bb1_in(V__global_precision',V_bytecount_0',B',C')] 
1*it(7)+0
#### Cost of loops [6] 

 * loop 6:eval_reg2mpi_bb1_in(V__global_precision,V_bytecount_0,B,C) -> [eval_reg2mpi_bb1_in(V__global_precision',V_bytecount_0',B',C')] 
1
#### Cost of phase [6]:eval_reg2mpi_bb1_in(V__global_precision,V_bytecount_0,B,C) -> [eval_reg2mpi_bb1_in(V__global_precision',V_bytecount_0',B',C')] 
1*it(6)+0
  Such that:it(6) =< V_bytecount_0
it(6) =< V_bytecount_0-V_bytecount_0'

#### Cost of chains of eval_reg2mpi_bb1_in(V__global_precision,V_bytecount_0,B,C):
* Chain [[7]]...: 1*it(7)+0
  with precondition: [0>=V_bytecount_0+1,B=2] 

* Chain [[6],8]: 1*it(6)+0
  Such that:it(6) =< V_bytecount_0

  with precondition: [B=2,V_bytecount_0>=1] 

* Chain [8]: 0
  with precondition: [V_bytecount_0=0,B=2,C=V__global_precision] 


#### Cost of chains of eval_reg2mpi_23(V__global_precision,V_5,B):
* Chain [11]: 1
  with precondition: [V_5=0] 

* Chain [10]: 1*s(1)+1
  Such that:s(1) =< V_5

  with precondition: [V_5>=1] 

* Chain [9]...: 1*s(2)+1
  with precondition: [0>=V_5+1] 


#### Cost of chains of eval_reg2mpi_start(V__global_precision,B):
* Chain [13]: 1*aux(1)+0
  with precondition: [] 

* Chain [12]...: 1*s(4)+1
  with precondition: [] 


Closed-form bounds of eval_reg2mpi_start(V__global_precision,B): 
-------------------------------------
* Chain [13] with precondition: [] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [12]... with precondition: [] 
    - Upper bound: inf 
    - Complexity: infinity 

### Maximum cost of eval_reg2mpi_start(V__global_precision,B): inf 
Asymptotic class: infinity 

Time statistics: 
-------------------------------------
* Partial evaluation computed in 6 ms.
* Invariants computed in 9 ms.
   - Backward Invariants 3 ms.
   - Transitive Invariants 2 ms.
* Refinement performed in 16 ms.
* Termination proved in 2 ms.
* Upper bounds computed in 11 ms.
   - Equation cost structures 5 ms.
   - Phase cost structures 4 ms.
   - Chain cost structures 3 ms.
   - Solving cost expressions 0 ms.
* Total analysis performed in 57 ms.


Warning: Ignored call to eval_GetHashedPassPhrase_stop/1 in equation eval_GetHashedPassPhrase_bb9_in/1 

Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. recursive  : [eval_GetHashedPassPhrase_10/10,eval_GetHashedPassPhrase_11/10,eval_GetHashedPassPhrase_12/10,eval_GetHashedPassPhrase_13/11,eval_GetHashedPassPhrase_14/11,eval_GetHashedPassPhrase_15/11,eval_GetHashedPassPhrase_35/11,eval_GetHashedPassPhrase_36/11,eval_GetHashedPassPhrase_37/11,eval_GetHashedPassPhrase_38/11,eval_GetHashedPassPhrase_4/9,eval_GetHashedPassPhrase_5/9,eval_GetHashedPassPhrase_6/9,eval_GetHashedPassPhrase_7/9,eval_GetHashedPassPhrase_8/10,eval_GetHashedPassPhrase_9/10,eval_GetHashedPassPhrase_bb1_in/9]
1. non_recursive  : [eval_GetHashedPassPhrase_bb9_in/1]
2. non_recursive  : [eval_GetHashedPassPhrase_34/1]
3. non_recursive  : [eval_GetHashedPassPhrase_33/4]
4. non_recursive  : [eval_GetHashedPassPhrase_32/4]
5. non_recursive  : [eval_GetHashedPassPhrase_31/5]
6. non_recursive  : [eval_GetHashedPassPhrase_30/5]
7. non_recursive  : [eval_GetHashedPassPhrase_29/4]
8. non_recursive  : [eval_GetHashedPassPhrase_27/4]
9. non_recursive  : [eval_GetHashedPassPhrase_26/4]
10. non_recursive  : [eval_GetHashedPassPhrase_bb7_in/4]
11. non_recursive  : [eval_GetHashedPassPhrase_25/4]
12. non_recursive  : [eval_GetHashedPassPhrase_24/4]
13. non_recursive  : [eval_GetHashedPassPhrase_bb6_in/4]
14. non_recursive  : [eval_GetHashedPassPhrase_bb3_in/4]
15. non_recursive  : [loop_cont_eval_GetHashedPassPhrase_bb1_in/5]
16. non_recursive  : [eval_GetHashedPassPhrase_bb0_in/5]
17. non_recursive  : [eval_GetHashedPassPhrase_start/5]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into eval_GetHashedPassPhrase_bb1_in/9
1. SCC is completely evaluated into other SCCs
2. SCC is completely evaluated into other SCCs
3. SCC is completely evaluated into other SCCs
4. SCC is completely evaluated into other SCCs
5. SCC is completely evaluated into other SCCs
6. SCC is completely evaluated into other SCCs
7. SCC is completely evaluated into other SCCs
8. SCC is partially evaluated into eval_GetHashedPassPhrase_27/4
9. SCC is completely evaluated into other SCCs
10. SCC is completely evaluated into other SCCs
11. SCC is completely evaluated into other SCCs
12. SCC is completely evaluated into other SCCs
13. SCC is completely evaluated into other SCCs
14. SCC is partially evaluated into eval_GetHashedPassPhrase_bb3_in/4
15. SCC is completely evaluated into other SCCs
16. SCC is partially evaluated into eval_GetHashedPassPhrase_bb0_in/5
17. SCC is partially evaluated into eval_GetHashedPassPhrase_start/5

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations eval_GetHashedPassPhrase_bb1_in/9 
* CE 9 is refined into CE [16] 
* CE 12 is refined into CE [17] 
* CE 8 is discarded (unfeasible) 
* CE 11 is refined into CE [18] 
* CE 10 is discarded (unfeasible) 
* CE 13 is refined into CE [19] 
* CE 6 is refined into CE [20] 
* CE 5 is discarded (unfeasible) 
* CE 7 is discarded (unfeasible) 


#### Refined cost equations eval_GetHashedPassPhrase_bb1_in/9 
* CE 16: eval_GetHashedPassPhrase_bb1_in(A,B,C,D,D,E,A,B,C) = 0
     [D>=2,E=2] 
* CE 17: eval_GetHashedPassPhrase_bb1_in(A,B,C,D,E,F,A,B,C) = 0
     [F=2,E=1,D=1] 
* CE 18: eval_GetHashedPassPhrase_bb1_in(A,B,C,D,D,E,A,B,C) = 0
     [0>=D+1,E=2] 
* CE 19: eval_GetHashedPassPhrase_bb1_in(A,B,C,D,E,F,A,B,C) = 0
     [F=2,E=0,D=0] 
* CE 20: eval_GetHashedPassPhrase_bb1_in(A,B,C,D,D,E,F,G,H) = 1+ eval_GetHashedPassPhrase_bb1_in(A,B,C,D,D,I,F,G,H)
     [D>=2,I=2,E=2] 

### Cost equations --> "Loop" of eval_GetHashedPassPhrase_bb1_in/9 
* CEs [20] --> Loop 14 
* CEs [16] --> Loop 15 
* CEs [18] --> Loop 16 
* CEs [17] --> Loop 17 
* CEs [19] --> Loop 18 

#### Loops of eval_GetHashedPassPhrase_bb1_in/9 
* Loop 14: eval_GetHashedPassPhrase_bb1_in(A,B,C,D,D,E,F,G,H)->  eval_GetHashedPassPhrase_bb1_in(A,B,C,D,D,A',F,G,H)
                  [D>=2,A'=2,E=2] 
* Loop 15: eval_GetHashedPassPhrase_bb1_in(A,B,C,D,D,E,A,B,C) [D>=2,E=2] 
* Loop 16: eval_GetHashedPassPhrase_bb1_in(A,B,C,D,D,E,A,B,C) [0>=D+1,E=2] 
* Loop 17: eval_GetHashedPassPhrase_bb1_in(A,B,C,D,E,F,A,B,C) [F=2,E=1,D=1] 
* Loop 18: eval_GetHashedPassPhrase_bb1_in(A,B,C,D,E,F,A,B,C) [F=2,E=0,D=0] 

### Ranking functions of CR eval_GetHashedPassPhrase_bb1_in(V__showpass,V__filter_mode,V__quietmode,V__noecho,V_3,B,C,D,E) 

#### Partial ranking functions of CR eval_GetHashedPassPhrase_bb1_in(V__showpass,V__filter_mode,V__quietmode,V__noecho,V_3,B,C,D,E) 


### Resulting Chains:eval_GetHashedPassPhrase_bb1_in(V__showpass,V__filter_mode,V__quietmode,V__noecho,V_3,B,C,D,E) 
* [[14]]...
* [[14],15]
* [18]
* [17]
* [16]
* [15]


### Merging Chains  eval_GetHashedPassPhrase_bb1_in/9 into  External patterns of execution 
* [[18]] --> 1 
* [[17]] --> 2 
* [[16]] --> 3 
* [[15],[15,[14]]] --> 4 
* [[[14]]] --> 5 


### Specialization of cost equations eval_GetHashedPassPhrase_27/4 
* CE 15 is refined into CE [21] 


#### Refined cost equations eval_GetHashedPassPhrase_27/4 
* CE 21: eval_GetHashedPassPhrase_27(V__showpass,V__filter_mode,V__quietmode,B) = 0
     [] 

### Cost equations --> "Loop" of eval_GetHashedPassPhrase_27/4 
* CEs [21] --> Loop 19 

#### Loops of eval_GetHashedPassPhrase_27/4 
* Loop 19: eval_GetHashedPassPhrase_27(V__showpass,V__filter_mode,V__quietmode,B) [] 

### Ranking functions of CR eval_GetHashedPassPhrase_27(V__showpass,V__filter_mode,V__quietmode,B) 

#### Partial ranking functions of CR eval_GetHashedPassPhrase_27(V__showpass,V__filter_mode,V__quietmode,B) 


### Resulting Chains:eval_GetHashedPassPhrase_27(V__showpass,V__filter_mode,V__quietmode,B) 
* [19]


### Merging Chains  eval_GetHashedPassPhrase_27/4 into  External patterns of execution 
* [[19]] --> 1 


### Specialization of cost equations eval_GetHashedPassPhrase_bb3_in/4 
* CE 14 is refined into CE [22] 


#### Refined cost equations eval_GetHashedPassPhrase_bb3_in/4 
* CE 22: eval_GetHashedPassPhrase_bb3_in(V__showpass,V__filter_mode,V__quietmode,B) = 0+ eval_GetHashedPassPhrase_27(V__showpass,V__filter_mode,V__quietmode,B):1
     [] 

### Cost equations --> "Loop" of eval_GetHashedPassPhrase_bb3_in/4 
* CEs [22] --> Loop 20 

#### Loops of eval_GetHashedPassPhrase_bb3_in/4 
* Loop 20: eval_GetHashedPassPhrase_bb3_in(V__showpass,V__filter_mode,V__quietmode,B) [] 

### Ranking functions of CR eval_GetHashedPassPhrase_bb3_in(V__showpass,V__filter_mode,V__quietmode,B) 

#### Partial ranking functions of CR eval_GetHashedPassPhrase_bb3_in(V__showpass,V__filter_mode,V__quietmode,B) 


### Resulting Chains:eval_GetHashedPassPhrase_bb3_in(V__showpass,V__filter_mode,V__quietmode,B) 
* [20]


### Merging Chains  eval_GetHashedPassPhrase_bb3_in/4 into  External patterns of execution 
* [[20]] --> 1 


### Specialization of cost equations eval_GetHashedPassPhrase_bb0_in/5 
* CE 3 is refined into CE [23] 
* CE 4 is refined into CE [24,25,26,27,28] 


#### Refined cost equations eval_GetHashedPassPhrase_bb0_in/5 
* CE 23: eval_GetHashedPassPhrase_bb0_in(V_noecho,V__showpass,V__filter_mode,V__quietmode,B) = 1+ eval_GetHashedPassPhrase_bb1_in(V__showpass,V__filter_mode,V__quietmode,C,D,E,V__showpass,V__filter_mode,V__quietmode):1+ eval_GetHashedPassPhrase_bb3_in(V__showpass,V__filter_mode,V__quietmode,B):1
     [E=2,D=0,C=0] 
* CE 24: eval_GetHashedPassPhrase_bb0_in(V_noecho,V__showpass,V__filter_mode,V__quietmode,B) = 1+ eval_GetHashedPassPhrase_bb1_in(V__showpass,V__filter_mode,V__quietmode,C,D,E,V__showpass,V__filter_mode,V__quietmode):1+ eval_GetHashedPassPhrase_bb3_in(V__showpass,V__filter_mode,V__quietmode,B):1
     [E=2,D=0,C=0,V_noecho=0] 
* CE 25: eval_GetHashedPassPhrase_bb0_in(V_noecho,V__showpass,V__filter_mode,V__quietmode,B) = 1+ eval_GetHashedPassPhrase_bb1_in(V__showpass,V__filter_mode,V__quietmode,C,D,E,V__showpass,V__filter_mode,V__quietmode):2+ eval_GetHashedPassPhrase_bb3_in(V__showpass,V__filter_mode,V__quietmode,B):1
     [E=2,D=1,C=1,V_noecho=1] 
* CE 26: eval_GetHashedPassPhrase_bb0_in(V_noecho,V__showpass,V__filter_mode,V__quietmode,B) = 1+ eval_GetHashedPassPhrase_bb1_in(V__showpass,V__filter_mode,V__quietmode,V_noecho,V_noecho,C,V__showpass,V__filter_mode,V__quietmode):3+ eval_GetHashedPassPhrase_bb3_in(V__showpass,V__filter_mode,V__quietmode,B):1
     [0>=V_noecho+1,C=2] 
* CE 27: eval_GetHashedPassPhrase_bb0_in(V_noecho,V__showpass,V__filter_mode,V__quietmode,B) = 1+ eval_GetHashedPassPhrase_bb1_in(V__showpass,V__filter_mode,V__quietmode,V_noecho,V_noecho,C,V__showpass,V__filter_mode,V__quietmode):4+ eval_GetHashedPassPhrase_bb3_in(V__showpass,V__filter_mode,V__quietmode,B):1
     [V_noecho>=2,C=2] 
* CE 28: eval_GetHashedPassPhrase_bb0_in(V_noecho,V__showpass,V__filter_mode,V__quietmode,B) = 1+ eval_GetHashedPassPhrase_bb1_in(V__showpass,V__filter_mode,V__quietmode,V_noecho,V_noecho,C,D,E,F):5
     [V_noecho>=2,C=2] 

### Cost equations --> "Loop" of eval_GetHashedPassPhrase_bb0_in/5 
* CEs [28] --> Loop 21 
* CEs [23,24,25,26,27] --> Loop 22 

#### Loops of eval_GetHashedPassPhrase_bb0_in/5 
* Loop 21: eval_GetHashedPassPhrase_bb0_in(V_noecho,V__showpass,V__filter_mode,V__quietmode,B) [V_noecho>=2] 
* Loop 22: eval_GetHashedPassPhrase_bb0_in(V_noecho,V__showpass,V__filter_mode,V__quietmode,B) [] 

### Ranking functions of CR eval_GetHashedPassPhrase_bb0_in(V_noecho,V__showpass,V__filter_mode,V__quietmode,B) 

#### Partial ranking functions of CR eval_GetHashedPassPhrase_bb0_in(V_noecho,V__showpass,V__filter_mode,V__quietmode,B) 


### Resulting Chains:eval_GetHashedPassPhrase_bb0_in(V_noecho,V__showpass,V__filter_mode,V__quietmode,B) 
* [22]
* [21]...


### Merging Chains  eval_GetHashedPassPhrase_bb0_in/5 into  External patterns of execution 
* [[22]] --> 1 
* [[21]] --> 2 


### Specialization of cost equations eval_GetHashedPassPhrase_start/5 
* CE 2 is refined into CE [29,30] 


#### Refined cost equations eval_GetHashedPassPhrase_start/5 
* CE 29: eval_GetHashedPassPhrase_start(V_noecho,V__showpass,V__filter_mode,V__quietmode,B) = 0+ eval_GetHashedPassPhrase_bb0_in(V_noecho,V__showpass,V__filter_mode,V__quietmode,B):1
     [] 
* CE 30: eval_GetHashedPassPhrase_start(V_noecho,V__showpass,V__filter_mode,V__quietmode,B) = 0+ eval_GetHashedPassPhrase_bb0_in(V_noecho,V__showpass,V__filter_mode,V__quietmode,B):2
     [V_noecho>=2] 

### Cost equations --> "Loop" of eval_GetHashedPassPhrase_start/5 
* CEs [30] --> Loop 23 
* CEs [29] --> Loop 24 

#### Loops of eval_GetHashedPassPhrase_start/5 
* Loop 23: eval_GetHashedPassPhrase_start(V_noecho,V__showpass,V__filter_mode,V__quietmode,B) [V_noecho>=2] 
* Loop 24: eval_GetHashedPassPhrase_start(V_noecho,V__showpass,V__filter_mode,V__quietmode,B) [] 

### Ranking functions of CR eval_GetHashedPassPhrase_start(V_noecho,V__showpass,V__filter_mode,V__quietmode,B) 

#### Partial ranking functions of CR eval_GetHashedPassPhrase_start(V_noecho,V__showpass,V__filter_mode,V__quietmode,B) 


### Resulting Chains:eval_GetHashedPassPhrase_start(V_noecho,V__showpass,V__filter_mode,V__quietmode,B) 
* [24]
* [23]...


### Merging Chains  eval_GetHashedPassPhrase_start/5 into  External patterns of execution 
* [[24]] --> 1 
* [[23]] --> 2 


Computing Bounds
=====================================

#### Cost of loops [14] 

 * loop 14:eval_GetHashedPassPhrase_bb1_in(V__showpass,V__filter_mode,V__quietmode,V__noecho,V_3,B,C,D,E) -> [eval_GetHashedPassPhrase_bb1_in(V__showpass',V__filter_mode',V__quietmode',V__noecho',V_3',B',C',D',E')] 
1
#### Cost of phase [14]:eval_GetHashedPassPhrase_bb1_in(V__showpass,V__filter_mode,V__quietmode,V__noecho,V_3,B,C,D,E) -> [eval_GetHashedPassPhrase_bb1_in(V__showpass',V__filter_mode',V__quietmode',V__noecho',V_3',B',C',D',E')] 
1*it(14)+0
#### Cost of phase [14]:eval_GetHashedPassPhrase_bb1_in(V__showpass,V__filter_mode,V__quietmode,V__noecho,V_3,B,C,D,E) -> [eval_GetHashedPassPhrase_bb1_in(V__showpass',V__filter_mode',V__quietmode',V__noecho',V_3',B',C',D',E')] 
1*it(14)+0
#### Cost of chains of eval_GetHashedPassPhrase_bb1_in(V__showpass,V__filter_mode,V__quietmode,V__noecho,V_3,B,C,D,E):
* Chain [[14]]...: 1*it(14)+0
  with precondition: [V__noecho=V_3,V__noecho>=2,B=2] 

* Chain [[14],15]: 1*it(14)+0
  with precondition: [B=2,V__noecho=V_3,V__showpass=C,V__filter_mode=D,V__quietmode=E,V__noecho>=2] 

* Chain [18]: 0
  with precondition: [V__noecho=0,V_3=0,B=2,C=V__showpass,D=V__filter_mode,E=V__quietmode] 

* Chain [17]: 0
  with precondition: [V__noecho=1,V_3=1,B=2,C=V__showpass,D=V__filter_mode,E=V__quietmode] 

* Chain [16]: 0
  with precondition: [B=2,C=V__showpass,D=V__filter_mode,E=V__quietmode,V_3=V__noecho,0>=V_3+1] 

* Chain [15]: 0
  with precondition: [B=2,C=V__showpass,D=V__filter_mode,E=V__quietmode,V_3=V__noecho,V_3>=2] 


#### Cost of chains of eval_GetHashedPassPhrase_27(V__showpass,V__filter_mode,V__quietmode,B):
* Chain [19]: 0
  with precondition: [] 


#### Cost of chains of eval_GetHashedPassPhrase_bb3_in(V__showpass,V__filter_mode,V__quietmode,B):
* Chain [20]: 0
  with precondition: [] 


#### Cost of chains of eval_GetHashedPassPhrase_bb0_in(V_noecho,V__showpass,V__filter_mode,V__quietmode,B):
* Chain [22]: 1*aux(2)+0
  with precondition: [] 

* Chain [21]...: 1*s(3)+1
  with precondition: [V_noecho>=2] 


#### Cost of chains of eval_GetHashedPassPhrase_start(V_noecho,V__showpass,V__filter_mode,V__quietmode,B):
* Chain [24]: 1*s(4)+0
  with precondition: [] 

* Chain [23]...: 1*s(5)+1
  with precondition: [V_noecho>=2] 


Closed-form bounds of eval_GetHashedPassPhrase_start(V_noecho,V__showpass,V__filter_mode,V__quietmode,B): 
-------------------------------------
* Chain [24] with precondition: [] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [23]... with precondition: [V_noecho>=2] 
    - Upper bound: inf 
    - Complexity: infinity 

### Maximum cost of eval_GetHashedPassPhrase_start(V_noecho,V__showpass,V__filter_mode,V__quietmode,B): inf 
Asymptotic class: infinity 

Time statistics: 
-------------------------------------
* Partial evaluation computed in 307 ms.
* Invariants computed in 42 ms.
   - Backward Invariants 23 ms.
   - Transitive Invariants 6 ms.
* Refinement performed in 201 ms.
* Termination proved in 9 ms.
* Upper bounds computed in 67 ms.
   - Equation cost structures 34 ms.
   - Phase cost structures 11 ms.
   - Chain cost structures 18 ms.
   - Solving cost expressions 0 ms.
* Total analysis performed in 797 ms.


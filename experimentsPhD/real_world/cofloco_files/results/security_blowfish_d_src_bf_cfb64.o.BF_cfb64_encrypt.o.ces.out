Warning: Ignored call to eval_BF_cfb64_encrypt_stop/1 in equation eval_BF_cfb64_encrypt_bb9_in/1 

Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. recursive  : [eval_BF_cfb64_encrypt_34/3,eval_BF_cfb64_encrypt_35/3,eval_BF_cfb64_encrypt_bb1_in/2,eval_BF_cfb64_encrypt_bb4_in/3]
1. recursive  : [eval_BF_cfb64_encrypt_113/3,eval_BF_cfb64_encrypt_114/3,eval_BF_cfb64_encrypt_bb5_in/2,eval_BF_cfb64_encrypt_bb8_in/3]
2. non_recursive  : [eval_BF_cfb64_encrypt_bb9_in/1]
3. non_recursive  : [loop_cont_eval_BF_cfb64_encrypt_bb1_in/2]
4. non_recursive  : [loop_cont_eval_BF_cfb64_encrypt_bb5_in/2]
5. non_recursive  : [eval_BF_cfb64_encrypt_bb0_in/2]
6. non_recursive  : [eval_BF_cfb64_encrypt_start/3]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into eval_BF_cfb64_encrypt_bb1_in/2
1. SCC is partially evaluated into eval_BF_cfb64_encrypt_bb5_in/2
2. SCC is completely evaluated into other SCCs
3. SCC is completely evaluated into other SCCs
4. SCC is completely evaluated into other SCCs
5. SCC is partially evaluated into eval_BF_cfb64_encrypt_bb0_in/2
6. SCC is partially evaluated into eval_BF_cfb64_encrypt_start/3

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations eval_BF_cfb64_encrypt_bb1_in/2 
* CE 7 is refined into CE [11] 
* CE 5 is refined into CE [12] 
* CE 6 is refined into CE [13] 


#### Refined cost equations eval_BF_cfb64_encrypt_bb1_in/2 
* CE 11: eval_BF_cfb64_encrypt_bb1_in(V_l_0,B) = 0
     [B=2,V_l_0=0] 
* CE 12: eval_BF_cfb64_encrypt_bb1_in(V_l_0,B) = 1+ eval_BF_cfb64_encrypt_bb1_in(C,D)
     [V_l_0>=1,V_l_0=C+1,D=2,B=2] 
* CE 13: eval_BF_cfb64_encrypt_bb1_in(V_l_0,B) = 1+ eval_BF_cfb64_encrypt_bb1_in(C,D)
     [0>=V_l_0+1,V_l_0=C+1,D=2,B=2] 

### Cost equations --> "Loop" of eval_BF_cfb64_encrypt_bb1_in/2 
* CEs [12] --> Loop 9 
* CEs [13] --> Loop 10 
* CEs [11] --> Loop 11 

#### Loops of eval_BF_cfb64_encrypt_bb1_in/2 
* Loop 9: eval_BF_cfb64_encrypt_bb1_in(V_l_0,B)->  eval_BF_cfb64_encrypt_bb1_in(V_l_0',B')
                  [V_l_0>=1,V_l_0=V_l_0'+1,B'=2,B=2] 
* Loop 10: eval_BF_cfb64_encrypt_bb1_in(V_l_0,B)->  eval_BF_cfb64_encrypt_bb1_in(V_l_0',B')
                  [0>=V_l_0+1,V_l_0=V_l_0'+1,B'=2,B=2] 
* Loop 11: eval_BF_cfb64_encrypt_bb1_in(V_l_0,B) [B=2,V_l_0=0] 

### Ranking functions of CR eval_BF_cfb64_encrypt_bb1_in(V_l_0,B) 
* RF of phase [9]: [V_l_0]

#### Partial ranking functions of CR eval_BF_cfb64_encrypt_bb1_in(V_l_0,B) 
* Partial RF of phase [9]:
  - RF of loop [9:1]:
    V_l_0


### Resulting Chains:eval_BF_cfb64_encrypt_bb1_in(V_l_0,B) 
* [[10]]...
* [[9],11]
* [11]


### Merging Chains  eval_BF_cfb64_encrypt_bb1_in/2 into  External patterns of execution 
* [[11]] --> 1 
* [[11,[9]]] --> 2 
* [[[10]]] --> 3 


### Specialization of cost equations eval_BF_cfb64_encrypt_bb5_in/2 
* CE 10 is refined into CE [14] 
* CE 8 is refined into CE [15] 
* CE 9 is refined into CE [16] 


#### Refined cost equations eval_BF_cfb64_encrypt_bb5_in/2 
* CE 14: eval_BF_cfb64_encrypt_bb5_in(V_l_1,B) = 0
     [B=2,V_l_1=0] 
* CE 15: eval_BF_cfb64_encrypt_bb5_in(V_l_1,B) = 1+ eval_BF_cfb64_encrypt_bb5_in(C,D)
     [V_l_1>=1,V_l_1=C+1,D=2,B=2] 
* CE 16: eval_BF_cfb64_encrypt_bb5_in(V_l_1,B) = 1+ eval_BF_cfb64_encrypt_bb5_in(C,D)
     [0>=V_l_1+1,V_l_1=C+1,D=2,B=2] 

### Cost equations --> "Loop" of eval_BF_cfb64_encrypt_bb5_in/2 
* CEs [15] --> Loop 12 
* CEs [16] --> Loop 13 
* CEs [14] --> Loop 14 

#### Loops of eval_BF_cfb64_encrypt_bb5_in/2 
* Loop 12: eval_BF_cfb64_encrypt_bb5_in(V_l_1,B)->  eval_BF_cfb64_encrypt_bb5_in(V_l_1',B')
                  [V_l_1>=1,V_l_1=V_l_1'+1,B'=2,B=2] 
* Loop 13: eval_BF_cfb64_encrypt_bb5_in(V_l_1,B)->  eval_BF_cfb64_encrypt_bb5_in(V_l_1',B')
                  [0>=V_l_1+1,V_l_1=V_l_1'+1,B'=2,B=2] 
* Loop 14: eval_BF_cfb64_encrypt_bb5_in(V_l_1,B) [B=2,V_l_1=0] 

### Ranking functions of CR eval_BF_cfb64_encrypt_bb5_in(V_l_1,B) 
* RF of phase [12]: [V_l_1]

#### Partial ranking functions of CR eval_BF_cfb64_encrypt_bb5_in(V_l_1,B) 
* Partial RF of phase [12]:
  - RF of loop [12:1]:
    V_l_1


### Resulting Chains:eval_BF_cfb64_encrypt_bb5_in(V_l_1,B) 
* [[13]]...
* [[12],14]
* [14]


### Merging Chains  eval_BF_cfb64_encrypt_bb5_in/2 into  External patterns of execution 
* [[14]] --> 1 
* [[14,[12]]] --> 2 
* [[[13]]] --> 3 


### Specialization of cost equations eval_BF_cfb64_encrypt_bb0_in/2 
* CE 3 is refined into CE [17,18,19] 
* CE 4 is refined into CE [20,21,22] 


#### Refined cost equations eval_BF_cfb64_encrypt_bb0_in/2 
* CE 17: eval_BF_cfb64_encrypt_bb0_in(V_length,B) = 1+ eval_BF_cfb64_encrypt_bb1_in(C,D):1
     [D=2,C=0,V_length=0] 
* CE 18: eval_BF_cfb64_encrypt_bb0_in(V_length,B) = 1+ eval_BF_cfb64_encrypt_bb1_in(V_length,C):2
     [V_length>=1,C=2] 
* CE 19: eval_BF_cfb64_encrypt_bb0_in(V_length,B) = 1+ eval_BF_cfb64_encrypt_bb1_in(V_length,C):3
     [0>=V_length+1,C=2] 
* CE 20: eval_BF_cfb64_encrypt_bb0_in(V_length,B) = 1+ eval_BF_cfb64_encrypt_bb5_in(C,D):1
     [D=2,C=0,V_length=0] 
* CE 21: eval_BF_cfb64_encrypt_bb0_in(V_length,B) = 1+ eval_BF_cfb64_encrypt_bb5_in(V_length,C):2
     [V_length>=1,C=2] 
* CE 22: eval_BF_cfb64_encrypt_bb0_in(V_length,B) = 1+ eval_BF_cfb64_encrypt_bb5_in(V_length,C):3
     [0>=V_length+1,C=2] 

### Cost equations --> "Loop" of eval_BF_cfb64_encrypt_bb0_in/2 
* CEs [19,22] --> Loop 15 
* CEs [18,21] --> Loop 16 
* CEs [17,20] --> Loop 17 

#### Loops of eval_BF_cfb64_encrypt_bb0_in/2 
* Loop 15: eval_BF_cfb64_encrypt_bb0_in(V_length,B) [0>=V_length+1] 
* Loop 16: eval_BF_cfb64_encrypt_bb0_in(V_length,B) [V_length>=1] 
* Loop 17: eval_BF_cfb64_encrypt_bb0_in(V_length,B) [V_length=0] 

### Ranking functions of CR eval_BF_cfb64_encrypt_bb0_in(V_length,B) 

#### Partial ranking functions of CR eval_BF_cfb64_encrypt_bb0_in(V_length,B) 


### Resulting Chains:eval_BF_cfb64_encrypt_bb0_in(V_length,B) 
* [17]
* [16]
* [15]...


### Merging Chains  eval_BF_cfb64_encrypt_bb0_in/2 into  External patterns of execution 
* [[17]] --> 1 
* [[16]] --> 2 
* [[15]] --> 3 


### Specialization of cost equations eval_BF_cfb64_encrypt_start/3 
* CE 2 is refined into CE [23,24,25] 


#### Refined cost equations eval_BF_cfb64_encrypt_start/3 
* CE 23: eval_BF_cfb64_encrypt_start(V_length,V_encrypt,B) = 0+ eval_BF_cfb64_encrypt_bb0_in(C,B):1
     [C=0,V_length=0] 
* CE 24: eval_BF_cfb64_encrypt_start(V_length,V_encrypt,B) = 0+ eval_BF_cfb64_encrypt_bb0_in(V_length,B):2
     [V_length>=1] 
* CE 25: eval_BF_cfb64_encrypt_start(V_length,V_encrypt,B) = 0+ eval_BF_cfb64_encrypt_bb0_in(V_length,B):3
     [0>=V_length+1] 

### Cost equations --> "Loop" of eval_BF_cfb64_encrypt_start/3 
* CEs [25] --> Loop 18 
* CEs [24] --> Loop 19 
* CEs [23] --> Loop 20 

#### Loops of eval_BF_cfb64_encrypt_start/3 
* Loop 18: eval_BF_cfb64_encrypt_start(V_length,V_encrypt,B) [0>=V_length+1] 
* Loop 19: eval_BF_cfb64_encrypt_start(V_length,V_encrypt,B) [V_length>=1] 
* Loop 20: eval_BF_cfb64_encrypt_start(V_length,V_encrypt,B) [V_length=0] 

### Ranking functions of CR eval_BF_cfb64_encrypt_start(V_length,V_encrypt,B) 

#### Partial ranking functions of CR eval_BF_cfb64_encrypt_start(V_length,V_encrypt,B) 


### Resulting Chains:eval_BF_cfb64_encrypt_start(V_length,V_encrypt,B) 
* [20]
* [19]
* [18]...


### Merging Chains  eval_BF_cfb64_encrypt_start/3 into  External patterns of execution 
* [[20]] --> 1 
* [[19]] --> 2 
* [[18]] --> 3 


Computing Bounds
=====================================

#### Cost of loops [10] 

 * loop 10:eval_BF_cfb64_encrypt_bb1_in(V_l_0,B) -> [eval_BF_cfb64_encrypt_bb1_in(V_l_0',B')] 
1
#### Cost of phase [10]:eval_BF_cfb64_encrypt_bb1_in(V_l_0,B) -> [eval_BF_cfb64_encrypt_bb1_in(V_l_0',B')] 
1*it(10)+0
#### Cost of loops [9] 

 * loop 9:eval_BF_cfb64_encrypt_bb1_in(V_l_0,B) -> [eval_BF_cfb64_encrypt_bb1_in(V_l_0',B')] 
1
#### Cost of phase [9]:eval_BF_cfb64_encrypt_bb1_in(V_l_0,B) -> [eval_BF_cfb64_encrypt_bb1_in(V_l_0',B')] 
1*it(9)+0
  Such that:it(9) =< V_l_0
it(9) =< V_l_0-V_l_0'

#### Cost of chains of eval_BF_cfb64_encrypt_bb1_in(V_l_0,B):
* Chain [[10]]...: 1*it(10)+0
  with precondition: [0>=V_l_0+1,B=2] 

* Chain [[9],11]: 1*it(9)+0
  Such that:it(9) =< V_l_0

  with precondition: [B=2,V_l_0>=1] 

* Chain [11]: 0
  with precondition: [V_l_0=0,B=2] 


#### Cost of loops [13] 

 * loop 13:eval_BF_cfb64_encrypt_bb5_in(V_l_1,B) -> [eval_BF_cfb64_encrypt_bb5_in(V_l_1',B')] 
1
#### Cost of phase [13]:eval_BF_cfb64_encrypt_bb5_in(V_l_1,B) -> [eval_BF_cfb64_encrypt_bb5_in(V_l_1',B')] 
1*it(13)+0
#### Cost of loops [12] 

 * loop 12:eval_BF_cfb64_encrypt_bb5_in(V_l_1,B) -> [eval_BF_cfb64_encrypt_bb5_in(V_l_1',B')] 
1
#### Cost of phase [12]:eval_BF_cfb64_encrypt_bb5_in(V_l_1,B) -> [eval_BF_cfb64_encrypt_bb5_in(V_l_1',B')] 
1*it(12)+0
  Such that:it(12) =< V_l_1
it(12) =< V_l_1-V_l_1'

#### Cost of chains of eval_BF_cfb64_encrypt_bb5_in(V_l_1,B):
* Chain [[13]]...: 1*it(13)+0
  with precondition: [0>=V_l_1+1,B=2] 

* Chain [[12],14]: 1*it(12)+0
  Such that:it(12) =< V_l_1

  with precondition: [B=2,V_l_1>=1] 

* Chain [14]: 0
  with precondition: [V_l_1=0,B=2] 


#### Cost of chains of eval_BF_cfb64_encrypt_bb0_in(V_length,B):
* Chain [17]: 1
  with precondition: [V_length=0] 

* Chain [16]: 2*s(1)+1
  Such that:aux(1) =< V_length
s(1) =< aux(1)

  with precondition: [V_length>=1] 

* Chain [15]...: 1*aux(2)+0
  with precondition: [0>=V_length+1] 


#### Cost of chains of eval_BF_cfb64_encrypt_start(V_length,V_encrypt,B):
* Chain [20]: 1
  with precondition: [V_length=0] 

* Chain [19]: 2*s(6)+1
  Such that:s(5) =< V_length
s(6) =< s(5)

  with precondition: [V_length>=1] 

* Chain [18]...: 1*s(7)+0
  with precondition: [0>=V_length+1] 


Closed-form bounds of eval_BF_cfb64_encrypt_start(V_length,V_encrypt,B): 
-------------------------------------
* Chain [20] with precondition: [V_length=0] 
    - Upper bound: 1 
    - Complexity: constant 
* Chain [19] with precondition: [V_length>=1] 
    - Upper bound: 2*V_length+1 
    - Complexity: n 
* Chain [18]... with precondition: [0>=V_length+1] 
    - Upper bound: inf 
    - Complexity: infinity 

### Maximum cost of eval_BF_cfb64_encrypt_start(V_length,V_encrypt,B): inf 
Asymptotic class: infinity 

Time statistics: 
-------------------------------------
* Partial evaluation computed in 13 ms.
* Invariants computed in 13 ms.
   - Backward Invariants 5 ms.
   - Transitive Invariants 4 ms.
* Refinement performed in 22 ms.
* Termination proved in 3 ms.
* Upper bounds computed in 18 ms.
   - Equation cost structures 7 ms.
   - Phase cost structures 7 ms.
   - Chain cost structures 4 ms.
   - Solving cost expressions 0 ms.
* Total analysis performed in 86 ms.


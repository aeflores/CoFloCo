Warning: Ignored call to eval_cryptRandWriteFile_stop/1 in equation eval_cryptRandWriteFile_bb10_in/1 

Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. non_recursive  : [eval_cryptRandWriteFile_bb10_in/1]
1. recursive  : [eval_cryptRandWriteFile_7/7,eval_cryptRandWriteFile_8/7,eval_cryptRandWriteFile_bb3_in/7]
2. recursive  : [eval_cryptRandWriteFile_12/4,eval_cryptRandWriteFile_13/4,eval_cryptRandWriteFile_15/5,eval_cryptRandWriteFile_16/5,eval_cryptRandWriteFile_bb1_in/2,eval_cryptRandWriteFile_bb7_in/4,loop_cont_eval_cryptRandWriteFile_bb3_in/5]
3. non_recursive  : [eval_cryptRandWriteFile_21/1]
4. non_recursive  : [eval_cryptRandWriteFile_20/1]
5. non_recursive  : [eval_cryptRandWriteFile_bb9_in/1]
6. non_recursive  : [loop_cont_eval_cryptRandWriteFile_bb1_in/2]
7. non_recursive  : [eval_cryptRandWriteFile_1/2]
8. non_recursive  : [eval_cryptRandWriteFile_0/2]
9. non_recursive  : [eval_cryptRandWriteFile_bb0_in/2]
10. non_recursive  : [eval_cryptRandWriteFile_start/2]

#### Obtained direct recursion through partial evaluation 
0. SCC is completely evaluated into other SCCs
1. SCC is partially evaluated into eval_cryptRandWriteFile_bb3_in/7
2. SCC is partially evaluated into eval_cryptRandWriteFile_bb1_in/2
3. SCC is completely evaluated into other SCCs
4. SCC is completely evaluated into other SCCs
5. SCC is completely evaluated into other SCCs
6. SCC is completely evaluated into other SCCs
7. SCC is partially evaluated into eval_cryptRandWriteFile_1/2
8. SCC is completely evaluated into other SCCs
9. SCC is completely evaluated into other SCCs
10. SCC is partially evaluated into eval_cryptRandWriteFile_start/2

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations eval_cryptRandWriteFile_bb3_in/7 
* CE 24 is refined into CE [25] 
* CE 23 is refined into CE [26] 
* CE 22 is refined into CE [27] 


#### Refined cost equations eval_cryptRandWriteFile_bb3_in/7 
* CE 25: eval_cryptRandWriteFile_bb3_in(A,B,C,D,A,B,C) = 0
     [C>=B,C>=0,D=3] 
* CE 26: eval_cryptRandWriteFile_bb3_in(A,B,C,D,A,B,C) = 0
     [C>=B,C>=0,D=2] 
* CE 27: eval_cryptRandWriteFile_bb3_in(V__01,V_8,V_i_0,B,C,D,E) = 1+ eval_cryptRandWriteFile_bb3_in(V__01,V_8,F,B,C,D,E)
     [V_8>=V_i_0+1,B>=2,V_i_0>=0,3>=B,V_i_0+1=F] 

### Cost equations --> "Loop" of eval_cryptRandWriteFile_bb3_in/7 
* CEs [27] --> Loop 11 
* CEs [25] --> Loop 12 
* CEs [26] --> Loop 13 

#### Loops of eval_cryptRandWriteFile_bb3_in/7 
* Loop 11: eval_cryptRandWriteFile_bb3_in(V__01,V_8,V_i_0,B,C,D,E)->  eval_cryptRandWriteFile_bb3_in(V__01,V_8,V_i_0',B,C,D,E)
                  [V_8>=V_i_0+1,B>=2,V_i_0>=0,3>=B,V_i_0+1=V_i_0'] 
* Loop 12: eval_cryptRandWriteFile_bb3_in(A,B,C,D,A,B,C) [C>=B,C>=0,D=3] 
* Loop 13: eval_cryptRandWriteFile_bb3_in(A,B,C,D,A,B,C) [C>=B,C>=0,D=2] 

### Ranking functions of CR eval_cryptRandWriteFile_bb3_in(V__01,V_8,V_i_0,B,C,D,E) 
* RF of phase [11]: [V_8-V_i_0]

#### Partial ranking functions of CR eval_cryptRandWriteFile_bb3_in(V__01,V_8,V_i_0,B,C,D,E) 
* Partial RF of phase [11]:
  - RF of loop [11:1]:
    V_8-V_i_0


### Resulting Chains:eval_cryptRandWriteFile_bb3_in(V__01,V_8,V_i_0,B,C,D,E) 
* [[11],13]
* [[11],12]
* [13]
* [12]


### Merging Chains  eval_cryptRandWriteFile_bb3_in/7 into  External patterns of execution 
* [[13]] --> 1 
* [[13,[11]]] --> 2 
* [[12]] --> 3 
* [[12,[11]]] --> 4 


### Specialization of cost equations eval_cryptRandWriteFile_bb1_in/2 
* CE 13 is refined into CE [28] 
* CE 15 is refined into CE [29] 
* CE 17 is refined into CE [30] 
* CE 19 is refined into CE [31] 
* CE 14 is refined into CE [32] 
* CE 16 is refined into CE [33] 
* CE 18 is refined into CE [34] 
* CE 20 is refined into CE [35] 
* CE 21 is refined into CE [36] 
* CE 5 is refined into CE [37] 
* CE 7 is refined into CE [38] 
* CE 9 is refined into CE [39] 
* CE 11 is refined into CE [40] 
* CE 6 is refined into CE [41] 
* CE 8 is refined into CE [42] 
* CE 10 is refined into CE [43] 
* CE 12 is refined into CE [44] 


#### Refined cost equations eval_cryptRandWriteFile_bb1_in/2 
* CE 28: eval_cryptRandWriteFile_bb1_in(V__01,B) = 1+ eval_cryptRandWriteFile_bb3_in(V__01,C,D,E,V__01,F,G):4
     [V__01>=1,G=256,F=256,E=3,D=0,C=256,B=4] 
* CE 29: eval_cryptRandWriteFile_bb1_in(V__01,B) = 1+ eval_cryptRandWriteFile_bb3_in(V__01,V__01,C,D,V__01,V__01,V__01):4
     [V__01>=1,D=3,C=0,B=4] 
* CE 30: eval_cryptRandWriteFile_bb1_in(V__01,B) = 1+ eval_cryptRandWriteFile_bb3_in(V__01,C,D,E,V__01,F,G):2
     [V__01>=1,G=256,F=256,E=2,D=0,C=256,B=4] 
* CE 31: eval_cryptRandWriteFile_bb1_in(V__01,B) = 1+ eval_cryptRandWriteFile_bb3_in(V__01,V__01,C,D,V__01,V__01,V__01):2
     [V__01>=1,D=2,C=0,B=4] 
* CE 32: eval_cryptRandWriteFile_bb1_in(V__01,B) = 1+ eval_cryptRandWriteFile_bb3_in(V__01,C,D,E,V__01,F,G):4
     [0>=V__01+1,G=256,F=256,E=3,D=0,C=256,B=4] 
* CE 33: eval_cryptRandWriteFile_bb1_in(V__01,B) = 1+ eval_cryptRandWriteFile_bb3_in(V__01,V__01,C,D,V__01,V__01,E):3
     [0>=V__01+1,E=0,D=3,C=0,B=4] 
* CE 34: eval_cryptRandWriteFile_bb1_in(V__01,B) = 1+ eval_cryptRandWriteFile_bb3_in(V__01,C,D,E,V__01,F,G):2
     [0>=V__01+1,G=256,F=256,E=2,D=0,C=256,B=4] 
* CE 35: eval_cryptRandWriteFile_bb1_in(V__01,B) = 1+ eval_cryptRandWriteFile_bb3_in(V__01,V__01,C,D,V__01,V__01,E):1
     [0>=V__01+1,E=0,D=2,C=0,B=4] 
* CE 36: eval_cryptRandWriteFile_bb1_in(V__01,B) = 0
     [B=4,V__01=0] 
* CE 37: eval_cryptRandWriteFile_bb1_in(V__01,B) = 2+ eval_cryptRandWriteFile_bb3_in(V__01,C,D,E,V__01,F,G):4+ eval_cryptRandWriteFile_bb1_in(H,I)
     [V__01>=1,V__01=H+256,I=4,G=256,F=256,E=3,D=0,C=256,B=4] 
* CE 38: eval_cryptRandWriteFile_bb1_in(V__01,B) = 2+ eval_cryptRandWriteFile_bb3_in(V__01,V__01,C,D,V__01,V__01,V__01):4+ eval_cryptRandWriteFile_bb1_in(E,F)
     [V__01>=1,F=4,E=0,D=3,C=0,B=4] 
* CE 39: eval_cryptRandWriteFile_bb1_in(V__01,B) = 2+ eval_cryptRandWriteFile_bb3_in(V__01,C,D,E,V__01,F,G):2+ eval_cryptRandWriteFile_bb1_in(H,I)
     [V__01>=1,V__01=H+256,I=4,G=256,F=256,E=2,D=0,C=256,B=4] 
* CE 40: eval_cryptRandWriteFile_bb1_in(V__01,B) = 2+ eval_cryptRandWriteFile_bb3_in(V__01,V__01,C,D,V__01,V__01,V__01):2+ eval_cryptRandWriteFile_bb1_in(E,F)
     [V__01>=1,F=4,E=0,D=2,C=0,B=4] 
* CE 41: eval_cryptRandWriteFile_bb1_in(V__01,B) = 2+ eval_cryptRandWriteFile_bb3_in(V__01,C,D,E,V__01,F,G):4+ eval_cryptRandWriteFile_bb1_in(H,I)
     [0>=V__01+1,V__01=H+256,I=4,G=256,F=256,E=3,D=0,C=256,B=4] 
* CE 42: eval_cryptRandWriteFile_bb1_in(V__01,B) = 2+ eval_cryptRandWriteFile_bb3_in(V__01,V__01,C,D,V__01,V__01,E):3+ eval_cryptRandWriteFile_bb1_in(F,G)
     [0>=V__01+1,G=4,F=0,E=0,D=3,C=0,B=4] 
* CE 43: eval_cryptRandWriteFile_bb1_in(V__01,B) = 2+ eval_cryptRandWriteFile_bb3_in(V__01,C,D,E,V__01,F,G):2+ eval_cryptRandWriteFile_bb1_in(H,I)
     [0>=V__01+1,V__01=H+256,I=4,G=256,F=256,E=2,D=0,C=256,B=4] 
* CE 44: eval_cryptRandWriteFile_bb1_in(V__01,B) = 2+ eval_cryptRandWriteFile_bb3_in(V__01,V__01,C,D,V__01,V__01,E):1+ eval_cryptRandWriteFile_bb1_in(F,G)
     [0>=V__01+1,G=4,F=0,E=0,D=2,C=0,B=4] 

### Cost equations --> "Loop" of eval_cryptRandWriteFile_bb1_in/2 
* CEs [37,39] --> Loop 14 
* CEs [41,43] --> Loop 15 
* CEs [38,40] --> Loop 16 
* CEs [42,44] --> Loop 17 
* CEs [28,29,30,31] --> Loop 18 
* CEs [32,33,34,35] --> Loop 19 
* CEs [36] --> Loop 20 

#### Loops of eval_cryptRandWriteFile_bb1_in/2 
* Loop 14: eval_cryptRandWriteFile_bb1_in(V__01,B)->  eval_cryptRandWriteFile_bb1_in(V__01',B')
                  [V__01>=1,V__01=V__01'+256,B'=4,B=4] 
* Loop 15: eval_cryptRandWriteFile_bb1_in(V__01,B)->  eval_cryptRandWriteFile_bb1_in(V__01',B')
                  [0>=V__01+1,V__01=V__01'+256,B'=4,B=4] 
* Loop 16: eval_cryptRandWriteFile_bb1_in(V__01,B)->  eval_cryptRandWriteFile_bb1_in(V__01',B')
                  [V__01>=1,B'=4,V__01'=0,B=4] 
* Loop 17: eval_cryptRandWriteFile_bb1_in(V__01,B)->  eval_cryptRandWriteFile_bb1_in(V__01',B')
                  [0>=V__01+1,B'=4,V__01'=0,B=4] 
* Loop 18: eval_cryptRandWriteFile_bb1_in(V__01,B) [V__01>=1,B=4] 
* Loop 19: eval_cryptRandWriteFile_bb1_in(V__01,B) [0>=V__01+1,B=4] 
* Loop 20: eval_cryptRandWriteFile_bb1_in(V__01,B) [B=4,V__01=0] 

### Ranking functions of CR eval_cryptRandWriteFile_bb1_in(V__01,B) 
* RF of phase [14]: [V__01/256]

#### Partial ranking functions of CR eval_cryptRandWriteFile_bb1_in(V__01,B) 
* Partial RF of phase [14]:
  - RF of loop [14:1]:
    V__01/256


### Resulting Chains:eval_cryptRandWriteFile_bb1_in(V__01,B) 
* [[15]]...
* [[15],19]
* [[15],17,20]
* [[14],[15]]...
* [[14],[15],19]
* [[14],[15],17,20]
* [[14],20]
* [[14],19]
* [[14],18]
* [[14],17,20]
* [[14],16,20]
* [20]
* [19]
* [18]
* [17,20]
* [16,20]


### Merging Chains  eval_cryptRandWriteFile_bb1_in/2 into  External patterns of execution 
* [[20]] --> 1 
* [[20,17],[19],[20,17,[15]],[19,[15]]] --> 2 
* [[20,16],[18],[20,16,[14]],[20,17,[14]],[18,[14]],[19,[14]],[20,[14]],[20,17,[15],[14]],[19,[15],[14]]] --> 3 
* [[[15],[14]]] --> 4 
* [[[15]]] --> 5 


### Specialization of cost equations eval_cryptRandWriteFile_1/2 
* CE 3 is refined into CE [45,46,47,48,49] 
* CE 4 is refined into CE [50] 


#### Refined cost equations eval_cryptRandWriteFile_1/2 
* CE 45: eval_cryptRandWriteFile_1(V_bytes,B) = 1+ eval_cryptRandWriteFile_bb1_in(C,D):1
     [D=4,C=0,V_bytes=0] 
* CE 46: eval_cryptRandWriteFile_1(V_bytes,B) = 1+ eval_cryptRandWriteFile_bb1_in(V_bytes,C):2
     [0>=V_bytes+1,C=4] 
* CE 47: eval_cryptRandWriteFile_1(V_bytes,B) = 1+ eval_cryptRandWriteFile_bb1_in(V_bytes,C):3
     [V_bytes>=1,C=4] 
* CE 48: eval_cryptRandWriteFile_1(V_bytes,B) = 1+ eval_cryptRandWriteFile_bb1_in(V_bytes,C):4
     [V_bytes>=1,C=4] 
* CE 49: eval_cryptRandWriteFile_1(V_bytes,B) = 1+ eval_cryptRandWriteFile_bb1_in(V_bytes,C):5
     [0>=V_bytes+1,C=4] 
* CE 50: eval_cryptRandWriteFile_1(V_bytes,B) = 0
     [] 

### Cost equations --> "Loop" of eval_cryptRandWriteFile_1/2 
* CEs [45,46,47,50] --> Loop 21 
* CEs [48] --> Loop 22 
* CEs [49] --> Loop 23 

#### Loops of eval_cryptRandWriteFile_1/2 
* Loop 21: eval_cryptRandWriteFile_1(V_bytes,B) [] 
* Loop 22: eval_cryptRandWriteFile_1(V_bytes,B) [V_bytes>=1] 
* Loop 23: eval_cryptRandWriteFile_1(V_bytes,B) [0>=V_bytes+1] 

### Ranking functions of CR eval_cryptRandWriteFile_1(V_bytes,B) 

#### Partial ranking functions of CR eval_cryptRandWriteFile_1(V_bytes,B) 


### Resulting Chains:eval_cryptRandWriteFile_1(V_bytes,B) 
* [23]...
* [22]...
* [21]


### Merging Chains  eval_cryptRandWriteFile_1/2 into  External patterns of execution 
* [[21]] --> 1 
* [[23]] --> 2 
* [[22]] --> 3 


### Specialization of cost equations eval_cryptRandWriteFile_start/2 
* CE 2 is refined into CE [51,52,53] 


#### Refined cost equations eval_cryptRandWriteFile_start/2 
* CE 51: eval_cryptRandWriteFile_start(V_bytes,B) = 0+ eval_cryptRandWriteFile_1(V_bytes,B):1
     [] 
* CE 52: eval_cryptRandWriteFile_start(V_bytes,B) = 0+ eval_cryptRandWriteFile_1(V_bytes,B):2
     [0>=V_bytes+1] 
* CE 53: eval_cryptRandWriteFile_start(V_bytes,B) = 0+ eval_cryptRandWriteFile_1(V_bytes,B):3
     [V_bytes>=1] 

### Cost equations --> "Loop" of eval_cryptRandWriteFile_start/2 
* CEs [53] --> Loop 24 
* CEs [52] --> Loop 25 
* CEs [51] --> Loop 26 

#### Loops of eval_cryptRandWriteFile_start/2 
* Loop 24: eval_cryptRandWriteFile_start(V_bytes,B) [V_bytes>=1] 
* Loop 25: eval_cryptRandWriteFile_start(V_bytes,B) [0>=V_bytes+1] 
* Loop 26: eval_cryptRandWriteFile_start(V_bytes,B) [] 

### Ranking functions of CR eval_cryptRandWriteFile_start(V_bytes,B) 

#### Partial ranking functions of CR eval_cryptRandWriteFile_start(V_bytes,B) 


### Resulting Chains:eval_cryptRandWriteFile_start(V_bytes,B) 
* [26]
* [25]...
* [24]...


### Merging Chains  eval_cryptRandWriteFile_start/2 into  External patterns of execution 
* [[26]] --> 1 
* [[25]] --> 2 
* [[24]] --> 3 


Computing Bounds
=====================================

#### Cost of loops [11] 

 * loop 11:eval_cryptRandWriteFile_bb3_in(V__01,V_8,V_i_0,B,C,D,E) -> [eval_cryptRandWriteFile_bb3_in(V__01',V_8',V_i_0',B',C',D',E')] 
1
#### Cost of phase [11]:eval_cryptRandWriteFile_bb3_in(V__01,V_8,V_i_0,B,C,D,E) -> [eval_cryptRandWriteFile_bb3_in(V__01',V_8',V_i_0',B',C',D',E')] 
1*it(11)+0
  Such that:it(11) =< V_8-V_i_0
it(11) =< V_8-V_i_0-V_8'+V_i_0'

#### Cost of phase [11]:eval_cryptRandWriteFile_bb3_in(V__01,V_8,V_i_0,B,C,D,E) -> [eval_cryptRandWriteFile_bb3_in(V__01',V_8',V_i_0',B',C',D',E')] 
1*it(11)+0
  Such that:it(11) =< V_8-V_i_0
it(11) =< V_8-V_i_0-V_8'+V_i_0'

#### Cost of chains of eval_cryptRandWriteFile_bb3_in(V__01,V_8,V_i_0,B,C,D,E):
* Chain [[11],13]: 1*it(11)+0
  Such that:it(11) =< -V_i_0+D

  with precondition: [B=2,V__01=C,V_8=D,V_8=E,V_i_0>=0,V_8>=V_i_0+1] 

* Chain [[11],12]: 1*it(11)+0
  Such that:it(11) =< -V_i_0+D

  with precondition: [B=3,V__01=C,V_8=D,V_8=E,V_i_0>=0,V_8>=V_i_0+1] 

* Chain [13]: 0
  with precondition: [B=2,C=V__01,V_8=D,V_i_0=E,V_i_0>=0,V_i_0>=V_8] 

* Chain [12]: 0
  with precondition: [B=3,C=V__01,V_8=D,V_i_0=E,V_i_0>=0,V_i_0>=V_8] 


#### Cost of loops [15] 

 * loop 15:eval_cryptRandWriteFile_bb1_in(V__01,B) -> [eval_cryptRandWriteFile_bb1_in(V__01',B')] 
514
#### Cost of phase [15]:eval_cryptRandWriteFile_bb1_in(V__01,B) -> [eval_cryptRandWriteFile_bb1_in(V__01',B')] 
514*it(15)+0
#### Cost of phase [15]:eval_cryptRandWriteFile_bb1_in(V__01,B) -> [eval_cryptRandWriteFile_bb1_in(V__01',B')] 
514*it(15)+0
#### Cost of phase [15]:eval_cryptRandWriteFile_bb1_in(V__01,B) -> [eval_cryptRandWriteFile_bb1_in(V__01',B')] 
514*it(15)+0
#### Cost of loops [14] 

 * loop 14:eval_cryptRandWriteFile_bb1_in(V__01,B) -> [eval_cryptRandWriteFile_bb1_in(V__01',B')] 
514
#### Cost of phase [14]:eval_cryptRandWriteFile_bb1_in(V__01,B) -> [eval_cryptRandWriteFile_bb1_in(V__01',B')] 
514*it(14)+0
  Such that:it(14) =< V__01/256
it(14) =< V__01/256-V__01'/256

#### Cost of phase [14]:eval_cryptRandWriteFile_bb1_in(V__01,B) -> [eval_cryptRandWriteFile_bb1_in(V__01',B')] 
514*it(14)+0
  Such that:it(14) =< V__01/256
it(14) =< V__01/256-V__01'/256

#### Cost of phase [14]:eval_cryptRandWriteFile_bb1_in(V__01,B) -> [eval_cryptRandWriteFile_bb1_in(V__01',B')] 
514*it(14)+0
  Such that:it(14) =< V__01/256
it(14) =< V__01/256-V__01'/256

#### Cost of phase [14]:eval_cryptRandWriteFile_bb1_in(V__01,B) -> [eval_cryptRandWriteFile_bb1_in(V__01',B')] 
514*it(14)+0
  Such that:it(14) =< V__01/256
it(14) =< V__01/256-V__01'/256

#### Cost of phase [14]:eval_cryptRandWriteFile_bb1_in(V__01,B) -> [eval_cryptRandWriteFile_bb1_in(V__01',B')] 
514*it(14)+0
  Such that:it(14) =< V__01/256
it(14) =< V__01/256-V__01'/256

#### Cost of phase [14]:eval_cryptRandWriteFile_bb1_in(V__01,B) -> [eval_cryptRandWriteFile_bb1_in(V__01',B')] 
514*it(14)+0
  Such that:it(14) =< V__01/256
it(14) =< V__01/256-V__01'/256

#### Cost of phase [14]:eval_cryptRandWriteFile_bb1_in(V__01,B) -> [eval_cryptRandWriteFile_bb1_in(V__01',B')] 
514*it(14)+0
  Such that:it(14) =< V__01/256
it(14) =< V__01/256-V__01'/256

#### Cost of phase [14]:eval_cryptRandWriteFile_bb1_in(V__01,B) -> [eval_cryptRandWriteFile_bb1_in(V__01',B')] 
514*it(14)+0
  Such that:it(14) =< V__01/256
it(14) =< V__01/256-V__01'/256

#### Cost of chains of eval_cryptRandWriteFile_bb1_in(V__01,B):
* Chain [[15]]...: 514*it(15)+0
  with precondition: [0>=V__01+1,B=4] 

* Chain [[15],19]: 514*it(15)+513
  with precondition: [B=4,0>=V__01+1] 

* Chain [[15],17,20]: 514*it(15)+2
  with precondition: [B=4,0>=V__01+1] 

* Chain [[14],[15]]...: 514*it(14)+514*it(15)+0
  Such that:it(14) =< V__01/256

  with precondition: [B=4,V__01>=1] 

* Chain [[14],[15],19]: 514*it(14)+514*it(15)+513
  Such that:it(14) =< V__01/256

  with precondition: [B=4,V__01>=1] 

* Chain [[14],[15],17,20]: 514*it(14)+514*it(15)+2
  Such that:it(14) =< V__01/256

  with precondition: [B=4,V__01>=1] 

* Chain [[14],20]: 514*it(14)+0
  Such that:it(14) =< V__01/256

  with precondition: [B=4,V__01>=256] 

* Chain [[14],19]: 514*it(14)+513
  Such that:it(14) =< V__01/256

  with precondition: [B=4,V__01>=1] 

* Chain [[14],18]: 516*it(14)+2*s(7)+1
  Such that:aux(4) =< 256
aux(6) =< V__01
it(14) =< aux(6)
s(7) =< aux(4)

  with precondition: [B=4,V__01>=257] 

* Chain [[14],17,20]: 514*it(14)+2
  Such that:it(14) =< V__01/256

  with precondition: [B=4,V__01>=1] 

* Chain [[14],16,20]: 516*it(14)+2
  Such that:aux(8) =< V__01
it(14) =< aux(8)

  with precondition: [B=4,V__01>=257] 

* Chain [20]: 0
  with precondition: [V__01=0,B=4] 

* Chain [19]: 513
  with precondition: [B=4,0>=V__01+1] 

* Chain [18]: 2*s(7)+2*s(8)+1
  Such that:aux(4) =< 256
aux(5) =< V__01
s(7) =< aux(4)
s(8) =< aux(5)

  with precondition: [B=4,V__01>=1] 

* Chain [17,20]: 2
  with precondition: [B=4,0>=V__01+1] 

* Chain [16,20]: 2*s(11)+2
  Such that:aux(7) =< V__01
s(11) =< aux(7)

  with precondition: [B=4,V__01>=1] 


#### Cost of chains of eval_cryptRandWriteFile_1(V_bytes,B):
* Chain [23]...: 514*s(34)+1
  with precondition: [0>=V_bytes+1] 

* Chain [22]...: 514*s(35)+514*s(36)+1
  Such that:s(35) =< V_bytes/256

  with precondition: [V_bytes>=1] 

* Chain [21]: 1029*s(37)+2570*s(41)+4*s(42)+1036*s(43)+514
  Such that:s(38) =< 256
s(39) =< V_bytes
s(40) =< V_bytes/256
s(41) =< s(40)
s(42) =< s(38)
s(43) =< s(39)

  with precondition: [] 


#### Cost of chains of eval_cryptRandWriteFile_start(V_bytes,B):
* Chain [26]: 2570*s(48)+4*s(49)+1036*s(50)+1029*s(51)+514
  Such that:s(45) =< 256
s(46) =< V_bytes
s(47) =< V_bytes/256
s(48) =< s(47)
s(49) =< s(45)
s(50) =< s(46)

  with precondition: [] 

* Chain [25]...: 514*s(52)+1
  with precondition: [0>=V_bytes+1] 

* Chain [24]...: 514*s(53)+514*s(54)+1
  Such that:s(53) =< V_bytes/256

  with precondition: [V_bytes>=1] 


Closed-form bounds of eval_cryptRandWriteFile_start(V_bytes,B): 
-------------------------------------
* Chain [26] with precondition: [] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [25]... with precondition: [0>=V_bytes+1] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [24]... with precondition: [V_bytes>=1] 
    - Upper bound: inf 
    - Complexity: infinity 

### Maximum cost of eval_cryptRandWriteFile_start(V_bytes,B): inf 
Asymptotic class: infinity 

Time statistics: 
-------------------------------------
* Partial evaluation computed in 62 ms.
* Invariants computed in 41 ms.
   - Backward Invariants 24 ms.
   - Transitive Invariants 5 ms.
* Refinement performed in 76 ms.
* Termination proved in 5 ms.
* Upper bounds computed in 60 ms.
   - Equation cost structures 20 ms.
   - Phase cost structures 11 ms.
   - Chain cost structures 26 ms.
   - Solving cost expressions 0 ms.
* Total analysis performed in 284 ms.


Warning: Ignored call to eval_bytes_compare_stop/1 in equation eval_bytes_compare_bb6_in/1 

Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. recursive  : [eval_bytes_compare_bb1_in/2]
1. non_recursive  : [eval_bytes_compare_bb6_in/1]
2. non_recursive  : [loop_cont_eval_bytes_compare_bb1_in/2]
3. non_recursive  : [eval_bytes_compare_bb0_in/3]
4. non_recursive  : [eval_bytes_compare_start/3]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into eval_bytes_compare_bb1_in/2
1. SCC is completely evaluated into other SCCs
2. SCC is completely evaluated into other SCCs
3. SCC is partially evaluated into eval_bytes_compare_bb0_in/3
4. SCC is partially evaluated into eval_bytes_compare_start/3

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations eval_bytes_compare_bb1_in/2 
* CE 6 is refined into CE [10] 
* CE 5 is refined into CE [11] 
* CE 9 is refined into CE [12] 
* CE 8 is refined into CE [13] 
* CE 7 is refined into CE [14] 


#### Refined cost equations eval_bytes_compare_bb1_in/2 
* CE 10: eval_bytes_compare_bb1_in(V_len_1,B) = 0
     [V_len_1>=1,B=2] 
* CE 11: eval_bytes_compare_bb1_in(V_len_1,B) = 0
     [0>=V_len_1+1,B=2] 
* CE 12: eval_bytes_compare_bb1_in(V_len_1,B) = 0
     [B=2,V_len_1=0] 
* CE 13: eval_bytes_compare_bb1_in(V_len_1,B) = 1+ eval_bytes_compare_bb1_in(C,D)
     [V_len_1>=1,V_len_1=C+1,D=2,B=2] 
* CE 14: eval_bytes_compare_bb1_in(V_len_1,B) = 1+ eval_bytes_compare_bb1_in(C,D)
     [0>=V_len_1+1,V_len_1=C+1,D=2,B=2] 

### Cost equations --> "Loop" of eval_bytes_compare_bb1_in/2 
* CEs [13] --> Loop 8 
* CEs [14] --> Loop 9 
* CEs [10] --> Loop 10 
* CEs [11] --> Loop 11 
* CEs [12] --> Loop 12 

#### Loops of eval_bytes_compare_bb1_in/2 
* Loop 8: eval_bytes_compare_bb1_in(V_len_1,B)->  eval_bytes_compare_bb1_in(V_len_1',B')
                  [V_len_1>=1,V_len_1=V_len_1'+1,B'=2,B=2] 
* Loop 9: eval_bytes_compare_bb1_in(V_len_1,B)->  eval_bytes_compare_bb1_in(V_len_1',B')
                  [0>=V_len_1+1,V_len_1=V_len_1'+1,B'=2,B=2] 
* Loop 10: eval_bytes_compare_bb1_in(V_len_1,B) [V_len_1>=1,B=2] 
* Loop 11: eval_bytes_compare_bb1_in(V_len_1,B) [0>=V_len_1+1,B=2] 
* Loop 12: eval_bytes_compare_bb1_in(V_len_1,B) [B=2,V_len_1=0] 

### Ranking functions of CR eval_bytes_compare_bb1_in(V_len_1,B) 
* RF of phase [8]: [V_len_1]

#### Partial ranking functions of CR eval_bytes_compare_bb1_in(V_len_1,B) 
* Partial RF of phase [8]:
  - RF of loop [8:1]:
    V_len_1


### Resulting Chains:eval_bytes_compare_bb1_in(V_len_1,B) 
* [[9]]...
* [[9],11]
* [[8],12]
* [[8],10]
* [12]
* [11]
* [10]


### Merging Chains  eval_bytes_compare_bb1_in/2 into  External patterns of execution 
* [[12]] --> 1 
* [[11],[11,[9]]] --> 2 
* [[10],[10,[8]],[12,[8]]] --> 3 
* [[[9]]] --> 4 


### Specialization of cost equations eval_bytes_compare_bb0_in/3 
* CE 3 is refined into CE [15,16,17,18] 
* CE 4 is refined into CE [19,20,21,22] 


#### Refined cost equations eval_bytes_compare_bb0_in/3 
* CE 15: eval_bytes_compare_bb0_in(V_len1,V_len2,B) = 1+ eval_bytes_compare_bb1_in(C,D):1
     [D=2,C=0,V_len2=0] 
* CE 16: eval_bytes_compare_bb0_in(V_len1,V_len2,B) = 1+ eval_bytes_compare_bb1_in(V_len2,C):2
     [0>=V_len2+1,C=2] 
* CE 17: eval_bytes_compare_bb0_in(V_len1,V_len2,B) = 1+ eval_bytes_compare_bb1_in(V_len2,C):3
     [V_len2>=1,C=2] 
* CE 18: eval_bytes_compare_bb0_in(V_len1,V_len2,B) = 1+ eval_bytes_compare_bb1_in(V_len2,C):4
     [0>=V_len2+1,C=2] 
* CE 19: eval_bytes_compare_bb0_in(V_len1,V_len2,B) = 1+ eval_bytes_compare_bb1_in(C,D):1
     [D=2,C=0,V_len1=0] 
* CE 20: eval_bytes_compare_bb0_in(V_len1,V_len2,B) = 1+ eval_bytes_compare_bb1_in(V_len1,C):2
     [0>=V_len1+1,C=2] 
* CE 21: eval_bytes_compare_bb0_in(V_len1,V_len2,B) = 1+ eval_bytes_compare_bb1_in(V_len1,C):3
     [V_len1>=1,C=2] 
* CE 22: eval_bytes_compare_bb0_in(V_len1,V_len2,B) = 1+ eval_bytes_compare_bb1_in(V_len1,C):4
     [0>=V_len1+1,C=2] 

### Cost equations --> "Loop" of eval_bytes_compare_bb0_in/3 
* CEs [18] --> Loop 13 
* CEs [22] --> Loop 14 
* CEs [17] --> Loop 15 
* CEs [21] --> Loop 16 
* CEs [16] --> Loop 17 
* CEs [20] --> Loop 18 
* CEs [15] --> Loop 19 
* CEs [19] --> Loop 20 

#### Loops of eval_bytes_compare_bb0_in/3 
* Loop 13: eval_bytes_compare_bb0_in(V_len1,V_len2,B) [0>=V_len2+1] 
* Loop 14: eval_bytes_compare_bb0_in(V_len1,V_len2,B) [0>=V_len1+1] 
* Loop 15: eval_bytes_compare_bb0_in(V_len1,V_len2,B) [V_len2>=1] 
* Loop 16: eval_bytes_compare_bb0_in(V_len1,V_len2,B) [V_len1>=1] 
* Loop 17: eval_bytes_compare_bb0_in(V_len1,V_len2,B) [0>=V_len2+1] 
* Loop 18: eval_bytes_compare_bb0_in(V_len1,V_len2,B) [0>=V_len1+1] 
* Loop 19: eval_bytes_compare_bb0_in(V_len1,V_len2,B) [V_len2=0] 
* Loop 20: eval_bytes_compare_bb0_in(V_len1,V_len2,B) [V_len1=0] 

### Ranking functions of CR eval_bytes_compare_bb0_in(V_len1,V_len2,B) 

#### Partial ranking functions of CR eval_bytes_compare_bb0_in(V_len1,V_len2,B) 


### Resulting Chains:eval_bytes_compare_bb0_in(V_len1,V_len2,B) 
* [20]
* [19]
* [18]
* [17]
* [16]
* [15]
* [14]...
* [13]...


### Merging Chains  eval_bytes_compare_bb0_in/3 into  External patterns of execution 
* [[20]] --> 1 
* [[19]] --> 2 
* [[18]] --> 3 
* [[17]] --> 4 
* [[16]] --> 5 
* [[15]] --> 6 
* [[14]] --> 7 
* [[13]] --> 8 


### Specialization of cost equations eval_bytes_compare_start/3 
* CE 2 is refined into CE [23,24,25,26,27,28,29,30] 


#### Refined cost equations eval_bytes_compare_start/3 
* CE 23: eval_bytes_compare_start(V_len1,V_len2,B) = 0+ eval_bytes_compare_bb0_in(C,V_len2,B):1
     [C=0,V_len1=0] 
* CE 24: eval_bytes_compare_start(V_len1,V_len2,B) = 0+ eval_bytes_compare_bb0_in(V_len1,C,B):2
     [C=0,V_len2=0] 
* CE 25: eval_bytes_compare_start(V_len1,V_len2,B) = 0+ eval_bytes_compare_bb0_in(V_len1,V_len2,B):3
     [0>=V_len1+1] 
* CE 26: eval_bytes_compare_start(V_len1,V_len2,B) = 0+ eval_bytes_compare_bb0_in(V_len1,V_len2,B):4
     [0>=V_len2+1] 
* CE 27: eval_bytes_compare_start(V_len1,V_len2,B) = 0+ eval_bytes_compare_bb0_in(V_len1,V_len2,B):5
     [V_len1>=1] 
* CE 28: eval_bytes_compare_start(V_len1,V_len2,B) = 0+ eval_bytes_compare_bb0_in(V_len1,V_len2,B):6
     [V_len2>=1] 
* CE 29: eval_bytes_compare_start(V_len1,V_len2,B) = 0+ eval_bytes_compare_bb0_in(V_len1,V_len2,B):7
     [0>=V_len1+1] 
* CE 30: eval_bytes_compare_start(V_len1,V_len2,B) = 0+ eval_bytes_compare_bb0_in(V_len1,V_len2,B):8
     [0>=V_len2+1] 

### Cost equations --> "Loop" of eval_bytes_compare_start/3 
* CEs [30] --> Loop 21 
* CEs [29] --> Loop 22 
* CEs [28] --> Loop 23 
* CEs [27] --> Loop 24 
* CEs [26] --> Loop 25 
* CEs [25] --> Loop 26 
* CEs [24] --> Loop 27 
* CEs [23] --> Loop 28 

#### Loops of eval_bytes_compare_start/3 
* Loop 21: eval_bytes_compare_start(V_len1,V_len2,B) [0>=V_len2+1] 
* Loop 22: eval_bytes_compare_start(V_len1,V_len2,B) [0>=V_len1+1] 
* Loop 23: eval_bytes_compare_start(V_len1,V_len2,B) [V_len2>=1] 
* Loop 24: eval_bytes_compare_start(V_len1,V_len2,B) [V_len1>=1] 
* Loop 25: eval_bytes_compare_start(V_len1,V_len2,B) [0>=V_len2+1] 
* Loop 26: eval_bytes_compare_start(V_len1,V_len2,B) [0>=V_len1+1] 
* Loop 27: eval_bytes_compare_start(V_len1,V_len2,B) [V_len2=0] 
* Loop 28: eval_bytes_compare_start(V_len1,V_len2,B) [V_len1=0] 

### Ranking functions of CR eval_bytes_compare_start(V_len1,V_len2,B) 

#### Partial ranking functions of CR eval_bytes_compare_start(V_len1,V_len2,B) 


### Resulting Chains:eval_bytes_compare_start(V_len1,V_len2,B) 
* [28]
* [27]
* [26]
* [25]
* [24]
* [23]
* [22]...
* [21]...


### Merging Chains  eval_bytes_compare_start/3 into  External patterns of execution 
* [[28]] --> 1 
* [[27]] --> 2 
* [[26]] --> 3 
* [[25]] --> 4 
* [[24]] --> 5 
* [[23]] --> 6 
* [[22]] --> 7 
* [[21]] --> 8 


Computing Bounds
=====================================

#### Cost of loops [9] 

 * loop 9:eval_bytes_compare_bb1_in(V_len_1,B) -> [eval_bytes_compare_bb1_in(V_len_1',B')] 
1
#### Cost of phase [9]:eval_bytes_compare_bb1_in(V_len_1,B) -> [eval_bytes_compare_bb1_in(V_len_1',B')] 
1*it(9)+0
#### Cost of phase [9]:eval_bytes_compare_bb1_in(V_len_1,B) -> [eval_bytes_compare_bb1_in(V_len_1',B')] 
1*it(9)+0
#### Cost of loops [8] 

 * loop 8:eval_bytes_compare_bb1_in(V_len_1,B) -> [eval_bytes_compare_bb1_in(V_len_1',B')] 
1
#### Cost of phase [8]:eval_bytes_compare_bb1_in(V_len_1,B) -> [eval_bytes_compare_bb1_in(V_len_1',B')] 
1*it(8)+0
  Such that:it(8) =< V_len_1
it(8) =< V_len_1-V_len_1'

#### Cost of phase [8]:eval_bytes_compare_bb1_in(V_len_1,B) -> [eval_bytes_compare_bb1_in(V_len_1',B')] 
1*it(8)+0
  Such that:it(8) =< V_len_1
it(8) =< V_len_1-V_len_1'

#### Cost of chains of eval_bytes_compare_bb1_in(V_len_1,B):
* Chain [[9]]...: 1*it(9)+0
  with precondition: [0>=V_len_1+1,B=2] 

* Chain [[9],11]: 1*it(9)+0
  with precondition: [B=2,0>=V_len_1+1] 

* Chain [[8],12]: 1*it(8)+0
  Such that:it(8) =< V_len_1

  with precondition: [B=2,V_len_1>=1] 

* Chain [[8],10]: 1*it(8)+0
  Such that:it(8) =< V_len_1

  with precondition: [B=2,V_len_1>=2] 

* Chain [12]: 0
  with precondition: [V_len_1=0,B=2] 

* Chain [11]: 0
  with precondition: [B=2,0>=V_len_1+1] 

* Chain [10]: 0
  with precondition: [B=2,V_len_1>=1] 


#### Cost of chains of eval_bytes_compare_bb0_in(V_len1,V_len2,B):
* Chain [20]: 1
  with precondition: [V_len1=0] 

* Chain [19]: 1
  with precondition: [V_len2=0] 

* Chain [18]: 1*s(4)+1
  with precondition: [0>=V_len1+1] 

* Chain [17]: 1*s(5)+1
  with precondition: [0>=V_len2+1] 

* Chain [16]: 2*s(7)+1
  Such that:s(6) =< V_len1
s(7) =< s(6)

  with precondition: [V_len1>=1] 

* Chain [15]: 2*s(9)+1
  Such that:s(8) =< V_len2
s(9) =< s(8)

  with precondition: [V_len2>=1] 

* Chain [14]...: 1*s(10)+1
  with precondition: [0>=V_len1+1] 

* Chain [13]...: 1*s(11)+1
  with precondition: [0>=V_len2+1] 


#### Cost of chains of eval_bytes_compare_start(V_len1,V_len2,B):
* Chain [28]: 1
  with precondition: [V_len1=0] 

* Chain [27]: 1
  with precondition: [V_len2=0] 

* Chain [26]: 1*s(12)+1
  with precondition: [0>=V_len1+1] 

* Chain [25]: 1*s(13)+1
  with precondition: [0>=V_len2+1] 

* Chain [24]: 2*s(15)+1
  Such that:s(14) =< V_len1
s(15) =< s(14)

  with precondition: [V_len1>=1] 

* Chain [23]: 2*s(17)+1
  Such that:s(16) =< V_len2
s(17) =< s(16)

  with precondition: [V_len2>=1] 

* Chain [22]...: 1*s(18)+1
  with precondition: [0>=V_len1+1] 

* Chain [21]...: 1*s(19)+1
  with precondition: [0>=V_len2+1] 


Closed-form bounds of eval_bytes_compare_start(V_len1,V_len2,B): 
-------------------------------------
* Chain [28] with precondition: [V_len1=0] 
    - Upper bound: 1 
    - Complexity: constant 
* Chain [27] with precondition: [V_len2=0] 
    - Upper bound: 1 
    - Complexity: constant 
* Chain [26] with precondition: [0>=V_len1+1] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [25] with precondition: [0>=V_len2+1] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [24] with precondition: [V_len1>=1] 
    - Upper bound: 2*V_len1+1 
    - Complexity: n 
* Chain [23] with precondition: [V_len2>=1] 
    - Upper bound: 2*V_len2+1 
    - Complexity: n 
* Chain [22]... with precondition: [0>=V_len1+1] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [21]... with precondition: [0>=V_len2+1] 
    - Upper bound: inf 
    - Complexity: infinity 

### Maximum cost of eval_bytes_compare_start(V_len1,V_len2,B): inf 
Asymptotic class: infinity 

Time statistics: 
-------------------------------------
* Partial evaluation computed in 5 ms.
* Invariants computed in 12 ms.
   - Backward Invariants 7 ms.
   - Transitive Invariants 2 ms.
* Refinement performed in 25 ms.
* Termination proved in 2 ms.
* Upper bounds computed in 20 ms.
   - Equation cost structures 9 ms.
   - Phase cost structures 2 ms.
   - Chain cost structures 6 ms.
   - Solving cost expressions 1 ms.
* Total analysis performed in 77 ms.


WARNING: Excluded non-linear constraints:[-C*D+2147483647>=0,-C*D+2147483647+1=<C]
WARNING: Excluded non-linear constraints:[-C*D+2147483647>=0,-C*D+2147483647+1=< -C]
WARNING: Excluded non-linear constraints:[-C*D+2147483647>=0,-C*D+2147483647+1=<C]
WARNING: Excluded non-linear constraints:[-C*D+2147483647>=0,-C*D+2147483647+1=< -C]
Warning: Ignored call to eval_add_y_line_stop/1 in equation eval_add_y_line_bb19_in/1 

Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. non_recursive  : [eval_add_y_line_bb19_in/1]
1. recursive  : [eval_add_y_line_bb11_in/2]
2. recursive  : [eval_add_y_line_bb14_in/2]
3. non_recursive  : [eval_add_y_line_bb18_in/1]
4. non_recursive  : [eval_add_y_line__critedge_in/1]
5. non_recursive  : [loop_cont_eval_add_y_line_bb11_in/2]
6. non_recursive  : [eval_add_y_line__critedge1_in/1]
7. non_recursive  : [loop_cont_eval_add_y_line_bb14_in/2]
8. non_recursive  : [eval_add_y_line_bb8_in/2]
9. non_recursive  : [eval_add_y_line_39/1]
10. non_recursive  : [eval_add_y_line_38/1]
11. non_recursive  : [eval_add_y_line_37/1]
12. non_recursive  : [eval_add_y_line_44/1]
13. non_recursive  : [eval_add_y_line_43/1]
14. non_recursive  : [eval_add_y_line_42/1]
15. non_recursive  : [eval_add_y_line_66/1]
16. non_recursive  : [eval_add_y_line_65/1]
17. non_recursive  : [eval_add_y_line_64/1]
18. non_recursive  : [eval_add_y_line_NewDefault_in/2]
19. non_recursive  : [eval_add_y_line_bb4_in/2]
20. non_recursive  : [eval_add_y_line_3/2]
21. non_recursive  : [eval_add_y_line_2/2]
22. non_recursive  : [eval_add_y_line_bb0_in/1]
23. non_recursive  : [eval_add_y_line_start/2]

#### Obtained direct recursion through partial evaluation 
0. SCC is completely evaluated into other SCCs
1. SCC is partially evaluated into eval_add_y_line_bb11_in/2
2. SCC is partially evaluated into eval_add_y_line_bb14_in/2
3. SCC is completely evaluated into other SCCs
4. SCC is completely evaluated into other SCCs
5. SCC is completely evaluated into other SCCs
6. SCC is completely evaluated into other SCCs
7. SCC is completely evaluated into other SCCs
8. SCC is partially evaluated into eval_add_y_line_bb8_in/2
9. SCC is completely evaluated into other SCCs
10. SCC is completely evaluated into other SCCs
11. SCC is completely evaluated into other SCCs
12. SCC is completely evaluated into other SCCs
13. SCC is completely evaluated into other SCCs
14. SCC is completely evaluated into other SCCs
15. SCC is completely evaluated into other SCCs
16. SCC is completely evaluated into other SCCs
17. SCC is completely evaluated into other SCCs
18. SCC is completely evaluated into other SCCs
19. SCC is partially evaluated into eval_add_y_line_bb4_in/2
20. SCC is partially evaluated into eval_add_y_line_3/2
21. SCC is completely evaluated into other SCCs
22. SCC is partially evaluated into eval_add_y_line_bb0_in/1
23. SCC is partially evaluated into eval_add_y_line_start/2

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations eval_add_y_line_bb11_in/2 
* CE 12 is refined into CE [15] 
* CE 11 is refined into CE [16] 


#### Refined cost equations eval_add_y_line_bb11_in/2 
* CE 15: eval_add_y_line_bb11_in(V_y_start_0,B) = 0
     [B=3] 
* CE 16: eval_add_y_line_bb11_in(V_y_start_0,B) = 1+ eval_add_y_line_bb11_in(V_y_start_0,C)
     [C=3,B=3] 

### Cost equations --> "Loop" of eval_add_y_line_bb11_in/2 
* CEs [16] --> Loop 10 
* CEs [15] --> Loop 11 

#### Loops of eval_add_y_line_bb11_in/2 
* Loop 10: eval_add_y_line_bb11_in(V_y_start_0,B)->  eval_add_y_line_bb11_in(V_y_start_0,B')
                  [B'=3,B=3] 
* Loop 11: eval_add_y_line_bb11_in(V_y_start_0,B) [B=3] 

### Ranking functions of CR eval_add_y_line_bb11_in(V_y_start_0,B) 

#### Partial ranking functions of CR eval_add_y_line_bb11_in(V_y_start_0,B) 


### Resulting Chains:eval_add_y_line_bb11_in(V_y_start_0,B) 
* [[10]]...
* [[10],11]
* [11]


### Merging Chains  eval_add_y_line_bb11_in/2 into  External patterns of execution 
* [[11],[11,[10]]] --> 1 
* [[[10]]] --> 2 


### Specialization of cost equations eval_add_y_line_bb14_in/2 
* CE 14 is refined into CE [17] 
* CE 13 is refined into CE [18] 


#### Refined cost equations eval_add_y_line_bb14_in/2 
* CE 17: eval_add_y_line_bb14_in(V_y_start_0,B) = 0
     [B=2] 
* CE 18: eval_add_y_line_bb14_in(V_y_start_0,B) = 1+ eval_add_y_line_bb14_in(V_y_start_0,C)
     [C=2,B=2] 

### Cost equations --> "Loop" of eval_add_y_line_bb14_in/2 
* CEs [18] --> Loop 12 
* CEs [17] --> Loop 13 

#### Loops of eval_add_y_line_bb14_in/2 
* Loop 12: eval_add_y_line_bb14_in(V_y_start_0,B)->  eval_add_y_line_bb14_in(V_y_start_0,B')
                  [B'=2,B=2] 
* Loop 13: eval_add_y_line_bb14_in(V_y_start_0,B) [B=2] 

### Ranking functions of CR eval_add_y_line_bb14_in(V_y_start_0,B) 

#### Partial ranking functions of CR eval_add_y_line_bb14_in(V_y_start_0,B) 


### Resulting Chains:eval_add_y_line_bb14_in(V_y_start_0,B) 
* [[12]]...
* [[12],13]
* [13]


### Merging Chains  eval_add_y_line_bb14_in/2 into  External patterns of execution 
* [[13],[13,[12]]] --> 1 
* [[[12]]] --> 2 


### Specialization of cost equations eval_add_y_line_bb8_in/2 
* CE 8 is refined into CE [19] 
* CE 9 is refined into CE [20,21] 
* CE 10 is refined into CE [22,23] 


#### Refined cost equations eval_add_y_line_bb8_in/2 
* CE 19: eval_add_y_line_bb8_in(V_y_start_0,B) = 0
     [] 
* CE 20: eval_add_y_line_bb8_in(V_y_start_0,B) = 1+ eval_add_y_line_bb11_in(V_y_start_0,C):1
     [C=3] 
* CE 21: eval_add_y_line_bb8_in(V_y_start_0,B) = 1+ eval_add_y_line_bb11_in(V_y_start_0,C):2
     [C=3] 
* CE 22: eval_add_y_line_bb8_in(V_y_start_0,B) = 1+ eval_add_y_line_bb14_in(V_y_start_0,C):1
     [C=2] 
* CE 23: eval_add_y_line_bb8_in(V_y_start_0,B) = 1+ eval_add_y_line_bb14_in(V_y_start_0,C):2
     [C=2] 

### Cost equations --> "Loop" of eval_add_y_line_bb8_in/2 
* CEs [21,23] --> Loop 14 
* CEs [19,20,22] --> Loop 15 

#### Loops of eval_add_y_line_bb8_in/2 
* Loop 14: eval_add_y_line_bb8_in(V_y_start_0,B) [] 
* Loop 15: eval_add_y_line_bb8_in(V_y_start_0,B) [] 

### Ranking functions of CR eval_add_y_line_bb8_in(V_y_start_0,B) 

#### Partial ranking functions of CR eval_add_y_line_bb8_in(V_y_start_0,B) 


### Resulting Chains:eval_add_y_line_bb8_in(V_y_start_0,B) 
* [15]
* [14]...


### Merging Chains  eval_add_y_line_bb8_in/2 into  External patterns of execution 
* [[15]] --> 1 
* [[14]] --> 2 


### Specialization of cost equations eval_add_y_line_bb4_in/2 
* CE 7 is refined into CE [24,25] 


#### Refined cost equations eval_add_y_line_bb4_in/2 
* CE 24: eval_add_y_line_bb4_in(V_0,B) = 0+ eval_add_y_line_bb8_in(C,B):1
     [] 
* CE 25: eval_add_y_line_bb4_in(V_0,B) = 0+ eval_add_y_line_bb8_in(C,B):2
     [] 

### Cost equations --> "Loop" of eval_add_y_line_bb4_in/2 
* CEs [25] --> Loop 16 
* CEs [24] --> Loop 17 

#### Loops of eval_add_y_line_bb4_in/2 
* Loop 16: eval_add_y_line_bb4_in(V_0,B) [] 
* Loop 17: eval_add_y_line_bb4_in(V_0,B) [] 

### Ranking functions of CR eval_add_y_line_bb4_in(V_0,B) 

#### Partial ranking functions of CR eval_add_y_line_bb4_in(V_0,B) 


### Resulting Chains:eval_add_y_line_bb4_in(V_0,B) 
* [17]
* [16]...


### Merging Chains  eval_add_y_line_bb4_in/2 into  External patterns of execution 
* [[17]] --> 1 
* [[16]] --> 2 


### Specialization of cost equations eval_add_y_line_3/2 
* CE 5 is refined into CE [26] 
* CE 6 is refined into CE [27,28] 


#### Refined cost equations eval_add_y_line_3/2 
* CE 26: eval_add_y_line_3(V_0,B) = 0
     [] 
* CE 27: eval_add_y_line_3(V_0,B) = 0+ eval_add_y_line_bb4_in(V_0,B):1
     [] 
* CE 28: eval_add_y_line_3(V_0,B) = 0+ eval_add_y_line_bb4_in(V_0,B):2
     [] 

### Cost equations --> "Loop" of eval_add_y_line_3/2 
* CEs [28] --> Loop 18 
* CEs [26,27] --> Loop 19 

#### Loops of eval_add_y_line_3/2 
* Loop 18: eval_add_y_line_3(V_0,B) [] 
* Loop 19: eval_add_y_line_3(V_0,B) [] 

### Ranking functions of CR eval_add_y_line_3(V_0,B) 

#### Partial ranking functions of CR eval_add_y_line_3(V_0,B) 


### Resulting Chains:eval_add_y_line_3(V_0,B) 
* [19]
* [18]...


### Merging Chains  eval_add_y_line_3/2 into  External patterns of execution 
* [[19]] --> 1 
* [[18]] --> 2 


### Specialization of cost equations eval_add_y_line_bb0_in/1 
* CE 3 is refined into CE [29,30] 
* CE 4 is refined into CE [31,32] 


#### Refined cost equations eval_add_y_line_bb0_in/1 
* CE 29: eval_add_y_line_bb0_in(B) = 0+ eval_add_y_line_3(C,B):1
     [] 
* CE 30: eval_add_y_line_bb0_in(B) = 0+ eval_add_y_line_3(C,B):2
     [] 
* CE 31: eval_add_y_line_bb0_in(B) = 0+ eval_add_y_line_bb4_in(C,B):1
     [] 
* CE 32: eval_add_y_line_bb0_in(B) = 0+ eval_add_y_line_bb4_in(C,B):2
     [] 

### Cost equations --> "Loop" of eval_add_y_line_bb0_in/1 
* CEs [30,32] --> Loop 20 
* CEs [29,31] --> Loop 21 

#### Loops of eval_add_y_line_bb0_in/1 
* Loop 20: eval_add_y_line_bb0_in(B) [] 
* Loop 21: eval_add_y_line_bb0_in(B) [] 

### Ranking functions of CR eval_add_y_line_bb0_in(B) 

#### Partial ranking functions of CR eval_add_y_line_bb0_in(B) 


### Resulting Chains:eval_add_y_line_bb0_in(B) 
* [21]
* [20]...


### Merging Chains  eval_add_y_line_bb0_in/1 into  External patterns of execution 
* [[21]] --> 1 
* [[20]] --> 2 


### Specialization of cost equations eval_add_y_line_start/2 
* CE 2 is refined into CE [33,34] 


#### Refined cost equations eval_add_y_line_start/2 
* CE 33: eval_add_y_line_start(V_dir,B) = 0+ eval_add_y_line_bb0_in(B):1
     [] 
* CE 34: eval_add_y_line_start(V_dir,B) = 0+ eval_add_y_line_bb0_in(B):2
     [] 

### Cost equations --> "Loop" of eval_add_y_line_start/2 
* CEs [34] --> Loop 22 
* CEs [33] --> Loop 23 

#### Loops of eval_add_y_line_start/2 
* Loop 22: eval_add_y_line_start(V_dir,B) [] 
* Loop 23: eval_add_y_line_start(V_dir,B) [] 

### Ranking functions of CR eval_add_y_line_start(V_dir,B) 

#### Partial ranking functions of CR eval_add_y_line_start(V_dir,B) 


### Resulting Chains:eval_add_y_line_start(V_dir,B) 
* [23]
* [22]...


### Merging Chains  eval_add_y_line_start/2 into  External patterns of execution 
* [[23]] --> 1 
* [[22]] --> 2 


Computing Bounds
=====================================

#### Cost of loops [10] 

 * loop 10:eval_add_y_line_bb11_in(V_y_start_0,B) -> [eval_add_y_line_bb11_in(V_y_start_0',B')] 
1
#### Cost of phase [10]:eval_add_y_line_bb11_in(V_y_start_0,B) -> [eval_add_y_line_bb11_in(V_y_start_0',B')] 
1*it(10)+0
#### Cost of phase [10]:eval_add_y_line_bb11_in(V_y_start_0,B) -> [eval_add_y_line_bb11_in(V_y_start_0',B')] 
1*it(10)+0
#### Cost of chains of eval_add_y_line_bb11_in(V_y_start_0,B):
* Chain [[10]]...: 1*it(10)+0
  with precondition: [B=3] 

* Chain [[10],11]: 1*it(10)+0
  with precondition: [B=3] 

* Chain [11]: 0
  with precondition: [B=3] 


#### Cost of loops [12] 

 * loop 12:eval_add_y_line_bb14_in(V_y_start_0,B) -> [eval_add_y_line_bb14_in(V_y_start_0',B')] 
1
#### Cost of phase [12]:eval_add_y_line_bb14_in(V_y_start_0,B) -> [eval_add_y_line_bb14_in(V_y_start_0',B')] 
1*it(12)+0
#### Cost of phase [12]:eval_add_y_line_bb14_in(V_y_start_0,B) -> [eval_add_y_line_bb14_in(V_y_start_0',B')] 
1*it(12)+0
#### Cost of chains of eval_add_y_line_bb14_in(V_y_start_0,B):
* Chain [[12]]...: 1*it(12)+0
  with precondition: [B=2] 

* Chain [[12],13]: 1*it(12)+0
  with precondition: [B=2] 

* Chain [13]: 0
  with precondition: [B=2] 


#### Cost of chains of eval_add_y_line_bb8_in(V_y_start_0,B):
* Chain [15]: 1*aux(3)+0
  with precondition: [] 

* Chain [14]...: 1*aux(4)+0
  with precondition: [] 


#### Cost of chains of eval_add_y_line_bb4_in(V_0,B):
* Chain [17]: 1*s(7)+0
  with precondition: [] 

* Chain [16]...: 1*s(8)+0
  with precondition: [] 


#### Cost of chains of eval_add_y_line_3(V_0,B):
* Chain [19]: 1*aux(5)+0
  with precondition: [] 

* Chain [18]...: 1*s(10)+0
  with precondition: [] 


#### Cost of chains of eval_add_y_line_bb0_in(B):
* Chain [21]: 1*aux(6)+0
  with precondition: [] 

* Chain [20]...: 1*aux(7)+0
  with precondition: [] 


#### Cost of chains of eval_add_y_line_start(V_dir,B):
* Chain [23]: 1*s(15)+0
  with precondition: [] 

* Chain [22]...: 1*s(16)+0
  with precondition: [] 


Closed-form bounds of eval_add_y_line_start(V_dir,B): 
-------------------------------------
* Chain [23] with precondition: [] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [22]... with precondition: [] 
    - Upper bound: inf 
    - Complexity: infinity 

### Maximum cost of eval_add_y_line_start(V_dir,B): inf 
Asymptotic class: infinity 

Time statistics: 
-------------------------------------
* Partial evaluation computed in 8 ms.
* Invariants computed in 6 ms.
   - Backward Invariants 2 ms.
   - Transitive Invariants 2 ms.
* Refinement performed in 12 ms.
* Termination proved in 1 ms.
* Upper bounds computed in 11 ms.
   - Equation cost structures 4 ms.
   - Phase cost structures 2 ms.
   - Chain cost structures 4 ms.
   - Solving cost expressions 0 ms.
* Total analysis performed in 55 ms.


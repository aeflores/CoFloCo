Warning: Ignored call to eval_LZWDecodeCompat_stop/1 in equation eval_LZWDecodeCompat_154/1 
Warning: Ignored call to eval_LZWDecodeCompat_stop/1 in equation eval_LZWDecodeCompat_169/1 
Warning: Ignored call to eval_LZWDecodeCompat_stop/1 in equation eval_LZWDecodeCompat_bb44_in/1 

Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. non_recursive  : [eval_LZWDecodeCompat_169/1]
1. non_recursive  : [eval_LZWDecodeCompat_168/1]
2. recursive  : [eval_LZWDecodeCompat_bb39_in/5]
3. recursive  : [eval_LZWDecodeCompat_42/4,eval_LZWDecodeCompat_43/4,eval_LZWDecodeCompat_72/5,eval_LZWDecodeCompat_73/5,eval_LZWDecodeCompat_NewDefault_in/4,eval_LZWDecodeCompat_bb11_in/3,eval_LZWDecodeCompat_bb16_in/3,eval_LZWDecodeCompat_bb17_in/4,eval_LZWDecodeCompat_bb22_in/4,eval_LZWDecodeCompat_bb23_in/5,eval_LZWDecodeCompat_bb30_in/4,eval_LZWDecodeCompat_bb32_in/4,loop_cont_eval_LZWDecodeCompat_bb39_in/4]
4. recursive  : [eval_LZWDecodeCompat_bb35_in/3]
5. non_recursive  : [eval_LZWDecodeCompat_154/1]
6. non_recursive  : [eval_LZWDecodeCompat_153/1]
7. non_recursive  : [eval_LZWDecodeCompat_bb41_in/1]
8. non_recursive  : [eval_LZWDecodeCompat_bb44_in/1]
9. non_recursive  : [eval_LZWDecodeCompat_167/1]
10. non_recursive  : [eval_LZWDecodeCompat_166/3]
11. non_recursive  : [eval_LZWDecodeCompat_bb42_in/2]
12. recursive  : [eval_LZWDecodeCompat_bb37_in/3]
13. non_recursive  : [loop_cont_eval_LZWDecodeCompat_bb37_in/3]
14. non_recursive  : [loop_cont_eval_LZWDecodeCompat_bb35_in/3]
15. non_recursive  : [loop_cont_eval_LZWDecodeCompat_bb11_in/3]
16. non_recursive  : [eval_LZWDecodeCompat_bb10_in/2]
17. recursive  : [eval_LZWDecodeCompat_bb4_in/4]
18. recursive  : [eval_LZWDecodeCompat_bb8_in/4]
19. recursive  : [eval_LZWDecodeCompat_bb6_in/2]
20. non_recursive  : [loop_cont_eval_LZWDecodeCompat_bb6_in/2]
21. non_recursive  : [loop_cont_eval_LZWDecodeCompat_bb4_in/3]
22. non_recursive  : [loop_cont_eval_LZWDecodeCompat_bb8_in/3]
23. non_recursive  : [eval_LZWDecodeCompat_bb0_in/2]
24. non_recursive  : [eval_LZWDecodeCompat_start/3]

#### Obtained direct recursion through partial evaluation 
0. SCC is completely evaluated into other SCCs
1. SCC is completely evaluated into other SCCs
2. SCC is partially evaluated into eval_LZWDecodeCompat_bb39_in/5
3. SCC is partially evaluated into eval_LZWDecodeCompat_bb11_in/3
4. SCC is partially evaluated into eval_LZWDecodeCompat_bb35_in/3
5. SCC is completely evaluated into other SCCs
6. SCC is completely evaluated into other SCCs
7. SCC is completely evaluated into other SCCs
8. SCC is completely evaluated into other SCCs
9. SCC is completely evaluated into other SCCs
10. SCC is completely evaluated into other SCCs
11. SCC is partially evaluated into eval_LZWDecodeCompat_bb42_in/2
12. SCC is partially evaluated into eval_LZWDecodeCompat_bb37_in/3
13. SCC is completely evaluated into other SCCs
14. SCC is partially evaluated into loop_cont_eval_LZWDecodeCompat_bb35_in/3
15. SCC is partially evaluated into loop_cont_eval_LZWDecodeCompat_bb11_in/3
16. SCC is partially evaluated into eval_LZWDecodeCompat_bb10_in/2
17. SCC is partially evaluated into eval_LZWDecodeCompat_bb4_in/4
18. SCC is partially evaluated into eval_LZWDecodeCompat_bb8_in/4
19. SCC is partially evaluated into eval_LZWDecodeCompat_bb6_in/2
20. SCC is completely evaluated into other SCCs
21. SCC is partially evaluated into loop_cont_eval_LZWDecodeCompat_bb4_in/3
22. SCC is completely evaluated into other SCCs
23. SCC is partially evaluated into eval_LZWDecodeCompat_bb0_in/2
24. SCC is partially evaluated into eval_LZWDecodeCompat_start/3

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations eval_LZWDecodeCompat_bb39_in/5 
* CE 27 is refined into CE [35] 
* CE 26 is refined into CE [36] 


#### Refined cost equations eval_LZWDecodeCompat_bb39_in/5 
* CE 35: eval_LZWDecodeCompat_bb39_in(A,B,C,D,C) = 0
     [A>=1,D=2] 
* CE 36: eval_LZWDecodeCompat_bb39_in(V_occ_2,V_88,V_219,B,C) = 1+ eval_LZWDecodeCompat_bb39_in(V_occ_2,V_88,V_219,D,C)
     [V_occ_2>=1,D=2,B=2] 

### Cost equations --> "Loop" of eval_LZWDecodeCompat_bb39_in/5 
* CEs [36] --> Loop 30 
* CEs [35] --> Loop 31 

#### Loops of eval_LZWDecodeCompat_bb39_in/5 
* Loop 30: eval_LZWDecodeCompat_bb39_in(V_occ_2,V_88,V_219,B,C)->  eval_LZWDecodeCompat_bb39_in(V_occ_2,V_88,V_219,B',C)
                  [V_occ_2>=1,B'=2,B=2] 
* Loop 31: eval_LZWDecodeCompat_bb39_in(A,B,C,D,C) [A>=1,D=2] 

### Ranking functions of CR eval_LZWDecodeCompat_bb39_in(V_occ_2,V_88,V_219,B,C) 

#### Partial ranking functions of CR eval_LZWDecodeCompat_bb39_in(V_occ_2,V_88,V_219,B,C) 


### Resulting Chains:eval_LZWDecodeCompat_bb39_in(V_occ_2,V_88,V_219,B,C) 
* [[30]]...
* [[30],31]
* [31]


### Merging Chains  eval_LZWDecodeCompat_bb39_in/5 into  External patterns of execution 
* [[31],[31,[30]]] --> 1 
* [[[30]]] --> 2 


### Specialization of cost equations eval_LZWDecodeCompat_bb11_in/3 
* CE 20 is refined into CE [37] 
* CE 18 is refined into CE [38] 
* CE 17 is refined into CE [39] 
* CE 22 is refined into CE [40] 
* CE 19 is refined into CE [41,42] 
* CE 21 is refined into CE [43] 


#### Refined cost equations eval_LZWDecodeCompat_bb11_in/3 
* CE 37: eval_LZWDecodeCompat_bb11_in(A,B,A) = 0
     [A>=1,B=9] 
* CE 38: eval_LZWDecodeCompat_bb11_in(V_occ_2,B,C) = 0
     [V_occ_2>=1,B=8] 
* CE 39: eval_LZWDecodeCompat_bb11_in(A,B,A) = 0
     [A>=1,B=6] 
* CE 40: eval_LZWDecodeCompat_bb11_in(A,B,A) = 0
     [0>=A,B=6] 
* CE 41: eval_LZWDecodeCompat_bb11_in(V_occ_2,B,C) = 2+ eval_LZWDecodeCompat_bb39_in(V_occ_2,D,E,F,E):1+ eval_LZWDecodeCompat_bb11_in(E,B,C)
     [V_occ_2>=1,F=2] 
* CE 42: eval_LZWDecodeCompat_bb11_in(V_occ_2,B,C) = 2+ eval_LZWDecodeCompat_bb39_in(V_occ_2,D,E,F,G):2
     [V_occ_2>=1,F=2] 
* CE 43: eval_LZWDecodeCompat_bb11_in(V_occ_2,B,C) = 1+ eval_LZWDecodeCompat_bb11_in(D,B,C)
     [V_occ_2>=1,V_occ_2=D+1] 

### Cost equations --> "Loop" of eval_LZWDecodeCompat_bb11_in/3 
* CEs [41,43] --> Loop 32 
* CEs [42] --> Loop 33 
* CEs [37] --> Loop 34 
* CEs [38] --> Loop 35 
* CEs [39] --> Loop 36 
* CEs [40] --> Loop 37 

#### Loops of eval_LZWDecodeCompat_bb11_in/3 
* Loop 32: eval_LZWDecodeCompat_bb11_in(V_occ_2,B,C)->  eval_LZWDecodeCompat_bb11_in(V_occ_2',B,C)
                  [V_occ_2>=1] 
* Loop 33: eval_LZWDecodeCompat_bb11_in(V_occ_2,B,C) [V_occ_2>=1] 
* Loop 34: eval_LZWDecodeCompat_bb11_in(A,B,A) [A>=1,B=9] 
* Loop 35: eval_LZWDecodeCompat_bb11_in(V_occ_2,B,C) [V_occ_2>=1,B=8] 
* Loop 36: eval_LZWDecodeCompat_bb11_in(A,B,A) [A>=1,B=6] 
* Loop 37: eval_LZWDecodeCompat_bb11_in(A,B,A) [0>=A,B=6] 

### Ranking functions of CR eval_LZWDecodeCompat_bb11_in(V_occ_2,B,C) 

#### Partial ranking functions of CR eval_LZWDecodeCompat_bb11_in(V_occ_2,B,C) 


### Resulting Chains:eval_LZWDecodeCompat_bb11_in(V_occ_2,B,C) 
* [[32]]...
* [[32],37]
* [[32],36]
* [[32],35]
* [[32],34]
* [[32],33]...
* [37]
* [36]
* [35]
* [34]
* [33]...


### Merging Chains  eval_LZWDecodeCompat_bb11_in/3 into  External patterns of execution 
* [[37]] --> 1 
* [[36],[36,[32]]] --> 2 
* [[37,[32]]] --> 3 
* [[35],[35,[32]]] --> 4 
* [[34],[34,[32]]] --> 5 
* [[33],[[32]],[33,[32]]] --> 6 


### Specialization of cost equations eval_LZWDecodeCompat_bb35_in/3 
* CE 30 is refined into CE [44] 
* CE 29 is refined into CE [45] 


#### Refined cost equations eval_LZWDecodeCompat_bb35_in/3 
* CE 44: eval_LZWDecodeCompat_bb35_in(A,B,A) = 0
     [B=7] 
* CE 45: eval_LZWDecodeCompat_bb35_in(V_occ_2,B,C) = 1+ eval_LZWDecodeCompat_bb35_in(V_occ_2,B,C)
     [] 

### Cost equations --> "Loop" of eval_LZWDecodeCompat_bb35_in/3 
* CEs [45] --> Loop 38 
* CEs [44] --> Loop 39 

#### Loops of eval_LZWDecodeCompat_bb35_in/3 
* Loop 38: eval_LZWDecodeCompat_bb35_in(V_occ_2,B,C)->  eval_LZWDecodeCompat_bb35_in(V_occ_2,B,C)
                  [] 
* Loop 39: eval_LZWDecodeCompat_bb35_in(A,B,A) [B=7] 

### Ranking functions of CR eval_LZWDecodeCompat_bb35_in(V_occ_2,B,C) 

#### Partial ranking functions of CR eval_LZWDecodeCompat_bb35_in(V_occ_2,B,C) 


### Resulting Chains:eval_LZWDecodeCompat_bb35_in(V_occ_2,B,C) 
* [[38]]...
* [[38],39]
* [39]


### Merging Chains  eval_LZWDecodeCompat_bb35_in/3 into  External patterns of execution 
* [[39],[39,[38]]] --> 1 
* [[[38]]] --> 2 


### Specialization of cost equations eval_LZWDecodeCompat_bb42_in/2 
* CE 28 is refined into CE [46] 


#### Refined cost equations eval_LZWDecodeCompat_bb42_in/2 
* CE 46: eval_LZWDecodeCompat_bb42_in(V_occ_5,B) = 0
     [] 

### Cost equations --> "Loop" of eval_LZWDecodeCompat_bb42_in/2 
* CEs [46] --> Loop 40 

#### Loops of eval_LZWDecodeCompat_bb42_in/2 
* Loop 40: eval_LZWDecodeCompat_bb42_in(V_occ_5,B) [] 

### Ranking functions of CR eval_LZWDecodeCompat_bb42_in(V_occ_5,B) 

#### Partial ranking functions of CR eval_LZWDecodeCompat_bb42_in(V_occ_5,B) 


### Resulting Chains:eval_LZWDecodeCompat_bb42_in(V_occ_5,B) 
* [40]


### Merging Chains  eval_LZWDecodeCompat_bb42_in/2 into  External patterns of execution 
* [[40]] --> 1 


### Specialization of cost equations eval_LZWDecodeCompat_bb37_in/3 
* CE 34 is refined into CE [47] 
* CE 33 is refined into CE [48] 
* CE 32 is refined into CE [49] 


#### Refined cost equations eval_LZWDecodeCompat_bb37_in/3 
* CE 47: eval_LZWDecodeCompat_bb37_in(V_occ_3,B,C) = 0
     [C=0,B=6,V_occ_3=1] 
* CE 48: eval_LZWDecodeCompat_bb37_in(V_occ_3,B,C) = 1+ eval_LZWDecodeCompat_bb37_in(D,E,C)
     [V_occ_3>=2,V_occ_3=D+1,E=6,B=6] 
* CE 49: eval_LZWDecodeCompat_bb37_in(V_occ_3,B,C) = 1+ eval_LZWDecodeCompat_bb37_in(D,E,C)
     [0>=V_occ_3,V_occ_3=D+1,E=6,B=6] 

### Cost equations --> "Loop" of eval_LZWDecodeCompat_bb37_in/3 
* CEs [48] --> Loop 41 
* CEs [49] --> Loop 42 
* CEs [47] --> Loop 43 

#### Loops of eval_LZWDecodeCompat_bb37_in/3 
* Loop 41: eval_LZWDecodeCompat_bb37_in(V_occ_3,B,C)->  eval_LZWDecodeCompat_bb37_in(V_occ_3',B',C)
                  [V_occ_3>=2,V_occ_3=V_occ_3'+1,B'=6,B=6] 
* Loop 42: eval_LZWDecodeCompat_bb37_in(V_occ_3,B,C)->  eval_LZWDecodeCompat_bb37_in(V_occ_3',B',C)
                  [0>=V_occ_3,V_occ_3=V_occ_3'+1,B'=6,B=6] 
* Loop 43: eval_LZWDecodeCompat_bb37_in(V_occ_3,B,C) [C=0,B=6,V_occ_3=1] 

### Ranking functions of CR eval_LZWDecodeCompat_bb37_in(V_occ_3,B,C) 
* RF of phase [41]: [V_occ_3-1]

#### Partial ranking functions of CR eval_LZWDecodeCompat_bb37_in(V_occ_3,B,C) 
* Partial RF of phase [41]:
  - RF of loop [41:1]:
    V_occ_3-1


### Resulting Chains:eval_LZWDecodeCompat_bb37_in(V_occ_3,B,C) 
* [[42]]...
* [[41],43]
* [43]


### Merging Chains  eval_LZWDecodeCompat_bb37_in/3 into  External patterns of execution 
* [[43]] --> 1 
* [[43,[41]]] --> 2 
* [[[42]]] --> 3 


### Specialization of cost equations loop_cont_eval_LZWDecodeCompat_bb35_in/3 
* CE 31 is refined into CE [50,51,52] 


#### Refined cost equations loop_cont_eval_LZWDecodeCompat_bb35_in/3 
* CE 50: loop_cont_eval_LZWDecodeCompat_bb35_in(E,A,B) = 1+ eval_LZWDecodeCompat_bb37_in(F,G,H):1+ eval_LZWDecodeCompat_bb42_in(I,B):1
     [I=0,H=0,G=6,F=1,A=1,E=7] 
* CE 51: loop_cont_eval_LZWDecodeCompat_bb35_in(E,A,B) = 1+ eval_LZWDecodeCompat_bb37_in(A,F,G):2+ eval_LZWDecodeCompat_bb42_in(H,B):1
     [A>=2,H=0,G=0,F=6,E=7] 
* CE 52: loop_cont_eval_LZWDecodeCompat_bb35_in(E,A,B) = 1+ eval_LZWDecodeCompat_bb37_in(A,F,G):3
     [0>=A,F=6,E=7] 

### Cost equations --> "Loop" of loop_cont_eval_LZWDecodeCompat_bb35_in/3 
* CEs [52] --> Loop 44 
* CEs [51] --> Loop 45 
* CEs [50] --> Loop 46 

#### Loops of loop_cont_eval_LZWDecodeCompat_bb35_in/3 
* Loop 44: loop_cont_eval_LZWDecodeCompat_bb35_in(E,A,B) [0>=A,E=7] 
* Loop 45: loop_cont_eval_LZWDecodeCompat_bb35_in(E,A,B) [A>=2,E=7] 
* Loop 46: loop_cont_eval_LZWDecodeCompat_bb35_in(E,A,B) [A=1,E=7] 

### Ranking functions of CR loop_cont_eval_LZWDecodeCompat_bb35_in(E,A,B) 

#### Partial ranking functions of CR loop_cont_eval_LZWDecodeCompat_bb35_in(E,A,B) 


### Resulting Chains:loop_cont_eval_LZWDecodeCompat_bb35_in(E,A,B) 
* [46]
* [45]
* [44]...


### Merging Chains  loop_cont_eval_LZWDecodeCompat_bb35_in/3 into  External patterns of execution 
* [[46]] --> 1 
* [[45]] --> 2 
* [[44]] --> 3 


### Specialization of cost equations loop_cont_eval_LZWDecodeCompat_bb11_in/3 
* CE 25 is refined into CE [53,54,55,56] 
* CE 23 is refined into CE [57] 
* CE 24 is refined into CE [58] 


#### Refined cost equations loop_cont_eval_LZWDecodeCompat_bb11_in/3 
* CE 53: loop_cont_eval_LZWDecodeCompat_bb11_in(C,A,B) = 1+ eval_LZWDecodeCompat_bb35_in(D,E,F):1+ loop_cont_eval_LZWDecodeCompat_bb35_in(G,H,B):1
     [H=1,G=7,F=1,E=7,D=1,A=1,C=9] 
* CE 54: loop_cont_eval_LZWDecodeCompat_bb11_in(C,A,B) = 1+ eval_LZWDecodeCompat_bb35_in(A,D,A):1+ loop_cont_eval_LZWDecodeCompat_bb35_in(E,A,B):2
     [A>=2,E=7,D=7,C=9] 
* CE 55: loop_cont_eval_LZWDecodeCompat_bb11_in(C,A,B) = 1+ eval_LZWDecodeCompat_bb35_in(A,D,A):1+ loop_cont_eval_LZWDecodeCompat_bb35_in(E,A,B):3
     [0>=A,E=7,D=7,C=9] 
* CE 56: loop_cont_eval_LZWDecodeCompat_bb11_in(C,A,B) = 1+ eval_LZWDecodeCompat_bb35_in(A,D,E):2
     [C=9] 
* CE 57: loop_cont_eval_LZWDecodeCompat_bb11_in(C,A,B) = 0
     [C=8] 
* CE 58: loop_cont_eval_LZWDecodeCompat_bb11_in(C,A,B) = 0+ eval_LZWDecodeCompat_bb42_in(A,B):1
     [C=6] 

### Cost equations --> "Loop" of loop_cont_eval_LZWDecodeCompat_bb11_in/3 
* CEs [54] --> Loop 47 
* CEs [53] --> Loop 48 
* CEs [57] --> Loop 49 
* CEs [58] --> Loop 50 
* CEs [55,56] --> Loop 51 

#### Loops of loop_cont_eval_LZWDecodeCompat_bb11_in/3 
* Loop 47: loop_cont_eval_LZWDecodeCompat_bb11_in(C,A,B) [A>=2,C=9] 
* Loop 48: loop_cont_eval_LZWDecodeCompat_bb11_in(C,A,B) [A=1,C=9] 
* Loop 49: loop_cont_eval_LZWDecodeCompat_bb11_in(C,A,B) [C=8] 
* Loop 50: loop_cont_eval_LZWDecodeCompat_bb11_in(C,A,B) [C=6] 
* Loop 51: loop_cont_eval_LZWDecodeCompat_bb11_in(C,A,B) [C=9] 

### Ranking functions of CR loop_cont_eval_LZWDecodeCompat_bb11_in(C,A,B) 

#### Partial ranking functions of CR loop_cont_eval_LZWDecodeCompat_bb11_in(C,A,B) 


### Resulting Chains:loop_cont_eval_LZWDecodeCompat_bb11_in(C,A,B) 
* [51]...
* [50]
* [49]
* [48]
* [47]


### Merging Chains  loop_cont_eval_LZWDecodeCompat_bb11_in/3 into  External patterns of execution 
* [[50]] --> 1 
* [[49]] --> 2 
* [[48]] --> 3 
* [[47]] --> 4 
* [[51]] --> 5 


### Specialization of cost equations eval_LZWDecodeCompat_bb10_in/2 
* CE 13 is refined into CE [59,60,61,62,63,64,65,66] 


#### Refined cost equations eval_LZWDecodeCompat_bb10_in/2 
* CE 59: eval_LZWDecodeCompat_bb10_in(V_occ_1,B) = 1+ eval_LZWDecodeCompat_bb11_in(V_occ_1,C,V_occ_1):1+ loop_cont_eval_LZWDecodeCompat_bb11_in(D,V_occ_1,B):1
     [0>=V_occ_1,D=6,C=6] 
* CE 60: eval_LZWDecodeCompat_bb10_in(V_occ_1,B) = 1+ eval_LZWDecodeCompat_bb11_in(V_occ_1,C,D):2+ loop_cont_eval_LZWDecodeCompat_bb11_in(E,D,B):1
     [D>=1,V_occ_1>=1,E=6,C=6] 
* CE 61: eval_LZWDecodeCompat_bb10_in(V_occ_1,B) = 1+ eval_LZWDecodeCompat_bb11_in(V_occ_1,C,D):3+ loop_cont_eval_LZWDecodeCompat_bb11_in(E,D,B):1
     [V_occ_1>=1,0>=D,E=6,C=6] 
* CE 62: eval_LZWDecodeCompat_bb10_in(V_occ_1,B) = 1+ eval_LZWDecodeCompat_bb11_in(V_occ_1,C,D):4+ loop_cont_eval_LZWDecodeCompat_bb11_in(E,D,B):2
     [V_occ_1>=1,E=8,C=8] 
* CE 63: eval_LZWDecodeCompat_bb10_in(V_occ_1,B) = 1+ eval_LZWDecodeCompat_bb11_in(V_occ_1,C,D):5+ loop_cont_eval_LZWDecodeCompat_bb11_in(E,F,B):3
     [V_occ_1>=1,F=1,E=9,D=1,C=9] 
* CE 64: eval_LZWDecodeCompat_bb10_in(V_occ_1,B) = 1+ eval_LZWDecodeCompat_bb11_in(V_occ_1,C,D):5+ loop_cont_eval_LZWDecodeCompat_bb11_in(E,D,B):4
     [D>=2,V_occ_1>=1,E=9,C=9] 
* CE 65: eval_LZWDecodeCompat_bb10_in(V_occ_1,B) = 1+ eval_LZWDecodeCompat_bb11_in(V_occ_1,C,D):5+ loop_cont_eval_LZWDecodeCompat_bb11_in(E,D,B):5
     [D>=1,V_occ_1>=1,E=9,C=9] 
* CE 66: eval_LZWDecodeCompat_bb10_in(V_occ_1,B) = 1+ eval_LZWDecodeCompat_bb11_in(V_occ_1,C,D):6
     [V_occ_1>=1] 

### Cost equations --> "Loop" of eval_LZWDecodeCompat_bb10_in/2 
* CEs [65,66] --> Loop 52 
* CEs [60,61,62,63,64] --> Loop 53 
* CEs [59] --> Loop 54 

#### Loops of eval_LZWDecodeCompat_bb10_in/2 
* Loop 52: eval_LZWDecodeCompat_bb10_in(V_occ_1,B) [V_occ_1>=1] 
* Loop 53: eval_LZWDecodeCompat_bb10_in(V_occ_1,B) [V_occ_1>=1] 
* Loop 54: eval_LZWDecodeCompat_bb10_in(V_occ_1,B) [0>=V_occ_1] 

### Ranking functions of CR eval_LZWDecodeCompat_bb10_in(V_occ_1,B) 

#### Partial ranking functions of CR eval_LZWDecodeCompat_bb10_in(V_occ_1,B) 


### Resulting Chains:eval_LZWDecodeCompat_bb10_in(V_occ_1,B) 
* [54]
* [53]
* [52]...


### Merging Chains  eval_LZWDecodeCompat_bb10_in/2 into  External patterns of execution 
* [[54]] --> 1 
* [[53]] --> 2 
* [[52]] --> 3 


### Specialization of cost equations eval_LZWDecodeCompat_bb4_in/4 
* CE 8 is refined into CE [67] 
* CE 7 is refined into CE [68] 


#### Refined cost equations eval_LZWDecodeCompat_bb4_in/4 
* CE 67: eval_LZWDecodeCompat_bb4_in(A,B,C,A) = 0
     [A+1>=B,C=5] 
* CE 68: eval_LZWDecodeCompat_bb4_in(V_4,V_residue_0,B,C) = 1+ eval_LZWDecodeCompat_bb4_in(V_4,D,B,C)
     [V_residue_0>=V_4+2,V_residue_0=D+1] 

### Cost equations --> "Loop" of eval_LZWDecodeCompat_bb4_in/4 
* CEs [68] --> Loop 55 
* CEs [67] --> Loop 56 

#### Loops of eval_LZWDecodeCompat_bb4_in/4 
* Loop 55: eval_LZWDecodeCompat_bb4_in(V_4,V_residue_0,B,C)->  eval_LZWDecodeCompat_bb4_in(V_4,V_residue_0',B,C)
                  [V_residue_0>=V_4+2,V_residue_0=V_residue_0'+1] 
* Loop 56: eval_LZWDecodeCompat_bb4_in(A,B,C,A) [A+1>=B,C=5] 

### Ranking functions of CR eval_LZWDecodeCompat_bb4_in(V_4,V_residue_0,B,C) 
* RF of phase [55]: [-V_4+V_residue_0-1]

#### Partial ranking functions of CR eval_LZWDecodeCompat_bb4_in(V_4,V_residue_0,B,C) 
* Partial RF of phase [55]:
  - RF of loop [55:1]:
    -V_4+V_residue_0-1


### Resulting Chains:eval_LZWDecodeCompat_bb4_in(V_4,V_residue_0,B,C) 
* [[55],56]
* [56]


### Merging Chains  eval_LZWDecodeCompat_bb4_in/4 into  External patterns of execution 
* [[56,[55]]] --> 1 
* [[56]] --> 2 


### Specialization of cost equations eval_LZWDecodeCompat_bb8_in/4 
* CE 12 is refined into CE [69] 
* CE 11 is refined into CE [70] 
* CE 10 is refined into CE [71] 


#### Refined cost equations eval_LZWDecodeCompat_bb8_in/4 
* CE 69: eval_LZWDecodeCompat_bb8_in(A,B,C,A) = 0
     [C=3,B=1] 
* CE 70: eval_LZWDecodeCompat_bb8_in(V_34,V_residue_1,B,C) = 1+ eval_LZWDecodeCompat_bb8_in(V_34,D,E,C)
     [V_residue_1>=2,V_residue_1=D+1,E=3,B=3] 
* CE 71: eval_LZWDecodeCompat_bb8_in(V_34,V_residue_1,B,C) = 1+ eval_LZWDecodeCompat_bb8_in(V_34,D,E,C)
     [0>=V_residue_1,V_residue_1=D+1,E=3,B=3] 

### Cost equations --> "Loop" of eval_LZWDecodeCompat_bb8_in/4 
* CEs [70] --> Loop 57 
* CEs [71] --> Loop 58 
* CEs [69] --> Loop 59 

#### Loops of eval_LZWDecodeCompat_bb8_in/4 
* Loop 57: eval_LZWDecodeCompat_bb8_in(V_34,V_residue_1,B,C)->  eval_LZWDecodeCompat_bb8_in(V_34,V_residue_1',B',C)
                  [V_residue_1>=2,V_residue_1=V_residue_1'+1,B'=3,B=3] 
* Loop 58: eval_LZWDecodeCompat_bb8_in(V_34,V_residue_1,B,C)->  eval_LZWDecodeCompat_bb8_in(V_34,V_residue_1',B',C)
                  [0>=V_residue_1,V_residue_1=V_residue_1'+1,B'=3,B=3] 
* Loop 59: eval_LZWDecodeCompat_bb8_in(A,B,C,A) [C=3,B=1] 

### Ranking functions of CR eval_LZWDecodeCompat_bb8_in(V_34,V_residue_1,B,C) 
* RF of phase [57]: [V_residue_1-1]

#### Partial ranking functions of CR eval_LZWDecodeCompat_bb8_in(V_34,V_residue_1,B,C) 
* Partial RF of phase [57]:
  - RF of loop [57:1]:
    V_residue_1-1


### Resulting Chains:eval_LZWDecodeCompat_bb8_in(V_34,V_residue_1,B,C) 
* [[58]]...
* [[57],59]
* [59]


### Merging Chains  eval_LZWDecodeCompat_bb8_in/4 into  External patterns of execution 
* [[59]] --> 1 
* [[59,[57]]] --> 2 
* [[[58]]] --> 3 


### Specialization of cost equations eval_LZWDecodeCompat_bb6_in/2 
* CE 16 is refined into CE [72] 
* CE 15 is refined into CE [73] 
* CE 14 is refined into CE [74] 


#### Refined cost equations eval_LZWDecodeCompat_bb6_in/2 
* CE 72: eval_LZWDecodeCompat_bb6_in(V_occ_0,B) = 0
     [B=4,V_occ_0=1] 
* CE 73: eval_LZWDecodeCompat_bb6_in(V_occ_0,B) = 1+ eval_LZWDecodeCompat_bb6_in(C,D)
     [V_occ_0>=2,V_occ_0=C+1,D=4,B=4] 
* CE 74: eval_LZWDecodeCompat_bb6_in(V_occ_0,B) = 1+ eval_LZWDecodeCompat_bb6_in(C,D)
     [0>=V_occ_0,V_occ_0=C+1,D=4,B=4] 

### Cost equations --> "Loop" of eval_LZWDecodeCompat_bb6_in/2 
* CEs [73] --> Loop 60 
* CEs [74] --> Loop 61 
* CEs [72] --> Loop 62 

#### Loops of eval_LZWDecodeCompat_bb6_in/2 
* Loop 60: eval_LZWDecodeCompat_bb6_in(V_occ_0,B)->  eval_LZWDecodeCompat_bb6_in(V_occ_0',B')
                  [V_occ_0>=2,V_occ_0=V_occ_0'+1,B'=4,B=4] 
* Loop 61: eval_LZWDecodeCompat_bb6_in(V_occ_0,B)->  eval_LZWDecodeCompat_bb6_in(V_occ_0',B')
                  [0>=V_occ_0,V_occ_0=V_occ_0'+1,B'=4,B=4] 
* Loop 62: eval_LZWDecodeCompat_bb6_in(V_occ_0,B) [B=4,V_occ_0=1] 

### Ranking functions of CR eval_LZWDecodeCompat_bb6_in(V_occ_0,B) 
* RF of phase [60]: [V_occ_0-1]

#### Partial ranking functions of CR eval_LZWDecodeCompat_bb6_in(V_occ_0,B) 
* Partial RF of phase [60]:
  - RF of loop [60:1]:
    V_occ_0-1


### Resulting Chains:eval_LZWDecodeCompat_bb6_in(V_occ_0,B) 
* [[61]]...
* [[60],62]
* [62]


### Merging Chains  eval_LZWDecodeCompat_bb6_in/2 into  External patterns of execution 
* [[62]] --> 1 
* [[62,[60]]] --> 2 
* [[[61]]] --> 3 


### Specialization of cost equations loop_cont_eval_LZWDecodeCompat_bb4_in/3 
* CE 9 is refined into CE [75,76,77] 


#### Refined cost equations loop_cont_eval_LZWDecodeCompat_bb4_in/3 
* CE 75: loop_cont_eval_LZWDecodeCompat_bb4_in(F,A,B) = 1+ eval_LZWDecodeCompat_bb6_in(G,H):1
     [H=4,G=1,A=1,F=5] 
* CE 76: loop_cont_eval_LZWDecodeCompat_bb4_in(F,A,B) = 1+ eval_LZWDecodeCompat_bb6_in(A,G):2
     [A>=2,G=4,F=5] 
* CE 77: loop_cont_eval_LZWDecodeCompat_bb4_in(F,A,B) = 1+ eval_LZWDecodeCompat_bb6_in(A,G):3
     [0>=A,G=4,F=5] 

### Cost equations --> "Loop" of loop_cont_eval_LZWDecodeCompat_bb4_in/3 
* CEs [77] --> Loop 63 
* CEs [76] --> Loop 64 
* CEs [75] --> Loop 65 

#### Loops of loop_cont_eval_LZWDecodeCompat_bb4_in/3 
* Loop 63: loop_cont_eval_LZWDecodeCompat_bb4_in(F,A,B) [0>=A,F=5] 
* Loop 64: loop_cont_eval_LZWDecodeCompat_bb4_in(F,A,B) [A>=2,F=5] 
* Loop 65: loop_cont_eval_LZWDecodeCompat_bb4_in(F,A,B) [A=1,F=5] 

### Ranking functions of CR loop_cont_eval_LZWDecodeCompat_bb4_in(F,A,B) 

#### Partial ranking functions of CR loop_cont_eval_LZWDecodeCompat_bb4_in(F,A,B) 


### Resulting Chains:loop_cont_eval_LZWDecodeCompat_bb4_in(F,A,B) 
* [65]
* [64]
* [63]...


### Merging Chains  loop_cont_eval_LZWDecodeCompat_bb4_in/3 into  External patterns of execution 
* [[65]] --> 1 
* [[64]] --> 2 
* [[63]] --> 3 


### Specialization of cost equations eval_LZWDecodeCompat_bb0_in/2 
* CE 3 is refined into CE [78,79,80,81,82,83] 
* CE 4 is refined into CE [84,85,86,87,88,89,90] 
* CE 5 is refined into CE [91,92,93] 
* CE 6 is refined into CE [94] 


#### Refined cost equations eval_LZWDecodeCompat_bb0_in/2 
* CE 78: eval_LZWDecodeCompat_bb0_in(V_occ0,B) = 1+ eval_LZWDecodeCompat_bb4_in(C,D,E,F):1+ loop_cont_eval_LZWDecodeCompat_bb4_in(G,H,B):1
     [D>=3,H=1,G=5,F=1,E=5,C=1,V_occ0=1] 
* CE 79: eval_LZWDecodeCompat_bb0_in(V_occ0,B) = 1+ eval_LZWDecodeCompat_bb4_in(V_occ0,C,D,V_occ0):1+ loop_cont_eval_LZWDecodeCompat_bb4_in(E,V_occ0,B):2
     [C>=V_occ0+2,V_occ0>=2,E=5,D=5] 
* CE 80: eval_LZWDecodeCompat_bb0_in(V_occ0,B) = 1+ eval_LZWDecodeCompat_bb4_in(V_occ0,C,D,V_occ0):1+ loop_cont_eval_LZWDecodeCompat_bb4_in(E,V_occ0,B):3
     [C>=V_occ0+2,0>=V_occ0,E=5,D=5] 
* CE 81: eval_LZWDecodeCompat_bb0_in(V_occ0,B) = 1+ eval_LZWDecodeCompat_bb4_in(C,D,E,F):2+ loop_cont_eval_LZWDecodeCompat_bb4_in(G,H,B):1
     [2>=D,H=1,G=5,F=1,E=5,C=1,V_occ0=1] 
* CE 82: eval_LZWDecodeCompat_bb0_in(V_occ0,B) = 1+ eval_LZWDecodeCompat_bb4_in(V_occ0,C,D,V_occ0):2+ loop_cont_eval_LZWDecodeCompat_bb4_in(E,V_occ0,B):2
     [V_occ0+1>=C,V_occ0>=2,E=5,D=5] 
* CE 83: eval_LZWDecodeCompat_bb0_in(V_occ0,B) = 1+ eval_LZWDecodeCompat_bb4_in(V_occ0,C,D,V_occ0):2+ loop_cont_eval_LZWDecodeCompat_bb4_in(E,V_occ0,B):3
     [V_occ0+1>=C,0>=V_occ0,E=5,D=5] 
* CE 84: eval_LZWDecodeCompat_bb0_in(V_occ0,B) = 1+ eval_LZWDecodeCompat_bb8_in(C,D,E,C):1+ eval_LZWDecodeCompat_bb10_in(C,B):1
     [0>=C,C+1=V_occ0,E=3,D=1] 
* CE 85: eval_LZWDecodeCompat_bb0_in(V_occ0,B) = 1+ eval_LZWDecodeCompat_bb8_in(C,D,E,C):1+ eval_LZWDecodeCompat_bb10_in(C,B):2
     [C>=1,C+1=V_occ0,E=3,D=1] 
* CE 86: eval_LZWDecodeCompat_bb0_in(V_occ0,B) = 1+ eval_LZWDecodeCompat_bb8_in(C,D,E,C):1+ eval_LZWDecodeCompat_bb10_in(C,B):3
     [C>=1,C+1=V_occ0,E=3,D=1] 
* CE 87: eval_LZWDecodeCompat_bb0_in(V_occ0,B) = 1+ eval_LZWDecodeCompat_bb8_in(C,D,E,C):2+ eval_LZWDecodeCompat_bb10_in(C,B):1
     [D>=2,0>=C,C+D=V_occ0,E=3] 
* CE 88: eval_LZWDecodeCompat_bb0_in(V_occ0,B) = 1+ eval_LZWDecodeCompat_bb8_in(C,D,E,C):2+ eval_LZWDecodeCompat_bb10_in(C,B):2
     [C>=1,D>=2,C+D=V_occ0,E=3] 
* CE 89: eval_LZWDecodeCompat_bb0_in(V_occ0,B) = 1+ eval_LZWDecodeCompat_bb8_in(C,D,E,C):2+ eval_LZWDecodeCompat_bb10_in(C,B):3
     [C>=1,D>=2,C+D=V_occ0,E=3] 
* CE 90: eval_LZWDecodeCompat_bb0_in(V_occ0,B) = 1+ eval_LZWDecodeCompat_bb8_in(C,D,E,F):3
     [0>=D,C+D=V_occ0,E=3] 
* CE 91: eval_LZWDecodeCompat_bb0_in(V_occ0,B) = 0+ eval_LZWDecodeCompat_bb10_in(V_occ0,B):1
     [0>=V_occ0] 
* CE 92: eval_LZWDecodeCompat_bb0_in(V_occ0,B) = 0+ eval_LZWDecodeCompat_bb10_in(V_occ0,B):2
     [V_occ0>=1] 
* CE 93: eval_LZWDecodeCompat_bb0_in(V_occ0,B) = 0+ eval_LZWDecodeCompat_bb10_in(V_occ0,B):3
     [V_occ0>=1] 
* CE 94: eval_LZWDecodeCompat_bb0_in(V_occ0,B) = 0
     [] 

### Cost equations --> "Loop" of eval_LZWDecodeCompat_bb0_in/2 
* CEs [78,79,81,82,84,85,87,88,91,92,94] --> Loop 66 
* CEs [80,83,86,89,90,93] --> Loop 67 

#### Loops of eval_LZWDecodeCompat_bb0_in/2 
* Loop 66: eval_LZWDecodeCompat_bb0_in(V_occ0,B) [] 
* Loop 67: eval_LZWDecodeCompat_bb0_in(V_occ0,B) [] 

### Ranking functions of CR eval_LZWDecodeCompat_bb0_in(V_occ0,B) 

#### Partial ranking functions of CR eval_LZWDecodeCompat_bb0_in(V_occ0,B) 


### Resulting Chains:eval_LZWDecodeCompat_bb0_in(V_occ0,B) 
* [67]...
* [66]


### Merging Chains  eval_LZWDecodeCompat_bb0_in/2 into  External patterns of execution 
* [[66]] --> 1 
* [[67]] --> 2 


### Specialization of cost equations eval_LZWDecodeCompat_start/3 
* CE 2 is refined into CE [95,96] 


#### Refined cost equations eval_LZWDecodeCompat_start/3 
* CE 95: eval_LZWDecodeCompat_start(V_occ0,V_s,B) = 0+ eval_LZWDecodeCompat_bb0_in(V_occ0,B):1
     [] 
* CE 96: eval_LZWDecodeCompat_start(V_occ0,V_s,B) = 0+ eval_LZWDecodeCompat_bb0_in(V_occ0,B):2
     [] 

### Cost equations --> "Loop" of eval_LZWDecodeCompat_start/3 
* CEs [96] --> Loop 68 
* CEs [95] --> Loop 69 

#### Loops of eval_LZWDecodeCompat_start/3 
* Loop 68: eval_LZWDecodeCompat_start(V_occ0,V_s,B) [] 
* Loop 69: eval_LZWDecodeCompat_start(V_occ0,V_s,B) [] 

### Ranking functions of CR eval_LZWDecodeCompat_start(V_occ0,V_s,B) 

#### Partial ranking functions of CR eval_LZWDecodeCompat_start(V_occ0,V_s,B) 


### Resulting Chains:eval_LZWDecodeCompat_start(V_occ0,V_s,B) 
* [69]
* [68]...


### Merging Chains  eval_LZWDecodeCompat_start/3 into  External patterns of execution 
* [[69]] --> 1 
* [[68]] --> 2 


Computing Bounds
=====================================

#### Cost of loops [30] 

 * loop 30:eval_LZWDecodeCompat_bb39_in(V_occ_2,V_88,V_219,B,C) -> [eval_LZWDecodeCompat_bb39_in(V_occ_2',V_88',V_219',B',C')] 
1
#### Cost of phase [30]:eval_LZWDecodeCompat_bb39_in(V_occ_2,V_88,V_219,B,C) -> [eval_LZWDecodeCompat_bb39_in(V_occ_2',V_88',V_219',B',C')] 
1*it(30)+0
#### Cost of phase [30]:eval_LZWDecodeCompat_bb39_in(V_occ_2,V_88,V_219,B,C) -> [eval_LZWDecodeCompat_bb39_in(V_occ_2',V_88',V_219',B',C')] 
1*it(30)+0
#### Cost of chains of eval_LZWDecodeCompat_bb39_in(V_occ_2,V_88,V_219,B,C):
* Chain [[30]]...: 1*it(30)+0
  with precondition: [V_occ_2>=1,B=2] 

* Chain [[30],31]: 1*it(30)+0
  with precondition: [B=2,V_219=C,V_occ_2>=1] 

* Chain [31]: 0
  with precondition: [B=2,C=V_219,V_occ_2>=1] 


#### Cost of loops [32] 

 * loop 32:eval_LZWDecodeCompat_bb11_in(V_occ_2,B,C) -> [eval_LZWDecodeCompat_bb11_in(V_occ_2',B',C')] 
1*s(3)+0
#### Cost of phase [32]:eval_LZWDecodeCompat_bb11_in(V_occ_2,B,C) -> [eval_LZWDecodeCompat_bb11_in(V_occ_2',B',C')] 
1*s(4)+0
#### Cost of phase [32]:eval_LZWDecodeCompat_bb11_in(V_occ_2,B,C) -> [eval_LZWDecodeCompat_bb11_in(V_occ_2',B',C')] 
1*s(4)+0
#### Cost of phase [32]:eval_LZWDecodeCompat_bb11_in(V_occ_2,B,C) -> [eval_LZWDecodeCompat_bb11_in(V_occ_2',B',C')] 
1*s(4)+0
#### Cost of phase [32]:eval_LZWDecodeCompat_bb11_in(V_occ_2,B,C) -> [eval_LZWDecodeCompat_bb11_in(V_occ_2',B',C')] 
1*s(4)+0
#### Cost of phase [32]:eval_LZWDecodeCompat_bb11_in(V_occ_2,B,C) -> [eval_LZWDecodeCompat_bb11_in(V_occ_2',B',C')] 
1*s(4)+0
#### Cost of phase [32]:eval_LZWDecodeCompat_bb11_in(V_occ_2,B,C) -> [eval_LZWDecodeCompat_bb11_in(V_occ_2',B',C')] 
1*s(4)+0
#### Cost of chains of eval_LZWDecodeCompat_bb11_in(V_occ_2,B,C):
* Chain [[32]]...: 1*s(4)+0
  with precondition: [V_occ_2>=1] 

* Chain [[32],37]: 1*s(4)+0
  with precondition: [B=6,0>=C,V_occ_2>=1] 

* Chain [[32],36]: 1*s(4)+0
  with precondition: [B=6,V_occ_2>=1,C>=1] 

* Chain [[32],35]: 1*s(4)+0
  with precondition: [B=8,V_occ_2>=1] 

* Chain [[32],34]: 1*s(4)+0
  with precondition: [B=9,V_occ_2>=1,C>=1] 

* Chain [[32],33]...: 2*s(4)+2
  with precondition: [V_occ_2>=1] 

* Chain [37]: 0
  with precondition: [B=6,V_occ_2=C,0>=V_occ_2] 

* Chain [36]: 0
  with precondition: [B=6,V_occ_2=C,V_occ_2>=1] 

* Chain [35]: 0
  with precondition: [B=8,V_occ_2>=1] 

* Chain [34]: 0
  with precondition: [B=9,V_occ_2=C,V_occ_2>=1] 

* Chain [33]...: 1*s(5)+2
  with precondition: [V_occ_2>=1] 


#### Cost of loops [38] 

 * loop 38:eval_LZWDecodeCompat_bb35_in(V_occ_2,B,C) -> [eval_LZWDecodeCompat_bb35_in(V_occ_2',B',C')] 
1
#### Cost of phase [38]:eval_LZWDecodeCompat_bb35_in(V_occ_2,B,C) -> [eval_LZWDecodeCompat_bb35_in(V_occ_2',B',C')] 
1*it(38)+0
#### Cost of phase [38]:eval_LZWDecodeCompat_bb35_in(V_occ_2,B,C) -> [eval_LZWDecodeCompat_bb35_in(V_occ_2',B',C')] 
1*it(38)+0
#### Cost of chains of eval_LZWDecodeCompat_bb35_in(V_occ_2,B,C):
* Chain [[38]]...: 1*it(38)+0
  with precondition: [] 

* Chain [[38],39]: 1*it(38)+0
  with precondition: [B=7,V_occ_2=C] 

* Chain [39]: 0
  with precondition: [B=7,C=V_occ_2] 


#### Cost of chains of eval_LZWDecodeCompat_bb42_in(V_occ_5,B):
* Chain [40]: 0
  with precondition: [] 


#### Cost of loops [42] 

 * loop 42:eval_LZWDecodeCompat_bb37_in(V_occ_3,B,C) -> [eval_LZWDecodeCompat_bb37_in(V_occ_3',B',C')] 
1
#### Cost of phase [42]:eval_LZWDecodeCompat_bb37_in(V_occ_3,B,C) -> [eval_LZWDecodeCompat_bb37_in(V_occ_3',B',C')] 
1*it(42)+0
#### Cost of loops [41] 

 * loop 41:eval_LZWDecodeCompat_bb37_in(V_occ_3,B,C) -> [eval_LZWDecodeCompat_bb37_in(V_occ_3',B',C')] 
1
#### Cost of phase [41]:eval_LZWDecodeCompat_bb37_in(V_occ_3,B,C) -> [eval_LZWDecodeCompat_bb37_in(V_occ_3',B',C')] 
1*it(41)+0
  Such that:it(41) =< V_occ_3
it(41) =< V_occ_3-V_occ_3'

#### Cost of chains of eval_LZWDecodeCompat_bb37_in(V_occ_3,B,C):
* Chain [[42]]...: 1*it(42)+0
  with precondition: [0>=V_occ_3,B=6] 

* Chain [[41],43]: 1*it(41)+0
  Such that:it(41) =< V_occ_3

  with precondition: [B=6,C=0,V_occ_3>=2] 

* Chain [43]: 0
  with precondition: [V_occ_3=1,B=6,C=0] 


#### Cost of chains of loop_cont_eval_LZWDecodeCompat_bb35_in(E,A,B):
* Chain [46]: 1
  with precondition: [E=7,A=1] 

* Chain [45]: 1*s(13)+1
  Such that:s(13) =< A

  with precondition: [E=7,A>=2] 

* Chain [44]...: 1*s(14)+1
  with precondition: [E=7,0>=A] 


#### Cost of chains of loop_cont_eval_LZWDecodeCompat_bb11_in(C,A,B):
* Chain [51]...: 1*aux(8)+0
  with precondition: [C=9] 

* Chain [50]: 0
  with precondition: [C=6] 

* Chain [49]: 0
  with precondition: [C=8] 

* Chain [48]: 1*s(18)+2
  with precondition: [C=9,A=1] 

* Chain [47]: 1*s(19)+1*s(20)+2
  Such that:s(20) =< A

  with precondition: [C=9,A>=2] 


#### Cost of chains of eval_LZWDecodeCompat_bb10_in(V_occ_1,B):
* Chain [54]: 1
  with precondition: [0>=V_occ_1] 

* Chain [53]: 1*aux(9)+0
  with precondition: [V_occ_1>=1] 

* Chain [52]...: 1*aux(10)+0
  with precondition: [V_occ_1>=1] 


#### Cost of loops [55] 

 * loop 55:eval_LZWDecodeCompat_bb4_in(V_4,V_residue_0,B,C) -> [eval_LZWDecodeCompat_bb4_in(V_4',V_residue_0',B',C')] 
1
#### Cost of phase [55]:eval_LZWDecodeCompat_bb4_in(V_4,V_residue_0,B,C) -> [eval_LZWDecodeCompat_bb4_in(V_4',V_residue_0',B',C')] 
1*it(55)+0
  Such that:it(55) =< -V_4+V_residue_0
it(55) =< -V_4+V_residue_0+V_4'-V_residue_0'

#### Cost of chains of eval_LZWDecodeCompat_bb4_in(V_4,V_residue_0,B,C):
* Chain [[55],56]: 1*it(55)+0
  Such that:it(55) =< -V_4+V_residue_0

  with precondition: [B=5,V_4=C,V_residue_0>=V_4+2] 

* Chain [56]: 0
  with precondition: [B=5,V_4=C,V_4+1>=V_residue_0] 


#### Cost of loops [58] 

 * loop 58:eval_LZWDecodeCompat_bb8_in(V_34,V_residue_1,B,C) -> [eval_LZWDecodeCompat_bb8_in(V_34',V_residue_1',B',C')] 
1
#### Cost of phase [58]:eval_LZWDecodeCompat_bb8_in(V_34,V_residue_1,B,C) -> [eval_LZWDecodeCompat_bb8_in(V_34',V_residue_1',B',C')] 
1*it(58)+0
#### Cost of loops [57] 

 * loop 57:eval_LZWDecodeCompat_bb8_in(V_34,V_residue_1,B,C) -> [eval_LZWDecodeCompat_bb8_in(V_34',V_residue_1',B',C')] 
1
#### Cost of phase [57]:eval_LZWDecodeCompat_bb8_in(V_34,V_residue_1,B,C) -> [eval_LZWDecodeCompat_bb8_in(V_34',V_residue_1',B',C')] 
1*it(57)+0
  Such that:it(57) =< V_residue_1
it(57) =< V_residue_1-V_residue_1'

#### Cost of chains of eval_LZWDecodeCompat_bb8_in(V_34,V_residue_1,B,C):
* Chain [[58]]...: 1*it(58)+0
  with precondition: [0>=V_residue_1,B=3] 

* Chain [[57],59]: 1*it(57)+0
  Such that:it(57) =< V_residue_1

  with precondition: [B=3,V_34=C,V_residue_1>=2] 

* Chain [59]: 0
  with precondition: [V_residue_1=1,B=3,C=V_34] 


#### Cost of loops [61] 

 * loop 61:eval_LZWDecodeCompat_bb6_in(V_occ_0,B) -> [eval_LZWDecodeCompat_bb6_in(V_occ_0',B')] 
1
#### Cost of phase [61]:eval_LZWDecodeCompat_bb6_in(V_occ_0,B) -> [eval_LZWDecodeCompat_bb6_in(V_occ_0',B')] 
1*it(61)+0
#### Cost of loops [60] 

 * loop 60:eval_LZWDecodeCompat_bb6_in(V_occ_0,B) -> [eval_LZWDecodeCompat_bb6_in(V_occ_0',B')] 
1
#### Cost of phase [60]:eval_LZWDecodeCompat_bb6_in(V_occ_0,B) -> [eval_LZWDecodeCompat_bb6_in(V_occ_0',B')] 
1*it(60)+0
  Such that:it(60) =< V_occ_0
it(60) =< V_occ_0-V_occ_0'

#### Cost of chains of eval_LZWDecodeCompat_bb6_in(V_occ_0,B):
* Chain [[61]]...: 1*it(61)+0
  with precondition: [0>=V_occ_0,B=4] 

* Chain [[60],62]: 1*it(60)+0
  Such that:it(60) =< V_occ_0

  with precondition: [B=4,V_occ_0>=2] 

* Chain [62]: 0
  with precondition: [V_occ_0=1,B=4] 


#### Cost of chains of loop_cont_eval_LZWDecodeCompat_bb4_in(F,A,B):
* Chain [65]: 1
  with precondition: [F=5,A=1] 

* Chain [64]: 1*s(32)+1
  Such that:s(32) =< A

  with precondition: [F=5,A>=2] 

* Chain [63]...: 1*s(33)+1
  with precondition: [F=5,0>=A] 


#### Cost of chains of eval_LZWDecodeCompat_bb0_in(V_occ0,B):
* Chain [67]...: 7*s(34)+1*s(38)+2
  Such that:s(38) =< V_occ0

  with precondition: [] 

* Chain [66]: 6*s(42)+3*s(44)+2
  Such that:aux(11) =< V_occ0
s(44) =< aux(11)

  with precondition: [] 


#### Cost of chains of eval_LZWDecodeCompat_start(V_occ0,V_s,B):
* Chain [69]: 3*s(52)+6*s(53)+2
  Such that:s(51) =< V_occ0
s(52) =< s(51)

  with precondition: [] 

* Chain [68]...: 1*s(54)+7*s(55)+2
  Such that:s(54) =< V_occ0

  with precondition: [] 


Closed-form bounds of eval_LZWDecodeCompat_start(V_occ0,V_s,B): 
-------------------------------------
* Chain [69] with precondition: [] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [68]... with precondition: [] 
    - Upper bound: inf 
    - Complexity: infinity 

### Maximum cost of eval_LZWDecodeCompat_start(V_occ0,V_s,B): inf 
Asymptotic class: infinity 

Time statistics: 
-------------------------------------
* Partial evaluation computed in 110 ms.
* Invariants computed in 148 ms.
   - Backward Invariants 72 ms.
   - Transitive Invariants 34 ms.
* Refinement performed in 352 ms.
* Termination proved in 34 ms.
* Upper bounds computed in 230 ms.
   - Equation cost structures 115 ms.
   - Phase cost structures 52 ms.
   - Chain cost structures 67 ms.
   - Solving cost expressions 1 ms.
* Total analysis performed in 1048 ms.


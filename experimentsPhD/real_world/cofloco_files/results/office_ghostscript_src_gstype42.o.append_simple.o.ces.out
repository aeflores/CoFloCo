Warning: Ignored call to eval_append_simple_stop/1 in equation eval_append_simple_bb41_in/1 

Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. recursive  : [eval_append_simple_bb2_in/4,eval_append_simple_bb5_in/5,eval_append_simple_bb7_in/5]
1. non_recursive  : [eval_append_simple_bb41_in/1]
2. recursive  : [eval_append_simple_107/17,eval_append_simple_108/17,eval_append_simple_118/17,eval_append_simple_119/17,eval_append_simple_121/19,eval_append_simple_122/19,eval_append_simple_123/19,eval_append_simple_133/23,eval_append_simple_134/23,eval_append_simple_137/19,eval_append_simple_138/19,eval_append_simple_139/25,eval_append_simple_140/25,eval_append_simple_155/23,eval_append_simple_156/23,eval_append_simple_157/23,eval_append_simple_158/17,eval_append_simple_159/17,eval_append_simple_160/17,eval_append_simple_161/17,eval_append_simple_NewDefault_in/17,eval_append_simple_bb11_in/17,eval_append_simple_bb15_in/17,eval_append_simple_bb19_in/17,eval_append_simple_bb23_in/17,eval_append_simple_bb30_in/25,eval_append_simple_bb33_in/17,eval_append_simple_bb34_in/17,eval_append_simple_bb35_in/17]
3. recursive  : [eval_append_simple_171/12,eval_append_simple_172/12,eval_append_simple_173/6,eval_append_simple_174/6,eval_append_simple_bb39_in/6,eval_append_simple_bb9_in/4,loop_cont_eval_append_simple_bb11_in/13]
4. non_recursive  : [loop_cont_eval_append_simple_bb9_in/2]
5. non_recursive  : [eval_append_simple_49/2]
6. non_recursive  : [eval_append_simple_48/2]
7. non_recursive  : [loop_cont_eval_append_simple_bb2_in/3]
8. non_recursive  : [eval_append_simple_bb0_in/1]
9. non_recursive  : [eval_append_simple_start/1]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into eval_append_simple_bb2_in/4
1. SCC is completely evaluated into other SCCs
2. SCC is partially evaluated into eval_append_simple_bb11_in/17
3. SCC is partially evaluated into eval_append_simple_bb9_in/4
4. SCC is completely evaluated into other SCCs
5. SCC is partially evaluated into eval_append_simple_49/2
6. SCC is completely evaluated into other SCCs
7. SCC is completely evaluated into other SCCs
8. SCC is partially evaluated into eval_append_simple_bb0_in/1
9. SCC is partially evaluated into eval_append_simple_start/1

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations eval_append_simple_bb2_in/4 
* CE 6 is refined into CE [18] 
* CE 5 is refined into CE [19] 


#### Refined cost equations eval_append_simple_bb2_in/4 
* CE 18: eval_append_simple_bb2_in(A,B,C,A) = 0
     [0>=B,C=5] 
* CE 19: eval_append_simple_bb2_in(V_10,V_np_0,B,C) = 1+ eval_append_simple_bb2_in(V_10,D,E,C)
     [V_np_0>=1,E=5,B=5] 

### Cost equations --> "Loop" of eval_append_simple_bb2_in/4 
* CEs [19] --> Loop 13 
* CEs [18] --> Loop 14 

#### Loops of eval_append_simple_bb2_in/4 
* Loop 13: eval_append_simple_bb2_in(V_10,V_np_0,B,C)->  eval_append_simple_bb2_in(V_10,V_np_0',B',C)
                  [V_np_0>=1,B'=5,B=5] 
* Loop 14: eval_append_simple_bb2_in(A,B,C,A) [0>=B,C=5] 

### Ranking functions of CR eval_append_simple_bb2_in(V_10,V_np_0,B,C) 

#### Partial ranking functions of CR eval_append_simple_bb2_in(V_10,V_np_0,B,C) 


### Resulting Chains:eval_append_simple_bb2_in(V_10,V_np_0,B,C) 
* [[13]]...
* [[13],14]
* [14]


### Merging Chains  eval_append_simple_bb2_in/4 into  External patterns of execution 
* [[14]] --> 1 
* [[14,[13]]] --> 2 
* [[[13]]] --> 3 


### Specialization of cost equations eval_append_simple_bb11_in/17 
* CE 17 is refined into CE [20] 
* CE 16 is refined into CE [21] 
* CE 14 is refined into CE [22] 
* CE 15 is refined into CE [23] 


#### Refined cost equations eval_append_simple_bb11_in/17 
* CE 20: eval_append_simple_bb11_in(A,B,C,D,E,F,A,B,C,D,E,G,H,I,J,K,L) = 0
     [E>=D+1,A>=C+1,E>=B,F=4] 
* CE 21: eval_append_simple_bb11_in(A,B,C,D,E,F,A,B,C,D,E,G,H,I,J,K,L) = 0
     [E>=D+1,A>=C+1,E>=B,F=3] 
* CE 22: eval_append_simple_bb11_in(V_10,V_np1_0,V_i_0,V_129,V_np1_1,B,C,D,E,F,G,H,I,J,K,L,M) = 0
     [V_129>=V_np1_1,V_10>=V_i_0+1,V_np1_1>=V_np1_0,B=2] 
* CE 23: eval_append_simple_bb11_in(V_10,V_np1_0,V_i_0,V_129,V_np1_1,B,C,D,E,F,G,H,I,J,K,L,M) = 1+ eval_append_simple_bb11_in(V_10,V_np1_0,V_i_0,V_129,N,B,C,D,E,F,G,H,I,J,K,L,M)
     [V_129>=V_np1_1,V_10>=V_i_0+1,V_np1_1>=V_np1_0,B>=2,4>=B,V_np1_1+1=N] 

### Cost equations --> "Loop" of eval_append_simple_bb11_in/17 
* CEs [23] --> Loop 15 
* CEs [20] --> Loop 16 
* CEs [21] --> Loop 17 
* CEs [22] --> Loop 18 

#### Loops of eval_append_simple_bb11_in/17 
* Loop 15: eval_append_simple_bb11_in(V_10,V_np1_0,V_i_0,V_129,V_np1_1,B,C,D,E,F,G,H,I,J,K,L,M)->  eval_append_simple_bb11_in(V_10,V_np1_0,V_i_0,V_129,V_np1_1',B,C,D,E,F,G,H,I,J,K,L,M)
                  [V_129>=V_np1_1,V_10>=V_i_0+1,V_np1_1>=V_np1_0,B>=2,4>=B,V_np1_1+1=V_np1_1'] 
* Loop 16: eval_append_simple_bb11_in(A,B,C,D,E,F,A,B,C,D,E,G,H,I,J,K,L) [E>=D+1,A>=C+1,E>=B,F=4] 
* Loop 17: eval_append_simple_bb11_in(A,B,C,D,E,F,A,B,C,D,E,G,H,I,J,K,L) [E>=D+1,A>=C+1,E>=B,F=3] 
* Loop 18: eval_append_simple_bb11_in(V_10,V_np1_0,V_i_0,V_129,V_np1_1,B,C,D,E,F,G,H,I,J,K,L,M) [V_129>=V_np1_1,V_10>=V_i_0+1,V_np1_1>=V_np1_0,B=2] 

### Ranking functions of CR eval_append_simple_bb11_in(V_10,V_np1_0,V_i_0,V_129,V_np1_1,B,C,D,E,F,G,H,I,J,K,L,M) 
* RF of phase [15]: [V_129-V_np1_1+1]

#### Partial ranking functions of CR eval_append_simple_bb11_in(V_10,V_np1_0,V_i_0,V_129,V_np1_1,B,C,D,E,F,G,H,I,J,K,L,M) 
* Partial RF of phase [15]:
  - RF of loop [15:1]:
    V_129-V_np1_1+1


### Resulting Chains:eval_append_simple_bb11_in(V_10,V_np1_0,V_i_0,V_129,V_np1_1,B,C,D,E,F,G,H,I,J,K,L,M) 
* [[15],18]
* [[15],17]
* [[15],16]
* [18]
* [17]
* [16]


### Merging Chains  eval_append_simple_bb11_in/17 into  External patterns of execution 
* [[18],[18,[15]]] --> 1 
* [[17,[15]]] --> 2 
* [[17]] --> 3 
* [[16,[15]]] --> 4 
* [[16]] --> 5 


### Specialization of cost equations eval_append_simple_bb9_in/4 
* CE 8 is refined into CE [24] 
* CE 9 is refined into CE [25,26] 
* CE 10 is refined into CE [27,28] 
* CE 13 is refined into CE [29] 
* CE 11 is refined into CE [30,31] 
* CE 12 is refined into CE [32,33] 


#### Refined cost equations eval_append_simple_bb9_in/4 
* CE 24: eval_append_simple_bb9_in(V_10,V_np1_0,V_i_0,B) = 1+ eval_append_simple_bb11_in(V_10,V_np1_0,V_i_0,C,V_np1_0,D,E,F,G,H,I,J,K,L,M,N,O):1
     [V_10>=V_i_0+1,C>=V_np1_0,D=2,B=2] 
* CE 25: eval_append_simple_bb9_in(V_10,V_np1_0,V_i_0,B) = 1+ eval_append_simple_bb11_in(V_10,V_np1_0,V_i_0,C,V_np1_0,D,V_10,V_np1_0,V_i_0,C,E,F,G,H,I,J,K):4
     [V_10>=V_i_0+1,C>=V_np1_0,C+1=E,D=4,B=2] 
* CE 26: eval_append_simple_bb9_in(V_10,V_np1_0,V_i_0,B) = 1+ eval_append_simple_bb11_in(V_10,V_np1_0,V_i_0,C,V_np1_0,D,V_10,V_np1_0,V_i_0,C,V_np1_0,E,F,G,H,I,J):5
     [V_np1_0>=C+1,V_10>=V_i_0+1,D=4,B=2] 
* CE 27: eval_append_simple_bb9_in(V_10,V_np1_0,V_i_0,B) = 1+ eval_append_simple_bb11_in(V_10,V_np1_0,V_i_0,C,V_np1_0,D,V_10,V_np1_0,V_i_0,C,E,F,G,H,I,J,K):2
     [V_10>=V_i_0+1,C>=V_np1_0,C+1=E,D=3,B=2] 
* CE 28: eval_append_simple_bb9_in(V_10,V_np1_0,V_i_0,B) = 1+ eval_append_simple_bb11_in(V_10,V_np1_0,V_i_0,C,V_np1_0,D,V_10,V_np1_0,V_i_0,C,V_np1_0,E,F,G,H,I,J):3
     [V_np1_0>=C+1,V_10>=V_i_0+1,D=3,B=2] 
* CE 29: eval_append_simple_bb9_in(V_10,V_np1_0,V_i_0,B) = 0
     [V_i_0>=V_10,B=2] 
* CE 30: eval_append_simple_bb9_in(V_10,V_np1_0,V_i_0,B) = 2+ eval_append_simple_bb11_in(V_10,V_np1_0,V_i_0,C,V_np1_0,D,V_10,V_np1_0,V_i_0,C,E,F,G,H,I,J,K):4+ eval_append_simple_bb9_in(V_10,L,M,N)
     [V_10>=V_i_0+1,C>=V_np1_0,V_i_0+1=M,C+1=L,C+1=E,N=2,D=4,B=2] 
* CE 31: eval_append_simple_bb9_in(V_10,V_np1_0,V_i_0,B) = 2+ eval_append_simple_bb11_in(V_10,V_np1_0,V_i_0,C,V_np1_0,D,V_10,V_np1_0,V_i_0,C,V_np1_0,E,F,G,H,I,J):5+ eval_append_simple_bb9_in(V_10,V_np1_0,K,L)
     [V_np1_0>=C+1,V_10>=V_i_0+1,V_i_0+1=K,L=2,D=4,B=2] 
* CE 32: eval_append_simple_bb9_in(V_10,V_np1_0,V_i_0,B) = 2+ eval_append_simple_bb11_in(V_10,V_np1_0,V_i_0,C,V_np1_0,D,V_10,V_np1_0,V_i_0,C,E,F,G,H,I,J,K):2+ eval_append_simple_bb9_in(V_10,L,M,N)
     [V_10>=V_i_0+1,C>=V_np1_0,V_i_0+1=M,C+1=L,C+1=E,N=2,D=3,B=2] 
* CE 33: eval_append_simple_bb9_in(V_10,V_np1_0,V_i_0,B) = 2+ eval_append_simple_bb11_in(V_10,V_np1_0,V_i_0,C,V_np1_0,D,V_10,V_np1_0,V_i_0,C,V_np1_0,E,F,G,H,I,J):3+ eval_append_simple_bb9_in(V_10,V_np1_0,K,L)
     [V_np1_0>=C+1,V_10>=V_i_0+1,V_i_0+1=K,L=2,D=3,B=2] 

### Cost equations --> "Loop" of eval_append_simple_bb9_in/4 
* CEs [30,32] --> Loop 19 
* CEs [31,33] --> Loop 20 
* CEs [24,25,26,27,28] --> Loop 21 
* CEs [29] --> Loop 22 

#### Loops of eval_append_simple_bb9_in/4 
* Loop 19: eval_append_simple_bb9_in(V_10,V_np1_0,V_i_0,B)->  eval_append_simple_bb9_in(V_10,V_np1_0',V_i_0',B')
                  [V_10>=V_i_0+1,V_np1_0'>=V_np1_0+1,V_i_0+1=V_i_0',B'=2,B=2] 
* Loop 20: eval_append_simple_bb9_in(V_10,V_np1_0,V_i_0,B)->  eval_append_simple_bb9_in(V_10,V_np1_0,V_i_0',B')
                  [V_10>=V_i_0+1,V_i_0+1=V_i_0',B'=2,B=2] 
* Loop 21: eval_append_simple_bb9_in(V_10,V_np1_0,V_i_0,B) [V_10>=V_i_0+1,B=2] 
* Loop 22: eval_append_simple_bb9_in(V_10,V_np1_0,V_i_0,B) [V_i_0>=V_10,B=2] 

### Ranking functions of CR eval_append_simple_bb9_in(V_10,V_np1_0,V_i_0,B) 
* RF of phase [19,20]: [V_10-V_i_0]

#### Partial ranking functions of CR eval_append_simple_bb9_in(V_10,V_np1_0,V_i_0,B) 
* Partial RF of phase [19,20]:
  - RF of loop [19:1,20:1]:
    V_10-V_i_0


### Resulting Chains:eval_append_simple_bb9_in(V_10,V_np1_0,V_i_0,B) 
* [[19,20],22]
* [[19,20],21]
* [22]
* [21]


### Merging Chains  eval_append_simple_bb9_in/4 into  External patterns of execution 
* [[22]] --> 1 
* [[21],[21,[19,20]],[22,[19,20]]] --> 2 


### Specialization of cost equations eval_append_simple_49/2 
* CE 7 is refined into CE [34,35] 


#### Refined cost equations eval_append_simple_49/2 
* CE 34: eval_append_simple_49(V_10,B) = 1+ eval_append_simple_bb9_in(V_10,C,D,E):1
     [0>=V_10,E=2,D=0,C=0] 
* CE 35: eval_append_simple_49(V_10,B) = 1+ eval_append_simple_bb9_in(V_10,C,D,E):2
     [V_10>=1,E=2,D=0,C=0] 

### Cost equations --> "Loop" of eval_append_simple_49/2 
* CEs [35] --> Loop 23 
* CEs [34] --> Loop 24 

#### Loops of eval_append_simple_49/2 
* Loop 23: eval_append_simple_49(V_10,B) [V_10>=1] 
* Loop 24: eval_append_simple_49(V_10,B) [0>=V_10] 

### Ranking functions of CR eval_append_simple_49(V_10,B) 

#### Partial ranking functions of CR eval_append_simple_49(V_10,B) 


### Resulting Chains:eval_append_simple_49(V_10,B) 
* [24]
* [23]


### Merging Chains  eval_append_simple_49/2 into  External patterns of execution 
* [[24]] --> 1 
* [[23]] --> 2 


### Specialization of cost equations eval_append_simple_bb0_in/1 
* CE 3 is refined into CE [36] 
* CE 4 is refined into CE [37,38,39,40,41] 


#### Refined cost equations eval_append_simple_bb0_in/1 
* CE 36: eval_append_simple_bb0_in(B) = 0
     [] 
* CE 37: eval_append_simple_bb0_in(B) = 1+ eval_append_simple_bb2_in(C,D,E,C):1+ eval_append_simple_49(C,B):1
     [0>=C,0>=D,E=5] 
* CE 38: eval_append_simple_bb0_in(B) = 1+ eval_append_simple_bb2_in(C,D,E,C):1+ eval_append_simple_49(C,B):2
     [C>=1,0>=D,E=5] 
* CE 39: eval_append_simple_bb0_in(B) = 1+ eval_append_simple_bb2_in(C,D,E,C):2+ eval_append_simple_49(C,B):1
     [D>=1,0>=C,E=5] 
* CE 40: eval_append_simple_bb0_in(B) = 1+ eval_append_simple_bb2_in(C,D,E,C):2+ eval_append_simple_49(C,B):2
     [C>=1,D>=1,E=5] 
* CE 41: eval_append_simple_bb0_in(B) = 1+ eval_append_simple_bb2_in(C,D,E,F):3
     [D>=1,E=5] 

### Cost equations --> "Loop" of eval_append_simple_bb0_in/1 
* CEs [41] --> Loop 25 
* CEs [36,37,38,39,40] --> Loop 26 

#### Loops of eval_append_simple_bb0_in/1 
* Loop 25: eval_append_simple_bb0_in(B) [] 
* Loop 26: eval_append_simple_bb0_in(B) [] 

### Ranking functions of CR eval_append_simple_bb0_in(B) 

#### Partial ranking functions of CR eval_append_simple_bb0_in(B) 


### Resulting Chains:eval_append_simple_bb0_in(B) 
* [26]
* [25]...


### Merging Chains  eval_append_simple_bb0_in/1 into  External patterns of execution 
* [[26]] --> 1 
* [[25]] --> 2 


### Specialization of cost equations eval_append_simple_start/1 
* CE 2 is refined into CE [42,43] 


#### Refined cost equations eval_append_simple_start/1 
* CE 42: eval_append_simple_start(B) = 0+ eval_append_simple_bb0_in(B):1
     [] 
* CE 43: eval_append_simple_start(B) = 0+ eval_append_simple_bb0_in(B):2
     [] 

### Cost equations --> "Loop" of eval_append_simple_start/1 
* CEs [43] --> Loop 27 
* CEs [42] --> Loop 28 

#### Loops of eval_append_simple_start/1 
* Loop 27: eval_append_simple_start(B) [] 
* Loop 28: eval_append_simple_start(B) [] 

### Ranking functions of CR eval_append_simple_start(B) 

#### Partial ranking functions of CR eval_append_simple_start(B) 


### Resulting Chains:eval_append_simple_start(B) 
* [28]
* [27]...


### Merging Chains  eval_append_simple_start/1 into  External patterns of execution 
* [[28]] --> 1 
* [[27]] --> 2 


Computing Bounds
=====================================

#### Cost of loops [13] 

 * loop 13:eval_append_simple_bb2_in(V_10,V_np_0,B,C) -> [eval_append_simple_bb2_in(V_10',V_np_0',B',C')] 
1
#### Cost of phase [13]:eval_append_simple_bb2_in(V_10,V_np_0,B,C) -> [eval_append_simple_bb2_in(V_10',V_np_0',B',C')] 
1*it(13)+0
#### Cost of phase [13]:eval_append_simple_bb2_in(V_10,V_np_0,B,C) -> [eval_append_simple_bb2_in(V_10',V_np_0',B',C')] 
1*it(13)+0
#### Cost of chains of eval_append_simple_bb2_in(V_10,V_np_0,B,C):
* Chain [[13]]...: 1*it(13)+0
  with precondition: [V_np_0>=1,B=5] 

* Chain [[13],14]: 1*it(13)+0
  with precondition: [B=5,V_10=C,V_np_0>=1] 

* Chain [14]: 0
  with precondition: [B=5,C=V_10,0>=V_np_0] 


#### Cost of loops [15] 

 * loop 15:eval_append_simple_bb11_in(V_10,V_np1_0,V_i_0,V_129,V_np1_1,B,C,D,E,F,G,H,I,J,K,L,M) -> [eval_append_simple_bb11_in(V_10',V_np1_0',V_i_0',V_129',V_np1_1',B',C',D',E',F',G',H',I',J',K',L',M')] 
1
#### Cost of phase [15]:eval_append_simple_bb11_in(V_10,V_np1_0,V_i_0,V_129,V_np1_1,B,C,D,E,F,G,H,I,J,K,L,M) -> [eval_append_simple_bb11_in(V_10',V_np1_0',V_i_0',V_129',V_np1_1',B',C',D',E',F',G',H',I',J',K',L',M')] 
1*it(15)+0
  Such that:it(15) =< V_129-V_np1_1+1
it(15) =< V_129-V_np1_1-V_129'+V_np1_1'

#### Cost of phase [15]:eval_append_simple_bb11_in(V_10,V_np1_0,V_i_0,V_129,V_np1_1,B,C,D,E,F,G,H,I,J,K,L,M) -> [eval_append_simple_bb11_in(V_10',V_np1_0',V_i_0',V_129',V_np1_1',B',C',D',E',F',G',H',I',J',K',L',M')] 
1*it(15)+0
  Such that:it(15) =< V_129-V_np1_1+1
it(15) =< V_129-V_np1_1-V_129'+V_np1_1'

#### Cost of phase [15]:eval_append_simple_bb11_in(V_10,V_np1_0,V_i_0,V_129,V_np1_1,B,C,D,E,F,G,H,I,J,K,L,M) -> [eval_append_simple_bb11_in(V_10',V_np1_0',V_i_0',V_129',V_np1_1',B',C',D',E',F',G',H',I',J',K',L',M')] 
1*it(15)+0
  Such that:it(15) =< V_129-V_np1_1+1
it(15) =< V_129-V_np1_1-V_129'+V_np1_1'

#### Cost of chains of eval_append_simple_bb11_in(V_10,V_np1_0,V_i_0,V_129,V_np1_1,B,C,D,E,F,G,H,I,J,K,L,M):
* Chain [[15],18]: 1*it(15)+0
  Such that:it(15) =< V_129-V_np1_1

  with precondition: [B=2,V_np1_1>=V_np1_0,V_10>=V_i_0+1,V_129>=V_np1_1+1] 

* Chain [[15],17]: 1*it(15)+0
  Such that:it(15) =< -V_np1_1+F+1

  with precondition: [B=3,V_10=C,V_np1_0=D,V_i_0=E,V_129=F,V_129+1=G,V_np1_1>=V_np1_0,V_10>=V_i_0+1,V_129>=V_np1_1] 

* Chain [[15],16]: 1*it(15)+0
  Such that:it(15) =< -V_np1_1+F+1

  with precondition: [B=4,V_10=C,V_np1_0=D,V_i_0=E,V_129=F,V_129+1=G,V_np1_1>=V_np1_0,V_10>=V_i_0+1,V_129>=V_np1_1] 

* Chain [18]: 0
  with precondition: [B=2,V_np1_1>=V_np1_0,V_10>=V_i_0+1,V_129>=V_np1_1] 

* Chain [17]: 0
  with precondition: [B=3,V_10=C,V_np1_0=D,V_i_0=E,V_129=F,V_np1_1=G,V_np1_1>=V_np1_0,V_10>=V_i_0+1,V_np1_1>=V_129+1] 

* Chain [16]: 0
  with precondition: [B=4,V_10=C,V_np1_0=D,V_i_0=E,V_129=F,V_np1_1=G,V_np1_1>=V_np1_0,V_10>=V_i_0+1,V_np1_1>=V_129+1] 


#### Cost of loops [19,20] 

 * loop 19:eval_append_simple_bb9_in(V_10,V_np1_0,V_i_0,B) -> [eval_append_simple_bb9_in(V_10',V_np1_0',V_i_0',B')] 
2*s(5)+2
  Such that:s(4) =< -V_np1_0+V_np1_0'
s(5) =< s(4)

 * loop 20:eval_append_simple_bb9_in(V_10,V_np1_0,V_i_0,B) -> [eval_append_simple_bb9_in(V_10',V_np1_0',V_i_0',B')] 
2
#### Cost of phase [19,20]:eval_append_simple_bb9_in(V_10,V_np1_0,V_i_0,B) -> [eval_append_simple_bb9_in(V_10',V_np1_0',V_i_0',B')] 
4*it(19)+2*s(6)+0
  Such that:aux(3) =< V_10-V_i_0
aux(4) =< V_10-V_i_0-V_10'+V_i_0'
it(19) =< aux(3)
it(19) =< aux(4)

#### Cost of phase [19,20]:eval_append_simple_bb9_in(V_10,V_np1_0,V_i_0,B) -> [eval_append_simple_bb9_in(V_10',V_np1_0',V_i_0',B')] 
4*it(19)+2*s(6)+0
  Such that:aux(3) =< V_10-V_i_0
aux(4) =< V_10-V_i_0-V_10'+V_i_0'
it(19) =< aux(3)
it(19) =< aux(4)

#### Cost of chains of eval_append_simple_bb9_in(V_10,V_np1_0,V_i_0,B):
* Chain [[19,20],22]: 4*it(19)+2*s(6)+0
  Such that:aux(5) =< V_10-V_i_0
it(19) =< aux(5)

  with precondition: [B=2,V_np1_0>=0,V_i_0>=0,V_10>=V_i_0+1] 

* Chain [[19,20],21]: 3*aux(6)+4*it(19)+0
  Such that:aux(7) =< V_10-V_i_0
it(19) =< aux(7)

  with precondition: [B=2,V_np1_0>=0,V_i_0>=0,V_10>=V_i_0+2] 

* Chain [22]: 0
  with precondition: [B=2,V_np1_0>=0,V_i_0>=0,V_i_0>=V_10] 

* Chain [21]: 1*aux(6)+0
  with precondition: [B=2,V_np1_0>=0,V_i_0>=0,V_10>=V_i_0+1] 


#### Cost of chains of eval_append_simple_49(V_10,B):
* Chain [24]: 1
  with precondition: [0>=V_10] 

* Chain [23]: 8*s(19)+6*s(20)+1
  Such that:s(18) =< V_10
s(19) =< s(18)

  with precondition: [V_10>=1] 


#### Cost of chains of eval_append_simple_bb0_in(B):
* Chain [26]: 1*aux(9)+0
  with precondition: [] 

* Chain [25]...: 1*s(29)+1
  with precondition: [] 


#### Cost of chains of eval_append_simple_start(B):
* Chain [28]: 1*s(30)+0
  with precondition: [] 

* Chain [27]...: 1*s(31)+1
  with precondition: [] 


Closed-form bounds of eval_append_simple_start(B): 
-------------------------------------
* Chain [28] with precondition: [] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [27]... with precondition: [] 
    - Upper bound: inf 
    - Complexity: infinity 

### Maximum cost of eval_append_simple_start(B): inf 
Asymptotic class: infinity 

Time statistics: 
-------------------------------------
* Partial evaluation computed in 260 ms.
* Invariants computed in 51 ms.
   - Backward Invariants 29 ms.
   - Transitive Invariants 9 ms.
* Refinement performed in 87 ms.
* Termination proved in 8 ms.
* Upper bounds computed in 77 ms.
   - Equation cost structures 27 ms.
   - Phase cost structures 28 ms.
   - Chain cost structures 31 ms.
   - Solving cost expressions 0 ms.
* Total analysis performed in 636 ms.


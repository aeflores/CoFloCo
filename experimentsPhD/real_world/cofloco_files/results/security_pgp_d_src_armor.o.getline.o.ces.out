Warning: Ignored call to eval_getline_stop/1 in equation eval_getline_bb10_in/1 

Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. recursive  : [eval_getline_0/2,eval_getline_1/3,eval_getline_NewDefault_in/3,eval_getline_bb1_in/2]
1. non_recursive  : [eval_getline_bb10_in/1]
2. non_recursive  : [eval_getline_16/1]
3. non_recursive  : [eval_getline_15/2]
4. non_recursive  : [eval_getline_5/1]
5. non_recursive  : [eval_getline_4/2]
6. non_recursive  : [loop_cont_eval_getline_bb1_in/3]
7. non_recursive  : [eval_getline_bb0_in/1]
8. non_recursive  : [eval_getline_start/2]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into eval_getline_bb1_in/2
1. SCC is completely evaluated into other SCCs
2. SCC is completely evaluated into other SCCs
3. SCC is completely evaluated into other SCCs
4. SCC is completely evaluated into other SCCs
5. SCC is completely evaluated into other SCCs
6. SCC is partially evaluated into loop_cont_eval_getline_bb1_in/3
7. SCC is partially evaluated into eval_getline_bb0_in/1
8. SCC is partially evaluated into eval_getline_start/2

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations eval_getline_bb1_in/2 
* CE 4 is refined into CE [13] 
* CE 5 is refined into CE [14] 
* CE 9 is refined into CE [15] 
* CE 8 is refined into CE [16] 
* CE 7 is refined into CE [17] 
* CE 6 is refined into CE [18] 


#### Refined cost equations eval_getline_bb1_in/2 
* CE 13: eval_getline_bb1_in(B,C) = 0
     [C>=11,B=4] 
* CE 14: eval_getline_bb1_in(B,C) = 0
     [9>=C,B=4] 
* CE 15: eval_getline_bb1_in(B,C) = 0
     [C>=11,B=3] 
* CE 16: eval_getline_bb1_in(B,C) = 0
     [9>=C,B=3] 
* CE 17: eval_getline_bb1_in(B,C) = 0
     [B=2] 
* CE 18: eval_getline_bb1_in(B,C) = 1+ eval_getline_bb1_in(B,C)
     [] 

### Cost equations --> "Loop" of eval_getline_bb1_in/2 
* CEs [18] --> Loop 12 
* CEs [13] --> Loop 13 
* CEs [14] --> Loop 14 
* CEs [15] --> Loop 15 
* CEs [16] --> Loop 16 
* CEs [17] --> Loop 17 

#### Loops of eval_getline_bb1_in/2 
* Loop 12: eval_getline_bb1_in(B,C)->  eval_getline_bb1_in(B,C)
                  [] 
* Loop 13: eval_getline_bb1_in(B,C) [C>=11,B=4] 
* Loop 14: eval_getline_bb1_in(B,C) [9>=C,B=4] 
* Loop 15: eval_getline_bb1_in(B,C) [C>=11,B=3] 
* Loop 16: eval_getline_bb1_in(B,C) [9>=C,B=3] 
* Loop 17: eval_getline_bb1_in(B,C) [B=2] 

### Ranking functions of CR eval_getline_bb1_in(B,C) 

#### Partial ranking functions of CR eval_getline_bb1_in(B,C) 


### Resulting Chains:eval_getline_bb1_in(B,C) 
* [[12]]...
* [[12],17]
* [[12],16]
* [[12],15]
* [[12],14]
* [[12],13]
* [17]
* [16]
* [15]
* [14]
* [13]


### Merging Chains  eval_getline_bb1_in/2 into  External patterns of execution 
* [[17],[17,[12]]] --> 1 
* [[16],[16,[12]]] --> 2 
* [[15],[15,[12]]] --> 3 
* [[14],[14,[12]]] --> 4 
* [[13],[13,[12]]] --> 5 
* [[[12]]] --> 6 


### Specialization of cost equations loop_cont_eval_getline_bb1_in/3 
* CE 12 is refined into CE [19] 
* CE 11 is refined into CE [20] 
* CE 10 is refined into CE [21] 


#### Refined cost equations loop_cont_eval_getline_bb1_in/3 
* CE 19: loop_cont_eval_getline_bb1_in(D,A,B) = 0
     [D=4] 
* CE 20: loop_cont_eval_getline_bb1_in(D,A,B) = 0
     [D=3] 
* CE 21: loop_cont_eval_getline_bb1_in(D,A,B) = 0
     [D=2] 

### Cost equations --> "Loop" of loop_cont_eval_getline_bb1_in/3 
* CEs [19] --> Loop 18 
* CEs [20] --> Loop 19 
* CEs [21] --> Loop 20 

#### Loops of loop_cont_eval_getline_bb1_in/3 
* Loop 18: loop_cont_eval_getline_bb1_in(D,A,B) [D=4] 
* Loop 19: loop_cont_eval_getline_bb1_in(D,A,B) [D=3] 
* Loop 20: loop_cont_eval_getline_bb1_in(D,A,B) [D=2] 

### Ranking functions of CR loop_cont_eval_getline_bb1_in(D,A,B) 

#### Partial ranking functions of CR loop_cont_eval_getline_bb1_in(D,A,B) 


### Resulting Chains:loop_cont_eval_getline_bb1_in(D,A,B) 
* [20]
* [19]
* [18]


### Merging Chains  loop_cont_eval_getline_bb1_in/3 into  External patterns of execution 
* [[20]] --> 1 
* [[19]] --> 2 
* [[18]] --> 3 


### Specialization of cost equations eval_getline_bb0_in/1 
* CE 3 is refined into CE [22,23,24,25,26,27] 


#### Refined cost equations eval_getline_bb0_in/1 
* CE 22: eval_getline_bb0_in(B) = 1+ eval_getline_bb1_in(C,D):1+ loop_cont_eval_getline_bb1_in(E,D,B):1
     [E=2,C=2] 
* CE 23: eval_getline_bb0_in(B) = 1+ eval_getline_bb1_in(C,D):2+ loop_cont_eval_getline_bb1_in(E,D,B):2
     [9>=D,E=3,C=3] 
* CE 24: eval_getline_bb0_in(B) = 1+ eval_getline_bb1_in(C,D):3+ loop_cont_eval_getline_bb1_in(E,D,B):2
     [D>=11,E=3,C=3] 
* CE 25: eval_getline_bb0_in(B) = 1+ eval_getline_bb1_in(C,D):4+ loop_cont_eval_getline_bb1_in(E,D,B):3
     [9>=D,E=4,C=4] 
* CE 26: eval_getline_bb0_in(B) = 1+ eval_getline_bb1_in(C,D):5+ loop_cont_eval_getline_bb1_in(E,D,B):3
     [D>=11,E=4,C=4] 
* CE 27: eval_getline_bb0_in(B) = 1+ eval_getline_bb1_in(C,D):6
     [] 

### Cost equations --> "Loop" of eval_getline_bb0_in/1 
* CEs [27] --> Loop 21 
* CEs [22,23,24,25,26] --> Loop 22 

#### Loops of eval_getline_bb0_in/1 
* Loop 21: eval_getline_bb0_in(B) [] 
* Loop 22: eval_getline_bb0_in(B) [] 

### Ranking functions of CR eval_getline_bb0_in(B) 

#### Partial ranking functions of CR eval_getline_bb0_in(B) 


### Resulting Chains:eval_getline_bb0_in(B) 
* [22]
* [21]...


### Merging Chains  eval_getline_bb0_in/1 into  External patterns of execution 
* [[22]] --> 1 
* [[21]] --> 2 


### Specialization of cost equations eval_getline_start/2 
* CE 2 is refined into CE [28,29] 


#### Refined cost equations eval_getline_start/2 
* CE 28: eval_getline_start(V_n,B) = 0+ eval_getline_bb0_in(B):1
     [] 
* CE 29: eval_getline_start(V_n,B) = 0+ eval_getline_bb0_in(B):2
     [] 

### Cost equations --> "Loop" of eval_getline_start/2 
* CEs [29] --> Loop 23 
* CEs [28] --> Loop 24 

#### Loops of eval_getline_start/2 
* Loop 23: eval_getline_start(V_n,B) [] 
* Loop 24: eval_getline_start(V_n,B) [] 

### Ranking functions of CR eval_getline_start(V_n,B) 

#### Partial ranking functions of CR eval_getline_start(V_n,B) 


### Resulting Chains:eval_getline_start(V_n,B) 
* [24]
* [23]...


### Merging Chains  eval_getline_start/2 into  External patterns of execution 
* [[24]] --> 1 
* [[23]] --> 2 


Computing Bounds
=====================================

#### Cost of loops [12] 

 * loop 12:eval_getline_bb1_in(B,C) -> [eval_getline_bb1_in(B',C')] 
1
#### Cost of phase [12]:eval_getline_bb1_in(B,C) -> [eval_getline_bb1_in(B',C')] 
1*it(12)+0
#### Cost of phase [12]:eval_getline_bb1_in(B,C) -> [eval_getline_bb1_in(B',C')] 
1*it(12)+0
#### Cost of phase [12]:eval_getline_bb1_in(B,C) -> [eval_getline_bb1_in(B',C')] 
1*it(12)+0
#### Cost of phase [12]:eval_getline_bb1_in(B,C) -> [eval_getline_bb1_in(B',C')] 
1*it(12)+0
#### Cost of phase [12]:eval_getline_bb1_in(B,C) -> [eval_getline_bb1_in(B',C')] 
1*it(12)+0
#### Cost of phase [12]:eval_getline_bb1_in(B,C) -> [eval_getline_bb1_in(B',C')] 
1*it(12)+0
#### Cost of chains of eval_getline_bb1_in(B,C):
* Chain [[12]]...: 1*it(12)+0
  with precondition: [] 

* Chain [[12],17]: 1*it(12)+0
  with precondition: [B=2] 

* Chain [[12],16]: 1*it(12)+0
  with precondition: [B=3,9>=C] 

* Chain [[12],15]: 1*it(12)+0
  with precondition: [B=3,C>=11] 

* Chain [[12],14]: 1*it(12)+0
  with precondition: [B=4,9>=C] 

* Chain [[12],13]: 1*it(12)+0
  with precondition: [B=4,C>=11] 

* Chain [17]: 0
  with precondition: [B=2] 

* Chain [16]: 0
  with precondition: [B=3,9>=C] 

* Chain [15]: 0
  with precondition: [B=3,C>=11] 

* Chain [14]: 0
  with precondition: [B=4,9>=C] 

* Chain [13]: 0
  with precondition: [B=4,C>=11] 


#### Cost of chains of loop_cont_eval_getline_bb1_in(D,A,B):
* Chain [20]: 0
  with precondition: [D=2] 

* Chain [19]: 0
  with precondition: [D=3] 

* Chain [18]: 0
  with precondition: [D=4] 


#### Cost of chains of eval_getline_bb0_in(B):
* Chain [22]: 1*aux(6)+0
  with precondition: [] 

* Chain [21]...: 1*s(11)+1
  with precondition: [] 


#### Cost of chains of eval_getline_start(V_n,B):
* Chain [24]: 1*s(12)+0
  with precondition: [] 

* Chain [23]...: 1*s(13)+1
  with precondition: [] 


Closed-form bounds of eval_getline_start(V_n,B): 
-------------------------------------
* Chain [24] with precondition: [] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [23]... with precondition: [] 
    - Upper bound: inf 
    - Complexity: infinity 

### Maximum cost of eval_getline_start(V_n,B): inf 
Asymptotic class: infinity 

Time statistics: 
-------------------------------------
* Partial evaluation computed in 13 ms.
* Invariants computed in 8 ms.
   - Backward Invariants 7 ms.
   - Transitive Invariants 0 ms.
* Refinement performed in 16 ms.
* Termination proved in 1 ms.
* Upper bounds computed in 11 ms.
   - Equation cost structures 4 ms.
   - Phase cost structures 2 ms.
   - Chain cost structures 4 ms.
   - Solving cost expressions 0 ms.
* Total analysis performed in 63 ms.


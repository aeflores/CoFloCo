Warning: Ignored call to eval_open_next_stop/1 in equation eval_open_next_bb12_in/1 

Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. recursive  : [eval_open_next_bb1_in/1]
1. non_recursive  : [eval_open_next_bb12_in/1]
2. non_recursive  : [eval_open_next_17/1]
3. non_recursive  : [eval_open_next_16/1]
4. recursive  : [eval_open_next_bb9_in/1]
5. non_recursive  : [eval_open_next_33/1]
6. non_recursive  : [eval_open_next_32/1]
7. non_recursive  : [loop_cont_eval_open_next_bb9_in/2]
8. non_recursive  : [eval_open_next_27/1]
9. non_recursive  : [eval_open_next_26/1]
10. non_recursive  : [eval_open_next_bb8_in/1]
11. non_recursive  : [eval_open_next_23/1]
12. non_recursive  : [eval_open_next_22/1]
13. non_recursive  : [eval_open_next__critedge_in/1]
14. non_recursive  : [loop_cont_eval_open_next_bb1_in/2]
15. non_recursive  : [eval_open_next_2/1]
16. non_recursive  : [eval_open_next_1/1]
17. non_recursive  : [eval_open_next_0/1]
18. non_recursive  : [eval_open_next_bb0_in/1]
19. non_recursive  : [eval_open_next_start/1]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into eval_open_next_bb1_in/1
1. SCC is completely evaluated into other SCCs
2. SCC is completely evaluated into other SCCs
3. SCC is completely evaluated into other SCCs
4. SCC is partially evaluated into eval_open_next_bb9_in/1
5. SCC is completely evaluated into other SCCs
6. SCC is completely evaluated into other SCCs
7. SCC is completely evaluated into other SCCs
8. SCC is partially evaluated into eval_open_next_27/1
9. SCC is completely evaluated into other SCCs
10. SCC is completely evaluated into other SCCs
11. SCC is partially evaluated into eval_open_next_23/1
12. SCC is completely evaluated into other SCCs
13. SCC is partially evaluated into eval_open_next__critedge_in/1
14. SCC is partially evaluated into loop_cont_eval_open_next_bb1_in/2
15. SCC is partially evaluated into eval_open_next_2/1
16. SCC is completely evaluated into other SCCs
17. SCC is completely evaluated into other SCCs
18. SCC is completely evaluated into other SCCs
19. SCC is partially evaluated into eval_open_next_start/1

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations eval_open_next_bb1_in/1 
* CE 6 is refined into CE [16] 
* CE 4 is refined into CE [17] 
* CE 5 is refined into CE [18] 


#### Refined cost equations eval_open_next_bb1_in/1 
* CE 16: eval_open_next_bb1_in(B) = 0
     [B=4] 
* CE 17: eval_open_next_bb1_in(B) = 0
     [B=3] 
* CE 18: eval_open_next_bb1_in(B) = 1+ eval_open_next_bb1_in(B)
     [] 

### Cost equations --> "Loop" of eval_open_next_bb1_in/1 
* CEs [18] --> Loop 13 
* CEs [16] --> Loop 14 
* CEs [17] --> Loop 15 

#### Loops of eval_open_next_bb1_in/1 
* Loop 13: eval_open_next_bb1_in(B)->  eval_open_next_bb1_in(B)
                  [] 
* Loop 14: eval_open_next_bb1_in(B) [B=4] 
* Loop 15: eval_open_next_bb1_in(B) [B=3] 

### Ranking functions of CR eval_open_next_bb1_in(B) 

#### Partial ranking functions of CR eval_open_next_bb1_in(B) 


### Resulting Chains:eval_open_next_bb1_in(B) 
* [[13]]...
* [[13],15]
* [[13],14]
* [15]
* [14]


### Merging Chains  eval_open_next_bb1_in/1 into  External patterns of execution 
* [[15],[15,[13]]] --> 1 
* [[14],[14,[13]]] --> 2 
* [[[13]]] --> 3 


### Specialization of cost equations eval_open_next_bb9_in/1 
* CE 15 is refined into CE [19] 
* CE 14 is refined into CE [20] 


#### Refined cost equations eval_open_next_bb9_in/1 
* CE 19: eval_open_next_bb9_in(B) = 0
     [B=2] 
* CE 20: eval_open_next_bb9_in(B) = 1+ eval_open_next_bb9_in(C)
     [C=2,B=2] 

### Cost equations --> "Loop" of eval_open_next_bb9_in/1 
* CEs [20] --> Loop 16 
* CEs [19] --> Loop 17 

#### Loops of eval_open_next_bb9_in/1 
* Loop 16: eval_open_next_bb9_in(B)->  eval_open_next_bb9_in(B')
                  [B'=2,B=2] 
* Loop 17: eval_open_next_bb9_in(B) [B=2] 

### Ranking functions of CR eval_open_next_bb9_in(B) 

#### Partial ranking functions of CR eval_open_next_bb9_in(B) 


### Resulting Chains:eval_open_next_bb9_in(B) 
* [[16]]...
* [[16],17]
* [17]


### Merging Chains  eval_open_next_bb9_in/1 into  External patterns of execution 
* [[17],[17,[16]]] --> 1 
* [[[16]]] --> 2 


### Specialization of cost equations eval_open_next_27/1 
* CE 13 is refined into CE [21,22] 


#### Refined cost equations eval_open_next_27/1 
* CE 21: eval_open_next_27(B) = 1+ eval_open_next_bb9_in(C):1
     [C=2] 
* CE 22: eval_open_next_27(B) = 1+ eval_open_next_bb9_in(C):2
     [C=2] 

### Cost equations --> "Loop" of eval_open_next_27/1 
* CEs [22] --> Loop 18 
* CEs [21] --> Loop 19 

#### Loops of eval_open_next_27/1 
* Loop 18: eval_open_next_27(B) [] 
* Loop 19: eval_open_next_27(B) [] 

### Ranking functions of CR eval_open_next_27(B) 

#### Partial ranking functions of CR eval_open_next_27(B) 


### Resulting Chains:eval_open_next_27(B) 
* [19]
* [18]...


### Merging Chains  eval_open_next_27/1 into  External patterns of execution 
* [[19]] --> 1 
* [[18]] --> 2 


### Specialization of cost equations eval_open_next_23/1 
* CE 11 is refined into CE [23] 
* CE 12 is refined into CE [24,25] 


#### Refined cost equations eval_open_next_23/1 
* CE 23: eval_open_next_23(B) = 0
     [] 
* CE 24: eval_open_next_23(B) = 0+ eval_open_next_27(B):1
     [] 
* CE 25: eval_open_next_23(B) = 0+ eval_open_next_27(B):2
     [] 

### Cost equations --> "Loop" of eval_open_next_23/1 
* CEs [25] --> Loop 20 
* CEs [23,24] --> Loop 21 

#### Loops of eval_open_next_23/1 
* Loop 20: eval_open_next_23(B) [] 
* Loop 21: eval_open_next_23(B) [] 

### Ranking functions of CR eval_open_next_23(B) 

#### Partial ranking functions of CR eval_open_next_23(B) 


### Resulting Chains:eval_open_next_23(B) 
* [21]
* [20]...


### Merging Chains  eval_open_next_23/1 into  External patterns of execution 
* [[21]] --> 1 
* [[20]] --> 2 


### Specialization of cost equations eval_open_next__critedge_in/1 
* CE 9 is refined into CE [26,27] 
* CE 10 is refined into CE [28,29] 


#### Refined cost equations eval_open_next__critedge_in/1 
* CE 26: eval_open_next__critedge_in(B) = 0+ eval_open_next_23(B):1
     [] 
* CE 27: eval_open_next__critedge_in(B) = 0+ eval_open_next_23(B):2
     [] 
* CE 28: eval_open_next__critedge_in(B) = 0+ eval_open_next_27(B):1
     [] 
* CE 29: eval_open_next__critedge_in(B) = 0+ eval_open_next_27(B):2
     [] 

### Cost equations --> "Loop" of eval_open_next__critedge_in/1 
* CEs [27,29] --> Loop 22 
* CEs [26,28] --> Loop 23 

#### Loops of eval_open_next__critedge_in/1 
* Loop 22: eval_open_next__critedge_in(B) [] 
* Loop 23: eval_open_next__critedge_in(B) [] 

### Ranking functions of CR eval_open_next__critedge_in(B) 

#### Partial ranking functions of CR eval_open_next__critedge_in(B) 


### Resulting Chains:eval_open_next__critedge_in(B) 
* [23]
* [22]...


### Merging Chains  eval_open_next__critedge_in/1 into  External patterns of execution 
* [[23]] --> 1 
* [[22]] --> 2 


### Specialization of cost equations loop_cont_eval_open_next_bb1_in/2 
* CE 8 is refined into CE [30,31] 
* CE 7 is refined into CE [32] 


#### Refined cost equations loop_cont_eval_open_next_bb1_in/2 
* CE 30: loop_cont_eval_open_next_bb1_in(B,A) = 0+ eval_open_next__critedge_in(A):1
     [B=4] 
* CE 31: loop_cont_eval_open_next_bb1_in(B,A) = 0+ eval_open_next__critedge_in(A):2
     [B=4] 
* CE 32: loop_cont_eval_open_next_bb1_in(B,A) = 0
     [B=3] 

### Cost equations --> "Loop" of loop_cont_eval_open_next_bb1_in/2 
* CEs [30] --> Loop 24 
* CEs [32] --> Loop 25 
* CEs [31] --> Loop 26 

#### Loops of loop_cont_eval_open_next_bb1_in/2 
* Loop 24: loop_cont_eval_open_next_bb1_in(B,A) [B=4] 
* Loop 25: loop_cont_eval_open_next_bb1_in(B,A) [B=3] 
* Loop 26: loop_cont_eval_open_next_bb1_in(B,A) [B=4] 

### Ranking functions of CR loop_cont_eval_open_next_bb1_in(B,A) 

#### Partial ranking functions of CR loop_cont_eval_open_next_bb1_in(B,A) 


### Resulting Chains:loop_cont_eval_open_next_bb1_in(B,A) 
* [26]...
* [25]
* [24]


### Merging Chains  loop_cont_eval_open_next_bb1_in/2 into  External patterns of execution 
* [[25]] --> 1 
* [[24]] --> 2 
* [[26]] --> 3 


### Specialization of cost equations eval_open_next_2/1 
* CE 3 is refined into CE [33,34,35,36] 


#### Refined cost equations eval_open_next_2/1 
* CE 33: eval_open_next_2(B) = 1+ eval_open_next_bb1_in(C):1+ loop_cont_eval_open_next_bb1_in(D,B):1
     [D=3,C=3] 
* CE 34: eval_open_next_2(B) = 1+ eval_open_next_bb1_in(C):2+ loop_cont_eval_open_next_bb1_in(D,B):2
     [D=4,C=4] 
* CE 35: eval_open_next_2(B) = 1+ eval_open_next_bb1_in(C):2+ loop_cont_eval_open_next_bb1_in(D,B):3
     [D=4,C=4] 
* CE 36: eval_open_next_2(B) = 1+ eval_open_next_bb1_in(C):3
     [] 

### Cost equations --> "Loop" of eval_open_next_2/1 
* CEs [35,36] --> Loop 27 
* CEs [33,34] --> Loop 28 

#### Loops of eval_open_next_2/1 
* Loop 27: eval_open_next_2(B) [] 
* Loop 28: eval_open_next_2(B) [] 

### Ranking functions of CR eval_open_next_2(B) 

#### Partial ranking functions of CR eval_open_next_2(B) 


### Resulting Chains:eval_open_next_2(B) 
* [28]
* [27]...


### Merging Chains  eval_open_next_2/1 into  External patterns of execution 
* [[28]] --> 1 
* [[27]] --> 2 


### Specialization of cost equations eval_open_next_start/1 
* CE 2 is refined into CE [37,38] 


#### Refined cost equations eval_open_next_start/1 
* CE 37: eval_open_next_start(B) = 0+ eval_open_next_2(B):1
     [] 
* CE 38: eval_open_next_start(B) = 0+ eval_open_next_2(B):2
     [] 

### Cost equations --> "Loop" of eval_open_next_start/1 
* CEs [38] --> Loop 29 
* CEs [37] --> Loop 30 

#### Loops of eval_open_next_start/1 
* Loop 29: eval_open_next_start(B) [] 
* Loop 30: eval_open_next_start(B) [] 

### Ranking functions of CR eval_open_next_start(B) 

#### Partial ranking functions of CR eval_open_next_start(B) 


### Resulting Chains:eval_open_next_start(B) 
* [30]
* [29]...


### Merging Chains  eval_open_next_start/1 into  External patterns of execution 
* [[30]] --> 1 
* [[29]] --> 2 


Computing Bounds
=====================================

#### Cost of loops [13] 

 * loop 13:eval_open_next_bb1_in(B) -> [eval_open_next_bb1_in(B')] 
1
#### Cost of phase [13]:eval_open_next_bb1_in(B) -> [eval_open_next_bb1_in(B')] 
1*it(13)+0
#### Cost of phase [13]:eval_open_next_bb1_in(B) -> [eval_open_next_bb1_in(B')] 
1*it(13)+0
#### Cost of phase [13]:eval_open_next_bb1_in(B) -> [eval_open_next_bb1_in(B')] 
1*it(13)+0
#### Cost of chains of eval_open_next_bb1_in(B):
* Chain [[13]]...: 1*it(13)+0
  with precondition: [] 

* Chain [[13],15]: 1*it(13)+0
  with precondition: [B=3] 

* Chain [[13],14]: 1*it(13)+0
  with precondition: [B=4] 

* Chain [15]: 0
  with precondition: [B=3] 

* Chain [14]: 0
  with precondition: [B=4] 


#### Cost of loops [16] 

 * loop 16:eval_open_next_bb9_in(B) -> [eval_open_next_bb9_in(B')] 
1
#### Cost of phase [16]:eval_open_next_bb9_in(B) -> [eval_open_next_bb9_in(B')] 
1*it(16)+0
#### Cost of phase [16]:eval_open_next_bb9_in(B) -> [eval_open_next_bb9_in(B')] 
1*it(16)+0
#### Cost of chains of eval_open_next_bb9_in(B):
* Chain [[16]]...: 1*it(16)+0
  with precondition: [B=2] 

* Chain [[16],17]: 1*it(16)+0
  with precondition: [B=2] 

* Chain [17]: 0
  with precondition: [B=2] 


#### Cost of chains of eval_open_next_27(B):
* Chain [19]: 1*s(4)+1
  with precondition: [] 

* Chain [18]...: 1*s(5)+1
  with precondition: [] 


#### Cost of chains of eval_open_next_23(B):
* Chain [21]: 1*aux(4)+0
  with precondition: [] 

* Chain [20]...: 1*s(7)+1
  with precondition: [] 


#### Cost of chains of eval_open_next__critedge_in(B):
* Chain [23]: 1*aux(5)+0
  with precondition: [] 

* Chain [22]...: 1*aux(6)+0
  with precondition: [] 


#### Cost of chains of loop_cont_eval_open_next_bb1_in(B,A):
* Chain [26]...: 1*s(12)+0
  with precondition: [B=4] 

* Chain [25]: 0
  with precondition: [B=3] 

* Chain [24]: 1*s(13)+0
  with precondition: [B=4] 


#### Cost of chains of eval_open_next_2(B):
* Chain [28]: 1*aux(7)+0
  with precondition: [] 

* Chain [27]...: 1*aux(8)+0
  with precondition: [] 


#### Cost of chains of eval_open_next_start(B):
* Chain [30]: 1*s(20)+0
  with precondition: [] 

* Chain [29]...: 1*s(21)+0
  with precondition: [] 


Closed-form bounds of eval_open_next_start(B): 
-------------------------------------
* Chain [30] with precondition: [] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [29]... with precondition: [] 
    - Upper bound: inf 
    - Complexity: infinity 

### Maximum cost of eval_open_next_start(B): inf 
Asymptotic class: infinity 

Time statistics: 
-------------------------------------
* Partial evaluation computed in 18 ms.
* Invariants computed in 17 ms.
   - Backward Invariants 9 ms.
   - Transitive Invariants 2 ms.
* Refinement performed in 44 ms.
* Termination proved in 3 ms.
* Upper bounds computed in 33 ms.
   - Equation cost structures 15 ms.
   - Phase cost structures 4 ms.
   - Chain cost structures 9 ms.
   - Solving cost expressions 0 ms.
* Total analysis performed in 156 ms.


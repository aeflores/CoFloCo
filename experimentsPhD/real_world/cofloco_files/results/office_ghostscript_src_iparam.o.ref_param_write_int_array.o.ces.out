Warning: Ignored call to eval_ref_param_write_int_array_stop/1 in equation eval_ref_param_write_int_array_bb5_in/1 

Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. recursive  : [eval_ref_param_write_int_array_bb2_in/2]
1. non_recursive  : [eval_ref_param_write_int_array_bb5_in/1]
2. non_recursive  : [eval_ref_param_write_int_array_14/1]
3. non_recursive  : [eval_ref_param_write_int_array_13/1]
4. non_recursive  : [loop_cont_eval_ref_param_write_int_array_bb2_in/2]
5. non_recursive  : [eval_ref_param_write_int_array_2/2]
6. non_recursive  : [eval_ref_param_write_int_array_1/2]
7. non_recursive  : [eval_ref_param_write_int_array_bb0_in/1]
8. non_recursive  : [eval_ref_param_write_int_array_start/1]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into eval_ref_param_write_int_array_bb2_in/2
1. SCC is completely evaluated into other SCCs
2. SCC is completely evaluated into other SCCs
3. SCC is completely evaluated into other SCCs
4. SCC is completely evaluated into other SCCs
5. SCC is partially evaluated into eval_ref_param_write_int_array_2/2
6. SCC is completely evaluated into other SCCs
7. SCC is completely evaluated into other SCCs
8. SCC is partially evaluated into eval_ref_param_write_int_array_start/1

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations eval_ref_param_write_int_array_bb2_in/2 
* CE 6 is refined into CE [7] 
* CE 5 is refined into CE [8] 


#### Refined cost equations eval_ref_param_write_int_array_bb2_in/2 
* CE 7: eval_ref_param_write_int_array_bb2_in(V_n_0,B) = 0
     [0>=V_n_0,B=2] 
* CE 8: eval_ref_param_write_int_array_bb2_in(V_n_0,B) = 1+ eval_ref_param_write_int_array_bb2_in(C,D)
     [V_n_0>=1,V_n_0=C+1,D=2,B=2] 

### Cost equations --> "Loop" of eval_ref_param_write_int_array_bb2_in/2 
* CEs [8] --> Loop 5 
* CEs [7] --> Loop 6 

#### Loops of eval_ref_param_write_int_array_bb2_in/2 
* Loop 5: eval_ref_param_write_int_array_bb2_in(V_n_0,B)->  eval_ref_param_write_int_array_bb2_in(V_n_0',B')
                  [V_n_0>=1,V_n_0=V_n_0'+1,B'=2,B=2] 
* Loop 6: eval_ref_param_write_int_array_bb2_in(V_n_0,B) [0>=V_n_0,B=2] 

### Ranking functions of CR eval_ref_param_write_int_array_bb2_in(V_n_0,B) 
* RF of phase [5]: [V_n_0]

#### Partial ranking functions of CR eval_ref_param_write_int_array_bb2_in(V_n_0,B) 
* Partial RF of phase [5]:
  - RF of loop [5:1]:
    V_n_0


### Resulting Chains:eval_ref_param_write_int_array_bb2_in(V_n_0,B) 
* [[5],6]
* [6]


### Merging Chains  eval_ref_param_write_int_array_bb2_in/2 into  External patterns of execution 
* [[6]] --> 1 
* [[6,[5]]] --> 2 


### Specialization of cost equations eval_ref_param_write_int_array_2/2 
* CE 3 is refined into CE [9] 
* CE 4 is refined into CE [10,11] 


#### Refined cost equations eval_ref_param_write_int_array_2/2 
* CE 9: eval_ref_param_write_int_array_2(V_3,B) = 0
     [] 
* CE 10: eval_ref_param_write_int_array_2(V_3,B) = 1+ eval_ref_param_write_int_array_bb2_in(V_3,C):1
     [0>=V_3,C=2] 
* CE 11: eval_ref_param_write_int_array_2(V_3,B) = 1+ eval_ref_param_write_int_array_bb2_in(V_3,C):2
     [V_3>=1,C=2] 

### Cost equations --> "Loop" of eval_ref_param_write_int_array_2/2 
* CEs [9,10,11] --> Loop 7 

#### Loops of eval_ref_param_write_int_array_2/2 
* Loop 7: eval_ref_param_write_int_array_2(V_3,B) [] 

### Ranking functions of CR eval_ref_param_write_int_array_2(V_3,B) 

#### Partial ranking functions of CR eval_ref_param_write_int_array_2(V_3,B) 


### Resulting Chains:eval_ref_param_write_int_array_2(V_3,B) 
* [7]


### Merging Chains  eval_ref_param_write_int_array_2/2 into  External patterns of execution 
* [[7]] --> 1 


### Specialization of cost equations eval_ref_param_write_int_array_start/1 
* CE 2 is refined into CE [12] 


#### Refined cost equations eval_ref_param_write_int_array_start/1 
* CE 12: eval_ref_param_write_int_array_start(B) = 0+ eval_ref_param_write_int_array_2(C,B):1
     [] 

### Cost equations --> "Loop" of eval_ref_param_write_int_array_start/1 
* CEs [12] --> Loop 8 

#### Loops of eval_ref_param_write_int_array_start/1 
* Loop 8: eval_ref_param_write_int_array_start(B) [] 

### Ranking functions of CR eval_ref_param_write_int_array_start(B) 

#### Partial ranking functions of CR eval_ref_param_write_int_array_start(B) 


### Resulting Chains:eval_ref_param_write_int_array_start(B) 
* [8]


### Merging Chains  eval_ref_param_write_int_array_start/1 into  External patterns of execution 
* [[8]] --> 1 


Computing Bounds
=====================================

#### Cost of loops [5] 

 * loop 5:eval_ref_param_write_int_array_bb2_in(V_n_0,B) -> [eval_ref_param_write_int_array_bb2_in(V_n_0',B')] 
1
#### Cost of phase [5]:eval_ref_param_write_int_array_bb2_in(V_n_0,B) -> [eval_ref_param_write_int_array_bb2_in(V_n_0',B')] 
1*it(5)+0
  Such that:it(5) =< V_n_0
it(5) =< V_n_0-V_n_0'

#### Cost of chains of eval_ref_param_write_int_array_bb2_in(V_n_0,B):
* Chain [[5],6]: 1*it(5)+0
  Such that:it(5) =< V_n_0

  with precondition: [B=2,V_n_0>=1] 

* Chain [6]: 0
  with precondition: [B=2,0>=V_n_0] 


#### Cost of chains of eval_ref_param_write_int_array_2(V_3,B):
* Chain [7]: 1*s(1)+1
  Such that:s(1) =< V_3

  with precondition: [] 


#### Cost of chains of eval_ref_param_write_int_array_start(B):
* Chain [8]: 1*s(2)+1
  with precondition: [] 


Closed-form bounds of eval_ref_param_write_int_array_start(B): 
-------------------------------------
* Chain [8] with precondition: [] 
    - Upper bound: inf 
    - Complexity: infinity 

### Maximum cost of eval_ref_param_write_int_array_start(B): inf 
Asymptotic class: infinity 

Time statistics: 
-------------------------------------
* Partial evaluation computed in 10 ms.
* Invariants computed in 11 ms.
   - Backward Invariants 4 ms.
   - Transitive Invariants 3 ms.
* Refinement performed in 21 ms.
* Termination proved in 4 ms.
* Upper bounds computed in 18 ms.
   - Equation cost structures 7 ms.
   - Phase cost structures 5 ms.
   - Chain cost structures 5 ms.
   - Solving cost expressions 1 ms.
* Total analysis performed in 90 ms.


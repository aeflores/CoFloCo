Warning: Ignored call to eval_lame_encode_finish_stop/1 in equation eval_lame_encode_finish_bb11_in/1 

Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. recursive  : [eval_lame_encode_finish_6/12,eval_lame_encode_finish_7/13,eval_lame_encode_finish_bb1_in/11]
1. non_recursive  : [eval_lame_encode_finish_bb11_in/1]
2. non_recursive  : [eval_lame_encode_finish_38/1]
3. non_recursive  : [eval_lame_encode_finish_37/2]
4. non_recursive  : [eval_lame_encode_finish_41/1]
5. non_recursive  : [eval_lame_encode_finish_40/2]
6. non_recursive  : [eval_lame_encode_finish_36/2]
7. non_recursive  : [eval_lame_encode_finish_35/3]
8. non_recursive  : [eval_lame_encode_finish_33/4]
9. non_recursive  : [eval_lame_encode_finish_32/4]
10. non_recursive  : [eval_lame_encode_finish_bb8_in/4]
11. non_recursive  : [eval_lame_encode_finish_31/4]
12. non_recursive  : [eval_lame_encode_finish_30/4]
13. non_recursive  : [eval_lame_encode_finish_29/4]
14. non_recursive  : [eval_lame_encode_finish_28/8]
15. non_recursive  : [eval_lame_encode_finish_9/1]
16. non_recursive  : [eval_lame_encode_finish_8/2]
17. non_recursive  : [loop_cont_eval_lame_encode_finish_bb1_in/9]
18. non_recursive  : [eval_lame_encode_finish_1/3]
19. non_recursive  : [eval_lame_encode_finish_0/3]
20. non_recursive  : [eval_lame_encode_finish_bb0_in/3]
21. non_recursive  : [eval_lame_encode_finish_start/3]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into eval_lame_encode_finish_bb1_in/11
1. SCC is completely evaluated into other SCCs
2. SCC is completely evaluated into other SCCs
3. SCC is completely evaluated into other SCCs
4. SCC is completely evaluated into other SCCs
5. SCC is completely evaluated into other SCCs
6. SCC is partially evaluated into eval_lame_encode_finish_36/2
7. SCC is completely evaluated into other SCCs
8. SCC is partially evaluated into eval_lame_encode_finish_33/4
9. SCC is completely evaluated into other SCCs
10. SCC is completely evaluated into other SCCs
11. SCC is completely evaluated into other SCCs
12. SCC is completely evaluated into other SCCs
13. SCC is completely evaluated into other SCCs
14. SCC is completely evaluated into other SCCs
15. SCC is completely evaluated into other SCCs
16. SCC is completely evaluated into other SCCs
17. SCC is partially evaluated into loop_cont_eval_lame_encode_finish_bb1_in/9
18. SCC is partially evaluated into eval_lame_encode_finish_1/3
19. SCC is completely evaluated into other SCCs
20. SCC is completely evaluated into other SCCs
21. SCC is partially evaluated into eval_lame_encode_finish_start/3

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations eval_lame_encode_finish_bb1_in/11 
* CE 7 is refined into CE [13] 
* CE 6 is refined into CE [14] 
* CE 5 is refined into CE [15] 
* CE 4 is refined into CE [16] 


#### Refined cost equations eval_lame_encode_finish_bb1_in/11 
* CE 13: eval_lame_encode_finish_bb1_in(A,B,C,D,A,E,C,F,G,H,I) = 0
     [0>=B,D=4] 
* CE 14: eval_lame_encode_finish_bb1_in(A,B,C,D,A,E,C,F,G,H,I) = 0
     [0>=B,D=3] 
* CE 15: eval_lame_encode_finish_bb1_in(A,B,C,D,B,E,F,G,H,I,J) = 0
     [B>=1,D=2] 
* CE 16: eval_lame_encode_finish_bb1_in(V_mp3buffer_size,V__mf_samples_to_encode,V_mp3count_0,B,C,D,E,F,G,H,I) = 1+ eval_lame_encode_finish_bb1_in(V_mp3buffer_size,J,K,B,C,D,E,F,G,H,I)
     [V__mf_samples_to_encode>=1] 

### Cost equations --> "Loop" of eval_lame_encode_finish_bb1_in/11 
* CEs [16] --> Loop 12 
* CEs [13] --> Loop 13 
* CEs [14] --> Loop 14 
* CEs [15] --> Loop 15 

#### Loops of eval_lame_encode_finish_bb1_in/11 
* Loop 12: eval_lame_encode_finish_bb1_in(V_mp3buffer_size,V__mf_samples_to_encode,V_mp3count_0,B,C,D,E,F,G,H,I)->  eval_lame_encode_finish_bb1_in(V_mp3buffer_size,V__mf_samples_to_encode',V_mp3count_0',B,C,D,E,F,G,H,I)
                  [V__mf_samples_to_encode>=1] 
* Loop 13: eval_lame_encode_finish_bb1_in(A,B,C,D,A,E,C,F,G,H,I) [0>=B,D=4] 
* Loop 14: eval_lame_encode_finish_bb1_in(A,B,C,D,A,E,C,F,G,H,I) [0>=B,D=3] 
* Loop 15: eval_lame_encode_finish_bb1_in(A,B,C,D,B,E,F,G,H,I,J) [B>=1,D=2] 

### Ranking functions of CR eval_lame_encode_finish_bb1_in(V_mp3buffer_size,V__mf_samples_to_encode,V_mp3count_0,B,C,D,E,F,G,H,I) 

#### Partial ranking functions of CR eval_lame_encode_finish_bb1_in(V_mp3buffer_size,V__mf_samples_to_encode,V_mp3count_0,B,C,D,E,F,G,H,I) 


### Resulting Chains:eval_lame_encode_finish_bb1_in(V_mp3buffer_size,V__mf_samples_to_encode,V_mp3count_0,B,C,D,E,F,G,H,I) 
* [[12]]...
* [[12],15]
* [[12],14]
* [[12],13]
* [15]
* [14]
* [13]


### Merging Chains  eval_lame_encode_finish_bb1_in/11 into  External patterns of execution 
* [[15],[15,[12]]] --> 1 
* [[14]] --> 2 
* [[14,[12]]] --> 3 
* [[13]] --> 4 
* [[13,[12]]] --> 5 
* [[[12]]] --> 6 


### Specialization of cost equations eval_lame_encode_finish_36/2 
* CE 12 is refined into CE [17] 


#### Refined cost equations eval_lame_encode_finish_36/2 
* CE 17: eval_lame_encode_finish_36(V__mf_samples_to_encode,B) = 0
     [] 

### Cost equations --> "Loop" of eval_lame_encode_finish_36/2 
* CEs [17] --> Loop 16 

#### Loops of eval_lame_encode_finish_36/2 
* Loop 16: eval_lame_encode_finish_36(V__mf_samples_to_encode,B) [] 

### Ranking functions of CR eval_lame_encode_finish_36(V__mf_samples_to_encode,B) 

#### Partial ranking functions of CR eval_lame_encode_finish_36(V__mf_samples_to_encode,B) 


### Resulting Chains:eval_lame_encode_finish_36(V__mf_samples_to_encode,B) 
* [16]


### Merging Chains  eval_lame_encode_finish_36/2 into  External patterns of execution 
* [[16]] --> 1 


### Specialization of cost equations eval_lame_encode_finish_33/4 
* CE 11 is refined into CE [18] 


#### Refined cost equations eval_lame_encode_finish_33/4 
* CE 18: eval_lame_encode_finish_33(V_mp3buffer_size,V__mf_samples_to_encode,V_mp3count_0,B) = 0+ eval_lame_encode_finish_36(V__mf_samples_to_encode,B):1
     [] 

### Cost equations --> "Loop" of eval_lame_encode_finish_33/4 
* CEs [18] --> Loop 17 

#### Loops of eval_lame_encode_finish_33/4 
* Loop 17: eval_lame_encode_finish_33(V_mp3buffer_size,V__mf_samples_to_encode,V_mp3count_0,B) [] 

### Ranking functions of CR eval_lame_encode_finish_33(V_mp3buffer_size,V__mf_samples_to_encode,V_mp3count_0,B) 

#### Partial ranking functions of CR eval_lame_encode_finish_33(V_mp3buffer_size,V__mf_samples_to_encode,V_mp3count_0,B) 


### Resulting Chains:eval_lame_encode_finish_33(V_mp3buffer_size,V__mf_samples_to_encode,V_mp3count_0,B) 
* [17]


### Merging Chains  eval_lame_encode_finish_33/4 into  External patterns of execution 
* [[17]] --> 1 


### Specialization of cost equations loop_cont_eval_lame_encode_finish_bb1_in/9 
* CE 10 is refined into CE [19] 
* CE 9 is refined into CE [20] 
* CE 8 is refined into CE [21] 


#### Refined cost equations loop_cont_eval_lame_encode_finish_bb1_in/9 
* CE 19: loop_cont_eval_lame_encode_finish_bb1_in(I,A,B,C,D,E,F,G,H) = 0+ eval_lame_encode_finish_33(A,B,C,H):1
     [I=4] 
* CE 20: loop_cont_eval_lame_encode_finish_bb1_in(I,A,B,C,D,E,F,G,H) = 0+ eval_lame_encode_finish_33(A,B,C,H):1
     [I=3] 
* CE 21: loop_cont_eval_lame_encode_finish_bb1_in(I,A,B,C,D,E,F,G,H) = 0
     [I=2] 

### Cost equations --> "Loop" of loop_cont_eval_lame_encode_finish_bb1_in/9 
* CEs [19] --> Loop 18 
* CEs [20] --> Loop 19 
* CEs [21] --> Loop 20 

#### Loops of loop_cont_eval_lame_encode_finish_bb1_in/9 
* Loop 18: loop_cont_eval_lame_encode_finish_bb1_in(I,A,B,C,D,E,F,G,H) [I=4] 
* Loop 19: loop_cont_eval_lame_encode_finish_bb1_in(I,A,B,C,D,E,F,G,H) [I=3] 
* Loop 20: loop_cont_eval_lame_encode_finish_bb1_in(I,A,B,C,D,E,F,G,H) [I=2] 

### Ranking functions of CR loop_cont_eval_lame_encode_finish_bb1_in(I,A,B,C,D,E,F,G,H) 

#### Partial ranking functions of CR loop_cont_eval_lame_encode_finish_bb1_in(I,A,B,C,D,E,F,G,H) 


### Resulting Chains:loop_cont_eval_lame_encode_finish_bb1_in(I,A,B,C,D,E,F,G,H) 
* [20]
* [19]
* [18]


### Merging Chains  loop_cont_eval_lame_encode_finish_bb1_in/9 into  External patterns of execution 
* [[20]] --> 1 
* [[19]] --> 2 
* [[18]] --> 3 


### Specialization of cost equations eval_lame_encode_finish_1/3 
* CE 3 is refined into CE [22,23,24,25,26,27] 


#### Refined cost equations eval_lame_encode_finish_1/3 
* CE 22: eval_lame_encode_finish_1(V_mp3buffer_size,V__mf_samples_to_encode,B) = 1+ eval_lame_encode_finish_bb1_in(V_mp3buffer_size,V__mf_samples_to_encode,C,D,E,F,G,H,I,J,K):1+ loop_cont_eval_lame_encode_finish_bb1_in(L,E,F,G,H,I,J,K,B):1
     [E>=1,V__mf_samples_to_encode>=1,L=2,D=2,C=0] 
* CE 23: eval_lame_encode_finish_1(V_mp3buffer_size,V__mf_samples_to_encode,B) = 1+ eval_lame_encode_finish_bb1_in(V_mp3buffer_size,V__mf_samples_to_encode,C,D,V_mp3buffer_size,E,F,G,H,I,J):2+ loop_cont_eval_lame_encode_finish_bb1_in(K,V_mp3buffer_size,E,L,G,H,I,J,B):2
     [0>=V__mf_samples_to_encode,L=0,K=3,F=0,D=3,C=0] 
* CE 24: eval_lame_encode_finish_1(V_mp3buffer_size,V__mf_samples_to_encode,B) = 1+ eval_lame_encode_finish_bb1_in(V_mp3buffer_size,V__mf_samples_to_encode,C,D,V_mp3buffer_size,E,F,G,H,I,J):3+ loop_cont_eval_lame_encode_finish_bb1_in(K,V_mp3buffer_size,E,F,G,H,I,J,B):2
     [V__mf_samples_to_encode>=1,K=3,D=3,C=0] 
* CE 25: eval_lame_encode_finish_1(V_mp3buffer_size,V__mf_samples_to_encode,B) = 1+ eval_lame_encode_finish_bb1_in(V_mp3buffer_size,V__mf_samples_to_encode,C,D,V_mp3buffer_size,E,F,G,H,I,J):4+ loop_cont_eval_lame_encode_finish_bb1_in(K,V_mp3buffer_size,E,L,G,H,I,J,B):3
     [0>=V__mf_samples_to_encode,L=0,K=4,F=0,D=4,C=0] 
* CE 26: eval_lame_encode_finish_1(V_mp3buffer_size,V__mf_samples_to_encode,B) = 1+ eval_lame_encode_finish_bb1_in(V_mp3buffer_size,V__mf_samples_to_encode,C,D,V_mp3buffer_size,E,F,G,H,I,J):5+ loop_cont_eval_lame_encode_finish_bb1_in(K,V_mp3buffer_size,E,F,G,H,I,J,B):3
     [V__mf_samples_to_encode>=1,K=4,D=4,C=0] 
* CE 27: eval_lame_encode_finish_1(V_mp3buffer_size,V__mf_samples_to_encode,B) = 1+ eval_lame_encode_finish_bb1_in(V_mp3buffer_size,V__mf_samples_to_encode,C,D,E,F,G,H,I,J,K):6
     [V__mf_samples_to_encode>=1,C=0] 

### Cost equations --> "Loop" of eval_lame_encode_finish_1/3 
* CEs [27] --> Loop 21 
* CEs [22,24,26] --> Loop 22 
* CEs [23,25] --> Loop 23 

#### Loops of eval_lame_encode_finish_1/3 
* Loop 21: eval_lame_encode_finish_1(V_mp3buffer_size,V__mf_samples_to_encode,B) [V__mf_samples_to_encode>=1] 
* Loop 22: eval_lame_encode_finish_1(V_mp3buffer_size,V__mf_samples_to_encode,B) [V__mf_samples_to_encode>=1] 
* Loop 23: eval_lame_encode_finish_1(V_mp3buffer_size,V__mf_samples_to_encode,B) [0>=V__mf_samples_to_encode] 

### Ranking functions of CR eval_lame_encode_finish_1(V_mp3buffer_size,V__mf_samples_to_encode,B) 

#### Partial ranking functions of CR eval_lame_encode_finish_1(V_mp3buffer_size,V__mf_samples_to_encode,B) 


### Resulting Chains:eval_lame_encode_finish_1(V_mp3buffer_size,V__mf_samples_to_encode,B) 
* [23]
* [22]
* [21]...


### Merging Chains  eval_lame_encode_finish_1/3 into  External patterns of execution 
* [[23]] --> 1 
* [[22]] --> 2 
* [[21]] --> 3 


### Specialization of cost equations eval_lame_encode_finish_start/3 
* CE 2 is refined into CE [28,29,30] 


#### Refined cost equations eval_lame_encode_finish_start/3 
* CE 28: eval_lame_encode_finish_start(V_mp3buffer_size,V__mf_samples_to_encode,B) = 0+ eval_lame_encode_finish_1(V_mp3buffer_size,V__mf_samples_to_encode,B):1
     [0>=V__mf_samples_to_encode] 
* CE 29: eval_lame_encode_finish_start(V_mp3buffer_size,V__mf_samples_to_encode,B) = 0+ eval_lame_encode_finish_1(V_mp3buffer_size,V__mf_samples_to_encode,B):2
     [V__mf_samples_to_encode>=1] 
* CE 30: eval_lame_encode_finish_start(V_mp3buffer_size,V__mf_samples_to_encode,B) = 0+ eval_lame_encode_finish_1(V_mp3buffer_size,V__mf_samples_to_encode,B):3
     [V__mf_samples_to_encode>=1] 

### Cost equations --> "Loop" of eval_lame_encode_finish_start/3 
* CEs [30] --> Loop 24 
* CEs [29] --> Loop 25 
* CEs [28] --> Loop 26 

#### Loops of eval_lame_encode_finish_start/3 
* Loop 24: eval_lame_encode_finish_start(V_mp3buffer_size,V__mf_samples_to_encode,B) [V__mf_samples_to_encode>=1] 
* Loop 25: eval_lame_encode_finish_start(V_mp3buffer_size,V__mf_samples_to_encode,B) [V__mf_samples_to_encode>=1] 
* Loop 26: eval_lame_encode_finish_start(V_mp3buffer_size,V__mf_samples_to_encode,B) [0>=V__mf_samples_to_encode] 

### Ranking functions of CR eval_lame_encode_finish_start(V_mp3buffer_size,V__mf_samples_to_encode,B) 

#### Partial ranking functions of CR eval_lame_encode_finish_start(V_mp3buffer_size,V__mf_samples_to_encode,B) 


### Resulting Chains:eval_lame_encode_finish_start(V_mp3buffer_size,V__mf_samples_to_encode,B) 
* [26]
* [25]
* [24]...


### Merging Chains  eval_lame_encode_finish_start/3 into  External patterns of execution 
* [[26]] --> 1 
* [[25]] --> 2 
* [[24]] --> 3 


Computing Bounds
=====================================

#### Cost of loops [12] 

 * loop 12:eval_lame_encode_finish_bb1_in(V_mp3buffer_size,V__mf_samples_to_encode,V_mp3count_0,B,C,D,E,F,G,H,I) -> [eval_lame_encode_finish_bb1_in(V_mp3buffer_size',V__mf_samples_to_encode',V_mp3count_0',B',C',D',E',F',G',H',I')] 
1
#### Cost of phase [12]:eval_lame_encode_finish_bb1_in(V_mp3buffer_size,V__mf_samples_to_encode,V_mp3count_0,B,C,D,E,F,G,H,I) -> [eval_lame_encode_finish_bb1_in(V_mp3buffer_size',V__mf_samples_to_encode',V_mp3count_0',B',C',D',E',F',G',H',I')] 
1*it(12)+0
#### Cost of phase [12]:eval_lame_encode_finish_bb1_in(V_mp3buffer_size,V__mf_samples_to_encode,V_mp3count_0,B,C,D,E,F,G,H,I) -> [eval_lame_encode_finish_bb1_in(V_mp3buffer_size',V__mf_samples_to_encode',V_mp3count_0',B',C',D',E',F',G',H',I')] 
1*it(12)+0
#### Cost of phase [12]:eval_lame_encode_finish_bb1_in(V_mp3buffer_size,V__mf_samples_to_encode,V_mp3count_0,B,C,D,E,F,G,H,I) -> [eval_lame_encode_finish_bb1_in(V_mp3buffer_size',V__mf_samples_to_encode',V_mp3count_0',B',C',D',E',F',G',H',I')] 
1*it(12)+0
#### Cost of phase [12]:eval_lame_encode_finish_bb1_in(V_mp3buffer_size,V__mf_samples_to_encode,V_mp3count_0,B,C,D,E,F,G,H,I) -> [eval_lame_encode_finish_bb1_in(V_mp3buffer_size',V__mf_samples_to_encode',V_mp3count_0',B',C',D',E',F',G',H',I')] 
1*it(12)+0
#### Cost of chains of eval_lame_encode_finish_bb1_in(V_mp3buffer_size,V__mf_samples_to_encode,V_mp3count_0,B,C,D,E,F,G,H,I):
* Chain [[12]]...: 1*it(12)+0
  with precondition: [V__mf_samples_to_encode>=1] 

* Chain [[12],15]: 1*it(12)+0
  with precondition: [B=2,V__mf_samples_to_encode>=1,C>=1] 

* Chain [[12],14]: 1*it(12)+0
  with precondition: [B=3,V_mp3buffer_size=C,V__mf_samples_to_encode>=1] 

* Chain [[12],13]: 1*it(12)+0
  with precondition: [B=4,V_mp3buffer_size=C,V__mf_samples_to_encode>=1] 

* Chain [15]: 0
  with precondition: [B=2,V__mf_samples_to_encode=C,V__mf_samples_to_encode>=1] 

* Chain [14]: 0
  with precondition: [B=3,C=V_mp3buffer_size,E=V_mp3count_0,0>=V__mf_samples_to_encode] 

* Chain [13]: 0
  with precondition: [B=4,C=V_mp3buffer_size,E=V_mp3count_0,0>=V__mf_samples_to_encode] 


#### Cost of chains of eval_lame_encode_finish_36(V__mf_samples_to_encode,B):
* Chain [16]: 0
  with precondition: [] 


#### Cost of chains of eval_lame_encode_finish_33(V_mp3buffer_size,V__mf_samples_to_encode,V_mp3count_0,B):
* Chain [17]: 0
  with precondition: [] 


#### Cost of chains of loop_cont_eval_lame_encode_finish_bb1_in(I,A,B,C,D,E,F,G,H):
* Chain [20]: 0
  with precondition: [I=2] 

* Chain [19]: 0
  with precondition: [I=3] 

* Chain [18]: 0
  with precondition: [I=4] 


#### Cost of chains of eval_lame_encode_finish_1(V_mp3buffer_size,V__mf_samples_to_encode,B):
* Chain [23]: 1
  with precondition: [0>=V__mf_samples_to_encode] 

* Chain [22]: 1*aux(2)+0
  with precondition: [V__mf_samples_to_encode>=1] 

* Chain [21]...: 1*s(5)+1
  with precondition: [V__mf_samples_to_encode>=1] 


#### Cost of chains of eval_lame_encode_finish_start(V_mp3buffer_size,V__mf_samples_to_encode,B):
* Chain [26]: 1
  with precondition: [0>=V__mf_samples_to_encode] 

* Chain [25]: 1*s(6)+0
  with precondition: [V__mf_samples_to_encode>=1] 

* Chain [24]...: 1*s(7)+1
  with precondition: [V__mf_samples_to_encode>=1] 


Closed-form bounds of eval_lame_encode_finish_start(V_mp3buffer_size,V__mf_samples_to_encode,B): 
-------------------------------------
* Chain [26] with precondition: [0>=V__mf_samples_to_encode] 
    - Upper bound: 1 
    - Complexity: constant 
* Chain [25] with precondition: [V__mf_samples_to_encode>=1] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [24]... with precondition: [V__mf_samples_to_encode>=1] 
    - Upper bound: inf 
    - Complexity: infinity 

### Maximum cost of eval_lame_encode_finish_start(V_mp3buffer_size,V__mf_samples_to_encode,B): inf 
Asymptotic class: infinity 

Time statistics: 
-------------------------------------
* Partial evaluation computed in 95 ms.
* Invariants computed in 48 ms.
   - Backward Invariants 32 ms.
   - Transitive Invariants 6 ms.
* Refinement performed in 136 ms.
* Termination proved in 5 ms.
* Upper bounds computed in 81 ms.
   - Equation cost structures 39 ms.
   - Phase cost structures 11 ms.
   - Chain cost structures 29 ms.
   - Solving cost expressions 1 ms.
* Total analysis performed in 457 ms.


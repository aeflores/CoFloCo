Warning: Ignored call to eval_LZWDecode_stop/1 in equation eval_LZWDecode_164/1 
Warning: Ignored call to eval_LZWDecode_stop/1 in equation eval_LZWDecode_179/1 
Warning: Ignored call to eval_LZWDecode_stop/1 in equation eval_LZWDecode_bb52_in/1 

Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. non_recursive  : [eval_LZWDecode_179/1]
1. non_recursive  : [eval_LZWDecode_178/1]
2. recursive  : [eval_LZWDecode_bb44_in/5]
3. recursive  : [eval_LZWDecode_38/4,eval_LZWDecode_39/4,eval_LZWDecode_68/5,eval_LZWDecode_69/5,eval_LZWDecode_bb12_in/3,eval_LZWDecode_bb17_in/3,eval_LZWDecode_bb18_in/4,eval_LZWDecode_bb24_in/4,eval_LZWDecode_bb25_in/5,eval_LZWDecode_bb32_in/4,eval_LZWDecode_bb34_in/4,loop_cont_eval_LZWDecode_bb44_in/4]
4. non_recursive  : [eval_LZWDecode_bb52_in/1]
5. non_recursive  : [eval_LZWDecode_177/1]
6. non_recursive  : [eval_LZWDecode_176/3]
7. non_recursive  : [eval_LZWDecode_bb50_in/2]
8. non_recursive  : [eval_LZWDecode_154/2]
9. non_recursive  : [eval_LZWDecode_153/2]
10. recursive  : [eval_LZWDecode_bb37_in/3]
11. non_recursive  : [eval_LZWDecode_164/1]
12. non_recursive  : [eval_LZWDecode_163/1]
13. non_recursive  : [eval_LZWDecode_bb49_in/1]
14. recursive  : [eval_LZWDecode_bb40_in/3]
15. non_recursive  : [eval_LZWDecode_143/2]
16. non_recursive  : [eval_LZWDecode_142/2]
17. non_recursive  : [loop_cont_eval_LZWDecode_bb40_in/3]
18. non_recursive  : [loop_cont_eval_LZWDecode_bb37_in/3]
19. non_recursive  : [loop_cont_eval_LZWDecode_bb12_in/3]
20. non_recursive  : [eval_LZWDecode_bb11_in/2]
21. recursive  : [eval_LZWDecode_bb4_in/4]
22. recursive  : [eval_LZWDecode_bb9_in/4]
23. recursive  : [eval_LZWDecode_bb7_in/2]
24. non_recursive  : [loop_cont_eval_LZWDecode_bb7_in/2]
25. non_recursive  : [loop_cont_eval_LZWDecode_bb4_in/3]
26. non_recursive  : [loop_cont_eval_LZWDecode_bb9_in/3]
27. non_recursive  : [eval_LZWDecode_bb0_in/2]
28. non_recursive  : [eval_LZWDecode_start/3]

#### Obtained direct recursion through partial evaluation 
0. SCC is completely evaluated into other SCCs
1. SCC is completely evaluated into other SCCs
2. SCC is partially evaluated into eval_LZWDecode_bb44_in/5
3. SCC is partially evaluated into eval_LZWDecode_bb12_in/3
4. SCC is completely evaluated into other SCCs
5. SCC is completely evaluated into other SCCs
6. SCC is completely evaluated into other SCCs
7. SCC is partially evaluated into eval_LZWDecode_bb50_in/2
8. SCC is completely evaluated into other SCCs
9. SCC is completely evaluated into other SCCs
10. SCC is partially evaluated into eval_LZWDecode_bb37_in/3
11. SCC is completely evaluated into other SCCs
12. SCC is completely evaluated into other SCCs
13. SCC is completely evaluated into other SCCs
14. SCC is partially evaluated into eval_LZWDecode_bb40_in/3
15. SCC is completely evaluated into other SCCs
16. SCC is completely evaluated into other SCCs
17. SCC is partially evaluated into loop_cont_eval_LZWDecode_bb40_in/3
18. SCC is partially evaluated into loop_cont_eval_LZWDecode_bb37_in/3
19. SCC is partially evaluated into loop_cont_eval_LZWDecode_bb12_in/3
20. SCC is partially evaluated into eval_LZWDecode_bb11_in/2
21. SCC is partially evaluated into eval_LZWDecode_bb4_in/4
22. SCC is partially evaluated into eval_LZWDecode_bb9_in/4
23. SCC is partially evaluated into eval_LZWDecode_bb7_in/2
24. SCC is completely evaluated into other SCCs
25. SCC is partially evaluated into loop_cont_eval_LZWDecode_bb4_in/3
26. SCC is completely evaluated into other SCCs
27. SCC is partially evaluated into eval_LZWDecode_bb0_in/2
28. SCC is partially evaluated into eval_LZWDecode_start/3

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations eval_LZWDecode_bb44_in/5 
* CE 32 is refined into CE [45] 
* CE 31 is refined into CE [46] 
* CE 30 is refined into CE [47] 


#### Refined cost equations eval_LZWDecode_bb44_in/5 
* CE 45: eval_LZWDecode_bb44_in(V_occ_2,V_91,V_225,B,C) = 0
     [V_occ_2>=1,V_occ_2=V_225+C,B=3] 
* CE 46: eval_LZWDecode_bb44_in(A,B,C,D,A) = 0
     [A>=1,D=2] 
* CE 47: eval_LZWDecode_bb44_in(V_occ_2,V_91,V_225,B,C) = 1+ eval_LZWDecode_bb44_in(V_occ_2,V_91,V_225,B,C)
     [B>=2,V_occ_2>=1,3>=B] 

### Cost equations --> "Loop" of eval_LZWDecode_bb44_in/5 
* CEs [47] --> Loop 40 
* CEs [45] --> Loop 41 
* CEs [46] --> Loop 42 

#### Loops of eval_LZWDecode_bb44_in/5 
* Loop 40: eval_LZWDecode_bb44_in(V_occ_2,V_91,V_225,B,C)->  eval_LZWDecode_bb44_in(V_occ_2,V_91,V_225,B,C)
                  [B>=2,V_occ_2>=1,3>=B] 
* Loop 41: eval_LZWDecode_bb44_in(V_occ_2,V_91,V_225,B,C) [V_occ_2>=1,V_occ_2=V_225+C,B=3] 
* Loop 42: eval_LZWDecode_bb44_in(A,B,C,D,A) [A>=1,D=2] 

### Ranking functions of CR eval_LZWDecode_bb44_in(V_occ_2,V_91,V_225,B,C) 

#### Partial ranking functions of CR eval_LZWDecode_bb44_in(V_occ_2,V_91,V_225,B,C) 


### Resulting Chains:eval_LZWDecode_bb44_in(V_occ_2,V_91,V_225,B,C) 
* [[40]]...
* [[40],42]
* [[40],41]
* [42]
* [41]


### Merging Chains  eval_LZWDecode_bb44_in/5 into  External patterns of execution 
* [[42],[42,[40]]] --> 1 
* [[41],[41,[40]]] --> 2 
* [[[40]]] --> 3 


### Specialization of cost equations eval_LZWDecode_bb12_in/3 
* CE 23 is refined into CE [48] 
* CE 19 is refined into CE [49] 
* CE 20 is refined into CE [50] 
* CE 25 is refined into CE [51] 
* CE 22 is refined into CE [52,53] 
* CE 21 is refined into CE [54,55] 
* CE 24 is refined into CE [56] 


#### Refined cost equations eval_LZWDecode_bb12_in/3 
* CE 48: eval_LZWDecode_bb12_in(A,B,A) = 0
     [A>=1,B=11] 
* CE 49: eval_LZWDecode_bb12_in(V_occ_2,B,C) = 0
     [V_occ_2>=1,B=10] 
* CE 50: eval_LZWDecode_bb12_in(A,B,A) = 0
     [A>=1,B=8] 
* CE 51: eval_LZWDecode_bb12_in(A,B,A) = 0
     [0>=A,B=8] 
* CE 52: eval_LZWDecode_bb12_in(A,B,A) = 1+ eval_LZWDecode_bb44_in(A,C,D,E,A):1
     [A>=1,E=2,B=2] 
* CE 53: eval_LZWDecode_bb12_in(V_occ_2,B,C) = 1+ eval_LZWDecode_bb44_in(V_occ_2,D,E,F,C):3
     [V_occ_2>=1,F=2,B=2] 
* CE 54: eval_LZWDecode_bb12_in(V_occ_2,B,C) = 2+ eval_LZWDecode_bb44_in(D,E,F,G,H):2+ eval_LZWDecode_bb12_in(H,B,C)
     [F+H>=1,F+H=D,F+H=V_occ_2,G=3] 
* CE 55: eval_LZWDecode_bb12_in(V_occ_2,B,C) = 2+ eval_LZWDecode_bb44_in(V_occ_2,D,E,F,G):3
     [V_occ_2>=1,F=3] 
* CE 56: eval_LZWDecode_bb12_in(V_occ_2,B,C) = 1+ eval_LZWDecode_bb12_in(D,B,C)
     [V_occ_2>=1,V_occ_2=D+1] 

### Cost equations --> "Loop" of eval_LZWDecode_bb12_in/3 
* CEs [54,56] --> Loop 43 
* CEs [53,55] --> Loop 44 
* CEs [48] --> Loop 45 
* CEs [49] --> Loop 46 
* CEs [50] --> Loop 47 
* CEs [51] --> Loop 48 
* CEs [52] --> Loop 49 

#### Loops of eval_LZWDecode_bb12_in/3 
* Loop 43: eval_LZWDecode_bb12_in(V_occ_2,B,C)->  eval_LZWDecode_bb12_in(V_occ_2',B,C)
                  [V_occ_2>=1] 
* Loop 44: eval_LZWDecode_bb12_in(V_occ_2,B,C) [V_occ_2>=1] 
* Loop 45: eval_LZWDecode_bb12_in(A,B,A) [A>=1,B=11] 
* Loop 46: eval_LZWDecode_bb12_in(V_occ_2,B,C) [V_occ_2>=1,B=10] 
* Loop 47: eval_LZWDecode_bb12_in(A,B,A) [A>=1,B=8] 
* Loop 48: eval_LZWDecode_bb12_in(A,B,A) [0>=A,B=8] 
* Loop 49: eval_LZWDecode_bb12_in(A,B,A) [A>=1,B=2] 

### Ranking functions of CR eval_LZWDecode_bb12_in(V_occ_2,B,C) 

#### Partial ranking functions of CR eval_LZWDecode_bb12_in(V_occ_2,B,C) 


### Resulting Chains:eval_LZWDecode_bb12_in(V_occ_2,B,C) 
* [[43]]...
* [[43],49]
* [[43],48]
* [[43],47]
* [[43],46]
* [[43],45]
* [[43],44]...
* [49]
* [48]
* [47]
* [46]
* [45]
* [44]...


### Merging Chains  eval_LZWDecode_bb12_in/3 into  External patterns of execution 
* [[49],[49,[43]]] --> 1 
* [[48]] --> 2 
* [[47],[47,[43]]] --> 3 
* [[48,[43]]] --> 4 
* [[46],[46,[43]]] --> 5 
* [[45],[45,[43]]] --> 6 
* [[44],[[43]],[44,[43]]] --> 7 


### Specialization of cost equations eval_LZWDecode_bb50_in/2 
* CE 33 is refined into CE [57] 


#### Refined cost equations eval_LZWDecode_bb50_in/2 
* CE 57: eval_LZWDecode_bb50_in(V_occ_6,B) = 0
     [] 

### Cost equations --> "Loop" of eval_LZWDecode_bb50_in/2 
* CEs [57] --> Loop 50 

#### Loops of eval_LZWDecode_bb50_in/2 
* Loop 50: eval_LZWDecode_bb50_in(V_occ_6,B) [] 

### Ranking functions of CR eval_LZWDecode_bb50_in(V_occ_6,B) 

#### Partial ranking functions of CR eval_LZWDecode_bb50_in(V_occ_6,B) 


### Resulting Chains:eval_LZWDecode_bb50_in(V_occ_6,B) 
* [50]


### Merging Chains  eval_LZWDecode_bb50_in/2 into  External patterns of execution 
* [[50]] --> 1 


### Specialization of cost equations eval_LZWDecode_bb37_in/3 
* CE 36 is refined into CE [58] 
* CE 34 is refined into CE [59] 
* CE 35 is refined into CE [60] 


#### Refined cost equations eval_LZWDecode_bb37_in/3 
* CE 58: eval_LZWDecode_bb37_in(A,B,A) = 0
     [B=9] 
* CE 59: eval_LZWDecode_bb37_in(A,B,A) = 0
     [B=8] 
* CE 60: eval_LZWDecode_bb37_in(V_occ_2,B,C) = 1+ eval_LZWDecode_bb37_in(V_occ_2,B,C)
     [] 

### Cost equations --> "Loop" of eval_LZWDecode_bb37_in/3 
* CEs [60] --> Loop 51 
* CEs [58] --> Loop 52 
* CEs [59] --> Loop 53 

#### Loops of eval_LZWDecode_bb37_in/3 
* Loop 51: eval_LZWDecode_bb37_in(V_occ_2,B,C)->  eval_LZWDecode_bb37_in(V_occ_2,B,C)
                  [] 
* Loop 52: eval_LZWDecode_bb37_in(A,B,A) [B=9] 
* Loop 53: eval_LZWDecode_bb37_in(A,B,A) [B=8] 

### Ranking functions of CR eval_LZWDecode_bb37_in(V_occ_2,B,C) 

#### Partial ranking functions of CR eval_LZWDecode_bb37_in(V_occ_2,B,C) 


### Resulting Chains:eval_LZWDecode_bb37_in(V_occ_2,B,C) 
* [[51]]...
* [[51],53]
* [[51],52]
* [53]
* [52]


### Merging Chains  eval_LZWDecode_bb37_in/3 into  External patterns of execution 
* [[53],[53,[51]]] --> 1 
* [[52],[52,[51]]] --> 2 
* [[[51]]] --> 3 


### Specialization of cost equations eval_LZWDecode_bb40_in/3 
* CE 42 is refined into CE [61] 
* CE 41 is refined into CE [62] 
* CE 40 is refined into CE [63] 
* CE 39 is refined into CE [64] 


#### Refined cost equations eval_LZWDecode_bb40_in/3 
* CE 61: eval_LZWDecode_bb40_in(V_occ_3,B,C) = 0
     [C+1=V_occ_3,B=8] 
* CE 62: eval_LZWDecode_bb40_in(V_occ_3,B,C) = 0
     [C+1=V_occ_3,B=7] 
* CE 63: eval_LZWDecode_bb40_in(V_occ_3,B,C) = 1+ eval_LZWDecode_bb40_in(D,B,C)
     [V_occ_3>=2,V_occ_3=D+1] 
* CE 64: eval_LZWDecode_bb40_in(V_occ_3,B,C) = 1+ eval_LZWDecode_bb40_in(D,B,C)
     [0>=V_occ_3,V_occ_3=D+1] 

### Cost equations --> "Loop" of eval_LZWDecode_bb40_in/3 
* CEs [63] --> Loop 54 
* CEs [64] --> Loop 55 
* CEs [61] --> Loop 56 
* CEs [62] --> Loop 57 

#### Loops of eval_LZWDecode_bb40_in/3 
* Loop 54: eval_LZWDecode_bb40_in(V_occ_3,B,C)->  eval_LZWDecode_bb40_in(V_occ_3',B,C)
                  [V_occ_3>=2,V_occ_3=V_occ_3'+1] 
* Loop 55: eval_LZWDecode_bb40_in(V_occ_3,B,C)->  eval_LZWDecode_bb40_in(V_occ_3',B,C)
                  [0>=V_occ_3,V_occ_3=V_occ_3'+1] 
* Loop 56: eval_LZWDecode_bb40_in(V_occ_3,B,C) [V_occ_3=C+1,B=8] 
* Loop 57: eval_LZWDecode_bb40_in(V_occ_3,B,C) [V_occ_3=C+1,B=7] 

### Ranking functions of CR eval_LZWDecode_bb40_in(V_occ_3,B,C) 
* RF of phase [54]: [V_occ_3-1]

#### Partial ranking functions of CR eval_LZWDecode_bb40_in(V_occ_3,B,C) 
* Partial RF of phase [54]:
  - RF of loop [54:1]:
    V_occ_3-1


### Resulting Chains:eval_LZWDecode_bb40_in(V_occ_3,B,C) 
* [[55]]...
* [[55],57]
* [[55],56]
* [[54],57]
* [[54],56]
* [57]
* [56]


### Merging Chains  eval_LZWDecode_bb40_in/3 into  External patterns of execution 
* [[57]] --> 1 
* [[57,[55]]] --> 2 
* [[57,[54]]] --> 3 
* [[56]] --> 4 
* [[56,[55]]] --> 5 
* [[56,[54]]] --> 6 
* [[[55]]] --> 7 


### Specialization of cost equations loop_cont_eval_LZWDecode_bb40_in/3 
* CE 44 is refined into CE [65] 
* CE 43 is refined into CE [66] 


#### Refined cost equations loop_cont_eval_LZWDecode_bb40_in/3 
* CE 65: loop_cont_eval_LZWDecode_bb40_in(D,A,B) = 0+ eval_LZWDecode_bb50_in(A,B):1
     [D=8] 
* CE 66: loop_cont_eval_LZWDecode_bb40_in(D,A,B) = 0+ eval_LZWDecode_bb50_in(A,B):1
     [D=7] 

### Cost equations --> "Loop" of loop_cont_eval_LZWDecode_bb40_in/3 
* CEs [65] --> Loop 58 
* CEs [66] --> Loop 59 

#### Loops of loop_cont_eval_LZWDecode_bb40_in/3 
* Loop 58: loop_cont_eval_LZWDecode_bb40_in(D,A,B) [D=8] 
* Loop 59: loop_cont_eval_LZWDecode_bb40_in(D,A,B) [D=7] 

### Ranking functions of CR loop_cont_eval_LZWDecode_bb40_in(D,A,B) 

#### Partial ranking functions of CR loop_cont_eval_LZWDecode_bb40_in(D,A,B) 


### Resulting Chains:loop_cont_eval_LZWDecode_bb40_in(D,A,B) 
* [59]
* [58]


### Merging Chains  loop_cont_eval_LZWDecode_bb40_in/3 into  External patterns of execution 
* [[59]] --> 1 
* [[58]] --> 2 


### Specialization of cost equations loop_cont_eval_LZWDecode_bb37_in/3 
* CE 38 is refined into CE [67,68,69,70,71,72,73] 
* CE 37 is refined into CE [74] 


#### Refined cost equations loop_cont_eval_LZWDecode_bb37_in/3 
* CE 67: loop_cont_eval_LZWDecode_bb37_in(C,A,B) = 1+ eval_LZWDecode_bb40_in(D,E,F):1+ loop_cont_eval_LZWDecode_bb40_in(G,F,B):1
     [F+1=D,F+1=A,G=7,E=7,C=9] 
* CE 68: loop_cont_eval_LZWDecode_bb37_in(C,A,B) = 1+ eval_LZWDecode_bb40_in(A,D,E):2+ loop_cont_eval_LZWDecode_bb40_in(F,E,B):1
     [A>=E+2,0>=A,F=7,D=7,C=9] 
* CE 69: loop_cont_eval_LZWDecode_bb37_in(C,A,B) = 1+ eval_LZWDecode_bb40_in(A,D,E):3+ loop_cont_eval_LZWDecode_bb40_in(F,E,B):1
     [A>=E+2,E>=0,F=7,D=7,C=9] 
* CE 70: loop_cont_eval_LZWDecode_bb37_in(C,A,B) = 1+ eval_LZWDecode_bb40_in(D,E,F):4+ loop_cont_eval_LZWDecode_bb40_in(G,F,B):2
     [F+1=D,F+1=A,G=8,E=8,C=9] 
* CE 71: loop_cont_eval_LZWDecode_bb37_in(C,A,B) = 1+ eval_LZWDecode_bb40_in(A,D,E):5+ loop_cont_eval_LZWDecode_bb40_in(F,E,B):2
     [A>=E+2,0>=A,F=8,D=8,C=9] 
* CE 72: loop_cont_eval_LZWDecode_bb37_in(C,A,B) = 1+ eval_LZWDecode_bb40_in(A,D,E):6+ loop_cont_eval_LZWDecode_bb40_in(F,E,B):2
     [A>=E+2,E>=0,F=8,D=8,C=9] 
* CE 73: loop_cont_eval_LZWDecode_bb37_in(C,A,B) = 1+ eval_LZWDecode_bb40_in(A,D,E):7
     [0>=A,C=9] 
* CE 74: loop_cont_eval_LZWDecode_bb37_in(C,A,B) = 0+ eval_LZWDecode_bb50_in(A,B):1
     [C=8] 

### Cost equations --> "Loop" of loop_cont_eval_LZWDecode_bb37_in/3 
* CEs [67,68,69,70,71,72] --> Loop 60 
* CEs [74] --> Loop 61 
* CEs [73] --> Loop 62 

#### Loops of loop_cont_eval_LZWDecode_bb37_in/3 
* Loop 60: loop_cont_eval_LZWDecode_bb37_in(C,A,B) [C=9] 
* Loop 61: loop_cont_eval_LZWDecode_bb37_in(C,A,B) [C=8] 
* Loop 62: loop_cont_eval_LZWDecode_bb37_in(C,A,B) [0>=A,C=9] 

### Ranking functions of CR loop_cont_eval_LZWDecode_bb37_in(C,A,B) 

#### Partial ranking functions of CR loop_cont_eval_LZWDecode_bb37_in(C,A,B) 


### Resulting Chains:loop_cont_eval_LZWDecode_bb37_in(C,A,B) 
* [62]...
* [61]
* [60]


### Merging Chains  loop_cont_eval_LZWDecode_bb37_in/3 into  External patterns of execution 
* [[61]] --> 1 
* [[60]] --> 2 
* [[62]] --> 3 


### Specialization of cost equations loop_cont_eval_LZWDecode_bb12_in/3 
* CE 28 is refined into CE [75,76,77,78] 
* CE 27 is refined into CE [79] 
* CE 26 is refined into CE [80] 
* CE 29 is refined into CE [81] 


#### Refined cost equations loop_cont_eval_LZWDecode_bb12_in/3 
* CE 75: loop_cont_eval_LZWDecode_bb12_in(D,A,B) = 1+ eval_LZWDecode_bb37_in(A,E,A):1+ loop_cont_eval_LZWDecode_bb37_in(F,A,B):1
     [F=8,E=8,D=11] 
* CE 76: loop_cont_eval_LZWDecode_bb12_in(D,A,B) = 1+ eval_LZWDecode_bb37_in(A,E,A):2+ loop_cont_eval_LZWDecode_bb37_in(F,A,B):2
     [F=9,E=9,D=11] 
* CE 77: loop_cont_eval_LZWDecode_bb12_in(D,A,B) = 1+ eval_LZWDecode_bb37_in(A,E,A):2+ loop_cont_eval_LZWDecode_bb37_in(F,A,B):3
     [0>=A,F=9,E=9,D=11] 
* CE 78: loop_cont_eval_LZWDecode_bb12_in(D,A,B) = 1+ eval_LZWDecode_bb37_in(A,E,F):3
     [D=11] 
* CE 79: loop_cont_eval_LZWDecode_bb12_in(D,A,B) = 0
     [D=10] 
* CE 80: loop_cont_eval_LZWDecode_bb12_in(D,A,B) = 0+ eval_LZWDecode_bb50_in(A,B):1
     [D=8] 
* CE 81: loop_cont_eval_LZWDecode_bb12_in(D,A,B) = 0+ eval_LZWDecode_bb50_in(A,B):1
     [D=2] 

### Cost equations --> "Loop" of loop_cont_eval_LZWDecode_bb12_in/3 
* CEs [75,76] --> Loop 63 
* CEs [79] --> Loop 64 
* CEs [80] --> Loop 65 
* CEs [81] --> Loop 66 
* CEs [77,78] --> Loop 67 

#### Loops of loop_cont_eval_LZWDecode_bb12_in/3 
* Loop 63: loop_cont_eval_LZWDecode_bb12_in(D,A,B) [D=11] 
* Loop 64: loop_cont_eval_LZWDecode_bb12_in(D,A,B) [D=10] 
* Loop 65: loop_cont_eval_LZWDecode_bb12_in(D,A,B) [D=8] 
* Loop 66: loop_cont_eval_LZWDecode_bb12_in(D,A,B) [D=2] 
* Loop 67: loop_cont_eval_LZWDecode_bb12_in(D,A,B) [D=11] 

### Ranking functions of CR loop_cont_eval_LZWDecode_bb12_in(D,A,B) 

#### Partial ranking functions of CR loop_cont_eval_LZWDecode_bb12_in(D,A,B) 


### Resulting Chains:loop_cont_eval_LZWDecode_bb12_in(D,A,B) 
* [67]...
* [66]
* [65]
* [64]
* [63]


### Merging Chains  loop_cont_eval_LZWDecode_bb12_in/3 into  External patterns of execution 
* [[66]] --> 1 
* [[65]] --> 2 
* [[64]] --> 3 
* [[63]] --> 4 
* [[67]] --> 5 


### Specialization of cost equations eval_LZWDecode_bb11_in/2 
* CE 15 is refined into CE [82,83,84,85,86,87,88,89] 


#### Refined cost equations eval_LZWDecode_bb11_in/2 
* CE 82: eval_LZWDecode_bb11_in(V_occ_1,B) = 1+ eval_LZWDecode_bb12_in(V_occ_1,C,D):1+ loop_cont_eval_LZWDecode_bb12_in(E,D,B):1
     [D>=1,V_occ_1>=1,E=2,C=2] 
* CE 83: eval_LZWDecode_bb11_in(V_occ_1,B) = 1+ eval_LZWDecode_bb12_in(V_occ_1,C,V_occ_1):2+ loop_cont_eval_LZWDecode_bb12_in(D,V_occ_1,B):2
     [0>=V_occ_1,D=8,C=8] 
* CE 84: eval_LZWDecode_bb11_in(V_occ_1,B) = 1+ eval_LZWDecode_bb12_in(V_occ_1,C,D):3+ loop_cont_eval_LZWDecode_bb12_in(E,D,B):2
     [D>=1,V_occ_1>=1,E=8,C=8] 
* CE 85: eval_LZWDecode_bb11_in(V_occ_1,B) = 1+ eval_LZWDecode_bb12_in(V_occ_1,C,D):4+ loop_cont_eval_LZWDecode_bb12_in(E,D,B):2
     [V_occ_1>=1,0>=D,E=8,C=8] 
* CE 86: eval_LZWDecode_bb11_in(V_occ_1,B) = 1+ eval_LZWDecode_bb12_in(V_occ_1,C,D):5+ loop_cont_eval_LZWDecode_bb12_in(E,D,B):3
     [V_occ_1>=1,E=10,C=10] 
* CE 87: eval_LZWDecode_bb11_in(V_occ_1,B) = 1+ eval_LZWDecode_bb12_in(V_occ_1,C,D):6+ loop_cont_eval_LZWDecode_bb12_in(E,D,B):4
     [D>=1,V_occ_1>=1,E=11,C=11] 
* CE 88: eval_LZWDecode_bb11_in(V_occ_1,B) = 1+ eval_LZWDecode_bb12_in(V_occ_1,C,D):6+ loop_cont_eval_LZWDecode_bb12_in(E,D,B):5
     [D>=1,V_occ_1>=1,E=11,C=11] 
* CE 89: eval_LZWDecode_bb11_in(V_occ_1,B) = 1+ eval_LZWDecode_bb12_in(V_occ_1,C,D):7
     [V_occ_1>=1] 

### Cost equations --> "Loop" of eval_LZWDecode_bb11_in/2 
* CEs [88,89] --> Loop 68 
* CEs [82,84,85,86,87] --> Loop 69 
* CEs [83] --> Loop 70 

#### Loops of eval_LZWDecode_bb11_in/2 
* Loop 68: eval_LZWDecode_bb11_in(V_occ_1,B) [V_occ_1>=1] 
* Loop 69: eval_LZWDecode_bb11_in(V_occ_1,B) [V_occ_1>=1] 
* Loop 70: eval_LZWDecode_bb11_in(V_occ_1,B) [0>=V_occ_1] 

### Ranking functions of CR eval_LZWDecode_bb11_in(V_occ_1,B) 

#### Partial ranking functions of CR eval_LZWDecode_bb11_in(V_occ_1,B) 


### Resulting Chains:eval_LZWDecode_bb11_in(V_occ_1,B) 
* [70]
* [69]
* [68]...


### Merging Chains  eval_LZWDecode_bb11_in/2 into  External patterns of execution 
* [[70]] --> 1 
* [[69]] --> 2 
* [[68]] --> 3 


### Specialization of cost equations eval_LZWDecode_bb4_in/4 
* CE 8 is refined into CE [90] 
* CE 9 is refined into CE [91] 
* CE 7 is refined into CE [92] 


#### Refined cost equations eval_LZWDecode_bb4_in/4 
* CE 90: eval_LZWDecode_bb4_in(A,B,C,A) = 0
     [C=6] 
* CE 91: eval_LZWDecode_bb4_in(V_4,V_residue_0,B,C) = 0
     [B=5] 
* CE 92: eval_LZWDecode_bb4_in(V_4,V_residue_0,B,C) = 1+ eval_LZWDecode_bb4_in(V_4,D,B,C)
     [V_residue_0>=V_4+2,V_residue_0=D+1] 

### Cost equations --> "Loop" of eval_LZWDecode_bb4_in/4 
* CEs [92] --> Loop 71 
* CEs [90] --> Loop 72 
* CEs [91] --> Loop 73 

#### Loops of eval_LZWDecode_bb4_in/4 
* Loop 71: eval_LZWDecode_bb4_in(V_4,V_residue_0,B,C)->  eval_LZWDecode_bb4_in(V_4,V_residue_0',B,C)
                  [V_residue_0>=V_4+2,V_residue_0=V_residue_0'+1] 
* Loop 72: eval_LZWDecode_bb4_in(A,B,C,A) [C=6] 
* Loop 73: eval_LZWDecode_bb4_in(V_4,V_residue_0,B,C) [B=5] 

### Ranking functions of CR eval_LZWDecode_bb4_in(V_4,V_residue_0,B,C) 
* RF of phase [71]: [-V_4+V_residue_0-1]

#### Partial ranking functions of CR eval_LZWDecode_bb4_in(V_4,V_residue_0,B,C) 
* Partial RF of phase [71]:
  - RF of loop [71:1]:
    -V_4+V_residue_0-1


### Resulting Chains:eval_LZWDecode_bb4_in(V_4,V_residue_0,B,C) 
* [[71],73]
* [[71],72]
* [73]
* [72]


### Merging Chains  eval_LZWDecode_bb4_in/4 into  External patterns of execution 
* [[73],[73,[71]]] --> 1 
* [[72],[72,[71]]] --> 2 


### Specialization of cost equations eval_LZWDecode_bb9_in/4 
* CE 14 is refined into CE [93] 
* CE 13 is refined into CE [94] 
* CE 12 is refined into CE [95] 


#### Refined cost equations eval_LZWDecode_bb9_in/4 
* CE 93: eval_LZWDecode_bb9_in(A,B,C,A) = 0
     [C=4] 
* CE 94: eval_LZWDecode_bb9_in(V_39,V_residue_1,B,C) = 1+ eval_LZWDecode_bb9_in(V_39,D,E,C)
     [V_residue_1>=2,V_residue_1=D+1,E=4,B=4] 
* CE 95: eval_LZWDecode_bb9_in(V_39,V_residue_1,B,C) = 1+ eval_LZWDecode_bb9_in(V_39,D,E,C)
     [0>=V_residue_1,V_residue_1=D+1,E=4,B=4] 

### Cost equations --> "Loop" of eval_LZWDecode_bb9_in/4 
* CEs [94] --> Loop 74 
* CEs [95] --> Loop 75 
* CEs [93] --> Loop 76 

#### Loops of eval_LZWDecode_bb9_in/4 
* Loop 74: eval_LZWDecode_bb9_in(V_39,V_residue_1,B,C)->  eval_LZWDecode_bb9_in(V_39,V_residue_1',B',C)
                  [V_residue_1>=2,V_residue_1=V_residue_1'+1,B'=4,B=4] 
* Loop 75: eval_LZWDecode_bb9_in(V_39,V_residue_1,B,C)->  eval_LZWDecode_bb9_in(V_39,V_residue_1',B',C)
                  [0>=V_residue_1,V_residue_1=V_residue_1'+1,B'=4,B=4] 
* Loop 76: eval_LZWDecode_bb9_in(A,B,C,A) [C=4] 

### Ranking functions of CR eval_LZWDecode_bb9_in(V_39,V_residue_1,B,C) 
* RF of phase [74]: [V_residue_1-1]

#### Partial ranking functions of CR eval_LZWDecode_bb9_in(V_39,V_residue_1,B,C) 
* Partial RF of phase [74]:
  - RF of loop [74:1]:
    V_residue_1-1


### Resulting Chains:eval_LZWDecode_bb9_in(V_39,V_residue_1,B,C) 
* [[75]]...
* [[75],76]
* [[74],76]
* [76]


### Merging Chains  eval_LZWDecode_bb9_in/4 into  External patterns of execution 
* [[76],[76,[74]],[76,[75]]] --> 1 
* [[[75]]] --> 2 


### Specialization of cost equations eval_LZWDecode_bb7_in/2 
* CE 18 is refined into CE [96] 
* CE 17 is refined into CE [97] 
* CE 16 is refined into CE [98] 


#### Refined cost equations eval_LZWDecode_bb7_in/2 
* CE 96: eval_LZWDecode_bb7_in(V_occ_0,B) = 0
     [B=5] 
* CE 97: eval_LZWDecode_bb7_in(V_occ_0,B) = 1+ eval_LZWDecode_bb7_in(C,D)
     [V_occ_0>=2,V_occ_0=C+1,D=5,B=5] 
* CE 98: eval_LZWDecode_bb7_in(V_occ_0,B) = 1+ eval_LZWDecode_bb7_in(C,D)
     [0>=V_occ_0,V_occ_0=C+1,D=5,B=5] 

### Cost equations --> "Loop" of eval_LZWDecode_bb7_in/2 
* CEs [97] --> Loop 77 
* CEs [98] --> Loop 78 
* CEs [96] --> Loop 79 

#### Loops of eval_LZWDecode_bb7_in/2 
* Loop 77: eval_LZWDecode_bb7_in(V_occ_0,B)->  eval_LZWDecode_bb7_in(V_occ_0',B')
                  [V_occ_0>=2,V_occ_0=V_occ_0'+1,B'=5,B=5] 
* Loop 78: eval_LZWDecode_bb7_in(V_occ_0,B)->  eval_LZWDecode_bb7_in(V_occ_0',B')
                  [0>=V_occ_0,V_occ_0=V_occ_0'+1,B'=5,B=5] 
* Loop 79: eval_LZWDecode_bb7_in(V_occ_0,B) [B=5] 

### Ranking functions of CR eval_LZWDecode_bb7_in(V_occ_0,B) 
* RF of phase [77]: [V_occ_0-1]

#### Partial ranking functions of CR eval_LZWDecode_bb7_in(V_occ_0,B) 
* Partial RF of phase [77]:
  - RF of loop [77:1]:
    V_occ_0-1


### Resulting Chains:eval_LZWDecode_bb7_in(V_occ_0,B) 
* [[78]]...
* [[78],79]
* [[77],79]
* [79]


### Merging Chains  eval_LZWDecode_bb7_in/2 into  External patterns of execution 
* [[79],[79,[77]],[79,[78]]] --> 1 
* [[[78]]] --> 2 


### Specialization of cost equations loop_cont_eval_LZWDecode_bb4_in/3 
* CE 10 is refined into CE [99,100] 
* CE 11 is refined into CE [101] 


#### Refined cost equations loop_cont_eval_LZWDecode_bb4_in/3 
* CE 99: loop_cont_eval_LZWDecode_bb4_in(F,A,B) = 1+ eval_LZWDecode_bb7_in(A,G):1
     [G=5,F=6] 
* CE 100: loop_cont_eval_LZWDecode_bb4_in(F,A,B) = 1+ eval_LZWDecode_bb7_in(A,G):2
     [0>=A,G=5,F=6] 
* CE 101: loop_cont_eval_LZWDecode_bb4_in(F,A,B) = 0
     [F=5] 

### Cost equations --> "Loop" of loop_cont_eval_LZWDecode_bb4_in/3 
* CEs [99] --> Loop 80 
* CEs [101] --> Loop 81 
* CEs [100] --> Loop 82 

#### Loops of loop_cont_eval_LZWDecode_bb4_in/3 
* Loop 80: loop_cont_eval_LZWDecode_bb4_in(F,A,B) [F=6] 
* Loop 81: loop_cont_eval_LZWDecode_bb4_in(F,A,B) [F=5] 
* Loop 82: loop_cont_eval_LZWDecode_bb4_in(F,A,B) [0>=A,F=6] 

### Ranking functions of CR loop_cont_eval_LZWDecode_bb4_in(F,A,B) 

#### Partial ranking functions of CR loop_cont_eval_LZWDecode_bb4_in(F,A,B) 


### Resulting Chains:loop_cont_eval_LZWDecode_bb4_in(F,A,B) 
* [82]...
* [81]
* [80]


### Merging Chains  loop_cont_eval_LZWDecode_bb4_in/3 into  External patterns of execution 
* [[81]] --> 1 
* [[80]] --> 2 
* [[82]] --> 3 


### Specialization of cost equations eval_LZWDecode_bb0_in/2 
* CE 3 is refined into CE [102,103,104] 
* CE 4 is refined into CE [105,106,107,108] 
* CE 5 is refined into CE [109,110,111] 
* CE 6 is refined into CE [112] 


#### Refined cost equations eval_LZWDecode_bb0_in/2 
* CE 102: eval_LZWDecode_bb0_in(V_occ0,B) = 1+ eval_LZWDecode_bb4_in(V_occ0,C,D,E):1+ loop_cont_eval_LZWDecode_bb4_in(F,E,B):1
     [F=5,D=5] 
* CE 103: eval_LZWDecode_bb0_in(V_occ0,B) = 1+ eval_LZWDecode_bb4_in(V_occ0,C,D,V_occ0):2+ loop_cont_eval_LZWDecode_bb4_in(E,V_occ0,B):2
     [E=6,D=6] 
* CE 104: eval_LZWDecode_bb0_in(V_occ0,B) = 1+ eval_LZWDecode_bb4_in(V_occ0,C,D,V_occ0):2+ loop_cont_eval_LZWDecode_bb4_in(E,V_occ0,B):3
     [0>=V_occ0,E=6,D=6] 
* CE 105: eval_LZWDecode_bb0_in(V_occ0,B) = 1+ eval_LZWDecode_bb9_in(C,D,E,C):1+ eval_LZWDecode_bb11_in(C,B):1
     [0>=C,C+D=V_occ0,E=4] 
* CE 106: eval_LZWDecode_bb0_in(V_occ0,B) = 1+ eval_LZWDecode_bb9_in(C,D,E,C):1+ eval_LZWDecode_bb11_in(C,B):2
     [C>=1,C+D=V_occ0,E=4] 
* CE 107: eval_LZWDecode_bb0_in(V_occ0,B) = 1+ eval_LZWDecode_bb9_in(C,D,E,C):1+ eval_LZWDecode_bb11_in(C,B):3
     [C>=1,C+D=V_occ0,E=4] 
* CE 108: eval_LZWDecode_bb0_in(V_occ0,B) = 1+ eval_LZWDecode_bb9_in(C,D,E,F):2
     [0>=D,C+D=V_occ0,E=4] 
* CE 109: eval_LZWDecode_bb0_in(V_occ0,B) = 0+ eval_LZWDecode_bb11_in(V_occ0,B):1
     [0>=V_occ0] 
* CE 110: eval_LZWDecode_bb0_in(V_occ0,B) = 0+ eval_LZWDecode_bb11_in(V_occ0,B):2
     [V_occ0>=1] 
* CE 111: eval_LZWDecode_bb0_in(V_occ0,B) = 0+ eval_LZWDecode_bb11_in(V_occ0,B):3
     [V_occ0>=1] 
* CE 112: eval_LZWDecode_bb0_in(V_occ0,B) = 0
     [] 

### Cost equations --> "Loop" of eval_LZWDecode_bb0_in/2 
* CEs [102,103,105,106,109,110,112] --> Loop 83 
* CEs [104,107,108,111] --> Loop 84 

#### Loops of eval_LZWDecode_bb0_in/2 
* Loop 83: eval_LZWDecode_bb0_in(V_occ0,B) [] 
* Loop 84: eval_LZWDecode_bb0_in(V_occ0,B) [] 

### Ranking functions of CR eval_LZWDecode_bb0_in(V_occ0,B) 

#### Partial ranking functions of CR eval_LZWDecode_bb0_in(V_occ0,B) 


### Resulting Chains:eval_LZWDecode_bb0_in(V_occ0,B) 
* [84]...
* [83]


### Merging Chains  eval_LZWDecode_bb0_in/2 into  External patterns of execution 
* [[83]] --> 1 
* [[84]] --> 2 


### Specialization of cost equations eval_LZWDecode_start/3 
* CE 2 is refined into CE [113,114] 


#### Refined cost equations eval_LZWDecode_start/3 
* CE 113: eval_LZWDecode_start(V_occ0,V_s,B) = 0+ eval_LZWDecode_bb0_in(V_occ0,B):1
     [] 
* CE 114: eval_LZWDecode_start(V_occ0,V_s,B) = 0+ eval_LZWDecode_bb0_in(V_occ0,B):2
     [] 

### Cost equations --> "Loop" of eval_LZWDecode_start/3 
* CEs [114] --> Loop 85 
* CEs [113] --> Loop 86 

#### Loops of eval_LZWDecode_start/3 
* Loop 85: eval_LZWDecode_start(V_occ0,V_s,B) [] 
* Loop 86: eval_LZWDecode_start(V_occ0,V_s,B) [] 

### Ranking functions of CR eval_LZWDecode_start(V_occ0,V_s,B) 

#### Partial ranking functions of CR eval_LZWDecode_start(V_occ0,V_s,B) 


### Resulting Chains:eval_LZWDecode_start(V_occ0,V_s,B) 
* [86]
* [85]...


### Merging Chains  eval_LZWDecode_start/3 into  External patterns of execution 
* [[86]] --> 1 
* [[85]] --> 2 


Computing Bounds
=====================================

#### Cost of loops [40] 

 * loop 40:eval_LZWDecode_bb44_in(V_occ_2,V_91,V_225,B,C) -> [eval_LZWDecode_bb44_in(V_occ_2',V_91',V_225',B',C')] 
1
#### Cost of phase [40]:eval_LZWDecode_bb44_in(V_occ_2,V_91,V_225,B,C) -> [eval_LZWDecode_bb44_in(V_occ_2',V_91',V_225',B',C')] 
1*it(40)+0
#### Cost of phase [40]:eval_LZWDecode_bb44_in(V_occ_2,V_91,V_225,B,C) -> [eval_LZWDecode_bb44_in(V_occ_2',V_91',V_225',B',C')] 
1*it(40)+0
#### Cost of phase [40]:eval_LZWDecode_bb44_in(V_occ_2,V_91,V_225,B,C) -> [eval_LZWDecode_bb44_in(V_occ_2',V_91',V_225',B',C')] 
1*it(40)+0
#### Cost of chains of eval_LZWDecode_bb44_in(V_occ_2,V_91,V_225,B,C):
* Chain [[40]]...: 1*it(40)+0
  with precondition: [V_occ_2>=1,B>=2,3>=B] 

* Chain [[40],42]: 1*it(40)+0
  with precondition: [B=2,V_occ_2=C,V_occ_2>=1] 

* Chain [[40],41]: 1*it(40)+0
  with precondition: [B=3,V_occ_2=V_225+C,V_occ_2>=1] 

* Chain [42]: 0
  with precondition: [B=2,V_occ_2=C,V_occ_2>=1] 

* Chain [41]: 0
  with precondition: [B=3,V_occ_2=V_225+C,V_occ_2>=1] 


#### Cost of loops [43] 

 * loop 43:eval_LZWDecode_bb12_in(V_occ_2,B,C) -> [eval_LZWDecode_bb12_in(V_occ_2',B',C')] 
1*s(4)+0
#### Cost of phase [43]:eval_LZWDecode_bb12_in(V_occ_2,B,C) -> [eval_LZWDecode_bb12_in(V_occ_2',B',C')] 
1*s(5)+0
#### Cost of phase [43]:eval_LZWDecode_bb12_in(V_occ_2,B,C) -> [eval_LZWDecode_bb12_in(V_occ_2',B',C')] 
1*s(5)+0
#### Cost of phase [43]:eval_LZWDecode_bb12_in(V_occ_2,B,C) -> [eval_LZWDecode_bb12_in(V_occ_2',B',C')] 
1*s(5)+0
#### Cost of phase [43]:eval_LZWDecode_bb12_in(V_occ_2,B,C) -> [eval_LZWDecode_bb12_in(V_occ_2',B',C')] 
1*s(5)+0
#### Cost of phase [43]:eval_LZWDecode_bb12_in(V_occ_2,B,C) -> [eval_LZWDecode_bb12_in(V_occ_2',B',C')] 
1*s(5)+0
#### Cost of phase [43]:eval_LZWDecode_bb12_in(V_occ_2,B,C) -> [eval_LZWDecode_bb12_in(V_occ_2',B',C')] 
1*s(5)+0
#### Cost of phase [43]:eval_LZWDecode_bb12_in(V_occ_2,B,C) -> [eval_LZWDecode_bb12_in(V_occ_2',B',C')] 
1*s(5)+0
#### Cost of chains of eval_LZWDecode_bb12_in(V_occ_2,B,C):
* Chain [[43]]...: 1*s(5)+0
  with precondition: [V_occ_2>=1] 

* Chain [[43],49]: 2*s(5)+1
  with precondition: [B=2,V_occ_2>=1,C>=1] 

* Chain [[43],48]: 1*s(5)+0
  with precondition: [B=8,0>=C,V_occ_2>=1] 

* Chain [[43],47]: 1*s(5)+0
  with precondition: [B=8,V_occ_2>=1,C>=1] 

* Chain [[43],46]: 1*s(5)+0
  with precondition: [B=10,V_occ_2>=1] 

* Chain [[43],45]: 1*s(5)+0
  with precondition: [B=11,V_occ_2>=1,C>=1] 

* Chain [[43],44]...: 2*aux(4)+0
  with precondition: [V_occ_2>=1] 

* Chain [49]: 1*s(6)+1
  with precondition: [B=2,V_occ_2=C,V_occ_2>=1] 

* Chain [48]: 0
  with precondition: [B=8,V_occ_2=C,0>=V_occ_2] 

* Chain [47]: 0
  with precondition: [B=8,V_occ_2=C,V_occ_2>=1] 

* Chain [46]: 0
  with precondition: [B=10,V_occ_2>=1] 

* Chain [45]: 0
  with precondition: [B=11,V_occ_2=C,V_occ_2>=1] 

* Chain [44]...: 1*aux(4)+0
  with precondition: [V_occ_2>=1] 


#### Cost of chains of eval_LZWDecode_bb50_in(V_occ_6,B):
* Chain [50]: 0
  with precondition: [] 


#### Cost of loops [51] 

 * loop 51:eval_LZWDecode_bb37_in(V_occ_2,B,C) -> [eval_LZWDecode_bb37_in(V_occ_2',B',C')] 
1
#### Cost of phase [51]:eval_LZWDecode_bb37_in(V_occ_2,B,C) -> [eval_LZWDecode_bb37_in(V_occ_2',B',C')] 
1*it(51)+0
#### Cost of phase [51]:eval_LZWDecode_bb37_in(V_occ_2,B,C) -> [eval_LZWDecode_bb37_in(V_occ_2',B',C')] 
1*it(51)+0
#### Cost of phase [51]:eval_LZWDecode_bb37_in(V_occ_2,B,C) -> [eval_LZWDecode_bb37_in(V_occ_2',B',C')] 
1*it(51)+0
#### Cost of chains of eval_LZWDecode_bb37_in(V_occ_2,B,C):
* Chain [[51]]...: 1*it(51)+0
  with precondition: [] 

* Chain [[51],53]: 1*it(51)+0
  with precondition: [B=8,V_occ_2=C] 

* Chain [[51],52]: 1*it(51)+0
  with precondition: [B=9,V_occ_2=C] 

* Chain [53]: 0
  with precondition: [B=8,C=V_occ_2] 

* Chain [52]: 0
  with precondition: [B=9,C=V_occ_2] 


#### Cost of loops [55] 

 * loop 55:eval_LZWDecode_bb40_in(V_occ_3,B,C) -> [eval_LZWDecode_bb40_in(V_occ_3',B',C')] 
1
#### Cost of phase [55]:eval_LZWDecode_bb40_in(V_occ_3,B,C) -> [eval_LZWDecode_bb40_in(V_occ_3',B',C')] 
1*it(55)+0
#### Cost of phase [55]:eval_LZWDecode_bb40_in(V_occ_3,B,C) -> [eval_LZWDecode_bb40_in(V_occ_3',B',C')] 
1*it(55)+0
#### Cost of phase [55]:eval_LZWDecode_bb40_in(V_occ_3,B,C) -> [eval_LZWDecode_bb40_in(V_occ_3',B',C')] 
1*it(55)+0
#### Cost of loops [54] 

 * loop 54:eval_LZWDecode_bb40_in(V_occ_3,B,C) -> [eval_LZWDecode_bb40_in(V_occ_3',B',C')] 
1
#### Cost of phase [54]:eval_LZWDecode_bb40_in(V_occ_3,B,C) -> [eval_LZWDecode_bb40_in(V_occ_3',B',C')] 
1*it(54)+0
  Such that:it(54) =< V_occ_3
it(54) =< V_occ_3-V_occ_3'

#### Cost of phase [54]:eval_LZWDecode_bb40_in(V_occ_3,B,C) -> [eval_LZWDecode_bb40_in(V_occ_3',B',C')] 
1*it(54)+0
  Such that:it(54) =< V_occ_3
it(54) =< V_occ_3-V_occ_3'

#### Cost of chains of eval_LZWDecode_bb40_in(V_occ_3,B,C):
* Chain [[55]]...: 1*it(55)+0
  with precondition: [0>=V_occ_3] 

* Chain [[55],57]: 1*it(55)+0
  with precondition: [B=7,0>=V_occ_3,V_occ_3>=C+2] 

* Chain [[55],56]: 1*it(55)+0
  with precondition: [B=8,0>=V_occ_3,V_occ_3>=C+2] 

* Chain [[54],57]: 1*it(54)+0
  Such that:it(54) =< V_occ_3-C

  with precondition: [B=7,C>=0,V_occ_3>=C+2] 

* Chain [[54],56]: 1*it(54)+0
  Such that:it(54) =< V_occ_3-C

  with precondition: [B=8,C>=0,V_occ_3>=C+2] 

* Chain [57]: 0
  with precondition: [B=7,C+1=V_occ_3] 

* Chain [56]: 0
  with precondition: [B=8,C+1=V_occ_3] 


#### Cost of chains of loop_cont_eval_LZWDecode_bb40_in(D,A,B):
* Chain [59]: 0
  with precondition: [D=7] 

* Chain [58]: 0
  with precondition: [D=8] 


#### Cost of chains of loop_cont_eval_LZWDecode_bb37_in(C,A,B):
* Chain [62]...: 1*s(19)+1
  with precondition: [C=9,0>=A] 

* Chain [61]: 0
  with precondition: [C=8] 

* Chain [60]: 2*s(20)+2*s(21)+1
  Such that:aux(12) =< A
s(21) =< aux(12)

  with precondition: [C=9] 


#### Cost of chains of loop_cont_eval_LZWDecode_bb12_in(D,A,B):
* Chain [67]...: 1*aux(13)+0
  with precondition: [D=11] 

* Chain [66]: 0
  with precondition: [D=2] 

* Chain [65]: 0
  with precondition: [D=8] 

* Chain [64]: 0
  with precondition: [D=10] 

* Chain [63]: 4*s(27)+2*s(30)+2
  Such that:s(29) =< A
s(30) =< s(29)

  with precondition: [D=11] 


#### Cost of chains of eval_LZWDecode_bb11_in(V_occ_1,B):
* Chain [70]: 1
  with precondition: [0>=V_occ_1] 

* Chain [69]: 1*aux(14)+0
  with precondition: [V_occ_1>=1] 

* Chain [68]...: 1*aux(15)+0
  with precondition: [V_occ_1>=1] 


#### Cost of loops [71] 

 * loop 71:eval_LZWDecode_bb4_in(V_4,V_residue_0,B,C) -> [eval_LZWDecode_bb4_in(V_4',V_residue_0',B',C')] 
1
#### Cost of phase [71]:eval_LZWDecode_bb4_in(V_4,V_residue_0,B,C) -> [eval_LZWDecode_bb4_in(V_4',V_residue_0',B',C')] 
1*it(71)+0
  Such that:it(71) =< -V_4+V_residue_0
it(71) =< -V_4+V_residue_0+V_4'-V_residue_0'

#### Cost of phase [71]:eval_LZWDecode_bb4_in(V_4,V_residue_0,B,C) -> [eval_LZWDecode_bb4_in(V_4',V_residue_0',B',C')] 
1*it(71)+0
  Such that:it(71) =< -V_4+V_residue_0
it(71) =< -V_4+V_residue_0+V_4'-V_residue_0'

#### Cost of chains of eval_LZWDecode_bb4_in(V_4,V_residue_0,B,C):
* Chain [[71],73]: 1*it(71)+0
  Such that:it(71) =< -V_4+V_residue_0

  with precondition: [B=5,V_residue_0>=V_4+2] 

* Chain [[71],72]: 1*it(71)+0
  Such that:it(71) =< -V_4+V_residue_0

  with precondition: [B=6,V_4=C,V_residue_0>=V_4+2] 

* Chain [73]: 0
  with precondition: [B=5] 

* Chain [72]: 0
  with precondition: [B=6,C=V_4] 


#### Cost of loops [75] 

 * loop 75:eval_LZWDecode_bb9_in(V_39,V_residue_1,B,C) -> [eval_LZWDecode_bb9_in(V_39',V_residue_1',B',C')] 
1
#### Cost of phase [75]:eval_LZWDecode_bb9_in(V_39,V_residue_1,B,C) -> [eval_LZWDecode_bb9_in(V_39',V_residue_1',B',C')] 
1*it(75)+0
#### Cost of phase [75]:eval_LZWDecode_bb9_in(V_39,V_residue_1,B,C) -> [eval_LZWDecode_bb9_in(V_39',V_residue_1',B',C')] 
1*it(75)+0
#### Cost of loops [74] 

 * loop 74:eval_LZWDecode_bb9_in(V_39,V_residue_1,B,C) -> [eval_LZWDecode_bb9_in(V_39',V_residue_1',B',C')] 
1
#### Cost of phase [74]:eval_LZWDecode_bb9_in(V_39,V_residue_1,B,C) -> [eval_LZWDecode_bb9_in(V_39',V_residue_1',B',C')] 
1*it(74)+0
  Such that:it(74) =< V_residue_1
it(74) =< V_residue_1-V_residue_1'

#### Cost of chains of eval_LZWDecode_bb9_in(V_39,V_residue_1,B,C):
* Chain [[75]]...: 1*it(75)+0
  with precondition: [0>=V_residue_1,B=4] 

* Chain [[75],76]: 1*it(75)+0
  with precondition: [B=4,V_39=C,0>=V_residue_1] 

* Chain [[74],76]: 1*it(74)+0
  Such that:it(74) =< V_residue_1

  with precondition: [B=4,V_39=C,V_residue_1>=2] 

* Chain [76]: 0
  with precondition: [B=4,C=V_39] 


#### Cost of loops [78] 

 * loop 78:eval_LZWDecode_bb7_in(V_occ_0,B) -> [eval_LZWDecode_bb7_in(V_occ_0',B')] 
1
#### Cost of phase [78]:eval_LZWDecode_bb7_in(V_occ_0,B) -> [eval_LZWDecode_bb7_in(V_occ_0',B')] 
1*it(78)+0
#### Cost of phase [78]:eval_LZWDecode_bb7_in(V_occ_0,B) -> [eval_LZWDecode_bb7_in(V_occ_0',B')] 
1*it(78)+0
#### Cost of loops [77] 

 * loop 77:eval_LZWDecode_bb7_in(V_occ_0,B) -> [eval_LZWDecode_bb7_in(V_occ_0',B')] 
1
#### Cost of phase [77]:eval_LZWDecode_bb7_in(V_occ_0,B) -> [eval_LZWDecode_bb7_in(V_occ_0',B')] 
1*it(77)+0
  Such that:it(77) =< V_occ_0
it(77) =< V_occ_0-V_occ_0'

#### Cost of chains of eval_LZWDecode_bb7_in(V_occ_0,B):
* Chain [[78]]...: 1*it(78)+0
  with precondition: [0>=V_occ_0,B=5] 

* Chain [[78],79]: 1*it(78)+0
  with precondition: [B=5,0>=V_occ_0] 

* Chain [[77],79]: 1*it(77)+0
  Such that:it(77) =< V_occ_0

  with precondition: [B=5,V_occ_0>=2] 

* Chain [79]: 0
  with precondition: [B=5] 


#### Cost of chains of loop_cont_eval_LZWDecode_bb4_in(F,A,B):
* Chain [82]...: 1*s(49)+1
  with precondition: [F=6,0>=A] 

* Chain [81]: 0
  with precondition: [F=5] 

* Chain [80]: 1*s(50)+1*s(51)+1
  Such that:s(50) =< A

  with precondition: [F=6] 


#### Cost of chains of eval_LZWDecode_bb0_in(V_occ0,B):
* Chain [84]...: 6*s(52)+1*s(54)+2
  Such that:s(54) =< V_occ0

  with precondition: [] 

* Chain [83]: 8*s(59)+2*s(61)+2
  Such that:aux(16) =< V_occ0
s(61) =< aux(16)

  with precondition: [] 


#### Cost of chains of eval_LZWDecode_start(V_occ0,V_s,B):
* Chain [86]: 2*s(70)+8*s(71)+2
  Such that:s(69) =< V_occ0
s(70) =< s(69)

  with precondition: [] 

* Chain [85]...: 1*s(72)+6*s(73)+2
  Such that:s(72) =< V_occ0

  with precondition: [] 


Closed-form bounds of eval_LZWDecode_start(V_occ0,V_s,B): 
-------------------------------------
* Chain [86] with precondition: [] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [85]... with precondition: [] 
    - Upper bound: inf 
    - Complexity: infinity 

### Maximum cost of eval_LZWDecode_start(V_occ0,V_s,B): inf 
Asymptotic class: infinity 

Time statistics: 
-------------------------------------
* Partial evaluation computed in 136 ms.
* Invariants computed in 189 ms.
   - Backward Invariants 111 ms.
   - Transitive Invariants 33 ms.
* Refinement performed in 376 ms.
* Termination proved in 33 ms.
* Upper bounds computed in 287 ms.
   - Equation cost structures 116 ms.
   - Phase cost structures 60 ms.
   - Chain cost structures 104 ms.
   - Solving cost expressions 1 ms.
* Total analysis performed in 1217 ms.


Warning: Ignored call to eval_alloc_obj_stop/1 in equation eval_alloc_obj_bb9_in/1 

Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. non_recursive  : [eval_alloc_obj_bb9_in/1]
1. non_recursive  : [eval_alloc_obj_bb8_in/1]
2. non_recursive  : [eval_alloc_obj_8/1]
3. non_recursive  : [eval_alloc_obj_7/2]
4. recursive  : [eval_alloc_obj_35/3,eval_alloc_obj_36/3,eval_alloc_obj_37/3,eval_alloc_obj_38/3,eval_alloc_obj_39/3,eval_alloc_obj_40/3,eval_alloc_obj_bb4_in/2]
5. non_recursive  : [loop_cont_eval_alloc_obj_bb4_in/2]
6. non_recursive  : [eval_alloc_obj_bb0_in/1]
7. non_recursive  : [eval_alloc_obj_start/3]

#### Obtained direct recursion through partial evaluation 
0. SCC is completely evaluated into other SCCs
1. SCC is completely evaluated into other SCCs
2. SCC is partially evaluated into eval_alloc_obj_8/1
3. SCC is completely evaluated into other SCCs
4. SCC is partially evaluated into eval_alloc_obj_bb4_in/2
5. SCC is partially evaluated into loop_cont_eval_alloc_obj_bb4_in/2
6. SCC is partially evaluated into eval_alloc_obj_bb0_in/1
7. SCC is partially evaluated into eval_alloc_obj_start/3

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations eval_alloc_obj_8/1 
* CE 5 is refined into CE [11] 


#### Refined cost equations eval_alloc_obj_8/1 
* CE 11: eval_alloc_obj_8(B) = 0
     [] 

### Cost equations --> "Loop" of eval_alloc_obj_8/1 
* CEs [11] --> Loop 9 

#### Loops of eval_alloc_obj_8/1 
* Loop 9: eval_alloc_obj_8(B) [] 

### Ranking functions of CR eval_alloc_obj_8(B) 

#### Partial ranking functions of CR eval_alloc_obj_8(B) 


### Resulting Chains:eval_alloc_obj_8(B) 
* [9]


### Merging Chains  eval_alloc_obj_8/1 into  External patterns of execution 
* [[9]] --> 1 


### Specialization of cost equations eval_alloc_obj_bb4_in/2 
* CE 8 is refined into CE [12] 
* CE 6 is refined into CE [13] 
* CE 7 is refined into CE [14] 


#### Refined cost equations eval_alloc_obj_bb4_in/2 
* CE 12: eval_alloc_obj_bb4_in(V_47,B) = 0
     [B=3] 
* CE 13: eval_alloc_obj_bb4_in(V_47,B) = 0
     [B=2] 
* CE 14: eval_alloc_obj_bb4_in(V_47,B) = 1+ eval_alloc_obj_bb4_in(V_47,B)
     [] 

### Cost equations --> "Loop" of eval_alloc_obj_bb4_in/2 
* CEs [14] --> Loop 10 
* CEs [12] --> Loop 11 
* CEs [13] --> Loop 12 

#### Loops of eval_alloc_obj_bb4_in/2 
* Loop 10: eval_alloc_obj_bb4_in(V_47,B)->  eval_alloc_obj_bb4_in(V_47,B)
                  [] 
* Loop 11: eval_alloc_obj_bb4_in(V_47,B) [B=3] 
* Loop 12: eval_alloc_obj_bb4_in(V_47,B) [B=2] 

### Ranking functions of CR eval_alloc_obj_bb4_in(V_47,B) 

#### Partial ranking functions of CR eval_alloc_obj_bb4_in(V_47,B) 


### Resulting Chains:eval_alloc_obj_bb4_in(V_47,B) 
* [[10]]...
* [[10],12]
* [[10],11]
* [12]
* [11]


### Merging Chains  eval_alloc_obj_bb4_in/2 into  External patterns of execution 
* [[12],[12,[10]]] --> 1 
* [[11],[11,[10]]] --> 2 
* [[[10]]] --> 3 


### Specialization of cost equations loop_cont_eval_alloc_obj_bb4_in/2 
* CE 10 is refined into CE [15] 
* CE 9 is refined into CE [16] 


#### Refined cost equations loop_cont_eval_alloc_obj_bb4_in/2 
* CE 15: loop_cont_eval_alloc_obj_bb4_in(B,A) = 0
     [B=3] 
* CE 16: loop_cont_eval_alloc_obj_bb4_in(B,A) = 0
     [B=2] 

### Cost equations --> "Loop" of loop_cont_eval_alloc_obj_bb4_in/2 
* CEs [15] --> Loop 13 
* CEs [16] --> Loop 14 

#### Loops of loop_cont_eval_alloc_obj_bb4_in/2 
* Loop 13: loop_cont_eval_alloc_obj_bb4_in(B,A) [B=3] 
* Loop 14: loop_cont_eval_alloc_obj_bb4_in(B,A) [B=2] 

### Ranking functions of CR loop_cont_eval_alloc_obj_bb4_in(B,A) 

#### Partial ranking functions of CR loop_cont_eval_alloc_obj_bb4_in(B,A) 


### Resulting Chains:loop_cont_eval_alloc_obj_bb4_in(B,A) 
* [14]
* [13]


### Merging Chains  loop_cont_eval_alloc_obj_bb4_in/2 into  External patterns of execution 
* [[14]] --> 1 
* [[13]] --> 2 


### Specialization of cost equations eval_alloc_obj_bb0_in/1 
* CE 3 is refined into CE [17] 
* CE 4 is refined into CE [18,19,20] 


#### Refined cost equations eval_alloc_obj_bb0_in/1 
* CE 17: eval_alloc_obj_bb0_in(B) = 0+ eval_alloc_obj_8(B):1
     [] 
* CE 18: eval_alloc_obj_bb0_in(B) = 1+ eval_alloc_obj_bb4_in(C,D):1+ loop_cont_eval_alloc_obj_bb4_in(E,B):1
     [E=2,D=2] 
* CE 19: eval_alloc_obj_bb0_in(B) = 1+ eval_alloc_obj_bb4_in(C,D):2+ loop_cont_eval_alloc_obj_bb4_in(E,B):2
     [E=3,D=3] 
* CE 20: eval_alloc_obj_bb0_in(B) = 1+ eval_alloc_obj_bb4_in(C,D):3
     [] 

### Cost equations --> "Loop" of eval_alloc_obj_bb0_in/1 
* CEs [20] --> Loop 15 
* CEs [17,18,19] --> Loop 16 

#### Loops of eval_alloc_obj_bb0_in/1 
* Loop 15: eval_alloc_obj_bb0_in(B) [] 
* Loop 16: eval_alloc_obj_bb0_in(B) [] 

### Ranking functions of CR eval_alloc_obj_bb0_in(B) 

#### Partial ranking functions of CR eval_alloc_obj_bb0_in(B) 


### Resulting Chains:eval_alloc_obj_bb0_in(B) 
* [16]
* [15]...


### Merging Chains  eval_alloc_obj_bb0_in/1 into  External patterns of execution 
* [[16]] --> 1 
* [[15]] --> 2 


### Specialization of cost equations eval_alloc_obj_start/3 
* CE 2 is refined into CE [21,22] 


#### Refined cost equations eval_alloc_obj_start/3 
* CE 21: eval_alloc_obj_start(V_lsize,V_immovable,B) = 0+ eval_alloc_obj_bb0_in(B):1
     [] 
* CE 22: eval_alloc_obj_start(V_lsize,V_immovable,B) = 0+ eval_alloc_obj_bb0_in(B):2
     [] 

### Cost equations --> "Loop" of eval_alloc_obj_start/3 
* CEs [22] --> Loop 17 
* CEs [21] --> Loop 18 

#### Loops of eval_alloc_obj_start/3 
* Loop 17: eval_alloc_obj_start(V_lsize,V_immovable,B) [] 
* Loop 18: eval_alloc_obj_start(V_lsize,V_immovable,B) [] 

### Ranking functions of CR eval_alloc_obj_start(V_lsize,V_immovable,B) 

#### Partial ranking functions of CR eval_alloc_obj_start(V_lsize,V_immovable,B) 


### Resulting Chains:eval_alloc_obj_start(V_lsize,V_immovable,B) 
* [18]
* [17]...


### Merging Chains  eval_alloc_obj_start/3 into  External patterns of execution 
* [[18]] --> 1 
* [[17]] --> 2 


Computing Bounds
=====================================

#### Cost of chains of eval_alloc_obj_8(B):
* Chain [9]: 0
  with precondition: [] 


#### Cost of loops [10] 

 * loop 10:eval_alloc_obj_bb4_in(V_47,B) -> [eval_alloc_obj_bb4_in(V_47',B')] 
1
#### Cost of phase [10]:eval_alloc_obj_bb4_in(V_47,B) -> [eval_alloc_obj_bb4_in(V_47',B')] 
1*it(10)+0
#### Cost of phase [10]:eval_alloc_obj_bb4_in(V_47,B) -> [eval_alloc_obj_bb4_in(V_47',B')] 
1*it(10)+0
#### Cost of phase [10]:eval_alloc_obj_bb4_in(V_47,B) -> [eval_alloc_obj_bb4_in(V_47',B')] 
1*it(10)+0
#### Cost of chains of eval_alloc_obj_bb4_in(V_47,B):
* Chain [[10]]...: 1*it(10)+0
  with precondition: [] 

* Chain [[10],12]: 1*it(10)+0
  with precondition: [B=2] 

* Chain [[10],11]: 1*it(10)+0
  with precondition: [B=3] 

* Chain [12]: 0
  with precondition: [B=2] 

* Chain [11]: 0
  with precondition: [B=3] 


#### Cost of chains of loop_cont_eval_alloc_obj_bb4_in(B,A):
* Chain [14]: 0
  with precondition: [B=2] 

* Chain [13]: 0
  with precondition: [B=3] 


#### Cost of chains of eval_alloc_obj_bb0_in(B):
* Chain [16]: 1*aux(3)+0
  with precondition: [] 

* Chain [15]...: 1*s(5)+1
  with precondition: [] 


#### Cost of chains of eval_alloc_obj_start(V_lsize,V_immovable,B):
* Chain [18]: 1*s(6)+0
  with precondition: [] 

* Chain [17]...: 1*s(7)+1
  with precondition: [] 


Closed-form bounds of eval_alloc_obj_start(V_lsize,V_immovable,B): 
-------------------------------------
* Chain [18] with precondition: [] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [17]... with precondition: [] 
    - Upper bound: inf 
    - Complexity: infinity 

### Maximum cost of eval_alloc_obj_start(V_lsize,V_immovable,B): inf 
Asymptotic class: infinity 

Time statistics: 
-------------------------------------
* Partial evaluation computed in 6 ms.
* Invariants computed in 3 ms.
   - Backward Invariants 2 ms.
   - Transitive Invariants 1 ms.
* Refinement performed in 9 ms.
* Termination proved in 1 ms.
* Upper bounds computed in 7 ms.
   - Equation cost structures 4 ms.
   - Phase cost structures 1 ms.
   - Chain cost structures 2 ms.
   - Solving cost expressions 0 ms.
* Total analysis performed in 37 ms.


Warning: Ignored call to eval_code_map_decode_next_stop/1 in equation eval_code_map_decode_next_bb15_in/1 

Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. recursive  : [eval_code_map_decode_next_bb11_in/3]
1. recursive  : [eval_code_map_decode_next_bb1_in/1,loop_cont_eval_code_map_decode_next_bb11_in/2]
2. non_recursive  : [eval_code_map_decode_next_bb15_in/1]
3. non_recursive  : [eval_code_map_decode_next_NewDefault_in/1]
4. non_recursive  : [eval_code_map_decode_next_bb14_in/1]
5. non_recursive  : [eval_code_map_decode_next_bb7_in/1]
6. non_recursive  : [eval_code_map_decode_next_bb4_in/1]
7. non_recursive  : [loop_cont_eval_code_map_decode_next_bb1_in/2]
8. non_recursive  : [eval_code_map_decode_next_bb0_in/1]
9. non_recursive  : [eval_code_map_decode_next_start/1]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into eval_code_map_decode_next_bb11_in/3
1. SCC is partially evaluated into eval_code_map_decode_next_bb1_in/1
2. SCC is completely evaluated into other SCCs
3. SCC is completely evaluated into other SCCs
4. SCC is completely evaluated into other SCCs
5. SCC is completely evaluated into other SCCs
6. SCC is partially evaluated into eval_code_map_decode_next_bb4_in/1
7. SCC is partially evaluated into loop_cont_eval_code_map_decode_next_bb1_in/2
8. SCC is partially evaluated into eval_code_map_decode_next_bb0_in/1
9. SCC is partially evaluated into eval_code_map_decode_next_start/1

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations eval_code_map_decode_next_bb11_in/3 
* CE 16 is refined into CE [18] 
* CE 14 is refined into CE [19] 
* CE 15 is refined into CE [20] 
* CE 13 is refined into CE [21] 


#### Refined cost equations eval_code_map_decode_next_bb11_in/3 
* CE 18: eval_code_map_decode_next_bb11_in(V_hi_0,V_lo_0,B) = 0
     [V_lo_0+1>=V_hi_0,B=2] 
* CE 19: eval_code_map_decode_next_bb11_in(V_hi_0,V_lo_0,B) = 1+ eval_code_map_decode_next_bb11_in(C,C,D)
     [V_hi_0>=V_lo_0+2,D=2,B=2] 
* CE 20: eval_code_map_decode_next_bb11_in(V_hi_0,V_lo_0,B) = 1+ eval_code_map_decode_next_bb11_in(C,V_lo_0,D)
     [V_hi_0>=V_lo_0+2,D=2,B=2] 
* CE 21: eval_code_map_decode_next_bb11_in(V_hi_0,V_lo_0,B) = 1+ eval_code_map_decode_next_bb11_in(V_hi_0,C,D)
     [V_hi_0>=V_lo_0+2,D=2,B=2] 

### Cost equations --> "Loop" of eval_code_map_decode_next_bb11_in/3 
* CEs [19] --> Loop 17 
* CEs [20] --> Loop 18 
* CEs [21] --> Loop 19 
* CEs [18] --> Loop 20 

#### Loops of eval_code_map_decode_next_bb11_in/3 
* Loop 17: eval_code_map_decode_next_bb11_in(V_hi_0,V_lo_0,B)->  eval_code_map_decode_next_bb11_in(A',A',B')
                  [V_hi_0>=V_lo_0+2,B'=2,B=2] 
* Loop 18: eval_code_map_decode_next_bb11_in(V_hi_0,V_lo_0,B)->  eval_code_map_decode_next_bb11_in(V_hi_0',V_lo_0,B')
                  [V_hi_0>=V_lo_0+2,B'=2,B=2] 
* Loop 19: eval_code_map_decode_next_bb11_in(V_hi_0,V_lo_0,B)->  eval_code_map_decode_next_bb11_in(V_hi_0,V_lo_0',B')
                  [V_hi_0>=V_lo_0+2,B'=2,B=2] 
* Loop 20: eval_code_map_decode_next_bb11_in(V_hi_0,V_lo_0,B) [V_lo_0+1>=V_hi_0,B=2] 

### Ranking functions of CR eval_code_map_decode_next_bb11_in(V_hi_0,V_lo_0,B) 

#### Partial ranking functions of CR eval_code_map_decode_next_bb11_in(V_hi_0,V_lo_0,B) 


### Resulting Chains:eval_code_map_decode_next_bb11_in(V_hi_0,V_lo_0,B) 
* [[18,19]]...
* [[18,19],20]
* [[18,19],17,20]
* [20]
* [17,20]


### Merging Chains  eval_code_map_decode_next_bb11_in/3 into  External patterns of execution 
* [[20]] --> 1 
* [[20,17],[20,17,[18,19]],[20,[18,19]]] --> 2 
* [[[18,19]]] --> 3 


### Specialization of cost equations eval_code_map_decode_next_bb1_in/1 
* CE 8 is refined into CE [22] 
* CE 7 is refined into CE [23] 
* CE 6 is refined into CE [24] 
* CE 5 is refined into CE [25] 
* CE 4 is refined into CE [26,27,28] 


#### Refined cost equations eval_code_map_decode_next_bb1_in/1 
* CE 22: eval_code_map_decode_next_bb1_in(B) = 0
     [B=6] 
* CE 23: eval_code_map_decode_next_bb1_in(B) = 0
     [B=5] 
* CE 24: eval_code_map_decode_next_bb1_in(B) = 0
     [B=4] 
* CE 25: eval_code_map_decode_next_bb1_in(B) = 0
     [B=3] 
* CE 26: eval_code_map_decode_next_bb1_in(B) = 2+ eval_code_map_decode_next_bb11_in(C,D,E):1+ eval_code_map_decode_next_bb1_in(B)
     [1>=C,E=2,D=0] 
* CE 27: eval_code_map_decode_next_bb1_in(B) = 2+ eval_code_map_decode_next_bb11_in(C,D,E):2+ eval_code_map_decode_next_bb1_in(B)
     [C>=2,E=2,D=0] 
* CE 28: eval_code_map_decode_next_bb1_in(B) = 2+ eval_code_map_decode_next_bb11_in(C,D,E):3
     [C>=2,E=2,D=0] 

### Cost equations --> "Loop" of eval_code_map_decode_next_bb1_in/1 
* CEs [28] --> Loop 21 
* CEs [26,27] --> Loop 22 
* CEs [22] --> Loop 23 
* CEs [23] --> Loop 24 
* CEs [24] --> Loop 25 
* CEs [25] --> Loop 26 

#### Loops of eval_code_map_decode_next_bb1_in/1 
* Loop 21: eval_code_map_decode_next_bb1_in(B) [] 
* Loop 22: eval_code_map_decode_next_bb1_in(B)->  eval_code_map_decode_next_bb1_in(B)
                  [] 
* Loop 23: eval_code_map_decode_next_bb1_in(B) [B=6] 
* Loop 24: eval_code_map_decode_next_bb1_in(B) [B=5] 
* Loop 25: eval_code_map_decode_next_bb1_in(B) [B=4] 
* Loop 26: eval_code_map_decode_next_bb1_in(B) [B=3] 

### Ranking functions of CR eval_code_map_decode_next_bb1_in(B) 

#### Partial ranking functions of CR eval_code_map_decode_next_bb1_in(B) 


### Resulting Chains:eval_code_map_decode_next_bb1_in(B) 
* [[22]]...
* [[22],26]
* [[22],25]
* [[22],24]
* [[22],23]
* [[22],21]...
* [26]
* [25]
* [24]
* [23]
* [21]...


### Merging Chains  eval_code_map_decode_next_bb1_in/1 into  External patterns of execution 
* [[26],[26,[22]]] --> 1 
* [[25],[25,[22]]] --> 2 
* [[24],[24,[22]]] --> 3 
* [[23],[23,[22]]] --> 4 
* [[21],[[22]],[21,[22]]] --> 5 


### Specialization of cost equations eval_code_map_decode_next_bb4_in/1 
* CE 17 is refined into CE [29] 


#### Refined cost equations eval_code_map_decode_next_bb4_in/1 
* CE 29: eval_code_map_decode_next_bb4_in(B) = 0
     [] 

### Cost equations --> "Loop" of eval_code_map_decode_next_bb4_in/1 
* CEs [29] --> Loop 27 

#### Loops of eval_code_map_decode_next_bb4_in/1 
* Loop 27: eval_code_map_decode_next_bb4_in(B) [] 

### Ranking functions of CR eval_code_map_decode_next_bb4_in(B) 

#### Partial ranking functions of CR eval_code_map_decode_next_bb4_in(B) 


### Resulting Chains:eval_code_map_decode_next_bb4_in(B) 
* [27]


### Merging Chains  eval_code_map_decode_next_bb4_in/1 into  External patterns of execution 
* [[27]] --> 1 


### Specialization of cost equations loop_cont_eval_code_map_decode_next_bb1_in/2 
* CE 12 is refined into CE [30] 
* CE 11 is refined into CE [31] 
* CE 10 is refined into CE [32] 
* CE 9 is refined into CE [33] 


#### Refined cost equations loop_cont_eval_code_map_decode_next_bb1_in/2 
* CE 30: loop_cont_eval_code_map_decode_next_bb1_in(B,A) = 0
     [B=6] 
* CE 31: loop_cont_eval_code_map_decode_next_bb1_in(B,A) = 0
     [B=5] 
* CE 32: loop_cont_eval_code_map_decode_next_bb1_in(B,A) = 0
     [B=4] 
* CE 33: loop_cont_eval_code_map_decode_next_bb1_in(B,A) = 0+ eval_code_map_decode_next_bb4_in(A):1
     [B=3] 

### Cost equations --> "Loop" of loop_cont_eval_code_map_decode_next_bb1_in/2 
* CEs [30] --> Loop 28 
* CEs [31] --> Loop 29 
* CEs [32] --> Loop 30 
* CEs [33] --> Loop 31 

#### Loops of loop_cont_eval_code_map_decode_next_bb1_in/2 
* Loop 28: loop_cont_eval_code_map_decode_next_bb1_in(B,A) [B=6] 
* Loop 29: loop_cont_eval_code_map_decode_next_bb1_in(B,A) [B=5] 
* Loop 30: loop_cont_eval_code_map_decode_next_bb1_in(B,A) [B=4] 
* Loop 31: loop_cont_eval_code_map_decode_next_bb1_in(B,A) [B=3] 

### Ranking functions of CR loop_cont_eval_code_map_decode_next_bb1_in(B,A) 

#### Partial ranking functions of CR loop_cont_eval_code_map_decode_next_bb1_in(B,A) 


### Resulting Chains:loop_cont_eval_code_map_decode_next_bb1_in(B,A) 
* [31]
* [30]
* [29]
* [28]


### Merging Chains  loop_cont_eval_code_map_decode_next_bb1_in/2 into  External patterns of execution 
* [[31]] --> 1 
* [[30]] --> 2 
* [[29]] --> 3 
* [[28]] --> 4 


### Specialization of cost equations eval_code_map_decode_next_bb0_in/1 
* CE 3 is refined into CE [34,35,36,37,38] 


#### Refined cost equations eval_code_map_decode_next_bb0_in/1 
* CE 34: eval_code_map_decode_next_bb0_in(B) = 1+ eval_code_map_decode_next_bb1_in(C):1+ loop_cont_eval_code_map_decode_next_bb1_in(D,B):1
     [D=3,C=3] 
* CE 35: eval_code_map_decode_next_bb0_in(B) = 1+ eval_code_map_decode_next_bb1_in(C):2+ loop_cont_eval_code_map_decode_next_bb1_in(D,B):2
     [D=4,C=4] 
* CE 36: eval_code_map_decode_next_bb0_in(B) = 1+ eval_code_map_decode_next_bb1_in(C):3+ loop_cont_eval_code_map_decode_next_bb1_in(D,B):3
     [D=5,C=5] 
* CE 37: eval_code_map_decode_next_bb0_in(B) = 1+ eval_code_map_decode_next_bb1_in(C):4+ loop_cont_eval_code_map_decode_next_bb1_in(D,B):4
     [D=6,C=6] 
* CE 38: eval_code_map_decode_next_bb0_in(B) = 1+ eval_code_map_decode_next_bb1_in(C):5
     [] 

### Cost equations --> "Loop" of eval_code_map_decode_next_bb0_in/1 
* CEs [38] --> Loop 32 
* CEs [34,35,36,37] --> Loop 33 

#### Loops of eval_code_map_decode_next_bb0_in/1 
* Loop 32: eval_code_map_decode_next_bb0_in(B) [] 
* Loop 33: eval_code_map_decode_next_bb0_in(B) [] 

### Ranking functions of CR eval_code_map_decode_next_bb0_in(B) 

#### Partial ranking functions of CR eval_code_map_decode_next_bb0_in(B) 


### Resulting Chains:eval_code_map_decode_next_bb0_in(B) 
* [33]
* [32]...


### Merging Chains  eval_code_map_decode_next_bb0_in/1 into  External patterns of execution 
* [[33]] --> 1 
* [[32]] --> 2 


### Specialization of cost equations eval_code_map_decode_next_start/1 
* CE 2 is refined into CE [39,40] 


#### Refined cost equations eval_code_map_decode_next_start/1 
* CE 39: eval_code_map_decode_next_start(B) = 0+ eval_code_map_decode_next_bb0_in(B):1
     [] 
* CE 40: eval_code_map_decode_next_start(B) = 0+ eval_code_map_decode_next_bb0_in(B):2
     [] 

### Cost equations --> "Loop" of eval_code_map_decode_next_start/1 
* CEs [40] --> Loop 34 
* CEs [39] --> Loop 35 

#### Loops of eval_code_map_decode_next_start/1 
* Loop 34: eval_code_map_decode_next_start(B) [] 
* Loop 35: eval_code_map_decode_next_start(B) [] 

### Ranking functions of CR eval_code_map_decode_next_start(B) 

#### Partial ranking functions of CR eval_code_map_decode_next_start(B) 


### Resulting Chains:eval_code_map_decode_next_start(B) 
* [35]
* [34]...


### Merging Chains  eval_code_map_decode_next_start/1 into  External patterns of execution 
* [[35]] --> 1 
* [[34]] --> 2 


Computing Bounds
=====================================

#### Cost of loops [18,19] 

 * loop 18:eval_code_map_decode_next_bb11_in(V_hi_0,V_lo_0,B) -> [eval_code_map_decode_next_bb11_in(V_hi_0',V_lo_0',B')] 
1
 * loop 19:eval_code_map_decode_next_bb11_in(V_hi_0,V_lo_0,B) -> [eval_code_map_decode_next_bb11_in(V_hi_0',V_lo_0',B')] 
1
#### Cost of phase [18,19]:eval_code_map_decode_next_bb11_in(V_hi_0,V_lo_0,B) -> [eval_code_map_decode_next_bb11_in(V_hi_0',V_lo_0',B')] 
2*it(18)+0
#### Cost of phase [18,19]:eval_code_map_decode_next_bb11_in(V_hi_0,V_lo_0,B) -> [eval_code_map_decode_next_bb11_in(V_hi_0',V_lo_0',B')] 
2*it(18)+0
#### Cost of phase [18,19]:eval_code_map_decode_next_bb11_in(V_hi_0,V_lo_0,B) -> [eval_code_map_decode_next_bb11_in(V_hi_0',V_lo_0',B')] 
2*it(18)+0
#### Cost of chains of eval_code_map_decode_next_bb11_in(V_hi_0,V_lo_0,B):
* Chain [[18,19]]...: 2*it(18)+0
  with precondition: [V_hi_0>=V_lo_0+2,B=2] 

* Chain [[18,19],20]: 2*it(18)+0
  with precondition: [B=2,V_hi_0>=V_lo_0+2] 

* Chain [[18,19],17,20]: 2*it(18)+1
  with precondition: [B=2,V_hi_0>=V_lo_0+2] 

* Chain [20]: 0
  with precondition: [B=2,V_lo_0+1>=V_hi_0] 

* Chain [17,20]: 1
  with precondition: [B=2,V_hi_0>=V_lo_0+2] 


#### Cost of loops [22] 

 * loop 22:eval_code_map_decode_next_bb1_in(B) -> [eval_code_map_decode_next_bb1_in(B')] 
1*s(4)+0
#### Cost of phase [22]:eval_code_map_decode_next_bb1_in(B) -> [eval_code_map_decode_next_bb1_in(B')] 
1*s(5)+0
#### Cost of phase [22]:eval_code_map_decode_next_bb1_in(B) -> [eval_code_map_decode_next_bb1_in(B')] 
1*s(5)+0
#### Cost of phase [22]:eval_code_map_decode_next_bb1_in(B) -> [eval_code_map_decode_next_bb1_in(B')] 
1*s(5)+0
#### Cost of phase [22]:eval_code_map_decode_next_bb1_in(B) -> [eval_code_map_decode_next_bb1_in(B')] 
1*s(5)+0
#### Cost of phase [22]:eval_code_map_decode_next_bb1_in(B) -> [eval_code_map_decode_next_bb1_in(B')] 
1*s(5)+0
#### Cost of phase [22]:eval_code_map_decode_next_bb1_in(B) -> [eval_code_map_decode_next_bb1_in(B')] 
1*s(5)+0
#### Cost of chains of eval_code_map_decode_next_bb1_in(B):
* Chain [[22]]...: 1*s(5)+0
  with precondition: [] 

* Chain [[22],26]: 1*s(5)+0
  with precondition: [B=3] 

* Chain [[22],25]: 1*s(5)+0
  with precondition: [B=4] 

* Chain [[22],24]: 1*s(5)+0
  with precondition: [B=5] 

* Chain [[22],23]: 1*s(5)+0
  with precondition: [B=6] 

* Chain [[22],21]...: 3*s(5)+2
  with precondition: [] 

* Chain [26]: 0
  with precondition: [B=3] 

* Chain [25]: 0
  with precondition: [B=4] 

* Chain [24]: 0
  with precondition: [B=5] 

* Chain [23]: 0
  with precondition: [B=6] 

* Chain [21]...: 2*s(6)+2
  with precondition: [] 


#### Cost of chains of eval_code_map_decode_next_bb4_in(B):
* Chain [27]: 0
  with precondition: [] 


#### Cost of chains of loop_cont_eval_code_map_decode_next_bb1_in(B,A):
* Chain [31]: 0
  with precondition: [B=3] 

* Chain [30]: 0
  with precondition: [B=4] 

* Chain [29]: 0
  with precondition: [B=5] 

* Chain [28]: 0
  with precondition: [B=6] 


#### Cost of chains of eval_code_map_decode_next_bb0_in(B):
* Chain [33]: 1*aux(8)+0
  with precondition: [] 

* Chain [32]...: 1*s(18)+1
  with precondition: [] 


#### Cost of chains of eval_code_map_decode_next_start(B):
* Chain [35]: 1*s(19)+0
  with precondition: [] 

* Chain [34]...: 1*s(20)+1
  with precondition: [] 


Closed-form bounds of eval_code_map_decode_next_start(B): 
-------------------------------------
* Chain [35] with precondition: [] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [34]... with precondition: [] 
    - Upper bound: inf 
    - Complexity: infinity 

### Maximum cost of eval_code_map_decode_next_start(B): inf 
Asymptotic class: infinity 

Time statistics: 
-------------------------------------
* Partial evaluation computed in 9 ms.
* Invariants computed in 14 ms.
   - Backward Invariants 7 ms.
   - Transitive Invariants 2 ms.
* Refinement performed in 25 ms.
* Termination proved in 4 ms.
* Upper bounds computed in 48 ms.
   - Equation cost structures 15 ms.
   - Phase cost structures 9 ms.
   - Chain cost structures 14 ms.
   - Solving cost expressions 0 ms.
* Total analysis performed in 116 ms.


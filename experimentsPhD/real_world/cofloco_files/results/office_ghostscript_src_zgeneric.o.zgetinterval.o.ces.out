Warning: Ignored call to eval_zgetinterval_stop/1 in equation eval_zgetinterval_bb18_in/1 

Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. non_recursive  : [eval_zgetinterval_bb18_in/1]
1. non_recursive  : [eval_zgetinterval_57/1]
2. non_recursive  : [eval_zgetinterval_56/1]
3. non_recursive  : [eval_zgetinterval_NewDefault_in/1]
4. non_recursive  : [eval_zgetinterval_53/1]
5. non_recursive  : [eval_zgetinterval_52/1]
6. non_recursive  : [eval_zgetinterval_55/1]
7. non_recursive  : [eval_zgetinterval_54/1]
8. non_recursive  : [eval_zgetinterval_bb14_in/1]
9. non_recursive  : [eval_zgetinterval_NewDefault3_in/1]
10. recursive  : [eval_zgetinterval_bb9_in/2]
11. non_recursive  : [loop_cont_eval_zgetinterval_bb9_in/2]
12. non_recursive  : [eval_zgetinterval_bb1_in/1]
13. non_recursive  : [eval_zgetinterval_bb0_in/1]
14. non_recursive  : [eval_zgetinterval_start/1]

#### Obtained direct recursion through partial evaluation 
0. SCC is completely evaluated into other SCCs
1. SCC is completely evaluated into other SCCs
2. SCC is completely evaluated into other SCCs
3. SCC is completely evaluated into other SCCs
4. SCC is completely evaluated into other SCCs
5. SCC is completely evaluated into other SCCs
6. SCC is completely evaluated into other SCCs
7. SCC is completely evaluated into other SCCs
8. SCC is completely evaluated into other SCCs
9. SCC is completely evaluated into other SCCs
10. SCC is partially evaluated into eval_zgetinterval_bb9_in/2
11. SCC is completely evaluated into other SCCs
12. SCC is partially evaluated into eval_zgetinterval_bb1_in/1
13. SCC is partially evaluated into eval_zgetinterval_bb0_in/1
14. SCC is partially evaluated into eval_zgetinterval_start/1

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations eval_zgetinterval_bb9_in/2 
* CE 9 is refined into CE [10] 
* CE 8 is refined into CE [11] 
* CE 7 is refined into CE [12] 


#### Refined cost equations eval_zgetinterval_bb9_in/2 
* CE 10: eval_zgetinterval_bb9_in(V_index_0,B) = 0
     [B=2,V_index_0=0] 
* CE 11: eval_zgetinterval_bb9_in(V_index_0,B) = 1+ eval_zgetinterval_bb9_in(C,D)
     [V_index_0>=1,V_index_0=C+1,D=2,B=2] 
* CE 12: eval_zgetinterval_bb9_in(V_index_0,B) = 1+ eval_zgetinterval_bb9_in(C,D)
     [0>=V_index_0+1,V_index_0=C+1,D=2,B=2] 

### Cost equations --> "Loop" of eval_zgetinterval_bb9_in/2 
* CEs [11] --> Loop 7 
* CEs [12] --> Loop 8 
* CEs [10] --> Loop 9 

#### Loops of eval_zgetinterval_bb9_in/2 
* Loop 7: eval_zgetinterval_bb9_in(V_index_0,B)->  eval_zgetinterval_bb9_in(V_index_0',B')
                  [V_index_0>=1,V_index_0=V_index_0'+1,B'=2,B=2] 
* Loop 8: eval_zgetinterval_bb9_in(V_index_0,B)->  eval_zgetinterval_bb9_in(V_index_0',B')
                  [0>=V_index_0+1,V_index_0=V_index_0'+1,B'=2,B=2] 
* Loop 9: eval_zgetinterval_bb9_in(V_index_0,B) [B=2,V_index_0=0] 

### Ranking functions of CR eval_zgetinterval_bb9_in(V_index_0,B) 
* RF of phase [7]: [V_index_0]

#### Partial ranking functions of CR eval_zgetinterval_bb9_in(V_index_0,B) 
* Partial RF of phase [7]:
  - RF of loop [7:1]:
    V_index_0


### Resulting Chains:eval_zgetinterval_bb9_in(V_index_0,B) 
* [[8]]...
* [[7],9]
* [9]


### Merging Chains  eval_zgetinterval_bb9_in/2 into  External patterns of execution 
* [[9]] --> 1 
* [[9,[7]]] --> 2 
* [[[8]]] --> 3 


### Specialization of cost equations eval_zgetinterval_bb1_in/1 
* CE 5 is refined into CE [13] 
* CE 6 is refined into CE [14,15,16] 


#### Refined cost equations eval_zgetinterval_bb1_in/1 
* CE 13: eval_zgetinterval_bb1_in(B) = 0
     [] 
* CE 14: eval_zgetinterval_bb1_in(B) = 1+ eval_zgetinterval_bb9_in(C,D):1
     [D=2,C=0] 
* CE 15: eval_zgetinterval_bb1_in(B) = 1+ eval_zgetinterval_bb9_in(C,D):2
     [C>=1,D=2] 
* CE 16: eval_zgetinterval_bb1_in(B) = 1+ eval_zgetinterval_bb9_in(C,D):3
     [0>=C+1,D=2] 

### Cost equations --> "Loop" of eval_zgetinterval_bb1_in/1 
* CEs [16] --> Loop 10 
* CEs [13,14,15] --> Loop 11 

#### Loops of eval_zgetinterval_bb1_in/1 
* Loop 10: eval_zgetinterval_bb1_in(B) [] 
* Loop 11: eval_zgetinterval_bb1_in(B) [] 

### Ranking functions of CR eval_zgetinterval_bb1_in(B) 

#### Partial ranking functions of CR eval_zgetinterval_bb1_in(B) 


### Resulting Chains:eval_zgetinterval_bb1_in(B) 
* [11]
* [10]...


### Merging Chains  eval_zgetinterval_bb1_in/1 into  External patterns of execution 
* [[11]] --> 1 
* [[10]] --> 2 


### Specialization of cost equations eval_zgetinterval_bb0_in/1 
* CE 3 is refined into CE [17,18] 
* CE 4 is refined into CE [19] 


#### Refined cost equations eval_zgetinterval_bb0_in/1 
* CE 17: eval_zgetinterval_bb0_in(B) = 0+ eval_zgetinterval_bb1_in(B):1
     [] 
* CE 18: eval_zgetinterval_bb0_in(B) = 0+ eval_zgetinterval_bb1_in(B):2
     [] 
* CE 19: eval_zgetinterval_bb0_in(B) = 0
     [] 

### Cost equations --> "Loop" of eval_zgetinterval_bb0_in/1 
* CEs [17,19] --> Loop 12 
* CEs [18] --> Loop 13 

#### Loops of eval_zgetinterval_bb0_in/1 
* Loop 12: eval_zgetinterval_bb0_in(B) [] 
* Loop 13: eval_zgetinterval_bb0_in(B) [] 

### Ranking functions of CR eval_zgetinterval_bb0_in(B) 

#### Partial ranking functions of CR eval_zgetinterval_bb0_in(B) 


### Resulting Chains:eval_zgetinterval_bb0_in(B) 
* [13]...
* [12]


### Merging Chains  eval_zgetinterval_bb0_in/1 into  External patterns of execution 
* [[12]] --> 1 
* [[13]] --> 2 


### Specialization of cost equations eval_zgetinterval_start/1 
* CE 2 is refined into CE [20,21] 


#### Refined cost equations eval_zgetinterval_start/1 
* CE 20: eval_zgetinterval_start(B) = 0+ eval_zgetinterval_bb0_in(B):1
     [] 
* CE 21: eval_zgetinterval_start(B) = 0+ eval_zgetinterval_bb0_in(B):2
     [] 

### Cost equations --> "Loop" of eval_zgetinterval_start/1 
* CEs [21] --> Loop 14 
* CEs [20] --> Loop 15 

#### Loops of eval_zgetinterval_start/1 
* Loop 14: eval_zgetinterval_start(B) [] 
* Loop 15: eval_zgetinterval_start(B) [] 

### Ranking functions of CR eval_zgetinterval_start(B) 

#### Partial ranking functions of CR eval_zgetinterval_start(B) 


### Resulting Chains:eval_zgetinterval_start(B) 
* [15]
* [14]...


### Merging Chains  eval_zgetinterval_start/1 into  External patterns of execution 
* [[15]] --> 1 
* [[14]] --> 2 


Computing Bounds
=====================================

#### Cost of loops [8] 

 * loop 8:eval_zgetinterval_bb9_in(V_index_0,B) -> [eval_zgetinterval_bb9_in(V_index_0',B')] 
1
#### Cost of phase [8]:eval_zgetinterval_bb9_in(V_index_0,B) -> [eval_zgetinterval_bb9_in(V_index_0',B')] 
1*it(8)+0
#### Cost of loops [7] 

 * loop 7:eval_zgetinterval_bb9_in(V_index_0,B) -> [eval_zgetinterval_bb9_in(V_index_0',B')] 
1
#### Cost of phase [7]:eval_zgetinterval_bb9_in(V_index_0,B) -> [eval_zgetinterval_bb9_in(V_index_0',B')] 
1*it(7)+0
  Such that:it(7) =< V_index_0
it(7) =< V_index_0-V_index_0'

#### Cost of chains of eval_zgetinterval_bb9_in(V_index_0,B):
* Chain [[8]]...: 1*it(8)+0
  with precondition: [0>=V_index_0+1,B=2] 

* Chain [[7],9]: 1*it(7)+0
  Such that:it(7) =< V_index_0

  with precondition: [B=2,V_index_0>=1] 

* Chain [9]: 0
  with precondition: [V_index_0=0,B=2] 


#### Cost of chains of eval_zgetinterval_bb1_in(B):
* Chain [11]: 1*aux(1)+0
  with precondition: [] 

* Chain [10]...: 1*s(2)+1
  with precondition: [] 


#### Cost of chains of eval_zgetinterval_bb0_in(B):
* Chain [13]...: 1*s(3)+1
  with precondition: [] 

* Chain [12]: 1*aux(2)+0
  with precondition: [] 


#### Cost of chains of eval_zgetinterval_start(B):
* Chain [15]: 1*s(5)+0
  with precondition: [] 

* Chain [14]...: 1*s(6)+1
  with precondition: [] 


Closed-form bounds of eval_zgetinterval_start(B): 
-------------------------------------
* Chain [15] with precondition: [] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [14]... with precondition: [] 
    - Upper bound: inf 
    - Complexity: infinity 

### Maximum cost of eval_zgetinterval_start(B): inf 
Asymptotic class: infinity 

Time statistics: 
-------------------------------------
* Partial evaluation computed in 6 ms.
* Invariants computed in 5 ms.
   - Backward Invariants 1 ms.
   - Transitive Invariants 2 ms.
* Refinement performed in 11 ms.
* Termination proved in 1 ms.
* Upper bounds computed in 9 ms.
   - Equation cost structures 3 ms.
   - Phase cost structures 4 ms.
   - Chain cost structures 2 ms.
   - Solving cost expressions 1 ms.
* Total analysis performed in 45 ms.


Warning: Ignored call to eval_equalizer_filter_stop/1 in equation loop_cont_eval_equalizer_filter_bb5_in/2 

Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. recursive  : [eval_equalizer_filter_bb10_in/10]
1. recursive  : [eval_equalizer_filter_bb12_in/8,eval_equalizer_filter_bb7_in/8,loop_cont_eval_equalizer_filter_bb10_in/9]
2. recursive  : [eval_equalizer_filter_bb5_in/4,loop_cont_eval_equalizer_filter_bb7_in/5]
3. non_recursive  : [loop_cont_eval_equalizer_filter_bb5_in/2]
4. non_recursive  : [eval_equalizer_filter_bb4_in/3]
5. non_recursive  : [eval_equalizer_filter_bb3_in/2]
6. non_recursive  : [eval_equalizer_filter_bb0_in/1]
7. non_recursive  : [eval_equalizer_filter_start/1]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into eval_equalizer_filter_bb10_in/10
1. SCC is partially evaluated into eval_equalizer_filter_bb7_in/8
2. SCC is partially evaluated into eval_equalizer_filter_bb5_in/4
3. SCC is completely evaluated into other SCCs
4. SCC is partially evaluated into eval_equalizer_filter_bb4_in/3
5. SCC is partially evaluated into eval_equalizer_filter_bb3_in/2
6. SCC is partially evaluated into eval_equalizer_filter_bb0_in/1
7. SCC is partially evaluated into eval_equalizer_filter_start/1

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations eval_equalizer_filter_bb10_in/10 
* CE 16 is refined into CE [17] 
* CE 15 is refined into CE [18] 


#### Refined cost equations eval_equalizer_filter_bb10_in/10 
* CE 17: eval_equalizer_filter_bb10_in(A,B,C,D,E,F,A,B,C,D) = 0
     [A>=D+1,E>=B,E>=0,F=2] 
* CE 18: eval_equalizer_filter_bb10_in(V_5,V_21,V_sb_0,V_ch_0,V_s_0,B,C,D,E,F) = 1+ eval_equalizer_filter_bb10_in(V_5,V_21,V_sb_0,V_ch_0,G,H,C,D,E,F)
     [V_21>=V_s_0+1,V_5>=V_ch_0+1,V_s_0>=0,V_s_0+1=G,H=2,B=2] 

### Cost equations --> "Loop" of eval_equalizer_filter_bb10_in/10 
* CEs [18] --> Loop 11 
* CEs [17] --> Loop 12 

#### Loops of eval_equalizer_filter_bb10_in/10 
* Loop 11: eval_equalizer_filter_bb10_in(V_5,V_21,V_sb_0,V_ch_0,V_s_0,B,C,D,E,F)->  eval_equalizer_filter_bb10_in(V_5,V_21,V_sb_0,V_ch_0,V_s_0',B',C,D,E,F)
                  [V_21>=V_s_0+1,V_5>=V_ch_0+1,V_s_0>=0,V_s_0+1=V_s_0',B'=2,B=2] 
* Loop 12: eval_equalizer_filter_bb10_in(A,B,C,D,E,F,A,B,C,D) [A>=D+1,E>=B,E>=0,F=2] 

### Ranking functions of CR eval_equalizer_filter_bb10_in(V_5,V_21,V_sb_0,V_ch_0,V_s_0,B,C,D,E,F) 
* RF of phase [11]: [V_21-V_s_0]

#### Partial ranking functions of CR eval_equalizer_filter_bb10_in(V_5,V_21,V_sb_0,V_ch_0,V_s_0,B,C,D,E,F) 
* Partial RF of phase [11]:
  - RF of loop [11:1]:
    V_21-V_s_0


### Resulting Chains:eval_equalizer_filter_bb10_in(V_5,V_21,V_sb_0,V_ch_0,V_s_0,B,C,D,E,F) 
* [[11],12]
* [12]


### Merging Chains  eval_equalizer_filter_bb10_in/10 into  External patterns of execution 
* [[12]] --> 1 
* [[12,[11]]] --> 2 


### Specialization of cost equations eval_equalizer_filter_bb7_in/8 
* CE 14 is refined into CE [19] 
* CE 12 is refined into CE [20,21] 
* CE 13 is refined into CE [22] 


#### Refined cost equations eval_equalizer_filter_bb7_in/8 
* CE 19: eval_equalizer_filter_bb7_in(A,B,C,D,E,A,B,F) = 0
     [D>=A,F=C+1,E=3] 
* CE 20: eval_equalizer_filter_bb7_in(V_5,V_21,V_sb_0,V_ch_0,B,C,D,E) = 2+ eval_equalizer_filter_bb10_in(V_5,V_21,V_sb_0,V_ch_0,F,G,V_5,V_21,V_sb_0,V_ch_0):1+ eval_equalizer_filter_bb7_in(V_5,V_21,V_sb_0,H,I,C,D,E)
     [V_5>=V_ch_0+1,0>=V_21,V_ch_0+1=H,I=3,G=2,F=0,B=3] 
* CE 21: eval_equalizer_filter_bb7_in(V_5,V_21,V_sb_0,V_ch_0,B,C,D,E) = 2+ eval_equalizer_filter_bb10_in(V_5,V_21,V_sb_0,V_ch_0,F,G,V_5,V_21,V_sb_0,V_ch_0):2+ eval_equalizer_filter_bb7_in(V_5,V_21,V_sb_0,H,I,C,D,E)
     [V_5>=V_ch_0+1,V_21>=1,V_ch_0+1=H,I=3,G=2,F=0,B=3] 
* CE 22: eval_equalizer_filter_bb7_in(V_5,V_21,V_sb_0,V_ch_0,B,C,D,E) = 1+ eval_equalizer_filter_bb7_in(V_5,V_21,V_sb_0,F,G,C,D,E)
     [V_5>=V_ch_0+1,V_ch_0+1=F,G=3,B=3] 

### Cost equations --> "Loop" of eval_equalizer_filter_bb7_in/8 
* CEs [21] --> Loop 13 
* CEs [20,22] --> Loop 14 
* CEs [19] --> Loop 15 

#### Loops of eval_equalizer_filter_bb7_in/8 
* Loop 13: eval_equalizer_filter_bb7_in(V_5,V_21,V_sb_0,V_ch_0,B,C,D,E)->  eval_equalizer_filter_bb7_in(V_5,V_21,V_sb_0,V_ch_0',B',C,D,E)
                  [V_5>=V_ch_0+1,V_21>=1,V_ch_0+1=V_ch_0',B'=3,B=3] 
* Loop 14: eval_equalizer_filter_bb7_in(V_5,V_21,V_sb_0,V_ch_0,B,C,D,E)->  eval_equalizer_filter_bb7_in(V_5,V_21,V_sb_0,V_ch_0',B',C,D,E)
                  [V_5>=V_ch_0+1,V_ch_0+1=V_ch_0',B'=3,B=3] 
* Loop 15: eval_equalizer_filter_bb7_in(A,B,C,D,E,A,B,F) [D>=A,C+1=F,E=3] 

### Ranking functions of CR eval_equalizer_filter_bb7_in(V_5,V_21,V_sb_0,V_ch_0,B,C,D,E) 
* RF of phase [13,14]: [V_5-V_ch_0]

#### Partial ranking functions of CR eval_equalizer_filter_bb7_in(V_5,V_21,V_sb_0,V_ch_0,B,C,D,E) 
* Partial RF of phase [13,14]:
  - RF of loop [13:1,14:1]:
    V_5-V_ch_0


### Resulting Chains:eval_equalizer_filter_bb7_in(V_5,V_21,V_sb_0,V_ch_0,B,C,D,E) 
* [[13,14],15]
* [15]


### Merging Chains  eval_equalizer_filter_bb7_in/8 into  External patterns of execution 
* [[15]] --> 1 
* [[15,[13,14]]] --> 2 


### Specialization of cost equations eval_equalizer_filter_bb5_in/4 
* CE 11 is refined into CE [23] 
* CE 10 is refined into CE [24,25] 


#### Refined cost equations eval_equalizer_filter_bb5_in/4 
* CE 23: eval_equalizer_filter_bb5_in(V_5,V_21,V_sb_0,B) = 0
     [V_sb_0>=32,B=4] 
* CE 24: eval_equalizer_filter_bb5_in(V_5,V_21,V_sb_0,B) = 2+ eval_equalizer_filter_bb7_in(V_5,V_21,C,D,E,V_5,V_21,F):1+ eval_equalizer_filter_bb5_in(V_5,V_21,F,G)
     [32>=F,0>=V_5,F=C+1,F=V_sb_0+1,G=4,E=3,D=0,B=4] 
* CE 25: eval_equalizer_filter_bb5_in(V_5,V_21,V_sb_0,B) = 2+ eval_equalizer_filter_bb7_in(V_5,V_21,C,D,E,V_5,V_21,F):2+ eval_equalizer_filter_bb5_in(V_5,V_21,F,G)
     [V_5>=1,32>=F,F=C+1,F=V_sb_0+1,G=4,E=3,D=0,B=4] 

### Cost equations --> "Loop" of eval_equalizer_filter_bb5_in/4 
* CEs [25] --> Loop 16 
* CEs [24] --> Loop 17 
* CEs [23] --> Loop 18 

#### Loops of eval_equalizer_filter_bb5_in/4 
* Loop 16: eval_equalizer_filter_bb5_in(V_5,V_21,V_sb_0,B)->  eval_equalizer_filter_bb5_in(V_5,V_21,V_sb_0',B')
                  [V_5>=1,31>=V_sb_0,V_sb_0+1=V_sb_0',B'=4,B=4] 
* Loop 17: eval_equalizer_filter_bb5_in(V_5,V_21,V_sb_0,B)->  eval_equalizer_filter_bb5_in(V_5,V_21,V_sb_0',B')
                  [31>=V_sb_0,0>=V_5,V_sb_0+1=V_sb_0',B'=4,B=4] 
* Loop 18: eval_equalizer_filter_bb5_in(V_5,V_21,V_sb_0,B) [V_sb_0>=32,B=4] 

### Ranking functions of CR eval_equalizer_filter_bb5_in(V_5,V_21,V_sb_0,B) 
* RF of phase [16]: [-V_sb_0+32]

#### Partial ranking functions of CR eval_equalizer_filter_bb5_in(V_5,V_21,V_sb_0,B) 
* Partial RF of phase [16]:
  - RF of loop [16:1]:
    -V_sb_0+32


### Resulting Chains:eval_equalizer_filter_bb5_in(V_5,V_21,V_sb_0,B) 
* [[16],18]


### Merging Chains  eval_equalizer_filter_bb5_in/4 into  External patterns of execution 
* [[18,[16]]] --> 1 


### Specialization of cost equations eval_equalizer_filter_bb4_in/3 
* CE 7 is refined into CE [26] 


#### Refined cost equations eval_equalizer_filter_bb4_in/3 
* CE 26: eval_equalizer_filter_bb4_in(V_5,V_21,B) = 1+ eval_equalizer_filter_bb5_in(V_5,V_21,C,D):1
     [V_21>=12,V_5>=1,36>=V_21,2>=V_5,D=4,C=0] 

### Cost equations --> "Loop" of eval_equalizer_filter_bb4_in/3 
* CEs [26] --> Loop 19 

#### Loops of eval_equalizer_filter_bb4_in/3 
* Loop 19: eval_equalizer_filter_bb4_in(V_5,V_21,B) [V_21>=12,V_5>=1,36>=V_21,2>=V_5] 

### Ranking functions of CR eval_equalizer_filter_bb4_in(V_5,V_21,B) 

#### Partial ranking functions of CR eval_equalizer_filter_bb4_in(V_5,V_21,B) 


### Resulting Chains:eval_equalizer_filter_bb4_in(V_5,V_21,B) 
* [19]


### Merging Chains  eval_equalizer_filter_bb4_in/3 into  External patterns of execution 
* [[19]] --> 1 


### Specialization of cost equations eval_equalizer_filter_bb3_in/2 
* CE 8 is refined into CE [27] 
* CE 9 is refined into CE [28] 


#### Refined cost equations eval_equalizer_filter_bb3_in/2 
* CE 27: eval_equalizer_filter_bb3_in(V_5,B) = 0+ eval_equalizer_filter_bb4_in(V_5,C,B):1
     [V_5>=1,2>=V_5,C=18] 
* CE 28: eval_equalizer_filter_bb3_in(V_5,B) = 0+ eval_equalizer_filter_bb4_in(V_5,C,B):1
     [V_5>=1,2>=V_5,C=36] 

### Cost equations --> "Loop" of eval_equalizer_filter_bb3_in/2 
* CEs [27,28] --> Loop 20 

#### Loops of eval_equalizer_filter_bb3_in/2 
* Loop 20: eval_equalizer_filter_bb3_in(V_5,B) [V_5>=1,2>=V_5] 

### Ranking functions of CR eval_equalizer_filter_bb3_in(V_5,B) 

#### Partial ranking functions of CR eval_equalizer_filter_bb3_in(V_5,B) 


### Resulting Chains:eval_equalizer_filter_bb3_in(V_5,B) 
* [20]


### Merging Chains  eval_equalizer_filter_bb3_in/2 into  External patterns of execution 
* [[20]] --> 1 


### Specialization of cost equations eval_equalizer_filter_bb0_in/1 
* CE 3 is refined into CE [29] 
* CE 4 is refined into CE [30] 
* CE 5 is refined into CE [31] 
* CE 6 is refined into CE [32] 


#### Refined cost equations eval_equalizer_filter_bb0_in/1 
* CE 29: eval_equalizer_filter_bb0_in(B) = 0+ eval_equalizer_filter_bb4_in(C,D,B):1
     [D=12,C=2] 
* CE 30: eval_equalizer_filter_bb0_in(B) = 0+ eval_equalizer_filter_bb3_in(C,B):1
     [C=2] 
* CE 31: eval_equalizer_filter_bb0_in(B) = 0+ eval_equalizer_filter_bb4_in(C,D,B):1
     [D=12,C=1] 
* CE 32: eval_equalizer_filter_bb0_in(B) = 0+ eval_equalizer_filter_bb3_in(C,B):1
     [C=1] 

### Cost equations --> "Loop" of eval_equalizer_filter_bb0_in/1 
* CEs [29,30,31,32] --> Loop 21 

#### Loops of eval_equalizer_filter_bb0_in/1 
* Loop 21: eval_equalizer_filter_bb0_in(B) [] 

### Ranking functions of CR eval_equalizer_filter_bb0_in(B) 

#### Partial ranking functions of CR eval_equalizer_filter_bb0_in(B) 


### Resulting Chains:eval_equalizer_filter_bb0_in(B) 
* [21]


### Merging Chains  eval_equalizer_filter_bb0_in/1 into  External patterns of execution 
* [[21]] --> 1 


### Specialization of cost equations eval_equalizer_filter_start/1 
* CE 2 is refined into CE [33] 


#### Refined cost equations eval_equalizer_filter_start/1 
* CE 33: eval_equalizer_filter_start(B) = 0+ eval_equalizer_filter_bb0_in(B):1
     [] 

### Cost equations --> "Loop" of eval_equalizer_filter_start/1 
* CEs [33] --> Loop 22 

#### Loops of eval_equalizer_filter_start/1 
* Loop 22: eval_equalizer_filter_start(B) [] 

### Ranking functions of CR eval_equalizer_filter_start(B) 

#### Partial ranking functions of CR eval_equalizer_filter_start(B) 


### Resulting Chains:eval_equalizer_filter_start(B) 
* [22]


### Merging Chains  eval_equalizer_filter_start/1 into  External patterns of execution 
* [[22]] --> 1 


Computing Bounds
=====================================

#### Cost of loops [11] 

 * loop 11:eval_equalizer_filter_bb10_in(V_5,V_21,V_sb_0,V_ch_0,V_s_0,B,C,D,E,F) -> [eval_equalizer_filter_bb10_in(V_5',V_21',V_sb_0',V_ch_0',V_s_0',B',C',D',E',F')] 
1
#### Cost of phase [11]:eval_equalizer_filter_bb10_in(V_5,V_21,V_sb_0,V_ch_0,V_s_0,B,C,D,E,F) -> [eval_equalizer_filter_bb10_in(V_5',V_21',V_sb_0',V_ch_0',V_s_0',B',C',D',E',F')] 
1*it(11)+0
  Such that:it(11) =< V_21-V_s_0
it(11) =< V_21-V_s_0-V_21'+V_s_0'

#### Cost of chains of eval_equalizer_filter_bb10_in(V_5,V_21,V_sb_0,V_ch_0,V_s_0,B,C,D,E,F):
* Chain [[11],12]: 1*it(11)+0
  Such that:it(11) =< -V_s_0+D

  with precondition: [B=2,V_5=C,V_21=D,V_sb_0=E,V_ch_0=F,V_s_0>=0,V_5>=V_ch_0+1,V_21>=V_s_0+1] 

* Chain [12]: 0
  with precondition: [B=2,E=V_sb_0,V_5=C,V_21=D,V_ch_0=F,V_s_0>=0,V_s_0>=V_21,V_5>=V_ch_0+1] 


#### Cost of loops [13,14] 

 * loop 13:eval_equalizer_filter_bb7_in(V_5,V_21,V_sb_0,V_ch_0,B,C,D,E) -> [eval_equalizer_filter_bb7_in(V_5',V_21',V_sb_0',V_ch_0',B',C',D',E')] 
1*s(2)+2
  Such that:s(2) =< V_21'

 * loop 14:eval_equalizer_filter_bb7_in(V_5,V_21,V_sb_0,V_ch_0,B,C,D,E) -> [eval_equalizer_filter_bb7_in(V_5',V_21',V_sb_0',V_ch_0',B',C',D',E')] 
2
#### Cost of phase [13,14]:eval_equalizer_filter_bb7_in(V_5,V_21,V_sb_0,V_ch_0,B,C,D,E) -> [eval_equalizer_filter_bb7_in(V_5',V_21',V_sb_0',V_ch_0',B',C',D',E')] 
4*it(13)+1*s(3)+0
  Such that:aux(1) =< V_21
aux(2) =< V_5-V_ch_0
aux(3) =< V_5-V_ch_0-V_5'+V_ch_0'
it(13) =< aux(2)
it(13) =< aux(3)
s(3) =< it(13)*aux(1)

#### Cost of chains of eval_equalizer_filter_bb7_in(V_5,V_21,V_sb_0,V_ch_0,B,C,D,E):
* Chain [[13,14],15]: 4*it(13)+1*s(3)+0
  Such that:aux(1) =< V_21
aux(4) =< -V_ch_0+C
it(13) =< aux(4)
s(3) =< it(13)*aux(1)

  with precondition: [B=3,V_5=C,V_21=D,V_sb_0+1=E,31>=V_sb_0,V_ch_0>=0,V_5>=V_ch_0+1] 

* Chain [15]: 0
  with precondition: [B=3,D=V_21,V_5=C,V_sb_0+1=E,31>=V_sb_0,V_ch_0>=0,V_ch_0>=V_5] 


#### Cost of loops [16] 

 * loop 16:eval_equalizer_filter_bb5_in(V_5,V_21,V_sb_0,B) -> [eval_equalizer_filter_bb5_in(V_5',V_21',V_sb_0',B')] 
4*s(10)+1*s(11)+2
  Such that:s(8) =< V_21
s(9) =< V_5'
s(10) =< s(9)
s(11) =< s(10)*s(8)

#### Cost of phase [16]:eval_equalizer_filter_bb5_in(V_5,V_21,V_sb_0,B) -> [eval_equalizer_filter_bb5_in(V_5',V_21',V_sb_0',B')] 
2*it(16)+4*s(12)+1*s(13)+0
  Such that:s(8) =< V_21
s(14) =< -2*V_sb_0+64
s(14) =< -2*V_sb_0+2*V_sb_0'
it(16) =< -V_sb_0+32
it(16) =< -V_sb_0+V_sb_0'
s(12) =< s(14)
s(13) =< s(12)*s(8)

#### Cost of chains of eval_equalizer_filter_bb5_in(V_5,V_21,V_sb_0,B):
* Chain [[16],18]: 2*it(16)+4*s(12)+1*s(13)+0
  Such that:s(8) =< V_21
s(14) =< -2*V_sb_0+64
it(16) =< -V_sb_0+32
s(12) =< s(14)
s(13) =< s(12)*s(8)

  with precondition: [B=4,2>=V_5,36>=V_21,31>=V_sb_0,V_5>=1,V_21>=12] 


#### Cost of chains of eval_equalizer_filter_bb4_in(V_5,V_21,B):
* Chain [19]: 2*s(17)+4*s(18)+1*s(19)+1
  Such that:s(17) =< 32
s(16) =< 64
s(15) =< V_21
s(18) =< s(16)
s(19) =< s(18)*s(15)

  with precondition: [2>=V_5,36>=V_21,V_5>=1,V_21>=12] 


#### Cost of chains of eval_equalizer_filter_bb3_in(V_5,B):
* Chain [20]: 4097
  with precondition: [2>=V_5,V_5>=1] 


#### Cost of chains of eval_equalizer_filter_bb0_in(B):
* Chain [21]: 6273
  with precondition: [] 


#### Cost of chains of eval_equalizer_filter_start(B):
* Chain [22]: 6273
  with precondition: [] 


Closed-form bounds of eval_equalizer_filter_start(B): 
-------------------------------------
* Chain [22] with precondition: [] 
    - Upper bound: 6273 
    - Complexity: constant 

### Maximum cost of eval_equalizer_filter_start(B): 6273 
Asymptotic class: constant 

Time statistics: 
-------------------------------------
* Partial evaluation computed in 19 ms.
* Invariants computed in 42 ms.
   - Backward Invariants 17 ms.
   - Transitive Invariants 9 ms.
* Refinement performed in 57 ms.
* Termination proved in 9 ms.
* Upper bounds computed in 71 ms.
   - Equation cost structures 24 ms.
   - Phase cost structures 45 ms.
   - Chain cost structures 14 ms.
   - Solving cost expressions 0 ms.
* Total analysis performed in 230 ms.


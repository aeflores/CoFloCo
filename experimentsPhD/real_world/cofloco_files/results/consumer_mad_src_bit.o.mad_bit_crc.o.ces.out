Warning: Ignored call to eval_mad_bit_crc_stop/1 in equation loop_cont_eval_mad_bit_crc_bb7_in/2 

Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. recursive  : [eval_mad_bit_crc_4/3,eval_mad_bit_crc_5/3,eval_mad_bit_crc_bb1_in/3]
1. recursive  : [eval_mad_bit_crc_78/3,eval_mad_bit_crc_79/3,eval_mad_bit_crc_bb7_in/2]
2. non_recursive  : [loop_cont_eval_mad_bit_crc_bb7_in/2]
3. non_recursive  : [eval_mad_bit_crc_69/2]
4. non_recursive  : [eval_mad_bit_crc_68/2]
5. non_recursive  : [eval_mad_bit_crc_bb6_in/2]
6. non_recursive  : [eval_mad_bit_crc_59/2]
7. non_recursive  : [eval_mad_bit_crc_58/2]
8. non_recursive  : [eval_mad_bit_crc_bb5_in/2]
9. non_recursive  : [eval_mad_bit_crc_49/2]
10. non_recursive  : [eval_mad_bit_crc_48/2]
11. non_recursive  : [eval_mad_bit_crc_NewDefault_in/2]
12. non_recursive  : [loop_cont_eval_mad_bit_crc_bb1_in/3]
13. non_recursive  : [eval_mad_bit_crc_bb0_in/2]
14. non_recursive  : [eval_mad_bit_crc_start/4]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into eval_mad_bit_crc_bb1_in/3
1. SCC is partially evaluated into eval_mad_bit_crc_bb7_in/2
2. SCC is completely evaluated into other SCCs
3. SCC is partially evaluated into eval_mad_bit_crc_69/2
4. SCC is completely evaluated into other SCCs
5. SCC is completely evaluated into other SCCs
6. SCC is completely evaluated into other SCCs
7. SCC is completely evaluated into other SCCs
8. SCC is completely evaluated into other SCCs
9. SCC is completely evaluated into other SCCs
10. SCC is completely evaluated into other SCCs
11. SCC is partially evaluated into eval_mad_bit_crc_NewDefault_in/2
12. SCC is partially evaluated into loop_cont_eval_mad_bit_crc_bb1_in/3
13. SCC is partially evaluated into eval_mad_bit_crc_bb0_in/2
14. SCC is partially evaluated into eval_mad_bit_crc_start/4

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations eval_mad_bit_crc_bb1_in/3 
* CE 16 is refined into CE [28] 
* CE 15 is refined into CE [29] 
* CE 13 is refined into CE [30] 
* CE 12 is refined into CE [31] 
* CE 10 is refined into CE [32] 
* CE 9 is refined into CE [33] 
* CE 7 is refined into CE [34] 
* CE 6 is refined into CE [35] 
* CE 14 is refined into CE [36] 
* CE 11 is refined into CE [37] 
* CE 8 is refined into CE [38] 
* CE 5 is refined into CE [39] 
* CE 4 is refined into CE [40] 


#### Refined cost equations eval_mad_bit_crc_bb1_in/3 
* CE 28: eval_mad_bit_crc_bb1_in(A,B,A) = 0
     [0>=A+1,B=6] 
* CE 29: eval_mad_bit_crc_bb1_in(A,B,A) = 0
     [A>=1,31>=A,B=6] 
* CE 30: eval_mad_bit_crc_bb1_in(A,B,A) = 0
     [0>=A+1,B=5] 
* CE 31: eval_mad_bit_crc_bb1_in(A,B,A) = 0
     [A>=1,31>=A,B=5] 
* CE 32: eval_mad_bit_crc_bb1_in(A,B,A) = 0
     [0>=A+1,B=4] 
* CE 33: eval_mad_bit_crc_bb1_in(A,B,A) = 0
     [A>=1,31>=A,B=4] 
* CE 34: eval_mad_bit_crc_bb1_in(A,B,A) = 0
     [0>=A+1,B=3] 
* CE 35: eval_mad_bit_crc_bb1_in(A,B,A) = 0
     [A>=1,31>=A,B=3] 
* CE 36: eval_mad_bit_crc_bb1_in(V__0,B,C) = 0
     [C=0,B=6,V__0=0] 
* CE 37: eval_mad_bit_crc_bb1_in(V__0,B,C) = 0
     [C=0,B=5,V__0=0] 
* CE 38: eval_mad_bit_crc_bb1_in(V__0,B,C) = 0
     [C=0,B=4,V__0=0] 
* CE 39: eval_mad_bit_crc_bb1_in(V__0,B,C) = 0
     [C=0,B=3,V__0=0] 
* CE 40: eval_mad_bit_crc_bb1_in(V__0,B,C) = 1+ eval_mad_bit_crc_bb1_in(D,B,C)
     [V__0>=32,V__0=D+32] 

### Cost equations --> "Loop" of eval_mad_bit_crc_bb1_in/3 
* CEs [40] --> Loop 27 
* CEs [28] --> Loop 28 
* CEs [29] --> Loop 29 
* CEs [30] --> Loop 30 
* CEs [31] --> Loop 31 
* CEs [32] --> Loop 32 
* CEs [33] --> Loop 33 
* CEs [34] --> Loop 34 
* CEs [35] --> Loop 35 
* CEs [36] --> Loop 36 
* CEs [37] --> Loop 37 
* CEs [38] --> Loop 38 
* CEs [39] --> Loop 39 

#### Loops of eval_mad_bit_crc_bb1_in/3 
* Loop 27: eval_mad_bit_crc_bb1_in(V__0,B,C)->  eval_mad_bit_crc_bb1_in(V__0',B,C)
                  [V__0>=32,V__0=V__0'+32] 
* Loop 28: eval_mad_bit_crc_bb1_in(A,B,A) [0>=A+1,B=6] 
* Loop 29: eval_mad_bit_crc_bb1_in(A,B,A) [A>=1,31>=A,B=6] 
* Loop 30: eval_mad_bit_crc_bb1_in(A,B,A) [0>=A+1,B=5] 
* Loop 31: eval_mad_bit_crc_bb1_in(A,B,A) [A>=1,31>=A,B=5] 
* Loop 32: eval_mad_bit_crc_bb1_in(A,B,A) [0>=A+1,B=4] 
* Loop 33: eval_mad_bit_crc_bb1_in(A,B,A) [A>=1,31>=A,B=4] 
* Loop 34: eval_mad_bit_crc_bb1_in(A,B,A) [0>=A+1,B=3] 
* Loop 35: eval_mad_bit_crc_bb1_in(A,B,A) [A>=1,31>=A,B=3] 
* Loop 36: eval_mad_bit_crc_bb1_in(V__0,B,C) [C=0,B=6,V__0=0] 
* Loop 37: eval_mad_bit_crc_bb1_in(V__0,B,C) [C=0,B=5,V__0=0] 
* Loop 38: eval_mad_bit_crc_bb1_in(V__0,B,C) [C=0,B=4,V__0=0] 
* Loop 39: eval_mad_bit_crc_bb1_in(V__0,B,C) [C=0,B=3,V__0=0] 

### Ranking functions of CR eval_mad_bit_crc_bb1_in(V__0,B,C) 
* RF of phase [27]: [V__0-31]

#### Partial ranking functions of CR eval_mad_bit_crc_bb1_in(V__0,B,C) 
* Partial RF of phase [27]:
  - RF of loop [27:1]:
    V__0-31


### Resulting Chains:eval_mad_bit_crc_bb1_in(V__0,B,C) 
* [[27],39]
* [[27],38]
* [[27],37]
* [[27],36]
* [[27],35]
* [[27],33]
* [[27],31]
* [[27],29]
* [39]
* [38]
* [37]
* [36]
* [35]
* [34]
* [33]
* [32]
* [31]
* [30]
* [29]
* [28]


### Merging Chains  eval_mad_bit_crc_bb1_in/3 into  External patterns of execution 
* [[39]] --> 1 
* [[38]] --> 2 
* [[37]] --> 3 
* [[36]] --> 4 
* [[39,[27]]] --> 5 
* [[35]] --> 6 
* [[34]] --> 7 
* [[35,[27]]] --> 8 
* [[38,[27]]] --> 9 
* [[33]] --> 10 
* [[32]] --> 11 
* [[33,[27]]] --> 12 
* [[37,[27]]] --> 13 
* [[31]] --> 14 
* [[30]] --> 15 
* [[31,[27]]] --> 16 
* [[36,[27]]] --> 17 
* [[29]] --> 18 
* [[28]] --> 19 
* [[29,[27]]] --> 20 


### Specialization of cost equations eval_mad_bit_crc_bb7_in/2 
* CE 27 is refined into CE [41] 
* CE 25 is refined into CE [42] 
* CE 26 is refined into CE [43] 


#### Refined cost equations eval_mad_bit_crc_bb7_in/2 
* CE 41: eval_mad_bit_crc_bb7_in(V__3,B) = 0
     [B=2,V__3=0] 
* CE 42: eval_mad_bit_crc_bb7_in(V__3,B) = 1+ eval_mad_bit_crc_bb7_in(C,D)
     [V__3>=1,V__3=C+1,D=2,B=2] 
* CE 43: eval_mad_bit_crc_bb7_in(V__3,B) = 1+ eval_mad_bit_crc_bb7_in(C,D)
     [0>=V__3+1,V__3=C+1,D=2,B=2] 

### Cost equations --> "Loop" of eval_mad_bit_crc_bb7_in/2 
* CEs [42] --> Loop 40 
* CEs [43] --> Loop 41 
* CEs [41] --> Loop 42 

#### Loops of eval_mad_bit_crc_bb7_in/2 
* Loop 40: eval_mad_bit_crc_bb7_in(V__3,B)->  eval_mad_bit_crc_bb7_in(V__3',B')
                  [V__3>=1,V__3=V__3'+1,B'=2,B=2] 
* Loop 41: eval_mad_bit_crc_bb7_in(V__3,B)->  eval_mad_bit_crc_bb7_in(V__3',B')
                  [0>=V__3+1,V__3=V__3'+1,B'=2,B=2] 
* Loop 42: eval_mad_bit_crc_bb7_in(V__3,B) [B=2,V__3=0] 

### Ranking functions of CR eval_mad_bit_crc_bb7_in(V__3,B) 
* RF of phase [40]: [V__3]

#### Partial ranking functions of CR eval_mad_bit_crc_bb7_in(V__3,B) 
* Partial RF of phase [40]:
  - RF of loop [40:1]:
    V__3


### Resulting Chains:eval_mad_bit_crc_bb7_in(V__3,B) 
* [[41]]...
* [[40],42]
* [42]


### Merging Chains  eval_mad_bit_crc_bb7_in/2 into  External patterns of execution 
* [[42]] --> 1 
* [[42,[40]]] --> 2 
* [[[41]]] --> 3 


### Specialization of cost equations eval_mad_bit_crc_69/2 
* CE 22 is refined into CE [44,45] 
* CE 23 is refined into CE [46,47] 
* CE 21 is refined into CE [48] 


#### Refined cost equations eval_mad_bit_crc_69/2 
* CE 44: eval_mad_bit_crc_69(V__0,B) = 1+ eval_mad_bit_crc_bb7_in(C,D):1
     [V__0>=1,D=2,C=0] 
* CE 45: eval_mad_bit_crc_69(V__0,B) = 1+ eval_mad_bit_crc_bb7_in(C,D):2
     [C>=1,V__0>=1,7>=C,D=2] 
* CE 46: eval_mad_bit_crc_69(V__0,B) = 1+ eval_mad_bit_crc_bb7_in(C,D):1
     [0>=V__0+1,D=2,C=0] 
* CE 47: eval_mad_bit_crc_69(V__0,B) = 1+ eval_mad_bit_crc_bb7_in(C,D):3
     [C+7>=0,0>=C+1,0>=V__0+1,D=2] 
* CE 48: eval_mad_bit_crc_69(V__0,B) = 1+ eval_mad_bit_crc_bb7_in(C,D):1
     [D=2,C=0,V__0=0] 

### Cost equations --> "Loop" of eval_mad_bit_crc_69/2 
* CEs [44,45] --> Loop 43 
* CEs [46] --> Loop 44 
* CEs [48] --> Loop 45 
* CEs [47] --> Loop 46 

#### Loops of eval_mad_bit_crc_69/2 
* Loop 43: eval_mad_bit_crc_69(V__0,B) [V__0>=1] 
* Loop 44: eval_mad_bit_crc_69(V__0,B) [0>=V__0+1] 
* Loop 45: eval_mad_bit_crc_69(V__0,B) [V__0=0] 
* Loop 46: eval_mad_bit_crc_69(V__0,B) [0>=V__0+1] 

### Ranking functions of CR eval_mad_bit_crc_69(V__0,B) 

#### Partial ranking functions of CR eval_mad_bit_crc_69(V__0,B) 


### Resulting Chains:eval_mad_bit_crc_69(V__0,B) 
* [46]...
* [45]
* [44]
* [43]


### Merging Chains  eval_mad_bit_crc_69/2 into  External patterns of execution 
* [[45]] --> 1 
* [[44]] --> 2 
* [[43]] --> 3 
* [[46]] --> 4 


### Specialization of cost equations eval_mad_bit_crc_NewDefault_in/2 
* CE 24 is refined into CE [49,50,51] 


#### Refined cost equations eval_mad_bit_crc_NewDefault_in/2 
* CE 49: eval_mad_bit_crc_NewDefault_in(V__0,B) = 1+ eval_mad_bit_crc_bb7_in(C,D):1
     [D=2,C=0,V__0=0] 
* CE 50: eval_mad_bit_crc_NewDefault_in(V__0,B) = 1+ eval_mad_bit_crc_bb7_in(V__0,C):2
     [V__0>=1,C=2] 
* CE 51: eval_mad_bit_crc_NewDefault_in(V__0,B) = 1+ eval_mad_bit_crc_bb7_in(V__0,C):3
     [0>=V__0+1,C=2] 

### Cost equations --> "Loop" of eval_mad_bit_crc_NewDefault_in/2 
* CEs [51] --> Loop 47 
* CEs [50] --> Loop 48 
* CEs [49] --> Loop 49 

#### Loops of eval_mad_bit_crc_NewDefault_in/2 
* Loop 47: eval_mad_bit_crc_NewDefault_in(V__0,B) [0>=V__0+1] 
* Loop 48: eval_mad_bit_crc_NewDefault_in(V__0,B) [V__0>=1] 
* Loop 49: eval_mad_bit_crc_NewDefault_in(V__0,B) [V__0=0] 

### Ranking functions of CR eval_mad_bit_crc_NewDefault_in(V__0,B) 

#### Partial ranking functions of CR eval_mad_bit_crc_NewDefault_in(V__0,B) 


### Resulting Chains:eval_mad_bit_crc_NewDefault_in(V__0,B) 
* [49]
* [48]
* [47]...


### Merging Chains  eval_mad_bit_crc_NewDefault_in/2 into  External patterns of execution 
* [[49]] --> 1 
* [[48]] --> 2 
* [[47]] --> 3 


### Specialization of cost equations loop_cont_eval_mad_bit_crc_bb1_in/3 
* CE 20 is refined into CE [52,53,54,55] 
* CE 19 is refined into CE [56,57,58,59] 
* CE 18 is refined into CE [60,61,62] 
* CE 17 is refined into CE [63,64,65,66] 


#### Refined cost equations loop_cont_eval_mad_bit_crc_bb1_in/3 
* CE 52: loop_cont_eval_mad_bit_crc_bb1_in(D,A,B) = 0+ eval_mad_bit_crc_69(E,B):1
     [E=0,A=0,D=6] 
* CE 53: loop_cont_eval_mad_bit_crc_bb1_in(D,A,B) = 0+ eval_mad_bit_crc_69(A,B):2
     [0>=A+1,D=6] 
* CE 54: loop_cont_eval_mad_bit_crc_bb1_in(D,A,B) = 0+ eval_mad_bit_crc_69(A,B):3
     [A>=1,D=6] 
* CE 55: loop_cont_eval_mad_bit_crc_bb1_in(D,A,B) = 0+ eval_mad_bit_crc_69(A,B):4
     [0>=A+1,D=6] 
* CE 56: loop_cont_eval_mad_bit_crc_bb1_in(D,A,B) = 0+ eval_mad_bit_crc_69(E,B):1
     [E=0,A=0,D=5] 
* CE 57: loop_cont_eval_mad_bit_crc_bb1_in(D,A,B) = 0+ eval_mad_bit_crc_69(A,B):2
     [0>=A+1,D=5] 
* CE 58: loop_cont_eval_mad_bit_crc_bb1_in(D,A,B) = 0+ eval_mad_bit_crc_69(A,B):3
     [A>=1,D=5] 
* CE 59: loop_cont_eval_mad_bit_crc_bb1_in(D,A,B) = 0+ eval_mad_bit_crc_69(A,B):4
     [0>=A+1,D=5] 
* CE 60: loop_cont_eval_mad_bit_crc_bb1_in(D,A,B) = 0+ eval_mad_bit_crc_NewDefault_in(E,B):1
     [E=0,A=0,D=4] 
* CE 61: loop_cont_eval_mad_bit_crc_bb1_in(D,A,B) = 0+ eval_mad_bit_crc_NewDefault_in(A,B):2
     [A>=1,D=4] 
* CE 62: loop_cont_eval_mad_bit_crc_bb1_in(D,A,B) = 0+ eval_mad_bit_crc_NewDefault_in(A,B):3
     [0>=A+1,D=4] 
* CE 63: loop_cont_eval_mad_bit_crc_bb1_in(D,A,B) = 0+ eval_mad_bit_crc_69(E,B):1
     [E=0,A=0,D=3] 
* CE 64: loop_cont_eval_mad_bit_crc_bb1_in(D,A,B) = 0+ eval_mad_bit_crc_69(A,B):2
     [0>=A+1,D=3] 
* CE 65: loop_cont_eval_mad_bit_crc_bb1_in(D,A,B) = 0+ eval_mad_bit_crc_69(A,B):3
     [A>=1,D=3] 
* CE 66: loop_cont_eval_mad_bit_crc_bb1_in(D,A,B) = 0+ eval_mad_bit_crc_69(A,B):4
     [0>=A+1,D=3] 

### Cost equations --> "Loop" of loop_cont_eval_mad_bit_crc_bb1_in/3 
* CEs [55] --> Loop 50 
* CEs [59] --> Loop 51 
* CEs [62] --> Loop 52 
* CEs [66] --> Loop 53 
* CEs [54] --> Loop 54 
* CEs [53] --> Loop 55 
* CEs [52] --> Loop 56 
* CEs [58] --> Loop 57 
* CEs [57] --> Loop 58 
* CEs [56] --> Loop 59 
* CEs [61] --> Loop 60 
* CEs [60] --> Loop 61 
* CEs [65] --> Loop 62 
* CEs [64] --> Loop 63 
* CEs [63] --> Loop 64 

#### Loops of loop_cont_eval_mad_bit_crc_bb1_in/3 
* Loop 50: loop_cont_eval_mad_bit_crc_bb1_in(D,A,B) [0>=A+1,D=6] 
* Loop 51: loop_cont_eval_mad_bit_crc_bb1_in(D,A,B) [0>=A+1,D=5] 
* Loop 52: loop_cont_eval_mad_bit_crc_bb1_in(D,A,B) [0>=A+1,D=4] 
* Loop 53: loop_cont_eval_mad_bit_crc_bb1_in(D,A,B) [0>=A+1,D=3] 
* Loop 54: loop_cont_eval_mad_bit_crc_bb1_in(D,A,B) [A>=1,D=6] 
* Loop 55: loop_cont_eval_mad_bit_crc_bb1_in(D,A,B) [0>=A+1,D=6] 
* Loop 56: loop_cont_eval_mad_bit_crc_bb1_in(D,A,B) [A=0,D=6] 
* Loop 57: loop_cont_eval_mad_bit_crc_bb1_in(D,A,B) [A>=1,D=5] 
* Loop 58: loop_cont_eval_mad_bit_crc_bb1_in(D,A,B) [0>=A+1,D=5] 
* Loop 59: loop_cont_eval_mad_bit_crc_bb1_in(D,A,B) [A=0,D=5] 
* Loop 60: loop_cont_eval_mad_bit_crc_bb1_in(D,A,B) [A>=1,D=4] 
* Loop 61: loop_cont_eval_mad_bit_crc_bb1_in(D,A,B) [A=0,D=4] 
* Loop 62: loop_cont_eval_mad_bit_crc_bb1_in(D,A,B) [A>=1,D=3] 
* Loop 63: loop_cont_eval_mad_bit_crc_bb1_in(D,A,B) [0>=A+1,D=3] 
* Loop 64: loop_cont_eval_mad_bit_crc_bb1_in(D,A,B) [A=0,D=3] 

### Ranking functions of CR loop_cont_eval_mad_bit_crc_bb1_in(D,A,B) 

#### Partial ranking functions of CR loop_cont_eval_mad_bit_crc_bb1_in(D,A,B) 


### Resulting Chains:loop_cont_eval_mad_bit_crc_bb1_in(D,A,B) 
* [64]
* [63]
* [62]
* [61]
* [60]
* [59]
* [58]
* [57]
* [56]
* [55]
* [54]
* [53]...
* [52]...
* [51]...
* [50]...


### Merging Chains  loop_cont_eval_mad_bit_crc_bb1_in/3 into  External patterns of execution 
* [[64]] --> 1 
* [[63]] --> 2 
* [[62]] --> 3 
* [[61]] --> 4 
* [[60]] --> 5 
* [[59]] --> 6 
* [[58]] --> 7 
* [[57]] --> 8 
* [[56]] --> 9 
* [[55]] --> 10 
* [[54]] --> 11 
* [[53]] --> 12 
* [[52]] --> 13 
* [[51]] --> 14 
* [[50]] --> 15 


### Specialization of cost equations eval_mad_bit_crc_bb0_in/2 
* CE 3 is refined into CE [67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89] 


#### Refined cost equations eval_mad_bit_crc_bb0_in/2 
* CE 67: eval_mad_bit_crc_bb0_in(V_len,B) = 1+ eval_mad_bit_crc_bb1_in(C,D,E):1+ loop_cont_eval_mad_bit_crc_bb1_in(F,G,B):1
     [G=0,F=3,E=0,D=3,C=0,V_len=0] 
* CE 68: eval_mad_bit_crc_bb0_in(V_len,B) = 1+ eval_mad_bit_crc_bb1_in(C,D,E):2+ loop_cont_eval_mad_bit_crc_bb1_in(F,G,B):4
     [G=0,F=4,E=0,D=4,C=0,V_len=0] 
* CE 69: eval_mad_bit_crc_bb0_in(V_len,B) = 1+ eval_mad_bit_crc_bb1_in(C,D,E):3+ loop_cont_eval_mad_bit_crc_bb1_in(F,G,B):6
     [G=0,F=5,E=0,D=5,C=0,V_len=0] 
* CE 70: eval_mad_bit_crc_bb0_in(V_len,B) = 1+ eval_mad_bit_crc_bb1_in(C,D,E):4+ loop_cont_eval_mad_bit_crc_bb1_in(F,G,B):9
     [G=0,F=6,E=0,D=6,C=0,V_len=0] 
* CE 71: eval_mad_bit_crc_bb0_in(V_len,B) = 1+ eval_mad_bit_crc_bb1_in(V_len,C,D):5+ loop_cont_eval_mad_bit_crc_bb1_in(E,F,B):1
     [V_len>=32,F=0,E=3,D=0,C=3] 
* CE 72: eval_mad_bit_crc_bb0_in(V_len,B) = 1+ eval_mad_bit_crc_bb1_in(V_len,C,V_len):6+ loop_cont_eval_mad_bit_crc_bb1_in(D,V_len,B):3
     [V_len>=1,31>=V_len,D=3,C=3] 
* CE 73: eval_mad_bit_crc_bb0_in(V_len,B) = 1+ eval_mad_bit_crc_bb1_in(V_len,C,V_len):7+ loop_cont_eval_mad_bit_crc_bb1_in(D,V_len,B):2
     [0>=V_len+1,D=3,C=3] 
* CE 74: eval_mad_bit_crc_bb0_in(V_len,B) = 1+ eval_mad_bit_crc_bb1_in(V_len,C,V_len):7+ loop_cont_eval_mad_bit_crc_bb1_in(D,V_len,B):12
     [0>=V_len+1,D=3,C=3] 
* CE 75: eval_mad_bit_crc_bb0_in(V_len,B) = 1+ eval_mad_bit_crc_bb1_in(V_len,C,D):8+ loop_cont_eval_mad_bit_crc_bb1_in(E,D,B):3
     [V_len>=D+32,D>=1,31>=D,E=3,C=3] 
* CE 76: eval_mad_bit_crc_bb0_in(V_len,B) = 1+ eval_mad_bit_crc_bb1_in(V_len,C,D):9+ loop_cont_eval_mad_bit_crc_bb1_in(E,F,B):4
     [V_len>=32,F=0,E=4,D=0,C=4] 
* CE 77: eval_mad_bit_crc_bb0_in(V_len,B) = 1+ eval_mad_bit_crc_bb1_in(V_len,C,V_len):10+ loop_cont_eval_mad_bit_crc_bb1_in(D,V_len,B):5
     [V_len>=1,31>=V_len,D=4,C=4] 
* CE 78: eval_mad_bit_crc_bb0_in(V_len,B) = 1+ eval_mad_bit_crc_bb1_in(V_len,C,V_len):11+ loop_cont_eval_mad_bit_crc_bb1_in(D,V_len,B):13
     [0>=V_len+1,D=4,C=4] 
* CE 79: eval_mad_bit_crc_bb0_in(V_len,B) = 1+ eval_mad_bit_crc_bb1_in(V_len,C,D):12+ loop_cont_eval_mad_bit_crc_bb1_in(E,D,B):5
     [V_len>=D+32,D>=1,31>=D,E=4,C=4] 
* CE 80: eval_mad_bit_crc_bb0_in(V_len,B) = 1+ eval_mad_bit_crc_bb1_in(V_len,C,D):13+ loop_cont_eval_mad_bit_crc_bb1_in(E,F,B):6
     [V_len>=32,F=0,E=5,D=0,C=5] 
* CE 81: eval_mad_bit_crc_bb0_in(V_len,B) = 1+ eval_mad_bit_crc_bb1_in(V_len,C,V_len):14+ loop_cont_eval_mad_bit_crc_bb1_in(D,V_len,B):8
     [V_len>=1,31>=V_len,D=5,C=5] 
* CE 82: eval_mad_bit_crc_bb0_in(V_len,B) = 1+ eval_mad_bit_crc_bb1_in(V_len,C,V_len):15+ loop_cont_eval_mad_bit_crc_bb1_in(D,V_len,B):7
     [0>=V_len+1,D=5,C=5] 
* CE 83: eval_mad_bit_crc_bb0_in(V_len,B) = 1+ eval_mad_bit_crc_bb1_in(V_len,C,V_len):15+ loop_cont_eval_mad_bit_crc_bb1_in(D,V_len,B):14
     [0>=V_len+1,D=5,C=5] 
* CE 84: eval_mad_bit_crc_bb0_in(V_len,B) = 1+ eval_mad_bit_crc_bb1_in(V_len,C,D):16+ loop_cont_eval_mad_bit_crc_bb1_in(E,D,B):8
     [V_len>=D+32,D>=1,31>=D,E=5,C=5] 
* CE 85: eval_mad_bit_crc_bb0_in(V_len,B) = 1+ eval_mad_bit_crc_bb1_in(V_len,C,D):17+ loop_cont_eval_mad_bit_crc_bb1_in(E,F,B):9
     [V_len>=32,F=0,E=6,D=0,C=6] 
* CE 86: eval_mad_bit_crc_bb0_in(V_len,B) = 1+ eval_mad_bit_crc_bb1_in(V_len,C,V_len):18+ loop_cont_eval_mad_bit_crc_bb1_in(D,V_len,B):11
     [V_len>=1,31>=V_len,D=6,C=6] 
* CE 87: eval_mad_bit_crc_bb0_in(V_len,B) = 1+ eval_mad_bit_crc_bb1_in(V_len,C,V_len):19+ loop_cont_eval_mad_bit_crc_bb1_in(D,V_len,B):10
     [0>=V_len+1,D=6,C=6] 
* CE 88: eval_mad_bit_crc_bb0_in(V_len,B) = 1+ eval_mad_bit_crc_bb1_in(V_len,C,V_len):19+ loop_cont_eval_mad_bit_crc_bb1_in(D,V_len,B):15
     [0>=V_len+1,D=6,C=6] 
* CE 89: eval_mad_bit_crc_bb0_in(V_len,B) = 1+ eval_mad_bit_crc_bb1_in(V_len,C,D):20+ loop_cont_eval_mad_bit_crc_bb1_in(E,D,B):11
     [V_len>=D+32,D>=1,31>=D,E=6,C=6] 

### Cost equations --> "Loop" of eval_mad_bit_crc_bb0_in/2 
* CEs [71,75,76,79,80,84,85,89] --> Loop 65 
* CEs [73,82,87] --> Loop 66 
* CEs [72,77,81,86] --> Loop 67 
* CEs [67,68,69,70] --> Loop 68 
* CEs [74,78,83,88] --> Loop 69 

#### Loops of eval_mad_bit_crc_bb0_in/2 
* Loop 65: eval_mad_bit_crc_bb0_in(V_len,B) [V_len>=32] 
* Loop 66: eval_mad_bit_crc_bb0_in(V_len,B) [0>=V_len+1] 
* Loop 67: eval_mad_bit_crc_bb0_in(V_len,B) [V_len>=1,31>=V_len] 
* Loop 68: eval_mad_bit_crc_bb0_in(V_len,B) [V_len=0] 
* Loop 69: eval_mad_bit_crc_bb0_in(V_len,B) [0>=V_len+1] 

### Ranking functions of CR eval_mad_bit_crc_bb0_in(V_len,B) 

#### Partial ranking functions of CR eval_mad_bit_crc_bb0_in(V_len,B) 


### Resulting Chains:eval_mad_bit_crc_bb0_in(V_len,B) 
* [69]...
* [68]
* [67]
* [66]
* [65]


### Merging Chains  eval_mad_bit_crc_bb0_in/2 into  External patterns of execution 
* [[68]] --> 1 
* [[67]] --> 2 
* [[66]] --> 3 
* [[65]] --> 4 
* [[69]] --> 5 


### Specialization of cost equations eval_mad_bit_crc_start/4 
* CE 2 is refined into CE [90,91,92,93,94] 


#### Refined cost equations eval_mad_bit_crc_start/4 
* CE 90: eval_mad_bit_crc_start(V_bitptr_coerce1,V_len,V_init,B) = 0+ eval_mad_bit_crc_bb0_in(C,B):1
     [C=0,V_len=0] 
* CE 91: eval_mad_bit_crc_start(V_bitptr_coerce1,V_len,V_init,B) = 0+ eval_mad_bit_crc_bb0_in(V_len,B):2
     [V_len>=1,31>=V_len] 
* CE 92: eval_mad_bit_crc_start(V_bitptr_coerce1,V_len,V_init,B) = 0+ eval_mad_bit_crc_bb0_in(V_len,B):3
     [0>=V_len+1] 
* CE 93: eval_mad_bit_crc_start(V_bitptr_coerce1,V_len,V_init,B) = 0+ eval_mad_bit_crc_bb0_in(V_len,B):4
     [V_len>=32] 
* CE 94: eval_mad_bit_crc_start(V_bitptr_coerce1,V_len,V_init,B) = 0+ eval_mad_bit_crc_bb0_in(V_len,B):5
     [0>=V_len+1] 

### Cost equations --> "Loop" of eval_mad_bit_crc_start/4 
* CEs [94] --> Loop 70 
* CEs [93] --> Loop 71 
* CEs [92] --> Loop 72 
* CEs [91] --> Loop 73 
* CEs [90] --> Loop 74 

#### Loops of eval_mad_bit_crc_start/4 
* Loop 70: eval_mad_bit_crc_start(V_bitptr_coerce1,V_len,V_init,B) [0>=V_len+1] 
* Loop 71: eval_mad_bit_crc_start(V_bitptr_coerce1,V_len,V_init,B) [V_len>=32] 
* Loop 72: eval_mad_bit_crc_start(V_bitptr_coerce1,V_len,V_init,B) [0>=V_len+1] 
* Loop 73: eval_mad_bit_crc_start(V_bitptr_coerce1,V_len,V_init,B) [V_len>=1,31>=V_len] 
* Loop 74: eval_mad_bit_crc_start(V_bitptr_coerce1,V_len,V_init,B) [V_len=0] 

### Ranking functions of CR eval_mad_bit_crc_start(V_bitptr_coerce1,V_len,V_init,B) 

#### Partial ranking functions of CR eval_mad_bit_crc_start(V_bitptr_coerce1,V_len,V_init,B) 


### Resulting Chains:eval_mad_bit_crc_start(V_bitptr_coerce1,V_len,V_init,B) 
* [74]
* [73]
* [72]
* [71]
* [70]...


### Merging Chains  eval_mad_bit_crc_start/4 into  External patterns of execution 
* [[74]] --> 1 
* [[73]] --> 2 
* [[72]] --> 3 
* [[71]] --> 4 
* [[70]] --> 5 


Computing Bounds
=====================================

#### Cost of loops [27] 

 * loop 27:eval_mad_bit_crc_bb1_in(V__0,B,C) -> [eval_mad_bit_crc_bb1_in(V__0',B',C')] 
1
#### Cost of phase [27]:eval_mad_bit_crc_bb1_in(V__0,B,C) -> [eval_mad_bit_crc_bb1_in(V__0',B',C')] 
1*it(27)+0
  Such that:it(27) =< V__0
it(27) =< V__0-V__0'

#### Cost of phase [27]:eval_mad_bit_crc_bb1_in(V__0,B,C) -> [eval_mad_bit_crc_bb1_in(V__0',B',C')] 
1*it(27)+0
  Such that:it(27) =< V__0
it(27) =< V__0-V__0'

#### Cost of phase [27]:eval_mad_bit_crc_bb1_in(V__0,B,C) -> [eval_mad_bit_crc_bb1_in(V__0',B',C')] 
1*it(27)+0
  Such that:it(27) =< V__0
it(27) =< V__0-V__0'

#### Cost of phase [27]:eval_mad_bit_crc_bb1_in(V__0,B,C) -> [eval_mad_bit_crc_bb1_in(V__0',B',C')] 
1*it(27)+0
  Such that:it(27) =< V__0
it(27) =< V__0-V__0'

#### Cost of phase [27]:eval_mad_bit_crc_bb1_in(V__0,B,C) -> [eval_mad_bit_crc_bb1_in(V__0',B',C')] 
1*it(27)+0
  Such that:it(27) =< V__0
it(27) =< V__0-V__0'

#### Cost of phase [27]:eval_mad_bit_crc_bb1_in(V__0,B,C) -> [eval_mad_bit_crc_bb1_in(V__0',B',C')] 
1*it(27)+0
  Such that:it(27) =< V__0
it(27) =< V__0-V__0'

#### Cost of phase [27]:eval_mad_bit_crc_bb1_in(V__0,B,C) -> [eval_mad_bit_crc_bb1_in(V__0',B',C')] 
1*it(27)+0
  Such that:it(27) =< V__0
it(27) =< V__0-V__0'

#### Cost of phase [27]:eval_mad_bit_crc_bb1_in(V__0,B,C) -> [eval_mad_bit_crc_bb1_in(V__0',B',C')] 
1*it(27)+0
  Such that:it(27) =< V__0
it(27) =< V__0-V__0'

#### Cost of chains of eval_mad_bit_crc_bb1_in(V__0,B,C):
* Chain [[27],39]: 1*it(27)+0
  Such that:it(27) =< V__0

  with precondition: [B=3,C=0,V__0>=32] 

* Chain [[27],38]: 1*it(27)+0
  Such that:it(27) =< V__0

  with precondition: [B=4,C=0,V__0>=32] 

* Chain [[27],37]: 1*it(27)+0
  Such that:it(27) =< V__0

  with precondition: [B=5,C=0,V__0>=32] 

* Chain [[27],36]: 1*it(27)+0
  Such that:it(27) =< V__0

  with precondition: [B=6,C=0,V__0>=32] 

* Chain [[27],35]: 1*it(27)+0
  Such that:it(27) =< V__0-C

  with precondition: [B=3,31>=C,C>=1,V__0>=C+32] 

* Chain [[27],33]: 1*it(27)+0
  Such that:it(27) =< V__0-C

  with precondition: [B=4,31>=C,C>=1,V__0>=C+32] 

* Chain [[27],31]: 1*it(27)+0
  Such that:it(27) =< V__0-C

  with precondition: [B=5,31>=C,C>=1,V__0>=C+32] 

* Chain [[27],29]: 1*it(27)+0
  Such that:it(27) =< V__0-C

  with precondition: [B=6,31>=C,C>=1,V__0>=C+32] 

* Chain [39]: 0
  with precondition: [V__0=0,B=3,C=0] 

* Chain [38]: 0
  with precondition: [V__0=0,B=4,C=0] 

* Chain [37]: 0
  with precondition: [V__0=0,B=5,C=0] 

* Chain [36]: 0
  with precondition: [V__0=0,B=6,C=0] 

* Chain [35]: 0
  with precondition: [B=3,V__0=C,31>=V__0,V__0>=1] 

* Chain [34]: 0
  with precondition: [B=3,V__0=C,0>=V__0+1] 

* Chain [33]: 0
  with precondition: [B=4,V__0=C,31>=V__0,V__0>=1] 

* Chain [32]: 0
  with precondition: [B=4,V__0=C,0>=V__0+1] 

* Chain [31]: 0
  with precondition: [B=5,V__0=C,31>=V__0,V__0>=1] 

* Chain [30]: 0
  with precondition: [B=5,V__0=C,0>=V__0+1] 

* Chain [29]: 0
  with precondition: [B=6,V__0=C,31>=V__0,V__0>=1] 

* Chain [28]: 0
  with precondition: [B=6,V__0=C,0>=V__0+1] 


#### Cost of loops [41] 

 * loop 41:eval_mad_bit_crc_bb7_in(V__3,B) -> [eval_mad_bit_crc_bb7_in(V__3',B')] 
1
#### Cost of phase [41]:eval_mad_bit_crc_bb7_in(V__3,B) -> [eval_mad_bit_crc_bb7_in(V__3',B')] 
1*it(41)+0
#### Cost of loops [40] 

 * loop 40:eval_mad_bit_crc_bb7_in(V__3,B) -> [eval_mad_bit_crc_bb7_in(V__3',B')] 
1
#### Cost of phase [40]:eval_mad_bit_crc_bb7_in(V__3,B) -> [eval_mad_bit_crc_bb7_in(V__3',B')] 
1*it(40)+0
  Such that:it(40) =< V__3
it(40) =< V__3-V__3'

#### Cost of chains of eval_mad_bit_crc_bb7_in(V__3,B):
* Chain [[41]]...: 1*it(41)+0
  with precondition: [0>=V__3+1,B=2] 

* Chain [[40],42]: 1*it(40)+0
  Such that:it(40) =< V__3

  with precondition: [B=2,V__3>=1] 

* Chain [42]: 0
  with precondition: [V__3=0,B=2] 


#### Cost of chains of eval_mad_bit_crc_69(V__0,B):
* Chain [46]...: 1*s(1)+1
  with precondition: [0>=V__0+1] 

* Chain [45]: 1
  with precondition: [V__0=0] 

* Chain [44]: 1
  with precondition: [0>=V__0+1] 

* Chain [43]: 8
  with precondition: [V__0>=1] 


#### Cost of chains of eval_mad_bit_crc_NewDefault_in(V__0,B):
* Chain [49]: 1
  with precondition: [V__0=0] 

* Chain [48]: 1*s(3)+1
  Such that:s(3) =< V__0

  with precondition: [V__0>=1] 

* Chain [47]...: 1*s(4)+1
  with precondition: [0>=V__0+1] 


#### Cost of chains of loop_cont_eval_mad_bit_crc_bb1_in(D,A,B):
* Chain [64]: 1
  with precondition: [D=3,A=0] 

* Chain [63]: 1
  with precondition: [D=3,0>=A+1] 

* Chain [62]: 8
  with precondition: [D=3,A>=1] 

* Chain [61]: 1
  with precondition: [D=4,A=0] 

* Chain [60]: 1*s(5)+1
  Such that:s(5) =< A

  with precondition: [D=4,A>=1] 

* Chain [59]: 1
  with precondition: [D=5,A=0] 

* Chain [58]: 1
  with precondition: [D=5,0>=A+1] 

* Chain [57]: 8
  with precondition: [D=5,A>=1] 

* Chain [56]: 1
  with precondition: [D=6,A=0] 

* Chain [55]: 1
  with precondition: [D=6,0>=A+1] 

* Chain [54]: 8
  with precondition: [D=6,A>=1] 

* Chain [53]...: 1*s(6)+1
  with precondition: [D=3,0>=A+1] 

* Chain [52]...: 1*s(7)+1
  with precondition: [D=4,0>=A+1] 

* Chain [51]...: 1*s(8)+1
  with precondition: [D=5,0>=A+1] 

* Chain [50]...: 1*s(9)+1
  with precondition: [D=6,0>=A+1] 


#### Cost of chains of eval_mad_bit_crc_bb0_in(V_len,B):
* Chain [69]...: 1*aux(1)+0
  with precondition: [0>=V_len+1] 

* Chain [68]: 2
  with precondition: [V_len=0] 

* Chain [67]: 1*s(14)+9
  Such that:s(14) =< V_len

  with precondition: [31>=V_len,V_len>=1] 

* Chain [66]: 2
  with precondition: [0>=V_len+1] 

* Chain [65]: 9*s(15)+9
  Such that:aux(3) =< V_len
s(15) =< aux(3)

  with precondition: [V_len>=32] 


#### Cost of chains of eval_mad_bit_crc_start(V_bitptr_coerce1,V_len,V_init,B):
* Chain [74]: 2
  with precondition: [V_len=0] 

* Chain [73]: 1*s(24)+9
  Such that:s(24) =< V_len

  with precondition: [31>=V_len,V_len>=1] 

* Chain [72]: 2
  with precondition: [0>=V_len+1] 

* Chain [71]: 9*s(26)+9
  Such that:s(25) =< V_len
s(26) =< s(25)

  with precondition: [V_len>=32] 

* Chain [70]...: 1*s(27)+0
  with precondition: [0>=V_len+1] 


Closed-form bounds of eval_mad_bit_crc_start(V_bitptr_coerce1,V_len,V_init,B): 
-------------------------------------
* Chain [74] with precondition: [V_len=0] 
    - Upper bound: 2 
    - Complexity: constant 
* Chain [73] with precondition: [31>=V_len,V_len>=1] 
    - Upper bound: V_len+9 
    - Complexity: n 
* Chain [72] with precondition: [0>=V_len+1] 
    - Upper bound: 2 
    - Complexity: constant 
* Chain [71] with precondition: [V_len>=32] 
    - Upper bound: 9*V_len+9 
    - Complexity: n 
* Chain [70]... with precondition: [0>=V_len+1] 
    - Upper bound: inf 
    - Complexity: infinity 

### Maximum cost of eval_mad_bit_crc_start(V_bitptr_coerce1,V_len,V_init,B): inf 
Asymptotic class: infinity 

Time statistics: 
-------------------------------------
* Partial evaluation computed in 31 ms.
* Invariants computed in 34 ms.
   - Backward Invariants 26 ms.
   - Transitive Invariants 2 ms.
* Refinement performed in 139 ms.
* Termination proved in 4 ms.
* Upper bounds computed in 64 ms.
   - Equation cost structures 34 ms.
   - Phase cost structures 5 ms.
   - Chain cost structures 16 ms.
   - Solving cost expressions 1 ms.
* Total analysis performed in 314 ms.


Warning: Ignored call to eval_gx_pattern_cache_winnow_stop/1 in equation eval_gx_pattern_cache_winnow_bb7_in/1 

Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. recursive  : [eval_gx_pattern_cache_winnow_5/2,eval_gx_pattern_cache_winnow_6/2,eval_gx_pattern_cache_winnow_7/2,eval_gx_pattern_cache_winnow_8/2,eval_gx_pattern_cache_winnow_bb2_in/2,eval_gx_pattern_cache_winnow_bb6_in/2]
1. non_recursive  : [eval_gx_pattern_cache_winnow_bb7_in/1]
2. non_recursive  : [loop_cont_eval_gx_pattern_cache_winnow_bb2_in/2]
3. non_recursive  : [eval_gx_pattern_cache_winnow_bb0_in/1]
4. non_recursive  : [eval_gx_pattern_cache_winnow_start/1]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into eval_gx_pattern_cache_winnow_bb2_in/2
1. SCC is completely evaluated into other SCCs
2. SCC is completely evaluated into other SCCs
3. SCC is partially evaluated into eval_gx_pattern_cache_winnow_bb0_in/1
4. SCC is partially evaluated into eval_gx_pattern_cache_winnow_start/1

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations eval_gx_pattern_cache_winnow_bb2_in/2 
* CE 6 is refined into CE [7] 
* CE 5 is refined into CE [8] 


#### Refined cost equations eval_gx_pattern_cache_winnow_bb2_in/2 
* CE 7: eval_gx_pattern_cache_winnow_bb2_in(V_i_0,B) = 0
     [V_i_0>=0,B=2] 
* CE 8: eval_gx_pattern_cache_winnow_bb2_in(V_i_0,B) = 1+ eval_gx_pattern_cache_winnow_bb2_in(C,D)
     [V_i_0>=0,V_i_0+1=C,D=2,B=2] 

### Cost equations --> "Loop" of eval_gx_pattern_cache_winnow_bb2_in/2 
* CEs [8] --> Loop 5 
* CEs [7] --> Loop 6 

#### Loops of eval_gx_pattern_cache_winnow_bb2_in/2 
* Loop 5: eval_gx_pattern_cache_winnow_bb2_in(V_i_0,B)->  eval_gx_pattern_cache_winnow_bb2_in(V_i_0',B')
                  [V_i_0>=0,V_i_0+1=V_i_0',B'=2,B=2] 
* Loop 6: eval_gx_pattern_cache_winnow_bb2_in(V_i_0,B) [V_i_0>=0,B=2] 

### Ranking functions of CR eval_gx_pattern_cache_winnow_bb2_in(V_i_0,B) 

#### Partial ranking functions of CR eval_gx_pattern_cache_winnow_bb2_in(V_i_0,B) 


### Resulting Chains:eval_gx_pattern_cache_winnow_bb2_in(V_i_0,B) 
* [[5]]...
* [[5],6]
* [6]


### Merging Chains  eval_gx_pattern_cache_winnow_bb2_in/2 into  External patterns of execution 
* [[6],[6,[5]]] --> 1 
* [[[5]]] --> 2 


### Specialization of cost equations eval_gx_pattern_cache_winnow_bb0_in/1 
* CE 3 is refined into CE [9] 
* CE 4 is refined into CE [10,11] 


#### Refined cost equations eval_gx_pattern_cache_winnow_bb0_in/1 
* CE 9: eval_gx_pattern_cache_winnow_bb0_in(B) = 0
     [] 
* CE 10: eval_gx_pattern_cache_winnow_bb0_in(B) = 1+ eval_gx_pattern_cache_winnow_bb2_in(C,D):1
     [D=2,C=0] 
* CE 11: eval_gx_pattern_cache_winnow_bb0_in(B) = 1+ eval_gx_pattern_cache_winnow_bb2_in(C,D):2
     [D=2,C=0] 

### Cost equations --> "Loop" of eval_gx_pattern_cache_winnow_bb0_in/1 
* CEs [11] --> Loop 7 
* CEs [9,10] --> Loop 8 

#### Loops of eval_gx_pattern_cache_winnow_bb0_in/1 
* Loop 7: eval_gx_pattern_cache_winnow_bb0_in(B) [] 
* Loop 8: eval_gx_pattern_cache_winnow_bb0_in(B) [] 

### Ranking functions of CR eval_gx_pattern_cache_winnow_bb0_in(B) 

#### Partial ranking functions of CR eval_gx_pattern_cache_winnow_bb0_in(B) 


### Resulting Chains:eval_gx_pattern_cache_winnow_bb0_in(B) 
* [8]
* [7]...


### Merging Chains  eval_gx_pattern_cache_winnow_bb0_in/1 into  External patterns of execution 
* [[8]] --> 1 
* [[7]] --> 2 


### Specialization of cost equations eval_gx_pattern_cache_winnow_start/1 
* CE 2 is refined into CE [12,13] 


#### Refined cost equations eval_gx_pattern_cache_winnow_start/1 
* CE 12: eval_gx_pattern_cache_winnow_start(B) = 0+ eval_gx_pattern_cache_winnow_bb0_in(B):1
     [] 
* CE 13: eval_gx_pattern_cache_winnow_start(B) = 0+ eval_gx_pattern_cache_winnow_bb0_in(B):2
     [] 

### Cost equations --> "Loop" of eval_gx_pattern_cache_winnow_start/1 
* CEs [13] --> Loop 9 
* CEs [12] --> Loop 10 

#### Loops of eval_gx_pattern_cache_winnow_start/1 
* Loop 9: eval_gx_pattern_cache_winnow_start(B) [] 
* Loop 10: eval_gx_pattern_cache_winnow_start(B) [] 

### Ranking functions of CR eval_gx_pattern_cache_winnow_start(B) 

#### Partial ranking functions of CR eval_gx_pattern_cache_winnow_start(B) 


### Resulting Chains:eval_gx_pattern_cache_winnow_start(B) 
* [10]
* [9]...


### Merging Chains  eval_gx_pattern_cache_winnow_start/1 into  External patterns of execution 
* [[10]] --> 1 
* [[9]] --> 2 


Computing Bounds
=====================================

#### Cost of loops [5] 

 * loop 5:eval_gx_pattern_cache_winnow_bb2_in(V_i_0,B) -> [eval_gx_pattern_cache_winnow_bb2_in(V_i_0',B')] 
1
#### Cost of phase [5]:eval_gx_pattern_cache_winnow_bb2_in(V_i_0,B) -> [eval_gx_pattern_cache_winnow_bb2_in(V_i_0',B')] 
1*it(5)+0
#### Cost of phase [5]:eval_gx_pattern_cache_winnow_bb2_in(V_i_0,B) -> [eval_gx_pattern_cache_winnow_bb2_in(V_i_0',B')] 
1*it(5)+0
#### Cost of chains of eval_gx_pattern_cache_winnow_bb2_in(V_i_0,B):
* Chain [[5]]...: 1*it(5)+0
  with precondition: [V_i_0>=0,B=2] 

* Chain [[5],6]: 1*it(5)+0
  with precondition: [B=2,V_i_0>=0] 

* Chain [6]: 0
  with precondition: [B=2,V_i_0>=0] 


#### Cost of chains of eval_gx_pattern_cache_winnow_bb0_in(B):
* Chain [8]: 1*aux(2)+0
  with precondition: [] 

* Chain [7]...: 1*s(3)+1
  with precondition: [] 


#### Cost of chains of eval_gx_pattern_cache_winnow_start(B):
* Chain [10]: 1*s(4)+0
  with precondition: [] 

* Chain [9]...: 1*s(5)+1
  with precondition: [] 


Closed-form bounds of eval_gx_pattern_cache_winnow_start(B): 
-------------------------------------
* Chain [10] with precondition: [] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [9]... with precondition: [] 
    - Upper bound: inf 
    - Complexity: infinity 

### Maximum cost of eval_gx_pattern_cache_winnow_start(B): inf 
Asymptotic class: infinity 

Time statistics: 
-------------------------------------
* Partial evaluation computed in 14 ms.
* Invariants computed in 16 ms.
   - Backward Invariants 8 ms.
   - Transitive Invariants 3 ms.
* Refinement performed in 18 ms.
* Termination proved in 2 ms.
* Upper bounds computed in 18 ms.
   - Equation cost structures 6 ms.
   - Phase cost structures 5 ms.
   - Chain cost structures 7 ms.
   - Solving cost expressions 0 ms.
* Total analysis performed in 95 ms.


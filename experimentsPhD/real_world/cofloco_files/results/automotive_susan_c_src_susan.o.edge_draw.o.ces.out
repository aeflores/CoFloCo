WARNING: Excluded non-linear constraints:[C+1=<A*B]
WARNING: Excluded non-linear constraints:[C>=A*B]
WARNING: Excluded non-linear constraints:[C+1=<A*B]
WARNING: Excluded non-linear constraints:[C>=A*B]
WARNING: Excluded non-linear constraints:[B>=C*D]
WARNING: Excluded non-linear constraints:[D>=E*F]
Warning: Ignored call to eval_edge_draw_stop/1 in equation loop_cont_eval_edge_draw_bb7_in/2 

Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. recursive  : [eval_edge_draw_bb2_in/6,eval_edge_draw_bb5_in/6]
1. recursive  : [eval_edge_draw_bb10_in/4,eval_edge_draw_bb7_in/4]
2. non_recursive  : [loop_cont_eval_edge_draw_bb7_in/2]
3. non_recursive  : [eval_edge_draw_bb6_in/3]
4. non_recursive  : [loop_cont_eval_edge_draw_bb2_in/4]
5. non_recursive  : [eval_edge_draw_bb0_in/3]
6. non_recursive  : [eval_edge_draw_start/4]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into eval_edge_draw_bb2_in/6
1. SCC is partially evaluated into eval_edge_draw_bb7_in/4
2. SCC is completely evaluated into other SCCs
3. SCC is partially evaluated into eval_edge_draw_bb6_in/3
4. SCC is completely evaluated into other SCCs
5. SCC is partially evaluated into eval_edge_draw_bb0_in/3
6. SCC is partially evaluated into eval_edge_draw_start/4

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations eval_edge_draw_bb2_in/6 
* CE 6 is refined into CE [10] 
* CE 5 is refined into CE [11] 


#### Refined cost equations eval_edge_draw_bb2_in/6 
* CE 10: eval_edge_draw_bb2_in(A,B,C,D,A,B) = 0
     [C>=0,D=3] 
* CE 11: eval_edge_draw_bb2_in(V_x_size,V_y_size,V_i_0,B,C,D) = 1+ eval_edge_draw_bb2_in(V_x_size,V_y_size,E,F,C,D)
     [V_i_0>=0,V_i_0+1=E,F=3,B=3] 

### Cost equations --> "Loop" of eval_edge_draw_bb2_in/6 
* CEs [11] --> Loop 8 
* CEs [10] --> Loop 9 

#### Loops of eval_edge_draw_bb2_in/6 
* Loop 8: eval_edge_draw_bb2_in(V_x_size,V_y_size,V_i_0,B,C,D)->  eval_edge_draw_bb2_in(V_x_size,V_y_size,V_i_0',B',C,D)
                  [V_i_0>=0,V_i_0+1=V_i_0',B'=3,B=3] 
* Loop 9: eval_edge_draw_bb2_in(A,B,C,D,A,B) [C>=0,D=3] 

### Ranking functions of CR eval_edge_draw_bb2_in(V_x_size,V_y_size,V_i_0,B,C,D) 

#### Partial ranking functions of CR eval_edge_draw_bb2_in(V_x_size,V_y_size,V_i_0,B,C,D) 


### Resulting Chains:eval_edge_draw_bb2_in(V_x_size,V_y_size,V_i_0,B,C,D) 
* [[8]]...
* [[8],9]
* [9]


### Merging Chains  eval_edge_draw_bb2_in/6 into  External patterns of execution 
* [[9],[9,[8]]] --> 1 
* [[[8]]] --> 2 


### Specialization of cost equations eval_edge_draw_bb7_in/4 
* CE 9 is refined into CE [12] 
* CE 8 is refined into CE [13] 


#### Refined cost equations eval_edge_draw_bb7_in/4 
* CE 12: eval_edge_draw_bb7_in(V_x_size,V_y_size,V_i_1,B) = 0
     [V_i_1>=0,B=2] 
* CE 13: eval_edge_draw_bb7_in(V_x_size,V_y_size,V_i_1,B) = 1+ eval_edge_draw_bb7_in(V_x_size,V_y_size,C,D)
     [V_i_1>=0,V_i_1+1=C,D=2,B=2] 

### Cost equations --> "Loop" of eval_edge_draw_bb7_in/4 
* CEs [13] --> Loop 10 
* CEs [12] --> Loop 11 

#### Loops of eval_edge_draw_bb7_in/4 
* Loop 10: eval_edge_draw_bb7_in(V_x_size,V_y_size,V_i_1,B)->  eval_edge_draw_bb7_in(V_x_size,V_y_size,V_i_1',B')
                  [V_i_1>=0,V_i_1+1=V_i_1',B'=2,B=2] 
* Loop 11: eval_edge_draw_bb7_in(V_x_size,V_y_size,V_i_1,B) [V_i_1>=0,B=2] 

### Ranking functions of CR eval_edge_draw_bb7_in(V_x_size,V_y_size,V_i_1,B) 

#### Partial ranking functions of CR eval_edge_draw_bb7_in(V_x_size,V_y_size,V_i_1,B) 


### Resulting Chains:eval_edge_draw_bb7_in(V_x_size,V_y_size,V_i_1,B) 
* [[10]]...
* [[10],11]
* [11]


### Merging Chains  eval_edge_draw_bb7_in/4 into  External patterns of execution 
* [[11],[11,[10]]] --> 1 
* [[[10]]] --> 2 


### Specialization of cost equations eval_edge_draw_bb6_in/3 
* CE 7 is refined into CE [14,15] 


#### Refined cost equations eval_edge_draw_bb6_in/3 
* CE 14: eval_edge_draw_bb6_in(V_x_size,V_y_size,B) = 1+ eval_edge_draw_bb7_in(V_x_size,V_y_size,C,D):1
     [D=2,C=0] 
* CE 15: eval_edge_draw_bb6_in(V_x_size,V_y_size,B) = 1+ eval_edge_draw_bb7_in(V_x_size,V_y_size,C,D):2
     [D=2,C=0] 

### Cost equations --> "Loop" of eval_edge_draw_bb6_in/3 
* CEs [15] --> Loop 12 
* CEs [14] --> Loop 13 

#### Loops of eval_edge_draw_bb6_in/3 
* Loop 12: eval_edge_draw_bb6_in(V_x_size,V_y_size,B) [] 
* Loop 13: eval_edge_draw_bb6_in(V_x_size,V_y_size,B) [] 

### Ranking functions of CR eval_edge_draw_bb6_in(V_x_size,V_y_size,B) 

#### Partial ranking functions of CR eval_edge_draw_bb6_in(V_x_size,V_y_size,B) 


### Resulting Chains:eval_edge_draw_bb6_in(V_x_size,V_y_size,B) 
* [13]
* [12]...


### Merging Chains  eval_edge_draw_bb6_in/3 into  External patterns of execution 
* [[13]] --> 1 
* [[12]] --> 2 


### Specialization of cost equations eval_edge_draw_bb0_in/3 
* CE 3 is refined into CE [16,17,18] 
* CE 4 is refined into CE [19,20] 


#### Refined cost equations eval_edge_draw_bb0_in/3 
* CE 16: eval_edge_draw_bb0_in(V_x_size,V_y_size,B) = 1+ eval_edge_draw_bb2_in(V_x_size,V_y_size,C,D,V_x_size,V_y_size):1+ eval_edge_draw_bb6_in(V_x_size,V_y_size,B):1
     [D=3,C=0] 
* CE 17: eval_edge_draw_bb0_in(V_x_size,V_y_size,B) = 1+ eval_edge_draw_bb2_in(V_x_size,V_y_size,C,D,V_x_size,V_y_size):1+ eval_edge_draw_bb6_in(V_x_size,V_y_size,B):2
     [D=3,C=0] 
* CE 18: eval_edge_draw_bb0_in(V_x_size,V_y_size,B) = 1+ eval_edge_draw_bb2_in(V_x_size,V_y_size,C,D,E,F):2
     [D=3,C=0] 
* CE 19: eval_edge_draw_bb0_in(V_x_size,V_y_size,B) = 0+ eval_edge_draw_bb6_in(V_x_size,V_y_size,B):1
     [] 
* CE 20: eval_edge_draw_bb0_in(V_x_size,V_y_size,B) = 0+ eval_edge_draw_bb6_in(V_x_size,V_y_size,B):2
     [] 

### Cost equations --> "Loop" of eval_edge_draw_bb0_in/3 
* CEs [17,18,20] --> Loop 14 
* CEs [16,19] --> Loop 15 

#### Loops of eval_edge_draw_bb0_in/3 
* Loop 14: eval_edge_draw_bb0_in(V_x_size,V_y_size,B) [] 
* Loop 15: eval_edge_draw_bb0_in(V_x_size,V_y_size,B) [] 

### Ranking functions of CR eval_edge_draw_bb0_in(V_x_size,V_y_size,B) 

#### Partial ranking functions of CR eval_edge_draw_bb0_in(V_x_size,V_y_size,B) 


### Resulting Chains:eval_edge_draw_bb0_in(V_x_size,V_y_size,B) 
* [15]
* [14]...


### Merging Chains  eval_edge_draw_bb0_in/3 into  External patterns of execution 
* [[15]] --> 1 
* [[14]] --> 2 


### Specialization of cost equations eval_edge_draw_start/4 
* CE 2 is refined into CE [21,22] 


#### Refined cost equations eval_edge_draw_start/4 
* CE 21: eval_edge_draw_start(V_x_size,V_y_size,V_drawing_mode,B) = 0+ eval_edge_draw_bb0_in(V_x_size,V_y_size,B):1
     [] 
* CE 22: eval_edge_draw_start(V_x_size,V_y_size,V_drawing_mode,B) = 0+ eval_edge_draw_bb0_in(V_x_size,V_y_size,B):2
     [] 

### Cost equations --> "Loop" of eval_edge_draw_start/4 
* CEs [22] --> Loop 16 
* CEs [21] --> Loop 17 

#### Loops of eval_edge_draw_start/4 
* Loop 16: eval_edge_draw_start(V_x_size,V_y_size,V_drawing_mode,B) [] 
* Loop 17: eval_edge_draw_start(V_x_size,V_y_size,V_drawing_mode,B) [] 

### Ranking functions of CR eval_edge_draw_start(V_x_size,V_y_size,V_drawing_mode,B) 

#### Partial ranking functions of CR eval_edge_draw_start(V_x_size,V_y_size,V_drawing_mode,B) 


### Resulting Chains:eval_edge_draw_start(V_x_size,V_y_size,V_drawing_mode,B) 
* [17]
* [16]...


### Merging Chains  eval_edge_draw_start/4 into  External patterns of execution 
* [[17]] --> 1 
* [[16]] --> 2 


Computing Bounds
=====================================

#### Cost of loops [8] 

 * loop 8:eval_edge_draw_bb2_in(V_x_size,V_y_size,V_i_0,B,C,D) -> [eval_edge_draw_bb2_in(V_x_size',V_y_size',V_i_0',B',C',D')] 
1
#### Cost of phase [8]:eval_edge_draw_bb2_in(V_x_size,V_y_size,V_i_0,B,C,D) -> [eval_edge_draw_bb2_in(V_x_size',V_y_size',V_i_0',B',C',D')] 
1*it(8)+0
#### Cost of phase [8]:eval_edge_draw_bb2_in(V_x_size,V_y_size,V_i_0,B,C,D) -> [eval_edge_draw_bb2_in(V_x_size',V_y_size',V_i_0',B',C',D')] 
1*it(8)+0
#### Cost of chains of eval_edge_draw_bb2_in(V_x_size,V_y_size,V_i_0,B,C,D):
* Chain [[8]]...: 1*it(8)+0
  with precondition: [V_i_0>=0,B=3] 

* Chain [[8],9]: 1*it(8)+0
  with precondition: [B=3,V_x_size=C,V_y_size=D,V_i_0>=0] 

* Chain [9]: 0
  with precondition: [B=3,C=V_x_size,D=V_y_size,V_i_0>=0] 


#### Cost of loops [10] 

 * loop 10:eval_edge_draw_bb7_in(V_x_size,V_y_size,V_i_1,B) -> [eval_edge_draw_bb7_in(V_x_size',V_y_size',V_i_1',B')] 
1
#### Cost of phase [10]:eval_edge_draw_bb7_in(V_x_size,V_y_size,V_i_1,B) -> [eval_edge_draw_bb7_in(V_x_size',V_y_size',V_i_1',B')] 
1*it(10)+0
#### Cost of phase [10]:eval_edge_draw_bb7_in(V_x_size,V_y_size,V_i_1,B) -> [eval_edge_draw_bb7_in(V_x_size',V_y_size',V_i_1',B')] 
1*it(10)+0
#### Cost of chains of eval_edge_draw_bb7_in(V_x_size,V_y_size,V_i_1,B):
* Chain [[10]]...: 1*it(10)+0
  with precondition: [V_i_1>=0,B=2] 

* Chain [[10],11]: 1*it(10)+0
  with precondition: [B=2,V_i_1>=0] 

* Chain [11]: 0
  with precondition: [B=2,V_i_1>=0] 


#### Cost of chains of eval_edge_draw_bb6_in(V_x_size,V_y_size,B):
* Chain [13]: 1*s(3)+1
  with precondition: [] 

* Chain [12]...: 1*s(4)+1
  with precondition: [] 


#### Cost of chains of eval_edge_draw_bb0_in(V_x_size,V_y_size,B):
* Chain [15]: 1*aux(3)+0
  with precondition: [] 

* Chain [14]...: 1*aux(4)+0
  with precondition: [] 


#### Cost of chains of eval_edge_draw_start(V_x_size,V_y_size,V_drawing_mode,B):
* Chain [17]: 1*s(12)+0
  with precondition: [] 

* Chain [16]...: 1*s(13)+0
  with precondition: [] 


Closed-form bounds of eval_edge_draw_start(V_x_size,V_y_size,V_drawing_mode,B): 
-------------------------------------
* Chain [17] with precondition: [] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [16]... with precondition: [] 
    - Upper bound: inf 
    - Complexity: infinity 

### Maximum cost of eval_edge_draw_start(V_x_size,V_y_size,V_drawing_mode,B): inf 
Asymptotic class: infinity 

Time statistics: 
-------------------------------------
* Partial evaluation computed in 8 ms.
* Invariants computed in 12 ms.
   - Backward Invariants 5 ms.
   - Transitive Invariants 3 ms.
* Refinement performed in 23 ms.
* Termination proved in 3 ms.
* Upper bounds computed in 17 ms.
   - Equation cost structures 7 ms.
   - Phase cost structures 4 ms.
   - Chain cost structures 6 ms.
   - Solving cost expressions 0 ms.
* Total analysis performed in 78 ms.


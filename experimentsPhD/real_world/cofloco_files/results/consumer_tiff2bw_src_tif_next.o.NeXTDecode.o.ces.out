Warning: Ignored call to eval_NeXTDecode_stop/1 in equation eval_NeXTDecode_bb24_in/1 

Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. recursive  : [eval_NeXTDecode_bb1_in/5]
1. recursive  : [eval_NeXTDecode_NewDefault4_in/8,eval_NeXTDecode_bb12_in/7]
2. recursive  : [eval_NeXTDecode_bb11_in/6,loop_cont_eval_NeXTDecode_bb12_in/8]
3. recursive  : [eval_NeXTDecode_15/3,eval_NeXTDecode_16/3,eval_NeXTDecode_33/4,eval_NeXTDecode_34/4,eval_NeXTDecode_NewDefault_in/3,eval_NeXTDecode_bb19_in/4,eval_NeXTDecode_bb4_in/3,loop_cont_eval_NeXTDecode_bb11_in/5]
4. non_recursive  : [eval_NeXTDecode_bb24_in/1]
5. non_recursive  : [eval_NeXTDecode_82/1]
6. non_recursive  : [eval_NeXTDecode_81/2]
7. non_recursive  : [eval_NeXTDecode_bb21_in/1]
8. non_recursive  : [loop_cont_eval_NeXTDecode_bb4_in/2]
9. non_recursive  : [loop_cont_eval_NeXTDecode_bb1_in/4]
10. non_recursive  : [eval_NeXTDecode_bb0_in/2]
11. non_recursive  : [eval_NeXTDecode_start/3]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into eval_NeXTDecode_bb1_in/5
1. SCC is partially evaluated into eval_NeXTDecode_bb12_in/7
2. SCC is partially evaluated into eval_NeXTDecode_bb11_in/6
3. SCC is partially evaluated into eval_NeXTDecode_bb4_in/3
4. SCC is completely evaluated into other SCCs
5. SCC is completely evaluated into other SCCs
6. SCC is completely evaluated into other SCCs
7. SCC is completely evaluated into other SCCs
8. SCC is partially evaluated into loop_cont_eval_NeXTDecode_bb4_in/2
9. SCC is partially evaluated into loop_cont_eval_NeXTDecode_bb1_in/4
10. SCC is partially evaluated into eval_NeXTDecode_bb0_in/2
11. SCC is partially evaluated into eval_NeXTDecode_start/3

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations eval_NeXTDecode_bb1_in/5 
* CE 5 is refined into CE [21] 
* CE 4 is refined into CE [22] 


#### Refined cost equations eval_NeXTDecode_bb1_in/5 
* CE 21: eval_NeXTDecode_bb1_in(A,B,C,D,A) = 0
     [A>=B,0>=B,C=6] 
* CE 22: eval_NeXTDecode_bb1_in(V_occ,V_cc_0,B,C,D) = 1+ eval_NeXTDecode_bb1_in(V_occ,E,B,C,D)
     [V_occ>=V_cc_0,V_cc_0>=1,V_cc_0=E+1] 

### Cost equations --> "Loop" of eval_NeXTDecode_bb1_in/5 
* CEs [22] --> Loop 18 
* CEs [21] --> Loop 19 

#### Loops of eval_NeXTDecode_bb1_in/5 
* Loop 18: eval_NeXTDecode_bb1_in(V_occ,V_cc_0,B,C,D)->  eval_NeXTDecode_bb1_in(V_occ,V_cc_0',B,C,D)
                  [V_occ>=V_cc_0,V_cc_0>=1,V_cc_0=V_cc_0'+1] 
* Loop 19: eval_NeXTDecode_bb1_in(A,B,C,D,A) [A>=B,0>=B,C=6] 

### Ranking functions of CR eval_NeXTDecode_bb1_in(V_occ,V_cc_0,B,C,D) 
* RF of phase [18]: [V_cc_0]

#### Partial ranking functions of CR eval_NeXTDecode_bb1_in(V_occ,V_cc_0,B,C,D) 
* Partial RF of phase [18]:
  - RF of loop [18:1]:
    V_cc_0


### Resulting Chains:eval_NeXTDecode_bb1_in(V_occ,V_cc_0,B,C,D) 
* [[18],19]
* [19]


### Merging Chains  eval_NeXTDecode_bb1_in/5 into  External patterns of execution 
* [[19]] --> 1 
* [[19,[18]]] --> 2 


### Specialization of cost equations eval_NeXTDecode_bb12_in/7 
* CE 20 is refined into CE [23] 
* CE 19 is refined into CE [24] 
* CE 18 is refined into CE [25] 
* CE 17 is refined into CE [26] 


#### Refined cost equations eval_NeXTDecode_bb12_in/7 
* CE 23: eval_NeXTDecode_bb12_in(A,B,C,D,A,B,E) = 0
     [0>=C,D=4] 
* CE 24: eval_NeXTDecode_bb12_in(V_8,V__01,V_n_1,B,C,D,E) = 0
     [0>=V_n_1,B=3] 
* CE 25: eval_NeXTDecode_bb12_in(A,B,C,D,A,B,E) = 0
     [0>=C,D=2] 
* CE 26: eval_NeXTDecode_bb12_in(V_8,V__01,V_n_1,B,C,D,E) = 1+ eval_NeXTDecode_bb12_in(V_8,V__01,F,B,C,D,E)
     [B>=2,V_n_1>=1,4>=B,V_n_1=F+1] 

### Cost equations --> "Loop" of eval_NeXTDecode_bb12_in/7 
* CEs [26] --> Loop 20 
* CEs [23] --> Loop 21 
* CEs [24] --> Loop 22 
* CEs [25] --> Loop 23 

#### Loops of eval_NeXTDecode_bb12_in/7 
* Loop 20: eval_NeXTDecode_bb12_in(V_8,V__01,V_n_1,B,C,D,E)->  eval_NeXTDecode_bb12_in(V_8,V__01,V_n_1',B,C,D,E)
                  [B>=2,V_n_1>=1,4>=B,V_n_1=V_n_1'+1] 
* Loop 21: eval_NeXTDecode_bb12_in(A,B,C,D,A,B,E) [0>=C,D=4] 
* Loop 22: eval_NeXTDecode_bb12_in(V_8,V__01,V_n_1,B,C,D,E) [0>=V_n_1,B=3] 
* Loop 23: eval_NeXTDecode_bb12_in(A,B,C,D,A,B,E) [0>=C,D=2] 

### Ranking functions of CR eval_NeXTDecode_bb12_in(V_8,V__01,V_n_1,B,C,D,E) 
* RF of phase [20]: [V_n_1]

#### Partial ranking functions of CR eval_NeXTDecode_bb12_in(V_8,V__01,V_n_1,B,C,D,E) 
* Partial RF of phase [20]:
  - RF of loop [20:1]:
    V_n_1


### Resulting Chains:eval_NeXTDecode_bb12_in(V_8,V__01,V_n_1,B,C,D,E) 
* [[20],23]
* [[20],22]
* [[20],21]
* [23]
* [22]
* [21]


### Merging Chains  eval_NeXTDecode_bb12_in/7 into  External patterns of execution 
* [[23]] --> 1 
* [[23,[20]]] --> 2 
* [[22]] --> 3 
* [[22,[20]]] --> 4 
* [[21]] --> 5 
* [[21,[20]]] --> 6 


### Specialization of cost equations eval_NeXTDecode_bb11_in/6 
* CE 15 is refined into CE [27,28] 
* CE 16 is refined into CE [29,30] 
* CE 14 is refined into CE [31,32] 


#### Refined cost equations eval_NeXTDecode_bb11_in/6 
* CE 27: eval_NeXTDecode_bb11_in(V_8,V__01,B,C,D,E) = 1+ eval_NeXTDecode_bb12_in(V_8,V__01,F,G,H,I,J):3
     [0>=F,G=3,B=3] 
* CE 28: eval_NeXTDecode_bb11_in(V_8,V__01,B,C,D,E) = 1+ eval_NeXTDecode_bb12_in(V_8,V__01,F,G,H,I,J):4
     [F>=1,G=3,B=3] 
* CE 29: eval_NeXTDecode_bb11_in(A,B,C,A,B,D) = 1+ eval_NeXTDecode_bb12_in(A,B,E,F,A,B,D):1
     [0>=E,F=2,C=2] 
* CE 30: eval_NeXTDecode_bb11_in(A,B,C,A,B,D) = 1+ eval_NeXTDecode_bb12_in(A,B,E,F,A,B,D):2
     [E>=1,F=2,C=2] 
* CE 31: eval_NeXTDecode_bb11_in(V_8,V__01,B,C,D,E) = 2+ eval_NeXTDecode_bb12_in(V_8,V__01,F,G,V_8,V__01,H):5+ eval_NeXTDecode_bb11_in(V_8,V__01,B,C,D,E)
     [B>=2,0>=F,3>=B,G=4] 
* CE 32: eval_NeXTDecode_bb11_in(V_8,V__01,B,C,D,E) = 2+ eval_NeXTDecode_bb12_in(V_8,V__01,F,G,V_8,V__01,H):6+ eval_NeXTDecode_bb11_in(V_8,V__01,B,C,D,E)
     [F>=1,B>=2,3>=B,G=4] 

### Cost equations --> "Loop" of eval_NeXTDecode_bb11_in/6 
* CEs [31,32] --> Loop 24 
* CEs [27,28] --> Loop 25 
* CEs [29,30] --> Loop 26 

#### Loops of eval_NeXTDecode_bb11_in/6 
* Loop 24: eval_NeXTDecode_bb11_in(V_8,V__01,B,C,D,E)->  eval_NeXTDecode_bb11_in(V_8,V__01,B,C,D,E)
                  [B>=2,3>=B] 
* Loop 25: eval_NeXTDecode_bb11_in(V_8,V__01,B,C,D,E) [B=3] 
* Loop 26: eval_NeXTDecode_bb11_in(A,B,C,A,B,D) [C=2] 

### Ranking functions of CR eval_NeXTDecode_bb11_in(V_8,V__01,B,C,D,E) 

#### Partial ranking functions of CR eval_NeXTDecode_bb11_in(V_8,V__01,B,C,D,E) 


### Resulting Chains:eval_NeXTDecode_bb11_in(V_8,V__01,B,C,D,E) 
* [[24]]...
* [[24],26]
* [[24],25]
* [26]
* [25]


### Merging Chains  eval_NeXTDecode_bb11_in/6 into  External patterns of execution 
* [[26],[26,[24]]] --> 1 
* [[25],[25,[24]]] --> 2 
* [[[24]]] --> 3 


### Specialization of cost equations eval_NeXTDecode_bb4_in/3 
* CE 11 is refined into CE [33] 
* CE 7 is refined into CE [34,35] 
* CE 10 is refined into CE [36] 
* CE 8 is refined into CE [37,38] 
* CE 9 is refined into CE [39] 


#### Refined cost equations eval_NeXTDecode_bb4_in/3 
* CE 33: eval_NeXTDecode_bb4_in(V_8,V__01,B) = 0
     [0>=V__01,B=5] 
* CE 34: eval_NeXTDecode_bb4_in(V_8,V__01,B) = 1+ eval_NeXTDecode_bb11_in(V_8,V__01,C,D,E,F):2
     [V__01>=1,C=3,B=3] 
* CE 35: eval_NeXTDecode_bb4_in(V_8,V__01,B) = 1+ eval_NeXTDecode_bb11_in(V_8,V__01,C,D,E,F):3
     [V__01>=1,C=3,B=3] 
* CE 36: eval_NeXTDecode_bb4_in(V_8,V__01,B) = 0
     [V__01>=1,B=3] 
* CE 37: eval_NeXTDecode_bb4_in(V_8,V__01,B) = 2+ eval_NeXTDecode_bb11_in(V_8,V__01,C,V_8,V__01,D):1+ eval_NeXTDecode_bb4_in(V_8,E,B)
     [V__01>=1,V_8+E=V__01,C=2] 
* CE 38: eval_NeXTDecode_bb4_in(V_8,V__01,B) = 2+ eval_NeXTDecode_bb11_in(V_8,V__01,C,D,E,F):3
     [V__01>=1,D+G=E,C=2] 
* CE 39: eval_NeXTDecode_bb4_in(V_8,V__01,B) = 1+ eval_NeXTDecode_bb4_in(V_8,C,B)
     [V__01>=1,V__01=V_8+C] 

### Cost equations --> "Loop" of eval_NeXTDecode_bb4_in/3 
* CEs [37,39] --> Loop 27 
* CEs [35,38] --> Loop 28 
* CEs [33] --> Loop 29 
* CEs [34,36] --> Loop 30 

#### Loops of eval_NeXTDecode_bb4_in/3 
* Loop 27: eval_NeXTDecode_bb4_in(V_8,V__01,B)->  eval_NeXTDecode_bb4_in(V_8,V__01',B)
                  [V__01>=1,V__01=V_8+V__01'] 
* Loop 28: eval_NeXTDecode_bb4_in(V_8,V__01,B) [V__01>=1] 
* Loop 29: eval_NeXTDecode_bb4_in(V_8,V__01,B) [0>=V__01,B=5] 
* Loop 30: eval_NeXTDecode_bb4_in(V_8,V__01,B) [V__01>=1,B=3] 

### Ranking functions of CR eval_NeXTDecode_bb4_in(V_8,V__01,B) 

#### Partial ranking functions of CR eval_NeXTDecode_bb4_in(V_8,V__01,B) 


### Resulting Chains:eval_NeXTDecode_bb4_in(V_8,V__01,B) 
* [[27]]...
* [[27],30]
* [[27],29]
* [[27],28]...
* [30]
* [29]
* [28]...


### Merging Chains  eval_NeXTDecode_bb4_in/3 into  External patterns of execution 
* [[30],[30,[27]]] --> 1 
* [[29]] --> 2 
* [[29,[27]]] --> 3 
* [[28],[[27]]] --> 4 
* [[28,[27]]] --> 5 


### Specialization of cost equations loop_cont_eval_NeXTDecode_bb4_in/2 
* CE 13 is refined into CE [40] 
* CE 12 is refined into CE [41] 


#### Refined cost equations loop_cont_eval_NeXTDecode_bb4_in/2 
* CE 40: loop_cont_eval_NeXTDecode_bb4_in(C,A) = 0
     [C=5] 
* CE 41: loop_cont_eval_NeXTDecode_bb4_in(C,A) = 0
     [C=3] 

### Cost equations --> "Loop" of loop_cont_eval_NeXTDecode_bb4_in/2 
* CEs [40] --> Loop 31 
* CEs [41] --> Loop 32 

#### Loops of loop_cont_eval_NeXTDecode_bb4_in/2 
* Loop 31: loop_cont_eval_NeXTDecode_bb4_in(C,A) [C=5] 
* Loop 32: loop_cont_eval_NeXTDecode_bb4_in(C,A) [C=3] 

### Ranking functions of CR loop_cont_eval_NeXTDecode_bb4_in(C,A) 

#### Partial ranking functions of CR loop_cont_eval_NeXTDecode_bb4_in(C,A) 


### Resulting Chains:loop_cont_eval_NeXTDecode_bb4_in(C,A) 
* [32]
* [31]


### Merging Chains  loop_cont_eval_NeXTDecode_bb4_in/2 into  External patterns of execution 
* [[32]] --> 1 
* [[31]] --> 2 


### Specialization of cost equations loop_cont_eval_NeXTDecode_bb1_in/4 
* CE 6 is refined into CE [42,43,44,45,46] 


#### Refined cost equations loop_cont_eval_NeXTDecode_bb1_in/4 
* CE 42: loop_cont_eval_NeXTDecode_bb1_in(F,A,B,C) = 1+ eval_NeXTDecode_bb4_in(A,B,G):1+ loop_cont_eval_NeXTDecode_bb4_in(H,C):1
     [B>=1,H=3,G=3,F=6] 
* CE 43: loop_cont_eval_NeXTDecode_bb1_in(F,A,B,C) = 1+ eval_NeXTDecode_bb4_in(A,B,G):2+ loop_cont_eval_NeXTDecode_bb4_in(H,C):2
     [0>=B,H=5,G=5,F=6] 
* CE 44: loop_cont_eval_NeXTDecode_bb1_in(F,A,B,C) = 1+ eval_NeXTDecode_bb4_in(A,B,G):3+ loop_cont_eval_NeXTDecode_bb4_in(H,C):2
     [B>=1,A>=1,H=5,G=5,F=6] 
* CE 45: loop_cont_eval_NeXTDecode_bb1_in(F,A,B,C) = 1+ eval_NeXTDecode_bb4_in(A,B,G):4
     [B>=1,F=6] 
* CE 46: loop_cont_eval_NeXTDecode_bb1_in(F,A,B,C) = 1+ eval_NeXTDecode_bb4_in(A,B,G):5
     [B>=A+1,B>=1,F=6] 

### Cost equations --> "Loop" of loop_cont_eval_NeXTDecode_bb1_in/4 
* CEs [45,46] --> Loop 33 
* CEs [42,44] --> Loop 34 
* CEs [43] --> Loop 35 

#### Loops of loop_cont_eval_NeXTDecode_bb1_in/4 
* Loop 33: loop_cont_eval_NeXTDecode_bb1_in(F,A,B,C) [B>=1,F=6] 
* Loop 34: loop_cont_eval_NeXTDecode_bb1_in(F,A,B,C) [B>=1,F=6] 
* Loop 35: loop_cont_eval_NeXTDecode_bb1_in(F,A,B,C) [0>=B,F=6] 

### Ranking functions of CR loop_cont_eval_NeXTDecode_bb1_in(F,A,B,C) 

#### Partial ranking functions of CR loop_cont_eval_NeXTDecode_bb1_in(F,A,B,C) 


### Resulting Chains:loop_cont_eval_NeXTDecode_bb1_in(F,A,B,C) 
* [35]
* [34]
* [33]...


### Merging Chains  loop_cont_eval_NeXTDecode_bb1_in/4 into  External patterns of execution 
* [[35]] --> 1 
* [[34]] --> 2 
* [[33]] --> 3 


### Specialization of cost equations eval_NeXTDecode_bb0_in/2 
* CE 3 is refined into CE [47,48,49] 


#### Refined cost equations eval_NeXTDecode_bb0_in/2 
* CE 47: eval_NeXTDecode_bb0_in(V_occ,B) = 1+ eval_NeXTDecode_bb1_in(V_occ,V_occ,C,D,V_occ):1+ loop_cont_eval_NeXTDecode_bb1_in(E,D,V_occ,B):1
     [0>=V_occ,E=6,C=6] 
* CE 48: eval_NeXTDecode_bb0_in(V_occ,B) = 1+ eval_NeXTDecode_bb1_in(V_occ,V_occ,C,D,V_occ):2+ loop_cont_eval_NeXTDecode_bb1_in(E,D,V_occ,B):2
     [V_occ>=1,E=6,C=6] 
* CE 49: eval_NeXTDecode_bb0_in(V_occ,B) = 1+ eval_NeXTDecode_bb1_in(V_occ,V_occ,C,D,V_occ):2+ loop_cont_eval_NeXTDecode_bb1_in(E,D,V_occ,B):3
     [V_occ>=1,E=6,C=6] 

### Cost equations --> "Loop" of eval_NeXTDecode_bb0_in/2 
* CEs [49] --> Loop 36 
* CEs [48] --> Loop 37 
* CEs [47] --> Loop 38 

#### Loops of eval_NeXTDecode_bb0_in/2 
* Loop 36: eval_NeXTDecode_bb0_in(V_occ,B) [V_occ>=1] 
* Loop 37: eval_NeXTDecode_bb0_in(V_occ,B) [V_occ>=1] 
* Loop 38: eval_NeXTDecode_bb0_in(V_occ,B) [0>=V_occ] 

### Ranking functions of CR eval_NeXTDecode_bb0_in(V_occ,B) 

#### Partial ranking functions of CR eval_NeXTDecode_bb0_in(V_occ,B) 


### Resulting Chains:eval_NeXTDecode_bb0_in(V_occ,B) 
* [38]
* [37]
* [36]...


### Merging Chains  eval_NeXTDecode_bb0_in/2 into  External patterns of execution 
* [[38]] --> 1 
* [[37]] --> 2 
* [[36]] --> 3 


### Specialization of cost equations eval_NeXTDecode_start/3 
* CE 2 is refined into CE [50,51,52] 


#### Refined cost equations eval_NeXTDecode_start/3 
* CE 50: eval_NeXTDecode_start(V_occ,V_s,B) = 0+ eval_NeXTDecode_bb0_in(V_occ,B):1
     [0>=V_occ] 
* CE 51: eval_NeXTDecode_start(V_occ,V_s,B) = 0+ eval_NeXTDecode_bb0_in(V_occ,B):2
     [V_occ>=1] 
* CE 52: eval_NeXTDecode_start(V_occ,V_s,B) = 0+ eval_NeXTDecode_bb0_in(V_occ,B):3
     [V_occ>=1] 

### Cost equations --> "Loop" of eval_NeXTDecode_start/3 
* CEs [52] --> Loop 39 
* CEs [51] --> Loop 40 
* CEs [50] --> Loop 41 

#### Loops of eval_NeXTDecode_start/3 
* Loop 39: eval_NeXTDecode_start(V_occ,V_s,B) [V_occ>=1] 
* Loop 40: eval_NeXTDecode_start(V_occ,V_s,B) [V_occ>=1] 
* Loop 41: eval_NeXTDecode_start(V_occ,V_s,B) [0>=V_occ] 

### Ranking functions of CR eval_NeXTDecode_start(V_occ,V_s,B) 

#### Partial ranking functions of CR eval_NeXTDecode_start(V_occ,V_s,B) 


### Resulting Chains:eval_NeXTDecode_start(V_occ,V_s,B) 
* [41]
* [40]
* [39]...


### Merging Chains  eval_NeXTDecode_start/3 into  External patterns of execution 
* [[41]] --> 1 
* [[40]] --> 2 
* [[39]] --> 3 


Computing Bounds
=====================================

#### Cost of loops [18] 

 * loop 18:eval_NeXTDecode_bb1_in(V_occ,V_cc_0,B,C,D) -> [eval_NeXTDecode_bb1_in(V_occ',V_cc_0',B',C',D')] 
1
#### Cost of phase [18]:eval_NeXTDecode_bb1_in(V_occ,V_cc_0,B,C,D) -> [eval_NeXTDecode_bb1_in(V_occ',V_cc_0',B',C',D')] 
1*it(18)+0
  Such that:it(18) =< V_cc_0
it(18) =< V_cc_0-V_cc_0'

#### Cost of chains of eval_NeXTDecode_bb1_in(V_occ,V_cc_0,B,C,D):
* Chain [[18],19]: 1*it(18)+0
  Such that:it(18) =< V_cc_0

  with precondition: [B=6,V_occ=D,V_cc_0>=1,V_occ>=V_cc_0] 

* Chain [19]: 0
  with precondition: [B=6,V_occ=D,0>=V_cc_0,V_occ>=V_cc_0] 


#### Cost of loops [20] 

 * loop 20:eval_NeXTDecode_bb12_in(V_8,V__01,V_n_1,B,C,D,E) -> [eval_NeXTDecode_bb12_in(V_8',V__01',V_n_1',B',C',D',E')] 
1
#### Cost of phase [20]:eval_NeXTDecode_bb12_in(V_8,V__01,V_n_1,B,C,D,E) -> [eval_NeXTDecode_bb12_in(V_8',V__01',V_n_1',B',C',D',E')] 
1*it(20)+0
  Such that:it(20) =< V_n_1
it(20) =< V_n_1-V_n_1'

#### Cost of phase [20]:eval_NeXTDecode_bb12_in(V_8,V__01,V_n_1,B,C,D,E) -> [eval_NeXTDecode_bb12_in(V_8',V__01',V_n_1',B',C',D',E')] 
1*it(20)+0
  Such that:it(20) =< V_n_1
it(20) =< V_n_1-V_n_1'

#### Cost of phase [20]:eval_NeXTDecode_bb12_in(V_8,V__01,V_n_1,B,C,D,E) -> [eval_NeXTDecode_bb12_in(V_8',V__01',V_n_1',B',C',D',E')] 
1*it(20)+0
  Such that:it(20) =< V_n_1
it(20) =< V_n_1-V_n_1'

#### Cost of chains of eval_NeXTDecode_bb12_in(V_8,V__01,V_n_1,B,C,D,E):
* Chain [[20],23]: 1*it(20)+0
  Such that:it(20) =< V_n_1

  with precondition: [B=2,V_8=C,V__01=D,V_n_1>=1] 

* Chain [[20],22]: 1*it(20)+0
  Such that:it(20) =< V_n_1

  with precondition: [B=3,V_n_1>=1] 

* Chain [[20],21]: 1*it(20)+0
  Such that:it(20) =< V_n_1

  with precondition: [B=4,V_8=C,V__01=D,V_n_1>=1] 

* Chain [23]: 0
  with precondition: [B=2,C=V_8,D=V__01,0>=V_n_1] 

* Chain [22]: 0
  with precondition: [B=3,0>=V_n_1] 

* Chain [21]: 0
  with precondition: [B=4,C=V_8,D=V__01,0>=V_n_1] 


#### Cost of loops [24] 

 * loop 24:eval_NeXTDecode_bb11_in(V_8,V__01,B,C,D,E) -> [eval_NeXTDecode_bb11_in(V_8',V__01',B',C',D',E')] 
1*s(2)+0
#### Cost of phase [24]:eval_NeXTDecode_bb11_in(V_8,V__01,B,C,D,E) -> [eval_NeXTDecode_bb11_in(V_8',V__01',B',C',D',E')] 
1*s(3)+0
#### Cost of phase [24]:eval_NeXTDecode_bb11_in(V_8,V__01,B,C,D,E) -> [eval_NeXTDecode_bb11_in(V_8',V__01',B',C',D',E')] 
1*s(3)+0
#### Cost of phase [24]:eval_NeXTDecode_bb11_in(V_8,V__01,B,C,D,E) -> [eval_NeXTDecode_bb11_in(V_8',V__01',B',C',D',E')] 
1*s(3)+0
#### Cost of chains of eval_NeXTDecode_bb11_in(V_8,V__01,B,C,D,E):
* Chain [[24]]...: 1*s(3)+0
  with precondition: [B>=2,3>=B] 

* Chain [[24],26]: 2*aux(2)+0
  with precondition: [B=2,D=V__01,V_8=C,D>=1] 

* Chain [[24],25]: 2*aux(3)+0
  with precondition: [B=3,V__01>=1] 

* Chain [26]: 1*aux(2)+0
  with precondition: [B=2,C=V_8,V__01=D,V__01>=1] 

* Chain [25]: 1*aux(3)+0
  with precondition: [B=3,V__01>=1] 


#### Cost of loops [27] 

 * loop 27:eval_NeXTDecode_bb4_in(V_8,V__01,B) -> [eval_NeXTDecode_bb4_in(V_8',V__01',B')] 
1*s(11)+0
#### Cost of phase [27]:eval_NeXTDecode_bb4_in(V_8,V__01,B) -> [eval_NeXTDecode_bb4_in(V_8',V__01',B')] 
1*s(12)+0
#### Cost of phase [27]:eval_NeXTDecode_bb4_in(V_8,V__01,B) -> [eval_NeXTDecode_bb4_in(V_8',V__01',B')] 
1*s(12)+0
#### Cost of phase [27]:eval_NeXTDecode_bb4_in(V_8,V__01,B) -> [eval_NeXTDecode_bb4_in(V_8',V__01',B')] 
1*s(12)+0
#### Cost of phase [27]:eval_NeXTDecode_bb4_in(V_8,V__01,B) -> [eval_NeXTDecode_bb4_in(V_8',V__01',B')] 
1*s(12)+0
#### Cost of chains of eval_NeXTDecode_bb4_in(V_8,V__01,B):
* Chain [[27]]...: 1*s(12)+0
  with precondition: [V__01>=1] 

* Chain [[27],30]: 2*aux(7)+0
  with precondition: [B=3,V__01>=1,V__01>=V_8+1] 

* Chain [[27],29]: 1*s(12)+0
  with precondition: [B=5,V_8>=1,V__01>=1] 

* Chain [[27],28]...: 2*aux(8)+0
  with precondition: [V__01>=1,V__01>=V_8+1] 

* Chain [30]: 1*aux(7)+0
  with precondition: [B=3,V__01>=1] 

* Chain [29]: 0
  with precondition: [B=5,0>=V__01] 

* Chain [28]...: 1*aux(8)+0
  with precondition: [V__01>=1] 


#### Cost of chains of loop_cont_eval_NeXTDecode_bb4_in(C,A):
* Chain [32]: 0
  with precondition: [C=3] 

* Chain [31]: 0
  with precondition: [C=5] 


#### Cost of chains of loop_cont_eval_NeXTDecode_bb1_in(F,A,B,C):
* Chain [35]: 1
  with precondition: [F=6,0>=B] 

* Chain [34]: 1*aux(11)+0
  with precondition: [F=6,B>=1] 

* Chain [33]...: 1*aux(12)+0
  with precondition: [F=6,B>=1] 


#### Cost of chains of eval_NeXTDecode_bb0_in(V_occ,B):
* Chain [38]: 2
  with precondition: [0>=V_occ] 

* Chain [37]: 1*s(24)+1*s(25)+1
  Such that:s(24) =< V_occ

  with precondition: [V_occ>=1] 

* Chain [36]...: 1*s(26)+1*s(27)+1
  Such that:s(26) =< V_occ

  with precondition: [V_occ>=1] 


#### Cost of chains of eval_NeXTDecode_start(V_occ,V_s,B):
* Chain [41]: 2
  with precondition: [0>=V_occ] 

* Chain [40]: 1*s(28)+1*s(29)+1
  Such that:s(28) =< V_occ

  with precondition: [V_occ>=1] 

* Chain [39]...: 1*s(30)+1*s(31)+1
  Such that:s(30) =< V_occ

  with precondition: [V_occ>=1] 


Closed-form bounds of eval_NeXTDecode_start(V_occ,V_s,B): 
-------------------------------------
* Chain [41] with precondition: [0>=V_occ] 
    - Upper bound: 2 
    - Complexity: constant 
* Chain [40] with precondition: [V_occ>=1] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [39]... with precondition: [V_occ>=1] 
    - Upper bound: inf 
    - Complexity: infinity 

### Maximum cost of eval_NeXTDecode_start(V_occ,V_s,B): inf 
Asymptotic class: infinity 

Time statistics: 
-------------------------------------
* Partial evaluation computed in 87 ms.
* Invariants computed in 124 ms.
   - Backward Invariants 74 ms.
   - Transitive Invariants 20 ms.
* Refinement performed in 237 ms.
* Termination proved in 20 ms.
* Upper bounds computed in 175 ms.
   - Equation cost structures 73 ms.
   - Phase cost structures 39 ms.
   - Chain cost structures 71 ms.
   - Solving cost expressions 2 ms.
* Total analysis performed in 762 ms.


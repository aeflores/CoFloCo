Warning: Ignored call to eval_strsearch_stop/1 in equation eval_strsearch_bb9_in/1 

Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. recursive  : [eval_strsearch_bb2_in/15,eval_strsearch_bb4_in/16]
1. recursive  : [eval_strsearch_15/9,eval_strsearch_16/9,eval_strsearch_bb1_in/5,loop_cont_eval_strsearch_bb2_in/10]
2. non_recursive  : [eval_strsearch_bb9_in/1]
3. non_recursive  : [loop_cont_eval_strsearch_bb1_in/2]
4. non_recursive  : [eval_strsearch_4/5]
5. non_recursive  : [eval_strsearch_3/4]
6. non_recursive  : [eval_strsearch_bb0_in/2]
7. non_recursive  : [eval_strsearch_start/2]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into eval_strsearch_bb2_in/15
1. SCC is partially evaluated into eval_strsearch_bb1_in/5
2. SCC is completely evaluated into other SCCs
3. SCC is completely evaluated into other SCCs
4. SCC is partially evaluated into eval_strsearch_4/5
5. SCC is completely evaluated into other SCCs
6. SCC is completely evaluated into other SCCs
7. SCC is partially evaluated into eval_strsearch_start/2

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations eval_strsearch_bb2_in/15 
* CE 10 is refined into CE [11] 
* CE 8 is refined into CE [12] 
* CE 9 is refined into CE [13] 


#### Refined cost equations eval_strsearch_bb2_in/15 
* CE 11: eval_strsearch_bb2_in(V__len,V_3,V_pos_0,V_shift_0,V_pos_1,V_shift_1,B,C,D,E,F,G,H,I,J) = 1+ eval_strsearch_bb2_in(V__len,V_3,V_pos_0,V_shift_0,K,L,B,C,D,E,F,G,H,I,J)
     [V_3>=V_pos_0+1,B>=2,3>=B,K=V_pos_1+L] 
* CE 12: eval_strsearch_bb2_in(A,B,C,D,E,F,G,A,B,E,H,I,J,K,L) = 0
     [B>=C+1,G=3] 
* CE 13: eval_strsearch_bb2_in(A,B,C,D,E,F,G,A,B,C,D,E,F,H,A) = 0
     [B>=C+1,G=2] 

### Cost equations --> "Loop" of eval_strsearch_bb2_in/15 
* CEs [12] --> Loop 9 
* CEs [13] --> Loop 10 
* CEs [11] --> Loop 11 

#### Loops of eval_strsearch_bb2_in/15 
* Loop 9: eval_strsearch_bb2_in(A,B,C,D,E,F,G,A,B,E,H,I,J,K,L) [B>=C+1,G=3] 
* Loop 10: eval_strsearch_bb2_in(A,B,C,D,E,F,G,A,B,C,D,E,F,H,A) [B>=C+1,G=2] 
* Loop 11: eval_strsearch_bb2_in(V__len,V_3,V_pos_0,V_shift_0,V_pos_1,V_shift_1,B,C,D,E,F,G,H,I,J)->  eval_strsearch_bb2_in(V__len,V_3,V_pos_0,V_shift_0,V_pos_1',V_shift_1',B,C,D,E,F,G,H,I,J)
                  [V_3>=V_pos_0+1,B>=2,3>=B,V_pos_1+V_shift_1'=V_pos_1'] 

### Ranking functions of CR eval_strsearch_bb2_in(V__len,V_3,V_pos_0,V_shift_0,V_pos_1,V_shift_1,B,C,D,E,F,G,H,I,J) 

#### Partial ranking functions of CR eval_strsearch_bb2_in(V__len,V_3,V_pos_0,V_shift_0,V_pos_1,V_shift_1,B,C,D,E,F,G,H,I,J) 


### Resulting Chains:eval_strsearch_bb2_in(V__len,V_3,V_pos_0,V_shift_0,V_pos_1,V_shift_1,B,C,D,E,F,G,H,I,J) 
* [[11]]...
* [[11],10]
* [[11],9]
* [10]
* [9]


### Merging Chains  eval_strsearch_bb2_in/15 into  External patterns of execution 
* [[10],[10,[11]]] --> 1 
* [[9],[9,[11]]] --> 2 
* [[[11]]] --> 3 


### Specialization of cost equations eval_strsearch_bb1_in/5 
* CE 5 is refined into CE [14,15] 
* CE 7 is refined into CE [16] 
* CE 4 is refined into CE [17,18] 
* CE 6 is refined into CE [19,20] 


#### Refined cost equations eval_strsearch_bb1_in/5 
* CE 14: eval_strsearch_bb1_in(V__len,V_3,V_pos_0,V_shift_0,B) = 1+ eval_strsearch_bb2_in(V__len,V_3,V_pos_0,V_shift_0,V_pos_0,V_shift_0,C,V__len,V_3,V_pos_0,V_shift_0,D,E,F,V__len):1
     [V_3>=V_pos_0+1,C=2,B=4] 
* CE 15: eval_strsearch_bb1_in(V__len,V_3,V_pos_0,V_shift_0,B) = 1+ eval_strsearch_bb2_in(V__len,V_3,V_pos_0,V_shift_0,V_pos_0,V_shift_0,C,D,E,F,G,H,I,J,K):3
     [V_3>=V_pos_0+1,C=2,B=4] 
* CE 16: eval_strsearch_bb1_in(V__len,V_3,V_pos_0,V_shift_0,B) = 0
     [V_pos_0>=V_3,B=4] 
* CE 17: eval_strsearch_bb1_in(V__len,V_3,V_pos_0,V_shift_0,B) = 2+ eval_strsearch_bb2_in(V__len,V_3,V_pos_0,V_shift_0,V_pos_0,V_shift_0,C,V__len,V_3,V_pos_0,V_shift_0,D,E,F,V__len):1+ eval_strsearch_bb1_in(V__len,V_3,G,F,H)
     [V_3>=V_pos_0+1,G=D+1,H=4,C=2,B=4] 
* CE 18: eval_strsearch_bb1_in(V__len,V_3,V_pos_0,V_shift_0,B) = 2+ eval_strsearch_bb2_in(V__len,V_3,V_pos_0,V_shift_0,V_pos_0,V_shift_0,C,D,E,F,G,H,I,J,K):3
     [V_3>=V_pos_0+1,L=H+1,M=4,C=2,B=4] 
* CE 19: eval_strsearch_bb1_in(V__len,V_3,V_pos_0,V_shift_0,B) = 2+ eval_strsearch_bb2_in(V__len,V_3,V_pos_0,V_shift_0,V_pos_0,V_shift_0,C,V__len,V_3,D,E,F,G,H,I):2+ eval_strsearch_bb1_in(V__len,V_3,D,E,J)
     [V_3>=V_pos_0+1,J=4,C=3,B=4] 
* CE 20: eval_strsearch_bb1_in(V__len,V_3,V_pos_0,V_shift_0,B) = 2+ eval_strsearch_bb2_in(V__len,V_3,V_pos_0,V_shift_0,V_pos_0,V_shift_0,C,D,E,F,G,H,I,J,K):3
     [V_3>=V_pos_0+1,L=4,C=3,B=4] 

### Cost equations --> "Loop" of eval_strsearch_bb1_in/5 
* CEs [15,18,20] --> Loop 12 
* CEs [17,19] --> Loop 13 
* CEs [14] --> Loop 14 
* CEs [16] --> Loop 15 

#### Loops of eval_strsearch_bb1_in/5 
* Loop 12: eval_strsearch_bb1_in(V__len,V_3,V_pos_0,V_shift_0,B) [V_3>=V_pos_0+1,B=4] 
* Loop 13: eval_strsearch_bb1_in(V__len,V_3,V_pos_0,V_shift_0,B)->  eval_strsearch_bb1_in(V__len,V_3,V_pos_0',V_shift_0',B')
                  [V_3>=V_pos_0+1,B'=4,B=4] 
* Loop 14: eval_strsearch_bb1_in(V__len,V_3,V_pos_0,V_shift_0,B) [V_3>=V_pos_0+1,B=4] 
* Loop 15: eval_strsearch_bb1_in(V__len,V_3,V_pos_0,V_shift_0,B) [V_pos_0>=V_3,B=4] 

### Ranking functions of CR eval_strsearch_bb1_in(V__len,V_3,V_pos_0,V_shift_0,B) 

#### Partial ranking functions of CR eval_strsearch_bb1_in(V__len,V_3,V_pos_0,V_shift_0,B) 


### Resulting Chains:eval_strsearch_bb1_in(V__len,V_3,V_pos_0,V_shift_0,B) 
* [[13]]...
* [[13],15]
* [[13],14]
* [[13],12]...
* [15]
* [14]
* [12]...


### Merging Chains  eval_strsearch_bb1_in/5 into  External patterns of execution 
* [[15]] --> 1 
* [[14],[14,[13]],[15,[13]]] --> 2 
* [[12],[12,[13]]] --> 3 
* [[[13]]] --> 4 


### Specialization of cost equations eval_strsearch_4/5 
* CE 3 is refined into CE [21,22,23,24] 


#### Refined cost equations eval_strsearch_4/5 
* CE 21: eval_strsearch_4(V__len,V_0,V_2,V_3,B) = 1+ eval_strsearch_bb1_in(C,V_3,V_2,V_0,D):1
     [V_2>=V_3,V_2+1=C,V_2+1=V__len,D=4] 
* CE 22: eval_strsearch_4(V__len,V_0,V_2,V_3,B) = 1+ eval_strsearch_bb1_in(C,V_3,V_2,V_0,D):2
     [V_3>=V_2+1,V_2+1=C,V_2+1=V__len,D=4] 
* CE 23: eval_strsearch_4(V__len,V_0,V_2,V_3,B) = 1+ eval_strsearch_bb1_in(C,V_3,V_2,V_0,D):3
     [V_3>=V_2+1,V_2+1=C,V_2+1=V__len,D=4] 
* CE 24: eval_strsearch_4(V__len,V_0,V_2,V_3,B) = 1+ eval_strsearch_bb1_in(C,V_3,V_2,V_0,D):4
     [V_3>=V_2+1,V_2+1=C,V_2+1=V__len,D=4] 

### Cost equations --> "Loop" of eval_strsearch_4/5 
* CEs [23,24] --> Loop 16 
* CEs [21] --> Loop 17 
* CEs [22] --> Loop 18 

#### Loops of eval_strsearch_4/5 
* Loop 16: eval_strsearch_4(V__len,V_0,V_2,V_3,B) [V_3>=V__len,V__len=V_2+1] 
* Loop 17: eval_strsearch_4(V__len,V_0,V_2,V_3,B) [V__len>=V_3+1,V__len=V_2+1] 
* Loop 18: eval_strsearch_4(V__len,V_0,V_2,V_3,B) [V_3>=V__len,V__len=V_2+1] 

### Ranking functions of CR eval_strsearch_4(V__len,V_0,V_2,V_3,B) 

#### Partial ranking functions of CR eval_strsearch_4(V__len,V_0,V_2,V_3,B) 


### Resulting Chains:eval_strsearch_4(V__len,V_0,V_2,V_3,B) 
* [18]
* [17]
* [16]...


### Merging Chains  eval_strsearch_4/5 into  External patterns of execution 
* [[18]] --> 1 
* [[17]] --> 2 
* [[16]] --> 3 


### Specialization of cost equations eval_strsearch_start/2 
* CE 2 is refined into CE [25,26,27] 


#### Refined cost equations eval_strsearch_start/2 
* CE 25: eval_strsearch_start(V__len,B) = 0+ eval_strsearch_4(C,D,E,F,B):1
     [F>=E+1,E+1=C,E+1=V__len] 
* CE 26: eval_strsearch_start(V__len,B) = 0+ eval_strsearch_4(C,D,E,F,B):2
     [E>=F,E+1=C,E+1=V__len] 
* CE 27: eval_strsearch_start(V__len,B) = 0+ eval_strsearch_4(V__len,C,D,E,B):3
     [E>=V__len,V__len=D+1] 

### Cost equations --> "Loop" of eval_strsearch_start/2 
* CEs [27] --> Loop 19 
* CEs [25,26] --> Loop 20 

#### Loops of eval_strsearch_start/2 
* Loop 19: eval_strsearch_start(V__len,B) [] 
* Loop 20: eval_strsearch_start(V__len,B) [] 

### Ranking functions of CR eval_strsearch_start(V__len,B) 

#### Partial ranking functions of CR eval_strsearch_start(V__len,B) 


### Resulting Chains:eval_strsearch_start(V__len,B) 
* [20]
* [19]...


### Merging Chains  eval_strsearch_start/2 into  External patterns of execution 
* [[20]] --> 1 
* [[19]] --> 2 


Computing Bounds
=====================================

#### Cost of loops [11] 

 * loop 11:eval_strsearch_bb2_in(V__len,V_3,V_pos_0,V_shift_0,V_pos_1,V_shift_1,B,C,D,E,F,G,H,I,J) -> [eval_strsearch_bb2_in(V__len',V_3',V_pos_0',V_shift_0',V_pos_1',V_shift_1',B',C',D',E',F',G',H',I',J')] 
1
#### Cost of phase [11]:eval_strsearch_bb2_in(V__len,V_3,V_pos_0,V_shift_0,V_pos_1,V_shift_1,B,C,D,E,F,G,H,I,J) -> [eval_strsearch_bb2_in(V__len',V_3',V_pos_0',V_shift_0',V_pos_1',V_shift_1',B',C',D',E',F',G',H',I',J')] 
1*it(11)+0
#### Cost of phase [11]:eval_strsearch_bb2_in(V__len,V_3,V_pos_0,V_shift_0,V_pos_1,V_shift_1,B,C,D,E,F,G,H,I,J) -> [eval_strsearch_bb2_in(V__len',V_3',V_pos_0',V_shift_0',V_pos_1',V_shift_1',B',C',D',E',F',G',H',I',J')] 
1*it(11)+0
#### Cost of phase [11]:eval_strsearch_bb2_in(V__len,V_3,V_pos_0,V_shift_0,V_pos_1,V_shift_1,B,C,D,E,F,G,H,I,J) -> [eval_strsearch_bb2_in(V__len',V_3',V_pos_0',V_shift_0',V_pos_1',V_shift_1',B',C',D',E',F',G',H',I',J')] 
1*it(11)+0
#### Cost of chains of eval_strsearch_bb2_in(V__len,V_3,V_pos_0,V_shift_0,V_pos_1,V_shift_1,B,C,D,E,F,G,H,I,J):
* Chain [[11]]...: 1*it(11)+0
  with precondition: [V_3>=V_pos_0+1,B>=2,3>=B] 

* Chain [[11],10]: 1*it(11)+0
  with precondition: [B=2,V__len=C,V_3=D,V_pos_0=E,V_shift_0=F,V__len=J,V_3>=V_pos_0+1] 

* Chain [[11],9]: 1*it(11)+0
  with precondition: [B=3,V__len=C,V_3=D,V_3>=V_pos_0+1] 

* Chain [10]: 0
  with precondition: [B=2,F=V_shift_0,G=V_pos_1,H=V_shift_1,V__len=C,V_3=D,V_pos_0=E,V__len=J,V_3>=V_pos_0+1] 

* Chain [9]: 0
  with precondition: [B=3,C=V__len,E=V_pos_1,V_3=D,V_3>=V_pos_0+1] 


#### Cost of loops [13] 

 * loop 13:eval_strsearch_bb1_in(V__len,V_3,V_pos_0,V_shift_0,B) -> [eval_strsearch_bb1_in(V__len',V_3',V_pos_0',V_shift_0',B')] 
1*s(5)+0
#### Cost of phase [13]:eval_strsearch_bb1_in(V__len,V_3,V_pos_0,V_shift_0,B) -> [eval_strsearch_bb1_in(V__len',V_3',V_pos_0',V_shift_0',B')] 
1*s(6)+0
#### Cost of phase [13]:eval_strsearch_bb1_in(V__len,V_3,V_pos_0,V_shift_0,B) -> [eval_strsearch_bb1_in(V__len',V_3',V_pos_0',V_shift_0',B')] 
1*s(6)+0
#### Cost of phase [13]:eval_strsearch_bb1_in(V__len,V_3,V_pos_0,V_shift_0,B) -> [eval_strsearch_bb1_in(V__len',V_3',V_pos_0',V_shift_0',B')] 
1*s(6)+0
#### Cost of phase [13]:eval_strsearch_bb1_in(V__len,V_3,V_pos_0,V_shift_0,B) -> [eval_strsearch_bb1_in(V__len',V_3',V_pos_0',V_shift_0',B')] 
1*s(6)+0
#### Cost of chains of eval_strsearch_bb1_in(V__len,V_3,V_pos_0,V_shift_0,B):
* Chain [[13]]...: 1*s(6)+0
  with precondition: [V_3>=V_pos_0+1,B=4] 

* Chain [[13],15]: 1*s(6)+0
  with precondition: [B=4,V_3>=V_pos_0+1] 

* Chain [[13],14]: 2*s(6)+1
  with precondition: [B=4,V_3>=V_pos_0+1] 

* Chain [[13],12]...: 2*aux(4)+0
  with precondition: [B=4,V_3>=V_pos_0+1] 

* Chain [15]: 0
  with precondition: [B=4,V_pos_0>=V_3] 

* Chain [14]: 1*s(7)+1
  with precondition: [B=4,V_3>=V_pos_0+1] 

* Chain [12]...: 1*aux(4)+0
  with precondition: [B=4,V_3>=V_pos_0+1] 


#### Cost of chains of eval_strsearch_4(V__len,V_0,V_2,V_3,B):
* Chain [18]: 1*s(16)+1
  with precondition: [V_2+1=V__len,V_3>=V_2+1] 

* Chain [17]: 1
  with precondition: [V_2+1=V__len,V_2>=V_3] 

* Chain [16]...: 1*aux(7)+0
  with precondition: [V_2+1=V__len,V_3>=V_2+1] 


#### Cost of chains of eval_strsearch_start(V__len,B):
* Chain [20]: 1*aux(8)+0
  with precondition: [] 

* Chain [19]...: 1*s(20)+0
  with precondition: [] 


Closed-form bounds of eval_strsearch_start(V__len,B): 
-------------------------------------
* Chain [20] with precondition: [] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [19]... with precondition: [] 
    - Upper bound: inf 
    - Complexity: infinity 

### Maximum cost of eval_strsearch_start(V__len,B): inf 
Asymptotic class: infinity 

Time statistics: 
-------------------------------------
* Partial evaluation computed in 43 ms.
* Invariants computed in 32 ms.
   - Backward Invariants 19 ms.
   - Transitive Invariants 5 ms.
* Refinement performed in 60 ms.
* Termination proved in 3 ms.
* Upper bounds computed in 41 ms.
   - Equation cost structures 16 ms.
   - Phase cost structures 9 ms.
   - Chain cost structures 18 ms.
   - Solving cost expressions 0 ms.
* Total analysis performed in 212 ms.


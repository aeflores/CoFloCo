Warning: Ignored call to eval_put1bitcmaptile_stop/1 in equation loop_cont_eval_put1bitcmaptile_bb1_in/2 

Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. recursive  : [eval_put1bitcmaptile_bb2_in/9]
1. recursive  : [eval_put1bitcmaptile_NewDefault_in/5,eval_put1bitcmaptile_bb10_in/5,eval_put1bitcmaptile_bb11_in/5,eval_put1bitcmaptile_bb12_in/5,eval_put1bitcmaptile_bb13_in/5,eval_put1bitcmaptile_bb1_in/3,eval_put1bitcmaptile_bb7_in/5,eval_put1bitcmaptile_bb8_in/5,eval_put1bitcmaptile_bb9_in/5,loop_cont_eval_put1bitcmaptile_bb2_in/6]
2. non_recursive  : [loop_cont_eval_put1bitcmaptile_bb1_in/2]
3. non_recursive  : [eval_put1bitcmaptile_bb0_in/4]
4. non_recursive  : [eval_put1bitcmaptile_start/7]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into eval_put1bitcmaptile_bb2_in/9
1. SCC is partially evaluated into eval_put1bitcmaptile_bb1_in/3
2. SCC is completely evaluated into other SCCs
3. SCC is partially evaluated into eval_put1bitcmaptile_bb0_in/4
4. SCC is partially evaluated into eval_put1bitcmaptile_start/7

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations eval_put1bitcmaptile_bb2_in/9 
* CE 23 is refined into CE [24] 
* CE 22 is refined into CE [25] 
* CE 21 is refined into CE [26] 
* CE 20 is refined into CE [27] 
* CE 19 is refined into CE [28] 
* CE 18 is refined into CE [29] 
* CE 17 is refined into CE [30] 
* CE 16 is refined into CE [31] 
* CE 15 is refined into CE [32] 


#### Refined cost equations eval_put1bitcmaptile_bb2_in/9 
* CE 24: eval_put1bitcmaptile_bb2_in(A,B,C,D,E,A,F,C,D) = 0
     [A>=D,C>=0,7>=D,C+1=F,C+1=B,E=9] 
* CE 25: eval_put1bitcmaptile_bb2_in(A,B,C,D,E,A,F,C,D) = 0
     [A>=D,C>=0,7>=D,C+1=F,C+1=B,E=8] 
* CE 26: eval_put1bitcmaptile_bb2_in(A,B,C,D,E,A,F,C,D) = 0
     [A>=D,C>=0,7>=D,C+1=F,C+1=B,E=7] 
* CE 27: eval_put1bitcmaptile_bb2_in(A,B,C,D,E,A,F,C,D) = 0
     [A>=D,C>=0,7>=D,C+1=F,C+1=B,E=6] 
* CE 28: eval_put1bitcmaptile_bb2_in(A,B,C,D,E,A,F,C,D) = 0
     [A>=D,C>=0,7>=D,C+1=F,C+1=B,E=5] 
* CE 29: eval_put1bitcmaptile_bb2_in(A,B,C,D,E,A,F,C,D) = 0
     [A>=D,C>=0,7>=D,C+1=F,C+1=B,E=4] 
* CE 30: eval_put1bitcmaptile_bb2_in(A,B,C,D,E,A,F,C,D) = 0
     [A>=D,C>=0,7>=D,C+1=F,C+1=B,E=3] 
* CE 31: eval_put1bitcmaptile_bb2_in(A,B,C,D,E,A,F,C,D) = 0
     [A>=D,C>=0,7>=D,C+1=F,C+1=B,E=2] 
* CE 32: eval_put1bitcmaptile_bb2_in(V_w,V__01,V_3,V__x_0,B,C,D,E,F) = 1+ eval_put1bitcmaptile_bb2_in(V_w,G,V_3,H,B,C,D,E,F)
     [V_w>=V__x_0,B>=2,V__x_0>=8,V_3>=0,9>=B,V__x_0=H+8,V_3+1=G,V_3+1=V__01] 

### Cost equations --> "Loop" of eval_put1bitcmaptile_bb2_in/9 
* CEs [32] --> Loop 16 
* CEs [24] --> Loop 17 
* CEs [25] --> Loop 18 
* CEs [26] --> Loop 19 
* CEs [27] --> Loop 20 
* CEs [28] --> Loop 21 
* CEs [29] --> Loop 22 
* CEs [30] --> Loop 23 
* CEs [31] --> Loop 24 

#### Loops of eval_put1bitcmaptile_bb2_in/9 
* Loop 16: eval_put1bitcmaptile_bb2_in(V_w,V__01,V_3,V__x_0,B,C,D,E,F)->  eval_put1bitcmaptile_bb2_in(V_w,V__01',V_3,V__x_0',B,C,D,E,F)
                  [V_w>=V__x_0,B>=2,V__x_0>=8,V_3>=0,9>=B,V__x_0=V__x_0'+8,V_3+1=V__01',V_3+1=V__01] 
* Loop 17: eval_put1bitcmaptile_bb2_in(A,B,C,D,E,A,B,F,D) [A>=D,B>=1,7>=D,B=F+1,B=C+1,E=9] 
* Loop 18: eval_put1bitcmaptile_bb2_in(A,B,C,D,E,A,B,F,D) [A>=D,B>=1,7>=D,B=F+1,B=C+1,E=8] 
* Loop 19: eval_put1bitcmaptile_bb2_in(A,B,C,D,E,A,B,F,D) [A>=D,B>=1,7>=D,B=F+1,B=C+1,E=7] 
* Loop 20: eval_put1bitcmaptile_bb2_in(A,B,C,D,E,A,B,F,D) [A>=D,B>=1,7>=D,B=F+1,B=C+1,E=6] 
* Loop 21: eval_put1bitcmaptile_bb2_in(A,B,C,D,E,A,B,F,D) [A>=D,B>=1,7>=D,B=F+1,B=C+1,E=5] 
* Loop 22: eval_put1bitcmaptile_bb2_in(A,B,C,D,E,A,B,F,D) [A>=D,B>=1,7>=D,B=F+1,B=C+1,E=4] 
* Loop 23: eval_put1bitcmaptile_bb2_in(A,B,C,D,E,A,B,F,D) [A>=D,B>=1,7>=D,B=F+1,B=C+1,E=3] 
* Loop 24: eval_put1bitcmaptile_bb2_in(A,B,C,D,E,A,B,F,D) [A>=D,B>=1,7>=D,B=F+1,B=C+1,E=2] 

### Ranking functions of CR eval_put1bitcmaptile_bb2_in(V_w,V__01,V_3,V__x_0,B,C,D,E,F) 
* RF of phase [16]: [V__x_0/8-7/8]

#### Partial ranking functions of CR eval_put1bitcmaptile_bb2_in(V_w,V__01,V_3,V__x_0,B,C,D,E,F) 
* Partial RF of phase [16]:
  - RF of loop [16:1]:
    V__x_0/8-7/8


### Resulting Chains:eval_put1bitcmaptile_bb2_in(V_w,V__01,V_3,V__x_0,B,C,D,E,F) 
* [[16],24]
* [[16],23]
* [[16],22]
* [[16],21]
* [[16],20]
* [[16],19]
* [[16],18]
* [[16],17]
* [24]
* [23]
* [22]
* [21]
* [20]
* [19]
* [18]
* [17]


### Merging Chains  eval_put1bitcmaptile_bb2_in/9 into  External patterns of execution 
* [[24]] --> 1 
* [[24,[16]]] --> 2 
* [[23]] --> 3 
* [[23,[16]]] --> 4 
* [[22]] --> 5 
* [[22,[16]]] --> 6 
* [[21]] --> 7 
* [[21,[16]]] --> 8 
* [[20]] --> 9 
* [[20,[16]]] --> 10 
* [[19]] --> 11 
* [[19,[16]]] --> 12 
* [[18]] --> 13 
* [[18,[16]]] --> 14 
* [[17]] --> 15 
* [[17,[16]]] --> 16 


### Specialization of cost equations eval_put1bitcmaptile_bb1_in/3 
* CE 14 is refined into CE [33] 
* CE 6 is refined into CE [34,35] 
* CE 7 is refined into CE [36,37] 
* CE 8 is refined into CE [38,39] 
* CE 9 is refined into CE [40,41] 
* CE 10 is refined into CE [42,43] 
* CE 11 is refined into CE [44,45] 
* CE 12 is refined into CE [46,47] 
* CE 13 is refined into CE [48,49] 


#### Refined cost equations eval_put1bitcmaptile_bb1_in/3 
* CE 33: eval_put1bitcmaptile_bb1_in(V_w,V__01,B) = 0
     [0>=V__01,B=10] 
* CE 34: eval_put1bitcmaptile_bb1_in(V_w,V__01,B) = 2+ eval_put1bitcmaptile_bb2_in(V_w,C,D,V_w,E,V_w,F,D,V_w):15+ eval_put1bitcmaptile_bb1_in(V_w,D,G)
     [D>=0,7>=V_w,D+1=F,D+1=C,D+1=V__01,G=10,E=9,B=10] 
* CE 35: eval_put1bitcmaptile_bb1_in(V_w,V__01,B) = 2+ eval_put1bitcmaptile_bb2_in(V_w,C,D,V_w,E,V_w,F,D,G):16+ eval_put1bitcmaptile_bb1_in(V_w,D,H)
     [V_w>=G+8,G>=0,D>=0,7>=G,D+1=F,D+1=C,D+1=V__01,H=10,E=9,B=10] 
* CE 36: eval_put1bitcmaptile_bb1_in(V_w,V__01,B) = 2+ eval_put1bitcmaptile_bb2_in(V_w,C,D,V_w,E,V_w,F,D,V_w):3+ eval_put1bitcmaptile_bb1_in(V_w,D,G)
     [D>=0,7>=V_w,D+1=F,D+1=C,D+1=V__01,G=10,E=3,B=10] 
* CE 37: eval_put1bitcmaptile_bb1_in(V_w,V__01,B) = 2+ eval_put1bitcmaptile_bb2_in(V_w,C,D,V_w,E,V_w,F,D,G):4+ eval_put1bitcmaptile_bb1_in(V_w,D,H)
     [V_w>=G+8,G>=0,D>=0,7>=G,D+1=F,D+1=C,D+1=V__01,H=10,E=3,B=10] 
* CE 38: eval_put1bitcmaptile_bb1_in(V_w,V__01,B) = 2+ eval_put1bitcmaptile_bb2_in(V_w,C,D,V_w,E,V_w,F,D,V_w):1+ eval_put1bitcmaptile_bb1_in(V_w,D,G)
     [D>=0,7>=V_w,D+1=F,D+1=C,D+1=V__01,G=10,E=2,B=10] 
* CE 39: eval_put1bitcmaptile_bb1_in(V_w,V__01,B) = 2+ eval_put1bitcmaptile_bb2_in(V_w,C,D,V_w,E,V_w,F,D,G):2+ eval_put1bitcmaptile_bb1_in(V_w,D,H)
     [V_w>=G+8,G>=0,D>=0,7>=G,D+1=F,D+1=C,D+1=V__01,H=10,E=2,B=10] 
* CE 40: eval_put1bitcmaptile_bb1_in(V_w,V__01,B) = 2+ eval_put1bitcmaptile_bb2_in(V_w,C,D,V_w,E,V_w,F,D,V_w):5+ eval_put1bitcmaptile_bb1_in(V_w,D,G)
     [D>=0,7>=V_w,D+1=F,D+1=C,D+1=V__01,G=10,E=4,B=10] 
* CE 41: eval_put1bitcmaptile_bb1_in(V_w,V__01,B) = 2+ eval_put1bitcmaptile_bb2_in(V_w,C,D,V_w,E,V_w,F,D,G):6+ eval_put1bitcmaptile_bb1_in(V_w,D,H)
     [V_w>=G+8,G>=0,D>=0,7>=G,D+1=F,D+1=C,D+1=V__01,H=10,E=4,B=10] 
* CE 42: eval_put1bitcmaptile_bb1_in(V_w,V__01,B) = 2+ eval_put1bitcmaptile_bb2_in(V_w,C,D,V_w,E,V_w,F,D,V_w):7+ eval_put1bitcmaptile_bb1_in(V_w,D,G)
     [D>=0,7>=V_w,D+1=F,D+1=C,D+1=V__01,G=10,E=5,B=10] 
* CE 43: eval_put1bitcmaptile_bb1_in(V_w,V__01,B) = 2+ eval_put1bitcmaptile_bb2_in(V_w,C,D,V_w,E,V_w,F,D,G):8+ eval_put1bitcmaptile_bb1_in(V_w,D,H)
     [V_w>=G+8,G>=0,D>=0,7>=G,D+1=F,D+1=C,D+1=V__01,H=10,E=5,B=10] 
* CE 44: eval_put1bitcmaptile_bb1_in(V_w,V__01,B) = 2+ eval_put1bitcmaptile_bb2_in(V_w,C,D,V_w,E,V_w,F,D,V_w):9+ eval_put1bitcmaptile_bb1_in(V_w,D,G)
     [D>=0,7>=V_w,D+1=F,D+1=C,D+1=V__01,G=10,E=6,B=10] 
* CE 45: eval_put1bitcmaptile_bb1_in(V_w,V__01,B) = 2+ eval_put1bitcmaptile_bb2_in(V_w,C,D,V_w,E,V_w,F,D,G):10+ eval_put1bitcmaptile_bb1_in(V_w,D,H)
     [V_w>=G+8,G>=0,D>=0,7>=G,D+1=F,D+1=C,D+1=V__01,H=10,E=6,B=10] 
* CE 46: eval_put1bitcmaptile_bb1_in(V_w,V__01,B) = 2+ eval_put1bitcmaptile_bb2_in(V_w,C,D,V_w,E,V_w,F,D,V_w):11+ eval_put1bitcmaptile_bb1_in(V_w,D,G)
     [D>=0,7>=V_w,D+1=F,D+1=C,D+1=V__01,G=10,E=7,B=10] 
* CE 47: eval_put1bitcmaptile_bb1_in(V_w,V__01,B) = 2+ eval_put1bitcmaptile_bb2_in(V_w,C,D,V_w,E,V_w,F,D,G):12+ eval_put1bitcmaptile_bb1_in(V_w,D,H)
     [V_w>=G+8,G>=0,D>=0,7>=G,D+1=F,D+1=C,D+1=V__01,H=10,E=7,B=10] 
* CE 48: eval_put1bitcmaptile_bb1_in(V_w,V__01,B) = 2+ eval_put1bitcmaptile_bb2_in(V_w,C,D,V_w,E,V_w,F,D,V_w):13+ eval_put1bitcmaptile_bb1_in(V_w,D,G)
     [D>=0,7>=V_w,D+1=F,D+1=C,D+1=V__01,G=10,E=8,B=10] 
* CE 49: eval_put1bitcmaptile_bb1_in(V_w,V__01,B) = 2+ eval_put1bitcmaptile_bb2_in(V_w,C,D,V_w,E,V_w,F,D,G):14+ eval_put1bitcmaptile_bb1_in(V_w,D,H)
     [V_w>=G+8,G>=0,D>=0,7>=G,D+1=F,D+1=C,D+1=V__01,H=10,E=8,B=10] 

### Cost equations --> "Loop" of eval_put1bitcmaptile_bb1_in/3 
* CEs [35,37,39,41,43,45,47,49] --> Loop 25 
* CEs [34,36,38,40,42,44,46,48] --> Loop 26 
* CEs [33] --> Loop 27 

#### Loops of eval_put1bitcmaptile_bb1_in/3 
* Loop 25: eval_put1bitcmaptile_bb1_in(V_w,V__01,B)->  eval_put1bitcmaptile_bb1_in(V_w,V__01',B')
                  [V__01>=1,V_w>=8,V__01=V__01'+1,B'=10,B=10] 
* Loop 26: eval_put1bitcmaptile_bb1_in(V_w,V__01,B)->  eval_put1bitcmaptile_bb1_in(V_w,V__01',B')
                  [V__01>=1,7>=V_w,V__01=V__01'+1,B'=10,B=10] 
* Loop 27: eval_put1bitcmaptile_bb1_in(V_w,V__01,B) [0>=V__01,B=10] 

### Ranking functions of CR eval_put1bitcmaptile_bb1_in(V_w,V__01,B) 
* RF of phase [25]: [V__01]
* RF of phase [26]: [V__01]

#### Partial ranking functions of CR eval_put1bitcmaptile_bb1_in(V_w,V__01,B) 
* Partial RF of phase [25]:
  - RF of loop [25:1]:
    V__01
* Partial RF of phase [26]:
  - RF of loop [26:1]:
    V__01


### Resulting Chains:eval_put1bitcmaptile_bb1_in(V_w,V__01,B) 
* [[26],27]
* [[25],27]
* [27]


### Merging Chains  eval_put1bitcmaptile_bb1_in/3 into  External patterns of execution 
* [[27,[26]]] --> 1 
* [[27]] --> 2 
* [[27,[25]]] --> 3 


### Specialization of cost equations eval_put1bitcmaptile_bb0_in/4 
* CE 4 is refined into CE [50,51,52] 
* CE 5 is refined into CE [53,54,55] 
* CE 3 is refined into CE [56,57,58] 


#### Refined cost equations eval_put1bitcmaptile_bb0_in/4 
* CE 50: eval_put1bitcmaptile_bb0_in(V_w,V_h,V_fromskew,B) = 1+ eval_put1bitcmaptile_bb1_in(V_w,V_h,C):1
     [V_h>=1,V_fromskew>=1,7>=V_w,C=10] 
* CE 51: eval_put1bitcmaptile_bb0_in(V_w,V_h,V_fromskew,B) = 1+ eval_put1bitcmaptile_bb1_in(V_w,V_h,C):2
     [V_fromskew>=1,0>=V_h,C=10] 
* CE 52: eval_put1bitcmaptile_bb0_in(V_w,V_h,V_fromskew,B) = 1+ eval_put1bitcmaptile_bb1_in(V_w,V_h,C):3
     [V_h>=1,V_w>=8,V_fromskew>=1,C=10] 
* CE 53: eval_put1bitcmaptile_bb0_in(V_w,V_h,V_fromskew,B) = 1+ eval_put1bitcmaptile_bb1_in(V_w,V_h,C):1
     [V_h>=1,7>=V_w,0>=V_fromskew+1,C=10] 
* CE 54: eval_put1bitcmaptile_bb0_in(V_w,V_h,V_fromskew,B) = 1+ eval_put1bitcmaptile_bb1_in(V_w,V_h,C):2
     [0>=V_h,0>=V_fromskew+1,C=10] 
* CE 55: eval_put1bitcmaptile_bb0_in(V_w,V_h,V_fromskew,B) = 1+ eval_put1bitcmaptile_bb1_in(V_w,V_h,C):3
     [V_h>=1,V_w>=8,0>=V_fromskew+1,C=10] 
* CE 56: eval_put1bitcmaptile_bb0_in(V_w,V_h,V_fromskew,B) = 1+ eval_put1bitcmaptile_bb1_in(V_w,V_h,C):1
     [V_h>=1,7>=V_w,C=10,V_fromskew=0] 
* CE 57: eval_put1bitcmaptile_bb0_in(V_w,V_h,V_fromskew,B) = 1+ eval_put1bitcmaptile_bb1_in(V_w,V_h,C):2
     [0>=V_h,C=10,V_fromskew=0] 
* CE 58: eval_put1bitcmaptile_bb0_in(V_w,V_h,V_fromskew,B) = 1+ eval_put1bitcmaptile_bb1_in(V_w,V_h,C):3
     [V_h>=1,V_w>=8,C=10,V_fromskew=0] 

### Cost equations --> "Loop" of eval_put1bitcmaptile_bb0_in/4 
* CEs [52] --> Loop 28 
* CEs [55] --> Loop 29 
* CEs [51] --> Loop 30 
* CEs [54] --> Loop 31 
* CEs [50] --> Loop 32 
* CEs [53] --> Loop 33 
* CEs [58] --> Loop 34 
* CEs [57] --> Loop 35 
* CEs [56] --> Loop 36 

#### Loops of eval_put1bitcmaptile_bb0_in/4 
* Loop 28: eval_put1bitcmaptile_bb0_in(V_w,V_h,V_fromskew,B) [V_fromskew>=1,V_h>=1,V_w>=8] 
* Loop 29: eval_put1bitcmaptile_bb0_in(V_w,V_h,V_fromskew,B) [V_h>=1,V_w>=8,0>=V_fromskew+1] 
* Loop 30: eval_put1bitcmaptile_bb0_in(V_w,V_h,V_fromskew,B) [V_fromskew>=1,0>=V_h] 
* Loop 31: eval_put1bitcmaptile_bb0_in(V_w,V_h,V_fromskew,B) [0>=V_fromskew+1,0>=V_h] 
* Loop 32: eval_put1bitcmaptile_bb0_in(V_w,V_h,V_fromskew,B) [V_fromskew>=1,V_h>=1,7>=V_w] 
* Loop 33: eval_put1bitcmaptile_bb0_in(V_w,V_h,V_fromskew,B) [V_h>=1,0>=V_fromskew+1,7>=V_w] 
* Loop 34: eval_put1bitcmaptile_bb0_in(V_w,V_h,V_fromskew,B) [V_h>=1,V_w>=8,V_fromskew=0] 
* Loop 35: eval_put1bitcmaptile_bb0_in(V_w,V_h,V_fromskew,B) [0>=V_h,V_fromskew=0] 
* Loop 36: eval_put1bitcmaptile_bb0_in(V_w,V_h,V_fromskew,B) [V_h>=1,7>=V_w,V_fromskew=0] 

### Ranking functions of CR eval_put1bitcmaptile_bb0_in(V_w,V_h,V_fromskew,B) 

#### Partial ranking functions of CR eval_put1bitcmaptile_bb0_in(V_w,V_h,V_fromskew,B) 


### Resulting Chains:eval_put1bitcmaptile_bb0_in(V_w,V_h,V_fromskew,B) 
* [36]
* [35]
* [34]
* [33]
* [32]
* [31]
* [30]
* [29]
* [28]


### Merging Chains  eval_put1bitcmaptile_bb0_in/4 into  External patterns of execution 
* [[36]] --> 1 
* [[35]] --> 2 
* [[34]] --> 3 
* [[33]] --> 4 
* [[32]] --> 5 
* [[31]] --> 6 
* [[30]] --> 7 
* [[29]] --> 8 
* [[28]] --> 9 


### Specialization of cost equations eval_put1bitcmaptile_start/7 
* CE 2 is refined into CE [59,60,61,62,63,64,65,66,67] 


#### Refined cost equations eval_put1bitcmaptile_start/7 
* CE 59: eval_put1bitcmaptile_start(V_x,V_y,V_w,V_h,V_fromskew,V_toskew,B) = 0+ eval_put1bitcmaptile_bb0_in(V_w,V_h,C,B):1
     [V_h>=1,7>=V_w,C=0,V_fromskew=0] 
* CE 60: eval_put1bitcmaptile_start(V_x,V_y,V_w,V_h,V_fromskew,V_toskew,B) = 0+ eval_put1bitcmaptile_bb0_in(V_w,V_h,C,B):2
     [0>=V_h,C=0,V_fromskew=0] 
* CE 61: eval_put1bitcmaptile_start(V_x,V_y,V_w,V_h,V_fromskew,V_toskew,B) = 0+ eval_put1bitcmaptile_bb0_in(V_w,V_h,C,B):3
     [V_h>=1,V_w>=8,C=0,V_fromskew=0] 
* CE 62: eval_put1bitcmaptile_start(V_x,V_y,V_w,V_h,V_fromskew,V_toskew,B) = 0+ eval_put1bitcmaptile_bb0_in(V_w,V_h,V_fromskew,B):4
     [V_h>=1,0>=V_fromskew+1,7>=V_w] 
* CE 63: eval_put1bitcmaptile_start(V_x,V_y,V_w,V_h,V_fromskew,V_toskew,B) = 0+ eval_put1bitcmaptile_bb0_in(V_w,V_h,V_fromskew,B):5
     [V_fromskew>=1,V_h>=1,7>=V_w] 
* CE 64: eval_put1bitcmaptile_start(V_x,V_y,V_w,V_h,V_fromskew,V_toskew,B) = 0+ eval_put1bitcmaptile_bb0_in(V_w,V_h,V_fromskew,B):6
     [0>=V_fromskew+1,0>=V_h] 
* CE 65: eval_put1bitcmaptile_start(V_x,V_y,V_w,V_h,V_fromskew,V_toskew,B) = 0+ eval_put1bitcmaptile_bb0_in(V_w,V_h,V_fromskew,B):7
     [V_fromskew>=1,0>=V_h] 
* CE 66: eval_put1bitcmaptile_start(V_x,V_y,V_w,V_h,V_fromskew,V_toskew,B) = 0+ eval_put1bitcmaptile_bb0_in(V_w,V_h,V_fromskew,B):8
     [V_h>=1,V_w>=8,0>=V_fromskew+1] 
* CE 67: eval_put1bitcmaptile_start(V_x,V_y,V_w,V_h,V_fromskew,V_toskew,B) = 0+ eval_put1bitcmaptile_bb0_in(V_w,V_h,V_fromskew,B):9
     [V_fromskew>=1,V_h>=1,V_w>=8] 

### Cost equations --> "Loop" of eval_put1bitcmaptile_start/7 
* CEs [67] --> Loop 37 
* CEs [66] --> Loop 38 
* CEs [65] --> Loop 39 
* CEs [64] --> Loop 40 
* CEs [63] --> Loop 41 
* CEs [62] --> Loop 42 
* CEs [61] --> Loop 43 
* CEs [60] --> Loop 44 
* CEs [59] --> Loop 45 

#### Loops of eval_put1bitcmaptile_start/7 
* Loop 37: eval_put1bitcmaptile_start(V_x,V_y,V_w,V_h,V_fromskew,V_toskew,B) [V_fromskew>=1,V_h>=1,V_w>=8] 
* Loop 38: eval_put1bitcmaptile_start(V_x,V_y,V_w,V_h,V_fromskew,V_toskew,B) [V_h>=1,V_w>=8,0>=V_fromskew+1] 
* Loop 39: eval_put1bitcmaptile_start(V_x,V_y,V_w,V_h,V_fromskew,V_toskew,B) [V_fromskew>=1,0>=V_h] 
* Loop 40: eval_put1bitcmaptile_start(V_x,V_y,V_w,V_h,V_fromskew,V_toskew,B) [0>=V_fromskew+1,0>=V_h] 
* Loop 41: eval_put1bitcmaptile_start(V_x,V_y,V_w,V_h,V_fromskew,V_toskew,B) [V_fromskew>=1,V_h>=1,7>=V_w] 
* Loop 42: eval_put1bitcmaptile_start(V_x,V_y,V_w,V_h,V_fromskew,V_toskew,B) [V_h>=1,0>=V_fromskew+1,7>=V_w] 
* Loop 43: eval_put1bitcmaptile_start(V_x,V_y,V_w,V_h,V_fromskew,V_toskew,B) [V_h>=1,V_w>=8,V_fromskew=0] 
* Loop 44: eval_put1bitcmaptile_start(V_x,V_y,V_w,V_h,V_fromskew,V_toskew,B) [0>=V_h,V_fromskew=0] 
* Loop 45: eval_put1bitcmaptile_start(V_x,V_y,V_w,V_h,V_fromskew,V_toskew,B) [V_h>=1,7>=V_w,V_fromskew=0] 

### Ranking functions of CR eval_put1bitcmaptile_start(V_x,V_y,V_w,V_h,V_fromskew,V_toskew,B) 

#### Partial ranking functions of CR eval_put1bitcmaptile_start(V_x,V_y,V_w,V_h,V_fromskew,V_toskew,B) 


### Resulting Chains:eval_put1bitcmaptile_start(V_x,V_y,V_w,V_h,V_fromskew,V_toskew,B) 
* [45]
* [44]
* [43]
* [42]
* [41]
* [40]
* [39]
* [38]
* [37]


### Merging Chains  eval_put1bitcmaptile_start/7 into  External patterns of execution 
* [[45]] --> 1 
* [[44]] --> 2 
* [[43]] --> 3 
* [[42]] --> 4 
* [[41]] --> 5 
* [[40]] --> 6 
* [[39]] --> 7 
* [[38]] --> 8 
* [[37]] --> 9 


Computing Bounds
=====================================

#### Cost of loops [16] 

 * loop 16:eval_put1bitcmaptile_bb2_in(V_w,V__01,V_3,V__x_0,B,C,D,E,F) -> [eval_put1bitcmaptile_bb2_in(V_w',V__01',V_3',V__x_0',B',C',D',E',F')] 
1
#### Cost of phase [16]:eval_put1bitcmaptile_bb2_in(V_w,V__01,V_3,V__x_0,B,C,D,E,F) -> [eval_put1bitcmaptile_bb2_in(V_w',V__01',V_3',V__x_0',B',C',D',E',F')] 
1*it(16)+0
  Such that:it(16) =< V__x_0/8
it(16) =< V__x_0/8-V__x_0'/8

#### Cost of phase [16]:eval_put1bitcmaptile_bb2_in(V_w,V__01,V_3,V__x_0,B,C,D,E,F) -> [eval_put1bitcmaptile_bb2_in(V_w',V__01',V_3',V__x_0',B',C',D',E',F')] 
1*it(16)+0
  Such that:it(16) =< V__x_0/8
it(16) =< V__x_0/8-V__x_0'/8

#### Cost of phase [16]:eval_put1bitcmaptile_bb2_in(V_w,V__01,V_3,V__x_0,B,C,D,E,F) -> [eval_put1bitcmaptile_bb2_in(V_w',V__01',V_3',V__x_0',B',C',D',E',F')] 
1*it(16)+0
  Such that:it(16) =< V__x_0/8
it(16) =< V__x_0/8-V__x_0'/8

#### Cost of phase [16]:eval_put1bitcmaptile_bb2_in(V_w,V__01,V_3,V__x_0,B,C,D,E,F) -> [eval_put1bitcmaptile_bb2_in(V_w',V__01',V_3',V__x_0',B',C',D',E',F')] 
1*it(16)+0
  Such that:it(16) =< V__x_0/8
it(16) =< V__x_0/8-V__x_0'/8

#### Cost of phase [16]:eval_put1bitcmaptile_bb2_in(V_w,V__01,V_3,V__x_0,B,C,D,E,F) -> [eval_put1bitcmaptile_bb2_in(V_w',V__01',V_3',V__x_0',B',C',D',E',F')] 
1*it(16)+0
  Such that:it(16) =< V__x_0/8
it(16) =< V__x_0/8-V__x_0'/8

#### Cost of phase [16]:eval_put1bitcmaptile_bb2_in(V_w,V__01,V_3,V__x_0,B,C,D,E,F) -> [eval_put1bitcmaptile_bb2_in(V_w',V__01',V_3',V__x_0',B',C',D',E',F')] 
1*it(16)+0
  Such that:it(16) =< V__x_0/8
it(16) =< V__x_0/8-V__x_0'/8

#### Cost of phase [16]:eval_put1bitcmaptile_bb2_in(V_w,V__01,V_3,V__x_0,B,C,D,E,F) -> [eval_put1bitcmaptile_bb2_in(V_w',V__01',V_3',V__x_0',B',C',D',E',F')] 
1*it(16)+0
  Such that:it(16) =< V__x_0/8
it(16) =< V__x_0/8-V__x_0'/8

#### Cost of phase [16]:eval_put1bitcmaptile_bb2_in(V_w,V__01,V_3,V__x_0,B,C,D,E,F) -> [eval_put1bitcmaptile_bb2_in(V_w',V__01',V_3',V__x_0',B',C',D',E',F')] 
1*it(16)+0
  Such that:it(16) =< V__x_0/8
it(16) =< V__x_0/8-V__x_0'/8

#### Cost of chains of eval_put1bitcmaptile_bb2_in(V_w,V__01,V_3,V__x_0,B,C,D,E,F):
* Chain [[16],24]: 1*it(16)+0
  Such that:it(16) =< V__x_0/8-F/8

  with precondition: [B=2,V__01=V_3+1,V_w=C,V__01=D,V__01=E+1,7>=F,V__01>=1,F>=0,V_w>=V__x_0,V__x_0>=F+8] 

* Chain [[16],23]: 1*it(16)+0
  Such that:it(16) =< V__x_0/8-F/8

  with precondition: [B=3,V__01=V_3+1,V_w=C,V__01=D,V__01=E+1,7>=F,V__01>=1,F>=0,V_w>=V__x_0,V__x_0>=F+8] 

* Chain [[16],22]: 1*it(16)+0
  Such that:it(16) =< V__x_0/8-F/8

  with precondition: [B=4,V__01=V_3+1,V_w=C,V__01=D,V__01=E+1,7>=F,V__01>=1,F>=0,V_w>=V__x_0,V__x_0>=F+8] 

* Chain [[16],21]: 1*it(16)+0
  Such that:it(16) =< V__x_0/8-F/8

  with precondition: [B=5,V__01=V_3+1,V_w=C,V__01=D,V__01=E+1,7>=F,V__01>=1,F>=0,V_w>=V__x_0,V__x_0>=F+8] 

* Chain [[16],20]: 1*it(16)+0
  Such that:it(16) =< V__x_0/8-F/8

  with precondition: [B=6,V__01=V_3+1,V_w=C,V__01=D,V__01=E+1,7>=F,V__01>=1,F>=0,V_w>=V__x_0,V__x_0>=F+8] 

* Chain [[16],19]: 1*it(16)+0
  Such that:it(16) =< V__x_0/8-F/8

  with precondition: [B=7,V__01=V_3+1,V_w=C,V__01=D,V__01=E+1,7>=F,V__01>=1,F>=0,V_w>=V__x_0,V__x_0>=F+8] 

* Chain [[16],18]: 1*it(16)+0
  Such that:it(16) =< V__x_0/8-F/8

  with precondition: [B=8,V__01=V_3+1,V_w=C,V__01=D,V__01=E+1,7>=F,V__01>=1,F>=0,V_w>=V__x_0,V__x_0>=F+8] 

* Chain [[16],17]: 1*it(16)+0
  Such that:it(16) =< V__x_0/8-F/8

  with precondition: [B=9,V__01=V_3+1,V_w=C,V__01=D,V__01=E+1,7>=F,V__01>=1,F>=0,V_w>=V__x_0,V__x_0>=F+8] 

* Chain [24]: 0
  with precondition: [B=2,V_3+1=V__01,V_w=C,V_3+1=D,V_3=E,V__x_0=F,7>=V__x_0,V_3>=0,V_w>=V__x_0] 

* Chain [23]: 0
  with precondition: [B=3,V_3+1=V__01,V_w=C,V_3+1=D,V_3=E,V__x_0=F,7>=V__x_0,V_3>=0,V_w>=V__x_0] 

* Chain [22]: 0
  with precondition: [B=4,V_3+1=V__01,V_w=C,V_3+1=D,V_3=E,V__x_0=F,7>=V__x_0,V_3>=0,V_w>=V__x_0] 

* Chain [21]: 0
  with precondition: [B=5,V_3+1=V__01,V_w=C,V_3+1=D,V_3=E,V__x_0=F,7>=V__x_0,V_3>=0,V_w>=V__x_0] 

* Chain [20]: 0
  with precondition: [B=6,V_3+1=V__01,V_w=C,V_3+1=D,V_3=E,V__x_0=F,7>=V__x_0,V_3>=0,V_w>=V__x_0] 

* Chain [19]: 0
  with precondition: [B=7,V_3+1=V__01,V_w=C,V_3+1=D,V_3=E,V__x_0=F,7>=V__x_0,V_3>=0,V_w>=V__x_0] 

* Chain [18]: 0
  with precondition: [B=8,V_3+1=V__01,V_w=C,V_3+1=D,V_3=E,V__x_0=F,7>=V__x_0,V_3>=0,V_w>=V__x_0] 

* Chain [17]: 0
  with precondition: [B=9,V_3+1=V__01,V_w=C,V_3+1=D,V_3=E,V__x_0=F,7>=V__x_0,V_3>=0,V_w>=V__x_0] 


#### Cost of loops [26] 

 * loop 26:eval_put1bitcmaptile_bb1_in(V_w,V__01,B) -> [eval_put1bitcmaptile_bb1_in(V_w',V__01',B')] 
2
#### Cost of phase [26]:eval_put1bitcmaptile_bb1_in(V_w,V__01,B) -> [eval_put1bitcmaptile_bb1_in(V_w',V__01',B')] 
2*it(26)+0
  Such that:it(26) =< V__01
it(26) =< V__01-V__01'

#### Cost of loops [25] 

 * loop 25:eval_put1bitcmaptile_bb1_in(V_w,V__01,B) -> [eval_put1bitcmaptile_bb1_in(V_w',V__01',B')] 
8*s(10)+2
  Such that:s(9) =< V_w'/8
s(10) =< s(9)

#### Cost of phase [25]:eval_put1bitcmaptile_bb1_in(V_w,V__01,B) -> [eval_put1bitcmaptile_bb1_in(V_w',V__01',B')] 
2*it(25)+8*s(11)+0
  Such that:aux(2) =< V_w/8
it(25) =< V__01
it(25) =< V__01-V__01'
s(12) =< it(25)*aux(2)
s(11) =< s(12)

#### Cost of chains of eval_put1bitcmaptile_bb1_in(V_w,V__01,B):
* Chain [[26],27]: 2*it(26)+0
  Such that:it(26) =< V__01

  with precondition: [B=10,7>=V_w,V__01>=1] 

* Chain [[25],27]: 2*it(25)+8*s(11)+0
  Such that:aux(2) =< V_w/8
it(25) =< V__01
s(12) =< it(25)*aux(2)
s(11) =< s(12)

  with precondition: [B=10,V_w>=8,V__01>=1] 

* Chain [27]: 0
  with precondition: [B=10,0>=V__01] 


#### Cost of chains of eval_put1bitcmaptile_bb0_in(V_w,V_h,V_fromskew,B):
* Chain [36]: 2*s(13)+1
  Such that:s(13) =< V_h

  with precondition: [V_fromskew=0,7>=V_w,V_h>=1] 

* Chain [35]: 1
  with precondition: [V_fromskew=0,0>=V_h] 

* Chain [34]: 2*s(15)+8*s(17)+1
  Such that:s(14) =< V_w/8
s(15) =< V_h
s(16) =< s(15)*s(14)
s(17) =< s(16)

  with precondition: [V_fromskew=0,V_w>=8,V_h>=1] 

* Chain [33]: 2*s(18)+1
  Such that:s(18) =< V_h

  with precondition: [7>=V_w,0>=V_fromskew+1,V_h>=1] 

* Chain [32]: 2*s(19)+1
  Such that:s(19) =< V_h

  with precondition: [7>=V_w,V_h>=1,V_fromskew>=1] 

* Chain [31]: 1
  with precondition: [0>=V_h,0>=V_fromskew+1] 

* Chain [30]: 1
  with precondition: [0>=V_h,V_fromskew>=1] 

* Chain [29]: 2*s(21)+8*s(23)+1
  Such that:s(20) =< V_w/8
s(21) =< V_h
s(22) =< s(21)*s(20)
s(23) =< s(22)

  with precondition: [0>=V_fromskew+1,V_w>=8,V_h>=1] 

* Chain [28]: 2*s(25)+8*s(27)+1
  Such that:s(24) =< V_w/8
s(25) =< V_h
s(26) =< s(25)*s(24)
s(27) =< s(26)

  with precondition: [V_w>=8,V_h>=1,V_fromskew>=1] 


#### Cost of chains of eval_put1bitcmaptile_start(V_x,V_y,V_w,V_h,V_fromskew,V_toskew,B):
* Chain [45]: 2*s(28)+1
  Such that:s(28) =< V_h

  with precondition: [V_fromskew=0,7>=V_w,V_h>=1] 

* Chain [44]: 1
  with precondition: [V_fromskew=0,0>=V_h] 

* Chain [43]: 2*s(30)+8*s(32)+1
  Such that:s(29) =< V_w/8
s(30) =< V_h
s(31) =< s(30)*s(29)
s(32) =< s(31)

  with precondition: [V_fromskew=0,V_w>=8,V_h>=1] 

* Chain [42]: 2*s(33)+1
  Such that:s(33) =< V_h

  with precondition: [7>=V_w,0>=V_fromskew+1,V_h>=1] 

* Chain [41]: 2*s(34)+1
  Such that:s(34) =< V_h

  with precondition: [7>=V_w,V_h>=1,V_fromskew>=1] 

* Chain [40]: 1
  with precondition: [0>=V_h,0>=V_fromskew+1] 

* Chain [39]: 1
  with precondition: [0>=V_h,V_fromskew>=1] 

* Chain [38]: 2*s(36)+8*s(38)+1
  Such that:s(35) =< V_w/8
s(36) =< V_h
s(37) =< s(36)*s(35)
s(38) =< s(37)

  with precondition: [0>=V_fromskew+1,V_w>=8,V_h>=1] 

* Chain [37]: 2*s(40)+8*s(42)+1
  Such that:s(39) =< V_w/8
s(40) =< V_h
s(41) =< s(40)*s(39)
s(42) =< s(41)

  with precondition: [V_w>=8,V_h>=1,V_fromskew>=1] 


Closed-form bounds of eval_put1bitcmaptile_start(V_x,V_y,V_w,V_h,V_fromskew,V_toskew,B): 
-------------------------------------
* Chain [45] with precondition: [V_fromskew=0,7>=V_w,V_h>=1] 
    - Upper bound: 2*V_h+1 
    - Complexity: n 
* Chain [44] with precondition: [V_fromskew=0,0>=V_h] 
    - Upper bound: 1 
    - Complexity: constant 
* Chain [43] with precondition: [V_fromskew=0,V_w>=8,V_h>=1] 
    - Upper bound: 2*V_h+1+V_w/8* (8*V_h) 
    - Complexity: n^2 
* Chain [42] with precondition: [7>=V_w,0>=V_fromskew+1,V_h>=1] 
    - Upper bound: 2*V_h+1 
    - Complexity: n 
* Chain [41] with precondition: [7>=V_w,V_h>=1,V_fromskew>=1] 
    - Upper bound: 2*V_h+1 
    - Complexity: n 
* Chain [40] with precondition: [0>=V_h,0>=V_fromskew+1] 
    - Upper bound: 1 
    - Complexity: constant 
* Chain [39] with precondition: [0>=V_h,V_fromskew>=1] 
    - Upper bound: 1 
    - Complexity: constant 
* Chain [38] with precondition: [0>=V_fromskew+1,V_w>=8,V_h>=1] 
    - Upper bound: 2*V_h+1+V_w/8* (8*V_h) 
    - Complexity: n^2 
* Chain [37] with precondition: [V_w>=8,V_h>=1,V_fromskew>=1] 
    - Upper bound: 2*V_h+1+V_w/8* (8*V_h) 
    - Complexity: n^2 

### Maximum cost of eval_put1bitcmaptile_start(V_x,V_y,V_w,V_h,V_fromskew,V_toskew,B): nat(V_h)*8*nat(V_w/8)+nat(V_h)*2+1 
Asymptotic class: n^2 

Time statistics: 
-------------------------------------
* Partial evaluation computed in 241 ms.
* Invariants computed in 280 ms.
   - Backward Invariants 203 ms.
   - Transitive Invariants 20 ms.
* Refinement performed in 662 ms.
* Termination proved in 22 ms.
* Upper bounds computed in 500 ms.
   - Equation cost structures 188 ms.
   - Phase cost structures 139 ms.
   - Chain cost structures 223 ms.
   - Solving cost expressions 6 ms.
* Total analysis performed in 1886 ms.


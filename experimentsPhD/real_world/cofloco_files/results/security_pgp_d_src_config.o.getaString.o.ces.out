Warning: Ignored call to eval_getaString_stop/1 in equation eval_getaString_bb18_in/1 

Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. recursive  : [eval_getaString_bb1_in/9]
1. non_recursive  : [eval_getaString_bb18_in/1]
2. recursive  : [eval_getaString_bb8_in/10]
3. non_recursive  : [eval_getaString_bb17_in/2]
4. non_recursive  : [eval_getaString_55/2]
5. non_recursive  : [eval_getaString_54/5]
6. non_recursive  : [eval_getaString_57/2]
7. non_recursive  : [eval_getaString_56/4]
8. non_recursive  : [eval_getaString__critedge4_in/4]
9. recursive  : [eval_getaString_bb11_in/8]
10. non_recursive  : [loop_cont_eval_getaString_bb11_in/5]
11. non_recursive  : [eval_getaString__critedge2_in/5]
12. non_recursive  : [loop_cont_eval_getaString_bb8_in/6]
13. non_recursive  : [eval_getaString_bb7_in/5]
14. non_recursive  : [eval_getaString_bb5_in/5]
15. non_recursive  : [eval_getaString__critedge_in/5]
16. non_recursive  : [loop_cont_eval_getaString_bb1_in/6]
17. non_recursive  : [eval_getaString_bb0_in/4]
18. non_recursive  : [eval_getaString_start/4]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into eval_getaString_bb1_in/9
1. SCC is completely evaluated into other SCCs
2. SCC is partially evaluated into eval_getaString_bb8_in/10
3. SCC is completely evaluated into other SCCs
4. SCC is completely evaluated into other SCCs
5. SCC is completely evaluated into other SCCs
6. SCC is completely evaluated into other SCCs
7. SCC is completely evaluated into other SCCs
8. SCC is partially evaluated into eval_getaString__critedge4_in/4
9. SCC is partially evaluated into eval_getaString_bb11_in/8
10. SCC is completely evaluated into other SCCs
11. SCC is partially evaluated into eval_getaString__critedge2_in/5
12. SCC is partially evaluated into loop_cont_eval_getaString_bb8_in/6
13. SCC is partially evaluated into eval_getaString_bb7_in/5
14. SCC is partially evaluated into eval_getaString_bb5_in/5
15. SCC is partially evaluated into eval_getaString__critedge_in/5
16. SCC is completely evaluated into other SCCs
17. SCC is partially evaluated into eval_getaString_bb0_in/4
18. SCC is partially evaluated into eval_getaString_start/4

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations eval_getaString_bb1_in/9 
* CE 7 is refined into CE [28] 
* CE 6 is refined into CE [29] 
* CE 8 is refined into CE [30] 
* CE 5 is refined into CE [31] 
* CE 4 is refined into CE [32] 


#### Refined cost equations eval_getaString_bb1_in/9 
* CE 28: eval_getaString_bb1_in(A,B,C,D,E,A,B,C,D) = 0
     [D>=1,E=3] 
* CE 29: eval_getaString_bb1_in(A,B,C,D,E,A,B,C,D) = 0
     [0>=D+1,E=3] 
* CE 30: eval_getaString_bb1_in(A,B,C,D,E,A,B,C,F) = 0
     [F=0,E=3,D=0] 
* CE 31: eval_getaString_bb1_in(V__line,V__errCount,V__hasError,V_ch_0,B,C,D,E,F) = 1+ eval_getaString_bb1_in(V__line,V__errCount,V__hasError,G,H,C,D,E,F)
     [V_ch_0>=1,H=3,B=3] 
* CE 32: eval_getaString_bb1_in(V__line,V__errCount,V__hasError,V_ch_0,B,C,D,E,F) = 1+ eval_getaString_bb1_in(V__line,V__errCount,V__hasError,G,H,C,D,E,F)
     [0>=V_ch_0+1,H=3,B=3] 

### Cost equations --> "Loop" of eval_getaString_bb1_in/9 
* CEs [31] --> Loop 25 
* CEs [32] --> Loop 26 
* CEs [28] --> Loop 27 
* CEs [29] --> Loop 28 
* CEs [30] --> Loop 29 

#### Loops of eval_getaString_bb1_in/9 
* Loop 25: eval_getaString_bb1_in(V__line,V__errCount,V__hasError,V_ch_0,B,C,D,E,F)->  eval_getaString_bb1_in(V__line,V__errCount,V__hasError,V_ch_0',B',C,D,E,F)
                  [V_ch_0>=1,B'=3,B=3] 
* Loop 26: eval_getaString_bb1_in(V__line,V__errCount,V__hasError,V_ch_0,B,C,D,E,F)->  eval_getaString_bb1_in(V__line,V__errCount,V__hasError,V_ch_0',B',C,D,E,F)
                  [0>=V_ch_0+1,B'=3,B=3] 
* Loop 27: eval_getaString_bb1_in(A,B,C,D,E,A,B,C,D) [D>=1,E=3] 
* Loop 28: eval_getaString_bb1_in(A,B,C,D,E,A,B,C,D) [0>=D+1,E=3] 
* Loop 29: eval_getaString_bb1_in(A,B,C,D,E,A,B,C,F) [F=0,E=3,D=0] 

### Ranking functions of CR eval_getaString_bb1_in(V__line,V__errCount,V__hasError,V_ch_0,B,C,D,E,F) 

#### Partial ranking functions of CR eval_getaString_bb1_in(V__line,V__errCount,V__hasError,V_ch_0,B,C,D,E,F) 


### Resulting Chains:eval_getaString_bb1_in(V__line,V__errCount,V__hasError,V_ch_0,B,C,D,E,F) 
* [[25,26]]...
* [[25,26],29]
* [[25,26],28]
* [[25,26],27]
* [29]
* [28]
* [27]


### Merging Chains  eval_getaString_bb1_in/9 into  External patterns of execution 
* [[29],[29,[25,26]]] --> 1 
* [[28],[28,[25,26]]] --> 2 
* [[27],[27,[25,26]]] --> 3 
* [[[25,26]]] --> 4 


### Specialization of cost equations eval_getaString_bb8_in/10 
* CE 15 is refined into CE [33] 
* CE 13 is refined into CE [34] 
* CE 14 is refined into CE [35] 
* CE 20 is refined into CE [36] 
* CE 19 is refined into CE [37] 
* CE 18 is refined into CE [38] 
* CE 16 is refined into CE [39] 
* CE 17 is refined into CE [40] 


#### Refined cost equations eval_getaString_bb8_in/10 
* CE 33: eval_getaString_bb8_in(A,B,C,D,E,F,A,B,C,E) = 0
     [E>=0,D>=35,F=2] 
* CE 34: eval_getaString_bb8_in(A,B,C,D,E,F,A,B,C,E) = 0
     [E>=0,0>=D+1,F=2] 
* CE 35: eval_getaString_bb8_in(A,B,C,D,E,F,A,B,C,E) = 0
     [E>=0,D>=1,33>=D,F=2] 
* CE 36: eval_getaString_bb8_in(A,B,C,D,E,F,A,B,C,E) = 0
     [E>=0,F=2,D=34] 
* CE 37: eval_getaString_bb8_in(A,B,C,D,E,F,A,B,C,E) = 0
     [E>=0,F=2,D=0] 
* CE 38: eval_getaString_bb8_in(V__line,V__errCount,V__hasError,V_ch_2,V_stringIndex_0,B,C,D,E,F) = 1+ eval_getaString_bb8_in(V__line,V__errCount,V__hasError,G,H,B,C,D,E,F)
     [V_stringIndex_0>=0,V_ch_2>=35,V_stringIndex_0+1=H] 
* CE 39: eval_getaString_bb8_in(V__line,V__errCount,V__hasError,V_ch_2,V_stringIndex_0,B,C,D,E,F) = 1+ eval_getaString_bb8_in(V__line,V__errCount,V__hasError,G,H,B,C,D,E,F)
     [V_stringIndex_0>=0,0>=V_ch_2+1,V_stringIndex_0+1=H] 
* CE 40: eval_getaString_bb8_in(V__line,V__errCount,V__hasError,V_ch_2,V_stringIndex_0,B,C,D,E,F) = 1+ eval_getaString_bb8_in(V__line,V__errCount,V__hasError,G,H,B,C,D,E,F)
     [V_stringIndex_0>=0,V_ch_2>=1,33>=V_ch_2,V_stringIndex_0+1=H] 

### Cost equations --> "Loop" of eval_getaString_bb8_in/10 
* CEs [38] --> Loop 30 
* CEs [39] --> Loop 31 
* CEs [40] --> Loop 32 
* CEs [33] --> Loop 33 
* CEs [34] --> Loop 34 
* CEs [35] --> Loop 35 
* CEs [36] --> Loop 36 
* CEs [37] --> Loop 37 

#### Loops of eval_getaString_bb8_in/10 
* Loop 30: eval_getaString_bb8_in(V__line,V__errCount,V__hasError,V_ch_2,V_stringIndex_0,B,C,D,E,F)->  eval_getaString_bb8_in(V__line,V__errCount,V__hasError,V_ch_2',V_stringIndex_0',B,C,D,E,F)
                  [V_stringIndex_0>=0,V_ch_2>=35,V_stringIndex_0+1=V_stringIndex_0'] 
* Loop 31: eval_getaString_bb8_in(V__line,V__errCount,V__hasError,V_ch_2,V_stringIndex_0,B,C,D,E,F)->  eval_getaString_bb8_in(V__line,V__errCount,V__hasError,V_ch_2',V_stringIndex_0',B,C,D,E,F)
                  [V_stringIndex_0>=0,0>=V_ch_2+1,V_stringIndex_0+1=V_stringIndex_0'] 
* Loop 32: eval_getaString_bb8_in(V__line,V__errCount,V__hasError,V_ch_2,V_stringIndex_0,B,C,D,E,F)->  eval_getaString_bb8_in(V__line,V__errCount,V__hasError,V_ch_2',V_stringIndex_0',B,C,D,E,F)
                  [V_stringIndex_0>=0,V_ch_2>=1,33>=V_ch_2,V_stringIndex_0+1=V_stringIndex_0'] 
* Loop 33: eval_getaString_bb8_in(A,B,C,D,E,F,A,B,C,E) [E>=0,D>=35,F=2] 
* Loop 34: eval_getaString_bb8_in(A,B,C,D,E,F,A,B,C,E) [E>=0,0>=D+1,F=2] 
* Loop 35: eval_getaString_bb8_in(A,B,C,D,E,F,A,B,C,E) [E>=0,D>=1,33>=D,F=2] 
* Loop 36: eval_getaString_bb8_in(A,B,C,D,E,F,A,B,C,E) [E>=0,F=2,D=34] 
* Loop 37: eval_getaString_bb8_in(A,B,C,D,E,F,A,B,C,E) [E>=0,F=2,D=0] 

### Ranking functions of CR eval_getaString_bb8_in(V__line,V__errCount,V__hasError,V_ch_2,V_stringIndex_0,B,C,D,E,F) 

#### Partial ranking functions of CR eval_getaString_bb8_in(V__line,V__errCount,V__hasError,V_ch_2,V_stringIndex_0,B,C,D,E,F) 


### Resulting Chains:eval_getaString_bb8_in(V__line,V__errCount,V__hasError,V_ch_2,V_stringIndex_0,B,C,D,E,F) 
* [[30,31,32]]...
* [[30,31,32],37]
* [[30,31,32],36]
* [[30,31,32],35]
* [[30,31,32],34]
* [[30,31,32],33]
* [37]
* [36]
* [35]
* [34]
* [33]


### Merging Chains  eval_getaString_bb8_in/10 into  External patterns of execution 
* [[37]] --> 1 
* [[36]] --> 2 
* [[35]] --> 3 
* [[34]] --> 4 
* [[33]] --> 5 
* [[33,[30,31,32]],[34,[30,31,32]],[35,[30,31,32]],[36,[30,31,32]],[37,[30,31,32]]] --> 6 
* [[[30,31,32]]] --> 7 


### Specialization of cost equations eval_getaString__critedge4_in/4 
* CE 27 is refined into CE [41] 


#### Refined cost equations eval_getaString__critedge4_in/4 
* CE 41: eval_getaString__critedge4_in(V__line,V__errCount,V__hasError,B) = 0
     [] 

### Cost equations --> "Loop" of eval_getaString__critedge4_in/4 
* CEs [41] --> Loop 38 

#### Loops of eval_getaString__critedge4_in/4 
* Loop 38: eval_getaString__critedge4_in(V__line,V__errCount,V__hasError,B) [] 

### Ranking functions of CR eval_getaString__critedge4_in(V__line,V__errCount,V__hasError,B) 

#### Partial ranking functions of CR eval_getaString__critedge4_in(V__line,V__errCount,V__hasError,B) 


### Resulting Chains:eval_getaString__critedge4_in(V__line,V__errCount,V__hasError,B) 
* [38]


### Merging Chains  eval_getaString__critedge4_in/4 into  External patterns of execution 
* [[38]] --> 1 


### Specialization of cost equations eval_getaString_bb11_in/8 
* CE 25 is refined into CE [42] 
* CE 26 is refined into CE [43] 
* CE 24 is refined into CE [44] 


#### Refined cost equations eval_getaString_bb11_in/8 
* CE 42: eval_getaString_bb11_in(A,B,C,D,E,A,B,C) = 0
     [D>=1,E=4] 
* CE 43: eval_getaString_bb11_in(A,B,C,D,E,A,B,C) = 0
     [0>=D,E=4] 
* CE 44: eval_getaString_bb11_in(V__line,V__errCount,V__hasError,V_stringIndex_1,B,C,D,E) = 1+ eval_getaString_bb11_in(V__line,V__errCount,V__hasError,F,G,C,D,E)
     [V_stringIndex_1>=1,V_stringIndex_1=F+1,G=4,B=4] 

### Cost equations --> "Loop" of eval_getaString_bb11_in/8 
* CEs [44] --> Loop 39 
* CEs [42] --> Loop 40 
* CEs [43] --> Loop 41 

#### Loops of eval_getaString_bb11_in/8 
* Loop 39: eval_getaString_bb11_in(V__line,V__errCount,V__hasError,V_stringIndex_1,B,C,D,E)->  eval_getaString_bb11_in(V__line,V__errCount,V__hasError,V_stringIndex_1',B',C,D,E)
                  [V_stringIndex_1>=1,V_stringIndex_1=V_stringIndex_1'+1,B'=4,B=4] 
* Loop 40: eval_getaString_bb11_in(A,B,C,D,E,A,B,C) [D>=1,E=4] 
* Loop 41: eval_getaString_bb11_in(A,B,C,D,E,A,B,C) [0>=D,E=4] 

### Ranking functions of CR eval_getaString_bb11_in(V__line,V__errCount,V__hasError,V_stringIndex_1,B,C,D,E) 
* RF of phase [39]: [V_stringIndex_1]

#### Partial ranking functions of CR eval_getaString_bb11_in(V__line,V__errCount,V__hasError,V_stringIndex_1,B,C,D,E) 
* Partial RF of phase [39]:
  - RF of loop [39:1]:
    V_stringIndex_1


### Resulting Chains:eval_getaString_bb11_in(V__line,V__errCount,V__hasError,V_stringIndex_1,B,C,D,E) 
* [[39],41]
* [[39],40]
* [41]
* [40]


### Merging Chains  eval_getaString_bb11_in/8 into  External patterns of execution 
* [[41]] --> 1 
* [[40],[40,[39]],[41,[39]]] --> 2 


### Specialization of cost equations eval_getaString__critedge2_in/5 
* CE 22 is refined into CE [45,46] 
* CE 23 is refined into CE [47] 


#### Refined cost equations eval_getaString__critedge2_in/5 
* CE 45: eval_getaString__critedge2_in(V__line,V__errCount,V__hasError,V_stringIndex_0,B) = 1+ eval_getaString_bb11_in(V__line,V__errCount,V__hasError,V_stringIndex_0,C,V__line,V__errCount,V__hasError):1+ eval_getaString__critedge4_in(V__line,V__errCount,V__hasError,B):1
     [0>=V_stringIndex_0,C=4] 
* CE 46: eval_getaString__critedge2_in(V__line,V__errCount,V__hasError,V_stringIndex_0,B) = 1+ eval_getaString_bb11_in(V__line,V__errCount,V__hasError,V_stringIndex_0,C,V__line,V__errCount,V__hasError):2+ eval_getaString__critedge4_in(V__line,V__errCount,V__hasError,B):1
     [V_stringIndex_0>=1,C=4] 
* CE 47: eval_getaString__critedge2_in(V__line,V__errCount,V__hasError,V_stringIndex_0,B) = 0+ eval_getaString__critedge4_in(V__line,V__errCount,V__hasError,B):1
     [] 

### Cost equations --> "Loop" of eval_getaString__critedge2_in/5 
* CEs [45,46,47] --> Loop 42 

#### Loops of eval_getaString__critedge2_in/5 
* Loop 42: eval_getaString__critedge2_in(V__line,V__errCount,V__hasError,V_stringIndex_0,B) [] 

### Ranking functions of CR eval_getaString__critedge2_in(V__line,V__errCount,V__hasError,V_stringIndex_0,B) 

#### Partial ranking functions of CR eval_getaString__critedge2_in(V__line,V__errCount,V__hasError,V_stringIndex_0,B) 


### Resulting Chains:eval_getaString__critedge2_in(V__line,V__errCount,V__hasError,V_stringIndex_0,B) 
* [42]


### Merging Chains  eval_getaString__critedge2_in/5 into  External patterns of execution 
* [[42]] --> 1 


### Specialization of cost equations loop_cont_eval_getaString_bb8_in/6 
* CE 21 is refined into CE [48] 


#### Refined cost equations loop_cont_eval_getaString_bb8_in/6 
* CE 48: loop_cont_eval_getaString_bb8_in(G,A,B,C,D,E) = 0+ eval_getaString__critedge2_in(A,B,C,D,E):1
     [G=2] 

### Cost equations --> "Loop" of loop_cont_eval_getaString_bb8_in/6 
* CEs [48] --> Loop 43 

#### Loops of loop_cont_eval_getaString_bb8_in/6 
* Loop 43: loop_cont_eval_getaString_bb8_in(G,A,B,C,D,E) [G=2] 

### Ranking functions of CR loop_cont_eval_getaString_bb8_in(G,A,B,C,D,E) 

#### Partial ranking functions of CR loop_cont_eval_getaString_bb8_in(G,A,B,C,D,E) 


### Resulting Chains:loop_cont_eval_getaString_bb8_in(G,A,B,C,D,E) 
* [43]


### Merging Chains  loop_cont_eval_getaString_bb8_in/6 into  External patterns of execution 
* [[43]] --> 1 


### Specialization of cost equations eval_getaString_bb7_in/5 
* CE 12 is refined into CE [49,50,51,52,53,54,55] 


#### Refined cost equations eval_getaString_bb7_in/5 
* CE 49: eval_getaString_bb7_in(V__line,V__errCount,V__hasError,V_ch_1,B) = 1+ eval_getaString_bb8_in(V__line,V__errCount,V__hasError,C,D,E,V__line,V__errCount,V__hasError,F):1+ loop_cont_eval_getaString_bb8_in(G,V__line,V__errCount,V__hasError,H,B):1
     [H=0,G=2,F=0,E=2,D=0,C=0,V_ch_1=0] 
* CE 50: eval_getaString_bb7_in(V__line,V__errCount,V__hasError,V_ch_1,B) = 1+ eval_getaString_bb8_in(V__line,V__errCount,V__hasError,C,D,E,V__line,V__errCount,V__hasError,F):2+ loop_cont_eval_getaString_bb8_in(G,V__line,V__errCount,V__hasError,H,B):1
     [H=0,G=2,F=0,E=2,D=0,C=34,V_ch_1=34] 
* CE 51: eval_getaString_bb7_in(V__line,V__errCount,V__hasError,V_ch_1,B) = 1+ eval_getaString_bb8_in(V__line,V__errCount,V__hasError,V_ch_1,C,D,V__line,V__errCount,V__hasError,E):3+ loop_cont_eval_getaString_bb8_in(F,V__line,V__errCount,V__hasError,G,B):1
     [V_ch_1>=1,33>=V_ch_1,G=0,F=2,E=0,D=2,C=0] 
* CE 52: eval_getaString_bb7_in(V__line,V__errCount,V__hasError,V_ch_1,B) = 1+ eval_getaString_bb8_in(V__line,V__errCount,V__hasError,V_ch_1,C,D,V__line,V__errCount,V__hasError,E):4+ loop_cont_eval_getaString_bb8_in(F,V__line,V__errCount,V__hasError,G,B):1
     [0>=V_ch_1+1,G=0,F=2,E=0,D=2,C=0] 
* CE 53: eval_getaString_bb7_in(V__line,V__errCount,V__hasError,V_ch_1,B) = 1+ eval_getaString_bb8_in(V__line,V__errCount,V__hasError,V_ch_1,C,D,V__line,V__errCount,V__hasError,E):5+ loop_cont_eval_getaString_bb8_in(F,V__line,V__errCount,V__hasError,G,B):1
     [V_ch_1>=35,G=0,F=2,E=0,D=2,C=0] 
* CE 54: eval_getaString_bb7_in(V__line,V__errCount,V__hasError,V_ch_1,B) = 1+ eval_getaString_bb8_in(V__line,V__errCount,V__hasError,V_ch_1,C,D,V__line,V__errCount,V__hasError,E):6+ loop_cont_eval_getaString_bb8_in(F,V__line,V__errCount,V__hasError,E,B):1
     [E>=1,F=2,D=2,C=0] 
* CE 55: eval_getaString_bb7_in(V__line,V__errCount,V__hasError,V_ch_1,B) = 1+ eval_getaString_bb8_in(V__line,V__errCount,V__hasError,V_ch_1,C,D,E,F,G,H):7
     [C=0] 

### Cost equations --> "Loop" of eval_getaString_bb7_in/5 
* CEs [55] --> Loop 44 
* CEs [49,50,51,52,53,54] --> Loop 45 

#### Loops of eval_getaString_bb7_in/5 
* Loop 44: eval_getaString_bb7_in(V__line,V__errCount,V__hasError,V_ch_1,B) [] 
* Loop 45: eval_getaString_bb7_in(V__line,V__errCount,V__hasError,V_ch_1,B) [] 

### Ranking functions of CR eval_getaString_bb7_in(V__line,V__errCount,V__hasError,V_ch_1,B) 

#### Partial ranking functions of CR eval_getaString_bb7_in(V__line,V__errCount,V__hasError,V_ch_1,B) 


### Resulting Chains:eval_getaString_bb7_in(V__line,V__errCount,V__hasError,V_ch_1,B) 
* [45]
* [44]...


### Merging Chains  eval_getaString_bb7_in/5 into  External patterns of execution 
* [[45]] --> 1 
* [[44]] --> 2 


### Specialization of cost equations eval_getaString_bb5_in/5 
* CE 11 is refined into CE [56,57] 


#### Refined cost equations eval_getaString_bb5_in/5 
* CE 56: eval_getaString_bb5_in(V__line,V__errCount,V__hasError,V_ch_0,B) = 0+ eval_getaString_bb7_in(V__line,V__errCount,V__hasError,C,B):1
     [] 
* CE 57: eval_getaString_bb5_in(V__line,V__errCount,V__hasError,V_ch_0,B) = 0+ eval_getaString_bb7_in(V__line,V__errCount,V__hasError,C,B):2
     [] 

### Cost equations --> "Loop" of eval_getaString_bb5_in/5 
* CEs [57] --> Loop 46 
* CEs [56] --> Loop 47 

#### Loops of eval_getaString_bb5_in/5 
* Loop 46: eval_getaString_bb5_in(V__line,V__errCount,V__hasError,V_ch_0,B) [] 
* Loop 47: eval_getaString_bb5_in(V__line,V__errCount,V__hasError,V_ch_0,B) [] 

### Ranking functions of CR eval_getaString_bb5_in(V__line,V__errCount,V__hasError,V_ch_0,B) 

#### Partial ranking functions of CR eval_getaString_bb5_in(V__line,V__errCount,V__hasError,V_ch_0,B) 


### Resulting Chains:eval_getaString_bb5_in(V__line,V__errCount,V__hasError,V_ch_0,B) 
* [47]
* [46]...


### Merging Chains  eval_getaString_bb5_in/5 into  External patterns of execution 
* [[47]] --> 1 
* [[46]] --> 2 


### Specialization of cost equations eval_getaString__critedge_in/5 
* CE 9 is refined into CE [58,59] 
* CE 10 is refined into CE [60] 


#### Refined cost equations eval_getaString__critedge_in/5 
* CE 58: eval_getaString__critedge_in(V__line,V__errCount,V__hasError,V_ch_0,B) = 0+ eval_getaString_bb5_in(C,D,E,V_ch_0,B):1
     [] 
* CE 59: eval_getaString__critedge_in(V__line,V__errCount,V__hasError,V_ch_0,B) = 0+ eval_getaString_bb5_in(C,D,E,V_ch_0,B):2
     [] 
* CE 60: eval_getaString__critedge_in(V__line,V__errCount,V__hasError,V_ch_0,B) = 0
     [] 

### Cost equations --> "Loop" of eval_getaString__critedge_in/5 
* CEs [58,60] --> Loop 48 
* CEs [59] --> Loop 49 

#### Loops of eval_getaString__critedge_in/5 
* Loop 48: eval_getaString__critedge_in(V__line,V__errCount,V__hasError,V_ch_0,B) [] 
* Loop 49: eval_getaString__critedge_in(V__line,V__errCount,V__hasError,V_ch_0,B) [] 

### Ranking functions of CR eval_getaString__critedge_in(V__line,V__errCount,V__hasError,V_ch_0,B) 

#### Partial ranking functions of CR eval_getaString__critedge_in(V__line,V__errCount,V__hasError,V_ch_0,B) 


### Resulting Chains:eval_getaString__critedge_in(V__line,V__errCount,V__hasError,V_ch_0,B) 
* [49]...
* [48]


### Merging Chains  eval_getaString__critedge_in/5 into  External patterns of execution 
* [[48]] --> 1 
* [[49]] --> 2 


### Specialization of cost equations eval_getaString_bb0_in/4 
* CE 3 is refined into CE [61,62,63,64,65,66,67] 


#### Refined cost equations eval_getaString_bb0_in/4 
* CE 61: eval_getaString_bb0_in(V__line,V__errCount,V__hasError,B) = 1+ eval_getaString_bb1_in(V__line,V__errCount,V__hasError,C,D,V__line,V__errCount,V__hasError,E):1+ eval_getaString__critedge_in(V__line,V__errCount,V__hasError,F,B):1
     [F=0,E=0,D=3] 
* CE 62: eval_getaString_bb0_in(V__line,V__errCount,V__hasError,B) = 1+ eval_getaString_bb1_in(V__line,V__errCount,V__hasError,C,D,V__line,V__errCount,V__hasError,E):1+ eval_getaString__critedge_in(V__line,V__errCount,V__hasError,F,B):2
     [F=0,E=0,D=3] 
* CE 63: eval_getaString_bb0_in(V__line,V__errCount,V__hasError,B) = 1+ eval_getaString_bb1_in(V__line,V__errCount,V__hasError,C,D,V__line,V__errCount,V__hasError,E):2+ eval_getaString__critedge_in(V__line,V__errCount,V__hasError,E,B):1
     [0>=E+1,D=3] 
* CE 64: eval_getaString_bb0_in(V__line,V__errCount,V__hasError,B) = 1+ eval_getaString_bb1_in(V__line,V__errCount,V__hasError,C,D,V__line,V__errCount,V__hasError,E):2+ eval_getaString__critedge_in(V__line,V__errCount,V__hasError,E,B):2
     [0>=E+1,D=3] 
* CE 65: eval_getaString_bb0_in(V__line,V__errCount,V__hasError,B) = 1+ eval_getaString_bb1_in(V__line,V__errCount,V__hasError,C,D,V__line,V__errCount,V__hasError,E):3+ eval_getaString__critedge_in(V__line,V__errCount,V__hasError,E,B):1
     [E>=1,D=3] 
* CE 66: eval_getaString_bb0_in(V__line,V__errCount,V__hasError,B) = 1+ eval_getaString_bb1_in(V__line,V__errCount,V__hasError,C,D,V__line,V__errCount,V__hasError,E):3+ eval_getaString__critedge_in(V__line,V__errCount,V__hasError,E,B):2
     [E>=1,D=3] 
* CE 67: eval_getaString_bb0_in(V__line,V__errCount,V__hasError,B) = 1+ eval_getaString_bb1_in(V__line,V__errCount,V__hasError,C,D,E,F,G,H):4
     [D=3] 

### Cost equations --> "Loop" of eval_getaString_bb0_in/4 
* CEs [62,64,66,67] --> Loop 50 
* CEs [61,63,65] --> Loop 51 

#### Loops of eval_getaString_bb0_in/4 
* Loop 50: eval_getaString_bb0_in(V__line,V__errCount,V__hasError,B) [] 
* Loop 51: eval_getaString_bb0_in(V__line,V__errCount,V__hasError,B) [] 

### Ranking functions of CR eval_getaString_bb0_in(V__line,V__errCount,V__hasError,B) 

#### Partial ranking functions of CR eval_getaString_bb0_in(V__line,V__errCount,V__hasError,B) 


### Resulting Chains:eval_getaString_bb0_in(V__line,V__errCount,V__hasError,B) 
* [51]
* [50]...


### Merging Chains  eval_getaString_bb0_in/4 into  External patterns of execution 
* [[51]] --> 1 
* [[50]] --> 2 


### Specialization of cost equations eval_getaString_start/4 
* CE 2 is refined into CE [68,69] 


#### Refined cost equations eval_getaString_start/4 
* CE 68: eval_getaString_start(V__line,V__errCount,V__hasError,B) = 0+ eval_getaString_bb0_in(V__line,V__errCount,V__hasError,B):1
     [] 
* CE 69: eval_getaString_start(V__line,V__errCount,V__hasError,B) = 0+ eval_getaString_bb0_in(V__line,V__errCount,V__hasError,B):2
     [] 

### Cost equations --> "Loop" of eval_getaString_start/4 
* CEs [69] --> Loop 52 
* CEs [68] --> Loop 53 

#### Loops of eval_getaString_start/4 
* Loop 52: eval_getaString_start(V__line,V__errCount,V__hasError,B) [] 
* Loop 53: eval_getaString_start(V__line,V__errCount,V__hasError,B) [] 

### Ranking functions of CR eval_getaString_start(V__line,V__errCount,V__hasError,B) 

#### Partial ranking functions of CR eval_getaString_start(V__line,V__errCount,V__hasError,B) 


### Resulting Chains:eval_getaString_start(V__line,V__errCount,V__hasError,B) 
* [53]
* [52]...


### Merging Chains  eval_getaString_start/4 into  External patterns of execution 
* [[53]] --> 1 
* [[52]] --> 2 


Computing Bounds
=====================================

#### Cost of loops [25,26] 

 * loop 25:eval_getaString_bb1_in(V__line,V__errCount,V__hasError,V_ch_0,B,C,D,E,F) -> [eval_getaString_bb1_in(V__line',V__errCount',V__hasError',V_ch_0',B',C',D',E',F')] 
1
 * loop 26:eval_getaString_bb1_in(V__line,V__errCount,V__hasError,V_ch_0,B,C,D,E,F) -> [eval_getaString_bb1_in(V__line',V__errCount',V__hasError',V_ch_0',B',C',D',E',F')] 
1
#### Cost of phase [25,26]:eval_getaString_bb1_in(V__line,V__errCount,V__hasError,V_ch_0,B,C,D,E,F) -> [eval_getaString_bb1_in(V__line',V__errCount',V__hasError',V_ch_0',B',C',D',E',F')] 
2*it(25)+0
#### Cost of phase [25,26]:eval_getaString_bb1_in(V__line,V__errCount,V__hasError,V_ch_0,B,C,D,E,F) -> [eval_getaString_bb1_in(V__line',V__errCount',V__hasError',V_ch_0',B',C',D',E',F')] 
2*it(25)+0
#### Cost of phase [25,26]:eval_getaString_bb1_in(V__line,V__errCount,V__hasError,V_ch_0,B,C,D,E,F) -> [eval_getaString_bb1_in(V__line',V__errCount',V__hasError',V_ch_0',B',C',D',E',F')] 
2*it(25)+0
#### Cost of phase [25,26]:eval_getaString_bb1_in(V__line,V__errCount,V__hasError,V_ch_0,B,C,D,E,F) -> [eval_getaString_bb1_in(V__line',V__errCount',V__hasError',V_ch_0',B',C',D',E',F')] 
2*it(25)+0
#### Cost of chains of eval_getaString_bb1_in(V__line,V__errCount,V__hasError,V_ch_0,B,C,D,E,F):
* Chain [[25,26]]...: 2*it(25)+0
  with precondition: [B=3] 

* Chain [[25,26],29]: 2*it(25)+0
  with precondition: [B=3,F=0,V__line=C,V__errCount=D,V__hasError=E] 

* Chain [[25,26],28]: 2*it(25)+0
  with precondition: [B=3,V__line=C,V__errCount=D,V__hasError=E,0>=F+1] 

* Chain [[25,26],27]: 2*it(25)+0
  with precondition: [B=3,V__line=C,V__errCount=D,V__hasError=E,F>=1] 

* Chain [29]: 0
  with precondition: [V_ch_0=0,B=3,F=0,C=V__line,D=V__errCount,E=V__hasError] 

* Chain [28]: 0
  with precondition: [B=3,C=V__line,D=V__errCount,E=V__hasError,V_ch_0=F,0>=V_ch_0+1] 

* Chain [27]: 0
  with precondition: [B=3,C=V__line,D=V__errCount,E=V__hasError,V_ch_0=F,V_ch_0>=1] 


#### Cost of loops [30,31,32] 

 * loop 30:eval_getaString_bb8_in(V__line,V__errCount,V__hasError,V_ch_2,V_stringIndex_0,B,C,D,E,F) -> [eval_getaString_bb8_in(V__line',V__errCount',V__hasError',V_ch_2',V_stringIndex_0',B',C',D',E',F')] 
1
 * loop 31:eval_getaString_bb8_in(V__line,V__errCount,V__hasError,V_ch_2,V_stringIndex_0,B,C,D,E,F) -> [eval_getaString_bb8_in(V__line',V__errCount',V__hasError',V_ch_2',V_stringIndex_0',B',C',D',E',F')] 
1
 * loop 32:eval_getaString_bb8_in(V__line,V__errCount,V__hasError,V_ch_2,V_stringIndex_0,B,C,D,E,F) -> [eval_getaString_bb8_in(V__line',V__errCount',V__hasError',V_ch_2',V_stringIndex_0',B',C',D',E',F')] 
1
#### Cost of phase [30,31,32]:eval_getaString_bb8_in(V__line,V__errCount,V__hasError,V_ch_2,V_stringIndex_0,B,C,D,E,F) -> [eval_getaString_bb8_in(V__line',V__errCount',V__hasError',V_ch_2',V_stringIndex_0',B',C',D',E',F')] 
3*it(30)+0
#### Cost of phase [30,31,32]:eval_getaString_bb8_in(V__line,V__errCount,V__hasError,V_ch_2,V_stringIndex_0,B,C,D,E,F) -> [eval_getaString_bb8_in(V__line',V__errCount',V__hasError',V_ch_2',V_stringIndex_0',B',C',D',E',F')] 
3*it(30)+0
#### Cost of phase [30,31,32]:eval_getaString_bb8_in(V__line,V__errCount,V__hasError,V_ch_2,V_stringIndex_0,B,C,D,E,F) -> [eval_getaString_bb8_in(V__line',V__errCount',V__hasError',V_ch_2',V_stringIndex_0',B',C',D',E',F')] 
3*it(30)+0
#### Cost of phase [30,31,32]:eval_getaString_bb8_in(V__line,V__errCount,V__hasError,V_ch_2,V_stringIndex_0,B,C,D,E,F) -> [eval_getaString_bb8_in(V__line',V__errCount',V__hasError',V_ch_2',V_stringIndex_0',B',C',D',E',F')] 
3*it(30)+0
#### Cost of phase [30,31,32]:eval_getaString_bb8_in(V__line,V__errCount,V__hasError,V_ch_2,V_stringIndex_0,B,C,D,E,F) -> [eval_getaString_bb8_in(V__line',V__errCount',V__hasError',V_ch_2',V_stringIndex_0',B',C',D',E',F')] 
3*it(30)+0
#### Cost of phase [30,31,32]:eval_getaString_bb8_in(V__line,V__errCount,V__hasError,V_ch_2,V_stringIndex_0,B,C,D,E,F) -> [eval_getaString_bb8_in(V__line',V__errCount',V__hasError',V_ch_2',V_stringIndex_0',B',C',D',E',F')] 
3*it(30)+0
#### Cost of chains of eval_getaString_bb8_in(V__line,V__errCount,V__hasError,V_ch_2,V_stringIndex_0,B,C,D,E,F):
* Chain [[30,31,32]]...: 3*it(30)+0
  with precondition: [V_stringIndex_0>=0] 

* Chain [[30,31,32],37]: 3*it(30)+0
  with precondition: [B=2,V__line=C,V__errCount=D,V__hasError=E,V_stringIndex_0>=0,F>=V_stringIndex_0+1] 

* Chain [[30,31,32],36]: 3*it(30)+0
  with precondition: [B=2,V__line=C,V__errCount=D,V__hasError=E,V_stringIndex_0>=0,F>=V_stringIndex_0+1] 

* Chain [[30,31,32],35]: 3*it(30)+0
  with precondition: [B=2,V__line=C,V__errCount=D,V__hasError=E,V_stringIndex_0>=0,F>=V_stringIndex_0+1] 

* Chain [[30,31,32],34]: 3*it(30)+0
  with precondition: [B=2,V__line=C,V__errCount=D,V__hasError=E,V_stringIndex_0>=0,F>=V_stringIndex_0+1] 

* Chain [[30,31,32],33]: 3*it(30)+0
  with precondition: [B=2,V__line=C,V__errCount=D,V__hasError=E,V_stringIndex_0>=0,F>=V_stringIndex_0+1] 

* Chain [37]: 0
  with precondition: [V_ch_2=0,B=2,C=V__line,D=V__errCount,E=V__hasError,V_stringIndex_0=F,V_stringIndex_0>=0] 

* Chain [36]: 0
  with precondition: [V_ch_2=34,B=2,C=V__line,D=V__errCount,E=V__hasError,V_stringIndex_0=F,V_stringIndex_0>=0] 

* Chain [35]: 0
  with precondition: [B=2,C=V__line,D=V__errCount,E=V__hasError,V_stringIndex_0=F,33>=V_ch_2,V_ch_2>=1,V_stringIndex_0>=0] 

* Chain [34]: 0
  with precondition: [B=2,C=V__line,D=V__errCount,E=V__hasError,V_stringIndex_0=F,0>=V_ch_2+1,V_stringIndex_0>=0] 

* Chain [33]: 0
  with precondition: [B=2,C=V__line,D=V__errCount,E=V__hasError,V_stringIndex_0=F,V_ch_2>=35,V_stringIndex_0>=0] 


#### Cost of chains of eval_getaString__critedge4_in(V__line,V__errCount,V__hasError,B):
* Chain [38]: 0
  with precondition: [] 


#### Cost of loops [39] 

 * loop 39:eval_getaString_bb11_in(V__line,V__errCount,V__hasError,V_stringIndex_1,B,C,D,E) -> [eval_getaString_bb11_in(V__line',V__errCount',V__hasError',V_stringIndex_1',B',C',D',E')] 
1
#### Cost of phase [39]:eval_getaString_bb11_in(V__line,V__errCount,V__hasError,V_stringIndex_1,B,C,D,E) -> [eval_getaString_bb11_in(V__line',V__errCount',V__hasError',V_stringIndex_1',B',C',D',E')] 
1*it(39)+0
  Such that:it(39) =< V_stringIndex_1
it(39) =< V_stringIndex_1-V_stringIndex_1'

#### Cost of phase [39]:eval_getaString_bb11_in(V__line,V__errCount,V__hasError,V_stringIndex_1,B,C,D,E) -> [eval_getaString_bb11_in(V__line',V__errCount',V__hasError',V_stringIndex_1',B',C',D',E')] 
1*it(39)+0
  Such that:it(39) =< V_stringIndex_1
it(39) =< V_stringIndex_1-V_stringIndex_1'

#### Cost of chains of eval_getaString_bb11_in(V__line,V__errCount,V__hasError,V_stringIndex_1,B,C,D,E):
* Chain [[39],41]: 1*it(39)+0
  Such that:it(39) =< V_stringIndex_1

  with precondition: [B=4,V__line=C,V__errCount=D,V__hasError=E,V_stringIndex_1>=1] 

* Chain [[39],40]: 1*it(39)+0
  Such that:it(39) =< V_stringIndex_1

  with precondition: [B=4,V__line=C,V__errCount=D,V__hasError=E,V_stringIndex_1>=2] 

* Chain [41]: 0
  with precondition: [B=4,C=V__line,D=V__errCount,E=V__hasError,0>=V_stringIndex_1] 

* Chain [40]: 0
  with precondition: [B=4,C=V__line,D=V__errCount,E=V__hasError,V_stringIndex_1>=1] 


#### Cost of chains of eval_getaString__critedge2_in(V__line,V__errCount,V__hasError,V_stringIndex_0,B):
* Chain [42]: 2*s(12)+1
  Such that:s(11) =< V_stringIndex_0
s(12) =< s(11)

  with precondition: [] 


#### Cost of chains of loop_cont_eval_getaString_bb8_in(G,A,B,C,D,E):
* Chain [43]: 2*s(14)+1
  Such that:s(13) =< D
s(14) =< s(13)

  with precondition: [G=2] 


#### Cost of chains of eval_getaString_bb7_in(V__line,V__errCount,V__hasError,V_ch_1,B):
* Chain [45]: 1*aux(6)+0
  with precondition: [] 

* Chain [44]...: 3*s(28)+1
  with precondition: [] 


#### Cost of chains of eval_getaString_bb5_in(V__line,V__errCount,V__hasError,V_ch_0,B):
* Chain [47]: 1*s(29)+0
  with precondition: [] 

* Chain [46]...: 3*s(30)+1
  with precondition: [] 


#### Cost of chains of eval_getaString__critedge_in(V__line,V__errCount,V__hasError,V_ch_0,B):
* Chain [49]...: 3*s(31)+1
  with precondition: [] 

* Chain [48]: 1*aux(7)+0
  with precondition: [] 


#### Cost of chains of eval_getaString_bb0_in(V__line,V__errCount,V__hasError,B):
* Chain [51]: 1*aux(8)+0
  with precondition: [] 

* Chain [50]...: 1*aux(9)+0
  with precondition: [] 


#### Cost of chains of eval_getaString_start(V__line,V__errCount,V__hasError,B):
* Chain [53]: 1*s(46)+0
  with precondition: [] 

* Chain [52]...: 1*s(47)+0
  with precondition: [] 


Closed-form bounds of eval_getaString_start(V__line,V__errCount,V__hasError,B): 
-------------------------------------
* Chain [53] with precondition: [] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [52]... with precondition: [] 
    - Upper bound: inf 
    - Complexity: infinity 

### Maximum cost of eval_getaString_start(V__line,V__errCount,V__hasError,B): inf 
Asymptotic class: infinity 

Time statistics: 
-------------------------------------
* Partial evaluation computed in 118 ms.
* Invariants computed in 285 ms.
   - Backward Invariants 194 ms.
   - Transitive Invariants 34 ms.
* Refinement performed in 446 ms.
* Termination proved in 25 ms.
* Upper bounds computed in 272 ms.
   - Equation cost structures 108 ms.
   - Phase cost structures 58 ms.
   - Chain cost structures 107 ms.
   - Solving cost expressions 0 ms.
* Total analysis performed in 1345 ms.


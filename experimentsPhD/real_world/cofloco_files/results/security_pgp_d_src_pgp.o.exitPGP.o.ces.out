Warning: Ignored call to eval_exitPGP_stop/1 in equation eval_exitPGP_15/1 

Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. recursive  : [eval_exitPGP_4/5,eval_exitPGP_5/5,eval_exitPGP_bb3_in/5]
1. recursive  : [eval_exitPGP_6/5,eval_exitPGP_7/5,eval_exitPGP_bb6_in/5]
2. non_recursive  : [eval_exitPGP_15/1]
3. non_recursive  : [eval_exitPGP_14/3]
4. non_recursive  : [eval_exitPGP_13/3]
5. non_recursive  : [eval_exitPGP_bb10_in/3]
6. non_recursive  : [eval_exitPGP_12/3]
7. non_recursive  : [eval_exitPGP_11/3]
8. non_recursive  : [eval_exitPGP_10/3]
9. non_recursive  : [eval_exitPGP_9/3]
10. non_recursive  : [eval_exitPGP_8/3]
11. non_recursive  : [loop_cont_eval_exitPGP_bb6_in/4]
12. non_recursive  : [loop_cont_eval_exitPGP_bb3_in/4]
13. non_recursive  : [eval_exitPGP_bb2_in/3]
14. non_recursive  : [eval_exitPGP_3/3]
15. non_recursive  : [eval_exitPGP_2/3]
16. non_recursive  : [eval_exitPGP_bb0_in/3]
17. non_recursive  : [eval_exitPGP_start/3]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into eval_exitPGP_bb3_in/5
1. SCC is partially evaluated into eval_exitPGP_bb6_in/5
2. SCC is completely evaluated into other SCCs
3. SCC is completely evaluated into other SCCs
4. SCC is completely evaluated into other SCCs
5. SCC is completely evaluated into other SCCs
6. SCC is completely evaluated into other SCCs
7. SCC is completely evaluated into other SCCs
8. SCC is partially evaluated into eval_exitPGP_10/3
9. SCC is completely evaluated into other SCCs
10. SCC is completely evaluated into other SCCs
11. SCC is completely evaluated into other SCCs
12. SCC is partially evaluated into loop_cont_eval_exitPGP_bb3_in/4
13. SCC is partially evaluated into eval_exitPGP_bb2_in/3
14. SCC is completely evaluated into other SCCs
15. SCC is completely evaluated into other SCCs
16. SCC is partially evaluated into eval_exitPGP_bb0_in/3
17. SCC is partially evaluated into eval_exitPGP_start/3

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations eval_exitPGP_bb3_in/5 
* CE 6 is refined into CE [11] 
* CE 5 is refined into CE [12] 


#### Refined cost equations eval_exitPGP_bb3_in/5 
* CE 11: eval_exitPGP_bb3_in(A,B,C,A,B) = 0
     [C=3] 
* CE 12: eval_exitPGP_bb3_in(V_returnval,V__verbose,B,C,D) = 1+ eval_exitPGP_bb3_in(V_returnval,V__verbose,B,C,D)
     [] 

### Cost equations --> "Loop" of eval_exitPGP_bb3_in/5 
* CEs [12] --> Loop 10 
* CEs [11] --> Loop 11 

#### Loops of eval_exitPGP_bb3_in/5 
* Loop 10: eval_exitPGP_bb3_in(V_returnval,V__verbose,B,C,D)->  eval_exitPGP_bb3_in(V_returnval,V__verbose,B,C,D)
                  [] 
* Loop 11: eval_exitPGP_bb3_in(A,B,C,A,B) [C=3] 

### Ranking functions of CR eval_exitPGP_bb3_in(V_returnval,V__verbose,B,C,D) 

#### Partial ranking functions of CR eval_exitPGP_bb3_in(V_returnval,V__verbose,B,C,D) 


### Resulting Chains:eval_exitPGP_bb3_in(V_returnval,V__verbose,B,C,D) 
* [[10]]...
* [[10],11]
* [11]


### Merging Chains  eval_exitPGP_bb3_in/5 into  External patterns of execution 
* [[11],[11,[10]]] --> 1 
* [[[10]]] --> 2 


### Specialization of cost equations eval_exitPGP_bb6_in/5 
* CE 9 is refined into CE [13] 
* CE 8 is refined into CE [14] 


#### Refined cost equations eval_exitPGP_bb6_in/5 
* CE 13: eval_exitPGP_bb6_in(A,B,C,A,B) = 0
     [C=2] 
* CE 14: eval_exitPGP_bb6_in(V_returnval,V__verbose,B,C,D) = 1+ eval_exitPGP_bb6_in(V_returnval,V__verbose,E,C,D)
     [E=2,B=2] 

### Cost equations --> "Loop" of eval_exitPGP_bb6_in/5 
* CEs [14] --> Loop 12 
* CEs [13] --> Loop 13 

#### Loops of eval_exitPGP_bb6_in/5 
* Loop 12: eval_exitPGP_bb6_in(V_returnval,V__verbose,B,C,D)->  eval_exitPGP_bb6_in(V_returnval,V__verbose,B',C,D)
                  [B'=2,B=2] 
* Loop 13: eval_exitPGP_bb6_in(A,B,C,A,B) [C=2] 

### Ranking functions of CR eval_exitPGP_bb6_in(V_returnval,V__verbose,B,C,D) 

#### Partial ranking functions of CR eval_exitPGP_bb6_in(V_returnval,V__verbose,B,C,D) 


### Resulting Chains:eval_exitPGP_bb6_in(V_returnval,V__verbose,B,C,D) 
* [[12]]...
* [[12],13]
* [13]


### Merging Chains  eval_exitPGP_bb6_in/5 into  External patterns of execution 
* [[13],[13,[12]]] --> 1 
* [[[12]]] --> 2 


### Specialization of cost equations eval_exitPGP_10/3 
* CE 10 is refined into CE [15] 


#### Refined cost equations eval_exitPGP_10/3 
* CE 15: eval_exitPGP_10(V_returnval,V__verbose,B) = 0
     [] 

### Cost equations --> "Loop" of eval_exitPGP_10/3 
* CEs [15] --> Loop 14 

#### Loops of eval_exitPGP_10/3 
* Loop 14: eval_exitPGP_10(V_returnval,V__verbose,B) [] 

### Ranking functions of CR eval_exitPGP_10(V_returnval,V__verbose,B) 

#### Partial ranking functions of CR eval_exitPGP_10(V_returnval,V__verbose,B) 


### Resulting Chains:eval_exitPGP_10(V_returnval,V__verbose,B) 
* [14]


### Merging Chains  eval_exitPGP_10/3 into  External patterns of execution 
* [[14]] --> 1 


### Specialization of cost equations loop_cont_eval_exitPGP_bb3_in/4 
* CE 7 is refined into CE [16,17] 


#### Refined cost equations loop_cont_eval_exitPGP_bb3_in/4 
* CE 16: loop_cont_eval_exitPGP_bb3_in(G,A,B,C) = 1+ eval_exitPGP_bb6_in(A,B,H,A,B):1+ eval_exitPGP_10(A,B,C):1
     [H=2,G=3] 
* CE 17: loop_cont_eval_exitPGP_bb3_in(G,A,B,C) = 1+ eval_exitPGP_bb6_in(A,B,H,I,J):2
     [H=2,G=3] 

### Cost equations --> "Loop" of loop_cont_eval_exitPGP_bb3_in/4 
* CEs [17] --> Loop 15 
* CEs [16] --> Loop 16 

#### Loops of loop_cont_eval_exitPGP_bb3_in/4 
* Loop 15: loop_cont_eval_exitPGP_bb3_in(G,A,B,C) [G=3] 
* Loop 16: loop_cont_eval_exitPGP_bb3_in(G,A,B,C) [G=3] 

### Ranking functions of CR loop_cont_eval_exitPGP_bb3_in(G,A,B,C) 

#### Partial ranking functions of CR loop_cont_eval_exitPGP_bb3_in(G,A,B,C) 


### Resulting Chains:loop_cont_eval_exitPGP_bb3_in(G,A,B,C) 
* [16]
* [15]...


### Merging Chains  loop_cont_eval_exitPGP_bb3_in/4 into  External patterns of execution 
* [[16]] --> 1 
* [[15]] --> 2 


### Specialization of cost equations eval_exitPGP_bb2_in/3 
* CE 4 is refined into CE [18,19,20] 


#### Refined cost equations eval_exitPGP_bb2_in/3 
* CE 18: eval_exitPGP_bb2_in(V_returnval,V__verbose,B) = 1+ eval_exitPGP_bb3_in(V_returnval,V__verbose,C,V_returnval,V__verbose):1+ loop_cont_eval_exitPGP_bb3_in(D,V_returnval,V__verbose,B):1
     [D=3,C=3] 
* CE 19: eval_exitPGP_bb2_in(V_returnval,V__verbose,B) = 1+ eval_exitPGP_bb3_in(V_returnval,V__verbose,C,V_returnval,V__verbose):1+ loop_cont_eval_exitPGP_bb3_in(D,V_returnval,V__verbose,B):2
     [D=3,C=3] 
* CE 20: eval_exitPGP_bb2_in(V_returnval,V__verbose,B) = 1+ eval_exitPGP_bb3_in(V_returnval,V__verbose,C,D,E):2
     [] 

### Cost equations --> "Loop" of eval_exitPGP_bb2_in/3 
* CEs [19,20] --> Loop 17 
* CEs [18] --> Loop 18 

#### Loops of eval_exitPGP_bb2_in/3 
* Loop 17: eval_exitPGP_bb2_in(V_returnval,V__verbose,B) [] 
* Loop 18: eval_exitPGP_bb2_in(V_returnval,V__verbose,B) [] 

### Ranking functions of CR eval_exitPGP_bb2_in(V_returnval,V__verbose,B) 

#### Partial ranking functions of CR eval_exitPGP_bb2_in(V_returnval,V__verbose,B) 


### Resulting Chains:eval_exitPGP_bb2_in(V_returnval,V__verbose,B) 
* [18]
* [17]...


### Merging Chains  eval_exitPGP_bb2_in/3 into  External patterns of execution 
* [[18]] --> 1 
* [[17]] --> 2 


### Specialization of cost equations eval_exitPGP_bb0_in/3 
* CE 3 is refined into CE [21,22] 


#### Refined cost equations eval_exitPGP_bb0_in/3 
* CE 21: eval_exitPGP_bb0_in(V_returnval,V__verbose,B) = 0+ eval_exitPGP_bb2_in(V_returnval,V__verbose,B):1
     [] 
* CE 22: eval_exitPGP_bb0_in(V_returnval,V__verbose,B) = 0+ eval_exitPGP_bb2_in(V_returnval,V__verbose,B):2
     [] 

### Cost equations --> "Loop" of eval_exitPGP_bb0_in/3 
* CEs [22] --> Loop 19 
* CEs [21] --> Loop 20 

#### Loops of eval_exitPGP_bb0_in/3 
* Loop 19: eval_exitPGP_bb0_in(V_returnval,V__verbose,B) [] 
* Loop 20: eval_exitPGP_bb0_in(V_returnval,V__verbose,B) [] 

### Ranking functions of CR eval_exitPGP_bb0_in(V_returnval,V__verbose,B) 

#### Partial ranking functions of CR eval_exitPGP_bb0_in(V_returnval,V__verbose,B) 


### Resulting Chains:eval_exitPGP_bb0_in(V_returnval,V__verbose,B) 
* [20]
* [19]...


### Merging Chains  eval_exitPGP_bb0_in/3 into  External patterns of execution 
* [[20]] --> 1 
* [[19]] --> 2 


### Specialization of cost equations eval_exitPGP_start/3 
* CE 2 is refined into CE [23,24] 


#### Refined cost equations eval_exitPGP_start/3 
* CE 23: eval_exitPGP_start(V_returnval,V__verbose,B) = 0+ eval_exitPGP_bb0_in(V_returnval,V__verbose,B):1
     [] 
* CE 24: eval_exitPGP_start(V_returnval,V__verbose,B) = 0+ eval_exitPGP_bb0_in(V_returnval,V__verbose,B):2
     [] 

### Cost equations --> "Loop" of eval_exitPGP_start/3 
* CEs [24] --> Loop 21 
* CEs [23] --> Loop 22 

#### Loops of eval_exitPGP_start/3 
* Loop 21: eval_exitPGP_start(V_returnval,V__verbose,B) [] 
* Loop 22: eval_exitPGP_start(V_returnval,V__verbose,B) [] 

### Ranking functions of CR eval_exitPGP_start(V_returnval,V__verbose,B) 

#### Partial ranking functions of CR eval_exitPGP_start(V_returnval,V__verbose,B) 


### Resulting Chains:eval_exitPGP_start(V_returnval,V__verbose,B) 
* [22]
* [21]...


### Merging Chains  eval_exitPGP_start/3 into  External patterns of execution 
* [[22]] --> 1 
* [[21]] --> 2 


Computing Bounds
=====================================

#### Cost of loops [10] 

 * loop 10:eval_exitPGP_bb3_in(V_returnval,V__verbose,B,C,D) -> [eval_exitPGP_bb3_in(V_returnval',V__verbose',B',C',D')] 
1
#### Cost of phase [10]:eval_exitPGP_bb3_in(V_returnval,V__verbose,B,C,D) -> [eval_exitPGP_bb3_in(V_returnval',V__verbose',B',C',D')] 
1*it(10)+0
#### Cost of phase [10]:eval_exitPGP_bb3_in(V_returnval,V__verbose,B,C,D) -> [eval_exitPGP_bb3_in(V_returnval',V__verbose',B',C',D')] 
1*it(10)+0
#### Cost of chains of eval_exitPGP_bb3_in(V_returnval,V__verbose,B,C,D):
* Chain [[10]]...: 1*it(10)+0
  with precondition: [] 

* Chain [[10],11]: 1*it(10)+0
  with precondition: [B=3,V_returnval=C,V__verbose=D] 

* Chain [11]: 0
  with precondition: [B=3,C=V_returnval,D=V__verbose] 


#### Cost of loops [12] 

 * loop 12:eval_exitPGP_bb6_in(V_returnval,V__verbose,B,C,D) -> [eval_exitPGP_bb6_in(V_returnval',V__verbose',B',C',D')] 
1
#### Cost of phase [12]:eval_exitPGP_bb6_in(V_returnval,V__verbose,B,C,D) -> [eval_exitPGP_bb6_in(V_returnval',V__verbose',B',C',D')] 
1*it(12)+0
#### Cost of phase [12]:eval_exitPGP_bb6_in(V_returnval,V__verbose,B,C,D) -> [eval_exitPGP_bb6_in(V_returnval',V__verbose',B',C',D')] 
1*it(12)+0
#### Cost of chains of eval_exitPGP_bb6_in(V_returnval,V__verbose,B,C,D):
* Chain [[12]]...: 1*it(12)+0
  with precondition: [B=2] 

* Chain [[12],13]: 1*it(12)+0
  with precondition: [B=2,V_returnval=C,V__verbose=D] 

* Chain [13]: 0
  with precondition: [B=2,C=V_returnval,D=V__verbose] 


#### Cost of chains of eval_exitPGP_10(V_returnval,V__verbose,B):
* Chain [14]: 0
  with precondition: [] 


#### Cost of chains of loop_cont_eval_exitPGP_bb3_in(G,A,B,C):
* Chain [16]: 1*s(3)+1
  with precondition: [G=3] 

* Chain [15]...: 1*s(4)+1
  with precondition: [G=3] 


#### Cost of chains of eval_exitPGP_bb2_in(V_returnval,V__verbose,B):
* Chain [18]: 2*s(5)+2
  with precondition: [] 

* Chain [17]...: 1*aux(3)+0
  with precondition: [] 


#### Cost of chains of eval_exitPGP_bb0_in(V_returnval,V__verbose,B):
* Chain [20]: 2*s(10)+2
  with precondition: [] 

* Chain [19]...: 1*s(11)+0
  with precondition: [] 


#### Cost of chains of eval_exitPGP_start(V_returnval,V__verbose,B):
* Chain [22]: 2*s(12)+2
  with precondition: [] 

* Chain [21]...: 1*s(13)+0
  with precondition: [] 


Closed-form bounds of eval_exitPGP_start(V_returnval,V__verbose,B): 
-------------------------------------
* Chain [22] with precondition: [] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [21]... with precondition: [] 
    - Upper bound: inf 
    - Complexity: infinity 

### Maximum cost of eval_exitPGP_start(V_returnval,V__verbose,B): inf 
Asymptotic class: infinity 

Time statistics: 
-------------------------------------
* Partial evaluation computed in 14 ms.
* Invariants computed in 10 ms.
   - Backward Invariants 5 ms.
   - Transitive Invariants 2 ms.
* Refinement performed in 22 ms.
* Termination proved in 2 ms.
* Upper bounds computed in 16 ms.
   - Equation cost structures 6 ms.
   - Phase cost structures 5 ms.
   - Chain cost structures 5 ms.
   - Solving cost expressions 0 ms.
* Total analysis performed in 86 ms.


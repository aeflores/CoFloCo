Warning: Ignored call to eval_uInt64_toAscii_stop/1 in equation loop_cont_eval_uInt64_toAscii_bb3_in/2 

Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. recursive  : [eval_uInt64_toAscii_2/4,eval_uInt64_toAscii_3/4,eval_uInt64_toAscii_8/5,eval_uInt64_toAscii_9/6,eval_uInt64_toAscii_bb1_in/4]
1. recursive  : [eval_uInt64_toAscii_bb3_in/3]
2. non_recursive  : [loop_cont_eval_uInt64_toAscii_bb3_in/2]
3. non_recursive  : [loop_cont_eval_uInt64_toAscii_bb1_in/4]
4. non_recursive  : [eval_uInt64_toAscii_1/1]
5. non_recursive  : [eval_uInt64_toAscii_0/1]
6. non_recursive  : [eval_uInt64_toAscii_bb0_in/1]
7. non_recursive  : [eval_uInt64_toAscii_start/1]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into eval_uInt64_toAscii_bb1_in/4
1. SCC is partially evaluated into eval_uInt64_toAscii_bb3_in/3
2. SCC is completely evaluated into other SCCs
3. SCC is partially evaluated into loop_cont_eval_uInt64_toAscii_bb1_in/4
4. SCC is partially evaluated into eval_uInt64_toAscii_1/1
5. SCC is completely evaluated into other SCCs
6. SCC is completely evaluated into other SCCs
7. SCC is partially evaluated into eval_uInt64_toAscii_start/1

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations eval_uInt64_toAscii_bb1_in/4 
* CE 5 is refined into CE [9] 
* CE 4 is refined into CE [10] 


#### Refined cost equations eval_uInt64_toAscii_bb1_in/4 
* CE 9: eval_uInt64_toAscii_bb1_in(V_nBuf_0,B,C,D) = 1+ eval_uInt64_toAscii_bb1_in(E,B,C,D)
     [V_nBuf_0>=0,V_nBuf_0+1=E] 
* CE 10: eval_uInt64_toAscii_bb1_in(V_nBuf_0,B,C,D) = 0
     [V_nBuf_0>=0,V_nBuf_0+1=C,D=0,B=3] 

### Cost equations --> "Loop" of eval_uInt64_toAscii_bb1_in/4 
* CEs [10] --> Loop 8 
* CEs [9] --> Loop 9 

#### Loops of eval_uInt64_toAscii_bb1_in/4 
* Loop 8: eval_uInt64_toAscii_bb1_in(V_nBuf_0,B,C,D) [V_nBuf_0>=0,V_nBuf_0+1=C,D=0,B=3] 
* Loop 9: eval_uInt64_toAscii_bb1_in(V_nBuf_0,B,C,D)->  eval_uInt64_toAscii_bb1_in(V_nBuf_0',B,C,D)
                  [V_nBuf_0>=0,V_nBuf_0+1=V_nBuf_0'] 

### Ranking functions of CR eval_uInt64_toAscii_bb1_in(V_nBuf_0,B,C,D) 

#### Partial ranking functions of CR eval_uInt64_toAscii_bb1_in(V_nBuf_0,B,C,D) 


### Resulting Chains:eval_uInt64_toAscii_bb1_in(V_nBuf_0,B,C,D) 
* [[9]]...
* [[9],8]
* [8]


### Merging Chains  eval_uInt64_toAscii_bb1_in/4 into  External patterns of execution 
* [[8]] --> 1 
* [[8,[9]]] --> 2 
* [[[9]]] --> 3 


### Specialization of cost equations eval_uInt64_toAscii_bb3_in/3 
* CE 8 is refined into CE [11] 
* CE 7 is refined into CE [12] 


#### Refined cost equations eval_uInt64_toAscii_bb3_in/3 
* CE 11: eval_uInt64_toAscii_bb3_in(V_7,V_i_0,B) = 0
     [V_i_0>=V_7,B=2] 
* CE 12: eval_uInt64_toAscii_bb3_in(V_7,V_i_0,B) = 1+ eval_uInt64_toAscii_bb3_in(V_7,C,D)
     [V_7>=V_i_0+1,V_i_0+1=C,D=2,B=2] 

### Cost equations --> "Loop" of eval_uInt64_toAscii_bb3_in/3 
* CEs [12] --> Loop 10 
* CEs [11] --> Loop 11 

#### Loops of eval_uInt64_toAscii_bb3_in/3 
* Loop 10: eval_uInt64_toAscii_bb3_in(V_7,V_i_0,B)->  eval_uInt64_toAscii_bb3_in(V_7,V_i_0',B')
                  [V_7>=V_i_0+1,V_i_0+1=V_i_0',B'=2,B=2] 
* Loop 11: eval_uInt64_toAscii_bb3_in(V_7,V_i_0,B) [V_i_0>=V_7,B=2] 

### Ranking functions of CR eval_uInt64_toAscii_bb3_in(V_7,V_i_0,B) 
* RF of phase [10]: [V_7-V_i_0]

#### Partial ranking functions of CR eval_uInt64_toAscii_bb3_in(V_7,V_i_0,B) 
* Partial RF of phase [10]:
  - RF of loop [10:1]:
    V_7-V_i_0


### Resulting Chains:eval_uInt64_toAscii_bb3_in(V_7,V_i_0,B) 
* [[10],11]
* [11]


### Merging Chains  eval_uInt64_toAscii_bb3_in/3 into  External patterns of execution 
* [[11]] --> 1 
* [[11,[10]]] --> 2 


### Specialization of cost equations loop_cont_eval_uInt64_toAscii_bb1_in/4 
* CE 6 is refined into CE [13,14] 


#### Refined cost equations loop_cont_eval_uInt64_toAscii_bb1_in/4 
* CE 13: loop_cont_eval_uInt64_toAscii_bb1_in(F,A,B,C) = 1+ eval_uInt64_toAscii_bb3_in(A,B,G):1
     [B>=A,G=2,F=3] 
* CE 14: loop_cont_eval_uInt64_toAscii_bb1_in(F,A,B,C) = 1+ eval_uInt64_toAscii_bb3_in(A,B,G):2
     [A>=B+1,G=2,F=3] 

### Cost equations --> "Loop" of loop_cont_eval_uInt64_toAscii_bb1_in/4 
* CEs [14] --> Loop 12 
* CEs [13] --> Loop 13 

#### Loops of loop_cont_eval_uInt64_toAscii_bb1_in/4 
* Loop 12: loop_cont_eval_uInt64_toAscii_bb1_in(F,A,B,C) [A>=B+1,F=3] 
* Loop 13: loop_cont_eval_uInt64_toAscii_bb1_in(F,A,B,C) [B>=A,F=3] 

### Ranking functions of CR loop_cont_eval_uInt64_toAscii_bb1_in(F,A,B,C) 

#### Partial ranking functions of CR loop_cont_eval_uInt64_toAscii_bb1_in(F,A,B,C) 


### Resulting Chains:loop_cont_eval_uInt64_toAscii_bb1_in(F,A,B,C) 
* [13]
* [12]


### Merging Chains  loop_cont_eval_uInt64_toAscii_bb1_in/4 into  External patterns of execution 
* [[13]] --> 1 
* [[12]] --> 2 


### Specialization of cost equations eval_uInt64_toAscii_1/1 
* CE 3 is refined into CE [15,16,17] 


#### Refined cost equations eval_uInt64_toAscii_1/1 
* CE 15: eval_uInt64_toAscii_1(B) = 1+ eval_uInt64_toAscii_bb1_in(C,D,E,F):1+ loop_cont_eval_uInt64_toAscii_bb1_in(G,H,I,B):2
     [I=0,H=1,G=3,F=0,E=1,D=3,C=0] 
* CE 16: eval_uInt64_toAscii_1(B) = 1+ eval_uInt64_toAscii_bb1_in(C,D,E,F):2+ loop_cont_eval_uInt64_toAscii_bb1_in(G,E,H,B):2
     [E>=2,H=0,G=3,F=0,D=3,C=0] 
* CE 17: eval_uInt64_toAscii_1(B) = 1+ eval_uInt64_toAscii_bb1_in(C,D,E,F):3
     [C=0] 

### Cost equations --> "Loop" of eval_uInt64_toAscii_1/1 
* CEs [17] --> Loop 14 
* CEs [15,16] --> Loop 15 

#### Loops of eval_uInt64_toAscii_1/1 
* Loop 14: eval_uInt64_toAscii_1(B) [] 
* Loop 15: eval_uInt64_toAscii_1(B) [] 

### Ranking functions of CR eval_uInt64_toAscii_1(B) 

#### Partial ranking functions of CR eval_uInt64_toAscii_1(B) 


### Resulting Chains:eval_uInt64_toAscii_1(B) 
* [15]
* [14]...


### Merging Chains  eval_uInt64_toAscii_1/1 into  External patterns of execution 
* [[15]] --> 1 
* [[14]] --> 2 


### Specialization of cost equations eval_uInt64_toAscii_start/1 
* CE 2 is refined into CE [18,19] 


#### Refined cost equations eval_uInt64_toAscii_start/1 
* CE 18: eval_uInt64_toAscii_start(B) = 0+ eval_uInt64_toAscii_1(B):1
     [] 
* CE 19: eval_uInt64_toAscii_start(B) = 0+ eval_uInt64_toAscii_1(B):2
     [] 

### Cost equations --> "Loop" of eval_uInt64_toAscii_start/1 
* CEs [19] --> Loop 16 
* CEs [18] --> Loop 17 

#### Loops of eval_uInt64_toAscii_start/1 
* Loop 16: eval_uInt64_toAscii_start(B) [] 
* Loop 17: eval_uInt64_toAscii_start(B) [] 

### Ranking functions of CR eval_uInt64_toAscii_start(B) 

#### Partial ranking functions of CR eval_uInt64_toAscii_start(B) 


### Resulting Chains:eval_uInt64_toAscii_start(B) 
* [17]
* [16]...


### Merging Chains  eval_uInt64_toAscii_start/1 into  External patterns of execution 
* [[17]] --> 1 
* [[16]] --> 2 


Computing Bounds
=====================================

#### Cost of loops [9] 

 * loop 9:eval_uInt64_toAscii_bb1_in(V_nBuf_0,B,C,D) -> [eval_uInt64_toAscii_bb1_in(V_nBuf_0',B',C',D')] 
1
#### Cost of phase [9]:eval_uInt64_toAscii_bb1_in(V_nBuf_0,B,C,D) -> [eval_uInt64_toAscii_bb1_in(V_nBuf_0',B',C',D')] 
1*it(9)+0
#### Cost of phase [9]:eval_uInt64_toAscii_bb1_in(V_nBuf_0,B,C,D) -> [eval_uInt64_toAscii_bb1_in(V_nBuf_0',B',C',D')] 
1*it(9)+0
#### Cost of chains of eval_uInt64_toAscii_bb1_in(V_nBuf_0,B,C,D):
* Chain [[9]]...: 1*it(9)+0
  with precondition: [V_nBuf_0>=0] 

* Chain [[9],8]: 1*it(9)+0
  with precondition: [B=3,D=0,V_nBuf_0>=0,C>=V_nBuf_0+2] 

* Chain [8]: 0
  with precondition: [B=3,D=0,V_nBuf_0+1=C,V_nBuf_0>=0] 


#### Cost of loops [10] 

 * loop 10:eval_uInt64_toAscii_bb3_in(V_7,V_i_0,B) -> [eval_uInt64_toAscii_bb3_in(V_7',V_i_0',B')] 
1
#### Cost of phase [10]:eval_uInt64_toAscii_bb3_in(V_7,V_i_0,B) -> [eval_uInt64_toAscii_bb3_in(V_7',V_i_0',B')] 
1*it(10)+0
  Such that:it(10) =< V_7-V_i_0
it(10) =< V_7-V_i_0-V_7'+V_i_0'

#### Cost of chains of eval_uInt64_toAscii_bb3_in(V_7,V_i_0,B):
* Chain [[10],11]: 1*it(10)+0
  Such that:it(10) =< V_7-V_i_0

  with precondition: [B=2,V_7>=V_i_0+1] 

* Chain [11]: 0
  with precondition: [B=2,V_i_0>=V_7] 


#### Cost of chains of loop_cont_eval_uInt64_toAscii_bb1_in(F,A,B,C):
* Chain [13]: 1
  with precondition: [F=3,B>=A] 

* Chain [12]: 1*s(1)+1
  Such that:s(1) =< A-B

  with precondition: [F=3,A>=B+1] 


#### Cost of chains of eval_uInt64_toAscii_1(B):
* Chain [15]: 1*aux(1)+0
  with precondition: [] 

* Chain [14]...: 1*s(5)+1
  with precondition: [] 


#### Cost of chains of eval_uInt64_toAscii_start(B):
* Chain [17]: 1*s(6)+0
  with precondition: [] 

* Chain [16]...: 1*s(7)+1
  with precondition: [] 


Closed-form bounds of eval_uInt64_toAscii_start(B): 
-------------------------------------
* Chain [17] with precondition: [] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [16]... with precondition: [] 
    - Upper bound: inf 
    - Complexity: infinity 

### Maximum cost of eval_uInt64_toAscii_start(B): inf 
Asymptotic class: infinity 

Time statistics: 
-------------------------------------
* Partial evaluation computed in 9 ms.
* Invariants computed in 11 ms.
   - Backward Invariants 6 ms.
   - Transitive Invariants 2 ms.
* Refinement performed in 18 ms.
* Termination proved in 2 ms.
* Upper bounds computed in 14 ms.
   - Equation cost structures 6 ms.
   - Phase cost structures 3 ms.
   - Chain cost structures 6 ms.
   - Solving cost expressions 0 ms.
* Total analysis performed in 73 ms.


WARNING: Excluded non-linear constraints:[B-C*E>=0,B-C*E+1=<C]
WARNING: Excluded non-linear constraints:[B-C*E>=0,B-C*E+1=< -C]
WARNING: Excluded non-linear constraints:[-B+C*E>=0,-B+C*E+1=<C]
WARNING: Excluded non-linear constraints:[-B+C*E>=0,-B+C*E+1=< -C]
WARNING: Excluded non-linear constraints:[B-C*F>=0,B-C*F+1=<C]
WARNING: Excluded non-linear constraints:[B-C*F>=0,B-C*F+1=< -C]
WARNING: Excluded non-linear constraints:[-B+C*F>=0,-B+C*F+1=<C]
WARNING: Excluded non-linear constraints:[-B+C*F>=0,-B+C*F+1=< -C]
Warning: Ignored call to eval_gdev_prn_copy_scan_lines_stop/1 in equation eval_gdev_prn_copy_scan_lines_bb6_in/1 

Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. recursive  : [eval_gdev_prn_copy_scan_lines_11/5,eval_gdev_prn_copy_scan_lines_12/5,eval_gdev_prn_copy_scan_lines_bb3_in/4]
1. non_recursive  : [eval_gdev_prn_copy_scan_lines_bb6_in/1]
2. non_recursive  : [loop_cont_eval_gdev_prn_copy_scan_lines_bb3_in/2]
3. non_recursive  : [eval_gdev_prn_copy_scan_lines_bb2_in/3]
4. non_recursive  : [eval_gdev_prn_copy_scan_lines_1/4]
5. non_recursive  : [eval_gdev_prn_copy_scan_lines_0/3]
6. non_recursive  : [eval_gdev_prn_copy_scan_lines_bb0_in/3]
7. non_recursive  : [eval_gdev_prn_copy_scan_lines_start/3]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into eval_gdev_prn_copy_scan_lines_bb3_in/4
1. SCC is completely evaluated into other SCCs
2. SCC is completely evaluated into other SCCs
3. SCC is partially evaluated into eval_gdev_prn_copy_scan_lines_bb2_in/3
4. SCC is partially evaluated into eval_gdev_prn_copy_scan_lines_1/4
5. SCC is completely evaluated into other SCCs
6. SCC is completely evaluated into other SCCs
7. SCC is partially evaluated into eval_gdev_prn_copy_scan_lines_start/3

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations eval_gdev_prn_copy_scan_lines_bb3_in/4 
* CE 10 is refined into CE [12] 
* CE 11 is refined into CE [13] 
* CE 9 is refined into CE [14] 


#### Refined cost equations eval_gdev_prn_copy_scan_lines_bb3_in/4 
* CE 12: eval_gdev_prn_copy_scan_lines_bb3_in(V_y,V_10,V_i_0,B) = 0
     [V_10>=V_i_0+1,V_i_0>=0,B=2] 
* CE 13: eval_gdev_prn_copy_scan_lines_bb3_in(V_y,V_10,V_i_0,B) = 0
     [V_i_0>=V_10,V_i_0>=0,B=2] 
* CE 14: eval_gdev_prn_copy_scan_lines_bb3_in(V_y,V_10,V_i_0,B) = 1+ eval_gdev_prn_copy_scan_lines_bb3_in(V_y,V_10,C,D)
     [V_10>=V_i_0+1,V_i_0>=0,V_i_0+1=C,D=2,B=2] 

### Cost equations --> "Loop" of eval_gdev_prn_copy_scan_lines_bb3_in/4 
* CEs [14] --> Loop 11 
* CEs [12] --> Loop 12 
* CEs [13] --> Loop 13 

#### Loops of eval_gdev_prn_copy_scan_lines_bb3_in/4 
* Loop 11: eval_gdev_prn_copy_scan_lines_bb3_in(V_y,V_10,V_i_0,B)->  eval_gdev_prn_copy_scan_lines_bb3_in(V_y,V_10,V_i_0',B')
                  [V_10>=V_i_0+1,V_i_0>=0,V_i_0+1=V_i_0',B'=2,B=2] 
* Loop 12: eval_gdev_prn_copy_scan_lines_bb3_in(V_y,V_10,V_i_0,B) [V_10>=V_i_0+1,V_i_0>=0,B=2] 
* Loop 13: eval_gdev_prn_copy_scan_lines_bb3_in(V_y,V_10,V_i_0,B) [V_i_0>=V_10,V_i_0>=0,B=2] 

### Ranking functions of CR eval_gdev_prn_copy_scan_lines_bb3_in(V_y,V_10,V_i_0,B) 
* RF of phase [11]: [V_10-V_i_0]

#### Partial ranking functions of CR eval_gdev_prn_copy_scan_lines_bb3_in(V_y,V_10,V_i_0,B) 
* Partial RF of phase [11]:
  - RF of loop [11:1]:
    V_10-V_i_0


### Resulting Chains:eval_gdev_prn_copy_scan_lines_bb3_in(V_y,V_10,V_i_0,B) 
* [[11],13]
* [[11],12]
* [13]
* [12]


### Merging Chains  eval_gdev_prn_copy_scan_lines_bb3_in/4 into  External patterns of execution 
* [[13]] --> 1 
* [[12],[12,[11]],[13,[11]]] --> 2 


### Specialization of cost equations eval_gdev_prn_copy_scan_lines_bb2_in/3 
* CE 8 is refined into CE [15,16] 


#### Refined cost equations eval_gdev_prn_copy_scan_lines_bb2_in/3 
* CE 15: eval_gdev_prn_copy_scan_lines_bb2_in(V_y,V_10,B) = 1+ eval_gdev_prn_copy_scan_lines_bb3_in(V_y,V_10,C,D):1
     [0>=V_10,D=2,C=0] 
* CE 16: eval_gdev_prn_copy_scan_lines_bb2_in(V_y,V_10,B) = 1+ eval_gdev_prn_copy_scan_lines_bb3_in(V_y,V_10,C,D):2
     [V_10>=1,D=2,C=0] 

### Cost equations --> "Loop" of eval_gdev_prn_copy_scan_lines_bb2_in/3 
* CEs [16] --> Loop 14 
* CEs [15] --> Loop 15 

#### Loops of eval_gdev_prn_copy_scan_lines_bb2_in/3 
* Loop 14: eval_gdev_prn_copy_scan_lines_bb2_in(V_y,V_10,B) [V_10>=1] 
* Loop 15: eval_gdev_prn_copy_scan_lines_bb2_in(V_y,V_10,B) [0>=V_10] 

### Ranking functions of CR eval_gdev_prn_copy_scan_lines_bb2_in(V_y,V_10,B) 

#### Partial ranking functions of CR eval_gdev_prn_copy_scan_lines_bb2_in(V_y,V_10,B) 


### Resulting Chains:eval_gdev_prn_copy_scan_lines_bb2_in(V_y,V_10,B) 
* [15]
* [14]


### Merging Chains  eval_gdev_prn_copy_scan_lines_bb2_in/3 into  External patterns of execution 
* [[15]] --> 1 
* [[14]] --> 2 


### Specialization of cost equations eval_gdev_prn_copy_scan_lines_1/4 
* CE 4 is refined into CE [17,18] 
* CE 5 is refined into CE [19,20] 
* CE 6 is refined into CE [21,22] 
* CE 7 is refined into CE [23,24] 
* CE 3 is refined into CE [25,26] 


#### Refined cost equations eval_gdev_prn_copy_scan_lines_1/4 
* CE 17: eval_gdev_prn_copy_scan_lines_1(V_y,V_size,V_1,B) = 0+ eval_gdev_prn_copy_scan_lines_bb2_in(V_y,C,B):1
     [V_1>=1,V_size>=1,0>=C] 
* CE 18: eval_gdev_prn_copy_scan_lines_1(V_y,V_size,V_1,B) = 0+ eval_gdev_prn_copy_scan_lines_bb2_in(V_y,C,B):2
     [C>=1,V_1>=1,V_size>=1] 
* CE 19: eval_gdev_prn_copy_scan_lines_1(V_y,V_size,V_1,B) = 0+ eval_gdev_prn_copy_scan_lines_bb2_in(V_y,C,B):1
     [V_size>=1,0>=C,0>=V_1+1] 
* CE 20: eval_gdev_prn_copy_scan_lines_1(V_y,V_size,V_1,B) = 0+ eval_gdev_prn_copy_scan_lines_bb2_in(V_y,C,B):2
     [C>=1,V_size>=1,0>=V_1+1] 
* CE 21: eval_gdev_prn_copy_scan_lines_1(V_y,V_size,V_1,B) = 0+ eval_gdev_prn_copy_scan_lines_bb2_in(V_y,C,B):1
     [V_1>=1,0>=C,0>=V_size+1] 
* CE 22: eval_gdev_prn_copy_scan_lines_1(V_y,V_size,V_1,B) = 0+ eval_gdev_prn_copy_scan_lines_bb2_in(V_y,C,B):2
     [C>=1,V_1>=1,0>=V_size+1] 
* CE 23: eval_gdev_prn_copy_scan_lines_1(V_y,V_size,V_1,B) = 0+ eval_gdev_prn_copy_scan_lines_bb2_in(V_y,C,B):1
     [0>=C,0>=V_1+1,0>=V_size+1] 
* CE 24: eval_gdev_prn_copy_scan_lines_1(V_y,V_size,V_1,B) = 0+ eval_gdev_prn_copy_scan_lines_bb2_in(V_y,C,B):2
     [C>=1,0>=V_1+1,0>=V_size+1] 
* CE 25: eval_gdev_prn_copy_scan_lines_1(V_y,V_size,V_1,B) = 0+ eval_gdev_prn_copy_scan_lines_bb2_in(V_y,C,B):1
     [0>=C,V_size=0] 
* CE 26: eval_gdev_prn_copy_scan_lines_1(V_y,V_size,V_1,B) = 0+ eval_gdev_prn_copy_scan_lines_bb2_in(V_y,C,B):2
     [C>=1,V_size=0] 

### Cost equations --> "Loop" of eval_gdev_prn_copy_scan_lines_1/4 
* CEs [17,18] --> Loop 16 
* CEs [19,20] --> Loop 17 
* CEs [21,22] --> Loop 18 
* CEs [23,24] --> Loop 19 
* CEs [25,26] --> Loop 20 

#### Loops of eval_gdev_prn_copy_scan_lines_1/4 
* Loop 16: eval_gdev_prn_copy_scan_lines_1(V_y,V_size,V_1,B) [V_1>=1,V_size>=1] 
* Loop 17: eval_gdev_prn_copy_scan_lines_1(V_y,V_size,V_1,B) [V_size>=1,0>=V_1+1] 
* Loop 18: eval_gdev_prn_copy_scan_lines_1(V_y,V_size,V_1,B) [V_1>=1,0>=V_size+1] 
* Loop 19: eval_gdev_prn_copy_scan_lines_1(V_y,V_size,V_1,B) [0>=V_1+1,0>=V_size+1] 
* Loop 20: eval_gdev_prn_copy_scan_lines_1(V_y,V_size,V_1,B) [V_size=0] 

### Ranking functions of CR eval_gdev_prn_copy_scan_lines_1(V_y,V_size,V_1,B) 

#### Partial ranking functions of CR eval_gdev_prn_copy_scan_lines_1(V_y,V_size,V_1,B) 


### Resulting Chains:eval_gdev_prn_copy_scan_lines_1(V_y,V_size,V_1,B) 
* [20]
* [19]
* [18]
* [17]
* [16]


### Merging Chains  eval_gdev_prn_copy_scan_lines_1/4 into  External patterns of execution 
* [[20]] --> 1 
* [[19]] --> 2 
* [[18]] --> 3 
* [[17]] --> 4 
* [[16]] --> 5 


### Specialization of cost equations eval_gdev_prn_copy_scan_lines_start/3 
* CE 2 is refined into CE [27,28,29,30,31] 


#### Refined cost equations eval_gdev_prn_copy_scan_lines_start/3 
* CE 27: eval_gdev_prn_copy_scan_lines_start(V_y,V_size,B) = 0+ eval_gdev_prn_copy_scan_lines_1(V_y,C,D,B):1
     [C=0,V_size=0] 
* CE 28: eval_gdev_prn_copy_scan_lines_start(V_y,V_size,B) = 0+ eval_gdev_prn_copy_scan_lines_1(V_y,V_size,C,B):2
     [0>=C+1,0>=V_size+1] 
* CE 29: eval_gdev_prn_copy_scan_lines_start(V_y,V_size,B) = 0+ eval_gdev_prn_copy_scan_lines_1(V_y,V_size,C,B):3
     [C>=1,0>=V_size+1] 
* CE 30: eval_gdev_prn_copy_scan_lines_start(V_y,V_size,B) = 0+ eval_gdev_prn_copy_scan_lines_1(V_y,V_size,C,B):4
     [V_size>=1,0>=C+1] 
* CE 31: eval_gdev_prn_copy_scan_lines_start(V_y,V_size,B) = 0+ eval_gdev_prn_copy_scan_lines_1(V_y,V_size,C,B):5
     [C>=1,V_size>=1] 

### Cost equations --> "Loop" of eval_gdev_prn_copy_scan_lines_start/3 
* CEs [30,31] --> Loop 21 
* CEs [28,29] --> Loop 22 
* CEs [27] --> Loop 23 

#### Loops of eval_gdev_prn_copy_scan_lines_start/3 
* Loop 21: eval_gdev_prn_copy_scan_lines_start(V_y,V_size,B) [V_size>=1] 
* Loop 22: eval_gdev_prn_copy_scan_lines_start(V_y,V_size,B) [0>=V_size+1] 
* Loop 23: eval_gdev_prn_copy_scan_lines_start(V_y,V_size,B) [V_size=0] 

### Ranking functions of CR eval_gdev_prn_copy_scan_lines_start(V_y,V_size,B) 

#### Partial ranking functions of CR eval_gdev_prn_copy_scan_lines_start(V_y,V_size,B) 


### Resulting Chains:eval_gdev_prn_copy_scan_lines_start(V_y,V_size,B) 
* [23]
* [22]
* [21]


### Merging Chains  eval_gdev_prn_copy_scan_lines_start/3 into  External patterns of execution 
* [[23]] --> 1 
* [[22]] --> 2 
* [[21]] --> 3 


Computing Bounds
=====================================

#### Cost of loops [11] 

 * loop 11:eval_gdev_prn_copy_scan_lines_bb3_in(V_y,V_10,V_i_0,B) -> [eval_gdev_prn_copy_scan_lines_bb3_in(V_y',V_10',V_i_0',B')] 
1
#### Cost of phase [11]:eval_gdev_prn_copy_scan_lines_bb3_in(V_y,V_10,V_i_0,B) -> [eval_gdev_prn_copy_scan_lines_bb3_in(V_y',V_10',V_i_0',B')] 
1*it(11)+0
  Such that:it(11) =< V_10-V_i_0
it(11) =< V_10-V_i_0-V_10'+V_i_0'

#### Cost of phase [11]:eval_gdev_prn_copy_scan_lines_bb3_in(V_y,V_10,V_i_0,B) -> [eval_gdev_prn_copy_scan_lines_bb3_in(V_y',V_10',V_i_0',B')] 
1*it(11)+0
  Such that:it(11) =< V_10-V_i_0
it(11) =< V_10-V_i_0-V_10'+V_i_0'

#### Cost of chains of eval_gdev_prn_copy_scan_lines_bb3_in(V_y,V_10,V_i_0,B):
* Chain [[11],13]: 1*it(11)+0
  Such that:it(11) =< V_10-V_i_0

  with precondition: [B=2,V_i_0>=0,V_10>=V_i_0+1] 

* Chain [[11],12]: 1*it(11)+0
  Such that:it(11) =< V_10-V_i_0

  with precondition: [B=2,V_i_0>=0,V_10>=V_i_0+2] 

* Chain [13]: 0
  with precondition: [B=2,V_i_0>=0,V_i_0>=V_10] 

* Chain [12]: 0
  with precondition: [B=2,V_i_0>=0,V_10>=V_i_0+1] 


#### Cost of chains of eval_gdev_prn_copy_scan_lines_bb2_in(V_y,V_10,B):
* Chain [15]: 1
  with precondition: [0>=V_10] 

* Chain [14]: 2*s(4)+1
  Such that:s(3) =< V_10
s(4) =< s(3)

  with precondition: [V_10>=1] 


#### Cost of chains of eval_gdev_prn_copy_scan_lines_1(V_y,V_size,V_1,B):
* Chain [20]: 1*aux(2)+0
  with precondition: [V_size=0] 

* Chain [19]: 1*aux(3)+0
  with precondition: [0>=V_size+1,0>=V_1+1] 

* Chain [18]: 1*aux(4)+0
  with precondition: [0>=V_size+1,V_1>=1] 

* Chain [17]: 1*aux(5)+0
  with precondition: [0>=V_1+1,V_size>=1] 

* Chain [16]: 1*aux(6)+0
  with precondition: [V_size>=1,V_1>=1] 


#### Cost of chains of eval_gdev_prn_copy_scan_lines_start(V_y,V_size,B):
* Chain [23]: 1*s(15)+0
  with precondition: [V_size=0] 

* Chain [22]: 1*aux(7)+0
  with precondition: [0>=V_size+1] 

* Chain [21]: 1*aux(8)+0
  with precondition: [V_size>=1] 


Closed-form bounds of eval_gdev_prn_copy_scan_lines_start(V_y,V_size,B): 
-------------------------------------
* Chain [23] with precondition: [V_size=0] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [22] with precondition: [0>=V_size+1] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [21] with precondition: [V_size>=1] 
    - Upper bound: inf 
    - Complexity: infinity 

### Maximum cost of eval_gdev_prn_copy_scan_lines_start(V_y,V_size,B): inf 
Asymptotic class: infinity 

Time statistics: 
-------------------------------------
* Partial evaluation computed in 16 ms.
* Invariants computed in 11 ms.
   - Backward Invariants 7 ms.
   - Transitive Invariants 1 ms.
* Refinement performed in 28 ms.
* Termination proved in 2 ms.
* Upper bounds computed in 20 ms.
   - Equation cost structures 13 ms.
   - Phase cost structures 2 ms.
   - Chain cost structures 5 ms.
   - Solving cost expressions 0 ms.
* Total analysis performed in 97 ms.


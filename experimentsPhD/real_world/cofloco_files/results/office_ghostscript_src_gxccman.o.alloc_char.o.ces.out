Warning: Ignored call to eval_alloc_char_stop/1 in equation eval_alloc_char_bb11_in/1 

Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. non_recursive  : [eval_alloc_char_bb11_in/1]
1. non_recursive  : [eval_alloc_char_20/1]
2. non_recursive  : [eval_alloc_char_19/1]
3. non_recursive  : [eval_alloc_char_36/1]
4. non_recursive  : [eval_alloc_char_35/2]
5. non_recursive  : [eval_alloc_char_bb10_in/2]
6. non_recursive  : [eval_alloc_char_22/2]
7. non_recursive  : [eval_alloc_char_21/3]
8. non_recursive  : [eval_alloc_char_18/3]
9. non_recursive  : [eval_alloc_char_17/3]
10. non_recursive  : [eval_alloc_char_16/3]
11. non_recursive  : [eval_alloc_char_15/3]
12. recursive  : [eval_alloc_char_32/3,eval_alloc_char_33/3,eval_alloc_char_bb8_in/3]
13. non_recursive  : [loop_cont_eval_alloc_char_bb8_in/3]
14. non_recursive  : [eval_alloc_char_1/2]
15. non_recursive  : [eval_alloc_char_0/2]
16. non_recursive  : [eval_alloc_char_bb0_in/2]
17. non_recursive  : [eval_alloc_char_start/2]

#### Obtained direct recursion through partial evaluation 
0. SCC is completely evaluated into other SCCs
1. SCC is completely evaluated into other SCCs
2. SCC is completely evaluated into other SCCs
3. SCC is completely evaluated into other SCCs
4. SCC is completely evaluated into other SCCs
5. SCC is completely evaluated into other SCCs
6. SCC is completely evaluated into other SCCs
7. SCC is completely evaluated into other SCCs
8. SCC is partially evaluated into eval_alloc_char_18/3
9. SCC is completely evaluated into other SCCs
10. SCC is partially evaluated into eval_alloc_char_16/3
11. SCC is completely evaluated into other SCCs
12. SCC is partially evaluated into eval_alloc_char_bb8_in/3
13. SCC is partially evaluated into loop_cont_eval_alloc_char_bb8_in/3
14. SCC is partially evaluated into eval_alloc_char_1/2
15. SCC is completely evaluated into other SCCs
16. SCC is completely evaluated into other SCCs
17. SCC is partially evaluated into eval_alloc_char_start/2

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations eval_alloc_char_18/3 
* CE 13 is refined into CE [14] 


#### Refined cost equations eval_alloc_char_18/3 
* CE 14: eval_alloc_char_18(V_icdsize,V__,B) = 0
     [] 

### Cost equations --> "Loop" of eval_alloc_char_18/3 
* CEs [14] --> Loop 10 

#### Loops of eval_alloc_char_18/3 
* Loop 10: eval_alloc_char_18(V_icdsize,V__,B) [] 

### Ranking functions of CR eval_alloc_char_18(V_icdsize,V__,B) 

#### Partial ranking functions of CR eval_alloc_char_18(V_icdsize,V__,B) 


### Resulting Chains:eval_alloc_char_18(V_icdsize,V__,B) 
* [10]


### Merging Chains  eval_alloc_char_18/3 into  External patterns of execution 
* [[10]] --> 1 


### Specialization of cost equations eval_alloc_char_16/3 
* CE 6 is refined into CE [15] 
* CE 7 is refined into CE [16] 


#### Refined cost equations eval_alloc_char_16/3 
* CE 15: eval_alloc_char_16(V_icdsize,V__,B) = 0
     [] 
* CE 16: eval_alloc_char_16(V_icdsize,V__,B) = 0+ eval_alloc_char_18(V_icdsize,V__,B):1
     [] 

### Cost equations --> "Loop" of eval_alloc_char_16/3 
* CEs [15,16] --> Loop 11 

#### Loops of eval_alloc_char_16/3 
* Loop 11: eval_alloc_char_16(V_icdsize,V__,B) [] 

### Ranking functions of CR eval_alloc_char_16(V_icdsize,V__,B) 

#### Partial ranking functions of CR eval_alloc_char_16(V_icdsize,V__,B) 


### Resulting Chains:eval_alloc_char_16(V_icdsize,V__,B) 
* [11]


### Merging Chains  eval_alloc_char_16/3 into  External patterns of execution 
* [[11]] --> 1 


### Specialization of cost equations eval_alloc_char_bb8_in/3 
* CE 10 is refined into CE [17] 
* CE 9 is refined into CE [18] 
* CE 8 is refined into CE [19] 


#### Refined cost equations eval_alloc_char_bb8_in/3 
* CE 17: eval_alloc_char_bb8_in(A,B,A) = 0
     [B=3] 
* CE 18: eval_alloc_char_bb8_in(V_icdsize,B,C) = 0
     [B=2] 
* CE 19: eval_alloc_char_bb8_in(V_icdsize,B,C) = 1+ eval_alloc_char_bb8_in(V_icdsize,B,C)
     [] 

### Cost equations --> "Loop" of eval_alloc_char_bb8_in/3 
* CEs [19] --> Loop 12 
* CEs [17] --> Loop 13 
* CEs [18] --> Loop 14 

#### Loops of eval_alloc_char_bb8_in/3 
* Loop 12: eval_alloc_char_bb8_in(V_icdsize,B,C)->  eval_alloc_char_bb8_in(V_icdsize,B,C)
                  [] 
* Loop 13: eval_alloc_char_bb8_in(A,B,A) [B=3] 
* Loop 14: eval_alloc_char_bb8_in(V_icdsize,B,C) [B=2] 

### Ranking functions of CR eval_alloc_char_bb8_in(V_icdsize,B,C) 

#### Partial ranking functions of CR eval_alloc_char_bb8_in(V_icdsize,B,C) 


### Resulting Chains:eval_alloc_char_bb8_in(V_icdsize,B,C) 
* [[12]]...
* [[12],14]
* [[12],13]
* [14]
* [13]


### Merging Chains  eval_alloc_char_bb8_in/3 into  External patterns of execution 
* [[14],[14,[12]]] --> 1 
* [[13],[13,[12]]] --> 2 
* [[[12]]] --> 3 


### Specialization of cost equations loop_cont_eval_alloc_char_bb8_in/3 
* CE 12 is refined into CE [20] 
* CE 11 is refined into CE [21] 


#### Refined cost equations loop_cont_eval_alloc_char_bb8_in/3 
* CE 20: loop_cont_eval_alloc_char_bb8_in(C,A,B) = 0
     [C=3] 
* CE 21: loop_cont_eval_alloc_char_bb8_in(C,A,B) = 0
     [C=2] 

### Cost equations --> "Loop" of loop_cont_eval_alloc_char_bb8_in/3 
* CEs [20] --> Loop 15 
* CEs [21] --> Loop 16 

#### Loops of loop_cont_eval_alloc_char_bb8_in/3 
* Loop 15: loop_cont_eval_alloc_char_bb8_in(C,A,B) [C=3] 
* Loop 16: loop_cont_eval_alloc_char_bb8_in(C,A,B) [C=2] 

### Ranking functions of CR loop_cont_eval_alloc_char_bb8_in(C,A,B) 

#### Partial ranking functions of CR loop_cont_eval_alloc_char_bb8_in(C,A,B) 


### Resulting Chains:loop_cont_eval_alloc_char_bb8_in(C,A,B) 
* [16]
* [15]


### Merging Chains  loop_cont_eval_alloc_char_bb8_in/3 into  External patterns of execution 
* [[16]] --> 1 
* [[15]] --> 2 


### Specialization of cost equations eval_alloc_char_1/2 
* CE 3 is refined into CE [22] 
* CE 4 is refined into CE [23] 
* CE 5 is refined into CE [24,25,26] 


#### Refined cost equations eval_alloc_char_1/2 
* CE 22: eval_alloc_char_1(V_icdsize,B) = 0
     [] 
* CE 23: eval_alloc_char_1(V_icdsize,B) = 0+ eval_alloc_char_16(V_icdsize,C,B):1
     [] 
* CE 24: eval_alloc_char_1(V_icdsize,B) = 1+ eval_alloc_char_bb8_in(V_icdsize,C,D):1+ loop_cont_eval_alloc_char_bb8_in(E,D,B):1
     [E=2,C=2] 
* CE 25: eval_alloc_char_1(V_icdsize,B) = 1+ eval_alloc_char_bb8_in(V_icdsize,C,V_icdsize):2+ loop_cont_eval_alloc_char_bb8_in(D,V_icdsize,B):2
     [D=3,C=3] 
* CE 26: eval_alloc_char_1(V_icdsize,B) = 1+ eval_alloc_char_bb8_in(V_icdsize,C,D):3
     [] 

### Cost equations --> "Loop" of eval_alloc_char_1/2 
* CEs [26] --> Loop 17 
* CEs [22,23,24,25] --> Loop 18 

#### Loops of eval_alloc_char_1/2 
* Loop 17: eval_alloc_char_1(V_icdsize,B) [] 
* Loop 18: eval_alloc_char_1(V_icdsize,B) [] 

### Ranking functions of CR eval_alloc_char_1(V_icdsize,B) 

#### Partial ranking functions of CR eval_alloc_char_1(V_icdsize,B) 


### Resulting Chains:eval_alloc_char_1(V_icdsize,B) 
* [18]
* [17]...


### Merging Chains  eval_alloc_char_1/2 into  External patterns of execution 
* [[18]] --> 1 
* [[17]] --> 2 


### Specialization of cost equations eval_alloc_char_start/2 
* CE 2 is refined into CE [27,28] 


#### Refined cost equations eval_alloc_char_start/2 
* CE 27: eval_alloc_char_start(V_icdsize,B) = 0+ eval_alloc_char_1(V_icdsize,B):1
     [] 
* CE 28: eval_alloc_char_start(V_icdsize,B) = 0+ eval_alloc_char_1(V_icdsize,B):2
     [] 

### Cost equations --> "Loop" of eval_alloc_char_start/2 
* CEs [28] --> Loop 19 
* CEs [27] --> Loop 20 

#### Loops of eval_alloc_char_start/2 
* Loop 19: eval_alloc_char_start(V_icdsize,B) [] 
* Loop 20: eval_alloc_char_start(V_icdsize,B) [] 

### Ranking functions of CR eval_alloc_char_start(V_icdsize,B) 

#### Partial ranking functions of CR eval_alloc_char_start(V_icdsize,B) 


### Resulting Chains:eval_alloc_char_start(V_icdsize,B) 
* [20]
* [19]...


### Merging Chains  eval_alloc_char_start/2 into  External patterns of execution 
* [[20]] --> 1 
* [[19]] --> 2 


Computing Bounds
=====================================

#### Cost of chains of eval_alloc_char_18(V_icdsize,V__,B):
* Chain [10]: 0
  with precondition: [] 


#### Cost of chains of eval_alloc_char_16(V_icdsize,V__,B):
* Chain [11]: 0
  with precondition: [] 


#### Cost of loops [12] 

 * loop 12:eval_alloc_char_bb8_in(V_icdsize,B,C) -> [eval_alloc_char_bb8_in(V_icdsize',B',C')] 
1
#### Cost of phase [12]:eval_alloc_char_bb8_in(V_icdsize,B,C) -> [eval_alloc_char_bb8_in(V_icdsize',B',C')] 
1*it(12)+0
#### Cost of phase [12]:eval_alloc_char_bb8_in(V_icdsize,B,C) -> [eval_alloc_char_bb8_in(V_icdsize',B',C')] 
1*it(12)+0
#### Cost of phase [12]:eval_alloc_char_bb8_in(V_icdsize,B,C) -> [eval_alloc_char_bb8_in(V_icdsize',B',C')] 
1*it(12)+0
#### Cost of chains of eval_alloc_char_bb8_in(V_icdsize,B,C):
* Chain [[12]]...: 1*it(12)+0
  with precondition: [] 

* Chain [[12],14]: 1*it(12)+0
  with precondition: [B=2] 

* Chain [[12],13]: 1*it(12)+0
  with precondition: [B=3,V_icdsize=C] 

* Chain [14]: 0
  with precondition: [B=2] 

* Chain [13]: 0
  with precondition: [B=3,C=V_icdsize] 


#### Cost of chains of loop_cont_eval_alloc_char_bb8_in(C,A,B):
* Chain [16]: 0
  with precondition: [C=2] 

* Chain [15]: 0
  with precondition: [C=3] 


#### Cost of chains of eval_alloc_char_1(V_icdsize,B):
* Chain [18]: 1*aux(3)+0
  with precondition: [] 

* Chain [17]...: 1*s(5)+1
  with precondition: [] 


#### Cost of chains of eval_alloc_char_start(V_icdsize,B):
* Chain [20]: 1*s(6)+0
  with precondition: [] 

* Chain [19]...: 1*s(7)+1
  with precondition: [] 


Closed-form bounds of eval_alloc_char_start(V_icdsize,B): 
-------------------------------------
* Chain [20] with precondition: [] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [19]... with precondition: [] 
    - Upper bound: inf 
    - Complexity: infinity 

### Maximum cost of eval_alloc_char_start(V_icdsize,B): inf 
Asymptotic class: infinity 

Time statistics: 
-------------------------------------
* Partial evaluation computed in 16 ms.
* Invariants computed in 6 ms.
   - Backward Invariants 3 ms.
   - Transitive Invariants 1 ms.
* Refinement performed in 8 ms.
* Termination proved in 1 ms.
* Upper bounds computed in 9 ms.
   - Equation cost structures 5 ms.
   - Phase cost structures 1 ms.
   - Chain cost structures 3 ms.
   - Solving cost expressions 0 ms.
* Total analysis performed in 61 ms.


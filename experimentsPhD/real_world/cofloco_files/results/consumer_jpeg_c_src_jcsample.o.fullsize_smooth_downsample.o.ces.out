Warning: Ignored call to eval_fullsize_smooth_downsample_stop/1 in equation loop_cont_eval_fullsize_smooth_downsample_bb1_in/2 

Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. recursive  : [eval_fullsize_smooth_downsample_bb3_in/6]
1. recursive  : [eval_fullsize_smooth_downsample_bb1_in/3,loop_cont_eval_fullsize_smooth_downsample_bb3_in/4]
2. non_recursive  : [loop_cont_eval_fullsize_smooth_downsample_bb1_in/2]
3. non_recursive  : [eval_fullsize_smooth_downsample_6/2]
4. non_recursive  : [eval_fullsize_smooth_downsample_5/4]
5. non_recursive  : [eval_fullsize_smooth_downsample_bb0_in/1]
6. non_recursive  : [eval_fullsize_smooth_downsample_start/1]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into eval_fullsize_smooth_downsample_bb3_in/6
1. SCC is partially evaluated into eval_fullsize_smooth_downsample_bb1_in/3
2. SCC is completely evaluated into other SCCs
3. SCC is partially evaluated into eval_fullsize_smooth_downsample_6/2
4. SCC is completely evaluated into other SCCs
5. SCC is completely evaluated into other SCCs
6. SCC is partially evaluated into eval_fullsize_smooth_downsample_start/1

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations eval_fullsize_smooth_downsample_bb3_in/6 
* CE 7 is refined into CE [8] 
* CE 6 is refined into CE [9] 


#### Refined cost equations eval_fullsize_smooth_downsample_bb3_in/6 
* CE 8: eval_fullsize_smooth_downsample_bb3_in(A,B,C,D,A,E) = 0
     [A>=C+2,0>=C,E=B+1,D=2] 
* CE 9: eval_fullsize_smooth_downsample_bb3_in(V_2,V_outrow_0,V_colctr_0,B,C,D) = 1+ eval_fullsize_smooth_downsample_bb3_in(V_2,V_outrow_0,E,F,C,D)
     [V_2>=V_colctr_0+2,V_colctr_0>=1,V_colctr_0=E+1,F=2,B=2] 

### Cost equations --> "Loop" of eval_fullsize_smooth_downsample_bb3_in/6 
* CEs [9] --> Loop 7 
* CEs [8] --> Loop 8 

#### Loops of eval_fullsize_smooth_downsample_bb3_in/6 
* Loop 7: eval_fullsize_smooth_downsample_bb3_in(V_2,V_outrow_0,V_colctr_0,B,C,D)->  eval_fullsize_smooth_downsample_bb3_in(V_2,V_outrow_0,V_colctr_0',B',C,D)
                  [V_2>=V_colctr_0+2,V_colctr_0>=1,V_colctr_0=V_colctr_0'+1,B'=2,B=2] 
* Loop 8: eval_fullsize_smooth_downsample_bb3_in(A,B,C,D,A,E) [A>=C+2,0>=C,B+1=E,D=2] 

### Ranking functions of CR eval_fullsize_smooth_downsample_bb3_in(V_2,V_outrow_0,V_colctr_0,B,C,D) 
* RF of phase [7]: [V_colctr_0]

#### Partial ranking functions of CR eval_fullsize_smooth_downsample_bb3_in(V_2,V_outrow_0,V_colctr_0,B,C,D) 
* Partial RF of phase [7]:
  - RF of loop [7:1]:
    V_colctr_0


### Resulting Chains:eval_fullsize_smooth_downsample_bb3_in(V_2,V_outrow_0,V_colctr_0,B,C,D) 
* [[7],8]
* [8]


### Merging Chains  eval_fullsize_smooth_downsample_bb3_in/6 into  External patterns of execution 
* [[8]] --> 1 
* [[8,[7]]] --> 2 


### Specialization of cost equations eval_fullsize_smooth_downsample_bb1_in/3 
* CE 5 is refined into CE [10] 
* CE 4 is refined into CE [11,12] 


#### Refined cost equations eval_fullsize_smooth_downsample_bb1_in/3 
* CE 10: eval_fullsize_smooth_downsample_bb1_in(V_2,V_outrow_0,B) = 0
     [B=3] 
* CE 11: eval_fullsize_smooth_downsample_bb1_in(V_2,V_outrow_0,B) = 2+ eval_fullsize_smooth_downsample_bb3_in(V_2,C,D,E,V_2,F):1+ eval_fullsize_smooth_downsample_bb1_in(V_2,F,G)
     [2>=V_2,V_2=D+2,F=C+1,F=V_outrow_0+1,G=3,E=2,B=3] 
* CE 12: eval_fullsize_smooth_downsample_bb1_in(V_2,V_outrow_0,B) = 2+ eval_fullsize_smooth_downsample_bb3_in(V_2,C,D,E,V_2,F):2+ eval_fullsize_smooth_downsample_bb1_in(V_2,F,G)
     [V_2>=3,V_2=D+2,F=C+1,F=V_outrow_0+1,G=3,E=2,B=3] 

### Cost equations --> "Loop" of eval_fullsize_smooth_downsample_bb1_in/3 
* CEs [12] --> Loop 9 
* CEs [11] --> Loop 10 
* CEs [10] --> Loop 11 

#### Loops of eval_fullsize_smooth_downsample_bb1_in/3 
* Loop 9: eval_fullsize_smooth_downsample_bb1_in(V_2,V_outrow_0,B)->  eval_fullsize_smooth_downsample_bb1_in(V_2,V_outrow_0',B')
                  [V_2>=3,V_outrow_0+1=V_outrow_0',B'=3,B=3] 
* Loop 10: eval_fullsize_smooth_downsample_bb1_in(V_2,V_outrow_0,B)->  eval_fullsize_smooth_downsample_bb1_in(V_2,V_outrow_0',B')
                  [2>=V_2,V_outrow_0+1=V_outrow_0',B'=3,B=3] 
* Loop 11: eval_fullsize_smooth_downsample_bb1_in(V_2,V_outrow_0,B) [B=3] 

### Ranking functions of CR eval_fullsize_smooth_downsample_bb1_in(V_2,V_outrow_0,B) 

#### Partial ranking functions of CR eval_fullsize_smooth_downsample_bb1_in(V_2,V_outrow_0,B) 


### Resulting Chains:eval_fullsize_smooth_downsample_bb1_in(V_2,V_outrow_0,B) 
* [[10]]...
* [[10],11]
* [[9]]...
* [[9],11]
* [11]


### Merging Chains  eval_fullsize_smooth_downsample_bb1_in/3 into  External patterns of execution 
* [[11],[11,[10]]] --> 1 
* [[11,[9]]] --> 2 
* [[[10]]] --> 3 
* [[[9]]] --> 4 


### Specialization of cost equations eval_fullsize_smooth_downsample_6/2 
* CE 3 is refined into CE [13,14,15,16] 


#### Refined cost equations eval_fullsize_smooth_downsample_6/2 
* CE 13: eval_fullsize_smooth_downsample_6(V_2,B) = 1+ eval_fullsize_smooth_downsample_bb1_in(V_2,C,D):1
     [D=3,C=0] 
* CE 14: eval_fullsize_smooth_downsample_6(V_2,B) = 1+ eval_fullsize_smooth_downsample_bb1_in(V_2,C,D):2
     [V_2>=3,D=3,C=0] 
* CE 15: eval_fullsize_smooth_downsample_6(V_2,B) = 1+ eval_fullsize_smooth_downsample_bb1_in(V_2,C,D):3
     [2>=V_2,D=3,C=0] 
* CE 16: eval_fullsize_smooth_downsample_6(V_2,B) = 1+ eval_fullsize_smooth_downsample_bb1_in(V_2,C,D):4
     [V_2>=3,D=3,C=0] 

### Cost equations --> "Loop" of eval_fullsize_smooth_downsample_6/2 
* CEs [16] --> Loop 12 
* CEs [15] --> Loop 13 
* CEs [13,14] --> Loop 14 

#### Loops of eval_fullsize_smooth_downsample_6/2 
* Loop 12: eval_fullsize_smooth_downsample_6(V_2,B) [V_2>=3] 
* Loop 13: eval_fullsize_smooth_downsample_6(V_2,B) [2>=V_2] 
* Loop 14: eval_fullsize_smooth_downsample_6(V_2,B) [] 

### Ranking functions of CR eval_fullsize_smooth_downsample_6(V_2,B) 

#### Partial ranking functions of CR eval_fullsize_smooth_downsample_6(V_2,B) 


### Resulting Chains:eval_fullsize_smooth_downsample_6(V_2,B) 
* [14]
* [13]...
* [12]...


### Merging Chains  eval_fullsize_smooth_downsample_6/2 into  External patterns of execution 
* [[14]] --> 1 
* [[13]] --> 2 
* [[12]] --> 3 


### Specialization of cost equations eval_fullsize_smooth_downsample_start/1 
* CE 2 is refined into CE [17,18,19] 


#### Refined cost equations eval_fullsize_smooth_downsample_start/1 
* CE 17: eval_fullsize_smooth_downsample_start(B) = 0+ eval_fullsize_smooth_downsample_6(C,B):1
     [] 
* CE 18: eval_fullsize_smooth_downsample_start(B) = 0+ eval_fullsize_smooth_downsample_6(C,B):2
     [2>=C] 
* CE 19: eval_fullsize_smooth_downsample_start(B) = 0+ eval_fullsize_smooth_downsample_6(C,B):3
     [C>=3] 

### Cost equations --> "Loop" of eval_fullsize_smooth_downsample_start/1 
* CEs [18,19] --> Loop 15 
* CEs [17] --> Loop 16 

#### Loops of eval_fullsize_smooth_downsample_start/1 
* Loop 15: eval_fullsize_smooth_downsample_start(B) [] 
* Loop 16: eval_fullsize_smooth_downsample_start(B) [] 

### Ranking functions of CR eval_fullsize_smooth_downsample_start(B) 

#### Partial ranking functions of CR eval_fullsize_smooth_downsample_start(B) 


### Resulting Chains:eval_fullsize_smooth_downsample_start(B) 
* [16]
* [15]...


### Merging Chains  eval_fullsize_smooth_downsample_start/1 into  External patterns of execution 
* [[16]] --> 1 
* [[15]] --> 2 


Computing Bounds
=====================================

#### Cost of loops [7] 

 * loop 7:eval_fullsize_smooth_downsample_bb3_in(V_2,V_outrow_0,V_colctr_0,B,C,D) -> [eval_fullsize_smooth_downsample_bb3_in(V_2',V_outrow_0',V_colctr_0',B',C',D')] 
1
#### Cost of phase [7]:eval_fullsize_smooth_downsample_bb3_in(V_2,V_outrow_0,V_colctr_0,B,C,D) -> [eval_fullsize_smooth_downsample_bb3_in(V_2',V_outrow_0',V_colctr_0',B',C',D')] 
1*it(7)+0
  Such that:it(7) =< V_colctr_0
it(7) =< V_colctr_0-V_colctr_0'

#### Cost of chains of eval_fullsize_smooth_downsample_bb3_in(V_2,V_outrow_0,V_colctr_0,B,C,D):
* Chain [[7],8]: 1*it(7)+0
  Such that:it(7) =< V_colctr_0

  with precondition: [B=2,V_2=C,V_outrow_0+1=D,V_colctr_0>=1,V_2>=V_colctr_0+2] 

* Chain [8]: 0
  with precondition: [B=2,D=V_outrow_0+1,V_2=C,0>=V_colctr_0,V_2>=V_colctr_0+2] 


#### Cost of loops [10] 

 * loop 10:eval_fullsize_smooth_downsample_bb1_in(V_2,V_outrow_0,B) -> [eval_fullsize_smooth_downsample_bb1_in(V_2',V_outrow_0',B')] 
2
#### Cost of phase [10]:eval_fullsize_smooth_downsample_bb1_in(V_2,V_outrow_0,B) -> [eval_fullsize_smooth_downsample_bb1_in(V_2',V_outrow_0',B')] 
2*it(10)+0
#### Cost of phase [10]:eval_fullsize_smooth_downsample_bb1_in(V_2,V_outrow_0,B) -> [eval_fullsize_smooth_downsample_bb1_in(V_2',V_outrow_0',B')] 
2*it(10)+0
#### Cost of loops [9] 

 * loop 9:eval_fullsize_smooth_downsample_bb1_in(V_2,V_outrow_0,B) -> [eval_fullsize_smooth_downsample_bb1_in(V_2',V_outrow_0',B')] 
1*s(2)+2
  Such that:s(2) =< V_2'

#### Cost of phase [9]:eval_fullsize_smooth_downsample_bb1_in(V_2,V_outrow_0,B) -> [eval_fullsize_smooth_downsample_bb1_in(V_2',V_outrow_0',B')] 
2*it(9)+1*s(3)+0
#### Cost of phase [9]:eval_fullsize_smooth_downsample_bb1_in(V_2,V_outrow_0,B) -> [eval_fullsize_smooth_downsample_bb1_in(V_2',V_outrow_0',B')] 
2*it(9)+1*s(3)+0
#### Cost of chains of eval_fullsize_smooth_downsample_bb1_in(V_2,V_outrow_0,B):
* Chain [[10]]...: 2*it(10)+0
  with precondition: [2>=V_2,B=3] 

* Chain [[10],11]: 2*it(10)+0
  with precondition: [B=3,2>=V_2,V_outrow_0>=0] 

* Chain [[9]]...: 3*it(9)+0
  with precondition: [V_2>=3,B=3] 

* Chain [[9],11]: 3*it(9)+0
  with precondition: [B=3,V_2>=3,V_outrow_0>=0] 

* Chain [11]: 0
  with precondition: [B=3,V_outrow_0>=0] 


#### Cost of chains of eval_fullsize_smooth_downsample_6(V_2,B):
* Chain [14]: 1*aux(3)+0
  with precondition: [] 

* Chain [13]...: 2*s(7)+1
  with precondition: [2>=V_2] 

* Chain [12]...: 3*s(8)+1
  with precondition: [V_2>=3] 


#### Cost of chains of eval_fullsize_smooth_downsample_start(B):
* Chain [16]: 1*s(9)+0
  with precondition: [] 

* Chain [15]...: 1*aux(4)+0
  with precondition: [] 


Closed-form bounds of eval_fullsize_smooth_downsample_start(B): 
-------------------------------------
* Chain [16] with precondition: [] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [15]... with precondition: [] 
    - Upper bound: inf 
    - Complexity: infinity 

### Maximum cost of eval_fullsize_smooth_downsample_start(B): inf 
Asymptotic class: infinity 

Time statistics: 
-------------------------------------
* Partial evaluation computed in 20 ms.
* Invariants computed in 58 ms.
   - Backward Invariants 24 ms.
   - Transitive Invariants 15 ms.
* Refinement performed in 75 ms.
* Termination proved in 13 ms.
* Upper bounds computed in 85 ms.
   - Equation cost structures 22 ms.
   - Phase cost structures 41 ms.
   - Chain cost structures 28 ms.
   - Solving cost expressions 1 ms.
* Total analysis performed in 297 ms.


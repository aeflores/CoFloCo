WARNING: Excluded non-linear constraints:[O=L*B]
WARNING: Excluded non-linear constraints:[O=L*B]
WARNING: Excluded non-linear constraints:[O=L*B]
WARNING: Excluded non-linear constraints:[O=L*B]
WARNING: Excluded non-linear constraints:[O=L*B]
WARNING: Excluded non-linear constraints:[O=L*B]
Warning: Ignored call to eval_phone_to_elm_stop/1 in equation eval_phone_to_elm__critedge_in/1 

Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. recursive  : [eval_phone_to_elm_18/11,eval_phone_to_elm_19/11,eval_phone_to_elm_30/13,eval_phone_to_elm_31/13,eval_phone_to_elm_32/13,eval_phone_to_elm_33/13,eval_phone_to_elm_bb6_in/9]
1. recursive  : [eval_phone_to_elm_39/6,eval_phone_to_elm_40/6,eval_phone_to_elm_8/4,eval_phone_to_elm_9/4,eval_phone_to_elm_NewDefault_in/5,eval_phone_to_elm_bb2_in/4,loop_cont_eval_phone_to_elm_bb6_in/5]
2. non_recursive  : [eval_phone_to_elm__critedge_in/1]
3. non_recursive  : [loop_cont_eval_phone_to_elm_bb2_in/2]
4. non_recursive  : [eval_phone_to_elm_4/3]
5. non_recursive  : [eval_phone_to_elm_3/3]
6. non_recursive  : [eval_phone_to_elm_bb0_in/3]
7. non_recursive  : [eval_phone_to_elm_start/3]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into eval_phone_to_elm_bb6_in/9
1. SCC is partially evaluated into eval_phone_to_elm_bb2_in/4
2. SCC is completely evaluated into other SCCs
3. SCC is completely evaluated into other SCCs
4. SCC is partially evaluated into eval_phone_to_elm_4/3
5. SCC is completely evaluated into other SCCs
6. SCC is partially evaluated into eval_phone_to_elm_bb0_in/3
7. SCC is partially evaluated into eval_phone_to_elm_start/3

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations eval_phone_to_elm_bb6_in/9 
* CE 14 is refined into CE [15] 
* CE 12 is refined into CE [16] 
* CE 13 is refined into CE [17] 


#### Refined cost equations eval_phone_to_elm_bb6_in/9 
* CE 15: eval_phone_to_elm_bb6_in(A,B,C,D,E,F,A,B,E) = 0
     [0>=D,F=2] 
* CE 16: eval_phone_to_elm_bb6_in(V_n,V__speed,V_stress_0,V_n1_0,V_stress_1,B,C,D,E) = 1+ eval_phone_to_elm_bb6_in(V_n,V__speed,V_stress_0,F,V_stress_1,G,C,D,E)
     [V_n1_0>=1,V_n1_0=F+1,G=2,B=2] 
* CE 17: eval_phone_to_elm_bb6_in(V_n,V__speed,V_stress_0,V_n1_0,V_stress_1,B,C,D,E) = 1+ eval_phone_to_elm_bb6_in(V_n,V__speed,V_stress_0,F,G,H,C,D,E)
     [V_n1_0>=1,V_n1_0=F+1,H=2,G=0,B=2] 

### Cost equations --> "Loop" of eval_phone_to_elm_bb6_in/9 
* CEs [16] --> Loop 12 
* CEs [17] --> Loop 13 
* CEs [15] --> Loop 14 

#### Loops of eval_phone_to_elm_bb6_in/9 
* Loop 12: eval_phone_to_elm_bb6_in(V_n,V__speed,V_stress_0,V_n1_0,V_stress_1,B,C,D,E)->  eval_phone_to_elm_bb6_in(V_n,V__speed,V_stress_0,V_n1_0',V_stress_1,B',C,D,E)
                  [V_n1_0>=1,V_n1_0=V_n1_0'+1,B'=2,B=2] 
* Loop 13: eval_phone_to_elm_bb6_in(V_n,V__speed,V_stress_0,V_n1_0,V_stress_1,B,C,D,E)->  eval_phone_to_elm_bb6_in(V_n,V__speed,V_stress_0,V_n1_0',V_stress_1',B',C,D,E)
                  [V_n1_0>=1,V_n1_0=V_n1_0'+1,B'=2,V_stress_1'=0,B=2] 
* Loop 14: eval_phone_to_elm_bb6_in(A,B,C,D,E,F,A,B,E) [0>=D,F=2] 

### Ranking functions of CR eval_phone_to_elm_bb6_in(V_n,V__speed,V_stress_0,V_n1_0,V_stress_1,B,C,D,E) 
* RF of phase [12,13]: [V_n1_0]

#### Partial ranking functions of CR eval_phone_to_elm_bb6_in(V_n,V__speed,V_stress_0,V_n1_0,V_stress_1,B,C,D,E) 
* Partial RF of phase [12,13]:
  - RF of loop [12:1,13:1]:
    V_n1_0


### Resulting Chains:eval_phone_to_elm_bb6_in(V_n,V__speed,V_stress_0,V_n1_0,V_stress_1,B,C,D,E) 
* [[12,13],14]
* [14]


### Merging Chains  eval_phone_to_elm_bb6_in/9 into  External patterns of execution 
* [[14]] --> 1 
* [[14,[12,13]]] --> 2 


### Specialization of cost equations eval_phone_to_elm_bb2_in/4 
* CE 10 is refined into CE [18] 
* CE 5 is refined into CE [19] 
* CE 8 is refined into CE [20] 
* CE 6 is refined into CE [21] 
* CE 7 is refined into CE [22] 
* CE 9 is refined into CE [23,24] 


#### Refined cost equations eval_phone_to_elm_bb2_in/4 
* CE 18: eval_phone_to_elm_bb2_in(V_n,V__speed,V_stress_0,B) = 0
     [B=3] 
* CE 19: eval_phone_to_elm_bb2_in(V_n,V__speed,V_stress_0,B) = 1+ eval_phone_to_elm_bb2_in(V_n,V__speed,V_stress_0,C)
     [C=3,B=3] 
* CE 20: eval_phone_to_elm_bb2_in(V_n,V__speed,V_stress_0,B) = 1+ eval_phone_to_elm_bb2_in(V_n,V__speed,C,D)
     [D=3,C=3,B=3] 
* CE 21: eval_phone_to_elm_bb2_in(V_n,V__speed,V_stress_0,B) = 1+ eval_phone_to_elm_bb2_in(V_n,V__speed,C,D)
     [D=3,C=2,B=3] 
* CE 22: eval_phone_to_elm_bb2_in(V_n,V__speed,V_stress_0,B) = 1+ eval_phone_to_elm_bb2_in(V_n,V__speed,C,D)
     [D=3,C=1,B=3] 
* CE 23: eval_phone_to_elm_bb2_in(V_n,V__speed,V_stress_0,B) = 2+ eval_phone_to_elm_bb6_in(V_n,V__speed,V_stress_0,C,V_stress_0,D,V_n,V__speed,V_stress_0):1+ eval_phone_to_elm_bb2_in(V_n,V__speed,V_stress_0,E)
     [0>=C,E=3,D=2,B=3] 
* CE 24: eval_phone_to_elm_bb2_in(V_n,V__speed,V_stress_0,B) = 2+ eval_phone_to_elm_bb6_in(V_n,V__speed,V_stress_0,C,V_stress_0,D,V_n,V__speed,E):2+ eval_phone_to_elm_bb2_in(V_n,V__speed,E,F)
     [C>=1,F=3,D=2,B=3] 

### Cost equations --> "Loop" of eval_phone_to_elm_bb2_in/4 
* CEs [20] --> Loop 15 
* CEs [21] --> Loop 16 
* CEs [19,22,23,24] --> Loop 17 
* CEs [18] --> Loop 18 

#### Loops of eval_phone_to_elm_bb2_in/4 
* Loop 15: eval_phone_to_elm_bb2_in(V_n,V__speed,V_stress_0,B)->  eval_phone_to_elm_bb2_in(V_n,V__speed,V_stress_0',B')
                  [B'=3,V_stress_0'=3,B=3] 
* Loop 16: eval_phone_to_elm_bb2_in(V_n,V__speed,V_stress_0,B)->  eval_phone_to_elm_bb2_in(V_n,V__speed,V_stress_0',B')
                  [B'=3,V_stress_0'=2,B=3] 
* Loop 17: eval_phone_to_elm_bb2_in(V_n,V__speed,V_stress_0,B)->  eval_phone_to_elm_bb2_in(V_n,V__speed,V_stress_0',B')
                  [B'=3,B=3] 
* Loop 18: eval_phone_to_elm_bb2_in(V_n,V__speed,V_stress_0,B) [B=3] 

### Ranking functions of CR eval_phone_to_elm_bb2_in(V_n,V__speed,V_stress_0,B) 

#### Partial ranking functions of CR eval_phone_to_elm_bb2_in(V_n,V__speed,V_stress_0,B) 


### Resulting Chains:eval_phone_to_elm_bb2_in(V_n,V__speed,V_stress_0,B) 
* [[15,16,17]]...
* [[15,16,17],18]
* [18]


### Merging Chains  eval_phone_to_elm_bb2_in/4 into  External patterns of execution 
* [[18],[18,[15,16,17]]] --> 1 
* [[[15,16,17]]] --> 2 


### Specialization of cost equations eval_phone_to_elm_4/3 
* CE 11 is refined into CE [25,26] 


#### Refined cost equations eval_phone_to_elm_4/3 
* CE 25: eval_phone_to_elm_4(V_n,V__speed,B) = 1+ eval_phone_to_elm_bb2_in(V_n,V__speed,C,D):1
     [D=3,C=0] 
* CE 26: eval_phone_to_elm_4(V_n,V__speed,B) = 1+ eval_phone_to_elm_bb2_in(V_n,V__speed,C,D):2
     [D=3,C=0] 

### Cost equations --> "Loop" of eval_phone_to_elm_4/3 
* CEs [26] --> Loop 19 
* CEs [25] --> Loop 20 

#### Loops of eval_phone_to_elm_4/3 
* Loop 19: eval_phone_to_elm_4(V_n,V__speed,B) [] 
* Loop 20: eval_phone_to_elm_4(V_n,V__speed,B) [] 

### Ranking functions of CR eval_phone_to_elm_4(V_n,V__speed,B) 

#### Partial ranking functions of CR eval_phone_to_elm_4(V_n,V__speed,B) 


### Resulting Chains:eval_phone_to_elm_4(V_n,V__speed,B) 
* [20]
* [19]...


### Merging Chains  eval_phone_to_elm_4/3 into  External patterns of execution 
* [[20]] --> 1 
* [[19]] --> 2 


### Specialization of cost equations eval_phone_to_elm_bb0_in/3 
* CE 3 is refined into CE [27,28] 
* CE 4 is refined into CE [29,30] 


#### Refined cost equations eval_phone_to_elm_bb0_in/3 
* CE 27: eval_phone_to_elm_bb0_in(V_n,V__speed,B) = 1+ eval_phone_to_elm_bb2_in(V_n,V__speed,C,D):1
     [D=3,C=0] 
* CE 28: eval_phone_to_elm_bb0_in(V_n,V__speed,B) = 1+ eval_phone_to_elm_bb2_in(V_n,V__speed,C,D):2
     [D=3,C=0] 
* CE 29: eval_phone_to_elm_bb0_in(V_n,V__speed,B) = 0+ eval_phone_to_elm_4(V_n,V__speed,B):1
     [] 
* CE 30: eval_phone_to_elm_bb0_in(V_n,V__speed,B) = 0+ eval_phone_to_elm_4(V_n,V__speed,B):2
     [] 

### Cost equations --> "Loop" of eval_phone_to_elm_bb0_in/3 
* CEs [28,30] --> Loop 21 
* CEs [27,29] --> Loop 22 

#### Loops of eval_phone_to_elm_bb0_in/3 
* Loop 21: eval_phone_to_elm_bb0_in(V_n,V__speed,B) [] 
* Loop 22: eval_phone_to_elm_bb0_in(V_n,V__speed,B) [] 

### Ranking functions of CR eval_phone_to_elm_bb0_in(V_n,V__speed,B) 

#### Partial ranking functions of CR eval_phone_to_elm_bb0_in(V_n,V__speed,B) 


### Resulting Chains:eval_phone_to_elm_bb0_in(V_n,V__speed,B) 
* [22]
* [21]...


### Merging Chains  eval_phone_to_elm_bb0_in/3 into  External patterns of execution 
* [[22]] --> 1 
* [[21]] --> 2 


### Specialization of cost equations eval_phone_to_elm_start/3 
* CE 2 is refined into CE [31,32] 


#### Refined cost equations eval_phone_to_elm_start/3 
* CE 31: eval_phone_to_elm_start(V_n,V__speed,B) = 0+ eval_phone_to_elm_bb0_in(V_n,V__speed,B):1
     [] 
* CE 32: eval_phone_to_elm_start(V_n,V__speed,B) = 0+ eval_phone_to_elm_bb0_in(V_n,V__speed,B):2
     [] 

### Cost equations --> "Loop" of eval_phone_to_elm_start/3 
* CEs [32] --> Loop 23 
* CEs [31] --> Loop 24 

#### Loops of eval_phone_to_elm_start/3 
* Loop 23: eval_phone_to_elm_start(V_n,V__speed,B) [] 
* Loop 24: eval_phone_to_elm_start(V_n,V__speed,B) [] 

### Ranking functions of CR eval_phone_to_elm_start(V_n,V__speed,B) 

#### Partial ranking functions of CR eval_phone_to_elm_start(V_n,V__speed,B) 


### Resulting Chains:eval_phone_to_elm_start(V_n,V__speed,B) 
* [24]
* [23]...


### Merging Chains  eval_phone_to_elm_start/3 into  External patterns of execution 
* [[24]] --> 1 
* [[23]] --> 2 


Computing Bounds
=====================================

#### Cost of loops [12,13] 

 * loop 12:eval_phone_to_elm_bb6_in(V_n,V__speed,V_stress_0,V_n1_0,V_stress_1,B,C,D,E) -> [eval_phone_to_elm_bb6_in(V_n',V__speed',V_stress_0',V_n1_0',V_stress_1',B',C',D',E')] 
1
 * loop 13:eval_phone_to_elm_bb6_in(V_n,V__speed,V_stress_0,V_n1_0,V_stress_1,B,C,D,E) -> [eval_phone_to_elm_bb6_in(V_n',V__speed',V_stress_0',V_n1_0',V_stress_1',B',C',D',E')] 
1
#### Cost of phase [12,13]:eval_phone_to_elm_bb6_in(V_n,V__speed,V_stress_0,V_n1_0,V_stress_1,B,C,D,E) -> [eval_phone_to_elm_bb6_in(V_n',V__speed',V_stress_0',V_n1_0',V_stress_1',B',C',D',E')] 
2*it(12)+0
  Such that:aux(1) =< V_n1_0
aux(2) =< V_n1_0-V_n1_0'
it(12) =< aux(1)
it(12) =< aux(2)

#### Cost of chains of eval_phone_to_elm_bb6_in(V_n,V__speed,V_stress_0,V_n1_0,V_stress_1,B,C,D,E):
* Chain [[12,13],14]: 2*it(12)+0
  Such that:aux(3) =< V_n1_0
it(12) =< aux(3)

  with precondition: [B=2,V_n=C,V__speed=D,V_n1_0>=1] 

* Chain [14]: 0
  with precondition: [B=2,C=V_n,D=V__speed,E=V_stress_1,0>=V_n1_0] 


#### Cost of loops [15,16,17] 

 * loop 15:eval_phone_to_elm_bb2_in(V_n,V__speed,V_stress_0,B) -> [eval_phone_to_elm_bb2_in(V_n',V__speed',V_stress_0',B')] 
1
 * loop 16:eval_phone_to_elm_bb2_in(V_n,V__speed,V_stress_0,B) -> [eval_phone_to_elm_bb2_in(V_n',V__speed',V_stress_0',B')] 
1
 * loop 17:eval_phone_to_elm_bb2_in(V_n,V__speed,V_stress_0,B) -> [eval_phone_to_elm_bb2_in(V_n',V__speed',V_stress_0',B')] 
1*s(3)+0
#### Cost of phase [15,16,17]:eval_phone_to_elm_bb2_in(V_n,V__speed,V_stress_0,B) -> [eval_phone_to_elm_bb2_in(V_n',V__speed',V_stress_0',B')] 
3*it(15)+0
#### Cost of phase [15,16,17]:eval_phone_to_elm_bb2_in(V_n,V__speed,V_stress_0,B) -> [eval_phone_to_elm_bb2_in(V_n',V__speed',V_stress_0',B')] 
3*it(15)+0
#### Cost of chains of eval_phone_to_elm_bb2_in(V_n,V__speed,V_stress_0,B):
* Chain [[15,16,17]]...: 3*it(15)+0
  with precondition: [B=3] 

* Chain [[15,16,17],18]: 3*it(15)+0
  with precondition: [B=3] 

* Chain [18]: 0
  with precondition: [B=3] 


#### Cost of chains of eval_phone_to_elm_4(V_n,V__speed,B):
* Chain [20]: 1*s(6)+1
  with precondition: [] 

* Chain [19]...: 3*s(7)+1
  with precondition: [] 


#### Cost of chains of eval_phone_to_elm_bb0_in(V_n,V__speed,B):
* Chain [22]: 1*aux(6)+0
  with precondition: [] 

* Chain [21]...: 1*aux(7)+0
  with precondition: [] 


#### Cost of chains of eval_phone_to_elm_start(V_n,V__speed,B):
* Chain [24]: 1*s(12)+0
  with precondition: [] 

* Chain [23]...: 1*s(13)+0
  with precondition: [] 


Closed-form bounds of eval_phone_to_elm_start(V_n,V__speed,B): 
-------------------------------------
* Chain [24] with precondition: [] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [23]... with precondition: [] 
    - Upper bound: inf 
    - Complexity: infinity 

### Maximum cost of eval_phone_to_elm_start(V_n,V__speed,B): inf 
Asymptotic class: infinity 

Time statistics: 
-------------------------------------
* Partial evaluation computed in 41 ms.
* Invariants computed in 19 ms.
   - Backward Invariants 7 ms.
   - Transitive Invariants 5 ms.
* Refinement performed in 46 ms.
* Termination proved in 6 ms.
* Upper bounds computed in 25 ms.
   - Equation cost structures 10 ms.
   - Phase cost structures 15 ms.
   - Chain cost structures 6 ms.
   - Solving cost expressions 0 ms.
* Total analysis performed in 182 ms.


Warning: Ignored call to eval_ref_param_write_name_array_stop/1 in equation eval_ref_param_write_name_array_bb6_in/1 

Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. recursive  : [eval_ref_param_write_name_array_6/4,eval_ref_param_write_name_array_7/4,eval_ref_param_write_name_array_bb2_in/2]
1. non_recursive  : [eval_ref_param_write_name_array_bb6_in/1]
2. non_recursive  : [eval_ref_param_write_name_array_11/1]
3. non_recursive  : [eval_ref_param_write_name_array_10/1]
4. non_recursive  : [loop_cont_eval_ref_param_write_name_array_bb2_in/2]
5. non_recursive  : [eval_ref_param_write_name_array_2/2]
6. non_recursive  : [eval_ref_param_write_name_array_1/2]
7. non_recursive  : [eval_ref_param_write_name_array_bb0_in/1]
8. non_recursive  : [eval_ref_param_write_name_array_start/1]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into eval_ref_param_write_name_array_bb2_in/2
1. SCC is completely evaluated into other SCCs
2. SCC is completely evaluated into other SCCs
3. SCC is completely evaluated into other SCCs
4. SCC is partially evaluated into loop_cont_eval_ref_param_write_name_array_bb2_in/2
5. SCC is partially evaluated into eval_ref_param_write_name_array_2/2
6. SCC is completely evaluated into other SCCs
7. SCC is completely evaluated into other SCCs
8. SCC is partially evaluated into eval_ref_param_write_name_array_start/1

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations eval_ref_param_write_name_array_bb2_in/2 
* CE 7 is refined into CE [10] 
* CE 6 is refined into CE [11] 
* CE 5 is refined into CE [12] 


#### Refined cost equations eval_ref_param_write_name_array_bb2_in/2 
* CE 10: eval_ref_param_write_name_array_bb2_in(V_n_0,B) = 0
     [0>=V_n_0,B=3] 
* CE 11: eval_ref_param_write_name_array_bb2_in(V_n_0,B) = 0
     [V_n_0>=1,B=2] 
* CE 12: eval_ref_param_write_name_array_bb2_in(V_n_0,B) = 1+ eval_ref_param_write_name_array_bb2_in(C,B)
     [V_n_0>=1,V_n_0=C+1] 

### Cost equations --> "Loop" of eval_ref_param_write_name_array_bb2_in/2 
* CEs [12] --> Loop 8 
* CEs [10] --> Loop 9 
* CEs [11] --> Loop 10 

#### Loops of eval_ref_param_write_name_array_bb2_in/2 
* Loop 8: eval_ref_param_write_name_array_bb2_in(V_n_0,B)->  eval_ref_param_write_name_array_bb2_in(V_n_0',B)
                  [V_n_0>=1,V_n_0=V_n_0'+1] 
* Loop 9: eval_ref_param_write_name_array_bb2_in(V_n_0,B) [0>=V_n_0,B=3] 
* Loop 10: eval_ref_param_write_name_array_bb2_in(V_n_0,B) [V_n_0>=1,B=2] 

### Ranking functions of CR eval_ref_param_write_name_array_bb2_in(V_n_0,B) 
* RF of phase [8]: [V_n_0]

#### Partial ranking functions of CR eval_ref_param_write_name_array_bb2_in(V_n_0,B) 
* Partial RF of phase [8]:
  - RF of loop [8:1]:
    V_n_0


### Resulting Chains:eval_ref_param_write_name_array_bb2_in(V_n_0,B) 
* [[8],10]
* [[8],9]
* [10]
* [9]


### Merging Chains  eval_ref_param_write_name_array_bb2_in/2 into  External patterns of execution 
* [[10],[10,[8]]] --> 1 
* [[9]] --> 2 
* [[9,[8]]] --> 3 


### Specialization of cost equations loop_cont_eval_ref_param_write_name_array_bb2_in/2 
* CE 9 is refined into CE [13] 
* CE 8 is refined into CE [14] 


#### Refined cost equations loop_cont_eval_ref_param_write_name_array_bb2_in/2 
* CE 13: loop_cont_eval_ref_param_write_name_array_bb2_in(B,A) = 0
     [B=3] 
* CE 14: loop_cont_eval_ref_param_write_name_array_bb2_in(B,A) = 0
     [B=2] 

### Cost equations --> "Loop" of loop_cont_eval_ref_param_write_name_array_bb2_in/2 
* CEs [13] --> Loop 11 
* CEs [14] --> Loop 12 

#### Loops of loop_cont_eval_ref_param_write_name_array_bb2_in/2 
* Loop 11: loop_cont_eval_ref_param_write_name_array_bb2_in(B,A) [B=3] 
* Loop 12: loop_cont_eval_ref_param_write_name_array_bb2_in(B,A) [B=2] 

### Ranking functions of CR loop_cont_eval_ref_param_write_name_array_bb2_in(B,A) 

#### Partial ranking functions of CR loop_cont_eval_ref_param_write_name_array_bb2_in(B,A) 


### Resulting Chains:loop_cont_eval_ref_param_write_name_array_bb2_in(B,A) 
* [12]
* [11]


### Merging Chains  loop_cont_eval_ref_param_write_name_array_bb2_in/2 into  External patterns of execution 
* [[12]] --> 1 
* [[11]] --> 2 


### Specialization of cost equations eval_ref_param_write_name_array_2/2 
* CE 3 is refined into CE [15] 
* CE 4 is refined into CE [16,17,18] 


#### Refined cost equations eval_ref_param_write_name_array_2/2 
* CE 15: eval_ref_param_write_name_array_2(V_3,B) = 0
     [] 
* CE 16: eval_ref_param_write_name_array_2(V_3,B) = 1+ eval_ref_param_write_name_array_bb2_in(V_3,C):1+ loop_cont_eval_ref_param_write_name_array_bb2_in(D,B):1
     [V_3>=1,D=2,C=2] 
* CE 17: eval_ref_param_write_name_array_2(V_3,B) = 1+ eval_ref_param_write_name_array_bb2_in(V_3,C):2+ loop_cont_eval_ref_param_write_name_array_bb2_in(D,B):2
     [0>=V_3,D=3,C=3] 
* CE 18: eval_ref_param_write_name_array_2(V_3,B) = 1+ eval_ref_param_write_name_array_bb2_in(V_3,C):3+ loop_cont_eval_ref_param_write_name_array_bb2_in(D,B):2
     [V_3>=1,D=3,C=3] 

### Cost equations --> "Loop" of eval_ref_param_write_name_array_2/2 
* CEs [15,16,17,18] --> Loop 13 

#### Loops of eval_ref_param_write_name_array_2/2 
* Loop 13: eval_ref_param_write_name_array_2(V_3,B) [] 

### Ranking functions of CR eval_ref_param_write_name_array_2(V_3,B) 

#### Partial ranking functions of CR eval_ref_param_write_name_array_2(V_3,B) 


### Resulting Chains:eval_ref_param_write_name_array_2(V_3,B) 
* [13]


### Merging Chains  eval_ref_param_write_name_array_2/2 into  External patterns of execution 
* [[13]] --> 1 


### Specialization of cost equations eval_ref_param_write_name_array_start/1 
* CE 2 is refined into CE [19] 


#### Refined cost equations eval_ref_param_write_name_array_start/1 
* CE 19: eval_ref_param_write_name_array_start(B) = 0+ eval_ref_param_write_name_array_2(C,B):1
     [] 

### Cost equations --> "Loop" of eval_ref_param_write_name_array_start/1 
* CEs [19] --> Loop 14 

#### Loops of eval_ref_param_write_name_array_start/1 
* Loop 14: eval_ref_param_write_name_array_start(B) [] 

### Ranking functions of CR eval_ref_param_write_name_array_start(B) 

#### Partial ranking functions of CR eval_ref_param_write_name_array_start(B) 


### Resulting Chains:eval_ref_param_write_name_array_start(B) 
* [14]


### Merging Chains  eval_ref_param_write_name_array_start/1 into  External patterns of execution 
* [[14]] --> 1 


Computing Bounds
=====================================

#### Cost of loops [8] 

 * loop 8:eval_ref_param_write_name_array_bb2_in(V_n_0,B) -> [eval_ref_param_write_name_array_bb2_in(V_n_0',B')] 
1
#### Cost of phase [8]:eval_ref_param_write_name_array_bb2_in(V_n_0,B) -> [eval_ref_param_write_name_array_bb2_in(V_n_0',B')] 
1*it(8)+0
  Such that:it(8) =< V_n_0
it(8) =< V_n_0-V_n_0'

#### Cost of phase [8]:eval_ref_param_write_name_array_bb2_in(V_n_0,B) -> [eval_ref_param_write_name_array_bb2_in(V_n_0',B')] 
1*it(8)+0
  Such that:it(8) =< V_n_0
it(8) =< V_n_0-V_n_0'

#### Cost of chains of eval_ref_param_write_name_array_bb2_in(V_n_0,B):
* Chain [[8],10]: 1*it(8)+0
  Such that:it(8) =< V_n_0

  with precondition: [B=2,V_n_0>=2] 

* Chain [[8],9]: 1*it(8)+0
  Such that:it(8) =< V_n_0

  with precondition: [B=3,V_n_0>=1] 

* Chain [10]: 0
  with precondition: [B=2,V_n_0>=1] 

* Chain [9]: 0
  with precondition: [B=3,0>=V_n_0] 


#### Cost of chains of loop_cont_eval_ref_param_write_name_array_bb2_in(B,A):
* Chain [12]: 0
  with precondition: [B=2] 

* Chain [11]: 0
  with precondition: [B=3] 


#### Cost of chains of eval_ref_param_write_name_array_2(V_3,B):
* Chain [13]: 2*s(2)+1
  Such that:aux(1) =< V_3
s(2) =< aux(1)

  with precondition: [] 


#### Cost of chains of eval_ref_param_write_name_array_start(B):
* Chain [14]: 2*s(5)+1
  with precondition: [] 


Closed-form bounds of eval_ref_param_write_name_array_start(B): 
-------------------------------------
* Chain [14] with precondition: [] 
    - Upper bound: inf 
    - Complexity: infinity 

### Maximum cost of eval_ref_param_write_name_array_start(B): inf 
Asymptotic class: infinity 

Time statistics: 
-------------------------------------
* Partial evaluation computed in 22 ms.
* Invariants computed in 16 ms.
   - Backward Invariants 10 ms.
   - Transitive Invariants 2 ms.
* Refinement performed in 34 ms.
* Termination proved in 3 ms.
* Upper bounds computed in 28 ms.
   - Equation cost structures 12 ms.
   - Phase cost structures 6 ms.
   - Chain cost structures 8 ms.
   - Solving cost expressions 1 ms.
* Total analysis performed in 138 ms.


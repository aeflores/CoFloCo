Warning: Ignored call to eval_pop_estack_stop/1 in equation eval_pop_estack_19/1 

Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. recursive  : [eval_pop_estack_11/7,eval_pop_estack_12/7,eval_pop_estack_13/8,eval_pop_estack_14/8,eval_pop_estack_4/6,eval_pop_estack_5/6,eval_pop_estack_bb1_in/5,eval_pop_estack_bb4_in/7]
1. non_recursive  : [eval_pop_estack_19/1]
2. non_recursive  : [eval_pop_estack_18/2]
3. non_recursive  : [loop_cont_eval_pop_estack_bb1_in/3]
4. non_recursive  : [eval_pop_estack_bb0_in/2]
5. non_recursive  : [eval_pop_estack_start/2]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into eval_pop_estack_bb1_in/5
1. SCC is completely evaluated into other SCCs
2. SCC is completely evaluated into other SCCs
3. SCC is completely evaluated into other SCCs
4. SCC is partially evaluated into eval_pop_estack_bb0_in/2
5. SCC is partially evaluated into eval_pop_estack_start/2

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations eval_pop_estack_bb1_in/5 
* CE 6 is refined into CE [7] 
* CE 4 is refined into CE [8] 
* CE 5 is refined into CE [9] 


#### Refined cost equations eval_pop_estack_bb1_in/5 
* CE 7: eval_pop_estack_bb1_in(V_count,V_popped_0,V_idx_0,B,C) = 0
     [V_idx_0>=V_popped_0,V_idx_0>=V_count,V_popped_0>=0,V_count=V_popped_0+C,B=2] 
* CE 8: eval_pop_estack_bb1_in(V_count,V_popped_0,V_idx_0,B,C) = 1+ eval_pop_estack_bb1_in(V_count,V_popped_0,D,E,C)
     [V_count>=V_idx_0+1,V_idx_0>=V_popped_0,V_popped_0>=0,V_idx_0+1=D,E=2,B=2] 
* CE 9: eval_pop_estack_bb1_in(V_count,V_popped_0,V_idx_0,B,C) = 1+ eval_pop_estack_bb1_in(V_count,D,D,E,C)
     [V_count>=D,D>=V_popped_0+1,V_popped_0>=0,D=V_idx_0+1,E=2,B=2] 

### Cost equations --> "Loop" of eval_pop_estack_bb1_in/5 
* CEs [8] --> Loop 6 
* CEs [9] --> Loop 7 
* CEs [7] --> Loop 8 

#### Loops of eval_pop_estack_bb1_in/5 
* Loop 6: eval_pop_estack_bb1_in(V_count,V_popped_0,V_idx_0,B,C)->  eval_pop_estack_bb1_in(V_count,V_popped_0,V_idx_0',B',C)
                  [V_count>=V_idx_0+1,V_idx_0>=V_popped_0,V_popped_0>=0,V_idx_0+1=V_idx_0',B'=2,B=2] 
* Loop 7: eval_pop_estack_bb1_in(V_count,V_popped_0,V_idx_0,B,C)->  eval_pop_estack_bb1_in(V_count,V_popped_0',V_idx_0',B',C)
                  [V_count>=V_idx_0+1,V_idx_0>=V_popped_0,V_popped_0>=0,V_idx_0+1=V_idx_0',V_idx_0+1=V_popped_0',B'=2,B=2] 
* Loop 8: eval_pop_estack_bb1_in(V_count,V_popped_0,V_idx_0,B,C) [V_idx_0>=V_popped_0,V_idx_0>=V_count,V_popped_0>=0,V_popped_0+C=V_count,B=2] 

### Ranking functions of CR eval_pop_estack_bb1_in(V_count,V_popped_0,V_idx_0,B,C) 
* RF of phase [6,7]: [V_count-V_idx_0]

#### Partial ranking functions of CR eval_pop_estack_bb1_in(V_count,V_popped_0,V_idx_0,B,C) 
* Partial RF of phase [6,7]:
  - RF of loop [6:1,7:1]:
    V_count-V_idx_0
  - RF of loop [7:1]:
    V_count-V_popped_0


### Resulting Chains:eval_pop_estack_bb1_in(V_count,V_popped_0,V_idx_0,B,C) 
* [[6,7],8]
* [8]


### Merging Chains  eval_pop_estack_bb1_in/5 into  External patterns of execution 
* [[8]] --> 1 
* [[8,[6,7]]] --> 2 


### Specialization of cost equations eval_pop_estack_bb0_in/2 
* CE 3 is refined into CE [10,11] 


#### Refined cost equations eval_pop_estack_bb0_in/2 
* CE 10: eval_pop_estack_bb0_in(V_count,B) = 1+ eval_pop_estack_bb1_in(V_count,C,D,E,V_count):1
     [0>=V_count,E=2,D=0,C=0] 
* CE 11: eval_pop_estack_bb0_in(V_count,B) = 1+ eval_pop_estack_bb1_in(V_count,C,D,E,F):2
     [V_count>=F,F>=0,V_count>=1,E=2,D=0,C=0] 

### Cost equations --> "Loop" of eval_pop_estack_bb0_in/2 
* CEs [11] --> Loop 9 
* CEs [10] --> Loop 10 

#### Loops of eval_pop_estack_bb0_in/2 
* Loop 9: eval_pop_estack_bb0_in(V_count,B) [V_count>=1] 
* Loop 10: eval_pop_estack_bb0_in(V_count,B) [0>=V_count] 

### Ranking functions of CR eval_pop_estack_bb0_in(V_count,B) 

#### Partial ranking functions of CR eval_pop_estack_bb0_in(V_count,B) 


### Resulting Chains:eval_pop_estack_bb0_in(V_count,B) 
* [10]
* [9]


### Merging Chains  eval_pop_estack_bb0_in/2 into  External patterns of execution 
* [[10]] --> 1 
* [[9]] --> 2 


### Specialization of cost equations eval_pop_estack_start/2 
* CE 2 is refined into CE [12,13] 


#### Refined cost equations eval_pop_estack_start/2 
* CE 12: eval_pop_estack_start(V_count,B) = 0+ eval_pop_estack_bb0_in(V_count,B):1
     [0>=V_count] 
* CE 13: eval_pop_estack_start(V_count,B) = 0+ eval_pop_estack_bb0_in(V_count,B):2
     [V_count>=1] 

### Cost equations --> "Loop" of eval_pop_estack_start/2 
* CEs [13] --> Loop 11 
* CEs [12] --> Loop 12 

#### Loops of eval_pop_estack_start/2 
* Loop 11: eval_pop_estack_start(V_count,B) [V_count>=1] 
* Loop 12: eval_pop_estack_start(V_count,B) [0>=V_count] 

### Ranking functions of CR eval_pop_estack_start(V_count,B) 

#### Partial ranking functions of CR eval_pop_estack_start(V_count,B) 


### Resulting Chains:eval_pop_estack_start(V_count,B) 
* [12]
* [11]


### Merging Chains  eval_pop_estack_start/2 into  External patterns of execution 
* [[12]] --> 1 
* [[11]] --> 2 


Computing Bounds
=====================================

#### Cost of loops [6,7] 

 * loop 6:eval_pop_estack_bb1_in(V_count,V_popped_0,V_idx_0,B,C) -> [eval_pop_estack_bb1_in(V_count',V_popped_0',V_idx_0',B',C')] 
1
 * loop 7:eval_pop_estack_bb1_in(V_count,V_popped_0,V_idx_0,B,C) -> [eval_pop_estack_bb1_in(V_count',V_popped_0',V_idx_0',B',C')] 
1
#### Cost of phase [6,7]:eval_pop_estack_bb1_in(V_count,V_popped_0,V_idx_0,B,C) -> [eval_pop_estack_bb1_in(V_count',V_popped_0',V_idx_0',B',C')] 
1*it(6)+1*it(7)+0
  Such that:it(7) =< V_count-V_popped_0
it(7) =< V_count-V_popped_0-V_count'+V_popped_0'
aux(1) =< V_count-V_idx_0
aux(2) =< V_count-V_idx_0-V_count'+V_idx_0'
it(6) =< aux(1)
it(7) =< aux(1)
it(6) =< aux(2)
it(7) =< aux(2)

#### Cost of chains of eval_pop_estack_bb1_in(V_count,V_popped_0,V_idx_0,B,C):
* Chain [[6,7],8]: 1*it(6)+1*it(7)+0
  Such that:it(7) =< V_count-V_popped_0-C
aux(3) =< V_count-V_idx_0
it(6) =< aux(3)
it(7) =< aux(3)

  with precondition: [B=2,V_popped_0>=0,C>=0,V_idx_0>=V_popped_0,V_count>=V_idx_0+1,V_count>=V_popped_0+C] 

* Chain [8]: 0
  with precondition: [B=2,V_popped_0+C=V_count,V_popped_0>=0,V_idx_0>=V_count,V_idx_0>=V_popped_0] 


#### Cost of chains of eval_pop_estack_bb0_in(V_count,B):
* Chain [10]: 1
  with precondition: [0>=V_count] 

* Chain [9]: 2*s(1)+1
  Such that:aux(4) =< V_count
s(1) =< aux(4)

  with precondition: [V_count>=1] 


#### Cost of chains of eval_pop_estack_start(V_count,B):
* Chain [12]: 1
  with precondition: [0>=V_count] 

* Chain [11]: 2*s(5)+1
  Such that:s(4) =< V_count
s(5) =< s(4)

  with precondition: [V_count>=1] 


Closed-form bounds of eval_pop_estack_start(V_count,B): 
-------------------------------------
* Chain [12] with precondition: [0>=V_count] 
    - Upper bound: 1 
    - Complexity: constant 
* Chain [11] with precondition: [V_count>=1] 
    - Upper bound: 2*V_count+1 
    - Complexity: n 

### Maximum cost of eval_pop_estack_start(V_count,B): nat(V_count)*2+1 
Asymptotic class: n 

Time statistics: 
-------------------------------------
* Partial evaluation computed in 14 ms.
* Invariants computed in 13 ms.
   - Backward Invariants 6 ms.
   - Transitive Invariants 3 ms.
* Refinement performed in 22 ms.
* Termination proved in 5 ms.
* Upper bounds computed in 20 ms.
   - Equation cost structures 5 ms.
   - Phase cost structures 9 ms.
   - Chain cost structures 6 ms.
   - Solving cost expressions 0 ms.
* Total analysis performed in 92 ms.


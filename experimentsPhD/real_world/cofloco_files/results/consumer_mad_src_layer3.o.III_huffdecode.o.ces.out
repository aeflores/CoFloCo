Warning: Ignored call to eval_III_huffdecode_stop/1 in equation eval_III_huffdecode_385/1 
Warning: Ignored call to eval_III_huffdecode_stop/1 in equation eval_III_huffdecode_bb76_in/1 

Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. recursive  : [eval_III_huffdecode_bb15_in/33]
1. recursive  : [eval_III_huffdecode_111/20,eval_III_huffdecode_112/20,eval_III_huffdecode_127/23,eval_III_huffdecode_128/23,eval_III_huffdecode_137/20,eval_III_huffdecode_138/20,eval_III_huffdecode_160/23,eval_III_huffdecode_161/23,eval_III_huffdecode_176/26,eval_III_huffdecode_177/26,eval_III_huffdecode_186/23,eval_III_huffdecode_187/23,eval_III_huffdecode_209/20,eval_III_huffdecode_210/20,eval_III_huffdecode_237/22,eval_III_huffdecode_238/22,eval_III_huffdecode_62/15,eval_III_huffdecode_63/15,eval_III_huffdecode_NewDefault5_in/23,eval_III_huffdecode_NewDefault_in/20,eval_III_huffdecode_bb11_in/11,eval_III_huffdecode_bb12_in/14,eval_III_huffdecode_bb14_in/16,eval_III_huffdecode_bb22_in/21,eval_III_huffdecode_bb26_in/21,eval_III_huffdecode_bb27_in/22,eval_III_huffdecode_bb31_in/24,eval_III_huffdecode_bb35_in/25,eval_III_huffdecode_bb3_in/10,eval_III_huffdecode_bb41_in/20,eval_III_huffdecode_bb42_in/21,eval_III_huffdecode_bb47_in/22,eval_III_huffdecode_bb48_in/26,eval_III_huffdecode_bb8_in/11,eval_III_huffdecode_bb9_in/11,loop_cont_eval_III_huffdecode_bb15_in/23]
2. non_recursive  : [eval_III_huffdecode_bb76_in/1]
3. recursive  : [eval_III_huffdecode_261/3,eval_III_huffdecode_262/3,eval_III_huffdecode_307/8,eval_III_huffdecode_308/8,eval_III_huffdecode_346/10,eval_III_huffdecode_347/10,eval_III_huffdecode_bb50_in/3,eval_III_huffdecode_bb53_in/5,eval_III_huffdecode_bb55_in/6,eval_III_huffdecode_bb58_in/7,eval_III_huffdecode_bb59_in/7,eval_III_huffdecode_bb61_in/8,eval_III_huffdecode_bb63_in/9,eval_III_huffdecode_bb66_in/9,eval_III_huffdecode_bb67_in/9,eval_III_huffdecode_bb69_in/10,eval_III_huffdecode_bb71_in/11]
4. non_recursive  : [eval_III_huffdecode_385/1]
5. non_recursive  : [eval_III_huffdecode_384/1]
6. recursive  : [eval_III_huffdecode_bb74_in/1]
7. non_recursive  : [loop_cont_eval_III_huffdecode_bb74_in/2]
8. non_recursive  : [loop_cont_eval_III_huffdecode_bb50_in/2]
9. non_recursive  : [eval_III_huffdecode_257/3]
10. non_recursive  : [eval_III_huffdecode_256/4]
11. non_recursive  : [loop_cont_eval_III_huffdecode_bb3_in/5]
12. non_recursive  : [eval_III_huffdecode_14/3]
13. non_recursive  : [eval_III_huffdecode_13/3]
14. non_recursive  : [eval_III_huffdecode_7/2]
15. non_recursive  : [eval_III_huffdecode_6/2]
16. non_recursive  : [eval_III_huffdecode_5/2]
17. non_recursive  : [eval_III_huffdecode_4/2]
18. non_recursive  : [eval_III_huffdecode_bb0_in/2]
19. non_recursive  : [eval_III_huffdecode_start/2]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into eval_III_huffdecode_bb15_in/33
1. SCC is partially evaluated into eval_III_huffdecode_bb3_in/10
2. SCC is completely evaluated into other SCCs
3. SCC is partially evaluated into eval_III_huffdecode_bb50_in/3
4. SCC is completely evaluated into other SCCs
5. SCC is completely evaluated into other SCCs
6. SCC is partially evaluated into eval_III_huffdecode_bb74_in/1
7. SCC is completely evaluated into other SCCs
8. SCC is partially evaluated into loop_cont_eval_III_huffdecode_bb50_in/2
9. SCC is partially evaluated into eval_III_huffdecode_257/3
10. SCC is completely evaluated into other SCCs
11. SCC is partially evaluated into loop_cont_eval_III_huffdecode_bb3_in/5
12. SCC is partially evaluated into eval_III_huffdecode_14/3
13. SCC is completely evaluated into other SCCs
14. SCC is completely evaluated into other SCCs
15. SCC is completely evaluated into other SCCs
16. SCC is completely evaluated into other SCCs
17. SCC is completely evaluated into other SCCs
18. SCC is partially evaluated into eval_III_huffdecode_bb0_in/2
19. SCC is partially evaluated into eval_III_huffdecode_start/2

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations eval_III_huffdecode_bb15_in/33 
* CE 66 is refined into CE [76] 
* CE 65 is refined into CE [77] 
* CE 64 is refined into CE [78] 
* CE 63 is refined into CE [79] 
* CE 62 is refined into CE [80] 
* CE 61 is refined into CE [81] 
* CE 60 is refined into CE [82] 
* CE 59 is refined into CE [83] 


#### Refined cost equations eval_III_huffdecode_bb15_in/33 
* CE 76: eval_III_huffdecode_bb15_in(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,B,C,Q,E,F,G,H,I,J,K,L,M,N,R,S,T,U) = 0
     [K+L>=1,K+L=E+Q,K+L=D+E,G+1=P,G+1=A,O=8] 
* CE 77: eval_III_huffdecode_bb15_in(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,B,C,Q,E,F,G,H,I,J,K,L,M,N,R,S,T,U) = 0
     [K+L>=1,K+L=E+Q,K+L=D+E,G+1=P,G+1=A,O=7] 
* CE 78: eval_III_huffdecode_bb15_in(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,B,C,Q,E,F,G,H,I,J,K,L,M,N,R,S,R,T) = 0
     [K+L>=1,K+L=E+Q,K+L=D+E,G+1=P,G+1=A,O=6] 
* CE 79: eval_III_huffdecode_bb15_in(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,B,C,Q,E,F,G,H,I,J,K,L,M,N,R,S,R,T) = 0
     [K+L>=1,K+L=E+Q,K+L=D+E,G+1=P,G+1=A,O=5] 
* CE 80: eval_III_huffdecode_bb15_in(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,B,C,Q,E,F,G,H,I,J,K,L,M,N,R,S,T,U) = 0
     [K+L>=1,K+L=E+Q,K+L=D+E,G+1=P,G+1=A,O=4] 
* CE 81: eval_III_huffdecode_bb15_in(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,B,C,Q,E,F,G,H,I,J,K,L,M,N,R,S,T,U) = 0
     [K+L>=1,K+L=E+Q,K+L=D+E,G+1=P,G+1=A,O=3] 
* CE 82: eval_III_huffdecode_bb15_in(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,B,C,Q,E,F,G,H,I,J,K,L,M,N,R,S,R,L) = 0
     [K+L>=1,K+L=E+Q,K+L=D+E,G+1=P,G+1=A,O=2] 
* CE 83: eval_III_huffdecode_bb15_in(V_big_values_0,V_startbits_0,V_linbits_0,V_cachesz_0,V_bits_left_0,V_exp_0,V_49,V_startbits_2,V_linbits_2,V_exp_2,V_cachesz_1,V_bits_left_1,V_clumpsz_0,V_cachesz_2,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T) = 1+ eval_III_huffdecode_bb15_in(U,V_startbits_0,V_linbits_0,V,V_bits_left_0,V_exp_0,V_49,V_startbits_2,V_linbits_2,V_exp_2,V_cachesz_1,V_bits_left_1,W,X,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T)
     [V_cachesz_1+V_bits_left_1>=1,B>=2,8>=B,V_cachesz_1+V_bits_left_1=V_bits_left_0+V,V_cachesz_1+V_bits_left_1=V_cachesz_0+V_bits_left_0,V_cachesz_2=V_clumpsz_0+X,V_49+1=U,V_49+1=V_big_values_0] 

### Cost equations --> "Loop" of eval_III_huffdecode_bb15_in/33 
* CEs [83] --> Loop 31 
* CEs [76] --> Loop 32 
* CEs [77] --> Loop 33 
* CEs [78] --> Loop 34 
* CEs [79] --> Loop 35 
* CEs [80] --> Loop 36 
* CEs [81] --> Loop 37 
* CEs [82] --> Loop 38 

#### Loops of eval_III_huffdecode_bb15_in/33 
* Loop 31: eval_III_huffdecode_bb15_in(V_big_values_0,V_startbits_0,V_linbits_0,V_cachesz_0,V_bits_left_0,V_exp_0,V_49,V_startbits_2,V_linbits_2,V_exp_2,V_cachesz_1,V_bits_left_1,V_clumpsz_0,V_cachesz_2,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T)->  eval_III_huffdecode_bb15_in(V_big_values_0',V_startbits_0,V_linbits_0,V_cachesz_0',V_bits_left_0,V_exp_0,V_49,V_startbits_2,V_linbits_2,V_exp_2,V_cachesz_1,V_bits_left_1,V_clumpsz_0',V_cachesz_2',B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T)
                  [V_cachesz_1+V_bits_left_1>=1,B>=2,8>=B,V_cachesz_1+V_bits_left_1=V_bits_left_0+V_cachesz_0',V_cachesz_1+V_bits_left_1=V_cachesz_0+V_bits_left_0,V_clumpsz_0+V_cachesz_2'=V_cachesz_2,V_49+1=V_big_values_0',V_49+1=V_big_values_0] 
* Loop 32: eval_III_huffdecode_bb15_in(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,A,B,C,D,E,F,P,H,I,J,K,Q,M,N,R,S,T,U) [D+E>=1,D+E=K+Q,D+E=K+L,A=P+1,A=G+1,O=8] 
* Loop 33: eval_III_huffdecode_bb15_in(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,A,B,C,D,E,F,P,H,I,J,K,Q,M,N,R,S,T,U) [D+E>=1,D+E=K+Q,D+E=K+L,A=P+1,A=G+1,O=7] 
* Loop 34: eval_III_huffdecode_bb15_in(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,A,B,C,D,E,F,P,H,I,J,K,Q,M,N,R,S,R,T) [D+E>=1,D+E=K+Q,D+E=K+L,A=P+1,A=G+1,O=6] 
* Loop 35: eval_III_huffdecode_bb15_in(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,A,B,C,D,E,F,P,H,I,J,K,Q,M,N,R,S,R,T) [D+E>=1,D+E=K+Q,D+E=K+L,A=P+1,A=G+1,O=5] 
* Loop 36: eval_III_huffdecode_bb15_in(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,A,B,C,D,E,F,P,H,I,J,K,Q,M,N,R,S,T,U) [D+E>=1,D+E=K+Q,D+E=K+L,A=P+1,A=G+1,O=4] 
* Loop 37: eval_III_huffdecode_bb15_in(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,A,B,C,D,E,F,P,H,I,J,K,Q,M,N,R,S,T,U) [D+E>=1,D+E=K+Q,D+E=K+L,A=P+1,A=G+1,O=3] 
* Loop 38: eval_III_huffdecode_bb15_in(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,A,B,C,D,E,F,P,H,I,J,K,Q,M,N,R,S,R,T) [D+E>=1,D+E=K+T,D+E=K+Q,D+E=K+L,A=P+1,A=G+1,O=2] 

### Ranking functions of CR eval_III_huffdecode_bb15_in(V_big_values_0,V_startbits_0,V_linbits_0,V_cachesz_0,V_bits_left_0,V_exp_0,V_49,V_startbits_2,V_linbits_2,V_exp_2,V_cachesz_1,V_bits_left_1,V_clumpsz_0,V_cachesz_2,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T) 

#### Partial ranking functions of CR eval_III_huffdecode_bb15_in(V_big_values_0,V_startbits_0,V_linbits_0,V_cachesz_0,V_bits_left_0,V_exp_0,V_49,V_startbits_2,V_linbits_2,V_exp_2,V_cachesz_1,V_bits_left_1,V_clumpsz_0,V_cachesz_2,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T) 


### Resulting Chains:eval_III_huffdecode_bb15_in(V_big_values_0,V_startbits_0,V_linbits_0,V_cachesz_0,V_bits_left_0,V_exp_0,V_49,V_startbits_2,V_linbits_2,V_exp_2,V_cachesz_1,V_bits_left_1,V_clumpsz_0,V_cachesz_2,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T) 
* [[31]]...
* [[31],38]
* [[31],37]
* [[31],36]
* [[31],35]
* [[31],34]
* [[31],33]
* [[31],32]
* [38]
* [37]
* [36]
* [35]
* [34]
* [33]
* [32]


### Merging Chains  eval_III_huffdecode_bb15_in/33 into  External patterns of execution 
* [[38],[38,[31]]] --> 1 
* [[37],[37,[31]]] --> 2 
* [[36],[36,[31]]] --> 3 
* [[35],[35,[31]]] --> 4 
* [[34],[34,[31]]] --> 5 
* [[33],[33,[31]]] --> 6 
* [[32],[32,[31]]] --> 7 
* [[[31]]] --> 8 


### Specialization of cost equations eval_III_huffdecode_bb3_in/10 
* CE 56 is refined into CE [84] 
* CE 54 is refined into CE [85] 
* CE 51 is refined into CE [86] 
* CE 52 is refined into CE [87] 
* CE 55 is refined into CE [88] 
* CE 53 is refined into CE [89] 
* CE 7 is refined into CE [90,91] 
* CE 8 is refined into CE [92,93] 
* CE 9 is refined into CE [94,95] 
* CE 10 is refined into CE [96,97] 
* CE 11 is refined into CE [98,99] 
* CE 12 is refined into CE [100,101] 
* CE 13 is refined into CE [102,103] 
* CE 14 is refined into CE [104,105] 
* CE 15 is refined into CE [106,107] 
* CE 16 is refined into CE [108,109] 
* CE 17 is refined into CE [110,111] 
* CE 18 is refined into CE [112,113] 
* CE 19 is refined into CE [114,115] 
* CE 20 is refined into CE [116,117] 
* CE 21 is refined into CE [118,119] 
* CE 22 is refined into CE [120,121] 
* CE 23 is refined into CE [122,123] 
* CE 24 is refined into CE [124,125] 
* CE 25 is refined into CE [126,127] 
* CE 26 is refined into CE [128,129] 
* CE 27 is refined into CE [130,131] 
* CE 28 is refined into CE [132,133] 
* CE 29 is refined into CE [134,135] 
* CE 30 is refined into CE [136,137] 
* CE 31 is refined into CE [138,139] 
* CE 32 is refined into CE [140,141] 
* CE 33 is refined into CE [142,143] 
* CE 34 is refined into CE [144,145] 
* CE 35 is refined into CE [146,147] 
* CE 36 is refined into CE [148,149] 
* CE 37 is refined into CE [150,151] 
* CE 38 is refined into CE [152,153] 
* CE 39 is refined into CE [154,155] 
* CE 40 is refined into CE [156,157] 
* CE 41 is refined into CE [158,159] 
* CE 42 is refined into CE [160,161] 
* CE 43 is refined into CE [162,163] 
* CE 44 is refined into CE [164,165] 
* CE 45 is refined into CE [166,167] 
* CE 46 is refined into CE [168,169] 
* CE 47 is refined into CE [170,171] 
* CE 48 is refined into CE [172,173] 
* CE 49 is refined into CE [174,175] 
* CE 50 is refined into CE [176,177] 


#### Refined cost equations eval_III_huffdecode_bb3_in/10 
* CE 84: eval_III_huffdecode_bb3_in(A,B,C,D,E,F,G,D,E,F) = 0
     [0>=D+E,G=12] 
* CE 85: eval_III_huffdecode_bb3_in(V_big_values_0,V_startbits_0,V_linbits_0,V_cachesz_0,V_bits_left_0,V_exp_0,B,C,D,E) = 0
     [0>=V_cachesz_0+V_bits_left_0,B=9] 
* CE 86: eval_III_huffdecode_bb3_in(V_big_values_0,V_startbits_0,V_linbits_0,V_cachesz_0,V_bits_left_0,V_exp_0,B,C,D,E) = 0
     [V_cachesz_0+V_bits_left_0>=1,V_big_values_0>=1,B=9] 
* CE 87: eval_III_huffdecode_bb3_in(V_big_values_0,V_startbits_0,V_linbits_0,V_cachesz_0,V_bits_left_0,V_exp_0,B,C,D,E) = 0
     [V_cachesz_0+V_bits_left_0>=1,0>=V_big_values_0+1,B=9] 
* CE 88: eval_III_huffdecode_bb3_in(A,B,C,D,E,F,G,D,E,F) = 0
     [G=12,A=0] 
* CE 89: eval_III_huffdecode_bb3_in(V_big_values_0,V_startbits_0,V_linbits_0,V_cachesz_0,V_bits_left_0,V_exp_0,B,C,D,E) = 0
     [B=9,V_big_values_0=0] 
* CE 90: eval_III_huffdecode_bb3_in(V_big_values_0,V_startbits_0,V_linbits_0,V_cachesz_0,V_bits_left_0,V_exp_0,B,C,D,E) = 2+ eval_III_huffdecode_bb15_in(F,V_startbits_0,V_linbits_0,V_cachesz_0,V_bits_left_0,V_exp_0,G,H,I,J,K,L,H,K,M,N,V_startbits_0,V_linbits_0,V_cachesz_0,V_bits_left_0,V_exp_0,G,H,I,J,K,O,P,Q,R,S,T,U):2+ eval_III_huffdecode_bb3_in(G,H,I,V,W,J,B,C,D,E)
     [V_cachesz_0+V_bits_left_0>=1,G>=0,V_cachesz_0+V_bits_left_0=K+O,V_cachesz_0+V_bits_left_0=K+L,V+1=R,G+1=N,G+1=F,G+1=V_big_values_0,M=3] 
* CE 91: eval_III_huffdecode_bb3_in(V_big_values_0,V_startbits_0,V_linbits_0,V_cachesz_0,V_bits_left_0,V_exp_0,B,C,D,E) = 2+ eval_III_huffdecode_bb15_in(V_big_values_0,V_startbits_0,V_linbits_0,V_cachesz_0,F,V_exp_0,G,H,I,J,K,L,H,K,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z,A1,B1,C1,D1,E1):8
     [K+L>=1,V_big_values_0>=1,K+L=V_cachesz_0+F,K+L=V_cachesz_0+V_bits_left_0,F1+1=B1,V_big_values_0=G+1,M=3] 
* CE 92: eval_III_huffdecode_bb3_in(V_big_values_0,V_startbits_0,V_linbits_0,V_cachesz_0,V_bits_left_0,V_exp_0,B,C,D,E) = 2+ eval_III_huffdecode_bb15_in(F,V_startbits_0,V_linbits_0,V_cachesz_0,V_bits_left_0,V_exp_0,G,H,I,J,K,L,H,K,M,N,V_startbits_0,V_linbits_0,V_cachesz_0,V_bits_left_0,V_exp_0,G,H,I,J,K,O,P,Q,R,S,T,U):3+ eval_III_huffdecode_bb3_in(G,H,I,V,W,J,B,C,D,E)
     [V_cachesz_0+V_bits_left_0>=1,G>=0,V_cachesz_0+V_bits_left_0=K+O,V_cachesz_0+V_bits_left_0=K+L,I+V=R+15,G+1=N,G+1=F,G+1=V_big_values_0,M=4] 
* CE 93: eval_III_huffdecode_bb3_in(V_big_values_0,V_startbits_0,V_linbits_0,V_cachesz_0,V_bits_left_0,V_exp_0,B,C,D,E) = 2+ eval_III_huffdecode_bb15_in(V_big_values_0,V_startbits_0,V_linbits_0,V_cachesz_0,F,V_exp_0,G,H,I,J,K,L,H,K,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z,A1,B1,C1,D1,E1):8
     [K+L>=1,V_big_values_0>=1,K+L=V_cachesz_0+F,K+L=V_cachesz_0+V_bits_left_0,V+F1=B1+15,V_big_values_0=G+1,M=4] 
* CE 94: eval_III_huffdecode_bb3_in(V_big_values_0,V_startbits_0,V_linbits_0,V_cachesz_0,V_bits_left_0,V_exp_0,B,C,D,E) = 2+ eval_III_huffdecode_bb15_in(F,V_startbits_0,V_linbits_0,V_cachesz_0,V_bits_left_0,V_exp_0,G,H,I,J,K,L,H,K,M,N,V_startbits_0,V_linbits_0,V_cachesz_0,V_bits_left_0,V_exp_0,G,H,I,J,K,O,P,Q,R,S,R,T):4+ eval_III_huffdecode_bb3_in(G,H,I,U,V,J,B,C,D,E)
     [V_cachesz_0+V_bits_left_0>=1,G>=0,V_cachesz_0+V_bits_left_0=K+O,V_cachesz_0+V_bits_left_0=K+L,I+U+1=R,G+1=N,G+1=F,G+1=V_big_values_0,M=5] 
* CE 95: eval_III_huffdecode_bb3_in(V_big_values_0,V_startbits_0,V_linbits_0,V_cachesz_0,V_bits_left_0,V_exp_0,B,C,D,E) = 2+ eval_III_huffdecode_bb15_in(V_big_values_0,V_startbits_0,V_linbits_0,V_cachesz_0,F,V_exp_0,G,H,I,J,K,L,H,K,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z,A1,B1,C1,D1,E1):8
     [K+L>=1,V_big_values_0>=1,K+L=V_cachesz_0+F,K+L=V_cachesz_0+V_bits_left_0,V+F1+1=D1,V_big_values_0=G+1,M=5] 
* CE 96: eval_III_huffdecode_bb3_in(V_big_values_0,V_startbits_0,V_linbits_0,V_cachesz_0,V_bits_left_0,V_exp_0,B,C,D,E) = 2+ eval_III_huffdecode_bb15_in(F,V_startbits_0,V_linbits_0,V_cachesz_0,V_bits_left_0,V_exp_0,G,H,I,J,K,L,H,K,M,N,V_startbits_0,V_linbits_0,V_cachesz_0,V_bits_left_0,V_exp_0,G,H,I,J,K,O,P,Q,R,S,R,T):1+ eval_III_huffdecode_bb3_in(G,H,I,R,U,J,B,C,D,E)
     [V_cachesz_0+V_bits_left_0>=1,G>=0,V_cachesz_0+V_bits_left_0=K+U,V_cachesz_0+V_bits_left_0=K+T,V_cachesz_0+V_bits_left_0=K+O,V_cachesz_0+V_bits_left_0=K+L,G+1=N,G+1=F,G+1=V_big_values_0,M=2] 
* CE 97: eval_III_huffdecode_bb3_in(V_big_values_0,V_startbits_0,V_linbits_0,V_cachesz_0,V_bits_left_0,V_exp_0,B,C,D,E) = 2+ eval_III_huffdecode_bb15_in(V_big_values_0,V_startbits_0,V_linbits_0,V_cachesz_0,F,V_exp_0,G,H,I,J,K,L,H,K,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z,A1,B1,C1,D1,E1):8
     [K+L>=1,V_big_values_0>=1,K+L=V_cachesz_0+F,K+L=V_cachesz_0+V_bits_left_0,V_big_values_0=G+1,M=2] 
* CE 98: eval_III_huffdecode_bb3_in(V_big_values_0,V_startbits_0,V_linbits_0,V_cachesz_0,V_bits_left_0,V_exp_0,B,C,D,E) = 2+ eval_III_huffdecode_bb15_in(F,V_startbits_0,V_linbits_0,V_cachesz_0,V_bits_left_0,V_exp_0,G,H,I,J,K,L,H,K,M,N,V_startbits_0,V_linbits_0,V_cachesz_0,V_bits_left_0,V_exp_0,G,H,I,J,K,O,P,Q,R,S,T,U):2+ eval_III_huffdecode_bb3_in(G,H,I,V,W,J,B,C,D,E)
     [V_cachesz_0+V_bits_left_0>=1,G>=0,V_cachesz_0+V_bits_left_0=K+O,V_cachesz_0+V_bits_left_0=K+L,I+V+2=R,G+1=N,G+1=F,G+1=V_big_values_0,M=3] 
* CE 99: eval_III_huffdecode_bb3_in(V_big_values_0,V_startbits_0,V_linbits_0,V_cachesz_0,V_bits_left_0,V_exp_0,B,C,D,E) = 2+ eval_III_huffdecode_bb15_in(V_big_values_0,V_startbits_0,V_linbits_0,V_cachesz_0,F,V_exp_0,G,H,I,J,K,L,H,K,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z,A1,B1,C1,D1,E1):8
     [K+L>=1,V_big_values_0>=1,K+L=V_cachesz_0+F,K+L=V_cachesz_0+V_bits_left_0,V+F1+2=B1,V_big_values_0=G+1,M=3] 
* CE 100: eval_III_huffdecode_bb3_in(V_big_values_0,V_startbits_0,V_linbits_0,V_cachesz_0,V_bits_left_0,V_exp_0,B,C,D,E) = 2+ eval_III_huffdecode_bb15_in(F,V_startbits_0,V_linbits_0,V_cachesz_0,V_bits_left_0,V_exp_0,G,H,I,J,K,L,H,K,M,N,V_startbits_0,V_linbits_0,V_cachesz_0,V_bits_left_0,V_exp_0,G,H,I,J,K,O,P,Q,R,S,T,U):3+ eval_III_huffdecode_bb3_in(G,H,I,V,W,J,B,C,D,E)
     [V_cachesz_0+V_bits_left_0>=1,G>=0,V_cachesz_0+V_bits_left_0=K+O,V_cachesz_0+V_bits_left_0=K+L,V+2*I=R+14,G+1=N,G+1=F,G+1=V_big_values_0,M=4] 
* CE 101: eval_III_huffdecode_bb3_in(V_big_values_0,V_startbits_0,V_linbits_0,V_cachesz_0,V_bits_left_0,V_exp_0,B,C,D,E) = 2+ eval_III_huffdecode_bb15_in(V_big_values_0,V_startbits_0,V_linbits_0,V_cachesz_0,F,V_exp_0,G,H,I,J,K,L,H,K,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z,A1,B1,C1,D1,E1):8
     [K+L>=1,V_big_values_0>=1,K+L=V_cachesz_0+F,K+L=V_cachesz_0+V_bits_left_0,F1+2*V=B1+14,V_big_values_0=G+1,M=4] 
* CE 102: eval_III_huffdecode_bb3_in(V_big_values_0,V_startbits_0,V_linbits_0,V_cachesz_0,V_bits_left_0,V_exp_0,B,C,D,E) = 2+ eval_III_huffdecode_bb15_in(F,V_startbits_0,V_linbits_0,V_cachesz_0,V_bits_left_0,V_exp_0,G,H,I,J,K,L,H,K,M,N,V_startbits_0,V_linbits_0,V_cachesz_0,V_bits_left_0,V_exp_0,G,H,I,J,K,O,P,Q,R,S,R,T):4+ eval_III_huffdecode_bb3_in(G,H,I,U,V,J,B,C,D,E)
     [V_cachesz_0+V_bits_left_0>=1,G>=0,V_cachesz_0+V_bits_left_0=K+O,V_cachesz_0+V_bits_left_0=K+L,U+2*I+2=R,G+1=N,G+1=F,G+1=V_big_values_0,M=5] 
* CE 103: eval_III_huffdecode_bb3_in(V_big_values_0,V_startbits_0,V_linbits_0,V_cachesz_0,V_bits_left_0,V_exp_0,B,C,D,E) = 2+ eval_III_huffdecode_bb15_in(V_big_values_0,V_startbits_0,V_linbits_0,V_cachesz_0,F,V_exp_0,G,H,I,J,K,L,H,K,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z,A1,B1,C1,D1,E1):8
     [K+L>=1,V_big_values_0>=1,K+L=V_cachesz_0+F,K+L=V_cachesz_0+V_bits_left_0,F1+2*V+2=D1,V_big_values_0=G+1,M=5] 
* CE 104: eval_III_huffdecode_bb3_in(V_big_values_0,V_startbits_0,V_linbits_0,V_cachesz_0,V_bits_left_0,V_exp_0,B,C,D,E) = 2+ eval_III_huffdecode_bb15_in(F,V_startbits_0,V_linbits_0,V_cachesz_0,V_bits_left_0,V_exp_0,G,H,I,J,K,L,H,K,M,N,V_startbits_0,V_linbits_0,V_cachesz_0,V_bits_left_0,V_exp_0,G,H,I,J,K,O,P,Q,R,S,R,T):1+ eval_III_huffdecode_bb3_in(G,H,I,U,V,J,B,C,D,E)
     [V_cachesz_0+V_bits_left_0>=1,G>=0,V_cachesz_0+V_bits_left_0=K+T,V_cachesz_0+V_bits_left_0=K+O,V_cachesz_0+V_bits_left_0=K+L,I+U+1=R,G+1=N,G+1=F,G+1=V_big_values_0,M=2] 
* CE 105: eval_III_huffdecode_bb3_in(V_big_values_0,V_startbits_0,V_linbits_0,V_cachesz_0,V_bits_left_0,V_exp_0,B,C,D,E) = 2+ eval_III_huffdecode_bb15_in(V_big_values_0,V_startbits_0,V_linbits_0,V_cachesz_0,F,V_exp_0,G,H,I,J,K,L,H,K,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z,A1,B1,C1,D1,E1):8
     [K+L>=1,V_big_values_0>=1,K+L=V_cachesz_0+F,K+L=V_cachesz_0+V_bits_left_0,V+F1+1=D1,V_big_values_0=G+1,M=2] 
* CE 106: eval_III_huffdecode_bb3_in(V_big_values_0,V_startbits_0,V_linbits_0,V_cachesz_0,V_bits_left_0,V_exp_0,B,C,D,E) = 2+ eval_III_huffdecode_bb15_in(F,V_startbits_0,V_linbits_0,V_cachesz_0,V_bits_left_0,V_exp_0,G,H,I,J,K,L,H,K,M,N,V_startbits_0,V_linbits_0,V_cachesz_0,V_bits_left_0,V_exp_0,G,H,I,J,K,O,P,Q,R,S,T,U):2+ eval_III_huffdecode_bb3_in(G,H,I,V,W,J,B,C,D,E)
     [V_cachesz_0+V_bits_left_0>=1,G>=0,V_cachesz_0+V_bits_left_0=K+O,V_cachesz_0+V_bits_left_0=K+L,I+V=R+14,G+1=N,G+1=F,G+1=V_big_values_0,M=3] 
* CE 107: eval_III_huffdecode_bb3_in(V_big_values_0,V_startbits_0,V_linbits_0,V_cachesz_0,V_bits_left_0,V_exp_0,B,C,D,E) = 2+ eval_III_huffdecode_bb15_in(V_big_values_0,V_startbits_0,V_linbits_0,V_cachesz_0,F,V_exp_0,G,H,I,J,K,L,H,K,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z,A1,B1,C1,D1,E1):8
     [K+L>=1,V_big_values_0>=1,K+L=V_cachesz_0+F,K+L=V_cachesz_0+V_bits_left_0,V+F1=B1+14,V_big_values_0=G+1,M=3] 
* CE 108: eval_III_huffdecode_bb3_in(V_big_values_0,V_startbits_0,V_linbits_0,V_cachesz_0,V_bits_left_0,V_exp_0,B,C,D,E) = 2+ eval_III_huffdecode_bb15_in(F,V_startbits_0,V_linbits_0,V_cachesz_0,V_bits_left_0,V_exp_0,G,H,I,J,K,L,H,K,M,N,V_startbits_0,V_linbits_0,V_cachesz_0,V_bits_left_0,V_exp_0,G,H,I,J,K,O,P,Q,R,S,T,U):3+ eval_III_huffdecode_bb3_in(G,H,I,V,W,J,B,C,D,E)
     [V_cachesz_0+V_bits_left_0>=1,G>=0,V_cachesz_0+V_bits_left_0=K+O,V_cachesz_0+V_bits_left_0=K+L,V+2*I=R+30,G+1=N,G+1=F,G+1=V_big_values_0,M=4] 
* CE 109: eval_III_huffdecode_bb3_in(V_big_values_0,V_startbits_0,V_linbits_0,V_cachesz_0,V_bits_left_0,V_exp_0,B,C,D,E) = 2+ eval_III_huffdecode_bb15_in(V_big_values_0,V_startbits_0,V_linbits_0,V_cachesz_0,F,V_exp_0,G,H,I,J,K,L,H,K,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z,A1,B1,C1,D1,E1):8
     [K+L>=1,V_big_values_0>=1,K+L=V_cachesz_0+F,K+L=V_cachesz_0+V_bits_left_0,F1+2*V=B1+30,V_big_values_0=G+1,M=4] 
* CE 110: eval_III_huffdecode_bb3_in(V_big_values_0,V_startbits_0,V_linbits_0,V_cachesz_0,V_bits_left_0,V_exp_0,B,C,D,E) = 2+ eval_III_huffdecode_bb15_in(F,V_startbits_0,V_linbits_0,V_cachesz_0,V_bits_left_0,V_exp_0,G,H,I,J,K,L,H,K,M,N,V_startbits_0,V_linbits_0,V_cachesz_0,V_bits_left_0,V_exp_0,G,H,I,J,K,O,P,Q,R,S,R,T):4+ eval_III_huffdecode_bb3_in(G,H,I,U,V,J,B,C,D,E)
     [V_cachesz_0+V_bits_left_0>=1,G>=0,V_cachesz_0+V_bits_left_0=K+O,V_cachesz_0+V_bits_left_0=K+L,U+2*I=R+14,G+1=N,G+1=F,G+1=V_big_values_0,M=5] 
* CE 111: eval_III_huffdecode_bb3_in(V_big_values_0,V_startbits_0,V_linbits_0,V_cachesz_0,V_bits_left_0,V_exp_0,B,C,D,E) = 2+ eval_III_huffdecode_bb15_in(V_big_values_0,V_startbits_0,V_linbits_0,V_cachesz_0,F,V_exp_0,G,H,I,J,K,L,H,K,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z,A1,B1,C1,D1,E1):8
     [K+L>=1,V_big_values_0>=1,K+L=V_cachesz_0+F,K+L=V_cachesz_0+V_bits_left_0,F1+2*V=D1+14,V_big_values_0=G+1,M=5] 
* CE 112: eval_III_huffdecode_bb3_in(V_big_values_0,V_startbits_0,V_linbits_0,V_cachesz_0,V_bits_left_0,V_exp_0,B,C,D,E) = 2+ eval_III_huffdecode_bb15_in(F,V_startbits_0,V_linbits_0,V_cachesz_0,V_bits_left_0,V_exp_0,G,H,I,J,K,L,H,K,M,N,V_startbits_0,V_linbits_0,V_cachesz_0,V_bits_left_0,V_exp_0,G,H,I,J,K,O,P,Q,R,S,R,T):1+ eval_III_huffdecode_bb3_in(G,H,I,U,V,J,B,C,D,E)
     [V_cachesz_0+V_bits_left_0>=1,G>=0,V_cachesz_0+V_bits_left_0=K+T,V_cachesz_0+V_bits_left_0=K+O,V_cachesz_0+V_bits_left_0=K+L,I+U=R+15,G+1=N,G+1=F,G+1=V_big_values_0,M=2] 
* CE 113: eval_III_huffdecode_bb3_in(V_big_values_0,V_startbits_0,V_linbits_0,V_cachesz_0,V_bits_left_0,V_exp_0,B,C,D,E) = 2+ eval_III_huffdecode_bb15_in(V_big_values_0,V_startbits_0,V_linbits_0,V_cachesz_0,F,V_exp_0,G,H,I,J,K,L,H,K,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z,A1,B1,C1,D1,E1):8
     [K+L>=1,V_big_values_0>=1,K+L=V_cachesz_0+F,K+L=V_cachesz_0+V_bits_left_0,V+F1=D1+15,V_big_values_0=G+1,M=2] 
* CE 114: eval_III_huffdecode_bb3_in(V_big_values_0,V_startbits_0,V_linbits_0,V_cachesz_0,V_bits_left_0,V_exp_0,B,C,D,E) = 2+ eval_III_huffdecode_bb15_in(F,V_startbits_0,V_linbits_0,V_cachesz_0,V_bits_left_0,V_exp_0,G,H,I,J,K,L,H,K,M,N,V_startbits_0,V_linbits_0,V_cachesz_0,V_bits_left_0,V_exp_0,G,H,I,J,K,O,P,Q,R,S,T,U):2+ eval_III_huffdecode_bb3_in(G,H,I,V,W,J,B,C,D,E)
     [V_cachesz_0+V_bits_left_0>=1,G>=0,V_cachesz_0+V_bits_left_0=K+O,V_cachesz_0+V_bits_left_0=K+L,V+2=R,G+1=N,G+1=F,G+1=V_big_values_0,M=3] 
* CE 115: eval_III_huffdecode_bb3_in(V_big_values_0,V_startbits_0,V_linbits_0,V_cachesz_0,V_bits_left_0,V_exp_0,B,C,D,E) = 2+ eval_III_huffdecode_bb15_in(V_big_values_0,V_startbits_0,V_linbits_0,V_cachesz_0,F,V_exp_0,G,H,I,J,K,L,H,K,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z,A1,B1,C1,D1,E1):8
     [K+L>=1,V_big_values_0>=1,K+L=V_cachesz_0+F,K+L=V_cachesz_0+V_bits_left_0,F1+2=B1,V_big_values_0=G+1,M=3] 
* CE 116: eval_III_huffdecode_bb3_in(V_big_values_0,V_startbits_0,V_linbits_0,V_cachesz_0,V_bits_left_0,V_exp_0,B,C,D,E) = 2+ eval_III_huffdecode_bb15_in(F,V_startbits_0,V_linbits_0,V_cachesz_0,V_bits_left_0,V_exp_0,G,H,I,J,K,L,H,K,M,N,V_startbits_0,V_linbits_0,V_cachesz_0,V_bits_left_0,V_exp_0,G,H,I,J,K,O,P,Q,R,S,T,U):3+ eval_III_huffdecode_bb3_in(G,H,I,V,W,J,B,C,D,E)
     [V_cachesz_0+V_bits_left_0>=1,G>=0,V_cachesz_0+V_bits_left_0=K+O,V_cachesz_0+V_bits_left_0=K+L,I+V=R+14,G+1=N,G+1=F,G+1=V_big_values_0,M=4] 
* CE 117: eval_III_huffdecode_bb3_in(V_big_values_0,V_startbits_0,V_linbits_0,V_cachesz_0,V_bits_left_0,V_exp_0,B,C,D,E) = 2+ eval_III_huffdecode_bb15_in(V_big_values_0,V_startbits_0,V_linbits_0,V_cachesz_0,F,V_exp_0,G,H,I,J,K,L,H,K,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z,A1,B1,C1,D1,E1):8
     [K+L>=1,V_big_values_0>=1,K+L=V_cachesz_0+F,K+L=V_cachesz_0+V_bits_left_0,V+F1=B1+14,V_big_values_0=G+1,M=4] 
* CE 118: eval_III_huffdecode_bb3_in(V_big_values_0,V_startbits_0,V_linbits_0,V_cachesz_0,V_bits_left_0,V_exp_0,B,C,D,E) = 2+ eval_III_huffdecode_bb15_in(F,V_startbits_0,V_linbits_0,V_cachesz_0,V_bits_left_0,V_exp_0,G,H,I,J,K,L,H,K,M,N,V_startbits_0,V_linbits_0,V_cachesz_0,V_bits_left_0,V_exp_0,G,H,I,J,K,O,P,Q,R,S,R,T):4+ eval_III_huffdecode_bb3_in(G,H,I,U,V,J,B,C,D,E)
     [V_cachesz_0+V_bits_left_0>=1,G>=0,V_cachesz_0+V_bits_left_0=K+O,V_cachesz_0+V_bits_left_0=K+L,I+U+2=R,G+1=N,G+1=F,G+1=V_big_values_0,M=5] 
* CE 119: eval_III_huffdecode_bb3_in(V_big_values_0,V_startbits_0,V_linbits_0,V_cachesz_0,V_bits_left_0,V_exp_0,B,C,D,E) = 2+ eval_III_huffdecode_bb15_in(V_big_values_0,V_startbits_0,V_linbits_0,V_cachesz_0,F,V_exp_0,G,H,I,J,K,L,H,K,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z,A1,B1,C1,D1,E1):8
     [K+L>=1,V_big_values_0>=1,K+L=V_cachesz_0+F,K+L=V_cachesz_0+V_bits_left_0,V+F1+2=D1,V_big_values_0=G+1,M=5] 
* CE 120: eval_III_huffdecode_bb3_in(V_big_values_0,V_startbits_0,V_linbits_0,V_cachesz_0,V_bits_left_0,V_exp_0,B,C,D,E) = 2+ eval_III_huffdecode_bb15_in(F,V_startbits_0,V_linbits_0,V_cachesz_0,V_bits_left_0,V_exp_0,G,H,I,J,K,L,H,K,M,N,V_startbits_0,V_linbits_0,V_cachesz_0,V_bits_left_0,V_exp_0,G,H,I,J,K,O,P,Q,R,S,R,T):1+ eval_III_huffdecode_bb3_in(G,H,I,U,V,J,B,C,D,E)
     [V_cachesz_0+V_bits_left_0>=1,G>=0,V_cachesz_0+V_bits_left_0=K+V,V_cachesz_0+V_bits_left_0=K+T,V_cachesz_0+V_bits_left_0=K+O,V_cachesz_0+V_bits_left_0=K+L,R=U+1,G+1=N,G+1=F,G+1=V_big_values_0,M=2] 
* CE 121: eval_III_huffdecode_bb3_in(V_big_values_0,V_startbits_0,V_linbits_0,V_cachesz_0,V_bits_left_0,V_exp_0,B,C,D,E) = 2+ eval_III_huffdecode_bb15_in(V_big_values_0,V_startbits_0,V_linbits_0,V_cachesz_0,F,V_exp_0,G,H,I,J,K,L,H,K,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z,A1,B1,C1,D1,E1):8
     [K+L>=1,V_big_values_0>=1,K+L=V_cachesz_0+F,K+L=V_cachesz_0+V_bits_left_0,F1+1=D1,V_big_values_0=G+1,M=2] 
* CE 122: eval_III_huffdecode_bb3_in(V_big_values_0,V_startbits_0,V_linbits_0,V_cachesz_0,V_bits_left_0,V_exp_0,B,C,D,E) = 2+ eval_III_huffdecode_bb15_in(F,V_startbits_0,V_linbits_0,V_cachesz_0,V_bits_left_0,V_exp_0,G,H,I,J,K,L,H,K,M,N,V_startbits_0,V_linbits_0,V_cachesz_0,V_bits_left_0,V_exp_0,G,H,I,J,K,O,P,Q,R,S,T,U):7+ eval_III_huffdecode_bb3_in(G,H,I,V,W,J,B,C,D,E)
     [V_cachesz_0+V_bits_left_0>=1,G>=0,V_cachesz_0+V_bits_left_0=K+W,V_cachesz_0+V_bits_left_0=K+O,V_cachesz_0+V_bits_left_0=K+L,V+1=R,G+1=N,G+1=F,G+1=V_big_values_0,M=8] 
* CE 123: eval_III_huffdecode_bb3_in(V_big_values_0,V_startbits_0,V_linbits_0,V_cachesz_0,V_bits_left_0,V_exp_0,B,C,D,E) = 2+ eval_III_huffdecode_bb15_in(V_big_values_0,V_startbits_0,V_linbits_0,V_cachesz_0,F,V_exp_0,G,H,I,J,K,L,H,K,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z,A1,B1,C1,D1,E1):8
     [K+L>=1,V_big_values_0>=1,K+L=V_cachesz_0+F,K+L=V_cachesz_0+V_bits_left_0,F1+1=B1,V_big_values_0=G+1,M=8] 
* CE 124: eval_III_huffdecode_bb3_in(V_big_values_0,V_startbits_0,V_linbits_0,V_cachesz_0,V_bits_left_0,V_exp_0,B,C,D,E) = 2+ eval_III_huffdecode_bb15_in(F,V_startbits_0,V_linbits_0,V_cachesz_0,V_bits_left_0,V_exp_0,G,H,I,J,K,L,H,K,M,N,V_startbits_0,V_linbits_0,V_cachesz_0,V_bits_left_0,V_exp_0,G,H,I,J,K,O,P,Q,R,S,T,U):6+ eval_III_huffdecode_bb3_in(G,H,I,V,W,J,B,C,D,E)
     [V_cachesz_0+V_bits_left_0>=1,G>=0,V_cachesz_0+V_bits_left_0=K+W,V_cachesz_0+V_bits_left_0=K+O,V_cachesz_0+V_bits_left_0=K+L,V+1=R,G+1=N,G+1=F,G+1=V_big_values_0,M=7] 
* CE 125: eval_III_huffdecode_bb3_in(V_big_values_0,V_startbits_0,V_linbits_0,V_cachesz_0,V_bits_left_0,V_exp_0,B,C,D,E) = 2+ eval_III_huffdecode_bb15_in(V_big_values_0,V_startbits_0,V_linbits_0,V_cachesz_0,F,V_exp_0,G,H,I,J,K,L,H,K,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z,A1,B1,C1,D1,E1):8
     [K+L>=1,V_big_values_0>=1,K+L=V_cachesz_0+F,K+L=V_cachesz_0+V_bits_left_0,F1+1=B1,V_big_values_0=G+1,M=7] 
* CE 126: eval_III_huffdecode_bb3_in(V_big_values_0,V_startbits_0,V_linbits_0,V_cachesz_0,V_bits_left_0,V_exp_0,B,C,D,E) = 2+ eval_III_huffdecode_bb15_in(F,V_startbits_0,V_linbits_0,V_cachesz_0,V_bits_left_0,V_exp_0,G,H,I,J,K,L,H,K,M,N,V_startbits_0,V_linbits_0,V_cachesz_0,V_bits_left_0,V_exp_0,G,H,I,J,K,O,P,Q,R,S,R,T):5+ eval_III_huffdecode_bb3_in(G,H,I,R,U,J,B,C,D,E)
     [V_cachesz_0+V_bits_left_0>=1,G>=0,V_cachesz_0+V_bits_left_0=K+U,V_cachesz_0+V_bits_left_0=K+O,V_cachesz_0+V_bits_left_0=K+L,G+1=N,G+1=F,G+1=V_big_values_0,M=6] 
* CE 127: eval_III_huffdecode_bb3_in(V_big_values_0,V_startbits_0,V_linbits_0,V_cachesz_0,V_bits_left_0,V_exp_0,B,C,D,E) = 2+ eval_III_huffdecode_bb15_in(V_big_values_0,V_startbits_0,V_linbits_0,V_cachesz_0,F,V_exp_0,G,H,I,J,K,L,H,K,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z,A1,B1,C1,D1,E1):8
     [K+L>=1,V_big_values_0>=1,K+L=V_cachesz_0+F,K+L=V_cachesz_0+V_bits_left_0,V_big_values_0=G+1,M=6] 
* CE 128: eval_III_huffdecode_bb3_in(V_big_values_0,V_startbits_0,V_linbits_0,V_cachesz_0,V_bits_left_0,V_exp_0,B,C,D,E) = 2+ eval_III_huffdecode_bb15_in(F,V_startbits_0,V_linbits_0,V_cachesz_0,V_bits_left_0,V_exp_0,G,H,I,J,K,L,H,K,M,N,V_startbits_0,V_linbits_0,V_cachesz_0,V_bits_left_0,V_exp_0,G,H,I,J,K,O,P,Q,R,S,T,U):7+ eval_III_huffdecode_bb3_in(G,H,I,V,W,J,B,C,D,E)
     [V_cachesz_0+V_bits_left_0>=1,G>=0,V_cachesz_0+V_bits_left_0=K+W,V_cachesz_0+V_bits_left_0=K+O,V_cachesz_0+V_bits_left_0=K+L,V+2=R,G+1=N,G+1=F,G+1=V_big_values_0,M=8] 
* CE 129: eval_III_huffdecode_bb3_in(V_big_values_0,V_startbits_0,V_linbits_0,V_cachesz_0,V_bits_left_0,V_exp_0,B,C,D,E) = 2+ eval_III_huffdecode_bb15_in(V_big_values_0,V_startbits_0,V_linbits_0,V_cachesz_0,F,V_exp_0,G,H,I,J,K,L,H,K,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z,A1,B1,C1,D1,E1):8
     [K+L>=1,V_big_values_0>=1,K+L=V_cachesz_0+F,K+L=V_cachesz_0+V_bits_left_0,F1+2=B1,V_big_values_0=G+1,M=8] 
* CE 130: eval_III_huffdecode_bb3_in(V_big_values_0,V_startbits_0,V_linbits_0,V_cachesz_0,V_bits_left_0,V_exp_0,B,C,D,E) = 2+ eval_III_huffdecode_bb15_in(F,V_startbits_0,V_linbits_0,V_cachesz_0,V_bits_left_0,V_exp_0,G,H,I,J,K,L,H,K,M,N,V_startbits_0,V_linbits_0,V_cachesz_0,V_bits_left_0,V_exp_0,G,H,I,J,K,O,P,Q,R,S,T,U):6+ eval_III_huffdecode_bb3_in(G,H,I,V,W,J,B,C,D,E)
     [V_cachesz_0+V_bits_left_0>=1,G>=0,V_cachesz_0+V_bits_left_0=K+W,V_cachesz_0+V_bits_left_0=K+O,V_cachesz_0+V_bits_left_0=K+L,V+2=R,G+1=N,G+1=F,G+1=V_big_values_0,M=7] 
* CE 131: eval_III_huffdecode_bb3_in(V_big_values_0,V_startbits_0,V_linbits_0,V_cachesz_0,V_bits_left_0,V_exp_0,B,C,D,E) = 2+ eval_III_huffdecode_bb15_in(V_big_values_0,V_startbits_0,V_linbits_0,V_cachesz_0,F,V_exp_0,G,H,I,J,K,L,H,K,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z,A1,B1,C1,D1,E1):8
     [K+L>=1,V_big_values_0>=1,K+L=V_cachesz_0+F,K+L=V_cachesz_0+V_bits_left_0,F1+2=B1,V_big_values_0=G+1,M=7] 
* CE 132: eval_III_huffdecode_bb3_in(V_big_values_0,V_startbits_0,V_linbits_0,V_cachesz_0,V_bits_left_0,V_exp_0,B,C,D,E) = 2+ eval_III_huffdecode_bb15_in(F,V_startbits_0,V_linbits_0,V_cachesz_0,V_bits_left_0,V_exp_0,G,H,I,J,K,L,H,K,M,N,V_startbits_0,V_linbits_0,V_cachesz_0,V_bits_left_0,V_exp_0,G,H,I,J,K,O,P,Q,R,S,R,T):5+ eval_III_huffdecode_bb3_in(G,H,I,U,V,J,B,C,D,E)
     [V_cachesz_0+V_bits_left_0>=1,G>=0,V_cachesz_0+V_bits_left_0=K+V,V_cachesz_0+V_bits_left_0=K+O,V_cachesz_0+V_bits_left_0=K+L,R=U+1,G+1=N,G+1=F,G+1=V_big_values_0,M=6] 
* CE 133: eval_III_huffdecode_bb3_in(V_big_values_0,V_startbits_0,V_linbits_0,V_cachesz_0,V_bits_left_0,V_exp_0,B,C,D,E) = 2+ eval_III_huffdecode_bb15_in(V_big_values_0,V_startbits_0,V_linbits_0,V_cachesz_0,F,V_exp_0,G,H,I,J,K,L,H,K,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z,A1,B1,C1,D1,E1):8
     [K+L>=1,V_big_values_0>=1,K+L=V_cachesz_0+F,K+L=V_cachesz_0+V_bits_left_0,F1+1=D1,V_big_values_0=G+1,M=6] 
* CE 134: eval_III_huffdecode_bb3_in(V_big_values_0,V_startbits_0,V_linbits_0,V_cachesz_0,V_bits_left_0,V_exp_0,B,C,D,E) = 2+ eval_III_huffdecode_bb15_in(F,V_startbits_0,V_linbits_0,V_cachesz_0,V_bits_left_0,V_exp_0,G,H,I,J,K,L,H,K,M,N,V_startbits_0,V_linbits_0,V_cachesz_0,V_bits_left_0,V_exp_0,G,H,I,J,K,O,P,Q,R,S,T,U):2+ eval_III_huffdecode_bb3_in(G,H,I,V,W,J,B,C,D,E)
     [V_cachesz_0+V_bits_left_0>=1,0>=G+2,V_cachesz_0+V_bits_left_0=K+O,V_cachesz_0+V_bits_left_0=K+L,V+1=R,G+1=N,G+1=F,G+1=V_big_values_0,M=3] 
* CE 135: eval_III_huffdecode_bb3_in(V_big_values_0,V_startbits_0,V_linbits_0,V_cachesz_0,V_bits_left_0,V_exp_0,B,C,D,E) = 2+ eval_III_huffdecode_bb15_in(V_big_values_0,V_startbits_0,V_linbits_0,V_cachesz_0,F,V_exp_0,G,H,I,J,K,L,H,K,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z,A1,B1,C1,D1,E1):8
     [K+L>=1,0>=V_big_values_0+1,K+L=V_cachesz_0+F,K+L=V_cachesz_0+V_bits_left_0,F1+1=B1,V_big_values_0=G+1,M=3] 
* CE 136: eval_III_huffdecode_bb3_in(V_big_values_0,V_startbits_0,V_linbits_0,V_cachesz_0,V_bits_left_0,V_exp_0,B,C,D,E) = 2+ eval_III_huffdecode_bb15_in(F,V_startbits_0,V_linbits_0,V_cachesz_0,V_bits_left_0,V_exp_0,G,H,I,J,K,L,H,K,M,N,V_startbits_0,V_linbits_0,V_cachesz_0,V_bits_left_0,V_exp_0,G,H,I,J,K,O,P,Q,R,S,T,U):3+ eval_III_huffdecode_bb3_in(G,H,I,V,W,J,B,C,D,E)
     [V_cachesz_0+V_bits_left_0>=1,0>=G+2,V_cachesz_0+V_bits_left_0=K+O,V_cachesz_0+V_bits_left_0=K+L,I+V=R+15,G+1=N,G+1=F,G+1=V_big_values_0,M=4] 
* CE 137: eval_III_huffdecode_bb3_in(V_big_values_0,V_startbits_0,V_linbits_0,V_cachesz_0,V_bits_left_0,V_exp_0,B,C,D,E) = 2+ eval_III_huffdecode_bb15_in(V_big_values_0,V_startbits_0,V_linbits_0,V_cachesz_0,F,V_exp_0,G,H,I,J,K,L,H,K,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z,A1,B1,C1,D1,E1):8
     [K+L>=1,0>=V_big_values_0+1,K+L=V_cachesz_0+F,K+L=V_cachesz_0+V_bits_left_0,V+F1=B1+15,V_big_values_0=G+1,M=4] 
* CE 138: eval_III_huffdecode_bb3_in(V_big_values_0,V_startbits_0,V_linbits_0,V_cachesz_0,V_bits_left_0,V_exp_0,B,C,D,E) = 2+ eval_III_huffdecode_bb15_in(F,V_startbits_0,V_linbits_0,V_cachesz_0,V_bits_left_0,V_exp_0,G,H,I,J,K,L,H,K,M,N,V_startbits_0,V_linbits_0,V_cachesz_0,V_bits_left_0,V_exp_0,G,H,I,J,K,O,P,Q,R,S,R,T):4+ eval_III_huffdecode_bb3_in(G,H,I,U,V,J,B,C,D,E)
     [V_cachesz_0+V_bits_left_0>=1,0>=G+2,V_cachesz_0+V_bits_left_0=K+O,V_cachesz_0+V_bits_left_0=K+L,I+U+1=R,G+1=N,G+1=F,G+1=V_big_values_0,M=5] 
* CE 139: eval_III_huffdecode_bb3_in(V_big_values_0,V_startbits_0,V_linbits_0,V_cachesz_0,V_bits_left_0,V_exp_0,B,C,D,E) = 2+ eval_III_huffdecode_bb15_in(V_big_values_0,V_startbits_0,V_linbits_0,V_cachesz_0,F,V_exp_0,G,H,I,J,K,L,H,K,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z,A1,B1,C1,D1,E1):8
     [K+L>=1,0>=V_big_values_0+1,K+L=V_cachesz_0+F,K+L=V_cachesz_0+V_bits_left_0,V+F1+1=D1,V_big_values_0=G+1,M=5] 
* CE 140: eval_III_huffdecode_bb3_in(V_big_values_0,V_startbits_0,V_linbits_0,V_cachesz_0,V_bits_left_0,V_exp_0,B,C,D,E) = 2+ eval_III_huffdecode_bb15_in(F,V_startbits_0,V_linbits_0,V_cachesz_0,V_bits_left_0,V_exp_0,G,H,I,J,K,L,H,K,M,N,V_startbits_0,V_linbits_0,V_cachesz_0,V_bits_left_0,V_exp_0,G,H,I,J,K,O,P,Q,R,S,R,T):1+ eval_III_huffdecode_bb3_in(G,H,I,R,U,J,B,C,D,E)
     [V_cachesz_0+V_bits_left_0>=1,0>=G+2,V_cachesz_0+V_bits_left_0=K+U,V_cachesz_0+V_bits_left_0=K+T,V_cachesz_0+V_bits_left_0=K+O,V_cachesz_0+V_bits_left_0=K+L,G+1=N,G+1=F,G+1=V_big_values_0,M=2] 
* CE 141: eval_III_huffdecode_bb3_in(V_big_values_0,V_startbits_0,V_linbits_0,V_cachesz_0,V_bits_left_0,V_exp_0,B,C,D,E) = 2+ eval_III_huffdecode_bb15_in(V_big_values_0,V_startbits_0,V_linbits_0,V_cachesz_0,F,V_exp_0,G,H,I,J,K,L,H,K,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z,A1,B1,C1,D1,E1):8
     [K+L>=1,0>=V_big_values_0+1,K+L=V_cachesz_0+F,K+L=V_cachesz_0+V_bits_left_0,V_big_values_0=G+1,M=2] 
* CE 142: eval_III_huffdecode_bb3_in(V_big_values_0,V_startbits_0,V_linbits_0,V_cachesz_0,V_bits_left_0,V_exp_0,B,C,D,E) = 2+ eval_III_huffdecode_bb15_in(F,V_startbits_0,V_linbits_0,V_cachesz_0,V_bits_left_0,V_exp_0,G,H,I,J,K,L,H,K,M,N,V_startbits_0,V_linbits_0,V_cachesz_0,V_bits_left_0,V_exp_0,G,H,I,J,K,O,P,Q,R,S,T,U):2+ eval_III_huffdecode_bb3_in(G,H,I,V,W,J,B,C,D,E)
     [V_cachesz_0+V_bits_left_0>=1,0>=G+2,V_cachesz_0+V_bits_left_0=K+O,V_cachesz_0+V_bits_left_0=K+L,I+V+2=R,G+1=N,G+1=F,G+1=V_big_values_0,M=3] 
* CE 143: eval_III_huffdecode_bb3_in(V_big_values_0,V_startbits_0,V_linbits_0,V_cachesz_0,V_bits_left_0,V_exp_0,B,C,D,E) = 2+ eval_III_huffdecode_bb15_in(V_big_values_0,V_startbits_0,V_linbits_0,V_cachesz_0,F,V_exp_0,G,H,I,J,K,L,H,K,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z,A1,B1,C1,D1,E1):8
     [K+L>=1,0>=V_big_values_0+1,K+L=V_cachesz_0+F,K+L=V_cachesz_0+V_bits_left_0,V+F1+2=B1,V_big_values_0=G+1,M=3] 
* CE 144: eval_III_huffdecode_bb3_in(V_big_values_0,V_startbits_0,V_linbits_0,V_cachesz_0,V_bits_left_0,V_exp_0,B,C,D,E) = 2+ eval_III_huffdecode_bb15_in(F,V_startbits_0,V_linbits_0,V_cachesz_0,V_bits_left_0,V_exp_0,G,H,I,J,K,L,H,K,M,N,V_startbits_0,V_linbits_0,V_cachesz_0,V_bits_left_0,V_exp_0,G,H,I,J,K,O,P,Q,R,S,T,U):3+ eval_III_huffdecode_bb3_in(G,H,I,V,W,J,B,C,D,E)
     [V_cachesz_0+V_bits_left_0>=1,0>=G+2,V_cachesz_0+V_bits_left_0=K+O,V_cachesz_0+V_bits_left_0=K+L,V+2*I=R+14,G+1=N,G+1=F,G+1=V_big_values_0,M=4] 
* CE 145: eval_III_huffdecode_bb3_in(V_big_values_0,V_startbits_0,V_linbits_0,V_cachesz_0,V_bits_left_0,V_exp_0,B,C,D,E) = 2+ eval_III_huffdecode_bb15_in(V_big_values_0,V_startbits_0,V_linbits_0,V_cachesz_0,F,V_exp_0,G,H,I,J,K,L,H,K,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z,A1,B1,C1,D1,E1):8
     [K+L>=1,0>=V_big_values_0+1,K+L=V_cachesz_0+F,K+L=V_cachesz_0+V_bits_left_0,F1+2*V=B1+14,V_big_values_0=G+1,M=4] 
* CE 146: eval_III_huffdecode_bb3_in(V_big_values_0,V_startbits_0,V_linbits_0,V_cachesz_0,V_bits_left_0,V_exp_0,B,C,D,E) = 2+ eval_III_huffdecode_bb15_in(F,V_startbits_0,V_linbits_0,V_cachesz_0,V_bits_left_0,V_exp_0,G,H,I,J,K,L,H,K,M,N,V_startbits_0,V_linbits_0,V_cachesz_0,V_bits_left_0,V_exp_0,G,H,I,J,K,O,P,Q,R,S,R,T):4+ eval_III_huffdecode_bb3_in(G,H,I,U,V,J,B,C,D,E)
     [V_cachesz_0+V_bits_left_0>=1,0>=G+2,V_cachesz_0+V_bits_left_0=K+O,V_cachesz_0+V_bits_left_0=K+L,U+2*I+2=R,G+1=N,G+1=F,G+1=V_big_values_0,M=5] 
* CE 147: eval_III_huffdecode_bb3_in(V_big_values_0,V_startbits_0,V_linbits_0,V_cachesz_0,V_bits_left_0,V_exp_0,B,C,D,E) = 2+ eval_III_huffdecode_bb15_in(V_big_values_0,V_startbits_0,V_linbits_0,V_cachesz_0,F,V_exp_0,G,H,I,J,K,L,H,K,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z,A1,B1,C1,D1,E1):8
     [K+L>=1,0>=V_big_values_0+1,K+L=V_cachesz_0+F,K+L=V_cachesz_0+V_bits_left_0,F1+2*V+2=D1,V_big_values_0=G+1,M=5] 
* CE 148: eval_III_huffdecode_bb3_in(V_big_values_0,V_startbits_0,V_linbits_0,V_cachesz_0,V_bits_left_0,V_exp_0,B,C,D,E) = 2+ eval_III_huffdecode_bb15_in(F,V_startbits_0,V_linbits_0,V_cachesz_0,V_bits_left_0,V_exp_0,G,H,I,J,K,L,H,K,M,N,V_startbits_0,V_linbits_0,V_cachesz_0,V_bits_left_0,V_exp_0,G,H,I,J,K,O,P,Q,R,S,R,T):1+ eval_III_huffdecode_bb3_in(G,H,I,U,V,J,B,C,D,E)
     [V_cachesz_0+V_bits_left_0>=1,0>=G+2,V_cachesz_0+V_bits_left_0=K+T,V_cachesz_0+V_bits_left_0=K+O,V_cachesz_0+V_bits_left_0=K+L,I+U+1=R,G+1=N,G+1=F,G+1=V_big_values_0,M=2] 
* CE 149: eval_III_huffdecode_bb3_in(V_big_values_0,V_startbits_0,V_linbits_0,V_cachesz_0,V_bits_left_0,V_exp_0,B,C,D,E) = 2+ eval_III_huffdecode_bb15_in(V_big_values_0,V_startbits_0,V_linbits_0,V_cachesz_0,F,V_exp_0,G,H,I,J,K,L,H,K,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z,A1,B1,C1,D1,E1):8
     [K+L>=1,0>=V_big_values_0+1,K+L=V_cachesz_0+F,K+L=V_cachesz_0+V_bits_left_0,V+F1+1=D1,V_big_values_0=G+1,M=2] 
* CE 150: eval_III_huffdecode_bb3_in(V_big_values_0,V_startbits_0,V_linbits_0,V_cachesz_0,V_bits_left_0,V_exp_0,B,C,D,E) = 2+ eval_III_huffdecode_bb15_in(F,V_startbits_0,V_linbits_0,V_cachesz_0,V_bits_left_0,V_exp_0,G,H,I,J,K,L,H,K,M,N,V_startbits_0,V_linbits_0,V_cachesz_0,V_bits_left_0,V_exp_0,G,H,I,J,K,O,P,Q,R,S,T,U):2+ eval_III_huffdecode_bb3_in(G,H,I,V,W,J,B,C,D,E)
     [V_cachesz_0+V_bits_left_0>=1,0>=G+2,V_cachesz_0+V_bits_left_0=K+O,V_cachesz_0+V_bits_left_0=K+L,I+V=R+14,G+1=N,G+1=F,G+1=V_big_values_0,M=3] 
* CE 151: eval_III_huffdecode_bb3_in(V_big_values_0,V_startbits_0,V_linbits_0,V_cachesz_0,V_bits_left_0,V_exp_0,B,C,D,E) = 2+ eval_III_huffdecode_bb15_in(V_big_values_0,V_startbits_0,V_linbits_0,V_cachesz_0,F,V_exp_0,G,H,I,J,K,L,H,K,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z,A1,B1,C1,D1,E1):8
     [K+L>=1,0>=V_big_values_0+1,K+L=V_cachesz_0+F,K+L=V_cachesz_0+V_bits_left_0,V+F1=B1+14,V_big_values_0=G+1,M=3] 
* CE 152: eval_III_huffdecode_bb3_in(V_big_values_0,V_startbits_0,V_linbits_0,V_cachesz_0,V_bits_left_0,V_exp_0,B,C,D,E) = 2+ eval_III_huffdecode_bb15_in(F,V_startbits_0,V_linbits_0,V_cachesz_0,V_bits_left_0,V_exp_0,G,H,I,J,K,L,H,K,M,N,V_startbits_0,V_linbits_0,V_cachesz_0,V_bits_left_0,V_exp_0,G,H,I,J,K,O,P,Q,R,S,T,U):3+ eval_III_huffdecode_bb3_in(G,H,I,V,W,J,B,C,D,E)
     [V_cachesz_0+V_bits_left_0>=1,0>=G+2,V_cachesz_0+V_bits_left_0=K+O,V_cachesz_0+V_bits_left_0=K+L,V+2*I=R+30,G+1=N,G+1=F,G+1=V_big_values_0,M=4] 
* CE 153: eval_III_huffdecode_bb3_in(V_big_values_0,V_startbits_0,V_linbits_0,V_cachesz_0,V_bits_left_0,V_exp_0,B,C,D,E) = 2+ eval_III_huffdecode_bb15_in(V_big_values_0,V_startbits_0,V_linbits_0,V_cachesz_0,F,V_exp_0,G,H,I,J,K,L,H,K,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z,A1,B1,C1,D1,E1):8
     [K+L>=1,0>=V_big_values_0+1,K+L=V_cachesz_0+F,K+L=V_cachesz_0+V_bits_left_0,F1+2*V=B1+30,V_big_values_0=G+1,M=4] 
* CE 154: eval_III_huffdecode_bb3_in(V_big_values_0,V_startbits_0,V_linbits_0,V_cachesz_0,V_bits_left_0,V_exp_0,B,C,D,E) = 2+ eval_III_huffdecode_bb15_in(F,V_startbits_0,V_linbits_0,V_cachesz_0,V_bits_left_0,V_exp_0,G,H,I,J,K,L,H,K,M,N,V_startbits_0,V_linbits_0,V_cachesz_0,V_bits_left_0,V_exp_0,G,H,I,J,K,O,P,Q,R,S,R,T):4+ eval_III_huffdecode_bb3_in(G,H,I,U,V,J,B,C,D,E)
     [V_cachesz_0+V_bits_left_0>=1,0>=G+2,V_cachesz_0+V_bits_left_0=K+O,V_cachesz_0+V_bits_left_0=K+L,U+2*I=R+14,G+1=N,G+1=F,G+1=V_big_values_0,M=5] 
* CE 155: eval_III_huffdecode_bb3_in(V_big_values_0,V_startbits_0,V_linbits_0,V_cachesz_0,V_bits_left_0,V_exp_0,B,C,D,E) = 2+ eval_III_huffdecode_bb15_in(V_big_values_0,V_startbits_0,V_linbits_0,V_cachesz_0,F,V_exp_0,G,H,I,J,K,L,H,K,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z,A1,B1,C1,D1,E1):8
     [K+L>=1,0>=V_big_values_0+1,K+L=V_cachesz_0+F,K+L=V_cachesz_0+V_bits_left_0,F1+2*V=D1+14,V_big_values_0=G+1,M=5] 
* CE 156: eval_III_huffdecode_bb3_in(V_big_values_0,V_startbits_0,V_linbits_0,V_cachesz_0,V_bits_left_0,V_exp_0,B,C,D,E) = 2+ eval_III_huffdecode_bb15_in(F,V_startbits_0,V_linbits_0,V_cachesz_0,V_bits_left_0,V_exp_0,G,H,I,J,K,L,H,K,M,N,V_startbits_0,V_linbits_0,V_cachesz_0,V_bits_left_0,V_exp_0,G,H,I,J,K,O,P,Q,R,S,R,T):1+ eval_III_huffdecode_bb3_in(G,H,I,U,V,J,B,C,D,E)
     [V_cachesz_0+V_bits_left_0>=1,0>=G+2,V_cachesz_0+V_bits_left_0=K+T,V_cachesz_0+V_bits_left_0=K+O,V_cachesz_0+V_bits_left_0=K+L,I+U=R+15,G+1=N,G+1=F,G+1=V_big_values_0,M=2] 
* CE 157: eval_III_huffdecode_bb3_in(V_big_values_0,V_startbits_0,V_linbits_0,V_cachesz_0,V_bits_left_0,V_exp_0,B,C,D,E) = 2+ eval_III_huffdecode_bb15_in(V_big_values_0,V_startbits_0,V_linbits_0,V_cachesz_0,F,V_exp_0,G,H,I,J,K,L,H,K,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z,A1,B1,C1,D1,E1):8
     [K+L>=1,0>=V_big_values_0+1,K+L=V_cachesz_0+F,K+L=V_cachesz_0+V_bits_left_0,V+F1=D1+15,V_big_values_0=G+1,M=2] 
* CE 158: eval_III_huffdecode_bb3_in(V_big_values_0,V_startbits_0,V_linbits_0,V_cachesz_0,V_bits_left_0,V_exp_0,B,C,D,E) = 2+ eval_III_huffdecode_bb15_in(F,V_startbits_0,V_linbits_0,V_cachesz_0,V_bits_left_0,V_exp_0,G,H,I,J,K,L,H,K,M,N,V_startbits_0,V_linbits_0,V_cachesz_0,V_bits_left_0,V_exp_0,G,H,I,J,K,O,P,Q,R,S,T,U):2+ eval_III_huffdecode_bb3_in(G,H,I,V,W,J,B,C,D,E)
     [V_cachesz_0+V_bits_left_0>=1,0>=G+2,V_cachesz_0+V_bits_left_0=K+O,V_cachesz_0+V_bits_left_0=K+L,V+2=R,G+1=N,G+1=F,G+1=V_big_values_0,M=3] 
* CE 159: eval_III_huffdecode_bb3_in(V_big_values_0,V_startbits_0,V_linbits_0,V_cachesz_0,V_bits_left_0,V_exp_0,B,C,D,E) = 2+ eval_III_huffdecode_bb15_in(V_big_values_0,V_startbits_0,V_linbits_0,V_cachesz_0,F,V_exp_0,G,H,I,J,K,L,H,K,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z,A1,B1,C1,D1,E1):8
     [K+L>=1,0>=V_big_values_0+1,K+L=V_cachesz_0+F,K+L=V_cachesz_0+V_bits_left_0,F1+2=B1,V_big_values_0=G+1,M=3] 
* CE 160: eval_III_huffdecode_bb3_in(V_big_values_0,V_startbits_0,V_linbits_0,V_cachesz_0,V_bits_left_0,V_exp_0,B,C,D,E) = 2+ eval_III_huffdecode_bb15_in(F,V_startbits_0,V_linbits_0,V_cachesz_0,V_bits_left_0,V_exp_0,G,H,I,J,K,L,H,K,M,N,V_startbits_0,V_linbits_0,V_cachesz_0,V_bits_left_0,V_exp_0,G,H,I,J,K,O,P,Q,R,S,T,U):3+ eval_III_huffdecode_bb3_in(G,H,I,V,W,J,B,C,D,E)
     [V_cachesz_0+V_bits_left_0>=1,0>=G+2,V_cachesz_0+V_bits_left_0=K+O,V_cachesz_0+V_bits_left_0=K+L,I+V=R+14,G+1=N,G+1=F,G+1=V_big_values_0,M=4] 
* CE 161: eval_III_huffdecode_bb3_in(V_big_values_0,V_startbits_0,V_linbits_0,V_cachesz_0,V_bits_left_0,V_exp_0,B,C,D,E) = 2+ eval_III_huffdecode_bb15_in(V_big_values_0,V_startbits_0,V_linbits_0,V_cachesz_0,F,V_exp_0,G,H,I,J,K,L,H,K,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z,A1,B1,C1,D1,E1):8
     [K+L>=1,0>=V_big_values_0+1,K+L=V_cachesz_0+F,K+L=V_cachesz_0+V_bits_left_0,V+F1=B1+14,V_big_values_0=G+1,M=4] 
* CE 162: eval_III_huffdecode_bb3_in(V_big_values_0,V_startbits_0,V_linbits_0,V_cachesz_0,V_bits_left_0,V_exp_0,B,C,D,E) = 2+ eval_III_huffdecode_bb15_in(F,V_startbits_0,V_linbits_0,V_cachesz_0,V_bits_left_0,V_exp_0,G,H,I,J,K,L,H,K,M,N,V_startbits_0,V_linbits_0,V_cachesz_0,V_bits_left_0,V_exp_0,G,H,I,J,K,O,P,Q,R,S,R,T):4+ eval_III_huffdecode_bb3_in(G,H,I,U,V,J,B,C,D,E)
     [V_cachesz_0+V_bits_left_0>=1,0>=G+2,V_cachesz_0+V_bits_left_0=K+O,V_cachesz_0+V_bits_left_0=K+L,I+U+2=R,G+1=N,G+1=F,G+1=V_big_values_0,M=5] 
* CE 163: eval_III_huffdecode_bb3_in(V_big_values_0,V_startbits_0,V_linbits_0,V_cachesz_0,V_bits_left_0,V_exp_0,B,C,D,E) = 2+ eval_III_huffdecode_bb15_in(V_big_values_0,V_startbits_0,V_linbits_0,V_cachesz_0,F,V_exp_0,G,H,I,J,K,L,H,K,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z,A1,B1,C1,D1,E1):8
     [K+L>=1,0>=V_big_values_0+1,K+L=V_cachesz_0+F,K+L=V_cachesz_0+V_bits_left_0,V+F1+2=D1,V_big_values_0=G+1,M=5] 
* CE 164: eval_III_huffdecode_bb3_in(V_big_values_0,V_startbits_0,V_linbits_0,V_cachesz_0,V_bits_left_0,V_exp_0,B,C,D,E) = 2+ eval_III_huffdecode_bb15_in(F,V_startbits_0,V_linbits_0,V_cachesz_0,V_bits_left_0,V_exp_0,G,H,I,J,K,L,H,K,M,N,V_startbits_0,V_linbits_0,V_cachesz_0,V_bits_left_0,V_exp_0,G,H,I,J,K,O,P,Q,R,S,R,T):1+ eval_III_huffdecode_bb3_in(G,H,I,U,V,J,B,C,D,E)
     [V_cachesz_0+V_bits_left_0>=1,0>=G+2,V_cachesz_0+V_bits_left_0=K+V,V_cachesz_0+V_bits_left_0=K+T,V_cachesz_0+V_bits_left_0=K+O,V_cachesz_0+V_bits_left_0=K+L,R=U+1,G+1=N,G+1=F,G+1=V_big_values_0,M=2] 
* CE 165: eval_III_huffdecode_bb3_in(V_big_values_0,V_startbits_0,V_linbits_0,V_cachesz_0,V_bits_left_0,V_exp_0,B,C,D,E) = 2+ eval_III_huffdecode_bb15_in(V_big_values_0,V_startbits_0,V_linbits_0,V_cachesz_0,F,V_exp_0,G,H,I,J,K,L,H,K,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z,A1,B1,C1,D1,E1):8
     [K+L>=1,0>=V_big_values_0+1,K+L=V_cachesz_0+F,K+L=V_cachesz_0+V_bits_left_0,F1+1=D1,V_big_values_0=G+1,M=2] 
* CE 166: eval_III_huffdecode_bb3_in(V_big_values_0,V_startbits_0,V_linbits_0,V_cachesz_0,V_bits_left_0,V_exp_0,B,C,D,E) = 2+ eval_III_huffdecode_bb15_in(F,V_startbits_0,V_linbits_0,V_cachesz_0,V_bits_left_0,V_exp_0,G,H,I,J,K,L,H,K,M,N,V_startbits_0,V_linbits_0,V_cachesz_0,V_bits_left_0,V_exp_0,G,H,I,J,K,O,P,Q,R,S,T,U):7+ eval_III_huffdecode_bb3_in(G,H,I,V,W,J,B,C,D,E)
     [V_cachesz_0+V_bits_left_0>=1,0>=G+2,V_cachesz_0+V_bits_left_0=K+W,V_cachesz_0+V_bits_left_0=K+O,V_cachesz_0+V_bits_left_0=K+L,V+1=R,G+1=N,G+1=F,G+1=V_big_values_0,M=8] 
* CE 167: eval_III_huffdecode_bb3_in(V_big_values_0,V_startbits_0,V_linbits_0,V_cachesz_0,V_bits_left_0,V_exp_0,B,C,D,E) = 2+ eval_III_huffdecode_bb15_in(V_big_values_0,V_startbits_0,V_linbits_0,V_cachesz_0,F,V_exp_0,G,H,I,J,K,L,H,K,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z,A1,B1,C1,D1,E1):8
     [K+L>=1,0>=V_big_values_0+1,K+L=V_cachesz_0+F,K+L=V_cachesz_0+V_bits_left_0,F1+1=B1,V_big_values_0=G+1,M=8] 
* CE 168: eval_III_huffdecode_bb3_in(V_big_values_0,V_startbits_0,V_linbits_0,V_cachesz_0,V_bits_left_0,V_exp_0,B,C,D,E) = 2+ eval_III_huffdecode_bb15_in(F,V_startbits_0,V_linbits_0,V_cachesz_0,V_bits_left_0,V_exp_0,G,H,I,J,K,L,H,K,M,N,V_startbits_0,V_linbits_0,V_cachesz_0,V_bits_left_0,V_exp_0,G,H,I,J,K,O,P,Q,R,S,T,U):6+ eval_III_huffdecode_bb3_in(G,H,I,V,W,J,B,C,D,E)
     [V_cachesz_0+V_bits_left_0>=1,0>=G+2,V_cachesz_0+V_bits_left_0=K+W,V_cachesz_0+V_bits_left_0=K+O,V_cachesz_0+V_bits_left_0=K+L,V+1=R,G+1=N,G+1=F,G+1=V_big_values_0,M=7] 
* CE 169: eval_III_huffdecode_bb3_in(V_big_values_0,V_startbits_0,V_linbits_0,V_cachesz_0,V_bits_left_0,V_exp_0,B,C,D,E) = 2+ eval_III_huffdecode_bb15_in(V_big_values_0,V_startbits_0,V_linbits_0,V_cachesz_0,F,V_exp_0,G,H,I,J,K,L,H,K,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z,A1,B1,C1,D1,E1):8
     [K+L>=1,0>=V_big_values_0+1,K+L=V_cachesz_0+F,K+L=V_cachesz_0+V_bits_left_0,F1+1=B1,V_big_values_0=G+1,M=7] 
* CE 170: eval_III_huffdecode_bb3_in(V_big_values_0,V_startbits_0,V_linbits_0,V_cachesz_0,V_bits_left_0,V_exp_0,B,C,D,E) = 2+ eval_III_huffdecode_bb15_in(F,V_startbits_0,V_linbits_0,V_cachesz_0,V_bits_left_0,V_exp_0,G,H,I,J,K,L,H,K,M,N,V_startbits_0,V_linbits_0,V_cachesz_0,V_bits_left_0,V_exp_0,G,H,I,J,K,O,P,Q,R,S,R,T):5+ eval_III_huffdecode_bb3_in(G,H,I,R,U,J,B,C,D,E)
     [V_cachesz_0+V_bits_left_0>=1,0>=G+2,V_cachesz_0+V_bits_left_0=K+U,V_cachesz_0+V_bits_left_0=K+O,V_cachesz_0+V_bits_left_0=K+L,G+1=N,G+1=F,G+1=V_big_values_0,M=6] 
* CE 171: eval_III_huffdecode_bb3_in(V_big_values_0,V_startbits_0,V_linbits_0,V_cachesz_0,V_bits_left_0,V_exp_0,B,C,D,E) = 2+ eval_III_huffdecode_bb15_in(V_big_values_0,V_startbits_0,V_linbits_0,V_cachesz_0,F,V_exp_0,G,H,I,J,K,L,H,K,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z,A1,B1,C1,D1,E1):8
     [K+L>=1,0>=V_big_values_0+1,K+L=V_cachesz_0+F,K+L=V_cachesz_0+V_bits_left_0,V_big_values_0=G+1,M=6] 
* CE 172: eval_III_huffdecode_bb3_in(V_big_values_0,V_startbits_0,V_linbits_0,V_cachesz_0,V_bits_left_0,V_exp_0,B,C,D,E) = 2+ eval_III_huffdecode_bb15_in(F,V_startbits_0,V_linbits_0,V_cachesz_0,V_bits_left_0,V_exp_0,G,H,I,J,K,L,H,K,M,N,V_startbits_0,V_linbits_0,V_cachesz_0,V_bits_left_0,V_exp_0,G,H,I,J,K,O,P,Q,R,S,T,U):7+ eval_III_huffdecode_bb3_in(G,H,I,V,W,J,B,C,D,E)
     [V_cachesz_0+V_bits_left_0>=1,0>=G+2,V_cachesz_0+V_bits_left_0=K+W,V_cachesz_0+V_bits_left_0=K+O,V_cachesz_0+V_bits_left_0=K+L,V+2=R,G+1=N,G+1=F,G+1=V_big_values_0,M=8] 
* CE 173: eval_III_huffdecode_bb3_in(V_big_values_0,V_startbits_0,V_linbits_0,V_cachesz_0,V_bits_left_0,V_exp_0,B,C,D,E) = 2+ eval_III_huffdecode_bb15_in(V_big_values_0,V_startbits_0,V_linbits_0,V_cachesz_0,F,V_exp_0,G,H,I,J,K,L,H,K,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z,A1,B1,C1,D1,E1):8
     [K+L>=1,0>=V_big_values_0+1,K+L=V_cachesz_0+F,K+L=V_cachesz_0+V_bits_left_0,F1+2=B1,V_big_values_0=G+1,M=8] 
* CE 174: eval_III_huffdecode_bb3_in(V_big_values_0,V_startbits_0,V_linbits_0,V_cachesz_0,V_bits_left_0,V_exp_0,B,C,D,E) = 2+ eval_III_huffdecode_bb15_in(F,V_startbits_0,V_linbits_0,V_cachesz_0,V_bits_left_0,V_exp_0,G,H,I,J,K,L,H,K,M,N,V_startbits_0,V_linbits_0,V_cachesz_0,V_bits_left_0,V_exp_0,G,H,I,J,K,O,P,Q,R,S,T,U):6+ eval_III_huffdecode_bb3_in(G,H,I,V,W,J,B,C,D,E)
     [V_cachesz_0+V_bits_left_0>=1,0>=G+2,V_cachesz_0+V_bits_left_0=K+W,V_cachesz_0+V_bits_left_0=K+O,V_cachesz_0+V_bits_left_0=K+L,V+2=R,G+1=N,G+1=F,G+1=V_big_values_0,M=7] 
* CE 175: eval_III_huffdecode_bb3_in(V_big_values_0,V_startbits_0,V_linbits_0,V_cachesz_0,V_bits_left_0,V_exp_0,B,C,D,E) = 2+ eval_III_huffdecode_bb15_in(V_big_values_0,V_startbits_0,V_linbits_0,V_cachesz_0,F,V_exp_0,G,H,I,J,K,L,H,K,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z,A1,B1,C1,D1,E1):8
     [K+L>=1,0>=V_big_values_0+1,K+L=V_cachesz_0+F,K+L=V_cachesz_0+V_bits_left_0,F1+2=B1,V_big_values_0=G+1,M=7] 
* CE 176: eval_III_huffdecode_bb3_in(V_big_values_0,V_startbits_0,V_linbits_0,V_cachesz_0,V_bits_left_0,V_exp_0,B,C,D,E) = 2+ eval_III_huffdecode_bb15_in(F,V_startbits_0,V_linbits_0,V_cachesz_0,V_bits_left_0,V_exp_0,G,H,I,J,K,L,H,K,M,N,V_startbits_0,V_linbits_0,V_cachesz_0,V_bits_left_0,V_exp_0,G,H,I,J,K,O,P,Q,R,S,R,T):5+ eval_III_huffdecode_bb3_in(G,H,I,U,V,J,B,C,D,E)
     [V_cachesz_0+V_bits_left_0>=1,0>=G+2,V_cachesz_0+V_bits_left_0=K+V,V_cachesz_0+V_bits_left_0=K+O,V_cachesz_0+V_bits_left_0=K+L,R=U+1,G+1=N,G+1=F,G+1=V_big_values_0,M=6] 
* CE 177: eval_III_huffdecode_bb3_in(V_big_values_0,V_startbits_0,V_linbits_0,V_cachesz_0,V_bits_left_0,V_exp_0,B,C,D,E) = 2+ eval_III_huffdecode_bb15_in(V_big_values_0,V_startbits_0,V_linbits_0,V_cachesz_0,F,V_exp_0,G,H,I,J,K,L,H,K,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z,A1,B1,C1,D1,E1):8
     [K+L>=1,0>=V_big_values_0+1,K+L=V_cachesz_0+F,K+L=V_cachesz_0+V_bits_left_0,F1+1=D1,V_big_values_0=G+1,M=6] 

### Cost equations --> "Loop" of eval_III_huffdecode_bb3_in/10 
* CEs [91,93,95,97,99,101,103,105,107,109,111,113,115,117,119,121,123,125,127,129,131,133] --> Loop 39 
* CEs [135,137,139,141,143,145,147,149,151,153,155,157,159,161,163,165,167,169,171,173,175,177] --> Loop 40 
* CEs [90,92,94,96,98,100,102,104,106,108,110,112,114,116,118,120,122,124,126,128,130,132] --> Loop 41 
* CEs [134,136,138,140,142,144,146,148,150,152,154,156,158,160,162,164,166,168,170,172,174,176] --> Loop 42 
* CEs [84] --> Loop 43 
* CEs [85] --> Loop 44 
* CEs [86] --> Loop 45 
* CEs [87] --> Loop 46 
* CEs [88] --> Loop 47 
* CEs [89] --> Loop 48 

#### Loops of eval_III_huffdecode_bb3_in/10 
* Loop 39: eval_III_huffdecode_bb3_in(V_big_values_0,V_startbits_0,V_linbits_0,V_cachesz_0,V_bits_left_0,V_exp_0,B,C,D,E) [V_cachesz_0+V_bits_left_0>=1,V_big_values_0>=1] 
* Loop 40: eval_III_huffdecode_bb3_in(V_big_values_0,V_startbits_0,V_linbits_0,V_cachesz_0,V_bits_left_0,V_exp_0,B,C,D,E) [V_cachesz_0+V_bits_left_0>=1,0>=V_big_values_0+1] 
* Loop 41: eval_III_huffdecode_bb3_in(V_big_values_0,V_startbits_0,V_linbits_0,V_cachesz_0,V_bits_left_0,V_exp_0,B,C,D,E)->  eval_III_huffdecode_bb3_in(V_big_values_0',V_startbits_0',V_linbits_0',V_cachesz_0',V_bits_left_0',V_exp_0',B,C,D,E)
                  [V_cachesz_0+V_bits_left_0>=1,V_big_values_0>=1,V_big_values_0=V_big_values_0'+1] 
* Loop 42: eval_III_huffdecode_bb3_in(V_big_values_0,V_startbits_0,V_linbits_0,V_cachesz_0,V_bits_left_0,V_exp_0,B,C,D,E)->  eval_III_huffdecode_bb3_in(V_big_values_0',V_startbits_0',V_linbits_0',V_cachesz_0',V_bits_left_0',V_exp_0',B,C,D,E)
                  [V_cachesz_0+V_bits_left_0>=1,0>=V_big_values_0+1,V_big_values_0=V_big_values_0'+1] 
* Loop 43: eval_III_huffdecode_bb3_in(A,B,C,D,E,F,G,D,E,F) [0>=D+E,G=12] 
* Loop 44: eval_III_huffdecode_bb3_in(V_big_values_0,V_startbits_0,V_linbits_0,V_cachesz_0,V_bits_left_0,V_exp_0,B,C,D,E) [0>=V_cachesz_0+V_bits_left_0,B=9] 
* Loop 45: eval_III_huffdecode_bb3_in(V_big_values_0,V_startbits_0,V_linbits_0,V_cachesz_0,V_bits_left_0,V_exp_0,B,C,D,E) [V_cachesz_0+V_bits_left_0>=1,V_big_values_0>=1,B=9] 
* Loop 46: eval_III_huffdecode_bb3_in(V_big_values_0,V_startbits_0,V_linbits_0,V_cachesz_0,V_bits_left_0,V_exp_0,B,C,D,E) [V_cachesz_0+V_bits_left_0>=1,0>=V_big_values_0+1,B=9] 
* Loop 47: eval_III_huffdecode_bb3_in(A,B,C,D,E,F,G,D,E,F) [G=12,A=0] 
* Loop 48: eval_III_huffdecode_bb3_in(V_big_values_0,V_startbits_0,V_linbits_0,V_cachesz_0,V_bits_left_0,V_exp_0,B,C,D,E) [B=9,V_big_values_0=0] 

### Ranking functions of CR eval_III_huffdecode_bb3_in(V_big_values_0,V_startbits_0,V_linbits_0,V_cachesz_0,V_bits_left_0,V_exp_0,B,C,D,E) 
* RF of phase [41]: [V_big_values_0]

#### Partial ranking functions of CR eval_III_huffdecode_bb3_in(V_big_values_0,V_startbits_0,V_linbits_0,V_cachesz_0,V_bits_left_0,V_exp_0,B,C,D,E) 
* Partial RF of phase [41]:
  - RF of loop [41:1]:
    V_big_values_0


### Resulting Chains:eval_III_huffdecode_bb3_in(V_big_values_0,V_startbits_0,V_linbits_0,V_cachesz_0,V_bits_left_0,V_exp_0,B,C,D,E) 
* [[42]]...
* [[42],46]
* [[42],44]
* [[42],43]
* [[42],40]...
* [[41],48]
* [[41],47]
* [[41],45]
* [[41],44]
* [[41],43]
* [[41],39]...
* [48]
* [47]
* [46]
* [45]
* [44]
* [43]
* [40]...
* [39]...


### Merging Chains  eval_III_huffdecode_bb3_in/10 into  External patterns of execution 
* [[48]] --> 1 
* [[47]] --> 2 
* [[46],[44,[42]],[46,[42]]] --> 3 
* [[45],[44,[41]],[45,[41]],[48,[41]]] --> 4 
* [[44]] --> 5 
* [[43]] --> 6 
* [[43,[42]]] --> 7 
* [[43,[41]],[47,[41]]] --> 8 
* [[40],[[42]],[40,[42]]] --> 9 
* [[39]] --> 10 
* [[39,[41]]] --> 11 


### Specialization of cost equations eval_III_huffdecode_bb50_in/3 
* CE 71 is refined into CE [178] 
* CE 70 is refined into CE [179] 
* CE 68 is refined into CE [180] 
* CE 69 is refined into CE [181] 


#### Refined cost equations eval_III_huffdecode_bb50_in/3 
* CE 178: eval_III_huffdecode_bb50_in(V_cachesz_12,V_bits_left_9,B) = 0
     [B=11] 
* CE 179: eval_III_huffdecode_bb50_in(V_cachesz_12,V_bits_left_9,B) = 0
     [B=10] 
* CE 180: eval_III_huffdecode_bb50_in(V_cachesz_12,V_bits_left_9,B) = 1+ eval_III_huffdecode_bb50_in(C,D,B)
     [V_cachesz_12+V_bits_left_9>=1,V_bits_left_9=D+16] 
* CE 181: eval_III_huffdecode_bb50_in(V_cachesz_12,V_bits_left_9,B) = 1+ eval_III_huffdecode_bb50_in(C,V_bits_left_9,B)
     [V_cachesz_12+V_bits_left_9>=1] 

### Cost equations --> "Loop" of eval_III_huffdecode_bb50_in/3 
* CEs [180] --> Loop 49 
* CEs [181] --> Loop 50 
* CEs [178] --> Loop 51 
* CEs [179] --> Loop 52 

#### Loops of eval_III_huffdecode_bb50_in/3 
* Loop 49: eval_III_huffdecode_bb50_in(V_cachesz_12,V_bits_left_9,B)->  eval_III_huffdecode_bb50_in(V_cachesz_12',V_bits_left_9',B)
                  [V_cachesz_12+V_bits_left_9>=1,V_bits_left_9=V_bits_left_9'+16] 
* Loop 50: eval_III_huffdecode_bb50_in(V_cachesz_12,V_bits_left_9,B)->  eval_III_huffdecode_bb50_in(V_cachesz_12',V_bits_left_9,B)
                  [V_cachesz_12+V_bits_left_9>=1] 
* Loop 51: eval_III_huffdecode_bb50_in(V_cachesz_12,V_bits_left_9,B) [B=11] 
* Loop 52: eval_III_huffdecode_bb50_in(V_cachesz_12,V_bits_left_9,B) [B=10] 

### Ranking functions of CR eval_III_huffdecode_bb50_in(V_cachesz_12,V_bits_left_9,B) 

#### Partial ranking functions of CR eval_III_huffdecode_bb50_in(V_cachesz_12,V_bits_left_9,B) 


### Resulting Chains:eval_III_huffdecode_bb50_in(V_cachesz_12,V_bits_left_9,B) 
* [[49,50]]...
* [[49,50],52]
* [[49,50],51]
* [52]
* [51]


### Merging Chains  eval_III_huffdecode_bb50_in/3 into  External patterns of execution 
* [[52],[52,[49,50]]] --> 1 
* [[51],[51,[49,50]]] --> 2 
* [[[49,50]]] --> 3 


### Specialization of cost equations eval_III_huffdecode_bb74_in/1 
* CE 75 is refined into CE [182] 
* CE 74 is refined into CE [183] 


#### Refined cost equations eval_III_huffdecode_bb74_in/1 
* CE 182: eval_III_huffdecode_bb74_in(B) = 0
     [B=9] 
* CE 183: eval_III_huffdecode_bb74_in(B) = 1+ eval_III_huffdecode_bb74_in(C)
     [C=9,B=9] 

### Cost equations --> "Loop" of eval_III_huffdecode_bb74_in/1 
* CEs [183] --> Loop 53 
* CEs [182] --> Loop 54 

#### Loops of eval_III_huffdecode_bb74_in/1 
* Loop 53: eval_III_huffdecode_bb74_in(B)->  eval_III_huffdecode_bb74_in(B')
                  [B'=9,B=9] 
* Loop 54: eval_III_huffdecode_bb74_in(B) [B=9] 

### Ranking functions of CR eval_III_huffdecode_bb74_in(B) 

#### Partial ranking functions of CR eval_III_huffdecode_bb74_in(B) 


### Resulting Chains:eval_III_huffdecode_bb74_in(B) 
* [[53]]...
* [[53],54]
* [54]


### Merging Chains  eval_III_huffdecode_bb74_in/1 into  External patterns of execution 
* [[54],[54,[53]]] --> 1 
* [[[53]]] --> 2 


### Specialization of cost equations loop_cont_eval_III_huffdecode_bb50_in/2 
* CE 73 is refined into CE [184] 
* CE 72 is refined into CE [185,186] 


#### Refined cost equations loop_cont_eval_III_huffdecode_bb50_in/2 
* CE 184: loop_cont_eval_III_huffdecode_bb50_in(E,A) = 0
     [E=11] 
* CE 185: loop_cont_eval_III_huffdecode_bb50_in(E,A) = 1+ eval_III_huffdecode_bb74_in(F):1
     [F=9,E=10] 
* CE 186: loop_cont_eval_III_huffdecode_bb50_in(E,A) = 1+ eval_III_huffdecode_bb74_in(F):2
     [F=9,E=10] 

### Cost equations --> "Loop" of loop_cont_eval_III_huffdecode_bb50_in/2 
* CEs [186] --> Loop 55 
* CEs [184] --> Loop 56 
* CEs [185] --> Loop 57 

#### Loops of loop_cont_eval_III_huffdecode_bb50_in/2 
* Loop 55: loop_cont_eval_III_huffdecode_bb50_in(E,A) [E=10] 
* Loop 56: loop_cont_eval_III_huffdecode_bb50_in(E,A) [E=11] 
* Loop 57: loop_cont_eval_III_huffdecode_bb50_in(E,A) [E=10] 

### Ranking functions of CR loop_cont_eval_III_huffdecode_bb50_in(E,A) 

#### Partial ranking functions of CR loop_cont_eval_III_huffdecode_bb50_in(E,A) 


### Resulting Chains:loop_cont_eval_III_huffdecode_bb50_in(E,A) 
* [57]
* [56]
* [55]...


### Merging Chains  loop_cont_eval_III_huffdecode_bb50_in/2 into  External patterns of execution 
* [[57]] --> 1 
* [[56]] --> 2 
* [[55]] --> 3 


### Specialization of cost equations eval_III_huffdecode_257/3 
* CE 67 is refined into CE [187,188,189,190] 


#### Refined cost equations eval_III_huffdecode_257/3 
* CE 187: eval_III_huffdecode_257(V_cachesz_0,V_bits_left_0,B) = 1+ eval_III_huffdecode_bb50_in(V_cachesz_0,V_bits_left_0,C):1+ loop_cont_eval_III_huffdecode_bb50_in(D,B):1
     [D=10,C=10] 
* CE 188: eval_III_huffdecode_257(V_cachesz_0,V_bits_left_0,B) = 1+ eval_III_huffdecode_bb50_in(V_cachesz_0,V_bits_left_0,C):1+ loop_cont_eval_III_huffdecode_bb50_in(D,B):3
     [D=10,C=10] 
* CE 189: eval_III_huffdecode_257(V_cachesz_0,V_bits_left_0,B) = 1+ eval_III_huffdecode_bb50_in(V_cachesz_0,V_bits_left_0,C):2+ loop_cont_eval_III_huffdecode_bb50_in(D,B):2
     [D=11,C=11] 
* CE 190: eval_III_huffdecode_257(V_cachesz_0,V_bits_left_0,B) = 1+ eval_III_huffdecode_bb50_in(V_cachesz_0,V_bits_left_0,C):3
     [V_cachesz_0+V_bits_left_0>=1] 

### Cost equations --> "Loop" of eval_III_huffdecode_257/3 
* CEs [188,190] --> Loop 58 
* CEs [187,189] --> Loop 59 

#### Loops of eval_III_huffdecode_257/3 
* Loop 58: eval_III_huffdecode_257(V_cachesz_0,V_bits_left_0,B) [] 
* Loop 59: eval_III_huffdecode_257(V_cachesz_0,V_bits_left_0,B) [] 

### Ranking functions of CR eval_III_huffdecode_257(V_cachesz_0,V_bits_left_0,B) 

#### Partial ranking functions of CR eval_III_huffdecode_257(V_cachesz_0,V_bits_left_0,B) 


### Resulting Chains:eval_III_huffdecode_257(V_cachesz_0,V_bits_left_0,B) 
* [59]
* [58]...


### Merging Chains  eval_III_huffdecode_257/3 into  External patterns of execution 
* [[59]] --> 1 
* [[58]] --> 2 


### Specialization of cost equations loop_cont_eval_III_huffdecode_bb3_in/5 
* CE 58 is refined into CE [191,192] 
* CE 57 is refined into CE [193] 


#### Refined cost equations loop_cont_eval_III_huffdecode_bb3_in/5 
* CE 191: loop_cont_eval_III_huffdecode_bb3_in(F,A,B,C,D) = 0+ eval_III_huffdecode_257(A,B,D):1
     [F=12] 
* CE 192: loop_cont_eval_III_huffdecode_bb3_in(F,A,B,C,D) = 0+ eval_III_huffdecode_257(A,B,D):2
     [F=12] 
* CE 193: loop_cont_eval_III_huffdecode_bb3_in(F,A,B,C,D) = 0
     [F=9] 

### Cost equations --> "Loop" of loop_cont_eval_III_huffdecode_bb3_in/5 
* CEs [191] --> Loop 60 
* CEs [193] --> Loop 61 
* CEs [192] --> Loop 62 

#### Loops of loop_cont_eval_III_huffdecode_bb3_in/5 
* Loop 60: loop_cont_eval_III_huffdecode_bb3_in(F,A,B,C,D) [F=12] 
* Loop 61: loop_cont_eval_III_huffdecode_bb3_in(F,A,B,C,D) [F=9] 
* Loop 62: loop_cont_eval_III_huffdecode_bb3_in(F,A,B,C,D) [F=12] 

### Ranking functions of CR loop_cont_eval_III_huffdecode_bb3_in(F,A,B,C,D) 

#### Partial ranking functions of CR loop_cont_eval_III_huffdecode_bb3_in(F,A,B,C,D) 


### Resulting Chains:loop_cont_eval_III_huffdecode_bb3_in(F,A,B,C,D) 
* [62]...
* [61]
* [60]


### Merging Chains  loop_cont_eval_III_huffdecode_bb3_in/5 into  External patterns of execution 
* [[61]] --> 1 
* [[60]] --> 2 
* [[62]] --> 3 


### Specialization of cost equations eval_III_huffdecode_14/3 
* CE 5 is refined into CE [194] 
* CE 6 is refined into CE [195,196,197,198,199,200,201,202,203,204,205,206,207,208,209] 


#### Refined cost equations eval_III_huffdecode_14/3 
* CE 194: eval_III_huffdecode_14(V_3,V_14,B) = 0
     [] 
* CE 195: eval_III_huffdecode_14(V_3,V_14,B) = 1+ eval_III_huffdecode_bb3_in(C,D,E,V_14,F,G,H,I,J,K):1+ loop_cont_eval_III_huffdecode_bb3_in(L,I,J,K,B):1
     [V_14+F=V_3,L=9,H=9,C=0] 
* CE 196: eval_III_huffdecode_14(V_3,V_14,B) = 1+ eval_III_huffdecode_bb3_in(C,D,E,V_14,F,G,H,V_14,F,G):2+ loop_cont_eval_III_huffdecode_bb3_in(I,V_14,F,G,B):2
     [V_14+F=V_3,I=12,H=12,C=0] 
* CE 197: eval_III_huffdecode_14(V_3,V_14,B) = 1+ eval_III_huffdecode_bb3_in(C,D,E,V_14,F,G,H,V_14,F,G):2+ loop_cont_eval_III_huffdecode_bb3_in(I,V_14,F,G,B):3
     [V_14+F=V_3,I=12,H=12,C=0] 
* CE 198: eval_III_huffdecode_14(V_3,V_14,B) = 1+ eval_III_huffdecode_bb3_in(C,D,E,V_14,F,G,H,I,J,K):3+ loop_cont_eval_III_huffdecode_bb3_in(L,I,J,K,B):1
     [V_14+F>=1,0>=C+1,V_14+F=V_3,L=9,H=9] 
* CE 199: eval_III_huffdecode_14(V_3,V_14,B) = 1+ eval_III_huffdecode_bb3_in(C,D,E,V_14,F,G,H,I,J,K):4+ loop_cont_eval_III_huffdecode_bb3_in(L,I,J,K,B):1
     [V_14+F>=1,C>=1,V_14+F=V_3,L=9,H=9] 
* CE 200: eval_III_huffdecode_14(V_3,V_14,B) = 1+ eval_III_huffdecode_bb3_in(C,D,E,V_14,F,G,H,I,J,K):5+ loop_cont_eval_III_huffdecode_bb3_in(L,I,J,K,B):1
     [0>=V_14+F,V_14+F=V_3,L=9,H=9] 
* CE 201: eval_III_huffdecode_14(V_3,V_14,B) = 1+ eval_III_huffdecode_bb3_in(C,D,E,V_14,F,G,H,V_14,F,G):6+ loop_cont_eval_III_huffdecode_bb3_in(I,V_14,F,G,B):2
     [0>=V_14+F,V_14+F=V_3,I=12,H=12] 
* CE 202: eval_III_huffdecode_14(V_3,V_14,B) = 1+ eval_III_huffdecode_bb3_in(C,D,E,V_14,F,G,H,V_14,F,G):6+ loop_cont_eval_III_huffdecode_bb3_in(I,V_14,F,G,B):3
     [0>=V_14+F,V_14+F=V_3,I=12,H=12] 
* CE 203: eval_III_huffdecode_14(V_3,V_14,B) = 1+ eval_III_huffdecode_bb3_in(C,D,E,V_14,F,G,H,I,J,K):7+ loop_cont_eval_III_huffdecode_bb3_in(L,I,J,K,B):2
     [V_14+F>=1,0>=I+J,0>=C+1,V_14+F=V_3,L=12,H=12] 
* CE 204: eval_III_huffdecode_14(V_3,V_14,B) = 1+ eval_III_huffdecode_bb3_in(C,D,E,V_14,F,G,H,I,J,K):7+ loop_cont_eval_III_huffdecode_bb3_in(L,I,J,K,B):3
     [V_14+F>=1,0>=I+J,0>=C+1,V_14+F=V_3,L=12,H=12] 
* CE 205: eval_III_huffdecode_14(V_3,V_14,B) = 1+ eval_III_huffdecode_bb3_in(C,D,E,V_14,F,G,H,I,J,K):8+ loop_cont_eval_III_huffdecode_bb3_in(L,I,J,K,B):2
     [V_14+F>=1,C>=1,V_14+F=V_3,L=12,H=12] 
* CE 206: eval_III_huffdecode_14(V_3,V_14,B) = 1+ eval_III_huffdecode_bb3_in(C,D,E,V_14,F,G,H,I,J,K):8+ loop_cont_eval_III_huffdecode_bb3_in(L,I,J,K,B):3
     [V_14+F>=1,C>=1,V_14+F=V_3,L=12,H=12] 
* CE 207: eval_III_huffdecode_14(V_3,V_14,B) = 1+ eval_III_huffdecode_bb3_in(C,D,E,V_14,F,G,H,I,J,K):9
     [V_14+F>=1,0>=C+1,V_14+F=V_3] 
* CE 208: eval_III_huffdecode_14(V_3,V_14,B) = 1+ eval_III_huffdecode_bb3_in(C,D,E,V_14,F,G,H,I,J,K):10
     [V_14+F>=1,C>=1,V_14+F=V_3] 
* CE 209: eval_III_huffdecode_14(V_3,V_14,B) = 1+ eval_III_huffdecode_bb3_in(C,D,E,V_14,F,G,H,I,J,K):11
     [V_14+F>=1,C>=2,V_14+F=V_3] 

### Cost equations --> "Loop" of eval_III_huffdecode_14/3 
* CEs [197,202,204,206,207,208,209] --> Loop 63 
* CEs [194,195,196,198,199,200,201,203,205] --> Loop 64 

#### Loops of eval_III_huffdecode_14/3 
* Loop 63: eval_III_huffdecode_14(V_3,V_14,B) [] 
* Loop 64: eval_III_huffdecode_14(V_3,V_14,B) [] 

### Ranking functions of CR eval_III_huffdecode_14(V_3,V_14,B) 

#### Partial ranking functions of CR eval_III_huffdecode_14(V_3,V_14,B) 


### Resulting Chains:eval_III_huffdecode_14(V_3,V_14,B) 
* [64]
* [63]...


### Merging Chains  eval_III_huffdecode_14/3 into  External patterns of execution 
* [[64]] --> 1 
* [[63]] --> 2 


### Specialization of cost equations eval_III_huffdecode_bb0_in/2 
* CE 3 is refined into CE [210] 
* CE 4 is refined into CE [211,212] 


#### Refined cost equations eval_III_huffdecode_bb0_in/2 
* CE 210: eval_III_huffdecode_bb0_in(V_part2_length,B) = 0
     [] 
* CE 211: eval_III_huffdecode_bb0_in(V_part2_length,B) = 0+ eval_III_huffdecode_14(C,D,B):1
     [] 
* CE 212: eval_III_huffdecode_bb0_in(V_part2_length,B) = 0+ eval_III_huffdecode_14(C,D,B):2
     [] 

### Cost equations --> "Loop" of eval_III_huffdecode_bb0_in/2 
* CEs [212] --> Loop 65 
* CEs [210,211] --> Loop 66 

#### Loops of eval_III_huffdecode_bb0_in/2 
* Loop 65: eval_III_huffdecode_bb0_in(V_part2_length,B) [] 
* Loop 66: eval_III_huffdecode_bb0_in(V_part2_length,B) [] 

### Ranking functions of CR eval_III_huffdecode_bb0_in(V_part2_length,B) 

#### Partial ranking functions of CR eval_III_huffdecode_bb0_in(V_part2_length,B) 


### Resulting Chains:eval_III_huffdecode_bb0_in(V_part2_length,B) 
* [66]
* [65]...


### Merging Chains  eval_III_huffdecode_bb0_in/2 into  External patterns of execution 
* [[66]] --> 1 
* [[65]] --> 2 


### Specialization of cost equations eval_III_huffdecode_start/2 
* CE 2 is refined into CE [213,214] 


#### Refined cost equations eval_III_huffdecode_start/2 
* CE 213: eval_III_huffdecode_start(V_part2_length,B) = 0+ eval_III_huffdecode_bb0_in(V_part2_length,B):1
     [] 
* CE 214: eval_III_huffdecode_start(V_part2_length,B) = 0+ eval_III_huffdecode_bb0_in(V_part2_length,B):2
     [] 

### Cost equations --> "Loop" of eval_III_huffdecode_start/2 
* CEs [214] --> Loop 67 
* CEs [213] --> Loop 68 

#### Loops of eval_III_huffdecode_start/2 
* Loop 67: eval_III_huffdecode_start(V_part2_length,B) [] 
* Loop 68: eval_III_huffdecode_start(V_part2_length,B) [] 

### Ranking functions of CR eval_III_huffdecode_start(V_part2_length,B) 

#### Partial ranking functions of CR eval_III_huffdecode_start(V_part2_length,B) 


### Resulting Chains:eval_III_huffdecode_start(V_part2_length,B) 
* [68]
* [67]...


### Merging Chains  eval_III_huffdecode_start/2 into  External patterns of execution 
* [[68]] --> 1 
* [[67]] --> 2 


Computing Bounds
=====================================

#### Cost of loops [31] 

 * loop 31:eval_III_huffdecode_bb15_in(V_big_values_0,V_startbits_0,V_linbits_0,V_cachesz_0,V_bits_left_0,V_exp_0,V_49,V_startbits_2,V_linbits_2,V_exp_2,V_cachesz_1,V_bits_left_1,V_clumpsz_0,V_cachesz_2,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T) -> [eval_III_huffdecode_bb15_in(V_big_values_0',V_startbits_0',V_linbits_0',V_cachesz_0',V_bits_left_0',V_exp_0',V_49',V_startbits_2',V_linbits_2',V_exp_2',V_cachesz_1',V_bits_left_1',V_clumpsz_0',V_cachesz_2',B',C',D',E',F',G',H',I',J',K',L',M',N',O',P',Q',R',S',T')] 
1
#### Cost of phase [31]:eval_III_huffdecode_bb15_in(V_big_values_0,V_startbits_0,V_linbits_0,V_cachesz_0,V_bits_left_0,V_exp_0,V_49,V_startbits_2,V_linbits_2,V_exp_2,V_cachesz_1,V_bits_left_1,V_clumpsz_0,V_cachesz_2,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T) -> [eval_III_huffdecode_bb15_in(V_big_values_0',V_startbits_0',V_linbits_0',V_cachesz_0',V_bits_left_0',V_exp_0',V_49',V_startbits_2',V_linbits_2',V_exp_2',V_cachesz_1',V_bits_left_1',V_clumpsz_0',V_cachesz_2',B',C',D',E',F',G',H',I',J',K',L',M',N',O',P',Q',R',S',T')] 
1*it(31)+0
#### Cost of phase [31]:eval_III_huffdecode_bb15_in(V_big_values_0,V_startbits_0,V_linbits_0,V_cachesz_0,V_bits_left_0,V_exp_0,V_49,V_startbits_2,V_linbits_2,V_exp_2,V_cachesz_1,V_bits_left_1,V_clumpsz_0,V_cachesz_2,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T) -> [eval_III_huffdecode_bb15_in(V_big_values_0',V_startbits_0',V_linbits_0',V_cachesz_0',V_bits_left_0',V_exp_0',V_49',V_startbits_2',V_linbits_2',V_exp_2',V_cachesz_1',V_bits_left_1',V_clumpsz_0',V_cachesz_2',B',C',D',E',F',G',H',I',J',K',L',M',N',O',P',Q',R',S',T')] 
1*it(31)+0
#### Cost of phase [31]:eval_III_huffdecode_bb15_in(V_big_values_0,V_startbits_0,V_linbits_0,V_cachesz_0,V_bits_left_0,V_exp_0,V_49,V_startbits_2,V_linbits_2,V_exp_2,V_cachesz_1,V_bits_left_1,V_clumpsz_0,V_cachesz_2,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T) -> [eval_III_huffdecode_bb15_in(V_big_values_0',V_startbits_0',V_linbits_0',V_cachesz_0',V_bits_left_0',V_exp_0',V_49',V_startbits_2',V_linbits_2',V_exp_2',V_cachesz_1',V_bits_left_1',V_clumpsz_0',V_cachesz_2',B',C',D',E',F',G',H',I',J',K',L',M',N',O',P',Q',R',S',T')] 
1*it(31)+0
#### Cost of phase [31]:eval_III_huffdecode_bb15_in(V_big_values_0,V_startbits_0,V_linbits_0,V_cachesz_0,V_bits_left_0,V_exp_0,V_49,V_startbits_2,V_linbits_2,V_exp_2,V_cachesz_1,V_bits_left_1,V_clumpsz_0,V_cachesz_2,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T) -> [eval_III_huffdecode_bb15_in(V_big_values_0',V_startbits_0',V_linbits_0',V_cachesz_0',V_bits_left_0',V_exp_0',V_49',V_startbits_2',V_linbits_2',V_exp_2',V_cachesz_1',V_bits_left_1',V_clumpsz_0',V_cachesz_2',B',C',D',E',F',G',H',I',J',K',L',M',N',O',P',Q',R',S',T')] 
1*it(31)+0
#### Cost of phase [31]:eval_III_huffdecode_bb15_in(V_big_values_0,V_startbits_0,V_linbits_0,V_cachesz_0,V_bits_left_0,V_exp_0,V_49,V_startbits_2,V_linbits_2,V_exp_2,V_cachesz_1,V_bits_left_1,V_clumpsz_0,V_cachesz_2,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T) -> [eval_III_huffdecode_bb15_in(V_big_values_0',V_startbits_0',V_linbits_0',V_cachesz_0',V_bits_left_0',V_exp_0',V_49',V_startbits_2',V_linbits_2',V_exp_2',V_cachesz_1',V_bits_left_1',V_clumpsz_0',V_cachesz_2',B',C',D',E',F',G',H',I',J',K',L',M',N',O',P',Q',R',S',T')] 
1*it(31)+0
#### Cost of phase [31]:eval_III_huffdecode_bb15_in(V_big_values_0,V_startbits_0,V_linbits_0,V_cachesz_0,V_bits_left_0,V_exp_0,V_49,V_startbits_2,V_linbits_2,V_exp_2,V_cachesz_1,V_bits_left_1,V_clumpsz_0,V_cachesz_2,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T) -> [eval_III_huffdecode_bb15_in(V_big_values_0',V_startbits_0',V_linbits_0',V_cachesz_0',V_bits_left_0',V_exp_0',V_49',V_startbits_2',V_linbits_2',V_exp_2',V_cachesz_1',V_bits_left_1',V_clumpsz_0',V_cachesz_2',B',C',D',E',F',G',H',I',J',K',L',M',N',O',P',Q',R',S',T')] 
1*it(31)+0
#### Cost of phase [31]:eval_III_huffdecode_bb15_in(V_big_values_0,V_startbits_0,V_linbits_0,V_cachesz_0,V_bits_left_0,V_exp_0,V_49,V_startbits_2,V_linbits_2,V_exp_2,V_cachesz_1,V_bits_left_1,V_clumpsz_0,V_cachesz_2,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T) -> [eval_III_huffdecode_bb15_in(V_big_values_0',V_startbits_0',V_linbits_0',V_cachesz_0',V_bits_left_0',V_exp_0',V_49',V_startbits_2',V_linbits_2',V_exp_2',V_cachesz_1',V_bits_left_1',V_clumpsz_0',V_cachesz_2',B',C',D',E',F',G',H',I',J',K',L',M',N',O',P',Q',R',S',T')] 
1*it(31)+0
#### Cost of phase [31]:eval_III_huffdecode_bb15_in(V_big_values_0,V_startbits_0,V_linbits_0,V_cachesz_0,V_bits_left_0,V_exp_0,V_49,V_startbits_2,V_linbits_2,V_exp_2,V_cachesz_1,V_bits_left_1,V_clumpsz_0,V_cachesz_2,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T) -> [eval_III_huffdecode_bb15_in(V_big_values_0',V_startbits_0',V_linbits_0',V_cachesz_0',V_bits_left_0',V_exp_0',V_49',V_startbits_2',V_linbits_2',V_exp_2',V_cachesz_1',V_bits_left_1',V_clumpsz_0',V_cachesz_2',B',C',D',E',F',G',H',I',J',K',L',M',N',O',P',Q',R',S',T')] 
1*it(31)+0
#### Cost of chains of eval_III_huffdecode_bb15_in(V_big_values_0,V_startbits_0,V_linbits_0,V_cachesz_0,V_bits_left_0,V_exp_0,V_49,V_startbits_2,V_linbits_2,V_exp_2,V_cachesz_1,V_bits_left_1,V_clumpsz_0,V_cachesz_2,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T):
* Chain [[31]]...: 1*it(31)+0
  with precondition: [V_big_values_0=V_49+1,V_bits_left_1+V_cachesz_1>=1,V_bits_left_0+V_cachesz_0=V_bits_left_1+V_cachesz_1,B>=2,8>=B] 

* Chain [[31],38]: 1*it(31)+0
  with precondition: [B=2,V_big_values_0=V_49+1,V_big_values_0=C,V_startbits_0=D,V_linbits_0=E,V_cachesz_0=F,V_bits_left_0=G,V_exp_0=H,V_big_values_0=I+1,V_startbits_2=J,V_linbits_2=K,V_exp_2=L,V_cachesz_1=M,Q=S,V_bits_left_0+V_cachesz_0=V_bits_left_1+V_cachesz_1,V_bits_left_0+V_cachesz_0=V_cachesz_1+N,V_bits_left_0+V_cachesz_0=V_cachesz_1+T,V_bits_left_0+V_cachesz_0>=1] 

* Chain [[31],37]: 1*it(31)+0
  with precondition: [B=3,V_big_values_0=V_49+1,V_big_values_0=C,V_startbits_0=D,V_linbits_0=E,V_cachesz_0=F,V_bits_left_0=G,V_exp_0=H,V_big_values_0=I+1,V_startbits_2=J,V_linbits_2=K,V_exp_2=L,V_cachesz_1=M,V_bits_left_0+V_cachesz_0=V_bits_left_1+V_cachesz_1,V_bits_left_0+V_cachesz_0=V_cachesz_1+N,V_bits_left_0+V_cachesz_0>=1] 

* Chain [[31],36]: 1*it(31)+0
  with precondition: [B=4,V_big_values_0=V_49+1,V_big_values_0=C,V_startbits_0=D,V_linbits_0=E,V_cachesz_0=F,V_bits_left_0=G,V_exp_0=H,V_big_values_0=I+1,V_startbits_2=J,V_linbits_2=K,V_exp_2=L,V_cachesz_1=M,V_bits_left_0+V_cachesz_0=V_bits_left_1+V_cachesz_1,V_bits_left_0+V_cachesz_0=V_cachesz_1+N,V_bits_left_0+V_cachesz_0>=1] 

* Chain [[31],35]: 1*it(31)+0
  with precondition: [B=5,V_big_values_0=V_49+1,V_big_values_0=C,V_startbits_0=D,V_linbits_0=E,V_cachesz_0=F,V_bits_left_0=G,V_exp_0=H,V_big_values_0=I+1,V_startbits_2=J,V_linbits_2=K,V_exp_2=L,V_cachesz_1=M,Q=S,V_bits_left_0+V_cachesz_0=V_bits_left_1+V_cachesz_1,V_bits_left_0+V_cachesz_0=V_cachesz_1+N,V_bits_left_0+V_cachesz_0>=1] 

* Chain [[31],34]: 1*it(31)+0
  with precondition: [B=6,V_big_values_0=V_49+1,V_big_values_0=C,V_startbits_0=D,V_linbits_0=E,V_cachesz_0=F,V_bits_left_0=G,V_exp_0=H,V_big_values_0=I+1,V_startbits_2=J,V_linbits_2=K,V_exp_2=L,V_cachesz_1=M,Q=S,V_bits_left_0+V_cachesz_0=V_bits_left_1+V_cachesz_1,V_bits_left_0+V_cachesz_0=V_cachesz_1+N,V_bits_left_0+V_cachesz_0>=1] 

* Chain [[31],33]: 1*it(31)+0
  with precondition: [B=7,V_big_values_0=V_49+1,V_big_values_0=C,V_startbits_0=D,V_linbits_0=E,V_cachesz_0=F,V_bits_left_0=G,V_exp_0=H,V_big_values_0=I+1,V_startbits_2=J,V_linbits_2=K,V_exp_2=L,V_cachesz_1=M,V_bits_left_0+V_cachesz_0=V_bits_left_1+V_cachesz_1,V_bits_left_0+V_cachesz_0=V_cachesz_1+N,V_bits_left_0+V_cachesz_0>=1] 

* Chain [[31],32]: 1*it(31)+0
  with precondition: [B=8,V_big_values_0=V_49+1,V_big_values_0=C,V_startbits_0=D,V_linbits_0=E,V_cachesz_0=F,V_bits_left_0=G,V_exp_0=H,V_big_values_0=I+1,V_startbits_2=J,V_linbits_2=K,V_exp_2=L,V_cachesz_1=M,V_bits_left_0+V_cachesz_0=V_bits_left_1+V_cachesz_1,V_bits_left_0+V_cachesz_0=V_cachesz_1+N,V_bits_left_0+V_cachesz_0>=1] 

* Chain [38]: 0
  with precondition: [B=2,V_49+1=V_big_values_0,D=V_startbits_0,E=V_linbits_0,H=V_exp_0,J=V_startbits_2,K=V_linbits_2,L=V_exp_2,O=V_clumpsz_0,P=V_cachesz_2,V_49+1=C,V_cachesz_0=F,V_bits_left_0=G,V_49=I,V_cachesz_1=M,S=Q,V_bits_left_0+V_cachesz_0=V_bits_left_1+V_cachesz_1,V_bits_left_0+V_cachesz_0=V_cachesz_1+N,V_bits_left_0+V_cachesz_0=V_cachesz_1+T,V_bits_left_0+V_cachesz_0>=1] 

* Chain [37]: 0
  with precondition: [B=3,V_49+1=V_big_values_0,D=V_startbits_0,E=V_linbits_0,H=V_exp_0,J=V_startbits_2,K=V_linbits_2,L=V_exp_2,O=V_clumpsz_0,P=V_cachesz_2,V_49+1=C,V_cachesz_0=F,V_bits_left_0=G,V_49=I,V_cachesz_1=M,V_bits_left_0+V_cachesz_0=V_bits_left_1+V_cachesz_1,V_bits_left_0+V_cachesz_0=V_cachesz_1+N,V_bits_left_0+V_cachesz_0>=1] 

* Chain [36]: 0
  with precondition: [B=4,V_49+1=V_big_values_0,D=V_startbits_0,E=V_linbits_0,H=V_exp_0,J=V_startbits_2,K=V_linbits_2,L=V_exp_2,O=V_clumpsz_0,P=V_cachesz_2,V_49+1=C,V_cachesz_0=F,V_bits_left_0=G,V_49=I,V_cachesz_1=M,V_bits_left_0+V_cachesz_0=V_bits_left_1+V_cachesz_1,V_bits_left_0+V_cachesz_0=V_cachesz_1+N,V_bits_left_0+V_cachesz_0>=1] 

* Chain [35]: 0
  with precondition: [B=5,V_49+1=V_big_values_0,D=V_startbits_0,E=V_linbits_0,H=V_exp_0,J=V_startbits_2,K=V_linbits_2,L=V_exp_2,O=V_clumpsz_0,P=V_cachesz_2,V_49+1=C,V_cachesz_0=F,V_bits_left_0=G,V_49=I,V_cachesz_1=M,S=Q,V_bits_left_0+V_cachesz_0=V_bits_left_1+V_cachesz_1,V_bits_left_0+V_cachesz_0=V_cachesz_1+N,V_bits_left_0+V_cachesz_0>=1] 

* Chain [34]: 0
  with precondition: [B=6,V_49+1=V_big_values_0,D=V_startbits_0,E=V_linbits_0,H=V_exp_0,J=V_startbits_2,K=V_linbits_2,L=V_exp_2,O=V_clumpsz_0,P=V_cachesz_2,V_49+1=C,V_cachesz_0=F,V_bits_left_0=G,V_49=I,V_cachesz_1=M,S=Q,V_bits_left_0+V_cachesz_0=V_bits_left_1+V_cachesz_1,V_bits_left_0+V_cachesz_0=V_cachesz_1+N,V_bits_left_0+V_cachesz_0>=1] 

* Chain [33]: 0
  with precondition: [B=7,V_49+1=V_big_values_0,D=V_startbits_0,E=V_linbits_0,H=V_exp_0,J=V_startbits_2,K=V_linbits_2,L=V_exp_2,O=V_clumpsz_0,P=V_cachesz_2,V_49+1=C,V_cachesz_0=F,V_bits_left_0=G,V_49=I,V_cachesz_1=M,V_bits_left_0+V_cachesz_0=V_bits_left_1+V_cachesz_1,V_bits_left_0+V_cachesz_0=V_cachesz_1+N,V_bits_left_0+V_cachesz_0>=1] 

* Chain [32]: 0
  with precondition: [B=8,V_49+1=V_big_values_0,D=V_startbits_0,E=V_linbits_0,H=V_exp_0,J=V_startbits_2,K=V_linbits_2,L=V_exp_2,O=V_clumpsz_0,P=V_cachesz_2,V_49+1=C,V_cachesz_0=F,V_bits_left_0=G,V_49=I,V_cachesz_1=M,V_bits_left_0+V_cachesz_0=V_bits_left_1+V_cachesz_1,V_bits_left_0+V_cachesz_0=V_cachesz_1+N,V_bits_left_0+V_cachesz_0>=1] 


#### Cost of loops [42] 

 * loop 42:eval_III_huffdecode_bb3_in(V_big_values_0,V_startbits_0,V_linbits_0,V_cachesz_0,V_bits_left_0,V_exp_0,B,C,D,E) -> [eval_III_huffdecode_bb3_in(V_big_values_0',V_startbits_0',V_linbits_0',V_cachesz_0',V_bits_left_0',V_exp_0',B',C',D',E')] 
1*s(30)+0
#### Cost of phase [42]:eval_III_huffdecode_bb3_in(V_big_values_0,V_startbits_0,V_linbits_0,V_cachesz_0,V_bits_left_0,V_exp_0,B,C,D,E) -> [eval_III_huffdecode_bb3_in(V_big_values_0',V_startbits_0',V_linbits_0',V_cachesz_0',V_bits_left_0',V_exp_0',B',C',D',E')] 
1*s(31)+0
#### Cost of phase [42]:eval_III_huffdecode_bb3_in(V_big_values_0,V_startbits_0,V_linbits_0,V_cachesz_0,V_bits_left_0,V_exp_0,B,C,D,E) -> [eval_III_huffdecode_bb3_in(V_big_values_0',V_startbits_0',V_linbits_0',V_cachesz_0',V_bits_left_0',V_exp_0',B',C',D',E')] 
1*s(31)+0
#### Cost of phase [42]:eval_III_huffdecode_bb3_in(V_big_values_0,V_startbits_0,V_linbits_0,V_cachesz_0,V_bits_left_0,V_exp_0,B,C,D,E) -> [eval_III_huffdecode_bb3_in(V_big_values_0',V_startbits_0',V_linbits_0',V_cachesz_0',V_bits_left_0',V_exp_0',B',C',D',E')] 
1*s(31)+0
#### Cost of phase [42]:eval_III_huffdecode_bb3_in(V_big_values_0,V_startbits_0,V_linbits_0,V_cachesz_0,V_bits_left_0,V_exp_0,B,C,D,E) -> [eval_III_huffdecode_bb3_in(V_big_values_0',V_startbits_0',V_linbits_0',V_cachesz_0',V_bits_left_0',V_exp_0',B',C',D',E')] 
1*s(31)+0
#### Cost of phase [42]:eval_III_huffdecode_bb3_in(V_big_values_0,V_startbits_0,V_linbits_0,V_cachesz_0,V_bits_left_0,V_exp_0,B,C,D,E) -> [eval_III_huffdecode_bb3_in(V_big_values_0',V_startbits_0',V_linbits_0',V_cachesz_0',V_bits_left_0',V_exp_0',B',C',D',E')] 
1*s(31)+0
#### Cost of loops [41] 

 * loop 41:eval_III_huffdecode_bb3_in(V_big_values_0,V_startbits_0,V_linbits_0,V_cachesz_0,V_bits_left_0,V_exp_0,B,C,D,E) -> [eval_III_huffdecode_bb3_in(V_big_values_0',V_startbits_0',V_linbits_0',V_cachesz_0',V_bits_left_0',V_exp_0',B',C',D',E')] 
1*s(76)+0
#### Cost of phase [41]:eval_III_huffdecode_bb3_in(V_big_values_0,V_startbits_0,V_linbits_0,V_cachesz_0,V_bits_left_0,V_exp_0,B,C,D,E) -> [eval_III_huffdecode_bb3_in(V_big_values_0',V_startbits_0',V_linbits_0',V_cachesz_0',V_bits_left_0',V_exp_0',B',C',D',E')] 
1*s(77)+0
#### Cost of phase [41]:eval_III_huffdecode_bb3_in(V_big_values_0,V_startbits_0,V_linbits_0,V_cachesz_0,V_bits_left_0,V_exp_0,B,C,D,E) -> [eval_III_huffdecode_bb3_in(V_big_values_0',V_startbits_0',V_linbits_0',V_cachesz_0',V_bits_left_0',V_exp_0',B',C',D',E')] 
1*s(77)+0
#### Cost of phase [41]:eval_III_huffdecode_bb3_in(V_big_values_0,V_startbits_0,V_linbits_0,V_cachesz_0,V_bits_left_0,V_exp_0,B,C,D,E) -> [eval_III_huffdecode_bb3_in(V_big_values_0',V_startbits_0',V_linbits_0',V_cachesz_0',V_bits_left_0',V_exp_0',B',C',D',E')] 
1*s(77)+0
#### Cost of phase [41]:eval_III_huffdecode_bb3_in(V_big_values_0,V_startbits_0,V_linbits_0,V_cachesz_0,V_bits_left_0,V_exp_0,B,C,D,E) -> [eval_III_huffdecode_bb3_in(V_big_values_0',V_startbits_0',V_linbits_0',V_cachesz_0',V_bits_left_0',V_exp_0',B',C',D',E')] 
1*s(77)+0
#### Cost of phase [41]:eval_III_huffdecode_bb3_in(V_big_values_0,V_startbits_0,V_linbits_0,V_cachesz_0,V_bits_left_0,V_exp_0,B,C,D,E) -> [eval_III_huffdecode_bb3_in(V_big_values_0',V_startbits_0',V_linbits_0',V_cachesz_0',V_bits_left_0',V_exp_0',B',C',D',E')] 
1*s(77)+0
#### Cost of phase [41]:eval_III_huffdecode_bb3_in(V_big_values_0,V_startbits_0,V_linbits_0,V_cachesz_0,V_bits_left_0,V_exp_0,B,C,D,E) -> [eval_III_huffdecode_bb3_in(V_big_values_0',V_startbits_0',V_linbits_0',V_cachesz_0',V_bits_left_0',V_exp_0',B',C',D',E')] 
1*s(77)+0
#### Cost of chains of eval_III_huffdecode_bb3_in(V_big_values_0,V_startbits_0,V_linbits_0,V_cachesz_0,V_bits_left_0,V_exp_0,B,C,D,E):
* Chain [[42]]...: 1*s(31)+0
  with precondition: [0>=V_big_values_0+1,V_bits_left_0+V_cachesz_0>=1] 

* Chain [[42],46]: 1*s(31)+0
  with precondition: [B=9,0>=V_big_values_0+1,V_bits_left_0+V_cachesz_0>=1] 

* Chain [[42],44]: 1*s(31)+0
  with precondition: [B=9,0>=V_big_values_0+1,V_bits_left_0+V_cachesz_0>=1] 

* Chain [[42],43]: 1*s(31)+0
  with precondition: [B=12,0>=V_big_values_0+1,0>=C+D,V_bits_left_0+V_cachesz_0>=1] 

* Chain [[42],40]...: 2*aux(9)+0
  with precondition: [0>=V_big_values_0+1,V_bits_left_0+V_cachesz_0>=1] 

* Chain [[41],48]: 1*s(77)+0
  with precondition: [B=9,V_big_values_0>=1,V_bits_left_0+V_cachesz_0>=1] 

* Chain [[41],47]: 1*s(77)+0
  with precondition: [B=12,V_big_values_0>=1,V_bits_left_0+V_cachesz_0>=1] 

* Chain [[41],45]: 1*s(77)+0
  with precondition: [B=9,V_big_values_0>=2,V_bits_left_0+V_cachesz_0>=1] 

* Chain [[41],44]: 1*s(77)+0
  with precondition: [B=9,V_big_values_0>=1,V_bits_left_0+V_cachesz_0>=1] 

* Chain [[41],43]: 1*s(77)+0
  with precondition: [B=12,V_big_values_0>=1,0>=C+D,V_bits_left_0+V_cachesz_0>=1] 

* Chain [[41],39]...: 2*aux(11)+0
  with precondition: [V_big_values_0>=2,V_bits_left_0+V_cachesz_0>=1] 

* Chain [48]: 0
  with precondition: [V_big_values_0=0,B=9] 

* Chain [47]: 0
  with precondition: [V_big_values_0=0,B=12,C=V_cachesz_0,D=V_bits_left_0,E=V_exp_0] 

* Chain [46]: 0
  with precondition: [B=9,0>=V_big_values_0+1,V_bits_left_0+V_cachesz_0>=1] 

* Chain [45]: 0
  with precondition: [B=9,V_big_values_0>=1,V_bits_left_0+V_cachesz_0>=1] 

* Chain [44]: 0
  with precondition: [B=9,0>=V_bits_left_0+V_cachesz_0] 

* Chain [43]: 0
  with precondition: [B=12,E=V_exp_0,V_cachesz_0=C,V_bits_left_0=D,0>=V_bits_left_0+V_cachesz_0] 

* Chain [40]...: 1*aux(9)+0
  with precondition: [0>=V_big_values_0+1,V_bits_left_0+V_cachesz_0>=1] 

* Chain [39]...: 1*aux(11)+0
  with precondition: [V_big_values_0>=1,V_bits_left_0+V_cachesz_0>=1] 


#### Cost of loops [49,50] 

 * loop 49:eval_III_huffdecode_bb50_in(V_cachesz_12,V_bits_left_9,B) -> [eval_III_huffdecode_bb50_in(V_cachesz_12',V_bits_left_9',B')] 
1
 * loop 50:eval_III_huffdecode_bb50_in(V_cachesz_12,V_bits_left_9,B) -> [eval_III_huffdecode_bb50_in(V_cachesz_12',V_bits_left_9',B')] 
1
#### Cost of phase [49,50]:eval_III_huffdecode_bb50_in(V_cachesz_12,V_bits_left_9,B) -> [eval_III_huffdecode_bb50_in(V_cachesz_12',V_bits_left_9',B')] 
2*it(49)+0
#### Cost of phase [49,50]:eval_III_huffdecode_bb50_in(V_cachesz_12,V_bits_left_9,B) -> [eval_III_huffdecode_bb50_in(V_cachesz_12',V_bits_left_9',B')] 
2*it(49)+0
#### Cost of phase [49,50]:eval_III_huffdecode_bb50_in(V_cachesz_12,V_bits_left_9,B) -> [eval_III_huffdecode_bb50_in(V_cachesz_12',V_bits_left_9',B')] 
2*it(49)+0
#### Cost of chains of eval_III_huffdecode_bb50_in(V_cachesz_12,V_bits_left_9,B):
* Chain [[49,50]]...: 2*it(49)+0
  with precondition: [V_bits_left_9+V_cachesz_12>=1] 

* Chain [[49,50],52]: 2*it(49)+0
  with precondition: [B=10,V_bits_left_9+V_cachesz_12>=1] 

* Chain [[49,50],51]: 2*it(49)+0
  with precondition: [B=11,V_bits_left_9+V_cachesz_12>=1] 

* Chain [52]: 0
  with precondition: [B=10] 

* Chain [51]: 0
  with precondition: [B=11] 


#### Cost of loops [53] 

 * loop 53:eval_III_huffdecode_bb74_in(B) -> [eval_III_huffdecode_bb74_in(B')] 
1
#### Cost of phase [53]:eval_III_huffdecode_bb74_in(B) -> [eval_III_huffdecode_bb74_in(B')] 
1*it(53)+0
#### Cost of phase [53]:eval_III_huffdecode_bb74_in(B) -> [eval_III_huffdecode_bb74_in(B')] 
1*it(53)+0
#### Cost of chains of eval_III_huffdecode_bb74_in(B):
* Chain [[53]]...: 1*it(53)+0
  with precondition: [B=9] 

* Chain [[53],54]: 1*it(53)+0
  with precondition: [B=9] 

* Chain [54]: 0
  with precondition: [B=9] 


#### Cost of chains of loop_cont_eval_III_huffdecode_bb50_in(E,A):
* Chain [57]: 1*s(113)+1
  with precondition: [E=10] 

* Chain [56]: 0
  with precondition: [E=11] 

* Chain [55]...: 1*s(114)+1
  with precondition: [E=10] 


#### Cost of chains of eval_III_huffdecode_257(V_cachesz_0,V_bits_left_0,B):
* Chain [59]: 1*aux(19)+0
  with precondition: [] 

* Chain [58]...: 1*aux(20)+0
  with precondition: [] 


#### Cost of chains of loop_cont_eval_III_huffdecode_bb3_in(F,A,B,C,D):
* Chain [62]...: 1*s(121)+0
  with precondition: [F=12] 

* Chain [61]: 0
  with precondition: [F=9] 

* Chain [60]: 1*s(122)+0
  with precondition: [F=12] 


#### Cost of chains of eval_III_huffdecode_14(V_3,V_14,B):
* Chain [64]: 1*aux(21)+0
  with precondition: [] 

* Chain [63]...: 1*aux(22)+0
  with precondition: [] 


#### Cost of chains of eval_III_huffdecode_bb0_in(V_part2_length,B):
* Chain [66]: 1*aux(23)+0
  with precondition: [] 

* Chain [65]...: 1*s(141)+0
  with precondition: [] 


#### Cost of chains of eval_III_huffdecode_start(V_part2_length,B):
* Chain [68]: 1*s(142)+0
  with precondition: [] 

* Chain [67]...: 1*s(143)+0
  with precondition: [] 


Closed-form bounds of eval_III_huffdecode_start(V_part2_length,B): 
-------------------------------------
* Chain [68] with precondition: [] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [67]... with precondition: [] 
    - Upper bound: inf 
    - Complexity: infinity 

### Maximum cost of eval_III_huffdecode_start(V_part2_length,B): inf 
Asymptotic class: infinity 

Time statistics: 
-------------------------------------
* Partial evaluation computed in 11910 ms.
* Invariants computed in 204 ms.
   - Backward Invariants 151 ms.
   - Transitive Invariants 16 ms.
* Refinement performed in 1604 ms.
* Termination proved in 11 ms.
* Upper bounds computed in 415 ms.
   - Equation cost structures 263 ms.
   - Phase cost structures 157 ms.
   - Chain cost structures 119 ms.
   - Solving cost expressions 0 ms.
* Total analysis performed in 14660 ms.


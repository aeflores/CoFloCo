Warning: Ignored call to eval_spgetcc_stop/1 in equation eval_spgetcc_bb10_in/1 

Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. recursive  : [eval_spgetcc_12/2,eval_spgetcc_13/2,eval_spgetcc_bb3_in/2]
1. non_recursive  : [eval_spgetcc_bb10_in/1]
2. non_recursive  : [eval_spgetcc_19/1]
3. non_recursive  : [eval_spgetcc_18/1]
4. non_recursive  : [eval_spgetcc_17/1]
5. non_recursive  : [eval_spgetcc_16/1]
6. non_recursive  : [eval_spgetcc_bb9_in/1]
7. non_recursive  : [loop_cont_eval_spgetcc_bb3_in/2]
8. non_recursive  : [eval_spgetcc_bb2_in/1]
9. non_recursive  : [eval_spgetcc_bb0_in/1]
10. non_recursive  : [eval_spgetcc_start/2]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into eval_spgetcc_bb3_in/2
1. SCC is completely evaluated into other SCCs
2. SCC is completely evaluated into other SCCs
3. SCC is completely evaluated into other SCCs
4. SCC is partially evaluated into eval_spgetcc_17/1
5. SCC is completely evaluated into other SCCs
6. SCC is completely evaluated into other SCCs
7. SCC is partially evaluated into loop_cont_eval_spgetcc_bb3_in/2
8. SCC is partially evaluated into eval_spgetcc_bb2_in/1
9. SCC is completely evaluated into other SCCs
10. SCC is partially evaluated into eval_spgetcc_start/2

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations eval_spgetcc_bb3_in/2 
* CE 7 is refined into CE [11] 
* CE 6 is refined into CE [12] 
* CE 5 is refined into CE [13] 


#### Refined cost equations eval_spgetcc_bb3_in/2 
* CE 11: eval_spgetcc_bb3_in(V_8,B) = 0
     [V_8>=0,1>=V_8,B=3] 
* CE 12: eval_spgetcc_bb3_in(V_8,B) = 0
     [V_8>=0,1>=V_8,B=2] 
* CE 13: eval_spgetcc_bb3_in(V_8,B) = 1+ eval_spgetcc_bb3_in(V_8,B)
     [V_8>=0,1>=V_8] 

### Cost equations --> "Loop" of eval_spgetcc_bb3_in/2 
* CEs [13] --> Loop 9 
* CEs [11] --> Loop 10 
* CEs [12] --> Loop 11 

#### Loops of eval_spgetcc_bb3_in/2 
* Loop 9: eval_spgetcc_bb3_in(V_8,B)->  eval_spgetcc_bb3_in(V_8,B)
                  [V_8>=0,1>=V_8] 
* Loop 10: eval_spgetcc_bb3_in(V_8,B) [V_8>=0,1>=V_8,B=3] 
* Loop 11: eval_spgetcc_bb3_in(V_8,B) [V_8>=0,1>=V_8,B=2] 

### Ranking functions of CR eval_spgetcc_bb3_in(V_8,B) 

#### Partial ranking functions of CR eval_spgetcc_bb3_in(V_8,B) 


### Resulting Chains:eval_spgetcc_bb3_in(V_8,B) 
* [[9]]...
* [[9],11]
* [[9],10]
* [11]
* [10]


### Merging Chains  eval_spgetcc_bb3_in/2 into  External patterns of execution 
* [[11],[11,[9]]] --> 1 
* [[10],[10,[9]]] --> 2 
* [[[9]]] --> 3 


### Specialization of cost equations eval_spgetcc_17/1 
* CE 10 is refined into CE [14] 


#### Refined cost equations eval_spgetcc_17/1 
* CE 14: eval_spgetcc_17(B) = 0
     [] 

### Cost equations --> "Loop" of eval_spgetcc_17/1 
* CEs [14] --> Loop 12 

#### Loops of eval_spgetcc_17/1 
* Loop 12: eval_spgetcc_17(B) [] 

### Ranking functions of CR eval_spgetcc_17(B) 

#### Partial ranking functions of CR eval_spgetcc_17(B) 


### Resulting Chains:eval_spgetcc_17(B) 
* [12]


### Merging Chains  eval_spgetcc_17/1 into  External patterns of execution 
* [[12]] --> 1 


### Specialization of cost equations loop_cont_eval_spgetcc_bb3_in/2 
* CE 9 is refined into CE [15] 
* CE 8 is refined into CE [16] 


#### Refined cost equations loop_cont_eval_spgetcc_bb3_in/2 
* CE 15: loop_cont_eval_spgetcc_bb3_in(E,A) = 0+ eval_spgetcc_17(A):1
     [E=3] 
* CE 16: loop_cont_eval_spgetcc_bb3_in(E,A) = 0
     [E=2] 

### Cost equations --> "Loop" of loop_cont_eval_spgetcc_bb3_in/2 
* CEs [15] --> Loop 13 
* CEs [16] --> Loop 14 

#### Loops of loop_cont_eval_spgetcc_bb3_in/2 
* Loop 13: loop_cont_eval_spgetcc_bb3_in(E,A) [E=3] 
* Loop 14: loop_cont_eval_spgetcc_bb3_in(E,A) [E=2] 

### Ranking functions of CR loop_cont_eval_spgetcc_bb3_in(E,A) 

#### Partial ranking functions of CR loop_cont_eval_spgetcc_bb3_in(E,A) 


### Resulting Chains:loop_cont_eval_spgetcc_bb3_in(E,A) 
* [14]
* [13]


### Merging Chains  loop_cont_eval_spgetcc_bb3_in/2 into  External patterns of execution 
* [[14]] --> 1 
* [[13]] --> 2 


### Specialization of cost equations eval_spgetcc_bb2_in/1 
* CE 3 is refined into CE [17,18,19] 
* CE 4 is refined into CE [20,21,22] 


#### Refined cost equations eval_spgetcc_bb2_in/1 
* CE 17: eval_spgetcc_bb2_in(B) = 1+ eval_spgetcc_bb3_in(C,D):1+ loop_cont_eval_spgetcc_bb3_in(E,B):1
     [E=2,D=2,C=0] 
* CE 18: eval_spgetcc_bb2_in(B) = 1+ eval_spgetcc_bb3_in(C,D):2+ loop_cont_eval_spgetcc_bb3_in(E,B):2
     [E=3,D=3,C=0] 
* CE 19: eval_spgetcc_bb2_in(B) = 1+ eval_spgetcc_bb3_in(C,D):3
     [C=0] 
* CE 20: eval_spgetcc_bb2_in(B) = 1+ eval_spgetcc_bb3_in(C,D):1+ loop_cont_eval_spgetcc_bb3_in(E,B):1
     [E=2,D=2,C=1] 
* CE 21: eval_spgetcc_bb2_in(B) = 1+ eval_spgetcc_bb3_in(C,D):2+ loop_cont_eval_spgetcc_bb3_in(E,B):2
     [E=3,D=3,C=1] 
* CE 22: eval_spgetcc_bb2_in(B) = 1+ eval_spgetcc_bb3_in(C,D):3
     [C=1] 

### Cost equations --> "Loop" of eval_spgetcc_bb2_in/1 
* CEs [19,22] --> Loop 15 
* CEs [17,18,20,21] --> Loop 16 

#### Loops of eval_spgetcc_bb2_in/1 
* Loop 15: eval_spgetcc_bb2_in(B) [] 
* Loop 16: eval_spgetcc_bb2_in(B) [] 

### Ranking functions of CR eval_spgetcc_bb2_in(B) 

#### Partial ranking functions of CR eval_spgetcc_bb2_in(B) 


### Resulting Chains:eval_spgetcc_bb2_in(B) 
* [16]
* [15]...


### Merging Chains  eval_spgetcc_bb2_in/1 into  External patterns of execution 
* [[16]] --> 1 
* [[15]] --> 2 


### Specialization of cost equations eval_spgetcc_start/2 
* CE 2 is refined into CE [23,24] 


#### Refined cost equations eval_spgetcc_start/2 
* CE 23: eval_spgetcc_start(V_close_on_eof,B) = 0+ eval_spgetcc_bb2_in(B):1
     [] 
* CE 24: eval_spgetcc_start(V_close_on_eof,B) = 0+ eval_spgetcc_bb2_in(B):2
     [] 

### Cost equations --> "Loop" of eval_spgetcc_start/2 
* CEs [24] --> Loop 17 
* CEs [23] --> Loop 18 

#### Loops of eval_spgetcc_start/2 
* Loop 17: eval_spgetcc_start(V_close_on_eof,B) [] 
* Loop 18: eval_spgetcc_start(V_close_on_eof,B) [] 

### Ranking functions of CR eval_spgetcc_start(V_close_on_eof,B) 

#### Partial ranking functions of CR eval_spgetcc_start(V_close_on_eof,B) 


### Resulting Chains:eval_spgetcc_start(V_close_on_eof,B) 
* [18]
* [17]...


### Merging Chains  eval_spgetcc_start/2 into  External patterns of execution 
* [[18]] --> 1 
* [[17]] --> 2 


Computing Bounds
=====================================

#### Cost of loops [9] 

 * loop 9:eval_spgetcc_bb3_in(V_8,B) -> [eval_spgetcc_bb3_in(V_8',B')] 
1
#### Cost of phase [9]:eval_spgetcc_bb3_in(V_8,B) -> [eval_spgetcc_bb3_in(V_8',B')] 
1*it(9)+0
#### Cost of phase [9]:eval_spgetcc_bb3_in(V_8,B) -> [eval_spgetcc_bb3_in(V_8',B')] 
1*it(9)+0
#### Cost of phase [9]:eval_spgetcc_bb3_in(V_8,B) -> [eval_spgetcc_bb3_in(V_8',B')] 
1*it(9)+0
#### Cost of chains of eval_spgetcc_bb3_in(V_8,B):
* Chain [[9]]...: 1*it(9)+0
  with precondition: [V_8>=0,1>=V_8] 

* Chain [[9],11]: 1*it(9)+0
  with precondition: [B=2,1>=V_8,V_8>=0] 

* Chain [[9],10]: 1*it(9)+0
  with precondition: [B=3,1>=V_8,V_8>=0] 

* Chain [11]: 0
  with precondition: [B=2,1>=V_8,V_8>=0] 

* Chain [10]: 0
  with precondition: [B=3,1>=V_8,V_8>=0] 


#### Cost of chains of eval_spgetcc_17(B):
* Chain [12]: 0
  with precondition: [] 


#### Cost of chains of loop_cont_eval_spgetcc_bb3_in(E,A):
* Chain [14]: 0
  with precondition: [E=2] 

* Chain [13]: 0
  with precondition: [E=3] 


#### Cost of chains of eval_spgetcc_bb2_in(B):
* Chain [16]: 1*aux(3)+0
  with precondition: [] 

* Chain [15]...: 1*aux(4)+0
  with precondition: [] 


#### Cost of chains of eval_spgetcc_start(V_close_on_eof,B):
* Chain [18]: 1*s(9)+0
  with precondition: [] 

* Chain [17]...: 1*s(10)+0
  with precondition: [] 


Closed-form bounds of eval_spgetcc_start(V_close_on_eof,B): 
-------------------------------------
* Chain [18] with precondition: [] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [17]... with precondition: [] 
    - Upper bound: inf 
    - Complexity: infinity 

### Maximum cost of eval_spgetcc_start(V_close_on_eof,B): inf 
Asymptotic class: infinity 

Time statistics: 
-------------------------------------
* Partial evaluation computed in 18 ms.
* Invariants computed in 22 ms.
   - Backward Invariants 14 ms.
   - Transitive Invariants 3 ms.
* Refinement performed in 43 ms.
* Termination proved in 3 ms.
* Upper bounds computed in 32 ms.
   - Equation cost structures 14 ms.
   - Phase cost structures 6 ms.
   - Chain cost structures 10 ms.
   - Solving cost expressions 0 ms.
* Total analysis performed in 155 ms.


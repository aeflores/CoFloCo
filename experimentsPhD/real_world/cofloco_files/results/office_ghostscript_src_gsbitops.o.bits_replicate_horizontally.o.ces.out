Warning: Ignored call to eval_bits_replicate_horizontally_stop/1 in equation loop_cont_eval_bits_replicate_horizontally_bb1_in/2 

Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. recursive  : [eval_bits_replicate_horizontally_bb5_in/17]
1. recursive  : [eval_bits_replicate_horizontally_bb3_in/13,loop_cont_eval_bits_replicate_horizontally_bb5_in/14]
2. recursive  : [eval_bits_replicate_horizontally_bb11_in/17]
3. recursive  : [eval_bits_replicate_horizontally_bb9_in/13,loop_cont_eval_bits_replicate_horizontally_bb11_in/14]
4. recursive  : [eval_bits_replicate_horizontally_bb1_in/6,loop_cont_eval_bits_replicate_horizontally_bb3_in/7,loop_cont_eval_bits_replicate_horizontally_bb9_in/7]
5. non_recursive  : [loop_cont_eval_bits_replicate_horizontally_bb1_in/2]
6. non_recursive  : [eval_bits_replicate_horizontally_bb0_in/4]
7. non_recursive  : [eval_bits_replicate_horizontally_start/6]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into eval_bits_replicate_horizontally_bb5_in/17
1. SCC is partially evaluated into eval_bits_replicate_horizontally_bb3_in/13
2. SCC is partially evaluated into eval_bits_replicate_horizontally_bb11_in/17
3. SCC is partially evaluated into eval_bits_replicate_horizontally_bb9_in/13
4. SCC is partially evaluated into eval_bits_replicate_horizontally_bb1_in/6
5. SCC is completely evaluated into other SCCs
6. SCC is partially evaluated into eval_bits_replicate_horizontally_bb0_in/4
7. SCC is partially evaluated into eval_bits_replicate_horizontally_start/6

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations eval_bits_replicate_horizontally_bb5_in/17 
* CE 14 is refined into CE [15] 
* CE 13 is refined into CE [16] 


#### Refined cost equations eval_bits_replicate_horizontally_bb5_in/17 
* CE 15: eval_bits_replicate_horizontally_bb5_in(A,B,C,D,E,F,G,H,I,J,A,B,C,D,E,F,H) = 0
     [A>=I+1,H>=0,H+1=G,J=3] 
* CE 16: eval_bits_replicate_horizontally_bb5_in(V_width,V_replicated_width,V_1,V_2,V_y_0,V_3,V_sx_1,V_12,V_dx1_0,B,C,D,E,F,G,H,I) = 1+ eval_bits_replicate_horizontally_bb5_in(V_width,V_replicated_width,V_1,V_2,V_y_0,V_3,J,V_12,K,L,C,D,E,F,G,H,I)
     [V_dx1_0>=V_width,V_12>=0,V_width+K=V_dx1_0,V_12+1=J,V_12+1=V_sx_1,L=3,B=3] 

### Cost equations --> "Loop" of eval_bits_replicate_horizontally_bb5_in/17 
* CEs [16] --> Loop 13 
* CEs [15] --> Loop 14 

#### Loops of eval_bits_replicate_horizontally_bb5_in/17 
* Loop 13: eval_bits_replicate_horizontally_bb5_in(V_width,V_replicated_width,V_1,V_2,V_y_0,V_3,V_sx_1,V_12,V_dx1_0,B,C,D,E,F,G,H,I)->  eval_bits_replicate_horizontally_bb5_in(V_width,V_replicated_width,V_1,V_2,V_y_0,V_3,V_sx_1',V_12,V_dx1_0',B',C,D,E,F,G,H,I)
                  [V_dx1_0>=V_width,V_12>=0,V_width+V_dx1_0'=V_dx1_0,V_12+1=V_sx_1',V_12+1=V_sx_1,B'=3,B=3] 
* Loop 14: eval_bits_replicate_horizontally_bb5_in(A,B,C,D,E,F,G,H,I,J,A,B,C,D,E,F,H) [A>=I+1,H>=0,H+1=G,J=3] 

### Ranking functions of CR eval_bits_replicate_horizontally_bb5_in(V_width,V_replicated_width,V_1,V_2,V_y_0,V_3,V_sx_1,V_12,V_dx1_0,B,C,D,E,F,G,H,I) 

#### Partial ranking functions of CR eval_bits_replicate_horizontally_bb5_in(V_width,V_replicated_width,V_1,V_2,V_y_0,V_3,V_sx_1,V_12,V_dx1_0,B,C,D,E,F,G,H,I) 


### Resulting Chains:eval_bits_replicate_horizontally_bb5_in(V_width,V_replicated_width,V_1,V_2,V_y_0,V_3,V_sx_1,V_12,V_dx1_0,B,C,D,E,F,G,H,I) 
* [[13]]...
* [[13],14]
* [14]


### Merging Chains  eval_bits_replicate_horizontally_bb5_in/17 into  External patterns of execution 
* [[14]] --> 1 
* [[14,[13]]] --> 2 
* [[[13]]] --> 3 


### Specialization of cost equations eval_bits_replicate_horizontally_bb3_in/13 
* CE 10 is refined into CE [17] 
* CE 9 is refined into CE [18,19,20] 


#### Refined cost equations eval_bits_replicate_horizontally_bb3_in/13 
* CE 17: eval_bits_replicate_horizontally_bb3_in(A,B,C,D,E,F,G,H,A,B,C,D,F) = 0
     [0>=G,H=4] 
* CE 18: eval_bits_replicate_horizontally_bb3_in(V_width,V_replicated_width,V_1,V_2,V_y_0,V_3,V_sx_1,B,C,D,E,F,G) = 2+ eval_bits_replicate_horizontally_bb5_in(V_width,V_replicated_width,V_1,V_2,V_y_0,V_3,H,I,J,K,V_width,V_replicated_width,V_1,V_2,V_y_0,V_3,I):1+ eval_bits_replicate_horizontally_bb3_in(V_width,V_replicated_width,V_1,V_2,V_y_0,V_3,I,L,C,D,E,F,G)
     [V_width>=V_replicated_width+I+1,I>=0,V_replicated_width+I=J,I+1=H,I+1=V_sx_1,L=4,K=3,B=4] 
* CE 19: eval_bits_replicate_horizontally_bb3_in(V_width,V_replicated_width,V_1,V_2,V_y_0,V_3,V_sx_1,B,C,D,E,F,G) = 2+ eval_bits_replicate_horizontally_bb5_in(V_width,V_replicated_width,V_1,V_2,V_y_0,V_3,H,I,J,K,V_width,V_replicated_width,V_1,V_2,V_y_0,V_3,I):2+ eval_bits_replicate_horizontally_bb3_in(V_width,V_replicated_width,V_1,V_2,V_y_0,V_3,I,L,C,D,E,F,G)
     [V_replicated_width+I>=V_width,V_width>=1,I>=0,V_replicated_width+I=J,I+1=H,I+1=V_sx_1,L=4,K=3,B=4] 
* CE 20: eval_bits_replicate_horizontally_bb3_in(V_width,V_replicated_width,V_1,V_2,V_y_0,V_3,V_sx_1,B,C,D,E,F,G) = 2+ eval_bits_replicate_horizontally_bb5_in(V_width,H,V_1,V_2,V_y_0,V_3,I,J,K,L,M,N,O,P,Q,R,S):3
     [K>=V_width,J>=0,K=H+J,K=V_replicated_width+J,J+1=I,J+1=V_sx_1,T=4,L=3,B=4] 

### Cost equations --> "Loop" of eval_bits_replicate_horizontally_bb3_in/13 
* CEs [20] --> Loop 15 
* CEs [18] --> Loop 16 
* CEs [19] --> Loop 17 
* CEs [17] --> Loop 18 

#### Loops of eval_bits_replicate_horizontally_bb3_in/13 
* Loop 15: eval_bits_replicate_horizontally_bb3_in(V_width,V_replicated_width,V_1,V_2,V_y_0,V_3,V_sx_1,B,C,D,E,F,G) [V_replicated_width+V_sx_1>=V_width+1,V_sx_1>=1,B=4] 
* Loop 16: eval_bits_replicate_horizontally_bb3_in(V_width,V_replicated_width,V_1,V_2,V_y_0,V_3,V_sx_1,B,C,D,E,F,G)->  eval_bits_replicate_horizontally_bb3_in(V_width,V_replicated_width,V_1,V_2,V_y_0,V_3,V_sx_1',B',C,D,E,F,G)
                  [V_width>=V_replicated_width+V_sx_1,V_sx_1>=1,V_sx_1=V_sx_1'+1,B'=4,B=4] 
* Loop 17: eval_bits_replicate_horizontally_bb3_in(V_width,V_replicated_width,V_1,V_2,V_y_0,V_3,V_sx_1,B,C,D,E,F,G)->  eval_bits_replicate_horizontally_bb3_in(V_width,V_replicated_width,V_1,V_2,V_y_0,V_3,V_sx_1',B',C,D,E,F,G)
                  [V_replicated_width+V_sx_1>=V_width+1,V_sx_1>=1,V_width>=1,V_sx_1=V_sx_1'+1,B'=4,B=4] 
* Loop 18: eval_bits_replicate_horizontally_bb3_in(A,B,C,D,E,F,G,H,A,B,C,D,F) [0>=G,H=4] 

### Ranking functions of CR eval_bits_replicate_horizontally_bb3_in(V_width,V_replicated_width,V_1,V_2,V_y_0,V_3,V_sx_1,B,C,D,E,F,G) 
* RF of phase [16]: [V_sx_1]
* RF of phase [17]: [V_sx_1,-V_width+V_replicated_width+V_sx_1]

#### Partial ranking functions of CR eval_bits_replicate_horizontally_bb3_in(V_width,V_replicated_width,V_1,V_2,V_y_0,V_3,V_sx_1,B,C,D,E,F,G) 
* Partial RF of phase [16]:
  - RF of loop [16:1]:
    V_sx_1
* Partial RF of phase [17]:
  - RF of loop [17:1]:
    V_sx_1
    -V_width+V_replicated_width+V_sx_1


### Resulting Chains:eval_bits_replicate_horizontally_bb3_in(V_width,V_replicated_width,V_1,V_2,V_y_0,V_3,V_sx_1,B,C,D,E,F,G) 
* [[17],[16],18]
* [[17],18]
* [[17],15]...
* [[16],18]
* [18]
* [15]...


### Merging Chains  eval_bits_replicate_horizontally_bb3_in/13 into  External patterns of execution 
* [[18]] --> 1 
* [[18,[17]]] --> 2 
* [[18,[16]]] --> 3 
* [[18,[16],[17]]] --> 4 
* [[15]] --> 5 
* [[15,[17]]] --> 6 


### Specialization of cost equations eval_bits_replicate_horizontally_bb11_in/17 
* CE 12 is refined into CE [21] 
* CE 11 is refined into CE [22] 


#### Refined cost equations eval_bits_replicate_horizontally_bb11_in/17 
* CE 21: eval_bits_replicate_horizontally_bb11_in(A,B,C,D,E,F,G,H,I,J,A,B,C,D,E,F,H) = 0
     [C>=I+1,H>=0,H+1=G,J=2] 
* CE 22: eval_bits_replicate_horizontally_bb11_in(V_width,V_replicated_width,V_1,V_2,V_y_0,V_3,V_sx_0,V_43,V_dx_0,B,C,D,E,F,G,H,I) = 1+ eval_bits_replicate_horizontally_bb11_in(V_width,V_replicated_width,V_1,V_2,V_y_0,V_3,J,V_43,K,L,C,D,E,F,G,H,I)
     [V_dx_0>=V_1,V_43>=0,V_1+K=V_dx_0,V_43+1=J,V_43+1=V_sx_0,L=2,B=2] 

### Cost equations --> "Loop" of eval_bits_replicate_horizontally_bb11_in/17 
* CEs [22] --> Loop 19 
* CEs [21] --> Loop 20 

#### Loops of eval_bits_replicate_horizontally_bb11_in/17 
* Loop 19: eval_bits_replicate_horizontally_bb11_in(V_width,V_replicated_width,V_1,V_2,V_y_0,V_3,V_sx_0,V_43,V_dx_0,B,C,D,E,F,G,H,I)->  eval_bits_replicate_horizontally_bb11_in(V_width,V_replicated_width,V_1,V_2,V_y_0,V_3,V_sx_0',V_43,V_dx_0',B',C,D,E,F,G,H,I)
                  [V_dx_0>=V_1,V_43>=0,V_1+V_dx_0'=V_dx_0,V_43+1=V_sx_0',V_43+1=V_sx_0,B'=2,B=2] 
* Loop 20: eval_bits_replicate_horizontally_bb11_in(A,B,C,D,E,F,G,H,I,J,A,B,C,D,E,F,H) [C>=I+1,H>=0,H+1=G,J=2] 

### Ranking functions of CR eval_bits_replicate_horizontally_bb11_in(V_width,V_replicated_width,V_1,V_2,V_y_0,V_3,V_sx_0,V_43,V_dx_0,B,C,D,E,F,G,H,I) 

#### Partial ranking functions of CR eval_bits_replicate_horizontally_bb11_in(V_width,V_replicated_width,V_1,V_2,V_y_0,V_3,V_sx_0,V_43,V_dx_0,B,C,D,E,F,G,H,I) 


### Resulting Chains:eval_bits_replicate_horizontally_bb11_in(V_width,V_replicated_width,V_1,V_2,V_y_0,V_3,V_sx_0,V_43,V_dx_0,B,C,D,E,F,G,H,I) 
* [[19]]...
* [[19],20]
* [20]


### Merging Chains  eval_bits_replicate_horizontally_bb11_in/17 into  External patterns of execution 
* [[20]] --> 1 
* [[20,[19]]] --> 2 
* [[[19]]] --> 3 


### Specialization of cost equations eval_bits_replicate_horizontally_bb9_in/13 
* CE 8 is refined into CE [23] 
* CE 7 is refined into CE [24,25,26] 


#### Refined cost equations eval_bits_replicate_horizontally_bb9_in/13 
* CE 23: eval_bits_replicate_horizontally_bb9_in(A,B,C,D,E,F,G,H,A,B,C,D,F) = 0
     [0>=G,H=4] 
* CE 24: eval_bits_replicate_horizontally_bb9_in(V_width,V_replicated_width,V_1,V_2,V_y_0,V_3,V_sx_0,B,C,D,E,F,G) = 2+ eval_bits_replicate_horizontally_bb11_in(V_width,V_replicated_width,V_1,V_2,V_y_0,V_3,H,I,J,K,V_width,V_replicated_width,V_1,V_2,V_y_0,V_3,I):1+ eval_bits_replicate_horizontally_bb9_in(V_width,V_replicated_width,V_1,V_2,V_y_0,V_3,I,L,C,D,E,F,G)
     [V_1>=V_2+I+1,I>=0,V_2+I=J,I+1=H,I+1=V_sx_0,L=4,K=2,B=4] 
* CE 25: eval_bits_replicate_horizontally_bb9_in(V_width,V_replicated_width,V_1,V_2,V_y_0,V_3,V_sx_0,B,C,D,E,F,G) = 2+ eval_bits_replicate_horizontally_bb11_in(V_width,V_replicated_width,V_1,V_2,V_y_0,V_3,H,I,J,K,V_width,V_replicated_width,V_1,V_2,V_y_0,V_3,I):2+ eval_bits_replicate_horizontally_bb9_in(V_width,V_replicated_width,V_1,V_2,V_y_0,V_3,I,L,C,D,E,F,G)
     [V_2+I>=V_1,V_1>=1,I>=0,V_2+I=J,I+1=H,I+1=V_sx_0,L=4,K=2,B=4] 
* CE 26: eval_bits_replicate_horizontally_bb9_in(V_width,V_replicated_width,V_1,V_2,V_y_0,V_3,V_sx_0,B,C,D,E,F,G) = 2+ eval_bits_replicate_horizontally_bb11_in(V_width,V_replicated_width,V_1,H,V_y_0,V_3,I,J,K,L,M,N,O,P,Q,R,S):3
     [K>=V_1,J>=0,K=H+J,K=V_2+J,J+1=I,J+1=V_sx_0,T=4,L=2,B=4] 

### Cost equations --> "Loop" of eval_bits_replicate_horizontally_bb9_in/13 
* CEs [26] --> Loop 21 
* CEs [24] --> Loop 22 
* CEs [25] --> Loop 23 
* CEs [23] --> Loop 24 

#### Loops of eval_bits_replicate_horizontally_bb9_in/13 
* Loop 21: eval_bits_replicate_horizontally_bb9_in(V_width,V_replicated_width,V_1,V_2,V_y_0,V_3,V_sx_0,B,C,D,E,F,G) [V_2+V_sx_0>=V_1+1,V_sx_0>=1,B=4] 
* Loop 22: eval_bits_replicate_horizontally_bb9_in(V_width,V_replicated_width,V_1,V_2,V_y_0,V_3,V_sx_0,B,C,D,E,F,G)->  eval_bits_replicate_horizontally_bb9_in(V_width,V_replicated_width,V_1,V_2,V_y_0,V_3,V_sx_0',B',C,D,E,F,G)
                  [V_1>=V_2+V_sx_0,V_sx_0>=1,V_sx_0=V_sx_0'+1,B'=4,B=4] 
* Loop 23: eval_bits_replicate_horizontally_bb9_in(V_width,V_replicated_width,V_1,V_2,V_y_0,V_3,V_sx_0,B,C,D,E,F,G)->  eval_bits_replicate_horizontally_bb9_in(V_width,V_replicated_width,V_1,V_2,V_y_0,V_3,V_sx_0',B',C,D,E,F,G)
                  [V_2+V_sx_0>=V_1+1,V_sx_0>=1,V_1>=1,V_sx_0=V_sx_0'+1,B'=4,B=4] 
* Loop 24: eval_bits_replicate_horizontally_bb9_in(A,B,C,D,E,F,G,H,A,B,C,D,F) [0>=G,H=4] 

### Ranking functions of CR eval_bits_replicate_horizontally_bb9_in(V_width,V_replicated_width,V_1,V_2,V_y_0,V_3,V_sx_0,B,C,D,E,F,G) 
* RF of phase [22]: [V_sx_0]
* RF of phase [23]: [-V_1+V_2+V_sx_0,V_sx_0]

#### Partial ranking functions of CR eval_bits_replicate_horizontally_bb9_in(V_width,V_replicated_width,V_1,V_2,V_y_0,V_3,V_sx_0,B,C,D,E,F,G) 
* Partial RF of phase [22]:
  - RF of loop [22:1]:
    V_sx_0
* Partial RF of phase [23]:
  - RF of loop [23:1]:
    -V_1+V_2+V_sx_0
    V_sx_0


### Resulting Chains:eval_bits_replicate_horizontally_bb9_in(V_width,V_replicated_width,V_1,V_2,V_y_0,V_3,V_sx_0,B,C,D,E,F,G) 
* [[23],[22],24]
* [[23],24]
* [[23],21]...
* [[22],24]
* [24]
* [21]...


### Merging Chains  eval_bits_replicate_horizontally_bb9_in/13 into  External patterns of execution 
* [[24]] --> 1 
* [[24,[23]]] --> 2 
* [[24,[22]]] --> 3 
* [[24,[22],[23]]] --> 4 
* [[21]] --> 5 
* [[21,[23]]] --> 6 


### Specialization of cost equations eval_bits_replicate_horizontally_bb1_in/6 
* CE 6 is refined into CE [27] 
* CE 4 is refined into CE [28,29,30,31,32,33] 
* CE 5 is refined into CE [34,35,36,37,38,39] 


#### Refined cost equations eval_bits_replicate_horizontally_bb1_in/6 
* CE 27: eval_bits_replicate_horizontally_bb1_in(V_width,V_replicated_width,V_1,V_2,V_y_0,B) = 0
     [0>=V_y_0,B=5] 
* CE 28: eval_bits_replicate_horizontally_bb1_in(V_width,V_replicated_width,V_1,V_2,V_y_0,B) = 2+ eval_bits_replicate_horizontally_bb9_in(V_width,V_replicated_width,V_1,V_2,C,D,V_1,E,V_width,V_replicated_width,V_1,V_2,D):1+ eval_bits_replicate_horizontally_bb1_in(V_width,V_replicated_width,V_1,V_2,D,F)
     [D>=0,0>=V_1,D+1=C,D+1=V_y_0,F=5,E=4,B=5] 
* CE 29: eval_bits_replicate_horizontally_bb1_in(V_width,V_replicated_width,V_1,V_2,V_y_0,B) = 2+ eval_bits_replicate_horizontally_bb9_in(V_width,V_replicated_width,V_1,V_2,C,D,V_1,E,V_width,V_replicated_width,V_1,V_2,D):2+ eval_bits_replicate_horizontally_bb1_in(V_width,V_replicated_width,V_1,V_2,D,F)
     [V_2>=V_1,V_1>=1,D>=0,D+1=C,D+1=V_y_0,F=5,E=4,B=5] 
* CE 30: eval_bits_replicate_horizontally_bb1_in(V_width,V_replicated_width,V_1,V_2,V_y_0,B) = 2+ eval_bits_replicate_horizontally_bb9_in(V_width,V_replicated_width,V_1,V_2,C,D,V_1,E,V_width,V_replicated_width,V_1,V_2,D):3+ eval_bits_replicate_horizontally_bb1_in(V_width,V_replicated_width,V_1,V_2,D,F)
     [V_1>=1,D>=0,0>=V_2,D+1=C,D+1=V_y_0,F=5,E=4,B=5] 
* CE 31: eval_bits_replicate_horizontally_bb1_in(V_width,V_replicated_width,V_1,V_2,V_y_0,B) = 2+ eval_bits_replicate_horizontally_bb9_in(V_width,V_replicated_width,V_1,V_2,C,D,V_1,E,V_width,V_replicated_width,V_1,V_2,D):4+ eval_bits_replicate_horizontally_bb1_in(V_width,V_replicated_width,V_1,V_2,D,F)
     [V_1>=V_2+1,V_2>=1,D>=0,D+1=C,D+1=V_y_0,F=5,E=4,B=5] 
* CE 32: eval_bits_replicate_horizontally_bb1_in(V_width,V_replicated_width,V_1,V_2,V_y_0,B) = 2+ eval_bits_replicate_horizontally_bb9_in(V_width,V_replicated_width,V_1,V_2,C,D,V_1,E,F,G,H,I,J):5
     [V_1>=1,D>=0,V_2>=1,D+1=C,D+1=V_y_0,K=5,E=4,B=5] 
* CE 33: eval_bits_replicate_horizontally_bb1_in(V_width,V_replicated_width,V_1,V_2,V_y_0,B) = 2+ eval_bits_replicate_horizontally_bb9_in(V_width,V_replicated_width,V_1,V_2,C,D,V_1,E,F,G,H,I,J):6
     [V_1>=2,D>=0,V_2>=2,D+1=C,D+1=V_y_0,K=5,E=4,B=5] 
* CE 34: eval_bits_replicate_horizontally_bb1_in(V_width,V_replicated_width,V_1,V_2,V_y_0,B) = 2+ eval_bits_replicate_horizontally_bb3_in(V_width,V_replicated_width,V_1,V_2,C,D,V_width,E,V_width,V_replicated_width,V_1,V_2,D):1+ eval_bits_replicate_horizontally_bb1_in(V_width,V_replicated_width,V_1,V_2,D,F)
     [D>=0,0>=V_width,D+1=C,D+1=V_y_0,F=5,E=4,B=5] 
* CE 35: eval_bits_replicate_horizontally_bb1_in(V_width,V_replicated_width,V_1,V_2,V_y_0,B) = 2+ eval_bits_replicate_horizontally_bb3_in(V_width,V_replicated_width,V_1,V_2,C,D,V_width,E,V_width,V_replicated_width,V_1,V_2,D):2+ eval_bits_replicate_horizontally_bb1_in(V_width,V_replicated_width,V_1,V_2,D,F)
     [V_replicated_width>=V_width,V_width>=1,D>=0,D+1=C,D+1=V_y_0,F=5,E=4,B=5] 
* CE 36: eval_bits_replicate_horizontally_bb1_in(V_width,V_replicated_width,V_1,V_2,V_y_0,B) = 2+ eval_bits_replicate_horizontally_bb3_in(V_width,V_replicated_width,V_1,V_2,C,D,V_width,E,V_width,V_replicated_width,V_1,V_2,D):3+ eval_bits_replicate_horizontally_bb1_in(V_width,V_replicated_width,V_1,V_2,D,F)
     [V_width>=1,D>=0,0>=V_replicated_width,D+1=C,D+1=V_y_0,F=5,E=4,B=5] 
* CE 37: eval_bits_replicate_horizontally_bb1_in(V_width,V_replicated_width,V_1,V_2,V_y_0,B) = 2+ eval_bits_replicate_horizontally_bb3_in(V_width,V_replicated_width,V_1,V_2,C,D,V_width,E,V_width,V_replicated_width,V_1,V_2,D):4+ eval_bits_replicate_horizontally_bb1_in(V_width,V_replicated_width,V_1,V_2,D,F)
     [V_width>=V_replicated_width+1,V_replicated_width>=1,D>=0,D+1=C,D+1=V_y_0,F=5,E=4,B=5] 
* CE 38: eval_bits_replicate_horizontally_bb1_in(V_width,V_replicated_width,V_1,V_2,V_y_0,B) = 2+ eval_bits_replicate_horizontally_bb3_in(V_width,V_replicated_width,V_1,V_2,C,D,V_width,E,F,G,H,I,J):5
     [V_width>=1,D>=0,V_replicated_width>=1,D+1=C,D+1=V_y_0,K=5,E=4,B=5] 
* CE 39: eval_bits_replicate_horizontally_bb1_in(V_width,V_replicated_width,V_1,V_2,V_y_0,B) = 2+ eval_bits_replicate_horizontally_bb3_in(V_width,V_replicated_width,V_1,V_2,C,D,V_width,E,F,G,H,I,J):6
     [V_width>=2,D>=0,V_replicated_width>=2,D+1=C,D+1=V_y_0,K=5,E=4,B=5] 

### Cost equations --> "Loop" of eval_bits_replicate_horizontally_bb1_in/6 
* CEs [32,33] --> Loop 25 
* CEs [38,39] --> Loop 26 
* CEs [31] --> Loop 27 
* CEs [29] --> Loop 28 
* CEs [37] --> Loop 29 
* CEs [35] --> Loop 30 
* CEs [30] --> Loop 31 
* CEs [28] --> Loop 32 
* CEs [36] --> Loop 33 
* CEs [34] --> Loop 34 
* CEs [27] --> Loop 35 

#### Loops of eval_bits_replicate_horizontally_bb1_in/6 
* Loop 25: eval_bits_replicate_horizontally_bb1_in(V_width,V_replicated_width,V_1,V_2,V_y_0,B) [V_y_0>=1,V_2>=1,V_1>=1,B=5] 
* Loop 26: eval_bits_replicate_horizontally_bb1_in(V_width,V_replicated_width,V_1,V_2,V_y_0,B) [V_y_0>=1,V_replicated_width>=1,V_width>=1,B=5] 
* Loop 27: eval_bits_replicate_horizontally_bb1_in(V_width,V_replicated_width,V_1,V_2,V_y_0,B)->  eval_bits_replicate_horizontally_bb1_in(V_width,V_replicated_width,V_1,V_2,V_y_0',B')
                  [V_1>=V_2+1,V_y_0>=1,V_2>=1,V_y_0=V_y_0'+1,B'=5,B=5] 
* Loop 28: eval_bits_replicate_horizontally_bb1_in(V_width,V_replicated_width,V_1,V_2,V_y_0,B)->  eval_bits_replicate_horizontally_bb1_in(V_width,V_replicated_width,V_1,V_2,V_y_0',B')
                  [V_2>=V_1,V_y_0>=1,V_1>=1,V_y_0=V_y_0'+1,B'=5,B=5] 
* Loop 29: eval_bits_replicate_horizontally_bb1_in(V_width,V_replicated_width,V_1,V_2,V_y_0,B)->  eval_bits_replicate_horizontally_bb1_in(V_width,V_replicated_width,V_1,V_2,V_y_0',B')
                  [V_width>=V_replicated_width+1,V_y_0>=1,V_replicated_width>=1,V_y_0=V_y_0'+1,B'=5,B=5] 
* Loop 30: eval_bits_replicate_horizontally_bb1_in(V_width,V_replicated_width,V_1,V_2,V_y_0,B)->  eval_bits_replicate_horizontally_bb1_in(V_width,V_replicated_width,V_1,V_2,V_y_0',B')
                  [V_replicated_width>=V_width,V_y_0>=1,V_width>=1,V_y_0=V_y_0'+1,B'=5,B=5] 
* Loop 31: eval_bits_replicate_horizontally_bb1_in(V_width,V_replicated_width,V_1,V_2,V_y_0,B)->  eval_bits_replicate_horizontally_bb1_in(V_width,V_replicated_width,V_1,V_2,V_y_0',B')
                  [V_y_0>=1,V_1>=1,0>=V_2,V_y_0=V_y_0'+1,B'=5,B=5] 
* Loop 32: eval_bits_replicate_horizontally_bb1_in(V_width,V_replicated_width,V_1,V_2,V_y_0,B)->  eval_bits_replicate_horizontally_bb1_in(V_width,V_replicated_width,V_1,V_2,V_y_0',B')
                  [V_y_0>=1,0>=V_1,V_y_0=V_y_0'+1,B'=5,B=5] 
* Loop 33: eval_bits_replicate_horizontally_bb1_in(V_width,V_replicated_width,V_1,V_2,V_y_0,B)->  eval_bits_replicate_horizontally_bb1_in(V_width,V_replicated_width,V_1,V_2,V_y_0',B')
                  [V_y_0>=1,V_width>=1,0>=V_replicated_width,V_y_0=V_y_0'+1,B'=5,B=5] 
* Loop 34: eval_bits_replicate_horizontally_bb1_in(V_width,V_replicated_width,V_1,V_2,V_y_0,B)->  eval_bits_replicate_horizontally_bb1_in(V_width,V_replicated_width,V_1,V_2,V_y_0',B')
                  [V_y_0>=1,0>=V_width,V_y_0=V_y_0'+1,B'=5,B=5] 
* Loop 35: eval_bits_replicate_horizontally_bb1_in(V_width,V_replicated_width,V_1,V_2,V_y_0,B) [0>=V_y_0,B=5] 

### Ranking functions of CR eval_bits_replicate_horizontally_bb1_in(V_width,V_replicated_width,V_1,V_2,V_y_0,B) 
* RF of phase [27,28,29,30,31,32,33,34]: [V_y_0]

#### Partial ranking functions of CR eval_bits_replicate_horizontally_bb1_in(V_width,V_replicated_width,V_1,V_2,V_y_0,B) 
* Partial RF of phase [27,28,29,30,31,32,33,34]:
  - RF of loop [27:1,28:1,29:1,30:1,31:1,32:1,33:1,34:1]:
    V_y_0


### Resulting Chains:eval_bits_replicate_horizontally_bb1_in(V_width,V_replicated_width,V_1,V_2,V_y_0,B) 
* [[27,28,29,30,31,32,33,34],35]
* [[27,28,29,30,31,32,33,34],26]...
* [[27,28,29,30,31,32,33,34],25]...
* [35]
* [26]...
* [25]...


### Merging Chains  eval_bits_replicate_horizontally_bb1_in/6 into  External patterns of execution 
* [[35]] --> 1 
* [[35,[27,28,29,30,31,32,33,34]]] --> 2 
* [[26]] --> 3 
* [[26,[27,28,29,30,31,32,33,34]]] --> 4 
* [[25]] --> 5 
* [[25,[27,28,29,30,31,32,33,34]]] --> 6 


### Specialization of cost equations eval_bits_replicate_horizontally_bb0_in/4 
* CE 3 is refined into CE [40,41,42,43,44,45] 


#### Refined cost equations eval_bits_replicate_horizontally_bb0_in/4 
* CE 40: eval_bits_replicate_horizontally_bb0_in(V_width,V_height,V_replicated_width,B) = 1+ eval_bits_replicate_horizontally_bb1_in(V_width,V_replicated_width,C,D,V_height,E):1
     [0>=V_height,E=5] 
* CE 41: eval_bits_replicate_horizontally_bb0_in(V_width,V_height,V_replicated_width,B) = 1+ eval_bits_replicate_horizontally_bb1_in(V_width,V_replicated_width,C,D,V_height,E):2
     [V_height>=1,E=5] 
* CE 42: eval_bits_replicate_horizontally_bb0_in(V_width,V_height,V_replicated_width,B) = 1+ eval_bits_replicate_horizontally_bb1_in(V_width,V_replicated_width,C,D,V_height,E):3
     [V_height>=1,V_replicated_width>=1,V_width>=1,E=5] 
* CE 43: eval_bits_replicate_horizontally_bb0_in(V_width,V_height,V_replicated_width,B) = 1+ eval_bits_replicate_horizontally_bb1_in(V_width,V_replicated_width,C,D,V_height,E):4
     [V_height>=2,V_replicated_width>=1,V_width>=1,E=5] 
* CE 44: eval_bits_replicate_horizontally_bb0_in(V_width,V_height,V_replicated_width,B) = 1+ eval_bits_replicate_horizontally_bb1_in(V_width,V_replicated_width,C,D,V_height,E):5
     [V_height>=1,D>=1,C>=1,E=5] 
* CE 45: eval_bits_replicate_horizontally_bb0_in(V_width,V_height,V_replicated_width,B) = 1+ eval_bits_replicate_horizontally_bb1_in(V_width,V_replicated_width,C,D,V_height,E):6
     [V_height>=2,D>=1,C>=1,E=5] 

### Cost equations --> "Loop" of eval_bits_replicate_horizontally_bb0_in/4 
* CEs [42,43,44,45] --> Loop 36 
* CEs [41] --> Loop 37 
* CEs [40] --> Loop 38 

#### Loops of eval_bits_replicate_horizontally_bb0_in/4 
* Loop 36: eval_bits_replicate_horizontally_bb0_in(V_width,V_height,V_replicated_width,B) [V_height>=1] 
* Loop 37: eval_bits_replicate_horizontally_bb0_in(V_width,V_height,V_replicated_width,B) [V_height>=1] 
* Loop 38: eval_bits_replicate_horizontally_bb0_in(V_width,V_height,V_replicated_width,B) [0>=V_height] 

### Ranking functions of CR eval_bits_replicate_horizontally_bb0_in(V_width,V_height,V_replicated_width,B) 

#### Partial ranking functions of CR eval_bits_replicate_horizontally_bb0_in(V_width,V_height,V_replicated_width,B) 


### Resulting Chains:eval_bits_replicate_horizontally_bb0_in(V_width,V_height,V_replicated_width,B) 
* [38]
* [37]
* [36]...


### Merging Chains  eval_bits_replicate_horizontally_bb0_in/4 into  External patterns of execution 
* [[38]] --> 1 
* [[37]] --> 2 
* [[36]] --> 3 


### Specialization of cost equations eval_bits_replicate_horizontally_start/6 
* CE 2 is refined into CE [46,47,48] 


#### Refined cost equations eval_bits_replicate_horizontally_start/6 
* CE 46: eval_bits_replicate_horizontally_start(V_width,V_height,V_raster,V_replicated_width,V_replicated_raster,B) = 0+ eval_bits_replicate_horizontally_bb0_in(V_width,V_height,V_replicated_width,B):1
     [0>=V_height] 
* CE 47: eval_bits_replicate_horizontally_start(V_width,V_height,V_raster,V_replicated_width,V_replicated_raster,B) = 0+ eval_bits_replicate_horizontally_bb0_in(V_width,V_height,V_replicated_width,B):2
     [V_height>=1] 
* CE 48: eval_bits_replicate_horizontally_start(V_width,V_height,V_raster,V_replicated_width,V_replicated_raster,B) = 0+ eval_bits_replicate_horizontally_bb0_in(V_width,V_height,V_replicated_width,B):3
     [V_height>=1] 

### Cost equations --> "Loop" of eval_bits_replicate_horizontally_start/6 
* CEs [48] --> Loop 39 
* CEs [47] --> Loop 40 
* CEs [46] --> Loop 41 

#### Loops of eval_bits_replicate_horizontally_start/6 
* Loop 39: eval_bits_replicate_horizontally_start(V_width,V_height,V_raster,V_replicated_width,V_replicated_raster,B) [V_height>=1] 
* Loop 40: eval_bits_replicate_horizontally_start(V_width,V_height,V_raster,V_replicated_width,V_replicated_raster,B) [V_height>=1] 
* Loop 41: eval_bits_replicate_horizontally_start(V_width,V_height,V_raster,V_replicated_width,V_replicated_raster,B) [0>=V_height] 

### Ranking functions of CR eval_bits_replicate_horizontally_start(V_width,V_height,V_raster,V_replicated_width,V_replicated_raster,B) 

#### Partial ranking functions of CR eval_bits_replicate_horizontally_start(V_width,V_height,V_raster,V_replicated_width,V_replicated_raster,B) 


### Resulting Chains:eval_bits_replicate_horizontally_start(V_width,V_height,V_raster,V_replicated_width,V_replicated_raster,B) 
* [41]
* [40]
* [39]...


### Merging Chains  eval_bits_replicate_horizontally_start/6 into  External patterns of execution 
* [[41]] --> 1 
* [[40]] --> 2 
* [[39]] --> 3 


Computing Bounds
=====================================

#### Cost of loops [13] 

 * loop 13:eval_bits_replicate_horizontally_bb5_in(V_width,V_replicated_width,V_1,V_2,V_y_0,V_3,V_sx_1,V_12,V_dx1_0,B,C,D,E,F,G,H,I) -> [eval_bits_replicate_horizontally_bb5_in(V_width',V_replicated_width',V_1',V_2',V_y_0',V_3',V_sx_1',V_12',V_dx1_0',B',C',D',E',F',G',H',I')] 
1
#### Cost of phase [13]:eval_bits_replicate_horizontally_bb5_in(V_width,V_replicated_width,V_1,V_2,V_y_0,V_3,V_sx_1,V_12,V_dx1_0,B,C,D,E,F,G,H,I) -> [eval_bits_replicate_horizontally_bb5_in(V_width',V_replicated_width',V_1',V_2',V_y_0',V_3',V_sx_1',V_12',V_dx1_0',B',C',D',E',F',G',H',I')] 
1*it(13)+0
#### Cost of phase [13]:eval_bits_replicate_horizontally_bb5_in(V_width,V_replicated_width,V_1,V_2,V_y_0,V_3,V_sx_1,V_12,V_dx1_0,B,C,D,E,F,G,H,I) -> [eval_bits_replicate_horizontally_bb5_in(V_width',V_replicated_width',V_1',V_2',V_y_0',V_3',V_sx_1',V_12',V_dx1_0',B',C',D',E',F',G',H',I')] 
1*it(13)+0
#### Cost of chains of eval_bits_replicate_horizontally_bb5_in(V_width,V_replicated_width,V_1,V_2,V_y_0,V_3,V_sx_1,V_12,V_dx1_0,B,C,D,E,F,G,H,I):
* Chain [[13]]...: 1*it(13)+0
  with precondition: [V_dx1_0>=V_width,V_12>=0,V_sx_1=V_12+1,B=3] 

* Chain [[13],14]: 1*it(13)+0
  with precondition: [B=3,V_sx_1=V_12+1,V_width=C,V_replicated_width=D,V_1=E,V_2=F,V_y_0=G,V_3=H,V_sx_1=I+1,V_width>=1,V_sx_1>=1,V_dx1_0>=V_width] 

* Chain [14]: 0
  with precondition: [B=3,D=V_replicated_width,E=V_1,F=V_2,G=V_y_0,H=V_3,V_sx_1=V_12+1,V_width=C,V_sx_1=I+1,V_sx_1>=1,V_width>=V_dx1_0+1] 


#### Cost of loops [16] 

 * loop 16:eval_bits_replicate_horizontally_bb3_in(V_width,V_replicated_width,V_1,V_2,V_y_0,V_3,V_sx_1,B,C,D,E,F,G) -> [eval_bits_replicate_horizontally_bb3_in(V_width',V_replicated_width',V_1',V_2',V_y_0',V_3',V_sx_1',B',C',D',E',F',G')] 
2
#### Cost of phase [16]:eval_bits_replicate_horizontally_bb3_in(V_width,V_replicated_width,V_1,V_2,V_y_0,V_3,V_sx_1,B,C,D,E,F,G) -> [eval_bits_replicate_horizontally_bb3_in(V_width',V_replicated_width',V_1',V_2',V_y_0',V_3',V_sx_1',B',C',D',E',F',G')] 
2*it(16)+0
  Such that:it(16) =< V_sx_1
it(16) =< V_sx_1-V_sx_1'

#### Cost of loops [17] 

 * loop 17:eval_bits_replicate_horizontally_bb3_in(V_width,V_replicated_width,V_1,V_2,V_y_0,V_3,V_sx_1,B,C,D,E,F,G) -> [eval_bits_replicate_horizontally_bb3_in(V_width',V_replicated_width',V_1',V_2',V_y_0',V_3',V_sx_1',B',C',D',E',F',G')] 
1*s(2)+2
#### Cost of phase [17]:eval_bits_replicate_horizontally_bb3_in(V_width,V_replicated_width,V_1,V_2,V_y_0,V_3,V_sx_1,B,C,D,E,F,G) -> [eval_bits_replicate_horizontally_bb3_in(V_width',V_replicated_width',V_1',V_2',V_y_0',V_3',V_sx_1',B',C',D',E',F',G')] 
2*it(17)+1*s(3)+0
  Such that:it(17) =< -V_width+V_replicated_width+V_sx_1
it(17) =< -V_width+V_replicated_width+V_sx_1+V_width'-V_replicated_width'-V_sx_1'
it(17) =< V_sx_1
it(17) =< V_sx_1-V_sx_1'

#### Cost of phase [17]:eval_bits_replicate_horizontally_bb3_in(V_width,V_replicated_width,V_1,V_2,V_y_0,V_3,V_sx_1,B,C,D,E,F,G) -> [eval_bits_replicate_horizontally_bb3_in(V_width',V_replicated_width',V_1',V_2',V_y_0',V_3',V_sx_1',B',C',D',E',F',G')] 
2*it(17)+1*s(3)+0
  Such that:it(17) =< -V_width+V_replicated_width+V_sx_1
it(17) =< -V_width+V_replicated_width+V_sx_1+V_width'-V_replicated_width'-V_sx_1'
it(17) =< V_sx_1
it(17) =< V_sx_1-V_sx_1'

#### Cost of phase [17]:eval_bits_replicate_horizontally_bb3_in(V_width,V_replicated_width,V_1,V_2,V_y_0,V_3,V_sx_1,B,C,D,E,F,G) -> [eval_bits_replicate_horizontally_bb3_in(V_width',V_replicated_width',V_1',V_2',V_y_0',V_3',V_sx_1',B',C',D',E',F',G')] 
2*it(17)+1*s(3)+0
  Such that:it(17) =< -V_width+V_replicated_width+V_sx_1
it(17) =< -V_width+V_replicated_width+V_sx_1+V_width'-V_replicated_width'-V_sx_1'
it(17) =< V_sx_1
it(17) =< V_sx_1-V_sx_1'

#### Cost of chains of eval_bits_replicate_horizontally_bb3_in(V_width,V_replicated_width,V_1,V_2,V_y_0,V_3,V_sx_1,B,C,D,E,F,G):
* Chain [[17],[16],18]: 2*it(16)+2*it(17)+1*s(3)+0
  Such that:it(17) =< -V_width+V_sx_1+D
it(16) =< V_width-D

  with precondition: [B=4,V_y_0=V_3+1,V_width=C,V_replicated_width=D,V_1=E,V_2=F,V_y_0=G+1,V_y_0>=1,V_width>=V_replicated_width+1,V_width>=V_sx_1,V_replicated_width+V_sx_1>=V_width+1] 

* Chain [[17],18]: 2*it(17)+1*s(3)+0
  Such that:it(17) =< V_sx_1

  with precondition: [B=4,V_y_0=V_3+1,V_width=C,V_replicated_width=D,V_1=E,V_2=F,V_y_0=G+1,V_y_0>=1,V_sx_1>=1,V_replicated_width>=V_width,V_width>=V_sx_1] 

* Chain [[17],15]...: 2*it(17)+2*s(3)+2
  Such that:it(17) =< V_sx_1

  with precondition: [B=4,V_y_0=V_3+1,V_y_0>=1,V_sx_1>=2,V_width>=V_sx_1,V_replicated_width+V_sx_1>=V_width+2] 

* Chain [[16],18]: 2*it(16)+0
  Such that:it(16) =< V_sx_1

  with precondition: [B=4,V_y_0=V_3+1,V_width=C,V_replicated_width=D,V_1=E,V_2=F,V_y_0=G+1,V_y_0>=1,V_sx_1>=1,V_width>=V_sx_1,V_width>=V_replicated_width+V_sx_1] 

* Chain [18]: 0
  with precondition: [B=4,D=V_replicated_width,E=V_1,F=V_2,V_3+1=V_y_0,V_width=C,V_3=G,0>=V_sx_1,V_3>=0,V_width>=V_sx_1] 

* Chain [15]...: 1*s(4)+2
  with precondition: [B=4,V_y_0=V_3+1,V_y_0>=1,V_sx_1>=1,V_width>=V_sx_1,V_replicated_width+V_sx_1>=V_width+1] 


#### Cost of loops [19] 

 * loop 19:eval_bits_replicate_horizontally_bb11_in(V_width,V_replicated_width,V_1,V_2,V_y_0,V_3,V_sx_0,V_43,V_dx_0,B,C,D,E,F,G,H,I) -> [eval_bits_replicate_horizontally_bb11_in(V_width',V_replicated_width',V_1',V_2',V_y_0',V_3',V_sx_0',V_43',V_dx_0',B',C',D',E',F',G',H',I')] 
1
#### Cost of phase [19]:eval_bits_replicate_horizontally_bb11_in(V_width,V_replicated_width,V_1,V_2,V_y_0,V_3,V_sx_0,V_43,V_dx_0,B,C,D,E,F,G,H,I) -> [eval_bits_replicate_horizontally_bb11_in(V_width',V_replicated_width',V_1',V_2',V_y_0',V_3',V_sx_0',V_43',V_dx_0',B',C',D',E',F',G',H',I')] 
1*it(19)+0
#### Cost of phase [19]:eval_bits_replicate_horizontally_bb11_in(V_width,V_replicated_width,V_1,V_2,V_y_0,V_3,V_sx_0,V_43,V_dx_0,B,C,D,E,F,G,H,I) -> [eval_bits_replicate_horizontally_bb11_in(V_width',V_replicated_width',V_1',V_2',V_y_0',V_3',V_sx_0',V_43',V_dx_0',B',C',D',E',F',G',H',I')] 
1*it(19)+0
#### Cost of chains of eval_bits_replicate_horizontally_bb11_in(V_width,V_replicated_width,V_1,V_2,V_y_0,V_3,V_sx_0,V_43,V_dx_0,B,C,D,E,F,G,H,I):
* Chain [[19]]...: 1*it(19)+0
  with precondition: [V_dx_0>=V_1,V_43>=0,V_sx_0=V_43+1,B=2] 

* Chain [[19],20]: 1*it(19)+0
  with precondition: [B=2,V_sx_0=V_43+1,V_width=C,V_replicated_width=D,V_1=E,V_2=F,V_y_0=G,V_3=H,V_sx_0=I+1,V_1>=1,V_sx_0>=1,V_dx_0>=V_1] 

* Chain [20]: 0
  with precondition: [B=2,C=V_width,D=V_replicated_width,F=V_2,G=V_y_0,H=V_3,V_sx_0=V_43+1,V_1=E,V_sx_0=I+1,V_sx_0>=1,V_1>=V_dx_0+1] 


#### Cost of loops [22] 

 * loop 22:eval_bits_replicate_horizontally_bb9_in(V_width,V_replicated_width,V_1,V_2,V_y_0,V_3,V_sx_0,B,C,D,E,F,G) -> [eval_bits_replicate_horizontally_bb9_in(V_width',V_replicated_width',V_1',V_2',V_y_0',V_3',V_sx_0',B',C',D',E',F',G')] 
2
#### Cost of phase [22]:eval_bits_replicate_horizontally_bb9_in(V_width,V_replicated_width,V_1,V_2,V_y_0,V_3,V_sx_0,B,C,D,E,F,G) -> [eval_bits_replicate_horizontally_bb9_in(V_width',V_replicated_width',V_1',V_2',V_y_0',V_3',V_sx_0',B',C',D',E',F',G')] 
2*it(22)+0
  Such that:it(22) =< V_sx_0
it(22) =< V_sx_0-V_sx_0'

#### Cost of loops [23] 

 * loop 23:eval_bits_replicate_horizontally_bb9_in(V_width,V_replicated_width,V_1,V_2,V_y_0,V_3,V_sx_0,B,C,D,E,F,G) -> [eval_bits_replicate_horizontally_bb9_in(V_width',V_replicated_width',V_1',V_2',V_y_0',V_3',V_sx_0',B',C',D',E',F',G')] 
1*s(6)+2
#### Cost of phase [23]:eval_bits_replicate_horizontally_bb9_in(V_width,V_replicated_width,V_1,V_2,V_y_0,V_3,V_sx_0,B,C,D,E,F,G) -> [eval_bits_replicate_horizontally_bb9_in(V_width',V_replicated_width',V_1',V_2',V_y_0',V_3',V_sx_0',B',C',D',E',F',G')] 
2*it(23)+1*s(7)+0
  Such that:it(23) =< -V_1+V_2+V_sx_0
it(23) =< -V_1+V_2+V_sx_0+V_1'-V_2'-V_sx_0'
it(23) =< V_sx_0
it(23) =< V_sx_0-V_sx_0'

#### Cost of phase [23]:eval_bits_replicate_horizontally_bb9_in(V_width,V_replicated_width,V_1,V_2,V_y_0,V_3,V_sx_0,B,C,D,E,F,G) -> [eval_bits_replicate_horizontally_bb9_in(V_width',V_replicated_width',V_1',V_2',V_y_0',V_3',V_sx_0',B',C',D',E',F',G')] 
2*it(23)+1*s(7)+0
  Such that:it(23) =< -V_1+V_2+V_sx_0
it(23) =< -V_1+V_2+V_sx_0+V_1'-V_2'-V_sx_0'
it(23) =< V_sx_0
it(23) =< V_sx_0-V_sx_0'

#### Cost of phase [23]:eval_bits_replicate_horizontally_bb9_in(V_width,V_replicated_width,V_1,V_2,V_y_0,V_3,V_sx_0,B,C,D,E,F,G) -> [eval_bits_replicate_horizontally_bb9_in(V_width',V_replicated_width',V_1',V_2',V_y_0',V_3',V_sx_0',B',C',D',E',F',G')] 
2*it(23)+1*s(7)+0
  Such that:it(23) =< -V_1+V_2+V_sx_0
it(23) =< -V_1+V_2+V_sx_0+V_1'-V_2'-V_sx_0'
it(23) =< V_sx_0
it(23) =< V_sx_0-V_sx_0'

#### Cost of chains of eval_bits_replicate_horizontally_bb9_in(V_width,V_replicated_width,V_1,V_2,V_y_0,V_3,V_sx_0,B,C,D,E,F,G):
* Chain [[23],[22],24]: 2*it(22)+2*it(23)+1*s(7)+0
  Such that:it(23) =< V_sx_0-E+F
it(22) =< E-F

  with precondition: [B=4,V_y_0=V_3+1,V_width=C,V_replicated_width=D,V_1=E,V_2=F,V_y_0=G+1,V_y_0>=1,V_1>=V_2+1,V_1>=V_sx_0,V_2+V_sx_0>=V_1+1] 

* Chain [[23],24]: 2*it(23)+1*s(7)+0
  Such that:it(23) =< V_sx_0

  with precondition: [B=4,V_y_0=V_3+1,V_width=C,V_replicated_width=D,V_1=E,V_2=F,V_y_0=G+1,V_y_0>=1,V_sx_0>=1,V_2>=V_1,V_1>=V_sx_0] 

* Chain [[23],21]...: 2*it(23)+2*s(7)+2
  Such that:it(23) =< V_sx_0

  with precondition: [B=4,V_y_0=V_3+1,V_y_0>=1,V_sx_0>=2,V_1>=V_sx_0,V_2+V_sx_0>=V_1+2] 

* Chain [[22],24]: 2*it(22)+0
  Such that:it(22) =< V_sx_0

  with precondition: [B=4,V_y_0=V_3+1,V_width=C,V_replicated_width=D,V_1=E,V_2=F,V_y_0=G+1,V_y_0>=1,V_sx_0>=1,V_1>=V_sx_0,V_1>=V_2+V_sx_0] 

* Chain [24]: 0
  with precondition: [B=4,C=V_width,D=V_replicated_width,F=V_2,V_3+1=V_y_0,V_1=E,V_3=G,0>=V_sx_0,V_3>=0,V_1>=V_sx_0] 

* Chain [21]...: 1*s(8)+2
  with precondition: [B=4,V_y_0=V_3+1,V_y_0>=1,V_sx_0>=1,V_1>=V_sx_0,V_2+V_sx_0>=V_1+1] 


#### Cost of loops [27,28,29,30,31,32,33,34] 

 * loop 27:eval_bits_replicate_horizontally_bb1_in(V_width,V_replicated_width,V_1,V_2,V_y_0,B) -> [eval_bits_replicate_horizontally_bb1_in(V_width',V_replicated_width',V_1',V_2',V_y_0',B')] 
2*s(13)+2*s(12)+1*s(14)+2
  Such that:s(12) =< V_1'-V_2'
s(13) =< V_2'

 * loop 28:eval_bits_replicate_horizontally_bb1_in(V_width,V_replicated_width,V_1,V_2,V_y_0,B) -> [eval_bits_replicate_horizontally_bb1_in(V_width',V_replicated_width',V_1',V_2',V_y_0',B')] 
2*s(17)+1*s(18)+2
  Such that:s(17) =< V_1'

 * loop 29:eval_bits_replicate_horizontally_bb1_in(V_width,V_replicated_width,V_1,V_2,V_y_0,B) -> [eval_bits_replicate_horizontally_bb1_in(V_width',V_replicated_width',V_1',V_2',V_y_0',B')] 
2*s(23)+2*s(22)+1*s(24)+2
  Such that:s(22) =< V_width-V_replicated_width'
s(23) =< V_replicated_width'

 * loop 30:eval_bits_replicate_horizontally_bb1_in(V_width,V_replicated_width,V_1,V_2,V_y_0,B) -> [eval_bits_replicate_horizontally_bb1_in(V_width',V_replicated_width',V_1',V_2',V_y_0',B')] 
2*s(27)+1*s(28)+2
  Such that:s(27) =< V_width

 * loop 31:eval_bits_replicate_horizontally_bb1_in(V_width,V_replicated_width,V_1,V_2,V_y_0,B) -> [eval_bits_replicate_horizontally_bb1_in(V_width',V_replicated_width',V_1',V_2',V_y_0',B')] 
2*s(30)+2
  Such that:s(30) =< V_1'

 * loop 32:eval_bits_replicate_horizontally_bb1_in(V_width,V_replicated_width,V_1,V_2,V_y_0,B) -> [eval_bits_replicate_horizontally_bb1_in(V_width',V_replicated_width',V_1',V_2',V_y_0',B')] 
2
 * loop 33:eval_bits_replicate_horizontally_bb1_in(V_width,V_replicated_width,V_1,V_2,V_y_0,B) -> [eval_bits_replicate_horizontally_bb1_in(V_width',V_replicated_width',V_1',V_2',V_y_0',B')] 
2*s(32)+2
  Such that:s(32) =< V_width

 * loop 34:eval_bits_replicate_horizontally_bb1_in(V_width,V_replicated_width,V_1,V_2,V_y_0,B) -> [eval_bits_replicate_horizontally_bb1_in(V_width',V_replicated_width',V_1',V_2',V_y_0',B')] 
2
#### Cost of phase [27,28,29,30,31,32,33,34]:eval_bits_replicate_horizontally_bb1_in(V_width,V_replicated_width,V_1,V_2,V_y_0,B) -> [eval_bits_replicate_horizontally_bb1_in(V_width',V_replicated_width',V_1',V_2',V_y_0',B')] 
16*it(27)+2*s(33)+2*s(34)+4*s(35)+2*s(36)+2*s(38)+2*s(39)+2*s(41)+2*s(43)+2*s(44)+0
  Such that:aux(6) =< V_width
aux(4) =< V_width-V_replicated_width
aux(5) =< V_replicated_width
aux(3) =< V_1
aux(1) =< V_1-V_2
aux(2) =< V_2
aux(9) =< V_y_0
aux(10) =< V_y_0-V_y_0'
it(27) =< aux(9)
it(27) =< aux(10)
aux(8) =< aux(6)
aux(7) =< aux(3)
s(41) =< it(27)*aux(6)
s(38) =< it(27)*aux(5)
s(39) =< it(27)*aux(4)
s(36) =< it(27)*aux(3)
s(33) =< it(27)*aux(2)
s(34) =< it(27)*aux(1)
s(44) =< it(27)*aux(8)
s(43) =< it(27)*aux(7)

#### Cost of phase [27,28,29,30,31,32,33,34]:eval_bits_replicate_horizontally_bb1_in(V_width,V_replicated_width,V_1,V_2,V_y_0,B) -> [eval_bits_replicate_horizontally_bb1_in(V_width',V_replicated_width',V_1',V_2',V_y_0',B')] 
16*it(27)+2*s(33)+2*s(34)+4*s(35)+2*s(36)+2*s(38)+2*s(39)+2*s(41)+2*s(43)+2*s(44)+0
  Such that:aux(6) =< V_width
aux(4) =< V_width-V_replicated_width
aux(5) =< V_replicated_width
aux(3) =< V_1
aux(1) =< V_1-V_2
aux(2) =< V_2
aux(9) =< V_y_0
aux(10) =< V_y_0-V_y_0'
it(27) =< aux(9)
it(27) =< aux(10)
aux(8) =< aux(6)
aux(7) =< aux(3)
s(41) =< it(27)*aux(6)
s(38) =< it(27)*aux(5)
s(39) =< it(27)*aux(4)
s(36) =< it(27)*aux(3)
s(33) =< it(27)*aux(2)
s(34) =< it(27)*aux(1)
s(44) =< it(27)*aux(8)
s(43) =< it(27)*aux(7)

#### Cost of phase [27,28,29,30,31,32,33,34]:eval_bits_replicate_horizontally_bb1_in(V_width,V_replicated_width,V_1,V_2,V_y_0,B) -> [eval_bits_replicate_horizontally_bb1_in(V_width',V_replicated_width',V_1',V_2',V_y_0',B')] 
16*it(27)+2*s(33)+2*s(34)+4*s(35)+2*s(36)+2*s(38)+2*s(39)+2*s(41)+2*s(43)+2*s(44)+0
  Such that:aux(6) =< V_width
aux(4) =< V_width-V_replicated_width
aux(5) =< V_replicated_width
aux(3) =< V_1
aux(1) =< V_1-V_2
aux(2) =< V_2
aux(9) =< V_y_0
aux(10) =< V_y_0-V_y_0'
it(27) =< aux(9)
it(27) =< aux(10)
aux(8) =< aux(6)
aux(7) =< aux(3)
s(41) =< it(27)*aux(6)
s(38) =< it(27)*aux(5)
s(39) =< it(27)*aux(4)
s(36) =< it(27)*aux(3)
s(33) =< it(27)*aux(2)
s(34) =< it(27)*aux(1)
s(44) =< it(27)*aux(8)
s(43) =< it(27)*aux(7)

#### Cost of chains of eval_bits_replicate_horizontally_bb1_in(V_width,V_replicated_width,V_1,V_2,V_y_0,B):
* Chain [[27,28,29,30,31,32,33,34],35]: 16*it(27)+2*s(33)+2*s(34)+4*s(35)+2*s(36)+2*s(38)+2*s(39)+2*s(41)+2*s(43)+2*s(44)+0
  Such that:aux(6) =< V_width
aux(4) =< V_width-V_replicated_width
aux(5) =< V_replicated_width
aux(3) =< V_1
aux(1) =< V_1-V_2
aux(2) =< V_2
aux(11) =< V_y_0
it(27) =< aux(11)
aux(8) =< aux(6)
aux(7) =< aux(3)
s(41) =< it(27)*aux(6)
s(38) =< it(27)*aux(5)
s(39) =< it(27)*aux(4)
s(36) =< it(27)*aux(3)
s(33) =< it(27)*aux(2)
s(34) =< it(27)*aux(1)
s(44) =< it(27)*aux(8)
s(43) =< it(27)*aux(7)

  with precondition: [B=5,V_y_0>=1] 

* Chain [[27,28,29,30,31,32,33,34],26]...: 16*it(27)+2*s(33)+2*s(34)+7*s(35)+2*s(36)+2*s(38)+2*s(39)+2*s(41)+2*s(43)+2*s(44)+2*s(46)+4
  Such that:aux(4) =< V_width-V_replicated_width
aux(5) =< V_replicated_width
aux(3) =< V_1
aux(1) =< V_1-V_2
aux(2) =< V_2
aux(12) =< V_width
aux(13) =< V_y_0
s(46) =< aux(12)
it(27) =< aux(13)
aux(8) =< aux(12)
aux(7) =< aux(3)
s(41) =< it(27)*aux(12)
s(38) =< it(27)*aux(5)
s(39) =< it(27)*aux(4)
s(36) =< it(27)*aux(3)
s(33) =< it(27)*aux(2)
s(34) =< it(27)*aux(1)
s(44) =< it(27)*aux(8)
s(43) =< it(27)*aux(7)

  with precondition: [B=5,V_width>=1,V_replicated_width>=1,V_y_0>=2] 

* Chain [[27,28,29,30,31,32,33,34],25]...: 16*it(27)+2*s(33)+2*s(34)+7*s(35)+2*s(36)+2*s(38)+2*s(39)+2*s(41)+2*s(43)+2*s(44)+2*s(49)+4
  Such that:aux(6) =< V_width
aux(4) =< V_width-V_replicated_width
aux(5) =< V_replicated_width
aux(1) =< V_1-V_2
aux(2) =< V_2
aux(14) =< V_1
aux(15) =< V_y_0
s(49) =< aux(14)
it(27) =< aux(15)
aux(8) =< aux(6)
aux(7) =< aux(14)
s(41) =< it(27)*aux(6)
s(38) =< it(27)*aux(5)
s(39) =< it(27)*aux(4)
s(36) =< it(27)*aux(14)
s(33) =< it(27)*aux(2)
s(34) =< it(27)*aux(1)
s(44) =< it(27)*aux(8)
s(43) =< it(27)*aux(7)

  with precondition: [B=5,V_1>=1,V_2>=1,V_y_0>=2] 

* Chain [35]: 0
  with precondition: [B=5,0>=V_y_0] 

* Chain [26]...: 3*s(45)+2*s(46)+4
  Such that:s(46) =< V_width

  with precondition: [B=5,V_width>=1,V_replicated_width>=1,V_y_0>=1] 

* Chain [25]...: 3*s(48)+2*s(49)+4
  Such that:s(49) =< V_1

  with precondition: [B=5,V_1>=1,V_2>=1,V_y_0>=1] 


#### Cost of chains of eval_bits_replicate_horizontally_bb0_in(V_width,V_height,V_replicated_width,B):
* Chain [38]: 1
  with precondition: [0>=V_height] 

* Chain [37]: 16*s(58)+2*s(61)+2*s(62)+2*s(63)+2*s(64)+2*s(65)+2*s(66)+2*s(67)+2*s(68)+4*s(69)+1
  Such that:s(51) =< V_width
s(52) =< V_width-V_replicated_width
s(57) =< V_height
s(53) =< V_replicated_width
s(58) =< s(57)
s(59) =< s(51)
s(61) =< s(58)*s(51)
s(62) =< s(58)*s(53)
s(63) =< s(58)*s(52)
s(67) =< s(58)*s(59)

  with precondition: [V_height>=1] 

* Chain [36]...: 4*s(70)+40*s(71)+32*s(80)+4*s(83)+4*s(84)+4*s(85)+4*s(89)+5
  Such that:aux(16) =< V_width
aux(17) =< V_width-V_replicated_width
aux(18) =< V_height
aux(19) =< V_replicated_width
s(70) =< aux(16)
s(80) =< aux(18)
s(81) =< aux(16)
s(83) =< s(80)*aux(16)
s(84) =< s(80)*aux(19)
s(85) =< s(80)*aux(17)
s(89) =< s(80)*s(81)

  with precondition: [V_height>=1] 


#### Cost of chains of eval_bits_replicate_horizontally_start(V_width,V_height,V_raster,V_replicated_width,V_replicated_raster,B):
* Chain [41]: 1
  with precondition: [0>=V_height] 

* Chain [40]: 16*s(118)+2*s(120)+2*s(121)+2*s(122)+2*s(123)+12*s(124)+1
  Such that:s(114) =< V_width
s(115) =< V_width-V_replicated_width
s(116) =< V_height
s(117) =< V_replicated_width
s(118) =< s(116)
s(119) =< s(114)
s(120) =< s(118)*s(114)
s(121) =< s(118)*s(117)
s(122) =< s(118)*s(115)
s(123) =< s(118)*s(119)

  with precondition: [V_height>=1] 

* Chain [39]...: 4*s(133)+32*s(134)+4*s(136)+4*s(137)+4*s(138)+4*s(139)+40*s(140)+5
  Such that:s(129) =< V_width
s(130) =< V_width-V_replicated_width
s(131) =< V_height
s(132) =< V_replicated_width
s(133) =< s(129)
s(134) =< s(131)
s(135) =< s(129)
s(136) =< s(134)*s(129)
s(137) =< s(134)*s(132)
s(138) =< s(134)*s(130)
s(139) =< s(134)*s(135)

  with precondition: [V_height>=1] 


Closed-form bounds of eval_bits_replicate_horizontally_start(V_width,V_height,V_raster,V_replicated_width,V_replicated_raster,B): 
-------------------------------------
* Chain [41] with precondition: [0>=V_height] 
    - Upper bound: 1 
    - Complexity: constant 
* Chain [40] with precondition: [V_height>=1] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [39]... with precondition: [V_height>=1] 
    - Upper bound: inf 
    - Complexity: infinity 

### Maximum cost of eval_bits_replicate_horizontally_start(V_width,V_height,V_raster,V_replicated_width,V_replicated_raster,B): inf 
Asymptotic class: infinity 

Time statistics: 
-------------------------------------
* Partial evaluation computed in 39 ms.
* Invariants computed in 175 ms.
   - Backward Invariants 90 ms.
   - Transitive Invariants 34 ms.
* Refinement performed in 223 ms.
* Termination proved in 39 ms.
* Upper bounds computed in 299 ms.
   - Equation cost structures 83 ms.
   - Phase cost structures 149 ms.
   - Chain cost structures 102 ms.
   - Solving cost expressions 2 ms.
* Total analysis performed in 837 ms.


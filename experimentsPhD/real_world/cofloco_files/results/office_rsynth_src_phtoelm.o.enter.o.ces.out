Warning: Ignored call to eval_enter_stop/1 in equation eval_enter_38/1 

Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. recursive  : [eval_enter_10/1,eval_enter_18/1,eval_enter_19/1,eval_enter_9/1,eval_enter_bb1_in/1,eval_enter_bb4_in/1]
1. non_recursive  : [eval_enter_38/1]
2. non_recursive  : [eval_enter_37/1]
3. non_recursive  : [eval_enter_36/2]
4. non_recursive  : [eval_enter_32/1]
5. non_recursive  : [eval_enter_31/2]
6. non_recursive  : [eval_enter_21/1]
7. non_recursive  : [eval_enter_20/1]
8. non_recursive  : [loop_cont_eval_enter_bb1_in/2]
9. non_recursive  : [eval_enter_1/1]
10. non_recursive  : [eval_enter_0/1]
11. non_recursive  : [eval_enter_bb0_in/1]
12. non_recursive  : [eval_enter_start/1]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into eval_enter_bb1_in/1
1. SCC is completely evaluated into other SCCs
2. SCC is completely evaluated into other SCCs
3. SCC is completely evaluated into other SCCs
4. SCC is completely evaluated into other SCCs
5. SCC is completely evaluated into other SCCs
6. SCC is completely evaluated into other SCCs
7. SCC is completely evaluated into other SCCs
8. SCC is completely evaluated into other SCCs
9. SCC is partially evaluated into eval_enter_1/1
10. SCC is completely evaluated into other SCCs
11. SCC is completely evaluated into other SCCs
12. SCC is partially evaluated into eval_enter_start/1

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations eval_enter_bb1_in/1 
* CE 5 is refined into CE [6] 
* CE 4 is refined into CE [7] 


#### Refined cost equations eval_enter_bb1_in/1 
* CE 6: eval_enter_bb1_in(B) = 0
     [B=2] 
* CE 7: eval_enter_bb1_in(B) = 1+ eval_enter_bb1_in(C)
     [C=2,B=2] 

### Cost equations --> "Loop" of eval_enter_bb1_in/1 
* CEs [7] --> Loop 5 
* CEs [6] --> Loop 6 

#### Loops of eval_enter_bb1_in/1 
* Loop 5: eval_enter_bb1_in(B)->  eval_enter_bb1_in(B')
                  [B'=2,B=2] 
* Loop 6: eval_enter_bb1_in(B) [B=2] 

### Ranking functions of CR eval_enter_bb1_in(B) 

#### Partial ranking functions of CR eval_enter_bb1_in(B) 


### Resulting Chains:eval_enter_bb1_in(B) 
* [[5]]...
* [[5],6]
* [6]


### Merging Chains  eval_enter_bb1_in/1 into  External patterns of execution 
* [[6],[6,[5]]] --> 1 
* [[[5]]] --> 2 


### Specialization of cost equations eval_enter_1/1 
* CE 3 is refined into CE [8,9] 


#### Refined cost equations eval_enter_1/1 
* CE 8: eval_enter_1(B) = 1+ eval_enter_bb1_in(C):1
     [C=2] 
* CE 9: eval_enter_1(B) = 1+ eval_enter_bb1_in(C):2
     [C=2] 

### Cost equations --> "Loop" of eval_enter_1/1 
* CEs [9] --> Loop 7 
* CEs [8] --> Loop 8 

#### Loops of eval_enter_1/1 
* Loop 7: eval_enter_1(B) [] 
* Loop 8: eval_enter_1(B) [] 

### Ranking functions of CR eval_enter_1(B) 

#### Partial ranking functions of CR eval_enter_1(B) 


### Resulting Chains:eval_enter_1(B) 
* [8]
* [7]...


### Merging Chains  eval_enter_1/1 into  External patterns of execution 
* [[8]] --> 1 
* [[7]] --> 2 


### Specialization of cost equations eval_enter_start/1 
* CE 2 is refined into CE [10,11] 


#### Refined cost equations eval_enter_start/1 
* CE 10: eval_enter_start(B) = 0+ eval_enter_1(B):1
     [] 
* CE 11: eval_enter_start(B) = 0+ eval_enter_1(B):2
     [] 

### Cost equations --> "Loop" of eval_enter_start/1 
* CEs [11] --> Loop 9 
* CEs [10] --> Loop 10 

#### Loops of eval_enter_start/1 
* Loop 9: eval_enter_start(B) [] 
* Loop 10: eval_enter_start(B) [] 

### Ranking functions of CR eval_enter_start(B) 

#### Partial ranking functions of CR eval_enter_start(B) 


### Resulting Chains:eval_enter_start(B) 
* [10]
* [9]...


### Merging Chains  eval_enter_start/1 into  External patterns of execution 
* [[10]] --> 1 
* [[9]] --> 2 


Computing Bounds
=====================================

#### Cost of loops [5] 

 * loop 5:eval_enter_bb1_in(B) -> [eval_enter_bb1_in(B')] 
1
#### Cost of phase [5]:eval_enter_bb1_in(B) -> [eval_enter_bb1_in(B')] 
1*it(5)+0
#### Cost of phase [5]:eval_enter_bb1_in(B) -> [eval_enter_bb1_in(B')] 
1*it(5)+0
#### Cost of chains of eval_enter_bb1_in(B):
* Chain [[5]]...: 1*it(5)+0
  with precondition: [B=2] 

* Chain [[5],6]: 1*it(5)+0
  with precondition: [B=2] 

* Chain [6]: 0
  with precondition: [B=2] 


#### Cost of chains of eval_enter_1(B):
* Chain [8]: 1*s(2)+1
  with precondition: [] 

* Chain [7]...: 1*s(3)+1
  with precondition: [] 


#### Cost of chains of eval_enter_start(B):
* Chain [10]: 1*s(4)+1
  with precondition: [] 

* Chain [9]...: 1*s(5)+1
  with precondition: [] 


Closed-form bounds of eval_enter_start(B): 
-------------------------------------
* Chain [10] with precondition: [] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [9]... with precondition: [] 
    - Upper bound: inf 
    - Complexity: infinity 

### Maximum cost of eval_enter_start(B): inf 
Asymptotic class: infinity 

Time statistics: 
-------------------------------------
* Partial evaluation computed in 5 ms.
* Invariants computed in 2 ms.
   - Backward Invariants 1 ms.
   - Transitive Invariants 0 ms.
* Refinement performed in 4 ms.
* Termination proved in 1 ms.
* Upper bounds computed in 4 ms.
   - Equation cost structures 1 ms.
   - Phase cost structures 1 ms.
   - Chain cost structures 1 ms.
   - Solving cost expressions 0 ms.
* Total analysis performed in 25 ms.


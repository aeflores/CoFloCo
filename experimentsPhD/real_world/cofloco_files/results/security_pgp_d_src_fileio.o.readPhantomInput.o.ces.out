Warning: Ignored call to eval_readPhantomInput_stop/1 in equation eval_readPhantomInput_bb7_in/1 

Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. recursive  : [eval_readPhantomInput_10/6,eval_readPhantomInput_11/7,eval_readPhantomInput_6/3,eval_readPhantomInput_7/4,eval_readPhantomInput_bb4_in/3]
1. non_recursive  : [eval_readPhantomInput_bb7_in/1]
2. non_recursive  : [eval_readPhantomInput_16/1]
3. non_recursive  : [eval_readPhantomInput_15/2]
4. non_recursive  : [eval_readPhantomInput_14/2]
5. non_recursive  : [eval_readPhantomInput_13/2]
6. non_recursive  : [eval_readPhantomInput_bb6_in/2]
7. non_recursive  : [loop_cont_eval_readPhantomInput_bb4_in/3]
8. non_recursive  : [eval_readPhantomInput_5/2]
9. non_recursive  : [eval_readPhantomInput_4/2]
10. non_recursive  : [eval_readPhantomInput_bb2_in/2]
11. non_recursive  : [eval_readPhantomInput_3/2]
12. non_recursive  : [eval_readPhantomInput_2/2]
13. non_recursive  : [eval_readPhantomInput_bb0_in/2]
14. non_recursive  : [eval_readPhantomInput_start/2]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into eval_readPhantomInput_bb4_in/3
1. SCC is completely evaluated into other SCCs
2. SCC is completely evaluated into other SCCs
3. SCC is completely evaluated into other SCCs
4. SCC is completely evaluated into other SCCs
5. SCC is completely evaluated into other SCCs
6. SCC is completely evaluated into other SCCs
7. SCC is completely evaluated into other SCCs
8. SCC is partially evaluated into eval_readPhantomInput_5/2
9. SCC is completely evaluated into other SCCs
10. SCC is completely evaluated into other SCCs
11. SCC is completely evaluated into other SCCs
12. SCC is completely evaluated into other SCCs
13. SCC is partially evaluated into eval_readPhantomInput_bb0_in/2
14. SCC is partially evaluated into eval_readPhantomInput_start/2

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations eval_readPhantomInput_bb4_in/3 
* CE 7 is refined into CE [8] 
* CE 6 is refined into CE [9] 


#### Refined cost equations eval_readPhantomInput_bb4_in/3 
* CE 8: eval_readPhantomInput_bb4_in(A,B,A) = 0
     [B=2] 
* CE 9: eval_readPhantomInput_bb4_in(V__verbose,B,C) = 1+ eval_readPhantomInput_bb4_in(V__verbose,D,C)
     [D=2,B=2] 

### Cost equations --> "Loop" of eval_readPhantomInput_bb4_in/3 
* CEs [9] --> Loop 6 
* CEs [8] --> Loop 7 

#### Loops of eval_readPhantomInput_bb4_in/3 
* Loop 6: eval_readPhantomInput_bb4_in(V__verbose,B,C)->  eval_readPhantomInput_bb4_in(V__verbose,B',C)
                  [B'=2,B=2] 
* Loop 7: eval_readPhantomInput_bb4_in(A,B,A) [B=2] 

### Ranking functions of CR eval_readPhantomInput_bb4_in(V__verbose,B,C) 

#### Partial ranking functions of CR eval_readPhantomInput_bb4_in(V__verbose,B,C) 


### Resulting Chains:eval_readPhantomInput_bb4_in(V__verbose,B,C) 
* [[6]]...
* [[6],7]
* [7]


### Merging Chains  eval_readPhantomInput_bb4_in/3 into  External patterns of execution 
* [[7],[7,[6]]] --> 1 
* [[[6]]] --> 2 


### Specialization of cost equations eval_readPhantomInput_5/2 
* CE 4 is refined into CE [10] 
* CE 5 is refined into CE [11,12] 


#### Refined cost equations eval_readPhantomInput_5/2 
* CE 10: eval_readPhantomInput_5(V__verbose,B) = 0
     [] 
* CE 11: eval_readPhantomInput_5(V__verbose,B) = 1+ eval_readPhantomInput_bb4_in(V__verbose,C,V__verbose):1
     [C=2] 
* CE 12: eval_readPhantomInput_5(V__verbose,B) = 1+ eval_readPhantomInput_bb4_in(V__verbose,C,D):2
     [C=2] 

### Cost equations --> "Loop" of eval_readPhantomInput_5/2 
* CEs [12] --> Loop 8 
* CEs [10,11] --> Loop 9 

#### Loops of eval_readPhantomInput_5/2 
* Loop 8: eval_readPhantomInput_5(V__verbose,B) [] 
* Loop 9: eval_readPhantomInput_5(V__verbose,B) [] 

### Ranking functions of CR eval_readPhantomInput_5(V__verbose,B) 

#### Partial ranking functions of CR eval_readPhantomInput_5(V__verbose,B) 


### Resulting Chains:eval_readPhantomInput_5(V__verbose,B) 
* [9]
* [8]...


### Merging Chains  eval_readPhantomInput_5/2 into  External patterns of execution 
* [[9]] --> 1 
* [[8]] --> 2 


### Specialization of cost equations eval_readPhantomInput_bb0_in/2 
* CE 3 is refined into CE [13,14] 


#### Refined cost equations eval_readPhantomInput_bb0_in/2 
* CE 13: eval_readPhantomInput_bb0_in(V__verbose,B) = 0+ eval_readPhantomInput_5(V__verbose,B):1
     [] 
* CE 14: eval_readPhantomInput_bb0_in(V__verbose,B) = 0+ eval_readPhantomInput_5(V__verbose,B):2
     [] 

### Cost equations --> "Loop" of eval_readPhantomInput_bb0_in/2 
* CEs [14] --> Loop 10 
* CEs [13] --> Loop 11 

#### Loops of eval_readPhantomInput_bb0_in/2 
* Loop 10: eval_readPhantomInput_bb0_in(V__verbose,B) [] 
* Loop 11: eval_readPhantomInput_bb0_in(V__verbose,B) [] 

### Ranking functions of CR eval_readPhantomInput_bb0_in(V__verbose,B) 

#### Partial ranking functions of CR eval_readPhantomInput_bb0_in(V__verbose,B) 


### Resulting Chains:eval_readPhantomInput_bb0_in(V__verbose,B) 
* [11]
* [10]...


### Merging Chains  eval_readPhantomInput_bb0_in/2 into  External patterns of execution 
* [[11]] --> 1 
* [[10]] --> 2 


### Specialization of cost equations eval_readPhantomInput_start/2 
* CE 2 is refined into CE [15,16] 


#### Refined cost equations eval_readPhantomInput_start/2 
* CE 15: eval_readPhantomInput_start(V__verbose,B) = 0+ eval_readPhantomInput_bb0_in(V__verbose,B):1
     [] 
* CE 16: eval_readPhantomInput_start(V__verbose,B) = 0+ eval_readPhantomInput_bb0_in(V__verbose,B):2
     [] 

### Cost equations --> "Loop" of eval_readPhantomInput_start/2 
* CEs [16] --> Loop 12 
* CEs [15] --> Loop 13 

#### Loops of eval_readPhantomInput_start/2 
* Loop 12: eval_readPhantomInput_start(V__verbose,B) [] 
* Loop 13: eval_readPhantomInput_start(V__verbose,B) [] 

### Ranking functions of CR eval_readPhantomInput_start(V__verbose,B) 

#### Partial ranking functions of CR eval_readPhantomInput_start(V__verbose,B) 


### Resulting Chains:eval_readPhantomInput_start(V__verbose,B) 
* [13]
* [12]...


### Merging Chains  eval_readPhantomInput_start/2 into  External patterns of execution 
* [[13]] --> 1 
* [[12]] --> 2 


Computing Bounds
=====================================

#### Cost of loops [6] 

 * loop 6:eval_readPhantomInput_bb4_in(V__verbose,B,C) -> [eval_readPhantomInput_bb4_in(V__verbose',B',C')] 
1
#### Cost of phase [6]:eval_readPhantomInput_bb4_in(V__verbose,B,C) -> [eval_readPhantomInput_bb4_in(V__verbose',B',C')] 
1*it(6)+0
#### Cost of phase [6]:eval_readPhantomInput_bb4_in(V__verbose,B,C) -> [eval_readPhantomInput_bb4_in(V__verbose',B',C')] 
1*it(6)+0
#### Cost of chains of eval_readPhantomInput_bb4_in(V__verbose,B,C):
* Chain [[6]]...: 1*it(6)+0
  with precondition: [B=2] 

* Chain [[6],7]: 1*it(6)+0
  with precondition: [B=2,V__verbose=C] 

* Chain [7]: 0
  with precondition: [B=2,C=V__verbose] 


#### Cost of chains of eval_readPhantomInput_5(V__verbose,B):
* Chain [9]: 1*aux(2)+0
  with precondition: [] 

* Chain [8]...: 1*s(3)+1
  with precondition: [] 


#### Cost of chains of eval_readPhantomInput_bb0_in(V__verbose,B):
* Chain [11]: 1*s(4)+0
  with precondition: [] 

* Chain [10]...: 1*s(5)+1
  with precondition: [] 


#### Cost of chains of eval_readPhantomInput_start(V__verbose,B):
* Chain [13]: 1*s(6)+0
  with precondition: [] 

* Chain [12]...: 1*s(7)+1
  with precondition: [] 


Closed-form bounds of eval_readPhantomInput_start(V__verbose,B): 
-------------------------------------
* Chain [13] with precondition: [] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [12]... with precondition: [] 
    - Upper bound: inf 
    - Complexity: infinity 

### Maximum cost of eval_readPhantomInput_start(V__verbose,B): inf 
Asymptotic class: infinity 

Time statistics: 
-------------------------------------
* Partial evaluation computed in 33 ms.
* Invariants computed in 3 ms.
   - Backward Invariants 1 ms.
   - Transitive Invariants 1 ms.
* Refinement performed in 11 ms.
* Termination proved in 1 ms.
* Upper bounds computed in 6 ms.
   - Equation cost structures 3 ms.
   - Phase cost structures 1 ms.
   - Chain cost structures 2 ms.
   - Solving cost expressions 0 ms.
* Total analysis performed in 99 ms.


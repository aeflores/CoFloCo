Warning: Ignored call to eval_receive_io_stop/1 in equation eval_receive_io_bb6_in/1 

Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. recursive  : [eval_receive_io_2/6,eval_receive_io_3/7,eval_receive_io_bb2_in/6]
1. recursive  : [eval_receive_io_NewDefault4_in/4,eval_receive_io_NewDefault_in/4,eval_receive_io_bb1_in/3,eval_receive_io_bb5_in/4,loop_cont_eval_receive_io_bb2_in/5]
2. non_recursive  : [eval_receive_io_bb6_in/1]
3. non_recursive  : [eval_receive_io_7/1]
4. non_recursive  : [eval_receive_io_6/1]
5. non_recursive  : [loop_cont_eval_receive_io_bb1_in/2]
6. non_recursive  : [eval_receive_io_1/3]
7. non_recursive  : [eval_receive_io_0/3]
8. non_recursive  : [eval_receive_io_bb0_in/3]
9. non_recursive  : [eval_receive_io_start/3]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into eval_receive_io_bb2_in/6
1. SCC is partially evaluated into eval_receive_io_bb1_in/3
2. SCC is completely evaluated into other SCCs
3. SCC is completely evaluated into other SCCs
4. SCC is completely evaluated into other SCCs
5. SCC is partially evaluated into loop_cont_eval_receive_io_bb1_in/2
6. SCC is partially evaluated into eval_receive_io_1/3
7. SCC is completely evaluated into other SCCs
8. SCC is completely evaluated into other SCCs
9. SCC is partially evaluated into eval_receive_io_start/3

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations eval_receive_io_bb2_in/6 
* CE 19 is refined into CE [20] 
* CE 15 is refined into CE [21] 
* CE 16 is refined into CE [22] 
* CE 17 is refined into CE [23] 
* CE 18 is refined into CE [24] 


#### Refined cost equations eval_receive_io_bb2_in/6 
* CE 20: eval_receive_io_bb2_in(V_fd,V__01,B,C,D,E) = 1+ eval_receive_io_bb2_in(V_fd,V__01,B,C,D,E)
     [B>=2,5>=B] 
* CE 21: eval_receive_io_bb2_in(A,B,C,A,B,D) = 0
     [C=5] 
* CE 22: eval_receive_io_bb2_in(V_fd,V__01,B,C,D,E) = 0
     [B=4] 
* CE 23: eval_receive_io_bb2_in(A,B,C,A,B,D) = 0
     [C=3] 
* CE 24: eval_receive_io_bb2_in(V_fd,V__01,B,C,D,E) = 0
     [B=2] 

### Cost equations --> "Loop" of eval_receive_io_bb2_in/6 
* CEs [21] --> Loop 17 
* CEs [22] --> Loop 18 
* CEs [23] --> Loop 19 
* CEs [24] --> Loop 20 
* CEs [20] --> Loop 21 

#### Loops of eval_receive_io_bb2_in/6 
* Loop 17: eval_receive_io_bb2_in(A,B,C,A,B,D) [C=5] 
* Loop 18: eval_receive_io_bb2_in(V_fd,V__01,B,C,D,E) [B=4] 
* Loop 19: eval_receive_io_bb2_in(A,B,C,A,B,D) [C=3] 
* Loop 20: eval_receive_io_bb2_in(V_fd,V__01,B,C,D,E) [B=2] 
* Loop 21: eval_receive_io_bb2_in(V_fd,V__01,B,C,D,E)->  eval_receive_io_bb2_in(V_fd,V__01,B,C,D,E)
                  [B>=2,5>=B] 

### Ranking functions of CR eval_receive_io_bb2_in(V_fd,V__01,B,C,D,E) 

#### Partial ranking functions of CR eval_receive_io_bb2_in(V_fd,V__01,B,C,D,E) 


### Resulting Chains:eval_receive_io_bb2_in(V_fd,V__01,B,C,D,E) 
* [[21]]...
* [[21],20]
* [[21],19]
* [[21],18]
* [[21],17]
* [20]
* [19]
* [18]
* [17]


### Merging Chains  eval_receive_io_bb2_in/6 into  External patterns of execution 
* [[20],[20,[21]]] --> 1 
* [[19],[19,[21]]] --> 2 
* [[18],[18,[21]]] --> 3 
* [[17],[17,[21]]] --> 4 
* [[[21]]] --> 5 


### Specialization of cost equations eval_receive_io_bb1_in/3 
* CE 4 is refined into CE [25,26] 
* CE 5 is refined into CE [27,28] 
* CE 6 is refined into CE [29,30] 
* CE 7 is refined into CE [31,32] 
* CE 12 is refined into CE [33] 
* CE 8 is refined into CE [34,35] 
* CE 10 is refined into CE [36,37] 
* CE 9 is refined into CE [38,39] 
* CE 11 is refined into CE [40,41] 


#### Refined cost equations eval_receive_io_bb1_in/3 
* CE 25: eval_receive_io_bb1_in(V_fd,V__01,B) = 1+ eval_receive_io_bb2_in(V_fd,V__01,C,D,E,F):3
     [V__01>=1,C=4,B=4] 
* CE 26: eval_receive_io_bb1_in(V_fd,V__01,B) = 1+ eval_receive_io_bb2_in(V_fd,V__01,C,D,E,F):5
     [V__01>=1,C=4,B=4] 
* CE 27: eval_receive_io_bb1_in(V_fd,V__01,B) = 1+ eval_receive_io_bb2_in(V_fd,V__01,C,D,E,F):3
     [0>=V__01+1,C=4,B=4] 
* CE 28: eval_receive_io_bb1_in(V_fd,V__01,B) = 1+ eval_receive_io_bb2_in(V_fd,V__01,C,D,E,F):5
     [0>=V__01+1,C=4,B=4] 
* CE 29: eval_receive_io_bb1_in(V_fd,V__01,B) = 1+ eval_receive_io_bb2_in(V_fd,V__01,C,D,E,F):1
     [V__01>=1,C=2,B=2] 
* CE 30: eval_receive_io_bb1_in(V_fd,V__01,B) = 1+ eval_receive_io_bb2_in(V_fd,V__01,C,D,E,F):5
     [V__01>=1,C=2,B=2] 
* CE 31: eval_receive_io_bb1_in(V_fd,V__01,B) = 1+ eval_receive_io_bb2_in(V_fd,V__01,C,D,E,F):1
     [0>=V__01+1,C=2,B=2] 
* CE 32: eval_receive_io_bb1_in(V_fd,V__01,B) = 1+ eval_receive_io_bb2_in(V_fd,V__01,C,D,E,F):5
     [0>=V__01+1,C=2,B=2] 
* CE 33: eval_receive_io_bb1_in(V_fd,V__01,B) = 0
     [B=4,V__01=0] 
* CE 34: eval_receive_io_bb1_in(V_fd,V__01,B) = 2+ eval_receive_io_bb2_in(V_fd,V__01,C,V_fd,V__01,D):2+ eval_receive_io_bb1_in(V_fd,E,B)
     [V__01>=1,V__01=D+E,C=3] 
* CE 35: eval_receive_io_bb1_in(V_fd,V__01,B) = 2+ eval_receive_io_bb2_in(V_fd,V__01,C,D,E,F):5
     [V__01>=1,F+G=E,C=3] 
* CE 36: eval_receive_io_bb1_in(V_fd,V__01,B) = 2+ eval_receive_io_bb2_in(V_fd,V__01,C,V_fd,V__01,D):4+ eval_receive_io_bb1_in(V_fd,E,B)
     [V__01>=1,V__01=D+E,C=5] 
* CE 37: eval_receive_io_bb1_in(V_fd,V__01,B) = 2+ eval_receive_io_bb2_in(V_fd,V__01,C,D,E,F):5
     [V__01>=1,F+G=E,C=5] 
* CE 38: eval_receive_io_bb1_in(V_fd,V__01,B) = 2+ eval_receive_io_bb2_in(V_fd,V__01,C,V_fd,V__01,D):2+ eval_receive_io_bb1_in(V_fd,E,B)
     [0>=V__01+1,V__01=D+E,C=3] 
* CE 39: eval_receive_io_bb1_in(V_fd,V__01,B) = 2+ eval_receive_io_bb2_in(V_fd,V__01,C,D,E,F):5
     [0>=V__01+1,F+G=E,C=3] 
* CE 40: eval_receive_io_bb1_in(V_fd,V__01,B) = 2+ eval_receive_io_bb2_in(V_fd,V__01,C,V_fd,V__01,D):4+ eval_receive_io_bb1_in(V_fd,E,B)
     [0>=V__01+1,V__01=D+E,C=5] 
* CE 41: eval_receive_io_bb1_in(V_fd,V__01,B) = 2+ eval_receive_io_bb2_in(V_fd,V__01,C,D,E,F):5
     [0>=V__01+1,F+G=E,C=5] 

### Cost equations --> "Loop" of eval_receive_io_bb1_in/3 
* CEs [26] --> Loop 22 
* CEs [28] --> Loop 23 
* CEs [30,35,37] --> Loop 24 
* CEs [32,39,41] --> Loop 25 
* CEs [34,36] --> Loop 26 
* CEs [38,40] --> Loop 27 
* CEs [25] --> Loop 28 
* CEs [27] --> Loop 29 
* CEs [29] --> Loop 30 
* CEs [31] --> Loop 31 
* CEs [33] --> Loop 32 

#### Loops of eval_receive_io_bb1_in/3 
* Loop 22: eval_receive_io_bb1_in(V_fd,V__01,B) [V__01>=1,B=4] 
* Loop 23: eval_receive_io_bb1_in(V_fd,V__01,B) [0>=V__01+1,B=4] 
* Loop 24: eval_receive_io_bb1_in(V_fd,V__01,B) [V__01>=1] 
* Loop 25: eval_receive_io_bb1_in(V_fd,V__01,B) [0>=V__01+1] 
* Loop 26: eval_receive_io_bb1_in(V_fd,V__01,B)->  eval_receive_io_bb1_in(V_fd,V__01',B)
                  [V__01>=1] 
* Loop 27: eval_receive_io_bb1_in(V_fd,V__01,B)->  eval_receive_io_bb1_in(V_fd,V__01',B)
                  [0>=V__01+1] 
* Loop 28: eval_receive_io_bb1_in(V_fd,V__01,B) [V__01>=1,B=4] 
* Loop 29: eval_receive_io_bb1_in(V_fd,V__01,B) [0>=V__01+1,B=4] 
* Loop 30: eval_receive_io_bb1_in(V_fd,V__01,B) [V__01>=1,B=2] 
* Loop 31: eval_receive_io_bb1_in(V_fd,V__01,B) [0>=V__01+1,B=2] 
* Loop 32: eval_receive_io_bb1_in(V_fd,V__01,B) [B=4,V__01=0] 

### Ranking functions of CR eval_receive_io_bb1_in(V_fd,V__01,B) 

#### Partial ranking functions of CR eval_receive_io_bb1_in(V_fd,V__01,B) 


### Resulting Chains:eval_receive_io_bb1_in(V_fd,V__01,B) 
* [[26,27]]...
* [[26,27],32]
* [[26,27],31]
* [[26,27],30]
* [[26,27],29]
* [[26,27],28]
* [[26,27],25]...
* [[26,27],24]...
* [[26,27],23]...
* [[26,27],22]...
* [32]
* [31]
* [30]
* [29]
* [28]
* [25]...
* [24]...
* [23]...
* [22]...


### Merging Chains  eval_receive_io_bb1_in/3 into  External patterns of execution 
* [[28],[29],[32],[28,[26,27]],[29,[26,27]],[32,[26,27]]] --> 1 
* [[30],[31],[30,[26,27]],[31,[26,27]]] --> 2 
* [[[26,27]],[24,[26,27]],[25,[26,27]]] --> 3 
* [[22,[26,27]],[23,[26,27]]] --> 4 
* [[23]] --> 5 
* [[22]] --> 6 
* [[25]] --> 7 
* [[24]] --> 8 


### Specialization of cost equations loop_cont_eval_receive_io_bb1_in/2 
* CE 13 is refined into CE [42] 
* CE 14 is refined into CE [43] 


#### Refined cost equations loop_cont_eval_receive_io_bb1_in/2 
* CE 42: loop_cont_eval_receive_io_bb1_in(C,A) = 0
     [C=4] 
* CE 43: loop_cont_eval_receive_io_bb1_in(C,A) = 0
     [C=2] 

### Cost equations --> "Loop" of loop_cont_eval_receive_io_bb1_in/2 
* CEs [42] --> Loop 33 
* CEs [43] --> Loop 34 

#### Loops of loop_cont_eval_receive_io_bb1_in/2 
* Loop 33: loop_cont_eval_receive_io_bb1_in(C,A) [C=4] 
* Loop 34: loop_cont_eval_receive_io_bb1_in(C,A) [C=2] 

### Ranking functions of CR loop_cont_eval_receive_io_bb1_in(C,A) 

#### Partial ranking functions of CR loop_cont_eval_receive_io_bb1_in(C,A) 


### Resulting Chains:loop_cont_eval_receive_io_bb1_in(C,A) 
* [34]
* [33]


### Merging Chains  loop_cont_eval_receive_io_bb1_in/2 into  External patterns of execution 
* [[34]] --> 1 
* [[33]] --> 2 


### Specialization of cost equations eval_receive_io_1/3 
* CE 3 is refined into CE [44,45,46,47,48,49,50,51] 


#### Refined cost equations eval_receive_io_1/3 
* CE 44: eval_receive_io_1(V_fd,V_len,B) = 1+ eval_receive_io_bb1_in(V_fd,V_len,C):1+ loop_cont_eval_receive_io_bb1_in(D,B):2
     [D=4,C=4] 
* CE 45: eval_receive_io_1(V_fd,V_len,B) = 1+ eval_receive_io_bb1_in(V_fd,V_len,C):2+ loop_cont_eval_receive_io_bb1_in(D,B):1
     [D=2,C=2] 
* CE 46: eval_receive_io_1(V_fd,V_len,B) = 1+ eval_receive_io_bb1_in(V_fd,V_len,C):3
     [] 
* CE 47: eval_receive_io_1(V_fd,V_len,B) = 1+ eval_receive_io_bb1_in(V_fd,V_len,C):4
     [D=4,C=4] 
* CE 48: eval_receive_io_1(V_fd,V_len,B) = 1+ eval_receive_io_bb1_in(V_fd,V_len,C):5
     [0>=V_len+1,D=4,C=4] 
* CE 49: eval_receive_io_1(V_fd,V_len,B) = 1+ eval_receive_io_bb1_in(V_fd,V_len,C):6
     [V_len>=1,D=4,C=4] 
* CE 50: eval_receive_io_1(V_fd,V_len,B) = 1+ eval_receive_io_bb1_in(V_fd,V_len,C):7
     [0>=V_len+1] 
* CE 51: eval_receive_io_1(V_fd,V_len,B) = 1+ eval_receive_io_bb1_in(V_fd,V_len,C):8
     [V_len>=1] 

### Cost equations --> "Loop" of eval_receive_io_1/3 
* CEs [46,47,48,49,50,51] --> Loop 35 
* CEs [44,45] --> Loop 36 

#### Loops of eval_receive_io_1/3 
* Loop 35: eval_receive_io_1(V_fd,V_len,B) [] 
* Loop 36: eval_receive_io_1(V_fd,V_len,B) [] 

### Ranking functions of CR eval_receive_io_1(V_fd,V_len,B) 

#### Partial ranking functions of CR eval_receive_io_1(V_fd,V_len,B) 


### Resulting Chains:eval_receive_io_1(V_fd,V_len,B) 
* [36]
* [35]...


### Merging Chains  eval_receive_io_1/3 into  External patterns of execution 
* [[36]] --> 1 
* [[35]] --> 2 


### Specialization of cost equations eval_receive_io_start/3 
* CE 2 is refined into CE [52,53] 


#### Refined cost equations eval_receive_io_start/3 
* CE 52: eval_receive_io_start(V_fd,V_len,B) = 0+ eval_receive_io_1(V_fd,V_len,B):1
     [] 
* CE 53: eval_receive_io_start(V_fd,V_len,B) = 0+ eval_receive_io_1(V_fd,V_len,B):2
     [] 

### Cost equations --> "Loop" of eval_receive_io_start/3 
* CEs [53] --> Loop 37 
* CEs [52] --> Loop 38 

#### Loops of eval_receive_io_start/3 
* Loop 37: eval_receive_io_start(V_fd,V_len,B) [] 
* Loop 38: eval_receive_io_start(V_fd,V_len,B) [] 

### Ranking functions of CR eval_receive_io_start(V_fd,V_len,B) 

#### Partial ranking functions of CR eval_receive_io_start(V_fd,V_len,B) 


### Resulting Chains:eval_receive_io_start(V_fd,V_len,B) 
* [38]
* [37]...


### Merging Chains  eval_receive_io_start/3 into  External patterns of execution 
* [[38]] --> 1 
* [[37]] --> 2 


Computing Bounds
=====================================

#### Cost of loops [21] 

 * loop 21:eval_receive_io_bb2_in(V_fd,V__01,B,C,D,E) -> [eval_receive_io_bb2_in(V_fd',V__01',B',C',D',E')] 
1
#### Cost of phase [21]:eval_receive_io_bb2_in(V_fd,V__01,B,C,D,E) -> [eval_receive_io_bb2_in(V_fd',V__01',B',C',D',E')] 
1*it(21)+0
#### Cost of phase [21]:eval_receive_io_bb2_in(V_fd,V__01,B,C,D,E) -> [eval_receive_io_bb2_in(V_fd',V__01',B',C',D',E')] 
1*it(21)+0
#### Cost of phase [21]:eval_receive_io_bb2_in(V_fd,V__01,B,C,D,E) -> [eval_receive_io_bb2_in(V_fd',V__01',B',C',D',E')] 
1*it(21)+0
#### Cost of phase [21]:eval_receive_io_bb2_in(V_fd,V__01,B,C,D,E) -> [eval_receive_io_bb2_in(V_fd',V__01',B',C',D',E')] 
1*it(21)+0
#### Cost of phase [21]:eval_receive_io_bb2_in(V_fd,V__01,B,C,D,E) -> [eval_receive_io_bb2_in(V_fd',V__01',B',C',D',E')] 
1*it(21)+0
#### Cost of chains of eval_receive_io_bb2_in(V_fd,V__01,B,C,D,E):
* Chain [[21]]...: 1*it(21)+0
  with precondition: [B>=2,5>=B] 

* Chain [[21],20]: 1*it(21)+0
  with precondition: [B=2] 

* Chain [[21],19]: 1*it(21)+0
  with precondition: [B=3,V_fd=C,V__01=D] 

* Chain [[21],18]: 1*it(21)+0
  with precondition: [B=4] 

* Chain [[21],17]: 1*it(21)+0
  with precondition: [B=5,V_fd=C,V__01=D] 

* Chain [20]: 0
  with precondition: [B=2] 

* Chain [19]: 0
  with precondition: [B=3,C=V_fd,D=V__01] 

* Chain [18]: 0
  with precondition: [B=4] 

* Chain [17]: 0
  with precondition: [B=5,C=V_fd,D=V__01] 


#### Cost of loops [26,27] 

 * loop 26:eval_receive_io_bb1_in(V_fd,V__01,B) -> [eval_receive_io_bb1_in(V_fd',V__01',B')] 
1*s(7)+0
 * loop 27:eval_receive_io_bb1_in(V_fd,V__01,B) -> [eval_receive_io_bb1_in(V_fd',V__01',B')] 
1*s(10)+0
#### Cost of phase [26,27]:eval_receive_io_bb1_in(V_fd,V__01,B) -> [eval_receive_io_bb1_in(V_fd',V__01',B')] 
2*s(11)+0
#### Cost of phase [26,27]:eval_receive_io_bb1_in(V_fd,V__01,B) -> [eval_receive_io_bb1_in(V_fd',V__01',B')] 
2*s(11)+0
#### Cost of phase [26,27]:eval_receive_io_bb1_in(V_fd,V__01,B) -> [eval_receive_io_bb1_in(V_fd',V__01',B')] 
2*s(11)+0
#### Cost of phase [26,27]:eval_receive_io_bb1_in(V_fd,V__01,B) -> [eval_receive_io_bb1_in(V_fd',V__01',B')] 
2*s(11)+0
#### Cost of phase [26,27]:eval_receive_io_bb1_in(V_fd,V__01,B) -> [eval_receive_io_bb1_in(V_fd',V__01',B')] 
2*s(11)+0
#### Cost of phase [26,27]:eval_receive_io_bb1_in(V_fd,V__01,B) -> [eval_receive_io_bb1_in(V_fd',V__01',B')] 
2*s(11)+0
#### Cost of phase [26,27]:eval_receive_io_bb1_in(V_fd,V__01,B) -> [eval_receive_io_bb1_in(V_fd',V__01',B')] 
2*s(11)+0
#### Cost of phase [26,27]:eval_receive_io_bb1_in(V_fd,V__01,B) -> [eval_receive_io_bb1_in(V_fd',V__01',B')] 
2*s(11)+0
#### Cost of phase [26,27]:eval_receive_io_bb1_in(V_fd,V__01,B) -> [eval_receive_io_bb1_in(V_fd',V__01',B')] 
2*s(11)+0
#### Cost of phase [26,27]:eval_receive_io_bb1_in(V_fd,V__01,B) -> [eval_receive_io_bb1_in(V_fd',V__01',B')] 
2*s(11)+0
#### Cost of chains of eval_receive_io_bb1_in(V_fd,V__01,B):
* Chain [[26,27]]...: 2*s(11)+0
  with precondition: [] 

* Chain [[26,27],32]: 2*s(11)+0
  with precondition: [B=4] 

* Chain [[26,27],31]: 3*s(11)+1
  with precondition: [B=2] 

* Chain [[26,27],30]: 3*s(11)+1
  with precondition: [B=2] 

* Chain [[26,27],29]: 3*s(11)+1
  with precondition: [B=4] 

* Chain [[26,27],28]: 3*s(11)+1
  with precondition: [B=4] 

* Chain [[26,27],25]...: 3*aux(7)+0
  with precondition: [] 

* Chain [[26,27],24]...: 3*aux(8)+0
  with precondition: [] 

* Chain [[26,27],23]...: 3*s(11)+1
  with precondition: [B=4] 

* Chain [[26,27],22]...: 3*s(11)+1
  with precondition: [B=4] 

* Chain [32]: 0
  with precondition: [V__01=0,B=4] 

* Chain [31]: 1*s(13)+1
  with precondition: [B=2,0>=V__01+1] 

* Chain [30]: 1*s(14)+1
  with precondition: [B=2,V__01>=1] 

* Chain [29]: 1*s(15)+1
  with precondition: [B=4,0>=V__01+1] 

* Chain [28]: 1*s(16)+1
  with precondition: [B=4,V__01>=1] 

* Chain [25]...: 1*aux(7)+0
  with precondition: [0>=V__01+1] 

* Chain [24]...: 1*aux(8)+0
  with precondition: [V__01>=1] 

* Chain [23]...: 1*s(23)+1
  with precondition: [B=4,0>=V__01+1] 

* Chain [22]...: 1*s(24)+1
  with precondition: [B=4,V__01>=1] 


#### Cost of chains of loop_cont_eval_receive_io_bb1_in(C,A):
* Chain [34]: 0
  with precondition: [C=2] 

* Chain [33]: 0
  with precondition: [C=4] 


#### Cost of chains of eval_receive_io_1(V_fd,V_len,B):
* Chain [36]: 1*aux(13)+0
  with precondition: [] 

* Chain [35]...: 1*aux(14)+0
  with precondition: [] 


#### Cost of chains of eval_receive_io_start(V_fd,V_len,B):
* Chain [38]: 1*s(47)+0
  with precondition: [] 

* Chain [37]...: 1*s(48)+0
  with precondition: [] 


Closed-form bounds of eval_receive_io_start(V_fd,V_len,B): 
-------------------------------------
* Chain [38] with precondition: [] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [37]... with precondition: [] 
    - Upper bound: inf 
    - Complexity: infinity 

### Maximum cost of eval_receive_io_start(V_fd,V_len,B): inf 
Asymptotic class: infinity 

Time statistics: 
-------------------------------------
* Partial evaluation computed in 101 ms.
* Invariants computed in 85 ms.
   - Backward Invariants 60 ms.
   - Transitive Invariants 7 ms.
* Refinement performed in 183 ms.
* Termination proved in 9 ms.
* Upper bounds computed in 128 ms.
   - Equation cost structures 54 ms.
   - Phase cost structures 25 ms.
   - Chain cost structures 51 ms.
   - Solving cost expressions 0 ms.
* Total analysis performed in 598 ms.


Warning: Ignored call to eval_refcpy_to_old_stop/1 in equation eval_refcpy_to_old_bb12_in/1 

Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. non_recursive  : [eval_refcpy_to_old_bb12_in/1]
1. recursive  : [eval_refcpy_to_old_15/3,eval_refcpy_to_old_16/3,eval_refcpy_to_old_17/3,eval_refcpy_to_old_18/3,eval_refcpy_to_old_bb3_in/2,eval_refcpy_to_old_bb6_in/3]
2. recursive  : [eval_refcpy_to_old_35/3,eval_refcpy_to_old_36/3,eval_refcpy_to_old_37/3,eval_refcpy_to_old_38/3,eval_refcpy_to_old_bb11_in/3,eval_refcpy_to_old_bb8_in/2]
3. non_recursive  : [loop_cont_eval_refcpy_to_old_bb3_in/2]
4. non_recursive  : [loop_cont_eval_refcpy_to_old_bb8_in/2]
5. non_recursive  : [eval_refcpy_to_old_5/2]
6. non_recursive  : [eval_refcpy_to_old_4/3]
7. non_recursive  : [eval_refcpy_to_old_bb0_in/2]
8. non_recursive  : [eval_refcpy_to_old_start/3]

#### Obtained direct recursion through partial evaluation 
0. SCC is completely evaluated into other SCCs
1. SCC is partially evaluated into eval_refcpy_to_old_bb3_in/2
2. SCC is partially evaluated into eval_refcpy_to_old_bb8_in/2
3. SCC is completely evaluated into other SCCs
4. SCC is completely evaluated into other SCCs
5. SCC is partially evaluated into eval_refcpy_to_old_5/2
6. SCC is completely evaluated into other SCCs
7. SCC is completely evaluated into other SCCs
8. SCC is partially evaluated into eval_refcpy_to_old_start/3

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations eval_refcpy_to_old_bb3_in/2 
* CE 8 is refined into CE [12] 
* CE 6 is refined into CE [13] 
* CE 7 is refined into CE [14] 


#### Refined cost equations eval_refcpy_to_old_bb3_in/2 
* CE 12: eval_refcpy_to_old_bb3_in(V__02,B) = 0
     [B=2,V__02=0] 
* CE 13: eval_refcpy_to_old_bb3_in(V__02,B) = 1+ eval_refcpy_to_old_bb3_in(C,D)
     [V__02>=1,V__02=C+1,D=2,B=2] 
* CE 14: eval_refcpy_to_old_bb3_in(V__02,B) = 1+ eval_refcpy_to_old_bb3_in(C,D)
     [0>=V__02+1,V__02=C+1,D=2,B=2] 

### Cost equations --> "Loop" of eval_refcpy_to_old_bb3_in/2 
* CEs [13] --> Loop 9 
* CEs [14] --> Loop 10 
* CEs [12] --> Loop 11 

#### Loops of eval_refcpy_to_old_bb3_in/2 
* Loop 9: eval_refcpy_to_old_bb3_in(V__02,B)->  eval_refcpy_to_old_bb3_in(V__02',B')
                  [V__02>=1,V__02=V__02'+1,B'=2,B=2] 
* Loop 10: eval_refcpy_to_old_bb3_in(V__02,B)->  eval_refcpy_to_old_bb3_in(V__02',B')
                  [0>=V__02+1,V__02=V__02'+1,B'=2,B=2] 
* Loop 11: eval_refcpy_to_old_bb3_in(V__02,B) [B=2,V__02=0] 

### Ranking functions of CR eval_refcpy_to_old_bb3_in(V__02,B) 
* RF of phase [9]: [V__02]

#### Partial ranking functions of CR eval_refcpy_to_old_bb3_in(V__02,B) 
* Partial RF of phase [9]:
  - RF of loop [9:1]:
    V__02


### Resulting Chains:eval_refcpy_to_old_bb3_in(V__02,B) 
* [[10]]...
* [[9],11]
* [11]


### Merging Chains  eval_refcpy_to_old_bb3_in/2 into  External patterns of execution 
* [[11]] --> 1 
* [[11,[9]]] --> 2 
* [[[10]]] --> 3 


### Specialization of cost equations eval_refcpy_to_old_bb8_in/2 
* CE 11 is refined into CE [15] 
* CE 9 is refined into CE [16] 
* CE 10 is refined into CE [17] 


#### Refined cost equations eval_refcpy_to_old_bb8_in/2 
* CE 15: eval_refcpy_to_old_bb8_in(V__13,B) = 0
     [B=2,V__13=0] 
* CE 16: eval_refcpy_to_old_bb8_in(V__13,B) = 1+ eval_refcpy_to_old_bb8_in(C,D)
     [V__13>=1,V__13=C+1,D=2,B=2] 
* CE 17: eval_refcpy_to_old_bb8_in(V__13,B) = 1+ eval_refcpy_to_old_bb8_in(C,D)
     [0>=V__13+1,V__13=C+1,D=2,B=2] 

### Cost equations --> "Loop" of eval_refcpy_to_old_bb8_in/2 
* CEs [16] --> Loop 12 
* CEs [17] --> Loop 13 
* CEs [15] --> Loop 14 

#### Loops of eval_refcpy_to_old_bb8_in/2 
* Loop 12: eval_refcpy_to_old_bb8_in(V__13,B)->  eval_refcpy_to_old_bb8_in(V__13',B')
                  [V__13>=1,V__13=V__13'+1,B'=2,B=2] 
* Loop 13: eval_refcpy_to_old_bb8_in(V__13,B)->  eval_refcpy_to_old_bb8_in(V__13',B')
                  [0>=V__13+1,V__13=V__13'+1,B'=2,B=2] 
* Loop 14: eval_refcpy_to_old_bb8_in(V__13,B) [B=2,V__13=0] 

### Ranking functions of CR eval_refcpy_to_old_bb8_in(V__13,B) 
* RF of phase [12]: [V__13]

#### Partial ranking functions of CR eval_refcpy_to_old_bb8_in(V__13,B) 
* Partial RF of phase [12]:
  - RF of loop [12:1]:
    V__13


### Resulting Chains:eval_refcpy_to_old_bb8_in(V__13,B) 
* [[13]]...
* [[12],14]
* [14]


### Merging Chains  eval_refcpy_to_old_bb8_in/2 into  External patterns of execution 
* [[14]] --> 1 
* [[14,[12]]] --> 2 
* [[[13]]] --> 3 


### Specialization of cost equations eval_refcpy_to_old_5/2 
* CE 3 is refined into CE [18] 
* CE 4 is refined into CE [19,20,21] 
* CE 5 is refined into CE [22,23,24] 


#### Refined cost equations eval_refcpy_to_old_5/2 
* CE 18: eval_refcpy_to_old_5(V_size,B) = 0
     [] 
* CE 19: eval_refcpy_to_old_5(V_size,B) = 1+ eval_refcpy_to_old_bb3_in(C,D):1
     [D=2,C=0,V_size=0] 
* CE 20: eval_refcpy_to_old_5(V_size,B) = 1+ eval_refcpy_to_old_bb3_in(V_size,C):2
     [V_size>=1,C=2] 
* CE 21: eval_refcpy_to_old_5(V_size,B) = 1+ eval_refcpy_to_old_bb3_in(V_size,C):3
     [0>=V_size+1,C=2] 
* CE 22: eval_refcpy_to_old_5(V_size,B) = 1+ eval_refcpy_to_old_bb8_in(C,D):1
     [D=2,C=0,V_size=0] 
* CE 23: eval_refcpy_to_old_5(V_size,B) = 1+ eval_refcpy_to_old_bb8_in(V_size,C):2
     [V_size>=1,C=2] 
* CE 24: eval_refcpy_to_old_5(V_size,B) = 1+ eval_refcpy_to_old_bb8_in(V_size,C):3
     [0>=V_size+1,C=2] 

### Cost equations --> "Loop" of eval_refcpy_to_old_5/2 
* CEs [21,24] --> Loop 15 
* CEs [18,19,20,22,23] --> Loop 16 

#### Loops of eval_refcpy_to_old_5/2 
* Loop 15: eval_refcpy_to_old_5(V_size,B) [0>=V_size+1] 
* Loop 16: eval_refcpy_to_old_5(V_size,B) [] 

### Ranking functions of CR eval_refcpy_to_old_5(V_size,B) 

#### Partial ranking functions of CR eval_refcpy_to_old_5(V_size,B) 


### Resulting Chains:eval_refcpy_to_old_5(V_size,B) 
* [16]
* [15]...


### Merging Chains  eval_refcpy_to_old_5/2 into  External patterns of execution 
* [[16]] --> 1 
* [[15]] --> 2 


### Specialization of cost equations eval_refcpy_to_old_start/3 
* CE 2 is refined into CE [25,26] 


#### Refined cost equations eval_refcpy_to_old_start/3 
* CE 25: eval_refcpy_to_old_start(V_index,V_size,B) = 0+ eval_refcpy_to_old_5(V_size,B):1
     [] 
* CE 26: eval_refcpy_to_old_start(V_index,V_size,B) = 0+ eval_refcpy_to_old_5(V_size,B):2
     [0>=V_size+1] 

### Cost equations --> "Loop" of eval_refcpy_to_old_start/3 
* CEs [26] --> Loop 17 
* CEs [25] --> Loop 18 

#### Loops of eval_refcpy_to_old_start/3 
* Loop 17: eval_refcpy_to_old_start(V_index,V_size,B) [0>=V_size+1] 
* Loop 18: eval_refcpy_to_old_start(V_index,V_size,B) [] 

### Ranking functions of CR eval_refcpy_to_old_start(V_index,V_size,B) 

#### Partial ranking functions of CR eval_refcpy_to_old_start(V_index,V_size,B) 


### Resulting Chains:eval_refcpy_to_old_start(V_index,V_size,B) 
* [18]
* [17]...


### Merging Chains  eval_refcpy_to_old_start/3 into  External patterns of execution 
* [[18]] --> 1 
* [[17]] --> 2 


Computing Bounds
=====================================

#### Cost of loops [10] 

 * loop 10:eval_refcpy_to_old_bb3_in(V__02,B) -> [eval_refcpy_to_old_bb3_in(V__02',B')] 
1
#### Cost of phase [10]:eval_refcpy_to_old_bb3_in(V__02,B) -> [eval_refcpy_to_old_bb3_in(V__02',B')] 
1*it(10)+0
#### Cost of loops [9] 

 * loop 9:eval_refcpy_to_old_bb3_in(V__02,B) -> [eval_refcpy_to_old_bb3_in(V__02',B')] 
1
#### Cost of phase [9]:eval_refcpy_to_old_bb3_in(V__02,B) -> [eval_refcpy_to_old_bb3_in(V__02',B')] 
1*it(9)+0
  Such that:it(9) =< V__02
it(9) =< V__02-V__02'

#### Cost of chains of eval_refcpy_to_old_bb3_in(V__02,B):
* Chain [[10]]...: 1*it(10)+0
  with precondition: [0>=V__02+1,B=2] 

* Chain [[9],11]: 1*it(9)+0
  Such that:it(9) =< V__02

  with precondition: [B=2,V__02>=1] 

* Chain [11]: 0
  with precondition: [V__02=0,B=2] 


#### Cost of loops [13] 

 * loop 13:eval_refcpy_to_old_bb8_in(V__13,B) -> [eval_refcpy_to_old_bb8_in(V__13',B')] 
1
#### Cost of phase [13]:eval_refcpy_to_old_bb8_in(V__13,B) -> [eval_refcpy_to_old_bb8_in(V__13',B')] 
1*it(13)+0
#### Cost of loops [12] 

 * loop 12:eval_refcpy_to_old_bb8_in(V__13,B) -> [eval_refcpy_to_old_bb8_in(V__13',B')] 
1
#### Cost of phase [12]:eval_refcpy_to_old_bb8_in(V__13,B) -> [eval_refcpy_to_old_bb8_in(V__13',B')] 
1*it(12)+0
  Such that:it(12) =< V__13
it(12) =< V__13-V__13'

#### Cost of chains of eval_refcpy_to_old_bb8_in(V__13,B):
* Chain [[13]]...: 1*it(13)+0
  with precondition: [0>=V__13+1,B=2] 

* Chain [[12],14]: 1*it(12)+0
  Such that:it(12) =< V__13

  with precondition: [B=2,V__13>=1] 

* Chain [14]: 0
  with precondition: [V__13=0,B=2] 


#### Cost of chains of eval_refcpy_to_old_5(V_size,B):
* Chain [16]: 2*s(1)+1
  Such that:aux(1) =< V_size
s(1) =< aux(1)

  with precondition: [] 

* Chain [15]...: 1*aux(2)+0
  with precondition: [0>=V_size+1] 


#### Cost of chains of eval_refcpy_to_old_start(V_index,V_size,B):
* Chain [18]: 2*s(6)+1
  Such that:s(5) =< V_size
s(6) =< s(5)

  with precondition: [] 

* Chain [17]...: 1*s(7)+0
  with precondition: [0>=V_size+1] 


Closed-form bounds of eval_refcpy_to_old_start(V_index,V_size,B): 
-------------------------------------
* Chain [18] with precondition: [] 
    - Upper bound: nat(V_size)*2+1 
    - Complexity: n 
* Chain [17]... with precondition: [0>=V_size+1] 
    - Upper bound: inf 
    - Complexity: infinity 

### Maximum cost of eval_refcpy_to_old_start(V_index,V_size,B): inf 
Asymptotic class: infinity 

Time statistics: 
-------------------------------------
* Partial evaluation computed in 47 ms.
* Invariants computed in 39 ms.
   - Backward Invariants 13 ms.
   - Transitive Invariants 12 ms.
* Refinement performed in 66 ms.
* Termination proved in 12 ms.
* Upper bounds computed in 52 ms.
   - Equation cost structures 23 ms.
   - Phase cost structures 18 ms.
   - Chain cost structures 15 ms.
   - Solving cost expressions 1 ms.
* Total analysis performed in 275 ms.


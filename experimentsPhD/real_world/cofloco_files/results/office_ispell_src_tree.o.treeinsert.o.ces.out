Warning: Ignored call to eval_treeinsert_stop/1 in equation eval_treeinsert_39/1 
Warning: Ignored call to eval_treeinsert_stop/1 in equation eval_treeinsert_bb36_in/1 

Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. non_recursive  : [eval_treeinsert_bb36_in/1]
1. non_recursive  : [eval_treeinsert_85/1]
2. non_recursive  : [eval_treeinsert_84/6]
3. non_recursive  : [eval_treeinsert_bb35_in/1]
4. non_recursive  : [eval_treeinsert_83/6]
5. non_recursive  : [eval_treeinsert_82/6]
6. non_recursive  : [eval_treeinsert_91/1]
7. non_recursive  : [eval_treeinsert_90/6]
8. non_recursive  : [eval_treeinsert_87/6]
9. non_recursive  : [eval_treeinsert_86/6]
10. non_recursive  : [eval_treeinsert_81/6]
11. non_recursive  : [eval_treeinsert_80/6]
12. non_recursive  : [eval_treeinsert_79/6]
13. non_recursive  : [eval_treeinsert_78/6]
14. non_recursive  : [eval_treeinsert_bb30_in/6]
15. non_recursive  : [eval_treeinsert_73/6]
16. non_recursive  : [eval_treeinsert_72/7]
17. non_recursive  : [eval_treeinsert_bb27_in/7]
18. recursive  : [eval_treeinsert_bb3_in/16]
19. non_recursive  : [eval_treeinsert_39/1]
20. non_recursive  : [eval_treeinsert_38/6]
21. non_recursive  : [eval_treeinsert_bb16_in/8]
22. non_recursive  : [eval_treeinsert_43/8]
23. non_recursive  : [eval_treeinsert_42/8]
24. non_recursive  : [eval_treeinsert_bb12_in/8]
25. non_recursive  : [eval_treeinsert_37/8]
26. non_recursive  : [eval_treeinsert_36/8]
27. recursive  : [eval_treeinsert_65/17,eval_treeinsert_66/17,eval_treeinsert_67/17,eval_treeinsert_bb20_in/17]
28. recursive  : [eval_treeinsert_53/15,eval_treeinsert_54/15,eval_treeinsert_bb17_in/15,eval_treeinsert_bb24_in/15,loop_cont_eval_treeinsert_bb20_in/16]
29. non_recursive  : [eval_treeinsert_71/7]
30. non_recursive  : [eval_treeinsert_70/7]
31. non_recursive  : [loop_cont_eval_treeinsert_bb17_in/8]
32. non_recursive  : [eval_treeinsert_32/8]
33. non_recursive  : [eval_treeinsert_31/9]
34. non_recursive  : [eval_treeinsert_bb9_in/8]
35. non_recursive  : [eval_treeinsert_bb6_in/8]
36. non_recursive  : [loop_cont_eval_treeinsert_bb3_in/9]
37. non_recursive  : [eval_treeinsert_bb0_in/7]
38. non_recursive  : [eval_treeinsert_start/8]

#### Obtained direct recursion through partial evaluation 
0. SCC is completely evaluated into other SCCs
1. SCC is completely evaluated into other SCCs
2. SCC is completely evaluated into other SCCs
3. SCC is completely evaluated into other SCCs
4. SCC is partially evaluated into eval_treeinsert_83/6
5. SCC is completely evaluated into other SCCs
6. SCC is completely evaluated into other SCCs
7. SCC is completely evaluated into other SCCs
8. SCC is partially evaluated into eval_treeinsert_87/6
9. SCC is completely evaluated into other SCCs
10. SCC is partially evaluated into eval_treeinsert_81/6
11. SCC is completely evaluated into other SCCs
12. SCC is completely evaluated into other SCCs
13. SCC is completely evaluated into other SCCs
14. SCC is completely evaluated into other SCCs
15. SCC is partially evaluated into eval_treeinsert_73/6
16. SCC is completely evaluated into other SCCs
17. SCC is completely evaluated into other SCCs
18. SCC is partially evaluated into eval_treeinsert_bb3_in/16
19. SCC is completely evaluated into other SCCs
20. SCC is completely evaluated into other SCCs
21. SCC is completely evaluated into other SCCs
22. SCC is completely evaluated into other SCCs
23. SCC is completely evaluated into other SCCs
24. SCC is partially evaluated into eval_treeinsert_bb12_in/8
25. SCC is completely evaluated into other SCCs
26. SCC is completely evaluated into other SCCs
27. SCC is partially evaluated into eval_treeinsert_bb20_in/17
28. SCC is partially evaluated into eval_treeinsert_bb17_in/15
29. SCC is completely evaluated into other SCCs
30. SCC is completely evaluated into other SCCs
31. SCC is partially evaluated into loop_cont_eval_treeinsert_bb17_in/8
32. SCC is partially evaluated into eval_treeinsert_32/8
33. SCC is completely evaluated into other SCCs
34. SCC is completely evaluated into other SCCs
35. SCC is partially evaluated into eval_treeinsert_bb6_in/8
36. SCC is completely evaluated into other SCCs
37. SCC is partially evaluated into eval_treeinsert_bb0_in/7
38. SCC is partially evaluated into eval_treeinsert_start/8

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations eval_treeinsert_83/6 
* CE 17 is refined into CE [29] 


#### Refined cost equations eval_treeinsert_83/6 
* CE 29: eval_treeinsert_83(V__cbench_print,V__cantexpand,V__hcount,V__pershsize,V__newwords,B) = 0
     [] 

### Cost equations --> "Loop" of eval_treeinsert_83/6 
* CEs [29] --> Loop 20 

#### Loops of eval_treeinsert_83/6 
* Loop 20: eval_treeinsert_83(V__cbench_print,V__cantexpand,V__hcount,V__pershsize,V__newwords,B) [] 

### Ranking functions of CR eval_treeinsert_83(V__cbench_print,V__cantexpand,V__hcount,V__pershsize,V__newwords,B) 

#### Partial ranking functions of CR eval_treeinsert_83(V__cbench_print,V__cantexpand,V__hcount,V__pershsize,V__newwords,B) 


### Resulting Chains:eval_treeinsert_83(V__cbench_print,V__cantexpand,V__hcount,V__pershsize,V__newwords,B) 
* [20]


### Merging Chains  eval_treeinsert_83/6 into  External patterns of execution 
* [[20]] --> 1 


### Specialization of cost equations eval_treeinsert_87/6 
* CE 18 is refined into CE [30] 


#### Refined cost equations eval_treeinsert_87/6 
* CE 30: eval_treeinsert_87(V__cbench_print,V__cantexpand,V__hcount,V__pershsize,V__newwords,B) = 0
     [] 

### Cost equations --> "Loop" of eval_treeinsert_87/6 
* CEs [30] --> Loop 21 

#### Loops of eval_treeinsert_87/6 
* Loop 21: eval_treeinsert_87(V__cbench_print,V__cantexpand,V__hcount,V__pershsize,V__newwords,B) [] 

### Ranking functions of CR eval_treeinsert_87(V__cbench_print,V__cantexpand,V__hcount,V__pershsize,V__newwords,B) 

#### Partial ranking functions of CR eval_treeinsert_87(V__cbench_print,V__cantexpand,V__hcount,V__pershsize,V__newwords,B) 


### Resulting Chains:eval_treeinsert_87(V__cbench_print,V__cantexpand,V__hcount,V__pershsize,V__newwords,B) 
* [21]


### Merging Chains  eval_treeinsert_87/6 into  External patterns of execution 
* [[21]] --> 1 


### Specialization of cost equations eval_treeinsert_81/6 
* CE 13 is refined into CE [31] 
* CE 14 is refined into CE [32] 


#### Refined cost equations eval_treeinsert_81/6 
* CE 31: eval_treeinsert_81(V__cbench_print,V__cantexpand,V__hcount,V__pershsize,V__newwords,B) = 0+ eval_treeinsert_83(V__cbench_print,V__cantexpand,V__hcount,V__pershsize,V__newwords,B):1
     [] 
* CE 32: eval_treeinsert_81(V__cbench_print,V__cantexpand,V__hcount,V__pershsize,V__newwords,B) = 0+ eval_treeinsert_87(V__cbench_print,V__cantexpand,V__hcount,V__pershsize,V__newwords,B):1
     [] 

### Cost equations --> "Loop" of eval_treeinsert_81/6 
* CEs [31,32] --> Loop 22 

#### Loops of eval_treeinsert_81/6 
* Loop 22: eval_treeinsert_81(V__cbench_print,V__cantexpand,V__hcount,V__pershsize,V__newwords,B) [] 

### Ranking functions of CR eval_treeinsert_81(V__cbench_print,V__cantexpand,V__hcount,V__pershsize,V__newwords,B) 

#### Partial ranking functions of CR eval_treeinsert_81(V__cbench_print,V__cantexpand,V__hcount,V__pershsize,V__newwords,B) 


### Resulting Chains:eval_treeinsert_81(V__cbench_print,V__cantexpand,V__hcount,V__pershsize,V__newwords,B) 
* [22]


### Merging Chains  eval_treeinsert_81/6 into  External patterns of execution 
* [[22]] --> 1 


### Specialization of cost equations eval_treeinsert_73/6 
* CE 7 is refined into CE [33] 
* CE 8 is refined into CE [34] 


#### Refined cost equations eval_treeinsert_73/6 
* CE 33: eval_treeinsert_73(V__cbench_print,V__cantexpand,V__hcount,V__pershsize,V__newwords,B) = 0
     [] 
* CE 34: eval_treeinsert_73(V__cbench_print,V__cantexpand,V__hcount,V__pershsize,V__newwords,B) = 0+ eval_treeinsert_81(V__cbench_print,V__cantexpand,V__hcount,V__pershsize,V__newwords,B):1
     [] 

### Cost equations --> "Loop" of eval_treeinsert_73/6 
* CEs [33,34] --> Loop 23 

#### Loops of eval_treeinsert_73/6 
* Loop 23: eval_treeinsert_73(V__cbench_print,V__cantexpand,V__hcount,V__pershsize,V__newwords,B) [] 

### Ranking functions of CR eval_treeinsert_73(V__cbench_print,V__cantexpand,V__hcount,V__pershsize,V__newwords,B) 

#### Partial ranking functions of CR eval_treeinsert_73(V__cbench_print,V__cantexpand,V__hcount,V__pershsize,V__newwords,B) 


### Resulting Chains:eval_treeinsert_73(V__cbench_print,V__cantexpand,V__hcount,V__pershsize,V__newwords,B) 
* [23]


### Merging Chains  eval_treeinsert_73/6 into  External patterns of execution 
* [[23]] --> 1 


### Specialization of cost equations eval_treeinsert_bb3_in/16 
* CE 11 is refined into CE [35] 
* CE 9 is refined into CE [36] 
* CE 10 is refined into CE [37] 


#### Refined cost equations eval_treeinsert_bb3_in/16 
* CE 35: eval_treeinsert_bb3_in(A,B,C,D,E,F,E,G,H,A,B,C,D,E,F,E) = 0
     [G>=4,H=3] 
* CE 36: eval_treeinsert_bb3_in(A,B,C,D,E,F,E,G,H,A,B,C,D,E,F,E) = 0
     [G>=0,3>=G,H=3] 
* CE 37: eval_treeinsert_bb3_in(A,B,C,D,E,F,E,G,H,I,J,K,L,M,N,O) = 1+ eval_treeinsert_bb3_in(A,B,C,D,E,F,E,P,Q,I,J,K,L,M,N,O)
     [G>=0,3>=G,G+1=P,Q=3,H=3] 

### Cost equations --> "Loop" of eval_treeinsert_bb3_in/16 
* CEs [37] --> Loop 24 
* CEs [35] --> Loop 25 
* CEs [36] --> Loop 26 

#### Loops of eval_treeinsert_bb3_in/16 
* Loop 24: eval_treeinsert_bb3_in(A,B,C,D,E,F,E,G,H,I,J,K,L,M,N,O)->  eval_treeinsert_bb3_in(A,B,C,D,E,F,E,A',B',I,J,K,L,M,N,O)
                  [G>=0,3>=G,G+1=A',B'=3,H=3] 
* Loop 25: eval_treeinsert_bb3_in(A,B,C,D,E,F,E,G,H,A,B,C,D,E,F,E) [G>=4,H=3] 
* Loop 26: eval_treeinsert_bb3_in(A,B,C,D,E,F,E,G,H,A,B,C,D,E,F,E) [G>=0,3>=G,H=3] 

### Ranking functions of CR eval_treeinsert_bb3_in(V_wordlen,V__cbench_print,V__cantexpand,V__hcount,V__pershsize,V__newwords,V_7,V_i_0,B,C,D,E,F,G,H,I) 
* RF of phase [24]: [-V_i_0+4]

#### Partial ranking functions of CR eval_treeinsert_bb3_in(V_wordlen,V__cbench_print,V__cantexpand,V__hcount,V__pershsize,V__newwords,V_7,V_i_0,B,C,D,E,F,G,H,I) 
* Partial RF of phase [24]:
  - RF of loop [24:1]:
    -V_i_0+4


### Resulting Chains:eval_treeinsert_bb3_in(V_wordlen,V__cbench_print,V__cantexpand,V__hcount,V__pershsize,V__newwords,V_7,V_i_0,B,C,D,E,F,G,H,I) 
* [[24],26]
* [[24],25]
* [26]


### Merging Chains  eval_treeinsert_bb3_in/16 into  External patterns of execution 
* [[26],[25,[24]],[26,[24]]] --> 1 


### Specialization of cost equations eval_treeinsert_bb12_in/8 
* CE 19 is refined into CE [38] 
* CE 20 is refined into CE [39] 


#### Refined cost equations eval_treeinsert_bb12_in/8 
* CE 38: eval_treeinsert_bb12_in(V_wordlen,V__cbench_print,V__cantexpand,V__hcount,V__pershsize,V__newwords,V_7,B) = 0
     [] 
* CE 39: eval_treeinsert_bb12_in(V_wordlen,V__cbench_print,V__cantexpand,V__hcount,V__pershsize,V__newwords,V_7,B) = 0+ eval_treeinsert_73(V__cbench_print,C,V__hcount,V_7,D,B):1
     [D=1,C=1] 

### Cost equations --> "Loop" of eval_treeinsert_bb12_in/8 
* CEs [38,39] --> Loop 27 

#### Loops of eval_treeinsert_bb12_in/8 
* Loop 27: eval_treeinsert_bb12_in(V_wordlen,V__cbench_print,V__cantexpand,V__hcount,V__pershsize,V__newwords,V_7,B) [] 

### Ranking functions of CR eval_treeinsert_bb12_in(V_wordlen,V__cbench_print,V__cantexpand,V__hcount,V__pershsize,V__newwords,V_7,B) 

#### Partial ranking functions of CR eval_treeinsert_bb12_in(V_wordlen,V__cbench_print,V__cantexpand,V__hcount,V__pershsize,V__newwords,V_7,B) 


### Resulting Chains:eval_treeinsert_bb12_in(V_wordlen,V__cbench_print,V__cantexpand,V__hcount,V__pershsize,V__newwords,V_7,B) 
* [27]


### Merging Chains  eval_treeinsert_bb12_in/8 into  External patterns of execution 
* [[27]] --> 1 


### Specialization of cost equations eval_treeinsert_bb20_in/17 
* CE 28 is refined into CE [40] 
* CE 27 is refined into CE [41] 


#### Refined cost equations eval_treeinsert_bb20_in/17 
* CE 40: eval_treeinsert_bb20_in(A,B,C,D,E,F,G,H,I,A,B,C,D,E,F,G,H) = 0
     [G>=H+1,I=2] 
* CE 41: eval_treeinsert_bb20_in(V_wordlen,V__cbench_print,V__cantexpand,V__hcount,V__pershsize,V__newwords,V_7,V_i_1,B,C,D,E,F,G,H,I,J) = 1+ eval_treeinsert_bb20_in(V_wordlen,K,L,M,N,O,V_7,V_i_1,P,C,D,E,F,G,H,I,J)
     [V_7>=V_i_1+1,P=2,B=2] 

### Cost equations --> "Loop" of eval_treeinsert_bb20_in/17 
* CEs [41] --> Loop 28 
* CEs [40] --> Loop 29 

#### Loops of eval_treeinsert_bb20_in/17 
* Loop 28: eval_treeinsert_bb20_in(V_wordlen,V__cbench_print,V__cantexpand,V__hcount,V__pershsize,V__newwords,V_7,V_i_1,B,C,D,E,F,G,H,I,J)->  eval_treeinsert_bb20_in(V_wordlen,V__cbench_print',V__cantexpand',V__hcount',V__pershsize',V__newwords',V_7,V_i_1,B',C,D,E,F,G,H,I,J)
                  [V_7>=V_i_1+1,B'=2,B=2] 
* Loop 29: eval_treeinsert_bb20_in(A,B,C,D,E,F,G,H,I,A,B,C,D,E,F,G,H) [G>=H+1,I=2] 

### Ranking functions of CR eval_treeinsert_bb20_in(V_wordlen,V__cbench_print,V__cantexpand,V__hcount,V__pershsize,V__newwords,V_7,V_i_1,B,C,D,E,F,G,H,I,J) 

#### Partial ranking functions of CR eval_treeinsert_bb20_in(V_wordlen,V__cbench_print,V__cantexpand,V__hcount,V__pershsize,V__newwords,V_7,V_i_1,B,C,D,E,F,G,H,I,J) 


### Resulting Chains:eval_treeinsert_bb20_in(V_wordlen,V__cbench_print,V__cantexpand,V__hcount,V__pershsize,V__newwords,V_7,V_i_1,B,C,D,E,F,G,H,I,J) 
* [[28]]...
* [[28],29]
* [29]


### Merging Chains  eval_treeinsert_bb20_in/17 into  External patterns of execution 
* [[29],[29,[28]]] --> 1 
* [[[28]]] --> 2 


### Specialization of cost equations eval_treeinsert_bb17_in/15 
* CE 24 is refined into CE [42] 
* CE 23 is refined into CE [43] 
* CE 21 is refined into CE [44,45] 
* CE 22 is refined into CE [46] 


#### Refined cost equations eval_treeinsert_bb17_in/15 
* CE 42: eval_treeinsert_bb17_in(A,B,C,D,E,F,G,H,I,A,B,C,D,E,F) = 0
     [H>=G,I=5] 
* CE 43: eval_treeinsert_bb17_in(A,B,C,D,E,F,G,H,I,A,B,C,D,E,F) = 0
     [H>=G,I=4] 
* CE 44: eval_treeinsert_bb17_in(V_wordlen,V__cbench_print,V__cantexpand,V__hcount,V__pershsize,V__newwords,V_7,V_i_1,B,C,D,E,F,G,H) = 2+ eval_treeinsert_bb20_in(V_wordlen,V__cbench_print,V__cantexpand,V__hcount,V__pershsize,V__newwords,V_7,V_i_1,I,V_wordlen,J,K,L,M,N,V_7,V_i_1):1+ eval_treeinsert_bb17_in(V_wordlen,J,K,L,M,N,V_7,O,B,C,D,E,F,G,H)
     [V_7>=V_i_1+1,V_i_1+1=O,I=2] 
* CE 45: eval_treeinsert_bb17_in(V_wordlen,V__cbench_print,V__cantexpand,V__hcount,V__pershsize,V__newwords,V_7,V_i_1,B,C,D,E,F,G,H) = 2+ eval_treeinsert_bb20_in(V_wordlen,V__cbench_print,V__cantexpand,V__hcount,V__pershsize,V__newwords,V_7,V_i_1,I,J,K,L,M,N,O,P,Q):2
     [V_7>=V_i_1+1,R=Q+1,I=2] 
* CE 46: eval_treeinsert_bb17_in(V_wordlen,V__cbench_print,V__cantexpand,V__hcount,V__pershsize,V__newwords,V_7,V_i_1,B,C,D,E,F,G,H) = 1+ eval_treeinsert_bb17_in(V_wordlen,V__cbench_print,V__cantexpand,V__hcount,V__pershsize,V__newwords,V_7,I,B,C,D,E,F,G,H)
     [V_7>=V_i_1+1,V_i_1+1=I] 

### Cost equations --> "Loop" of eval_treeinsert_bb17_in/15 
* CEs [44,46] --> Loop 30 
* CEs [45] --> Loop 31 
* CEs [42] --> Loop 32 
* CEs [43] --> Loop 33 

#### Loops of eval_treeinsert_bb17_in/15 
* Loop 30: eval_treeinsert_bb17_in(V_wordlen,V__cbench_print,V__cantexpand,V__hcount,V__pershsize,V__newwords,V_7,V_i_1,B,C,D,E,F,G,H)->  eval_treeinsert_bb17_in(V_wordlen,V__cbench_print',V__cantexpand',V__hcount',V__pershsize',V__newwords',V_7,V_i_1',B,C,D,E,F,G,H)
                  [V_7>=V_i_1+1,V_i_1+1=V_i_1'] 
* Loop 31: eval_treeinsert_bb17_in(V_wordlen,V__cbench_print,V__cantexpand,V__hcount,V__pershsize,V__newwords,V_7,V_i_1,B,C,D,E,F,G,H) [V_7>=V_i_1+1] 
* Loop 32: eval_treeinsert_bb17_in(A,B,C,D,E,F,G,H,I,A,B,C,D,E,F) [H>=G,I=5] 
* Loop 33: eval_treeinsert_bb17_in(A,B,C,D,E,F,G,H,I,A,B,C,D,E,F) [H>=G,I=4] 

### Ranking functions of CR eval_treeinsert_bb17_in(V_wordlen,V__cbench_print,V__cantexpand,V__hcount,V__pershsize,V__newwords,V_7,V_i_1,B,C,D,E,F,G,H) 
* RF of phase [30]: [V_7-V_i_1]

#### Partial ranking functions of CR eval_treeinsert_bb17_in(V_wordlen,V__cbench_print,V__cantexpand,V__hcount,V__pershsize,V__newwords,V_7,V_i_1,B,C,D,E,F,G,H) 
* Partial RF of phase [30]:
  - RF of loop [30:1]:
    V_7-V_i_1


### Resulting Chains:eval_treeinsert_bb17_in(V_wordlen,V__cbench_print,V__cantexpand,V__hcount,V__pershsize,V__newwords,V_7,V_i_1,B,C,D,E,F,G,H) 
* [[30],33]
* [[30],32]
* [[30],31]...
* [33]
* [32]
* [31]...


### Merging Chains  eval_treeinsert_bb17_in/15 into  External patterns of execution 
* [[33]] --> 1 
* [[33,[30]]] --> 2 
* [[32]] --> 3 
* [[32,[30]]] --> 4 
* [[31]] --> 5 
* [[31,[30]]] --> 6 


### Specialization of cost equations loop_cont_eval_treeinsert_bb17_in/8 
* CE 26 is refined into CE [47] 
* CE 25 is refined into CE [48] 


#### Refined cost equations loop_cont_eval_treeinsert_bb17_in/8 
* CE 47: loop_cont_eval_treeinsert_bb17_in(J,A,B,C,D,E,F,G) = 0+ eval_treeinsert_73(B,C,D,E,F,G):1
     [J=5] 
* CE 48: loop_cont_eval_treeinsert_bb17_in(J,A,B,C,D,E,F,G) = 0+ eval_treeinsert_73(B,C,D,E,F,G):1
     [J=4] 

### Cost equations --> "Loop" of loop_cont_eval_treeinsert_bb17_in/8 
* CEs [47] --> Loop 34 
* CEs [48] --> Loop 35 

#### Loops of loop_cont_eval_treeinsert_bb17_in/8 
* Loop 34: loop_cont_eval_treeinsert_bb17_in(J,A,B,C,D,E,F,G) [J=5] 
* Loop 35: loop_cont_eval_treeinsert_bb17_in(J,A,B,C,D,E,F,G) [J=4] 

### Ranking functions of CR loop_cont_eval_treeinsert_bb17_in(J,A,B,C,D,E,F,G) 

#### Partial ranking functions of CR loop_cont_eval_treeinsert_bb17_in(J,A,B,C,D,E,F,G) 


### Resulting Chains:loop_cont_eval_treeinsert_bb17_in(J,A,B,C,D,E,F,G) 
* [35]
* [34]


### Merging Chains  loop_cont_eval_treeinsert_bb17_in/8 into  External patterns of execution 
* [[35]] --> 1 
* [[34]] --> 2 


### Specialization of cost equations eval_treeinsert_32/8 
* CE 15 is refined into CE [49] 
* CE 16 is refined into CE [50,51,52,53,54,55] 


#### Refined cost equations eval_treeinsert_32/8 
* CE 49: eval_treeinsert_32(V_wordlen,V__cbench_print,V__cantexpand,V__hcount,V__pershsize,V__newwords,V_7,B) = 0+ eval_treeinsert_bb12_in(V_wordlen,V__cbench_print,V__cantexpand,V__hcount,V__pershsize,V__newwords,V_7,B):1
     [] 
* CE 50: eval_treeinsert_32(V_wordlen,V__cbench_print,V__cantexpand,V__hcount,V__pershsize,V__newwords,V_7,B) = 1+ eval_treeinsert_bb17_in(V_wordlen,V__cbench_print,V__cantexpand,V__hcount,V__pershsize,V__newwords,V_7,C,D,V_wordlen,V__cbench_print,V__cantexpand,V__hcount,V__pershsize,V__newwords):1+ loop_cont_eval_treeinsert_bb17_in(E,V_wordlen,V__cbench_print,V__cantexpand,V__hcount,V__pershsize,V__newwords,B):1
     [0>=V_7,E=4,D=4,C=0] 
* CE 51: eval_treeinsert_32(V_wordlen,V__cbench_print,V__cantexpand,V__hcount,V__pershsize,V__newwords,V_7,B) = 1+ eval_treeinsert_bb17_in(V_wordlen,V__cbench_print,V__cantexpand,V__hcount,V__pershsize,V__newwords,V_7,C,D,V_wordlen,E,F,G,H,I):2+ loop_cont_eval_treeinsert_bb17_in(J,V_wordlen,E,F,G,H,I,B):1
     [V_7>=1,J=4,D=4,C=0] 
* CE 52: eval_treeinsert_32(V_wordlen,V__cbench_print,V__cantexpand,V__hcount,V__pershsize,V__newwords,V_7,B) = 1+ eval_treeinsert_bb17_in(V_wordlen,V__cbench_print,V__cantexpand,V__hcount,V__pershsize,V__newwords,V_7,C,D,V_wordlen,V__cbench_print,V__cantexpand,V__hcount,V__pershsize,V__newwords):3+ loop_cont_eval_treeinsert_bb17_in(E,V_wordlen,V__cbench_print,V__cantexpand,V__hcount,V__pershsize,V__newwords,B):2
     [0>=V_7,E=5,D=5,C=0] 
* CE 53: eval_treeinsert_32(V_wordlen,V__cbench_print,V__cantexpand,V__hcount,V__pershsize,V__newwords,V_7,B) = 1+ eval_treeinsert_bb17_in(V_wordlen,V__cbench_print,V__cantexpand,V__hcount,V__pershsize,V__newwords,V_7,C,D,V_wordlen,E,F,G,H,I):4+ loop_cont_eval_treeinsert_bb17_in(J,V_wordlen,E,F,G,H,I,B):2
     [V_7>=1,J=5,D=5,C=0] 
* CE 54: eval_treeinsert_32(V_wordlen,V__cbench_print,V__cantexpand,V__hcount,V__pershsize,V__newwords,V_7,B) = 1+ eval_treeinsert_bb17_in(V_wordlen,V__cbench_print,V__cantexpand,V__hcount,V__pershsize,V__newwords,V_7,C,D,E,F,G,H,I,J):5
     [V_7>=1,C=0] 
* CE 55: eval_treeinsert_32(V_wordlen,V__cbench_print,V__cantexpand,V__hcount,V__pershsize,V__newwords,V_7,B) = 1+ eval_treeinsert_bb17_in(V_wordlen,V__cbench_print,V__cantexpand,V__hcount,V__pershsize,V__newwords,V_7,C,D,E,F,G,H,I,J):6
     [V_7>=2,C=0] 

### Cost equations --> "Loop" of eval_treeinsert_32/8 
* CEs [54,55] --> Loop 36 
* CEs [49,50,51,52,53] --> Loop 37 

#### Loops of eval_treeinsert_32/8 
* Loop 36: eval_treeinsert_32(V_wordlen,V__cbench_print,V__cantexpand,V__hcount,V__pershsize,V__newwords,V_7,B) [V_7>=1] 
* Loop 37: eval_treeinsert_32(V_wordlen,V__cbench_print,V__cantexpand,V__hcount,V__pershsize,V__newwords,V_7,B) [] 

### Ranking functions of CR eval_treeinsert_32(V_wordlen,V__cbench_print,V__cantexpand,V__hcount,V__pershsize,V__newwords,V_7,B) 

#### Partial ranking functions of CR eval_treeinsert_32(V_wordlen,V__cbench_print,V__cantexpand,V__hcount,V__pershsize,V__newwords,V_7,B) 


### Resulting Chains:eval_treeinsert_32(V_wordlen,V__cbench_print,V__cantexpand,V__hcount,V__pershsize,V__newwords,V_7,B) 
* [37]
* [36]...


### Merging Chains  eval_treeinsert_32/8 into  External patterns of execution 
* [[37]] --> 1 
* [[36]] --> 2 


### Specialization of cost equations eval_treeinsert_bb6_in/8 
* CE 12 is refined into CE [56,57] 


#### Refined cost equations eval_treeinsert_bb6_in/8 
* CE 56: eval_treeinsert_bb6_in(V_wordlen,V__cbench_print,V__cantexpand,V__hcount,V__pershsize,V__newwords,V_7,B) = 0+ eval_treeinsert_32(V_wordlen,V__cbench_print,V__cantexpand,V__hcount,C,V__newwords,V_7,B):1
     [] 
* CE 57: eval_treeinsert_bb6_in(V_wordlen,V__cbench_print,V__cantexpand,V__hcount,V__pershsize,V__newwords,V_7,B) = 0+ eval_treeinsert_32(V_wordlen,V__cbench_print,V__cantexpand,V__hcount,C,V__newwords,V_7,B):2
     [V_7>=1] 

### Cost equations --> "Loop" of eval_treeinsert_bb6_in/8 
* CEs [57] --> Loop 38 
* CEs [56] --> Loop 39 

#### Loops of eval_treeinsert_bb6_in/8 
* Loop 38: eval_treeinsert_bb6_in(V_wordlen,V__cbench_print,V__cantexpand,V__hcount,V__pershsize,V__newwords,V_7,B) [V_7>=1] 
* Loop 39: eval_treeinsert_bb6_in(V_wordlen,V__cbench_print,V__cantexpand,V__hcount,V__pershsize,V__newwords,V_7,B) [] 

### Ranking functions of CR eval_treeinsert_bb6_in(V_wordlen,V__cbench_print,V__cantexpand,V__hcount,V__pershsize,V__newwords,V_7,B) 

#### Partial ranking functions of CR eval_treeinsert_bb6_in(V_wordlen,V__cbench_print,V__cantexpand,V__hcount,V__pershsize,V__newwords,V_7,B) 


### Resulting Chains:eval_treeinsert_bb6_in(V_wordlen,V__cbench_print,V__cantexpand,V__hcount,V__pershsize,V__newwords,V_7,B) 
* [39]
* [38]...


### Merging Chains  eval_treeinsert_bb6_in/8 into  External patterns of execution 
* [[39]] --> 1 
* [[38]] --> 2 


### Specialization of cost equations eval_treeinsert_bb0_in/7 
* CE 3 is refined into CE [58] 
* CE 4 is refined into CE [59,60] 
* CE 5 is refined into CE [61,62] 
* CE 6 is refined into CE [63,64] 


#### Refined cost equations eval_treeinsert_bb0_in/7 
* CE 58: eval_treeinsert_bb0_in(V_wordlen,V__cbench_print,V__cantexpand,V__hcount,V__pershsize,V__newwords,B) = 0+ eval_treeinsert_73(V__cbench_print,V__cantexpand,V__hcount,V__pershsize,V__newwords,B):1
     [] 
* CE 59: eval_treeinsert_bb0_in(V_wordlen,V__cbench_print,V__cantexpand,V__hcount,V__pershsize,V__newwords,B) = 1+ eval_treeinsert_bb3_in(V_wordlen,V__cbench_print,V__cantexpand,C,V__pershsize,V__newwords,V__pershsize,D,E,V_wordlen,V__cbench_print,V__cantexpand,F,V__pershsize,V__newwords,V__pershsize):1+ eval_treeinsert_bb6_in(V_wordlen,V__cbench_print,V__cantexpand,G,V__pershsize,V__newwords,V__pershsize,B):1
     [G=0,F=0,E=3,D=0,C=0,V__hcount=0] 
* CE 60: eval_treeinsert_bb0_in(V_wordlen,V__cbench_print,V__cantexpand,V__hcount,V__pershsize,V__newwords,B) = 1+ eval_treeinsert_bb3_in(V_wordlen,V__cbench_print,V__cantexpand,C,V__pershsize,V__newwords,V__pershsize,D,E,V_wordlen,V__cbench_print,V__cantexpand,F,V__pershsize,V__newwords,V__pershsize):1+ eval_treeinsert_bb6_in(V_wordlen,V__cbench_print,V__cantexpand,G,V__pershsize,V__newwords,V__pershsize,B):2
     [V__pershsize>=1,G=0,F=0,E=3,D=0,C=0,V__hcount=0] 
* CE 61: eval_treeinsert_bb0_in(V_wordlen,V__cbench_print,V__cantexpand,V__hcount,V__pershsize,V__newwords,B) = 1+ eval_treeinsert_bb3_in(V_wordlen,V__cbench_print,V__cantexpand,V__hcount,V__pershsize,V__newwords,V__pershsize,C,D,V_wordlen,V__cbench_print,V__cantexpand,V__hcount,V__pershsize,V__newwords,V__pershsize):1+ eval_treeinsert_bb6_in(V_wordlen,V__cbench_print,V__cantexpand,V__hcount,V__pershsize,V__newwords,V__pershsize,B):1
     [100*V__hcount>=1,D=3,C=0] 
* CE 62: eval_treeinsert_bb0_in(V_wordlen,V__cbench_print,V__cantexpand,V__hcount,V__pershsize,V__newwords,B) = 1+ eval_treeinsert_bb3_in(V_wordlen,V__cbench_print,V__cantexpand,V__hcount,V__pershsize,V__newwords,V__pershsize,C,D,V_wordlen,V__cbench_print,V__cantexpand,V__hcount,V__pershsize,V__newwords,V__pershsize):1+ eval_treeinsert_bb6_in(V_wordlen,V__cbench_print,V__cantexpand,V__hcount,V__pershsize,V__newwords,V__pershsize,B):2
     [100*V__hcount>=1,V__pershsize>=1,D=3,C=0] 
* CE 63: eval_treeinsert_bb0_in(V_wordlen,V__cbench_print,V__cantexpand,V__hcount,V__pershsize,V__newwords,B) = 1+ eval_treeinsert_bb3_in(V_wordlen,V__cbench_print,V__cantexpand,V__hcount,V__pershsize,V__newwords,V__pershsize,C,D,V_wordlen,V__cbench_print,V__cantexpand,V__hcount,V__pershsize,V__newwords,V__pershsize):1+ eval_treeinsert_bb6_in(V_wordlen,V__cbench_print,V__cantexpand,V__hcount,V__pershsize,V__newwords,V__pershsize,B):1
     [0>=100*V__hcount+1,D=3,C=0] 
* CE 64: eval_treeinsert_bb0_in(V_wordlen,V__cbench_print,V__cantexpand,V__hcount,V__pershsize,V__newwords,B) = 1+ eval_treeinsert_bb3_in(V_wordlen,V__cbench_print,V__cantexpand,V__hcount,V__pershsize,V__newwords,V__pershsize,C,D,V_wordlen,V__cbench_print,V__cantexpand,V__hcount,V__pershsize,V__newwords,V__pershsize):1+ eval_treeinsert_bb6_in(V_wordlen,V__cbench_print,V__cantexpand,V__hcount,V__pershsize,V__newwords,V__pershsize,B):2
     [V__pershsize>=1,0>=100*V__hcount+1,D=3,C=0] 

### Cost equations --> "Loop" of eval_treeinsert_bb0_in/7 
* CEs [62] --> Loop 40 
* CEs [64] --> Loop 41 
* CEs [60] --> Loop 42 
* CEs [58,59,61,63] --> Loop 43 

#### Loops of eval_treeinsert_bb0_in/7 
* Loop 40: eval_treeinsert_bb0_in(V_wordlen,V__cbench_print,V__cantexpand,V__hcount,V__pershsize,V__newwords,B) [100*V__hcount>=1,V__pershsize>=1] 
* Loop 41: eval_treeinsert_bb0_in(V_wordlen,V__cbench_print,V__cantexpand,V__hcount,V__pershsize,V__newwords,B) [V__pershsize>=1,0>=100*V__hcount+1] 
* Loop 42: eval_treeinsert_bb0_in(V_wordlen,V__cbench_print,V__cantexpand,V__hcount,V__pershsize,V__newwords,B) [V__pershsize>=1,V__hcount=0] 
* Loop 43: eval_treeinsert_bb0_in(V_wordlen,V__cbench_print,V__cantexpand,V__hcount,V__pershsize,V__newwords,B) [] 

### Ranking functions of CR eval_treeinsert_bb0_in(V_wordlen,V__cbench_print,V__cantexpand,V__hcount,V__pershsize,V__newwords,B) 

#### Partial ranking functions of CR eval_treeinsert_bb0_in(V_wordlen,V__cbench_print,V__cantexpand,V__hcount,V__pershsize,V__newwords,B) 


### Resulting Chains:eval_treeinsert_bb0_in(V_wordlen,V__cbench_print,V__cantexpand,V__hcount,V__pershsize,V__newwords,B) 
* [43]
* [42]...
* [41]...
* [40]...


### Merging Chains  eval_treeinsert_bb0_in/7 into  External patterns of execution 
* [[43]] --> 1 
* [[42]] --> 2 
* [[41]] --> 3 
* [[40]] --> 4 


### Specialization of cost equations eval_treeinsert_start/8 
* CE 2 is refined into CE [65,66,67,68] 


#### Refined cost equations eval_treeinsert_start/8 
* CE 65: eval_treeinsert_start(V_wordlen,V_keep,V__cbench_print,V__cantexpand,V__hcount,V__pershsize,V__newwords,B) = 0+ eval_treeinsert_bb0_in(V_wordlen,V__cbench_print,V__cantexpand,V__hcount,V__pershsize,V__newwords,B):1
     [] 
* CE 66: eval_treeinsert_start(V_wordlen,V_keep,V__cbench_print,V__cantexpand,V__hcount,V__pershsize,V__newwords,B) = 0+ eval_treeinsert_bb0_in(V_wordlen,V__cbench_print,V__cantexpand,C,V__pershsize,V__newwords,B):2
     [V__pershsize>=1,C=0,V__hcount=0] 
* CE 67: eval_treeinsert_start(V_wordlen,V_keep,V__cbench_print,V__cantexpand,V__hcount,V__pershsize,V__newwords,B) = 0+ eval_treeinsert_bb0_in(V_wordlen,V__cbench_print,V__cantexpand,V__hcount,V__pershsize,V__newwords,B):3
     [V__pershsize>=1,0>=100*V__hcount+1] 
* CE 68: eval_treeinsert_start(V_wordlen,V_keep,V__cbench_print,V__cantexpand,V__hcount,V__pershsize,V__newwords,B) = 0+ eval_treeinsert_bb0_in(V_wordlen,V__cbench_print,V__cantexpand,V__hcount,V__pershsize,V__newwords,B):4
     [100*V__hcount>=1,V__pershsize>=1] 

### Cost equations --> "Loop" of eval_treeinsert_start/8 
* CEs [68] --> Loop 44 
* CEs [67] --> Loop 45 
* CEs [66] --> Loop 46 
* CEs [65] --> Loop 47 

#### Loops of eval_treeinsert_start/8 
* Loop 44: eval_treeinsert_start(V_wordlen,V_keep,V__cbench_print,V__cantexpand,V__hcount,V__pershsize,V__newwords,B) [100*V__hcount>=1,V__pershsize>=1] 
* Loop 45: eval_treeinsert_start(V_wordlen,V_keep,V__cbench_print,V__cantexpand,V__hcount,V__pershsize,V__newwords,B) [V__pershsize>=1,0>=100*V__hcount+1] 
* Loop 46: eval_treeinsert_start(V_wordlen,V_keep,V__cbench_print,V__cantexpand,V__hcount,V__pershsize,V__newwords,B) [V__pershsize>=1,V__hcount=0] 
* Loop 47: eval_treeinsert_start(V_wordlen,V_keep,V__cbench_print,V__cantexpand,V__hcount,V__pershsize,V__newwords,B) [] 

### Ranking functions of CR eval_treeinsert_start(V_wordlen,V_keep,V__cbench_print,V__cantexpand,V__hcount,V__pershsize,V__newwords,B) 

#### Partial ranking functions of CR eval_treeinsert_start(V_wordlen,V_keep,V__cbench_print,V__cantexpand,V__hcount,V__pershsize,V__newwords,B) 


### Resulting Chains:eval_treeinsert_start(V_wordlen,V_keep,V__cbench_print,V__cantexpand,V__hcount,V__pershsize,V__newwords,B) 
* [47]
* [46]...
* [45]...
* [44]...


### Merging Chains  eval_treeinsert_start/8 into  External patterns of execution 
* [[47]] --> 1 
* [[46]] --> 2 
* [[45]] --> 3 
* [[44]] --> 4 


Computing Bounds
=====================================

#### Cost of chains of eval_treeinsert_83(V__cbench_print,V__cantexpand,V__hcount,V__pershsize,V__newwords,B):
* Chain [20]: 0
  with precondition: [] 


#### Cost of chains of eval_treeinsert_87(V__cbench_print,V__cantexpand,V__hcount,V__pershsize,V__newwords,B):
* Chain [21]: 0
  with precondition: [] 


#### Cost of chains of eval_treeinsert_81(V__cbench_print,V__cantexpand,V__hcount,V__pershsize,V__newwords,B):
* Chain [22]: 0
  with precondition: [] 


#### Cost of chains of eval_treeinsert_73(V__cbench_print,V__cantexpand,V__hcount,V__pershsize,V__newwords,B):
* Chain [23]: 0
  with precondition: [] 


#### Cost of loops [24] 

 * loop 24:eval_treeinsert_bb3_in(V_wordlen,V__cbench_print,V__cantexpand,V__hcount,V__pershsize,V__newwords,V_7,V_i_0,B,C,D,E,F,G,H,I) -> [eval_treeinsert_bb3_in(V_wordlen',V__cbench_print',V__cantexpand',V__hcount',V__pershsize',V__newwords',V_7',V_i_0',B',C',D',E',F',G',H',I')] 
1
#### Cost of phase [24]:eval_treeinsert_bb3_in(V_wordlen,V__cbench_print,V__cantexpand,V__hcount,V__pershsize,V__newwords,V_7,V_i_0,B,C,D,E,F,G,H,I) -> [eval_treeinsert_bb3_in(V_wordlen',V__cbench_print',V__cantexpand',V__hcount',V__pershsize',V__newwords',V_7',V_i_0',B',C',D',E',F',G',H',I')] 
1*it(24)+0
  Such that:it(24) =< -V_i_0+4
it(24) =< -V_i_0+V_i_0'

#### Cost of phase [24]:eval_treeinsert_bb3_in(V_wordlen,V__cbench_print,V__cantexpand,V__hcount,V__pershsize,V__newwords,V_7,V_i_0,B,C,D,E,F,G,H,I) -> [eval_treeinsert_bb3_in(V_wordlen',V__cbench_print',V__cantexpand',V__hcount',V__pershsize',V__newwords',V_7',V_i_0',B',C',D',E',F',G',H',I')] 
1*it(24)+0
  Such that:it(24) =< -V_i_0+4
it(24) =< -V_i_0+V_i_0'

#### Cost of chains of eval_treeinsert_bb3_in(V_wordlen,V__cbench_print,V__cantexpand,V__hcount,V__pershsize,V__newwords,V_7,V_i_0,B,C,D,E,F,G,H,I):
* Chain [[24],26]: 1*it(24)+0
  Such that:it(24) =< -V_i_0+3

  with precondition: [B=3,V__pershsize=V_7,V_wordlen=C,V__cbench_print=D,V__cantexpand=E,V__hcount=F,V__pershsize=G,V__newwords=H,V__pershsize=I,2>=V_i_0,V_i_0>=0] 

* Chain [[24],25]: 1*it(24)+0
  Such that:it(24) =< -V_i_0+4

  with precondition: [B=3,V__pershsize=V_7,V_wordlen=C,V__cbench_print=D,V__cantexpand=E,V__hcount=F,V__pershsize=G,V__newwords=H,V__pershsize=I,3>=V_i_0,V_i_0>=0] 

* Chain [26]: 0
  with precondition: [B=3,C=V_wordlen,D=V__cbench_print,E=V__cantexpand,F=V__hcount,V_7=V__pershsize,H=V__newwords,V_7=G,V_7=I,3>=V_i_0,V_i_0>=0] 


#### Cost of chains of eval_treeinsert_bb12_in(V_wordlen,V__cbench_print,V__cantexpand,V__hcount,V__pershsize,V__newwords,V_7,B):
* Chain [27]: 0
  with precondition: [] 


#### Cost of loops [28] 

 * loop 28:eval_treeinsert_bb20_in(V_wordlen,V__cbench_print,V__cantexpand,V__hcount,V__pershsize,V__newwords,V_7,V_i_1,B,C,D,E,F,G,H,I,J) -> [eval_treeinsert_bb20_in(V_wordlen',V__cbench_print',V__cantexpand',V__hcount',V__pershsize',V__newwords',V_7',V_i_1',B',C',D',E',F',G',H',I',J')] 
1
#### Cost of phase [28]:eval_treeinsert_bb20_in(V_wordlen,V__cbench_print,V__cantexpand,V__hcount,V__pershsize,V__newwords,V_7,V_i_1,B,C,D,E,F,G,H,I,J) -> [eval_treeinsert_bb20_in(V_wordlen',V__cbench_print',V__cantexpand',V__hcount',V__pershsize',V__newwords',V_7',V_i_1',B',C',D',E',F',G',H',I',J')] 
1*it(28)+0
#### Cost of phase [28]:eval_treeinsert_bb20_in(V_wordlen,V__cbench_print,V__cantexpand,V__hcount,V__pershsize,V__newwords,V_7,V_i_1,B,C,D,E,F,G,H,I,J) -> [eval_treeinsert_bb20_in(V_wordlen',V__cbench_print',V__cantexpand',V__hcount',V__pershsize',V__newwords',V_7',V_i_1',B',C',D',E',F',G',H',I',J')] 
1*it(28)+0
#### Cost of chains of eval_treeinsert_bb20_in(V_wordlen,V__cbench_print,V__cantexpand,V__hcount,V__pershsize,V__newwords,V_7,V_i_1,B,C,D,E,F,G,H,I,J):
* Chain [[28]]...: 1*it(28)+0
  with precondition: [V_7>=V_i_1+1,B=2] 

* Chain [[28],29]: 1*it(28)+0
  with precondition: [B=2,V_wordlen=C,V_7=I,V_i_1=J,V_7>=V_i_1+1] 

* Chain [29]: 0
  with precondition: [B=2,C=V_wordlen,D=V__cbench_print,E=V__cantexpand,F=V__hcount,G=V__pershsize,H=V__newwords,V_7=I,V_i_1=J,V_7>=V_i_1+1] 


#### Cost of loops [30] 

 * loop 30:eval_treeinsert_bb17_in(V_wordlen,V__cbench_print,V__cantexpand,V__hcount,V__pershsize,V__newwords,V_7,V_i_1,B,C,D,E,F,G,H) -> [eval_treeinsert_bb17_in(V_wordlen',V__cbench_print',V__cantexpand',V__hcount',V__pershsize',V__newwords',V_7',V_i_1',B',C',D',E',F',G',H')] 
1*s(5)+0
#### Cost of phase [30]:eval_treeinsert_bb17_in(V_wordlen,V__cbench_print,V__cantexpand,V__hcount,V__pershsize,V__newwords,V_7,V_i_1,B,C,D,E,F,G,H) -> [eval_treeinsert_bb17_in(V_wordlen',V__cbench_print',V__cantexpand',V__hcount',V__pershsize',V__newwords',V_7',V_i_1',B',C',D',E',F',G',H')] 
1*s(6)+0
#### Cost of phase [30]:eval_treeinsert_bb17_in(V_wordlen,V__cbench_print,V__cantexpand,V__hcount,V__pershsize,V__newwords,V_7,V_i_1,B,C,D,E,F,G,H) -> [eval_treeinsert_bb17_in(V_wordlen',V__cbench_print',V__cantexpand',V__hcount',V__pershsize',V__newwords',V_7',V_i_1',B',C',D',E',F',G',H')] 
1*s(6)+0
#### Cost of phase [30]:eval_treeinsert_bb17_in(V_wordlen,V__cbench_print,V__cantexpand,V__hcount,V__pershsize,V__newwords,V_7,V_i_1,B,C,D,E,F,G,H) -> [eval_treeinsert_bb17_in(V_wordlen',V__cbench_print',V__cantexpand',V__hcount',V__pershsize',V__newwords',V_7',V_i_1',B',C',D',E',F',G',H')] 
1*s(6)+0
#### Cost of chains of eval_treeinsert_bb17_in(V_wordlen,V__cbench_print,V__cantexpand,V__hcount,V__pershsize,V__newwords,V_7,V_i_1,B,C,D,E,F,G,H):
* Chain [[30],33]: 1*s(6)+0
  with precondition: [B=4,V_wordlen=C,V_i_1>=0,V_7>=V_i_1+1] 

* Chain [[30],32]: 1*s(6)+0
  with precondition: [B=5,V_wordlen=C,V_i_1>=0,V_7>=V_i_1+1] 

* Chain [[30],31]...: 2*s(6)+2
  with precondition: [V_i_1>=0,V_7>=V_i_1+2] 

* Chain [33]: 0
  with precondition: [B=4,C=V_wordlen,D=V__cbench_print,E=V__cantexpand,F=V__hcount,G=V__pershsize,H=V__newwords,V_i_1>=0,V_i_1>=V_7] 

* Chain [32]: 0
  with precondition: [B=5,C=V_wordlen,D=V__cbench_print,E=V__cantexpand,F=V__hcount,G=V__pershsize,H=V__newwords,V_i_1>=0,V_i_1>=V_7] 

* Chain [31]...: 1*s(7)+2
  with precondition: [V_i_1>=0,V_7>=V_i_1+1] 


#### Cost of chains of loop_cont_eval_treeinsert_bb17_in(J,A,B,C,D,E,F,G):
* Chain [35]: 0
  with precondition: [J=4] 

* Chain [34]: 0
  with precondition: [J=5] 


#### Cost of chains of eval_treeinsert_32(V_wordlen,V__cbench_print,V__cantexpand,V__hcount,V__pershsize,V__newwords,V_7,B):
* Chain [37]: 1*aux(3)+0
  with precondition: [] 

* Chain [36]...: 1*aux(4)+0
  with precondition: [V_7>=1] 


#### Cost of chains of eval_treeinsert_bb6_in(V_wordlen,V__cbench_print,V__cantexpand,V__hcount,V__pershsize,V__newwords,V_7,B):
* Chain [39]: 1*s(12)+0
  with precondition: [] 

* Chain [38]...: 1*s(13)+0
  with precondition: [V_7>=1] 


#### Cost of chains of eval_treeinsert_bb0_in(V_wordlen,V__cbench_print,V__cantexpand,V__hcount,V__pershsize,V__newwords,B):
* Chain [43]: 1*aux(7)+0
  with precondition: [] 

* Chain [42]...: 1*s(23)+1*s(24)+1*s(25)+1
  Such that:s(23) =< 3
s(24) =< 4

  with precondition: [V__hcount=0,V__pershsize>=1] 

* Chain [41]...: 1*s(26)+1*s(27)+1*s(28)+1
  Such that:s(26) =< 3
s(27) =< 4

  with precondition: [0>=100*V__hcount+1,V__pershsize>=1] 

* Chain [40]...: 1*s(29)+1*s(30)+1*s(31)+1
  Such that:s(29) =< 3
s(30) =< 4

  with precondition: [V__pershsize>=1,100*V__hcount>=1] 


#### Cost of chains of eval_treeinsert_start(V_wordlen,V_keep,V__cbench_print,V__cantexpand,V__hcount,V__pershsize,V__newwords,B):
* Chain [47]: 1*s(32)+0
  with precondition: [] 

* Chain [46]...: 1*s(33)+1*s(34)+1*s(35)+1
  Such that:s(33) =< 3
s(34) =< 4

  with precondition: [V__hcount=0,V__pershsize>=1] 

* Chain [45]...: 1*s(36)+1*s(37)+1*s(38)+1
  Such that:s(36) =< 3
s(37) =< 4

  with precondition: [0>=100*V__hcount+1,V__pershsize>=1] 

* Chain [44]...: 1*s(39)+1*s(40)+1*s(41)+1
  Such that:s(39) =< 3
s(40) =< 4

  with precondition: [V__pershsize>=1,100*V__hcount>=1] 


Closed-form bounds of eval_treeinsert_start(V_wordlen,V_keep,V__cbench_print,V__cantexpand,V__hcount,V__pershsize,V__newwords,B): 
-------------------------------------
* Chain [47] with precondition: [] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [46]... with precondition: [V__hcount=0,V__pershsize>=1] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [45]... with precondition: [0>=100*V__hcount+1,V__pershsize>=1] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [44]... with precondition: [V__pershsize>=1,100*V__hcount>=1] 
    - Upper bound: inf 
    - Complexity: infinity 

### Maximum cost of eval_treeinsert_start(V_wordlen,V_keep,V__cbench_print,V__cantexpand,V__hcount,V__pershsize,V__newwords,B): inf 
Asymptotic class: infinity 

Time statistics: 
-------------------------------------
* Partial evaluation computed in 127 ms.
* Invariants computed in 63 ms.
   - Backward Invariants 37 ms.
   - Transitive Invariants 11 ms.
* Refinement performed in 152 ms.
* Termination proved in 12 ms.
* Upper bounds computed in 94 ms.
   - Equation cost structures 50 ms.
   - Phase cost structures 19 ms.
   - Chain cost structures 28 ms.
   - Solving cost expressions 0 ms.
* Total analysis performed in 554 ms.


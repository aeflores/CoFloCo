Warning: Ignored call to eval_alloc_char_in_chunk_stop/1 in equation eval_alloc_char_in_chunk_bb10_in/1 

Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. recursive  : [eval_alloc_char_in_chunk_bb5_in/7]
1. recursive  : [eval_alloc_char_in_chunk_0/2,eval_alloc_char_in_chunk_1/3,eval_alloc_char_in_chunk_15/4,eval_alloc_char_in_chunk_16/4,eval_alloc_char_in_chunk_17/3,eval_alloc_char_in_chunk_18/3,eval_alloc_char_in_chunk_bb1_in/2,eval_alloc_char_in_chunk_bb8_in/3,loop_cont_eval_alloc_char_in_chunk_bb5_in/5]
2. non_recursive  : [eval_alloc_char_in_chunk_bb10_in/1]
3. non_recursive  : [loop_cont_eval_alloc_char_in_chunk_bb1_in/2]
4. non_recursive  : [eval_alloc_char_in_chunk_bb0_in/2]
5. non_recursive  : [eval_alloc_char_in_chunk_start/2]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into eval_alloc_char_in_chunk_bb5_in/7
1. SCC is partially evaluated into eval_alloc_char_in_chunk_bb1_in/2
2. SCC is completely evaluated into other SCCs
3. SCC is completely evaluated into other SCCs
4. SCC is partially evaluated into eval_alloc_char_in_chunk_bb0_in/2
5. SCC is partially evaluated into eval_alloc_char_in_chunk_start/2

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations eval_alloc_char_in_chunk_bb5_in/7 
* CE 8 is refined into CE [9] 
* CE 7 is refined into CE [10] 


#### Refined cost equations eval_alloc_char_in_chunk_bb5_in/7 
* CE 9: eval_alloc_char_in_chunk_bb5_in(A,B,C,D,A,B,C) = 0
     [0>=B+1,D=2] 
* CE 10: eval_alloc_char_in_chunk_bb5_in(V_icdsize,V_9,V_chi_0,B,C,D,E) = 1+ eval_alloc_char_in_chunk_bb5_in(V_icdsize,V_9,F,G,C,D,E)
     [0>=V_9+1,F=V_chi_0+1,G=2,B=2] 

### Cost equations --> "Loop" of eval_alloc_char_in_chunk_bb5_in/7 
* CEs [10] --> Loop 7 
* CEs [9] --> Loop 8 

#### Loops of eval_alloc_char_in_chunk_bb5_in/7 
* Loop 7: eval_alloc_char_in_chunk_bb5_in(V_icdsize,V_9,V_chi_0,B,C,D,E)->  eval_alloc_char_in_chunk_bb5_in(V_icdsize,V_9,V_chi_0',B',C,D,E)
                  [0>=V_9+1,V_chi_0+1=V_chi_0',B'=2,B=2] 
* Loop 8: eval_alloc_char_in_chunk_bb5_in(A,B,C,D,A,B,C) [0>=B+1,D=2] 

### Ranking functions of CR eval_alloc_char_in_chunk_bb5_in(V_icdsize,V_9,V_chi_0,B,C,D,E) 

#### Partial ranking functions of CR eval_alloc_char_in_chunk_bb5_in(V_icdsize,V_9,V_chi_0,B,C,D,E) 


### Resulting Chains:eval_alloc_char_in_chunk_bb5_in(V_icdsize,V_9,V_chi_0,B,C,D,E) 
* [[7]]...
* [[7],8]
* [8]


### Merging Chains  eval_alloc_char_in_chunk_bb5_in/7 into  External patterns of execution 
* [[8]] --> 1 
* [[8,[7]]] --> 2 
* [[[7]]] --> 3 


### Specialization of cost equations eval_alloc_char_in_chunk_bb1_in/2 
* CE 5 is refined into CE [11] 
* CE 6 is refined into CE [12,13,14] 
* CE 4 is refined into CE [15] 


#### Refined cost equations eval_alloc_char_in_chunk_bb1_in/2 
* CE 11: eval_alloc_char_in_chunk_bb1_in(V_icdsize,B) = 1+ eval_alloc_char_in_chunk_bb1_in(V_icdsize,C)
     [C=3,B=3] 
* CE 12: eval_alloc_char_in_chunk_bb1_in(V_icdsize,B) = 2+ eval_alloc_char_in_chunk_bb5_in(V_icdsize,C,D,E,V_icdsize,C,D):1+ eval_alloc_char_in_chunk_bb1_in(V_icdsize,F)
     [0>=C+1,F=3,E=2,B=3] 
* CE 13: eval_alloc_char_in_chunk_bb1_in(V_icdsize,B) = 2+ eval_alloc_char_in_chunk_bb5_in(V_icdsize,C,D,E,V_icdsize,C,F):2+ eval_alloc_char_in_chunk_bb1_in(V_icdsize,G)
     [F>=D+1,0>=C+1,G=3,E=2,B=3] 
* CE 14: eval_alloc_char_in_chunk_bb1_in(V_icdsize,B) = 2+ eval_alloc_char_in_chunk_bb5_in(V_icdsize,C,D,E,F,G,H):3
     [0>=C+1,I=3,E=2,B=3] 
* CE 15: eval_alloc_char_in_chunk_bb1_in(V_icdsize,B) = 0
     [B=3] 

### Cost equations --> "Loop" of eval_alloc_char_in_chunk_bb1_in/2 
* CEs [15] --> Loop 9 
* CEs [14] --> Loop 10 
* CEs [11,12,13] --> Loop 11 

#### Loops of eval_alloc_char_in_chunk_bb1_in/2 
* Loop 9: eval_alloc_char_in_chunk_bb1_in(V_icdsize,B) [B=3] 
* Loop 10: eval_alloc_char_in_chunk_bb1_in(V_icdsize,B) [B=3] 
* Loop 11: eval_alloc_char_in_chunk_bb1_in(V_icdsize,B)->  eval_alloc_char_in_chunk_bb1_in(V_icdsize,B')
                  [B'=3,B=3] 

### Ranking functions of CR eval_alloc_char_in_chunk_bb1_in(V_icdsize,B) 

#### Partial ranking functions of CR eval_alloc_char_in_chunk_bb1_in(V_icdsize,B) 


### Resulting Chains:eval_alloc_char_in_chunk_bb1_in(V_icdsize,B) 
* [[11]]...
* [[11],10]...
* [[11],9]
* [10]...
* [9]


### Merging Chains  eval_alloc_char_in_chunk_bb1_in/2 into  External patterns of execution 
* [[9],[9,[11]]] --> 1 
* [[10],[[11]],[10,[11]]] --> 2 


### Specialization of cost equations eval_alloc_char_in_chunk_bb0_in/2 
* CE 3 is refined into CE [16,17] 


#### Refined cost equations eval_alloc_char_in_chunk_bb0_in/2 
* CE 16: eval_alloc_char_in_chunk_bb0_in(V_icdsize,B) = 1+ eval_alloc_char_in_chunk_bb1_in(V_icdsize,C):1
     [C=3] 
* CE 17: eval_alloc_char_in_chunk_bb0_in(V_icdsize,B) = 1+ eval_alloc_char_in_chunk_bb1_in(V_icdsize,C):2
     [C=3] 

### Cost equations --> "Loop" of eval_alloc_char_in_chunk_bb0_in/2 
* CEs [17] --> Loop 12 
* CEs [16] --> Loop 13 

#### Loops of eval_alloc_char_in_chunk_bb0_in/2 
* Loop 12: eval_alloc_char_in_chunk_bb0_in(V_icdsize,B) [] 
* Loop 13: eval_alloc_char_in_chunk_bb0_in(V_icdsize,B) [] 

### Ranking functions of CR eval_alloc_char_in_chunk_bb0_in(V_icdsize,B) 

#### Partial ranking functions of CR eval_alloc_char_in_chunk_bb0_in(V_icdsize,B) 


### Resulting Chains:eval_alloc_char_in_chunk_bb0_in(V_icdsize,B) 
* [13]
* [12]...


### Merging Chains  eval_alloc_char_in_chunk_bb0_in/2 into  External patterns of execution 
* [[13]] --> 1 
* [[12]] --> 2 


### Specialization of cost equations eval_alloc_char_in_chunk_start/2 
* CE 2 is refined into CE [18,19] 


#### Refined cost equations eval_alloc_char_in_chunk_start/2 
* CE 18: eval_alloc_char_in_chunk_start(V_icdsize,B) = 0+ eval_alloc_char_in_chunk_bb0_in(V_icdsize,B):1
     [] 
* CE 19: eval_alloc_char_in_chunk_start(V_icdsize,B) = 0+ eval_alloc_char_in_chunk_bb0_in(V_icdsize,B):2
     [] 

### Cost equations --> "Loop" of eval_alloc_char_in_chunk_start/2 
* CEs [19] --> Loop 14 
* CEs [18] --> Loop 15 

#### Loops of eval_alloc_char_in_chunk_start/2 
* Loop 14: eval_alloc_char_in_chunk_start(V_icdsize,B) [] 
* Loop 15: eval_alloc_char_in_chunk_start(V_icdsize,B) [] 

### Ranking functions of CR eval_alloc_char_in_chunk_start(V_icdsize,B) 

#### Partial ranking functions of CR eval_alloc_char_in_chunk_start(V_icdsize,B) 


### Resulting Chains:eval_alloc_char_in_chunk_start(V_icdsize,B) 
* [15]
* [14]...


### Merging Chains  eval_alloc_char_in_chunk_start/2 into  External patterns of execution 
* [[15]] --> 1 
* [[14]] --> 2 


Computing Bounds
=====================================

#### Cost of loops [7] 

 * loop 7:eval_alloc_char_in_chunk_bb5_in(V_icdsize,V_9,V_chi_0,B,C,D,E) -> [eval_alloc_char_in_chunk_bb5_in(V_icdsize',V_9',V_chi_0',B',C',D',E')] 
1
#### Cost of phase [7]:eval_alloc_char_in_chunk_bb5_in(V_icdsize,V_9,V_chi_0,B,C,D,E) -> [eval_alloc_char_in_chunk_bb5_in(V_icdsize',V_9',V_chi_0',B',C',D',E')] 
1*it(7)+0
#### Cost of phase [7]:eval_alloc_char_in_chunk_bb5_in(V_icdsize,V_9,V_chi_0,B,C,D,E) -> [eval_alloc_char_in_chunk_bb5_in(V_icdsize',V_9',V_chi_0',B',C',D',E')] 
1*it(7)+0
#### Cost of chains of eval_alloc_char_in_chunk_bb5_in(V_icdsize,V_9,V_chi_0,B,C,D,E):
* Chain [[7]]...: 1*it(7)+0
  with precondition: [0>=V_9+1,B=2] 

* Chain [[7],8]: 1*it(7)+0
  with precondition: [B=2,V_icdsize=C,V_9=D,0>=V_9+1,E>=V_chi_0+1] 

* Chain [8]: 0
  with precondition: [B=2,C=V_icdsize,E=V_chi_0,V_9=D,0>=V_9+1] 


#### Cost of loops [11] 

 * loop 11:eval_alloc_char_in_chunk_bb1_in(V_icdsize,B) -> [eval_alloc_char_in_chunk_bb1_in(V_icdsize',B')] 
1*s(2)+0
#### Cost of phase [11]:eval_alloc_char_in_chunk_bb1_in(V_icdsize,B) -> [eval_alloc_char_in_chunk_bb1_in(V_icdsize',B')] 
1*s(3)+0
#### Cost of phase [11]:eval_alloc_char_in_chunk_bb1_in(V_icdsize,B) -> [eval_alloc_char_in_chunk_bb1_in(V_icdsize',B')] 
1*s(3)+0
#### Cost of phase [11]:eval_alloc_char_in_chunk_bb1_in(V_icdsize,B) -> [eval_alloc_char_in_chunk_bb1_in(V_icdsize',B')] 
1*s(3)+0
#### Cost of chains of eval_alloc_char_in_chunk_bb1_in(V_icdsize,B):
* Chain [[11]]...: 1*s(3)+0
  with precondition: [B=3] 

* Chain [[11],10]...: 2*s(3)+2
  with precondition: [B=3] 

* Chain [[11],9]: 1*s(3)+0
  with precondition: [B=3] 

* Chain [10]...: 1*s(4)+2
  with precondition: [B=3] 

* Chain [9]: 0
  with precondition: [B=3] 


#### Cost of chains of eval_alloc_char_in_chunk_bb0_in(V_icdsize,B):
* Chain [13]: 1*s(9)+1
  with precondition: [] 

* Chain [12]...: 1*s(10)+1
  with precondition: [] 


#### Cost of chains of eval_alloc_char_in_chunk_start(V_icdsize,B):
* Chain [15]: 1*s(11)+1
  with precondition: [] 

* Chain [14]...: 1*s(12)+1
  with precondition: [] 


Closed-form bounds of eval_alloc_char_in_chunk_start(V_icdsize,B): 
-------------------------------------
* Chain [15] with precondition: [] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [14]... with precondition: [] 
    - Upper bound: inf 
    - Complexity: infinity 

### Maximum cost of eval_alloc_char_in_chunk_start(V_icdsize,B): inf 
Asymptotic class: infinity 

Time statistics: 
-------------------------------------
* Partial evaluation computed in 11 ms.
* Invariants computed in 12 ms.
   - Backward Invariants 7 ms.
   - Transitive Invariants 2 ms.
* Refinement performed in 19 ms.
* Termination proved in 2 ms.
* Upper bounds computed in 16 ms.
   - Equation cost structures 5 ms.
   - Phase cost structures 5 ms.
   - Chain cost structures 8 ms.
   - Solving cost expressions 0 ms.
* Total analysis performed in 77 ms.


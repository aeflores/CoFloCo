Warning: Ignored call to eval_darray_delete_stop/1 in equation eval_darray_delete_26/1 
Warning: Ignored call to eval_darray_delete_stop/1 in equation eval_darray_delete_bb7_in/1 

Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. non_recursive  : [eval_darray_delete_26/1]
1. non_recursive  : [eval_darray_delete_25/1]
2. recursive  : [eval_darray_delete_16/5,eval_darray_delete_17/5,eval_darray_delete_bb3_in/3]
3. non_recursive  : [eval_darray_delete_bb7_in/1]
4. non_recursive  : [eval_darray_delete_24/1]
5. non_recursive  : [eval_darray_delete_23/2]
6. non_recursive  : [loop_cont_eval_darray_delete_bb3_in/3]
7. non_recursive  : [eval_darray_delete_1/2]
8. non_recursive  : [eval_darray_delete_0/2]
9. non_recursive  : [eval_darray_delete_bb0_in/2]
10. non_recursive  : [eval_darray_delete_start/2]

#### Obtained direct recursion through partial evaluation 
0. SCC is completely evaluated into other SCCs
1. SCC is completely evaluated into other SCCs
2. SCC is partially evaluated into eval_darray_delete_bb3_in/3
3. SCC is completely evaluated into other SCCs
4. SCC is completely evaluated into other SCCs
5. SCC is completely evaluated into other SCCs
6. SCC is completely evaluated into other SCCs
7. SCC is partially evaluated into eval_darray_delete_1/2
8. SCC is completely evaluated into other SCCs
9. SCC is completely evaluated into other SCCs
10. SCC is partially evaluated into eval_darray_delete_start/2

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations eval_darray_delete_bb3_in/3 
* CE 6 is refined into CE [7] 
* CE 5 is refined into CE [8] 


#### Refined cost equations eval_darray_delete_bb3_in/3 
* CE 7: eval_darray_delete_bb3_in(V__01,B,C) = 0
     [B=2] 
* CE 8: eval_darray_delete_bb3_in(V__01,B,C) = 1+ eval_darray_delete_bb3_in(D,E,C)
     [D=V__01+1,E=2,B=2] 

### Cost equations --> "Loop" of eval_darray_delete_bb3_in/3 
* CEs [8] --> Loop 5 
* CEs [7] --> Loop 6 

#### Loops of eval_darray_delete_bb3_in/3 
* Loop 5: eval_darray_delete_bb3_in(V__01,B,C)->  eval_darray_delete_bb3_in(V__01',B',C)
                  [V__01+1=V__01',B'=2,B=2] 
* Loop 6: eval_darray_delete_bb3_in(V__01,B,C) [B=2] 

### Ranking functions of CR eval_darray_delete_bb3_in(V__01,B,C) 

#### Partial ranking functions of CR eval_darray_delete_bb3_in(V__01,B,C) 


### Resulting Chains:eval_darray_delete_bb3_in(V__01,B,C) 
* [[5]]...
* [[5],6]
* [6]


### Merging Chains  eval_darray_delete_bb3_in/3 into  External patterns of execution 
* [[6],[6,[5]]] --> 1 
* [[[5]]] --> 2 


### Specialization of cost equations eval_darray_delete_1/2 
* CE 3 is refined into CE [9,10] 
* CE 4 is refined into CE [11] 


#### Refined cost equations eval_darray_delete_1/2 
* CE 9: eval_darray_delete_1(V_n,B) = 1+ eval_darray_delete_bb3_in(V_n,C,D):1
     [C=2] 
* CE 10: eval_darray_delete_1(V_n,B) = 1+ eval_darray_delete_bb3_in(V_n,C,D):2
     [C=2] 
* CE 11: eval_darray_delete_1(V_n,B) = 0
     [] 

### Cost equations --> "Loop" of eval_darray_delete_1/2 
* CEs [9,11] --> Loop 7 
* CEs [10] --> Loop 8 

#### Loops of eval_darray_delete_1/2 
* Loop 7: eval_darray_delete_1(V_n,B) [] 
* Loop 8: eval_darray_delete_1(V_n,B) [] 

### Ranking functions of CR eval_darray_delete_1(V_n,B) 

#### Partial ranking functions of CR eval_darray_delete_1(V_n,B) 


### Resulting Chains:eval_darray_delete_1(V_n,B) 
* [8]...
* [7]


### Merging Chains  eval_darray_delete_1/2 into  External patterns of execution 
* [[7]] --> 1 
* [[8]] --> 2 


### Specialization of cost equations eval_darray_delete_start/2 
* CE 2 is refined into CE [12,13] 


#### Refined cost equations eval_darray_delete_start/2 
* CE 12: eval_darray_delete_start(V_n,B) = 0+ eval_darray_delete_1(V_n,B):1
     [] 
* CE 13: eval_darray_delete_start(V_n,B) = 0+ eval_darray_delete_1(V_n,B):2
     [] 

### Cost equations --> "Loop" of eval_darray_delete_start/2 
* CEs [13] --> Loop 9 
* CEs [12] --> Loop 10 

#### Loops of eval_darray_delete_start/2 
* Loop 9: eval_darray_delete_start(V_n,B) [] 
* Loop 10: eval_darray_delete_start(V_n,B) [] 

### Ranking functions of CR eval_darray_delete_start(V_n,B) 

#### Partial ranking functions of CR eval_darray_delete_start(V_n,B) 


### Resulting Chains:eval_darray_delete_start(V_n,B) 
* [10]
* [9]...


### Merging Chains  eval_darray_delete_start/2 into  External patterns of execution 
* [[10]] --> 1 
* [[9]] --> 2 


Computing Bounds
=====================================

#### Cost of loops [5] 

 * loop 5:eval_darray_delete_bb3_in(V__01,B,C) -> [eval_darray_delete_bb3_in(V__01',B',C')] 
1
#### Cost of phase [5]:eval_darray_delete_bb3_in(V__01,B,C) -> [eval_darray_delete_bb3_in(V__01',B',C')] 
1*it(5)+0
#### Cost of phase [5]:eval_darray_delete_bb3_in(V__01,B,C) -> [eval_darray_delete_bb3_in(V__01',B',C')] 
1*it(5)+0
#### Cost of chains of eval_darray_delete_bb3_in(V__01,B,C):
* Chain [[5]]...: 1*it(5)+0
  with precondition: [B=2] 

* Chain [[5],6]: 1*it(5)+0
  with precondition: [B=2] 

* Chain [6]: 0
  with precondition: [B=2] 


#### Cost of chains of eval_darray_delete_1(V_n,B):
* Chain [8]...: 1*s(2)+1
  with precondition: [] 

* Chain [7]: 1*aux(2)+0
  with precondition: [] 


#### Cost of chains of eval_darray_delete_start(V_n,B):
* Chain [10]: 1*s(4)+0
  with precondition: [] 

* Chain [9]...: 1*s(5)+1
  with precondition: [] 


Closed-form bounds of eval_darray_delete_start(V_n,B): 
-------------------------------------
* Chain [10] with precondition: [] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [9]... with precondition: [] 
    - Upper bound: inf 
    - Complexity: infinity 

### Maximum cost of eval_darray_delete_start(V_n,B): inf 
Asymptotic class: infinity 

Time statistics: 
-------------------------------------
* Partial evaluation computed in 17 ms.
* Invariants computed in 12 ms.
   - Backward Invariants 5 ms.
   - Transitive Invariants 4 ms.
* Refinement performed in 21 ms.
* Termination proved in 3 ms.
* Upper bounds computed in 18 ms.
   - Equation cost structures 6 ms.
   - Phase cost structures 6 ms.
   - Chain cost structures 6 ms.
   - Solving cost expressions 1 ms.
* Total analysis performed in 103 ms.


Warning: Ignored call to eval_alloc_small_stop/1 in equation eval_alloc_small_bb20_in/1 

Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. recursive  : [eval_alloc_small_bb7_in/3]
1. recursive  : [eval_alloc_small_29/4,eval_alloc_small_30/4,eval_alloc_small_47/5,eval_alloc_small_48/5,eval_alloc_small_bb14_in/3]
2. non_recursive  : [eval_alloc_small_bb20_in/1]
3. non_recursive  : [loop_cont_eval_alloc_small_bb14_in/2]
4. non_recursive  : [eval_alloc_small_bb13_in/3]
5. non_recursive  : [eval_alloc_small_bb10_in/2]
6. non_recursive  : [loop_cont_eval_alloc_small_bb7_in/3]
7. non_recursive  : [eval_alloc_small_bb6_in/2]
8. non_recursive  : [eval_alloc_small_10/2]
9. non_recursive  : [eval_alloc_small_9/2]
10. non_recursive  : [eval_alloc_small_bb4_in/2]
11. non_recursive  : [eval_alloc_small_bb2_in/2]
12. non_recursive  : [eval_alloc_small_1/2]
13. non_recursive  : [eval_alloc_small_0/2]
14. non_recursive  : [eval_alloc_small_bb0_in/2]
15. non_recursive  : [eval_alloc_small_start/3]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into eval_alloc_small_bb7_in/3
1. SCC is partially evaluated into eval_alloc_small_bb14_in/3
2. SCC is completely evaluated into other SCCs
3. SCC is completely evaluated into other SCCs
4. SCC is partially evaluated into eval_alloc_small_bb13_in/3
5. SCC is completely evaluated into other SCCs
6. SCC is partially evaluated into loop_cont_eval_alloc_small_bb7_in/3
7. SCC is partially evaluated into eval_alloc_small_bb6_in/2
8. SCC is completely evaluated into other SCCs
9. SCC is completely evaluated into other SCCs
10. SCC is partially evaluated into eval_alloc_small_bb4_in/2
11. SCC is partially evaluated into eval_alloc_small_bb2_in/2
12. SCC is completely evaluated into other SCCs
13. SCC is completely evaluated into other SCCs
14. SCC is partially evaluated into eval_alloc_small_bb0_in/2
15. SCC is partially evaluated into eval_alloc_small_start/3

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations eval_alloc_small_bb7_in/3 
* CE 14 is refined into CE [23] 
* CE 13 is refined into CE [24] 
* CE 12 is refined into CE [25] 


#### Refined cost equations eval_alloc_small_bb7_in/3 
* CE 23: eval_alloc_small_bb7_in(V__0,B,C) = 1+ eval_alloc_small_bb7_in(V__0,B,C)
     [] 
* CE 24: eval_alloc_small_bb7_in(V__0,B,C) = 0
     [B=3] 
* CE 25: eval_alloc_small_bb7_in(A,B,A) = 0
     [B=2] 

### Cost equations --> "Loop" of eval_alloc_small_bb7_in/3 
* CEs [24] --> Loop 18 
* CEs [25] --> Loop 19 
* CEs [23] --> Loop 20 

#### Loops of eval_alloc_small_bb7_in/3 
* Loop 18: eval_alloc_small_bb7_in(V__0,B,C) [B=3] 
* Loop 19: eval_alloc_small_bb7_in(A,B,A) [B=2] 
* Loop 20: eval_alloc_small_bb7_in(V__0,B,C)->  eval_alloc_small_bb7_in(V__0,B,C)
                  [] 

### Ranking functions of CR eval_alloc_small_bb7_in(V__0,B,C) 

#### Partial ranking functions of CR eval_alloc_small_bb7_in(V__0,B,C) 


### Resulting Chains:eval_alloc_small_bb7_in(V__0,B,C) 
* [[20]]...
* [[20],19]
* [[20],18]
* [19]
* [18]


### Merging Chains  eval_alloc_small_bb7_in/3 into  External patterns of execution 
* [[19],[19,[20]]] --> 1 
* [[18],[18,[20]]] --> 2 
* [[[20]]] --> 3 


### Specialization of cost equations eval_alloc_small_bb14_in/3 
* CE 22 is refined into CE [26] 
* CE 20 is refined into CE [27] 
* CE 19 is refined into CE [28] 
* CE 21 is refined into CE [29] 


#### Refined cost equations eval_alloc_small_bb14_in/3 
* CE 26: eval_alloc_small_bb14_in(V_32,V_slop_2,B) = 0
     [B=3] 
* CE 27: eval_alloc_small_bb14_in(V_32,V_slop_2,B) = 1+ eval_alloc_small_bb14_in(V_32,C,D)
     [2*C+1>=V_slop_2,V_slop_2>=2*C,V_slop_2>=1,D=3,B=3] 
* CE 28: eval_alloc_small_bb14_in(V_32,V_slop_2,B) = 1+ eval_alloc_small_bb14_in(V_32,C,D)
     [2*C>=V_slop_2,V_slop_2+1>=2*C,0>=V_slop_2+1,D=3,B=3] 
* CE 29: eval_alloc_small_bb14_in(V_32,V_slop_2,B) = 1+ eval_alloc_small_bb14_in(V_32,C,D)
     [D=3,C=0,B=3,V_slop_2=0] 

### Cost equations --> "Loop" of eval_alloc_small_bb14_in/3 
* CEs [27] --> Loop 21 
* CEs [28] --> Loop 22 
* CEs [29] --> Loop 23 
* CEs [26] --> Loop 24 

#### Loops of eval_alloc_small_bb14_in/3 
* Loop 21: eval_alloc_small_bb14_in(V_32,V_slop_2,B)->  eval_alloc_small_bb14_in(V_32,V_slop_2',B')
                  [2*V_slop_2'+1>=V_slop_2,V_slop_2>=2*V_slop_2',V_slop_2>=1,B'=3,B=3] 
* Loop 22: eval_alloc_small_bb14_in(V_32,V_slop_2,B)->  eval_alloc_small_bb14_in(V_32,V_slop_2',B')
                  [2*V_slop_2'>=V_slop_2,V_slop_2+1>=2*V_slop_2',0>=V_slop_2+1,B'=3,B=3] 
* Loop 23: eval_alloc_small_bb14_in(V_32,V_slop_2,B)->  eval_alloc_small_bb14_in(V_32,V_slop_2',B')
                  [B'=3,V_slop_2'=0,B=3,V_slop_2=0] 
* Loop 24: eval_alloc_small_bb14_in(V_32,V_slop_2,B) [B=3] 

### Ranking functions of CR eval_alloc_small_bb14_in(V_32,V_slop_2,B) 
* RF of phase [21]: [2*V_slop_2-1]
* RF of phase [22]: [-2*V_slop_2-1]

#### Partial ranking functions of CR eval_alloc_small_bb14_in(V_32,V_slop_2,B) 
* Partial RF of phase [21]:
  - RF of loop [21:1]:
    2*V_slop_2-1
* Partial RF of phase [22]:
  - RF of loop [22:1]:
    -2*V_slop_2-1


### Resulting Chains:eval_alloc_small_bb14_in(V_32,V_slop_2,B) 
* [[23]]...
* [[23],24]
* [[22],[23]]...
* [[22],[23],24]
* [[22],24]
* [[21],[23]]...
* [[21],[23],24]
* [[21],24]
* [24]


### Merging Chains  eval_alloc_small_bb14_in/3 into  External patterns of execution 
* [[24],[24,[21]],[24,[23],[21]],[24,[22]],[24,[23],[22]],[24,[23]]] --> 1 
* [[[23]]] --> 2 
* [[[23],[22]]] --> 3 
* [[[23],[21]]] --> 4 


### Specialization of cost equations eval_alloc_small_bb13_in/3 
* CE 17 is refined into CE [30,31,32,33] 
* CE 18 is refined into CE [34,35,36,37] 


#### Refined cost equations eval_alloc_small_bb13_in/3 
* CE 30: eval_alloc_small_bb13_in(V_32,V_slop_0,B) = 1+ eval_alloc_small_bb14_in(V_32,C,D):1
     [V_32+C=1000000000,D=3] 
* CE 31: eval_alloc_small_bb13_in(V_32,V_slop_0,B) = 1+ eval_alloc_small_bb14_in(C,D,E):2
     [E=3,D=0,C=1000000000,V_32=1000000000] 
* CE 32: eval_alloc_small_bb13_in(V_32,V_slop_0,B) = 1+ eval_alloc_small_bb14_in(C,D,E):3
     [0>=D+1,C+D=1000000000,V_32+D=1000000000,E=3] 
* CE 33: eval_alloc_small_bb13_in(V_32,V_slop_0,B) = 1+ eval_alloc_small_bb14_in(C,D,E):4
     [D>=1,C+D=1000000000,V_32+D=1000000000,E=3] 
* CE 34: eval_alloc_small_bb13_in(V_32,V_slop_0,B) = 1+ eval_alloc_small_bb14_in(V_32,V_slop_0,C):1
     [C=3] 
* CE 35: eval_alloc_small_bb13_in(V_32,V_slop_0,B) = 1+ eval_alloc_small_bb14_in(V_32,C,D):2
     [D=3,C=0,V_slop_0=0] 
* CE 36: eval_alloc_small_bb13_in(V_32,V_slop_0,B) = 1+ eval_alloc_small_bb14_in(V_32,V_slop_0,C):3
     [0>=V_slop_0+1,C=3] 
* CE 37: eval_alloc_small_bb13_in(V_32,V_slop_0,B) = 1+ eval_alloc_small_bb14_in(V_32,V_slop_0,C):4
     [V_slop_0>=1,C=3] 

### Cost equations --> "Loop" of eval_alloc_small_bb13_in/3 
* CEs [37] --> Loop 25 
* CEs [32] --> Loop 26 
* CEs [36] --> Loop 27 
* CEs [33] --> Loop 28 
* CEs [35] --> Loop 29 
* CEs [31] --> Loop 30 
* CEs [30,34] --> Loop 31 

#### Loops of eval_alloc_small_bb13_in/3 
* Loop 25: eval_alloc_small_bb13_in(V_32,V_slop_0,B) [V_slop_0>=1] 
* Loop 26: eval_alloc_small_bb13_in(V_32,V_slop_0,B) [V_32>=1000000001] 
* Loop 27: eval_alloc_small_bb13_in(V_32,V_slop_0,B) [0>=V_slop_0+1] 
* Loop 28: eval_alloc_small_bb13_in(V_32,V_slop_0,B) [999999999>=V_32] 
* Loop 29: eval_alloc_small_bb13_in(V_32,V_slop_0,B) [V_slop_0=0] 
* Loop 30: eval_alloc_small_bb13_in(V_32,V_slop_0,B) [V_32=1000000000] 
* Loop 31: eval_alloc_small_bb13_in(V_32,V_slop_0,B) [] 

### Ranking functions of CR eval_alloc_small_bb13_in(V_32,V_slop_0,B) 

#### Partial ranking functions of CR eval_alloc_small_bb13_in(V_32,V_slop_0,B) 


### Resulting Chains:eval_alloc_small_bb13_in(V_32,V_slop_0,B) 
* [31]
* [30]...
* [29]...
* [28]...
* [27]...
* [26]...
* [25]...


### Merging Chains  eval_alloc_small_bb13_in/3 into  External patterns of execution 
* [[31]] --> 1 
* [[30]] --> 2 
* [[29]] --> 3 
* [[28]] --> 4 
* [[27]] --> 5 
* [[26]] --> 6 
* [[25]] --> 7 


### Specialization of cost equations loop_cont_eval_alloc_small_bb7_in/3 
* CE 16 is refined into CE [38] 
* CE 15 is refined into CE [39,40,41,42,43,44,45] 


#### Refined cost equations loop_cont_eval_alloc_small_bb7_in/3 
* CE 38: loop_cont_eval_alloc_small_bb7_in(C,A,B) = 0
     [C=3] 
* CE 39: loop_cont_eval_alloc_small_bb7_in(C,A,B) = 0+ eval_alloc_small_bb13_in(D,E,B):1
     [D=A+24,C=2] 
* CE 40: loop_cont_eval_alloc_small_bb7_in(C,A,B) = 0+ eval_alloc_small_bb13_in(D,E,B):2
     [D=1000000000,A=999999976,C=2] 
* CE 41: loop_cont_eval_alloc_small_bb7_in(C,A,B) = 0+ eval_alloc_small_bb13_in(D,E,B):3
     [D=A+24,E=0,C=2] 
* CE 42: loop_cont_eval_alloc_small_bb7_in(C,A,B) = 0+ eval_alloc_small_bb13_in(D,E,B):4
     [999999999>=D,D=A+24,C=2] 
* CE 43: loop_cont_eval_alloc_small_bb7_in(C,A,B) = 0+ eval_alloc_small_bb13_in(D,E,B):5
     [0>=E+1,D=A+24,C=2] 
* CE 44: loop_cont_eval_alloc_small_bb7_in(C,A,B) = 0+ eval_alloc_small_bb13_in(D,E,B):6
     [D>=1000000001,D=A+24,C=2] 
* CE 45: loop_cont_eval_alloc_small_bb7_in(C,A,B) = 0+ eval_alloc_small_bb13_in(D,E,B):7
     [E>=1,D=A+24,C=2] 

### Cost equations --> "Loop" of loop_cont_eval_alloc_small_bb7_in/3 
* CEs [40,41,42,43,44,45] --> Loop 32 
* CEs [38] --> Loop 33 
* CEs [39] --> Loop 34 

#### Loops of loop_cont_eval_alloc_small_bb7_in/3 
* Loop 32: loop_cont_eval_alloc_small_bb7_in(C,A,B) [C=2] 
* Loop 33: loop_cont_eval_alloc_small_bb7_in(C,A,B) [C=3] 
* Loop 34: loop_cont_eval_alloc_small_bb7_in(C,A,B) [C=2] 

### Ranking functions of CR loop_cont_eval_alloc_small_bb7_in(C,A,B) 

#### Partial ranking functions of CR loop_cont_eval_alloc_small_bb7_in(C,A,B) 


### Resulting Chains:loop_cont_eval_alloc_small_bb7_in(C,A,B) 
* [34]
* [33]
* [32]...


### Merging Chains  loop_cont_eval_alloc_small_bb7_in/3 into  External patterns of execution 
* [[34]] --> 1 
* [[33]] --> 2 
* [[32]] --> 3 


### Specialization of cost equations eval_alloc_small_bb6_in/2 
* CE 11 is refined into CE [46,47,48,49] 


#### Refined cost equations eval_alloc_small_bb6_in/2 
* CE 46: eval_alloc_small_bb6_in(V__0,B) = 1+ eval_alloc_small_bb7_in(V__0,C,V__0):1+ loop_cont_eval_alloc_small_bb7_in(D,V__0,B):1
     [D=2,C=2] 
* CE 47: eval_alloc_small_bb6_in(V__0,B) = 1+ eval_alloc_small_bb7_in(V__0,C,V__0):1+ loop_cont_eval_alloc_small_bb7_in(D,V__0,B):3
     [D=2,C=2] 
* CE 48: eval_alloc_small_bb6_in(V__0,B) = 1+ eval_alloc_small_bb7_in(V__0,C,D):2+ loop_cont_eval_alloc_small_bb7_in(E,D,B):2
     [E=3,C=3] 
* CE 49: eval_alloc_small_bb6_in(V__0,B) = 1+ eval_alloc_small_bb7_in(V__0,C,D):3
     [] 

### Cost equations --> "Loop" of eval_alloc_small_bb6_in/2 
* CEs [47,49] --> Loop 35 
* CEs [46,48] --> Loop 36 

#### Loops of eval_alloc_small_bb6_in/2 
* Loop 35: eval_alloc_small_bb6_in(V__0,B) [] 
* Loop 36: eval_alloc_small_bb6_in(V__0,B) [] 

### Ranking functions of CR eval_alloc_small_bb6_in(V__0,B) 

#### Partial ranking functions of CR eval_alloc_small_bb6_in(V__0,B) 


### Resulting Chains:eval_alloc_small_bb6_in(V__0,B) 
* [36]
* [35]...


### Merging Chains  eval_alloc_small_bb6_in/2 into  External patterns of execution 
* [[36]] --> 1 
* [[35]] --> 2 


### Specialization of cost equations eval_alloc_small_bb4_in/2 
* CE 10 is refined into CE [50,51] 


#### Refined cost equations eval_alloc_small_bb4_in/2 
* CE 50: eval_alloc_small_bb4_in(V__0,B) = 0+ eval_alloc_small_bb6_in(V__0,B):1
     [] 
* CE 51: eval_alloc_small_bb4_in(V__0,B) = 0+ eval_alloc_small_bb6_in(V__0,B):2
     [] 

### Cost equations --> "Loop" of eval_alloc_small_bb4_in/2 
* CEs [51] --> Loop 37 
* CEs [50] --> Loop 38 

#### Loops of eval_alloc_small_bb4_in/2 
* Loop 37: eval_alloc_small_bb4_in(V__0,B) [] 
* Loop 38: eval_alloc_small_bb4_in(V__0,B) [] 

### Ranking functions of CR eval_alloc_small_bb4_in(V__0,B) 

#### Partial ranking functions of CR eval_alloc_small_bb4_in(V__0,B) 


### Resulting Chains:eval_alloc_small_bb4_in(V__0,B) 
* [38]
* [37]...


### Merging Chains  eval_alloc_small_bb4_in/2 into  External patterns of execution 
* [[38]] --> 1 
* [[37]] --> 2 


### Specialization of cost equations eval_alloc_small_bb2_in/2 
* CE 5 is refined into CE [52,53] 
* CE 8 is refined into CE [54,55] 
* CE 6 is refined into CE [56,57] 
* CE 9 is refined into CE [58,59] 
* CE 4 is refined into CE [60,61] 
* CE 7 is refined into CE [62,63] 


#### Refined cost equations eval_alloc_small_bb2_in/2 
* CE 52: eval_alloc_small_bb2_in(V_sizeofobject,B) = 0+ eval_alloc_small_bb4_in(C,B):1
     [V_sizeofobject+8>=C,C>=V_sizeofobject+1,V_sizeofobject>=1] 
* CE 53: eval_alloc_small_bb2_in(V_sizeofobject,B) = 0+ eval_alloc_small_bb4_in(C,B):2
     [V_sizeofobject+8>=C,C>=V_sizeofobject+1,V_sizeofobject>=1] 
* CE 54: eval_alloc_small_bb2_in(V_sizeofobject,B) = 0+ eval_alloc_small_bb4_in(V_sizeofobject,B):1
     [V_sizeofobject>=1] 
* CE 55: eval_alloc_small_bb2_in(V_sizeofobject,B) = 0+ eval_alloc_small_bb4_in(V_sizeofobject,B):2
     [V_sizeofobject>=1] 
* CE 56: eval_alloc_small_bb2_in(V_sizeofobject,B) = 0+ eval_alloc_small_bb4_in(C,B):1
     [V_sizeofobject+15>=C,C>=V_sizeofobject+8,0>=V_sizeofobject+1] 
* CE 57: eval_alloc_small_bb2_in(V_sizeofobject,B) = 0+ eval_alloc_small_bb4_in(C,B):2
     [V_sizeofobject+15>=C,C>=V_sizeofobject+8,0>=V_sizeofobject+1] 
* CE 58: eval_alloc_small_bb2_in(V_sizeofobject,B) = 0+ eval_alloc_small_bb4_in(V_sizeofobject,B):1
     [0>=V_sizeofobject+1] 
* CE 59: eval_alloc_small_bb2_in(V_sizeofobject,B) = 0+ eval_alloc_small_bb4_in(V_sizeofobject,B):2
     [0>=V_sizeofobject+1] 
* CE 60: eval_alloc_small_bb2_in(V_sizeofobject,B) = 0+ eval_alloc_small_bb4_in(C,B):1
     [C=8,V_sizeofobject=0] 
* CE 61: eval_alloc_small_bb2_in(V_sizeofobject,B) = 0+ eval_alloc_small_bb4_in(C,B):2
     [C=8,V_sizeofobject=0] 
* CE 62: eval_alloc_small_bb2_in(V_sizeofobject,B) = 0+ eval_alloc_small_bb4_in(C,B):1
     [C=0,V_sizeofobject=0] 
* CE 63: eval_alloc_small_bb2_in(V_sizeofobject,B) = 0+ eval_alloc_small_bb4_in(C,B):2
     [C=0,V_sizeofobject=0] 

### Cost equations --> "Loop" of eval_alloc_small_bb2_in/2 
* CEs [53,55] --> Loop 39 
* CEs [57,59] --> Loop 40 
* CEs [61,63] --> Loop 41 
* CEs [52,54] --> Loop 42 
* CEs [56,58] --> Loop 43 
* CEs [60,62] --> Loop 44 

#### Loops of eval_alloc_small_bb2_in/2 
* Loop 39: eval_alloc_small_bb2_in(V_sizeofobject,B) [V_sizeofobject>=1] 
* Loop 40: eval_alloc_small_bb2_in(V_sizeofobject,B) [0>=V_sizeofobject+1] 
* Loop 41: eval_alloc_small_bb2_in(V_sizeofobject,B) [V_sizeofobject=0] 
* Loop 42: eval_alloc_small_bb2_in(V_sizeofobject,B) [V_sizeofobject>=1] 
* Loop 43: eval_alloc_small_bb2_in(V_sizeofobject,B) [0>=V_sizeofobject+1] 
* Loop 44: eval_alloc_small_bb2_in(V_sizeofobject,B) [V_sizeofobject=0] 

### Ranking functions of CR eval_alloc_small_bb2_in(V_sizeofobject,B) 

#### Partial ranking functions of CR eval_alloc_small_bb2_in(V_sizeofobject,B) 


### Resulting Chains:eval_alloc_small_bb2_in(V_sizeofobject,B) 
* [44]
* [43]
* [42]
* [41]...
* [40]...
* [39]...


### Merging Chains  eval_alloc_small_bb2_in/2 into  External patterns of execution 
* [[44]] --> 1 
* [[43]] --> 2 
* [[42]] --> 3 
* [[41]] --> 4 
* [[40]] --> 5 
* [[39]] --> 6 


### Specialization of cost equations eval_alloc_small_bb0_in/2 
* CE 3 is refined into CE [64,65,66,67,68,69] 


#### Refined cost equations eval_alloc_small_bb0_in/2 
* CE 64: eval_alloc_small_bb0_in(V_sizeofobject,B) = 0+ eval_alloc_small_bb2_in(C,B):1
     [C=0,V_sizeofobject=0] 
* CE 65: eval_alloc_small_bb0_in(V_sizeofobject,B) = 0+ eval_alloc_small_bb2_in(V_sizeofobject,B):2
     [0>=V_sizeofobject+1] 
* CE 66: eval_alloc_small_bb0_in(V_sizeofobject,B) = 0+ eval_alloc_small_bb2_in(V_sizeofobject,B):3
     [V_sizeofobject>=1] 
* CE 67: eval_alloc_small_bb0_in(V_sizeofobject,B) = 0+ eval_alloc_small_bb2_in(C,B):4
     [C=0,V_sizeofobject=0] 
* CE 68: eval_alloc_small_bb0_in(V_sizeofobject,B) = 0+ eval_alloc_small_bb2_in(V_sizeofobject,B):5
     [0>=V_sizeofobject+1] 
* CE 69: eval_alloc_small_bb0_in(V_sizeofobject,B) = 0+ eval_alloc_small_bb2_in(V_sizeofobject,B):6
     [V_sizeofobject>=1] 

### Cost equations --> "Loop" of eval_alloc_small_bb0_in/2 
* CEs [69] --> Loop 45 
* CEs [68] --> Loop 46 
* CEs [67] --> Loop 47 
* CEs [66] --> Loop 48 
* CEs [65] --> Loop 49 
* CEs [64] --> Loop 50 

#### Loops of eval_alloc_small_bb0_in/2 
* Loop 45: eval_alloc_small_bb0_in(V_sizeofobject,B) [V_sizeofobject>=1] 
* Loop 46: eval_alloc_small_bb0_in(V_sizeofobject,B) [0>=V_sizeofobject+1] 
* Loop 47: eval_alloc_small_bb0_in(V_sizeofobject,B) [V_sizeofobject=0] 
* Loop 48: eval_alloc_small_bb0_in(V_sizeofobject,B) [V_sizeofobject>=1] 
* Loop 49: eval_alloc_small_bb0_in(V_sizeofobject,B) [0>=V_sizeofobject+1] 
* Loop 50: eval_alloc_small_bb0_in(V_sizeofobject,B) [V_sizeofobject=0] 

### Ranking functions of CR eval_alloc_small_bb0_in(V_sizeofobject,B) 

#### Partial ranking functions of CR eval_alloc_small_bb0_in(V_sizeofobject,B) 


### Resulting Chains:eval_alloc_small_bb0_in(V_sizeofobject,B) 
* [50]
* [49]
* [48]
* [47]...
* [46]...
* [45]...


### Merging Chains  eval_alloc_small_bb0_in/2 into  External patterns of execution 
* [[50]] --> 1 
* [[49]] --> 2 
* [[48]] --> 3 
* [[47]] --> 4 
* [[46]] --> 5 
* [[45]] --> 6 


### Specialization of cost equations eval_alloc_small_start/3 
* CE 2 is refined into CE [70,71,72,73,74,75] 


#### Refined cost equations eval_alloc_small_start/3 
* CE 70: eval_alloc_small_start(V_pool_id,V_sizeofobject,B) = 0+ eval_alloc_small_bb0_in(C,B):1
     [C=0,V_sizeofobject=0] 
* CE 71: eval_alloc_small_start(V_pool_id,V_sizeofobject,B) = 0+ eval_alloc_small_bb0_in(V_sizeofobject,B):2
     [0>=V_sizeofobject+1] 
* CE 72: eval_alloc_small_start(V_pool_id,V_sizeofobject,B) = 0+ eval_alloc_small_bb0_in(V_sizeofobject,B):3
     [V_sizeofobject>=1] 
* CE 73: eval_alloc_small_start(V_pool_id,V_sizeofobject,B) = 0+ eval_alloc_small_bb0_in(C,B):4
     [C=0,V_sizeofobject=0] 
* CE 74: eval_alloc_small_start(V_pool_id,V_sizeofobject,B) = 0+ eval_alloc_small_bb0_in(V_sizeofobject,B):5
     [0>=V_sizeofobject+1] 
* CE 75: eval_alloc_small_start(V_pool_id,V_sizeofobject,B) = 0+ eval_alloc_small_bb0_in(V_sizeofobject,B):6
     [V_sizeofobject>=1] 

### Cost equations --> "Loop" of eval_alloc_small_start/3 
* CEs [75] --> Loop 51 
* CEs [74] --> Loop 52 
* CEs [73] --> Loop 53 
* CEs [72] --> Loop 54 
* CEs [71] --> Loop 55 
* CEs [70] --> Loop 56 

#### Loops of eval_alloc_small_start/3 
* Loop 51: eval_alloc_small_start(V_pool_id,V_sizeofobject,B) [V_sizeofobject>=1] 
* Loop 52: eval_alloc_small_start(V_pool_id,V_sizeofobject,B) [0>=V_sizeofobject+1] 
* Loop 53: eval_alloc_small_start(V_pool_id,V_sizeofobject,B) [V_sizeofobject=0] 
* Loop 54: eval_alloc_small_start(V_pool_id,V_sizeofobject,B) [V_sizeofobject>=1] 
* Loop 55: eval_alloc_small_start(V_pool_id,V_sizeofobject,B) [0>=V_sizeofobject+1] 
* Loop 56: eval_alloc_small_start(V_pool_id,V_sizeofobject,B) [V_sizeofobject=0] 

### Ranking functions of CR eval_alloc_small_start(V_pool_id,V_sizeofobject,B) 

#### Partial ranking functions of CR eval_alloc_small_start(V_pool_id,V_sizeofobject,B) 


### Resulting Chains:eval_alloc_small_start(V_pool_id,V_sizeofobject,B) 
* [56]
* [55]
* [54]
* [53]...
* [52]...
* [51]...


### Merging Chains  eval_alloc_small_start/3 into  External patterns of execution 
* [[56]] --> 1 
* [[55]] --> 2 
* [[54]] --> 3 
* [[53]] --> 4 
* [[52]] --> 5 
* [[51]] --> 6 


Computing Bounds
=====================================

#### Cost of loops [20] 

 * loop 20:eval_alloc_small_bb7_in(V__0,B,C) -> [eval_alloc_small_bb7_in(V__0',B',C')] 
1
#### Cost of phase [20]:eval_alloc_small_bb7_in(V__0,B,C) -> [eval_alloc_small_bb7_in(V__0',B',C')] 
1*it(20)+0
#### Cost of phase [20]:eval_alloc_small_bb7_in(V__0,B,C) -> [eval_alloc_small_bb7_in(V__0',B',C')] 
1*it(20)+0
#### Cost of phase [20]:eval_alloc_small_bb7_in(V__0,B,C) -> [eval_alloc_small_bb7_in(V__0',B',C')] 
1*it(20)+0
#### Cost of chains of eval_alloc_small_bb7_in(V__0,B,C):
* Chain [[20]]...: 1*it(20)+0
  with precondition: [] 

* Chain [[20],19]: 1*it(20)+0
  with precondition: [B=2,V__0=C] 

* Chain [[20],18]: 1*it(20)+0
  with precondition: [B=3] 

* Chain [19]: 0
  with precondition: [B=2,C=V__0] 

* Chain [18]: 0
  with precondition: [B=3] 


#### Cost of loops [23] 

 * loop 23:eval_alloc_small_bb14_in(V_32,V_slop_2,B) -> [eval_alloc_small_bb14_in(V_32',V_slop_2',B')] 
1
#### Cost of phase [23]:eval_alloc_small_bb14_in(V_32,V_slop_2,B) -> [eval_alloc_small_bb14_in(V_32',V_slop_2',B')] 
1*it(23)+0
#### Cost of phase [23]:eval_alloc_small_bb14_in(V_32,V_slop_2,B) -> [eval_alloc_small_bb14_in(V_32',V_slop_2',B')] 
1*it(23)+0
#### Cost of loops [22] 

 * loop 22:eval_alloc_small_bb14_in(V_32,V_slop_2,B) -> [eval_alloc_small_bb14_in(V_32',V_slop_2',B')] 
1
#### Cost of phase [22]:eval_alloc_small_bb14_in(V_32,V_slop_2,B) -> [eval_alloc_small_bb14_in(V_32',V_slop_2',B')] 
1*it(22)+0
  Such that:it(22) =< -2*V_slop_2
it(22) =< -2*V_slop_2+2*V_slop_2'

#### Cost of phase [22]:eval_alloc_small_bb14_in(V_32,V_slop_2,B) -> [eval_alloc_small_bb14_in(V_32',V_slop_2',B')] 
1*it(22)+0
  Such that:it(22) =< -2*V_slop_2
it(22) =< -2*V_slop_2+2*V_slop_2'

#### Cost of phase [22]:eval_alloc_small_bb14_in(V_32,V_slop_2,B) -> [eval_alloc_small_bb14_in(V_32',V_slop_2',B')] 
1*it(22)+0
  Such that:it(22) =< -2*V_slop_2
it(22) =< -2*V_slop_2+2*V_slop_2'

#### Cost of loops [21] 

 * loop 21:eval_alloc_small_bb14_in(V_32,V_slop_2,B) -> [eval_alloc_small_bb14_in(V_32',V_slop_2',B')] 
1
#### Cost of phase [21]:eval_alloc_small_bb14_in(V_32,V_slop_2,B) -> [eval_alloc_small_bb14_in(V_32',V_slop_2',B')] 
1*it(21)+0
  Such that:it(21) =< 2*V_slop_2
it(21) =< 2*V_slop_2-2*V_slop_2'

#### Cost of phase [21]:eval_alloc_small_bb14_in(V_32,V_slop_2,B) -> [eval_alloc_small_bb14_in(V_32',V_slop_2',B')] 
1*it(21)+0
  Such that:it(21) =< 2*V_slop_2
it(21) =< 2*V_slop_2-2*V_slop_2'

#### Cost of phase [21]:eval_alloc_small_bb14_in(V_32,V_slop_2,B) -> [eval_alloc_small_bb14_in(V_32',V_slop_2',B')] 
1*it(21)+0
  Such that:it(21) =< 2*V_slop_2
it(21) =< 2*V_slop_2-2*V_slop_2'

#### Cost of chains of eval_alloc_small_bb14_in(V_32,V_slop_2,B):
* Chain [[23]]...: 1*it(23)+0
  with precondition: [V_slop_2=0,B=3] 

* Chain [[23],24]: 1*it(23)+0
  with precondition: [V_slop_2=0,B=3] 

* Chain [[22],[23]]...: 1*it(22)+1*it(23)+0
  Such that:it(22) =< -2*V_slop_2

  with precondition: [B=3,0>=V_slop_2+1] 

* Chain [[22],[23],24]: 1*it(22)+1*it(23)+0
  Such that:it(22) =< -2*V_slop_2

  with precondition: [B=3,0>=V_slop_2+1] 

* Chain [[22],24]: 1*it(22)+0
  Such that:it(22) =< -2*V_slop_2

  with precondition: [B=3,0>=V_slop_2+1] 

* Chain [[21],[23]]...: 1*it(21)+1*it(23)+0
  Such that:it(21) =< 2*V_slop_2

  with precondition: [B=3,V_slop_2>=1] 

* Chain [[21],[23],24]: 1*it(21)+1*it(23)+0
  Such that:it(21) =< 2*V_slop_2

  with precondition: [B=3,V_slop_2>=1] 

* Chain [[21],24]: 1*it(21)+0
  Such that:it(21) =< 2*V_slop_2

  with precondition: [B=3,V_slop_2>=1] 

* Chain [24]: 0
  with precondition: [B=3] 


#### Cost of chains of eval_alloc_small_bb13_in(V_32,V_slop_0,B):
* Chain [31]: 2*s(12)+2*s(13)+6*s(14)+2*s(17)+2*s(18)+1
  Such that:s(11) =< -2*V_32+2000000000
s(10) =< 2*V_32
s(15) =< -2*V_slop_0
s(16) =< 2*V_slop_0
s(12) =< s(10)
s(13) =< s(11)
s(17) =< s(15)
s(18) =< s(16)

  with precondition: [] 

* Chain [30]...: 1*s(20)+1
  with precondition: [V_32=1000000000] 

* Chain [29]...: 1*s(21)+1
  with precondition: [V_slop_0=0] 

* Chain [28]...: 1*s(22)+1*s(23)+1
  Such that:s(22) =< -2*V_32+2000000000

  with precondition: [999999999>=V_32] 

* Chain [27]...: 1*s(24)+1*s(25)+1
  Such that:s(24) =< -2*V_slop_0

  with precondition: [0>=V_slop_0+1] 

* Chain [26]...: 1*s(26)+1*s(27)+1
  Such that:s(26) =< 2*V_32

  with precondition: [V_32>=1000000001] 

* Chain [25]...: 1*s(28)+1*s(29)+1
  Such that:s(28) =< 2*V_slop_0

  with precondition: [V_slop_0>=1] 


#### Cost of chains of loop_cont_eval_alloc_small_bb7_in(C,A,B):
* Chain [34]: 2*s(34)+2*s(35)+2*s(36)+2*s(37)+6*s(38)+1
  Such that:s(30) =< -2*A+1999999952
s(31) =< 2*A+48
s(34) =< s(31)
s(35) =< s(30)

  with precondition: [C=2] 

* Chain [33]: 0
  with precondition: [C=3] 

* Chain [32]...: 8*s(39)+1*s(41)+1*s(45)+1
  Such that:s(41) =< -2*A+1999999952
s(45) =< 2*A+48

  with precondition: [C=2] 


#### Cost of chains of eval_alloc_small_bb6_in(V__0,B):
* Chain [36]: 12*s(49)+2*s(52)+2*s(53)+2
  Such that:s(50) =< -2*V__0+1999999952
s(51) =< 2*V__0+48
s(52) =< s(51)
s(53) =< s(50)

  with precondition: [] 

* Chain [35]...: 10*s(58)+1*s(59)+1*s(60)+2
  Such that:s(59) =< -2*V__0+1999999952
s(60) =< 2*V__0+48

  with precondition: [] 


#### Cost of chains of eval_alloc_small_bb4_in(V__0,B):
* Chain [38]: 2*s(65)+2*s(66)+12*s(67)+2
  Such that:s(63) =< -2*V__0+1999999952
s(64) =< 2*V__0+48
s(65) =< s(64)
s(66) =< s(63)

  with precondition: [] 

* Chain [37]...: 1*s(68)+1*s(69)+10*s(70)+2
  Such that:s(68) =< -2*V__0+1999999952
s(69) =< 2*V__0+48

  with precondition: [] 


#### Cost of chains of eval_alloc_small_bb2_in(V_sizeofobject,B):
* Chain [44]: 1*aux(5)+0
  with precondition: [V_sizeofobject=0] 

* Chain [43]: 2*s(83)+2*s(84)+24*s(85)+2*s(88)+2*s(89)+2
  Such that:s(81) =< -2*V_sizeofobject+1999999936
s(86) =< -2*V_sizeofobject+1999999952
s(87) =< 2*V_sizeofobject+48
s(82) =< 2*V_sizeofobject+78
s(83) =< s(82)
s(84) =< s(81)
s(88) =< s(87)
s(89) =< s(86)

  with precondition: [0>=V_sizeofobject+1] 

* Chain [42]: 2*s(93)+2*s(94)+24*s(95)+2*s(98)+2*s(99)+2
  Such that:s(91) =< -2*V_sizeofobject+1999999950
s(96) =< -2*V_sizeofobject+1999999952
s(97) =< 2*V_sizeofobject+48
s(92) =< 2*V_sizeofobject+64
s(93) =< s(92)
s(94) =< s(91)
s(98) =< s(97)
s(99) =< s(96)

  with precondition: [V_sizeofobject>=1] 

* Chain [41]...: 1*aux(6)+0
  with precondition: [V_sizeofobject=0] 

* Chain [40]...: 1*s(107)+1*s(108)+20*s(109)+1*s(110)+1*s(111)+2
  Such that:s(107) =< -2*V_sizeofobject+1999999936
s(110) =< -2*V_sizeofobject+1999999952
s(111) =< 2*V_sizeofobject+48
s(108) =< 2*V_sizeofobject+78

  with precondition: [0>=V_sizeofobject+1] 

* Chain [39]...: 1*s(113)+1*s(114)+20*s(115)+1*s(116)+1*s(117)+2
  Such that:s(113) =< -2*V_sizeofobject+1999999950
s(116) =< -2*V_sizeofobject+1999999952
s(117) =< 2*V_sizeofobject+48
s(114) =< 2*V_sizeofobject+64

  with precondition: [V_sizeofobject>=1] 


#### Cost of chains of eval_alloc_small_bb0_in(V_sizeofobject,B):
* Chain [50]: 1*s(119)+0
  with precondition: [V_sizeofobject=0] 

* Chain [49]: 2*s(124)+2*s(125)+2*s(126)+2*s(127)+24*s(128)+2
  Such that:s(120) =< -2*V_sizeofobject+1999999936
s(121) =< -2*V_sizeofobject+1999999952
s(122) =< 2*V_sizeofobject+48
s(123) =< 2*V_sizeofobject+78
s(124) =< s(123)
s(125) =< s(120)
s(126) =< s(122)
s(127) =< s(121)

  with precondition: [0>=V_sizeofobject+1] 

* Chain [48]: 2*s(133)+2*s(134)+2*s(135)+2*s(136)+24*s(137)+2
  Such that:s(129) =< -2*V_sizeofobject+1999999950
s(130) =< -2*V_sizeofobject+1999999952
s(131) =< 2*V_sizeofobject+48
s(132) =< 2*V_sizeofobject+64
s(133) =< s(132)
s(134) =< s(129)
s(135) =< s(131)
s(136) =< s(130)

  with precondition: [V_sizeofobject>=1] 

* Chain [47]...: 1*s(138)+0
  with precondition: [V_sizeofobject=0] 

* Chain [46]...: 1*s(139)+1*s(140)+1*s(141)+1*s(142)+20*s(143)+2
  Such that:s(139) =< -2*V_sizeofobject+1999999936
s(140) =< -2*V_sizeofobject+1999999952
s(141) =< 2*V_sizeofobject+48
s(142) =< 2*V_sizeofobject+78

  with precondition: [0>=V_sizeofobject+1] 

* Chain [45]...: 1*s(144)+1*s(145)+1*s(146)+1*s(147)+20*s(148)+2
  Such that:s(144) =< -2*V_sizeofobject+1999999950
s(145) =< -2*V_sizeofobject+1999999952
s(146) =< 2*V_sizeofobject+48
s(147) =< 2*V_sizeofobject+64

  with precondition: [V_sizeofobject>=1] 


#### Cost of chains of eval_alloc_small_start(V_pool_id,V_sizeofobject,B):
* Chain [56]: 1*s(149)+0
  with precondition: [V_sizeofobject=0] 

* Chain [55]: 2*s(154)+2*s(155)+2*s(156)+2*s(157)+24*s(158)+2
  Such that:s(150) =< -2*V_sizeofobject+1999999936
s(151) =< -2*V_sizeofobject+1999999952
s(152) =< 2*V_sizeofobject+48
s(153) =< 2*V_sizeofobject+78
s(154) =< s(153)
s(155) =< s(150)
s(156) =< s(152)
s(157) =< s(151)

  with precondition: [0>=V_sizeofobject+1] 

* Chain [54]: 2*s(163)+2*s(164)+2*s(165)+2*s(166)+24*s(167)+2
  Such that:s(159) =< -2*V_sizeofobject+1999999950
s(160) =< -2*V_sizeofobject+1999999952
s(161) =< 2*V_sizeofobject+48
s(162) =< 2*V_sizeofobject+64
s(163) =< s(162)
s(164) =< s(159)
s(165) =< s(161)
s(166) =< s(160)

  with precondition: [V_sizeofobject>=1] 

* Chain [53]...: 1*s(168)+0
  with precondition: [V_sizeofobject=0] 

* Chain [52]...: 1*s(169)+1*s(170)+1*s(171)+1*s(172)+20*s(173)+2
  Such that:s(169) =< -2*V_sizeofobject+1999999936
s(170) =< -2*V_sizeofobject+1999999952
s(171) =< 2*V_sizeofobject+48
s(172) =< 2*V_sizeofobject+78

  with precondition: [0>=V_sizeofobject+1] 

* Chain [51]...: 1*s(174)+1*s(175)+1*s(176)+1*s(177)+20*s(178)+2
  Such that:s(174) =< -2*V_sizeofobject+1999999950
s(175) =< -2*V_sizeofobject+1999999952
s(176) =< 2*V_sizeofobject+48
s(177) =< 2*V_sizeofobject+64

  with precondition: [V_sizeofobject>=1] 


Closed-form bounds of eval_alloc_small_start(V_pool_id,V_sizeofobject,B): 
-------------------------------------
* Chain [56] with precondition: [V_sizeofobject=0] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [55] with precondition: [0>=V_sizeofobject+1] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [54] with precondition: [V_sizeofobject>=1] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [53]... with precondition: [V_sizeofobject=0] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [52]... with precondition: [0>=V_sizeofobject+1] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [51]... with precondition: [V_sizeofobject>=1] 
    - Upper bound: inf 
    - Complexity: infinity 

### Maximum cost of eval_alloc_small_start(V_pool_id,V_sizeofobject,B): inf 
Asymptotic class: infinity 

Time statistics: 
-------------------------------------
* Partial evaluation computed in 84 ms.
* Invariants computed in 91 ms.
   - Backward Invariants 49 ms.
   - Transitive Invariants 14 ms.
* Refinement performed in 191 ms.
* Termination proved in 16 ms.
* Upper bounds computed in 241 ms.
   - Equation cost structures 145 ms.
   - Phase cost structures 22 ms.
   - Chain cost structures 50 ms.
   - Solving cost expressions 6 ms.
* Total analysis performed in 722 ms.


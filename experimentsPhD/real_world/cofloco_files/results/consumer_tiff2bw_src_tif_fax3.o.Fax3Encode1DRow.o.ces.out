Warning: Ignored call to eval_Fax3Encode1DRow_stop/1 in equation eval_Fax3Encode1DRow_bb13_in/1 

Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. recursive  : [eval_Fax3Encode1DRow_0/3,eval_Fax3Encode1DRow_1/4,eval_Fax3Encode1DRow_2/4,eval_Fax3Encode1DRow_4/5,eval_Fax3Encode1DRow_5/6,eval_Fax3Encode1DRow_6/6,eval_Fax3Encode1DRow_bb1_in/3]
1. non_recursive  : [eval_Fax3Encode1DRow_bb13_in/1]
2. non_recursive  : [eval_Fax3Encode1DRow_bb12_in/1]
3. non_recursive  : [eval_Fax3Encode1DRow_38/1]
4. non_recursive  : [eval_Fax3Encode1DRow_37/1]
5. non_recursive  : [eval_Fax3Encode1DRow_bb8_in/1]
6. non_recursive  : [eval_Fax3Encode1DRow_bb7_in/1]
7. non_recursive  : [eval_Fax3Encode1DRow_17/1]
8. non_recursive  : [eval_Fax3Encode1DRow_16/1]
9. non_recursive  : [eval_Fax3Encode1DRow_bb3_in/1]
10. non_recursive  : [loop_cont_eval_Fax3Encode1DRow_bb1_in/2]
11. non_recursive  : [eval_Fax3Encode1DRow_bb0_in/2]
12. non_recursive  : [eval_Fax3Encode1DRow_start/2]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into eval_Fax3Encode1DRow_bb1_in/3
1. SCC is completely evaluated into other SCCs
2. SCC is completely evaluated into other SCCs
3. SCC is completely evaluated into other SCCs
4. SCC is completely evaluated into other SCCs
5. SCC is partially evaluated into eval_Fax3Encode1DRow_bb8_in/1
6. SCC is completely evaluated into other SCCs
7. SCC is completely evaluated into other SCCs
8. SCC is completely evaluated into other SCCs
9. SCC is partially evaluated into eval_Fax3Encode1DRow_bb3_in/1
10. SCC is completely evaluated into other SCCs
11. SCC is partially evaluated into eval_Fax3Encode1DRow_bb0_in/2
12. SCC is partially evaluated into eval_Fax3Encode1DRow_start/2

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations eval_Fax3Encode1DRow_bb1_in/3 
* CE 5 is refined into CE [9] 
* CE 4 is refined into CE [10] 


#### Refined cost equations eval_Fax3Encode1DRow_bb1_in/3 
* CE 9: eval_Fax3Encode1DRow_bb1_in(V_bits,V_bs_0,B) = 1+ eval_Fax3Encode1DRow_bb1_in(V_bits,C,D)
     [V_bits>=C+1,D=2,B=2] 
* CE 10: eval_Fax3Encode1DRow_bb1_in(V_bits,V_bs_0,B) = 0
     [B=2] 

### Cost equations --> "Loop" of eval_Fax3Encode1DRow_bb1_in/3 
* CEs [10] --> Loop 7 
* CEs [9] --> Loop 8 

#### Loops of eval_Fax3Encode1DRow_bb1_in/3 
* Loop 7: eval_Fax3Encode1DRow_bb1_in(V_bits,V_bs_0,B) [B=2] 
* Loop 8: eval_Fax3Encode1DRow_bb1_in(V_bits,V_bs_0,B)->  eval_Fax3Encode1DRow_bb1_in(V_bits,V_bs_0',B')
                  [V_bits>=V_bs_0'+1,B'=2,B=2] 

### Ranking functions of CR eval_Fax3Encode1DRow_bb1_in(V_bits,V_bs_0,B) 

#### Partial ranking functions of CR eval_Fax3Encode1DRow_bb1_in(V_bits,V_bs_0,B) 


### Resulting Chains:eval_Fax3Encode1DRow_bb1_in(V_bits,V_bs_0,B) 
* [[8]]...
* [[8],7]
* [7]


### Merging Chains  eval_Fax3Encode1DRow_bb1_in/3 into  External patterns of execution 
* [[7],[7,[8]]] --> 1 
* [[[8]]] --> 2 


### Specialization of cost equations eval_Fax3Encode1DRow_bb8_in/1 
* CE 8 is refined into CE [11] 


#### Refined cost equations eval_Fax3Encode1DRow_bb8_in/1 
* CE 11: eval_Fax3Encode1DRow_bb8_in(B) = 0
     [] 

### Cost equations --> "Loop" of eval_Fax3Encode1DRow_bb8_in/1 
* CEs [11] --> Loop 9 

#### Loops of eval_Fax3Encode1DRow_bb8_in/1 
* Loop 9: eval_Fax3Encode1DRow_bb8_in(B) [] 

### Ranking functions of CR eval_Fax3Encode1DRow_bb8_in(B) 

#### Partial ranking functions of CR eval_Fax3Encode1DRow_bb8_in(B) 


### Resulting Chains:eval_Fax3Encode1DRow_bb8_in(B) 
* [9]


### Merging Chains  eval_Fax3Encode1DRow_bb8_in/1 into  External patterns of execution 
* [[9]] --> 1 


### Specialization of cost equations eval_Fax3Encode1DRow_bb3_in/1 
* CE 6 is refined into CE [12] 
* CE 7 is refined into CE [13] 


#### Refined cost equations eval_Fax3Encode1DRow_bb3_in/1 
* CE 12: eval_Fax3Encode1DRow_bb3_in(B) = 0+ eval_Fax3Encode1DRow_bb8_in(B):1
     [] 
* CE 13: eval_Fax3Encode1DRow_bb3_in(B) = 0
     [] 

### Cost equations --> "Loop" of eval_Fax3Encode1DRow_bb3_in/1 
* CEs [12,13] --> Loop 10 

#### Loops of eval_Fax3Encode1DRow_bb3_in/1 
* Loop 10: eval_Fax3Encode1DRow_bb3_in(B) [] 

### Ranking functions of CR eval_Fax3Encode1DRow_bb3_in(B) 

#### Partial ranking functions of CR eval_Fax3Encode1DRow_bb3_in(B) 


### Resulting Chains:eval_Fax3Encode1DRow_bb3_in(B) 
* [10]


### Merging Chains  eval_Fax3Encode1DRow_bb3_in/1 into  External patterns of execution 
* [[10]] --> 1 


### Specialization of cost equations eval_Fax3Encode1DRow_bb0_in/2 
* CE 3 is refined into CE [14,15] 


#### Refined cost equations eval_Fax3Encode1DRow_bb0_in/2 
* CE 14: eval_Fax3Encode1DRow_bb0_in(V_bits,B) = 1+ eval_Fax3Encode1DRow_bb1_in(V_bits,C,D):1+ eval_Fax3Encode1DRow_bb3_in(B):1
     [D=2,C=0] 
* CE 15: eval_Fax3Encode1DRow_bb0_in(V_bits,B) = 1+ eval_Fax3Encode1DRow_bb1_in(V_bits,C,D):2
     [D=2,C=0] 

### Cost equations --> "Loop" of eval_Fax3Encode1DRow_bb0_in/2 
* CEs [15] --> Loop 11 
* CEs [14] --> Loop 12 

#### Loops of eval_Fax3Encode1DRow_bb0_in/2 
* Loop 11: eval_Fax3Encode1DRow_bb0_in(V_bits,B) [] 
* Loop 12: eval_Fax3Encode1DRow_bb0_in(V_bits,B) [] 

### Ranking functions of CR eval_Fax3Encode1DRow_bb0_in(V_bits,B) 

#### Partial ranking functions of CR eval_Fax3Encode1DRow_bb0_in(V_bits,B) 


### Resulting Chains:eval_Fax3Encode1DRow_bb0_in(V_bits,B) 
* [12]
* [11]...


### Merging Chains  eval_Fax3Encode1DRow_bb0_in/2 into  External patterns of execution 
* [[12]] --> 1 
* [[11]] --> 2 


### Specialization of cost equations eval_Fax3Encode1DRow_start/2 
* CE 2 is refined into CE [16,17] 


#### Refined cost equations eval_Fax3Encode1DRow_start/2 
* CE 16: eval_Fax3Encode1DRow_start(V_bits,B) = 0+ eval_Fax3Encode1DRow_bb0_in(V_bits,B):1
     [] 
* CE 17: eval_Fax3Encode1DRow_start(V_bits,B) = 0+ eval_Fax3Encode1DRow_bb0_in(V_bits,B):2
     [] 

### Cost equations --> "Loop" of eval_Fax3Encode1DRow_start/2 
* CEs [17] --> Loop 13 
* CEs [16] --> Loop 14 

#### Loops of eval_Fax3Encode1DRow_start/2 
* Loop 13: eval_Fax3Encode1DRow_start(V_bits,B) [] 
* Loop 14: eval_Fax3Encode1DRow_start(V_bits,B) [] 

### Ranking functions of CR eval_Fax3Encode1DRow_start(V_bits,B) 

#### Partial ranking functions of CR eval_Fax3Encode1DRow_start(V_bits,B) 


### Resulting Chains:eval_Fax3Encode1DRow_start(V_bits,B) 
* [14]
* [13]...


### Merging Chains  eval_Fax3Encode1DRow_start/2 into  External patterns of execution 
* [[14]] --> 1 
* [[13]] --> 2 


Computing Bounds
=====================================

#### Cost of loops [8] 

 * loop 8:eval_Fax3Encode1DRow_bb1_in(V_bits,V_bs_0,B) -> [eval_Fax3Encode1DRow_bb1_in(V_bits',V_bs_0',B')] 
1
#### Cost of phase [8]:eval_Fax3Encode1DRow_bb1_in(V_bits,V_bs_0,B) -> [eval_Fax3Encode1DRow_bb1_in(V_bits',V_bs_0',B')] 
1*it(8)+0
#### Cost of phase [8]:eval_Fax3Encode1DRow_bb1_in(V_bits,V_bs_0,B) -> [eval_Fax3Encode1DRow_bb1_in(V_bits',V_bs_0',B')] 
1*it(8)+0
#### Cost of chains of eval_Fax3Encode1DRow_bb1_in(V_bits,V_bs_0,B):
* Chain [[8]]...: 1*it(8)+0
  with precondition: [B=2] 

* Chain [[8],7]: 1*it(8)+0
  with precondition: [B=2] 

* Chain [7]: 0
  with precondition: [B=2] 


#### Cost of chains of eval_Fax3Encode1DRow_bb8_in(B):
* Chain [9]: 0
  with precondition: [] 


#### Cost of chains of eval_Fax3Encode1DRow_bb3_in(B):
* Chain [10]: 0
  with precondition: [] 


#### Cost of chains of eval_Fax3Encode1DRow_bb0_in(V_bits,B):
* Chain [12]: 1*s(2)+1
  with precondition: [] 

* Chain [11]...: 1*s(3)+1
  with precondition: [] 


#### Cost of chains of eval_Fax3Encode1DRow_start(V_bits,B):
* Chain [14]: 1*s(4)+1
  with precondition: [] 

* Chain [13]...: 1*s(5)+1
  with precondition: [] 


Closed-form bounds of eval_Fax3Encode1DRow_start(V_bits,B): 
-------------------------------------
* Chain [14] with precondition: [] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [13]... with precondition: [] 
    - Upper bound: inf 
    - Complexity: infinity 

### Maximum cost of eval_Fax3Encode1DRow_start(V_bits,B): inf 
Asymptotic class: infinity 

Time statistics: 
-------------------------------------
* Partial evaluation computed in 33 ms.
* Invariants computed in 13 ms.
   - Backward Invariants 5 ms.
   - Transitive Invariants 3 ms.
* Refinement performed in 25 ms.
* Termination proved in 3 ms.
* Upper bounds computed in 20 ms.
   - Equation cost structures 8 ms.
   - Phase cost structures 5 ms.
   - Chain cost structures 6 ms.
   - Solving cost expressions 1 ms.
* Total analysis performed in 139 ms.


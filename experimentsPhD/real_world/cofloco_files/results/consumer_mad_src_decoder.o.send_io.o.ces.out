Warning: Ignored call to eval_send_io_stop/1 in equation eval_send_io_bb5_in/1 

Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. recursive  : [eval_send_io_2/6,eval_send_io_3/7,eval_send_io_bb2_in/6]
1. recursive  : [eval_send_io_bb1_in/3,eval_send_io_bb4_in/4,loop_cont_eval_send_io_bb2_in/5]
2. non_recursive  : [eval_send_io_bb5_in/1]
3. non_recursive  : [loop_cont_eval_send_io_bb1_in/2]
4. non_recursive  : [eval_send_io_1/3]
5. non_recursive  : [eval_send_io_0/3]
6. non_recursive  : [eval_send_io_bb0_in/3]
7. non_recursive  : [eval_send_io_start/3]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into eval_send_io_bb2_in/6
1. SCC is partially evaluated into eval_send_io_bb1_in/3
2. SCC is completely evaluated into other SCCs
3. SCC is completely evaluated into other SCCs
4. SCC is partially evaluated into eval_send_io_1/3
5. SCC is completely evaluated into other SCCs
6. SCC is completely evaluated into other SCCs
7. SCC is partially evaluated into eval_send_io_start/3

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations eval_send_io_bb2_in/6 
* CE 13 is refined into CE [14] 
* CE 9 is refined into CE [15] 
* CE 10 is refined into CE [16] 
* CE 11 is refined into CE [17] 
* CE 12 is refined into CE [18] 


#### Refined cost equations eval_send_io_bb2_in/6 
* CE 14: eval_send_io_bb2_in(V_fd,V__01,B,C,D,E) = 1+ eval_send_io_bb2_in(V_fd,V__01,B,C,D,E)
     [B>=2,3>=B] 
* CE 15: eval_send_io_bb2_in(A,B,C,A,B,D) = 0
     [D>=0,C=3] 
* CE 16: eval_send_io_bb2_in(A,B,C,A,B,D) = 0
     [0>=D+2,C=3] 
* CE 17: eval_send_io_bb2_in(A,B,C,A,B,D) = 0
     [D+1=0,C=3] 
* CE 18: eval_send_io_bb2_in(V_fd,V__01,B,C,D,E) = 0
     [B=2] 

### Cost equations --> "Loop" of eval_send_io_bb2_in/6 
* CEs [15] --> Loop 13 
* CEs [16] --> Loop 14 
* CEs [17] --> Loop 15 
* CEs [18] --> Loop 16 
* CEs [14] --> Loop 17 

#### Loops of eval_send_io_bb2_in/6 
* Loop 13: eval_send_io_bb2_in(A,B,C,A,B,D) [D>=0,C=3] 
* Loop 14: eval_send_io_bb2_in(A,B,C,A,B,D) [0>=D+2,C=3] 
* Loop 15: eval_send_io_bb2_in(A,B,C,A,B,D) [D+1=0,C=3] 
* Loop 16: eval_send_io_bb2_in(V_fd,V__01,B,C,D,E) [B=2] 
* Loop 17: eval_send_io_bb2_in(V_fd,V__01,B,C,D,E)->  eval_send_io_bb2_in(V_fd,V__01,B,C,D,E)
                  [B>=2,3>=B] 

### Ranking functions of CR eval_send_io_bb2_in(V_fd,V__01,B,C,D,E) 

#### Partial ranking functions of CR eval_send_io_bb2_in(V_fd,V__01,B,C,D,E) 


### Resulting Chains:eval_send_io_bb2_in(V_fd,V__01,B,C,D,E) 
* [[17]]...
* [[17],16]
* [[17],15]
* [[17],14]
* [[17],13]
* [16]
* [15]
* [14]
* [13]


### Merging Chains  eval_send_io_bb2_in/6 into  External patterns of execution 
* [[16],[16,[17]]] --> 1 
* [[15],[15,[17]]] --> 2 
* [[14],[14,[17]]] --> 3 
* [[13],[13,[17]]] --> 4 
* [[[17]]] --> 5 


### Specialization of cost equations eval_send_io_bb1_in/3 
* CE 4 is refined into CE [19,20] 
* CE 5 is refined into CE [21,22] 
* CE 8 is refined into CE [23] 
* CE 6 is refined into CE [24,25,26,27] 
* CE 7 is refined into CE [28,29,30,31] 


#### Refined cost equations eval_send_io_bb1_in/3 
* CE 19: eval_send_io_bb1_in(V_fd,V__01,B) = 1+ eval_send_io_bb2_in(V_fd,V__01,C,D,E,F):1
     [V__01>=1,C=2,B=2] 
* CE 20: eval_send_io_bb1_in(V_fd,V__01,B) = 1+ eval_send_io_bb2_in(V_fd,V__01,C,D,E,F):5
     [V__01>=1,C=2,B=2] 
* CE 21: eval_send_io_bb1_in(V_fd,V__01,B) = 1+ eval_send_io_bb2_in(V_fd,V__01,C,D,E,F):1
     [0>=V__01+1,C=2,B=2] 
* CE 22: eval_send_io_bb1_in(V_fd,V__01,B) = 1+ eval_send_io_bb2_in(V_fd,V__01,C,D,E,F):5
     [0>=V__01+1,C=2,B=2] 
* CE 23: eval_send_io_bb1_in(V_fd,V__01,B) = 0
     [B=2,V__01=0] 
* CE 24: eval_send_io_bb1_in(V_fd,V__01,B) = 2+ eval_send_io_bb2_in(V_fd,V__01,C,V_fd,V__01,D):2+ eval_send_io_bb1_in(V_fd,E,F)
     [V__01>=1,V__01+1=E,F=2,D+1=0,C=3,B=2] 
* CE 25: eval_send_io_bb1_in(V_fd,V__01,B) = 2+ eval_send_io_bb2_in(V_fd,V__01,C,V_fd,V__01,D):3+ eval_send_io_bb1_in(V_fd,E,F)
     [V__01>=1,0>=D+2,V__01=D+E,F=2,C=3,B=2] 
* CE 26: eval_send_io_bb1_in(V_fd,V__01,B) = 2+ eval_send_io_bb2_in(V_fd,V__01,C,V_fd,V__01,D):4+ eval_send_io_bb1_in(V_fd,E,F)
     [D>=0,V__01>=1,V__01=D+E,F=2,C=3,B=2] 
* CE 27: eval_send_io_bb1_in(V_fd,V__01,B) = 2+ eval_send_io_bb2_in(V_fd,V__01,C,D,E,F):5
     [V__01>=1,F+G=E,H=2,C=3,B=2] 
* CE 28: eval_send_io_bb1_in(V_fd,V__01,B) = 2+ eval_send_io_bb2_in(V_fd,V__01,C,V_fd,V__01,D):2+ eval_send_io_bb1_in(V_fd,E,F)
     [0>=V__01+1,V__01+1=E,F=2,D+1=0,C=3,B=2] 
* CE 29: eval_send_io_bb1_in(V_fd,V__01,B) = 2+ eval_send_io_bb2_in(V_fd,V__01,C,V_fd,V__01,D):3+ eval_send_io_bb1_in(V_fd,E,F)
     [0>=D+2,0>=V__01+1,V__01=D+E,F=2,C=3,B=2] 
* CE 30: eval_send_io_bb1_in(V_fd,V__01,B) = 2+ eval_send_io_bb2_in(V_fd,V__01,C,V_fd,V__01,D):4+ eval_send_io_bb1_in(V_fd,E,F)
     [D>=0,0>=V__01+1,V__01=D+E,F=2,C=3,B=2] 
* CE 31: eval_send_io_bb1_in(V_fd,V__01,B) = 2+ eval_send_io_bb2_in(V_fd,V__01,C,D,E,F):5
     [0>=V__01+1,F+G=E,H=2,C=3,B=2] 

### Cost equations --> "Loop" of eval_send_io_bb1_in/3 
* CEs [20,27] --> Loop 18 
* CEs [22,31] --> Loop 19 
* CEs [26] --> Loop 20 
* CEs [25] --> Loop 21 
* CEs [30] --> Loop 22 
* CEs [29] --> Loop 23 
* CEs [24] --> Loop 24 
* CEs [28] --> Loop 25 
* CEs [19] --> Loop 26 
* CEs [21] --> Loop 27 
* CEs [23] --> Loop 28 

#### Loops of eval_send_io_bb1_in/3 
* Loop 18: eval_send_io_bb1_in(V_fd,V__01,B) [V__01>=1,B=2] 
* Loop 19: eval_send_io_bb1_in(V_fd,V__01,B) [0>=V__01+1,B=2] 
* Loop 20: eval_send_io_bb1_in(V_fd,V__01,B)->  eval_send_io_bb1_in(V_fd,V__01',B')
                  [V__01>=V__01',V__01>=1,B'=2,B=2] 
* Loop 21: eval_send_io_bb1_in(V_fd,V__01,B)->  eval_send_io_bb1_in(V_fd,V__01',B')
                  [V__01'>=V__01+2,V__01>=1,B'=2,B=2] 
* Loop 22: eval_send_io_bb1_in(V_fd,V__01,B)->  eval_send_io_bb1_in(V_fd,V__01',B')
                  [V__01>=V__01',0>=V__01+1,B'=2,B=2] 
* Loop 23: eval_send_io_bb1_in(V_fd,V__01,B)->  eval_send_io_bb1_in(V_fd,V__01',B')
                  [V__01'>=V__01+2,0>=V__01+1,B'=2,B=2] 
* Loop 24: eval_send_io_bb1_in(V_fd,V__01,B)->  eval_send_io_bb1_in(V_fd,V__01',B')
                  [V__01>=1,V__01+1=V__01',B'=2,B=2] 
* Loop 25: eval_send_io_bb1_in(V_fd,V__01,B)->  eval_send_io_bb1_in(V_fd,V__01',B')
                  [0>=V__01+1,V__01+1=V__01',B'=2,B=2] 
* Loop 26: eval_send_io_bb1_in(V_fd,V__01,B) [V__01>=1,B=2] 
* Loop 27: eval_send_io_bb1_in(V_fd,V__01,B) [0>=V__01+1,B=2] 
* Loop 28: eval_send_io_bb1_in(V_fd,V__01,B) [B=2,V__01=0] 

### Ranking functions of CR eval_send_io_bb1_in(V_fd,V__01,B) 

#### Partial ranking functions of CR eval_send_io_bb1_in(V_fd,V__01,B) 
* Partial RF of phase [20,21,22,23,24,25]:
  - RF of loop [23:1]:
    -V__01/2 depends on loops [20:1,22:1] 
  - RF of loop [25:1]:
    -V__01 depends on loops [20:1,22:1] 


### Resulting Chains:eval_send_io_bb1_in(V_fd,V__01,B) 
* [[20,21,22,23,24,25]]...
* [[20,21,22,23,24,25],28]
* [[20,21,22,23,24,25],27]
* [[20,21,22,23,24,25],26]
* [[20,21,22,23,24,25],19]...
* [[20,21,22,23,24,25],18]...
* [28]
* [27]
* [26]
* [19]...
* [18]...


### Merging Chains  eval_send_io_bb1_in/3 into  External patterns of execution 
* [[26],[27],[28],[26,[20,21,22,23,24,25]],[27,[20,21,22,23,24,25]],[28,[20,21,22,23,24,25]]] --> 1 
* [[[20,21,22,23,24,25]],[18,[20,21,22,23,24,25]],[19,[20,21,22,23,24,25]]] --> 2 
* [[19]] --> 3 
* [[18]] --> 4 


### Specialization of cost equations eval_send_io_1/3 
* CE 3 is refined into CE [32,33,34,35] 


#### Refined cost equations eval_send_io_1/3 
* CE 32: eval_send_io_1(V_fd,V_len,B) = 1+ eval_send_io_bb1_in(V_fd,V_len,C):1
     [C=2] 
* CE 33: eval_send_io_1(V_fd,V_len,B) = 1+ eval_send_io_bb1_in(V_fd,V_len,C):2
     [C=2] 
* CE 34: eval_send_io_1(V_fd,V_len,B) = 1+ eval_send_io_bb1_in(V_fd,V_len,C):3
     [0>=V_len+1,C=2] 
* CE 35: eval_send_io_1(V_fd,V_len,B) = 1+ eval_send_io_bb1_in(V_fd,V_len,C):4
     [V_len>=1,C=2] 

### Cost equations --> "Loop" of eval_send_io_1/3 
* CEs [33,34,35] --> Loop 29 
* CEs [32] --> Loop 30 

#### Loops of eval_send_io_1/3 
* Loop 29: eval_send_io_1(V_fd,V_len,B) [] 
* Loop 30: eval_send_io_1(V_fd,V_len,B) [] 

### Ranking functions of CR eval_send_io_1(V_fd,V_len,B) 

#### Partial ranking functions of CR eval_send_io_1(V_fd,V_len,B) 


### Resulting Chains:eval_send_io_1(V_fd,V_len,B) 
* [30]
* [29]...


### Merging Chains  eval_send_io_1/3 into  External patterns of execution 
* [[30]] --> 1 
* [[29]] --> 2 


### Specialization of cost equations eval_send_io_start/3 
* CE 2 is refined into CE [36,37] 


#### Refined cost equations eval_send_io_start/3 
* CE 36: eval_send_io_start(V_fd,V_len,B) = 0+ eval_send_io_1(V_fd,V_len,B):1
     [] 
* CE 37: eval_send_io_start(V_fd,V_len,B) = 0+ eval_send_io_1(V_fd,V_len,B):2
     [] 

### Cost equations --> "Loop" of eval_send_io_start/3 
* CEs [37] --> Loop 31 
* CEs [36] --> Loop 32 

#### Loops of eval_send_io_start/3 
* Loop 31: eval_send_io_start(V_fd,V_len,B) [] 
* Loop 32: eval_send_io_start(V_fd,V_len,B) [] 

### Ranking functions of CR eval_send_io_start(V_fd,V_len,B) 

#### Partial ranking functions of CR eval_send_io_start(V_fd,V_len,B) 


### Resulting Chains:eval_send_io_start(V_fd,V_len,B) 
* [32]
* [31]...


### Merging Chains  eval_send_io_start/3 into  External patterns of execution 
* [[32]] --> 1 
* [[31]] --> 2 


Computing Bounds
=====================================

#### Cost of loops [17] 

 * loop 17:eval_send_io_bb2_in(V_fd,V__01,B,C,D,E) -> [eval_send_io_bb2_in(V_fd',V__01',B',C',D',E')] 
1
#### Cost of phase [17]:eval_send_io_bb2_in(V_fd,V__01,B,C,D,E) -> [eval_send_io_bb2_in(V_fd',V__01',B',C',D',E')] 
1*it(17)+0
#### Cost of phase [17]:eval_send_io_bb2_in(V_fd,V__01,B,C,D,E) -> [eval_send_io_bb2_in(V_fd',V__01',B',C',D',E')] 
1*it(17)+0
#### Cost of phase [17]:eval_send_io_bb2_in(V_fd,V__01,B,C,D,E) -> [eval_send_io_bb2_in(V_fd',V__01',B',C',D',E')] 
1*it(17)+0
#### Cost of phase [17]:eval_send_io_bb2_in(V_fd,V__01,B,C,D,E) -> [eval_send_io_bb2_in(V_fd',V__01',B',C',D',E')] 
1*it(17)+0
#### Cost of phase [17]:eval_send_io_bb2_in(V_fd,V__01,B,C,D,E) -> [eval_send_io_bb2_in(V_fd',V__01',B',C',D',E')] 
1*it(17)+0
#### Cost of chains of eval_send_io_bb2_in(V_fd,V__01,B,C,D,E):
* Chain [[17]]...: 1*it(17)+0
  with precondition: [B>=2,3>=B] 

* Chain [[17],16]: 1*it(17)+0
  with precondition: [B=2] 

* Chain [[17],15]: 1*it(17)+0
  with precondition: [B=3,E+1=0,V_fd=C,V__01=D] 

* Chain [[17],14]: 1*it(17)+0
  with precondition: [B=3,V_fd=C,V__01=D,0>=E+2] 

* Chain [[17],13]: 1*it(17)+0
  with precondition: [B=3,V_fd=C,V__01=D,E>=0] 

* Chain [16]: 0
  with precondition: [B=2] 

* Chain [15]: 0
  with precondition: [B=3,E+1=0,C=V_fd,D=V__01] 

* Chain [14]: 0
  with precondition: [B=3,C=V_fd,D=V__01,0>=E+2] 

* Chain [13]: 0
  with precondition: [B=3,C=V_fd,D=V__01,E>=0] 


#### Cost of loops [20,21,22,23,24,25] 

 * loop 20:eval_send_io_bb1_in(V_fd,V__01,B) -> [eval_send_io_bb1_in(V_fd',V__01',B')] 
1*s(6)+2
 * loop 21:eval_send_io_bb1_in(V_fd,V__01,B) -> [eval_send_io_bb1_in(V_fd',V__01',B')] 
1*s(8)+2
 * loop 22:eval_send_io_bb1_in(V_fd,V__01,B) -> [eval_send_io_bb1_in(V_fd',V__01',B')] 
1*s(10)+2
 * loop 23:eval_send_io_bb1_in(V_fd,V__01,B) -> [eval_send_io_bb1_in(V_fd',V__01',B')] 
1*s(12)+2
 * loop 24:eval_send_io_bb1_in(V_fd,V__01,B) -> [eval_send_io_bb1_in(V_fd',V__01',B')] 
1*s(14)+2
 * loop 25:eval_send_io_bb1_in(V_fd,V__01,B) -> [eval_send_io_bb1_in(V_fd',V__01',B')] 
1*s(16)+2
#### Cost of phase [20,21,22,23,24,25]:eval_send_io_bb1_in(V_fd,V__01,B) -> [eval_send_io_bb1_in(V_fd',V__01',B')] 
18*it(20)+0
#### Cost of phase [20,21,22,23,24,25]:eval_send_io_bb1_in(V_fd,V__01,B) -> [eval_send_io_bb1_in(V_fd',V__01',B')] 
18*it(20)+0
#### Cost of phase [20,21,22,23,24,25]:eval_send_io_bb1_in(V_fd,V__01,B) -> [eval_send_io_bb1_in(V_fd',V__01',B')] 
18*it(20)+0
#### Cost of phase [20,21,22,23,24,25]:eval_send_io_bb1_in(V_fd,V__01,B) -> [eval_send_io_bb1_in(V_fd',V__01',B')] 
18*it(20)+0
#### Cost of phase [20,21,22,23,24,25]:eval_send_io_bb1_in(V_fd,V__01,B) -> [eval_send_io_bb1_in(V_fd',V__01',B')] 
18*it(20)+0
#### Cost of phase [20,21,22,23,24,25]:eval_send_io_bb1_in(V_fd,V__01,B) -> [eval_send_io_bb1_in(V_fd',V__01',B')] 
18*it(20)+0
#### Cost of chains of eval_send_io_bb1_in(V_fd,V__01,B):
* Chain [[20,21,22,23,24,25]]...: 18*it(20)+0
  with precondition: [B=2] 

* Chain [[20,21,22,23,24,25],28]: 18*it(20)+0
  with precondition: [B=2] 

* Chain [[20,21,22,23,24,25],27]: 19*it(20)+1
  with precondition: [B=2] 

* Chain [[20,21,22,23,24,25],26]: 19*it(20)+1
  with precondition: [B=2] 

* Chain [[20,21,22,23,24,25],19]...: 19*aux(5)+0
  with precondition: [B=2] 

* Chain [[20,21,22,23,24,25],18]...: 19*aux(6)+0
  with precondition: [B=2] 

* Chain [28]: 0
  with precondition: [V__01=0,B=2] 

* Chain [27]: 1*s(23)+1
  with precondition: [B=2,0>=V__01+1] 

* Chain [26]: 1*s(24)+1
  with precondition: [B=2,V__01>=1] 

* Chain [19]...: 1*aux(5)+0
  with precondition: [B=2,0>=V__01+1] 

* Chain [18]...: 1*aux(6)+0
  with precondition: [B=2,V__01>=1] 


#### Cost of chains of eval_send_io_1(V_fd,V_len,B):
* Chain [30]: 1*s(37)+1
  with precondition: [] 

* Chain [29]...: 1*aux(9)+0
  with precondition: [] 


#### Cost of chains of eval_send_io_start(V_fd,V_len,B):
* Chain [32]: 1*s(41)+1
  with precondition: [] 

* Chain [31]...: 1*s(42)+0
  with precondition: [] 


Closed-form bounds of eval_send_io_start(V_fd,V_len,B): 
-------------------------------------
* Chain [32] with precondition: [] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [31]... with precondition: [] 
    - Upper bound: inf 
    - Complexity: infinity 

### Maximum cost of eval_send_io_start(V_fd,V_len,B): inf 
Asymptotic class: infinity 

Time statistics: 
-------------------------------------
* Partial evaluation computed in 19 ms.
* Invariants computed in 38 ms.
   - Backward Invariants 24 ms.
   - Transitive Invariants 4 ms.
* Refinement performed in 55 ms.
* Termination proved in 8 ms.
* Upper bounds computed in 40 ms.
   - Equation cost structures 16 ms.
   - Phase cost structures 15 ms.
   - Chain cost structures 14 ms.
   - Solving cost expressions 0 ms.
* Total analysis performed in 184 ms.


Warning: Ignored call to eval_send_all_trees_stop/1 in equation eval_send_all_trees_19/1 

Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. recursive  : [eval_send_all_trees_12/8,eval_send_all_trees_13/8,eval_send_all_trees_bb1_in/7]
1. non_recursive  : [eval_send_all_trees_19/1]
2. non_recursive  : [eval_send_all_trees_18/2]
3. non_recursive  : [eval_send_all_trees_17/2]
4. non_recursive  : [eval_send_all_trees_16/3]
5. non_recursive  : [loop_cont_eval_send_all_trees_bb1_in/4]
6. non_recursive  : [eval_send_all_trees_6/4]
7. non_recursive  : [eval_send_all_trees_5/5]
8. non_recursive  : [eval_send_all_trees_4/4]
9. non_recursive  : [eval_send_all_trees_3/5]
10. non_recursive  : [eval_send_all_trees_2/4]
11. non_recursive  : [eval_send_all_trees_1/5]
12. non_recursive  : [eval_send_all_trees_bb0_in/4]
13. non_recursive  : [eval_send_all_trees_start/4]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into eval_send_all_trees_bb1_in/7
1. SCC is completely evaluated into other SCCs
2. SCC is completely evaluated into other SCCs
3. SCC is completely evaluated into other SCCs
4. SCC is completely evaluated into other SCCs
5. SCC is completely evaluated into other SCCs
6. SCC is partially evaluated into eval_send_all_trees_6/4
7. SCC is completely evaluated into other SCCs
8. SCC is completely evaluated into other SCCs
9. SCC is completely evaluated into other SCCs
10. SCC is completely evaluated into other SCCs
11. SCC is completely evaluated into other SCCs
12. SCC is completely evaluated into other SCCs
13. SCC is partially evaluated into eval_send_all_trees_start/4

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations eval_send_all_trees_bb1_in/7 
* CE 5 is refined into CE [6] 
* CE 4 is refined into CE [7] 


#### Refined cost equations eval_send_all_trees_bb1_in/7 
* CE 6: eval_send_all_trees_bb1_in(A,B,C,D,E,B,F) = 0
     [D>=C,D>=0,F+1=A,E=2] 
* CE 7: eval_send_all_trees_bb1_in(V_lcodes,V_dcodes,V_blcodes,V_rank_0,B,C,D) = 1+ eval_send_all_trees_bb1_in(V_lcodes,V_dcodes,V_blcodes,E,F,C,D)
     [V_blcodes>=V_rank_0+1,V_rank_0>=0,V_rank_0+1=E,F=2,B=2] 

### Cost equations --> "Loop" of eval_send_all_trees_bb1_in/7 
* CEs [7] --> Loop 5 
* CEs [6] --> Loop 6 

#### Loops of eval_send_all_trees_bb1_in/7 
* Loop 5: eval_send_all_trees_bb1_in(V_lcodes,V_dcodes,V_blcodes,V_rank_0,B,C,D)->  eval_send_all_trees_bb1_in(V_lcodes,V_dcodes,V_blcodes,V_rank_0',B',C,D)
                  [V_blcodes>=V_rank_0+1,V_rank_0>=0,V_rank_0+1=V_rank_0',B'=2,B=2] 
* Loop 6: eval_send_all_trees_bb1_in(A,B,C,D,E,B,F) [D>=C,D>=0,A=F+1,E=2] 

### Ranking functions of CR eval_send_all_trees_bb1_in(V_lcodes,V_dcodes,V_blcodes,V_rank_0,B,C,D) 
* RF of phase [5]: [V_blcodes-V_rank_0]

#### Partial ranking functions of CR eval_send_all_trees_bb1_in(V_lcodes,V_dcodes,V_blcodes,V_rank_0,B,C,D) 
* Partial RF of phase [5]:
  - RF of loop [5:1]:
    V_blcodes-V_rank_0


### Resulting Chains:eval_send_all_trees_bb1_in(V_lcodes,V_dcodes,V_blcodes,V_rank_0,B,C,D) 
* [[5],6]
* [6]


### Merging Chains  eval_send_all_trees_bb1_in/7 into  External patterns of execution 
* [[6]] --> 1 
* [[6,[5]]] --> 2 


### Specialization of cost equations eval_send_all_trees_6/4 
* CE 3 is refined into CE [8,9] 


#### Refined cost equations eval_send_all_trees_6/4 
* CE 8: eval_send_all_trees_6(V_lcodes,V_dcodes,V_blcodes,B) = 1+ eval_send_all_trees_bb1_in(C,V_dcodes,V_blcodes,D,E,V_dcodes,F):1
     [0>=V_blcodes,F+1=C,F+1=V_lcodes,E=2,D=0] 
* CE 9: eval_send_all_trees_6(V_lcodes,V_dcodes,V_blcodes,B) = 1+ eval_send_all_trees_bb1_in(C,V_dcodes,V_blcodes,D,E,V_dcodes,F):2
     [V_blcodes>=1,F+1=C,F+1=V_lcodes,E=2,D=0] 

### Cost equations --> "Loop" of eval_send_all_trees_6/4 
* CEs [9] --> Loop 7 
* CEs [8] --> Loop 8 

#### Loops of eval_send_all_trees_6/4 
* Loop 7: eval_send_all_trees_6(V_lcodes,V_dcodes,V_blcodes,B) [V_blcodes>=1] 
* Loop 8: eval_send_all_trees_6(V_lcodes,V_dcodes,V_blcodes,B) [0>=V_blcodes] 

### Ranking functions of CR eval_send_all_trees_6(V_lcodes,V_dcodes,V_blcodes,B) 

#### Partial ranking functions of CR eval_send_all_trees_6(V_lcodes,V_dcodes,V_blcodes,B) 


### Resulting Chains:eval_send_all_trees_6(V_lcodes,V_dcodes,V_blcodes,B) 
* [8]
* [7]


### Merging Chains  eval_send_all_trees_6/4 into  External patterns of execution 
* [[8]] --> 1 
* [[7]] --> 2 


### Specialization of cost equations eval_send_all_trees_start/4 
* CE 2 is refined into CE [10,11] 


#### Refined cost equations eval_send_all_trees_start/4 
* CE 10: eval_send_all_trees_start(V_lcodes,V_dcodes,V_blcodes,B) = 0+ eval_send_all_trees_6(V_lcodes,V_dcodes,V_blcodes,B):1
     [0>=V_blcodes] 
* CE 11: eval_send_all_trees_start(V_lcodes,V_dcodes,V_blcodes,B) = 0+ eval_send_all_trees_6(V_lcodes,V_dcodes,V_blcodes,B):2
     [V_blcodes>=1] 

### Cost equations --> "Loop" of eval_send_all_trees_start/4 
* CEs [11] --> Loop 9 
* CEs [10] --> Loop 10 

#### Loops of eval_send_all_trees_start/4 
* Loop 9: eval_send_all_trees_start(V_lcodes,V_dcodes,V_blcodes,B) [V_blcodes>=1] 
* Loop 10: eval_send_all_trees_start(V_lcodes,V_dcodes,V_blcodes,B) [0>=V_blcodes] 

### Ranking functions of CR eval_send_all_trees_start(V_lcodes,V_dcodes,V_blcodes,B) 

#### Partial ranking functions of CR eval_send_all_trees_start(V_lcodes,V_dcodes,V_blcodes,B) 


### Resulting Chains:eval_send_all_trees_start(V_lcodes,V_dcodes,V_blcodes,B) 
* [10]
* [9]


### Merging Chains  eval_send_all_trees_start/4 into  External patterns of execution 
* [[10]] --> 1 
* [[9]] --> 2 


Computing Bounds
=====================================

#### Cost of loops [5] 

 * loop 5:eval_send_all_trees_bb1_in(V_lcodes,V_dcodes,V_blcodes,V_rank_0,B,C,D) -> [eval_send_all_trees_bb1_in(V_lcodes',V_dcodes',V_blcodes',V_rank_0',B',C',D')] 
1
#### Cost of phase [5]:eval_send_all_trees_bb1_in(V_lcodes,V_dcodes,V_blcodes,V_rank_0,B,C,D) -> [eval_send_all_trees_bb1_in(V_lcodes',V_dcodes',V_blcodes',V_rank_0',B',C',D')] 
1*it(5)+0
  Such that:it(5) =< V_blcodes-V_rank_0
it(5) =< V_blcodes-V_rank_0-V_blcodes'+V_rank_0'

#### Cost of chains of eval_send_all_trees_bb1_in(V_lcodes,V_dcodes,V_blcodes,V_rank_0,B,C,D):
* Chain [[5],6]: 1*it(5)+0
  Such that:it(5) =< V_blcodes-V_rank_0

  with precondition: [B=2,V_dcodes=C,V_lcodes=D+1,V_rank_0>=0,V_blcodes>=V_rank_0+1] 

* Chain [6]: 0
  with precondition: [B=2,D+1=V_lcodes,C=V_dcodes,V_rank_0>=0,V_rank_0>=V_blcodes] 


#### Cost of chains of eval_send_all_trees_6(V_lcodes,V_dcodes,V_blcodes,B):
* Chain [8]: 1
  with precondition: [0>=V_blcodes] 

* Chain [7]: 1*s(1)+1
  Such that:s(1) =< V_blcodes

  with precondition: [V_blcodes>=1] 


#### Cost of chains of eval_send_all_trees_start(V_lcodes,V_dcodes,V_blcodes,B):
* Chain [10]: 1
  with precondition: [0>=V_blcodes] 

* Chain [9]: 1*s(2)+1
  Such that:s(2) =< V_blcodes

  with precondition: [V_blcodes>=1] 


Closed-form bounds of eval_send_all_trees_start(V_lcodes,V_dcodes,V_blcodes,B): 
-------------------------------------
* Chain [10] with precondition: [0>=V_blcodes] 
    - Upper bound: 1 
    - Complexity: constant 
* Chain [9] with precondition: [V_blcodes>=1] 
    - Upper bound: V_blcodes+1 
    - Complexity: n 

### Maximum cost of eval_send_all_trees_start(V_lcodes,V_dcodes,V_blcodes,B): nat(V_blcodes)+1 
Asymptotic class: n 

Time statistics: 
-------------------------------------
* Partial evaluation computed in 13 ms.
* Invariants computed in 9 ms.
   - Backward Invariants 3 ms.
   - Transitive Invariants 3 ms.
* Refinement performed in 16 ms.
* Termination proved in 4 ms.
* Upper bounds computed in 13 ms.
   - Equation cost structures 6 ms.
   - Phase cost structures 4 ms.
   - Chain cost structures 3 ms.
   - Solving cost expressions 0 ms.
* Total analysis performed in 73 ms.


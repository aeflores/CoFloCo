Warning: Ignored call to eval_Fax4Encode_stop/1 in equation eval_Fax4Encode_bb5_in/1 

Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. recursive  : [eval_Fax4Encode_3/3,eval_Fax4Encode_4/3,eval_Fax4Encode_6/4,eval_Fax4Encode_7/4,eval_Fax4Encode_bb1_in/2]
1. non_recursive  : [eval_Fax4Encode_bb5_in/1]
2. non_recursive  : [loop_cont_eval_Fax4Encode_bb1_in/2]
3. non_recursive  : [eval_Fax4Encode_bb0_in/2]
4. non_recursive  : [eval_Fax4Encode_start/3]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into eval_Fax4Encode_bb1_in/2
1. SCC is completely evaluated into other SCCs
2. SCC is completely evaluated into other SCCs
3. SCC is partially evaluated into eval_Fax4Encode_bb0_in/2
4. SCC is partially evaluated into eval_Fax4Encode_start/3

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations eval_Fax4Encode_bb1_in/2 
* CE 4 is refined into CE [7] 
* CE 6 is refined into CE [8] 
* CE 5 is refined into CE [9] 


#### Refined cost equations eval_Fax4Encode_bb1_in/2 
* CE 7: eval_Fax4Encode_bb1_in(V__02,B) = 0
     [V__02>=1,B=2] 
* CE 8: eval_Fax4Encode_bb1_in(V__02,B) = 0
     [0>=V__02,B=2] 
* CE 9: eval_Fax4Encode_bb1_in(V__02,B) = 1+ eval_Fax4Encode_bb1_in(C,D)
     [V__02>=1,D=2,B=2] 

### Cost equations --> "Loop" of eval_Fax4Encode_bb1_in/2 
* CEs [9] --> Loop 6 
* CEs [7] --> Loop 7 
* CEs [8] --> Loop 8 

#### Loops of eval_Fax4Encode_bb1_in/2 
* Loop 6: eval_Fax4Encode_bb1_in(V__02,B)->  eval_Fax4Encode_bb1_in(V__02',B')
                  [V__02>=1,B'=2,B=2] 
* Loop 7: eval_Fax4Encode_bb1_in(V__02,B) [V__02>=1,B=2] 
* Loop 8: eval_Fax4Encode_bb1_in(V__02,B) [0>=V__02,B=2] 

### Ranking functions of CR eval_Fax4Encode_bb1_in(V__02,B) 

#### Partial ranking functions of CR eval_Fax4Encode_bb1_in(V__02,B) 


### Resulting Chains:eval_Fax4Encode_bb1_in(V__02,B) 
* [[6]]...
* [[6],8]
* [[6],7]
* [8]
* [7]


### Merging Chains  eval_Fax4Encode_bb1_in/2 into  External patterns of execution 
* [[8]] --> 1 
* [[7],[7,[6]],[8,[6]]] --> 2 
* [[[6]]] --> 3 


### Specialization of cost equations eval_Fax4Encode_bb0_in/2 
* CE 3 is refined into CE [10,11,12] 


#### Refined cost equations eval_Fax4Encode_bb0_in/2 
* CE 10: eval_Fax4Encode_bb0_in(V_cc,B) = 1+ eval_Fax4Encode_bb1_in(V_cc,C):1
     [0>=V_cc,C=2] 
* CE 11: eval_Fax4Encode_bb0_in(V_cc,B) = 1+ eval_Fax4Encode_bb1_in(V_cc,C):2
     [V_cc>=1,C=2] 
* CE 12: eval_Fax4Encode_bb0_in(V_cc,B) = 1+ eval_Fax4Encode_bb1_in(V_cc,C):3
     [V_cc>=1,C=2] 

### Cost equations --> "Loop" of eval_Fax4Encode_bb0_in/2 
* CEs [12] --> Loop 9 
* CEs [11] --> Loop 10 
* CEs [10] --> Loop 11 

#### Loops of eval_Fax4Encode_bb0_in/2 
* Loop 9: eval_Fax4Encode_bb0_in(V_cc,B) [V_cc>=1] 
* Loop 10: eval_Fax4Encode_bb0_in(V_cc,B) [V_cc>=1] 
* Loop 11: eval_Fax4Encode_bb0_in(V_cc,B) [0>=V_cc] 

### Ranking functions of CR eval_Fax4Encode_bb0_in(V_cc,B) 

#### Partial ranking functions of CR eval_Fax4Encode_bb0_in(V_cc,B) 


### Resulting Chains:eval_Fax4Encode_bb0_in(V_cc,B) 
* [11]
* [10]
* [9]...


### Merging Chains  eval_Fax4Encode_bb0_in/2 into  External patterns of execution 
* [[11]] --> 1 
* [[10]] --> 2 
* [[9]] --> 3 


### Specialization of cost equations eval_Fax4Encode_start/3 
* CE 2 is refined into CE [13,14,15] 


#### Refined cost equations eval_Fax4Encode_start/3 
* CE 13: eval_Fax4Encode_start(V_cc,V_s,B) = 0+ eval_Fax4Encode_bb0_in(V_cc,B):1
     [0>=V_cc] 
* CE 14: eval_Fax4Encode_start(V_cc,V_s,B) = 0+ eval_Fax4Encode_bb0_in(V_cc,B):2
     [V_cc>=1] 
* CE 15: eval_Fax4Encode_start(V_cc,V_s,B) = 0+ eval_Fax4Encode_bb0_in(V_cc,B):3
     [V_cc>=1] 

### Cost equations --> "Loop" of eval_Fax4Encode_start/3 
* CEs [15] --> Loop 12 
* CEs [14] --> Loop 13 
* CEs [13] --> Loop 14 

#### Loops of eval_Fax4Encode_start/3 
* Loop 12: eval_Fax4Encode_start(V_cc,V_s,B) [V_cc>=1] 
* Loop 13: eval_Fax4Encode_start(V_cc,V_s,B) [V_cc>=1] 
* Loop 14: eval_Fax4Encode_start(V_cc,V_s,B) [0>=V_cc] 

### Ranking functions of CR eval_Fax4Encode_start(V_cc,V_s,B) 

#### Partial ranking functions of CR eval_Fax4Encode_start(V_cc,V_s,B) 


### Resulting Chains:eval_Fax4Encode_start(V_cc,V_s,B) 
* [14]
* [13]
* [12]...


### Merging Chains  eval_Fax4Encode_start/3 into  External patterns of execution 
* [[14]] --> 1 
* [[13]] --> 2 
* [[12]] --> 3 


Computing Bounds
=====================================

#### Cost of loops [6] 

 * loop 6:eval_Fax4Encode_bb1_in(V__02,B) -> [eval_Fax4Encode_bb1_in(V__02',B')] 
1
#### Cost of phase [6]:eval_Fax4Encode_bb1_in(V__02,B) -> [eval_Fax4Encode_bb1_in(V__02',B')] 
1*it(6)+0
#### Cost of phase [6]:eval_Fax4Encode_bb1_in(V__02,B) -> [eval_Fax4Encode_bb1_in(V__02',B')] 
1*it(6)+0
#### Cost of phase [6]:eval_Fax4Encode_bb1_in(V__02,B) -> [eval_Fax4Encode_bb1_in(V__02',B')] 
1*it(6)+0
#### Cost of chains of eval_Fax4Encode_bb1_in(V__02,B):
* Chain [[6]]...: 1*it(6)+0
  with precondition: [V__02>=1,B=2] 

* Chain [[6],8]: 1*it(6)+0
  with precondition: [B=2,V__02>=1] 

* Chain [[6],7]: 1*it(6)+0
  with precondition: [B=2,V__02>=1] 

* Chain [8]: 0
  with precondition: [B=2,0>=V__02] 

* Chain [7]: 0
  with precondition: [B=2,V__02>=1] 


#### Cost of chains of eval_Fax4Encode_bb0_in(V_cc,B):
* Chain [11]: 1
  with precondition: [0>=V_cc] 

* Chain [10]: 1*s(3)+1
  with precondition: [V_cc>=1] 

* Chain [9]...: 1*s(4)+1
  with precondition: [V_cc>=1] 


#### Cost of chains of eval_Fax4Encode_start(V_cc,V_s,B):
* Chain [14]: 1
  with precondition: [0>=V_cc] 

* Chain [13]: 1*s(5)+1
  with precondition: [V_cc>=1] 

* Chain [12]...: 1*s(6)+1
  with precondition: [V_cc>=1] 


Closed-form bounds of eval_Fax4Encode_start(V_cc,V_s,B): 
-------------------------------------
* Chain [14] with precondition: [0>=V_cc] 
    - Upper bound: 1 
    - Complexity: constant 
* Chain [13] with precondition: [V_cc>=1] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [12]... with precondition: [V_cc>=1] 
    - Upper bound: inf 
    - Complexity: infinity 

### Maximum cost of eval_Fax4Encode_start(V_cc,V_s,B): inf 
Asymptotic class: infinity 

Time statistics: 
-------------------------------------
* Partial evaluation computed in 5 ms.
* Invariants computed in 5 ms.
   - Backward Invariants 4 ms.
   - Transitive Invariants 0 ms.
* Refinement performed in 10 ms.
* Termination proved in 1 ms.
* Upper bounds computed in 8 ms.
   - Equation cost structures 3 ms.
   - Phase cost structures 1 ms.
   - Chain cost structures 3 ms.
   - Solving cost expressions 0 ms.
* Total analysis performed in 39 ms.


Warning: Ignored call to eval_zexit_stop/1 in equation eval_zexit_bb8_in/1 

Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. recursive  : [eval_zexit_NewDefault_in/6,eval_zexit_bb2_in/6,eval_zexit_bb6_in/6]
1. recursive  : [eval_zexit_bb1_in/4,loop_cont_eval_zexit_bb2_in/5]
2. non_recursive  : [eval_zexit_bb8_in/1]
3. non_recursive  : [eval_zexit_20/1]
4. non_recursive  : [eval_zexit_19/2]
5. non_recursive  : [loop_cont_eval_zexit_bb1_in/3]
6. non_recursive  : [eval_zexit_bb0_in/1]
7. non_recursive  : [eval_zexit_start/1]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into eval_zexit_bb2_in/6
1. SCC is partially evaluated into eval_zexit_bb1_in/4
2. SCC is completely evaluated into other SCCs
3. SCC is completely evaluated into other SCCs
4. SCC is completely evaluated into other SCCs
5. SCC is partially evaluated into loop_cont_eval_zexit_bb1_in/3
6. SCC is partially evaluated into eval_zexit_bb0_in/1
7. SCC is partially evaluated into eval_zexit_start/1

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations eval_zexit_bb2_in/6 
* CE 15 is refined into CE [18] 
* CE 14 is refined into CE [19] 
* CE 13 is refined into CE [20] 
* CE 12 is refined into CE [21] 
* CE 17 is refined into CE [22] 
* CE 16 is refined into CE [23] 
* CE 10 is refined into CE [24] 
* CE 11 is refined into CE [25] 


#### Refined cost equations eval_zexit_bb2_in/6 
* CE 18: eval_zexit_bb2_in(V_used_0,V_scanned_0,V_count_0,B,C,D) = 0
     [V_used_0>=V_count_0,V_count_0>=1,B=3] 
* CE 19: eval_zexit_bb2_in(V_used_0,V_scanned_0,V_count_0,B,C,D) = 0
     [V_used_0>=V_count_0,0>=V_count_0+1,B=3] 
* CE 20: eval_zexit_bb2_in(V_used_0,V_scanned_0,V_count_0,B,C,D) = 0
     [V_used_0>=V_count_0,V_count_0>=1,V_count_0+C=V_used_0+V_scanned_0+1,B=2] 
* CE 21: eval_zexit_bb2_in(V_used_0,V_scanned_0,V_count_0,B,C,D) = 0
     [V_used_0>=V_count_0,0>=V_count_0+1,V_count_0+C=V_used_0+V_scanned_0+1,B=2] 
* CE 22: eval_zexit_bb2_in(V_used_0,V_scanned_0,V_count_0,B,C,D) = 0
     [V_used_0>=0,V_used_0+V_scanned_0=D,B=4,V_count_0=0] 
* CE 23: eval_zexit_bb2_in(V_used_0,V_scanned_0,V_count_0,B,C,D) = 0
     [V_used_0>=0,B=3,V_count_0=0] 
* CE 24: eval_zexit_bb2_in(V_used_0,V_scanned_0,V_count_0,B,C,D) = 1+ eval_zexit_bb2_in(V_used_0,V_scanned_0,E,B,C,D)
     [V_used_0>=V_count_0,B>=2,V_count_0>=1,4>=B,V_count_0=E+1] 
* CE 25: eval_zexit_bb2_in(V_used_0,V_scanned_0,V_count_0,B,C,D) = 1+ eval_zexit_bb2_in(V_used_0,V_scanned_0,E,B,C,D)
     [V_used_0>=V_count_0,B>=2,4>=B,0>=V_count_0+1,V_count_0=E+1] 

### Cost equations --> "Loop" of eval_zexit_bb2_in/6 
* CEs [24] --> Loop 16 
* CEs [25] --> Loop 17 
* CEs [18] --> Loop 18 
* CEs [19] --> Loop 19 
* CEs [20] --> Loop 20 
* CEs [21] --> Loop 21 
* CEs [22] --> Loop 22 
* CEs [23] --> Loop 23 

#### Loops of eval_zexit_bb2_in/6 
* Loop 16: eval_zexit_bb2_in(V_used_0,V_scanned_0,V_count_0,B,C,D)->  eval_zexit_bb2_in(V_used_0,V_scanned_0,V_count_0',B,C,D)
                  [V_used_0>=V_count_0,B>=2,V_count_0>=1,4>=B,V_count_0=V_count_0'+1] 
* Loop 17: eval_zexit_bb2_in(V_used_0,V_scanned_0,V_count_0,B,C,D)->  eval_zexit_bb2_in(V_used_0,V_scanned_0,V_count_0',B,C,D)
                  [V_used_0>=V_count_0,B>=2,4>=B,0>=V_count_0+1,V_count_0=V_count_0'+1] 
* Loop 18: eval_zexit_bb2_in(V_used_0,V_scanned_0,V_count_0,B,C,D) [V_used_0>=V_count_0,V_count_0>=1,B=3] 
* Loop 19: eval_zexit_bb2_in(V_used_0,V_scanned_0,V_count_0,B,C,D) [V_used_0>=V_count_0,0>=V_count_0+1,B=3] 
* Loop 20: eval_zexit_bb2_in(V_used_0,V_scanned_0,V_count_0,B,C,D) [V_used_0>=V_count_0,V_count_0>=1,V_used_0+V_scanned_0+1=V_count_0+C,B=2] 
* Loop 21: eval_zexit_bb2_in(V_used_0,V_scanned_0,V_count_0,B,C,D) [V_used_0>=V_count_0,0>=V_count_0+1,V_used_0+V_scanned_0+1=V_count_0+C,B=2] 
* Loop 22: eval_zexit_bb2_in(V_used_0,V_scanned_0,V_count_0,B,C,D) [V_used_0>=0,V_used_0+V_scanned_0=D,B=4,V_count_0=0] 
* Loop 23: eval_zexit_bb2_in(V_used_0,V_scanned_0,V_count_0,B,C,D) [V_used_0>=0,B=3,V_count_0=0] 

### Ranking functions of CR eval_zexit_bb2_in(V_used_0,V_scanned_0,V_count_0,B,C,D) 
* RF of phase [16]: [V_count_0]

#### Partial ranking functions of CR eval_zexit_bb2_in(V_used_0,V_scanned_0,V_count_0,B,C,D) 
* Partial RF of phase [16]:
  - RF of loop [16:1]:
    V_count_0


### Resulting Chains:eval_zexit_bb2_in(V_used_0,V_scanned_0,V_count_0,B,C,D) 
* [[17]]...
* [[17],21]
* [[17],19]
* [[16],23]
* [[16],22]
* [[16],20]
* [[16],18]
* [23]
* [22]
* [21]
* [20]
* [19]
* [18]


### Merging Chains  eval_zexit_bb2_in/6 into  External patterns of execution 
* [[23]] --> 1 
* [[22]] --> 2 
* [[21]] --> 3 
* [[20]] --> 4 
* [[21,[17]]] --> 5 
* [[20,[16]]] --> 6 
* [[19],[19,[17]]] --> 7 
* [[18],[18,[16]],[23,[16]]] --> 8 
* [[22,[16]]] --> 9 
* [[[17]]] --> 10 


### Specialization of cost equations eval_zexit_bb1_in/4 
* CE 6 is refined into CE [26,27,28,29] 
* CE 7 is refined into CE [30,31,32,33,34] 
* CE 5 is refined into CE [35,36,37] 


#### Refined cost equations eval_zexit_bb1_in/4 
* CE 26: eval_zexit_bb1_in(V_used_0,V_scanned_0,B,C) = 1+ eval_zexit_bb2_in(D,V_scanned_0,E,F,G,H):1
     [F=3,E=0,D=0,B=3,V_used_0=0] 
* CE 27: eval_zexit_bb1_in(V_used_0,V_scanned_0,B,C) = 1+ eval_zexit_bb2_in(V_used_0,V_scanned_0,V_used_0,D,E,F):7
     [0>=V_used_0+1,D=3,B=3] 
* CE 28: eval_zexit_bb1_in(V_used_0,V_scanned_0,B,C) = 1+ eval_zexit_bb2_in(V_used_0,V_scanned_0,V_used_0,D,E,F):8
     [V_used_0>=1,D=3,B=3] 
* CE 29: eval_zexit_bb1_in(V_used_0,V_scanned_0,B,C) = 1+ eval_zexit_bb2_in(V_used_0,V_scanned_0,V_used_0,D,E,F):10
     [0>=V_used_0+1,D=3,B=3] 
* CE 30: eval_zexit_bb1_in(V_used_0,V_scanned_0,B,C) = 1+ eval_zexit_bb2_in(V_used_0,D,V_used_0,E,C,F):3
     [0>=V_used_0+1,C=D+1,C=V_scanned_0+1,E=2,B=2] 
* CE 31: eval_zexit_bb1_in(V_used_0,V_scanned_0,B,C) = 1+ eval_zexit_bb2_in(V_used_0,D,V_used_0,E,C,F):4
     [V_used_0>=1,C=D+1,C=V_scanned_0+1,E=2,B=2] 
* CE 32: eval_zexit_bb1_in(V_used_0,V_scanned_0,B,C) = 1+ eval_zexit_bb2_in(V_used_0,V_scanned_0,V_used_0,D,C,E):5
     [C>=V_scanned_0+2,0>=V_used_0+1,D=2,B=2] 
* CE 33: eval_zexit_bb1_in(V_used_0,V_scanned_0,B,C) = 1+ eval_zexit_bb2_in(V_used_0,V_scanned_0,V_used_0,D,C,E):6
     [V_used_0+V_scanned_0>=C,C>=V_scanned_0+2,D=2,B=2] 
* CE 34: eval_zexit_bb1_in(V_used_0,V_scanned_0,B,C) = 1+ eval_zexit_bb2_in(V_used_0,V_scanned_0,V_used_0,D,C,E):10
     [0>=V_used_0+1,D=2,B=2] 
* CE 35: eval_zexit_bb1_in(V_used_0,V_scanned_0,B,C) = 2+ eval_zexit_bb2_in(D,V_scanned_0,E,F,G,V_scanned_0):2+ eval_zexit_bb1_in(G,V_scanned_0,B,C)
     [F=4,E=0,D=0,V_used_0=0] 
* CE 36: eval_zexit_bb1_in(V_used_0,V_scanned_0,B,C) = 2+ eval_zexit_bb2_in(V_used_0,D,V_used_0,E,F,G):9+ eval_zexit_bb1_in(F,G,B,C)
     [V_used_0>=1,G=V_used_0+D,G=V_used_0+V_scanned_0,E=4] 
* CE 37: eval_zexit_bb1_in(V_used_0,V_scanned_0,B,C) = 2+ eval_zexit_bb2_in(V_used_0,V_scanned_0,V_used_0,D,E,F):10
     [0>=V_used_0+1,D=4] 

### Cost equations --> "Loop" of eval_zexit_bb1_in/4 
* CEs [29] --> Loop 24 
* CEs [34,37] --> Loop 25 
* CEs [36] --> Loop 26 
* CEs [35] --> Loop 27 
* CEs [28] --> Loop 28 
* CEs [27] --> Loop 29 
* CEs [33] --> Loop 30 
* CEs [32] --> Loop 31 
* CEs [31] --> Loop 32 
* CEs [30] --> Loop 33 
* CEs [26] --> Loop 34 

#### Loops of eval_zexit_bb1_in/4 
* Loop 24: eval_zexit_bb1_in(V_used_0,V_scanned_0,B,C) [0>=V_used_0+1,B=3] 
* Loop 25: eval_zexit_bb1_in(V_used_0,V_scanned_0,B,C) [0>=V_used_0+1] 
* Loop 26: eval_zexit_bb1_in(V_used_0,V_scanned_0,B,C)->  eval_zexit_bb1_in(V_used_0',V_scanned_0',B,C)
                  [V_used_0>=1,V_used_0+V_scanned_0=V_scanned_0'] 
* Loop 27: eval_zexit_bb1_in(V_used_0,V_scanned_0,B,C)->  eval_zexit_bb1_in(V_used_0',V_scanned_0,B,C)
                  [V_used_0=0] 
* Loop 28: eval_zexit_bb1_in(V_used_0,V_scanned_0,B,C) [V_used_0>=1,B=3] 
* Loop 29: eval_zexit_bb1_in(V_used_0,V_scanned_0,B,C) [0>=V_used_0+1,B=3] 
* Loop 30: eval_zexit_bb1_in(V_used_0,V_scanned_0,B,C) [V_used_0+V_scanned_0>=C,C>=V_scanned_0+2,B=2] 
* Loop 31: eval_zexit_bb1_in(V_used_0,V_scanned_0,B,C) [C>=V_scanned_0+2,0>=V_used_0+1,B=2] 
* Loop 32: eval_zexit_bb1_in(V_used_0,V_scanned_0,B,C) [V_used_0>=1,V_scanned_0+1=C,B=2] 
* Loop 33: eval_zexit_bb1_in(V_used_0,V_scanned_0,B,C) [0>=V_used_0+1,V_scanned_0+1=C,B=2] 
* Loop 34: eval_zexit_bb1_in(V_used_0,V_scanned_0,B,C) [B=3,V_used_0=0] 

### Ranking functions of CR eval_zexit_bb1_in(V_used_0,V_scanned_0,B,C) 

#### Partial ranking functions of CR eval_zexit_bb1_in(V_used_0,V_scanned_0,B,C) 


### Resulting Chains:eval_zexit_bb1_in(V_used_0,V_scanned_0,B,C) 
* [[26,27]]...
* [[26,27],34]
* [[26,27],33]
* [[26,27],32]
* [[26,27],31]
* [[26,27],30]
* [[26,27],29]
* [[26,27],28]
* [[26,27],25]...
* [[26,27],24]...
* [34]
* [33]
* [32]
* [31]
* [30]
* [29]
* [28]
* [25]...
* [24]...


### Merging Chains  eval_zexit_bb1_in/4 into  External patterns of execution 
* [[28],[34],[28,[26,27]],[29,[26,27]],[34,[26,27]]] --> 1 
* [[33]] --> 2 
* [[32]] --> 3 
* [[31]] --> 4 
* [[30,[26,27]],[31,[26,27]],[32,[26,27]],[33,[26,27]]] --> 5 
* [[30]] --> 6 
* [[29]] --> 7 
* [[24]] --> 8 
* [[24,[26,27]]] --> 9 
* [[25]] --> 10 
* [[[26,27]]] --> 11 
* [[25,[26,27]]] --> 12 


### Specialization of cost equations loop_cont_eval_zexit_bb1_in/3 
* CE 9 is refined into CE [38] 
* CE 8 is refined into CE [39] 


#### Refined cost equations loop_cont_eval_zexit_bb1_in/3 
* CE 38: loop_cont_eval_zexit_bb1_in(D,A,B) = 0
     [D=3] 
* CE 39: loop_cont_eval_zexit_bb1_in(D,A,B) = 0
     [D=2] 

### Cost equations --> "Loop" of loop_cont_eval_zexit_bb1_in/3 
* CEs [38] --> Loop 35 
* CEs [39] --> Loop 36 

#### Loops of loop_cont_eval_zexit_bb1_in/3 
* Loop 35: loop_cont_eval_zexit_bb1_in(D,A,B) [D=3] 
* Loop 36: loop_cont_eval_zexit_bb1_in(D,A,B) [D=2] 

### Ranking functions of CR loop_cont_eval_zexit_bb1_in(D,A,B) 

#### Partial ranking functions of CR loop_cont_eval_zexit_bb1_in(D,A,B) 


### Resulting Chains:loop_cont_eval_zexit_bb1_in(D,A,B) 
* [36]
* [35]


### Merging Chains  loop_cont_eval_zexit_bb1_in/3 into  External patterns of execution 
* [[36]] --> 1 
* [[35]] --> 2 


### Specialization of cost equations eval_zexit_bb0_in/1 
* CE 3 is refined into CE [40,41,42,43,44,45,46] 
* CE 4 is refined into CE [47,48,49,50,51,52,53,54,55,56] 


#### Refined cost equations eval_zexit_bb0_in/1 
* CE 40: eval_zexit_bb0_in(B) = 1+ eval_zexit_bb1_in(C,D,E,F):1+ loop_cont_eval_zexit_bb1_in(G,F,B):2
     [C>=0,G=3,E=3,D=0] 
* CE 41: eval_zexit_bb0_in(B) = 1+ eval_zexit_bb1_in(C,D,E,F):3+ loop_cont_eval_zexit_bb1_in(G,H,B):1
     [C>=1,H=1,G=2,F=1,E=2,D=0] 
* CE 42: eval_zexit_bb0_in(B) = 1+ eval_zexit_bb1_in(C,D,E,F):5+ loop_cont_eval_zexit_bb1_in(G,F,B):1
     [F>=C+1,C>=0,G=2,E=2,D=0] 
* CE 43: eval_zexit_bb0_in(B) = 1+ eval_zexit_bb1_in(C,D,E,F):6+ loop_cont_eval_zexit_bb1_in(G,F,B):1
     [C>=F,F>=2,G=2,E=2,D=0] 
* CE 44: eval_zexit_bb0_in(B) = 1+ eval_zexit_bb1_in(C,D,E,F):9
     [C>=0,G=3,E=3,D=0] 
* CE 45: eval_zexit_bb0_in(B) = 1+ eval_zexit_bb1_in(C,D,E,F):11
     [C>=0,D=0] 
* CE 46: eval_zexit_bb0_in(B) = 1+ eval_zexit_bb1_in(C,D,E,F):12
     [C>=0,D=0] 
* CE 47: eval_zexit_bb0_in(B) = 1+ eval_zexit_bb1_in(C,D,E,F):1+ loop_cont_eval_zexit_bb1_in(G,F,B):2
     [G=3,E=3,D=0,C=0] 
* CE 48: eval_zexit_bb0_in(B) = 1+ eval_zexit_bb1_in(C,D,E,F):2+ loop_cont_eval_zexit_bb1_in(G,H,B):1
     [0>=C+1,H=1,G=2,F=1,E=2,D=0] 
* CE 49: eval_zexit_bb0_in(B) = 1+ eval_zexit_bb1_in(C,D,E,F):4+ loop_cont_eval_zexit_bb1_in(G,F,B):1
     [F>=2,0>=C+1,G=2,E=2,D=0] 
* CE 50: eval_zexit_bb0_in(B) = 1+ eval_zexit_bb1_in(C,D,E,F):5+ loop_cont_eval_zexit_bb1_in(G,F,B):1
     [F>=1,G=2,E=2,D=0,C=0] 
* CE 51: eval_zexit_bb0_in(B) = 1+ eval_zexit_bb1_in(C,D,E,F):7+ loop_cont_eval_zexit_bb1_in(G,F,B):2
     [0>=C+1,G=3,E=3,D=0] 
* CE 52: eval_zexit_bb0_in(B) = 1+ eval_zexit_bb1_in(C,D,E,F):8
     [0>=C+1,G=3,E=3,D=0] 
* CE 53: eval_zexit_bb0_in(B) = 1+ eval_zexit_bb1_in(C,D,E,F):9
     [G=3,E=3,D=0,C=0] 
* CE 54: eval_zexit_bb0_in(B) = 1+ eval_zexit_bb1_in(C,D,E,F):10
     [0>=C+1,D=0] 
* CE 55: eval_zexit_bb0_in(B) = 1+ eval_zexit_bb1_in(C,D,E,F):11
     [D=0,C=0] 
* CE 56: eval_zexit_bb0_in(B) = 1+ eval_zexit_bb1_in(C,D,E,F):12
     [D=0,C=0] 

### Cost equations --> "Loop" of eval_zexit_bb0_in/1 
* CEs [44,45,46,52,53,54,55,56] --> Loop 37 
* CEs [40,41,42,43,47,48,49,50,51] --> Loop 38 

#### Loops of eval_zexit_bb0_in/1 
* Loop 37: eval_zexit_bb0_in(B) [] 
* Loop 38: eval_zexit_bb0_in(B) [] 

### Ranking functions of CR eval_zexit_bb0_in(B) 

#### Partial ranking functions of CR eval_zexit_bb0_in(B) 


### Resulting Chains:eval_zexit_bb0_in(B) 
* [38]
* [37]...


### Merging Chains  eval_zexit_bb0_in/1 into  External patterns of execution 
* [[38]] --> 1 
* [[37]] --> 2 


### Specialization of cost equations eval_zexit_start/1 
* CE 2 is refined into CE [57,58] 


#### Refined cost equations eval_zexit_start/1 
* CE 57: eval_zexit_start(B) = 0+ eval_zexit_bb0_in(B):1
     [] 
* CE 58: eval_zexit_start(B) = 0+ eval_zexit_bb0_in(B):2
     [] 

### Cost equations --> "Loop" of eval_zexit_start/1 
* CEs [58] --> Loop 39 
* CEs [57] --> Loop 40 

#### Loops of eval_zexit_start/1 
* Loop 39: eval_zexit_start(B) [] 
* Loop 40: eval_zexit_start(B) [] 

### Ranking functions of CR eval_zexit_start(B) 

#### Partial ranking functions of CR eval_zexit_start(B) 


### Resulting Chains:eval_zexit_start(B) 
* [40]
* [39]...


### Merging Chains  eval_zexit_start/1 into  External patterns of execution 
* [[40]] --> 1 
* [[39]] --> 2 


Computing Bounds
=====================================

#### Cost of loops [17] 

 * loop 17:eval_zexit_bb2_in(V_used_0,V_scanned_0,V_count_0,B,C,D) -> [eval_zexit_bb2_in(V_used_0',V_scanned_0',V_count_0',B',C',D')] 
1
#### Cost of phase [17]:eval_zexit_bb2_in(V_used_0,V_scanned_0,V_count_0,B,C,D) -> [eval_zexit_bb2_in(V_used_0',V_scanned_0',V_count_0',B',C',D')] 
1*it(17)+0
#### Cost of phase [17]:eval_zexit_bb2_in(V_used_0,V_scanned_0,V_count_0,B,C,D) -> [eval_zexit_bb2_in(V_used_0',V_scanned_0',V_count_0',B',C',D')] 
1*it(17)+0
#### Cost of phase [17]:eval_zexit_bb2_in(V_used_0,V_scanned_0,V_count_0,B,C,D) -> [eval_zexit_bb2_in(V_used_0',V_scanned_0',V_count_0',B',C',D')] 
1*it(17)+0
#### Cost of loops [16] 

 * loop 16:eval_zexit_bb2_in(V_used_0,V_scanned_0,V_count_0,B,C,D) -> [eval_zexit_bb2_in(V_used_0',V_scanned_0',V_count_0',B',C',D')] 
1
#### Cost of phase [16]:eval_zexit_bb2_in(V_used_0,V_scanned_0,V_count_0,B,C,D) -> [eval_zexit_bb2_in(V_used_0',V_scanned_0',V_count_0',B',C',D')] 
1*it(16)+0
  Such that:it(16) =< V_count_0
it(16) =< V_count_0-V_count_0'

#### Cost of phase [16]:eval_zexit_bb2_in(V_used_0,V_scanned_0,V_count_0,B,C,D) -> [eval_zexit_bb2_in(V_used_0',V_scanned_0',V_count_0',B',C',D')] 
1*it(16)+0
  Such that:it(16) =< V_count_0
it(16) =< V_count_0-V_count_0'

#### Cost of phase [16]:eval_zexit_bb2_in(V_used_0,V_scanned_0,V_count_0,B,C,D) -> [eval_zexit_bb2_in(V_used_0',V_scanned_0',V_count_0',B',C',D')] 
1*it(16)+0
  Such that:it(16) =< V_count_0
it(16) =< V_count_0-V_count_0'

#### Cost of phase [16]:eval_zexit_bb2_in(V_used_0,V_scanned_0,V_count_0,B,C,D) -> [eval_zexit_bb2_in(V_used_0',V_scanned_0',V_count_0',B',C',D')] 
1*it(16)+0
  Such that:it(16) =< V_count_0
it(16) =< V_count_0-V_count_0'

#### Cost of chains of eval_zexit_bb2_in(V_used_0,V_scanned_0,V_count_0,B,C,D):
* Chain [[17]]...: 1*it(17)+0
  with precondition: [0>=V_count_0+1,V_used_0>=V_count_0,B>=2,4>=B] 

* Chain [[17],21]: 1*it(17)+0
  with precondition: [B=2,0>=V_count_0+1,V_used_0>=V_count_0,V_count_0+C>=V_scanned_0+V_used_0+2] 

* Chain [[17],19]: 1*it(17)+0
  with precondition: [B=3,0>=V_count_0+1,V_used_0>=V_count_0] 

* Chain [[16],23]: 1*it(16)+0
  Such that:it(16) =< V_count_0

  with precondition: [B=3,V_count_0>=1,V_used_0>=V_count_0] 

* Chain [[16],22]: 1*it(16)+0
  Such that:it(16) =< V_count_0

  with precondition: [B=4,V_scanned_0+V_used_0=D,V_count_0>=1,V_used_0>=V_count_0] 

* Chain [[16],20]: 1*it(16)+0
  Such that:it(16) =< -V_used_0-V_scanned_0+V_count_0+C

  with precondition: [B=2,V_used_0>=V_count_0,V_scanned_0+V_used_0>=C,V_count_0+C>=V_scanned_0+V_used_0+2] 

* Chain [[16],18]: 1*it(16)+0
  Such that:it(16) =< V_count_0

  with precondition: [B=3,V_count_0>=2,V_used_0>=V_count_0] 

* Chain [23]: 0
  with precondition: [V_count_0=0,B=3,V_used_0>=0] 

* Chain [22]: 0
  with precondition: [V_count_0=0,B=4,V_scanned_0+V_used_0=D,V_used_0>=0] 

* Chain [21]: 0
  with precondition: [B=2,V_count_0+C=V_scanned_0+V_used_0+1,0>=V_count_0+1,V_used_0>=V_count_0] 

* Chain [20]: 0
  with precondition: [B=2,V_count_0+C=V_scanned_0+V_used_0+1,V_count_0>=1,V_used_0>=V_count_0] 

* Chain [19]: 0
  with precondition: [B=3,0>=V_count_0+1,V_used_0>=V_count_0] 

* Chain [18]: 0
  with precondition: [B=3,V_count_0>=1,V_used_0>=V_count_0] 


#### Cost of loops [26,27] 

 * loop 26:eval_zexit_bb1_in(V_used_0,V_scanned_0,B,C) -> [eval_zexit_bb1_in(V_used_0',V_scanned_0',B',C')] 
1*s(5)+2
  Such that:s(5) =< -V_scanned_0+V_scanned_0'

 * loop 27:eval_zexit_bb1_in(V_used_0,V_scanned_0,B,C) -> [eval_zexit_bb1_in(V_used_0',V_scanned_0',B',C')] 
2
#### Cost of phase [26,27]:eval_zexit_bb1_in(V_used_0,V_scanned_0,B,C) -> [eval_zexit_bb1_in(V_used_0',V_scanned_0',B',C')] 
4*it(26)+1*s(6)+0
#### Cost of phase [26,27]:eval_zexit_bb1_in(V_used_0,V_scanned_0,B,C) -> [eval_zexit_bb1_in(V_used_0',V_scanned_0',B',C')] 
4*it(26)+1*s(6)+0
#### Cost of phase [26,27]:eval_zexit_bb1_in(V_used_0,V_scanned_0,B,C) -> [eval_zexit_bb1_in(V_used_0',V_scanned_0',B',C')] 
4*it(26)+1*s(6)+0
#### Cost of phase [26,27]:eval_zexit_bb1_in(V_used_0,V_scanned_0,B,C) -> [eval_zexit_bb1_in(V_used_0',V_scanned_0',B',C')] 
4*it(26)+1*s(6)+0
#### Cost of phase [26,27]:eval_zexit_bb1_in(V_used_0,V_scanned_0,B,C) -> [eval_zexit_bb1_in(V_used_0',V_scanned_0',B',C')] 
4*it(26)+1*s(6)+0
#### Cost of phase [26,27]:eval_zexit_bb1_in(V_used_0,V_scanned_0,B,C) -> [eval_zexit_bb1_in(V_used_0',V_scanned_0',B',C')] 
4*it(26)+1*s(6)+0
#### Cost of loops [26,27] 

 * loop 26:eval_zexit_bb1_in(V_used_0,V_scanned_0,B,C) -> [eval_zexit_bb1_in(V_used_0',V_scanned_0',B',C')] 
1*s(5)+2
  Such that:s(5) =< -V_scanned_0+V_scanned_0'

 * loop 27:eval_zexit_bb1_in(V_used_0,V_scanned_0,B,C) -> [eval_zexit_bb1_in(V_used_0',V_scanned_0',B',C')] 
2
#### Cost of phase [26,27]:eval_zexit_bb1_in(V_used_0,V_scanned_0,B,C) -> [] 
4*it(26)+1*it([30])+1*s(6)+1*s(9)+0
  Such that:it([30]) =< 1

#### Cost of phase [26,27]:eval_zexit_bb1_in(V_used_0,V_scanned_0,B,C) -> [eval_zexit_bb1_in(V_used_0',V_scanned_0',B',C')] 
4*it(26)+1*s(6)+0
#### Cost of phase [26,27]:eval_zexit_bb1_in(V_used_0,V_scanned_0,B,C) -> [eval_zexit_bb1_in(V_used_0',V_scanned_0',B',C')] 
4*it(26)+1*s(6)+0
#### Cost of loops [26,27] 

 * loop 26:eval_zexit_bb1_in(V_used_0,V_scanned_0,B,C) -> [eval_zexit_bb1_in(V_used_0',V_scanned_0',B',C')] 
1*s(5)+2
  Such that:s(5) =< -V_scanned_0+V_scanned_0'

 * loop 27:eval_zexit_bb1_in(V_used_0,V_scanned_0,B,C) -> [eval_zexit_bb1_in(V_used_0',V_scanned_0',B',C')] 
2
#### Cost of phase [26,27]:eval_zexit_bb1_in(V_used_0,V_scanned_0,B,C) -> [] 
4*it(26)+1*it([28])+1*s(6)+2*s(13)+0
  Such that:it([28]) =< 1

#### Cost of phase [26,27]:eval_zexit_bb1_in(V_used_0,V_scanned_0,B,C) -> [eval_zexit_bb1_in(V_used_0',V_scanned_0',B',C')] 
4*it(26)+1*s(6)+0
#### Cost of phase [26,27]:eval_zexit_bb1_in(V_used_0,V_scanned_0,B,C) -> [eval_zexit_bb1_in(V_used_0',V_scanned_0',B',C')] 
4*it(26)+1*s(6)+0
#### Cost of chains of eval_zexit_bb1_in(V_used_0,V_scanned_0,B,C):
* Chain [[26,27]]...: 5*it(26)+0
  with precondition: [V_used_0>=0] 

* Chain [[26,27],34]: 5*it(26)+1
  with precondition: [B=3,V_used_0>=0,V_scanned_0>=0] 

* Chain [[26,27],33]: 5*it(26)+1
  with precondition: [B=2,V_used_0>=0,V_scanned_0>=0,C>=V_scanned_0+V_used_0+1] 

* Chain [[26,27],32]: 5*it(26)+1
  with precondition: [B=2,V_used_0>=0,V_scanned_0>=0,C>=V_scanned_0+V_used_0+1] 

* Chain [[26,27],31]: 6*it(26)+1
  with precondition: [B=2,V_used_0>=0,V_scanned_0>=0,C>=V_scanned_0+V_used_0+2] 

* Chain [[26,27],30]: 4*it(26)+1*it([30])+1*s(6)+1*s(9)+0
  Such that:it([30]) =< 1

  with precondition: [B=2,V_used_0>=0,V_scanned_0>=0,C>=V_scanned_0+V_used_0+2] 

* Chain [[26,27],29]: 6*it(26)+1
  with precondition: [B=3,V_used_0>=0,V_scanned_0>=0] 

* Chain [[26,27],28]: 4*it(26)+1*it([28])+1*s(6)+2*s(13)+0
  Such that:it([28]) =< 1

  with precondition: [B=3,V_used_0>=0,V_scanned_0>=0] 

* Chain [[26,27],25]...: 6*aux(23)+0
  with precondition: [V_used_0>=0,V_scanned_0>=0] 

* Chain [[26,27],24]...: 6*it(26)+1
  with precondition: [B=3,V_used_0>=0,V_scanned_0>=0] 

* Chain [34]: 1
  with precondition: [V_used_0=0,B=3,V_scanned_0>=0] 

* Chain [33]: 1
  with precondition: [B=2,V_scanned_0+1=C,0>=V_used_0+1,V_scanned_0>=0] 

* Chain [32]: 1
  with precondition: [B=2,V_scanned_0+1=C,V_used_0>=1,V_scanned_0>=0] 

* Chain [31]: 1*s(7)+1
  with precondition: [B=2,0>=V_used_0+1,V_scanned_0>=0,C>=V_scanned_0+2] 

* Chain [30]: 1*s(8)+1
  Such that:s(8) =< V_used_0

  with precondition: [B=2,V_scanned_0>=0,C>=V_scanned_0+2,V_scanned_0+V_used_0>=C] 

* Chain [29]: 1*s(10)+1
  with precondition: [B=3,0>=V_used_0+1,V_scanned_0>=0] 

* Chain [28]: 2*s(12)+1
  Such that:s(11) =< V_used_0
s(12) =< s(11)

  with precondition: [B=3,V_used_0>=1,V_scanned_0>=0] 

* Chain [25]...: 1*aux(23)+0
  with precondition: [0>=V_used_0+1,V_scanned_0>=0] 

* Chain [24]...: 1*s(17)+1
  with precondition: [B=3,0>=V_used_0+1,V_scanned_0>=0] 


#### Cost of chains of loop_cont_eval_zexit_bb1_in(D,A,B):
* Chain [36]: 0
  with precondition: [D=2] 

* Chain [35]: 0
  with precondition: [D=3] 


#### Cost of chains of eval_zexit_bb0_in(B):
* Chain [38]: 1*aux(26)+0
  with precondition: [] 

* Chain [37]...: 1*aux(27)+0
  with precondition: [] 


#### Cost of chains of eval_zexit_start(B):
* Chain [40]: 1*s(54)+0
  with precondition: [] 

* Chain [39]...: 1*s(55)+0
  with precondition: [] 


Closed-form bounds of eval_zexit_start(B): 
-------------------------------------
* Chain [40] with precondition: [] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [39]... with precondition: [] 
    - Upper bound: inf 
    - Complexity: infinity 

### Maximum cost of eval_zexit_start(B): inf 
Asymptotic class: infinity 

Time statistics: 
-------------------------------------
* Partial evaluation computed in 23 ms.
* Invariants computed in 60 ms.
   - Backward Invariants 42 ms.
   - Transitive Invariants 5 ms.
* Refinement performed in 83 ms.
* Termination proved in 5 ms.
* Upper bounds computed in 140 ms.
   - Equation cost structures 28 ms.
   - Phase cost structures 82 ms.
   - Chain cost structures 30 ms.
   - Solving cost expressions 0 ms.
* Total analysis performed in 350 ms.


Warning: Ignored call to eval_printKeyHash_stop/1 in equation eval_printKeyHash_20/1 

Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. recursive  : [eval_printKeyHash_8/3,eval_printKeyHash_9/3,eval_printKeyHash_bb1_in/2]
1. recursive  : [eval_printKeyHash_16/3,eval_printKeyHash_17/3,eval_printKeyHash_bb4_in/2]
2. non_recursive  : [eval_printKeyHash_20/1]
3. non_recursive  : [eval_printKeyHash_19/1]
4. non_recursive  : [loop_cont_eval_printKeyHash_bb4_in/2]
5. non_recursive  : [eval_printKeyHash_12/1]
6. non_recursive  : [eval_printKeyHash_11/1]
7. non_recursive  : [loop_cont_eval_printKeyHash_bb1_in/2]
8. non_recursive  : [eval_printKeyHash_4/1]
9. non_recursive  : [eval_printKeyHash_3/2]
10. non_recursive  : [eval_printKeyHash_2/2]
11. non_recursive  : [eval_printKeyHash_bb0_in/1]
12. non_recursive  : [eval_printKeyHash_start/2]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into eval_printKeyHash_bb1_in/2
1. SCC is partially evaluated into eval_printKeyHash_bb4_in/2
2. SCC is completely evaluated into other SCCs
3. SCC is completely evaluated into other SCCs
4. SCC is completely evaluated into other SCCs
5. SCC is partially evaluated into eval_printKeyHash_12/1
6. SCC is completely evaluated into other SCCs
7. SCC is completely evaluated into other SCCs
8. SCC is partially evaluated into eval_printKeyHash_4/1
9. SCC is completely evaluated into other SCCs
10. SCC is completely evaluated into other SCCs
11. SCC is partially evaluated into eval_printKeyHash_bb0_in/1
12. SCC is partially evaluated into eval_printKeyHash_start/2

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations eval_printKeyHash_bb1_in/2 
* CE 6 is refined into CE [10] 
* CE 5 is refined into CE [11] 


#### Refined cost equations eval_printKeyHash_bb1_in/2 
* CE 10: eval_printKeyHash_bb1_in(V_i_0,B) = 0
     [V_i_0>=8,B=3] 
* CE 11: eval_printKeyHash_bb1_in(V_i_0,B) = 1+ eval_printKeyHash_bb1_in(C,D)
     [V_i_0>=0,7>=V_i_0,V_i_0+1=C,D=3,B=3] 

### Cost equations --> "Loop" of eval_printKeyHash_bb1_in/2 
* CEs [11] --> Loop 9 
* CEs [10] --> Loop 10 

#### Loops of eval_printKeyHash_bb1_in/2 
* Loop 9: eval_printKeyHash_bb1_in(V_i_0,B)->  eval_printKeyHash_bb1_in(V_i_0',B')
                  [V_i_0>=0,7>=V_i_0,V_i_0+1=V_i_0',B'=3,B=3] 
* Loop 10: eval_printKeyHash_bb1_in(V_i_0,B) [V_i_0>=8,B=3] 

### Ranking functions of CR eval_printKeyHash_bb1_in(V_i_0,B) 
* RF of phase [9]: [-V_i_0+8]

#### Partial ranking functions of CR eval_printKeyHash_bb1_in(V_i_0,B) 
* Partial RF of phase [9]:
  - RF of loop [9:1]:
    -V_i_0+8


### Resulting Chains:eval_printKeyHash_bb1_in(V_i_0,B) 
* [[9],10]


### Merging Chains  eval_printKeyHash_bb1_in/2 into  External patterns of execution 
* [[10,[9]]] --> 1 


### Specialization of cost equations eval_printKeyHash_bb4_in/2 
* CE 9 is refined into CE [12] 
* CE 8 is refined into CE [13] 


#### Refined cost equations eval_printKeyHash_bb4_in/2 
* CE 12: eval_printKeyHash_bb4_in(V_i_1,B) = 0
     [V_i_1>=16,B=2] 
* CE 13: eval_printKeyHash_bb4_in(V_i_1,B) = 1+ eval_printKeyHash_bb4_in(C,D)
     [V_i_1>=8,15>=V_i_1,V_i_1+1=C,D=2,B=2] 

### Cost equations --> "Loop" of eval_printKeyHash_bb4_in/2 
* CEs [13] --> Loop 11 
* CEs [12] --> Loop 12 

#### Loops of eval_printKeyHash_bb4_in/2 
* Loop 11: eval_printKeyHash_bb4_in(V_i_1,B)->  eval_printKeyHash_bb4_in(V_i_1',B')
                  [V_i_1>=8,15>=V_i_1,V_i_1+1=V_i_1',B'=2,B=2] 
* Loop 12: eval_printKeyHash_bb4_in(V_i_1,B) [V_i_1>=16,B=2] 

### Ranking functions of CR eval_printKeyHash_bb4_in(V_i_1,B) 
* RF of phase [11]: [-V_i_1+16]

#### Partial ranking functions of CR eval_printKeyHash_bb4_in(V_i_1,B) 
* Partial RF of phase [11]:
  - RF of loop [11:1]:
    -V_i_1+16


### Resulting Chains:eval_printKeyHash_bb4_in(V_i_1,B) 
* [[11],12]


### Merging Chains  eval_printKeyHash_bb4_in/2 into  External patterns of execution 
* [[12,[11]]] --> 1 


### Specialization of cost equations eval_printKeyHash_12/1 
* CE 7 is refined into CE [14] 


#### Refined cost equations eval_printKeyHash_12/1 
* CE 14: eval_printKeyHash_12(B) = 1+ eval_printKeyHash_bb4_in(C,D):1
     [D=2,C=8] 

### Cost equations --> "Loop" of eval_printKeyHash_12/1 
* CEs [14] --> Loop 13 

#### Loops of eval_printKeyHash_12/1 
* Loop 13: eval_printKeyHash_12(B) [] 

### Ranking functions of CR eval_printKeyHash_12(B) 

#### Partial ranking functions of CR eval_printKeyHash_12(B) 


### Resulting Chains:eval_printKeyHash_12(B) 
* [13]


### Merging Chains  eval_printKeyHash_12/1 into  External patterns of execution 
* [[13]] --> 1 


### Specialization of cost equations eval_printKeyHash_4/1 
* CE 4 is refined into CE [15] 


#### Refined cost equations eval_printKeyHash_4/1 
* CE 15: eval_printKeyHash_4(B) = 1+ eval_printKeyHash_bb1_in(C,D):1+ eval_printKeyHash_12(B):1
     [D=3,C=0] 

### Cost equations --> "Loop" of eval_printKeyHash_4/1 
* CEs [15] --> Loop 14 

#### Loops of eval_printKeyHash_4/1 
* Loop 14: eval_printKeyHash_4(B) [] 

### Ranking functions of CR eval_printKeyHash_4(B) 

#### Partial ranking functions of CR eval_printKeyHash_4(B) 


### Resulting Chains:eval_printKeyHash_4(B) 
* [14]


### Merging Chains  eval_printKeyHash_4/1 into  External patterns of execution 
* [[14]] --> 1 


### Specialization of cost equations eval_printKeyHash_bb0_in/1 
* CE 3 is refined into CE [16] 


#### Refined cost equations eval_printKeyHash_bb0_in/1 
* CE 16: eval_printKeyHash_bb0_in(B) = 0+ eval_printKeyHash_4(B):1
     [] 

### Cost equations --> "Loop" of eval_printKeyHash_bb0_in/1 
* CEs [16] --> Loop 15 

#### Loops of eval_printKeyHash_bb0_in/1 
* Loop 15: eval_printKeyHash_bb0_in(B) [] 

### Ranking functions of CR eval_printKeyHash_bb0_in(B) 

#### Partial ranking functions of CR eval_printKeyHash_bb0_in(B) 


### Resulting Chains:eval_printKeyHash_bb0_in(B) 
* [15]


### Merging Chains  eval_printKeyHash_bb0_in/1 into  External patterns of execution 
* [[15]] --> 1 


### Specialization of cost equations eval_printKeyHash_start/2 
* CE 2 is refined into CE [17] 


#### Refined cost equations eval_printKeyHash_start/2 
* CE 17: eval_printKeyHash_start(V_indent,B) = 0+ eval_printKeyHash_bb0_in(B):1
     [] 

### Cost equations --> "Loop" of eval_printKeyHash_start/2 
* CEs [17] --> Loop 16 

#### Loops of eval_printKeyHash_start/2 
* Loop 16: eval_printKeyHash_start(V_indent,B) [] 

### Ranking functions of CR eval_printKeyHash_start(V_indent,B) 

#### Partial ranking functions of CR eval_printKeyHash_start(V_indent,B) 


### Resulting Chains:eval_printKeyHash_start(V_indent,B) 
* [16]


### Merging Chains  eval_printKeyHash_start/2 into  External patterns of execution 
* [[16]] --> 1 


Computing Bounds
=====================================

#### Cost of loops [9] 

 * loop 9:eval_printKeyHash_bb1_in(V_i_0,B) -> [eval_printKeyHash_bb1_in(V_i_0',B')] 
1
#### Cost of phase [9]:eval_printKeyHash_bb1_in(V_i_0,B) -> [eval_printKeyHash_bb1_in(V_i_0',B')] 
1*it(9)+0
  Such that:it(9) =< -V_i_0+8
it(9) =< -V_i_0+V_i_0'

#### Cost of chains of eval_printKeyHash_bb1_in(V_i_0,B):
* Chain [[9],10]: 1*it(9)+0
  Such that:it(9) =< -V_i_0+8

  with precondition: [B=3,7>=V_i_0,V_i_0>=0] 


#### Cost of loops [11] 

 * loop 11:eval_printKeyHash_bb4_in(V_i_1,B) -> [eval_printKeyHash_bb4_in(V_i_1',B')] 
1
#### Cost of phase [11]:eval_printKeyHash_bb4_in(V_i_1,B) -> [eval_printKeyHash_bb4_in(V_i_1',B')] 
1*it(11)+0
  Such that:it(11) =< -V_i_1+16
it(11) =< -V_i_1+V_i_1'

#### Cost of chains of eval_printKeyHash_bb4_in(V_i_1,B):
* Chain [[11],12]: 1*it(11)+0
  Such that:it(11) =< -V_i_1+16

  with precondition: [B=2,15>=V_i_1,V_i_1>=8] 


#### Cost of chains of eval_printKeyHash_12(B):
* Chain [13]: 1*s(1)+1
  Such that:s(1) =< 8

  with precondition: [] 


#### Cost of chains of eval_printKeyHash_4(B):
* Chain [14]: 2*s(2)+2
  Such that:aux(1) =< 8
s(2) =< aux(1)

  with precondition: [] 


#### Cost of chains of eval_printKeyHash_bb0_in(B):
* Chain [15]: 2*s(5)+2
  Such that:s(4) =< 8
s(5) =< s(4)

  with precondition: [] 


#### Cost of chains of eval_printKeyHash_start(V_indent,B):
* Chain [16]: 2*s(7)+2
  Such that:s(6) =< 8
s(7) =< s(6)

  with precondition: [] 


Closed-form bounds of eval_printKeyHash_start(V_indent,B): 
-------------------------------------
* Chain [16] with precondition: [] 
    - Upper bound: 18 
    - Complexity: constant 

### Maximum cost of eval_printKeyHash_start(V_indent,B): 18 
Asymptotic class: constant 

Time statistics: 
-------------------------------------
* Partial evaluation computed in 23 ms.
* Invariants computed in 28 ms.
   - Backward Invariants 9 ms.
   - Transitive Invariants 8 ms.
* Refinement performed in 36 ms.
* Termination proved in 9 ms.
* Upper bounds computed in 34 ms.
   - Equation cost structures 13 ms.
   - Phase cost structures 11 ms.
   - Chain cost structures 11 ms.
   - Solving cost expressions 1 ms.
* Total analysis performed in 173 ms.


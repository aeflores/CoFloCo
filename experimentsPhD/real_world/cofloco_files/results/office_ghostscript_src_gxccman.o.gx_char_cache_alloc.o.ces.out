Warning: Ignored call to eval_gx_char_cache_alloc_stop/1 in equation eval_gx_char_cache_alloc_bb6_in/1 

Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. recursive  : [eval_gx_char_cache_alloc_bb1_in/3]
1. non_recursive  : [eval_gx_char_cache_alloc_bb6_in/1]
2. non_recursive  : [eval_gx_char_cache_alloc_16/1]
3. non_recursive  : [eval_gx_char_cache_alloc_15/1]
4. non_recursive  : [eval_gx_char_cache_alloc_14/1]
5. non_recursive  : [eval_gx_char_cache_alloc_29/1]
6. non_recursive  : [eval_gx_char_cache_alloc_28/1]
7. non_recursive  : [eval_gx_char_cache_alloc_13/2]
8. non_recursive  : [eval_gx_char_cache_alloc_12/2]
9. non_recursive  : [eval_gx_char_cache_alloc_11/2]
10. non_recursive  : [loop_cont_eval_gx_char_cache_alloc_bb1_in/3]
11. non_recursive  : [eval_gx_char_cache_alloc_bb0_in/2]
12. non_recursive  : [eval_gx_char_cache_alloc_start/5]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into eval_gx_char_cache_alloc_bb1_in/3
1. SCC is completely evaluated into other SCCs
2. SCC is completely evaluated into other SCCs
3. SCC is completely evaluated into other SCCs
4. SCC is completely evaluated into other SCCs
5. SCC is completely evaluated into other SCCs
6. SCC is completely evaluated into other SCCs
7. SCC is partially evaluated into eval_gx_char_cache_alloc_13/2
8. SCC is completely evaluated into other SCCs
9. SCC is completely evaluated into other SCCs
10. SCC is completely evaluated into other SCCs
11. SCC is partially evaluated into eval_gx_char_cache_alloc_bb0_in/2
12. SCC is partially evaluated into eval_gx_char_cache_alloc_start/5

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations eval_gx_char_cache_alloc_bb1_in/3 
* CE 5 is refined into CE [7] 
* CE 4 is refined into CE [8] 


#### Refined cost equations eval_gx_char_cache_alloc_bb1_in/3 
* CE 7: eval_gx_char_cache_alloc_bb1_in(A,B,A) = 0
     [B=2] 
* CE 8: eval_gx_char_cache_alloc_bb1_in(V_upper,B,C) = 1+ eval_gx_char_cache_alloc_bb1_in(V_upper,D,C)
     [D=2,B=2] 

### Cost equations --> "Loop" of eval_gx_char_cache_alloc_bb1_in/3 
* CEs [8] --> Loop 6 
* CEs [7] --> Loop 7 

#### Loops of eval_gx_char_cache_alloc_bb1_in/3 
* Loop 6: eval_gx_char_cache_alloc_bb1_in(V_upper,B,C)->  eval_gx_char_cache_alloc_bb1_in(V_upper,B',C)
                  [B'=2,B=2] 
* Loop 7: eval_gx_char_cache_alloc_bb1_in(A,B,A) [B=2] 

### Ranking functions of CR eval_gx_char_cache_alloc_bb1_in(V_upper,B,C) 

#### Partial ranking functions of CR eval_gx_char_cache_alloc_bb1_in(V_upper,B,C) 


### Resulting Chains:eval_gx_char_cache_alloc_bb1_in(V_upper,B,C) 
* [[6]]...
* [[6],7]
* [7]


### Merging Chains  eval_gx_char_cache_alloc_bb1_in/3 into  External patterns of execution 
* [[7],[7,[6]]] --> 1 
* [[[6]]] --> 2 


### Specialization of cost equations eval_gx_char_cache_alloc_13/2 
* CE 6 is refined into CE [9] 


#### Refined cost equations eval_gx_char_cache_alloc_13/2 
* CE 9: eval_gx_char_cache_alloc_13(V_upper,B) = 0
     [] 

### Cost equations --> "Loop" of eval_gx_char_cache_alloc_13/2 
* CEs [9] --> Loop 8 

#### Loops of eval_gx_char_cache_alloc_13/2 
* Loop 8: eval_gx_char_cache_alloc_13(V_upper,B) [] 

### Ranking functions of CR eval_gx_char_cache_alloc_13(V_upper,B) 

#### Partial ranking functions of CR eval_gx_char_cache_alloc_13(V_upper,B) 


### Resulting Chains:eval_gx_char_cache_alloc_13(V_upper,B) 
* [8]


### Merging Chains  eval_gx_char_cache_alloc_13/2 into  External patterns of execution 
* [[8]] --> 1 


### Specialization of cost equations eval_gx_char_cache_alloc_bb0_in/2 
* CE 3 is refined into CE [10,11] 


#### Refined cost equations eval_gx_char_cache_alloc_bb0_in/2 
* CE 10: eval_gx_char_cache_alloc_bb0_in(V_upper,B) = 1+ eval_gx_char_cache_alloc_bb1_in(V_upper,C,V_upper):1+ eval_gx_char_cache_alloc_13(V_upper,B):1
     [C=2] 
* CE 11: eval_gx_char_cache_alloc_bb0_in(V_upper,B) = 1+ eval_gx_char_cache_alloc_bb1_in(V_upper,C,D):2
     [C=2] 

### Cost equations --> "Loop" of eval_gx_char_cache_alloc_bb0_in/2 
* CEs [11] --> Loop 9 
* CEs [10] --> Loop 10 

#### Loops of eval_gx_char_cache_alloc_bb0_in/2 
* Loop 9: eval_gx_char_cache_alloc_bb0_in(V_upper,B) [] 
* Loop 10: eval_gx_char_cache_alloc_bb0_in(V_upper,B) [] 

### Ranking functions of CR eval_gx_char_cache_alloc_bb0_in(V_upper,B) 

#### Partial ranking functions of CR eval_gx_char_cache_alloc_bb0_in(V_upper,B) 


### Resulting Chains:eval_gx_char_cache_alloc_bb0_in(V_upper,B) 
* [10]
* [9]...


### Merging Chains  eval_gx_char_cache_alloc_bb0_in/2 into  External patterns of execution 
* [[10]] --> 1 
* [[9]] --> 2 


### Specialization of cost equations eval_gx_char_cache_alloc_start/5 
* CE 2 is refined into CE [12,13] 


#### Refined cost equations eval_gx_char_cache_alloc_start/5 
* CE 12: eval_gx_char_cache_alloc_start(V_bmax,V_mmax,V_cmax,V_upper,B) = 0+ eval_gx_char_cache_alloc_bb0_in(V_upper,B):1
     [] 
* CE 13: eval_gx_char_cache_alloc_start(V_bmax,V_mmax,V_cmax,V_upper,B) = 0+ eval_gx_char_cache_alloc_bb0_in(V_upper,B):2
     [] 

### Cost equations --> "Loop" of eval_gx_char_cache_alloc_start/5 
* CEs [13] --> Loop 11 
* CEs [12] --> Loop 12 

#### Loops of eval_gx_char_cache_alloc_start/5 
* Loop 11: eval_gx_char_cache_alloc_start(V_bmax,V_mmax,V_cmax,V_upper,B) [] 
* Loop 12: eval_gx_char_cache_alloc_start(V_bmax,V_mmax,V_cmax,V_upper,B) [] 

### Ranking functions of CR eval_gx_char_cache_alloc_start(V_bmax,V_mmax,V_cmax,V_upper,B) 

#### Partial ranking functions of CR eval_gx_char_cache_alloc_start(V_bmax,V_mmax,V_cmax,V_upper,B) 


### Resulting Chains:eval_gx_char_cache_alloc_start(V_bmax,V_mmax,V_cmax,V_upper,B) 
* [12]
* [11]...


### Merging Chains  eval_gx_char_cache_alloc_start/5 into  External patterns of execution 
* [[12]] --> 1 
* [[11]] --> 2 


Computing Bounds
=====================================

#### Cost of loops [6] 

 * loop 6:eval_gx_char_cache_alloc_bb1_in(V_upper,B,C) -> [eval_gx_char_cache_alloc_bb1_in(V_upper',B',C')] 
1
#### Cost of phase [6]:eval_gx_char_cache_alloc_bb1_in(V_upper,B,C) -> [eval_gx_char_cache_alloc_bb1_in(V_upper',B',C')] 
1*it(6)+0
#### Cost of phase [6]:eval_gx_char_cache_alloc_bb1_in(V_upper,B,C) -> [eval_gx_char_cache_alloc_bb1_in(V_upper',B',C')] 
1*it(6)+0
#### Cost of chains of eval_gx_char_cache_alloc_bb1_in(V_upper,B,C):
* Chain [[6]]...: 1*it(6)+0
  with precondition: [B=2] 

* Chain [[6],7]: 1*it(6)+0
  with precondition: [B=2,V_upper=C] 

* Chain [7]: 0
  with precondition: [B=2,C=V_upper] 


#### Cost of chains of eval_gx_char_cache_alloc_13(V_upper,B):
* Chain [8]: 0
  with precondition: [] 


#### Cost of chains of eval_gx_char_cache_alloc_bb0_in(V_upper,B):
* Chain [10]: 1*s(2)+1
  with precondition: [] 

* Chain [9]...: 1*s(3)+1
  with precondition: [] 


#### Cost of chains of eval_gx_char_cache_alloc_start(V_bmax,V_mmax,V_cmax,V_upper,B):
* Chain [12]: 1*s(4)+1
  with precondition: [] 

* Chain [11]...: 1*s(5)+1
  with precondition: [] 


Closed-form bounds of eval_gx_char_cache_alloc_start(V_bmax,V_mmax,V_cmax,V_upper,B): 
-------------------------------------
* Chain [12] with precondition: [] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [11]... with precondition: [] 
    - Upper bound: inf 
    - Complexity: infinity 

### Maximum cost of eval_gx_char_cache_alloc_start(V_bmax,V_mmax,V_cmax,V_upper,B): inf 
Asymptotic class: infinity 

Time statistics: 
-------------------------------------
* Partial evaluation computed in 25 ms.
* Invariants computed in 12 ms.
   - Backward Invariants 5 ms.
   - Transitive Invariants 3 ms.
* Refinement performed in 24 ms.
* Termination proved in 3 ms.
* Upper bounds computed in 20 ms.
   - Equation cost structures 7 ms.
   - Phase cost structures 4 ms.
   - Chain cost structures 7 ms.
   - Solving cost expressions 0 ms.
* Total analysis performed in 120 ms.


Warning: Ignored call to eval_id3_parse_latin1_stop/1 in equation eval_id3_parse_latin1_bb8_in/1 

Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. recursive  : [eval_id3_parse_latin1_bb4_in/1,eval_id3_parse_latin1_bb7_in/1]
1. non_recursive  : [eval_id3_parse_latin1_bb8_in/1]
2. non_recursive  : [loop_cont_eval_id3_parse_latin1_bb4_in/2]
3. non_recursive  : [eval_id3_parse_latin1_10/1]
4. non_recursive  : [eval_id3_parse_latin1_9/2]
5. non_recursive  : [eval_id3_parse_latin1_8/2]
6. non_recursive  : [eval_id3_parse_latin1_7/3]
7. non_recursive  : [eval_id3_parse_latin1_bb2_in/2]
8. non_recursive  : [eval_id3_parse_latin1_1/2]
9. non_recursive  : [eval_id3_parse_latin1_0/2]
10. non_recursive  : [eval_id3_parse_latin1_bb0_in/2]
11. non_recursive  : [eval_id3_parse_latin1_start/3]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into eval_id3_parse_latin1_bb4_in/1
1. SCC is completely evaluated into other SCCs
2. SCC is completely evaluated into other SCCs
3. SCC is partially evaluated into eval_id3_parse_latin1_10/1
4. SCC is completely evaluated into other SCCs
5. SCC is partially evaluated into eval_id3_parse_latin1_8/2
6. SCC is completely evaluated into other SCCs
7. SCC is completely evaluated into other SCCs
8. SCC is partially evaluated into eval_id3_parse_latin1_1/2
9. SCC is completely evaluated into other SCCs
10. SCC is completely evaluated into other SCCs
11. SCC is partially evaluated into eval_id3_parse_latin1_start/3

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations eval_id3_parse_latin1_bb4_in/1 
* CE 9 is refined into CE [10] 
* CE 8 is refined into CE [11] 


#### Refined cost equations eval_id3_parse_latin1_bb4_in/1 
* CE 10: eval_id3_parse_latin1_bb4_in(B) = 0
     [B=2] 
* CE 11: eval_id3_parse_latin1_bb4_in(B) = 1+ eval_id3_parse_latin1_bb4_in(C)
     [C=2,B=2] 

### Cost equations --> "Loop" of eval_id3_parse_latin1_bb4_in/1 
* CEs [11] --> Loop 7 
* CEs [10] --> Loop 8 

#### Loops of eval_id3_parse_latin1_bb4_in/1 
* Loop 7: eval_id3_parse_latin1_bb4_in(B)->  eval_id3_parse_latin1_bb4_in(B')
                  [B'=2,B=2] 
* Loop 8: eval_id3_parse_latin1_bb4_in(B) [B=2] 

### Ranking functions of CR eval_id3_parse_latin1_bb4_in(B) 

#### Partial ranking functions of CR eval_id3_parse_latin1_bb4_in(B) 


### Resulting Chains:eval_id3_parse_latin1_bb4_in(B) 
* [[7]]...
* [[7],8]
* [8]


### Merging Chains  eval_id3_parse_latin1_bb4_in/1 into  External patterns of execution 
* [[8],[8,[7]]] --> 1 
* [[[7]]] --> 2 


### Specialization of cost equations eval_id3_parse_latin1_10/1 
* CE 6 is refined into CE [12] 
* CE 7 is refined into CE [13,14] 


#### Refined cost equations eval_id3_parse_latin1_10/1 
* CE 12: eval_id3_parse_latin1_10(B) = 0
     [] 
* CE 13: eval_id3_parse_latin1_10(B) = 1+ eval_id3_parse_latin1_bb4_in(C):1
     [C=2] 
* CE 14: eval_id3_parse_latin1_10(B) = 1+ eval_id3_parse_latin1_bb4_in(C):2
     [C=2] 

### Cost equations --> "Loop" of eval_id3_parse_latin1_10/1 
* CEs [14] --> Loop 9 
* CEs [12,13] --> Loop 10 

#### Loops of eval_id3_parse_latin1_10/1 
* Loop 9: eval_id3_parse_latin1_10(B) [] 
* Loop 10: eval_id3_parse_latin1_10(B) [] 

### Ranking functions of CR eval_id3_parse_latin1_10(B) 

#### Partial ranking functions of CR eval_id3_parse_latin1_10(B) 


### Resulting Chains:eval_id3_parse_latin1_10(B) 
* [10]
* [9]...


### Merging Chains  eval_id3_parse_latin1_10/1 into  External patterns of execution 
* [[10]] --> 1 
* [[9]] --> 2 


### Specialization of cost equations eval_id3_parse_latin1_8/2 
* CE 4 is refined into CE [15,16] 
* CE 5 is refined into CE [17] 


#### Refined cost equations eval_id3_parse_latin1_8/2 
* CE 15: eval_id3_parse_latin1_8(V__0,B) = 0+ eval_id3_parse_latin1_10(B):1
     [] 
* CE 16: eval_id3_parse_latin1_8(V__0,B) = 0+ eval_id3_parse_latin1_10(B):2
     [] 
* CE 17: eval_id3_parse_latin1_8(V__0,B) = 0
     [] 

### Cost equations --> "Loop" of eval_id3_parse_latin1_8/2 
* CEs [15,17] --> Loop 11 
* CEs [16] --> Loop 12 

#### Loops of eval_id3_parse_latin1_8/2 
* Loop 11: eval_id3_parse_latin1_8(V__0,B) [] 
* Loop 12: eval_id3_parse_latin1_8(V__0,B) [] 

### Ranking functions of CR eval_id3_parse_latin1_8(V__0,B) 

#### Partial ranking functions of CR eval_id3_parse_latin1_8(V__0,B) 


### Resulting Chains:eval_id3_parse_latin1_8(V__0,B) 
* [12]...
* [11]


### Merging Chains  eval_id3_parse_latin1_8/2 into  External patterns of execution 
* [[11]] --> 1 
* [[12]] --> 2 


### Specialization of cost equations eval_id3_parse_latin1_1/2 
* CE 3 is refined into CE [18,19] 


#### Refined cost equations eval_id3_parse_latin1_1/2 
* CE 18: eval_id3_parse_latin1_1(V_length,B) = 0+ eval_id3_parse_latin1_8(C,B):1
     [] 
* CE 19: eval_id3_parse_latin1_1(V_length,B) = 0+ eval_id3_parse_latin1_8(C,B):2
     [] 

### Cost equations --> "Loop" of eval_id3_parse_latin1_1/2 
* CEs [19] --> Loop 13 
* CEs [18] --> Loop 14 

#### Loops of eval_id3_parse_latin1_1/2 
* Loop 13: eval_id3_parse_latin1_1(V_length,B) [] 
* Loop 14: eval_id3_parse_latin1_1(V_length,B) [] 

### Ranking functions of CR eval_id3_parse_latin1_1(V_length,B) 

#### Partial ranking functions of CR eval_id3_parse_latin1_1(V_length,B) 


### Resulting Chains:eval_id3_parse_latin1_1(V_length,B) 
* [14]
* [13]...


### Merging Chains  eval_id3_parse_latin1_1/2 into  External patterns of execution 
* [[14]] --> 1 
* [[13]] --> 2 


### Specialization of cost equations eval_id3_parse_latin1_start/3 
* CE 2 is refined into CE [20,21] 


#### Refined cost equations eval_id3_parse_latin1_start/3 
* CE 20: eval_id3_parse_latin1_start(V_length,V_full,B) = 0+ eval_id3_parse_latin1_1(V_length,B):1
     [] 
* CE 21: eval_id3_parse_latin1_start(V_length,V_full,B) = 0+ eval_id3_parse_latin1_1(V_length,B):2
     [] 

### Cost equations --> "Loop" of eval_id3_parse_latin1_start/3 
* CEs [21] --> Loop 15 
* CEs [20] --> Loop 16 

#### Loops of eval_id3_parse_latin1_start/3 
* Loop 15: eval_id3_parse_latin1_start(V_length,V_full,B) [] 
* Loop 16: eval_id3_parse_latin1_start(V_length,V_full,B) [] 

### Ranking functions of CR eval_id3_parse_latin1_start(V_length,V_full,B) 

#### Partial ranking functions of CR eval_id3_parse_latin1_start(V_length,V_full,B) 


### Resulting Chains:eval_id3_parse_latin1_start(V_length,V_full,B) 
* [16]
* [15]...


### Merging Chains  eval_id3_parse_latin1_start/3 into  External patterns of execution 
* [[16]] --> 1 
* [[15]] --> 2 


Computing Bounds
=====================================

#### Cost of loops [7] 

 * loop 7:eval_id3_parse_latin1_bb4_in(B) -> [eval_id3_parse_latin1_bb4_in(B')] 
1
#### Cost of phase [7]:eval_id3_parse_latin1_bb4_in(B) -> [eval_id3_parse_latin1_bb4_in(B')] 
1*it(7)+0
#### Cost of phase [7]:eval_id3_parse_latin1_bb4_in(B) -> [eval_id3_parse_latin1_bb4_in(B')] 
1*it(7)+0
#### Cost of chains of eval_id3_parse_latin1_bb4_in(B):
* Chain [[7]]...: 1*it(7)+0
  with precondition: [B=2] 

* Chain [[7],8]: 1*it(7)+0
  with precondition: [B=2] 

* Chain [8]: 0
  with precondition: [B=2] 


#### Cost of chains of eval_id3_parse_latin1_10(B):
* Chain [10]: 1*aux(2)+0
  with precondition: [] 

* Chain [9]...: 1*s(3)+1
  with precondition: [] 


#### Cost of chains of eval_id3_parse_latin1_8(V__0,B):
* Chain [12]...: 1*s(4)+1
  with precondition: [] 

* Chain [11]: 1*aux(3)+0
  with precondition: [] 


#### Cost of chains of eval_id3_parse_latin1_1(V_length,B):
* Chain [14]: 1*s(6)+0
  with precondition: [] 

* Chain [13]...: 1*s(7)+1
  with precondition: [] 


#### Cost of chains of eval_id3_parse_latin1_start(V_length,V_full,B):
* Chain [16]: 1*s(8)+0
  with precondition: [] 

* Chain [15]...: 1*s(9)+1
  with precondition: [] 


Closed-form bounds of eval_id3_parse_latin1_start(V_length,V_full,B): 
-------------------------------------
* Chain [16] with precondition: [] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [15]... with precondition: [] 
    - Upper bound: inf 
    - Complexity: infinity 

### Maximum cost of eval_id3_parse_latin1_start(V_length,V_full,B): inf 
Asymptotic class: infinity 

Time statistics: 
-------------------------------------
* Partial evaluation computed in 18 ms.
* Invariants computed in 8 ms.
   - Backward Invariants 5 ms.
   - Transitive Invariants 1 ms.
* Refinement performed in 19 ms.
* Termination proved in 4 ms.
* Upper bounds computed in 18 ms.
   - Equation cost structures 7 ms.
   - Phase cost structures 4 ms.
   - Chain cost structures 4 ms.
   - Solving cost expressions 0 ms.
* Total analysis performed in 94 ms.


WARNING: Excluded non-linear constraints:[D-E-B*F>=0,D-E-B*F+1=<B]
WARNING: Excluded non-linear constraints:[D-E-B*F>=0,D-E-B*F+1=< -B]
WARNING: Excluded non-linear constraints:[-D+E+B*F>=0,-D+E+B*F+1=<B]
WARNING: Excluded non-linear constraints:[-D+E+B*F>=0,-D+E+B*F+1=< -B]
WARNING: Excluded non-linear constraints:[D-E-B*F>=0,D-E-B*F+1=<B]
WARNING: Excluded non-linear constraints:[D-E-B*F>=0,D-E-B*F+1=<B]
WARNING: Excluded non-linear constraints:[D-E-B*F>=0,D-E-B*F+1=<B]
WARNING: Excluded non-linear constraints:[D-E-B*F>=0,D-E-B*F+1=< -B]
WARNING: Excluded non-linear constraints:[D-E-B*F>=0,D-E-B*F+1=< -B]
WARNING: Excluded non-linear constraints:[D-E-B*F>=0,D-E-B*F+1=< -B]
WARNING: Excluded non-linear constraints:[-D+E+B*F>=0,-D+E+B*F+1=<B]
WARNING: Excluded non-linear constraints:[-D+E+B*F>=0,-D+E+B*F+1=<B]
WARNING: Excluded non-linear constraints:[-D+E+B*F>=0,-D+E+B*F+1=<B]
WARNING: Excluded non-linear constraints:[-D+E+B*F>=0,-D+E+B*F+1=< -B]
WARNING: Excluded non-linear constraints:[-D+E+B*F>=0,-D+E+B*F+1=< -B]
WARNING: Excluded non-linear constraints:[-D+E+B*F>=0,-D+E+B*F+1=< -B]
Warning: Ignored call to eval_qsortx_stop/1 in equation eval_qsortx_bb20_in/1 

Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. non_recursive  : [eval_qsortx_bb20_in/1]
1. recursive  : [eval_qsortx_21/5,eval_qsortx_22/6,eval_qsortx_bb6_in/5]
2. recursive  : [eval_qsortx_27/5,eval_qsortx_28/6,eval_qsortx_bb8_in/5]
3. recursive  : [eval_qsortx_63/5,eval_qsortx_64/5,eval_qsortx__critedge1_in/5,eval_qsortx__critedge_in/5,eval_qsortx_bb5_in/5,loop_cont_eval_qsortx_bb6_in/6,loop_cont_eval_qsortx_bb8_in/6]
4. recursive  : [eval_qsortx_14/3,eval_qsortx_15/3,eval_qsortx_19/3,eval_qsortx_20/3,eval_qsortx_29/3,eval_qsortx_30/3,eval_qsortx_bb13_in/3,eval_qsortx_bb16_in/3,eval_qsortx_bb18_in/3,eval_qsortx_bb2_in/3,loop_cont_eval_qsortx_bb5_in/4]
5. non_recursive  : [loop_cont_eval_qsortx_bb2_in/2]
6. non_recursive  : [eval_qsortx_bb0_in/2]
7. non_recursive  : [eval_qsortx_start/3]

#### Obtained direct recursion through partial evaluation 
0. SCC is completely evaluated into other SCCs
1. SCC is partially evaluated into eval_qsortx_bb6_in/5
2. SCC is partially evaluated into eval_qsortx_bb8_in/5
3. SCC is partially evaluated into eval_qsortx_bb5_in/5
4. SCC is partially evaluated into eval_qsortx_bb2_in/3
5. SCC is completely evaluated into other SCCs
6. SCC is partially evaluated into eval_qsortx_bb0_in/2
7. SCC is partially evaluated into eval_qsortx_start/3

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations eval_qsortx_bb6_in/5 
* CE 16 is refined into CE [19] 
* CE 15 is refined into CE [20] 


#### Refined cost equations eval_qsortx_bb6_in/5 
* CE 19: eval_qsortx_bb6_in(V_width,V_6,B,C,D) = 1+ eval_qsortx_bb6_in(V_width,V_6,E,C,D)
     [E=2,B=2] 
* CE 20: eval_qsortx_bb6_in(A,B,C,A,B) = 0
     [C=2] 

### Cost equations --> "Loop" of eval_qsortx_bb6_in/5 
* CEs [20] --> Loop 11 
* CEs [19] --> Loop 12 

#### Loops of eval_qsortx_bb6_in/5 
* Loop 11: eval_qsortx_bb6_in(A,B,C,A,B) [C=2] 
* Loop 12: eval_qsortx_bb6_in(V_width,V_6,B,C,D)->  eval_qsortx_bb6_in(V_width,V_6,B',C,D)
                  [B'=2,B=2] 

### Ranking functions of CR eval_qsortx_bb6_in(V_width,V_6,B,C,D) 

#### Partial ranking functions of CR eval_qsortx_bb6_in(V_width,V_6,B,C,D) 


### Resulting Chains:eval_qsortx_bb6_in(V_width,V_6,B,C,D) 
* [[12]]...
* [[12],11]
* [11]


### Merging Chains  eval_qsortx_bb6_in/5 into  External patterns of execution 
* [[11],[11,[12]]] --> 1 
* [[[12]]] --> 2 


### Specialization of cost equations eval_qsortx_bb8_in/5 
* CE 18 is refined into CE [21] 
* CE 17 is refined into CE [22] 


#### Refined cost equations eval_qsortx_bb8_in/5 
* CE 21: eval_qsortx_bb8_in(V_width,V_6,B,C,D) = 1+ eval_qsortx_bb8_in(V_width,V_6,E,C,D)
     [E=3,B=3] 
* CE 22: eval_qsortx_bb8_in(A,B,C,A,B) = 0
     [C=3] 

### Cost equations --> "Loop" of eval_qsortx_bb8_in/5 
* CEs [22] --> Loop 13 
* CEs [21] --> Loop 14 

#### Loops of eval_qsortx_bb8_in/5 
* Loop 13: eval_qsortx_bb8_in(A,B,C,A,B) [C=3] 
* Loop 14: eval_qsortx_bb8_in(V_width,V_6,B,C,D)->  eval_qsortx_bb8_in(V_width,V_6,B',C,D)
                  [B'=3,B=3] 

### Ranking functions of CR eval_qsortx_bb8_in(V_width,V_6,B,C,D) 

#### Partial ranking functions of CR eval_qsortx_bb8_in(V_width,V_6,B,C,D) 


### Resulting Chains:eval_qsortx_bb8_in(V_width,V_6,B,C,D) 
* [[14]]...
* [[14],13]
* [13]


### Merging Chains  eval_qsortx_bb8_in/5 into  External patterns of execution 
* [[13],[13,[14]]] --> 1 
* [[[14]]] --> 2 


### Specialization of cost equations eval_qsortx_bb5_in/5 
* CE 14 is refined into CE [23,24,25] 
* CE 13 is refined into CE [26,27,28] 


#### Refined cost equations eval_qsortx_bb5_in/5 
* CE 23: eval_qsortx_bb5_in(V_width,V_6,B,C,D) = 3+ eval_qsortx_bb6_in(V_width,V_6,E,V_width,V_6):1+ eval_qsortx_bb8_in(V_width,V_6,F,V_width,V_6):1+ eval_qsortx_bb5_in(V_width,V_6,G,C,D)
     [G=4,F=3,E=2,B=4] 
* CE 24: eval_qsortx_bb5_in(V_width,V_6,B,C,D) = 3+ eval_qsortx_bb6_in(V_width,V_6,E,V_width,V_6):1+ eval_qsortx_bb8_in(V_width,V_6,F,G,H):2
     [I=4,F=3,E=2,B=4] 
* CE 25: eval_qsortx_bb5_in(V_width,V_6,B,C,D) = 3+ eval_qsortx_bb6_in(V_width,V_6,E,F,G):2
     [H=4,I=3,E=2,B=4] 
* CE 26: eval_qsortx_bb5_in(A,B,C,A,B) = 2+ eval_qsortx_bb6_in(A,B,D,A,B):1+ eval_qsortx_bb8_in(A,B,E,A,B):1
     [E=3,D=2,C=4] 
* CE 27: eval_qsortx_bb5_in(V_width,V_6,B,C,D) = 2+ eval_qsortx_bb6_in(V_width,V_6,E,V_width,V_6):1+ eval_qsortx_bb8_in(V_width,V_6,F,C,D):2
     [F=3,E=2,B=4] 
* CE 28: eval_qsortx_bb5_in(V_width,V_6,B,C,D) = 2+ eval_qsortx_bb6_in(V_width,V_6,E,F,G):2
     [H=3,E=2,B=4] 

### Cost equations --> "Loop" of eval_qsortx_bb5_in/5 
* CEs [24,25,27,28] --> Loop 15 
* CEs [26] --> Loop 16 
* CEs [23] --> Loop 17 

#### Loops of eval_qsortx_bb5_in/5 
* Loop 15: eval_qsortx_bb5_in(V_width,V_6,B,C,D) [B=4] 
* Loop 16: eval_qsortx_bb5_in(A,B,C,A,B) [C=4] 
* Loop 17: eval_qsortx_bb5_in(V_width,V_6,B,C,D)->  eval_qsortx_bb5_in(V_width,V_6,B',C,D)
                  [B'=4,B=4] 

### Ranking functions of CR eval_qsortx_bb5_in(V_width,V_6,B,C,D) 

#### Partial ranking functions of CR eval_qsortx_bb5_in(V_width,V_6,B,C,D) 


### Resulting Chains:eval_qsortx_bb5_in(V_width,V_6,B,C,D) 
* [[17]]...
* [[17],16]
* [[17],15]...
* [16]
* [15]...


### Merging Chains  eval_qsortx_bb5_in/5 into  External patterns of execution 
* [[16],[16,[17]]] --> 1 
* [[15],[[17]],[15,[17]]] --> 2 


### Specialization of cost equations eval_qsortx_bb2_in/3 
* CE 5 is refined into CE [29,30] 
* CE 6 is refined into CE [31,32] 
* CE 11 is refined into CE [33] 
* CE 12 is refined into CE [34] 
* CE 7 is refined into CE [35,36] 
* CE 8 is refined into CE [37,38] 
* CE 9 is refined into CE [39] 
* CE 10 is refined into CE [40] 


#### Refined cost equations eval_qsortx_bb2_in/3 
* CE 29: eval_qsortx_bb2_in(V_width,V_6,B) = 2+ eval_qsortx_bb5_in(V_width,V_6,C,V_width,V_6):1+ eval_qsortx_bb2_in(V_width,V_6,D)
     [D=5,C=4,B=5] 
* CE 30: eval_qsortx_bb2_in(V_width,V_6,B) = 2+ eval_qsortx_bb5_in(V_width,V_6,C,D,E):2
     [F=5,C=4,B=5] 
* CE 31: eval_qsortx_bb2_in(V_width,V_6,B) = 2+ eval_qsortx_bb5_in(V_width,V_6,C,V_width,V_6):1+ eval_qsortx_bb2_in(V_width,V_6,D)
     [V_6>=1,D=5,C=4,B=5] 
* CE 32: eval_qsortx_bb2_in(V_width,V_6,B) = 2+ eval_qsortx_bb5_in(V_width,V_6,C,D,E):2
     [V_6>=1,F=5,C=4,B=5] 
* CE 33: eval_qsortx_bb2_in(V_width,V_6,B) = 1+ eval_qsortx_bb2_in(V_width,V_6,C)
     [C=5,B=5] 
* CE 34: eval_qsortx_bb2_in(V_width,V_6,B) = 1+ eval_qsortx_bb2_in(V_width,V_6,C)
     [V_6>=1,C=5,B=5] 
* CE 35: eval_qsortx_bb2_in(V_width,V_6,B) = 1+ eval_qsortx_bb5_in(V_width,V_6,C,V_width,V_6):1
     [C=4,B=5] 
* CE 36: eval_qsortx_bb2_in(V_width,V_6,B) = 1+ eval_qsortx_bb5_in(V_width,V_6,C,D,E):2
     [C=4,B=5] 
* CE 37: eval_qsortx_bb2_in(V_width,V_6,B) = 1+ eval_qsortx_bb5_in(V_width,V_6,C,V_width,V_6):1
     [V_6>=1,C=4,B=5] 
* CE 38: eval_qsortx_bb2_in(V_width,V_6,B) = 1+ eval_qsortx_bb5_in(V_width,V_6,C,D,E):2
     [V_6>=1,C=4,B=5] 
* CE 39: eval_qsortx_bb2_in(V_width,V_6,B) = 0
     [B=5] 
* CE 40: eval_qsortx_bb2_in(V_width,V_6,B) = 0
     [V_6>=1,B=5] 

### Cost equations --> "Loop" of eval_qsortx_bb2_in/3 
* CEs [35,37,39,40] --> Loop 18 
* CEs [30,32,36,38] --> Loop 19 
* CEs [29,31,33,34] --> Loop 20 

#### Loops of eval_qsortx_bb2_in/3 
* Loop 18: eval_qsortx_bb2_in(V_width,V_6,B) [B=5] 
* Loop 19: eval_qsortx_bb2_in(V_width,V_6,B) [B=5] 
* Loop 20: eval_qsortx_bb2_in(V_width,V_6,B)->  eval_qsortx_bb2_in(V_width,V_6,B')
                  [B'=5,B=5] 

### Ranking functions of CR eval_qsortx_bb2_in(V_width,V_6,B) 

#### Partial ranking functions of CR eval_qsortx_bb2_in(V_width,V_6,B) 


### Resulting Chains:eval_qsortx_bb2_in(V_width,V_6,B) 
* [[20]]...
* [[20],19]...
* [[20],18]
* [19]...
* [18]


### Merging Chains  eval_qsortx_bb2_in/3 into  External patterns of execution 
* [[18],[18,[20]]] --> 1 
* [[[20]]] --> 2 
* [[19],[19,[20]]] --> 3 


### Specialization of cost equations eval_qsortx_bb0_in/2 
* CE 3 is refined into CE [41] 
* CE 4 is refined into CE [42,43,44] 


#### Refined cost equations eval_qsortx_bb0_in/2 
* CE 41: eval_qsortx_bb0_in(V_width,B) = 0
     [] 
* CE 42: eval_qsortx_bb0_in(V_width,B) = 1+ eval_qsortx_bb2_in(V_width,V_width,C):1
     [C=5] 
* CE 43: eval_qsortx_bb0_in(V_width,B) = 1+ eval_qsortx_bb2_in(V_width,V_width,C):2
     [C=5] 
* CE 44: eval_qsortx_bb0_in(V_width,B) = 1+ eval_qsortx_bb2_in(V_width,V_width,C):3
     [C=5] 

### Cost equations --> "Loop" of eval_qsortx_bb0_in/2 
* CEs [43,44] --> Loop 21 
* CEs [41,42] --> Loop 22 

#### Loops of eval_qsortx_bb0_in/2 
* Loop 21: eval_qsortx_bb0_in(V_width,B) [] 
* Loop 22: eval_qsortx_bb0_in(V_width,B) [] 

### Ranking functions of CR eval_qsortx_bb0_in(V_width,B) 

#### Partial ranking functions of CR eval_qsortx_bb0_in(V_width,B) 


### Resulting Chains:eval_qsortx_bb0_in(V_width,B) 
* [22]
* [21]...


### Merging Chains  eval_qsortx_bb0_in/2 into  External patterns of execution 
* [[22]] --> 1 
* [[21]] --> 2 


### Specialization of cost equations eval_qsortx_start/3 
* CE 2 is refined into CE [45,46] 


#### Refined cost equations eval_qsortx_start/3 
* CE 45: eval_qsortx_start(V_num,V_width,B) = 0+ eval_qsortx_bb0_in(V_width,B):1
     [] 
* CE 46: eval_qsortx_start(V_num,V_width,B) = 0+ eval_qsortx_bb0_in(V_width,B):2
     [] 

### Cost equations --> "Loop" of eval_qsortx_start/3 
* CEs [46] --> Loop 23 
* CEs [45] --> Loop 24 

#### Loops of eval_qsortx_start/3 
* Loop 23: eval_qsortx_start(V_num,V_width,B) [] 
* Loop 24: eval_qsortx_start(V_num,V_width,B) [] 

### Ranking functions of CR eval_qsortx_start(V_num,V_width,B) 

#### Partial ranking functions of CR eval_qsortx_start(V_num,V_width,B) 


### Resulting Chains:eval_qsortx_start(V_num,V_width,B) 
* [24]
* [23]...


### Merging Chains  eval_qsortx_start/3 into  External patterns of execution 
* [[24]] --> 1 
* [[23]] --> 2 


Computing Bounds
=====================================

#### Cost of loops [12] 

 * loop 12:eval_qsortx_bb6_in(V_width,V_6,B,C,D) -> [eval_qsortx_bb6_in(V_width',V_6',B',C',D')] 
1
#### Cost of phase [12]:eval_qsortx_bb6_in(V_width,V_6,B,C,D) -> [eval_qsortx_bb6_in(V_width',V_6',B',C',D')] 
1*it(12)+0
#### Cost of phase [12]:eval_qsortx_bb6_in(V_width,V_6,B,C,D) -> [eval_qsortx_bb6_in(V_width',V_6',B',C',D')] 
1*it(12)+0
#### Cost of chains of eval_qsortx_bb6_in(V_width,V_6,B,C,D):
* Chain [[12]]...: 1*it(12)+0
  with precondition: [B=2] 

* Chain [[12],11]: 1*it(12)+0
  with precondition: [B=2,V_width=C,V_6=D] 

* Chain [11]: 0
  with precondition: [B=2,C=V_width,D=V_6] 


#### Cost of loops [14] 

 * loop 14:eval_qsortx_bb8_in(V_width,V_6,B,C,D) -> [eval_qsortx_bb8_in(V_width',V_6',B',C',D')] 
1
#### Cost of phase [14]:eval_qsortx_bb8_in(V_width,V_6,B,C,D) -> [eval_qsortx_bb8_in(V_width',V_6',B',C',D')] 
1*it(14)+0
#### Cost of phase [14]:eval_qsortx_bb8_in(V_width,V_6,B,C,D) -> [eval_qsortx_bb8_in(V_width',V_6',B',C',D')] 
1*it(14)+0
#### Cost of chains of eval_qsortx_bb8_in(V_width,V_6,B,C,D):
* Chain [[14]]...: 1*it(14)+0
  with precondition: [B=3] 

* Chain [[14],13]: 1*it(14)+0
  with precondition: [B=3,V_width=C,V_6=D] 

* Chain [13]: 0
  with precondition: [B=3,C=V_width,D=V_6] 


#### Cost of loops [17] 

 * loop 17:eval_qsortx_bb5_in(V_width,V_6,B,C,D) -> [eval_qsortx_bb5_in(V_width',V_6',B',C',D')] 
2*s(5)+3
#### Cost of phase [17]:eval_qsortx_bb5_in(V_width,V_6,B,C,D) -> [eval_qsortx_bb5_in(V_width',V_6',B',C',D')] 
5*it(17)+0
#### Cost of phase [17]:eval_qsortx_bb5_in(V_width,V_6,B,C,D) -> [eval_qsortx_bb5_in(V_width',V_6',B',C',D')] 
5*it(17)+0
#### Cost of phase [17]:eval_qsortx_bb5_in(V_width,V_6,B,C,D) -> [eval_qsortx_bb5_in(V_width',V_6',B',C',D')] 
5*it(17)+0
#### Cost of chains of eval_qsortx_bb5_in(V_width,V_6,B,C,D):
* Chain [[17]]...: 5*it(17)+0
  with precondition: [B=4] 

* Chain [[17],16]: 7*it(17)+2
  with precondition: [B=4,V_width=C,V_6=D] 

* Chain [[17],15]...: 6*aux(3)+0
  with precondition: [B=4] 

* Chain [16]: 2*s(7)+2
  with precondition: [B=4,C=V_width,D=V_6] 

* Chain [15]...: 1*aux(3)+0
  with precondition: [B=4] 


#### Cost of loops [20] 

 * loop 20:eval_qsortx_bb2_in(V_width,V_6,B) -> [eval_qsortx_bb2_in(V_width',V_6',B')] 
1*s(22)+0
#### Cost of phase [20]:eval_qsortx_bb2_in(V_width,V_6,B) -> [eval_qsortx_bb2_in(V_width',V_6',B')] 
1*s(23)+0
#### Cost of phase [20]:eval_qsortx_bb2_in(V_width,V_6,B) -> [eval_qsortx_bb2_in(V_width',V_6',B')] 
1*s(23)+0
#### Cost of phase [20]:eval_qsortx_bb2_in(V_width,V_6,B) -> [eval_qsortx_bb2_in(V_width',V_6',B')] 
1*s(23)+0
#### Cost of chains of eval_qsortx_bb2_in(V_width,V_6,B):
* Chain [[20]]...: 1*s(23)+0
  with precondition: [B=5] 

* Chain [[20],19]...: 2*aux(7)+0
  with precondition: [B=5,V_width=V_6] 

* Chain [[20],18]: 2*aux(8)+0
  with precondition: [B=5,V_width=V_6] 

* Chain [19]...: 1*aux(7)+0
  with precondition: [B=5,V_width=V_6] 

* Chain [18]: 1*aux(8)+0
  with precondition: [B=5,V_width=V_6] 


#### Cost of chains of eval_qsortx_bb0_in(V_width,B):
* Chain [22]: 1*aux(11)+0
  with precondition: [] 

* Chain [21]...: 1*aux(12)+0
  with precondition: [] 


#### Cost of chains of eval_qsortx_start(V_num,V_width,B):
* Chain [24]: 1*s(37)+0
  with precondition: [] 

* Chain [23]...: 1*s(38)+0
  with precondition: [] 


Closed-form bounds of eval_qsortx_start(V_num,V_width,B): 
-------------------------------------
* Chain [24] with precondition: [] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [23]... with precondition: [] 
    - Upper bound: inf 
    - Complexity: infinity 

### Maximum cost of eval_qsortx_start(V_num,V_width,B): inf 
Asymptotic class: infinity 

Time statistics: 
-------------------------------------
* Partial evaluation computed in 56 ms.
* Invariants computed in 24 ms.
   - Backward Invariants 12 ms.
   - Transitive Invariants 4 ms.
* Refinement performed in 47 ms.
* Termination proved in 4 ms.
* Upper bounds computed in 38 ms.
   - Equation cost structures 17 ms.
   - Phase cost structures 10 ms.
   - Chain cost structures 15 ms.
   - Solving cost expressions 0 ms.
* Total analysis performed in 214 ms.


Warning: Ignored call to eval_zfdct_byte_params_stop/1 in equation eval_zfdct_byte_params_bb21_in/1 

Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. non_recursive  : [eval_zfdct_byte_params_bb21_in/1]
1. non_recursive  : [eval_zfdct_byte_params_NewDefault_in/1]
2. recursive  : [eval_zfdct_byte_params_bb19_in/3]
3. recursive  : [eval_zfdct_byte_params_bb5_in/5]
4. recursive  : [eval_zfdct_byte_params_19/3,eval_zfdct_byte_params_20/3,eval_zfdct_byte_params_bb16_in/3,eval_zfdct_byte_params_bb8_in/3]
5. non_recursive  : [eval_zfdct_byte_params_NewDefault7_in/1]
6. non_recursive  : [loop_cont_eval_zfdct_byte_params_bb8_in/2]
7. non_recursive  : [eval_zfdct_byte_params_bb7_in/2]
8. non_recursive  : [loop_cont_eval_zfdct_byte_params_bb19_in/2]
9. non_recursive  : [loop_cont_eval_zfdct_byte_params_bb5_in/3]
10. non_recursive  : [eval_zfdct_byte_params_bb0_in/3]
11. non_recursive  : [eval_zfdct_byte_params_start/3]

#### Obtained direct recursion through partial evaluation 
0. SCC is completely evaluated into other SCCs
1. SCC is completely evaluated into other SCCs
2. SCC is partially evaluated into eval_zfdct_byte_params_bb19_in/3
3. SCC is partially evaluated into eval_zfdct_byte_params_bb5_in/5
4. SCC is partially evaluated into eval_zfdct_byte_params_bb8_in/3
5. SCC is completely evaluated into other SCCs
6. SCC is partially evaluated into loop_cont_eval_zfdct_byte_params_bb8_in/2
7. SCC is partially evaluated into eval_zfdct_byte_params_bb7_in/2
8. SCC is completely evaluated into other SCCs
9. SCC is completely evaluated into other SCCs
10. SCC is partially evaluated into eval_zfdct_byte_params_bb0_in/3
11. SCC is partially evaluated into eval_zfdct_byte_params_start/3

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations eval_zfdct_byte_params_bb19_in/3 
* CE 11 is refined into CE [18] 
* CE 10 is refined into CE [19] 


#### Refined cost equations eval_zfdct_byte_params_bb19_in/3 
* CE 18: eval_zfdct_byte_params_bb19_in(V_count,V_i_0,B) = 0
     [V_i_0>=V_count,V_i_0>=0,B=2] 
* CE 19: eval_zfdct_byte_params_bb19_in(V_count,V_i_0,B) = 1+ eval_zfdct_byte_params_bb19_in(V_count,C,D)
     [V_count>=V_i_0+1,V_i_0>=0,V_i_0+1=C,D=2,B=2] 

### Cost equations --> "Loop" of eval_zfdct_byte_params_bb19_in/3 
* CEs [19] --> Loop 14 
* CEs [18] --> Loop 15 

#### Loops of eval_zfdct_byte_params_bb19_in/3 
* Loop 14: eval_zfdct_byte_params_bb19_in(V_count,V_i_0,B)->  eval_zfdct_byte_params_bb19_in(V_count,V_i_0',B')
                  [V_count>=V_i_0+1,V_i_0>=0,V_i_0+1=V_i_0',B'=2,B=2] 
* Loop 15: eval_zfdct_byte_params_bb19_in(V_count,V_i_0,B) [V_i_0>=V_count,V_i_0>=0,B=2] 

### Ranking functions of CR eval_zfdct_byte_params_bb19_in(V_count,V_i_0,B) 
* RF of phase [14]: [V_count-V_i_0]

#### Partial ranking functions of CR eval_zfdct_byte_params_bb19_in(V_count,V_i_0,B) 
* Partial RF of phase [14]:
  - RF of loop [14:1]:
    V_count-V_i_0


### Resulting Chains:eval_zfdct_byte_params_bb19_in(V_count,V_i_0,B) 
* [[14],15]
* [15]


### Merging Chains  eval_zfdct_byte_params_bb19_in/3 into  External patterns of execution 
* [[15]] --> 1 
* [[15,[14]]] --> 2 


### Specialization of cost equations eval_zfdct_byte_params_bb5_in/5 
* CE 9 is refined into CE [20] 
* CE 8 is refined into CE [21] 


#### Refined cost equations eval_zfdct_byte_params_bb5_in/5 
* CE 20: eval_zfdct_byte_params_bb5_in(A,B,C,D,B) = 0
     [C>=A,C>=0,D=4] 
* CE 21: eval_zfdct_byte_params_bb5_in(V_start,V_count,V_i_1,B,C) = 1+ eval_zfdct_byte_params_bb5_in(V_start,V_count,D,E,C)
     [V_start>=V_i_1+1,V_i_1>=0,V_i_1+1=D,E=4,B=4] 

### Cost equations --> "Loop" of eval_zfdct_byte_params_bb5_in/5 
* CEs [21] --> Loop 16 
* CEs [20] --> Loop 17 

#### Loops of eval_zfdct_byte_params_bb5_in/5 
* Loop 16: eval_zfdct_byte_params_bb5_in(V_start,V_count,V_i_1,B,C)->  eval_zfdct_byte_params_bb5_in(V_start,V_count,V_i_1',B',C)
                  [V_start>=V_i_1+1,V_i_1>=0,V_i_1+1=V_i_1',B'=4,B=4] 
* Loop 17: eval_zfdct_byte_params_bb5_in(A,B,C,D,B) [C>=A,C>=0,D=4] 

### Ranking functions of CR eval_zfdct_byte_params_bb5_in(V_start,V_count,V_i_1,B,C) 
* RF of phase [16]: [V_start-V_i_1]

#### Partial ranking functions of CR eval_zfdct_byte_params_bb5_in(V_start,V_count,V_i_1,B,C) 
* Partial RF of phase [16]:
  - RF of loop [16:1]:
    V_start-V_i_1


### Resulting Chains:eval_zfdct_byte_params_bb5_in(V_start,V_count,V_i_1,B,C) 
* [[16],17]
* [17]


### Merging Chains  eval_zfdct_byte_params_bb5_in/5 into  External patterns of execution 
* [[17]] --> 1 
* [[17,[16]]] --> 2 


### Specialization of cost equations eval_zfdct_byte_params_bb8_in/3 
* CE 12 is refined into CE [22] 
* CE 13 is refined into CE [23] 
* CE 15 is refined into CE [24] 
* CE 14 is refined into CE [25] 


#### Refined cost equations eval_zfdct_byte_params_bb8_in/3 
* CE 22: eval_zfdct_byte_params_bb8_in(V_count,V_i_2,B) = 0
     [V_count>=V_i_2+1,V_i_2>=0,B=3] 
* CE 23: eval_zfdct_byte_params_bb8_in(V_count,V_i_2,B) = 0
     [V_count>=V_i_2+1,V_i_2>=0,B=2] 
* CE 24: eval_zfdct_byte_params_bb8_in(V_count,V_i_2,B) = 0
     [V_i_2>=V_count,V_i_2>=0,B=2] 
* CE 25: eval_zfdct_byte_params_bb8_in(V_count,V_i_2,B) = 1+ eval_zfdct_byte_params_bb8_in(V_count,C,B)
     [V_count>=V_i_2+1,V_i_2>=0,V_i_2+1=C] 

### Cost equations --> "Loop" of eval_zfdct_byte_params_bb8_in/3 
* CEs [25] --> Loop 18 
* CEs [22] --> Loop 19 
* CEs [23] --> Loop 20 
* CEs [24] --> Loop 21 

#### Loops of eval_zfdct_byte_params_bb8_in/3 
* Loop 18: eval_zfdct_byte_params_bb8_in(V_count,V_i_2,B)->  eval_zfdct_byte_params_bb8_in(V_count,V_i_2',B)
                  [V_count>=V_i_2+1,V_i_2>=0,V_i_2+1=V_i_2'] 
* Loop 19: eval_zfdct_byte_params_bb8_in(V_count,V_i_2,B) [V_count>=V_i_2+1,V_i_2>=0,B=3] 
* Loop 20: eval_zfdct_byte_params_bb8_in(V_count,V_i_2,B) [V_count>=V_i_2+1,V_i_2>=0,B=2] 
* Loop 21: eval_zfdct_byte_params_bb8_in(V_count,V_i_2,B) [V_i_2>=V_count,V_i_2>=0,B=2] 

### Ranking functions of CR eval_zfdct_byte_params_bb8_in(V_count,V_i_2,B) 
* RF of phase [18]: [V_count-V_i_2]

#### Partial ranking functions of CR eval_zfdct_byte_params_bb8_in(V_count,V_i_2,B) 
* Partial RF of phase [18]:
  - RF of loop [18:1]:
    V_count-V_i_2


### Resulting Chains:eval_zfdct_byte_params_bb8_in(V_count,V_i_2,B) 
* [[18],21]
* [[18],20]
* [[18],19]
* [21]
* [20]
* [19]


### Merging Chains  eval_zfdct_byte_params_bb8_in/3 into  External patterns of execution 
* [[21]] --> 1 
* [[20],[20,[18]],[21,[18]]] --> 2 
* [[19],[19,[18]]] --> 3 


### Specialization of cost equations loop_cont_eval_zfdct_byte_params_bb8_in/2 
* CE 17 is refined into CE [26] 
* CE 16 is refined into CE [27] 


#### Refined cost equations loop_cont_eval_zfdct_byte_params_bb8_in/2 
* CE 26: loop_cont_eval_zfdct_byte_params_bb8_in(B,A) = 0
     [B=3] 
* CE 27: loop_cont_eval_zfdct_byte_params_bb8_in(B,A) = 0
     [B=2] 

### Cost equations --> "Loop" of loop_cont_eval_zfdct_byte_params_bb8_in/2 
* CEs [26] --> Loop 22 
* CEs [27] --> Loop 23 

#### Loops of loop_cont_eval_zfdct_byte_params_bb8_in/2 
* Loop 22: loop_cont_eval_zfdct_byte_params_bb8_in(B,A) [B=3] 
* Loop 23: loop_cont_eval_zfdct_byte_params_bb8_in(B,A) [B=2] 

### Ranking functions of CR loop_cont_eval_zfdct_byte_params_bb8_in(B,A) 

#### Partial ranking functions of CR loop_cont_eval_zfdct_byte_params_bb8_in(B,A) 


### Resulting Chains:loop_cont_eval_zfdct_byte_params_bb8_in(B,A) 
* [23]
* [22]


### Merging Chains  loop_cont_eval_zfdct_byte_params_bb8_in/2 into  External patterns of execution 
* [[23]] --> 1 
* [[22]] --> 2 


### Specialization of cost equations eval_zfdct_byte_params_bb7_in/2 
* CE 7 is refined into CE [28,29,30] 


#### Refined cost equations eval_zfdct_byte_params_bb7_in/2 
* CE 28: eval_zfdct_byte_params_bb7_in(V_count,B) = 1+ eval_zfdct_byte_params_bb8_in(V_count,C,D):1+ loop_cont_eval_zfdct_byte_params_bb8_in(E,B):1
     [0>=V_count,E=2,D=2,C=0] 
* CE 29: eval_zfdct_byte_params_bb7_in(V_count,B) = 1+ eval_zfdct_byte_params_bb8_in(V_count,C,D):2+ loop_cont_eval_zfdct_byte_params_bb8_in(E,B):1
     [V_count>=1,E=2,D=2,C=0] 
* CE 30: eval_zfdct_byte_params_bb7_in(V_count,B) = 1+ eval_zfdct_byte_params_bb8_in(V_count,C,D):3+ loop_cont_eval_zfdct_byte_params_bb8_in(E,B):2
     [V_count>=1,E=3,D=3,C=0] 

### Cost equations --> "Loop" of eval_zfdct_byte_params_bb7_in/2 
* CEs [29,30] --> Loop 24 
* CEs [28] --> Loop 25 

#### Loops of eval_zfdct_byte_params_bb7_in/2 
* Loop 24: eval_zfdct_byte_params_bb7_in(V_count,B) [V_count>=1] 
* Loop 25: eval_zfdct_byte_params_bb7_in(V_count,B) [0>=V_count] 

### Ranking functions of CR eval_zfdct_byte_params_bb7_in(V_count,B) 

#### Partial ranking functions of CR eval_zfdct_byte_params_bb7_in(V_count,B) 


### Resulting Chains:eval_zfdct_byte_params_bb7_in(V_count,B) 
* [25]
* [24]


### Merging Chains  eval_zfdct_byte_params_bb7_in/2 into  External patterns of execution 
* [[25]] --> 1 
* [[24]] --> 2 


### Specialization of cost equations eval_zfdct_byte_params_bb0_in/3 
* CE 3 is refined into CE [31,32] 
* CE 4 is refined into CE [33] 
* CE 5 is refined into CE [34,35,36,37] 
* CE 6 is refined into CE [38,39] 


#### Refined cost equations eval_zfdct_byte_params_bb0_in/3 
* CE 31: eval_zfdct_byte_params_bb0_in(V_start,V_count,B) = 0+ eval_zfdct_byte_params_bb7_in(V_count,B):1
     [0>=V_count] 
* CE 32: eval_zfdct_byte_params_bb0_in(V_start,V_count,B) = 0+ eval_zfdct_byte_params_bb7_in(V_count,B):2
     [V_count>=1] 
* CE 33: eval_zfdct_byte_params_bb0_in(V_start,V_count,B) = 0
     [] 
* CE 34: eval_zfdct_byte_params_bb0_in(V_start,V_count,B) = 1+ eval_zfdct_byte_params_bb5_in(V_start,V_count,C,D,V_count):1+ eval_zfdct_byte_params_bb7_in(V_count,B):1
     [0>=V_count,0>=V_start,D=4,C=0] 
* CE 35: eval_zfdct_byte_params_bb0_in(V_start,V_count,B) = 1+ eval_zfdct_byte_params_bb5_in(V_start,V_count,C,D,V_count):1+ eval_zfdct_byte_params_bb7_in(V_count,B):2
     [V_count>=1,0>=V_start,D=4,C=0] 
* CE 36: eval_zfdct_byte_params_bb0_in(V_start,V_count,B) = 1+ eval_zfdct_byte_params_bb5_in(V_start,V_count,C,D,V_count):2+ eval_zfdct_byte_params_bb7_in(V_count,B):1
     [V_start>=1,0>=V_count,D=4,C=0] 
* CE 37: eval_zfdct_byte_params_bb0_in(V_start,V_count,B) = 1+ eval_zfdct_byte_params_bb5_in(V_start,V_count,C,D,V_count):2+ eval_zfdct_byte_params_bb7_in(V_count,B):2
     [V_count>=1,V_start>=1,D=4,C=0] 
* CE 38: eval_zfdct_byte_params_bb0_in(V_start,V_count,B) = 1+ eval_zfdct_byte_params_bb19_in(V_count,C,D):1
     [0>=V_count,D=2,C=0] 
* CE 39: eval_zfdct_byte_params_bb0_in(V_start,V_count,B) = 1+ eval_zfdct_byte_params_bb19_in(V_count,C,D):2
     [V_count>=1,D=2,C=0] 

### Cost equations --> "Loop" of eval_zfdct_byte_params_bb0_in/3 
* CEs [31,32,33,34,35,36,37,38,39] --> Loop 26 

#### Loops of eval_zfdct_byte_params_bb0_in/3 
* Loop 26: eval_zfdct_byte_params_bb0_in(V_start,V_count,B) [] 

### Ranking functions of CR eval_zfdct_byte_params_bb0_in(V_start,V_count,B) 

#### Partial ranking functions of CR eval_zfdct_byte_params_bb0_in(V_start,V_count,B) 


### Resulting Chains:eval_zfdct_byte_params_bb0_in(V_start,V_count,B) 
* [26]


### Merging Chains  eval_zfdct_byte_params_bb0_in/3 into  External patterns of execution 
* [[26]] --> 1 


### Specialization of cost equations eval_zfdct_byte_params_start/3 
* CE 2 is refined into CE [40] 


#### Refined cost equations eval_zfdct_byte_params_start/3 
* CE 40: eval_zfdct_byte_params_start(V_start,V_count,B) = 0+ eval_zfdct_byte_params_bb0_in(V_start,V_count,B):1
     [] 

### Cost equations --> "Loop" of eval_zfdct_byte_params_start/3 
* CEs [40] --> Loop 27 

#### Loops of eval_zfdct_byte_params_start/3 
* Loop 27: eval_zfdct_byte_params_start(V_start,V_count,B) [] 

### Ranking functions of CR eval_zfdct_byte_params_start(V_start,V_count,B) 

#### Partial ranking functions of CR eval_zfdct_byte_params_start(V_start,V_count,B) 


### Resulting Chains:eval_zfdct_byte_params_start(V_start,V_count,B) 
* [27]


### Merging Chains  eval_zfdct_byte_params_start/3 into  External patterns of execution 
* [[27]] --> 1 


Computing Bounds
=====================================

#### Cost of loops [14] 

 * loop 14:eval_zfdct_byte_params_bb19_in(V_count,V_i_0,B) -> [eval_zfdct_byte_params_bb19_in(V_count',V_i_0',B')] 
1
#### Cost of phase [14]:eval_zfdct_byte_params_bb19_in(V_count,V_i_0,B) -> [eval_zfdct_byte_params_bb19_in(V_count',V_i_0',B')] 
1*it(14)+0
  Such that:it(14) =< V_count-V_i_0
it(14) =< V_count-V_i_0-V_count'+V_i_0'

#### Cost of chains of eval_zfdct_byte_params_bb19_in(V_count,V_i_0,B):
* Chain [[14],15]: 1*it(14)+0
  Such that:it(14) =< V_count-V_i_0

  with precondition: [B=2,V_i_0>=0,V_count>=V_i_0+1] 

* Chain [15]: 0
  with precondition: [B=2,V_i_0>=0,V_i_0>=V_count] 


#### Cost of loops [16] 

 * loop 16:eval_zfdct_byte_params_bb5_in(V_start,V_count,V_i_1,B,C) -> [eval_zfdct_byte_params_bb5_in(V_start',V_count',V_i_1',B',C')] 
1
#### Cost of phase [16]:eval_zfdct_byte_params_bb5_in(V_start,V_count,V_i_1,B,C) -> [eval_zfdct_byte_params_bb5_in(V_start',V_count',V_i_1',B',C')] 
1*it(16)+0
  Such that:it(16) =< V_start-V_i_1
it(16) =< V_start-V_i_1-V_start'+V_i_1'

#### Cost of chains of eval_zfdct_byte_params_bb5_in(V_start,V_count,V_i_1,B,C):
* Chain [[16],17]: 1*it(16)+0
  Such that:it(16) =< V_start-V_i_1

  with precondition: [B=4,V_count=C,V_i_1>=0,V_start>=V_i_1+1] 

* Chain [17]: 0
  with precondition: [B=4,C=V_count,V_i_1>=0,V_i_1>=V_start] 


#### Cost of loops [18] 

 * loop 18:eval_zfdct_byte_params_bb8_in(V_count,V_i_2,B) -> [eval_zfdct_byte_params_bb8_in(V_count',V_i_2',B')] 
1
#### Cost of phase [18]:eval_zfdct_byte_params_bb8_in(V_count,V_i_2,B) -> [eval_zfdct_byte_params_bb8_in(V_count',V_i_2',B')] 
1*it(18)+0
  Such that:it(18) =< V_count-V_i_2
it(18) =< V_count-V_i_2-V_count'+V_i_2'

#### Cost of phase [18]:eval_zfdct_byte_params_bb8_in(V_count,V_i_2,B) -> [eval_zfdct_byte_params_bb8_in(V_count',V_i_2',B')] 
1*it(18)+0
  Such that:it(18) =< V_count-V_i_2
it(18) =< V_count-V_i_2-V_count'+V_i_2'

#### Cost of phase [18]:eval_zfdct_byte_params_bb8_in(V_count,V_i_2,B) -> [eval_zfdct_byte_params_bb8_in(V_count',V_i_2',B')] 
1*it(18)+0
  Such that:it(18) =< V_count-V_i_2
it(18) =< V_count-V_i_2-V_count'+V_i_2'

#### Cost of chains of eval_zfdct_byte_params_bb8_in(V_count,V_i_2,B):
* Chain [[18],21]: 1*it(18)+0
  Such that:it(18) =< V_count-V_i_2

  with precondition: [B=2,V_i_2>=0,V_count>=V_i_2+1] 

* Chain [[18],20]: 1*it(18)+0
  Such that:it(18) =< V_count-V_i_2

  with precondition: [B=2,V_i_2>=0,V_count>=V_i_2+2] 

* Chain [[18],19]: 1*it(18)+0
  Such that:it(18) =< V_count-V_i_2

  with precondition: [B=3,V_i_2>=0,V_count>=V_i_2+2] 

* Chain [21]: 0
  with precondition: [B=2,V_i_2>=0,V_i_2>=V_count] 

* Chain [20]: 0
  with precondition: [B=2,V_i_2>=0,V_count>=V_i_2+1] 

* Chain [19]: 0
  with precondition: [B=3,V_i_2>=0,V_count>=V_i_2+1] 


#### Cost of chains of loop_cont_eval_zfdct_byte_params_bb8_in(B,A):
* Chain [23]: 0
  with precondition: [B=2] 

* Chain [22]: 0
  with precondition: [B=3] 


#### Cost of chains of eval_zfdct_byte_params_bb7_in(V_count,B):
* Chain [25]: 1
  with precondition: [0>=V_count] 

* Chain [24]: 3*s(5)+1
  Such that:aux(2) =< V_count
s(5) =< aux(2)

  with precondition: [V_count>=1] 


#### Cost of chains of eval_zfdct_byte_params_bb0_in(V_start,V_count,B):
* Chain [26]: 10*s(8)+2*s(11)+2
  Such that:aux(3) =< V_start
aux(4) =< V_count
s(11) =< aux(3)
s(8) =< aux(4)

  with precondition: [] 


#### Cost of chains of eval_zfdct_byte_params_start(V_start,V_count,B):
* Chain [27]: 2*s(18)+10*s(19)+2
  Such that:s(16) =< V_start
s(17) =< V_count
s(18) =< s(16)
s(19) =< s(17)

  with precondition: [] 


Closed-form bounds of eval_zfdct_byte_params_start(V_start,V_count,B): 
-------------------------------------
* Chain [27] with precondition: [] 
    - Upper bound: nat(V_start)*2+2+nat(V_count)*10 
    - Complexity: n 

### Maximum cost of eval_zfdct_byte_params_start(V_start,V_count,B): nat(V_start)*2+2+nat(V_count)*10 
Asymptotic class: n 

Time statistics: 
-------------------------------------
* Partial evaluation computed in 12 ms.
* Invariants computed in 21 ms.
   - Backward Invariants 11 ms.
   - Transitive Invariants 4 ms.
* Refinement performed in 40 ms.
* Termination proved in 6 ms.
* Upper bounds computed in 35 ms.
   - Equation cost structures 16 ms.
   - Phase cost structures 7 ms.
   - Chain cost structures 11 ms.
   - Solving cost expressions 0 ms.
* Total analysis performed in 140 ms.


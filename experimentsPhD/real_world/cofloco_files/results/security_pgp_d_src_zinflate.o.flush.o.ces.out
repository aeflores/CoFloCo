Warning: Ignored call to eval_flush_stop/1 in equation loop_cont_eval_flush_bb1_in/2 

Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. recursive  : [eval_flush_11/5,eval_flush_12/5,eval_flush_13/5,eval_flush_14/5,eval_flush_15/5,eval_flush_4/5,eval_flush_5/5,eval_flush_bb1_in/3,eval_flush_bb5_in/5]
1. non_recursive  : [loop_cont_eval_flush_bb1_in/2]
2. non_recursive  : [eval_flush_bb0_in/3]
3. non_recursive  : [eval_flush_start/3]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into eval_flush_bb1_in/3
1. SCC is completely evaluated into other SCCs
2. SCC is partially evaluated into eval_flush_bb0_in/3
3. SCC is partially evaluated into eval_flush_start/3

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations eval_flush_bb1_in/3 
* CE 8 is refined into CE [9] 
* CE 4 is refined into CE [10] 
* CE 5 is refined into CE [11] 
* CE 7 is refined into CE [12] 
* CE 6 is refined into CE [13] 


#### Refined cost equations eval_flush_bb1_in/3 
* CE 9: eval_flush_bb1_in(V__outcnt,V__0,B) = 0
     [B=2,V__0=0] 
* CE 10: eval_flush_bb1_in(V__outcnt,V__0,B) = 1+ eval_flush_bb1_in(C,D,E)
     [V__0>=1,V__outcnt+V__0=C,E=2,D=0,B=2] 
* CE 11: eval_flush_bb1_in(V__outcnt,V__0,B) = 1+ eval_flush_bb1_in(C,D,E)
     [0>=V__0+1,V__outcnt+V__0=C,E=2,D=0,B=2] 
* CE 12: eval_flush_bb1_in(V__outcnt,V__0,B) = 1+ eval_flush_bb1_in(C,D,E)
     [V__outcnt>=D+8193,D+8192=V__outcnt+V__0,E=2,C=8192,B=2] 
* CE 13: eval_flush_bb1_in(V__outcnt,V__0,B) = 1+ eval_flush_bb1_in(C,D,E)
     [D+8191>=V__outcnt,D+8192=V__outcnt+V__0,E=2,C=8192,B=2] 

### Cost equations --> "Loop" of eval_flush_bb1_in/3 
* CEs [10] --> Loop 8 
* CEs [11] --> Loop 9 
* CEs [12] --> Loop 10 
* CEs [13] --> Loop 11 
* CEs [9] --> Loop 12 

#### Loops of eval_flush_bb1_in/3 
* Loop 8: eval_flush_bb1_in(V__outcnt,V__0,B)->  eval_flush_bb1_in(V__outcnt',V__0',B')
                  [V__0>=1,V__outcnt+V__0=V__outcnt',B'=2,V__0'=0,B=2] 
* Loop 9: eval_flush_bb1_in(V__outcnt,V__0,B)->  eval_flush_bb1_in(V__outcnt',V__0',B')
                  [0>=V__0+1,V__outcnt+V__0=V__outcnt',B'=2,V__0'=0,B=2] 
* Loop 10: eval_flush_bb1_in(V__outcnt,V__0,B)->  eval_flush_bb1_in(V__outcnt',V__0',B')
                  [0>=V__0+1,V__outcnt+V__0=V__0'+8192,B'=2,V__outcnt'=8192,B=2] 
* Loop 11: eval_flush_bb1_in(V__outcnt,V__0,B)->  eval_flush_bb1_in(V__outcnt',V__0',B')
                  [V__0>=1,V__outcnt+V__0=V__0'+8192,B'=2,V__outcnt'=8192,B=2] 
* Loop 12: eval_flush_bb1_in(V__outcnt,V__0,B) [B=2,V__0=0] 

### Ranking functions of CR eval_flush_bb1_in(V__outcnt,V__0,B) 

#### Partial ranking functions of CR eval_flush_bb1_in(V__outcnt,V__0,B) 


### Resulting Chains:eval_flush_bb1_in(V__outcnt,V__0,B) 
* [[10,11]]...
* [[10,11],12]
* [[10,11],9,12]
* [[10,11],8,12]
* [12]
* [9,12]
* [8,12]


### Merging Chains  eval_flush_bb1_in/3 into  External patterns of execution 
* [[12]] --> 1 
* [[12,[10,11]]] --> 2 
* [[12,9]] --> 3 
* [[12,8]] --> 4 
* [[12,9,[10,11]]] --> 5 
* [[12,8,[10,11]]] --> 6 
* [[[10,11]]] --> 7 


### Specialization of cost equations eval_flush_bb0_in/3 
* CE 3 is refined into CE [14,15,16,17,18,19,20] 


#### Refined cost equations eval_flush_bb0_in/3 
* CE 14: eval_flush_bb0_in(V_w,V__outcnt,B) = 1+ eval_flush_bb1_in(V__outcnt,C,D):1
     [D=2,C=0,V_w=0] 
* CE 15: eval_flush_bb0_in(V_w,V__outcnt,B) = 1+ eval_flush_bb1_in(V__outcnt,C,D):2
     [V__outcnt+C=8192,V_w+V__outcnt=8192,D=2] 
* CE 16: eval_flush_bb0_in(V_w,V__outcnt,B) = 1+ eval_flush_bb1_in(V__outcnt,V_w,C):3
     [0>=V_w+1,C=2] 
* CE 17: eval_flush_bb0_in(V_w,V__outcnt,B) = 1+ eval_flush_bb1_in(V__outcnt,V_w,C):4
     [V_w>=1,C=2] 
* CE 18: eval_flush_bb0_in(V_w,V__outcnt,B) = 1+ eval_flush_bb1_in(V__outcnt,V_w,C):5
     [8191>=V_w+V__outcnt,C=2] 
* CE 19: eval_flush_bb0_in(V_w,V__outcnt,B) = 1+ eval_flush_bb1_in(V__outcnt,V_w,C):6
     [V_w+V__outcnt>=8193,C=2] 
* CE 20: eval_flush_bb0_in(V_w,V__outcnt,B) = 1+ eval_flush_bb1_in(V__outcnt,V_w,C):7
     [C=2] 

### Cost equations --> "Loop" of eval_flush_bb0_in/3 
* CEs [20] --> Loop 13 
* CEs [19] --> Loop 14 
* CEs [18] --> Loop 15 
* CEs [17] --> Loop 16 
* CEs [16] --> Loop 17 
* CEs [15] --> Loop 18 
* CEs [14] --> Loop 19 

#### Loops of eval_flush_bb0_in/3 
* Loop 13: eval_flush_bb0_in(V_w,V__outcnt,B) [] 
* Loop 14: eval_flush_bb0_in(V_w,V__outcnt,B) [V_w+V__outcnt>=8193] 
* Loop 15: eval_flush_bb0_in(V_w,V__outcnt,B) [8191>=V_w+V__outcnt] 
* Loop 16: eval_flush_bb0_in(V_w,V__outcnt,B) [V_w>=1] 
* Loop 17: eval_flush_bb0_in(V_w,V__outcnt,B) [0>=V_w+1] 
* Loop 18: eval_flush_bb0_in(V_w,V__outcnt,B) [V_w+V__outcnt=8192] 
* Loop 19: eval_flush_bb0_in(V_w,V__outcnt,B) [V_w=0] 

### Ranking functions of CR eval_flush_bb0_in(V_w,V__outcnt,B) 

#### Partial ranking functions of CR eval_flush_bb0_in(V_w,V__outcnt,B) 


### Resulting Chains:eval_flush_bb0_in(V_w,V__outcnt,B) 
* [19]
* [18]
* [17]
* [16]
* [15]
* [14]
* [13]...


### Merging Chains  eval_flush_bb0_in/3 into  External patterns of execution 
* [[19]] --> 1 
* [[18]] --> 2 
* [[17]] --> 3 
* [[16]] --> 4 
* [[15]] --> 5 
* [[14]] --> 6 
* [[13]] --> 7 


### Specialization of cost equations eval_flush_start/3 
* CE 2 is refined into CE [21,22,23,24,25,26,27] 


#### Refined cost equations eval_flush_start/3 
* CE 21: eval_flush_start(V_w,V__outcnt,B) = 0+ eval_flush_bb0_in(C,V__outcnt,B):1
     [C=0,V_w=0] 
* CE 22: eval_flush_start(V_w,V__outcnt,B) = 0+ eval_flush_bb0_in(V_w,C,B):2
     [V_w+C=8192,V_w+V__outcnt=8192] 
* CE 23: eval_flush_start(V_w,V__outcnt,B) = 0+ eval_flush_bb0_in(V_w,V__outcnt,B):3
     [0>=V_w+1] 
* CE 24: eval_flush_start(V_w,V__outcnt,B) = 0+ eval_flush_bb0_in(V_w,V__outcnt,B):4
     [V_w>=1] 
* CE 25: eval_flush_start(V_w,V__outcnt,B) = 0+ eval_flush_bb0_in(V_w,V__outcnt,B):5
     [8191>=V_w+V__outcnt] 
* CE 26: eval_flush_start(V_w,V__outcnt,B) = 0+ eval_flush_bb0_in(V_w,V__outcnt,B):6
     [V_w+V__outcnt>=8193] 
* CE 27: eval_flush_start(V_w,V__outcnt,B) = 0+ eval_flush_bb0_in(V_w,V__outcnt,B):7
     [] 

### Cost equations --> "Loop" of eval_flush_start/3 
* CEs [27] --> Loop 20 
* CEs [26] --> Loop 21 
* CEs [25] --> Loop 22 
* CEs [24] --> Loop 23 
* CEs [23] --> Loop 24 
* CEs [22] --> Loop 25 
* CEs [21] --> Loop 26 

#### Loops of eval_flush_start/3 
* Loop 20: eval_flush_start(V_w,V__outcnt,B) [] 
* Loop 21: eval_flush_start(V_w,V__outcnt,B) [V_w+V__outcnt>=8193] 
* Loop 22: eval_flush_start(V_w,V__outcnt,B) [8191>=V_w+V__outcnt] 
* Loop 23: eval_flush_start(V_w,V__outcnt,B) [V_w>=1] 
* Loop 24: eval_flush_start(V_w,V__outcnt,B) [0>=V_w+1] 
* Loop 25: eval_flush_start(V_w,V__outcnt,B) [V_w+V__outcnt=8192] 
* Loop 26: eval_flush_start(V_w,V__outcnt,B) [V_w=0] 

### Ranking functions of CR eval_flush_start(V_w,V__outcnt,B) 

#### Partial ranking functions of CR eval_flush_start(V_w,V__outcnt,B) 


### Resulting Chains:eval_flush_start(V_w,V__outcnt,B) 
* [26]
* [25]
* [24]
* [23]
* [22]
* [21]
* [20]...


### Merging Chains  eval_flush_start/3 into  External patterns of execution 
* [[26]] --> 1 
* [[25]] --> 2 
* [[24]] --> 3 
* [[23]] --> 4 
* [[22]] --> 5 
* [[21]] --> 6 
* [[20]] --> 7 


Computing Bounds
=====================================

#### Cost of loops [10,11] 

 * loop 10:eval_flush_bb1_in(V__outcnt,V__0,B) -> [eval_flush_bb1_in(V__outcnt',V__0',B')] 
1
 * loop 11:eval_flush_bb1_in(V__outcnt,V__0,B) -> [eval_flush_bb1_in(V__outcnt',V__0',B')] 
1
#### Cost of phase [10,11]:eval_flush_bb1_in(V__outcnt,V__0,B) -> [eval_flush_bb1_in(V__outcnt',V__0',B')] 
2*it(10)+0
#### Cost of phase [10,11]:eval_flush_bb1_in(V__outcnt,V__0,B) -> [eval_flush_bb1_in(V__outcnt',V__0',B')] 
2*it(10)+0
#### Cost of phase [10,11]:eval_flush_bb1_in(V__outcnt,V__0,B) -> [eval_flush_bb1_in(V__outcnt',V__0',B')] 
2*it(10)+0
#### Cost of phase [10,11]:eval_flush_bb1_in(V__outcnt,V__0,B) -> [eval_flush_bb1_in(V__outcnt',V__0',B')] 
2*it(10)+0
#### Cost of chains of eval_flush_bb1_in(V__outcnt,V__0,B):
* Chain [[10,11]]...: 2*it(10)+0
  with precondition: [B=2] 

* Chain [[10,11],12]: 2*it(10)+0
  with precondition: [B=2,V__0+V__outcnt=8192] 

* Chain [[10,11],9,12]: 2*it(10)+1
  with precondition: [B=2,8191>=V__0+V__outcnt] 

* Chain [[10,11],8,12]: 2*it(10)+1
  with precondition: [B=2,V__0+V__outcnt>=8193] 

* Chain [12]: 0
  with precondition: [V__0=0,B=2] 

* Chain [9,12]: 1
  with precondition: [B=2,0>=V__0+1] 

* Chain [8,12]: 1
  with precondition: [B=2,V__0>=1] 


#### Cost of chains of eval_flush_bb0_in(V_w,V__outcnt,B):
* Chain [19]: 1
  with precondition: [V_w=0] 

* Chain [18]: 2*s(1)+1
  with precondition: [V__outcnt+V_w=8192] 

* Chain [17]: 2
  with precondition: [0>=V_w+1] 

* Chain [16]: 2
  with precondition: [V_w>=1] 

* Chain [15]: 2*s(2)+2
  with precondition: [8191>=V__outcnt+V_w] 

* Chain [14]: 2*s(3)+2
  with precondition: [V__outcnt+V_w>=8193] 

* Chain [13]...: 2*s(4)+1
  with precondition: [] 


#### Cost of chains of eval_flush_start(V_w,V__outcnt,B):
* Chain [26]: 1
  with precondition: [V_w=0] 

* Chain [25]: 2*s(5)+1
  with precondition: [V__outcnt+V_w=8192] 

* Chain [24]: 2
  with precondition: [0>=V_w+1] 

* Chain [23]: 2
  with precondition: [V_w>=1] 

* Chain [22]: 2*s(6)+2
  with precondition: [8191>=V__outcnt+V_w] 

* Chain [21]: 2*s(7)+2
  with precondition: [V__outcnt+V_w>=8193] 

* Chain [20]...: 2*s(8)+1
  with precondition: [] 


Closed-form bounds of eval_flush_start(V_w,V__outcnt,B): 
-------------------------------------
* Chain [26] with precondition: [V_w=0] 
    - Upper bound: 1 
    - Complexity: constant 
* Chain [25] with precondition: [V_w+V__outcnt=8192] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [24] with precondition: [0>=V_w+1] 
    - Upper bound: 2 
    - Complexity: constant 
* Chain [23] with precondition: [V_w>=1] 
    - Upper bound: 2 
    - Complexity: constant 
* Chain [22] with precondition: [8191>=V_w+V__outcnt] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [21] with precondition: [V_w+V__outcnt>=8193] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [20]... with precondition: [] 
    - Upper bound: inf 
    - Complexity: infinity 

### Maximum cost of eval_flush_start(V_w,V__outcnt,B): inf 
Asymptotic class: infinity 

Time statistics: 
-------------------------------------
* Partial evaluation computed in 22 ms.
* Invariants computed in 17 ms.
   - Backward Invariants 9 ms.
   - Transitive Invariants 1 ms.
* Refinement performed in 31 ms.
* Termination proved in 1 ms.
* Upper bounds computed in 20 ms.
   - Equation cost structures 7 ms.
   - Phase cost structures 4 ms.
   - Chain cost structures 4 ms.
   - Solving cost expressions 0 ms.
* Total analysis performed in 116 ms.


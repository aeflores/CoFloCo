Warning: Ignored call to eval_randPoolStir_stop/1 in equation loop_cont_eval_randPoolStir_bb10_in/2 

Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. recursive  : [eval_randPoolStir_bb1_in/6]
1. recursive  : [eval_randPoolStir_22/6,eval_randPoolStir_23/6,eval_randPoolStir_bb4_in/6]
2. recursive  : [eval_randPoolStir_54/6,eval_randPoolStir_55/6,eval_randPoolStir_bb7_in/6]
3. recursive  : [eval_randPoolStir_bb10_in/2]
4. non_recursive  : [loop_cont_eval_randPoolStir_bb10_in/2]
5. non_recursive  : [eval_randPoolStir_86/1]
6. non_recursive  : [eval_randPoolStir_85/3]
7. non_recursive  : [eval_randPoolStir_84/3]
8. non_recursive  : [loop_cont_eval_randPoolStir_bb7_in/4]
9. non_recursive  : [eval_randPoolStir_53/3]
10. non_recursive  : [eval_randPoolStir_52/3]
11. non_recursive  : [loop_cont_eval_randPoolStir_bb4_in/4]
12. non_recursive  : [eval_randPoolStir_21/3]
13. non_recursive  : [eval_randPoolStir_20/3]
14. non_recursive  : [loop_cont_eval_randPoolStir_bb1_in/4]
15. non_recursive  : [eval_randPoolStir_bb0_in/3]
16. non_recursive  : [eval_randPoolStir_start/3]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into eval_randPoolStir_bb1_in/6
1. SCC is partially evaluated into eval_randPoolStir_bb4_in/6
2. SCC is partially evaluated into eval_randPoolStir_bb7_in/6
3. SCC is partially evaluated into eval_randPoolStir_bb10_in/2
4. SCC is completely evaluated into other SCCs
5. SCC is partially evaluated into eval_randPoolStir_86/1
6. SCC is completely evaluated into other SCCs
7. SCC is completely evaluated into other SCCs
8. SCC is completely evaluated into other SCCs
9. SCC is partially evaluated into eval_randPoolStir_53/3
10. SCC is completely evaluated into other SCCs
11. SCC is completely evaluated into other SCCs
12. SCC is partially evaluated into eval_randPoolStir_21/3
13. SCC is completely evaluated into other SCCs
14. SCC is completely evaluated into other SCCs
15. SCC is partially evaluated into eval_randPoolStir_bb0_in/3
16. SCC is partially evaluated into eval_randPoolStir_start/3

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations eval_randPoolStir_bb1_in/6 
* CE 5 is refined into CE [15] 
* CE 4 is refined into CE [16] 


#### Refined cost equations eval_randPoolStir_bb1_in/6 
* CE 15: eval_randPoolStir_bb1_in(A,B,C,D,A,B) = 0
     [C>=96,D=4] 
* CE 16: eval_randPoolStir_bb1_in(V__randPoolAddPos,V__randPoolGetPos,V_i_0,B,C,D) = 1+ eval_randPoolStir_bb1_in(V__randPoolAddPos,V__randPoolGetPos,E,F,C,D)
     [V_i_0>=0,95>=V_i_0,V_i_0+1=E,F=4,B=4] 

### Cost equations --> "Loop" of eval_randPoolStir_bb1_in/6 
* CEs [16] --> Loop 14 
* CEs [15] --> Loop 15 

#### Loops of eval_randPoolStir_bb1_in/6 
* Loop 14: eval_randPoolStir_bb1_in(V__randPoolAddPos,V__randPoolGetPos,V_i_0,B,C,D)->  eval_randPoolStir_bb1_in(V__randPoolAddPos,V__randPoolGetPos,V_i_0',B',C,D)
                  [V_i_0>=0,95>=V_i_0,V_i_0+1=V_i_0',B'=4,B=4] 
* Loop 15: eval_randPoolStir_bb1_in(A,B,C,D,A,B) [C>=96,D=4] 

### Ranking functions of CR eval_randPoolStir_bb1_in(V__randPoolAddPos,V__randPoolGetPos,V_i_0,B,C,D) 
* RF of phase [14]: [-V_i_0+96]

#### Partial ranking functions of CR eval_randPoolStir_bb1_in(V__randPoolAddPos,V__randPoolGetPos,V_i_0,B,C,D) 
* Partial RF of phase [14]:
  - RF of loop [14:1]:
    -V_i_0+96


### Resulting Chains:eval_randPoolStir_bb1_in(V__randPoolAddPos,V__randPoolGetPos,V_i_0,B,C,D) 
* [[14],15]


### Merging Chains  eval_randPoolStir_bb1_in/6 into  External patterns of execution 
* [[15,[14]]] --> 1 


### Specialization of cost equations eval_randPoolStir_bb4_in/6 
* CE 8 is refined into CE [17] 
* CE 7 is refined into CE [18] 


#### Refined cost equations eval_randPoolStir_bb4_in/6 
* CE 17: eval_randPoolStir_bb4_in(A,B,C,D,A,B) = 0
     [C>=96,D=3] 
* CE 18: eval_randPoolStir_bb4_in(V__randPoolAddPos,V__randPoolGetPos,V_i_1,B,C,D) = 1+ eval_randPoolStir_bb4_in(V__randPoolAddPos,V__randPoolGetPos,E,F,C,D)
     [V_i_1>=0,95>=V_i_1,V_i_1+4=E,F=3,B=3] 

### Cost equations --> "Loop" of eval_randPoolStir_bb4_in/6 
* CEs [18] --> Loop 16 
* CEs [17] --> Loop 17 

#### Loops of eval_randPoolStir_bb4_in/6 
* Loop 16: eval_randPoolStir_bb4_in(V__randPoolAddPos,V__randPoolGetPos,V_i_1,B,C,D)->  eval_randPoolStir_bb4_in(V__randPoolAddPos,V__randPoolGetPos,V_i_1',B',C,D)
                  [V_i_1>=0,95>=V_i_1,V_i_1+4=V_i_1',B'=3,B=3] 
* Loop 17: eval_randPoolStir_bb4_in(A,B,C,D,A,B) [C>=96,D=3] 

### Ranking functions of CR eval_randPoolStir_bb4_in(V__randPoolAddPos,V__randPoolGetPos,V_i_1,B,C,D) 
* RF of phase [16]: [-V_i_1/4+24]

#### Partial ranking functions of CR eval_randPoolStir_bb4_in(V__randPoolAddPos,V__randPoolGetPos,V_i_1,B,C,D) 
* Partial RF of phase [16]:
  - RF of loop [16:1]:
    -V_i_1/4+24


### Resulting Chains:eval_randPoolStir_bb4_in(V__randPoolAddPos,V__randPoolGetPos,V_i_1,B,C,D) 
* [[16],17]


### Merging Chains  eval_randPoolStir_bb4_in/6 into  External patterns of execution 
* [[17,[16]]] --> 1 


### Specialization of cost equations eval_randPoolStir_bb7_in/6 
* CE 11 is refined into CE [19] 
* CE 10 is refined into CE [20] 


#### Refined cost equations eval_randPoolStir_bb7_in/6 
* CE 19: eval_randPoolStir_bb7_in(A,B,C,D,A,B) = 0
     [C>=96,D=2] 
* CE 20: eval_randPoolStir_bb7_in(V__randPoolAddPos,V__randPoolGetPos,V_i_2,B,C,D) = 1+ eval_randPoolStir_bb7_in(V__randPoolAddPos,V__randPoolGetPos,E,F,C,D)
     [V_i_2>=0,95>=V_i_2,V_i_2+4=E,F=2,B=2] 

### Cost equations --> "Loop" of eval_randPoolStir_bb7_in/6 
* CEs [20] --> Loop 18 
* CEs [19] --> Loop 19 

#### Loops of eval_randPoolStir_bb7_in/6 
* Loop 18: eval_randPoolStir_bb7_in(V__randPoolAddPos,V__randPoolGetPos,V_i_2,B,C,D)->  eval_randPoolStir_bb7_in(V__randPoolAddPos,V__randPoolGetPos,V_i_2',B',C,D)
                  [V_i_2>=0,95>=V_i_2,V_i_2+4=V_i_2',B'=2,B=2] 
* Loop 19: eval_randPoolStir_bb7_in(A,B,C,D,A,B) [C>=96,D=2] 

### Ranking functions of CR eval_randPoolStir_bb7_in(V__randPoolAddPos,V__randPoolGetPos,V_i_2,B,C,D) 
* RF of phase [18]: [-V_i_2/4+24]

#### Partial ranking functions of CR eval_randPoolStir_bb7_in(V__randPoolAddPos,V__randPoolGetPos,V_i_2,B,C,D) 
* Partial RF of phase [18]:
  - RF of loop [18:1]:
    -V_i_2/4+24


### Resulting Chains:eval_randPoolStir_bb7_in(V__randPoolAddPos,V__randPoolGetPos,V_i_2,B,C,D) 
* [[18],19]


### Merging Chains  eval_randPoolStir_bb7_in/6 into  External patterns of execution 
* [[19,[18]]] --> 1 


### Specialization of cost equations eval_randPoolStir_bb10_in/2 
* CE 14 is refined into CE [21] 
* CE 13 is refined into CE [22] 


#### Refined cost equations eval_randPoolStir_bb10_in/2 
* CE 21: eval_randPoolStir_bb10_in(V_i_3,B) = 0
     [V_i_3>=96,B=5] 
* CE 22: eval_randPoolStir_bb10_in(V_i_3,B) = 1+ eval_randPoolStir_bb10_in(C,D)
     [V_i_3>=0,95>=V_i_3,V_i_3+1=C,D=5,B=5] 

### Cost equations --> "Loop" of eval_randPoolStir_bb10_in/2 
* CEs [22] --> Loop 20 
* CEs [21] --> Loop 21 

#### Loops of eval_randPoolStir_bb10_in/2 
* Loop 20: eval_randPoolStir_bb10_in(V_i_3,B)->  eval_randPoolStir_bb10_in(V_i_3',B')
                  [V_i_3>=0,95>=V_i_3,V_i_3+1=V_i_3',B'=5,B=5] 
* Loop 21: eval_randPoolStir_bb10_in(V_i_3,B) [V_i_3>=96,B=5] 

### Ranking functions of CR eval_randPoolStir_bb10_in(V_i_3,B) 
* RF of phase [20]: [-V_i_3+96]

#### Partial ranking functions of CR eval_randPoolStir_bb10_in(V_i_3,B) 
* Partial RF of phase [20]:
  - RF of loop [20:1]:
    -V_i_3+96


### Resulting Chains:eval_randPoolStir_bb10_in(V_i_3,B) 
* [[20],21]


### Merging Chains  eval_randPoolStir_bb10_in/2 into  External patterns of execution 
* [[21,[20]]] --> 1 


### Specialization of cost equations eval_randPoolStir_86/1 
* CE 12 is refined into CE [23] 


#### Refined cost equations eval_randPoolStir_86/1 
* CE 23: eval_randPoolStir_86(B) = 1+ eval_randPoolStir_bb10_in(C,D):1
     [D=5,C=0] 

### Cost equations --> "Loop" of eval_randPoolStir_86/1 
* CEs [23] --> Loop 22 

#### Loops of eval_randPoolStir_86/1 
* Loop 22: eval_randPoolStir_86(B) [] 

### Ranking functions of CR eval_randPoolStir_86(B) 

#### Partial ranking functions of CR eval_randPoolStir_86(B) 


### Resulting Chains:eval_randPoolStir_86(B) 
* [22]


### Merging Chains  eval_randPoolStir_86/1 into  External patterns of execution 
* [[22]] --> 1 


### Specialization of cost equations eval_randPoolStir_53/3 
* CE 9 is refined into CE [24] 


#### Refined cost equations eval_randPoolStir_53/3 
* CE 24: eval_randPoolStir_53(V__randPoolAddPos,V__randPoolGetPos,B) = 1+ eval_randPoolStir_bb7_in(V__randPoolAddPos,V__randPoolGetPos,C,D,V__randPoolAddPos,V__randPoolGetPos):1+ eval_randPoolStir_86(B):1
     [D=2,C=0] 

### Cost equations --> "Loop" of eval_randPoolStir_53/3 
* CEs [24] --> Loop 23 

#### Loops of eval_randPoolStir_53/3 
* Loop 23: eval_randPoolStir_53(V__randPoolAddPos,V__randPoolGetPos,B) [] 

### Ranking functions of CR eval_randPoolStir_53(V__randPoolAddPos,V__randPoolGetPos,B) 

#### Partial ranking functions of CR eval_randPoolStir_53(V__randPoolAddPos,V__randPoolGetPos,B) 


### Resulting Chains:eval_randPoolStir_53(V__randPoolAddPos,V__randPoolGetPos,B) 
* [23]


### Merging Chains  eval_randPoolStir_53/3 into  External patterns of execution 
* [[23]] --> 1 


### Specialization of cost equations eval_randPoolStir_21/3 
* CE 6 is refined into CE [25] 


#### Refined cost equations eval_randPoolStir_21/3 
* CE 25: eval_randPoolStir_21(V__randPoolAddPos,V__randPoolGetPos,B) = 1+ eval_randPoolStir_bb4_in(V__randPoolAddPos,V__randPoolGetPos,C,D,V__randPoolAddPos,V__randPoolGetPos):1+ eval_randPoolStir_53(V__randPoolAddPos,V__randPoolGetPos,B):1
     [D=3,C=0] 

### Cost equations --> "Loop" of eval_randPoolStir_21/3 
* CEs [25] --> Loop 24 

#### Loops of eval_randPoolStir_21/3 
* Loop 24: eval_randPoolStir_21(V__randPoolAddPos,V__randPoolGetPos,B) [] 

### Ranking functions of CR eval_randPoolStir_21(V__randPoolAddPos,V__randPoolGetPos,B) 

#### Partial ranking functions of CR eval_randPoolStir_21(V__randPoolAddPos,V__randPoolGetPos,B) 


### Resulting Chains:eval_randPoolStir_21(V__randPoolAddPos,V__randPoolGetPos,B) 
* [24]


### Merging Chains  eval_randPoolStir_21/3 into  External patterns of execution 
* [[24]] --> 1 


### Specialization of cost equations eval_randPoolStir_bb0_in/3 
* CE 3 is refined into CE [26] 


#### Refined cost equations eval_randPoolStir_bb0_in/3 
* CE 26: eval_randPoolStir_bb0_in(V__randPoolAddPos,V__randPoolGetPos,B) = 1+ eval_randPoolStir_bb1_in(V__randPoolAddPos,V__randPoolGetPos,C,D,V__randPoolAddPos,V__randPoolGetPos):1+ eval_randPoolStir_21(V__randPoolAddPos,V__randPoolGetPos,B):1
     [D=4,C=0] 

### Cost equations --> "Loop" of eval_randPoolStir_bb0_in/3 
* CEs [26] --> Loop 25 

#### Loops of eval_randPoolStir_bb0_in/3 
* Loop 25: eval_randPoolStir_bb0_in(V__randPoolAddPos,V__randPoolGetPos,B) [] 

### Ranking functions of CR eval_randPoolStir_bb0_in(V__randPoolAddPos,V__randPoolGetPos,B) 

#### Partial ranking functions of CR eval_randPoolStir_bb0_in(V__randPoolAddPos,V__randPoolGetPos,B) 


### Resulting Chains:eval_randPoolStir_bb0_in(V__randPoolAddPos,V__randPoolGetPos,B) 
* [25]


### Merging Chains  eval_randPoolStir_bb0_in/3 into  External patterns of execution 
* [[25]] --> 1 


### Specialization of cost equations eval_randPoolStir_start/3 
* CE 2 is refined into CE [27] 


#### Refined cost equations eval_randPoolStir_start/3 
* CE 27: eval_randPoolStir_start(V__randPoolAddPos,V__randPoolGetPos,B) = 0+ eval_randPoolStir_bb0_in(V__randPoolAddPos,V__randPoolGetPos,B):1
     [] 

### Cost equations --> "Loop" of eval_randPoolStir_start/3 
* CEs [27] --> Loop 26 

#### Loops of eval_randPoolStir_start/3 
* Loop 26: eval_randPoolStir_start(V__randPoolAddPos,V__randPoolGetPos,B) [] 

### Ranking functions of CR eval_randPoolStir_start(V__randPoolAddPos,V__randPoolGetPos,B) 

#### Partial ranking functions of CR eval_randPoolStir_start(V__randPoolAddPos,V__randPoolGetPos,B) 


### Resulting Chains:eval_randPoolStir_start(V__randPoolAddPos,V__randPoolGetPos,B) 
* [26]


### Merging Chains  eval_randPoolStir_start/3 into  External patterns of execution 
* [[26]] --> 1 


Computing Bounds
=====================================

#### Cost of loops [14] 

 * loop 14:eval_randPoolStir_bb1_in(V__randPoolAddPos,V__randPoolGetPos,V_i_0,B,C,D) -> [eval_randPoolStir_bb1_in(V__randPoolAddPos',V__randPoolGetPos',V_i_0',B',C',D')] 
1
#### Cost of phase [14]:eval_randPoolStir_bb1_in(V__randPoolAddPos,V__randPoolGetPos,V_i_0,B,C,D) -> [eval_randPoolStir_bb1_in(V__randPoolAddPos',V__randPoolGetPos',V_i_0',B',C',D')] 
1*it(14)+0
  Such that:it(14) =< -V_i_0+96
it(14) =< -V_i_0+V_i_0'

#### Cost of chains of eval_randPoolStir_bb1_in(V__randPoolAddPos,V__randPoolGetPos,V_i_0,B,C,D):
* Chain [[14],15]: 1*it(14)+0
  Such that:it(14) =< -V_i_0+96

  with precondition: [B=4,V__randPoolAddPos=C,V__randPoolGetPos=D,95>=V_i_0,V_i_0>=0] 


#### Cost of loops [16] 

 * loop 16:eval_randPoolStir_bb4_in(V__randPoolAddPos,V__randPoolGetPos,V_i_1,B,C,D) -> [eval_randPoolStir_bb4_in(V__randPoolAddPos',V__randPoolGetPos',V_i_1',B',C',D')] 
1
#### Cost of phase [16]:eval_randPoolStir_bb4_in(V__randPoolAddPos,V__randPoolGetPos,V_i_1,B,C,D) -> [eval_randPoolStir_bb4_in(V__randPoolAddPos',V__randPoolGetPos',V_i_1',B',C',D')] 
1*it(16)+0
  Such that:it(16) =< -V_i_1/4+24
it(16) =< -V_i_1/4+V_i_1'/4

#### Cost of chains of eval_randPoolStir_bb4_in(V__randPoolAddPos,V__randPoolGetPos,V_i_1,B,C,D):
* Chain [[16],17]: 1*it(16)+0
  Such that:it(16) =< -V_i_1/4+24

  with precondition: [B=3,V__randPoolAddPos=C,V__randPoolGetPos=D,95>=V_i_1,V_i_1>=0] 


#### Cost of loops [18] 

 * loop 18:eval_randPoolStir_bb7_in(V__randPoolAddPos,V__randPoolGetPos,V_i_2,B,C,D) -> [eval_randPoolStir_bb7_in(V__randPoolAddPos',V__randPoolGetPos',V_i_2',B',C',D')] 
1
#### Cost of phase [18]:eval_randPoolStir_bb7_in(V__randPoolAddPos,V__randPoolGetPos,V_i_2,B,C,D) -> [eval_randPoolStir_bb7_in(V__randPoolAddPos',V__randPoolGetPos',V_i_2',B',C',D')] 
1*it(18)+0
  Such that:it(18) =< -V_i_2/4+24
it(18) =< -V_i_2/4+V_i_2'/4

#### Cost of chains of eval_randPoolStir_bb7_in(V__randPoolAddPos,V__randPoolGetPos,V_i_2,B,C,D):
* Chain [[18],19]: 1*it(18)+0
  Such that:it(18) =< -V_i_2/4+24

  with precondition: [B=2,V__randPoolAddPos=C,V__randPoolGetPos=D,95>=V_i_2,V_i_2>=0] 


#### Cost of loops [20] 

 * loop 20:eval_randPoolStir_bb10_in(V_i_3,B) -> [eval_randPoolStir_bb10_in(V_i_3',B')] 
1
#### Cost of phase [20]:eval_randPoolStir_bb10_in(V_i_3,B) -> [eval_randPoolStir_bb10_in(V_i_3',B')] 
1*it(20)+0
  Such that:it(20) =< -V_i_3+96
it(20) =< -V_i_3+V_i_3'

#### Cost of chains of eval_randPoolStir_bb10_in(V_i_3,B):
* Chain [[20],21]: 1*it(20)+0
  Such that:it(20) =< -V_i_3+96

  with precondition: [B=5,95>=V_i_3,V_i_3>=0] 


#### Cost of chains of eval_randPoolStir_86(B):
* Chain [22]: 1*s(1)+1
  Such that:s(1) =< 96

  with precondition: [] 


#### Cost of chains of eval_randPoolStir_53(V__randPoolAddPos,V__randPoolGetPos,B):
* Chain [23]: 1*s(2)+1*s(3)+2
  Such that:s(2) =< 24
s(3) =< 96

  with precondition: [] 


#### Cost of chains of eval_randPoolStir_21(V__randPoolAddPos,V__randPoolGetPos,B):
* Chain [24]: 2*s(4)+1*s(6)+3
  Such that:s(6) =< 96
aux(1) =< 24
s(4) =< aux(1)

  with precondition: [] 


#### Cost of chains of eval_randPoolStir_bb0_in(V__randPoolAddPos,V__randPoolGetPos,B):
* Chain [25]: 2*s(7)+2*s(10)+4
  Such that:s(9) =< 24
aux(2) =< 96
s(7) =< aux(2)
s(10) =< s(9)

  with precondition: [] 


#### Cost of chains of eval_randPoolStir_start(V__randPoolAddPos,V__randPoolGetPos,B):
* Chain [26]: 2*s(13)+2*s(14)+4
  Such that:s(11) =< 24
s(12) =< 96
s(13) =< s(12)
s(14) =< s(11)

  with precondition: [] 


Closed-form bounds of eval_randPoolStir_start(V__randPoolAddPos,V__randPoolGetPos,B): 
-------------------------------------
* Chain [26] with precondition: [] 
    - Upper bound: 244 
    - Complexity: constant 

### Maximum cost of eval_randPoolStir_start(V__randPoolAddPos,V__randPoolGetPos,B): 244 
Asymptotic class: constant 

Time statistics: 
-------------------------------------
* Partial evaluation computed in 18 ms.
* Invariants computed in 23 ms.
   - Backward Invariants 9 ms.
   - Transitive Invariants 7 ms.
* Refinement performed in 40 ms.
* Termination proved in 8 ms.
* Upper bounds computed in 78 ms.
   - Equation cost structures 26 ms.
   - Phase cost structures 28 ms.
   - Chain cost structures 28 ms.
   - Solving cost expressions 1 ms.
* Total analysis performed in 198 ms.


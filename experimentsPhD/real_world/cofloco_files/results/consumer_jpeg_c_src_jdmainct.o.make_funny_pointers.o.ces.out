WARNING: Excluded non-linear constraints:[D+1=<C*A]
WARNING: Excluded non-linear constraints:[D>=C*A]
WARNING: Excluded non-linear constraints:[K*L=0]
WARNING: Excluded non-linear constraints:[L*M>=0+1,L*M-K*D>=0,L*M-K*D+1=<K]
WARNING: Excluded non-linear constraints:[L*M>=0+1,L*M-K*D>=0,L*M-K*D+1=< -K]
WARNING: Excluded non-linear constraints:[L*M+1=<0,-L*M+K*D>=0,-L*M+K*D+1=<K]
WARNING: Excluded non-linear constraints:[L*M+1=<0,-L*M+K*D>=0,-L*M+K*D+1=< -K]
WARNING: Excluded non-linear constraints:[N>=O*P]
Warning: Ignored call to eval_make_funny_pointers_stop/1 in equation loop_cont_eval_make_funny_pointers_bb1_in/2 

Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. recursive  : [eval_make_funny_pointers_bb3_in/10]
1. recursive  : [eval_make_funny_pointers_bb5_in/12]
2. recursive  : [eval_make_funny_pointers_bb8_in/9]
3. recursive  : [eval_make_funny_pointers_bb1_in/3,loop_cont_eval_make_funny_pointers_bb3_in/7,loop_cont_eval_make_funny_pointers_bb5_in/8,loop_cont_eval_make_funny_pointers_bb8_in/4]
4. non_recursive  : [loop_cont_eval_make_funny_pointers_bb1_in/2]
5. non_recursive  : [eval_make_funny_pointers_bb0_in/1]
6. non_recursive  : [eval_make_funny_pointers_start/1]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into eval_make_funny_pointers_bb3_in/10
1. SCC is partially evaluated into eval_make_funny_pointers_bb5_in/12
2. SCC is partially evaluated into eval_make_funny_pointers_bb8_in/9
3. SCC is partially evaluated into eval_make_funny_pointers_bb1_in/3
4. SCC is completely evaluated into other SCCs
5. SCC is partially evaluated into eval_make_funny_pointers_bb0_in/1
6. SCC is partially evaluated into eval_make_funny_pointers_start/1

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations eval_make_funny_pointers_bb3_in/10 
* CE 8 is refined into CE [13] 
* CE 7 is refined into CE [14] 


#### Refined cost equations eval_make_funny_pointers_bb3_in/10 
* CE 13: eval_make_funny_pointers_bb3_in(A,B,C,D,E,A,B,C,D,F) = 0
     [D>=0,F=0,E=2] 
* CE 14: eval_make_funny_pointers_bb3_in(V_4,V_ci_0,V_22,V_i_0,B,C,D,E,F,G) = 1+ eval_make_funny_pointers_bb3_in(V_4,V_ci_0,V_22,H,I,C,D,E,F,G)
     [V_i_0>=0,V_i_0+1=H,I=2,B=2] 

### Cost equations --> "Loop" of eval_make_funny_pointers_bb3_in/10 
* CEs [14] --> Loop 11 
* CEs [13] --> Loop 12 

#### Loops of eval_make_funny_pointers_bb3_in/10 
* Loop 11: eval_make_funny_pointers_bb3_in(V_4,V_ci_0,V_22,V_i_0,B,C,D,E,F,G)->  eval_make_funny_pointers_bb3_in(V_4,V_ci_0,V_22,V_i_0',B',C,D,E,F,G)
                  [V_i_0>=0,V_i_0+1=V_i_0',B'=2,B=2] 
* Loop 12: eval_make_funny_pointers_bb3_in(A,B,C,D,E,A,B,C,D,F) [D>=0,F=0,E=2] 

### Ranking functions of CR eval_make_funny_pointers_bb3_in(V_4,V_ci_0,V_22,V_i_0,B,C,D,E,F,G) 

#### Partial ranking functions of CR eval_make_funny_pointers_bb3_in(V_4,V_ci_0,V_22,V_i_0,B,C,D,E,F,G) 


### Resulting Chains:eval_make_funny_pointers_bb3_in(V_4,V_ci_0,V_22,V_i_0,B,C,D,E,F,G) 
* [[11]]...
* [[11],12]
* [12]


### Merging Chains  eval_make_funny_pointers_bb3_in/10 into  External patterns of execution 
* [[12]] --> 1 
* [[12,[11]]] --> 2 
* [[[11]]] --> 3 


### Specialization of cost equations eval_make_funny_pointers_bb5_in/12 
* CE 10 is refined into CE [15] 
* CE 9 is refined into CE [16] 


#### Refined cost equations eval_make_funny_pointers_bb5_in/12 
* CE 15: eval_make_funny_pointers_bb5_in(A,B,C,D,E,F,A,B,C,D,E,G) = 0
     [E>=2*C,G=0,F=3] 
* CE 16: eval_make_funny_pointers_bb5_in(V_4,V_ci_0,V_22,V_i_0,V_i_1,B,C,D,E,F,G,H) = 1+ eval_make_funny_pointers_bb5_in(V_4,V_ci_0,V_22,V_i_0,I,J,C,D,E,F,G,H)
     [2*V_22>=V_i_1+1,V_i_1+1=I,J=3,B=3] 

### Cost equations --> "Loop" of eval_make_funny_pointers_bb5_in/12 
* CEs [16] --> Loop 13 
* CEs [15] --> Loop 14 

#### Loops of eval_make_funny_pointers_bb5_in/12 
* Loop 13: eval_make_funny_pointers_bb5_in(V_4,V_ci_0,V_22,V_i_0,V_i_1,B,C,D,E,F,G,H)->  eval_make_funny_pointers_bb5_in(V_4,V_ci_0,V_22,V_i_0,V_i_1',B',C,D,E,F,G,H)
                  [2*V_22>=V_i_1+1,V_i_1+1=V_i_1',B'=3,B=3] 
* Loop 14: eval_make_funny_pointers_bb5_in(A,B,C,D,E,F,A,B,C,D,E,G) [E>=2*C,G=0,F=3] 

### Ranking functions of CR eval_make_funny_pointers_bb5_in(V_4,V_ci_0,V_22,V_i_0,V_i_1,B,C,D,E,F,G,H) 
* RF of phase [13]: [2*V_22-V_i_1]

#### Partial ranking functions of CR eval_make_funny_pointers_bb5_in(V_4,V_ci_0,V_22,V_i_0,V_i_1,B,C,D,E,F,G,H) 
* Partial RF of phase [13]:
  - RF of loop [13:1]:
    2*V_22-V_i_1


### Resulting Chains:eval_make_funny_pointers_bb5_in(V_4,V_ci_0,V_22,V_i_0,V_i_1,B,C,D,E,F,G,H) 
* [[13],14]
* [14]


### Merging Chains  eval_make_funny_pointers_bb5_in/12 into  External patterns of execution 
* [[14]] --> 1 
* [[14,[13]]] --> 2 


### Specialization of cost equations eval_make_funny_pointers_bb8_in/9 
* CE 12 is refined into CE [17] 
* CE 11 is refined into CE [18] 


#### Refined cost equations eval_make_funny_pointers_bb8_in/9 
* CE 17: eval_make_funny_pointers_bb8_in(A,B,C,D,E,F,G,A,H) = 0
     [F>=C,H=B+1,G=4] 
* CE 18: eval_make_funny_pointers_bb8_in(V_4,V_ci_0,V_22,V_i_0,V_i_1,V_i_2,B,C,D) = 1+ eval_make_funny_pointers_bb8_in(V_4,V_ci_0,V_22,V_i_0,V_i_1,E,F,C,D)
     [V_22>=V_i_2+1,V_i_2+1=E,F=4,B=4] 

### Cost equations --> "Loop" of eval_make_funny_pointers_bb8_in/9 
* CEs [18] --> Loop 15 
* CEs [17] --> Loop 16 

#### Loops of eval_make_funny_pointers_bb8_in/9 
* Loop 15: eval_make_funny_pointers_bb8_in(V_4,V_ci_0,V_22,V_i_0,V_i_1,V_i_2,B,C,D)->  eval_make_funny_pointers_bb8_in(V_4,V_ci_0,V_22,V_i_0,V_i_1,V_i_2',B',C,D)
                  [V_22>=V_i_2+1,V_i_2+1=V_i_2',B'=4,B=4] 
* Loop 16: eval_make_funny_pointers_bb8_in(A,B,C,D,E,F,G,A,H) [F>=C,B+1=H,G=4] 

### Ranking functions of CR eval_make_funny_pointers_bb8_in(V_4,V_ci_0,V_22,V_i_0,V_i_1,V_i_2,B,C,D) 
* RF of phase [15]: [V_22-V_i_2]

#### Partial ranking functions of CR eval_make_funny_pointers_bb8_in(V_4,V_ci_0,V_22,V_i_0,V_i_1,V_i_2,B,C,D) 
* Partial RF of phase [15]:
  - RF of loop [15:1]:
    V_22-V_i_2


### Resulting Chains:eval_make_funny_pointers_bb8_in(V_4,V_ci_0,V_22,V_i_0,V_i_1,V_i_2,B,C,D) 
* [[15],16]
* [16]


### Merging Chains  eval_make_funny_pointers_bb8_in/9 into  External patterns of execution 
* [[16]] --> 1 
* [[16,[15]]] --> 2 


### Specialization of cost equations eval_make_funny_pointers_bb1_in/3 
* CE 6 is refined into CE [19] 
* CE 4 is refined into CE [20,21,22] 
* CE 5 is refined into CE [23,24,25,26,27] 


#### Refined cost equations eval_make_funny_pointers_bb1_in/3 
* CE 19: eval_make_funny_pointers_bb1_in(V_4,V_ci_0,B) = 0
     [B=5] 
* CE 20: eval_make_funny_pointers_bb1_in(V_4,V_ci_0,B) = 4+ eval_make_funny_pointers_bb3_in(V_4,C,D,E,F,V_4,G,D,H,I):1+ eval_make_funny_pointers_bb5_in(V_4,J,D,K,L,M,V_4,N,D,O,P,Q):1+ eval_make_funny_pointers_bb8_in(V_4,R,D,S,T,U,V,V_4,W):1+ eval_make_funny_pointers_bb1_in(V_4,W,X)
     [0>=D,W=R+1,W=N+1,W=J+1,W=G+1,W=C+1,W=V_ci_0+1,X=5,V=4,U=0,T=0,S=0,Q=0,P=0,O=0,M=3,L=0,K=0,I=0,H=0,F=2,E=0,B=5] 
* CE 21: eval_make_funny_pointers_bb1_in(V_4,V_ci_0,B) = 4+ eval_make_funny_pointers_bb3_in(V_4,C,D,E,F,V_4,G,D,H,I):2+ eval_make_funny_pointers_bb5_in(V_4,J,D,H,K,L,V_4,M,D,H,N,O):1+ eval_make_funny_pointers_bb8_in(V_4,P,D,H,Q,R,S,V_4,T):1+ eval_make_funny_pointers_bb1_in(V_4,T,U)
     [H>=1,0>=D,T=P+1,T=M+1,T=J+1,T=G+1,T=C+1,T=V_ci_0+1,U=5,S=4,R=0,Q=0,O=0,N=0,L=3,K=0,I=0,F=2,E=0,B=5] 
* CE 22: eval_make_funny_pointers_bb1_in(V_4,V_ci_0,B) = 4+ eval_make_funny_pointers_bb3_in(V_4,V_ci_0,C,D,E,F,G,H,I,J):3
     [0>=C,K=5,L=4,M=3,E=2,D=0,B=5] 
* CE 23: eval_make_funny_pointers_bb1_in(V_4,V_ci_0,B) = 4+ eval_make_funny_pointers_bb3_in(V_4,C,D,E,F,V_4,G,H,I,J):1+ eval_make_funny_pointers_bb5_in(V_4,K,L,M,N,O,V_4,P,Q,R,S,T):1+ eval_make_funny_pointers_bb8_in(V_4,U,V,W,X,Y,Z,V_4,A1):1+ eval_make_funny_pointers_bb1_in(V_4,A1,B1)
     [A1=U+1,A1=P+1,A1=K+1,A1=G+1,A1=C+1,A1=V_ci_0+1,B1=5,Z=4,Y=0,X=0,W=0,V=0,T=0,S=0,R=0,Q=0,O=3,N=0,M=0,L=0,J=0,I=0,H=0,F=2,E=0,D=0,B=5] 
* CE 24: eval_make_funny_pointers_bb1_in(V_4,V_ci_0,B) = 4+ eval_make_funny_pointers_bb3_in(V_4,C,D,E,F,V_4,G,D,H,I):1+ eval_make_funny_pointers_bb5_in(V_4,J,D,K,L,M,V_4,N,D,O,P,Q):2+ eval_make_funny_pointers_bb8_in(V_4,R,D,S,T,U,V,V_4,W):2+ eval_make_funny_pointers_bb1_in(V_4,W,X)
     [D>=1,2*D=T,W=R+1,2*D=P,W=N+1,W=J+1,W=G+1,W=C+1,W=V_ci_0+1,X=5,V=4,U=0,S=0,Q=0,O=0,M=3,L=0,K=0,I=0,H=0,F=2,E=0,B=5] 
* CE 25: eval_make_funny_pointers_bb1_in(V_4,V_ci_0,B) = 4+ eval_make_funny_pointers_bb3_in(V_4,C,D,E,F,V_4,G,H,I,J):2+ eval_make_funny_pointers_bb5_in(V_4,K,L,I,M,N,V_4,O,P,I,Q,R):1+ eval_make_funny_pointers_bb8_in(V_4,S,T,I,U,V,W,V_4,X):1+ eval_make_funny_pointers_bb1_in(V_4,X,Y)
     [I>=1,X=S+1,X=O+1,X=K+1,X=G+1,X=C+1,X=V_ci_0+1,Y=5,W=4,V=0,U=0,T=0,R=0,Q=0,P=0,N=3,M=0,L=0,J=0,H=0,F=2,E=0,D=0,B=5] 
* CE 26: eval_make_funny_pointers_bb1_in(V_4,V_ci_0,B) = 4+ eval_make_funny_pointers_bb3_in(V_4,C,D,E,F,V_4,G,D,H,I):2+ eval_make_funny_pointers_bb5_in(V_4,J,D,H,K,L,V_4,M,D,H,N,O):2+ eval_make_funny_pointers_bb8_in(V_4,P,D,H,Q,R,S,V_4,T):2+ eval_make_funny_pointers_bb1_in(V_4,T,U)
     [D>=1,H>=1,2*D=Q,T=P+1,2*D=N,T=M+1,T=J+1,T=G+1,T=C+1,T=V_ci_0+1,U=5,S=4,R=0,O=0,L=3,K=0,I=0,F=2,E=0,B=5] 
* CE 27: eval_make_funny_pointers_bb1_in(V_4,V_ci_0,B) = 4+ eval_make_funny_pointers_bb3_in(V_4,V_ci_0,C,D,E,F,G,H,I,J):3
     [C>=0,K=5,L=4,M=3,E=2,D=0,B=5] 

### Cost equations --> "Loop" of eval_make_funny_pointers_bb1_in/3 
* CEs [22,27] --> Loop 17 
* CEs [20,21,23,24,25,26] --> Loop 18 
* CEs [19] --> Loop 19 

#### Loops of eval_make_funny_pointers_bb1_in/3 
* Loop 17: eval_make_funny_pointers_bb1_in(V_4,V_ci_0,B) [B=5] 
* Loop 18: eval_make_funny_pointers_bb1_in(V_4,V_ci_0,B)->  eval_make_funny_pointers_bb1_in(V_4,V_ci_0',B')
                  [V_ci_0+1=V_ci_0',B'=5,B=5] 
* Loop 19: eval_make_funny_pointers_bb1_in(V_4,V_ci_0,B) [B=5] 

### Ranking functions of CR eval_make_funny_pointers_bb1_in(V_4,V_ci_0,B) 

#### Partial ranking functions of CR eval_make_funny_pointers_bb1_in(V_4,V_ci_0,B) 


### Resulting Chains:eval_make_funny_pointers_bb1_in(V_4,V_ci_0,B) 
* [[18]]...
* [[18],19]
* [[18],17]...
* [19]
* [17]...


### Merging Chains  eval_make_funny_pointers_bb1_in/3 into  External patterns of execution 
* [[19],[19,[18]]] --> 1 
* [[[18]]] --> 2 
* [[17],[17,[18]]] --> 3 


### Specialization of cost equations eval_make_funny_pointers_bb0_in/1 
* CE 3 is refined into CE [28,29,30] 


#### Refined cost equations eval_make_funny_pointers_bb0_in/1 
* CE 28: eval_make_funny_pointers_bb0_in(B) = 1+ eval_make_funny_pointers_bb1_in(C,D,E):1
     [E=5,D=0] 
* CE 29: eval_make_funny_pointers_bb0_in(B) = 1+ eval_make_funny_pointers_bb1_in(C,D,E):2
     [E=5,D=0] 
* CE 30: eval_make_funny_pointers_bb0_in(B) = 1+ eval_make_funny_pointers_bb1_in(C,D,E):3
     [E=5,D=0] 

### Cost equations --> "Loop" of eval_make_funny_pointers_bb0_in/1 
* CEs [29,30] --> Loop 20 
* CEs [28] --> Loop 21 

#### Loops of eval_make_funny_pointers_bb0_in/1 
* Loop 20: eval_make_funny_pointers_bb0_in(B) [] 
* Loop 21: eval_make_funny_pointers_bb0_in(B) [] 

### Ranking functions of CR eval_make_funny_pointers_bb0_in(B) 

#### Partial ranking functions of CR eval_make_funny_pointers_bb0_in(B) 


### Resulting Chains:eval_make_funny_pointers_bb0_in(B) 
* [21]
* [20]...


### Merging Chains  eval_make_funny_pointers_bb0_in/1 into  External patterns of execution 
* [[21]] --> 1 
* [[20]] --> 2 


### Specialization of cost equations eval_make_funny_pointers_start/1 
* CE 2 is refined into CE [31,32] 


#### Refined cost equations eval_make_funny_pointers_start/1 
* CE 31: eval_make_funny_pointers_start(B) = 0+ eval_make_funny_pointers_bb0_in(B):1
     [] 
* CE 32: eval_make_funny_pointers_start(B) = 0+ eval_make_funny_pointers_bb0_in(B):2
     [] 

### Cost equations --> "Loop" of eval_make_funny_pointers_start/1 
* CEs [32] --> Loop 22 
* CEs [31] --> Loop 23 

#### Loops of eval_make_funny_pointers_start/1 
* Loop 22: eval_make_funny_pointers_start(B) [] 
* Loop 23: eval_make_funny_pointers_start(B) [] 

### Ranking functions of CR eval_make_funny_pointers_start(B) 

#### Partial ranking functions of CR eval_make_funny_pointers_start(B) 


### Resulting Chains:eval_make_funny_pointers_start(B) 
* [23]
* [22]...


### Merging Chains  eval_make_funny_pointers_start/1 into  External patterns of execution 
* [[23]] --> 1 
* [[22]] --> 2 


Computing Bounds
=====================================

#### Cost of loops [11] 

 * loop 11:eval_make_funny_pointers_bb3_in(V_4,V_ci_0,V_22,V_i_0,B,C,D,E,F,G) -> [eval_make_funny_pointers_bb3_in(V_4',V_ci_0',V_22',V_i_0',B',C',D',E',F',G')] 
1
#### Cost of phase [11]:eval_make_funny_pointers_bb3_in(V_4,V_ci_0,V_22,V_i_0,B,C,D,E,F,G) -> [eval_make_funny_pointers_bb3_in(V_4',V_ci_0',V_22',V_i_0',B',C',D',E',F',G')] 
1*it(11)+0
#### Cost of phase [11]:eval_make_funny_pointers_bb3_in(V_4,V_ci_0,V_22,V_i_0,B,C,D,E,F,G) -> [eval_make_funny_pointers_bb3_in(V_4',V_ci_0',V_22',V_i_0',B',C',D',E',F',G')] 
1*it(11)+0
#### Cost of chains of eval_make_funny_pointers_bb3_in(V_4,V_ci_0,V_22,V_i_0,B,C,D,E,F,G):
* Chain [[11]]...: 1*it(11)+0
  with precondition: [V_i_0>=0,B=2] 

* Chain [[11],12]: 1*it(11)+0
  with precondition: [B=2,G=0,V_4=C,V_ci_0=D,V_22=E,V_i_0>=0,F>=V_i_0+1] 

* Chain [12]: 0
  with precondition: [B=2,G=0,C=V_4,D=V_ci_0,E=V_22,V_i_0=F,V_i_0>=0] 


#### Cost of loops [13] 

 * loop 13:eval_make_funny_pointers_bb5_in(V_4,V_ci_0,V_22,V_i_0,V_i_1,B,C,D,E,F,G,H) -> [eval_make_funny_pointers_bb5_in(V_4',V_ci_0',V_22',V_i_0',V_i_1',B',C',D',E',F',G',H')] 
1
#### Cost of phase [13]:eval_make_funny_pointers_bb5_in(V_4,V_ci_0,V_22,V_i_0,V_i_1,B,C,D,E,F,G,H) -> [eval_make_funny_pointers_bb5_in(V_4',V_ci_0',V_22',V_i_0',V_i_1',B',C',D',E',F',G',H')] 
1*it(13)+0
  Such that:it(13) =< 2*V_22-V_i_1
it(13) =< 2*V_22-V_i_1-2*V_22'+V_i_1'

#### Cost of chains of eval_make_funny_pointers_bb5_in(V_4,V_ci_0,V_22,V_i_0,V_i_1,B,C,D,E,F,G,H):
* Chain [[13],14]: 1*it(13)+0
  Such that:it(13) =< 2*V_22-V_i_1

  with precondition: [B=3,H=0,V_4=C,V_ci_0=D,V_22=E,V_i_0=F,2*V_22=G,2*V_22>=V_i_1+1] 

* Chain [14]: 0
  with precondition: [B=3,H=0,C=V_4,D=V_ci_0,F=V_i_0,V_22=E,V_i_1=G,V_i_1>=2*V_22] 


#### Cost of loops [15] 

 * loop 15:eval_make_funny_pointers_bb8_in(V_4,V_ci_0,V_22,V_i_0,V_i_1,V_i_2,B,C,D) -> [eval_make_funny_pointers_bb8_in(V_4',V_ci_0',V_22',V_i_0',V_i_1',V_i_2',B',C',D')] 
1
#### Cost of phase [15]:eval_make_funny_pointers_bb8_in(V_4,V_ci_0,V_22,V_i_0,V_i_1,V_i_2,B,C,D) -> [eval_make_funny_pointers_bb8_in(V_4',V_ci_0',V_22',V_i_0',V_i_1',V_i_2',B',C',D')] 
1*it(15)+0
  Such that:it(15) =< V_22-V_i_2
it(15) =< V_22-V_i_2-V_22'+V_i_2'

#### Cost of chains of eval_make_funny_pointers_bb8_in(V_4,V_ci_0,V_22,V_i_0,V_i_1,V_i_2,B,C,D):
* Chain [[15],16]: 1*it(15)+0
  Such that:it(15) =< V_22-V_i_2

  with precondition: [B=4,V_4=C,V_ci_0+1=D,V_22>=V_i_2+1] 

* Chain [16]: 0
  with precondition: [B=4,C=V_4,D=V_ci_0+1,V_i_2>=V_22] 


#### Cost of loops [18] 

 * loop 18:eval_make_funny_pointers_bb1_in(V_4,V_ci_0,B) -> [eval_make_funny_pointers_bb1_in(V_4',V_ci_0',B')] 
1*s(8)+0
#### Cost of phase [18]:eval_make_funny_pointers_bb1_in(V_4,V_ci_0,B) -> [eval_make_funny_pointers_bb1_in(V_4',V_ci_0',B')] 
1*s(9)+0
#### Cost of phase [18]:eval_make_funny_pointers_bb1_in(V_4,V_ci_0,B) -> [eval_make_funny_pointers_bb1_in(V_4',V_ci_0',B')] 
1*s(9)+0
#### Cost of phase [18]:eval_make_funny_pointers_bb1_in(V_4,V_ci_0,B) -> [eval_make_funny_pointers_bb1_in(V_4',V_ci_0',B')] 
1*s(9)+0
#### Cost of chains of eval_make_funny_pointers_bb1_in(V_4,V_ci_0,B):
* Chain [[18]]...: 1*s(9)+0
  with precondition: [B=5] 

* Chain [[18],19]: 1*s(9)+0
  with precondition: [B=5,V_ci_0>=0] 

* Chain [[18],17]...: 2*aux(2)+0
  with precondition: [B=5,V_ci_0>=0] 

* Chain [19]: 0
  with precondition: [B=5,V_ci_0>=0] 

* Chain [17]...: 1*aux(2)+0
  with precondition: [B=5,V_ci_0>=0] 


#### Cost of chains of eval_make_funny_pointers_bb0_in(B):
* Chain [21]: 1*s(15)+1
  with precondition: [] 

* Chain [20]...: 1*aux(5)+0
  with precondition: [] 


#### Cost of chains of eval_make_funny_pointers_start(B):
* Chain [23]: 1*s(18)+1
  with precondition: [] 

* Chain [22]...: 1*s(19)+0
  with precondition: [] 


Closed-form bounds of eval_make_funny_pointers_start(B): 
-------------------------------------
* Chain [23] with precondition: [] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [22]... with precondition: [] 
    - Upper bound: inf 
    - Complexity: infinity 

### Maximum cost of eval_make_funny_pointers_start(B): inf 
Asymptotic class: infinity 

Time statistics: 
-------------------------------------
* Partial evaluation computed in 44 ms.
* Invariants computed in 37 ms.
   - Backward Invariants 18 ms.
   - Transitive Invariants 9 ms.
* Refinement performed in 119 ms.
* Termination proved in 9 ms.
* Upper bounds computed in 58 ms.
   - Equation cost structures 27 ms.
   - Phase cost structures 32 ms.
   - Chain cost structures 16 ms.
   - Solving cost expressions 0 ms.
* Total analysis performed in 305 ms.

